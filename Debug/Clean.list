
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025328  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d350  080254e8  080254e8  000354e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08032838  08032838  00042838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08032840  08032840  00042840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08032844  08032844  00042844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000015c4  20000000  08032848  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00095068  200015c8  08033e0c  000515c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20096630  08033e0c  00056630  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000515c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007b382  00000000  00000000  000515f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c629  00000000  00000000  000cc976  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002c1ee  00000000  00000000  000d8f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002fb8  00000000  00000000  00105190  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004050  00000000  00000000  00108148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001fa43  00000000  00000000  0010c198  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f42d  00000000  00000000  0012bbdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0013b008  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a648  00000000  00000000  0013b084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200015c8 	.word	0x200015c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080254d0 	.word	0x080254d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200015cc 	.word	0x200015cc
 80001fc:	080254d0 	.word	0x080254d0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97a 	b.w	8000fbc <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9e08      	ldr	r6, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d151      	bne.n	8000d94 <__udivmoddi4+0xb4>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0xf2>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0c20 	rsb	ip, lr, #32
 8000d04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d1c:	0c25      	lsrs	r5, r4, #16
 8000d1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d22:	fa1f f987 	uxth.w	r9, r7
 8000d26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d2e:	fb08 f309 	mul.w	r3, r8, r9
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x6c>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d3c:	f080 8123 	bcs.w	8000f86 <__udivmoddi4+0x2a6>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	f240 8120 	bls.w	8000f86 <__udivmoddi4+0x2a6>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aed      	subs	r5, r5, r3
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb00 f909 	mul.w	r9, r0, r9
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x98>
 8000d64:	19e4      	adds	r4, r4, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 810a 	bcs.w	8000f82 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8107 	bls.w	8000f82 <__udivmoddi4+0x2a2>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 0409 	sub.w	r4, r4, r9
 8000d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d061      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6034      	str	r4, [r6, #0]
 8000d8e:	6073      	str	r3, [r6, #4]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0xc8>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d054      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	f040 808e 	bne.w	8000ece <__udivmoddi4+0x1ee>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xdc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2d0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	46ac      	mov	ip, r5
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d03f      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b912      	cbnz	r2, 8000dda <__udivmoddi4+0xfa>
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dda:	fab7 fe87 	clz	lr, r7
 8000dde:	f1be 0f00 	cmp.w	lr, #0
 8000de2:	d134      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de4:	1beb      	subs	r3, r5, r7
 8000de6:	0c3a      	lsrs	r2, r7, #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000df2:	0c25      	lsrs	r5, r4, #16
 8000df4:	fb02 3318 	mls	r3, r2, r8, r3
 8000df8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfc:	fb0c f308 	mul.w	r3, ip, r8
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	f200 80d1 	bhi.w	8000fb4 <__udivmoddi4+0x2d4>
 8000e12:	4680      	mov	r8, r0
 8000e14:	1aed      	subs	r5, r5, r3
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e24:	fb0c fc00 	mul.w	ip, ip, r0
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e44:	e79d      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0420 	rsb	r4, lr, #32
 8000e52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e5e:	0c3a      	lsrs	r2, r7, #16
 8000e60:	fa25 f404 	lsr.w	r4, r5, r4
 8000e64:	ea48 0803 	orr.w	r8, r8, r3
 8000e68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e70:	fb02 4411 	mls	r4, r2, r1, r4
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1bc>
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e8e:	f080 808a 	bcs.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	f240 8087 	bls.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e98:	3902      	subs	r1, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	fa1f f588 	uxth.w	r5, r8
 8000ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eaa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000eae:	fb00 f30c 	mul.w	r3, r0, ip
 8000eb2:	42ab      	cmp	r3, r5
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1e6>
 8000eb6:	19ed      	adds	r5, r5, r7
 8000eb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebc:	d26f      	bcs.n	8000f9e <__udivmoddi4+0x2be>
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d96d      	bls.n	8000f9e <__udivmoddi4+0x2be>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	1aeb      	subs	r3, r5, r3
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	e78f      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ece:	f1c1 0720 	rsb	r7, r1, #32
 8000ed2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	fa05 f401 	lsl.w	r4, r5, r1
 8000edc:	ea48 0303 	orr.w	r3, r8, r3
 8000ee0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ef2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ef6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000efa:	fa1f f883 	uxth.w	r8, r3
 8000efe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f02:	fb09 f408 	mul.w	r4, r9, r8
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x244>
 8000f12:	18ed      	adds	r5, r5, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d243      	bcs.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	d941      	bls.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	441d      	add	r5, r3
 8000f24:	1b2d      	subs	r5, r5, r4
 8000f26:	fa1f fe8e 	uxth.w	lr, lr
 8000f2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x26e>
 8000f3e:	18e4      	adds	r4, r4, r3
 8000f40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f44:	d229      	bcs.n	8000f9a <__udivmoddi4+0x2ba>
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d927      	bls.n	8000f9a <__udivmoddi4+0x2ba>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	441c      	add	r4, r3
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba4 0408 	sub.w	r4, r4, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454c      	cmp	r4, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	464d      	mov	r5, r9
 8000f60:	d315      	bcc.n	8000f8e <__udivmoddi4+0x2ae>
 8000f62:	d012      	beq.n	8000f8a <__udivmoddi4+0x2aa>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x29c>
 8000f66:	ebba 030e 	subs.w	r3, sl, lr
 8000f6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40cb      	lsrs	r3, r1
 8000f74:	431f      	orrs	r7, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	6037      	str	r7, [r6, #0]
 8000f7a:	6074      	str	r4, [r6, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	4618      	mov	r0, r3
 8000f84:	e6f8      	b.n	8000d78 <__udivmoddi4+0x98>
 8000f86:	4690      	mov	r8, r2
 8000f88:	e6e0      	b.n	8000d4c <__udivmoddi4+0x6c>
 8000f8a:	45c2      	cmp	sl, r8
 8000f8c:	d2ea      	bcs.n	8000f64 <__udivmoddi4+0x284>
 8000f8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f92:	eb69 0503 	sbc.w	r5, r9, r3
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7e4      	b.n	8000f64 <__udivmoddi4+0x284>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	e7d7      	b.n	8000f4e <__udivmoddi4+0x26e>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e791      	b.n	8000ec6 <__udivmoddi4+0x1e6>
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	e7be      	b.n	8000f24 <__udivmoddi4+0x244>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	e778      	b.n	8000e9c <__udivmoddi4+0x1bc>
 8000faa:	3802      	subs	r0, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	e745      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000fb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	e72b      	b.n	8000e14 <__udivmoddi4+0x134>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_InitTick+0x2c>)
{
 8000fc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 fd34 	bl	8001a3c <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b938      	cbnz	r0, 8000fe8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcde 	bl	80019a0 <HAL_NVIC_SetPriority>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000ed4 	.word	0x20000ed4

08000ff0 <HAL_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 fcc2 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffe1 	bl	8000fc0 <HAL_InitTick>
 8000ffe:	4604      	mov	r4, r0
 8001000:	b918      	cbnz	r0, 800100a <HAL_Init+0x1a>
    HAL_MspInit();
 8001002:	f01e fdf1 	bl	801fbe8 <HAL_MspInit>
}
 8001006:	4620      	mov	r0, r4
 8001008:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800100a:	2401      	movs	r4, #1
 800100c:	e7fb      	b.n	8001006 <HAL_Init+0x16>
	...

08001010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001010:	4a02      	ldr	r2, [pc, #8]	; (800101c <HAL_IncTick+0xc>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2009067c 	.word	0x2009067c

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2009067c 	.word	0x2009067c

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001036:	4605      	mov	r5, r0
  {
    wait++;
 8001038:	bf18      	it	ne
 800103a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	4284      	cmp	r4, r0
 8001044:	d8fa      	bhi.n	800103c <HAL_Delay+0x10>
  {
  }
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001048:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800104e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001052:	fab6 f386 	clz	r3, r6
 8001056:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800105a:	40de      	lsrs	r6, r3
 800105c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800105e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001062:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001066:	fa93 f5a3 	rbit	r5, r3
 800106a:	fab5 f585 	clz	r5, r5
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	2407      	movs	r4, #7
 8001074:	fa21 f505 	lsr.w	r5, r1, r5
 8001078:	fa04 f505 	lsl.w	r5, r4, r5
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001084:	40d9      	lsrs	r1, r3
 8001086:	ea24 0405 	bic.w	r4, r4, r5
 800108a:	fa02 f101 	lsl.w	r1, r2, r1
 800108e:	4321      	orrs	r1, r4
 8001090:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001094:	bd70      	pop	{r4, r5, r6, pc}
	...

08001098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80010a8:	b925      	cbnz	r5, 80010b4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	f01e ff59 	bl	801ff60 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010b4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ba:	bf41      	itttt	mi
 80010bc:	689a      	ldrmi	r2, [r3, #8]
 80010be:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010c2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010c6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010c8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ca:	00d1      	lsls	r1, r2, #3
 80010cc:	d576      	bpl.n	80011bc <HAL_ADC_Init+0x124>
 80010ce:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	f140 808a 	bpl.w	80011ea <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	06d5      	lsls	r5, r2, #27
 80010dc:	f100 8093 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010e0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e2:	0751      	lsls	r1, r2, #29
 80010e4:	f100 808f 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ea:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	f040 8089 	bne.w	8001212 <HAL_ADC_Init+0x17a>
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	f140 8085 	bpl.w	8001212 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001108:	68e5      	ldr	r5, [r4, #12]
 800110a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800110c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800110e:	432a      	orrs	r2, r5
 8001110:	68a5      	ldr	r5, [r4, #8]
 8001112:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001114:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001116:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001118:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800111c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	bf02      	ittt	eq
 8001122:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001124:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001128:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800112e:	b121      	cbz	r1, 800113a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001130:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001132:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001136:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001138:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800113a:	68dd      	ldr	r5, [r3, #12]
 800113c:	4939      	ldr	r1, [pc, #228]	; (8001224 <HAL_ADC_Init+0x18c>)
 800113e:	4029      	ands	r1, r5
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f012 0f0c 	tst.w	r2, #12
 800114a:	d120      	bne.n	800118e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800114c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800114e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001152:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001154:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001158:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800115a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800115e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001160:	f021 0106 	bic.w	r1, r1, #6
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800116a:	2a01      	cmp	r2, #1
 800116c:	d147      	bne.n	80011fe <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	432a      	orrs	r2, r5
 8001176:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	432a      	orrs	r2, r5
 800117e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001180:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001184:	432a      	orrs	r2, r5
 8001186:	f021 0104 	bic.w	r1, r1, #4
 800118a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800118c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001192:	bf05      	ittet	eq
 8001194:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001196:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800119a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800119e:	bf06      	itte	eq
 80011a0:	f021 010f 	biceq.w	r1, r1, #15
 80011a4:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a6:	f022 020f 	bicne.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011b8:	b003      	add	sp, #12
 80011ba:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011bc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <HAL_ADC_Init+0x190>)
 80011c0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Init+0x194>)
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011d6:	220a      	movs	r2, #10
 80011d8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011da:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011dc:	9a01      	ldr	r2, [sp, #4]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	f43f af75 	beq.w	80010ce <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	3a01      	subs	r2, #1
 80011e8:	e7f7      	b.n	80011da <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e76c      	b.n	80010d8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	e7c2      	b.n	800118c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e7d2      	b.n	80011b8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001212:	4907      	ldr	r1, [pc, #28]	; (8001230 <HAL_ADC_Init+0x198>)
 8001214:	6865      	ldr	r5, [r4, #4]
 8001216:	688a      	ldr	r2, [r1, #8]
 8001218:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800121c:	432a      	orrs	r2, r5
 800121e:	608a      	str	r2, [r1, #8]
 8001220:	e772      	b.n	8001108 <HAL_ADC_Init+0x70>
 8001222:	bf00      	nop
 8001224:	fff0c007 	.word	0xfff0c007
 8001228:	001e8480 	.word	0x001e8480
 800122c:	20000ed4 	.word	0x20000ed4
 8001230:	50040300 	.word	0x50040300

08001234 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001236:	6945      	ldr	r5, [r0, #20]
 8001238:	2d08      	cmp	r5, #8
{
 800123a:	4604      	mov	r4, r0
 800123c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	d00a      	beq.n	8001256 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	07dd      	lsls	r5, r3, #31
 8001246:	d505      	bpl.n	8001254 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001254:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fee3 	bl	8001020 <HAL_GetTick>
 800125a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4215      	tst	r5, r2
 8001262:	d01d      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001272:	d10f      	bne.n	8001294 <HAL_ADC_PollForConversion+0x60>
 8001274:	69e2      	ldr	r2, [r4, #28]
 8001276:	b96a      	cbnz	r2, 8001294 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	0711      	lsls	r1, r2, #28
 800127c:	d50a      	bpl.n	8001294 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800127e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001284:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001288:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128a:	bf5e      	ittt	pl
 800128c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800128e:	f042 0201 	orrpl.w	r2, r2, #1
 8001292:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001294:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001296:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001298:	d114      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800129a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a0:	1c70      	adds	r0, r6, #1
 80012a2:	d0dc      	beq.n	800125e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a4:	b946      	cbnz	r6, 80012b8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012b8:	f7ff feb2 	bl	8001020 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	4286      	cmp	r6, r0
 80012c0:	d2cc      	bcs.n	800125c <HAL_ADC_PollForConversion+0x28>
 80012c2:	e7f0      	b.n	80012a6 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012c4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012c8:	d1e8      	bne.n	800129c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012d0:	6803      	ldr	r3, [r0, #0]
 80012d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012e2:	2b01      	cmp	r3, #1
{
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012e8:	f000 8168 	beq.w	80015bc <HAL_ADC_ConfigChannel+0x2e4>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012f4:	6882      	ldr	r2, [r0, #8]
 80012f6:	0757      	lsls	r7, r2, #29
 80012f8:	f100 815a 	bmi.w	80015b0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d808      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 8001302:	3b02      	subs	r3, #2
 8001304:	2b03      	cmp	r3, #3
 8001306:	d864      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0xfa>
 8001308:	e8df f003 	tbb	[pc, r3]
 800130c:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001310:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001312:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001314:	6861      	ldr	r1, [r4, #4]
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001326:	40de      	lsrs	r6, r3
 8001328:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800132c:	f001 011f 	and.w	r1, r1, #31
 8001330:	231f      	movs	r3, #31
 8001332:	fa03 f201 	lsl.w	r2, r3, r1
 8001336:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800133a:	ea23 0302 	bic.w	r3, r3, r2
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001344:	408a      	lsls	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800134c:	6882      	ldr	r2, [r0, #8]
 800134e:	f012 020c 	ands.w	r2, r2, #12
 8001352:	d126      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800135a:	d13c      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800135c:	6821      	ldr	r1, [r4, #0]
 800135e:	f7ff fe73 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001362:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001364:	6953      	ldr	r3, [r2, #20]
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800136c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800136e:	f8d5 e000 	ldr.w	lr, [r5]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001378:	2e04      	cmp	r6, #4
 800137a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800137e:	d033      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001380:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001388:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800138c:	4081      	lsls	r1, r0
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	4319      	orrs	r1, r3
 8001394:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001398:	4bc5      	ldr	r3, [pc, #788]	; (80016b0 <HAL_ADC_ConfigChannel+0x3d8>)
 800139a:	4003      	ands	r3, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	6828      	ldr	r0, [r5, #0]
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 8108 	bne.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
 80013b0:	6803      	ldr	r3, [r0, #0]
 80013b2:	07de      	lsls	r6, r3, #31
 80013b4:	f140 8104 	bpl.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	2300      	movs	r3, #0
 80013bc:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013c0:	b003      	add	sp, #12
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013c4:	2312      	movs	r3, #18
 80013c6:	e7a4      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013c8:	2318      	movs	r3, #24
 80013ca:	e7a2      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	e79f      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	e79d      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013d6:	461a      	mov	r2, r3
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	f7ff fe35 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013de:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013e0:	6953      	ldr	r3, [r2, #20]
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	e7c0      	b.n	800136a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ec:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013f0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013f4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x19a>
 80013fc:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8001400:	4287      	cmp	r7, r0
 8001402:	f040 8149 	bne.w	8001698 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 8001406:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800140a:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001410:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001414:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001418:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800141c:	bb9f      	cbnz	r7, 8001486 <HAL_ADC_ConfigChannel+0x1ae>
 800141e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001422:	4283      	cmp	r3, r0
 8001424:	f040 813d 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800142c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800142e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	f102 0608 	add.w	r6, r2, #8
 800143a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800143e:	bb77      	cbnz	r7, 800149e <HAL_ADC_ConfigChannel+0x1c6>
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	4283      	cmp	r3, r0
 8001446:	f040 8147 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800144a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800144e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001450:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800145c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001460:	bb4e      	cbnz	r6, 80014b6 <HAL_ADC_ConfigChannel+0x1de>
 8001462:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001466:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001468:	bf04      	itt	eq
 800146a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800146e:	6002      	streq	r2, [r0, #0]
 8001470:	e797      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
 8001472:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001476:	fab0 f080 	clz	r0, r0
 800147a:	4287      	cmp	r7, r0
 800147c:	d0c3      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800147e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001482:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	4283      	cmp	r3, r0
 8001490:	d0ca      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x150>
 8001492:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001494:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	f102 0608 	add.w	r6, r2, #8
 800149a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	4283      	cmp	r3, r0
 80014a8:	d0cf      	beq.n	800144a <HAL_ADC_ConfigChannel+0x172>
 80014aa:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ae:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	e7d2      	b.n	8001466 <HAL_ADC_ConfigChannel+0x18e>
 80014c0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	3201      	adds	r2, #1
 80014ca:	2a09      	cmp	r2, #9
 80014cc:	d90d      	bls.n	80014ea <HAL_ADC_ConfigChannel+0x212>
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	3201      	adds	r2, #1
 80014d8:	0696      	lsls	r6, r2, #26
 80014da:	fa93 f1a3 	rbit	r1, r3
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	1c4a      	adds	r2, r1, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4091      	lsls	r1, r2
 80014e8:	e016      	b.n	8001518 <HAL_ADC_ConfigChannel+0x240>
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	3201      	adds	r2, #1
 80014f4:	0692      	lsls	r2, r2, #26
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	1c4e      	adds	r6, r1, #1
 8001500:	2101      	movs	r1, #1
 8001502:	40b1      	lsls	r1, r6
 8001504:	e07f      	b.n	8001606 <HAL_ADC_ConfigChannel+0x32e>
 8001506:	fa93 f1a3 	rbit	r1, r3
 800150a:	fab1 f181 	clz	r1, r1
 800150e:	3101      	adds	r1, #1
 8001510:	e080      	b.n	8001614 <HAL_ADC_ConfigChannel+0x33c>
 8001512:	4616      	mov	r6, r2
 8001514:	fa01 f10e 	lsl.w	r1, r1, lr
 8001518:	ea41 0206 	orr.w	r2, r1, r6
 800151c:	b94f      	cbnz	r7, 8001532 <HAL_ADC_ConfigChannel+0x25a>
 800151e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001526:	f1a3 011b 	sub.w	r1, r3, #27
 800152a:	0509      	lsls	r1, r1, #20
 800152c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001530:	e073      	b.n	800161a <HAL_ADC_ConfigChannel+0x342>
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	e7f2      	b.n	8001522 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001544:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001546:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800154a:	e072      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800154e:	429a      	cmp	r2, r3
 8001550:	f47f af32 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001556:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001558:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800155c:	e069      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800155e:	4955      	ldr	r1, [pc, #340]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001560:	428a      	cmp	r2, r1
 8001562:	d111      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001564:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f47f af26 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 800156c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001570:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001574:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001578:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800157c:	430b      	orrs	r3, r1
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001586:	e717      	b.n	80013b8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001588:	494c      	ldr	r1, [pc, #304]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800158a:	428a      	cmp	r2, r1
 800158c:	f47f af14 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	f47f af10 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800159c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ae:	e7e8      	b.n	8001582 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015b8:	4618      	mov	r0, r3
 80015ba:	e6fe      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015bc:	2002      	movs	r0, #2
 80015be:	e6ff      	b.n	80013c0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015c0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015c4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f001 0e20 	and.w	lr, r1, #32
 80015ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80015d2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015d6:	4072      	eors	r2, r6
 80015d8:	403a      	ands	r2, r7
 80015da:	4072      	eors	r2, r6
 80015dc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015e6:	2f00      	cmp	r7, #0
 80015e8:	f47f af6a 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x1e8>
 80015ec:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015f0:	f101 0e01 	add.w	lr, r1, #1
 80015f4:	f1be 0f09 	cmp.w	lr, #9
 80015f8:	f04f 0101 	mov.w	r1, #1
 80015fc:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8001600:	d887      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x23a>
 8001602:	fa01 f10e 	lsl.w	r1, r1, lr
 8001606:	430a      	orrs	r2, r1
 8001608:	2f00      	cmp	r7, #0
 800160a:	f47f af7c 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x22e>
 800160e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001618:	0509      	lsls	r1, r1, #20
 800161a:	4311      	orrs	r1, r2
 800161c:	68a2      	ldr	r2, [r4, #8]
 800161e:	f7ff fd13 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d188      	bne.n	800153c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001632:	f47f aec1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	6898      	ldr	r0, [r3, #8]
 800163a:	f000 0003 	and.w	r0, r0, #3
 800163e:	2801      	cmp	r0, #1
 8001640:	d102      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x370>
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	07c9      	lsls	r1, r1, #31
 8001646:	d422      	bmi.n	800168e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001648:	4920      	ldr	r1, [pc, #128]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 800164a:	428a      	cmp	r2, r1
 800164c:	d187      	bne.n	800155e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f47f aeb1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001656:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800165a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800165e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001662:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001666:	430b      	orrs	r3, r1
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fbb3 f2f2 	udiv	r2, r3, r2
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	4353      	muls	r3, r2
                wait_loop_index--;
 800167e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f ae98 	beq.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	e7f7      	b.n	800167e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001696:	e690      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016a0:	e6bd      	b.n	800141e <HAL_ADC_ConfigChannel+0x146>
 80016a2:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	f102 0608 	add.w	r6, r2, #8
 80016aa:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016ae:	e6c7      	b.n	8001440 <HAL_ADC_ConfigChannel+0x168>
 80016b0:	03fff000 	.word	0x03fff000
 80016b4:	cb840000 	.word	0xcb840000
 80016b8:	50040300 	.word	0x50040300
 80016bc:	80000001 	.word	0x80000001
 80016c0:	50040000 	.word	0x50040000
 80016c4:	0007ffff 	.word	0x0007ffff
 80016c8:	407f0000 	.word	0x407f0000
 80016cc:	c7520000 	.word	0xc7520000
 80016d0:	20000ed4 	.word	0x20000ed4
 80016d4:	001e8480 	.word	0x001e8480
 80016d8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016dc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016e4:	e6bd      	b.n	8001462 <HAL_ADC_ConfigChannel+0x18a>
 80016e6:	bf00      	nop

080016e8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	f012 0f0c 	tst.w	r2, #12
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016f4:	d101      	bne.n	80016fa <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0190      	lsls	r0, r2, #6
 80016fe:	d52a      	bpl.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8001700:	69e2      	ldr	r2, [r4, #28]
 8001702:	2a01      	cmp	r2, #1
 8001704:	d127      	bne.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001706:	69a2      	ldr	r2, [r4, #24]
 8001708:	2a01      	cmp	r2, #1
 800170a:	d124      	bne.n	8001756 <ADC_ConversionStop+0x6e>
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	0649      	lsls	r1, r1, #25
 8001712:	d514      	bpl.n	800173e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001718:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	0756      	lsls	r6, r2, #29
 800171e:	d50a      	bpl.n	8001736 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001720:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001722:	0795      	lsls	r5, r2, #30
 8001724:	d407      	bmi.n	8001736 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800172c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001736:	2901      	cmp	r1, #1
 8001738:	d10f      	bne.n	800175a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800173a:	2504      	movs	r5, #4
        break;
 800173c:	e01e      	b.n	800177c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800173e:	3a01      	subs	r2, #1
 8001740:	d1e5      	bne.n	800170e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001756:	2902      	cmp	r1, #2
 8001758:	d1df      	bne.n	800171a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	0710      	lsls	r0, r2, #28
 800175e:	d506      	bpl.n	800176e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001760:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001762:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001764:	bf5e      	ittt	pl
 8001766:	689a      	ldrpl	r2, [r3, #8]
 8001768:	f042 0220 	orrpl.w	r2, r2, #32
 800176c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800176e:	2902      	cmp	r1, #2
 8001770:	d003      	beq.n	800177a <ADC_ConversionStop+0x92>
 8001772:	2903      	cmp	r1, #3
 8001774:	d1e1      	bne.n	800173a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001776:	250c      	movs	r5, #12
 8001778:	e000      	b.n	800177c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800177a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800177c:	f7ff fc50 	bl	8001020 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	421d      	tst	r5, r3
 8001788:	d0b5      	beq.n	80016f6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178a:	f7ff fc49 	bl	8001020 <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	2805      	cmp	r0, #5
 8001792:	d9f6      	bls.n	8001782 <ADC_ConversionStop+0x9a>
 8001794:	e7d5      	b.n	8001742 <ADC_ConversionStop+0x5a>
 8001796:	bf00      	nop
 8001798:	0a340001 	.word	0x0a340001

0800179c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800179c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800179e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80017a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
{
 80017ac:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ae:	d108      	bne.n	80017c2 <ADC_Enable+0x26>
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	07d8      	lsls	r0, r3, #31
 80017b4:	d505      	bpl.n	80017c2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	e012      	b.n	80017e8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017c2:	6891      	ldr	r1, [r2, #8]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <ADC_Enable+0x94>)
 80017c6:	4219      	tst	r1, r3
 80017c8:	d127      	bne.n	800181a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ADC_Enable+0x98>)
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <ADC_Enable+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e4:	230a      	movs	r3, #10
 80017e6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e5      	bne.n	80017bc <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	4e11      	ldr	r6, [pc, #68]	; (800183c <ADC_Enable+0xa0>)
 80017f6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d4da      	bmi.n	80017b6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001800:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001802:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8001804:	bf5f      	itttt	pl
 8001806:	6893      	ldrpl	r3, [r2, #8]
 8001808:	4033      	andpl	r3, r6
 800180a:	f043 0301 	orrpl.w	r3, r3, #1
 800180e:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001810:	f7ff fc06 	bl	8001020 <HAL_GetTick>
 8001814:	1b40      	subs	r0, r0, r5
 8001816:	2802      	cmp	r0, #2
 8001818:	d9ee      	bls.n	80017f8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7c4      	b.n	80017b8 <ADC_Enable+0x1c>
 800182e:	bf00      	nop
 8001830:	8000003f 	.word	0x8000003f
 8001834:	20000ed4 	.word	0x20000ed4
 8001838:	001e8480 	.word	0x001e8480
 800183c:	7fffffc0 	.word	0x7fffffc0

08001840 <HAL_ADC_Start>:
{
 8001840:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001842:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001844:	689d      	ldr	r5, [r3, #8]
 8001846:	f015 0504 	ands.w	r5, r5, #4
{
 800184a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800184c:	d13a      	bne.n	80018c4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800184e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001852:	2b01      	cmp	r3, #1
 8001854:	d036      	beq.n	80018c4 <HAL_ADC_Start+0x84>
 8001856:	2301      	movs	r3, #1
 8001858:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800185c:	f7ff ff9e 	bl	800179c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001860:	2800      	cmp	r0, #0
 8001862:	d12c      	bne.n	80018be <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001874:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800187a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800187e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	bf48      	it	mi
 8001882:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001886:	bf52      	itee	pl
 8001888:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188a:	f023 0306 	bicmi.w	r3, r3, #6
 800188e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001890:	231c      	movs	r3, #28
 8001892:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001894:	2300      	movs	r3, #0
 8001896:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800189a:	68d3      	ldr	r3, [r2, #12]
 800189c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189e:	bf41      	itttt	mi
 80018a0:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 80018a2:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80018a6:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80018aa:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6093      	str	r3, [r2, #8]
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018be:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	6802      	ldr	r2, [r0, #0]
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
 80018cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ce:	6890      	ldr	r0, [r2, #8]
 80018d0:	f000 0003 	and.w	r0, r0, #3
 80018d4:	2801      	cmp	r0, #1
 80018d6:	d001      	beq.n	80018dc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	07d9      	lsls	r1, r3, #31
 80018e0:	d5fa      	bpl.n	80018d8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f003 030d 	and.w	r3, r3, #13
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11f      	bne.n	800192c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018fc:	2303      	movs	r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001900:	f7ff fb8e 	bl	8001020 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d5e4      	bpl.n	80018d8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190e:	f7ff fb87 	bl	8001020 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800193c:	bd38      	pop	{r3, r4, r5, pc}

0800193e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800193e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001942:	2b01      	cmp	r3, #1
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001948:	d016      	beq.n	8001978 <HAL_ADC_Stop+0x3a>
 800194a:	2301      	movs	r3, #1
 800194c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001950:	2103      	movs	r1, #3
 8001952:	f7ff fec9 	bl	80016e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001956:	b958      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ffb5 	bl	80018c8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800195e:	b938      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001970:	2300      	movs	r3, #0
 8001972:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001976:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001978:	2002      	movs	r0, #2
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800198c:	0200      	lsls	r0, r0, #8
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b530      	push	{r4, r5, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf28      	it	cs
 80019b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 0501 	mov.w	r5, #1
 80019bc:	fa05 f303 	lsl.w	r3, r5, r3
 80019c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c4:	bf8c      	ite	hi
 80019c6:	3c03      	subhi	r4, #3
 80019c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	4019      	ands	r1, r3
 80019cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ce:	fa05 f404 	lsl.w	r4, r5, r4
 80019d2:	3c01      	subs	r4, #1
 80019d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	ea42 0201 	orr.w	r2, r2, r1
 80019dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	bfaf      	iteee	ge
 80019e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	f000 000f 	andlt.w	r0, r0, #15
 80019ea:	4b06      	ldrlt	r3, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	bfa5      	ittet	ge
 80019f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019fc:	bd30      	pop	{r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	0942      	lsrs	r2, r0, #5
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 001f 	and.w	r0, r0, #31
 8001a10:	fa03 f000 	lsl.w	r0, r3, r0
 8001a14:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_NVIC_EnableIRQ+0x14>)
 8001a16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a20:	0943      	lsrs	r3, r0, #5
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 001f 	and.w	r0, r0, #31
 8001a28:	fa02 f000 	lsl.w	r0, r2, r0
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <HAL_NVIC_DisableIRQ+0x18>)
 8001a30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a42:	d20a      	bcs.n	8001a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	21f0      	movs	r1, #240	; 0xf0
 8001a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a68:	0943      	lsrs	r3, r0, #5
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f000 001f 	and.w	r0, r0, #31
 8001a70:	fa02 f000 	lsl.w	r0, r2, r0
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a84:	4770      	bx	lr

08001a86 <HAL_SYSTICK_IRQHandler>:
{
 8001a86:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a88:	f7ff fffc 	bl	8001a84 <HAL_SYSTICK_Callback>
 8001a8c:	bd08      	pop	{r3, pc}

08001a8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8e:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a90:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001a92:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001a94:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001a96:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001a98:	b114      	cbz	r4, 8001aa0 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a9a:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001a9c:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001a9e:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aa0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001aa2:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001aa4:	f004 051c 	and.w	r5, r4, #28
 8001aa8:	2401      	movs	r4, #1
 8001aaa:	40ac      	lsls	r4, r5
 8001aac:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aae:	6804      	ldr	r4, [r0, #0]
 8001ab0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	6883      	ldr	r3, [r0, #8]
 8001ab4:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ab6:	bf0b      	itete	eq
 8001ab8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001aba:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001abc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001abe:	60e2      	strne	r2, [r4, #12]
 8001ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ac4 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ac4:	6803      	ldr	r3, [r0, #0]
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
  }
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001ac6:	490d      	ldr	r1, [pc, #52]	; (8001afc <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8001aca:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001acc:	4c0d      	ldr	r4, [pc, #52]	; (8001b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001ace:	42a3      	cmp	r3, r4
 8001ad0:	bf88      	it	hi
 8001ad2:	460a      	movhi	r2, r1
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ad4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001ad6:	f021 0103 	bic.w	r1, r1, #3
 8001ada:	440a      	add	r2, r1
 8001adc:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ade:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001ae2:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ae4:	3b08      	subs	r3, #8
 8001ae6:	2214      	movs	r2, #20
 8001ae8:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f003 031c 	and.w	r3, r3, #28
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	6503      	str	r3, [r0, #80]	; 0x50
 8001af8:	bd10      	pop	{r4, pc}
 8001afa:	bf00      	nop
 8001afc:	4002081c 	.word	0x4002081c
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020407 	.word	0x40020407
 8001b08:	40020880 	.word	0x40020880

08001b0c <HAL_DMA_Init>:
{
 8001b0c:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8001b0e:	4604      	mov	r4, r0
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d05d      	beq.n	8001bd0 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b14:	6801      	ldr	r1, [r0, #0]
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_DMA_Init+0xc8>)
 8001b18:	4299      	cmp	r1, r3
 8001b1a:	f04f 0014 	mov.w	r0, #20
 8001b1e:	d84a      	bhi.n	8001bb6 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b20:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <HAL_DMA_Init+0xcc>)
 8001b22:	440a      	add	r2, r1
 8001b24:	fbb2 f2f0 	udiv	r2, r2, r0
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b2c:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001b30:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001b38:	68e0      	ldr	r0, [r4, #12]
 8001b3a:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8001b3c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001b3e:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b40:	6920      	ldr	r0, [r4, #16]
 8001b42:	4303      	orrs	r3, r0
 8001b44:	6960      	ldr	r0, [r4, #20]
 8001b46:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b48:	69a0      	ldr	r0, [r4, #24]
 8001b4a:	4303      	orrs	r3, r0
 8001b4c:	69e0      	ldr	r0, [r4, #28]
 8001b4e:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b50:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b52:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5a:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001b5c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001b5e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff ffaf 	bl	8001ac4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b66:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b70:	bf04      	itt	eq
 8001b72:	2300      	moveq	r3, #0
 8001b74:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b76:	6862      	ldr	r2, [r4, #4]
 8001b78:	b2d3      	uxtb	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b7c:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b80:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b82:	6048      	str	r0, [r1, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b84:	d81f      	bhi.n	8001bc6 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b88:	4815      	ldr	r0, [pc, #84]	; (8001be0 <HAL_DMA_Init+0xd4>)
 8001b8a:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b8c:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b8e:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b90:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b92:	2101      	movs	r1, #1
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b9c:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b9e:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ba0:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba4:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba6:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001ba8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001baa:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001bac:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001bb0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 8001bb4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_DMA_Init+0xd8>)
 8001bb8:	440b      	add	r3, r1
 8001bba:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_DMA_Init+0xdc>)
 8001bc4:	e7b4      	b.n	8001b30 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bca:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bcc:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001bce:	e7ea      	b.n	8001ba6 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8001bd0:	2001      	movs	r0, #1
}
 8001bd2:	bd10      	pop	{r4, pc}
 8001bd4:	40020407 	.word	0x40020407
 8001bd8:	bffdfff8 	.word	0xbffdfff8
 8001bdc:	1000823f 	.word	0x1000823f
 8001be0:	40020940 	.word	0x40020940
 8001be4:	bffdfbf8 	.word	0xbffdfbf8
 8001be8:	40020400 	.word	0x40020400

08001bec <HAL_DMA_Start_IT>:
{
 8001bec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001bee:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001bf2:	2d01      	cmp	r5, #1
{
 8001bf4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001bf6:	d039      	beq.n	8001c6c <HAL_DMA_Start_IT+0x80>
 8001bf8:	2501      	movs	r5, #1
 8001bfa:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bfe:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8001c02:	2d01      	cmp	r5, #1
 8001c04:	f04f 0600 	mov.w	r6, #0
 8001c08:	f04f 0502 	mov.w	r5, #2
 8001c0c:	d12c      	bne.n	8001c68 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c0e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c12:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001c14:	6806      	ldr	r6, [r0, #0]
 8001c16:	6835      	ldr	r5, [r6, #0]
 8001c18:	f025 0501 	bic.w	r5, r5, #1
 8001c1c:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c1e:	f7ff ff36 	bl	8001a8e <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001c22:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001c24:	6803      	ldr	r3, [r0, #0]
 8001c26:	b1ba      	cbz	r2, 8001c58 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c2e:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c30:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001c32:	6811      	ldr	r1, [r2, #0]
 8001c34:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c36:	bf42      	ittt	mi
 8001c38:	6811      	ldrmi	r1, [r2, #0]
 8001c3a:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8001c3e:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001c40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001c42:	b11a      	cbz	r2, 8001c4c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c44:	6811      	ldr	r1, [r2, #0]
 8001c46:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c4a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c54:	2000      	movs	r0, #0
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f022 0204 	bic.w	r2, r2, #4
 8001c5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	f042 020a 	orr.w	r2, r2, #10
 8001c66:	e7e2      	b.n	8001c2e <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001c68:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001c6c:	2002      	movs	r0, #2
}
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}

08001c70 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c70:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001c74:	2b02      	cmp	r3, #2
{
 8001c76:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c78:	d003      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c82:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c84:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	f022 020e 	bic.w	r2, r2, #14
 8001c8c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c96:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ca0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ca2:	f003 021c 	and.w	r2, r3, #28
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001cae:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001cb0:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001cb2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001cb4:	b133      	cbz	r3, 8001cc4 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cbe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001cc0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferAbortCallback != NULL)
 8001cca:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001ccc:	2400      	movs	r4, #0
 8001cce:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001cd2:	b113      	cbz	r3, 8001cda <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001cd4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	4618      	mov	r0, r3
}
 8001cdc:	bd10      	pop	{r4, pc}

08001cde <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cde:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001ce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001ce2:	6803      	ldr	r3, [r0, #0]
{
 8001ce4:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001ce6:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cea:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001cec:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001cee:	2404      	movs	r4, #4
 8001cf0:	4094      	lsls	r4, r2
 8001cf2:	4226      	tst	r6, r4
 8001cf4:	d00e      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x36>
 8001cf6:	f015 0f04 	tst.w	r5, #4
 8001cfa:	d00b      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d00:	bf5e      	ittt	pl
 8001d02:	681a      	ldrpl	r2, [r3, #0]
 8001d04:	f022 0204 	bicpl.w	r2, r2, #4
 8001d08:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001d0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001d0c:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001d0e:	b373      	cbz	r3, 8001d6e <HAL_DMA_IRQHandler+0x90>
}
 8001d10:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001d12:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d14:	2402      	movs	r4, #2
 8001d16:	4094      	lsls	r4, r2
 8001d18:	4226      	tst	r6, r4
 8001d1a:	d012      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x64>
 8001d1c:	f015 0f02 	tst.w	r5, #2
 8001d20:	d00f      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	0695      	lsls	r5, r2, #26
 8001d26:	d406      	bmi.n	8001d36 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f022 020a 	bic.w	r2, r2, #10
 8001d2e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001d36:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d38:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001d3a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001d3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d40:	e7e5      	b.n	8001d0e <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001d42:	2408      	movs	r4, #8
 8001d44:	4094      	lsls	r4, r2
 8001d46:	4234      	tst	r4, r6
 8001d48:	d011      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x90>
 8001d4a:	072c      	lsls	r4, r5, #28
 8001d4c:	d50f      	bpl.n	8001d6e <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	f024 040e 	bic.w	r4, r4, #14
 8001d54:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d56:	2301      	movs	r3, #1
 8001d58:	fa03 f202 	lsl.w	r2, r3, r2
 8001d5c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d5e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001d60:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001d64:	2300      	movs	r3, #0
 8001d66:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001d6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d6c:	e7cf      	b.n	8001d0e <HAL_DMA_IRQHandler+0x30>
}
 8001d6e:	bc70      	pop	{r4, r5, r6}
 8001d70:	4770      	bx	lr
	...

08001d74 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001d76:	6805      	ldr	r5, [r0, #0]
 8001d78:	4e0a      	ldr	r6, [pc, #40]	; (8001da4 <DMA2D_SetConfig+0x30>)
 8001d7a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001d7c:	fa96 f6a6 	rbit	r6, r6
 8001d80:	9f05      	ldr	r7, [sp, #20]
 8001d82:	fab6 f686 	clz	r6, r6
 8001d86:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001d8a:	433c      	orrs	r4, r7
 8001d8c:	40b3      	lsls	r3, r6
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d92:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001d94:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001d9a:	bf0c      	ite	eq
 8001d9c:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001d9e:	60e9      	strne	r1, [r5, #12]
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	3fff0000 	.word	0x3fff0000

08001da8 <HAL_DMA2D_Init>:
{ 
 8001da8:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001daa:	4604      	mov	r4, r0
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d043      	beq.n	8001e38 <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001db0:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001db4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001db8:	b91b      	cbnz	r3, 8001dc2 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001dba:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001dbe:	f01e f9af 	bl	8020120 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	69e0      	ldr	r0, [r4, #28]
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	6862      	ldr	r2, [r4, #4]
 8001dd0:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001dde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de0:	68a2      	ldr	r2, [r4, #8]
 8001de2:	69a0      	ldr	r0, [r4, #24]
 8001de4:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001de8:	4302      	orrs	r2, r0
 8001dea:	f021 0101 	bic.w	r1, r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df4:	68e1      	ldr	r1, [r4, #12]
 8001df6:	0c12      	lsrs	r2, r2, #16
 8001df8:	0412      	lsls	r2, r2, #16
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001dfe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e04:	fa92 f2a2 	rbit	r2, r2
 8001e08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e0c:	fab2 f082 	clz	r0, r2
 8001e10:	fa91 f1a1 	rbit	r1, r1
 8001e14:	6922      	ldr	r2, [r4, #16]
 8001e16:	4082      	lsls	r2, r0
 8001e18:	6960      	ldr	r0, [r4, #20]
 8001e1a:	fab1 f181 	clz	r1, r1
 8001e1e:	fa00 f101 	lsl.w	r1, r0, r1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e2c:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e2e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e30:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e32:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001e36:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001e38:	2001      	movs	r0, #1
}
 8001e3a:	bd38      	pop	{r3, r4, r5, pc}

08001e3c <HAL_DMA2D_Start>:
{
 8001e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001e3e:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001e42:	2c01      	cmp	r4, #1
 8001e44:	f04f 0402 	mov.w	r4, #2
 8001e48:	d00f      	beq.n	8001e6a <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e4a:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001e4e:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001e50:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001e52:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001e56:	9400      	str	r4, [sp, #0]
 8001e58:	f7ff ff8c 	bl	8001d74 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001e5c:	6802      	ldr	r2, [r0, #0]
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	4333      	orrs	r3, r6
 8001e62:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001e64:	2000      	movs	r0, #0
}
 8001e66:	b002      	add	sp, #8
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	e7fb      	b.n	8001e66 <HAL_DMA2D_Start+0x2a>

08001e6e <HAL_DMA2D_PollForTransfer>:
{
 8001e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001e70:	2300      	movs	r3, #0
 8001e72:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001e74:	6803      	ldr	r3, [r0, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	07db      	lsls	r3, r3, #31
{
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001e7e:	d427      	bmi.n	8001ed0 <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	0696      	lsls	r6, r2, #26
 8001e86:	d55c      	bpl.n	8001f42 <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001e88:	f7ff f8ca 	bl	8001020 <HAL_GetTick>
 8001e8c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	06d2      	lsls	r2, r2, #27
 8001e94:	d458      	bmi.n	8001f48 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001e9a:	9a01      	ldr	r2, [sp, #4]
 8001e9c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001ea0:	d05d      	beq.n	8001f5e <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001ea2:	9a01      	ldr	r2, [sp, #4]
 8001ea4:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001ea6:	bf42      	ittt	mi
 8001ea8:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001eaa:	f042 0204 	orrmi.w	r2, r2, #4
 8001eae:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001eb0:	9a01      	ldr	r2, [sp, #4]
 8001eb2:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001eb4:	bf42      	ittt	mi
 8001eb6:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001eb8:	f042 0202 	orrmi.w	r2, r2, #2
 8001ebc:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001ebe:	9a01      	ldr	r2, [sp, #4]
 8001ec0:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001ec2:	bf42      	ittt	mi
 8001ec4:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001ec6:	f042 0201 	orrmi.w	r2, r2, #1
 8001eca:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ecc:	2229      	movs	r2, #41	; 0x29
 8001ece:	e01b      	b.n	8001f08 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001ed0:	f7ff f8a6 	bl	8001020 <HAL_GetTick>
 8001ed4:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	0792      	lsls	r2, r2, #30
 8001edc:	d4d0      	bmi.n	8001e80 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001ee2:	9a01      	ldr	r2, [sp, #4]
 8001ee4:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001ee8:	d017      	beq.n	8001f1a <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001eea:	9a01      	ldr	r2, [sp, #4]
 8001eec:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001eee:	bf42      	ittt	mi
 8001ef0:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001ef2:	f042 0202 	orrmi.w	r2, r2, #2
 8001ef6:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001ef8:	9a01      	ldr	r2, [sp, #4]
 8001efa:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001efc:	bf42      	ittt	mi
 8001efe:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f00:	f042 0201 	orrmi.w	r2, r2, #1
 8001f04:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f06:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f08:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001f10:	2300      	movs	r3, #0
 8001f12:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001f16:	2001      	movs	r0, #1
 8001f18:	e01f      	b.n	8001f5a <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001f1a:	1c69      	adds	r1, r5, #1
 8001f1c:	d0dc      	beq.n	8001ed8 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001f1e:	b955      	cbnz	r5, 8001f36 <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001f20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f22:	f043 0320 	orr.w	r3, r3, #32
 8001f26:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001f28:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001f2a:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001f2c:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001f30:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001f34:	e011      	b.n	8001f5a <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001f36:	f7ff f873 	bl	8001020 <HAL_GetTick>
 8001f3a:	1b80      	subs	r0, r0, r6
 8001f3c:	4285      	cmp	r5, r0
 8001f3e:	d2ca      	bcs.n	8001ed6 <HAL_DMA2D_PollForTransfer+0x68>
 8001f40:	e7ee      	b.n	8001f20 <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	d49f      	bmi.n	8001e88 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	2212      	movs	r2, #18
 8001f4c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001f4e:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 8001f56:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001f5e:	1c69      	adds	r1, r5, #1
 8001f60:	d096      	beq.n	8001e90 <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	d0dc      	beq.n	8001f20 <HAL_DMA2D_PollForTransfer+0xb2>
 8001f66:	f7ff f85b 	bl	8001020 <HAL_GetTick>
 8001f6a:	1b80      	subs	r0, r0, r6
 8001f6c:	4285      	cmp	r5, r0
 8001f6e:	d28e      	bcs.n	8001e8e <HAL_DMA2D_PollForTransfer+0x20>
 8001f70:	e7d6      	b.n	8001f20 <HAL_DMA2D_PollForTransfer+0xb2>
	...

08001f74 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001f74:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001f78:	2b01      	cmp	r3, #1
{   
 8001f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001f80:	d041      	beq.n	8002006 <HAL_DMA2D_ConfigLayer+0x92>
 8001f82:	2201      	movs	r2, #1
 8001f84:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8001f88:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8001f8c:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8001f8e:	2900      	cmp	r1, #0
 8001f90:	d14d      	bne.n	800202e <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f92:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001f94:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f96:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8001f98:	f1a6 0509 	sub.w	r5, r6, #9
 8001f9c:	2d01      	cmp	r5, #1
 8001f9e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001fa2:	d832      	bhi.n	800200a <HAL_DMA2D_ConfigLayer+0x96>
 8001fa4:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8001fb0:	4331      	orrs	r1, r6
 8001fb2:	fa07 f303 	lsl.w	r3, r7, r3
 8001fb6:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8001fb8:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8001fbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001fc8:	fab3 f783 	clz	r7, r3
 8001fcc:	fa96 f6a6 	rbit	r6, r6
 8001fd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001fd2:	40bb      	lsls	r3, r7
 8001fd4:	4f3c      	ldr	r7, [pc, #240]	; (80020c8 <HAL_DMA2D_ConfigLayer+0x154>)
 8001fd6:	ea0e 0707 	and.w	r7, lr, r7
 8001fda:	4339      	orrs	r1, r7
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001fe0:	fab6 f686 	clz	r6, r6
 8001fe4:	fa01 f606 	lsl.w	r6, r1, r6
 8001fe8:	4333      	orrs	r3, r6
 8001fea:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fec:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 8001fee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ff0:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ff2:	d802      	bhi.n	8001ffa <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001ff4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001ff8:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 8002000:	2300      	movs	r3, #0
 8002002:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 8002006:	4618      	mov	r0, r3
}
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	fa91 f1a1 	rbit	r1, r1
 800201a:	fab1 f181 	clz	r1, r1
 800201e:	fa04 f101 	lsl.w	r1, r4, r1
 8002022:	fa07 f303 	lsl.w	r3, r7, r3
 8002026:	430b      	orrs	r3, r1
 8002028:	ea43 0106 	orr.w	r1, r3, r6
 800202c:	e7c4      	b.n	8001fb8 <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800202e:	2418      	movs	r4, #24
 8002030:	fb04 0401 	mla	r4, r4, r1, r0
 8002034:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002038:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800203a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800203c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800203e:	f1a7 0509 	sub.w	r5, r7, #9
 8002042:	2d01      	cmp	r5, #1
 8002044:	d82f      	bhi.n	80020a6 <HAL_DMA2D_ConfigLayer+0x132>
 8002046:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8002052:	4337      	orrs	r7, r6
 8002054:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8002058:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 800205a:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 800205e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8002062:	fa94 f4a4 	rbit	r4, r4
 8002066:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800206a:	fab4 f784 	clz	r7, r4
 800206e:	fa96 f6a6 	rbit	r6, r6
 8002072:	2418      	movs	r4, #24
 8002074:	fb04 0101 	mla	r1, r4, r1, r0
 8002078:	fab6 f686 	clz	r6, r6
 800207c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800207e:	40bc      	lsls	r4, r7
 8002080:	4f11      	ldr	r7, [pc, #68]	; (80020c8 <HAL_DMA2D_ConfigLayer+0x154>)
 8002082:	ea0e 0707 	and.w	r7, lr, r7
 8002086:	433b      	orrs	r3, r7
 8002088:	4323      	orrs	r3, r4
 800208a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800208c:	fa04 f606 	lsl.w	r6, r4, r6
 8002090:	4333      	orrs	r3, r6
 8002092:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002094:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 8002096:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002098:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 800209a:	bf9e      	ittt	ls
 800209c:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 800209e:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 80020a2:	6213      	strls	r3, [r2, #32]
 80020a4:	e7a9      	b.n	8001ffa <HAL_DMA2D_ConfigLayer+0x86>
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	fa9e feae 	rbit	lr, lr
 80020b6:	fabe fe8e 	clz	lr, lr
 80020ba:	fa04 f303 	lsl.w	r3, r4, r3
 80020be:	fa06 f60e 	lsl.w	r6, r6, lr
 80020c2:	4333      	orrs	r3, r6
 80020c4:	e7c8      	b.n	8002058 <HAL_DMA2D_ConfigLayer+0xe4>
 80020c6:	bf00      	nop
 80020c8:	00ccfff0 	.word	0x00ccfff0

080020cc <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <FLASH_Program_Fast+0x20>)
 80020ce:	6953      	ldr	r3, [r2, #20]
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020d6:	b672      	cpsid	i
 80020d8:	f501 7300 	add.w	r3, r1, #512	; 0x200
 80020dc:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80020de:	680a      	ldr	r2, [r1, #0]
 80020e0:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 80020e2:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 80020e4:	4299      	cmp	r1, r3
 80020e6:	d1fa      	bne.n	80020de <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 80020e8:	b662      	cpsie	i
 80020ea:	4770      	bx	lr
 80020ec:	40022000 	.word	0x40022000

080020f0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_FLASH_Unlock+0x1c>)
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80020f6:	bfbf      	itttt	lt
 80020f8:	4a05      	ldrlt	r2, [pc, #20]	; (8002110 <HAL_FLASH_Unlock+0x20>)
 80020fa:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80020fc:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8002100:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002102:	bfba      	itte	lt
 8002104:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	0fc0      	lsrlt	r0, r0, #31
 8002108:	2000      	movge	r0, #0
}
 800210a:	4770      	bx	lr
 800210c:	40022000 	.word	0x40022000
 8002110:	45670123 	.word	0x45670123

08002114 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002114:	4a03      	ldr	r2, [pc, #12]	; (8002124 <HAL_FLASH_Lock+0x10>)
 8002116:	6953      	ldr	r3, [r2, #20]
 8002118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800211c:	6153      	str	r3, [r2, #20]
}
 800211e:	2000      	movs	r0, #0
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000

08002128 <FLASH_WaitForLastOperation>:
{
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7fe ff78 	bl	8001020 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002130:	4c1a      	ldr	r4, [pc, #104]	; (800219c <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 8002132:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002134:	6923      	ldr	r3, [r4, #16]
 8002136:	03db      	lsls	r3, r3, #15
 8002138:	d41e      	bmi.n	8002178 <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800213a:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 800213c:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800213e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002142:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002146:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800214a:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 800214e:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 8002152:	4318      	orrs	r0, r3
 8002154:	d019      	beq.n	800218a <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <FLASH_WaitForLastOperation+0x78>)
 8002158:	6853      	ldr	r3, [r2, #4]
 800215a:	4303      	orrs	r3, r0
 800215c:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 800215e:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 8002162:	bf1e      	ittt	ne
 8002164:	69a2      	ldrne	r2, [r4, #24]
 8002166:	4313      	orrne	r3, r2
 8002168:	61a3      	strne	r3, [r4, #24]
 800216a:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 800216e:	d001      	beq.n	8002174 <FLASH_WaitForLastOperation+0x4c>
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <FLASH_WaitForLastOperation+0x74>)
 8002172:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 8002174:	2001      	movs	r0, #1
 8002176:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002178:	1c6a      	adds	r2, r5, #1
 800217a:	d0db      	beq.n	8002134 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800217c:	f7fe ff50 	bl	8001020 <HAL_GetTick>
 8002180:	1b80      	subs	r0, r0, r6
 8002182:	4285      	cmp	r5, r0
 8002184:	d8d6      	bhi.n	8002134 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8002186:	2003      	movs	r0, #3
 8002188:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800218a:	6923      	ldr	r3, [r4, #16]
 800218c:	f013 0301 	ands.w	r3, r3, #1
 8002190:	d002      	beq.n	8002198 <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002192:	2301      	movs	r3, #1
 8002194:	6123      	str	r3, [r4, #16]
 8002196:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002198:	4618      	mov	r0, r3
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	40022000 	.word	0x40022000
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_FLASH_Program>:
{
 80021a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80021a8:	4c24      	ldr	r4, [pc, #144]	; (800223c <HAL_FLASH_Program+0x98>)
{
 80021aa:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 80021ac:	7823      	ldrb	r3, [r4, #0]
 80021ae:	2b01      	cmp	r3, #1
{
 80021b0:	4607      	mov	r7, r0
 80021b2:	4688      	mov	r8, r1
 80021b4:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80021b6:	d03f      	beq.n	8002238 <HAL_FLASH_Program+0x94>
 80021b8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ba:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80021be:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021c0:	f7ff ffb2 	bl	8002128 <FLASH_WaitForLastOperation>
 80021c4:	4606      	mov	r6, r0
  if(status == HAL_OK)
 80021c6:	bb20      	cbnz	r0, 8002212 <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021c8:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80021ca:	481d      	ldr	r0, [pc, #116]	; (8002240 <HAL_FLASH_Program+0x9c>)
 80021cc:	6805      	ldr	r5, [r0, #0]
 80021ce:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80021d2:	bf17      	itett	ne
 80021d4:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80021d6:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80021d8:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80021dc:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80021de:	bf1c      	itt	ne
 80021e0:	2302      	movne	r3, #2
 80021e2:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80021e4:	b9d7      	cbnz	r7, 800221c <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80021e6:	6945      	ldr	r5, [r0, #20]
 80021e8:	f045 0501 	orr.w	r5, r5, #1
 80021ec:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80021ee:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 80021f2:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80021f4:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021fc:	f7ff ff94 	bl	8002128 <FLASH_WaitForLastOperation>
 8002200:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 8002202:	b125      	cbz	r5, 800220e <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_FLASH_Program+0x9c>)
 8002206:	6953      	ldr	r3, [r2, #20]
 8002208:	ea23 0505 	bic.w	r5, r3, r5
 800220c:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 800220e:	f000 f85d 	bl	80022cc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002212:	2300      	movs	r3, #0
 8002214:	7023      	strb	r3, [r4, #0]
}
 8002216:	4630      	mov	r0, r6
 8002218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800221c:	1e7b      	subs	r3, r7, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d901      	bls.n	8002226 <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8002222:	2500      	movs	r5, #0
 8002224:	e7e8      	b.n	80021f8 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002226:	4649      	mov	r1, r9
 8002228:	4640      	mov	r0, r8
 800222a:	f7ff ff4f 	bl	80020cc <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800222e:	2f02      	cmp	r7, #2
 8002230:	d1f7      	bne.n	8002222 <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8002232:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002236:	e7df      	b.n	80021f8 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8002238:	2602      	movs	r6, #2
 800223a:	e7ec      	b.n	8002216 <HAL_FLASH_Program+0x72>
 800223c:	20000000 	.word	0x20000000
 8002240:	40022000 	.word	0x40022000

08002244 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002244:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <FLASH_MassErase+0x40>)
 8002246:	6a13      	ldr	r3, [r2, #32]
 8002248:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800224c:	4613      	mov	r3, r2
 800224e:	d011      	beq.n	8002274 <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002250:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002252:	bf42      	ittt	mi
 8002254:	6952      	ldrmi	r2, [r2, #20]
 8002256:	f042 0204 	orrmi.w	r2, r2, #4
 800225a:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800225c:	0782      	lsls	r2, r0, #30
 800225e:	d503      	bpl.n	8002268 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002266:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <FLASH_MassErase+0x40>)
 800226a:	6953      	ldr	r3, [r2, #20]
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6153      	str	r3, [r2, #20]
 8002272:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002274:	6953      	ldr	r3, [r2, #20]
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6153      	str	r3, [r2, #20]
 8002280:	e7f2      	b.n	8002268 <FLASH_MassErase+0x24>
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000

08002288 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <FLASH_PageErase+0x40>)
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002290:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002292:	d113      	bne.n	80022bc <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002298:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	00c0      	lsls	r0, r0, #3
 800229e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80022a2:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80022a6:	4310      	orrs	r0, r2
 80022a8:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	f042 0202 	orr.w	r2, r2, #2
 80022b0:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 80022bc:	07c9      	lsls	r1, r1, #31
 80022be:	d4e9      	bmi.n	8002294 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80022c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c4:	e7e8      	b.n	8002298 <FLASH_PageErase+0x10>
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000

080022cc <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80022cc:	4913      	ldr	r1, [pc, #76]	; (800231c <FLASH_FlushCaches+0x50>)
 80022ce:	7f0b      	ldrb	r3, [r1, #28]
 80022d0:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 80022d2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80022d6:	2a01      	cmp	r2, #1
 80022d8:	d10c      	bne.n	80022f4 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80022da:	4a11      	ldr	r2, [pc, #68]	; (8002320 <FLASH_FlushCaches+0x54>)
 80022dc:	6810      	ldr	r0, [r2, #0]
 80022de:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80022e2:	6010      	str	r0, [r2, #0]
 80022e4:	6810      	ldr	r0, [r2, #0]
 80022e6:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80022ea:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ec:	6810      	ldr	r0, [r2, #0]
 80022ee:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80022f2:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80022f4:	3b02      	subs	r3, #2
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d80c      	bhi.n	8002314 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <FLASH_FlushCaches+0x54>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800230a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002312:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002314:	2300      	movs	r3, #0
 8002316:	770b      	strb	r3, [r1, #28]
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000
 8002320:	40022000 	.word	0x40022000

08002324 <HAL_FLASHEx_Erase>:
{
 8002324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002328:	4c35      	ldr	r4, [pc, #212]	; (8002400 <HAL_FLASHEx_Erase+0xdc>)
 800232a:	7823      	ldrb	r3, [r4, #0]
 800232c:	2b01      	cmp	r3, #1
{
 800232e:	4606      	mov	r6, r0
 8002330:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002332:	d062      	beq.n	80023fa <HAL_FLASHEx_Erase+0xd6>
 8002334:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002336:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800233a:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800233c:	f7ff fef4 	bl	8002128 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002340:	4605      	mov	r5, r0
 8002342:	bb40      	cbnz	r0, 8002396 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002346:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800234e:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002350:	d026      	beq.n	80023a0 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002352:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002356:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	0551      	lsls	r1, r2, #21
 800235c:	d506      	bpl.n	800236c <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002364:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002366:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002368:	7723      	strb	r3, [r4, #28]
 800236a:	e000      	b.n	800236e <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800236c:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800236e:	6833      	ldr	r3, [r6, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d11f      	bne.n	80023b4 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8002374:	6870      	ldr	r0, [r6, #4]
 8002376:	f7ff ff65 	bl	8002244 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800237a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800237e:	f7ff fed3 	bl	8002128 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002382:	4a20      	ldr	r2, [pc, #128]	; (8002404 <HAL_FLASHEx_Erase+0xe0>)
 8002384:	6953      	ldr	r3, [r2, #20]
 8002386:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800238a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800238e:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002390:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8002392:	f7ff ff9b 	bl	80022cc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002396:	2300      	movs	r3, #0
 8002398:	7023      	strb	r3, [r4, #0]
}
 800239a:	4628      	mov	r0, r5
 800239c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80023a0:	0552      	lsls	r2, r2, #21
 80023a2:	d505      	bpl.n	80023b0 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80023ac:	2302      	movs	r3, #2
 80023ae:	e7db      	b.n	8002368 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80023b0:	7720      	strb	r0, [r4, #28]
 80023b2:	e7dc      	b.n	800236e <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80023bc:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80023be:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002404 <HAL_FLASHEx_Erase+0xe0>
 80023c2:	f8df a044 	ldr.w	sl, [pc, #68]	; 8002408 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80023c6:	68b3      	ldr	r3, [r6, #8]
 80023c8:	68f2      	ldr	r2, [r6, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	429f      	cmp	r7, r3
 80023ce:	d2e0      	bcs.n	8002392 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80023d0:	6871      	ldr	r1, [r6, #4]
 80023d2:	4638      	mov	r0, r7
 80023d4:	f7ff ff58 	bl	8002288 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023dc:	f7ff fea4 	bl	8002128 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80023e0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80023e4:	ea03 030a 	and.w	r3, r3, sl
 80023e8:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80023ec:	b118      	cbz	r0, 80023f6 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80023ee:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023f2:	4605      	mov	r5, r0
          break;
 80023f4:	e7cd      	b.n	8002392 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80023f6:	3701      	adds	r7, #1
 80023f8:	e7e5      	b.n	80023c6 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80023fa:	2502      	movs	r5, #2
 80023fc:	e7cd      	b.n	800239a <HAL_FLASHEx_Erase+0x76>
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000
 8002404:	40022000 	.word	0x40022000
 8002408:	fffff805 	.word	0xfffff805

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80025b8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002418:	4a65      	ldr	r2, [pc, #404]	; (80025b0 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241c:	fa38 f403 	lsrs.w	r4, r8, r3
 8002420:	d102      	bne.n	8002428 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8002422:	b003      	add	sp, #12
 8002424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002428:	f04f 0e01 	mov.w	lr, #1
 800242c:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002430:	ea18 060e 	ands.w	r6, r8, lr
 8002434:	f000 80ab 	beq.w	800258e <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002438:	684c      	ldr	r4, [r1, #4]
 800243a:	f024 0710 	bic.w	r7, r4, #16
 800243e:	2f02      	cmp	r7, #2
 8002440:	d116      	bne.n	8002470 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002442:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002446:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800244a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800244e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002452:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002456:	f04f 0c0f 	mov.w	ip, #15
 800245a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800245e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002462:	690d      	ldr	r5, [r1, #16]
 8002464:	fa05 f50b 	lsl.w	r5, r5, fp
 8002468:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 800246c:	f8ca 5020 	str.w	r5, [sl, #32]
 8002470:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002474:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002476:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800247a:	fa05 f50a 	lsl.w	r5, r5, sl
 800247e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002480:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002484:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002488:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800248c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800248e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002492:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002494:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002498:	d811      	bhi.n	80024be <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800249a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800249c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	68cf      	ldr	r7, [r1, #12]
 80024a2:	fa07 fc0a 	lsl.w	ip, r7, sl
 80024a6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80024aa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80024ac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ae:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024b2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80024b6:	409f      	lsls	r7, r3
 80024b8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80024bc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80024be:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024c0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024c2:	688f      	ldr	r7, [r1, #8]
 80024c4:	fa07 f70a 	lsl.w	r7, r7, sl
 80024c8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80024ca:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024cc:	00e5      	lsls	r5, r4, #3
 80024ce:	d55e      	bpl.n	800258e <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d0:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80024d4:	f045 0501 	orr.w	r5, r5, #1
 80024d8:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80024dc:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80024e0:	f023 0703 	bic.w	r7, r3, #3
 80024e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80024e8:	f005 0501 	and.w	r5, r5, #1
 80024ec:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80024f0:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024f2:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80024f8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024fc:	f04f 0c0f 	mov.w	ip, #15
 8002500:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002504:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002508:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800250c:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002510:	d03f      	beq.n	8002592 <HAL_GPIO_Init+0x186>
 8002512:	4d28      	ldr	r5, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x1a8>)
 8002514:	42a8      	cmp	r0, r5
 8002516:	d03e      	beq.n	8002596 <HAL_GPIO_Init+0x18a>
 8002518:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800251c:	42a8      	cmp	r0, r5
 800251e:	d03c      	beq.n	800259a <HAL_GPIO_Init+0x18e>
 8002520:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002524:	42a8      	cmp	r0, r5
 8002526:	d03a      	beq.n	800259e <HAL_GPIO_Init+0x192>
 8002528:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800252c:	42a8      	cmp	r0, r5
 800252e:	d038      	beq.n	80025a2 <HAL_GPIO_Init+0x196>
 8002530:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002534:	42a8      	cmp	r0, r5
 8002536:	d036      	beq.n	80025a6 <HAL_GPIO_Init+0x19a>
 8002538:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800253c:	42a8      	cmp	r0, r5
 800253e:	d034      	beq.n	80025aa <HAL_GPIO_Init+0x19e>
 8002540:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002544:	42a8      	cmp	r0, r5
 8002546:	bf14      	ite	ne
 8002548:	2508      	movne	r5, #8
 800254a:	2507      	moveq	r5, #7
 800254c:	fa05 f50e 	lsl.w	r5, r5, lr
 8002550:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002554:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 8002556:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8002558:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800255e:	bf0c      	ite	eq
 8002560:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002562:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 8002564:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 8002566:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002568:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800256c:	bf0c      	ite	eq
 800256e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002570:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 8002572:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 8002574:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002576:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800257a:	bf0c      	ite	eq
 800257c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800257e:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8002580:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 8002582:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002584:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002586:	bf54      	ite	pl
 8002588:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800258a:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 800258c:	60d5      	str	r5, [r2, #12]
    position++;
 800258e:	3301      	adds	r3, #1
 8002590:	e744      	b.n	800241c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002592:	2500      	movs	r5, #0
 8002594:	e7da      	b.n	800254c <HAL_GPIO_Init+0x140>
 8002596:	2501      	movs	r5, #1
 8002598:	e7d8      	b.n	800254c <HAL_GPIO_Init+0x140>
 800259a:	2502      	movs	r5, #2
 800259c:	e7d6      	b.n	800254c <HAL_GPIO_Init+0x140>
 800259e:	2503      	movs	r5, #3
 80025a0:	e7d4      	b.n	800254c <HAL_GPIO_Init+0x140>
 80025a2:	2504      	movs	r5, #4
 80025a4:	e7d2      	b.n	800254c <HAL_GPIO_Init+0x140>
 80025a6:	2505      	movs	r5, #5
 80025a8:	e7d0      	b.n	800254c <HAL_GPIO_Init+0x140>
 80025aa:	2506      	movs	r5, #6
 80025ac:	e7ce      	b.n	800254c <HAL_GPIO_Init+0x140>
 80025ae:	bf00      	nop
 80025b0:	40010400 	.word	0x40010400
 80025b4:	48000400 	.word	0x48000400
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80025c0:	4d46      	ldr	r5, [pc, #280]	; (80026dc <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025c2:	f8df a120 	ldr.w	sl, [pc, #288]	; 80026e4 <HAL_GPIO_DeInit+0x128>
 80025c6:	f8df b120 	ldr.w	fp, [pc, #288]	; 80026e8 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 80025ca:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025cc:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80025d0:	fa31 f302 	lsrs.w	r3, r1, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 80025d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025da:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 80025de:	ea11 0608 	ands.w	r6, r1, r8
 80025e2:	d06b      	beq.n	80026bc <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80025e4:	6807      	ldr	r7, [r0, #0]
 80025e6:	2303      	movs	r3, #3
 80025e8:	0054      	lsls	r4, r2, #1
 80025ea:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80025ee:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80025f2:	4327      	orrs	r7, r4
 80025f4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80025f8:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80025fa:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80025fe:	f002 0e07 	and.w	lr, r2, #7
 8002602:	463b      	mov	r3, r7
 8002604:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002608:	270f      	movs	r7, #15
 800260a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800260e:	ea23 0e0e 	bic.w	lr, r3, lr
 8002612:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002616:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800261a:	43e4      	mvns	r4, r4
 800261c:	ea0e 0e04 	and.w	lr, lr, r4
 8002620:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002624:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002628:	ea2e 0808 	bic.w	r8, lr, r8
 800262c:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002630:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8002634:	ea04 040e 	and.w	r4, r4, lr
 8002638:	60c4      	str	r4, [r0, #12]
 800263a:	f022 0403 	bic.w	r4, r2, #3
 800263e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002642:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002646:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800264a:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800264e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002652:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002656:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800265a:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800265e:	d02f      	beq.n	80026c0 <HAL_GPIO_DeInit+0x104>
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_GPIO_DeInit+0x124>)
 8002662:	4298      	cmp	r0, r3
 8002664:	d02e      	beq.n	80026c4 <HAL_GPIO_DeInit+0x108>
 8002666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800266a:	4298      	cmp	r0, r3
 800266c:	d02c      	beq.n	80026c8 <HAL_GPIO_DeInit+0x10c>
 800266e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002672:	4298      	cmp	r0, r3
 8002674:	d02a      	beq.n	80026cc <HAL_GPIO_DeInit+0x110>
 8002676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800267a:	4298      	cmp	r0, r3
 800267c:	d028      	beq.n	80026d0 <HAL_GPIO_DeInit+0x114>
 800267e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002682:	4298      	cmp	r0, r3
 8002684:	d026      	beq.n	80026d4 <HAL_GPIO_DeInit+0x118>
 8002686:	4550      	cmp	r0, sl
 8002688:	d026      	beq.n	80026d8 <HAL_GPIO_DeInit+0x11c>
 800268a:	4558      	cmp	r0, fp
 800268c:	bf0c      	ite	eq
 800268e:	2307      	moveq	r3, #7
 8002690:	2308      	movne	r3, #8
 8002692:	fa03 f30e 	lsl.w	r3, r3, lr
 8002696:	459c      	cmp	ip, r3
 8002698:	d110      	bne.n	80026bc <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800269a:	68a3      	ldr	r3, [r4, #8]
 800269c:	ea23 0707 	bic.w	r7, r3, r7
 80026a0:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 80026a2:	682b      	ldr	r3, [r5, #0]
 80026a4:	43f6      	mvns	r6, r6
 80026a6:	4033      	ands	r3, r6
 80026a8:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80026aa:	686b      	ldr	r3, [r5, #4]
 80026ac:	4033      	ands	r3, r6
 80026ae:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80026b0:	68ab      	ldr	r3, [r5, #8]
 80026b2:	4033      	ands	r3, r6
 80026b4:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80026b6:	68eb      	ldr	r3, [r5, #12]
 80026b8:	401e      	ands	r6, r3
 80026ba:	60ee      	str	r6, [r5, #12]
    position++;
 80026bc:	3201      	adds	r2, #1
 80026be:	e787      	b.n	80025d0 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80026c0:	2300      	movs	r3, #0
 80026c2:	e7e6      	b.n	8002692 <HAL_GPIO_DeInit+0xd6>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e7e4      	b.n	8002692 <HAL_GPIO_DeInit+0xd6>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e7e2      	b.n	8002692 <HAL_GPIO_DeInit+0xd6>
 80026cc:	2303      	movs	r3, #3
 80026ce:	e7e0      	b.n	8002692 <HAL_GPIO_DeInit+0xd6>
 80026d0:	2304      	movs	r3, #4
 80026d2:	e7de      	b.n	8002692 <HAL_GPIO_DeInit+0xd6>
 80026d4:	2305      	movs	r3, #5
 80026d6:	e7dc      	b.n	8002692 <HAL_GPIO_DeInit+0xd6>
 80026d8:	2306      	movs	r3, #6
 80026da:	e7da      	b.n	8002692 <HAL_GPIO_DeInit+0xd6>
 80026dc:	40010400 	.word	0x40010400
 80026e0:	48000400 	.word	0x48000400
 80026e4:	48001800 	.word	0x48001800
 80026e8:	48001c00 	.word	0x48001c00

080026ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026ec:	6903      	ldr	r3, [r0, #16]
 80026ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80026f0:	bf14      	ite	ne
 80026f2:	2001      	movne	r0, #1
 80026f4:	2000      	moveq	r0, #0
 80026f6:	4770      	bx	lr

080026f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	b10a      	cbz	r2, 80026fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026fa:	6181      	str	r1, [r0, #24]
 80026fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fe:	6281      	str	r1, [r0, #40]	; 0x28
 8002700:	4770      	bx	lr

08002702 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002702:	6943      	ldr	r3, [r0, #20]
 8002704:	4059      	eors	r1, r3
 8002706:	6141      	str	r1, [r0, #20]
 8002708:	4770      	bx	lr

0800270a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800270a:	4770      	bx	lr

0800270c <HAL_GPIO_EXTI_IRQHandler>:
{
 800270c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002710:	6959      	ldr	r1, [r3, #20]
 8002712:	4201      	tst	r1, r0
 8002714:	d002      	beq.n	800271c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002716:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002718:	f7ff fff7 	bl	800270a <HAL_GPIO_EXTI_Callback>
 800271c:	bd08      	pop	{r3, pc}
 800271e:	bf00      	nop
 8002720:	40010400 	.word	0x40010400

08002724 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002724:	6803      	ldr	r3, [r0, #0]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800272a:	bf44      	itt	mi
 800272c:	2200      	movmi	r2, #0
 800272e:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002734:	bf5e      	ittt	pl
 8002736:	699a      	ldrpl	r2, [r3, #24]
 8002738:	f042 0201 	orrpl.w	r2, r2, #1
 800273c:	619a      	strpl	r2, [r3, #24]
 800273e:	4770      	bx	lr

08002740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002740:	b530      	push	{r4, r5, lr}
 8002742:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002744:	6805      	ldr	r5, [r0, #0]
 8002746:	4323      	orrs	r3, r4
 8002748:	0d64      	lsrs	r4, r4, #21
 800274a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800274e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002752:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002756:	6868      	ldr	r0, [r5, #4]
 8002758:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800275c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002760:	4319      	orrs	r1, r3
 8002762:	f044 0403 	orr.w	r4, r4, #3
 8002766:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800276a:	ea20 0404 	bic.w	r4, r0, r4
 800276e:	4321      	orrs	r1, r4
 8002770:	6069      	str	r1, [r5, #4]
 8002772:	bd30      	pop	{r4, r5, pc}

08002774 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002774:	f011 0301 	ands.w	r3, r1, #1
 8002778:	d007      	beq.n	800278a <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800277a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800277e:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002782:	2b28      	cmp	r3, #40	; 0x28
 8002784:	bf0c      	ite	eq
 8002786:	2342      	moveq	r3, #66	; 0x42
 8002788:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800278a:	078a      	lsls	r2, r1, #30
 800278c:	d509      	bpl.n	80027a2 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800278e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002792:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002796:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002798:	bf0c      	ite	eq
 800279a:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800279e:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027a2:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80027a4:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027a8:	bf48      	it	mi
 80027aa:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80027ae:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80027b2:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027b4:	bf08      	it	eq
 80027b6:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80027ba:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027bc:	6801      	ldr	r1, [r0, #0]
 80027be:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80027c0:	bf08      	it	eq
 80027c2:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027c6:	ea22 0303 	bic.w	r3, r2, r3
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	4770      	bx	lr

080027ce <I2C_WaitOnFlagUntilTimeout>:
{
 80027ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d2:	9f06      	ldr	r7, [sp, #24]
 80027d4:	4604      	mov	r4, r0
 80027d6:	4688      	mov	r8, r1
 80027d8:	4616      	mov	r6, r2
 80027da:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6993      	ldr	r3, [r2, #24]
 80027e0:	ea38 0303 	bics.w	r3, r8, r3
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	42b3      	cmp	r3, r6
 80027ec:	d002      	beq.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80027ee:	2000      	movs	r0, #0
}
 80027f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80027f4:	1c6b      	adds	r3, r5, #1
 80027f6:	d0f2      	beq.n	80027de <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f8:	f7fe fc12 	bl	8001020 <HAL_GetTick>
 80027fc:	1bc0      	subs	r0, r0, r7
 80027fe:	4285      	cmp	r5, r0
 8002800:	d301      	bcc.n	8002806 <I2C_WaitOnFlagUntilTimeout+0x38>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d1ea      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002806:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800280e:	2320      	movs	r3, #32
 8002810:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	2300      	movs	r3, #0
 8002816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800281a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800281e:	2001      	movs	r0, #1
 8002820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002824 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002824:	6803      	ldr	r3, [r0, #0]
{
 8002826:	b570      	push	{r4, r5, r6, lr}
 8002828:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282a:	6998      	ldr	r0, [r3, #24]
 800282c:	f010 0010 	ands.w	r0, r0, #16
{
 8002830:	460d      	mov	r5, r1
 8002832:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002834:	d116      	bne.n	8002864 <I2C_IsAcknowledgeFailed+0x40>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002838:	1c69      	adds	r1, r5, #1
 800283a:	d014      	beq.n	8002866 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283c:	f7fe fbf0 	bl	8001020 <HAL_GetTick>
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	4285      	cmp	r5, r0
 8002844:	d300      	bcc.n	8002848 <I2C_IsAcknowledgeFailed+0x24>
 8002846:	b96d      	cbnz	r5, 8002864 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002848:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800284a:	f043 0320 	orr.w	r3, r3, #32
 800284e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002850:	2320      	movs	r3, #32
 8002852:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800285c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002860:	2001      	movs	r0, #1
}
 8002862:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	6999      	ldr	r1, [r3, #24]
 8002868:	068a      	lsls	r2, r1, #26
 800286a:	d5e5      	bpl.n	8002838 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800286e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002870:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002872:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002874:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002876:	f7ff ff55 	bl	8002724 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800287a:	6822      	ldr	r2, [r4, #0]
 800287c:	6853      	ldr	r3, [r2, #4]
 800287e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002882:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002886:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002890:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800289c:	e7db      	b.n	8002856 <I2C_IsAcknowledgeFailed+0x32>

0800289e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800289e:	b570      	push	{r4, r5, r6, lr}
 80028a0:	4604      	mov	r4, r0
 80028a2:	460d      	mov	r5, r1
 80028a4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	079b      	lsls	r3, r3, #30
 80028ac:	d501      	bpl.n	80028b2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80028ae:	2000      	movs	r0, #0
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b2:	4632      	mov	r2, r6
 80028b4:	4629      	mov	r1, r5
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff ffb4 	bl	8002824 <I2C_IsAcknowledgeFailed>
 80028bc:	b9a0      	cbnz	r0, 80028e8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80028be:	1c6a      	adds	r2, r5, #1
 80028c0:	d0f1      	beq.n	80028a6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c2:	f7fe fbad 	bl	8001020 <HAL_GetTick>
 80028c6:	1b80      	subs	r0, r0, r6
 80028c8:	4285      	cmp	r5, r0
 80028ca:	d301      	bcc.n	80028d0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80028cc:	2d00      	cmp	r5, #0
 80028ce:	d1ea      	bne.n	80028a6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028d2:	f043 0320 	orr.w	r3, r3, #32
 80028d6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	2320      	movs	r3, #32
 80028da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028de:	2300      	movs	r3, #0
 80028e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
}
 80028ea:	bd70      	pop	{r4, r5, r6, pc}

080028ec <I2C_RequestMemoryRead>:
{
 80028ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80028f0:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <I2C_RequestMemoryRead+0x60>)
 80028f4:	9300      	str	r3, [sp, #0]
{
 80028f6:	4605      	mov	r5, r0
 80028f8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028fa:	2300      	movs	r3, #0
 80028fc:	b2fa      	uxtb	r2, r7
 80028fe:	f7ff ff1f 	bl	8002740 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002902:	4632      	mov	r2, r6
 8002904:	9908      	ldr	r1, [sp, #32]
 8002906:	4628      	mov	r0, r5
 8002908:	f7ff ffc9 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 800290c:	b110      	cbz	r0, 8002914 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 800290e:	2001      	movs	r0, #1
}
 8002910:	b003      	add	sp, #12
 8002912:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002914:	2f01      	cmp	r7, #1
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	d10c      	bne.n	8002934 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800291a:	b2e4      	uxtb	r4, r4
 800291c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800291e:	9b08      	ldr	r3, [sp, #32]
 8002920:	9600      	str	r6, [sp, #0]
 8002922:	2200      	movs	r2, #0
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4628      	mov	r0, r5
 8002928:	f7ff ff51 	bl	80027ce <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800292c:	3000      	adds	r0, #0
 800292e:	bf18      	it	ne
 8002930:	2001      	movne	r0, #1
 8002932:	e7ed      	b.n	8002910 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002934:	0a22      	lsrs	r2, r4, #8
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002938:	9908      	ldr	r1, [sp, #32]
 800293a:	4632      	mov	r2, r6
 800293c:	4628      	mov	r0, r5
 800293e:	f7ff ffae 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 8002942:	2800      	cmp	r0, #0
 8002944:	d1e3      	bne.n	800290e <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002946:	682b      	ldr	r3, [r5, #0]
 8002948:	e7e7      	b.n	800291a <I2C_RequestMemoryRead+0x2e>
 800294a:	bf00      	nop
 800294c:	80002000 	.word	0x80002000

08002950 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	d501      	bpl.n	8002964 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002960:	2000      	movs	r0, #0
 8002962:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002964:	4632      	mov	r2, r6
 8002966:	4629      	mov	r1, r5
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff ff5b 	bl	8002824 <I2C_IsAcknowledgeFailed>
 800296e:	b990      	cbnz	r0, 8002996 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002970:	f7fe fb56 	bl	8001020 <HAL_GetTick>
 8002974:	1b80      	subs	r0, r0, r6
 8002976:	4285      	cmp	r5, r0
 8002978:	d301      	bcc.n	800297e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800297a:	2d00      	cmp	r5, #0
 800297c:	d1ec      	bne.n	8002958 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002980:	f043 0320 	orr.w	r3, r3, #32
 8002984:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002986:	2320      	movs	r3, #32
 8002988:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800298c:	2300      	movs	r3, #0
 800298e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002992:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002996:	2001      	movs	r0, #1
}
 8002998:	bd70      	pop	{r4, r5, r6, pc}

0800299a <HAL_I2C_Init>:
{
 800299a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800299c:	4604      	mov	r4, r0
 800299e:	2800      	cmp	r0, #0
 80029a0:	d04a      	beq.n	8002a38 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029aa:	b91b      	cbnz	r3, 80029b4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80029ac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80029b0:	f01d fbd4 	bl	802015c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	2324      	movs	r3, #36	; 0x24
 80029b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80029ba:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029bc:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029c6:	6862      	ldr	r2, [r4, #4]
 80029c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029cc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ce:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d0:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029da:	d124      	bne.n	8002a26 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e2:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029e4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ee:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029f8:	6922      	ldr	r2, [r4, #16]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	69a1      	ldr	r1, [r4, #24]
 80029fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a02:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a04:	6a21      	ldr	r1, [r4, #32]
 8002a06:	69e2      	ldr	r2, [r4, #28]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a14:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002a24:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a2a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a2c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a2e:	bf04      	itt	eq
 8002a30:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002a34:	605a      	streq	r2, [r3, #4]
 8002a36:	e7d4      	b.n	80029e2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002a38:	2001      	movs	r0, #1
}
 8002a3a:	bd10      	pop	{r4, pc}

08002a3c <HAL_I2C_Mem_Read>:
{
 8002a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a40:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002a46:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	2b20      	cmp	r3, #32
{
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	460f      	mov	r7, r1
 8002a4e:	9203      	str	r2, [sp, #12]
 8002a50:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002a54:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a58:	f040 80a9 	bne.w	8002bae <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a5e:	b113      	cbz	r3, 8002a66 <HAL_I2C_Mem_Read+0x2a>
 8002a60:	f1ba 0f00 	cmp.w	sl, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a6a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
}
 8002a6e:	b005      	add	sp, #20
 8002a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002a74:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	f000 8098 	beq.w	8002bae <HAL_I2C_Mem_Read+0x172>
 8002a7e:	2501      	movs	r5, #1
 8002a80:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002a84:	f7fe facc 	bl	8001020 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a88:	2319      	movs	r3, #25
 8002a8a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002a8c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a8e:	462a      	mov	r2, r5
 8002a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7ff fe9a 	bl	80027ce <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4681      	mov	r9, r0
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d1e5      	bne.n	8002a6c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aa0:	2322      	movs	r3, #34	; 0x22
 8002aa2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aae:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002ab0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002ab2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002ab4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab8:	9601      	str	r6, [sp, #4]
 8002aba:	f8cd 8000 	str.w	r8, [sp]
 8002abe:	465b      	mov	r3, fp
 8002ac0:	9a03      	ldr	r2, [sp, #12]
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7ff ff11 	bl	80028ec <I2C_RequestMemoryRead>
 8002aca:	b110      	cbz	r0, 8002ad2 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002acc:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002ad0:	e7cc      	b.n	8002a6c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_I2C_Mem_Read+0x178>)
 8002ada:	d958      	bls.n	8002b8e <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002adc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ade:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ae6:	4639      	mov	r1, r7
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff fe29 	bl	8002740 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	9600      	str	r6, [sp, #0]
 8002af0:	4643      	mov	r3, r8
 8002af2:	2200      	movs	r2, #0
 8002af4:	2104      	movs	r1, #4
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7ff fe69 	bl	80027ce <I2C_WaitOnFlagUntilTimeout>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d1b5      	bne.n	8002a6c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b06:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002b0a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b1a:	3a01      	subs	r2, #1
 8002b1c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b1e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002b20:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b22:	b1ab      	cbz	r3, 8002b50 <HAL_I2C_Mem_Read+0x114>
 8002b24:	b9a2      	cbnz	r2, 8002b50 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b26:	9600      	str	r6, [sp, #0]
 8002b28:	4643      	mov	r3, r8
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff fe4e 	bl	80027ce <I2C_WaitOnFlagUntilTimeout>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d19a      	bne.n	8002a6c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2bff      	cmp	r3, #255	; 0xff
 8002b3c:	d92f      	bls.n	8002b9e <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b42:	9000      	str	r0, [sp, #0]
 8002b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b48:	4639      	mov	r1, r7
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f7ff fdf8 	bl	8002740 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002b50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ca      	bne.n	8002aee <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b58:	4632      	mov	r2, r6
 8002b5a:	4641      	mov	r1, r8
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff fef7 	bl	8002950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	d182      	bne.n	8002a6c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	2120      	movs	r1, #32
 8002b6a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002b72:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002b76:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b84:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b88:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002b8c:	e76f      	b.n	8002a6e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002b8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b90:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002b92:	b292      	uxth	r2, r2
 8002b94:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	e7a3      	b.n	8002ae6 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002b9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ba0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	e7cc      	b.n	8002b48 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002bae:	2002      	movs	r0, #2
 8002bb0:	e75d      	b.n	8002a6e <HAL_I2C_Mem_Read+0x32>
 8002bb2:	bf00      	nop
 8002bb4:	80002400 	.word	0x80002400

08002bb8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bb8:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8002bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bbc:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bbe:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8002bc0:	b103      	cbz	r3, 8002bc4 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002bc2:	4718      	bx	r3
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_I2C_SlaveTxCpltCallback>:
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_I2C_SlaveRxCpltCallback>:
 8002bc8:	4770      	bx	lr

08002bca <I2C_ITSlaveSequentialCplt>:
{
 8002bca:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	2500      	movs	r5, #0
 8002bce:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002bd2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bd6:	2b29      	cmp	r3, #41	; 0x29
 8002bd8:	d10c      	bne.n	8002bf4 <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bda:	2328      	movs	r3, #40	; 0x28
 8002bdc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002be0:	2321      	movs	r3, #33	; 0x21
 8002be2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002be4:	2101      	movs	r1, #1
 8002be6:	f7ff fdc5 	bl	8002774 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002bea:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bee:	f7ff ffea 	bl	8002bc6 <HAL_I2C_SlaveTxCpltCallback>
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bf4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bfa:	d10b      	bne.n	8002c14 <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bfc:	2328      	movs	r3, #40	; 0x28
 8002bfe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c02:	2322      	movs	r3, #34	; 0x22
 8002c04:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c06:	2102      	movs	r1, #2
 8002c08:	f7ff fdb4 	bl	8002774 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c0c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c10:	f7ff ffda 	bl	8002bc8 <HAL_I2C_SlaveRxCpltCallback>
 8002c14:	bd38      	pop	{r3, r4, r5, pc}

08002c16 <HAL_I2C_AddrCallback>:
{
 8002c16:	4770      	bx	lr

08002c18 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c1a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c22:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002c24:	4604      	mov	r4, r0
 8002c26:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c28:	d134      	bne.n	8002c94 <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002c2a:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c2c:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c2e:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c30:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c32:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c34:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c36:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002c38:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c3c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c40:	d120      	bne.n	8002c84 <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c42:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002c46:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002c4a:	f015 0506 	ands.w	r5, r5, #6
 8002c4e:	d10e      	bne.n	8002c6e <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002c50:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002c52:	3101      	adds	r1, #1
 8002c54:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002c56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002c58:	2902      	cmp	r1, #2
 8002c5a:	d120      	bne.n	8002c9e <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c5c:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002c5e:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c60:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002c62:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c66:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c68:	f7ff ffd5 	bl	8002c16 <HAL_I2C_AddrCallback>
 8002c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c6e:	2104      	movs	r1, #4
 8002c70:	f7ff fd80 	bl	8002774 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002c74:	2300      	movs	r3, #0
 8002c76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c7a:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c7e:	4631      	mov	r1, r6
 8002c80:	4620      	mov	r0, r4
 8002c82:	e7f1      	b.n	8002c68 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c84:	2104      	movs	r1, #4
 8002c86:	f7ff fd75 	bl	8002774 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c90:	462a      	mov	r2, r5
 8002c92:	e7f4      	b.n	8002c7e <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c94:	2208      	movs	r2, #8
 8002c96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ca0 <HAL_I2C_ListenCpltCallback>:
 8002ca0:	4770      	bx	lr
	...

08002ca4 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <I2C_ITListenCplt+0x60>)
{
 8002ca6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002caa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002cb0:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002cba:	074b      	lsls	r3, r1, #29
{
 8002cbc:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002cbe:	d512      	bpl.n	8002ce6 <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cc0:	6802      	ldr	r2, [r0, #0]
 8002cc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cca:	3301      	adds	r3, #1
 8002ccc:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002cce:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002cd0:	b14b      	cbz	r3, 8002ce6 <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002cd6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cde:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	2107      	movs	r1, #7
 8002cea:	f7ff fd43 	bl	8002774 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7ff ffd0 	bl	8002ca0 <HAL_I2C_ListenCpltCallback>
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	bf00      	nop
 8002d04:	ffff0000 	.word	0xffff0000

08002d08 <HAL_I2C_ErrorCallback>:
 8002d08:	4770      	bx	lr

08002d0a <HAL_I2C_AbortCpltCallback>:
{
 8002d0a:	4770      	bx	lr

08002d0c <I2C_ITError>:
{
 8002d0c:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d0e:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d14:	2500      	movs	r5, #0
 8002d16:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d1a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d1c:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002d1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d20:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002d22:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d24:	2b02      	cmp	r3, #2
{
 8002d26:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002d28:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d2a:	d822      	bhi.n	8002d72 <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	f7ff fd21 	bl	8002774 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d32:	2328      	movs	r3, #40	; 0x28
 8002d34:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d3a:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002d3c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d42:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d44:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002d48:	d020      	beq.n	8002d8c <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002d4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d50:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d03e      	beq.n	8002dd4 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <I2C_ITError+0xd4>)
 8002d58:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d60:	f7fe ff86 	bl	8001c70 <HAL_DMA_Abort_IT>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d035      	beq.n	8002dd4 <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d70:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d72:	2107      	movs	r1, #7
 8002d74:	f7ff fcfe 	bl	8002774 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002d78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002d7e:	bf1c      	itt	ne
 8002d80:	2320      	movne	r3, #32
 8002d82:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	6303      	str	r3, [r0, #48]	; 0x30
 8002d8a:	e7d7      	b.n	8002d3c <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d8c:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002d90:	d00e      	beq.n	8002db0 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d92:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002d94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002d9c:	b1d0      	cbz	r0, 8002dd4 <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <I2C_ITError+0xd4>)
 8002da0:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002da2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002da6:	f7fe ff63 	bl	8001c70 <HAL_DMA_Abort_IT>
 8002daa:	b198      	cbz	r0, 8002dd4 <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002dae:	e7dc      	b.n	8002d6a <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002db0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002db4:	2b60      	cmp	r3, #96	; 0x60
 8002db6:	d108      	bne.n	8002dca <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	2320      	movs	r3, #32
 8002dba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002dbe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7ff ffa1 	bl	8002d0a <HAL_I2C_AbortCpltCallback>
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8002dca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff ff9a 	bl	8002d08 <HAL_I2C_ErrorCallback>
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	bf00      	nop
 8002dd8:	ffff0000 	.word	0xffff0000
 8002ddc:	08002ed5 	.word	0x08002ed5
 8002de0:	08003045 	.word	0x08003045

08002de4 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002de4:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de6:	2220      	movs	r2, #32
{
 8002de8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dea:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dec:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dee:	2208      	movs	r2, #8
 8002df0:	61da      	str	r2, [r3, #28]
{
 8002df2:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002df4:	2107      	movs	r1, #7
{
 8002df6:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002df8:	f7ff fcbc 	bl	8002774 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e04:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002e0c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002e10:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002e1a:	f7ff fc83 	bl	8002724 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e1e:	0471      	lsls	r1, r6, #17
 8002e20:	d532      	bpl.n	8002e88 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8002e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002e24:	b11b      	cbz	r3, 8002e2e <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002e2e:	076b      	lsls	r3, r5, #29
 8002e30:	d50e      	bpl.n	8002e50 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e32:	6822      	ldr	r2, [r4, #0]
 8002e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002e40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e42:	b12b      	cbz	r3, 8002e50 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8002e44:	3b01      	subs	r3, #1
 8002e46:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002e50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	b11b      	cbz	r3, 8002e5e <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002e66:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e6a:	b18b      	cbz	r3, 8002e90 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7ff ff4c 	bl	8002d0c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002e78:	2b28      	cmp	r3, #40	; 0x28
 8002e7a:	d128      	bne.n	8002ece <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4620      	mov	r0, r4
}
 8002e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002e84:	f7ff bf0e 	b.w	8002ca4 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e88:	0432      	lsls	r2, r6, #16
 8002e8a:	d5d0      	bpl.n	8002e2e <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8002e8c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002e8e:	e7c9      	b.n	8002e24 <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e92:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002e96:	d00a      	beq.n	8002eae <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <I2C_ITSlaveCplt+0xec>)
 8002e9a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ea2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff fefa 	bl	8002ca0 <HAL_I2C_ListenCpltCallback>
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eae:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002eb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eb6:	2a22      	cmp	r2, #34	; 0x22
 8002eb8:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ec0:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ec2:	d102      	bne.n	8002eca <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ec4:	f7ff fe80 	bl	8002bc8 <HAL_I2C_SlaveRxCpltCallback>
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002eca:	f7ff fe7c 	bl	8002bc6 <HAL_I2C_SlaveTxCpltCallback>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	ffff0000 	.word	0xffff0000

08002ed4 <I2C_Slave_ISR_IT>:
{
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8002ed8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8002edc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002ede:	2a01      	cmp	r2, #1
{
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8002ee4:	d07c      	beq.n	8002fe0 <I2C_Slave_ISR_IT+0x10c>
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eec:	06ca      	lsls	r2, r1, #27
 8002eee:	d539      	bpl.n	8002f64 <I2C_Slave_ISR_IT+0x90>
 8002ef0:	06f2      	lsls	r2, r6, #27
 8002ef2:	d537      	bpl.n	8002f64 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8002ef4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	bb32      	cbnz	r2, 8002f48 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002efa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002efe:	2a28      	cmp	r2, #40	; 0x28
 8002f00:	d110      	bne.n	8002f24 <I2C_Slave_ISR_IT+0x50>
 8002f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f06:	d10d      	bne.n	8002f24 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002f08:	f7ff fecc 	bl	8002ca4 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f0c:	06aa      	lsls	r2, r5, #26
 8002f0e:	d505      	bpl.n	8002f1c <I2C_Slave_ISR_IT+0x48>
 8002f10:	06b3      	lsls	r3, r6, #26
 8002f12:	d503      	bpl.n	8002f1c <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002f14:	4629      	mov	r1, r5
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7ff ff64 	bl	8002de4 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f24:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002f28:	2a29      	cmp	r2, #41	; 0x29
 8002f2a:	6822      	ldr	r2, [r4, #0]
 8002f2c:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f30:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f32:	d1eb      	bne.n	8002f0c <I2C_Slave_ISR_IT+0x38>
 8002f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f38:	d0e8      	beq.n	8002f0c <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f7ff fbf2 	bl	8002724 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff fe42 	bl	8002bca <I2C_ITSlaveSequentialCplt>
 8002f46:	e7e1      	b.n	8002f0c <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f48:	6802      	ldr	r2, [r0, #0]
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f50:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f54:	f042 0204 	orr.w	r2, r2, #4
 8002f58:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f5a:	d1d7      	bne.n	8002f0c <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f5c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002f5e:	f7ff fed5 	bl	8002d0c <I2C_ITError>
 8002f62:	e7d3      	b.n	8002f0c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f64:	076a      	lsls	r2, r5, #29
 8002f66:	d51a      	bpl.n	8002f9e <I2C_Slave_ISR_IT+0xca>
 8002f68:	0770      	lsls	r0, r6, #29
 8002f6a:	d518      	bpl.n	8002f9e <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8002f6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	b16a      	cbz	r2, 8002f8e <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f72:	6821      	ldr	r1, [r4, #0]
 8002f74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f76:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002f78:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8002f7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f7c:	3201      	adds	r2, #1
 8002f7e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002f80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002f82:	3a01      	subs	r2, #1
 8002f84:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f88:	3a01      	subs	r2, #1
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002f8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f90:	b292      	uxth	r2, r2
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d1ba      	bne.n	8002f0c <I2C_Slave_ISR_IT+0x38>
 8002f96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f9a:	d1d1      	bne.n	8002f40 <I2C_Slave_ISR_IT+0x6c>
 8002f9c:	e7b6      	b.n	8002f0c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f9e:	0729      	lsls	r1, r5, #28
 8002fa0:	d505      	bpl.n	8002fae <I2C_Slave_ISR_IT+0xda>
 8002fa2:	0732      	lsls	r2, r6, #28
 8002fa4:	d503      	bpl.n	8002fae <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f7ff fe36 	bl	8002c18 <I2C_ITAddrCplt.isra.8>
 8002fac:	e7ae      	b.n	8002f0c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002fae:	07a8      	lsls	r0, r5, #30
 8002fb0:	d5ac      	bpl.n	8002f0c <I2C_Slave_ISR_IT+0x38>
 8002fb2:	07b1      	lsls	r1, r6, #30
 8002fb4:	d5aa      	bpl.n	8002f0c <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 8002fb6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	b16a      	cbz	r2, 8002fd8 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002fc4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002fc6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002fc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002fd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	8523      	strh	r3, [r4, #40]	; 0x28
 8002fd6:	e799      	b.n	8002f0c <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002fd8:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	d0b0      	beq.n	8002f40 <I2C_Slave_ISR_IT+0x6c>
 8002fde:	e795      	b.n	8002f0c <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 8002fe0:	2002      	movs	r0, #2
}
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}

08002fe4 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fe4:	6803      	ldr	r3, [r0, #0]
 8002fe6:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fe8:	681a      	ldr	r2, [r3, #0]
{
 8002fea:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fec:	05cc      	lsls	r4, r1, #23
 8002fee:	d508      	bpl.n	8003002 <HAL_I2C_ER_IRQHandler+0x1e>
 8002ff0:	0614      	lsls	r4, r2, #24
 8002ff2:	d506      	bpl.n	8003002 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ff4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ff6:	f044 0401 	orr.w	r4, r4, #1
 8002ffa:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ffc:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003000:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003002:	054c      	lsls	r4, r1, #21
 8003004:	d508      	bpl.n	8003018 <HAL_I2C_ER_IRQHandler+0x34>
 8003006:	0614      	lsls	r4, r2, #24
 8003008:	d506      	bpl.n	8003018 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800300a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800300c:	f044 0408 	orr.w	r4, r4, #8
 8003010:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003012:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003016:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003018:	0589      	lsls	r1, r1, #22
 800301a:	d508      	bpl.n	800302e <HAL_I2C_ER_IRQHandler+0x4a>
 800301c:	0612      	lsls	r2, r2, #24
 800301e:	d506      	bpl.n	800302e <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003022:	f042 0202 	orr.w	r2, r2, #2
 8003026:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302c:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800302e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003030:	f011 0f0b 	tst.w	r1, #11
 8003034:	d003      	beq.n	800303e <HAL_I2C_ER_IRQHandler+0x5a>
}
 8003036:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800303a:	f7ff be67 	b.w	8002d0c <I2C_ITError>
}
 800303e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003042:	4770      	bx	lr

08003044 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003044:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003046:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8003048:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800304e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003050:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003052:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003056:	2b60      	cmp	r3, #96	; 0x60
 8003058:	d105      	bne.n	8003066 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 800305a:	2320      	movs	r3, #32
 800305c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8003060:	f7ff fe53 	bl	8002d0a <HAL_I2C_AbortCpltCallback>
 8003064:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8003066:	f7ff fe4f 	bl	8002d08 <HAL_I2C_ErrorCallback>
 800306a:	bd08      	pop	{r3, pc}

0800306c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	2a20      	cmp	r2, #32
{
 8003074:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	d11d      	bne.n	80030b4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800307c:	2b01      	cmp	r3, #1
 800307e:	d019      	beq.n	80030b4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	2324      	movs	r3, #36	; 0x24
 8003082:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003086:	6803      	ldr	r3, [r0, #0]
 8003088:	681c      	ldr	r4, [r3, #0]
 800308a:	f024 0401 	bic.w	r4, r4, #1
 800308e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003090:	681c      	ldr	r4, [r3, #0]
 8003092:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003096:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003098:	681c      	ldr	r4, [r3, #0]
 800309a:	4321      	orrs	r1, r4
 800309c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	f041 0101 	orr.w	r1, r1, #1
 80030a4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030ac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2002      	movs	r0, #2
  }
}
 80030b6:	bd10      	pop	{r4, pc}

080030b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030b8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ba:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80030be:	b2e4      	uxtb	r4, r4
 80030c0:	2c20      	cmp	r4, #32
 80030c2:	d11c      	bne.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d018      	beq.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030cc:	2324      	movs	r3, #36	; 0x24
 80030ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d2:	6803      	ldr	r3, [r0, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030dc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030de:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030e6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030fa:	4618      	mov	r0, r3
 80030fc:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2002      	movs	r0, #2
  }
}
 8003100:	bd10      	pop	{r4, pc}

08003102 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003106:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003108:	6804      	ldr	r4, [r0, #0]
 800310a:	684f      	ldr	r7, [r1, #4]
 800310c:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800310e:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003112:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003116:	3284      	adds	r2, #132	; 0x84
 8003118:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800311a:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800311e:	6858      	ldr	r0, [r3, #4]
 8003120:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003124:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003126:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003128:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800312c:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003130:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003132:	4430      	add	r0, r6
 8003134:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003138:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800313a:	68e0      	ldr	r0, [r4, #12]
 800313c:	68cd      	ldr	r5, [r1, #12]
 800313e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003142:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003144:	6898      	ldr	r0, [r3, #8]
 8003146:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 800314a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800314c:	68e6      	ldr	r6, [r4, #12]
 800314e:	6888      	ldr	r0, [r1, #8]
 8003150:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003154:	3001      	adds	r0, #1
 8003156:	4430      	add	r0, r6
 8003158:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800315c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800315e:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003160:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003162:	f020 0007 	bic.w	r0, r0, #7
 8003166:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003168:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800316c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800316e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003170:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003174:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003178:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800317c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003180:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003184:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003188:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800318c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800318e:	6958      	ldr	r0, [r3, #20]
 8003190:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003194:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003196:	6948      	ldr	r0, [r1, #20]
 8003198:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800319a:	69d8      	ldr	r0, [r3, #28]
 800319c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80031a0:	f020 0007 	bic.w	r0, r0, #7
 80031a4:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80031a6:	6a08      	ldr	r0, [r1, #32]
 80031a8:	69cd      	ldr	r5, [r1, #28]
 80031aa:	4305      	orrs	r5, r0
 80031ac:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80031ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80031b0:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80031b2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80031b6:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80031b8:	b31e      	cbz	r6, 8003202 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80031ba:	2e01      	cmp	r6, #1
 80031bc:	d023      	beq.n	8003206 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031be:	1eb0      	subs	r0, r6, #2
 80031c0:	2802      	cmp	r0, #2
 80031c2:	d922      	bls.n	800320a <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031c4:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 80031c6:	bf0c      	ite	eq
 80031c8:	2002      	moveq	r0, #2
 80031ca:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80031cc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80031ce:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80031d2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80031d4:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80031d6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80031d8:	eba7 070e 	sub.w	r7, r7, lr
 80031dc:	4345      	muls	r5, r0
 80031de:	4378      	muls	r0, r7
 80031e0:	3003      	adds	r0, #3
 80031e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80031e6:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80031e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031ea:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80031ee:	f020 0007 	bic.w	r0, r0, #7
 80031f2:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80031f4:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80031f6:	58a3      	ldr	r3, [r4, r2]
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	50a3      	str	r3, [r4, r2]
 80031fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8003202:	2004      	movs	r0, #4
 8003204:	e7e2      	b.n	80031cc <LTDC_SetConfig+0xca>
    tmp = 3;
 8003206:	2003      	movs	r0, #3
 8003208:	e7e0      	b.n	80031cc <LTDC_SetConfig+0xca>
    tmp = 2;
 800320a:	2002      	movs	r0, #2
 800320c:	e7de      	b.n	80031cc <LTDC_SetConfig+0xca>
	...

08003210 <HAL_LTDC_Init>:
{
 8003210:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8003212:	4604      	mov	r4, r0
 8003214:	2800      	cmp	r0, #0
 8003216:	d063      	beq.n	80032e0 <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003218:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800321c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003220:	b91b      	cbnz	r3, 800322a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003222:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003226:	f01c fd25 	bl	801fc74 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800322a:	2302      	movs	r3, #2
 800322c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003230:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003232:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800323a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800323c:	6862      	ldr	r2, [r4, #4]
 800323e:	6999      	ldr	r1, [r3, #24]
 8003240:	4302      	orrs	r2, r0
 8003242:	68e0      	ldr	r0, [r4, #12]
 8003244:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003246:	6920      	ldr	r0, [r4, #16]
 8003248:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800324a:	430a      	orrs	r2, r1
 800324c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4924      	ldr	r1, [pc, #144]	; (80032e4 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003252:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003254:	400a      	ands	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800325e:	69a0      	ldr	r0, [r4, #24]
 8003260:	4302      	orrs	r2, r0
 8003262:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003264:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003266:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003268:	400a      	ands	r2, r1
 800326a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003272:	6a20      	ldr	r0, [r4, #32]
 8003274:	4302      	orrs	r2, r0
 8003276:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003278:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800327a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800327c:	400a      	ands	r2, r1
 800327e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003286:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003288:	4302      	orrs	r2, r0
 800328a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	4011      	ands	r1, r2
 8003290:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003292:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003294:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003296:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800329a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800329c:	430a      	orrs	r2, r1
 800329e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80032a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80032a2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80032a6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80032aa:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80032ae:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80032b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80032b6:	430a      	orrs	r2, r1
 80032b8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80032bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80032c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c4:	f042 0206 	orr.w	r2, r2, #6
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80032d2:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80032d4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80032d6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80032da:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80032de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
}
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	f000f800 	.word	0xf000f800

080032e8 <HAL_LTDC_ConfigLayer>:
{   
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80032ea:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80032ee:	2b01      	cmp	r3, #1
{   
 80032f0:	4606      	mov	r6, r0
 80032f2:	468e      	mov	lr, r1
 80032f4:	4694      	mov	ip, r2
 80032f6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80032fa:	d01d      	beq.n	8003338 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80032fc:	2434      	movs	r4, #52	; 0x34
 80032fe:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003300:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003304:	fb04 6402 	mla	r4, r4, r2, r6
 8003308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 800330a:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800330c:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 800330e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800331a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003320:	4630      	mov	r0, r6
 8003322:	4662      	mov	r2, ip
 8003324:	4671      	mov	r1, lr
 8003326:	f7ff feec 	bl	8003102 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800332a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800332c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800332e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003330:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003334:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800333a <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 800333a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800333e:	2b01      	cmp	r3, #1
{
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	f04f 0302 	mov.w	r3, #2
 8003346:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8003348:	d015      	beq.n	8003376 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800334a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 800334e:	2334      	movs	r3, #52	; 0x34
 8003350:	4353      	muls	r3, r2
 8003352:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8003354:	2501      	movs	r5, #1
 8003356:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 800335a:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800335c:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003360:	4401      	add	r1, r0
 8003362:	f7ff fece 	bl	8003102 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003366:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003368:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800336a:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800336c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003370:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8003374:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8003376:	4618      	mov	r0, r3
}
 8003378:	bd70      	pop	{r4, r5, r6, pc}

0800337a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800337a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800337e:	4604      	mov	r4, r0
{
 8003380:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8003382:	2800      	cmp	r0, #0
 8003384:	d074      	beq.n	8003470 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003386:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800338a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800338e:	b91b      	cbnz	r3, 8003398 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003390:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003394:	f01d f844 	bl	8020420 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003398:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800339a:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 800339c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80033a0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 80033a4:	f004 fc0d 	bl	8007bc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80033a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033aa:	466e      	mov	r6, sp
 80033ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80033ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80033b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80033b6:	e886 0003 	stmia.w	r6, {r0, r1}
 80033ba:	f104 0804 	add.w	r8, r4, #4
 80033be:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	f004 fbc8 	bl	8007b58 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033c8:	2100      	movs	r1, #0
 80033ca:	6820      	ldr	r0, [r4, #0]
 80033cc:	f004 fbff 	bl	8007bce <USB_SetCurrentMode>
 80033d0:	2100      	movs	r1, #0
 80033d2:	4622      	mov	r2, r4
 80033d4:	4623      	mov	r3, r4
 80033d6:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033da:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033dc:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80033de:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033e2:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 80033e6:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80033e8:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80033ea:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ee:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80033f2:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033f4:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80033f6:	6518      	str	r0, [r3, #80]	; 0x50
 80033f8:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 80033fc:	d1ef      	bne.n	80033de <HAL_PCD_Init+0x64>
 80033fe:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003400:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8003402:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8003406:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8003408:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 800340a:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800340e:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003412:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003416:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800341a:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 800341e:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8003422:	d1ee      	bne.n	8003402 <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003426:	466e      	mov	r6, sp
 8003428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800342a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800342e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003432:	e886 0003 	stmia.w	r6, {r0, r1}
 8003436:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	f004 fc08 	bl	8007c50 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8003440:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8003442:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003446:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800344a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003450:	4620      	mov	r0, r4
 8003452:	f000 fc27 	bl	8003ca4 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8003456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003458:	2b01      	cmp	r3, #1
 800345a:	d102      	bne.n	8003462 <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800345c:	4620      	mov	r0, r4
 800345e:	f000 fc34 	bl	8003cca <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	f004 fece 	bl	8008204 <USB_DevDisconnect>

  return HAL_OK;
 8003468:	2000      	movs	r0, #0
}
 800346a:	b00a      	add	sp, #40	; 0x28
 800346c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	e7fa      	b.n	800346a <HAL_PCD_Init+0xf0>

08003474 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8003474:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003478:	2b01      	cmp	r3, #1
{
 800347a:	b510      	push	{r4, lr}
 800347c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800347e:	d00c      	beq.n	800349a <HAL_PCD_Start+0x26>
 8003480:	2301      	movs	r3, #1
 8003482:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8003486:	6800      	ldr	r0, [r0, #0]
 8003488:	f004 feb0 	bl	80081ec <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	f004 fb92 	bl	8007bb6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003492:	2000      	movs	r0, #0
 8003494:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003498:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800349a:	2002      	movs	r0, #2
}
 800349c:	bd10      	pop	{r4, pc}
	...

080034a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a4:	f8d0 9000 	ldr.w	r9, [r0]
{
 80034a8:	b085      	sub	sp, #20
 80034aa:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034ac:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 80034ae:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034b2:	f004 fee2 	bl	800827a <USB_GetMode>
 80034b6:	9000      	str	r0, [sp, #0]
 80034b8:	2800      	cmp	r0, #0
 80034ba:	f040 8154 	bne.w	8003766 <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	f004 feac 	bl	800821c <USB_ReadInterrupts>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	f000 814e 	beq.w	8003766 <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	f004 fea6 	bl	800821c <USB_ReadInterrupts>
 80034d0:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034d2:	bf48      	it	mi
 80034d4:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034d6:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034d8:	bf42      	ittt	mi
 80034da:	6953      	ldrmi	r3, [r2, #20]
 80034dc:	f003 0302 	andmi.w	r3, r3, #2
 80034e0:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034e2:	f004 fe9b 	bl	800821c <USB_ReadInterrupts>
 80034e6:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 80034ea:	d00b      	beq.n	8003504 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034ec:	6820      	ldr	r0, [r4, #0]
 80034ee:	f004 fe99 	bl	8008224 <USB_ReadDevAllOutEpInterrupt>
 80034f2:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80034f6:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 80034f8:	46b2      	mov	sl, r6
      epnum = 0U;
 80034fa:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 80034fe:	2d00      	cmp	r5, #0
 8003500:	f040 8134 	bne.w	800376c <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	f004 fe89 	bl	800821c <USB_ReadInterrupts>
 800350a:	0347      	lsls	r7, r0, #13
 800350c:	d50c      	bpl.n	8003528 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	f004 fe90 	bl	8008234 <USB_ReadDevAllInEpInterrupt>
 8003514:	4625      	mov	r5, r4
 8003516:	9001      	str	r0, [sp, #4]
 8003518:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 800351c:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 8003520:	9b01      	ldr	r3, [sp, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 8164 	bne.w	80037f0 <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	f004 fe77 	bl	800821c <USB_ReadInterrupts>
 800352e:	2800      	cmp	r0, #0
 8003530:	da15      	bge.n	800355e <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003532:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800353e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003542:	2b01      	cmp	r3, #1
 8003544:	f040 81cf 	bne.w	80038e6 <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 8003548:	2100      	movs	r1, #0
 800354a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800354e:	4620      	mov	r0, r4
 8003550:	f01d f8cc 	bl	80206ec <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	6953      	ldr	r3, [r2, #20]
 8003558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800355c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800355e:	6820      	ldr	r0, [r4, #0]
 8003560:	f004 fe5c 	bl	800821c <USB_ReadInterrupts>
 8003564:	0505      	lsls	r5, r0, #20
 8003566:	d50b      	bpl.n	8003580 <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003568:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 800356c:	07d8      	lsls	r0, r3, #31
 800356e:	d502      	bpl.n	8003576 <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003570:	4620      	mov	r0, r4
 8003572:	f01c ffbf 	bl	80204f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	6953      	ldr	r3, [r2, #20]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	f004 fe4b 	bl	800821c <USB_ReadInterrupts>
 8003586:	0101      	lsls	r1, r0, #4
 8003588:	d514      	bpl.n	80035b4 <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003592:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003594:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003598:	2a00      	cmp	r2, #0
 800359a:	f040 81a8 	bne.w	80038ee <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 80035a0:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80035a2:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 80035a6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80035aa:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035ae:	4620      	mov	r0, r4
 80035b0:	f01d f89c 	bl	80206ec <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	f004 fe31 	bl	800821c <USB_ReadInterrupts>
 80035ba:	04c2      	lsls	r2, r0, #19
 80035bc:	d534      	bpl.n	8003628 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035be:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 80035c2:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035c4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035cc:	2110      	movs	r1, #16
 80035ce:	f004 fb15 	bl	8007bfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	6860      	ldr	r0, [r4, #4]
 80035d4:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035d8:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035dc:	9a00      	ldr	r2, [sp, #0]
 80035de:	4282      	cmp	r2, r0
 80035e0:	f040 8189 	bne.w	80038f6 <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035e4:	69eb      	ldr	r3, [r5, #28]
 80035e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035ea:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 819a 	beq.w	8003928 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80035f4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80035f8:	f043 030b 	orr.w	r3, r3, #11
 80035fc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003600:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003602:	f043 030b 	orr.w	r3, r3, #11
 8003606:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003608:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800360c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800360e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003612:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003616:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800361a:	f004 fe4d 	bl	80082b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	6953      	ldr	r3, [r2, #20]
 8003622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003626:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	f004 fdf7 	bl	800821c <USB_ReadInterrupts>
 800362e:	0483      	lsls	r3, r0, #18
 8003630:	d520      	bpl.n	8003674 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	f004 fe25 	bl	8008282 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	68d3      	ldr	r3, [r2, #12]
 800363c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003640:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8003642:	2303      	movs	r3, #3
 8003644:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 8003646:	2340      	movs	r3, #64	; 0x40
 8003648:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800364a:	f000 ff9d 	bl	8004588 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 800364e:	4bb3      	ldr	r3, [pc, #716]	; (800391c <HAL_PCD_IRQHandler+0x47c>)
 8003650:	4ab3      	ldr	r2, [pc, #716]	; (8003920 <HAL_PCD_IRQHandler+0x480>)
 8003652:	4403      	add	r3, r0
 8003654:	4293      	cmp	r3, r2
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	f200 816f 	bhi.w	800393a <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003662:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003664:	4620      	mov	r0, r4
 8003666:	f01c ff38 	bl	80204da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	6953      	ldr	r3, [r2, #20]
 800366e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003672:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	f004 fdd1 	bl	800821c <USB_ReadInterrupts>
 800367a:	06c7      	lsls	r7, r0, #27
 800367c:	d52b      	bpl.n	80036d6 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	6993      	ldr	r3, [r2, #24]
 8003682:	f023 0310 	bic.w	r3, r3, #16
 8003686:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003688:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800368c:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8003690:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003692:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003696:	f040 81a0 	bne.w	80039da <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800369a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800369e:	421d      	tst	r5, r3
 80036a0:	d014      	beq.n	80036cc <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036a2:	261c      	movs	r6, #28
 80036a4:	fb06 4607 	mla	r6, r6, r7, r4
 80036a8:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80036ac:	462a      	mov	r2, r5
 80036ae:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 80036b2:	4648      	mov	r0, r9
 80036b4:	f004 fd24 	bl	8008100 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036b8:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 80036bc:	442b      	add	r3, r5
 80036be:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036c2:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80036c6:	441d      	add	r5, r3
 80036c8:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	6993      	ldr	r3, [r2, #24]
 80036d0:	f043 0310 	orr.w	r3, r3, #16
 80036d4:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	f004 fda0 	bl	800821c <USB_ReadInterrupts>
 80036dc:	0706      	lsls	r6, r0, #28
 80036de:	d507      	bpl.n	80036f0 <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036e0:	4620      	mov	r0, r4
 80036e2:	f01c fef6 	bl	80204d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	6953      	ldr	r3, [r2, #20]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	f004 fd93 	bl	800821c <USB_ReadInterrupts>
 80036f6:	02c5      	lsls	r5, r0, #11
 80036f8:	d509      	bpl.n	800370e <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036fa:	fa5f f18b 	uxtb.w	r1, fp
 80036fe:	4620      	mov	r0, r4
 8003700:	f01c ff2e 	bl	8020560 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	6953      	ldr	r3, [r2, #20]
 8003708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	f004 fd84 	bl	800821c <USB_ReadInterrupts>
 8003714:	0280      	lsls	r0, r0, #10
 8003716:	d509      	bpl.n	800372c <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003718:	fa5f f18b 	uxtb.w	r1, fp
 800371c:	4620      	mov	r0, r4
 800371e:	f01c ff1b 	bl	8020558 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	6953      	ldr	r3, [r2, #20]
 8003726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	f004 fd75 	bl	800821c <USB_ReadInterrupts>
 8003732:	0041      	lsls	r1, r0, #1
 8003734:	d507      	bpl.n	8003746 <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003736:	4620      	mov	r0, r4
 8003738:	f01c ff16 	bl	8020568 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	6953      	ldr	r3, [r2, #20]
 8003740:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003744:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003746:	6820      	ldr	r0, [r4, #0]
 8003748:	f004 fd68 	bl	800821c <USB_ReadInterrupts>
 800374c:	0742      	lsls	r2, r0, #29
 800374e:	d50a      	bpl.n	8003766 <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003754:	076b      	lsls	r3, r5, #29
 8003756:	d502      	bpl.n	800375e <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003758:	4620      	mov	r0, r4
 800375a:	f01c ff09 	bl	8020570 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	4315      	orrs	r5, r2
 8003764:	605d      	str	r5, [r3, #4]
    }
  }
}
 8003766:	b005      	add	sp, #20
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 800376c:	07e9      	lsls	r1, r5, #31
 800376e:	d52e      	bpl.n	80037ce <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003770:	fa5f f28b 	uxtb.w	r2, fp
 8003774:	4611      	mov	r1, r2
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	9201      	str	r2, [sp, #4]
 800377a:	f004 fd63 	bl	8008244 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800377e:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003780:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003782:	d50d      	bpl.n	80037a0 <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003784:	4b67      	ldr	r3, [pc, #412]	; (8003924 <HAL_PCD_IRQHandler+0x484>)
 8003786:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003788:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800378a:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800378c:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003790:	d129      	bne.n	80037e6 <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003792:	68b1      	ldr	r1, [r6, #8]
 8003794:	040b      	lsls	r3, r1, #16
 8003796:	d520      	bpl.n	80037da <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003798:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800379c:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037a0:	0739      	lsls	r1, r7, #28
 80037a2:	d50f      	bpl.n	80037c4 <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037a4:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_PCD_IRQHandler+0x484>)
 80037a6:	4598      	cmp	r8, r3
 80037a8:	d106      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 80037aa:	68b2      	ldr	r2, [r6, #8]
 80037ac:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 80037ae:	bf44      	itt	mi
 80037b0:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 80037b4:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 80037b8:	4620      	mov	r0, r4
 80037ba:	f01c fe73 	bl	80204a4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037be:	2308      	movs	r3, #8
 80037c0:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037c4:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037c6:	bf44      	itt	mi
 80037c8:	2310      	movmi	r3, #16
 80037ca:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 80037ce:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80037d2:	086d      	lsrs	r5, r5, #1
 80037d4:	f10a 0a20 	add.w	sl, sl, #32
 80037d8:	e691      	b.n	80034fe <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 80037da:	68b1      	ldr	r1, [r6, #8]
 80037dc:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 80037de:	bf44      	itt	mi
 80037e0:	2120      	movmi	r1, #32
 80037e2:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e6:	4611      	mov	r1, r2
 80037e8:	4620      	mov	r0, r4
 80037ea:	f01c fe61 	bl	80204b0 <HAL_PCD_DataOutStageCallback>
 80037ee:	e7d7      	b.n	80037a0 <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037f0:	9b01      	ldr	r3, [sp, #4]
 80037f2:	07de      	lsls	r6, r3, #31
 80037f4:	d56e      	bpl.n	80038d4 <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037f6:	fa5f fa8b 	uxtb.w	sl, fp
 80037fa:	4651      	mov	r1, sl
 80037fc:	6820      	ldr	r0, [r4, #0]
 80037fe:	f004 fd2a 	bl	8008256 <USB_ReadDevInEPInterrupt>
 8003802:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003804:	07f0      	lsls	r0, r6, #31
 8003806:	d510      	bpl.n	800382a <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003808:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 800380c:	2001      	movs	r0, #1
 800380e:	f00b 020f 	and.w	r2, fp, #15
 8003812:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003816:	ea23 0302 	bic.w	r3, r3, r2
 800381a:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800381e:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003820:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003824:	4620      	mov	r0, r4
 8003826:	f01c fe4c 	bl	80204c2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800382a:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800382c:	bf44      	itt	mi
 800382e:	2308      	movmi	r3, #8
 8003830:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003834:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003836:	bf44      	itt	mi
 8003838:	2310      	movmi	r3, #16
 800383a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800383e:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003840:	bf44      	itt	mi
 8003842:	2340      	movmi	r3, #64	; 0x40
 8003844:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003848:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800384a:	bf44      	itt	mi
 800384c:	2302      	movmi	r3, #2
 800384e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003852:	0636      	lsls	r6, r6, #24
 8003854:	d53e      	bpl.n	80038d4 <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003856:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003858:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 800385a:	42b3      	cmp	r3, r6
 800385c:	d83a      	bhi.n	80038d4 <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800385e:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003860:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 8003866:	429e      	cmp	r6, r3
 8003868:	bf28      	it	cs
 800386a:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800386c:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003870:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003872:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8003876:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003878:	9303      	str	r3, [sp, #12]
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	b29b      	uxth	r3, r3
 8003882:	42b3      	cmp	r3, r6
 8003884:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003886:	d923      	bls.n	80038d0 <HAL_PCD_IRQHandler+0x430>
 8003888:	429f      	cmp	r7, r3
 800388a:	d921      	bls.n	80038d0 <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800388c:	b967      	cbnz	r7, 80038a8 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800388e:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003890:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003892:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8003896:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 800389a:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800389e:	ea23 0302 	bic.w	r3, r3, r2
 80038a2:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 80038a6:	e015      	b.n	80038d4 <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 80038a8:	1aff      	subs	r7, r7, r3
 80038aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80038ac:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80038ae:	9802      	ldr	r0, [sp, #8]
 80038b0:	429f      	cmp	r7, r3
 80038b2:	bf28      	it	cs
 80038b4:	461f      	movcs	r7, r3
 80038b6:	b2bb      	uxth	r3, r7
 80038b8:	4652      	mov	r2, sl
 80038ba:	f004 fb4b 	bl	8007f54 <USB_WritePacket>
    ep->xfer_buff  += len;
 80038be:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80038c0:	443b      	add	r3, r7
 80038c2:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80038c4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80038c6:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 80038c8:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 80038ca:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 80038cc:	656f      	str	r7, [r5, #84]	; 0x54
 80038ce:	e7d4      	b.n	800387a <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 80038d0:	429f      	cmp	r7, r3
 80038d2:	d9dc      	bls.n	800388e <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 80038d4:	9b01      	ldr	r3, [sp, #4]
 80038d6:	085b      	lsrs	r3, r3, #1
        epnum++;
 80038d8:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	351c      	adds	r5, #28
 80038e0:	f108 0820 	add.w	r8, r8, #32
 80038e4:	e61c      	b.n	8003520 <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 80038e6:	4620      	mov	r0, r4
 80038e8:	f01c fe1c 	bl	8020524 <HAL_PCD_ResumeCallback>
 80038ec:	e632      	b.n	8003554 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 80038ee:	4620      	mov	r0, r4
 80038f0:	f01c fe00 	bl	80204f4 <HAL_PCD_SuspendCallback>
 80038f4:	e65e      	b.n	80035b4 <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038f6:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80038fe:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003900:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003904:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003908:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800390c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003910:	9a00      	ldr	r2, [sp, #0]
 8003912:	3201      	adds	r2, #1
 8003914:	9200      	str	r2, [sp, #0]
 8003916:	3320      	adds	r3, #32
 8003918:	e660      	b.n	80035dc <HAL_PCD_IRQHandler+0x13c>
 800391a:	bf00      	nop
 800391c:	ff275340 	.word	0xff275340
 8003920:	000c34ff 	.word	0x000c34ff
 8003924:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003928:	696b      	ldr	r3, [r5, #20]
 800392a:	f043 030b 	orr.w	r3, r3, #11
 800392e:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003930:	692b      	ldr	r3, [r5, #16]
 8003932:	f043 030b 	orr.w	r3, r3, #11
 8003936:	612b      	str	r3, [r5, #16]
 8003938:	e666      	b.n	8003608 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800393a:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <HAL_PCD_IRQHandler+0x558>)
 800393c:	492f      	ldr	r1, [pc, #188]	; (80039fc <HAL_PCD_IRQHandler+0x55c>)
 800393e:	4402      	add	r2, r0
 8003940:	428a      	cmp	r2, r1
 8003942:	d803      	bhi.n	800394c <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800394a:	e68a      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800394c:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8003950:	492b      	ldr	r1, [pc, #172]	; (8003a00 <HAL_PCD_IRQHandler+0x560>)
 8003952:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003956:	428a      	cmp	r2, r1
 8003958:	d803      	bhi.n	8003962 <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8003960:	e67f      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003962:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003966:	4927      	ldr	r1, [pc, #156]	; (8003a04 <HAL_PCD_IRQHandler+0x564>)
 8003968:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 800396c:	428a      	cmp	r2, r1
 800396e:	d803      	bhi.n	8003978 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003976:	e674      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003978:	4a23      	ldr	r2, [pc, #140]	; (8003a08 <HAL_PCD_IRQHandler+0x568>)
 800397a:	4924      	ldr	r1, [pc, #144]	; (8003a0c <HAL_PCD_IRQHandler+0x56c>)
 800397c:	4402      	add	r2, r0
 800397e:	428a      	cmp	r2, r1
 8003980:	d803      	bhi.n	800398a <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003988:	e66b      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800398a:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <HAL_PCD_IRQHandler+0x570>)
 800398c:	4921      	ldr	r1, [pc, #132]	; (8003a14 <HAL_PCD_IRQHandler+0x574>)
 800398e:	4402      	add	r2, r0
 8003990:	428a      	cmp	r2, r1
 8003992:	d803      	bhi.n	800399c <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800399a:	e662      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <HAL_PCD_IRQHandler+0x578>)
 800399e:	491f      	ldr	r1, [pc, #124]	; (8003a1c <HAL_PCD_IRQHandler+0x57c>)
 80039a0:	4402      	add	r2, r0
 80039a2:	428a      	cmp	r2, r1
 80039a4:	d803      	bhi.n	80039ae <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80039ac:	e659      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039ae:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80039b2:	491b      	ldr	r1, [pc, #108]	; (8003a20 <HAL_PCD_IRQHandler+0x580>)
 80039b4:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80039b8:	428a      	cmp	r2, r1
 80039ba:	d803      	bhi.n	80039c4 <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c2:	e64e      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_PCD_IRQHandler+0x584>)
 80039c6:	4918      	ldr	r1, [pc, #96]	; (8003a28 <HAL_PCD_IRQHandler+0x588>)
 80039c8:	4402      	add	r2, r0
 80039ca:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	bf94      	ite	ls
 80039d0:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80039d4:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80039d8:	e643      	b.n	8003662 <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039da:	2b06      	cmp	r3, #6
 80039dc:	f47f ae76 	bne.w	80036cc <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039e0:	2208      	movs	r2, #8
 80039e2:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80039e6:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039e8:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039ea:	f004 fb89 	bl	8008100 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ee:	fb06 4607 	mla	r6, r6, r7, r4
 80039f2:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80039f6:	e664      	b.n	80036c2 <HAL_PCD_IRQHandler+0x222>
 80039f8:	ff1b1e40 	.word	0xff1b1e40
 80039fc:	000f423f 	.word	0x000f423f
 8003a00:	00124f7f 	.word	0x00124f7f
 8003a04:	0013d61f 	.word	0x0013d61f
 8003a08:	fee5b660 	.word	0xfee5b660
 8003a0c:	0016e35f 	.word	0x0016e35f
 8003a10:	feced300 	.word	0xfeced300
 8003a14:	001b773f 	.word	0x001b773f
 8003a18:	feb35bc0 	.word	0xfeb35bc0
 8003a1c:	002191bf 	.word	0x002191bf
 8003a20:	0038751f 	.word	0x0038751f
 8003a24:	fe5954e0 	.word	0xfe5954e0
 8003a28:	00419cdf 	.word	0x00419cdf

08003a2c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003a2c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003a30:	2a01      	cmp	r2, #1
{
 8003a32:	b510      	push	{r4, lr}
 8003a34:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003a36:	d00b      	beq.n	8003a50 <HAL_PCD_SetAddress+0x24>
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a3e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a42:	6800      	ldr	r0, [r0, #0]
 8003a44:	f004 fbc2 	bl	80081cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003a4e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003a50:	2002      	movs	r0, #2
}
 8003a52:	bd10      	pop	{r4, pc}

08003a54 <HAL_PCD_EP_Open>:
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4604      	mov	r4, r0
 8003a58:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003a5c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a60:	f04f 061c 	mov.w	r6, #28
 8003a64:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a66:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003a6a:	bf15      	itete	ne
 8003a6c:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8003a70:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a74:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003a76:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003a7a:	bf15      	itete	ne
 8003a7c:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8003a7e:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8003a80:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003a84:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003a88:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003a8a:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003a8c:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8003a8e:	b2c0      	uxtb	r0, r0
 8003a90:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8003a92:	b102      	cbz	r2, 8003a96 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003a94:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003a96:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003a98:	bf04      	itt	eq
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003a9e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d009      	beq.n	8003aba <HAL_PCD_EP_Open+0x66>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	f004 f96b 	bl	8007d88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8003ab8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003aba:	2002      	movs	r0, #2
}
 8003abc:	bd70      	pop	{r4, r5, r6, pc}

08003abe <HAL_PCD_EP_Close>:
{
 8003abe:	f001 030f 	and.w	r3, r1, #15
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003aca:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003ace:	fb00 4102 	mla	r1, r0, r2, r4
 8003ad2:	bf19      	ittee	ne
 8003ad4:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003ad6:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8003ada:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003ade:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003ae2:	bf15      	itete	ne
 8003ae4:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003ae6:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8003ae8:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003aec:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 8003af0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003af2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d009      	beq.n	8003b0e <HAL_PCD_EP_Close+0x50>
 8003afa:	2301      	movs	r3, #1
 8003afc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	f004 f983 	bl	8007e0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003b0c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003b0e:	2002      	movs	r0, #2
}
 8003b10:	bd10      	pop	{r4, pc}

08003b12 <HAL_PCD_EP_Receive>:
{
 8003b12:	b538      	push	{r3, r4, r5, lr}
 8003b14:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b18:	241c      	movs	r4, #28
 8003b1a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003b1e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b22:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003b26:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003b2a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003b2c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003b30:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003b34:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003b38:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b3c:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003b3e:	b91d      	cbnz	r5, 8003b48 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b40:	f004 f996 	bl	8007e70 <USB_EP0StartXfer>
}
 8003b44:	2000      	movs	r0, #0
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b48:	f004 fa14 	bl	8007f74 <USB_EPStartXfer>
 8003b4c:	e7fa      	b.n	8003b44 <HAL_PCD_EP_Receive+0x32>

08003b4e <HAL_PCD_EP_Transmit>:
{
 8003b4e:	b538      	push	{r3, r4, r5, lr}
 8003b50:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b54:	241c      	movs	r4, #28
 8003b56:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003b5a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b5e:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003b60:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003b66:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003b68:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003b6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 8003b6e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b72:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003b74:	b91d      	cbnz	r5, 8003b7e <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b76:	f004 f97b 	bl	8007e70 <USB_EP0StartXfer>
}
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b7e:	f004 f9f9 	bl	8007f74 <USB_EPStartXfer>
 8003b82:	e7fa      	b.n	8003b7a <HAL_PCD_EP_Transmit+0x2c>

08003b84 <HAL_PCD_EP_SetStall>:
{
 8003b84:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003b86:	6843      	ldr	r3, [r0, #4]
 8003b88:	f001 050f 	and.w	r5, r1, #15
 8003b8c:	429d      	cmp	r5, r3
{
 8003b8e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003b90:	d82d      	bhi.n	8003bee <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003b92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b96:	f04f 021c 	mov.w	r2, #28
 8003b9a:	d01e      	beq.n	8003bda <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003b9c:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003ba0:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003ba4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003ba6:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8003ba8:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003bac:	2201      	movs	r2, #1
 8003bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003bb0:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003bb2:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8003bb6:	4291      	cmp	r1, r2
 8003bb8:	d01b      	beq.n	8003bf2 <HAL_PCD_EP_SetStall+0x6e>
 8003bba:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	f004 faab 	bl	800811c <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003bc6:	b925      	cbnz	r5, 8003bd2 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003bc8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	f004 fb73 	bl	80082b8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003bda:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003bde:	fb02 0101 	mla	r1, r2, r1, r0
 8003be2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003be4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003be8:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003bec:	e7de      	b.n	8003bac <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003bee:	2001      	movs	r0, #1
 8003bf0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003bf2:	2002      	movs	r0, #2
}
 8003bf4:	bd38      	pop	{r3, r4, r5, pc}

08003bf6 <HAL_PCD_EP_ClrStall>:
{
 8003bf6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bf8:	6843      	ldr	r3, [r0, #4]
 8003bfa:	f001 020f 	and.w	r2, r1, #15
 8003bfe:	429a      	cmp	r2, r3
{
 8003c00:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c02:	d826      	bhi.n	8003c52 <HAL_PCD_EP_ClrStall+0x5c>
 8003c04:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003c06:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c0a:	fb03 0102 	mla	r1, r3, r2, r0
 8003c0e:	bf19      	ittee	ne
 8003c10:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003c12:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003c16:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003c1a:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003c1e:	bf14      	ite	ne
 8003c20:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003c22:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003c24:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003c28:	bf14      	ite	ne
 8003c2a:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003c2e:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003c32:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003c34:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003c36:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d00b      	beq.n	8003c56 <HAL_PCD_EP_ClrStall+0x60>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c44:	6820      	ldr	r0, [r4, #0]
 8003c46:	f004 fa96 	bl	8008176 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c4a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003c4e:	4628      	mov	r0, r5
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003c56:	2002      	movs	r0, #2
}
 8003c58:	bd38      	pop	{r3, r4, r5, pc}

08003c5a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c5a:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c5c:	6804      	ldr	r4, [r0, #0]
 8003c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003c60:	b921      	cbnz	r1, 8003c6c <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c66:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003c68:	2000      	movs	r0, #0
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003c6e:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003c74:	2000      	movs	r0, #0
 8003c76:	1c46      	adds	r6, r0, #1
 8003c78:	b2c0      	uxtb	r0, r0
 8003c7a:	4285      	cmp	r5, r0
 8003c7c:	d806      	bhi.n	8003c8c <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c7e:	313f      	adds	r1, #63	; 0x3f
 8003c80:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003c84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c88:	6063      	str	r3, [r4, #4]
 8003c8a:	e7ed      	b.n	8003c68 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c8c:	3040      	adds	r0, #64	; 0x40
 8003c8e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003c92:	6840      	ldr	r0, [r0, #4]
 8003c94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c98:	4630      	mov	r0, r6
 8003c9a:	e7ec      	b.n	8003c76 <HAL_PCDEx_SetTxFiFo+0x1c>

08003c9c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003c9c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003c9e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003ca0:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ca4:	6802      	ldr	r2, [r0, #0]
{
 8003ca6:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003ca8:	2101      	movs	r1, #1
 8003caa:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cb4:	6993      	ldr	r3, [r2, #24]
 8003cb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cba:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cbc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	f043 0303 	orr.w	r3, r3, #3
 8003cc6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003cc8:	4770      	bx	lr

08003cca <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cca:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003cd2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd8:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003cda:	2000      	movs	r0, #0
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_PWREx_GetVoltageRange+0x20>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003ce8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003cec:	d007      	beq.n	8003cfe <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003cf6:	bf14      	ite	ne
 8003cf8:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003cfc:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003cfe:	4770      	bx	lr
 8003d00:	40007000 	.word	0x40007000

08003d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d04:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d06:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d08:	bb28      	cbnz	r0, 8003d56 <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d0a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003d0e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1e:	d119      	bne.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d2c:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003d2e:	6811      	ldr	r1, [r2, #0]
 8003d30:	2232      	movs	r2, #50	; 0x32
 8003d32:	434a      	muls	r2, r1
 8003d34:	491f      	ldr	r1, [pc, #124]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003d36:	fbb2 f2f1 	udiv	r2, r2, r1
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3e:	6958      	ldr	r0, [r3, #20]
 8003d40:	0540      	lsls	r0, r0, #21
 8003d42:	d500      	bpl.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003d44:	b922      	cbnz	r2, 8003d50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d46:	694b      	ldr	r3, [r1, #20]
 8003d48:	055b      	lsls	r3, r3, #21
 8003d4a:	d52d      	bpl.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003d4c:	2003      	movs	r0, #3
 8003d4e:	4770      	bx	lr
        wait_loop_index--;
 8003d50:	3a01      	subs	r2, #1
 8003d52:	e7f4      	b.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003d54:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d56:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d5a:	d120      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d5c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003d60:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d64:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d70:	d11a      	bne.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	2232      	movs	r2, #50	; 0x32
 8003d84:	434a      	muls	r2, r1
 8003d86:	490b      	ldr	r1, [pc, #44]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003d88:	fbb2 f2f1 	udiv	r2, r2, r1
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d90:	6958      	ldr	r0, [r3, #20]
 8003d92:	0540      	lsls	r0, r0, #21
 8003d94:	d5d7      	bpl.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003d96:	2a00      	cmp	r2, #0
 8003d98:	d0d5      	beq.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8003d9a:	3a01      	subs	r2, #1
 8003d9c:	e7f8      	b.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d9e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da6:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003da8:	2000      	movs	r0, #0
}
 8003daa:	4770      	bx	lr
 8003dac:	40007000 	.word	0x40007000
 8003db0:	20000ed4 	.word	0x20000ed4
 8003db4:	000f4240 	.word	0x000f4240

08003db8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003db8:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <HAL_PWREx_EnableVddUSB+0xc>)
 8003dba:	6853      	ldr	r3, [r2, #4]
 8003dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	4770      	bx	lr
 8003dc4:	40007000 	.word	0x40007000

08003dc8 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003dc8:	4a02      	ldr	r2, [pc, #8]	; (8003dd4 <HAL_PWREx_EnableVddIO2+0xc>)
 8003dca:	6853      	ldr	r3, [r2, #4]
 8003dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd0:	6053      	str	r3, [r2, #4]
 8003dd2:	4770      	bx	lr
 8003dd4:	40007000 	.word	0x40007000

08003dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dda:	4d1c      	ldr	r5, [pc, #112]	; (8003e4c <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8003ddc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003dde:	00da      	lsls	r2, r3, #3
{
 8003de0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003de2:	d518      	bpl.n	8003e16 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003de4:	f7ff ff7c 	bl	8003ce0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003dec:	d123      	bne.n	8003e36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dee:	2c80      	cmp	r4, #128	; 0x80
 8003df0:	d928      	bls.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003df2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003df4:	bf8c      	ite	hi
 8003df6:	2002      	movhi	r0, #2
 8003df8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	f023 030f 	bic.w	r3, r3, #15
 8003e02:	4303      	orrs	r3, r0
 8003e04:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003e0c:	1a18      	subs	r0, r3, r0
 8003e0e:	bf18      	it	ne
 8003e10:	2001      	movne	r0, #1
 8003e12:	b003      	add	sp, #12
 8003e14:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	65ab      	str	r3, [r5, #88]	; 0x58
 8003e1e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003e28:	f7ff ff5a 	bl	8003ce0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e32:	65ab      	str	r3, [r5, #88]	; 0x58
 8003e34:	e7d8      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003e36:	2c7f      	cmp	r4, #127	; 0x7f
 8003e38:	d806      	bhi.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003e3a:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003e3e:	4258      	negs	r0, r3
 8003e40:	4158      	adcs	r0, r3
 8003e42:	e7da      	b.n	8003dfa <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e44:	2000      	movs	r0, #0
 8003e46:	e7d8      	b.n	8003dfa <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e48:	2002      	movs	r0, #2
 8003e4a:	e7d6      	b.n	8003dfa <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40022000 	.word	0x40022000

08003e54 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x90>)
 8003e56:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e58:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e5a:	f012 020c 	ands.w	r2, r2, #12
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x18>
 8003e60:	2a0c      	cmp	r2, #12
 8003e62:	d115      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e64:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e68:	2901      	cmp	r1, #1
 8003e6a:	d118      	bne.n	8003e9e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e6c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003e6e:	481e      	ldr	r0, [pc, #120]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e70:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e72:	bf55      	itete	pl
 8003e74:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e78:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e7a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e7e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003e82:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e86:	b112      	cbz	r2, 8003e8e <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e88:	2a0c      	cmp	r2, #12
 8003e8a:	d009      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x4c>
 8003e8c:	2000      	movs	r0, #0
}
 8003e8e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e90:	2a04      	cmp	r2, #4
 8003e92:	d024      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e94:	2a08      	cmp	r2, #8
 8003e96:	4815      	ldr	r0, [pc, #84]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003e98:	bf18      	it	ne
 8003e9a:	2000      	movne	r0, #0
 8003e9c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e9e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ea0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea2:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ea4:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea8:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8003eac:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eae:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x6c>
 8003eb4:	2903      	cmp	r1, #3
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb8:	68d9      	ldr	r1, [r3, #12]
 8003eba:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	480a      	ldr	r0, [pc, #40]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003ec4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec8:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eca:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ece:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003ed2:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed4:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ed6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003ed8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003edc:	4770      	bx	lr
 8003ede:	4803      	ldr	r0, [pc, #12]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	080324ac 	.word	0x080324ac
 8003eec:	00f42400 	.word	0x00f42400

08003ef0 <HAL_RCC_OscConfig>:
{
 8003ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	b908      	cbnz	r0, 8003efc <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
 8003efa:	e046      	b.n	8003f8a <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003efc:	4ca8      	ldr	r4, [pc, #672]	; (80041a0 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003efe:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f00:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f02:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f04:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f06:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f0a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f0e:	d572      	bpl.n	8003ff6 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f10:	b11e      	cbz	r6, 8003f1a <HAL_RCC_OscConfig+0x2a>
 8003f12:	2e0c      	cmp	r6, #12
 8003f14:	d151      	bne.n	8003fba <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f16:	2f01      	cmp	r7, #1
 8003f18:	d14f      	bne.n	8003fba <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0799      	lsls	r1, r3, #30
 8003f1e:	d502      	bpl.n	8003f26 <HAL_RCC_OscConfig+0x36>
 8003f20:	69ab      	ldr	r3, [r5, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0e8      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	6a28      	ldr	r0, [r5, #32]
 8003f2a:	071a      	lsls	r2, r3, #28
 8003f2c:	bf56      	itet	pl
 8003f2e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003f32:	6823      	ldrmi	r3, [r4, #0]
 8003f34:	091b      	lsrpl	r3, r3, #4
 8003f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3a:	4283      	cmp	r3, r0
 8003f3c:	d228      	bcs.n	8003f90 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f3e:	f7ff ff4b 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d1d8      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f043 0308 	orr.w	r3, r3, #8
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	6a2a      	ldr	r2, [r5, #32]
 8003f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f56:	4313      	orrs	r3, r2
 8003f58:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	69ea      	ldr	r2, [r5, #28]
 8003f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f66:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f68:	f7ff ff74 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003f6c:	68a3      	ldr	r3, [r4, #8]
 8003f6e:	4a8d      	ldr	r2, [pc, #564]	; (80041a4 <HAL_RCC_OscConfig+0x2b4>)
 8003f70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f74:	5cd3      	ldrb	r3, [r2, r3]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	40d8      	lsrs	r0, r3
 8003f7c:	4b8a      	ldr	r3, [pc, #552]	; (80041a8 <HAL_RCC_OscConfig+0x2b8>)
 8003f7e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7fd f81d 	bl	8000fc0 <HAL_InitTick>
        if(status != HAL_OK)
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d035      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x106>
}
 8003f8a:	b003      	add	sp, #12
 8003f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f043 0308 	orr.w	r3, r3, #8
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9e:	4303      	orrs	r3, r0
 8003fa0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa2:	6863      	ldr	r3, [r4, #4]
 8003fa4:	69ea      	ldr	r2, [r5, #28]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003fae:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb0:	f7ff ff12 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d0d7      	beq.n	8003f68 <HAL_RCC_OscConfig+0x78>
 8003fb8:	e79e      	b.n	8003ef8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fba:	69ab      	ldr	r3, [r5, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d03a      	beq.n	8004036 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003fc8:	f7fd f82a 	bl	8001020 <HAL_GetTick>
 8003fcc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	079b      	lsls	r3, r3, #30
 8003fd2:	d528      	bpl.n	8004026 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	6a2a      	ldr	r2, [r5, #32]
 8003fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	69ea      	ldr	r2, [r5, #28]
 8003fec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ff4:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	07d9      	lsls	r1, r3, #31
 8003ffa:	d42d      	bmi.n	8004058 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	079a      	lsls	r2, r3, #30
 8004000:	d46b      	bmi.n	80040da <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	0719      	lsls	r1, r3, #28
 8004006:	f100 80a0 	bmi.w	800414a <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400a:	682b      	ldr	r3, [r5, #0]
 800400c:	075a      	lsls	r2, r3, #29
 800400e:	f100 80cd 	bmi.w	80041ac <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	069a      	lsls	r2, r3, #26
 8004016:	f100 8136 	bmi.w	8004286 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800401a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 815c 	bne.w	80042da <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8004022:	2000      	movs	r0, #0
 8004024:	e7b1      	b.n	8003f8a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004026:	f7fc fffb 	bl	8001020 <HAL_GetTick>
 800402a:	eba0 0008 	sub.w	r0, r0, r8
 800402e:	2802      	cmp	r0, #2
 8004030:	d9cd      	bls.n	8003fce <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8004032:	2003      	movs	r0, #3
 8004034:	e7a9      	b.n	8003f8a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800403e:	f7fc ffef 	bl	8001020 <HAL_GetTick>
 8004042:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	0798      	lsls	r0, r3, #30
 8004048:	d5d5      	bpl.n	8003ff6 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800404a:	f7fc ffe9 	bl	8001020 <HAL_GetTick>
 800404e:	eba0 0008 	sub.w	r0, r0, r8
 8004052:	2802      	cmp	r0, #2
 8004054:	d9f6      	bls.n	8004044 <HAL_RCC_OscConfig+0x154>
 8004056:	e7ec      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004058:	2e08      	cmp	r6, #8
 800405a:	d003      	beq.n	8004064 <HAL_RCC_OscConfig+0x174>
 800405c:	2e0c      	cmp	r6, #12
 800405e:	d108      	bne.n	8004072 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8004060:	2f03      	cmp	r7, #3
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	039b      	lsls	r3, r3, #14
 8004068:	d5c8      	bpl.n	8003ffc <HAL_RCC_OscConfig+0x10c>
 800406a:	686b      	ldr	r3, [r5, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1c5      	bne.n	8003ffc <HAL_RCC_OscConfig+0x10c>
 8004070:	e742      	b.n	8003ef8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004072:	686b      	ldr	r3, [r5, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d110      	bne.n	800409c <HAL_RCC_OscConfig+0x1ac>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004082:	f7fc ffcd 	bl	8001020 <HAL_GetTick>
 8004086:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	0398      	lsls	r0, r3, #14
 800408c:	d4b6      	bmi.n	8003ffc <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408e:	f7fc ffc7 	bl	8001020 <HAL_GetTick>
 8004092:	eba0 0008 	sub.w	r0, r0, r8
 8004096:	2864      	cmp	r0, #100	; 0x64
 8004098:	d9f6      	bls.n	8004088 <HAL_RCC_OscConfig+0x198>
 800409a:	e7ca      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a0:	d104      	bne.n	80040ac <HAL_RCC_OscConfig+0x1bc>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	e7e6      	b.n	800407a <HAL_RCC_OscConfig+0x18a>
 80040ac:	6822      	ldr	r2, [r4, #0]
 80040ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040b2:	6022      	str	r2, [r4, #0]
 80040b4:	6822      	ldr	r2, [r4, #0]
 80040b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ba:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e0      	bne.n	8004082 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80040c0:	f7fc ffae 	bl	8001020 <HAL_GetTick>
 80040c4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	0399      	lsls	r1, r3, #14
 80040ca:	d597      	bpl.n	8003ffc <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fc ffa8 	bl	8001020 <HAL_GetTick>
 80040d0:	eba0 0008 	sub.w	r0, r0, r8
 80040d4:	2864      	cmp	r0, #100	; 0x64
 80040d6:	d9f6      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1d6>
 80040d8:	e7ab      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040da:	2e04      	cmp	r6, #4
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1f6>
 80040de:	2e0c      	cmp	r6, #12
 80040e0:	d110      	bne.n	8004104 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80040e2:	2f02      	cmp	r7, #2
 80040e4:	d10e      	bne.n	8004104 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	055a      	lsls	r2, r3, #21
 80040ea:	d503      	bpl.n	80040f4 <HAL_RCC_OscConfig+0x204>
 80040ec:	68eb      	ldr	r3, [r5, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f43f af02 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	692a      	ldr	r2, [r5, #16]
 80040f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004100:	6063      	str	r3, [r4, #4]
 8004102:	e77e      	b.n	8004002 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004104:	68eb      	ldr	r3, [r5, #12]
 8004106:	b17b      	cbz	r3, 8004128 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004110:	f7fc ff86 	bl	8001020 <HAL_GetTick>
 8004114:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	055b      	lsls	r3, r3, #21
 800411a:	d4eb      	bmi.n	80040f4 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411c:	f7fc ff80 	bl	8001020 <HAL_GetTick>
 8004120:	1bc0      	subs	r0, r0, r7
 8004122:	2802      	cmp	r0, #2
 8004124:	d9f7      	bls.n	8004116 <HAL_RCC_OscConfig+0x226>
 8004126:	e784      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004130:	f7fc ff76 	bl	8001020 <HAL_GetTick>
 8004134:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	0558      	lsls	r0, r3, #21
 800413a:	f57f af62 	bpl.w	8004002 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413e:	f7fc ff6f 	bl	8001020 <HAL_GetTick>
 8004142:	1bc0      	subs	r0, r0, r7
 8004144:	2802      	cmp	r0, #2
 8004146:	d9f6      	bls.n	8004136 <HAL_RCC_OscConfig+0x246>
 8004148:	e773      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800414a:	696b      	ldr	r3, [r5, #20]
 800414c:	b19b      	cbz	r3, 8004176 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800414e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800415a:	f7fc ff61 	bl	8001020 <HAL_GetTick>
 800415e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004160:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004164:	079b      	lsls	r3, r3, #30
 8004166:	f53f af50 	bmi.w	800400a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800416a:	f7fc ff59 	bl	8001020 <HAL_GetTick>
 800416e:	1bc0      	subs	r0, r0, r7
 8004170:	2802      	cmp	r0, #2
 8004172:	d9f5      	bls.n	8004160 <HAL_RCC_OscConfig+0x270>
 8004174:	e75d      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8004176:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004182:	f7fc ff4d 	bl	8001020 <HAL_GetTick>
 8004186:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004188:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800418c:	0798      	lsls	r0, r3, #30
 800418e:	f57f af3c 	bpl.w	800400a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fc ff45 	bl	8001020 <HAL_GetTick>
 8004196:	1bc0      	subs	r0, r0, r7
 8004198:	2802      	cmp	r0, #2
 800419a:	d9f5      	bls.n	8004188 <HAL_RCC_OscConfig+0x298>
 800419c:	e749      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08032493 	.word	0x08032493
 80041a8:	20000ed4 	.word	0x20000ed4
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041ae:	00d9      	lsls	r1, r3, #3
 80041b0:	d429      	bmi.n	8004206 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80041ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041c4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c8:	4f71      	ldr	r7, [pc, #452]	; (8004390 <HAL_RCC_OscConfig+0x4a0>)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	05da      	lsls	r2, r3, #23
 80041ce:	d51d      	bpl.n	800420c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d0:	68ab      	ldr	r3, [r5, #8]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d12b      	bne.n	800422e <HAL_RCC_OscConfig+0x33e>
 80041d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80041e2:	f7fc ff1d 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80041ea:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80041f0:	0798      	lsls	r0, r3, #30
 80041f2:	d542      	bpl.n	800427a <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80041f4:	f1b8 0f00 	cmp.w	r8, #0
 80041f8:	f43f af0b 	beq.w	8004012 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	65a3      	str	r3, [r4, #88]	; 0x58
 8004204:	e705      	b.n	8004012 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8004206:	f04f 0800 	mov.w	r8, #0
 800420a:	e7dd      	b.n	80041c8 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004212:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004214:	f7fc ff04 	bl	8001020 <HAL_GetTick>
 8004218:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	05db      	lsls	r3, r3, #23
 800421e:	d4d7      	bmi.n	80041d0 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004220:	f7fc fefe 	bl	8001020 <HAL_GetTick>
 8004224:	eba0 0009 	sub.w	r0, r0, r9
 8004228:	2802      	cmp	r0, #2
 800422a:	d9f6      	bls.n	800421a <HAL_RCC_OscConfig+0x32a>
 800422c:	e701      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422e:	2b05      	cmp	r3, #5
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x350>
 8004232:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800423e:	e7ca      	b.n	80041d6 <HAL_RCC_OscConfig+0x2e6>
 8004240:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800424c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004250:	f022 0204 	bic.w	r2, r2, #4
 8004254:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1c2      	bne.n	80041e2 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 800425c:	f7fc fee0 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004264:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004266:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800426a:	0799      	lsls	r1, r3, #30
 800426c:	d5c2      	bpl.n	80041f4 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fc fed7 	bl	8001020 <HAL_GetTick>
 8004272:	1bc0      	subs	r0, r0, r7
 8004274:	4548      	cmp	r0, r9
 8004276:	d9f6      	bls.n	8004266 <HAL_RCC_OscConfig+0x376>
 8004278:	e6db      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fc fed1 	bl	8001020 <HAL_GetTick>
 800427e:	1bc0      	subs	r0, r0, r7
 8004280:	4548      	cmp	r0, r9
 8004282:	d9b3      	bls.n	80041ec <HAL_RCC_OscConfig+0x2fc>
 8004284:	e6d5      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004288:	b19b      	cbz	r3, 80042b2 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 800428a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004296:	f7fc fec3 	bl	8001020 <HAL_GetTick>
 800429a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800429c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80042a0:	079b      	lsls	r3, r3, #30
 80042a2:	f53f aeba 	bmi.w	800401a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a6:	f7fc febb 	bl	8001020 <HAL_GetTick>
 80042aa:	1bc0      	subs	r0, r0, r7
 80042ac:	2802      	cmp	r0, #2
 80042ae:	d9f5      	bls.n	800429c <HAL_RCC_OscConfig+0x3ac>
 80042b0:	e6bf      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 80042b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80042be:	f7fc feaf 	bl	8001020 <HAL_GetTick>
 80042c2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80042c8:	0798      	lsls	r0, r3, #30
 80042ca:	f57f aea6 	bpl.w	800401a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ce:	f7fc fea7 	bl	8001020 <HAL_GetTick>
 80042d2:	1bc0      	subs	r0, r0, r7
 80042d4:	2802      	cmp	r0, #2
 80042d6:	d9f5      	bls.n	80042c4 <HAL_RCC_OscConfig+0x3d4>
 80042d8:	e6ab      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042da:	2e0c      	cmp	r6, #12
 80042dc:	f43f ae0c 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ea:	d136      	bne.n	800435a <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80042ec:	f7fc fe98 	bl	8001020 <HAL_GetTick>
 80042f0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	0199      	lsls	r1, r3, #6
 80042f6:	d42a      	bmi.n	800434e <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80042fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80042fc:	06db      	lsls	r3, r3, #27
 80042fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004302:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004304:	4313      	orrs	r3, r2
 8004306:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004308:	3a01      	subs	r2, #1
 800430a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800430e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004310:	0852      	lsrs	r2, r2, #1
 8004312:	3a01      	subs	r2, #1
 8004314:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004318:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800431a:	0852      	lsrs	r2, r2, #1
 800431c:	3a01      	subs	r2, #1
 800431e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004322:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800432c:	68e3      	ldr	r3, [r4, #12]
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004334:	f7fc fe74 	bl	8001020 <HAL_GetTick>
 8004338:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	019a      	lsls	r2, r3, #6
 800433e:	f53f ae70 	bmi.w	8004022 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004342:	f7fc fe6d 	bl	8001020 <HAL_GetTick>
 8004346:	1b40      	subs	r0, r0, r5
 8004348:	2802      	cmp	r0, #2
 800434a:	d9f6      	bls.n	800433a <HAL_RCC_OscConfig+0x44a>
 800434c:	e671      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434e:	f7fc fe67 	bl	8001020 <HAL_GetTick>
 8004352:	1b80      	subs	r0, r0, r6
 8004354:	2802      	cmp	r0, #2
 8004356:	d9cc      	bls.n	80042f2 <HAL_RCC_OscConfig+0x402>
 8004358:	e66b      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004360:	bf02      	ittt	eq
 8004362:	68e3      	ldreq	r3, [r4, #12]
 8004364:	f023 0303 	biceq.w	r3, r3, #3
 8004368:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800436a:	68e3      	ldr	r3, [r4, #12]
 800436c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004374:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004376:	f7fc fe53 	bl	8001020 <HAL_GetTick>
 800437a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	019b      	lsls	r3, r3, #6
 8004380:	f57f ae4f 	bpl.w	8004022 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fc fe4c 	bl	8001020 <HAL_GetTick>
 8004388:	1b40      	subs	r0, r0, r5
 800438a:	2802      	cmp	r0, #2
 800438c:	d9f6      	bls.n	800437c <HAL_RCC_OscConfig+0x48c>
 800438e:	e650      	b.n	8004032 <HAL_RCC_OscConfig+0x142>
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_RCC_ClockConfig>:
{
 8004394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004398:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800439a:	4605      	mov	r5, r0
 800439c:	b910      	cbnz	r0, 80043a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800439e:	2001      	movs	r0, #1
 80043a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4a71      	ldr	r2, [pc, #452]	; (800456c <HAL_RCC_ClockConfig+0x1d8>)
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d334      	bcc.n	800441a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b0:	6829      	ldr	r1, [r5, #0]
 80043b2:	f011 0701 	ands.w	r7, r1, #1
 80043b6:	d13b      	bne.n	8004430 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b8:	682a      	ldr	r2, [r5, #0]
 80043ba:	0791      	lsls	r1, r2, #30
 80043bc:	f140 80bb 	bpl.w	8004536 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	496b      	ldr	r1, [pc, #428]	; (8004570 <HAL_RCC_ClockConfig+0x1dc>)
 80043c2:	68a8      	ldr	r0, [r5, #8]
 80043c4:	688b      	ldr	r3, [r1, #8]
 80043c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ca:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043cc:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ce:	4967      	ldr	r1, [pc, #412]	; (800456c <HAL_RCC_ClockConfig+0x1d8>)
 80043d0:	680b      	ldr	r3, [r1, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	429e      	cmp	r6, r3
 80043d8:	f0c0 80b5 	bcc.w	8004546 <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	f012 0f04 	tst.w	r2, #4
 80043e0:	4c63      	ldr	r4, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1dc>)
 80043e2:	f040 80bc 	bne.w	800455e <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e6:	0713      	lsls	r3, r2, #28
 80043e8:	d506      	bpl.n	80043f8 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ea:	68a3      	ldr	r3, [r4, #8]
 80043ec:	692a      	ldr	r2, [r5, #16]
 80043ee:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80043f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043f6:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f8:	f7ff fd2c 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 80043fc:	68a3      	ldr	r3, [r4, #8]
 80043fe:	4a5d      	ldr	r2, [pc, #372]	; (8004574 <HAL_RCC_ClockConfig+0x1e0>)
 8004400:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	40d8      	lsrs	r0, r3
 800440c:	4b5a      	ldr	r3, [pc, #360]	; (8004578 <HAL_RCC_ClockConfig+0x1e4>)
 800440e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004410:	2000      	movs	r0, #0
}
 8004412:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004416:	f7fc bdd3 	b.w	8000fc0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	f023 030f 	bic.w	r3, r3, #15
 8004420:	430b      	orrs	r3, r1
 8004422:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004424:	6813      	ldr	r3, [r2, #0]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	4299      	cmp	r1, r3
 800442c:	d1b7      	bne.n	800439e <HAL_RCC_ClockConfig+0xa>
 800442e:	e7bf      	b.n	80043b0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004430:	686b      	ldr	r3, [r5, #4]
 8004432:	4c4f      	ldr	r4, [pc, #316]	; (8004570 <HAL_RCC_ClockConfig+0x1dc>)
 8004434:	2b03      	cmp	r3, #3
 8004436:	d168      	bne.n	800450a <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	019b      	lsls	r3, r3, #6
 800443c:	d5af      	bpl.n	800439e <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800443e:	68e3      	ldr	r3, [r4, #12]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d11e      	bne.n	8004486 <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004448:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800444a:	4a4c      	ldr	r2, [pc, #304]	; (800457c <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800444c:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800444e:	bf55      	itete	pl
 8004450:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004454:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004456:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800445a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 800445e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004462:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004464:	68e3      	ldr	r3, [r4, #12]
 8004466:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800446a:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800446c:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 8004470:	2b02      	cmp	r3, #2
 8004472:	d00a      	beq.n	800448a <HAL_RCC_ClockConfig+0xf6>
 8004474:	2b03      	cmp	r3, #3
 8004476:	d008      	beq.n	800448a <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004478:	fbb2 f3f0 	udiv	r3, r2, r0
 800447c:	68e7      	ldr	r7, [r4, #12]
 800447e:	f3c7 2706 	ubfx	r7, r7, #8, #7
 8004482:	437b      	muls	r3, r7
 8004484:	e008      	b.n	8004498 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 8004486:	2200      	movs	r2, #0
 8004488:	e7eb      	b.n	8004462 <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800448a:	68e2      	ldr	r2, [r4, #12]
 800448c:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <HAL_RCC_ClockConfig+0x1ec>)
 800448e:	fbb3 f3f0 	udiv	r3, r3, r0
 8004492:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004496:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004498:	68e2      	ldr	r2, [r4, #12]
 800449a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800449e:	3201      	adds	r2, #1
 80044a0:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 80044a2:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044a6:	4a37      	ldr	r2, [pc, #220]	; (8004584 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d81c      	bhi.n	80044e6 <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044ac:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	68a3      	ldr	r3, [r4, #8]
 80044b0:	686a      	ldr	r2, [r5, #4]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80044ba:	f7fc fdb1 	bl	8001020 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044be:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80044c2:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	686a      	ldr	r2, [r5, #4]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044d0:	f43f af72 	beq.w	80043b8 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fc fda4 	bl	8001020 <HAL_GetTick>
 80044d8:	eba0 0008 	sub.w	r0, r0, r8
 80044dc:	4548      	cmp	r0, r9
 80044de:	d9f1      	bls.n	80044c4 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80044e0:	2003      	movs	r0, #3
}
 80044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ee:	68a3      	ldr	r3, [r4, #8]
 80044f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044fa:	2780      	movs	r7, #128	; 0x80
 80044fc:	e7d7      	b.n	80044ae <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80044fe:	0788      	lsls	r0, r1, #30
 8004500:	d5d4      	bpl.n	80044ac <HAL_RCC_ClockConfig+0x118>
 8004502:	68ab      	ldr	r3, [r5, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1d1      	bne.n	80044ac <HAL_RCC_ClockConfig+0x118>
 8004508:	e7f1      	b.n	80044ee <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	2b02      	cmp	r3, #2
 800450c:	d10a      	bne.n	8004524 <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004514:	f43f af43 	beq.w	800439e <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004518:	f7ff fc9c 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_RCC_ClockConfig+0x1f0>)
 800451e:	4298      	cmp	r0, r3
 8004520:	d9c4      	bls.n	80044ac <HAL_RCC_ClockConfig+0x118>
 8004522:	e7e4      	b.n	80044ee <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004524:	b91b      	cbnz	r3, 800452e <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	f013 0f02 	tst.w	r3, #2
 800452c:	e7f2      	b.n	8004514 <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004534:	e7ee      	b.n	8004514 <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 8004536:	2f80      	cmp	r7, #128	; 0x80
 8004538:	f47f af49 	bne.w	80043ce <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800453c:	490c      	ldr	r1, [pc, #48]	; (8004570 <HAL_RCC_ClockConfig+0x1dc>)
 800453e:	688b      	ldr	r3, [r1, #8]
 8004540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004544:	e742      	b.n	80043cc <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	680b      	ldr	r3, [r1, #0]
 8004548:	f023 030f 	bic.w	r3, r3, #15
 800454c:	4333      	orrs	r3, r6
 800454e:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004550:	680b      	ldr	r3, [r1, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	429e      	cmp	r6, r3
 8004558:	f47f af21 	bne.w	800439e <HAL_RCC_ClockConfig+0xa>
 800455c:	e73e      	b.n	80043dc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800455e:	68a3      	ldr	r3, [r4, #8]
 8004560:	68e9      	ldr	r1, [r5, #12]
 8004562:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004566:	430b      	orrs	r3, r1
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	e73c      	b.n	80043e6 <HAL_RCC_ClockConfig+0x52>
 800456c:	40022000 	.word	0x40022000
 8004570:	40021000 	.word	0x40021000
 8004574:	08032493 	.word	0x08032493
 8004578:	20000ed4 	.word	0x20000ed4
 800457c:	080324ac 	.word	0x080324ac
 8004580:	00f42400 	.word	0x00f42400
 8004584:	04c4b400 	.word	0x04c4b400

08004588 <HAL_RCC_GetHCLKFreq>:
}
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <HAL_RCC_GetHCLKFreq+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000ed4 	.word	0x20000ed4

08004594 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8004596:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a2:	6810      	ldr	r0, [r2, #0]
 80045a4:	f003 031f 	and.w	r3, r3, #31
}
 80045a8:	40d8      	lsrs	r0, r3
 80045aa:	4770      	bx	lr
 80045ac:	40021000 	.word	0x40021000
 80045b0:	080324a3 	.word	0x080324a3
 80045b4:	20000ed4 	.word	0x20000ed4

080045b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80045ba:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c6:	6810      	ldr	r0, [r2, #0]
 80045c8:	f003 031f 	and.w	r3, r3, #31
}
 80045cc:	40d8      	lsrs	r0, r3
 80045ce:	4770      	bx	lr
 80045d0:	40021000 	.word	0x40021000
 80045d4:	080324a3 	.word	0x080324a3
 80045d8:	20000ed4 	.word	0x20000ed4

080045dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <RCCEx_PLLSAI1_Config+0x100>)
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	f012 0f03 	tst.w	r2, #3
{
 80045e6:	4605      	mov	r5, r0
 80045e8:	460e      	mov	r6, r1
 80045ea:	461c      	mov	r4, r3
 80045ec:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ee:	d022      	beq.n	8004636 <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	4283      	cmp	r3, r0
 80045f8:	d130      	bne.n	800465c <RCCEx_PLLSAI1_Config+0x80>
       ||
 80045fa:	b37b      	cbz	r3, 800465c <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004602:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fc fd0c 	bl	8001020 <HAL_GetTick>
 8004608:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	011a      	lsls	r2, r3, #4
 800460e:	d42e      	bmi.n	800466e <RCCEx_PLLSAI1_Config+0x92>
 8004610:	68af      	ldr	r7, [r5, #8]
 8004612:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004614:	b396      	cbz	r6, 800467c <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004616:	2e01      	cmp	r6, #1
 8004618:	d14c      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800461a:	6922      	ldr	r2, [r4, #16]
 800461c:	4930      	ldr	r1, [pc, #192]	; (80046e0 <RCCEx_PLLSAI1_Config+0x104>)
 800461e:	4011      	ands	r1, r2
 8004620:	692a      	ldr	r2, [r5, #16]
 8004622:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004626:	3b01      	subs	r3, #1
 8004628:	0852      	lsrs	r2, r2, #1
 800462a:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800462e:	3a01      	subs	r2, #1
 8004630:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004634:	e02d      	b.n	8004692 <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 8004636:	2802      	cmp	r0, #2
 8004638:	d00c      	beq.n	8004654 <RCCEx_PLLSAI1_Config+0x78>
 800463a:	2803      	cmp	r0, #3
 800463c:	d010      	beq.n	8004660 <RCCEx_PLLSAI1_Config+0x84>
 800463e:	2801      	cmp	r0, #1
 8004640:	d10c      	bne.n	800465c <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	079f      	lsls	r7, r3, #30
 8004646:	d534      	bpl.n	80046b2 <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004648:	68e3      	ldr	r3, [r4, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	4318      	orrs	r0, r3
 8004650:	60e0      	str	r0, [r4, #12]
 8004652:	e7d3      	b.n	80045fc <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800465a:	d1f5      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0x6c>
 800465c:	2001      	movs	r0, #1
 800465e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	0391      	lsls	r1, r2, #14
 8004664:	d4f0      	bmi.n	8004648 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800466c:	e7f5      	b.n	800465a <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800466e:	f7fc fcd7 	bl	8001020 <HAL_GetTick>
 8004672:	1bc0      	subs	r0, r0, r7
 8004674:	2802      	cmp	r0, #2
 8004676:	d9c8      	bls.n	800460a <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 8004678:	2003      	movs	r0, #3
 800467a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800467c:	68e8      	ldr	r0, [r5, #12]
 800467e:	6926      	ldr	r6, [r4, #16]
 8004680:	4918      	ldr	r1, [pc, #96]	; (80046e4 <RCCEx_PLLSAI1_Config+0x108>)
 8004682:	06c2      	lsls	r2, r0, #27
 8004684:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004688:	4031      	ands	r1, r6
 800468a:	430a      	orrs	r2, r1
 800468c:	3b01      	subs	r3, #1
 800468e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004692:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800469a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fc fcc0 	bl	8001020 <HAL_GetTick>
 80046a0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	d513      	bpl.n	80046d0 <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	69aa      	ldr	r2, [r5, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	6123      	str	r3, [r4, #16]
 80046b0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046b4:	6921      	ldr	r1, [r4, #16]
 80046b6:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <RCCEx_PLLSAI1_Config+0x10c>)
 80046b8:	400a      	ands	r2, r1
 80046ba:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80046be:	3b01      	subs	r3, #1
 80046c0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80046c4:	696a      	ldr	r2, [r5, #20]
 80046c6:	0852      	lsrs	r2, r2, #1
 80046c8:	3a01      	subs	r2, #1
 80046ca:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80046ce:	e7e0      	b.n	8004692 <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d0:	f7fc fca6 	bl	8001020 <HAL_GetTick>
 80046d4:	1b80      	subs	r0, r0, r6
 80046d6:	2802      	cmp	r0, #2
 80046d8:	d9e3      	bls.n	80046a2 <RCCEx_PLLSAI1_Config+0xc6>
 80046da:	e7cd      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x9c>
 80046dc:	40021000 	.word	0x40021000
 80046e0:	ff9f800f 	.word	0xff9f800f
 80046e4:	07ff800f 	.word	0x07ff800f
 80046e8:	f9ff800f 	.word	0xf9ff800f

080046ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ee:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <RCCEx_PLLSAI2_Config+0x100>)
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	f012 0f03 	tst.w	r2, #3
{
 80046f6:	4605      	mov	r5, r0
 80046f8:	460e      	mov	r6, r1
 80046fa:	461c      	mov	r4, r3
 80046fc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046fe:	d022      	beq.n	8004746 <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	4283      	cmp	r3, r0
 8004708:	d130      	bne.n	800476c <RCCEx_PLLSAI2_Config+0x80>
       ||
 800470a:	b37b      	cbz	r3, 800476c <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004712:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004714:	f7fc fc84 	bl	8001020 <HAL_GetTick>
 8004718:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	009a      	lsls	r2, r3, #2
 800471e:	d42e      	bmi.n	800477e <RCCEx_PLLSAI2_Config+0x92>
 8004720:	68af      	ldr	r7, [r5, #8]
 8004722:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004724:	b396      	cbz	r6, 800478c <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004726:	2e01      	cmp	r6, #1
 8004728:	d14c      	bne.n	80047c4 <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800472a:	6962      	ldr	r2, [r4, #20]
 800472c:	4930      	ldr	r1, [pc, #192]	; (80047f0 <RCCEx_PLLSAI2_Config+0x104>)
 800472e:	4011      	ands	r1, r2
 8004730:	692a      	ldr	r2, [r5, #16]
 8004732:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004736:	3b01      	subs	r3, #1
 8004738:	0852      	lsrs	r2, r2, #1
 800473a:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800473e:	3a01      	subs	r2, #1
 8004740:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004744:	e02d      	b.n	80047a2 <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 8004746:	2802      	cmp	r0, #2
 8004748:	d00c      	beq.n	8004764 <RCCEx_PLLSAI2_Config+0x78>
 800474a:	2803      	cmp	r0, #3
 800474c:	d010      	beq.n	8004770 <RCCEx_PLLSAI2_Config+0x84>
 800474e:	2801      	cmp	r0, #1
 8004750:	d10c      	bne.n	800476c <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	079f      	lsls	r7, r3, #30
 8004756:	d534      	bpl.n	80047c2 <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004758:	68e3      	ldr	r3, [r4, #12]
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	4318      	orrs	r0, r3
 8004760:	60e0      	str	r0, [r4, #12]
 8004762:	e7d3      	b.n	800470c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476a:	d1f5      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x6c>
 800476c:	2001      	movs	r0, #1
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	0391      	lsls	r1, r2, #14
 8004774:	d4f0      	bmi.n	8004758 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800477c:	e7f5      	b.n	800476a <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800477e:	f7fc fc4f 	bl	8001020 <HAL_GetTick>
 8004782:	1bc0      	subs	r0, r0, r7
 8004784:	2802      	cmp	r0, #2
 8004786:	d9c8      	bls.n	800471a <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8004788:	2003      	movs	r0, #3
 800478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800478c:	68e8      	ldr	r0, [r5, #12]
 800478e:	6966      	ldr	r6, [r4, #20]
 8004790:	4918      	ldr	r1, [pc, #96]	; (80047f4 <RCCEx_PLLSAI2_Config+0x108>)
 8004792:	06c2      	lsls	r2, r0, #27
 8004794:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004798:	4031      	ands	r1, r6
 800479a:	430a      	orrs	r2, r1
 800479c:	3b01      	subs	r3, #1
 800479e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a2:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047aa:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fc fc38 	bl	8001020 <HAL_GetTick>
 80047b0:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	d513      	bpl.n	80047e0 <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047b8:	6963      	ldr	r3, [r4, #20]
 80047ba:	69aa      	ldr	r2, [r5, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	6163      	str	r3, [r4, #20]
 80047c0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80047c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047c4:	6961      	ldr	r1, [r4, #20]
 80047c6:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <RCCEx_PLLSAI2_Config+0x10c>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80047ce:	3b01      	subs	r3, #1
 80047d0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80047d4:	696a      	ldr	r2, [r5, #20]
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	3a01      	subs	r2, #1
 80047da:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80047de:	e7e0      	b.n	80047a2 <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e0:	f7fc fc1e 	bl	8001020 <HAL_GetTick>
 80047e4:	1b80      	subs	r0, r0, r6
 80047e6:	2802      	cmp	r0, #2
 80047e8:	d9e3      	bls.n	80047b2 <RCCEx_PLLSAI2_Config+0xc6>
 80047ea:	e7cd      	b.n	8004788 <RCCEx_PLLSAI2_Config+0x9c>
 80047ec:	40021000 	.word	0x40021000
 80047f0:	ff9f800f 	.word	0xff9f800f
 80047f4:	07ff800f 	.word	0x07ff800f
 80047f8:	f9ff800f 	.word	0xf9ff800f

080047fc <HAL_RCCEx_PeriphCLKConfig>:
{
 80047fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004800:	6805      	ldr	r5, [r0, #0]
 8004802:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8004806:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004808:	d023      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 800480a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800480c:	2940      	cmp	r1, #64	; 0x40
 800480e:	d014      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8004810:	d804      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004812:	b1c1      	cbz	r1, 8004846 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004814:	2920      	cmp	r1, #32
 8004816:	d02b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 8004818:	2501      	movs	r5, #1
 800481a:	e01a      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 800481c:	2960      	cmp	r1, #96	; 0x60
 800481e:	d001      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004820:	2980      	cmp	r1, #128	; 0x80
 8004822:	d1f9      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004824:	4a4e      	ldr	r2, [pc, #312]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004826:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004828:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800482c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004830:	430b      	orrs	r3, r1
 8004832:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004836:	2500      	movs	r5, #0
 8004838:	e00b      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800483a:	4a49      	ldr	r2, [pc, #292]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800483c:	68d3      	ldr	r3, [r2, #12]
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	60d3      	str	r3, [r2, #12]
      break;
 8004844:	e7ee      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004846:	3004      	adds	r0, #4
 8004848:	f7ff fec8 	bl	80045dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800484c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800484e:	2800      	cmp	r0, #0
 8004850:	d0e8      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	04db      	lsls	r3, r3, #19
 8004856:	d509      	bpl.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004858:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800485a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800485e:	d014      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004860:	d80b      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004862:	b1c1      	cbz	r1, 8004896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004864:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004868:	d071      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 800486a:	2501      	movs	r5, #1
 800486c:	462e      	mov	r6, r5
 800486e:	e021      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004870:	2100      	movs	r1, #0
 8004872:	3020      	adds	r0, #32
 8004874:	f7ff ff3a 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8004878:	e7e8      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 800487a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800487e:	d002      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004880:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004884:	d1f1      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004886:	462e      	mov	r6, r5
 8004888:	e009      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800488a:	4a35      	ldr	r2, [pc, #212]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800488c:	68d3      	ldr	r3, [r2, #12]
 800488e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004892:	60d3      	str	r3, [r2, #12]
 8004894:	e7f7      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004896:	1d20      	adds	r0, r4, #4
 8004898:	f7ff fea0 	bl	80045dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800489c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800489e:	2e00      	cmp	r6, #0
 80048a0:	d15b      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048a2:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80048a6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80048aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048ae:	430b      	orrs	r3, r1
 80048b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	039f      	lsls	r7, r3, #14
 80048b8:	d565      	bpl.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048ba:	4f29      	ldr	r7, [pc, #164]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048be:	00d8      	lsls	r0, r3, #3
 80048c0:	f140 81f3 	bpl.w	8004caa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 80048c4:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004964 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80048cc:	f8d9 3000 	ldr.w	r3, [r9]
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80048d8:	f7fc fba2 	bl	8001020 <HAL_GetTick>
 80048dc:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048de:	f8d9 3000 	ldr.w	r3, [r9]
 80048e2:	05d9      	lsls	r1, r3, #23
 80048e4:	d540      	bpl.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	f040 8197 	bne.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80048f4:	d015      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x126>
 80048f6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d011      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004902:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004906:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800490a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800490e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004916:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800491a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800491e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004922:	07da      	lsls	r2, r3, #31
 8004924:	d509      	bpl.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 8004926:	f7fc fb7b 	bl	8001020 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800492e:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004934:	079b      	lsls	r3, r3, #30
 8004936:	f140 8168 	bpl.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800493e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800494c:	e014      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800494e:	2100      	movs	r1, #0
 8004950:	f104 0020 	add.w	r0, r4, #32
 8004954:	f7ff feca 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8004958:	e7a0      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800495a:	4635      	mov	r5, r6
 800495c:	e7aa      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004968:	f7fc fb5a 	bl	8001020 <HAL_GetTick>
 800496c:	eba0 000a 	sub.w	r0, r0, sl
 8004970:	2802      	cmp	r0, #2
 8004972:	d9b4      	bls.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004974:	2503      	movs	r5, #3
 8004976:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004978:	f1b8 0f00 	cmp.w	r8, #0
 800497c:	d003      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004984:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	07df      	lsls	r7, r3, #31
 800498a:	d508      	bpl.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498c:	49c0      	ldr	r1, [pc, #768]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800498e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004990:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004994:	f022 0203 	bic.w	r2, r2, #3
 8004998:	4302      	orrs	r2, r0
 800499a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800499e:	0798      	lsls	r0, r3, #30
 80049a0:	d508      	bpl.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049a2:	49bb      	ldr	r1, [pc, #748]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049aa:	f022 020c 	bic.w	r2, r2, #12
 80049ae:	4302      	orrs	r2, r0
 80049b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b4:	0759      	lsls	r1, r3, #29
 80049b6:	d508      	bpl.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049b8:	49b5      	ldr	r1, [pc, #724]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80049bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049c0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80049c4:	4302      	orrs	r2, r0
 80049c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049ca:	071a      	lsls	r2, r3, #28
 80049cc:	d508      	bpl.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049ce:	49b0      	ldr	r1, [pc, #704]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80049d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80049da:	4302      	orrs	r2, r0
 80049dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049e0:	06df      	lsls	r7, r3, #27
 80049e2:	d508      	bpl.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e4:	49aa      	ldr	r1, [pc, #680]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80049e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049f0:	4302      	orrs	r2, r0
 80049f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f6:	0698      	lsls	r0, r3, #26
 80049f8:	d508      	bpl.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049fa:	49a5      	ldr	r1, [pc, #660]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80049fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a02:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a06:	4302      	orrs	r2, r0
 8004a08:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a0c:	0599      	lsls	r1, r3, #22
 8004a0e:	d508      	bpl.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a10:	499f      	ldr	r1, [pc, #636]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a12:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004a14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a18:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004a1c:	4302      	orrs	r2, r0
 8004a1e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a22:	055a      	lsls	r2, r3, #21
 8004a24:	d508      	bpl.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a26:	499a      	ldr	r1, [pc, #616]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a28:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004a2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a2e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004a32:	4302      	orrs	r2, r0
 8004a34:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a38:	065f      	lsls	r7, r3, #25
 8004a3a:	d508      	bpl.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a3c:	4994      	ldr	r1, [pc, #592]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a48:	4302      	orrs	r2, r0
 8004a4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a4e:	0618      	lsls	r0, r3, #24
 8004a50:	d508      	bpl.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a52:	498f      	ldr	r1, [pc, #572]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a5a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004a5e:	4302      	orrs	r2, r0
 8004a60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a64:	05d9      	lsls	r1, r3, #23
 8004a66:	d508      	bpl.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a68:	4989      	ldr	r1, [pc, #548]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a6a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004a6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a70:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004a74:	4302      	orrs	r2, r0
 8004a76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a7a:	02da      	lsls	r2, r3, #11
 8004a7c:	d508      	bpl.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a7e:	4984      	ldr	r1, [pc, #528]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a80:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004a82:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004a86:	f022 0203 	bic.w	r2, r2, #3
 8004a8a:	4302      	orrs	r2, r0
 8004a8c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a90:	049f      	lsls	r7, r3, #18
 8004a92:	d510      	bpl.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a94:	4a7e      	ldr	r2, [pc, #504]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a96:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004a98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a9c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004aa0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aa2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aa6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aaa:	f040 80b8 	bne.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aae:	68d3      	ldr	r3, [r2, #12]
 8004ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0318      	lsls	r0, r3, #12
 8004aba:	d50f      	bpl.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004abc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004abe:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ac0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004ac4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ac8:	f040 80b6 	bne.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ada:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	0359      	lsls	r1, r3, #13
 8004ae0:	d510      	bpl.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ae2:	4a6b      	ldr	r2, [pc, #428]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ae4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004ae6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004aee:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004af0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004af8:	f040 80bd 	bne.w	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004afc:	68d3      	ldr	r3, [r2, #12]
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	045a      	lsls	r2, r3, #17
 8004b08:	d514      	bpl.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b0a:	4961      	ldr	r1, [pc, #388]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b0c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004b10:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004b14:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004b18:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b1a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b22:	d107      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b24:	2102      	movs	r1, #2
 8004b26:	1d20      	adds	r0, r4, #4
 8004b28:	f7ff fd58 	bl	80045dc <RCCEx_PLLSAI1_Config>
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	bf18      	it	ne
 8004b32:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	03d3      	lsls	r3, r2, #15
 8004b38:	d509      	bpl.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b3a:	4955      	ldr	r1, [pc, #340]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b3c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004b40:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	4303      	orrs	r3, r0
 8004b4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b4e:	0297      	lsls	r7, r2, #10
 8004b50:	d509      	bpl.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b52:	494f      	ldr	r1, [pc, #316]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004b58:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004b5c:	f023 0318 	bic.w	r3, r3, #24
 8004b60:	4303      	orrs	r3, r0
 8004b62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b66:	0250      	lsls	r0, r2, #9
 8004b68:	d51f      	bpl.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b6a:	4f49      	ldr	r7, [pc, #292]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b72:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004b74:	f7fc fa54 	bl	8001020 <HAL_GetTick>
 8004b78:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	0099      	lsls	r1, r3, #2
 8004b7e:	f100 8089 	bmi.w	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	f040 808f 	bne.w	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b8c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004b90:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	f104 0020 	add.w	r0, r4, #32
 8004ba0:	f7ff fda4 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	bf18      	it	ne
 8004ba8:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	d514      	bpl.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004bb0:	4937      	ldr	r1, [pc, #220]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004bb2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004bb6:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bbe:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004bc0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004bc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004bc8:	d107      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004bca:	2101      	movs	r1, #1
 8004bcc:	f104 0020 	add.w	r0, r4, #32
 8004bd0:	f7ff fd8c 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	bf18      	it	ne
 8004bd8:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	01db      	lsls	r3, r3, #7
 8004bde:	d510      	bpl.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004be2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004be6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004bea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bee:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004bf0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bf4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004bf8:	d103      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfa:	68d3      	ldr	r3, [r2, #12]
 8004bfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c00:	60d3      	str	r3, [r2, #12]
}
 8004c02:	4628      	mov	r0, r5
 8004c04:	b002      	add	sp, #8
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fc fa09 	bl	8001020 <HAL_GetTick>
 8004c0e:	eba0 0009 	sub.w	r0, r0, r9
 8004c12:	4550      	cmp	r0, sl
 8004c14:	f67f ae8c 	bls.w	8004930 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004c18:	e6ac      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004c1a:	4635      	mov	r5, r6
 8004c1c:	e6ac      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c1e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004c22:	f47f af48 	bne.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c26:	2101      	movs	r1, #1
 8004c28:	1d20      	adds	r0, r4, #4
 8004c2a:	f7ff fcd7 	bl	80045dc <RCCEx_PLLSAI1_Config>
 8004c2e:	4606      	mov	r6, r0
 8004c30:	2800      	cmp	r0, #0
 8004c32:	bf18      	it	ne
 8004c34:	4605      	movne	r5, r0
 8004c36:	e73e      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004c40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c44:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c48:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c4a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c52:	d103      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c5a:	e73e      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c5c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004c60:	f47f af3c 	bne.w	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c64:	2101      	movs	r1, #1
 8004c66:	1d20      	adds	r0, r4, #4
 8004c68:	f7ff fcb8 	bl	80045dc <RCCEx_PLLSAI1_Config>
 8004c6c:	4606      	mov	r6, r0
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	bf18      	it	ne
 8004c72:	4605      	movne	r5, r0
 8004c74:	e732      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c76:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004c7a:	f47f af43 	bne.w	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c7e:	2101      	movs	r1, #1
 8004c80:	1d20      	adds	r0, r4, #4
 8004c82:	f7ff fcab 	bl	80045dc <RCCEx_PLLSAI1_Config>
 8004c86:	4606      	mov	r6, r0
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	bf18      	it	ne
 8004c8c:	4605      	movne	r5, r0
 8004c8e:	e739      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004c90:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c94:	f7fc f9c4 	bl	8001020 <HAL_GetTick>
 8004c98:	eba0 0008 	sub.w	r0, r0, r8
 8004c9c:	2802      	cmp	r0, #2
 8004c9e:	f67f af6c 	bls.w	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004ca2:	2503      	movs	r5, #3
 8004ca4:	e781      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004ca6:	4635      	mov	r5, r6
 8004ca8:	e77f      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004cbc:	f04f 0801 	mov.w	r8, #1
 8004cc0:	e602      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004cc2:	bf00      	nop

08004cc4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc8:	b087      	sub	sp, #28
 8004cca:	4606      	mov	r6, r0
 8004ccc:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004cce:	f7fc f9a7 	bl	8001020 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004cd2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004cd4:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004cd6:	6830      	ldr	r0, [r6, #0]
 8004cd8:	f002 fcf4 	bl	80076c4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	bb40      	cbnz	r0, 8004d32 <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004ce0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004ce2:	6830      	ldr	r0, [r6, #0]
 8004ce4:	0409      	lsls	r1, r1, #16
 8004ce6:	f002 fe07 	bl	80078f8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004cea:	4604      	mov	r4, r0
 8004cec:	bb08      	cbnz	r0, 8004d32 <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004cee:	2230      	movs	r2, #48	; 0x30
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	2108      	movs	r1, #8
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004cfc:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 8004cfe:	4669      	mov	r1, sp
 8004d00:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d02:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d04:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004d06:	f002 fccb 	bl	80076a0 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d0a:	6830      	ldr	r0, [r6, #0]
 8004d0c:	f002 fe23 	bl	8007956 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004d10:	4604      	mov	r4, r0
 8004d12:	b970      	cbnz	r0, 8004d32 <SD_FindSCR+0x6e>
 8004d14:	4605      	mov	r5, r0
 8004d16:	4607      	mov	r7, r0
 8004d18:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004d1a:	f240 592a 	movw	r9, #1322	; 0x52a
 8004d1e:	6830      	ldr	r0, [r6, #0]
 8004d20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d22:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004d26:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004d28:	d007      	beq.n	8004d3a <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004d2a:	0719      	lsls	r1, r3, #28
 8004d2c:	d51c      	bpl.n	8004d68 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004d2e:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004d30:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004d32:	4620      	mov	r0, r4
 8004d34:	b007      	add	sp, #28
 8004d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004d3a:	031b      	lsls	r3, r3, #12
 8004d3c:	d40b      	bmi.n	8004d56 <SD_FindSCR+0x92>
 8004d3e:	f1bb 0f00 	cmp.w	fp, #0
 8004d42:	d108      	bne.n	8004d56 <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004d44:	f002 fbe8 	bl	8007518 <SDMMC_ReadFIFO>
 8004d48:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004d4a:	6830      	ldr	r0, [r6, #0]
 8004d4c:	f002 fbe4 	bl	8007518 <SDMMC_ReadFIFO>
      index++;
 8004d50:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004d54:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d56:	f7fc f963 	bl	8001020 <HAL_GetTick>
 8004d5a:	eba0 000a 	sub.w	r0, r0, sl
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d1dd      	bne.n	8004d1e <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8004d62:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004d66:	e7e4      	b.n	8004d32 <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004d68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d6a:	079a      	lsls	r2, r3, #30
 8004d6c:	d501      	bpl.n	8004d72 <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004d6e:	2402      	movs	r4, #2
 8004d70:	e7de      	b.n	8004d30 <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004d72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d74:	069b      	lsls	r3, r3, #26
 8004d76:	d501      	bpl.n	8004d7c <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004d78:	2420      	movs	r4, #32
 8004d7a:	e7d9      	b.n	8004d30 <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <SD_FindSCR+0xcc>)
 8004d7e:	6383      	str	r3, [r0, #56]	; 0x38
 8004d80:	ba3f      	rev	r7, r7
 8004d82:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d84:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d88:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004d8c:	e7d1      	b.n	8004d32 <SD_FindSCR+0x6e>
 8004d8e:	bf00      	nop
 8004d90:	18000f3a 	.word	0x18000f3a

08004d94 <HAL_SD_DeInit>:
{
 8004d94:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004d96:	4604      	mov	r4, r0
 8004d98:	b168      	cbz	r0, 8004db6 <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f002 fbc7 	bl	8007534 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8004da6:	4620      	mov	r0, r4
 8004da8:	f01b fa60 	bl	802026c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dac:	2000      	movs	r0, #0
 8004dae:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8004db0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004db4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004db6:	2001      	movs	r0, #1
}
 8004db8:	bd10      	pop	{r4, pc}
	...

08004dbc <HAL_SD_ReadBlocks_DMA>:
{
 8004dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	461e      	mov	r6, r3
  if(NULL == pData)
 8004dc8:	460f      	mov	r7, r1
 8004dca:	b939      	cbnz	r1, 8004ddc <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dd2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004dd4:	2001      	movs	r0, #1
}
 8004dd6:	b006      	add	sp, #24
 8004dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004ddc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004de0:	b2c0      	uxtb	r0, r0
 8004de2:	2801      	cmp	r0, #1
 8004de4:	d158      	bne.n	8004e98 <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004de6:	18d3      	adds	r3, r2, r3
 8004de8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dea:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dec:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dee:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004df0:	d904      	bls.n	8004dfc <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004df2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004df8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004dfa:	e7ec      	b.n	8004dd6 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004e02:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004e06:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004e08:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e0c:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8004e0e:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004e10:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e14:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004e18:	bf18      	it	ne
 8004e1a:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e1c:	f002 fc52 	bl	80076c4 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e20:	b148      	cbz	r0, 8004e36 <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e2a:	4318      	orrs	r0, r3
 8004e2c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004e34:	e7cf      	b.n	8004dd6 <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e3a:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004e3e:	2390      	movs	r3, #144	; 0x90
 8004e40:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e42:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004e44:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004e46:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004e48:	4669      	mov	r1, sp
 8004e4a:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004e4c:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004e4e:	f002 fc27 	bl	80076a0 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004e56:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8004e5a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004e5c:	68c3      	ldr	r3, [r0, #12]
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e62:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004e64:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004e66:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004e68:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004e6a:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004e6c:	d90e      	bls.n	8004e8c <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e6e:	2382      	movs	r3, #130	; 0x82
 8004e70:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004e72:	4629      	mov	r1, r5
 8004e74:	f002 fc58 	bl	8007728 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0ac      	beq.n	8004dd6 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e84:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004e88:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e8a:	e7cd      	b.n	8004e28 <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e8c:	2381      	movs	r3, #129	; 0x81
 8004e8e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004e90:	4629      	mov	r1, r5
 8004e92:	f002 fc30 	bl	80076f6 <SDMMC_CmdReadSingleBlock>
 8004e96:	e7ef      	b.n	8004e78 <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 8004e98:	2002      	movs	r0, #2
 8004e9a:	e79c      	b.n	8004dd6 <HAL_SD_ReadBlocks_DMA+0x1a>
 8004e9c:	1fe00fff 	.word	0x1fe00fff

08004ea0 <HAL_SD_WriteBlocks_DMA>:
{
 8004ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	461e      	mov	r6, r3
  if(NULL == pData)
 8004eac:	460f      	mov	r7, r1
 8004eae:	b939      	cbnz	r1, 8004ec0 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004eb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004eb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eb6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004eb8:	2001      	movs	r0, #1
}
 8004eba:	b006      	add	sp, #24
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004ec0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004ec4:	b2c0      	uxtb	r0, r0
 8004ec6:	2801      	cmp	r0, #1
 8004ec8:	d159      	bne.n	8004f7e <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004eca:	18d3      	adds	r3, r2, r3
 8004ecc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ece:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ed0:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ed2:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ed4:	d904      	bls.n	8004ee0 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004edc:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004ede:	e7ec      	b.n	8004eba <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004ee6:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ee8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004eea:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004eec:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ef0:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004ef2:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ef4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004efc:	bf18      	it	ne
 8004efe:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f00:	f002 fbe0 	bl	80076c4 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f04:	b148      	cbz	r0, 8004f1a <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f0e:	4318      	orrs	r0, r3
 8004f10:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f12:	2001      	movs	r0, #1
 8004f14:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004f18:	e7cf      	b.n	8004eba <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f1e:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004f22:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f24:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004f26:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f28:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f2c:	4669      	mov	r1, sp
 8004f2e:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f30:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f34:	f002 fbb4 	bl	80076a0 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8004f38:	6820      	ldr	r0, [r4, #0]
 8004f3a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004f3c:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8004f40:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004f42:	68c3      	ldr	r3, [r0, #12]
 8004f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f48:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f4a:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004f4c:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f4e:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004f50:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004f52:	d90e      	bls.n	8004f72 <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f54:	23a0      	movs	r3, #160	; 0xa0
 8004f56:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f002 fc17 	bl	800778c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d0ab      	beq.n	8004eba <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f6a:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8004f6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f70:	e7cc      	b.n	8004f0c <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004f72:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004f76:	4629      	mov	r1, r5
 8004f78:	f002 fbef 	bl	800775a <SDMMC_CmdWriteSingleBlock>
 8004f7c:	e7ef      	b.n	8004f5e <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 8004f7e:	2002      	movs	r0, #2
 8004f80:	e79b      	b.n	8004eba <HAL_SD_WriteBlocks_DMA+0x1a>
 8004f82:	bf00      	nop
 8004f84:	1fe00fff 	.word	0x1fe00fff

08004f88 <HAL_SD_ErrorCallback>:
 8004f88:	4770      	bx	lr
	...

08004f8c <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8004f90:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004f92:	05d5      	lsls	r5, r2, #23
{  
 8004f94:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004f96:	d55f      	bpl.n	8005058 <HAL_SD_IRQHandler+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8004f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 8004f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa0:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8004fa4:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8004fa8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004fb0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004fba:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004fbc:	f012 0208 	ands.w	r2, r2, #8
 8004fc0:	d023      	beq.n	800500a <HAL_SD_IRQHandler+0x7e>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004fc2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004fc4:	0790      	lsls	r0, r2, #30
 8004fc6:	d402      	bmi.n	8004fce <HAL_SD_IRQHandler+0x42>
 8004fc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fca:	0691      	lsls	r1, r2, #26
 8004fcc:	d509      	bpl.n	8004fe2 <HAL_SD_IRQHandler+0x56>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f002 fbf6 	bl	80077c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004fd4:	b128      	cbz	r0, 8004fe2 <HAL_SD_IRQHandler+0x56>
          hsd->ErrorCode |= errorstate;
 8004fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fd8:	4318      	orrs	r0, r3
 8004fda:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff ffd3 	bl	8004f88 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	4a59      	ldr	r2, [pc, #356]	; (800514c <HAL_SD_IRQHandler+0x1c0>)
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ff0:	07da      	lsls	r2, r3, #31
 8004ff2:	d503      	bpl.n	8004ffc <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f017 fb4b 	bl	801c690 <HAL_SD_RxCpltCallback>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004ffc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ffe:	079b      	lsls	r3, r3, #30
 8005000:	d4f8      	bmi.n	8004ff4 <HAL_SD_IRQHandler+0x68>
        HAL_SD_TxCpltCallback(hsd);
 8005002:	4620      	mov	r0, r4
 8005004:	f017 fb3f 	bl	801c686 <HAL_SD_TxCpltCallback>
 8005008:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800500a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800500c:	060e      	lsls	r6, r1, #24
 800500e:	f140 8090 	bpl.w	8005132 <HAL_SD_IRQHandler+0x1a6>
      hsd->Instance->DLEN = 0;
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005014:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005016:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 8005018:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800501a:	07d5      	lsls	r5, r2, #31
 800501c:	d409      	bmi.n	8005032 <HAL_SD_IRQHandler+0xa6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800501e:	4618      	mov	r0, r3
 8005020:	f002 fbce 	bl	80077c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005024:	b128      	cbz	r0, 8005032 <HAL_SD_IRQHandler+0xa6>
          hsd->ErrorCode |= errorstate;
 8005026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005028:	4318      	orrs	r0, r3
 800502a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800502c:	4620      	mov	r0, r4
 800502e:	f7ff ffab 	bl	8004f88 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005032:	2301      	movs	r3, #1
 8005034:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005038:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800503a:	06d8      	lsls	r0, r3, #27
 800503c:	d402      	bmi.n	8005044 <HAL_SD_IRQHandler+0xb8>
 800503e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005040:	0699      	lsls	r1, r3, #26
 8005042:	d502      	bpl.n	800504a <HAL_SD_IRQHandler+0xbe>
        HAL_SD_TxCpltCallback(hsd);
 8005044:	4620      	mov	r0, r4
 8005046:	f017 fb1e 	bl	801c686 <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800504a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800504c:	07da      	lsls	r2, r3, #31
 800504e:	d4d1      	bmi.n	8004ff4 <HAL_SD_IRQHandler+0x68>
 8005050:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005052:	079b      	lsls	r3, r3, #30
 8005054:	d4ce      	bmi.n	8004ff4 <HAL_SD_IRQHandler+0x68>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8005058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800505a:	0456      	lsls	r6, r2, #17
 800505c:	d50d      	bpl.n	800507a <HAL_SD_IRQHandler+0xee>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800505e:	6a05      	ldr	r5, [r0, #32]
 8005060:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8005064:	4629      	mov	r1, r5
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	3504      	adds	r5, #4
 800506a:	f002 fa58 	bl	800751e <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 800506e:	42ae      	cmp	r6, r5
 8005070:	d1f8      	bne.n	8005064 <HAL_SD_IRQHandler+0xd8>
  }
  
  hsd->pTxBuffPtr += 8;
 8005072:	6a23      	ldr	r3, [r4, #32]
 8005074:	3320      	adds	r3, #32
 8005076:	6223      	str	r3, [r4, #32]
 8005078:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	0415      	lsls	r5, r2, #16
 800507e:	d50d      	bpl.n	800509c <HAL_SD_IRQHandler+0x110>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005080:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8005082:	1f2e      	subs	r6, r5, #4
 8005084:	351c      	adds	r5, #28
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	f002 fa46 	bl	8007518 <SDMMC_ReadFIFO>
 800508c:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0; count < 8; count++)
 8005090:	42b5      	cmp	r5, r6
 8005092:	d1f8      	bne.n	8005086 <HAL_SD_IRQHandler+0xfa>
  hsd->pRxBuffPtr += 8;
 8005094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005096:	3320      	adds	r3, #32
 8005098:	62a3      	str	r3, [r4, #40]	; 0x28
 800509a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800509c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509e:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80050a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 80050a4:	d036      	beq.n	8005114 <HAL_SD_IRQHandler+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80050a6:	0791      	lsls	r1, r2, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80050a8:	bf42      	ittt	mi
 80050aa:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 80050ac:	f042 0202 	orrmi.w	r2, r2, #2
 80050b0:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80050b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b4:	0712      	lsls	r2, r2, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80050b6:	bf42      	ittt	mi
 80050b8:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 80050ba:	f042 0208 	orrmi.w	r2, r2, #8
 80050be:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80050c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c2:	0696      	lsls	r6, r2, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80050c4:	bf42      	ittt	mi
 80050c6:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 80050c8:	f042 0220 	orrmi.w	r2, r2, #32
 80050cc:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80050ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d0:	06d5      	lsls	r5, r2, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80050d2:	bf42      	ittt	mi
 80050d4:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 80050d6:	f042 0210 	orrmi.w	r2, r2, #16
 80050da:	6382      	strmi	r2, [r0, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80050dc:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_SD_IRQHandler+0x1c0>)
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80050e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80050e6:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80050e8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80050ea:	f012 0208 	ands.w	r2, r2, #8
 80050ee:	d006      	beq.n	80050fe <HAL_SD_IRQHandler+0x172>
        hsd->State = HAL_SD_STATE_READY;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80050f6:	4620      	mov	r0, r4
 80050f8:	f7ff ff46 	bl	8004f88 <HAL_SD_ErrorCallback>
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80050fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005100:	0608      	lsls	r0, r1, #24
 8005102:	d516      	bpl.n	8005132 <HAL_SD_IRQHandler+0x1a6>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005104:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005106:	b1a1      	cbz	r1, 8005132 <HAL_SD_IRQHandler+0x1a6>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005108:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800510a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800510e:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005110:	651a      	str	r2, [r3, #80]	; 0x50
 8005112:	e7ed      	b.n	80050f0 <HAL_SD_IRQHandler+0x164>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 8005114:	00d1      	lsls	r1, r2, #3
 8005116:	d50c      	bpl.n	8005132 <HAL_SD_IRQHandler+0x1a6>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 8005118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511a:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800511e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 8005120:	d10b      	bne.n	800513a <HAL_SD_IRQHandler+0x1ae>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005122:	069a      	lsls	r2, r3, #26
 8005124:	d506      	bpl.n	8005134 <HAL_SD_IRQHandler+0x1a8>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8005126:	f000 fb72 	bl	800580e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
 8005132:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8005134:	f000 fb69 	bl	800580a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 8005138:	e7f7      	b.n	800512a <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800513a:	069b      	lsls	r3, r3, #26
 800513c:	d502      	bpl.n	8005144 <HAL_SD_IRQHandler+0x1b8>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800513e:	f000 fb65 	bl	800580c <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 8005142:	e7f2      	b.n	800512a <HAL_SD_IRQHandler+0x19e>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8005144:	f000 fb60 	bl	8005808 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8005148:	e7ef      	b.n	800512a <HAL_SD_IRQHandler+0x19e>
 800514a:	bf00      	nop
 800514c:	18000f3a 	.word	0x18000f3a

08005150 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8005150:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8005152:	0f9a      	lsrs	r2, r3, #30
 8005154:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8005156:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800515a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800515c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8005160:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8005162:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005166:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8005168:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800516c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 800516e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005170:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8005172:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005174:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8005176:	0112      	lsls	r2, r2, #4
 8005178:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800517a:	88ca      	ldrh	r2, [r1, #6]
{
 800517c:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800517e:	b292      	uxth	r2, r2
 8005180:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8005184:	4322      	orrs	r2, r4
 8005186:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005188:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800518c:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800518e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8005192:	09d4      	lsrs	r4, r2, #7
 8005194:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8005196:	f3c2 1480 	ubfx	r4, r2, #6, #1
 800519a:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800519c:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80051a0:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80051a2:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80051a6:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80051a8:	2400      	movs	r4, #0
 80051aa:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80051ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	f040 8083 	bne.w	80052ba <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80051b4:	0292      	lsls	r2, r2, #10
 80051b6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80051ba:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 80051bc:	690a      	ldr	r2, [r1, #16]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80051c4:	4313      	orrs	r3, r2
 80051c6:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80051c8:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80051d0:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80051d2:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80051d6:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80051d8:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80051dc:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80051de:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80051e2:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80051e4:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80051e8:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80051ea:	0bd3      	lsrs	r3, r2, #15
 80051ec:	f003 0306 	and.w	r3, r3, #6
 80051f0:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80051f2:	7e0c      	ldrb	r4, [r1, #24]
 80051f4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80051f8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80051fc:	4322      	orrs	r2, r4
 80051fe:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005200:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8005202:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005204:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8005206:	3402      	adds	r4, #2
 8005208:	40a2      	lsls	r2, r4
 800520a:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800520c:	7a0d      	ldrb	r5, [r1, #8]
 800520e:	2401      	movs	r4, #1
 8005210:	40ac      	lsls	r4, r5
 8005212:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8005214:	0a64      	lsrs	r4, r4, #9
 8005216:	4362      	muls	r2, r4
 8005218:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 800521a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800521e:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8005220:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800522a:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800522c:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800522e:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005230:	7e8a      	ldrb	r2, [r1, #26]
 8005232:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8005236:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800523c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800523e:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8005240:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005242:	0fda      	lsrs	r2, r3, #31
 8005244:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8005246:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800524a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800524c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005250:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005252:	0d9a      	lsrs	r2, r3, #22
 8005254:	f002 020c 	and.w	r2, r2, #12
 8005258:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800525a:	7fca      	ldrb	r2, [r1, #31]
 800525c:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8005260:	4302      	orrs	r2, r0
 8005262:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005264:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005268:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 800526c:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800526e:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8005272:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005276:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800527a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800527e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8005282:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005286:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800528a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800528e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8005292:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8005296:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800529a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800529e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80052a2:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80052a6:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 80052aa:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80052ae:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80052b8:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052ba:	2c01      	cmp	r4, #1
 80052bc:	d11a      	bne.n	80052f4 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80052c4:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80052c6:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 80052c8:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80052ca:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 80052cc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80052d0:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80052d2:	690c      	ldr	r4, [r1, #16]
 80052d4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80052d8:	4322      	orrs	r2, r4
 80052da:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80052dc:	690a      	ldr	r2, [r1, #16]
 80052de:	0292      	lsls	r2, r2, #10
 80052e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052e4:	64c2      	str	r2, [r0, #76]	; 0x4c
 80052e6:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80052e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80052f0:	6502      	str	r2, [r0, #80]	; 0x50
 80052f2:	e794      	b.n	800521e <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80052f4:	6803      	ldr	r3, [r0, #0]
 80052f6:	4a05      	ldr	r2, [pc, #20]	; (800530c <HAL_SD_GetCardCSD+0x1bc>)
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005300:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005302:	2301      	movs	r3, #1
 8005304:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8005308:	4618      	mov	r0, r3
 800530a:	bd30      	pop	{r4, r5, pc}
 800530c:	1fe00fff 	.word	0x1fe00fff

08005310 <HAL_SD_InitCard>:
{
 8005310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005312:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005314:	2300      	movs	r3, #0
 8005316:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005318:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800531a:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800531c:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800531e:	233c      	movs	r3, #60	; 0x3c
 8005320:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005322:	6983      	ldr	r3, [r0, #24]
 8005324:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005326:	bf01      	itttt	eq
 8005328:	6802      	ldreq	r2, [r0, #0]
 800532a:	6813      	ldreq	r3, [r2, #0]
 800532c:	f043 0304 	orreq.w	r3, r3, #4
 8005330:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 8005332:	ab0a      	add	r3, sp, #40	; 0x28
{
 8005334:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 8005336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800533a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800533e:	ab07      	add	r3, sp, #28
 8005340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	f002 f8ce 	bl	80074e4 <SDMMC_Init>
  if(status != HAL_OK)
 8005348:	2800      	cmp	r0, #0
 800534a:	f040 80e9 	bne.w	8005520 <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	f002 f8ea 	bl	8007528 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005354:	4605      	mov	r5, r0
 8005356:	2800      	cmp	r0, #0
 8005358:	f040 80e2 	bne.w	8005520 <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 800535c:	2002      	movs	r0, #2
 800535e:	f7fb fe65 	bl	800102c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005362:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8005364:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005366:	f002 fa5f 	bl	8007828 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800536a:	b958      	cbnz	r0, 8005384 <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	f002 fa85 	bl	800787c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005372:	b170      	cbz	r0, 8005392 <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005374:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005376:	2100      	movs	r1, #0
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	f002 fabd 	bl	80078f8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800537e:	b158      	cbz	r0, 8005398 <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005380:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8005384:	2501      	movs	r5, #1
 8005386:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800538a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800538c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 800538e:	63a0      	str	r0, [r4, #56]	; 0x38
 8005390:	e098      	b.n	80054c4 <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005392:	2301      	movs	r3, #1
 8005394:	6423      	str	r3, [r4, #64]	; 0x40
 8005396:	e7ee      	b.n	8005376 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005398:	4f62      	ldr	r7, [pc, #392]	; (8005524 <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 800539a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800539e:	9b06      	ldr	r3, [sp, #24]
 80053a0:	42b3      	cmp	r3, r6
 80053a2:	d815      	bhi.n	80053d0 <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80053a4:	2100      	movs	r1, #0
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	f002 faa6 	bl	80078f8 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d1e9      	bne.n	8005384 <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80053b0:	4639      	mov	r1, r7
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	f002 fab9 	bl	800792a <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80053b8:	4601      	mov	r1, r0
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d1e0      	bne.n	8005380 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	f002 f8d4 	bl	800756c <SDMMC_GetResponse>
      count++;
 80053c4:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80053c6:	2800      	cmp	r0, #0
      count++;
 80053c8:	f103 0301 	add.w	r3, r3, #1
 80053cc:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80053ce:	dae6      	bge.n	800539e <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80053d0:	9a06      	ldr	r2, [sp, #24]
 80053d2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d902      	bls.n	80053e0 <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80053da:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80053de:	e7d1      	b.n	8005384 <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80053e0:	0043      	lsls	r3, r0, #1
 80053e2:	d532      	bpl.n	800544a <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80053e4:	2301      	movs	r3, #1
 80053e6:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053e8:	69a3      	ldr	r3, [r4, #24]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d12d      	bne.n	800544a <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80053ee:	01c7      	lsls	r7, r0, #7
 80053f0:	d52b      	bpl.n	800544a <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80053f2:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80053f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f8:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80053fa:	6803      	ldr	r3, [r0, #0]
 80053fc:	f043 0303 	orr.w	r3, r3, #3
 8005400:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005402:	f002 fb77 	bl	8007af4 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 8005406:	2800      	cmp	r0, #0
 8005408:	d1bc      	bne.n	8005384 <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800540e:	0156      	lsls	r6, r2, #5
 8005410:	d5fc      	bpl.n	800540c <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005412:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	02d8      	lsls	r0, r3, #11
 800541c:	d5b0      	bpl.n	8005380 <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800541e:	2001      	movs	r0, #1
 8005420:	f000 f965 	bl	80056ee <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	f042 0202 	orr.w	r2, r2, #2
 800542c:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 800542e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005430:	0191      	lsls	r1, r2, #6
 8005432:	d5fc      	bpl.n	800542e <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800543a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543c:	02d2      	lsls	r2, r2, #11
 800543e:	d4cc      	bmi.n	80053da <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 8005440:	2213      	movs	r2, #19
 8005442:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 800544a:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800544c:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 800544e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005452:	f002 f875 	bl	8007540 <SDMMC_GetPowerState>
 8005456:	b910      	cbnz	r0, 800545e <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005458:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800545c:	e03c      	b.n	80054d8 <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800545e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005460:	2b03      	cmp	r3, #3
 8005462:	d018      	beq.n	8005496 <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005464:	6820      	ldr	r0, [r4, #0]
 8005466:	f002 fa8f 	bl	8007988 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800546a:	2800      	cmp	r0, #0
 800546c:	d134      	bne.n	80054d8 <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800546e:	4601      	mov	r1, r0
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	f002 f87b 	bl	800756c <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005476:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005478:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	f002 f876 	bl	800756c <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005480:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005482:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	f002 f871 	bl	800756c <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800548a:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800548c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	f002 f86c 	bl	800756c <SDMMC_GetResponse>
 8005494:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005496:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005498:	2b03      	cmp	r3, #3
 800549a:	d116      	bne.n	80054ca <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800549c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d120      	bne.n	80054e4 <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80054a2:	2104      	movs	r1, #4
 80054a4:	6820      	ldr	r0, [r4, #0]
 80054a6:	f002 f861 	bl	800756c <SDMMC_GetResponse>
 80054aa:	0d00      	lsrs	r0, r0, #20
 80054ac:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 80054ae:	a90d      	add	r1, sp, #52	; 0x34
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff fe4d 	bl	8005150 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80054b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	0412      	lsls	r2, r2, #16
 80054bc:	2300      	movs	r3, #0
 80054be:	f002 f999 	bl	80077f4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80054c2:	b948      	cbnz	r0, 80054d8 <HAL_SD_InitCard+0x1c8>
}
 80054c4:	4628      	mov	r0, r5
 80054c6:	b019      	add	sp, #100	; 0x64
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80054ca:	f10d 0116 	add.w	r1, sp, #22
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	f002 fa86 	bl	80079e0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d0e1      	beq.n	800549c <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 80054d8:	2501      	movs	r5, #1
 80054da:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054e0:	4308      	orrs	r0, r1
 80054e2:	e754      	b.n	800538e <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80054e4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80054e8:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	0409      	lsls	r1, r1, #16
 80054ee:	f002 fa61 	bl	80079b4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054f6:	4601      	mov	r1, r0
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	f002 f837 	bl	800756c <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80054fe:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005500:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	f002 f832 	bl	800756c <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005508:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800550a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	f002 f82d 	bl	800756c <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005512:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005514:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005516:	6820      	ldr	r0, [r4, #0]
 8005518:	f002 f828 	bl	800756c <SDMMC_GetResponse>
 800551c:	66e0      	str	r0, [r4, #108]	; 0x6c
 800551e:	e7c0      	b.n	80054a2 <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 8005520:	2501      	movs	r5, #1
 8005522:	e7cf      	b.n	80054c4 <HAL_SD_InitCard+0x1b4>
 8005524:	c1100000 	.word	0xc1100000

08005528 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005528:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800552a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800552c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800552e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005530:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005532:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005534:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005536:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005538:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800553a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800553c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800553e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005540:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005542:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005544:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005546:	61cb      	str	r3, [r1, #28]
}
 8005548:	2000      	movs	r0, #0
 800554a:	4770      	bx	lr

0800554c <HAL_SD_ConfigWideBusOperation>:
{
 800554c:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800554e:	2303      	movs	r3, #3
 8005550:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005554:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005556:	2b03      	cmp	r3, #3
{
 8005558:	b08a      	sub	sp, #40	; 0x28
 800555a:	4604      	mov	r4, r0
 800555c:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800555e:	d002      	beq.n	8005566 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005560:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005564:	d103      	bne.n	800556e <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	e056      	b.n	800561c <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800556e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005572:	d12d      	bne.n	80055d0 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8005574:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005576:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005578:	9104      	str	r1, [sp, #16]
 800557a:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800557c:	f001 fff6 	bl	800756c <SDMMC_GetResponse>
 8005580:	0180      	lsls	r0, r0, #6
 8005582:	d41f      	bmi.n	80055c4 <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 8005584:	a904      	add	r1, sp, #16
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff fb9c 	bl	8004cc4 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800558c:	b960      	cbnz	r0, 80055a8 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800558e:	9b05      	ldr	r3, [sp, #20]
 8005590:	0359      	lsls	r1, r3, #13
 8005592:	d51a      	bpl.n	80055ca <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005594:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	0409      	lsls	r1, r1, #16
 800559a:	f002 f9ad 	bl	80078f8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800559e:	b918      	cbnz	r0, 80055a8 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80055a0:	2102      	movs	r1, #2
 80055a2:	6820      	ldr	r0, [r4, #0]
 80055a4:	f002 faa4 	bl	8007af0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80055a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055aa:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80055ac:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80055ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	d035      	beq.n	8005620 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	4a26      	ldr	r2, [pc, #152]	; (8005650 <HAL_SD_ConfigWideBusOperation+0x104>)
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055ba:	2001      	movs	r0, #1
 80055bc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80055c0:	b00a      	add	sp, #40	; 0x28
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055c8:	e7ee      	b.n	80055a8 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055ca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80055ce:	e7eb      	b.n	80055a8 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80055d0:	bb09      	cbnz	r1, 8005616 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80055d2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80055d4:	9104      	str	r1, [sp, #16]
 80055d6:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80055d8:	f001 ffc8 	bl	800756c <SDMMC_GetResponse>
 80055dc:	0182      	lsls	r2, r0, #6
 80055de:	d414      	bmi.n	800560a <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80055e0:	a904      	add	r1, sp, #16
 80055e2:	4620      	mov	r0, r4
 80055e4:	f7ff fb6e 	bl	8004cc4 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80055e8:	b960      	cbnz	r0, 8005604 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055ea:	9b05      	ldr	r3, [sp, #20]
 80055ec:	03db      	lsls	r3, r3, #15
 80055ee:	d50f      	bpl.n	8005610 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	0409      	lsls	r1, r1, #16
 80055f6:	f002 f97f 	bl	80078f8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80055fa:	b918      	cbnz	r0, 8005604 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80055fc:	4601      	mov	r1, r0
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	f002 fa76 	bl	8007af0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005604:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005606:	4308      	orrs	r0, r1
 8005608:	e7d0      	b.n	80055ac <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800560a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800560e:	e7f9      	b.n	8005604 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005610:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005614:	e7f6      	b.n	8005604 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005616:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800561c:	63a3      	str	r3, [r4, #56]	; 0x38
 800561e:	e7c6      	b.n	80055ae <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005620:	6863      	ldr	r3, [r4, #4]
 8005622:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005624:	68a3      	ldr	r3, [r4, #8]
 8005626:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800562c:	6963      	ldr	r3, [r4, #20]
 800562e:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 8005630:	ab0a      	add	r3, sp, #40	; 0x28
 8005632:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005636:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 800563a:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 800563c:	ab04      	add	r3, sp, #16
 800563e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005640:	6820      	ldr	r0, [r4, #0]
 8005642:	f001 ff4f 	bl	80074e4 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005646:	2301      	movs	r3, #1
 8005648:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800564c:	4628      	mov	r0, r5
 800564e:	e7b7      	b.n	80055c0 <HAL_SD_ConfigWideBusOperation+0x74>
 8005650:	1fe00fff 	.word	0x1fe00fff

08005654 <HAL_SD_Init>:
{ 
 8005654:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 8005656:	4604      	mov	r4, r0
 8005658:	b910      	cbnz	r0, 8005660 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800565a:	2501      	movs	r5, #1
}
 800565c:	4628      	mov	r0, r5
 800565e:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005660:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005664:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005668:	b913      	cbnz	r3, 8005670 <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 800566a:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800566c:	f01a fdae 	bl	80201cc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005670:	2303      	movs	r3, #3
 8005672:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005676:	4620      	mov	r0, r4
 8005678:	f7ff fe4a 	bl	8005310 <HAL_SD_InitCard>
 800567c:	2800      	cmp	r0, #0
 800567e:	d1ec      	bne.n	800565a <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005680:	68e1      	ldr	r1, [r4, #12]
 8005682:	4620      	mov	r0, r4
 8005684:	f7ff ff62 	bl	800554c <HAL_SD_ConfigWideBusOperation>
 8005688:	4605      	mov	r5, r0
 800568a:	2800      	cmp	r0, #0
 800568c:	d1e5      	bne.n	800565a <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800568e:	69a3      	ldr	r3, [r4, #24]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d006      	beq.n	80056a2 <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005694:	2300      	movs	r3, #0
 8005696:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005698:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800569a:	2301      	movs	r3, #1
 800569c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80056a0:	e7dc      	b.n	800565c <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 80056a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a8:	d002      	beq.n	80056b0 <HAL_SD_Init+0x5c>
 80056aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d1f1      	bne.n	8005694 <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	6853      	ldr	r3, [r2, #4]
 80056b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056b8:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 f818 	bl	80056f0 <HAL_SDEx_HighSpeed>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d0e7      	beq.n	8005694 <HAL_SD_Init+0x40>
 80056c4:	e7c9      	b.n	800565a <HAL_SD_Init+0x6>

080056c6 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80056c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 80056c8:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80056ca:	0409      	lsls	r1, r1, #16
{
 80056cc:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80056ce:	6800      	ldr	r0, [r0, #0]
 80056d0:	f002 f9dc 	bl	8007a8c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80056d4:	4601      	mov	r1, r0
 80056d6:	b928      	cbnz	r0, 80056e4 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	f001 ff47 	bl	800756c <SDMMC_GetResponse>
  return cardstate;
 80056de:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80056e2:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80056e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056e6:	4319      	orrs	r1, r3
 80056e8:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80056ea:	2000      	movs	r0, #0
 80056ec:	e7f7      	b.n	80056de <HAL_SD_GetCardState+0x18>

080056ee <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80056ee:	4770      	bx	lr

080056f0 <HAL_SDEx_HighSpeed>:
{
 80056f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 80056f4:	2640      	movs	r6, #64	; 0x40
{
 80056f6:	b096      	sub	sp, #88	; 0x58
 80056f8:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 80056fa:	4632      	mov	r2, r6
 80056fc:	2100      	movs	r1, #0
 80056fe:	a806      	add	r0, sp, #24
 8005700:	f01b f8ff 	bl	8020902 <memset>
  uint32_t Timeout = HAL_GetTick();
 8005704:	f7fb fc8c 	bl	8001020 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8005708:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 800570a:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800570c:	2b00      	cmp	r3, #0
 800570e:	d074      	beq.n	80057fa <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005714:	d004      	beq.n	8005720 <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 8005716:	2400      	movs	r4, #0
}
 8005718:	4620      	mov	r0, r4
 800571a:	b016      	add	sp, #88	; 0x58
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 8005720:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005722:	2f01      	cmp	r7, #1
 8005724:	d1f7      	bne.n	8005716 <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 8005726:	6828      	ldr	r0, [r5, #0]
 8005728:	2300      	movs	r3, #0
 800572a:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 800572c:	4631      	mov	r1, r6
 800572e:	f001 ffc9 	bl	80076c4 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 8005732:	4604      	mov	r4, r0
 8005734:	2800      	cmp	r0, #0
 8005736:	d1ef      	bne.n	8005718 <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 800573c:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005740:	2360      	movs	r3, #96	; 0x60
 8005742:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005744:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005746:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005748:	4669      	mov	r1, sp
 800574a:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800574c:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800574e:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005750:	f001 ffa6 	bl	80076a0 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 8005754:	492a      	ldr	r1, [pc, #168]	; (8005800 <HAL_SDEx_HighSpeed+0x110>)
 8005756:	6828      	ldr	r0, [r5, #0]
 8005758:	f002 f9b1 	bl	8007abe <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 800575c:	4604      	mov	r4, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	d1da      	bne.n	8005718 <HAL_SDEx_HighSpeed+0x28>
 8005762:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005764:	f240 592a 	movw	r9, #1322	; 0x52a
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576c:	ea12 0f09 	tst.w	r2, r9
 8005770:	d005      	beq.n	800577e <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005774:	0710      	lsls	r0, r2, #28
 8005776:	d51e      	bpl.n	80057b6 <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005778:	2208      	movs	r2, #8
 800577a:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 800577c:	e7cc      	b.n	8005718 <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	041f      	lsls	r7, r3, #16
 8005782:	d50a      	bpl.n	800579a <HAL_SDEx_HighSpeed+0xaa>
 8005784:	1f37      	subs	r7, r6, #4
 8005786:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 800578a:	6828      	ldr	r0, [r5, #0]
 800578c:	f001 fec4 	bl	8007518 <SDMMC_ReadFIFO>
 8005790:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 8005794:	4557      	cmp	r7, sl
 8005796:	d1f8      	bne.n	800578a <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 8005798:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800579a:	f7fb fc41 	bl	8001020 <HAL_GetTick>
 800579e:	eba0 0008 	sub.w	r0, r0, r8
 80057a2:	3001      	adds	r0, #1
 80057a4:	d1e0      	bne.n	8005768 <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80057a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057aa:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 80057b2:	2403      	movs	r4, #3
 80057b4:	e7b0      	b.n	8005718 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80057b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b8:	0791      	lsls	r1, r2, #30
 80057ba:	d502      	bpl.n	80057c2 <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80057bc:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80057be:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 80057c0:	e7aa      	b.n	8005718 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80057c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c4:	0692      	lsls	r2, r2, #26
 80057c6:	d501      	bpl.n	80057cc <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80057c8:	2420      	movs	r4, #32
 80057ca:	e7f8      	b.n	80057be <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057cc:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <HAL_SDEx_HighSpeed+0x114>)
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 80057d0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80057d4:	079b      	lsls	r3, r3, #30
 80057d6:	d502      	bpl.n	80057de <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80057d8:	2001      	movs	r0, #1
 80057da:	f7ff ff88 	bl	80056ee <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057e2:	6828      	ldr	r0, [r5, #0]
 80057e4:	f001 ff6e 	bl	80076c4 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d094      	beq.n	8005716 <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 80057ec:	2401      	movs	r4, #1
 80057ee:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80057f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80057f4:	4318      	orrs	r0, r3
 80057f6:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 80057f8:	e78e      	b.n	8005718 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80057fa:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80057fe:	e78b      	b.n	8005718 <HAL_SDEx_HighSpeed+0x28>
 8005800:	80ffff01 	.word	0x80ffff01
 8005804:	18000f3a 	.word	0x18000f3a

08005808 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 8005808:	4770      	bx	lr

0800580a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 800580a:	4770      	bx	lr

0800580c <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 800580c:	4770      	bx	lr

0800580e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800580e:	4770      	bx	lr

08005810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005810:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005812:	4604      	mov	r4, r0
 8005814:	2800      	cmp	r0, #0
 8005816:	d04a      	beq.n	80058ae <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005818:	2300      	movs	r3, #0
 800581a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800581c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8005820:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005824:	b91b      	cbnz	r3, 800582e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005826:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800582a:	f01a fa93 	bl	801fd54 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800582e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005830:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005832:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005836:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005838:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800583a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800583e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005842:	600b      	str	r3, [r1, #0]
 8005844:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005848:	d92e      	bls.n	80058a8 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800584a:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800584c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005850:	bf18      	it	ne
 8005852:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005854:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005856:	b92b      	cbnz	r3, 8005864 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005858:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800585c:	bf8c      	ite	hi
 800585e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005860:	2301      	movls	r3, #1
 8005862:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005864:	68a6      	ldr	r6, [r4, #8]
 8005866:	6863      	ldr	r3, [r4, #4]
 8005868:	69a5      	ldr	r5, [r4, #24]
 800586a:	4333      	orrs	r3, r6
 800586c:	6926      	ldr	r6, [r4, #16]
 800586e:	4333      	orrs	r3, r6
 8005870:	6966      	ldr	r6, [r4, #20]
 8005872:	4333      	orrs	r3, r6
 8005874:	69e6      	ldr	r6, [r4, #28]
 8005876:	4333      	orrs	r3, r6
 8005878:	6a26      	ldr	r6, [r4, #32]
 800587a:	4333      	orrs	r3, r6
 800587c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800587e:	4333      	orrs	r3, r6
 8005880:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8005884:	4333      	orrs	r3, r6
 8005886:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800588a:	431a      	orrs	r2, r3
 800588c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800588e:	0c2d      	lsrs	r5, r5, #16
 8005890:	431a      	orrs	r2, r3
 8005892:	f005 0504 	and.w	r5, r5, #4
 8005896:	432a      	orrs	r2, r5
 8005898:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800589a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800589c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800589e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80058ac:	e7d0      	b.n	8005850 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80058ae:	2001      	movs	r0, #1
}
 80058b0:	bd70      	pop	{r4, r5, r6, pc}

080058b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b6:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80058bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 80058c0:	2b01      	cmp	r3, #1
{
 80058c2:	4604      	mov	r4, r0
 80058c4:	460e      	mov	r6, r1
 80058c6:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80058c8:	d07d      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x114>
 80058ca:	2301      	movs	r3, #1
 80058cc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058d0:	f7fb fba6 	bl	8001020 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058d8:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 80058da:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058de:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058e0:	bf1c      	itt	ne
 80058e2:	2305      	movne	r3, #5
 80058e4:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80058ec:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80058f0:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 80058f2:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058f4:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 80058f6:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058fc:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058fe:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 8005900:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005902:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 8005904:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005906:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005908:	b29b      	uxth	r3, r3
 800590a:	b95b      	cbnz	r3, 8005924 <HAL_SPI_TransmitReceive+0x72>
 800590c:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8005910:	b280      	uxth	r0, r0
 8005912:	b938      	cbnz	r0, 8005924 <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 8005914:	2301      	movs	r3, #1
 8005916:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800591a:	2300      	movs	r3, #0
 800591c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8005920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005924:	b195      	cbz	r5, 800594c <HAL_SPI_TransmitReceive+0x9a>
 8005926:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	b17b      	cbz	r3, 800594c <HAL_SPI_TransmitReceive+0x9a>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	0791      	lsls	r1, r2, #30
 8005932:	d50b      	bpl.n	800594c <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 8005934:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005936:	b292      	uxth	r2, r2
 8005938:	2a01      	cmp	r2, #1
 800593a:	d932      	bls.n	80059a2 <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800593c:	f836 2b02 	ldrh.w	r2, [r6], #2
 8005940:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8005942:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005944:	3b02      	subs	r3, #2
 8005946:	b29b      	uxth	r3, r3
 8005948:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800594a:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800594c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005950:	b29b      	uxth	r3, r3
 8005952:	b1db      	cbz	r3, 800598c <HAL_SPI_TransmitReceive+0xda>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	07d2      	lsls	r2, r2, #31
 800595a:	d517      	bpl.n	800598c <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 800595c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005960:	b292      	uxth	r2, r2
 8005962:	2a01      	cmp	r2, #1
 8005964:	d925      	bls.n	80059b2 <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 800596c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005970:	3a02      	subs	r2, #2
 8005972:	b292      	uxth	r2, r2
 8005974:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005978:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800597c:	b292      	uxth	r2, r2
 800597e:	2a01      	cmp	r2, #1
 8005980:	d803      	bhi.n	800598a <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005988:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800598a:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800598c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005990:	d0b9      	beq.n	8005906 <HAL_SPI_TransmitReceive+0x54>
 8005992:	f7fb fb45 	bl	8001020 <HAL_GetTick>
 8005996:	eba0 0009 	sub.w	r0, r0, r9
 800599a:	4580      	cmp	r8, r0
 800599c:	d8b3      	bhi.n	8005906 <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 800599e:	2003      	movs	r0, #3
 80059a0:	e7b8      	b.n	8005914 <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80059a2:	7832      	ldrb	r2, [r6, #0]
 80059a4:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80059a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7cb      	b.n	800594a <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059b2:	7b1b      	ldrb	r3, [r3, #12]
 80059b4:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 80059b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059c2:	3701      	adds	r7, #1
 80059c4:	e7e1      	b.n	800598a <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 80059c6:	2002      	movs	r0, #2
  return errorcode;
}
 80059c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080059cc <HAL_SPI_ErrorCallback>:
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80059d0:	6803      	ldr	r3, [r0, #0]
{
 80059d2:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80059d4:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80059d6:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80059d8:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80059dc:	2d01      	cmp	r5, #1
{
 80059de:	b085      	sub	sp, #20
 80059e0:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80059e2:	d105      	bne.n	80059f0 <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80059e4:	064d      	lsls	r5, r1, #25
 80059e6:	d503      	bpl.n	80059f0 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 80059e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 80059ea:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 80059ec:	b005      	add	sp, #20
 80059ee:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80059f0:	0795      	lsls	r5, r2, #30
 80059f2:	d504      	bpl.n	80059fe <HAL_SPI_IRQHandler+0x2e>
 80059f4:	0608      	lsls	r0, r1, #24
 80059f6:	d502      	bpl.n	80059fe <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80059f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80059fa:	4620      	mov	r0, r4
 80059fc:	e7f5      	b.n	80059ea <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80059fe:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8005a02:	d0f3      	beq.n	80059ec <HAL_SPI_IRQHandler+0x1c>
 8005a04:	068d      	lsls	r5, r1, #26
 8005a06:	d5f1      	bpl.n	80059ec <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8005a08:	0650      	lsls	r0, r2, #25
 8005a0a:	d50f      	bpl.n	8005a2c <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a0c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005a10:	2803      	cmp	r0, #3
 8005a12:	f04f 0500 	mov.w	r5, #0
 8005a16:	d041      	beq.n	8005a9c <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a18:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005a1a:	f040 0004 	orr.w	r0, r0, #4
 8005a1e:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a20:	9500      	str	r5, [sp, #0]
 8005a22:	68d8      	ldr	r0, [r3, #12]
 8005a24:	9000      	str	r0, [sp, #0]
 8005a26:	6898      	ldr	r0, [r3, #8]
 8005a28:	9000      	str	r0, [sp, #0]
 8005a2a:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005a2c:	0695      	lsls	r5, r2, #26
 8005a2e:	d50c      	bpl.n	8005a4a <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a30:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005a32:	f040 0001 	orr.w	r0, r0, #1
 8005a36:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a38:	2000      	movs	r0, #0
 8005a3a:	9002      	str	r0, [sp, #8]
 8005a3c:	6898      	ldr	r0, [r3, #8]
 8005a3e:	9002      	str	r0, [sp, #8]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005a46:	6018      	str	r0, [r3, #0]
 8005a48:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8005a4a:	05d0      	lsls	r0, r2, #23
 8005a4c:	d508      	bpl.n	8005a60 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a4e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005a50:	f042 0208 	orr.w	r2, r2, #8
 8005a54:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a56:	2200      	movs	r2, #0
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	9203      	str	r2, [sp, #12]
 8005a5e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a60:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005a62:	2a00      	cmp	r2, #0
 8005a64:	d0c2      	beq.n	80059ec <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a6c:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a74:	078a      	lsls	r2, r1, #30
 8005a76:	d018      	beq.n	8005aaa <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a78:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005a7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a7c:	f022 0203 	bic.w	r2, r2, #3
 8005a80:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005a82:	b118      	cbz	r0, 8005a8c <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_SPI_IRQHandler+0xe4>)
 8005a86:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005a88:	f7fc f8f2 	bl	8001c70 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8005a8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d0ac      	beq.n	80059ec <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <HAL_SPI_IRQHandler+0xe4>)
 8005a94:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005a96:	f7fc f8eb 	bl	8001c70 <HAL_DMA_Abort_IT>
 8005a9a:	e7a7      	b.n	80059ec <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a9c:	9501      	str	r5, [sp, #4]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	9201      	str	r2, [sp, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	9b01      	ldr	r3, [sp, #4]
        return;
 8005aa8:	e7a0      	b.n	80059ec <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f7ff ff8e 	bl	80059cc <HAL_SPI_ErrorCallback>
 8005ab0:	e79c      	b.n	80059ec <HAL_SPI_IRQHandler+0x1c>
 8005ab2:	bf00      	nop
 8005ab4:	08005ab9 	.word	0x08005ab9

08005ab8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aba:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005ac2:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8005ac4:	f7ff ff82 	bl	80059cc <HAL_SPI_ErrorCallback>
 8005ac8:	bd08      	pop	{r3, pc}
	...

08005acc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005acc:	6a03      	ldr	r3, [r0, #32]
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad4:	6a03      	ldr	r3, [r0, #32]
{
 8005ad6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ade:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ae2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005ae6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005aea:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005aee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af0:	4d1b      	ldr	r5, [pc, #108]	; (8005b60 <TIM_OC1_SetConfig+0x94>)
 8005af2:	42a8      	cmp	r0, r5
 8005af4:	d00f      	beq.n	8005b16 <TIM_OC1_SetConfig+0x4a>
 8005af6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005afa:	42a8      	cmp	r0, r5
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC1_SetConfig+0x4a>
 8005afe:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b02:	42a8      	cmp	r0, r5
 8005b04:	d007      	beq.n	8005b16 <TIM_OC1_SetConfig+0x4a>
 8005b06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b0a:	42a8      	cmp	r0, r5
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC1_SetConfig+0x4a>
 8005b0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b12:	42a8      	cmp	r0, r5
 8005b14:	d11e      	bne.n	8005b54 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b16:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b18:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005b1c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	4d10      	ldr	r5, [pc, #64]	; (8005b60 <TIM_OC1_SetConfig+0x94>)
 8005b20:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b22:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	d00f      	beq.n	8005b48 <TIM_OC1_SetConfig+0x7c>
 8005b28:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b2c:	42a8      	cmp	r0, r5
 8005b2e:	d00b      	beq.n	8005b48 <TIM_OC1_SetConfig+0x7c>
 8005b30:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b34:	42a8      	cmp	r0, r5
 8005b36:	d007      	beq.n	8005b48 <TIM_OC1_SetConfig+0x7c>
 8005b38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b3c:	42a8      	cmp	r0, r5
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC1_SetConfig+0x7c>
 8005b40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b44:	42a8      	cmp	r0, r5
 8005b46:	d105      	bne.n	8005b54 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b48:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b4c:	698e      	ldr	r6, [r1, #24]
 8005b4e:	694c      	ldr	r4, [r1, #20]
 8005b50:	4334      	orrs	r4, r6
 8005b52:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b54:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b56:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b58:	684a      	ldr	r2, [r1, #4]
 8005b5a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5c:	6203      	str	r3, [r0, #32]
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	40012c00 	.word	0x40012c00

08005b64 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b64:	6a03      	ldr	r3, [r0, #32]
 8005b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6c:	6a03      	ldr	r3, [r0, #32]
{
 8005b6e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b72:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b7a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005b7e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b80:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005b82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8a:	4d16      	ldr	r5, [pc, #88]	; (8005be4 <TIM_OC3_SetConfig+0x80>)
 8005b8c:	42a8      	cmp	r0, r5
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC3_SetConfig+0x34>
 8005b90:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b94:	42a8      	cmp	r0, r5
 8005b96:	d10d      	bne.n	8005bb4 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b98:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba2:	4d10      	ldr	r5, [pc, #64]	; (8005be4 <TIM_OC3_SetConfig+0x80>)
 8005ba4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	d00e      	beq.n	8005bca <TIM_OC3_SetConfig+0x66>
 8005bac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bb0:	42a8      	cmp	r0, r5
 8005bb2:	d00a      	beq.n	8005bca <TIM_OC3_SetConfig+0x66>
 8005bb4:	4d0c      	ldr	r5, [pc, #48]	; (8005be8 <TIM_OC3_SetConfig+0x84>)
 8005bb6:	42a8      	cmp	r0, r5
 8005bb8:	d007      	beq.n	8005bca <TIM_OC3_SetConfig+0x66>
 8005bba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bbe:	42a8      	cmp	r0, r5
 8005bc0:	d003      	beq.n	8005bca <TIM_OC3_SetConfig+0x66>
 8005bc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bc6:	42a8      	cmp	r0, r5
 8005bc8:	d106      	bne.n	8005bd8 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bca:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bce:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bd0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd2:	4334      	orrs	r4, r6
 8005bd4:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bda:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bdc:	684a      	ldr	r2, [r1, #4]
 8005bde:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be0:	6203      	str	r3, [r0, #32]
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40014000 	.word	0x40014000

08005bec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bec:	6a03      	ldr	r3, [r0, #32]
 8005bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bf2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf4:	6a03      	ldr	r3, [r0, #32]
{
 8005bf6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bfc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bfe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005c02:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c0a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c10:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c14:	4d0e      	ldr	r5, [pc, #56]	; (8005c50 <TIM_OC4_SetConfig+0x64>)
 8005c16:	42a8      	cmp	r0, r5
 8005c18:	d00f      	beq.n	8005c3a <TIM_OC4_SetConfig+0x4e>
 8005c1a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c1e:	42a8      	cmp	r0, r5
 8005c20:	d00b      	beq.n	8005c3a <TIM_OC4_SetConfig+0x4e>
 8005c22:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005c26:	42a8      	cmp	r0, r5
 8005c28:	d007      	beq.n	8005c3a <TIM_OC4_SetConfig+0x4e>
 8005c2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c2e:	42a8      	cmp	r0, r5
 8005c30:	d003      	beq.n	8005c3a <TIM_OC4_SetConfig+0x4e>
 8005c32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c36:	42a8      	cmp	r0, r5
 8005c38:	d104      	bne.n	8005c44 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c3a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c3c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c40:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c44:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c48:	684a      	ldr	r2, [r1, #4]
 8005c4a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	6203      	str	r3, [r0, #32]
 8005c4e:	bd30      	pop	{r4, r5, pc}
 8005c50:	40012c00 	.word	0x40012c00

08005c54 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c54:	6a03      	ldr	r3, [r0, #32]
 8005c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5c:	6a03      	ldr	r3, [r0, #32]
{
 8005c5e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c62:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005c6e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c70:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005c72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c76:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7a:	4d0f      	ldr	r5, [pc, #60]	; (8005cb8 <TIM_OC5_SetConfig+0x64>)
 8005c7c:	42a8      	cmp	r0, r5
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_OC5_SetConfig+0x4c>
 8005c80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c84:	42a8      	cmp	r0, r5
 8005c86:	d00b      	beq.n	8005ca0 <TIM_OC5_SetConfig+0x4c>
 8005c88:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005c8c:	42a8      	cmp	r0, r5
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC5_SetConfig+0x4c>
 8005c90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c94:	42a8      	cmp	r0, r5
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC5_SetConfig+0x4c>
 8005c98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c9c:	42a8      	cmp	r0, r5
 8005c9e:	d104      	bne.n	8005caa <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ca0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ca2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ca6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005caa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cac:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cae:	684a      	ldr	r2, [r1, #4]
 8005cb0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	6203      	str	r3, [r0, #32]
 8005cb4:	bd30      	pop	{r4, r5, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40012c00 	.word	0x40012c00

08005cbc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cbc:	6a03      	ldr	r3, [r0, #32]
 8005cbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cc2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc4:	6a03      	ldr	r3, [r0, #32]
{
 8005cc6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cca:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cce:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005cd2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cda:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ce0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce4:	4d0e      	ldr	r5, [pc, #56]	; (8005d20 <TIM_OC6_SetConfig+0x64>)
 8005ce6:	42a8      	cmp	r0, r5
 8005ce8:	d00f      	beq.n	8005d0a <TIM_OC6_SetConfig+0x4e>
 8005cea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005cee:	42a8      	cmp	r0, r5
 8005cf0:	d00b      	beq.n	8005d0a <TIM_OC6_SetConfig+0x4e>
 8005cf2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005cf6:	42a8      	cmp	r0, r5
 8005cf8:	d007      	beq.n	8005d0a <TIM_OC6_SetConfig+0x4e>
 8005cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cfe:	42a8      	cmp	r0, r5
 8005d00:	d003      	beq.n	8005d0a <TIM_OC6_SetConfig+0x4e>
 8005d02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d06:	42a8      	cmp	r0, r5
 8005d08:	d104      	bne.n	8005d14 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d0c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d10:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d16:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d18:	684a      	ldr	r2, [r1, #4]
 8005d1a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	6203      	str	r3, [r0, #32]
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	40012c00 	.word	0x40012c00

08005d24 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	2302      	movs	r3, #2
{
 8005d26:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005d2c:	6803      	ldr	r3, [r0, #0]
 8005d2e:	4c09      	ldr	r4, [pc, #36]	; (8005d54 <HAL_TIM_Base_Start+0x30>)
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	4021      	ands	r1, r4
 8005d34:	2906      	cmp	r1, #6
 8005d36:	d008      	beq.n	8005d4a <HAL_TIM_Base_Start+0x26>
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	4022      	ands	r2, r4
 8005d3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005d40:	bf1e      	ittt	ne
 8005d42:	681a      	ldrne	r2, [r3, #0]
 8005d44:	f042 0201 	orrne.w	r2, r2, #1
 8005d48:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005d50:	2000      	movs	r0, #0
 8005d52:	bd10      	pop	{r4, pc}
 8005d54:	00010007 	.word	0x00010007

08005d58 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d58:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005d5a:	480a      	ldr	r0, [pc, #40]	; (8005d84 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005d64:	6899      	ldr	r1, [r3, #8]
 8005d66:	4001      	ands	r1, r0
 8005d68:	2906      	cmp	r1, #6
 8005d6a:	d008      	beq.n	8005d7e <HAL_TIM_Base_Start_IT+0x26>
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	4002      	ands	r2, r0
 8005d70:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005d74:	bf1e      	ittt	ne
 8005d76:	681a      	ldrne	r2, [r3, #0]
 8005d78:	f042 0201 	orrne.w	r2, r2, #1
 8005d7c:	601a      	strne	r2, [r3, #0]
}
 8005d7e:	2000      	movs	r0, #0
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	00010007 	.word	0x00010007

08005d88 <HAL_TIM_PeriodElapsedCallback>:
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_OC_DelayElapsedCallback>:
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIM_IC_CaptureCallback>:
 8005d8c:	4770      	bx	lr

08005d8e <HAL_TIM_PWM_PulseFinishedCallback>:
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIM_TriggerCallback>:
 8005d90:	4770      	bx	lr

08005d92 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d92:	6803      	ldr	r3, [r0, #0]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	0791      	lsls	r1, r2, #30
{
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d9c:	d50f      	bpl.n	8005dbe <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	0792      	lsls	r2, r2, #30
 8005da2:	d50c      	bpl.n	8005dbe <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da4:	f06f 0202 	mvn.w	r2, #2
 8005da8:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005daa:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dac:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dae:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005db0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db2:	f000 8085 	beq.w	8005ec0 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	f7ff ffe9 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	0752      	lsls	r2, r2, #29
 8005dc4:	d510      	bpl.n	8005de8 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	0750      	lsls	r0, r2, #29
 8005dca:	d50d      	bpl.n	8005de8 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dcc:	f06f 0204 	mvn.w	r2, #4
 8005dd0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dda:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ddc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dde:	d075      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005de0:	f7ff ffd4 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de4:	2300      	movs	r3, #0
 8005de6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	0711      	lsls	r1, r2, #28
 8005dee:	d50f      	bpl.n	8005e10 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	0712      	lsls	r2, r2, #28
 8005df4:	d50c      	bpl.n	8005e10 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005df6:	f06f 0208 	mvn.w	r2, #8
 8005dfa:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dfc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dfe:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e00:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e02:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005e04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e06:	d067      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e08:	f7ff ffc0 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	06d0      	lsls	r0, r2, #27
 8005e16:	d510      	bpl.n	8005e3a <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	06d1      	lsls	r1, r2, #27
 8005e1c:	d50d      	bpl.n	8005e3a <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e1e:	f06f 0210 	mvn.w	r2, #16
 8005e22:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e24:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e26:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e28:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e30:	d058      	beq.n	8005ee4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	f7ff ffab 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	2300      	movs	r3, #0
 8005e38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	07d2      	lsls	r2, r2, #31
 8005e40:	d508      	bpl.n	8005e54 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	07d0      	lsls	r0, r2, #31
 8005e46:	d505      	bpl.n	8005e54 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e48:	f06f 0201 	mvn.w	r2, #1
 8005e4c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f7ff ff9a 	bl	8005d88 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	0611      	lsls	r1, r2, #24
 8005e5a:	d508      	bpl.n	8005e6e <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	0612      	lsls	r2, r2, #24
 8005e60:	d505      	bpl.n	8005e6e <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 fb98 	bl	800659e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	05d0      	lsls	r0, r2, #23
 8005e74:	d508      	bpl.n	8005e88 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	0611      	lsls	r1, r2, #24
 8005e7a:	d505      	bpl.n	8005e88 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e7c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 fb8c 	bl	80065a0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	0652      	lsls	r2, r2, #25
 8005e8e:	d508      	bpl.n	8005ea2 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	0650      	lsls	r0, r2, #25
 8005e94:	d505      	bpl.n	8005ea2 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff ff77 	bl	8005d90 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	0691      	lsls	r1, r2, #26
 8005ea8:	d522      	bpl.n	8005ef0 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	0692      	lsls	r2, r2, #26
 8005eae:	d51f      	bpl.n	8005ef0 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005eb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb6:	611a      	str	r2, [r3, #16]
}
 8005eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005ebc:	f000 bb6e 	b.w	800659c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec0:	f7ff ff63 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7ff ff62 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8005eca:	e776      	b.n	8005dba <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ecc:	f7ff ff5d 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f7ff ff5c 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8005ed6:	e785      	b.n	8005de4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed8:	f7ff ff57 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005edc:	4620      	mov	r0, r4
 8005ede:	f7ff ff56 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8005ee2:	e793      	b.n	8005e0c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee4:	f7ff ff51 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7ff ff50 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8005eee:	e7a2      	b.n	8005e36 <HAL_TIM_IRQHandler+0xa4>
 8005ef0:	bd10      	pop	{r4, pc}
	...

08005ef4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef4:	4a30      	ldr	r2, [pc, #192]	; (8005fb8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005ef6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef8:	4290      	cmp	r0, r2
 8005efa:	d012      	beq.n	8005f22 <TIM_Base_SetConfig+0x2e>
 8005efc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f00:	d00f      	beq.n	8005f22 <TIM_Base_SetConfig+0x2e>
 8005f02:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005f06:	4290      	cmp	r0, r2
 8005f08:	d00b      	beq.n	8005f22 <TIM_Base_SetConfig+0x2e>
 8005f0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f0e:	4290      	cmp	r0, r2
 8005f10:	d007      	beq.n	8005f22 <TIM_Base_SetConfig+0x2e>
 8005f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f16:	4290      	cmp	r0, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_Base_SetConfig+0x2e>
 8005f1a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005f1e:	4290      	cmp	r0, r2
 8005f20:	d119      	bne.n	8005f56 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005f22:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f28:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2a:	4a23      	ldr	r2, [pc, #140]	; (8005fb8 <TIM_Base_SetConfig+0xc4>)
 8005f2c:	4290      	cmp	r0, r2
 8005f2e:	d01d      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f34:	d01a      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f36:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005f3a:	4290      	cmp	r0, r2
 8005f3c:	d016      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f42:	4290      	cmp	r0, r2
 8005f44:	d012      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f4a:	4290      	cmp	r0, r2
 8005f4c:	d00e      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f4e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005f52:	4290      	cmp	r0, r2
 8005f54:	d00a      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f56:	4a19      	ldr	r2, [pc, #100]	; (8005fbc <TIM_Base_SetConfig+0xc8>)
 8005f58:	4290      	cmp	r0, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f60:	4290      	cmp	r0, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0x78>
 8005f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f68:	4290      	cmp	r0, r2
 8005f6a:	d103      	bne.n	8005f74 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f6c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f72:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f74:	694a      	ldr	r2, [r1, #20]
 8005f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005f7c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7e:	688b      	ldr	r3, [r1, #8]
 8005f80:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f82:	680b      	ldr	r3, [r1, #0]
 8005f84:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f86:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <TIM_Base_SetConfig+0xc4>)
 8005f88:	4298      	cmp	r0, r3
 8005f8a:	d00f      	beq.n	8005fac <TIM_Base_SetConfig+0xb8>
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f90:	4298      	cmp	r0, r3
 8005f92:	d00b      	beq.n	8005fac <TIM_Base_SetConfig+0xb8>
 8005f94:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005f98:	4298      	cmp	r0, r3
 8005f9a:	d007      	beq.n	8005fac <TIM_Base_SetConfig+0xb8>
 8005f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa0:	4298      	cmp	r0, r3
 8005fa2:	d003      	beq.n	8005fac <TIM_Base_SetConfig+0xb8>
 8005fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa8:	4298      	cmp	r0, r3
 8005faa:	d101      	bne.n	8005fb0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005fac:	690b      	ldr	r3, [r1, #16]
 8005fae:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	6143      	str	r3, [r0, #20]
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	40014000 	.word	0x40014000

08005fc0 <HAL_TIM_Base_Init>:
{
 8005fc0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	b1a0      	cbz	r0, 8005ff0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005fce:	b91b      	cbnz	r3, 8005fd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005fd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005fd4:	f019 ffe8 	bl	801ffa8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	1d21      	adds	r1, r4, #4
 8005fe2:	f7ff ff87 	bl	8005ef4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005fec:	2000      	movs	r0, #0
 8005fee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005ff0:	2001      	movs	r0, #1
}
 8005ff2:	bd10      	pop	{r4, pc}

08005ff4 <HAL_TIM_OC_Init>:
{
 8005ff4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	b1a0      	cbz	r0, 8006024 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ffe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006002:	b91b      	cbnz	r3, 800600c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006004:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8006008:	f01a f830 	bl	802006c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	2302      	movs	r3, #2
 800600e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006012:	6820      	ldr	r0, [r4, #0]
 8006014:	1d21      	adds	r1, r4, #4
 8006016:	f7ff ff6d 	bl	8005ef4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800601a:	2301      	movs	r3, #1
 800601c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006020:	2000      	movs	r0, #0
 8006022:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006024:	2001      	movs	r0, #1
}
 8006026:	bd10      	pop	{r4, pc}

08006028 <HAL_TIM_PWM_Init>:
{
 8006028:	b510      	push	{r4, lr}
  if (htim == NULL)
 800602a:	4604      	mov	r4, r0
 800602c:	b1a0      	cbz	r0, 8006058 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800602e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006032:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006036:	b91b      	cbnz	r3, 8006040 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006038:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800603c:	f01a f902 	bl	8020244 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	2302      	movs	r3, #2
 8006042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	1d21      	adds	r1, r4, #4
 800604a:	f7ff ff53 	bl	8005ef4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800604e:	2301      	movs	r3, #1
 8006050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006054:	2000      	movs	r0, #0
 8006056:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006058:	2001      	movs	r0, #1
}
 800605a:	bd10      	pop	{r4, pc}

0800605c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605c:	6a03      	ldr	r3, [r0, #32]
 800605e:	f023 0310 	bic.w	r3, r3, #16
 8006062:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006064:	6a03      	ldr	r3, [r0, #32]
{
 8006066:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8006068:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800606a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800606c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800606e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006072:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006076:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800607a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800607c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006080:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006084:	4d16      	ldr	r5, [pc, #88]	; (80060e0 <TIM_OC2_SetConfig+0x84>)
 8006086:	42a8      	cmp	r0, r5
 8006088:	d003      	beq.n	8006092 <TIM_OC2_SetConfig+0x36>
 800608a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800608e:	42a8      	cmp	r0, r5
 8006090:	d10d      	bne.n	80060ae <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006092:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006098:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	4d10      	ldr	r5, [pc, #64]	; (80060e0 <TIM_OC2_SetConfig+0x84>)
 800609e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a4:	d00e      	beq.n	80060c4 <TIM_OC2_SetConfig+0x68>
 80060a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80060aa:	42a8      	cmp	r0, r5
 80060ac:	d00a      	beq.n	80060c4 <TIM_OC2_SetConfig+0x68>
 80060ae:	4d0d      	ldr	r5, [pc, #52]	; (80060e4 <TIM_OC2_SetConfig+0x88>)
 80060b0:	42a8      	cmp	r0, r5
 80060b2:	d007      	beq.n	80060c4 <TIM_OC2_SetConfig+0x68>
 80060b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060b8:	42a8      	cmp	r0, r5
 80060ba:	d003      	beq.n	80060c4 <TIM_OC2_SetConfig+0x68>
 80060bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060c0:	42a8      	cmp	r0, r5
 80060c2:	d106      	bne.n	80060d2 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060c4:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060ca:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060cc:	4334      	orrs	r4, r6
 80060ce:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80060d2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80060d4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80060d6:	684a      	ldr	r2, [r1, #4]
 80060d8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80060da:	6203      	str	r3, [r0, #32]
 80060dc:	bd70      	pop	{r4, r5, r6, pc}
 80060de:	bf00      	nop
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40014000 	.word	0x40014000

080060e8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80060e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80060ec:	2b01      	cmp	r3, #1
{
 80060ee:	b510      	push	{r4, lr}
 80060f0:	4604      	mov	r4, r0
 80060f2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80060f6:	d010      	beq.n	800611a <HAL_TIM_OC_ConfigChannel+0x32>
 80060f8:	2301      	movs	r3, #1
  switch (Channel)
 80060fa:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80060fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8006104:	d01c      	beq.n	8006140 <HAL_TIM_OC_ConfigChannel+0x58>
 8006106:	d809      	bhi.n	800611c <HAL_TIM_OC_ConfigChannel+0x34>
 8006108:	b192      	cbz	r2, 8006130 <HAL_TIM_OC_ConfigChannel+0x48>
 800610a:	2a04      	cmp	r2, #4
 800610c:	d014      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 800610e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006110:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006112:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006116:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800611a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800611c:	2a10      	cmp	r2, #16
 800611e:	d013      	beq.n	8006148 <HAL_TIM_OC_ConfigChannel+0x60>
 8006120:	2a14      	cmp	r2, #20
 8006122:	d015      	beq.n	8006150 <HAL_TIM_OC_ConfigChannel+0x68>
 8006124:	2a0c      	cmp	r2, #12
 8006126:	d1f2      	bne.n	800610e <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006128:	6820      	ldr	r0, [r4, #0]
 800612a:	f7ff fd5f 	bl	8005bec <TIM_OC4_SetConfig>
      break;
 800612e:	e7ee      	b.n	800610e <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	f7ff fccb 	bl	8005acc <TIM_OC1_SetConfig>
      break;
 8006136:	e7ea      	b.n	800610e <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	f7ff ff8f 	bl	800605c <TIM_OC2_SetConfig>
      break;
 800613e:	e7e6      	b.n	800610e <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	f7ff fd0f 	bl	8005b64 <TIM_OC3_SetConfig>
      break;
 8006146:	e7e2      	b.n	800610e <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	f7ff fd83 	bl	8005c54 <TIM_OC5_SetConfig>
      break;
 800614e:	e7de      	b.n	800610e <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006150:	6820      	ldr	r0, [r4, #0]
 8006152:	f7ff fdb3 	bl	8005cbc <TIM_OC6_SetConfig>
      break;
 8006156:	e7da      	b.n	800610e <HAL_TIM_OC_ConfigChannel+0x26>

08006158 <HAL_TIM_PWM_ConfigChannel>:
{
 8006158:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800615a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
{
 8006160:	4604      	mov	r4, r0
 8006162:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006166:	d010      	beq.n	800618a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006168:	2301      	movs	r3, #1
  switch (Channel)
 800616a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800616c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8006174:	d043      	beq.n	80061fe <HAL_TIM_PWM_ConfigChannel+0xa6>
 8006176:	d809      	bhi.n	800618c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006178:	b1fa      	cbz	r2, 80061ba <HAL_TIM_PWM_ConfigChannel+0x62>
 800617a:	2a04      	cmp	r2, #4
 800617c:	d02e      	beq.n	80061dc <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800617e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006180:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006182:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006186:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800618a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800618c:	2a10      	cmp	r2, #16
 800618e:	d047      	beq.n	8006220 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006190:	2a14      	cmp	r2, #20
 8006192:	d056      	beq.n	8006242 <HAL_TIM_PWM_ConfigChannel+0xea>
 8006194:	2a0c      	cmp	r2, #12
 8006196:	d1f2      	bne.n	800617e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	f7ff fd27 	bl	8005bec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800619e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80061b8:	e030      	b.n	800621c <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	f7ff fc86 	bl	8005acc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	f042 0208 	orr.w	r2, r2, #8
 80061ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	f022 0204 	bic.w	r2, r2, #4
 80061d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061d8:	619a      	str	r2, [r3, #24]
      break;
 80061da:	e7d0      	b.n	800617e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	f7ff ff3d 	bl	800605c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80061fc:	e7ec      	b.n	80061d8 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	f7ff fcb0 	bl	8005b64 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006204:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006206:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	f022 0204 	bic.w	r2, r2, #4
 8006216:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006218:	69da      	ldr	r2, [r3, #28]
 800621a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800621c:	61da      	str	r2, [r3, #28]
      break;
 800621e:	e7ae      	b.n	800617e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	f7ff fd17 	bl	8005c54 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006226:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006228:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800622a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800622c:	f042 0208 	orr.w	r2, r2, #8
 8006230:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006232:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006234:	f022 0204 	bic.w	r2, r2, #4
 8006238:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800623a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800623c:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800623e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006240:	e79d      	b.n	800617e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	f7ff fd3a 	bl	8005cbc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006248:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800624a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800624c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800624e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800625c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800625e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006262:	e7ec      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0xe6>

08006264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006264:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006266:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006268:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800626e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8006272:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006274:	6083      	str	r3, [r0, #8]
 8006276:	bd10      	pop	{r4, pc}

08006278 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006278:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800627c:	2b01      	cmp	r3, #1
{
 800627e:	b570      	push	{r4, r5, r6, lr}
 8006280:	4604      	mov	r4, r0
 8006282:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006286:	d017      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800628c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800628e:	2301      	movs	r3, #1
 8006290:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006294:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006296:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <HAL_TIM_ConfigClockSource+0x140>)
 8006298:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800629a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800629c:	680b      	ldr	r3, [r1, #0]
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d072      	beq.n	8006388 <HAL_TIM_ConfigClockSource+0x110>
 80062a2:	d815      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x58>
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d00c      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x4a>
 80062a8:	d807      	bhi.n	80062ba <HAL_TIM_ConfigClockSource+0x42>
 80062aa:	b153      	cbz	r3, 80062c2 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80062ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80062b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80062b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d001      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x4a>
 80062be:	2b30      	cmp	r3, #48	; 0x30
 80062c0:	d1f4      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80062c2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062c4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80062c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062cc:	4313      	orrs	r3, r2
 80062ce:	e033      	b.n	8006338 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80062d0:	2b70      	cmp	r3, #112	; 0x70
 80062d2:	d033      	beq.n	800633c <HAL_TIM_ConfigClockSource+0xc4>
 80062d4:	d81b      	bhi.n	800630e <HAL_TIM_ConfigClockSource+0x96>
 80062d6:	2b50      	cmp	r3, #80	; 0x50
 80062d8:	d03f      	beq.n	800635a <HAL_TIM_ConfigClockSource+0xe2>
 80062da:	2b60      	cmp	r3, #96	; 0x60
 80062dc:	d1e6      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062de:	684d      	ldr	r5, [r1, #4]
 80062e0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e2:	6a01      	ldr	r1, [r0, #32]
 80062e4:	f021 0110 	bic.w	r1, r1, #16
 80062e8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ea:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80062ec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80062f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062fa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80062fe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006300:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006302:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006308:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800630c:	e014      	b.n	8006338 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	d00c      	beq.n	800632e <HAL_TIM_ConfigClockSource+0xb6>
 8006314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006318:	d1c8      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	68cb      	ldr	r3, [r1, #12]
 800631c:	684a      	ldr	r2, [r1, #4]
 800631e:	6889      	ldr	r1, [r1, #8]
 8006320:	f7ff ffa0 	bl	8006264 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006324:	6822      	ldr	r2, [r4, #0]
 8006326:	6893      	ldr	r3, [r2, #8]
 8006328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800632c:	e013      	b.n	8006356 <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800632e:	6883      	ldr	r3, [r0, #8]
 8006330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006334:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006338:	6083      	str	r3, [r0, #8]
 800633a:	e7b7      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800633c:	68cb      	ldr	r3, [r1, #12]
 800633e:	684a      	ldr	r2, [r1, #4]
 8006340:	6889      	ldr	r1, [r1, #8]
 8006342:	f7ff ff8f 	bl	8006264 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006352:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006356:	6093      	str	r3, [r2, #8]
      break;
 8006358:	e7a8      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800635a:	684a      	ldr	r2, [r1, #4]
 800635c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800635e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006360:	6a05      	ldr	r5, [r0, #32]
 8006362:	f025 0501 	bic.w	r5, r5, #1
 8006366:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006368:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800636a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800636e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006372:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006376:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006378:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800637a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800637c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006382:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8006386:	e7d7      	b.n	8006338 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006388:	684a      	ldr	r2, [r1, #4]
 800638a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800638c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638e:	6a05      	ldr	r5, [r0, #32]
 8006390:	f025 0501 	bic.w	r5, r5, #1
 8006394:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006396:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006398:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800639c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80063a4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80063a6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80063a8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80063aa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063b0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80063b4:	e7c0      	b.n	8006338 <HAL_TIM_ConfigClockSource+0xc0>
 80063b6:	bf00      	nop
 80063b8:	fffe0088 	.word	0xfffe0088

080063bc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063bc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063be:	f001 011f 	and.w	r1, r1, #31
{
 80063c2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063c4:	2401      	movs	r4, #1
 80063c6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80063c8:	ea23 0304 	bic.w	r3, r3, r4
 80063cc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ce:	6a03      	ldr	r3, [r0, #32]
 80063d0:	408a      	lsls	r2, r1
 80063d2:	431a      	orrs	r2, r3
 80063d4:	6202      	str	r2, [r0, #32]
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <HAL_TIM_PWM_Start>:
{
 80063d8:	b510      	push	{r4, lr}
 80063da:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063dc:	2201      	movs	r2, #1
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	f7ff ffec 	bl	80063bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <HAL_TIM_PWM_Start+0x60>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01f      	beq.n	800642c <HAL_TIM_PWM_Start+0x54>
 80063ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d01b      	beq.n	800642c <HAL_TIM_PWM_Start+0x54>
 80063f4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d017      	beq.n	800642c <HAL_TIM_PWM_Start+0x54>
 80063fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <HAL_TIM_PWM_Start+0x54>
 8006404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006408:	4293      	cmp	r3, r2
 800640a:	d00f      	beq.n	800642c <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 800640c:	6899      	ldr	r1, [r3, #8]
 800640e:	480b      	ldr	r0, [pc, #44]	; (800643c <HAL_TIM_PWM_Start+0x64>)
 8006410:	4001      	ands	r1, r0
 8006412:	2906      	cmp	r1, #6
 8006414:	d008      	beq.n	8006428 <HAL_TIM_PWM_Start+0x50>
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	4002      	ands	r2, r0
 800641a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800641e:	d003      	beq.n	8006428 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
}
 8006428:	2000      	movs	r0, #0
 800642a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006432:	645a      	str	r2, [r3, #68]	; 0x44
 8006434:	e7ea      	b.n	800640c <HAL_TIM_PWM_Start+0x34>
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	00010007 	.word	0x00010007

08006440 <HAL_TIM_OC_Start>:
 8006440:	f7ff bfca 	b.w	80063d8 <HAL_TIM_PWM_Start>

08006444 <HAL_TIM_PWM_Stop>:
{
 8006444:	b510      	push	{r4, lr}
 8006446:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006448:	2200      	movs	r2, #0
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	f7ff ffb6 	bl	80063bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <HAL_TIM_PWM_Stop+0x78>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00f      	beq.n	8006478 <HAL_TIM_PWM_Stop+0x34>
 8006458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800645c:	4293      	cmp	r3, r2
 800645e:	d00b      	beq.n	8006478 <HAL_TIM_PWM_Stop+0x34>
 8006460:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <HAL_TIM_PWM_Stop+0x34>
 8006468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <HAL_TIM_PWM_Stop+0x34>
 8006470:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006474:	4293      	cmp	r3, r2
 8006476:	d10d      	bne.n	8006494 <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8006478:	6a19      	ldr	r1, [r3, #32]
 800647a:	f241 1211 	movw	r2, #4369	; 0x1111
 800647e:	4211      	tst	r1, r2
 8006480:	d108      	bne.n	8006494 <HAL_TIM_PWM_Stop+0x50>
 8006482:	6a19      	ldr	r1, [r3, #32]
 8006484:	f240 4244 	movw	r2, #1092	; 0x444
 8006488:	4211      	tst	r1, r2
 800648a:	bf02      	ittt	eq
 800648c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800648e:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8006492:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006494:	6a19      	ldr	r1, [r3, #32]
 8006496:	f241 1211 	movw	r2, #4369	; 0x1111
 800649a:	4211      	tst	r1, r2
 800649c:	d108      	bne.n	80064b0 <HAL_TIM_PWM_Stop+0x6c>
 800649e:	6a19      	ldr	r1, [r3, #32]
 80064a0:	f240 4244 	movw	r2, #1092	; 0x444
 80064a4:	4211      	tst	r1, r2
 80064a6:	d103      	bne.n	80064b0 <HAL_TIM_PWM_Stop+0x6c>
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80064b6:	2000      	movs	r0, #0
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00

080064c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
{
 80064c6:	b530      	push	{r4, r5, lr}
 80064c8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80064cc:	d01f      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ce:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064d0:	4d10      	ldr	r5, [pc, #64]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80064d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064d6:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80064d8:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80064da:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064dc:	d003      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80064de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80064e2:	42aa      	cmp	r2, r5
 80064e4:	d103      	bne.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064e6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ec:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ee:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064f8:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fc:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fe:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006500:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8006502:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006504:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006508:	2300      	movs	r3, #0
 800650a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800650e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006510:	bd30      	pop	{r4, r5, pc}
 8006512:	bf00      	nop
 8006514:	40012c00 	.word	0x40012c00

08006518 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006518:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800651c:	2b01      	cmp	r3, #1
{
 800651e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8006520:	d038      	beq.n	8006594 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006522:	68cb      	ldr	r3, [r1, #12]
 8006524:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006526:	4c1c      	ldr	r4, [pc, #112]	; (8006598 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800652e:	684a      	ldr	r2, [r1, #4]
 8006530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006534:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006536:	680a      	ldr	r2, [r1, #0]
 8006538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800653e:	690a      	ldr	r2, [r1, #16]
 8006540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006544:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006546:	694a      	ldr	r2, [r1, #20]
 8006548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800654c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800654e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006554:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006556:	698a      	ldr	r2, [r1, #24]
 8006558:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800655c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006560:	6802      	ldr	r2, [r0, #0]
 8006562:	42a2      	cmp	r2, r4
 8006564:	d003      	beq.n	800656e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8006566:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800656a:	42a2      	cmp	r2, r4
 800656c:	d10c      	bne.n	8006588 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800656e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006570:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006574:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006578:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800657a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800657c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006580:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006582:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006586:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006588:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800658a:	2300      	movs	r3, #0
 800658c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006590:	4618      	mov	r0, r3
 8006592:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006594:	2002      	movs	r0, #2
}
 8006596:	bd10      	pop	{r4, pc}
 8006598:	40012c00 	.word	0x40012c00

0800659c <HAL_TIMEx_CommutationCallback>:
 800659c:	4770      	bx	lr

0800659e <HAL_TIMEx_BreakCallback>:
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065a0:	4770      	bx	lr

080065a2 <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a2:	6803      	ldr	r3, [r0, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065aa:	601a      	str	r2, [r3, #0]
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	2320      	movs	r3, #32
 80065b6:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	6703      	str	r3, [r0, #112]	; 0x70
 80065be:	4770      	bx	lr

080065c0 <UART_RxISR_16BIT>:
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c0:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80065c4:	2a22      	cmp	r2, #34	; 0x22
{
 80065c6:	b410      	push	{r4}
 80065c8:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ca:	d11e      	bne.n	800660a <UART_RxISR_16BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065cc:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t*) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80065ce:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 80065d2:	400c      	ands	r4, r1
 80065d4:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80065d6:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr +=2;
 80065da:	6581      	str	r1, [r0, #88]	; 0x58
    
    if(--huart->RxXferCount == 0)
 80065dc:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80065e0:	3901      	subs	r1, #1
 80065e2:	b289      	uxth	r1, r1
 80065e4:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
 80065e8:	b9a1      	cbnz	r1, 8006614 <UART_RxISR_16BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065ea:	6814      	ldr	r4, [r2, #0]
 80065ec:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80065f0:	6014      	str	r4, [r2, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
      
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f2:	6894      	ldr	r4, [r2, #8]
 80065f4:	f024 0401 	bic.w	r4, r4, #1
 80065f8:	6094      	str	r4, [r2, #8]
      
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065fa:	2220      	movs	r2, #32
 80065fc:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82
      
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006600:	6701      	str	r1, [r0, #112]	; 0x70
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006602:	f85d 4b04 	ldr.w	r4, [sp], #4
      HAL_UART_RxCpltCallback(huart);
 8006606:	f017 bce7 	b.w	801dfd8 <HAL_UART_RxCpltCallback>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800660a:	8b13      	ldrh	r3, [r2, #24]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f043 0308 	orr.w	r3, r3, #8
 8006612:	8313      	strh	r3, [r2, #24]
}
 8006614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800661c:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8006620:	2b22      	cmp	r3, #34	; 0x22
{
 8006622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006626:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006628:	d142      	bne.n	80066b0 <UART_RxISR_8BIT_FIFOEN+0x94>
  uint16_t  uhMask = huart->Mask;
 800662a:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 800662e:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
        
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006632:	4f23      	ldr	r7, [pc, #140]	; (80066c0 <UART_RxISR_8BIT_FIFOEN+0xa4>)
        
        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006634:	f04f 0820 	mov.w	r8, #32
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006638:	b9c5      	cbnz	r5, 800666c <UART_RxISR_8BIT_FIFOEN+0x50>
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 800663a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d03b      	beq.n	80066bc <UART_RxISR_8BIT_FIFOEN+0xa0>
 8006644:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006648:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800664c:	b29b      	uxth	r3, r3
 800664e:	429a      	cmp	r2, r3
 8006650:	d934      	bls.n	80066bc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800665a:	609a      	str	r2, [r3, #8]
      
      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800665c:	4a19      	ldr	r2, [pc, #100]	; (80066c4 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 800665e:	6722      	str	r2, [r4, #112]	; 0x70
      
      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	f042 0220 	orr.w	r2, r2, #32
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800666c:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800666e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006670:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006672:	1c51      	adds	r1, r2, #1
 8006674:	4033      	ands	r3, r6
 8006676:	65a1      	str	r1, [r4, #88]	; 0x58
 8006678:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800667a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800667e:	3b01      	subs	r3, #1
 8006680:	b29b      	uxth	r3, r3
 8006682:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if(huart->RxXferCount == 0U)
 8006686:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800668a:	b29b      	uxth	r3, r3
 800668c:	b96b      	cbnz	r3, 80066aa <UART_RxISR_8BIT_FIFOEN+0x8e>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	6811      	ldr	r1, [r2, #0]
 8006692:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006696:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006698:	6891      	ldr	r1, [r2, #8]
 800669a:	4039      	ands	r1, r7
 800669c:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 800669e:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80066a0:	f884 8082 	strb.w	r8, [r4, #130]	; 0x82
        huart->RxISR = NULL;
 80066a4:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UART_RxCpltCallback(huart);
 80066a6:	f017 fc97 	bl	801dfd8 <HAL_UART_RxCpltCallback>
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 80066aa:	3d01      	subs	r5, #1
 80066ac:	b2ed      	uxtb	r5, r5
 80066ae:	e7c3      	b.n	8006638 <UART_RxISR_8BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066b0:	6802      	ldr	r2, [r0, #0]
 80066b2:	8b13      	ldrh	r3, [r2, #24]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f043 0308 	orr.w	r3, r3, #8
 80066ba:	8313      	strh	r3, [r2, #24]
 80066bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c0:	effffffe 	.word	0xeffffffe
 80066c4:	080066c9 	.word	0x080066c9

080066c8 <UART_RxISR_8BIT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066c8:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80066cc:	2a22      	cmp	r2, #34	; 0x22
{
 80066ce:	b430      	push	{r4, r5}
 80066d0:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066d2:	d11e      	bne.n	8006712 <UART_RxISR_8BIT+0x4a>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066d4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066d6:	6d84      	ldr	r4, [r0, #88]	; 0x58
  uint16_t uhMask = huart->Mask;
 80066d8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066dc:	1c65      	adds	r5, r4, #1
 80066de:	400a      	ands	r2, r1
 80066e0:	6585      	str	r5, [r0, #88]	; 0x58
 80066e2:	7022      	strb	r2, [r4, #0]
    if(--huart->RxXferCount == 0)
 80066e4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80066e8:	3a01      	subs	r2, #1
 80066ea:	b292      	uxth	r2, r2
 80066ec:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
 80066f0:	b9a2      	cbnz	r2, 800671c <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066f2:	6801      	ldr	r1, [r0, #0]
 80066f4:	680c      	ldr	r4, [r1, #0]
 80066f6:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80066fa:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fc:	688c      	ldr	r4, [r1, #8]
 80066fe:	f024 0401 	bic.w	r4, r4, #1
 8006702:	608c      	str	r4, [r1, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006704:	2120      	movs	r1, #32
 8006706:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
      huart->RxISR = NULL;
 800670a:	6702      	str	r2, [r0, #112]	; 0x70
}
 800670c:	bc30      	pop	{r4, r5}
      HAL_UART_RxCpltCallback(huart);
 800670e:	f017 bc63 	b.w	801dfd8 <HAL_UART_RxCpltCallback>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006712:	8b13      	ldrh	r3, [r2, #24]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f043 0308 	orr.w	r3, r3, #8
 800671a:	8313      	strh	r3, [r2, #24]
}
 800671c:	bc30      	pop	{r4, r5}
 800671e:	4770      	bx	lr

08006720 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006720:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8006724:	2b22      	cmp	r3, #34	; 0x22
{
 8006726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672a:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800672c:	d141      	bne.n	80067b2 <UART_RxISR_16BIT_FIFOEN+0x92>
  uint16_t  uhMask = huart->Mask;
 800672e:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006732:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
        
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006736:	4f23      	ldr	r7, [pc, #140]	; (80067c4 <UART_RxISR_16BIT_FIFOEN+0xa4>)
        
        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006738:	f04f 0820 	mov.w	r8, #32
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 800673c:	b9c5      	cbnz	r5, 8006770 <UART_RxISR_16BIT_FIFOEN+0x50>
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 800673e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d03a      	beq.n	80067be <UART_RxISR_16BIT_FIFOEN+0x9e>
 8006748:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800674c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006750:	b29b      	uxth	r3, r3
 8006752:	429a      	cmp	r2, r3
 8006754:	d933      	bls.n	80067be <UART_RxISR_16BIT_FIFOEN+0x9e>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800675e:	609a      	str	r2, [r3, #8]
      
      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006760:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <UART_RxISR_16BIT_FIFOEN+0xa8>)
 8006762:	6722      	str	r2, [r4, #112]	; 0x70
      
      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	f042 0220 	orr.w	r2, r2, #32
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006770:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006772:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006774:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8006776:	4031      	ands	r1, r6
 8006778:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr +=2;
 800677c:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800677e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8006782:	3a01      	subs	r2, #1
 8006784:	b292      	uxth	r2, r2
 8006786:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if(huart->RxXferCount == 0U)
 800678a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800678e:	b292      	uxth	r2, r2
 8006790:	b962      	cbnz	r2, 80067ac <UART_RxISR_16BIT_FIFOEN+0x8c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006798:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800679a:	6899      	ldr	r1, [r3, #8]
 800679c:	4039      	ands	r1, r7
 800679e:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 80067a0:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80067a2:	f884 8082 	strb.w	r8, [r4, #130]	; 0x82
        huart->RxISR = NULL;
 80067a6:	6722      	str	r2, [r4, #112]	; 0x70
        HAL_UART_RxCpltCallback(huart);
 80067a8:	f017 fc16 	bl	801dfd8 <HAL_UART_RxCpltCallback>
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 80067ac:	3d01      	subs	r5, #1
 80067ae:	b2ed      	uxtb	r5, r5
 80067b0:	e7c4      	b.n	800673c <UART_RxISR_16BIT_FIFOEN+0x1c>
    }   
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067b2:	6802      	ldr	r2, [r0, #0]
 80067b4:	8b13      	ldrh	r3, [r2, #24]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f043 0308 	orr.w	r3, r3, #8
 80067bc:	8313      	strh	r3, [r2, #24]
 80067be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c2:	bf00      	nop
 80067c4:	effffffe 	.word	0xeffffffe
 80067c8:	080065c1 	.word	0x080065c1

080067cc <HAL_UART_DeInit>:
{
 80067cc:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 80067ce:	4605      	mov	r5, r0
 80067d0:	b1b8      	cbz	r0, 8006802 <HAL_UART_DeInit+0x36>
  huart->gState = HAL_UART_STATE_BUSY;
 80067d2:	2324      	movs	r3, #36	; 0x24
 80067d4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 80067d8:	6803      	ldr	r3, [r0, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 80067dc:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 80067e4:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80067e6:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80067e8:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80067ea:	f019 fb85 	bl	801fef8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80067f2:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80067f6:	f885 4081 	strb.w	r4, [r5, #129]	; 0x81
  return HAL_OK;
 80067fa:	4620      	mov	r0, r4
  huart->RxState = HAL_UART_STATE_RESET;
 80067fc:	f885 4082 	strb.w	r4, [r5, #130]	; 0x82
  return HAL_OK;
 8006800:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006802:	2001      	movs	r0, #1
}
 8006804:	bd38      	pop	{r3, r4, r5, pc}
	...

08006808 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8006808:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 800680c:	2b20      	cmp	r3, #32
{
 800680e:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8006810:	d167      	bne.n	80068e2 <HAL_UART_Receive_IT+0xda>
    if((pData == NULL ) || (Size == 0U))
 8006812:	2900      	cmp	r1, #0
 8006814:	d063      	beq.n	80068de <HAL_UART_Receive_IT+0xd6>
 8006816:	2a00      	cmp	r2, #0
 8006818:	d061      	beq.n	80068de <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 800681a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800681e:	2b01      	cmp	r3, #1
 8006820:	d05f      	beq.n	80068e2 <HAL_UART_Receive_IT+0xda>
 8006822:	2301      	movs	r3, #1
 8006824:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxISR       = NULL;
 8006828:	2300      	movs	r3, #0
 800682a:	6703      	str	r3, [r0, #112]	; 0x70
    UART_MASK_COMPUTATION(huart);
 800682c:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 800682e:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8006834:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006838:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 800683c:	d12e      	bne.n	800689c <HAL_UART_Receive_IT+0x94>
 800683e:	6901      	ldr	r1, [r0, #16]
 8006840:	bb51      	cbnz	r1, 8006898 <HAL_UART_Receive_IT+0x90>
 8006842:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006846:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684a:	2100      	movs	r1, #0
 800684c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006850:	2122      	movs	r1, #34	; 0x22
 8006852:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	6801      	ldr	r1, [r0, #0]
 8006858:	688c      	ldr	r4, [r1, #8]
 800685a:	f044 0401 	orr.w	r4, r4, #1
 800685e:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006860:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8006862:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8006866:	d129      	bne.n	80068bc <HAL_UART_Receive_IT+0xb4>
 8006868:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 800686c:	4294      	cmp	r4, r2
 800686e:	d825      	bhi.n	80068bc <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006874:	d120      	bne.n	80068b8 <HAL_UART_Receive_IT+0xb0>
 8006876:	6903      	ldr	r3, [r0, #16]
 8006878:	b9f3      	cbnz	r3, 80068b8 <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800687a:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687c:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800687e:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8006884:	2300      	movs	r3, #0
 8006886:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800688a:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800688c:	688a      	ldr	r2, [r1, #8]
 800688e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006892:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8006894:	4618      	mov	r0, r3
 8006896:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8006898:	21ff      	movs	r1, #255	; 0xff
 800689a:	e7d4      	b.n	8006846 <HAL_UART_Receive_IT+0x3e>
 800689c:	b923      	cbnz	r3, 80068a8 <HAL_UART_Receive_IT+0xa0>
 800689e:	6901      	ldr	r1, [r0, #16]
 80068a0:	2900      	cmp	r1, #0
 80068a2:	d0f9      	beq.n	8006898 <HAL_UART_Receive_IT+0x90>
 80068a4:	217f      	movs	r1, #127	; 0x7f
 80068a6:	e7ce      	b.n	8006846 <HAL_UART_Receive_IT+0x3e>
 80068a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068ac:	d1cd      	bne.n	800684a <HAL_UART_Receive_IT+0x42>
 80068ae:	6901      	ldr	r1, [r0, #16]
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d0f7      	beq.n	80068a4 <HAL_UART_Receive_IT+0x9c>
 80068b4:	213f      	movs	r1, #63	; 0x3f
 80068b6:	e7c6      	b.n	8006846 <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <HAL_UART_Receive_IT+0xe4>)
 80068ba:	e7df      	b.n	800687c <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c0:	d10b      	bne.n	80068da <HAL_UART_Receive_IT+0xd2>
 80068c2:	6903      	ldr	r3, [r0, #16]
 80068c4:	b94b      	cbnz	r3, 80068da <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80068c8:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 80068ca:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80068cc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 80068d0:	2300      	movs	r3, #0
 80068d2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80068d6:	600a      	str	r2, [r1, #0]
 80068d8:	e7dc      	b.n	8006894 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 80068da:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <HAL_UART_Receive_IT+0xec>)
 80068dc:	e7f4      	b.n	80068c8 <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 80068de:	2001      	movs	r0, #1
 80068e0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80068e2:	2002      	movs	r0, #2
}
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop
 80068e8:	08006721 	.word	0x08006721
 80068ec:	0800661d 	.word	0x0800661d
 80068f0:	080065c1 	.word	0x080065c1
 80068f4:	080066c9 	.word	0x080066c9

080068f8 <HAL_UART_Transmit_DMA>:
{
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4604      	mov	r4, r0
 80068fc:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80068fe:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006902:	2a20      	cmp	r2, #32
 8006904:	d12c      	bne.n	8006960 <HAL_UART_Transmit_DMA+0x68>
    if((pData == NULL ) || (Size == 0U))
 8006906:	b349      	cbz	r1, 800695c <HAL_UART_Transmit_DMA+0x64>
 8006908:	b343      	cbz	r3, 800695c <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800690a:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 800690e:	2a01      	cmp	r2, #1
 8006910:	d026      	beq.n	8006960 <HAL_UART_Transmit_DMA+0x68>
 8006912:	2201      	movs	r2, #1
 8006914:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006918:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 800691a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006920:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006922:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006926:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800692a:	4a0e      	ldr	r2, [pc, #56]	; (8006964 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 800692c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->pTxBuffPtr  = pData;
 8006930:	6521      	str	r1, [r4, #80]	; 0x50
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006932:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006934:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <HAL_UART_Transmit_DMA+0x70>)
 8006936:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006938:	4a0c      	ldr	r2, [pc, #48]	; (800696c <HAL_UART_Transmit_DMA+0x74>)
 800693a:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800693c:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 800693e:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8006940:	3228      	adds	r2, #40	; 0x28
 8006942:	f7fb f953 	bl	8001bec <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	2240      	movs	r2, #64	; 0x40
 800694a:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800694c:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800694e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006956:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006958:	4628      	mov	r0, r5
 800695a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800695c:	2001      	movs	r0, #1
 800695e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8006960:	2002      	movs	r0, #2
}
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	08006973 	.word	0x08006973
 8006968:	080069a3 	.word	0x080069a3
 800696c:	080069af 	.word	0x080069af

08006970 <HAL_UART_TxCpltCallback>:
 8006970:	4770      	bx	lr

08006972 <UART_DMATransmitCplt>:
{
 8006972:	b508      	push	{r3, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006974:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006976:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f013 0320 	ands.w	r3, r3, #32
 800697e:	d10b      	bne.n	8006998 <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0U;
 8006980:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006984:	6813      	ldr	r3, [r2, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800698c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006998:	4610      	mov	r0, r2
 800699a:	f7ff ffe9 	bl	8006970 <HAL_UART_TxCpltCallback>
 800699e:	bd08      	pop	{r3, pc}

080069a0 <HAL_UART_TxHalfCpltCallback>:
 80069a0:	4770      	bx	lr

080069a2 <UART_DMATxHalfCplt>:
{
 80069a2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80069a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80069a6:	f7ff fffb 	bl	80069a0 <HAL_UART_TxHalfCpltCallback>
 80069aa:	bd08      	pop	{r3, pc}

080069ac <HAL_UART_ErrorCallback>:
 80069ac:	4770      	bx	lr

080069ae <UART_DMAError>:
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80069ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 80069b0:	b508      	push	{r3, lr}
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069b2:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 80069b6:	2b21      	cmp	r3, #33	; 0x21
 80069b8:	d10d      	bne.n	80069d6 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80069ba:	680b      	ldr	r3, [r1, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	0612      	lsls	r2, r2, #24
 80069c0:	d509      	bpl.n	80069d6 <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069ce:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	2320      	movs	r3, #32
 80069d2:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d6:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 80069da:	2b22      	cmp	r3, #34	; 0x22
 80069dc:	d109      	bne.n	80069f2 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80069de:	680b      	ldr	r3, [r1, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	065b      	lsls	r3, r3, #25
 80069e4:	d505      	bpl.n	80069f2 <UART_DMAError+0x44>
    huart->RxXferCount = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80069ec:	4608      	mov	r0, r1
 80069ee:	f7ff fdd8 	bl	80065a2 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069f2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80069f6:	f043 0310 	orr.w	r3, r3, #16
 80069fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 80069fe:	4608      	mov	r0, r1
 8006a00:	f7ff ffd4 	bl	80069ac <HAL_UART_ErrorCallback>
 8006a04:	bd08      	pop	{r3, pc}
	...

08006a08 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a08:	6802      	ldr	r2, [r0, #0]
 8006a0a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a0c:	6811      	ldr	r1, [r2, #0]
{
 8006a0e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8006a10:	071d      	lsls	r5, r3, #28
{
 8006a12:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a14:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 8006a16:	d10b      	bne.n	8006a30 <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006a18:	069e      	lsls	r6, r3, #26
 8006a1a:	d577      	bpl.n	8006b0c <HAL_UART_IRQHandler+0x104>
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006a1c:	068d      	lsls	r5, r1, #26
 8006a1e:	d401      	bmi.n	8006a24 <HAL_UART_IRQHandler+0x1c>
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8006a20:	00c6      	lsls	r6, r0, #3
 8006a22:	d573      	bpl.n	8006b0c <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006a24:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80ac 	beq.w	8006b84 <HAL_UART_IRQHandler+0x17c>
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	e061      	b.n	8006af4 <HAL_UART_IRQHandler+0xec>
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8006a30:	4e55      	ldr	r6, [pc, #340]	; (8006b88 <HAL_UART_IRQHandler+0x180>)
 8006a32:	4006      	ands	r6, r0
 8006a34:	d102      	bne.n	8006a3c <HAL_UART_IRQHandler+0x34>
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
 8006a36:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006a3a:	d067      	beq.n	8006b0c <HAL_UART_IRQHandler+0x104>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a3c:	07dd      	lsls	r5, r3, #31
 8006a3e:	d509      	bpl.n	8006a54 <HAL_UART_IRQHandler+0x4c>
 8006a40:	05cd      	lsls	r5, r1, #23
 8006a42:	d507      	bpl.n	8006a54 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a44:	2501      	movs	r5, #1
 8006a46:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a48:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006a4c:	f045 0501 	orr.w	r5, r5, #1
 8006a50:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a54:	079d      	lsls	r5, r3, #30
 8006a56:	d509      	bpl.n	8006a6c <HAL_UART_IRQHandler+0x64>
 8006a58:	07c5      	lsls	r5, r0, #31
 8006a5a:	d507      	bpl.n	8006a6c <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a5c:	2502      	movs	r5, #2
 8006a5e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a60:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006a64:	f045 0504 	orr.w	r5, r5, #4
 8006a68:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a6c:	075d      	lsls	r5, r3, #29
 8006a6e:	d509      	bpl.n	8006a84 <HAL_UART_IRQHandler+0x7c>
 8006a70:	07c5      	lsls	r5, r0, #31
 8006a72:	d507      	bpl.n	8006a84 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a74:	2504      	movs	r5, #4
 8006a76:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a78:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006a7c:	f045 0502 	orr.w	r5, r5, #2
 8006a80:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006a84:	071d      	lsls	r5, r3, #28
 8006a86:	d509      	bpl.n	8006a9c <HAL_UART_IRQHandler+0x94>
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006a88:	068d      	lsls	r5, r1, #26
 8006a8a:	d400      	bmi.n	8006a8e <HAL_UART_IRQHandler+0x86>
 8006a8c:	b136      	cbz	r6, 8006a9c <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a8e:	2508      	movs	r5, #8
 8006a90:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a92:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006a96:	432a      	orrs	r2, r5
 8006a98:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d06f      	beq.n	8006b84 <HAL_UART_IRQHandler+0x17c>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006aa4:	069e      	lsls	r6, r3, #26
 8006aa6:	d507      	bpl.n	8006ab8 <HAL_UART_IRQHandler+0xb0>
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006aa8:	068d      	lsls	r5, r1, #26
 8006aaa:	d401      	bmi.n	8006ab0 <HAL_UART_IRQHandler+0xa8>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8006aac:	00c0      	lsls	r0, r0, #3
 8006aae:	d503      	bpl.n	8006ab8 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006ab0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006ab2:	b10b      	cbz	r3, 8006ab8 <HAL_UART_IRQHandler+0xb0>
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006ab8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006abc:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8006abe:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006ac0:	d404      	bmi.n	8006acc <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006ac6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006aca:	d01a      	beq.n	8006b02 <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 8006acc:	f7ff fd69 	bl	80065a2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	0652      	lsls	r2, r2, #25
 8006ad6:	d510      	bpl.n	8006afa <HAL_UART_IRQHandler+0xf2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad8:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006ada:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006ae2:	b150      	cbz	r0, 8006afa <HAL_UART_IRQHandler+0xf2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ae4:	4b29      	ldr	r3, [pc, #164]	; (8006b8c <HAL_UART_IRQHandler+0x184>)
 8006ae6:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ae8:	f7fb f8c2 	bl	8001c70 <HAL_DMA_Abort_IT>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d049      	beq.n	8006b84 <HAL_UART_IRQHandler+0x17c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006af2:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8006af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff ff56 	bl	80069ac <HAL_UART_ErrorCallback>
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006b02:	f7ff ff53 	bl	80069ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b06:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006b0c:	02de      	lsls	r6, r3, #11
 8006b0e:	d50e      	bpl.n	8006b2e <HAL_UART_IRQHandler+0x126>
 8006b10:	0245      	lsls	r5, r0, #9
 8006b12:	d50c      	bpl.n	8006b2e <HAL_UART_IRQHandler+0x126>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b18:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8006b1a:	2320      	movs	r3, #32
 8006b1c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_UARTEx_WakeupCallback(huart);
 8006b20:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8006b22:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 8006b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006b2a:	f000 bc2b 	b.w	8007384 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
 8006b2e:	061e      	lsls	r6, r3, #24
 8006b30:	d505      	bpl.n	8006b3e <HAL_UART_IRQHandler+0x136>
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 8006b32:	060d      	lsls	r5, r1, #24
 8006b34:	d401      	bmi.n	8006b3a <HAL_UART_IRQHandler+0x132>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8006b36:	0200      	lsls	r0, r0, #8
 8006b38:	d501      	bpl.n	8006b3e <HAL_UART_IRQHandler+0x136>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006b3a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006b3c:	e773      	b.n	8006a26 <HAL_UART_IRQHandler+0x1e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b3e:	065e      	lsls	r6, r3, #25
 8006b40:	d50e      	bpl.n	8006b60 <HAL_UART_IRQHandler+0x158>
 8006b42:	064d      	lsls	r5, r1, #25
 8006b44:	d50c      	bpl.n	8006b60 <HAL_UART_IRQHandler+0x158>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4c:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b4e:	2320      	movs	r3, #32
 8006b50:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  huart->TxISR = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f7ff ff09 	bl	8006970 <HAL_UART_TxCpltCallback>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8006b60:	0218      	lsls	r0, r3, #8
 8006b62:	d506      	bpl.n	8006b72 <HAL_UART_IRQHandler+0x16a>
 8006b64:	004a      	lsls	r2, r1, #1
 8006b66:	d504      	bpl.n	8006b72 <HAL_UART_IRQHandler+0x16a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b68:	4620      	mov	r0, r4
}
 8006b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b6e:	f000 bc0b 	b.w	8007388 <HAL_UARTEx_TxFifoEmptyCallback>
  if(((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006b72:	01db      	lsls	r3, r3, #7
 8006b74:	d506      	bpl.n	8006b84 <HAL_UART_IRQHandler+0x17c>
 8006b76:	2900      	cmp	r1, #0
 8006b78:	da04      	bge.n	8006b84 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b7a:	4620      	mov	r0, r4
}
 8006b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b80:	f000 bc01 	b.w	8007386 <HAL_UARTEx_RxFifoFullCallback>
 8006b84:	bd70      	pop	{r4, r5, r6, pc}
 8006b86:	bf00      	nop
 8006b88:	10000001 	.word	0x10000001
 8006b8c:	08006b91 	.word	0x08006b91

08006b90 <UART_DMAAbortOnError>:
{
 8006b90:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006b92:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b9a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006b9e:	f7ff ff05 	bl	80069ac <HAL_UART_ErrorCallback>
 8006ba2:	bd08      	pop	{r3, pc}

08006ba4 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ba4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba6:	69c1      	ldr	r1, [r0, #28]
 8006ba8:	6882      	ldr	r2, [r0, #8]
{
 8006baa:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006bae:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bb0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bb4:	4302      	orrs	r2, r0
 8006bb6:	6960      	ldr	r0, [r4, #20]
 8006bb8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bba:	48bd      	ldr	r0, [pc, #756]	; (8006eb0 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bbc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bbe:	4028      	ands	r0, r5
 8006bc0:	4302      	orrs	r2, r0
 8006bc2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	68e0      	ldr	r0, [r4, #12]
 8006bc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006bcc:	4302      	orrs	r2, r0
 8006bce:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bd0:	4ab8      	ldr	r2, [pc, #736]	; (8006eb4 <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bd2:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bd4:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006bd6:	bf1c      	itt	ne
 8006bd8:	6a22      	ldrne	r2, [r4, #32]
 8006bda:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006be2:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006be6:	4302      	orrs	r2, r0
 8006be8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006bec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bee:	f020 000f 	bic.w	r0, r0, #15
 8006bf2:	4310      	orrs	r0, r2
 8006bf4:	62d8      	str	r0, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf6:	48b0      	ldr	r0, [pc, #704]	; (8006eb8 <UART_SetConfig+0x314>)
 8006bf8:	4283      	cmp	r3, r0
 8006bfa:	d117      	bne.n	8006c2c <UART_SetConfig+0x88>
 8006bfc:	4baf      	ldr	r3, [pc, #700]	; (8006ebc <UART_SetConfig+0x318>)
 8006bfe:	48b0      	ldr	r0, [pc, #704]	; (8006ec0 <UART_SetConfig+0x31c>)
 8006c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c0e:	f040 81a7 	bne.w	8006f60 <UART_SetConfig+0x3bc>
    switch (clocksource)
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d849      	bhi.n	8006caa <UART_SetConfig+0x106>
 8006c16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006c1a:	017f      	.short	0x017f
 8006c1c:	016800d0 	.word	0x016800d0
 8006c20:	01780048 	.word	0x01780048
 8006c24:	00480048 	.word	0x00480048
 8006c28:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c2c:	48a5      	ldr	r0, [pc, #660]	; (8006ec4 <UART_SetConfig+0x320>)
 8006c2e:	4283      	cmp	r3, r0
 8006c30:	d106      	bne.n	8006c40 <UART_SetConfig+0x9c>
 8006c32:	4ba2      	ldr	r3, [pc, #648]	; (8006ebc <UART_SetConfig+0x318>)
 8006c34:	48a4      	ldr	r0, [pc, #656]	; (8006ec8 <UART_SetConfig+0x324>)
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	f003 030c 	and.w	r3, r3, #12
 8006c3e:	e7e3      	b.n	8006c08 <UART_SetConfig+0x64>
 8006c40:	48a2      	ldr	r0, [pc, #648]	; (8006ecc <UART_SetConfig+0x328>)
 8006c42:	4283      	cmp	r3, r0
 8006c44:	d11d      	bne.n	8006c82 <UART_SetConfig+0xde>
 8006c46:	4b9d      	ldr	r3, [pc, #628]	; (8006ebc <UART_SetConfig+0x318>)
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	f000 8157 	beq.w	8006f04 <UART_SetConfig+0x360>
 8006c56:	d804      	bhi.n	8006c62 <UART_SetConfig+0xbe>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8159 	beq.w	8006f10 <UART_SetConfig+0x36c>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	e7d3      	b.n	8006c0a <UART_SetConfig+0x66>
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	f000 813e 	beq.w	8006ee4 <UART_SetConfig+0x340>
 8006c68:	2b30      	cmp	r3, #48	; 0x30
 8006c6a:	d1f8      	bne.n	8006c5e <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c70:	f040 80d0 	bne.w	8006e14 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c74:	4b96      	ldr	r3, [pc, #600]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006c76:	6861      	ldr	r1, [r4, #4]
 8006c78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006c80:	e138      	b.n	8006ef4 <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c82:	4894      	ldr	r0, [pc, #592]	; (8006ed4 <UART_SetConfig+0x330>)
 8006c84:	4283      	cmp	r3, r0
 8006c86:	d12d      	bne.n	8006ce4 <UART_SetConfig+0x140>
 8006c88:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 8006c8c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006c90:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8006c94:	2840      	cmp	r0, #64	; 0x40
 8006c96:	f000 80fd 	beq.w	8006e94 <UART_SetConfig+0x2f0>
 8006c9a:	d812      	bhi.n	8006cc2 <UART_SetConfig+0x11e>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	f000 80c0 	beq.w	8006e22 <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ca2:	4884      	ldr	r0, [pc, #528]	; (8006eb4 <UART_SetConfig+0x310>)
 8006ca4:	4283      	cmp	r3, r0
 8006ca6:	f040 8156 	bne.w	8006f56 <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
  huart->NbTxDataToProcess = 1;
 8006cac:	2201      	movs	r2, #1
 8006cae:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8006cb2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006cba:	6762      	str	r2, [r4, #116]	; 0x74
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc2:	2880      	cmp	r0, #128	; 0x80
 8006cc4:	f000 80bb 	beq.w	8006e3e <UART_SetConfig+0x29a>
 8006cc8:	28c0      	cmp	r0, #192	; 0xc0
 8006cca:	d1ea      	bne.n	8006ca2 <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ccc:	4879      	ldr	r0, [pc, #484]	; (8006eb4 <UART_SetConfig+0x310>)
 8006cce:	4283      	cmp	r3, r0
 8006cd0:	d1cc      	bne.n	8006c6c <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cd2:	4b7f      	ldr	r3, [pc, #508]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006cd4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8006cdc:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cde:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8006ce2:	e0aa      	b.n	8006e3a <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce4:	487c      	ldr	r0, [pc, #496]	; (8006ed8 <UART_SetConfig+0x334>)
 8006ce6:	4283      	cmp	r3, r0
 8006ce8:	d111      	bne.n	8006d0e <UART_SetConfig+0x16a>
 8006cea:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 8006cee:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006cf2:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8006cf6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006cfa:	f000 80cb 	beq.w	8006e94 <UART_SetConfig+0x2f0>
 8006cfe:	d9cd      	bls.n	8006c9c <UART_SetConfig+0xf8>
 8006d00:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006d04:	f000 809b 	beq.w	8006e3e <UART_SetConfig+0x29a>
 8006d08:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8006d0c:	e7dd      	b.n	8006cca <UART_SetConfig+0x126>
 8006d0e:	4869      	ldr	r0, [pc, #420]	; (8006eb4 <UART_SetConfig+0x310>)
 8006d10:	4283      	cmp	r3, r0
 8006d12:	d1a4      	bne.n	8006c5e <UART_SetConfig+0xba>
 8006d14:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 8006d18:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006d1c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8006d20:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006d24:	f000 80b6 	beq.w	8006e94 <UART_SetConfig+0x2f0>
 8006d28:	d9b8      	bls.n	8006c9c <UART_SetConfig+0xf8>
 8006d2a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006d2e:	f000 8086 	beq.w	8006e3e <UART_SetConfig+0x29a>
 8006d32:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8006d36:	e7c8      	b.n	8006cca <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d38:	f7fd fc2c 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d3c:	4b64      	ldr	r3, [pc, #400]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006d3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d40:	6865      	ldr	r5, [r4, #4]
 8006d42:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006d46:	2300      	movs	r3, #0
 8006d48:	e005      	b.n	8006d56 <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d4a:	4b61      	ldr	r3, [pc, #388]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006d4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d4e:	4863      	ldr	r0, [pc, #396]	; (8006edc <UART_SetConfig+0x338>)
 8006d50:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006d54:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d56:	2100      	movs	r1, #0
 8006d58:	f7f9 ffaa 	bl	8000cb0 <__aeabi_uldivmod>
 8006d5c:	020f      	lsls	r7, r1, #8
 8006d5e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006d62:	0206      	lsls	r6, r0, #8
 8006d64:	0868      	lsrs	r0, r5, #1
 8006d66:	eb16 0b00 	adds.w	fp, r6, r0
 8006d6a:	f147 0c00 	adc.w	ip, r7, #0
 8006d6e:	462a      	mov	r2, r5
 8006d70:	2300      	movs	r3, #0
 8006d72:	4658      	mov	r0, fp
 8006d74:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d76:	f7f9 ff9b 	bl	8000cb0 <__aeabi_uldivmod>
          break;
 8006d7a:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d7c:	4a58      	ldr	r2, [pc, #352]	; (8006ee0 <UART_SetConfig+0x33c>)
 8006d7e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006d82:	4291      	cmp	r1, r2
 8006d84:	d891      	bhi.n	8006caa <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	60d0      	str	r0, [r2, #12]
 8006d8a:	e78f      	b.n	8006cac <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8c:	f7fd f862 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006d90:	e7d4      	b.n	8006d3c <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d94:	4b4e      	ldr	r3, [pc, #312]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006d96:	0868      	lsrs	r0, r5, #1
 8006d98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	462a      	mov	r2, r5
 8006da0:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006da4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006da8:	fbb6 f6f3 	udiv	r6, r6, r3
 8006dac:	2300      	movs	r3, #0
 8006dae:	fbe6 0105 	umlal	r0, r1, r6, r5
 8006db2:	e7e0      	b.n	8006d76 <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006db6:	2000      	movs	r0, #0
 8006db8:	e7e0      	b.n	8006d7c <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dba:	f7fd fbfd 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 8006dbe:	e0ad      	b.n	8006f1c <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc0:	f7fd fbe8 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc4:	6862      	ldr	r2, [r4, #4]
 8006dc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006dc8:	4b41      	ldr	r3, [pc, #260]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006dca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006dce:	fbb0 f0f3 	udiv	r0, r0, r3
 8006dd2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8006dd6:	fbb0 f0f2 	udiv	r0, r0, r2
 8006dda:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ddc:	f1a0 0210 	sub.w	r2, r0, #16
 8006de0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006de4:	429a      	cmp	r2, r3
 8006de6:	f63f af60 	bhi.w	8006caa <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	60d8      	str	r0, [r3, #12]
 8006dee:	e0b0      	b.n	8006f52 <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df0:	f7fd fbe2 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 8006df4:	e7e6      	b.n	8006dc4 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df6:	4936      	ldr	r1, [pc, #216]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006dfe:	4837      	ldr	r0, [pc, #220]	; (8006edc <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e00:	fbb0 f0f2 	udiv	r0, r0, r2
 8006e04:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006e08:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e0c:	e7e5      	b.n	8006dda <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e0e:	f7fd f821 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006e12:	e7d7      	b.n	8006dc4 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e14:	492e      	ldr	r1, [pc, #184]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006e16:	6863      	ldr	r3, [r4, #4]
 8006e18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006e1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e20:	e7ee      	b.n	8006e00 <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006e22:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <UART_SetConfig+0x310>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d173      	bne.n	8006f10 <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e28:	f7fd fbb4 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8006e2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e2e:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006e30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e34:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006e38:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8006e3a:	b953      	cbnz	r3, 8006e52 <UART_SetConfig+0x2ae>
 8006e3c:	e736      	b.n	8006cac <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006e3e:	481d      	ldr	r0, [pc, #116]	; (8006eb4 <UART_SetConfig+0x310>)
 8006e40:	4283      	cmp	r3, r0
 8006e42:	d14f      	bne.n	8006ee4 <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e44:	4b22      	ldr	r3, [pc, #136]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006e46:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006e4a:	4b24      	ldr	r3, [pc, #144]	; (8006edc <UART_SetConfig+0x338>)
 8006e4c:	fbb3 f3f0 	udiv	r3, r3, r0
 8006e50:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8006e52:	6865      	ldr	r5, [r4, #4]
 8006e54:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006e58:	4299      	cmp	r1, r3
 8006e5a:	f63f af26 	bhi.w	8006caa <UART_SetConfig+0x106>
 8006e5e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006e62:	f63f af22 	bhi.w	8006caa <UART_SetConfig+0x106>
        switch (clocksource)
 8006e66:	2a08      	cmp	r2, #8
 8006e68:	d8a4      	bhi.n	8006db4 <UART_SetConfig+0x210>
 8006e6a:	a301      	add	r3, pc, #4	; (adr r3, 8006e70 <UART_SetConfig+0x2cc>)
 8006e6c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006e70:	08006d39 	.word	0x08006d39
 8006e74:	08006db5 	.word	0x08006db5
 8006e78:	08006d4b 	.word	0x08006d4b
 8006e7c:	08006db5 	.word	0x08006db5
 8006e80:	08006d8d 	.word	0x08006d8d
 8006e84:	08006db5 	.word	0x08006db5
 8006e88:	08006db5 	.word	0x08006db5
 8006e8c:	08006db5 	.word	0x08006db5
 8006e90:	08006d93 	.word	0x08006d93
  if(UART_INSTANCE_LOWPOWER(huart))
 8006e94:	4a07      	ldr	r2, [pc, #28]	; (8006eb4 <UART_SetConfig+0x310>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d134      	bne.n	8006f04 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e9a:	f7fc ffdb 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006e9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <UART_SetConfig+0x32c>)
 8006ea2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ea6:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006eaa:	2204      	movs	r2, #4
 8006eac:	e7c5      	b.n	8006e3a <UART_SetConfig+0x296>
 8006eae:	bf00      	nop
 8006eb0:	cfff69f3 	.word	0xcfff69f3
 8006eb4:	40008000 	.word	0x40008000
 8006eb8:	40013800 	.word	0x40013800
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	080254e8 	.word	0x080254e8
 8006ec4:	40004400 	.word	0x40004400
 8006ec8:	080254ec 	.word	0x080254ec
 8006ecc:	40004800 	.word	0x40004800
 8006ed0:	080254fa 	.word	0x080254fa
 8006ed4:	40004c00 	.word	0x40004c00
 8006ed8:	40005000 	.word	0x40005000
 8006edc:	00f42400 	.word	0x00f42400
 8006ee0:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006ee8:	d185      	bne.n	8006df6 <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eea:	4b29      	ldr	r3, [pc, #164]	; (8006f90 <UART_SetConfig+0x3ec>)
 8006eec:	6861      	ldr	r1, [r4, #4]
 8006eee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ef2:	4828      	ldr	r0, [pc, #160]	; (8006f94 <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ef8:	0848      	lsrs	r0, r1, #1
 8006efa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006efe:	fbb0 f0f1 	udiv	r0, r0, r1
 8006f02:	e017      	b.n	8006f34 <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f04:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006f08:	d181      	bne.n	8006e0e <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f0a:	f7fc ffa3 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006f0e:	e005      	b.n	8006f1c <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f10:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006f14:	f47f af54 	bne.w	8006dc0 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f18:	f7fd fb3c 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f1c:	6862      	ldr	r2, [r4, #4]
 8006f1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f20:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <UART_SetConfig+0x3ec>)
 8006f22:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f2a:	0850      	lsrs	r0, r2, #1
 8006f2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006f30:	fbb0 f0f2 	udiv	r0, r0, r2
 8006f34:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f36:	f1a0 0210 	sub.w	r2, r0, #16
 8006f3a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	f63f aeb3 	bhi.w	8006caa <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8006f44:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8006f48:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f4a:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006f4e:	4318      	orrs	r0, r3
 8006f50:	60d0      	str	r0, [r2, #12]
 8006f52:	2300      	movs	r3, #0
 8006f54:	e6aa      	b.n	8006cac <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f56:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006f5a:	f43f aea6 	beq.w	8006caa <UART_SetConfig+0x106>
 8006f5e:	2310      	movs	r3, #16
    switch (clocksource)
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	f63f aea2 	bhi.w	8006caa <UART_SetConfig+0x106>
 8006f66:	a101      	add	r1, pc, #4	; (adr r1, 8006f6c <UART_SetConfig+0x3c8>)
 8006f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f6c:	08006dc1 	.word	0x08006dc1
 8006f70:	08006df1 	.word	0x08006df1
 8006f74:	08006df7 	.word	0x08006df7
 8006f78:	08006cab 	.word	0x08006cab
 8006f7c:	08006e0f 	.word	0x08006e0f
 8006f80:	08006cab 	.word	0x08006cab
 8006f84:	08006cab 	.word	0x08006cab
 8006f88:	08006cab 	.word	0x08006cab
 8006f8c:	08006e15 	.word	0x08006e15
 8006f90:	080254fa 	.word	0x080254fa
 8006f94:	00f42400 	.word	0x00f42400

08006f98 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f9a:	07da      	lsls	r2, r3, #31
{
 8006f9c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f9e:	d506      	bpl.n	8006fae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa0:	6801      	ldr	r1, [r0, #0]
 8006fa2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006fa4:	684a      	ldr	r2, [r1, #4]
 8006fa6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006faa:	4322      	orrs	r2, r4
 8006fac:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fae:	079c      	lsls	r4, r3, #30
 8006fb0:	d506      	bpl.n	8006fc0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fb2:	6801      	ldr	r1, [r0, #0]
 8006fb4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006fb6:	684a      	ldr	r2, [r1, #4]
 8006fb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fbc:	4322      	orrs	r2, r4
 8006fbe:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fc0:	0759      	lsls	r1, r3, #29
 8006fc2:	d506      	bpl.n	8006fd2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fc4:	6801      	ldr	r1, [r0, #0]
 8006fc6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006fc8:	684a      	ldr	r2, [r1, #4]
 8006fca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fce:	4322      	orrs	r2, r4
 8006fd0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd2:	071a      	lsls	r2, r3, #28
 8006fd4:	d506      	bpl.n	8006fe4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd6:	6801      	ldr	r1, [r0, #0]
 8006fd8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006fda:	684a      	ldr	r2, [r1, #4]
 8006fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fe0:	4322      	orrs	r2, r4
 8006fe2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fe4:	06dc      	lsls	r4, r3, #27
 8006fe6:	d506      	bpl.n	8006ff6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fe8:	6801      	ldr	r1, [r0, #0]
 8006fea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006fec:	688a      	ldr	r2, [r1, #8]
 8006fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ff2:	4322      	orrs	r2, r4
 8006ff4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ff6:	0699      	lsls	r1, r3, #26
 8006ff8:	d506      	bpl.n	8007008 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ffa:	6801      	ldr	r1, [r0, #0]
 8006ffc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006ffe:	688a      	ldr	r2, [r1, #8]
 8007000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007004:	4322      	orrs	r2, r4
 8007006:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007008:	065a      	lsls	r2, r3, #25
 800700a:	d50f      	bpl.n	800702c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800700c:	6801      	ldr	r1, [r0, #0]
 800700e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007010:	684a      	ldr	r2, [r1, #4]
 8007012:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007016:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007018:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800701c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800701e:	d105      	bne.n	800702c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007020:	684a      	ldr	r2, [r1, #4]
 8007022:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007024:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007028:	4322      	orrs	r2, r4
 800702a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	d506      	bpl.n	800703e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007030:	6802      	ldr	r2, [r0, #0]
 8007032:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007034:	6853      	ldr	r3, [r2, #4]
 8007036:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800703a:	430b      	orrs	r3, r1
 800703c:	6053      	str	r3, [r2, #4]
 800703e:	bd10      	pop	{r4, pc}

08007040 <UART_WaitOnFlagUntilTimeout>:
{
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	9d06      	ldr	r5, [sp, #24]
 8007046:	4604      	mov	r4, r0
 8007048:	460f      	mov	r7, r1
 800704a:	4616      	mov	r6, r2
 800704c:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	69ca      	ldr	r2, [r1, #28]
 8007052:	ea37 0302 	bics.w	r3, r7, r2
 8007056:	bf0c      	ite	eq
 8007058:	2201      	moveq	r2, #1
 800705a:	2200      	movne	r2, #0
 800705c:	42b2      	cmp	r2, r6
 800705e:	d002      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007060:	2000      	movs	r0, #0
}
 8007062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8007066:	1c6b      	adds	r3, r5, #1
 8007068:	d0f2      	beq.n	8007050 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800706a:	b99d      	cbnz	r5, 8007094 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007074:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800707e:	2320      	movs	r3, #32
 8007080:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8007084:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8007088:	2300      	movs	r3, #0
 800708a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800708e:	2003      	movs	r0, #3
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007094:	f7f9 ffc4 	bl	8001020 <HAL_GetTick>
 8007098:	eba0 0008 	sub.w	r0, r0, r8
 800709c:	4285      	cmp	r5, r0
 800709e:	d2d6      	bcs.n	800704e <UART_WaitOnFlagUntilTimeout+0xe>
 80070a0:	e7e4      	b.n	800706c <UART_WaitOnFlagUntilTimeout+0x2c>

080070a2 <HAL_UART_Transmit>:
{
 80070a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070a6:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80070a8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80070ac:	2b20      	cmp	r3, #32
{
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80070b4:	d14b      	bne.n	800714e <HAL_UART_Transmit+0xac>
    if((pData == NULL ) || (Size == 0U))
 80070b6:	2900      	cmp	r1, #0
 80070b8:	d047      	beq.n	800714a <HAL_UART_Transmit+0xa8>
 80070ba:	2a00      	cmp	r2, #0
 80070bc:	d045      	beq.n	800714a <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80070be:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d043      	beq.n	800714e <HAL_UART_Transmit+0xac>
 80070c6:	2301      	movs	r3, #1
 80070c8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d2:	2321      	movs	r3, #33	; 0x21
 80070d4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    tickstart = HAL_GetTick();
 80070d8:	f7f9 ffa2 	bl	8001020 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80070dc:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    tickstart = HAL_GetTick();
 80070e0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80070e2:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    while(huart->TxXferCount > 0U)
 80070e6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ea:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 80070ec:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ee:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 80070f0:	b952      	cbnz	r2, 8007108 <HAL_UART_Transmit+0x66>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070f2:	2140      	movs	r1, #64	; 0x40
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff ffa3 	bl	8007040 <UART_WaitOnFlagUntilTimeout>
 80070fa:	b958      	cbnz	r0, 8007114 <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80070fc:	2320      	movs	r3, #32
 80070fe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    __HAL_UNLOCK(huart);
 8007102:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    return HAL_OK;
 8007106:	e006      	b.n	8007116 <HAL_UART_Transmit+0x74>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007108:	2200      	movs	r2, #0
 800710a:	2180      	movs	r1, #128	; 0x80
 800710c:	4620      	mov	r0, r4
 800710e:	f7ff ff97 	bl	8007040 <UART_WaitOnFlagUntilTimeout>
 8007112:	b118      	cbz	r0, 800711c <HAL_UART_Transmit+0x7a>
        return HAL_TIMEOUT;
 8007114:	2003      	movs	r0, #3
}
 8007116:	b002      	add	sp, #8
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800711c:	68a3      	ldr	r3, [r4, #8]
 800711e:	6822      	ldr	r2, [r4, #0]
 8007120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007124:	d10d      	bne.n	8007142 <HAL_UART_Transmit+0xa0>
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	b95b      	cbnz	r3, 8007142 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800712a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007134:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8007138:	3b01      	subs	r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8007140:	e7d1      	b.n	80070e6 <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8007142:	782b      	ldrb	r3, [r5, #0]
 8007144:	8513      	strh	r3, [r2, #40]	; 0x28
 8007146:	3501      	adds	r5, #1
 8007148:	e7f4      	b.n	8007134 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 800714a:	2001      	movs	r0, #1
 800714c:	e7e3      	b.n	8007116 <HAL_UART_Transmit+0x74>
    return HAL_BUSY;
 800714e:	2002      	movs	r0, #2
 8007150:	e7e1      	b.n	8007116 <HAL_UART_Transmit+0x74>

08007152 <HAL_UART_Receive>:
{
 8007152:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007156:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8007158:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 800715c:	2b20      	cmp	r3, #32
{
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8007164:	d161      	bne.n	800722a <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 8007166:	2900      	cmp	r1, #0
 8007168:	d05d      	beq.n	8007226 <HAL_UART_Receive+0xd4>
 800716a:	2a00      	cmp	r2, #0
 800716c:	d05b      	beq.n	8007226 <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 800716e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007172:	2b01      	cmp	r3, #1
 8007174:	d059      	beq.n	800722a <HAL_UART_Receive+0xd8>
 8007176:	2301      	movs	r3, #1
 8007178:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	2300      	movs	r3, #0
 800717e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007182:	2322      	movs	r3, #34	; 0x22
 8007184:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    tickstart = HAL_GetTick();
 8007188:	f7f9 ff4a 	bl	8001020 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800718c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800718e:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8007196:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8007198:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 800719c:	d115      	bne.n	80071ca <HAL_UART_Receive+0x78>
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	b98b      	cbnz	r3, 80071c6 <HAL_UART_Receive+0x74>
 80071a2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80071a6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    uhMask = huart->Mask;
 80071aa:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
    while(huart->RxXferCount > 0U)
 80071ae:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 80071b2:	b280      	uxth	r0, r0
 80071b4:	b9b8      	cbnz	r0, 80071e6 <HAL_UART_Receive+0x94>
    huart->RxState = HAL_UART_STATE_READY;
 80071b6:	2320      	movs	r3, #32
 80071b8:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    __HAL_UNLOCK(huart);
 80071bc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80071c0:	b002      	add	sp, #8
 80071c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80071c6:	23ff      	movs	r3, #255	; 0xff
 80071c8:	e7ed      	b.n	80071a6 <HAL_UART_Receive+0x54>
 80071ca:	b923      	cbnz	r3, 80071d6 <HAL_UART_Receive+0x84>
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f9      	beq.n	80071c6 <HAL_UART_Receive+0x74>
 80071d2:	237f      	movs	r3, #127	; 0x7f
 80071d4:	e7e7      	b.n	80071a6 <HAL_UART_Receive+0x54>
 80071d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071da:	d1e6      	bne.n	80071aa <HAL_UART_Receive+0x58>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0f7      	beq.n	80071d2 <HAL_UART_Receive+0x80>
 80071e2:	233f      	movs	r3, #63	; 0x3f
 80071e4:	e7df      	b.n	80071a6 <HAL_UART_Receive+0x54>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071e6:	f8cd 8000 	str.w	r8, [sp]
 80071ea:	463b      	mov	r3, r7
 80071ec:	2200      	movs	r2, #0
 80071ee:	2120      	movs	r1, #32
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7ff ff25 	bl	8007040 <UART_WaitOnFlagUntilTimeout>
 80071f6:	b9d0      	cbnz	r0, 800722e <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f8:	68a3      	ldr	r3, [r4, #8]
 80071fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	d10c      	bne.n	800721c <HAL_UART_Receive+0xca>
 8007202:	6922      	ldr	r2, [r4, #16]
 8007204:	b952      	cbnz	r2, 800721c <HAL_UART_Receive+0xca>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8007206:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007208:	4033      	ands	r3, r6
 800720a:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800720e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007212:	3b01      	subs	r3, #1
 8007214:	b29b      	uxth	r3, r3
 8007216:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800721a:	e7c8      	b.n	80071ae <HAL_UART_Receive+0x5c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800721c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800721e:	4033      	ands	r3, r6
 8007220:	702b      	strb	r3, [r5, #0]
 8007222:	3501      	adds	r5, #1
 8007224:	e7f3      	b.n	800720e <HAL_UART_Receive+0xbc>
      return  HAL_ERROR;
 8007226:	2001      	movs	r0, #1
 8007228:	e7ca      	b.n	80071c0 <HAL_UART_Receive+0x6e>
    return HAL_BUSY;
 800722a:	2002      	movs	r0, #2
 800722c:	e7c8      	b.n	80071c0 <HAL_UART_Receive+0x6e>
        return HAL_TIMEOUT;
 800722e:	2003      	movs	r0, #3
 8007230:	e7c6      	b.n	80071c0 <HAL_UART_Receive+0x6e>

08007232 <UART_CheckIdleState>:
{
 8007232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007234:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007236:	2600      	movs	r6, #0
 8007238:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800723c:	f7f9 fef0 	bl	8001020 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8007246:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007248:	d417      	bmi.n	800727a <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	075b      	lsls	r3, r3, #29
 8007250:	d50a      	bpl.n	8007268 <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	2200      	movs	r2, #0
 800725a:	462b      	mov	r3, r5
 800725c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007260:	4620      	mov	r0, r4
 8007262:	f7ff feed 	bl	8007040 <UART_WaitOnFlagUntilTimeout>
 8007266:	b9a0      	cbnz	r0, 8007292 <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8007268:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800726a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800726c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8007270:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8007274:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8007278:	e00c      	b.n	8007294 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800727a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4632      	mov	r2, r6
 8007282:	4603      	mov	r3, r0
 8007284:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007288:	4620      	mov	r0, r4
 800728a:	f7ff fed9 	bl	8007040 <UART_WaitOnFlagUntilTimeout>
 800728e:	2800      	cmp	r0, #0
 8007290:	d0db      	beq.n	800724a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8007292:	2003      	movs	r0, #3
}
 8007294:	b002      	add	sp, #8
 8007296:	bd70      	pop	{r4, r5, r6, pc}

08007298 <HAL_UART_Init>:
{
 8007298:	b510      	push	{r4, lr}
  if(huart == NULL)
 800729a:	4604      	mov	r4, r0
 800729c:	b360      	cbz	r0, 80072f8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800729e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80072a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072a6:	b91b      	cbnz	r3, 80072b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80072a8:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80072ac:	f018 fd76 	bl	801fd9c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80072b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072b2:	2324      	movs	r3, #36	; 0x24
 80072b4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 80072b8:	6813      	ldr	r3, [r2, #0]
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c0:	4620      	mov	r0, r4
 80072c2:	f7ff fc6f 	bl	8006ba4 <UART_SetConfig>
 80072c6:	2801      	cmp	r0, #1
 80072c8:	d016      	beq.n	80072f8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072cc:	b113      	cbz	r3, 80072d4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80072ce:	4620      	mov	r0, r4
 80072d0:	f7ff fe62 	bl	8006f98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80072ec:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80072ee:	601a      	str	r2, [r3, #0]
}
 80072f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80072f4:	f7ff bf9d 	b.w	8007232 <UART_CheckIdleState>
}
 80072f8:	2001      	movs	r0, #1
 80072fa:	bd10      	pop	{r4, pc}

080072fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 80072fe:	2203      	movs	r2, #3
 8007300:	f88d 2003 	strb.w	r2, [sp, #3]
 8007304:	2207      	movs	r2, #7
 8007306:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 800730a:	2208      	movs	r2, #8
 800730c:	f88d 2008 	strb.w	r2, [sp, #8]
 8007310:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007314:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8007316:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8007318:	2104      	movs	r1, #4
 800731a:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 800731c:	f88d 3000 	strb.w	r3, [sp]
 8007320:	f88d 3001 	strb.w	r3, [sp, #1]
 8007324:	f88d 3002 	strb.w	r3, [sp, #2]
 8007328:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 800732c:	f88d 1009 	strb.w	r1, [sp, #9]
 8007330:	f88d 400a 	strb.w	r4, [sp, #10]
 8007334:	f88d 100b 	strb.w	r1, [sp, #11]
 8007338:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800733c:	b92a      	cbnz	r2, 800734a <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 800733e:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8007342:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8007346:	b004      	add	sp, #16
 8007348:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800734a:	6803      	ldr	r3, [r0, #0]
 800734c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734e:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8007350:	ab04      	add	r3, sp, #16
 8007352:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8007356:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 800735a:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 800735e:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	b2db      	uxtb	r3, r3
 8007366:	fbb3 f3f1 	udiv	r3, r3, r1
 800736a:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 800736e:	ab04      	add	r3, sp, #16
 8007370:	441a      	add	r2, r3
 8007372:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8007376:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	b2db      	uxtb	r3, r3
 800737e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007382:	e7de      	b.n	8007342 <UARTEx_SetNbDataToProcess+0x46>

08007384 <HAL_UARTEx_WakeupCallback>:
 8007384:	4770      	bx	lr

08007386 <HAL_UARTEx_RxFifoFullCallback>:
 8007386:	4770      	bx	lr

08007388 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8007388:	4770      	bx	lr

0800738a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800738a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800738e:	2b01      	cmp	r3, #1
 8007390:	d014      	beq.n	80073bc <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007392:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007394:	2324      	movs	r3, #36	; 0x24
 8007396:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800739a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800739c:	6813      	ldr	r3, [r2, #0]
 800739e:	f023 0301 	bic.w	r3, r3, #1
 80073a2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073a4:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	6683      	str	r3, [r0, #104]	; 0x68
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ac:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80073ae:	2220      	movs	r2, #32
 80073b0:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 80073b4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80073b8:	4618      	mov	r0, r3
 80073ba:	4770      	bx	lr
  __HAL_LOCK(huart);
 80073bc:	2002      	movs	r0, #2
}
 80073be:	4770      	bx	lr

080073c0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80073c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80073c2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80073c6:	2b01      	cmp	r3, #1
{
 80073c8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80073ca:	d01b      	beq.n	8007404 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80073cc:	2301      	movs	r3, #1
 80073ce:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80073d2:	2324      	movs	r3, #36	; 0x24
 80073d4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d8:	6803      	ldr	r3, [r0, #0]
 80073da:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80073ea:	4311      	orrs	r1, r2
 80073ec:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80073ee:	f7ff ff85 	bl	80072fc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073f2:	6803      	ldr	r3, [r0, #0]
 80073f4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	2320      	movs	r3, #32
 80073f8:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 80073fc:	2000      	movs	r0, #0
 80073fe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8007402:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007404:	2002      	movs	r0, #2
}
 8007406:	bd38      	pop	{r3, r4, r5, pc}

08007408 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007408:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800740a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800740e:	2b01      	cmp	r3, #1
{
 8007410:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007412:	d01b      	beq.n	800744c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8007414:	2301      	movs	r3, #1
 8007416:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800741a:	2324      	movs	r3, #36	; 0x24
 800741c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007420:	6803      	ldr	r3, [r0, #0]
 8007422:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8007432:	4311      	orrs	r1, r2
 8007434:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007436:	f7ff ff61 	bl	80072fc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800743a:	6803      	ldr	r3, [r0, #0]
 800743c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800743e:	2320      	movs	r3, #32
 8007440:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8007444:	2000      	movs	r0, #0
 8007446:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 800744a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800744c:	2002      	movs	r0, #2
}
 800744e:	bd38      	pop	{r3, r4, r5, pc}

08007450 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007450:	4b11      	ldr	r3, [pc, #68]	; (8007498 <SDMMC_GetCmdResp2+0x48>)
 8007452:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	fbb3 f2f2 	udiv	r2, r3, r2
 800745c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007460:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8007462:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007466:	d313      	bcc.n	8007490 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007468:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800746a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800746e:	d0f8      	beq.n	8007462 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007470:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007472:	075b      	lsls	r3, r3, #29
 8007474:	d503      	bpl.n	800747e <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007476:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007478:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800747a:	4618      	mov	r0, r3
 800747c:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800747e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007480:	f013 0301 	ands.w	r3, r3, #1
 8007484:	d001      	beq.n	800748a <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007486:	2301      	movs	r3, #1
 8007488:	e7f6      	b.n	8007478 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800748a:	4a04      	ldr	r2, [pc, #16]	; (800749c <SDMMC_GetCmdResp2+0x4c>)
 800748c:	6382      	str	r2, [r0, #56]	; 0x38
 800748e:	e7f4      	b.n	800747a <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007494:	e7f1      	b.n	800747a <SDMMC_GetCmdResp2+0x2a>
 8007496:	bf00      	nop
 8007498:	20000ed4 	.word	0x20000ed4
 800749c:	002000c5 	.word	0x002000c5

080074a0 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <SDMMC_GetCmdResp3+0x3c>)
 80074a2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80074ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80074b0:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80074b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80074b6:	d30d      	bcc.n	80074d4 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80074b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80074ba:	f012 0f45 	tst.w	r2, #69	; 0x45
 80074be:	d0f8      	beq.n	80074b2 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80074c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074c2:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074c6:	bf15      	itete	ne
 80074c8:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074ca:	4a05      	ldreq	r2, [pc, #20]	; (80074e0 <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074cc:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074ce:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074d0:	4618      	mov	r0, r3
 80074d2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80074d4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000ed4 	.word	0x20000ed4
 80074e0:	002000c5 	.word	0x002000c5

080074e4 <SDMMC_Init>:
{
 80074e4:	b084      	sub	sp, #16
 80074e6:	b510      	push	{r4, lr}
 80074e8:	ac03      	add	r4, sp, #12
 80074ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80074ee:	9a04      	ldr	r2, [sp, #16]
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	6841      	ldr	r1, [r0, #4]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	9a05      	ldr	r2, [sp, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	9a06      	ldr	r2, [sp, #24]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	9a07      	ldr	r2, [sp, #28]
}
 8007500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007504:	4313      	orrs	r3, r2
 8007506:	4a03      	ldr	r2, [pc, #12]	; (8007514 <SDMMC_Init+0x30>)
 8007508:	400a      	ands	r2, r1
 800750a:	4313      	orrs	r3, r2
 800750c:	6043      	str	r3, [r0, #4]
}
 800750e:	b004      	add	sp, #16
 8007510:	2000      	movs	r0, #0
 8007512:	4770      	bx	lr
 8007514:	fffc2c00 	.word	0xfffc2c00

08007518 <SDMMC_ReadFIFO>:
 8007518:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800751c:	4770      	bx	lr

0800751e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800751e:	680b      	ldr	r3, [r1, #0]
 8007520:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8007524:	2000      	movs	r0, #0
 8007526:	4770      	bx	lr

08007528 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007528:	6803      	ldr	r3, [r0, #0]
 800752a:	f043 0303 	orr.w	r3, r3, #3
 800752e:	6003      	str	r3, [r0, #0]
}
 8007530:	2000      	movs	r0, #0
 8007532:	4770      	bx	lr

08007534 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8007534:	6803      	ldr	r3, [r0, #0]
 8007536:	f023 0303 	bic.w	r3, r3, #3
 800753a:	6003      	str	r3, [r0, #0]
}
 800753c:	2000      	movs	r0, #0
 800753e:	4770      	bx	lr

08007540 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007540:	6800      	ldr	r0, [r0, #0]
}
 8007542:	f000 0003 	and.w	r0, r0, #3
 8007546:	4770      	bx	lr

08007548 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8007548:	680b      	ldr	r3, [r1, #0]
 800754a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800754c:	68c2      	ldr	r2, [r0, #12]
 800754e:	4b06      	ldr	r3, [pc, #24]	; (8007568 <SDMMC_SendCommand+0x20>)
 8007550:	4013      	ands	r3, r2
 8007552:	684a      	ldr	r2, [r1, #4]
 8007554:	4313      	orrs	r3, r2
 8007556:	688a      	ldr	r2, [r1, #8]
 8007558:	4313      	orrs	r3, r2
 800755a:	68ca      	ldr	r2, [r1, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	690a      	ldr	r2, [r1, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	60c3      	str	r3, [r0, #12]
}
 8007564:	2000      	movs	r0, #0
 8007566:	4770      	bx	lr
 8007568:	fffee0c0 	.word	0xfffee0c0

0800756c <SDMMC_GetResponse>:
{
 800756c:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800756e:	3014      	adds	r0, #20
 8007570:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007576:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
}  
 800757c:	b002      	add	sp, #8
 800757e:	4770      	bx	lr

08007580 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007580:	4b44      	ldr	r3, [pc, #272]	; (8007694 <SDMMC_GetCmdResp1+0x114>)
{
 8007582:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800758a:	fbb3 f3f4 	udiv	r3, r3, r4
 800758e:	435a      	muls	r2, r3
    if (count-- == 0)
 8007590:	2a00      	cmp	r2, #0
 8007592:	d049      	beq.n	8007628 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007594:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007596:	f013 0f45 	tst.w	r3, #69	; 0x45
 800759a:	f102 32ff 	add.w	r2, r2, #4294967295
 800759e:	d0f7      	beq.n	8007590 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075a2:	075c      	lsls	r4, r3, #29
 80075a4:	d503      	bpl.n	80075ae <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075a6:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075a8:	6383      	str	r3, [r0, #56]	; 0x38
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075b0:	f013 0301 	ands.w	r3, r3, #1
 80075b4:	d001      	beq.n	80075ba <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075b6:	2301      	movs	r3, #1
 80075b8:	e7f6      	b.n	80075a8 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 80075ba:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	4291      	cmp	r1, r2
 80075c0:	d135      	bne.n	800762e <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80075c2:	4a35      	ldr	r2, [pc, #212]	; (8007698 <SDMMC_GetCmdResp1+0x118>)
 80075c4:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80075c6:	4619      	mov	r1, r3
 80075c8:	f7ff ffd0 	bl	800756c <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80075cc:	4b33      	ldr	r3, [pc, #204]	; (800769c <SDMMC_GetCmdResp1+0x11c>)
 80075ce:	4003      	ands	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0ea      	beq.n	80075aa <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80075d4:	2800      	cmp	r0, #0
 80075d6:	db2c      	blt.n	8007632 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80075d8:	0042      	lsls	r2, r0, #1
 80075da:	d42d      	bmi.n	8007638 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075dc:	0084      	lsls	r4, r0, #2
 80075de:	d42d      	bmi.n	800763c <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075e0:	00c1      	lsls	r1, r0, #3
 80075e2:	d42d      	bmi.n	8007640 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80075e4:	0102      	lsls	r2, r0, #4
 80075e6:	d42e      	bmi.n	8007646 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80075e8:	0144      	lsls	r4, r0, #5
 80075ea:	d42f      	bmi.n	800764c <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80075ec:	01c1      	lsls	r1, r0, #7
 80075ee:	d430      	bmi.n	8007652 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80075f0:	0202      	lsls	r2, r0, #8
 80075f2:	d431      	bmi.n	8007658 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80075f4:	0244      	lsls	r4, r0, #9
 80075f6:	d432      	bmi.n	800765e <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80075f8:	0281      	lsls	r1, r0, #10
 80075fa:	d433      	bmi.n	8007664 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80075fc:	02c2      	lsls	r2, r0, #11
 80075fe:	d434      	bmi.n	800766a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007600:	0344      	lsls	r4, r0, #13
 8007602:	d435      	bmi.n	8007670 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007604:	0381      	lsls	r1, r0, #14
 8007606:	d436      	bmi.n	8007676 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007608:	03c2      	lsls	r2, r0, #15
 800760a:	d437      	bmi.n	800767c <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800760c:	0404      	lsls	r4, r0, #16
 800760e:	d438      	bmi.n	8007682 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007610:	0441      	lsls	r1, r0, #17
 8007612:	d439      	bmi.n	8007688 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007614:	0482      	lsls	r2, r0, #18
 8007616:	d43a      	bmi.n	800768e <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007618:	f010 0f08 	tst.w	r0, #8
 800761c:	bf14      	ite	ne
 800761e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8007622:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007626:	e7c0      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800762c:	e7bd      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800762e:	2301      	movs	r3, #1
 8007630:	e7bb      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007636:	e7b8      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	e7b6      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	e7b4      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007644:	e7b1      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800764a:	e7ae      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800764c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007650:	e7ab      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007656:	e7a8      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800765c:	e7a5      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800765e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007662:	e7a2      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007668:	e79f      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	e79c      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007674:	e799      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007676:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800767a:	e796      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800767c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007680:	e793      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007686:	e790      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800768c:	e78d      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 800768e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007692:	e78a      	b.n	80075aa <SDMMC_GetCmdResp1+0x2a>
 8007694:	20000ed4 	.word	0x20000ed4
 8007698:	002000c5 	.word	0x002000c5
 800769c:	fdffe008 	.word	0xfdffe008

080076a0 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80076a0:	680b      	ldr	r3, [r1, #0]
 80076a2:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80076a4:	684b      	ldr	r3, [r1, #4]
 80076a6:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 80076a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80076aa:	688a      	ldr	r2, [r1, #8]
 80076ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076b0:	4313      	orrs	r3, r2
 80076b2:	68ca      	ldr	r2, [r1, #12]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	690a      	ldr	r2, [r1, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	694a      	ldr	r2, [r1, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80076c0:	2000      	movs	r0, #0
 80076c2:	4770      	bx	lr

080076c4 <SDMMC_CmdBlockLength>:
{
 80076c4:	b530      	push	{r4, r5, lr}
 80076c6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076cc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ce:	2300      	movs	r3, #0
{
 80076d0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80076d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80076d4:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076d6:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076de:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80076e0:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076e2:	f7ff ff31 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80076e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ea:	4621      	mov	r1, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	f7ff ff47 	bl	8007580 <SDMMC_GetCmdResp1>
}
 80076f2:	b007      	add	sp, #28
 80076f4:	bd30      	pop	{r4, r5, pc}

080076f6 <SDMMC_CmdReadSingleBlock>:
{
 80076f6:	b530      	push	{r4, r5, lr}
 80076f8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007700:	2300      	movs	r3, #0
{
 8007702:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007704:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007706:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007708:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800770a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800770c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007710:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007712:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007714:	f7ff ff18 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007718:	f241 3288 	movw	r2, #5000	; 0x1388
 800771c:	4621      	mov	r1, r4
 800771e:	4628      	mov	r0, r5
 8007720:	f7ff ff2e 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007724:	b007      	add	sp, #28
 8007726:	bd30      	pop	{r4, r5, pc}

08007728 <SDMMC_CmdReadMultiBlock>:
{
 8007728:	b530      	push	{r4, r5, lr}
 800772a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800772c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007730:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007732:	2300      	movs	r3, #0
{
 8007734:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007736:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007738:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800773a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800773c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800773e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007742:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007744:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007746:	f7ff feff 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800774a:	f241 3288 	movw	r2, #5000	; 0x1388
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f7ff ff15 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007756:	b007      	add	sp, #28
 8007758:	bd30      	pop	{r4, r5, pc}

0800775a <SDMMC_CmdWriteSingleBlock>:
{
 800775a:	b530      	push	{r4, r5, lr}
 800775c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800775e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007762:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007764:	2300      	movs	r3, #0
{
 8007766:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007768:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800776a:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800776c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800776e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007774:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007776:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007778:	f7ff fee6 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800777c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f7ff fefc 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007788:	b007      	add	sp, #28
 800778a:	bd30      	pop	{r4, r5, pc}

0800778c <SDMMC_CmdWriteMultiBlock>:
{
 800778c:	b530      	push	{r4, r5, lr}
 800778e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007794:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007796:	2300      	movs	r3, #0
{
 8007798:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800779a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800779c:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800779e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077a0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077a6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80077a8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077aa:	f7ff fecd 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b2:	4621      	mov	r1, r4
 80077b4:	4628      	mov	r0, r5
 80077b6:	f7ff fee3 	bl	8007580 <SDMMC_GetCmdResp1>
}
 80077ba:	b007      	add	sp, #28
 80077bc:	bd30      	pop	{r4, r5, pc}
	...

080077c0 <SDMMC_CmdStopTransfer>:
{
 80077c0:	b530      	push	{r4, r5, lr}
 80077c2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80077c4:	2300      	movs	r3, #0
{
 80077c6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 80077c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80077ca:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077cc:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077d0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077d8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077da:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80077dc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077de:	f7ff feb3 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80077e2:	4a03      	ldr	r2, [pc, #12]	; (80077f0 <SDMMC_CmdStopTransfer+0x30>)
 80077e4:	4621      	mov	r1, r4
 80077e6:	4628      	mov	r0, r5
 80077e8:	f7ff feca 	bl	8007580 <SDMMC_GetCmdResp1>
}
 80077ec:	b007      	add	sp, #28
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	05f5e100 	.word	0x05f5e100

080077f4 <SDMMC_CmdSelDesel>:
{
 80077f4:	b530      	push	{r4, r5, lr}
 80077f6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077fc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077fe:	2300      	movs	r3, #0
{
 8007800:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007802:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007804:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007806:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800780c:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800780e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007810:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007812:	f7ff fe99 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007816:	f241 3288 	movw	r2, #5000	; 0x1388
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff feaf 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007822:	b007      	add	sp, #28
 8007824:	bd30      	pop	{r4, r5, pc}
	...

08007828 <SDMMC_CmdGoIdleState>:
{
 8007828:	b510      	push	{r4, lr}
 800782a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007830:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007832:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007834:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007836:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800783c:	9305      	str	r3, [sp, #20]
{
 800783e:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007840:	f7ff fe82 	bl	8007548 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <SDMMC_CmdGoIdleState+0x4c>)
 8007846:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007850:	f241 3388 	movw	r3, #5000	; 0x1388
 8007854:	4353      	muls	r3, r2
    if (count-- == 0)
 8007856:	f113 33ff 	adds.w	r3, r3, #4294967295
 800785a:	d307      	bcc.n	800786c <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800785c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800785e:	0612      	lsls	r2, r2, #24
 8007860:	d5f9      	bpl.n	8007856 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <SDMMC_CmdGoIdleState+0x50>)
 8007864:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007866:	2000      	movs	r0, #0
}
 8007868:	b006      	add	sp, #24
 800786a:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800786c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8007870:	e7fa      	b.n	8007868 <SDMMC_CmdGoIdleState+0x40>
 8007872:	bf00      	nop
 8007874:	20000ed4 	.word	0x20000ed4
 8007878:	002000c5 	.word	0x002000c5

0800787c <SDMMC_CmdOperCond>:
{
 800787c:	b510      	push	{r4, lr}
 800787e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007880:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007884:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007886:	2308      	movs	r3, #8
 8007888:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800788a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800788e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007890:	2300      	movs	r3, #0
 8007892:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007894:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800789a:	9305      	str	r3, [sp, #20]
{
 800789c:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800789e:	f7ff fe53 	bl	8007548 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80078a2:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <SDMMC_CmdOperCond+0x78>)
 80078a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80078ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80078b2:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80078b4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80078b8:	d318      	bcc.n	80078ec <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80078ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078bc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80078c0:	d0f8      	beq.n	80078b4 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078c4:	075b      	lsls	r3, r3, #29
 80078c6:	d503      	bpl.n	80078d0 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078c8:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078ca:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80078cc:	b006      	add	sp, #24
 80078ce:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078d2:	f012 0201 	ands.w	r2, r2, #1
 80078d6:	d001      	beq.n	80078dc <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078d8:	2001      	movs	r0, #1
 80078da:	e7f6      	b.n	80078ca <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80078dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80078de:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80078e2:	d0f3      	beq.n	80078cc <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80078e4:	2340      	movs	r3, #64	; 0x40
 80078e6:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078e8:	4610      	mov	r0, r2
 80078ea:	e7ef      	b.n	80078cc <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 80078ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80078f0:	e7ec      	b.n	80078cc <SDMMC_CmdOperCond+0x50>
 80078f2:	bf00      	nop
 80078f4:	20000ed4 	.word	0x20000ed4

080078f8 <SDMMC_CmdAppCommand>:
{
 80078f8:	b530      	push	{r4, r5, lr}
 80078fa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007900:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007902:	2300      	movs	r3, #0
{
 8007904:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007906:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007908:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800790a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800790c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800790e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007912:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007914:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007916:	f7ff fe17 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800791a:	f241 3288 	movw	r2, #5000	; 0x1388
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f7ff fe2d 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007926:	b007      	add	sp, #28
 8007928:	bd30      	pop	{r4, r5, pc}

0800792a <SDMMC_CmdAppOperCommand>:
{
 800792a:	b510      	push	{r4, lr}
 800792c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800792e:	2329      	movs	r3, #41	; 0x29
 8007930:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007936:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007938:	2300      	movs	r3, #0
{
 800793a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800793c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800793e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007940:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007946:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007948:	f7ff fdfe 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800794c:	4620      	mov	r0, r4
 800794e:	f7ff fda7 	bl	80074a0 <SDMMC_GetCmdResp3>
}
 8007952:	b006      	add	sp, #24
 8007954:	bd10      	pop	{r4, pc}

08007956 <SDMMC_CmdSendSCR>:
{
 8007956:	b530      	push	{r4, r5, lr}
 8007958:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 800795a:	2300      	movs	r3, #0
{
 800795c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 800795e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007960:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007962:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007966:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007968:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800796a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800796e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007970:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007972:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007974:	f7ff fde8 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007978:	f241 3288 	movw	r2, #5000	; 0x1388
 800797c:	4621      	mov	r1, r4
 800797e:	4628      	mov	r0, r5
 8007980:	f7ff fdfe 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007984:	b007      	add	sp, #28
 8007986:	bd30      	pop	{r4, r5, pc}

08007988 <SDMMC_CmdSendCID>:
{
 8007988:	b510      	push	{r4, lr}
 800798a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 800798c:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800798e:	2202      	movs	r2, #2
{
 8007990:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8007992:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007994:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007996:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007998:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800799c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079a0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079a2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079a4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079a6:	f7ff fdcf 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff fd50 	bl	8007450 <SDMMC_GetCmdResp2>
}
 80079b0:	b006      	add	sp, #24
 80079b2:	bd10      	pop	{r4, pc}

080079b4 <SDMMC_CmdSendCSD>:
{
 80079b4:	b510      	push	{r4, lr}
 80079b6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80079b8:	2309      	movs	r3, #9
 80079ba:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80079c0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079c2:	2300      	movs	r3, #0
{
 80079c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80079c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079c8:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079ca:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079d0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079d2:	f7ff fdb9 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7ff fd3a 	bl	8007450 <SDMMC_GetCmdResp2>
}
 80079dc:	b006      	add	sp, #24
 80079de:	bd10      	pop	{r4, pc}

080079e0 <SDMMC_CmdSetRelAdd>:
{
 80079e0:	b530      	push	{r4, r5, lr}
 80079e2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80079e4:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80079e6:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 80079e8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80079ea:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079ec:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ee:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 80079f6:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079fa:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079fc:	9305      	str	r3, [sp, #20]
{
 80079fe:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a00:	f7ff fda2 	bl	8007548 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007a04:	4b1f      	ldr	r3, [pc, #124]	; (8007a84 <SDMMC_CmdSetRelAdd+0xa4>)
 8007a06:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a14:	4353      	muls	r3, r2
    if (count-- == 0)
 8007a16:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007a1a:	d32a      	bcc.n	8007a72 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007a1c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007a1e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007a22:	d0f8      	beq.n	8007a16 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a26:	075a      	lsls	r2, r3, #29
 8007a28:	d503      	bpl.n	8007a32 <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a2a:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a2c:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007a2e:	b007      	add	sp, #28
 8007a30:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a34:	f011 0101 	ands.w	r1, r1, #1
 8007a38:	d001      	beq.n	8007a3e <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	e7f6      	b.n	8007a2c <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007a3e:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d118      	bne.n	8007a78 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a46:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <SDMMC_CmdSetRelAdd+0xa8>)
 8007a48:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f7ff fd8e 	bl	800756c <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a50:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8007a54:	d103      	bne.n	8007a5e <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a56:	0c00      	lsrs	r0, r0, #16
 8007a58:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	e7e7      	b.n	8007a2e <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a5e:	0443      	lsls	r3, r0, #17
 8007a60:	d40c      	bmi.n	8007a7c <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a62:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007a66:	bf14      	ite	ne
 8007a68:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007a6c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007a70:	e7dd      	b.n	8007a2e <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 8007a72:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007a76:	e7da      	b.n	8007a2e <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a78:	2001      	movs	r0, #1
 8007a7a:	e7d8      	b.n	8007a2e <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007a80:	e7d5      	b.n	8007a2e <SDMMC_CmdSetRelAdd+0x4e>
 8007a82:	bf00      	nop
 8007a84:	20000ed4 	.word	0x20000ed4
 8007a88:	002000c5 	.word	0x002000c5

08007a8c <SDMMC_CmdSendStatus>:
{
 8007a8c:	b530      	push	{r4, r5, lr}
 8007a8e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a94:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a96:	2300      	movs	r3, #0
{
 8007a98:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007a9a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007a9c:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a9e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aa0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007aa6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007aa8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aaa:	f7ff fd4d 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f7ff fd63 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007aba:	b007      	add	sp, #28
 8007abc:	bd30      	pop	{r4, r5, pc}

08007abe <SDMMC_CmdSwitch>:
{
 8007abe:	b530      	push	{r4, r5, lr}
 8007ac0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ac6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ac8:	2300      	movs	r3, #0
{
 8007aca:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007acc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8007ace:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ad0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ad2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ad8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8007ada:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007adc:	f7ff fd34 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8007ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f7ff fd4a 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007aec:	b007      	add	sp, #28
 8007aee:	bd30      	pop	{r4, r5, pc}

08007af0 <SDMMC_CmdBusWidth>:
 8007af0:	f7ff bfe5 	b.w	8007abe <SDMMC_CmdSwitch>

08007af4 <SDMMC_CmdVoltageSwitch>:
{
 8007af4:	b530      	push	{r4, r5, lr}
 8007af6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007af8:	2300      	movs	r3, #0
{
 8007afa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007afc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007afe:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b00:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b04:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b06:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b0c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b0e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007b10:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b12:	f7ff fd19 	bl	8007548 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f7ff fd2f 	bl	8007580 <SDMMC_GetCmdResp1>
}
 8007b22:	b007      	add	sp, #28
 8007b24:	bd30      	pop	{r4, r5, pc}
	...

08007b28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8007b2e:	2003      	movs	r0, #3
 8007b30:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b32:	6902      	ldr	r2, [r0, #16]
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	daf8      	bge.n	8007b2a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b38:	6903      	ldr	r3, [r0, #16]
 8007b3a:	4a06      	ldr	r2, [pc, #24]	; (8007b54 <USB_CoreReset+0x2c>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8007b42:	3a01      	subs	r2, #1
 8007b44:	d0f3      	beq.n	8007b2e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b46:	6903      	ldr	r3, [r0, #16]
 8007b48:	f013 0301 	ands.w	r3, r3, #1
 8007b4c:	d1f9      	bne.n	8007b42 <USB_CoreReset+0x1a>

  return HAL_OK;
 8007b4e:	4618      	mov	r0, r3
}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	00030d41 	.word	0x00030d41

08007b58 <USB_CoreInit>:
{
 8007b58:	b084      	sub	sp, #16
 8007b5a:	b538      	push	{r3, r4, r5, lr}
 8007b5c:	ad05      	add	r5, sp, #20
 8007b5e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b64:	2b01      	cmp	r3, #1
{
 8007b66:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b68:	d11b      	bne.n	8007ba2 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b70:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b72:	68c3      	ldr	r3, [r0, #12]
 8007b74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b7e:	68c3      	ldr	r3, [r0, #12]
 8007b80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b84:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8007b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b88:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b8a:	bf02      	ittt	eq
 8007b8c:	68c3      	ldreq	r3, [r0, #12]
 8007b8e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8007b92:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007b94:	f7ff ffc8 	bl	8007b28 <USB_CoreReset>
}
 8007b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	b004      	add	sp, #16
 8007ba0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ba2:	68c3      	ldr	r3, [r0, #12]
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba8:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007baa:	f7ff ffbd 	bl	8007b28 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007bb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8007bb4:	e7f0      	b.n	8007b98 <USB_CoreInit+0x40>

08007bb6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007bb6:	6883      	ldr	r3, [r0, #8]
 8007bb8:	f043 0301 	orr.w	r3, r3, #1
 8007bbc:	6083      	str	r3, [r0, #8]
}
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	4770      	bx	lr

08007bc2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bc2:	6883      	ldr	r3, [r0, #8]
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	6083      	str	r3, [r0, #8]
}
 8007bca:	2000      	movs	r0, #0
 8007bcc:	4770      	bx	lr

08007bce <USB_SetCurrentMode>:
{
 8007bce:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bd0:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007bd2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bd4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007bd8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007bda:	d108      	bne.n	8007bee <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bdc:	68c3      	ldr	r3, [r0, #12]
 8007bde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007be2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8007be4:	2032      	movs	r0, #50	; 0x32
 8007be6:	f7f9 fa21 	bl	800102c <HAL_Delay>
  return HAL_OK;
 8007bea:	2000      	movs	r0, #0
 8007bec:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8007bee:	b919      	cbnz	r1, 8007bf8 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bf0:	68c3      	ldr	r3, [r0, #12]
 8007bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bf6:	e7f4      	b.n	8007be2 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8007bf8:	2001      	movs	r0, #1
}
 8007bfa:	bd08      	pop	{r3, pc}

08007bfc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bfc:	0189      	lsls	r1, r1, #6
 8007bfe:	f041 0120 	orr.w	r1, r1, #32
 8007c02:	4a06      	ldr	r2, [pc, #24]	; (8007c1c <USB_FlushTxFifo+0x20>)
 8007c04:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8007c06:	3a01      	subs	r2, #1
 8007c08:	d005      	beq.n	8007c16 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c0a:	6903      	ldr	r3, [r0, #16]
 8007c0c:	f013 0320 	ands.w	r3, r3, #32
 8007c10:	d1f9      	bne.n	8007c06 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8007c12:	4618      	mov	r0, r3
 8007c14:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007c16:	2003      	movs	r0, #3
}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	00030d41 	.word	0x00030d41

08007c20 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c20:	2310      	movs	r3, #16
 8007c22:	4a06      	ldr	r2, [pc, #24]	; (8007c3c <USB_FlushRxFifo+0x1c>)
 8007c24:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8007c26:	3a01      	subs	r2, #1
 8007c28:	d005      	beq.n	8007c36 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c2a:	6903      	ldr	r3, [r0, #16]
 8007c2c:	f013 0310 	ands.w	r3, r3, #16
 8007c30:	d1f9      	bne.n	8007c26 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8007c32:	4618      	mov	r0, r3
 8007c34:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007c36:	2003      	movs	r0, #3
}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	00030d41 	.word	0x00030d41

08007c40 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007c40:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c44:	4319      	orrs	r1, r3
 8007c46:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	4770      	bx	lr
	...

08007c50 <USB_DevInit>:
{
 8007c50:	b084      	sub	sp, #16
 8007c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c56:	4604      	mov	r4, r0
 8007c58:	a807      	add	r0, sp, #28
 8007c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007c62:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8007c64:	4619      	mov	r1, r3
 8007c66:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007c6a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8007c6e:	3301      	adds	r3, #1
 8007c70:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8007c72:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007c74:	d1f7      	bne.n	8007c66 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c7c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8007c7e:	b95f      	cbnz	r7, 8007c98 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c86:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c96:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8007c98:	2500      	movs	r5, #0
 8007c9a:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c9e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8007ca2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ca6:	2103      	movs	r1, #3
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f7ff ffc9 	bl	8007c40 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007cae:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007cb2:	2110      	movs	r1, #16
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f7ff ffa1 	bl	8007bfc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f7ff ffb0 	bl	8007c20 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8007cc0:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc2:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8007cc4:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cc6:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8007cc8:	61f5      	str	r5, [r6, #28]
 8007cca:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cd2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cd6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cda:	4543      	cmp	r3, r8
 8007cdc:	d12f      	bne.n	8007d3e <USB_DevInit+0xee>
 8007cde:	2100      	movs	r1, #0
 8007ce0:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ce4:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ce6:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cea:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cee:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cf2:	428b      	cmp	r3, r1
 8007cf4:	d134      	bne.n	8007d60 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cf6:	6933      	ldr	r3, [r6, #16]
 8007cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cfc:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d02:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8007d06:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d08:	69a3      	ldr	r3, [r4, #24]
 8007d0a:	f043 0310 	orr.w	r3, r3, #16
 8007d0e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d10:	69a2      	ldr	r2, [r4, #24]
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <USB_DevInit+0x134>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8007d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1a:	b11b      	cbz	r3, 8007d24 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d1c:	69a3      	ldr	r3, [r4, #24]
 8007d1e:	f043 0308 	orr.w	r3, r3, #8
 8007d22:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007d24:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d26:	bf01      	itttt	eq
 8007d28:	69a3      	ldreq	r3, [r4, #24]
 8007d2a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007d2e:	f043 0304 	orreq.w	r3, r3, #4
 8007d32:	61a3      	streq	r3, [r4, #24]
}
 8007d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d38:	2000      	movs	r0, #0
 8007d3a:	b004      	add	sp, #16
 8007d3c:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d3e:	f8d2 c000 	ldr.w	ip, [r2]
 8007d42:	f1bc 0f00 	cmp.w	ip, #0
 8007d46:	da09      	bge.n	8007d5c <USB_DevInit+0x10c>
      if (i == 0U)
 8007d48:	b933      	cbnz	r3, 8007d58 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d4a:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d4c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d4e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d50:	f8c2 e008 	str.w	lr, [r2, #8]
 8007d54:	3220      	adds	r2, #32
 8007d56:	e7c0      	b.n	8007cda <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d58:	6010      	str	r0, [r2, #0]
 8007d5a:	e7f7      	b.n	8007d4c <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d5c:	6011      	str	r1, [r2, #0]
 8007d5e:	e7f5      	b.n	8007d4c <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d60:	f8d2 8000 	ldr.w	r8, [r2]
 8007d64:	f1b8 0f00 	cmp.w	r8, #0
 8007d68:	da0a      	bge.n	8007d80 <USB_DevInit+0x130>
      if (i == 0U)
 8007d6a:	b939      	cbnz	r1, 8007d7c <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d6c:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d70:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d72:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d74:	f8c2 c008 	str.w	ip, [r2, #8]
 8007d78:	3220      	adds	r2, #32
 8007d7a:	e7ba      	b.n	8007cf2 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d7c:	6015      	str	r5, [r2, #0]
 8007d7e:	e7f7      	b.n	8007d70 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d80:	6010      	str	r0, [r2, #0]
 8007d82:	e7f5      	b.n	8007d70 <USB_DevInit+0x120>
 8007d84:	803c3800 	.word	0x803c3800

08007d88 <USB_ActivateEndpoint>:
{
 8007d88:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007d8a:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007d8c:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007d8e:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8007d92:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007d96:	2a01      	cmp	r2, #1
 8007d98:	f004 050f 	and.w	r5, r4, #15
 8007d9c:	d11b      	bne.n	8007dd6 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007d9e:	40aa      	lsls	r2, r5
 8007da0:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007da2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007da6:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007da8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007dac:	041a      	lsls	r2, r3, #16
 8007dae:	d410      	bmi.n	8007dd2 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007db0:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007db2:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007db4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007dc8:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007dda:	40aa      	lsls	r2, r5
 8007ddc:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dde:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007de2:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007de4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	d4f2      	bmi.n	8007dd2 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dec:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8007dee:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007df0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e00:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007e0a:	e7e2      	b.n	8007dd2 <USB_ActivateEndpoint+0x4a>

08007e0c <USB_DeactivateEndpoint>:
{
 8007e0c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8007e0e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007e10:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007e12:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8007e16:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	f004 050f 	and.w	r5, r4, #15
 8007e20:	d110      	bne.n	8007e44 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007e22:	40ab      	lsls	r3, r5
 8007e24:	43db      	mvns	r3, r3
 8007e26:	4019      	ands	r1, r3
 8007e28:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007e2a:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e2c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007e30:	400b      	ands	r3, r1
 8007e32:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e34:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <USB_DeactivateEndpoint+0x5c>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007e40:	2000      	movs	r0, #0
 8007e42:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e48:	40ab      	lsls	r3, r5
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	4019      	ands	r1, r3
 8007e4e:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007e50:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e52:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007e56:	400b      	ands	r3, r1
 8007e58:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e5a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <USB_DeactivateEndpoint+0x60>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007e66:	e7eb      	b.n	8007e40 <USB_DeactivateEndpoint+0x34>
 8007e68:	ec337800 	.word	0xec337800
 8007e6c:	eff37800 	.word	0xeff37800

08007e70 <USB_EP0StartXfer>:
{
 8007e70:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007e72:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007e74:	780a      	ldrb	r2, [r1, #0]
 8007e76:	694d      	ldr	r5, [r1, #20]
 8007e78:	4e35      	ldr	r6, [pc, #212]	; (8007f50 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	f04f 0320 	mov.w	r3, #32
 8007e80:	d145      	bne.n	8007f0e <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e82:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8007e86:	bb45      	cbnz	r5, 8007eda <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e88:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007e8c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007e90:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007e94:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e98:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007e9c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007ea0:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ea4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007ea8:	4026      	ands	r6, r4
 8007eaa:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8007eae:	694b      	ldr	r3, [r1, #20]
 8007eb0:	b14b      	cbz	r3, 8007ec6 <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007eb2:	780b      	ldrb	r3, [r1, #0]
 8007eb4:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8007eb8:	f003 010f 	and.w	r1, r3, #15
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	408b      	lsls	r3, r1
 8007ec0:	432b      	orrs	r3, r5
 8007ec2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ec6:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007eca:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007ece:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8007ed2:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ede:	691c      	ldr	r4, [r3, #16]
 8007ee0:	4026      	ands	r6, r4
 8007ee2:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ee4:	691c      	ldr	r4, [r3, #16]
 8007ee6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007eea:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007eee:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007ef0:	688c      	ldr	r4, [r1, #8]
 8007ef2:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007ef4:	bf88      	it	hi
 8007ef6:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ef8:	691c      	ldr	r4, [r3, #16]
 8007efa:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007efe:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f00:	694c      	ldr	r4, [r1, #20]
 8007f02:	691d      	ldr	r5, [r3, #16]
 8007f04:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007f08:	432c      	orrs	r4, r5
 8007f0a:	611c      	str	r4, [r3, #16]
 8007f0c:	e7cf      	b.n	8007eae <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f0e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007f12:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	4032      	ands	r2, r6
 8007f1a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f1c:	691a      	ldr	r2, [r3, #16]
 8007f1e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007f22:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007f26:	611a      	str	r2, [r3, #16]
 8007f28:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8007f2a:	b105      	cbz	r5, 8007f2e <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8007f2c:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f2e:	6919      	ldr	r1, [r3, #16]
 8007f30:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007f34:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007f36:	6919      	ldr	r1, [r3, #16]
 8007f38:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f40:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f48:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007f4c:	e7c3      	b.n	8007ed6 <USB_EP0StartXfer+0x66>
 8007f4e:	bf00      	nop
 8007f50:	fff80000 	.word	0xfff80000

08007f54 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8007f54:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007f56:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8007f5a:	f023 0303 	bic.w	r3, r3, #3
 8007f5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f62:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8007f64:	4299      	cmp	r1, r3
 8007f66:	d101      	bne.n	8007f6c <USB_WritePacket+0x18>
}
 8007f68:	2000      	movs	r0, #0
 8007f6a:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007f6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007f70:	6010      	str	r0, [r2, #0]
 8007f72:	e7f7      	b.n	8007f64 <USB_WritePacket+0x10>

08007f74 <USB_EPStartXfer>:
{
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8007f76:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007f78:	780d      	ldrb	r5, [r1, #0]
 8007f7a:	4e5f      	ldr	r6, [pc, #380]	; (80080f8 <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	f04f 0220 	mov.w	r2, #32
 8007f82:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f84:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8007f88:	d169      	bne.n	800805e <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8007f8a:	bb83      	cbnz	r3, 8007fee <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f8c:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8007f90:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8007f94:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007f98:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007f9c:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f9e:	6922      	ldr	r2, [r4, #16]
 8007fa0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007fa4:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fa6:	6922      	ldr	r2, [r4, #16]
 8007fa8:	4016      	ands	r6, r2
 8007faa:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8007fac:	78ce      	ldrb	r6, [r1, #3]
 8007fae:	2e01      	cmp	r6, #1
 8007fb0:	f000 8094 	beq.w	80080dc <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8007fb4:	b153      	cbz	r3, 8007fcc <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007fb6:	780a      	ldrb	r2, [r1, #0]
 8007fb8:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8007fbc:	f002 040f 	and.w	r4, r2, #15
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	40a2      	lsls	r2, r4
 8007fc4:	ea42 020e 	orr.w	r2, r2, lr
 8007fc8:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fcc:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8007fd0:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fd2:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007fd6:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007fda:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007fde:	d104      	bne.n	8007fea <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007fe0:	780a      	ldrb	r2, [r1, #0]
 8007fe2:	68c9      	ldr	r1, [r1, #12]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f7ff ffb5 	bl	8007f54 <USB_WritePacket>
}
 8007fea:	2000      	movs	r0, #0
 8007fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fee:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007ff2:	4034      	ands	r4, r6
 8007ff4:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ff8:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ffc:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ffe:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8008002:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8008006:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800800a:	199c      	adds	r4, r3, r6
 800800c:	3c01      	subs	r4, #1
 800800e:	fbb4 f6f6 	udiv	r6, r4, r6
 8008012:	4c3a      	ldr	r4, [pc, #232]	; (80080fc <USB_EPStartXfer+0x188>)
 8008014:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8008018:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 800801c:	433c      	orrs	r4, r7
 800801e:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008022:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8008026:	f3c3 0412 	ubfx	r4, r3, #0, #19
 800802a:	4334      	orrs	r4, r6
 800802c:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8008030:	78cc      	ldrb	r4, [r1, #3]
 8008032:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8008038:	d1b8      	bne.n	8007fac <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800803a:	6914      	ldr	r4, [r2, #16]
 800803c:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8008040:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008042:	6914      	ldr	r4, [r2, #16]
 8008044:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8008048:	6114      	str	r4, [r2, #16]
 800804a:	e7af      	b.n	8007fac <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800804c:	fb12 0205 	smlabb	r2, r2, r5, r0
 8008050:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8008054:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008058:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 800805c:	e7b6      	b.n	8007fcc <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800805e:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8008062:	692c      	ldr	r4, [r5, #16]
 8008064:	4034      	ands	r4, r6
 8008066:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008068:	692c      	ldr	r4, [r5, #16]
 800806a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800806e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8008072:	612c      	str	r4, [r5, #16]
 8008074:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8008076:	b9fb      	cbnz	r3, 80080b8 <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008078:	692b      	ldr	r3, [r5, #16]
 800807a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800807e:	431c      	orrs	r4, r3
 8008080:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008082:	692b      	ldr	r3, [r5, #16]
 8008084:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008088:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 800808a:	78cb      	ldrb	r3, [r1, #3]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10c      	bne.n	80080aa <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008090:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8008094:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008098:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800809c:	bf0c      	ite	eq
 800809e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080a2:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80080a6:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080aa:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80080ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080b2:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 80080b6:	e798      	b.n	8007fea <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80080b8:	4e10      	ldr	r6, [pc, #64]	; (80080fc <USB_EPStartXfer+0x188>)
 80080ba:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80080bc:	4423      	add	r3, r4
 80080be:	3b01      	subs	r3, #1
 80080c0:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80080c4:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80080c8:	433e      	orrs	r6, r7
 80080ca:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	692e      	ldr	r6, [r5, #16]
 80080d0:	435c      	muls	r4, r3
 80080d2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80080d6:	4334      	orrs	r4, r6
 80080d8:	612c      	str	r4, [r5, #16]
 80080da:	e7d6      	b.n	800808a <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080dc:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80080e0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80080e4:	f04f 0220 	mov.w	r2, #32
 80080e8:	d0b0      	beq.n	800804c <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ea:	fb12 0205 	smlabb	r2, r2, r5, r0
 80080ee:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 80080f2:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80080f6:	e7af      	b.n	8008058 <USB_EPStartXfer+0xe4>
 80080f8:	fff80000 	.word	0xfff80000
 80080fc:	1ff80000 	.word	0x1ff80000

08008100 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008100:	3203      	adds	r2, #3
 8008102:	f022 0203 	bic.w	r2, r2, #3
 8008106:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8008108:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 800810c:	4291      	cmp	r1, r2
 800810e:	d101      	bne.n	8008114 <USB_ReadPacket+0x14>
}
 8008110:	4608      	mov	r0, r1
 8008112:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8008114:	6803      	ldr	r3, [r0, #0]
 8008116:	f841 3b04 	str.w	r3, [r1], #4
 800811a:	e7f7      	b.n	800810c <USB_ReadPacket+0xc>

0800811c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800811c:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800811e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8008120:	2b01      	cmp	r3, #1
 8008122:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008126:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 800812a:	d112      	bne.n	8008152 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800812c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008130:	2b00      	cmp	r3, #0
 8008132:	db06      	blt.n	8008142 <USB_EPSetStall+0x26>
 8008134:	b12a      	cbz	r2, 8008142 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008136:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800813a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800813e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008142:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008146:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800814a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800814e:	2000      	movs	r0, #0
 8008150:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008152:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8008156:	2b00      	cmp	r3, #0
 8008158:	db06      	blt.n	8008168 <USB_EPSetStall+0x4c>
 800815a:	b12a      	cbz	r2, 8008168 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800815c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8008160:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008164:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008168:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800816c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008170:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8008174:	e7eb      	b.n	800814e <USB_EPSetStall+0x32>

08008176 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8008176:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8008178:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800817a:	2b01      	cmp	r3, #1
 800817c:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008180:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8008184:	d111      	bne.n	80081aa <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008186:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800818a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800818e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008192:	78cb      	ldrb	r3, [r1, #3]
 8008194:	3b02      	subs	r3, #2
 8008196:	2b01      	cmp	r3, #1
 8008198:	d805      	bhi.n	80081a6 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800819a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800819e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081a2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80081a6:	2000      	movs	r0, #0
 80081a8:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80081aa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80081ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081b2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081b6:	78cb      	ldrb	r3, [r1, #3]
 80081b8:	3b02      	subs	r3, #2
 80081ba:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081bc:	bf9e      	ittt	ls
 80081be:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 80081c2:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80081c6:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 80081ca:	e7ec      	b.n	80081a6 <USB_EPClearStall+0x30>

080081cc <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80081d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80081d4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80081dc:	0109      	lsls	r1, r1, #4
 80081de:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80081e2:	4319      	orrs	r1, r3
 80081e4:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80081e8:	2000      	movs	r0, #0
 80081ea:	4770      	bx	lr

080081ec <USB_DevConnect>:
{
 80081ec:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081ee:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80081f2:	f023 0302 	bic.w	r3, r3, #2
 80081f6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80081fa:	2003      	movs	r0, #3
 80081fc:	f7f8 ff16 	bl	800102c <HAL_Delay>
}
 8008200:	2000      	movs	r0, #0
 8008202:	bd08      	pop	{r3, pc}

08008204 <USB_DevDisconnect>:
{
 8008204:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008206:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800820a:	f043 0302 	orr.w	r3, r3, #2
 800820e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8008212:	2003      	movs	r0, #3
 8008214:	f7f8 ff0a 	bl	800102c <HAL_Delay>
}
 8008218:	2000      	movs	r0, #0
 800821a:	bd08      	pop	{r3, pc}

0800821c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800821c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800821e:	6980      	ldr	r0, [r0, #24]
}
 8008220:	4010      	ands	r0, r2
 8008222:	4770      	bx	lr

08008224 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008224:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008228:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800822c:	69c0      	ldr	r0, [r0, #28]
 800822e:	4018      	ands	r0, r3
}
 8008230:	0c00      	lsrs	r0, r0, #16
 8008232:	4770      	bx	lr

08008234 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008234:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008238:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800823c:	69c0      	ldr	r0, [r0, #28]
 800823e:	4018      	ands	r0, r3
}
 8008240:	b280      	uxth	r0, r0
 8008242:	4770      	bx	lr

08008244 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008244:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008248:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800824c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008250:	6940      	ldr	r0, [r0, #20]
}
 8008252:	4010      	ands	r0, r2
 8008254:	4770      	bx	lr

08008256 <USB_ReadDevInEPInterrupt>:
{
 8008256:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8008258:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800825c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008260:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8008264:	f001 010f 	and.w	r1, r1, #15
 8008268:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800826a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 800826e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008270:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8008272:	b2db      	uxtb	r3, r3
 8008274:	4323      	orrs	r3, r4
}
 8008276:	4018      	ands	r0, r3
 8008278:	bd10      	pop	{r4, pc}

0800827a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800827a:	6940      	ldr	r0, [r0, #20]
}
 800827c:	f000 0001 	and.w	r0, r0, #1
 8008280:	4770      	bx	lr

08008282 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008282:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008286:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008292:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	f002 0206 	and.w	r2, r2, #6
 800829c:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800829e:	bf02      	ittt	eq
 80082a0:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80082a4:	f042 0203 	orreq.w	r2, r2, #3
 80082a8:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082b2:	605a      	str	r2, [r3, #4]
}
 80082b4:	2000      	movs	r0, #0
 80082b6:	4770      	bx	lr

080082b8 <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80082b8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80082bc:	2000      	movs	r0, #0
 80082be:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80082c6:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	f042 0218 	orr.w	r2, r2, #24
 80082ce:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80082d6:	611a      	str	r2, [r3, #16]
}
 80082d8:	4770      	bx	lr
	...

080082dc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 80082dc:	2329      	movs	r3, #41	; 0x29
 80082de:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 80082e0:	4800      	ldr	r0, [pc, #0]	; (80082e4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 80082e2:	4770      	bx	lr
 80082e4:	2000005c 	.word	0x2000005c

080082e8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80082e8:	2329      	movs	r3, #41	; 0x29
 80082ea:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 80082ec:	4800      	ldr	r0, [pc, #0]	; (80082f0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 80082ee:	4770      	bx	lr
 80082f0:	20000088 	.word	0x20000088

080082f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80082f4:	2329      	movs	r3, #41	; 0x29
 80082f6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 80082f8:	4800      	ldr	r0, [pc, #0]	; (80082fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 80082fa:	4770      	bx	lr
 80082fc:	200000cc 	.word	0x200000cc

08008300 <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008300:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8008304:	2000      	movs	r0, #0
 8008306:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8008308:	4770      	bx	lr

0800830a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800830a:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800830c:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8008310:	69a3      	ldr	r3, [r4, #24]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d107      	bne.n	8008326 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008316:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800831a:	7861      	ldrb	r1, [r4, #1]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	7820      	ldrb	r0, [r4, #0]
 8008320:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8008326:	2000      	movs	r0, #0
 8008328:	bd10      	pop	{r4, pc}
	...

0800832c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 800832c:	230a      	movs	r3, #10
 800832e:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8008330:	4800      	ldr	r0, [pc, #0]	; (8008334 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8008332:	4770      	bx	lr
 8008334:	200000c0 	.word	0x200000c0

08008338 <USBD_CUSTOM_HID_DataOut>:
{
 8008338:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800833a:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800833e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008342:	7869      	ldrb	r1, [r5, #1]
 8008344:	68db      	ldr	r3, [r3, #12]
{
 8008346:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008348:	7828      	ldrb	r0, [r5, #0]
 800834a:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 800834c:	230c      	movs	r3, #12
 800834e:	462a      	mov	r2, r5
 8008350:	2101      	movs	r1, #1
 8008352:	4620      	mov	r0, r4
 8008354:	f018 f9bc 	bl	80206d0 <USBD_LL_PrepareReceive>
}
 8008358:	2000      	movs	r0, #0
 800835a:	bd38      	pop	{r3, r4, r5, pc}

0800835c <USBD_CUSTOM_HID_Setup>:
{
 800835c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 800835e:	2500      	movs	r5, #0
 8008360:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008364:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008366:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836a:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 800836e:	4603      	mov	r3, r0
 8008370:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008372:	d028      	beq.n	80083c6 <USBD_CUSTOM_HID_Setup+0x6a>
 8008374:	2d20      	cmp	r5, #32
 8008376:	d161      	bne.n	800843c <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8008378:	7849      	ldrb	r1, [r1, #1]
 800837a:	3902      	subs	r1, #2
 800837c:	2909      	cmp	r1, #9
 800837e:	d85b      	bhi.n	8008438 <USBD_CUSTOM_HID_Setup+0xdc>
 8008380:	e8df f001 	tbb	[pc, r1]
 8008384:	5a5a0a15 	.word	0x5a5a0a15
 8008388:	195a5a5a 	.word	0x195a5a5a
 800838c:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 800838e:	7893      	ldrb	r3, [r2, #2]
 8008390:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 8008392:	2000      	movs	r0, #0
}
 8008394:	b003      	add	sp, #12
 8008396:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008398:	2201      	movs	r2, #1
 800839a:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fc18 	bl	8008bd4 <USBD_CtlSendData>
 80083a4:	e7f5      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80083a6:	8853      	ldrh	r3, [r2, #2]
 80083a8:	0a1b      	lsrs	r3, r3, #8
 80083aa:	6123      	str	r3, [r4, #16]
 80083ac:	e7f1      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80083ae:	2201      	movs	r2, #1
 80083b0:	f104 0110 	add.w	r1, r4, #16
 80083b4:	e7f3      	b.n	800839e <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 80083b6:	2101      	movs	r1, #1
 80083b8:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80083ba:	88d2      	ldrh	r2, [r2, #6]
 80083bc:	4621      	mov	r1, r4
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fc1d 	bl	8008bfe <USBD_CtlPrepareRx>
 80083c4:	e7e5      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 80083c6:	7849      	ldrb	r1, [r1, #1]
 80083c8:	290b      	cmp	r1, #11
 80083ca:	d835      	bhi.n	8008438 <USBD_CUSTOM_HID_Setup+0xdc>
 80083cc:	e8df f001 	tbb	[pc, r1]
 80083d0:	34343406 	.word	0x34343406
 80083d4:	340e3434 	.word	0x340e3434
 80083d8:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083dc:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 80083e0:	2903      	cmp	r1, #3
 80083e2:	d129      	bne.n	8008438 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80083e4:	2202      	movs	r2, #2
 80083e6:	f10d 0106 	add.w	r1, sp, #6
 80083ea:	e7d8      	b.n	800839e <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80083ec:	8851      	ldrh	r1, [r2, #2]
 80083ee:	0a09      	lsrs	r1, r1, #8
 80083f0:	2922      	cmp	r1, #34	; 0x22
 80083f2:	d107      	bne.n	8008404 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80083f4:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80083f6:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80083fa:	2a21      	cmp	r2, #33	; 0x21
 80083fc:	bf28      	it	cs
 80083fe:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008400:	6809      	ldr	r1, [r1, #0]
 8008402:	e7cc      	b.n	800839e <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008404:	2921      	cmp	r1, #33	; 0x21
 8008406:	d105      	bne.n	8008414 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008408:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 800840a:	490e      	ldr	r1, [pc, #56]	; (8008444 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 800840c:	2a09      	cmp	r2, #9
 800840e:	bf28      	it	cs
 8008410:	2209      	movcs	r2, #9
 8008412:	e7c4      	b.n	800839e <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8008414:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8008416:	460a      	mov	r2, r1
 8008418:	e7c1      	b.n	800839e <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841a:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 800841e:	2903      	cmp	r1, #3
 8008420:	d10a      	bne.n	8008438 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008422:	2201      	movs	r2, #1
 8008424:	f104 0114 	add.w	r1, r4, #20
 8008428:	e7b9      	b.n	800839e <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842a:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 800842e:	2903      	cmp	r1, #3
 8008430:	d102      	bne.n	8008438 <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8008432:	7893      	ldrb	r3, [r2, #2]
 8008434:	6163      	str	r3, [r4, #20]
 8008436:	e7ac      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 800843c:	f000 fba3 	bl	8008b86 <USBD_CtlError>
    ret = USBD_FAIL;
 8008440:	2002      	movs	r0, #2
    break;
 8008442:	e7a7      	b.n	8008394 <USBD_CUSTOM_HID_Setup+0x38>
 8008444:	200000b4 	.word	0x200000b4

08008448 <USBD_CUSTOM_HID_DeInit>:
{
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800844c:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800844e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008450:	f018 f8e4 	bl	802061c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008454:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008456:	2101      	movs	r1, #1
 8008458:	4620      	mov	r0, r4
 800845a:	f018 f8df 	bl	802061c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800845e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008462:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8008466:	b14b      	cbz	r3, 800847c <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008468:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008470:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8008474:	f018 f970 	bl	8020758 <USBD_static_free>
    pdev->pClassData = NULL;
 8008478:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800847c:	2000      	movs	r0, #0
 800847e:	bd38      	pop	{r3, r4, r5, pc}

08008480 <USBD_CUSTOM_HID_Init>:
{
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008484:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008486:	2340      	movs	r3, #64	; 0x40
 8008488:	2203      	movs	r2, #3
 800848a:	2181      	movs	r1, #129	; 0x81
 800848c:	f018 f8b6 	bl	80205fc <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008490:	230c      	movs	r3, #12
 8008492:	2203      	movs	r2, #3
 8008494:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008496:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008498:	4628      	mov	r0, r5
 800849a:	f018 f8af 	bl	80205fc <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800849e:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80084a2:	2020      	movs	r0, #32
 80084a4:	f018 f954 	bl	8020750 <USBD_static_malloc>
 80084a8:	4606      	mov	r6, r0
 80084aa:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80084ae:	b168      	cbz	r0, 80084cc <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80084b0:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 80084b4:	2700      	movs	r7, #0
 80084b6:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80084bc:	230c      	movs	r3, #12
 80084be:	4632      	mov	r2, r6
 80084c0:	4621      	mov	r1, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f018 f904 	bl	80206d0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80084c8:	4638      	mov	r0, r7
 80084ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 80084cc:	4620      	mov	r0, r4
}
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084d0 <USBD_CUSTOM_HID_SendReport>:
{
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80084d4:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80084d8:	2a03      	cmp	r2, #3
 80084da:	d109      	bne.n	80084f0 <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80084dc:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 80084e0:	7f35      	ldrb	r5, [r6, #28]
 80084e2:	2401      	movs	r4, #1
 80084e4:	b935      	cbnz	r5, 80084f4 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80084e6:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 80084e8:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80084ea:	2181      	movs	r1, #129	; 0x81
 80084ec:	f018 f8e2 	bl	80206b4 <USBD_LL_Transmit>
  return USBD_OK;
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 80084f4:	4620      	mov	r0, r4
}
 80084f6:	bd70      	pop	{r4, r5, r6, pc}

080084f8 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80084f8:	b119      	cbz	r1, 8008502 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80084fa:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80084fe:	2000      	movs	r0, #0
 8008500:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008502:	2002      	movs	r0, #2
  }

  return ret;
}
 8008504:	4770      	bx	lr

08008506 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008506:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008508:	b180      	cbz	r0, 800852c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800850a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800850e:	b113      	cbz	r3, 8008516 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008516:	b109      	cbz	r1, 800851c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008518:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800851c:	2301      	movs	r3, #1
 800851e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8008522:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008524:	f018 f828 	bl	8020578 <USBD_LL_Init>

  return USBD_OK;
 8008528:	2000      	movs	r0, #0
 800852a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800852c:	2002      	movs	r0, #2
}
 800852e:	bd08      	pop	{r3, pc}

08008530 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8008530:	b119      	cbz	r1, 800853a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008532:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8008536:	2000      	movs	r0, #0
 8008538:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800853a:	2002      	movs	r0, #2
  }

  return status;
}
 800853c:	4770      	bx	lr

0800853e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800853e:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008540:	f018 f84e 	bl	80205e0 <USBD_LL_Start>

  return USBD_OK;
}
 8008544:	2000      	movs	r0, #0
 8008546:	bd08      	pop	{r3, pc}

08008548 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008548:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800854a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800854e:	b90b      	cbnz	r3, 8008554 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008550:	2002      	movs	r0, #2
 8008552:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4798      	blx	r3
 8008558:	2800      	cmp	r0, #0
 800855a:	d1f9      	bne.n	8008550 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800855c:	bd08      	pop	{r3, pc}

0800855e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800855e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008560:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	4798      	blx	r3
  return USBD_OK;
}
 8008568:	2000      	movs	r0, #0
 800856a:	bd08      	pop	{r3, pc}

0800856c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008570:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8008574:	4628      	mov	r0, r5
 8008576:	f000 faf2 	bl	8008b5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800857a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800857c:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8008580:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8008584:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8008588:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 800858c:	f001 031f 	and.w	r3, r1, #31
 8008590:	2b01      	cmp	r3, #1
 8008592:	d00e      	beq.n	80085b2 <USBD_LL_SetupStage+0x46>
 8008594:	d307      	bcc.n	80085a6 <USBD_LL_SetupStage+0x3a>
 8008596:	2b02      	cmp	r3, #2
 8008598:	d010      	beq.n	80085bc <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800859a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800859e:	4620      	mov	r0, r4
 80085a0:	f018 f84a 	bl	8020638 <USBD_LL_StallEP>
    break;
 80085a4:	e003      	b.n	80085ae <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80085a6:	4629      	mov	r1, r5
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 f901 	bl	80087b0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80085ae:	2000      	movs	r0, #0
 80085b0:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80085b2:	4629      	mov	r1, r5
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fa25 	bl	8008a04 <USBD_StdItfReq>
    break;
 80085ba:	e7f8      	b.n	80085ae <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 80085bc:	4629      	mov	r1, r5
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fa45 	bl	8008a4e <USBD_StdEPReq>
    break;
 80085c4:	e7f3      	b.n	80085ae <USBD_LL_SetupStage+0x42>

080085c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085c6:	b570      	push	{r4, r5, r6, lr}
 80085c8:	4605      	mov	r5, r0
 80085ca:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80085cc:	bb39      	cbnz	r1, 800861e <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085ce:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d11e      	bne.n	8008614 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 80085d6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80085da:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80085de:	4293      	cmp	r3, r2
 80085e0:	d90b      	bls.n	80085fa <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80085e2:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80085e4:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80085e6:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80085ea:	bf8c      	ite	hi
 80085ec:	b29a      	uxthhi	r2, r3
 80085ee:	b292      	uxthls	r2, r2
 80085f0:	4631      	mov	r1, r6
 80085f2:	f000 fb13 	bl	8008c1c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80085f6:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80085fa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	b123      	cbz	r3, 800860c <USBD_LL_DataOutStage+0x46>
 8008602:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008606:	2a03      	cmp	r2, #3
 8008608:	d100      	bne.n	800860c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800860a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800860c:	4628      	mov	r0, r5
 800860e:	f000 fb0d 	bl	8008c2c <USBD_CtlSendStatus>
 8008612:	e7f0      	b.n	80085f6 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008614:	2b05      	cmp	r3, #5
 8008616:	d1ee      	bne.n	80085f6 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8008618:	f018 f80e 	bl	8020638 <USBD_LL_StallEP>
 800861c:	e7eb      	b.n	80085f6 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 800861e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	b12b      	cbz	r3, 8008632 <USBD_LL_DataOutStage+0x6c>
 8008626:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800862a:	2a03      	cmp	r2, #3
 800862c:	d101      	bne.n	8008632 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 800862e:	4798      	blx	r3
 8008630:	e7e1      	b.n	80085f6 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8008632:	2002      	movs	r0, #2
}
 8008634:	bd70      	pop	{r4, r5, r6, pc}

08008636 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008636:	b570      	push	{r4, r5, r6, lr}
 8008638:	4613      	mov	r3, r2
 800863a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800863c:	460e      	mov	r6, r1
 800863e:	2900      	cmp	r1, #0
 8008640:	d148      	bne.n	80086d4 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008642:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8008646:	2a02      	cmp	r2, #2
 8008648:	d13d      	bne.n	80086c6 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800864a:	6a05      	ldr	r5, [r0, #32]
 800864c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800864e:	4295      	cmp	r5, r2
 8008650:	d914      	bls.n	800867c <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8008652:	1aaa      	subs	r2, r5, r2
 8008654:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008656:	4619      	mov	r1, r3
 8008658:	b292      	uxth	r2, r2
 800865a:	f000 fac8 	bl	8008bee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800865e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008660:	461a      	mov	r2, r3
 8008662:	4619      	mov	r1, r3
 8008664:	4620      	mov	r0, r4
 8008666:	f018 f833 	bl	80206d0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800866a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800866e:	2b01      	cmp	r3, #1
 8008670:	f04f 0000 	mov.w	r0, #0
 8008674:	d13a      	bne.n	80086ec <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008676:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 800867a:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 800867c:	69c3      	ldr	r3, [r0, #28]
 800867e:	fbb3 f5f2 	udiv	r5, r3, r2
 8008682:	fb02 3515 	mls	r5, r2, r5, r3
 8008686:	b965      	cbnz	r5, 80086a2 <USBD_LL_DataInStage+0x6c>
 8008688:	429a      	cmp	r2, r3
 800868a:	d80a      	bhi.n	80086a2 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800868c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8008690:	4293      	cmp	r3, r2
 8008692:	d206      	bcs.n	80086a2 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008694:	462a      	mov	r2, r5
 8008696:	f000 faaa 	bl	8008bee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800869a:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800869e:	462b      	mov	r3, r5
 80086a0:	e7de      	b.n	8008660 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80086a2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	b12b      	cbz	r3, 80086b6 <USBD_LL_DataInStage+0x80>
 80086aa:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80086ae:	2a03      	cmp	r2, #3
 80086b0:	d101      	bne.n	80086b6 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 80086b2:	4620      	mov	r0, r4
 80086b4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80086b6:	2180      	movs	r1, #128	; 0x80
 80086b8:	4620      	mov	r0, r4
 80086ba:	f017 ffbd 	bl	8020638 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 fabf 	bl	8008c42 <USBD_CtlReceiveStatus>
 80086c4:	e7d1      	b.n	800866a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086c6:	f032 0304 	bics.w	r3, r2, #4
 80086ca:	d1ce      	bne.n	800866a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80086cc:	2180      	movs	r1, #128	; 0x80
 80086ce:	f017 ffb3 	bl	8020638 <USBD_LL_StallEP>
 80086d2:	e7ca      	b.n	800866a <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80086d4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	b133      	cbz	r3, 80086ea <USBD_LL_DataInStage+0xb4>
 80086dc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80086e0:	2a03      	cmp	r2, #3
 80086e2:	d102      	bne.n	80086ea <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80086e4:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80086e6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80086ea:	2002      	movs	r0, #2
}
 80086ec:	bd70      	pop	{r4, r5, r6, pc}

080086ee <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80086ee:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f0:	2200      	movs	r2, #0
{
 80086f2:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f4:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086f6:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086f8:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086fa:	2340      	movs	r3, #64	; 0x40
 80086fc:	f017 ff7e 	bl	80205fc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008700:	4633      	mov	r3, r6
 8008702:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008704:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008708:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800870c:	2200      	movs	r2, #0
 800870e:	4620      	mov	r0, r4
 8008710:	f017 ff74 	bl	80205fc <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008714:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008718:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800871a:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800871c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800871e:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008722:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008726:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008728:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800872c:	b123      	cbz	r3, 8008738 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800872e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008732:	4620      	mov	r0, r4
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008738:	2000      	movs	r0, #0
 800873a:	bd70      	pop	{r4, r5, r6, pc}

0800873c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800873c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800873e:	2000      	movs	r0, #0
 8008740:	4770      	bx	lr

08008742 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008742:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008746:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800874a:	2304      	movs	r3, #4
 800874c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8008750:	2000      	movs	r0, #0
 8008752:	4770      	bx	lr

08008754 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8008754:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8008758:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800875c:	2000      	movs	r0, #0
 800875e:	4770      	bx	lr

08008760 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008760:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008762:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008766:	2a03      	cmp	r2, #3
 8008768:	d104      	bne.n	8008774 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800876a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	b103      	cbz	r3, 8008774 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008772:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008774:	2000      	movs	r0, #0
 8008776:	bd08      	pop	{r3, pc}

08008778 <USBD_LL_IsoINIncomplete>:
 8008778:	2000      	movs	r0, #0
 800877a:	4770      	bx	lr

0800877c <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800877c:	2000      	movs	r0, #0
 800877e:	4770      	bx	lr

08008780 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8008780:	2000      	movs	r0, #0
 8008782:	4770      	bx	lr

08008784 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008784:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008786:	2201      	movs	r2, #1
 8008788:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800878c:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8008790:	7901      	ldrb	r1, [r0, #4]
 8008792:	6852      	ldr	r2, [r2, #4]
 8008794:	4790      	blx	r2

  return USBD_OK;
}
 8008796:	2000      	movs	r0, #0
 8008798:	bd08      	pop	{r3, pc}

0800879a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800879a:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800879c:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800879e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80087a0:	f017 ff4a 	bl	8020638 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80087a4:	4620      	mov	r0, r4
 80087a6:	2100      	movs	r1, #0
}
 80087a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80087ac:	f017 bf44 	b.w	8020638 <USBD_LL_StallEP>

080087b0 <USBD_StdDevReq>:
{
 80087b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087b2:	780b      	ldrb	r3, [r1, #0]
 80087b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087b8:	2b20      	cmp	r3, #32
{
 80087ba:	4604      	mov	r4, r0
 80087bc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087be:	d014      	beq.n	80087ea <USBD_StdDevReq+0x3a>
 80087c0:	2b40      	cmp	r3, #64	; 0x40
 80087c2:	d012      	beq.n	80087ea <USBD_StdDevReq+0x3a>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 809c 	bne.w	8008902 <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 80087ca:	784b      	ldrb	r3, [r1, #1]
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	f200 8097 	bhi.w	8008900 <USBD_StdDevReq+0x150>
 80087d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80087d6:	00ef      	.short	0x00ef
 80087d8:	00950109 	.word	0x00950109
 80087dc:	00950102 	.word	0x00950102
 80087e0:	00130089 	.word	0x00130089
 80087e4:	00da0095 	.word	0x00da0095
 80087e8:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 80087ea:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80087ee:	4629      	mov	r1, r5
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	4620      	mov	r0, r4
 80087f4:	4798      	blx	r3
}
 80087f6:	2000      	movs	r0, #0
 80087f8:	b003      	add	sp, #12
 80087fa:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80087fc:	8849      	ldrh	r1, [r1, #2]
 80087fe:	0a0b      	lsrs	r3, r1, #8
 8008800:	3b01      	subs	r3, #1
 8008802:	2b0e      	cmp	r3, #14
 8008804:	d87c      	bhi.n	8008900 <USBD_StdDevReq+0x150>
 8008806:	e8df f003 	tbb	[pc, r3]
 800880a:	2824      	.short	0x2824
 800880c:	5c7b7b35 	.word	0x5c7b7b35
 8008810:	7b7b7b65 	.word	0x7b7b7b65
 8008814:	7b7b7b7b 	.word	0x7b7b7b7b
 8008818:	08          	.byte	0x08
 8008819:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800881a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800881e:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008820:	7c20      	ldrb	r0, [r4, #16]
 8008822:	f10d 0106 	add.w	r1, sp, #6
 8008826:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8008828:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800882c:	b152      	cbz	r2, 8008844 <USBD_StdDevReq+0x94>
 800882e:	88eb      	ldrh	r3, [r5, #6]
 8008830:	b143      	cbz	r3, 8008844 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8008832:	429a      	cmp	r2, r3
 8008834:	bf28      	it	cs
 8008836:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8008838:	4601      	mov	r1, r0
 800883a:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800883c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8008840:	f000 f9c8 	bl	8008bd4 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8008844:	88eb      	ldrh	r3, [r5, #6]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1d5      	bne.n	80087f6 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 800884a:	4620      	mov	r0, r4
 800884c:	f000 f9ee 	bl	8008c2c <USBD_CtlSendStatus>
 8008850:	e7d1      	b.n	80087f6 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008852:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	e7e2      	b.n	8008820 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800885a:	7c02      	ldrb	r2, [r0, #16]
 800885c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008860:	b932      	cbnz	r2, 8008870 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008864:	f10d 0006 	add.w	r0, sp, #6
 8008868:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800886a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800886c:	7043      	strb	r3, [r0, #1]
 800886e:	e7db      	b.n	8008828 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	e7f7      	b.n	8008864 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8008874:	b2c9      	uxtb	r1, r1
 8008876:	2905      	cmp	r1, #5
 8008878:	d81c      	bhi.n	80088b4 <USBD_StdDevReq+0x104>
 800887a:	e8df f001 	tbb	[pc, r1]
 800887e:	0703      	.short	0x0703
 8008880:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008884:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	e7c9      	b.n	8008820 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800888c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	e7c5      	b.n	8008820 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008894:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	e7c1      	b.n	8008820 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800889c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	e7bd      	b.n	8008820 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088a4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	e7b9      	b.n	8008820 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088ac:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	e7b5      	b.n	8008820 <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 80088b4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80088b8:	f10d 0206 	add.w	r2, sp, #6
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	4798      	blx	r3
 80088c0:	e7b2      	b.n	8008828 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80088c2:	7c03      	ldrb	r3, [r0, #16]
 80088c4:	b9e3      	cbnz	r3, 8008900 <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088c6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80088ca:	f10d 0006 	add.w	r0, sp, #6
 80088ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d0:	4798      	blx	r3
 80088d2:	e7a9      	b.n	8008828 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80088d4:	7c03      	ldrb	r3, [r0, #16]
 80088d6:	b99b      	cbnz	r3, 8008900 <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088d8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80088dc:	f10d 0006 	add.w	r0, sp, #6
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088e4:	2307      	movs	r3, #7
 80088e6:	e7c1      	b.n	800886c <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088e8:	888b      	ldrh	r3, [r1, #4]
 80088ea:	b94b      	cbnz	r3, 8008900 <USBD_StdDevReq+0x150>
 80088ec:	88cb      	ldrh	r3, [r1, #6]
 80088ee:	b93b      	cbnz	r3, 8008900 <USBD_StdDevReq+0x150>
 80088f0:	884d      	ldrh	r5, [r1, #2]
 80088f2:	2d7f      	cmp	r5, #127	; 0x7f
 80088f4:	d804      	bhi.n	8008900 <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80088fa:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088fc:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fe:	d103      	bne.n	8008908 <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 8008900:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008902:	f7ff ff4a 	bl	800879a <USBD_CtlError.constprop.1>
    break;
 8008906:	e776      	b.n	80087f6 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8008908:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800890c:	f017 fec4 	bl	8020698 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008910:	4620      	mov	r0, r4
 8008912:	f000 f98b 	bl	8008c2c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008916:	b11d      	cbz	r5, 8008920 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008918:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800891a:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800891e:	e76a      	b.n	80087f6 <USBD_StdDevReq+0x46>
 8008920:	2301      	movs	r3, #1
 8008922:	e7fa      	b.n	800891a <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 8008924:	7889      	ldrb	r1, [r1, #2]
 8008926:	4d36      	ldr	r5, [pc, #216]	; (8008a00 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008928:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800892a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800892c:	d8e8      	bhi.n	8008900 <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 800892e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008932:	2b02      	cmp	r3, #2
 8008934:	d008      	beq.n	8008948 <USBD_StdDevReq+0x198>
 8008936:	2b03      	cmp	r3, #3
 8008938:	d015      	beq.n	8008966 <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 800893a:	f7ff ff2e 	bl	800879a <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800893e:	7829      	ldrb	r1, [r5, #0]
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff fe0c 	bl	800855e <USBD_ClrClassConfig>
 8008946:	e756      	b.n	80087f6 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8008948:	2900      	cmp	r1, #0
 800894a:	f43f af7e 	beq.w	800884a <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 800894e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008950:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8008952:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008954:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008958:	4620      	mov	r0, r4
 800895a:	f7ff fdf5 	bl	8008548 <USBD_SetClassConfig>
 800895e:	2802      	cmp	r0, #2
 8008960:	f47f af73 	bne.w	800884a <USBD_StdDevReq+0x9a>
 8008964:	e7cc      	b.n	8008900 <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 8008966:	b931      	cbnz	r1, 8008976 <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008968:	2302      	movs	r3, #2
 800896a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800896e:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008970:	f7ff fdf5 	bl	800855e <USBD_ClrClassConfig>
 8008974:	e769      	b.n	800884a <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8008976:	6841      	ldr	r1, [r0, #4]
 8008978:	2901      	cmp	r1, #1
 800897a:	f43f af66 	beq.w	800884a <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800897e:	b2c9      	uxtb	r1, r1
 8008980:	f7ff fded 	bl	800855e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008984:	7829      	ldrb	r1, [r5, #0]
 8008986:	6061      	str	r1, [r4, #4]
 8008988:	e7e6      	b.n	8008958 <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 800898a:	88ca      	ldrh	r2, [r1, #6]
 800898c:	2a01      	cmp	r2, #1
 800898e:	d1b7      	bne.n	8008900 <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 8008990:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0b3      	beq.n	8008900 <USBD_StdDevReq+0x150>
 8008998:	2b02      	cmp	r3, #2
 800899a:	d903      	bls.n	80089a4 <USBD_StdDevReq+0x1f4>
 800899c:	2b03      	cmp	r3, #3
 800899e:	d1af      	bne.n	8008900 <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089a0:	1d01      	adds	r1, r0, #4
 80089a2:	e003      	b.n	80089ac <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 80089a4:	4601      	mov	r1, r0
 80089a6:	2300      	movs	r3, #0
 80089a8:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 f911 	bl	8008bd4 <USBD_CtlSendData>
 80089b2:	e720      	b.n	80087f6 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 80089b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80089b8:	3b01      	subs	r3, #1
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d8a0      	bhi.n	8008900 <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 80089be:	88cb      	ldrh	r3, [r1, #6]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d19d      	bne.n	8008900 <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089c4:	2301      	movs	r3, #1
 80089c6:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80089c8:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 80089cc:	b10b      	cbz	r3, 80089d2 <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089ce:	2303      	movs	r3, #3
 80089d0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80089d2:	2202      	movs	r2, #2
 80089d4:	f104 010c 	add.w	r1, r4, #12
 80089d8:	e7e8      	b.n	80089ac <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089da:	884b      	ldrh	r3, [r1, #2]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	f47f af0a 	bne.w	80087f6 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 80089e2:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80089e6:	e730      	b.n	800884a <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80089e8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80089ec:	3b01      	subs	r3, #1
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d886      	bhi.n	8008900 <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089f2:	884b      	ldrh	r3, [r1, #2]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	f47f aefe 	bne.w	80087f6 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e7f1      	b.n	80089e2 <USBD_StdDevReq+0x232>
 80089fe:	bf00      	nop
 8008a00:	200015e4 	.word	0x200015e4

08008a04 <USBD_StdItfReq>:
{
 8008a04:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a06:	780b      	ldrb	r3, [r1, #0]
 8008a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a0c:	2b20      	cmp	r3, #32
{
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a12:	d002      	beq.n	8008a1a <USBD_StdItfReq+0x16>
 8008a14:	2b40      	cmp	r3, #64	; 0x40
 8008a16:	d000      	beq.n	8008a1a <USBD_StdItfReq+0x16>
 8008a18:	b9b3      	cbnz	r3, 8008a48 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8008a1a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d810      	bhi.n	8008a46 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a24:	792b      	ldrb	r3, [r5, #4]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d80d      	bhi.n	8008a46 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008a2a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008a2e:	4629      	mov	r1, r5
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	4620      	mov	r0, r4
 8008a34:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a36:	88eb      	ldrh	r3, [r5, #6]
 8008a38:	b91b      	cbnz	r3, 8008a42 <USBD_StdItfReq+0x3e>
 8008a3a:	b910      	cbnz	r0, 8008a42 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 f8f5 	bl	8008c2c <USBD_CtlSendStatus>
}
 8008a42:	2000      	movs	r0, #0
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8008a46:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008a48:	f7ff fea7 	bl	800879a <USBD_CtlError.constprop.1>
    break;
 8008a4c:	e7f9      	b.n	8008a42 <USBD_StdItfReq+0x3e>

08008a4e <USBD_StdEPReq>:
{
 8008a4e:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a50:	780a      	ldrb	r2, [r1, #0]
 8008a52:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008a56:	2a20      	cmp	r2, #32
{
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a5c:	d013      	beq.n	8008a86 <USBD_StdEPReq+0x38>
 8008a5e:	2a40      	cmp	r2, #64	; 0x40
 8008a60:	d011      	beq.n	8008a86 <USBD_StdEPReq+0x38>
 8008a62:	b96a      	cbnz	r2, 8008a80 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8008a64:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008a66:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8008a68:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8008a6a:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8008a6c:	d01f      	beq.n	8008aae <USBD_StdEPReq+0x60>
 8008a6e:	d335      	bcc.n	8008adc <USBD_StdEPReq+0x8e>
 8008a70:	2d03      	cmp	r5, #3
 8008a72:	d105      	bne.n	8008a80 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8008a74:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008a78:	2a02      	cmp	r2, #2
 8008a7a:	d026      	beq.n	8008aca <USBD_StdEPReq+0x7c>
 8008a7c:	2a03      	cmp	r2, #3
 8008a7e:	d00a      	beq.n	8008a96 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8008a80:	f7ff fe8b 	bl	800879a <USBD_CtlError.constprop.1>
    break;
 8008a84:	e005      	b.n	8008a92 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8008a86:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6892      	ldr	r2, [r2, #8]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4790      	blx	r2
}
 8008a92:	2000      	movs	r0, #0
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a96:	885a      	ldrh	r2, [r3, #2]
 8008a98:	b92a      	cbnz	r2, 8008aa6 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a9a:	064a      	lsls	r2, r1, #25
 8008a9c:	d003      	beq.n	8008aa6 <USBD_StdEPReq+0x58>
 8008a9e:	88db      	ldrh	r3, [r3, #6]
 8008aa0:	b90b      	cbnz	r3, 8008aa6 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8008aa2:	f017 fdc9 	bl	8020638 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 f8c0 	bl	8008c2c <USBD_CtlSendStatus>
        break;
 8008aac:	e7f1      	b.n	8008a92 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8008aae:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008ab2:	2a02      	cmp	r2, #2
 8008ab4:	d009      	beq.n	8008aca <USBD_StdEPReq+0x7c>
 8008ab6:	2a03      	cmp	r2, #3
 8008ab8:	d1e2      	bne.n	8008a80 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008aba:	885b      	ldrh	r3, [r3, #2]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e8      	bne.n	8008a92 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8008ac0:	064d      	lsls	r5, r1, #25
 8008ac2:	d0f0      	beq.n	8008aa6 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ac4:	f017 fdc6 	bl	8020654 <USBD_LL_ClearStallEP>
 8008ac8:	e7ed      	b.n	8008aa6 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aca:	064b      	lsls	r3, r1, #25
 8008acc:	d017      	beq.n	8008afe <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8008ace:	f017 fdb3 	bl	8020638 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008ad2:	2180      	movs	r1, #128	; 0x80
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f017 fdaf 	bl	8020638 <USBD_LL_StallEP>
 8008ada:	e7da      	b.n	8008a92 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8008adc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d00e      	beq.n	8008b02 <USBD_StdEPReq+0xb4>
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d1cb      	bne.n	8008a80 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8008ae8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008aec:	f04f 0314 	mov.w	r3, #20
 8008af0:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008af4:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8008af8:	d012      	beq.n	8008b20 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008afa:	6992      	ldr	r2, [r2, #24]
 8008afc:	b9da      	cbnz	r2, 8008b36 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8008afe:	4620      	mov	r0, r4
 8008b00:	e7be      	b.n	8008a80 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b02:	0649      	lsls	r1, r1, #25
 8008b04:	d1fb      	bne.n	8008afe <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008b06:	0613      	lsls	r3, r2, #24
 8008b08:	bf4c      	ite	mi
 8008b0a:	f100 0114 	addmi.w	r1, r0, #20
 8008b0e:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b16:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 f85b 	bl	8008bd4 <USBD_CtlSendData>
          break;
 8008b1e:	e7b8      	b.n	8008a92 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b20:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	d0ea      	beq.n	8008afe <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008b28:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8008b2c:	fb03 0505 	mla	r5, r3, r5, r0
 8008b30:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8008b34:	e004      	b.n	8008b40 <USBD_StdEPReq+0xf2>
 8008b36:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8008b3a:	fb05 3503 	mla	r5, r5, r3, r3
 8008b3e:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b40:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8008b44:	d103      	bne.n	8008b4e <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8008b46:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b48:	2202      	movs	r2, #2
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	e7e4      	b.n	8008b18 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f017 fd8e 	bl	8020670 <USBD_LL_IsStallEP>
 8008b54:	b108      	cbz	r0, 8008b5a <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e7f5      	b.n	8008b46 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8008b5a:	6028      	str	r0, [r5, #0]
 8008b5c:	e7f4      	b.n	8008b48 <USBD_StdEPReq+0xfa>

08008b5e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008b5e:	780b      	ldrb	r3, [r1, #0]
 8008b60:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008b62:	784b      	ldrb	r3, [r1, #1]
 8008b64:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008b66:	78ca      	ldrb	r2, [r1, #3]
 8008b68:	788b      	ldrb	r3, [r1, #2]
 8008b6a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008b6e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008b70:	794a      	ldrb	r2, [r1, #5]
 8008b72:	790b      	ldrb	r3, [r1, #4]
 8008b74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008b78:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008b7a:	79ca      	ldrb	r2, [r1, #7]
 8008b7c:	798b      	ldrb	r3, [r1, #6]
 8008b7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008b82:	80c3      	strh	r3, [r0, #6]
 8008b84:	4770      	bx	lr

08008b86 <USBD_CtlError>:
{
 8008b86:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8008b88:	2180      	movs	r1, #128	; 0x80
{
 8008b8a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008b8c:	f017 fd54 	bl	8020638 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008b90:	4620      	mov	r0, r4
 8008b92:	2100      	movs	r1, #0
}
 8008b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008b98:	f017 bd4e 	b.w	8020638 <USBD_LL_StallEP>

08008b9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b9c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8008b9e:	b188      	cbz	r0, 8008bc4 <USBD_GetString+0x28>
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8008ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	d1f9      	bne.n	8008ba2 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008bae:	3301      	adds	r3, #1
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008bb4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	704b      	strb	r3, [r1, #1]
 8008bba:	3801      	subs	r0, #1
 8008bbc:	2302      	movs	r3, #2
    while (*desc != '\0')
 8008bbe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008bc2:	b905      	cbnz	r5, 8008bc6 <USBD_GetString+0x2a>
 8008bc4:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	b2d2      	uxtb	r2, r2
 8008bca:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8008bcc:	3302      	adds	r3, #2
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	548c      	strb	r4, [r1, r2]
 8008bd2:	e7f4      	b.n	8008bbe <USBD_GetString+0x22>

08008bd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008bde:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008be0:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008be2:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008be4:	2100      	movs	r1, #0
 8008be6:	f017 fd65 	bl	80206b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008bea:	2000      	movs	r0, #0
 8008bec:	bd10      	pop	{r4, pc}

08008bee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008bee:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	460a      	mov	r2, r1
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	f017 fd5d 	bl	80206b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	bd08      	pop	{r3, pc}

08008bfe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008bfe:	b510      	push	{r4, lr}
 8008c00:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c02:	2203      	movs	r2, #3
 8008c04:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008c08:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008c0c:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8008c0e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008c12:	2100      	movs	r1, #0
 8008c14:	f017 fd5c 	bl	80206d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008c18:	2000      	movs	r0, #0
 8008c1a:	bd10      	pop	{r4, pc}

08008c1c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008c1c:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c1e:	4613      	mov	r3, r2
 8008c20:	460a      	mov	r2, r1
 8008c22:	2100      	movs	r1, #0
 8008c24:	f017 fd54 	bl	80206d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008c28:	2000      	movs	r0, #0
 8008c2a:	bd08      	pop	{r3, pc}

08008c2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008c2c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c2e:	2304      	movs	r3, #4
 8008c30:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c34:	2300      	movs	r3, #0
 8008c36:	461a      	mov	r2, r3
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f017 fd3b 	bl	80206b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008c3e:	2000      	movs	r0, #0
 8008c40:	bd08      	pop	{r3, pc}

08008c42 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008c42:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c44:	2305      	movs	r3, #5
 8008c46:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f017 fd3e 	bl	80206d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008c54:	2000      	movs	r0, #0
 8008c56:	bd08      	pop	{r3, pc}

08008c58 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008c58:	4b03      	ldr	r3, [pc, #12]	; (8008c68 <disk_status+0x10>)
 8008c5a:	181a      	adds	r2, r3, r0
 8008c5c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008c60:	7a10      	ldrb	r0, [r2, #8]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	4718      	bx	r3
 8008c68:	20001610 	.word	0x20001610

08008c6c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <disk_initialize+0x1c>)
 8008c6e:	5c1a      	ldrb	r2, [r3, r0]
 8008c70:	b942      	cbnz	r2, 8008c84 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8008c72:	2201      	movs	r2, #1
 8008c74:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c76:	181a      	adds	r2, r3, r0
 8008c78:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008c7c:	7a10      	ldrb	r0, [r2, #8]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4718      	bx	r3
  }
  return stat;
}
 8008c84:	2000      	movs	r0, #0
 8008c86:	4770      	bx	lr
 8008c88:	20001610 	.word	0x20001610

08008c8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c8c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c8e:	4c05      	ldr	r4, [pc, #20]	; (8008ca4 <disk_read+0x18>)
 8008c90:	1825      	adds	r5, r4, r0
 8008c92:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008c96:	6860      	ldr	r0, [r4, #4]
 8008c98:	6884      	ldr	r4, [r0, #8]
 8008c9a:	7a28      	ldrb	r0, [r5, #8]
 8008c9c:	46a4      	mov	ip, r4
  return res;
}
 8008c9e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008ca0:	4760      	bx	ip
 8008ca2:	bf00      	nop
 8008ca4:	20001610 	.word	0x20001610

08008ca8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008ca8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008caa:	4c05      	ldr	r4, [pc, #20]	; (8008cc0 <disk_write+0x18>)
 8008cac:	1825      	adds	r5, r4, r0
 8008cae:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008cb2:	6860      	ldr	r0, [r4, #4]
 8008cb4:	68c4      	ldr	r4, [r0, #12]
 8008cb6:	7a28      	ldrb	r0, [r5, #8]
 8008cb8:	46a4      	mov	ip, r4
  return res;
}
 8008cba:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008cbc:	4760      	bx	ip
 8008cbe:	bf00      	nop
 8008cc0:	20001610 	.word	0x20001610

08008cc4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <disk_ioctl+0x18>)
{
 8008cc6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cc8:	181c      	adds	r4, r3, r0
 8008cca:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008cce:	7a20      	ldrb	r0, [r4, #8]
 8008cd0:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8008cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	4718      	bx	r3
 8008cda:	bf00      	nop
 8008cdc:	20001610 	.word	0x20001610

08008ce0 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8008ce0:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8008ce2:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8008ce4:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8008ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8008cea:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008cee:	4770      	bx	lr

08008cf0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008cf0:	0a0b      	lsrs	r3, r1, #8
 8008cf2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cf4:	7043      	strb	r3, [r0, #1]
 8008cf6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008cf8:	0e09      	lsrs	r1, r1, #24
 8008cfa:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8008cfc:	70c1      	strb	r1, [r0, #3]
 8008cfe:	4770      	bx	lr

08008d00 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d00:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8008d02:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8008d06:	4290      	cmp	r0, r2
 8008d08:	d1fb      	bne.n	8008d02 <mem_set+0x2>
}
 8008d0a:	4770      	bx	lr

08008d0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d0c:	4b15      	ldr	r3, [pc, #84]	; (8008d64 <chk_lock+0x58>)
 8008d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d10:	2500      	movs	r5, #0
 8008d12:	462a      	mov	r2, r5
 8008d14:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8008d16:	681e      	ldr	r6, [r3, #0]
 8008d18:	b1a6      	cbz	r6, 8008d44 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d1a:	6807      	ldr	r7, [r0, #0]
 8008d1c:	42be      	cmp	r6, r7
 8008d1e:	d112      	bne.n	8008d46 <chk_lock+0x3a>
 8008d20:	685f      	ldr	r7, [r3, #4]
 8008d22:	6886      	ldr	r6, [r0, #8]
 8008d24:	42b7      	cmp	r7, r6
 8008d26:	d10e      	bne.n	8008d46 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8008d28:	689f      	ldr	r7, [r3, #8]
 8008d2a:	6946      	ldr	r6, [r0, #20]
 8008d2c:	42b7      	cmp	r7, r6
 8008d2e:	d10a      	bne.n	8008d46 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d30:	b9b1      	cbnz	r1, 8008d60 <chk_lock+0x54>
 8008d32:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8008d36:	8993      	ldrh	r3, [r2, #12]
 8008d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3c:	bf14      	ite	ne
 8008d3e:	2000      	movne	r0, #0
 8008d40:	2010      	moveq	r0, #16
 8008d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008d44:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d46:	3201      	adds	r2, #1
 8008d48:	2a02      	cmp	r2, #2
 8008d4a:	f103 0310 	add.w	r3, r3, #16
 8008d4e:	d1e2      	bne.n	8008d16 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008d50:	b10d      	cbz	r5, 8008d56 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d52:	2000      	movs	r0, #0
 8008d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008d56:	2902      	cmp	r1, #2
 8008d58:	bf0c      	ite	eq
 8008d5a:	2000      	moveq	r0, #0
 8008d5c:	2012      	movne	r0, #18
 8008d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d60:	2010      	movs	r0, #16
 8008d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d64:	200015ec 	.word	0x200015ec

08008d68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d68:	4a1c      	ldr	r2, [pc, #112]	; (8008ddc <inc_lock+0x74>)
 8008d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008d6c:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d6e:	2300      	movs	r3, #0
 8008d70:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8008d72:	6814      	ldr	r4, [r2, #0]
 8008d74:	42ac      	cmp	r4, r5
 8008d76:	d107      	bne.n	8008d88 <inc_lock+0x20>
 8008d78:	6857      	ldr	r7, [r2, #4]
 8008d7a:	6884      	ldr	r4, [r0, #8]
 8008d7c:	42a7      	cmp	r7, r4
 8008d7e:	d103      	bne.n	8008d88 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8008d80:	6897      	ldr	r7, [r2, #8]
 8008d82:	6944      	ldr	r4, [r0, #20]
 8008d84:	42a7      	cmp	r7, r4
 8008d86:	d01d      	beq.n	8008dc4 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	f102 0210 	add.w	r2, r2, #16
 8008d90:	d1ef      	bne.n	8008d72 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d92:	6833      	ldr	r3, [r6, #0]
 8008d94:	b113      	cbz	r3, 8008d9c <inc_lock+0x34>
 8008d96:	6933      	ldr	r3, [r6, #16]
 8008d98:	b9eb      	cbnz	r3, 8008dd6 <inc_lock+0x6e>
 8008d9a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8008d9c:	011c      	lsls	r4, r3, #4
 8008d9e:	1932      	adds	r2, r6, r4
 8008da0:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8008da2:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008da4:	6940      	ldr	r0, [r0, #20]
 8008da6:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8008da8:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8008daa:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8008dac:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dae:	b979      	cbnz	r1, 8008dd0 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008db0:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008db4:	8992      	ldrh	r2, [r2, #12]
 8008db6:	3201      	adds	r2, #1
 8008db8:	b292      	uxth	r2, r2
 8008dba:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8008dbe:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008dc0:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8008dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d0f3      	beq.n	8008db0 <inc_lock+0x48>
 8008dc8:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008dcc:	8992      	ldrh	r2, [r2, #12]
 8008dce:	b912      	cbnz	r2, 8008dd6 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dd4:	e7f1      	b.n	8008dba <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200015ec 	.word	0x200015ec

08008de0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008de0:	3801      	subs	r0, #1
 8008de2:	2801      	cmp	r0, #1
 8008de4:	d80e      	bhi.n	8008e04 <dec_lock+0x24>
		n = Files[i].ctr;
 8008de6:	4a09      	ldr	r2, [pc, #36]	; (8008e0c <dec_lock+0x2c>)
 8008de8:	0103      	lsls	r3, r0, #4
 8008dea:	18d1      	adds	r1, r2, r3
 8008dec:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8008dee:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8008df2:	b280      	uxth	r0, r0
 8008df4:	b108      	cbz	r0, 8008dfa <dec_lock+0x1a>
 8008df6:	1e48      	subs	r0, r1, #1
 8008df8:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8008dfa:	18d1      	adds	r1, r2, r3
 8008dfc:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008dfe:	b918      	cbnz	r0, 8008e08 <dec_lock+0x28>
 8008e00:	50d0      	str	r0, [r2, r3]
 8008e02:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008e04:	2002      	movs	r0, #2
 8008e06:	4770      	bx	lr
		res = FR_OK;
 8008e08:	2000      	movs	r0, #0
	}
	return res;
}
 8008e0a:	4770      	bx	lr
 8008e0c:	200015ec 	.word	0x200015ec

08008e10 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e10:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8008e12:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e14:	3b02      	subs	r3, #2
 8008e16:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8008e18:	bf3d      	ittte	cc
 8008e1a:	8943      	ldrhcc	r3, [r0, #10]
 8008e1c:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 8008e1e:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e22:	2000      	movcs	r0, #0
}
 8008e24:	4770      	bx	lr

08008e26 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e26:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 8008e28:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 8008e2a:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e2c:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	fbb1 f1f3 	udiv	r1, r1, r3
 8008e34:	8963      	ldrh	r3, [r4, #10]
 8008e36:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e3a:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e3c:	b130      	cbz	r0, 8008e4c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e3e:	4281      	cmp	r1, r0
 8008e40:	d302      	bcc.n	8008e48 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e42:	1a09      	subs	r1, r1, r0
 8008e44:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e46:	e7f8      	b.n	8008e3a <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e48:	6850      	ldr	r0, [r2, #4]
 8008e4a:	4408      	add	r0, r1
}
 8008e4c:	bd10      	pop	{r4, pc}

08008e4e <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e4e:	6802      	ldr	r2, [r0, #0]
{
 8008e50:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008e52:	b152      	cbz	r2, 8008e6a <get_ldnumber+0x1c>
 8008e54:	4611      	mov	r1, r2
 8008e56:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5c:	2c20      	cmp	r4, #32
 8008e5e:	d90c      	bls.n	8008e7a <get_ldnumber+0x2c>
 8008e60:	2c3a      	cmp	r4, #58	; 0x3a
 8008e62:	d1f8      	bne.n	8008e56 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8008e64:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e66:	428b      	cmp	r3, r1
 8008e68:	d002      	beq.n	8008e70 <get_ldnumber+0x22>
	int vol = -1;
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008e6e:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e70:	7812      	ldrb	r2, [r2, #0]
 8008e72:	2a30      	cmp	r2, #48	; 0x30
 8008e74:	d1f9      	bne.n	8008e6a <get_ldnumber+0x1c>
					*path = ++tt;
 8008e76:	3301      	adds	r3, #1
 8008e78:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	bd10      	pop	{r4, pc}

08008e7e <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e7e:	b538      	push	{r3, r4, r5, lr}
 8008e80:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008e82:	4604      	mov	r4, r0
 8008e84:	b918      	cbnz	r0, 8008e8e <validate+0x10>
		*fs = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8008e8a:	2009      	movs	r0, #9
 8008e8c:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008e8e:	6803      	ldr	r3, [r0, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0f8      	beq.n	8008e86 <validate+0x8>
 8008e94:	781a      	ldrb	r2, [r3, #0]
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	d0f5      	beq.n	8008e86 <validate+0x8>
 8008e9a:	88d9      	ldrh	r1, [r3, #6]
 8008e9c:	8882      	ldrh	r2, [r0, #4]
 8008e9e:	4291      	cmp	r1, r2
 8008ea0:	d1f1      	bne.n	8008e86 <validate+0x8>
 8008ea2:	7858      	ldrb	r0, [r3, #1]
 8008ea4:	f7ff fed8 	bl	8008c58 <disk_status>
 8008ea8:	f010 0001 	ands.w	r0, r0, #1
 8008eac:	d1eb      	bne.n	8008e86 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}

08008eb4 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008eb4:	3801      	subs	r0, #1
 8008eb6:	440a      	add	r2, r1
			*d++ = *s++;
 8008eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ebc:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008ec0:	4291      	cmp	r1, r2
 8008ec2:	d1f9      	bne.n	8008eb8 <mem_cpy.part.0+0x4>
}
 8008ec4:	4770      	bx	lr

08008ec6 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8008ec6:	7eca      	ldrb	r2, [r1, #27]
 8008ec8:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8008eca:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8008ed0:	bf01      	itttt	eq
 8008ed2:	7d48      	ldrbeq	r0, [r1, #21]
 8008ed4:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008ed6:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008eda:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	4770      	bx	lr

08008ee2 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008ee6:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8008ee8:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008eea:	7803      	ldrb	r3, [r0, #0]
 8008eec:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008eee:	bf01      	itttt	eq
 8008ef0:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008ef2:	750a      	strbeq	r2, [r1, #20]
 8008ef4:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8008ef6:	754a      	strbeq	r2, [r1, #21]
 8008ef8:	4770      	bx	lr

08008efa <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008efc:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008efe:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008f02:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f04:	2301      	movs	r3, #1
 8008f06:	462a      	mov	r2, r5
 8008f08:	4639      	mov	r1, r7
 8008f0a:	7840      	ldrb	r0, [r0, #1]
 8008f0c:	f7ff fecc 	bl	8008ca8 <disk_write>
 8008f10:	b9a0      	cbnz	r0, 8008f3c <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f14:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8008f16:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f18:	1aeb      	subs	r3, r5, r3
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d301      	bcc.n	8008f22 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8008f1e:	2000      	movs	r0, #0
 8008f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f22:	78a6      	ldrb	r6, [r4, #2]
 8008f24:	2e01      	cmp	r6, #1
 8008f26:	d9fa      	bls.n	8008f1e <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8008f28:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f2a:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008f2c:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f2e:	462a      	mov	r2, r5
 8008f30:	2301      	movs	r3, #1
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7ff feb8 	bl	8008ca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f38:	3e01      	subs	r6, #1
 8008f3a:	e7f3      	b.n	8008f24 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8008f3c:	2001      	movs	r0, #1
}
 8008f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f40 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f40:	78c3      	ldrb	r3, [r0, #3]
 8008f42:	b10b      	cbz	r3, 8008f48 <sync_window+0x8>
 8008f44:	f7ff bfd9 	b.w	8008efa <sync_window.part.4>
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	4770      	bx	lr

08008f4c <sync_fs>:
{
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008f50:	f7ff fff6 	bl	8008f40 <sync_window>
 8008f54:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d141      	bne.n	8008fde <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008f5a:	7823      	ldrb	r3, [r4, #0]
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d136      	bne.n	8008fce <sync_fs+0x82>
 8008f60:	7927      	ldrb	r7, [r4, #4]
 8008f62:	2f01      	cmp	r7, #1
 8008f64:	d133      	bne.n	8008fce <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8008f66:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	89a2      	ldrh	r2, [r4, #12]
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff fec6 	bl	8008d00 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008f74:	2355      	movs	r3, #85	; 0x55
 8008f76:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8008f7a:	23aa      	movs	r3, #170	; 0xaa
 8008f7c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8008f80:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8008f82:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008f84:	2172      	movs	r1, #114	; 0x72
 8008f86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008f8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008f8e:	2361      	movs	r3, #97	; 0x61
 8008f90:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008f94:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8008f98:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 8008f9c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8008fa0:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008fa4:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008fa8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008fac:	6961      	ldr	r1, [r4, #20]
 8008fae:	f7ff fe9f 	bl	8008cf0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008fb2:	6921      	ldr	r1, [r4, #16]
 8008fb4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008fb8:	f7ff fe9a 	bl	8008cf0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8008fbc:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008fbe:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8008fc0:	3201      	adds	r2, #1
 8008fc2:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008fc4:	463b      	mov	r3, r7
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	f7ff fe6e 	bl	8008ca8 <disk_write>
			fs->fsi_flag = 0;
 8008fcc:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	7860      	ldrb	r0, [r4, #1]
 8008fd4:	f7ff fe76 	bl	8008cc4 <disk_ioctl>
 8008fd8:	3000      	adds	r0, #0
 8008fda:	bf18      	it	ne
 8008fdc:	2001      	movne	r0, #1
}
 8008fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fe0 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008fe0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008fe2:	428b      	cmp	r3, r1
{
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008fea:	d012      	beq.n	8009012 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008fec:	f7ff ffa8 	bl	8008f40 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	b960      	cbnz	r0, 800900e <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008ff4:	462a      	mov	r2, r5
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008ffc:	7870      	ldrb	r0, [r6, #1]
 8008ffe:	f7ff fe45 	bl	8008c8c <disk_read>
 8009002:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8009004:	bf1c      	itt	ne
 8009006:	f04f 35ff 	movne.w	r5, #4294967295
 800900a:	2401      	movne	r4, #1
			fs->winsect = sector;
 800900c:	6335      	str	r5, [r6, #48]	; 0x30
}
 800900e:	4620      	mov	r0, r4
 8009010:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8009012:	2400      	movs	r4, #0
 8009014:	e7fb      	b.n	800900e <move_window+0x2e>
	...

08009018 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009018:	2300      	movs	r3, #0
{
 800901a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800901c:	70c3      	strb	r3, [r0, #3]
 800901e:	f04f 33ff 	mov.w	r3, #4294967295
 8009022:	6303      	str	r3, [r0, #48]	; 0x30
{
 8009024:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009026:	f7ff ffdb 	bl	8008fe0 <move_window>
 800902a:	bb30      	cbnz	r0, 800907a <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800902c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8009030:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8009034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009038:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800903c:	4293      	cmp	r3, r2
 800903e:	d11e      	bne.n	800907e <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009040:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009044:	2be9      	cmp	r3, #233	; 0xe9
 8009046:	d005      	beq.n	8009054 <check_fs+0x3c>
 8009048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800904a:	4a10      	ldr	r2, [pc, #64]	; (800908c <check_fs+0x74>)
 800904c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009050:	4293      	cmp	r3, r2
 8009052:	d116      	bne.n	8009082 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009054:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8009058:	f7ff fe42 	bl	8008ce0 <ld_dword>
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <check_fs+0x78>)
 800905e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8009062:	4298      	cmp	r0, r3
 8009064:	d00f      	beq.n	8009086 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009066:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800906a:	f7ff fe39 	bl	8008ce0 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800906e:	4b09      	ldr	r3, [pc, #36]	; (8009094 <check_fs+0x7c>)
 8009070:	4298      	cmp	r0, r3
 8009072:	bf14      	ite	ne
 8009074:	2002      	movne	r0, #2
 8009076:	2000      	moveq	r0, #0
 8009078:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800907a:	2004      	movs	r0, #4
 800907c:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800907e:	2003      	movs	r0, #3
 8009080:	bd10      	pop	{r4, pc}
	return 2;
 8009082:	2002      	movs	r0, #2
 8009084:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009086:	2000      	movs	r0, #0
}
 8009088:	bd10      	pop	{r4, pc}
 800908a:	bf00      	nop
 800908c:	009000eb 	.word	0x009000eb
 8009090:	00544146 	.word	0x00544146
 8009094:	33544146 	.word	0x33544146

08009098 <find_volume>:
{
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 800909c:	2300      	movs	r3, #0
{
 800909e:	b085      	sub	sp, #20
	*rfs = 0;
 80090a0:	600b      	str	r3, [r1, #0]
{
 80090a2:	460f      	mov	r7, r1
 80090a4:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80090a6:	f7ff fed2 	bl	8008e4e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80090aa:	1e06      	subs	r6, r0, #0
 80090ac:	f2c0 815e 	blt.w	800936c <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80090b0:	4bb2      	ldr	r3, [pc, #712]	; (800937c <find_volume+0x2e4>)
 80090b2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	f000 815a 	beq.w	8009370 <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 80090bc:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80090be:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80090c0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80090c4:	b173      	cbz	r3, 80090e4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80090c6:	7860      	ldrb	r0, [r4, #1]
 80090c8:	f7ff fdc6 	bl	8008c58 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80090cc:	07c1      	lsls	r1, r0, #31
 80090ce:	d409      	bmi.n	80090e4 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	f000 814f 	beq.w	8009374 <find_volume+0x2dc>
 80090d6:	f010 0004 	ands.w	r0, r0, #4
 80090da:	d000      	beq.n	80090de <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80090dc:	200a      	movs	r0, #10
}
 80090de:	b005      	add	sp, #20
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80090e4:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090e6:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80090e8:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090ea:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090ec:	f7ff fdbe 	bl	8008c6c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090f0:	07c2      	lsls	r2, r0, #31
 80090f2:	f100 8141 	bmi.w	8009378 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80090f6:	b10d      	cbz	r5, 80090fc <find_volume+0x64>
 80090f8:	0743      	lsls	r3, r0, #29
 80090fa:	d4ef      	bmi.n	80090dc <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80090fc:	f104 020c 	add.w	r2, r4, #12
 8009100:	2102      	movs	r1, #2
 8009102:	7860      	ldrb	r0, [r4, #1]
 8009104:	f7ff fdde 	bl	8008cc4 <disk_ioctl>
 8009108:	b108      	cbz	r0, 800910e <find_volume+0x76>
 800910a:	2001      	movs	r0, #1
 800910c:	e7e7      	b.n	80090de <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8009114:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8009118:	d8f7      	bhi.n	800910a <find_volume+0x72>
 800911a:	1e5e      	subs	r6, r3, #1
 800911c:	401e      	ands	r6, r3
 800911e:	d1f4      	bne.n	800910a <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009120:	4631      	mov	r1, r6
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff ff78 	bl	8009018 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009128:	2802      	cmp	r0, #2
 800912a:	f040 8101 	bne.w	8009330 <find_volume+0x298>
 800912e:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009132:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8009136:	b110      	cbz	r0, 800913e <find_volume+0xa6>
 8009138:	4608      	mov	r0, r1
 800913a:	f7ff fdd1 	bl	8008ce0 <ld_dword>
 800913e:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009142:	3601      	adds	r6, #1
 8009144:	2e04      	cmp	r6, #4
 8009146:	f101 0110 	add.w	r1, r1, #16
 800914a:	d1f2      	bne.n	8009132 <find_volume+0x9a>
 800914c:	2500      	movs	r5, #0
			bsect = br[i];
 800914e:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009152:	2e00      	cmp	r6, #0
 8009154:	f000 80e4 	beq.w	8009320 <find_volume+0x288>
 8009158:	4631      	mov	r1, r6
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff ff5c 	bl	8009018 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009160:	2801      	cmp	r0, #1
 8009162:	f200 80de 	bhi.w	8009322 <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8009166:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800916a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800916e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8009172:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009176:	4598      	cmp	r8, r3
 8009178:	f040 80e0 	bne.w	800933c <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 800917c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8009180:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009184:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8009188:	d104      	bne.n	8009194 <find_volume+0xfc>
 800918a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800918e:	f7ff fda7 	bl	8008ce0 <ld_dword>
 8009192:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009194:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8009198:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800919a:	1e7b      	subs	r3, r7, #1
 800919c:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800919e:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80091a0:	f200 80cc 	bhi.w	800933c <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091a4:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 80091a8:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091ac:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091ae:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 80c3 	beq.w	800933c <find_volume+0x2a4>
 80091b6:	f109 33ff 	add.w	r3, r9, #4294967295
 80091ba:	ea13 0f09 	tst.w	r3, r9
 80091be:	f040 80bd 	bne.w	800933c <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 80091c2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80091c6:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 80091ca:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091ce:	ea4f 1358 	mov.w	r3, r8, lsr #5
 80091d2:	fbba fbf3 	udiv	fp, sl, r3
 80091d6:	fb03 a31b 	mls	r3, r3, fp, sl
 80091da:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80091dc:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f040 80ab 	bne.w	800933c <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 80091e6:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 80091ea:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80091ee:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 80091f2:	d103      	bne.n	80091fc <find_volume+0x164>
 80091f4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80091f8:	f7ff fd72 	bl	8008ce0 <ld_dword>
	rv = rv << 8 | ptr[0];
 80091fc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009200:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009204:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8009208:	f000 8098 	beq.w	800933c <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800920c:	fa12 f38b 	uxtah	r3, r2, fp
 8009210:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009212:	4298      	cmp	r0, r3
 8009214:	f0c0 8092 	bcc.w	800933c <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009218:	1ac5      	subs	r5, r0, r3
 800921a:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800921e:	2d00      	cmp	r5, #0
 8009220:	f000 808c 	beq.w	800933c <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009224:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8009228:	4285      	cmp	r5, r0
 800922a:	f200 8089 	bhi.w	8009340 <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800922e:	f640 79f5 	movw	r9, #4085	; 0xff5
 8009232:	454d      	cmp	r5, r9
 8009234:	bf8c      	ite	hi
 8009236:	f04f 0902 	movhi.w	r9, #2
 800923a:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800923e:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009240:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8009242:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8009244:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009248:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800924a:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800924c:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800924e:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009250:	d179      	bne.n	8009346 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8009252:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8009256:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800925a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800925e:	d16d      	bne.n	800933c <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009260:	f1ba 0f00 	cmp.w	sl, #0
 8009264:	d16a      	bne.n	800933c <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009266:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800926a:	f7ff fd39 	bl	8008ce0 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800926e:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009270:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009272:	f108 33ff 	add.w	r3, r8, #4294967295
 8009276:	441d      	add	r5, r3
 8009278:	fbb5 f8f8 	udiv	r8, r5, r8
 800927c:	4541      	cmp	r1, r8
 800927e:	d35d      	bcc.n	800933c <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009280:	f04f 33ff 	mov.w	r3, #4294967295
 8009284:	6163      	str	r3, [r4, #20]
 8009286:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009288:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 800928c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009290:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009292:	d12f      	bne.n	80092f4 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8009294:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8009298:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800929c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d127      	bne.n	80092f4 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 80092a4:	1c71      	adds	r1, r6, #1
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff fe9a 	bl	8008fe0 <move_window>
 80092ac:	bb10      	cbnz	r0, 80092f4 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 80092ae:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 80092b2:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 80092b6:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80092b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80092bc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d117      	bne.n	80092f4 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80092c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80092c8:	f7ff fd0a 	bl	8008ce0 <ld_dword>
 80092cc:	4b2c      	ldr	r3, [pc, #176]	; (8009380 <find_volume+0x2e8>)
 80092ce:	4298      	cmp	r0, r3
 80092d0:	d110      	bne.n	80092f4 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80092d2:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80092d6:	f7ff fd03 	bl	8008ce0 <ld_dword>
 80092da:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <find_volume+0x2ec>)
 80092dc:	4298      	cmp	r0, r3
 80092de:	d109      	bne.n	80092f4 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80092e0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80092e4:	f7ff fcfc 	bl	8008ce0 <ld_dword>
 80092e8:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80092ea:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80092ee:	f7ff fcf7 	bl	8008ce0 <ld_dword>
 80092f2:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 80092f4:	4a24      	ldr	r2, [pc, #144]	; (8009388 <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80092f6:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80092fa:	8813      	ldrh	r3, [r2, #0]
 80092fc:	3301      	adds	r3, #1
 80092fe:	b29b      	uxth	r3, r3
 8009300:	8013      	strh	r3, [r2, #0]
 8009302:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009304:	4b21      	ldr	r3, [pc, #132]	; (800938c <find_volume+0x2f4>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4294      	cmp	r4, r2
 800930a:	bf04      	itt	eq
 800930c:	2200      	moveq	r2, #0
 800930e:	601a      	streq	r2, [r3, #0]
 8009310:	691a      	ldr	r2, [r3, #16]
 8009312:	4294      	cmp	r4, r2
 8009314:	f04f 0000 	mov.w	r0, #0
 8009318:	f47f aee1 	bne.w	80090de <find_volume+0x46>
 800931c:	6118      	str	r0, [r3, #16]
 800931e:	e6de      	b.n	80090de <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009320:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009322:	3501      	adds	r5, #1
 8009324:	2d04      	cmp	r5, #4
 8009326:	f47f af12 	bne.w	800914e <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800932a:	2804      	cmp	r0, #4
 800932c:	d106      	bne.n	800933c <find_volume+0x2a4>
 800932e:	e6ec      	b.n	800910a <find_volume+0x72>
 8009330:	2804      	cmp	r0, #4
 8009332:	f43f aeea 	beq.w	800910a <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009336:	2801      	cmp	r0, #1
 8009338:	f67f af15 	bls.w	8009166 <find_volume+0xce>
 800933c:	200d      	movs	r0, #13
 800933e:	e6ce      	b.n	80090de <find_volume+0x46>
		fmt = FS_FAT32;
 8009340:	f04f 0903 	mov.w	r9, #3
 8009344:	e77b      	b.n	800923e <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009346:	f1ba 0f00 	cmp.w	sl, #0
 800934a:	d0f7      	beq.n	800933c <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800934c:	f1b9 0f02 	cmp.w	r9, #2
 8009350:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8009354:	bf18      	it	ne
 8009356:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009358:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800935a:	bf18      	it	ne
 800935c:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009360:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009362:	bf0c      	ite	eq
 8009364:	4605      	moveq	r5, r0
 8009366:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 800936a:	e782      	b.n	8009272 <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 800936c:	200b      	movs	r0, #11
 800936e:	e6b6      	b.n	80090de <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009370:	200c      	movs	r0, #12
 8009372:	e6b4      	b.n	80090de <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8009374:	4628      	mov	r0, r5
 8009376:	e6b2      	b.n	80090de <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009378:	2003      	movs	r0, #3
 800937a:	e6b0      	b.n	80090de <find_volume+0x46>
 800937c:	200015e8 	.word	0x200015e8
 8009380:	41615252 	.word	0x41615252
 8009384:	61417272 	.word	0x61417272
 8009388:	2000160c 	.word	0x2000160c
 800938c:	200015ec 	.word	0x200015ec

08009390 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009390:	2901      	cmp	r1, #1
{
 8009392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800939c:	f240 808a 	bls.w	80094b4 <put_fat+0x124>
 80093a0:	6983      	ldr	r3, [r0, #24]
 80093a2:	4299      	cmp	r1, r3
 80093a4:	f080 8086 	bcs.w	80094b4 <put_fat+0x124>
		switch (fs->fs_type) {
 80093a8:	7803      	ldrb	r3, [r0, #0]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d049      	beq.n	8009442 <put_fat+0xb2>
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d060      	beq.n	8009474 <put_fat+0xe4>
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d17e      	bne.n	80094b4 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 80093b6:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093ba:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80093bc:	8983      	ldrh	r3, [r0, #12]
 80093be:	fbba f3f3 	udiv	r3, sl, r3
 80093c2:	4419      	add	r1, r3
 80093c4:	f7ff fe0c 	bl	8008fe0 <move_window>
 80093c8:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 80093ca:	bb78      	cbnz	r0, 800942c <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	fbba f2f3 	udiv	r2, sl, r3
 80093d2:	f104 0834 	add.w	r8, r4, #52	; 0x34
 80093d6:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80093da:	f015 0501 	ands.w	r5, r5, #1
 80093de:	bf1f      	itttt	ne
 80093e0:	f818 3002 	ldrbne.w	r3, [r8, r2]
 80093e4:	f003 010f 	andne.w	r1, r3, #15
 80093e8:	013b      	lslne	r3, r7, #4
 80093ea:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80093ee:	bf14      	ite	ne
 80093f0:	430b      	orrne	r3, r1
 80093f2:	b2fb      	uxtbeq	r3, r7
 80093f4:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 80093fa:	2301      	movs	r3, #1
 80093fc:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 80093fe:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	fbb9 f3f3 	udiv	r3, r9, r3
 8009408:	4620      	mov	r0, r4
 800940a:	4419      	add	r1, r3
 800940c:	f7ff fde8 	bl	8008fe0 <move_window>
			if (res != FR_OK) break;
 8009410:	4606      	mov	r6, r0
 8009412:	b958      	cbnz	r0, 800942c <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	fbb9 f2f3 	udiv	r2, r9, r3
 800941a:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800941e:	b145      	cbz	r5, 8009432 <put_fat+0xa2>
 8009420:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8009424:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	70e3      	strb	r3, [r4, #3]
}
 800942c:	4630      	mov	r0, r6
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009432:	f818 3002 	ldrb.w	r3, [r8, r2]
 8009436:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800943a:	f023 030f 	bic.w	r3, r3, #15
 800943e:	431f      	orrs	r7, r3
 8009440:	e7f0      	b.n	8009424 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009442:	8983      	ldrh	r3, [r0, #12]
 8009444:	085b      	lsrs	r3, r3, #1
 8009446:	fbb1 f3f3 	udiv	r3, r1, r3
 800944a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800944c:	4419      	add	r1, r3
 800944e:	f7ff fdc7 	bl	8008fe0 <move_window>
			if (res != FR_OK) break;
 8009452:	4606      	mov	r6, r0
 8009454:	2800      	cmp	r0, #0
 8009456:	d1e9      	bne.n	800942c <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009458:	89a1      	ldrh	r1, [r4, #12]
 800945a:	006d      	lsls	r5, r5, #1
 800945c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8009460:	fbb5 f3f1 	udiv	r3, r5, r1
 8009464:	fb01 5513 	mls	r5, r1, r3, r5
 8009468:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800946a:	5557      	strb	r7, [r2, r5]
 800946c:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8009470:	705f      	strb	r7, [r3, #1]
 8009472:	e7d9      	b.n	8009428 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009474:	8983      	ldrh	r3, [r0, #12]
 8009476:	089b      	lsrs	r3, r3, #2
 8009478:	fbb1 f3f3 	udiv	r3, r1, r3
 800947c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800947e:	4419      	add	r1, r3
 8009480:	f7ff fdae 	bl	8008fe0 <move_window>
			if (res != FR_OK) break;
 8009484:	4606      	mov	r6, r0
 8009486:	2800      	cmp	r0, #0
 8009488:	d1d0      	bne.n	800942c <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800948a:	89a1      	ldrh	r1, [r4, #12]
 800948c:	00ad      	lsls	r5, r5, #2
 800948e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8009492:	fbb5 f2f1 	udiv	r2, r5, r1
 8009496:	fb01 5512 	mls	r5, r1, r2, r5
 800949a:	441d      	add	r5, r3
 800949c:	4628      	mov	r0, r5
 800949e:	f7ff fc1f 	bl	8008ce0 <ld_dword>
 80094a2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80094a6:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80094aa:	4339      	orrs	r1, r7
 80094ac:	4628      	mov	r0, r5
 80094ae:	f7ff fc1f 	bl	8008cf0 <st_dword>
 80094b2:	e7b9      	b.n	8009428 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 80094b4:	2602      	movs	r6, #2
 80094b6:	e7b9      	b.n	800942c <put_fat+0x9c>

080094b8 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80094b8:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80094ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094bc:	4604      	mov	r4, r0
 80094be:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80094c0:	d968      	bls.n	8009594 <get_fat.isra.8+0xdc>
 80094c2:	6983      	ldr	r3, [r0, #24]
 80094c4:	4299      	cmp	r1, r3
 80094c6:	d265      	bcs.n	8009594 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 80094c8:	7803      	ldrb	r3, [r0, #0]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d032      	beq.n	8009534 <get_fat.isra.8+0x7c>
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d048      	beq.n	8009564 <get_fat.isra.8+0xac>
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d15e      	bne.n	8009594 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 80094d6:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094da:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80094dc:	8983      	ldrh	r3, [r0, #12]
 80094de:	fbb5 f3f3 	udiv	r3, r5, r3
 80094e2:	4419      	add	r1, r3
 80094e4:	f7ff fd7c 	bl	8008fe0 <move_window>
 80094e8:	b110      	cbz	r0, 80094f0 <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80094ea:	f04f 30ff 	mov.w	r0, #4294967295
 80094ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80094f0:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 80094f4:	fbb5 f2f1 	udiv	r2, r5, r1
 80094f8:	fb01 5212 	mls	r2, r1, r2, r5
 80094fc:	4422      	add	r2, r4
 80094fe:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009500:	4620      	mov	r0, r4
 8009502:	fbb7 f1f1 	udiv	r1, r7, r1
 8009506:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 8009508:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800950c:	f7ff fd68 	bl	8008fe0 <move_window>
 8009510:	2800      	cmp	r0, #0
 8009512:	d1ea      	bne.n	80094ea <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009514:	89a2      	ldrh	r2, [r4, #12]
 8009516:	fbb7 f3f2 	udiv	r3, r7, r2
 800951a:	fb02 7313 	mls	r3, r2, r3, r7
 800951e:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009520:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8009522:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8009526:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800952a:	bf4c      	ite	mi
 800952c:	0900      	lsrmi	r0, r0, #4
 800952e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8009532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009534:	8983      	ldrh	r3, [r0, #12]
 8009536:	085b      	lsrs	r3, r3, #1
 8009538:	fbb1 f3f3 	udiv	r3, r1, r3
 800953c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800953e:	4419      	add	r1, r3
 8009540:	f7ff fd4e 	bl	8008fe0 <move_window>
 8009544:	2800      	cmp	r0, #0
 8009546:	d1d0      	bne.n	80094ea <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009548:	89a1      	ldrh	r1, [r4, #12]
 800954a:	0076      	lsls	r6, r6, #1
 800954c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8009550:	fbb6 f3f1 	udiv	r3, r6, r1
 8009554:	fb01 6613 	mls	r6, r1, r3, r6
 8009558:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 800955a:	5d90      	ldrb	r0, [r2, r6]
 800955c:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800955e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009564:	8983      	ldrh	r3, [r0, #12]
 8009566:	089b      	lsrs	r3, r3, #2
 8009568:	fbb1 f3f3 	udiv	r3, r1, r3
 800956c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800956e:	4419      	add	r1, r3
 8009570:	f7ff fd36 	bl	8008fe0 <move_window>
 8009574:	2800      	cmp	r0, #0
 8009576:	d1b8      	bne.n	80094ea <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009578:	89a2      	ldrh	r2, [r4, #12]
 800957a:	00b6      	lsls	r6, r6, #2
 800957c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009580:	fbb6 f3f2 	udiv	r3, r6, r2
 8009584:	fb02 6613 	mls	r6, r2, r3, r6
 8009588:	4430      	add	r0, r6
 800958a:	f7ff fba9 	bl	8008ce0 <ld_dword>
 800958e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8009592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8009594:	2001      	movs	r0, #1
}
 8009596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009598 <create_chain>:
{
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800959e:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80095a0:	460f      	mov	r7, r1
 80095a2:	b971      	cbnz	r1, 80095c2 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80095a4:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80095a6:	b1f6      	cbz	r6, 80095e6 <create_chain+0x4e>
 80095a8:	69ab      	ldr	r3, [r5, #24]
 80095aa:	429e      	cmp	r6, r3
 80095ac:	bf28      	it	cs
 80095ae:	2601      	movcs	r6, #1
 80095b0:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80095b2:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 80095b4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80095b6:	429c      	cmp	r4, r3
 80095b8:	d318      	bcc.n	80095ec <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80095ba:	2e01      	cmp	r6, #1
 80095bc:	d815      	bhi.n	80095ea <create_chain+0x52>
 80095be:	2400      	movs	r4, #0
 80095c0:	e009      	b.n	80095d6 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80095c2:	4628      	mov	r0, r5
 80095c4:	f7ff ff78 	bl	80094b8 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80095c8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80095ca:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80095cc:	d937      	bls.n	800963e <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d104      	bne.n	80095dc <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095d2:	f04f 34ff 	mov.w	r4, #4294967295
}
 80095d6:	4620      	mov	r0, r4
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80095dc:	69ab      	ldr	r3, [r5, #24]
 80095de:	4298      	cmp	r0, r3
 80095e0:	d3f9      	bcc.n	80095d6 <create_chain+0x3e>
 80095e2:	463e      	mov	r6, r7
 80095e4:	e7e4      	b.n	80095b0 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80095e6:	2601      	movs	r6, #1
 80095e8:	e7e2      	b.n	80095b0 <create_chain+0x18>
				ncl = 2;
 80095ea:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80095ec:	4621      	mov	r1, r4
 80095ee:	f8d8 0000 	ldr.w	r0, [r8]
 80095f2:	f7ff ff61 	bl	80094b8 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 80095f6:	b130      	cbz	r0, 8009606 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80095f8:	2801      	cmp	r0, #1
 80095fa:	d020      	beq.n	800963e <create_chain+0xa6>
 80095fc:	3001      	adds	r0, #1
 80095fe:	d0e8      	beq.n	80095d2 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8009600:	42b4      	cmp	r4, r6
 8009602:	d1d6      	bne.n	80095b2 <create_chain+0x1a>
 8009604:	e7db      	b.n	80095be <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009606:	f04f 32ff 	mov.w	r2, #4294967295
 800960a:	4621      	mov	r1, r4
 800960c:	4628      	mov	r0, r5
 800960e:	f7ff febf 	bl	8009390 <put_fat>
		if (res == FR_OK && clst != 0) {
 8009612:	b990      	cbnz	r0, 800963a <create_chain+0xa2>
 8009614:	b957      	cbnz	r7, 800962c <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009616:	69aa      	ldr	r2, [r5, #24]
 8009618:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 800961a:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800961c:	3a02      	subs	r2, #2
 800961e:	4293      	cmp	r3, r2
 8009620:	d90f      	bls.n	8009642 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8009622:	792b      	ldrb	r3, [r5, #4]
 8009624:	f043 0301 	orr.w	r3, r3, #1
 8009628:	712b      	strb	r3, [r5, #4]
 800962a:	e7d4      	b.n	80095d6 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800962c:	4622      	mov	r2, r4
 800962e:	4639      	mov	r1, r7
 8009630:	4628      	mov	r0, r5
 8009632:	f7ff fead 	bl	8009390 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009636:	2800      	cmp	r0, #0
 8009638:	d0ed      	beq.n	8009616 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800963a:	2801      	cmp	r0, #1
 800963c:	d0c9      	beq.n	80095d2 <create_chain+0x3a>
 800963e:	2401      	movs	r4, #1
 8009640:	e7c9      	b.n	80095d6 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009642:	3b01      	subs	r3, #1
 8009644:	616b      	str	r3, [r5, #20]
 8009646:	e7ec      	b.n	8009622 <create_chain+0x8a>

08009648 <remove_chain>:
{
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800964c:	2d01      	cmp	r5, #1
{
 800964e:	4607      	mov	r7, r0
 8009650:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009652:	d801      	bhi.n	8009658 <remove_chain+0x10>
 8009654:	2002      	movs	r0, #2
 8009656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8009658:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800965a:	69a3      	ldr	r3, [r4, #24]
 800965c:	429d      	cmp	r5, r3
 800965e:	d2f9      	bcs.n	8009654 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009660:	b12a      	cbz	r2, 800966e <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009662:	f04f 32ff 	mov.w	r2, #4294967295
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff fe92 	bl	8009390 <put_fat>
		if (res != FR_OK) return res;
 800966c:	bb08      	cbnz	r0, 80096b2 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800966e:	4629      	mov	r1, r5
 8009670:	6838      	ldr	r0, [r7, #0]
 8009672:	f7ff ff21 	bl	80094b8 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8009676:	4606      	mov	r6, r0
 8009678:	b908      	cbnz	r0, 800967e <remove_chain+0x36>
	return FR_OK;
 800967a:	2000      	movs	r0, #0
 800967c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800967e:	2801      	cmp	r0, #1
 8009680:	d0e8      	beq.n	8009654 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	d014      	beq.n	80096b0 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009686:	2200      	movs	r2, #0
 8009688:	4629      	mov	r1, r5
 800968a:	4620      	mov	r0, r4
 800968c:	f7ff fe80 	bl	8009390 <put_fat>
			if (res != FR_OK) return res;
 8009690:	b978      	cbnz	r0, 80096b2 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009692:	69a2      	ldr	r2, [r4, #24]
 8009694:	6963      	ldr	r3, [r4, #20]
 8009696:	1e91      	subs	r1, r2, #2
 8009698:	428b      	cmp	r3, r1
 800969a:	d205      	bcs.n	80096a8 <remove_chain+0x60>
			fs->free_clst++;
 800969c:	3301      	adds	r3, #1
 800969e:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 80096a0:	7923      	ldrb	r3, [r4, #4]
 80096a2:	f043 0301 	orr.w	r3, r3, #1
 80096a6:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80096a8:	4296      	cmp	r6, r2
 80096aa:	4635      	mov	r5, r6
 80096ac:	d3df      	bcc.n	800966e <remove_chain+0x26>
 80096ae:	e7e4      	b.n	800967a <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80096b0:	2001      	movs	r0, #1
}
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096b4 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80096b4:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80096b6:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80096b8:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80096ba:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80096bc:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80096be:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80096c0:	b992      	cbnz	r2, 80096e8 <dir_sdi.constprop.11+0x34>
 80096c2:	7823      	ldrb	r3, [r4, #0]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d901      	bls.n	80096cc <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 80096c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80096ca:	b973      	cbnz	r3, 80096ea <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80096cc:	8923      	ldrh	r3, [r4, #8]
 80096ce:	b90b      	cbnz	r3, 80096d4 <dir_sdi.constprop.11+0x20>
 80096d0:	2002      	movs	r0, #2
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80096d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096d6:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 80096d8:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 80096da:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0f7      	beq.n	80096d0 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80096e0:	3434      	adds	r4, #52	; 0x34
 80096e2:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80096e4:	2000      	movs	r0, #0
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80096e8:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096ea:	8961      	ldrh	r1, [r4, #10]
 80096ec:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096ee:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096f0:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80096f2:	d10c      	bne.n	800970e <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096f4:	4611      	mov	r1, r2
 80096f6:	6828      	ldr	r0, [r5, #0]
 80096f8:	f7ff fede 	bl	80094b8 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096fc:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096fe:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009700:	d00b      	beq.n	800971a <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009702:	2801      	cmp	r0, #1
 8009704:	d9e4      	bls.n	80096d0 <dir_sdi.constprop.11+0x1c>
 8009706:	69a3      	ldr	r3, [r4, #24]
 8009708:	4298      	cmp	r0, r3
 800970a:	d3f3      	bcc.n	80096f4 <dir_sdi.constprop.11+0x40>
 800970c:	e7e0      	b.n	80096d0 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 800970e:	4619      	mov	r1, r3
 8009710:	4620      	mov	r0, r4
 8009712:	f7ff fb7d 	bl	8008e10 <clust2sect>
 8009716:	61e8      	str	r0, [r5, #28]
 8009718:	e7de      	b.n	80096d8 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800971a:	2001      	movs	r0, #1
}
 800971c:	bd38      	pop	{r3, r4, r5, pc}

0800971e <dir_next>:
{
 800971e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009722:	69c3      	ldr	r3, [r0, #28]
{
 8009724:	4605      	mov	r5, r0
 8009726:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009728:	b1b3      	cbz	r3, 8009758 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800972a:	6947      	ldr	r7, [r0, #20]
 800972c:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800972e:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8009732:	d211      	bcs.n	8009758 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8009734:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009736:	89a2      	ldrh	r2, [r4, #12]
 8009738:	fbb7 f0f2 	udiv	r0, r7, r2
 800973c:	fb02 7210 	mls	r2, r2, r0, r7
 8009740:	2a00      	cmp	r2, #0
 8009742:	d14f      	bne.n	80097e4 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8009744:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8009746:	3301      	adds	r3, #1
 8009748:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 800974a:	b941      	cbnz	r1, 800975e <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800974c:	8923      	ldrh	r3, [r4, #8]
 800974e:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8009752:	d847      	bhi.n	80097e4 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8009754:	2300      	movs	r3, #0
 8009756:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009758:	2004      	movs	r0, #4
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800975e:	8963      	ldrh	r3, [r4, #10]
 8009760:	3b01      	subs	r3, #1
 8009762:	4203      	tst	r3, r0
 8009764:	d13e      	bne.n	80097e4 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009766:	4620      	mov	r0, r4
 8009768:	f7ff fea6 	bl	80094b8 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800976c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800976e:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009770:	d802      	bhi.n	8009778 <dir_next+0x5a>
 8009772:	2002      	movs	r0, #2
 8009774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009778:	1c42      	adds	r2, r0, #1
 800977a:	d102      	bne.n	8009782 <dir_next+0x64>
 800977c:	2001      	movs	r0, #1
 800977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009782:	69a3      	ldr	r3, [r4, #24]
 8009784:	4298      	cmp	r0, r3
 8009786:	d327      	bcc.n	80097d8 <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 8009788:	f1b8 0f00 	cmp.w	r8, #0
 800978c:	d0e2      	beq.n	8009754 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800978e:	69a9      	ldr	r1, [r5, #24]
 8009790:	4628      	mov	r0, r5
 8009792:	f7ff ff01 	bl	8009598 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009796:	4606      	mov	r6, r0
 8009798:	2800      	cmp	r0, #0
 800979a:	d03d      	beq.n	8009818 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800979c:	2801      	cmp	r0, #1
 800979e:	d0e8      	beq.n	8009772 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d0eb      	beq.n	800977c <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7ff fbcb 	bl	8008f40 <sync_window>
 80097aa:	4680      	mov	r8, r0
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d1e5      	bne.n	800977c <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80097b0:	4601      	mov	r1, r0
 80097b2:	89a2      	ldrh	r2, [r4, #12]
 80097b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80097b8:	f7ff faa2 	bl	8008d00 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097bc:	4631      	mov	r1, r6
 80097be:	4620      	mov	r0, r4
 80097c0:	f7ff fb26 	bl	8008e10 <clust2sect>
						fs->wflag = 1;
 80097c4:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097c8:	6320      	str	r0, [r4, #48]	; 0x30
 80097ca:	8963      	ldrh	r3, [r4, #10]
 80097cc:	4598      	cmp	r8, r3
 80097ce:	d316      	bcc.n	80097fe <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 80097d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80097d2:	eba3 0308 	sub.w	r3, r3, r8
 80097d6:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80097d8:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80097da:	4631      	mov	r1, r6
 80097dc:	4620      	mov	r0, r4
 80097de:	f7ff fb17 	bl	8008e10 <clust2sect>
 80097e2:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80097e4:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80097e6:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80097e8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80097ec:	fbb7 f2f1 	udiv	r2, r7, r1
 80097f0:	fb01 7712 	mls	r7, r1, r2, r7
 80097f4:	441f      	add	r7, r3
 80097f6:	622f      	str	r7, [r5, #32]
	return FR_OK;
 80097f8:	2000      	movs	r0, #0
 80097fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 80097fe:	f884 9003 	strb.w	r9, [r4, #3]
 8009802:	4620      	mov	r0, r4
 8009804:	f7ff fb79 	bl	8008efa <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009808:	2800      	cmp	r0, #0
 800980a:	d1b7      	bne.n	800977c <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800980c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800980e:	3301      	adds	r3, #1
 8009810:	f108 0801 	add.w	r8, r8, #1
 8009814:	6323      	str	r3, [r4, #48]	; 0x30
 8009816:	e7d8      	b.n	80097ca <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009818:	2007      	movs	r0, #7
}
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009820 <follow_path>:
{
 8009820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8009824:	6806      	ldr	r6, [r0, #0]
{
 8009826:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009828:	780b      	ldrb	r3, [r1, #0]
 800982a:	2b2f      	cmp	r3, #47	; 0x2f
 800982c:	460d      	mov	r5, r1
 800982e:	f101 0101 	add.w	r1, r1, #1
 8009832:	d0f9      	beq.n	8009828 <follow_path+0x8>
 8009834:	2b5c      	cmp	r3, #92	; 0x5c
 8009836:	d0f7      	beq.n	8009828 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8009838:	2300      	movs	r3, #0
 800983a:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800983c:	782b      	ldrb	r3, [r5, #0]
 800983e:	2b1f      	cmp	r3, #31
 8009840:	d959      	bls.n	80098f6 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009842:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80099a4 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 8009846:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800984a:	220b      	movs	r2, #11
 800984c:	2120      	movs	r1, #32
 800984e:	4638      	mov	r0, r7
 8009850:	f7ff fa56 	bl	8008d00 <mem_set>
	si = i = 0; ni = 8;
 8009854:	2200      	movs	r2, #0
 8009856:	f105 3eff 	add.w	lr, r5, #4294967295
 800985a:	4611      	mov	r1, r2
 800985c:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800985e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009862:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009864:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009868:	d90b      	bls.n	8009882 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800986a:	2b2f      	cmp	r3, #47	; 0x2f
 800986c:	d14b      	bne.n	8009906 <follow_path+0xe6>
 800986e:	1868      	adds	r0, r5, r1
 8009870:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009872:	f810 eb01 	ldrb.w	lr, [r0], #1
 8009876:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 800987a:	d0f9      	beq.n	8009870 <follow_path+0x50>
 800987c:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8009880:	d0f6      	beq.n	8009870 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8009882:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009884:	2a00      	cmp	r2, #0
 8009886:	d054      	beq.n	8009932 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009888:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 800988c:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009890:	2ae5      	cmp	r2, #229	; 0xe5
 8009892:	bf04      	itt	eq
 8009894:	2205      	moveq	r2, #5
 8009896:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800989a:	2b21      	cmp	r3, #33	; 0x21
 800989c:	bf34      	ite	cc
 800989e:	2304      	movcc	r3, #4
 80098a0:	2300      	movcs	r3, #0
 80098a2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80098a6:	4620      	mov	r0, r4
 80098a8:	f7ff ff04 	bl	80096b4 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d145      	bne.n	800993c <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 80098b0:	69e1      	ldr	r1, [r4, #28]
 80098b2:	4648      	mov	r0, r9
 80098b4:	f7ff fb94 	bl	8008fe0 <move_window>
		if (res != FR_OK) break;
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d13f      	bne.n	800993c <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 80098bc:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80098be:	781a      	ldrb	r2, [r3, #0]
 80098c0:	2a00      	cmp	r2, #0
 80098c2:	d046      	beq.n	8009952 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80098c4:	7ada      	ldrb	r2, [r3, #11]
 80098c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80098ca:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80098cc:	7ada      	ldrb	r2, [r3, #11]
 80098ce:	0711      	lsls	r1, r2, #28
 80098d0:	d40c      	bmi.n	80098ec <follow_path+0xcc>
 80098d2:	f103 0e0b 	add.w	lr, r3, #11
 80098d6:	4639      	mov	r1, r7
		r = *d++ - *s++;
 80098d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098dc:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 80098e0:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 80098e2:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80098e6:	d027      	beq.n	8009938 <follow_path+0x118>
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	d0f5      	beq.n	80098d8 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 80098ec:	2100      	movs	r1, #0
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7ff ff15 	bl	800971e <dir_next>
 80098f4:	e7da      	b.n	80098ac <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 80098f6:	2380      	movs	r3, #128	; 0x80
 80098f8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80098fc:	4620      	mov	r0, r4
}
 80098fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8009902:	f7ff bed7 	b.w	80096b4 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009906:	2b5c      	cmp	r3, #92	; 0x5c
 8009908:	d0b1      	beq.n	800986e <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800990a:	2b2e      	cmp	r3, #46	; 0x2e
 800990c:	d039      	beq.n	8009982 <follow_path+0x162>
 800990e:	4290      	cmp	r0, r2
 8009910:	d90f      	bls.n	8009932 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8009912:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009916:	bf18      	it	ne
 8009918:	3b80      	subne	r3, #128	; 0x80
 800991a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80099a8 <follow_path+0x188>
 800991e:	bf18      	it	ne
 8009920:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8009924:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8009928:	f1bc 0f00 	cmp.w	ip, #0
 800992c:	d02e      	beq.n	800998c <follow_path+0x16c>
 800992e:	4563      	cmp	r3, ip
 8009930:	d1f8      	bne.n	8009924 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009932:	2006      	movs	r0, #6
	return res;
 8009934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009938:	2a00      	cmp	r2, #0
 800993a:	d1d7      	bne.n	80098ec <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800993c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8009940:	b148      	cbz	r0, 8009956 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009942:	2804      	cmp	r0, #4
 8009944:	d12c      	bne.n	80099a0 <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009946:	f013 0f04 	tst.w	r3, #4
 800994a:	bf08      	it	eq
 800994c:	2005      	moveq	r0, #5
 800994e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009952:	2004      	movs	r0, #4
 8009954:	e7f2      	b.n	800993c <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009956:	075a      	lsls	r2, r3, #29
 8009958:	d422      	bmi.n	80099a0 <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800995a:	79a3      	ldrb	r3, [r4, #6]
 800995c:	06db      	lsls	r3, r3, #27
 800995e:	d50d      	bpl.n	800997c <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009960:	89b2      	ldrh	r2, [r6, #12]
 8009962:	6960      	ldr	r0, [r4, #20]
 8009964:	fbb0 f3f2 	udiv	r3, r0, r2
 8009968:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800996c:	fb02 0313 	mls	r3, r2, r3, r0
 8009970:	4419      	add	r1, r3
 8009972:	7830      	ldrb	r0, [r6, #0]
 8009974:	f7ff faa7 	bl	8008ec6 <ld_clust.isra.1>
 8009978:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800997a:	e764      	b.n	8009846 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800997c:	2005      	movs	r0, #5
 800997e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009982:	280b      	cmp	r0, #11
 8009984:	d0d5      	beq.n	8009932 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8009986:	2208      	movs	r2, #8
 8009988:	200b      	movs	r0, #11
 800998a:	e768      	b.n	800985e <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800998c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8009990:	f1bc 0f19 	cmp.w	ip, #25
 8009994:	d801      	bhi.n	800999a <follow_path+0x17a>
 8009996:	3b20      	subs	r3, #32
 8009998:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800999a:	54bb      	strb	r3, [r7, r2]
 800999c:	3201      	adds	r2, #1
 800999e:	e75e      	b.n	800985e <follow_path+0x3e>
}
 80099a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a4:	08025512 	.word	0x08025512
 80099a8:	08025591 	.word	0x08025591

080099ac <dir_register>:
{
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80099b0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80099b2:	f7ff fe7f 	bl	80096b4 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 80099b6:	4604      	mov	r4, r0
 80099b8:	bb28      	cbnz	r0, 8009a06 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80099ba:	69e9      	ldr	r1, [r5, #28]
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff fb0f 	bl	8008fe0 <move_window>
			if (res != FR_OK) break;
 80099c2:	4604      	mov	r4, r0
 80099c4:	b9f8      	cbnz	r0, 8009a06 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80099c6:	6a2b      	ldr	r3, [r5, #32]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2be5      	cmp	r3, #229	; 0xe5
 80099cc:	d114      	bne.n	80099f8 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 80099ce:	69e9      	ldr	r1, [r5, #28]
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff fb05 	bl	8008fe0 <move_window>
		if (res == FR_OK) {
 80099d6:	4604      	mov	r4, r0
 80099d8:	b960      	cbnz	r0, 80099f4 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80099da:	4601      	mov	r1, r0
 80099dc:	2220      	movs	r2, #32
 80099de:	6a28      	ldr	r0, [r5, #32]
 80099e0:	f7ff f98e 	bl	8008d00 <mem_set>
 80099e4:	220b      	movs	r2, #11
 80099e6:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80099ea:	6a28      	ldr	r0, [r5, #32]
 80099ec:	f7ff fa62 	bl	8008eb4 <mem_cpy.part.0>
			fs->wflag = 1;
 80099f0:	2301      	movs	r3, #1
 80099f2:	70f3      	strb	r3, [r6, #3]
}
 80099f4:	4620      	mov	r0, r4
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0e8      	beq.n	80099ce <dir_register+0x22>
			res = dir_next(dp, 1);
 80099fc:	2101      	movs	r1, #1
 80099fe:	4628      	mov	r0, r5
 8009a00:	f7ff fe8d 	bl	800971e <dir_next>
 8009a04:	e7d7      	b.n	80099b6 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009a06:	2c04      	cmp	r4, #4
 8009a08:	bf08      	it	eq
 8009a0a:	2407      	moveq	r4, #7
 8009a0c:	e7f2      	b.n	80099f4 <dir_register+0x48>
	...

08009a10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009a12:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a14:	a804      	add	r0, sp, #16
{
 8009a16:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8009a18:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8009a1c:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a1e:	f7ff fa16 	bl	8008e4e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a22:	1e05      	subs	r5, r0, #0
 8009a24:	db1f      	blt.n	8009a66 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a26:	4912      	ldr	r1, [pc, #72]	; (8009a70 <f_mount+0x60>)
 8009a28:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8009a2c:	b15c      	cbz	r4, 8009a46 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a2e:	4b11      	ldr	r3, [pc, #68]	; (8009a74 <f_mount+0x64>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4294      	cmp	r4, r2
 8009a34:	bf04      	itt	eq
 8009a36:	2200      	moveq	r2, #0
 8009a38:	601a      	streq	r2, [r3, #0]
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	4294      	cmp	r4, r2
 8009a40:	bf08      	it	eq
 8009a42:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a44:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8009a46:	9801      	ldr	r0, [sp, #4]
 8009a48:	b108      	cbz	r0, 8009a4e <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009a4e:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009a52:	b130      	cbz	r0, 8009a62 <f_mount+0x52>
 8009a54:	2e01      	cmp	r6, #1
 8009a56:	d108      	bne.n	8009a6a <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009a58:	2200      	movs	r2, #0
 8009a5a:	a901      	add	r1, sp, #4
 8009a5c:	4668      	mov	r0, sp
 8009a5e:	f7ff fb1b 	bl	8009098 <find_volume>
	LEAVE_FF(fs, res);
}
 8009a62:	b004      	add	sp, #16
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a66:	200b      	movs	r0, #11
 8009a68:	e7fb      	b.n	8009a62 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	e7f9      	b.n	8009a62 <f_mount+0x52>
 8009a6e:	bf00      	nop
 8009a70:	200015e8 	.word	0x200015e8
 8009a74:	200015ec 	.word	0x200015ec

08009a78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a7c:	b090      	sub	sp, #64	; 0x40
 8009a7e:	4690      	mov	r8, r2
 8009a80:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009a82:	4604      	mov	r4, r0
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f000 80d1 	beq.w	8009c2c <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009a8a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8009a8e:	462a      	mov	r2, r5
 8009a90:	a903      	add	r1, sp, #12
 8009a92:	a801      	add	r0, sp, #4
 8009a94:	f7ff fb00 	bl	8009098 <find_volume>
	if (res == FR_OK) {
 8009a98:	4607      	mov	r7, r0
 8009a9a:	bb38      	cbnz	r0, 8009aec <f_open+0x74>
		dj.obj.fs = fs;
 8009a9c:	ae10      	add	r6, sp, #64	; 0x40
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009aa4:	9901      	ldr	r1, [sp, #4]
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7ff feba 	bl	8009820 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009aac:	b958      	cbnz	r0, 8009ac6 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009aae:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	db1e      	blt.n	8009af4 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ab6:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8009aba:	bf14      	ite	ne
 8009abc:	2101      	movne	r1, #1
 8009abe:	2100      	moveq	r1, #0
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7ff f923 	bl	8008d0c <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009ac6:	f018 0f1c 	tst.w	r8, #28
 8009aca:	d073      	beq.n	8009bb4 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8009acc:	b1a0      	cbz	r0, 8009af8 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ace:	2804      	cmp	r0, #4
 8009ad0:	d109      	bne.n	8009ae6 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ad2:	4b73      	ldr	r3, [pc, #460]	; (8009ca0 <f_open+0x228>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	f000 80de 	beq.w	8009c98 <f_open+0x220>
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 80da 	beq.w	8009c98 <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ae4:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009ae6:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009aea:	b170      	cbz	r0, 8009b0a <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009aec:	2300      	movs	r3, #0
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	4607      	mov	r7, r0
 8009af2:	e095      	b.n	8009c20 <f_open+0x1a8>
				res = FR_INVALID_NAME;
 8009af4:	2006      	movs	r0, #6
 8009af6:	e7e6      	b.n	8009ac6 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009af8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009afc:	f013 0f11 	tst.w	r3, #17
 8009b00:	d163      	bne.n	8009bca <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009b02:	f018 0f04 	tst.w	r8, #4
 8009b06:	f040 80c1 	bne.w	8009c8c <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009b0a:	0728      	lsls	r0, r5, #28
 8009b0c:	d53c      	bpl.n	8009b88 <f_open+0x110>
				dw = GET_FATTIME();
 8009b0e:	f012 fdd1 	bl	801c6b4 <get_fattime>
 8009b12:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009b14:	4601      	mov	r1, r0
 8009b16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b18:	300e      	adds	r0, #14
 8009b1a:	f7ff f8e9 	bl	8008cf0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009b1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b20:	4611      	mov	r1, r2
 8009b22:	3016      	adds	r0, #22
 8009b24:	f7ff f8e4 	bl	8008cf0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009b2a:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009b2e:	2220      	movs	r2, #32
 8009b30:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009b32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b36:	f899 0000 	ldrb.w	r0, [r9]
 8009b3a:	4651      	mov	r1, sl
 8009b3c:	f7ff f9c3 	bl	8008ec6 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009b40:	2200      	movs	r2, #0
 8009b42:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009b44:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009b46:	4648      	mov	r0, r9
 8009b48:	f7ff f9cb 	bl	8008ee2 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8009b4e:	2200      	movs	r2, #0
 8009b50:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b52:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b54:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8009b56:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8009b58:	9b03      	ldr	r3, [sp, #12]
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8009b5e:	f1b8 0f00 	cmp.w	r8, #0
 8009b62:	d011      	beq.n	8009b88 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8009b64:	4641      	mov	r1, r8
 8009b66:	4630      	mov	r0, r6
						dw = fs->winsect;
 8009b68:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009b6c:	f7ff fd6c 	bl	8009648 <remove_chain>
						if (res == FR_OK) {
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d1bb      	bne.n	8009aec <f_open+0x74>
							res = move_window(fs, dw);
 8009b74:	4649      	mov	r1, r9
 8009b76:	9803      	ldr	r0, [sp, #12]
 8009b78:	f7ff fa32 	bl	8008fe0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b7c:	9a03      	ldr	r2, [sp, #12]
 8009b7e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009b82:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d1b1      	bne.n	8009aec <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009b88:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b8a:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8009b90:	bf48      	it	mi
 8009b92:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b96:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8009b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b9c:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b9e:	bf14      	ite	ne
 8009ba0:	2101      	movne	r1, #1
 8009ba2:	2100      	moveq	r1, #0
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff f8df 	bl	8008d68 <inc_lock>
 8009baa:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d13f      	bne.n	8009c30 <f_open+0x1b8>
 8009bb0:	2002      	movs	r0, #2
 8009bb2:	e79b      	b.n	8009aec <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d199      	bne.n	8009aec <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009bb8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009bbc:	06da      	lsls	r2, r3, #27
 8009bbe:	d467      	bmi.n	8009c90 <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009bc0:	f018 0f02 	tst.w	r8, #2
 8009bc4:	d0e0      	beq.n	8009b88 <f_open+0x110>
 8009bc6:	07db      	lsls	r3, r3, #31
 8009bc8:	d5de      	bpl.n	8009b88 <f_open+0x110>
					res = FR_DENIED;
 8009bca:	2007      	movs	r0, #7
 8009bcc:	e78e      	b.n	8009aec <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8009bce:	6820      	ldr	r0, [r4, #0]
 8009bd0:	f7ff fc72 	bl	80094b8 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8009bd4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8009bd6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8009bd8:	d926      	bls.n	8009c28 <f_open+0x1b0>
 8009bda:	1c42      	adds	r2, r0, #1
 8009bdc:	4250      	negs	r0, r2
 8009bde:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009be0:	eba5 0508 	sub.w	r5, r5, r8
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d04d      	beq.n	8009c84 <f_open+0x20c>
				fp->clust = clst;
 8009be8:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009bea:	2800      	cmp	r0, #0
 8009bec:	f47f af7e 	bne.w	8009aec <f_open+0x74>
 8009bf0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009bf4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009bf8:	fbb5 f2f3 	udiv	r2, r5, r3
 8009bfc:	fb03 5512 	mls	r5, r3, r2, r5
 8009c00:	b175      	cbz	r5, 8009c20 <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c02:	4640      	mov	r0, r8
 8009c04:	f7ff f904 	bl	8008e10 <clust2sect>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d0d1      	beq.n	8009bb0 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c0c:	4402      	add	r2, r0
 8009c0e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	4631      	mov	r1, r6
 8009c14:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009c18:	f7ff f838 	bl	8008c8c <disk_read>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d139      	bne.n	8009c94 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 8009c20:	4638      	mov	r0, r7
 8009c22:	b010      	add	sp, #64	; 0x40
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8009c28:	2002      	movs	r0, #2
 8009c2a:	e7d9      	b.n	8009be0 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8009c2c:	2709      	movs	r7, #9
 8009c2e:	e7f7      	b.n	8009c20 <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009c30:	9e03      	ldr	r6, [sp, #12]
 8009c32:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009c36:	7830      	ldrb	r0, [r6, #0]
 8009c38:	4641      	mov	r1, r8
 8009c3a:	f7ff f944 	bl	8008ec6 <ld_clust.isra.1>
 8009c3e:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009c40:	f108 001c 	add.w	r0, r8, #28
 8009c44:	f7ff f84c 	bl	8008ce0 <ld_dword>
			fp->obj.id = fs->id;
 8009c48:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009c4a:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009c4c:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009c4e:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009c52:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8009c54:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009c56:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8009c58:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8009c5a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009c5c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009c5e:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff f84b 	bl	8008d00 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c6a:	06ab      	lsls	r3, r5, #26
 8009c6c:	d5d8      	bpl.n	8009c20 <f_open+0x1a8>
 8009c6e:	68e5      	ldr	r5, [r4, #12]
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	d0d5      	beq.n	8009c20 <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c74:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c76:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c78:	895a      	ldrh	r2, [r3, #10]
 8009c7a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c7e:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c80:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c84:	45a8      	cmp	r8, r5
 8009c86:	d3a2      	bcc.n	8009bce <f_open+0x156>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	e7ad      	b.n	8009be8 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c8c:	2008      	movs	r0, #8
 8009c8e:	e72d      	b.n	8009aec <f_open+0x74>
					res = FR_NO_FILE;
 8009c90:	2004      	movs	r0, #4
 8009c92:	e72b      	b.n	8009aec <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c94:	2001      	movs	r0, #1
 8009c96:	e729      	b.n	8009aec <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff fe87 	bl	80099ac <dir_register>
 8009c9e:	e722      	b.n	8009ae6 <f_open+0x6e>
 8009ca0:	200015ec 	.word	0x200015ec

08009ca4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca8:	469b      	mov	fp, r3
 8009caa:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009cac:	2300      	movs	r3, #0
{
 8009cae:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8009cb0:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009cb4:	a903      	add	r1, sp, #12
{
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009cba:	f7ff f8e0 	bl	8008e7e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d132      	bne.n	8009d2a <f_write+0x86>
 8009cc4:	7d65      	ldrb	r5, [r4, #21]
 8009cc6:	bb85      	cbnz	r5, 8009d2a <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009cc8:	7d23      	ldrb	r3, [r4, #20]
 8009cca:	079a      	lsls	r2, r3, #30
 8009ccc:	f140 80be 	bpl.w	8009e4c <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009cd0:	69a3      	ldr	r3, [r4, #24]
 8009cd2:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009cd6:	bf28      	it	cs
 8009cd8:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009cdc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009ce0:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8009ce2:	f1b8 0f00 	cmp.w	r8, #0
 8009ce6:	d01c      	beq.n	8009d22 <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009ce8:	9803      	ldr	r0, [sp, #12]
 8009cea:	69a1      	ldr	r1, [r4, #24]
 8009cec:	8983      	ldrh	r3, [r0, #12]
 8009cee:	fbb1 f2f3 	udiv	r2, r1, r3
 8009cf2:	fb03 1312 	mls	r3, r3, r2, r1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f040 8091 	bne.w	8009e1e <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009cfc:	8943      	ldrh	r3, [r0, #10]
 8009cfe:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009d00:	4013      	ands	r3, r2
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	d124      	bne.n	8009d50 <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d06:	b931      	cbnz	r1, 8009d16 <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d08:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d0a:	b9a0      	cbnz	r0, 8009d36 <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d0c:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff fc42 	bl	8009598 <create_chain>
 8009d14:	e004      	b.n	8009d20 <f_write+0x7c>
					if (fp->cltbl) {
 8009d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d18:	b15b      	cbz	r3, 8009d32 <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff f883 	bl	8008e26 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d20:	b948      	cbnz	r0, 8009d36 <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009d22:	7d23      	ldrb	r3, [r4, #20]
 8009d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d28:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	b005      	add	sp, #20
 8009d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d32:	69e1      	ldr	r1, [r4, #28]
 8009d34:	e7eb      	b.n	8009d0e <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d36:	2801      	cmp	r0, #1
 8009d38:	d102      	bne.n	8009d40 <f_write+0x9c>
 8009d3a:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d3c:	7565      	strb	r5, [r4, #21]
 8009d3e:	e7f4      	b.n	8009d2a <f_write+0x86>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d101      	bne.n	8009d48 <f_write+0xa4>
 8009d44:	2501      	movs	r5, #1
 8009d46:	e7f9      	b.n	8009d3c <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009d48:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8009d4a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009d4c:	b903      	cbnz	r3, 8009d50 <f_write+0xac>
 8009d4e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009d50:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da0c      	bge.n	8009d72 <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d58:	9803      	ldr	r0, [sp, #12]
 8009d5a:	6a22      	ldr	r2, [r4, #32]
 8009d5c:	9900      	ldr	r1, [sp, #0]
 8009d5e:	7840      	ldrb	r0, [r0, #1]
 8009d60:	2301      	movs	r3, #1
 8009d62:	f7fe ffa1 	bl	8008ca8 <disk_write>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d1ec      	bne.n	8009d44 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d6a:	7d23      	ldrb	r3, [r4, #20]
 8009d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d70:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d72:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009d76:	69e1      	ldr	r1, [r4, #28]
 8009d78:	4650      	mov	r0, sl
 8009d7a:	f7ff f849 	bl	8008e10 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d0db      	beq.n	8009d3a <f_write+0x96>
			sect += csect;
 8009d82:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009d84:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 8009d88:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8009d8c:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009d8e:	2f00      	cmp	r7, #0
 8009d90:	d034      	beq.n	8009dfc <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d92:	9a01      	ldr	r2, [sp, #4]
 8009d94:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d98:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d9c:	443a      	add	r2, r7
 8009d9e:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8009da0:	bf84      	itt	hi
 8009da2:	9a01      	ldrhi	r2, [sp, #4]
 8009da4:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009da6:	463b      	mov	r3, r7
 8009da8:	4632      	mov	r2, r6
 8009daa:	4649      	mov	r1, r9
 8009dac:	f7fe ff7c 	bl	8008ca8 <disk_write>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d1c7      	bne.n	8009d44 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009db4:	6a21      	ldr	r1, [r4, #32]
 8009db6:	1b89      	subs	r1, r1, r6
 8009db8:	428f      	cmp	r7, r1
 8009dba:	d90b      	bls.n	8009dd4 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 8009dc0:	b122      	cbz	r2, 8009dcc <f_write+0x128>
 8009dc2:	fb02 9101 	mla	r1, r2, r1, r9
 8009dc6:	9800      	ldr	r0, [sp, #0]
 8009dc8:	f7ff f874 	bl	8008eb4 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009dcc:	7d23      	ldrb	r3, [r4, #20]
 8009dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd2:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	899b      	ldrh	r3, [r3, #12]
 8009dd8:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009dda:	69a3      	ldr	r3, [r4, #24]
 8009ddc:	68e2      	ldr	r2, [r4, #12]
 8009dde:	443b      	add	r3, r7
 8009de0:	61a3      	str	r3, [r4, #24]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	bf2c      	ite	cs
 8009de6:	60e2      	strcs	r2, [r4, #12]
 8009de8:	60e3      	strcc	r3, [r4, #12]
 8009dea:	f8db 3000 	ldr.w	r3, [fp]
 8009dee:	443b      	add	r3, r7
 8009df0:	44b9      	add	r9, r7
 8009df2:	f8cb 3000 	str.w	r3, [fp]
 8009df6:	eba8 0807 	sub.w	r8, r8, r7
 8009dfa:	e772      	b.n	8009ce2 <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009dfc:	6a23      	ldr	r3, [r4, #32]
 8009dfe:	429e      	cmp	r6, r3
 8009e00:	d00c      	beq.n	8009e1c <f_write+0x178>
 8009e02:	69a2      	ldr	r2, [r4, #24]
 8009e04:	68e3      	ldr	r3, [r4, #12]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d208      	bcs.n	8009e1c <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4632      	mov	r2, r6
 8009e0e:	9900      	ldr	r1, [sp, #0]
 8009e10:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8009e14:	f7fe ff3a 	bl	8008c8c <disk_read>
				fp->fptr < fp->obj.objsize &&
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d193      	bne.n	8009d44 <f_write+0xa0>
			fp->sect = sect;
 8009e1c:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	899f      	ldrh	r7, [r3, #12]
 8009e22:	69a3      	ldr	r3, [r4, #24]
 8009e24:	fbb3 f0f7 	udiv	r0, r3, r7
 8009e28:	fb07 3010 	mls	r0, r7, r0, r3
 8009e2c:	1a3f      	subs	r7, r7, r0
 8009e2e:	4547      	cmp	r7, r8
 8009e30:	bf28      	it	cs
 8009e32:	4647      	movcs	r7, r8
	if (cnt) {
 8009e34:	b12f      	cbz	r7, 8009e42 <f_write+0x19e>
 8009e36:	9b00      	ldr	r3, [sp, #0]
 8009e38:	463a      	mov	r2, r7
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4418      	add	r0, r3
 8009e3e:	f7ff f839 	bl	8008eb4 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8009e42:	7d23      	ldrb	r3, [r4, #20]
 8009e44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e48:	7523      	strb	r3, [r4, #20]
 8009e4a:	e7c6      	b.n	8009dda <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009e4c:	2507      	movs	r5, #7
 8009e4e:	e76c      	b.n	8009d2a <f_write+0x86>

08009e50 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009e52:	a901      	add	r1, sp, #4
{
 8009e54:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009e56:	f7ff f812 	bl	8008e7e <validate>
	if (res == FR_OK) {
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d13a      	bne.n	8009ed6 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009e60:	7d23      	ldrb	r3, [r4, #20]
 8009e62:	065a      	lsls	r2, r3, #25
 8009e64:	d537      	bpl.n	8009ed6 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009e66:	061b      	lsls	r3, r3, #24
 8009e68:	d50c      	bpl.n	8009e84 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009e6a:	9801      	ldr	r0, [sp, #4]
 8009e6c:	6a22      	ldr	r2, [r4, #32]
 8009e6e:	7840      	ldrb	r0, [r0, #1]
 8009e70:	2301      	movs	r3, #1
 8009e72:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009e76:	f7fe ff17 	bl	8008ca8 <disk_write>
 8009e7a:	bb78      	cbnz	r0, 8009edc <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e7c:	7d23      	ldrb	r3, [r4, #20]
 8009e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e82:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009e84:	f012 fc16 	bl	801c6b4 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009e88:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8009e8a:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8009e8c:	9801      	ldr	r0, [sp, #4]
 8009e8e:	f7ff f8a7 	bl	8008fe0 <move_window>
				if (res == FR_OK) {
 8009e92:	4605      	mov	r5, r0
 8009e94:	b9f8      	cbnz	r0, 8009ed6 <f_sync+0x86>
					dir = fp->dir_ptr;
 8009e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009e98:	7af3      	ldrb	r3, [r6, #11]
 8009e9a:	f043 0320 	orr.w	r3, r3, #32
 8009e9e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009ea0:	68a2      	ldr	r2, [r4, #8]
 8009ea2:	6820      	ldr	r0, [r4, #0]
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	f7ff f81c 	bl	8008ee2 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009eaa:	68e1      	ldr	r1, [r4, #12]
 8009eac:	f106 001c 	add.w	r0, r6, #28
 8009eb0:	f7fe ff1e 	bl	8008cf0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	f106 0016 	add.w	r0, r6, #22
 8009eba:	f7fe ff19 	bl	8008cf0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8009ebe:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ec0:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8009ec2:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8009ec4:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8009ec6:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009ec8:	f7ff f840 	bl	8008f4c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009ecc:	7d23      	ldrb	r3, [r4, #20]
 8009ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8009ed2:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009ed4:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	b003      	add	sp, #12
 8009eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009edc:	2501      	movs	r5, #1
 8009ede:	e7fa      	b.n	8009ed6 <f_sync+0x86>

08009ee0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ee0:	b513      	push	{r0, r1, r4, lr}
 8009ee2:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ee4:	f7ff ffb4 	bl	8009e50 <f_sync>
	if (res == FR_OK)
 8009ee8:	b948      	cbnz	r0, 8009efe <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009eea:	a901      	add	r1, sp, #4
 8009eec:	4620      	mov	r0, r4
 8009eee:	f7fe ffc6 	bl	8008e7e <validate>
		if (res == FR_OK) {
 8009ef2:	b920      	cbnz	r0, 8009efe <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009ef4:	6920      	ldr	r0, [r4, #16]
 8009ef6:	f7fe ff73 	bl	8008de0 <dec_lock>
			if (res == FR_OK)
 8009efa:	b900      	cbnz	r0, 8009efe <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009efc:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009efe:	b002      	add	sp, #8
 8009f00:	bd10      	pop	{r4, pc}
	...

08009f04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f04:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009f06:	4b0f      	ldr	r3, [pc, #60]	; (8009f44 <FATFS_LinkDriverEx+0x40>)
 8009f08:	7a5d      	ldrb	r5, [r3, #9]
 8009f0a:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8009f0e:	b9b5      	cbnz	r5, 8009f3e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f10:	7a5d      	ldrb	r5, [r3, #9]
 8009f12:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009f14:	7a5d      	ldrb	r5, [r3, #9]
 8009f16:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009f1a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009f1c:	7a58      	ldrb	r0, [r3, #9]
 8009f1e:	4418      	add	r0, r3
 8009f20:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009f22:	7a5a      	ldrb	r2, [r3, #9]
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	1c50      	adds	r0, r2, #1
 8009f28:	b2c0      	uxtb	r0, r0
 8009f2a:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8009f2c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8009f2e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009f30:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009f32:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8009f34:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8009f36:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009f38:	70cc      	strb	r4, [r1, #3]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009f3e:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8009f40:	bd30      	pop	{r4, r5, pc}
 8009f42:	bf00      	nop
 8009f44:	20001610 	.word	0x20001610

08009f48 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f7ff bfdb 	b.w	8009f04 <FATFS_LinkDriverEx>
	...

08009f50 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <FATFS_UnLinkDriverEx+0x2c>)
 8009f52:	7a53      	ldrb	r3, [r2, #9]
 8009f54:	b17b      	cbz	r3, 8009f76 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8009f56:	7803      	ldrb	r3, [r0, #0]
 8009f58:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009f60:	6848      	ldr	r0, [r1, #4]
 8009f62:	b140      	cbz	r0, 8009f76 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8009f64:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8009f66:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8009f68:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8009f6a:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8009f6c:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	7253      	strb	r3, [r2, #9]
 8009f74:	4770      	bx	lr
  uint8_t ret = 1;
 8009f76:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	20001610 	.word	0x20001610

08009f80 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8009f80:	2100      	movs	r1, #0
 8009f82:	f7ff bfe5 	b.w	8009f50 <FATFS_UnLinkDriverEx>
	...

08009f88 <BlueTooth_GPIO_Init>:

void BlueTooth_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009f88:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <BlueTooth_GPIO_Init+0x50>)
{
 8009f8a:	b530      	push	{r4, r5, lr}
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	/* PB8 - Res 3 (BT Vcc enable pin), PB9 - Res 4 (BT programming pin) */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f8e:	4d13      	ldr	r5, [pc, #76]	; (8009fdc <BlueTooth_GPIO_Init+0x54>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009f90:	f042 0202 	orr.w	r2, r2, #2
 8009f94:	64da      	str	r2, [r3, #76]	; 0x4c
 8009f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8009f98:	b087      	sub	sp, #28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8009fa2:	f44f 7340 	mov.w	r3, #768	; 0x300
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa6:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8009fa8:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009faa:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fac:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fae:	4628      	mov	r0, r5
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fb0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb2:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fb4:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fb6:	f7f8 fa29 	bl	800240c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009fba:	4622      	mov	r2, r4
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009fc2:	f7f8 fb99 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fcc:	4628      	mov	r0, r5
 8009fce:	f7f8 fb93 	bl	80026f8 <HAL_GPIO_WritePin>
}
 8009fd2:	b007      	add	sp, #28
 8009fd4:	bd30      	pop	{r4, r5, pc}
 8009fd6:	bf00      	nop
 8009fd8:	40021000 	.word	0x40021000
 8009fdc:	48000400 	.word	0x48000400

08009fe0 <BlueTooth_On>:

void BlueTooth_On(void)
{
 8009fe0:	b510      	push	{r4, lr}

	////////////////////////////////////
	HAL_UART_MspDeInit(&huart1);
 8009fe2:	4c10      	ldr	r4, [pc, #64]	; (800a024 <BlueTooth_On+0x44>)
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f015 ff87 	bl	801fef8 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7fc fbee 	bl	80067cc <HAL_UART_DeInit>

	huart1.Init.BaudRate = BT_BAUD_RATE;
 8009ff0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ff4:	4620      	mov	r0, r4
	huart1.Init.BaudRate = BT_BAUD_RATE;
 8009ff6:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ff8:	f7fd f94e 	bl	8007298 <HAL_UART_Init>
 8009ffc:	b118      	cbz	r0, 800a006 <BlueTooth_On+0x26>
	{
		Error_Handler();
 8009ffe:	2121      	movs	r1, #33	; 0x21
 800a000:	4809      	ldr	r0, [pc, #36]	; (800a028 <BlueTooth_On+0x48>)
 800a002:	f015 fd47 	bl	801fa94 <_Error_Handler>
	}

	HAL_UART_MspInit(&huart1);
 800a006:	4807      	ldr	r0, [pc, #28]	; (800a024 <BlueTooth_On+0x44>)
 800a008:	f015 fec8 	bl	801fd9c <HAL_UART_MspInit>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_SET);
 800a00c:	4807      	ldr	r0, [pc, #28]	; (800a02c <BlueTooth_On+0x4c>)
 800a00e:	2201      	movs	r2, #1
 800a010:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a014:	f7f8 fb70 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800a018:	2003      	movs	r0, #3

}
 800a01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(3);
 800a01e:	f7f7 b805 	b.w	800102c <HAL_Delay>
 800a022:	bf00      	nop
 800a024:	20095abc 	.word	0x20095abc
 800a028:	080255c1 	.word	0x080255c1
 800a02c:	48000400 	.word	0x48000400

0800a030 <BlueTooth_Off>:

void BlueTooth_Off(void)
{
 800a030:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 800a032:	2200      	movs	r2, #0
 800a034:	f44f 7180 	mov.w	r1, #256	; 0x100
	HAL_Delay(3);
	HAL_UART_MspDeInit(&huart1);
 800a038:	4c07      	ldr	r4, [pc, #28]	; (800a058 <BlueTooth_Off+0x28>)
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 800a03a:	4808      	ldr	r0, [pc, #32]	; (800a05c <BlueTooth_Off+0x2c>)
 800a03c:	f7f8 fb5c 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800a040:	2003      	movs	r0, #3
 800a042:	f7f6 fff3 	bl	800102c <HAL_Delay>
	HAL_UART_MspDeInit(&huart1);
 800a046:	4620      	mov	r0, r4
 800a048:	f015 ff56 	bl	801fef8 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 800a04c:	4620      	mov	r0, r4

}
 800a04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DeInit(&huart1);
 800a052:	f7fc bbbb 	b.w	80067cc <HAL_UART_DeInit>
 800a056:	bf00      	nop
 800a058:	20095abc 	.word	0x20095abc
 800a05c:	48000400 	.word	0x48000400

0800a060 <BlueTooth_AT_Mode>:

void BlueTooth_AT_Mode(void)
{
 800a060:	b510      	push	{r4, lr}

	HAL_UART_MspDeInit(&huart1);
 800a062:	4c19      	ldr	r4, [pc, #100]	; (800a0c8 <BlueTooth_AT_Mode+0x68>)
 800a064:	4620      	mov	r0, r4
 800a066:	f015 ff47 	bl	801fef8 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 800a06a:	4620      	mov	r0, r4
 800a06c:	f7fc fbae 	bl	80067cc <HAL_UART_DeInit>

	huart1.Init.BaudRate = 38400;
 800a070:	f44f 4316 	mov.w	r3, #38400	; 0x9600
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800a074:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 38400;
 800a076:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800a078:	f7fd f90e 	bl	8007298 <HAL_UART_Init>
 800a07c:	b118      	cbz	r0, 800a086 <BlueTooth_AT_Mode+0x26>
	{
	_Error_Handler(__FILE__, __LINE__);
 800a07e:	213d      	movs	r1, #61	; 0x3d
 800a080:	4812      	ldr	r0, [pc, #72]	; (800a0cc <BlueTooth_AT_Mode+0x6c>)
 800a082:	f015 fd07 	bl	801fa94 <_Error_Handler>
	}

	HAL_UART_MspInit(&huart1);
 800a086:	4810      	ldr	r0, [pc, #64]	; (800a0c8 <BlueTooth_AT_Mode+0x68>)
 800a088:	f015 fe88 	bl	801fd9c <HAL_UART_MspInit>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 800a08c:	2200      	movs	r2, #0
 800a08e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a092:	480f      	ldr	r0, [pc, #60]	; (800a0d0 <BlueTooth_AT_Mode+0x70>)
 800a094:	f7f8 fb30 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800a098:	200a      	movs	r0, #10
 800a09a:	f7f6 ffc7 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_SET);
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0a4:	480a      	ldr	r0, [pc, #40]	; (800a0d0 <BlueTooth_AT_Mode+0x70>)
 800a0a6:	f7f8 fb27 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800a0aa:	200a      	movs	r0, #10
 800a0ac:	f7f6 ffbe 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_SET);
 800a0b0:	4807      	ldr	r0, [pc, #28]	; (800a0d0 <BlueTooth_AT_Mode+0x70>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0b8:	f7f8 fb1e 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800a0bc:	200a      	movs	r0, #10

}
 800a0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(10);
 800a0c2:	f7f6 bfb3 	b.w	800102c <HAL_Delay>
 800a0c6:	bf00      	nop
 800a0c8:	20095abc 	.word	0x20095abc
 800a0cc:	080255c1 	.word	0x080255c1
 800a0d0:	48000400 	.word	0x48000400

0800a0d4 <BlueTooth_Param_Init>:

void BlueTooth_Param_Init(uint32_t baud_rate, uint8_t stop_bit, uint8_t parity)
{
 800a0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d6:	b08d      	sub	sp, #52	; 0x34
	uint8_t buf[32]={0}, *p;
 800a0d8:	ac04      	add	r4, sp, #16
{
 800a0da:	4605      	mov	r5, r0
 800a0dc:	460e      	mov	r6, r1
 800a0de:	4617      	mov	r7, r2
	uint8_t buf[32]={0}, *p;
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f016 fc0c 	bl	8020902 <memset>
	char str[] = "AT+UART";
 800a0ea:	490f      	ldr	r1, [pc, #60]	; (800a128 <BlueTooth_Param_Init+0x54>)
 800a0ec:	6808      	ldr	r0, [r1, #0]
 800a0ee:	6849      	ldr	r1, [r1, #4]
 800a0f0:	aa02      	add	r2, sp, #8
 800a0f2:	c203      	stmia	r2!, {r0, r1}

	sprintf(buf, "%s=%d,%d,%d\r\n", str, baud_rate, stop_bit, parity);
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	aa02      	add	r2, sp, #8
 800a0f8:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800a0fc:	490b      	ldr	r1, [pc, #44]	; (800a12c <BlueTooth_Param_Init+0x58>)
 800a0fe:	4620      	mov	r0, r4
 800a100:	f016 fc08 	bl	8020914 <sprintf>

	p = strchr(buf, '\n');
 800a104:	210a      	movs	r1, #10
 800a106:	4620      	mov	r0, r4
 800a108:	f016 fc37 	bl	802097a <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 800a10c:	1b02      	subs	r2, r0, r4
 800a10e:	3201      	adds	r2, #1
 800a110:	230a      	movs	r3, #10
 800a112:	b292      	uxth	r2, r2
 800a114:	4621      	mov	r1, r4
 800a116:	4806      	ldr	r0, [pc, #24]	; (800a130 <BlueTooth_Param_Init+0x5c>)
 800a118:	f7fc ffc3 	bl	80070a2 <HAL_UART_Transmit>
	HAL_Delay(10);
 800a11c:	200a      	movs	r0, #10
 800a11e:	f7f6 ff85 	bl	800102c <HAL_Delay>
//	sprintf(buf, "%s%s", str, "?");

}
 800a122:	b00d      	add	sp, #52	; 0x34
 800a124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a126:	bf00      	nop
 800a128:	080255e2 	.word	0x080255e2
 800a12c:	080255d4 	.word	0x080255d4
 800a130:	20095abc 	.word	0x20095abc

0800a134 <BlueTooth_Module_Name>:

void BlueTooth_Module_Name(char* name)
{
 800a134:	b530      	push	{r4, r5, lr}
 800a136:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buf[32]={0}, *p;
 800a138:	ac02      	add	r4, sp, #8
{
 800a13a:	4605      	mov	r5, r0
	uint8_t buf[32]={0}, *p;
 800a13c:	2220      	movs	r2, #32
 800a13e:	2100      	movs	r1, #0
 800a140:	4620      	mov	r0, r4
 800a142:	f016 fbde 	bl	8020902 <memset>
	char str[] = "AT+NAME";
 800a146:	490e      	ldr	r1, [pc, #56]	; (800a180 <BlueTooth_Module_Name+0x4c>)
 800a148:	6808      	ldr	r0, [r1, #0]
 800a14a:	6849      	ldr	r1, [r1, #4]
 800a14c:	466a      	mov	r2, sp
 800a14e:	c203      	stmia	r2!, {r0, r1}

	sprintf(buf, "%s=%s\r\n", str, name);
 800a150:	462b      	mov	r3, r5
 800a152:	466a      	mov	r2, sp
 800a154:	490b      	ldr	r1, [pc, #44]	; (800a184 <BlueTooth_Module_Name+0x50>)
 800a156:	4620      	mov	r0, r4
 800a158:	f016 fbdc 	bl	8020914 <sprintf>

	p = strchr(buf, '\n');
 800a15c:	210a      	movs	r1, #10
 800a15e:	4620      	mov	r0, r4
 800a160:	f016 fc0b 	bl	802097a <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 800a164:	1b02      	subs	r2, r0, r4
 800a166:	3201      	adds	r2, #1
 800a168:	230a      	movs	r3, #10
 800a16a:	b292      	uxth	r2, r2
 800a16c:	4621      	mov	r1, r4
 800a16e:	4806      	ldr	r0, [pc, #24]	; (800a188 <BlueTooth_Module_Name+0x54>)
 800a170:	f7fc ff97 	bl	80070a2 <HAL_UART_Transmit>
	HAL_Delay(10);
 800a174:	200a      	movs	r0, #10
 800a176:	f7f6 ff59 	bl	800102c <HAL_Delay>
}
 800a17a:	b00b      	add	sp, #44	; 0x2c
 800a17c:	bd30      	pop	{r4, r5, pc}
 800a17e:	bf00      	nop
 800a180:	080255b9 	.word	0x080255b9
 800a184:	080255b1 	.word	0x080255b1
 800a188:	20095abc 	.word	0x20095abc

0800a18c <BlueTooth_Set_PIN>:

void BlueTooth_Set_PIN(char* pass)
{
 800a18c:	b530      	push	{r4, r5, lr}
 800a18e:	b08d      	sub	sp, #52	; 0x34
	uint8_t buf[32]={0}, *p;
 800a190:	ac04      	add	r4, sp, #16
{
 800a192:	4605      	mov	r5, r0
	uint8_t buf[32]={0}, *p;
 800a194:	2220      	movs	r2, #32
 800a196:	2100      	movs	r1, #0
 800a198:	4620      	mov	r0, r4
 800a19a:	f016 fbb2 	bl	8020902 <memset>
	char str[] = "AT+PSWD";
 800a19e:	4a0f      	ldr	r2, [pc, #60]	; (800a1dc <BlueTooth_Set_PIN+0x50>)
 800a1a0:	6810      	ldr	r0, [r2, #0]
 800a1a2:	6851      	ldr	r1, [r2, #4]
 800a1a4:	ab02      	add	r3, sp, #8
 800a1a6:	c303      	stmia	r3!, {r0, r1}

	sprintf(buf, "%s=%c%s%c\r\n", str,'"', pass,'"');
 800a1a8:	2322      	movs	r3, #34	; 0x22
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	aa02      	add	r2, sp, #8
 800a1ae:	9500      	str	r5, [sp, #0]
 800a1b0:	490b      	ldr	r1, [pc, #44]	; (800a1e0 <BlueTooth_Set_PIN+0x54>)
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f016 fbae 	bl	8020914 <sprintf>

	p = strchr(buf, '\n');
 800a1b8:	210a      	movs	r1, #10
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f016 fbdd 	bl	802097a <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 800a1c0:	1b02      	subs	r2, r0, r4
 800a1c2:	3201      	adds	r2, #1
 800a1c4:	230a      	movs	r3, #10
 800a1c6:	b292      	uxth	r2, r2
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4806      	ldr	r0, [pc, #24]	; (800a1e4 <BlueTooth_Set_PIN+0x58>)
 800a1cc:	f7fc ff69 	bl	80070a2 <HAL_UART_Transmit>
	HAL_Delay(10);
 800a1d0:	200a      	movs	r0, #10
 800a1d2:	f7f6 ff2b 	bl	800102c <HAL_Delay>

}
 800a1d6:	b00d      	add	sp, #52	; 0x34
 800a1d8:	bd30      	pop	{r4, r5, pc}
 800a1da:	bf00      	nop
 800a1dc:	080255f6 	.word	0x080255f6
 800a1e0:	080255ea 	.word	0x080255ea
 800a1e4:	20095abc 	.word	0x20095abc

0800a1e8 <Bluetooth_Reset>:

void Bluetooth_Reset(void)
{
 800a1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char str[] = "AT+RESET\r\n";
 800a1ea:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <Bluetooth_Reset+0x2c>)
 800a1ec:	6810      	ldr	r0, [r2, #0]
 800a1ee:	6851      	ldr	r1, [r2, #4]
 800a1f0:	ab01      	add	r3, sp, #4
 800a1f2:	c303      	stmia	r3!, {r0, r1}
 800a1f4:	8911      	ldrh	r1, [r2, #8]
 800a1f6:	7a92      	ldrb	r2, [r2, #10]
 800a1f8:	8019      	strh	r1, [r3, #0]
 800a1fa:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(&huart1, (uint8_t *)&str, sizeof(str), 10);
 800a1fc:	a901      	add	r1, sp, #4
 800a1fe:	230a      	movs	r3, #10
 800a200:	220b      	movs	r2, #11
 800a202:	4805      	ldr	r0, [pc, #20]	; (800a218 <Bluetooth_Reset+0x30>)
 800a204:	f7fc ff4d 	bl	80070a2 <HAL_UART_Transmit>
	HAL_Delay(10);
 800a208:	200a      	movs	r0, #10
 800a20a:	f7f6 ff0f 	bl	800102c <HAL_Delay>
}
 800a20e:	b005      	add	sp, #20
 800a210:	f85d fb04 	ldr.w	pc, [sp], #4
 800a214:	080255fe 	.word	0x080255fe
 800a218:	20095abc 	.word	0x20095abc

0800a21c <BlueTooth_Module_Init>:

void BlueTooth_Module_Init(void)
{
 800a21c:	b510      	push	{r4, lr}


	BlueTooth_GPIO_Init();
 800a21e:	f7ff feb3 	bl	8009f88 <BlueTooth_GPIO_Init>
	BlueTooth_AT_Mode();
 800a222:	f7ff ff1d 	bl	800a060 <BlueTooth_AT_Mode>
	HAL_Delay(1000);
 800a226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a22a:	f7f6 feff 	bl	800102c <HAL_Delay>
	BlueTooth_Param_Init(BT_BAUD_RATE, 1, 0);
 800a22e:	2200      	movs	r2, #0
 800a230:	2101      	movs	r1, #1
 800a232:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800a236:	f7ff ff4d 	bl	800a0d4 <BlueTooth_Param_Init>
	BlueTooth_Module_Name("TKA_SPECTR");
	BlueTooth_Set_PIN("1488");
	Bluetooth_Reset();

	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 800a23a:	4c0e      	ldr	r4, [pc, #56]	; (800a274 <BlueTooth_Module_Init+0x58>)
	BlueTooth_Module_Name("TKA_SPECTR");
 800a23c:	480e      	ldr	r0, [pc, #56]	; (800a278 <BlueTooth_Module_Init+0x5c>)
 800a23e:	f7ff ff79 	bl	800a134 <BlueTooth_Module_Name>
	BlueTooth_Set_PIN("1488");
 800a242:	480e      	ldr	r0, [pc, #56]	; (800a27c <BlueTooth_Module_Init+0x60>)
 800a244:	f7ff ffa2 	bl	800a18c <BlueTooth_Set_PIN>
	Bluetooth_Reset();
 800a248:	f7ff ffce 	bl	800a1e8 <Bluetooth_Reset>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 800a24c:	2200      	movs	r2, #0
 800a24e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a252:	4620      	mov	r0, r4
 800a254:	f7f8 fa50 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a258:	2064      	movs	r0, #100	; 0x64
 800a25a:	f7f6 fee7 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 800a25e:	4620      	mov	r0, r4
 800a260:	2200      	movs	r2, #0
 800a262:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a266:	f7f8 fa47 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a26a:	2064      	movs	r0, #100	; 0x64


}
 800a26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 800a270:	f7f6 bedc 	b.w	800102c <HAL_Delay>
 800a274:	48000400 	.word	0x48000400
 800a278:	080255a1 	.word	0x080255a1
 800a27c:	080255ac 	.word	0x080255ac

0800a280 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 800a280:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800a282:	f7f6 f967 	bl	8000554 <__aeabi_i2d>
 800a286:	a316      	add	r3, pc, #88	; (adr r3, 800a2e0 <calcNorm560+0x60>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	f7f6 f9c8 	bl	8000620 <__aeabi_dmul>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	a114      	add	r1, pc, #80	; (adr r1, 800a2e8 <calcNorm560+0x68>)
 800a296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a29a:	f7f6 faeb 	bl	8000874 <__aeabi_ddiv>
 800a29e:	ec41 0b10 	vmov	d0, r0, r1
 800a2a2:	f019 fb75 	bl	8023990 <exp>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	ec51 0b10 	vmov	r0, r1, d0
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <calcNorm560+0x58>)
 800a2ae:	f7f6 f803 	bl	80002b8 <__aeabi_dsub>
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	a106      	add	r1, pc, #24	; (adr r1, 800a2d0 <calcNorm560+0x50>)
 800a2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2bc:	f7f6 fada 	bl	8000874 <__aeabi_ddiv>
 800a2c0:	f7f6 fca6 	bl	8000c10 <__aeabi_d2f>
 800a2c4:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <calcNorm560+0x5c>)
 800a2c6:	6018      	str	r0, [r3, #0]
 800a2c8:	bd08      	pop	{r3, pc}
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	f9f35846 	.word	0xf9f35846
 800a2d4:	466ca5d1 	.word	0x466ca5d1
 800a2d8:	3ff00000 	.word	0x3ff00000
 800a2dc:	20090870 	.word	0x20090870
 800a2e0:	05ea7ab3 	.word	0x05ea7ab3
 800a2e4:	3ea2ca5d 	.word	0x3ea2ca5d
 800a2e8:	aba38759 	.word	0xaba38759
 800a2ec:	3f8d7774 	.word	0x3f8d7774

0800a2f0 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 800a2f4:	f241 3387 	movw	r3, #4999	; 0x1387
 800a2f8:	4299      	cmp	r1, r3
{
 800a2fa:	460e      	mov	r6, r1
 800a2fc:	ea4f 0080 	mov.w	r0, r0, lsl #2
 800a300:	4c3b      	ldr	r4, [pc, #236]	; (800a3f0 <calcSref+0x100>)
	if (CCT_measure < 5000)
 800a302:	d84d      	bhi.n	800a3a0 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800a304:	4d3b      	ldr	r5, [pc, #236]	; (800a3f4 <calcSref+0x104>)
 800a306:	4405      	add	r5, r0
 800a308:	6828      	ldr	r0, [r5, #0]
 800a30a:	f7f6 f935 	bl	8000578 <__aeabi_f2d>
 800a30e:	a332      	add	r3, pc, #200	; (adr r3, 800a3d8 <calcSref+0xe8>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f6 f984 	bl	8000620 <__aeabi_dmul>
 800a318:	4680      	mov	r8, r0
 800a31a:	4630      	mov	r0, r6
 800a31c:	4689      	mov	r9, r1
 800a31e:	f7f6 f919 	bl	8000554 <__aeabi_i2d>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4640      	mov	r0, r8
 800a328:	4649      	mov	r1, r9
 800a32a:	f7f6 f979 	bl	8000620 <__aeabi_dmul>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	a12b      	add	r1, pc, #172	; (adr r1, 800a3e0 <calcSref+0xf0>)
 800a334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a338:	f7f6 fa9c 	bl	8000874 <__aeabi_ddiv>
 800a33c:	ec41 0b10 	vmov	d0, r0, r1
 800a340:	f019 fb26 	bl	8023990 <exp>
 800a344:	2200      	movs	r2, #0
 800a346:	ec51 0b10 	vmov	r0, r1, d0
 800a34a:	4b2b      	ldr	r3, [pc, #172]	; (800a3f8 <calcSref+0x108>)
 800a34c:	f7f5 ffb4 	bl	80002b8 <__aeabi_dsub>
 800a350:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a354:	6828      	ldr	r0, [r5, #0]
 800a356:	f7f6 f90f 	bl	8000578 <__aeabi_f2d>
 800a35a:	a31f      	add	r3, pc, #124	; (adr r3, 800a3d8 <calcSref+0xe8>)
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f7f6 f95e 	bl	8000620 <__aeabi_dmul>
 800a364:	ed9f 1b20 	vldr	d1, [pc, #128]	; 800a3e8 <calcSref+0xf8>
 800a368:	ec41 0b10 	vmov	d0, r0, r1
 800a36c:	f019 fc0c 	bl	8023b88 <pow>
 800a370:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a374:	ec51 0b10 	vmov	r0, r1, d0
 800a378:	f7f6 fa7c 	bl	8000874 <__aeabi_ddiv>
		ans /= norm_560;
 800a37c:	4b1f      	ldr	r3, [pc, #124]	; (800a3fc <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a37e:	4606      	mov	r6, r0
		ans /= norm_560;
 800a380:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a382:	460f      	mov	r7, r1
		ans /= norm_560;
 800a384:	f7f6 f8f8 	bl	8000578 <__aeabi_f2d>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f6 fa70 	bl	8000874 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 800a394:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 800a398:	ed94 0b00 	vldr	d0, [r4]
 800a39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 800a3a0:	4a17      	ldr	r2, [pc, #92]	; (800a400 <calcSref+0x110>)
 800a3a2:	4b18      	ldr	r3, [pc, #96]	; (800a404 <calcSref+0x114>)
 800a3a4:	4918      	ldr	r1, [pc, #96]	; (800a408 <calcSref+0x118>)
 800a3a6:	4403      	add	r3, r0
 800a3a8:	4401      	add	r1, r0
 800a3aa:	4410      	add	r0, r2
 800a3ac:	4a17      	ldr	r2, [pc, #92]	; (800a40c <calcSref+0x11c>)
 800a3ae:	edd1 6a00 	vldr	s13, [r1]
 800a3b2:	ed92 7a00 	vldr	s14, [r2]
 800a3b6:	edd0 7a00 	vldr	s15, [r0]
 800a3ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a3be:	edd3 6a00 	vldr	s13, [r3]
 800a3c2:	4b13      	ldr	r3, [pc, #76]	; (800a410 <calcSref+0x120>)
 800a3c4:	ed93 7a00 	vldr	s14, [r3]
 800a3c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a3cc:	ee17 0a90 	vmov	r0, s15
 800a3d0:	f7f6 f8d2 	bl	8000578 <__aeabi_f2d>
 800a3d4:	e7de      	b.n	800a394 <calcSref+0xa4>
 800a3d6:	bf00      	nop
 800a3d8:	e826d695 	.word	0xe826d695
 800a3dc:	3e112e0b 	.word	0x3e112e0b
 800a3e0:	aba38759 	.word	0xaba38759
 800a3e4:	3f8d7774 	.word	0x3f8d7774
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	c0140000 	.word	0xc0140000
 800a3f0:	20003638 	.word	0x20003638
 800a3f4:	20054948 	.word	0x20054948
 800a3f8:	3ff00000 	.word	0x3ff00000
 800a3fc:	20090870 	.word	0x20090870
 800a400:	2004e93c 	.word	0x2004e93c
 800a404:	2005093c 	.word	0x2005093c
 800a408:	2004f93c 	.word	0x2004f93c
 800a40c:	2000361c 	.word	0x2000361c
 800a410:	20003620 	.word	0x20003620
 800a414:	00000000 	.word	0x00000000

0800a418 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	ed2d 8b0a 	vpush	{d8-d12}
 800a420:	b0af      	sub	sp, #188	; 0xbc
 800a422:	460c      	mov	r4, r1
 800a424:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 800a426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a42a:	2100      	movs	r1, #0
 800a42c:	48c4      	ldr	r0, [pc, #784]	; (800a740 <cqs_func+0x328>)
 800a42e:	f016 fa68 	bl	8020902 <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a436:	2100      	movs	r1, #0
 800a438:	48c2      	ldr	r0, [pc, #776]	; (800a744 <cqs_func+0x32c>)
 800a43a:	f016 fa62 	bl	8020902 <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 800a43e:	4bc2      	ldr	r3, [pc, #776]	; (800a748 <cqs_func+0x330>)
 800a440:	ed93 7a00 	vldr	s14, [r3]
 800a444:	4bbe      	ldr	r3, [pc, #760]	; (800a740 <cqs_func+0x328>)
 800a446:	4621      	mov	r1, r4
 800a448:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800a44c:	ecf1 6a01 	vldmia	r1!, {s13}
 800a450:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 800a454:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 800a456:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 800a45a:	d1f7      	bne.n	800a44c <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 800a45c:	9a04      	ldr	r2, [sp, #16]
 800a45e:	f640 53ab 	movw	r3, #3499	; 0xdab
 800a462:	429a      	cmp	r2, r3
 800a464:	f200 870d 	bhi.w	800b282 <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 800a468:	ee07 2a90 	vmov	s15, r2
 800a46c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800a470:	ee68 8a08 	vmul.f32	s17, s16, s16
 800a474:	ee68 7a28 	vmul.f32	s15, s16, s17
 800a478:	ee17 0a90 	vmov	r0, s15
 800a47c:	f7f6 f87c 	bl	8000578 <__aeabi_f2d>
 800a480:	a3a3      	add	r3, pc, #652	; (adr r3, 800a710 <cqs_func+0x2f8>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f6 f8cb 	bl	8000620 <__aeabi_dmul>
 800a48a:	4604      	mov	r4, r0
 800a48c:	ee18 0a90 	vmov	r0, s17
 800a490:	460d      	mov	r5, r1
 800a492:	f7f6 f871 	bl	8000578 <__aeabi_f2d>
 800a496:	a3a0      	add	r3, pc, #640	; (adr r3, 800a718 <cqs_func+0x300>)
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	f7f6 f8c0 	bl	8000620 <__aeabi_dmul>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f7f5 ff06 	bl	80002b8 <__aeabi_dsub>
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	ee18 0a10 	vmov	r0, s16
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	f7f6 f860 	bl	8000578 <__aeabi_f2d>
 800a4b8:	a399      	add	r3, pc, #612	; (adr r3, 800a720 <cqs_func+0x308>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f6 f8af 	bl	8000620 <__aeabi_dmul>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7f5 fef7 	bl	80002bc <__adddf3>
 800a4ce:	a396      	add	r3, pc, #600	; (adr r3, 800a728 <cqs_func+0x310>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7f5 fef0 	bl	80002b8 <__aeabi_dsub>
 800a4d8:	4b9c      	ldr	r3, [pc, #624]	; (800a74c <cqs_func+0x334>)
 800a4da:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 800a4de:	9804      	ldr	r0, [sp, #16]
 800a4e0:	f7ff fece 	bl	800a280 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 800a4e4:	a192      	add	r1, pc, #584	; (adr r1, 800a730 <cqs_func+0x318>)
 800a4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ea:	4b99      	ldr	r3, [pc, #612]	; (800a750 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 800a4ec:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800a754 <cqs_func+0x33c>
	bar_CQS = 0.2;
 800a4f0:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 800a4f4:	210d      	movs	r1, #13
 800a4f6:	2055      	movs	r0, #85	; 0x55
 800a4f8:	f009 f988 	bl	801380c <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 800a4fc:	2278      	movs	r2, #120	; 0x78
 800a4fe:	2100      	movs	r1, #0
 800a500:	4895      	ldr	r0, [pc, #596]	; (800a758 <cqs_func+0x340>)
 800a502:	f016 f9fe 	bl	8020902 <memset>
	memset(y_ref, 0, sizeof(y_ref));
 800a506:	2278      	movs	r2, #120	; 0x78
 800a508:	2100      	movs	r1, #0
 800a50a:	4894      	ldr	r0, [pc, #592]	; (800a75c <cqs_func+0x344>)
 800a50c:	f016 f9f9 	bl	8020902 <memset>
	memset(z_ref, 0, sizeof(z_ref));
 800a510:	2278      	movs	r2, #120	; 0x78
 800a512:	2100      	movs	r1, #0
 800a514:	4892      	ldr	r0, [pc, #584]	; (800a760 <cqs_func+0x348>)
 800a516:	f016 f9f4 	bl	8020902 <memset>
	double zw_test = 0;
 800a51a:	f04f 0a00 	mov.w	sl, #0
 800a51e:	f04f 0b00 	mov.w	fp, #0
 800a522:	4b8d      	ldr	r3, [pc, #564]	; (800a758 <cqs_func+0x340>)
 800a524:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 800a526:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 800a52a:	4b8c      	ldr	r3, [pc, #560]	; (800a75c <cqs_func+0x344>)
 800a52c:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 800a52e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 800a532:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 800a536:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 800a53a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 800a53e:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 800a542:	e9cd ab00 	strd	sl, fp, [sp]
 800a546:	4b86      	ldr	r3, [pc, #536]	; (800a760 <cqs_func+0x348>)
 800a548:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 800a54a:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 800a54e:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 800a552:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 800a554:	4d7e      	ldr	r5, [pc, #504]	; (800a750 <cqs_func+0x338>)
 800a556:	4f83      	ldr	r7, [pc, #524]	; (800a764 <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 800a558:	4e79      	ldr	r6, [pc, #484]	; (800a740 <cqs_func+0x328>)
		bar_CQS += 0.04;
 800a55a:	a377      	add	r3, pc, #476	; (adr r3, 800a738 <cqs_func+0x320>)
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a564:	f7f5 feaa 	bl	80002bc <__adddf3>
 800a568:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a56c:	f7f6 fb50 	bl	8000c10 <__aeabi_d2f>
 800a570:	210d      	movs	r1, #13
 800a572:	ee00 0a10 	vmov	s0, r0
 800a576:	2055      	movs	r0, #85	; 0x55
 800a578:	f009 f948 	bl	801380c <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 800a57c:	487a      	ldr	r0, [pc, #488]	; (800a768 <cqs_func+0x350>)
 800a57e:	4a71      	ldr	r2, [pc, #452]	; (800a744 <cqs_func+0x32c>)
 800a580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a584:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800a588:	f004 ff1a 	bl	800f3c0 <Calibration_Load_Pack>
 800a58c:	4b77      	ldr	r3, [pc, #476]	; (800a76c <cqs_func+0x354>)
 800a58e:	9320      	str	r3, [sp, #128]	; 0x80
 800a590:	4b77      	ldr	r3, [pc, #476]	; (800a770 <cqs_func+0x358>)
 800a592:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 800a594:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 800a598:	4b76      	ldr	r3, [pc, #472]	; (800a774 <cqs_func+0x35c>)
 800a59a:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 800a59c:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 800a5a0:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 800a5a4:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 800a5a6:	2500      	movs	r5, #0
 800a5a8:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	d17d      	bne.n	800a6aa <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 800a5ae:	9904      	ldr	r1, [sp, #16]
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f7ff fe9d 	bl	800a2f0 <calcSref>
 800a5b6:	ec51 0b10 	vmov	r0, r1, d0
 800a5ba:	f7f6 fb29 	bl	8000c10 <__aeabi_d2f>
 800a5be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5c0:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 800a5c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 800a5c4:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 800a5c8:	edd3 9a00 	vldr	s19, [r3]
 800a5cc:	ee68 7a29 	vmul.f32	s15, s16, s19
 800a5d0:	ee17 0a90 	vmov	r0, s15
 800a5d4:	f7f5 ffd0 	bl	8000578 <__aeabi_f2d>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4689      	mov	r9, r1
 800a5de:	460b      	mov	r3, r1
 800a5e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5e4:	f7f5 fe6a 	bl	80002bc <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a5e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a5ea:	ed93 9a00 	vldr	s18, [r3]
 800a5ee:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 800a5f2:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a5f6:	ee17 0a90 	vmov	r0, s15
 800a5fa:	f7f5 ffbd 	bl	8000578 <__aeabi_f2d>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a606:	f7f5 fe59 	bl	80002bc <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 800a60a:	4642      	mov	r2, r8
 800a60c:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a60e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 800a612:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a616:	f7f5 fe51 	bl	80002bc <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a61a:	edd7 8a00 	vldr	s17, [r7]
 800a61e:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 800a622:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a626:	ee17 0a90 	vmov	r0, s15
 800a62a:	f7f5 ffa5 	bl	8000578 <__aeabi_f2d>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a636:	f7f5 fe41 	bl	80002bc <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a63a:	ed96 8a00 	vldr	s16, [r6]
 800a63e:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a642:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a646:	ee17 0a90 	vmov	r0, s15
 800a64a:	f7f5 ff95 	bl	8000578 <__aeabi_f2d>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4680      	mov	r8, r0
 800a654:	4689      	mov	r9, r1
 800a656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a65a:	f7f5 fe2f 	bl	80002bc <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a65e:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a662:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a666:	ee17 0a90 	vmov	r0, s15
 800a66a:	f7f5 ff85 	bl	8000578 <__aeabi_f2d>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a676:	f7f5 fe21 	bl	80002bc <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a67a:	4642      	mov	r2, r8
 800a67c:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a67e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a682:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800a686:	f7f5 fe19 	bl	80002bc <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a68a:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a68e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a692:	ee17 0a90 	vmov	r0, s15
 800a696:	f7f5 ff6f 	bl	8000578 <__aeabi_f2d>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4650      	mov	r0, sl
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	f7f5 fe0b 	bl	80002bc <__adddf3>
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a6aa:	4b26      	ldr	r3, [pc, #152]	; (800a744 <cqs_func+0x32c>)
 800a6ac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a6b0:	ed93 8a00 	vldr	s16, [r3]
 800a6b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a6b6:	ecb3 9a01 	vldmia	r3!, {s18}
 800a6ba:	9320      	str	r3, [sp, #128]	; 0x80
 800a6bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a6be:	ee28 9a09 	vmul.f32	s18, s16, s18
 800a6c2:	ecf3 9a01 	vldmia	r3!, {s19}
 800a6c6:	ee69 7a29 	vmul.f32	s15, s18, s19
 800a6ca:	931e      	str	r3, [sp, #120]	; 0x78
 800a6cc:	ee17 0a90 	vmov	r0, s15
 800a6d0:	f7f5 ff52 	bl	8000578 <__aeabi_f2d>
 800a6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fdef 	bl	80002bc <__adddf3>
 800a6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e0:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a6e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a6e6:	ecf3 8a01 	vldmia	r3!, {s17}
 800a6ea:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a6ee:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a6f2:	ee69 7aa8 	vmul.f32	s15, s19, s17
 800a6f6:	931c      	str	r3, [sp, #112]	; 0x70
 800a6f8:	ee17 0a90 	vmov	r0, s15
 800a6fc:	f7f5 ff3c 	bl	8000578 <__aeabi_f2d>
 800a700:	9b08      	ldr	r3, [sp, #32]
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 fdd9 	bl	80002bc <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a70a:	ecf7 7a01 	vldmia	r7!, {s15}
 800a70e:	e033      	b.n	800a778 <cqs_func+0x360>
 800a710:	56b31fbb 	.word	0x56b31fbb
 800a714:	3dd97936 	.word	0x3dd97936
 800a718:	ef649b9b 	.word	0xef649b9b
 800a71c:	3eac2c05 	.word	0x3eac2c05
 800a720:	d35a8588 	.word	0xd35a8588
 800a724:	3f64e3bc 	.word	0x3f64e3bc
 800a728:	83126e98 	.word	0x83126e98
 800a72c:	3ff9cac0 	.word	0x3ff9cac0
 800a730:	9999999a 	.word	0x9999999a
 800a734:	3fc99999 	.word	0x3fc99999
 800a738:	47ae147b 	.word	0x47ae147b
 800a73c:	3fa47ae1 	.word	0x3fa47ae1
 800a740:	2000261c 	.word	0x2000261c
 800a744:	2000161c 	.word	0x2000161c
 800a748:	20095904 	.word	0x20095904
 800a74c:	20000188 	.word	0x20000188
 800a750:	200906f8 	.word	0x200906f8
 800a754:	3e4ccccd 	.word	0x3e4ccccd
 800a758:	20090700 	.word	0x20090700
 800a75c:	20090890 	.word	0x20090890
 800a760:	200907f8 	.word	0x200907f8
 800a764:	2008d514 	.word	0x2008d514
 800a768:	0810c040 	.word	0x0810c040
 800a76c:	2008a514 	.word	0x2008a514
 800a770:	20003640 	.word	0x20003640
 800a774:	20052940 	.word	0x20052940
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a778:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a77a:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a77e:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a782:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a786:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a78a:	ee17 0a90 	vmov	r0, s15
 800a78e:	f7f5 fef3 	bl	8000578 <__aeabi_f2d>
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 fd90 	bl	80002bc <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a79c:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a7a0:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7a2:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7aa:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a7ae:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7b2:	f7f5 fee1 	bl	8000578 <__aeabi_f2d>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a7be:	f7f5 fd7d 	bl	80002bc <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7c2:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7c6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7ca:	ee17 0a90 	vmov	r0, s15
 800a7ce:	f7f5 fed3 	bl	8000578 <__aeabi_f2d>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a7da:	f7f5 fd6f 	bl	80002bc <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7de:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7e2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a7e6:	ee17 0a90 	vmov	r0, s15
 800a7ea:	f7f5 fec5 	bl	8000578 <__aeabi_f2d>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a7f6:	f7f5 fd61 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800a7fa:	3501      	adds	r5, #1
 800a7fc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a800:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 800a804:	f47f aed1 	bne.w	800a5aa <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a808:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a80c:	2100      	movs	r1, #0
 800a80e:	4874      	ldr	r0, [pc, #464]	; (800a9e0 <cqs_func+0x5c8>)
 800a810:	f016 f877 	bl	8020902 <memset>
		
		if (i == 0) {
 800a814:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a816:	b97b      	cbnz	r3, 800a838 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 800a818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a81c:	2000      	movs	r0, #0
 800a81e:	4971      	ldr	r1, [pc, #452]	; (800a9e4 <cqs_func+0x5cc>)
 800a820:	f7f6 f828 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800a824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 800a828:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 800a82c:	2000      	movs	r0, #0
 800a82e:	496d      	ldr	r1, [pc, #436]	; (800a9e4 <cqs_func+0x5cc>)
 800a830:	f7f6 f820 	bl	8000874 <__aeabi_ddiv>
 800a834:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 800a838:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a840:	f7f5 feee 	bl	8000620 <__aeabi_dmul>
 800a844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a846:	4d68      	ldr	r5, [pc, #416]	; (800a9e8 <cqs_func+0x5d0>)
 800a848:	4f68      	ldr	r7, [pc, #416]	; (800a9ec <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 800a84a:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 800a84e:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 800a852:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 800a854:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a858:	f7f5 fee2 	bl	8000620 <__aeabi_dmul>
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800a862:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800a864:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800a866:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fed8 	bl	8000620 <__aeabi_dmul>
 800a870:	9b06      	ldr	r3, [sp, #24]
 800a872:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800a876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 800a87a:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 800a87c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a880:	f7f5 fece 	bl	8000620 <__aeabi_dmul>
		y_test *= k_test;
 800a884:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 800a888:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 800a88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a890:	f7f5 fec6 	bl	8000620 <__aeabi_dmul>
		z_test *= k_test;
 800a894:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 800a898:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 800a89c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a0:	f7f5 febe 	bl	8000620 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a8a4:	ed95 7b00 	vldr	d7, [r5]
 800a8a8:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800a8ac:	ed95 7b02 	vldr	d7, [r5, #8]
 800a8b0:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800a8b4:	ed95 7b04 	vldr	d7, [r5, #16]
 800a8b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 800a8bc:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a8c0:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a8c4:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800a8c8:	f7f5 feaa 	bl	8000620 <__aeabi_dmul>
 800a8cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	4689      	mov	r9, r1
 800a8d4:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a8d8:	f7f5 fea2 	bl	8000620 <__aeabi_dmul>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4640      	mov	r0, r8
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	f7f5 fcea 	bl	80002bc <__adddf3>
 800a8e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a8ec:	4680      	mov	r8, r0
 800a8ee:	4689      	mov	r9, r1
 800a8f0:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a8f4:	f7f5 fe94 	bl	8000620 <__aeabi_dmul>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	4649      	mov	r1, r9
 800a900:	f7f5 fcdc 	bl	80002bc <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a904:	ed95 7b06 	vldr	d7, [r5, #24]
 800a908:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a90c:	ed95 7b08 	vldr	d7, [r5, #32]
 800a910:	00e6      	lsls	r6, r4, #3
 800a912:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a916:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a91a:	4437      	add	r7, r6
 800a91c:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a920:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a924:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a928:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a92c:	f7f5 fe78 	bl	8000620 <__aeabi_dmul>
 800a930:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a934:	4680      	mov	r8, r0
 800a936:	4689      	mov	r9, r1
 800a938:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a93c:	f7f5 fe70 	bl	8000620 <__aeabi_dmul>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4640      	mov	r0, r8
 800a946:	4649      	mov	r1, r9
 800a948:	f7f5 fcb8 	bl	80002bc <__adddf3>
 800a94c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a950:	4680      	mov	r8, r0
 800a952:	4689      	mov	r9, r1
 800a954:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a958:	f7f5 fe62 	bl	8000620 <__aeabi_dmul>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4640      	mov	r0, r8
 800a962:	4649      	mov	r1, r9
 800a964:	f7f5 fcaa 	bl	80002bc <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a968:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a96c:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a970:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a974:	4f1e      	ldr	r7, [pc, #120]	; (800a9f0 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a976:	4b1f      	ldr	r3, [pc, #124]	; (800a9f4 <cqs_func+0x5dc>)
 800a978:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a97c:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a980:	4437      	add	r7, r6
 800a982:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a986:	441e      	add	r6, r3
 800a988:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a98c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a990:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a994:	f7f5 fe44 	bl	8000620 <__aeabi_dmul>
 800a998:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a9a4:	f7f5 fe3c 	bl	8000620 <__aeabi_dmul>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	f7f5 fc84 	bl	80002bc <__adddf3>
 800a9b4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a9b8:	4680      	mov	r8, r0
 800a9ba:	4689      	mov	r9, r1
 800a9bc:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a9c0:	f7f5 fe2e 	bl	8000620 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4640      	mov	r0, r8
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	f7f5 fc76 	bl	80002bc <__adddf3>
 800a9d0:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a9d2:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a9d4:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a9d8:	f47f adbc 	bne.w	800a554 <cqs_func+0x13c>
 800a9dc:	e00e      	b.n	800a9fc <cqs_func+0x5e4>
 800a9de:	bf00      	nop
 800a9e0:	2000161c 	.word	0x2000161c
 800a9e4:	40590000 	.word	0x40590000
 800a9e8:	200000f8 	.word	0x200000f8
 800a9ec:	20090780 	.word	0x20090780
 800a9f0:	20090908 	.word	0x20090908
 800a9f4:	20090680 	.word	0x20090680
 800a9f8:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a9fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa04:	f7f5 fe0c 	bl	8000620 <__aeabi_dmul>
	yw_ref *= k_ref;
 800aa08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800aa0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800aa10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa14:	f7f5 fe04 	bl	8000620 <__aeabi_dmul>
	zw_ref *= k_ref;
 800aa18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800aa1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800aa20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa24:	f7f5 fdfc 	bl	8000620 <__aeabi_dmul>
	xw_test *= k_test;
 800aa28:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800aa2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800aa30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa34:	f7f5 fdf4 	bl	8000620 <__aeabi_dmul>
	yw_test *= k_test;
 800aa38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800aa3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800aa40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa44:	f7f5 fdec 	bl	8000620 <__aeabi_dmul>
	zw_test *= k_test;
 800aa48:	4652      	mov	r2, sl
 800aa4a:	465b      	mov	r3, fp
	yw_test *= k_test;
 800aa4c:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800aa50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa54:	f7f5 fde4 	bl	8000620 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800aa58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800aa5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800aa60:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800aa64:	f7f5 fddc 	bl	8000620 <__aeabi_dmul>
 800aa68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800aa74:	f7f5 fdd4 	bl	8000620 <__aeabi_dmul>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f5 fc1c 	bl	80002bc <__adddf3>
 800aa84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800aa90:	f7f5 fdc6 	bl	8000620 <__aeabi_dmul>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	f7f5 fc0e 	bl	80002bc <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800aaa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800aaa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800aaa8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800aaac:	f7f5 fdb8 	bl	8000620 <__aeabi_dmul>
 800aab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab4:	4604      	mov	r4, r0
 800aab6:	460d      	mov	r5, r1
 800aab8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800aabc:	f7f5 fdb0 	bl	8000620 <__aeabi_dmul>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4620      	mov	r0, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 fbf8 	bl	80002bc <__adddf3>
 800aacc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aad0:	4604      	mov	r4, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800aad8:	f7f5 fda2 	bl	8000620 <__aeabi_dmul>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4620      	mov	r0, r4
 800aae2:	4629      	mov	r1, r5
 800aae4:	f7f5 fbea 	bl	80002bc <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800aae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800aaec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800aaf0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800aaf4:	f7f5 fd94 	bl	8000620 <__aeabi_dmul>
 800aaf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aafc:	4604      	mov	r4, r0
 800aafe:	460d      	mov	r5, r1
 800ab00:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800ab04:	f7f5 fd8c 	bl	8000620 <__aeabi_dmul>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f7f5 fbd4 	bl	80002bc <__adddf3>
 800ab14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab18:	4604      	mov	r4, r0
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800ab20:	f7f5 fd7e 	bl	8000620 <__aeabi_dmul>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	4620      	mov	r0, r4
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f7f5 fbc6 	bl	80002bc <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800ab30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800ab34:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800ab38:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800ab3c:	f7f5 fd70 	bl	8000620 <__aeabi_dmul>
 800ab40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab44:	4604      	mov	r4, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800ab4c:	f7f5 fd68 	bl	8000620 <__aeabi_dmul>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f5 fbb0 	bl	80002bc <__adddf3>
 800ab5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab60:	4604      	mov	r4, r0
 800ab62:	460d      	mov	r5, r1
 800ab64:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800ab68:	f7f5 fd5a 	bl	8000620 <__aeabi_dmul>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4620      	mov	r0, r4
 800ab72:	4629      	mov	r1, r5
 800ab74:	f7f5 fba2 	bl	80002bc <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800ab78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800ab7c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800ab80:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800ab84:	f7f5 fd4c 	bl	8000620 <__aeabi_dmul>
 800ab88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800ab94:	f7f5 fd44 	bl	8000620 <__aeabi_dmul>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fb8c 	bl	80002bc <__adddf3>
 800aba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aba8:	4604      	mov	r4, r0
 800abaa:	460d      	mov	r5, r1
 800abac:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800abb0:	f7f5 fd36 	bl	8000620 <__aeabi_dmul>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4620      	mov	r0, r4
 800abba:	4629      	mov	r1, r5
 800abbc:	f7f5 fb7e 	bl	80002bc <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800abc0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800abc4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800abc8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800abcc:	f7f5 fd28 	bl	8000620 <__aeabi_dmul>
 800abd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abd4:	4604      	mov	r4, r0
 800abd6:	460d      	mov	r5, r1
 800abd8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800abdc:	f7f5 fd20 	bl	8000620 <__aeabi_dmul>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 fb68 	bl	80002bc <__adddf3>
 800abec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800abf8:	f7f5 fd12 	bl	8000620 <__aeabi_dmul>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7f5 fb5a 	bl	80002bc <__adddf3>

	float alpha = yw_test / yw_ref;
 800ac08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800ac0c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800ac10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac14:	f7f5 fe2e 	bl	8000874 <__aeabi_ddiv>
 800ac18:	f7f5 fffa 	bl	8000c10 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800ac1c:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a9f8 <cqs_func+0x5e0>
 800ac20:	f8df b390 	ldr.w	fp, [pc, #912]	; 800afb4 <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800ac24:	901c      	str	r0, [sp, #112]	; 0x70
 800ac26:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800ac2a:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800ac2e:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800ac32:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ac34:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800afb8 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800ac38:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800af88 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800ac3c:	f7f5 fc9c 	bl	8000578 <__aeabi_f2d>
 800ac40:	4bd2      	ldr	r3, [pc, #840]	; (800af8c <cqs_func+0xb74>)
 800ac42:	4453      	add	r3, sl
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	4604      	mov	r4, r0
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	f7f5 fce8 	bl	8000620 <__aeabi_dmul>
 800ac50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac54:	f7f5 fce4 	bl	8000620 <__aeabi_dmul>
 800ac58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ac5c:	f7f5 fe0a 	bl	8000874 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800ac60:	4bcb      	ldr	r3, [pc, #812]	; (800af90 <cqs_func+0xb78>)
 800ac62:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800ac64:	4606      	mov	r6, r0
 800ac66:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	f7f5 fcd6 	bl	8000620 <__aeabi_dmul>
 800ac74:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ac78:	f7f5 fcd2 	bl	8000620 <__aeabi_dmul>
 800ac7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ac80:	f7f5 fdf8 	bl	8000874 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800ac84:	4bc3      	ldr	r3, [pc, #780]	; (800af94 <cqs_func+0xb7c>)
 800ac86:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800ac88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	4620      	mov	r0, r4
 800ac92:	4629      	mov	r1, r5
 800ac94:	f7f5 fcc4 	bl	8000620 <__aeabi_dmul>
 800ac98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ac9c:	f7f5 fcc0 	bl	8000620 <__aeabi_dmul>
 800aca0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800aca4:	f7f5 fde6 	bl	8000874 <__aeabi_ddiv>
 800aca8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800acac:	49ba      	ldr	r1, [pc, #744]	; (800af98 <cqs_func+0xb80>)
 800acae:	4451      	add	r1, sl
 800acb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb8:	f7f5 fddc 	bl	8000874 <__aeabi_ddiv>
 800acbc:	ec41 0b10 	vmov	d0, r0, r1
 800acc0:	f018 fd26 	bl	8023710 <cbrt>
 800acc4:	ec51 0b10 	vmov	r0, r1, d0
 800acc8:	f7f5 ffa2 	bl	8000c10 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800accc:	49b3      	ldr	r1, [pc, #716]	; (800af9c <cqs_func+0xb84>)
 800acce:	4451      	add	r1, sl
 800acd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800acd4:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800acd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acdc:	f7f5 fdca 	bl	8000874 <__aeabi_ddiv>
 800ace0:	ec41 0b10 	vmov	d0, r0, r1
 800ace4:	f018 fd14 	bl	8023710 <cbrt>
 800ace8:	ee1a 0a90 	vmov	r0, s21
 800acec:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800acf0:	f7f5 fc42 	bl	8000578 <__aeabi_f2d>
 800acf4:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800acf8:	4604      	mov	r4, r0
 800acfa:	460d      	mov	r5, r1
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	ec51 0b10 	vmov	r0, r1, d0
 800ad04:	f7f5 fad8 	bl	80002b8 <__aeabi_dsub>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	4ba5      	ldr	r3, [pc, #660]	; (800afa0 <cqs_func+0xb88>)
 800ad0c:	f7f5 fc88 	bl	8000620 <__aeabi_dmul>
 800ad10:	f7f5 ff7e 	bl	8000c10 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ad14:	49a3      	ldr	r1, [pc, #652]	; (800afa4 <cqs_func+0xb8c>)
 800ad16:	4451      	add	r1, sl
 800ad18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800ad1c:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ad20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad24:	f7f5 fda6 	bl	8000874 <__aeabi_ddiv>
 800ad28:	ec41 0b10 	vmov	d0, r0, r1
 800ad2c:	f018 fcf0 	bl	8023710 <cbrt>
 800ad30:	4620      	mov	r0, r4
 800ad32:	ec53 2b10 	vmov	r2, r3, d0
 800ad36:	4629      	mov	r1, r5
 800ad38:	f7f5 fabe 	bl	80002b8 <__aeabi_dsub>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4b9a      	ldr	r3, [pc, #616]	; (800afa8 <cqs_func+0xb90>)
 800ad40:	f7f5 fc6e 	bl	8000620 <__aeabi_dmul>
 800ad44:	f7f5 ff64 	bl	8000c10 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800ad48:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800ad4c:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ad50:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800ad54:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ad58:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ad5a:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7f5 fc5e 	bl	8000620 <__aeabi_dmul>
 800ad64:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800ad68:	4604      	mov	r4, r0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad70:	f7f5 fc56 	bl	8000620 <__aeabi_dmul>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4620      	mov	r0, r4
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f7f5 fa9e 	bl	80002bc <__adddf3>
 800ad80:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800ad84:	4604      	mov	r4, r0
 800ad86:	460d      	mov	r5, r1
 800ad88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad8c:	f7f5 fc48 	bl	8000620 <__aeabi_dmul>
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	4620      	mov	r0, r4
 800ad96:	4629      	mov	r1, r5
 800ad98:	f7f5 fa90 	bl	80002bc <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800ad9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada0:	f7f5 fd68 	bl	8000874 <__aeabi_ddiv>
 800ada4:	ec41 0b10 	vmov	d0, r0, r1
 800ada8:	f018 fcb2 	bl	8023710 <cbrt>
 800adac:	ec51 0b10 	vmov	r0, r1, d0
 800adb0:	f7f5 ff2e 	bl	8000c10 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800adb4:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800adb8:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800adbc:	4639      	mov	r1, r7
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7f5 fc2e 	bl	8000620 <__aeabi_dmul>
 800adc4:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800adc8:	4604      	mov	r4, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800add0:	f7f5 fc26 	bl	8000620 <__aeabi_dmul>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4620      	mov	r0, r4
 800adda:	4629      	mov	r1, r5
 800addc:	f7f5 fa6e 	bl	80002bc <__adddf3>
 800ade0:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800ade4:	4604      	mov	r4, r0
 800ade6:	460d      	mov	r5, r1
 800ade8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800adec:	f7f5 fc18 	bl	8000620 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4620      	mov	r0, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	f7f5 fa60 	bl	80002bc <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800adfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae00:	f7f5 fd38 	bl	8000874 <__aeabi_ddiv>
 800ae04:	ec41 0b10 	vmov	d0, r0, r1
 800ae08:	f018 fc82 	bl	8023710 <cbrt>
 800ae0c:	ee1b 0a10 	vmov	r0, s22
 800ae10:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800ae14:	f7f5 fbb0 	bl	8000578 <__aeabi_f2d>
 800ae18:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	ec51 0b10 	vmov	r0, r1, d0
 800ae28:	f7f5 fa46 	bl	80002b8 <__aeabi_dsub>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4b5c      	ldr	r3, [pc, #368]	; (800afa0 <cqs_func+0xb88>)
 800ae30:	f7f5 fbf6 	bl	8000620 <__aeabi_dmul>
 800ae34:	f7f5 feec 	bl	8000c10 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800ae38:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800ae3c:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800ae40:	4639      	mov	r1, r7
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7f5 fbec 	bl	8000620 <__aeabi_dmul>
 800ae48:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	460f      	mov	r7, r1
 800ae50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae54:	f7f5 fbe4 	bl	8000620 <__aeabi_dmul>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 fa2c 	bl	80002bc <__adddf3>
 800ae64:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800ae68:	4606      	mov	r6, r0
 800ae6a:	460f      	mov	r7, r1
 800ae6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae70:	f7f5 fbd6 	bl	8000620 <__aeabi_dmul>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	4630      	mov	r0, r6
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	f7f5 fa1e 	bl	80002bc <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800ae80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae84:	f7f5 fcf6 	bl	8000874 <__aeabi_ddiv>
 800ae88:	ec41 0b10 	vmov	d0, r0, r1
 800ae8c:	f018 fc40 	bl	8023710 <cbrt>
 800ae90:	4620      	mov	r0, r4
 800ae92:	ec53 2b10 	vmov	r2, r3, d0
 800ae96:	4629      	mov	r1, r5
 800ae98:	f7f5 fa0e 	bl	80002b8 <__aeabi_dsub>
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	4b42      	ldr	r3, [pc, #264]	; (800afa8 <cqs_func+0xb90>)
 800aea0:	f7f5 fbbe 	bl	8000620 <__aeabi_dmul>
 800aea4:	f7f5 feb4 	bl	8000c10 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800aea8:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800aeac:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800aeb0:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800aeb4:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800aeb8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800aebc:	ee17 0a90 	vmov	r0, s15
 800aec0:	f7f5 fb5a 	bl	8000578 <__aeabi_f2d>
 800aec4:	ec41 0b10 	vmov	d0, r0, r1
 800aec8:	f018 ffd6 	bl	8023e78 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800aecc:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800aed0:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800aed4:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800aed8:	ee17 0a90 	vmov	r0, s15
 800aedc:	f7f5 fb4c 	bl	8000578 <__aeabi_f2d>
 800aee0:	ec41 0b10 	vmov	d0, r0, r1
 800aee4:	f018 ffc8 	bl	8023e78 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800aee8:	4629      	mov	r1, r5
 800aeea:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800aeec:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800aef0:	f7f5 fe8e 	bl	8000c10 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800aef4:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800aef8:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800aefc:	ec51 0b10 	vmov	r0, r1, d0
 800af00:	f7f5 fe86 	bl	8000c10 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800af04:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800af08:	a11d      	add	r1, pc, #116	; (adr r1, 800af80 <cqs_func+0xb68>)
 800af0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af0e:	4b27      	ldr	r3, [pc, #156]	; (800afac <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800af10:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800afb0 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800af14:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800af18:	210d      	movs	r1, #13
 800af1a:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800af1c:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800af20:	f008 fc74 	bl	801380c <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800af24:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800af28:	ee17 0a90 	vmov	r0, s15
 800af2c:	f7f5 fb24 	bl	8000578 <__aeabi_f2d>
 800af30:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800af34:	4606      	mov	r6, r0
 800af36:	ee17 0a90 	vmov	r0, s15
 800af3a:	460f      	mov	r7, r1
 800af3c:	f7f5 fb1c 	bl	8000578 <__aeabi_f2d>
 800af40:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800af44:	4680      	mov	r8, r0
 800af46:	ee17 0a90 	vmov	r0, s15
 800af4a:	4689      	mov	r9, r1
 800af4c:	f7f5 fb14 	bl	8000578 <__aeabi_f2d>
 800af50:	4632      	mov	r2, r6
 800af52:	4604      	mov	r4, r0
 800af54:	460d      	mov	r5, r1
 800af56:	463b      	mov	r3, r7
 800af58:	4630      	mov	r0, r6
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 fb60 	bl	8000620 <__aeabi_dmul>
 800af60:	4642      	mov	r2, r8
 800af62:	4606      	mov	r6, r0
 800af64:	460f      	mov	r7, r1
 800af66:	464b      	mov	r3, r9
 800af68:	4640      	mov	r0, r8
 800af6a:	4649      	mov	r1, r9
 800af6c:	f7f5 fb58 	bl	8000620 <__aeabi_dmul>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 f9a0 	bl	80002bc <__adddf3>
 800af7c:	e01e      	b.n	800afbc <cqs_func+0xba4>
 800af7e:	bf00      	nop
 800af80:	cccccccd 	.word	0xcccccccd
 800af84:	3feccccc 	.word	0x3feccccc
 800af88:	42e80000 	.word	0x42e80000
 800af8c:	20090780 	.word	0x20090780
 800af90:	20090908 	.word	0x20090908
 800af94:	20090680 	.word	0x20090680
 800af98:	20090890 	.word	0x20090890
 800af9c:	20090700 	.word	0x20090700
 800afa0:	407f4000 	.word	0x407f4000
 800afa4:	200907f8 	.word	0x200907f8
 800afa8:	40690000 	.word	0x40690000
 800afac:	200906f8 	.word	0x200906f8
 800afb0:	3f666666 	.word	0x3f666666
 800afb4:	20003623 	.word	0x20003623
 800afb8:	20000140 	.word	0x20000140
 800afbc:	4622      	mov	r2, r4
 800afbe:	4606      	mov	r6, r0
 800afc0:	460f      	mov	r7, r1
 800afc2:	462b      	mov	r3, r5
 800afc4:	4620      	mov	r0, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	f7f5 fb2a 	bl	8000620 <__aeabi_dmul>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4630      	mov	r0, r6
 800afd2:	4639      	mov	r1, r7
 800afd4:	f7f5 f972 	bl	80002bc <__adddf3>
 800afd8:	ec41 0b10 	vmov	d0, r0, r1
 800afdc:	f018 ff4c 	bl	8023e78 <sqrt>
 800afe0:	ec51 0b10 	vmov	r0, r1, d0
 800afe4:	f7f5 fe14 	bl	8000c10 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800afe8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800afec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800aff0:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800aff4:	f340 82a4 	ble.w	800b540 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800aff8:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800affc:	eee9 7a09 	vfma.f32	s15, s18, s18
 800b000:	ee17 0a90 	vmov	r0, s15
 800b004:	f7f5 fab8 	bl	8000578 <__aeabi_f2d>
 800b008:	ec41 0b10 	vmov	d0, r0, r1
 800b00c:	f018 ff34 	bl	8023e78 <sqrt>
 800b010:	ec51 0b10 	vmov	r0, r1, d0
 800b014:	f7f5 fdfc 	bl	8000c10 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800b018:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800b01c:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800b020:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800b024:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800b028:	f7f5 faa6 	bl	8000578 <__aeabi_f2d>
 800b02c:	a3bc      	add	r3, pc, #752	; (adr r3, 800b320 <cqs_func+0xf08>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f7f5 faf5 	bl	8000620 <__aeabi_dmul>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	2000      	movs	r0, #0
 800b03c:	49c8      	ldr	r1, [pc, #800]	; (800b360 <cqs_func+0xf48>)
 800b03e:	4cc9      	ldr	r4, [pc, #804]	; (800b364 <cqs_func+0xf4c>)
 800b040:	f7f5 f93a 	bl	80002b8 <__aeabi_dsub>
 800b044:	2200      	movs	r2, #0
 800b046:	4bc8      	ldr	r3, [pc, #800]	; (800b368 <cqs_func+0xf50>)
 800b048:	f7f5 fc14 	bl	8000874 <__aeabi_ddiv>
 800b04c:	ec41 0b10 	vmov	d0, r0, r1
 800b050:	f018 fc9e 	bl	8023990 <exp>
 800b054:	2200      	movs	r2, #0
 800b056:	4bc5      	ldr	r3, [pc, #788]	; (800b36c <cqs_func+0xf54>)
 800b058:	ec51 0b10 	vmov	r0, r1, d0
 800b05c:	f7f5 f92e 	bl	80002bc <__adddf3>
 800b060:	ec41 0b10 	vmov	d0, r0, r1
 800b064:	f018 fd10 	bl	8023a88 <log>
 800b068:	2200      	movs	r2, #0
 800b06a:	ec51 0b10 	vmov	r0, r1, d0
 800b06e:	4bbe      	ldr	r3, [pc, #760]	; (800b368 <cqs_func+0xf50>)
 800b070:	f7f5 fad6 	bl	8000620 <__aeabi_dmul>
 800b074:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b078:	f7f5 fad2 	bl	8000620 <__aeabi_dmul>
 800b07c:	f7f5 fdc8 	bl	8000c10 <__aeabi_d2f>
 800b080:	ee07 0a90 	vmov	s15, r0
 800b084:	4bba      	ldr	r3, [pc, #744]	; (800b370 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800b086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800b08a:	6018      	str	r0, [r3, #0]
 800b08c:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800b090:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800b094:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800b098:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800b09c:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800b0a0:	f47f adc7 	bne.w	800ac32 <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800b0a4:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800b0a8:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800b0ac:	ee17 0a90 	vmov	r0, s15
 800b0b0:	f7f5 fa62 	bl	8000578 <__aeabi_f2d>
 800b0b4:	ec41 0b10 	vmov	d0, r0, r1
 800b0b8:	f018 fede 	bl	8023e78 <sqrt>
 800b0bc:	ec51 0b10 	vmov	r0, r1, d0
 800b0c0:	f7f5 fda6 	bl	8000c10 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800b0c4:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800b0c8:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800b0cc:	ee17 0a90 	vmov	r0, s15
 800b0d0:	f7f5 fa52 	bl	8000578 <__aeabi_f2d>
 800b0d4:	ec41 0b10 	vmov	d0, r0, r1
 800b0d8:	f018 fece 	bl	8023e78 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800b0dc:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800b0e0:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800b0e4:	f7f5 fa48 	bl	8000578 <__aeabi_f2d>
 800b0e8:	a38d      	add	r3, pc, #564	; (adr r3, 800b320 <cqs_func+0xf08>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7f5 fa97 	bl	8000620 <__aeabi_dmul>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	4999      	ldr	r1, [pc, #612]	; (800b360 <cqs_func+0xf48>)
 800b0fa:	f7f5 f8dd 	bl	80002b8 <__aeabi_dsub>
 800b0fe:	f7f5 fd87 	bl	8000c10 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800b102:	ee06 0a90 	vmov	s13, r0
 800b106:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800b10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10e:	ee17 0a10 	vmov	r0, s14
 800b112:	f7f5 fa31 	bl	8000578 <__aeabi_f2d>
 800b116:	ec41 0b10 	vmov	d0, r0, r1
 800b11a:	f018 fc39 	bl	8023990 <exp>
 800b11e:	2200      	movs	r2, #0
 800b120:	4b92      	ldr	r3, [pc, #584]	; (800b36c <cqs_func+0xf54>)
 800b122:	ec51 0b10 	vmov	r0, r1, d0
 800b126:	f7f5 f8c9 	bl	80002bc <__adddf3>
 800b12a:	ec41 0b10 	vmov	d0, r0, r1
 800b12e:	f018 fcab 	bl	8023a88 <log>

	 Qa_temp = Mcct * Qa0_100;
 800b132:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800b136:	ec51 0b10 	vmov	r0, r1, d0
 800b13a:	2200      	movs	r2, #0
 800b13c:	4b8a      	ldr	r3, [pc, #552]	; (800b368 <cqs_func+0xf50>)
 800b13e:	f7f5 fa6f 	bl	8000620 <__aeabi_dmul>
 800b142:	f7f5 fd65 	bl	8000c10 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800b146:	f7f5 fa17 	bl	8000578 <__aeabi_f2d>
 800b14a:	4632      	mov	r2, r6
 800b14c:	463b      	mov	r3, r7
 800b14e:	f7f5 fa67 	bl	8000620 <__aeabi_dmul>
 800b152:	f7f5 fd5d 	bl	8000c10 <__aeabi_d2f>
 800b156:	ee07 0a90 	vmov	s15, r0
 800b15a:	4b86      	ldr	r3, [pc, #536]	; (800b374 <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800b15c:	4a86      	ldr	r2, [pc, #536]	; (800b378 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800b15e:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800b160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800b164:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800b166:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800b16a:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800b16c:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800b16e:	f7f5 fd4f 	bl	8000c10 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800b172:	f7f5 fa01 	bl	8000578 <__aeabi_f2d>
 800b176:	a36c      	add	r3, pc, #432	; (adr r3, 800b328 <cqs_func+0xf10>)
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	f7f5 fa50 	bl	8000620 <__aeabi_dmul>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	2000      	movs	r0, #0
 800b186:	4976      	ldr	r1, [pc, #472]	; (800b360 <cqs_func+0xf48>)
 800b188:	f7f5 f896 	bl	80002b8 <__aeabi_dsub>
 800b18c:	2200      	movs	r2, #0
 800b18e:	4b76      	ldr	r3, [pc, #472]	; (800b368 <cqs_func+0xf50>)
 800b190:	f7f5 fb70 	bl	8000874 <__aeabi_ddiv>
 800b194:	ec41 0b10 	vmov	d0, r0, r1
 800b198:	f018 fbfa 	bl	8023990 <exp>
 800b19c:	2200      	movs	r2, #0
 800b19e:	4b73      	ldr	r3, [pc, #460]	; (800b36c <cqs_func+0xf54>)
 800b1a0:	ec51 0b10 	vmov	r0, r1, d0
 800b1a4:	f7f5 f888 	bl	80002b8 <__aeabi_dsub>
 800b1a8:	ec41 0b10 	vmov	d0, r0, r1
 800b1ac:	f018 fc6c 	bl	8023a88 <log>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	4b6d      	ldr	r3, [pc, #436]	; (800b368 <cqs_func+0xf50>)
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	ed8d 0b00 	vstr	d0, [sp]
 800b1bc:	f7f5 fa30 	bl	8000620 <__aeabi_dmul>
 800b1c0:	ed9d 0b00 	vldr	d0, [sp]
 800b1c4:	ec53 2b10 	vmov	r2, r3, d0
 800b1c8:	f7f5 fa2a 	bl	8000620 <__aeabi_dmul>
 800b1cc:	f7f5 fd20 	bl	8000c10 <__aeabi_d2f>
 800b1d0:	ee07 0a90 	vmov	s15, r0
 800b1d4:	4b69      	ldr	r3, [pc, #420]	; (800b37c <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800b1d6:	4a6a      	ldr	r2, [pc, #424]	; (800b380 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800b1d8:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800b1da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800b1de:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800b1e2:	ee17 3a90 	vmov	r3, s15
 800b1e6:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	4b5f      	ldr	r3, [pc, #380]	; (800b368 <cqs_func+0xf50>)
 800b1ec:	f7f5 fa18 	bl	8000620 <__aeabi_dmul>
 800b1f0:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	460d      	mov	r5, r1
 800b1f8:	ee79 7a67 	vsub.f32	s15, s18, s15
 800b1fc:	ee17 0a90 	vmov	r0, s15
 800b200:	f7f5 f9ba 	bl	8000578 <__aeabi_f2d>
 800b204:	a34a      	add	r3, pc, #296	; (adr r3, 800b330 <cqs_func+0xf18>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f7f5 fa09 	bl	8000620 <__aeabi_dmul>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	2000      	movs	r0, #0
 800b214:	4952      	ldr	r1, [pc, #328]	; (800b360 <cqs_func+0xf48>)
 800b216:	f7f5 f84f 	bl	80002b8 <__aeabi_dsub>
 800b21a:	2200      	movs	r2, #0
 800b21c:	4b52      	ldr	r3, [pc, #328]	; (800b368 <cqs_func+0xf50>)
 800b21e:	f7f5 fb29 	bl	8000874 <__aeabi_ddiv>
 800b222:	ec41 0b10 	vmov	d0, r0, r1
 800b226:	f018 fbb3 	bl	8023990 <exp>
 800b22a:	2200      	movs	r2, #0
 800b22c:	4b4f      	ldr	r3, [pc, #316]	; (800b36c <cqs_func+0xf54>)
 800b22e:	ec51 0b10 	vmov	r0, r1, d0
 800b232:	f7f5 f841 	bl	80002b8 <__aeabi_dsub>
 800b236:	ec41 0b10 	vmov	d0, r0, r1
 800b23a:	f018 fc25 	bl	8023a88 <log>
 800b23e:	4620      	mov	r0, r4
 800b240:	ec53 2b10 	vmov	r2, r3, d0
 800b244:	4629      	mov	r1, r5
 800b246:	f7f5 f9eb 	bl	8000620 <__aeabi_dmul>
 800b24a:	f7f5 fce1 	bl	8000c10 <__aeabi_d2f>
 800b24e:	ee07 0a90 	vmov	s15, r0
 800b252:	4b4c      	ldr	r3, [pc, #304]	; (800b384 <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800b254:	4a4c      	ldr	r2, [pc, #304]	; (800b388 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800b256:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800b258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800b25c:	4943      	ldr	r1, [pc, #268]	; (800b36c <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800b25e:	ee17 3a90 	vmov	r3, s15
 800b262:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800b264:	4b49      	ldr	r3, [pc, #292]	; (800b38c <cqs_func+0xf74>)
 800b266:	2000      	movs	r0, #0
 800b268:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800b26c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b270:	210d      	movs	r1, #13
 800b272:	2055      	movs	r0, #85	; 0x55
 800b274:	b02f      	add	sp, #188	; 0xbc
 800b276:	ecbd 8b0a 	vpop	{d8-d12}
 800b27a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800b27e:	f008 bac5 	b.w	801380c <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	f241 3387 	movw	r3, #4999	; 0x1387
 800b288:	429a      	cmp	r2, r3
 800b28a:	f67f a928 	bls.w	800a4de <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800b28e:	9a04      	ldr	r2, [sp, #16]
 800b290:	f641 3357 	movw	r3, #6999	; 0x1b57
 800b294:	429a      	cmp	r2, r3
 800b296:	d97b      	bls.n	800b390 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b298:	9804      	ldr	r0, [sp, #16]
 800b29a:	f7f5 f94b 	bl	8000534 <__aeabi_ui2d>
 800b29e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800b338 <cqs_func+0xf20>
 800b2a2:	ec41 0b10 	vmov	d0, r0, r1
 800b2a6:	f018 fc6f 	bl	8023b88 <pow>
 800b2aa:	eddd 7a04 	vldr	s15, [sp, #16]
 800b2ae:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b2b2:	ed8d 0b00 	vstr	d0, [sp]
 800b2b6:	ee68 7a08 	vmul.f32	s15, s16, s16
 800b2ba:	ee17 0a90 	vmov	r0, s15
 800b2be:	f7f5 f95b 	bl	8000578 <__aeabi_f2d>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	a11e      	add	r1, pc, #120	; (adr r1, 800b340 <cqs_func+0xf28>)
 800b2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2cc:	f7f5 fad2 	bl	8000874 <__aeabi_ddiv>
 800b2d0:	ed9d 0b00 	vldr	d0, [sp]
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	ec53 2b10 	vmov	r2, r3, d0
 800b2da:	460d      	mov	r5, r1
 800b2dc:	a11a      	add	r1, pc, #104	; (adr r1, 800b348 <cqs_func+0xf30>)
 800b2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e2:	f7f5 fac7 	bl	8000874 <__aeabi_ddiv>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	f7f4 ffe5 	bl	80002bc <__adddf3>
 800b2f2:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b2f4:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b2f8:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b2fa:	f7f5 f93d 	bl	8000578 <__aeabi_f2d>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	a113      	add	r1, pc, #76	; (adr r1, 800b350 <cqs_func+0xf38>)
 800b304:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b308:	f7f5 fab4 	bl	8000874 <__aeabi_ddiv>
 800b30c:	4602      	mov	r2, r0
 800b30e:	460b      	mov	r3, r1
 800b310:	4620      	mov	r0, r4
 800b312:	4629      	mov	r1, r5
 800b314:	f7f4 ffd2 	bl	80002bc <__adddf3>
 800b318:	a30f      	add	r3, pc, #60	; (adr r3, 800b358 <cqs_func+0xf40>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	e073      	b.n	800b408 <cqs_func+0xff0>
 800b320:	cccccccd 	.word	0xcccccccd
 800b324:	4008cccc 	.word	0x4008cccc
 800b328:	d70a3d71 	.word	0xd70a3d71
 800b32c:	400770a3 	.word	0x400770a3
 800b330:	a3d70a3d 	.word	0xa3d70a3d
 800b334:	400e3d70 	.word	0x400e3d70
 800b338:	00000000 	.word	0x00000000
 800b33c:	40080000 	.word	0x40080000
 800b340:	00000000 	.word	0x00000000
 800b344:	413d04e8 	.word	0x413d04e8
 800b348:	00000001 	.word	0x00000001
 800b34c:	c1dde5cf 	.word	0xc1dde5cf
 800b350:	28f5c290 	.word	0x28f5c290
 800b354:	406eef5c 	.word	0x406eef5c
 800b358:	a3ec02f3 	.word	0xa3ec02f3
 800b35c:	3fce5753 	.word	0x3fce5753
 800b360:	40590000 	.word	0x40590000
 800b364:	20000188 	.word	0x20000188
 800b368:	40240000 	.word	0x40240000
 800b36c:	3ff00000 	.word	0x3ff00000
 800b370:	20090888 	.word	0x20090888
 800b374:	20090980 	.word	0x20090980
 800b378:	20003633 	.word	0x20003633
 800b37c:	20090984 	.word	0x20090984
 800b380:	20003634 	.word	0x20003634
 800b384:	20090778 	.word	0x20090778
 800b388:	20003635 	.word	0x20003635
 800b38c:	200906f8 	.word	0x200906f8
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b390:	eddd 7a04 	vldr	s15, [sp, #16]
 800b394:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b398:	ee68 8a08 	vmul.f32	s17, s16, s16
 800b39c:	ee68 7a28 	vmul.f32	s15, s16, s17
 800b3a0:	ee17 0a90 	vmov	r0, s15
 800b3a4:	f7f5 f8e8 	bl	8000578 <__aeabi_f2d>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	a181      	add	r1, pc, #516	; (adr r1, 800b5b4 <cqs_func+0x119c>)
 800b3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b2:	f7f5 fa5f 	bl	8000874 <__aeabi_ddiv>
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	ee18 0a90 	vmov	r0, s17
 800b3bc:	460d      	mov	r5, r1
 800b3be:	f7f5 f8db 	bl	8000578 <__aeabi_f2d>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	a17d      	add	r1, pc, #500	; (adr r1, 800b5bc <cqs_func+0x11a4>)
 800b3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3cc:	f7f5 fa52 	bl	8000874 <__aeabi_ddiv>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7f4 ff70 	bl	80002bc <__adddf3>
 800b3dc:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b3de:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b3e2:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b3e4:	f7f5 f8c8 	bl	8000578 <__aeabi_f2d>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	a175      	add	r1, pc, #468	; (adr r1, 800b5c4 <cqs_func+0x11ac>)
 800b3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f2:	f7f5 fa3f 	bl	8000874 <__aeabi_ddiv>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	f7f4 ff5d 	bl	80002bc <__adddf3>
 800b402:	a372      	add	r3, pc, #456	; (adr r3, 800b5cc <cqs_func+0x11b4>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b408:	f7f4 ff58 	bl	80002bc <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b40c:	4b64      	ldr	r3, [pc, #400]	; (800b5a0 <cqs_func+0x1188>)
 800b40e:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800b412:	4b63      	ldr	r3, [pc, #396]	; (800b5a0 <cqs_func+0x1188>)
 800b414:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b418:	2200      	movs	r2, #0
 800b41a:	4b62      	ldr	r3, [pc, #392]	; (800b5a4 <cqs_func+0x118c>)
 800b41c:	4620      	mov	r0, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	f7f5 f8fe 	bl	8000620 <__aeabi_dmul>
 800b424:	4622      	mov	r2, r4
 800b426:	462b      	mov	r3, r5
 800b428:	f7f5 f8fa 	bl	8000620 <__aeabi_dmul>
 800b42c:	a346      	add	r3, pc, #280	; (adr r3, 800b548 <cqs_func+0x1130>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	4606      	mov	r6, r0
 800b434:	460f      	mov	r7, r1
 800b436:	4620      	mov	r0, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f5 f8f1 	bl	8000620 <__aeabi_dmul>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4630      	mov	r0, r6
 800b444:	4639      	mov	r1, r7
 800b446:	f7f4 ff39 	bl	80002bc <__adddf3>
 800b44a:	a341      	add	r3, pc, #260	; (adr r3, 800b550 <cqs_func+0x1138>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f7f4 ff32 	bl	80002b8 <__aeabi_dsub>
 800b454:	4b54      	ldr	r3, [pc, #336]	; (800b5a8 <cqs_func+0x1190>)
 800b456:	4606      	mov	r6, r0
 800b458:	460f      	mov	r7, r1
 800b45a:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b45e:	4620      	mov	r0, r4
 800b460:	a33d      	add	r3, pc, #244	; (adr r3, 800b558 <cqs_func+0x1140>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	4629      	mov	r1, r5
 800b468:	f7f5 f8da 	bl	8000620 <__aeabi_dmul>
 800b46c:	a33c      	add	r3, pc, #240	; (adr r3, 800b560 <cqs_func+0x1148>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f7f4 ff23 	bl	80002bc <__adddf3>
 800b476:	a33c      	add	r3, pc, #240	; (adr r3, 800b568 <cqs_func+0x1150>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	4680      	mov	r8, r0
 800b47e:	4689      	mov	r9, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f5 f8cc 	bl	8000620 <__aeabi_dmul>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f4 ff12 	bl	80002b8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800b494:	a336      	add	r3, pc, #216	; (adr r3, 800b570 <cqs_func+0x1158>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b49a:	4680      	mov	r8, r0
 800b49c:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	f7f5 f8bd 	bl	8000620 <__aeabi_dmul>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	a133      	add	r1, pc, #204	; (adr r1, 800b578 <cqs_func+0x1160>)
 800b4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b0:	f7f4 ff02 	bl	80002b8 <__aeabi_dsub>
 800b4b4:	a332      	add	r3, pc, #200	; (adr r3, 800b580 <cqs_func+0x1168>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	468b      	mov	fp, r1
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f5 f8ad 	bl	8000620 <__aeabi_dmul>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4650      	mov	r0, sl
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	f7f4 fef5 	bl	80002bc <__adddf3>
 800b4d2:	f7f5 fb9d 	bl	8000c10 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b4d6:	f7f5 f84f 	bl	8000578 <__aeabi_f2d>
 800b4da:	4642      	mov	r2, r8
 800b4dc:	464b      	mov	r3, r9
 800b4de:	f7f5 f9c9 	bl	8000874 <__aeabi_ddiv>
 800b4e2:	f7f5 fb95 	bl	8000c10 <__aeabi_d2f>
 800b4e6:	4b31      	ldr	r3, [pc, #196]	; (800b5ac <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800b4e8:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b4ea:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800b4ec:	a326      	add	r3, pc, #152	; (adr r3, 800b588 <cqs_func+0x1170>)
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7f5 f894 	bl	8000620 <__aeabi_dmul>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	a124      	add	r1, pc, #144	; (adr r1, 800b590 <cqs_func+0x1178>)
 800b4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b502:	f7f4 fed9 	bl	80002b8 <__aeabi_dsub>
 800b506:	a324      	add	r3, pc, #144	; (adr r3, 800b598 <cqs_func+0x1180>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	4604      	mov	r4, r0
 800b50e:	460d      	mov	r5, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 f884 	bl	8000620 <__aeabi_dmul>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4620      	mov	r0, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	f7f4 fecc 	bl	80002bc <__adddf3>
 800b524:	f7f5 fb74 	bl	8000c10 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b528:	f7f5 f826 	bl	8000578 <__aeabi_f2d>
 800b52c:	464b      	mov	r3, r9
 800b52e:	4642      	mov	r2, r8
 800b530:	f7f5 f9a0 	bl	8000874 <__aeabi_ddiv>
 800b534:	f7f5 fb6c 	bl	8000c10 <__aeabi_d2f>
 800b538:	4b1d      	ldr	r3, [pc, #116]	; (800b5b0 <cqs_func+0x1198>)
 800b53a:	6018      	str	r0, [r3, #0]
 800b53c:	f7fe bfd2 	b.w	800a4e4 <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800b540:	ee07 0a90 	vmov	s15, r0
 800b544:	e56c      	b.n	800b020 <cqs_func+0xc08>
 800b546:	bf00      	nop
 800b548:	8f5c28f6 	.word	0x8f5c28f6
 800b54c:	4006f5c2 	.word	0x4006f5c2
 800b550:	9999999a 	.word	0x9999999a
 800b554:	3fd19999 	.word	0x3fd19999
 800b558:	af4f0d84 	.word	0xaf4f0d84
 800b55c:	3fd06594 	.word	0x3fd06594
 800b560:	9f559b3d 	.word	0x9f559b3d
 800b564:	3f98adab 	.word	0x3f98adab
 800b568:	487fcb92 	.word	0x487fcb92
 800b56c:	3fe77dbf 	.word	0x3fe77dbf
 800b570:	17c1bda5 	.word	0x17c1bda5
 800b574:	3ffc5326 	.word	0x3ffc5326
 800b578:	76c8b439 	.word	0x76c8b439
 800b57c:	bff59fbe 	.word	0xbff59fbe
 800b580:	0aa64c30 	.word	0x0aa64c30
 800b584:	4017a546 	.word	0x4017a546
 800b588:	205bc01a 	.word	0x205bc01a
 800b58c:	403f7141 	.word	0x403f7141
 800b590:	eb851eb8 	.word	0xeb851eb8
 800b594:	3f9eb851 	.word	0x3f9eb851
 800b598:	ee631f8a 	.word	0xee631f8a
 800b59c:	403e125a 	.word	0x403e125a
 800b5a0:	20090880 	.word	0x20090880
 800b5a4:	c0080000 	.word	0xc0080000
 800b5a8:	20090878 	.word	0x20090878
 800b5ac:	2000361c 	.word	0x2000361c
 800b5b0:	20003620 	.word	0x20003620
 800b5b4:	dc000000 	.word	0xdc000000
 800b5b8:	c1f12993 	.word	0xc1f12993
 800b5bc:	00000000 	.word	0x00000000
 800b5c0:	4146a47c 	.word	0x4146a47c
 800b5c4:	3d70a3d7 	.word	0x3d70a3d7
 800b5c8:	4058c70a 	.word	0x4058c70a
 800b5cc:	d594f26b 	.word	0xd594f26b
 800b5d0:	3fcf3d74 	.word	0x3fcf3d74

0800b5d4 <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800b5d4:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800b5d6:	bbb8      	cbnz	r0, 800b648 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800b5d8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b5dc:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800b5e0:	2212      	movs	r2, #18
 800b5e2:	215f      	movs	r1, #95	; 0x5f
 800b5e4:	2010      	movs	r0, #16
 800b5e6:	9400      	str	r4, [sp, #0]
 800b5e8:	f011 faa5 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800b5ec:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800b5f0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b5f4:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800b5f8:	2010      	movs	r0, #16
 800b5fa:	9400      	str	r4, [sp, #0]
 800b5fc:	f011 fa9b 	bl	801cb36 <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800b600:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800b604:	4619      	mov	r1, r3
 800b606:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b60a:	2010      	movs	r0, #16
 800b60c:	9400      	str	r4, [sp, #0]
 800b60e:	f011 fa35 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800b612:	f240 1301 	movw	r3, #257	; 0x101
 800b616:	4619      	mov	r1, r3
 800b618:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b61c:	2010      	movs	r0, #16
 800b61e:	9400      	str	r4, [sp, #0]
 800b620:	f011 fa2c 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800b624:	23b5      	movs	r3, #181	; 0xb5
 800b626:	4619      	mov	r1, r3
 800b628:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b62c:	2010      	movs	r0, #16
 800b62e:	9400      	str	r4, [sp, #0]
 800b630:	f011 fa24 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800b634:	2369      	movs	r3, #105	; 0x69
 800b636:	9400      	str	r4, [sp, #0]
 800b638:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b63c:	4619      	mov	r1, r3
 800b63e:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b640:	f011 fa1c 	bl	801ca7c <TFT_DrawLine>
		}
}
 800b644:	b002      	add	sp, #8
 800b646:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800b648:	2801      	cmp	r0, #1
 800b64a:	d131      	bne.n	800b6b0 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800b64c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b650:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b654:	22ff      	movs	r2, #255	; 0xff
 800b656:	2146      	movs	r1, #70	; 0x46
 800b658:	20fd      	movs	r0, #253	; 0xfd
 800b65a:	9400      	str	r4, [sp, #0]
 800b65c:	f011 fa6b 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800b660:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b664:	22ff      	movs	r2, #255	; 0xff
 800b666:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800b66a:	2028      	movs	r0, #40	; 0x28
 800b66c:	9400      	str	r4, [sp, #0]
 800b66e:	f011 fa62 	bl	801cb36 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800b672:	22cc      	movs	r2, #204	; 0xcc
 800b674:	4610      	mov	r0, r2
 800b676:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b67a:	2146      	movs	r1, #70	; 0x46
 800b67c:	9400      	str	r4, [sp, #0]
 800b67e:	f011 f9fd 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800b682:	2297      	movs	r2, #151	; 0x97
 800b684:	4610      	mov	r0, r2
 800b686:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b68a:	2146      	movs	r1, #70	; 0x46
 800b68c:	9400      	str	r4, [sp, #0]
 800b68e:	f011 f9f5 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800b692:	2262      	movs	r2, #98	; 0x62
 800b694:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b698:	4610      	mov	r0, r2
 800b69a:	9400      	str	r4, [sp, #0]
 800b69c:	2146      	movs	r1, #70	; 0x46
 800b69e:	f011 f9ed 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800b6a2:	9400      	str	r4, [sp, #0]
 800b6a4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b6a8:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b6aa:	2146      	movs	r1, #70	; 0x46
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	e7c7      	b.n	800b640 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 800b6b0:	2802      	cmp	r0, #2
 800b6b2:	d1c7      	bne.n	800b644 <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800b6b4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b6b8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b6bc:	2210      	movs	r2, #16
 800b6be:	214a      	movs	r1, #74	; 0x4a
 800b6c0:	2012      	movs	r0, #18
 800b6c2:	9400      	str	r4, [sp, #0]
 800b6c4:	f011 fa37 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800b6c8:	234c      	movs	r3, #76	; 0x4c
 800b6ca:	22e8      	movs	r2, #232	; 0xe8
 800b6cc:	214a      	movs	r1, #74	; 0x4a
 800b6ce:	2011      	movs	r0, #17
 800b6d0:	9400      	str	r4, [sp, #0]
 800b6d2:	f011 fa30 	bl	801cb36 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800b6d6:	2244      	movs	r2, #68	; 0x44
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b6de:	2146      	movs	r1, #70	; 0x46
 800b6e0:	9400      	str	r4, [sp, #0]
 800b6e2:	f011 f9cb 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800b6e6:	2279      	movs	r2, #121	; 0x79
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b6ee:	2146      	movs	r1, #70	; 0x46
 800b6f0:	9400      	str	r4, [sp, #0]
 800b6f2:	f011 f9c3 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800b6f6:	22ae      	movs	r2, #174	; 0xae
 800b6f8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	9400      	str	r4, [sp, #0]
 800b700:	2146      	movs	r1, #70	; 0x46
 800b702:	f011 f9bb 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b706:	9400      	str	r4, [sp, #0]
 800b708:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b70c:	22e3      	movs	r2, #227	; 0xe3
 800b70e:	e7cc      	b.n	800b6aa <CQS_Axes+0xd6>

0800b710 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800b714:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b716:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800b718:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b71a:	4688      	mov	r8, r1
 800b71c:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800b71e:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800b722:	2800      	cmp	r0, #0
 800b724:	d15a      	bne.n	800b7dc <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 800b726:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b72a:	f011 fc33 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b72e:	2063      	movs	r0, #99	; 0x63
 800b730:	f011 fc36 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b734:	485c      	ldr	r0, [pc, #368]	; (800b8a8 <CQS_Axes_Measure+0x198>)
 800b736:	f011 fc27 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800b73a:	2261      	movs	r2, #97	; 0x61
 800b73c:	2146      	movs	r1, #70	; 0x46
 800b73e:	2014      	movs	r0, #20
 800b740:	f011 fcec 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b744:	4859      	ldr	r0, [pc, #356]	; (800b8ac <CQS_Axes_Measure+0x19c>)
 800b746:	f011 fc1f 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800b74a:	2251      	movs	r2, #81	; 0x51
 800b74c:	2144      	movs	r1, #68	; 0x44
 800b74e:	2005      	movs	r0, #5
 800b750:	f011 fce4 	bl	801d11c <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800b754:	4642      	mov	r2, r8
 800b756:	4956      	ldr	r1, [pc, #344]	; (800b8b0 <CQS_Axes_Measure+0x1a0>)
 800b758:	4620      	mov	r0, r4
 800b75a:	f015 f8db 	bl	8020914 <sprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b75e:	2303      	movs	r3, #3
 800b760:	4622      	mov	r2, r4
 800b762:	2144      	movs	r1, #68	; 0x44
 800b764:	2027      	movs	r0, #39	; 0x27
 800b766:	f011 fd31 	bl	801d1cc <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b76a:	484f      	ldr	r0, [pc, #316]	; (800b8a8 <CQS_Axes_Measure+0x198>)
 800b76c:	f011 fc0c 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800b770:	2270      	movs	r2, #112	; 0x70
 800b772:	4610      	mov	r0, r2
 800b774:	2146      	movs	r1, #70	; 0x46
 800b776:	f011 fcd1 	bl	801d11c <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800b77a:	484c      	ldr	r0, [pc, #304]	; (800b8ac <CQS_Axes_Measure+0x19c>)
 800b77c:	f011 fc04 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800b780:	2251      	movs	r2, #81	; 0x51
 800b782:	2144      	movs	r1, #68	; 0x44
 800b784:	205d      	movs	r0, #93	; 0x5d
 800b786:	f011 fcc9 	bl	801d11c <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800b78a:	463a      	mov	r2, r7
 800b78c:	4948      	ldr	r1, [pc, #288]	; (800b8b0 <CQS_Axes_Measure+0x1a0>)
 800b78e:	4620      	mov	r0, r4
 800b790:	f015 f8c0 	bl	8020914 <sprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b794:	2303      	movs	r3, #3
 800b796:	4622      	mov	r2, r4
 800b798:	2144      	movs	r1, #68	; 0x44
 800b79a:	2082      	movs	r0, #130	; 0x82
 800b79c:	f011 fd16 	bl	801d1cc <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b7a0:	4841      	ldr	r0, [pc, #260]	; (800b8a8 <CQS_Axes_Measure+0x198>)
 800b7a2:	f011 fbf1 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800b7a6:	2266      	movs	r2, #102	; 0x66
 800b7a8:	2146      	movs	r1, #70	; 0x46
 800b7aa:	20ce      	movs	r0, #206	; 0xce
 800b7ac:	f011 fcb6 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b7b0:	483e      	ldr	r0, [pc, #248]	; (800b8ac <CQS_Axes_Measure+0x19c>)
 800b7b2:	f011 fbe9 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800b7b6:	2251      	movs	r2, #81	; 0x51
 800b7b8:	2144      	movs	r1, #68	; 0x44
 800b7ba:	20bf      	movs	r0, #191	; 0xbf
 800b7bc:	f011 fcae 	bl	801d11c <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	493b      	ldr	r1, [pc, #236]	; (800b8b0 <CQS_Axes_Measure+0x1a0>)
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f015 f8a5 	bl	8020914 <sprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	2144      	movs	r1, #68	; 0x44
 800b7d0:	20e6      	movs	r0, #230	; 0xe6
 800b7d2:	f011 fcfb 	bl	801d1cc <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800b7d6:	b002      	add	sp, #8
 800b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7dc:	4d35      	ldr	r5, [pc, #212]	; (800b8b4 <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b7de:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800b7e0:	bf14      	ite	ne
 800b7e2:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b7e4:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b7e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b7ea:	bf18      	it	ne
 800b7ec:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b7ee:	f011 fbd1 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b7f2:	2063      	movs	r0, #99	; 0x63
 800b7f4:	f011 fbd4 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b7f8:	482b      	ldr	r0, [pc, #172]	; (800b8a8 <CQS_Axes_Measure+0x198>)
 800b7fa:	f011 fbc5 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800b7fe:	2261      	movs	r2, #97	; 0x61
 800b800:	2110      	movs	r1, #16
 800b802:	2064      	movs	r0, #100	; 0x64
 800b804:	f011 fc8a 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b808:	4828      	ldr	r0, [pc, #160]	; (800b8ac <CQS_Axes_Measure+0x19c>)
 800b80a:	f011 fbbd 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800b80e:	2251      	movs	r2, #81	; 0x51
 800b810:	210e      	movs	r1, #14
 800b812:	2055      	movs	r0, #85	; 0x55
 800b814:	f011 fc82 	bl	801d11c <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800b818:	4642      	mov	r2, r8
 800b81a:	4925      	ldr	r1, [pc, #148]	; (800b8b0 <CQS_Axes_Measure+0x1a0>)
 800b81c:	4620      	mov	r0, r4
 800b81e:	f015 f879 	bl	8020914 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b822:	2303      	movs	r3, #3
 800b824:	4622      	mov	r2, r4
 800b826:	210e      	movs	r1, #14
 800b828:	207d      	movs	r0, #125	; 0x7d
 800b82a:	f011 fccf 	bl	801d1cc <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b82e:	481e      	ldr	r0, [pc, #120]	; (800b8a8 <CQS_Axes_Measure+0x198>)
 800b830:	f011 fbaa 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800b834:	2270      	movs	r2, #112	; 0x70
 800b836:	2110      	movs	r1, #16
 800b838:	20d8      	movs	r0, #216	; 0xd8
 800b83a:	f011 fc6f 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b83e:	481b      	ldr	r0, [pc, #108]	; (800b8ac <CQS_Axes_Measure+0x19c>)
 800b840:	f011 fba2 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800b844:	2251      	movs	r2, #81	; 0x51
 800b846:	210e      	movs	r1, #14
 800b848:	20c7      	movs	r0, #199	; 0xc7
 800b84a:	f011 fc67 	bl	801d11c <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800b84e:	463a      	mov	r2, r7
 800b850:	4917      	ldr	r1, [pc, #92]	; (800b8b0 <CQS_Axes_Measure+0x1a0>)
 800b852:	4620      	mov	r0, r4
 800b854:	f015 f85e 	bl	8020914 <sprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b858:	2303      	movs	r3, #3
 800b85a:	4622      	mov	r2, r4
 800b85c:	210e      	movs	r1, #14
 800b85e:	20fc      	movs	r0, #252	; 0xfc
 800b860:	f011 fcb4 	bl	801d1cc <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b864:	4810      	ldr	r0, [pc, #64]	; (800b8a8 <CQS_Axes_Measure+0x198>)
 800b866:	f011 fb8f 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800b86a:	2266      	movs	r2, #102	; 0x66
 800b86c:	210e      	movs	r1, #14
 800b86e:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800b872:	f011 fc53 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b876:	480d      	ldr	r0, [pc, #52]	; (800b8ac <CQS_Axes_Measure+0x19c>)
 800b878:	f011 fb86 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800b87c:	2251      	movs	r2, #81	; 0x51
 800b87e:	210e      	movs	r1, #14
 800b880:	f240 1045 	movw	r0, #325	; 0x145
 800b884:	f011 fc4a 	bl	801d11c <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800b888:	4632      	mov	r2, r6
 800b88a:	4909      	ldr	r1, [pc, #36]	; (800b8b0 <CQS_Axes_Measure+0x1a0>)
 800b88c:	4620      	mov	r0, r4
 800b88e:	f015 f841 	bl	8020914 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b892:	2303      	movs	r3, #3
 800b894:	4622      	mov	r2, r4
 800b896:	210e      	movs	r1, #14
 800b898:	f240 106d 	movw	r0, #365	; 0x16d
 800b89c:	f011 fc96 	bl	801d1cc <TFT_DisplayString>
		TFT_direction = 0x00;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	702b      	strb	r3, [r5, #0]
}
 800b8a4:	e797      	b.n	800b7d6 <CQS_Axes_Measure+0xc6>
 800b8a6:	bf00      	nop
 800b8a8:	200001c0 	.word	0x200001c0
 800b8ac:	200001b0 	.word	0x200001b0
 800b8b0:	08025609 	.word	0x08025609
 800b8b4:	200056a0 	.word	0x200056a0

0800b8b8 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800b8b8:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	f040 811f 	bne.w	800bb00 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800b8c2:	488e      	ldr	r0, [pc, #568]	; (800bafc <CQS_Axes_Text+0x244>)
 800b8c4:	f011 fb60 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b8c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b8cc:	f011 fb62 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b8d0:	2063      	movs	r0, #99	; 0x63
 800b8d2:	f011 fb65 	bl	801cfa0 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800b8d6:	2251      	movs	r2, #81	; 0x51
 800b8d8:	f240 119f 	movw	r1, #415	; 0x19f
 800b8dc:	2018      	movs	r0, #24
 800b8de:	f011 fc1d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800b8e2:	2231      	movs	r2, #49	; 0x31
 800b8e4:	f240 119f 	movw	r1, #415	; 0x19f
 800b8e8:	201e      	movs	r0, #30
 800b8ea:	f011 fc17 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800b8ee:	2251      	movs	r2, #81	; 0x51
 800b8f0:	f240 119f 	movw	r1, #415	; 0x19f
 800b8f4:	2028      	movs	r0, #40	; 0x28
 800b8f6:	f011 fc11 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800b8fa:	2232      	movs	r2, #50	; 0x32
 800b8fc:	f240 119f 	movw	r1, #415	; 0x19f
 800b900:	202e      	movs	r0, #46	; 0x2e
 800b902:	f011 fc0b 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800b906:	2251      	movs	r2, #81	; 0x51
 800b908:	f240 119f 	movw	r1, #415	; 0x19f
 800b90c:	2038      	movs	r0, #56	; 0x38
 800b90e:	f011 fc05 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800b912:	2233      	movs	r2, #51	; 0x33
 800b914:	f240 119f 	movw	r1, #415	; 0x19f
 800b918:	203e      	movs	r0, #62	; 0x3e
 800b91a:	f011 fbff 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800b91e:	2251      	movs	r2, #81	; 0x51
 800b920:	f240 119f 	movw	r1, #415	; 0x19f
 800b924:	2048      	movs	r0, #72	; 0x48
 800b926:	f011 fbf9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800b92a:	2234      	movs	r2, #52	; 0x34
 800b92c:	f240 119f 	movw	r1, #415	; 0x19f
 800b930:	204e      	movs	r0, #78	; 0x4e
 800b932:	f011 fbf3 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800b936:	2251      	movs	r2, #81	; 0x51
 800b938:	f240 119f 	movw	r1, #415	; 0x19f
 800b93c:	2058      	movs	r0, #88	; 0x58
 800b93e:	f011 fbed 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800b942:	2235      	movs	r2, #53	; 0x35
 800b944:	f240 119f 	movw	r1, #415	; 0x19f
 800b948:	205e      	movs	r0, #94	; 0x5e
 800b94a:	f011 fbe7 	bl	801d11c <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800b94e:	2251      	movs	r2, #81	; 0x51
 800b950:	f240 119f 	movw	r1, #415	; 0x19f
 800b954:	2068      	movs	r0, #104	; 0x68
 800b956:	f011 fbe1 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800b95a:	2236      	movs	r2, #54	; 0x36
 800b95c:	f240 119f 	movw	r1, #415	; 0x19f
 800b960:	206e      	movs	r0, #110	; 0x6e
 800b962:	f011 fbdb 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800b966:	2251      	movs	r2, #81	; 0x51
 800b968:	f240 119f 	movw	r1, #415	; 0x19f
 800b96c:	2078      	movs	r0, #120	; 0x78
 800b96e:	f011 fbd5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800b972:	2237      	movs	r2, #55	; 0x37
 800b974:	f240 119f 	movw	r1, #415	; 0x19f
 800b978:	207e      	movs	r0, #126	; 0x7e
 800b97a:	f011 fbcf 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800b97e:	2251      	movs	r2, #81	; 0x51
 800b980:	f240 119f 	movw	r1, #415	; 0x19f
 800b984:	2088      	movs	r0, #136	; 0x88
 800b986:	f011 fbc9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800b98a:	2238      	movs	r2, #56	; 0x38
 800b98c:	f240 119f 	movw	r1, #415	; 0x19f
 800b990:	208e      	movs	r0, #142	; 0x8e
 800b992:	f011 fbc3 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800b996:	2251      	movs	r2, #81	; 0x51
 800b998:	f240 119f 	movw	r1, #415	; 0x19f
 800b99c:	2098      	movs	r0, #152	; 0x98
 800b99e:	f011 fbbd 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800b9a2:	2239      	movs	r2, #57	; 0x39
 800b9a4:	f240 119f 	movw	r1, #415	; 0x19f
 800b9a8:	209e      	movs	r0, #158	; 0x9e
 800b9aa:	f011 fbb7 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800b9ae:	2231      	movs	r2, #49	; 0x31
 800b9b0:	f240 119f 	movw	r1, #415	; 0x19f
 800b9b4:	20ad      	movs	r0, #173	; 0xad
 800b9b6:	f011 fbb1 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800b9ba:	2251      	movs	r2, #81	; 0x51
 800b9bc:	f240 119f 	movw	r1, #415	; 0x19f
 800b9c0:	20a8      	movs	r0, #168	; 0xa8
 800b9c2:	f011 fbab 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800b9c6:	2230      	movs	r2, #48	; 0x30
 800b9c8:	f240 119f 	movw	r1, #415	; 0x19f
 800b9cc:	20b1      	movs	r0, #177	; 0xb1
 800b9ce:	f011 fba5 	bl	801d11c <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800b9d2:	2231      	movs	r2, #49	; 0x31
 800b9d4:	f240 119f 	movw	r1, #415	; 0x19f
 800b9d8:	20bd      	movs	r0, #189	; 0xbd
 800b9da:	f011 fb9f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800b9de:	2251      	movs	r2, #81	; 0x51
 800b9e0:	f240 119f 	movw	r1, #415	; 0x19f
 800b9e4:	20b8      	movs	r0, #184	; 0xb8
 800b9e6:	f011 fb99 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800b9ea:	2231      	movs	r2, #49	; 0x31
 800b9ec:	f240 119f 	movw	r1, #415	; 0x19f
 800b9f0:	20c2      	movs	r0, #194	; 0xc2
 800b9f2:	f011 fb93 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800b9f6:	2231      	movs	r2, #49	; 0x31
 800b9f8:	f240 119f 	movw	r1, #415	; 0x19f
 800b9fc:	20cd      	movs	r0, #205	; 0xcd
 800b9fe:	f011 fb8d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800ba02:	2251      	movs	r2, #81	; 0x51
 800ba04:	f240 119f 	movw	r1, #415	; 0x19f
 800ba08:	20c8      	movs	r0, #200	; 0xc8
 800ba0a:	f011 fb87 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800ba0e:	2232      	movs	r2, #50	; 0x32
 800ba10:	f240 119f 	movw	r1, #415	; 0x19f
 800ba14:	20d1      	movs	r0, #209	; 0xd1
 800ba16:	f011 fb81 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800ba1a:	2231      	movs	r2, #49	; 0x31
 800ba1c:	f240 119f 	movw	r1, #415	; 0x19f
 800ba20:	20dd      	movs	r0, #221	; 0xdd
 800ba22:	f011 fb7b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800ba26:	2251      	movs	r2, #81	; 0x51
 800ba28:	f240 119f 	movw	r1, #415	; 0x19f
 800ba2c:	20d8      	movs	r0, #216	; 0xd8
 800ba2e:	f011 fb75 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800ba32:	2233      	movs	r2, #51	; 0x33
 800ba34:	f240 119f 	movw	r1, #415	; 0x19f
 800ba38:	20e1      	movs	r0, #225	; 0xe1
 800ba3a:	f011 fb6f 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800ba3e:	2231      	movs	r2, #49	; 0x31
 800ba40:	f240 119f 	movw	r1, #415	; 0x19f
 800ba44:	20ed      	movs	r0, #237	; 0xed
 800ba46:	f011 fb69 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800ba4a:	2251      	movs	r2, #81	; 0x51
 800ba4c:	f240 119f 	movw	r1, #415	; 0x19f
 800ba50:	20e8      	movs	r0, #232	; 0xe8
 800ba52:	f011 fb63 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800ba56:	2234      	movs	r2, #52	; 0x34
 800ba58:	f240 119f 	movw	r1, #415	; 0x19f
 800ba5c:	20f1      	movs	r0, #241	; 0xf1
 800ba5e:	f011 fb5d 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800ba62:	2231      	movs	r2, #49	; 0x31
 800ba64:	f240 119f 	movw	r1, #415	; 0x19f
 800ba68:	20fd      	movs	r0, #253	; 0xfd
 800ba6a:	f011 fb57 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800ba6e:	2251      	movs	r2, #81	; 0x51
 800ba70:	f240 119f 	movw	r1, #415	; 0x19f
 800ba74:	20f8      	movs	r0, #248	; 0xf8
 800ba76:	f011 fb51 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800ba7a:	2235      	movs	r2, #53	; 0x35
 800ba7c:	f240 119f 	movw	r1, #415	; 0x19f
 800ba80:	f240 1001 	movw	r0, #257	; 0x101
 800ba84:	f011 fb4a 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800ba88:	2230      	movs	r2, #48	; 0x30
 800ba8a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800ba8e:	2005      	movs	r0, #5
 800ba90:	f011 fb44 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800ba94:	2232      	movs	r2, #50	; 0x32
 800ba96:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	f011 fb3e 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800baa0:	2235      	movs	r2, #53	; 0x35
 800baa2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800baa6:	2007      	movs	r0, #7
 800baa8:	f011 fb38 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800baac:	2235      	movs	r2, #53	; 0x35
 800baae:	f240 1101 	movw	r1, #257	; 0x101
 800bab2:	2001      	movs	r0, #1
 800bab4:	f011 fb32 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800bab8:	2230      	movs	r2, #48	; 0x30
 800baba:	f240 1101 	movw	r1, #257	; 0x101
 800babe:	2007      	movs	r0, #7
 800bac0:	f011 fb2c 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800bac4:	2237      	movs	r2, #55	; 0x37
 800bac6:	21b5      	movs	r1, #181	; 0xb5
 800bac8:	2001      	movs	r0, #1
 800baca:	f011 fb27 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800bace:	2235      	movs	r2, #53	; 0x35
 800bad0:	21b5      	movs	r1, #181	; 0xb5
 800bad2:	2007      	movs	r0, #7
 800bad4:	f011 fb22 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800bad8:	4620      	mov	r0, r4
 800bada:	2231      	movs	r2, #49	; 0x31
 800badc:	2169      	movs	r1, #105	; 0x69
 800bade:	f011 fb1d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800bae2:	2230      	movs	r2, #48	; 0x30
 800bae4:	2169      	movs	r1, #105	; 0x69
 800bae6:	2004      	movs	r0, #4
 800bae8:	f011 fb18 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800baec:	2230      	movs	r2, #48	; 0x30
 800baee:	2169      	movs	r1, #105	; 0x69
 800baf0:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800baf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800baf6:	f011 bb11 	b.w	801d11c <TFT_DrawChar>
 800bafa:	bf00      	nop
 800bafc:	20000210 	.word	0x20000210
 800bb00:	4d98      	ldr	r5, [pc, #608]	; (800bd64 <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bb02:	2801      	cmp	r0, #1
 800bb04:	bf0c      	ite	eq
 800bb06:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800bb08:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800bb0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800bb0e:	bf18      	it	ne
 800bb10:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800bb12:	f011 fa3f 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800bb16:	2063      	movs	r0, #99	; 0x63
 800bb18:	f011 fa42 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800bb1c:	4892      	ldr	r0, [pc, #584]	; (800bd68 <CQS_Axes_Text+0x4b0>)
 800bb1e:	f011 fa33 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800bb22:	2251      	movs	r2, #81	; 0x51
 800bb24:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb28:	2057      	movs	r0, #87	; 0x57
 800bb2a:	f011 faf7 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800bb2e:	2231      	movs	r2, #49	; 0x31
 800bb30:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb34:	205d      	movs	r0, #93	; 0x5d
 800bb36:	f011 faf1 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800bb3a:	2251      	movs	r2, #81	; 0x51
 800bb3c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb40:	206d      	movs	r0, #109	; 0x6d
 800bb42:	f011 faeb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800bb46:	2232      	movs	r2, #50	; 0x32
 800bb48:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb4c:	2073      	movs	r0, #115	; 0x73
 800bb4e:	f011 fae5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800bb52:	2251      	movs	r2, #81	; 0x51
 800bb54:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb58:	2083      	movs	r0, #131	; 0x83
 800bb5a:	f011 fadf 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800bb5e:	2233      	movs	r2, #51	; 0x33
 800bb60:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb64:	2089      	movs	r0, #137	; 0x89
 800bb66:	f011 fad9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800bb6a:	2251      	movs	r2, #81	; 0x51
 800bb6c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb70:	2099      	movs	r0, #153	; 0x99
 800bb72:	f011 fad3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800bb76:	2234      	movs	r2, #52	; 0x34
 800bb78:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb7c:	209f      	movs	r0, #159	; 0x9f
 800bb7e:	f011 facd 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800bb82:	2251      	movs	r2, #81	; 0x51
 800bb84:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb88:	20af      	movs	r0, #175	; 0xaf
 800bb8a:	f011 fac7 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800bb8e:	2235      	movs	r2, #53	; 0x35
 800bb90:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb94:	20b5      	movs	r0, #181	; 0xb5
 800bb96:	f011 fac1 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800bb9a:	2251      	movs	r2, #81	; 0x51
 800bb9c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bba0:	20c5      	movs	r0, #197	; 0xc5
 800bba2:	f011 fabb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800bba6:	2236      	movs	r2, #54	; 0x36
 800bba8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bbac:	20cb      	movs	r0, #203	; 0xcb
 800bbae:	f011 fab5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800bbb2:	2251      	movs	r2, #81	; 0x51
 800bbb4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bbb8:	20db      	movs	r0, #219	; 0xdb
 800bbba:	f011 faaf 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800bbbe:	2237      	movs	r2, #55	; 0x37
 800bbc0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bbc4:	20e1      	movs	r0, #225	; 0xe1
 800bbc6:	f011 faa9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800bbca:	2251      	movs	r2, #81	; 0x51
 800bbcc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bbd0:	20f1      	movs	r0, #241	; 0xf1
 800bbd2:	f011 faa3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800bbd6:	2238      	movs	r2, #56	; 0x38
 800bbd8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bbdc:	20f7      	movs	r0, #247	; 0xf7
 800bbde:	f011 fa9d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800bbe2:	2251      	movs	r2, #81	; 0x51
 800bbe4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bbe8:	f240 1007 	movw	r0, #263	; 0x107
 800bbec:	f011 fa96 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800bbf0:	2239      	movs	r2, #57	; 0x39
 800bbf2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bbf6:	f240 100d 	movw	r0, #269	; 0x10d
 800bbfa:	f011 fa8f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800bbfe:	2231      	movs	r2, #49	; 0x31
 800bc00:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc04:	f44f 7091 	mov.w	r0, #290	; 0x122
 800bc08:	f011 fa88 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800bc0c:	2251      	movs	r2, #81	; 0x51
 800bc0e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc12:	f240 101d 	movw	r0, #285	; 0x11d
 800bc16:	f011 fa81 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800bc1a:	2230      	movs	r2, #48	; 0x30
 800bc1c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc20:	f44f 7093 	mov.w	r0, #294	; 0x126
 800bc24:	f011 fa7a 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800bc28:	2231      	movs	r2, #49	; 0x31
 800bc2a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc2e:	f44f 709c 	mov.w	r0, #312	; 0x138
 800bc32:	f011 fa73 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800bc36:	2251      	movs	r2, #81	; 0x51
 800bc38:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc3c:	f240 1033 	movw	r0, #307	; 0x133
 800bc40:	f011 fa6c 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800bc44:	2231      	movs	r2, #49	; 0x31
 800bc46:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc4a:	f240 103d 	movw	r0, #317	; 0x13d
 800bc4e:	f011 fa65 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800bc52:	2231      	movs	r2, #49	; 0x31
 800bc54:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc58:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800bc5c:	f011 fa5e 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800bc60:	2251      	movs	r2, #81	; 0x51
 800bc62:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc66:	f240 1049 	movw	r0, #329	; 0x149
 800bc6a:	f011 fa57 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800bc6e:	2232      	movs	r2, #50	; 0x32
 800bc70:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc74:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800bc78:	f011 fa50 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800bc7c:	2231      	movs	r2, #49	; 0x31
 800bc7e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc82:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800bc86:	f011 fa49 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800bc8a:	2251      	movs	r2, #81	; 0x51
 800bc8c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc90:	f240 105f 	movw	r0, #351	; 0x15f
 800bc94:	f011 fa42 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800bc98:	2233      	movs	r2, #51	; 0x33
 800bc9a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc9e:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800bca2:	f011 fa3b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800bca6:	2231      	movs	r2, #49	; 0x31
 800bca8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bcac:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800bcb0:	f011 fa34 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800bcb4:	2251      	movs	r2, #81	; 0x51
 800bcb6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bcba:	f240 1075 	movw	r0, #373	; 0x175
 800bcbe:	f011 fa2d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800bcc2:	2234      	movs	r2, #52	; 0x34
 800bcc4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bcc8:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800bccc:	f011 fa26 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800bcd0:	2231      	movs	r2, #49	; 0x31
 800bcd2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bcd6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bcda:	f011 fa1f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800bcde:	2251      	movs	r2, #81	; 0x51
 800bce0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bce4:	f240 108b 	movw	r0, #395	; 0x18b
 800bce8:	f011 fa18 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800bcec:	2235      	movs	r2, #53	; 0x35
 800bcee:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bcf2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800bcf6:	f011 fa11 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800bcfa:	2230      	movs	r2, #48	; 0x30
 800bcfc:	21fa      	movs	r1, #250	; 0xfa
 800bcfe:	2041      	movs	r0, #65	; 0x41
 800bd00:	f011 fa0c 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800bd04:	2232      	movs	r2, #50	; 0x32
 800bd06:	21ca      	movs	r1, #202	; 0xca
 800bd08:	203a      	movs	r0, #58	; 0x3a
 800bd0a:	f011 fa07 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800bd0e:	2235      	movs	r2, #53	; 0x35
 800bd10:	21ca      	movs	r1, #202	; 0xca
 800bd12:	2041      	movs	r0, #65	; 0x41
 800bd14:	f011 fa02 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800bd18:	2235      	movs	r2, #53	; 0x35
 800bd1a:	2195      	movs	r1, #149	; 0x95
 800bd1c:	203a      	movs	r0, #58	; 0x3a
 800bd1e:	f011 f9fd 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800bd22:	2230      	movs	r2, #48	; 0x30
 800bd24:	2195      	movs	r1, #149	; 0x95
 800bd26:	2041      	movs	r0, #65	; 0x41
 800bd28:	f011 f9f8 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800bd2c:	2237      	movs	r2, #55	; 0x37
 800bd2e:	2160      	movs	r1, #96	; 0x60
 800bd30:	203a      	movs	r0, #58	; 0x3a
 800bd32:	f011 f9f3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800bd36:	2235      	movs	r2, #53	; 0x35
 800bd38:	2160      	movs	r1, #96	; 0x60
 800bd3a:	2041      	movs	r0, #65	; 0x41
 800bd3c:	f011 f9ee 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800bd40:	2231      	movs	r2, #49	; 0x31
 800bd42:	212b      	movs	r1, #43	; 0x2b
 800bd44:	2039      	movs	r0, #57	; 0x39
 800bd46:	f011 f9e9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800bd4a:	2230      	movs	r2, #48	; 0x30
 800bd4c:	212b      	movs	r1, #43	; 0x2b
 800bd4e:	203e      	movs	r0, #62	; 0x3e
 800bd50:	f011 f9e4 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800bd54:	2230      	movs	r2, #48	; 0x30
 800bd56:	212b      	movs	r1, #43	; 0x2b
 800bd58:	2043      	movs	r0, #67	; 0x43
 800bd5a:	f011 f9df 	bl	801d11c <TFT_DrawChar>
		TFT_direction = 0x00;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	702b      	strb	r3, [r5, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	200056a0 	.word	0x200056a0
 800bd68:	20000210 	.word	0x20000210

0800bd6c <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800bd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd70:	ed2d 8b04 	vpush	{d8-d9}
 800bd74:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800bd76:	ad06      	add	r5, sp, #24
 800bd78:	2300      	movs	r3, #0
{
 800bd7a:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800bd7c:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800bd80:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800c108 <CQS_chart+0x39c>
 800bd84:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f040 81ca 	bne.w	800c120 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800bd8c:	780b      	ldrb	r3, [r1, #0]
 800bd8e:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800c10c <CQS_chart+0x3a0>
 800bd92:	eddf 8adf 	vldr	s17, [pc, #892]	; 800c110 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800bd96:	4fdf      	ldr	r7, [pc, #892]	; (800c114 <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800bd98:	ee07 3a90 	vmov	s15, r3
 800bd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda0:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800bda4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	2222      	movs	r2, #34	; 0x22
 800bdac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bdb0:	2018      	movs	r0, #24
 800bdb2:	eef0 7a49 	vmov.f32	s15, s18
 800bdb6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bdba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdbe:	edcd 7a03 	vstr	s15, [sp, #12]
 800bdc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bdc6:	f010 feb6 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800bdca:	7863      	ldrb	r3, [r4, #1]
 800bdcc:	ee07 3a90 	vmov	s15, r3
 800bdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd4:	f645 2392 	movw	r3, #23186	; 0x5a92
 800bdd8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	2232      	movs	r2, #50	; 0x32
 800bde0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bde4:	2028      	movs	r0, #40	; 0x28
 800bde6:	eef0 7a49 	vmov.f32	s15, s18
 800bdea:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bdee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdf2:	edcd 7a03 	vstr	s15, [sp, #12]
 800bdf6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bdfa:	f010 fe9c 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800bdfe:	78a3      	ldrb	r3, [r4, #2]
 800be00:	ee07 3a90 	vmov	s15, r3
 800be04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be08:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800be0c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	2242      	movs	r2, #66	; 0x42
 800be14:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800be18:	2038      	movs	r0, #56	; 0x38
 800be1a:	eef0 7a49 	vmov.f32	s15, s18
 800be1e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800be22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be26:	edcd 7a03 	vstr	s15, [sp, #12]
 800be2a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be2e:	f010 fe82 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800be32:	78e3      	ldrb	r3, [r4, #3]
 800be34:	ee07 3a90 	vmov	s15, r3
 800be38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be3c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800be40:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	2252      	movs	r2, #82	; 0x52
 800be48:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800be4c:	2048      	movs	r0, #72	; 0x48
 800be4e:	eef0 7a49 	vmov.f32	s15, s18
 800be52:	eee7 7a68 	vfms.f32	s15, s14, s17
 800be56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be5a:	edcd 7a03 	vstr	s15, [sp, #12]
 800be5e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be62:	f010 fe68 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800be66:	7923      	ldrb	r3, [r4, #4]
 800be68:	ee07 3a90 	vmov	s15, r3
 800be6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be70:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800be74:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	2262      	movs	r2, #98	; 0x62
 800be7c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800be80:	2058      	movs	r0, #88	; 0x58
 800be82:	eef0 7a49 	vmov.f32	s15, s18
 800be86:	eee7 7a68 	vfms.f32	s15, s14, s17
 800be8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be8e:	edcd 7a03 	vstr	s15, [sp, #12]
 800be92:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be96:	f010 fe4e 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800be9a:	7963      	ldrb	r3, [r4, #5]
 800be9c:	ee07 3a90 	vmov	s15, r3
 800bea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea4:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800bea8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	2272      	movs	r2, #114	; 0x72
 800beb0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800beb4:	2068      	movs	r0, #104	; 0x68
 800beb6:	eef0 7a49 	vmov.f32	s15, s18
 800beba:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bec2:	edcd 7a03 	vstr	s15, [sp, #12]
 800bec6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800beca:	f010 fe34 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800bece:	79a3      	ldrb	r3, [r4, #6]
 800bed0:	ee07 3a90 	vmov	s15, r3
 800bed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed8:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800bedc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	2282      	movs	r2, #130	; 0x82
 800bee4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bee8:	2078      	movs	r0, #120	; 0x78
 800beea:	eef0 7a49 	vmov.f32	s15, s18
 800beee:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bef6:	edcd 7a03 	vstr	s15, [sp, #12]
 800befa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800befe:	f010 fe1a 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800bf02:	79e3      	ldrb	r3, [r4, #7]
 800bf04:	ee07 3a90 	vmov	s15, r3
 800bf08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0c:	f247 5369 	movw	r3, #30057	; 0x7569
 800bf10:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	2292      	movs	r2, #146	; 0x92
 800bf18:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bf1c:	2088      	movs	r0, #136	; 0x88
 800bf1e:	eef0 7a49 	vmov.f32	s15, s18
 800bf22:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bf26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf2a:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf2e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf32:	f010 fe00 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800bf36:	7a23      	ldrb	r3, [r4, #8]
 800bf38:	ee07 3a90 	vmov	s15, r3
 800bf3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf40:	f24b 6307 	movw	r3, #46599	; 0xb607
 800bf44:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	22a2      	movs	r2, #162	; 0xa2
 800bf4c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bf50:	2098      	movs	r0, #152	; 0x98
 800bf52:	eef0 7a49 	vmov.f32	s15, s18
 800bf56:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bf5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf5e:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf62:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf66:	f010 fde6 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800bf6a:	7a63      	ldrb	r3, [r4, #9]
 800bf6c:	ee07 3a90 	vmov	s15, r3
 800bf70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf74:	f64e 6325 	movw	r3, #60965	; 0xee25
 800bf78:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	22b2      	movs	r2, #178	; 0xb2
 800bf80:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bf84:	20a8      	movs	r0, #168	; 0xa8
 800bf86:	eef0 7a49 	vmov.f32	s15, s18
 800bf8a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bf8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf92:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf96:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf9a:	f010 fdcc 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800bf9e:	7aa3      	ldrb	r3, [r4, #10]
 800bfa0:	ee07 3a90 	vmov	s15, r3
 800bfa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa8:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800bfac:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	22c2      	movs	r2, #194	; 0xc2
 800bfb4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bfb8:	20b8      	movs	r0, #184	; 0xb8
 800bfba:	eef0 7a49 	vmov.f32	s15, s18
 800bfbe:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bfc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfc6:	edcd 7a03 	vstr	s15, [sp, #12]
 800bfca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bfce:	f010 fdb2 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800bfd2:	7ae3      	ldrb	r3, [r4, #11]
 800bfd4:	ee07 3a90 	vmov	s15, r3
 800bfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfdc:	f64e 4347 	movw	r3, #60487	; 0xec47
 800bfe0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	22d2      	movs	r2, #210	; 0xd2
 800bfe8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bfec:	20c8      	movs	r0, #200	; 0xc8
 800bfee:	eef0 7a49 	vmov.f32	s15, s18
 800bff2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bffa:	edcd 7a03 	vstr	s15, [sp, #12]
 800bffe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c002:	f010 fd98 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800c006:	7b23      	ldrb	r3, [r4, #12]
 800c008:	ee07 3a90 	vmov	s15, r3
 800c00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c010:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800c014:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	22e2      	movs	r2, #226	; 0xe2
 800c01c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c020:	20d8      	movs	r0, #216	; 0xd8
 800c022:	eef0 7a49 	vmov.f32	s15, s18
 800c026:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c02a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c02e:	edcd 7a03 	vstr	s15, [sp, #12]
 800c032:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c036:	f010 fd7e 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800c03a:	7b63      	ldrb	r3, [r4, #13]
 800c03c:	ee07 3a90 	vmov	s15, r3
 800c040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c044:	f64a 1347 	movw	r3, #43335	; 0xa947
 800c048:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	22f2      	movs	r2, #242	; 0xf2
 800c050:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c054:	20e8      	movs	r0, #232	; 0xe8
 800c056:	eef0 7a49 	vmov.f32	s15, s18
 800c05a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c05e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c062:	edcd 7a03 	vstr	s15, [sp, #12]
 800c066:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c06a:	f010 fd64 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800c06e:	7ba3      	ldrb	r3, [r4, #14]
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c078:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800c07c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c080:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	20f8      	movs	r0, #248	; 0xf8
 800c088:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800c08c:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800c08e:	eea7 9a68 	vfms.f32	s18, s14, s17
 800c092:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800c096:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800c118 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800c09a:	edcd 7a03 	vstr	s15, [sp, #12]
 800c09e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c0a2:	f010 fd48 	bl	801cb36 <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800c0a6:	481d      	ldr	r0, [pc, #116]	; (800c11c <CQS_chart+0x3b0>)
 800c0a8:	f010 ff6e 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800c0ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c0b0:	f010 ff70 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800c0b4:	2063      	movs	r0, #99	; 0x63
 800c0b6:	f010 ff73 	bl	801cfa0 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800c0ba:	7872      	ldrb	r2, [r6, #1]
 800c0bc:	4639      	mov	r1, r7
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f014 fc28 	bl	8020914 <sprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800c0c4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800c0c8:	ee07 3a90 	vmov	s15, r3
 800c0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c0d6:	3410      	adds	r4, #16
 800c0d8:	2303      	movs	r3, #3
 800c0da:	462a      	mov	r2, r5
 800c0dc:	b2a4      	uxth	r4, r4
 800c0de:	eef0 7a49 	vmov.f32	s15, s18
 800c0e2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ea:	edcd 7a03 	vstr	s15, [sp, #12]
 800c0ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c0f2:	f011 f86b 	bl	801d1cc <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800c0f6:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800c0fa:	d1de      	bne.n	800c0ba <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800c0fc:	b006      	add	sp, #24
 800c0fe:	ecbd 8b04 	vpop	{d8-d9}
 800c102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c106:	bf00      	nop
 800c108:	42c80000 	.word	0x42c80000
 800c10c:	43cd0000 	.word	0x43cd0000
 800c110:	43988000 	.word	0x43988000
 800c114:	08025609 	.word	0x08025609
 800c118:	43c80000 	.word	0x43c80000
 800c11c:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800c120:	2801      	cmp	r0, #1
 800c122:	4fdf      	ldr	r7, [pc, #892]	; (800c4a0 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800c124:	eddf 8adf 	vldr	s17, [pc, #892]	; 800c4a4 <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800c128:	bf0e      	itee	eq
 800c12a:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800c12c:	2302      	movne	r3, #2
 800c12e:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800c130:	780b      	ldrb	r3, [r1, #0]
 800c132:	ed9f 9add 	vldr	s18, [pc, #884]	; 800c4a8 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800c136:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800c4b8 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c142:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800c146:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	2262      	movs	r2, #98	; 0x62
 800c14e:	23fc      	movs	r3, #252	; 0xfc
 800c150:	2057      	movs	r0, #87	; 0x57
 800c152:	eef0 7a68 	vmov.f32	s15, s17
 800c156:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c15a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c15e:	edcd 7a03 	vstr	s15, [sp, #12]
 800c162:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c166:	f010 fce6 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800c16a:	7863      	ldrb	r3, [r4, #1]
 800c16c:	ee07 3a90 	vmov	s15, r3
 800c170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c174:	f645 2392 	movw	r3, #23186	; 0x5a92
 800c178:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	2278      	movs	r2, #120	; 0x78
 800c180:	23fc      	movs	r3, #252	; 0xfc
 800c182:	206d      	movs	r0, #109	; 0x6d
 800c184:	eef0 7a68 	vmov.f32	s15, s17
 800c188:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c18c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c190:	edcd 7a03 	vstr	s15, [sp, #12]
 800c194:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c198:	f010 fccd 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800c19c:	78a3      	ldrb	r3, [r4, #2]
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a6:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800c1aa:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	228e      	movs	r2, #142	; 0x8e
 800c1b2:	23fc      	movs	r3, #252	; 0xfc
 800c1b4:	2083      	movs	r0, #131	; 0x83
 800c1b6:	eef0 7a68 	vmov.f32	s15, s17
 800c1ba:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1c2:	edcd 7a03 	vstr	s15, [sp, #12]
 800c1c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c1ca:	f010 fcb4 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800c1ce:	78e3      	ldrb	r3, [r4, #3]
 800c1d0:	ee07 3a90 	vmov	s15, r3
 800c1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d8:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800c1dc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	22a4      	movs	r2, #164	; 0xa4
 800c1e4:	23fc      	movs	r3, #252	; 0xfc
 800c1e6:	2099      	movs	r0, #153	; 0x99
 800c1e8:	eef0 7a68 	vmov.f32	s15, s17
 800c1ec:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800c1f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c1fc:	f010 fc9b 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800c200:	7923      	ldrb	r3, [r4, #4]
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20a:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800c20e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	22ba      	movs	r2, #186	; 0xba
 800c216:	23fc      	movs	r3, #252	; 0xfc
 800c218:	20af      	movs	r0, #175	; 0xaf
 800c21a:	eef0 7a68 	vmov.f32	s15, s17
 800c21e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c226:	edcd 7a03 	vstr	s15, [sp, #12]
 800c22a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c22e:	f010 fc82 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800c232:	7963      	ldrb	r3, [r4, #5]
 800c234:	ee07 3a90 	vmov	s15, r3
 800c238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800c240:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	22d0      	movs	r2, #208	; 0xd0
 800c248:	23fc      	movs	r3, #252	; 0xfc
 800c24a:	20c5      	movs	r0, #197	; 0xc5
 800c24c:	eef0 7a68 	vmov.f32	s15, s17
 800c250:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c258:	edcd 7a03 	vstr	s15, [sp, #12]
 800c25c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c260:	f010 fc69 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800c264:	79a3      	ldrb	r3, [r4, #6]
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26e:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800c272:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	22e6      	movs	r2, #230	; 0xe6
 800c27a:	23fc      	movs	r3, #252	; 0xfc
 800c27c:	20db      	movs	r0, #219	; 0xdb
 800c27e:	eef0 7a68 	vmov.f32	s15, s17
 800c282:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c28a:	edcd 7a03 	vstr	s15, [sp, #12]
 800c28e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c292:	f010 fc50 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800c296:	79e3      	ldrb	r3, [r4, #7]
 800c298:	ee07 3a90 	vmov	s15, r3
 800c29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a0:	f247 5369 	movw	r3, #30057	; 0x7569
 800c2a4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	23fc      	movs	r3, #252	; 0xfc
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	20f1      	movs	r0, #241	; 0xf1
 800c2b0:	eef0 7a68 	vmov.f32	s15, s17
 800c2b4:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2bc:	edcd 7a03 	vstr	s15, [sp, #12]
 800c2c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c2c4:	f010 fc37 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800c2c8:	7a23      	ldrb	r3, [r4, #8]
 800c2ca:	ee07 3a90 	vmov	s15, r3
 800c2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d2:	f24b 6307 	movw	r3, #46599	; 0xb607
 800c2d6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c2e0:	23fc      	movs	r3, #252	; 0xfc
 800c2e2:	f240 1007 	movw	r0, #263	; 0x107
 800c2e6:	eef0 7a68 	vmov.f32	s15, s17
 800c2ea:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c2ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2f2:	edcd 7a03 	vstr	s15, [sp, #12]
 800c2f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c2fa:	f010 fc1c 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800c2fe:	7a63      	ldrb	r3, [r4, #9]
 800c300:	ee07 3a90 	vmov	s15, r3
 800c304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c308:	f64e 6325 	movw	r3, #60965	; 0xee25
 800c30c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c316:	23fc      	movs	r3, #252	; 0xfc
 800c318:	f240 101d 	movw	r0, #285	; 0x11d
 800c31c:	eef0 7a68 	vmov.f32	s15, s17
 800c320:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c328:	edcd 7a03 	vstr	s15, [sp, #12]
 800c32c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c330:	f010 fc01 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800c334:	7aa3      	ldrb	r3, [r4, #10]
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c33e:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800c342:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800c34c:	23fc      	movs	r3, #252	; 0xfc
 800c34e:	f240 1033 	movw	r0, #307	; 0x133
 800c352:	eef0 7a68 	vmov.f32	s15, s17
 800c356:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c35a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c35e:	edcd 7a03 	vstr	s15, [sp, #12]
 800c362:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c366:	f010 fbe6 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800c36a:	7ae3      	ldrb	r3, [r4, #11]
 800c36c:	ee07 3a90 	vmov	s15, r3
 800c370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c374:	f64e 4347 	movw	r3, #60487	; 0xec47
 800c378:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800c382:	23fc      	movs	r3, #252	; 0xfc
 800c384:	f240 1049 	movw	r0, #329	; 0x149
 800c388:	eef0 7a68 	vmov.f32	s15, s17
 800c38c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c394:	edcd 7a03 	vstr	s15, [sp, #12]
 800c398:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c39c:	f010 fbcb 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800c3a0:	7b23      	ldrb	r3, [r4, #12]
 800c3a2:	ee07 3a90 	vmov	s15, r3
 800c3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3aa:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800c3ae:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c3b8:	23fc      	movs	r3, #252	; 0xfc
 800c3ba:	f240 105f 	movw	r0, #351	; 0x15f
 800c3be:	eef0 7a68 	vmov.f32	s15, s17
 800c3c2:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c3c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ca:	edcd 7a03 	vstr	s15, [sp, #12]
 800c3ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c3d2:	f010 fbb0 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800c3d6:	7b63      	ldrb	r3, [r4, #13]
 800c3d8:	ee07 3a90 	vmov	s15, r3
 800c3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e0:	f64a 1347 	movw	r3, #43335	; 0xa947
 800c3e4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c3ee:	23fc      	movs	r3, #252	; 0xfc
 800c3f0:	f240 1075 	movw	r0, #373	; 0x175
 800c3f4:	eef0 7a68 	vmov.f32	s15, s17
 800c3f8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c3fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c400:	edcd 7a03 	vstr	s15, [sp, #12]
 800c404:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c408:	f010 fb95 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800c40c:	7ba3      	ldrb	r3, [r4, #14]
 800c40e:	ee07 3a90 	vmov	s15, r3
 800c412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c416:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800c41a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800c424:	23fc      	movs	r3, #252	; 0xfc
 800c426:	f240 108b 	movw	r0, #395	; 0x18b
 800c42a:	2457      	movs	r4, #87	; 0x57
 800c42c:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800c430:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800c4ac <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800c434:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800c438:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800c4b0 <CQS_chart+0x744>
 800c43c:	edcd 7a03 	vstr	s15, [sp, #12]
 800c440:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c444:	f010 fb77 	bl	801cb36 <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800c448:	7872      	ldrb	r2, [r6, #1]
 800c44a:	4641      	mov	r1, r8
 800c44c:	4628      	mov	r0, r5
 800c44e:	f014 fa61 	bl	8020914 <sprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800c452:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800c456:	ee07 3a90 	vmov	s15, r3
 800c45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c45e:	2b09      	cmp	r3, #9
 800c460:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c464:	f04f 0303 	mov.w	r3, #3
 800c468:	4620      	mov	r0, r4
 800c46a:	462a      	mov	r2, r5
 800c46c:	f104 0416 	add.w	r4, r4, #22
 800c470:	b2a4      	uxth	r4, r4
 800c472:	bf94      	ite	ls
 800c474:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800c4b4 <CQS_chart+0x748>
 800c478:	eef0 7a49 	vmovhi.f32	s15, s18
 800c47c:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c484:	edcd 7a03 	vstr	s15, [sp, #12]
 800c488:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c48c:	f010 fe9e 	bl	801d1cc <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800c490:	f240 13a1 	movw	r3, #417	; 0x1a1
 800c494:	429c      	cmp	r4, r3
 800c496:	d1d7      	bne.n	800c448 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800c498:	2300      	movs	r3, #0
 800c49a:	703b      	strb	r3, [r7, #0]
}
 800c49c:	e62e      	b.n	800c0fc <CQS_chart+0x390>
 800c49e:	bf00      	nop
 800c4a0:	200056a0 	.word	0x200056a0
 800c4a4:	437c0000 	.word	0x437c0000
 800c4a8:	43520000 	.word	0x43520000
 800c4ac:	437a0000 	.word	0x437a0000
 800c4b0:	43570000 	.word	0x43570000
 800c4b4:	43730000 	.word	0x43730000
 800c4b8:	08025609 	.word	0x08025609

0800c4bc <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c4bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c4c0:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c4c2:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	4688      	mov	r8, r1
 800c4c8:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c4ca:	213a      	movs	r1, #58	; 0x3a
 800c4cc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	2005      	movs	r0, #5
 800c4d4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c4d8:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c4dc:	f010 fb2b 	bl	801cb36 <TFT_FillRectangle>
	CQS_Axes(direction);
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f7ff f877 	bl	800b5d4 <CQS_Axes>
	CQS_Axes_Text(direction);
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f7ff f9e6 	bl	800b8b8 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800c4ec:	4641      	mov	r1, r8
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f7ff fc3c 	bl	800bd6c <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800c4f4:	463b      	mov	r3, r7
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	b002      	add	sp, #8
 800c4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800c502:	f7ff b905 	b.w	800b710 <CQS_Axes_Measure>

0800c506 <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800c506:	e9d0 0100 	ldrd	r0, r1, [r0]
 800c50a:	4770      	bx	lr

0800c50c <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800c50c:	4b13      	ldr	r3, [pc, #76]	; (800c55c <CRC_Check+0x50>)
{
 800c50e:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c512:	4e13      	ldr	r6, [pc, #76]	; (800c560 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800c514:	6018      	str	r0, [r3, #0]
 800c516:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c51a:	2400      	movs	r4, #0
 800c51c:	4281      	cmp	r1, r0
 800c51e:	d811      	bhi.n	800c544 <CRC_Check+0x38>
 800c520:	b104      	cbz	r4, 800c524 <CRC_Check+0x18>
 800c522:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c524:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800c528:	4b0e      	ldr	r3, [pc, #56]	; (800c564 <CRC_Check+0x58>)
 800c52a:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800c52e:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c532:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800c536:	4299      	cmp	r1, r3
 800c538:	bf0a      	itet	eq
 800c53a:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800c53c:	2001      	movne	r0, #1
 800c53e:	2000      	moveq	r0, #0
 800c540:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c544:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800c548:	e9d6 4500 	ldrd	r4, r5, [r6]
 800c54c:	eb14 0408 	adds.w	r4, r4, r8
 800c550:	eb45 0509 	adc.w	r5, r5, r9
 800c554:	e9c6 4500 	strd	r4, r5, [r6]
 800c558:	2401      	movs	r4, #1
 800c55a:	e7df      	b.n	800c51c <CRC_Check+0x10>
 800c55c:	20090988 	.word	0x20090988
 800c560:	20004640 	.word	0x20004640
 800c564:	20004648 	.word	0x20004648

0800c568 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800c568:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800c56a:	f7f3 fff3 	bl	8000554 <__aeabi_i2d>
 800c56e:	a316      	add	r3, pc, #88	; (adr r3, 800c5c8 <calcNorm560_CRI+0x60>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f7f4 f854 	bl	8000620 <__aeabi_dmul>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	a114      	add	r1, pc, #80	; (adr r1, 800c5d0 <calcNorm560_CRI+0x68>)
 800c57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c582:	f7f4 f977 	bl	8000874 <__aeabi_ddiv>
 800c586:	ec41 0b10 	vmov	d0, r0, r1
 800c58a:	f017 fa01 	bl	8023990 <exp>
 800c58e:	2200      	movs	r2, #0
 800c590:	ec51 0b10 	vmov	r0, r1, d0
 800c594:	4b0a      	ldr	r3, [pc, #40]	; (800c5c0 <calcNorm560_CRI+0x58>)
 800c596:	f7f3 fe8f 	bl	80002b8 <__aeabi_dsub>
 800c59a:	460b      	mov	r3, r1
 800c59c:	4602      	mov	r2, r0
 800c59e:	a106      	add	r1, pc, #24	; (adr r1, 800c5b8 <calcNorm560_CRI+0x50>)
 800c5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a4:	f7f4 f966 	bl	8000874 <__aeabi_ddiv>
 800c5a8:	f7f4 fb32 	bl	8000c10 <__aeabi_d2f>
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <calcNorm560_CRI+0x5c>)
 800c5ae:	6018      	str	r0, [r3, #0]
 800c5b0:	bd08      	pop	{r3, pc}
 800c5b2:	bf00      	nop
 800c5b4:	f3af 8000 	nop.w
 800c5b8:	f9f35846 	.word	0xf9f35846
 800c5bc:	466ca5d1 	.word	0x466ca5d1
 800c5c0:	3ff00000 	.word	0x3ff00000
 800c5c4:	200909b8 	.word	0x200909b8
 800c5c8:	05ea7ab3 	.word	0x05ea7ab3
 800c5cc:	3ea2ca5d 	.word	0x3ea2ca5d
 800c5d0:	aba38759 	.word	0xaba38759
 800c5d4:	3f8d7774 	.word	0x3f8d7774

0800c5d8 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800c5d8:	f241 3387 	movw	r3, #4999	; 0x1387
 800c5dc:	4299      	cmp	r1, r3
{
 800c5de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800c5e6:	d84e      	bhi.n	800c686 <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c5e8:	4c39      	ldr	r4, [pc, #228]	; (800c6d0 <calcSref_CRI+0xf8>)
 800c5ea:	4404      	add	r4, r0
 800c5ec:	6820      	ldr	r0, [r4, #0]
 800c5ee:	f7f3 ffc3 	bl	8000578 <__aeabi_f2d>
 800c5f2:	a331      	add	r3, pc, #196	; (adr r3, 800c6b8 <calcSref_CRI+0xe0>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f4 f812 	bl	8000620 <__aeabi_dmul>
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	4628      	mov	r0, r5
 800c600:	460f      	mov	r7, r1
 800c602:	f7f3 ffa7 	bl	8000554 <__aeabi_i2d>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4630      	mov	r0, r6
 800c60c:	4639      	mov	r1, r7
 800c60e:	f7f4 f807 	bl	8000620 <__aeabi_dmul>
 800c612:	4602      	mov	r2, r0
 800c614:	460b      	mov	r3, r1
 800c616:	a12a      	add	r1, pc, #168	; (adr r1, 800c6c0 <calcSref_CRI+0xe8>)
 800c618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c61c:	f7f4 f92a 	bl	8000874 <__aeabi_ddiv>
 800c620:	ec41 0b10 	vmov	d0, r0, r1
 800c624:	f017 f9b4 	bl	8023990 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c628:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c62a:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c62e:	f7f3 ffa3 	bl	8000578 <__aeabi_f2d>
 800c632:	a321      	add	r3, pc, #132	; (adr r3, 800c6b8 <calcSref_CRI+0xe0>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 fff2 	bl	8000620 <__aeabi_dmul>
 800c63c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800c6c8 <calcSref_CRI+0xf0>
 800c640:	ec41 0b10 	vmov	d0, r0, r1
 800c644:	f017 faa0 	bl	8023b88 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c648:	2200      	movs	r2, #0
 800c64a:	4b22      	ldr	r3, [pc, #136]	; (800c6d4 <calcSref_CRI+0xfc>)
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c650:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c654:	f7f3 fe30 	bl	80002b8 <__aeabi_dsub>
 800c658:	f7f4 fada 	bl	8000c10 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c65c:	f7f3 ff8c 	bl	8000578 <__aeabi_f2d>
 800c660:	ed9d 0b00 	vldr	d0, [sp]
 800c664:	460b      	mov	r3, r1
 800c666:	4602      	mov	r2, r0
 800c668:	ec51 0b10 	vmov	r0, r1, d0
 800c66c:	f7f4 f902 	bl	8000874 <__aeabi_ddiv>
 800c670:	f7f4 face 	bl	8000c10 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800c674:	4b18      	ldr	r3, [pc, #96]	; (800c6d8 <calcSref_CRI+0x100>)
 800c676:	ee07 0a10 	vmov	s14, r0
 800c67a:	edd3 7a00 	vldr	s15, [r3]
 800c67e:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800c682:	b003      	add	sp, #12
 800c684:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800c686:	4a15      	ldr	r2, [pc, #84]	; (800c6dc <calcSref_CRI+0x104>)
 800c688:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <calcSref_CRI+0x108>)
 800c68a:	4916      	ldr	r1, [pc, #88]	; (800c6e4 <calcSref_CRI+0x10c>)
 800c68c:	4403      	add	r3, r0
 800c68e:	4401      	add	r1, r0
 800c690:	4410      	add	r0, r2
 800c692:	4a15      	ldr	r2, [pc, #84]	; (800c6e8 <calcSref_CRI+0x110>)
 800c694:	ed91 7a00 	vldr	s14, [r1]
 800c698:	edd2 7a00 	vldr	s15, [r2]
 800c69c:	ed90 0a00 	vldr	s0, [r0]
 800c6a0:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c6a4:	ed93 7a00 	vldr	s14, [r3]
 800c6a8:	4b10      	ldr	r3, [pc, #64]	; (800c6ec <calcSref_CRI+0x114>)
 800c6aa:	edd3 7a00 	vldr	s15, [r3]
 800c6ae:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800c6b2:	e7e6      	b.n	800c682 <calcSref_CRI+0xaa>
 800c6b4:	f3af 8000 	nop.w
 800c6b8:	e826d695 	.word	0xe826d695
 800c6bc:	3e112e0b 	.word	0x3e112e0b
 800c6c0:	aba38759 	.word	0xaba38759
 800c6c4:	3f8d7774 	.word	0x3f8d7774
 800c6c8:	00000000 	.word	0x00000000
 800c6cc:	c0140000 	.word	0xc0140000
 800c6d0:	20054948 	.word	0x20054948
 800c6d4:	3ff00000 	.word	0x3ff00000
 800c6d8:	200909b8 	.word	0x200909b8
 800c6dc:	2004e93c 	.word	0x2004e93c
 800c6e0:	2005093c 	.word	0x2005093c
 800c6e4:	2004f93c 	.word	0x2004f93c
 800c6e8:	20004650 	.word	0x20004650
 800c6ec:	20004654 	.word	0x20004654

0800c6f0 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	ed2d 8b08 	vpush	{d8-d11}
 800c6f8:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800c6fc:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800c6fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800c702:	900c      	str	r0, [sp, #48]	; 0x30
 800c704:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800c706:	a822      	add	r0, sp, #136	; 0x88
 800c708:	2100      	movs	r1, #0
 800c70a:	f014 f8fa 	bl	8020902 <memset>
	float CRI_R_temp[1024] = {0};
 800c70e:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c712:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c716:	2100      	movs	r1, #0
 800c718:	3008      	adds	r0, #8
 800c71a:	f014 f8f2 	bl	8020902 <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800c71e:	2278      	movs	r2, #120	; 0x78
 800c720:	2100      	movs	r1, #0
 800c722:	48c1      	ldr	r0, [pc, #772]	; (800ca28 <CRI_func+0x338>)
 800c724:	f014 f8ed 	bl	8020902 <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800c728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c72a:	f241 3387 	movw	r3, #4999	; 0x1387
 800c72e:	429a      	cmp	r2, r3
 800c730:	f200 8514 	bhi.w	800d15c <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800c734:	4610      	mov	r0, r2
 800c736:	f7ff ff17 	bl	800c568 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800c73a:	4bbc      	ldr	r3, [pc, #752]	; (800ca2c <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c73c:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800ca30 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800c740:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800c744:	a1b2      	add	r1, pc, #712	; (adr r1, 800ca10 <CRI_func+0x320>)
 800c746:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800c74a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800c74e:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800c752:	4bb8      	ldr	r3, [pc, #736]	; (800ca34 <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800c754:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800c758:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c75c:	210d      	movs	r1, #13
 800c75e:	2055      	movs	r0, #85	; 0x55
 800c760:	f007 f854 	bl	801380c <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c764:	4bb4      	ldr	r3, [pc, #720]	; (800ca38 <CRI_func+0x348>)
 800c766:	ed93 7a00 	vldr	s14, [r3]
 800c76a:	4bb4      	ldr	r3, [pc, #720]	; (800ca3c <CRI_func+0x34c>)
 800c76c:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800c770:	ecfa 6a01 	vldmia	sl!, {s13}
 800c774:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800c778:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c77a:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800c77e:	d1f7      	bne.n	800c770 <CRI_func+0x80>
 800c780:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800ca18 <CRI_func+0x328>
 800c784:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800c788:	eeb0 8a47 	vmov.f32	s16, s14
 800c78c:	eef0 8a67 	vmov.f32	s17, s15
 800c790:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c794:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c798:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c79c:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c7a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c7a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	9310      	str	r3, [sp, #64]	; 0x40
 800c7ae:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800c7b0:	4ca0      	ldr	r4, [pc, #640]	; (800ca34 <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c7b2:	4fa3      	ldr	r7, [pc, #652]	; (800ca40 <CRI_func+0x350>)
 800c7b4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800ca3c <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c7b8:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800ca68 <CRI_func+0x378>
		bar_CRI += 0.05;
 800c7bc:	a398      	add	r3, pc, #608	; (adr r3, 800ca20 <CRI_func+0x330>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c7c6:	f7f3 fd79 	bl	80002bc <__adddf3>
 800c7ca:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800c7ce:	f7f4 fa1f 	bl	8000c10 <__aeabi_d2f>
 800c7d2:	210d      	movs	r1, #13
 800c7d4:	ee00 0a10 	vmov	s0, r0
 800c7d8:	2055      	movs	r0, #85	; 0x55
 800c7da:	f007 f817 	bl	801380c <GUI_Bar_Measure>
		 x_i_test = 0;
 800c7de:	4b99      	ldr	r3, [pc, #612]	; (800ca44 <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c7e0:	4899      	ldr	r0, [pc, #612]	; (800ca48 <CRI_func+0x358>)
		 x_i_test = 0;
 800c7e2:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800c7e6:	4b99      	ldr	r3, [pc, #612]	; (800ca4c <CRI_func+0x35c>)
 800c7e8:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800c7ec:	4b98      	ldr	r3, [pc, #608]	; (800ca50 <CRI_func+0x360>)
 800c7ee:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800c7f2:	4b98      	ldr	r3, [pc, #608]	; (800ca54 <CRI_func+0x364>)
 800c7f4:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800c7f8:	4b97      	ldr	r3, [pc, #604]	; (800ca58 <CRI_func+0x368>)
 800c7fa:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800c7fe:	4b97      	ldr	r3, [pc, #604]	; (800ca5c <CRI_func+0x36c>)
 800c800:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c804:	9b00      	ldr	r3, [sp, #0]
 800c806:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800c80a:	3208      	adds	r2, #8
 800c80c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c810:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800c814:	f002 fdd4 	bl	800f3c0 <Calibration_Load_Pack>
 800c818:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800c81a:	4625      	mov	r5, r4
 800c81c:	f89d 3000 	ldrb.w	r3, [sp]
 800c820:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800c822:	9b00      	ldr	r3, [sp, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d150      	bne.n	800c8ca <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c828:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c82a:	4628      	mov	r0, r5
 800c82c:	f7ff fed4 	bl	800c5d8 <calcSref_CRI>
 800c830:	ab22      	add	r3, sp, #136	; 0x88
 800c832:	4423      	add	r3, r4
 800c834:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c838:	19e3      	adds	r3, r4, r7
 800c83a:	edd3 9a00 	vldr	s19, [r3]
 800c83e:	eb09 0304 	add.w	r3, r9, r4
 800c842:	edd3 7a00 	vldr	s15, [r3]
 800c846:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c84a:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c84e:	ee17 0a90 	vmov	r0, s15
 800c852:	f7f3 fe91 	bl	8000578 <__aeabi_f2d>
 800c856:	4602      	mov	r2, r0
 800c858:	460b      	mov	r3, r1
 800c85a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c85e:	f7f3 fd2d 	bl	80002bc <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c862:	eb04 0308 	add.w	r3, r4, r8
 800c866:	edd3 7a00 	vldr	s15, [r3]
 800c86a:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c86e:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c872:	ee17 0a90 	vmov	r0, s15
 800c876:	f7f3 fe7f 	bl	8000578 <__aeabi_f2d>
 800c87a:	4602      	mov	r2, r0
 800c87c:	460b      	mov	r3, r1
 800c87e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c882:	f7f3 fd1b 	bl	80002bc <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c886:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c88a:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c88e:	ee17 0a90 	vmov	r0, s15
 800c892:	f7f3 fe71 	bl	8000578 <__aeabi_f2d>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c89e:	f7f3 fd0d 	bl	80002bc <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c8a2:	4b6f      	ldr	r3, [pc, #444]	; (800ca60 <CRI_func+0x370>)
 800c8a4:	4423      	add	r3, r4
 800c8a6:	edd3 7a00 	vldr	s15, [r3]
 800c8aa:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c8ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c8b2:	ee17 0a90 	vmov	r0, s15
 800c8b6:	f7f3 fe5f 	bl	8000578 <__aeabi_f2d>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8c2:	f7f3 fcfb 	bl	80002bc <__adddf3>
 800c8c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c8ca:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	4423      	add	r3, r4
 800c8d2:	ed93 9a00 	vldr	s18, [r3]
 800c8d6:	4e5b      	ldr	r6, [pc, #364]	; (800ca44 <CRI_func+0x354>)
 800c8d8:	eb09 0304 	add.w	r3, r9, r4
 800c8dc:	edd3 9a00 	vldr	s19, [r3]
 800c8e0:	eb04 0308 	add.w	r3, r4, r8
 800c8e4:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c8e8:	ed93 ba00 	vldr	s22, [r3]
 800c8ec:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c8f0:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c8f2:	ee17 0a90 	vmov	r0, s15
 800c8f6:	f7f3 fe3f 	bl	8000578 <__aeabi_f2d>
 800c8fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8fe:	f7f3 fcdd 	bl	80002bc <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c902:	19e3      	adds	r3, r4, r7
 800c904:	edd3 aa00 	vldr	s21, [r3]
 800c908:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c90c:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c910:	4e4e      	ldr	r6, [pc, #312]	; (800ca4c <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c912:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c916:	ee17 0a90 	vmov	r0, s15
 800c91a:	f7f3 fe2d 	bl	8000578 <__aeabi_f2d>
 800c91e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c922:	f7f3 fccb 	bl	80002bc <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c926:	4b4e      	ldr	r3, [pc, #312]	; (800ca60 <CRI_func+0x370>)
 800c928:	4423      	add	r3, r4
 800c92a:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c92e:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c930:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c934:	468b      	mov	fp, r1
 800c936:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c93a:	4e45      	ldr	r6, [pc, #276]	; (800ca50 <CRI_func+0x360>)
 800c93c:	ee17 0a90 	vmov	r0, s15
 800c940:	f7f3 fe1a 	bl	8000578 <__aeabi_f2d>
 800c944:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c948:	f7f3 fcb8 	bl	80002bc <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c94c:	ab22      	add	r3, sp, #136	; 0x88
 800c94e:	4423      	add	r3, r4
 800c950:	edd3 7a00 	vldr	s15, [r3]
 800c954:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c958:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c95c:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c960:	4e3c      	ldr	r6, [pc, #240]	; (800ca54 <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c962:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c966:	ee17 0a90 	vmov	r0, s15
 800c96a:	f7f3 fe05 	bl	8000578 <__aeabi_f2d>
 800c96e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c972:	f7f3 fca3 	bl	80002bc <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c976:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c97a:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c97e:	4e36      	ldr	r6, [pc, #216]	; (800ca58 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c980:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c984:	ee17 0a90 	vmov	r0, s15
 800c988:	f7f3 fdf6 	bl	8000578 <__aeabi_f2d>
 800c98c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c990:	f7f3 fc94 	bl	80002bc <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c994:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c998:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c99c:	4e2f      	ldr	r6, [pc, #188]	; (800ca5c <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c99e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c9a2:	ee17 0a90 	vmov	r0, s15
 800c9a6:	f7f3 fde7 	bl	8000578 <__aeabi_f2d>
 800c9aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9ae:	f7f3 fc85 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c9b2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c9b6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c9ba:	e9c6 0100 	strd	r0, r1, [r6]
 800c9be:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c9c2:	f47f af2b 	bne.w	800c81c <CRI_func+0x12c>
		}
		if (i == 0) 
 800c9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f040 8089 	bne.w	800cae0 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c9ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	4923      	ldr	r1, [pc, #140]	; (800ca64 <CRI_func+0x374>)
 800c9d6:	f7f3 ff4d 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c9da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	491f      	ldr	r1, [pc, #124]	; (800ca64 <CRI_func+0x374>)
 800c9e6:	f7f3 ff45 	bl	8000874 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c9ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c9f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c9f6:	f7f3 fe13 	bl	8000620 <__aeabi_dmul>
			y_ref *= k_ref;
 800c9fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c9fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800ca02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca06:	f7f3 fe0b 	bl	8000620 <__aeabi_dmul>
			z_ref *= k_ref;
 800ca0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca0e:	e02d      	b.n	800ca6c <CRI_func+0x37c>
 800ca10:	9999999a 	.word	0x9999999a
 800ca14:	3fb99999 	.word	0x3fb99999
	...
 800ca20:	9999999a 	.word	0x9999999a
 800ca24:	3fa99999 	.word	0x3fa99999
 800ca28:	20090a18 	.word	0x20090a18
 800ca2c:	2008f530 	.word	0x2008f530
 800ca30:	3dcccccd 	.word	0x3dcccccd
 800ca34:	200909c8 	.word	0x200909c8
 800ca38:	20095904 	.word	0x20095904
 800ca3c:	2000466c 	.word	0x2000466c
 800ca40:	20052940 	.word	0x20052940
 800ca44:	20005678 	.word	0x20005678
 800ca48:	0811b040 	.word	0x0811b040
 800ca4c:	20005688 	.word	0x20005688
 800ca50:	20005698 	.word	0x20005698
 800ca54:	20005670 	.word	0x20005670
 800ca58:	20005680 	.word	0x20005680
 800ca5c:	20005690 	.word	0x20005690
 800ca60:	2008d514 	.word	0x2008d514
 800ca64:	40590000 	.word	0x40590000
 800ca68:	2008a514 	.word	0x2008a514
			y_ref *= k_ref;
 800ca6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800ca70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca74:	f7f3 fdd4 	bl	8000620 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800ca78:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800ca7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800ca7e:	4bb7      	ldr	r3, [pc, #732]	; (800cd5c <CRI_func+0x66c>)
 800ca80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca84:	f7f3 fdcc 	bl	8000620 <__aeabi_dmul>
 800ca88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca8c:	f7f3 fc16 	bl	80002bc <__adddf3>
 800ca90:	2200      	movs	r2, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	460d      	mov	r5, r1
 800ca96:	4bb2      	ldr	r3, [pc, #712]	; (800cd60 <CRI_func+0x670>)
 800ca98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca9c:	f7f3 fdc0 	bl	8000620 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4620      	mov	r0, r4
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7f3 fc08 	bl	80002bc <__adddf3>
 800caac:	2200      	movs	r2, #0
 800caae:	4604      	mov	r4, r0
 800cab0:	460d      	mov	r5, r1
 800cab2:	4bac      	ldr	r3, [pc, #688]	; (800cd64 <CRI_func+0x674>)
 800cab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cab8:	f7f3 fdb2 	bl	8000620 <__aeabi_dmul>
 800cabc:	4622      	mov	r2, r4
 800cabe:	462b      	mov	r3, r5
 800cac0:	f7f3 fed8 	bl	8000874 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800cac4:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800cac6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800caca:	4ba7      	ldr	r3, [pc, #668]	; (800cd68 <CRI_func+0x678>)
 800cacc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cad0:	f7f3 fda6 	bl	8000620 <__aeabi_dmul>
 800cad4:	4622      	mov	r2, r4
 800cad6:	462b      	mov	r3, r5
 800cad8:	f7f3 fecc 	bl	8000874 <__aeabi_ddiv>
 800cadc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800cae0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cae8:	f7f3 fd9a 	bl	8000620 <__aeabi_dmul>
 800caec:	4b9f      	ldr	r3, [pc, #636]	; (800cd6c <CRI_func+0x67c>)
 800caee:	4680      	mov	r8, r0
 800caf0:	4689      	mov	r9, r1
 800caf2:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800caf6:	4652      	mov	r2, sl
 800caf8:	465b      	mov	r3, fp
 800cafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cafe:	f7f3 fd8f 	bl	8000620 <__aeabi_dmul>
 800cb02:	4b9b      	ldr	r3, [pc, #620]	; (800cd70 <CRI_func+0x680>)
 800cb04:	4682      	mov	sl, r0
 800cb06:	468b      	mov	fp, r1
 800cb08:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800cb0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb10:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cb14:	f7f3 fd84 	bl	8000620 <__aeabi_dmul>
 800cb18:	4b96      	ldr	r3, [pc, #600]	; (800cd74 <CRI_func+0x684>)
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	460d      	mov	r5, r1
 800cb1e:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800cb22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb26:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cb2a:	f7f3 fd79 	bl	8000620 <__aeabi_dmul>
 800cb2e:	4b92      	ldr	r3, [pc, #584]	; (800cd78 <CRI_func+0x688>)
 800cb30:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800cb34:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800cb38:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800cb3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb40:	f7f3 fd6e 	bl	8000620 <__aeabi_dmul>
 800cb44:	4b8d      	ldr	r3, [pc, #564]	; (800cd7c <CRI_func+0x68c>)
 800cb46:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cb4a:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800cb4e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800cb52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb56:	f7f3 fd63 	bl	8000620 <__aeabi_dmul>
 800cb5a:	4b89      	ldr	r3, [pc, #548]	; (800cd80 <CRI_func+0x690>)
 800cb5c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800cb60:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800cb64:	2200      	movs	r2, #0
 800cb66:	4b7d      	ldr	r3, [pc, #500]	; (800cd5c <CRI_func+0x66c>)
 800cb68:	4650      	mov	r0, sl
 800cb6a:	4659      	mov	r1, fp
 800cb6c:	f7f3 fd58 	bl	8000620 <__aeabi_dmul>
 800cb70:	4642      	mov	r2, r8
 800cb72:	464b      	mov	r3, r9
 800cb74:	f7f3 fba2 	bl	80002bc <__adddf3>
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4606      	mov	r6, r0
 800cb7c:	460f      	mov	r7, r1
 800cb7e:	4b78      	ldr	r3, [pc, #480]	; (800cd60 <CRI_func+0x670>)
 800cb80:	4620      	mov	r0, r4
 800cb82:	4629      	mov	r1, r5
 800cb84:	f7f3 fd4c 	bl	8000620 <__aeabi_dmul>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4639      	mov	r1, r7
 800cb90:	f7f3 fb94 	bl	80002bc <__adddf3>
 800cb94:	2200      	movs	r2, #0
 800cb96:	4604      	mov	r4, r0
 800cb98:	460d      	mov	r5, r1
 800cb9a:	4b72      	ldr	r3, [pc, #456]	; (800cd64 <CRI_func+0x674>)
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	4649      	mov	r1, r9
 800cba0:	f7f3 fd3e 	bl	8000620 <__aeabi_dmul>
 800cba4:	4622      	mov	r2, r4
 800cba6:	462b      	mov	r3, r5
 800cba8:	f7f3 fe64 	bl	8000874 <__aeabi_ddiv>
 800cbac:	4b75      	ldr	r3, [pc, #468]	; (800cd84 <CRI_func+0x694>)
 800cbae:	4680      	mov	r8, r0
 800cbb0:	4689      	mov	r9, r1
 800cbb2:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	4b6b      	ldr	r3, [pc, #428]	; (800cd68 <CRI_func+0x678>)
 800cbba:	4650      	mov	r0, sl
 800cbbc:	4659      	mov	r1, fp
 800cbbe:	f7f3 fd2f 	bl	8000620 <__aeabi_dmul>
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	f7f3 fe55 	bl	8000874 <__aeabi_ddiv>
 800cbca:	4b6f      	ldr	r3, [pc, #444]	; (800cd88 <CRI_func+0x698>)
 800cbcc:	4606      	mov	r6, r0
 800cbce:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cbd0:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800cbd4:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cbd8:	f016 fd9a 	bl	8023710 <cbrt>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	ec51 0b10 	vmov	r0, r1, d0
 800cbe2:	4b6a      	ldr	r3, [pc, #424]	; (800cd8c <CRI_func+0x69c>)
 800cbe4:	f7f3 fd1c 	bl	8000620 <__aeabi_dmul>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	4b69      	ldr	r3, [pc, #420]	; (800cd90 <CRI_func+0x6a0>)
 800cbec:	f7f3 fb64 	bl	80002b8 <__aeabi_dsub>
 800cbf0:	4b68      	ldr	r3, [pc, #416]	; (800cd94 <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800cbf2:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cbf4:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800cbf8:	4b67      	ldr	r3, [pc, #412]	; (800cd98 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cbfa:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800cbfe:	f7f3 fd0f 	bl	8000620 <__aeabi_dmul>
 800cc02:	4604      	mov	r4, r0
 800cc04:	9820      	ldr	r0, [sp, #128]	; 0x80
 800cc06:	460d      	mov	r5, r1
 800cc08:	f7f3 fcb6 	bl	8000578 <__aeabi_f2d>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4640      	mov	r0, r8
 800cc12:	4649      	mov	r1, r9
 800cc14:	f7f3 fb50 	bl	80002b8 <__aeabi_dsub>
 800cc18:	4622      	mov	r2, r4
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	f7f3 fd00 	bl	8000620 <__aeabi_dmul>
 800cc20:	4b5e      	ldr	r3, [pc, #376]	; (800cd9c <CRI_func+0x6ac>)
 800cc22:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800cc26:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800cc2a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800cc2c:	f7f3 fca4 	bl	8000578 <__aeabi_f2d>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4630      	mov	r0, r6
 800cc36:	4639      	mov	r1, r7
 800cc38:	f7f3 fb3e 	bl	80002b8 <__aeabi_dsub>
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	462b      	mov	r3, r5
 800cc40:	f7f3 fcee 	bl	8000620 <__aeabi_dmul>
 800cc44:	4b56      	ldr	r3, [pc, #344]	; (800cda0 <CRI_func+0x6b0>)
 800cc46:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800cc4a:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800cc4e:	2200      	movs	r2, #0
 800cc50:	4b42      	ldr	r3, [pc, #264]	; (800cd5c <CRI_func+0x66c>)
 800cc52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cc56:	f7f3 fce3 	bl	8000620 <__aeabi_dmul>
 800cc5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cc5e:	f7f3 fb2d 	bl	80002bc <__adddf3>
 800cc62:	2200      	movs	r2, #0
 800cc64:	4604      	mov	r4, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	4b3d      	ldr	r3, [pc, #244]	; (800cd60 <CRI_func+0x670>)
 800cc6a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800cc6e:	f7f3 fcd7 	bl	8000620 <__aeabi_dmul>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4620      	mov	r0, r4
 800cc78:	4629      	mov	r1, r5
 800cc7a:	f7f3 fb1f 	bl	80002bc <__adddf3>
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4606      	mov	r6, r0
 800cc82:	460f      	mov	r7, r1
 800cc84:	4b37      	ldr	r3, [pc, #220]	; (800cd64 <CRI_func+0x674>)
 800cc86:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800cc8a:	f7f3 fcc9 	bl	8000620 <__aeabi_dmul>
 800cc8e:	4632      	mov	r2, r6
 800cc90:	463b      	mov	r3, r7
 800cc92:	f7f3 fdef 	bl	8000874 <__aeabi_ddiv>
 800cc96:	4b43      	ldr	r3, [pc, #268]	; (800cda4 <CRI_func+0x6b4>)
 800cc98:	4604      	mov	r4, r0
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800cca0:	2200      	movs	r2, #0
 800cca2:	4b31      	ldr	r3, [pc, #196]	; (800cd68 <CRI_func+0x678>)
 800cca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cca8:	f7f3 fcba 	bl	8000620 <__aeabi_dmul>
 800ccac:	4632      	mov	r2, r6
 800ccae:	463b      	mov	r3, r7
 800ccb0:	f7f3 fde0 	bl	8000874 <__aeabi_ddiv>
 800ccb4:	4b3c      	ldr	r3, [pc, #240]	; (800cda8 <CRI_func+0x6b8>)
 800ccb6:	4682      	mov	sl, r0
 800ccb8:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800ccba:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800ccbe:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800ccc2:	f016 fd25 	bl	8023710 <cbrt>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	ec51 0b10 	vmov	r0, r1, d0
 800cccc:	4b2f      	ldr	r3, [pc, #188]	; (800cd8c <CRI_func+0x69c>)
 800ccce:	f7f3 fca7 	bl	8000620 <__aeabi_dmul>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	4b2e      	ldr	r3, [pc, #184]	; (800cd90 <CRI_func+0x6a0>)
 800ccd6:	f7f3 faef 	bl	80002b8 <__aeabi_dsub>
 800ccda:	4b34      	ldr	r3, [pc, #208]	; (800cdac <CRI_func+0x6bc>)
 800ccdc:	4606      	mov	r6, r0
 800ccde:	460f      	mov	r7, r1
 800cce0:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800cce4:	2200      	movs	r2, #0
 800cce6:	4b2c      	ldr	r3, [pc, #176]	; (800cd98 <CRI_func+0x6a8>)
 800cce8:	f7f3 fc9a 	bl	8000620 <__aeabi_dmul>
 800ccec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	4689      	mov	r9, r1
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	f7f3 fade 	bl	80002b8 <__aeabi_dsub>
 800ccfc:	4642      	mov	r2, r8
 800ccfe:	464b      	mov	r3, r9
 800cd00:	f7f3 fc8e 	bl	8000620 <__aeabi_dmul>
 800cd04:	4b2a      	ldr	r3, [pc, #168]	; (800cdb0 <CRI_func+0x6c0>)
 800cd06:	4604      	mov	r4, r0
 800cd08:	460d      	mov	r5, r1
 800cd0a:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800cd0e:	4650      	mov	r0, sl
 800cd10:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cd14:	4659      	mov	r1, fp
 800cd16:	f7f3 facf 	bl	80002b8 <__aeabi_dsub>
 800cd1a:	4642      	mov	r2, r8
 800cd1c:	464b      	mov	r3, r9
 800cd1e:	f7f3 fc7f 	bl	8000620 <__aeabi_dmul>
 800cd22:	4b24      	ldr	r3, [pc, #144]	; (800cdb4 <CRI_func+0x6c4>)
 800cd24:	4680      	mov	r8, r0
 800cd26:	4689      	mov	r9, r1
 800cd28:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 fac0 	bl	80002b8 <__aeabi_dsub>
 800cd38:	4b1f      	ldr	r3, [pc, #124]	; (800cdb8 <CRI_func+0x6c8>)
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	460f      	mov	r7, r1
 800cd3e:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800cd42:	4620      	mov	r0, r4
 800cd44:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800cd48:	4629      	mov	r1, r5
 800cd4a:	f7f3 fab5 	bl	80002b8 <__aeabi_dsub>
 800cd4e:	4b1b      	ldr	r3, [pc, #108]	; (800cdbc <CRI_func+0x6cc>)
 800cd50:	4604      	mov	r4, r0
 800cd52:	460d      	mov	r5, r1
 800cd54:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800cd58:	4640      	mov	r0, r8
 800cd5a:	e031      	b.n	800cdc0 <CRI_func+0x6d0>
 800cd5c:	402e0000 	.word	0x402e0000
 800cd60:	40080000 	.word	0x40080000
 800cd64:	40100000 	.word	0x40100000
 800cd68:	40180000 	.word	0x40180000
 800cd6c:	20005678 	.word	0x20005678
 800cd70:	20005688 	.word	0x20005688
 800cd74:	20005698 	.word	0x20005698
 800cd78:	20005670 	.word	0x20005670
 800cd7c:	20005680 	.word	0x20005680
 800cd80:	20005690 	.word	0x20005690
 800cd84:	200909e8 	.word	0x200909e8
 800cd88:	20090998 	.word	0x20090998
 800cd8c:	40390000 	.word	0x40390000
 800cd90:	40310000 	.word	0x40310000
 800cd94:	20090a10 	.word	0x20090a10
 800cd98:	402a0000 	.word	0x402a0000
 800cd9c:	200909a0 	.word	0x200909a0
 800cda0:	200909e0 	.word	0x200909e0
 800cda4:	20090a08 	.word	0x20090a08
 800cda8:	200909a8 	.word	0x200909a8
 800cdac:	200909f0 	.word	0x200909f0
 800cdb0:	200909c0 	.word	0x200909c0
 800cdb4:	20090990 	.word	0x20090990
 800cdb8:	200909d8 	.word	0x200909d8
 800cdbc:	200909d0 	.word	0x200909d0
 800cdc0:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fa77 	bl	80002b8 <__aeabi_dsub>
 800cdca:	4bd5      	ldr	r3, [pc, #852]	; (800d120 <CRI_func+0xa30>)
 800cdcc:	4680      	mov	r8, r0
 800cdce:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800cdd0:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800cdd2:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	463b      	mov	r3, r7
 800cdda:	4639      	mov	r1, r7
 800cddc:	f7f3 fc20 	bl	8000620 <__aeabi_dmul>
 800cde0:	4622      	mov	r2, r4
 800cde2:	462b      	mov	r3, r5
 800cde4:	4606      	mov	r6, r0
 800cde6:	460f      	mov	r7, r1
 800cde8:	4620      	mov	r0, r4
 800cdea:	4629      	mov	r1, r5
 800cdec:	f7f3 fc18 	bl	8000620 <__aeabi_dmul>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	4639      	mov	r1, r7
 800cdf8:	f7f3 fa60 	bl	80002bc <__adddf3>
 800cdfc:	4642      	mov	r2, r8
 800cdfe:	4604      	mov	r4, r0
 800ce00:	460d      	mov	r5, r1
 800ce02:	464b      	mov	r3, r9
 800ce04:	4640      	mov	r0, r8
 800ce06:	4649      	mov	r1, r9
 800ce08:	f7f3 fc0a 	bl	8000620 <__aeabi_dmul>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	4620      	mov	r0, r4
 800ce12:	4629      	mov	r1, r5
 800ce14:	f7f3 fa52 	bl	80002bc <__adddf3>
 800ce18:	ec41 0b10 	vmov	d0, r0, r1
 800ce1c:	f017 f82c 	bl	8023e78 <sqrt>
 800ce20:	4bc0      	ldr	r3, [pc, #768]	; (800d124 <CRI_func+0xa34>)
 800ce22:	ec51 0b10 	vmov	r0, r1, d0
 800ce26:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800ce2a:	a39b      	add	r3, pc, #620	; (adr r3, 800d098 <CRI_func+0x9a8>)
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	f7f3 fbf6 	bl	8000620 <__aeabi_dmul>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	2000      	movs	r0, #0
 800ce3a:	49bb      	ldr	r1, [pc, #748]	; (800d128 <CRI_func+0xa38>)
 800ce3c:	f7f3 fa3c 	bl	80002b8 <__aeabi_dsub>
 800ce40:	9a00      	ldr	r2, [sp, #0]
 800ce42:	4bba      	ldr	r3, [pc, #744]	; (800d12c <CRI_func+0xa3c>)
 800ce44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce48:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800ce4c:	f7f3 fe98 	bl	8000b80 <__aeabi_d2iz>
 800ce50:	4bb7      	ldr	r3, [pc, #732]	; (800d130 <CRI_func+0xa40>)
 800ce52:	9a00      	ldr	r2, [sp, #0]
 800ce54:	b240      	sxtb	r0, r0
 800ce56:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800ce58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce5a:	2b07      	cmp	r3, #7
 800ce5c:	f200 8111 	bhi.w	800d082 <CRI_func+0x992>
			Ra_temp += Ri[i];
 800ce60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce62:	4403      	add	r3, r0
 800ce64:	b21b      	sxth	r3, r3
 800ce66:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800ce68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce6a:	2b0e      	cmp	r3, #14
 800ce6c:	f040 810f 	bne.w	800d08e <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800ce70:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800ce74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ce78:	2100      	movs	r1, #0
 800ce7a:	3008      	adds	r0, #8
 800ce7c:	f013 fd41 	bl	8020902 <memset>
 800ce80:	9b00      	ldr	r3, [sp, #0]
 800ce82:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800ce84:	2b0f      	cmp	r3, #15
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	f47f ac92 	bne.w	800c7b0 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800ce8c:	a384      	add	r3, pc, #528	; (adr r3, 800d0a0 <CRI_func+0x9b0>)
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	4ca8      	ldr	r4, [pc, #672]	; (800d134 <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800ce94:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800d138 <CRI_func+0xa48>
 800ce98:	210d      	movs	r1, #13
 800ce9a:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800ce9c:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800cea0:	f006 fcb4 	bl	801380c <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800cea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800cea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800cea8:	200e      	movs	r0, #14
 800ceaa:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800ceae:	4ba3      	ldr	r3, [pc, #652]	; (800d13c <CRI_func+0xa4c>)
 800ceb0:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800ceb2:	2308      	movs	r3, #8
 800ceb4:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800ceb8:	4aa1      	ldr	r2, [pc, #644]	; (800d140 <CRI_func+0xa50>)
 800ceba:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800cebc:	4ba1      	ldr	r3, [pc, #644]	; (800d144 <CRI_func+0xa54>)
 800cebe:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800cec0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cec4:	210d      	movs	r1, #13
 800cec6:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800cec8:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800cecc:	f006 fc9e 	bl	801380c <GUI_Bar_Measure>
 800ced0:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800ced4:	b003      	add	sp, #12
 800ced6:	ecbd 8b08 	vpop	{d8-d11}
 800ceda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cede:	ee68 8a08 	vmul.f32	s17, s16, s16
 800cee2:	ee68 7a28 	vmul.f32	s15, s16, s17
 800cee6:	ee17 0a90 	vmov	r0, s15
 800ceea:	f7f3 fb45 	bl	8000578 <__aeabi_f2d>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	a16d      	add	r1, pc, #436	; (adr r1, 800d0a8 <CRI_func+0x9b8>)
 800cef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef8:	f7f3 fcbc 	bl	8000874 <__aeabi_ddiv>
 800cefc:	4606      	mov	r6, r0
 800cefe:	ee18 0a90 	vmov	r0, s17
 800cf02:	460f      	mov	r7, r1
 800cf04:	f7f3 fb38 	bl	8000578 <__aeabi_f2d>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	a168      	add	r1, pc, #416	; (adr r1, 800d0b0 <CRI_func+0x9c0>)
 800cf0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf12:	f7f3 fcaf 	bl	8000874 <__aeabi_ddiv>
 800cf16:	4602      	mov	r2, r0
 800cf18:	460b      	mov	r3, r1
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	f7f3 f9cd 	bl	80002bc <__adddf3>
 800cf22:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800cf24:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cf28:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800cf2a:	f7f3 fb25 	bl	8000578 <__aeabi_f2d>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	460b      	mov	r3, r1
 800cf32:	a161      	add	r1, pc, #388	; (adr r1, 800d0b8 <CRI_func+0x9c8>)
 800cf34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf38:	f7f3 fc9c 	bl	8000874 <__aeabi_ddiv>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	460b      	mov	r3, r1
 800cf40:	4630      	mov	r0, r6
 800cf42:	4639      	mov	r1, r7
 800cf44:	f7f3 f9ba 	bl	80002bc <__adddf3>
 800cf48:	a35d      	add	r3, pc, #372	; (adr r3, 800d0c0 <CRI_func+0x9d0>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800cf4e:	f7f3 f9b5 	bl	80002bc <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cf52:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800cf56:	e9d4 4500 	ldrd	r4, r5, [r4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	4b7a      	ldr	r3, [pc, #488]	; (800d148 <CRI_func+0xa58>)
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7f3 fb5d 	bl	8000620 <__aeabi_dmul>
 800cf66:	4622      	mov	r2, r4
 800cf68:	462b      	mov	r3, r5
 800cf6a:	f7f3 fb59 	bl	8000620 <__aeabi_dmul>
 800cf6e:	a356      	add	r3, pc, #344	; (adr r3, 800d0c8 <CRI_func+0x9d8>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	4606      	mov	r6, r0
 800cf76:	460f      	mov	r7, r1
 800cf78:	4620      	mov	r0, r4
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	f7f3 fb50 	bl	8000620 <__aeabi_dmul>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	4630      	mov	r0, r6
 800cf86:	4639      	mov	r1, r7
 800cf88:	f7f3 f998 	bl	80002bc <__adddf3>
 800cf8c:	a350      	add	r3, pc, #320	; (adr r3, 800d0d0 <CRI_func+0x9e0>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 f991 	bl	80002b8 <__aeabi_dsub>
 800cf96:	4b6d      	ldr	r3, [pc, #436]	; (800d14c <CRI_func+0xa5c>)
 800cf98:	4606      	mov	r6, r0
 800cf9a:	460f      	mov	r7, r1
 800cf9c:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	a34d      	add	r3, pc, #308	; (adr r3, 800d0d8 <CRI_func+0x9e8>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	f7f3 fb39 	bl	8000620 <__aeabi_dmul>
 800cfae:	a34c      	add	r3, pc, #304	; (adr r3, 800d0e0 <CRI_func+0x9f0>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	f7f3 f982 	bl	80002bc <__adddf3>
 800cfb8:	a34b      	add	r3, pc, #300	; (adr r3, 800d0e8 <CRI_func+0x9f8>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	4680      	mov	r8, r0
 800cfc0:	4689      	mov	r9, r1
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	f7f3 fb2b 	bl	8000620 <__aeabi_dmul>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	460b      	mov	r3, r1
 800cfce:	4640      	mov	r0, r8
 800cfd0:	4649      	mov	r1, r9
 800cfd2:	f7f3 f971 	bl	80002b8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800cfd6:	a346      	add	r3, pc, #280	; (adr r3, 800d0f0 <CRI_func+0xa00>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cfdc:	4680      	mov	r8, r0
 800cfde:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 fb1c 	bl	8000620 <__aeabi_dmul>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	a142      	add	r1, pc, #264	; (adr r1, 800d0f8 <CRI_func+0xa08>)
 800cfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cff2:	f7f3 f961 	bl	80002b8 <__aeabi_dsub>
 800cff6:	a342      	add	r3, pc, #264	; (adr r3, 800d100 <CRI_func+0xa10>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	e9cd 0100 	strd	r0, r1, [sp]
 800d000:	4630      	mov	r0, r6
 800d002:	4639      	mov	r1, r7
 800d004:	f7f3 fb0c 	bl	8000620 <__aeabi_dmul>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d010:	f7f3 f954 	bl	80002bc <__adddf3>
 800d014:	f7f3 fdfc 	bl	8000c10 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800d018:	f7f3 faae 	bl	8000578 <__aeabi_f2d>
 800d01c:	4642      	mov	r2, r8
 800d01e:	464b      	mov	r3, r9
 800d020:	f7f3 fc28 	bl	8000874 <__aeabi_ddiv>
 800d024:	f7f3 fdf4 	bl	8000c10 <__aeabi_d2f>
 800d028:	4b49      	ldr	r3, [pc, #292]	; (800d150 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800d02a:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800d02c:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800d02e:	a336      	add	r3, pc, #216	; (adr r3, 800d108 <CRI_func+0xa18>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	4620      	mov	r0, r4
 800d036:	f7f3 faf3 	bl	8000620 <__aeabi_dmul>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	a134      	add	r1, pc, #208	; (adr r1, 800d110 <CRI_func+0xa20>)
 800d040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d044:	f7f3 f938 	bl	80002b8 <__aeabi_dsub>
 800d048:	a333      	add	r3, pc, #204	; (adr r3, 800d118 <CRI_func+0xa28>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	4604      	mov	r4, r0
 800d050:	460d      	mov	r5, r1
 800d052:	4630      	mov	r0, r6
 800d054:	4639      	mov	r1, r7
 800d056:	f7f3 fae3 	bl	8000620 <__aeabi_dmul>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	4620      	mov	r0, r4
 800d060:	4629      	mov	r1, r5
 800d062:	f7f3 f92b 	bl	80002bc <__adddf3>
 800d066:	f7f3 fdd3 	bl	8000c10 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800d06a:	f7f3 fa85 	bl	8000578 <__aeabi_f2d>
 800d06e:	464b      	mov	r3, r9
 800d070:	4642      	mov	r2, r8
 800d072:	f7f3 fbff 	bl	8000874 <__aeabi_ddiv>
 800d076:	f7f3 fdcb 	bl	8000c10 <__aeabi_d2f>
 800d07a:	4b36      	ldr	r3, [pc, #216]	; (800d154 <CRI_func+0xa64>)
 800d07c:	6018      	str	r0, [r3, #0]
 800d07e:	f7ff bb5c 	b.w	800c73a <CRI_func+0x4a>
		if (i == 8)
 800d082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d084:	2b08      	cmp	r3, #8
 800d086:	f47f aeef 	bne.w	800ce68 <CRI_func+0x778>
			R9 = Ri[i];
 800d08a:	4b33      	ldr	r3, [pc, #204]	; (800d158 <CRI_func+0xa68>)
 800d08c:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800d08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d090:	4418      	add	r0, r3
 800d092:	b203      	sxth	r3, r0
 800d094:	9310      	str	r3, [sp, #64]	; 0x40
 800d096:	e6eb      	b.n	800ce70 <CRI_func+0x780>
 800d098:	66666666 	.word	0x66666666
 800d09c:	40126666 	.word	0x40126666
 800d0a0:	cccccccd 	.word	0xcccccccd
 800d0a4:	3feccccc 	.word	0x3feccccc
 800d0a8:	dc000000 	.word	0xdc000000
 800d0ac:	c1f12993 	.word	0xc1f12993
 800d0b0:	00000000 	.word	0x00000000
 800d0b4:	4146a47c 	.word	0x4146a47c
 800d0b8:	3d70a3d7 	.word	0x3d70a3d7
 800d0bc:	4058c70a 	.word	0x4058c70a
 800d0c0:	d594f26b 	.word	0xd594f26b
 800d0c4:	3fcf3d74 	.word	0x3fcf3d74
 800d0c8:	8f5c28f6 	.word	0x8f5c28f6
 800d0cc:	4006f5c2 	.word	0x4006f5c2
 800d0d0:	9999999a 	.word	0x9999999a
 800d0d4:	3fd19999 	.word	0x3fd19999
 800d0d8:	af4f0d84 	.word	0xaf4f0d84
 800d0dc:	3fd06594 	.word	0x3fd06594
 800d0e0:	9f559b3d 	.word	0x9f559b3d
 800d0e4:	3f98adab 	.word	0x3f98adab
 800d0e8:	487fcb92 	.word	0x487fcb92
 800d0ec:	3fe77dbf 	.word	0x3fe77dbf
 800d0f0:	17c1bda5 	.word	0x17c1bda5
 800d0f4:	3ffc5326 	.word	0x3ffc5326
 800d0f8:	76c8b439 	.word	0x76c8b439
 800d0fc:	bff59fbe 	.word	0xbff59fbe
 800d100:	0aa64c30 	.word	0x0aa64c30
 800d104:	4017a546 	.word	0x4017a546
 800d108:	205bc01a 	.word	0x205bc01a
 800d10c:	403f7141 	.word	0x403f7141
 800d110:	eb851eb8 	.word	0xeb851eb8
 800d114:	3f9eb851 	.word	0x3f9eb851
 800d118:	ee631f8a 	.word	0xee631f8a
 800d11c:	403e125a 	.word	0x403e125a
 800d120:	20090a90 	.word	0x20090a90
 800d124:	20090a00 	.word	0x20090a00
 800d128:	40590000 	.word	0x40590000
 800d12c:	20090a18 	.word	0x20090a18
 800d130:	2000465b 	.word	0x2000465b
 800d134:	200909c8 	.word	0x200909c8
 800d138:	3f666666 	.word	0x3f666666
 800d13c:	2000465a 	.word	0x2000465a
 800d140:	20004659 	.word	0x20004659
 800d144:	3ff00000 	.word	0x3ff00000
 800d148:	c0080000 	.word	0xc0080000
 800d14c:	200909f8 	.word	0x200909f8
 800d150:	20004650 	.word	0x20004650
 800d154:	20004654 	.word	0x20004654
 800d158:	20004658 	.word	0x20004658
		if (CCT_measure < 7000)
 800d15c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d15e:	4c30      	ldr	r4, [pc, #192]	; (800d220 <CRI_func+0xb30>)
 800d160:	f641 3357 	movw	r3, #6999	; 0x1b57
 800d164:	ee07 2a90 	vmov	s15, r2
 800d168:	429a      	cmp	r2, r3
 800d16a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800d16e:	f67f aeb6 	bls.w	800cede <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800d172:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d174:	f7f3 f9de 	bl	8000534 <__aeabi_ui2d>
 800d178:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d1f8 <CRI_func+0xb08>
 800d17c:	ec41 0b10 	vmov	d0, r0, r1
 800d180:	f016 fd02 	bl	8023b88 <pow>
 800d184:	ee68 7a08 	vmul.f32	s15, s16, s16
 800d188:	ed8d 0b00 	vstr	d0, [sp]
 800d18c:	ee17 0a90 	vmov	r0, s15
 800d190:	f7f3 f9f2 	bl	8000578 <__aeabi_f2d>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	a119      	add	r1, pc, #100	; (adr r1, 800d200 <CRI_func+0xb10>)
 800d19a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d19e:	f7f3 fb69 	bl	8000874 <__aeabi_ddiv>
 800d1a2:	ed9d 0b00 	vldr	d0, [sp]
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	ec53 2b10 	vmov	r2, r3, d0
 800d1ac:	460f      	mov	r7, r1
 800d1ae:	a116      	add	r1, pc, #88	; (adr r1, 800d208 <CRI_func+0xb18>)
 800d1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1b4:	f7f3 fb5e 	bl	8000874 <__aeabi_ddiv>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4630      	mov	r0, r6
 800d1be:	4639      	mov	r1, r7
 800d1c0:	f7f3 f87c 	bl	80002bc <__adddf3>
 800d1c4:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800d1c6:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800d1ca:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800d1cc:	f7f3 f9d4 	bl	8000578 <__aeabi_f2d>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	a10e      	add	r1, pc, #56	; (adr r1, 800d210 <CRI_func+0xb20>)
 800d1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1da:	f7f3 fb4b 	bl	8000874 <__aeabi_ddiv>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	f7f3 f869 	bl	80002bc <__adddf3>
 800d1ea:	a30b      	add	r3, pc, #44	; (adr r3, 800d218 <CRI_func+0xb28>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	e6ad      	b.n	800cf4e <CRI_func+0x85e>
 800d1f2:	bf00      	nop
 800d1f4:	f3af 8000 	nop.w
 800d1f8:	00000000 	.word	0x00000000
 800d1fc:	40080000 	.word	0x40080000
 800d200:	00000000 	.word	0x00000000
 800d204:	413d04e8 	.word	0x413d04e8
 800d208:	00000001 	.word	0x00000001
 800d20c:	c1dde5cf 	.word	0xc1dde5cf
 800d210:	28f5c290 	.word	0x28f5c290
 800d214:	406eef5c 	.word	0x406eef5c
 800d218:	a3ec02f3 	.word	0xa3ec02f3
 800d21c:	3fce5753 	.word	0x3fce5753
 800d220:	200909b0 	.word	0x200909b0

0800d224 <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800d224:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800d226:	bbb8      	cbnz	r0, 800d298 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800d228:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d22c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800d230:	2212      	movs	r2, #18
 800d232:	215f      	movs	r1, #95	; 0x5f
 800d234:	2010      	movs	r0, #16
 800d236:	9400      	str	r4, [sp, #0]
 800d238:	f00f fc7d 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800d23c:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800d240:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800d244:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d248:	2010      	movs	r0, #16
 800d24a:	9400      	str	r4, [sp, #0]
 800d24c:	f00f fc73 	bl	801cb36 <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800d250:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800d254:	4619      	mov	r1, r3
 800d256:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d25a:	2010      	movs	r0, #16
 800d25c:	9400      	str	r4, [sp, #0]
 800d25e:	f00f fc0d 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800d262:	f240 1301 	movw	r3, #257	; 0x101
 800d266:	4619      	mov	r1, r3
 800d268:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d26c:	2010      	movs	r0, #16
 800d26e:	9400      	str	r4, [sp, #0]
 800d270:	f00f fc04 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800d274:	23b5      	movs	r3, #181	; 0xb5
 800d276:	4619      	mov	r1, r3
 800d278:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d27c:	2010      	movs	r0, #16
 800d27e:	9400      	str	r4, [sp, #0]
 800d280:	f00f fbfc 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800d284:	2369      	movs	r3, #105	; 0x69
 800d286:	9400      	str	r4, [sp, #0]
 800d288:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d28c:	4619      	mov	r1, r3
 800d28e:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800d290:	f00f fbf4 	bl	801ca7c <TFT_DrawLine>
		
	}
}
 800d294:	b002      	add	sp, #8
 800d296:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800d298:	2801      	cmp	r0, #1
 800d29a:	d131      	bne.n	800d300 <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800d29c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d2a0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d2a4:	22ff      	movs	r2, #255	; 0xff
 800d2a6:	2146      	movs	r1, #70	; 0x46
 800d2a8:	20fd      	movs	r0, #253	; 0xfd
 800d2aa:	9400      	str	r4, [sp, #0]
 800d2ac:	f00f fc43 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800d2b0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d2b4:	22ff      	movs	r2, #255	; 0xff
 800d2b6:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800d2ba:	2028      	movs	r0, #40	; 0x28
 800d2bc:	9400      	str	r4, [sp, #0]
 800d2be:	f00f fc3a 	bl	801cb36 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800d2c2:	22cc      	movs	r2, #204	; 0xcc
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d2ca:	2146      	movs	r1, #70	; 0x46
 800d2cc:	9400      	str	r4, [sp, #0]
 800d2ce:	f00f fbd5 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800d2d2:	2297      	movs	r2, #151	; 0x97
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d2da:	2146      	movs	r1, #70	; 0x46
 800d2dc:	9400      	str	r4, [sp, #0]
 800d2de:	f00f fbcd 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800d2e2:	2262      	movs	r2, #98	; 0x62
 800d2e4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d2e8:	4610      	mov	r0, r2
 800d2ea:	9400      	str	r4, [sp, #0]
 800d2ec:	2146      	movs	r1, #70	; 0x46
 800d2ee:	f00f fbc5 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800d2f2:	9400      	str	r4, [sp, #0]
 800d2f4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d2f8:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800d2fa:	2146      	movs	r1, #70	; 0x46
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	e7c7      	b.n	800d290 <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800d300:	2802      	cmp	r0, #2
 800d302:	d1c7      	bne.n	800d294 <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800d304:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d308:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d30c:	2210      	movs	r2, #16
 800d30e:	214a      	movs	r1, #74	; 0x4a
 800d310:	2012      	movs	r0, #18
 800d312:	9400      	str	r4, [sp, #0]
 800d314:	f00f fc0f 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800d318:	234c      	movs	r3, #76	; 0x4c
 800d31a:	22e8      	movs	r2, #232	; 0xe8
 800d31c:	214a      	movs	r1, #74	; 0x4a
 800d31e:	2011      	movs	r0, #17
 800d320:	9400      	str	r4, [sp, #0]
 800d322:	f00f fc08 	bl	801cb36 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800d326:	2244      	movs	r2, #68	; 0x44
 800d328:	4610      	mov	r0, r2
 800d32a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d32e:	2146      	movs	r1, #70	; 0x46
 800d330:	9400      	str	r4, [sp, #0]
 800d332:	f00f fba3 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800d336:	2279      	movs	r2, #121	; 0x79
 800d338:	4610      	mov	r0, r2
 800d33a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d33e:	2146      	movs	r1, #70	; 0x46
 800d340:	9400      	str	r4, [sp, #0]
 800d342:	f00f fb9b 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800d346:	22ae      	movs	r2, #174	; 0xae
 800d348:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d34c:	4610      	mov	r0, r2
 800d34e:	9400      	str	r4, [sp, #0]
 800d350:	2146      	movs	r1, #70	; 0x46
 800d352:	f00f fb93 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800d356:	9400      	str	r4, [sp, #0]
 800d358:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d35c:	22e3      	movs	r2, #227	; 0xe3
 800d35e:	e7cc      	b.n	800d2fa <CRI_Axes+0xd6>

0800d360 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800d364:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d366:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800d368:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d36a:	4688      	mov	r8, r1
 800d36c:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800d36e:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800d372:	2800      	cmp	r0, #0
 800d374:	d161      	bne.n	800d43a <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800d376:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d37a:	f00f fe0b 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d37e:	2063      	movs	r0, #99	; 0x63
 800d380:	f00f fe0e 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800d384:	4861      	ldr	r0, [pc, #388]	; (800d50c <CRI_Axes_Measure+0x1ac>)
 800d386:	f00f fdff 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800d38a:	2261      	movs	r2, #97	; 0x61
 800d38c:	2146      	movs	r1, #70	; 0x46
 800d38e:	2011      	movs	r0, #17
 800d390:	f00f fec4 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d394:	485e      	ldr	r0, [pc, #376]	; (800d510 <CRI_Axes_Measure+0x1b0>)
 800d396:	f00f fdf7 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800d39a:	2252      	movs	r2, #82	; 0x52
 800d39c:	2144      	movs	r1, #68	; 0x44
 800d39e:	2003      	movs	r0, #3
 800d3a0:	f00f febc 	bl	801d11c <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800d3a4:	4642      	mov	r2, r8
 800d3a6:	495b      	ldr	r1, [pc, #364]	; (800d514 <CRI_Axes_Measure+0x1b4>)
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f013 fab3 	bl	8020914 <sprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	2144      	movs	r1, #68	; 0x44
 800d3b4:	2023      	movs	r0, #35	; 0x23
 800d3b6:	f00f ff09 	bl	801d1cc <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800d3ba:	4854      	ldr	r0, [pc, #336]	; (800d50c <CRI_Axes_Measure+0x1ac>)
 800d3bc:	f00f fde4 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800d3c0:	226c      	movs	r2, #108	; 0x6c
 800d3c2:	2146      	movs	r1, #70	; 0x46
 800d3c4:	2071      	movs	r0, #113	; 0x71
 800d3c6:	f00f fea9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800d3ca:	226c      	movs	r2, #108	; 0x6c
 800d3cc:	2146      	movs	r1, #70	; 0x46
 800d3ce:	207a      	movs	r0, #122	; 0x7a
 800d3d0:	f00f fea4 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800d3d4:	2261      	movs	r2, #97	; 0x61
 800d3d6:	2146      	movs	r1, #70	; 0x46
 800d3d8:	2066      	movs	r0, #102	; 0x66
 800d3da:	f00f fe9f 	bl	801d11c <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800d3de:	484c      	ldr	r0, [pc, #304]	; (800d510 <CRI_Axes_Measure+0x1b0>)
 800d3e0:	f00f fdd2 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800d3e4:	2252      	movs	r2, #82	; 0x52
 800d3e6:	2144      	movs	r1, #68	; 0x44
 800d3e8:	2056      	movs	r0, #86	; 0x56
 800d3ea:	f00f fe97 	bl	801d11c <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800d3ee:	463a      	mov	r2, r7
 800d3f0:	4948      	ldr	r1, [pc, #288]	; (800d514 <CRI_Axes_Measure+0x1b4>)
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f013 fa8e 	bl	8020914 <sprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	2144      	movs	r1, #68	; 0x44
 800d3fe:	208a      	movs	r0, #138	; 0x8a
 800d400:	f00f fee4 	bl	801d1cc <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800d404:	4632      	mov	r2, r6
 800d406:	4943      	ldr	r1, [pc, #268]	; (800d514 <CRI_Axes_Measure+0x1b4>)
 800d408:	4620      	mov	r0, r4
 800d40a:	f013 fa83 	bl	8020914 <sprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d40e:	2e00      	cmp	r6, #0
 800d410:	bfb4      	ite	lt
 800d412:	20d7      	movlt	r0, #215	; 0xd7
 800d414:	20dc      	movge	r0, #220	; 0xdc
 800d416:	2303      	movs	r3, #3
 800d418:	4622      	mov	r2, r4
 800d41a:	2144      	movs	r1, #68	; 0x44
 800d41c:	f00f fed6 	bl	801d1cc <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800d420:	2252      	movs	r2, #82	; 0x52
 800d422:	2144      	movs	r1, #68	; 0x44
 800d424:	20b7      	movs	r0, #183	; 0xb7
 800d426:	f00f fe79 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800d42a:	2239      	movs	r2, #57	; 0x39
 800d42c:	2144      	movs	r1, #68	; 0x44
 800d42e:	20c6      	movs	r0, #198	; 0xc6
 800d430:	f00f fe74 	bl	801d11c <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800d434:	b002      	add	sp, #8
 800d436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d43a:	4d37      	ldr	r5, [pc, #220]	; (800d518 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d43c:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800d43e:	bf14      	ite	ne
 800d440:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d442:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d444:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d448:	bf18      	it	ne
 800d44a:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d44c:	f00f fda2 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d450:	2063      	movs	r0, #99	; 0x63
 800d452:	f00f fda5 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800d456:	482d      	ldr	r0, [pc, #180]	; (800d50c <CRI_Axes_Measure+0x1ac>)
 800d458:	f00f fd96 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800d45c:	2261      	movs	r2, #97	; 0x61
 800d45e:	2110      	movs	r1, #16
 800d460:	2064      	movs	r0, #100	; 0x64
 800d462:	f00f fe5b 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d466:	482a      	ldr	r0, [pc, #168]	; (800d510 <CRI_Axes_Measure+0x1b0>)
 800d468:	f00f fd8e 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800d46c:	2252      	movs	r2, #82	; 0x52
 800d46e:	210e      	movs	r1, #14
 800d470:	2055      	movs	r0, #85	; 0x55
 800d472:	f00f fe53 	bl	801d11c <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800d476:	4642      	mov	r2, r8
 800d478:	4926      	ldr	r1, [pc, #152]	; (800d514 <CRI_Axes_Measure+0x1b4>)
 800d47a:	4620      	mov	r0, r4
 800d47c:	f013 fa4a 	bl	8020914 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d480:	2303      	movs	r3, #3
 800d482:	4622      	mov	r2, r4
 800d484:	210e      	movs	r1, #14
 800d486:	207d      	movs	r0, #125	; 0x7d
 800d488:	f00f fea0 	bl	801d1cc <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800d48c:	481f      	ldr	r0, [pc, #124]	; (800d50c <CRI_Axes_Measure+0x1ac>)
 800d48e:	f00f fd7b 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800d492:	226c      	movs	r2, #108	; 0x6c
 800d494:	2110      	movs	r1, #16
 800d496:	20dd      	movs	r0, #221	; 0xdd
 800d498:	f00f fe40 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800d49c:	226c      	movs	r2, #108	; 0x6c
 800d49e:	2110      	movs	r1, #16
 800d4a0:	20e6      	movs	r0, #230	; 0xe6
 800d4a2:	f00f fe3b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800d4a6:	2261      	movs	r2, #97	; 0x61
 800d4a8:	2110      	movs	r1, #16
 800d4aa:	20d2      	movs	r0, #210	; 0xd2
 800d4ac:	f00f fe36 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d4b0:	4817      	ldr	r0, [pc, #92]	; (800d510 <CRI_Axes_Measure+0x1b0>)
 800d4b2:	f00f fd69 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800d4b6:	2252      	movs	r2, #82	; 0x52
 800d4b8:	210e      	movs	r1, #14
 800d4ba:	20c3      	movs	r0, #195	; 0xc3
 800d4bc:	f00f fe2e 	bl	801d11c <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800d4c0:	463a      	mov	r2, r7
 800d4c2:	4914      	ldr	r1, [pc, #80]	; (800d514 <CRI_Axes_Measure+0x1b4>)
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f013 fa25 	bl	8020914 <sprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	4622      	mov	r2, r4
 800d4ce:	210e      	movs	r1, #14
 800d4d0:	20ff      	movs	r0, #255	; 0xff
 800d4d2:	f00f fe7b 	bl	801d1cc <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800d4d6:	2252      	movs	r2, #82	; 0x52
 800d4d8:	210e      	movs	r1, #14
 800d4da:	f240 1045 	movw	r0, #325	; 0x145
 800d4de:	f00f fe1d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800d4e2:	2239      	movs	r2, #57	; 0x39
 800d4e4:	210e      	movs	r1, #14
 800d4e6:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800d4ea:	f00f fe17 	bl	801d11c <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	4908      	ldr	r1, [pc, #32]	; (800d514 <CRI_Axes_Measure+0x1b4>)
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f013 fa0e 	bl	8020914 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	4622      	mov	r2, r4
 800d4fc:	210e      	movs	r1, #14
 800d4fe:	f240 106d 	movw	r0, #365	; 0x16d
 800d502:	f00f fe63 	bl	801d1cc <TFT_DisplayString>
		TFT_direction = 0x00;
 800d506:	2300      	movs	r3, #0
 800d508:	702b      	strb	r3, [r5, #0]
}
 800d50a:	e793      	b.n	800d434 <CRI_Axes_Measure+0xd4>
 800d50c:	200001c0 	.word	0x200001c0
 800d510:	200001b0 	.word	0x200001b0
 800d514:	08025609 	.word	0x08025609
 800d518:	200056a0 	.word	0x200056a0

0800d51c <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800d51c:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800d51e:	4604      	mov	r4, r0
 800d520:	2800      	cmp	r0, #0
 800d522:	f040 811f 	bne.w	800d764 <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800d526:	488e      	ldr	r0, [pc, #568]	; (800d760 <CRI_Axes_Text+0x244>)
 800d528:	f00f fd2e 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d52c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d530:	f00f fd30 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d534:	2063      	movs	r0, #99	; 0x63
 800d536:	f00f fd33 	bl	801cfa0 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800d53a:	2252      	movs	r2, #82	; 0x52
 800d53c:	f240 119f 	movw	r1, #415	; 0x19f
 800d540:	2018      	movs	r0, #24
 800d542:	f00f fdeb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800d546:	2231      	movs	r2, #49	; 0x31
 800d548:	f240 119f 	movw	r1, #415	; 0x19f
 800d54c:	201e      	movs	r0, #30
 800d54e:	f00f fde5 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800d552:	2252      	movs	r2, #82	; 0x52
 800d554:	f240 119f 	movw	r1, #415	; 0x19f
 800d558:	2028      	movs	r0, #40	; 0x28
 800d55a:	f00f fddf 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800d55e:	2232      	movs	r2, #50	; 0x32
 800d560:	f240 119f 	movw	r1, #415	; 0x19f
 800d564:	202e      	movs	r0, #46	; 0x2e
 800d566:	f00f fdd9 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800d56a:	2252      	movs	r2, #82	; 0x52
 800d56c:	f240 119f 	movw	r1, #415	; 0x19f
 800d570:	2038      	movs	r0, #56	; 0x38
 800d572:	f00f fdd3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800d576:	2233      	movs	r2, #51	; 0x33
 800d578:	f240 119f 	movw	r1, #415	; 0x19f
 800d57c:	203e      	movs	r0, #62	; 0x3e
 800d57e:	f00f fdcd 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800d582:	2252      	movs	r2, #82	; 0x52
 800d584:	f240 119f 	movw	r1, #415	; 0x19f
 800d588:	2048      	movs	r0, #72	; 0x48
 800d58a:	f00f fdc7 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800d58e:	2234      	movs	r2, #52	; 0x34
 800d590:	f240 119f 	movw	r1, #415	; 0x19f
 800d594:	204e      	movs	r0, #78	; 0x4e
 800d596:	f00f fdc1 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800d59a:	2252      	movs	r2, #82	; 0x52
 800d59c:	f240 119f 	movw	r1, #415	; 0x19f
 800d5a0:	2058      	movs	r0, #88	; 0x58
 800d5a2:	f00f fdbb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800d5a6:	2235      	movs	r2, #53	; 0x35
 800d5a8:	f240 119f 	movw	r1, #415	; 0x19f
 800d5ac:	205e      	movs	r0, #94	; 0x5e
 800d5ae:	f00f fdb5 	bl	801d11c <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800d5b2:	2252      	movs	r2, #82	; 0x52
 800d5b4:	f240 119f 	movw	r1, #415	; 0x19f
 800d5b8:	2068      	movs	r0, #104	; 0x68
 800d5ba:	f00f fdaf 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800d5be:	2236      	movs	r2, #54	; 0x36
 800d5c0:	f240 119f 	movw	r1, #415	; 0x19f
 800d5c4:	206e      	movs	r0, #110	; 0x6e
 800d5c6:	f00f fda9 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800d5ca:	2252      	movs	r2, #82	; 0x52
 800d5cc:	f240 119f 	movw	r1, #415	; 0x19f
 800d5d0:	2078      	movs	r0, #120	; 0x78
 800d5d2:	f00f fda3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800d5d6:	2237      	movs	r2, #55	; 0x37
 800d5d8:	f240 119f 	movw	r1, #415	; 0x19f
 800d5dc:	207e      	movs	r0, #126	; 0x7e
 800d5de:	f00f fd9d 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800d5e2:	2252      	movs	r2, #82	; 0x52
 800d5e4:	f240 119f 	movw	r1, #415	; 0x19f
 800d5e8:	2088      	movs	r0, #136	; 0x88
 800d5ea:	f00f fd97 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800d5ee:	2238      	movs	r2, #56	; 0x38
 800d5f0:	f240 119f 	movw	r1, #415	; 0x19f
 800d5f4:	208e      	movs	r0, #142	; 0x8e
 800d5f6:	f00f fd91 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800d5fa:	2252      	movs	r2, #82	; 0x52
 800d5fc:	f240 119f 	movw	r1, #415	; 0x19f
 800d600:	2098      	movs	r0, #152	; 0x98
 800d602:	f00f fd8b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800d606:	2239      	movs	r2, #57	; 0x39
 800d608:	f240 119f 	movw	r1, #415	; 0x19f
 800d60c:	209e      	movs	r0, #158	; 0x9e
 800d60e:	f00f fd85 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800d612:	2231      	movs	r2, #49	; 0x31
 800d614:	f240 119f 	movw	r1, #415	; 0x19f
 800d618:	20ad      	movs	r0, #173	; 0xad
 800d61a:	f00f fd7f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800d61e:	2252      	movs	r2, #82	; 0x52
 800d620:	f240 119f 	movw	r1, #415	; 0x19f
 800d624:	20a8      	movs	r0, #168	; 0xa8
 800d626:	f00f fd79 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800d62a:	2230      	movs	r2, #48	; 0x30
 800d62c:	f240 119f 	movw	r1, #415	; 0x19f
 800d630:	20b1      	movs	r0, #177	; 0xb1
 800d632:	f00f fd73 	bl	801d11c <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800d636:	2231      	movs	r2, #49	; 0x31
 800d638:	f240 119f 	movw	r1, #415	; 0x19f
 800d63c:	20bd      	movs	r0, #189	; 0xbd
 800d63e:	f00f fd6d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800d642:	2252      	movs	r2, #82	; 0x52
 800d644:	f240 119f 	movw	r1, #415	; 0x19f
 800d648:	20b8      	movs	r0, #184	; 0xb8
 800d64a:	f00f fd67 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800d64e:	2231      	movs	r2, #49	; 0x31
 800d650:	f240 119f 	movw	r1, #415	; 0x19f
 800d654:	20c2      	movs	r0, #194	; 0xc2
 800d656:	f00f fd61 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800d65a:	2231      	movs	r2, #49	; 0x31
 800d65c:	f240 119f 	movw	r1, #415	; 0x19f
 800d660:	20cd      	movs	r0, #205	; 0xcd
 800d662:	f00f fd5b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800d666:	2252      	movs	r2, #82	; 0x52
 800d668:	f240 119f 	movw	r1, #415	; 0x19f
 800d66c:	20c8      	movs	r0, #200	; 0xc8
 800d66e:	f00f fd55 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800d672:	2232      	movs	r2, #50	; 0x32
 800d674:	f240 119f 	movw	r1, #415	; 0x19f
 800d678:	20d1      	movs	r0, #209	; 0xd1
 800d67a:	f00f fd4f 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800d67e:	2231      	movs	r2, #49	; 0x31
 800d680:	f240 119f 	movw	r1, #415	; 0x19f
 800d684:	20dd      	movs	r0, #221	; 0xdd
 800d686:	f00f fd49 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800d68a:	2252      	movs	r2, #82	; 0x52
 800d68c:	f240 119f 	movw	r1, #415	; 0x19f
 800d690:	20d8      	movs	r0, #216	; 0xd8
 800d692:	f00f fd43 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800d696:	2233      	movs	r2, #51	; 0x33
 800d698:	f240 119f 	movw	r1, #415	; 0x19f
 800d69c:	20e1      	movs	r0, #225	; 0xe1
 800d69e:	f00f fd3d 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800d6a2:	2231      	movs	r2, #49	; 0x31
 800d6a4:	f240 119f 	movw	r1, #415	; 0x19f
 800d6a8:	20ed      	movs	r0, #237	; 0xed
 800d6aa:	f00f fd37 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800d6ae:	2252      	movs	r2, #82	; 0x52
 800d6b0:	f240 119f 	movw	r1, #415	; 0x19f
 800d6b4:	20e8      	movs	r0, #232	; 0xe8
 800d6b6:	f00f fd31 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800d6ba:	2234      	movs	r2, #52	; 0x34
 800d6bc:	f240 119f 	movw	r1, #415	; 0x19f
 800d6c0:	20f1      	movs	r0, #241	; 0xf1
 800d6c2:	f00f fd2b 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800d6c6:	2231      	movs	r2, #49	; 0x31
 800d6c8:	f240 119f 	movw	r1, #415	; 0x19f
 800d6cc:	20fd      	movs	r0, #253	; 0xfd
 800d6ce:	f00f fd25 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800d6d2:	2252      	movs	r2, #82	; 0x52
 800d6d4:	f240 119f 	movw	r1, #415	; 0x19f
 800d6d8:	20f8      	movs	r0, #248	; 0xf8
 800d6da:	f00f fd1f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800d6de:	2235      	movs	r2, #53	; 0x35
 800d6e0:	f240 119f 	movw	r1, #415	; 0x19f
 800d6e4:	f240 1001 	movw	r0, #257	; 0x101
 800d6e8:	f00f fd18 	bl	801d11c <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800d6ec:	2230      	movs	r2, #48	; 0x30
 800d6ee:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d6f2:	2005      	movs	r0, #5
 800d6f4:	f00f fd12 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800d6f8:	2232      	movs	r2, #50	; 0x32
 800d6fa:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d6fe:	2001      	movs	r0, #1
 800d700:	f00f fd0c 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800d704:	2235      	movs	r2, #53	; 0x35
 800d706:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d70a:	2007      	movs	r0, #7
 800d70c:	f00f fd06 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800d710:	2235      	movs	r2, #53	; 0x35
 800d712:	f240 1101 	movw	r1, #257	; 0x101
 800d716:	2001      	movs	r0, #1
 800d718:	f00f fd00 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800d71c:	2230      	movs	r2, #48	; 0x30
 800d71e:	f240 1101 	movw	r1, #257	; 0x101
 800d722:	2007      	movs	r0, #7
 800d724:	f00f fcfa 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800d728:	2237      	movs	r2, #55	; 0x37
 800d72a:	21b5      	movs	r1, #181	; 0xb5
 800d72c:	2001      	movs	r0, #1
 800d72e:	f00f fcf5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800d732:	2235      	movs	r2, #53	; 0x35
 800d734:	21b5      	movs	r1, #181	; 0xb5
 800d736:	2007      	movs	r0, #7
 800d738:	f00f fcf0 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800d73c:	4620      	mov	r0, r4
 800d73e:	2231      	movs	r2, #49	; 0x31
 800d740:	2169      	movs	r1, #105	; 0x69
 800d742:	f00f fceb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800d746:	2230      	movs	r2, #48	; 0x30
 800d748:	2169      	movs	r1, #105	; 0x69
 800d74a:	2004      	movs	r0, #4
 800d74c:	f00f fce6 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800d750:	2230      	movs	r2, #48	; 0x30
 800d752:	2169      	movs	r1, #105	; 0x69
 800d754:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800d756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800d75a:	f00f bcdf 	b.w	801d11c <TFT_DrawChar>
 800d75e:	bf00      	nop
 800d760:	20000210 	.word	0x20000210
 800d764:	4d98      	ldr	r5, [pc, #608]	; (800d9c8 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d766:	2801      	cmp	r0, #1
 800d768:	bf0c      	ite	eq
 800d76a:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800d76c:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800d76e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d772:	bf18      	it	ne
 800d774:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d776:	f00f fc0d 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d77a:	2063      	movs	r0, #99	; 0x63
 800d77c:	f00f fc10 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800d780:	4892      	ldr	r0, [pc, #584]	; (800d9cc <CRI_Axes_Text+0x4b0>)
 800d782:	f00f fc01 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800d786:	2252      	movs	r2, #82	; 0x52
 800d788:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d78c:	2057      	movs	r0, #87	; 0x57
 800d78e:	f00f fcc5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800d792:	2231      	movs	r2, #49	; 0x31
 800d794:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d798:	205d      	movs	r0, #93	; 0x5d
 800d79a:	f00f fcbf 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800d79e:	2252      	movs	r2, #82	; 0x52
 800d7a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7a4:	206d      	movs	r0, #109	; 0x6d
 800d7a6:	f00f fcb9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800d7aa:	2232      	movs	r2, #50	; 0x32
 800d7ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7b0:	2073      	movs	r0, #115	; 0x73
 800d7b2:	f00f fcb3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800d7b6:	2252      	movs	r2, #82	; 0x52
 800d7b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7bc:	2083      	movs	r0, #131	; 0x83
 800d7be:	f00f fcad 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800d7c2:	2233      	movs	r2, #51	; 0x33
 800d7c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7c8:	2089      	movs	r0, #137	; 0x89
 800d7ca:	f00f fca7 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800d7ce:	2252      	movs	r2, #82	; 0x52
 800d7d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7d4:	2099      	movs	r0, #153	; 0x99
 800d7d6:	f00f fca1 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800d7da:	2234      	movs	r2, #52	; 0x34
 800d7dc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7e0:	209f      	movs	r0, #159	; 0x9f
 800d7e2:	f00f fc9b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800d7e6:	2252      	movs	r2, #82	; 0x52
 800d7e8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7ec:	20af      	movs	r0, #175	; 0xaf
 800d7ee:	f00f fc95 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800d7f2:	2235      	movs	r2, #53	; 0x35
 800d7f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d7f8:	20b5      	movs	r0, #181	; 0xb5
 800d7fa:	f00f fc8f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800d7fe:	2252      	movs	r2, #82	; 0x52
 800d800:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d804:	20c5      	movs	r0, #197	; 0xc5
 800d806:	f00f fc89 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800d80a:	2236      	movs	r2, #54	; 0x36
 800d80c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d810:	20cb      	movs	r0, #203	; 0xcb
 800d812:	f00f fc83 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800d816:	2252      	movs	r2, #82	; 0x52
 800d818:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d81c:	20db      	movs	r0, #219	; 0xdb
 800d81e:	f00f fc7d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800d822:	2237      	movs	r2, #55	; 0x37
 800d824:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d828:	20e1      	movs	r0, #225	; 0xe1
 800d82a:	f00f fc77 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800d82e:	2252      	movs	r2, #82	; 0x52
 800d830:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d834:	20f1      	movs	r0, #241	; 0xf1
 800d836:	f00f fc71 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800d83a:	2238      	movs	r2, #56	; 0x38
 800d83c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d840:	20f7      	movs	r0, #247	; 0xf7
 800d842:	f00f fc6b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800d846:	2252      	movs	r2, #82	; 0x52
 800d848:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d84c:	f240 1007 	movw	r0, #263	; 0x107
 800d850:	f00f fc64 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800d854:	2239      	movs	r2, #57	; 0x39
 800d856:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d85a:	f240 100d 	movw	r0, #269	; 0x10d
 800d85e:	f00f fc5d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800d862:	2231      	movs	r2, #49	; 0x31
 800d864:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d868:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d86c:	f00f fc56 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800d870:	2252      	movs	r2, #82	; 0x52
 800d872:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d876:	f240 101d 	movw	r0, #285	; 0x11d
 800d87a:	f00f fc4f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800d87e:	2230      	movs	r2, #48	; 0x30
 800d880:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d884:	f44f 7093 	mov.w	r0, #294	; 0x126
 800d888:	f00f fc48 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800d88c:	2231      	movs	r2, #49	; 0x31
 800d88e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d892:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d896:	f00f fc41 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800d89a:	2252      	movs	r2, #82	; 0x52
 800d89c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d8a0:	f240 1033 	movw	r0, #307	; 0x133
 800d8a4:	f00f fc3a 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800d8a8:	2231      	movs	r2, #49	; 0x31
 800d8aa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d8ae:	f240 103d 	movw	r0, #317	; 0x13d
 800d8b2:	f00f fc33 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800d8b6:	2231      	movs	r2, #49	; 0x31
 800d8b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d8bc:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800d8c0:	f00f fc2c 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800d8c4:	2252      	movs	r2, #82	; 0x52
 800d8c6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d8ca:	f240 1049 	movw	r0, #329	; 0x149
 800d8ce:	f00f fc25 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d8d2:	2232      	movs	r2, #50	; 0x32
 800d8d4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d8d8:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d8dc:	f00f fc1e 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800d8e0:	2231      	movs	r2, #49	; 0x31
 800d8e2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d8e6:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d8ea:	f00f fc17 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d8ee:	2252      	movs	r2, #82	; 0x52
 800d8f0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d8f4:	f240 105f 	movw	r0, #351	; 0x15f
 800d8f8:	f00f fc10 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d8fc:	2233      	movs	r2, #51	; 0x33
 800d8fe:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d902:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d906:	f00f fc09 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800d90a:	2231      	movs	r2, #49	; 0x31
 800d90c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d910:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d914:	f00f fc02 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d918:	2252      	movs	r2, #82	; 0x52
 800d91a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d91e:	f240 1075 	movw	r0, #373	; 0x175
 800d922:	f00f fbfb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d926:	2234      	movs	r2, #52	; 0x34
 800d928:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d92c:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d930:	f00f fbf4 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800d934:	2231      	movs	r2, #49	; 0x31
 800d936:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d93a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d93e:	f00f fbed 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d942:	2252      	movs	r2, #82	; 0x52
 800d944:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d948:	f240 108b 	movw	r0, #395	; 0x18b
 800d94c:	f00f fbe6 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d950:	2235      	movs	r2, #53	; 0x35
 800d952:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d956:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d95a:	f00f fbdf 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800d95e:	2230      	movs	r2, #48	; 0x30
 800d960:	21fa      	movs	r1, #250	; 0xfa
 800d962:	2041      	movs	r0, #65	; 0x41
 800d964:	f00f fbda 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800d968:	2232      	movs	r2, #50	; 0x32
 800d96a:	21ca      	movs	r1, #202	; 0xca
 800d96c:	203a      	movs	r0, #58	; 0x3a
 800d96e:	f00f fbd5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d972:	2235      	movs	r2, #53	; 0x35
 800d974:	21ca      	movs	r1, #202	; 0xca
 800d976:	2041      	movs	r0, #65	; 0x41
 800d978:	f00f fbd0 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800d97c:	2235      	movs	r2, #53	; 0x35
 800d97e:	2195      	movs	r1, #149	; 0x95
 800d980:	203a      	movs	r0, #58	; 0x3a
 800d982:	f00f fbcb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d986:	2230      	movs	r2, #48	; 0x30
 800d988:	2195      	movs	r1, #149	; 0x95
 800d98a:	2041      	movs	r0, #65	; 0x41
 800d98c:	f00f fbc6 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800d990:	2237      	movs	r2, #55	; 0x37
 800d992:	2160      	movs	r1, #96	; 0x60
 800d994:	203a      	movs	r0, #58	; 0x3a
 800d996:	f00f fbc1 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d99a:	2235      	movs	r2, #53	; 0x35
 800d99c:	2160      	movs	r1, #96	; 0x60
 800d99e:	2041      	movs	r0, #65	; 0x41
 800d9a0:	f00f fbbc 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800d9a4:	2231      	movs	r2, #49	; 0x31
 800d9a6:	212b      	movs	r1, #43	; 0x2b
 800d9a8:	2039      	movs	r0, #57	; 0x39
 800d9aa:	f00f fbb7 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d9ae:	2230      	movs	r2, #48	; 0x30
 800d9b0:	212b      	movs	r1, #43	; 0x2b
 800d9b2:	203e      	movs	r0, #62	; 0x3e
 800d9b4:	f00f fbb2 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d9b8:	2230      	movs	r2, #48	; 0x30
 800d9ba:	212b      	movs	r1, #43	; 0x2b
 800d9bc:	2043      	movs	r0, #67	; 0x43
 800d9be:	f00f fbad 	bl	801d11c <TFT_DrawChar>
		TFT_direction = 0x00;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	702b      	strb	r3, [r5, #0]
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	200056a0 	.word	0x200056a0
 800d9cc:	20000210 	.word	0x20000210

0800d9d0 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d4:	ed2d 8b02 	vpush	{d8}
 800d9d8:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800d9da:	ae06      	add	r6, sp, #24
 800d9dc:	2300      	movs	r3, #0
{
 800d9de:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800d9e0:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800d9e4:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	f040 82de 	bne.w	800dfa8 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d9ec:	f991 3000 	ldrsb.w	r3, [r1]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f2c0 826f 	blt.w	800ded4 <CRI_chart+0x504>
 800d9f6:	2b64      	cmp	r3, #100	; 0x64
 800d9f8:	f300 826f 	bgt.w	800deda <CRI_chart+0x50a>
 800d9fc:	ee07 3a90 	vmov	s15, r3
 800da00:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800dde0 <CRI_chart+0x410>
 800da04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da0c:	eddf 7af5 	vldr	s15, [pc, #980]	; 800dde4 <CRI_chart+0x414>
 800da10:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800dde8 <CRI_chart+0x418>
 800da14:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da1c:	edcd 7a03 	vstr	s15, [sp, #12]
 800da20:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da24:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	2222      	movs	r2, #34	; 0x22
 800da2c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800da30:	2018      	movs	r0, #24
 800da32:	f00f f880 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800da36:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f2c0 8250 	blt.w	800dee0 <CRI_chart+0x510>
 800da40:	2b64      	cmp	r3, #100	; 0x64
 800da42:	f300 8250 	bgt.w	800dee6 <CRI_chart+0x516>
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800dde0 <CRI_chart+0x410>
 800da4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da56:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800dde4 <CRI_chart+0x414>
 800da5a:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800dde8 <CRI_chart+0x418>
 800da5e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da66:	edcd 7a03 	vstr	s15, [sp, #12]
 800da6a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da6e:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	2232      	movs	r2, #50	; 0x32
 800da76:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800da7a:	2028      	movs	r0, #40	; 0x28
 800da7c:	f00f f85b 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800da80:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800da84:	2b00      	cmp	r3, #0
 800da86:	f2c0 8231 	blt.w	800deec <CRI_chart+0x51c>
 800da8a:	2b64      	cmp	r3, #100	; 0x64
 800da8c:	f300 8231 	bgt.w	800def2 <CRI_chart+0x522>
 800da90:	ee07 3a90 	vmov	s15, r3
 800da94:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800dde0 <CRI_chart+0x410>
 800da98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daa0:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800dde4 <CRI_chart+0x414>
 800daa4:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800dde8 <CRI_chart+0x418>
 800daa8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800daac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dab0:	edcd 7a03 	vstr	s15, [sp, #12]
 800dab4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dab8:	f64a 5388 	movw	r3, #44424	; 0xad88
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	2242      	movs	r2, #66	; 0x42
 800dac0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dac4:	2038      	movs	r0, #56	; 0x38
 800dac6:	f00f f836 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800daca:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f2c0 8212 	blt.w	800def8 <CRI_chart+0x528>
 800dad4:	2b64      	cmp	r3, #100	; 0x64
 800dad6:	f300 8212 	bgt.w	800defe <CRI_chart+0x52e>
 800dada:	ee07 3a90 	vmov	s15, r3
 800dade:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800dde0 <CRI_chart+0x410>
 800dae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dae6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daea:	eddf 7abe 	vldr	s15, [pc, #760]	; 800dde4 <CRI_chart+0x414>
 800daee:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800dde8 <CRI_chart+0x418>
 800daf2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800daf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dafa:	edcd 7a03 	vstr	s15, [sp, #12]
 800dafe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db02:	f241 430f 	movw	r3, #5135	; 0x140f
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	2252      	movs	r2, #82	; 0x52
 800db0a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800db0e:	2048      	movs	r0, #72	; 0x48
 800db10:	f00f f811 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800db14:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f2c0 81f3 	blt.w	800df04 <CRI_chart+0x534>
 800db1e:	2b64      	cmp	r3, #100	; 0x64
 800db20:	f300 81f3 	bgt.w	800df0a <CRI_chart+0x53a>
 800db24:	ee07 3a90 	vmov	s15, r3
 800db28:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800dde0 <CRI_chart+0x410>
 800db2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db34:	eddf 7aab 	vldr	s15, [pc, #684]	; 800dde4 <CRI_chart+0x414>
 800db38:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800dde8 <CRI_chart+0x418>
 800db3c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db44:	edcd 7a03 	vstr	s15, [sp, #12]
 800db48:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db4c:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	2262      	movs	r2, #98	; 0x62
 800db54:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800db58:	2058      	movs	r0, #88	; 0x58
 800db5a:	f00e ffec 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800db5e:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800db62:	2b00      	cmp	r3, #0
 800db64:	f2c0 81d4 	blt.w	800df10 <CRI_chart+0x540>
 800db68:	2b64      	cmp	r3, #100	; 0x64
 800db6a:	f300 81d4 	bgt.w	800df16 <CRI_chart+0x546>
 800db6e:	ee07 3a90 	vmov	s15, r3
 800db72:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800dde0 <CRI_chart+0x410>
 800db76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db7e:	eddf 7a99 	vldr	s15, [pc, #612]	; 800dde4 <CRI_chart+0x414>
 800db82:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800dde8 <CRI_chart+0x418>
 800db86:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db8e:	edcd 7a03 	vstr	s15, [sp, #12]
 800db92:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db96:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	2272      	movs	r2, #114	; 0x72
 800db9e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dba2:	2068      	movs	r0, #104	; 0x68
 800dba4:	f00e ffc7 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800dba8:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f2c0 81b5 	blt.w	800df1c <CRI_chart+0x54c>
 800dbb2:	2b64      	cmp	r3, #100	; 0x64
 800dbb4:	f300 81b5 	bgt.w	800df22 <CRI_chart+0x552>
 800dbb8:	ee07 3a90 	vmov	s15, r3
 800dbbc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800dde0 <CRI_chart+0x410>
 800dbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbc8:	eddf 7a86 	vldr	s15, [pc, #536]	; 800dde4 <CRI_chart+0x414>
 800dbcc:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800dde8 <CRI_chart+0x418>
 800dbd0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dbd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbd8:	edcd 7a03 	vstr	s15, [sp, #12]
 800dbdc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dbe0:	f248 4357 	movw	r3, #33879	; 0x8457
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	2282      	movs	r2, #130	; 0x82
 800dbe8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dbec:	2078      	movs	r0, #120	; 0x78
 800dbee:	f00e ffa2 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800dbf2:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f2c0 8196 	blt.w	800df28 <CRI_chart+0x558>
 800dbfc:	2b64      	cmp	r3, #100	; 0x64
 800dbfe:	f300 8196 	bgt.w	800df2e <CRI_chart+0x55e>
 800dc02:	ee07 3a90 	vmov	s15, r3
 800dc06:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800dde0 <CRI_chart+0x410>
 800dc0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc12:	eddf 7a74 	vldr	s15, [pc, #464]	; 800dde4 <CRI_chart+0x414>
 800dc16:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800dde8 <CRI_chart+0x418>
 800dc1a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc22:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc2a:	f24a 4377 	movw	r3, #42103	; 0xa477
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	2292      	movs	r2, #146	; 0x92
 800dc32:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dc36:	2088      	movs	r0, #136	; 0x88
 800dc38:	f00e ff7d 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800dc3c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f2c0 8177 	blt.w	800df34 <CRI_chart+0x564>
 800dc46:	2b64      	cmp	r3, #100	; 0x64
 800dc48:	f300 8177 	bgt.w	800df3a <CRI_chart+0x56a>
 800dc4c:	ee07 3a90 	vmov	s15, r3
 800dc50:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800dde0 <CRI_chart+0x410>
 800dc54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc5c:	eddf 7a61 	vldr	s15, [pc, #388]	; 800dde4 <CRI_chart+0x414>
 800dc60:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800dde8 <CRI_chart+0x418>
 800dc64:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc74:	f24e 1365 	movw	r3, #57701	; 0xe165
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	22a2      	movs	r2, #162	; 0xa2
 800dc7c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dc80:	2098      	movs	r0, #152	; 0x98
 800dc82:	f00e ff58 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800dc86:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f2c0 8158 	blt.w	800df40 <CRI_chart+0x570>
 800dc90:	2b64      	cmp	r3, #100	; 0x64
 800dc92:	f300 8158 	bgt.w	800df46 <CRI_chart+0x576>
 800dc96:	ee07 3a90 	vmov	s15, r3
 800dc9a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800dde0 <CRI_chart+0x410>
 800dc9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dca2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dca6:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800dde4 <CRI_chart+0x414>
 800dcaa:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800dde8 <CRI_chart+0x418>
 800dcae:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dcb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcb6:	edcd 7a03 	vstr	s15, [sp, #12]
 800dcba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dcbe:	f24e 7323 	movw	r3, #59171	; 0xe723
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	22b2      	movs	r2, #178	; 0xb2
 800dcc6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dcca:	20a8      	movs	r0, #168	; 0xa8
 800dccc:	f00e ff33 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800dcd0:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f2c0 8139 	blt.w	800df4c <CRI_chart+0x57c>
 800dcda:	2b64      	cmp	r3, #100	; 0x64
 800dcdc:	f300 8139 	bgt.w	800df52 <CRI_chart+0x582>
 800dce0:	ee07 3a90 	vmov	s15, r3
 800dce4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800dde0 <CRI_chart+0x410>
 800dce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dcf0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800dde4 <CRI_chart+0x414>
 800dcf4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800dde8 <CRI_chart+0x418>
 800dcf8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dcfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd00:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd08:	f241 4327 	movw	r3, #5159	; 0x1427
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	22c2      	movs	r2, #194	; 0xc2
 800dd10:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dd14:	20b8      	movs	r0, #184	; 0xb8
 800dd16:	f00e ff0e 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800dd1a:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f2c0 811a 	blt.w	800df58 <CRI_chart+0x588>
 800dd24:	2b64      	cmp	r3, #100	; 0x64
 800dd26:	f300 811a 	bgt.w	800df5e <CRI_chart+0x58e>
 800dd2a:	ee07 3a90 	vmov	s15, r3
 800dd2e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800dde0 <CRI_chart+0x410>
 800dd32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd36:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd3a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800dde4 <CRI_chart+0x414>
 800dd3e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800dde8 <CRI_chart+0x418>
 800dd42:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dd46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd4a:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd52:	f242 138d 	movw	r3, #8589	; 0x218d
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	22d2      	movs	r2, #210	; 0xd2
 800dd5a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dd5e:	20c8      	movs	r0, #200	; 0xc8
 800dd60:	f00e fee9 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800dd64:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f2c0 80fb 	blt.w	800df64 <CRI_chart+0x594>
 800dd6e:	2b64      	cmp	r3, #100	; 0x64
 800dd70:	f300 80fb 	bgt.w	800df6a <CRI_chart+0x59a>
 800dd74:	ee07 3a90 	vmov	s15, r3
 800dd78:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800dde0 <CRI_chart+0x410>
 800dd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd84:	eddf 7a17 	vldr	s15, [pc, #92]	; 800dde4 <CRI_chart+0x414>
 800dd88:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800dde8 <CRI_chart+0x418>
 800dd8c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dd90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd94:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd98:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd9c:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	22e2      	movs	r2, #226	; 0xe2
 800dda4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dda8:	20d8      	movs	r0, #216	; 0xd8
 800ddaa:	f00e fec4 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800ddae:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f2c0 80dc 	blt.w	800df70 <CRI_chart+0x5a0>
 800ddb8:	2b64      	cmp	r3, #100	; 0x64
 800ddba:	f300 80dc 	bgt.w	800df76 <CRI_chart+0x5a6>
 800ddbe:	ee07 3a90 	vmov	s15, r3
 800ddc2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800dde0 <CRI_chart+0x410>
 800ddc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ddce:	eddf 7a05 	vldr	s15, [pc, #20]	; 800dde4 <CRI_chart+0x414>
 800ddd2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800dde8 <CRI_chart+0x418>
 800ddd6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ddda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddde:	e00b      	b.n	800ddf8 <CRI_chart+0x428>
 800dde0:	42c80000 	.word	0x42c80000
 800dde4:	43cd0000 	.word	0x43cd0000
 800dde8:	43988000 	.word	0x43988000
 800ddec:	42c80000 	.word	0x42c80000
 800ddf0:	43cd0000 	.word	0x43cd0000
 800ddf4:	43988000 	.word	0x43988000
 800ddf8:	edcd 7a03 	vstr	s15, [sp, #12]
 800ddfc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800de00:	f641 3346 	movw	r3, #6982	; 0x1b46
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	22f2      	movs	r2, #242	; 0xf2
 800de08:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800de0c:	20e8      	movs	r0, #232	; 0xe8
 800de0e:	f00e fe92 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800de12:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800de16:	2b00      	cmp	r3, #0
 800de18:	f2c0 80b0 	blt.w	800df7c <CRI_chart+0x5ac>
 800de1c:	2b64      	cmp	r3, #100	; 0x64
 800de1e:	f300 80b0 	bgt.w	800df82 <CRI_chart+0x5b2>
 800de22:	ee07 3a90 	vmov	s15, r3
 800de26:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800ddec <CRI_chart+0x41c>
 800de2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800de32:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800ddf0 <CRI_chart+0x420>
 800de36:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800ddf4 <CRI_chart+0x424>
 800de3a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800de3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de42:	edcd 7a03 	vstr	s15, [sp, #12]
 800de46:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800de4a:	4f52      	ldr	r7, [pc, #328]	; (800df94 <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800de4c:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800df98 <CRI_chart+0x5c8>
 800de50:	eddf 8a52 	vldr	s17, [pc, #328]	; 800df9c <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800de54:	f24f 6311 	movw	r3, #62993	; 0xf611
 800de58:	f44f 7281 	mov.w	r2, #258	; 0x102
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	20f8      	movs	r0, #248	; 0xf8
 800de60:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800de64:	f00e fe67 	bl	801cb36 <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800de68:	484d      	ldr	r0, [pc, #308]	; (800dfa0 <CRI_chart+0x5d0>)
 800de6a:	f00f f88d 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800de6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800de72:	f00f f88f 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800de76:	2063      	movs	r0, #99	; 0x63
 800de78:	f00f f892 	bl	801cfa0 <TFT_SetBackColor>
 800de7c:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800de7e:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800de82:	4639      	mov	r1, r7
 800de84:	4630      	mov	r0, r6
 800de86:	f012 fd45 	bl	8020914 <sprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800de8a:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800de8e:	2b00      	cmp	r3, #0
 800de90:	db7a      	blt.n	800df88 <CRI_chart+0x5b8>
 800de92:	2b64      	cmp	r3, #100	; 0x64
 800de94:	dc7b      	bgt.n	800df8e <CRI_chart+0x5be>
 800de96:	ee07 3a90 	vmov	s15, r3
 800de9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de9e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800dea2:	eddf 7a40 	vldr	s15, [pc, #256]	; 800dfa4 <CRI_chart+0x5d4>
 800dea6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800deaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800deae:	edcd 7a03 	vstr	s15, [sp, #12]
 800deb2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800deb6:	4620      	mov	r0, r4
 800deb8:	3410      	adds	r4, #16
 800deba:	2303      	movs	r3, #3
 800debc:	4632      	mov	r2, r6
 800debe:	b2a4      	uxth	r4, r4
 800dec0:	f00f f984 	bl	801d1cc <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800dec4:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800dec8:	d1d9      	bne.n	800de7e <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800deca:	b006      	add	sp, #24
 800decc:	ecbd 8b02 	vpop	{d8}
 800ded0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800ded4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800ded8:	e5a4      	b.n	800da24 <CRI_chart+0x54>
 800deda:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dede:	e5a1      	b.n	800da24 <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800dee0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dee4:	e5c3      	b.n	800da6e <CRI_chart+0x9e>
 800dee6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800deea:	e5c0      	b.n	800da6e <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800deec:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800def0:	e5e2      	b.n	800dab8 <CRI_chart+0xe8>
 800def2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800def6:	e5df      	b.n	800dab8 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800def8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800defc:	e601      	b.n	800db02 <CRI_chart+0x132>
 800defe:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df02:	e5fe      	b.n	800db02 <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800df04:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df08:	e620      	b.n	800db4c <CRI_chart+0x17c>
 800df0a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df0e:	e61d      	b.n	800db4c <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800df10:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df14:	e63f      	b.n	800db96 <CRI_chart+0x1c6>
 800df16:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df1a:	e63c      	b.n	800db96 <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800df1c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df20:	e65e      	b.n	800dbe0 <CRI_chart+0x210>
 800df22:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df26:	e65b      	b.n	800dbe0 <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800df28:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df2c:	e67d      	b.n	800dc2a <CRI_chart+0x25a>
 800df2e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df32:	e67a      	b.n	800dc2a <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800df34:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df38:	e69c      	b.n	800dc74 <CRI_chart+0x2a4>
 800df3a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df3e:	e699      	b.n	800dc74 <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800df40:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df44:	e6bb      	b.n	800dcbe <CRI_chart+0x2ee>
 800df46:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df4a:	e6b8      	b.n	800dcbe <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800df4c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df50:	e6da      	b.n	800dd08 <CRI_chart+0x338>
 800df52:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df56:	e6d7      	b.n	800dd08 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800df58:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df5c:	e6f9      	b.n	800dd52 <CRI_chart+0x382>
 800df5e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df62:	e6f6      	b.n	800dd52 <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800df64:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df68:	e718      	b.n	800dd9c <CRI_chart+0x3cc>
 800df6a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df6e:	e715      	b.n	800dd9c <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800df70:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df74:	e744      	b.n	800de00 <CRI_chart+0x430>
 800df76:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df7a:	e741      	b.n	800de00 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800df7c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800df80:	e763      	b.n	800de4a <CRI_chart+0x47a>
 800df82:	f44f 719b 	mov.w	r1, #310	; 0x136
 800df86:	e760      	b.n	800de4a <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800df88:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800df8c:	e793      	b.n	800deb6 <CRI_chart+0x4e6>
 800df8e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800df92:	e790      	b.n	800deb6 <CRI_chart+0x4e6>
 800df94:	08025609 	.word	0x08025609
 800df98:	42c80000 	.word	0x42c80000
 800df9c:	43988000 	.word	0x43988000
 800dfa0:	20000210 	.word	0x20000210
 800dfa4:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800dfa8:	2801      	cmp	r0, #1
 800dfaa:	4fed      	ldr	r7, [pc, #948]	; (800e360 <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800dfac:	bf16      	itet	ne
 800dfae:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800dfb0:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800dfb2:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800dfb4:	f991 3000 	ldrsb.w	r3, [r1]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f2c0 8260 	blt.w	800e47e <CRI_chart+0xaae>
 800dfbe:	2b64      	cmp	r3, #100	; 0x64
 800dfc0:	f300 825f 	bgt.w	800e482 <CRI_chart+0xab2>
 800dfc4:	ee07 3a90 	vmov	s15, r3
 800dfc8:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800e364 <CRI_chart+0x994>
 800dfcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dfd4:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800e368 <CRI_chart+0x998>
 800dfd8:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800e36c <CRI_chart+0x99c>
 800dfdc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dfe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfe4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dfe8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dfec:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	2262      	movs	r2, #98	; 0x62
 800dff4:	23fc      	movs	r3, #252	; 0xfc
 800dff6:	2057      	movs	r0, #87	; 0x57
 800dff8:	f00e fd9d 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800dffc:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e000:	2b00      	cmp	r3, #0
 800e002:	f2c0 8240 	blt.w	800e486 <CRI_chart+0xab6>
 800e006:	2b64      	cmp	r3, #100	; 0x64
 800e008:	f300 823f 	bgt.w	800e48a <CRI_chart+0xaba>
 800e00c:	ee07 3a90 	vmov	s15, r3
 800e010:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800e364 <CRI_chart+0x994>
 800e014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e018:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e01c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800e368 <CRI_chart+0x998>
 800e020:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800e36c <CRI_chart+0x99c>
 800e024:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e02c:	edcd 7a03 	vstr	s15, [sp, #12]
 800e030:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e034:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	2278      	movs	r2, #120	; 0x78
 800e03c:	23fc      	movs	r3, #252	; 0xfc
 800e03e:	206d      	movs	r0, #109	; 0x6d
 800e040:	f00e fd79 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800e044:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f2c0 8220 	blt.w	800e48e <CRI_chart+0xabe>
 800e04e:	2b64      	cmp	r3, #100	; 0x64
 800e050:	f300 821f 	bgt.w	800e492 <CRI_chart+0xac2>
 800e054:	ee07 3a90 	vmov	s15, r3
 800e058:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800e364 <CRI_chart+0x994>
 800e05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e060:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e064:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800e368 <CRI_chart+0x998>
 800e068:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800e36c <CRI_chart+0x99c>
 800e06c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e074:	edcd 7a03 	vstr	s15, [sp, #12]
 800e078:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e07c:	f64a 5388 	movw	r3, #44424	; 0xad88
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	228e      	movs	r2, #142	; 0x8e
 800e084:	23fc      	movs	r3, #252	; 0xfc
 800e086:	2083      	movs	r0, #131	; 0x83
 800e088:	f00e fd55 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800e08c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800e090:	2b00      	cmp	r3, #0
 800e092:	f2c0 8200 	blt.w	800e496 <CRI_chart+0xac6>
 800e096:	2b64      	cmp	r3, #100	; 0x64
 800e098:	f300 81ff 	bgt.w	800e49a <CRI_chart+0xaca>
 800e09c:	ee07 3a90 	vmov	s15, r3
 800e0a0:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800e364 <CRI_chart+0x994>
 800e0a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e0ac:	eddf 7aae 	vldr	s15, [pc, #696]	; 800e368 <CRI_chart+0x998>
 800e0b0:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800e36c <CRI_chart+0x99c>
 800e0b4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0bc:	edcd 7a03 	vstr	s15, [sp, #12]
 800e0c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e0c4:	f241 430f 	movw	r3, #5135	; 0x140f
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	22a4      	movs	r2, #164	; 0xa4
 800e0cc:	23fc      	movs	r3, #252	; 0xfc
 800e0ce:	2099      	movs	r0, #153	; 0x99
 800e0d0:	f00e fd31 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800e0d4:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f2c0 81e0 	blt.w	800e49e <CRI_chart+0xace>
 800e0de:	2b64      	cmp	r3, #100	; 0x64
 800e0e0:	f300 81df 	bgt.w	800e4a2 <CRI_chart+0xad2>
 800e0e4:	ee07 3a90 	vmov	s15, r3
 800e0e8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800e364 <CRI_chart+0x994>
 800e0ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e0f4:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800e368 <CRI_chart+0x998>
 800e0f8:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800e36c <CRI_chart+0x99c>
 800e0fc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e104:	edcd 7a03 	vstr	s15, [sp, #12]
 800e108:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e10c:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	22ba      	movs	r2, #186	; 0xba
 800e114:	23fc      	movs	r3, #252	; 0xfc
 800e116:	20af      	movs	r0, #175	; 0xaf
 800e118:	f00e fd0d 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800e11c:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800e120:	2b00      	cmp	r3, #0
 800e122:	f2c0 81c0 	blt.w	800e4a6 <CRI_chart+0xad6>
 800e126:	2b64      	cmp	r3, #100	; 0x64
 800e128:	f300 81bf 	bgt.w	800e4aa <CRI_chart+0xada>
 800e12c:	ee07 3a90 	vmov	s15, r3
 800e130:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800e364 <CRI_chart+0x994>
 800e134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e138:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e13c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800e368 <CRI_chart+0x998>
 800e140:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e36c <CRI_chart+0x99c>
 800e144:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e14c:	edcd 7a03 	vstr	s15, [sp, #12]
 800e150:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e154:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	22d0      	movs	r2, #208	; 0xd0
 800e15c:	23fc      	movs	r3, #252	; 0xfc
 800e15e:	20c5      	movs	r0, #197	; 0xc5
 800e160:	f00e fce9 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800e164:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f2c0 81a0 	blt.w	800e4ae <CRI_chart+0xade>
 800e16e:	2b64      	cmp	r3, #100	; 0x64
 800e170:	f300 819f 	bgt.w	800e4b2 <CRI_chart+0xae2>
 800e174:	ee07 3a90 	vmov	s15, r3
 800e178:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800e364 <CRI_chart+0x994>
 800e17c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e180:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e184:	eddf 7a78 	vldr	s15, [pc, #480]	; 800e368 <CRI_chart+0x998>
 800e188:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800e36c <CRI_chart+0x99c>
 800e18c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e194:	edcd 7a03 	vstr	s15, [sp, #12]
 800e198:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e19c:	f248 4357 	movw	r3, #33879	; 0x8457
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	22e6      	movs	r2, #230	; 0xe6
 800e1a4:	23fc      	movs	r3, #252	; 0xfc
 800e1a6:	20db      	movs	r0, #219	; 0xdb
 800e1a8:	f00e fcc5 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800e1ac:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f2c0 8180 	blt.w	800e4b6 <CRI_chart+0xae6>
 800e1b6:	2b64      	cmp	r3, #100	; 0x64
 800e1b8:	f300 817f 	bgt.w	800e4ba <CRI_chart+0xaea>
 800e1bc:	ee07 3a90 	vmov	s15, r3
 800e1c0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800e364 <CRI_chart+0x994>
 800e1c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e1cc:	eddf 7a66 	vldr	s15, [pc, #408]	; 800e368 <CRI_chart+0x998>
 800e1d0:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800e36c <CRI_chart+0x99c>
 800e1d4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e1d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1dc:	edcd 7a03 	vstr	s15, [sp, #12]
 800e1e0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e1e4:	f24a 4377 	movw	r3, #42103	; 0xa477
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	23fc      	movs	r3, #252	; 0xfc
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	20f1      	movs	r0, #241	; 0xf1
 800e1f0:	f00e fca1 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800e1f4:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f2c0 8160 	blt.w	800e4be <CRI_chart+0xaee>
 800e1fe:	2b64      	cmp	r3, #100	; 0x64
 800e200:	f300 815f 	bgt.w	800e4c2 <CRI_chart+0xaf2>
 800e204:	ee07 3a90 	vmov	s15, r3
 800e208:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800e364 <CRI_chart+0x994>
 800e20c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e210:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e214:	eddf 7a54 	vldr	s15, [pc, #336]	; 800e368 <CRI_chart+0x998>
 800e218:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800e36c <CRI_chart+0x99c>
 800e21c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e224:	edcd 7a03 	vstr	s15, [sp, #12]
 800e228:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e22c:	f24e 1365 	movw	r3, #57701	; 0xe165
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e236:	23fc      	movs	r3, #252	; 0xfc
 800e238:	f240 1007 	movw	r0, #263	; 0x107
 800e23c:	f00e fc7b 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800e240:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f2c0 813e 	blt.w	800e4c6 <CRI_chart+0xaf6>
 800e24a:	2b64      	cmp	r3, #100	; 0x64
 800e24c:	f300 813d 	bgt.w	800e4ca <CRI_chart+0xafa>
 800e250:	ee07 3a90 	vmov	s15, r3
 800e254:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800e364 <CRI_chart+0x994>
 800e258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e25c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e260:	eddf 7a41 	vldr	s15, [pc, #260]	; 800e368 <CRI_chart+0x998>
 800e264:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e36c <CRI_chart+0x99c>
 800e268:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e26c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e270:	edcd 7a03 	vstr	s15, [sp, #12]
 800e274:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e278:	f24e 7323 	movw	r3, #59171	; 0xe723
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e282:	23fc      	movs	r3, #252	; 0xfc
 800e284:	f240 101d 	movw	r0, #285	; 0x11d
 800e288:	f00e fc55 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800e28c:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800e290:	2b00      	cmp	r3, #0
 800e292:	f2c0 811c 	blt.w	800e4ce <CRI_chart+0xafe>
 800e296:	2b64      	cmp	r3, #100	; 0x64
 800e298:	f300 811b 	bgt.w	800e4d2 <CRI_chart+0xb02>
 800e29c:	ee07 3a90 	vmov	s15, r3
 800e2a0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e364 <CRI_chart+0x994>
 800e2a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e2ac:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e368 <CRI_chart+0x998>
 800e2b0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800e36c <CRI_chart+0x99c>
 800e2b4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2bc:	edcd 7a03 	vstr	s15, [sp, #12]
 800e2c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e2c4:	f241 4327 	movw	r3, #5159	; 0x1427
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800e2ce:	23fc      	movs	r3, #252	; 0xfc
 800e2d0:	f240 1033 	movw	r0, #307	; 0x133
 800e2d4:	f00e fc2f 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800e2d8:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f2c0 80fa 	blt.w	800e4d6 <CRI_chart+0xb06>
 800e2e2:	2b64      	cmp	r3, #100	; 0x64
 800e2e4:	f300 80f9 	bgt.w	800e4da <CRI_chart+0xb0a>
 800e2e8:	ee07 3a90 	vmov	s15, r3
 800e2ec:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e364 <CRI_chart+0x994>
 800e2f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e2f8:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800e368 <CRI_chart+0x998>
 800e2fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800e36c <CRI_chart+0x99c>
 800e300:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e308:	edcd 7a03 	vstr	s15, [sp, #12]
 800e30c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e310:	f242 138d 	movw	r3, #8589	; 0x218d
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800e31a:	23fc      	movs	r3, #252	; 0xfc
 800e31c:	f240 1049 	movw	r0, #329	; 0x149
 800e320:	f00e fc09 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800e324:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f2c0 80d8 	blt.w	800e4de <CRI_chart+0xb0e>
 800e32e:	2b64      	cmp	r3, #100	; 0x64
 800e330:	f300 80d7 	bgt.w	800e4e2 <CRI_chart+0xb12>
 800e334:	ee07 3a90 	vmov	s15, r3
 800e338:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800e364 <CRI_chart+0x994>
 800e33c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e340:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e344:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e368 <CRI_chart+0x998>
 800e348:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e36c <CRI_chart+0x99c>
 800e34c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e354:	edcd 7a03 	vstr	s15, [sp, #12]
 800e358:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e35c:	e008      	b.n	800e370 <CRI_chart+0x9a0>
 800e35e:	bf00      	nop
 800e360:	200056a0 	.word	0x200056a0
 800e364:	42c80000 	.word	0x42c80000
 800e368:	437e0000 	.word	0x437e0000
 800e36c:	43520000 	.word	0x43520000
 800e370:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e37a:	23fc      	movs	r3, #252	; 0xfc
 800e37c:	f240 105f 	movw	r0, #351	; 0x15f
 800e380:	f00e fbd9 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800e384:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f2c0 80ac 	blt.w	800e4e6 <CRI_chart+0xb16>
 800e38e:	2b64      	cmp	r3, #100	; 0x64
 800e390:	f300 80ab 	bgt.w	800e4ea <CRI_chart+0xb1a>
 800e394:	ee07 3a90 	vmov	s15, r3
 800e398:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800e364 <CRI_chart+0x994>
 800e39c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e3a4:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800e368 <CRI_chart+0x998>
 800e3a8:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800e36c <CRI_chart+0x99c>
 800e3ac:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e3b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3b4:	edcd 7a03 	vstr	s15, [sp, #12]
 800e3b8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e3bc:	f641 3346 	movw	r3, #6982	; 0x1b46
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e3c6:	23fc      	movs	r3, #252	; 0xfc
 800e3c8:	f240 1075 	movw	r0, #373	; 0x175
 800e3cc:	f00e fbb3 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e3d0:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f2c0 808a 	blt.w	800e4ee <CRI_chart+0xb1e>
 800e3da:	2b64      	cmp	r3, #100	; 0x64
 800e3dc:	f300 8089 	bgt.w	800e4f2 <CRI_chart+0xb22>
 800e3e0:	ee07 3a90 	vmov	s15, r3
 800e3e4:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800e364 <CRI_chart+0x994>
 800e3e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e3f0:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800e368 <CRI_chart+0x998>
 800e3f4:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800e36c <CRI_chart+0x99c>
 800e3f8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e3fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e400:	edcd 7a03 	vstr	s15, [sp, #12]
 800e404:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800e408:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800e50c <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e40c:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800e500 <CRI_chart+0xb30>
 800e410:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800e504 <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e414:	f24f 6311 	movw	r3, #62993	; 0xf611
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800e41e:	23fc      	movs	r3, #252	; 0xfc
 800e420:	f240 108b 	movw	r0, #395	; 0x18b
 800e424:	f00e fb87 	bl	801cb36 <TFT_FillRectangle>
 800e428:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800e42a:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800e42e:	4641      	mov	r1, r8
 800e430:	4630      	mov	r0, r6
 800e432:	f012 fa6f 	bl	8020914 <sprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e436:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	db5b      	blt.n	800e4f6 <CRI_chart+0xb26>
 800e43e:	2b64      	cmp	r3, #100	; 0x64
 800e440:	dc5b      	bgt.n	800e4fa <CRI_chart+0xb2a>
 800e442:	ee07 3a90 	vmov	s15, r3
 800e446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e44a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800e44e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e508 <CRI_chart+0xb38>
 800e452:	eee7 7a68 	vfms.f32	s15, s14, s17
 800e456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e45a:	edcd 7a03 	vstr	s15, [sp, #12]
 800e45e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e462:	2303      	movs	r3, #3
 800e464:	4620      	mov	r0, r4
 800e466:	4632      	mov	r2, r6
 800e468:	3416      	adds	r4, #22
 800e46a:	f00e feaf 	bl	801d1cc <TFT_DisplayString>
 800e46e:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800e470:	f240 13a1 	movw	r3, #417	; 0x1a1
 800e474:	429c      	cmp	r4, r3
 800e476:	d1d8      	bne.n	800e42a <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800e478:	2300      	movs	r3, #0
 800e47a:	703b      	strb	r3, [r7, #0]
}
 800e47c:	e525      	b.n	800deca <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800e47e:	21fe      	movs	r1, #254	; 0xfe
 800e480:	e5b4      	b.n	800dfec <CRI_chart+0x61c>
 800e482:	219a      	movs	r1, #154	; 0x9a
 800e484:	e5b2      	b.n	800dfec <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800e486:	21fe      	movs	r1, #254	; 0xfe
 800e488:	e5d4      	b.n	800e034 <CRI_chart+0x664>
 800e48a:	219a      	movs	r1, #154	; 0x9a
 800e48c:	e5d2      	b.n	800e034 <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800e48e:	21fe      	movs	r1, #254	; 0xfe
 800e490:	e5f4      	b.n	800e07c <CRI_chart+0x6ac>
 800e492:	219a      	movs	r1, #154	; 0x9a
 800e494:	e5f2      	b.n	800e07c <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800e496:	21fe      	movs	r1, #254	; 0xfe
 800e498:	e614      	b.n	800e0c4 <CRI_chart+0x6f4>
 800e49a:	219a      	movs	r1, #154	; 0x9a
 800e49c:	e612      	b.n	800e0c4 <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800e49e:	21fe      	movs	r1, #254	; 0xfe
 800e4a0:	e634      	b.n	800e10c <CRI_chart+0x73c>
 800e4a2:	219a      	movs	r1, #154	; 0x9a
 800e4a4:	e632      	b.n	800e10c <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800e4a6:	21fe      	movs	r1, #254	; 0xfe
 800e4a8:	e654      	b.n	800e154 <CRI_chart+0x784>
 800e4aa:	219a      	movs	r1, #154	; 0x9a
 800e4ac:	e652      	b.n	800e154 <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800e4ae:	21fe      	movs	r1, #254	; 0xfe
 800e4b0:	e674      	b.n	800e19c <CRI_chart+0x7cc>
 800e4b2:	219a      	movs	r1, #154	; 0x9a
 800e4b4:	e672      	b.n	800e19c <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800e4b6:	21fe      	movs	r1, #254	; 0xfe
 800e4b8:	e694      	b.n	800e1e4 <CRI_chart+0x814>
 800e4ba:	219a      	movs	r1, #154	; 0x9a
 800e4bc:	e692      	b.n	800e1e4 <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800e4be:	21fe      	movs	r1, #254	; 0xfe
 800e4c0:	e6b4      	b.n	800e22c <CRI_chart+0x85c>
 800e4c2:	219a      	movs	r1, #154	; 0x9a
 800e4c4:	e6b2      	b.n	800e22c <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800e4c6:	21fe      	movs	r1, #254	; 0xfe
 800e4c8:	e6d6      	b.n	800e278 <CRI_chart+0x8a8>
 800e4ca:	219a      	movs	r1, #154	; 0x9a
 800e4cc:	e6d4      	b.n	800e278 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800e4ce:	21fe      	movs	r1, #254	; 0xfe
 800e4d0:	e6f8      	b.n	800e2c4 <CRI_chart+0x8f4>
 800e4d2:	219a      	movs	r1, #154	; 0x9a
 800e4d4:	e6f6      	b.n	800e2c4 <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800e4d6:	21fe      	movs	r1, #254	; 0xfe
 800e4d8:	e71a      	b.n	800e310 <CRI_chart+0x940>
 800e4da:	219a      	movs	r1, #154	; 0x9a
 800e4dc:	e718      	b.n	800e310 <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800e4de:	21fe      	movs	r1, #254	; 0xfe
 800e4e0:	e746      	b.n	800e370 <CRI_chart+0x9a0>
 800e4e2:	219a      	movs	r1, #154	; 0x9a
 800e4e4:	e744      	b.n	800e370 <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800e4e6:	21fe      	movs	r1, #254	; 0xfe
 800e4e8:	e768      	b.n	800e3bc <CRI_chart+0x9ec>
 800e4ea:	219a      	movs	r1, #154	; 0x9a
 800e4ec:	e766      	b.n	800e3bc <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e4ee:	21fe      	movs	r1, #254	; 0xfe
 800e4f0:	e78a      	b.n	800e408 <CRI_chart+0xa38>
 800e4f2:	219a      	movs	r1, #154	; 0x9a
 800e4f4:	e788      	b.n	800e408 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e4f6:	21f4      	movs	r1, #244	; 0xf4
 800e4f8:	e7b3      	b.n	800e462 <CRI_chart+0xa92>
 800e4fa:	2190      	movs	r1, #144	; 0x90
 800e4fc:	e7b1      	b.n	800e462 <CRI_chart+0xa92>
 800e4fe:	bf00      	nop
 800e500:	42c80000 	.word	0x42c80000
 800e504:	43570000 	.word	0x43570000
 800e508:	43740000 	.word	0x43740000
 800e50c:	08025609 	.word	0x08025609

0800e510 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e514:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e516:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e518:	4604      	mov	r4, r0
 800e51a:	4688      	mov	r8, r1
 800e51c:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e51e:	213a      	movs	r1, #58	; 0x3a
 800e520:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	2005      	movs	r0, #5
 800e528:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e52c:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e530:	f00e fb01 	bl	801cb36 <TFT_FillRectangle>
	CRI_Axes(direction);
 800e534:	4620      	mov	r0, r4
 800e536:	f7fe fe75 	bl	800d224 <CRI_Axes>
	CRI_Axes_Text(direction);
 800e53a:	4620      	mov	r0, r4
 800e53c:	f7fe ffee 	bl	800d51c <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800e540:	4641      	mov	r1, r8
 800e542:	4620      	mov	r0, r4
 800e544:	f7ff fa44 	bl	800d9d0 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800e548:	463b      	mov	r3, r7
 800e54a:	4632      	mov	r2, r6
 800e54c:	4629      	mov	r1, r5
 800e54e:	4620      	mov	r0, r4
 800e550:	b002      	add	sp, #8
 800e552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800e556:	f7fe bf03 	b.w	800d360 <CRI_Axes_Measure>
	...

0800e55c <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800e55c:	4a0c      	ldr	r2, [pc, #48]	; (800e590 <Calculate_EL_Day+0x34>)
 800e55e:	2300      	movs	r3, #0
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800e564:	ecb0 7a01 	vldmia	r0!, {s14}
 800e568:	ecf1 7a01 	vldmia	r1!, {s15}
 800e56c:	ed92 0a00 	vldr	s0, [r2]
 800e570:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800e574:	3301      	adds	r3, #1
 800e576:	b29b      	uxth	r3, r3
 800e578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800e57c:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e580:	d1f0      	bne.n	800e564 <Calculate_EL_Day+0x8>
 800e582:	4a04      	ldr	r2, [pc, #16]	; (800e594 <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800e584:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e598 <Calculate_EL_Day+0x3c>
 800e588:	8013      	strh	r3, [r2, #0]
 800e58a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e58e:	4770      	bx	lr
 800e590:	20090aa4 	.word	0x20090aa4
 800e594:	20090a9c 	.word	0x20090a9c
 800e598:	442ac000 	.word	0x442ac000

0800e59c <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800e59c:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <Calculate_EL_Day_Wt+0x28>)
 800e59e:	2300      	movs	r3, #0
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800e5a4:	ecf0 7a01 	vldmia	r0!, {s15}
 800e5a8:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e5ac:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800e5ae:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800e5b8:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e5bc:	d1f2      	bne.n	800e5a4 <Calculate_EL_Day_Wt+0x8>
 800e5be:	4a02      	ldr	r2, [pc, #8]	; (800e5c8 <Calculate_EL_Day_Wt+0x2c>)
 800e5c0:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e5c2:	4770      	bx	lr
 800e5c4:	20090aa4 	.word	0x20090aa4
 800e5c8:	20090a9c 	.word	0x20090a9c

0800e5cc <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800e5cc:	4a0c      	ldr	r2, [pc, #48]	; (800e600 <Calculate_EL_Night+0x34>)
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	6013      	str	r3, [r2, #0]
 800e5d2:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e5d4:	ecb0 7a01 	vldmia	r0!, {s14}
 800e5d8:	ecf1 7a01 	vldmia	r1!, {s15}
 800e5dc:	ed92 0a00 	vldr	s0, [r2]
 800e5e0:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e5ec:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e5f0:	d1f0      	bne.n	800e5d4 <Calculate_EL_Night+0x8>
 800e5f2:	4a04      	ldr	r2, [pc, #16]	; (800e604 <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800e5f4:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e608 <Calculate_EL_Night+0x3c>
 800e5f8:	8013      	strh	r3, [r2, #0]
 800e5fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e5fe:	4770      	bx	lr
 800e600:	20090aa4 	.word	0x20090aa4
 800e604:	20090a9c 	.word	0x20090a9c
 800e608:	44d48000 	.word	0x44d48000

0800e60c <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800e60c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e614:	bf14      	ite	ne
 800e616:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800e61a:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800e624 <Calculate_SP+0x18>
}
 800e61e:	eeb0 0a67 	vmov.f32	s0, s15
 800e622:	4770      	bx	lr
 800e624:	00000000 	.word	0x00000000

0800e628 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800e628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t it = 0, beg = 0, end = 1024;

	while(Wavelenght[it]<400)
 800e62c:	eddf 7a30 	vldr	s15, [pc, #192]	; 800e6f0 <Calculate_PPFD_PPL+0xc8>
 800e630:	2300      	movs	r3, #0
 800e632:	b29c      	uxth	r4, r3
 800e634:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 800e638:	ed92 7a00 	vldr	s14, [r2]
 800e63c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e644:	f103 0301 	add.w	r3, r3, #1
 800e648:	d4f3      	bmi.n	800e632 <Calculate_PPFD_PPL+0xa>
	{
		it++;
	}
	beg = it+1;
 800e64a:	3401      	adds	r4, #1

	it = 1024;
	while(Wavelenght[it]>700)
 800e64c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e6f4 <Calculate_PPFD_PPL+0xcc>
	beg = it+1;
 800e650:	b2a4      	uxth	r4, r4
	it = 1024;
 800e652:	f44f 6380 	mov.w	r3, #1024	; 0x400
	while(Wavelenght[it]>700)
 800e656:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800e65a:	ed92 7a00 	vldr	s14, [r2]
 800e65e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e662:	3b01      	subs	r3, #1
 800e664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		it--;
 800e668:	b29b      	uxth	r3, r3
	while(Wavelenght[it]>700)
 800e66a:	dcf4      	bgt.n	800e656 <Calculate_PPFD_PPL+0x2e>
	}
	end = it-1;


	sum = 0;
	for (iq = beg; iq < end; iq++)
 800e66c:	4a22      	ldr	r2, [pc, #136]	; (800e6f8 <Calculate_PPFD_PPL+0xd0>)
	sum = 0;
 800e66e:	4d23      	ldr	r5, [pc, #140]	; (800e6fc <Calculate_PPFD_PPL+0xd4>)
	end = it-1;
 800e670:	9300      	str	r3, [sp, #0]
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e672:	a71d      	add	r7, pc, #116	; (adr r7, 800e6e8 <Calculate_PPFD_PPL+0xc0>)
 800e674:	e9d7 6700 	ldrd	r6, r7, [r7]
	sum = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800e67e:	602b      	str	r3, [r5, #0]
 800e680:	eb00 0b0a 	add.w	fp, r0, sl
	for (iq = beg; iq < end; iq++)
 800e684:	8014      	strh	r4, [r2, #0]
 800e686:	448a      	add	sl, r1
 800e688:	2300      	movs	r3, #0
 800e68a:	9201      	str	r2, [sp, #4]
 800e68c:	9a00      	ldr	r2, [sp, #0]
 800e68e:	42a2      	cmp	r2, r4
 800e690:	d807      	bhi.n	800e6a2 <Calculate_PPFD_PPL+0x7a>
 800e692:	b10b      	cbz	r3, 800e698 <Calculate_PPFD_PPL+0x70>
 800e694:	9b01      	ldr	r3, [sp, #4]
 800e696:	801c      	strh	r4, [r3, #0]
	}
	return sum;
}
 800e698:	ed95 0a00 	vldr	s0, [r5]
 800e69c:	b003      	add	sp, #12
 800e69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e6a2:	ecbb 7a01 	vldmia	fp!, {s14}
 800e6a6:	ecfa 7a01 	vldmia	sl!, {s15}
 800e6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = beg; iq < end; iq++)
 800e6ae:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e6b0:	ee17 0a90 	vmov	r0, s15
 800e6b4:	f7f1 ff60 	bl	8000578 <__aeabi_f2d>
 800e6b8:	4632      	mov	r2, r6
 800e6ba:	463b      	mov	r3, r7
 800e6bc:	f7f1 ffb0 	bl	8000620 <__aeabi_dmul>
 800e6c0:	4680      	mov	r8, r0
 800e6c2:	6828      	ldr	r0, [r5, #0]
 800e6c4:	4689      	mov	r9, r1
 800e6c6:	f7f1 ff57 	bl	8000578 <__aeabi_f2d>
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	4649      	mov	r1, r9
 800e6d0:	4640      	mov	r0, r8
 800e6d2:	f7f1 fdf3 	bl	80002bc <__adddf3>
 800e6d6:	f7f2 fa9b 	bl	8000c10 <__aeabi_d2f>
	for (iq = beg; iq < end; iq++)
 800e6da:	b2a4      	uxth	r4, r4
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e6dc:	6028      	str	r0, [r5, #0]
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e7d4      	b.n	800e68c <Calculate_PPFD_PPL+0x64>
 800e6e2:	bf00      	nop
 800e6e4:	f3af 8000 	nop.w
 800e6e8:	73f2981b 	.word	0x73f2981b
 800e6ec:	3f811eb6 	.word	0x3f811eb6
 800e6f0:	43c80000 	.word	0x43c80000
 800e6f4:	442f0000 	.word	0x442f0000
 800e6f8:	20090a9c 	.word	0x20090a9c
 800e6fc:	20090aa4 	.word	0x20090aa4

0800e700 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800e700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800e704:	4d34      	ldr	r5, [pc, #208]	; (800e7d8 <Calculate_PPFD_PPL_Range+0xd8>)
 800e706:	2300      	movs	r3, #0
 800e708:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800e70a:	b1f2      	cbz	r2, 800e74a <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800e70c:	2a01      	cmp	r2, #1
 800e70e:	d021      	beq.n	800e754 <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800e710:	2a02      	cmp	r2, #2
 800e712:	d024      	beq.n	800e75e <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800e714:	2a03      	cmp	r2, #3
 800e716:	bf0b      	itete	eq
 800e718:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800e71c:	f04f 0a00 	movne.w	sl, #0
 800e720:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800e724:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800e726:	4a2d      	ldr	r2, [pc, #180]	; (800e7dc <Calculate_PPFD_PPL_Range+0xdc>)
 800e728:	9201      	str	r2, [sp, #4]
 800e72a:	2400      	movs	r4, #0
 800e72c:	8014      	strh	r4, [r2, #0]
 800e72e:	4606      	mov	r6, r0
 800e730:	468b      	mov	fp, r1
 800e732:	4623      	mov	r3, r4
 800e734:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e738:	d116      	bne.n	800e768 <Calculate_PPFD_PPL_Range+0x68>
 800e73a:	b10b      	cbz	r3, 800e740 <Calculate_PPFD_PPL_Range+0x40>
 800e73c:	9b01      	ldr	r3, [sp, #4]
 800e73e:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800e740:	ed95 0a00 	vldr	s0, [r5]
 800e744:	b003      	add	sp, #12
 800e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800e74a:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800e74e:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800e752:	e7e8      	b.n	800e726 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800e754:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800e758:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800e75c:	e7e3      	b.n	800e726 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800e75e:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800e762:	f44f 7716 	mov.w	r7, #600	; 0x258
 800e766:	e7de      	b.n	800e726 <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800e768:	ee07 7a10 	vmov	s14, r7
 800e76c:	ecfb 7a01 	vldmia	fp!, {s15}
 800e770:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e774:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77c:	dd23      	ble.n	800e7c6 <Calculate_PPFD_PPL_Range+0xc6>
 800e77e:	ee07 aa10 	vmov	s14, sl
 800e782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78e:	d51a      	bpl.n	800e7c6 <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e790:	ed96 7a00 	vldr	s14, [r6]
 800e794:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e798:	ee17 0a90 	vmov	r0, s15
 800e79c:	f7f1 feec 	bl	8000578 <__aeabi_f2d>
 800e7a0:	a30b      	add	r3, pc, #44	; (adr r3, 800e7d0 <Calculate_PPFD_PPL_Range+0xd0>)
 800e7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a6:	f7f1 ff3b 	bl	8000620 <__aeabi_dmul>
 800e7aa:	4680      	mov	r8, r0
 800e7ac:	6828      	ldr	r0, [r5, #0]
 800e7ae:	4689      	mov	r9, r1
 800e7b0:	f7f1 fee2 	bl	8000578 <__aeabi_f2d>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4640      	mov	r0, r8
 800e7ba:	4649      	mov	r1, r9
 800e7bc:	f7f1 fd7e 	bl	80002bc <__adddf3>
 800e7c0:	f7f2 fa26 	bl	8000c10 <__aeabi_d2f>
 800e7c4:	6028      	str	r0, [r5, #0]
 800e7c6:	3401      	adds	r4, #1
 800e7c8:	b2a4      	uxth	r4, r4
 800e7ca:	3604      	adds	r6, #4
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e7b1      	b.n	800e734 <Calculate_PPFD_PPL_Range+0x34>
 800e7d0:	73f2981b 	.word	0x73f2981b
 800e7d4:	3f811eb6 	.word	0x3f811eb6
 800e7d8:	20090aa4 	.word	0x20090aa4
 800e7dc:	20090a9c 	.word	0x20090a9c

0800e7e0 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800e7e0:	4a0a      	ldr	r2, [pc, #40]	; (800e80c <Calculate_ELb+0x2c>)
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	6013      	str	r3, [r2, #0]
 800e7e6:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e7e8:	ecb0 7a01 	vldmia	r0!, {s14}
 800e7ec:	ecf1 7a01 	vldmia	r1!, {s15}
 800e7f0:	ed92 0a00 	vldr	s0, [r2]
 800e7f4:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e800:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e804:	d1f0      	bne.n	800e7e8 <Calculate_ELb+0x8>
 800e806:	4a02      	ldr	r2, [pc, #8]	; (800e810 <Calculate_ELb+0x30>)
 800e808:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e80a:	4770      	bx	lr
 800e80c:	20090aa4 	.word	0x20090aa4
 800e810:	20090a9c 	.word	0x20090a9c

0800e814 <Calculate_ELr>:
 800e814:	f7ff bfe4 	b.w	800e7e0 <Calculate_ELb>

0800e818 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e818:	b5d0      	push	{r4, r6, r7, lr}
 800e81a:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e81e:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e8a4 <Calculate_XYZ1964+0x8c>
{
 800e822:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e824:	eef0 7a48 	vmov.f32	s15, s16
 800e828:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e82c:	ecb0 7a01 	vldmia	r0!, {s14}
 800e830:	ecf1 6a01 	vldmia	r1!, {s13}
 800e834:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e838:	3401      	adds	r4, #1
 800e83a:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e83c:	ecf2 6a01 	vldmia	r2!, {s13}
 800e840:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e844:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e848:	ecf3 6a01 	vldmia	r3!, {s13}
 800e84c:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e850:	d1ec      	bne.n	800e82c <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800e852:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e8a8 <Calculate_XYZ1964+0x90>
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <Calculate_XYZ1964+0x94>)
 800e858:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e85c:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800e85e:	4c14      	ldr	r4, [pc, #80]	; (800e8b0 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800e860:	ee16 0a90 	vmov	r0, s13
 800e864:	f7f1 fe88 	bl	8000578 <__aeabi_f2d>
 800e868:	4606      	mov	r6, r0
 800e86a:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800e86c:	ee18 0a90 	vmov	r0, s17
 800e870:	f7f1 fe82 	bl	8000578 <__aeabi_f2d>
 800e874:	4632      	mov	r2, r6
 800e876:	463b      	mov	r3, r7
 800e878:	f7f1 fed2 	bl	8000620 <__aeabi_dmul>
 800e87c:	f7f2 f9a8 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800e880:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800e882:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800e884:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e886:	ee18 0a10 	vmov	r0, s16
 800e88a:	f7f1 fe75 	bl	8000578 <__aeabi_f2d>
 800e88e:	4632      	mov	r2, r6
 800e890:	463b      	mov	r3, r7
 800e892:	f7f1 fec5 	bl	8000620 <__aeabi_dmul>
 800e896:	f7f2 f99b 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e89a:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e89e:	80a0      	strh	r0, [r4, #4]
}
 800e8a0:	bdd0      	pop	{r4, r6, r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	00000000 	.word	0x00000000
 800e8a8:	42c80000 	.word	0x42c80000
 800e8ac:	20090a9c 	.word	0x20090a9c
 800e8b0:	2008f528 	.word	0x2008f528

0800e8b4 <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e8b4:	b5d0      	push	{r4, r6, r7, lr}
 800e8b6:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e8ba:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e940 <Calculate_XYZ1931+0x8c>
{
 800e8be:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e8c0:	eef0 7a48 	vmov.f32	s15, s16
 800e8c4:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e8c8:	ecb0 7a01 	vldmia	r0!, {s14}
 800e8cc:	ecf1 6a01 	vldmia	r1!, {s13}
 800e8d0:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e8d4:	3401      	adds	r4, #1
 800e8d6:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e8d8:	ecf2 6a01 	vldmia	r2!, {s13}
 800e8dc:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e8e0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e8e4:	ecf3 6a01 	vldmia	r3!, {s13}
 800e8e8:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e8ec:	d1ec      	bne.n	800e8c8 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e8ee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e944 <Calculate_XYZ1931+0x90>
 800e8f2:	4b15      	ldr	r3, [pc, #84]	; (800e948 <Calculate_XYZ1931+0x94>)
 800e8f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e8f8:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e8fa:	4c14      	ldr	r4, [pc, #80]	; (800e94c <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e8fc:	ee16 0a90 	vmov	r0, s13
 800e900:	f7f1 fe3a 	bl	8000578 <__aeabi_f2d>
 800e904:	4606      	mov	r6, r0
 800e906:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e908:	ee18 0a90 	vmov	r0, s17
 800e90c:	f7f1 fe34 	bl	8000578 <__aeabi_f2d>
 800e910:	4632      	mov	r2, r6
 800e912:	463b      	mov	r3, r7
 800e914:	f7f1 fe84 	bl	8000620 <__aeabi_dmul>
 800e918:	f7f2 f95a 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e91c:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e91e:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e920:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e922:	ee18 0a10 	vmov	r0, s16
 800e926:	f7f1 fe27 	bl	8000578 <__aeabi_f2d>
 800e92a:	4632      	mov	r2, r6
 800e92c:	463b      	mov	r3, r7
 800e92e:	f7f1 fe77 	bl	8000620 <__aeabi_dmul>
 800e932:	f7f2 f94d 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e936:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e93a:	80a0      	strh	r0, [r4, #4]
}
 800e93c:	bdd0      	pop	{r4, r6, r7, pc}
 800e93e:	bf00      	nop
 800e940:	00000000 	.word	0x00000000
 800e944:	42c80000 	.word	0x42c80000
 800e948:	20090a9c 	.word	0x20090a9c
 800e94c:	2008f522 	.word	0x2008f522

0800e950 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e950:	8801      	ldrh	r1, [r0, #0]
 800e952:	8842      	ldrh	r2, [r0, #2]
 800e954:	8880      	ldrh	r0, [r0, #4]
 800e956:	188b      	adds	r3, r1, r2
 800e958:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	ee07 3a90 	vmov	s15, r3
 800e960:	ee07 1a10 	vmov	s14, r1
 800e964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e968:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e96c:	4b06      	ldr	r3, [pc, #24]	; (800e988 <Calculate_xy1964+0x38>)
 800e96e:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e972:	ee07 2a10 	vmov	s14, r2
 800e976:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e97a:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e97e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e982:	edc3 6a01 	vstr	s13, [r3, #4]
 800e986:	4770      	bx	lr
 800e988:	2008f548 	.word	0x2008f548

0800e98c <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e98c:	8801      	ldrh	r1, [r0, #0]
 800e98e:	8842      	ldrh	r2, [r0, #2]
 800e990:	8880      	ldrh	r0, [r0, #4]
 800e992:	188b      	adds	r3, r1, r2
 800e994:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e996:	b29b      	uxth	r3, r3
 800e998:	ee07 3a90 	vmov	s15, r3
 800e99c:	ee07 1a10 	vmov	s14, r1
 800e9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e9a8:	4b06      	ldr	r3, [pc, #24]	; (800e9c4 <Calculate_xy1931+0x38>)
 800e9aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e9ae:	ee07 2a10 	vmov	s14, r2
 800e9b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e9b6:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e9ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e9be:	edc3 6a01 	vstr	s13, [r3, #4]
 800e9c2:	4770      	bx	lr
 800e9c4:	2008f540 	.word	0x2008f540

0800e9c8 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e9c8:	ed90 7a01 	vldr	s14, [r0, #4]
 800e9cc:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e9d0:	4b0e      	ldr	r3, [pc, #56]	; (800ea0c <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e9d2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9da:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e9de:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e9e2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e9e6:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e9ea:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e9ee:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e9f2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e9f6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e9fa:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e9fe:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800ea02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ea06:	edc3 6a01 	vstr	s13, [r3, #4]
 800ea0a:	4770      	bx	lr
 800ea0c:	2008f530 	.word	0x2008f530

0800ea10 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800ea10:	ed90 7a01 	vldr	s14, [r0, #4]
 800ea14:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800ea18:	4b0e      	ldr	r3, [pc, #56]	; (800ea54 <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800ea1a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800ea1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea22:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800ea26:	eee6 7a86 	vfma.f32	s15, s13, s12
 800ea2a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800ea2e:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800ea32:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800ea36:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ea3a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800ea3e:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800ea42:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800ea46:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800ea4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ea4e:	edc3 6a01 	vstr	s13, [r3, #4]
 800ea52:	4770      	bx	lr
 800ea54:	2008f538 	.word	0x2008f538

0800ea58 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800ea58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5c:	ed2d 8b02 	vpush	{d8}
 800ea60:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800ea62:	b921      	cbnz	r1, 800ea6e <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800ea64:	4bb4      	ldr	r3, [pc, #720]	; (800ed38 <Calculate_Tc+0x2e0>)
 800ea66:	4ab5      	ldr	r2, [pc, #724]	; (800ed3c <Calculate_Tc+0x2e4>)
 800ea68:	49b5      	ldr	r1, [pc, #724]	; (800ed40 <Calculate_Tc+0x2e8>)
 800ea6a:	f7ff ff23 	bl	800e8b4 <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800ea6e:	4bb5      	ldr	r3, [pc, #724]	; (800ed44 <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800ea70:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800ed48 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800ea74:	885e      	ldrh	r6, [r3, #2]
 800ea76:	881f      	ldrh	r7, [r3, #0]
 800ea78:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800ea7a:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800ed88 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800ea7e:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800ea82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea86:	4438      	add	r0, r7
 800ea88:	4418      	add	r0, r3
 800ea8a:	f7f1 fd63 	bl	8000554 <__aeabi_i2d>
 800ea8e:	4baf      	ldr	r3, [pc, #700]	; (800ed4c <Calculate_Tc+0x2f4>)
 800ea90:	4604      	mov	r4, r0
 800ea92:	460d      	mov	r5, r1
 800ea94:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800ea98:	4638      	mov	r0, r7
 800ea9a:	f7f1 fd5b 	bl	8000554 <__aeabi_i2d>
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	4bab      	ldr	r3, [pc, #684]	; (800ed50 <Calculate_Tc+0x2f8>)
 800eaa2:	4fac      	ldr	r7, [pc, #688]	; (800ed54 <Calculate_Tc+0x2fc>)
 800eaa4:	f7f1 fdbc 	bl	8000620 <__aeabi_dmul>
 800eaa8:	4622      	mov	r2, r4
 800eaaa:	462b      	mov	r3, r5
 800eaac:	f7f1 fee2 	bl	8000874 <__aeabi_ddiv>
 800eab0:	4ba9      	ldr	r3, [pc, #676]	; (800ed58 <Calculate_Tc+0x300>)
 800eab2:	e9cd 0100 	strd	r0, r1, [sp]
 800eab6:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800eaba:	4630      	mov	r0, r6
 800eabc:	f7f1 fd4a 	bl	8000554 <__aeabi_i2d>
 800eac0:	2200      	movs	r2, #0
 800eac2:	4ba6      	ldr	r3, [pc, #664]	; (800ed5c <Calculate_Tc+0x304>)
 800eac4:	f7f1 fdac 	bl	8000620 <__aeabi_dmul>
 800eac8:	462b      	mov	r3, r5
 800eaca:	4622      	mov	r2, r4
 800eacc:	f7f1 fed2 	bl	8000874 <__aeabi_ddiv>
 800ead0:	4ba3      	ldr	r3, [pc, #652]	; (800ed60 <Calculate_Tc+0x308>)
 800ead2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ead6:	2600      	movs	r6, #0
 800ead8:	e9c3 0100 	strd	r0, r1, [r3]
 800eadc:	4ba1      	ldr	r3, [pc, #644]	; (800ed64 <Calculate_Tc+0x30c>)
 800eade:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800eae0:	4635      	mov	r5, r6
 800eae2:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800eae4:	eeb0 8a68 	vmov.f32	s16, s17
 800eae8:	46d3      	mov	fp, sl
 800eaea:	b2f3      	uxtb	r3, r6
 800eaec:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800eaee:	9b04      	ldr	r3, [sp, #16]
 800eaf0:	ecf3 7a01 	vldmia	r3!, {s15}
 800eaf4:	9304      	str	r3, [sp, #16]
 800eaf6:	4b9c      	ldr	r3, [pc, #624]	; (800ed68 <Calculate_Tc+0x310>)
 800eaf8:	edcd 7a05 	vstr	s15, [sp, #20]
 800eafc:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800eb00:	ecf7 7a01 	vldmia	r7!, {s15}
 800eb04:	edcd 7a06 	vstr	s15, [sp, #24]
 800eb08:	ee07 0a90 	vmov	s15, r0
 800eb0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb10:	ee17 0a90 	vmov	r0, s15
 800eb14:	f7f1 fd30 	bl	8000578 <__aeabi_f2d>
 800eb18:	a381      	add	r3, pc, #516	; (adr r3, 800ed20 <Calculate_Tc+0x2c8>)
 800eb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1e:	f7f1 fea9 	bl	8000874 <__aeabi_ddiv>
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb2a:	f7f1 fbc5 	bl	80002b8 <__aeabi_dsub>
 800eb2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb32:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800eb36:	ee07 0a90 	vmov	s15, r0
 800eb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb3e:	3601      	adds	r6, #1
 800eb40:	ee17 0a90 	vmov	r0, s15
 800eb44:	f7f1 fd18 	bl	8000578 <__aeabi_f2d>
 800eb48:	a375      	add	r3, pc, #468	; (adr r3, 800ed20 <Calculate_Tc+0x2c8>)
 800eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4e:	f7f1 fe91 	bl	8000874 <__aeabi_ddiv>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb5a:	f7f1 fbad 	bl	80002b8 <__aeabi_dsub>
 800eb5e:	4680      	mov	r8, r0
 800eb60:	9805      	ldr	r0, [sp, #20]
 800eb62:	4689      	mov	r9, r1
 800eb64:	f7f1 fd08 	bl	8000578 <__aeabi_f2d>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	4649      	mov	r1, r9
 800eb70:	f7f1 fd56 	bl	8000620 <__aeabi_dmul>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb7c:	f7f1 fb9c 	bl	80002b8 <__aeabi_dsub>
 800eb80:	4680      	mov	r8, r0
 800eb82:	9806      	ldr	r0, [sp, #24]
 800eb84:	4689      	mov	r9, r1
 800eb86:	f7f1 fcf7 	bl	8000578 <__aeabi_f2d>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4640      	mov	r0, r8
 800eb90:	4649      	mov	r1, r9
 800eb92:	f7f1 fe6f 	bl	8000874 <__aeabi_ddiv>
 800eb96:	f7f2 f83b 	bl	8000c10 <__aeabi_d2f>
 800eb9a:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800eb9e:	eef0 7ac8 	vabs.f32	s15, s16
 800eba2:	eef0 6ac7 	vabs.f32	s13, s14
 800eba6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ebaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebae:	bfc1      	itttt	gt
 800ebb0:	4625      	movgt	r5, r4
 800ebb2:	eef0 8a48 	vmovgt.f32	s17, s16
 800ebb6:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800ebb8:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800ebbc:	2e1f      	cmp	r6, #31
 800ebbe:	d194      	bne.n	800eaea <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800ebc0:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800ebc4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800ed68 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800ebc8:	f7f1 fcc4 	bl	8000554 <__aeabi_i2d>
 800ebcc:	a354      	add	r3, pc, #336	; (adr r3, 800ed20 <Calculate_Tc+0x2c8>)
 800ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd2:	f7f1 fe4f 	bl	8000874 <__aeabi_ddiv>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800ebdc:	460f      	mov	r7, r1
 800ebde:	f7f1 fcb9 	bl	8000554 <__aeabi_i2d>
 800ebe2:	a34f      	add	r3, pc, #316	; (adr r3, 800ed20 <Calculate_Tc+0x2c8>)
 800ebe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe8:	f7f1 fe44 	bl	8000874 <__aeabi_ddiv>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 fb62 	bl	80002bc <__adddf3>
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	4b5c      	ldr	r3, [pc, #368]	; (800ed6c <Calculate_Tc+0x314>)
 800ebfc:	f7f1 fd10 	bl	8000620 <__aeabi_dmul>
 800ec00:	4b5b      	ldr	r3, [pc, #364]	; (800ed70 <Calculate_Tc+0x318>)
 800ec02:	4680      	mov	r8, r0
 800ec04:	4689      	mov	r9, r1
 800ec06:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800ec0a:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800ec0e:	f7f1 fca1 	bl	8000554 <__aeabi_i2d>
 800ec12:	a343      	add	r3, pc, #268	; (adr r3, 800ed20 <Calculate_Tc+0x2c8>)
 800ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec18:	f7f1 fe2c 	bl	8000874 <__aeabi_ddiv>
 800ec1c:	4606      	mov	r6, r0
 800ec1e:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800ec22:	460f      	mov	r7, r1
 800ec24:	f7f1 fc96 	bl	8000554 <__aeabi_i2d>
 800ec28:	a33d      	add	r3, pc, #244	; (adr r3, 800ed20 <Calculate_Tc+0x2c8>)
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f7f1 fe21 	bl	8000874 <__aeabi_ddiv>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	4630      	mov	r0, r6
 800ec38:	4639      	mov	r1, r7
 800ec3a:	f7f1 fb3f 	bl	80002bc <__adddf3>
 800ec3e:	2200      	movs	r2, #0
 800ec40:	4b4a      	ldr	r3, [pc, #296]	; (800ed6c <Calculate_Tc+0x314>)
 800ec42:	f7f1 fced 	bl	8000620 <__aeabi_dmul>
 800ec46:	4b4b      	ldr	r3, [pc, #300]	; (800ed74 <Calculate_Tc+0x31c>)
 800ec48:	4606      	mov	r6, r0
 800ec4a:	460f      	mov	r7, r1
 800ec4c:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800ec50:	4640      	mov	r0, r8
 800ec52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec56:	4649      	mov	r1, r9
 800ec58:	f7f1 fb2e 	bl	80002b8 <__aeabi_dsub>
 800ec5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec60:	4680      	mov	r8, r0
 800ec62:	4689      	mov	r9, r1
 800ec64:	4630      	mov	r0, r6
 800ec66:	4639      	mov	r1, r7
 800ec68:	f7f1 fb26 	bl	80002b8 <__aeabi_dsub>
 800ec6c:	4642      	mov	r2, r8
 800ec6e:	4606      	mov	r6, r0
 800ec70:	460f      	mov	r7, r1
 800ec72:	464b      	mov	r3, r9
 800ec74:	4640      	mov	r0, r8
 800ec76:	4649      	mov	r1, r9
 800ec78:	f7f1 fcd2 	bl	8000620 <__aeabi_dmul>
 800ec7c:	4632      	mov	r2, r6
 800ec7e:	4680      	mov	r8, r0
 800ec80:	4689      	mov	r9, r1
 800ec82:	463b      	mov	r3, r7
 800ec84:	4630      	mov	r0, r6
 800ec86:	4639      	mov	r1, r7
 800ec88:	f7f1 fcca 	bl	8000620 <__aeabi_dmul>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	4640      	mov	r0, r8
 800ec92:	4649      	mov	r1, r9
 800ec94:	f7f1 fb12 	bl	80002bc <__adddf3>
 800ec98:	ec41 0b10 	vmov	d0, r0, r1
 800ec9c:	f015 f8ec 	bl	8023e78 <sqrt>
 800eca0:	4b35      	ldr	r3, [pc, #212]	; (800ed78 <Calculate_Tc+0x320>)
 800eca2:	ec51 0b10 	vmov	r0, r1, d0
 800eca6:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800ecaa:	a31f      	add	r3, pc, #124	; (adr r3, 800ed28 <Calculate_Tc+0x2d0>)
 800ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb0:	f7f1 ff46 	bl	8000b40 <__aeabi_dcmpgt>
 800ecb4:	bb78      	cbnz	r0, 800ed16 <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800ecb6:	4b31      	ldr	r3, [pc, #196]	; (800ed7c <Calculate_Tc+0x324>)
 800ecb8:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800ecbc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800ecc0:	ee07 2a90 	vmov	s15, r2
 800ecc4:	1a9b      	subs	r3, r3, r2
 800ecc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ecca:	ee07 3a90 	vmov	s15, r3
 800ecce:	ee78 8a68 	vsub.f32	s17, s16, s17
 800ecd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecd6:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800ecda:	eea8 7a26 	vfma.f32	s14, s16, s13
 800ecde:	ee17 0a10 	vmov	r0, s14
 800ece2:	f7f1 fc49 	bl	8000578 <__aeabi_f2d>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	a111      	add	r1, pc, #68	; (adr r1, 800ed30 <Calculate_Tc+0x2d8>)
 800ecec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecf0:	f7f1 fdc0 	bl	8000874 <__aeabi_ddiv>
 800ecf4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ecf8:	4921      	ldr	r1, [pc, #132]	; (800ed80 <Calculate_Tc+0x328>)
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	e9c1 2300 	strd	r2, r3, [r1]
 800ed00:	4610      	mov	r0, r2
 800ed02:	4619      	mov	r1, r3
 800ed04:	f7f1 ff84 	bl	8000c10 <__aeabi_d2f>
	}
}
 800ed08:	ee00 0a10 	vmov	s0, r0
 800ed0c:	b00b      	add	sp, #44	; 0x2c
 800ed0e:	ecbd 8b02 	vpop	{d8}
 800ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800ed16:	481b      	ldr	r0, [pc, #108]	; (800ed84 <Calculate_Tc+0x32c>)
 800ed18:	e7f6      	b.n	800ed08 <Calculate_Tc+0x2b0>
 800ed1a:	bf00      	nop
 800ed1c:	f3af 8000 	nop.w
 800ed20:	00000000 	.word	0x00000000
 800ed24:	40f86a00 	.word	0x40f86a00
 800ed28:	9999999a 	.word	0x9999999a
 800ed2c:	3fa99999 	.word	0x3fa99999
 800ed30:	00000000 	.word	0x00000000
 800ed34:	412e8480 	.word	0x412e8480
 800ed38:	2008d514 	.word	0x2008d514
 800ed3c:	20052940 	.word	0x20052940
 800ed40:	2008a514 	.word	0x2008a514
 800ed44:	2008f522 	.word	0x2008f522
 800ed48:	447a0000 	.word	0x447a0000
 800ed4c:	200056b0 	.word	0x200056b0
 800ed50:	40100000 	.word	0x40100000
 800ed54:	0802577c 	.word	0x0802577c
 800ed58:	200056c0 	.word	0x200056c0
 800ed5c:	40180000 	.word	0x40180000
 800ed60:	200056d0 	.word	0x200056d0
 800ed64:	08025700 	.word	0x08025700
 800ed68:	08025836 	.word	0x08025836
 800ed6c:	3fe00000 	.word	0x3fe00000
 800ed70:	200056b8 	.word	0x200056b8
 800ed74:	200056c8 	.word	0x200056c8
 800ed78:	200056a8 	.word	0x200056a8
 800ed7c:	0802560c 	.word	0x0802560c
 800ed80:	20090aa8 	.word	0x20090aa8
 800ed84:	477fff00 	.word	0x477fff00
 800ed88:	080257f8 	.word	0x080257f8
 800ed8c:	00000000 	.word	0x00000000

0800ed90 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800ed90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800ed94:	2a01      	cmp	r2, #1
{
 800ed96:	ed2d 8b02 	vpush	{d8}
 800ed9a:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800ed9c:	f000 80b9 	beq.w	800ef12 <Calculate_Lab+0x182>
 800eda0:	2a02      	cmp	r2, #2
 800eda2:	f000 80b8 	beq.w	800ef16 <Calculate_Lab+0x186>
 800eda6:	2a04      	cmp	r2, #4
 800eda8:	f000 80b7 	beq.w	800ef1a <Calculate_Lab+0x18a>
 800edac:	2a08      	cmp	r2, #8
 800edae:	f000 80b6 	beq.w	800ef1e <Calculate_Lab+0x18e>
 800edb2:	2a10      	cmp	r2, #16
 800edb4:	f000 80b5 	beq.w	800ef22 <Calculate_Lab+0x192>
 800edb8:	2a20      	cmp	r2, #32
 800edba:	bf14      	ite	ne
 800edbc:	2400      	movne	r4, #0
 800edbe:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800edc0:	2901      	cmp	r1, #1
 800edc2:	f040 80b0 	bne.w	800ef26 <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800edc6:	4b82      	ldr	r3, [pc, #520]	; (800efd0 <Calculate_Lab+0x240>)
 800edc8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800edcc:	f7f1 fbc2 	bl	8000554 <__aeabi_i2d>
 800edd0:	4b80      	ldr	r3, [pc, #512]	; (800efd4 <Calculate_Lab+0x244>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	f7f1 fd4e 	bl	8000874 <__aeabi_ddiv>
 800edd8:	f7f1 ff1a 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800eddc:	4b7e      	ldr	r3, [pc, #504]	; (800efd8 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800edde:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800ede2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ede6:	f7f1 fbb5 	bl	8000554 <__aeabi_i2d>
 800edea:	2200      	movs	r2, #0
 800edec:	4b79      	ldr	r3, [pc, #484]	; (800efd4 <Calculate_Lab+0x244>)
 800edee:	f7f1 fd41 	bl	8000874 <__aeabi_ddiv>
 800edf2:	f7f1 ff0d 	bl	8000c10 <__aeabi_d2f>
 800edf6:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800edfa:	8833      	ldrh	r3, [r6, #0]
 800edfc:	ee07 3a90 	vmov	s15, r3
 800ee00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee04:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ee08:	ee17 0a10 	vmov	r0, s14
 800ee0c:	f7f1 fbb4 	bl	8000578 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ee10:	8873      	ldrh	r3, [r6, #2]
 800ee12:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800efdc <Calculate_Lab+0x24c>
 800ee16:	ee07 3a90 	vmov	s15, r3
 800ee1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800ee1e:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ee20:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800ee24:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ee26:	ee16 0a90 	vmov	r0, s13
 800ee2a:	f7f1 fba5 	bl	8000578 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ee2e:	88b3      	ldrh	r3, [r6, #4]
 800ee30:	ee07 3a90 	vmov	s15, r3
 800ee34:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ee38:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ee3a:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ee3e:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ee40:	ee17 0a10 	vmov	r0, s14
 800ee44:	f7f1 fb98 	bl	8000578 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800ee48:	a35b      	add	r3, pc, #364	; (adr r3, 800efb8 <Calculate_Lab+0x228>)
 800ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ee4e:	4606      	mov	r6, r0
 800ee50:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800ee52:	4640      	mov	r0, r8
 800ee54:	4649      	mov	r1, r9
 800ee56:	f7f1 fe73 	bl	8000b40 <__aeabi_dcmpgt>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	d075      	beq.n	800ef4a <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800ee5e:	ec49 8b10 	vmov	d0, r8, r9
 800ee62:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800efc0 <Calculate_Lab+0x230>
 800ee66:	f014 fe8f 	bl	8023b88 <pow>
 800ee6a:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800ee6e:	a352      	add	r3, pc, #328	; (adr r3, 800efb8 <Calculate_Lab+0x228>)
 800ee70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee74:	4620      	mov	r0, r4
 800ee76:	4629      	mov	r1, r5
 800ee78:	f7f1 fe62 	bl	8000b40 <__aeabi_dcmpgt>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d076      	beq.n	800ef6e <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800ee80:	ec45 4b10 	vmov	d0, r4, r5
 800ee84:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800efc0 <Calculate_Lab+0x230>
 800ee88:	f014 fe7e 	bl	8023b88 <pow>
 800ee8c:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800ee90:	a349      	add	r3, pc, #292	; (adr r3, 800efb8 <Calculate_Lab+0x228>)
 800ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee96:	4630      	mov	r0, r6
 800ee98:	4639      	mov	r1, r7
 800ee9a:	f7f1 fe51 	bl	8000b40 <__aeabi_dcmpgt>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d077      	beq.n	800ef92 <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800eea2:	ec47 6b10 	vmov	d0, r6, r7
 800eea6:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800efc0 <Calculate_Lab+0x230>
 800eeaa:	f014 fe6d 	bl	8023b88 <pow>
 800eeae:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	4b4a      	ldr	r3, [pc, #296]	; (800efe0 <Calculate_Lab+0x250>)
 800eeb6:	f8df a140 	ldr.w	sl, [pc, #320]	; 800eff8 <Calculate_Lab+0x268>
 800eeba:	4620      	mov	r0, r4
 800eebc:	4629      	mov	r1, r5
 800eebe:	f7f1 fbaf 	bl	8000620 <__aeabi_dmul>
 800eec2:	2200      	movs	r2, #0
 800eec4:	4b47      	ldr	r3, [pc, #284]	; (800efe4 <Calculate_Lab+0x254>)
 800eec6:	f7f1 f9f7 	bl	80002b8 <__aeabi_dsub>
 800eeca:	f7f1 fe59 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800eece:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800eed0:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800eed4:	462b      	mov	r3, r5
 800eed6:	4640      	mov	r0, r8
 800eed8:	4649      	mov	r1, r9
 800eeda:	f7f1 f9ed 	bl	80002b8 <__aeabi_dsub>
 800eede:	2200      	movs	r2, #0
 800eee0:	4b41      	ldr	r3, [pc, #260]	; (800efe8 <Calculate_Lab+0x258>)
 800eee2:	f7f1 fb9d 	bl	8000620 <__aeabi_dmul>
 800eee6:	f7f1 fe4b 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800eeea:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800eeec:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800eef0:	463b      	mov	r3, r7
 800eef2:	4620      	mov	r0, r4
 800eef4:	4629      	mov	r1, r5
 800eef6:	f7f1 f9df 	bl	80002b8 <__aeabi_dsub>
 800eefa:	2200      	movs	r2, #0
 800eefc:	4b3b      	ldr	r3, [pc, #236]	; (800efec <Calculate_Lab+0x25c>)
 800eefe:	f7f1 fb8f 	bl	8000620 <__aeabi_dmul>
 800ef02:	f7f1 fe3d 	bl	8000b80 <__aeabi_d2iz>
	
}
 800ef06:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800ef0a:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800ef12:	2400      	movs	r4, #0
 800ef14:	e754      	b.n	800edc0 <Calculate_Lab+0x30>
 800ef16:	2401      	movs	r4, #1
 800ef18:	e752      	b.n	800edc0 <Calculate_Lab+0x30>
 800ef1a:	2402      	movs	r4, #2
 800ef1c:	e750      	b.n	800edc0 <Calculate_Lab+0x30>
 800ef1e:	2403      	movs	r4, #3
 800ef20:	e74e      	b.n	800edc0 <Calculate_Lab+0x30>
 800ef22:	2404      	movs	r4, #4
 800ef24:	e74c      	b.n	800edc0 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800ef26:	2900      	cmp	r1, #0
 800ef28:	f47f af67 	bne.w	800edfa <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800ef2c:	4b30      	ldr	r3, [pc, #192]	; (800eff0 <Calculate_Lab+0x260>)
 800ef2e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ef32:	f7f1 fb0f 	bl	8000554 <__aeabi_i2d>
 800ef36:	4b27      	ldr	r3, [pc, #156]	; (800efd4 <Calculate_Lab+0x244>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f7f1 fc9b 	bl	8000874 <__aeabi_ddiv>
 800ef3e:	f7f1 fe67 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800ef42:	4b2c      	ldr	r3, [pc, #176]	; (800eff4 <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800ef44:	ee08 0a90 	vmov	s17, r0
 800ef48:	e74b      	b.n	800ede2 <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800ef4a:	a31f      	add	r3, pc, #124	; (adr r3, 800efc8 <Calculate_Lab+0x238>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	4640      	mov	r0, r8
 800ef52:	4649      	mov	r1, r9
 800ef54:	f7f1 fb64 	bl	8000620 <__aeabi_dmul>
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4b22      	ldr	r3, [pc, #136]	; (800efe4 <Calculate_Lab+0x254>)
 800ef5c:	f7f1 f9ae 	bl	80002bc <__adddf3>
 800ef60:	2200      	movs	r2, #0
 800ef62:	4b1f      	ldr	r3, [pc, #124]	; (800efe0 <Calculate_Lab+0x250>)
 800ef64:	f7f1 fc86 	bl	8000874 <__aeabi_ddiv>
 800ef68:	4680      	mov	r8, r0
 800ef6a:	4689      	mov	r9, r1
 800ef6c:	e77f      	b.n	800ee6e <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800ef6e:	a316      	add	r3, pc, #88	; (adr r3, 800efc8 <Calculate_Lab+0x238>)
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	4620      	mov	r0, r4
 800ef76:	4629      	mov	r1, r5
 800ef78:	f7f1 fb52 	bl	8000620 <__aeabi_dmul>
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	4b19      	ldr	r3, [pc, #100]	; (800efe4 <Calculate_Lab+0x254>)
 800ef80:	f7f1 f99c 	bl	80002bc <__adddf3>
 800ef84:	2200      	movs	r2, #0
 800ef86:	4b16      	ldr	r3, [pc, #88]	; (800efe0 <Calculate_Lab+0x250>)
 800ef88:	f7f1 fc74 	bl	8000874 <__aeabi_ddiv>
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	460d      	mov	r5, r1
 800ef90:	e77e      	b.n	800ee90 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800ef92:	a30d      	add	r3, pc, #52	; (adr r3, 800efc8 <Calculate_Lab+0x238>)
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	4630      	mov	r0, r6
 800ef9a:	4639      	mov	r1, r7
 800ef9c:	f7f1 fb40 	bl	8000620 <__aeabi_dmul>
 800efa0:	2200      	movs	r2, #0
 800efa2:	4b10      	ldr	r3, [pc, #64]	; (800efe4 <Calculate_Lab+0x254>)
 800efa4:	f7f1 f98a 	bl	80002bc <__adddf3>
 800efa8:	2200      	movs	r2, #0
 800efaa:	4b0d      	ldr	r3, [pc, #52]	; (800efe0 <Calculate_Lab+0x250>)
 800efac:	f7f1 fc62 	bl	8000874 <__aeabi_ddiv>
 800efb0:	4606      	mov	r6, r0
 800efb2:	460f      	mov	r7, r1
 800efb4:	e77d      	b.n	800eeb2 <Calculate_Lab+0x122>
 800efb6:	bf00      	nop
 800efb8:	98de88b7 	.word	0x98de88b7
 800efbc:	3f822354 	.word	0x3f822354
 800efc0:	55555555 	.word	0x55555555
 800efc4:	3fd55555 	.word	0x3fd55555
 800efc8:	66666666 	.word	0x66666666
 800efcc:	408c3a66 	.word	0x408c3a66
 800efd0:	0802564a 	.word	0x0802564a
 800efd4:	40590000 	.word	0x40590000
 800efd8:	08025662 	.word	0x08025662
 800efdc:	42c80000 	.word	0x42c80000
 800efe0:	405d0000 	.word	0x405d0000
 800efe4:	40300000 	.word	0x40300000
 800efe8:	407f4000 	.word	0x407f4000
 800efec:	40690000 	.word	0x40690000
 800eff0:	08025656 	.word	0x08025656
 800eff4:	0802566e 	.word	0x0802566e
 800eff8:	2008f51c 	.word	0x2008f51c

0800effc <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800effc:	4b75      	ldr	r3, [pc, #468]	; (800f1d4 <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800effe:	eddf 7a76 	vldr	s15, [pc, #472]	; 800f1d8 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800f002:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800f006:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800f00a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800f1dc <Calculate_Lambda_Dominant+0x1e0>
 800f00e:	eddf 6a74 	vldr	s13, [pc, #464]	; 800f1e0 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f012:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800f1e4 <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800f016:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800f01a:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800f01e:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f022:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800f026:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800f02a:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f02c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f1e8 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800f030:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f034:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800f038:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800f1ec <Calculate_Lambda_Dominant+0x1f0>
 800f03c:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800f040:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800f1f0 <Calculate_Lambda_Dominant+0x1f4>
 800f044:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800f048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800f04c:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800f1f4 <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f050:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800f054:	ee77 6a46 	vsub.f32	s13, s14, s12
 800f058:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f1f8 <Calculate_Lambda_Dominant+0x1fc>
 800f05c:	ee35 5a65 	vsub.f32	s10, s10, s11
 800f060:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800f064:	eddf 6a65 	vldr	s13, [pc, #404]	; 800f1fc <Calculate_Lambda_Dominant+0x200>
 800f068:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800f06c:	bfcc      	ite	gt
 800f06e:	2101      	movgt	r1, #1
 800f070:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800f078:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f07c:	bfcc      	ite	gt
 800f07e:	2201      	movgt	r2, #1
 800f080:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800f084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f088:	bfcc      	ite	gt
 800f08a:	2301      	movgt	r3, #1
 800f08c:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800f090:	4291      	cmp	r1, r2
 800f092:	f040 8093 	bne.w	800f1bc <Calculate_Lambda_Dominant+0x1c0>
 800f096:	4299      	cmp	r1, r3
 800f098:	bf14      	ite	ne
 800f09a:	2101      	movne	r1, #1
 800f09c:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0a0:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800f0a4:	4856      	ldr	r0, [pc, #344]	; (800f200 <Calculate_Lambda_Dominant+0x204>)
 800f0a6:	4a57      	ldr	r2, [pc, #348]	; (800f204 <Calculate_Lambda_Dominant+0x208>)
 800f0a8:	8804      	ldrh	r4, [r0, #0]
 800f0aa:	4e57      	ldr	r6, [pc, #348]	; (800f208 <Calculate_Lambda_Dominant+0x20c>)
 800f0ac:	4d57      	ldr	r5, [pc, #348]	; (800f20c <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800f0ae:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800f1d8 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0b2:	eee6 3a27 	vfma.f32	s7, s12, s15
 800f0b6:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800f0ba:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0bc:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f0c0:	ed95 6a00 	vldr	s12, [r5]
 800f0c4:	edd6 6a00 	vldr	s13, [r6]
 800f0c8:	ed95 4a01 	vldr	s8, [r5, #4]
 800f0cc:	ed96 5a01 	vldr	s10, [r6, #4]
 800f0d0:	3504      	adds	r5, #4
 800f0d2:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0d4:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f0d8:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0dc:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f0e0:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800f0e4:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0e8:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f0ec:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0f0:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f0f4:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0f8:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f100:	bf54      	ite	pl
 800f102:	eeb0 1a44 	vmovpl.f32	s2, s8
 800f106:	eeb0 1a46 	vmovmi.f32	s2, s12
 800f10a:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800f10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f112:	d54d      	bpl.n	800f1b0 <Calculate_Lambda_Dominant+0x1b4>
 800f114:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800f118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11c:	bfd8      	it	le
 800f11e:	eeb0 6a44 	vmovle.f32	s12, s8
 800f122:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800f126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f12a:	dd41      	ble.n	800f1b0 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f12c:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f130:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f134:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f13c:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f140:	bf54      	ite	pl
 800f142:	eeb0 4a45 	vmovpl.f32	s8, s10
 800f146:	eeb0 4a66 	vmovmi.f32	s8, s13
 800f14a:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800f14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f152:	d52d      	bpl.n	800f1b0 <Calculate_Lambda_Dominant+0x1b4>
 800f154:	eef4 6ac5 	vcmpe.f32	s13, s10
 800f158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15c:	bfd8      	it	le
 800f15e:	eef0 6a45 	vmovle.f32	s13, s10
 800f162:	eef4 6ac6 	vcmpe.f32	s13, s12
 800f166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f16a:	dd21      	ble.n	800f1b0 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800f16c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f174:	bf54      	ite	pl
 800f176:	eef0 6a60 	vmovpl.f32	s13, s1
 800f17a:	eef0 6a47 	vmovmi.f32	s13, s14
 800f17e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f186:	d51b      	bpl.n	800f1c0 <Calculate_Lambda_Dominant+0x1c4>
 800f188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f190:	bfd8      	it	le
 800f192:	eeb0 7a60 	vmovle.f32	s14, s1
 800f196:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800f19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19e:	bfcc      	ite	gt
 800f1a0:	2301      	movgt	r3, #1
 800f1a2:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800f1a6:	fb13 f301 	smulbb	r3, r3, r1
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d10b      	bne.n	800f1c6 <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800f1ae:	8814      	ldrh	r4, [r2, #0]
 800f1b0:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800f1b2:	4297      	cmp	r7, r2
 800f1b4:	d184      	bne.n	800f0c0 <Calculate_Lambda_Dominant+0xc4>
 800f1b6:	b103      	cbz	r3, 800f1ba <Calculate_Lambda_Dominant+0x1be>
 800f1b8:	8004      	strh	r4, [r0, #0]
 800f1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800f1bc:	2101      	movs	r1, #1
 800f1be:	e76f      	b.n	800f0a0 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800f1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c4:	e7ef      	b.n	800f1a6 <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800f1c6:	1c4b      	adds	r3, r1, #1
 800f1c8:	bf14      	ite	ne
 800f1ca:	8814      	ldrhne	r4, [r2, #0]
 800f1cc:	2400      	moveq	r4, #0
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e7ee      	b.n	800f1b0 <Calculate_Lambda_Dominant+0x1b4>
 800f1d2:	bf00      	nop
 800f1d4:	2008f540 	.word	0x2008f540
 800f1d8:	3eaaa64c 	.word	0x3eaaa64c
 800f1dc:	be1fd4b2 	.word	0xbe1fd4b2
 800f1e0:	beaaa64c 	.word	0xbeaaa64c
 800f1e4:	3e3577e6 	.word	0x3e3577e6
 800f1e8:	00000000 	.word	0x00000000
 800f1ec:	3f0eeab2 	.word	0x3f0eeab2
 800f1f0:	3e876ea8 	.word	0x3e876ea8
 800f1f4:	3f3c48ac 	.word	0x3f3c48ac
 800f1f8:	becdeb0c 	.word	0xbecdeb0c
 800f1fc:	3d8cde90 	.word	0x3d8cde90
 800f200:	20095b8c 	.word	0x20095b8c
 800f204:	0802567c 	.word	0x0802567c
 800f208:	0802597c 	.word	0x0802597c
 800f20c:	08025874 	.word	0x08025874

0800f210 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800f210:	4b2c      	ldr	r3, [pc, #176]	; (800f2c4 <Calculate_deltaEab+0xb4>)
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800f216:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800f218:	d40a      	bmi.n	800f230 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800f21a:	4b2b      	ldr	r3, [pc, #172]	; (800f2c8 <Calculate_deltaEab+0xb8>)
 800f21c:	482b      	ldr	r0, [pc, #172]	; (800f2cc <Calculate_deltaEab+0xbc>)
 800f21e:	7819      	ldrb	r1, [r3, #0]
 800f220:	4b2b      	ldr	r3, [pc, #172]	; (800f2d0 <Calculate_deltaEab+0xc0>)
 800f222:	781a      	ldrb	r2, [r3, #0]
 800f224:	4b2b      	ldr	r3, [pc, #172]	; (800f2d4 <Calculate_deltaEab+0xc4>)
 800f226:	2900      	cmp	r1, #0
 800f228:	bf18      	it	ne
 800f22a:	4618      	movne	r0, r3
 800f22c:	f7ff fdb0 	bl	800ed90 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800f230:	4a29      	ldr	r2, [pc, #164]	; (800f2d8 <Calculate_deltaEab+0xc8>)
 800f232:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f236:	ee06 3a90 	vmov	s13, r3
 800f23a:	4b28      	ldr	r3, [pc, #160]	; (800f2dc <Calculate_deltaEab+0xcc>)
 800f23c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f240:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800f244:	ee06 1a90 	vmov	s13, r1
 800f248:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f24c:	4924      	ldr	r1, [pc, #144]	; (800f2e0 <Calculate_deltaEab+0xd0>)
 800f24e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f252:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f256:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f25a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f25e:	ee00 1a10 	vmov	s0, r1
 800f262:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f266:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f26a:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800f26e:	ee00 1a10 	vmov	s0, r1
 800f272:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f276:	491b      	ldr	r1, [pc, #108]	; (800f2e4 <Calculate_deltaEab+0xd4>)
 800f278:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f27c:	ee07 2a90 	vmov	s15, r2
 800f280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f284:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f288:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f28c:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f294:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f298:	4b13      	ldr	r3, [pc, #76]	; (800f2e8 <Calculate_deltaEab+0xd8>)
 800f29a:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800f29e:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f2a0:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800f2a4:	4b11      	ldr	r3, [pc, #68]	; (800f2ec <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f2a6:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800f2aa:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f2ac:	f014 fe3e 	bl	8023f2c <sqrtf>
 800f2b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f2b4:	edcd 7a01 	vstr	s15, [sp, #4]
}
 800f2b8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800f2bc:	b003      	add	sp, #12
 800f2be:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2c2:	bf00      	nop
 800f2c4:	20005706 	.word	0x20005706
 800f2c8:	20005704 	.word	0x20005704
 800f2cc:	2008f528 	.word	0x2008f528
 800f2d0:	20090ac1 	.word	0x20090ac1
 800f2d4:	2008f522 	.word	0x2008f522
 800f2d8:	2008f51c 	.word	0x2008f51c
 800f2dc:	20091050 	.word	0x20091050
 800f2e0:	20090aa0 	.word	0x20090aa0
 800f2e4:	20090a98 	.word	0x20090a98
 800f2e8:	20090ab0 	.word	0x20090ab0
 800f2ec:	200056a1 	.word	0x200056a1

0800f2f0 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800f2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800f2f2:	2903      	cmp	r1, #3
{
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	bf88      	it	hi
 800f2f8:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800f2fc:	f7fd f903 	bl	800c506 <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800f300:	aa04      	add	r2, sp, #16
 800f302:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800f306:	ca03      	ldmia	r2!, {r0, r1}
 800f308:	4b0a      	ldr	r3, [pc, #40]	; (800f334 <Calibration_Load_2byte+0x44>)
 800f30a:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800f30c:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800f30e:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800f310:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800f314:	881a      	ldrh	r2, [r3, #0]
 800f316:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800f31a:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800f31c:	889b      	ldrh	r3, [r3, #4]
 800f31e:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800f322:	ab04      	add	r3, sp, #16
 800f324:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800f328:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800f32c:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800f330:	b004      	add	sp, #16
 800f332:	bd10      	pop	{r4, pc}
 800f334:	200056e0 	.word	0x200056e0

0800f338 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800f338:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800f33a:	2907      	cmp	r1, #7
{
 800f33c:	b085      	sub	sp, #20
 800f33e:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800f340:	bf84      	itt	hi
 800f342:	f1a1 0408 	subhi.w	r4, r1, #8
 800f346:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800f348:	f7fd f8dd 	bl	800c506 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f34c:	e9cd 0100 	strd	r0, r1, [sp]
 800f350:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800f354:	ab04      	add	r3, sp, #16
 800f356:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800f35a:	4b0f      	ldr	r3, [pc, #60]	; (800f398 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f35c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800f360:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800f364:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800f368:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800f36c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f370:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800f374:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800f378:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800f37c:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800f380:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800f384:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800f386:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800f388:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800f38a:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800f38c:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800f38e:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800f390:	5d18      	ldrb	r0, [r3, r4]
 800f392:	b005      	add	sp, #20
 800f394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f396:	bf00      	nop
 800f398:	200056f4 	.word	0x200056f4

0800f39c <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800f39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800f39e:	f7fd f8b2 	bl	800c506 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f3a2:	e9cd 0100 	strd	r0, r1, [sp]
 800f3a6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800f3aa:	ab04      	add	r3, sp, #16
 800f3ac:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800f3b0:	9b02      	ldr	r3, [sp, #8]
 800f3b2:	ba1b      	rev	r3, r3
}
 800f3b4:	ee00 3a10 	vmov	s0, r3
 800f3b8:	b005      	add	sp, #20
 800f3ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f3c0 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800f3c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800f3c4:	f8df a078 	ldr.w	sl, [pc, #120]	; 800f440 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800f3c8:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800f438 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800f3cc:	4c19      	ldr	r4, [pc, #100]	; (800f434 <Calibration_Load_Pack+0x74>)
{
 800f3ce:	4681      	mov	r9, r0
 800f3d0:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f3d2:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800f3d6:	2500      	movs	r5, #0
 800f3d8:	00ae      	lsls	r6, r5, #2
 800f3da:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f3dc:	4540      	cmp	r0, r8
 800f3de:	db01      	blt.n	800f3e4 <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800f3e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800f3e4:	4448      	add	r0, r9
 800f3e6:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800f3ea:	f7fd f88c 	bl	800c506 <flash_data_read_buff>
 800f3ee:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800f3f2:	4b11      	ldr	r3, [pc, #68]	; (800f438 <Calibration_Load_Pack+0x78>)
 800f3f4:	cb03      	ldmia	r3!, {r0, r1}
 800f3f6:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800f3f8:	7863      	ldrb	r3, [r4, #1]
 800f3fa:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800f3fc:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800f3fe:	041b      	lsls	r3, r3, #16
 800f400:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f404:	78e2      	ldrb	r2, [r4, #3]
 800f406:	4313      	orrs	r3, r2
 800f408:	78a2      	ldrb	r2, [r4, #2]
 800f40a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800f40e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f412:	7963      	ldrb	r3, [r4, #5]
 800f414:	7922      	ldrb	r2, [r4, #4]
 800f416:	041b      	lsls	r3, r3, #16
 800f418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f41c:	79e2      	ldrb	r2, [r4, #7]
 800f41e:	4313      	orrs	r3, r2
 800f420:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800f422:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f428:	4a04      	ldr	r2, [pc, #16]	; (800f43c <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800f42a:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f42c:	6013      	str	r3, [r2, #0]
		idx+=2;
 800f42e:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800f430:	6073      	str	r3, [r6, #4]
 800f432:	e7d1      	b.n	800f3d8 <Calibration_Load_Pack+0x18>
 800f434:	200056e8 	.word	0x200056e8
 800f438:	200056d8 	.word	0x200056d8
 800f43c:	200056f0 	.word	0x200056f0
 800f440:	20090ab8 	.word	0x20090ab8

0800f444 <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f448:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800f44c:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800f450:	4629      	mov	r1, r5
 800f452:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800f456:	f7ff ff6f 	bl	800f338 <Calibration_Load_1byte>
 800f45a:	ee07 0a90 	vmov	s15, r0
 800f45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f462:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f466:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f46a:	08a8      	lsrs	r0, r5, #2
 800f46c:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800f470:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f474:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f476:	00c4      	lsls	r4, r0, #3
 800f478:	4629      	mov	r1, r5
 800f47a:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f47c:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f480:	f7ff ff36 	bl	800f2f0 <Calibration_Load_2byte>
 800f484:	4b0a      	ldr	r3, [pc, #40]	; (800f4b0 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800f486:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f488:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800f48a:	f104 0014 	add.w	r0, r4, #20
 800f48e:	f7ff ff2f 	bl	800f2f0 <Calibration_Load_2byte>
 800f492:	ee07 0a90 	vmov	s15, r0
 800f496:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f4b4 <Calibration_Exposure_Change+0x70>
 800f49a:	4b07      	ldr	r3, [pc, #28]	; (800f4b8 <Calibration_Exposure_Change+0x74>)
 800f49c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4a4:	edc3 7a00 	vstr	s15, [r3]
 800f4a8:	bd38      	pop	{r3, r4, r5, pc}
 800f4aa:	bf00      	nop
 800f4ac:	2005193c 	.word	0x2005193c
 800f4b0:	20009d22 	.word	0x20009d22
 800f4b4:	42c80000 	.word	0x42c80000
 800f4b8:	20009d2c 	.word	0x20009d2c
 800f4bc:	00000000 	.word	0x00000000

0800f4c0 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800f4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f4c4:	a717      	add	r7, pc, #92	; (adr r7, 800f524 <Calibration_WaveLenght_Graph+0x64>)
 800f4c6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f4ca:	f8df a060 	ldr.w	sl, [pc, #96]	; 800f52c <Calibration_WaveLenght_Graph+0x6c>
 800f4ce:	4d14      	ldr	r5, [pc, #80]	; (800f520 <Calibration_WaveLenght_Graph+0x60>)
 800f4d0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800f530 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800f4d4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800f534 <Calibration_WaveLenght_Graph+0x74>
{
 800f4d8:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f4dc:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f7ff ff04 	bl	800f2f0 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f4e8:	ee07 0a90 	vmov	s15, r0
 800f4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800f4f0:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f4f4:	ee17 0a90 	vmov	r0, s15
 800f4f8:	f7f1 f83e 	bl	8000578 <__aeabi_f2d>
 800f4fc:	4642      	mov	r2, r8
 800f4fe:	464b      	mov	r3, r9
 800f500:	f7f1 f9b8 	bl	8000874 <__aeabi_ddiv>
 800f504:	4632      	mov	r2, r6
 800f506:	463b      	mov	r3, r7
 800f508:	f7f0 fed8 	bl	80002bc <__adddf3>
 800f50c:	f7f1 fb80 	bl	8000c10 <__aeabi_d2f>
 800f510:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800f514:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f516:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800f51a:	d1e1      	bne.n	800f4e0 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800f51c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f520:	20009d00 	.word	0x20009d00
 800f524:	00000000 	.word	0x00000000
 800f528:	4072c000 	.word	0x4072c000
 800f52c:	20055946 	.word	0x20055946
 800f530:	40590000 	.word	0x40590000
 800f534:	08100920 	.word	0x08100920

0800f538 <GUI_OptionMenuRu>:

extern uint16_t Touch_x, Touch_y;
uint16_t temp_x = 0, temp_y = 0;

void GUI_OptionMenuRu()
{	
 800f538:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800f53a:	2156      	movs	r1, #86	; 0x56
 800f53c:	200a      	movs	r0, #10
 800f53e:	f009 f979 	bl	8018834 <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800f542:	2156      	movs	r1, #86	; 0x56
 800f544:	2076      	movs	r0, #118	; 0x76
 800f546:	f009 f9a7 	bl	8018898 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800f54a:	2156      	movs	r1, #86	; 0x56
 800f54c:	20da      	movs	r0, #218	; 0xda
 800f54e:	f004 f842 	bl	80135d6 <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f552:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f556:	2378      	movs	r3, #120	; 0x78
 800f558:	4619      	mov	r1, r3
 800f55a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f55e:	9400      	str	r4, [sp, #0]
 800f560:	200a      	movs	r0, #10
 800f562:	f00d fa8b 	bl	801ca7c <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800f566:	2191      	movs	r1, #145	; 0x91
 800f568:	200a      	movs	r0, #10
 800f56a:	f009 f9dd 	bl	8018928 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800f56e:	23b7      	movs	r3, #183	; 0xb7
 800f570:	4619      	mov	r1, r3
 800f572:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f576:	9400      	str	r4, [sp, #0]
 800f578:	200a      	movs	r0, #10
 800f57a:	f00d fa7f 	bl	801ca7c <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800f57e:	21d1      	movs	r1, #209	; 0xd1
 800f580:	200a      	movs	r0, #10
 800f582:	f009 fa73 	bl	8018a6c <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f586:	4b21      	ldr	r3, [pc, #132]	; (800f60c <GUI_OptionMenuRu+0xd4>)
 800f588:	21ca      	movs	r1, #202	; 0xca
 800f58a:	781a      	ldrb	r2, [r3, #0]
 800f58c:	20b6      	movs	r0, #182	; 0xb6
 800f58e:	f003 ffe9 	bl	8013564 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f592:	4620      	mov	r0, r4
 800f594:	f00d fcfe 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f598:	2063      	movs	r0, #99	; 0x63
 800f59a:	f00d fd01 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f59e:	481c      	ldr	r0, [pc, #112]	; (800f610 <GUI_OptionMenuRu+0xd8>)
 800f5a0:	f00d fcf2 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f5a4:	2245      	movs	r2, #69	; 0x45
 800f5a6:	21d2      	movs	r1, #210	; 0xd2
 800f5a8:	20e1      	movs	r0, #225	; 0xe1
 800f5aa:	f00d fdb7 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f5ae:	224c      	movs	r2, #76	; 0x4c
 800f5b0:	21d2      	movs	r1, #210	; 0xd2
 800f5b2:	209b      	movs	r0, #155	; 0x9b
 800f5b4:	f00d fdb2 	bl	801d11c <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f5b8:	23f8      	movs	r3, #248	; 0xf8
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f5c0:	9400      	str	r4, [sp, #0]
 800f5c2:	200a      	movs	r0, #10
 800f5c4:	f00d fa5a 	bl	801ca7c <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f5c8:	f240 1113 	movw	r1, #275	; 0x113
 800f5cc:	200a      	movs	r0, #10
 800f5ce:	f007 fb8b 	bl	8016ce8 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f5d2:	4b10      	ldr	r3, [pc, #64]	; (800f614 <GUI_OptionMenuRu+0xdc>)
 800f5d4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f5d8:	781a      	ldrb	r2, [r3, #0]
 800f5da:	20b6      	movs	r0, #182	; 0xb6
 800f5dc:	f003 ff6c 	bl	80134b8 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f5e0:	f240 1113 	movw	r1, #275	; 0x113
 800f5e4:	20de      	movs	r0, #222	; 0xde
 800f5e6:	f007 febf 	bl	8017368 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f5ea:	f240 1113 	movw	r1, #275	; 0x113
 800f5ee:	208c      	movs	r0, #140	; 0x8c
 800f5f0:	f007 fede 	bl	80173b0 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f5f4:	f240 1339 	movw	r3, #313	; 0x139
 800f5f8:	9400      	str	r4, [sp, #0]
 800f5fa:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f5fe:	4619      	mov	r1, r3
 800f600:	200a      	movs	r0, #10
 800f602:	f00d fa3b 	bl	801ca7c <TFT_DrawLine>
}
 800f606:	b002      	add	sp, #8
 800f608:	bd10      	pop	{r4, pc}
 800f60a:	bf00      	nop
 800f60c:	20000ebc 	.word	0x20000ebc
 800f610:	200001b0 	.word	0x200001b0
 800f614:	20090ac2 	.word	0x20090ac2

0800f618 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800f618:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800f61a:	2158      	movs	r1, #88	; 0x58
 800f61c:	200a      	movs	r0, #10
 800f61e:	f007 ff67 	bl	80174f0 <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800f622:	2158      	movs	r1, #88	; 0x58
 800f624:	207f      	movs	r0, #127	; 0x7f
 800f626:	f007 ffb1 	bl	801758c <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800f62a:	2156      	movs	r1, #86	; 0x56
 800f62c:	20da      	movs	r0, #218	; 0xda
 800f62e:	f003 fffc 	bl	801362a <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f632:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f636:	2378      	movs	r3, #120	; 0x78
 800f638:	4619      	mov	r1, r3
 800f63a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f63e:	9400      	str	r4, [sp, #0]
 800f640:	200a      	movs	r0, #10
 800f642:	f00d fa1b 	bl	801ca7c <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800f646:	2193      	movs	r1, #147	; 0x93
 800f648:	200a      	movs	r0, #10
 800f64a:	f007 ffe7 	bl	801761c <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800f64e:	23b7      	movs	r3, #183	; 0xb7
 800f650:	4619      	mov	r1, r3
 800f652:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f656:	9400      	str	r4, [sp, #0]
 800f658:	200a      	movs	r0, #10
 800f65a:	f00d fa0f 	bl	801ca7c <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800f65e:	21d3      	movs	r1, #211	; 0xd3
 800f660:	200a      	movs	r0, #10
 800f662:	f008 fb29 	bl	8017cb8 <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f666:	4b21      	ldr	r3, [pc, #132]	; (800f6ec <GUI_OptionMenuEn+0xd4>)
 800f668:	21ca      	movs	r1, #202	; 0xca
 800f66a:	781a      	ldrb	r2, [r3, #0]
 800f66c:	20b6      	movs	r0, #182	; 0xb6
 800f66e:	f003 ff79 	bl	8013564 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f672:	4620      	mov	r0, r4
 800f674:	f00d fc8e 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f678:	2063      	movs	r0, #99	; 0x63
 800f67a:	f00d fc91 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f67e:	481c      	ldr	r0, [pc, #112]	; (800f6f0 <GUI_OptionMenuEn+0xd8>)
 800f680:	f00d fc82 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f684:	2245      	movs	r2, #69	; 0x45
 800f686:	21d2      	movs	r1, #210	; 0xd2
 800f688:	20e1      	movs	r0, #225	; 0xe1
 800f68a:	f00d fd47 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f68e:	224c      	movs	r2, #76	; 0x4c
 800f690:	21d2      	movs	r1, #210	; 0xd2
 800f692:	209b      	movs	r0, #155	; 0x9b
 800f694:	f00d fd42 	bl	801d11c <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f698:	23f8      	movs	r3, #248	; 0xf8
 800f69a:	4619      	mov	r1, r3
 800f69c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f6a0:	9400      	str	r4, [sp, #0]
 800f6a2:	200a      	movs	r0, #10
 800f6a4:	f00d f9ea 	bl	801ca7c <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f6a8:	f240 1113 	movw	r1, #275	; 0x113
 800f6ac:	200a      	movs	r0, #10
 800f6ae:	f007 fb1b 	bl	8016ce8 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f6b2:	4b10      	ldr	r3, [pc, #64]	; (800f6f4 <GUI_OptionMenuEn+0xdc>)
 800f6b4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f6b8:	781a      	ldrb	r2, [r3, #0]
 800f6ba:	20b6      	movs	r0, #182	; 0xb6
 800f6bc:	f003 fefc 	bl	80134b8 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f6c0:	f240 1113 	movw	r1, #275	; 0x113
 800f6c4:	20de      	movs	r0, #222	; 0xde
 800f6c6:	f007 fe4f 	bl	8017368 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f6ca:	f240 1113 	movw	r1, #275	; 0x113
 800f6ce:	208c      	movs	r0, #140	; 0x8c
 800f6d0:	f007 fe6e 	bl	80173b0 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f6d4:	f240 1339 	movw	r3, #313	; 0x139
 800f6d8:	9400      	str	r4, [sp, #0]
 800f6da:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f6de:	4619      	mov	r1, r3
 800f6e0:	200a      	movs	r0, #10
 800f6e2:	f00d f9cb 	bl	801ca7c <TFT_DrawLine>
}
 800f6e6:	b002      	add	sp, #8
 800f6e8:	bd10      	pop	{r4, pc}
 800f6ea:	bf00      	nop
 800f6ec:	20000ebc 	.word	0x20000ebc
 800f6f0:	200001b0 	.word	0x200001b0
 800f6f4:	20090ac2 	.word	0x20090ac2

0800f6f8 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800f6f8:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800f6fa:	2084      	movs	r0, #132	; 0x84
 800f6fc:	f00d f81c 	bl	801c738 <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800f700:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800f704:	2050      	movs	r0, #80	; 0x50
 800f706:	f008 fff7 	bl	80186f8 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800f70a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f70e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800f712:	20b4      	movs	r0, #180	; 0xb4
 800f714:	f009 f84a 	bl	80187ac <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800f718:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800f71c:	f8ad 3000 	strh.w	r3, [sp]
 800f720:	23b5      	movs	r3, #181	; 0xb5
 800f722:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f726:	4b08      	ldr	r3, [pc, #32]	; (800f748 <GUI_Title_Screen+0x50>)
 800f728:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800f72a:	ab02      	add	r3, sp, #8
 800f72c:	e913 000c 	ldmdb	r3, {r2, r3}
 800f730:	2164      	movs	r1, #100	; 0x64
 800f732:	2000      	movs	r0, #0
 800f734:	f00d fc01 	bl	801cf3a <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800f738:	4a04      	ldr	r2, [pc, #16]	; (800f74c <GUI_Title_Screen+0x54>)
 800f73a:	7813      	ldrb	r3, [r2, #0]
 800f73c:	f043 0301 	orr.w	r3, r3, #1
 800f740:	7013      	strb	r3, [r2, #0]
}
 800f742:	b003      	add	sp, #12
 800f744:	f85d fb04 	ldr.w	pc, [sp], #4
 800f748:	20055954 	.word	0x20055954
 800f74c:	20005704 	.word	0x20005704

0800f750 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800f750:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800f754:	4da4      	ldr	r5, [pc, #656]	; (800f9e8 <Measure_Elements_Draw+0x298>)
 800f756:	4fa5      	ldr	r7, [pc, #660]	; (800f9ec <Measure_Elements_Draw+0x29c>)
{	
 800f758:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800f75a:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f75c:	2e0e      	cmp	r6, #14
 800f75e:	f200 8099 	bhi.w	800f894 <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800f762:	782b      	ldrb	r3, [r5, #0]
 800f764:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800f766:	2e0c      	cmp	r6, #12
 800f768:	f200 808c 	bhi.w	800f884 <Measure_Elements_Draw+0x134>
 800f76c:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f770:	0035000d 	.word	0x0035000d
 800f774:	0060004c 	.word	0x0060004c
 800f778:	00ba0095 	.word	0x00ba0095
 800f77c:	00fc00d2 	.word	0x00fc00d2
 800f780:	01680124 	.word	0x01680124
 800f784:	019a0183 	.word	0x019a0183
 800f788:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800f78a:	4a99      	ldr	r2, [pc, #612]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f78c:	8812      	ldrh	r2, [r2, #0]
 800f78e:	07d2      	lsls	r2, r2, #31
 800f790:	d578      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f792:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f796:	f280 81b9 	bge.w	800fb0c <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f79a:	4b96      	ldr	r3, [pc, #600]	; (800f9f4 <Measure_Elements_Draw+0x2a4>)
 800f79c:	4996      	ldr	r1, [pc, #600]	; (800f9f8 <Measure_Elements_Draw+0x2a8>)
 800f79e:	781a      	ldrb	r2, [r3, #0]
 800f7a0:	4b96      	ldr	r3, [pc, #600]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f7a2:	4897      	ldr	r0, [pc, #604]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	b17a      	cbz	r2, 800f7c8 <Measure_Elements_Draw+0x78>
 800f7a8:	7802      	ldrb	r2, [r0, #0]
 800f7aa:	9200      	str	r2, [sp, #0]
 800f7ac:	ed91 0a00 	vldr	s0, [r1]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f7b4:	2014      	movs	r0, #20
 800f7b6:	f004 f859 	bl	801386c <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800f7ba:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f7be:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800f7c2:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f7c4:	9200      	str	r2, [sp, #0]
 800f7c6:	e085      	b.n	800f8d4 <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f7c8:	7800      	ldrb	r0, [r0, #0]
 800f7ca:	9000      	str	r0, [sp, #0]
 800f7cc:	ed91 0a00 	vldr	s0, [r1]
 800f7d0:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f7d2:	2014      	movs	r0, #20
 800f7d4:	f004 fac8 	bl	8013d68 <GUI_Text_L_Measure>
 800f7d8:	e7ef      	b.n	800f7ba <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800f7da:	4a85      	ldr	r2, [pc, #532]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f7dc:	8812      	ldrh	r2, [r2, #0]
 800f7de:	0790      	lsls	r0, r2, #30
 800f7e0:	d550      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f7e2:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f7e6:	f280 8191 	bge.w	800fb0c <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f7ea:	4b82      	ldr	r3, [pc, #520]	; (800f9f4 <Measure_Elements_Draw+0x2a4>)
 800f7ec:	4a84      	ldr	r2, [pc, #528]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f7ee:	7818      	ldrb	r0, [r3, #0]
 800f7f0:	4b82      	ldr	r3, [pc, #520]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f7f2:	4984      	ldr	r1, [pc, #528]	; (800fa04 <Measure_Elements_Draw+0x2b4>)
 800f7f4:	7812      	ldrb	r2, [r2, #0]
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	9200      	str	r2, [sp, #0]
 800f7fa:	ed91 0a00 	vldr	s0, [r1]
 800f7fe:	2201      	movs	r2, #1
 800f800:	4621      	mov	r1, r4
 800f802:	2800      	cmp	r0, #0
 800f804:	d0e5      	beq.n	800f7d2 <Measure_Elements_Draw+0x82>
 800f806:	e7d5      	b.n	800f7b4 <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800f808:	4a79      	ldr	r2, [pc, #484]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f80a:	8812      	ldrh	r2, [r2, #0]
 800f80c:	0751      	lsls	r1, r2, #29
 800f80e:	d539      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f810:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f814:	f280 817a 	bge.w	800fb0c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800f818:	497b      	ldr	r1, [pc, #492]	; (800fa08 <Measure_Elements_Draw+0x2b8>)
 800f81a:	4b79      	ldr	r3, [pc, #484]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f81c:	4a77      	ldr	r2, [pc, #476]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f81e:	ed91 0a00 	vldr	s0, [r1]
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	7812      	ldrb	r2, [r2, #0]
 800f826:	4621      	mov	r1, r4
 800f828:	2014      	movs	r0, #20
 800f82a:	f004 fcdf 	bl	80141ec <GUI_Text_PPF_Measure>
 800f82e:	e7c4      	b.n	800f7ba <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800f830:	4a6f      	ldr	r2, [pc, #444]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f832:	8812      	ldrh	r2, [r2, #0]
 800f834:	0712      	lsls	r2, r2, #28
 800f836:	d525      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800f838:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800f83c:	f280 8166 	bge.w	800fb0c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800f840:	4972      	ldr	r1, [pc, #456]	; (800fa0c <Measure_Elements_Draw+0x2bc>)
 800f842:	4b6f      	ldr	r3, [pc, #444]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f844:	edd1 1a00 	vldr	s3, [r1]
 800f848:	4971      	ldr	r1, [pc, #452]	; (800fa10 <Measure_Elements_Draw+0x2c0>)
 800f84a:	4a6c      	ldr	r2, [pc, #432]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f84c:	ed91 1a00 	vldr	s2, [r1]
 800f850:	4970      	ldr	r1, [pc, #448]	; (800fa14 <Measure_Elements_Draw+0x2c4>)
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	edd1 0a00 	vldr	s1, [r1]
 800f858:	496f      	ldr	r1, [pc, #444]	; (800fa18 <Measure_Elements_Draw+0x2c8>)
 800f85a:	7812      	ldrb	r2, [r2, #0]
 800f85c:	ed91 0a00 	vldr	s0, [r1]
 800f860:	2014      	movs	r0, #20
 800f862:	4621      	mov	r1, r4
 800f864:	f004 fe44 	bl	80144f0 <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800f868:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800f86c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f86e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f872:	9200      	str	r2, [sp, #0]
 800f874:	4619      	mov	r1, r3
 800f876:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f87a:	200a      	movs	r0, #10
 800f87c:	f00d f8fe 	bl	801ca7c <TFT_DrawLine>
									Y+=10;
 800f880:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800f882:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800f884:	782b      	ldrb	r3, [r5, #0]
 800f886:	783a      	ldrb	r2, [r7, #0]
 800f888:	429a      	cmp	r2, r3
 800f88a:	f000 8142 	beq.w	800fb12 <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800f88e:	4a63      	ldr	r2, [pc, #396]	; (800fa1c <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800f890:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800f892:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800f894:	b004      	add	sp, #16
 800f896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800f89a:	4a55      	ldr	r2, [pc, #340]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f89c:	8812      	ldrh	r2, [r2, #0]
 800f89e:	05d0      	lsls	r0, r2, #23
 800f8a0:	d5f0      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f8a2:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f8a6:	f280 8131 	bge.w	800fb0c <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800f8aa:	4b5d      	ldr	r3, [pc, #372]	; (800fa20 <Measure_Elements_Draw+0x2d0>)
 800f8ac:	4954      	ldr	r1, [pc, #336]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f8ae:	881a      	ldrh	r2, [r3, #0]
 800f8b0:	4b52      	ldr	r3, [pc, #328]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f8b2:	7809      	ldrb	r1, [r1, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	9100      	str	r1, [sp, #0]
 800f8b8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800f8bc:	4542      	cmp	r2, r8
 800f8be:	bf08      	it	eq
 800f8c0:	2200      	moveq	r2, #0
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	2014      	movs	r0, #20
 800f8c6:	f005 fd45 	bl	8015354 <GUI_Text_CCT_Measure>
									Y+=35;
 800f8ca:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800f8ce:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f8d0:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f8d4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f8d8:	4619      	mov	r1, r3
 800f8da:	200a      	movs	r0, #10
 800f8dc:	f00d f8ce 	bl	801ca7c <TFT_DrawLine>
									Y+=10;
 800f8e0:	342d      	adds	r4, #45	; 0x2d
 800f8e2:	e7ce      	b.n	800f882 <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f8e4:	4a42      	ldr	r2, [pc, #264]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f8e6:	8812      	ldrh	r2, [r2, #0]
 800f8e8:	0511      	lsls	r1, r2, #20
 800f8ea:	d5cb      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f8ec:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f8f0:	f280 810c 	bge.w	800fb0c <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f8f4:	4b4b      	ldr	r3, [pc, #300]	; (800fa24 <Measure_Elements_Draw+0x2d4>)
 800f8f6:	4a41      	ldr	r2, [pc, #260]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f8f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8fc:	7812      	ldrb	r2, [r2, #0]
 800f8fe:	ee00 3a10 	vmov	s0, r3
 800f902:	4b3f      	ldr	r3, [pc, #252]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f904:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	4621      	mov	r1, r4
 800f90c:	2014      	movs	r0, #20
 800f90e:	f005 ff19 	bl	8015744 <GUI_Text_deltaE_Measure>
 800f912:	e752      	b.n	800f7ba <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f914:	4a36      	ldr	r2, [pc, #216]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f916:	8812      	ldrh	r2, [r2, #0]
 800f918:	06d2      	lsls	r2, r2, #27
 800f91a:	d5b3      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f91c:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f920:	f280 80f4 	bge.w	800fb0c <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f924:	4b40      	ldr	r3, [pc, #256]	; (800fa28 <Measure_Elements_Draw+0x2d8>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	b9e3      	cbnz	r3, 800f964 <Measure_Elements_Draw+0x214>
 800f92a:	4940      	ldr	r1, [pc, #256]	; (800fa2c <Measure_Elements_Draw+0x2dc>)
 800f92c:	4834      	ldr	r0, [pc, #208]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f92e:	880a      	ldrh	r2, [r1, #0]
 800f930:	7800      	ldrb	r0, [r0, #0]
 800f932:	884b      	ldrh	r3, [r1, #2]
 800f934:	8889      	ldrh	r1, [r1, #4]
 800f936:	9002      	str	r0, [sp, #8]
 800f938:	4830      	ldr	r0, [pc, #192]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f93a:	7800      	ldrb	r0, [r0, #0]
 800f93c:	9001      	str	r0, [sp, #4]
 800f93e:	9100      	str	r1, [sp, #0]
 800f940:	2014      	movs	r0, #20
 800f942:	4621      	mov	r1, r4
 800f944:	f005 f9d4 	bl	8014cf0 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f948:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f94c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f94e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f952:	9200      	str	r2, [sp, #0]
 800f954:	4619      	mov	r1, r3
 800f956:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f95a:	200a      	movs	r0, #10
 800f95c:	f00d f88e 	bl	801ca7c <TFT_DrawLine>
									Y+=10;
 800f960:	3473      	adds	r4, #115	; 0x73
 800f962:	e78e      	b.n	800f882 <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f964:	4932      	ldr	r1, [pc, #200]	; (800fa30 <Measure_Elements_Draw+0x2e0>)
 800f966:	e7e1      	b.n	800f92c <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f968:	4a21      	ldr	r2, [pc, #132]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f96a:	8812      	ldrh	r2, [r2, #0]
 800f96c:	0690      	lsls	r0, r2, #26
 800f96e:	d589      	bpl.n	800f884 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f970:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f974:	f300 80ca 	bgt.w	800fb0c <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f978:	4b2b      	ldr	r3, [pc, #172]	; (800fa28 <Measure_Elements_Draw+0x2d8>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	b9d3      	cbnz	r3, 800f9b4 <Measure_Elements_Draw+0x264>
 800f97e:	4b2d      	ldr	r3, [pc, #180]	; (800fa34 <Measure_Elements_Draw+0x2e4>)
 800f980:	ed93 0a00 	vldr	s0, [r3]
 800f984:	edd3 0a01 	vldr	s1, [r3, #4]
 800f988:	4a1c      	ldr	r2, [pc, #112]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f98a:	4b1d      	ldr	r3, [pc, #116]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f98c:	7812      	ldrb	r2, [r2, #0]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	4621      	mov	r1, r4
 800f992:	2014      	movs	r0, #20
 800f994:	f005 fb3a 	bl	801500c <GUI_Text_xy_Measure>
									Y+=70;
 800f998:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f99c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f99e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9a2:	9200      	str	r2, [sp, #0]
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f9aa:	200a      	movs	r0, #10
 800f9ac:	f00d f866 	bl	801ca7c <TFT_DrawLine>
									Y+=10;
 800f9b0:	3450      	adds	r4, #80	; 0x50
 800f9b2:	e766      	b.n	800f882 <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f9b4:	4b20      	ldr	r3, [pc, #128]	; (800fa38 <Measure_Elements_Draw+0x2e8>)
 800f9b6:	e7e3      	b.n	800f980 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f9b8:	4a0d      	ldr	r2, [pc, #52]	; (800f9f0 <Measure_Elements_Draw+0x2a0>)
 800f9ba:	8812      	ldrh	r2, [r2, #0]
 800f9bc:	0651      	lsls	r1, r2, #25
 800f9be:	f57f af61 	bpl.w	800f884 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f9c2:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f9c6:	f300 80a1 	bgt.w	800fb0c <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f9ca:	491c      	ldr	r1, [pc, #112]	; (800fa3c <Measure_Elements_Draw+0x2ec>)
 800f9cc:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <Measure_Elements_Draw+0x2b0>)
 800f9ce:	4a0b      	ldr	r2, [pc, #44]	; (800f9fc <Measure_Elements_Draw+0x2ac>)
 800f9d0:	edd1 0a01 	vldr	s1, [r1, #4]
 800f9d4:	ed91 0a00 	vldr	s0, [r1]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	7812      	ldrb	r2, [r2, #0]
 800f9dc:	4621      	mov	r1, r4
 800f9de:	2014      	movs	r0, #20
 800f9e0:	f005 fbd6 	bl	8015190 <GUI_Text_uv_Measure>
 800f9e4:	e7d8      	b.n	800f998 <Measure_Elements_Draw+0x248>
 800f9e6:	bf00      	nop
 800f9e8:	2000572b 	.word	0x2000572b
 800f9ec:	2000572c 	.word	0x2000572c
 800f9f0:	20005706 	.word	0x20005706
 800f9f4:	20000ebc 	.word	0x20000ebc
 800f9f8:	20095d30 	.word	0x20095d30
 800f9fc:	20000ec0 	.word	0x20000ec0
 800fa00:	20000ebf 	.word	0x20000ebf
 800fa04:	20095720 	.word	0x20095720
 800fa08:	20095728 	.word	0x20095728
 800fa0c:	20095724 	.word	0x20095724
 800fa10:	2009580c 	.word	0x2009580c
 800fa14:	20095b90 	.word	0x20095b90
 800fa18:	20095aa4 	.word	0x20095aa4
 800fa1c:	20005730 	.word	0x20005730
 800fa20:	20054940 	.word	0x20054940
 800fa24:	20090abe 	.word	0x20090abe
 800fa28:	20005704 	.word	0x20005704
 800fa2c:	2008f528 	.word	0x2008f528
 800fa30:	2008f522 	.word	0x2008f522
 800fa34:	2008f548 	.word	0x2008f548
 800fa38:	2008f540 	.word	0x2008f540
 800fa3c:	2008f538 	.word	0x2008f538
				case 9: if(Measure_Field&CIE_Lab){
 800fa40:	4a35      	ldr	r2, [pc, #212]	; (800fb18 <Measure_Elements_Draw+0x3c8>)
 800fa42:	8812      	ldrh	r2, [r2, #0]
 800fa44:	0612      	lsls	r2, r2, #24
 800fa46:	f57f af1d 	bpl.w	800f884 <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800fa4a:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800fa4e:	da5d      	bge.n	800fb0c <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800fa50:	4832      	ldr	r0, [pc, #200]	; (800fb1c <Measure_Elements_Draw+0x3cc>)
 800fa52:	4933      	ldr	r1, [pc, #204]	; (800fb20 <Measure_Elements_Draw+0x3d0>)
 800fa54:	7800      	ldrb	r0, [r0, #0]
 800fa56:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800fa5a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800fa5e:	9002      	str	r0, [sp, #8]
 800fa60:	4830      	ldr	r0, [pc, #192]	; (800fb24 <Measure_Elements_Draw+0x3d4>)
 800fa62:	7800      	ldrb	r0, [r0, #0]
 800fa64:	9001      	str	r0, [sp, #4]
 800fa66:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800fa6a:	9100      	str	r1, [sp, #0]
 800fa6c:	2014      	movs	r0, #20
 800fa6e:	4621      	mov	r1, r4
 800fa70:	f006 fb46 	bl	8016100 <GUI_Text_LAB_Measure>
 800fa74:	e768      	b.n	800f948 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800fa76:	4a28      	ldr	r2, [pc, #160]	; (800fb18 <Measure_Elements_Draw+0x3c8>)
 800fa78:	8812      	ldrh	r2, [r2, #0]
 800fa7a:	0590      	lsls	r0, r2, #22
 800fa7c:	f57f af02 	bpl.w	800f884 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800fa80:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800fa84:	da42      	bge.n	800fb0c <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800fa86:	4b28      	ldr	r3, [pc, #160]	; (800fb28 <Measure_Elements_Draw+0x3d8>)
 800fa88:	4a26      	ldr	r2, [pc, #152]	; (800fb24 <Measure_Elements_Draw+0x3d4>)
 800fa8a:	881b      	ldrh	r3, [r3, #0]
 800fa8c:	7812      	ldrb	r2, [r2, #0]
 800fa8e:	ee00 3a10 	vmov	s0, r3
 800fa92:	4b22      	ldr	r3, [pc, #136]	; (800fb1c <Measure_Elements_Draw+0x3cc>)
 800fa94:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	2014      	movs	r0, #20
 800fa9e:	f005 fd53 	bl	8015548 <GUI_Text_lambdaD_Measure>
 800faa2:	e68a      	b.n	800f7ba <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800faa4:	4a1c      	ldr	r2, [pc, #112]	; (800fb18 <Measure_Elements_Draw+0x3c8>)
 800faa6:	8812      	ldrh	r2, [r2, #0]
 800faa8:	04d1      	lsls	r1, r2, #19
 800faaa:	f57f aeeb 	bpl.w	800f884 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800faae:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800fab2:	dc2b      	bgt.n	800fb0c <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800fab4:	4b1d      	ldr	r3, [pc, #116]	; (800fb2c <Measure_Elements_Draw+0x3dc>)
 800fab6:	481e      	ldr	r0, [pc, #120]	; (800fb30 <Measure_Elements_Draw+0x3e0>)
 800fab8:	491e      	ldr	r1, [pc, #120]	; (800fb34 <Measure_Elements_Draw+0x3e4>)
 800faba:	f893 e000 	ldrb.w	lr, [r3]
 800fabe:	4a19      	ldr	r2, [pc, #100]	; (800fb24 <Measure_Elements_Draw+0x3d4>)
 800fac0:	4b16      	ldr	r3, [pc, #88]	; (800fb1c <Measure_Elements_Draw+0x3cc>)
 800fac2:	edd0 0a00 	vldr	s1, [r0]
 800fac6:	ed91 0a00 	vldr	s0, [r1]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	7812      	ldrb	r2, [r2, #0]
 800face:	4621      	mov	r1, r4
 800fad0:	2014      	movs	r0, #20
 800fad2:	f1be 0f00 	cmp.w	lr, #0
 800fad6:	d002      	beq.n	800fade <Measure_Elements_Draw+0x38e>
 800fad8:	f005 ff38 	bl	801594c <GUI_Text_EbEr_Measure>
 800fadc:	e75c      	b.n	800f998 <Measure_Elements_Draw+0x248>
 800fade:	f006 f8bd 	bl	8015c5c <GUI_Text_LbLr_Measure>
 800fae2:	e759      	b.n	800f998 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800fae4:	4a0c      	ldr	r2, [pc, #48]	; (800fb18 <Measure_Elements_Draw+0x3c8>)
 800fae6:	8812      	ldrh	r2, [r2, #0]
 800fae8:	0492      	lsls	r2, r2, #18
 800faea:	f57f aecb 	bpl.w	800f884 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800faee:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800faf2:	da0b      	bge.n	800fb0c <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800faf4:	4910      	ldr	r1, [pc, #64]	; (800fb38 <Measure_Elements_Draw+0x3e8>)
 800faf6:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <Measure_Elements_Draw+0x3cc>)
 800faf8:	4a0a      	ldr	r2, [pc, #40]	; (800fb24 <Measure_Elements_Draw+0x3d4>)
 800fafa:	ed91 0a00 	vldr	s0, [r1]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	7812      	ldrb	r2, [r2, #0]
 800fb02:	4621      	mov	r1, r4
 800fb04:	2014      	movs	r0, #20
 800fb06:	f006 fa35 	bl	8015f74 <GUI_Text_S_P_Measure>
 800fb0a:	e656      	b.n	800f7ba <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	702b      	strb	r3, [r5, #0]
 800fb10:	e6b8      	b.n	800f884 <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800fb12:	3601      	adds	r6, #1
 800fb14:	b2f6      	uxtb	r6, r6
 800fb16:	e621      	b.n	800f75c <Measure_Elements_Draw+0xc>
 800fb18:	20005706 	.word	0x20005706
 800fb1c:	20000ebf 	.word	0x20000ebf
 800fb20:	2008f51c 	.word	0x2008f51c
 800fb24:	20000ec0 	.word	0x20000ec0
 800fb28:	20095b8c 	.word	0x20095b8c
 800fb2c:	20000ebc 	.word	0x20000ebc
 800fb30:	20095ca4 	.word	0x20095ca4
 800fb34:	20095ca0 	.word	0x20095ca0
 800fb38:	20095808 	.word	0x20095808

0800fb3c <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800fb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fb3e:	4b1e      	ldr	r3, [pc, #120]	; (800fbb8 <GUI_Information_Screen+0x7c>)
 800fb40:	4a1e      	ldr	r2, [pc, #120]	; (800fbbc <GUI_Information_Screen+0x80>)
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	7812      	ldrb	r2, [r2, #0]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d034      	beq.n	800fbb4 <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fb4a:	2063      	movs	r0, #99	; 0x63
 800fb4c:	f00c fdf4 	bl	801c738 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800fb50:	4b1b      	ldr	r3, [pc, #108]	; (800fbc0 <GUI_Information_Screen+0x84>)
 800fb52:	491c      	ldr	r1, [pc, #112]	; (800fbc4 <GUI_Information_Screen+0x88>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	4a1c      	ldr	r2, [pc, #112]	; (800fbc8 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800fb58:	8809      	ldrh	r1, [r1, #0]
 800fb5a:	7812      	ldrb	r2, [r2, #0]
 800fb5c:	4d1b      	ldr	r5, [pc, #108]	; (800fbcc <GUI_Information_Screen+0x90>)
 800fb5e:	4c1c      	ldr	r4, [pc, #112]	; (800fbd0 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	4b1c      	ldr	r3, [pc, #112]	; (800fbd4 <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	9100      	str	r1, [sp, #0]
 800fb68:	f04f 0100 	mov.w	r1, #0
 800fb6c:	4608      	mov	r0, r1
		if(Language_status == En){
 800fb6e:	d110      	bne.n	800fb92 <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800fb70:	f008 fc56 	bl	8018420 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800fb74:	2100      	movs	r1, #0
 800fb76:	4608      	mov	r0, r1
 800fb78:	882b      	ldrh	r3, [r5, #0]
 800fb7a:	8822      	ldrh	r2, [r4, #0]
 800fb7c:	f008 fcd2 	bl	8018524 <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800fb80:	2100      	movs	r1, #0
 800fb82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb86:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800fb88:	b003      	add	sp, #12
 800fb8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800fb8e:	f008 bd3f 	b.w	8018610 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800fb92:	f009 f92b 	bl	8018dec <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800fb96:	2100      	movs	r1, #0
 800fb98:	4608      	mov	r0, r1
 800fb9a:	882b      	ldrh	r3, [r5, #0]
 800fb9c:	8822      	ldrh	r2, [r4, #0]
 800fb9e:	f009 f9e3 	bl	8018f68 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800fba2:	2100      	movs	r1, #0
 800fba4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fba8:	4608      	mov	r0, r1
}
 800fbaa:	b003      	add	sp, #12
 800fbac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800fbb0:	f009 ba54 	b.w	801905c <GUI_TextRu_Info_Ver>
}
 800fbb4:	b003      	add	sp, #12
 800fbb6:	bd30      	pop	{r4, r5, pc}
 800fbb8:	2000022a 	.word	0x2000022a
 800fbbc:	20005701 	.word	0x20005701
 800fbc0:	20005703 	.word	0x20005703
 800fbc4:	200959b0 	.word	0x200959b0
 800fbc8:	20095718 	.word	0x20095718
 800fbcc:	20095ab8 	.word	0x20095ab8
 800fbd0:	2009571c 	.word	0x2009571c
 800fbd4:	2009572c 	.word	0x2009572c

0800fbd8 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800fbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800fbda:	4b29      	ldr	r3, [pc, #164]	; (800fc80 <GUI_SD_Write_Screen+0xa8>)
 800fbdc:	4d29      	ldr	r5, [pc, #164]	; (800fc84 <GUI_SD_Write_Screen+0xac>)
 800fbde:	781a      	ldrb	r2, [r3, #0]
 800fbe0:	7829      	ldrb	r1, [r5, #0]
 800fbe2:	4291      	cmp	r1, r2
 800fbe4:	d020      	beq.n	800fc28 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800fbe6:	4b28      	ldr	r3, [pc, #160]	; (800fc88 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800fbe8:	4c28      	ldr	r4, [pc, #160]	; (800fc8c <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800fbea:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fbec:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800fbee:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fbf0:	f00c fda2 	bl	801c738 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800fbf4:	7822      	ldrb	r2, [r4, #0]
 800fbf6:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800fbf8:	f04f 0178 	mov.w	r1, #120	; 0x78
 800fbfc:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800fc00:	d13a      	bne.n	800fc78 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800fc02:	f008 fbd3 	bl	80183ac <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800fc06:	4b22      	ldr	r3, [pc, #136]	; (800fc90 <GUI_SD_Write_Screen+0xb8>)
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	b96b      	cbnz	r3, 800fc28 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800fc0c:	f00a fce0 	bl	801a5d0 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800fc10:	7821      	ldrb	r1, [r4, #0]
 800fc12:	4c20      	ldr	r4, [pc, #128]	; (800fc94 <GUI_SD_Write_Screen+0xbc>)
 800fc14:	4b20      	ldr	r3, [pc, #128]	; (800fc98 <GUI_SD_Write_Screen+0xc0>)
 800fc16:	4a21      	ldr	r2, [pc, #132]	; (800fc9c <GUI_SD_Write_Screen+0xc4>)
 800fc18:	4821      	ldr	r0, [pc, #132]	; (800fca0 <GUI_SD_Write_Screen+0xc8>)
 800fc1a:	7824      	ldrb	r4, [r4, #0]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	7812      	ldrb	r2, [r2, #0]
 800fc20:	8800      	ldrh	r0, [r0, #0]
 800fc22:	9400      	str	r4, [sp, #0]
 800fc24:	f00a fdc8 	bl	801a7b8 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800fc28:	4c1e      	ldr	r4, [pc, #120]	; (800fca4 <GUI_SD_Write_Screen+0xcc>)
 800fc2a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fc2e:	f7f0 ffef 	bl	8000c10 <__aeabi_d2f>
 800fc32:	f44f 718c 	mov.w	r1, #280	; 0x118
 800fc36:	ee00 0a10 	vmov	s0, r0
 800fc3a:	2055      	movs	r0, #85	; 0x55
 800fc3c:	f003 fde6 	bl	801380c <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800fc40:	2200      	movs	r2, #0
 800fc42:	4b19      	ldr	r3, [pc, #100]	; (800fca8 <GUI_SD_Write_Screen+0xd0>)
 800fc44:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fc48:	f7f0 ff52 	bl	8000af0 <__aeabi_dcmpeq>
 800fc4c:	b190      	cbz	r0, 800fc74 <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800fc4e:	4b14      	ldr	r3, [pc, #80]	; (800fca0 <GUI_SD_Write_Screen+0xc8>)
 800fc50:	881a      	ldrh	r2, [r3, #0]
 800fc52:	f240 31e6 	movw	r1, #998	; 0x3e6
 800fc56:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800fc58:	bf94      	ite	ls
 800fc5a:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800fc5c:	2200      	movhi	r2, #0
 800fc5e:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800fc60:	8818      	ldrh	r0, [r3, #0]
 800fc62:	2100      	movs	r1, #0
 800fc64:	f00a fba4 	bl	801a3b0 <WriteSDFLASH_t>
			pause = 0; 
 800fc68:	4b07      	ldr	r3, [pc, #28]	; (800fc88 <GUI_SD_Write_Screen+0xb0>)
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800fc6e:	4b0f      	ldr	r3, [pc, #60]	; (800fcac <GUI_SD_Write_Screen+0xd4>)
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	702b      	strb	r3, [r5, #0]
	}

}
 800fc74:	b003      	add	sp, #12
 800fc76:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800fc78:	f009 f936 	bl	8018ee8 <GUI_TextRu_WriteSD>
 800fc7c:	e7c3      	b.n	800fc06 <GUI_SD_Write_Screen+0x2e>
 800fc7e:	bf00      	nop
 800fc80:	2000022a 	.word	0x2000022a
 800fc84:	20005701 	.word	0x20005701
 800fc88:	20005728 	.word	0x20005728
 800fc8c:	20005703 	.word	0x20005703
 800fc90:	20095c5c 	.word	0x20095c5c
 800fc94:	200056fc 	.word	0x200056fc
 800fc98:	20000ebc 	.word	0x20000ebc
 800fc9c:	20000228 	.word	0x20000228
 800fca0:	2000572e 	.word	0x2000572e
 800fca4:	20009760 	.word	0x20009760
 800fca8:	3ff00000 	.word	0x3ff00000
 800fcac:	20090abd 	.word	0x20090abd

0800fcb0 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800fcb0:	4b0f      	ldr	r3, [pc, #60]	; (800fcf0 <GUI_Up_Panel+0x40>)
{
 800fcb2:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	ed93 0b00 	vldr	d0, [r3]
 800fcba:	4608      	mov	r0, r1
 800fcbc:	f006 fc1c 	bl	80164f8 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800fcc0:	4b0c      	ldr	r3, [pc, #48]	; (800fcf4 <GUI_Up_Panel+0x44>)
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d106      	bne.n	800fcd6 <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800fcc8:	2102      	movs	r1, #2
 800fcca:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800fccc:	b003      	add	sp, #12
 800fcce:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800fcd2:	f002 be03 	b.w	80128dc <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800fcd6:	2363      	movs	r3, #99	; 0x63
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fcde:	2323      	movs	r3, #35	; 0x23
 800fce0:	2101      	movs	r1, #1
 800fce2:	20ef      	movs	r0, #239	; 0xef
 800fce4:	f00c ff27 	bl	801cb36 <TFT_FillRectangle>
}
 800fce8:	b003      	add	sp, #12
 800fcea:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcee:	bf00      	nop
 800fcf0:	200905c8 	.word	0x200905c8
 800fcf4:	20090ac2 	.word	0x20090ac2

0800fcf8 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800fcf8:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800fcfa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fcfe:	2001      	movs	r0, #1
 800fd00:	f002 fe3e 	bl	8012980 <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800fd04:	4b1b      	ldr	r3, [pc, #108]	; (800fd74 <GUI_Down_Panel+0x7c>)
 800fd06:	781a      	ldrb	r2, [r3, #0]
 800fd08:	fab2 f282 	clz	r2, r2
 800fd0c:	0952      	lsrs	r2, r2, #5
 800fd0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd12:	2037      	movs	r0, #55	; 0x37
 800fd14:	f002 ffee 	bl	8012cf4 <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800fd18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd1c:	206d      	movs	r0, #109	; 0x6d
 800fd1e:	f003 f8b5 	bl	8012e8c <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800fd22:	4b15      	ldr	r3, [pc, #84]	; (800fd78 <GUI_Down_Panel+0x80>)
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	2b06      	cmp	r3, #6
 800fd28:	d90b      	bls.n	800fd42 <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800fd2a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd2e:	20a3      	movs	r0, #163	; 0xa3
 800fd30:	f002 fe64 	bl	80129fc <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800fd34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd38:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800fd3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800fd3e:	f002 bf36 	b.w	8012bae <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800fd42:	2b03      	cmp	r3, #3
 800fd44:	d810      	bhi.n	800fd68 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800fd46:	4b0d      	ldr	r3, [pc, #52]	; (800fd7c <GUI_Down_Panel+0x84>)
 800fd48:	781a      	ldrb	r2, [r3, #0]
 800fd4a:	3200      	adds	r2, #0
 800fd4c:	bf18      	it	ne
 800fd4e:	2201      	movne	r2, #1
 800fd50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd54:	20a3      	movs	r0, #163	; 0xa3
 800fd56:	f002 fe96 	bl	8012a86 <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800fd5a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd5e:	20d9      	movs	r0, #217	; 0xd9
}
 800fd60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800fd64:	f002 bed9 	b.w	8012b1a <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800fd68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd6c:	20a3      	movs	r0, #163	; 0xa3
 800fd6e:	f002 ff4c 	bl	8012c0a <GUI_Button_TFT_Rotate>
 800fd72:	e7f2      	b.n	800fd5a <GUI_Down_Panel+0x62>
 800fd74:	20095c5c 	.word	0x20095c5c
 800fd78:	20005701 	.word	0x20005701
 800fd7c:	2000572b 	.word	0x2000572b

0800fd80 <GUI_Panels>:

void GUI_Panels()
{
 800fd80:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800fd82:	4b1c      	ldr	r3, [pc, #112]	; (800fdf4 <GUI_Panels+0x74>)
 800fd84:	781a      	ldrb	r2, [r3, #0]
 800fd86:	2a01      	cmp	r2, #1
 800fd88:	d121      	bne.n	800fdce <GUI_Panels+0x4e>
 800fd8a:	4b1b      	ldr	r3, [pc, #108]	; (800fdf8 <GUI_Panels+0x78>)
 800fd8c:	7819      	ldrb	r1, [r3, #0]
 800fd8e:	2902      	cmp	r1, #2
 800fd90:	d125      	bne.n	800fdde <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b03      	cmp	r3, #3
 800fd96:	d122      	bne.n	800fdde <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800fd98:	4b17      	ldr	r3, [pc, #92]	; (800fdf8 <GUI_Panels+0x78>)
 800fd9a:	7819      	ldrb	r1, [r3, #0]
 800fd9c:	2906      	cmp	r1, #6
 800fd9e:	d901      	bls.n	800fda4 <GUI_Panels+0x24>
 800fda0:	2a06      	cmp	r2, #6
 800fda2:	d91c      	bls.n	800fdde <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800fda4:	7819      	ldrb	r1, [r3, #0]
 800fda6:	2911      	cmp	r1, #17
 800fda8:	d019      	beq.n	800fdde <GUI_Panels+0x5e>
 800fdaa:	2a06      	cmp	r2, #6
 800fdac:	d102      	bne.n	800fdb4 <GUI_Panels+0x34>
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	2b05      	cmp	r3, #5
 800fdb2:	d914      	bls.n	800fdde <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800fdb4:	2363      	movs	r3, #99	; 0x63
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	f240 120f 	movw	r2, #271	; 0x10f
 800fdbc:	f240 13a9 	movw	r3, #425	; 0x1a9
 800fdc0:	2128      	movs	r1, #40	; 0x28
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	f00c feb7 	bl	801cb36 <TFT_FillRectangle>
	}
}
 800fdc8:	b003      	add	sp, #12
 800fdca:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800fdce:	2a04      	cmp	r2, #4
 800fdd0:	d005      	beq.n	800fdde <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800fdd2:	2a06      	cmp	r2, #6
 800fdd4:	d9e0      	bls.n	800fd98 <GUI_Panels+0x18>
 800fdd6:	4b08      	ldr	r3, [pc, #32]	; (800fdf8 <GUI_Panels+0x78>)
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	2b06      	cmp	r3, #6
 800fddc:	d8dc      	bhi.n	800fd98 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fdde:	2063      	movs	r0, #99	; 0x63
 800fde0:	f00c fcaa 	bl	801c738 <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800fde4:	f7ff ff64 	bl	800fcb0 <GUI_Up_Panel>
}
 800fde8:	b003      	add	sp, #12
 800fdea:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800fdee:	f7ff bf83 	b.w	800fcf8 <GUI_Down_Panel>
 800fdf2:	bf00      	nop
 800fdf4:	20005701 	.word	0x20005701
 800fdf8:	2000022a 	.word	0x2000022a

0800fdfc <GUI_DataSet1_Screen>:
{
 800fdfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800fdfe:	4b28      	ldr	r3, [pc, #160]	; (800fea0 <GUI_DataSet1_Screen+0xa4>)
 800fe00:	4c28      	ldr	r4, [pc, #160]	; (800fea4 <GUI_DataSet1_Screen+0xa8>)
 800fe02:	4d29      	ldr	r5, [pc, #164]	; (800fea8 <GUI_DataSet1_Screen+0xac>)
 800fe04:	2202      	movs	r2, #2
 800fe06:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800fe08:	4b28      	ldr	r3, [pc, #160]	; (800feac <GUI_DataSet1_Screen+0xb0>)
 800fe0a:	4a29      	ldr	r2, [pc, #164]	; (800feb0 <GUI_DataSet1_Screen+0xb4>)
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	7812      	ldrb	r2, [r2, #0]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	4a28      	ldr	r2, [pc, #160]	; (800feb4 <GUI_DataSet1_Screen+0xb8>)
 800fe14:	4b28      	ldr	r3, [pc, #160]	; (800feb8 <GUI_DataSet1_Screen+0xbc>)
 800fe16:	d107      	bne.n	800fe28 <GUI_DataSet1_Screen+0x2c>
 800fe18:	7810      	ldrb	r0, [r2, #0]
 800fe1a:	7821      	ldrb	r1, [r4, #0]
 800fe1c:	4288      	cmp	r0, r1
 800fe1e:	d103      	bne.n	800fe28 <GUI_DataSet1_Screen+0x2c>
 800fe20:	7818      	ldrb	r0, [r3, #0]
 800fe22:	7829      	ldrb	r1, [r5, #0]
 800fe24:	4288      	cmp	r0, r1
 800fe26:	d027      	beq.n	800fe78 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800fe28:	7821      	ldrb	r1, [r4, #0]
 800fe2a:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800fe2c:	782a      	ldrb	r2, [r5, #0]
 800fe2e:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800fe30:	f7ff ffa6 	bl	800fd80 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800fe34:	4b21      	ldr	r3, [pc, #132]	; (800febc <GUI_DataSet1_Screen+0xc0>)
 800fe36:	2207      	movs	r2, #7
 800fe38:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fe3a:	782b      	ldrb	r3, [r5, #0]
 800fe3c:	bb0b      	cbnz	r3, 800fe82 <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800fe3e:	f7ff fb7b 	bl	800f538 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800fe42:	7823      	ldrb	r3, [r4, #0]
 800fe44:	f240 1151 	movw	r1, #337	; 0x151
 800fe48:	200a      	movs	r0, #10
 800fe4a:	b1bb      	cbz	r3, 800fe7c <GUI_DataSet1_Screen+0x80>
 800fe4c:	f008 fe48 	bl	8018ae0 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800fe50:	4b1b      	ldr	r3, [pc, #108]	; (800fec0 <GUI_DataSet1_Screen+0xc4>)
 800fe52:	881a      	ldrh	r2, [r3, #0]
 800fe54:	f240 1147 	movw	r1, #327	; 0x147
 800fe58:	f002 0201 	and.w	r2, r2, #1
 800fe5c:	20c8      	movs	r0, #200	; 0xc8
 800fe5e:	f003 fabb 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fe62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	f240 1379 	movw	r3, #377	; 0x179
 800fe6c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe70:	4619      	mov	r1, r3
 800fe72:	200a      	movs	r0, #10
 800fe74:	f00c fe02 	bl	801ca7c <TFT_DrawLine>
}
 800fe78:	b003      	add	sp, #12
 800fe7a:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800fe7c:	f009 fcae 	bl	80197dc <GUI_TextRu_Luminance>
 800fe80:	e7e6      	b.n	800fe50 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d1e4      	bne.n	800fe50 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800fe86:	f7ff fbc7 	bl	800f618 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800fe8a:	7823      	ldrb	r3, [r4, #0]
 800fe8c:	f240 1153 	movw	r1, #339	; 0x153
 800fe90:	200a      	movs	r0, #10
 800fe92:	b113      	cbz	r3, 800fe9a <GUI_DataSet1_Screen+0x9e>
 800fe94:	f007 feac 	bl	8017bf0 <GUI_TextEn_Illuminance>
 800fe98:	e7da      	b.n	800fe50 <GUI_DataSet1_Screen+0x54>
 800fe9a:	f007 fe53 	bl	8017b44 <GUI_TextEn_Luminance>
 800fe9e:	e7d7      	b.n	800fe50 <GUI_DataSet1_Screen+0x54>
 800fea0:	20000231 	.word	0x20000231
 800fea4:	20000ebc 	.word	0x20000ebc
 800fea8:	20005703 	.word	0x20005703
 800feac:	2000022a 	.word	0x2000022a
 800feb0:	20005701 	.word	0x20005701
 800feb4:	20090ac3 	.word	0x20090ac3
 800feb8:	20090abc 	.word	0x20090abc
 800febc:	20091060 	.word	0x20091060
 800fec0:	20005706 	.word	0x20005706

0800fec4 <GUI_DataSet2_Screen>:
{
 800fec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fec6:	4b66      	ldr	r3, [pc, #408]	; (8010060 <GUI_DataSet2_Screen+0x19c>)
 800fec8:	4a66      	ldr	r2, [pc, #408]	; (8010064 <GUI_DataSet2_Screen+0x1a0>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	7812      	ldrb	r2, [r2, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	f000 80c3 	beq.w	801005a <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800fed4:	f7ff ff54 	bl	800fd80 <GUI_Panels>
			if(Language_status == Ru){
 800fed8:	4b63      	ldr	r3, [pc, #396]	; (8010068 <GUI_DataSet2_Screen+0x1a4>)
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d172      	bne.n	800ffc6 <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800fee0:	4b62      	ldr	r3, [pc, #392]	; (801006c <GUI_DataSet2_Screen+0x1a8>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	2152      	movs	r1, #82	; 0x52
 800fee6:	2012      	movs	r0, #18
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d069      	beq.n	800ffc0 <GUI_DataSet2_Screen+0xfc>
 800feec:	f009 fc0c 	bl	8019708 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800fef0:	4c5f      	ldr	r4, [pc, #380]	; (8010070 <GUI_DataSet2_Screen+0x1ac>)
 800fef2:	8822      	ldrh	r2, [r4, #0]
 800fef4:	2146      	movs	r1, #70	; 0x46
 800fef6:	f002 0202 	and.w	r2, r2, #2
 800fefa:	20c8      	movs	r0, #200	; 0xc8
 800fefc:	f003 fa6c 	bl	80133d8 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ff00:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800ff04:	2378      	movs	r3, #120	; 0x78
 800ff06:	4619      	mov	r1, r3
 800ff08:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff0c:	200a      	movs	r0, #10
 800ff0e:	9500      	str	r5, [sp, #0]
 800ff10:	f00c fdb4 	bl	801ca7c <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800ff14:	2191      	movs	r1, #145	; 0x91
 800ff16:	200a      	movs	r0, #10
 800ff18:	f008 fe4c 	bl	8018bb4 <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800ff1c:	8822      	ldrh	r2, [r4, #0]
 800ff1e:	2185      	movs	r1, #133	; 0x85
 800ff20:	f002 0204 	and.w	r2, r2, #4
 800ff24:	20c8      	movs	r0, #200	; 0xc8
 800ff26:	f003 fa57 	bl	80133d8 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800ff2a:	21d1      	movs	r1, #209	; 0xd1
 800ff2c:	200a      	movs	r0, #10
 800ff2e:	f008 fe65 	bl	8018bfc <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800ff32:	8822      	ldrh	r2, [r4, #0]
 800ff34:	21c6      	movs	r1, #198	; 0xc6
 800ff36:	f002 0208 	and.w	r2, r2, #8
 800ff3a:	20c8      	movs	r0, #200	; 0xc8
 800ff3c:	f003 fa4c 	bl	80133d8 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ff40:	23f8      	movs	r3, #248	; 0xf8
 800ff42:	4619      	mov	r1, r3
 800ff44:	200a      	movs	r0, #10
 800ff46:	9500      	str	r5, [sp, #0]
 800ff48:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff4c:	f00c fd96 	bl	801ca7c <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800ff50:	f240 1113 	movw	r1, #275	; 0x113
 800ff54:	2014      	movs	r0, #20
 800ff56:	f009 f8cd 	bl	80190f4 <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800ff5a:	8822      	ldrh	r2, [r4, #0]
 800ff5c:	f240 1107 	movw	r1, #263	; 0x107
 800ff60:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800ff64:	20c8      	movs	r0, #200	; 0xc8
 800ff66:	f003 fa37 	bl	80133d8 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ff6a:	f240 1339 	movw	r3, #313	; 0x139
 800ff6e:	4619      	mov	r1, r3
 800ff70:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff74:	9500      	str	r5, [sp, #0]
 800ff76:	200a      	movs	r0, #10
 800ff78:	f00c fd80 	bl	801ca7c <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800ff7c:	f240 1151 	movw	r1, #337	; 0x151
 800ff80:	2014      	movs	r0, #20
 800ff82:	f007 f8e7 	bl	8017154 <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800ff86:	8822      	ldrh	r2, [r4, #0]
 800ff88:	f240 1147 	movw	r1, #327	; 0x147
 800ff8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ff90:	20c8      	movs	r0, #200	; 0xc8
 800ff92:	f003 fa21 	bl	80133d8 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800ff96:	f240 1379 	movw	r3, #377	; 0x179
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	9500      	str	r5, [sp, #0]
 800ff9e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ffa2:	200a      	movs	r0, #10
 800ffa4:	f00c fd6a 	bl	801ca7c <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800ffa8:	8822      	ldrh	r2, [r4, #0]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ffb0:	f240 1147 	movw	r1, #327	; 0x147
 800ffb4:	2082      	movs	r0, #130	; 0x82
}
 800ffb6:	b003      	add	sp, #12
 800ffb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800ffbc:	f003 b8ec 	b.w	8013198 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800ffc0:	f009 fc54 	bl	801986c <GUI_TextRu_Radiance>
 800ffc4:	e794      	b.n	800fef0 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d147      	bne.n	801005a <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800ffca:	4d28      	ldr	r5, [pc, #160]	; (801006c <GUI_DataSet2_Screen+0x1a8>)
 800ffcc:	782a      	ldrb	r2, [r5, #0]
 800ffce:	2154      	movs	r1, #84	; 0x54
 800ffd0:	2012      	movs	r0, #18
 800ffd2:	2a00      	cmp	r2, #0
 800ffd4:	d03b      	beq.n	801004e <GUI_DataSet2_Screen+0x18a>
 800ffd6:	f007 fba1 	bl	801771c <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800ffda:	4c25      	ldr	r4, [pc, #148]	; (8010070 <GUI_DataSet2_Screen+0x1ac>)
 800ffdc:	8822      	ldrh	r2, [r4, #0]
 800ffde:	2146      	movs	r1, #70	; 0x46
 800ffe0:	f002 0202 	and.w	r2, r2, #2
 800ffe4:	20c8      	movs	r0, #200	; 0xc8
 800ffe6:	f003 f9f7 	bl	80133d8 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ffea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	2378      	movs	r3, #120	; 0x78
 800fff2:	4619      	mov	r1, r3
 800fff4:	200a      	movs	r0, #10
 800fff6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fffa:	f00c fd3f 	bl	801ca7c <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800fffe:	782b      	ldrb	r3, [r5, #0]
 8010000:	2193      	movs	r1, #147	; 0x93
 8010002:	200a      	movs	r0, #10
 8010004:	b333      	cbz	r3, 8010054 <GUI_DataSet2_Screen+0x190>
 8010006:	f007 fe89 	bl	8017d1c <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 801000a:	8822      	ldrh	r2, [r4, #0]
 801000c:	2185      	movs	r1, #133	; 0x85
 801000e:	f002 0204 	and.w	r2, r2, #4
 8010012:	20c8      	movs	r0, #200	; 0xc8
 8010014:	f003 f9e0 	bl	80133d8 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 8010018:	21d3      	movs	r1, #211	; 0xd3
 801001a:	200a      	movs	r0, #10
 801001c:	f007 ff38 	bl	8017e90 <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 8010020:	8822      	ldrh	r2, [r4, #0]
 8010022:	21c6      	movs	r1, #198	; 0xc6
 8010024:	f002 0208 	and.w	r2, r2, #8
 8010028:	20c8      	movs	r0, #200	; 0xc8
 801002a:	f003 f9d5 	bl	80133d8 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 801002e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8010032:	23f8      	movs	r3, #248	; 0xf8
 8010034:	4619      	mov	r1, r3
 8010036:	9500      	str	r5, [sp, #0]
 8010038:	f44f 7283 	mov.w	r2, #262	; 0x106
 801003c:	200a      	movs	r0, #10
 801003e:	f00c fd1d 	bl	801ca7c <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 8010042:	f240 1115 	movw	r1, #277	; 0x115
 8010046:	2014      	movs	r0, #20
 8010048:	f007 ff6a 	bl	8017f20 <GUI_TextEn_CCT>
 801004c:	e785      	b.n	800ff5a <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 801004e:	f007 fb17 	bl	8017680 <GUI_TextEn_Radiance>
 8010052:	e7c2      	b.n	800ffda <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 8010054:	f007 fe8e 	bl	8017d74 <GUI_TextEn_PPL>
 8010058:	e7d7      	b.n	801000a <GUI_DataSet2_Screen+0x146>
}
 801005a:	b003      	add	sp, #12
 801005c:	bd30      	pop	{r4, r5, pc}
 801005e:	bf00      	nop
 8010060:	2000022a 	.word	0x2000022a
 8010064:	20005701 	.word	0x20005701
 8010068:	20005703 	.word	0x20005703
 801006c:	20000ebc 	.word	0x20000ebc
 8010070:	20005706 	.word	0x20005706

08010074 <GUI_DataSet3_Screen>:
{
 8010074:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010076:	4b35      	ldr	r3, [pc, #212]	; (801014c <GUI_DataSet3_Screen+0xd8>)
 8010078:	4a35      	ldr	r2, [pc, #212]	; (8010150 <GUI_DataSet3_Screen+0xdc>)
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	7812      	ldrb	r2, [r2, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	d061      	beq.n	8010146 <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8010082:	4c34      	ldr	r4, [pc, #208]	; (8010154 <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8010084:	4e34      	ldr	r6, [pc, #208]	; (8010158 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 8010086:	f7ff fe7b 	bl	800fd80 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 801008a:	2152      	movs	r1, #82	; 0x52
 801008c:	2014      	movs	r0, #20
 801008e:	f006 fc95 	bl	80169bc <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8010092:	8822      	ldrh	r2, [r4, #0]
 8010094:	2146      	movs	r1, #70	; 0x46
 8010096:	f002 0210 	and.w	r2, r2, #16
 801009a:	20c8      	movs	r0, #200	; 0xc8
 801009c:	f003 f99c 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 80100a0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80100a4:	2378      	movs	r3, #120	; 0x78
 80100a6:	4619      	mov	r1, r3
 80100a8:	f44f 7283 	mov.w	r2, #262	; 0x106
 80100ac:	200a      	movs	r0, #10
 80100ae:	9500      	str	r5, [sp, #0]
 80100b0:	f00c fce4 	bl	801ca7c <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 80100b4:	2191      	movs	r1, #145	; 0x91
 80100b6:	2014      	movs	r0, #20
 80100b8:	f006 ff2c 	bl	8016f14 <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 80100bc:	8822      	ldrh	r2, [r4, #0]
 80100be:	2185      	movs	r1, #133	; 0x85
 80100c0:	f002 0220 	and.w	r2, r2, #32
 80100c4:	20c8      	movs	r0, #200	; 0xc8
 80100c6:	f003 f987 	bl	80133d8 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 80100ca:	21d1      	movs	r1, #209	; 0xd1
 80100cc:	2023      	movs	r0, #35	; 0x23
 80100ce:	f006 fcaf 	bl	8016a30 <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 80100d2:	8823      	ldrh	r3, [r4, #0]
 80100d4:	7832      	ldrb	r2, [r6, #0]
 80100d6:	f003 0320 	and.w	r3, r3, #32
 80100da:	f002 0201 	and.w	r2, r2, #1
 80100de:	21c6      	movs	r1, #198	; 0xc6
 80100e0:	20c8      	movs	r0, #200	; 0xc8
 80100e2:	f003 f9ba 	bl	801345a <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 80100e6:	f240 1113 	movw	r1, #275	; 0x113
 80100ea:	2023      	movs	r0, #35	; 0x23
 80100ec:	f006 fd00 	bl	8016af0 <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 80100f0:	7832      	ldrb	r2, [r6, #0]
 80100f2:	8823      	ldrh	r3, [r4, #0]
 80100f4:	43d2      	mvns	r2, r2
 80100f6:	f003 0320 	and.w	r3, r3, #32
 80100fa:	f002 0201 	and.w	r2, r2, #1
 80100fe:	f240 1107 	movw	r1, #263	; 0x107
 8010102:	20c8      	movs	r0, #200	; 0xc8
 8010104:	f003 f9a9 	bl	801345a <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 8010108:	f240 1339 	movw	r3, #313	; 0x139
 801010c:	4619      	mov	r1, r3
 801010e:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010112:	200a      	movs	r0, #10
 8010114:	9500      	str	r5, [sp, #0]
 8010116:	f00c fcb1 	bl	801ca7c <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 801011a:	f240 1151 	movw	r1, #337	; 0x151
 801011e:	2014      	movs	r0, #20
 8010120:	f006 fd46 	bl	8016bb0 <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 8010124:	8822      	ldrh	r2, [r4, #0]
 8010126:	f240 1147 	movw	r1, #327	; 0x147
 801012a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 801012e:	20c8      	movs	r0, #200	; 0xc8
 8010130:	f003 f952 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 8010134:	f240 1379 	movw	r3, #377	; 0x179
 8010138:	9500      	str	r5, [sp, #0]
 801013a:	f44f 7283 	mov.w	r2, #262	; 0x106
 801013e:	4619      	mov	r1, r3
 8010140:	200a      	movs	r0, #10
 8010142:	f00c fc9b 	bl	801ca7c <TFT_DrawLine>
}
 8010146:	b002      	add	sp, #8
 8010148:	bd70      	pop	{r4, r5, r6, pc}
 801014a:	bf00      	nop
 801014c:	2000022a 	.word	0x2000022a
 8010150:	20005701 	.word	0x20005701
 8010154:	20005706 	.word	0x20005706
 8010158:	20005704 	.word	0x20005704

0801015c <GUI_DataSet4_Screen>:
{
 801015c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 801015e:	4b4b      	ldr	r3, [pc, #300]	; (801028c <GUI_DataSet4_Screen+0x130>)
 8010160:	4a4b      	ldr	r2, [pc, #300]	; (8010290 <GUI_DataSet4_Screen+0x134>)
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	7812      	ldrb	r2, [r2, #0]
 8010166:	429a      	cmp	r2, r3
 8010168:	f000 808b 	beq.w	8010282 <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 801016c:	4c49      	ldr	r4, [pc, #292]	; (8010294 <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 801016e:	4d4a      	ldr	r5, [pc, #296]	; (8010298 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 8010170:	f7ff fe06 	bl	800fd80 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 8010174:	2150      	movs	r1, #80	; 0x50
 8010176:	2014      	movs	r0, #20
 8010178:	f006 fd68 	bl	8016c4c <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 801017c:	8822      	ldrh	r2, [r4, #0]
 801017e:	2141      	movs	r1, #65	; 0x41
 8010180:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8010184:	20c8      	movs	r0, #200	; 0xc8
 8010186:	f003 f927 	bl	80133d8 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 801018a:	2173      	movs	r1, #115	; 0x73
 801018c:	2028      	movs	r0, #40	; 0x28
 801018e:	f006 fe05 	bl	8016d9c <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8010192:	8823      	ldrh	r3, [r4, #0]
 8010194:	782a      	ldrb	r2, [r5, #0]
 8010196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801019a:	f002 0201 	and.w	r2, r2, #1
 801019e:	216c      	movs	r1, #108	; 0x6c
 80101a0:	20c8      	movs	r0, #200	; 0xc8
 80101a2:	f003 f95a 	bl	801345a <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 80101a6:	2196      	movs	r1, #150	; 0x96
 80101a8:	2028      	movs	r0, #40	; 0x28
 80101aa:	f006 fe0d 	bl	8016dc8 <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 80101ae:	8823      	ldrh	r3, [r4, #0]
 80101b0:	782a      	ldrb	r2, [r5, #0]
 80101b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101b6:	f002 0202 	and.w	r2, r2, #2
 80101ba:	218f      	movs	r1, #143	; 0x8f
 80101bc:	20c8      	movs	r0, #200	; 0xc8
 80101be:	f003 f94c 	bl	801345a <GUI_RadioBox>
		GUI_Text_C(40, 185);
 80101c2:	21b9      	movs	r1, #185	; 0xb9
 80101c4:	2028      	movs	r0, #40	; 0x28
 80101c6:	f006 fe23 	bl	8016e10 <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 80101ca:	8823      	ldrh	r3, [r4, #0]
 80101cc:	782a      	ldrb	r2, [r5, #0]
 80101ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101d2:	f002 0204 	and.w	r2, r2, #4
 80101d6:	21b2      	movs	r1, #178	; 0xb2
 80101d8:	20c8      	movs	r0, #200	; 0xc8
 80101da:	f003 f93e 	bl	801345a <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 80101de:	21dc      	movs	r1, #220	; 0xdc
 80101e0:	2028      	movs	r0, #40	; 0x28
 80101e2:	f006 fe2b 	bl	8016e3c <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 80101e6:	8823      	ldrh	r3, [r4, #0]
 80101e8:	782a      	ldrb	r2, [r5, #0]
 80101ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ee:	f002 0208 	and.w	r2, r2, #8
 80101f2:	21d5      	movs	r1, #213	; 0xd5
 80101f4:	20c8      	movs	r0, #200	; 0xc8
 80101f6:	f003 f930 	bl	801345a <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 80101fa:	21ff      	movs	r1, #255	; 0xff
 80101fc:	2028      	movs	r0, #40	; 0x28
 80101fe:	f006 fe41 	bl	8016e84 <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8010202:	8823      	ldrh	r3, [r4, #0]
 8010204:	782a      	ldrb	r2, [r5, #0]
 8010206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801020a:	f002 0210 	and.w	r2, r2, #16
 801020e:	21f8      	movs	r1, #248	; 0xf8
 8010210:	20c8      	movs	r0, #200	; 0xc8
 8010212:	f003 f922 	bl	801345a <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 8010216:	f44f 7191 	mov.w	r1, #290	; 0x122
 801021a:	2028      	movs	r0, #40	; 0x28
 801021c:	f006 fe56 	bl	8016ecc <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8010220:	8823      	ldrh	r3, [r4, #0]
 8010222:	782a      	ldrb	r2, [r5, #0]
 8010224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010228:	f002 0220 	and.w	r2, r2, #32
 801022c:	f240 111b 	movw	r1, #283	; 0x11b
 8010230:	20c8      	movs	r0, #200	; 0xc8
 8010232:	f003 f912 	bl	801345a <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 8010236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8010240:	4619      	mov	r1, r3
 8010242:	200a      	movs	r0, #10
 8010244:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010248:	f00c fc18 	bl	801ca7c <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 801024c:	4b13      	ldr	r3, [pc, #76]	; (801029c <GUI_DataSet4_Screen+0x140>)
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8010254:	2014      	movs	r0, #20
 8010256:	b1b3      	cbz	r3, 8010286 <GUI_DataSet4_Screen+0x12a>
 8010258:	f007 f8d6 	bl	8017408 <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 801025c:	8822      	ldrh	r2, [r4, #0]
 801025e:	f240 1159 	movw	r1, #345	; 0x159
 8010262:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8010266:	20c8      	movs	r0, #200	; 0xc8
 8010268:	f003 f8b6 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 801026c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8010276:	f44f 7283 	mov.w	r2, #262	; 0x106
 801027a:	4619      	mov	r1, r3
 801027c:	200a      	movs	r0, #10
 801027e:	f00c fbfd 	bl	801ca7c <TFT_DrawLine>
}
 8010282:	b003      	add	sp, #12
 8010284:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 8010286:	f007 f8f9 	bl	801747c <GUI_Text_LbLr>
 801028a:	e7e7      	b.n	801025c <GUI_DataSet4_Screen+0x100>
 801028c:	2000022a 	.word	0x2000022a
 8010290:	20005701 	.word	0x20005701
 8010294:	20005706 	.word	0x20005706
 8010298:	20090ac1 	.word	0x20090ac1
 801029c:	20000ebc 	.word	0x20000ebc

080102a0 <GUI_DataSet5_Screen>:
{
 80102a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80102a2:	4b19      	ldr	r3, [pc, #100]	; (8010308 <GUI_DataSet5_Screen+0x68>)
 80102a4:	4a19      	ldr	r2, [pc, #100]	; (801030c <GUI_DataSet5_Screen+0x6c>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	7812      	ldrb	r2, [r2, #0]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d02a      	beq.n	8010304 <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 80102ae:	4d18      	ldr	r5, [pc, #96]	; (8010310 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 80102b0:	f7ff fd66 	bl	800fd80 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 80102b4:	2156      	movs	r1, #86	; 0x56
 80102b6:	2023      	movs	r0, #35	; 0x23
 80102b8:	f006 fed2 	bl	8017060 <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 80102bc:	882a      	ldrh	r2, [r5, #0]
 80102be:	2146      	movs	r1, #70	; 0x46
 80102c0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80102c4:	20c8      	movs	r0, #200	; 0xc8
 80102c6:	f003 f887 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 80102ca:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80102ce:	2378      	movs	r3, #120	; 0x78
 80102d0:	4619      	mov	r1, r3
 80102d2:	f44f 7283 	mov.w	r2, #262	; 0x106
 80102d6:	200a      	movs	r0, #10
 80102d8:	9400      	str	r4, [sp, #0]
 80102da:	f00c fbcf 	bl	801ca7c <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 80102de:	2191      	movs	r1, #145	; 0x91
 80102e0:	2023      	movs	r0, #35	; 0x23
 80102e2:	f006 fe99 	bl	8017018 <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 80102e6:	882a      	ldrh	r2, [r5, #0]
 80102e8:	2185      	movs	r1, #133	; 0x85
 80102ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80102ee:	20c8      	movs	r0, #200	; 0xc8
 80102f0:	f003 f872 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 80102f4:	23b7      	movs	r3, #183	; 0xb7
 80102f6:	9400      	str	r4, [sp, #0]
 80102f8:	f44f 7283 	mov.w	r2, #262	; 0x106
 80102fc:	4619      	mov	r1, r3
 80102fe:	200a      	movs	r0, #10
 8010300:	f00c fbbc 	bl	801ca7c <TFT_DrawLine>
}
 8010304:	b003      	add	sp, #12
 8010306:	bd30      	pop	{r4, r5, pc}
 8010308:	2000022a 	.word	0x2000022a
 801030c:	20005701 	.word	0x20005701
 8010310:	20005706 	.word	0x20005706

08010314 <GUI_GraphSet1_Screen>:
{
 8010314:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 8010316:	4b1d      	ldr	r3, [pc, #116]	; (801038c <GUI_GraphSet1_Screen+0x78>)
 8010318:	4a1d      	ldr	r2, [pc, #116]	; (8010390 <GUI_GraphSet1_Screen+0x7c>)
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	7812      	ldrb	r2, [r2, #0]
 801031e:	4c1d      	ldr	r4, [pc, #116]	; (8010394 <GUI_GraphSet1_Screen+0x80>)
 8010320:	4d1d      	ldr	r5, [pc, #116]	; (8010398 <GUI_GraphSet1_Screen+0x84>)
 8010322:	429a      	cmp	r2, r3
 8010324:	d103      	bne.n	801032e <GUI_GraphSet1_Screen+0x1a>
 8010326:	7822      	ldrb	r2, [r4, #0]
 8010328:	782b      	ldrb	r3, [r5, #0]
 801032a:	429a      	cmp	r2, r3
 801032c:	d022      	beq.n	8010374 <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 801032e:	f7ff fd27 	bl	800fd80 <GUI_Panels>
		Language_status_prev = Language_status;
 8010332:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 8010334:	4a19      	ldr	r2, [pc, #100]	; (801039c <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 8010336:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 8010338:	210c      	movs	r1, #12
 801033a:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 801033c:	b9e3      	cbnz	r3, 8010378 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 801033e:	f7ff f8fb 	bl	800f538 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 8010342:	f240 1151 	movw	r1, #337	; 0x151
 8010346:	200a      	movs	r0, #10
 8010348:	f008 fce6 	bl	8018d18 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 801034c:	4b14      	ldr	r3, [pc, #80]	; (80103a0 <GUI_GraphSet1_Screen+0x8c>)
 801034e:	781a      	ldrb	r2, [r3, #0]
 8010350:	f240 1147 	movw	r1, #327	; 0x147
 8010354:	f002 0201 	and.w	r2, r2, #1
 8010358:	20c8      	movs	r0, #200	; 0xc8
 801035a:	f003 f83d 	bl	80133d8 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 801035e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	f240 1379 	movw	r3, #377	; 0x179
 8010368:	f44f 7283 	mov.w	r2, #262	; 0x106
 801036c:	4619      	mov	r1, r3
 801036e:	200a      	movs	r0, #10
 8010370:	f00c fb84 	bl	801ca7c <TFT_DrawLine>
}
 8010374:	b003      	add	sp, #12
 8010376:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 8010378:	2b01      	cmp	r3, #1
 801037a:	d1e7      	bne.n	801034c <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 801037c:	f7ff f94c 	bl	800f618 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 8010380:	f240 1153 	movw	r1, #339	; 0x153
 8010384:	200a      	movs	r0, #10
 8010386:	f007 fd19 	bl	8017dbc <GUI_TextEn_PARwavebands>
 801038a:	e7df      	b.n	801034c <GUI_GraphSet1_Screen+0x38>
 801038c:	2000022a 	.word	0x2000022a
 8010390:	20005701 	.word	0x20005701
 8010394:	20090abc 	.word	0x20090abc
 8010398:	20005703 	.word	0x20005703
 801039c:	20091060 	.word	0x20091060
 80103a0:	20005702 	.word	0x20005702

080103a4 <GUI_GraphSet2_Screen>:
{
 80103a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80103a6:	4b19      	ldr	r3, [pc, #100]	; (801040c <GUI_GraphSet2_Screen+0x68>)
 80103a8:	4a19      	ldr	r2, [pc, #100]	; (8010410 <GUI_GraphSet2_Screen+0x6c>)
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	7812      	ldrb	r2, [r2, #0]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d02a      	beq.n	8010408 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80103b2:	4d18      	ldr	r5, [pc, #96]	; (8010414 <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 80103b4:	f7ff fce4 	bl	800fd80 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 80103b8:	2152      	movs	r1, #82	; 0x52
 80103ba:	2012      	movs	r0, #18
 80103bc:	f007 f824 	bl	8017408 <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80103c0:	782a      	ldrb	r2, [r5, #0]
 80103c2:	2146      	movs	r1, #70	; 0x46
 80103c4:	f002 0202 	and.w	r2, r2, #2
 80103c8:	20c8      	movs	r0, #200	; 0xc8
 80103ca:	f003 f805 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 80103ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80103d2:	237a      	movs	r3, #122	; 0x7a
 80103d4:	4619      	mov	r1, r3
 80103d6:	f44f 7283 	mov.w	r2, #262	; 0x106
 80103da:	200a      	movs	r0, #10
 80103dc:	9400      	str	r4, [sp, #0]
 80103de:	f00c fb4d 	bl	801ca7c <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 80103e2:	2191      	movs	r1, #145	; 0x91
 80103e4:	200a      	movs	r0, #10
 80103e6:	f006 fe5f 	bl	80170a8 <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80103ea:	782a      	ldrb	r2, [r5, #0]
 80103ec:	2185      	movs	r1, #133	; 0x85
 80103ee:	f002 0204 	and.w	r2, r2, #4
 80103f2:	20c8      	movs	r0, #200	; 0xc8
 80103f4:	f002 fff0 	bl	80133d8 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 80103f8:	23b9      	movs	r3, #185	; 0xb9
 80103fa:	9400      	str	r4, [sp, #0]
 80103fc:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010400:	4619      	mov	r1, r3
 8010402:	200a      	movs	r0, #10
 8010404:	f00c fb3a 	bl	801ca7c <TFT_DrawLine>
}
 8010408:	b003      	add	sp, #12
 801040a:	bd30      	pop	{r4, r5, pc}
 801040c:	2000022a 	.word	0x2000022a
 8010410:	20005701 	.word	0x20005701
 8010414:	20005702 	.word	0x20005702

08010418 <GUI_ColorSet1_Screen>:
{
 8010418:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 801041a:	4b1b      	ldr	r3, [pc, #108]	; (8010488 <GUI_ColorSet1_Screen+0x70>)
 801041c:	4a1b      	ldr	r2, [pc, #108]	; (801048c <GUI_ColorSet1_Screen+0x74>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	7812      	ldrb	r2, [r2, #0]
 8010422:	4c1b      	ldr	r4, [pc, #108]	; (8010490 <GUI_ColorSet1_Screen+0x78>)
 8010424:	429a      	cmp	r2, r3
 8010426:	4b1b      	ldr	r3, [pc, #108]	; (8010494 <GUI_ColorSet1_Screen+0x7c>)
 8010428:	d103      	bne.n	8010432 <GUI_ColorSet1_Screen+0x1a>
 801042a:	7819      	ldrb	r1, [r3, #0]
 801042c:	7822      	ldrb	r2, [r4, #0]
 801042e:	4291      	cmp	r1, r2
 8010430:	d023      	beq.n	801047a <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 8010432:	7822      	ldrb	r2, [r4, #0]
 8010434:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 8010436:	f7ff fca3 	bl	800fd80 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 801043a:	4b17      	ldr	r3, [pc, #92]	; (8010498 <GUI_ColorSet1_Screen+0x80>)
 801043c:	220e      	movs	r2, #14
 801043e:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 8010440:	7823      	ldrb	r3, [r4, #0]
 8010442:	b9e3      	cbnz	r3, 801047e <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 8010444:	f7ff f878 	bl	800f538 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 8010448:	f240 1151 	movw	r1, #337	; 0x151
 801044c:	200a      	movs	r0, #10
 801044e:	f006 fd61 	bl	8016f14 <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 8010452:	4b12      	ldr	r3, [pc, #72]	; (801049c <GUI_ColorSet1_Screen+0x84>)
 8010454:	781a      	ldrb	r2, [r3, #0]
 8010456:	2301      	movs	r3, #1
 8010458:	401a      	ands	r2, r3
 801045a:	f240 1147 	movw	r1, #327	; 0x147
 801045e:	20c8      	movs	r0, #200	; 0xc8
 8010460:	f002 fffb 	bl	801345a <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 8010464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	f240 1379 	movw	r3, #377	; 0x179
 801046e:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010472:	4619      	mov	r1, r3
 8010474:	200a      	movs	r0, #10
 8010476:	f00c fb01 	bl	801ca7c <TFT_DrawLine>
}
 801047a:	b002      	add	sp, #8
 801047c:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 801047e:	2b01      	cmp	r3, #1
 8010480:	d1e2      	bne.n	8010448 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 8010482:	f7ff f8c9 	bl	800f618 <GUI_OptionMenuEn>
 8010486:	e7df      	b.n	8010448 <GUI_ColorSet1_Screen+0x30>
 8010488:	2000022a 	.word	0x2000022a
 801048c:	20005701 	.word	0x20005701
 8010490:	20005703 	.word	0x20005703
 8010494:	20090abc 	.word	0x20090abc
 8010498:	20091060 	.word	0x20091060
 801049c:	200056ff 	.word	0x200056ff

080104a0 <GUI_ColorSet2_Screen>:
{
 80104a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80104a2:	4b1a      	ldr	r3, [pc, #104]	; (801050c <GUI_ColorSet2_Screen+0x6c>)
 80104a4:	4a1a      	ldr	r2, [pc, #104]	; (8010510 <GUI_ColorSet2_Screen+0x70>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	7812      	ldrb	r2, [r2, #0]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d02c      	beq.n	8010508 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80104ae:	4d19      	ldr	r5, [pc, #100]	; (8010514 <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 80104b0:	f7ff fc66 	bl	800fd80 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 80104b4:	2152      	movs	r1, #82	; 0x52
 80104b6:	2014      	movs	r0, #20
 80104b8:	f006 fb7a 	bl	8016bb0 <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80104bc:	782a      	ldrb	r2, [r5, #0]
 80104be:	2301      	movs	r3, #1
 80104c0:	f002 0204 	and.w	r2, r2, #4
 80104c4:	2146      	movs	r1, #70	; 0x46
 80104c6:	20c8      	movs	r0, #200	; 0xc8
 80104c8:	f002 ffc7 	bl	801345a <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 80104cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80104d0:	237a      	movs	r3, #122	; 0x7a
 80104d2:	4619      	mov	r1, r3
 80104d4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80104d8:	200a      	movs	r0, #10
 80104da:	9400      	str	r4, [sp, #0]
 80104dc:	f00c face 	bl	801ca7c <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 80104e0:	2191      	movs	r1, #145	; 0x91
 80104e2:	2014      	movs	r0, #20
 80104e4:	f006 fbb2 	bl	8016c4c <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 80104e8:	782a      	ldrb	r2, [r5, #0]
 80104ea:	2301      	movs	r3, #1
 80104ec:	f002 0202 	and.w	r2, r2, #2
 80104f0:	2185      	movs	r1, #133	; 0x85
 80104f2:	20c8      	movs	r0, #200	; 0xc8
 80104f4:	f002 ffb1 	bl	801345a <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 80104f8:	23b9      	movs	r3, #185	; 0xb9
 80104fa:	9400      	str	r4, [sp, #0]
 80104fc:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010500:	4619      	mov	r1, r3
 8010502:	200a      	movs	r0, #10
 8010504:	f00c faba 	bl	801ca7c <TFT_DrawLine>
}
 8010508:	b003      	add	sp, #12
 801050a:	bd30      	pop	{r4, r5, pc}
 801050c:	2000022a 	.word	0x2000022a
 8010510:	20005701 	.word	0x20005701
 8010514:	200056ff 	.word	0x200056ff

08010518 <GUI_ColorRendSet_Screen>:
{
 8010518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 801051a:	4b28      	ldr	r3, [pc, #160]	; (80105bc <GUI_ColorRendSet_Screen+0xa4>)
 801051c:	4d28      	ldr	r5, [pc, #160]	; (80105c0 <GUI_ColorRendSet_Screen+0xa8>)
 801051e:	4c29      	ldr	r4, [pc, #164]	; (80105c4 <GUI_ColorRendSet_Screen+0xac>)
 8010520:	2202      	movs	r2, #2
 8010522:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 8010524:	4b28      	ldr	r3, [pc, #160]	; (80105c8 <GUI_ColorRendSet_Screen+0xb0>)
 8010526:	4a29      	ldr	r2, [pc, #164]	; (80105cc <GUI_ColorRendSet_Screen+0xb4>)
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	7812      	ldrb	r2, [r2, #0]
 801052c:	429a      	cmp	r2, r3
 801052e:	d103      	bne.n	8010538 <GUI_ColorRendSet_Screen+0x20>
 8010530:	782a      	ldrb	r2, [r5, #0]
 8010532:	7823      	ldrb	r3, [r4, #0]
 8010534:	429a      	cmp	r2, r3
 8010536:	d03e      	beq.n	80105b6 <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 8010538:	f7ff fc22 	bl	800fd80 <GUI_Panels>
		Language_status_prev = Language_status;
 801053c:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 801053e:	4a24      	ldr	r2, [pc, #144]	; (80105d0 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 8010540:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 8010542:	2110      	movs	r1, #16
 8010544:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 8010546:	b90b      	cbnz	r3, 801054c <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 8010548:	f7fe fff6 	bl	800f538 <GUI_OptionMenuRu>
		if(Language_status == En){
 801054c:	7823      	ldrb	r3, [r4, #0]
 801054e:	2b01      	cmp	r3, #1
 8010550:	d101      	bne.n	8010556 <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 8010552:	f7ff f861 	bl	800f618 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8010556:	4d1f      	ldr	r5, [pc, #124]	; (80105d4 <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 8010558:	f240 1145 	movw	r1, #325	; 0x145
 801055c:	201e      	movs	r0, #30
 801055e:	f006 fd13 	bl	8016f88 <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8010562:	782a      	ldrb	r2, [r5, #0]
 8010564:	2301      	movs	r3, #1
 8010566:	401a      	ands	r2, r3
 8010568:	f44f 719f 	mov.w	r1, #318	; 0x13e
 801056c:	20b9      	movs	r0, #185	; 0xb9
 801056e:	f002 ff74 	bl	801345a <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 8010572:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8010576:	f240 1363 	movw	r3, #355	; 0x163
 801057a:	4619      	mov	r1, r3
 801057c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010580:	200a      	movs	r0, #10
 8010582:	9400      	str	r4, [sp, #0]
 8010584:	f00c fa7a 	bl	801ca7c <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 8010588:	f240 1171 	movw	r1, #369	; 0x171
 801058c:	201e      	movs	r0, #30
 801058e:	f006 fd1f 	bl	8016fd0 <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8010592:	782a      	ldrb	r2, [r5, #0]
 8010594:	2301      	movs	r3, #1
 8010596:	43d2      	mvns	r2, r2
 8010598:	401a      	ands	r2, r3
 801059a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801059e:	20b9      	movs	r0, #185	; 0xb9
 80105a0:	f002 ff5b 	bl	801345a <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 80105a4:	f240 1391 	movw	r3, #401	; 0x191
 80105a8:	9400      	str	r4, [sp, #0]
 80105aa:	f44f 7283 	mov.w	r2, #262	; 0x106
 80105ae:	4619      	mov	r1, r3
 80105b0:	200a      	movs	r0, #10
 80105b2:	f00c fa63 	bl	801ca7c <TFT_DrawLine>
}
 80105b6:	b003      	add	sp, #12
 80105b8:	bd30      	pop	{r4, r5, pc}
 80105ba:	bf00      	nop
 80105bc:	20000231 	.word	0x20000231
 80105c0:	20090abc 	.word	0x20090abc
 80105c4:	20005703 	.word	0x20005703
 80105c8:	2000022a 	.word	0x2000022a
 80105cc:	20005701 	.word	0x20005701
 80105d0:	20091060 	.word	0x20091060
 80105d4:	20005700 	.word	0x20005700

080105d8 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 80105d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105dc:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 80105e0:	4b87      	ldr	r3, [pc, #540]	; (8010800 <GUI_Graph_Screen+0x228>)
 80105e2:	4a88      	ldr	r2, [pc, #544]	; (8010804 <GUI_Graph_Screen+0x22c>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	7812      	ldrb	r2, [r2, #0]
 80105e8:	4d87      	ldr	r5, [pc, #540]	; (8010808 <GUI_Graph_Screen+0x230>)
 80105ea:	4c88      	ldr	r4, [pc, #544]	; (801080c <GUI_Graph_Screen+0x234>)
 80105ec:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 80105ee:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 80105f0:	d104      	bne.n	80105fc <GUI_Graph_Screen+0x24>
 80105f2:	782a      	ldrb	r2, [r5, #0]
 80105f4:	7823      	ldrb	r3, [r4, #0]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	f000 809d 	beq.w	8010736 <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80105fc:	2063      	movs	r0, #99	; 0x63
 80105fe:	f00c f89b 	bl	801c738 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 8010602:	4a83      	ldr	r2, [pc, #524]	; (8010810 <GUI_Graph_Screen+0x238>)
 8010604:	2300      	movs	r3, #0
 8010606:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010608:	4a82      	ldr	r2, [pc, #520]	; (8010814 <GUI_Graph_Screen+0x23c>)
 801060a:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 801060c:	f7ff fbb8 	bl	800fd80 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 8010610:	7820      	ldrb	r0, [r4, #0]
 8010612:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 8010614:	4d80      	ldr	r5, [pc, #512]	; (8010818 <GUI_Graph_Screen+0x240>)
 8010616:	782b      	ldrb	r3, [r5, #0]
 8010618:	07d9      	lsls	r1, r3, #31
 801061a:	d501      	bpl.n	8010620 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 801061c:	f00b f9a4 	bl	801b968 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 8010620:	782b      	ldrb	r3, [r5, #0]
 8010622:	075a      	lsls	r2, r3, #29
 8010624:	d538      	bpl.n	8010698 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 8010626:	7820      	ldrb	r0, [r4, #0]
 8010628:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8010828 <GUI_Graph_Screen+0x250>
 801062c:	f8df c210 	ldr.w	ip, [pc, #528]	; 8010840 <GUI_Graph_Screen+0x268>
 8010630:	4e7a      	ldr	r6, [pc, #488]	; (801081c <GUI_Graph_Screen+0x244>)
 8010632:	4f7b      	ldr	r7, [pc, #492]	; (8010820 <GUI_Graph_Screen+0x248>)
 8010634:	2800      	cmp	r0, #0
 8010636:	f040 8086 	bne.w	8010746 <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 801063a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8010824 <GUI_Graph_Screen+0x24c>
 801063e:	4603      	mov	r3, r0
 8010640:	0119      	lsls	r1, r3, #4
 8010642:	eb0c 0201 	add.w	r2, ip, r1
 8010646:	edd2 7a00 	vldr	s15, [r2]
 801064a:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 801064e:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 8010650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010654:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 8010658:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 801065c:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 8010660:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 8010664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010668:	ee17 2a90 	vmov	r2, s15
 801066c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8010670:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 8010672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010676:	d1e3      	bne.n	8010640 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 8010678:	2114      	movs	r1, #20
 801067a:	9000      	str	r0, [sp, #0]
 801067c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8010680:	4608      	mov	r0, r1
 8010682:	4a69      	ldr	r2, [pc, #420]	; (8010828 <GUI_Graph_Screen+0x250>)
 8010684:	f00b fb30 	bl	801bce8 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 8010688:	7823      	ldrb	r3, [r4, #0]
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	2114      	movs	r1, #20
 801068e:	231f      	movs	r3, #31
 8010690:	4a62      	ldr	r2, [pc, #392]	; (801081c <GUI_Graph_Screen+0x244>)
 8010692:	4608      	mov	r0, r1
 8010694:	f00b fb28 	bl	801bce8 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 8010698:	782b      	ldrb	r3, [r5, #0]
 801069a:	079b      	lsls	r3, r3, #30
 801069c:	d545      	bpl.n	801072a <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 801069e:	7826      	ldrb	r6, [r4, #0]
 80106a0:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8010834 <GUI_Graph_Screen+0x25c>
 80106a4:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8010844 <GUI_Graph_Screen+0x26c>
 80106a8:	4f60      	ldr	r7, [pc, #384]	; (801082c <GUI_Graph_Screen+0x254>)
 80106aa:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8010848 <GUI_Graph_Screen+0x270>
 80106ae:	2e00      	cmp	r6, #0
 80106b0:	d16c      	bne.n	801078c <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 80106b2:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8010824 <GUI_Graph_Screen+0x24c>
 80106b6:	4635      	mov	r5, r6
 80106b8:	012a      	lsls	r2, r5, #4
 80106ba:	eb0a 0302 	add.w	r3, sl, r2
 80106be:	edd3 7a00 	vldr	s15, [r3]
 80106c2:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 80106c6:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 80106c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 80106cc:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 80106ce:	ee17 3a90 	vmov	r3, s15
 80106d2:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 80106d6:	f7ef ff4f 	bl	8000578 <__aeabi_f2d>
 80106da:	2200      	movs	r2, #0
 80106dc:	4b54      	ldr	r3, [pc, #336]	; (8010830 <GUI_Graph_Screen+0x258>)
 80106de:	f7f0 f8c9 	bl	8000874 <__aeabi_ddiv>
 80106e2:	a343      	add	r3, pc, #268	; (adr r3, 80107f0 <GUI_Graph_Screen+0x218>)
 80106e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e8:	f7ef ff9a 	bl	8000620 <__aeabi_dmul>
 80106ec:	f7f0 fa90 	bl	8000c10 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 80106f0:	ee07 0a90 	vmov	s15, r0
 80106f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106f8:	ee17 0a90 	vmov	r0, s15
 80106fc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010700:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 8010702:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010706:	d1d7      	bne.n	80106b8 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 8010708:	2114      	movs	r1, #20
 801070a:	4608      	mov	r0, r1
 801070c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8010710:	4a48      	ldr	r2, [pc, #288]	; (8010834 <GUI_Graph_Screen+0x25c>)
 8010712:	9600      	str	r6, [sp, #0]
 8010714:	f00b fae8 	bl	801bce8 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 8010718:	7823      	ldrb	r3, [r4, #0]
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	2114      	movs	r1, #20
 801071e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8010722:	4a42      	ldr	r2, [pc, #264]	; (801082c <GUI_Graph_Screen+0x254>)
 8010724:	4608      	mov	r0, r1
 8010726:	f00b fadf 	bl	801bce8 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 801072a:	7820      	ldrb	r0, [r4, #0]
 801072c:	f00b f84e 	bl	801b7cc <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 8010730:	7820      	ldrb	r0, [r4, #0]
 8010732:	f00b f9fb 	bl	801bb2c <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 8010736:	4b40      	ldr	r3, [pc, #256]	; (8010838 <GUI_Graph_Screen+0x260>)
 8010738:	2204      	movs	r2, #4
 801073a:	701a      	strb	r2, [r3, #0]
}
 801073c:	b003      	add	sp, #12
 801073e:	ecbd 8b02 	vpop	{d8}
 8010742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 8010746:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 801083c <GUI_Graph_Screen+0x264>
 801074a:	2300      	movs	r3, #0
 801074c:	f04f 080c 	mov.w	r8, #12
 8010750:	fb08 f103 	mul.w	r1, r8, r3
 8010754:	eb0c 0201 	add.w	r2, ip, r1
 8010758:	edd2 7a00 	vldr	s15, [r2]
 801075c:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 8010760:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 8010762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010766:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 801076a:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 801076e:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 8010772:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 8010776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801077a:	ee17 2a90 	vmov	r2, s15
 801077e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8010782:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 8010784:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8010788:	d1e2      	bne.n	8010750 <GUI_Graph_Screen+0x178>
 801078a:	e775      	b.n	8010678 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 801078c:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 801083c <GUI_Graph_Screen+0x264>
 8010790:	2500      	movs	r5, #0
 8010792:	f04f 0b0c 	mov.w	fp, #12
 8010796:	fb0b f205 	mul.w	r2, fp, r5
 801079a:	eb0a 0302 	add.w	r3, sl, r2
 801079e:	edd3 7a00 	vldr	s15, [r3]
 80107a2:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 80107a6:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 80107a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 80107ac:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 80107ae:	ee17 3a90 	vmov	r3, s15
 80107b2:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 80107b6:	f7ef fedf 	bl	8000578 <__aeabi_f2d>
 80107ba:	2200      	movs	r2, #0
 80107bc:	4b1c      	ldr	r3, [pc, #112]	; (8010830 <GUI_Graph_Screen+0x258>)
 80107be:	f7f0 f859 	bl	8000874 <__aeabi_ddiv>
 80107c2:	a30d      	add	r3, pc, #52	; (adr r3, 80107f8 <GUI_Graph_Screen+0x220>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef ff2a 	bl	8000620 <__aeabi_dmul>
 80107cc:	f7f0 fa20 	bl	8000c10 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 80107d0:	ee07 0a90 	vmov	s15, r0
 80107d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107d8:	ee17 0a90 	vmov	r0, s15
 80107dc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80107e0:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 80107e2:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 80107e6:	d1d6      	bne.n	8010796 <GUI_Graph_Screen+0x1be>
 80107e8:	e78e      	b.n	8010708 <GUI_Graph_Screen+0x130>
 80107ea:	bf00      	nop
 80107ec:	f3af 8000 	nop.w
 80107f0:	00000000 	.word	0x00000000
 80107f4:	40733000 	.word	0x40733000
 80107f8:	00000000 	.word	0x00000000
 80107fc:	406a2000 	.word	0x406a2000
 8010800:	2000022a 	.word	0x2000022a
 8010804:	20005701 	.word	0x20005701
 8010808:	20091061 	.word	0x20091061
 801080c:	2000570a 	.word	0x2000570a
 8010810:	20005727 	.word	0x20005727
 8010814:	20005726 	.word	0x20005726
 8010818:	20005702 	.word	0x20005702
 801081c:	20091328 	.word	0x20091328
 8010820:	20053940 	.word	0x20053940
 8010824:	43998000 	.word	0x43998000
 8010828:	20090d8a 	.word	0x20090d8a
 801082c:	20090ac4 	.word	0x20090ac4
 8010830:	40240000 	.word	0x40240000
 8010834:	20091062 	.word	0x20091062
 8010838:	20090abd 	.word	0x20090abd
 801083c:	43510000 	.word	0x43510000
 8010840:	20052940 	.word	0x20052940
 8010844:	20009d38 	.word	0x20009d38
 8010848:	2000ad38 	.word	0x2000ad38

0801084c <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 801084c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 801084e:	4f2a      	ldr	r7, [pc, #168]	; (80108f8 <GUI_SignalLevel+0xac>)
 8010850:	4e2a      	ldr	r6, [pc, #168]	; (80108fc <GUI_SignalLevel+0xb0>)
 8010852:	783b      	ldrb	r3, [r7, #0]
 8010854:	7832      	ldrb	r2, [r6, #0]
 8010856:	429a      	cmp	r2, r3
 8010858:	d00a      	beq.n	8010870 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 801085a:	b363      	cbz	r3, 80108b6 <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 801085c:	4b28      	ldr	r3, [pc, #160]	; (8010900 <GUI_SignalLevel+0xb4>)
 801085e:	781a      	ldrb	r2, [r3, #0]
 8010860:	4b28      	ldr	r3, [pc, #160]	; (8010904 <GUI_SignalLevel+0xb8>)
 8010862:	211e      	movs	r1, #30
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	b9f2      	cbnz	r2, 80108a6 <GUI_SignalLevel+0x5a>
 8010868:	b1cb      	cbz	r3, 801089e <GUI_SignalLevel+0x52>
 801086a:	200f      	movs	r0, #15
 801086c:	f009 f96a 	bl	8019b44 <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 8010870:	4d25      	ldr	r5, [pc, #148]	; (8010908 <GUI_SignalLevel+0xbc>)
 8010872:	4c26      	ldr	r4, [pc, #152]	; (801090c <GUI_SignalLevel+0xc0>)
 8010874:	782b      	ldrb	r3, [r5, #0]
 8010876:	7820      	ldrb	r0, [r4, #0]
 8010878:	4298      	cmp	r0, r3
 801087a:	d00a      	beq.n	8010892 <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 801087c:	b38b      	cbz	r3, 80108e2 <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 801087e:	4b20      	ldr	r3, [pc, #128]	; (8010900 <GUI_SignalLevel+0xb4>)
 8010880:	781a      	ldrb	r2, [r3, #0]
 8010882:	4b20      	ldr	r3, [pc, #128]	; (8010904 <GUI_SignalLevel+0xb8>)
 8010884:	211e      	movs	r1, #30
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	bb1a      	cbnz	r2, 80108d2 <GUI_SignalLevel+0x86>
 801088a:	b1f3      	cbz	r3, 80108ca <GUI_SignalLevel+0x7e>
 801088c:	2014      	movs	r0, #20
 801088e:	f009 f861 	bl	8019954 <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 8010892:	783b      	ldrb	r3, [r7, #0]
 8010894:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 8010896:	782b      	ldrb	r3, [r5, #0]
 8010898:	7023      	strb	r3, [r4, #0]
}
 801089a:	b003      	add	sp, #12
 801089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 801089e:	2032      	movs	r0, #50	; 0x32
 80108a0:	f009 f9ec 	bl	8019c7c <GUI_TextMsgRu_HighRadiance>
 80108a4:	e7e4      	b.n	8010870 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 80108a6:	2037      	movs	r0, #55	; 0x37
 80108a8:	b113      	cbz	r3, 80108b0 <GUI_SignalLevel+0x64>
 80108aa:	f006 ff93 	bl	80177d4 <GUI_TextMsgEn_HighIrradiance>
 80108ae:	e7df      	b.n	8010870 <GUI_SignalLevel+0x24>
 80108b0:	f007 f808 	bl	80178c4 <GUI_TextMsgEn_HighRadiance>
 80108b4:	e7dc      	b.n	8010870 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 80108b6:	2363      	movs	r3, #99	; 0x63
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80108be:	2338      	movs	r3, #56	; 0x38
 80108c0:	2120      	movs	r1, #32
 80108c2:	200a      	movs	r0, #10
 80108c4:	f00c f937 	bl	801cb36 <TFT_FillRectangle>
 80108c8:	e7d2      	b.n	8010870 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 80108ca:	2037      	movs	r0, #55	; 0x37
 80108cc:	f009 f8d0 	bl	8019a70 <GUI_TextMsgRu_LowRadiance>
 80108d0:	e7df      	b.n	8010892 <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 80108d2:	2046      	movs	r0, #70	; 0x46
 80108d4:	b113      	cbz	r3, 80108dc <GUI_SignalLevel+0x90>
 80108d6:	f007 f8c3 	bl	8017a60 <GUI_TextMsgEn_LowIrradiance>
 80108da:	e7da      	b.n	8010892 <GUI_SignalLevel+0x46>
 80108dc:	f007 f85c 	bl	8017998 <GUI_TextMsgEn_LowRadiance>
 80108e0:	e7d7      	b.n	8010892 <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 80108e2:	2363      	movs	r3, #99	; 0x63
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80108ea:	2338      	movs	r3, #56	; 0x38
 80108ec:	2120      	movs	r1, #32
 80108ee:	200a      	movs	r0, #10
 80108f0:	f00c f921 	bl	801cb36 <TFT_FillRectangle>
 80108f4:	e7cd      	b.n	8010892 <GUI_SignalLevel+0x46>
 80108f6:	bf00      	nop
 80108f8:	200905bf 	.word	0x200905bf
 80108fc:	20005726 	.word	0x20005726
 8010900:	20005703 	.word	0x20005703
 8010904:	20000ebc 	.word	0x20000ebc
 8010908:	200905c2 	.word	0x200905c2
 801090c:	20005727 	.word	0x20005727

08010910 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 8010910:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010912:	4910      	ldr	r1, [pc, #64]	; (8010954 <GUI_Measure_Screen+0x44>)
 8010914:	4c10      	ldr	r4, [pc, #64]	; (8010958 <GUI_Measure_Screen+0x48>)
 8010916:	7809      	ldrb	r1, [r1, #0]
 8010918:	7822      	ldrb	r2, [r4, #0]
 801091a:	4291      	cmp	r1, r2
 801091c:	d014      	beq.n	8010948 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801091e:	2063      	movs	r0, #99	; 0x63
 8010920:	f00b ff0a 	bl	801c738 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 8010924:	4b0d      	ldr	r3, [pc, #52]	; (801095c <GUI_Measure_Screen+0x4c>)
 8010926:	2000      	movs	r0, #0
 8010928:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 801092a:	4b0d      	ldr	r3, [pc, #52]	; (8010960 <GUI_Measure_Screen+0x50>)
 801092c:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 801092e:	4b0d      	ldr	r3, [pc, #52]	; (8010964 <GUI_Measure_Screen+0x54>)
 8010930:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 8010932:	f7fe ff0d 	bl	800f750 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010936:	f7ff f9bb 	bl	800fcb0 <GUI_Up_Panel>
		GUI_Down_Panel();
 801093a:	f7ff f9dd 	bl	800fcf8 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 801093e:	4a0a      	ldr	r2, [pc, #40]	; (8010968 <GUI_Measure_Screen+0x58>)
 8010940:	2301      	movs	r3, #1
 8010942:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 8010944:	7023      	strb	r3, [r4, #0]
 8010946:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 8010948:	f7ff ff80 	bl	801084c <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 801094c:	2000      	movs	r0, #0
 801094e:	f7fe feff 	bl	800f750 <Measure_Elements_Draw>
 8010952:	e7f4      	b.n	801093e <GUI_Measure_Screen+0x2e>
 8010954:	20005701 	.word	0x20005701
 8010958:	2000022a 	.word	0x2000022a
 801095c:	20005727 	.word	0x20005727
 8010960:	20005726 	.word	0x20005726
 8010964:	2000572b 	.word	0x2000572b
 8010968:	20090abd 	.word	0x20090abd

0801096c <GUI_Measure2_Screen>:
{
 801096c:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 801096e:	4b13      	ldr	r3, [pc, #76]	; (80109bc <GUI_Measure2_Screen+0x50>)
 8010970:	4c13      	ldr	r4, [pc, #76]	; (80109c0 <GUI_Measure2_Screen+0x54>)
 8010972:	2202      	movs	r2, #2
 8010974:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 8010976:	4b13      	ldr	r3, [pc, #76]	; (80109c4 <GUI_Measure2_Screen+0x58>)
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	4293      	cmp	r3, r2
 801097c:	d017      	beq.n	80109ae <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801097e:	2063      	movs	r0, #99	; 0x63
 8010980:	f00b feda 	bl	801c738 <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 8010984:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <GUI_Measure2_Screen+0x5c>)
 8010986:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 8010988:	4b10      	ldr	r3, [pc, #64]	; (80109cc <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 801098a:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 801098c:	2201      	movs	r2, #1
 801098e:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010990:	4a0f      	ldr	r2, [pc, #60]	; (80109d0 <GUI_Measure2_Screen+0x64>)
 8010992:	2300      	movs	r3, #0
 8010994:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010996:	4a0f      	ldr	r2, [pc, #60]	; (80109d4 <GUI_Measure2_Screen+0x68>)
 8010998:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 801099a:	f7fe fed9 	bl	800f750 <Measure_Elements_Draw>
		GUI_Up_Panel();
 801099e:	f7ff f987 	bl	800fcb0 <GUI_Up_Panel>
		GUI_Down_Panel();
 80109a2:	f7ff f9a9 	bl	800fcf8 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 80109a6:	4b0c      	ldr	r3, [pc, #48]	; (80109d8 <GUI_Measure2_Screen+0x6c>)
 80109a8:	2201      	movs	r2, #1
 80109aa:	701a      	strb	r2, [r3, #0]
 80109ac:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 80109ae:	f7ff ff4d 	bl	801084c <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 80109b2:	7820      	ldrb	r0, [r4, #0]
 80109b4:	f7fe fecc 	bl	800f750 <Measure_Elements_Draw>
 80109b8:	e7f5      	b.n	80109a6 <GUI_Measure2_Screen+0x3a>
 80109ba:	bf00      	nop
 80109bc:	20000231 	.word	0x20000231
 80109c0:	20005724 	.word	0x20005724
 80109c4:	2000022a 	.word	0x2000022a
 80109c8:	20005730 	.word	0x20005730
 80109cc:	2000572b 	.word	0x2000572b
 80109d0:	20005727 	.word	0x20005727
 80109d4:	20005726 	.word	0x20005726
 80109d8:	20090abd 	.word	0x20090abd

080109dc <GUI_Measure3_Screen>:
{
 80109dc:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 80109de:	4b12      	ldr	r3, [pc, #72]	; (8010a28 <GUI_Measure3_Screen+0x4c>)
 80109e0:	4c12      	ldr	r4, [pc, #72]	; (8010a2c <GUI_Measure3_Screen+0x50>)
 80109e2:	2502      	movs	r5, #2
 80109e4:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 80109e6:	4b12      	ldr	r3, [pc, #72]	; (8010a30 <GUI_Measure3_Screen+0x54>)
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	2b03      	cmp	r3, #3
 80109ec:	d016      	beq.n	8010a1c <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80109ee:	2063      	movs	r0, #99	; 0x63
 80109f0:	f00b fea2 	bl	801c738 <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 80109f4:	4b0f      	ldr	r3, [pc, #60]	; (8010a34 <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 80109f6:	4a10      	ldr	r2, [pc, #64]	; (8010a38 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 80109f8:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 80109fa:	4b10      	ldr	r3, [pc, #64]	; (8010a3c <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 80109fc:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 80109fe:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010a04:	4a0e      	ldr	r2, [pc, #56]	; (8010a40 <GUI_Measure3_Screen+0x64>)
 8010a06:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010a08:	f7fe fea2 	bl	800f750 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010a0c:	f7ff f950 	bl	800fcb0 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010a10:	f7ff f972 	bl	800fcf8 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 8010a14:	4b0b      	ldr	r3, [pc, #44]	; (8010a44 <GUI_Measure3_Screen+0x68>)
 8010a16:	2201      	movs	r2, #1
 8010a18:	701a      	strb	r2, [r3, #0]
 8010a1a:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 8010a1c:	f7ff ff16 	bl	801084c <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 8010a20:	7820      	ldrb	r0, [r4, #0]
 8010a22:	f7fe fe95 	bl	800f750 <Measure_Elements_Draw>
 8010a26:	e7f5      	b.n	8010a14 <GUI_Measure3_Screen+0x38>
 8010a28:	20000231 	.word	0x20000231
 8010a2c:	20005724 	.word	0x20005724
 8010a30:	2000022a 	.word	0x2000022a
 8010a34:	20005730 	.word	0x20005730
 8010a38:	20005727 	.word	0x20005727
 8010a3c:	2000572b 	.word	0x2000572b
 8010a40:	20005726 	.word	0x20005726
 8010a44:	20090abd 	.word	0x20090abd

08010a48 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 8010a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4c:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 8010a50:	4c8f      	ldr	r4, [pc, #572]	; (8010c90 <GUI_Color_Screen+0x248>)
 8010a52:	4f90      	ldr	r7, [pc, #576]	; (8010c94 <GUI_Color_Screen+0x24c>)
 8010a54:	7823      	ldrb	r3, [r4, #0]
 8010a56:	4d90      	ldr	r5, [pc, #576]	; (8010c98 <GUI_Color_Screen+0x250>)
 8010a58:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 8010a5a:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 8010a5c:	d008      	beq.n	8010a70 <GUI_Color_Screen+0x28>
 8010a5e:	7823      	ldrb	r3, [r4, #0]
 8010a60:	2b0e      	cmp	r3, #14
 8010a62:	d005      	beq.n	8010a70 <GUI_Color_Screen+0x28>
 8010a64:	7823      	ldrb	r3, [r4, #0]
 8010a66:	2b0f      	cmp	r3, #15
 8010a68:	d002      	beq.n	8010a70 <GUI_Color_Screen+0x28>
 8010a6a:	7823      	ldrb	r3, [r4, #0]
 8010a6c:	2b12      	cmp	r3, #18
 8010a6e:	d125      	bne.n	8010abc <GUI_Color_Screen+0x74>
		GUI_Panels();	
 8010a70:	f7ff f986 	bl	800fd80 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 8010a74:	4b89      	ldr	r3, [pc, #548]	; (8010c9c <GUI_Color_Screen+0x254>)
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 8010a7a:	782b      	ldrb	r3, [r5, #0]
 8010a7c:	f013 0f05 	tst.w	r3, #5
 8010a80:	bf0c      	ite	eq
 8010a82:	200b      	moveq	r0, #11
 8010a84:	2012      	movne	r0, #18
 8010a86:	f013 0f04 	tst.w	r3, #4
 8010a8a:	4b85      	ldr	r3, [pc, #532]	; (8010ca0 <GUI_Color_Screen+0x258>)
 8010a8c:	bf18      	it	ne
 8010a8e:	21ac      	movne	r1, #172	; 0xac
 8010a90:	cb0c      	ldmia	r3, {r2, r3}
 8010a92:	bf08      	it	eq
 8010a94:	2196      	moveq	r1, #150	; 0x96
 8010a96:	f00c fa50 	bl	801cf3a <TFT_DrawBitmap>
		flag = 0;	
 8010a9a:	4b82      	ldr	r3, [pc, #520]	; (8010ca4 <GUI_Color_Screen+0x25c>)
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010aa0:	4b81      	ldr	r3, [pc, #516]	; (8010ca8 <GUI_Color_Screen+0x260>)
 8010aa2:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 8010aa4:	4b81      	ldr	r3, [pc, #516]	; (8010cac <GUI_Color_Screen+0x264>)
 8010aa6:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 8010aa8:	782b      	ldrb	r3, [r5, #0]
 8010aaa:	f013 0101 	ands.w	r1, r3, #1
 8010aae:	f000 80cf 	beq.w	8010c50 <GUI_Color_Screen+0x208>
 8010ab2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010ab6:	2012      	movs	r0, #18
 8010ab8:	f005 fdee 	bl	8016698 <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 8010abc:	4a7c      	ldr	r2, [pc, #496]	; (8010cb0 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 8010abe:	2305      	movs	r3, #5
 8010ac0:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 8010ac2:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 8010ac4:	4b7b      	ldr	r3, [pc, #492]	; (8010cb4 <GUI_Color_Screen+0x26c>)
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f040 80d4 	bne.w	8010c76 <GUI_Color_Screen+0x22e>
 8010ace:	4b7a      	ldr	r3, [pc, #488]	; (8010cb8 <GUI_Color_Screen+0x270>)
 8010ad0:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 8010ad4:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010ad8:	782b      	ldrb	r3, [r5, #0]
 8010ada:	07d9      	lsls	r1, r3, #31
 8010adc:	f140 8102 	bpl.w	8010ce4 <GUI_Color_Screen+0x29c>
 8010ae0:	4b76      	ldr	r3, [pc, #472]	; (8010cbc <GUI_Color_Screen+0x274>)
 8010ae2:	4a77      	ldr	r2, [pc, #476]	; (8010cc0 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 8010ae4:	4e77      	ldr	r6, [pc, #476]	; (8010cc4 <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	7812      	ldrb	r2, [r2, #0]
 8010aea:	eef0 0a48 	vmov.f32	s1, s16
 8010aee:	eeb0 0a68 	vmov.f32	s0, s17
 8010af2:	2146      	movs	r1, #70	; 0x46
 8010af4:	2014      	movs	r0, #20
 8010af6:	f004 fa89 	bl	801500c <GUI_Text_xy_Measure>
		 scr_refresh++;
 8010afa:	7833      	ldrb	r3, [r6, #0]
 8010afc:	3301      	adds	r3, #1
 8010afe:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 8010b00:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 8010b02:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 8010b04:	f240 809b 	bls.w	8010c3e <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 8010b08:	ee18 0a90 	vmov	r0, s17
 8010b0c:	f7ef fd34 	bl	8000578 <__aeabi_f2d>
 8010b10:	a35b      	add	r3, pc, #364	; (adr r3, 8010c80 <GUI_Color_Screen+0x238>)
 8010b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b16:	f04f 0401 	mov.w	r4, #1
 8010b1a:	f7ef fff3 	bl	8000b04 <__aeabi_dcmplt>
 8010b1e:	b900      	cbnz	r0, 8010b22 <GUI_Color_Screen+0xda>
 8010b20:	4604      	mov	r4, r0
 8010b22:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010b26:	f000 808a 	beq.w	8010c3e <GUI_Color_Screen+0x1f6>
 8010b2a:	ee18 0a10 	vmov	r0, s16
 8010b2e:	f7ef fd23 	bl	8000578 <__aeabi_f2d>
 8010b32:	a355      	add	r3, pc, #340	; (adr r3, 8010c88 <GUI_Color_Screen+0x240>)
 8010b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b38:	f04f 0401 	mov.w	r4, #1
 8010b3c:	f7ef ffe2 	bl	8000b04 <__aeabi_dcmplt>
 8010b40:	b900      	cbnz	r0, 8010b44 <GUI_Color_Screen+0xfc>
 8010b42:	4604      	mov	r4, r0
 8010b44:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010b48:	d079      	beq.n	8010c3e <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010b4a:	4b56      	ldr	r3, [pc, #344]	; (8010ca4 <GUI_Color_Screen+0x25c>)
 8010b4c:	4c5e      	ldr	r4, [pc, #376]	; (8010cc8 <GUI_Color_Screen+0x280>)
 8010b4e:	781a      	ldrb	r2, [r3, #0]
 8010b50:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 8010ccc <GUI_Color_Screen+0x284>
 8010b54:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010cd0 <GUI_Color_Screen+0x288>
 8010b58:	4698      	mov	r8, r3
 8010b5a:	2a00      	cmp	r2, #0
 8010b5c:	d03f      	beq.n	8010bde <GUI_Color_Screen+0x196>
 8010b5e:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010b62:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8010cd4 <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010b66:	edd4 5a00 	vldr	s11, [r4]
 8010b6a:	4a4d      	ldr	r2, [pc, #308]	; (8010ca0 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010b6c:	eef1 6a66 	vneg.f32	s13, s13
 8010b70:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010b74:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010b78:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010b7c:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010b80:	ab01      	add	r3, sp, #4
 8010b82:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010b86:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010cd8 <GUI_Color_Screen+0x290>
 8010b8a:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010b8e:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8010b92:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010b96:	eea6 7a89 	vfma.f32	s14, s13, s18
 8010b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b9e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010ba2:	edcd 7a05 	vstr	s15, [sp, #20]
 8010ba6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010baa:	edcd 7a06 	vstr	s15, [sp, #24]
 8010bae:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 8010bb2:	eee5 7aa9 	vfma.f32	s15, s11, s19
 8010bb6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010bbe:	edcd 7a07 	vstr	s15, [sp, #28]
 8010bc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8010bc6:	230f      	movs	r3, #15
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010bce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010bd2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010bd6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010bda:	f00c fa4b 	bl	801d074 <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010bde:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8010be2:	eee8 7aa9 	vfma.f32	s15, s17, s19
 8010be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bea:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 8010bec:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 8010bf4:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010bf8:	edcd 7a04 	vstr	s15, [sp, #16]
 8010bfc:	eddf 7a37 	vldr	s15, [pc, #220]	; 8010cdc <GUI_Color_Screen+0x294>
 8010c00:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8010c04:	eee8 7a49 	vfms.f32	s15, s16, s18
 8010c08:	4620      	mov	r0, r4
 8010c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c0e:	edcd 7a04 	vstr	s15, [sp, #16]
 8010c12:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8010c16:	4629      	mov	r1, r5
 8010c18:	f00b ffc9 	bl	801cbae <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	2202      	movs	r2, #2
 8010c20:	4629      	mov	r1, r5
 8010c22:	4620      	mov	r0, r4
 8010c24:	f00b ffc3 	bl	801cbae <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 8010c28:	2200      	movs	r2, #0
 8010c2a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010c2e:	2012      	movs	r0, #18
 8010c30:	f005 fd32 	bl	8016698 <GUI_Axes_Locus_XY>
		flag = 1;
 8010c34:	2301      	movs	r3, #1
 8010c36:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	703b      	strb	r3, [r7, #0]
}         
 8010c42:	b009      	add	sp, #36	; 0x24
 8010c44:	ecbd 8b04 	vpop	{d8-d9}
 8010c48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 8010c4c:	f7ff bdfe 	b.w	801084c <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 8010c50:	f013 0204 	ands.w	r2, r3, #4
 8010c54:	d006      	beq.n	8010c64 <GUI_Color_Screen+0x21c>
 8010c56:	460a      	mov	r2, r1
 8010c58:	2012      	movs	r0, #18
 8010c5a:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010c5e:	f005 fd81 	bl	8016764 <GUI_Axes_Locus_LUV>
 8010c62:	e72b      	b.n	8010abc <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 8010c64:	0798      	lsls	r0, r3, #30
 8010c66:	f57f af29 	bpl.w	8010abc <GUI_Color_Screen+0x74>
 8010c6a:	f240 1113 	movw	r1, #275	; 0x113
 8010c6e:	2088      	movs	r0, #136	; 0x88
 8010c70:	f005 fdde 	bl	8016830 <GUI_Axes_Locus_Lab>
 8010c74:	e722      	b.n	8010abc <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 8010c76:	4b1a      	ldr	r3, [pc, #104]	; (8010ce0 <GUI_Color_Screen+0x298>)
 8010c78:	e72a      	b.n	8010ad0 <GUI_Color_Screen+0x88>
 8010c7a:	bf00      	nop
 8010c7c:	f3af 8000 	nop.w
 8010c80:	7ae147ae 	.word	0x7ae147ae
 8010c84:	3fe7ae14 	.word	0x3fe7ae14
 8010c88:	ae147ae1 	.word	0xae147ae1
 8010c8c:	3feae147 	.word	0x3feae147
 8010c90:	2000022a 	.word	0x2000022a
 8010c94:	200056a0 	.word	0x200056a0
 8010c98:	200056ff 	.word	0x200056ff
 8010c9c:	20005708 	.word	0x20005708
 8010ca0:	20091058 	.word	0x20091058
 8010ca4:	20005725 	.word	0x20005725
 8010ca8:	20005727 	.word	0x20005727
 8010cac:	20005726 	.word	0x20005726
 8010cb0:	20090abd 	.word	0x20090abd
 8010cb4:	20005704 	.word	0x20005704
 8010cb8:	2008f548 	.word	0x2008f548
 8010cbc:	20000ebf 	.word	0x20000ebf
 8010cc0:	20000ec0 	.word	0x20000ec0
 8010cc4:	2000572a 	.word	0x2000572a
 8010cc8:	2000571c 	.word	0x2000571c
 8010ccc:	43960000 	.word	0x43960000
 8010cd0:	43938000 	.word	0x43938000
 8010cd4:	43790000 	.word	0x43790000
 8010cd8:	43c78000 	.word	0x43c78000
 8010cdc:	43c80000 	.word	0x43c80000
 8010ce0:	2008f540 	.word	0x2008f540
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010ce4:	075a      	lsls	r2, r3, #29
 8010ce6:	f140 80fb 	bpl.w	8010ee0 <GUI_Color_Screen+0x498>
 8010cea:	4c71      	ldr	r4, [pc, #452]	; (8010eb0 <GUI_Color_Screen+0x468>)
 8010cec:	4b71      	ldr	r3, [pc, #452]	; (8010eb4 <GUI_Color_Screen+0x46c>)
 8010cee:	4a72      	ldr	r2, [pc, #456]	; (8010eb8 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 8010cf0:	4e72      	ldr	r6, [pc, #456]	; (8010ebc <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	7812      	ldrb	r2, [r2, #0]
 8010cf6:	edd4 0a01 	vldr	s1, [r4, #4]
 8010cfa:	ed94 0a00 	vldr	s0, [r4]
 8010cfe:	2146      	movs	r1, #70	; 0x46
 8010d00:	2014      	movs	r0, #20
 8010d02:	f004 fa45 	bl	8015190 <GUI_Text_uv_Measure>
		scr_refresh++;
 8010d06:	7833      	ldrb	r3, [r6, #0]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 8010d0c:	2b0f      	cmp	r3, #15
		scr_refresh++;
 8010d0e:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 8010d10:	d995      	bls.n	8010c3e <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 8010d12:	edd4 7a00 	vldr	s15, [r4]
 8010d16:	ed94 8a01 	vldr	s16, [r4, #4]
 8010d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d22:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010d26:	bfcc      	ite	gt
 8010d28:	2501      	movgt	r5, #1
 8010d2a:	2500      	movle	r5, #0
 8010d2c:	ee17 0a90 	vmov	r0, s15
 8010d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d34:	f005 0501 	and.w	r5, r5, #1
 8010d38:	bfd8      	it	le
 8010d3a:	2500      	movle	r5, #0
 8010d3c:	f7ef fc1c 	bl	8000578 <__aeabi_f2d>
 8010d40:	a357      	add	r3, pc, #348	; (adr r3, 8010ea0 <GUI_Color_Screen+0x458>)
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	f04f 0801 	mov.w	r8, #1
 8010d4a:	f7ef fedb 	bl	8000b04 <__aeabi_dcmplt>
 8010d4e:	b900      	cbnz	r0, 8010d52 <GUI_Color_Screen+0x30a>
 8010d50:	4680      	mov	r8, r0
 8010d52:	ea15 0f08 	tst.w	r5, r8
 8010d56:	f43f af72 	beq.w	8010c3e <GUI_Color_Screen+0x1f6>
 8010d5a:	ee18 0a10 	vmov	r0, s16
 8010d5e:	f7ef fc0b 	bl	8000578 <__aeabi_f2d>
 8010d62:	a351      	add	r3, pc, #324	; (adr r3, 8010ea8 <GUI_Color_Screen+0x460>)
 8010d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d68:	f04f 0501 	mov.w	r5, #1
 8010d6c:	f7ef feca 	bl	8000b04 <__aeabi_dcmplt>
 8010d70:	b900      	cbnz	r0, 8010d74 <GUI_Color_Screen+0x32c>
 8010d72:	4605      	mov	r5, r0
 8010d74:	f015 0fff 	tst.w	r5, #255	; 0xff
 8010d78:	f43f af61 	beq.w	8010c3e <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010d7c:	4d50      	ldr	r5, [pc, #320]	; (8010ec0 <GUI_Color_Screen+0x478>)
 8010d7e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8010edc <GUI_Color_Screen+0x494>
 8010d82:	782a      	ldrb	r2, [r5, #0]
 8010d84:	eddf 9a4f 	vldr	s19, [pc, #316]	; 8010ec4 <GUI_Color_Screen+0x47c>
 8010d88:	eddf 8a4f 	vldr	s17, [pc, #316]	; 8010ec8 <GUI_Color_Screen+0x480>
 8010d8c:	2a00      	cmp	r2, #0
 8010d8e:	d03f      	beq.n	8010e10 <GUI_Color_Screen+0x3c8>
 8010d90:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010d94:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010ecc <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010d98:	edd8 5a00 	vldr	s11, [r8]
 8010d9c:	4a4c      	ldr	r2, [pc, #304]	; (8010ed0 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010d9e:	eef1 6a66 	vneg.f32	s13, s13
 8010da2:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010da6:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010daa:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010dae:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010db2:	ab01      	add	r3, sp, #4
 8010db4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010db8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010ed4 <GUI_Color_Screen+0x48c>
 8010dbc:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010dc0:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8010dc4:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010dc8:	eea6 7aa9 	vfma.f32	s14, s13, s19
 8010dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010dd0:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010dd4:	edcd 7a05 	vstr	s15, [sp, #20]
 8010dd8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010ddc:	edcd 7a06 	vstr	s15, [sp, #24]
 8010de0:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 8010de4:	eee5 7aa8 	vfma.f32	s15, s11, s17
 8010de8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010df0:	edcd 7a07 	vstr	s15, [sp, #28]
 8010df4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010df8:	230c      	movs	r3, #12
 8010dfa:	9300      	str	r3, [sp, #0]
 8010dfc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010e00:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010e04:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010e08:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010e0c:	f00c f932 	bl	801d074 <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010e10:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010ed8 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010e14:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010e18:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010e1c:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010e20:	eef0 6a49 	vmov.f32	s13, s18
 8010e24:	eee7 6a69 	vfms.f32	s13, s14, s19
 8010e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e2c:	2204      	movs	r2, #4
 8010e2e:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 8010e32:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010e36:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010e3a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010e3e:	eeb0 7a48 	vmov.f32	s14, s16
 8010e42:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8010e46:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010e4a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010e4e:	edcd 7a05 	vstr	s15, [sp, #20]
 8010e52:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8010e56:	f00b feaa 	bl	801cbae <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 8010e5a:	edd4 7a01 	vldr	s15, [r4, #4]
 8010e5e:	eea7 9ae9 	vfms.f32	s18, s15, s19
 8010e62:	2300      	movs	r3, #0
 8010e64:	2202      	movs	r2, #2
 8010e66:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8010e6a:	edcd 7a04 	vstr	s15, [sp, #16]
 8010e6e:	edd4 7a00 	vldr	s15, [r4]
 8010e72:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010e76:	eea7 8aa8 	vfma.f32	s16, s15, s17
 8010e7a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010e7e:	edcd 7a05 	vstr	s15, [sp, #20]
 8010e82:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8010e86:	f00b fe92 	bl	801cbae <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010e90:	2012      	movs	r0, #18
 8010e92:	f005 fc67 	bl	8016764 <GUI_Axes_Locus_LUV>
			flag = 1;
 8010e96:	2301      	movs	r3, #1
 8010e98:	702b      	strb	r3, [r5, #0]
 8010e9a:	e6ce      	b.n	8010c3a <GUI_Color_Screen+0x1f2>
 8010e9c:	f3af 8000 	nop.w
 8010ea0:	c28f5c29 	.word	0xc28f5c29
 8010ea4:	3fe428f5 	.word	0x3fe428f5
 8010ea8:	ae147ae1 	.word	0xae147ae1
 8010eac:	3fe2e147 	.word	0x3fe2e147
 8010eb0:	2008f538 	.word	0x2008f538
 8010eb4:	20000ebf 	.word	0x20000ebf
 8010eb8:	20000ec0 	.word	0x20000ec0
 8010ebc:	2000572a 	.word	0x2000572a
 8010ec0:	20005725 	.word	0x20005725
 8010ec4:	43c60000 	.word	0x43c60000
 8010ec8:	43c98000 	.word	0x43c98000
 8010ecc:	43690000 	.word	0x43690000
 8010ed0:	20091058 	.word	0x20091058
 8010ed4:	43ca8000 	.word	0x43ca8000
 8010ed8:	43cb0000 	.word	0x43cb0000
 8010edc:	20005714 	.word	0x20005714
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 8010ee0:	079b      	lsls	r3, r3, #30
 8010ee2:	f57f aeac 	bpl.w	8010c3e <GUI_Color_Screen+0x1f6>
 8010ee6:	4984      	ldr	r1, [pc, #528]	; (80110f8 <GUI_Color_Screen+0x6b0>)
 8010ee8:	4c84      	ldr	r4, [pc, #528]	; (80110fc <GUI_Color_Screen+0x6b4>)
 8010eea:	7809      	ldrb	r1, [r1, #0]
 8010eec:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010ef0:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010ef4:	9102      	str	r1, [sp, #8]
 8010ef6:	4982      	ldr	r1, [pc, #520]	; (8011100 <GUI_Color_Screen+0x6b8>)
 8010ef8:	7809      	ldrb	r1, [r1, #0]
 8010efa:	9101      	str	r1, [sp, #4]
 8010efc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010f00:	9100      	str	r1, [sp, #0]
 8010f02:	2014      	movs	r0, #20
 8010f04:	2136      	movs	r1, #54	; 0x36
 8010f06:	f005 f8fb 	bl	8016100 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 8010f0a:	8863      	ldrh	r3, [r4, #2]
 8010f0c:	337f      	adds	r3, #127	; 0x7f
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	2bfe      	cmp	r3, #254	; 0xfe
 8010f12:	f63f ae94 	bhi.w	8010c3e <GUI_Color_Screen+0x1f6>
 8010f16:	88a3      	ldrh	r3, [r4, #4]
 8010f18:	337f      	adds	r3, #127	; 0x7f
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	2bfe      	cmp	r3, #254	; 0xfe
 8010f1e:	f63f ae8e 	bhi.w	8010c3e <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010f22:	4d78      	ldr	r5, [pc, #480]	; (8011104 <GUI_Color_Screen+0x6bc>)
 8010f24:	4e78      	ldr	r6, [pc, #480]	; (8011108 <GUI_Color_Screen+0x6c0>)
 8010f26:	782b      	ldrb	r3, [r5, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d05d      	beq.n	8010fe8 <GUI_Color_Screen+0x5a0>
 8010f2c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8010f30:	f7ef fb10 	bl	8000554 <__aeabi_i2d>
 8010f34:	a368      	add	r3, pc, #416	; (adr r3, 80110d8 <GUI_Color_Screen+0x690>)
 8010f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3a:	f7ef fb71 	bl	8000620 <__aeabi_dmul>
 8010f3e:	4682      	mov	sl, r0
 8010f40:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8010f44:	468b      	mov	fp, r1
 8010f46:	f7ef fb05 	bl	8000554 <__aeabi_i2d>
 8010f4a:	a363      	add	r3, pc, #396	; (adr r3, 80110d8 <GUI_Color_Screen+0x690>)
 8010f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f50:	f7ef fb66 	bl	8000620 <__aeabi_dmul>
 8010f54:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010f56:	4602      	mov	r2, r0
 8010f58:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010f5a:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	496b      	ldr	r1, [pc, #428]	; (801110c <GUI_Color_Screen+0x6c4>)
 8010f60:	f7ef f9aa 	bl	80002b8 <__aeabi_dsub>
 8010f64:	2200      	movs	r2, #0
 8010f66:	4b6a      	ldr	r3, [pc, #424]	; (8011110 <GUI_Color_Screen+0x6c8>)
 8010f68:	f7ef f9a6 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010f6c:	f7ef fe30 	bl	8000bd0 <__aeabi_d2uiz>
 8010f70:	b283      	uxth	r3, r0
 8010f72:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010f74:	2200      	movs	r2, #0
 8010f76:	4b67      	ldr	r3, [pc, #412]	; (8011114 <GUI_Color_Screen+0x6cc>)
 8010f78:	4650      	mov	r0, sl
 8010f7a:	4659      	mov	r1, fp
 8010f7c:	f7ef f99e 	bl	80002bc <__adddf3>
 8010f80:	2200      	movs	r2, #0
 8010f82:	4b63      	ldr	r3, [pc, #396]	; (8011110 <GUI_Color_Screen+0x6c8>)
 8010f84:	f7ef f998 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010f88:	f7ef fe22 	bl	8000bd0 <__aeabi_d2uiz>
 8010f8c:	b283      	uxth	r3, r0
 8010f8e:	4642      	mov	r2, r8
 8010f90:	9305      	str	r3, [sp, #20]
 8010f92:	a153      	add	r1, pc, #332	; (adr r1, 80110e0 <GUI_Color_Screen+0x698>)
 8010f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f98:	464b      	mov	r3, r9
 8010f9a:	f7ef f98d 	bl	80002b8 <__aeabi_dsub>
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	4b5b      	ldr	r3, [pc, #364]	; (8011110 <GUI_Color_Screen+0x6c8>)
 8010fa2:	f7ef f989 	bl	80002b8 <__aeabi_dsub>
 8010fa6:	f7ef fe13 	bl	8000bd0 <__aeabi_d2uiz>
 8010faa:	a34f      	add	r3, pc, #316	; (adr r3, 80110e8 <GUI_Color_Screen+0x6a0>)
 8010fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb0:	fa1f f880 	uxth.w	r8, r0
 8010fb4:	4659      	mov	r1, fp
 8010fb6:	4650      	mov	r0, sl
 8010fb8:	f7ef f980 	bl	80002bc <__adddf3>
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	4b54      	ldr	r3, [pc, #336]	; (8011110 <GUI_Color_Screen+0x6c8>)
 8010fc0:	f7ef f97a 	bl	80002b8 <__aeabi_dsub>
 8010fc4:	f7ef fe04 	bl	8000bd0 <__aeabi_d2uiz>
 8010fc8:	4a53      	ldr	r2, [pc, #332]	; (8011118 <GUI_Color_Screen+0x6d0>)
 8010fca:	fa1f fe80 	uxth.w	lr, r0
 8010fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fd2:	ab01      	add	r3, sp, #4
 8010fd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010fd8:	230c      	movs	r3, #12
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	9a05      	ldr	r2, [sp, #20]
 8010fde:	9b04      	ldr	r3, [sp, #16]
 8010fe0:	4641      	mov	r1, r8
 8010fe2:	4670      	mov	r0, lr
 8010fe4:	f00c f846 	bl	801d074 <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010fe8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010fec:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010ff0:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010ff2:	ee07 0a90 	vmov	s15, r0
 8010ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010ffa:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010ffe:	ee17 0a90 	vmov	r0, s15
 8011002:	f7ef fab9 	bl	8000578 <__aeabi_f2d>
 8011006:	a334      	add	r3, pc, #208	; (adr r3, 80110d8 <GUI_Color_Screen+0x690>)
 8011008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100c:	f7ef fb08 	bl	8000620 <__aeabi_dmul>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	a136      	add	r1, pc, #216	; (adr r1, 80110f0 <GUI_Color_Screen+0x6a8>)
 8011016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801101a:	f7ef f94d 	bl	80002b8 <__aeabi_dsub>
 801101e:	f7ef fdaf 	bl	8000b80 <__aeabi_d2iz>
 8011022:	ee07 8a90 	vmov	s15, r8
 8011026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801102a:	b206      	sxth	r6, r0
 801102c:	ee17 0a90 	vmov	r0, s15
 8011030:	f7ef faa2 	bl	8000578 <__aeabi_f2d>
 8011034:	a328      	add	r3, pc, #160	; (adr r3, 80110d8 <GUI_Color_Screen+0x690>)
 8011036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103a:	f7ef faf1 	bl	8000620 <__aeabi_dmul>
 801103e:	2200      	movs	r2, #0
 8011040:	4b36      	ldr	r3, [pc, #216]	; (801111c <GUI_Color_Screen+0x6d4>)
 8011042:	f7ef f93b 	bl	80002bc <__adddf3>
 8011046:	f7ef fd9b 	bl	8000b80 <__aeabi_d2iz>
 801104a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801104e:	2204      	movs	r2, #4
 8011050:	4631      	mov	r1, r6
 8011052:	b200      	sxth	r0, r0
 8011054:	f00b fdab 	bl	801cbae <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 8011058:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801105c:	ee07 0a90 	vmov	s15, r0
 8011060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011064:	ee17 0a90 	vmov	r0, s15
 8011068:	f7ef fa86 	bl	8000578 <__aeabi_f2d>
 801106c:	a31a      	add	r3, pc, #104	; (adr r3, 80110d8 <GUI_Color_Screen+0x690>)
 801106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011072:	f7ef fad5 	bl	8000620 <__aeabi_dmul>
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	a11d      	add	r1, pc, #116	; (adr r1, 80110f0 <GUI_Color_Screen+0x6a8>)
 801107c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011080:	f7ef f91a 	bl	80002b8 <__aeabi_dsub>
 8011084:	f7ef fd7c 	bl	8000b80 <__aeabi_d2iz>
 8011088:	b206      	sxth	r6, r0
 801108a:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801108e:	ee07 0a90 	vmov	s15, r0
 8011092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011096:	ee17 0a90 	vmov	r0, s15
 801109a:	f7ef fa6d 	bl	8000578 <__aeabi_f2d>
 801109e:	a30e      	add	r3, pc, #56	; (adr r3, 80110d8 <GUI_Color_Screen+0x690>)
 80110a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a4:	f7ef fabc 	bl	8000620 <__aeabi_dmul>
 80110a8:	2200      	movs	r2, #0
 80110aa:	4b1c      	ldr	r3, [pc, #112]	; (801111c <GUI_Color_Screen+0x6d4>)
 80110ac:	f7ef f906 	bl	80002bc <__adddf3>
 80110b0:	f7ef fd66 	bl	8000b80 <__aeabi_d2iz>
 80110b4:	2300      	movs	r3, #0
 80110b6:	2202      	movs	r2, #2
 80110b8:	4631      	mov	r1, r6
 80110ba:	b200      	sxth	r0, r0
 80110bc:	f00b fd77 	bl	801cbae <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 80110c0:	2200      	movs	r2, #0
 80110c2:	f240 1113 	movw	r1, #275	; 0x113
 80110c6:	2088      	movs	r0, #136	; 0x88
 80110c8:	f005 fbb2 	bl	8016830 <GUI_Axes_Locus_Lab>
				flag = 1;
 80110cc:	2301      	movs	r3, #1
 80110ce:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 80110d0:	4b13      	ldr	r3, [pc, #76]	; (8011120 <GUI_Color_Screen+0x6d8>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	701a      	strb	r2, [r3, #0]
 80110d6:	e5b2      	b.n	8010c3e <GUI_Color_Screen+0x1f6>
 80110d8:	5a1cac08 	.word	0x5a1cac08
 80110dc:	3fef3b64 	.word	0x3fef3b64
 80110e0:	00000000 	.word	0x00000000
 80110e4:	40712000 	.word	0x40712000
 80110e8:	00000000 	.word	0x00000000
 80110ec:	4060e000 	.word	0x4060e000
 80110f0:	00000000 	.word	0x00000000
 80110f4:	40713000 	.word	0x40713000
 80110f8:	20000ebf 	.word	0x20000ebf
 80110fc:	2008f51c 	.word	0x2008f51c
 8011100:	20000ec0 	.word	0x20000ec0
 8011104:	20005725 	.word	0x20005725
 8011108:	2000570c 	.word	0x2000570c
 801110c:	405f0000 	.word	0x405f0000
 8011110:	40140000 	.word	0x40140000
 8011114:	405f4000 	.word	0x405f4000
 8011118:	20091058 	.word	0x20091058
 801111c:	40610000 	.word	0x40610000
 8011120:	2000572a 	.word	0x2000572a

08011124 <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 8011124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 8011126:	4b39      	ldr	r3, [pc, #228]	; (801120c <GUI_ColorRend_Screen+0xe8>)
 8011128:	4d39      	ldr	r5, [pc, #228]	; (8011210 <GUI_ColorRend_Screen+0xec>)
 801112a:	4c3a      	ldr	r4, [pc, #232]	; (8011214 <GUI_ColorRend_Screen+0xf0>)
 801112c:	2202      	movs	r2, #2
 801112e:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 8011130:	4b39      	ldr	r3, [pc, #228]	; (8011218 <GUI_ColorRend_Screen+0xf4>)
 8011132:	4a3a      	ldr	r2, [pc, #232]	; (801121c <GUI_ColorRend_Screen+0xf8>)
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	7812      	ldrb	r2, [r2, #0]
 8011138:	429a      	cmp	r2, r3
 801113a:	d103      	bne.n	8011144 <GUI_ColorRend_Screen+0x20>
 801113c:	782a      	ldrb	r2, [r5, #0]
 801113e:	7823      	ldrb	r3, [r4, #0]
 8011140:	429a      	cmp	r2, r3
 8011142:	d02b      	beq.n	801119c <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 8011144:	f7fe fe1c 	bl	800fd80 <GUI_Panels>
	oldLowSignal = 0;
 8011148:	4a35      	ldr	r2, [pc, #212]	; (8011220 <GUI_ColorRend_Screen+0xfc>)
 801114a:	2300      	movs	r3, #0
 801114c:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 801114e:	4a35      	ldr	r2, [pc, #212]	; (8011224 <GUI_ColorRend_Screen+0x100>)
 8011150:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 8011152:	7823      	ldrb	r3, [r4, #0]
 8011154:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8011156:	4d34      	ldr	r5, [pc, #208]	; (8011228 <GUI_ColorRend_Screen+0x104>)
 8011158:	782a      	ldrb	r2, [r5, #0]
 801115a:	2a00      	cmp	r2, #0
 801115c:	d03c      	beq.n	80111d8 <GUI_ColorRend_Screen+0xb4>
 801115e:	4b33      	ldr	r3, [pc, #204]	; (801122c <GUI_ColorRend_Screen+0x108>)
 8011160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011164:	f7ef fd54 	bl	8000c10 <__aeabi_d2f>
 8011168:	210d      	movs	r1, #13
 801116a:	ee00 0a10 	vmov	s0, r0
 801116e:	2055      	movs	r0, #85	; 0x55
 8011170:	f002 fb4c 	bl	801380c <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 8011174:	4b2e      	ldr	r3, [pc, #184]	; (8011230 <GUI_ColorRend_Screen+0x10c>)
 8011176:	2206      	movs	r2, #6
 8011178:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 801117a:	782b      	ldrb	r3, [r5, #0]
 801117c:	07da      	lsls	r2, r3, #31
 801117e:	d52d      	bpl.n	80111dc <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8011180:	492c      	ldr	r1, [pc, #176]	; (8011234 <GUI_ColorRend_Screen+0x110>)
 8011182:	4b2d      	ldr	r3, [pc, #180]	; (8011238 <GUI_ColorRend_Screen+0x114>)
 8011184:	4a2d      	ldr	r2, [pc, #180]	; (801123c <GUI_ColorRend_Screen+0x118>)
 8011186:	f991 1000 	ldrsb.w	r1, [r1]
 801118a:	f993 3000 	ldrsb.w	r3, [r3]
 801118e:	f992 2000 	ldrsb.w	r2, [r2]
 8011192:	7820      	ldrb	r0, [r4, #0]
 8011194:	9100      	str	r1, [sp, #0]
 8011196:	492a      	ldr	r1, [pc, #168]	; (8011240 <GUI_ColorRend_Screen+0x11c>)
 8011198:	f7fd f9ba 	bl	800e510 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 801119c:	4b29      	ldr	r3, [pc, #164]	; (8011244 <GUI_ColorRend_Screen+0x120>)
 801119e:	781a      	ldrb	r2, [r3, #0]
 80111a0:	4b29      	ldr	r3, [pc, #164]	; (8011248 <GUI_ColorRend_Screen+0x124>)
 80111a2:	7819      	ldrb	r1, [r3, #0]
 80111a4:	4291      	cmp	r1, r2
 80111a6:	d012      	beq.n	80111ce <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 80111a8:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 80111aa:	4b1f      	ldr	r3, [pc, #124]	; (8011228 <GUI_ColorRend_Screen+0x104>)
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	07db      	lsls	r3, r3, #31
 80111b0:	d520      	bpl.n	80111f4 <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 80111b2:	4920      	ldr	r1, [pc, #128]	; (8011234 <GUI_ColorRend_Screen+0x110>)
 80111b4:	4b20      	ldr	r3, [pc, #128]	; (8011238 <GUI_ColorRend_Screen+0x114>)
 80111b6:	4a21      	ldr	r2, [pc, #132]	; (801123c <GUI_ColorRend_Screen+0x118>)
 80111b8:	f991 1000 	ldrsb.w	r1, [r1]
 80111bc:	f993 3000 	ldrsb.w	r3, [r3]
 80111c0:	f992 2000 	ldrsb.w	r2, [r2]
 80111c4:	7820      	ldrb	r0, [r4, #0]
 80111c6:	9100      	str	r1, [sp, #0]
 80111c8:	491d      	ldr	r1, [pc, #116]	; (8011240 <GUI_ColorRend_Screen+0x11c>)
 80111ca:	f7fd f9a1 	bl	800e510 <CRI_Draw>
}
 80111ce:	b003      	add	sp, #12
 80111d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 80111d4:	f7ff bb3a 	b.w	801084c <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 80111d8:	4b1c      	ldr	r3, [pc, #112]	; (801124c <GUI_ColorRend_Screen+0x128>)
 80111da:	e7c1      	b.n	8011160 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 80111dc:	491c      	ldr	r1, [pc, #112]	; (8011250 <GUI_ColorRend_Screen+0x12c>)
 80111de:	4b1d      	ldr	r3, [pc, #116]	; (8011254 <GUI_ColorRend_Screen+0x130>)
 80111e0:	4a1d      	ldr	r2, [pc, #116]	; (8011258 <GUI_ColorRend_Screen+0x134>)
 80111e2:	7809      	ldrb	r1, [r1, #0]
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	7812      	ldrb	r2, [r2, #0]
 80111e8:	7820      	ldrb	r0, [r4, #0]
 80111ea:	9100      	str	r1, [sp, #0]
 80111ec:	491b      	ldr	r1, [pc, #108]	; (801125c <GUI_ColorRend_Screen+0x138>)
 80111ee:	f7fb f965 	bl	800c4bc <CQS_Draw>
 80111f2:	e7d3      	b.n	801119c <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 80111f4:	4916      	ldr	r1, [pc, #88]	; (8011250 <GUI_ColorRend_Screen+0x12c>)
 80111f6:	4b17      	ldr	r3, [pc, #92]	; (8011254 <GUI_ColorRend_Screen+0x130>)
 80111f8:	4a17      	ldr	r2, [pc, #92]	; (8011258 <GUI_ColorRend_Screen+0x134>)
 80111fa:	7809      	ldrb	r1, [r1, #0]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	7812      	ldrb	r2, [r2, #0]
 8011200:	7820      	ldrb	r0, [r4, #0]
 8011202:	9100      	str	r1, [sp, #0]
 8011204:	4915      	ldr	r1, [pc, #84]	; (801125c <GUI_ColorRend_Screen+0x138>)
 8011206:	f7fb f959 	bl	800c4bc <CQS_Draw>
 801120a:	e7e0      	b.n	80111ce <GUI_ColorRend_Screen+0xaa>
 801120c:	20000231 	.word	0x20000231
 8011210:	20090ac0 	.word	0x20090ac0
 8011214:	20005709 	.word	0x20005709
 8011218:	2000022a 	.word	0x2000022a
 801121c:	20005701 	.word	0x20005701
 8011220:	20005727 	.word	0x20005727
 8011224:	20005726 	.word	0x20005726
 8011228:	20005700 	.word	0x20005700
 801122c:	200909c8 	.word	0x200909c8
 8011230:	20090abd 	.word	0x20090abd
 8011234:	20004658 	.word	0x20004658
 8011238:	2000465a 	.word	0x2000465a
 801123c:	20004659 	.word	0x20004659
 8011240:	2000465b 	.word	0x2000465b
 8011244:	200056fd 	.word	0x200056fd
 8011248:	200056fe 	.word	0x200056fe
 801124c:	200906f8 	.word	0x200906f8
 8011250:	20003634 	.word	0x20003634
 8011254:	20003635 	.word	0x20003635
 8011258:	20003633 	.word	0x20003633
 801125c:	20003624 	.word	0x20003624

08011260 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 8011260:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 8011262:	4b2d      	ldr	r3, [pc, #180]	; (8011318 <GUI_Display_Refresh+0xb8>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	3b01      	subs	r3, #1
 8011268:	2b11      	cmp	r3, #17
 801126a:	d80f      	bhi.n	801128c <GUI_Display_Refresh+0x2c>
 801126c:	e8df f003 	tbb	[pc, r3]
 8011270:	17130f09 	.word	0x17130f09
 8011274:	27231f1b 	.word	0x27231f1b
 8011278:	37332f2b 	.word	0x37332f2b
 801127c:	47433f3b 	.word	0x47433f3b
 8011280:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 8011282:	f7ff fb45 	bl	8010910 <GUI_Measure_Screen>
 8011286:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8011288:	4b24      	ldr	r3, [pc, #144]	; (801131c <GUI_Display_Refresh+0xbc>)
 801128a:	701a      	strb	r2, [r3, #0]
 801128c:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 801128e:	f7ff fb6d 	bl	801096c <GUI_Measure2_Screen>
 8011292:	2202      	movs	r2, #2
 8011294:	e7f8      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 8011296:	f7ff fba1 	bl	80109dc <GUI_Measure3_Screen>
 801129a:	2203      	movs	r2, #3
 801129c:	e7f4      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 801129e:	f7ff f99b 	bl	80105d8 <GUI_Graph_Screen>
 80112a2:	2204      	movs	r2, #4
 80112a4:	e7f0      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 80112a6:	f7ff fbcf 	bl	8010a48 <GUI_Color_Screen>
 80112aa:	2205      	movs	r2, #5
 80112ac:	e7ec      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 80112ae:	f7ff ff39 	bl	8011124 <GUI_ColorRend_Screen>
 80112b2:	2206      	movs	r2, #6
 80112b4:	e7e8      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 80112b6:	f7fe fda1 	bl	800fdfc <GUI_DataSet1_Screen>
 80112ba:	2207      	movs	r2, #7
 80112bc:	e7e4      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 80112be:	f7fe fe01 	bl	800fec4 <GUI_DataSet2_Screen>
 80112c2:	2208      	movs	r2, #8
 80112c4:	e7e0      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 80112c6:	f7fe fed5 	bl	8010074 <GUI_DataSet3_Screen>
 80112ca:	2209      	movs	r2, #9
 80112cc:	e7dc      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 80112ce:	f7fe ff45 	bl	801015c <GUI_DataSet4_Screen>
 80112d2:	220a      	movs	r2, #10
 80112d4:	e7d8      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 80112d6:	f7fe ffe3 	bl	80102a0 <GUI_DataSet5_Screen>
 80112da:	220b      	movs	r2, #11
 80112dc:	e7d4      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 80112de:	f7ff f819 	bl	8010314 <GUI_GraphSet1_Screen>
 80112e2:	220c      	movs	r2, #12
 80112e4:	e7d0      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 80112e6:	f7ff f85d 	bl	80103a4 <GUI_GraphSet2_Screen>
 80112ea:	220d      	movs	r2, #13
 80112ec:	e7cc      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 80112ee:	f7ff f893 	bl	8010418 <GUI_ColorSet1_Screen>
 80112f2:	220e      	movs	r2, #14
 80112f4:	e7c8      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 80112f6:	f7ff f8d3 	bl	80104a0 <GUI_ColorSet2_Screen>
 80112fa:	220f      	movs	r2, #15
 80112fc:	e7c4      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 80112fe:	f7ff f90b 	bl	8010518 <GUI_ColorRendSet_Screen>
 8011302:	2210      	movs	r2, #16
 8011304:	e7c0      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8011306:	f7fe fc19 	bl	800fb3c <GUI_Information_Screen>
 801130a:	2211      	movs	r2, #17
 801130c:	e7bc      	b.n	8011288 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 801130e:	f7fe fc63 	bl	800fbd8 <GUI_SD_Write_Screen>
 8011312:	2212      	movs	r2, #18
 8011314:	e7b8      	b.n	8011288 <GUI_Display_Refresh+0x28>
 8011316:	bf00      	nop
 8011318:	20005701 	.word	0x20005701
 801131c:	2000022a 	.word	0x2000022a

08011320 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 8011320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
//	uint16_t Touch_x = 0, Touch_y = 0;
//	TS_Get_XY1(TS_I2C_ADDRESS, &temp_x, &temp_y);
	switch(GUI_screen_state){
 8011324:	4c9d      	ldr	r4, [pc, #628]	; (801159c <GUI_Touch_Processing+0x27c>)
 8011326:	7823      	ldrb	r3, [r4, #0]
 8011328:	3b01      	subs	r3, #1
 801132a:	2b11      	cmp	r3, #17
 801132c:	f201 82c4 	bhi.w	80128b8 <GUI_Touch_Processing+0x1598>
 8011330:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011334:	00390012 	.word	0x00390012
 8011338:	00c9007b 	.word	0x00c9007b
 801133c:	0158010f 	.word	0x0158010f
 8011340:	03210212 	.word	0x03210212
 8011344:	04cb03ea 	.word	0x04cb03ea
 8011348:	071906b3 	.word	0x071906b3
 801134c:	081f07bc 	.word	0x081f07bc
 8011350:	09ad08f6 	.word	0x09ad08f6
 8011354:	00a10a74 	.word	0x00a10a74
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 8011358:	4b91      	ldr	r3, [pc, #580]	; (80115a0 <GUI_Touch_Processing+0x280>)
 801135a:	2201      	movs	r2, #1
 801135c:	701a      	strb	r2, [r3, #0]
		
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 801135e:	4b91      	ldr	r3, [pc, #580]	; (80115a4 <GUI_Touch_Processing+0x284>)
 8011360:	881a      	ldrh	r2, [r3, #0]
 8011362:	4b91      	ldr	r3, [pc, #580]	; (80115a8 <GUI_Touch_Processing+0x288>)
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801136a:	b29b      	uxth	r3, r3
 801136c:	2b36      	cmp	r3, #54	; 0x36
 801136e:	f102 31ff 	add.w	r1, r2, #4294967295
 8011372:	bf8c      	ite	hi
 8011374:	2300      	movhi	r3, #0
 8011376:	2301      	movls	r3, #1
 8011378:	2936      	cmp	r1, #54	; 0x36
 801137a:	d802      	bhi.n	8011382 <GUI_Touch_Processing+0x62>
 801137c:	b10b      	cbz	r3, 8011382 <GUI_Touch_Processing+0x62>
				{	
					GUI_screen_state = DataSet1_Screen;
 801137e:	2107      	movs	r1, #7
 8011380:	7021      	strb	r1, [r4, #0]
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //down
 8011382:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011386:	2936      	cmp	r1, #54	; 0x36
 8011388:	d86b      	bhi.n	8011462 <GUI_Touch_Processing+0x142>
 801138a:	2b00      	cmp	r3, #0
 801138c:	d069      	beq.n	8011462 <GUI_Touch_Processing+0x142>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 801138e:	4b87      	ldr	r3, [pc, #540]	; (80115ac <GUI_Touch_Processing+0x28c>)
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	bf0c      	ite	eq
 8011396:	2001      	moveq	r0, #1
 8011398:	2002      	movne	r0, #2
				{	
					GUI_screen_state = DataSet1_Screen;
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
				{	
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 801139a:	7020      	strb	r0, [r4, #0]

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
}
 801139c:	b002      	add	sp, #8
 801139e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					WriteFLASH_Screen(GUI_screen_state);
 80113a2:	f009 b8d3 	b.w	801a54c <WriteFLASH_Screen>
			preGUI_screen_state = GUI_screen_state;
 80113a6:	4b7e      	ldr	r3, [pc, #504]	; (80115a0 <GUI_Touch_Processing+0x280>)
 80113a8:	2202      	movs	r2, #2
 80113aa:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 80113ac:	4b7d      	ldr	r3, [pc, #500]	; (80115a4 <GUI_Touch_Processing+0x284>)
 80113ae:	881a      	ldrh	r2, [r3, #0]
 80113b0:	4b7d      	ldr	r3, [pc, #500]	; (80115a8 <GUI_Touch_Processing+0x288>)
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	2b36      	cmp	r3, #54	; 0x36
 80113bc:	f102 31ff 	add.w	r1, r2, #4294967295
 80113c0:	bf8c      	ite	hi
 80113c2:	2300      	movhi	r3, #0
 80113c4:	2301      	movls	r3, #1
 80113c6:	2936      	cmp	r1, #54	; 0x36
 80113c8:	d802      	bhi.n	80113d0 <GUI_Touch_Processing+0xb0>
 80113ca:	b10b      	cbz	r3, 80113d0 <GUI_Touch_Processing+0xb0>
					GUI_screen_state = DataSet1_Screen;
 80113cc:	2107      	movs	r1, #7
 80113ce:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 80113d0:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 80113d4:	2936      	cmp	r1, #54	; 0x36
 80113d6:	d807      	bhi.n	80113e8 <GUI_Touch_Processing+0xc8>
 80113d8:	b133      	cbz	r3, 80113e8 <GUI_Touch_Processing+0xc8>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 80113da:	4b74      	ldr	r3, [pc, #464]	; (80115ac <GUI_Touch_Processing+0x28c>)
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	2b02      	cmp	r3, #2
 80113e0:	bf34      	ite	cc
 80113e2:	2001      	movcc	r0, #1
 80113e4:	2003      	movcs	r0, #3
 80113e6:	e7d8      	b.n	801139a <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 80113e8:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 80113ec:	2936      	cmp	r1, #54	; 0x36
 80113ee:	d801      	bhi.n	80113f4 <GUI_Touch_Processing+0xd4>
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d13b      	bne.n	801146c <GUI_Touch_Processing+0x14c>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 80113f4:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 80113f8:	2936      	cmp	r1, #54	; 0x36
 80113fa:	d801      	bhi.n	8011400 <GUI_Touch_Processing+0xe0>
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d142      	bne.n	8011486 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8011400:	3a6d      	subs	r2, #109	; 0x6d
 8011402:	2a36      	cmp	r2, #54	; 0x36
 8011404:	d837      	bhi.n	8011476 <GUI_Touch_Processing+0x156>
 8011406:	2b00      	cmp	r3, #0
 8011408:	d035      	beq.n	8011476 <GUI_Touch_Processing+0x156>
						pause = !pause;
 801140a:	4a69      	ldr	r2, [pc, #420]	; (80115b0 <GUI_Touch_Processing+0x290>)
 801140c:	7813      	ldrb	r3, [r2, #0]
 801140e:	fab3 f383 	clz	r3, r3
 8011412:	095b      	lsrs	r3, r3, #5
						GUI_Button_Measure_Start_Pause(109, 426);
 8011414:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011418:	206d      	movs	r0, #109	; 0x6d
						pause = !pause;
 801141a:	7013      	strb	r3, [r2, #0]
						GUI_Button_Measure_Start_Pause(109, 426);
 801141c:	f001 fd36 	bl	8012e8c <GUI_Button_Measure_Start_Pause>
}
 8011420:	b002      	add	sp, #8
 8011422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Down_Panel();
 8011426:	f7fe bc67 	b.w	800fcf8 <GUI_Down_Panel>
			preGUI_screen_state = GUI_screen_state;
 801142a:	4b5d      	ldr	r3, [pc, #372]	; (80115a0 <GUI_Touch_Processing+0x280>)
 801142c:	2203      	movs	r2, #3
 801142e:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8011430:	4b5c      	ldr	r3, [pc, #368]	; (80115a4 <GUI_Touch_Processing+0x284>)
 8011432:	881a      	ldrh	r2, [r3, #0]
 8011434:	4b5c      	ldr	r3, [pc, #368]	; (80115a8 <GUI_Touch_Processing+0x288>)
 8011436:	881b      	ldrh	r3, [r3, #0]
 8011438:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801143c:	b29b      	uxth	r3, r3
 801143e:	2b36      	cmp	r3, #54	; 0x36
 8011440:	f102 31ff 	add.w	r1, r2, #4294967295
 8011444:	bf8c      	ite	hi
 8011446:	2300      	movhi	r3, #0
 8011448:	2301      	movls	r3, #1
 801144a:	2936      	cmp	r1, #54	; 0x36
 801144c:	d802      	bhi.n	8011454 <GUI_Touch_Processing+0x134>
 801144e:	b10b      	cbz	r3, 8011454 <GUI_Touch_Processing+0x134>
					GUI_screen_state = DataSet1_Screen;
 8011450:	2107      	movs	r1, #7
 8011452:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Down
 8011454:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011458:	2936      	cmp	r1, #54	; 0x36
 801145a:	d802      	bhi.n	8011462 <GUI_Touch_Processing+0x142>
 801145c:	b10b      	cbz	r3, 8011462 <GUI_Touch_Processing+0x142>
					GUI_screen_state = Measure_Screen;
 801145e:	2001      	movs	r0, #1
 8011460:	e79b      	b.n	801139a <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8011462:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011466:	2936      	cmp	r1, #54	; 0x36
 8011468:	d808      	bhi.n	801147c <GUI_Touch_Processing+0x15c>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 801146a:	b13b      	cbz	r3, 801147c <GUI_Touch_Processing+0x15c>
					WriteFLASH_Screen(Graph_Screen);
 801146c:	2004      	movs	r0, #4
 801146e:	f009 f86d 	bl	801a54c <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 8011472:	2304      	movs	r3, #4
 8011474:	7023      	strb	r3, [r4, #0]
}
 8011476:	b002      	add	sp, #8
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 801147c:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8011480:	2936      	cmp	r1, #54	; 0x36
 8011482:	d807      	bhi.n	8011494 <GUI_Touch_Processing+0x174>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8011484:	b133      	cbz	r3, 8011494 <GUI_Touch_Processing+0x174>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 8011486:	4b4b      	ldr	r3, [pc, #300]	; (80115b4 <GUI_Touch_Processing+0x294>)
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1f3      	bne.n	8011476 <GUI_Touch_Processing+0x156>
 801148e:	2312      	movs	r3, #18
 8011490:	7023      	strb	r3, [r4, #0]
 8011492:	e7f0      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8011494:	3a6d      	subs	r2, #109	; 0x6d
 8011496:	2a36      	cmp	r2, #54	; 0x36
 8011498:	d8ed      	bhi.n	8011476 <GUI_Touch_Processing+0x156>
 801149a:	2b00      	cmp	r3, #0
 801149c:	d0eb      	beq.n	8011476 <GUI_Touch_Processing+0x156>
						pause = !pause;
 801149e:	4a44      	ldr	r2, [pc, #272]	; (80115b0 <GUI_Touch_Processing+0x290>)
 80114a0:	7813      	ldrb	r3, [r2, #0]
 80114a2:	fab3 f383 	clz	r3, r3
 80114a6:	095b      	lsrs	r3, r3, #5
						GUI_Button_Measure_Start_Pause(109, 426);
 80114a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80114ac:	206d      	movs	r0, #109	; 0x6d
						pause = !pause;
 80114ae:	7013      	strb	r3, [r2, #0]
						GUI_Button_Measure_Start_Pause(109, 426);
 80114b0:	f001 fcec 	bl	8012e8c <GUI_Button_Measure_Start_Pause>
						GUI_Bar_Measure(85, 13, 0.0);
 80114b4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80115b8 <GUI_Touch_Processing+0x298>
 80114b8:	210d      	movs	r1, #13
 80114ba:	2055      	movs	r0, #85	; 0x55
}
 80114bc:	b002      	add	sp, #8
 80114be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Bar_Measure(85, 13, 0.0);
 80114c2:	f002 b9a3 	b.w	801380c <GUI_Bar_Measure>
			preGUI_screen_state = GUI_screen_state;
 80114c6:	4b36      	ldr	r3, [pc, #216]	; (80115a0 <GUI_Touch_Processing+0x280>)
 80114c8:	2204      	movs	r2, #4
 80114ca:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 80114cc:	4b35      	ldr	r3, [pc, #212]	; (80115a4 <GUI_Touch_Processing+0x284>)
 80114ce:	881a      	ldrh	r2, [r3, #0]
 80114d0:	4b35      	ldr	r3, [pc, #212]	; (80115a8 <GUI_Touch_Processing+0x288>)
 80114d2:	881b      	ldrh	r3, [r3, #0]
 80114d4:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 80114d8:	b29b      	uxth	r3, r3
 80114da:	2b36      	cmp	r3, #54	; 0x36
 80114dc:	f102 31ff 	add.w	r1, r2, #4294967295
 80114e0:	bf8c      	ite	hi
 80114e2:	2300      	movhi	r3, #0
 80114e4:	2301      	movls	r3, #1
 80114e6:	2936      	cmp	r1, #54	; 0x36
 80114e8:	d802      	bhi.n	80114f0 <GUI_Touch_Processing+0x1d0>
 80114ea:	b10b      	cbz	r3, 80114f0 <GUI_Touch_Processing+0x1d0>
					GUI_screen_state = GraphSet1_Screen;
 80114ec:	210c      	movs	r1, #12
 80114ee:	7021      	strb	r1, [r4, #0]
			if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 80114f0:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 80114f4:	2936      	cmp	r1, #54	; 0x36
 80114f6:	d808      	bhi.n	801150a <GUI_Touch_Processing+0x1ea>
 80114f8:	b13b      	cbz	r3, 801150a <GUI_Touch_Processing+0x1ea>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 80114fa:	4a30      	ldr	r2, [pc, #192]	; (80115bc <GUI_Touch_Processing+0x29c>)
 80114fc:	7813      	ldrb	r3, [r2, #0]
 80114fe:	2b01      	cmp	r3, #1
 8011500:	bf94      	ite	ls
 8011502:	3301      	addls	r3, #1
 8011504:	2300      	movhi	r3, #0
 8011506:	7013      	strb	r3, [r2, #0]
 8011508:	e7b5      	b.n	8011476 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 801150a:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 801150e:	2936      	cmp	r1, #54	; 0x36
 8011510:	d806      	bhi.n	8011520 <GUI_Touch_Processing+0x200>
 8011512:	b12b      	cbz	r3, 8011520 <GUI_Touch_Processing+0x200>
					WriteFLASH_Screen(Color_Screen);
 8011514:	2005      	movs	r0, #5
 8011516:	f009 f819 	bl	801a54c <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 801151a:	2305      	movs	r3, #5
 801151c:	7023      	strb	r3, [r4, #0]
 801151e:	e7aa      	b.n	8011476 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011520:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8011524:	2936      	cmp	r1, #54	; 0x36
 8011526:	d801      	bhi.n	801152c <GUI_Touch_Processing+0x20c>
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1ac      	bne.n	8011486 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 801152c:	3a6d      	subs	r2, #109	; 0x6d
 801152e:	2a36      	cmp	r2, #54	; 0x36
 8011530:	d8a1      	bhi.n	8011476 <GUI_Touch_Processing+0x156>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d09f      	beq.n	8011476 <GUI_Touch_Processing+0x156>
					pause = !pause;
 8011536:	4a1e      	ldr	r2, [pc, #120]	; (80115b0 <GUI_Touch_Processing+0x290>)
 8011538:	7813      	ldrb	r3, [r2, #0]
 801153a:	fab3 f383 	clz	r3, r3
 801153e:	095b      	lsrs	r3, r3, #5
					GUI_Button_Measure_Start_Pause(109, 426);
 8011540:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011544:	206d      	movs	r0, #109	; 0x6d
					pause = !pause;
 8011546:	7013      	strb	r3, [r2, #0]
}
 8011548:	b002      	add	sp, #8
 801154a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Button_Measure_Start_Pause(109, 426);
 801154e:	f001 bc9d 	b.w	8012e8c <GUI_Button_Measure_Start_Pause>
			preGUI_screen_state = GUI_screen_state;
 8011552:	4b13      	ldr	r3, [pc, #76]	; (80115a0 <GUI_Touch_Processing+0x280>)
 8011554:	2205      	movs	r2, #5
 8011556:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8011558:	4b12      	ldr	r3, [pc, #72]	; (80115a4 <GUI_Touch_Processing+0x284>)
 801155a:	881a      	ldrh	r2, [r3, #0]
 801155c:	4b12      	ldr	r3, [pc, #72]	; (80115a8 <GUI_Touch_Processing+0x288>)
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8011564:	b29b      	uxth	r3, r3
 8011566:	2b36      	cmp	r3, #54	; 0x36
 8011568:	f102 31ff 	add.w	r1, r2, #4294967295
 801156c:	bf8c      	ite	hi
 801156e:	2300      	movhi	r3, #0
 8011570:	2301      	movls	r3, #1
 8011572:	2936      	cmp	r1, #54	; 0x36
 8011574:	d807      	bhi.n	8011586 <GUI_Touch_Processing+0x266>
 8011576:	b133      	cbz	r3, 8011586 <GUI_Touch_Processing+0x266>
					preColor_Field = Color_Field;
 8011578:	4b11      	ldr	r3, [pc, #68]	; (80115c0 <GUI_Touch_Processing+0x2a0>)
 801157a:	781a      	ldrb	r2, [r3, #0]
 801157c:	4b11      	ldr	r3, [pc, #68]	; (80115c4 <GUI_Touch_Processing+0x2a4>)
 801157e:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8011580:	230e      	movs	r3, #14
 8011582:	7023      	strb	r3, [r4, #0]
 8011584:	e777      	b.n	8011476 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8011586:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 801158a:	2936      	cmp	r1, #54	; 0x36
 801158c:	d81c      	bhi.n	80115c8 <GUI_Touch_Processing+0x2a8>
 801158e:	b1db      	cbz	r3, 80115c8 <GUI_Touch_Processing+0x2a8>
					WriteFLASH_Screen(Color_Rendition_Screen);
 8011590:	2006      	movs	r0, #6
 8011592:	f008 ffdb 	bl	801a54c <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 8011596:	2306      	movs	r3, #6
 8011598:	7023      	strb	r3, [r4, #0]
 801159a:	e76c      	b.n	8011476 <GUI_Touch_Processing+0x156>
 801159c:	20005701 	.word	0x20005701
 80115a0:	2000022a 	.word	0x2000022a
 80115a4:	20054942 	.word	0x20054942
 80115a8:	20054944 	.word	0x20054944
 80115ac:	2000572b 	.word	0x2000572b
 80115b0:	20005728 	.word	0x20005728
 80115b4:	20095c5c 	.word	0x20095c5c
 80115b8:	00000000 	.word	0x00000000
 80115bc:	2000570a 	.word	0x2000570a
 80115c0:	200056ff 	.word	0x200056ff
 80115c4:	20005729 	.word	0x20005729
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 80115c8:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 80115cc:	2936      	cmp	r1, #54	; 0x36
 80115ce:	d801      	bhi.n	80115d4 <GUI_Touch_Processing+0x2b4>
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d1b0      	bne.n	8011536 <GUI_Touch_Processing+0x216>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 80115d4:	3a37      	subs	r2, #55	; 0x37
 80115d6:	2a36      	cmp	r2, #54	; 0x36
 80115d8:	f63f af4d 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f47f af52 	bne.w	8011486 <GUI_Touch_Processing+0x166>
 80115e2:	e748      	b.n	8011476 <GUI_Touch_Processing+0x156>
			preGUI_screen_state = GUI_screen_state;
 80115e4:	4ba9      	ldr	r3, [pc, #676]	; (801188c <GUI_Touch_Processing+0x56c>)
 80115e6:	2206      	movs	r2, #6
 80115e8:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 80115ea:	4ba9      	ldr	r3, [pc, #676]	; (8011890 <GUI_Touch_Processing+0x570>)
 80115ec:	881a      	ldrh	r2, [r3, #0]
 80115ee:	4ba9      	ldr	r3, [pc, #676]	; (8011894 <GUI_Touch_Processing+0x574>)
 80115f0:	881b      	ldrh	r3, [r3, #0]
 80115f2:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	2b36      	cmp	r3, #54	; 0x36
 80115fa:	f102 31ff 	add.w	r1, r2, #4294967295
 80115fe:	bf8c      	ite	hi
 8011600:	2300      	movhi	r3, #0
 8011602:	2301      	movls	r3, #1
 8011604:	2936      	cmp	r1, #54	; 0x36
 8011606:	d803      	bhi.n	8011610 <GUI_Touch_Processing+0x2f0>
 8011608:	b113      	cbz	r3, 8011610 <GUI_Touch_Processing+0x2f0>
					GUI_screen_state = ColorRendSet_Screen;
 801160a:	2310      	movs	r3, #16
 801160c:	7023      	strb	r3, [r4, #0]
 801160e:	e732      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8011610:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011614:	2936      	cmp	r1, #54	; 0x36
 8011616:	d806      	bhi.n	8011626 <GUI_Touch_Processing+0x306>
 8011618:	b12b      	cbz	r3, 8011626 <GUI_Touch_Processing+0x306>
					WriteFLASH_Screen(Measure_Screen);
 801161a:	2001      	movs	r0, #1
 801161c:	f008 ff96 	bl	801a54c <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 8011620:	2301      	movs	r3, #1
 8011622:	7023      	strb	r3, [r4, #0]
 8011624:	e727      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8011626:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801162a:	2936      	cmp	r1, #54	; 0x36
 801162c:	d808      	bhi.n	8011640 <GUI_Touch_Processing+0x320>
 801162e:	b13b      	cbz	r3, 8011640 <GUI_Touch_Processing+0x320>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 8011630:	4a99      	ldr	r2, [pc, #612]	; (8011898 <GUI_Touch_Processing+0x578>)
 8011632:	7813      	ldrb	r3, [r2, #0]
 8011634:	2b01      	cmp	r3, #1
 8011636:	bf94      	ite	ls
 8011638:	3301      	addls	r3, #1
 801163a:	2300      	movhi	r3, #0
 801163c:	7013      	strb	r3, [r2, #0]
 801163e:	e71a      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8011640:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 8011644:	2936      	cmp	r1, #54	; 0x36
 8011646:	d877      	bhi.n	8011738 <GUI_Touch_Processing+0x418>
 8011648:	2b00      	cmp	r3, #0
 801164a:	d075      	beq.n	8011738 <GUI_Touch_Processing+0x418>
					if (Color_rend_Field & CRI_CQS){
 801164c:	4b93      	ldr	r3, [pc, #588]	; (801189c <GUI_Touch_Processing+0x57c>)
 801164e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801191c <GUI_Touch_Processing+0x5fc>
 8011652:	781c      	ldrb	r4, [r3, #0]
 8011654:	4e92      	ldr	r6, [pc, #584]	; (80118a0 <GUI_Touch_Processing+0x580>)
 8011656:	4f93      	ldr	r7, [pc, #588]	; (80118a4 <GUI_Touch_Processing+0x584>)
 8011658:	4d93      	ldr	r5, [pc, #588]	; (80118a8 <GUI_Touch_Processing+0x588>)
 801165a:	f014 0401 	ands.w	r4, r4, #1
 801165e:	d03f      	beq.n	80116e0 <GUI_Touch_Processing+0x3c0>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011660:	4892      	ldr	r0, [pc, #584]	; (80118ac <GUI_Touch_Processing+0x58c>)
						CRICQS_done = 0x00;
 8011662:	2400      	movs	r4, #0
 8011664:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011668:	f008 fe90 	bl	801a38c <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801166c:	4b90      	ldr	r3, [pc, #576]	; (80118b0 <GUI_Touch_Processing+0x590>)
 801166e:	4a91      	ldr	r2, [pc, #580]	; (80118b4 <GUI_Touch_Processing+0x594>)
 8011670:	4991      	ldr	r1, [pc, #580]	; (80118b8 <GUI_Touch_Processing+0x598>)
 8011672:	488e      	ldr	r0, [pc, #568]	; (80118ac <GUI_Touch_Processing+0x58c>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011674:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011678:	f7fd f91c 	bl	800e8b4 <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 801167c:	488f      	ldr	r0, [pc, #572]	; (80118bc <GUI_Touch_Processing+0x59c>)
 801167e:	f7fd f985 	bl	800e98c <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 8011682:	488f      	ldr	r0, [pc, #572]	; (80118c0 <GUI_Touch_Processing+0x5a0>)
 8011684:	f7fd f9a0 	bl	800e9c8 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011688:	4888      	ldr	r0, [pc, #544]	; (80118ac <GUI_Touch_Processing+0x58c>)
 801168a:	7839      	ldrb	r1, [r7, #0]
 801168c:	f7fd f9e4 	bl	800ea58 <Calculate_Tc>
 8011690:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8011694:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011698:	edcd 7a01 	vstr	s15, [sp, #4]
 801169c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80116a0:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 80116a2:	4298      	cmp	r0, r3
 80116a4:	d10b      	bne.n	80116be <GUI_Touch_Processing+0x39e>
 80116a6:	4b87      	ldr	r3, [pc, #540]	; (80118c4 <GUI_Touch_Processing+0x5a4>)
 80116a8:	4887      	ldr	r0, [pc, #540]	; (80118c8 <GUI_Touch_Processing+0x5a8>)
 80116aa:	701c      	strb	r4, [r3, #0]
 80116ac:	4b87      	ldr	r3, [pc, #540]	; (80118cc <GUI_Touch_Processing+0x5ac>)
 80116ae:	701c      	strb	r4, [r3, #0]
 80116b0:	4b87      	ldr	r3, [pc, #540]	; (80118d0 <GUI_Touch_Processing+0x5b0>)
 80116b2:	220e      	movs	r2, #14
 80116b4:	701c      	strb	r4, [r3, #0]
 80116b6:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80116b8:	f00f f923 	bl	8020902 <memset>
 80116bc:	e002      	b.n	80116c4 <GUI_Touch_Processing+0x3a4>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 80116be:	497b      	ldr	r1, [pc, #492]	; (80118ac <GUI_Touch_Processing+0x58c>)
 80116c0:	f7fb f816 	bl	800c6f0 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 80116c4:	4a83      	ldr	r2, [pc, #524]	; (80118d4 <GUI_Touch_Processing+0x5b4>)
						CRICQS_done = 0x01;
 80116c6:	2301      	movs	r3, #1
 80116c8:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 80116cc:	7813      	ldrb	r3, [r2, #0]
 80116ce:	fab3 f383 	clz	r3, r3
 80116d2:	095b      	lsrs	r3, r3, #5
 80116d4:	7013      	strb	r3, [r2, #0]
}
 80116d6:	b002      	add	sp, #8
 80116d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Display_Refresh();
 80116dc:	f7ff bdc0 	b.w	8011260 <GUI_Display_Refresh>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80116e0:	4b73      	ldr	r3, [pc, #460]	; (80118b0 <GUI_Touch_Processing+0x590>)
 80116e2:	4a74      	ldr	r2, [pc, #464]	; (80118b4 <GUI_Touch_Processing+0x594>)
 80116e4:	4974      	ldr	r1, [pc, #464]	; (80118b8 <GUI_Touch_Processing+0x598>)
 80116e6:	4871      	ldr	r0, [pc, #452]	; (80118ac <GUI_Touch_Processing+0x58c>)
						CRICQS_done = 0x00;
 80116e8:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80116ec:	f7fd f8e2 	bl	800e8b4 <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 80116f0:	4872      	ldr	r0, [pc, #456]	; (80118bc <GUI_Touch_Processing+0x59c>)
 80116f2:	f7fd f94b 	bl	800e98c <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 80116f6:	7839      	ldrb	r1, [r7, #0]
 80116f8:	486c      	ldr	r0, [pc, #432]	; (80118ac <GUI_Touch_Processing+0x58c>)
 80116fa:	f7fd f9ad 	bl	800ea58 <Calculate_Tc>
 80116fe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011702:	486a      	ldr	r0, [pc, #424]	; (80118ac <GUI_Touch_Processing+0x58c>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011704:	ee17 3a90 	vmov	r3, s15
 8011708:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 801170a:	f008 fe3f 	bl	801a38c <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 801170e:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011710:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011718:	4298      	cmp	r0, r3
 801171a:	d109      	bne.n	8011730 <GUI_Touch_Processing+0x410>
 801171c:	4b6e      	ldr	r3, [pc, #440]	; (80118d8 <GUI_Touch_Processing+0x5b8>)
 801171e:	486f      	ldr	r0, [pc, #444]	; (80118dc <GUI_Touch_Processing+0x5bc>)
 8011720:	701c      	strb	r4, [r3, #0]
 8011722:	4b6f      	ldr	r3, [pc, #444]	; (80118e0 <GUI_Touch_Processing+0x5c0>)
 8011724:	701c      	strb	r4, [r3, #0]
 8011726:	4b6f      	ldr	r3, [pc, #444]	; (80118e4 <GUI_Touch_Processing+0x5c4>)
 8011728:	220f      	movs	r2, #15
 801172a:	701c      	strb	r4, [r3, #0]
 801172c:	4621      	mov	r1, r4
 801172e:	e7c3      	b.n	80116b8 <GUI_Touch_Processing+0x398>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 8011730:	495e      	ldr	r1, [pc, #376]	; (80118ac <GUI_Touch_Processing+0x58c>)
 8011732:	f7f8 fe71 	bl	800a418 <cqs_func>
 8011736:	e7c5      	b.n	80116c4 <GUI_Touch_Processing+0x3a4>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011738:	3a37      	subs	r2, #55	; 0x37
 801173a:	2a36      	cmp	r2, #54	; 0x36
 801173c:	f63f ae9b 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 8011740:	2b00      	cmp	r3, #0
 8011742:	f43f ae98 	beq.w	8011476 <GUI_Touch_Processing+0x156>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 8011746:	4b68      	ldr	r3, [pc, #416]	; (80118e8 <GUI_Touch_Processing+0x5c8>)
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	b90b      	cbnz	r3, 8011750 <GUI_Touch_Processing+0x430>
 801174c:	2312      	movs	r3, #18
 801174e:	7023      	strb	r3, [r4, #0]
						pause = 0;
 8011750:	4b66      	ldr	r3, [pc, #408]	; (80118ec <GUI_Touch_Processing+0x5cc>)
 8011752:	2200      	movs	r2, #0
 8011754:	701a      	strb	r2, [r3, #0]
 8011756:	e68e      	b.n	8011476 <GUI_Touch_Processing+0x156>
			preGUI_screen_state = GUI_screen_state;
 8011758:	4b4c      	ldr	r3, [pc, #304]	; (801188c <GUI_Touch_Processing+0x56c>)
 801175a:	2207      	movs	r2, #7
 801175c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Down
 801175e:	4a4d      	ldr	r2, [pc, #308]	; (8011894 <GUI_Touch_Processing+0x574>)
 8011760:	4b4b      	ldr	r3, [pc, #300]	; (8011890 <GUI_Touch_Processing+0x570>)
 8011762:	8812      	ldrh	r2, [r2, #0]
 8011764:	881b      	ldrh	r3, [r3, #0]
 8011766:	f5a2 70d5 	sub.w	r0, r2, #426	; 0x1aa
 801176a:	2836      	cmp	r0, #54	; 0x36
 801176c:	f1a3 01a3 	sub.w	r1, r3, #163	; 0xa3
 8011770:	bf8c      	ite	hi
 8011772:	2000      	movhi	r0, #0
 8011774:	2001      	movls	r0, #1
 8011776:	2936      	cmp	r1, #54	; 0x36
 8011778:	d803      	bhi.n	8011782 <GUI_Touch_Processing+0x462>
 801177a:	b110      	cbz	r0, 8011782 <GUI_Touch_Processing+0x462>
					GUI_screen_state = DataSet2_Screen;
 801177c:	2308      	movs	r3, #8
 801177e:	7023      	strb	r3, [r4, #0]
 8011780:	e679      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=202 & Touch_y <=(202+54) ) //Mode_EL
 8011782:	f1a3 01b6 	sub.w	r1, r3, #182	; 0xb6
 8011786:	2936      	cmp	r1, #54	; 0x36
 8011788:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 801178c:	bf8c      	ite	hi
 801178e:	2100      	movhi	r1, #0
 8011790:	2101      	movls	r1, #1
 8011792:	2d36      	cmp	r5, #54	; 0x36
 8011794:	d827      	bhi.n	80117e6 <GUI_Touch_Processing+0x4c6>
 8011796:	b331      	cbz	r1, 80117e6 <GUI_Touch_Processing+0x4c6>
					Mode_EL = !Mode_EL;
 8011798:	4c55      	ldr	r4, [pc, #340]	; (80118f0 <GUI_Touch_Processing+0x5d0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801179a:	4b56      	ldr	r3, [pc, #344]	; (80118f4 <GUI_Touch_Processing+0x5d4>)
					Mode_EL = !Mode_EL;
 801179c:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801179e:	4856      	ldr	r0, [pc, #344]	; (80118f8 <GUI_Touch_Processing+0x5d8>)
					Mode_EL = !Mode_EL;
 80117a0:	2a00      	cmp	r2, #0
 80117a2:	bf0c      	ite	eq
 80117a4:	2201      	moveq	r2, #1
 80117a6:	2200      	movne	r2, #0
 80117a8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80117aa:	bf18      	it	ne
 80117ac:	4618      	movne	r0, r3
 80117ae:	4a53      	ldr	r2, [pc, #332]	; (80118fc <GUI_Touch_Processing+0x5dc>)
 80117b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80117b4:	f7fd fe04 	bl	800f3c0 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80117b8:	7822      	ldrb	r2, [r4, #0]
 80117ba:	4b51      	ldr	r3, [pc, #324]	; (8011900 <GUI_Touch_Processing+0x5e0>)
 80117bc:	2a00      	cmp	r2, #0
 80117be:	f040 87c5 	bne.w	801274c <GUI_Touch_Processing+0x142c>
 80117c2:	4a50      	ldr	r2, [pc, #320]	; (8011904 <GUI_Touch_Processing+0x5e4>)
 80117c4:	edd2 0a00 	vldr	s1, [r2]
 80117c8:	ed93 0a00 	vldr	s0, [r3]
 80117cc:	f008 fd28 	bl	801a220 <Rabs_calc_Factor2_Settings_change>
 80117d0:	4b4d      	ldr	r3, [pc, #308]	; (8011908 <GUI_Touch_Processing+0x5e8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80117d2:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80117d4:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80117d8:	21ca      	movs	r1, #202	; 0xca
 80117da:	20b6      	movs	r0, #182	; 0xb6
}
 80117dc:	b002      	add	sp, #8
 80117de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80117e2:	f001 bebf 	b.w	8013564 <GUI_Switch_ButtonActive>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=268 & Touch_y <=(268+54) ) //Bluetooth
 80117e6:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 80117ea:	2d36      	cmp	r5, #54	; 0x36
 80117ec:	d810      	bhi.n	8011810 <GUI_Touch_Processing+0x4f0>
 80117ee:	b179      	cbz	r1, 8011810 <GUI_Touch_Processing+0x4f0>
					Bluetooth = !Bluetooth;
 80117f0:	4b46      	ldr	r3, [pc, #280]	; (801190c <GUI_Touch_Processing+0x5ec>)
 80117f2:	781a      	ldrb	r2, [r3, #0]
 80117f4:	fab2 f282 	clz	r2, r2
 80117f8:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 80117fa:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80117fe:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8011800:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8011802:	f001 fe59 	bl	80134b8 <GUI_Switch_Button>
}
 8011806:	b002      	add	sp, #8
 8011808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Up_Panel();
 801180c:	f7fe ba50 	b.w	800fcb0 <GUI_Up_Panel>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=124 & Touch_y <=(174) ) // Information
 8011810:	f1a3 0108 	sub.w	r1, r3, #8
 8011814:	29f2      	cmp	r1, #242	; 0xf2
 8011816:	f1a2 057c 	sub.w	r5, r2, #124	; 0x7c
 801181a:	bf8c      	ite	hi
 801181c:	2100      	movhi	r1, #0
 801181e:	2101      	movls	r1, #1
 8011820:	2d32      	cmp	r5, #50	; 0x32
 8011822:	d803      	bhi.n	801182c <GUI_Touch_Processing+0x50c>
 8011824:	b111      	cbz	r1, 801182c <GUI_Touch_Processing+0x50c>
					GUI_screen_state = Information_Screen;
 8011826:	2311      	movs	r3, #17
 8011828:	7023      	strb	r3, [r4, #0]
 801182a:	e624      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //Illuminance
 801182c:	f1a3 05c8 	sub.w	r5, r3, #200	; 0xc8
 8011830:	2d36      	cmp	r5, #54	; 0x36
 8011832:	d80c      	bhi.n	801184e <GUI_Touch_Processing+0x52e>
 8011834:	f46f 77a3 	mvn.w	r7, #326	; 0x146
 8011838:	19d5      	adds	r5, r2, r7
 801183a:	2d36      	cmp	r5, #54	; 0x36
 801183c:	d807      	bhi.n	801184e <GUI_Touch_Processing+0x52e>
					Measure_Field ^= Illuminance;
 801183e:	4b34      	ldr	r3, [pc, #208]	; (8011910 <GUI_Touch_Processing+0x5f0>)
 8011840:	881a      	ldrh	r2, [r3, #0]
 8011842:	f082 0201 	eor.w	r2, r2, #1
 8011846:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8011848:	f002 0201 	and.w	r2, r2, #1
 801184c:	e1de      	b.n	8011c0c <GUI_Touch_Processing+0x8ec>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 801184e:	1e5d      	subs	r5, r3, #1
 8011850:	2d36      	cmp	r5, #54	; 0x36
 8011852:	d868      	bhi.n	8011926 <GUI_Touch_Processing+0x606>
 8011854:	2800      	cmp	r0, #0
 8011856:	d066      	beq.n	8011926 <GUI_Touch_Processing+0x606>
					WriteSDFLASH_t(sdfile_cnt);
 8011858:	4b2e      	ldr	r3, [pc, #184]	; (8011914 <GUI_Touch_Processing+0x5f4>)
 801185a:	2100      	movs	r1, #0
 801185c:	8818      	ldrh	r0, [r3, #0]
 801185e:	f008 fda7 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011862:	4b2d      	ldr	r3, [pc, #180]	; (8011918 <GUI_Touch_Processing+0x5f8>)
 8011864:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011866:	1e5a      	subs	r2, r3, #1
 8011868:	2a05      	cmp	r2, #5
 801186a:	d804      	bhi.n	8011876 <GUI_Touch_Processing+0x556>
 801186c:	e8df f002 	tbb	[pc, r2]
 8011870:	08030305 	.word	0x08030305
 8011874:	0b58      	.short	0x0b58
					GUI_screen_state = Prev_Inf_Screen;
 8011876:	7023      	strb	r3, [r4, #0]
 8011878:	e5fd      	b.n	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801187a:	2301      	movs	r3, #1
 801187c:	7023      	strb	r3, [r4, #0]
 801187e:	e5fa      	b.n	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011880:	2304      	movs	r3, #4
 8011882:	7023      	strb	r3, [r4, #0]
 8011884:	e5f7      	b.n	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011886:	2306      	movs	r3, #6
 8011888:	7023      	strb	r3, [r4, #0]
 801188a:	e5f4      	b.n	8011476 <GUI_Touch_Processing+0x156>
 801188c:	2000022a 	.word	0x2000022a
 8011890:	20054942 	.word	0x20054942
 8011894:	20054944 	.word	0x20054944
 8011898:	20005709 	.word	0x20005709
 801189c:	20005700 	.word	0x20005700
 80118a0:	20095904 	.word	0x20095904
 80118a4:	20005704 	.word	0x20005704
 80118a8:	20054940 	.word	0x20054940
 80118ac:	2000c53c 	.word	0x2000c53c
 80118b0:	2008d514 	.word	0x2008d514
 80118b4:	20052940 	.word	0x20052940
 80118b8:	2008a514 	.word	0x2008a514
 80118bc:	2008f522 	.word	0x2008f522
 80118c0:	2008f540 	.word	0x2008f540
 80118c4:	20004659 	.word	0x20004659
 80118c8:	2000465b 	.word	0x2000465b
 80118cc:	2000465a 	.word	0x2000465a
 80118d0:	20004658 	.word	0x20004658
 80118d4:	200056fd 	.word	0x200056fd
 80118d8:	20003633 	.word	0x20003633
 80118dc:	20003624 	.word	0x20003624
 80118e0:	20003635 	.word	0x20003635
 80118e4:	20003634 	.word	0x20003634
 80118e8:	20095c5c 	.word	0x20095c5c
 80118ec:	20005728 	.word	0x20005728
 80118f0:	20000ebc 	.word	0x20000ebc
 80118f4:	08101838 	.word	0x08101838
 80118f8:	08100838 	.word	0x08100838
 80118fc:	20051940 	.word	0x20051940
 8011900:	20009d2c 	.word	0x20009d2c
 8011904:	20009d28 	.word	0x20009d28
 8011908:	20009d34 	.word	0x20009d34
 801190c:	20090ac2 	.word	0x20090ac2
 8011910:	20005706 	.word	0x20005706
 8011914:	2000572e 	.word	0x2000572e
 8011918:	20090abd 	.word	0x20090abd
 801191c:	200056fc 	.word	0x200056fc
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011920:	2305      	movs	r3, #5
 8011922:	7023      	strb	r3, [r4, #0]
 8011924:	e5a7      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=80 & Touch_y <=(120) ) // Language change
 8011926:	3a50      	subs	r2, #80	; 0x50
 8011928:	2a28      	cmp	r2, #40	; 0x28
 801192a:	d80c      	bhi.n	8011946 <GUI_Touch_Processing+0x626>
 801192c:	b159      	cbz	r1, 8011946 <GUI_Touch_Processing+0x626>
					if (Language_status == Ru) Language_status=En;
 801192e:	4ba0      	ldr	r3, [pc, #640]	; (8011bb0 <GUI_Touch_Processing+0x890>)
 8011930:	781a      	ldrb	r2, [r3, #0]
 8011932:	b912      	cbnz	r2, 801193a <GUI_Touch_Processing+0x61a>
 8011934:	2201      	movs	r2, #1
 8011936:	701a      	strb	r2, [r3, #0]
 8011938:	e59d      	b.n	8011476 <GUI_Touch_Processing+0x156>
					else if (Language_status == En) Language_status=Ru;
 801193a:	2a01      	cmp	r2, #1
 801193c:	f47f ad9b 	bne.w	8011476 <GUI_Touch_Processing+0x156>
 8011940:	2200      	movs	r2, #0
 8011942:	701a      	strb	r2, [r3, #0]
 8011944:	e597      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011946:	f1a3 02d9 	sub.w	r2, r3, #217	; 0xd9
 801194a:	2a36      	cmp	r2, #54	; 0x36
 801194c:	d810      	bhi.n	8011970 <GUI_Touch_Processing+0x650>
 801194e:	b178      	cbz	r0, 8011970 <GUI_Touch_Processing+0x650>
					TFT_ON_OFF = 0x00;
 8011950:	4b98      	ldr	r3, [pc, #608]	; (8011bb4 <GUI_Touch_Processing+0x894>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011952:	4899      	ldr	r0, [pc, #612]	; (8011bb8 <GUI_Touch_Processing+0x898>)
					TFT_ON_OFF = 0x00;
 8011954:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011956:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 8011958:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801195a:	f7f4 fd73 	bl	8006444 <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801195e:	4897      	ldr	r0, [pc, #604]	; (8011bbc <GUI_Touch_Processing+0x89c>)
 8011960:	4622      	mov	r2, r4
 8011962:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8011966:	b002      	add	sp, #8
 8011968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801196c:	f7f0 bec4 	b.w	80026f8 <HAL_GPIO_WritePin>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011970:	3b37      	subs	r3, #55	; 0x37
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011972:	2b36      	cmp	r3, #54	; 0x36
 8011974:	e0c2      	b.n	8011afc <GUI_Touch_Processing+0x7dc>
				preGUI_screen_state = GUI_screen_state;
 8011976:	4b92      	ldr	r3, [pc, #584]	; (8011bc0 <GUI_Touch_Processing+0x8a0>)
 8011978:	2208      	movs	r2, #8
 801197a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )////down
 801197c:	4b91      	ldr	r3, [pc, #580]	; (8011bc4 <GUI_Touch_Processing+0x8a4>)
 801197e:	881a      	ldrh	r2, [r3, #0]
 8011980:	4b91      	ldr	r3, [pc, #580]	; (8011bc8 <GUI_Touch_Processing+0x8a8>)
 8011982:	881b      	ldrh	r3, [r3, #0]
 8011984:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011988:	2836      	cmp	r0, #54	; 0x36
 801198a:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801198e:	bf8c      	ite	hi
 8011990:	2000      	movhi	r0, #0
 8011992:	2001      	movls	r0, #1
 8011994:	2936      	cmp	r1, #54	; 0x36
 8011996:	d803      	bhi.n	80119a0 <GUI_Touch_Processing+0x680>
 8011998:	b110      	cbz	r0, 80119a0 <GUI_Touch_Processing+0x680>
					GUI_screen_state = DataSet3_Screen;
 801199a:	2309      	movs	r3, #9
 801199c:	7023      	strb	r3, [r4, #0]
 801199e:	e56a      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //Irradiance
 80119a0:	f1a2 01c8 	sub.w	r1, r2, #200	; 0xc8
 80119a4:	2936      	cmp	r1, #54	; 0x36
 80119a6:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 80119aa:	bf8c      	ite	hi
 80119ac:	2100      	movhi	r1, #0
 80119ae:	2101      	movls	r1, #1
 80119b0:	2d36      	cmp	r5, #54	; 0x36
 80119b2:	d808      	bhi.n	80119c6 <GUI_Touch_Processing+0x6a6>
 80119b4:	b139      	cbz	r1, 80119c6 <GUI_Touch_Processing+0x6a6>
					Measure_Field ^= Irradiance;
 80119b6:	4b85      	ldr	r3, [pc, #532]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
 80119b8:	881a      	ldrh	r2, [r3, #0]
 80119ba:	f082 0202 	eor.w	r2, r2, #2
 80119be:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80119c0:	f002 0202 	and.w	r2, r2, #2
 80119c4:	e0c7      	b.n	8011b56 <GUI_Touch_Processing+0x836>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //PPFD
 80119c6:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 80119ca:	2d36      	cmp	r5, #54	; 0x36
 80119cc:	d808      	bhi.n	80119e0 <GUI_Touch_Processing+0x6c0>
 80119ce:	b139      	cbz	r1, 80119e0 <GUI_Touch_Processing+0x6c0>
					Measure_Field ^= PPFD;
 80119d0:	4b7e      	ldr	r3, [pc, #504]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
 80119d2:	881a      	ldrh	r2, [r3, #0]
 80119d4:	f082 0204 	eor.w	r2, r2, #4
 80119d8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80119da:	f002 0204 	and.w	r2, r2, #4
 80119de:	e390      	b.n	8012102 <GUI_Touch_Processing+0xde2>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) ) //PPFD_BGR
 80119e0:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 80119e4:	2d36      	cmp	r5, #54	; 0x36
 80119e6:	d80e      	bhi.n	8011a06 <GUI_Touch_Processing+0x6e6>
 80119e8:	b169      	cbz	r1, 8011a06 <GUI_Touch_Processing+0x6e6>
					Measure_Field ^= PPFD_BGR;
 80119ea:	4b78      	ldr	r3, [pc, #480]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
 80119ec:	881a      	ldrh	r2, [r3, #0]
 80119ee:	f082 0208 	eor.w	r2, r2, #8
 80119f2:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 80119f4:	21c6      	movs	r1, #198	; 0xc6
 80119f6:	f002 0208 	and.w	r2, r2, #8
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80119fa:	20c8      	movs	r0, #200	; 0xc8
}
 80119fc:	b002      	add	sp, #8
 80119fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011a02:	f001 bce9 	b.w	80133d8 <GUI_CheckBox>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) ) //CCT
 8011a06:	f46f 7683 	mvn.w	r6, #262	; 0x106
 8011a0a:	199d      	adds	r5, r3, r6
 8011a0c:	2d36      	cmp	r5, #54	; 0x36
 8011a0e:	d80a      	bhi.n	8011a26 <GUI_Touch_Processing+0x706>
 8011a10:	b149      	cbz	r1, 8011a26 <GUI_Touch_Processing+0x706>
					Measure_Field ^= CCT;
 8011a12:	4b6e      	ldr	r3, [pc, #440]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
 8011a14:	881a      	ldrh	r2, [r3, #0]
 8011a16:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8011a1a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 8011a1c:	f240 1107 	movw	r1, #263	; 0x107
 8011a20:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011a24:	e7e9      	b.n	80119fa <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E
 8011a26:	f46f 75a3 	mvn.w	r5, #326	; 0x146
 8011a2a:	442b      	add	r3, r5
 8011a2c:	2b36      	cmp	r3, #54	; 0x36
 8011a2e:	bf8c      	ite	hi
 8011a30:	2300      	movhi	r3, #0
 8011a32:	2301      	movls	r3, #1
 8011a34:	b1c1      	cbz	r1, 8011a68 <GUI_Touch_Processing+0x748>
 8011a36:	b1bb      	cbz	r3, 8011a68 <GUI_Touch_Processing+0x748>
					Measure_Field ^= delta_E;
 8011a38:	4c64      	ldr	r4, [pc, #400]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
 8011a3a:	8822      	ldrh	r2, [r4, #0]
 8011a3c:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 8011a40:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 8011a42:	f240 1147 	movw	r1, #327	; 0x147
 8011a46:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011a4a:	20c8      	movs	r0, #200	; 0xc8
 8011a4c:	f001 fcc4 	bl	80133d8 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 8011a50:	8822      	ldrh	r2, [r4, #0]
 8011a52:	2300      	movs	r3, #0
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011a54:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011a58:	f240 1147 	movw	r1, #327	; 0x147
 8011a5c:	2082      	movs	r0, #130	; 0x82
}
 8011a5e:	b002      	add	sp, #8
 8011a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011a64:	f001 bb98 	b.w	8013198 <GUI_Button_Measure_deltaE_Small>
				else	if(Touch_x >= 130 & Touch_x <= (200+38) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E_measure_small
 8011a68:	f1a2 0182 	sub.w	r1, r2, #130	; 0x82
 8011a6c:	296c      	cmp	r1, #108	; 0x6c
 8011a6e:	d81b      	bhi.n	8011aa8 <GUI_Touch_Processing+0x788>
 8011a70:	b1d3      	cbz	r3, 8011aa8 <GUI_Touch_Processing+0x788>
					if(Measure_Field&delta_E)
 8011a72:	4c56      	ldr	r4, [pc, #344]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
 8011a74:	8823      	ldrh	r3, [r4, #0]
 8011a76:	051b      	lsls	r3, r3, #20
 8011a78:	f57f acfd 	bpl.w	8011476 <GUI_Touch_Processing+0x156>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 8011a7c:	4b54      	ldr	r3, [pc, #336]	; (8011bd0 <GUI_Touch_Processing+0x8b0>)
 8011a7e:	4855      	ldr	r0, [pc, #340]	; (8011bd4 <GUI_Touch_Processing+0x8b4>)
 8011a80:	7819      	ldrb	r1, [r3, #0]
 8011a82:	4b55      	ldr	r3, [pc, #340]	; (8011bd8 <GUI_Touch_Processing+0x8b8>)
 8011a84:	781a      	ldrb	r2, [r3, #0]
 8011a86:	4b55      	ldr	r3, [pc, #340]	; (8011bdc <GUI_Touch_Processing+0x8bc>)
 8011a88:	2900      	cmp	r1, #0
 8011a8a:	bf08      	it	eq
 8011a8c:	4618      	moveq	r0, r3
 8011a8e:	f7fd f97f 	bl	800ed90 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 8011a92:	4a53      	ldr	r2, [pc, #332]	; (8011be0 <GUI_Touch_Processing+0x8c0>)
 8011a94:	4b53      	ldr	r3, [pc, #332]	; (8011be4 <GUI_Touch_Processing+0x8c4>)
 8011a96:	8811      	ldrh	r1, [r2, #0]
 8011a98:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8011a9a:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 8011a9c:	8892      	ldrh	r2, [r2, #4]
 8011a9e:	809a      	strh	r2, [r3, #4]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8011aa0:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011aa2:	8822      	ldrh	r2, [r4, #0]
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e7d5      	b.n	8011a54 <GUI_Touch_Processing+0x734>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011aa8:	1e53      	subs	r3, r2, #1
 8011aaa:	2b36      	cmp	r3, #54	; 0x36
 8011aac:	d81d      	bhi.n	8011aea <GUI_Touch_Processing+0x7ca>
 8011aae:	b1e0      	cbz	r0, 8011aea <GUI_Touch_Processing+0x7ca>
					WriteSDFLASH_t(sdfile_cnt);
 8011ab0:	4b4d      	ldr	r3, [pc, #308]	; (8011be8 <GUI_Touch_Processing+0x8c8>)
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	8818      	ldrh	r0, [r3, #0]
 8011ab6:	f008 fc7b 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011aba:	4b4c      	ldr	r3, [pc, #304]	; (8011bec <GUI_Touch_Processing+0x8cc>)
 8011abc:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011abe:	1e5a      	subs	r2, r3, #1
 8011ac0:	2a05      	cmp	r2, #5
 8011ac2:	d804      	bhi.n	8011ace <GUI_Touch_Processing+0x7ae>
 8011ac4:	e8df f002 	tbb	[pc, r2]
 8011ac8:	08030305 	.word	0x08030305
 8011acc:	0b0e      	.short	0x0b0e
					GUI_screen_state = Prev_Inf_Screen;
 8011ace:	7023      	strb	r3, [r4, #0]
 8011ad0:	e4d1      	b.n	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	7023      	strb	r3, [r4, #0]
 8011ad6:	e4ce      	b.n	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011ad8:	2304      	movs	r3, #4
 8011ada:	7023      	strb	r3, [r4, #0]
 8011adc:	e4cb      	b.n	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011ade:	2306      	movs	r3, #6
 8011ae0:	7023      	strb	r3, [r4, #0]
 8011ae2:	e4c8      	b.n	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011ae4:	2305      	movs	r3, #5
 8011ae6:	7023      	strb	r3, [r4, #0]
 8011ae8:	e4c5      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011aea:	f1a2 03d9 	sub.w	r3, r2, #217	; 0xd9
 8011aee:	2b36      	cmp	r3, #54	; 0x36
 8011af0:	d802      	bhi.n	8011af8 <GUI_Touch_Processing+0x7d8>
 8011af2:	2800      	cmp	r0, #0
 8011af4:	f47f af2c 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011af8:	3a37      	subs	r2, #55	; 0x37
 8011afa:	2a36      	cmp	r2, #54	; 0x36
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011afc:	f63f acbb 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	f47f acc0 	bne.w	8011486 <GUI_Touch_Processing+0x166>
 8011b06:	e4b6      	b.n	8011476 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011b08:	4b2d      	ldr	r3, [pc, #180]	; (8011bc0 <GUI_Touch_Processing+0x8a0>)
 8011b0a:	2209      	movs	r2, #9
 8011b0c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )// down
 8011b0e:	4b2d      	ldr	r3, [pc, #180]	; (8011bc4 <GUI_Touch_Processing+0x8a4>)
 8011b10:	8819      	ldrh	r1, [r3, #0]
 8011b12:	4b2d      	ldr	r3, [pc, #180]	; (8011bc8 <GUI_Touch_Processing+0x8a8>)
 8011b14:	881b      	ldrh	r3, [r3, #0]
 8011b16:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011b1a:	2836      	cmp	r0, #54	; 0x36
 8011b1c:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 8011b20:	bf8c      	ite	hi
 8011b22:	2000      	movhi	r0, #0
 8011b24:	2001      	movls	r0, #1
 8011b26:	2a36      	cmp	r2, #54	; 0x36
 8011b28:	d803      	bhi.n	8011b32 <GUI_Touch_Processing+0x812>
 8011b2a:	b110      	cbz	r0, 8011b32 <GUI_Touch_Processing+0x812>
					GUI_screen_state = DataSet4_Screen;
 8011b2c:	230a      	movs	r3, #10
 8011b2e:	7023      	strb	r3, [r4, #0]
 8011b30:	e4a1      	b.n	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //CIE_XYZ
 8011b32:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 8011b36:	2a36      	cmp	r2, #54	; 0x36
 8011b38:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 8011b3c:	bf8c      	ite	hi
 8011b3e:	2200      	movhi	r2, #0
 8011b40:	2201      	movls	r2, #1
 8011b42:	2d36      	cmp	r5, #54	; 0x36
 8011b44:	d809      	bhi.n	8011b5a <GUI_Touch_Processing+0x83a>
 8011b46:	b142      	cbz	r2, 8011b5a <GUI_Touch_Processing+0x83a>
					Measure_Field ^= CIE_XYZ;
 8011b48:	4b20      	ldr	r3, [pc, #128]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
 8011b4a:	881a      	ldrh	r2, [r3, #0]
 8011b4c:	f082 0210 	eor.w	r2, r2, #16
 8011b50:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8011b52:	f002 0210 	and.w	r2, r2, #16
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8011b56:	2146      	movs	r1, #70	; 0x46
 8011b58:	e74f      	b.n	80119fa <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //CIE_xy
 8011b5a:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 8011b5e:	2d36      	cmp	r5, #54	; 0x36
 8011b60:	d846      	bhi.n	8011bf0 <GUI_Touch_Processing+0x8d0>
 8011b62:	2a00      	cmp	r2, #0
 8011b64:	d044      	beq.n	8011bf0 <GUI_Touch_Processing+0x8d0>
					Measure_Field ^= CIE_xy;
 8011b66:	4c19      	ldr	r4, [pc, #100]	; (8011bcc <GUI_Touch_Processing+0x8ac>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011b68:	4d19      	ldr	r5, [pc, #100]	; (8011bd0 <GUI_Touch_Processing+0x8b0>)
					Measure_Field ^= CIE_xy;
 8011b6a:	8822      	ldrh	r2, [r4, #0]
 8011b6c:	f082 0220 	eor.w	r2, r2, #32
 8011b70:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 8011b72:	2185      	movs	r1, #133	; 0x85
 8011b74:	f002 0220 	and.w	r2, r2, #32
 8011b78:	20c8      	movs	r0, #200	; 0xc8
 8011b7a:	f001 fc2d 	bl	80133d8 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011b7e:	8823      	ldrh	r3, [r4, #0]
 8011b80:	782a      	ldrb	r2, [r5, #0]
 8011b82:	f003 0320 	and.w	r3, r3, #32
 8011b86:	f002 0201 	and.w	r2, r2, #1
 8011b8a:	21c6      	movs	r1, #198	; 0xc6
 8011b8c:	20c8      	movs	r0, #200	; 0xc8
 8011b8e:	f001 fc64 	bl	801345a <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 8011b92:	782a      	ldrb	r2, [r5, #0]
 8011b94:	8823      	ldrh	r3, [r4, #0]
 8011b96:	43d2      	mvns	r2, r2
 8011b98:	f003 0320 	and.w	r3, r3, #32
 8011b9c:	f002 0201 	and.w	r2, r2, #1
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8011ba0:	f240 1107 	movw	r1, #263	; 0x107
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8011ba4:	20c8      	movs	r0, #200	; 0xc8
}
 8011ba6:	b002      	add	sp, #8
 8011ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8011bac:	f001 bc55 	b.w	801345a <GUI_RadioBox>
 8011bb0:	20005703 	.word	0x20005703
 8011bb4:	20000ebe 	.word	0x20000ebe
 8011bb8:	200957bc 	.word	0x200957bc
 8011bbc:	48001400 	.word	0x48001400
 8011bc0:	2000022a 	.word	0x2000022a
 8011bc4:	20054942 	.word	0x20054942
 8011bc8:	20054944 	.word	0x20054944
 8011bcc:	20005706 	.word	0x20005706
 8011bd0:	20005704 	.word	0x20005704
 8011bd4:	2008f522 	.word	0x2008f522
 8011bd8:	20090ac1 	.word	0x20090ac1
 8011bdc:	2008f528 	.word	0x2008f528
 8011be0:	2008f51c 	.word	0x2008f51c
 8011be4:	20091050 	.word	0x20091050
 8011be8:	2000572e 	.word	0x2000572e
 8011bec:	20090abd 	.word	0x20090abd
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //CIE_Luv
 8011bf0:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 8011bf4:	eb03 050c 	add.w	r5, r3, ip
 8011bf8:	2d36      	cmp	r5, #54	; 0x36
 8011bfa:	d80a      	bhi.n	8011c12 <GUI_Touch_Processing+0x8f2>
 8011bfc:	b14a      	cbz	r2, 8011c12 <GUI_Touch_Processing+0x8f2>
					Measure_Field ^= CIE_Luv;
 8011bfe:	4ba8      	ldr	r3, [pc, #672]	; (8011ea0 <GUI_Touch_Processing+0xb80>)
 8011c00:	881a      	ldrh	r2, [r3, #0]
 8011c02:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8011c06:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 8011c08:	f002 0240 	and.w	r2, r2, #64	; 0x40
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8011c0c:	f240 1147 	movw	r1, #327	; 0x147
 8011c10:	e6f3      	b.n	80119fa <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) && (Measure_Field&CIE_xy)) //CIE_xy_1931
 8011c12:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 8011c16:	2d36      	cmp	r5, #54	; 0x36
 8011c18:	d817      	bhi.n	8011c4a <GUI_Touch_Processing+0x92a>
 8011c1a:	b1b2      	cbz	r2, 8011c4a <GUI_Touch_Processing+0x92a>
 8011c1c:	4da0      	ldr	r5, [pc, #640]	; (8011ea0 <GUI_Touch_Processing+0xb80>)
 8011c1e:	882d      	ldrh	r5, [r5, #0]
 8011c20:	06af      	lsls	r7, r5, #26
 8011c22:	d512      	bpl.n	8011c4a <GUI_Touch_Processing+0x92a>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 8011c24:	4c9f      	ldr	r4, [pc, #636]	; (8011ea4 <GUI_Touch_Processing+0xb84>)
 8011c26:	7822      	ldrb	r2, [r4, #0]
 8011c28:	07d6      	lsls	r6, r2, #31
 8011c2a:	f53f ac24 	bmi.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8011c2e:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8011c30:	f082 0201 	eor.w	r2, r2, #1
 8011c34:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8011c36:	21c6      	movs	r1, #198	; 0xc6
 8011c38:	401a      	ands	r2, r3
 8011c3a:	20c8      	movs	r0, #200	; 0xc8
 8011c3c:	f001 fc0d 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8011c40:	7822      	ldrb	r2, [r4, #0]
 8011c42:	2301      	movs	r3, #1
 8011c44:	43d2      	mvns	r2, r2
 8011c46:	401a      	ands	r2, r3
 8011c48:	e7aa      	b.n	8011ba0 <GUI_Touch_Processing+0x880>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) && (Measure_Field&CIE_xy)) //CIE_xy_1964
 8011c4a:	f46f 7583 	mvn.w	r5, #262	; 0x106
 8011c4e:	442b      	add	r3, r5
 8011c50:	2b36      	cmp	r3, #54	; 0x36
 8011c52:	d80a      	bhi.n	8011c6a <GUI_Touch_Processing+0x94a>
 8011c54:	b14a      	cbz	r2, 8011c6a <GUI_Touch_Processing+0x94a>
 8011c56:	4b92      	ldr	r3, [pc, #584]	; (8011ea0 <GUI_Touch_Processing+0xb80>)
 8011c58:	881b      	ldrh	r3, [r3, #0]
 8011c5a:	069b      	lsls	r3, r3, #26
 8011c5c:	d505      	bpl.n	8011c6a <GUI_Touch_Processing+0x94a>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 8011c5e:	4c91      	ldr	r4, [pc, #580]	; (8011ea4 <GUI_Touch_Processing+0xb84>)
 8011c60:	7822      	ldrb	r2, [r4, #0]
 8011c62:	07d7      	lsls	r7, r2, #31
 8011c64:	f57f ac07 	bpl.w	8011476 <GUI_Touch_Processing+0x156>
 8011c68:	e7e1      	b.n	8011c2e <GUI_Touch_Processing+0x90e>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011c6a:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 8011c6e:	2b36      	cmp	r3, #54	; 0x36
 8011c70:	d802      	bhi.n	8011c78 <GUI_Touch_Processing+0x958>
 8011c72:	2800      	cmp	r0, #0
 8011c74:	f47f ae6c 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011c78:	1e4b      	subs	r3, r1, #1
 8011c7a:	2b36      	cmp	r3, #54	; 0x36
 8011c7c:	f200 820a 	bhi.w	8012094 <GUI_Touch_Processing+0xd74>
 8011c80:	2800      	cmp	r0, #0
 8011c82:	f000 8207 	beq.w	8012094 <GUI_Touch_Processing+0xd74>
					WriteSDFLASH_t(sdfile_cnt);
 8011c86:	4b88      	ldr	r3, [pc, #544]	; (8011ea8 <GUI_Touch_Processing+0xb88>)
 8011c88:	2100      	movs	r1, #0
 8011c8a:	8818      	ldrh	r0, [r3, #0]
 8011c8c:	f008 fb90 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011c90:	4b86      	ldr	r3, [pc, #536]	; (8011eac <GUI_Touch_Processing+0xb8c>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011c94:	1e5a      	subs	r2, r3, #1
 8011c96:	2a05      	cmp	r2, #5
 8011c98:	d804      	bhi.n	8011ca4 <GUI_Touch_Processing+0x984>
 8011c9a:	e8df f002 	tbb	[pc, r2]
 8011c9e:	0306      	.short	0x0306
 8011ca0:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011ca4:	7023      	strb	r3, [r4, #0]
 8011ca6:	f7ff bbe6 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011caa:	2301      	movs	r3, #1
 8011cac:	7023      	strb	r3, [r4, #0]
 8011cae:	f7ff bbe2 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011cb2:	2304      	movs	r3, #4
 8011cb4:	7023      	strb	r3, [r4, #0]
 8011cb6:	f7ff bbde 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011cba:	2306      	movs	r3, #6
 8011cbc:	7023      	strb	r3, [r4, #0]
 8011cbe:	f7ff bbda 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011cc2:	2305      	movs	r3, #5
 8011cc4:	7023      	strb	r3, [r4, #0]
 8011cc6:	f7ff bbd6 	b.w	8011476 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011cca:	4b79      	ldr	r3, [pc, #484]	; (8011eb0 <GUI_Touch_Processing+0xb90>)
 8011ccc:	220a      	movs	r2, #10
 8011cce:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //down
 8011cd0:	4b78      	ldr	r3, [pc, #480]	; (8011eb4 <GUI_Touch_Processing+0xb94>)
 8011cd2:	8819      	ldrh	r1, [r3, #0]
 8011cd4:	4b78      	ldr	r3, [pc, #480]	; (8011eb8 <GUI_Touch_Processing+0xb98>)
 8011cd6:	881b      	ldrh	r3, [r3, #0]
 8011cd8:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011cdc:	2836      	cmp	r0, #54	; 0x36
 8011cde:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 8011ce2:	bf8c      	ite	hi
 8011ce4:	2000      	movhi	r0, #0
 8011ce6:	2001      	movls	r0, #1
 8011ce8:	2a36      	cmp	r2, #54	; 0x36
 8011cea:	d804      	bhi.n	8011cf6 <GUI_Touch_Processing+0x9d6>
 8011cec:	b118      	cbz	r0, 8011cf6 <GUI_Touch_Processing+0x9d6>
					GUI_screen_state = DataSet5_Screen;
 8011cee:	230b      	movs	r3, #11
 8011cf0:	7023      	strb	r3, [r4, #0]
 8011cf2:	f7ff bbc0 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=65 & Touch_y <=(65+54) ) //CIE_Lab
 8011cf6:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 8011cfa:	2a36      	cmp	r2, #54	; 0x36
 8011cfc:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8011d00:	bf8c      	ite	hi
 8011d02:	2200      	movhi	r2, #0
 8011d04:	2201      	movls	r2, #1
 8011d06:	2d36      	cmp	r5, #54	; 0x36
 8011d08:	d848      	bhi.n	8011d9c <GUI_Touch_Processing+0xa7c>
 8011d0a:	2a00      	cmp	r2, #0
 8011d0c:	d046      	beq.n	8011d9c <GUI_Touch_Processing+0xa7c>
					Measure_Field ^= CIE_Lab;
 8011d0e:	4c64      	ldr	r4, [pc, #400]	; (8011ea0 <GUI_Touch_Processing+0xb80>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8011d10:	4d6a      	ldr	r5, [pc, #424]	; (8011ebc <GUI_Touch_Processing+0xb9c>)
					Measure_Field ^= CIE_Lab;
 8011d12:	8822      	ldrh	r2, [r4, #0]
 8011d14:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8011d18:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 8011d1a:	2141      	movs	r1, #65	; 0x41
 8011d1c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011d20:	20c8      	movs	r0, #200	; 0xc8
 8011d22:	f001 fb59 	bl	80133d8 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8011d26:	8823      	ldrh	r3, [r4, #0]
 8011d28:	782a      	ldrb	r2, [r5, #0]
 8011d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d2e:	f002 0201 	and.w	r2, r2, #1
 8011d32:	216c      	movs	r1, #108	; 0x6c
 8011d34:	20c8      	movs	r0, #200	; 0xc8
 8011d36:	f001 fb90 	bl	801345a <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 8011d3a:	8823      	ldrh	r3, [r4, #0]
 8011d3c:	782a      	ldrb	r2, [r5, #0]
 8011d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d42:	f002 0202 	and.w	r2, r2, #2
 8011d46:	218f      	movs	r1, #143	; 0x8f
 8011d48:	20c8      	movs	r0, #200	; 0xc8
 8011d4a:	f001 fb86 	bl	801345a <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 8011d4e:	8823      	ldrh	r3, [r4, #0]
 8011d50:	782a      	ldrb	r2, [r5, #0]
 8011d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d56:	f002 0204 	and.w	r2, r2, #4
 8011d5a:	21b2      	movs	r1, #178	; 0xb2
 8011d5c:	20c8      	movs	r0, #200	; 0xc8
 8011d5e:	f001 fb7c 	bl	801345a <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 8011d62:	8823      	ldrh	r3, [r4, #0]
 8011d64:	782a      	ldrb	r2, [r5, #0]
 8011d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d6a:	f002 0208 	and.w	r2, r2, #8
 8011d6e:	21d5      	movs	r1, #213	; 0xd5
 8011d70:	20c8      	movs	r0, #200	; 0xc8
 8011d72:	f001 fb72 	bl	801345a <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8011d76:	8823      	ldrh	r3, [r4, #0]
 8011d78:	782a      	ldrb	r2, [r5, #0]
 8011d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d7e:	f002 0210 	and.w	r2, r2, #16
 8011d82:	21f8      	movs	r1, #248	; 0xf8
 8011d84:	20c8      	movs	r0, #200	; 0xc8
 8011d86:	f001 fb68 	bl	801345a <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8011d8a:	8823      	ldrh	r3, [r4, #0]
 8011d8c:	782a      	ldrb	r2, [r5, #0]
 8011d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011d92:	f002 0220 	and.w	r2, r2, #32
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8011d96:	f240 111b 	movw	r1, #283	; 0x11b
 8011d9a:	e703      	b.n	8011ba4 <GUI_Touch_Processing+0x884>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=345 & Touch_y <=(345+54) ) //EbEr
 8011d9c:	f46f 76ac 	mvn.w	r6, #344	; 0x158
 8011da0:	199d      	adds	r5, r3, r6
 8011da2:	2d36      	cmp	r5, #54	; 0x36
 8011da4:	d80a      	bhi.n	8011dbc <GUI_Touch_Processing+0xa9c>
 8011da6:	b14a      	cbz	r2, 8011dbc <GUI_Touch_Processing+0xa9c>
					Measure_Field ^= EbEr;
 8011da8:	4b3d      	ldr	r3, [pc, #244]	; (8011ea0 <GUI_Touch_Processing+0xb80>)
 8011daa:	881a      	ldrh	r2, [r3, #0]
 8011dac:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8011db0:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 8011db2:	f240 1159 	movw	r1, #345	; 0x159
 8011db6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011dba:	e61e      	b.n	80119fa <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=108 & Touch_y <=(108+54) && (Measure_Field&CIE_Lab)) //Source_A
 8011dbc:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
 8011dc0:	2d36      	cmp	r5, #54	; 0x36
 8011dc2:	d834      	bhi.n	8011e2e <GUI_Touch_Processing+0xb0e>
 8011dc4:	b39a      	cbz	r2, 8011e2e <GUI_Touch_Processing+0xb0e>
 8011dc6:	4d36      	ldr	r5, [pc, #216]	; (8011ea0 <GUI_Touch_Processing+0xb80>)
 8011dc8:	882d      	ldrh	r5, [r5, #0]
 8011dca:	062d      	lsls	r5, r5, #24
 8011dcc:	d52f      	bpl.n	8011e2e <GUI_Touch_Processing+0xb0e>
					if(!(Source_Type&Source_A))
 8011dce:	4d3b      	ldr	r5, [pc, #236]	; (8011ebc <GUI_Touch_Processing+0xb9c>)
 8011dd0:	782b      	ldrb	r3, [r5, #0]
 8011dd2:	07df      	lsls	r7, r3, #31
 8011dd4:	f53f ab4f 	bmi.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 8011dd8:	2401      	movs	r4, #1
 8011dda:	4623      	mov	r3, r4
 8011ddc:	4622      	mov	r2, r4
 8011dde:	216c      	movs	r1, #108	; 0x6c
 8011de0:	20c8      	movs	r0, #200	; 0xc8
 8011de2:	702c      	strb	r4, [r5, #0]
 8011de4:	f001 fb39 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011de8:	782a      	ldrb	r2, [r5, #0]
 8011dea:	4623      	mov	r3, r4
 8011dec:	f002 0202 	and.w	r2, r2, #2
 8011df0:	218f      	movs	r1, #143	; 0x8f
 8011df2:	20c8      	movs	r0, #200	; 0xc8
 8011df4:	f001 fb31 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011df8:	782a      	ldrb	r2, [r5, #0]
 8011dfa:	4623      	mov	r3, r4
 8011dfc:	f002 0204 	and.w	r2, r2, #4
 8011e00:	21b2      	movs	r1, #178	; 0xb2
 8011e02:	20c8      	movs	r0, #200	; 0xc8
 8011e04:	f001 fb29 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011e08:	782a      	ldrb	r2, [r5, #0]
 8011e0a:	4623      	mov	r3, r4
 8011e0c:	f002 0208 	and.w	r2, r2, #8
 8011e10:	21d5      	movs	r1, #213	; 0xd5
 8011e12:	20c8      	movs	r0, #200	; 0xc8
 8011e14:	f001 fb21 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011e18:	782a      	ldrb	r2, [r5, #0]
 8011e1a:	4623      	mov	r3, r4
 8011e1c:	f002 0210 	and.w	r2, r2, #16
 8011e20:	21f8      	movs	r1, #248	; 0xf8
 8011e22:	20c8      	movs	r0, #200	; 0xc8
 8011e24:	f001 fb19 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011e28:	782a      	ldrb	r2, [r5, #0]
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e7b1      	b.n	8011d92 <GUI_Touch_Processing+0xa72>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=143  & Touch_y <=(143+54)  && (Measure_Field&CIE_Lab)) //Source_D65
 8011e2e:	f1a3 058f 	sub.w	r5, r3, #143	; 0x8f
 8011e32:	2d36      	cmp	r5, #54	; 0x36
 8011e34:	d844      	bhi.n	8011ec0 <GUI_Touch_Processing+0xba0>
 8011e36:	2a00      	cmp	r2, #0
 8011e38:	d042      	beq.n	8011ec0 <GUI_Touch_Processing+0xba0>
 8011e3a:	4d19      	ldr	r5, [pc, #100]	; (8011ea0 <GUI_Touch_Processing+0xb80>)
 8011e3c:	882d      	ldrh	r5, [r5, #0]
 8011e3e:	062e      	lsls	r6, r5, #24
 8011e40:	d53e      	bpl.n	8011ec0 <GUI_Touch_Processing+0xba0>
					if(!(Source_Type&Source_D65))
 8011e42:	4c1e      	ldr	r4, [pc, #120]	; (8011ebc <GUI_Touch_Processing+0xb9c>)
 8011e44:	7822      	ldrb	r2, [r4, #0]
 8011e46:	f012 0202 	ands.w	r2, r2, #2
 8011e4a:	f47f ab14 	bne.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011e4e:	2301      	movs	r3, #1
 8011e50:	216c      	movs	r1, #108	; 0x6c
 8011e52:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011e54:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011e56:	f001 fb00 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 8011e5a:	7822      	ldrb	r2, [r4, #0]
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	f042 0202 	orr.w	r2, r2, #2
 8011e62:	218f      	movs	r1, #143	; 0x8f
 8011e64:	20c8      	movs	r0, #200	; 0xc8
 8011e66:	7022      	strb	r2, [r4, #0]
 8011e68:	f001 faf7 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011e6c:	7822      	ldrb	r2, [r4, #0]
 8011e6e:	2301      	movs	r3, #1
 8011e70:	f002 0204 	and.w	r2, r2, #4
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8011e74:	21b2      	movs	r1, #178	; 0xb2
 8011e76:	20c8      	movs	r0, #200	; 0xc8
 8011e78:	f001 faef 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011e7c:	7822      	ldrb	r2, [r4, #0]
 8011e7e:	2301      	movs	r3, #1
 8011e80:	f002 0208 	and.w	r2, r2, #8
 8011e84:	21d5      	movs	r1, #213	; 0xd5
 8011e86:	20c8      	movs	r0, #200	; 0xc8
 8011e88:	f001 fae7 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011e8c:	7822      	ldrb	r2, [r4, #0]
 8011e8e:	2301      	movs	r3, #1
 8011e90:	f002 0210 	and.w	r2, r2, #16
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011e94:	21f8      	movs	r1, #248	; 0xf8
 8011e96:	20c8      	movs	r0, #200	; 0xc8
 8011e98:	f001 fadf 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011e9c:	7822      	ldrb	r2, [r4, #0]
 8011e9e:	e7c4      	b.n	8011e2a <GUI_Touch_Processing+0xb0a>
 8011ea0:	20005706 	.word	0x20005706
 8011ea4:	20005704 	.word	0x20005704
 8011ea8:	2000572e 	.word	0x2000572e
 8011eac:	20090abd 	.word	0x20090abd
 8011eb0:	2000022a 	.word	0x2000022a
 8011eb4:	20054942 	.word	0x20054942
 8011eb8:	20054944 	.word	0x20054944
 8011ebc:	20090ac1 	.word	0x20090ac1
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=178  & Touch_y <=(178+54)  && (Measure_Field&CIE_Lab)) //Source_C
 8011ec0:	f1a3 05b2 	sub.w	r5, r3, #178	; 0xb2
 8011ec4:	2d36      	cmp	r5, #54	; 0x36
 8011ec6:	d81e      	bhi.n	8011f06 <GUI_Touch_Processing+0xbe6>
 8011ec8:	b1ea      	cbz	r2, 8011f06 <GUI_Touch_Processing+0xbe6>
 8011eca:	4db2      	ldr	r5, [pc, #712]	; (8012194 <GUI_Touch_Processing+0xe74>)
 8011ecc:	882d      	ldrh	r5, [r5, #0]
 8011ece:	062d      	lsls	r5, r5, #24
 8011ed0:	d519      	bpl.n	8011f06 <GUI_Touch_Processing+0xbe6>
					if(!(Source_Type&Source_C))
 8011ed2:	4cb1      	ldr	r4, [pc, #708]	; (8012198 <GUI_Touch_Processing+0xe78>)
 8011ed4:	7822      	ldrb	r2, [r4, #0]
 8011ed6:	f012 0204 	ands.w	r2, r2, #4
 8011eda:	f47f aacc 	bne.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011ede:	2301      	movs	r3, #1
 8011ee0:	216c      	movs	r1, #108	; 0x6c
 8011ee2:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011ee4:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011ee6:	f001 fab8 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011eea:	7822      	ldrb	r2, [r4, #0]
 8011eec:	2301      	movs	r3, #1
 8011eee:	f002 0202 	and.w	r2, r2, #2
 8011ef2:	218f      	movs	r1, #143	; 0x8f
 8011ef4:	20c8      	movs	r0, #200	; 0xc8
 8011ef6:	f001 fab0 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8011efa:	7822      	ldrb	r2, [r4, #0]
 8011efc:	f042 0204 	orr.w	r2, r2, #4
 8011f00:	7022      	strb	r2, [r4, #0]
 8011f02:	2301      	movs	r3, #1
 8011f04:	e7b6      	b.n	8011e74 <GUI_Touch_Processing+0xb54>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=213  & Touch_y <=(213+54)  && (Measure_Field&CIE_Lab)) //Source_D50
 8011f06:	f1a3 05d5 	sub.w	r5, r3, #213	; 0xd5
 8011f0a:	2d36      	cmp	r5, #54	; 0x36
 8011f0c:	d826      	bhi.n	8011f5c <GUI_Touch_Processing+0xc3c>
 8011f0e:	b32a      	cbz	r2, 8011f5c <GUI_Touch_Processing+0xc3c>
 8011f10:	4da0      	ldr	r5, [pc, #640]	; (8012194 <GUI_Touch_Processing+0xe74>)
 8011f12:	882d      	ldrh	r5, [r5, #0]
 8011f14:	062f      	lsls	r7, r5, #24
 8011f16:	d521      	bpl.n	8011f5c <GUI_Touch_Processing+0xc3c>
					if(!(Source_Type&Source_D50))
 8011f18:	4c9f      	ldr	r4, [pc, #636]	; (8012198 <GUI_Touch_Processing+0xe78>)
 8011f1a:	7822      	ldrb	r2, [r4, #0]
 8011f1c:	f012 0208 	ands.w	r2, r2, #8
 8011f20:	f47f aaa9 	bne.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011f24:	2301      	movs	r3, #1
 8011f26:	216c      	movs	r1, #108	; 0x6c
 8011f28:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011f2a:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011f2c:	f001 fa95 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011f30:	7822      	ldrb	r2, [r4, #0]
 8011f32:	2301      	movs	r3, #1
 8011f34:	f002 0202 	and.w	r2, r2, #2
 8011f38:	218f      	movs	r1, #143	; 0x8f
 8011f3a:	20c8      	movs	r0, #200	; 0xc8
 8011f3c:	f001 fa8d 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011f40:	7822      	ldrb	r2, [r4, #0]
 8011f42:	2301      	movs	r3, #1
 8011f44:	f002 0204 	and.w	r2, r2, #4
 8011f48:	21b2      	movs	r1, #178	; 0xb2
 8011f4a:	20c8      	movs	r0, #200	; 0xc8
 8011f4c:	f001 fa85 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 8011f50:	7822      	ldrb	r2, [r4, #0]
 8011f52:	f042 0208 	orr.w	r2, r2, #8
 8011f56:	7022      	strb	r2, [r4, #0]
 8011f58:	2301      	movs	r3, #1
 8011f5a:	e793      	b.n	8011e84 <GUI_Touch_Processing+0xb64>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=248  & Touch_y <=(248+54)  && (Measure_Field&CIE_Lab)) //Source_D55
 8011f5c:	f1a3 05f8 	sub.w	r5, r3, #248	; 0xf8
 8011f60:	2d36      	cmp	r5, #54	; 0x36
 8011f62:	d82e      	bhi.n	8011fc2 <GUI_Touch_Processing+0xca2>
 8011f64:	b36a      	cbz	r2, 8011fc2 <GUI_Touch_Processing+0xca2>
 8011f66:	4d8b      	ldr	r5, [pc, #556]	; (8012194 <GUI_Touch_Processing+0xe74>)
 8011f68:	882d      	ldrh	r5, [r5, #0]
 8011f6a:	062e      	lsls	r6, r5, #24
 8011f6c:	d529      	bpl.n	8011fc2 <GUI_Touch_Processing+0xca2>
					if(!(Source_Type&Source_D55))
 8011f6e:	4c8a      	ldr	r4, [pc, #552]	; (8012198 <GUI_Touch_Processing+0xe78>)
 8011f70:	7822      	ldrb	r2, [r4, #0]
 8011f72:	f012 0210 	ands.w	r2, r2, #16
 8011f76:	f47f aa7e 	bne.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	216c      	movs	r1, #108	; 0x6c
 8011f7e:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011f80:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011f82:	f001 fa6a 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011f86:	7822      	ldrb	r2, [r4, #0]
 8011f88:	2301      	movs	r3, #1
 8011f8a:	f002 0202 	and.w	r2, r2, #2
 8011f8e:	218f      	movs	r1, #143	; 0x8f
 8011f90:	20c8      	movs	r0, #200	; 0xc8
 8011f92:	f001 fa62 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011f96:	7822      	ldrb	r2, [r4, #0]
 8011f98:	2301      	movs	r3, #1
 8011f9a:	f002 0204 	and.w	r2, r2, #4
 8011f9e:	21b2      	movs	r1, #178	; 0xb2
 8011fa0:	20c8      	movs	r0, #200	; 0xc8
 8011fa2:	f001 fa5a 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011fa6:	7822      	ldrb	r2, [r4, #0]
 8011fa8:	2301      	movs	r3, #1
 8011faa:	f002 0208 	and.w	r2, r2, #8
 8011fae:	21d5      	movs	r1, #213	; 0xd5
 8011fb0:	20c8      	movs	r0, #200	; 0xc8
 8011fb2:	f001 fa52 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011fb6:	7822      	ldrb	r2, [r4, #0]
 8011fb8:	f042 0210 	orr.w	r2, r2, #16
 8011fbc:	7022      	strb	r2, [r4, #0]
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e768      	b.n	8011e94 <GUI_Touch_Processing+0xb74>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=283  & Touch_y <=(283+54)  && (Measure_Field&CIE_Lab)) //Source_D75
 8011fc2:	f46f 758d 	mvn.w	r5, #282	; 0x11a
 8011fc6:	442b      	add	r3, r5
 8011fc8:	2b36      	cmp	r3, #54	; 0x36
 8011fca:	d836      	bhi.n	801203a <GUI_Touch_Processing+0xd1a>
 8011fcc:	b3aa      	cbz	r2, 801203a <GUI_Touch_Processing+0xd1a>
 8011fce:	4b71      	ldr	r3, [pc, #452]	; (8012194 <GUI_Touch_Processing+0xe74>)
 8011fd0:	881b      	ldrh	r3, [r3, #0]
 8011fd2:	061b      	lsls	r3, r3, #24
 8011fd4:	d531      	bpl.n	801203a <GUI_Touch_Processing+0xd1a>
					if(!(Source_Type&Source_D75))
 8011fd6:	4c70      	ldr	r4, [pc, #448]	; (8012198 <GUI_Touch_Processing+0xe78>)
 8011fd8:	7822      	ldrb	r2, [r4, #0]
 8011fda:	f012 0220 	ands.w	r2, r2, #32
 8011fde:	f47f aa4a 	bne.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	216c      	movs	r1, #108	; 0x6c
 8011fe6:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011fe8:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011fea:	f001 fa36 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011fee:	7822      	ldrb	r2, [r4, #0]
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	f002 0202 	and.w	r2, r2, #2
 8011ff6:	218f      	movs	r1, #143	; 0x8f
 8011ff8:	20c8      	movs	r0, #200	; 0xc8
 8011ffa:	f001 fa2e 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011ffe:	7822      	ldrb	r2, [r4, #0]
 8012000:	2301      	movs	r3, #1
 8012002:	f002 0204 	and.w	r2, r2, #4
 8012006:	21b2      	movs	r1, #178	; 0xb2
 8012008:	20c8      	movs	r0, #200	; 0xc8
 801200a:	f001 fa26 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 801200e:	7822      	ldrb	r2, [r4, #0]
 8012010:	2301      	movs	r3, #1
 8012012:	f002 0208 	and.w	r2, r2, #8
 8012016:	21d5      	movs	r1, #213	; 0xd5
 8012018:	20c8      	movs	r0, #200	; 0xc8
 801201a:	f001 fa1e 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 801201e:	7822      	ldrb	r2, [r4, #0]
 8012020:	2301      	movs	r3, #1
 8012022:	f002 0210 	and.w	r2, r2, #16
 8012026:	21f8      	movs	r1, #248	; 0xf8
 8012028:	20c8      	movs	r0, #200	; 0xc8
 801202a:	f001 fa16 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 801202e:	7822      	ldrb	r2, [r4, #0]
 8012030:	f042 0220 	orr.w	r2, r2, #32
 8012034:	7022      	strb	r2, [r4, #0]
 8012036:	2301      	movs	r3, #1
 8012038:	e6ad      	b.n	8011d96 <GUI_Touch_Processing+0xa76>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 801203a:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 801203e:	2b36      	cmp	r3, #54	; 0x36
 8012040:	d802      	bhi.n	8012048 <GUI_Touch_Processing+0xd28>
 8012042:	2800      	cmp	r0, #0
 8012044:	f47f ac84 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012048:	1e4b      	subs	r3, r1, #1
 801204a:	2b36      	cmp	r3, #54	; 0x36
 801204c:	d822      	bhi.n	8012094 <GUI_Touch_Processing+0xd74>
 801204e:	b308      	cbz	r0, 8012094 <GUI_Touch_Processing+0xd74>
					WriteSDFLASH_t(sdfile_cnt);
 8012050:	4b52      	ldr	r3, [pc, #328]	; (801219c <GUI_Touch_Processing+0xe7c>)
 8012052:	2100      	movs	r1, #0
 8012054:	8818      	ldrh	r0, [r3, #0]
 8012056:	f008 f9ab 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801205a:	4b51      	ldr	r3, [pc, #324]	; (80121a0 <GUI_Touch_Processing+0xe80>)
 801205c:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801205e:	1e5a      	subs	r2, r3, #1
 8012060:	2a05      	cmp	r2, #5
 8012062:	d804      	bhi.n	801206e <GUI_Touch_Processing+0xd4e>
 8012064:	e8df f002 	tbb	[pc, r2]
 8012068:	0a030306 	.word	0x0a030306
 801206c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801206e:	7023      	strb	r3, [r4, #0]
 8012070:	f7ff ba01 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012074:	2301      	movs	r3, #1
 8012076:	7023      	strb	r3, [r4, #0]
 8012078:	f7ff b9fd 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801207c:	2304      	movs	r3, #4
 801207e:	7023      	strb	r3, [r4, #0]
 8012080:	f7ff b9f9 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012084:	2306      	movs	r3, #6
 8012086:	7023      	strb	r3, [r4, #0]
 8012088:	f7ff b9f5 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801208c:	2305      	movs	r3, #5
 801208e:	7023      	strb	r3, [r4, #0]
 8012090:	f7ff b9f1 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8012094:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8012098:	e46b      	b.n	8011972 <GUI_Touch_Processing+0x652>
					preGUI_screen_state = GUI_screen_state;
 801209a:	4b42      	ldr	r3, [pc, #264]	; (80121a4 <GUI_Touch_Processing+0xe84>)
 801209c:	220b      	movs	r2, #11
 801209e:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Next
 80120a0:	4a41      	ldr	r2, [pc, #260]	; (80121a8 <GUI_Touch_Processing+0xe88>)
 80120a2:	4b42      	ldr	r3, [pc, #264]	; (80121ac <GUI_Touch_Processing+0xe8c>)
 80120a4:	8811      	ldrh	r1, [r2, #0]
 80120a6:	881b      	ldrh	r3, [r3, #0]
 80120a8:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 80120ac:	2a36      	cmp	r2, #54	; 0x36
 80120ae:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 80120b2:	bf8c      	ite	hi
 80120b4:	2200      	movhi	r2, #0
 80120b6:	2201      	movls	r2, #1
 80120b8:	2836      	cmp	r0, #54	; 0x36
 80120ba:	d804      	bhi.n	80120c6 <GUI_Touch_Processing+0xda6>
 80120bc:	b11a      	cbz	r2, 80120c6 <GUI_Touch_Processing+0xda6>
					GUI_screen_state = DataSet1_Screen;
 80120be:	2307      	movs	r3, #7
 80120c0:	7023      	strb	r3, [r4, #0]
 80120c2:	f7ff b9d8 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //EbEr
 80120c6:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 80120ca:	2836      	cmp	r0, #54	; 0x36
 80120cc:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 80120d0:	bf8c      	ite	hi
 80120d2:	2000      	movhi	r0, #0
 80120d4:	2001      	movls	r0, #1
 80120d6:	2d36      	cmp	r5, #54	; 0x36
 80120d8:	d808      	bhi.n	80120ec <GUI_Touch_Processing+0xdcc>
 80120da:	b138      	cbz	r0, 80120ec <GUI_Touch_Processing+0xdcc>
					Measure_Field ^= lambda_d;
 80120dc:	4b2d      	ldr	r3, [pc, #180]	; (8012194 <GUI_Touch_Processing+0xe74>)
 80120de:	881a      	ldrh	r2, [r3, #0]
 80120e0:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 80120e4:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 80120e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80120ea:	e534      	b.n	8011b56 <GUI_Touch_Processing+0x836>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(198+54) ) //EbEr
 80120ec:	3985      	subs	r1, #133	; 0x85
 80120ee:	2977      	cmp	r1, #119	; 0x77
 80120f0:	d809      	bhi.n	8012106 <GUI_Touch_Processing+0xde6>
 80120f2:	b140      	cbz	r0, 8012106 <GUI_Touch_Processing+0xde6>
					Measure_Field ^= SP_measure;
 80120f4:	4b27      	ldr	r3, [pc, #156]	; (8012194 <GUI_Touch_Processing+0xe74>)
 80120f6:	881a      	ldrh	r2, [r3, #0]
 80120f8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80120fc:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 80120fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8012102:	2185      	movs	r1, #133	; 0x85
 8012104:	e479      	b.n	80119fa <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8012106:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 801210a:	2936      	cmp	r1, #54	; 0x36
 801210c:	d802      	bhi.n	8012114 <GUI_Touch_Processing+0xdf4>
 801210e:	2a00      	cmp	r2, #0
 8012110:	f47f ac1e 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012114:	1e59      	subs	r1, r3, #1
 8012116:	2936      	cmp	r1, #54	; 0x36
 8012118:	f200 82b0 	bhi.w	801267c <GUI_Touch_Processing+0x135c>
 801211c:	2a00      	cmp	r2, #0
 801211e:	f000 82ad 	beq.w	801267c <GUI_Touch_Processing+0x135c>
					WriteSDFLASH_t(sdfile_cnt);
 8012122:	4b1e      	ldr	r3, [pc, #120]	; (801219c <GUI_Touch_Processing+0xe7c>)
 8012124:	2100      	movs	r1, #0
 8012126:	8818      	ldrh	r0, [r3, #0]
 8012128:	f008 f942 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801212c:	4b1c      	ldr	r3, [pc, #112]	; (80121a0 <GUI_Touch_Processing+0xe80>)
 801212e:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012130:	1e5a      	subs	r2, r3, #1
 8012132:	2a05      	cmp	r2, #5
 8012134:	d804      	bhi.n	8012140 <GUI_Touch_Processing+0xe20>
 8012136:	e8df f002 	tbb	[pc, r2]
 801213a:	0306      	.short	0x0306
 801213c:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8012140:	7023      	strb	r3, [r4, #0]
 8012142:	f7ff b998 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012146:	2301      	movs	r3, #1
 8012148:	7023      	strb	r3, [r4, #0]
 801214a:	f7ff b994 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801214e:	2304      	movs	r3, #4
 8012150:	7023      	strb	r3, [r4, #0]
 8012152:	f7ff b990 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012156:	2306      	movs	r3, #6
 8012158:	7023      	strb	r3, [r4, #0]
 801215a:	f7ff b98c 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801215e:	2305      	movs	r3, #5
 8012160:	7023      	strb	r3, [r4, #0]
 8012162:	f7ff b988 	b.w	8011476 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8012166:	4b0f      	ldr	r3, [pc, #60]	; (80121a4 <GUI_Touch_Processing+0xe84>)
 8012168:	220c      	movs	r2, #12
 801216a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 801216c:	4a0e      	ldr	r2, [pc, #56]	; (80121a8 <GUI_Touch_Processing+0xe88>)
 801216e:	4b0f      	ldr	r3, [pc, #60]	; (80121ac <GUI_Touch_Processing+0xe8c>)
 8012170:	8812      	ldrh	r2, [r2, #0]
 8012172:	881b      	ldrh	r3, [r3, #0]
 8012174:	f5a2 71d5 	sub.w	r1, r2, #426	; 0x1aa
 8012178:	2936      	cmp	r1, #54	; 0x36
 801217a:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 801217e:	bf8c      	ite	hi
 8012180:	2100      	movhi	r1, #0
 8012182:	2101      	movls	r1, #1
 8012184:	2836      	cmp	r0, #54	; 0x36
 8012186:	d813      	bhi.n	80121b0 <GUI_Touch_Processing+0xe90>
 8012188:	b191      	cbz	r1, 80121b0 <GUI_Touch_Processing+0xe90>
					GUI_screen_state = GraphSet2_Screen;
 801218a:	230d      	movs	r3, #13
 801218c:	7023      	strb	r3, [r4, #0]
 801218e:	f7ff b972 	b.w	8011476 <GUI_Touch_Processing+0x156>
 8012192:	bf00      	nop
 8012194:	20005706 	.word	0x20005706
 8012198:	20090ac1 	.word	0x20090ac1
 801219c:	2000572e 	.word	0x2000572e
 80121a0:	20090abd 	.word	0x20090abd
 80121a4:	2000022a 	.word	0x2000022a
 80121a8:	20054944 	.word	0x20054944
 80121ac:	20054942 	.word	0x20054942
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 80121b0:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 80121b4:	2836      	cmp	r0, #54	; 0x36
 80121b6:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 80121ba:	bf8c      	ite	hi
 80121bc:	2000      	movhi	r0, #0
 80121be:	2001      	movls	r0, #1
 80121c0:	2d36      	cmp	r5, #54	; 0x36
 80121c2:	d802      	bhi.n	80121ca <GUI_Touch_Processing+0xeaa>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	f47f aae7 	bne.w	8011798 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 80121ca:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 80121ce:	2d36      	cmp	r5, #54	; 0x36
 80121d0:	d802      	bhi.n	80121d8 <GUI_Touch_Processing+0xeb8>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	f47f ab0c 	bne.w	80117f0 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //PPF_Bands
 80121d8:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 80121dc:	2836      	cmp	r0, #54	; 0x36
 80121de:	d80c      	bhi.n	80121fa <GUI_Touch_Processing+0xeda>
 80121e0:	f46f 78a3 	mvn.w	r8, #326	; 0x146
 80121e4:	eb02 0008 	add.w	r0, r2, r8
 80121e8:	2836      	cmp	r0, #54	; 0x36
 80121ea:	d806      	bhi.n	80121fa <GUI_Touch_Processing+0xeda>
					Graph_Field ^= PPF_Bands;
 80121ec:	4ba6      	ldr	r3, [pc, #664]	; (8012488 <GUI_Touch_Processing+0x1168>)
 80121ee:	781a      	ldrb	r2, [r3, #0]
 80121f0:	f082 0201 	eor.w	r2, r2, #1
 80121f4:	701a      	strb	r2, [r3, #0]
 80121f6:	f7ff bb27 	b.w	8011848 <GUI_Touch_Processing+0x528>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 80121fa:	f1a3 00d9 	sub.w	r0, r3, #217	; 0xd9
 80121fe:	2836      	cmp	r0, #54	; 0x36
 8012200:	d802      	bhi.n	8012208 <GUI_Touch_Processing+0xee8>
 8012202:	2900      	cmp	r1, #0
 8012204:	f47f aba4 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012208:	1e58      	subs	r0, r3, #1
 801220a:	2836      	cmp	r0, #54	; 0x36
 801220c:	d822      	bhi.n	8012254 <GUI_Touch_Processing+0xf34>
 801220e:	b309      	cbz	r1, 8012254 <GUI_Touch_Processing+0xf34>
					WriteSDFLASH_t(sdfile_cnt);
 8012210:	4b9e      	ldr	r3, [pc, #632]	; (801248c <GUI_Touch_Processing+0x116c>)
 8012212:	2100      	movs	r1, #0
 8012214:	8818      	ldrh	r0, [r3, #0]
 8012216:	f008 f8cb 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801221a:	4b9d      	ldr	r3, [pc, #628]	; (8012490 <GUI_Touch_Processing+0x1170>)
 801221c:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801221e:	1e5a      	subs	r2, r3, #1
 8012220:	2a05      	cmp	r2, #5
 8012222:	d804      	bhi.n	801222e <GUI_Touch_Processing+0xf0e>
 8012224:	e8df f002 	tbb	[pc, r2]
 8012228:	0a030306 	.word	0x0a030306
 801222c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801222e:	7023      	strb	r3, [r4, #0]
 8012230:	f7ff b921 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012234:	2301      	movs	r3, #1
 8012236:	7023      	strb	r3, [r4, #0]
 8012238:	f7ff b91d 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801223c:	2304      	movs	r3, #4
 801223e:	7023      	strb	r3, [r4, #0]
 8012240:	f7ff b919 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012244:	2306      	movs	r3, #6
 8012246:	7023      	strb	r3, [r4, #0]
 8012248:	f7ff b915 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801224c:	2305      	movs	r3, #5
 801224e:	7023      	strb	r3, [r4, #0]
 8012250:	f7ff b911 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8012254:	f1a3 0037 	sub.w	r0, r3, #55	; 0x37
 8012258:	2836      	cmp	r0, #54	; 0x36
 801225a:	d802      	bhi.n	8012262 <GUI_Touch_Processing+0xf42>
 801225c:	2900      	cmp	r1, #0
 801225e:	f47f a912 	bne.w	8011486 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8012262:	3b08      	subs	r3, #8
 8012264:	2bf2      	cmp	r3, #242	; 0xf2
 8012266:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
 801226a:	bf8c      	ite	hi
 801226c:	2300      	movhi	r3, #0
 801226e:	2301      	movls	r3, #1
 8012270:	2928      	cmp	r1, #40	; 0x28
 8012272:	d810      	bhi.n	8012296 <GUI_Touch_Processing+0xf76>
 8012274:	b17b      	cbz	r3, 8012296 <GUI_Touch_Processing+0xf76>
					if (Language_status == Ru) Language_status=En;
 8012276:	4b87      	ldr	r3, [pc, #540]	; (8012494 <GUI_Touch_Processing+0x1174>)
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	b923      	cbnz	r3, 8012286 <GUI_Touch_Processing+0xf66>
 801227c:	4b85      	ldr	r3, [pc, #532]	; (8012494 <GUI_Touch_Processing+0x1174>)
 801227e:	2201      	movs	r2, #1
 8012280:	701a      	strb	r2, [r3, #0]
 8012282:	f7ff b8f8 	b.w	8011476 <GUI_Touch_Processing+0x156>
					else if (Language_status == En) Language_status=Ru;
 8012286:	2b01      	cmp	r3, #1
 8012288:	f47f a8f5 	bne.w	8011476 <GUI_Touch_Processing+0x156>
 801228c:	4b81      	ldr	r3, [pc, #516]	; (8012494 <GUI_Touch_Processing+0x1174>)
 801228e:	2200      	movs	r2, #0
 8012290:	701a      	strb	r2, [r3, #0]
 8012292:	f7ff b8f0 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8012296:	3a7c      	subs	r2, #124	; 0x7c
 8012298:	2a32      	cmp	r2, #50	; 0x32
 801229a:	f63f a8ec 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f43f a8e9 	beq.w	8011476 <GUI_Touch_Processing+0x156>
					GUI_screen_state = Information_Screen;
 80122a4:	2311      	movs	r3, #17
 80122a6:	7023      	strb	r3, [r4, #0]
 80122a8:	f7ff b8e5 	b.w	8011476 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 80122ac:	4b7a      	ldr	r3, [pc, #488]	; (8012498 <GUI_Touch_Processing+0x1178>)
 80122ae:	220d      	movs	r2, #13
 80122b0:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 80122b2:	4a7a      	ldr	r2, [pc, #488]	; (801249c <GUI_Touch_Processing+0x117c>)
 80122b4:	4b7a      	ldr	r3, [pc, #488]	; (80124a0 <GUI_Touch_Processing+0x1180>)
 80122b6:	8811      	ldrh	r1, [r2, #0]
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 80122be:	2a36      	cmp	r2, #54	; 0x36
 80122c0:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 80122c4:	bf8c      	ite	hi
 80122c6:	2200      	movhi	r2, #0
 80122c8:	2201      	movls	r2, #1
 80122ca:	2836      	cmp	r0, #54	; 0x36
 80122cc:	d804      	bhi.n	80122d8 <GUI_Touch_Processing+0xfb8>
 80122ce:	b11a      	cbz	r2, 80122d8 <GUI_Touch_Processing+0xfb8>
					GUI_screen_state = GraphSet1_Screen;
 80122d0:	230c      	movs	r3, #12
 80122d2:	7023      	strb	r3, [r4, #0]
 80122d4:	f7ff b8cf 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //PPF_Bands
 80122d8:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 80122dc:	2836      	cmp	r0, #54	; 0x36
 80122de:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 80122e2:	bf8c      	ite	hi
 80122e4:	2000      	movhi	r0, #0
 80122e6:	2001      	movls	r0, #1
 80122e8:	2d36      	cmp	r5, #54	; 0x36
 80122ea:	d807      	bhi.n	80122fc <GUI_Touch_Processing+0xfdc>
 80122ec:	b130      	cbz	r0, 80122fc <GUI_Touch_Processing+0xfdc>
					Graph_Field ^= EbEr_graph;
 80122ee:	4b66      	ldr	r3, [pc, #408]	; (8012488 <GUI_Touch_Processing+0x1168>)
 80122f0:	781a      	ldrb	r2, [r3, #0]
 80122f2:	f082 0202 	eor.w	r2, r2, #2
 80122f6:	701a      	strb	r2, [r3, #0]
 80122f8:	f7ff bb62 	b.w	80119c0 <GUI_Touch_Processing+0x6a0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //PPF_Bands
 80122fc:	3985      	subs	r1, #133	; 0x85
 80122fe:	2936      	cmp	r1, #54	; 0x36
 8012300:	d807      	bhi.n	8012312 <GUI_Touch_Processing+0xff2>
 8012302:	b130      	cbz	r0, 8012312 <GUI_Touch_Processing+0xff2>
					Graph_Field ^= V_lambda;
 8012304:	4b60      	ldr	r3, [pc, #384]	; (8012488 <GUI_Touch_Processing+0x1168>)
 8012306:	781a      	ldrb	r2, [r3, #0]
 8012308:	f082 0204 	eor.w	r2, r2, #4
 801230c:	701a      	strb	r2, [r3, #0]
 801230e:	f7ff bb64 	b.w	80119da <GUI_Touch_Processing+0x6ba>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8012312:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8012316:	2936      	cmp	r1, #54	; 0x36
 8012318:	d802      	bhi.n	8012320 <GUI_Touch_Processing+0x1000>
 801231a:	2a00      	cmp	r2, #0
 801231c:	f47f ab18 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012320:	1e59      	subs	r1, r3, #1
 8012322:	2936      	cmp	r1, #54	; 0x36
 8012324:	f200 81aa 	bhi.w	801267c <GUI_Touch_Processing+0x135c>
 8012328:	2a00      	cmp	r2, #0
 801232a:	f000 81a7 	beq.w	801267c <GUI_Touch_Processing+0x135c>
					WriteSDFLASH_t(sdfile_cnt);
 801232e:	4b57      	ldr	r3, [pc, #348]	; (801248c <GUI_Touch_Processing+0x116c>)
 8012330:	2100      	movs	r1, #0
 8012332:	8818      	ldrh	r0, [r3, #0]
 8012334:	f008 f83c 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012338:	4b55      	ldr	r3, [pc, #340]	; (8012490 <GUI_Touch_Processing+0x1170>)
 801233a:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801233c:	1e5a      	subs	r2, r3, #1
 801233e:	2a05      	cmp	r2, #5
 8012340:	d804      	bhi.n	801234c <GUI_Touch_Processing+0x102c>
 8012342:	e8df f002 	tbb	[pc, r2]
 8012346:	0306      	.short	0x0306
 8012348:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 801234c:	7023      	strb	r3, [r4, #0]
 801234e:	f7ff b892 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012352:	2301      	movs	r3, #1
 8012354:	7023      	strb	r3, [r4, #0]
 8012356:	f7ff b88e 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801235a:	2304      	movs	r3, #4
 801235c:	7023      	strb	r3, [r4, #0]
 801235e:	f7ff b88a 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012362:	2306      	movs	r3, #6
 8012364:	7023      	strb	r3, [r4, #0]
 8012366:	f7ff b886 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801236a:	2305      	movs	r3, #5
 801236c:	7023      	strb	r3, [r4, #0]
 801236e:	f7ff b882 	b.w	8011476 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8012372:	4b49      	ldr	r3, [pc, #292]	; (8012498 <GUI_Touch_Processing+0x1178>)
 8012374:	220e      	movs	r2, #14
 8012376:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8012378:	4b49      	ldr	r3, [pc, #292]	; (80124a0 <GUI_Touch_Processing+0x1180>)
 801237a:	881a      	ldrh	r2, [r3, #0]
 801237c:	4b47      	ldr	r3, [pc, #284]	; (801249c <GUI_Touch_Processing+0x117c>)
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8012384:	2d36      	cmp	r5, #54	; 0x36
 8012386:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801238a:	bf8c      	ite	hi
 801238c:	2500      	movhi	r5, #0
 801238e:	2501      	movls	r5, #1
 8012390:	2936      	cmp	r1, #54	; 0x36
 8012392:	d804      	bhi.n	801239e <GUI_Touch_Processing+0x107e>
 8012394:	b11d      	cbz	r5, 801239e <GUI_Touch_Processing+0x107e>
					GUI_screen_state = ColorSet2_Screen;
 8012396:	230f      	movs	r3, #15
 8012398:	7023      	strb	r3, [r4, #0]
 801239a:	f7ff b86c 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 801239e:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 80123a2:	2936      	cmp	r1, #54	; 0x36
 80123a4:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 80123a8:	bf8c      	ite	hi
 80123aa:	2100      	movhi	r1, #0
 80123ac:	2101      	movls	r1, #1
 80123ae:	2836      	cmp	r0, #54	; 0x36
 80123b0:	d802      	bhi.n	80123b8 <GUI_Touch_Processing+0x1098>
 80123b2:	2900      	cmp	r1, #0
 80123b4:	f47f a9f0 	bne.w	8011798 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 80123b8:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80123bc:	2836      	cmp	r0, #54	; 0x36
 80123be:	d802      	bhi.n	80123c6 <GUI_Touch_Processing+0x10a6>
 80123c0:	2900      	cmp	r1, #0
 80123c2:	f47f aa15 	bne.w	80117f0 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 80123c6:	f1a2 0008 	sub.w	r0, r2, #8
 80123ca:	28f2      	cmp	r0, #242	; 0xf2
 80123cc:	f1a3 067c 	sub.w	r6, r3, #124	; 0x7c
 80123d0:	bf8c      	ite	hi
 80123d2:	2000      	movhi	r0, #0
 80123d4:	2001      	movls	r0, #1
 80123d6:	2e32      	cmp	r6, #50	; 0x32
 80123d8:	d802      	bhi.n	80123e0 <GUI_Touch_Processing+0x10c0>
 80123da:	2800      	cmp	r0, #0
 80123dc:	f47f af62 	bne.w	80122a4 <GUI_Touch_Processing+0xf84>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //Color_CIE_xy
 80123e0:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 80123e4:	eb03 060c 	add.w	r6, r3, ip
 80123e8:	2e36      	cmp	r6, #54	; 0x36
 80123ea:	d80c      	bhi.n	8012406 <GUI_Touch_Processing+0x10e6>
 80123ec:	b159      	cbz	r1, 8012406 <GUI_Touch_Processing+0x10e6>
					if(!(Color_Field&Color_CIE_xy))
 80123ee:	4a2d      	ldr	r2, [pc, #180]	; (80124a4 <GUI_Touch_Processing+0x1184>)
 80123f0:	7813      	ldrb	r3, [r2, #0]
 80123f2:	07df      	lsls	r7, r3, #31
 80123f4:	f53f a83f 	bmi.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 80123f8:	2301      	movs	r3, #1
 80123fa:	7013      	strb	r3, [r2, #0]
 80123fc:	f240 1147 	movw	r1, #327	; 0x147
 8012400:	461a      	mov	r2, r3
 8012402:	f7ff bbcf 	b.w	8011ba4 <GUI_Touch_Processing+0x884>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8012406:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 801240a:	2936      	cmp	r1, #54	; 0x36
 801240c:	d802      	bhi.n	8012414 <GUI_Touch_Processing+0x10f4>
 801240e:	2d00      	cmp	r5, #0
 8012410:	f47f aa9e 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012414:	1e51      	subs	r1, r2, #1
 8012416:	2936      	cmp	r1, #54	; 0x36
 8012418:	d873      	bhi.n	8012502 <GUI_Touch_Processing+0x11e2>
 801241a:	2d00      	cmp	r5, #0
 801241c:	d071      	beq.n	8012502 <GUI_Touch_Processing+0x11e2>
					if(preColor_Field != Color_Field)
 801241e:	4d21      	ldr	r5, [pc, #132]	; (80124a4 <GUI_Touch_Processing+0x1184>)
 8012420:	4921      	ldr	r1, [pc, #132]	; (80124a8 <GUI_Touch_Processing+0x1188>)
 8012422:	782b      	ldrb	r3, [r5, #0]
 8012424:	7809      	ldrb	r1, [r1, #0]
 8012426:	4299      	cmp	r1, r3
 8012428:	d01f      	beq.n	801246a <GUI_Touch_Processing+0x114a>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801242a:	07de      	lsls	r6, r3, #31
 801242c:	d546      	bpl.n	80124bc <GUI_Touch_Processing+0x119c>
 801242e:	4b1f      	ldr	r3, [pc, #124]	; (80124ac <GUI_Touch_Processing+0x118c>)
 8012430:	481f      	ldr	r0, [pc, #124]	; (80124b0 <GUI_Touch_Processing+0x1190>)
 8012432:	781b      	ldrb	r3, [r3, #0]
 8012434:	f013 0f01 	tst.w	r3, #1
 8012438:	bf18      	it	ne
 801243a:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801243e:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8012442:	f007 febd 	bl	801a1c0 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 8012446:	4b1b      	ldr	r3, [pc, #108]	; (80124b4 <GUI_Touch_Processing+0x1194>)
 8012448:	4a1b      	ldr	r2, [pc, #108]	; (80124b8 <GUI_Touch_Processing+0x1198>)
 801244a:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801244c:	782a      	ldrb	r2, [r5, #0]
 801244e:	f002 0101 	and.w	r1, r2, #1
 8012452:	2900      	cmp	r1, #0
 8012454:	bf0c      	ite	eq
 8012456:	21fa      	moveq	r1, #250	; 0xfa
 8012458:	21d8      	movne	r1, #216	; 0xd8
 801245a:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801245c:	d13c      	bne.n	80124d8 <GUI_Touch_Processing+0x11b8>
 801245e:	f012 0f04 	tst.w	r2, #4
 8012462:	bf0c      	ite	eq
 8012464:	22fa      	moveq	r2, #250	; 0xfa
 8012466:	22ea      	movne	r2, #234	; 0xea
 8012468:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 801246a:	4b08      	ldr	r3, [pc, #32]	; (801248c <GUI_Touch_Processing+0x116c>)
 801246c:	2100      	movs	r1, #0
 801246e:	8818      	ldrh	r0, [r3, #0]
 8012470:	f007 ff9e 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012474:	4b06      	ldr	r3, [pc, #24]	; (8012490 <GUI_Touch_Processing+0x1170>)
 8012476:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012478:	1e5a      	subs	r2, r3, #1
 801247a:	2a05      	cmp	r2, #5
 801247c:	d82e      	bhi.n	80124dc <GUI_Touch_Processing+0x11bc>
 801247e:	e8df f002 	tbb	[pc, r2]
 8012482:	2d30      	.short	0x2d30
 8012484:	383c342d 	.word	0x383c342d
 8012488:	20005702 	.word	0x20005702
 801248c:	2000572e 	.word	0x2000572e
 8012490:	20090abd 	.word	0x20090abd
 8012494:	20005703 	.word	0x20005703
 8012498:	2000022a 	.word	0x2000022a
 801249c:	20054944 	.word	0x20054944
 80124a0:	20054942 	.word	0x20054942
 80124a4:	200056ff 	.word	0x200056ff
 80124a8:	20005729 	.word	0x20005729
 80124ac:	20005704 	.word	0x20005704
 80124b0:	00051d00 	.word	0x00051d00
 80124b4:	20091058 	.word	0x20091058
 80124b8:	20055954 	.word	0x20055954
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80124bc:	f003 0304 	and.w	r3, r3, #4
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	4ba9      	ldr	r3, [pc, #676]	; (8012768 <GUI_Touch_Processing+0x1448>)
 80124c4:	48a9      	ldr	r0, [pc, #676]	; (801276c <GUI_Touch_Processing+0x144c>)
 80124c6:	bf18      	it	ne
 80124c8:	4618      	movne	r0, r3
 80124ca:	f24e 4384 	movw	r3, #58500	; 0xe484
 80124ce:	f24f 4124 	movw	r1, #62500	; 0xf424
 80124d2:	bf18      	it	ne
 80124d4:	4619      	movne	r1, r3
 80124d6:	e7b4      	b.n	8012442 <GUI_Touch_Processing+0x1122>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 80124d8:	22fa      	movs	r2, #250	; 0xfa
 80124da:	e7c5      	b.n	8012468 <GUI_Touch_Processing+0x1148>
					GUI_screen_state = Prev_Inf_Screen;
 80124dc:	7023      	strb	r3, [r4, #0]
 80124de:	f7fe bfca 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80124e2:	2301      	movs	r3, #1
 80124e4:	7023      	strb	r3, [r4, #0]
 80124e6:	f7fe bfc6 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80124ea:	2304      	movs	r3, #4
 80124ec:	7023      	strb	r3, [r4, #0]
 80124ee:	f7fe bfc2 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80124f2:	2306      	movs	r3, #6
 80124f4:	7023      	strb	r3, [r4, #0]
 80124f6:	f7fe bfbe 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80124fa:	2305      	movs	r3, #5
 80124fc:	7023      	strb	r3, [r4, #0]
 80124fe:	f7fe bfba 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8012502:	3a37      	subs	r2, #55	; 0x37
 8012504:	2a36      	cmp	r2, #54	; 0x36
 8012506:	d802      	bhi.n	801250e <GUI_Touch_Processing+0x11ee>
 8012508:	2d00      	cmp	r5, #0
 801250a:	f47e afbc 	bne.w	8011486 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 801250e:	3b50      	subs	r3, #80	; 0x50
 8012510:	2b28      	cmp	r3, #40	; 0x28
 8012512:	f63e afb0 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 8012516:	2800      	cmp	r0, #0
 8012518:	f47f aead 	bne.w	8012276 <GUI_Touch_Processing+0xf56>
 801251c:	f7fe bfab 	b.w	8011476 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8012520:	4b93      	ldr	r3, [pc, #588]	; (8012770 <GUI_Touch_Processing+0x1450>)
 8012522:	220f      	movs	r2, #15
 8012524:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8012526:	4a93      	ldr	r2, [pc, #588]	; (8012774 <GUI_Touch_Processing+0x1454>)
 8012528:	4b93      	ldr	r3, [pc, #588]	; (8012778 <GUI_Touch_Processing+0x1458>)
 801252a:	8811      	ldrh	r1, [r2, #0]
 801252c:	881b      	ldrh	r3, [r3, #0]
 801252e:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8012532:	2a36      	cmp	r2, #54	; 0x36
 8012534:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8012538:	bf8c      	ite	hi
 801253a:	2200      	movhi	r2, #0
 801253c:	2201      	movls	r2, #1
 801253e:	2836      	cmp	r0, #54	; 0x36
 8012540:	d804      	bhi.n	801254c <GUI_Touch_Processing+0x122c>
 8012542:	b11a      	cbz	r2, 801254c <GUI_Touch_Processing+0x122c>
					GUI_screen_state = ColorSet1_Screen;
 8012544:	230e      	movs	r3, #14
 8012546:	7023      	strb	r3, [r4, #0]
 8012548:	f7fe bf95 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //Color_CIE_Luv
 801254c:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8012550:	2836      	cmp	r0, #54	; 0x36
 8012552:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8012556:	bf8c      	ite	hi
 8012558:	2000      	movhi	r0, #0
 801255a:	2001      	movls	r0, #1
 801255c:	2d36      	cmp	r5, #54	; 0x36
 801255e:	d813      	bhi.n	8012588 <GUI_Touch_Processing+0x1268>
 8012560:	b190      	cbz	r0, 8012588 <GUI_Touch_Processing+0x1268>
					if(!(Color_Field&Color_CIE_Luv))
 8012562:	4c86      	ldr	r4, [pc, #536]	; (801277c <GUI_Touch_Processing+0x145c>)
 8012564:	7823      	ldrb	r3, [r4, #0]
 8012566:	075d      	lsls	r5, r3, #29
 8012568:	f53e af85 	bmi.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 801256c:	2204      	movs	r2, #4
 801256e:	2301      	movs	r3, #1
 8012570:	2146      	movs	r1, #70	; 0x46
 8012572:	20c8      	movs	r0, #200	; 0xc8
 8012574:	7022      	strb	r2, [r4, #0]
 8012576:	f000 ff70 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 801257a:	7822      	ldrb	r2, [r4, #0]
 801257c:	2301      	movs	r3, #1
 801257e:	f002 0202 	and.w	r2, r2, #2
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8012582:	2185      	movs	r1, #133	; 0x85
 8012584:	f7ff bb0e 	b.w	8011ba4 <GUI_Touch_Processing+0x884>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //Color_CIE_Lab
 8012588:	3985      	subs	r1, #133	; 0x85
 801258a:	2936      	cmp	r1, #54	; 0x36
 801258c:	d812      	bhi.n	80125b4 <GUI_Touch_Processing+0x1294>
 801258e:	b188      	cbz	r0, 80125b4 <GUI_Touch_Processing+0x1294>
					if(!(Color_Field&Color_CIE_Lab))
 8012590:	4c7a      	ldr	r4, [pc, #488]	; (801277c <GUI_Touch_Processing+0x145c>)
 8012592:	7822      	ldrb	r2, [r4, #0]
 8012594:	f012 0202 	ands.w	r2, r2, #2
 8012598:	f47e af6d 	bne.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 801259c:	2301      	movs	r3, #1
 801259e:	2146      	movs	r1, #70	; 0x46
 80125a0:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 80125a2:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80125a4:	f000 ff59 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 80125a8:	7822      	ldrb	r2, [r4, #0]
 80125aa:	f042 0202 	orr.w	r2, r2, #2
 80125ae:	7022      	strb	r2, [r4, #0]
 80125b0:	2301      	movs	r3, #1
 80125b2:	e7e6      	b.n	8012582 <GUI_Touch_Processing+0x1262>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 80125b4:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 80125b8:	2936      	cmp	r1, #54	; 0x36
 80125ba:	d802      	bhi.n	80125c2 <GUI_Touch_Processing+0x12a2>
 80125bc:	2a00      	cmp	r2, #0
 80125be:	f47f a9c7 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 80125c2:	1e59      	subs	r1, r3, #1
 80125c4:	2936      	cmp	r1, #54	; 0x36
 80125c6:	d859      	bhi.n	801267c <GUI_Touch_Processing+0x135c>
 80125c8:	2a00      	cmp	r2, #0
 80125ca:	d057      	beq.n	801267c <GUI_Touch_Processing+0x135c>
					if(preColor_Field != Color_Field)
 80125cc:	4d6b      	ldr	r5, [pc, #428]	; (801277c <GUI_Touch_Processing+0x145c>)
 80125ce:	496c      	ldr	r1, [pc, #432]	; (8012780 <GUI_Touch_Processing+0x1460>)
 80125d0:	782b      	ldrb	r3, [r5, #0]
 80125d2:	7809      	ldrb	r1, [r1, #0]
 80125d4:	4299      	cmp	r1, r3
 80125d6:	d01f      	beq.n	8012618 <GUI_Touch_Processing+0x12f8>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80125d8:	07d8      	lsls	r0, r3, #31
 80125da:	d52c      	bpl.n	8012636 <GUI_Touch_Processing+0x1316>
 80125dc:	4b69      	ldr	r3, [pc, #420]	; (8012784 <GUI_Touch_Processing+0x1464>)
 80125de:	486a      	ldr	r0, [pc, #424]	; (8012788 <GUI_Touch_Processing+0x1468>)
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	f013 0f01 	tst.w	r3, #1
 80125e6:	bf18      	it	ne
 80125e8:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 80125ec:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 80125f0:	f007 fde6 	bl	801a1c0 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 80125f4:	4b65      	ldr	r3, [pc, #404]	; (801278c <GUI_Touch_Processing+0x146c>)
 80125f6:	4a66      	ldr	r2, [pc, #408]	; (8012790 <GUI_Touch_Processing+0x1470>)
 80125f8:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 80125fa:	782a      	ldrb	r2, [r5, #0]
 80125fc:	f002 0101 	and.w	r1, r2, #1
 8012600:	2900      	cmp	r1, #0
 8012602:	bf0c      	ite	eq
 8012604:	21fa      	moveq	r1, #250	; 0xfa
 8012606:	21d8      	movne	r1, #216	; 0xd8
 8012608:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801260a:	d122      	bne.n	8012652 <GUI_Touch_Processing+0x1332>
 801260c:	f012 0f04 	tst.w	r2, #4
 8012610:	bf0c      	ite	eq
 8012612:	22fa      	moveq	r2, #250	; 0xfa
 8012614:	22ea      	movne	r2, #234	; 0xea
 8012616:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8012618:	4b5e      	ldr	r3, [pc, #376]	; (8012794 <GUI_Touch_Processing+0x1474>)
 801261a:	2100      	movs	r1, #0
 801261c:	8818      	ldrh	r0, [r3, #0]
 801261e:	f007 fec7 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012622:	4b5d      	ldr	r3, [pc, #372]	; (8012798 <GUI_Touch_Processing+0x1478>)
 8012624:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012626:	1e5a      	subs	r2, r3, #1
 8012628:	2a05      	cmp	r2, #5
 801262a:	d814      	bhi.n	8012656 <GUI_Touch_Processing+0x1336>
 801262c:	e8df f002 	tbb	[pc, r2]
 8012630:	1a131316 	.word	0x1a131316
 8012634:	1e22      	.short	0x1e22
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8012636:	f003 0304 	and.w	r3, r3, #4
 801263a:	2b00      	cmp	r3, #0
 801263c:	4b4a      	ldr	r3, [pc, #296]	; (8012768 <GUI_Touch_Processing+0x1448>)
 801263e:	484b      	ldr	r0, [pc, #300]	; (801276c <GUI_Touch_Processing+0x144c>)
 8012640:	bf18      	it	ne
 8012642:	4618      	movne	r0, r3
 8012644:	f24e 4384 	movw	r3, #58500	; 0xe484
 8012648:	f24f 4124 	movw	r1, #62500	; 0xf424
 801264c:	bf18      	it	ne
 801264e:	4619      	movne	r1, r3
 8012650:	e7ce      	b.n	80125f0 <GUI_Touch_Processing+0x12d0>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8012652:	22fa      	movs	r2, #250	; 0xfa
 8012654:	e7df      	b.n	8012616 <GUI_Touch_Processing+0x12f6>
					GUI_screen_state = Prev_Inf_Screen;
 8012656:	7023      	strb	r3, [r4, #0]
 8012658:	f7fe bf0d 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801265c:	2301      	movs	r3, #1
 801265e:	7023      	strb	r3, [r4, #0]
 8012660:	f7fe bf09 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012664:	2304      	movs	r3, #4
 8012666:	7023      	strb	r3, [r4, #0]
 8012668:	f7fe bf05 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 801266c:	2306      	movs	r3, #6
 801266e:	7023      	strb	r3, [r4, #0]
 8012670:	f7fe bf01 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012674:	2305      	movs	r3, #5
 8012676:	7023      	strb	r3, [r4, #0]
 8012678:	f7fe befd 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 801267c:	3b37      	subs	r3, #55	; 0x37
 801267e:	2b36      	cmp	r3, #54	; 0x36
 8012680:	f63e aef9 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 8012684:	2a00      	cmp	r2, #0
 8012686:	f47e aefe 	bne.w	8011486 <GUI_Touch_Processing+0x166>
 801268a:	f7fe bef4 	b.w	8011476 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 801268e:	4b38      	ldr	r3, [pc, #224]	; (8012770 <GUI_Touch_Processing+0x1450>)
 8012690:	2210      	movs	r2, #16
 8012692:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) )//next
 8012694:	4b38      	ldr	r3, [pc, #224]	; (8012778 <GUI_Touch_Processing+0x1458>)
 8012696:	881a      	ldrh	r2, [r3, #0]
 8012698:	4b36      	ldr	r3, [pc, #216]	; (8012774 <GUI_Touch_Processing+0x1454>)
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 80126a0:	2d36      	cmp	r5, #54	; 0x36
 80126a2:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 80126a6:	bf8c      	ite	hi
 80126a8:	2500      	movhi	r5, #0
 80126aa:	2501      	movls	r5, #1
 80126ac:	2936      	cmp	r1, #54	; 0x36
 80126ae:	d809      	bhi.n	80126c4 <GUI_Touch_Processing+0x13a4>
 80126b0:	b145      	cbz	r5, 80126c4 <GUI_Touch_Processing+0x13a4>
					WriteSDFLASH_t(sdfile_cnt);
 80126b2:	4b38      	ldr	r3, [pc, #224]	; (8012794 <GUI_Touch_Processing+0x1474>)
 80126b4:	2100      	movs	r1, #0
 80126b6:	8818      	ldrh	r0, [r3, #0]
 80126b8:	f007 fe7a 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 80126bc:	2306      	movs	r3, #6
 80126be:	7023      	strb	r3, [r4, #0]
 80126c0:	f7fe bed9 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 80126c4:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 80126c8:	2936      	cmp	r1, #54	; 0x36
 80126ca:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 80126ce:	bf8c      	ite	hi
 80126d0:	2100      	movhi	r1, #0
 80126d2:	2101      	movls	r1, #1
 80126d4:	2836      	cmp	r0, #54	; 0x36
 80126d6:	d802      	bhi.n	80126de <GUI_Touch_Processing+0x13be>
 80126d8:	2900      	cmp	r1, #0
 80126da:	f47f a85d 	bne.w	8011798 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 80126de:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80126e2:	2836      	cmp	r0, #54	; 0x36
 80126e4:	d802      	bhi.n	80126ec <GUI_Touch_Processing+0x13cc>
 80126e6:	2900      	cmp	r1, #0
 80126e8:	f47f a882 	bne.w	80117f0 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 80126ec:	f1a2 0108 	sub.w	r1, r2, #8
 80126f0:	29f2      	cmp	r1, #242	; 0xf2
 80126f2:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 80126f6:	bf8c      	ite	hi
 80126f8:	2100      	movhi	r1, #0
 80126fa:	2101      	movls	r1, #1
 80126fc:	2832      	cmp	r0, #50	; 0x32
 80126fe:	d802      	bhi.n	8012706 <GUI_Touch_Processing+0x13e6>
 8012700:	2900      	cmp	r1, #0
 8012702:	f47f adcf 	bne.w	80122a4 <GUI_Touch_Processing+0xf84>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=318  & Touch_y <=(318+54) ) //CRI
 8012706:	f1a2 00b9 	sub.w	r0, r2, #185	; 0xb9
 801270a:	2836      	cmp	r0, #54	; 0x36
 801270c:	f5a3 769f 	sub.w	r6, r3, #318	; 0x13e
 8012710:	bf8c      	ite	hi
 8012712:	2000      	movhi	r0, #0
 8012714:	2001      	movls	r0, #1
 8012716:	2e36      	cmp	r6, #54	; 0x36
 8012718:	d81b      	bhi.n	8012752 <GUI_Touch_Processing+0x1432>
 801271a:	b1d0      	cbz	r0, 8012752 <GUI_Touch_Processing+0x1432>
					if(!(Color_rend_Field & CRI_CQS)){
 801271c:	4c1f      	ldr	r4, [pc, #124]	; (801279c <GUI_Touch_Processing+0x147c>)
 801271e:	7822      	ldrb	r2, [r4, #0]
 8012720:	07d1      	lsls	r1, r2, #31
 8012722:	f53e aea8 	bmi.w	8011476 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8012726:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 8012728:	f082 0201 	eor.w	r2, r2, #1
 801272c:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 801272e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8012732:	401a      	ands	r2, r3
 8012734:	20b9      	movs	r0, #185	; 0xb9
 8012736:	f000 fe90 	bl	801345a <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 801273a:	7822      	ldrb	r2, [r4, #0]
 801273c:	2301      	movs	r3, #1
 801273e:	43d2      	mvns	r2, r2
 8012740:	401a      	ands	r2, r3
 8012742:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8012746:	20b9      	movs	r0, #185	; 0xb9
 8012748:	f7ff ba2d 	b.w	8011ba6 <GUI_Touch_Processing+0x886>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 801274c:	4a14      	ldr	r2, [pc, #80]	; (80127a0 <GUI_Touch_Processing+0x1480>)
 801274e:	f7ff b839 	b.w	80117c4 <GUI_Touch_Processing+0x4a4>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=362  & Touch_y <=(362+54) ) //CQS
 8012752:	f5a3 76b5 	sub.w	r6, r3, #362	; 0x16a
 8012756:	2e36      	cmp	r6, #54	; 0x36
 8012758:	d824      	bhi.n	80127a4 <GUI_Touch_Processing+0x1484>
 801275a:	b318      	cbz	r0, 80127a4 <GUI_Touch_Processing+0x1484>
					if((Color_rend_Field&CRI_CQS)){
 801275c:	4c0f      	ldr	r4, [pc, #60]	; (801279c <GUI_Touch_Processing+0x147c>)
 801275e:	7822      	ldrb	r2, [r4, #0]
 8012760:	07d3      	lsls	r3, r2, #31
 8012762:	f57e ae88 	bpl.w	8011476 <GUI_Touch_Processing+0x156>
 8012766:	e7de      	b.n	8012726 <GUI_Touch_Processing+0x1406>
 8012768:	0006ca00 	.word	0x0006ca00
 801276c:	00018100 	.word	0x00018100
 8012770:	2000022a 	.word	0x2000022a
 8012774:	20054944 	.word	0x20054944
 8012778:	20054942 	.word	0x20054942
 801277c:	200056ff 	.word	0x200056ff
 8012780:	20005729 	.word	0x20005729
 8012784:	20005704 	.word	0x20005704
 8012788:	00051d00 	.word	0x00051d00
 801278c:	20091058 	.word	0x20091058
 8012790:	20055954 	.word	0x20055954
 8012794:	2000572e 	.word	0x2000572e
 8012798:	20090abd 	.word	0x20090abd
 801279c:	20005700 	.word	0x20005700
 80127a0:	20009d24 	.word	0x20009d24
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 80127a4:	f1a2 00d9 	sub.w	r0, r2, #217	; 0xd9
 80127a8:	2836      	cmp	r0, #54	; 0x36
 80127aa:	d802      	bhi.n	80127b2 <GUI_Touch_Processing+0x1492>
 80127ac:	2d00      	cmp	r5, #0
 80127ae:	f47f a8cf 	bne.w	8011950 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 80127b2:	1e50      	subs	r0, r2, #1
 80127b4:	2836      	cmp	r0, #54	; 0x36
 80127b6:	d822      	bhi.n	80127fe <GUI_Touch_Processing+0x14de>
 80127b8:	b30d      	cbz	r5, 80127fe <GUI_Touch_Processing+0x14de>
					WriteSDFLASH_t(sdfile_cnt);
 80127ba:	4b42      	ldr	r3, [pc, #264]	; (80128c4 <GUI_Touch_Processing+0x15a4>)
 80127bc:	2100      	movs	r1, #0
 80127be:	8818      	ldrh	r0, [r3, #0]
 80127c0:	f007 fdf6 	bl	801a3b0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80127c4:	4b40      	ldr	r3, [pc, #256]	; (80128c8 <GUI_Touch_Processing+0x15a8>)
 80127c6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80127c8:	1e5a      	subs	r2, r3, #1
 80127ca:	2a05      	cmp	r2, #5
 80127cc:	d804      	bhi.n	80127d8 <GUI_Touch_Processing+0x14b8>
 80127ce:	e8df f002 	tbb	[pc, r2]
 80127d2:	0306      	.short	0x0306
 80127d4:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 80127d8:	7023      	strb	r3, [r4, #0]
 80127da:	f7fe be4c 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80127de:	2301      	movs	r3, #1
 80127e0:	7023      	strb	r3, [r4, #0]
 80127e2:	f7fe be48 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80127e6:	2304      	movs	r3, #4
 80127e8:	7023      	strb	r3, [r4, #0]
 80127ea:	f7fe be44 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80127ee:	2306      	movs	r3, #6
 80127f0:	7023      	strb	r3, [r4, #0]
 80127f2:	f7fe be40 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80127f6:	2305      	movs	r3, #5
 80127f8:	7023      	strb	r3, [r4, #0]
 80127fa:	f7fe be3c 	b.w	8011476 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 80127fe:	3a37      	subs	r2, #55	; 0x37
 8012800:	2a36      	cmp	r2, #54	; 0x36
 8012802:	d802      	bhi.n	801280a <GUI_Touch_Processing+0x14ea>
 8012804:	2d00      	cmp	r5, #0
 8012806:	f47e ae3e 	bne.w	8011486 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 801280a:	3b50      	subs	r3, #80	; 0x50
 801280c:	2b28      	cmp	r3, #40	; 0x28
 801280e:	f63e ae32 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 8012812:	2900      	cmp	r1, #0
 8012814:	f47f ad2f 	bne.w	8012276 <GUI_Touch_Processing+0xf56>
 8012818:	f7fe be2d 	b.w	8011476 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 8  & Touch_x <= (270)  & Touch_y >=8  & Touch_y <=(470) ) // Information
 801281c:	4b2b      	ldr	r3, [pc, #172]	; (80128cc <GUI_Touch_Processing+0x15ac>)
 801281e:	881b      	ldrh	r3, [r3, #0]
 8012820:	3b08      	subs	r3, #8
 8012822:	b29b      	uxth	r3, r3
 8012824:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8012828:	f63e ae25 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 801282c:	4b28      	ldr	r3, [pc, #160]	; (80128d0 <GUI_Touch_Processing+0x15b0>)
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	3b08      	subs	r3, #8
 8012832:	b29b      	uxth	r3, r3
 8012834:	f5b3 7fe7 	cmp.w	r3, #462	; 0x1ce
 8012838:	f63e ae1d 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
					GUI_screen_state = preGUI_screen_state;
 801283c:	4b25      	ldr	r3, [pc, #148]	; (80128d4 <GUI_Touch_Processing+0x15b4>)
 801283e:	781a      	ldrb	r2, [r3, #0]
 8012840:	7022      	strb	r2, [r4, #0]
					preGUI_screen_state = Information_Screen;
 8012842:	2211      	movs	r2, #17
 8012844:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 8012846:	4b24      	ldr	r3, [pc, #144]	; (80128d8 <GUI_Touch_Processing+0x15b8>)
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	3b07      	subs	r3, #7
 801284c:	2b09      	cmp	r3, #9
 801284e:	f63e ae12 	bhi.w	8011476 <GUI_Touch_Processing+0x156>
 8012852:	a201      	add	r2, pc, #4	; (adr r2, 8012858 <GUI_Touch_Processing+0x1538>)
 8012854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012858:	08012881 	.word	0x08012881
 801285c:	08011477 	.word	0x08011477
 8012860:	08011477 	.word	0x08011477
 8012864:	08011477 	.word	0x08011477
 8012868:	08011477 	.word	0x08011477
 801286c:	0801288f 	.word	0x0801288f
 8012870:	08011477 	.word	0x08011477
 8012874:	0801289d 	.word	0x0801289d
 8012878:	08011477 	.word	0x08011477
 801287c:	080128ab 	.word	0x080128ab
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 8012880:	2307      	movs	r3, #7
 8012882:	7023      	strb	r3, [r4, #0]
 8012884:	4b10      	ldr	r3, [pc, #64]	; (80128c8 <GUI_Touch_Processing+0x15a8>)
 8012886:	2201      	movs	r2, #1
 8012888:	701a      	strb	r2, [r3, #0]
 801288a:	f7fe bdf4 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 801288e:	230c      	movs	r3, #12
 8012890:	7023      	strb	r3, [r4, #0]
 8012892:	4b0d      	ldr	r3, [pc, #52]	; (80128c8 <GUI_Touch_Processing+0x15a8>)
 8012894:	2204      	movs	r2, #4
 8012896:	701a      	strb	r2, [r3, #0]
 8012898:	f7fe bded 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 801289c:	230e      	movs	r3, #14
 801289e:	7023      	strb	r3, [r4, #0]
 80128a0:	4b09      	ldr	r3, [pc, #36]	; (80128c8 <GUI_Touch_Processing+0x15a8>)
 80128a2:	2205      	movs	r2, #5
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	f7fe bde6 	b.w	8011476 <GUI_Touch_Processing+0x156>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 80128aa:	2310      	movs	r3, #16
 80128ac:	7023      	strb	r3, [r4, #0]
 80128ae:	4b06      	ldr	r3, [pc, #24]	; (80128c8 <GUI_Touch_Processing+0x15a8>)
 80128b0:	2206      	movs	r2, #6
 80128b2:	701a      	strb	r2, [r3, #0]
 80128b4:	f7fe bddf 	b.w	8011476 <GUI_Touch_Processing+0x156>
		default: preGUI_screen_state = Measure_Screen;
 80128b8:	4b06      	ldr	r3, [pc, #24]	; (80128d4 <GUI_Touch_Processing+0x15b4>)
 80128ba:	2201      	movs	r2, #1
 80128bc:	701a      	strb	r2, [r3, #0]
}
 80128be:	f7fe bdda 	b.w	8011476 <GUI_Touch_Processing+0x156>
 80128c2:	bf00      	nop
 80128c4:	2000572e 	.word	0x2000572e
 80128c8:	20090abd 	.word	0x20090abd
 80128cc:	20054942 	.word	0x20054942
 80128d0:	20054944 	.word	0x20054944
 80128d4:	2000022a 	.word	0x2000022a
 80128d8:	20091060 	.word	0x20091060

080128dc <GUI_Bluetooth_Logo>:
extern UART_HandleTypeDef huart1;
extern uint8_t BluetoothStat;
extern uint8_t pause;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 80128dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 80128e0:	f101 031e 	add.w	r3, r1, #30
{
 80128e4:	460c      	mov	r4, r1
 80128e6:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 80128e8:	f100 0214 	add.w	r2, r0, #20
 80128ec:	2605      	movs	r6, #5
 80128ee:	f241 3776 	movw	r7, #4982	; 0x1376
 80128f2:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80128fa:	f105 060a 	add.w	r6, r5, #10
 80128fe:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8012902:	f00a fa9d 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8012906:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801290a:	b2b6      	uxth	r6, r6
 801290c:	fa1f fa8a 	uxth.w	sl, sl
 8012910:	1d21      	adds	r1, r4, #4
 8012912:	4653      	mov	r3, sl
 8012914:	4632      	mov	r2, r6
 8012916:	4630      	mov	r0, r6
 8012918:	f8cd 8000 	str.w	r8, [sp]
 801291c:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801291e:	f105 070f 	add.w	r7, r5, #15
 8012922:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8012926:	f00a f8a9 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801292a:	b2bf      	uxth	r7, r7
 801292c:	fa1f f989 	uxth.w	r9, r9
 8012930:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 8012932:	3506      	adds	r5, #6
 8012934:	3414      	adds	r4, #20
 8012936:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8012938:	464b      	mov	r3, r9
 801293a:	463a      	mov	r2, r7
 801293c:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801293e:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8012940:	f8cd 8000 	str.w	r8, [sp]
 8012944:	b289      	uxth	r1, r1
 8012946:	f00a f899 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801294a:	464b      	mov	r3, r9
 801294c:	463a      	mov	r2, r7
 801294e:	4621      	mov	r1, r4
 8012950:	4628      	mov	r0, r5
 8012952:	f8cd 8000 	str.w	r8, [sp]
 8012956:	f00a f891 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 801295a:	4623      	mov	r3, r4
 801295c:	463a      	mov	r2, r7
 801295e:	4649      	mov	r1, r9
 8012960:	4628      	mov	r0, r5
 8012962:	f8cd 8000 	str.w	r8, [sp]
 8012966:	f00a f889 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 801296a:	f8cd 8000 	str.w	r8, [sp]
 801296e:	4623      	mov	r3, r4
 8012970:	463a      	mov	r2, r7
 8012972:	4651      	mov	r1, sl
 8012974:	4630      	mov	r0, r6
 8012976:	f00a f881 	bl	801ca7c <TFT_DrawLine>
}
 801297a:	b002      	add	sp, #8
 801297c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012980 <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 8012980:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012984:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012988:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801298a:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801298e:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8012992:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012994:	9600      	str	r6, [sp, #0]
 8012996:	b29b      	uxth	r3, r3
 8012998:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 801299a:	f105 0608 	add.w	r6, r5, #8
 801299e:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80129a0:	f00a f8c9 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 80129a4:	b2b6      	uxth	r6, r6
 80129a6:	b2ad      	uxth	r5, r5
 80129a8:	2702      	movs	r7, #2
 80129aa:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80129ae:	f104 0313 	add.w	r3, r4, #19
 80129b2:	f104 010d 	add.w	r1, r4, #13
 80129b6:	462a      	mov	r2, r5
 80129b8:	4630      	mov	r0, r6
 80129ba:	e88d 0180 	stmia.w	sp, {r7, r8}
 80129be:	b29b      	uxth	r3, r3
 80129c0:	b289      	uxth	r1, r1
 80129c2:	f00a fa3d 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 80129c6:	f104 031f 	add.w	r3, r4, #31
 80129ca:	f104 0119 	add.w	r1, r4, #25
 80129ce:	462a      	mov	r2, r5
 80129d0:	4630      	mov	r0, r6
 80129d2:	e88d 0180 	stmia.w	sp, {r7, r8}
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	b289      	uxth	r1, r1
 80129da:	f00a fa31 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 80129de:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 80129e2:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80129e6:	e88d 0180 	stmia.w	sp, {r7, r8}
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	462a      	mov	r2, r5
 80129ee:	b289      	uxth	r1, r1
 80129f0:	4630      	mov	r0, r6
 80129f2:	f00a fa25 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
}
 80129f6:	b002      	add	sp, #8
 80129f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129fc <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 80129fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012a00:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012a04:	4604      	mov	r4, r0
 8012a06:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012a08:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012a0c:	f241 3676 	movw	r6, #4982	; 0x1376
 8012a10:	9600      	str	r6, [sp, #0]
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012a16:	f105 0612 	add.w	r6, r5, #18
 8012a1a:	f104 081c 	add.w	r8, r4, #28
 8012a1e:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012a20:	f00a f889 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012a24:	b2b6      	uxth	r6, r6
 8012a26:	b2ad      	uxth	r5, r5
 8012a28:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012a2c:	fa1f f888 	uxth.w	r8, r8
 8012a30:	f104 000c 	add.w	r0, r4, #12
 8012a34:	462b      	mov	r3, r5
 8012a36:	4642      	mov	r2, r8
 8012a38:	4631      	mov	r1, r6
 8012a3a:	9700      	str	r7, [sp, #0]
 8012a3c:	b280      	uxth	r0, r0
 8012a3e:	f00a f81d 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8012a42:	f104 021d 	add.w	r2, r4, #29
 8012a46:	f104 000d 	add.w	r0, r4, #13
 8012a4a:	462b      	mov	r3, r5
 8012a4c:	4631      	mov	r1, r6
 8012a4e:	9700      	str	r7, [sp, #0]
 8012a50:	b292      	uxth	r2, r2
 8012a52:	b280      	uxth	r0, r0
 8012a54:	f00a f812 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8012a58:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012a5c:	462b      	mov	r3, r5
 8012a5e:	4642      	mov	r2, r8
 8012a60:	4631      	mov	r1, r6
 8012a62:	9700      	str	r7, [sp, #0]
 8012a64:	b280      	uxth	r0, r0
 8012a66:	f00a f809 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8012a6a:	f104 021b 	add.w	r2, r4, #27
 8012a6e:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012a72:	9700      	str	r7, [sp, #0]
 8012a74:	462b      	mov	r3, r5
 8012a76:	b292      	uxth	r2, r2
 8012a78:	4631      	mov	r1, r6
 8012a7a:	b280      	uxth	r0, r0
 8012a7c:	f009 fffe 	bl	801ca7c <TFT_DrawLine>
}
 8012a80:	b002      	add	sp, #8
 8012a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a86 <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 8012a86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012a8a:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012a8e:	4604      	mov	r4, r0
 8012a90:	460d      	mov	r5, r1
 8012a92:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8012a96:	2a00      	cmp	r2, #0
 8012a98:	d03c      	beq.n	8012b14 <GUI_Button_Down_Active+0x8e>
 8012a9a:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012a9e:	9200      	str	r2, [sp, #0]
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012aa4:	f104 081c 	add.w	r8, r4, #28
 8012aa8:	f105 0612 	add.w	r6, r5, #18
 8012aac:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012aae:	f00a f842 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012ab2:	b2b6      	uxth	r6, r6
 8012ab4:	b2ad      	uxth	r5, r5
 8012ab6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012aba:	fa1f f888 	uxth.w	r8, r8
 8012abe:	f104 000c 	add.w	r0, r4, #12
 8012ac2:	462b      	mov	r3, r5
 8012ac4:	4642      	mov	r2, r8
 8012ac6:	4631      	mov	r1, r6
 8012ac8:	9700      	str	r7, [sp, #0]
 8012aca:	b280      	uxth	r0, r0
 8012acc:	f009 ffd6 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8012ad0:	f104 021d 	add.w	r2, r4, #29
 8012ad4:	f104 000d 	add.w	r0, r4, #13
 8012ad8:	462b      	mov	r3, r5
 8012ada:	4631      	mov	r1, r6
 8012adc:	9700      	str	r7, [sp, #0]
 8012ade:	b292      	uxth	r2, r2
 8012ae0:	b280      	uxth	r0, r0
 8012ae2:	f009 ffcb 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8012ae6:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012aea:	462b      	mov	r3, r5
 8012aec:	4642      	mov	r2, r8
 8012aee:	4631      	mov	r1, r6
 8012af0:	9700      	str	r7, [sp, #0]
 8012af2:	b280      	uxth	r0, r0
 8012af4:	f009 ffc2 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8012af8:	f104 021b 	add.w	r2, r4, #27
 8012afc:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012b00:	9700      	str	r7, [sp, #0]
 8012b02:	462b      	mov	r3, r5
 8012b04:	b292      	uxth	r2, r2
 8012b06:	4631      	mov	r1, r6
 8012b08:	b280      	uxth	r0, r0
 8012b0a:	f009 ffb7 	bl	801ca7c <TFT_DrawLine>
}
 8012b0e:	b002      	add	sp, #8
 8012b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012b14:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 8012b18:	e7c1      	b.n	8012a9e <GUI_Button_Down_Active+0x18>

08012b1a <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 8012b1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b1e:	4604      	mov	r4, r0
 8012b20:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012b22:	f241 3676 	movw	r6, #4982	; 0x1376
 8012b26:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012b2a:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012b2e:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012b30:	f104 0a13 	add.w	sl, r4, #19
 8012b34:	f105 0b0c 	add.w	fp, r5, #12
 8012b38:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8012b3c:	f105 061b 	add.w	r6, r5, #27
 8012b40:	b2b6      	uxth	r6, r6
 8012b42:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8012b46:	fa1f fa8a 	uxth.w	sl, sl
 8012b4a:	fa1f fb8b 	uxth.w	fp, fp
 8012b4e:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012b56:	f104 0712 	add.w	r7, r4, #18
 8012b5a:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012b5c:	f009 ffeb 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012b60:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012b62:	4633      	mov	r3, r6
 8012b64:	464a      	mov	r2, r9
 8012b66:	4659      	mov	r1, fp
 8012b68:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012b6a:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012b6c:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012b70:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012b72:	f009 ff83 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012b76:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012b78:	4633      	mov	r3, r6
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	4638      	mov	r0, r7
 8012b80:	f8cd 8000 	str.w	r8, [sp]
 8012b84:	f009 ff7a 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012b88:	462b      	mov	r3, r5
 8012b8a:	4652      	mov	r2, sl
 8012b8c:	4631      	mov	r1, r6
 8012b8e:	4648      	mov	r0, r9
 8012b90:	f8cd 8000 	str.w	r8, [sp]
 8012b94:	f009 ff72 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 8012b98:	f8cd 8000 	str.w	r8, [sp]
 8012b9c:	462b      	mov	r3, r5
 8012b9e:	463a      	mov	r2, r7
 8012ba0:	4631      	mov	r1, r6
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f009 ff6a 	bl	801ca7c <TFT_DrawLine>
}
 8012ba8:	b003      	add	sp, #12
 8012baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012bae <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 8012bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012bb0:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012bb4:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012bb8:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012bc0:	9600      	str	r6, [sp, #0]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	b292      	uxth	r2, r2
 8012bc6:	f009 ffb6 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 8012bca:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012bce:	f105 0327 	add.w	r3, r5, #39	; 0x27
 8012bd2:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8012bd6:	f105 0110 	add.w	r1, r5, #16
 8012bda:	f104 0008 	add.w	r0, r4, #8
 8012bde:	9600      	str	r6, [sp, #0]
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	b292      	uxth	r2, r2
 8012be4:	b289      	uxth	r1, r1
 8012be6:	b280      	uxth	r0, r0
 8012be8:	f009 ffbd 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 8012bec:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8012bf0:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8012bf4:	1d69      	adds	r1, r5, #5
 8012bf6:	1da0      	adds	r0, r4, #6
 8012bf8:	9600      	str	r6, [sp, #0]
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	b292      	uxth	r2, r2
 8012bfe:	b289      	uxth	r1, r1
 8012c00:	b280      	uxth	r0, r0
 8012c02:	f009 ff3b 	bl	801ca7c <TFT_DrawLine>
}
 8012c06:	b002      	add	sp, #8
 8012c08:	bd70      	pop	{r4, r5, r6, pc}

08012c0a <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 8012c0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012c0e:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012c12:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012c14:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012c18:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8012c1c:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012c1e:	9600      	str	r6, [sp, #0]
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012c24:	f105 071c 	add.w	r7, r5, #28
 8012c28:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012c2c:	f009 ff83 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012c30:	b2bf      	uxth	r7, r7
 8012c32:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8012c36:	f104 0109 	add.w	r1, r4, #9
 8012c3a:	f105 0009 	add.w	r0, r5, #9
 8012c3e:	463a      	mov	r2, r7
 8012c40:	9600      	str	r6, [sp, #0]
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	b289      	uxth	r1, r1
 8012c46:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012c48:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012c4c:	f009 ff8b 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012c50:	fa1f f888 	uxth.w	r8, r8
 8012c54:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012c58:	f105 0231 	add.w	r2, r5, #49	; 0x31
 8012c5c:	f105 0012 	add.w	r0, r5, #18
 8012c60:	4641      	mov	r1, r8
 8012c62:	9600      	str	r6, [sp, #0]
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	b292      	uxth	r2, r2
 8012c68:	b280      	uxth	r0, r0
 8012c6a:	f009 ff7c 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012c6e:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8012c72:	fa0f f188 	sxth.w	r1, r8
 8012c76:	b238      	sxth	r0, r7
 8012c78:	9600      	str	r6, [sp, #0]
 8012c7a:	2302      	movs	r3, #2
 8012c7c:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012c7e:	f105 071d 	add.w	r7, r5, #29
 8012c82:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8012c86:	f009 fdaf 	bl	801c7e8 <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012c8a:	b2bf      	uxth	r7, r7
 8012c8c:	fa1f f888 	uxth.w	r8, r8
 8012c90:	fa1f f989 	uxth.w	r9, r9
 8012c94:	f104 0313 	add.w	r3, r4, #19
 8012c98:	464a      	mov	r2, r9
 8012c9a:	4641      	mov	r1, r8
 8012c9c:	4638      	mov	r0, r7
 8012c9e:	9600      	str	r6, [sp, #0]
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	f009 feeb 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8012ca6:	f104 030b 	add.w	r3, r4, #11
 8012caa:	464a      	mov	r2, r9
 8012cac:	4641      	mov	r1, r8
 8012cae:	4638      	mov	r0, r7
 8012cb0:	9600      	str	r6, [sp, #0]
 8012cb2:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8012cb4:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8012cb8:	f104 081d 	add.w	r8, r4, #29
 8012cbc:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8012cbe:	f009 fedd 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8012cc2:	b2bf      	uxth	r7, r7
 8012cc4:	fa1f f888 	uxth.w	r8, r8
 8012cc8:	b2a4      	uxth	r4, r4
 8012cca:	f105 0227 	add.w	r2, r5, #39	; 0x27
 8012cce:	4623      	mov	r3, r4
 8012cd0:	4641      	mov	r1, r8
 8012cd2:	4638      	mov	r0, r7
 8012cd4:	9600      	str	r6, [sp, #0]
 8012cd6:	b292      	uxth	r2, r2
 8012cd8:	f009 fed0 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8012cdc:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8012ce0:	9600      	str	r6, [sp, #0]
 8012ce2:	4623      	mov	r3, r4
 8012ce4:	b292      	uxth	r2, r2
 8012ce6:	4641      	mov	r1, r8
 8012ce8:	4638      	mov	r0, r7
 8012cea:	f009 fec7 	bl	801ca7c <TFT_DrawLine>
}
 8012cee:	b003      	add	sp, #12
 8012cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012cf4 <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 8012cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf8:	b085      	sub	sp, #20
 8012cfa:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8012cfc:	9203      	str	r2, [sp, #12]
 8012cfe:	9e03      	ldr	r6, [sp, #12]
{
 8012d00:	460d      	mov	r5, r1
 8012d02:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012d06:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8012d0a:	2e00      	cmp	r6, #0
 8012d0c:	f000 80b6 	beq.w	8012e7c <GUI_Button_SD_Card+0x188>
 8012d10:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012d14:	f104 0715 	add.w	r7, r4, #21
 8012d18:	f105 0b05 	add.w	fp, r5, #5
 8012d1c:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 8012d20:	f105 0a07 	add.w	sl, r5, #7
 8012d24:	b2bf      	uxth	r7, r7
 8012d26:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012d2a:	9600      	str	r6, [sp, #0]
 8012d2c:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012d2e:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012d32:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012d34:	fa1f fb8b 	uxth.w	fp, fp
 8012d38:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012d3c:	f009 fefb 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012d40:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012d44:	464a      	mov	r2, r9
 8012d46:	4638      	mov	r0, r7
 8012d48:	4653      	mov	r3, sl
 8012d4a:	4659      	mov	r1, fp
 8012d4c:	9600      	str	r6, [sp, #0]
 8012d4e:	f009 fef2 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012d52:	fa1f f888 	uxth.w	r8, r8
 8012d56:	f105 0108 	add.w	r1, r5, #8
 8012d5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8012d5e:	4643      	mov	r3, r8
 8012d60:	464a      	mov	r2, r9
 8012d62:	b289      	uxth	r1, r1
 8012d64:	b280      	uxth	r0, r0
 8012d66:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012d68:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012d6c:	f009 fee3 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012d70:	fa1f f989 	uxth.w	r9, r9
 8012d74:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8012d78:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012d7c:	4643      	mov	r3, r8
 8012d7e:	464a      	mov	r2, r9
 8012d80:	b289      	uxth	r1, r1
 8012d82:	b280      	uxth	r0, r0
 8012d84:	9600      	str	r6, [sp, #0]
 8012d86:	f009 fed6 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 8012d8a:	f104 030c 	add.w	r3, r4, #12
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	f105 0810 	add.w	r8, r5, #16
 8012d94:	fa1f f888 	uxth.w	r8, r8
 8012d98:	9302      	str	r3, [sp, #8]
 8012d9a:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8012d9e:	4641      	mov	r1, r8
 8012da0:	4648      	mov	r0, r9
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	9a02      	ldr	r2, [sp, #8]
 8012da6:	9600      	str	r6, [sp, #0]
 8012da8:	f009 fec5 	bl	801cb36 <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8012dac:	463a      	mov	r2, r7
 8012dae:	4641      	mov	r1, r8
 8012db0:	4648      	mov	r0, r9
 8012db2:	465b      	mov	r3, fp
 8012db4:	9600      	str	r6, [sp, #0]
 8012db6:	f009 fe61 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 8012dba:	1dab      	adds	r3, r5, #6
 8012dbc:	f104 000b 	add.w	r0, r4, #11
 8012dc0:	463a      	mov	r2, r7
 8012dc2:	4641      	mov	r1, r8
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	b280      	uxth	r0, r0
 8012dc8:	9600      	str	r6, [sp, #0]
 8012dca:	f009 fe57 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012dce:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8012dd2:	463a      	mov	r2, r7
 8012dd4:	4641      	mov	r1, r8
 8012dd6:	4653      	mov	r3, sl
 8012dd8:	9802      	ldr	r0, [sp, #8]
 8012dda:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012ddc:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8012de0:	f009 fe4c 	bl	801ca7c <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012de4:	fa1f f888 	uxth.w	r8, r8
 8012de8:	fa1f f989 	uxth.w	r9, r9
 8012dec:	f104 0013 	add.w	r0, r4, #19
 8012df0:	463a      	mov	r2, r7
 8012df2:	464b      	mov	r3, r9
 8012df4:	4641      	mov	r1, r8
 8012df6:	b280      	uxth	r0, r0
 8012df8:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8012dfa:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012dfe:	f009 fe9a 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8012e02:	b2bf      	uxth	r7, r7
 8012e04:	f104 0019 	add.w	r0, r4, #25
 8012e08:	464b      	mov	r3, r9
 8012e0a:	463a      	mov	r2, r7
 8012e0c:	4641      	mov	r1, r8
 8012e0e:	b280      	uxth	r0, r0
 8012e10:	9600      	str	r6, [sp, #0]
 8012e12:	f009 fe90 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 8012e16:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8012e1a:	f104 001f 	add.w	r0, r4, #31
 8012e1e:	464b      	mov	r3, r9
 8012e20:	b292      	uxth	r2, r2
 8012e22:	4641      	mov	r1, r8
 8012e24:	b280      	uxth	r0, r0
 8012e26:	9600      	str	r6, [sp, #0]
 8012e28:	f009 fe85 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 8012e2c:	f104 0227 	add.w	r2, r4, #39	; 0x27
 8012e30:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8012e34:	464b      	mov	r3, r9
 8012e36:	b292      	uxth	r2, r2
 8012e38:	4641      	mov	r1, r8
 8012e3a:	b280      	uxth	r0, r0
 8012e3c:	9600      	str	r6, [sp, #0]
 8012e3e:	f009 fe7a 	bl	801cb36 <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 8012e42:	4811      	ldr	r0, [pc, #68]	; (8012e88 <GUI_Button_SD_Card+0x194>)
 8012e44:	f00a f8a0 	bl	801cf88 <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 8012e48:	4630      	mov	r0, r6
 8012e4a:	f00a f8a3 	bl	801cf94 <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012e4e:	9b03      	ldr	r3, [sp, #12]
 8012e50:	b1bb      	cbz	r3, 8012e82 <GUI_Button_SD_Card+0x18e>
 8012e52:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 8012e56:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012e58:	f00a f8a2 	bl	801cfa0 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 8012e5c:	b2ad      	uxth	r5, r5
 8012e5e:	f104 0010 	add.w	r0, r4, #16
 8012e62:	4629      	mov	r1, r5
 8012e64:	2253      	movs	r2, #83	; 0x53
 8012e66:	b280      	uxth	r0, r0
 8012e68:	f00a f958 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 8012e6c:	2244      	movs	r2, #68	; 0x44
 8012e6e:	4629      	mov	r1, r5
 8012e70:	4638      	mov	r0, r7
}
 8012e72:	b005      	add	sp, #20
 8012e74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8012e78:	f00a b950 	b.w	801d11c <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012e7c:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8012e80:	e748      	b.n	8012d14 <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012e82:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 8012e86:	e7e6      	b.n	8012e56 <GUI_Button_SD_Card+0x162>
 8012e88:	200001e0 	.word	0x200001e0

08012e8c <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8012e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!pause)	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012e90:	4bc0      	ldr	r3, [pc, #768]	; (8013194 <GUI_Button_Measure_Start_Pause+0x308>)
 8012e92:	781e      	ldrb	r6, [r3, #0]
{
 8012e94:	b085      	sub	sp, #20
 8012e96:	4605      	mov	r5, r0
 8012e98:	460c      	mov	r4, r1
 8012e9a:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012e9e:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(!pause)	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012ea2:	2e00      	cmp	r6, #0
 8012ea4:	f040 8173 	bne.w	801318e <GUI_Button_Measure_Start_Pause+0x302>
 8012ea8:	f241 3676 	movw	r6, #4982	; 0x1376
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012eac:	9600      	str	r6, [sp, #0]
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	b292      	uxth	r2, r2

	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8012eb2:	f104 090b 	add.w	r9, r4, #11
 8012eb6:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8012eba:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012ebe:	f009 fe3a 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8012ec2:	fa1f f989 	uxth.w	r9, r9
 8012ec6:	b2bf      	uxth	r7, r7
 8012ec8:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8012ecc:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8012ed0:	463b      	mov	r3, r7
 8012ed2:	4649      	mov	r1, r9
 8012ed4:	9600      	str	r6, [sp, #0]
 8012ed6:	b292      	uxth	r2, r2
 8012ed8:	b280      	uxth	r0, r0
 8012eda:	f009 fe2c 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8012ede:	f105 0232 	add.w	r2, r5, #50	; 0x32
 8012ee2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8012ee6:	463b      	mov	r3, r7
 8012ee8:	4649      	mov	r1, r9
 8012eea:	9600      	str	r6, [sp, #0]
 8012eec:	b292      	uxth	r2, r2
 8012eee:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012ef0:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8012ef4:	f009 fe1f 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012ef8:	fa1f f888 	uxth.w	r8, r8
 8012efc:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8012f00:	f105 0a1e 	add.w	sl, r5, #30
 8012f04:	f104 0b1b 	add.w	fp, r4, #27
 8012f08:	fa1f fa8a 	uxth.w	sl, sl
 8012f0c:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	4642      	mov	r2, r8
 8012f14:	4649      	mov	r1, r9
 8012f16:	4640      	mov	r0, r8
 8012f18:	9600      	str	r6, [sp, #0]
 8012f1a:	9303      	str	r3, [sp, #12]
 8012f1c:	f009 fdae 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8012f20:	465b      	mov	r3, fp
 8012f22:	4652      	mov	r2, sl
 8012f24:	4649      	mov	r1, r9
 8012f26:	4640      	mov	r0, r8
 8012f28:	9600      	str	r6, [sp, #0]
 8012f2a:	f009 fda7 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 8012f2e:	465b      	mov	r3, fp
 8012f30:	4652      	mov	r2, sl
 8012f32:	9903      	ldr	r1, [sp, #12]
 8012f34:	9600      	str	r6, [sp, #0]
 8012f36:	4640      	mov	r0, r8
 8012f38:	f009 fda0 	bl	801ca7c <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 8012f3c:	f104 080c 	add.w	r8, r4, #12
 8012f40:	1dea      	adds	r2, r5, #7
 8012f42:	b292      	uxth	r2, r2
 8012f44:	fa1f f888 	uxth.w	r8, r8
 8012f48:	463b      	mov	r3, r7
 8012f4a:	4641      	mov	r1, r8
 8012f4c:	4610      	mov	r0, r2
 8012f4e:	9600      	str	r6, [sp, #0]
 8012f50:	f009 fd94 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 8012f54:	f105 0208 	add.w	r2, r5, #8
 8012f58:	b292      	uxth	r2, r2
 8012f5a:	463b      	mov	r3, r7
 8012f5c:	4641      	mov	r1, r8
 8012f5e:	4610      	mov	r0, r2
 8012f60:	9600      	str	r6, [sp, #0]
 8012f62:	f009 fd8b 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 8012f66:	f105 0209 	add.w	r2, r5, #9
 8012f6a:	b292      	uxth	r2, r2
 8012f6c:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8012f70:	f104 010d 	add.w	r1, r4, #13
 8012f74:	4610      	mov	r0, r2
 8012f76:	9600      	str	r6, [sp, #0]
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	b289      	uxth	r1, r1
 8012f7c:	f009 fd7e 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 8012f80:	f104 080e 	add.w	r8, r4, #14
 8012f84:	f105 020a 	add.w	r2, r5, #10
 8012f88:	b292      	uxth	r2, r2
 8012f8a:	fa1f f888 	uxth.w	r8, r8
 8012f8e:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8012f92:	4641      	mov	r1, r8
 8012f94:	4610      	mov	r0, r2
 8012f96:	9600      	str	r6, [sp, #0]
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	f009 fd6f 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 8012f9e:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8012fa2:	f105 020b 	add.w	r2, r5, #11
 8012fa6:	b292      	uxth	r2, r2
 8012fa8:	b2bf      	uxth	r7, r7
 8012faa:	463b      	mov	r3, r7
 8012fac:	4641      	mov	r1, r8
 8012fae:	4610      	mov	r0, r2
 8012fb0:	9600      	str	r6, [sp, #0]
 8012fb2:	f009 fd63 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8012fb6:	f105 020c 	add.w	r2, r5, #12
 8012fba:	b292      	uxth	r2, r2
 8012fbc:	f104 010f 	add.w	r1, r4, #15
 8012fc0:	463b      	mov	r3, r7
 8012fc2:	4610      	mov	r0, r2
 8012fc4:	9600      	str	r6, [sp, #0]
 8012fc6:	b289      	uxth	r1, r1
 8012fc8:	f009 fd58 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 8012fcc:	f104 0810 	add.w	r8, r4, #16
 8012fd0:	f105 020d 	add.w	r2, r5, #13
 8012fd4:	b292      	uxth	r2, r2
 8012fd6:	fa1f f888 	uxth.w	r8, r8
 8012fda:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8012fde:	4641      	mov	r1, r8
 8012fe0:	4610      	mov	r0, r2
 8012fe2:	9600      	str	r6, [sp, #0]
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	f009 fd49 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8012fea:	f104 0726 	add.w	r7, r4, #38	; 0x26
 8012fee:	f105 020e 	add.w	r2, r5, #14
 8012ff2:	b292      	uxth	r2, r2
 8012ff4:	b2bf      	uxth	r7, r7
 8012ff6:	463b      	mov	r3, r7
 8012ff8:	4641      	mov	r1, r8
 8012ffa:	4610      	mov	r0, r2
 8012ffc:	9600      	str	r6, [sp, #0]
 8012ffe:	f009 fd3d 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 8013002:	f105 020f 	add.w	r2, r5, #15
 8013006:	b292      	uxth	r2, r2
 8013008:	f104 0111 	add.w	r1, r4, #17
 801300c:	463b      	mov	r3, r7
 801300e:	4610      	mov	r0, r2
 8013010:	9600      	str	r6, [sp, #0]
 8013012:	b289      	uxth	r1, r1
 8013014:	f009 fd32 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 8013018:	f104 0812 	add.w	r8, r4, #18
 801301c:	f105 0210 	add.w	r2, r5, #16
 8013020:	b292      	uxth	r2, r2
 8013022:	fa1f f888 	uxth.w	r8, r8
 8013026:	f104 0325 	add.w	r3, r4, #37	; 0x25
 801302a:	4641      	mov	r1, r8
 801302c:	4610      	mov	r0, r2
 801302e:	9600      	str	r6, [sp, #0]
 8013030:	b29b      	uxth	r3, r3
 8013032:	f009 fd23 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 8013036:	f104 0724 	add.w	r7, r4, #36	; 0x24
 801303a:	f105 0211 	add.w	r2, r5, #17
 801303e:	b292      	uxth	r2, r2
 8013040:	b2bf      	uxth	r7, r7
 8013042:	463b      	mov	r3, r7
 8013044:	4641      	mov	r1, r8
 8013046:	4610      	mov	r0, r2
 8013048:	9600      	str	r6, [sp, #0]
 801304a:	f009 fd17 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 801304e:	f105 0212 	add.w	r2, r5, #18
 8013052:	b292      	uxth	r2, r2
 8013054:	f104 0113 	add.w	r1, r4, #19
 8013058:	463b      	mov	r3, r7
 801305a:	4610      	mov	r0, r2
 801305c:	9600      	str	r6, [sp, #0]
 801305e:	b289      	uxth	r1, r1
 8013060:	f009 fd0c 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 8013064:	f104 0714 	add.w	r7, r4, #20
 8013068:	f105 0213 	add.w	r2, r5, #19
 801306c:	b292      	uxth	r2, r2
 801306e:	b2bf      	uxth	r7, r7
 8013070:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8013074:	4639      	mov	r1, r7
 8013076:	4610      	mov	r0, r2
 8013078:	9600      	str	r6, [sp, #0]
 801307a:	b29b      	uxth	r3, r3
 801307c:	f009 fcfe 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 8013080:	f105 0214 	add.w	r2, r5, #20
 8013084:	b292      	uxth	r2, r2
 8013086:	f104 0322 	add.w	r3, r4, #34	; 0x22
 801308a:	4639      	mov	r1, r7
 801308c:	4610      	mov	r0, r2
 801308e:	9600      	str	r6, [sp, #0]
 8013090:	b29b      	uxth	r3, r3
 8013092:	f009 fcf3 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8013096:	f104 0821 	add.w	r8, r4, #33	; 0x21
 801309a:	f105 0215 	add.w	r2, r5, #21
 801309e:	b292      	uxth	r2, r2
 80130a0:	fa1f f888 	uxth.w	r8, r8
 80130a4:	f104 0115 	add.w	r1, r4, #21
 80130a8:	4643      	mov	r3, r8
 80130aa:	4610      	mov	r0, r2
 80130ac:	9600      	str	r6, [sp, #0]
 80130ae:	b289      	uxth	r1, r1
 80130b0:	f009 fce4 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 80130b4:	f104 0716 	add.w	r7, r4, #22
 80130b8:	f105 0216 	add.w	r2, r5, #22
 80130bc:	b292      	uxth	r2, r2
 80130be:	b2bf      	uxth	r7, r7
 80130c0:	4643      	mov	r3, r8
 80130c2:	4639      	mov	r1, r7
 80130c4:	4610      	mov	r0, r2
 80130c6:	9600      	str	r6, [sp, #0]
 80130c8:	f009 fcd8 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 80130cc:	f105 0217 	add.w	r2, r5, #23
 80130d0:	b292      	uxth	r2, r2
 80130d2:	f104 0320 	add.w	r3, r4, #32
 80130d6:	4639      	mov	r1, r7
 80130d8:	4610      	mov	r0, r2
 80130da:	9600      	str	r6, [sp, #0]
 80130dc:	b29b      	uxth	r3, r3
 80130de:	f009 fccd 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 80130e2:	f104 081f 	add.w	r8, r4, #31
 80130e6:	f105 0218 	add.w	r2, r5, #24
 80130ea:	b292      	uxth	r2, r2
 80130ec:	fa1f f888 	uxth.w	r8, r8
 80130f0:	f104 0117 	add.w	r1, r4, #23
 80130f4:	4643      	mov	r3, r8
 80130f6:	4610      	mov	r0, r2
 80130f8:	9600      	str	r6, [sp, #0]
 80130fa:	b289      	uxth	r1, r1
 80130fc:	f009 fcbe 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 8013100:	f104 0718 	add.w	r7, r4, #24
 8013104:	f105 0219 	add.w	r2, r5, #25
 8013108:	b292      	uxth	r2, r2
 801310a:	b2bf      	uxth	r7, r7
 801310c:	4643      	mov	r3, r8
 801310e:	4639      	mov	r1, r7
 8013110:	4610      	mov	r0, r2
 8013112:	9600      	str	r6, [sp, #0]
 8013114:	f009 fcb2 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 8013118:	f105 021a 	add.w	r2, r5, #26
 801311c:	b292      	uxth	r2, r2
 801311e:	f104 031e 	add.w	r3, r4, #30
 8013122:	4639      	mov	r1, r7
 8013124:	4610      	mov	r0, r2
 8013126:	9600      	str	r6, [sp, #0]
 8013128:	b29b      	uxth	r3, r3
 801312a:	f009 fca7 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 801312e:	f104 0819 	add.w	r8, r4, #25
 8013132:	f105 021b 	add.w	r2, r5, #27
 8013136:	b292      	uxth	r2, r2
 8013138:	fa1f f888 	uxth.w	r8, r8
 801313c:	f104 031d 	add.w	r3, r4, #29
 8013140:	4641      	mov	r1, r8
 8013142:	4610      	mov	r0, r2
 8013144:	9600      	str	r6, [sp, #0]
 8013146:	b29b      	uxth	r3, r3
 8013148:	f009 fc98 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 801314c:	f104 071c 	add.w	r7, r4, #28
 8013150:	f105 021c 	add.w	r2, r5, #28
 8013154:	b292      	uxth	r2, r2
 8013156:	b2bf      	uxth	r7, r7
 8013158:	463b      	mov	r3, r7
 801315a:	4641      	mov	r1, r8
 801315c:	4610      	mov	r0, r2
 801315e:	9600      	str	r6, [sp, #0]
 8013160:	f009 fc8c 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 8013164:	f105 021d 	add.w	r2, r5, #29
 8013168:	b292      	uxth	r2, r2
 801316a:	f104 011a 	add.w	r1, r4, #26
 801316e:	463b      	mov	r3, r7
 8013170:	4610      	mov	r0, r2
 8013172:	9600      	str	r6, [sp, #0]
 8013174:	b289      	uxth	r1, r1
 8013176:	f009 fc81 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 801317a:	9600      	str	r6, [sp, #0]
 801317c:	465b      	mov	r3, fp
 801317e:	4652      	mov	r2, sl
 8013180:	4659      	mov	r1, fp
 8013182:	4650      	mov	r0, sl
 8013184:	f009 fc7a 	bl	801ca7c <TFT_DrawLine>
}
 8013188:	b005      	add	sp, #20
 801318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 801318e:	f646 0682 	movw	r6, #26754	; 0x6882
 8013192:	e68b      	b.n	8012eac <GUI_Button_Measure_Start_Pause+0x20>
 8013194:	20005728 	.word	0x20005728

08013198 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8013198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	4605      	mov	r5, r0
 801319e:	460c      	mov	r4, r1
 80131a0:	f100 0623 	add.w	r6, r0, #35	; 0x23
 80131a4:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 80131a8:	2a00      	cmp	r2, #0
 80131aa:	f000 8111 	beq.w	80133d0 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	f241 3276 	movw	r2, #4982	; 0x1376
 80131b4:	bf18      	it	ne
 80131b6:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 80131ba:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80131bc:	f105 080a 	add.w	r8, r5, #10
 80131c0:	f104 0b07 	add.w	fp, r4, #7
 80131c4:	f104 091e 	add.w	r9, r4, #30
 80131c8:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 80131cc:	b2bb      	uxth	r3, r7
 80131ce:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80131d0:	fa1f fb8b 	uxth.w	fp, fp
 80131d4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80131d8:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80131dc:	f105 0a1c 	add.w	sl, r5, #28
 80131e0:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 80131e4:	f009 fca7 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80131e8:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80131ea:	464b      	mov	r3, r9
 80131ec:	4642      	mov	r2, r8
 80131ee:	4659      	mov	r1, fp
 80131f0:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80131f2:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80131f6:	9600      	str	r6, [sp, #0]
 80131f8:	f009 fc40 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80131fc:	463b      	mov	r3, r7
 80131fe:	4652      	mov	r2, sl
 8013200:	4659      	mov	r1, fp
 8013202:	4640      	mov	r0, r8
 8013204:	9600      	str	r6, [sp, #0]
 8013206:	f009 fc39 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 801320a:	463b      	mov	r3, r7
 801320c:	4652      	mov	r2, sl
 801320e:	4649      	mov	r1, r9
 8013210:	4640      	mov	r0, r8
 8013212:	9600      	str	r6, [sp, #0]
 8013214:	f009 fc32 	bl	801ca7c <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 8013218:	f105 020b 	add.w	r2, r5, #11
 801321c:	b292      	uxth	r2, r2
 801321e:	f104 031d 	add.w	r3, r4, #29
 8013222:	f104 0108 	add.w	r1, r4, #8
 8013226:	4610      	mov	r0, r2
 8013228:	9600      	str	r6, [sp, #0]
 801322a:	b29b      	uxth	r3, r3
 801322c:	b289      	uxth	r1, r1
 801322e:	f009 fc25 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 8013232:	f104 091c 	add.w	r9, r4, #28
 8013236:	f105 020c 	add.w	r2, r5, #12
 801323a:	b292      	uxth	r2, r2
 801323c:	fa1f f989 	uxth.w	r9, r9
 8013240:	f104 0109 	add.w	r1, r4, #9
 8013244:	464b      	mov	r3, r9
 8013246:	4610      	mov	r0, r2
 8013248:	9600      	str	r6, [sp, #0]
 801324a:	b289      	uxth	r1, r1
 801324c:	f009 fc16 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 8013250:	f104 080a 	add.w	r8, r4, #10
 8013254:	f105 020d 	add.w	r2, r5, #13
 8013258:	b292      	uxth	r2, r2
 801325a:	fa1f f888 	uxth.w	r8, r8
 801325e:	464b      	mov	r3, r9
 8013260:	4641      	mov	r1, r8
 8013262:	4610      	mov	r0, r2
 8013264:	9600      	str	r6, [sp, #0]
 8013266:	f009 fc09 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 801326a:	f105 020e 	add.w	r2, r5, #14
 801326e:	b292      	uxth	r2, r2
 8013270:	f104 031b 	add.w	r3, r4, #27
 8013274:	4641      	mov	r1, r8
 8013276:	4610      	mov	r0, r2
 8013278:	9600      	str	r6, [sp, #0]
 801327a:	b29b      	uxth	r3, r3
 801327c:	f009 fbfe 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 8013280:	f104 091a 	add.w	r9, r4, #26
 8013284:	f105 020f 	add.w	r2, r5, #15
 8013288:	b292      	uxth	r2, r2
 801328a:	fa1f f989 	uxth.w	r9, r9
 801328e:	f104 010b 	add.w	r1, r4, #11
 8013292:	464b      	mov	r3, r9
 8013294:	4610      	mov	r0, r2
 8013296:	9600      	str	r6, [sp, #0]
 8013298:	b289      	uxth	r1, r1
 801329a:	f009 fbef 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 801329e:	f104 080c 	add.w	r8, r4, #12
 80132a2:	f105 0210 	add.w	r2, r5, #16
 80132a6:	b292      	uxth	r2, r2
 80132a8:	fa1f f888 	uxth.w	r8, r8
 80132ac:	464b      	mov	r3, r9
 80132ae:	4641      	mov	r1, r8
 80132b0:	4610      	mov	r0, r2
 80132b2:	9600      	str	r6, [sp, #0]
 80132b4:	f009 fbe2 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 80132b8:	f105 0211 	add.w	r2, r5, #17
 80132bc:	b292      	uxth	r2, r2
 80132be:	f104 0319 	add.w	r3, r4, #25
 80132c2:	4641      	mov	r1, r8
 80132c4:	4610      	mov	r0, r2
 80132c6:	9600      	str	r6, [sp, #0]
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	f009 fbd7 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 80132ce:	f105 0212 	add.w	r2, r5, #18
 80132d2:	b292      	uxth	r2, r2
 80132d4:	f104 0318 	add.w	r3, r4, #24
 80132d8:	f104 010d 	add.w	r1, r4, #13
 80132dc:	4610      	mov	r0, r2
 80132de:	9600      	str	r6, [sp, #0]
 80132e0:	b29b      	uxth	r3, r3
 80132e2:	b289      	uxth	r1, r1
 80132e4:	f009 fbca 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 80132e8:	f104 080e 	add.w	r8, r4, #14
 80132ec:	f105 0213 	add.w	r2, r5, #19
 80132f0:	f104 0917 	add.w	r9, r4, #23
 80132f4:	b292      	uxth	r2, r2
 80132f6:	fa1f f888 	uxth.w	r8, r8
 80132fa:	fa1f f989 	uxth.w	r9, r9
 80132fe:	464b      	mov	r3, r9
 8013300:	4641      	mov	r1, r8
 8013302:	4610      	mov	r0, r2
 8013304:	9600      	str	r6, [sp, #0]
 8013306:	f009 fbb9 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 801330a:	f105 0214 	add.w	r2, r5, #20
 801330e:	b292      	uxth	r2, r2
 8013310:	464b      	mov	r3, r9
 8013312:	4641      	mov	r1, r8
 8013314:	4610      	mov	r0, r2
 8013316:	9600      	str	r6, [sp, #0]
 8013318:	f009 fbb0 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 801331c:	f104 080f 	add.w	r8, r4, #15
 8013320:	f105 0215 	add.w	r2, r5, #21
 8013324:	f104 0916 	add.w	r9, r4, #22
 8013328:	b292      	uxth	r2, r2
 801332a:	fa1f f888 	uxth.w	r8, r8
 801332e:	fa1f f989 	uxth.w	r9, r9
 8013332:	464b      	mov	r3, r9
 8013334:	4641      	mov	r1, r8
 8013336:	4610      	mov	r0, r2
 8013338:	9600      	str	r6, [sp, #0]
 801333a:	f009 fb9f 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 801333e:	f105 0216 	add.w	r2, r5, #22
 8013342:	b292      	uxth	r2, r2
 8013344:	464b      	mov	r3, r9
 8013346:	4641      	mov	r1, r8
 8013348:	4610      	mov	r0, r2
 801334a:	9600      	str	r6, [sp, #0]
 801334c:	f009 fb96 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 8013350:	f104 0810 	add.w	r8, r4, #16
 8013354:	f105 0217 	add.w	r2, r5, #23
 8013358:	b292      	uxth	r2, r2
 801335a:	fa1f f888 	uxth.w	r8, r8
 801335e:	f104 0315 	add.w	r3, r4, #21
 8013362:	4641      	mov	r1, r8
 8013364:	4610      	mov	r0, r2
 8013366:	9600      	str	r6, [sp, #0]
 8013368:	b29b      	uxth	r3, r3
 801336a:	f009 fb87 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 801336e:	f104 0914 	add.w	r9, r4, #20
 8013372:	f105 0218 	add.w	r2, r5, #24
 8013376:	b292      	uxth	r2, r2
 8013378:	fa1f f989 	uxth.w	r9, r9
 801337c:	464b      	mov	r3, r9
 801337e:	4641      	mov	r1, r8
 8013380:	4610      	mov	r0, r2
 8013382:	9600      	str	r6, [sp, #0]
 8013384:	f009 fb7a 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8013388:	f104 0811 	add.w	r8, r4, #17
 801338c:	f105 0219 	add.w	r2, r5, #25
 8013390:	b292      	uxth	r2, r2
 8013392:	fa1f f888 	uxth.w	r8, r8
 8013396:	464b      	mov	r3, r9
 8013398:	4641      	mov	r1, r8
 801339a:	4610      	mov	r0, r2
 801339c:	9600      	str	r6, [sp, #0]
 801339e:	f009 fb6d 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 80133a2:	3413      	adds	r4, #19
 80133a4:	f105 021a 	add.w	r2, r5, #26
 80133a8:	b292      	uxth	r2, r2
 80133aa:	b2a4      	uxth	r4, r4
 80133ac:	4623      	mov	r3, r4
 80133ae:	4641      	mov	r1, r8
 80133b0:	4610      	mov	r0, r2
 80133b2:	9600      	str	r6, [sp, #0]
 80133b4:	f009 fb62 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 80133b8:	f105 021b 	add.w	r2, r5, #27
 80133bc:	b292      	uxth	r2, r2
 80133be:	9600      	str	r6, [sp, #0]
 80133c0:	4623      	mov	r3, r4
 80133c2:	4639      	mov	r1, r7
 80133c4:	4610      	mov	r0, r2
 80133c6:	f009 fb59 	bl	801ca7c <TFT_DrawLine>
}
 80133ca:	b003      	add	sp, #12
 80133cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 80133d0:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	e6f1      	b.n	80131bc <GUI_Button_Measure_deltaE_Small+0x24>

080133d8 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 80133d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 80133dc:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 80133e0:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 80133e2:	f241 3876 	movw	r8, #4982	; 0x1376
 80133e6:	f100 0223 	add.w	r2, r0, #35	; 0x23
 80133ea:	f8cd 8000 	str.w	r8, [sp]
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	b292      	uxth	r2, r2
{
 80133f2:	4604      	mov	r4, r0
 80133f4:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 80133f6:	f009 fbb6 	bl	801cb66 <TFT_DrawRectangle>
	if(Check)
 80133fa:	b1fe      	cbz	r6, 801343c <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 80133fc:	f104 0610 	add.w	r6, r4, #16
 8013400:	f105 071a 	add.w	r7, r5, #26
 8013404:	b2b6      	uxth	r6, r6
 8013406:	b2bf      	uxth	r7, r7
 8013408:	f105 0111 	add.w	r1, r5, #17
 801340c:	f104 0008 	add.w	r0, r4, #8
 8013410:	463b      	mov	r3, r7
 8013412:	4632      	mov	r2, r6
 8013414:	b289      	uxth	r1, r1
 8013416:	b280      	uxth	r0, r0
 8013418:	f8cd 8000 	str.w	r8, [sp]
 801341c:	f009 fb2e 	bl	801ca7c <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 8013420:	1d6b      	adds	r3, r5, #5
 8013422:	f104 021d 	add.w	r2, r4, #29
 8013426:	f8cd 8000 	str.w	r8, [sp]
 801342a:	b29b      	uxth	r3, r3
 801342c:	b292      	uxth	r2, r2
 801342e:	4639      	mov	r1, r7
 8013430:	4630      	mov	r0, r6
 8013432:	f009 fb23 	bl	801ca7c <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 8013436:	b002      	add	sp, #8
 8013438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 801343c:	f105 0320 	add.w	r3, r5, #32
 8013440:	f104 0220 	add.w	r2, r4, #32
 8013444:	1ca9      	adds	r1, r5, #2
 8013446:	1ca0      	adds	r0, r4, #2
 8013448:	2463      	movs	r4, #99	; 0x63
 801344a:	9400      	str	r4, [sp, #0]
 801344c:	b29b      	uxth	r3, r3
 801344e:	b292      	uxth	r2, r2
 8013450:	b289      	uxth	r1, r1
 8013452:	b280      	uxth	r0, r0
 8013454:	f009 fb6f 	bl	801cb36 <TFT_FillRectangle>
}
 8013458:	e7ed      	b.n	8013436 <GUI_CheckBox+0x5e>

0801345a <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 801345a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345e:	f100 0411 	add.w	r4, r0, #17
 8013462:	f101 0511 	add.w	r5, r1, #17
 8013466:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8013468:	b226      	sxth	r6, r4
 801346a:	b22f      	sxth	r7, r5
	if(Active){
 801346c:	b173      	cbz	r3, 801348c <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 801346e:	f241 3376 	movw	r3, #4982	; 0x1376
 8013472:	220f      	movs	r2, #15
 8013474:	4639      	mov	r1, r7
 8013476:	4630      	mov	r0, r6
 8013478:	f009 fa60 	bl	801c93c <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 801347c:	f1b8 0f00 	cmp.w	r8, #0
 8013480:	d111      	bne.n	80134a6 <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8013482:	2363      	movs	r3, #99	; 0x63
 8013484:	220a      	movs	r2, #10
 8013486:	b229      	sxth	r1, r5
 8013488:	b220      	sxth	r0, r4
 801348a:	e011      	b.n	80134b0 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 801348c:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8013490:	220f      	movs	r2, #15
 8013492:	4639      	mov	r1, r7
 8013494:	4630      	mov	r0, r6
 8013496:	f009 fa51 	bl	801c93c <TFT_DrawCircle>
	if(Check)
 801349a:	f1b8 0f00 	cmp.w	r8, #0
 801349e:	d0f0      	beq.n	8013482 <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 80134a0:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 80134a4:	e001      	b.n	80134aa <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 80134a6:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 80134aa:	220a      	movs	r2, #10
 80134ac:	4639      	mov	r1, r7
 80134ae:	4630      	mov	r0, r6
		}
}
 80134b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 80134b4:	f009 bb7b 	b.w	801cbae <TFT_DrawFilledCircle>

080134b8 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 80134b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80134bc:	f101 031c 	add.w	r3, r1, #28
 80134c0:	2663      	movs	r6, #99	; 0x63
{
 80134c2:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80134c4:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 80134c8:	460d      	mov	r5, r1
 80134ca:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80134cc:	9600      	str	r6, [sp, #0]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	b292      	uxth	r2, r2
 80134d2:	f009 fb30 	bl	801cb36 <TFT_FillRectangle>
 80134d6:	f105 0611 	add.w	r6, r5, #17
 80134da:	f105 0318 	add.w	r3, r5, #24
 80134de:	f105 010a 	add.w	r1, r5, #10
 80134e2:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80134e6:	4d1e      	ldr	r5, [pc, #120]	; (8013560 <GUI_Switch_Button+0xa8>)
	if(Check)
 80134e8:	b1e7      	cbz	r7, 8013524 <GUI_Switch_Button+0x6c>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 80134ea:	f242 409b 	movw	r0, #9371	; 0x249b
 80134ee:	270a      	movs	r7, #10
 80134f0:	9001      	str	r0, [sp, #4]
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	b292      	uxth	r2, r2
 80134f6:	b289      	uxth	r1, r1
 80134f8:	4620      	mov	r0, r4
 80134fa:	9700      	str	r7, [sp, #0]
 80134fc:	f009 fca0 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8013500:	f104 0019 	add.w	r0, r4, #25
 8013504:	f241 3376 	movw	r3, #4982	; 0x1376
 8013508:	463a      	mov	r2, r7
 801350a:	b231      	sxth	r1, r6
 801350c:	b200      	sxth	r0, r0
 801350e:	f009 fb4e 	bl	801cbae <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 8013512:	782b      	ldrb	r3, [r5, #0]
 8013514:	b91b      	cbnz	r3, 801351e <GUI_Switch_Button+0x66>
				BlueTooth_On(); //Enable Bluetooth
 8013516:	f7f6 fd63 	bl	8009fe0 <BlueTooth_On>
				BluetoothStat = 0x01;
 801351a:	2301      	movs	r3, #1
 801351c:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				BlueTooth_Off(); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 801351e:	b002      	add	sp, #8
 8013520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 8013524:	f04f 080a 	mov.w	r8, #10
 8013528:	f24c 6018 	movw	r0, #50712	; 0xc618
 801352c:	9001      	str	r0, [sp, #4]
 801352e:	b29b      	uxth	r3, r3
 8013530:	b292      	uxth	r2, r2
 8013532:	b289      	uxth	r1, r1
 8013534:	4620      	mov	r0, r4
 8013536:	f8cd 8000 	str.w	r8, [sp]
 801353a:	f009 fc81 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801353e:	eb04 0008 	add.w	r0, r4, r8
 8013542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013546:	4642      	mov	r2, r8
 8013548:	b231      	sxth	r1, r6
 801354a:	b200      	sxth	r0, r0
 801354c:	f009 fb2f 	bl	801cbae <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 8013550:	782b      	ldrb	r3, [r5, #0]
 8013552:	2b01      	cmp	r3, #1
 8013554:	d1e3      	bne.n	801351e <GUI_Switch_Button+0x66>
				BlueTooth_Off(); //Disable Bluetooth
 8013556:	f7f6 fd6b 	bl	800a030 <BlueTooth_Off>
				BluetoothStat = 0x00;
 801355a:	702f      	strb	r7, [r5, #0]
}
 801355c:	e7df      	b.n	801351e <GUI_Switch_Button+0x66>
 801355e:	bf00      	nop
 8013560:	20009d20 	.word	0x20009d20

08013564 <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 8013564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8013566:	f101 031c 	add.w	r3, r1, #28
{
 801356a:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 801356c:	2763      	movs	r7, #99	; 0x63
 801356e:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8013572:	b29b      	uxth	r3, r3
 8013574:	b292      	uxth	r2, r2
 8013576:	9700      	str	r7, [sp, #0]
{
 8013578:	460d      	mov	r5, r1
 801357a:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 801357c:	f009 fadb 	bl	801cb36 <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8013580:	f242 409b 	movw	r0, #9371	; 0x249b
 8013584:	f105 0318 	add.w	r3, r5, #24
 8013588:	f105 010a 	add.w	r1, r5, #10
 801358c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8013590:	3511      	adds	r5, #17
 8013592:	9001      	str	r0, [sp, #4]
	if(Check)
 8013594:	b19e      	cbz	r6, 80135be <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8013596:	260a      	movs	r6, #10
 8013598:	b29b      	uxth	r3, r3
 801359a:	4620      	mov	r0, r4
 801359c:	9600      	str	r6, [sp, #0]
 801359e:	b292      	uxth	r2, r2
 80135a0:	b289      	uxth	r1, r1
 80135a2:	f009 fc4d 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 80135a6:	f104 0019 	add.w	r0, r4, #25
 80135aa:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80135ae:	4632      	mov	r2, r6
 80135b0:	b229      	sxth	r1, r5
 80135b2:	b200      	sxth	r0, r0
		}
}
 80135b4:	b003      	add	sp, #12
 80135b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80135ba:	f009 baf8 	b.w	801cbae <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 80135be:	260a      	movs	r6, #10
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	4620      	mov	r0, r4
 80135c4:	9600      	str	r6, [sp, #0]
 80135c6:	b292      	uxth	r2, r2
 80135c8:	b289      	uxth	r1, r1
 80135ca:	f009 fc39 	bl	801ce40 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80135ce:	19a0      	adds	r0, r4, r6
 80135d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135d4:	e7eb      	b.n	80135ae <GUI_Switch_ButtonActive+0x4a>

080135d6 <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 80135d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 80135da:	f100 0423 	add.w	r4, r0, #35	; 0x23
 80135de:	1dcf      	adds	r7, r1, #7
{
 80135e0:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 80135e2:	b2a4      	uxth	r4, r4
 80135e4:	b2bf      	uxth	r7, r7
 80135e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	4622      	mov	r2, r4
 80135ee:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 80135f0:	f105 060e 	add.w	r6, r5, #14
{
 80135f4:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 80135f6:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 80135f8:	f009 fa9d 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 80135fc:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8013600:	9300      	str	r3, [sp, #0]
 8013602:	4622      	mov	r2, r4
 8013604:	4633      	mov	r3, r6
 8013606:	4639      	mov	r1, r7
 8013608:	4640      	mov	r0, r8
 801360a:	f009 fa94 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 801360e:	f105 0315 	add.w	r3, r5, #21
 8013612:	f64c 1243 	movw	r2, #51523	; 0xc943
 8013616:	9200      	str	r2, [sp, #0]
 8013618:	b29b      	uxth	r3, r3
 801361a:	4622      	mov	r2, r4
 801361c:	4631      	mov	r1, r6
 801361e:	4640      	mov	r0, r8
 8013620:	f009 fa89 	bl	801cb36 <TFT_FillRectangle>
}
 8013624:	b002      	add	sp, #8
 8013626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801362a <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 801362a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 801362e:	f100 030f 	add.w	r3, r0, #15
{
 8013632:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8013634:	b29b      	uxth	r3, r3
 8013636:	270f      	movs	r7, #15
 8013638:	9302      	str	r3, [sp, #8]
 801363a:	f101 0309 	add.w	r3, r1, #9
{
 801363e:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8013640:	b29b      	uxth	r3, r3
 8013642:	9700      	str	r7, [sp, #0]
 8013644:	9a02      	ldr	r2, [sp, #8]
 8013646:	9303      	str	r3, [sp, #12]
{
 8013648:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 801364a:	f009 fa74 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 801364e:	f104 0314 	add.w	r3, r4, #20
 8013652:	b29b      	uxth	r3, r3
 8013654:	f104 0822 	add.w	r8, r4, #34	; 0x22
 8013658:	fa1f f888 	uxth.w	r8, r8
 801365c:	9304      	str	r3, [sp, #16]
 801365e:	9700      	str	r7, [sp, #0]
 8013660:	9b03      	ldr	r3, [sp, #12]
 8013662:	9804      	ldr	r0, [sp, #16]
 8013664:	4642      	mov	r2, r8
 8013666:	4629      	mov	r1, r5
 8013668:	f009 fa65 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 801366c:	f105 030e 	add.w	r3, r5, #14
 8013670:	b29b      	uxth	r3, r3
 8013672:	f105 0615 	add.w	r6, r5, #21
 8013676:	b2b6      	uxth	r6, r6
 8013678:	9305      	str	r3, [sp, #20]
 801367a:	9700      	str	r7, [sp, #0]
 801367c:	4633      	mov	r3, r6
 801367e:	9a02      	ldr	r2, [sp, #8]
 8013680:	9905      	ldr	r1, [sp, #20]
 8013682:	4620      	mov	r0, r4
 8013684:	f009 fa57 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8013688:	9700      	str	r7, [sp, #0]
 801368a:	4633      	mov	r3, r6
 801368c:	4642      	mov	r2, r8
 801368e:	9905      	ldr	r1, [sp, #20]
 8013690:	9804      	ldr	r0, [sp, #16]
 8013692:	f009 fa50 	bl	801cb36 <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 8013696:	1cab      	adds	r3, r5, #2
 8013698:	b29b      	uxth	r3, r3
 801369a:	f104 091d 	add.w	r9, r4, #29
 801369e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80136a2:	9307      	str	r3, [sp, #28]
 80136a4:	fa1f f989 	uxth.w	r9, r9
 80136a8:	9700      	str	r7, [sp, #0]
 80136aa:	4633      	mov	r3, r6
 80136ac:	464a      	mov	r2, r9
 80136ae:	9907      	ldr	r1, [sp, #28]
 80136b0:	4620      	mov	r0, r4
 80136b2:	f009 f9e3 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 80136b6:	1c6b      	adds	r3, r5, #1
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	9308      	str	r3, [sp, #32]
 80136bc:	9700      	str	r7, [sp, #0]
 80136be:	4633      	mov	r3, r6
 80136c0:	464a      	mov	r2, r9
 80136c2:	9908      	ldr	r1, [sp, #32]
 80136c4:	4620      	mov	r0, r4
 80136c6:	f009 f9d9 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 80136ca:	f104 021e 	add.w	r2, r4, #30
 80136ce:	9700      	str	r7, [sp, #0]
 80136d0:	4633      	mov	r3, r6
 80136d2:	4629      	mov	r1, r5
 80136d4:	4620      	mov	r0, r4
 80136d6:	b292      	uxth	r2, r2
 80136d8:	f009 f9d0 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 80136dc:	1c63      	adds	r3, r4, #1
 80136de:	b29b      	uxth	r3, r3
 80136e0:	f104 0a1f 	add.w	sl, r4, #31
 80136e4:	9309      	str	r3, [sp, #36]	; 0x24
 80136e6:	fa1f fa8a 	uxth.w	sl, sl
 80136ea:	9700      	str	r7, [sp, #0]
 80136ec:	4633      	mov	r3, r6
 80136ee:	4652      	mov	r2, sl
 80136f0:	4629      	mov	r1, r5
 80136f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136f4:	f009 f9c2 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 80136f8:	1ca3      	adds	r3, r4, #2
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	930a      	str	r3, [sp, #40]	; 0x28
 80136fe:	9700      	str	r7, [sp, #0]
 8013700:	4633      	mov	r3, r6
 8013702:	4652      	mov	r2, sl
 8013704:	4629      	mov	r1, r5
 8013706:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013708:	f009 f9b8 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 801370c:	1ce3      	adds	r3, r4, #3
 801370e:	b29b      	uxth	r3, r3
 8013710:	f104 0920 	add.w	r9, r4, #32
 8013714:	930b      	str	r3, [sp, #44]	; 0x2c
 8013716:	fa1f f989 	uxth.w	r9, r9
 801371a:	9700      	str	r7, [sp, #0]
 801371c:	4633      	mov	r3, r6
 801371e:	464a      	mov	r2, r9
 8013720:	4629      	mov	r1, r5
 8013722:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013724:	f009 f9aa 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 8013728:	1d23      	adds	r3, r4, #4
 801372a:	b29b      	uxth	r3, r3
 801372c:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 8013730:	9306      	str	r3, [sp, #24]
 8013732:	fa1f fb8b 	uxth.w	fp, fp
 8013736:	9700      	str	r7, [sp, #0]
 8013738:	4633      	mov	r3, r6
 801373a:	465a      	mov	r2, fp
 801373c:	4629      	mov	r1, r5
 801373e:	9806      	ldr	r0, [sp, #24]
 8013740:	f009 f99c 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 8013744:	9700      	str	r7, [sp, #0]
 8013746:	4633      	mov	r3, r6
 8013748:	4642      	mov	r2, r8
 801374a:	4629      	mov	r1, r5
 801374c:	9806      	ldr	r0, [sp, #24]
 801374e:	f009 f995 	bl	801ca7c <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 8013752:	9700      	str	r7, [sp, #0]
 8013754:	462b      	mov	r3, r5
 8013756:	4652      	mov	r2, sl
 8013758:	4631      	mov	r1, r6
 801375a:	4620      	mov	r0, r4
 801375c:	f009 f98e 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 8013760:	9700      	str	r7, [sp, #0]
 8013762:	462b      	mov	r3, r5
 8013764:	464a      	mov	r2, r9
 8013766:	4631      	mov	r1, r6
 8013768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801376a:	f009 f987 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 801376e:	9700      	str	r7, [sp, #0]
 8013770:	462b      	mov	r3, r5
 8013772:	464a      	mov	r2, r9
 8013774:	4631      	mov	r1, r6
 8013776:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013778:	f009 f980 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 801377c:	9700      	str	r7, [sp, #0]
 801377e:	462b      	mov	r3, r5
 8013780:	465a      	mov	r2, fp
 8013782:	4631      	mov	r1, r6
 8013784:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013786:	f009 f979 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 801378a:	9700      	str	r7, [sp, #0]
 801378c:	462b      	mov	r3, r5
 801378e:	4642      	mov	r2, r8
 8013790:	4631      	mov	r1, r6
 8013792:	9806      	ldr	r0, [sp, #24]
 8013794:	f009 f972 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 8013798:	1d60      	adds	r0, r4, #5
 801379a:	9700      	str	r7, [sp, #0]
 801379c:	9b08      	ldr	r3, [sp, #32]
 801379e:	4642      	mov	r2, r8
 80137a0:	4631      	mov	r1, r6
 80137a2:	b280      	uxth	r0, r0
 80137a4:	f009 f96a 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 80137a8:	1da0      	adds	r0, r4, #6
 80137aa:	9700      	str	r7, [sp, #0]
 80137ac:	9b07      	ldr	r3, [sp, #28]
 80137ae:	4642      	mov	r2, r8
 80137b0:	4631      	mov	r1, r6
 80137b2:	b280      	uxth	r0, r0
 80137b4:	f009 f962 	bl	801ca7c <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 80137b8:	9700      	str	r7, [sp, #0]
 80137ba:	9b05      	ldr	r3, [sp, #20]
 80137bc:	9903      	ldr	r1, [sp, #12]
 80137be:	4642      	mov	r2, r8
 80137c0:	4620      	mov	r0, r4
 80137c2:	f009 f9b8 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 80137c6:	9700      	str	r7, [sp, #0]
 80137c8:	4633      	mov	r3, r6
 80137ca:	9a04      	ldr	r2, [sp, #16]
 80137cc:	9802      	ldr	r0, [sp, #8]
 80137ce:	4629      	mov	r1, r5
 80137d0:	f009 f9b1 	bl	801cb36 <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 80137d4:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 80137d8:	f104 0213 	add.w	r2, r4, #19
 80137dc:	f104 0010 	add.w	r0, r4, #16
 80137e0:	4633      	mov	r3, r6
 80137e2:	4629      	mov	r1, r5
 80137e4:	9700      	str	r7, [sp, #0]
 80137e6:	b292      	uxth	r2, r2
 80137e8:	b280      	uxth	r0, r0
 80137ea:	f009 f9a4 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 80137ee:	f105 030d 	add.w	r3, r5, #13
 80137f2:	f105 010a 	add.w	r1, r5, #10
 80137f6:	9700      	str	r7, [sp, #0]
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	4642      	mov	r2, r8
 80137fc:	b289      	uxth	r1, r1
 80137fe:	4620      	mov	r0, r4
 8013800:	f009 f999 	bl	801cb36 <TFT_FillRectangle>
	
}
 8013804:	b00d      	add	sp, #52	; 0x34
 8013806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801380c <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 801380c:	b570      	push	{r4, r5, r6, lr}
 801380e:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8013812:	f101 040a 	add.w	r4, r1, #10
{
 8013816:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8013818:	b2a4      	uxth	r4, r4
 801381a:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 801381e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8013822:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	b292      	uxth	r2, r2
 8013828:	4623      	mov	r3, r4
{
 801382a:	eeb0 8a40 	vmov.f32	s16, s0
 801382e:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8013830:	f009 f981 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 8013834:	ee07 5a90 	vmov	s15, r5
 8013838:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8013868 <GUI_Bar_Measure+0x5c>
 801383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013840:	f241 3376 	movw	r3, #4982	; 0x1376
 8013844:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013848:	9300      	str	r3, [sp, #0]
 801384a:	4631      	mov	r1, r6
 801384c:	4623      	mov	r3, r4
 801384e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013852:	4628      	mov	r0, r5
 8013854:	edcd 7a03 	vstr	s15, [sp, #12]
 8013858:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801385c:	f009 f96b 	bl	801cb36 <TFT_FillRectangle>
}
 8013860:	b004      	add	sp, #16
 8013862:	ecbd 8b02 	vpop	{d8}
 8013866:	bd70      	pop	{r4, r5, r6, pc}
 8013868:	42dc0000 	.word	0x42dc0000

0801386c <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF, old_deg_e_wt = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 801386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013870:	ed2d 8b02 	vpush	{d8}
 8013874:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013876:	4bc5      	ldr	r3, [pc, #788]	; (8013b8c <GUI_Text_E_Measure+0x320>)
{
 8013878:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 801387a:	781a      	ldrb	r2, [r3, #0]
 801387c:	4bc4      	ldr	r3, [pc, #784]	; (8013b90 <GUI_Text_E_Measure+0x324>)
 801387e:	781b      	ldrb	r3, [r3, #0]
{
 8013880:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013882:	429a      	cmp	r2, r3
{
 8013884:	4605      	mov	r5, r0
 8013886:	460c      	mov	r4, r1
 8013888:	eeb0 8a40 	vmov.f32	s16, s0
 801388c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013890:	d007      	beq.n	80138a2 <GUI_Text_E_Measure+0x36>
 8013892:	4ac0      	ldr	r2, [pc, #768]	; (8013b94 <GUI_Text_E_Measure+0x328>)
 8013894:	2300      	movs	r3, #0
 8013896:	7013      	strb	r3, [r2, #0]
 8013898:	4abf      	ldr	r2, [pc, #764]	; (8013b98 <GUI_Text_E_Measure+0x32c>)
 801389a:	7013      	strb	r3, [r2, #0]
 801389c:	4bbf      	ldr	r3, [pc, #764]	; (8013b9c <GUI_Text_E_Measure+0x330>)
 801389e:	22ff      	movs	r2, #255	; 0xff
 80138a0:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 80138a2:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80138a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 80138a8:	9303      	str	r3, [sp, #12]
 80138aa:	9304      	str	r3, [sp, #16]
 80138ac:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80138b0:	f009 fb70 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80138b4:	2063      	movs	r0, #99	; 0x63
 80138b6:	f009 fb73 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80138ba:	48b9      	ldr	r0, [pc, #740]	; (8013ba0 <GUI_Text_E_Measure+0x334>)
 80138bc:	f009 fb64 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 80138c0:	1ca1      	adds	r1, r4, #2
 80138c2:	2224      	movs	r2, #36	; 0x24
 80138c4:	b289      	uxth	r1, r1
 80138c6:	4628      	mov	r0, r5
 80138c8:	f009 fc28 	bl	801d11c <TFT_DrawChar>
	

	if((Value/1000.0) >= 1.0)
 80138cc:	ee18 0a10 	vmov	r0, s16
 80138d0:	f7ec fe52 	bl	8000578 <__aeabi_f2d>
 80138d4:	2200      	movs	r2, #0
 80138d6:	4bb3      	ldr	r3, [pc, #716]	; (8013ba4 <GUI_Text_E_Measure+0x338>)
 80138d8:	f7ec ffcc 	bl	8000874 <__aeabi_ddiv>
 80138dc:	2200      	movs	r2, #0
 80138de:	4bb2      	ldr	r3, [pc, #712]	; (8013ba8 <GUI_Text_E_Measure+0x33c>)
 80138e0:	f7ed f924 	bl	8000b2c <__aeabi_dcmpge>
 80138e4:	b358      	cbz	r0, 801393e <GUI_Text_E_Measure+0xd2>
	{
		Value = Value/(1000.0);
 80138e6:	eddf 7ab1 	vldr	s15, [pc, #708]	; 8013bac <GUI_Text_E_Measure+0x340>
 80138ea:	ee88 8a27 	vdiv.f32	s16, s16, s15
		Value = Value * 1000.0;
		deg = 2;
		meas_type = 0;
	}

	if(nope)
 80138ee:	2e00      	cmp	r6, #0
 80138f0:	d16e      	bne.n	80139d0 <GUI_Text_E_Measure+0x164>
		deg = 1;
 80138f2:	2601      	movs	r6, #1
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
				old_nan_El = 1;
			}
		}
	else{
		old_nan_Ee = 0; old_nan_El = 0;
 80138f4:	4aa7      	ldr	r2, [pc, #668]	; (8013b94 <GUI_Text_E_Measure+0x328>)
 80138f6:	2300      	movs	r3, #0
 80138f8:	7013      	strb	r3, [r2, #0]
 80138fa:	4aa7      	ldr	r2, [pc, #668]	; (8013b98 <GUI_Text_E_Measure+0x32c>)
 80138fc:	7013      	strb	r3, [r2, #0]
		if(energy_light && deg == 2)
 80138fe:	2f00      	cmp	r7, #0
 8013900:	f000 811a 	beq.w	8013b38 <GUI_Text_E_Measure+0x2cc>
			Value = floor(Value*10)/10.0;
		}
		else if (energy_light && deg != 2)
		{
			old_nan_Ee = 0;
			Value = floor(Value*100)/100.0;
 8013904:	eddf 7aaa 	vldr	s15, [pc, #680]	; 8013bb0 <GUI_Text_E_Measure+0x344>
 8013908:	ee68 7a27 	vmul.f32	s15, s16, s15
 801390c:	ee17 0a90 	vmov	r0, s15
 8013910:	f7ec fe32 	bl	8000578 <__aeabi_f2d>
 8013914:	ec41 0b10 	vmov	d0, r0, r1
 8013918:	f00f ffb6 	bl	8023888 <floor>
 801391c:	4ba5      	ldr	r3, [pc, #660]	; (8013bb4 <GUI_Text_E_Measure+0x348>)
 801391e:	2200      	movs	r2, #0
		}
		if(!energy_light)
		{
			old_nan_El = 0;
			Value = floor(Value*10)/10.0;
 8013920:	ec51 0b10 	vmov	r0, r1, d0
 8013924:	f7ec ffa6 	bl	8000874 <__aeabi_ddiv>
 8013928:	f7ed f972 	bl	8000c10 <__aeabi_d2f>
 801392c:	ee08 0a10 	vmov	s16, r0
		}



	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013930:	f1b8 0f00 	cmp.w	r8, #0
 8013934:	f040 81a7 	bne.w	8013c86 <GUI_Text_E_Measure+0x41a>
 8013938:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801393c:	e1a5      	b.n	8013c8a <GUI_Text_E_Measure+0x41e>
	else if (energy_light && Value < 1.0)
 801393e:	2f00      	cmp	r7, #0
 8013940:	f000 8148 	beq.w	8013bd4 <GUI_Text_E_Measure+0x368>
 8013944:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013948:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013950:	4b90      	ldr	r3, [pc, #576]	; (8013b94 <GUI_Text_E_Measure+0x328>)
 8013952:	f140 81f1 	bpl.w	8013d38 <GUI_Text_E_Measure+0x4cc>
		Value = Value * 1000.0;
 8013956:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8013bac <GUI_Text_E_Measure+0x340>
 801395a:	ee28 8a00 	vmul.f32	s16, s16, s0
	if(nope)
 801395e:	2e00      	cmp	r6, #0
 8013960:	f000 80f9 	beq.w	8013b56 <GUI_Text_E_Measure+0x2ea>
		deg = 2;
 8013964:	2602      	movs	r6, #2
			if(energy_light & !old_nan_Ee){
 8013966:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8013b94 <GUI_Text_E_Measure+0x328>
 801396a:	f898 3000 	ldrb.w	r3, [r8]
 801396e:	2b00      	cmp	r3, #0
 8013970:	bf14      	ite	ne
 8013972:	2300      	movne	r3, #0
 8013974:	f007 0301 	andeq.w	r3, r7, #1
 8013978:	2b00      	cmp	r3, #0
 801397a:	f000 812f 	beq.w	8013bdc <GUI_Text_E_Measure+0x370>
				TFT_SetTextColor(TFT_White);
 801397e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013982:	f009 fb07 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013986:	2063      	movs	r0, #99	; 0x63
 8013988:	f009 fb0a 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801398c:	488a      	ldr	r0, [pc, #552]	; (8013bb8 <GUI_Text_E_Measure+0x34c>)
 801398e:	f009 fafb 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 8013992:	2163      	movs	r1, #99	; 0x63
 8013994:	f104 031a 	add.w	r3, r4, #26
 8013998:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 801399c:	f105 0023 	add.w	r0, r5, #35	; 0x23
 80139a0:	9100      	str	r1, [sp, #0]
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	b292      	uxth	r2, r2
 80139a6:	4621      	mov	r1, r4
 80139a8:	b280      	uxth	r0, r0
 80139aa:	f009 f8c4 	bl	801cb36 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80139ae:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80139b0:	f105 007a 	add.w	r0, r5, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 80139b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80139b8:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80139bc:	aa03      	add	r2, sp, #12
 80139be:	2303      	movs	r3, #3
 80139c0:	4621      	mov	r1, r4
 80139c2:	b280      	uxth	r0, r0
 80139c4:	f009 fc02 	bl	801d1cc <TFT_DisplayString>
				old_nan_El = 1;
 80139c8:	2301      	movs	r3, #1
 80139ca:	f888 3000 	strb.w	r3, [r8]
 80139ce:	e10d      	b.n	8013bec <GUI_Text_E_Measure+0x380>
		deg = 1;
 80139d0:	2601      	movs	r6, #1
 80139d2:	e7c8      	b.n	8013966 <GUI_Text_E_Measure+0xfa>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 80139d4:	4606      	mov	r6, r0
 80139d6:	e7c6      	b.n	8013966 <GUI_Text_E_Measure+0xfa>
	
	if(energy_light && number < old_num_e )
	{
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_num_n)
 80139d8:	4b78      	ldr	r3, [pc, #480]	; (8013bbc <GUI_Text_E_Measure+0x350>)
 80139da:	e18d      	b.n	8013cf8 <GUI_Text_E_Measure+0x48c>
			TFT_SetFont(&Font26RU_arch_small);
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
			TFT_DrawCharRus(X+215, Y+4, 'л');
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80139dc:	22bb      	movs	r2, #187	; 0xbb
 80139de:	4639      	mov	r1, r7
 80139e0:	b280      	uxth	r0, r0
 80139e2:	f009 fae3 	bl	801cfac <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80139e6:	22ba      	movs	r2, #186	; 0xba
 80139e8:	4639      	mov	r1, r7
 80139ea:	fa1f f089 	uxth.w	r0, r9
 80139ee:	e139      	b.n	8013c64 <GUI_Text_E_Measure+0x3f8>
			}
			
			
			old_deg_e = deg;
	} else if (Language_status == En && !energy_light)
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	f040 809e 	bne.w	8013b32 <GUI_Text_E_Measure+0x2c6>
 80139f6:	2f00      	cmp	r7, #0
 80139f8:	f040 8081 	bne.w	8013afe <GUI_Text_E_Measure+0x292>
	{
		if(deg != old_deg_e){
 80139fc:	4b67      	ldr	r3, [pc, #412]	; (8013b9c <GUI_Text_E_Measure+0x330>)
 80139fe:	781a      	ldrb	r2, [r3, #0]
 8013a00:	42b2      	cmp	r2, r6
 8013a02:	4699      	mov	r9, r3
 8013a04:	d034      	beq.n	8013a70 <GUI_Text_E_Measure+0x204>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013a06:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8013a0a:	f104 031a 	add.w	r3, r4, #26
 8013a0e:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8013a12:	1ce1      	adds	r1, r4, #3
 8013a14:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8013a18:	b280      	uxth	r0, r0
 8013a1a:	f8cd e000 	str.w	lr, [sp]
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	b292      	uxth	r2, r2
 8013a22:	b289      	uxth	r1, r1
 8013a24:	f009 f887 	bl	801cb36 <TFT_FillRectangle>
 8013a28:	f104 0804 	add.w	r8, r4, #4
 8013a2c:	f105 0ac8 	add.w	sl, r5, #200	; 0xc8
			if (deg){
			TFT_SetTextColor(TFT_White);
 8013a30:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 8013a34:	b1fe      	cbz	r6, 8013a76 <GUI_Text_E_Measure+0x20a>
			TFT_SetTextColor(TFT_White);
 8013a36:	f009 faad 	bl	801cf94 <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 8013a3a:	4861      	ldr	r0, [pc, #388]	; (8013bc0 <GUI_Text_E_Measure+0x354>)
 8013a3c:	f009 faa4 	bl	801cf88 <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 8013a40:	fa1f f888 	uxth.w	r8, r8
 8013a44:	f105 00d6 	add.w	r0, r5, #214	; 0xd6
 8013a48:	222b      	movs	r2, #43	; 0x2b
 8013a4a:	4641      	mov	r1, r8
 8013a4c:	b280      	uxth	r0, r0
 8013a4e:	f009 fb65 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 8013a52:	222a      	movs	r2, #42	; 0x2a
 8013a54:	4641      	mov	r1, r8
 8013a56:	fa1f f08a 	uxth.w	r0, sl
 8013a5a:	f009 fb5f 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 8013a5e:	f105 00e2 	add.w	r0, r5, #226	; 0xe2
 8013a62:	2237      	movs	r2, #55	; 0x37
 8013a64:	4641      	mov	r1, r8
 8013a66:	b280      	uxth	r0, r0
 8013a68:	f009 fb58 	bl	801d11c <TFT_DrawChar>
			old_rulx = 0;
 8013a6c:	4b55      	ldr	r3, [pc, #340]	; (8013bc4 <GUI_Text_E_Measure+0x358>)
 8013a6e:	701f      	strb	r7, [r3, #0]
			TFT_DrawChar(X+212, Y+4, 'x'-65);
			
		}
			}
		
		old_deg_e = deg;
 8013a70:	f889 6000 	strb.w	r6, [r9]
 8013a74:	e0fa      	b.n	8013c6c <GUI_Text_E_Measure+0x400>
			TFT_SetTextColor(TFT_White);
 8013a76:	f009 fa8d 	bl	801cf94 <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8013a7a:	fa1f f888 	uxth.w	r8, r8
			TFT_SetFont(&Font26EN_arch_small);
 8013a7e:	4850      	ldr	r0, [pc, #320]	; (8013bc0 <GUI_Text_E_Measure+0x354>)
 8013a80:	f009 fa82 	bl	801cf88 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8013a84:	4641      	mov	r1, r8
 8013a86:	fa1f f08a 	uxth.w	r0, sl
 8013a8a:	222b      	movs	r2, #43	; 0x2b
 8013a8c:	f009 fb46 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 8013a90:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 8013a94:	2237      	movs	r2, #55	; 0x37
 8013a96:	4641      	mov	r1, r8
 8013a98:	b280      	uxth	r0, r0
 8013a9a:	f009 fb3f 	bl	801d11c <TFT_DrawChar>
 8013a9e:	e7e7      	b.n	8013a70 <GUI_Text_E_Measure+0x204>
	}else if (Language_status == Ru && energy_light)
	{	
		if (deg != old_deg_e_wt)
 8013aa0:	4f49      	ldr	r7, [pc, #292]	; (8013bc8 <GUI_Text_E_Measure+0x35c>)
 8013aa2:	783a      	ldrb	r2, [r7, #0]
 8013aa4:	42b2      	cmp	r2, r6
 8013aa6:	d00a      	beq.n	8013abe <GUI_Text_E_Measure+0x252>
		{
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 8013aa8:	2263      	movs	r2, #99	; 0x63
 8013aaa:	f104 031a 	add.w	r3, r4, #26
 8013aae:	9200      	str	r2, [sp, #0]
 8013ab0:	b29b      	uxth	r3, r3
 8013ab2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8013ab6:	4621      	mov	r1, r4
 8013ab8:	20e6      	movs	r0, #230	; 0xe6
 8013aba:	f009 f83c 	bl	801cb36 <TFT_FillRectangle>
		}
		if (deg == 2)
 8013abe:	2e02      	cmp	r6, #2
		{
			GUI_TextRu_mW_m2(234, Y);
 8013ac0:	4621      	mov	r1, r4
 8013ac2:	f04f 00ea 	mov.w	r0, #234	; 0xea
		if (deg == 2)
 8013ac6:	d117      	bne.n	8013af8 <GUI_Text_E_Measure+0x28c>
			GUI_TextRu_mW_m2(234, Y);
 8013ac8:	f005 fc54 	bl	8019374 <GUI_TextRu_mW_m2>
		}
		else
		{
			GUI_TextEn_W_m2(234, Y);
		}
		old_deg_e_wt = deg;
 8013acc:	703e      	strb	r6, [r7, #0]
	}
	
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
 8013ace:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013ad2:	f009 fa5f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 8013ad6:	483d      	ldr	r0, [pc, #244]	; (8013bcc <GUI_Text_E_Measure+0x360>)
 8013ad8:	f009 fa56 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8013adc:	f104 010e 	add.w	r1, r4, #14
 8013ae0:	f105 0014 	add.w	r0, r5, #20
 8013ae4:	2265      	movs	r2, #101	; 0x65
	else {
		TFT_SetTextColor(TFT_White);
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8013ae6:	b289      	uxth	r1, r1
 8013ae8:	b280      	uxth	r0, r0
 8013aea:	f009 fb17 	bl	801d11c <TFT_DrawChar>
	}

}
 8013aee:	b006      	add	sp, #24
 8013af0:	ecbd 8b02 	vpop	{d8}
 8013af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			GUI_TextRu_W_m2(234, Y);
 8013af8:	f005 fc88 	bl	801940c <GUI_TextRu_W_m2>
 8013afc:	e7e6      	b.n	8013acc <GUI_Text_E_Measure+0x260>
		if (deg != old_deg_e_wt)
 8013afe:	4f32      	ldr	r7, [pc, #200]	; (8013bc8 <GUI_Text_E_Measure+0x35c>)
 8013b00:	783a      	ldrb	r2, [r7, #0]
 8013b02:	42b2      	cmp	r2, r6
 8013b04:	d00a      	beq.n	8013b1c <GUI_Text_E_Measure+0x2b0>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 8013b06:	2263      	movs	r2, #99	; 0x63
 8013b08:	f104 031a 	add.w	r3, r4, #26
 8013b0c:	9200      	str	r2, [sp, #0]
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8013b14:	4621      	mov	r1, r4
 8013b16:	20e6      	movs	r0, #230	; 0xe6
 8013b18:	f009 f80d 	bl	801cb36 <TFT_FillRectangle>
		if (deg == 2)
 8013b1c:	2e02      	cmp	r6, #2
			GUI_TextEn_mW_m2(234, Y);
 8013b1e:	4621      	mov	r1, r4
 8013b20:	f04f 00ea 	mov.w	r0, #234	; 0xea
		if (deg == 2)
 8013b24:	d102      	bne.n	8013b2c <GUI_Text_E_Measure+0x2c0>
			GUI_TextEn_mW_m2(234, Y);
 8013b26:	f004 fa59 	bl	8017fdc <GUI_TextEn_mW_m2>
 8013b2a:	e7cf      	b.n	8013acc <GUI_Text_E_Measure+0x260>
			GUI_TextEn_W_m2(234, Y);
 8013b2c:	f004 fa1c 	bl	8017f68 <GUI_TextEn_W_m2>
 8013b30:	e7cc      	b.n	8013acc <GUI_Text_E_Measure+0x260>
		if(energy_light) {
 8013b32:	2f00      	cmp	r7, #0
 8013b34:	d1cb      	bne.n	8013ace <GUI_Text_E_Measure+0x262>
 8013b36:	e099      	b.n	8013c6c <GUI_Text_E_Measure+0x400>
			Value = floor(Value*10)/10.0;
 8013b38:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013b3c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013b40:	ee17 0a90 	vmov	r0, s15
 8013b44:	f7ec fd18 	bl	8000578 <__aeabi_f2d>
 8013b48:	ec41 0b10 	vmov	d0, r0, r1
 8013b4c:	f00f fe9c 	bl	8023888 <floor>
 8013b50:	2200      	movs	r2, #0
 8013b52:	4b1f      	ldr	r3, [pc, #124]	; (8013bd0 <GUI_Text_E_Measure+0x364>)
 8013b54:	e6e4      	b.n	8013920 <GUI_Text_E_Measure+0xb4>
			Value = floor(Value*10)/10.0;
 8013b56:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013b5a:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8013b5e:	701e      	strb	r6, [r3, #0]
 8013b60:	4b0d      	ldr	r3, [pc, #52]	; (8013b98 <GUI_Text_E_Measure+0x32c>)
			Value = floor(Value*10)/10.0;
 8013b62:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8013b66:	701e      	strb	r6, [r3, #0]
			Value = floor(Value*10)/10.0;
 8013b68:	f7ec fd06 	bl	8000578 <__aeabi_f2d>
 8013b6c:	ec41 0b10 	vmov	d0, r0, r1
 8013b70:	f00f fe8a 	bl	8023888 <floor>
 8013b74:	2200      	movs	r2, #0
 8013b76:	4b16      	ldr	r3, [pc, #88]	; (8013bd0 <GUI_Text_E_Measure+0x364>)
 8013b78:	ec51 0b10 	vmov	r0, r1, d0
 8013b7c:	f7ec fe7a 	bl	8000874 <__aeabi_ddiv>
 8013b80:	f7ed f846 	bl	8000c10 <__aeabi_d2f>
 8013b84:	2602      	movs	r6, #2
 8013b86:	ee08 0a10 	vmov	s16, r0
 8013b8a:	e6d1      	b.n	8013930 <GUI_Text_E_Measure+0xc4>
 8013b8c:	2000022a 	.word	0x2000022a
 8013b90:	20005701 	.word	0x20005701
 8013b94:	20005735 	.word	0x20005735
 8013b98:	20005736 	.word	0x20005736
 8013b9c:	2000022d 	.word	0x2000022d
 8013ba0:	200001e8 	.word	0x200001e8
 8013ba4:	408f4000 	.word	0x408f4000
 8013ba8:	3ff00000 	.word	0x3ff00000
 8013bac:	447a0000 	.word	0x447a0000
 8013bb0:	42c80000 	.word	0x42c80000
 8013bb4:	40590000 	.word	0x40590000
 8013bb8:	200001f0 	.word	0x200001f0
 8013bbc:	20000246 	.word	0x20000246
 8013bc0:	200001f8 	.word	0x200001f8
 8013bc4:	20005741 	.word	0x20005741
 8013bc8:	2000022e 	.word	0x2000022e
 8013bcc:	200001c0 	.word	0x200001c0
 8013bd0:	40240000 	.word	0x40240000
	if(nope)
 8013bd4:	2e00      	cmp	r6, #0
 8013bd6:	f43f ae8d 	beq.w	80138f4 <GUI_Text_E_Measure+0x88>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8013bda:	463e      	mov	r6, r7
			else if(!energy_light & !old_nan_El){
 8013bdc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8013d64 <GUI_Text_E_Measure+0x4f8>
 8013be0:	f898 3000 	ldrb.w	r3, [r8]
 8013be4:	b913      	cbnz	r3, 8013bec <GUI_Text_E_Measure+0x380>
 8013be6:	2f00      	cmp	r7, #0
 8013be8:	f43f aec9 	beq.w	801397e <GUI_Text_E_Measure+0x112>
	if (Language_status == Ru && !energy_light)
 8013bec:	4b56      	ldr	r3, [pc, #344]	; (8013d48 <GUI_Text_E_Measure+0x4dc>)
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f47f aefd 	bne.w	80139f0 <GUI_Text_E_Measure+0x184>
 8013bf6:	2f00      	cmp	r7, #0
 8013bf8:	f47f af52 	bne.w	8013aa0 <GUI_Text_E_Measure+0x234>
			if(deg != old_deg_e){
 8013bfc:	4b53      	ldr	r3, [pc, #332]	; (8013d4c <GUI_Text_E_Measure+0x4e0>)
 8013bfe:	781a      	ldrb	r2, [r3, #0]
 8013c00:	42b2      	cmp	r2, r6
 8013c02:	4698      	mov	r8, r3
 8013c04:	d030      	beq.n	8013c68 <GUI_Text_E_Measure+0x3fc>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013c06:	2763      	movs	r7, #99	; 0x63
 8013c08:	f104 031a 	add.w	r3, r4, #26
 8013c0c:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8013c10:	1ce1      	adds	r1, r4, #3
 8013c12:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8013c16:	b29b      	uxth	r3, r3
 8013c18:	b292      	uxth	r2, r2
 8013c1a:	b289      	uxth	r1, r1
 8013c1c:	9700      	str	r7, [sp, #0]
 8013c1e:	b280      	uxth	r0, r0
 8013c20:	f008 ff89 	bl	801cb36 <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 8013c24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c28:	f009 f9b4 	bl	801cf94 <TFT_SetTextColor>
 8013c2c:	1d27      	adds	r7, r4, #4
			TFT_SetFont(&Font26RU_arch_small);
 8013c2e:	4848      	ldr	r0, [pc, #288]	; (8013d50 <GUI_Text_E_Measure+0x4e4>)
 8013c30:	f009 f9aa 	bl	801cf88 <TFT_SetFont>
 8013c34:	f105 09d7 	add.w	r9, r5, #215	; 0xd7
 8013c38:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8013c3c:	b2bf      	uxth	r7, r7
			if(deg){
 8013c3e:	2e00      	cmp	r6, #0
 8013c40:	f43f aecc 	beq.w	80139dc <GUI_Text_E_Measure+0x170>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8013c44:	22ba      	movs	r2, #186	; 0xba
 8013c46:	4639      	mov	r1, r7
 8013c48:	b280      	uxth	r0, r0
 8013c4a:	f009 f9af 	bl	801cfac <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 8013c4e:	22bb      	movs	r2, #187	; 0xbb
 8013c50:	4639      	mov	r1, r7
 8013c52:	fa1f f089 	uxth.w	r0, r9
 8013c56:	f009 f9a9 	bl	801cfac <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 8013c5a:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
 8013c5e:	22ba      	movs	r2, #186	; 0xba
 8013c60:	4639      	mov	r1, r7
 8013c62:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 8013c64:	f009 f9a2 	bl	801cfac <TFT_DrawCharRus>
			old_deg_e = deg;
 8013c68:	f888 6000 	strb.w	r6, [r8]
		TFT_SetTextColor(TFT_White);
 8013c6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c70:	f009 f990 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 8013c74:	4837      	ldr	r0, [pc, #220]	; (8013d54 <GUI_Text_E_Measure+0x4e8>)
 8013c76:	f009 f987 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8013c7a:	f104 010d 	add.w	r1, r4, #13
 8013c7e:	f105 0017 	add.w	r0, r5, #23
 8013c82:	227b      	movs	r2, #123	; 0x7b
 8013c84:	e72f      	b.n	8013ae6 <GUI_Text_E_Measure+0x27a>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013c86:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8013c8a:	f009 f983 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013c8e:	2063      	movs	r0, #99	; 0x63
 8013c90:	f009 f986 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013c94:	4830      	ldr	r0, [pc, #192]	; (8013d58 <GUI_Text_E_Measure+0x4ec>)
 8013c96:	f009 f977 	bl	801cf88 <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);
 8013c9a:	ee18 0a10 	vmov	r0, s16
 8013c9e:	f7ec fc6b 	bl	8000578 <__aeabi_f2d>
 8013ca2:	4602      	mov	r2, r0
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	a803      	add	r0, sp, #12
 8013ca8:	492c      	ldr	r1, [pc, #176]	; (8013d5c <GUI_Text_E_Measure+0x4f0>)
 8013caa:	f00c fe33 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 8013cae:	220a      	movs	r2, #10
		deg = 1;
 8013cb0:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8013cb2:	f04f 0800 	mov.w	r8, #0
 8013cb6:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8013cba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8013cbe:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013cc0:	ee07 2a10 	vmov	s14, r2
 8013cc4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8013cc8:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8013ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd4:	db08      	blt.n	8013ce8 <GUI_Text_E_Measure+0x47c>
			delta_pos-=23;
 8013cd6:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 8013cda:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8013cde:	434a      	muls	r2, r1
			delta_pos-=23;
 8013ce0:	fa5f f989 	uxtb.w	r9, r9
			number++;
 8013ce4:	fa5f f888 	uxtb.w	r8, r8
 8013ce8:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8013cea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013cee:	d1e7      	bne.n	8013cc0 <GUI_Text_E_Measure+0x454>
	if(energy_light && number < old_num_e )
 8013cf0:	2f00      	cmp	r7, #0
 8013cf2:	f43f ae71 	beq.w	80139d8 <GUI_Text_E_Measure+0x16c>
 8013cf6:	4b1a      	ldr	r3, [pc, #104]	; (8013d60 <GUI_Text_E_Measure+0x4f4>)
	else if(!energy_light && number < old_num_n)
 8013cf8:	781a      	ldrb	r2, [r3, #0]
 8013cfa:	4542      	cmp	r2, r8
 8013cfc:	469a      	mov	sl, r3
 8013cfe:	d90d      	bls.n	8013d1c <GUI_Text_E_Measure+0x4b0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 8013d00:	2163      	movs	r1, #99	; 0x63
 8013d02:	f104 031a 	add.w	r3, r4, #26
 8013d06:	f105 027f 	add.w	r2, r5, #127	; 0x7f
 8013d0a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013d0e:	9100      	str	r1, [sp, #0]
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	b292      	uxth	r2, r2
 8013d14:	4621      	mov	r1, r4
 8013d16:	b280      	uxth	r0, r0
 8013d18:	f008 ff0d 	bl	801cb36 <TFT_FillRectangle>
	buffer[8] = 0;
 8013d1c:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013d1e:	eb05 0009 	add.w	r0, r5, r9
		old_num_n = number;
 8013d22:	f88a 8000 	strb.w	r8, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013d26:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8013d28:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013d2c:	4621      	mov	r1, r4
 8013d2e:	2303      	movs	r3, #3
 8013d30:	b280      	uxth	r0, r0
 8013d32:	f009 fa4b 	bl	801d1cc <TFT_DisplayString>
 8013d36:	e759      	b.n	8013bec <GUI_Text_E_Measure+0x380>
	if(nope)
 8013d38:	2e00      	cmp	r6, #0
 8013d3a:	f47f ae4b 	bne.w	80139d4 <GUI_Text_E_Measure+0x168>
		old_nan_Ee = 0; old_nan_El = 0;
 8013d3e:	701e      	strb	r6, [r3, #0]
 8013d40:	4b08      	ldr	r3, [pc, #32]	; (8013d64 <GUI_Text_E_Measure+0x4f8>)
 8013d42:	701e      	strb	r6, [r3, #0]
 8013d44:	e5de      	b.n	8013904 <GUI_Text_E_Measure+0x98>
 8013d46:	bf00      	nop
 8013d48:	20005703 	.word	0x20005703
 8013d4c:	2000022d 	.word	0x2000022d
 8013d50:	20000208 	.word	0x20000208
 8013d54:	200001c0 	.word	0x200001c0
 8013d58:	200001f0 	.word	0x200001f0
 8013d5c:	080323e5 	.word	0x080323e5
 8013d60:	20000245 	.word	0x20000245
 8013d64:	20005736 	.word	0x20005736

08013d68 <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF, old_deg_L_wt = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8013d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d6c:	ed2d 8b02 	vpush	{d8}
 8013d70:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013d72:	4bc5      	ldr	r3, [pc, #788]	; (8014088 <GUI_Text_L_Measure+0x320>)
{
 8013d74:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013d76:	781a      	ldrb	r2, [r3, #0]
 8013d78:	4bc4      	ldr	r3, [pc, #784]	; (801408c <GUI_Text_L_Measure+0x324>)
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	429a      	cmp	r2, r3
{
 8013d7e:	b086      	sub	sp, #24
 8013d80:	4604      	mov	r4, r0
 8013d82:	460d      	mov	r5, r1
 8013d84:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013d88:	d007      	beq.n	8013d9a <GUI_Text_L_Measure+0x32>
 8013d8a:	4ac1      	ldr	r2, [pc, #772]	; (8014090 <GUI_Text_L_Measure+0x328>)
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	7013      	strb	r3, [r2, #0]
 8013d90:	4ac0      	ldr	r2, [pc, #768]	; (8014094 <GUI_Text_L_Measure+0x32c>)
 8013d92:	7013      	strb	r3, [r2, #0]
 8013d94:	4bc0      	ldr	r3, [pc, #768]	; (8014098 <GUI_Text_L_Measure+0x330>)
 8013d96:	22ff      	movs	r2, #255	; 0xff
 8013d98:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 8013d9a:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	if((Value/1000.0) >= 1.0)
 8013d9c:	ee18 0a10 	vmov	r0, s16
	char buffer[9] = {0};
 8013da0:	9303      	str	r3, [sp, #12]
 8013da2:	9304      	str	r3, [sp, #16]
 8013da4:	f88d 3014 	strb.w	r3, [sp, #20]
	if((Value/1000.0) >= 1.0)
 8013da8:	f7ec fbe6 	bl	8000578 <__aeabi_f2d>
 8013dac:	2200      	movs	r2, #0
 8013dae:	4bbb      	ldr	r3, [pc, #748]	; (801409c <GUI_Text_L_Measure+0x334>)
 8013db0:	f7ec fd60 	bl	8000874 <__aeabi_ddiv>
 8013db4:	2200      	movs	r2, #0
 8013db6:	4bba      	ldr	r3, [pc, #744]	; (80140a0 <GUI_Text_L_Measure+0x338>)
 8013db8:	f7ec feb8 	bl	8000b2c <__aeabi_dcmpge>
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	d039      	beq.n	8013e34 <GUI_Text_L_Measure+0xcc>
	{
		Value = Value/(1000.0);
 8013dc0:	eddf 7ab8 	vldr	s15, [pc, #736]	; 80140a4 <GUI_Text_L_Measure+0x33c>
 8013dc4:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8013dc8:	2601      	movs	r6, #1
		Value = Value * 1000.0;
		deg = 2;
		meas_type = 0;
	}

	TFT_SetTextColor(TFT_White);
 8013dca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013dce:	f009 f8e1 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013dd2:	2063      	movs	r0, #99	; 0x63
 8013dd4:	f009 f8e4 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8013dd8:	48b3      	ldr	r0, [pc, #716]	; (80140a8 <GUI_Text_L_Measure+0x340>)
 8013dda:	f009 f8d5 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8013dde:	1ca9      	adds	r1, r5, #2
 8013de0:	4620      	mov	r0, r4
 8013de2:	222b      	movs	r2, #43	; 0x2b
 8013de4:	b289      	uxth	r1, r1
 8013de6:	f009 f999 	bl	801d11c <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 8013dea:	48b0      	ldr	r0, [pc, #704]	; (80140ac <GUI_Text_L_Measure+0x344>)
	if(energy_light) {
 8013dec:	b3a7      	cbz	r7, 8013e58 <GUI_Text_L_Measure+0xf0>
	TFT_SetFont(&Font16EN_arch_small);
 8013dee:	f009 f8cb 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8013df2:	f105 010e 	add.w	r1, r5, #14
 8013df6:	f104 0014 	add.w	r0, r4, #20
 8013dfa:	2265      	movs	r2, #101	; 0x65
 8013dfc:	b289      	uxth	r1, r1
 8013dfe:	b280      	uxth	r0, r0
 8013e00:	f009 f98c 	bl	801d11c <TFT_DrawChar>
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nope) 
 8013e04:	f1b8 0f00 	cmp.w	r8, #0
 8013e08:	d137      	bne.n	8013e7a <GUI_Text_L_Measure+0x112>
 8013e0a:	4ba9      	ldr	r3, [pc, #676]	; (80140b0 <GUI_Text_L_Measure+0x348>)
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light && deg == 2)
 8013e0c:	2e02      	cmp	r6, #2
	{
		old_nan_Ee = 0;
 8013e0e:	f883 8000 	strb.w	r8, [r3]
	if(energy_light && deg == 2)
 8013e12:	f040 80c1 	bne.w	8013f98 <GUI_Text_L_Measure+0x230>
		Value = floor(Value*100)/100.0;
	}
	if(!energy_light)
	{
		old_nan_El = 0;
		Value = floor(Value*10)/10.0;
 8013e16:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013e1a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013e1e:	ee17 0a90 	vmov	r0, s15
 8013e22:	f7ec fba9 	bl	8000578 <__aeabi_f2d>
 8013e26:	ec41 0b10 	vmov	d0, r0, r1
 8013e2a:	f00f fd2d 	bl	8023888 <floor>
 8013e2e:	2200      	movs	r2, #0
 8013e30:	4ba0      	ldr	r3, [pc, #640]	; (80140b4 <GUI_Text_L_Measure+0x34c>)
 8013e32:	e0bf      	b.n	8013fb4 <GUI_Text_L_Measure+0x24c>
	else if (energy_light && Value < 1.0)
 8013e34:	b167      	cbz	r7, 8013e50 <GUI_Text_L_Measure+0xe8>
 8013e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e42:	d507      	bpl.n	8013e54 <GUI_Text_L_Measure+0xec>
		Value = Value * 1000.0;
 8013e44:	eddf 7a97 	vldr	s15, [pc, #604]	; 80140a4 <GUI_Text_L_Measure+0x33c>
		deg = 2;
 8013e48:	2602      	movs	r6, #2
		Value = Value * 1000.0;
 8013e4a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013e4e:	e7bc      	b.n	8013dca <GUI_Text_L_Measure+0x62>
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8013e50:	463e      	mov	r6, r7
 8013e52:	e7ba      	b.n	8013dca <GUI_Text_L_Measure+0x62>
 8013e54:	4606      	mov	r6, r0
 8013e56:	e7b8      	b.n	8013dca <GUI_Text_L_Measure+0x62>
		TFT_SetFont(&Font16EN_arch_small);
 8013e58:	f009 f896 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8013e5c:	f105 010d 	add.w	r1, r5, #13
 8013e60:	f104 0017 	add.w	r0, r4, #23
 8013e64:	227b      	movs	r2, #123	; 0x7b
 8013e66:	b289      	uxth	r1, r1
 8013e68:	b280      	uxth	r0, r0
 8013e6a:	f009 f957 	bl	801d11c <TFT_DrawChar>
	if(nope) 
 8013e6e:	f1b8 0f00 	cmp.w	r8, #0
 8013e72:	d135      	bne.n	8013ee0 <GUI_Text_L_Measure+0x178>
		old_nan_El = 0;
 8013e74:	4b90      	ldr	r3, [pc, #576]	; (80140b8 <GUI_Text_L_Measure+0x350>)
 8013e76:	701f      	strb	r7, [r3, #0]
 8013e78:	e7cd      	b.n	8013e16 <GUI_Text_L_Measure+0xae>
			if(energy_light & !old_nan_Le){
 8013e7a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8014090 <GUI_Text_L_Measure+0x328>
 8013e7e:	f898 3000 	ldrb.w	r3, [r8]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	bf14      	ite	ne
 8013e86:	2300      	movne	r3, #0
 8013e88:	f007 0301 	andeq.w	r3, r7, #1
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d055      	beq.n	8013f3c <GUI_Text_L_Measure+0x1d4>
			TFT_SetTextColor(TFT_White);
 8013e90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013e94:	f009 f87e 	bl	801cf94 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013e98:	2063      	movs	r0, #99	; 0x63
 8013e9a:	f009 f881 	bl	801cfa0 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013e9e:	4887      	ldr	r0, [pc, #540]	; (80140bc <GUI_Text_L_Measure+0x354>)
 8013ea0:	f009 f872 	bl	801cf88 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013ea4:	2163      	movs	r1, #99	; 0x63
 8013ea6:	f105 031a 	add.w	r3, r5, #26
 8013eaa:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013eae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013eb2:	9100      	str	r1, [sp, #0]
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	b292      	uxth	r2, r2
 8013eb8:	4629      	mov	r1, r5
 8013eba:	b280      	uxth	r0, r0
 8013ebc:	f008 fe3b 	bl	801cb36 <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8013ec0:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013ec2:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8013ec6:	f88d 300c 	strb.w	r3, [sp, #12]
 8013eca:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013ece:	aa03      	add	r2, sp, #12
 8013ed0:	2303      	movs	r3, #3
 8013ed2:	4629      	mov	r1, r5
 8013ed4:	b280      	uxth	r0, r0
 8013ed6:	f009 f979 	bl	801d1cc <TFT_DisplayString>
			old_nan_Le = 1;}
 8013eda:	2301      	movs	r3, #1
 8013edc:	f888 3000 	strb.w	r3, [r8]
			if(!energy_light & !old_nan_Ll){
 8013ee0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014094 <GUI_Text_L_Measure+0x32c>
 8013ee4:	f898 3000 	ldrb.w	r3, [r8]
 8013ee8:	bb43      	cbnz	r3, 8013f3c <GUI_Text_L_Measure+0x1d4>
 8013eea:	bb3f      	cbnz	r7, 8013f3c <GUI_Text_L_Measure+0x1d4>
			TFT_SetTextColor(TFT_White);
 8013eec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013ef0:	f009 f850 	bl	801cf94 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013ef4:	2063      	movs	r0, #99	; 0x63
 8013ef6:	f009 f853 	bl	801cfa0 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013efa:	4870      	ldr	r0, [pc, #448]	; (80140bc <GUI_Text_L_Measure+0x354>)
 8013efc:	f009 f844 	bl	801cf88 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013f00:	2163      	movs	r1, #99	; 0x63
 8013f02:	f105 031a 	add.w	r3, r5, #26
 8013f06:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013f0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013f0e:	9100      	str	r1, [sp, #0]
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	b292      	uxth	r2, r2
 8013f14:	4629      	mov	r1, r5
 8013f16:	b280      	uxth	r0, r0
 8013f18:	f008 fe0d 	bl	801cb36 <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8013f1c:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013f1e:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8013f22:	f88d 300c 	strb.w	r3, [sp, #12]
 8013f26:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013f2a:	aa03      	add	r2, sp, #12
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	4629      	mov	r1, r5
 8013f30:	b280      	uxth	r0, r0
 8013f32:	f009 f94b 	bl	801d1cc <TFT_DisplayString>
			old_nan_Ll = 1;}
 8013f36:	2301      	movs	r3, #1
 8013f38:	f888 3000 	strb.w	r3, [r8]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
	
}
	if (Language_status == Ru && !energy_light)
 8013f3c:	4b60      	ldr	r3, [pc, #384]	; (80140c0 <GUI_Text_L_Measure+0x358>)
 8013f3e:	f893 8000 	ldrb.w	r8, [r3]
 8013f42:	f1b8 0f00 	cmp.w	r8, #0
 8013f46:	f040 80d7 	bne.w	80140f8 <GUI_Text_L_Measure+0x390>
 8013f4a:	2f00      	cmp	r7, #0
 8013f4c:	f040 8112 	bne.w	8014174 <GUI_Text_L_Measure+0x40c>
 8013f50:	4b51      	ldr	r3, [pc, #324]	; (8014098 <GUI_Text_L_Measure+0x330>)
	{
		if (deg && old_deg_L != 1){
 8013f52:	781a      	ldrb	r2, [r3, #0]
 8013f54:	2e00      	cmp	r6, #0
 8013f56:	f000 80bf 	beq.w	80140d8 <GUI_Text_L_Measure+0x370>
 8013f5a:	2a01      	cmp	r2, #1
 8013f5c:	d017      	beq.n	8013f8e <GUI_Text_L_Measure+0x226>
			old_deg_L = 1;
 8013f5e:	2601      	movs	r6, #1
 8013f60:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013f62:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8013f66:	f105 031a 	add.w	r3, r5, #26
 8013f6a:	1ce9      	adds	r1, r5, #3
 8013f6c:	2763      	movs	r7, #99	; 0x63
 8013f6e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013f72:	9700      	str	r7, [sp, #0]
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	b292      	uxth	r2, r2
 8013f78:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8013f7a:	b280      	uxth	r0, r0
 8013f7c:	f008 fddb 	bl	801cb36 <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 8013f80:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 8013f84:	4632      	mov	r2, r6
 8013f86:	4629      	mov	r1, r5
 8013f88:	b280      	uxth	r0, r0
 8013f8a:	f005 fb4f 	bl	801962c <GUI_TextRu_Cd_m2>
		{
			GUI_TextEn_W_m2_sr(X+210, Y);
		}
		old_deg_L_wt = deg;
	}
}
 8013f8e:	b006      	add	sp, #24
 8013f90:	ecbd 8b02 	vpop	{d8}
 8013f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Value = floor(Value*100)/100.0;
 8013f98:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80140c4 <GUI_Text_L_Measure+0x35c>
 8013f9c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013fa0:	ee17 0a90 	vmov	r0, s15
 8013fa4:	f7ec fae8 	bl	8000578 <__aeabi_f2d>
 8013fa8:	ec41 0b10 	vmov	d0, r0, r1
 8013fac:	f00f fc6c 	bl	8023888 <floor>
 8013fb0:	4b45      	ldr	r3, [pc, #276]	; (80140c8 <GUI_Text_L_Measure+0x360>)
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	ec51 0b10 	vmov	r0, r1, d0
 8013fb8:	f7ec fc5c 	bl	8000874 <__aeabi_ddiv>
 8013fbc:	f7ec fe28 	bl	8000c10 <__aeabi_d2f>
 8013fc0:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013fc4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8013fc8:	f249 43d2 	movw	r3, #38098	; 0x94d2
 8013fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fd0:	2800      	cmp	r0, #0
 8013fd2:	bf0c      	ite	eq
 8013fd4:	4610      	moveq	r0, r2
 8013fd6:	4618      	movne	r0, r3
 8013fd8:	f008 ffdc 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013fdc:	2063      	movs	r0, #99	; 0x63
 8013fde:	f008 ffdf 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013fe2:	4836      	ldr	r0, [pc, #216]	; (80140bc <GUI_Text_L_Measure+0x354>)
 8013fe4:	f008 ffd0 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8013fe8:	ee18 0a10 	vmov	r0, s16
 8013fec:	f7ec fac4 	bl	8000578 <__aeabi_f2d>
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	a803      	add	r0, sp, #12
 8013ff6:	4935      	ldr	r1, [pc, #212]	; (80140cc <GUI_Text_L_Measure+0x364>)
 8013ff8:	f00c fc8c 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 8013ffc:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8013ffe:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8014000:	f04f 0800 	mov.w	r8, #0
 8014004:	f04f 0975 	mov.w	r9, #117	; 0x75
		if((Value/(dec)) >= 1.0)
 8014008:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 801400c:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 801400e:	ee07 2a10 	vmov	s14, r2
 8014012:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8014016:	ee88 7a26 	vdiv.f32	s14, s16, s13
 801401a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014022:	db08      	blt.n	8014036 <GUI_Text_L_Measure+0x2ce>
			delta_pos-=23;
 8014024:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 8014028:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 801402c:	434a      	muls	r2, r1
			delta_pos-=23;
 801402e:	fa5f f989 	uxtb.w	r9, r9
			number++;
 8014032:	fa5f f888 	uxtb.w	r8, r8
 8014036:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 8014038:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801403c:	d1e7      	bne.n	801400e <GUI_Text_L_Measure+0x2a6>
	if(energy_light && number < old_numL_e )
 801403e:	b307      	cbz	r7, 8014082 <GUI_Text_L_Measure+0x31a>
 8014040:	4b23      	ldr	r3, [pc, #140]	; (80140d0 <GUI_Text_L_Measure+0x368>)
	else if(!energy_light && number < old_numL_n)
 8014042:	781a      	ldrb	r2, [r3, #0]
 8014044:	4542      	cmp	r2, r8
 8014046:	469a      	mov	sl, r3
 8014048:	d90d      	bls.n	8014066 <GUI_Text_L_Measure+0x2fe>
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 801404a:	2163      	movs	r1, #99	; 0x63
 801404c:	f105 031a 	add.w	r3, r5, #26
 8014050:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014054:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014058:	9100      	str	r1, [sp, #0]
 801405a:	b29b      	uxth	r3, r3
 801405c:	b292      	uxth	r2, r2
 801405e:	4629      	mov	r1, r5
 8014060:	b280      	uxth	r0, r0
 8014062:	f008 fd68 	bl	801cb36 <TFT_FillRectangle>
	buffer[8] = 0;
 8014066:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014068:	eb04 0009 	add.w	r0, r4, r9
		old_numL_n = number;
 801406c:	f88a 8000 	strb.w	r8, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014070:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8014072:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014076:	4629      	mov	r1, r5
 8014078:	2303      	movs	r3, #3
 801407a:	b280      	uxth	r0, r0
 801407c:	f009 f8a6 	bl	801d1cc <TFT_DisplayString>
 8014080:	e75c      	b.n	8013f3c <GUI_Text_L_Measure+0x1d4>
	else if(!energy_light && number < old_numL_n)
 8014082:	4b14      	ldr	r3, [pc, #80]	; (80140d4 <GUI_Text_L_Measure+0x36c>)
 8014084:	e7dd      	b.n	8014042 <GUI_Text_L_Measure+0x2da>
 8014086:	bf00      	nop
 8014088:	2000022a 	.word	0x2000022a
 801408c:	20005701 	.word	0x20005701
 8014090:	20005738 	.word	0x20005738
 8014094:	20005739 	.word	0x20005739
 8014098:	2000022b 	.word	0x2000022b
 801409c:	408f4000 	.word	0x408f4000
 80140a0:	3ff00000 	.word	0x3ff00000
 80140a4:	447a0000 	.word	0x447a0000
 80140a8:	200001e8 	.word	0x200001e8
 80140ac:	200001c0 	.word	0x200001c0
 80140b0:	20005735 	.word	0x20005735
 80140b4:	40240000 	.word	0x40240000
 80140b8:	20005736 	.word	0x20005736
 80140bc:	200001f0 	.word	0x200001f0
 80140c0:	20005703 	.word	0x20005703
 80140c4:	42c80000 	.word	0x42c80000
 80140c8:	40590000 	.word	0x40590000
 80140cc:	080323e5 	.word	0x080323e5
 80140d0:	20000233 	.word	0x20000233
 80140d4:	20000234 	.word	0x20000234
		}else if(!deg && old_deg_L != 0){
 80140d8:	2a00      	cmp	r2, #0
 80140da:	f43f af58 	beq.w	8013f8e <GUI_Text_L_Measure+0x226>
			old_deg_L = 0;
 80140de:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 80140e0:	2163      	movs	r1, #99	; 0x63
 80140e2:	f105 031a 	add.w	r3, r5, #26
 80140e6:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 80140ea:	9100      	str	r1, [sp, #0]
 80140ec:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	b292      	uxth	r2, r2
 80140f4:	4629      	mov	r1, r5
 80140f6:	e740      	b.n	8013f7a <GUI_Text_L_Measure+0x212>
	else if (Language_status == En && !energy_light)
 80140f8:	f1b8 0f01 	cmp.w	r8, #1
 80140fc:	f47f af47 	bne.w	8013f8e <GUI_Text_L_Measure+0x226>
 8014100:	2f00      	cmp	r7, #0
 8014102:	d153      	bne.n	80141ac <GUI_Text_L_Measure+0x444>
 8014104:	4b37      	ldr	r3, [pc, #220]	; (80141e4 <GUI_Text_L_Measure+0x47c>)
		if (deg && old_deg_L != 1){
 8014106:	781a      	ldrb	r2, [r3, #0]
 8014108:	b1e6      	cbz	r6, 8014144 <GUI_Text_L_Measure+0x3dc>
 801410a:	2a01      	cmp	r2, #1
 801410c:	f43f af3f 	beq.w	8013f8e <GUI_Text_L_Measure+0x226>
			old_deg_L = 1;
 8014110:	f883 8000 	strb.w	r8, [r3]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8014114:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8014118:	f105 031a 	add.w	r3, r5, #26
 801411c:	1f69      	subs	r1, r5, #5
 801411e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8014122:	2663      	movs	r6, #99	; 0x63
 8014124:	b292      	uxth	r2, r2
 8014126:	b289      	uxth	r1, r1
 8014128:	b280      	uxth	r0, r0
 801412a:	9600      	str	r6, [sp, #0]
 801412c:	b29b      	uxth	r3, r3
 801412e:	f008 fd02 	bl	801cb36 <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 8014132:	1f29      	subs	r1, r5, #4
 8014134:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8014138:	4642      	mov	r2, r8
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 801413a:	b289      	uxth	r1, r1
 801413c:	b280      	uxth	r0, r0
 801413e:	f004 f843 	bl	80181c8 <GUI_TextEn_cd_m2>
 8014142:	e724      	b.n	8013f8e <GUI_Text_L_Measure+0x226>
		}else if(!deg && old_deg_L != 0){
 8014144:	2a00      	cmp	r2, #0
 8014146:	f43f af22 	beq.w	8013f8e <GUI_Text_L_Measure+0x226>
			old_deg_L = 0;
 801414a:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 801414c:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8014150:	f105 031a 	add.w	r3, r5, #26
 8014154:	1f69      	subs	r1, r5, #5
 8014156:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 801415a:	2763      	movs	r7, #99	; 0x63
 801415c:	b292      	uxth	r2, r2
 801415e:	b289      	uxth	r1, r1
 8014160:	b280      	uxth	r0, r0
 8014162:	9700      	str	r7, [sp, #0]
 8014164:	b29b      	uxth	r3, r3
 8014166:	f008 fce6 	bl	801cb36 <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 801416a:	1f29      	subs	r1, r5, #4
 801416c:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 8014170:	4632      	mov	r2, r6
 8014172:	e7e2      	b.n	801413a <GUI_Text_L_Measure+0x3d2>
		if (deg != old_deg_L_wt)
 8014174:	4f1c      	ldr	r7, [pc, #112]	; (80141e8 <GUI_Text_L_Measure+0x480>)
 8014176:	783a      	ldrb	r2, [r7, #0]
 8014178:	42b2      	cmp	r2, r6
 801417a:	d00a      	beq.n	8014192 <GUI_Text_L_Measure+0x42a>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 801417c:	2263      	movs	r2, #99	; 0x63
 801417e:	f105 031a 	add.w	r3, r5, #26
 8014182:	9200      	str	r2, [sp, #0]
 8014184:	b29b      	uxth	r3, r3
 8014186:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801418a:	4629      	mov	r1, r5
 801418c:	20e6      	movs	r0, #230	; 0xe6
 801418e:	f008 fcd2 	bl	801cb36 <TFT_FillRectangle>
 8014192:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
		if (deg == 2)
 8014196:	2e02      	cmp	r6, #2
			GUI_TextRu_mW_m2_sr(X+210, Y);
 8014198:	4629      	mov	r1, r5
 801419a:	b280      	uxth	r0, r0
		if (deg == 2)
 801419c:	d103      	bne.n	80141a6 <GUI_Text_L_Measure+0x43e>
			GUI_TextRu_mW_m2_sr(X+210, Y);
 801419e:	f005 f9d9 	bl	8019554 <GUI_TextRu_mW_m2_sr>
		old_deg_L_wt = deg;
 80141a2:	703e      	strb	r6, [r7, #0]
}
 80141a4:	e6f3      	b.n	8013f8e <GUI_Text_L_Measure+0x226>
			GUI_TextRu_W_m2_sr(X+210, Y);
 80141a6:	f005 f973 	bl	8019490 <GUI_TextRu_W_m2_sr>
 80141aa:	e7fa      	b.n	80141a2 <GUI_Text_L_Measure+0x43a>
		if (deg != old_deg_L_wt)
 80141ac:	4f0e      	ldr	r7, [pc, #56]	; (80141e8 <GUI_Text_L_Measure+0x480>)
 80141ae:	783a      	ldrb	r2, [r7, #0]
 80141b0:	42b2      	cmp	r2, r6
 80141b2:	d00a      	beq.n	80141ca <GUI_Text_L_Measure+0x462>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 80141b4:	2263      	movs	r2, #99	; 0x63
 80141b6:	f105 031a 	add.w	r3, r5, #26
 80141ba:	9200      	str	r2, [sp, #0]
 80141bc:	b29b      	uxth	r3, r3
 80141be:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80141c2:	4629      	mov	r1, r5
 80141c4:	20e6      	movs	r0, #230	; 0xe6
 80141c6:	f008 fcb6 	bl	801cb36 <TFT_FillRectangle>
 80141ca:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
		if (deg == 2)
 80141ce:	2e02      	cmp	r6, #2
			GUI_TextEn_mW_m2_sr(X+210, Y);
 80141d0:	4629      	mov	r1, r5
 80141d2:	b280      	uxth	r0, r0
		if (deg == 2)
 80141d4:	d102      	bne.n	80141dc <GUI_Text_L_Measure+0x474>
			GUI_TextEn_mW_m2_sr(X+210, Y);
 80141d6:	f003 ff99 	bl	801810c <GUI_TextEn_mW_m2_sr>
 80141da:	e7e2      	b.n	80141a2 <GUI_Text_L_Measure+0x43a>
			GUI_TextEn_W_m2_sr(X+210, Y);
 80141dc:	f003 ff3e 	bl	801805c <GUI_TextEn_W_m2_sr>
 80141e0:	e7df      	b.n	80141a2 <GUI_Text_L_Measure+0x43a>
 80141e2:	bf00      	nop
 80141e4:	2000022b 	.word	0x2000022b
 80141e8:	2000022c 	.word	0x2000022c

080141ec <GUI_Text_PPF_Measure>:

uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 80141ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f0:	ed2d 8b02 	vpush	{d8}
 80141f4:	4692      	mov	sl, r2
 80141f6:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 80141f8:	4ab1      	ldr	r2, [pc, #708]	; (80144c0 <GUI_Text_PPF_Measure+0x2d4>)
 80141fa:	4bb2      	ldr	r3, [pc, #712]	; (80144c4 <GUI_Text_PPF_Measure+0x2d8>)
 80141fc:	4eb2      	ldr	r6, [pc, #712]	; (80144c8 <GUI_Text_PPF_Measure+0x2dc>)
{	
 80141fe:	4604      	mov	r4, r0
 8014200:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8014202:	7810      	ldrb	r0, [r2, #0]
 8014204:	7819      	ldrb	r1, [r3, #0]
 8014206:	4288      	cmp	r0, r1
{	
 8014208:	b087      	sub	sp, #28
 801420a:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 801420c:	bf1c      	itt	ne
 801420e:	2300      	movne	r3, #0
 8014210:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8014212:	2300      	movs	r3, #0
{	
 8014214:	eeb0 8a40 	vmov.f32	s16, s0
 8014218:	4691      	mov	r9, r2
	char buffer[9] = {0};
 801421a:	9303      	str	r3, [sp, #12]
 801421c:	9304      	str	r3, [sp, #16]
 801421e:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 8014222:	f1ba 0f00 	cmp.w	sl, #0
 8014226:	d067      	beq.n	80142f8 <GUI_Text_PPF_Measure+0x10c>
		{	
			if(!old_nan_PPF){
 8014228:	7837      	ldrb	r7, [r6, #0]
 801422a:	2f00      	cmp	r7, #0
 801422c:	f040 80f0 	bne.w	8014410 <GUI_Text_PPF_Measure+0x224>
				TFT_SetTextColor(TFT_White);
 8014230:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014234:	f008 feae 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014238:	2063      	movs	r0, #99	; 0x63
 801423a:	f008 feb1 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801423e:	48a3      	ldr	r0, [pc, #652]	; (80144cc <GUI_Text_PPF_Measure+0x2e0>)
 8014240:	f008 fea2 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 8014244:	2163      	movs	r1, #99	; 0x63
 8014246:	f105 031a 	add.w	r3, r5, #26
 801424a:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801424e:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8014252:	9100      	str	r1, [sp, #0]
 8014254:	b29b      	uxth	r3, r3
 8014256:	b292      	uxth	r2, r2
 8014258:	4629      	mov	r1, r5
 801425a:	b280      	uxth	r0, r0
 801425c:	f008 fc6b 	bl	801cb36 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8014260:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014262:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8014266:	f88d 300c 	strb.w	r3, [sp, #12]
 801426a:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801426e:	aa03      	add	r2, sp, #12
 8014270:	2303      	movs	r3, #3
 8014272:	4629      	mov	r1, r5
 8014274:	b280      	uxth	r0, r0
 8014276:	f008 ffa9 	bl	801d1cc <TFT_DisplayString>
				old_nan_PPF = 1;
 801427a:	2301      	movs	r3, #1
 801427c:	7033      	strb	r3, [r6, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 801427e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014282:	f008 fe87 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014286:	2063      	movs	r0, #99	; 0x63
 8014288:	f008 fe8a 	bl	801cfa0 <TFT_SetBackColor>
	if(Language_status == Ru ){
 801428c:	4b90      	ldr	r3, [pc, #576]	; (80144d0 <GUI_Text_PPF_Measure+0x2e4>)
 801428e:	f8df b25c 	ldr.w	fp, [pc, #604]	; 80144ec <GUI_Text_PPF_Measure+0x300>
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	1cae      	adds	r6, r5, #2
 8014296:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 801429a:	2b00      	cmp	r3, #0
 801429c:	f040 80c0 	bne.w	8014420 <GUI_Text_PPF_Measure+0x234>
			TFT_SetFont(&Font26RU_arch_big);
 80142a0:	488c      	ldr	r0, [pc, #560]	; (80144d4 <GUI_Text_PPF_Measure+0x2e8>)
 80142a2:	f008 fe71 	bl	801cf88 <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 80142a6:	f899 2000 	ldrb.w	r2, [r9]
 80142aa:	f898 3000 	ldrb.w	r3, [r8]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d012      	beq.n	80142d8 <GUI_Text_PPF_Measure+0xec>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 80142b2:	2293      	movs	r2, #147	; 0x93
 80142b4:	4629      	mov	r1, r5
 80142b6:	4620      	mov	r0, r4
 80142b8:	f008 fe78 	bl	801cfac <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 80142bc:	f104 0018 	add.w	r0, r4, #24
 80142c0:	227f      	movs	r2, #127	; 0x7f
 80142c2:	4629      	mov	r1, r5
 80142c4:	b280      	uxth	r0, r0
 80142c6:	f008 fe71 	bl	801cfac <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 80142ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80142ce:	228f      	movs	r2, #143	; 0x8f
 80142d0:	4629      	mov	r1, r5
 80142d2:	b280      	uxth	r0, r0
 80142d4:	f008 fe6a 	bl	801cfac <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 80142d8:	f89b 3000 	ldrb.w	r3, [fp]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	f000 8099 	beq.w	8014414 <GUI_Text_PPF_Measure+0x228>
 80142e2:	463a      	mov	r2, r7
 80142e4:	b2b1      	uxth	r1, r6
 80142e6:	fa1f f08a 	uxth.w	r0, sl
 80142ea:	f004 ff4f 	bl	801918c <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 80142ee:	b007      	add	sp, #28
 80142f0:	ecbd 8b02 	vpop	{d8}
 80142f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 80142f8:	7833      	ldrb	r3, [r6, #0]
 80142fa:	b16b      	cbz	r3, 8014318 <GUI_Text_PPF_Measure+0x12c>
 80142fc:	2163      	movs	r1, #99	; 0x63
 80142fe:	f105 031a 	add.w	r3, r5, #26
 8014302:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014306:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801430a:	9100      	str	r1, [sp, #0]
 801430c:	b29b      	uxth	r3, r3
 801430e:	b292      	uxth	r2, r2
 8014310:	4629      	mov	r1, r5
 8014312:	b280      	uxth	r0, r0
 8014314:	f008 fc0f 	bl	801cb36 <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 8014318:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801431c:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 8014320:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 8014322:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 8014326:	7033      	strb	r3, [r6, #0]
	Value = floor(Value*10)/10.0;
 8014328:	f7ec f926 	bl	8000578 <__aeabi_f2d>
 801432c:	ec41 0b10 	vmov	d0, r0, r1
 8014330:	f00f faaa 	bl	8023888 <floor>
 8014334:	2200      	movs	r2, #0
 8014336:	ec51 0b10 	vmov	r0, r1, d0
 801433a:	4b67      	ldr	r3, [pc, #412]	; (80144d8 <GUI_Text_PPF_Measure+0x2ec>)
 801433c:	f7ec fa9a 	bl	8000874 <__aeabi_ddiv>
 8014340:	f7ec fc66 	bl	8000c10 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 8014344:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80144dc <GUI_Text_PPF_Measure+0x2f0>
	Value = floor(Value*10)/10.0;
 8014348:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 801434c:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014354:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8014358:	267a      	movs	r6, #122	; 0x7a
	if((Value/1000) >= 1.0)
 801435a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 801435e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014366:	bfa8      	it	ge
 8014368:	eeb0 8a67 	vmovge.f32	s16, s15
 801436c:	bfac      	ite	ge
 801436e:	2701      	movge	r7, #1
 8014370:	2700      	movlt	r7, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014372:	f1bb 0f00 	cmp.w	fp, #0
 8014376:	bf08      	it	eq
 8014378:	4618      	moveq	r0, r3
 801437a:	f008 fe0b 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801437e:	2063      	movs	r0, #99	; 0x63
 8014380:	f008 fe0e 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014384:	4851      	ldr	r0, [pc, #324]	; (80144cc <GUI_Text_PPF_Measure+0x2e0>)
 8014386:	f008 fdff 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 801438a:	ee18 0a10 	vmov	r0, s16
 801438e:	f7ec f8f3 	bl	8000578 <__aeabi_f2d>
 8014392:	4602      	mov	r2, r0
 8014394:	460b      	mov	r3, r1
 8014396:	a803      	add	r0, sp, #12
 8014398:	4951      	ldr	r1, [pc, #324]	; (80144e0 <GUI_Text_PPF_Measure+0x2f4>)
 801439a:	f00c fabb 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 801439e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 80143a0:	2304      	movs	r3, #4
			dec *= 10;
 80143a2:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80143a4:	ee07 2a90 	vmov	s15, r2
 80143a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80143ac:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80143b0:	eef4 7ae8 	vcmpe.f32	s15, s17
 80143b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b8:	db06      	blt.n	80143c8 <GUI_Text_PPF_Measure+0x1dc>
			delta_pos-=23;
 80143ba:	3e17      	subs	r6, #23
			number++;
 80143bc:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 80143c0:	434a      	muls	r2, r1
			delta_pos-=23;
 80143c2:	b2f6      	uxtb	r6, r6
			number++;
 80143c4:	fa5f fa8a 	uxtb.w	sl, sl
 80143c8:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80143ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80143ce:	d1e9      	bne.n	80143a4 <GUI_Text_PPF_Measure+0x1b8>
	if(number < old_numPPF )
 80143d0:	4b44      	ldr	r3, [pc, #272]	; (80144e4 <GUI_Text_PPF_Measure+0x2f8>)
 80143d2:	781a      	ldrb	r2, [r3, #0]
 80143d4:	4552      	cmp	r2, sl
 80143d6:	469b      	mov	fp, r3
 80143d8:	d90d      	bls.n	80143f6 <GUI_Text_PPF_Measure+0x20a>
		TFT_FillRectangle(X+70, Y, X+228, Y+26, TFT_Black_Bkgr);
 80143da:	2163      	movs	r1, #99	; 0x63
 80143dc:	f105 031a 	add.w	r3, r5, #26
 80143e0:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
 80143e4:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80143e8:	9100      	str	r1, [sp, #0]
 80143ea:	b29b      	uxth	r3, r3
 80143ec:	b292      	uxth	r2, r2
 80143ee:	4629      	mov	r1, r5
 80143f0:	b280      	uxth	r0, r0
 80143f2:	f008 fba0 	bl	801cb36 <TFT_FillRectangle>
	buffer[8] = 0;
 80143f6:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80143f8:	19a0      	adds	r0, r4, r6
	buffer[8] = 0;
 80143fa:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80143fe:	aa03      	add	r2, sp, #12
 8014400:	2303      	movs	r3, #3
 8014402:	4629      	mov	r1, r5
 8014404:	b280      	uxth	r0, r0
	old_numPPF = number;
 8014406:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801440a:	f008 fedf 	bl	801d1cc <TFT_DisplayString>
 801440e:	e736      	b.n	801427e <GUI_Text_PPF_Measure+0x92>
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8014410:	461f      	mov	r7, r3
 8014412:	e734      	b.n	801427e <GUI_Text_PPF_Measure+0x92>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8014414:	b2b1      	uxth	r1, r6
 8014416:	fa1f f08a 	uxth.w	r0, sl
 801441a:	f004 ff25 	bl	8019268 <GUI_TextRu_umol_sr>
 801441e:	e766      	b.n	80142ee <GUI_Text_PPF_Measure+0x102>
			TFT_SetFont(&Font16EN_arch_big);
 8014420:	4831      	ldr	r0, [pc, #196]	; (80144e8 <GUI_Text_PPF_Measure+0x2fc>)
 8014422:	f008 fdb1 	bl	801cf88 <TFT_SetFont>
			if(Mode_EL){
 8014426:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 801442a:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 801442e:	b333      	cbz	r3, 801447e <GUI_Text_PPF_Measure+0x292>
				if(preGUI_screen_state != GUI_screen_state){
 8014430:	f898 3000 	ldrb.w	r3, [r8]
 8014434:	429a      	cmp	r2, r3
 8014436:	d01b      	beq.n	8014470 <GUI_Text_PPF_Measure+0x284>
				TFT_DrawChar(X-10, Y+2, 'P');
 8014438:	b2b5      	uxth	r5, r6
 801443a:	f1a4 000a 	sub.w	r0, r4, #10
 801443e:	2250      	movs	r2, #80	; 0x50
 8014440:	4629      	mov	r1, r5
 8014442:	b280      	uxth	r0, r0
 8014444:	f008 fe6a 	bl	801d11c <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8014448:	1d60      	adds	r0, r4, #5
 801444a:	2250      	movs	r2, #80	; 0x50
 801444c:	4629      	mov	r1, r5
 801444e:	b280      	uxth	r0, r0
 8014450:	f008 fe64 	bl	801d11c <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 8014454:	f104 0014 	add.w	r0, r4, #20
 8014458:	2246      	movs	r2, #70	; 0x46
 801445a:	4629      	mov	r1, r5
 801445c:	b280      	uxth	r0, r0
 801445e:	f008 fe5d 	bl	801d11c <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 8014462:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8014466:	2244      	movs	r2, #68	; 0x44
 8014468:	4629      	mov	r1, r5
 801446a:	b280      	uxth	r0, r0
 801446c:	f008 fe56 	bl	801d11c <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 8014470:	463a      	mov	r2, r7
 8014472:	b2b1      	uxth	r1, r6
 8014474:	fa1f f08a 	uxth.w	r0, sl
 8014478:	f002 fe8a 	bl	8017190 <GUI_TextEn_umol>
 801447c:	e737      	b.n	80142ee <GUI_Text_PPF_Measure+0x102>
				if(preGUI_screen_state != GUI_screen_state){
 801447e:	f898 3000 	ldrb.w	r3, [r8]
 8014482:	429a      	cmp	r2, r3
 8014484:	d014      	beq.n	80144b0 <GUI_Text_PPF_Measure+0x2c4>
				TFT_DrawChar(X-10, Y+2, 'P');
 8014486:	b2b5      	uxth	r5, r6
 8014488:	f1a4 000a 	sub.w	r0, r4, #10
 801448c:	2250      	movs	r2, #80	; 0x50
 801448e:	4629      	mov	r1, r5
 8014490:	b280      	uxth	r0, r0
 8014492:	f008 fe43 	bl	801d11c <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8014496:	1d60      	adds	r0, r4, #5
 8014498:	2250      	movs	r2, #80	; 0x50
 801449a:	4629      	mov	r1, r5
 801449c:	b280      	uxth	r0, r0
 801449e:	f008 fe3d 	bl	801d11c <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 80144a2:	f104 0014 	add.w	r0, r4, #20
 80144a6:	224c      	movs	r2, #76	; 0x4c
 80144a8:	4629      	mov	r1, r5
 80144aa:	b280      	uxth	r0, r0
 80144ac:	f008 fe36 	bl	801d11c <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 80144b0:	463a      	mov	r2, r7
 80144b2:	b2b1      	uxth	r1, r6
 80144b4:	fa1f f08a 	uxth.w	r0, sl
 80144b8:	f002 fed0 	bl	801725c <GUI_TextEn_umol_sr>
}
 80144bc:	e717      	b.n	80142ee <GUI_Text_PPF_Measure+0x102>
 80144be:	bf00      	nop
 80144c0:	2000022a 	.word	0x2000022a
 80144c4:	20005701 	.word	0x20005701
 80144c8:	2000573a 	.word	0x2000573a
 80144cc:	200001f0 	.word	0x200001f0
 80144d0:	20005703 	.word	0x20005703
 80144d4:	20000200 	.word	0x20000200
 80144d8:	40240000 	.word	0x40240000
 80144dc:	447a0000 	.word	0x447a0000
 80144e0:	080323e5 	.word	0x080323e5
 80144e4:	20000235 	.word	0x20000235
 80144e8:	200001b0 	.word	0x200001b0
 80144ec:	20000ebc 	.word	0x20000ebc

080144f0 <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nope, uint8_t grey)
{
 80144f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f4:	ed2d 8b08 	vpush	{d8-d11}
 80144f8:	4616      	mov	r6, r2
 80144fa:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 80144fc:	4aad      	ldr	r2, [pc, #692]	; (80147b4 <GUI_Text_PPFRGB_Measure+0x2c4>)
 80144fe:	4bae      	ldr	r3, [pc, #696]	; (80147b8 <GUI_Text_PPFRGB_Measure+0x2c8>)
 8014500:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80147d4 <GUI_Text_PPFRGB_Measure+0x2e4>
{
 8014504:	4605      	mov	r5, r0
 8014506:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8014508:	7810      	ldrb	r0, [r2, #0]
 801450a:	7819      	ldrb	r1, [r3, #0]
{
 801450c:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 801450e:	4288      	cmp	r0, r1
 8014510:	9303      	str	r3, [sp, #12]
 8014512:	bf1c      	itt	ne
 8014514:	2300      	movne	r3, #0
 8014516:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 801451a:	2300      	movs	r3, #0
{
 801451c:	eef0 aa40 	vmov.f32	s21, s0
 8014520:	eeb0 ba60 	vmov.f32	s22, s1
 8014524:	eeb0 8a41 	vmov.f32	s16, s2
 8014528:	eeb0 aa61 	vmov.f32	s20, s3
 801452c:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 801452e:	9305      	str	r3, [sp, #20]
 8014530:	9306      	str	r3, [sp, #24]
 8014532:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;

		if(nope) 
 8014536:	2e00      	cmp	r6, #0
 8014538:	f000 814e 	beq.w	80147d8 <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 801453c:	f899 7000 	ldrb.w	r7, [r9]
 8014540:	2f00      	cmp	r7, #0
 8014542:	f040 8353 	bne.w	8014bec <GUI_Text_PPFRGB_Measure+0x6fc>
				TFT_SetTextColor(TFT_White);
 8014546:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801454a:	f008 fd23 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801454e:	2063      	movs	r0, #99	; 0x63
 8014550:	f008 fd26 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8014554:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 8014558:	4898      	ldr	r0, [pc, #608]	; (80147bc <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 801455a:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 801455e:	f008 fd13 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8014562:	b2b6      	uxth	r6, r6
 8014564:	fa1f f888 	uxth.w	r8, r8
 8014568:	f04f 0a63 	mov.w	sl, #99	; 0x63
 801456c:	f104 0314 	add.w	r3, r4, #20
 8014570:	4630      	mov	r0, r6
 8014572:	b29b      	uxth	r3, r3
 8014574:	4642      	mov	r2, r8
 8014576:	4621      	mov	r1, r4
 8014578:	f8cd a000 	str.w	sl, [sp]
 801457c:	f008 fadb 	bl	801cb36 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8014580:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8014584:	f104 0115 	add.w	r1, r4, #21
 8014588:	4630      	mov	r0, r6
 801458a:	b29b      	uxth	r3, r3
 801458c:	4642      	mov	r2, r8
 801458e:	b289      	uxth	r1, r1
 8014590:	f8cd a000 	str.w	sl, [sp]
 8014594:	f008 facf 	bl	801cb36 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8014598:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 801459c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80145a0:	4630      	mov	r0, r6
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	4642      	mov	r2, r8
 80145a6:	b289      	uxth	r1, r1
 80145a8:	f8cd a000 	str.w	sl, [sp]
 80145ac:	f008 fac3 	bl	801cb36 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80145b0:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80145b4:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80145b8:	4630      	mov	r0, r6
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	4642      	mov	r2, r8
 80145be:	b289      	uxth	r1, r1
 80145c0:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80145c4:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80145c8:	f008 fab5 	bl	801cb36 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80145cc:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 80145ce:	232d      	movs	r3, #45	; 0x2d
 80145d0:	f88d 3014 	strb.w	r3, [sp, #20]
 80145d4:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80145d8:	aa05      	add	r2, sp, #20
 80145da:	2303      	movs	r3, #3
 80145dc:	4621      	mov	r1, r4
 80145de:	4630      	mov	r0, r6
 80145e0:	f008 fdf4 	bl	801d1cc <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 80145e4:	f104 0116 	add.w	r1, r4, #22
 80145e8:	2303      	movs	r3, #3
 80145ea:	aa05      	add	r2, sp, #20
 80145ec:	b289      	uxth	r1, r1
 80145ee:	4630      	mov	r0, r6
 80145f0:	f008 fdec 	bl	801d1cc <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80145f4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80145f8:	2303      	movs	r3, #3
 80145fa:	aa05      	add	r2, sp, #20
 80145fc:	b289      	uxth	r1, r1
 80145fe:	4630      	mov	r0, r6
 8014600:	f008 fde4 	bl	801d1cc <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014604:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014608:	2303      	movs	r3, #3
 801460a:	aa05      	add	r2, sp, #20
 801460c:	b289      	uxth	r1, r1
 801460e:	4630      	mov	r0, r6
 8014610:	f008 fddc 	bl	801d1cc <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 8014614:	2301      	movs	r3, #1
 8014616:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 801461a:	9b02      	ldr	r3, [sp, #8]
 801461c:	781a      	ldrb	r2, [r3, #0]
 801461e:	9b03      	ldr	r3, [sp, #12]
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	429a      	cmp	r2, r3
 8014624:	f000 80c1 	beq.w	80147aa <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 8014628:	4e65      	ldr	r6, [pc, #404]	; (80147c0 <GUI_Text_PPFRGB_Measure+0x2d0>)
 801462a:	7833      	ldrb	r3, [r6, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	f040 82e4 	bne.w	8014bfa <GUI_Text_PPFRGB_Measure+0x70a>
	{	TFT_SetTextColor(TFT_White);
 8014632:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014636:	f008 fcad 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 801463a:	4862      	ldr	r0, [pc, #392]	; (80147c4 <GUI_Text_PPFRGB_Measure+0x2d4>)
 801463c:	f008 fca4 	bl	801cf88 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 8014640:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014644:	22a1      	movs	r2, #161	; 0xa1
 8014646:	4621      	mov	r1, r4
 8014648:	b280      	uxth	r0, r0
 801464a:	f008 fcaf 	bl	801cfac <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 801464e:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 8014652:	485d      	ldr	r0, [pc, #372]	; (80147c8 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8014654:	f008 fc98 	bl	801cf88 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8014658:	fa1f f888 	uxth.w	r8, r8
 801465c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8014660:	22b8      	movs	r2, #184	; 0xb8
 8014662:	4641      	mov	r1, r8
 8014664:	b280      	uxth	r0, r0
 8014666:	f008 fca1 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 801466a:	f105 0042 	add.w	r0, r5, #66	; 0x42
 801466e:	b280      	uxth	r0, r0
 8014670:	22bd      	movs	r2, #189	; 0xbd
 8014672:	4641      	mov	r1, r8
 8014674:	f008 fc9a 	bl	801cfac <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8014678:	4b54      	ldr	r3, [pc, #336]	; (80147cc <GUI_Text_PPFRGB_Measure+0x2dc>)
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8014680:	2b00      	cmp	r3, #0
 8014682:	f000 82b5 	beq.w	8014bf0 <GUI_Text_PPFRGB_Measure+0x700>
 8014686:	463a      	mov	r2, r7
 8014688:	4621      	mov	r1, r4
 801468a:	b280      	uxth	r0, r0
 801468c:	f004 fd7e 	bl	801918c <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 8014690:	7833      	ldrb	r3, [r6, #0]
 8014692:	2b00      	cmp	r3, #0
 8014694:	f040 82d1 	bne.w	8014c3a <GUI_Text_PPFRGB_Measure+0x74a>
	{	TFT_SetTextColor(TFT_White);
 8014698:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801469c:	f008 fc7a 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 80146a0:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 80146a4:	4847      	ldr	r0, [pc, #284]	; (80147c4 <GUI_Text_PPFRGB_Measure+0x2d4>)
 80146a6:	f008 fc6f 	bl	801cf88 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 80146aa:	fa1f f888 	uxth.w	r8, r8
 80146ae:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80146b2:	2297      	movs	r2, #151	; 0x97
 80146b4:	4641      	mov	r1, r8
 80146b6:	b280      	uxth	r0, r0
 80146b8:	f008 fc78 	bl	801cfac <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80146bc:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 80146c0:	4841      	ldr	r0, [pc, #260]	; (80147c8 <GUI_Text_PPFRGB_Measure+0x2d8>)
 80146c2:	f008 fc61 	bl	801cf88 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80146c6:	fa1f f989 	uxth.w	r9, r9
 80146ca:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80146ce:	22b5      	movs	r2, #181	; 0xb5
 80146d0:	4649      	mov	r1, r9
 80146d2:	b280      	uxth	r0, r0
 80146d4:	f008 fc6a 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 80146d8:	f105 0042 	add.w	r0, r5, #66	; 0x42
 80146dc:	b280      	uxth	r0, r0
 80146de:	22bb      	movs	r2, #187	; 0xbb
 80146e0:	4649      	mov	r1, r9
 80146e2:	f008 fc63 	bl	801cfac <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 80146e6:	4b39      	ldr	r3, [pc, #228]	; (80147cc <GUI_Text_PPFRGB_Measure+0x2dc>)
 80146e8:	781b      	ldrb	r3, [r3, #0]
 80146ea:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f000 829e 	beq.w	8014c30 <GUI_Text_PPFRGB_Measure+0x740>
 80146f4:	463a      	mov	r2, r7
 80146f6:	4641      	mov	r1, r8
 80146f8:	b280      	uxth	r0, r0
 80146fa:	f004 fd47 	bl	801918c <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 80146fe:	7833      	ldrb	r3, [r6, #0]
 8014700:	f105 0925 	add.w	r9, r5, #37	; 0x25
 8014704:	2b00      	cmp	r3, #0
 8014706:	f040 82bc 	bne.w	8014c82 <GUI_Text_PPFRGB_Measure+0x792>
	{	TFT_SetTextColor(TFT_White);
 801470a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801470e:	f008 fc41 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8014712:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 8014716:	482b      	ldr	r0, [pc, #172]	; (80147c4 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8014718:	f008 fc36 	bl	801cf88 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 801471c:	fa1f f888 	uxth.w	r8, r8
 8014720:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014724:	229a      	movs	r2, #154	; 0x9a
 8014726:	4641      	mov	r1, r8
 8014728:	b280      	uxth	r0, r0
 801472a:	f008 fc3f 	bl	801cfac <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 801472e:	4826      	ldr	r0, [pc, #152]	; (80147c8 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8014730:	f008 fc2a 	bl	801cf88 <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 8014734:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8014738:	f105 0037 	add.w	r0, r5, #55	; 0x37
 801473c:	b280      	uxth	r0, r0
 801473e:	2280      	movs	r2, #128	; 0x80
 8014740:	b289      	uxth	r1, r1
 8014742:	f008 fc33 	bl	801cfac <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8014746:	4b21      	ldr	r3, [pc, #132]	; (80147cc <GUI_Text_PPFRGB_Measure+0x2dc>)
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801474e:	2b00      	cmp	r3, #0
 8014750:	f000 8292 	beq.w	8014c78 <GUI_Text_PPFRGB_Measure+0x788>
 8014754:	463a      	mov	r2, r7
 8014756:	4641      	mov	r1, r8
 8014758:	b280      	uxth	r0, r0
 801475a:	f004 fd17 	bl	801918c <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 801475e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 8014762:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 8014764:	f008 fc16 	bl	801cf94 <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 8014768:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 801476a:	4819      	ldr	r0, [pc, #100]	; (80147d0 <GUI_Text_PPFRGB_Measure+0x2e0>)
 801476c:	f008 fc0c 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 8014770:	2246      	movs	r2, #70	; 0x46
 8014772:	4621      	mov	r1, r4
 8014774:	fa1f f089 	uxth.w	r0, r9
 8014778:	f008 fcd0 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 801477c:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8014780:	2252      	movs	r2, #82	; 0x52
 8014782:	4621      	mov	r1, r4
 8014784:	b280      	uxth	r0, r0
 8014786:	f008 fcc9 	bl	801d11c <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 801478a:	7833      	ldrb	r3, [r6, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	f040 829b 	bne.w	8014cc8 <GUI_Text_PPFRGB_Measure+0x7d8>
 8014792:	4b0e      	ldr	r3, [pc, #56]	; (80147cc <GUI_Text_PPFRGB_Measure+0x2dc>)
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801479a:	2b00      	cmp	r3, #0
 801479c:	f000 828f 	beq.w	8014cbe <GUI_Text_PPFRGB_Measure+0x7ce>
 80147a0:	463a      	mov	r2, r7
 80147a2:	4621      	mov	r1, r4
 80147a4:	b280      	uxth	r0, r0
 80147a6:	f004 fcf1 	bl	801918c <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 80147aa:	b009      	add	sp, #36	; 0x24
 80147ac:	ecbd 8b08 	vpop	{d8-d11}
 80147b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b4:	2000022a 	.word	0x2000022a
 80147b8:	20005701 	.word	0x20005701
 80147bc:	200001f0 	.word	0x200001f0
 80147c0:	20005703 	.word	0x20005703
 80147c4:	200001d0 	.word	0x200001d0
 80147c8:	200001d8 	.word	0x200001d8
 80147cc:	20000ebc 	.word	0x20000ebc
 80147d0:	200001b0 	.word	0x200001b0
 80147d4:	2000573b 	.word	0x2000573b
		if(old_nan_PPFRGB) 
 80147d8:	f899 3000 	ldrb.w	r3, [r9]
 80147dc:	b3b3      	cbz	r3, 801484c <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 80147de:	f105 0762 	add.w	r7, r5, #98	; 0x62
 80147e2:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 80147e6:	b2bf      	uxth	r7, r7
 80147e8:	fa1f f888 	uxth.w	r8, r8
 80147ec:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80147f0:	f104 0314 	add.w	r3, r4, #20
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	4642      	mov	r2, r8
 80147f8:	4621      	mov	r1, r4
 80147fa:	4638      	mov	r0, r7
 80147fc:	f8cd a000 	str.w	sl, [sp]
 8014800:	f008 f999 	bl	801cb36 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8014804:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8014808:	f104 0115 	add.w	r1, r4, #21
 801480c:	b29b      	uxth	r3, r3
 801480e:	4642      	mov	r2, r8
 8014810:	b289      	uxth	r1, r1
 8014812:	4638      	mov	r0, r7
 8014814:	f8cd a000 	str.w	sl, [sp]
 8014818:	f008 f98d 	bl	801cb36 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 801481c:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8014820:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8014824:	b29b      	uxth	r3, r3
 8014826:	4642      	mov	r2, r8
 8014828:	b289      	uxth	r1, r1
 801482a:	4638      	mov	r0, r7
 801482c:	f8cd a000 	str.w	sl, [sp]
 8014830:	f008 f981 	bl	801cb36 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8014834:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8014838:	f104 0141 	add.w	r1, r4, #65	; 0x41
 801483c:	f8cd a000 	str.w	sl, [sp]
 8014840:	b29b      	uxth	r3, r3
 8014842:	4642      	mov	r2, r8
 8014844:	b289      	uxth	r1, r1
 8014846:	4638      	mov	r0, r7
 8014848:	f008 f975 	bl	801cb36 <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 801484c:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
 8014850:	ee68 7a09 	vmul.f32	s15, s16, s18
	old_nan_PPFRGB = 0;
 8014854:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 8014856:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 801485a:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 801485e:	f7eb fe8b 	bl	8000578 <__aeabi_f2d>
 8014862:	ec41 0b10 	vmov	d0, r0, r1
 8014866:	f00f f80f 	bl	8023888 <floor>
 801486a:	2200      	movs	r2, #0
 801486c:	ec51 0b10 	vmov	r0, r1, d0
 8014870:	4bd6      	ldr	r3, [pc, #856]	; (8014bcc <GUI_Text_PPFRGB_Measure+0x6dc>)
	if((ValueB/1000) > 1.0)
 8014872:	eddf 8ad7 	vldr	s17, [pc, #860]	; 8014bd0 <GUI_Text_PPFRGB_Measure+0x6e0>
	ValueB = floor(ValueB*10)/10.0;
 8014876:	f7eb fffd 	bl	8000874 <__aeabi_ddiv>
 801487a:	f7ec f9c9 	bl	8000c10 <__aeabi_d2f>
 801487e:	ee09 0a90 	vmov	s19, r0
	if((ValueB/1000) > 1.0)
 8014882:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801488a:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 140, deg = 0, number=0;
 801488e:	f04f 088c 	mov.w	r8, #140	; 0x8c
 8014892:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 8014896:	eef4 7a48 	vcmp.f32	s15, s16
 801489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801489e:	bfc8      	it	gt
 80148a0:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80148a4:	45bb      	cmp	fp, r7
 80148a6:	bf08      	it	eq
 80148a8:	4618      	moveq	r0, r3
 80148aa:	f008 fb73 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80148ae:	2063      	movs	r0, #99	; 0x63
 80148b0:	f008 fb76 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80148b4:	48c7      	ldr	r0, [pc, #796]	; (8014bd4 <GUI_Text_PPFRGB_Measure+0x6e4>)
 80148b6:	f008 fb67 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 80148ba:	ee19 0a90 	vmov	r0, s19
 80148be:	f7eb fe5b 	bl	8000578 <__aeabi_f2d>
 80148c2:	4602      	mov	r2, r0
 80148c4:	460b      	mov	r3, r1
 80148c6:	a805      	add	r0, sp, #20
 80148c8:	49c3      	ldr	r1, [pc, #780]	; (8014bd8 <GUI_Text_PPFRGB_Measure+0x6e8>)
 80148ca:	f00c f823 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 80148ce:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueB);
 80148d0:	2314      	movs	r3, #20
			dec *= 10;
 80148d2:	4611      	mov	r1, r2
		if((ValueB/((float)dec)) >= 1.0)
 80148d4:	ee07 2a90 	vmov	s15, r2
 80148d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80148dc:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80148e0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80148e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e8:	db06      	blt.n	80148f8 <GUI_Text_PPFRGB_Measure+0x408>
			delta_pos-= 22 - i*2;
 80148ea:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 80148ee:	3701      	adds	r7, #1
			dec *= 10;
 80148f0:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 80148f2:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80148f6:	b2ff      	uxtb	r7, r7
 80148f8:	3b02      	subs	r3, #2
 80148fa:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 80148fc:	2b0c      	cmp	r3, #12
 80148fe:	d1e9      	bne.n	80148d4 <GUI_Text_PPFRGB_Measure+0x3e4>
	if(number < old_numPPFB )
 8014900:	4bb6      	ldr	r3, [pc, #728]	; (8014bdc <GUI_Text_PPFRGB_Measure+0x6ec>)
 8014902:	781a      	ldrb	r2, [r3, #0]
 8014904:	42ba      	cmp	r2, r7
 8014906:	4699      	mov	r9, r3
 8014908:	d90d      	bls.n	8014926 <GUI_Text_PPFRGB_Measure+0x436>
		TFT_FillRectangle(X+98, Y, X+197, Y+20, TFT_Black_Bkgr);
 801490a:	2163      	movs	r1, #99	; 0x63
 801490c:	f104 0314 	add.w	r3, r4, #20
 8014910:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014914:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014918:	9100      	str	r1, [sp, #0]
 801491a:	b29b      	uxth	r3, r3
 801491c:	b292      	uxth	r2, r2
 801491e:	4621      	mov	r1, r4
 8014920:	b280      	uxth	r0, r0
 8014922:	f008 f908 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014926:	eb05 0008 	add.w	r0, r5, r8
 801492a:	2303      	movs	r3, #3
 801492c:	aa05      	add	r2, sp, #20
	old_numPPFB = number;
 801492e:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014932:	4621      	mov	r1, r4
 8014934:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8014936:	2700      	movs	r7, #0
 8014938:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801493c:	f008 fc46 	bl	801d1cc <TFT_DisplayString>
	ValueG = floor(ValueG*10)/10.0;
 8014940:	ee6b 7a09 	vmul.f32	s15, s22, s18
	delta_pos = 140;
 8014944:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueG = floor(ValueG*10)/10.0;
 8014948:	ee17 0a90 	vmov	r0, s15
 801494c:	f7eb fe14 	bl	8000578 <__aeabi_f2d>
 8014950:	ec41 0b10 	vmov	d0, r0, r1
 8014954:	f00e ff98 	bl	8023888 <floor>
 8014958:	2200      	movs	r2, #0
 801495a:	4b9c      	ldr	r3, [pc, #624]	; (8014bcc <GUI_Text_PPFRGB_Measure+0x6dc>)
 801495c:	ec51 0b10 	vmov	r0, r1, d0
 8014960:	f7eb ff88 	bl	8000874 <__aeabi_ddiv>
 8014964:	f7ec f954 	bl	8000c10 <__aeabi_d2f>
 8014968:	ee09 0a90 	vmov	s19, r0
	if((ValueG/1000) > 1.0)
 801496c:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 8014970:	4898      	ldr	r0, [pc, #608]	; (8014bd4 <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueG = ValueG/(1000);
 8014972:	eef4 7a48 	vcmp.f32	s15, s16
 8014976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801497a:	bfc8      	it	gt
 801497c:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 8014980:	f008 fb02 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 8014984:	ee19 0a90 	vmov	r0, s19
 8014988:	f7eb fdf6 	bl	8000578 <__aeabi_f2d>
 801498c:	4602      	mov	r2, r0
 801498e:	460b      	mov	r3, r1
 8014990:	a805      	add	r0, sp, #20
 8014992:	4991      	ldr	r1, [pc, #580]	; (8014bd8 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8014994:	f00b ffbe 	bl	8020914 <sprintf>
	dec = 10;
 8014998:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 801499a:	2314      	movs	r3, #20
			dec *= 10;
 801499c:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 801499e:	ee07 2a90 	vmov	s15, r2
 80149a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80149a6:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80149aa:	eef4 7ac8 	vcmpe.f32	s15, s16
 80149ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b2:	db06      	blt.n	80149c2 <GUI_Text_PPFRGB_Measure+0x4d2>
			delta_pos-= 22 - i*2;
 80149b4:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 80149b8:	3701      	adds	r7, #1
			dec *= 10;
 80149ba:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 80149bc:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80149c0:	b2ff      	uxtb	r7, r7
 80149c2:	3b02      	subs	r3, #2
 80149c4:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 80149c6:	2b0c      	cmp	r3, #12
 80149c8:	d1e9      	bne.n	801499e <GUI_Text_PPFRGB_Measure+0x4ae>
		if(number < old_numPPFG )
 80149ca:	4b85      	ldr	r3, [pc, #532]	; (8014be0 <GUI_Text_PPFRGB_Measure+0x6f0>)
 80149cc:	781a      	ldrb	r2, [r3, #0]
 80149ce:	42ba      	cmp	r2, r7
 80149d0:	4699      	mov	r9, r3
 80149d2:	d911      	bls.n	80149f8 <GUI_Text_PPFRGB_Measure+0x508>
		TFT_FillRectangle(X+98, Y+21, X+197, Y+41, TFT_Black_Bkgr);
 80149d4:	f104 0329 	add.w	r3, r4, #41	; 0x29
 80149d8:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80149dc:	f104 0115 	add.w	r1, r4, #21
 80149e0:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80149e4:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80149e8:	f8cd e000 	str.w	lr, [sp]
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	b292      	uxth	r2, r2
 80149f0:	b289      	uxth	r1, r1
 80149f2:	b280      	uxth	r0, r0
 80149f4:	f008 f89f 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 80149f8:	eb05 0008 	add.w	r0, r5, r8
 80149fc:	f104 0116 	add.w	r1, r4, #22
 8014a00:	2303      	movs	r3, #3
 8014a02:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 8014a04:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014a08:	b289      	uxth	r1, r1
 8014a0a:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8014a0c:	2700      	movs	r7, #0
 8014a0e:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014a12:	f008 fbdb 	bl	801d1cc <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8014a16:	ee6a 7a89 	vmul.f32	s15, s21, s18
	delta_pos = 140;
 8014a1a:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8014a1e:	ee17 0a90 	vmov	r0, s15
 8014a22:	f7eb fda9 	bl	8000578 <__aeabi_f2d>
 8014a26:	ec41 0b10 	vmov	d0, r0, r1
 8014a2a:	f00e ff2d 	bl	8023888 <floor>
 8014a2e:	2200      	movs	r2, #0
 8014a30:	4b66      	ldr	r3, [pc, #408]	; (8014bcc <GUI_Text_PPFRGB_Measure+0x6dc>)
 8014a32:	ec51 0b10 	vmov	r0, r1, d0
 8014a36:	f7eb ff1d 	bl	8000874 <__aeabi_ddiv>
 8014a3a:	f7ec f8e9 	bl	8000c10 <__aeabi_d2f>
 8014a3e:	ee09 0a90 	vmov	s19, r0
	if((ValueR/1000) > 1.0)
 8014a42:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 8014a46:	4863      	ldr	r0, [pc, #396]	; (8014bd4 <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueR = ValueR/(1000);
 8014a48:	eef4 7a48 	vcmp.f32	s15, s16
 8014a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a50:	bfc8      	it	gt
 8014a52:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 8014a56:	f008 fa97 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 8014a5a:	ee19 0a90 	vmov	r0, s19
 8014a5e:	f7eb fd8b 	bl	8000578 <__aeabi_f2d>
 8014a62:	4602      	mov	r2, r0
 8014a64:	460b      	mov	r3, r1
 8014a66:	a805      	add	r0, sp, #20
 8014a68:	495b      	ldr	r1, [pc, #364]	; (8014bd8 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8014a6a:	f00b ff53 	bl	8020914 <sprintf>
	dec = 10;
 8014a6e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 8014a70:	2314      	movs	r3, #20
			dec *= 10;
 8014a72:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 8014a74:	ee07 2a90 	vmov	s15, r2
 8014a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014a7c:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8014a80:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a88:	db06      	blt.n	8014a98 <GUI_Text_PPFRGB_Measure+0x5a8>
			delta_pos-= 22 - i*2;
 8014a8a:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8014a8e:	3701      	adds	r7, #1
			dec *= 10;
 8014a90:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 8014a92:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8014a96:	b2ff      	uxtb	r7, r7
 8014a98:	3b02      	subs	r3, #2
 8014a9a:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8014a9c:	2b0c      	cmp	r3, #12
 8014a9e:	d1e9      	bne.n	8014a74 <GUI_Text_PPFRGB_Measure+0x584>
	if(number < old_numPPFR )
 8014aa0:	4b50      	ldr	r3, [pc, #320]	; (8014be4 <GUI_Text_PPFRGB_Measure+0x6f4>)
 8014aa2:	781a      	ldrb	r2, [r3, #0]
 8014aa4:	42ba      	cmp	r2, r7
 8014aa6:	4699      	mov	r9, r3
 8014aa8:	d911      	bls.n	8014ace <GUI_Text_PPFRGB_Measure+0x5de>
		TFT_FillRectangle(X+98, Y+42, X+197, Y+63, TFT_Black_Bkgr);
 8014aaa:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8014aae:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014ab2:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8014ab6:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014aba:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014abe:	f8cd e000 	str.w	lr, [sp]
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	b292      	uxth	r2, r2
 8014ac6:	b289      	uxth	r1, r1
 8014ac8:	b280      	uxth	r0, r0
 8014aca:	f008 f834 	bl	801cb36 <TFT_FillRectangle>
	buffer[8] = 0;
 8014ace:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014ad0:	eb05 0008 	add.w	r0, r5, r8
 8014ad4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8014ad8:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 8014ada:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014ade:	b289      	uxth	r1, r1
 8014ae0:	2303      	movs	r3, #3
 8014ae2:	b280      	uxth	r0, r0
	old_numPPFR = number;
 8014ae4:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014ae8:	f008 fb70 	bl	801d1cc <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 8014aec:	ee6a 7a09 	vmul.f32	s15, s20, s18
	delta_pos = 140;
 8014af0:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 8014af4:	ee17 0a90 	vmov	r0, s15
 8014af8:	f7eb fd3e 	bl	8000578 <__aeabi_f2d>
 8014afc:	ec41 0b10 	vmov	d0, r0, r1
 8014b00:	f00e fec2 	bl	8023888 <floor>
 8014b04:	2200      	movs	r2, #0
 8014b06:	4b31      	ldr	r3, [pc, #196]	; (8014bcc <GUI_Text_PPFRGB_Measure+0x6dc>)
 8014b08:	ec51 0b10 	vmov	r0, r1, d0
 8014b0c:	f7eb feb2 	bl	8000874 <__aeabi_ddiv>
 8014b10:	f7ec f87e 	bl	8000c10 <__aeabi_d2f>
 8014b14:	ee09 0a10 	vmov	s18, r0
	if((ValueFR/1000) > 1.0)
 8014b18:	eec9 7a28 	vdiv.f32	s15, s18, s17
	TFT_SetFont(&Font16EN_arch_big);
 8014b1c:	482d      	ldr	r0, [pc, #180]	; (8014bd4 <GUI_Text_PPFRGB_Measure+0x6e4>)
	else deg=0;
 8014b1e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b26:	bfc8      	it	gt
 8014b28:	eeb0 9a67 	vmovgt.f32	s18, s15
 8014b2c:	bfcc      	ite	gt
 8014b2e:	2701      	movgt	r7, #1
 8014b30:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 8014b32:	f008 fa29 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 8014b36:	ee19 0a10 	vmov	r0, s18
 8014b3a:	f7eb fd1d 	bl	8000578 <__aeabi_f2d>
 8014b3e:	4602      	mov	r2, r0
 8014b40:	460b      	mov	r3, r1
 8014b42:	a805      	add	r0, sp, #20
 8014b44:	4924      	ldr	r1, [pc, #144]	; (8014bd8 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8014b46:	f00b fee5 	bl	8020914 <sprintf>
	dec = 10;
 8014b4a:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 8014b4c:	2314      	movs	r3, #20
			dec *= 10;
 8014b4e:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 8014b50:	ee07 2a90 	vmov	s15, r2
 8014b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014b58:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8014b5c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b64:	db06      	blt.n	8014b74 <GUI_Text_PPFRGB_Measure+0x684>
			delta_pos-= 22 - i*2;
 8014b66:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8014b6a:	3601      	adds	r6, #1
			dec *= 10;
 8014b6c:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 8014b6e:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8014b72:	b2f6      	uxtb	r6, r6
 8014b74:	3b02      	subs	r3, #2
 8014b76:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8014b78:	2b0c      	cmp	r3, #12
 8014b7a:	d1e9      	bne.n	8014b50 <GUI_Text_PPFRGB_Measure+0x660>
	if(number < old_numPPFFR )
 8014b7c:	4b1a      	ldr	r3, [pc, #104]	; (8014be8 <GUI_Text_PPFRGB_Measure+0x6f8>)
 8014b7e:	781a      	ldrb	r2, [r3, #0]
 8014b80:	42b2      	cmp	r2, r6
 8014b82:	4699      	mov	r9, r3
 8014b84:	d911      	bls.n	8014baa <GUI_Text_PPFRGB_Measure+0x6ba>
		TFT_FillRectangle(X+98, Y+65, X+197, Y+87, TFT_Black_Bkgr);
 8014b86:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8014b8a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014b8e:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8014b92:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014b96:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014b9a:	f8cd e000 	str.w	lr, [sp]
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	b292      	uxth	r2, r2
 8014ba2:	b289      	uxth	r1, r1
 8014ba4:	b280      	uxth	r0, r0
 8014ba6:	f007 ffc6 	bl	801cb36 <TFT_FillRectangle>
	buffer[8] = 0;
 8014baa:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014bac:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014bb0:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 8014bb4:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014bb8:	aa05      	add	r2, sp, #20
 8014bba:	2303      	movs	r3, #3
 8014bbc:	b289      	uxth	r1, r1
 8014bbe:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 8014bc0:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014bc4:	f008 fb02 	bl	801d1cc <TFT_DisplayString>
 8014bc8:	e527      	b.n	801461a <GUI_Text_PPFRGB_Measure+0x12a>
 8014bca:	bf00      	nop
 8014bcc:	40240000 	.word	0x40240000
 8014bd0:	447a0000 	.word	0x447a0000
 8014bd4:	200001b0 	.word	0x200001b0
 8014bd8:	080323e5 	.word	0x080323e5
 8014bdc:	20000236 	.word	0x20000236
 8014be0:	20000238 	.word	0x20000238
 8014be4:	20000239 	.word	0x20000239
 8014be8:	20000237 	.word	0x20000237
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8014bec:	461f      	mov	r7, r3
 8014bee:	e514      	b.n	801461a <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8014bf0:	4621      	mov	r1, r4
 8014bf2:	b280      	uxth	r0, r0
 8014bf4:	f004 fb38 	bl	8019268 <GUI_TextRu_umol_sr>
 8014bf8:	e54a      	b.n	8014690 <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 8014bfa:	2b01      	cmp	r3, #1
 8014bfc:	f47f ad48 	bne.w	8014690 <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8014c00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014c04:	f008 f9c6 	bl	801cf94 <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 8014c08:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	b280      	uxth	r0, r0
 8014c10:	f003 fb7c 	bl	801830c <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 8014c14:	4b35      	ldr	r3, [pc, #212]	; (8014cec <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014c1c:	463a      	mov	r2, r7
 8014c1e:	4621      	mov	r1, r4
 8014c20:	b280      	uxth	r0, r0
 8014c22:	b113      	cbz	r3, 8014c2a <GUI_Text_PPFRGB_Measure+0x73a>
 8014c24:	f002 fab4 	bl	8017190 <GUI_TextEn_umol>
 8014c28:	e532      	b.n	8014690 <GUI_Text_PPFRGB_Measure+0x1a0>
 8014c2a:	f002 fb17 	bl	801725c <GUI_TextEn_umol_sr>
 8014c2e:	e52f      	b.n	8014690 <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8014c30:	4641      	mov	r1, r8
 8014c32:	b280      	uxth	r0, r0
 8014c34:	f004 fb18 	bl	8019268 <GUI_TextRu_umol_sr>
 8014c38:	e561      	b.n	80146fe <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	f47f ad5f 	bne.w	80146fe <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 8014c40:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 8014c44:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 8014c48:	f008 f9a4 	bl	801cf94 <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 8014c4c:	fa1f f888 	uxth.w	r8, r8
 8014c50:	f105 0011 	add.w	r0, r5, #17
 8014c54:	4641      	mov	r1, r8
 8014c56:	b280      	uxth	r0, r0
 8014c58:	f003 fb26 	bl	80182a8 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 8014c5c:	4b23      	ldr	r3, [pc, #140]	; (8014cec <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014c64:	463a      	mov	r2, r7
 8014c66:	4641      	mov	r1, r8
 8014c68:	b280      	uxth	r0, r0
 8014c6a:	b113      	cbz	r3, 8014c72 <GUI_Text_PPFRGB_Measure+0x782>
 8014c6c:	f002 fa90 	bl	8017190 <GUI_TextEn_umol>
 8014c70:	e545      	b.n	80146fe <GUI_Text_PPFRGB_Measure+0x20e>
 8014c72:	f002 faf3 	bl	801725c <GUI_TextEn_umol_sr>
 8014c76:	e542      	b.n	80146fe <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8014c78:	4641      	mov	r1, r8
 8014c7a:	b280      	uxth	r0, r0
 8014c7c:	f004 faf4 	bl	8019268 <GUI_TextRu_umol_sr>
 8014c80:	e56d      	b.n	801475e <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 8014c82:	2b01      	cmp	r3, #1
 8014c84:	f47f ad6b 	bne.w	801475e <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 8014c88:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 8014c8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 8014c90:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 8014c94:	f008 f97e 	bl	801cf94 <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 8014c98:	4641      	mov	r1, r8
 8014c9a:	fa1f f089 	uxth.w	r0, r9
 8014c9e:	f003 fb61 	bl	8018364 <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 8014ca2:	4b12      	ldr	r3, [pc, #72]	; (8014cec <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014caa:	463a      	mov	r2, r7
 8014cac:	4641      	mov	r1, r8
 8014cae:	b280      	uxth	r0, r0
 8014cb0:	b113      	cbz	r3, 8014cb8 <GUI_Text_PPFRGB_Measure+0x7c8>
 8014cb2:	f002 fa6d 	bl	8017190 <GUI_TextEn_umol>
 8014cb6:	e552      	b.n	801475e <GUI_Text_PPFRGB_Measure+0x26e>
 8014cb8:	f002 fad0 	bl	801725c <GUI_TextEn_umol_sr>
 8014cbc:	e54f      	b.n	801475e <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	b280      	uxth	r0, r0
 8014cc2:	f004 fad1 	bl	8019268 <GUI_TextRu_umol_sr>
 8014cc6:	e570      	b.n	80147aa <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	f47f ad6e 	bne.w	80147aa <GUI_Text_PPFRGB_Measure+0x2ba>
 8014cce:	4b07      	ldr	r3, [pc, #28]	; (8014cec <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014cd6:	463a      	mov	r2, r7
 8014cd8:	4621      	mov	r1, r4
 8014cda:	b280      	uxth	r0, r0
 8014cdc:	b113      	cbz	r3, 8014ce4 <GUI_Text_PPFRGB_Measure+0x7f4>
 8014cde:	f002 fa57 	bl	8017190 <GUI_TextEn_umol>
 8014ce2:	e562      	b.n	80147aa <GUI_Text_PPFRGB_Measure+0x2ba>
 8014ce4:	f002 faba 	bl	801725c <GUI_TextEn_umol_sr>
}
 8014ce8:	e55f      	b.n	80147aa <GUI_Text_PPFRGB_Measure+0x2ba>
 8014cea:	bf00      	nop
 8014cec:	20000ebc 	.word	0x20000ebc

08014cf0 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nope, uint8_t grey)
{
 8014cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf4:	b087      	sub	sp, #28
 8014cf6:	4605      	mov	r5, r0
 8014cf8:	9302      	str	r3, [sp, #8]
 8014cfa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014cfe:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8014d00:	2300      	movs	r3, #0
{
 8014d02:	460c      	mov	r4, r1
 8014d04:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 8014d08:	9304      	str	r3, [sp, #16]
 8014d0a:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nope)
 8014d0e:	4693      	mov	fp, r2
 8014d10:	b922      	cbnz	r2, 8014d1c <GUI_Text_XYZ_Measure+0x2c>
 8014d12:	9b02      	ldr	r3, [sp, #8]
 8014d14:	2b64      	cmp	r3, #100	; 0x64
 8014d16:	d101      	bne.n	8014d1c <GUI_Text_XYZ_Measure+0x2c>
 8014d18:	9b03      	ldr	r3, [sp, #12]
 8014d1a:	b10b      	cbz	r3, 8014d20 <GUI_Text_XYZ_Measure+0x30>
 8014d1c:	2e00      	cmp	r6, #0
 8014d1e:	d07c      	beq.n	8014e1a <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8014d20:	4bb2      	ldr	r3, [pc, #712]	; (8014fec <GUI_Text_XYZ_Measure+0x2fc>)
 8014d22:	781a      	ldrb	r2, [r3, #0]
 8014d24:	469a      	mov	sl, r3
 8014d26:	b96a      	cbnz	r2, 8014d44 <GUI_Text_XYZ_Measure+0x54>
 8014d28:	2163      	movs	r1, #99	; 0x63
 8014d2a:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 8014d2e:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8014d32:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014d36:	9100      	str	r1, [sp, #0]
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	b292      	uxth	r2, r2
 8014d3c:	4621      	mov	r1, r4
 8014d3e:	b280      	uxth	r0, r0
 8014d40:	f007 fef9 	bl	801cb36 <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8014d44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014d48:	f008 f924 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014d4c:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8014d50:	2063      	movs	r0, #99	; 0x63
 8014d52:	f008 f925 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014d56:	fa1f f989 	uxth.w	r9, r9
 8014d5a:	48a5      	ldr	r0, [pc, #660]	; (8014ff0 <GUI_Text_XYZ_Measure+0x300>)
 8014d5c:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 8014d60:	f008 f912 	bl	801cf88 <TFT_SetFont>
 8014d64:	fa1f f888 	uxth.w	r8, r8
 8014d68:	222d      	movs	r2, #45	; 0x2d
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	4648      	mov	r0, r9
 8014d6e:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 8014d72:	f008 f9d3 	bl	801d11c <TFT_DrawChar>
 8014d76:	b2b6      	uxth	r6, r6
 8014d78:	2220      	movs	r2, #32
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014d7e:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014d82:	f008 f9cb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014d86:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014d88:	222d      	movs	r2, #45	; 0x2d
 8014d8a:	4621      	mov	r1, r4
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	f008 f9c5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014d92:	4639      	mov	r1, r7
 8014d94:	222d      	movs	r2, #45	; 0x2d
 8014d96:	4648      	mov	r0, r9
 8014d98:	f008 f9c0 	bl	801d11c <TFT_DrawChar>
 8014d9c:	4639      	mov	r1, r7
 8014d9e:	2220      	movs	r2, #32
 8014da0:	4640      	mov	r0, r8
 8014da2:	f008 f9bb 	bl	801d11c <TFT_DrawChar>
 8014da6:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8014da8:	f104 0746 	add.w	r7, r4, #70	; 0x46
 8014dac:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014dae:	222d      	movs	r2, #45	; 0x2d
 8014db0:	4630      	mov	r0, r6
 8014db2:	f008 f9b3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8014db6:	222d      	movs	r2, #45	; 0x2d
 8014db8:	4639      	mov	r1, r7
 8014dba:	4648      	mov	r0, r9
 8014dbc:	f008 f9ae 	bl	801d11c <TFT_DrawChar>
 8014dc0:	2220      	movs	r2, #32
 8014dc2:	4639      	mov	r1, r7
 8014dc4:	4640      	mov	r0, r8
 8014dc6:	f008 f9a9 	bl	801d11c <TFT_DrawChar>
 8014dca:	222d      	movs	r2, #45	; 0x2d
 8014dcc:	4639      	mov	r1, r7
 8014dce:	4630      	mov	r0, r6
 8014dd0:	f008 f9a4 	bl	801d11c <TFT_DrawChar>
		old_nanXYZ = 1;
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 8014dda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014dde:	f008 f8d9 	bl	801cf94 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8014de2:	2063      	movs	r0, #99	; 0x63
 8014de4:	f008 f8dc 	bl	801cfa0 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8014de8:	4881      	ldr	r0, [pc, #516]	; (8014ff0 <GUI_Text_XYZ_Measure+0x300>)
 8014dea:	f008 f8cd 	bl	801cf88 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 8014dee:	4621      	mov	r1, r4
 8014df0:	4628      	mov	r0, r5
 8014df2:	2236      	movs	r2, #54	; 0x36
 8014df4:	f008 f992 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8014df8:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	2237      	movs	r2, #55	; 0x37
 8014e00:	b289      	uxth	r1, r1
 8014e02:	f008 f98b 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 8014e06:	f104 0146 	add.w	r1, r4, #70	; 0x46
 8014e0a:	2238      	movs	r2, #56	; 0x38
 8014e0c:	b289      	uxth	r1, r1
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f008 f984 	bl	801d11c <TFT_DrawChar>
}	
 8014e14:	b007      	add	sp, #28
 8014e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014e1a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8014e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e22:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8014e26:	2800      	cmp	r0, #0
 8014e28:	bf14      	ite	ne
 8014e2a:	4610      	movne	r0, r2
 8014e2c:	4618      	moveq	r0, r3
 8014e2e:	f008 f8b1 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014e32:	2063      	movs	r0, #99	; 0x63
 8014e34:	f008 f8b4 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014e38:	486e      	ldr	r0, [pc, #440]	; (8014ff4 <GUI_Text_XYZ_Measure+0x304>)
 8014e3a:	f008 f8a5 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 8014e3e:	465a      	mov	r2, fp
 8014e40:	496d      	ldr	r1, [pc, #436]	; (8014ff8 <GUI_Text_XYZ_Measure+0x308>)
 8014e42:	a804      	add	r0, sp, #16
 8014e44:	f00b fd66 	bl	8020914 <sprintf>
	uint8_t	delta_pos = 190, number = 0;
 8014e48:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 8014e4a:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 8014e4e:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 8014e52:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 8014e54:	fbbb f0fa 	udiv	r0, fp, sl
 8014e58:	f7eb fb6c 	bl	8000534 <__aeabi_ui2d>
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	4b67      	ldr	r3, [pc, #412]	; (8014ffc <GUI_Text_XYZ_Measure+0x30c>)
 8014e60:	f7eb fe64 	bl	8000b2c <__aeabi_dcmpge>
 8014e64:	b140      	cbz	r0, 8014e78 <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 8014e66:	230a      	movs	r3, #10
			delta_pos-=23;
 8014e68:	3f17      	subs	r7, #23
			number++;
 8014e6a:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8014e6e:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8014e72:	b2ff      	uxtb	r7, r7
			number++;
 8014e74:	fa5f f888 	uxtb.w	r8, r8
 8014e78:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014e7c:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8014e80:	d1e8      	bne.n	8014e54 <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 8014e82:	4b5f      	ldr	r3, [pc, #380]	; (8015000 <GUI_Text_XYZ_Measure+0x310>)
 8014e84:	781a      	ldrb	r2, [r3, #0]
 8014e86:	4542      	cmp	r2, r8
 8014e88:	4699      	mov	r9, r3
 8014e8a:	d802      	bhi.n	8014e92 <GUI_Text_XYZ_Measure+0x1a2>
 8014e8c:	4b57      	ldr	r3, [pc, #348]	; (8014fec <GUI_Text_XYZ_Measure+0x2fc>)
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	b16b      	cbz	r3, 8014eae <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 8014e92:	2163      	movs	r1, #99	; 0x63
 8014e94:	f104 0318 	add.w	r3, r4, #24
 8014e98:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014e9c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014ea0:	9100      	str	r1, [sp, #0]
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	b292      	uxth	r2, r2
 8014ea6:	4621      	mov	r1, r4
 8014ea8:	b280      	uxth	r0, r0
 8014eaa:	f007 fe44 	bl	801cb36 <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014eae:	19e8      	adds	r0, r5, r7
 8014eb0:	2303      	movs	r3, #3
 8014eb2:	aa04      	add	r2, sp, #16
 8014eb4:	4621      	mov	r1, r4
 8014eb6:	b280      	uxth	r0, r0
	old_numX = number;
 8014eb8:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014ebc:	f008 f986 	bl	801d1cc <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8014ec0:	484c      	ldr	r0, [pc, #304]	; (8014ff4 <GUI_Text_XYZ_Measure+0x304>)
 8014ec2:	f008 f861 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 8014ec6:	9a02      	ldr	r2, [sp, #8]
 8014ec8:	494b      	ldr	r1, [pc, #300]	; (8014ff8 <GUI_Text_XYZ_Measure+0x308>)
 8014eca:	a804      	add	r0, sp, #16
 8014ecc:	f00b fd22 	bl	8020914 <sprintf>
	dec = 10;
 8014ed0:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 8014ed4:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 8014ed8:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 8014edc:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8014ede:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8014ee0:	9b02      	ldr	r3, [sp, #8]
 8014ee2:	fbb3 f0fa 	udiv	r0, r3, sl
 8014ee6:	f7eb fb25 	bl	8000534 <__aeabi_ui2d>
 8014eea:	2200      	movs	r2, #0
 8014eec:	4b43      	ldr	r3, [pc, #268]	; (8014ffc <GUI_Text_XYZ_Measure+0x30c>)
 8014eee:	f7eb fe1d 	bl	8000b2c <__aeabi_dcmpge>
 8014ef2:	b138      	cbz	r0, 8014f04 <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 8014ef4:	3f17      	subs	r7, #23
			number++;
 8014ef6:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8014efa:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 8014efe:	b2ff      	uxtb	r7, r7
			number++;
 8014f00:	fa5f f888 	uxtb.w	r8, r8
 8014f04:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014f08:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8014f0c:	d1e8      	bne.n	8014ee0 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 8014f0e:	4b3d      	ldr	r3, [pc, #244]	; (8015004 <GUI_Text_XYZ_Measure+0x314>)
 8014f10:	781a      	ldrb	r2, [r3, #0]
 8014f12:	4542      	cmp	r2, r8
 8014f14:	f104 0923 	add.w	r9, r4, #35	; 0x23
 8014f18:	469a      	mov	sl, r3
 8014f1a:	d802      	bhi.n	8014f22 <GUI_Text_XYZ_Measure+0x232>
 8014f1c:	4b33      	ldr	r3, [pc, #204]	; (8014fec <GUI_Text_XYZ_Measure+0x2fc>)
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	b173      	cbz	r3, 8014f40 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 8014f22:	2163      	movs	r1, #99	; 0x63
 8014f24:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8014f28:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014f2c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014f30:	9100      	str	r1, [sp, #0]
 8014f32:	b29b      	uxth	r3, r3
 8014f34:	b292      	uxth	r2, r2
 8014f36:	fa1f f189 	uxth.w	r1, r9
 8014f3a:	b280      	uxth	r0, r0
 8014f3c:	f007 fdfb 	bl	801cb36 <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014f40:	19e8      	adds	r0, r5, r7
 8014f42:	fa1f f189 	uxth.w	r1, r9
 8014f46:	2303      	movs	r3, #3
 8014f48:	aa04      	add	r2, sp, #16
 8014f4a:	b280      	uxth	r0, r0
	old_numY = number;
 8014f4c:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014f50:	f008 f93c 	bl	801d1cc <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8014f54:	4827      	ldr	r0, [pc, #156]	; (8014ff4 <GUI_Text_XYZ_Measure+0x304>)
 8014f56:	f008 f817 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 8014f5a:	9a03      	ldr	r2, [sp, #12]
 8014f5c:	4926      	ldr	r1, [pc, #152]	; (8014ff8 <GUI_Text_XYZ_Measure+0x308>)
 8014f5e:	a804      	add	r0, sp, #16
 8014f60:	f00b fcd8 	bl	8020914 <sprintf>
	 dec = 10;
 8014f64:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 8014f68:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 8014f6c:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8014f6e:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 8014f70:	9b03      	ldr	r3, [sp, #12]
 8014f72:	fbb3 f0f9 	udiv	r0, r3, r9
 8014f76:	f7eb fadd 	bl	8000534 <__aeabi_ui2d>
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	4b1f      	ldr	r3, [pc, #124]	; (8014ffc <GUI_Text_XYZ_Measure+0x30c>)
 8014f7e:	f7eb fdd5 	bl	8000b2c <__aeabi_dcmpge>
 8014f82:	b128      	cbz	r0, 8014f90 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 8014f84:	3f17      	subs	r7, #23
			number++;
 8014f86:	3601      	adds	r6, #1
			dec *= 10;
 8014f88:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 8014f8c:	b2ff      	uxtb	r7, r7
			number++;
 8014f8e:	b2f6      	uxtb	r6, r6
 8014f90:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8014f94:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8014f98:	d1ea      	bne.n	8014f70 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 8014f9a:	4b1b      	ldr	r3, [pc, #108]	; (8015008 <GUI_Text_XYZ_Measure+0x318>)
 8014f9c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8014fec <GUI_Text_XYZ_Measure+0x2fc>
 8014fa0:	781a      	ldrb	r2, [r3, #0]
 8014fa2:	42b2      	cmp	r2, r6
 8014fa4:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 8014fa8:	4698      	mov	r8, r3
 8014faa:	d802      	bhi.n	8014fb2 <GUI_Text_XYZ_Measure+0x2c2>
 8014fac:	f899 3000 	ldrb.w	r3, [r9]
 8014fb0:	b173      	cbz	r3, 8014fd0 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8014fb2:	2163      	movs	r1, #99	; 0x63
 8014fb4:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 8014fb8:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014fbc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014fc0:	9100      	str	r1, [sp, #0]
 8014fc2:	b29b      	uxth	r3, r3
 8014fc4:	b292      	uxth	r2, r2
 8014fc6:	fa1f f18a 	uxth.w	r1, sl
 8014fca:	b280      	uxth	r0, r0
 8014fcc:	f007 fdb3 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014fd0:	19e8      	adds	r0, r5, r7
 8014fd2:	2303      	movs	r3, #3
 8014fd4:	aa04      	add	r2, sp, #16
 8014fd6:	fa1f f18a 	uxth.w	r1, sl
 8014fda:	b280      	uxth	r0, r0
	old_numZ = number;
 8014fdc:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014fe0:	f008 f8f4 	bl	801d1cc <TFT_DisplayString>
	old_nanXYZ = 0;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	f889 3000 	strb.w	r3, [r9]
 8014fea:	e6f6      	b.n	8014dda <GUI_Text_XYZ_Measure+0xea>
 8014fec:	20005732 	.word	0x20005732
 8014ff0:	200001e8 	.word	0x200001e8
 8014ff4:	200001f0 	.word	0x200001f0
 8014ff8:	08025609 	.word	0x08025609
 8014ffc:	3ff00000 	.word	0x3ff00000
 8015000:	2000023a 	.word	0x2000023a
 8015004:	2000023b 	.word	0x2000023b
 8015008:	2000023c 	.word	0x2000023c

0801500c <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nope, uint8_t grey)
{
 801500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015010:	ed2d 8b02 	vpush	{d8}
 8015014:	b085      	sub	sp, #20
 8015016:	4604      	mov	r4, r0
 8015018:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 801501a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801501e:	2200      	movs	r2, #0
{
 8015020:	460d      	mov	r5, r1
 8015022:	eef0 8a40 	vmov.f32	s17, s0
 8015026:	eeb0 8a60 	vmov.f32	s16, s1
 801502a:	461e      	mov	r6, r3
	char buffer[5] = {0};
 801502c:	9202      	str	r2, [sp, #8]
 801502e:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 8015032:	f007 ffaf 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015036:	2063      	movs	r0, #99	; 0x63
 8015038:	f007 ffb2 	bl	801cfa0 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nope){
 801503c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015044:	f8df 8144 	ldr.w	r8, [pc, #324]	; 801518c <GUI_Text_xy_Measure+0x180>
 8015048:	f105 0723 	add.w	r7, r5, #35	; 0x23
 801504c:	d106      	bne.n	801505c <GUI_Text_xy_Measure+0x50>
 801504e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015052:	eeb4 8a67 	vcmp.f32	s16, s15
 8015056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801505a:	d002      	beq.n	8015062 <GUI_Text_xy_Measure+0x56>
 801505c:	f1b9 0f00 	cmp.w	r9, #0
 8015060:	d05a      	beq.n	8015118 <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8015062:	f898 3000 	ldrb.w	r3, [r8]
 8015066:	b96b      	cbnz	r3, 8015084 <GUI_Text_xy_Measure+0x78>
 8015068:	2163      	movs	r1, #99	; 0x63
 801506a:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 801506e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015072:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015076:	9100      	str	r1, [sp, #0]
 8015078:	b29b      	uxth	r3, r3
 801507a:	b292      	uxth	r2, r2
 801507c:	4629      	mov	r1, r5
 801507e:	b280      	uxth	r0, r0
 8015080:	f007 fd59 	bl	801cb36 <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015084:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8015088:	483c      	ldr	r0, [pc, #240]	; (801517c <GUI_Text_xy_Measure+0x170>)
 801508a:	fa1f fb8b 	uxth.w	fp, fp
 801508e:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8015092:	f007 ff79 	bl	801cf88 <TFT_SetFont>
 8015096:	fa1f fa8a 	uxth.w	sl, sl
 801509a:	222d      	movs	r2, #45	; 0x2d
 801509c:	4629      	mov	r1, r5
 801509e:	4658      	mov	r0, fp
 80150a0:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 80150a4:	f008 f83a 	bl	801d11c <TFT_DrawChar>
 80150a8:	fa1f f989 	uxth.w	r9, r9
 80150ac:	2220      	movs	r2, #32
 80150ae:	4629      	mov	r1, r5
 80150b0:	4650      	mov	r0, sl
 80150b2:	f008 f833 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80150b6:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80150b8:	222d      	movs	r2, #45	; 0x2d
 80150ba:	4629      	mov	r1, r5
 80150bc:	4648      	mov	r0, r9
 80150be:	f008 f82d 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80150c2:	222d      	movs	r2, #45	; 0x2d
 80150c4:	4631      	mov	r1, r6
 80150c6:	4658      	mov	r0, fp
 80150c8:	f008 f828 	bl	801d11c <TFT_DrawChar>
 80150cc:	2220      	movs	r2, #32
 80150ce:	4631      	mov	r1, r6
 80150d0:	4650      	mov	r0, sl
 80150d2:	f008 f823 	bl	801d11c <TFT_DrawChar>
 80150d6:	222d      	movs	r2, #45	; 0x2d
 80150d8:	4631      	mov	r1, r6
 80150da:	4648      	mov	r0, r9
 80150dc:	f008 f81e 	bl	801d11c <TFT_DrawChar>
		old_nanxy = 1;
 80150e0:	2301      	movs	r3, #1
 80150e2:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 80150e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80150ea:	f007 ff53 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80150ee:	2063      	movs	r0, #99	; 0x63
 80150f0:	f007 ff56 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 80150f4:	4822      	ldr	r0, [pc, #136]	; (8015180 <GUI_Text_xy_Measure+0x174>)
 80150f6:	f007 ff47 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 80150fa:	4629      	mov	r1, r5
 80150fc:	4620      	mov	r0, r4
 80150fe:	2237      	movs	r2, #55	; 0x37
 8015100:	f008 f80c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8015104:	2238      	movs	r2, #56	; 0x38
 8015106:	b2b9      	uxth	r1, r7
 8015108:	4620      	mov	r0, r4
 801510a:	f008 f807 	bl	801d11c <TFT_DrawChar>
	
}	
 801510e:	b005      	add	sp, #20
 8015110:	ecbd 8b02 	vpop	{d8}
 8015114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801511c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015120:	2e00      	cmp	r6, #0
 8015122:	bf08      	it	eq
 8015124:	4610      	moveq	r0, r2
 8015126:	f007 ff35 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 801512a:	4816      	ldr	r0, [pc, #88]	; (8015184 <GUI_Text_xy_Measure+0x178>)
 801512c:	f007 ff2c 	bl	801cf88 <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 8015130:	ee18 0a90 	vmov	r0, s17
 8015134:	f7eb fa20 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015138:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 801513c:	4602      	mov	r2, r0
 801513e:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015140:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 8015142:	4911      	ldr	r1, [pc, #68]	; (8015188 <GUI_Text_xy_Measure+0x17c>)
 8015144:	a802      	add	r0, sp, #8
 8015146:	f00b fbe5 	bl	8020914 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801514a:	2303      	movs	r3, #3
 801514c:	aa02      	add	r2, sp, #8
 801514e:	4629      	mov	r1, r5
 8015150:	4630      	mov	r0, r6
 8015152:	f008 f83b 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 8015156:	ee18 0a10 	vmov	r0, s16
 801515a:	f7eb fa0d 	bl	8000578 <__aeabi_f2d>
 801515e:	4602      	mov	r2, r0
 8015160:	460b      	mov	r3, r1
 8015162:	a802      	add	r0, sp, #8
 8015164:	4908      	ldr	r1, [pc, #32]	; (8015188 <GUI_Text_xy_Measure+0x17c>)
 8015166:	f00b fbd5 	bl	8020914 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801516a:	2303      	movs	r3, #3
 801516c:	aa02      	add	r2, sp, #8
 801516e:	b2b9      	uxth	r1, r7
 8015170:	4630      	mov	r0, r6
 8015172:	f008 f82b 	bl	801d1cc <TFT_DisplayString>
		old_nanxy = 0;
 8015176:	f888 9000 	strb.w	r9, [r8]
 801517a:	e7b4      	b.n	80150e6 <GUI_Text_xy_Measure+0xda>
 801517c:	200001e8 	.word	0x200001e8
 8015180:	200001f8 	.word	0x200001f8
 8015184:	200001f0 	.word	0x200001f0
 8015188:	080323ef 	.word	0x080323ef
 801518c:	20005740 	.word	0x20005740

08015190 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nope, uint8_t grey)
{
 8015190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015194:	ed2d 8b02 	vpush	{d8}
 8015198:	b087      	sub	sp, #28
 801519a:	4604      	mov	r4, r0
 801519c:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 801519e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80151a2:	2300      	movs	r3, #0
{
 80151a4:	460d      	mov	r5, r1
 80151a6:	eeb0 8a40 	vmov.f32	s16, s0
 80151aa:	ee10 9a90 	vmov	r9, s1
 80151ae:	4690      	mov	r8, r2
	char buffer[5] = {0};
 80151b0:	9304      	str	r3, [sp, #16]
 80151b2:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80151b6:	f007 feed 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80151ba:	2063      	movs	r0, #99	; 0x63
 80151bc:	f007 fef0 	bl	801cfa0 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nope){
 80151c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80151c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c8:	4f5d      	ldr	r7, [pc, #372]	; (8015340 <GUI_Text_uv_Measure+0x1b0>)
 80151ca:	f105 0623 	add.w	r6, r5, #35	; 0x23
 80151ce:	d112      	bne.n	80151f6 <GUI_Text_uv_Measure+0x66>
 80151d0:	4648      	mov	r0, r9
 80151d2:	f7eb f9d1 	bl	8000578 <__aeabi_f2d>
 80151d6:	a356      	add	r3, pc, #344	; (adr r3, 8015330 <GUI_Text_uv_Measure+0x1a0>)
 80151d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151e0:	f7eb fcae 	bl	8000b40 <__aeabi_dcmpgt>
 80151e4:	b138      	cbz	r0, 80151f6 <GUI_Text_uv_Measure+0x66>
 80151e6:	a354      	add	r3, pc, #336	; (adr r3, 8015338 <GUI_Text_uv_Measure+0x1a8>)
 80151e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151f0:	f7eb fc88 	bl	8000b04 <__aeabi_dcmplt>
 80151f4:	b910      	cbnz	r0, 80151fc <GUI_Text_uv_Measure+0x6c>
 80151f6:	f1b8 0f00 	cmp.w	r8, #0
 80151fa:	d064      	beq.n	80152c6 <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 80151fc:	783b      	ldrb	r3, [r7, #0]
 80151fe:	b96b      	cbnz	r3, 801521c <GUI_Text_uv_Measure+0x8c>
 8015200:	2163      	movs	r1, #99	; 0x63
 8015202:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8015206:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801520a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801520e:	9100      	str	r1, [sp, #0]
 8015210:	b29b      	uxth	r3, r3
 8015212:	b292      	uxth	r2, r2
 8015214:	4629      	mov	r1, r5
 8015216:	b280      	uxth	r0, r0
 8015218:	f007 fc8d 	bl	801cb36 <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801521c:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8015220:	4848      	ldr	r0, [pc, #288]	; (8015344 <GUI_Text_uv_Measure+0x1b4>)
 8015222:	fa1f fb8b 	uxth.w	fp, fp
 8015226:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 801522a:	f007 fead 	bl	801cf88 <TFT_SetFont>
 801522e:	fa1f fa8a 	uxth.w	sl, sl
 8015232:	222d      	movs	r2, #45	; 0x2d
 8015234:	4629      	mov	r1, r5
 8015236:	4658      	mov	r0, fp
 8015238:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 801523c:	f007 ff6e 	bl	801d11c <TFT_DrawChar>
 8015240:	fa1f f989 	uxth.w	r9, r9
 8015244:	2220      	movs	r2, #32
 8015246:	4629      	mov	r1, r5
 8015248:	4650      	mov	r0, sl
 801524a:	f007 ff67 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801524e:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015252:	222d      	movs	r2, #45	; 0x2d
 8015254:	4629      	mov	r1, r5
 8015256:	4648      	mov	r0, r9
 8015258:	f007 ff60 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801525c:	222d      	movs	r2, #45	; 0x2d
 801525e:	4641      	mov	r1, r8
 8015260:	4658      	mov	r0, fp
 8015262:	f007 ff5b 	bl	801d11c <TFT_DrawChar>
 8015266:	2220      	movs	r2, #32
 8015268:	4641      	mov	r1, r8
 801526a:	4650      	mov	r0, sl
 801526c:	f007 ff56 	bl	801d11c <TFT_DrawChar>
 8015270:	222d      	movs	r2, #45	; 0x2d
 8015272:	4641      	mov	r1, r8
 8015274:	4648      	mov	r0, r9
 8015276:	f007 ff51 	bl	801d11c <TFT_DrawChar>
		old_nanuv = 1;
 801527a:	2301      	movs	r3, #1
 801527c:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 801527e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 8015282:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 8015286:	f007 fe85 	bl	801cf94 <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 801528a:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 801528c:	482e      	ldr	r0, [pc, #184]	; (8015348 <GUI_Text_uv_Measure+0x1b8>)
 801528e:	f007 fe7b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8015292:	4629      	mov	r1, r5
 8015294:	4638      	mov	r0, r7
 8015296:	223a      	movs	r2, #58	; 0x3a
 8015298:	f007 ff40 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 801529c:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 801529e:	4629      	mov	r1, r5
 80152a0:	4620      	mov	r0, r4
 80152a2:	2234      	movs	r2, #52	; 0x34
 80152a4:	f007 ff3a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 80152a8:	4631      	mov	r1, r6
 80152aa:	4638      	mov	r0, r7
 80152ac:	223a      	movs	r2, #58	; 0x3a
 80152ae:	f007 ff35 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 80152b2:	2235      	movs	r2, #53	; 0x35
 80152b4:	4631      	mov	r1, r6
 80152b6:	4620      	mov	r0, r4
 80152b8:	f007 ff30 	bl	801d11c <TFT_DrawChar>
}	
 80152bc:	b007      	add	sp, #28
 80152be:	ecbd 8b02 	vpop	{d8}
 80152c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80152c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152ca:	f249 40d2 	movw	r0, #38098	; 0x94d2
 80152ce:	f1ba 0f00 	cmp.w	sl, #0
 80152d2:	bf08      	it	eq
 80152d4:	4618      	moveq	r0, r3
 80152d6:	f007 fe5d 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 80152da:	481c      	ldr	r0, [pc, #112]	; (801534c <GUI_Text_uv_Measure+0x1bc>)
 80152dc:	f007 fe54 	bl	801cf88 <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 80152e0:	ee18 0a10 	vmov	r0, s16
 80152e4:	f7eb f948 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80152e8:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 80152ec:	4602      	mov	r2, r0
 80152ee:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80152f0:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 80152f4:	4916      	ldr	r1, [pc, #88]	; (8015350 <GUI_Text_uv_Measure+0x1c0>)
 80152f6:	a804      	add	r0, sp, #16
 80152f8:	f00b fb0c 	bl	8020914 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80152fc:	2303      	movs	r3, #3
 80152fe:	aa04      	add	r2, sp, #16
 8015300:	4629      	mov	r1, r5
 8015302:	4650      	mov	r0, sl
 8015304:	f007 ff62 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8015308:	4648      	mov	r0, r9
 801530a:	f7eb f935 	bl	8000578 <__aeabi_f2d>
 801530e:	4602      	mov	r2, r0
 8015310:	460b      	mov	r3, r1
 8015312:	a804      	add	r0, sp, #16
 8015314:	490e      	ldr	r1, [pc, #56]	; (8015350 <GUI_Text_uv_Measure+0x1c0>)
 8015316:	f00b fafd 	bl	8020914 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801531a:	2303      	movs	r3, #3
 801531c:	aa04      	add	r2, sp, #16
 801531e:	b2b1      	uxth	r1, r6
 8015320:	4650      	mov	r0, sl
 8015322:	f007 ff53 	bl	801d1cc <TFT_DisplayString>
		old_nanuv = 0;
 8015326:	f887 8000 	strb.w	r8, [r7]
 801532a:	e7a8      	b.n	801527e <GUI_Text_uv_Measure+0xee>
 801532c:	f3af 8000 	nop.w
 8015330:	33333333 	.word	0x33333333
 8015334:	3fe33333 	.word	0x3fe33333
 8015338:	ea4a8c15 	.word	0xea4a8c15
 801533c:	3fe33404 	.word	0x3fe33404
 8015340:	2000573f 	.word	0x2000573f
 8015344:	200001e8 	.word	0x200001e8
 8015348:	200001f8 	.word	0x200001f8
 801534c:	200001f0 	.word	0x200001f0
 8015350:	080323ef 	.word	0x080323ef

08015354 <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nope, uint8_t grey)
{	
 8015354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 801535a:	4b71      	ldr	r3, [pc, #452]	; (8015520 <GUI_Text_CCT_Measure+0x1cc>)
{	
 801535c:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 801535e:	781a      	ldrb	r2, [r3, #0]
 8015360:	4b70      	ldr	r3, [pc, #448]	; (8015524 <GUI_Text_CCT_Measure+0x1d0>)
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	429a      	cmp	r2, r3
{	
 8015366:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8015368:	bf1c      	itt	ne
 801536a:	4b6f      	ldrne	r3, [pc, #444]	; (8015528 <GUI_Text_CCT_Measure+0x1d4>)
 801536c:	2200      	movne	r2, #0
	char buffer[9] = {0};
 801536e:	f04f 0600 	mov.w	r6, #0
{	
 8015372:	4605      	mov	r5, r0
	uint8_t	delta_pos = 180, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015374:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8015378:	bf18      	it	ne
 801537a:	701a      	strbne	r2, [r3, #0]
{	
 801537c:	460c      	mov	r4, r1
	char buffer[9] = {0};
 801537e:	9603      	str	r6, [sp, #12]
 8015380:	9604      	str	r6, [sp, #16]
 8015382:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015386:	f007 fe0b 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801538a:	4868      	ldr	r0, [pc, #416]	; (801552c <GUI_Text_CCT_Measure+0x1d8>)
 801538c:	f007 fdfc 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 8015390:	464a      	mov	r2, r9
 8015392:	4967      	ldr	r1, [pc, #412]	; (8015530 <GUI_Text_CCT_Measure+0x1dc>)
 8015394:	a803      	add	r0, sp, #12
 8015396:	f00b fabd 	bl	8020914 <sprintf>
 801539a:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 801539e:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, number = 0;
 80153a2:	27b4      	movs	r7, #180	; 0xb4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80153a4:	fbb9 f0fa 	udiv	r0, r9, sl
 80153a8:	f7eb f8c4 	bl	8000534 <__aeabi_ui2d>
 80153ac:	2200      	movs	r2, #0
 80153ae:	4b61      	ldr	r3, [pc, #388]	; (8015534 <GUI_Text_CCT_Measure+0x1e0>)
 80153b0:	f7eb fbbc 	bl	8000b2c <__aeabi_dcmpge>
 80153b4:	b130      	cbz	r0, 80153c4 <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 80153b6:	230a      	movs	r3, #10
			delta_pos-=23;
 80153b8:	3f17      	subs	r7, #23
			number++;
 80153ba:	3601      	adds	r6, #1
			dec *= 10;
 80153bc:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80153c0:	b2ff      	uxtb	r7, r7
			number++;
 80153c2:	b2f6      	uxtb	r6, r6
 80153c4:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 80153c8:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80153cc:	d1ea      	bne.n	80153a4 <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nope) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+205, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+125, Y+4, 'N'-33);TFT_DrawChar(X+150, Y+4, 'A'-33);TFT_DrawChar(X+175, Y+4, 'N'-33);}
 80153ce:	f1b9 0f00 	cmp.w	r9, #0
 80153d2:	d063      	beq.n	801549c <GUI_Text_CCT_Measure+0x148>
 80153d4:	f11b 0200 	adds.w	r2, fp, #0
 80153d8:	bf18      	it	ne
 80153da:	2201      	movne	r2, #1
 80153dc:	4b52      	ldr	r3, [pc, #328]	; (8015528 <GUI_Text_CCT_Measure+0x1d4>)
 80153de:	7819      	ldrb	r1, [r3, #0]
 80153e0:	4698      	mov	r8, r3
 80153e2:	2900      	cmp	r1, #0
 80153e4:	d15c      	bne.n	80154a0 <GUI_Text_CCT_Measure+0x14c>
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	d05a      	beq.n	80154a0 <GUI_Text_CCT_Measure+0x14c>
 80153ea:	2201      	movs	r2, #1
 80153ec:	701a      	strb	r2, [r3, #0]
 80153ee:	2163      	movs	r1, #99	; 0x63
 80153f0:	f104 0319 	add.w	r3, r4, #25
 80153f4:	f105 02cd 	add.w	r2, r5, #205	; 0xcd
 80153f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	b292      	uxth	r2, r2
 8015400:	9100      	str	r1, [sp, #0]
 8015402:	b280      	uxth	r0, r0
 8015404:	4621      	mov	r1, r4
 8015406:	f007 fb96 	bl	801cb36 <TFT_FillRectangle>
 801540a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801540e:	f007 fdc1 	bl	801cf94 <TFT_SetTextColor>
 8015412:	1d26      	adds	r6, r4, #4
 8015414:	4848      	ldr	r0, [pc, #288]	; (8015538 <GUI_Text_CCT_Measure+0x1e4>)
 8015416:	f007 fdb7 	bl	801cf88 <TFT_SetFont>
 801541a:	b2b6      	uxth	r6, r6
 801541c:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8015420:	222d      	movs	r2, #45	; 0x2d
 8015422:	4631      	mov	r1, r6
 8015424:	b280      	uxth	r0, r0
 8015426:	f007 fe79 	bl	801d11c <TFT_DrawChar>
 801542a:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801542e:	2220      	movs	r2, #32
 8015430:	4631      	mov	r1, r6
 8015432:	b280      	uxth	r0, r0
 8015434:	f007 fe72 	bl	801d11c <TFT_DrawChar>
 8015438:	f105 00af 	add.w	r0, r5, #175	; 0xaf
 801543c:	222d      	movs	r2, #45	; 0x2d
 801543e:	4631      	mov	r1, r6
 8015440:	b280      	uxth	r0, r0
 8015442:	f007 fe6b 	bl	801d11c <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 8015446:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801544a:	f007 fda3 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801544e:	2063      	movs	r0, #99	; 0x63
 8015450:	f007 fda6 	bl	801cfa0 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8015454:	4b39      	ldr	r3, [pc, #228]	; (801553c <GUI_Text_CCT_Measure+0x1e8>)
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	f105 06d7 	add.w	r6, r5, #215	; 0xd7
 801545c:	2b00      	cmp	r3, #0
 801545e:	d152      	bne.n	8015506 <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 8015460:	4837      	ldr	r0, [pc, #220]	; (8015540 <GUI_Text_CCT_Measure+0x1ec>)
 8015462:	f007 fd91 	bl	801cf88 <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 8015466:	2289      	movs	r2, #137	; 0x89
 8015468:	4621      	mov	r1, r4
 801546a:	4628      	mov	r0, r5
 801546c:	f007 fd9e 	bl	801cfac <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 8015470:	f105 0018 	add.w	r0, r5, #24
 8015474:	2295      	movs	r2, #149	; 0x95
 8015476:	4621      	mov	r1, r4
 8015478:	b280      	uxth	r0, r0
 801547a:	f007 fd97 	bl	801cfac <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 801547e:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 8015482:	2291      	movs	r2, #145	; 0x91
 8015484:	4621      	mov	r1, r4
 8015486:	b280      	uxth	r0, r0
 8015488:	f007 fd90 	bl	801cfac <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y, 'К'-17);
 801548c:	2289      	movs	r2, #137	; 0x89
 801548e:	4621      	mov	r1, r4
 8015490:	b2b0      	uxth	r0, r6
 8015492:	f007 fd8b 	bl	801cfac <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+215, Y+4, 'K'-33);
		}	
}
 8015496:	b007      	add	sp, #28
 8015498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801549c:	2201      	movs	r2, #1
 801549e:	e79d      	b.n	80153dc <GUI_Text_CCT_Measure+0x88>
	else if(!nope & Value != 0){
 80154a0:	f1bb 0f00 	cmp.w	fp, #0
 80154a4:	d1cf      	bne.n	8015446 <GUI_Text_CCT_Measure+0xf2>
 80154a6:	f1b9 0f00 	cmp.w	r9, #0
 80154aa:	d0cc      	beq.n	8015446 <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 80154ac:	4b25      	ldr	r3, [pc, #148]	; (8015544 <GUI_Text_CCT_Measure+0x1f0>)
 80154ae:	781a      	ldrb	r2, [r3, #0]
 80154b0:	42b2      	cmp	r2, r6
 80154b2:	4699      	mov	r9, r3
 80154b4:	d90d      	bls.n	80154d2 <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+205, Y+25, TFT_Black_Bkgr);
 80154b6:	2163      	movs	r1, #99	; 0x63
 80154b8:	f104 0319 	add.w	r3, r4, #25
 80154bc:	f105 02cd 	add.w	r2, r5, #205	; 0xcd
 80154c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80154c4:	9100      	str	r1, [sp, #0]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	b292      	uxth	r2, r2
 80154ca:	4621      	mov	r1, r4
 80154cc:	b280      	uxth	r0, r0
 80154ce:	f007 fb32 	bl	801cb36 <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80154d2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80154d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154da:	f249 42d2 	movw	r2, #38098	; 0x94d2
 80154de:	2800      	cmp	r0, #0
 80154e0:	bf14      	ite	ne
 80154e2:	4610      	movne	r0, r2
 80154e4:	4618      	moveq	r0, r3
 80154e6:	f007 fd55 	bl	801cf94 <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 80154ea:	1ca1      	adds	r1, r4, #2
 80154ec:	19e8      	adds	r0, r5, r7
 80154ee:	2303      	movs	r3, #3
 80154f0:	aa03      	add	r2, sp, #12
 80154f2:	b289      	uxth	r1, r1
 80154f4:	b280      	uxth	r0, r0
	old_numCCT = number;
 80154f6:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 80154fa:	f007 fe67 	bl	801d1cc <TFT_DisplayString>
 80154fe:	2300      	movs	r3, #0
 8015500:	f888 3000 	strb.w	r3, [r8]
 8015504:	e79f      	b.n	8015446 <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 8015506:	3404      	adds	r4, #4
 8015508:	b2a4      	uxth	r4, r4
 801550a:	4621      	mov	r1, r4
 801550c:	4628      	mov	r0, r5
 801550e:	f002 fd07 	bl	8017f20 <GUI_TextEn_CCT>
			TFT_DrawChar(X+215, Y+4, 'K'-33);
 8015512:	222a      	movs	r2, #42	; 0x2a
 8015514:	4621      	mov	r1, r4
 8015516:	b2b0      	uxth	r0, r6
 8015518:	f007 fe00 	bl	801d11c <TFT_DrawChar>
}
 801551c:	e7bb      	b.n	8015496 <GUI_Text_CCT_Measure+0x142>
 801551e:	bf00      	nop
 8015520:	2000022a 	.word	0x2000022a
 8015524:	20005701 	.word	0x20005701
 8015528:	20005733 	.word	0x20005733
 801552c:	200001f0 	.word	0x200001f0
 8015530:	08025609 	.word	0x08025609
 8015534:	3ff00000 	.word	0x3ff00000
 8015538:	200001e8 	.word	0x200001e8
 801553c:	20005703 	.word	0x20005703
 8015540:	20000200 	.word	0x20000200
 8015544:	20000232 	.word	0x20000232

08015548 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8015548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801554c:	ed2d 8b02 	vpush	{d8}
 8015550:	4616      	mov	r6, r2
 8015552:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8015554:	4a71      	ldr	r2, [pc, #452]	; (801571c <GUI_Text_lambdaD_Measure+0x1d4>)
 8015556:	4b72      	ldr	r3, [pc, #456]	; (8015720 <GUI_Text_lambdaD_Measure+0x1d8>)
 8015558:	4f72      	ldr	r7, [pc, #456]	; (8015724 <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 801555a:	4605      	mov	r5, r0
 801555c:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801555e:	7818      	ldrb	r0, [r3, #0]
 8015560:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 8015562:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8015566:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 8015568:	ee60 7a27 	vmul.f32	s15, s0, s15
 801556c:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801556e:	bf18      	it	ne
 8015570:	2300      	movne	r3, #0
{	
 8015572:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8015574:	bf18      	it	ne
 8015576:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8015578:	ee17 0a90 	vmov	r0, s15
 801557c:	4690      	mov	r8, r2
 801557e:	f7ea fffb 	bl	8000578 <__aeabi_f2d>
 8015582:	ec41 0b10 	vmov	d0, r0, r1
 8015586:	f00e f97f 	bl	8023888 <floor>
	char buffer[9] = {0};
 801558a:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 801558c:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 8015590:	9203      	str	r2, [sp, #12]
 8015592:	9204      	str	r2, [sp, #16]
 8015594:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
 8015598:	2e00      	cmp	r6, #0
 801559a:	d054      	beq.n	8015646 <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 801559c:	783b      	ldrb	r3, [r7, #0]
 801559e:	bb33      	cbnz	r3, 80155ee <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 80155a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80155a4:	f007 fcf6 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80155a8:	2063      	movs	r0, #99	; 0x63
 80155aa:	f007 fcf9 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80155ae:	485e      	ldr	r0, [pc, #376]	; (8015728 <GUI_Text_lambdaD_Measure+0x1e0>)
 80155b0:	f007 fcea 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80155b4:	2163      	movs	r1, #99	; 0x63
 80155b6:	f104 031a 	add.w	r3, r4, #26
 80155ba:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80155be:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80155c2:	9100      	str	r1, [sp, #0]
 80155c4:	b29b      	uxth	r3, r3
 80155c6:	b292      	uxth	r2, r2
 80155c8:	4621      	mov	r1, r4
 80155ca:	b280      	uxth	r0, r0
 80155cc:	f007 fab3 	bl	801cb36 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80155d0:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80155d2:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 80155d6:	f88d 300c 	strb.w	r3, [sp, #12]
 80155da:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80155de:	aa03      	add	r2, sp, #12
 80155e0:	2303      	movs	r3, #3
 80155e2:	4621      	mov	r1, r4
 80155e4:	b280      	uxth	r0, r0
 80155e6:	f007 fdf1 	bl	801d1cc <TFT_DisplayString>
				old_nan_lambdaD = 1;
 80155ea:	2301      	movs	r3, #1
 80155ec:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 80155ee:	f899 2000 	ldrb.w	r2, [r9]
 80155f2:	f898 3000 	ldrb.w	r3, [r8]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d020      	beq.n	801563c <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 80155fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 80155fe:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8015600:	f007 fcc8 	bl	801cf94 <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 8015604:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015606:	2063      	movs	r0, #99	; 0x63
 8015608:	f007 fcca 	bl	801cfa0 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 801560c:	4628      	mov	r0, r5
 801560e:	4631      	mov	r1, r6
 8015610:	f001 fd26 	bl	8017060 <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 8015614:	4b45      	ldr	r3, [pc, #276]	; (801572c <GUI_Text_lambdaD_Measure+0x1e4>)
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 801561c:	35d8      	adds	r5, #216	; 0xd8
 801561e:	2b00      	cmp	r3, #0
 8015620:	d16c      	bne.n	80156fc <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 8015622:	4843      	ldr	r0, [pc, #268]	; (8015730 <GUI_Text_lambdaD_Measure+0x1e8>)
 8015624:	f007 fcb0 	bl	801cf88 <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8015628:	22bd      	movs	r2, #189	; 0xbd
 801562a:	4631      	mov	r1, r6
 801562c:	b2b8      	uxth	r0, r7
 801562e:	f007 fcbd 	bl	801cfac <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 8015632:	22bc      	movs	r2, #188	; 0xbc
 8015634:	4631      	mov	r1, r6
 8015636:	b2a8      	uxth	r0, r5
 8015638:	f007 fcb8 	bl	801cfac <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 801563c:	b006      	add	sp, #24
 801563e:	ecbd 8b02 	vpop	{d8}
 8015642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 8015646:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801564c:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 8015650:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015652:	f1ba 0f00 	cmp.w	sl, #0
 8015656:	bf08      	it	eq
 8015658:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 801565a:	4b36      	ldr	r3, [pc, #216]	; (8015734 <GUI_Text_lambdaD_Measure+0x1ec>)
 801565c:	f7eb f90a 	bl	8000874 <__aeabi_ddiv>
 8015660:	f7eb fad6 	bl	8000c10 <__aeabi_d2f>
 8015664:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015668:	4638      	mov	r0, r7
 801566a:	f007 fc93 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801566e:	2063      	movs	r0, #99	; 0x63
 8015670:	f007 fc96 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015674:	482c      	ldr	r0, [pc, #176]	; (8015728 <GUI_Text_lambdaD_Measure+0x1e0>)
 8015676:	f007 fc87 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 801567a:	ee18 0a10 	vmov	r0, s16
 801567e:	f7ea ff7b 	bl	8000578 <__aeabi_f2d>
 8015682:	4602      	mov	r2, r0
 8015684:	460b      	mov	r3, r1
 8015686:	a803      	add	r0, sp, #12
 8015688:	492b      	ldr	r1, [pc, #172]	; (8015738 <GUI_Text_lambdaD_Measure+0x1f0>)
 801568a:	f00b f943 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 801568e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8015690:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 8015692:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8015694:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015698:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 801569a:	ee07 2a10 	vmov	s14, r2
 801569e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80156a2:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80156a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80156aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ae:	db04      	blt.n	80156ba <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 80156b0:	3f17      	subs	r7, #23
			number++;
 80156b2:	3601      	adds	r6, #1
			dec *= 10;
 80156b4:	434a      	muls	r2, r1
			delta_pos-=23;
 80156b6:	b2ff      	uxtb	r7, r7
			number++;
 80156b8:	b2f6      	uxtb	r6, r6
 80156ba:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 80156bc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80156c0:	d1eb      	bne.n	801569a <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 80156c2:	4b1e      	ldr	r3, [pc, #120]	; (801573c <GUI_Text_lambdaD_Measure+0x1f4>)
 80156c4:	781a      	ldrb	r2, [r3, #0]
 80156c6:	42b2      	cmp	r2, r6
 80156c8:	469a      	mov	sl, r3
 80156ca:	d90d      	bls.n	80156e8 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80156cc:	2163      	movs	r1, #99	; 0x63
 80156ce:	f104 0319 	add.w	r3, r4, #25
 80156d2:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80156d6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80156da:	9100      	str	r1, [sp, #0]
 80156dc:	b29b      	uxth	r3, r3
 80156de:	b292      	uxth	r2, r2
 80156e0:	4621      	mov	r1, r4
 80156e2:	b280      	uxth	r0, r0
 80156e4:	f007 fa27 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80156e8:	19e8      	adds	r0, r5, r7
 80156ea:	2303      	movs	r3, #3
 80156ec:	aa03      	add	r2, sp, #12
 80156ee:	4621      	mov	r1, r4
 80156f0:	b280      	uxth	r0, r0
	old_lambdaD = number;
 80156f2:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80156f6:	f007 fd69 	bl	801d1cc <TFT_DisplayString>
 80156fa:	e778      	b.n	80155ee <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 80156fc:	340a      	adds	r4, #10
 80156fe:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8015700:	480f      	ldr	r0, [pc, #60]	; (8015740 <GUI_Text_lambdaD_Measure+0x1f8>)
 8015702:	f007 fc41 	bl	801cf88 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 8015706:	4621      	mov	r1, r4
 8015708:	b2b8      	uxth	r0, r7
 801570a:	226e      	movs	r2, #110	; 0x6e
 801570c:	f007 fd06 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8015710:	226d      	movs	r2, #109	; 0x6d
 8015712:	4621      	mov	r1, r4
 8015714:	b2a8      	uxth	r0, r5
 8015716:	f007 fd01 	bl	801d11c <TFT_DrawChar>
}
 801571a:	e78f      	b.n	801563c <GUI_Text_lambdaD_Measure+0xf4>
 801571c:	20005701 	.word	0x20005701
 8015720:	2000022a 	.word	0x2000022a
 8015724:	2000573e 	.word	0x2000573e
 8015728:	200001f0 	.word	0x200001f0
 801572c:	20005703 	.word	0x20005703
 8015730:	20000208 	.word	0x20000208
 8015734:	40240000 	.word	0x40240000
 8015738:	080323e5 	.word	0x080323e5
 801573c:	20000230 	.word	0x20000230
 8015740:	200001c0 	.word	0x200001c0

08015744 <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8015744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015748:	ed2d 8b02 	vpush	{d8}
 801574c:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 801574e:	4b76      	ldr	r3, [pc, #472]	; (8015928 <GUI_Text_deltaE_Measure+0x1e4>)
 8015750:	4e76      	ldr	r6, [pc, #472]	; (801592c <GUI_Text_deltaE_Measure+0x1e8>)
{	
 8015752:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8015754:	781a      	ldrb	r2, [r3, #0]
 8015756:	4b76      	ldr	r3, [pc, #472]	; (8015930 <GUI_Text_deltaE_Measure+0x1ec>)
 8015758:	781b      	ldrb	r3, [r3, #0]
 801575a:	429a      	cmp	r2, r3
{	
 801575c:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 801575e:	bf1c      	itt	ne
 8015760:	2300      	movne	r3, #0
 8015762:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8015764:	2300      	movs	r3, #0
 8015766:	9303      	str	r3, [sp, #12]
 8015768:	9304      	str	r3, [sp, #16]
 801576a:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 801576e:	4604      	mov	r4, r0
 8015770:	460d      	mov	r5, r1
 8015772:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_deltaE){
 8015776:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8015778:	2f00      	cmp	r7, #0
 801577a:	d047      	beq.n	801580c <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 801577c:	bb33      	cbnz	r3, 80157cc <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 801577e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015782:	f007 fc07 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015786:	2063      	movs	r0, #99	; 0x63
 8015788:	f007 fc0a 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801578c:	4869      	ldr	r0, [pc, #420]	; (8015934 <GUI_Text_deltaE_Measure+0x1f0>)
 801578e:	f007 fbfb 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015792:	2163      	movs	r1, #99	; 0x63
 8015794:	f105 031a 	add.w	r3, r5, #26
 8015798:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801579c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80157a0:	9100      	str	r1, [sp, #0]
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	b292      	uxth	r2, r2
 80157a6:	4629      	mov	r1, r5
 80157a8:	b280      	uxth	r0, r0
 80157aa:	f007 f9c4 	bl	801cb36 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80157ae:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80157b0:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 80157b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80157b8:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80157bc:	aa03      	add	r2, sp, #12
 80157be:	2303      	movs	r3, #3
 80157c0:	4629      	mov	r1, r5
 80157c2:	b280      	uxth	r0, r0
 80157c4:	f007 fd02 	bl	801d1cc <TFT_DisplayString>
				old_nan_deltaE = 1;
 80157c8:	2301      	movs	r3, #1
 80157ca:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 80157cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157d0:	f007 fbe0 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80157d4:	2063      	movs	r0, #99	; 0x63
 80157d6:	f007 fbe3 	bl	801cfa0 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 80157da:	4857      	ldr	r0, [pc, #348]	; (8015938 <GUI_Text_deltaE_Measure+0x1f4>)
 80157dc:	f007 fbd4 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 80157e0:	1da9      	adds	r1, r5, #6
 80157e2:	2280      	movs	r2, #128	; 0x80
 80157e4:	b289      	uxth	r1, r1
 80157e6:	4620      	mov	r0, r4
 80157e8:	f007 fc98 	bl	801d11c <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80157ec:	4853      	ldr	r0, [pc, #332]	; (801593c <GUI_Text_deltaE_Measure+0x1f8>)
 80157ee:	f007 fbcb 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 80157f2:	1ca9      	adds	r1, r5, #2
 80157f4:	f104 0012 	add.w	r0, r4, #18
 80157f8:	2224      	movs	r2, #36	; 0x24
 80157fa:	b289      	uxth	r1, r1
 80157fc:	b280      	uxth	r0, r0
 80157fe:	f007 fc8d 	bl	801d11c <TFT_DrawChar>

}
 8015802:	b007      	add	sp, #28
 8015804:	ecbd 8b02 	vpop	{d8}
 8015808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 801580c:	b163      	cbz	r3, 8015828 <GUI_Text_deltaE_Measure+0xe4>
 801580e:	f101 031a 	add.w	r3, r1, #26
 8015812:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 8015816:	2163      	movs	r1, #99	; 0x63
 8015818:	3028      	adds	r0, #40	; 0x28
 801581a:	9100      	str	r1, [sp, #0]
 801581c:	b29b      	uxth	r3, r3
 801581e:	b292      	uxth	r2, r2
 8015820:	4629      	mov	r1, r5
 8015822:	b280      	uxth	r0, r0
 8015824:	f007 f987 	bl	801cb36 <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015828:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 801582c:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015830:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015834:	45c1      	cmp	r9, r8
 8015836:	bf08      	it	eq
 8015838:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 801583a:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801583e:	f007 fba9 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015842:	2063      	movs	r0, #99	; 0x63
 8015844:	f007 fbac 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015848:	483a      	ldr	r0, [pc, #232]	; (8015934 <GUI_Text_deltaE_Measure+0x1f0>)
 801584a:	f007 fb9d 	bl	801cf88 <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 801584e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015852:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 8015856:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 8015858:	ee17 0a90 	vmov	r0, s15
 801585c:	f7ea fe8c 	bl	8000578 <__aeabi_f2d>
 8015860:	ec41 0b10 	vmov	d0, r0, r1
 8015864:	f00e f810 	bl	8023888 <floor>
 8015868:	2200      	movs	r2, #0
 801586a:	4b35      	ldr	r3, [pc, #212]	; (8015940 <GUI_Text_deltaE_Measure+0x1fc>)
 801586c:	ec51 0b10 	vmov	r0, r1, d0
 8015870:	f7eb f800 	bl	8000874 <__aeabi_ddiv>
 8015874:	f7eb f9cc 	bl	8000c10 <__aeabi_d2f>
 8015878:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 801587c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015884:	bf48      	it	mi
 8015886:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 801588a:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 801588e:	bf48      	it	mi
 8015890:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 8015894:	f7ea fe70 	bl	8000578 <__aeabi_f2d>
 8015898:	4602      	mov	r2, r0
 801589a:	460b      	mov	r3, r1
 801589c:	a803      	add	r0, sp, #12
 801589e:	4929      	ldr	r1, [pc, #164]	; (8015944 <GUI_Text_deltaE_Measure+0x200>)
 80158a0:	f00b f838 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 80158a4:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 80158a6:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 80158a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80158ac:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80158ae:	ee07 2a10 	vmov	s14, r2
 80158b2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80158b6:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80158ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80158be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158c2:	db04      	blt.n	80158ce <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 80158c4:	3e17      	subs	r6, #23
			number++;
 80158c6:	3701      	adds	r7, #1
			dec *= 10;
 80158c8:	434a      	muls	r2, r1
			delta_pos-=23;
 80158ca:	b2f6      	uxtb	r6, r6
			number++;
 80158cc:	b2ff      	uxtb	r7, r7
 80158ce:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80158d0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80158d4:	d1eb      	bne.n	80158ae <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 80158d6:	4b1c      	ldr	r3, [pc, #112]	; (8015948 <GUI_Text_deltaE_Measure+0x204>)
 80158d8:	781a      	ldrb	r2, [r3, #0]
 80158da:	42ba      	cmp	r2, r7
 80158dc:	4699      	mov	r9, r3
 80158de:	d90d      	bls.n	80158fc <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80158e0:	2163      	movs	r1, #99	; 0x63
 80158e2:	f105 0319 	add.w	r3, r5, #25
 80158e6:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80158ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80158ee:	9100      	str	r1, [sp, #0]
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	b292      	uxth	r2, r2
 80158f4:	4629      	mov	r1, r5
 80158f6:	b280      	uxth	r0, r0
 80158f8:	f007 f91d 	bl	801cb36 <TFT_FillRectangle>
	old_deltaE = number;
 80158fc:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8015900:	f1b8 0f00 	cmp.w	r8, #0
 8015904:	d007      	beq.n	8015916 <GUI_Text_deltaE_Measure+0x1d2>
 8015906:	f1a4 0012 	sub.w	r0, r4, #18
 801590a:	4430      	add	r0, r6
 801590c:	222d      	movs	r2, #45	; 0x2d
 801590e:	4629      	mov	r1, r5
 8015910:	b280      	uxth	r0, r0
 8015912:	f007 fc03 	bl	801d11c <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015916:	19a0      	adds	r0, r4, r6
 8015918:	2303      	movs	r3, #3
 801591a:	aa03      	add	r2, sp, #12
 801591c:	4629      	mov	r1, r5
 801591e:	b280      	uxth	r0, r0
 8015920:	f007 fc54 	bl	801d1cc <TFT_DisplayString>
 8015924:	e752      	b.n	80157cc <GUI_Text_deltaE_Measure+0x88>
 8015926:	bf00      	nop
 8015928:	2000022a 	.word	0x2000022a
 801592c:	2000573d 	.word	0x2000573d
 8015930:	20005701 	.word	0x20005701
 8015934:	200001f0 	.word	0x200001f0
 8015938:	200001b0 	.word	0x200001b0
 801593c:	200001e8 	.word	0x200001e8
 8015940:	40240000 	.word	0x40240000
 8015944:	080323ea 	.word	0x080323ea
 8015948:	2000022f 	.word	0x2000022f

0801594c <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nope, uint8_t grey)
{
 801594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015950:	ed2d 8b04 	vpush	{d8-d9}
 8015954:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8015956:	4bb6      	ldr	r3, [pc, #728]	; (8015c30 <GUI_Text_EbEr_Measure+0x2e4>)
 8015958:	4eb6      	ldr	r6, [pc, #728]	; (8015c34 <GUI_Text_EbEr_Measure+0x2e8>)
{
 801595a:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 801595c:	781a      	ldrb	r2, [r3, #0]
 801595e:	4bb6      	ldr	r3, [pc, #728]	; (8015c38 <GUI_Text_EbEr_Measure+0x2ec>)
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	429a      	cmp	r2, r3
{
 8015964:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8015966:	bf1c      	itt	ne
 8015968:	2300      	movne	r3, #0
 801596a:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 801596c:	2300      	movs	r3, #0
 801596e:	9303      	str	r3, [sp, #12]
 8015970:	9304      	str	r3, [sp, #16]
 8015972:	f88d 3014 	strb.w	r3, [sp, #20]
{
 8015976:	4605      	mov	r5, r0
 8015978:	460c      	mov	r4, r1
 801597a:	eef0 8a40 	vmov.f32	s17, s0
 801597e:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_EBER){
 8015982:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8015984:	f1b8 0f00 	cmp.w	r8, #0
 8015988:	d06f      	beq.n	8015a6a <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 801598a:	2b00      	cmp	r3, #0
 801598c:	d140      	bne.n	8015a10 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 801598e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015992:	f007 faff 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015996:	2063      	movs	r0, #99	; 0x63
 8015998:	f007 fb02 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801599c:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 80159a0:	48a6      	ldr	r0, [pc, #664]	; (8015c3c <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80159a2:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 80159a6:	f007 faef 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80159aa:	b2bf      	uxth	r7, r7
 80159ac:	fa1f f989 	uxth.w	r9, r9
 80159b0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80159b4:	f104 031a 	add.w	r3, r4, #26
 80159b8:	4638      	mov	r0, r7
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	464a      	mov	r2, r9
 80159be:	4621      	mov	r1, r4
 80159c0:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 80159c4:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80159c8:	f007 f8b5 	bl	801cb36 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 80159cc:	fa1f f888 	uxth.w	r8, r8
 80159d0:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80159d4:	4638      	mov	r0, r7
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	464a      	mov	r2, r9
 80159da:	4641      	mov	r1, r8
 80159dc:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80159e0:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 80159e4:	f007 f8a7 	bl	801cb36 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80159e8:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 80159ea:	232d      	movs	r3, #45	; 0x2d
 80159ec:	f88d 300c 	strb.w	r3, [sp, #12]
 80159f0:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80159f4:	aa03      	add	r2, sp, #12
 80159f6:	2303      	movs	r3, #3
 80159f8:	4621      	mov	r1, r4
 80159fa:	4638      	mov	r0, r7
 80159fc:	f007 fbe6 	bl	801d1cc <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015a00:	2303      	movs	r3, #3
 8015a02:	aa03      	add	r2, sp, #12
 8015a04:	4641      	mov	r1, r8
 8015a06:	4638      	mov	r0, r7
 8015a08:	f007 fbe0 	bl	801d1cc <TFT_DisplayString>
				old_nan_EBER = 1;
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8015a10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015a14:	f007 fabe 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015a18:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8015a1c:	4888      	ldr	r0, [pc, #544]	; (8015c40 <GUI_Text_EbEr_Measure+0x2f4>)
 8015a1e:	f007 fab3 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8015a22:	b2b6      	uxth	r6, r6
 8015a24:	f104 010c 	add.w	r1, r4, #12
 8015a28:	4630      	mov	r0, r6
 8015a2a:	2242      	movs	r2, #66	; 0x42
 8015a2c:	b289      	uxth	r1, r1
 8015a2e:	f007 fb75 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8015a32:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8015a36:	2252      	movs	r2, #82	; 0x52
 8015a38:	b289      	uxth	r1, r1
 8015a3a:	4630      	mov	r0, r6
 8015a3c:	f007 fb6e 	bl	801d11c <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015a40:	4880      	ldr	r0, [pc, #512]	; (8015c44 <GUI_Text_EbEr_Measure+0x2f8>)
 8015a42:	f007 faa1 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8015a46:	1ca1      	adds	r1, r4, #2
 8015a48:	4628      	mov	r0, r5
 8015a4a:	2224      	movs	r2, #36	; 0x24
 8015a4c:	b289      	uxth	r1, r1
 8015a4e:	f007 fb65 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 8015a52:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8015a56:	2224      	movs	r2, #36	; 0x24
 8015a58:	b289      	uxth	r1, r1
 8015a5a:	4628      	mov	r0, r5
 8015a5c:	f007 fb5e 	bl	801d11c <TFT_DrawChar>
}
 8015a60:	b007      	add	sp, #28
 8015a62:	ecbd 8b04 	vpop	{d8-d9}
 8015a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015a6a:	b1eb      	cbz	r3, 8015aa8 <GUI_Text_EbEr_Measure+0x15c>
 8015a6c:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8015a70:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8015a74:	f101 031a 	add.w	r3, r1, #26
 8015a78:	b2bf      	uxth	r7, r7
 8015a7a:	fa1f f989 	uxth.w	r9, r9
 8015a7e:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	464a      	mov	r2, r9
 8015a86:	4638      	mov	r0, r7
 8015a88:	f8cd b000 	str.w	fp, [sp]
 8015a8c:	f007 f853 	bl	801cb36 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8015a90:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015a94:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015a98:	f8cd b000 	str.w	fp, [sp]
 8015a9c:	b29b      	uxth	r3, r3
 8015a9e:	464a      	mov	r2, r9
 8015aa0:	b289      	uxth	r1, r1
 8015aa2:	4638      	mov	r0, r7
 8015aa4:	f007 f847 	bl	801cb36 <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 8015aa8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8015c48 <GUI_Text_EbEr_Measure+0x2fc>
 8015aac:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 8015ab0:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 8015ab2:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 8015ab6:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 8015ab8:	f7ea fd5e 	bl	8000578 <__aeabi_f2d>
 8015abc:	ec41 0b10 	vmov	d0, r0, r1
 8015ac0:	f00d fee2 	bl	8023888 <floor>
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	4b61      	ldr	r3, [pc, #388]	; (8015c4c <GUI_Text_EbEr_Measure+0x300>)
 8015ac8:	ec51 0b10 	vmov	r0, r1, d0
 8015acc:	f7ea fed2 	bl	8000874 <__aeabi_ddiv>
 8015ad0:	f7eb f89e 	bl	8000c10 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 8015ad4:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 8015ad8:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 8015adc:	ee17 0a90 	vmov	r0, s15
 8015ae0:	f7ea fd4a 	bl	8000578 <__aeabi_f2d>
 8015ae4:	ec41 0b10 	vmov	d0, r0, r1
 8015ae8:	f00d fece 	bl	8023888 <floor>
 8015aec:	2200      	movs	r2, #0
 8015aee:	ec51 0b10 	vmov	r0, r1, d0
 8015af2:	4b56      	ldr	r3, [pc, #344]	; (8015c4c <GUI_Text_EbEr_Measure+0x300>)
 8015af4:	f7ea febe 	bl	8000874 <__aeabi_ddiv>
 8015af8:	f7eb f88a 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8015b00:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015b04:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015b08:	45ba      	cmp	sl, r7
 8015b0a:	bf08      	it	eq
 8015b0c:	4618      	moveq	r0, r3
 8015b0e:	f007 fa41 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015b12:	2063      	movs	r0, #99	; 0x63
 8015b14:	f007 fa44 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015b18:	4848      	ldr	r0, [pc, #288]	; (8015c3c <GUI_Text_EbEr_Measure+0x2f0>)
 8015b1a:	f007 fa35 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 8015b1e:	ee18 0a90 	vmov	r0, s17
 8015b22:	f7ea fd29 	bl	8000578 <__aeabi_f2d>
 8015b26:	4602      	mov	r2, r0
 8015b28:	460b      	mov	r3, r1
 8015b2a:	a803      	add	r0, sp, #12
 8015b2c:	4948      	ldr	r1, [pc, #288]	; (8015c50 <GUI_Text_EbEr_Measure+0x304>)
 8015b2e:	f00a fef1 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 8015b32:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 8015b36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 8015b3a:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8015b3c:	2696      	movs	r6, #150	; 0x96
 8015b3e:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 8015b42:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 8015b44:	ee07 9a10 	vmov	s14, r9
 8015b48:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015b4c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8015b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b58:	db05      	blt.n	8015b66 <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 8015b5a:	3e17      	subs	r6, #23
			number++;
 8015b5c:	3701      	adds	r7, #1
			dec *= 10;
 8015b5e:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015b62:	b2f6      	uxtb	r6, r6
			number++;
 8015b64:	b2ff      	uxtb	r7, r7
 8015b66:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015b68:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015b6c:	d1ea      	bne.n	8015b44 <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 8015b6e:	4b39      	ldr	r3, [pc, #228]	; (8015c54 <GUI_Text_EbEr_Measure+0x308>)
 8015b70:	781a      	ldrb	r2, [r3, #0]
 8015b72:	42ba      	cmp	r2, r7
 8015b74:	469a      	mov	sl, r3
 8015b76:	d90d      	bls.n	8015b94 <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015b78:	2163      	movs	r1, #99	; 0x63
 8015b7a:	f104 0319 	add.w	r3, r4, #25
 8015b7e:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015b82:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015b86:	9100      	str	r1, [sp, #0]
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	b292      	uxth	r2, r2
 8015b8c:	4621      	mov	r1, r4
 8015b8e:	b280      	uxth	r0, r0
 8015b90:	f006 ffd1 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015b94:	19a8      	adds	r0, r5, r6
 8015b96:	2303      	movs	r3, #3
 8015b98:	aa03      	add	r2, sp, #12
 8015b9a:	4621      	mov	r1, r4
 8015b9c:	b280      	uxth	r0, r0
	old_num_EB = number;
 8015b9e:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ba2:	f007 fb13 	bl	801d1cc <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 8015ba6:	ee18 0a10 	vmov	r0, s16
 8015baa:	f7ea fce5 	bl	8000578 <__aeabi_f2d>
 8015bae:	4602      	mov	r2, r0
 8015bb0:	460b      	mov	r3, r1
 8015bb2:	a803      	add	r0, sp, #12
 8015bb4:	4926      	ldr	r1, [pc, #152]	; (8015c50 <GUI_Text_EbEr_Measure+0x304>)
 8015bb6:	f00a fead 	bl	8020914 <sprintf>
 8015bba:	2304      	movs	r3, #4
			dec *= 10;
 8015bbc:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 8015bbe:	ee07 9a90 	vmov	s15, r9
 8015bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015bc6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015bca:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd2:	db07      	blt.n	8015be4 <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 8015bd4:	3e17      	subs	r6, #23
			number++;
 8015bd6:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015bda:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015bde:	b2f6      	uxtb	r6, r6
			number++;
 8015be0:	fa5f f888 	uxtb.w	r8, r8
 8015be4:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8015be6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015bea:	d1e8      	bne.n	8015bbe <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 8015bec:	4f1a      	ldr	r7, [pc, #104]	; (8015c58 <GUI_Text_EbEr_Measure+0x30c>)
 8015bee:	783b      	ldrb	r3, [r7, #0]
 8015bf0:	4543      	cmp	r3, r8
 8015bf2:	d911      	bls.n	8015c18 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015bf4:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015bf8:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015bfc:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015c00:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015c04:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015c08:	f8cd e000 	str.w	lr, [sp]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	b292      	uxth	r2, r2
 8015c10:	b289      	uxth	r1, r1
 8015c12:	b280      	uxth	r0, r0
 8015c14:	f006 ff8f 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015c18:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015c1c:	19a8      	adds	r0, r5, r6
 8015c1e:	2303      	movs	r3, #3
 8015c20:	aa03      	add	r2, sp, #12
 8015c22:	b289      	uxth	r1, r1
 8015c24:	b280      	uxth	r0, r0
	old_num_ER = number;
 8015c26:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015c2a:	f007 facf 	bl	801d1cc <TFT_DisplayString>
 8015c2e:	e6ef      	b.n	8015a10 <GUI_Text_EbEr_Measure+0xc4>
 8015c30:	2000022a 	.word	0x2000022a
 8015c34:	20005734 	.word	0x20005734
 8015c38:	20005701 	.word	0x20005701
 8015c3c:	200001f0 	.word	0x200001f0
 8015c40:	200001b0 	.word	0x200001b0
 8015c44:	200001e8 	.word	0x200001e8
 8015c48:	42c80000 	.word	0x42c80000
 8015c4c:	40590000 	.word	0x40590000
 8015c50:	080323ea 	.word	0x080323ea
 8015c54:	2000023f 	.word	0x2000023f
 8015c58:	20000240 	.word	0x20000240

08015c5c <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nope, uint8_t grey)
{
 8015c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c60:	ed2d 8b04 	vpush	{d8-d9}
 8015c64:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 8015c66:	4bb8      	ldr	r3, [pc, #736]	; (8015f48 <GUI_Text_LbLr_Measure+0x2ec>)
 8015c68:	4eb8      	ldr	r6, [pc, #736]	; (8015f4c <GUI_Text_LbLr_Measure+0x2f0>)
{
 8015c6a:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 8015c6c:	781a      	ldrb	r2, [r3, #0]
 8015c6e:	4bb8      	ldr	r3, [pc, #736]	; (8015f50 <GUI_Text_LbLr_Measure+0x2f4>)
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	429a      	cmp	r2, r3
{
 8015c74:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 8015c76:	bf1c      	itt	ne
 8015c78:	2300      	movne	r3, #0
 8015c7a:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	9303      	str	r3, [sp, #12]
 8015c80:	9304      	str	r3, [sp, #16]
 8015c82:	f88d 3014 	strb.w	r3, [sp, #20]
{
 8015c86:	4605      	mov	r5, r0
 8015c88:	460c      	mov	r4, r1
 8015c8a:	eef0 8a40 	vmov.f32	s17, s0
 8015c8e:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nope) 
		{	
			if(!old_nan_LBLR){
 8015c92:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8015c94:	f1b8 0f00 	cmp.w	r8, #0
 8015c98:	d072      	beq.n	8015d80 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d140      	bne.n	8015d20 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8015c9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ca2:	f007 f977 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015ca6:	2063      	movs	r0, #99	; 0x63
 8015ca8:	f007 f97a 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015cac:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8015cb0:	48a8      	ldr	r0, [pc, #672]	; (8015f54 <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015cb2:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 8015cb6:	f007 f967 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015cba:	b2bf      	uxth	r7, r7
 8015cbc:	fa1f f989 	uxth.w	r9, r9
 8015cc0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8015cc4:	f104 031a 	add.w	r3, r4, #26
 8015cc8:	4638      	mov	r0, r7
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	464a      	mov	r2, r9
 8015cce:	4621      	mov	r1, r4
 8015cd0:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015cd4:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015cd8:	f006 ff2d 	bl	801cb36 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015cdc:	fa1f f888 	uxth.w	r8, r8
 8015ce0:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015ce4:	4638      	mov	r0, r7
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	464a      	mov	r2, r9
 8015cea:	4641      	mov	r1, r8
 8015cec:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015cf0:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015cf4:	f006 ff1f 	bl	801cb36 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015cf8:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8015cfa:	232d      	movs	r3, #45	; 0x2d
 8015cfc:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d00:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d04:	aa03      	add	r2, sp, #12
 8015d06:	2303      	movs	r3, #3
 8015d08:	4621      	mov	r1, r4
 8015d0a:	4638      	mov	r0, r7
 8015d0c:	f007 fa5e 	bl	801d1cc <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015d10:	2303      	movs	r3, #3
 8015d12:	aa03      	add	r2, sp, #12
 8015d14:	4641      	mov	r1, r8
 8015d16:	4638      	mov	r0, r7
 8015d18:	f007 fa58 	bl	801d1cc <TFT_DisplayString>
				old_nan_LBLR = 1;
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 8015d20:	488c      	ldr	r0, [pc, #560]	; (8015f54 <GUI_Text_LbLr_Measure+0x2f8>)
 8015d22:	f007 f931 	bl	801cf88 <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 8015d26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015d2a:	f007 f933 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015d2e:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8015d32:	4889      	ldr	r0, [pc, #548]	; (8015f58 <GUI_Text_LbLr_Measure+0x2fc>)
 8015d34:	f007 f928 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8015d38:	b2b6      	uxth	r6, r6
 8015d3a:	f104 010c 	add.w	r1, r4, #12
 8015d3e:	4630      	mov	r0, r6
 8015d40:	2242      	movs	r2, #66	; 0x42
 8015d42:	b289      	uxth	r1, r1
 8015d44:	f007 f9ea 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8015d48:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8015d4c:	2252      	movs	r2, #82	; 0x52
 8015d4e:	b289      	uxth	r1, r1
 8015d50:	4630      	mov	r0, r6
 8015d52:	f007 f9e3 	bl	801d11c <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015d56:	4881      	ldr	r0, [pc, #516]	; (8015f5c <GUI_Text_LbLr_Measure+0x300>)
 8015d58:	f007 f916 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8015d5c:	1ca1      	adds	r1, r4, #2
 8015d5e:	4628      	mov	r0, r5
 8015d60:	222b      	movs	r2, #43	; 0x2b
 8015d62:	b289      	uxth	r1, r1
 8015d64:	f007 f9da 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 8015d68:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8015d6c:	222b      	movs	r2, #43	; 0x2b
 8015d6e:	b289      	uxth	r1, r1
 8015d70:	4628      	mov	r0, r5
 8015d72:	f007 f9d3 	bl	801d11c <TFT_DrawChar>
}
 8015d76:	b007      	add	sp, #28
 8015d78:	ecbd 8b04 	vpop	{d8-d9}
 8015d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015d80:	b1eb      	cbz	r3, 8015dbe <GUI_Text_LbLr_Measure+0x162>
 8015d82:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8015d86:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8015d8a:	f101 031a 	add.w	r3, r1, #26
 8015d8e:	b2bf      	uxth	r7, r7
 8015d90:	fa1f f989 	uxth.w	r9, r9
 8015d94:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	464a      	mov	r2, r9
 8015d9c:	4638      	mov	r0, r7
 8015d9e:	f8cd b000 	str.w	fp, [sp]
 8015da2:	f006 fec8 	bl	801cb36 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8015da6:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015daa:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015dae:	f8cd b000 	str.w	fp, [sp]
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	464a      	mov	r2, r9
 8015db6:	b289      	uxth	r1, r1
 8015db8:	4638      	mov	r0, r7
 8015dba:	f006 febc 	bl	801cb36 <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 8015dbe:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8015f60 <GUI_Text_LbLr_Measure+0x304>
 8015dc2:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 8015dc6:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8015dc8:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 8015dcc:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 8015dce:	f7ea fbd3 	bl	8000578 <__aeabi_f2d>
 8015dd2:	ec41 0b10 	vmov	d0, r0, r1
 8015dd6:	f00d fd57 	bl	8023888 <floor>
 8015dda:	2200      	movs	r2, #0
 8015ddc:	4b61      	ldr	r3, [pc, #388]	; (8015f64 <GUI_Text_LbLr_Measure+0x308>)
 8015dde:	ec51 0b10 	vmov	r0, r1, d0
 8015de2:	f7ea fd47 	bl	8000874 <__aeabi_ddiv>
 8015de6:	f7ea ff13 	bl	8000c10 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 8015dea:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 8015dee:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 8015df2:	ee17 0a90 	vmov	r0, s15
 8015df6:	f7ea fbbf 	bl	8000578 <__aeabi_f2d>
 8015dfa:	ec41 0b10 	vmov	d0, r0, r1
 8015dfe:	f00d fd43 	bl	8023888 <floor>
 8015e02:	2200      	movs	r2, #0
 8015e04:	ec51 0b10 	vmov	r0, r1, d0
 8015e08:	4b56      	ldr	r3, [pc, #344]	; (8015f64 <GUI_Text_LbLr_Measure+0x308>)
 8015e0a:	f7ea fd33 	bl	8000874 <__aeabi_ddiv>
 8015e0e:	f7ea feff 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 8015e16:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015e1a:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015e1e:	45ba      	cmp	sl, r7
 8015e20:	bf08      	it	eq
 8015e22:	4618      	moveq	r0, r3
 8015e24:	f007 f8b6 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015e28:	2063      	movs	r0, #99	; 0x63
 8015e2a:	f007 f8b9 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015e2e:	4849      	ldr	r0, [pc, #292]	; (8015f54 <GUI_Text_LbLr_Measure+0x2f8>)
 8015e30:	f007 f8aa 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 8015e34:	ee18 0a90 	vmov	r0, s17
 8015e38:	f7ea fb9e 	bl	8000578 <__aeabi_f2d>
 8015e3c:	4602      	mov	r2, r0
 8015e3e:	460b      	mov	r3, r1
 8015e40:	a803      	add	r0, sp, #12
 8015e42:	4949      	ldr	r1, [pc, #292]	; (8015f68 <GUI_Text_LbLr_Measure+0x30c>)
 8015e44:	f00a fd66 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 8015e48:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 8015e4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 8015e50:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8015e52:	2696      	movs	r6, #150	; 0x96
 8015e54:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 8015e58:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 8015e5a:	ee07 9a10 	vmov	s14, r9
 8015e5e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015e62:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8015e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e6e:	db05      	blt.n	8015e7c <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 8015e70:	3e17      	subs	r6, #23
			number++;
 8015e72:	3701      	adds	r7, #1
			dec *= 10;
 8015e74:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015e78:	b2f6      	uxtb	r6, r6
			number++;
 8015e7a:	b2ff      	uxtb	r7, r7
 8015e7c:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015e7e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015e82:	d1ea      	bne.n	8015e5a <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 8015e84:	4b39      	ldr	r3, [pc, #228]	; (8015f6c <GUI_Text_LbLr_Measure+0x310>)
 8015e86:	781a      	ldrb	r2, [r3, #0]
 8015e88:	42ba      	cmp	r2, r7
 8015e8a:	469a      	mov	sl, r3
 8015e8c:	d90d      	bls.n	8015eaa <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015e8e:	2163      	movs	r1, #99	; 0x63
 8015e90:	f104 0319 	add.w	r3, r4, #25
 8015e94:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015e98:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015e9c:	9100      	str	r1, [sp, #0]
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	b292      	uxth	r2, r2
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	b280      	uxth	r0, r0
 8015ea6:	f006 fe46 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015eaa:	19a8      	adds	r0, r5, r6
 8015eac:	2303      	movs	r3, #3
 8015eae:	aa03      	add	r2, sp, #12
 8015eb0:	4621      	mov	r1, r4
 8015eb2:	b280      	uxth	r0, r0
	old_num_LB = number;
 8015eb4:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015eb8:	f007 f988 	bl	801d1cc <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 8015ebc:	ee18 0a10 	vmov	r0, s16
 8015ec0:	f7ea fb5a 	bl	8000578 <__aeabi_f2d>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	460b      	mov	r3, r1
 8015ec8:	a803      	add	r0, sp, #12
 8015eca:	4927      	ldr	r1, [pc, #156]	; (8015f68 <GUI_Text_LbLr_Measure+0x30c>)
 8015ecc:	f00a fd22 	bl	8020914 <sprintf>
 8015ed0:	2304      	movs	r3, #4
			dec *= 10;
 8015ed2:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 8015ed4:	ee07 9a90 	vmov	s15, r9
 8015ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015edc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015ee0:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee8:	db07      	blt.n	8015efa <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 8015eea:	3e17      	subs	r6, #23
			number++;
 8015eec:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015ef0:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015ef4:	b2f6      	uxtb	r6, r6
			number++;
 8015ef6:	fa5f f888 	uxtb.w	r8, r8
 8015efa:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015efc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015f00:	d1e8      	bne.n	8015ed4 <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 8015f02:	4f1b      	ldr	r7, [pc, #108]	; (8015f70 <GUI_Text_LbLr_Measure+0x314>)
 8015f04:	783b      	ldrb	r3, [r7, #0]
 8015f06:	4543      	cmp	r3, r8
 8015f08:	d911      	bls.n	8015f2e <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015f0a:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015f0e:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015f12:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015f16:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015f1a:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015f1e:	f8cd e000 	str.w	lr, [sp]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	b292      	uxth	r2, r2
 8015f26:	b289      	uxth	r1, r1
 8015f28:	b280      	uxth	r0, r0
 8015f2a:	f006 fe04 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015f2e:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015f32:	19a8      	adds	r0, r5, r6
 8015f34:	2303      	movs	r3, #3
 8015f36:	aa03      	add	r2, sp, #12
 8015f38:	b289      	uxth	r1, r1
 8015f3a:	b280      	uxth	r0, r0
	old_num_LR = number;
 8015f3c:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015f40:	f007 f944 	bl	801d1cc <TFT_DisplayString>
 8015f44:	e6ec      	b.n	8015d20 <GUI_Text_LbLr_Measure+0xc4>
 8015f46:	bf00      	nop
 8015f48:	2000022a 	.word	0x2000022a
 8015f4c:	20005737 	.word	0x20005737
 8015f50:	20005701 	.word	0x20005701
 8015f54:	200001f0 	.word	0x200001f0
 8015f58:	200001b0 	.word	0x200001b0
 8015f5c:	200001e8 	.word	0x200001e8
 8015f60:	42c80000 	.word	0x42c80000
 8015f64:	40590000 	.word	0x40590000
 8015f68:	080323ea 	.word	0x080323ea
 8015f6c:	20000242 	.word	0x20000242
 8015f70:	20000243 	.word	0x20000243

08015f74 <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{
 8015f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f78:	ed2d 8b02 	vpush	{d8}
 8015f7c:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015f7e:	4a59      	ldr	r2, [pc, #356]	; (80160e4 <GUI_Text_S_P_Measure+0x170>)
 8015f80:	4f59      	ldr	r7, [pc, #356]	; (80160e8 <GUI_Text_S_P_Measure+0x174>)
{
 8015f82:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015f84:	7811      	ldrb	r1, [r2, #0]
 8015f86:	4a59      	ldr	r2, [pc, #356]	; (80160ec <GUI_Text_S_P_Measure+0x178>)
 8015f88:	7812      	ldrb	r2, [r2, #0]
 8015f8a:	4291      	cmp	r1, r2
{
 8015f8c:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015f8e:	bf1c      	itt	ne
 8015f90:	2200      	movne	r2, #0
 8015f92:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 8015f94:	2200      	movs	r2, #0
{
 8015f96:	4605      	mov	r5, r0
 8015f98:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 8015f9c:	9203      	str	r2, [sp, #12]
 8015f9e:	9204      	str	r2, [sp, #16]
 8015fa0:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 8015fa4:	2e00      	cmp	r6, #0
 8015fa6:	d04c      	beq.n	8016042 <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 8015fa8:	783b      	ldrb	r3, [r7, #0]
 8015faa:	bb33      	cbnz	r3, 8015ffa <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 8015fac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015fb0:	f006 fff0 	bl	801cf94 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015fb4:	2063      	movs	r0, #99	; 0x63
 8015fb6:	f006 fff3 	bl	801cfa0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015fba:	484d      	ldr	r0, [pc, #308]	; (80160f0 <GUI_Text_S_P_Measure+0x17c>)
 8015fbc:	f006 ffe4 	bl	801cf88 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015fc0:	2163      	movs	r1, #99	; 0x63
 8015fc2:	f104 031a 	add.w	r3, r4, #26
 8015fc6:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8015fca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015fce:	9100      	str	r1, [sp, #0]
 8015fd0:	b29b      	uxth	r3, r3
 8015fd2:	b292      	uxth	r2, r2
 8015fd4:	4621      	mov	r1, r4
 8015fd6:	b280      	uxth	r0, r0
 8015fd8:	f006 fdad 	bl	801cb36 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015fdc:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015fde:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8015fe2:	f88d 300c 	strb.w	r3, [sp, #12]
 8015fe6:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015fea:	aa03      	add	r2, sp, #12
 8015fec:	2303      	movs	r3, #3
 8015fee:	4621      	mov	r1, r4
 8015ff0:	b280      	uxth	r0, r0
 8015ff2:	f007 f8eb 	bl	801d1cc <TFT_DisplayString>
				old_nan_SP = 1;
 8015ff6:	2301      	movs	r3, #1
 8015ff8:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 8015ffa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ffe:	f006 ffc9 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8016002:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 8016004:	483a      	ldr	r0, [pc, #232]	; (80160f0 <GUI_Text_S_P_Measure+0x17c>)
 8016006:	f006 ffbf 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 801600a:	b2a4      	uxth	r4, r4
 801600c:	f105 0016 	add.w	r0, r5, #22
 8016010:	4621      	mov	r1, r4
 8016012:	222f      	movs	r2, #47	; 0x2f
 8016014:	b280      	uxth	r0, r0
 8016016:	f007 f881 	bl	801d11c <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 801601a:	4836      	ldr	r0, [pc, #216]	; (80160f4 <GUI_Text_S_P_Measure+0x180>)
 801601c:	f006 ffb4 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8016020:	4621      	mov	r1, r4
 8016022:	4628      	mov	r0, r5
 8016024:	2232      	movs	r2, #50	; 0x32
 8016026:	f007 f879 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 801602a:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 801602e:	222f      	movs	r2, #47	; 0x2f
 8016030:	4621      	mov	r1, r4
 8016032:	b280      	uxth	r0, r0
 8016034:	f007 f872 	bl	801d11c <TFT_DrawChar>
}
 8016038:	b006      	add	sp, #24
 801603a:	ecbd 8b02 	vpop	{d8}
 801603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016042:	f249 41d2 	movw	r1, #38098	; 0x94d2
 8016046:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801604a:	2b00      	cmp	r3, #0
 801604c:	bf18      	it	ne
 801604e:	4608      	movne	r0, r1
	old_nan_SP = 0;
 8016050:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016052:	f006 ff9f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016056:	2063      	movs	r0, #99	; 0x63
 8016058:	f006 ffa2 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801605c:	4824      	ldr	r0, [pc, #144]	; (80160f0 <GUI_Text_S_P_Measure+0x17c>)
 801605e:	f006 ff93 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 8016062:	ee18 0a10 	vmov	r0, s16
 8016066:	f7ea fa87 	bl	8000578 <__aeabi_f2d>
 801606a:	4602      	mov	r2, r0
 801606c:	460b      	mov	r3, r1
 801606e:	a803      	add	r0, sp, #12
 8016070:	4921      	ldr	r1, [pc, #132]	; (80160f8 <GUI_Text_S_P_Measure+0x184>)
 8016072:	f00a fc4f 	bl	8020914 <sprintf>
	uint32_t dec = 10;
 8016076:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 8016078:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 801607a:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 801607c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8016080:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8016082:	ee07 2a10 	vmov	s14, r2
 8016086:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801608a:	ee88 7a26 	vdiv.f32	s14, s16, s13
 801608e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016096:	db04      	blt.n	80160a2 <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 8016098:	3f17      	subs	r7, #23
			number++;
 801609a:	3601      	adds	r6, #1
			dec *= 10;
 801609c:	434a      	muls	r2, r1
			delta_pos-=23;
 801609e:	b2ff      	uxtb	r7, r7
			number++;
 80160a0:	b2f6      	uxtb	r6, r6
 80160a2:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80160a4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80160a8:	d1eb      	bne.n	8016082 <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 80160aa:	4b14      	ldr	r3, [pc, #80]	; (80160fc <GUI_Text_S_P_Measure+0x188>)
 80160ac:	781a      	ldrb	r2, [r3, #0]
 80160ae:	42b2      	cmp	r2, r6
 80160b0:	4698      	mov	r8, r3
 80160b2:	d90d      	bls.n	80160d0 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80160b4:	2163      	movs	r1, #99	; 0x63
 80160b6:	f104 0319 	add.w	r3, r4, #25
 80160ba:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80160be:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80160c2:	9100      	str	r1, [sp, #0]
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	b292      	uxth	r2, r2
 80160c8:	4621      	mov	r1, r4
 80160ca:	b280      	uxth	r0, r0
 80160cc:	f006 fd33 	bl	801cb36 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160d0:	19e8      	adds	r0, r5, r7
 80160d2:	2303      	movs	r3, #3
 80160d4:	aa03      	add	r2, sp, #12
 80160d6:	4621      	mov	r1, r4
 80160d8:	b280      	uxth	r0, r0
	old_num_SP = number;
 80160da:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160de:	f007 f875 	bl	801d1cc <TFT_DisplayString>
 80160e2:	e78a      	b.n	8015ffa <GUI_Text_S_P_Measure+0x86>
 80160e4:	2000022a 	.word	0x2000022a
 80160e8:	2000573c 	.word	0x2000573c
 80160ec:	20005701 	.word	0x20005701
 80160f0:	200001f0 	.word	0x200001f0
 80160f4:	200001e8 	.word	0x200001e8
 80160f8:	080323ef 	.word	0x080323ef
 80160fc:	20000244 	.word	0x20000244

08016100 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nope, uint8_t grey)
{
 8016100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016104:	b089      	sub	sp, #36	; 0x24
 8016106:	461f      	mov	r7, r3
 8016108:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801610c:	9304      	str	r3, [sp, #16]
 801610e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016112:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nope){
 8016114:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8016118:	f04f 0300 	mov.w	r3, #0
{
 801611c:	4604      	mov	r4, r0
 801611e:	460d      	mov	r5, r1
 8016120:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8016122:	9306      	str	r3, [sp, #24]
 8016124:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nope){
 8016128:	db03      	blt.n	8016132 <GUI_Text_LAB_Measure+0x32>
 801612a:	9b03      	ldr	r3, [sp, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	f000 80a9 	beq.w	8016284 <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8016132:	4b4e      	ldr	r3, [pc, #312]	; (801626c <GUI_Text_LAB_Measure+0x16c>)
 8016134:	781a      	ldrb	r2, [r3, #0]
 8016136:	469a      	mov	sl, r3
 8016138:	b96a      	cbnz	r2, 8016156 <GUI_Text_LAB_Measure+0x56>
 801613a:	2163      	movs	r1, #99	; 0x63
 801613c:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8016140:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8016144:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016148:	9100      	str	r1, [sp, #0]
 801614a:	b29b      	uxth	r3, r3
 801614c:	b292      	uxth	r2, r2
 801614e:	4629      	mov	r1, r5
 8016150:	b280      	uxth	r0, r0
 8016152:	f006 fcf0 	bl	801cb36 <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8016156:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801615a:	f006 ff1b 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801615e:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016162:	2063      	movs	r0, #99	; 0x63
 8016164:	f006 ff1c 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016168:	fa1f f989 	uxth.w	r9, r9
 801616c:	4840      	ldr	r0, [pc, #256]	; (8016270 <GUI_Text_LAB_Measure+0x170>)
 801616e:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 8016172:	f006 ff09 	bl	801cf88 <TFT_SetFont>
 8016176:	fa1f f888 	uxth.w	r8, r8
 801617a:	222d      	movs	r2, #45	; 0x2d
 801617c:	4629      	mov	r1, r5
 801617e:	4648      	mov	r0, r9
 8016180:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 8016184:	f006 ffca 	bl	801d11c <TFT_DrawChar>
 8016188:	b2b6      	uxth	r6, r6
 801618a:	2220      	movs	r2, #32
 801618c:	4629      	mov	r1, r5
 801618e:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016190:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016194:	f006 ffc2 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016198:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801619a:	222d      	movs	r2, #45	; 0x2d
 801619c:	4629      	mov	r1, r5
 801619e:	4630      	mov	r0, r6
 80161a0:	f006 ffbc 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80161a4:	4639      	mov	r1, r7
 80161a6:	222d      	movs	r2, #45	; 0x2d
 80161a8:	4648      	mov	r0, r9
 80161aa:	f006 ffb7 	bl	801d11c <TFT_DrawChar>
 80161ae:	4639      	mov	r1, r7
 80161b0:	2220      	movs	r2, #32
 80161b2:	4640      	mov	r0, r8
 80161b4:	f006 ffb2 	bl	801d11c <TFT_DrawChar>
 80161b8:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 80161ba:	f105 0746 	add.w	r7, r5, #70	; 0x46
 80161be:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80161c0:	222d      	movs	r2, #45	; 0x2d
 80161c2:	4630      	mov	r0, r6
 80161c4:	f006 ffaa 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 80161c8:	222d      	movs	r2, #45	; 0x2d
 80161ca:	4639      	mov	r1, r7
 80161cc:	4648      	mov	r0, r9
 80161ce:	f006 ffa5 	bl	801d11c <TFT_DrawChar>
 80161d2:	2220      	movs	r2, #32
 80161d4:	4639      	mov	r1, r7
 80161d6:	4640      	mov	r0, r8
 80161d8:	f006 ffa0 	bl	801d11c <TFT_DrawChar>
 80161dc:	222d      	movs	r2, #45	; 0x2d
 80161de:	4639      	mov	r1, r7
 80161e0:	4630      	mov	r0, r6
 80161e2:	f006 ff9b 	bl	801d11c <TFT_DrawChar>
		old_nan = 1;
 80161e6:	2301      	movs	r3, #1
 80161e8:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 80161ec:	4b21      	ldr	r3, [pc, #132]	; (8016274 <GUI_Text_LAB_Measure+0x174>)
 80161ee:	781a      	ldrb	r2, [r3, #0]
 80161f0:	4b21      	ldr	r3, [pc, #132]	; (8016278 <GUI_Text_LAB_Measure+0x178>)
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	4293      	cmp	r3, r2
 80161f6:	d101      	bne.n	80161fc <GUI_Text_LAB_Measure+0xfc>
 80161f8:	2b05      	cmp	r3, #5
 80161fa:	d134      	bne.n	8016266 <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 80161fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8016200:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 8016204:	f006 fec6 	bl	801cf94 <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8016208:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 801620a:	481c      	ldr	r0, [pc, #112]	; (801627c <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 801620c:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8016210:	f006 feba 	bl	801cf88 <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 8016214:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8016218:	222a      	movs	r2, #42	; 0x2a
 801621a:	4629      	mov	r1, r5
 801621c:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 801621e:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 8016222:	f006 ff7b 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8016226:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8016228:	222a      	movs	r2, #42	; 0x2a
 801622a:	4641      	mov	r1, r8
 801622c:	4630      	mov	r0, r6
 801622e:	f006 ff75 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8016232:	222a      	movs	r2, #42	; 0x2a
 8016234:	4639      	mov	r1, r7
 8016236:	4630      	mov	r0, r6
 8016238:	f006 ff70 	bl	801d11c <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 801623c:	480c      	ldr	r0, [pc, #48]	; (8016270 <GUI_Text_LAB_Measure+0x170>)
 801623e:	f006 fea3 	bl	801cf88 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 8016242:	222b      	movs	r2, #43	; 0x2b
 8016244:	4629      	mov	r1, r5
 8016246:	4620      	mov	r0, r4
 8016248:	f006 ff68 	bl	801d11c <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 801624c:	480c      	ldr	r0, [pc, #48]	; (8016280 <GUI_Text_LAB_Measure+0x180>)
 801624e:	f006 fe9b 	bl	801cf88 <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 8016252:	2220      	movs	r2, #32
 8016254:	4641      	mov	r1, r8
 8016256:	4620      	mov	r0, r4
 8016258:	f006 ff60 	bl	801d11c <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 801625c:	2221      	movs	r2, #33	; 0x21
 801625e:	4639      	mov	r1, r7
 8016260:	4620      	mov	r0, r4
 8016262:	f006 ff5b 	bl	801d11c <TFT_DrawChar>
}	
 8016266:	b009      	add	sp, #36	; 0x24
 8016268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801626c:	20005731 	.word	0x20005731
 8016270:	200001e8 	.word	0x200001e8
 8016274:	2000022a 	.word	0x2000022a
 8016278:	20005701 	.word	0x20005701
 801627c:	200001f0 	.word	0x200001f0
 8016280:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016284:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8016288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801628c:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8016290:	2800      	cmp	r0, #0
 8016292:	bf14      	ite	ne
 8016294:	4610      	movne	r0, r2
 8016296:	4618      	moveq	r0, r3
 8016298:	f006 fe7c 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801629c:	2063      	movs	r0, #99	; 0x63
 801629e:	f006 fe7f 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80162a2:	488e      	ldr	r0, [pc, #568]	; (80164dc <GUI_Text_LAB_Measure+0x3dc>)
 80162a4:	f006 fe70 	bl	801cf88 <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 80162a8:	f1b8 0f00 	cmp.w	r8, #0
 80162ac:	bfbd      	ittte	lt
 80162ae:	f1c8 0800 	rsblt	r8, r8, #0
 80162b2:	fa0f f888 	sxthlt.w	r8, r8
 80162b6:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80162b8:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 80162ba:	4989      	ldr	r1, [pc, #548]	; (80164e0 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80162bc:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 80162be:	4642      	mov	r2, r8
 80162c0:	a806      	add	r0, sp, #24
 80162c2:	f00a fb27 	bl	8020914 <sprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80162c6:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 80162ca:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 80162ce:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80162d2:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 80162d4:	fbb8 f0fa 	udiv	r0, r8, sl
 80162d8:	f7ea f92c 	bl	8000534 <__aeabi_ui2d>
 80162dc:	2200      	movs	r2, #0
 80162de:	4b81      	ldr	r3, [pc, #516]	; (80164e4 <GUI_Text_LAB_Measure+0x3e4>)
 80162e0:	f7ea fc24 	bl	8000b2c <__aeabi_dcmpge>
 80162e4:	b140      	cbz	r0, 80162f8 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 80162e6:	230a      	movs	r3, #10
			delta_pos-=23;
 80162e8:	3e17      	subs	r6, #23
			number++;
 80162ea:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 80162ee:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80162f2:	b2f6      	uxtb	r6, r6
			number++;
 80162f4:	fa5f f989 	uxtb.w	r9, r9
 80162f8:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 80162fc:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8016300:	d1e8      	bne.n	80162d4 <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 8016302:	4b79      	ldr	r3, [pc, #484]	; (80164e8 <GUI_Text_LAB_Measure+0x3e8>)
 8016304:	781a      	ldrb	r2, [r3, #0]
 8016306:	454a      	cmp	r2, r9
 8016308:	4698      	mov	r8, r3
 801630a:	d803      	bhi.n	8016314 <GUI_Text_LAB_Measure+0x214>
 801630c:	4b77      	ldr	r3, [pc, #476]	; (80164ec <GUI_Text_LAB_Measure+0x3ec>)
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	2b01      	cmp	r3, #1
 8016312:	d10d      	bne.n	8016330 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 8016314:	2163      	movs	r1, #99	; 0x63
 8016316:	f105 0319 	add.w	r3, r5, #25
 801631a:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801631e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016322:	9100      	str	r1, [sp, #0]
 8016324:	b29b      	uxth	r3, r3
 8016326:	b292      	uxth	r2, r2
 8016328:	4629      	mov	r1, r5
 801632a:	b280      	uxth	r0, r0
 801632c:	f006 fc03 	bl	801cb36 <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8016330:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 8016332:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8016336:	b13b      	cbz	r3, 8016348 <GUI_Text_LAB_Measure+0x248>
 8016338:	f1a4 0012 	sub.w	r0, r4, #18
 801633c:	4430      	add	r0, r6
 801633e:	222d      	movs	r2, #45	; 0x2d
 8016340:	4629      	mov	r1, r5
 8016342:	b280      	uxth	r0, r0
 8016344:	f006 feea 	bl	801d11c <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016348:	19a0      	adds	r0, r4, r6
 801634a:	2303      	movs	r3, #3
 801634c:	aa06      	add	r2, sp, #24
 801634e:	4629      	mov	r1, r5
 8016350:	b280      	uxth	r0, r0
 8016352:	f006 ff3b 	bl	801d1cc <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8016356:	2f00      	cmp	r7, #0
 8016358:	bfbc      	itt	lt
 801635a:	427f      	neglt	r7, r7
 801635c:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 801635e:	485f      	ldr	r0, [pc, #380]	; (80164dc <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8016360:	bfb4      	ite	lt
 8016362:	f04f 0b01 	movlt.w	fp, #1
 8016366:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 801636a:	f006 fe0d 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 801636e:	463a      	mov	r2, r7
 8016370:	495b      	ldr	r1, [pc, #364]	; (80164e0 <GUI_Text_LAB_Measure+0x3e0>)
 8016372:	a806      	add	r0, sp, #24
 8016374:	f00a face 	bl	8020914 <sprintf>
	number = 0;
 8016378:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 801637c:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 8016380:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 8016384:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 8016386:	fbb7 f0fa 	udiv	r0, r7, sl
 801638a:	f7ea f8d3 	bl	8000534 <__aeabi_ui2d>
 801638e:	2200      	movs	r2, #0
 8016390:	4b54      	ldr	r3, [pc, #336]	; (80164e4 <GUI_Text_LAB_Measure+0x3e4>)
 8016392:	f7ea fbcb 	bl	8000b2c <__aeabi_dcmpge>
 8016396:	b140      	cbz	r0, 80163aa <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 8016398:	230a      	movs	r3, #10
			delta_pos-=23;
 801639a:	3e17      	subs	r6, #23
			number++;
 801639c:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80163a0:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80163a4:	b2f6      	uxtb	r6, r6
			number++;
 80163a6:	fa5f f888 	uxtb.w	r8, r8
 80163aa:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 80163ae:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 80163b2:	d1e8      	bne.n	8016386 <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 80163b4:	4b4e      	ldr	r3, [pc, #312]	; (80164f0 <GUI_Text_LAB_Measure+0x3f0>)
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	4543      	cmp	r3, r8
 80163ba:	f105 0723 	add.w	r7, r5, #35	; 0x23
 80163be:	d803      	bhi.n	80163c8 <GUI_Text_LAB_Measure+0x2c8>
 80163c0:	4b4a      	ldr	r3, [pc, #296]	; (80164ec <GUI_Text_LAB_Measure+0x3ec>)
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d10d      	bne.n	80163e4 <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 80163c8:	2163      	movs	r1, #99	; 0x63
 80163ca:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 80163ce:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80163d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80163d6:	9100      	str	r1, [sp, #0]
 80163d8:	b29b      	uxth	r3, r3
 80163da:	b292      	uxth	r2, r2
 80163dc:	b2b9      	uxth	r1, r7
 80163de:	b280      	uxth	r0, r0
 80163e0:	f006 fba9 	bl	801cb36 <TFT_FillRectangle>
	old_num_A = number;
 80163e4:	4b42      	ldr	r3, [pc, #264]	; (80164f0 <GUI_Text_LAB_Measure+0x3f0>)
 80163e6:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 80163ea:	f1bb 0f00 	cmp.w	fp, #0
 80163ee:	d007      	beq.n	8016400 <GUI_Text_LAB_Measure+0x300>
 80163f0:	f1a4 0012 	sub.w	r0, r4, #18
 80163f4:	4430      	add	r0, r6
 80163f6:	222d      	movs	r2, #45	; 0x2d
 80163f8:	b2b9      	uxth	r1, r7
 80163fa:	b280      	uxth	r0, r0
 80163fc:	f006 fe8e 	bl	801d11c <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016400:	19a0      	adds	r0, r4, r6
 8016402:	b2b9      	uxth	r1, r7
 8016404:	aa06      	add	r2, sp, #24
 8016406:	2303      	movs	r3, #3
 8016408:	b280      	uxth	r0, r0
 801640a:	f006 fedf 	bl	801d1cc <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 801640e:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8016410:	4832      	ldr	r0, [pc, #200]	; (80164dc <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8016412:	2b00      	cmp	r3, #0
 8016414:	bfbf      	itttt	lt
 8016416:	425b      	neglt	r3, r3
 8016418:	b21b      	sxthlt	r3, r3
 801641a:	9304      	strlt	r3, [sp, #16]
 801641c:	f04f 0901 	movlt.w	r9, #1
 8016420:	bfa8      	it	ge
 8016422:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8016426:	f006 fdaf 	bl	801cf88 <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 801642a:	9a04      	ldr	r2, [sp, #16]
 801642c:	492c      	ldr	r1, [pc, #176]	; (80164e0 <GUI_Text_LAB_Measure+0x3e0>)
 801642e:	a806      	add	r0, sp, #24
 8016430:	f00a fa70 	bl	8020914 <sprintf>
	 dec = 10;
 8016434:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 8016438:	2704      	movs	r7, #4
		delta_pos = 180;
 801643a:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 801643c:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 801643e:	9b04      	ldr	r3, [sp, #16]
 8016440:	fbb3 f0f8 	udiv	r0, r3, r8
 8016444:	2800      	cmp	r0, #0
 8016446:	bfb8      	it	lt
 8016448:	4240      	neglt	r0, r0
 801644a:	f7ea f883 	bl	8000554 <__aeabi_i2d>
 801644e:	2200      	movs	r2, #0
 8016450:	4b24      	ldr	r3, [pc, #144]	; (80164e4 <GUI_Text_LAB_Measure+0x3e4>)
 8016452:	f7ea fb6b 	bl	8000b2c <__aeabi_dcmpge>
 8016456:	b138      	cbz	r0, 8016468 <GUI_Text_LAB_Measure+0x368>
			number++;
 8016458:	9b03      	ldr	r3, [sp, #12]
 801645a:	3301      	adds	r3, #1
			delta_pos-=23;
 801645c:	3e17      	subs	r6, #23
			number++;
 801645e:	b2db      	uxtb	r3, r3
			dec *= 10;
 8016460:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 8016464:	b2f6      	uxtb	r6, r6
			number++;
 8016466:	9303      	str	r3, [sp, #12]
 8016468:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 801646a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 801646e:	d1e6      	bne.n	801643e <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 8016470:	4b20      	ldr	r3, [pc, #128]	; (80164f4 <GUI_Text_LAB_Measure+0x3f4>)
 8016472:	9903      	ldr	r1, [sp, #12]
 8016474:	781a      	ldrb	r2, [r3, #0]
 8016476:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80164ec <GUI_Text_LAB_Measure+0x3ec>
 801647a:	428a      	cmp	r2, r1
 801647c:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8016480:	469a      	mov	sl, r3
 8016482:	d803      	bhi.n	801648c <GUI_Text_LAB_Measure+0x38c>
 8016484:	f898 3000 	ldrb.w	r3, [r8]
 8016488:	2b01      	cmp	r3, #1
 801648a:	d10d      	bne.n	80164a8 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 801648c:	2163      	movs	r1, #99	; 0x63
 801648e:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8016492:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8016496:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801649a:	9100      	str	r1, [sp, #0]
 801649c:	b29b      	uxth	r3, r3
 801649e:	b292      	uxth	r2, r2
 80164a0:	b2b9      	uxth	r1, r7
 80164a2:	b280      	uxth	r0, r0
 80164a4:	f006 fb47 	bl	801cb36 <TFT_FillRectangle>
	old_num_B = number;
 80164a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80164ac:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 80164b0:	f1b9 0f00 	cmp.w	r9, #0
 80164b4:	d007      	beq.n	80164c6 <GUI_Text_LAB_Measure+0x3c6>
 80164b6:	f1a4 0012 	sub.w	r0, r4, #18
 80164ba:	4430      	add	r0, r6
 80164bc:	222d      	movs	r2, #45	; 0x2d
 80164be:	b2b9      	uxth	r1, r7
 80164c0:	b280      	uxth	r0, r0
 80164c2:	f006 fe2b 	bl	801d11c <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 80164c6:	19a0      	adds	r0, r4, r6
 80164c8:	2303      	movs	r3, #3
 80164ca:	aa06      	add	r2, sp, #24
 80164cc:	b2b9      	uxth	r1, r7
 80164ce:	b280      	uxth	r0, r0
 80164d0:	f006 fe7c 	bl	801d1cc <TFT_DisplayString>
		old_nan = 0;
 80164d4:	2300      	movs	r3, #0
 80164d6:	f888 3000 	strb.w	r3, [r8]
 80164da:	e687      	b.n	80161ec <GUI_Text_LAB_Measure+0xec>
 80164dc:	200001f0 	.word	0x200001f0
 80164e0:	08025609 	.word	0x08025609
 80164e4:	3ff00000 	.word	0x3ff00000
 80164e8:	20000241 	.word	0x20000241
 80164ec:	20005731 	.word	0x20005731
 80164f0:	2000023d 	.word	0x2000023d
 80164f4:	2000023e 	.word	0x2000023e

080164f8 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 80164f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	char buffer[5] = {0};
 80164fc:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 80164fe:	f101 070a 	add.w	r7, r1, #10
 8016502:	f100 062d 	add.w	r6, r0, #45	; 0x2d
 8016506:	b2b6      	uxth	r6, r6
{
 8016508:	4604      	mov	r4, r0
	char buffer[5] = {0};
 801650a:	9302      	str	r3, [sp, #8]
 801650c:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8016510:	f241 3a76 	movw	sl, #4982	; 0x1376
 8016514:	f101 031a 	add.w	r3, r1, #26
 8016518:	b2bf      	uxth	r7, r7
 801651a:	300a      	adds	r0, #10
{
 801651c:	460d      	mov	r5, r1
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 801651e:	4632      	mov	r2, r6
 8016520:	b29b      	uxth	r3, r3
 8016522:	4639      	mov	r1, r7
 8016524:	b280      	uxth	r0, r0
 8016526:	f8cd a000 	str.w	sl, [sp]
{
 801652a:	ec59 8b10 	vmov	r8, r9, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 801652e:	f006 fb02 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 8016532:	f105 0314 	add.w	r3, r5, #20
 8016536:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801653a:	f105 010f 	add.w	r1, r5, #15
 801653e:	4630      	mov	r0, r6
 8016540:	b29b      	uxth	r3, r3
 8016542:	b292      	uxth	r2, r2
 8016544:	b289      	uxth	r1, r1
 8016546:	f8cd a000 	str.w	sl, [sp]
 801654a:	f006 faf4 	bl	801cb36 <TFT_FillRectangle>

		if(charge < 12)
 801654e:	2200      	movs	r2, #0
 8016550:	4b4b      	ldr	r3, [pc, #300]	; (8016680 <GUI_Battery_Level+0x188>)
 8016552:	4640      	mov	r0, r8
 8016554:	4649      	mov	r1, r9
 8016556:	f7ea fad5 	bl	8000b04 <__aeabi_dcmplt>
 801655a:	f105 0618 	add.w	r6, r5, #24
 801655e:	b170      	cbz	r0, 801657e <GUI_Battery_Level+0x86>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 8016560:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8016564:	f104 0213 	add.w	r2, r4, #19
 8016568:	f105 010c 	add.w	r1, r5, #12
 801656c:	f104 000f 	add.w	r0, r4, #15
 8016570:	9300      	str	r3, [sp, #0]
 8016572:	b292      	uxth	r2, r2
 8016574:	b2b3      	uxth	r3, r6
 8016576:	b289      	uxth	r1, r1
 8016578:	b280      	uxth	r0, r0
 801657a:	f006 fadc 	bl	801cb36 <TFT_FillRectangle>
		}		
		if(charge >= 12)
 801657e:	2200      	movs	r2, #0
 8016580:	4b3f      	ldr	r3, [pc, #252]	; (8016680 <GUI_Battery_Level+0x188>)
 8016582:	4640      	mov	r0, r8
 8016584:	4649      	mov	r1, r9
 8016586:	f7ea fad1 	bl	8000b2c <__aeabi_dcmpge>
 801658a:	b170      	cbz	r0, 80165aa <GUI_Battery_Level+0xb2>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 801658c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016590:	f104 0213 	add.w	r2, r4, #19
 8016594:	f105 010c 	add.w	r1, r5, #12
 8016598:	f104 000f 	add.w	r0, r4, #15
 801659c:	9300      	str	r3, [sp, #0]
 801659e:	b292      	uxth	r2, r2
 80165a0:	b2b3      	uxth	r3, r6
 80165a2:	b289      	uxth	r1, r1
 80165a4:	b280      	uxth	r0, r0
 80165a6:	f006 fac6 	bl	801cb36 <TFT_FillRectangle>
		}		
		if(charge >= 25)
 80165aa:	2200      	movs	r2, #0
 80165ac:	4b35      	ldr	r3, [pc, #212]	; (8016684 <GUI_Battery_Level+0x18c>)
 80165ae:	4640      	mov	r0, r8
 80165b0:	4649      	mov	r1, r9
 80165b2:	f7ea fabb 	bl	8000b2c <__aeabi_dcmpge>
 80165b6:	b170      	cbz	r0, 80165d6 <GUI_Battery_Level+0xde>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 80165b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165bc:	f104 021a 	add.w	r2, r4, #26
 80165c0:	f105 010c 	add.w	r1, r5, #12
 80165c4:	f104 0016 	add.w	r0, r4, #22
 80165c8:	9300      	str	r3, [sp, #0]
 80165ca:	b292      	uxth	r2, r2
 80165cc:	b2b3      	uxth	r3, r6
 80165ce:	b289      	uxth	r1, r1
 80165d0:	b280      	uxth	r0, r0
 80165d2:	f006 fab0 	bl	801cb36 <TFT_FillRectangle>
		}		
		if(charge >= 50)
 80165d6:	2200      	movs	r2, #0
 80165d8:	4b2b      	ldr	r3, [pc, #172]	; (8016688 <GUI_Battery_Level+0x190>)
 80165da:	4640      	mov	r0, r8
 80165dc:	4649      	mov	r1, r9
 80165de:	f7ea faa5 	bl	8000b2c <__aeabi_dcmpge>
 80165e2:	b170      	cbz	r0, 8016602 <GUI_Battery_Level+0x10a>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 80165e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165e8:	f104 0221 	add.w	r2, r4, #33	; 0x21
 80165ec:	f105 010c 	add.w	r1, r5, #12
 80165f0:	f104 001d 	add.w	r0, r4, #29
 80165f4:	9300      	str	r3, [sp, #0]
 80165f6:	b292      	uxth	r2, r2
 80165f8:	b2b3      	uxth	r3, r6
 80165fa:	b289      	uxth	r1, r1
 80165fc:	b280      	uxth	r0, r0
 80165fe:	f006 fa9a 	bl	801cb36 <TFT_FillRectangle>
		}
		if(charge >= 85)
 8016602:	2200      	movs	r2, #0
 8016604:	4b21      	ldr	r3, [pc, #132]	; (801668c <GUI_Battery_Level+0x194>)
 8016606:	4640      	mov	r0, r8
 8016608:	4649      	mov	r1, r9
 801660a:	f7ea fa8f 	bl	8000b2c <__aeabi_dcmpge>
 801660e:	b170      	cbz	r0, 801662e <GUI_Battery_Level+0x136>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 8016610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016614:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8016618:	f105 010c 	add.w	r1, r5, #12
 801661c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016620:	9300      	str	r3, [sp, #0]
 8016622:	b292      	uxth	r2, r2
 8016624:	b2b3      	uxth	r3, r6
 8016626:	b289      	uxth	r1, r1
 8016628:	b280      	uxth	r0, r0
 801662a:	f006 fa84 	bl	801cb36 <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 801662e:	4642      	mov	r2, r8
 8016630:	464b      	mov	r3, r9
 8016632:	4917      	ldr	r1, [pc, #92]	; (8016690 <GUI_Battery_Level+0x198>)
 8016634:	a802      	add	r0, sp, #8
 8016636:	f00a f96d 	bl	8020914 <sprintf>
		TFT_SetFont(&Font8);
 801663a:	4816      	ldr	r0, [pc, #88]	; (8016694 <GUI_Battery_Level+0x19c>)
 801663c:	f006 fca4 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8016640:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016644:	f006 fca6 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016648:	2063      	movs	r0, #99	; 0x63
 801664a:	f006 fca9 	bl	801cfa0 <TFT_SetBackColor>
		TFT_FillRectangle(X+50, Y+10, X+80, Y+24, TFT_Black_Bkgr);
 801664e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016652:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8016656:	2363      	movs	r3, #99	; 0x63
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	4639      	mov	r1, r7
 801665c:	b2b3      	uxth	r3, r6
 801665e:	b292      	uxth	r2, r2
 8016660:	b280      	uxth	r0, r0
 8016662:	f006 fa68 	bl	801cb36 <TFT_FillRectangle>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 8016666:	f105 010e 	add.w	r1, r5, #14
 801666a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801666e:	2303      	movs	r3, #3
 8016670:	aa02      	add	r2, sp, #8
 8016672:	b289      	uxth	r1, r1
 8016674:	b280      	uxth	r0, r0
 8016676:	f006 fda9 	bl	801d1cc <TFT_DisplayString>

}
 801667a:	b004      	add	sp, #16
 801667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016680:	40280000 	.word	0x40280000
 8016684:	40390000 	.word	0x40390000
 8016688:	40490000 	.word	0x40490000
 801668c:	40554000 	.word	0x40554000
 8016690:	080323de 	.word	0x080323de
 8016694:	20000218 	.word	0x20000218

08016698 <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801669a:	1e86      	subs	r6, r0, #2
{
 801669c:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801669e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80166a2:	b2b6      	uxth	r6, r6
 80166a4:	39fa      	subs	r1, #250	; 0xfa
{
 80166a6:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80166a8:	4623      	mov	r3, r4
 80166aa:	4602      	mov	r2, r0
 80166ac:	9700      	str	r7, [sp, #0]
 80166ae:	4630      	mov	r0, r6
 80166b0:	b289      	uxth	r1, r1
 80166b2:	f006 fa40 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 80166b6:	1ce3      	adds	r3, r4, #3
 80166b8:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 80166bc:	1c61      	adds	r1, r4, #1
 80166be:	4630      	mov	r0, r6
 80166c0:	9700      	str	r7, [sp, #0]
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	b292      	uxth	r2, r2
 80166c6:	b289      	uxth	r1, r1
 80166c8:	f006 fa35 	bl	801cb36 <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 80166cc:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 80166d0:	b29b      	uxth	r3, r3
 80166d2:	1cea      	adds	r2, r5, #3
 80166d4:	1f68      	subs	r0, r5, #5
 80166d6:	4619      	mov	r1, r3
 80166d8:	9700      	str	r7, [sp, #0]
 80166da:	b292      	uxth	r2, r2
 80166dc:	b280      	uxth	r0, r0
 80166de:	f006 f9cd 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 80166e2:	1da6      	adds	r6, r4, #6
 80166e4:	f105 0293 	add.w	r2, r5, #147	; 0x93
 80166e8:	b292      	uxth	r2, r2
 80166ea:	b2b6      	uxth	r6, r6
 80166ec:	1ee1      	subs	r1, r4, #3
 80166ee:	4633      	mov	r3, r6
 80166f0:	4610      	mov	r0, r2
 80166f2:	b289      	uxth	r1, r1
 80166f4:	9700      	str	r7, [sp, #0]
 80166f6:	f006 f9c1 	bl	801ca7c <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 80166fa:	4819      	ldr	r0, [pc, #100]	; (8016760 <GUI_Axes_Locus_XY+0xc8>)
 80166fc:	f006 fc44 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016700:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 8016702:	4638      	mov	r0, r7
 8016704:	f006 fc46 	bl	801cf94 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016708:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 801670a:	2063      	movs	r0, #99	; 0x63
 801670c:	f006 fc48 	bl	801cfa0 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016710:	4621      	mov	r1, r4
 8016712:	222e      	movs	r2, #46	; 0x2e
 8016714:	2004      	movs	r0, #4
 8016716:	f006 fd01 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 801671a:	4621      	mov	r1, r4
 801671c:	2230      	movs	r2, #48	; 0x30
 801671e:	2000      	movs	r0, #0
 8016720:	f006 fcfc 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 8016724:	4621      	mov	r1, r4
 8016726:	2235      	movs	r2, #53	; 0x35
 8016728:	2008      	movs	r0, #8
 801672a:	f006 fcf7 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 801672e:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8016732:	4631      	mov	r1, r6
 8016734:	222e      	movs	r2, #46	; 0x2e
 8016736:	b280      	uxth	r0, r0
 8016738:	f006 fcf0 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 801673c:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8016740:	4631      	mov	r1, r6
 8016742:	2230      	movs	r2, #48	; 0x30
 8016744:	b280      	uxth	r0, r0
 8016746:	f006 fce9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 801674a:	f105 0095 	add.w	r0, r5, #149	; 0x95
 801674e:	2235      	movs	r2, #53	; 0x35
 8016750:	4631      	mov	r1, r6
 8016752:	b280      	uxth	r0, r0
}
 8016754:	b003      	add	sp, #12
 8016756:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 801675a:	f006 bcdf 	b.w	801d11c <TFT_DrawChar>
 801675e:	bf00      	nop
 8016760:	20000210 	.word	0x20000210

08016764 <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016766:	1e86      	subs	r6, r0, #2
{
 8016768:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801676a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801676e:	b2b6      	uxth	r6, r6
 8016770:	39ea      	subs	r1, #234	; 0xea
{
 8016772:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016774:	4623      	mov	r3, r4
 8016776:	4602      	mov	r2, r0
 8016778:	9700      	str	r7, [sp, #0]
 801677a:	4630      	mov	r0, r6
 801677c:	b289      	uxth	r1, r1
 801677e:	f006 f9da 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8016782:	1ce3      	adds	r3, r4, #3
 8016784:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8016788:	1c61      	adds	r1, r4, #1
 801678a:	4630      	mov	r0, r6
 801678c:	9700      	str	r7, [sp, #0]
 801678e:	b29b      	uxth	r3, r3
 8016790:	b292      	uxth	r2, r2
 8016792:	b289      	uxth	r1, r1
 8016794:	f006 f9cf 	bl	801cb36 <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 8016798:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 801679c:	b29b      	uxth	r3, r3
 801679e:	1cea      	adds	r2, r5, #3
 80167a0:	1f68      	subs	r0, r5, #5
 80167a2:	4619      	mov	r1, r3
 80167a4:	9700      	str	r7, [sp, #0]
 80167a6:	b292      	uxth	r2, r2
 80167a8:	b280      	uxth	r0, r0
 80167aa:	f006 f967 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 80167ae:	1da6      	adds	r6, r4, #6
 80167b0:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 80167b4:	b292      	uxth	r2, r2
 80167b6:	b2b6      	uxth	r6, r6
 80167b8:	1ee1      	subs	r1, r4, #3
 80167ba:	4633      	mov	r3, r6
 80167bc:	4610      	mov	r0, r2
 80167be:	b289      	uxth	r1, r1
 80167c0:	9700      	str	r7, [sp, #0]
 80167c2:	f006 f95b 	bl	801ca7c <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 80167c6:	4819      	ldr	r0, [pc, #100]	; (801682c <GUI_Axes_Locus_LUV+0xc8>)
 80167c8:	f006 fbde 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80167cc:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 80167ce:	4638      	mov	r0, r7
 80167d0:	f006 fbe0 	bl	801cf94 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80167d4:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 80167d6:	2063      	movs	r0, #99	; 0x63
 80167d8:	f006 fbe2 	bl	801cfa0 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80167dc:	4621      	mov	r1, r4
 80167de:	222e      	movs	r2, #46	; 0x2e
 80167e0:	2004      	movs	r0, #4
 80167e2:	f006 fc9b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 80167e6:	4621      	mov	r1, r4
 80167e8:	2230      	movs	r2, #48	; 0x30
 80167ea:	2000      	movs	r0, #0
 80167ec:	f006 fc96 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 80167f0:	4621      	mov	r1, r4
 80167f2:	2235      	movs	r2, #53	; 0x35
 80167f4:	2008      	movs	r0, #8
 80167f6:	f006 fc91 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 80167fa:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 80167fe:	4631      	mov	r1, r6
 8016800:	222e      	movs	r2, #46	; 0x2e
 8016802:	b280      	uxth	r0, r0
 8016804:	f006 fc8a 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8016808:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 801680c:	4631      	mov	r1, r6
 801680e:	2230      	movs	r2, #48	; 0x30
 8016810:	b280      	uxth	r0, r0
 8016812:	f006 fc83 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8016816:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 801681a:	2235      	movs	r2, #53	; 0x35
 801681c:	4631      	mov	r1, r6
 801681e:	b280      	uxth	r0, r0
}
 8016820:	b003      	add	sp, #12
 8016822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8016826:	f006 bc79 	b.w	801d11c <TFT_DrawChar>
 801682a:	bf00      	nop
 801682c:	20000210 	.word	0x20000210

08016830 <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8016834:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8016838:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801683a:	b29b      	uxth	r3, r3
{
 801683c:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801683e:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 8016842:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8016844:	9303      	str	r3, [sp, #12]
 8016846:	387f      	subs	r0, #127	; 0x7f
 8016848:	1c4b      	adds	r3, r1, #1
 801684a:	3901      	subs	r1, #1
 801684c:	9a03      	ldr	r2, [sp, #12]
 801684e:	9700      	str	r7, [sp, #0]
 8016850:	b29b      	uxth	r3, r3
 8016852:	b289      	uxth	r1, r1
 8016854:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8016856:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801685a:	f006 f96c 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 801685e:	b2b6      	uxth	r6, r6
 8016860:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 8016864:	1ea0      	subs	r0, r4, #2
 8016866:	b29b      	uxth	r3, r3
 8016868:	4622      	mov	r2, r4
 801686a:	4631      	mov	r1, r6
 801686c:	9700      	str	r7, [sp, #0]
 801686e:	b280      	uxth	r0, r0
 8016870:	9304      	str	r3, [sp, #16]
 8016872:	f006 f960 	bl	801cb36 <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 8016876:	4850      	ldr	r0, [pc, #320]	; (80169b8 <GUI_Axes_Locus_Lab+0x188>)
 8016878:	f006 fb86 	bl	801cf88 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 801687c:	4638      	mov	r0, r7
 801687e:	f006 fb89 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016882:	2063      	movs	r0, #99	; 0x63
 8016884:	f006 fb8c 	bl	801cfa0 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016888:	f1a4 031e 	sub.w	r3, r4, #30
 801688c:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 801688e:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016892:	4618      	mov	r0, r3
 8016894:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8016896:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 801689a:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 801689c:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80168a0:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80168a2:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80168a6:	f006 fc39 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80168aa:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80168ae:	4631      	mov	r1, r6
 80168b0:	4658      	mov	r0, fp
 80168b2:	2231      	movs	r2, #49	; 0x31
 80168b4:	f006 fc32 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80168b8:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80168bc:	4631      	mov	r1, r6
 80168be:	4650      	mov	r0, sl
 80168c0:	2232      	movs	r2, #50	; 0x32
 80168c2:	f006 fc2b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80168c6:	4631      	mov	r1, r6
 80168c8:	4648      	mov	r0, r9
 80168ca:	2238      	movs	r2, #56	; 0x38
 80168cc:	f006 fc26 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 80168d0:	f105 0875 	add.w	r8, r5, #117	; 0x75
 80168d4:	9b05      	ldr	r3, [sp, #20]
 80168d6:	fa1f f888 	uxth.w	r8, r8
 80168da:	4618      	mov	r0, r3
 80168dc:	4641      	mov	r1, r8
 80168de:	222d      	movs	r2, #45	; 0x2d
 80168e0:	f006 fc1c 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 80168e4:	4641      	mov	r1, r8
 80168e6:	4658      	mov	r0, fp
 80168e8:	2231      	movs	r2, #49	; 0x31
 80168ea:	f006 fc17 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 80168ee:	4641      	mov	r1, r8
 80168f0:	4650      	mov	r0, sl
 80168f2:	2232      	movs	r2, #50	; 0x32
 80168f4:	f006 fc12 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 80168f8:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 80168fa:	f1a5 080b 	sub.w	r8, r5, #11
 80168fe:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8016902:	4648      	mov	r0, r9
 8016904:	2238      	movs	r2, #56	; 0x38
 8016906:	f006 fc09 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 801690a:	4641      	mov	r1, r8
 801690c:	222d      	movs	r2, #45	; 0x2d
 801690e:	2000      	movs	r0, #0
 8016910:	f006 fc04 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 8016914:	4641      	mov	r1, r8
 8016916:	2231      	movs	r2, #49	; 0x31
 8016918:	2005      	movs	r0, #5
 801691a:	f006 fbff 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 801691e:	4641      	mov	r1, r8
 8016920:	2232      	movs	r2, #50	; 0x32
 8016922:	200a      	movs	r0, #10
 8016924:	f006 fbfa 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 8016928:	4641      	mov	r1, r8
 801692a:	2238      	movs	r2, #56	; 0x38
 801692c:	2010      	movs	r0, #16
 801692e:	f006 fbf5 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 8016932:	4641      	mov	r1, r8
 8016934:	222b      	movs	r2, #43	; 0x2b
 8016936:	20f5      	movs	r0, #245	; 0xf5
 8016938:	f006 fbf0 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 801693c:	4641      	mov	r1, r8
 801693e:	2231      	movs	r2, #49	; 0x31
 8016940:	20fa      	movs	r0, #250	; 0xfa
 8016942:	f006 fbeb 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 8016946:	4641      	mov	r1, r8
 8016948:	2232      	movs	r2, #50	; 0x32
 801694a:	20ff      	movs	r0, #255	; 0xff
 801694c:	f006 fbe6 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8016950:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 8016954:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8016956:	f1a4 0805 	sub.w	r8, r4, #5
 801695a:	fa1f f888 	uxth.w	r8, r8
 801695e:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 8016962:	2238      	movs	r2, #56	; 0x38
 8016964:	f44f 7082 	mov.w	r0, #260	; 0x104
 8016968:	f006 fbd8 	bl	801d11c <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 801696c:	4633      	mov	r3, r6
 801696e:	464a      	mov	r2, r9
 8016970:	4631      	mov	r1, r6
 8016972:	4640      	mov	r0, r8
 8016974:	9700      	str	r7, [sp, #0]
 8016976:	f006 f881 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 801697a:	9b04      	ldr	r3, [sp, #16]
 801697c:	9700      	str	r7, [sp, #0]
 801697e:	464a      	mov	r2, r9
 8016980:	4619      	mov	r1, r3
 8016982:	4640      	mov	r0, r8
 8016984:	f006 f87a 	bl	801ca7c <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 8016988:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 801698c:	1eec      	subs	r4, r5, #3
 801698e:	3506      	adds	r5, #6
 8016990:	b292      	uxth	r2, r2
 8016992:	b2a4      	uxth	r4, r4
 8016994:	b2ad      	uxth	r5, r5
 8016996:	462b      	mov	r3, r5
 8016998:	4621      	mov	r1, r4
 801699a:	4610      	mov	r0, r2
 801699c:	9700      	str	r7, [sp, #0]
 801699e:	f006 f86d 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 80169a2:	9a03      	ldr	r2, [sp, #12]
 80169a4:	9700      	str	r7, [sp, #0]
 80169a6:	462b      	mov	r3, r5
 80169a8:	4621      	mov	r1, r4
 80169aa:	4610      	mov	r0, r2
 80169ac:	f006 f866 	bl	801ca7c <TFT_DrawLine>
}
 80169b0:	b007      	add	sp, #28
 80169b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169b6:	bf00      	nop
 80169b8:	20000210 	.word	0x20000210

080169bc <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 80169bc:	b538      	push	{r3, r4, r5, lr}
 80169be:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 80169c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80169c4:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 80169c6:	f006 fae5 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80169ca:	2063      	movs	r0, #99	; 0x63
 80169cc:	f006 fae8 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80169d0:	4816      	ldr	r0, [pc, #88]	; (8016a2c <GUI_Text_CIE_XYZ+0x70>)
 80169d2:	f006 fad9 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80169d6:	4629      	mov	r1, r5
 80169d8:	4620      	mov	r0, r4
 80169da:	2243      	movs	r2, #67	; 0x43
 80169dc:	f006 fb9e 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80169e0:	f104 000d 	add.w	r0, r4, #13
 80169e4:	4629      	mov	r1, r5
 80169e6:	2249      	movs	r2, #73	; 0x49
 80169e8:	b280      	uxth	r0, r0
 80169ea:	f006 fb97 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80169ee:	f104 001b 	add.w	r0, r4, #27
 80169f2:	4629      	mov	r1, r5
 80169f4:	2245      	movs	r2, #69	; 0x45
 80169f6:	b280      	uxth	r0, r0
 80169f8:	f006 fb90 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 80169fc:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016a00:	4629      	mov	r1, r5
 8016a02:	2258      	movs	r2, #88	; 0x58
 8016a04:	b280      	uxth	r0, r0
 8016a06:	f006 fb89 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8016a0a:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8016a0e:	4629      	mov	r1, r5
 8016a10:	2259      	movs	r2, #89	; 0x59
 8016a12:	b280      	uxth	r0, r0
 8016a14:	f006 fb82 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 8016a18:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8016a1c:	4629      	mov	r1, r5
 8016a1e:	225a      	movs	r2, #90	; 0x5a
 8016a20:	b280      	uxth	r0, r0
}
 8016a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 8016a26:	f006 bb79 	b.w	801d11c <TFT_DrawChar>
 8016a2a:	bf00      	nop
 8016a2c:	200001b0 	.word	0x200001b0

08016a30 <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 8016a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a32:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8016a34:	4f2c      	ldr	r7, [pc, #176]	; (8016ae8 <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 8016a36:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016a3a:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016a3c:	f006 faaa 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016a40:	2063      	movs	r0, #99	; 0x63
 8016a42:	f006 faad 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016a46:	4638      	mov	r0, r7
 8016a48:	f006 fa9e 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	4620      	mov	r0, r4
 8016a50:	2243      	movs	r2, #67	; 0x43
 8016a52:	f006 fb63 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016a56:	f104 000d 	add.w	r0, r4, #13
 8016a5a:	4629      	mov	r1, r5
 8016a5c:	2249      	movs	r2, #73	; 0x49
 8016a5e:	b280      	uxth	r0, r0
 8016a60:	f006 fb5c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016a64:	f104 001b 	add.w	r0, r4, #27
 8016a68:	4629      	mov	r1, r5
 8016a6a:	2245      	movs	r2, #69	; 0x45
 8016a6c:	b280      	uxth	r0, r0
 8016a6e:	f006 fb55 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 8016a72:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8016a76:	4629      	mov	r1, r5
 8016a78:	222c      	movs	r2, #44	; 0x2c
 8016a7a:	b280      	uxth	r0, r0
 8016a7c:	f006 fb4e 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016a80:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 8016a82:	481a      	ldr	r0, [pc, #104]	; (8016aec <GUI_Text_CIE_xy_1931+0xbc>)
 8016a84:	f006 fa80 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016a88:	b2b6      	uxth	r6, r6
 8016a8a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016a8e:	4631      	mov	r1, r6
 8016a90:	2278      	movs	r2, #120	; 0x78
 8016a92:	b280      	uxth	r0, r0
 8016a94:	f006 fb42 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8016a98:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016a9c:	4631      	mov	r1, r6
 8016a9e:	2279      	movs	r2, #121	; 0x79
 8016aa0:	b280      	uxth	r0, r0
 8016aa2:	f006 fb3b 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016aa6:	4638      	mov	r0, r7
 8016aa8:	f006 fa6e 	bl	801cf88 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ab0:	4629      	mov	r1, r5
 8016ab2:	2231      	movs	r2, #49	; 0x31
 8016ab4:	b280      	uxth	r0, r0
 8016ab6:	f006 fb31 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 8016aba:	f104 0085 	add.w	r0, r4, #133	; 0x85
 8016abe:	4629      	mov	r1, r5
 8016ac0:	2231      	movs	r2, #49	; 0x31
 8016ac2:	b280      	uxth	r0, r0
 8016ac4:	f006 fb2a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016ac8:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016acc:	4629      	mov	r1, r5
 8016ace:	2239      	movs	r2, #57	; 0x39
 8016ad0:	b280      	uxth	r0, r0
 8016ad2:	f006 fb23 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 8016ad6:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8016ada:	4629      	mov	r1, r5
 8016adc:	2233      	movs	r2, #51	; 0x33
 8016ade:	b280      	uxth	r0, r0


}
 8016ae0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 8016ae4:	f006 bb1a 	b.w	801d11c <TFT_DrawChar>
 8016ae8:	200001b0 	.word	0x200001b0
 8016aec:	200001c0 	.word	0x200001c0

08016af0 <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 8016af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8016af4:	4f2c      	ldr	r7, [pc, #176]	; (8016ba8 <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 8016af6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016afa:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016afc:	f006 fa4a 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b00:	2063      	movs	r0, #99	; 0x63
 8016b02:	f006 fa4d 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016b06:	4638      	mov	r0, r7
 8016b08:	f006 fa3e 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016b0c:	4629      	mov	r1, r5
 8016b0e:	4620      	mov	r0, r4
 8016b10:	2243      	movs	r2, #67	; 0x43
 8016b12:	f006 fb03 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016b16:	f104 000d 	add.w	r0, r4, #13
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	2249      	movs	r2, #73	; 0x49
 8016b1e:	b280      	uxth	r0, r0
 8016b20:	f006 fafc 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016b24:	f104 001b 	add.w	r0, r4, #27
 8016b28:	4629      	mov	r1, r5
 8016b2a:	2245      	movs	r2, #69	; 0x45
 8016b2c:	b280      	uxth	r0, r0
 8016b2e:	f006 faf5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 8016b32:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8016b36:	4629      	mov	r1, r5
 8016b38:	222c      	movs	r2, #44	; 0x2c
 8016b3a:	b280      	uxth	r0, r0
 8016b3c:	f006 faee 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016b40:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 8016b42:	481a      	ldr	r0, [pc, #104]	; (8016bac <GUI_Text_CIE_xy_1964+0xbc>)
 8016b44:	f006 fa20 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016b48:	b2b6      	uxth	r6, r6
 8016b4a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016b4e:	4631      	mov	r1, r6
 8016b50:	2278      	movs	r2, #120	; 0x78
 8016b52:	b280      	uxth	r0, r0
 8016b54:	f006 fae2 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8016b58:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016b5c:	4631      	mov	r1, r6
 8016b5e:	2279      	movs	r2, #121	; 0x79
 8016b60:	b280      	uxth	r0, r0
 8016b62:	f006 fadb 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016b66:	4638      	mov	r0, r7
 8016b68:	f006 fa0e 	bl	801cf88 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016b70:	4629      	mov	r1, r5
 8016b72:	2231      	movs	r2, #49	; 0x31
 8016b74:	b280      	uxth	r0, r0
 8016b76:	f006 fad1 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016b7a:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016b7e:	4629      	mov	r1, r5
 8016b80:	2239      	movs	r2, #57	; 0x39
 8016b82:	b280      	uxth	r0, r0
 8016b84:	f006 faca 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 8016b88:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	2236      	movs	r2, #54	; 0x36
 8016b90:	b280      	uxth	r0, r0
 8016b92:	f006 fac3 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 8016b96:	f104 0087 	add.w	r0, r4, #135	; 0x87
 8016b9a:	4629      	mov	r1, r5
 8016b9c:	2234      	movs	r2, #52	; 0x34
 8016b9e:	b280      	uxth	r0, r0
}
 8016ba0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 8016ba4:	f006 baba 	b.w	801d11c <TFT_DrawChar>
 8016ba8:	200001b0 	.word	0x200001b0
 8016bac:	200001c0 	.word	0x200001c0

08016bb0 <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 8016bb0:	b538      	push	{r3, r4, r5, lr}
 8016bb2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016bb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016bb8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016bba:	f006 f9eb 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016bbe:	2063      	movs	r0, #99	; 0x63
 8016bc0:	f006 f9ee 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016bc4:	481f      	ldr	r0, [pc, #124]	; (8016c44 <GUI_Text_CIE_Luv+0x94>)
 8016bc6:	f006 f9df 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016bca:	4621      	mov	r1, r4
 8016bcc:	4628      	mov	r0, r5
 8016bce:	2243      	movs	r2, #67	; 0x43
 8016bd0:	f006 faa4 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016bd4:	f105 000d 	add.w	r0, r5, #13
 8016bd8:	4621      	mov	r1, r4
 8016bda:	2249      	movs	r2, #73	; 0x49
 8016bdc:	b280      	uxth	r0, r0
 8016bde:	f006 fa9d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016be2:	f105 001b 	add.w	r0, r5, #27
 8016be6:	4621      	mov	r1, r4
 8016be8:	2245      	movs	r2, #69	; 0x45
 8016bea:	b280      	uxth	r0, r0
 8016bec:	f006 fa96 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016bf0:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016bf4:	4621      	mov	r1, r4
 8016bf6:	224c      	movs	r2, #76	; 0x4c
 8016bf8:	b280      	uxth	r0, r0
 8016bfa:	f006 fa8f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 8016bfe:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016c02:	4621      	mov	r1, r4
 8016c04:	2227      	movs	r2, #39	; 0x27
 8016c06:	b280      	uxth	r0, r0
 8016c08:	f006 fa88 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8016c0c:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 8016c10:	4621      	mov	r1, r4
 8016c12:	2227      	movs	r2, #39	; 0x27
 8016c14:	b280      	uxth	r0, r0
 8016c16:	f006 fa81 	bl	801d11c <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 8016c1a:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016c1c:	480a      	ldr	r0, [pc, #40]	; (8016c48 <GUI_Text_CIE_Luv+0x98>)
 8016c1e:	f006 f9b3 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 8016c22:	b2a4      	uxth	r4, r4
 8016c24:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016c28:	4621      	mov	r1, r4
 8016c2a:	2275      	movs	r2, #117	; 0x75
 8016c2c:	b280      	uxth	r0, r0
 8016c2e:	f006 fa75 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 8016c32:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8016c36:	4621      	mov	r1, r4
 8016c38:	2276      	movs	r2, #118	; 0x76
 8016c3a:	b280      	uxth	r0, r0
}
 8016c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 8016c40:	f006 ba6c 	b.w	801d11c <TFT_DrawChar>
 8016c44:	200001b0 	.word	0x200001b0
 8016c48:	200001c0 	.word	0x200001c0

08016c4c <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 8016c4c:	b538      	push	{r3, r4, r5, lr}
 8016c4e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016c50:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c54:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016c56:	f006 f99d 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c5a:	2063      	movs	r0, #99	; 0x63
 8016c5c:	f006 f9a0 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016c60:	481f      	ldr	r0, [pc, #124]	; (8016ce0 <GUI_Text_CIE_Lab+0x94>)
 8016c62:	f006 f991 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016c66:	4621      	mov	r1, r4
 8016c68:	4628      	mov	r0, r5
 8016c6a:	2243      	movs	r2, #67	; 0x43
 8016c6c:	f006 fa56 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016c70:	f105 000d 	add.w	r0, r5, #13
 8016c74:	4621      	mov	r1, r4
 8016c76:	2249      	movs	r2, #73	; 0x49
 8016c78:	b280      	uxth	r0, r0
 8016c7a:	f006 fa4f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016c7e:	f105 001b 	add.w	r0, r5, #27
 8016c82:	4621      	mov	r1, r4
 8016c84:	2245      	movs	r2, #69	; 0x45
 8016c86:	b280      	uxth	r0, r0
 8016c88:	f006 fa48 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016c8c:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016c90:	4621      	mov	r1, r4
 8016c92:	224c      	movs	r2, #76	; 0x4c
 8016c94:	b280      	uxth	r0, r0
 8016c96:	f006 fa41 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 8016c9a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016c9e:	4621      	mov	r1, r4
 8016ca0:	222a      	movs	r2, #42	; 0x2a
 8016ca2:	b280      	uxth	r0, r0
 8016ca4:	f006 fa3a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 8016ca8:	f105 0069 	add.w	r0, r5, #105	; 0x69
 8016cac:	4621      	mov	r1, r4
 8016cae:	222a      	movs	r2, #42	; 0x2a
 8016cb0:	b280      	uxth	r0, r0
 8016cb2:	f006 fa33 	bl	801d11c <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 8016cb6:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016cb8:	480a      	ldr	r0, [pc, #40]	; (8016ce4 <GUI_Text_CIE_Lab+0x98>)
 8016cba:	f006 f965 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 8016cbe:	b2a4      	uxth	r4, r4
 8016cc0:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016cc4:	4621      	mov	r1, r4
 8016cc6:	2261      	movs	r2, #97	; 0x61
 8016cc8:	b280      	uxth	r0, r0
 8016cca:	f006 fa27 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 8016cce:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8016cd2:	4621      	mov	r1, r4
 8016cd4:	2262      	movs	r2, #98	; 0x62
 8016cd6:	b280      	uxth	r0, r0
}
 8016cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8016cdc:	f006 ba1e 	b.w	801d11c <TFT_DrawChar>
 8016ce0:	200001b0 	.word	0x200001b0
 8016ce4:	200001c0 	.word	0x200001c0

08016ce8 <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 8016ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cea:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8016cec:	4e29      	ldr	r6, [pc, #164]	; (8016d94 <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 8016cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016cf2:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 8016cf4:	f006 f94e 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016cf8:	2063      	movs	r0, #99	; 0x63
 8016cfa:	f006 f951 	bl	801cfa0 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016cfe:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016d00:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 8016d02:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 8016d04:	f006 f940 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016d08:	f104 000d 	add.w	r0, r4, #13
 8016d0c:	4629      	mov	r1, r5
 8016d0e:	226c      	movs	r2, #108	; 0x6c
 8016d10:	b280      	uxth	r0, r0
 8016d12:	f006 fa03 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 8016d16:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8016d1a:	4629      	mov	r1, r5
 8016d1c:	2274      	movs	r2, #116	; 0x74
 8016d1e:	b280      	uxth	r0, r0
 8016d20:	f006 f9fc 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 8016d24:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8016d28:	4629      	mov	r1, r5
 8016d2a:	2274      	movs	r2, #116	; 0x74
 8016d2c:	b280      	uxth	r0, r0
 8016d2e:	f006 f9f5 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016d32:	4819      	ldr	r0, [pc, #100]	; (8016d98 <GUI_Text_Bluetooth+0xb0>)
 8016d34:	f006 f928 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 8016d38:	4639      	mov	r1, r7
 8016d3a:	2242      	movs	r2, #66	; 0x42
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f006 f9ed 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016d42:	4630      	mov	r0, r6
 8016d44:	f006 f920 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 8016d48:	f104 0017 	add.w	r0, r4, #23
 8016d4c:	4629      	mov	r1, r5
 8016d4e:	2275      	movs	r2, #117	; 0x75
 8016d50:	b280      	uxth	r0, r0
 8016d52:	f006 f9e3 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 8016d56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016d5a:	4629      	mov	r1, r5
 8016d5c:	2265      	movs	r2, #101	; 0x65
 8016d5e:	b280      	uxth	r0, r0
 8016d60:	f006 f9dc 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 8016d64:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8016d68:	4629      	mov	r1, r5
 8016d6a:	226f      	movs	r2, #111	; 0x6f
 8016d6c:	b280      	uxth	r0, r0
 8016d6e:	f006 f9d5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 8016d72:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8016d76:	4629      	mov	r1, r5
 8016d78:	226f      	movs	r2, #111	; 0x6f
 8016d7a:	b280      	uxth	r0, r0
 8016d7c:	f006 f9ce 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 8016d80:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8016d84:	4629      	mov	r1, r5
 8016d86:	2268      	movs	r2, #104	; 0x68
 8016d88:	b280      	uxth	r0, r0
}
 8016d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 8016d8e:	f006 b9c5 	b.w	801d11c <TFT_DrawChar>
 8016d92:	bf00      	nop
 8016d94:	200001c0 	.word	0x200001c0
 8016d98:	200001b0 	.word	0x200001b0

08016d9c <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8016d9c:	b538      	push	{r3, r4, r5, lr}
 8016d9e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016da4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016da6:	f006 f8f5 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016daa:	2063      	movs	r0, #99	; 0x63
 8016dac:	f006 f8f8 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016db0:	4804      	ldr	r0, [pc, #16]	; (8016dc4 <GUI_Text_A+0x28>)
 8016db2:	f006 f8e9 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 8016db6:	4629      	mov	r1, r5
 8016db8:	4620      	mov	r0, r4
 8016dba:	2241      	movs	r2, #65	; 0x41
}
 8016dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 8016dc0:	f006 b9ac 	b.w	801d11c <TFT_DrawChar>
 8016dc4:	200001b0 	.word	0x200001b0

08016dc8 <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 8016dc8:	b538      	push	{r3, r4, r5, lr}
 8016dca:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016dcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016dd0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016dd2:	f006 f8df 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016dd6:	2063      	movs	r0, #99	; 0x63
 8016dd8:	f006 f8e2 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ddc:	480b      	ldr	r0, [pc, #44]	; (8016e0c <GUI_Text_D65+0x44>)
 8016dde:	f006 f8d3 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016de2:	4629      	mov	r1, r5
 8016de4:	4620      	mov	r0, r4
 8016de6:	2244      	movs	r2, #68	; 0x44
 8016de8:	f006 f998 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8016dec:	f104 000f 	add.w	r0, r4, #15
 8016df0:	4629      	mov	r1, r5
 8016df2:	2236      	movs	r2, #54	; 0x36
 8016df4:	b280      	uxth	r0, r0
 8016df6:	f006 f991 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 8016dfa:	f104 0020 	add.w	r0, r4, #32
 8016dfe:	4629      	mov	r1, r5
 8016e00:	2235      	movs	r2, #53	; 0x35
 8016e02:	b280      	uxth	r0, r0
}
 8016e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 8016e08:	f006 b988 	b.w	801d11c <TFT_DrawChar>
 8016e0c:	200001b0 	.word	0x200001b0

08016e10 <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 8016e10:	b538      	push	{r3, r4, r5, lr}
 8016e12:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016e14:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e18:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016e1a:	f006 f8bb 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e1e:	2063      	movs	r0, #99	; 0x63
 8016e20:	f006 f8be 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016e24:	4804      	ldr	r0, [pc, #16]	; (8016e38 <GUI_Text_C+0x28>)
 8016e26:	f006 f8af 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	2243      	movs	r2, #67	; 0x43
}
 8016e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 8016e34:	f006 b972 	b.w	801d11c <TFT_DrawChar>
 8016e38:	200001b0 	.word	0x200001b0

08016e3c <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 8016e3c:	b538      	push	{r3, r4, r5, lr}
 8016e3e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016e40:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e44:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016e46:	f006 f8a5 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e4a:	2063      	movs	r0, #99	; 0x63
 8016e4c:	f006 f8a8 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016e50:	480b      	ldr	r0, [pc, #44]	; (8016e80 <GUI_Text_D50+0x44>)
 8016e52:	f006 f899 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016e56:	4629      	mov	r1, r5
 8016e58:	4620      	mov	r0, r4
 8016e5a:	2244      	movs	r2, #68	; 0x44
 8016e5c:	f006 f95e 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016e60:	f104 000f 	add.w	r0, r4, #15
 8016e64:	4629      	mov	r1, r5
 8016e66:	2235      	movs	r2, #53	; 0x35
 8016e68:	b280      	uxth	r0, r0
 8016e6a:	f006 f957 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 8016e6e:	f104 001f 	add.w	r0, r4, #31
 8016e72:	4629      	mov	r1, r5
 8016e74:	2230      	movs	r2, #48	; 0x30
 8016e76:	b280      	uxth	r0, r0
}
 8016e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 8016e7c:	f006 b94e 	b.w	801d11c <TFT_DrawChar>
 8016e80:	200001b0 	.word	0x200001b0

08016e84 <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 8016e84:	b538      	push	{r3, r4, r5, lr}
 8016e86:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016e88:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e8c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016e8e:	f006 f881 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e92:	2063      	movs	r0, #99	; 0x63
 8016e94:	f006 f884 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016e98:	480b      	ldr	r0, [pc, #44]	; (8016ec8 <GUI_Text_D55+0x44>)
 8016e9a:	f006 f875 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016e9e:	4629      	mov	r1, r5
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	2244      	movs	r2, #68	; 0x44
 8016ea4:	f006 f93a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016ea8:	f104 000f 	add.w	r0, r4, #15
 8016eac:	4629      	mov	r1, r5
 8016eae:	2235      	movs	r2, #53	; 0x35
 8016eb0:	b280      	uxth	r0, r0
 8016eb2:	f006 f933 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016eb6:	f104 001f 	add.w	r0, r4, #31
 8016eba:	4629      	mov	r1, r5
 8016ebc:	2235      	movs	r2, #53	; 0x35
 8016ebe:	b280      	uxth	r0, r0
}
 8016ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016ec4:	f006 b92a 	b.w	801d11c <TFT_DrawChar>
 8016ec8:	200001b0 	.word	0x200001b0

08016ecc <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8016ecc:	b538      	push	{r3, r4, r5, lr}
 8016ece:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016ed0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016ed4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016ed6:	f006 f85d 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016eda:	2063      	movs	r0, #99	; 0x63
 8016edc:	f006 f860 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ee0:	480b      	ldr	r0, [pc, #44]	; (8016f10 <GUI_Text_D75+0x44>)
 8016ee2:	f006 f851 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016ee6:	4629      	mov	r1, r5
 8016ee8:	4620      	mov	r0, r4
 8016eea:	2244      	movs	r2, #68	; 0x44
 8016eec:	f006 f916 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8016ef0:	f104 000f 	add.w	r0, r4, #15
 8016ef4:	4629      	mov	r1, r5
 8016ef6:	2237      	movs	r2, #55	; 0x37
 8016ef8:	b280      	uxth	r0, r0
 8016efa:	f006 f90f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016efe:	f104 001f 	add.w	r0, r4, #31
 8016f02:	4629      	mov	r1, r5
 8016f04:	2235      	movs	r2, #53	; 0x35
 8016f06:	b280      	uxth	r0, r0
}
 8016f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016f0c:	f006 b906 	b.w	801d11c <TFT_DrawChar>
 8016f10:	200001b0 	.word	0x200001b0

08016f14 <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8016f14:	b538      	push	{r3, r4, r5, lr}
 8016f16:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016f18:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f1c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016f1e:	f006 f839 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f22:	2063      	movs	r0, #99	; 0x63
 8016f24:	f006 f83c 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016f28:	4815      	ldr	r0, [pc, #84]	; (8016f80 <GUI_Text_CIE_xy+0x6c>)
 8016f2a:	f006 f82d 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016f2e:	4621      	mov	r1, r4
 8016f30:	4628      	mov	r0, r5
 8016f32:	2243      	movs	r2, #67	; 0x43
 8016f34:	f006 f8f2 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016f38:	f105 000d 	add.w	r0, r5, #13
 8016f3c:	4621      	mov	r1, r4
 8016f3e:	2249      	movs	r2, #73	; 0x49
 8016f40:	b280      	uxth	r0, r0
 8016f42:	f006 f8eb 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016f46:	f105 001b 	add.w	r0, r5, #27
 8016f4a:	4621      	mov	r1, r4
 8016f4c:	2245      	movs	r2, #69	; 0x45
 8016f4e:	b280      	uxth	r0, r0
 8016f50:	f006 f8e4 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016f54:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 8016f56:	480b      	ldr	r0, [pc, #44]	; (8016f84 <GUI_Text_CIE_xy+0x70>)
 8016f58:	f006 f816 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016f5c:	b2a4      	uxth	r4, r4
 8016f5e:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016f62:	4621      	mov	r1, r4
 8016f64:	2278      	movs	r2, #120	; 0x78
 8016f66:	b280      	uxth	r0, r0
 8016f68:	f006 f8d8 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 8016f6c:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 8016f70:	4621      	mov	r1, r4
 8016f72:	2279      	movs	r2, #121	; 0x79
 8016f74:	b280      	uxth	r0, r0
}
 8016f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 8016f7a:	f006 b8cf 	b.w	801d11c <TFT_DrawChar>
 8016f7e:	bf00      	nop
 8016f80:	200001b0 	.word	0x200001b0
 8016f84:	200001c0 	.word	0x200001c0

08016f88 <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 8016f88:	b538      	push	{r3, r4, r5, lr}
 8016f8a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016f8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f90:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016f92:	f005 ffff 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f96:	2063      	movs	r0, #99	; 0x63
 8016f98:	f006 f802 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016f9c:	480b      	ldr	r0, [pc, #44]	; (8016fcc <GUI_Text_CRI+0x44>)
 8016f9e:	f005 fff3 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 8016fa2:	f104 001b 	add.w	r0, r4, #27
 8016fa6:	4629      	mov	r1, r5
 8016fa8:	2249      	movs	r2, #73	; 0x49
 8016faa:	b280      	uxth	r0, r0
 8016fac:	f006 f8b6 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8016fb0:	4629      	mov	r1, r5
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	2243      	movs	r2, #67	; 0x43
 8016fb6:	f006 f8b1 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 8016fba:	f104 000d 	add.w	r0, r4, #13
 8016fbe:	4629      	mov	r1, r5
 8016fc0:	2252      	movs	r2, #82	; 0x52
 8016fc2:	b280      	uxth	r0, r0
}
 8016fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 8016fc8:	f006 b8a8 	b.w	801d11c <TFT_DrawChar>
 8016fcc:	200001b0 	.word	0x200001b0

08016fd0 <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8016fd0:	b538      	push	{r3, r4, r5, lr}
 8016fd2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016fd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016fd8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016fda:	f005 ffdb 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016fde:	2063      	movs	r0, #99	; 0x63
 8016fe0:	f005 ffde 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016fe4:	480b      	ldr	r0, [pc, #44]	; (8017014 <GUI_Text_CQS+0x44>)
 8016fe6:	f005 ffcf 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016fea:	4629      	mov	r1, r5
 8016fec:	4620      	mov	r0, r4
 8016fee:	2243      	movs	r2, #67	; 0x43
 8016ff0:	f006 f894 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8016ff4:	f104 000d 	add.w	r0, r4, #13
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	2251      	movs	r2, #81	; 0x51
 8016ffc:	b280      	uxth	r0, r0
 8016ffe:	f006 f88d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8017002:	f104 001c 	add.w	r0, r4, #28
 8017006:	4629      	mov	r1, r5
 8017008:	2253      	movs	r2, #83	; 0x53
 801700a:	b280      	uxth	r0, r0
}
 801700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8017010:	f006 b884 	b.w	801d11c <TFT_DrawChar>
 8017014:	200001b0 	.word	0x200001b0

08017018 <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801701c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017020:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017022:	f005 ffb7 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017026:	2063      	movs	r0, #99	; 0x63
 8017028:	f005 ffba 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801702c:	480b      	ldr	r0, [pc, #44]	; (801705c <GUI_Text_SP+0x44>)
 801702e:	f005 ffab 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 8017032:	f104 000d 	add.w	r0, r4, #13
 8017036:	4629      	mov	r1, r5
 8017038:	222f      	movs	r2, #47	; 0x2f
 801703a:	b280      	uxth	r0, r0
 801703c:	f006 f86e 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 8017040:	4629      	mov	r1, r5
 8017042:	4620      	mov	r0, r4
 8017044:	2253      	movs	r2, #83	; 0x53
 8017046:	f006 f869 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 801704a:	f104 001c 	add.w	r0, r4, #28
 801704e:	4629      	mov	r1, r5
 8017050:	2250      	movs	r2, #80	; 0x50
 8017052:	b280      	uxth	r0, r0
}
 8017054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 8017058:	f006 b860 	b.w	801d11c <TFT_DrawChar>
 801705c:	200001b0 	.word	0x200001b0

08017060 <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 8017060:	b538      	push	{r3, r4, r5, lr}
 8017062:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017064:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017068:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801706a:	f005 ff93 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801706e:	2063      	movs	r0, #99	; 0x63
 8017070:	f005 ff96 	bl	801cfa0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8017074:	480a      	ldr	r0, [pc, #40]	; (80170a0 <GUI_Text_lambda_d+0x40>)
 8017076:	f005 ff87 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 801707a:	4629      	mov	r1, r5
 801707c:	227f      	movs	r2, #127	; 0x7f
 801707e:	4620      	mov	r0, r4
 8017080:	f006 f84c 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017084:	4807      	ldr	r0, [pc, #28]	; (80170a4 <GUI_Text_lambda_d+0x44>)
 8017086:	f005 ff7f 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 801708a:	1de9      	adds	r1, r5, #7
 801708c:	f104 000f 	add.w	r0, r4, #15
 8017090:	2264      	movs	r2, #100	; 0x64
 8017092:	b289      	uxth	r1, r1
 8017094:	b280      	uxth	r0, r0
}
 8017096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 801709a:	f006 b83f 	b.w	801d11c <TFT_DrawChar>
 801709e:	bf00      	nop
 80170a0:	200001b0 	.word	0x200001b0
 80170a4:	200001c0 	.word	0x200001c0

080170a8 <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 80170a8:	b538      	push	{r3, r4, r5, lr}
 80170aa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80170ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80170b0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80170b2:	f005 ff6f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170b6:	2063      	movs	r0, #99	; 0x63
 80170b8:	f005 ff72 	bl	801cfa0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 80170bc:	4824      	ldr	r0, [pc, #144]	; (8017150 <GUI_Text_V_lambda+0xa8>)
 80170be:	f005 ff63 	bl	801cf88 <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 80170c2:	f104 000d 	add.w	r0, r4, #13
 80170c6:	4629      	mov	r1, r5
 80170c8:	2228      	movs	r2, #40	; 0x28
 80170ca:	b280      	uxth	r0, r0
 80170cc:	f006 f826 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 80170d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80170d4:	4629      	mov	r1, r5
 80170d6:	2229      	movs	r2, #41	; 0x29
 80170d8:	b280      	uxth	r0, r0
 80170da:	f006 f81f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 80170de:	4629      	mov	r1, r5
 80170e0:	4620      	mov	r0, r4
 80170e2:	2256      	movs	r2, #86	; 0x56
 80170e4:	f006 f81a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 80170e8:	f104 001a 	add.w	r0, r4, #26
 80170ec:	4629      	mov	r1, r5
 80170ee:	227f      	movs	r2, #127	; 0x7f
 80170f0:	b280      	uxth	r0, r0
 80170f2:	f006 f813 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 80170f6:	f104 0035 	add.w	r0, r4, #53	; 0x35
 80170fa:	4629      	mov	r1, r5
 80170fc:	222f      	movs	r2, #47	; 0x2f
 80170fe:	b280      	uxth	r0, r0
 8017100:	f006 f80c 	bl	801d11c <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8017104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017108:	4629      	mov	r1, r5
 801710a:	2227      	movs	r2, #39	; 0x27
 801710c:	b280      	uxth	r0, r0
 801710e:	f006 f805 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8017112:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8017116:	4629      	mov	r1, r5
 8017118:	2228      	movs	r2, #40	; 0x28
 801711a:	b280      	uxth	r0, r0
 801711c:	f005 fffe 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8017120:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8017124:	4629      	mov	r1, r5
 8017126:	2229      	movs	r2, #41	; 0x29
 8017128:	b280      	uxth	r0, r0
 801712a:	f005 fff7 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 801712e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8017132:	4629      	mov	r1, r5
 8017134:	2256      	movs	r2, #86	; 0x56
 8017136:	b280      	uxth	r0, r0
 8017138:	f005 fff0 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 801713c:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8017140:	4629      	mov	r1, r5
 8017142:	227f      	movs	r2, #127	; 0x7f
 8017144:	b280      	uxth	r0, r0
		
}
 8017146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 801714a:	f005 bfe7 	b.w	801d11c <TFT_DrawChar>
 801714e:	bf00      	nop
 8017150:	200001b0 	.word	0x200001b0

08017154 <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 8017154:	b538      	push	{r3, r4, r5, lr}
 8017156:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017158:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801715c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801715e:	f005 ff19 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017162:	2063      	movs	r0, #99	; 0x63
 8017164:	f005 ff1c 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017168:	4808      	ldr	r0, [pc, #32]	; (801718c <GUI_Text_deltaE+0x38>)
 801716a:	f005 ff0d 	bl	801cf88 <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 801716e:	4629      	mov	r1, r5
 8017170:	4620      	mov	r0, r4
 8017172:	2280      	movs	r2, #128	; 0x80
 8017174:	f005 ffd2 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 8017178:	f104 000e 	add.w	r0, r4, #14
 801717c:	4629      	mov	r1, r5
 801717e:	2245      	movs	r2, #69	; 0x45
 8017180:	b280      	uxth	r0, r0
}
 8017182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 8017186:	f005 bfc9 	b.w	801d11c <TFT_DrawChar>
 801718a:	bf00      	nop
 801718c:	200001b0 	.word	0x200001b0

08017190 <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8017190:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017194:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017196:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801719a:	4616      	mov	r6, r2
 801719c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801719e:	f005 fef9 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80171a2:	2063      	movs	r0, #99	; 0x63
 80171a4:	f005 fefc 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 80171a8:	482b      	ldr	r0, [pc, #172]	; (8017258 <GUI_TextEn_umol+0xc8>)
 80171aa:	f005 feed 	bl	801cf88 <TFT_SetFont>
	
	if(deg){
 80171ae:	2e00      	cmp	r6, #0
 80171b0:	d050      	beq.n	8017254 <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 80171b2:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 80171b4:	4629      	mov	r1, r5
 80171b6:	4620      	mov	r0, r4
 80171b8:	f005 ffb0 	bl	801d11c <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 80171bc:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 80171c0:	f104 0008 	add.w	r0, r4, #8
 80171c4:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 80171c6:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 80171c8:	222c      	movs	r2, #44	; 0x2c
 80171ca:	b280      	uxth	r0, r0
 80171cc:	f005 ffa6 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 80171d0:	4629      	mov	r1, r5
 80171d2:	4638      	mov	r0, r7
 80171d4:	222e      	movs	r2, #46	; 0x2e
 80171d6:	f005 ffa1 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 80171da:	f104 0016 	add.w	r0, r4, #22
 80171de:	4629      	mov	r1, r5
 80171e0:	222b      	movs	r2, #43	; 0x2b
 80171e2:	b280      	uxth	r0, r0
 80171e4:	f005 ff9a 	bl	801d11c <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 80171e8:	f105 030a 	add.w	r3, r5, #10
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80171f2:	f104 0219 	add.w	r2, r4, #25
 80171f6:	4619      	mov	r1, r3
 80171f8:	4620      	mov	r0, r4
 80171fa:	f8cd 8000 	str.w	r8, [sp]
 80171fe:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8017200:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8017204:	f005 fc3a 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8017208:	b2b6      	uxth	r6, r6
 801720a:	f104 000a 	add.w	r0, r4, #10
 801720e:	4631      	mov	r1, r6
 8017210:	223b      	movs	r2, #59	; 0x3b
 8017212:	b280      	uxth	r0, r0
 8017214:	f005 ff82 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 8017218:	1ca0      	adds	r0, r4, #2
 801721a:	4631      	mov	r1, r6
 801721c:	222c      	movs	r2, #44	; 0x2c
 801721e:	b280      	uxth	r0, r0
 8017220:	f005 ff7c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8017224:	f105 030f 	add.w	r3, r5, #15
 8017228:	f104 0211 	add.w	r2, r4, #17
 801722c:	f105 010e 	add.w	r1, r5, #14
 8017230:	4638      	mov	r0, r7
 8017232:	f8cd 8000 	str.w	r8, [sp]
 8017236:	b29b      	uxth	r3, r3
 8017238:	b292      	uxth	r2, r2
 801723a:	b289      	uxth	r1, r1
 801723c:	f005 fc93 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8017240:	f104 0013 	add.w	r0, r4, #19
 8017244:	2232      	movs	r2, #50	; 0x32
 8017246:	4631      	mov	r1, r6
 8017248:	b280      	uxth	r0, r0
}
 801724a:	b002      	add	sp, #8
 801724c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8017250:	f005 bf64 	b.w	801d11c <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 8017254:	223a      	movs	r2, #58	; 0x3a
 8017256:	e7ad      	b.n	80171b4 <GUI_TextEn_umol+0x24>
 8017258:	20000190 	.word	0x20000190

0801725c <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 801725c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017260:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017262:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017266:	460d      	mov	r5, r1
 8017268:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 801726a:	f005 fe93 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801726e:	2063      	movs	r0, #99	; 0x63
 8017270:	f005 fe96 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8017274:	483b      	ldr	r0, [pc, #236]	; (8017364 <GUI_TextEn_umol_sr+0x108>)
 8017276:	f005 fe87 	bl	801cf88 <TFT_SetFont>
 801727a:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 801727e:	2e00      	cmp	r6, #0
 8017280:	d06d      	beq.n	801735e <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 8017282:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 8017284:	4629      	mov	r1, r5
 8017286:	b280      	uxth	r0, r0
 8017288:	f005 ff48 	bl	801d11c <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 801728c:	f104 0011 	add.w	r0, r4, #17
 8017290:	4629      	mov	r1, r5
 8017292:	222c      	movs	r2, #44	; 0x2c
 8017294:	b280      	uxth	r0, r0
 8017296:	f005 ff41 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 801729a:	f104 0019 	add.w	r0, r4, #25
 801729e:	4629      	mov	r1, r5
 80172a0:	222e      	movs	r2, #46	; 0x2e
 80172a2:	b280      	uxth	r0, r0
 80172a4:	f005 ff3a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 80172a8:	f104 001f 	add.w	r0, r4, #31
 80172ac:	4629      	mov	r1, r5
 80172ae:	222b      	movs	r2, #43	; 0x2b
 80172b0:	b280      	uxth	r0, r0
 80172b2:	f005 ff33 	bl	801d11c <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80172b6:	f105 030a 	add.w	r3, r5, #10
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80172c0:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 80172c4:	1ce0      	adds	r0, r4, #3
 80172c6:	4619      	mov	r1, r3
 80172c8:	f8cd 8000 	str.w	r8, [sp]
 80172cc:	b292      	uxth	r2, r2
 80172ce:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 80172d0:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80172d4:	f005 fbd2 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 80172d8:	b2b6      	uxth	r6, r6
 80172da:	f104 000d 	add.w	r0, r4, #13
 80172de:	4631      	mov	r1, r6
 80172e0:	223b      	movs	r2, #59	; 0x3b
 80172e2:	b280      	uxth	r0, r0
 80172e4:	f005 ff1a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 80172e8:	1d60      	adds	r0, r4, #5
 80172ea:	4631      	mov	r1, r6
 80172ec:	222c      	movs	r2, #44	; 0x2c
 80172ee:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 80172f0:	f105 070e 	add.w	r7, r5, #14
 80172f4:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 80172f6:	f005 ff11 	bl	801d11c <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 80172fa:	b2bf      	uxth	r7, r7
 80172fc:	b2ad      	uxth	r5, r5
 80172fe:	f104 0214 	add.w	r2, r4, #20
 8017302:	f104 0013 	add.w	r0, r4, #19
 8017306:	462b      	mov	r3, r5
 8017308:	4639      	mov	r1, r7
 801730a:	f8cd 8000 	str.w	r8, [sp]
 801730e:	b292      	uxth	r2, r2
 8017310:	b280      	uxth	r0, r0
 8017312:	f005 fc28 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 8017316:	f104 0016 	add.w	r0, r4, #22
 801731a:	4631      	mov	r1, r6
 801731c:	2232      	movs	r2, #50	; 0x32
 801731e:	b280      	uxth	r0, r0
 8017320:	f005 fefc 	bl	801d11c <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 8017324:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8017328:	f104 001e 	add.w	r0, r4, #30
 801732c:	462b      	mov	r3, r5
 801732e:	4639      	mov	r1, r7
 8017330:	f8cd 8000 	str.w	r8, [sp]
 8017334:	b292      	uxth	r2, r2
 8017336:	b280      	uxth	r0, r0
 8017338:	f005 fc15 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 801733c:	f104 0020 	add.w	r0, r4, #32
 8017340:	4631      	mov	r1, r6
 8017342:	2232      	movs	r2, #50	; 0x32
 8017344:	b280      	uxth	r0, r0
 8017346:	f005 fee9 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 801734a:	f104 0027 	add.w	r0, r4, #39	; 0x27
 801734e:	2231      	movs	r2, #49	; 0x31
 8017350:	4631      	mov	r1, r6
 8017352:	b280      	uxth	r0, r0
}
 8017354:	b002      	add	sp, #8
 8017356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 801735a:	f005 bedf 	b.w	801d11c <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 801735e:	223a      	movs	r2, #58	; 0x3a
 8017360:	e790      	b.n	8017284 <GUI_TextEn_umol_sr+0x28>
 8017362:	bf00      	nop
 8017364:	20000190 	.word	0x20000190

08017368 <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 8017368:	b538      	push	{r3, r4, r5, lr}
 801736a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801736c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017370:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017372:	f005 fe0f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017376:	2063      	movs	r0, #99	; 0x63
 8017378:	f005 fe12 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801737c:	480a      	ldr	r0, [pc, #40]	; (80173a8 <GUI_Text_On+0x40>)
 801737e:	f005 fe03 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8017382:	4629      	mov	r1, r5
 8017384:	224f      	movs	r2, #79	; 0x4f
 8017386:	4620      	mov	r0, r4
 8017388:	f005 fec8 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801738c:	4807      	ldr	r0, [pc, #28]	; (80173ac <GUI_Text_On+0x44>)
 801738e:	f005 fdfb 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8017392:	1ca9      	adds	r1, r5, #2
 8017394:	f104 0010 	add.w	r0, r4, #16
 8017398:	226e      	movs	r2, #110	; 0x6e
 801739a:	b289      	uxth	r1, r1
 801739c:	b280      	uxth	r0, r0
	
}
 801739e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 80173a2:	f005 bebb 	b.w	801d11c <TFT_DrawChar>
 80173a6:	bf00      	nop
 80173a8:	200001b0 	.word	0x200001b0
 80173ac:	200001c0 	.word	0x200001c0

080173b0 <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 80173b0:	b570      	push	{r4, r5, r6, lr}
 80173b2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80173b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80173b8:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 80173ba:	f005 fdeb 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80173be:	2063      	movs	r0, #99	; 0x63
 80173c0:	f005 fdee 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 80173c4:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 80173c6:	480e      	ldr	r0, [pc, #56]	; (8017400 <GUI_Text_Off+0x50>)
 80173c8:	f005 fdde 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 80173cc:	b2a4      	uxth	r4, r4
 80173ce:	f105 000d 	add.w	r0, r5, #13
 80173d2:	4621      	mov	r1, r4
 80173d4:	2266      	movs	r2, #102	; 0x66
 80173d6:	b280      	uxth	r0, r0
 80173d8:	f005 fea0 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 80173dc:	f105 0017 	add.w	r0, r5, #23
 80173e0:	4621      	mov	r1, r4
 80173e2:	2266      	movs	r2, #102	; 0x66
 80173e4:	b280      	uxth	r0, r0
 80173e6:	f005 fe99 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80173ea:	4806      	ldr	r0, [pc, #24]	; (8017404 <GUI_Text_Off+0x54>)
 80173ec:	f005 fdcc 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 80173f0:	4631      	mov	r1, r6
 80173f2:	4628      	mov	r0, r5
 80173f4:	224f      	movs	r2, #79	; 0x4f
}
 80173f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 80173fa:	f005 be8f 	b.w	801d11c <TFT_DrawChar>
 80173fe:	bf00      	nop
 8017400:	200001c0 	.word	0x200001c0
 8017404:	200001b0 	.word	0x200001b0

08017408 <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 8017408:	b538      	push	{r3, r4, r5, lr}
 801740a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801740c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017410:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017412:	f005 fdbf 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017416:	2063      	movs	r0, #99	; 0x63
 8017418:	f005 fdc2 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801741c:	4815      	ldr	r0, [pc, #84]	; (8017474 <GUI_Text_EbEr+0x6c>)
 801741e:	f005 fdb3 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8017422:	1ca1      	adds	r1, r4, #2
 8017424:	f105 0013 	add.w	r0, r5, #19
 8017428:	222c      	movs	r2, #44	; 0x2c
 801742a:	b289      	uxth	r1, r1
 801742c:	b280      	uxth	r0, r0
 801742e:	f005 fe75 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 8017432:	4621      	mov	r1, r4
 8017434:	4628      	mov	r0, r5
 8017436:	2245      	movs	r2, #69	; 0x45
 8017438:	f005 fe70 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 801743c:	f105 0020 	add.w	r0, r5, #32
 8017440:	4621      	mov	r1, r4
 8017442:	2245      	movs	r2, #69	; 0x45
 8017444:	b280      	uxth	r0, r0
 8017446:	f005 fe69 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 801744a:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 801744c:	480a      	ldr	r0, [pc, #40]	; (8017478 <GUI_Text_EbEr+0x70>)
 801744e:	f005 fd9b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8017452:	b2a4      	uxth	r4, r4
 8017454:	f105 0012 	add.w	r0, r5, #18
 8017458:	4621      	mov	r1, r4
 801745a:	2242      	movs	r2, #66	; 0x42
 801745c:	b280      	uxth	r0, r0
 801745e:	f005 fe5d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 8017462:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8017466:	4621      	mov	r1, r4
 8017468:	2252      	movs	r2, #82	; 0x52
 801746a:	b280      	uxth	r0, r0
}
 801746c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 8017470:	f005 be54 	b.w	801d11c <TFT_DrawChar>
 8017474:	200001b0 	.word	0x200001b0
 8017478:	20000218 	.word	0x20000218

0801747c <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 801747c:	b538      	push	{r3, r4, r5, lr}
 801747e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017480:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017484:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017486:	f005 fd85 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801748a:	2063      	movs	r0, #99	; 0x63
 801748c:	f005 fd88 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017490:	4815      	ldr	r0, [pc, #84]	; (80174e8 <GUI_Text_LbLr+0x6c>)
 8017492:	f005 fd79 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8017496:	1ca1      	adds	r1, r4, #2
 8017498:	f105 0013 	add.w	r0, r5, #19
 801749c:	222c      	movs	r2, #44	; 0x2c
 801749e:	b289      	uxth	r1, r1
 80174a0:	b280      	uxth	r0, r0
 80174a2:	f005 fe3b 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 80174a6:	4621      	mov	r1, r4
 80174a8:	4628      	mov	r0, r5
 80174aa:	224c      	movs	r2, #76	; 0x4c
 80174ac:	f005 fe36 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 80174b0:	f105 001e 	add.w	r0, r5, #30
 80174b4:	4621      	mov	r1, r4
 80174b6:	224c      	movs	r2, #76	; 0x4c
 80174b8:	b280      	uxth	r0, r0
 80174ba:	f005 fe2f 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 80174be:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 80174c0:	480a      	ldr	r0, [pc, #40]	; (80174ec <GUI_Text_LbLr+0x70>)
 80174c2:	f005 fd61 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 80174c6:	b2a4      	uxth	r4, r4
 80174c8:	f105 0012 	add.w	r0, r5, #18
 80174cc:	4621      	mov	r1, r4
 80174ce:	2242      	movs	r2, #66	; 0x42
 80174d0:	b280      	uxth	r0, r0
 80174d2:	f005 fe23 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 80174d6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80174da:	4621      	mov	r1, r4
 80174dc:	2252      	movs	r2, #82	; 0x52
 80174de:	b280      	uxth	r0, r0
}
 80174e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 80174e4:	f005 be1a 	b.w	801d11c <TFT_DrawChar>
 80174e8:	200001b0 	.word	0x200001b0
 80174ec:	20000218 	.word	0x20000218

080174f0 <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 80174f0:	b538      	push	{r3, r4, r5, lr}
 80174f2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80174f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 80174f8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80174fa:	f005 fd4b 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80174fe:	2063      	movs	r0, #99	; 0x63
 8017500:	f005 fd4e 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017504:	481f      	ldr	r0, [pc, #124]	; (8017584 <GUI_TextEn_Language+0x94>)
 8017506:	f005 fd3f 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 801750a:	4621      	mov	r1, r4
 801750c:	224c      	movs	r2, #76	; 0x4c
 801750e:	4628      	mov	r0, r5
 8017510:	f005 fe04 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 8017514:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017516:	481c      	ldr	r0, [pc, #112]	; (8017588 <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8017518:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801751a:	f005 fd35 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 801751e:	f105 000e 	add.w	r0, r5, #14
 8017522:	4621      	mov	r1, r4
 8017524:	2261      	movs	r2, #97	; 0x61
 8017526:	b280      	uxth	r0, r0
 8017528:	f005 fdf8 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 801752c:	f105 001a 	add.w	r0, r5, #26
 8017530:	4621      	mov	r1, r4
 8017532:	226e      	movs	r2, #110	; 0x6e
 8017534:	b280      	uxth	r0, r0
 8017536:	f005 fdf1 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 801753a:	f105 0027 	add.w	r0, r5, #39	; 0x27
 801753e:	4621      	mov	r1, r4
 8017540:	2267      	movs	r2, #103	; 0x67
 8017542:	b280      	uxth	r0, r0
 8017544:	f005 fdea 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8017548:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801754c:	4621      	mov	r1, r4
 801754e:	2261      	movs	r2, #97	; 0x61
 8017550:	b280      	uxth	r0, r0
 8017552:	f005 fde3 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 8017556:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801755a:	4621      	mov	r1, r4
 801755c:	2275      	movs	r2, #117	; 0x75
 801755e:	b280      	uxth	r0, r0
 8017560:	f005 fddc 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 8017564:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8017568:	4621      	mov	r1, r4
 801756a:	2267      	movs	r2, #103	; 0x67
 801756c:	b280      	uxth	r0, r0
 801756e:	f005 fdd5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 8017572:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017576:	4621      	mov	r1, r4
 8017578:	2265      	movs	r2, #101	; 0x65
 801757a:	b280      	uxth	r0, r0
}
 801757c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 8017580:	f005 bdcc 	b.w	801d11c <TFT_DrawChar>
 8017584:	200001b8 	.word	0x200001b8
 8017588:	200001c8 	.word	0x200001c8

0801758c <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 801758c:	b538      	push	{r3, r4, r5, lr}
 801758e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017590:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017594:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017596:	f005 fcfd 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801759a:	2063      	movs	r0, #99	; 0x63
 801759c:	f005 fd00 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80175a0:	481c      	ldr	r0, [pc, #112]	; (8017614 <GUI_TextEn_English+0x88>)
 80175a2:	f005 fcf1 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 80175a6:	4621      	mov	r1, r4
 80175a8:	2245      	movs	r2, #69	; 0x45
 80175aa:	4628      	mov	r0, r5
 80175ac:	f005 fdb6 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 80175b0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80175b2:	4819      	ldr	r0, [pc, #100]	; (8017618 <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 80175b4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80175b6:	f005 fce7 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 80175ba:	f105 0010 	add.w	r0, r5, #16
 80175be:	4621      	mov	r1, r4
 80175c0:	226e      	movs	r2, #110	; 0x6e
 80175c2:	b280      	uxth	r0, r0
 80175c4:	f005 fdaa 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 80175c8:	f105 001d 	add.w	r0, r5, #29
 80175cc:	4621      	mov	r1, r4
 80175ce:	2267      	movs	r2, #103	; 0x67
 80175d0:	b280      	uxth	r0, r0
 80175d2:	f005 fda3 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 80175d6:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 80175da:	4621      	mov	r1, r4
 80175dc:	226c      	movs	r2, #108	; 0x6c
 80175de:	b280      	uxth	r0, r0
 80175e0:	f005 fd9c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 80175e4:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 80175e8:	4621      	mov	r1, r4
 80175ea:	2269      	movs	r2, #105	; 0x69
 80175ec:	b280      	uxth	r0, r0
 80175ee:	f005 fd95 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 80175f2:	f105 0035 	add.w	r0, r5, #53	; 0x35
 80175f6:	4621      	mov	r1, r4
 80175f8:	2273      	movs	r2, #115	; 0x73
 80175fa:	b280      	uxth	r0, r0
 80175fc:	f005 fd8e 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 8017600:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8017604:	4621      	mov	r1, r4
 8017606:	2268      	movs	r2, #104	; 0x68
 8017608:	b280      	uxth	r0, r0
	

}
 801760a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 801760e:	f005 bd85 	b.w	801d11c <TFT_DrawChar>
 8017612:	bf00      	nop
 8017614:	200001b8 	.word	0x200001b8
 8017618:	200001c8 	.word	0x200001c8

0801761c <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 801761c:	b538      	push	{r3, r4, r5, lr}
 801761e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017620:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017624:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017626:	f005 fcb5 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801762a:	2063      	movs	r0, #99	; 0x63
 801762c:	f005 fcb8 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017630:	4811      	ldr	r0, [pc, #68]	; (8017678 <GUI_TextEn_Info+0x5c>)
 8017632:	f005 fca9 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8017636:	4621      	mov	r1, r4
 8017638:	2249      	movs	r2, #73	; 0x49
 801763a:	4628      	mov	r0, r5
 801763c:	f005 fd6e 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 8017640:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017642:	480e      	ldr	r0, [pc, #56]	; (801767c <GUI_TextEn_Info+0x60>)
 8017644:	f005 fca0 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8017648:	b2a4      	uxth	r4, r4
 801764a:	f105 0012 	add.w	r0, r5, #18
 801764e:	4621      	mov	r1, r4
 8017650:	2266      	movs	r2, #102	; 0x66
 8017652:	b280      	uxth	r0, r0
 8017654:	f005 fd62 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 8017658:	f105 0008 	add.w	r0, r5, #8
 801765c:	4621      	mov	r1, r4
 801765e:	226e      	movs	r2, #110	; 0x6e
 8017660:	b280      	uxth	r0, r0
 8017662:	f005 fd5b 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 8017666:	f105 001d 	add.w	r0, r5, #29
 801766a:	4621      	mov	r1, r4
 801766c:	226f      	movs	r2, #111	; 0x6f
 801766e:	b280      	uxth	r0, r0
}
 8017670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 8017674:	f005 bd52 	b.w	801d11c <TFT_DrawChar>
 8017678:	200001b8 	.word	0x200001b8
 801767c:	200001c8 	.word	0x200001c8

08017680 <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 8017680:	b538      	push	{r3, r4, r5, lr}
 8017682:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017684:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017688:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801768a:	f005 fc83 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801768e:	2063      	movs	r0, #99	; 0x63
 8017690:	f005 fc86 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017694:	481f      	ldr	r0, [pc, #124]	; (8017714 <GUI_TextEn_Radiance+0x94>)
 8017696:	f005 fc77 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 801769a:	4621      	mov	r1, r4
 801769c:	2252      	movs	r2, #82	; 0x52
 801769e:	4628      	mov	r0, r5
 80176a0:	f005 fd3c 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 80176a4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80176a6:	481c      	ldr	r0, [pc, #112]	; (8017718 <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 80176a8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80176aa:	f005 fc6d 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 80176ae:	f105 0010 	add.w	r0, r5, #16
 80176b2:	4621      	mov	r1, r4
 80176b4:	2261      	movs	r2, #97	; 0x61
 80176b6:	b280      	uxth	r0, r0
 80176b8:	f005 fd30 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 80176bc:	f105 001c 	add.w	r0, r5, #28
 80176c0:	4621      	mov	r1, r4
 80176c2:	2264      	movs	r2, #100	; 0x64
 80176c4:	b280      	uxth	r0, r0
 80176c6:	f005 fd29 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 80176ca:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80176ce:	4621      	mov	r1, r4
 80176d0:	2269      	movs	r2, #105	; 0x69
 80176d2:	b280      	uxth	r0, r0
 80176d4:	f005 fd22 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 80176d8:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80176dc:	4621      	mov	r1, r4
 80176de:	2261      	movs	r2, #97	; 0x61
 80176e0:	b280      	uxth	r0, r0
 80176e2:	f005 fd1b 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 80176e6:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 80176ea:	4621      	mov	r1, r4
 80176ec:	226e      	movs	r2, #110	; 0x6e
 80176ee:	b280      	uxth	r0, r0
 80176f0:	f005 fd14 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 80176f4:	f105 0047 	add.w	r0, r5, #71	; 0x47
 80176f8:	4621      	mov	r1, r4
 80176fa:	2263      	movs	r2, #99	; 0x63
 80176fc:	b280      	uxth	r0, r0
 80176fe:	f005 fd0d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 8017702:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8017706:	4621      	mov	r1, r4
 8017708:	2265      	movs	r2, #101	; 0x65
 801770a:	b280      	uxth	r0, r0
}
 801770c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 8017710:	f005 bd04 	b.w	801d11c <TFT_DrawChar>
 8017714:	200001b8 	.word	0x200001b8
 8017718:	200001c8 	.word	0x200001c8

0801771c <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 801771c:	b538      	push	{r3, r4, r5, lr}
 801771e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017720:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017724:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017726:	f005 fc35 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801772a:	2063      	movs	r0, #99	; 0x63
 801772c:	f005 fc38 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017730:	4826      	ldr	r0, [pc, #152]	; (80177cc <GUI_TextEn_Irradiance+0xb0>)
 8017732:	f005 fc29 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8017736:	4621      	mov	r1, r4
 8017738:	2249      	movs	r2, #73	; 0x49
 801773a:	4628      	mov	r0, r5
 801773c:	f005 fcee 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 8017740:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017742:	4823      	ldr	r0, [pc, #140]	; (80177d0 <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 8017744:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017746:	f005 fc1f 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 801774a:	f105 0009 	add.w	r0, r5, #9
 801774e:	4621      	mov	r1, r4
 8017750:	2272      	movs	r2, #114	; 0x72
 8017752:	b280      	uxth	r0, r0
 8017754:	f005 fce2 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 8017758:	f105 0015 	add.w	r0, r5, #21
 801775c:	4621      	mov	r1, r4
 801775e:	2272      	movs	r2, #114	; 0x72
 8017760:	b280      	uxth	r0, r0
 8017762:	f005 fcdb 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 8017766:	f105 0020 	add.w	r0, r5, #32
 801776a:	4621      	mov	r1, r4
 801776c:	2261      	movs	r2, #97	; 0x61
 801776e:	b280      	uxth	r0, r0
 8017770:	f005 fcd4 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 8017774:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8017778:	4621      	mov	r1, r4
 801777a:	2264      	movs	r2, #100	; 0x64
 801777c:	b280      	uxth	r0, r0
 801777e:	f005 fccd 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 8017782:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8017786:	4621      	mov	r1, r4
 8017788:	2269      	movs	r2, #105	; 0x69
 801778a:	b280      	uxth	r0, r0
 801778c:	f005 fcc6 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 8017790:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8017794:	4621      	mov	r1, r4
 8017796:	2261      	movs	r2, #97	; 0x61
 8017798:	b280      	uxth	r0, r0
 801779a:	f005 fcbf 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 801779e:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80177a2:	4621      	mov	r1, r4
 80177a4:	226e      	movs	r2, #110	; 0x6e
 80177a6:	b280      	uxth	r0, r0
 80177a8:	f005 fcb8 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 80177ac:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80177b0:	4621      	mov	r1, r4
 80177b2:	2263      	movs	r2, #99	; 0x63
 80177b4:	b280      	uxth	r0, r0
 80177b6:	f005 fcb1 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 80177ba:	f105 0063 	add.w	r0, r5, #99	; 0x63
 80177be:	4621      	mov	r1, r4
 80177c0:	2265      	movs	r2, #101	; 0x65
 80177c2:	b280      	uxth	r0, r0
}
 80177c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 80177c8:	f005 bca8 	b.w	801d11c <TFT_DrawChar>
 80177cc:	200001b8 	.word	0x200001b8
 80177d0:	200001c8 	.word	0x200001c8

080177d4 <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 80177d4:	b538      	push	{r3, r4, r5, lr}
 80177d6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80177d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80177dc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80177de:	f005 fbd9 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80177e2:	2063      	movs	r0, #99	; 0x63
 80177e4:	f005 fbdc 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80177e8:	4834      	ldr	r0, [pc, #208]	; (80178bc <GUI_TextMsgEn_HighIrradiance+0xe8>)
 80177ea:	f005 fbcd 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 80177ee:	4621      	mov	r1, r4
 80177f0:	2248      	movs	r2, #72	; 0x48
 80177f2:	4628      	mov	r0, r5
 80177f4:	f005 fc92 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 80177f8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80177fa:	4831      	ldr	r0, [pc, #196]	; (80178c0 <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 80177fc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80177fe:	f005 fbc3 	bl	801cf88 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 8017802:	f105 0010 	add.w	r0, r5, #16
 8017806:	4621      	mov	r1, r4
 8017808:	2269      	movs	r2, #105	; 0x69
 801780a:	b280      	uxth	r0, r0
 801780c:	f005 fc86 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8017810:	f105 0017 	add.w	r0, r5, #23
 8017814:	4621      	mov	r1, r4
 8017816:	2267      	movs	r2, #103	; 0x67
 8017818:	b280      	uxth	r0, r0
 801781a:	f005 fc7f 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 801781e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8017822:	4621      	mov	r1, r4
 8017824:	2268      	movs	r2, #104	; 0x68
 8017826:	b280      	uxth	r0, r0
 8017828:	f005 fc78 	bl	801d11c <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 801782c:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017830:	4621      	mov	r1, r4
 8017832:	2269      	movs	r2, #105	; 0x69
 8017834:	b280      	uxth	r0, r0
 8017836:	f005 fc71 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 801783a:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801783e:	4621      	mov	r1, r4
 8017840:	2272      	movs	r2, #114	; 0x72
 8017842:	b280      	uxth	r0, r0
 8017844:	f005 fc6a 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 8017848:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801784c:	4621      	mov	r1, r4
 801784e:	2272      	movs	r2, #114	; 0x72
 8017850:	b280      	uxth	r0, r0
 8017852:	f005 fc63 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 8017856:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801785a:	4621      	mov	r1, r4
 801785c:	2261      	movs	r2, #97	; 0x61
 801785e:	b280      	uxth	r0, r0
 8017860:	f005 fc5c 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 8017864:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8017868:	4621      	mov	r1, r4
 801786a:	2264      	movs	r2, #100	; 0x64
 801786c:	b280      	uxth	r0, r0
 801786e:	f005 fc55 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 8017872:	f105 0073 	add.w	r0, r5, #115	; 0x73
 8017876:	4621      	mov	r1, r4
 8017878:	2269      	movs	r2, #105	; 0x69
 801787a:	b280      	uxth	r0, r0
 801787c:	f005 fc4e 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 8017880:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8017884:	4621      	mov	r1, r4
 8017886:	2261      	movs	r2, #97	; 0x61
 8017888:	b280      	uxth	r0, r0
 801788a:	f005 fc47 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 801788e:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8017892:	4621      	mov	r1, r4
 8017894:	226e      	movs	r2, #110	; 0x6e
 8017896:	b280      	uxth	r0, r0
 8017898:	f005 fc40 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 801789c:	f105 0091 	add.w	r0, r5, #145	; 0x91
 80178a0:	4621      	mov	r1, r4
 80178a2:	2263      	movs	r2, #99	; 0x63
 80178a4:	b280      	uxth	r0, r0
 80178a6:	f005 fc39 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 80178aa:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 80178ae:	4621      	mov	r1, r4
 80178b0:	2265      	movs	r2, #101	; 0x65
 80178b2:	b280      	uxth	r0, r0
}
 80178b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 80178b8:	f005 bc30 	b.w	801d11c <TFT_DrawChar>
 80178bc:	200001b8 	.word	0x200001b8
 80178c0:	200001c8 	.word	0x200001c8

080178c4 <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80178c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80178cc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80178ce:	f005 fb61 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80178d2:	2063      	movs	r0, #99	; 0x63
 80178d4:	f005 fb64 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80178d8:	482d      	ldr	r0, [pc, #180]	; (8017990 <GUI_TextMsgEn_HighRadiance+0xcc>)
 80178da:	f005 fb55 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 80178de:	4621      	mov	r1, r4
 80178e0:	2248      	movs	r2, #72	; 0x48
 80178e2:	4628      	mov	r0, r5
 80178e4:	f005 fc1a 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 80178e8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80178ea:	482a      	ldr	r0, [pc, #168]	; (8017994 <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 80178ec:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80178ee:	f005 fb4b 	bl	801cf88 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 80178f2:	f105 0010 	add.w	r0, r5, #16
 80178f6:	4621      	mov	r1, r4
 80178f8:	2269      	movs	r2, #105	; 0x69
 80178fa:	b280      	uxth	r0, r0
 80178fc:	f005 fc0e 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8017900:	f105 0017 	add.w	r0, r5, #23
 8017904:	4621      	mov	r1, r4
 8017906:	2267      	movs	r2, #103	; 0x67
 8017908:	b280      	uxth	r0, r0
 801790a:	f005 fc07 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 801790e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8017912:	4621      	mov	r1, r4
 8017914:	2268      	movs	r2, #104	; 0x68
 8017916:	b280      	uxth	r0, r0
 8017918:	f005 fc00 	bl	801d11c <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 801791c:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017920:	4621      	mov	r1, r4
 8017922:	2272      	movs	r2, #114	; 0x72
 8017924:	b280      	uxth	r0, r0
 8017926:	f005 fbf9 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 801792a:	f105 0046 	add.w	r0, r5, #70	; 0x46
 801792e:	4621      	mov	r1, r4
 8017930:	2261      	movs	r2, #97	; 0x61
 8017932:	b280      	uxth	r0, r0
 8017934:	f005 fbf2 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 8017938:	f105 0052 	add.w	r0, r5, #82	; 0x52
 801793c:	4621      	mov	r1, r4
 801793e:	2264      	movs	r2, #100	; 0x64
 8017940:	b280      	uxth	r0, r0
 8017942:	f005 fbeb 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 8017946:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 801794a:	4621      	mov	r1, r4
 801794c:	2269      	movs	r2, #105	; 0x69
 801794e:	b280      	uxth	r0, r0
 8017950:	f005 fbe4 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 8017954:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8017958:	4621      	mov	r1, r4
 801795a:	2261      	movs	r2, #97	; 0x61
 801795c:	b280      	uxth	r0, r0
 801795e:	f005 fbdd 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 8017962:	f105 0070 	add.w	r0, r5, #112	; 0x70
 8017966:	4621      	mov	r1, r4
 8017968:	226e      	movs	r2, #110	; 0x6e
 801796a:	b280      	uxth	r0, r0
 801796c:	f005 fbd6 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 8017970:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8017974:	4621      	mov	r1, r4
 8017976:	2263      	movs	r2, #99	; 0x63
 8017978:	b280      	uxth	r0, r0
 801797a:	f005 fbcf 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 801797e:	f105 0089 	add.w	r0, r5, #137	; 0x89
 8017982:	4621      	mov	r1, r4
 8017984:	2265      	movs	r2, #101	; 0x65
 8017986:	b280      	uxth	r0, r0
}
 8017988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 801798c:	f005 bbc6 	b.w	801d11c <TFT_DrawChar>
 8017990:	200001b8 	.word	0x200001b8
 8017994:	200001c8 	.word	0x200001c8

08017998 <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801799c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80179a0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80179a2:	f005 faf7 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80179a6:	2063      	movs	r0, #99	; 0x63
 80179a8:	f005 fafa 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80179ac:	482a      	ldr	r0, [pc, #168]	; (8017a58 <GUI_TextMsgEn_LowRadiance+0xc0>)
 80179ae:	f005 faeb 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80179b2:	4621      	mov	r1, r4
 80179b4:	224c      	movs	r2, #76	; 0x4c
 80179b6:	4628      	mov	r0, r5
 80179b8:	f005 fbb0 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 80179bc:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80179be:	4827      	ldr	r0, [pc, #156]	; (8017a5c <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 80179c0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80179c2:	f005 fae1 	bl	801cf88 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 80179c6:	f105 0010 	add.w	r0, r5, #16
 80179ca:	4621      	mov	r1, r4
 80179cc:	226f      	movs	r2, #111	; 0x6f
 80179ce:	b280      	uxth	r0, r0
 80179d0:	f005 fba4 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 80179d4:	f105 001d 	add.w	r0, r5, #29
 80179d8:	4621      	mov	r1, r4
 80179da:	2277      	movs	r2, #119	; 0x77
 80179dc:	b280      	uxth	r0, r0
 80179de:	f005 fb9d 	bl	801d11c <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 80179e2:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80179e6:	4621      	mov	r1, r4
 80179e8:	2272      	movs	r2, #114	; 0x72
 80179ea:	b280      	uxth	r0, r0
 80179ec:	f005 fb96 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 80179f0:	f105 0041 	add.w	r0, r5, #65	; 0x41
 80179f4:	4621      	mov	r1, r4
 80179f6:	2261      	movs	r2, #97	; 0x61
 80179f8:	b280      	uxth	r0, r0
 80179fa:	f005 fb8f 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 80179fe:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8017a02:	4621      	mov	r1, r4
 8017a04:	2264      	movs	r2, #100	; 0x64
 8017a06:	b280      	uxth	r0, r0
 8017a08:	f005 fb88 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8017a0c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017a10:	4621      	mov	r1, r4
 8017a12:	2269      	movs	r2, #105	; 0x69
 8017a14:	b280      	uxth	r0, r0
 8017a16:	f005 fb81 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 8017a1a:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8017a1e:	4621      	mov	r1, r4
 8017a20:	2261      	movs	r2, #97	; 0x61
 8017a22:	b280      	uxth	r0, r0
 8017a24:	f005 fb7a 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 8017a28:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 8017a2c:	4621      	mov	r1, r4
 8017a2e:	226e      	movs	r2, #110	; 0x6e
 8017a30:	b280      	uxth	r0, r0
 8017a32:	f005 fb73 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 8017a36:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	2263      	movs	r2, #99	; 0x63
 8017a3e:	b280      	uxth	r0, r0
 8017a40:	f005 fb6c 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 8017a44:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8017a48:	4621      	mov	r1, r4
 8017a4a:	2265      	movs	r2, #101	; 0x65
 8017a4c:	b280      	uxth	r0, r0
}
 8017a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 8017a52:	f005 bb63 	b.w	801d11c <TFT_DrawChar>
 8017a56:	bf00      	nop
 8017a58:	200001b8 	.word	0x200001b8
 8017a5c:	200001c8 	.word	0x200001c8

08017a60 <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 8017a60:	b538      	push	{r3, r4, r5, lr}
 8017a62:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017a64:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017a68:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017a6a:	f005 fa93 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017a6e:	2063      	movs	r0, #99	; 0x63
 8017a70:	f005 fa96 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017a74:	4831      	ldr	r0, [pc, #196]	; (8017b3c <GUI_TextMsgEn_LowIrradiance+0xdc>)
 8017a76:	f005 fa87 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8017a7a:	4621      	mov	r1, r4
 8017a7c:	224c      	movs	r2, #76	; 0x4c
 8017a7e:	4628      	mov	r0, r5
 8017a80:	f005 fb4c 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8017a84:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017a86:	482e      	ldr	r0, [pc, #184]	; (8017b40 <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8017a88:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017a8a:	f005 fa7d 	bl	801cf88 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8017a8e:	f105 0010 	add.w	r0, r5, #16
 8017a92:	4621      	mov	r1, r4
 8017a94:	226f      	movs	r2, #111	; 0x6f
 8017a96:	b280      	uxth	r0, r0
 8017a98:	f005 fb40 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8017a9c:	f105 001d 	add.w	r0, r5, #29
 8017aa0:	4621      	mov	r1, r4
 8017aa2:	2277      	movs	r2, #119	; 0x77
 8017aa4:	b280      	uxth	r0, r0
 8017aa6:	f005 fb39 	bl	801d11c <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 8017aaa:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8017aae:	4621      	mov	r1, r4
 8017ab0:	2269      	movs	r2, #105	; 0x69
 8017ab2:	b280      	uxth	r0, r0
 8017ab4:	f005 fb32 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 8017ab8:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8017abc:	4621      	mov	r1, r4
 8017abe:	2272      	movs	r2, #114	; 0x72
 8017ac0:	b280      	uxth	r0, r0
 8017ac2:	f005 fb2b 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 8017ac6:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8017aca:	4621      	mov	r1, r4
 8017acc:	2272      	movs	r2, #114	; 0x72
 8017ace:	b280      	uxth	r0, r0
 8017ad0:	f005 fb24 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 8017ad4:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8017ad8:	4621      	mov	r1, r4
 8017ada:	2261      	movs	r2, #97	; 0x61
 8017adc:	b280      	uxth	r0, r0
 8017ade:	f005 fb1d 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 8017ae2:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8017ae6:	4621      	mov	r1, r4
 8017ae8:	2264      	movs	r2, #100	; 0x64
 8017aea:	b280      	uxth	r0, r0
 8017aec:	f005 fb16 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 8017af0:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 8017af4:	4621      	mov	r1, r4
 8017af6:	2269      	movs	r2, #105	; 0x69
 8017af8:	b280      	uxth	r0, r0
 8017afa:	f005 fb0f 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 8017afe:	f105 0074 	add.w	r0, r5, #116	; 0x74
 8017b02:	4621      	mov	r1, r4
 8017b04:	2261      	movs	r2, #97	; 0x61
 8017b06:	b280      	uxth	r0, r0
 8017b08:	f005 fb08 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8017b0c:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8017b10:	4621      	mov	r1, r4
 8017b12:	226e      	movs	r2, #110	; 0x6e
 8017b14:	b280      	uxth	r0, r0
 8017b16:	f005 fb01 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 8017b1a:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8017b1e:	4621      	mov	r1, r4
 8017b20:	2263      	movs	r2, #99	; 0x63
 8017b22:	b280      	uxth	r0, r0
 8017b24:	f005 fafa 	bl	801d11c <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 8017b28:	f105 0099 	add.w	r0, r5, #153	; 0x99
 8017b2c:	4621      	mov	r1, r4
 8017b2e:	2265      	movs	r2, #101	; 0x65
 8017b30:	b280      	uxth	r0, r0
	
	
}
 8017b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 8017b36:	f005 baf1 	b.w	801d11c <TFT_DrawChar>
 8017b3a:	bf00      	nop
 8017b3c:	200001b8 	.word	0x200001b8
 8017b40:	200001c8 	.word	0x200001c8

08017b44 <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 8017b44:	b538      	push	{r3, r4, r5, lr}
 8017b46:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017b48:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017b4c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017b4e:	f005 fa21 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017b52:	2063      	movs	r0, #99	; 0x63
 8017b54:	f005 fa24 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017b58:	4823      	ldr	r0, [pc, #140]	; (8017be8 <GUI_TextEn_Luminance+0xa4>)
 8017b5a:	f005 fa15 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8017b5e:	4621      	mov	r1, r4
 8017b60:	224c      	movs	r2, #76	; 0x4c
 8017b62:	4628      	mov	r0, r5
 8017b64:	f005 fada 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 8017b68:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017b6a:	4820      	ldr	r0, [pc, #128]	; (8017bec <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 8017b6c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017b6e:	f005 fa0b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 8017b72:	f105 000d 	add.w	r0, r5, #13
 8017b76:	4621      	mov	r1, r4
 8017b78:	2275      	movs	r2, #117	; 0x75
 8017b7a:	b280      	uxth	r0, r0
 8017b7c:	f005 face 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 8017b80:	f105 001b 	add.w	r0, r5, #27
 8017b84:	4621      	mov	r1, r4
 8017b86:	226d      	movs	r2, #109	; 0x6d
 8017b88:	b280      	uxth	r0, r0
 8017b8a:	f005 fac7 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8017b8e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017b92:	4621      	mov	r1, r4
 8017b94:	2269      	movs	r2, #105	; 0x69
 8017b96:	b280      	uxth	r0, r0
 8017b98:	f005 fac0 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 8017b9c:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017ba0:	4621      	mov	r1, r4
 8017ba2:	2261      	movs	r2, #97	; 0x61
 8017ba4:	b280      	uxth	r0, r0
 8017ba6:	f005 fab9 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 8017baa:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017bae:	4621      	mov	r1, r4
 8017bb0:	226e      	movs	r2, #110	; 0x6e
 8017bb2:	b280      	uxth	r0, r0
 8017bb4:	f005 fab2 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 8017bb8:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017bbc:	4621      	mov	r1, r4
 8017bbe:	226e      	movs	r2, #110	; 0x6e
 8017bc0:	b280      	uxth	r0, r0
 8017bc2:	f005 faab 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 8017bc6:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8017bca:	4621      	mov	r1, r4
 8017bcc:	2263      	movs	r2, #99	; 0x63
 8017bce:	b280      	uxth	r0, r0
 8017bd0:	f005 faa4 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 8017bd4:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8017bd8:	4621      	mov	r1, r4
 8017bda:	2265      	movs	r2, #101	; 0x65
 8017bdc:	b280      	uxth	r0, r0
}
 8017bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 8017be2:	f005 ba9b 	b.w	801d11c <TFT_DrawChar>
 8017be6:	bf00      	nop
 8017be8:	200001b8 	.word	0x200001b8
 8017bec:	200001c8 	.word	0x200001c8

08017bf0 <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 8017bf0:	b538      	push	{r3, r4, r5, lr}
 8017bf2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017bf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017bf8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017bfa:	f005 f9cb 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017bfe:	2063      	movs	r0, #99	; 0x63
 8017c00:	f005 f9ce 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017c04:	482a      	ldr	r0, [pc, #168]	; (8017cb0 <GUI_TextEn_Illuminance+0xc0>)
 8017c06:	f005 f9bf 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8017c0a:	4621      	mov	r1, r4
 8017c0c:	2249      	movs	r2, #73	; 0x49
 8017c0e:	4628      	mov	r0, r5
 8017c10:	f005 fa84 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 8017c14:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017c16:	4827      	ldr	r0, [pc, #156]	; (8017cb4 <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 8017c18:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017c1a:	f005 f9b5 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 8017c1e:	f105 0008 	add.w	r0, r5, #8
 8017c22:	4621      	mov	r1, r4
 8017c24:	226c      	movs	r2, #108	; 0x6c
 8017c26:	b280      	uxth	r0, r0
 8017c28:	f005 fa78 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 8017c2c:	f105 000d 	add.w	r0, r5, #13
 8017c30:	4621      	mov	r1, r4
 8017c32:	226c      	movs	r2, #108	; 0x6c
 8017c34:	b280      	uxth	r0, r0
 8017c36:	f005 fa71 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 8017c3a:	f105 0012 	add.w	r0, r5, #18
 8017c3e:	4621      	mov	r1, r4
 8017c40:	2275      	movs	r2, #117	; 0x75
 8017c42:	b280      	uxth	r0, r0
 8017c44:	f005 fa6a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 8017c48:	f105 0020 	add.w	r0, r5, #32
 8017c4c:	4621      	mov	r1, r4
 8017c4e:	226d      	movs	r2, #109	; 0x6d
 8017c50:	b280      	uxth	r0, r0
 8017c52:	f005 fa63 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 8017c56:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017c5a:	4621      	mov	r1, r4
 8017c5c:	2269      	movs	r2, #105	; 0x69
 8017c5e:	b280      	uxth	r0, r0
 8017c60:	f005 fa5c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 8017c64:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017c68:	4621      	mov	r1, r4
 8017c6a:	2261      	movs	r2, #97	; 0x61
 8017c6c:	b280      	uxth	r0, r0
 8017c6e:	f005 fa55 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 8017c72:	f105 0033 	add.w	r0, r5, #51	; 0x33
 8017c76:	4621      	mov	r1, r4
 8017c78:	226e      	movs	r2, #110	; 0x6e
 8017c7a:	b280      	uxth	r0, r0
 8017c7c:	f005 fa4e 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 8017c80:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8017c84:	4621      	mov	r1, r4
 8017c86:	226e      	movs	r2, #110	; 0x6e
 8017c88:	b280      	uxth	r0, r0
 8017c8a:	f005 fa47 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 8017c8e:	f105 0059 	add.w	r0, r5, #89	; 0x59
 8017c92:	4621      	mov	r1, r4
 8017c94:	2263      	movs	r2, #99	; 0x63
 8017c96:	b280      	uxth	r0, r0
 8017c98:	f005 fa40 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017c9c:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017ca0:	4621      	mov	r1, r4
 8017ca2:	2265      	movs	r2, #101	; 0x65
 8017ca4:	b280      	uxth	r0, r0
}
 8017ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 8017caa:	f005 ba37 	b.w	801d11c <TFT_DrawChar>
 8017cae:	bf00      	nop
 8017cb0:	200001b8 	.word	0x200001b8
 8017cb4:	200001c8 	.word	0x200001c8

08017cb8 <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 8017cb8:	b538      	push	{r3, r4, r5, lr}
 8017cba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017cbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017cc0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017cc2:	f005 f967 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017cc6:	2063      	movs	r0, #99	; 0x63
 8017cc8:	f005 f96a 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017ccc:	4811      	ldr	r0, [pc, #68]	; (8017d14 <GUI_TextEn_Mode+0x5c>)
 8017cce:	f005 f95b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 8017cd2:	4621      	mov	r1, r4
 8017cd4:	224d      	movs	r2, #77	; 0x4d
 8017cd6:	4628      	mov	r0, r5
 8017cd8:	f005 fa20 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8017cdc:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017cde:	480e      	ldr	r0, [pc, #56]	; (8017d18 <GUI_TextEn_Mode+0x60>)
 8017ce0:	f005 f952 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 8017ce4:	b2a4      	uxth	r4, r4
 8017ce6:	f105 0013 	add.w	r0, r5, #19
 8017cea:	4621      	mov	r1, r4
 8017cec:	226f      	movs	r2, #111	; 0x6f
 8017cee:	b280      	uxth	r0, r0
 8017cf0:	f005 fa14 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 8017cf4:	f105 001e 	add.w	r0, r5, #30
 8017cf8:	4621      	mov	r1, r4
 8017cfa:	2264      	movs	r2, #100	; 0x64
 8017cfc:	b280      	uxth	r0, r0
 8017cfe:	f005 fa0d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 8017d02:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 8017d06:	4621      	mov	r1, r4
 8017d08:	2265      	movs	r2, #101	; 0x65
 8017d0a:	b280      	uxth	r0, r0
}
 8017d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 8017d10:	f005 ba04 	b.w	801d11c <TFT_DrawChar>
 8017d14:	200001b8 	.word	0x200001b8
 8017d18:	200001c8 	.word	0x200001c8

08017d1c <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 8017d1c:	b538      	push	{r3, r4, r5, lr}
 8017d1e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017d20:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017d24:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017d26:	f005 f935 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d2a:	2063      	movs	r0, #99	; 0x63
 8017d2c:	f005 f938 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017d30:	480f      	ldr	r0, [pc, #60]	; (8017d70 <GUI_TextEn_PPFD+0x54>)
 8017d32:	f005 f929 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 8017d36:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8017d3a:	4629      	mov	r1, r5
 8017d3c:	2244      	movs	r2, #68	; 0x44
 8017d3e:	b280      	uxth	r0, r0
 8017d40:	f005 f9ec 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 8017d44:	f104 001f 	add.w	r0, r4, #31
 8017d48:	4629      	mov	r1, r5
 8017d4a:	2246      	movs	r2, #70	; 0x46
 8017d4c:	b280      	uxth	r0, r0
 8017d4e:	f005 f9e5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8017d52:	f104 0010 	add.w	r0, r4, #16
 8017d56:	4629      	mov	r1, r5
 8017d58:	2250      	movs	r2, #80	; 0x50
 8017d5a:	b280      	uxth	r0, r0
 8017d5c:	f005 f9de 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017d60:	4629      	mov	r1, r5
 8017d62:	4620      	mov	r0, r4
 8017d64:	2250      	movs	r2, #80	; 0x50
}
 8017d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8017d6a:	f005 b9d7 	b.w	801d11c <TFT_DrawChar>
 8017d6e:	bf00      	nop
 8017d70:	200001b8 	.word	0x200001b8

08017d74 <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 8017d74:	b538      	push	{r3, r4, r5, lr}
 8017d76:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017d78:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017d7c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017d7e:	f005 f909 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d82:	2063      	movs	r0, #99	; 0x63
 8017d84:	f005 f90c 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017d88:	480b      	ldr	r0, [pc, #44]	; (8017db8 <GUI_TextEn_PPL+0x44>)
 8017d8a:	f005 f8fd 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 8017d8e:	f104 001f 	add.w	r0, r4, #31
 8017d92:	4629      	mov	r1, r5
 8017d94:	224c      	movs	r2, #76	; 0x4c
 8017d96:	b280      	uxth	r0, r0
 8017d98:	f005 f9c0 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8017d9c:	f104 0010 	add.w	r0, r4, #16
 8017da0:	4629      	mov	r1, r5
 8017da2:	2250      	movs	r2, #80	; 0x50
 8017da4:	b280      	uxth	r0, r0
 8017da6:	f005 f9b9 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017daa:	4629      	mov	r1, r5
 8017dac:	4620      	mov	r0, r4
 8017dae:	2250      	movs	r2, #80	; 0x50
}
 8017db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8017db4:	f005 b9b2 	b.w	801d11c <TFT_DrawChar>
 8017db8:	200001b8 	.word	0x200001b8

08017dbc <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017dc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017dc4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017dc6:	f005 f8e5 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017dca:	2063      	movs	r0, #99	; 0x63
 8017dcc:	f005 f8e8 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017dd0:	482d      	ldr	r0, [pc, #180]	; (8017e88 <GUI_TextEn_PARwavebands+0xcc>)
 8017dd2:	f005 f8d9 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 8017dd6:	f105 0020 	add.w	r0, r5, #32
 8017dda:	4621      	mov	r1, r4
 8017ddc:	2252      	movs	r2, #82	; 0x52
 8017dde:	b280      	uxth	r0, r0
 8017de0:	f005 f99c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 8017de4:	f105 0010 	add.w	r0, r5, #16
 8017de8:	4621      	mov	r1, r4
 8017dea:	2241      	movs	r2, #65	; 0x41
 8017dec:	b280      	uxth	r0, r0
 8017dee:	f005 f995 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017df2:	4621      	mov	r1, r4
 8017df4:	2250      	movs	r2, #80	; 0x50
 8017df6:	4628      	mov	r0, r5
 8017df8:	f005 f990 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 8017dfc:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017dfe:	4823      	ldr	r0, [pc, #140]	; (8017e8c <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 8017e00:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017e02:	f005 f8c1 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 8017e06:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8017e0a:	4621      	mov	r1, r4
 8017e0c:	2261      	movs	r2, #97	; 0x61
 8017e0e:	b280      	uxth	r0, r0
 8017e10:	f005 f984 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 8017e14:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8017e18:	4621      	mov	r1, r4
 8017e1a:	2277      	movs	r2, #119	; 0x77
 8017e1c:	b280      	uxth	r0, r0
 8017e1e:	f005 f97d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017e22:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017e26:	4621      	mov	r1, r4
 8017e28:	2265      	movs	r2, #101	; 0x65
 8017e2a:	b280      	uxth	r0, r0
 8017e2c:	f005 f976 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 8017e30:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8017e34:	4621      	mov	r1, r4
 8017e36:	2276      	movs	r2, #118	; 0x76
 8017e38:	b280      	uxth	r0, r0
 8017e3a:	f005 f96f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 8017e3e:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8017e42:	4621      	mov	r1, r4
 8017e44:	2261      	movs	r2, #97	; 0x61
 8017e46:	b280      	uxth	r0, r0
 8017e48:	f005 f968 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 8017e4c:	f105 0071 	add.w	r0, r5, #113	; 0x71
 8017e50:	4621      	mov	r1, r4
 8017e52:	2262      	movs	r2, #98	; 0x62
 8017e54:	b280      	uxth	r0, r0
 8017e56:	f005 f961 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 8017e5a:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8017e5e:	4621      	mov	r1, r4
 8017e60:	226e      	movs	r2, #110	; 0x6e
 8017e62:	b280      	uxth	r0, r0
 8017e64:	f005 f95a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 8017e68:	f105 0097 	add.w	r0, r5, #151	; 0x97
 8017e6c:	4621      	mov	r1, r4
 8017e6e:	2264      	movs	r2, #100	; 0x64
 8017e70:	b280      	uxth	r0, r0
 8017e72:	f005 f953 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 8017e76:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 8017e7a:	4621      	mov	r1, r4
 8017e7c:	2273      	movs	r2, #115	; 0x73
 8017e7e:	b280      	uxth	r0, r0
}
 8017e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 8017e84:	f005 b94a 	b.w	801d11c <TFT_DrawChar>
 8017e88:	200001b8 	.word	0x200001b8
 8017e8c:	200001c8 	.word	0x200001c8

08017e90 <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 8017e90:	b538      	push	{r3, r4, r5, lr}
 8017e92:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017e94:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017e98:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017e9a:	f005 f87b 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017e9e:	2063      	movs	r0, #99	; 0x63
 8017ea0:	f005 f87e 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017ea4:	481d      	ldr	r0, [pc, #116]	; (8017f1c <GUI_TextEn_B_G_R_FR+0x8c>)
 8017ea6:	f005 f86f 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 8017eaa:	f104 000f 	add.w	r0, r4, #15
 8017eae:	4629      	mov	r1, r5
 8017eb0:	222d      	movs	r2, #45	; 0x2d
 8017eb2:	b280      	uxth	r0, r0
 8017eb4:	f005 f932 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 8017eb8:	4629      	mov	r1, r5
 8017eba:	4620      	mov	r0, r4
 8017ebc:	2242      	movs	r2, #66	; 0x42
 8017ebe:	f005 f92d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 8017ec2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	222d      	movs	r2, #45	; 0x2d
 8017eca:	b280      	uxth	r0, r0
 8017ecc:	f005 f926 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 8017ed0:	f104 001d 	add.w	r0, r4, #29
 8017ed4:	4629      	mov	r1, r5
 8017ed6:	2247      	movs	r2, #71	; 0x47
 8017ed8:	b280      	uxth	r0, r0
 8017eda:	f005 f91f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 8017ede:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8017ee2:	4629      	mov	r1, r5
 8017ee4:	222d      	movs	r2, #45	; 0x2d
 8017ee6:	b280      	uxth	r0, r0
 8017ee8:	f005 f918 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 8017eec:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8017ef0:	4629      	mov	r1, r5
 8017ef2:	2252      	movs	r2, #82	; 0x52
 8017ef4:	b280      	uxth	r0, r0
 8017ef6:	f005 f911 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 8017efa:	f104 0057 	add.w	r0, r4, #87	; 0x57
 8017efe:	4629      	mov	r1, r5
 8017f00:	2246      	movs	r2, #70	; 0x46
 8017f02:	b280      	uxth	r0, r0
 8017f04:	f005 f90a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 8017f08:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8017f0c:	4629      	mov	r1, r5
 8017f0e:	2252      	movs	r2, #82	; 0x52
 8017f10:	b280      	uxth	r0, r0
}
 8017f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 8017f16:	f005 b901 	b.w	801d11c <TFT_DrawChar>
 8017f1a:	bf00      	nop
 8017f1c:	200001b8 	.word	0x200001b8

08017f20 <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 8017f20:	b538      	push	{r3, r4, r5, lr}
 8017f22:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017f24:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017f28:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017f2a:	f005 f833 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017f2e:	2063      	movs	r0, #99	; 0x63
 8017f30:	f005 f836 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8017f34:	480b      	ldr	r0, [pc, #44]	; (8017f64 <GUI_TextEn_CCT+0x44>)
 8017f36:	f005 f827 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 8017f3a:	4629      	mov	r1, r5
 8017f3c:	4620      	mov	r0, r4
 8017f3e:	2222      	movs	r2, #34	; 0x22
 8017f40:	f005 f8ec 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 8017f44:	f104 0017 	add.w	r0, r4, #23
 8017f48:	4629      	mov	r1, r5
 8017f4a:	2222      	movs	r2, #34	; 0x22
 8017f4c:	b280      	uxth	r0, r0
 8017f4e:	f005 f8e5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 8017f52:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8017f56:	4629      	mov	r1, r5
 8017f58:	2233      	movs	r2, #51	; 0x33
 8017f5a:	b280      	uxth	r0, r0
}
 8017f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 8017f60:	f005 b8dc 	b.w	801d11c <TFT_DrawChar>
 8017f64:	200001e8 	.word	0x200001e8

08017f68 <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 8017f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f6a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017f6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017f70:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017f72:	f005 f80f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017f76:	2063      	movs	r0, #99	; 0x63
 8017f78:	f005 f812 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017f7c:	4815      	ldr	r0, [pc, #84]	; (8017fd4 <GUI_TextEn_W_m2+0x6c>)
 8017f7e:	f005 f803 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 8017f82:	1ce8      	adds	r0, r5, #3
 8017f84:	4621      	mov	r1, r4
 8017f86:	2257      	movs	r2, #87	; 0x57
 8017f88:	b280      	uxth	r0, r0
 8017f8a:	f005 f8c7 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8017f8e:	f104 0111 	add.w	r1, r4, #17
 8017f92:	1c68      	adds	r0, r5, #1
 8017f94:	226d      	movs	r2, #109	; 0x6d
 8017f96:	b289      	uxth	r1, r1
 8017f98:	b280      	uxth	r0, r0
 8017f9a:	f005 f8bf 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8017f9e:	480e      	ldr	r0, [pc, #56]	; (8017fd8 <GUI_TextEn_W_m2+0x70>)
 8017fa0:	f004 fff2 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 8017fa4:	f104 0110 	add.w	r1, r4, #16
 8017fa8:	f105 000b 	add.w	r0, r5, #11
 8017fac:	2232      	movs	r2, #50	; 0x32
 8017fae:	b289      	uxth	r1, r1
 8017fb0:	b280      	uxth	r0, r0
 8017fb2:	f005 f8b3 	bl	801d11c <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8017fb6:	f104 030e 	add.w	r3, r4, #14
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	f105 0211 	add.w	r2, r5, #17
 8017fc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017fc4:	9100      	str	r1, [sp, #0]
 8017fc6:	b292      	uxth	r2, r2
 8017fc8:	4619      	mov	r1, r3
 8017fca:	4628      	mov	r0, r5
 8017fcc:	f004 fd56 	bl	801ca7c <TFT_DrawLine>
}
 8017fd0:	b003      	add	sp, #12
 8017fd2:	bd30      	pop	{r4, r5, pc}
 8017fd4:	20000220 	.word	0x20000220
 8017fd8:	20000210 	.word	0x20000210

08017fdc <GUI_TextEn_mW_m2>:

void GUI_TextEn_mW_m2(uint16_t X, uint16_t Y)
{
 8017fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fde:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017fe0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017fe4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017fe6:	f004 ffd5 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017fea:	2063      	movs	r0, #99	; 0x63
 8017fec:	f004 ffd8 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017ff0:	4818      	ldr	r0, [pc, #96]	; (8018054 <GUI_TextEn_mW_m2+0x78>)
 8017ff2:	f004 ffc9 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X-3, Y, 'm');
 8017ff6:	1ee8      	subs	r0, r5, #3
 8017ff8:	4621      	mov	r1, r4
 8017ffa:	226d      	movs	r2, #109	; 0x6d
 8017ffc:	b280      	uxth	r0, r0
 8017ffe:	f005 f88d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+7, Y, 'W');
 8018002:	1de8      	adds	r0, r5, #7
 8018004:	4621      	mov	r1, r4
 8018006:	2257      	movs	r2, #87	; 0x57
 8018008:	b280      	uxth	r0, r0
 801800a:	f005 f887 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 801800e:	f104 0111 	add.w	r1, r4, #17
 8018012:	1c68      	adds	r0, r5, #1
 8018014:	226d      	movs	r2, #109	; 0x6d
 8018016:	b289      	uxth	r1, r1
 8018018:	b280      	uxth	r0, r0
 801801a:	f005 f87f 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 801801e:	480e      	ldr	r0, [pc, #56]	; (8018058 <GUI_TextEn_mW_m2+0x7c>)
 8018020:	f004 ffb2 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');
 8018024:	f104 0110 	add.w	r1, r4, #16
 8018028:	f105 000b 	add.w	r0, r5, #11
 801802c:	2232      	movs	r2, #50	; 0x32
 801802e:	b289      	uxth	r1, r1
 8018030:	b280      	uxth	r0, r0
 8018032:	f005 f873 	bl	801d11c <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8018036:	f104 030e 	add.w	r3, r4, #14
 801803a:	b29b      	uxth	r3, r3
 801803c:	f105 0211 	add.w	r2, r5, #17
 8018040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018044:	9100      	str	r1, [sp, #0]
 8018046:	b292      	uxth	r2, r2
 8018048:	4619      	mov	r1, r3
 801804a:	4628      	mov	r0, r5
 801804c:	f004 fd16 	bl	801ca7c <TFT_DrawLine>
}
 8018050:	b003      	add	sp, #12
 8018052:	bd30      	pop	{r4, r5, pc}
 8018054:	20000220 	.word	0x20000220
 8018058:	20000210 	.word	0x20000210

0801805c <GUI_TextEn_W_m2_sr>:

void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 801805c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801805e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018060:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018064:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018066:	f004 ff95 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801806a:	2063      	movs	r0, #99	; 0x63
 801806c:	f004 ff98 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8018070:	4824      	ldr	r0, [pc, #144]	; (8018104 <GUI_TextEn_W_m2_sr+0xa8>)
 8018072:	f004 ff89 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 8018076:	f105 000c 	add.w	r0, r5, #12
 801807a:	4621      	mov	r1, r4
 801807c:	2257      	movs	r2, #87	; 0x57
 801807e:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8018080:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8018084:	f005 f84a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8018088:	b2b6      	uxth	r6, r6
 801808a:	f105 0014 	add.w	r0, r5, #20
 801808e:	4631      	mov	r1, r6
 8018090:	226d      	movs	r2, #109	; 0x6d
 8018092:	b280      	uxth	r0, r0
 8018094:	f005 f842 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8018098:	4631      	mov	r1, r6
 801809a:	4628      	mov	r0, r5
 801809c:	2273      	movs	r2, #115	; 0x73
 801809e:	f005 f83d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 80180a2:	1de8      	adds	r0, r5, #7
 80180a4:	4631      	mov	r1, r6
 80180a6:	2272      	movs	r2, #114	; 0x72
 80180a8:	b280      	uxth	r0, r0
 80180aa:	f005 f837 	bl	801d11c <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 80180ae:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80180b2:	f104 0318 	add.w	r3, r4, #24
 80180b6:	f105 0212 	add.w	r2, r5, #18
 80180ba:	f104 0117 	add.w	r1, r4, #23
 80180be:	f105 0011 	add.w	r0, r5, #17
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	b292      	uxth	r2, r2
 80180c6:	b289      	uxth	r1, r1
 80180c8:	9600      	str	r6, [sp, #0]
 80180ca:	b280      	uxth	r0, r0
 80180cc:	f004 fd33 	bl	801cb36 <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 80180d0:	480d      	ldr	r0, [pc, #52]	; (8018108 <GUI_TextEn_W_m2_sr+0xac>)
 80180d2:	f004 ff59 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 80180d6:	f104 0110 	add.w	r1, r4, #16
 80180da:	f105 001e 	add.w	r0, r5, #30
 80180de:	2232      	movs	r2, #50	; 0x32
 80180e0:	b289      	uxth	r1, r1
 80180e2:	b280      	uxth	r0, r0
 80180e4:	f005 f81a 	bl	801d11c <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 80180e8:	f104 030e 	add.w	r3, r4, #14
 80180ec:	b29b      	uxth	r3, r3
 80180ee:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80180f2:	9600      	str	r6, [sp, #0]
 80180f4:	b292      	uxth	r2, r2
 80180f6:	4619      	mov	r1, r3
 80180f8:	4628      	mov	r0, r5
 80180fa:	f004 fcbf 	bl	801ca7c <TFT_DrawLine>
}
 80180fe:	b002      	add	sp, #8
 8018100:	bd70      	pop	{r4, r5, r6, pc}
 8018102:	bf00      	nop
 8018104:	20000220 	.word	0x20000220
 8018108:	20000210 	.word	0x20000210

0801810c <GUI_TextEn_mW_m2_sr>:

void GUI_TextEn_mW_m2_sr(uint16_t X, uint16_t Y)
{
 801810c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801810e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018110:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018114:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018116:	f004 ff3d 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801811a:	2063      	movs	r0, #99	; 0x63
 801811c:	f004 ff40 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8018120:	4827      	ldr	r0, [pc, #156]	; (80181c0 <GUI_TextEn_mW_m2_sr+0xb4>)
 8018122:	f004 ff31 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+6, Y, 'm');
 8018126:	1da8      	adds	r0, r5, #6
 8018128:	4621      	mov	r1, r4
 801812a:	226d      	movs	r2, #109	; 0x6d
 801812c:	b280      	uxth	r0, r0
 801812e:	f004 fff5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'W');
 8018132:	f105 0010 	add.w	r0, r5, #16
 8018136:	4621      	mov	r1, r4
 8018138:	2257      	movs	r2, #87	; 0x57
 801813a:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 801813c:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+16, Y, 'W');
 8018140:	f004 ffec 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8018144:	b2b6      	uxth	r6, r6
 8018146:	f105 0014 	add.w	r0, r5, #20
 801814a:	4631      	mov	r1, r6
 801814c:	226d      	movs	r2, #109	; 0x6d
 801814e:	b280      	uxth	r0, r0
 8018150:	f004 ffe4 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8018154:	4631      	mov	r1, r6
 8018156:	4628      	mov	r0, r5
 8018158:	2273      	movs	r2, #115	; 0x73
 801815a:	f004 ffdf 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 801815e:	1de8      	adds	r0, r5, #7
 8018160:	4631      	mov	r1, r6
 8018162:	2272      	movs	r2, #114	; 0x72
 8018164:	b280      	uxth	r0, r0
 8018166:	f004 ffd9 	bl	801d11c <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 801816a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801816e:	f104 0318 	add.w	r3, r4, #24
 8018172:	f105 0212 	add.w	r2, r5, #18
 8018176:	f104 0117 	add.w	r1, r4, #23
 801817a:	f105 0011 	add.w	r0, r5, #17
 801817e:	b29b      	uxth	r3, r3
 8018180:	b292      	uxth	r2, r2
 8018182:	b289      	uxth	r1, r1
 8018184:	9600      	str	r6, [sp, #0]
 8018186:	b280      	uxth	r0, r0
 8018188:	f004 fcd5 	bl	801cb36 <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 801818c:	480d      	ldr	r0, [pc, #52]	; (80181c4 <GUI_TextEn_mW_m2_sr+0xb8>)
 801818e:	f004 fefb 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');
 8018192:	f104 0110 	add.w	r1, r4, #16
 8018196:	f105 001e 	add.w	r0, r5, #30
 801819a:	2232      	movs	r2, #50	; 0x32
 801819c:	b289      	uxth	r1, r1
 801819e:	b280      	uxth	r0, r0
 80181a0:	f004 ffbc 	bl	801d11c <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 80181a4:	f104 030e 	add.w	r3, r4, #14
 80181a8:	b29b      	uxth	r3, r3
 80181aa:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80181ae:	9600      	str	r6, [sp, #0]
 80181b0:	b292      	uxth	r2, r2
 80181b2:	4619      	mov	r1, r3
 80181b4:	4628      	mov	r0, r5
 80181b6:	f004 fc61 	bl	801ca7c <TFT_DrawLine>
}
 80181ba:	b002      	add	sp, #8
 80181bc:	bd70      	pop	{r4, r5, r6, pc}
 80181be:	bf00      	nop
 80181c0:	20000220 	.word	0x20000220
 80181c4:	20000210 	.word	0x20000210

080181c8 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 80181c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80181cc:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80181ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80181d2:	460d      	mov	r5, r1
 80181d4:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 80181d6:	f004 fedd 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80181da:	2063      	movs	r0, #99	; 0x63
 80181dc:	f004 fee0 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 80181e0:	482f      	ldr	r0, [pc, #188]	; (80182a0 <GUI_TextEn_cd_m2+0xd8>)
 80181e2:	f004 fed1 	bl	801cf88 <TFT_SetFont>
	
	if (deg==1)
 80181e6:	2e01      	cmp	r6, #1
 80181e8:	f105 0911 	add.w	r9, r5, #17
 80181ec:	f105 0810 	add.w	r8, r5, #16
 80181f0:	f105 060e 	add.w	r6, r5, #14
 80181f4:	d131      	bne.n	801825a <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 80181f6:	226b      	movs	r2, #107	; 0x6b
 80181f8:	4629      	mov	r1, r5
 80181fa:	4620      	mov	r0, r4
 80181fc:	f004 ff8e 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8018200:	1de0      	adds	r0, r4, #7
 8018202:	2263      	movs	r2, #99	; 0x63
 8018204:	4629      	mov	r1, r5
 8018206:	b280      	uxth	r0, r0
 8018208:	f004 ff88 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 801820c:	f104 000e 	add.w	r0, r4, #14
 8018210:	2264      	movs	r2, #100	; 0x64
 8018212:	4629      	mov	r1, r5
 8018214:	b280      	uxth	r0, r0
 8018216:	f004 ff81 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 801821a:	1d60      	adds	r0, r4, #5
 801821c:	226d      	movs	r2, #109	; 0x6d
 801821e:	fa1f f189 	uxth.w	r1, r9
 8018222:	b280      	uxth	r0, r0
 8018224:	f004 ff7a 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8018228:	481e      	ldr	r0, [pc, #120]	; (80182a4 <GUI_TextEn_cd_m2+0xdc>)
 801822a:	f004 fead 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 801822e:	f104 000f 	add.w	r0, r4, #15
 8018232:	2232      	movs	r2, #50	; 0x32
 8018234:	fa1f f188 	uxth.w	r1, r8
 8018238:	b280      	uxth	r0, r0
 801823a:	f004 ff6f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 801823e:	b2b3      	uxth	r3, r6
 8018240:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8018244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018248:	9100      	str	r1, [sp, #0]
 801824a:	b292      	uxth	r2, r2
 801824c:	4619      	mov	r1, r3
 801824e:	4620      	mov	r0, r4
 8018250:	f004 fc14 	bl	801ca7c <TFT_DrawLine>
	}
}
 8018254:	b003      	add	sp, #12
 8018256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 801825a:	1ca7      	adds	r7, r4, #2
 801825c:	b2bf      	uxth	r7, r7
 801825e:	2263      	movs	r2, #99	; 0x63
 8018260:	4629      	mov	r1, r5
 8018262:	4638      	mov	r0, r7
 8018264:	f004 ff5a 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 8018268:	f104 0009 	add.w	r0, r4, #9
 801826c:	2264      	movs	r2, #100	; 0x64
 801826e:	4629      	mov	r1, r5
 8018270:	b280      	uxth	r0, r0
 8018272:	f004 ff53 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 8018276:	226d      	movs	r2, #109	; 0x6d
 8018278:	fa1f f189 	uxth.w	r1, r9
 801827c:	4638      	mov	r0, r7
 801827e:	f004 ff4d 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8018282:	4808      	ldr	r0, [pc, #32]	; (80182a4 <GUI_TextEn_cd_m2+0xdc>)
 8018284:	f004 fe80 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 8018288:	f104 000c 	add.w	r0, r4, #12
 801828c:	2232      	movs	r2, #50	; 0x32
 801828e:	fa1f f188 	uxth.w	r1, r8
 8018292:	b280      	uxth	r0, r0
 8018294:	f004 ff42 	bl	801d11c <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8018298:	b2b3      	uxth	r3, r6
 801829a:	f104 0213 	add.w	r2, r4, #19
 801829e:	e7d1      	b.n	8018244 <GUI_TextEn_cd_m2+0x7c>
 80182a0:	20000220 	.word	0x20000220
 80182a4:	20000210 	.word	0x20000210

080182a8 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 80182a8:	b538      	push	{r3, r4, r5, lr}
 80182aa:	4605      	mov	r5, r0
 80182ac:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 80182ae:	4815      	ldr	r0, [pc, #84]	; (8018304 <GUI_TextEn_Green+0x5c>)
 80182b0:	f004 fe6a 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 80182b4:	4621      	mov	r1, r4
 80182b6:	2247      	movs	r2, #71	; 0x47
 80182b8:	4628      	mov	r0, r5
 80182ba:	f004 ff2f 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 80182be:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 80182c0:	4811      	ldr	r0, [pc, #68]	; (8018308 <GUI_TextEn_Green+0x60>)
 80182c2:	f004 fe61 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 80182c6:	b2a4      	uxth	r4, r4
 80182c8:	f105 000f 	add.w	r0, r5, #15
 80182cc:	4621      	mov	r1, r4
 80182ce:	2272      	movs	r2, #114	; 0x72
 80182d0:	b280      	uxth	r0, r0
 80182d2:	f004 ff23 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 80182d6:	f105 001a 	add.w	r0, r5, #26
 80182da:	4621      	mov	r1, r4
 80182dc:	2265      	movs	r2, #101	; 0x65
 80182de:	b280      	uxth	r0, r0
 80182e0:	f004 ff1c 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 80182e4:	f105 0026 	add.w	r0, r5, #38	; 0x26
 80182e8:	4621      	mov	r1, r4
 80182ea:	2265      	movs	r2, #101	; 0x65
 80182ec:	b280      	uxth	r0, r0
 80182ee:	f004 ff15 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 80182f2:	f105 0032 	add.w	r0, r5, #50	; 0x32
 80182f6:	4621      	mov	r1, r4
 80182f8:	226e      	movs	r2, #110	; 0x6e
 80182fa:	b280      	uxth	r0, r0
}
 80182fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8018300:	f004 bf0c 	b.w	801d11c <TFT_DrawChar>
 8018304:	200001b0 	.word	0x200001b0
 8018308:	200001c0 	.word	0x200001c0

0801830c <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 801830c:	b538      	push	{r3, r4, r5, lr}
 801830e:	4605      	mov	r5, r0
 8018310:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8018312:	4812      	ldr	r0, [pc, #72]	; (801835c <GUI_TextEn_Blue+0x50>)
 8018314:	f004 fe38 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 8018318:	4621      	mov	r1, r4
 801831a:	2242      	movs	r2, #66	; 0x42
 801831c:	4628      	mov	r0, r5
 801831e:	f004 fefd 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 8018322:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 8018324:	480e      	ldr	r0, [pc, #56]	; (8018360 <GUI_TextEn_Blue+0x54>)
 8018326:	f004 fe2f 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 801832a:	b2a4      	uxth	r4, r4
 801832c:	f105 000f 	add.w	r0, r5, #15
 8018330:	4621      	mov	r1, r4
 8018332:	226c      	movs	r2, #108	; 0x6c
 8018334:	b280      	uxth	r0, r0
 8018336:	f004 fef1 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 801833a:	f105 0014 	add.w	r0, r5, #20
 801833e:	4621      	mov	r1, r4
 8018340:	2275      	movs	r2, #117	; 0x75
 8018342:	b280      	uxth	r0, r0
 8018344:	f004 feea 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 8018348:	f105 0021 	add.w	r0, r5, #33	; 0x21
 801834c:	4621      	mov	r1, r4
 801834e:	2265      	movs	r2, #101	; 0x65
 8018350:	b280      	uxth	r0, r0
}
 8018352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 8018356:	f004 bee1 	b.w	801d11c <TFT_DrawChar>
 801835a:	bf00      	nop
 801835c:	200001b0 	.word	0x200001b0
 8018360:	200001c8 	.word	0x200001c8

08018364 <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 8018364:	b538      	push	{r3, r4, r5, lr}
 8018366:	4605      	mov	r5, r0
 8018368:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801836a:	480e      	ldr	r0, [pc, #56]	; (80183a4 <GUI_TextEn_Red+0x40>)
 801836c:	f004 fe0c 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 8018370:	4621      	mov	r1, r4
 8018372:	2252      	movs	r2, #82	; 0x52
 8018374:	4628      	mov	r0, r5
 8018376:	f004 fed1 	bl	801d11c <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 801837a:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 801837c:	480a      	ldr	r0, [pc, #40]	; (80183a8 <GUI_TextEn_Red+0x44>)
 801837e:	f004 fe03 	bl	801cf88 <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 8018382:	b2a4      	uxth	r4, r4
 8018384:	f105 0010 	add.w	r0, r5, #16
 8018388:	4621      	mov	r1, r4
 801838a:	2265      	movs	r2, #101	; 0x65
 801838c:	b280      	uxth	r0, r0
 801838e:	f004 fec5 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 8018392:	f105 001d 	add.w	r0, r5, #29
 8018396:	4621      	mov	r1, r4
 8018398:	2264      	movs	r2, #100	; 0x64
 801839a:	b280      	uxth	r0, r0
}
 801839c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 80183a0:	f004 bebc 	b.w	801d11c <TFT_DrawChar>
 80183a4:	200001b0 	.word	0x200001b0
 80183a8:	200001c0 	.word	0x200001c0

080183ac <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 80183ac:	b538      	push	{r3, r4, r5, lr}
 80183ae:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80183b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80183b4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80183b6:	f004 fded 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80183ba:	2063      	movs	r0, #99	; 0x63
 80183bc:	f004 fdf0 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80183c0:	4815      	ldr	r0, [pc, #84]	; (8018418 <GUI_TextEn_WriteSD+0x6c>)
 80183c2:	f004 fde1 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 80183c6:	4621      	mov	r1, r4
 80183c8:	2257      	movs	r2, #87	; 0x57
 80183ca:	4628      	mov	r0, r5
 80183cc:	f004 fea6 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 80183d0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 80183d2:	4812      	ldr	r0, [pc, #72]	; (801841c <GUI_TextEn_WriteSD+0x70>)
 80183d4:	f004 fdd8 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 80183d8:	b2a4      	uxth	r4, r4
 80183da:	f105 0011 	add.w	r0, r5, #17
 80183de:	4621      	mov	r1, r4
 80183e0:	2272      	movs	r2, #114	; 0x72
 80183e2:	b280      	uxth	r0, r0
 80183e4:	f004 fe9a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 80183e8:	f105 001c 	add.w	r0, r5, #28
 80183ec:	4621      	mov	r1, r4
 80183ee:	2269      	movs	r2, #105	; 0x69
 80183f0:	b280      	uxth	r0, r0
 80183f2:	f004 fe93 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 80183f6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80183fa:	4621      	mov	r1, r4
 80183fc:	2274      	movs	r2, #116	; 0x74
 80183fe:	b280      	uxth	r0, r0
 8018400:	f004 fe8c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 8018404:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8018408:	4621      	mov	r1, r4
 801840a:	2265      	movs	r2, #101	; 0x65
 801840c:	b280      	uxth	r0, r0
}
 801840e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 8018412:	f004 be83 	b.w	801d11c <TFT_DrawChar>
 8018416:	bf00      	nop
 8018418:	200001b0 	.word	0x200001b0
 801841c:	200001c0 	.word	0x200001c0

08018420 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8018420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018422:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8018424:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018428:	2300      	movs	r3, #0
 801842a:	9300      	str	r3, [sp, #0]
 801842c:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018430:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8018432:	f004 fdaf 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018436:	2063      	movs	r0, #99	; 0x63
 8018438:	f004 fdb2 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801843c:	4834      	ldr	r0, [pc, #208]	; (8018510 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 801843e:	4d35      	ldr	r5, [pc, #212]	; (8018514 <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 8018440:	f004 fda2 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018444:	2243      	movs	r2, #67	; 0x43
 8018446:	2164      	movs	r1, #100	; 0x64
 8018448:	2046      	movs	r0, #70	; 0x46
 801844a:	f004 fe67 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801844e:	4832      	ldr	r0, [pc, #200]	; (8018518 <GUI_TextEn_Info_Callibration+0xf8>)
 8018450:	f004 fd9a 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8018454:	2261      	movs	r2, #97	; 0x61
 8018456:	2166      	movs	r1, #102	; 0x66
 8018458:	2056      	movs	r0, #86	; 0x56
 801845a:	f004 fe5f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 801845e:	226c      	movs	r2, #108	; 0x6c
 8018460:	2166      	movs	r1, #102	; 0x66
 8018462:	2063      	movs	r0, #99	; 0x63
 8018464:	f004 fe5a 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 8018468:	2269      	movs	r2, #105	; 0x69
 801846a:	2166      	movs	r1, #102	; 0x66
 801846c:	206c      	movs	r0, #108	; 0x6c
 801846e:	f004 fe55 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 8018472:	2262      	movs	r2, #98	; 0x62
 8018474:	2166      	movs	r1, #102	; 0x66
 8018476:	2078      	movs	r0, #120	; 0x78
 8018478:	f004 fe50 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 801847c:	2272      	movs	r2, #114	; 0x72
 801847e:	2166      	movs	r1, #102	; 0x66
 8018480:	2085      	movs	r0, #133	; 0x85
 8018482:	f004 fe4b 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 8018486:	2261      	movs	r2, #97	; 0x61
 8018488:	2166      	movs	r1, #102	; 0x66
 801848a:	2092      	movs	r0, #146	; 0x92
 801848c:	f004 fe46 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 8018490:	2274      	movs	r2, #116	; 0x74
 8018492:	2166      	movs	r1, #102	; 0x66
 8018494:	209f      	movs	r0, #159	; 0x9f
 8018496:	f004 fe41 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 801849a:	2269      	movs	r2, #105	; 0x69
 801849c:	2166      	movs	r1, #102	; 0x66
 801849e:	20a7      	movs	r0, #167	; 0xa7
 80184a0:	f004 fe3c 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 80184a4:	226f      	movs	r2, #111	; 0x6f
 80184a6:	2166      	movs	r1, #102	; 0x66
 80184a8:	20b2      	movs	r0, #178	; 0xb2
 80184aa:	f004 fe37 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 80184ae:	226e      	movs	r2, #110	; 0x6e
 80184b0:	2166      	movs	r1, #102	; 0x66
 80184b2:	20be      	movs	r0, #190	; 0xbe
 80184b4:	f004 fe32 	bl	801d11c <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 80184b8:	4622      	mov	r2, r4
 80184ba:	4629      	mov	r1, r5
 80184bc:	4668      	mov	r0, sp
 80184be:	f008 fa29 	bl	8020914 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80184c2:	4816      	ldr	r0, [pc, #88]	; (801851c <GUI_TextEn_Info_Callibration+0xfc>)
 80184c4:	f004 fd60 	bl	801cf88 <TFT_SetFont>
	buffer[2] = '.';
 80184c8:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184ca:	2303      	movs	r3, #3
 80184cc:	466a      	mov	r2, sp
 80184ce:	2182      	movs	r1, #130	; 0x82
 80184d0:	201e      	movs	r0, #30
	buffer[2] = '.';
 80184d2:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184d6:	f004 fe79 	bl	801d1cc <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 80184da:	4632      	mov	r2, r6
 80184dc:	4629      	mov	r1, r5
 80184de:	4668      	mov	r0, sp
 80184e0:	f008 fa18 	bl	8020914 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184e4:	2303      	movs	r3, #3
 80184e6:	466a      	mov	r2, sp
 80184e8:	2182      	movs	r1, #130	; 0x82
 80184ea:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 80184ec:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184f0:	f004 fe6c 	bl	801d1cc <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 80184f4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80184f8:	4909      	ldr	r1, [pc, #36]	; (8018520 <GUI_TextEn_Info_Callibration+0x100>)
 80184fa:	4668      	mov	r0, sp
 80184fc:	f008 fa0a 	bl	8020914 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018500:	2303      	movs	r3, #3
 8018502:	466a      	mov	r2, sp
 8018504:	2182      	movs	r1, #130	; 0x82
 8018506:	209b      	movs	r0, #155	; 0x9b
 8018508:	f004 fe60 	bl	801d1cc <TFT_DisplayString>
}
 801850c:	b002      	add	sp, #8
 801850e:	bd70      	pop	{r4, r5, r6, pc}
 8018510:	200001b0 	.word	0x200001b0
 8018514:	080323f4 	.word	0x080323f4
 8018518:	200001c0 	.word	0x200001c0
 801851c:	200001f0 	.word	0x200001f0
 8018520:	080323f9 	.word	0x080323f9

08018524 <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8018524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018526:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8018528:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801852c:	2300      	movs	r3, #0
 801852e:	9300      	str	r3, [sp, #0]
 8018530:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018534:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 8018536:	f004 fd2d 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801853a:	2063      	movs	r0, #99	; 0x63
 801853c:	f004 fd30 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018540:	482e      	ldr	r0, [pc, #184]	; (80185fc <GUI_TextEn_Info_Serial+0xd8>)
 8018542:	f004 fd21 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 8018546:	2253      	movs	r2, #83	; 0x53
 8018548:	21c8      	movs	r1, #200	; 0xc8
 801854a:	203c      	movs	r0, #60	; 0x3c
 801854c:	f004 fde6 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018550:	482b      	ldr	r0, [pc, #172]	; (8018600 <GUI_TextEn_Info_Serial+0xdc>)
 8018552:	f004 fd19 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 8018556:	2265      	movs	r2, #101	; 0x65
 8018558:	21ca      	movs	r1, #202	; 0xca
 801855a:	204d      	movs	r0, #77	; 0x4d
 801855c:	f004 fdde 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 8018560:	2272      	movs	r2, #114	; 0x72
 8018562:	21ca      	movs	r1, #202	; 0xca
 8018564:	205a      	movs	r0, #90	; 0x5a
 8018566:	f004 fdd9 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 801856a:	2269      	movs	r2, #105	; 0x69
 801856c:	21ca      	movs	r1, #202	; 0xca
 801856e:	2066      	movs	r0, #102	; 0x66
 8018570:	f004 fdd4 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 8018574:	2261      	movs	r2, #97	; 0x61
 8018576:	21ca      	movs	r1, #202	; 0xca
 8018578:	2072      	movs	r0, #114	; 0x72
 801857a:	f004 fdcf 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 801857e:	226c      	movs	r2, #108	; 0x6c
 8018580:	21ca      	movs	r1, #202	; 0xca
 8018582:	207f      	movs	r0, #127	; 0x7f
 8018584:	f004 fdca 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 8018588:	226e      	movs	r2, #110	; 0x6e
 801858a:	21ca      	movs	r1, #202	; 0xca
 801858c:	2095      	movs	r0, #149	; 0x95
 801858e:	f004 fdc5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 8018592:	2275      	movs	r2, #117	; 0x75
 8018594:	21ca      	movs	r1, #202	; 0xca
 8018596:	20a2      	movs	r0, #162	; 0xa2
 8018598:	f004 fdc0 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 801859c:	226d      	movs	r2, #109	; 0x6d
 801859e:	21ca      	movs	r1, #202	; 0xca
 80185a0:	20af      	movs	r0, #175	; 0xaf
 80185a2:	f004 fdbb 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 80185a6:	2262      	movs	r2, #98	; 0x62
 80185a8:	21ca      	movs	r1, #202	; 0xca
 80185aa:	20bc      	movs	r0, #188	; 0xbc
 80185ac:	f004 fdb6 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 80185b0:	2265      	movs	r2, #101	; 0x65
 80185b2:	21ca      	movs	r1, #202	; 0xca
 80185b4:	20c9      	movs	r0, #201	; 0xc9
 80185b6:	f004 fdb1 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 80185ba:	2272      	movs	r2, #114	; 0x72
 80185bc:	21ca      	movs	r1, #202	; 0xca
 80185be:	20d6      	movs	r0, #214	; 0xd6
 80185c0:	f004 fdac 	bl	801d11c <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 80185c4:	462a      	mov	r2, r5
 80185c6:	490f      	ldr	r1, [pc, #60]	; (8018604 <GUI_TextEn_Info_Serial+0xe0>)
 80185c8:	4668      	mov	r0, sp
 80185ca:	f008 f9a3 	bl	8020914 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80185ce:	480e      	ldr	r0, [pc, #56]	; (8018608 <GUI_TextEn_Info_Serial+0xe4>)
 80185d0:	f004 fcda 	bl	801cf88 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80185d4:	2303      	movs	r3, #3
 80185d6:	466a      	mov	r2, sp
 80185d8:	21e6      	movs	r1, #230	; 0xe6
 80185da:	2028      	movs	r0, #40	; 0x28
 80185dc:	f004 fdf6 	bl	801d1cc <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 80185e0:	4622      	mov	r2, r4
 80185e2:	490a      	ldr	r1, [pc, #40]	; (801860c <GUI_TextEn_Info_Serial+0xe8>)
 80185e4:	4668      	mov	r0, sp
 80185e6:	f008 f995 	bl	8020914 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80185ea:	2303      	movs	r3, #3
 80185ec:	466a      	mov	r2, sp
 80185ee:	21e6      	movs	r1, #230	; 0xe6
 80185f0:	2087      	movs	r0, #135	; 0x87
 80185f2:	f004 fdeb 	bl	801d1cc <TFT_DisplayString>
}
 80185f6:	b003      	add	sp, #12
 80185f8:	bd30      	pop	{r4, r5, pc}
 80185fa:	bf00      	nop
 80185fc:	200001b0 	.word	0x200001b0
 8018600:	200001c0 	.word	0x200001c0
 8018604:	080323fd 	.word	0x080323fd
 8018608:	200001f0 	.word	0x200001f0
 801860c:	08032400 	.word	0x08032400

08018610 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8018610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 8018612:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8018614:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018618:	9302      	str	r3, [sp, #8]
 801861a:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801861e:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 8018622:	f004 fcb7 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018626:	2063      	movs	r0, #99	; 0x63
 8018628:	f004 fcba 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801862c:	482e      	ldr	r0, [pc, #184]	; (80186e8 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 801862e:	4c2f      	ldr	r4, [pc, #188]	; (80186ec <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 8018630:	f004 fcaa 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 8018634:	2246      	movs	r2, #70	; 0x46
 8018636:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801863a:	2014      	movs	r0, #20
 801863c:	f004 fd6e 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018640:	482b      	ldr	r0, [pc, #172]	; (80186f0 <GUI_TextEn_Info_Ver+0xe0>)
 8018642:	f004 fca1 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 8018646:	2269      	movs	r2, #105	; 0x69
 8018648:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801864c:	2024      	movs	r0, #36	; 0x24
 801864e:	f004 fd65 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 8018652:	2272      	movs	r2, #114	; 0x72
 8018654:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018658:	202f      	movs	r0, #47	; 0x2f
 801865a:	f004 fd5f 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 801865e:	226d      	movs	r2, #109	; 0x6d
 8018660:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018664:	203c      	movs	r0, #60	; 0x3c
 8018666:	f004 fd59 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 801866a:	2277      	movs	r2, #119	; 0x77
 801866c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018670:	204b      	movs	r0, #75	; 0x4b
 8018672:	f004 fd53 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 8018676:	2261      	movs	r2, #97	; 0x61
 8018678:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801867c:	205a      	movs	r0, #90	; 0x5a
 801867e:	f004 fd4d 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 8018682:	2272      	movs	r2, #114	; 0x72
 8018684:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018688:	206a      	movs	r0, #106	; 0x6a
 801868a:	f004 fd47 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 801868e:	2265      	movs	r2, #101	; 0x65
 8018690:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018694:	2077      	movs	r0, #119	; 0x77
 8018696:	f004 fd41 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16);
 801869a:	4620      	mov	r0, r4
 801869c:	f004 fc74 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 80186a0:	222e      	movs	r2, #46	; 0x2e
 80186a2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80186a6:	20ac      	movs	r0, #172	; 0xac
 80186a8:	f004 fd38 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 80186ac:	2276      	movs	r2, #118	; 0x76
 80186ae:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80186b2:	20a2      	movs	r0, #162	; 0xa2
 80186b4:	f004 fd32 	bl	801d11c <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 80186b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80186bc:	ee10 0a10 	vmov	r0, s0
 80186c0:	f7e7 ff5a 	bl	8000578 <__aeabi_f2d>
 80186c4:	4602      	mov	r2, r0
 80186c6:	460b      	mov	r3, r1
 80186c8:	a802      	add	r0, sp, #8
 80186ca:	490a      	ldr	r1, [pc, #40]	; (80186f4 <GUI_TextEn_Info_Ver+0xe4>)
 80186cc:	f008 f922 	bl	8020914 <sprintf>
	TFT_SetFont(&Font16);
 80186d0:	4620      	mov	r0, r4
 80186d2:	f004 fc59 	bl	801cf88 <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 80186d6:	2303      	movs	r3, #3
 80186d8:	aa02      	add	r2, sp, #8
 80186da:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80186de:	20c0      	movs	r0, #192	; 0xc0
 80186e0:	f004 fd74 	bl	801d1cc <TFT_DisplayString>
}
 80186e4:	b004      	add	sp, #16
 80186e6:	bd10      	pop	{r4, pc}
 80186e8:	200001b0 	.word	0x200001b0
 80186ec:	200001a8 	.word	0x200001a8
 80186f0:	200001c0 	.word	0x200001c0
 80186f4:	080323e5 	.word	0x080323e5

080186f8 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 80186f8:	b538      	push	{r3, r4, r5, lr}
 80186fa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80186fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018700:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018702:	f004 fc47 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 8018706:	2084      	movs	r0, #132	; 0x84
 8018708:	f004 fc4a 	bl	801cfa0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 801870c:	4825      	ldr	r0, [pc, #148]	; (80187a4 <GUI_TitleString_Name+0xac>)
 801870e:	f004 fc3b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 8018712:	4629      	mov	r1, r5
 8018714:	4620      	mov	r0, r4
 8018716:	2254      	movs	r2, #84	; 0x54
 8018718:	f004 fd00 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 801871c:	f104 000f 	add.w	r0, r4, #15
 8018720:	4629      	mov	r1, r5
 8018722:	224b      	movs	r2, #75	; 0x4b
 8018724:	b280      	uxth	r0, r0
 8018726:	f004 fcf9 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 801872a:	f104 001e 	add.w	r0, r4, #30
 801872e:	4629      	mov	r1, r5
 8018730:	2241      	movs	r2, #65	; 0x41
 8018732:	b280      	uxth	r0, r0
 8018734:	f004 fcf2 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 8018738:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 801873c:	4629      	mov	r1, r5
 801873e:	222d      	movs	r2, #45	; 0x2d
 8018740:	b280      	uxth	r0, r0
 8018742:	f004 fceb 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 8018746:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801874a:	4629      	mov	r1, r5
 801874c:	2253      	movs	r2, #83	; 0x53
 801874e:	b280      	uxth	r0, r0
 8018750:	f004 fce4 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018754:	4814      	ldr	r0, [pc, #80]	; (80187a8 <GUI_TitleString_Name+0xb0>)
 8018756:	f004 fc17 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 801875a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 801875e:	4629      	mov	r1, r5
 8018760:	2270      	movs	r2, #112	; 0x70
 8018762:	b280      	uxth	r0, r0
 8018764:	f004 fcda 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 8018768:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801876c:	4629      	mov	r1, r5
 801876e:	2265      	movs	r2, #101	; 0x65
 8018770:	b280      	uxth	r0, r0
 8018772:	f004 fcd3 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 8018776:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801877a:	4629      	mov	r1, r5
 801877c:	2263      	movs	r2, #99	; 0x63
 801877e:	b280      	uxth	r0, r0
 8018780:	f004 fccc 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 8018784:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018788:	4629      	mov	r1, r5
 801878a:	2274      	movs	r2, #116	; 0x74
 801878c:	b280      	uxth	r0, r0
 801878e:	f004 fcc5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 8018792:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8018796:	4629      	mov	r1, r5
 8018798:	2272      	movs	r2, #114	; 0x72
 801879a:	b280      	uxth	r0, r0
}
 801879c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 80187a0:	f004 bcbc 	b.w	801d11c <TFT_DrawChar>
 80187a4:	200001b0 	.word	0x200001b0
 80187a8:	200001c0 	.word	0x200001c0

080187ac <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 80187ac:	b530      	push	{r4, r5, lr}
 80187ae:	b085      	sub	sp, #20
	char buffer[5] = {0};
 80187b0:	2300      	movs	r3, #0
{
 80187b2:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 80187b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80187b8:	9302      	str	r3, [sp, #8]
 80187ba:	f88d 300c 	strb.w	r3, [sp, #12]
{
 80187be:	ed8d 0a01 	vstr	s0, [sp, #4]
 80187c2:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80187c4:	f004 fbe6 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 80187c8:	2084      	movs	r0, #132	; 0x84
 80187ca:	f004 fbe9 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 80187ce:	4815      	ldr	r0, [pc, #84]	; (8018824 <GUI_TitleString_Version+0x78>)
 80187d0:	f004 fbda 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 80187d4:	4629      	mov	r1, r5
 80187d6:	2276      	movs	r2, #118	; 0x76
 80187d8:	4620      	mov	r0, r4
 80187da:	f004 fc9f 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80187de:	4812      	ldr	r0, [pc, #72]	; (8018828 <GUI_TitleString_Version+0x7c>)
 80187e0:	f004 fbd2 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 80187e4:	f104 000d 	add.w	r0, r4, #13
 80187e8:	222e      	movs	r2, #46	; 0x2e
 80187ea:	4629      	mov	r1, r5
 80187ec:	b280      	uxth	r0, r0
 80187ee:	f004 fc95 	bl	801d11c <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 80187f2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80187f6:	ee10 0a10 	vmov	r0, s0
 80187fa:	f7e7 febd 	bl	8000578 <__aeabi_f2d>
 80187fe:	4602      	mov	r2, r0
 8018800:	460b      	mov	r3, r1
 8018802:	a802      	add	r0, sp, #8
 8018804:	4909      	ldr	r1, [pc, #36]	; (801882c <GUI_TitleString_Version+0x80>)
 8018806:	f008 f885 	bl	8020914 <sprintf>
	TFT_SetFont(&Font16);
 801880a:	4809      	ldr	r0, [pc, #36]	; (8018830 <GUI_TitleString_Version+0x84>)
 801880c:	f004 fbbc 	bl	801cf88 <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 8018810:	f104 0018 	add.w	r0, r4, #24
 8018814:	2303      	movs	r3, #3
 8018816:	aa02      	add	r2, sp, #8
 8018818:	4629      	mov	r1, r5
 801881a:	b280      	uxth	r0, r0
 801881c:	f004 fcd6 	bl	801d1cc <TFT_DisplayString>
}
 8018820:	b005      	add	sp, #20
 8018822:	bd30      	pop	{r4, r5, pc}
 8018824:	200001c0 	.word	0x200001c0
 8018828:	200001b0 	.word	0x200001b0
 801882c:	080323e5 	.word	0x080323e5
 8018830:	200001a8 	.word	0x200001a8

08018834 <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 8018834:	b538      	push	{r3, r4, r5, lr}
 8018836:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018838:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801883c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801883e:	f004 fba9 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018842:	2063      	movs	r0, #99	; 0x63
 8018844:	f004 fbac 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018848:	4811      	ldr	r0, [pc, #68]	; (8018890 <GUI_TextRu_Language+0x5c>)
 801884a:	f004 fb9d 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801884e:	4621      	mov	r1, r4
 8018850:	22af      	movs	r2, #175	; 0xaf
 8018852:	4628      	mov	r0, r5
 8018854:	f004 fbaa 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8018858:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801885a:	480e      	ldr	r0, [pc, #56]	; (8018894 <GUI_TextRu_Language+0x60>)
 801885c:	f004 fb94 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8018860:	b2a4      	uxth	r4, r4
 8018862:	f105 000f 	add.w	r0, r5, #15
 8018866:	4621      	mov	r1, r4
 8018868:	22b7      	movs	r2, #183	; 0xb7
 801886a:	b280      	uxth	r0, r0
 801886c:	f004 fb9e 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 8018870:	f105 001c 	add.w	r0, r5, #28
 8018874:	4621      	mov	r1, r4
 8018876:	228b      	movs	r2, #139	; 0x8b
 8018878:	b280      	uxth	r0, r0
 801887a:	f004 fb97 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801887e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018882:	4621      	mov	r1, r4
 8018884:	22ba      	movs	r2, #186	; 0xba
 8018886:	b280      	uxth	r0, r0
}
 8018888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801888c:	f004 bb8e 	b.w	801cfac <TFT_DrawCharRus>
 8018890:	200001d0 	.word	0x200001d0
 8018894:	200001d8 	.word	0x200001d8

08018898 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 8018898:	b538      	push	{r3, r4, r5, lr}
 801889a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801889c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80188a0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80188a2:	f004 fb77 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80188a6:	2063      	movs	r0, #99	; 0x63
 80188a8:	f004 fb7a 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80188ac:	481c      	ldr	r0, [pc, #112]	; (8018920 <GUI_TextRu_Russian+0x88>)
 80188ae:	f004 fb6b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 80188b2:	4621      	mov	r1, r4
 80188b4:	22a0      	movs	r2, #160	; 0xa0
 80188b6:	4628      	mov	r0, r5
 80188b8:	f004 fb78 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 80188bc:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80188be:	4819      	ldr	r0, [pc, #100]	; (8018924 <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 80188c0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80188c2:	f004 fb61 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 80188c6:	f105 000f 	add.w	r0, r5, #15
 80188ca:	4621      	mov	r1, r4
 80188cc:	2283      	movs	r2, #131	; 0x83
 80188ce:	b280      	uxth	r0, r0
 80188d0:	f004 fb6c 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 80188d4:	f105 001c 	add.w	r0, r5, #28
 80188d8:	4621      	mov	r1, r4
 80188da:	2281      	movs	r2, #129	; 0x81
 80188dc:	b280      	uxth	r0, r0
 80188de:	f004 fb65 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 80188e2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80188e6:	4621      	mov	r1, r4
 80188e8:	2281      	movs	r2, #129	; 0x81
 80188ea:	b280      	uxth	r0, r0
 80188ec:	f004 fb5e 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 80188f0:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80188f4:	4621      	mov	r1, r4
 80188f6:	22ba      	movs	r2, #186	; 0xba
 80188f8:	b280      	uxth	r0, r0
 80188fa:	f004 fb57 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 80188fe:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8018902:	4621      	mov	r1, r4
 8018904:	22b8      	movs	r2, #184	; 0xb8
 8018906:	b280      	uxth	r0, r0
 8018908:	f004 fb50 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801890c:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8018910:	4621      	mov	r1, r4
 8018912:	22b9      	movs	r2, #185	; 0xb9
 8018914:	b280      	uxth	r0, r0
}
 8018916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801891a:	f004 bb47 	b.w	801cfac <TFT_DrawCharRus>
 801891e:	bf00      	nop
 8018920:	200001d0 	.word	0x200001d0
 8018924:	200001d8 	.word	0x200001d8

08018928 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 8018928:	b538      	push	{r3, r4, r5, lr}
 801892a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801892c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018930:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018932:	f004 fb2f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018936:	2063      	movs	r0, #99	; 0x63
 8018938:	f004 fb32 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801893c:	4849      	ldr	r0, [pc, #292]	; (8018a64 <GUI_TextRu_Info+0x13c>)
 801893e:	f004 fb23 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 8018942:	4621      	mov	r1, r4
 8018944:	2298      	movs	r2, #152	; 0x98
 8018946:	4628      	mov	r0, r5
 8018948:	f004 fb30 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801894c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801894e:	4846      	ldr	r0, [pc, #280]	; (8018a68 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8018950:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018952:	f004 fb19 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8018956:	f105 000f 	add.w	r0, r5, #15
 801895a:	4621      	mov	r1, r4
 801895c:	22bd      	movs	r2, #189	; 0xbd
 801895e:	b280      	uxth	r0, r0
 8018960:	f004 fb24 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 8018964:	f105 001c 	add.w	r0, r5, #28
 8018968:	4621      	mov	r1, r4
 801896a:	2284      	movs	r2, #132	; 0x84
 801896c:	b280      	uxth	r0, r0
 801896e:	f004 fb1d 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 8018972:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018976:	4621      	mov	r1, r4
 8018978:	22be      	movs	r2, #190	; 0xbe
 801897a:	b280      	uxth	r0, r0
 801897c:	f004 fb16 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 8018980:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8018984:	4621      	mov	r1, r4
 8018986:	2280      	movs	r2, #128	; 0x80
 8018988:	b280      	uxth	r0, r0
 801898a:	f004 fb0f 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 801898e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8018992:	4621      	mov	r1, r4
 8018994:	22bc      	movs	r2, #188	; 0xbc
 8018996:	b280      	uxth	r0, r0
 8018998:	f004 fb08 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 801899c:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 80189a0:	4621      	mov	r1, r4
 80189a2:	22b0      	movs	r2, #176	; 0xb0
 80189a4:	b280      	uxth	r0, r0
 80189a6:	f004 fb01 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 80189aa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80189ae:	4621      	mov	r1, r4
 80189b0:	2286      	movs	r2, #134	; 0x86
 80189b2:	b280      	uxth	r0, r0
 80189b4:	f004 fafa 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 80189b8:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80189bc:	4621      	mov	r1, r4
 80189be:	22b8      	movs	r2, #184	; 0xb8
 80189c0:	b280      	uxth	r0, r0
 80189c2:	f004 faf3 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 80189c6:	f105 0072 	add.w	r0, r5, #114	; 0x72
 80189ca:	4621      	mov	r1, r4
 80189cc:	228f      	movs	r2, #143	; 0x8f
 80189ce:	b280      	uxth	r0, r0
 80189d0:	f004 faec 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 80189d4:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 80189d8:	4621      	mov	r1, r4
 80189da:	2201      	movs	r2, #1
 80189dc:	b280      	uxth	r0, r0
 80189de:	f004 fae5 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 80189e2:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80189e6:	4621      	mov	r1, r4
 80189e8:	22be      	movs	r2, #190	; 0xbe
 80189ea:	b280      	uxth	r0, r0
 80189ec:	f004 fade 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 80189f0:	f105 0096 	add.w	r0, r5, #150	; 0x96
 80189f4:	4621      	mov	r1, r4
 80189f6:	2201      	movs	r2, #1
 80189f8:	b280      	uxth	r0, r0
 80189fa:	f004 fad7 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 80189fe:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8018a02:	4621      	mov	r1, r4
 8018a04:	22bf      	movs	r2, #191	; 0xbf
 8018a06:	b280      	uxth	r0, r0
 8018a08:	f004 fad0 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 8018a0c:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8018a10:	4621      	mov	r1, r4
 8018a12:	2280      	movs	r2, #128	; 0x80
 8018a14:	b280      	uxth	r0, r0
 8018a16:	f004 fac9 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 8018a1a:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 8018a1e:	4621      	mov	r1, r4
 8018a20:	22b8      	movs	r2, #184	; 0xb8
 8018a22:	b280      	uxth	r0, r0
 8018a24:	f004 fac2 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 8018a28:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8018a2c:	4621      	mov	r1, r4
 8018a2e:	22b1      	movs	r2, #177	; 0xb1
 8018a30:	b280      	uxth	r0, r0
 8018a32:	f004 fabb 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 8018a36:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 8018a3a:	4621      	mov	r1, r4
 8018a3c:	22be      	movs	r2, #190	; 0xbe
 8018a3e:	b280      	uxth	r0, r0
 8018a40:	f004 fab4 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 8018a44:	f105 00de 	add.w	r0, r5, #222	; 0xde
 8018a48:	4621      	mov	r1, r4
 8018a4a:	2280      	movs	r2, #128	; 0x80
 8018a4c:	b280      	uxth	r0, r0
 8018a4e:	f004 faad 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8018a52:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 8018a56:	4621      	mov	r1, r4
 8018a58:	22b5      	movs	r2, #181	; 0xb5
 8018a5a:	b280      	uxth	r0, r0
}
 8018a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8018a60:	f004 baa4 	b.w	801cfac <TFT_DrawCharRus>
 8018a64:	200001d0 	.word	0x200001d0
 8018a68:	200001d8 	.word	0x200001d8

08018a6c <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 8018a6c:	b538      	push	{r3, r4, r5, lr}
 8018a6e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018a70:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018a74:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018a76:	f004 fa8d 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018a7a:	2063      	movs	r0, #99	; 0x63
 8018a7c:	f004 fa90 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018a80:	4815      	ldr	r0, [pc, #84]	; (8018ad8 <GUI_TextRu_Mode+0x6c>)
 8018a82:	f004 fa81 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 8018a86:	4621      	mov	r1, r4
 8018a88:	22a0      	movs	r2, #160	; 0xa0
 8018a8a:	4628      	mov	r0, r5
 8018a8c:	f004 fa8e 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 8018a90:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018a92:	4812      	ldr	r0, [pc, #72]	; (8018adc <GUI_TextRu_Mode+0x70>)
 8018a94:	f004 fa78 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 8018a98:	b2a4      	uxth	r4, r4
 8018a9a:	f105 000f 	add.w	r0, r5, #15
 8018a9e:	4621      	mov	r1, r4
 8018aa0:	22b5      	movs	r2, #181	; 0xb5
 8018aa2:	b280      	uxth	r0, r0
 8018aa4:	f004 fa82 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 8018aa8:	f105 001c 	add.w	r0, r5, #28
 8018aac:	4621      	mov	r1, r4
 8018aae:	22b6      	movs	r2, #182	; 0xb6
 8018ab0:	b280      	uxth	r0, r0
 8018ab2:	f004 fa7b 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 8018ab6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018aba:	4621      	mov	r1, r4
 8018abc:	22b8      	movs	r2, #184	; 0xb8
 8018abe:	b280      	uxth	r0, r0
 8018ac0:	f004 fa74 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 8018ac4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8018ac8:	4621      	mov	r1, r4
 8018aca:	22bc      	movs	r2, #188	; 0xbc
 8018acc:	b280      	uxth	r0, r0
}
 8018ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 8018ad2:	f004 ba6b 	b.w	801cfac <TFT_DrawCharRus>
 8018ad6:	bf00      	nop
 8018ad8:	200001d0 	.word	0x200001d0
 8018adc:	200001d8 	.word	0x200001d8

08018ae0 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 8018ae0:	b538      	push	{r3, r4, r5, lr}
 8018ae2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018ae4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ae8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018aea:	f004 fa53 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018aee:	2063      	movs	r0, #99	; 0x63
 8018af0:	f004 fa56 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018af4:	482d      	ldr	r0, [pc, #180]	; (8018bac <GUI_TextRu_Illuminance+0xcc>)
 8018af6:	f004 fa47 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 8018afa:	4621      	mov	r1, r4
 8018afc:	229e      	movs	r2, #158	; 0x9e
 8018afe:	4628      	mov	r0, r5
 8018b00:	f004 fa54 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018b04:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018b06:	482a      	ldr	r0, [pc, #168]	; (8018bb0 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018b08:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018b0a:	f004 fa3d 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018b0e:	f105 000f 	add.w	r0, r5, #15
 8018b12:	4621      	mov	r1, r4
 8018b14:	2281      	movs	r2, #129	; 0x81
 8018b16:	b280      	uxth	r0, r0
 8018b18:	f004 fa48 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 8018b1c:	f105 001a 	add.w	r0, r5, #26
 8018b20:	4621      	mov	r1, r4
 8018b22:	22b2      	movs	r2, #178	; 0xb2
 8018b24:	b280      	uxth	r0, r0
 8018b26:	f004 fa41 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 8018b2a:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8018b2e:	4621      	mov	r1, r4
 8018b30:	22b5      	movs	r2, #181	; 0xb5
 8018b32:	b280      	uxth	r0, r0
 8018b34:	f004 fa3a 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 8018b38:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8018b3c:	4621      	mov	r1, r4
 8018b3e:	2289      	movs	r2, #137	; 0x89
 8018b40:	b280      	uxth	r0, r0
 8018b42:	f004 fa33 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 8018b46:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8018b4a:	4621      	mov	r1, r4
 8018b4c:	22b5      	movs	r2, #181	; 0xb5
 8018b4e:	b280      	uxth	r0, r0
 8018b50:	f004 fa2c 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 8018b54:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018b58:	4621      	mov	r1, r4
 8018b5a:	22bd      	movs	r2, #189	; 0xbd
 8018b5c:	b280      	uxth	r0, r0
 8018b5e:	f004 fa25 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 8018b62:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8018b66:	4621      	mov	r1, r4
 8018b68:	22bd      	movs	r2, #189	; 0xbd
 8018b6a:	b280      	uxth	r0, r0
 8018b6c:	f004 fa1e 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8018b70:	f105 0061 	add.w	r0, r5, #97	; 0x61
 8018b74:	4621      	mov	r1, r4
 8018b76:	22be      	movs	r2, #190	; 0xbe
 8018b78:	b280      	uxth	r0, r0
 8018b7a:	f004 fa17 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8018b7e:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8018b82:	4621      	mov	r1, r4
 8018b84:	2281      	movs	r2, #129	; 0x81
 8018b86:	b280      	uxth	r0, r0
 8018b88:	f004 fa10 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 8018b8c:	f105 0076 	add.w	r0, r5, #118	; 0x76
 8018b90:	4621      	mov	r1, r4
 8018b92:	2282      	movs	r2, #130	; 0x82
 8018b94:	b280      	uxth	r0, r0
 8018b96:	f004 fa09 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 8018b9a:	f105 0082 	add.w	r0, r5, #130	; 0x82
 8018b9e:	4621      	mov	r1, r4
 8018ba0:	228c      	movs	r2, #140	; 0x8c
 8018ba2:	b280      	uxth	r0, r0
}
 8018ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 8018ba8:	f004 ba00 	b.w	801cfac <TFT_DrawCharRus>
 8018bac:	200001d0 	.word	0x200001d0
 8018bb0:	200001d8 	.word	0x200001d8

08018bb4 <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 8018bb4:	b538      	push	{r3, r4, r5, lr}
 8018bb6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018bb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018bbc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018bbe:	f004 f9e9 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018bc2:	2063      	movs	r0, #99	; 0x63
 8018bc4:	f004 f9ec 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018bc8:	480b      	ldr	r0, [pc, #44]	; (8018bf8 <GUI_TextRu_PPF+0x44>)
 8018bca:	f004 f9dd 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 8018bce:	4629      	mov	r1, r5
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	22a4      	movs	r2, #164	; 0xa4
 8018bd4:	f004 f9ea 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018bd8:	f104 0011 	add.w	r0, r4, #17
 8018bdc:	4629      	mov	r1, r5
 8018bde:	2290      	movs	r2, #144	; 0x90
 8018be0:	b280      	uxth	r0, r0
 8018be2:	f004 f9e3 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018be6:	f104 0020 	add.w	r0, r4, #32
 8018bea:	4629      	mov	r1, r5
 8018bec:	22a0      	movs	r2, #160	; 0xa0
 8018bee:	b280      	uxth	r0, r0
}
 8018bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018bf4:	f004 b9da 	b.w	801cfac <TFT_DrawCharRus>
 8018bf8:	200001d0 	.word	0x200001d0

08018bfc <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 8018bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c00:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 8018c02:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8018d10 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 8018c06:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8018d14 <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 8018c0a:	4f40      	ldr	r7, [pc, #256]	; (8018d0c <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 8018c0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c10:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018c12:	f004 f9bf 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c16:	2063      	movs	r0, #99	; 0x63
 8018c18:	f004 f9c2 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018c1c:	4648      	mov	r0, r9
 8018c1e:	f004 f9b3 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 8018c22:	4629      	mov	r1, r5
 8018c24:	22a1      	movs	r2, #161	; 0xa1
 8018c26:	4620      	mov	r0, r4
 8018c28:	f004 f9c0 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018c2c:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018c2e:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018c30:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 8018c32:	f004 f9a9 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018c36:	f104 000f 	add.w	r0, r4, #15
 8018c3a:	4631      	mov	r1, r6
 8018c3c:	22b8      	movs	r2, #184	; 0xb8
 8018c3e:	b280      	uxth	r0, r0
 8018c40:	f004 f9b4 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 8018c44:	f104 001b 	add.w	r0, r4, #27
 8018c48:	4631      	mov	r1, r6
 8018c4a:	22bd      	movs	r2, #189	; 0xbd
 8018c4c:	b280      	uxth	r0, r0
 8018c4e:	f004 f9ad 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018c52:	4638      	mov	r0, r7
 8018c54:	f004 f998 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 8018c58:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018c5c:	4629      	mov	r1, r5
 8018c5e:	222d      	movs	r2, #45	; 0x2d
 8018c60:	b280      	uxth	r0, r0
 8018c62:	f004 fa5b 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 8018c66:	4648      	mov	r0, r9
 8018c68:	f004 f98e 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 8018c6c:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8018c70:	4629      	mov	r1, r5
 8018c72:	2297      	movs	r2, #151	; 0x97
 8018c74:	b280      	uxth	r0, r0
 8018c76:	f004 f999 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018c7a:	4640      	mov	r0, r8
 8018c7c:	f004 f984 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 8018c80:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8018c84:	4631      	mov	r1, r6
 8018c86:	22b5      	movs	r2, #181	; 0xb5
 8018c88:	b280      	uxth	r0, r0
 8018c8a:	f004 f98f 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 8018c8e:	f104 0052 	add.w	r0, r4, #82	; 0x52
 8018c92:	4631      	mov	r1, r6
 8018c94:	22bb      	movs	r2, #187	; 0xbb
 8018c96:	b280      	uxth	r0, r0
 8018c98:	f004 f988 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018c9c:	4638      	mov	r0, r7
 8018c9e:	f004 f973 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 8018ca2:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 8018ca6:	4629      	mov	r1, r5
 8018ca8:	222d      	movs	r2, #45	; 0x2d
 8018caa:	b280      	uxth	r0, r0
 8018cac:	f004 fa36 	bl	801d11c <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 8018cb0:	4648      	mov	r0, r9
 8018cb2:	f004 f969 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 8018cb6:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018cba:	4629      	mov	r1, r5
 8018cbc:	229a      	movs	r2, #154	; 0x9a
 8018cbe:	b280      	uxth	r0, r0
 8018cc0:	f004 f974 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018cc4:	4640      	mov	r0, r8
 8018cc6:	f004 f95f 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 8018cca:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8018cce:	4631      	mov	r1, r6
 8018cd0:	2280      	movs	r2, #128	; 0x80
 8018cd2:	b280      	uxth	r0, r0
 8018cd4:	f004 f96a 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018cd8:	4638      	mov	r0, r7
 8018cda:	f004 f955 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 8018cde:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8018ce2:	4629      	mov	r1, r5
 8018ce4:	222d      	movs	r2, #45	; 0x2d
 8018ce6:	b280      	uxth	r0, r0
 8018ce8:	f004 fa18 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 8018cec:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8018cf0:	4629      	mov	r1, r5
 8018cf2:	2246      	movs	r2, #70	; 0x46
 8018cf4:	b280      	uxth	r0, r0
 8018cf6:	f004 fa11 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 8018cfa:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 8018cfe:	4629      	mov	r1, r5
 8018d00:	2252      	movs	r2, #82	; 0x52
 8018d02:	b280      	uxth	r0, r0
}
 8018d04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 8018d08:	f004 ba08 	b.w	801d11c <TFT_DrawChar>
 8018d0c:	200001b0 	.word	0x200001b0
 8018d10:	200001d0 	.word	0x200001d0
 8018d14:	200001d8 	.word	0x200001d8

08018d18 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 8018d18:	b538      	push	{r3, r4, r5, lr}
 8018d1a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018d1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018d20:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018d22:	f004 f937 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d26:	2063      	movs	r0, #99	; 0x63
 8018d28:	f004 f93a 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018d2c:	482d      	ldr	r0, [pc, #180]	; (8018de4 <GUI_TextRu_PPF_bands+0xcc>)
 8018d2e:	f004 f92b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 8018d32:	4621      	mov	r1, r4
 8018d34:	4628      	mov	r0, r5
 8018d36:	22a4      	movs	r2, #164	; 0xa4
 8018d38:	f004 f938 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018d3c:	f105 0011 	add.w	r0, r5, #17
 8018d40:	4621      	mov	r1, r4
 8018d42:	2290      	movs	r2, #144	; 0x90
 8018d44:	b280      	uxth	r0, r0
 8018d46:	f004 f931 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018d4a:	f105 0020 	add.w	r0, r5, #32
 8018d4e:	4621      	mov	r1, r4
 8018d50:	22a0      	movs	r2, #160	; 0xa0
 8018d52:	b280      	uxth	r0, r0
 8018d54:	f004 f92a 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018d58:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 8018d5a:	4823      	ldr	r0, [pc, #140]	; (8018de8 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018d5c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018d5e:	f004 f913 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018d62:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8018d66:	4621      	mov	r1, r4
 8018d68:	22b4      	movs	r2, #180	; 0xb4
 8018d6a:	b280      	uxth	r0, r0
 8018d6c:	f004 f91e 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 8018d70:	f105 0046 	add.w	r0, r5, #70	; 0x46
 8018d74:	4621      	mov	r1, r4
 8018d76:	22b8      	movs	r2, #184	; 0xb8
 8018d78:	b280      	uxth	r0, r0
 8018d7a:	f004 f917 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 8018d7e:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8018d82:	4621      	mov	r1, r4
 8018d84:	22b0      	movs	r2, #176	; 0xb0
 8018d86:	b280      	uxth	r0, r0
 8018d88:	f004 f910 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 8018d8c:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8018d90:	4621      	mov	r1, r4
 8018d92:	22bf      	movs	r2, #191	; 0xbf
 8018d94:	b280      	uxth	r0, r0
 8018d96:	f004 f909 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 8018d9a:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8018d9e:	4621      	mov	r1, r4
 8018da0:	22b0      	movs	r2, #176	; 0xb0
 8018da2:	b280      	uxth	r0, r0
 8018da4:	f004 f902 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 8018da8:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 8018dac:	4621      	mov	r1, r4
 8018dae:	22b7      	movs	r2, #183	; 0xb7
 8018db0:	b280      	uxth	r0, r0
 8018db2:	f004 f8fb 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 8018db6:	f105 0087 	add.w	r0, r5, #135	; 0x87
 8018dba:	4621      	mov	r1, r4
 8018dbc:	22be      	movs	r2, #190	; 0xbe
 8018dbe:	b280      	uxth	r0, r0
 8018dc0:	f004 f8f4 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 8018dc4:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8018dc8:	4621      	mov	r1, r4
 8018dca:	22bd      	movs	r2, #189	; 0xbd
 8018dcc:	b280      	uxth	r0, r0
 8018dce:	f004 f8ed 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018dd2:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8018dd6:	4621      	mov	r1, r4
 8018dd8:	228b      	movs	r2, #139	; 0x8b
 8018dda:	b280      	uxth	r0, r0
}
 8018ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018de0:	f004 b8e4 	b.w	801cfac <TFT_DrawCharRus>
 8018de4:	200001d0 	.word	0x200001d0
 8018de8:	200001d8 	.word	0x200001d8

08018dec <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8018dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018dee:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8018df0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018df4:	2300      	movs	r3, #0
 8018df6:	9300      	str	r3, [sp, #0]
 8018df8:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018dfc:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8018dfe:	f004 f8c9 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e02:	2063      	movs	r0, #99	; 0x63
 8018e04:	f004 f8cc 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018e08:	4832      	ldr	r0, [pc, #200]	; (8018ed4 <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 8018e0a:	4d33      	ldr	r5, [pc, #204]	; (8018ed8 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 8018e0c:	f004 f8bc 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 8018e10:	229a      	movs	r2, #154	; 0x9a
 8018e12:	2160      	movs	r1, #96	; 0x60
 8018e14:	2046      	movs	r0, #70	; 0x46
 8018e16:	f004 f8c9 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018e1a:	4830      	ldr	r0, [pc, #192]	; (8018edc <GUI_TextRu_Info_Callibration+0xf0>)
 8018e1c:	f004 f8b4 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 8018e20:	22b0      	movs	r2, #176	; 0xb0
 8018e22:	2166      	movs	r1, #102	; 0x66
 8018e24:	2057      	movs	r0, #87	; 0x57
 8018e26:	f004 f8c1 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 8018e2a:	22bb      	movs	r2, #187	; 0xbb
 8018e2c:	2166      	movs	r1, #102	; 0x66
 8018e2e:	2064      	movs	r0, #100	; 0x64
 8018e30:	f004 f8bc 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 8018e34:	22b8      	movs	r2, #184	; 0xb8
 8018e36:	2166      	movs	r1, #102	; 0x66
 8018e38:	2071      	movs	r0, #113	; 0x71
 8018e3a:	f004 f8b7 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 8018e3e:	22b1      	movs	r2, #177	; 0xb1
 8018e40:	2166      	movs	r1, #102	; 0x66
 8018e42:	207e      	movs	r0, #126	; 0x7e
 8018e44:	f004 f8b2 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 8018e48:	2280      	movs	r2, #128	; 0x80
 8018e4a:	2166      	movs	r1, #102	; 0x66
 8018e4c:	208b      	movs	r0, #139	; 0x8b
 8018e4e:	f004 f8ad 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 8018e52:	22be      	movs	r2, #190	; 0xbe
 8018e54:	2166      	movs	r1, #102	; 0x66
 8018e56:	2098      	movs	r0, #152	; 0x98
 8018e58:	f004 f8a8 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 8018e5c:	22b2      	movs	r2, #178	; 0xb2
 8018e5e:	2166      	movs	r1, #102	; 0x66
 8018e60:	20a5      	movs	r0, #165	; 0xa5
 8018e62:	f004 f8a3 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 8018e66:	22ba      	movs	r2, #186	; 0xba
 8018e68:	2166      	movs	r1, #102	; 0x66
 8018e6a:	20b2      	movs	r0, #178	; 0xb2
 8018e6c:	f004 f89e 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 8018e70:	22b0      	movs	r2, #176	; 0xb0
 8018e72:	2166      	movs	r1, #102	; 0x66
 8018e74:	20bc      	movs	r0, #188	; 0xbc
 8018e76:	f004 f899 	bl	801cfac <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 8018e7a:	4622      	mov	r2, r4
 8018e7c:	4629      	mov	r1, r5
 8018e7e:	4668      	mov	r0, sp
 8018e80:	f007 fd48 	bl	8020914 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8018e84:	4816      	ldr	r0, [pc, #88]	; (8018ee0 <GUI_TextRu_Info_Callibration+0xf4>)
 8018e86:	f004 f87f 	bl	801cf88 <TFT_SetFont>
	buffer[2] = '.';
 8018e8a:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018e8c:	2303      	movs	r3, #3
 8018e8e:	466a      	mov	r2, sp
 8018e90:	2182      	movs	r1, #130	; 0x82
 8018e92:	201e      	movs	r0, #30
	buffer[2] = '.';
 8018e94:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018e98:	f004 f998 	bl	801d1cc <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 8018e9c:	4632      	mov	r2, r6
 8018e9e:	4629      	mov	r1, r5
 8018ea0:	4668      	mov	r0, sp
 8018ea2:	f007 fd37 	bl	8020914 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018ea6:	2303      	movs	r3, #3
 8018ea8:	466a      	mov	r2, sp
 8018eaa:	2182      	movs	r1, #130	; 0x82
 8018eac:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 8018eae:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018eb2:	f004 f98b 	bl	801d1cc <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 8018eb6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8018eba:	490a      	ldr	r1, [pc, #40]	; (8018ee4 <GUI_TextRu_Info_Callibration+0xf8>)
 8018ebc:	4668      	mov	r0, sp
 8018ebe:	f007 fd29 	bl	8020914 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018ec2:	2303      	movs	r3, #3
 8018ec4:	466a      	mov	r2, sp
 8018ec6:	2182      	movs	r1, #130	; 0x82
 8018ec8:	209b      	movs	r0, #155	; 0x9b
 8018eca:	f004 f97f 	bl	801d1cc <TFT_DisplayString>
}
 8018ece:	b002      	add	sp, #8
 8018ed0:	bd70      	pop	{r4, r5, r6, pc}
 8018ed2:	bf00      	nop
 8018ed4:	200001d0 	.word	0x200001d0
 8018ed8:	080323f4 	.word	0x080323f4
 8018edc:	200001d8 	.word	0x200001d8
 8018ee0:	200001f0 	.word	0x200001f0
 8018ee4:	080323f9 	.word	0x080323f9

08018ee8 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 8018ee8:	b538      	push	{r3, r4, r5, lr}
 8018eea:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018eec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ef0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018ef2:	f004 f84f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018ef6:	2063      	movs	r0, #99	; 0x63
 8018ef8:	f004 f852 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018efc:	4818      	ldr	r0, [pc, #96]	; (8018f60 <GUI_TextRu_WriteSD+0x78>)
 8018efe:	f004 f843 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 8018f02:	4621      	mov	r1, r4
 8018f04:	2297      	movs	r2, #151	; 0x97
 8018f06:	4628      	mov	r0, r5
 8018f08:	f004 f850 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018f0c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018f0e:	4815      	ldr	r0, [pc, #84]	; (8018f64 <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018f10:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018f12:	f004 f839 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018f16:	f105 000f 	add.w	r0, r5, #15
 8018f1a:	4621      	mov	r1, r4
 8018f1c:	22b0      	movs	r2, #176	; 0xb0
 8018f1e:	b280      	uxth	r0, r0
 8018f20:	f004 f844 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 8018f24:	f105 001c 	add.w	r0, r5, #28
 8018f28:	4621      	mov	r1, r4
 8018f2a:	22bf      	movs	r2, #191	; 0xbf
 8018f2c:	b280      	uxth	r0, r0
 8018f2e:	f004 f83d 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 8018f32:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018f36:	4621      	mov	r1, r4
 8018f38:	22b8      	movs	r2, #184	; 0xb8
 8018f3a:	b280      	uxth	r0, r0
 8018f3c:	f004 f836 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 8018f40:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8018f44:	4621      	mov	r1, r4
 8018f46:	2281      	movs	r2, #129	; 0x81
 8018f48:	b280      	uxth	r0, r0
 8018f4a:	f004 f82f 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 8018f4e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8018f52:	4621      	mov	r1, r4
 8018f54:	228c      	movs	r2, #140	; 0x8c
 8018f56:	b280      	uxth	r0, r0
}
 8018f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 8018f5c:	f004 b826 	b.w	801cfac <TFT_DrawCharRus>
 8018f60:	200001d0 	.word	0x200001d0
 8018f64:	200001d8 	.word	0x200001d8

08018f68 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8018f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f6a:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8018f6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018f70:	2300      	movs	r3, #0
 8018f72:	9300      	str	r3, [sp, #0]
 8018f74:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018f78:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 8018f7a:	f004 f80b 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018f7e:	2063      	movs	r0, #99	; 0x63
 8018f80:	f004 f80e 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018f84:	4830      	ldr	r0, [pc, #192]	; (8019048 <GUI_TextRu_Info_Serial+0xe0>)
 8018f86:	f003 ffff 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 8018f8a:	22a1      	movs	r2, #161	; 0xa1
 8018f8c:	21c4      	movs	r1, #196	; 0xc4
 8018f8e:	203c      	movs	r0, #60	; 0x3c
 8018f90:	f004 f80c 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018f94:	482d      	ldr	r0, [pc, #180]	; (801904c <GUI_TextRu_Info_Serial+0xe4>)
 8018f96:	f003 fff7 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 8018f9a:	22b5      	movs	r2, #181	; 0xb5
 8018f9c:	21ca      	movs	r1, #202	; 0xca
 8018f9e:	204d      	movs	r0, #77	; 0x4d
 8018fa0:	f004 f804 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 8018fa4:	2280      	movs	r2, #128	; 0x80
 8018fa6:	21ca      	movs	r1, #202	; 0xca
 8018fa8:	205a      	movs	r0, #90	; 0x5a
 8018faa:	f003 ffff 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 8018fae:	22b8      	movs	r2, #184	; 0xb8
 8018fb0:	21ca      	movs	r1, #202	; 0xca
 8018fb2:	2067      	movs	r0, #103	; 0x67
 8018fb4:	f003 fffa 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 8018fb8:	22b9      	movs	r2, #185	; 0xb9
 8018fba:	21ca      	movs	r1, #202	; 0xca
 8018fbc:	2074      	movs	r0, #116	; 0x74
 8018fbe:	f003 fff5 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 8018fc2:	22bd      	movs	r2, #189	; 0xbd
 8018fc4:	21ca      	movs	r1, #202	; 0xca
 8018fc6:	2081      	movs	r0, #129	; 0x81
 8018fc8:	f003 fff0 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 8018fcc:	228b      	movs	r2, #139	; 0x8b
 8018fce:	21ca      	movs	r1, #202	; 0xca
 8018fd0:	208e      	movs	r0, #142	; 0x8e
 8018fd2:	f003 ffeb 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 8018fd6:	22b9      	movs	r2, #185	; 0xb9
 8018fd8:	21ca      	movs	r1, #202	; 0xca
 8018fda:	209b      	movs	r0, #155	; 0x9b
 8018fdc:	f003 ffe6 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 8018fe0:	22bd      	movs	r2, #189	; 0xbd
 8018fe2:	21ca      	movs	r1, #202	; 0xca
 8018fe4:	20af      	movs	r0, #175	; 0xaf
 8018fe6:	f003 ffe1 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 8018fea:	22be      	movs	r2, #190	; 0xbe
 8018fec:	21ca      	movs	r1, #202	; 0xca
 8018fee:	20bc      	movs	r0, #188	; 0xbc
 8018ff0:	f003 ffdc 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 8018ff4:	22bc      	movs	r2, #188	; 0xbc
 8018ff6:	21ca      	movs	r1, #202	; 0xca
 8018ff8:	20c9      	movs	r0, #201	; 0xc9
 8018ffa:	f003 ffd7 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 8018ffe:	22b5      	movs	r2, #181	; 0xb5
 8019000:	21ca      	movs	r1, #202	; 0xca
 8019002:	20d6      	movs	r0, #214	; 0xd6
 8019004:	f003 ffd2 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 8019008:	2280      	movs	r2, #128	; 0x80
 801900a:	21ca      	movs	r1, #202	; 0xca
 801900c:	20e1      	movs	r0, #225	; 0xe1
 801900e:	f003 ffcd 	bl	801cfac <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 8019012:	462a      	mov	r2, r5
 8019014:	490e      	ldr	r1, [pc, #56]	; (8019050 <GUI_TextRu_Info_Serial+0xe8>)
 8019016:	4668      	mov	r0, sp
 8019018:	f007 fc7c 	bl	8020914 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801901c:	480d      	ldr	r0, [pc, #52]	; (8019054 <GUI_TextRu_Info_Serial+0xec>)
 801901e:	f003 ffb3 	bl	801cf88 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8019022:	2303      	movs	r3, #3
 8019024:	466a      	mov	r2, sp
 8019026:	21e6      	movs	r1, #230	; 0xe6
 8019028:	2028      	movs	r0, #40	; 0x28
 801902a:	f004 f8cf 	bl	801d1cc <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801902e:	4622      	mov	r2, r4
 8019030:	4909      	ldr	r1, [pc, #36]	; (8019058 <GUI_TextRu_Info_Serial+0xf0>)
 8019032:	4668      	mov	r0, sp
 8019034:	f007 fc6e 	bl	8020914 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8019038:	2303      	movs	r3, #3
 801903a:	466a      	mov	r2, sp
 801903c:	21e6      	movs	r1, #230	; 0xe6
 801903e:	2087      	movs	r0, #135	; 0x87
 8019040:	f004 f8c4 	bl	801d1cc <TFT_DisplayString>
}
 8019044:	b003      	add	sp, #12
 8019046:	bd30      	pop	{r4, r5, pc}
 8019048:	200001d0 	.word	0x200001d0
 801904c:	200001d8 	.word	0x200001d8
 8019050:	080323fd 	.word	0x080323fd
 8019054:	200001f0 	.word	0x200001f0
 8019058:	08032400 	.word	0x08032400

0801905c <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801905c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801905e:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8019060:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8019064:	9302      	str	r3, [sp, #8]
 8019066:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801906a:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801906e:	f003 ff91 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019072:	2063      	movs	r0, #99	; 0x63
 8019074:	f003 ff94 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8019078:	481b      	ldr	r0, [pc, #108]	; (80190e8 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 801907a:	4c1c      	ldr	r4, [pc, #112]	; (80190ec <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 801907c:	f003 ff84 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 8019080:	229f      	movs	r2, #159	; 0x9f
 8019082:	f240 115d 	movw	r1, #349	; 0x15d
 8019086:	2078      	movs	r0, #120	; 0x78
 8019088:	f003 ff90 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 801908c:	229e      	movs	r2, #158	; 0x9e
 801908e:	f240 115d 	movw	r1, #349	; 0x15d
 8019092:	208a      	movs	r0, #138	; 0x8a
 8019094:	f003 ff8a 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 8019098:	4620      	mov	r0, r4
 801909a:	f003 ff75 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 801909e:	222e      	movs	r2, #46	; 0x2e
 80190a0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80190a4:	20ac      	movs	r0, #172	; 0xac
 80190a6:	f004 f839 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 80190aa:	2276      	movs	r2, #118	; 0x76
 80190ac:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80190b0:	20a2      	movs	r0, #162	; 0xa2
 80190b2:	f004 f833 	bl	801d11c <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 80190b6:	ed9d 0a01 	vldr	s0, [sp, #4]
 80190ba:	ee10 0a10 	vmov	r0, s0
 80190be:	f7e7 fa5b 	bl	8000578 <__aeabi_f2d>
 80190c2:	4602      	mov	r2, r0
 80190c4:	460b      	mov	r3, r1
 80190c6:	a802      	add	r0, sp, #8
 80190c8:	4909      	ldr	r1, [pc, #36]	; (80190f0 <GUI_TextRu_Info_Ver+0x94>)
 80190ca:	f007 fc23 	bl	8020914 <sprintf>
	TFT_SetFont(&Font16);
 80190ce:	4620      	mov	r0, r4
 80190d0:	f003 ff5a 	bl	801cf88 <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 80190d4:	2303      	movs	r3, #3
 80190d6:	aa02      	add	r2, sp, #8
 80190d8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80190dc:	20b9      	movs	r0, #185	; 0xb9
 80190de:	f004 f875 	bl	801d1cc <TFT_DisplayString>
}
 80190e2:	b004      	add	sp, #16
 80190e4:	bd10      	pop	{r4, pc}
 80190e6:	bf00      	nop
 80190e8:	200001d0 	.word	0x200001d0
 80190ec:	200001a8 	.word	0x200001a8
 80190f0:	080323e5 	.word	0x080323e5

080190f4 <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 80190f4:	b538      	push	{r3, r4, r5, lr}
 80190f6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80190f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80190fc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80190fe:	f003 ff49 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019102:	2063      	movs	r0, #99	; 0x63
 8019104:	f003 ff4c 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8019108:	481e      	ldr	r0, [pc, #120]	; (8019184 <GUI_TextRu_CCT+0x90>)
 801910a:	f003 ff3d 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 801910e:	4629      	mov	r1, r5
 8019110:	4620      	mov	r0, r4
 8019112:	229a      	movs	r2, #154	; 0x9a
 8019114:	f003 ff4a 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 8019118:	f104 0011 	add.w	r0, r4, #17
 801911c:	4629      	mov	r1, r5
 801911e:	22a6      	movs	r2, #166	; 0xa6
 8019120:	b280      	uxth	r0, r0
 8019122:	f003 ff43 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 8019126:	f104 0021 	add.w	r0, r4, #33	; 0x21
 801912a:	4629      	mov	r1, r5
 801912c:	22a2      	movs	r2, #162	; 0xa2
 801912e:	b280      	uxth	r0, r0
 8019130:	f003 ff3c 	bl	801cfac <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 8019134:	4814      	ldr	r0, [pc, #80]	; (8019188 <GUI_TextRu_CCT+0x94>)
 8019136:	f003 ff27 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 801913a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801913e:	4629      	mov	r1, r5
 8019140:	2228      	movs	r2, #40	; 0x28
 8019142:	b280      	uxth	r0, r0
 8019144:	f003 ffea 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 8019148:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801914c:	4629      	mov	r1, r5
 801914e:	2229      	movs	r2, #41	; 0x29
 8019150:	b280      	uxth	r0, r0
 8019152:	f003 ffe3 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 8019156:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 801915a:	4629      	mov	r1, r5
 801915c:	2243      	movs	r2, #67	; 0x43
 801915e:	b280      	uxth	r0, r0
 8019160:	f003 ffdc 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 8019164:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8019168:	4629      	mov	r1, r5
 801916a:	2243      	movs	r2, #67	; 0x43
 801916c:	b280      	uxth	r0, r0
 801916e:	f003 ffd5 	bl	801d11c <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 8019172:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8019176:	4629      	mov	r1, r5
 8019178:	2254      	movs	r2, #84	; 0x54
 801917a:	b280      	uxth	r0, r0
}
 801917c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 8019180:	f003 bfcc 	b.w	801d11c <TFT_DrawChar>
 8019184:	200001d0 	.word	0x200001d0
 8019188:	200001b0 	.word	0x200001b0

0801918c <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 801918c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019190:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019192:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019196:	4616      	mov	r6, r2
 8019198:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801919a:	f003 fefb 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801919e:	2063      	movs	r0, #99	; 0x63
 80191a0:	f003 fefe 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80191a4:	482f      	ldr	r0, [pc, #188]	; (8019264 <GUI_TextRu_umol+0xd8>)
 80191a6:	f003 feef 	bl	801cf88 <TFT_SetFont>
	
	if(deg){
 80191aa:	2e00      	cmp	r6, #0
 80191ac:	d057      	beq.n	801925e <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 80191ae:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 80191b0:	4629      	mov	r1, r5
 80191b2:	4620      	mov	r0, r4
 80191b4:	f003 fefa 	bl	801cfac <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 80191b8:	f104 0008 	add.w	r0, r4, #8
 80191bc:	4629      	mov	r1, r5
 80191be:	22bc      	movs	r2, #188	; 0xbc
 80191c0:	b280      	uxth	r0, r0
 80191c2:	f003 fef3 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 80191c6:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 80191ca:	f104 0010 	add.w	r0, r4, #16
 80191ce:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 80191d0:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 80191d2:	22be      	movs	r2, #190	; 0xbe
 80191d4:	b280      	uxth	r0, r0
 80191d6:	f003 fee9 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 80191da:	4629      	mov	r1, r5
 80191dc:	4638      	mov	r0, r7
 80191de:	22bb      	movs	r2, #187	; 0xbb
 80191e0:	f003 fee4 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 80191e4:	f104 001c 	add.w	r0, r4, #28
 80191e8:	4629      	mov	r1, r5
 80191ea:	228c      	movs	r2, #140	; 0x8c
 80191ec:	b280      	uxth	r0, r0
 80191ee:	f003 fedd 	bl	801cfac <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80191f2:	f105 030a 	add.w	r3, r5, #10
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80191fc:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8019200:	4619      	mov	r1, r3
 8019202:	4620      	mov	r0, r4
 8019204:	f8cd 8000 	str.w	r8, [sp]
 8019208:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801920a:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801920e:	f003 fc35 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 8019212:	b2b6      	uxth	r6, r6
 8019214:	f104 000d 	add.w	r0, r4, #13
 8019218:	4631      	mov	r1, r6
 801921a:	2291      	movs	r2, #145	; 0x91
 801921c:	b280      	uxth	r0, r0
 801921e:	f003 fec5 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 8019222:	1d60      	adds	r0, r4, #5
 8019224:	4631      	mov	r1, r6
 8019226:	22bc      	movs	r2, #188	; 0xbc
 8019228:	b280      	uxth	r0, r0
 801922a:	f003 febf 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801922e:	f105 030f 	add.w	r3, r5, #15
 8019232:	f104 0214 	add.w	r2, r4, #20
 8019236:	f105 010e 	add.w	r1, r5, #14
 801923a:	f104 0013 	add.w	r0, r4, #19
 801923e:	f8cd 8000 	str.w	r8, [sp]
 8019242:	b29b      	uxth	r3, r3
 8019244:	b292      	uxth	r2, r2
 8019246:	b289      	uxth	r1, r1
 8019248:	b280      	uxth	r0, r0
 801924a:	f003 fc8c 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801924e:	2281      	movs	r2, #129	; 0x81
 8019250:	4631      	mov	r1, r6
 8019252:	4638      	mov	r0, r7
}
 8019254:	b002      	add	sp, #8
 8019256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801925a:	f003 bea7 	b.w	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 801925e:	2290      	movs	r2, #144	; 0x90
 8019260:	e7a6      	b.n	80191b0 <GUI_TextRu_umol+0x24>
 8019262:	bf00      	nop
 8019264:	200001a0 	.word	0x200001a0

08019268 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 8019268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801926c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801926e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019272:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019274:	f003 fe8e 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019278:	2063      	movs	r0, #99	; 0x63
 801927a:	f003 fe91 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801927e:	483c      	ldr	r0, [pc, #240]	; (8019370 <GUI_TextRu_umol_sr+0x108>)
 8019280:	f003 fe82 	bl	801cf88 <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 8019284:	1de0      	adds	r0, r4, #7
 8019286:	4629      	mov	r1, r5
 8019288:	2290      	movs	r2, #144	; 0x90
 801928a:	b280      	uxth	r0, r0
 801928c:	f003 fe8e 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 8019290:	f104 000f 	add.w	r0, r4, #15
 8019294:	4629      	mov	r1, r5
 8019296:	22bc      	movs	r2, #188	; 0xbc
 8019298:	b280      	uxth	r0, r0
 801929a:	f003 fe87 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 801929e:	f104 0017 	add.w	r0, r4, #23
 80192a2:	4629      	mov	r1, r5
 80192a4:	22be      	movs	r2, #190	; 0xbe
 80192a6:	b280      	uxth	r0, r0
 80192a8:	f003 fe80 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 80192ac:	f104 001d 	add.w	r0, r4, #29
 80192b0:	4629      	mov	r1, r5
 80192b2:	22bb      	movs	r2, #187	; 0xbb
 80192b4:	b280      	uxth	r0, r0
 80192b6:	f003 fe79 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 80192ba:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80192be:	4629      	mov	r1, r5
 80192c0:	228c      	movs	r2, #140	; 0x8c
 80192c2:	b280      	uxth	r0, r0
 80192c4:	f003 fe72 	bl	801cfac <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80192c8:	f105 030a 	add.w	r3, r5, #10
 80192cc:	b29b      	uxth	r3, r3
 80192ce:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80192d2:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 80192d6:	1ce0      	adds	r0, r4, #3
 80192d8:	4619      	mov	r1, r3
 80192da:	f8cd 8000 	str.w	r8, [sp]
 80192de:	b292      	uxth	r2, r2
 80192e0:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 80192e2:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80192e6:	f003 fbc9 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 80192ea:	b2b6      	uxth	r6, r6
 80192ec:	f104 000d 	add.w	r0, r4, #13
 80192f0:	4631      	mov	r1, r6
 80192f2:	2291      	movs	r2, #145	; 0x91
 80192f4:	b280      	uxth	r0, r0
 80192f6:	f003 fe59 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 80192fa:	1d60      	adds	r0, r4, #5
 80192fc:	4631      	mov	r1, r6
 80192fe:	22bc      	movs	r2, #188	; 0xbc
 8019300:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 8019302:	f105 0710 	add.w	r7, r5, #16
 8019306:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8019308:	f003 fe50 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801930c:	b2bf      	uxth	r7, r7
 801930e:	b2ad      	uxth	r5, r5
 8019310:	f104 0214 	add.w	r2, r4, #20
 8019314:	f104 0013 	add.w	r0, r4, #19
 8019318:	462b      	mov	r3, r5
 801931a:	4639      	mov	r1, r7
 801931c:	f8cd 8000 	str.w	r8, [sp]
 8019320:	b292      	uxth	r2, r2
 8019322:	b280      	uxth	r0, r0
 8019324:	f003 fc1f 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 8019328:	f104 0016 	add.w	r0, r4, #22
 801932c:	4631      	mov	r1, r6
 801932e:	2281      	movs	r2, #129	; 0x81
 8019330:	b280      	uxth	r0, r0
 8019332:	f003 fe3b 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 8019336:	f104 021f 	add.w	r2, r4, #31
 801933a:	f104 001e 	add.w	r0, r4, #30
 801933e:	462b      	mov	r3, r5
 8019340:	4639      	mov	r1, r7
 8019342:	f8cd 8000 	str.w	r8, [sp]
 8019346:	b292      	uxth	r2, r2
 8019348:	b280      	uxth	r0, r0
 801934a:	f003 fc0c 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 801934e:	f104 0020 	add.w	r0, r4, #32
 8019352:	4631      	mov	r1, r6
 8019354:	2281      	movs	r2, #129	; 0x81
 8019356:	b280      	uxth	r0, r0
 8019358:	f003 fe28 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801935c:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8019360:	2280      	movs	r2, #128	; 0x80
 8019362:	4631      	mov	r1, r6
 8019364:	b280      	uxth	r0, r0

}
 8019366:	b002      	add	sp, #8
 8019368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801936c:	f003 be1e 	b.w	801cfac <TFT_DrawCharRus>
 8019370:	200001a0 	.word	0x200001a0

08019374 <GUI_TextRu_mW_m2>:

void GUI_TextRu_mW_m2(uint16_t X, uint16_t Y)
{
 8019374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019376:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);

	TFT_SetFont(&Font12RU_arch_small);
 8019378:	4f22      	ldr	r7, [pc, #136]	; (8019404 <GUI_TextRu_mW_m2+0x90>)
	TFT_SetTextColor(TFT_White);
 801937a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801937e:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019380:	f003 fe08 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019384:	2063      	movs	r0, #99	; 0x63
 8019386:	f003 fe0b 	bl	801cfa0 <TFT_SetBackColor>
	TFT_DrawCharRus(X-1, Y+2, 'м');
 801938a:	1cae      	adds	r6, r5, #2
	TFT_SetFont(&Font12RU_arch_small);
 801938c:	4638      	mov	r0, r7
 801938e:	f003 fdfb 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X-1, Y+2, 'м');
 8019392:	b2b6      	uxth	r6, r6
 8019394:	1e60      	subs	r0, r4, #1
 8019396:	4631      	mov	r1, r6
 8019398:	22bc      	movs	r2, #188	; 0xbc
 801939a:	b280      	uxth	r0, r0
 801939c:	f003 fe06 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_big);
 80193a0:	4819      	ldr	r0, [pc, #100]	; (8019408 <GUI_TextRu_mW_m2+0x94>)
 80193a2:	f003 fdf1 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+6, Y, 'В'-17);
 80193a6:	1da0      	adds	r0, r4, #6
 80193a8:	4629      	mov	r1, r5
 80193aa:	2281      	movs	r2, #129	; 0x81
 80193ac:	b280      	uxth	r0, r0
 80193ae:	f003 fdfd 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 80193b2:	4638      	mov	r0, r7
 80193b4:	f003 fde8 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+2, 'т');
 80193b8:	f104 0010 	add.w	r0, r4, #16
 80193bc:	4631      	mov	r1, r6
 80193be:	2282      	movs	r2, #130	; 0x82
 80193c0:	b280      	uxth	r0, r0
 80193c2:	f003 fdf3 	bl	801cfac <TFT_DrawCharRus>

	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80193c6:	f105 030a 	add.w	r3, r5, #10
 80193ca:	b29b      	uxth	r3, r3
 80193cc:	f104 0214 	add.w	r2, r4, #20
 80193d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80193d4:	9100      	str	r1, [sp, #0]
 80193d6:	4620      	mov	r0, r4
 80193d8:	4619      	mov	r1, r3
 80193da:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80193dc:	350c      	adds	r5, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80193de:	f003 fb4d 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80193e2:	b2ad      	uxth	r5, r5
 80193e4:	f104 000c 	add.w	r0, r4, #12
 80193e8:	4629      	mov	r1, r5
 80193ea:	2291      	movs	r2, #145	; 0x91
 80193ec:	b280      	uxth	r0, r0
 80193ee:	f003 fddd 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 80193f2:	1d20      	adds	r0, r4, #4
 80193f4:	22bc      	movs	r2, #188	; 0xbc
 80193f6:	4629      	mov	r1, r5
 80193f8:	b280      	uxth	r0, r0
}
 80193fa:	b003      	add	sp, #12
 80193fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8019400:	f003 bdd4 	b.w	801cfac <TFT_DrawCharRus>
 8019404:	200001a0 	.word	0x200001a0
 8019408:	20000198 	.word	0x20000198

0801940c <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 801940c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801940e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019410:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019414:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019416:	f003 fdbd 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801941a:	2063      	movs	r0, #99	; 0x63
 801941c:	f003 fdc0 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 8019420:	4819      	ldr	r0, [pc, #100]	; (8019488 <GUI_TextRu_W_m2+0x7c>)
 8019422:	f003 fdb1 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+1, Y, 'В'-17);
 8019426:	1c68      	adds	r0, r5, #1
 8019428:	4621      	mov	r1, r4
 801942a:	2281      	movs	r2, #129	; 0x81
 801942c:	b280      	uxth	r0, r0
 801942e:	f003 fdbd 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 8019432:	4816      	ldr	r0, [pc, #88]	; (801948c <GUI_TextRu_W_m2+0x80>)
 8019434:	f003 fda8 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+11, Y+2, 'т');
 8019438:	1ca1      	adds	r1, r4, #2
 801943a:	f105 000b 	add.w	r0, r5, #11
 801943e:	2282      	movs	r2, #130	; 0x82
 8019440:	b289      	uxth	r1, r1
 8019442:	b280      	uxth	r0, r0
 8019444:	f003 fdb2 	bl	801cfac <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8019448:	f104 030a 	add.w	r3, r4, #10
 801944c:	b29b      	uxth	r3, r3
 801944e:	f105 0214 	add.w	r2, r5, #20
 8019452:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019456:	9100      	str	r1, [sp, #0]
 8019458:	4628      	mov	r0, r5
 801945a:	4619      	mov	r1, r3
 801945c:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801945e:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8019460:	f003 fb0c 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 8019464:	b2a4      	uxth	r4, r4
 8019466:	f105 000c 	add.w	r0, r5, #12
 801946a:	4621      	mov	r1, r4
 801946c:	2291      	movs	r2, #145	; 0x91
 801946e:	b280      	uxth	r0, r0
 8019470:	f003 fd9c 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8019474:	1d28      	adds	r0, r5, #4
 8019476:	22bc      	movs	r2, #188	; 0xbc
 8019478:	4621      	mov	r1, r4
 801947a:	b280      	uxth	r0, r0
}
 801947c:	b003      	add	sp, #12
 801947e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8019482:	f003 bd93 	b.w	801cfac <TFT_DrawCharRus>
 8019486:	bf00      	nop
 8019488:	20000198 	.word	0x20000198
 801948c:	200001a0 	.word	0x200001a0

08019490 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 8019490:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019494:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019496:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801949a:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801949c:	f003 fd7a 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80194a0:	2063      	movs	r0, #99	; 0x63
 80194a2:	f003 fd7d 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 80194a6:	4829      	ldr	r0, [pc, #164]	; (801954c <GUI_TextRu_W_m2_sr+0xbc>)
 80194a8:	f003 fd6e 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 80194ac:	f104 0008 	add.w	r0, r4, #8
 80194b0:	4629      	mov	r1, r5
 80194b2:	2281      	movs	r2, #129	; 0x81
 80194b4:	b280      	uxth	r0, r0
 80194b6:	f003 fd79 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 80194ba:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 80194be:	4824      	ldr	r0, [pc, #144]	; (8019550 <GUI_TextRu_W_m2_sr+0xc0>)
 80194c0:	f003 fd62 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 80194c4:	b2bf      	uxth	r7, r7
 80194c6:	1ca9      	adds	r1, r5, #2
 80194c8:	4638      	mov	r0, r7
 80194ca:	2282      	movs	r2, #130	; 0x82
 80194cc:	b289      	uxth	r1, r1
 80194ce:	f003 fd6d 	bl	801cfac <TFT_DrawCharRus>

	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80194d2:	f105 030a 	add.w	r3, r5, #10
 80194d6:	b29b      	uxth	r3, r3
 80194d8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80194dc:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80194e0:	4619      	mov	r1, r3
 80194e2:	4620      	mov	r0, r4
 80194e4:	f8cd 8000 	str.w	r8, [sp]
 80194e8:	b292      	uxth	r2, r2

	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80194ea:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80194ee:	f003 fac5 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80194f2:	b2b6      	uxth	r6, r6
 80194f4:	f104 000a 	add.w	r0, r4, #10
 80194f8:	4631      	mov	r1, r6
 80194fa:	2291      	movs	r2, #145	; 0x91
 80194fc:	b280      	uxth	r0, r0
 80194fe:	f003 fd55 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 8019502:	1ca0      	adds	r0, r4, #2
 8019504:	4631      	mov	r1, r6
 8019506:	22bc      	movs	r2, #188	; 0xbc
 8019508:	b280      	uxth	r0, r0
 801950a:	f003 fd4f 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 801950e:	f105 030f 	add.w	r3, r5, #15
 8019512:	f105 0110 	add.w	r1, r5, #16
 8019516:	f104 0011 	add.w	r0, r4, #17
 801951a:	b29b      	uxth	r3, r3
 801951c:	463a      	mov	r2, r7
 801951e:	f8cd 8000 	str.w	r8, [sp]
 8019522:	b289      	uxth	r1, r1
 8019524:	b280      	uxth	r0, r0
 8019526:	f003 fb1e 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 801952a:	f104 0015 	add.w	r0, r4, #21
 801952e:	4631      	mov	r1, r6
 8019530:	2281      	movs	r2, #129	; 0x81
 8019532:	b280      	uxth	r0, r0
 8019534:	f003 fd3a 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8019538:	f104 001c 	add.w	r0, r4, #28
 801953c:	2280      	movs	r2, #128	; 0x80
 801953e:	4631      	mov	r1, r6
 8019540:	b280      	uxth	r0, r0
}
 8019542:	b002      	add	sp, #8
 8019544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8019548:	f003 bd30 	b.w	801cfac <TFT_DrawCharRus>
 801954c:	20000198 	.word	0x20000198
 8019550:	200001a0 	.word	0x200001a0

08019554 <GUI_TextRu_mW_m2_sr>:

void GUI_TextRu_mW_m2_sr(uint16_t X, uint16_t Y)
{
 8019554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019556:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font12RU_arch_small);
 8019558:	4f32      	ldr	r7, [pc, #200]	; (8019624 <GUI_TextRu_mW_m2_sr+0xd0>)
	TFT_SetTextColor(TFT_White);
 801955a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801955e:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019560:	f003 fd18 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019564:	2063      	movs	r0, #99	; 0x63
 8019566:	f003 fd1b 	bl	801cfa0 <TFT_SetBackColor>
	TFT_DrawCharRus(X+5, Y+2, 'м');
 801956a:	1cae      	adds	r6, r5, #2
	TFT_SetFont(&Font12RU_arch_small);
 801956c:	4638      	mov	r0, r7
 801956e:	f003 fd0b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+5, Y+2, 'м');
 8019572:	b2b6      	uxth	r6, r6
 8019574:	1d60      	adds	r0, r4, #5
 8019576:	4631      	mov	r1, r6
 8019578:	22bc      	movs	r2, #188	; 0xbc
 801957a:	b280      	uxth	r0, r0
 801957c:	f003 fd16 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_big);
 8019580:	4829      	ldr	r0, [pc, #164]	; (8019628 <GUI_TextRu_mW_m2_sr+0xd4>)
 8019582:	f003 fd01 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+12, Y, 'В'-17);
 8019586:	f104 000c 	add.w	r0, r4, #12
 801958a:	4629      	mov	r1, r5
 801958c:	2281      	movs	r2, #129	; 0x81
 801958e:	b280      	uxth	r0, r0
 8019590:	f003 fd0c 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 8019594:	4638      	mov	r0, r7
 8019596:	f003 fcf7 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+22, Y+2, 'т');
 801959a:	f104 0016 	add.w	r0, r4, #22
 801959e:	4631      	mov	r1, r6
 80195a0:	2282      	movs	r2, #130	; 0x82
 80195a2:	b280      	uxth	r0, r0
 80195a4:	f003 fd02 	bl	801cfac <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80195a8:	f105 030a 	add.w	r3, r5, #10
 80195ac:	b29b      	uxth	r3, r3
 80195ae:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80195b2:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80195b6:	4619      	mov	r1, r3
 80195b8:	4620      	mov	r0, r4
 80195ba:	9700      	str	r7, [sp, #0]
 80195bc:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80195be:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80195c2:	f003 fa5b 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80195c6:	b2b6      	uxth	r6, r6
 80195c8:	f104 000a 	add.w	r0, r4, #10
 80195cc:	4631      	mov	r1, r6
 80195ce:	2291      	movs	r2, #145	; 0x91
 80195d0:	b280      	uxth	r0, r0
 80195d2:	f003 fceb 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 80195d6:	1ca0      	adds	r0, r4, #2
 80195d8:	4631      	mov	r1, r6
 80195da:	22bc      	movs	r2, #188	; 0xbc
 80195dc:	b280      	uxth	r0, r0
 80195de:	f003 fce5 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 80195e2:	f105 030f 	add.w	r3, r5, #15
 80195e6:	f104 0212 	add.w	r2, r4, #18
 80195ea:	f105 0110 	add.w	r1, r5, #16
 80195ee:	f104 0011 	add.w	r0, r4, #17
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	9700      	str	r7, [sp, #0]
 80195f6:	b292      	uxth	r2, r2
 80195f8:	b289      	uxth	r1, r1
 80195fa:	b280      	uxth	r0, r0
 80195fc:	f003 fab3 	bl	801cb66 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 8019600:	f104 0015 	add.w	r0, r4, #21
 8019604:	4631      	mov	r1, r6
 8019606:	2281      	movs	r2, #129	; 0x81
 8019608:	b280      	uxth	r0, r0
 801960a:	f003 fccf 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801960e:	f104 001c 	add.w	r0, r4, #28
 8019612:	2280      	movs	r2, #128	; 0x80
 8019614:	4631      	mov	r1, r6
 8019616:	b280      	uxth	r0, r0
}
 8019618:	b003      	add	sp, #12
 801961a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801961e:	f003 bcc5 	b.w	801cfac <TFT_DrawCharRus>
 8019622:	bf00      	nop
 8019624:	200001a0 	.word	0x200001a0
 8019628:	20000198 	.word	0x20000198

0801962c <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 801962c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019630:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019632:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019636:	460e      	mov	r6, r1
 8019638:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 801963a:	f003 fcab 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801963e:	2063      	movs	r0, #99	; 0x63
 8019640:	f003 fcae 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 8019644:	482f      	ldr	r0, [pc, #188]	; (8019704 <GUI_TextRu_Cd_m2+0xd8>)
 8019646:	f003 fc9f 	bl	801cf88 <TFT_SetFont>
 801964a:	f104 0008 	add.w	r0, r4, #8
 801964e:	f104 0810 	add.w	r8, r4, #16
 8019652:	f106 070a 	add.w	r7, r6, #10
 8019656:	f104 0906 	add.w	r9, r4, #6
 801965a:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 801965e:	22ba      	movs	r2, #186	; 0xba
 8019660:	4631      	mov	r1, r6
 8019662:	b280      	uxth	r0, r0
	if(deg){
 8019664:	f1ba 0f00 	cmp.w	sl, #0
 8019668:	d02c      	beq.n	80196c4 <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 801966a:	f003 fc9f 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 801966e:	22ba      	movs	r2, #186	; 0xba
 8019670:	4631      	mov	r1, r6
 8019672:	fa1f f088 	uxth.w	r0, r8
 8019676:	f003 fc99 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 801967a:	f104 0018 	add.w	r0, r4, #24
 801967e:	22b4      	movs	r2, #180	; 0xb4
 8019680:	4631      	mov	r1, r6
 8019682:	b280      	uxth	r0, r0
 8019684:	f003 fc92 	bl	801cfac <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 8019688:	b2bb      	uxth	r3, r7
 801968a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801968e:	f104 021f 	add.w	r2, r4, #31
 8019692:	9100      	str	r1, [sp, #0]
 8019694:	b292      	uxth	r2, r2
 8019696:	4619      	mov	r1, r3
 8019698:	fa1f f089 	uxth.w	r0, r9
 801969c:	f003 f9ee 	bl	801ca7c <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 80196a0:	b2ad      	uxth	r5, r5
 80196a2:	f104 0014 	add.w	r0, r4, #20
 80196a6:	b280      	uxth	r0, r0
 80196a8:	2291      	movs	r2, #145	; 0x91
 80196aa:	4629      	mov	r1, r5
 80196ac:	f003 fc7e 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 80196b0:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 80196b4:	22bc      	movs	r2, #188	; 0xbc
 80196b6:	4629      	mov	r1, r5
 80196b8:	b280      	uxth	r0, r0
		
}
 80196ba:	b002      	add	sp, #8
 80196bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 80196c0:	f003 bc74 	b.w	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 80196c4:	f003 fc72 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 80196c8:	22b4      	movs	r2, #180	; 0xb4
 80196ca:	4631      	mov	r1, r6
 80196cc:	fa1f f088 	uxth.w	r0, r8
 80196d0:	f003 fc6c 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 80196d4:	b2bb      	uxth	r3, r7
 80196d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80196da:	f104 0217 	add.w	r2, r4, #23
 80196de:	9100      	str	r1, [sp, #0]
 80196e0:	b292      	uxth	r2, r2
 80196e2:	4619      	mov	r1, r3
 80196e4:	fa1f f089 	uxth.w	r0, r9
 80196e8:	f003 f9c8 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 80196ec:	b2ad      	uxth	r5, r5
 80196ee:	f104 0011 	add.w	r0, r4, #17
 80196f2:	b280      	uxth	r0, r0
 80196f4:	2291      	movs	r2, #145	; 0x91
 80196f6:	4629      	mov	r1, r5
 80196f8:	f003 fc58 	bl	801cfac <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 80196fc:	f104 0009 	add.w	r0, r4, #9
 8019700:	e7d8      	b.n	80196b4 <GUI_TextRu_Cd_m2+0x88>
 8019702:	bf00      	nop
 8019704:	200001a0 	.word	0x200001a0

08019708 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 8019708:	b538      	push	{r3, r4, r5, lr}
 801970a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801970c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019710:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019712:	f003 fc3f 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019716:	2063      	movs	r0, #99	; 0x63
 8019718:	f003 fc42 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801971c:	482d      	ldr	r0, [pc, #180]	; (80197d4 <GUI_TextRu_Irradiance+0xcc>)
 801971e:	f003 fc33 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 8019722:	4621      	mov	r1, r4
 8019724:	229e      	movs	r2, #158	; 0x9e
 8019726:	4628      	mov	r0, r5
 8019728:	f003 fc40 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801972c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801972e:	482a      	ldr	r0, [pc, #168]	; (80197d8 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8019730:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019732:	f003 fc29 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8019736:	f105 0010 	add.w	r0, r5, #16
 801973a:	4621      	mov	r1, r4
 801973c:	22b1      	movs	r2, #177	; 0xb1
 801973e:	b280      	uxth	r0, r0
 8019740:	f003 fc34 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 8019744:	f105 001b 	add.w	r0, r5, #27
 8019748:	4621      	mov	r1, r4
 801974a:	22bb      	movs	r2, #187	; 0xbb
 801974c:	b280      	uxth	r0, r0
 801974e:	f003 fc2d 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 8019752:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8019756:	4621      	mov	r1, r4
 8019758:	2283      	movs	r2, #131	; 0x83
 801975a:	b280      	uxth	r0, r0
 801975c:	f003 fc26 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 8019760:	f105 0033 	add.w	r0, r5, #51	; 0x33
 8019764:	4621      	mov	r1, r4
 8019766:	2287      	movs	r2, #135	; 0x87
 8019768:	b280      	uxth	r0, r0
 801976a:	f003 fc1f 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 801976e:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8019772:	4621      	mov	r1, r4
 8019774:	22b5      	movs	r2, #181	; 0xb5
 8019776:	b280      	uxth	r0, r0
 8019778:	f003 fc18 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 801977c:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8019780:	4621      	mov	r1, r4
 8019782:	22bd      	movs	r2, #189	; 0xbd
 8019784:	b280      	uxth	r0, r0
 8019786:	f003 fc11 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 801978a:	f105 0056 	add.w	r0, r5, #86	; 0x56
 801978e:	4621      	mov	r1, r4
 8019790:	22bd      	movs	r2, #189	; 0xbd
 8019792:	b280      	uxth	r0, r0
 8019794:	f003 fc0a 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 8019798:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801979c:	4621      	mov	r1, r4
 801979e:	22be      	movs	r2, #190	; 0xbe
 80197a0:	b280      	uxth	r0, r0
 80197a2:	f003 fc03 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 80197a6:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 80197aa:	4621      	mov	r1, r4
 80197ac:	2281      	movs	r2, #129	; 0x81
 80197ae:	b280      	uxth	r0, r0
 80197b0:	f003 fbfc 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 80197b4:	f105 0077 	add.w	r0, r5, #119	; 0x77
 80197b8:	4621      	mov	r1, r4
 80197ba:	2282      	movs	r2, #130	; 0x82
 80197bc:	b280      	uxth	r0, r0
 80197be:	f003 fbf5 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 80197c2:	f105 0083 	add.w	r0, r5, #131	; 0x83
 80197c6:	4621      	mov	r1, r4
 80197c8:	228c      	movs	r2, #140	; 0x8c
 80197ca:	b280      	uxth	r0, r0
}
 80197cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 80197d0:	f003 bbec 	b.w	801cfac <TFT_DrawCharRus>
 80197d4:	200001d0 	.word	0x200001d0
 80197d8:	200001d8 	.word	0x200001d8

080197dc <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 80197dc:	b538      	push	{r3, r4, r5, lr}
 80197de:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80197e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80197e4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80197e6:	f003 fbd5 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80197ea:	2063      	movs	r0, #99	; 0x63
 80197ec:	f003 fbd8 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80197f0:	481c      	ldr	r0, [pc, #112]	; (8019864 <GUI_TextRu_Luminance+0x88>)
 80197f2:	f003 fbc9 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 80197f6:	4621      	mov	r1, r4
 80197f8:	22af      	movs	r2, #175	; 0xaf
 80197fa:	4628      	mov	r0, r5
 80197fc:	f003 fbd6 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8019800:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019802:	4819      	ldr	r0, [pc, #100]	; (8019868 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8019804:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019806:	f003 fbbf 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801980a:	f105 0010 	add.w	r0, r5, #16
 801980e:	4621      	mov	r1, r4
 8019810:	2280      	movs	r2, #128	; 0x80
 8019812:	b280      	uxth	r0, r0
 8019814:	f003 fbca 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 8019818:	f105 001c 	add.w	r0, r5, #28
 801981c:	4621      	mov	r1, r4
 801981e:	22ba      	movs	r2, #186	; 0xba
 8019820:	b280      	uxth	r0, r0
 8019822:	f003 fbc3 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 8019826:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801982a:	4621      	mov	r1, r4
 801982c:	22be      	movs	r2, #190	; 0xbe
 801982e:	b280      	uxth	r0, r0
 8019830:	f003 fbbc 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 8019834:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8019838:	4621      	mov	r1, r4
 801983a:	2281      	movs	r2, #129	; 0x81
 801983c:	b280      	uxth	r0, r0
 801983e:	f003 fbb5 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 8019842:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8019846:	4621      	mov	r1, r4
 8019848:	2282      	movs	r2, #130	; 0x82
 801984a:	b280      	uxth	r0, r0
 801984c:	f003 fbae 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8019850:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8019854:	4621      	mov	r1, r4
 8019856:	228c      	movs	r2, #140	; 0x8c
 8019858:	b280      	uxth	r0, r0
}
 801985a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 801985e:	f003 bba5 	b.w	801cfac <TFT_DrawCharRus>
 8019862:	bf00      	nop
 8019864:	200001d0 	.word	0x200001d0
 8019868:	200001d8 	.word	0x200001d8

0801986c <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 801986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801986e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019870:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019874:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8019876:	f003 fb8d 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801987a:	2063      	movs	r0, #99	; 0x63
 801987c:	f003 fb90 	bl	801cfa0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 8019880:	4f31      	ldr	r7, [pc, #196]	; (8019948 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 8019882:	4832      	ldr	r0, [pc, #200]	; (801994c <GUI_TextRu_Radiance+0xe0>)
 8019884:	f003 fb80 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 8019888:	4631      	mov	r1, r6
 801988a:	22ad      	movs	r2, #173	; 0xad
 801988c:	4620      	mov	r0, r4
 801988e:	f003 fb8d 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8019892:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019894:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8019896:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 8019898:	f003 fb76 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801989c:	f104 0010 	add.w	r0, r4, #16
 80198a0:	4629      	mov	r1, r5
 80198a2:	22bd      	movs	r2, #189	; 0xbd
 80198a4:	b280      	uxth	r0, r0
 80198a6:	f003 fb81 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 80198aa:	f104 001d 	add.w	r0, r4, #29
 80198ae:	4629      	mov	r1, r5
 80198b0:	22b5      	movs	r2, #181	; 0xb5
 80198b2:	b280      	uxth	r0, r0
 80198b4:	f003 fb7a 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 80198b8:	4825      	ldr	r0, [pc, #148]	; (8019950 <GUI_TextRu_Radiance+0xe4>)
 80198ba:	f003 fb65 	bl	801cf88 <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 80198be:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80198c2:	4631      	mov	r1, r6
 80198c4:	222e      	movs	r2, #46	; 0x2e
 80198c6:	b280      	uxth	r0, r0
 80198c8:	f003 fc28 	bl	801d11c <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 80198cc:	4638      	mov	r0, r7
 80198ce:	f003 fb5b 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 80198d2:	f104 0029 	add.w	r0, r4, #41	; 0x29
 80198d6:	4629      	mov	r1, r5
 80198d8:	2280      	movs	r2, #128	; 0x80
 80198da:	b280      	uxth	r0, r0
 80198dc:	f003 fb66 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 80198e0:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 80198e4:	4629      	mov	r1, r5
 80198e6:	228f      	movs	r2, #143	; 0x8f
 80198e8:	b280      	uxth	r0, r0
 80198ea:	f003 fb5f 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 80198ee:	f104 0049 	add.w	r0, r4, #73	; 0x49
 80198f2:	4629      	mov	r1, r5
 80198f4:	2280      	movs	r2, #128	; 0x80
 80198f6:	b280      	uxth	r0, r0
 80198f8:	f003 fb58 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 80198fc:	f104 0055 	add.w	r0, r4, #85	; 0x55
 8019900:	4629      	mov	r1, r5
 8019902:	22ba      	movs	r2, #186	; 0xba
 8019904:	b280      	uxth	r0, r0
 8019906:	f003 fb51 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 801990a:	f104 0061 	add.w	r0, r4, #97	; 0x61
 801990e:	4629      	mov	r1, r5
 8019910:	22be      	movs	r2, #190	; 0xbe
 8019912:	b280      	uxth	r0, r0
 8019914:	f003 fb4a 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8019918:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801991c:	4629      	mov	r1, r5
 801991e:	2281      	movs	r2, #129	; 0x81
 8019920:	b280      	uxth	r0, r0
 8019922:	f003 fb43 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 8019926:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801992a:	4629      	mov	r1, r5
 801992c:	2282      	movs	r2, #130	; 0x82
 801992e:	b280      	uxth	r0, r0
 8019930:	f003 fb3c 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8019934:	f104 0083 	add.w	r0, r4, #131	; 0x83
 8019938:	4629      	mov	r1, r5
 801993a:	228c      	movs	r2, #140	; 0x8c
 801993c:	b280      	uxth	r0, r0

}
 801993e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8019942:	f003 bb33 	b.w	801cfac <TFT_DrawCharRus>
 8019946:	bf00      	nop
 8019948:	200001d8 	.word	0x200001d8
 801994c:	200001d0 	.word	0x200001d0
 8019950:	200001b0 	.word	0x200001b0

08019954 <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 8019954:	b538      	push	{r3, r4, r5, lr}
 8019956:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019958:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801995c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801995e:	f003 fb19 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019962:	2063      	movs	r0, #99	; 0x63
 8019964:	f003 fb1c 	bl	801cfa0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019968:	483f      	ldr	r0, [pc, #252]	; (8019a68 <GUI_TextMsgRu_LowIrradiance+0x114>)
 801996a:	f003 fb0d 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 801996e:	4621      	mov	r1, r4
 8019970:	229c      	movs	r2, #156	; 0x9c
 8019972:	4628      	mov	r0, r5
 8019974:	f003 fb1a 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019978:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801997a:	483c      	ldr	r0, [pc, #240]	; (8019a6c <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801997c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801997e:	f003 fb03 	bl	801cf88 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019982:	f105 0010 	add.w	r0, r5, #16
 8019986:	4621      	mov	r1, r4
 8019988:	22b0      	movs	r2, #176	; 0xb0
 801998a:	b280      	uxth	r0, r0
 801998c:	f003 fb0e 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019990:	f105 001c 	add.w	r0, r5, #28
 8019994:	4621      	mov	r1, r4
 8019996:	22bb      	movs	r2, #187	; 0xbb
 8019998:	b280      	uxth	r0, r0
 801999a:	f003 fb07 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 801999e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80199a2:	4621      	mov	r1, r4
 80199a4:	22b0      	movs	r2, #176	; 0xb0
 80199a6:	b280      	uxth	r0, r0
 80199a8:	f003 fb00 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 80199ac:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80199b0:	4621      	mov	r1, r4
 80199b2:	228f      	movs	r2, #143	; 0x8f
 80199b4:	b280      	uxth	r0, r0
 80199b6:	f003 faf9 	bl	801cfac <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 80199ba:	f105 0049 	add.w	r0, r5, #73	; 0x49
 80199be:	4621      	mov	r1, r4
 80199c0:	22be      	movs	r2, #190	; 0xbe
 80199c2:	b280      	uxth	r0, r0
 80199c4:	f003 faf2 	bl	801cfac <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 80199c8:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80199cc:	4621      	mov	r1, r4
 80199ce:	22b1      	movs	r2, #177	; 0xb1
 80199d0:	b280      	uxth	r0, r0
 80199d2:	f003 faeb 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 80199d6:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80199da:	4621      	mov	r1, r4
 80199dc:	22bb      	movs	r2, #187	; 0xbb
 80199de:	b280      	uxth	r0, r0
 80199e0:	f003 fae4 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 80199e4:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 80199e8:	4621      	mov	r1, r4
 80199ea:	2283      	movs	r2, #131	; 0x83
 80199ec:	b280      	uxth	r0, r0
 80199ee:	f003 fadd 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 80199f2:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 80199f6:	4621      	mov	r1, r4
 80199f8:	2287      	movs	r2, #135	; 0x87
 80199fa:	b280      	uxth	r0, r0
 80199fc:	f003 fad6 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 8019a00:	f105 0086 	add.w	r0, r5, #134	; 0x86
 8019a04:	4621      	mov	r1, r4
 8019a06:	22b5      	movs	r2, #181	; 0xb5
 8019a08:	b280      	uxth	r0, r0
 8019a0a:	f003 facf 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 8019a0e:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8019a12:	4621      	mov	r1, r4
 8019a14:	22bd      	movs	r2, #189	; 0xbd
 8019a16:	b280      	uxth	r0, r0
 8019a18:	f003 fac8 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 8019a1c:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 8019a20:	4621      	mov	r1, r4
 8019a22:	22bd      	movs	r2, #189	; 0xbd
 8019a24:	b280      	uxth	r0, r0
 8019a26:	f003 fac1 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 8019a2a:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 8019a2e:	4621      	mov	r1, r4
 8019a30:	22be      	movs	r2, #190	; 0xbe
 8019a32:	b280      	uxth	r0, r0
 8019a34:	f003 faba 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 8019a38:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 8019a3c:	4621      	mov	r1, r4
 8019a3e:	2281      	movs	r2, #129	; 0x81
 8019a40:	b280      	uxth	r0, r0
 8019a42:	f003 fab3 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 8019a46:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 8019a4a:	4621      	mov	r1, r4
 8019a4c:	2282      	movs	r2, #130	; 0x82
 8019a4e:	b280      	uxth	r0, r0
 8019a50:	f003 faac 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 8019a54:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8019a58:	4621      	mov	r1, r4
 8019a5a:	228c      	movs	r2, #140	; 0x8c
 8019a5c:	b280      	uxth	r0, r0
}
 8019a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 8019a62:	f003 baa3 	b.w	801cfac <TFT_DrawCharRus>
 8019a66:	bf00      	nop
 8019a68:	200001d0 	.word	0x200001d0
 8019a6c:	200001d8 	.word	0x200001d8

08019a70 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 8019a70:	b538      	push	{r3, r4, r5, lr}
 8019a72:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019a74:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019a78:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019a7a:	f003 fa8b 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019a7e:	2063      	movs	r0, #99	; 0x63
 8019a80:	f003 fa8e 	bl	801cfa0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019a84:	482d      	ldr	r0, [pc, #180]	; (8019b3c <GUI_TextMsgRu_LowRadiance+0xcc>)
 8019a86:	f003 fa7f 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8019a8a:	4621      	mov	r1, r4
 8019a8c:	229c      	movs	r2, #156	; 0x9c
 8019a8e:	4628      	mov	r0, r5
 8019a90:	f003 fa8c 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019a94:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019a96:	482a      	ldr	r0, [pc, #168]	; (8019b40 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019a98:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019a9a:	f003 fa75 	bl	801cf88 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019a9e:	f105 0010 	add.w	r0, r5, #16
 8019aa2:	4621      	mov	r1, r4
 8019aa4:	22b0      	movs	r2, #176	; 0xb0
 8019aa6:	b280      	uxth	r0, r0
 8019aa8:	f003 fa80 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019aac:	f105 001c 	add.w	r0, r5, #28
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	22bb      	movs	r2, #187	; 0xbb
 8019ab4:	b280      	uxth	r0, r0
 8019ab6:	f003 fa79 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 8019aba:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019abe:	4621      	mov	r1, r4
 8019ac0:	22b0      	movs	r2, #176	; 0xb0
 8019ac2:	b280      	uxth	r0, r0
 8019ac4:	f003 fa72 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 8019ac8:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8019acc:	4621      	mov	r1, r4
 8019ace:	228f      	movs	r2, #143	; 0x8f
 8019ad0:	b280      	uxth	r0, r0
 8019ad2:	f003 fa6b 	bl	801cfac <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 8019ad6:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8019ada:	4621      	mov	r1, r4
 8019adc:	228f      	movs	r2, #143	; 0x8f
 8019ade:	b280      	uxth	r0, r0
 8019ae0:	f003 fa64 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 8019ae4:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8019ae8:	4621      	mov	r1, r4
 8019aea:	2280      	movs	r2, #128	; 0x80
 8019aec:	b280      	uxth	r0, r0
 8019aee:	f003 fa5d 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 8019af2:	f105 0061 	add.w	r0, r5, #97	; 0x61
 8019af6:	4621      	mov	r1, r4
 8019af8:	22ba      	movs	r2, #186	; 0xba
 8019afa:	b280      	uxth	r0, r0
 8019afc:	f003 fa56 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 8019b00:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8019b04:	4621      	mov	r1, r4
 8019b06:	22be      	movs	r2, #190	; 0xbe
 8019b08:	b280      	uxth	r0, r0
 8019b0a:	f003 fa4f 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 8019b0e:	f105 0079 	add.w	r0, r5, #121	; 0x79
 8019b12:	4621      	mov	r1, r4
 8019b14:	2281      	movs	r2, #129	; 0x81
 8019b16:	b280      	uxth	r0, r0
 8019b18:	f003 fa48 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 8019b1c:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8019b20:	4621      	mov	r1, r4
 8019b22:	2282      	movs	r2, #130	; 0x82
 8019b24:	b280      	uxth	r0, r0
 8019b26:	f003 fa41 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8019b2a:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 8019b2e:	4621      	mov	r1, r4
 8019b30:	228c      	movs	r2, #140	; 0x8c
 8019b32:	b280      	uxth	r0, r0
}
 8019b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8019b38:	f003 ba38 	b.w	801cfac <TFT_DrawCharRus>
 8019b3c:	200001d0 	.word	0x200001d0
 8019b40:	200001d8 	.word	0x200001d8

08019b44 <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 8019b44:	b538      	push	{r3, r4, r5, lr}
 8019b46:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019b48:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019b4c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019b4e:	f003 fa21 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019b52:	2063      	movs	r0, #99	; 0x63
 8019b54:	f003 fa24 	bl	801cfa0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019b58:	4846      	ldr	r0, [pc, #280]	; (8019c74 <GUI_TextMsgRu_HighIrradiance+0x130>)
 8019b5a:	f003 fa15 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 8019b5e:	4621      	mov	r1, r4
 8019b60:	2291      	movs	r2, #145	; 0x91
 8019b62:	4628      	mov	r0, r5
 8019b64:	f003 fa22 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019b68:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019b6a:	4843      	ldr	r0, [pc, #268]	; (8019c78 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019b6c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019b6e:	f003 fa0b 	bl	801cf88 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019b72:	f105 0010 	add.w	r0, r5, #16
 8019b76:	4621      	mov	r1, r4
 8019b78:	22be      	movs	r2, #190	; 0xbe
 8019b7a:	b280      	uxth	r0, r0
 8019b7c:	f003 fa16 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019b80:	f105 001c 	add.w	r0, r5, #28
 8019b84:	4621      	mov	r1, r4
 8019b86:	22bb      	movs	r2, #187	; 0xbb
 8019b88:	b280      	uxth	r0, r0
 8019b8a:	f003 fa0f 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8019b8e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019b92:	4621      	mov	r1, r4
 8019b94:	228c      	movs	r2, #140	; 0x8c
 8019b96:	b280      	uxth	r0, r0
 8019b98:	f003 fa08 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 8019b9c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019ba0:	4621      	mov	r1, r4
 8019ba2:	2288      	movs	r2, #136	; 0x88
 8019ba4:	b280      	uxth	r0, r0
 8019ba6:	f003 fa01 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 8019baa:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8019bae:	4621      	mov	r1, r4
 8019bb0:	22b0      	movs	r2, #176	; 0xb0
 8019bb2:	b280      	uxth	r0, r0
 8019bb4:	f003 f9fa 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8019bb8:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8019bbc:	4621      	mov	r1, r4
 8019bbe:	228f      	movs	r2, #143	; 0x8f
 8019bc0:	b280      	uxth	r0, r0
 8019bc2:	f003 f9f3 	bl	801cfac <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 8019bc6:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8019bca:	4621      	mov	r1, r4
 8019bcc:	22be      	movs	r2, #190	; 0xbe
 8019bce:	b280      	uxth	r0, r0
 8019bd0:	f003 f9ec 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 8019bd4:	f105 0074 	add.w	r0, r5, #116	; 0x74
 8019bd8:	4621      	mov	r1, r4
 8019bda:	22b1      	movs	r2, #177	; 0xb1
 8019bdc:	b280      	uxth	r0, r0
 8019bde:	f003 f9e5 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 8019be2:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 8019be6:	4621      	mov	r1, r4
 8019be8:	22bb      	movs	r2, #187	; 0xbb
 8019bea:	b280      	uxth	r0, r0
 8019bec:	f003 f9de 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 8019bf0:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 8019bf4:	4621      	mov	r1, r4
 8019bf6:	2283      	movs	r2, #131	; 0x83
 8019bf8:	b280      	uxth	r0, r0
 8019bfa:	f003 f9d7 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 8019bfe:	f105 0097 	add.w	r0, r5, #151	; 0x97
 8019c02:	4621      	mov	r1, r4
 8019c04:	2287      	movs	r2, #135	; 0x87
 8019c06:	b280      	uxth	r0, r0
 8019c08:	f003 f9d0 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 8019c0c:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 8019c10:	4621      	mov	r1, r4
 8019c12:	22b5      	movs	r2, #181	; 0xb5
 8019c14:	b280      	uxth	r0, r0
 8019c16:	f003 f9c9 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 8019c1a:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8019c1e:	4621      	mov	r1, r4
 8019c20:	22bd      	movs	r2, #189	; 0xbd
 8019c22:	b280      	uxth	r0, r0
 8019c24:	f003 f9c2 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 8019c28:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 8019c2c:	4621      	mov	r1, r4
 8019c2e:	22bd      	movs	r2, #189	; 0xbd
 8019c30:	b280      	uxth	r0, r0
 8019c32:	f003 f9bb 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 8019c36:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8019c3a:	4621      	mov	r1, r4
 8019c3c:	22be      	movs	r2, #190	; 0xbe
 8019c3e:	b280      	uxth	r0, r0
 8019c40:	f003 f9b4 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 8019c44:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 8019c48:	4621      	mov	r1, r4
 8019c4a:	2281      	movs	r2, #129	; 0x81
 8019c4c:	b280      	uxth	r0, r0
 8019c4e:	f003 f9ad 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 8019c52:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 8019c56:	4621      	mov	r1, r4
 8019c58:	2282      	movs	r2, #130	; 0x82
 8019c5a:	b280      	uxth	r0, r0
 8019c5c:	f003 f9a6 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 8019c60:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 8019c64:	4621      	mov	r1, r4
 8019c66:	228c      	movs	r2, #140	; 0x8c
 8019c68:	b280      	uxth	r0, r0
}
 8019c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 8019c6e:	f003 b99d 	b.w	801cfac <TFT_DrawCharRus>
 8019c72:	bf00      	nop
 8019c74:	200001d0 	.word	0x200001d0
 8019c78:	200001d8 	.word	0x200001d8

08019c7c <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 8019c7c:	b538      	push	{r3, r4, r5, lr}
 8019c7e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019c80:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019c84:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019c86:	f003 f985 	bl	801cf94 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019c8a:	2063      	movs	r0, #99	; 0x63
 8019c8c:	f003 f988 	bl	801cfa0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019c90:	4834      	ldr	r0, [pc, #208]	; (8019d64 <GUI_TextMsgRu_HighRadiance+0xe8>)
 8019c92:	f003 f979 	bl	801cf88 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 8019c96:	4621      	mov	r1, r4
 8019c98:	2291      	movs	r2, #145	; 0x91
 8019c9a:	4628      	mov	r0, r5
 8019c9c:	f003 f986 	bl	801cfac <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019ca0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019ca2:	4831      	ldr	r0, [pc, #196]	; (8019d68 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019ca4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019ca6:	f003 f96f 	bl	801cf88 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019caa:	f105 0010 	add.w	r0, r5, #16
 8019cae:	4621      	mov	r1, r4
 8019cb0:	22be      	movs	r2, #190	; 0xbe
 8019cb2:	b280      	uxth	r0, r0
 8019cb4:	f003 f97a 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019cb8:	f105 001c 	add.w	r0, r5, #28
 8019cbc:	4621      	mov	r1, r4
 8019cbe:	22bb      	movs	r2, #187	; 0xbb
 8019cc0:	b280      	uxth	r0, r0
 8019cc2:	f003 f973 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8019cc6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019cca:	4621      	mov	r1, r4
 8019ccc:	228c      	movs	r2, #140	; 0x8c
 8019cce:	b280      	uxth	r0, r0
 8019cd0:	f003 f96c 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 8019cd4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019cd8:	4621      	mov	r1, r4
 8019cda:	2288      	movs	r2, #136	; 0x88
 8019cdc:	b280      	uxth	r0, r0
 8019cde:	f003 f965 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 8019ce2:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8019ce6:	4621      	mov	r1, r4
 8019ce8:	22b0      	movs	r2, #176	; 0xb0
 8019cea:	b280      	uxth	r0, r0
 8019cec:	f003 f95e 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8019cf0:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8019cf4:	4621      	mov	r1, r4
 8019cf6:	228f      	movs	r2, #143	; 0x8f
 8019cf8:	b280      	uxth	r0, r0
 8019cfa:	f003 f957 	bl	801cfac <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 8019cfe:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8019d02:	4621      	mov	r1, r4
 8019d04:	228f      	movs	r2, #143	; 0x8f
 8019d06:	b280      	uxth	r0, r0
 8019d08:	f003 f950 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 8019d0c:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8019d10:	4621      	mov	r1, r4
 8019d12:	2280      	movs	r2, #128	; 0x80
 8019d14:	b280      	uxth	r0, r0
 8019d16:	f003 f949 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 8019d1a:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8019d1e:	4621      	mov	r1, r4
 8019d20:	22ba      	movs	r2, #186	; 0xba
 8019d22:	b280      	uxth	r0, r0
 8019d24:	f003 f942 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 8019d28:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8019d2c:	4621      	mov	r1, r4
 8019d2e:	22be      	movs	r2, #190	; 0xbe
 8019d30:	b280      	uxth	r0, r0
 8019d32:	f003 f93b 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 8019d36:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8019d3a:	4621      	mov	r1, r4
 8019d3c:	2281      	movs	r2, #129	; 0x81
 8019d3e:	b280      	uxth	r0, r0
 8019d40:	f003 f934 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 8019d44:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 8019d48:	4621      	mov	r1, r4
 8019d4a:	2282      	movs	r2, #130	; 0x82
 8019d4c:	b280      	uxth	r0, r0
 8019d4e:	f003 f92d 	bl	801cfac <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 8019d52:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 8019d56:	4621      	mov	r1, r4
 8019d58:	228c      	movs	r2, #140	; 0x8c
 8019d5a:	b280      	uxth	r0, r0
}
 8019d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 8019d60:	f003 b924 	b.w	801cfac <TFT_DrawCharRus>
 8019d64:	200001d0 	.word	0x200001d0
 8019d68:	200001d8 	.word	0x200001d8

08019d6c <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 8019d6c:	2201      	movs	r2, #1
 8019d6e:	2102      	movs	r1, #2
 8019d70:	4801      	ldr	r0, [pc, #4]	; (8019d78 <Set.part.0+0xc>)
 8019d72:	f7e8 bcc1 	b.w	80026f8 <HAL_GPIO_WritePin>
 8019d76:	bf00      	nop
 8019d78:	48000400 	.word	0x48000400

08019d7c <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 8019d7c:	2200      	movs	r2, #0
 8019d7e:	2102      	movs	r1, #2
 8019d80:	4801      	ldr	r0, [pc, #4]	; (8019d88 <Reset.part.1+0xc>)
 8019d82:	f7e8 bcb9 	b.w	80026f8 <HAL_GPIO_WritePin>
 8019d86:	bf00      	nop
 8019d88:	48000400 	.word	0x48000400

08019d8c <GPIO_QSPI_Init>:
{
 8019d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019d90:	4b39      	ldr	r3, [pc, #228]	; (8019e78 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019d92:	4c3a      	ldr	r4, [pc, #232]	; (8019e7c <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019d96:	4f3a      	ldr	r7, [pc, #232]	; (8019e80 <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019d98:	f042 0220 	orr.w	r2, r2, #32
 8019d9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8019d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019da0:	f002 0220 	and.w	r2, r2, #32
 8019da4:	9201      	str	r2, [sp, #4]
 8019da6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019daa:	f042 0201 	orr.w	r2, r2, #1
 8019dae:	64da      	str	r2, [r3, #76]	; 0x4c
 8019db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019db2:	f002 0201 	and.w	r2, r2, #1
 8019db6:	9202      	str	r2, [sp, #8]
 8019db8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019dbc:	f042 0202 	orr.w	r2, r2, #2
 8019dc0:	64da      	str	r2, [r3, #76]	; 0x4c
 8019dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019dc4:	f003 0302 	and.w	r3, r3, #2
 8019dc8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019dca:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019dcc:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019dce:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019dd2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019dd4:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019dd6:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019dd8:	4621      	mov	r1, r4
 8019dda:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019ddc:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8019de0:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019de4:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019de8:	f7e8 fb10 	bl	800240c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019dec:	4621      	mov	r1, r4
 8019dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8019df2:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019df6:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8019df8:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019dfa:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019dfe:	f7e8 fb05 	bl	800240c <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8019e02:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019e04:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8019e84 <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8019e08:	4632      	mov	r2, r6
 8019e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019e0e:	f7e8 fc73 	bl	80026f8 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019e12:	4621      	mov	r1, r4
 8019e14:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8019e16:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019e1a:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019e1e:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e20:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019e22:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019e26:	f7e8 faf1 	bl	800240c <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019e2a:	4621      	mov	r1, r4
 8019e2c:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8019e2e:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019e32:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e34:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019e36:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019e3a:	f7e8 fae7 	bl	800240c <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8019e3e:	462a      	mov	r2, r5
 8019e40:	4631      	mov	r1, r6
 8019e42:	4648      	mov	r0, r9
 8019e44:	f7e8 fc58 	bl	80026f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8019e48:	462a      	mov	r2, r5
 8019e4a:	4648      	mov	r0, r9
 8019e4c:	2102      	movs	r1, #2
 8019e4e:	f7e8 fc53 	bl	80026f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8019e52:	462a      	mov	r2, r5
 8019e54:	4638      	mov	r0, r7
 8019e56:	2140      	movs	r1, #64	; 0x40
 8019e58:	f7e8 fc4e 	bl	80026f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8019e5c:	462a      	mov	r2, r5
 8019e5e:	4638      	mov	r0, r7
 8019e60:	2180      	movs	r1, #128	; 0x80
 8019e62:	f7e8 fc49 	bl	80026f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8019e66:	462a      	mov	r2, r5
 8019e68:	4651      	mov	r1, sl
 8019e6a:	4638      	mov	r0, r7
 8019e6c:	f7e8 fc44 	bl	80026f8 <HAL_GPIO_WritePin>
}
 8019e70:	b004      	add	sp, #16
 8019e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e76:	bf00      	nop
 8019e78:	40021000 	.word	0x40021000
 8019e7c:	20005744 	.word	0x20005744
 8019e80:	48001400 	.word	0x48001400
 8019e84:	48000400 	.word	0x48000400

08019e88 <Set>:
	switch(pin)
 8019e88:	3801      	subs	r0, #1
 8019e8a:	2805      	cmp	r0, #5
 8019e8c:	d81b      	bhi.n	8019ec6 <Set+0x3e>
 8019e8e:	e8df f000 	tbb	[pc, r0]
 8019e92:	0503      	.short	0x0503
 8019e94:	16110e0a 	.word	0x16110e0a
 8019e98:	f7ff bf68 	b.w	8019d6c <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 8019e9c:	2201      	movs	r2, #1
 8019e9e:	480a      	ldr	r0, [pc, #40]	; (8019ec8 <Set+0x40>)
 8019ea0:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019ea2:	f7e8 bc29 	b.w	80026f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 8019ea6:	2201      	movs	r2, #1
 8019ea8:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019eaa:	4808      	ldr	r0, [pc, #32]	; (8019ecc <Set+0x44>)
 8019eac:	e7f9      	b.n	8019ea2 <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 8019eae:	2201      	movs	r2, #1
 8019eb0:	2140      	movs	r1, #64	; 0x40
 8019eb2:	e7fa      	b.n	8019eaa <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8019eb4:	2201      	movs	r2, #1
 8019eb6:	2104      	movs	r1, #4
 8019eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019ebc:	e7f1      	b.n	8019ea2 <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019ebe:	2201      	movs	r2, #1
 8019ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019ec4:	e7f1      	b.n	8019eaa <Set+0x22>
 8019ec6:	4770      	bx	lr
 8019ec8:	48000400 	.word	0x48000400
 8019ecc:	48001400 	.word	0x48001400

08019ed0 <Reset>:
	switch(pin)
 8019ed0:	3801      	subs	r0, #1
 8019ed2:	2805      	cmp	r0, #5
 8019ed4:	d81b      	bhi.n	8019f0e <Reset+0x3e>
 8019ed6:	e8df f000 	tbb	[pc, r0]
 8019eda:	0503      	.short	0x0503
 8019edc:	16110e0a 	.word	0x16110e0a
 8019ee0:	f7ff bf4c 	b.w	8019d7c <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 8019ee4:	480a      	ldr	r0, [pc, #40]	; (8019f10 <Reset+0x40>)
 8019ee6:	2200      	movs	r2, #0
 8019ee8:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8019eea:	f7e8 bc05 	b.w	80026f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 8019eee:	2200      	movs	r2, #0
 8019ef0:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8019ef2:	4808      	ldr	r0, [pc, #32]	; (8019f14 <Reset+0x44>)
 8019ef4:	e7f9      	b.n	8019eea <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	2140      	movs	r1, #64	; 0x40
 8019efa:	e7fa      	b.n	8019ef2 <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8019efc:	2200      	movs	r2, #0
 8019efe:	2104      	movs	r1, #4
 8019f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019f04:	e7f1      	b.n	8019eea <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8019f06:	2200      	movs	r2, #0
 8019f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019f0c:	e7f1      	b.n	8019ef2 <Reset+0x22>
 8019f0e:	4770      	bx	lr
 8019f10:	48000400 	.word	0x48000400
 8019f14:	48001400 	.word	0x48001400

08019f18 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 8019f18:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019f1a:	4c09      	ldr	r4, [pc, #36]	; (8019f40 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019f1c:	4809      	ldr	r0, [pc, #36]	; (8019f44 <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019f1e:	2303      	movs	r3, #3
 8019f20:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019f22:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019f24:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019f28:	f7e8 fa70 	bl	800240c <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019f2c:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019f2e:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019f32:	4621      	mov	r1, r4
 8019f34:	4804      	ldr	r0, [pc, #16]	; (8019f48 <QSPI_Recieve_Init+0x30>)
}
 8019f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019f3a:	f7e8 ba67 	b.w	800240c <HAL_GPIO_Init>
 8019f3e:	bf00      	nop
 8019f40:	20005744 	.word	0x20005744
 8019f44:	48000400 	.word	0x48000400
 8019f48:	48001400 	.word	0x48001400

08019f4c <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 8019f4c:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019f4e:	4c09      	ldr	r4, [pc, #36]	; (8019f74 <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019f50:	4809      	ldr	r0, [pc, #36]	; (8019f78 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019f52:	2303      	movs	r3, #3
 8019f54:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019f56:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019f58:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019f5c:	f7e8 fa56 	bl	800240c <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019f60:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019f62:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019f66:	4621      	mov	r1, r4
 8019f68:	4804      	ldr	r0, [pc, #16]	; (8019f7c <QSPI_Transmit_Init+0x30>)
}
 8019f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019f6e:	f7e8 ba4d 	b.w	800240c <HAL_GPIO_Init>
 8019f72:	bf00      	nop
 8019f74:	20005744 	.word	0x20005744
 8019f78:	48000400 	.word	0x48000400
 8019f7c:	48001400 	.word	0x48001400

08019f80 <Single_Mode>:
void Single_Mode(void)
{
 8019f80:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 8019f82:	4c0d      	ldr	r4, [pc, #52]	; (8019fb8 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019f84:	4e0d      	ldr	r6, [pc, #52]	; (8019fbc <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019f86:	2501      	movs	r5, #1
 8019f88:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019f8a:	4621      	mov	r1, r4
 8019f8c:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019f8e:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019f92:	f7e8 fa3b 	bl	800240c <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019f96:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019f98:	4621      	mov	r1, r4
 8019f9a:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019f9c:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 8019f9e:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019fa0:	f7e8 fa34 	bl	800240c <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 8019fa4:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019fa6:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019faa:	4621      	mov	r1, r4
 8019fac:	4804      	ldr	r0, [pc, #16]	; (8019fc0 <Single_Mode+0x40>)
}
 8019fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019fb2:	f7e8 ba2b 	b.w	800240c <HAL_GPIO_Init>
 8019fb6:	bf00      	nop
 8019fb8:	20005744 	.word	0x20005744
 8019fbc:	48000400 	.word	0x48000400
 8019fc0:	48001400 	.word	0x48001400

08019fc4 <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 8019fc4:	b538      	push	{r3, r4, r5, lr}
 8019fc6:	4605      	mov	r5, r0
 8019fc8:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 8019fca:	062b      	lsls	r3, r5, #24
 8019fcc:	d501      	bpl.n	8019fd2 <SPI_Byte_T+0xe>
 8019fce:	f7ff fecd 	bl	8019d6c <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 8019fd2:	2006      	movs	r0, #6
 8019fd4:	f7ff ff58 	bl	8019e88 <Set>
 8019fd8:	3c01      	subs	r4, #1
 8019fda:	f7ff fecf 	bl	8019d7c <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 8019fde:	2006      	movs	r0, #6
		byte=(byte<<1);
 8019fe0:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 8019fe2:	f7ff ff75 	bl	8019ed0 <Reset>
	for(uint8_t i=0; i<8; i++)
 8019fe6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 8019fea:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 8019fec:	d1ed      	bne.n	8019fca <SPI_Byte_T+0x6>
	}	
}
 8019fee:	bd38      	pop	{r3, r4, r5, pc}

08019ff0 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 8019ff0:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 8019ff2:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8019ff4:	4e0d      	ldr	r6, [pc, #52]	; (801a02c <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 8019ff6:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8019ff8:	2101      	movs	r1, #1
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	f7e8 fb76 	bl	80026ec <HAL_GPIO_ReadPin>
 801a000:	b108      	cbz	r0, 801a006 <SPI_Byte_R+0x16>
 801a002:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 801a006:	2006      	movs	r0, #6
 801a008:	f7ff ff3e 	bl	8019e88 <Set>
		if (i<7) byte=(byte<<1);
 801a00c:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 801a00e:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 801a012:	bf18      	it	ne
 801a014:	0064      	lslne	r4, r4, #1
		Reset(clk);
 801a016:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 801a01a:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 801a01c:	bf18      	it	ne
 801a01e:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 801a020:	f7ff ff56 	bl	8019ed0 <Reset>
	for(uint8_t i=0; i<8; i++)
 801a024:	2d08      	cmp	r5, #8
 801a026:	d1e7      	bne.n	8019ff8 <SPI_Byte_R+0x8>
	}
	return byte;
}
 801a028:	4620      	mov	r0, r4
 801a02a:	bd70      	pop	{r4, r5, r6, pc}
 801a02c:	48000400 	.word	0x48000400

0801a030 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 801a030:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 801a032:	2005      	movs	r0, #5
 801a034:	f7ff ff4c 	bl	8019ed0 <Reset>
	SPI_Byte_T(cmd);
 801a038:	2005      	movs	r0, #5
 801a03a:	f7ff ffc3 	bl	8019fc4 <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 801a03e:	f7ff ffd7 	bl	8019ff0 <SPI_Byte_R>
 801a042:	4604      	mov	r4, r0
			Set(cs);
 801a044:	2005      	movs	r0, #5
 801a046:	f7ff ff1f 	bl	8019e88 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 801a04a:	4620      	mov	r0, r4
 801a04c:	bd10      	pop	{r4, pc}

0801a04e <SPI_Check_Busy>:
{
 801a04e:	b508      	push	{r3, lr}
 801a050:	f7ff ffee 	bl	801a030 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 801a054:	07c3      	lsls	r3, r0, #31
 801a056:	d400      	bmi.n	801a05a <SPI_Check_Busy+0xc>
}
 801a058:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 801a05a:	2000      	movs	r0, #0
 801a05c:	f7e6 ffe6 	bl	800102c <HAL_Delay>
 801a060:	e7f6      	b.n	801a050 <SPI_Check_Busy+0x2>
	...

0801a064 <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 801a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 801a066:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801a068:	4e18      	ldr	r6, [pc, #96]	; (801a0cc <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801a06a:	4f19      	ldr	r7, [pc, #100]	; (801a0d0 <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 801a06c:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801a06e:	2102      	movs	r1, #2
 801a070:	4630      	mov	r0, r6
 801a072:	f7e8 fb3b 	bl	80026ec <HAL_GPIO_ReadPin>
 801a076:	b108      	cbz	r0, 801a07c <QSPI_16_R+0x18>
 801a078:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801a07c:	2101      	movs	r1, #1
 801a07e:	4630      	mov	r0, r6
 801a080:	f7e8 fb34 	bl	80026ec <HAL_GPIO_ReadPin>
 801a084:	b108      	cbz	r0, 801a08a <QSPI_16_R+0x26>
 801a086:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801a08a:	2180      	movs	r1, #128	; 0x80
 801a08c:	4638      	mov	r0, r7
 801a08e:	f7e8 fb2d 	bl	80026ec <HAL_GPIO_ReadPin>
 801a092:	b108      	cbz	r0, 801a098 <QSPI_16_R+0x34>
 801a094:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 801a098:	2140      	movs	r1, #64	; 0x40
 801a09a:	4638      	mov	r0, r7
 801a09c:	f7e8 fb26 	bl	80026ec <HAL_GPIO_ReadPin>
 801a0a0:	b108      	cbz	r0, 801a0a6 <QSPI_16_R+0x42>
 801a0a2:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 801a0a6:	2006      	movs	r0, #6
 801a0a8:	f7ff feee 	bl	8019e88 <Set>
		if (i<3) byte=(byte<<4);
 801a0ac:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 801a0ae:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 801a0b2:	bf18      	it	ne
 801a0b4:	0124      	lslne	r4, r4, #4
		Reset(clk);
 801a0b6:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 801a0ba:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 801a0bc:	bf18      	it	ne
 801a0be:	b2a4      	uxthne	r4, r4
		Reset(clk);
 801a0c0:	f7ff ff06 	bl	8019ed0 <Reset>
	for(uint8_t i=0; i<4; i++)
 801a0c4:	2d04      	cmp	r5, #4
 801a0c6:	d1d2      	bne.n	801a06e <QSPI_16_R+0xa>
	}
	return byte;
}
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0cc:	48000400 	.word	0x48000400
 801a0d0:	48001400 	.word	0x48001400

0801a0d4 <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 801a0d4:	b538      	push	{r3, r4, r5, lr}
 801a0d6:	4604      	mov	r4, r0
 801a0d8:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 801a0da:	0620      	lsls	r0, r4, #24
 801a0dc:	d502      	bpl.n	801a0e4 <QSPI_Byte_T+0x10>
 801a0de:	2004      	movs	r0, #4
 801a0e0:	f7ff fed2 	bl	8019e88 <Set>
		if(0x40 & byte)	Set(io2);
 801a0e4:	0661      	lsls	r1, r4, #25
 801a0e6:	d502      	bpl.n	801a0ee <QSPI_Byte_T+0x1a>
 801a0e8:	2003      	movs	r0, #3
 801a0ea:	f7ff fecd 	bl	8019e88 <Set>
		if(0x20 & byte)	Set(io1);
 801a0ee:	06a2      	lsls	r2, r4, #26
 801a0f0:	d502      	bpl.n	801a0f8 <QSPI_Byte_T+0x24>
 801a0f2:	2002      	movs	r0, #2
 801a0f4:	f7ff fec8 	bl	8019e88 <Set>
		if(0x10 & byte)	Set(io0);
 801a0f8:	06e3      	lsls	r3, r4, #27
 801a0fa:	d501      	bpl.n	801a100 <QSPI_Byte_T+0x2c>
 801a0fc:	f7ff fe36 	bl	8019d6c <Set.part.0>

		Set(clk);
 801a100:	2006      	movs	r0, #6
 801a102:	f7ff fec1 	bl	8019e88 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 801a106:	2004      	movs	r0, #4
 801a108:	f7ff fee2 	bl	8019ed0 <Reset>
 801a10c:	2003      	movs	r0, #3
 801a10e:	f7ff fedf 	bl	8019ed0 <Reset>
 801a112:	2002      	movs	r0, #2
 801a114:	f7ff fedc 	bl	8019ed0 <Reset>
 801a118:	3d01      	subs	r5, #1
 801a11a:	f7ff fe2f 	bl	8019d7c <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 801a11e:	2006      	movs	r0, #6
		byte=(byte<<4);
 801a120:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 801a122:	f7ff fed5 	bl	8019ed0 <Reset>
	for(uint8_t i=0; i<2; i++)
 801a126:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 801a12a:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 801a12c:	d1d5      	bne.n	801a0da <QSPI_Byte_T+0x6>
	}	
}
 801a12e:	bd38      	pop	{r3, r4, r5, pc}

0801a130 <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 801a130:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801a132:	4e07      	ldr	r6, [pc, #28]	; (801a150 <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 801a134:	0085      	lsls	r5, r0, #2
 801a136:	2400      	movs	r4, #0
 801a138:	b2e3      	uxtb	r3, r4
 801a13a:	42ab      	cmp	r3, r5
 801a13c:	f104 0401 	add.w	r4, r4, #1
 801a140:	db00      	blt.n	801a144 <QSPI_Dummy+0x14>
	}
}
 801a142:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801a144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a148:	4630      	mov	r0, r6
 801a14a:	f7e8 fada 	bl	8002702 <HAL_GPIO_TogglePin>
 801a14e:	e7f3      	b.n	801a138 <QSPI_Dummy+0x8>
 801a150:	48001400 	.word	0x48001400

0801a154 <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 801a154:	b510      	push	{r4, lr}
 801a156:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 801a158:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801a15c:	f7ff ffba 	bl	801a0d4 <QSPI_Byte_T>
 801a160:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801a164:	f7ff ffb6 	bl	801a0d4 <QSPI_Byte_T>
 801a168:	b2e0      	uxtb	r0, r4
	}
}
 801a16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 801a16e:	f7ff bfb1 	b.w	801a0d4 <QSPI_Byte_T>

0801a172 <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 801a172:	b570      	push	{r4, r5, r6, lr}
 801a174:	460c      	mov	r4, r1
 801a176:	4615      	mov	r5, r2
 801a178:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 801a17a:	f7ff fee7 	bl	8019f4c <QSPI_Transmit_Init>
	Reset(cs);
 801a17e:	2005      	movs	r0, #5
 801a180:	f7ff fea6 	bl	8019ed0 <Reset>
	SPI_Byte_T(cmd);
 801a184:	20eb      	movs	r0, #235	; 0xeb
 801a186:	f7ff ff1d 	bl	8019fc4 <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 801a18a:	4620      	mov	r0, r4
 801a18c:	f7ff ffe2 	bl	801a154 <QSPI_Address>
	QSPI_Dummy(3);	
 801a190:	2003      	movs	r0, #3
 801a192:	f7ff ffcd 	bl	801a130 <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 801a196:	f7ff febf 	bl	8019f18 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801a19a:	2400      	movs	r4, #0
 801a19c:	42ac      	cmp	r4, r5
 801a19e:	d108      	bne.n	801a1b2 <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 801a1a0:	2005      	movs	r0, #5
 801a1a2:	f7ff fe71 	bl	8019e88 <Set>

	Single_Mode();
 801a1a6:	f7ff feeb 	bl	8019f80 <Single_Mode>
	SPI_Check_Busy();
}
 801a1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 801a1ae:	f7ff bf4e 	b.w	801a04e <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801a1b2:	f7ff ff57 	bl	801a064 <QSPI_16_R>
 801a1b6:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 801a1ba:	3401      	adds	r4, #1
 801a1bc:	e7ee      	b.n	801a19c <QSPI_Recieve_IO_16+0x2a>
	...

0801a1c0 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 801a1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c4:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 801a1c8:	4680      	mov	r8, r0
 801a1ca:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 801a1cc:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801a1d0:	2100      	movs	r1, #0
 801a1d2:	4668      	mov	r0, sp
 801a1d4:	f006 fb95 	bl	8020902 <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801a1d8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 801a21c <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801a1dc:	2400      	movs	r4, #0
 801a1de:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801a1e2:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801a1e6:	fb06 f304 	mul.w	r3, r6, r4
 801a1ea:	429f      	cmp	r7, r3
 801a1ec:	d803      	bhi.n	801a1f6 <Image_load+0x36>
}
 801a1ee:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 801a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801a1f6:	b2a5      	uxth	r5, r4
 801a1f8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 801a1fc:	fb0a 8105 	mla	r1, sl, r5, r8
 801a200:	4668      	mov	r0, sp
 801a202:	f7ff ffb6 	bl	801a172 <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801a206:	fb06 f005 	mul.w	r0, r6, r5
 801a20a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801a20e:	4669      	mov	r1, sp
 801a210:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 801a214:	f006 fb6a 	bl	80208ec <memcpy>
 801a218:	3401      	adds	r4, #1
 801a21a:	e7e4      	b.n	801a1e6 <Image_load+0x26>
 801a21c:	20055954 	.word	0x20055954

0801a220 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 801a220:	ee20 0a20 	vmul.f32	s0, s0, s1
 801a224:	4770      	bx	lr
	...

0801a228 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 801a228:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 801a22a:	eddf 7a17 	vldr	s15, [pc, #92]	; 801a288 <Rabs_calc_Factor1+0x60>
{
 801a22e:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 801a232:	ee80 8a27 	vdiv.f32	s16, s0, s15
 801a236:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 801a238:	2300      	movs	r3, #0
 801a23a:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 801a23e:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 801a242:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 801a244:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 801a246:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 801a248:	d1f9      	bne.n	801a23e <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 801a24a:	ee07 3a90 	vmov	s15, r3
 801a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a252:	ee17 0a90 	vmov	r0, s15
 801a256:	f7e6 f98f 	bl	8000578 <__aeabi_f2d>
 801a25a:	2200      	movs	r2, #0
 801a25c:	4b0b      	ldr	r3, [pc, #44]	; (801a28c <Rabs_calc_Factor1+0x64>)
 801a25e:	f7e6 f9df 	bl	8000620 <__aeabi_dmul>
 801a262:	4604      	mov	r4, r0
 801a264:	ee18 0a10 	vmov	r0, s16
 801a268:	460d      	mov	r5, r1
 801a26a:	f7e6 f985 	bl	8000578 <__aeabi_f2d>
 801a26e:	4602      	mov	r2, r0
 801a270:	460b      	mov	r3, r1
 801a272:	4620      	mov	r0, r4
 801a274:	4629      	mov	r1, r5
 801a276:	f7e6 f9d3 	bl	8000620 <__aeabi_dmul>
 801a27a:	f7e6 fcc9 	bl	8000c10 <__aeabi_d2f>
}
 801a27e:	ecbd 8b02 	vpop	{d8}
 801a282:	ee00 0a10 	vmov	s0, r0
 801a286:	bd38      	pop	{r3, r4, r5, pc}
 801a288:	42c80000 	.word	0x42c80000
 801a28c:	3f500000 	.word	0x3f500000

0801a290 <Rabs_calc_main>:
//
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{
 801a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
			Factor3 = Factor3*Factor2*(Sn[r]);
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
		}

		Rabs_prev[1023-i][n] = Factor3;
 801a294:	4f2c      	ldr	r7, [pc, #176]	; (801a348 <Rabs_calc_main+0xb8>)
 801a296:	4d2d      	ldr	r5, [pc, #180]	; (801a34c <Rabs_calc_main+0xbc>)
 801a298:	783e      	ldrb	r6, [r7, #0]
 801a29a:	f1a0 0c02 	sub.w	ip, r0, #2
		Factor3 = R_data[i] - Rdark - Factor1;
 801a29e:	482c      	ldr	r0, [pc, #176]	; (801a350 <Rabs_calc_main+0xc0>)
 801a2a0:	ea4f 0986 	mov.w	r9, r6, lsl #2
		Rabs_prev[1023-i][n] = Factor3;
 801a2a4:	f640 7efc 	movw	lr, #4092	; 0xffc
		if(Factor3 <= 0)
 801a2a8:	f04f 0b00 	mov.w	fp, #0
 801a2ac:	4680      	mov	r8, r0
 801a2ae:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		Factor3 = R_data[i] - Rdark - Factor1;
 801a2b2:	f83c 4f02 	ldrh.w	r4, [ip, #2]!
 801a2b6:	1a64      	subs	r4, r4, r1
 801a2b8:	ee07 4a90 	vmov	s15, r4
 801a2bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2c0:	eb03 0a0e 	add.w	sl, r3, lr
 801a2c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
		if(Factor3 <= 0)
 801a2c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Factor3 = R_data[i] - Rdark - Factor1;
 801a2d0:	edc0 7a00 	vstr	s15, [r0]
		if(Factor3 <= 0)
 801a2d4:	d829      	bhi.n	801a32a <Rabs_calc_main+0x9a>
			Rabs[1023-i] = (Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3]) / 5;
 801a2d6:	edd5 7a00 	vldr	s15, [r5]
			Factor3 = 0;
 801a2da:	f8c0 b000 	str.w	fp, [r0]
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a2de:	edd5 6a01 	vldr	s13, [r5, #4]
 801a2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a2e6:	edd5 6a02 	vldr	s13, [r5, #8]
 801a2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a2ee:	edd5 6a03 	vldr	s13, [r5, #12]
 801a2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
		Rabs_prev[1023-i][n] = Factor3;
 801a2f6:	eb05 0409 	add.w	r4, r5, r9
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a2fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a2fe:	f1ae 0e04 	sub.w	lr, lr, #4
	for (uint16_t i = 0; i < 1024; i++)
 801a302:	f11e 0f04 	cmn.w	lr, #4
 801a306:	f1a5 0510 	sub.w	r5, r5, #16
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a30a:	edca 6a00 	vstr	s13, [sl]
		Rabs_prev[1023-i][n] = Factor3;
 801a30e:	f8d8 a000 	ldr.w	sl, [r8]
 801a312:	f8c4 a000 	str.w	sl, [r4]
	for (uint16_t i = 0; i < 1024; i++)
 801a316:	d1cc      	bne.n	801a2b2 <Rabs_calc_main+0x22>

		r--;
	}
	n++;
 801a318:	3601      	adds	r6, #1
 801a31a:	b2f6      	uxtb	r6, r6
	if (n>3) n = 0;
 801a31c:	2e03      	cmp	r6, #3
 801a31e:	bf8a      	itet	hi
 801a320:	2300      	movhi	r3, #0
	n++;
 801a322:	703e      	strbls	r6, [r7, #0]
	if (n>3) n = 0;
 801a324:	703b      	strbhi	r3, [r7, #0]
 801a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Factor3 = Factor3*Factor2*(Sn[r]);
 801a32a:	eb02 040e 	add.w	r4, r2, lr
 801a32e:	edd4 6a00 	vldr	s13, [r4]
 801a332:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a336:	ee67 7aa6 	vmul.f32	s15, s15, s13
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a33a:	edd5 6a00 	vldr	s13, [r5]
			Factor3 = Factor3*Factor2*(Sn[r]);
 801a33e:	edc0 7a00 	vstr	s15, [r0]
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a346:	e7ca      	b.n	801a2de <Rabs_calc_main+0x4e>
 801a348:	2000975c 	.word	0x2000975c
 801a34c:	2000974c 	.word	0x2000974c
 801a350:	20005758 	.word	0x20005758

0801a354 <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 801a354:	2900      	cmp	r1, #0

	float max = 0;
 801a356:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a388 <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 801a35a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801a35e:	bf0c      	ite	eq
 801a360:	2204      	moveq	r2, #4
 801a362:	2203      	movne	r2, #3
 801a364:	4293      	cmp	r3, r2
 801a366:	d200      	bcs.n	801a36a <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 801a368:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 801a36a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801a36e:	edd1 7a00 	vldr	s15, [r1]
 801a372:	eeb4 0a67 	vcmp.f32	s0, s15
 801a376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a37a:	eba3 0302 	sub.w	r3, r3, r2
 801a37e:	bf48      	it	mi
 801a380:	eeb0 0a67 	vmovmi.f32	s0, s15
 801a384:	b29b      	uxth	r3, r3
 801a386:	e7ed      	b.n	801a364 <Rabs_find_MAX+0x10>
 801a388:	00000000 	.word	0x00000000

0801a38c <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 801a38c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801a3ac <Rabs_find_MAX_all+0x20>
 801a390:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 801a394:	ecf0 7a01 	vldmia	r0!, {s15}
 801a398:	eef4 7a40 	vcmp.f32	s15, s0
 801a39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3a0:	bfc8      	it	gt
 801a3a2:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 801a3a6:	4298      	cmp	r0, r3
 801a3a8:	d1f4      	bne.n	801a394 <Rabs_find_MAX_all+0x8>
	}
	return max;
}
 801a3aa:	4770      	bx	lr
 801a3ac:	00000000 	.word	0x00000000

0801a3b0 <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 801a3b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a3b4:	4c52      	ldr	r4, [pc, #328]	; (801a500 <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 801a3b6:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a3ba:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801a3be:	f04f 0900 	mov.w	r9, #0
 801a3c2:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a3c6:	6125      	str	r5, [r4, #16]
{
 801a3c8:	460f      	mov	r7, r1
 801a3ca:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801a3cc:	f7e7 fe90 	bl	80020f0 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801a3d0:	f7e7 fe8e 	bl	80020f0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a3d4:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801a3d6:	2064      	movs	r0, #100	; 0x64
 801a3d8:	f7e6 fe28 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a3dc:	4849      	ldr	r0, [pc, #292]	; (801a504 <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801a3de:	2302      	movs	r3, #2
 801a3e0:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 801a3e2:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a3e4:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 801a3e6:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801a3e8:	2301      	movs	r3, #1
 801a3ea:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a3ec:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a3f0:	f7e7 ff98 	bl	8002324 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801a3f4:	2032      	movs	r0, #50	; 0x32
 801a3f6:	f7e6 fe19 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a3fa:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801a3fc:	f7e7 fe8a 	bl	8002114 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801a400:	f7e7 fe76 	bl	80020f0 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a404:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 801a406:	4d40      	ldr	r5, [pc, #256]	; (801a508 <WriteSDFLASH_t+0x158>)
 801a408:	4632      	mov	r2, r6
 801a40a:	463b      	mov	r3, r7
 801a40c:	4629      	mov	r1, r5
 801a40e:	2000      	movs	r0, #0
 801a410:	f7e7 fec8 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a414:	2800      	cmp	r0, #0
 801a416:	d1f7      	bne.n	801a408 <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a41c:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 801a41e:	4d3b      	ldr	r5, [pc, #236]	; (801a50c <WriteSDFLASH_t+0x15c>)
 801a420:	4c3b      	ldr	r4, [pc, #236]	; (801a510 <WriteSDFLASH_t+0x160>)
 801a422:	782a      	ldrb	r2, [r5, #0]
 801a424:	2300      	movs	r3, #0
 801a426:	4621      	mov	r1, r4
 801a428:	2000      	movs	r0, #0
 801a42a:	f7e7 febb 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a42e:	2800      	cmp	r0, #0
 801a430:	d1f7      	bne.n	801a422 <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a432:	4b33      	ldr	r3, [pc, #204]	; (801a500 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801a434:	4d37      	ldr	r5, [pc, #220]	; (801a514 <WriteSDFLASH_t+0x164>)
 801a436:	4c38      	ldr	r4, [pc, #224]	; (801a518 <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a438:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a43c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801a43e:	882a      	ldrh	r2, [r5, #0]
 801a440:	2300      	movs	r3, #0
 801a442:	4621      	mov	r1, r4
 801a444:	2000      	movs	r0, #0
 801a446:	f7e7 fead 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a44a:	2800      	cmp	r0, #0
 801a44c:	d1f7      	bne.n	801a43e <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a44e:	4b2c      	ldr	r3, [pc, #176]	; (801a500 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801a450:	4d32      	ldr	r5, [pc, #200]	; (801a51c <WriteSDFLASH_t+0x16c>)
 801a452:	4c33      	ldr	r4, [pc, #204]	; (801a520 <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a454:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a458:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801a45a:	782a      	ldrb	r2, [r5, #0]
 801a45c:	2300      	movs	r3, #0
 801a45e:	4621      	mov	r1, r4
 801a460:	2000      	movs	r0, #0
 801a462:	f7e7 fe9f 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a466:	2800      	cmp	r0, #0
 801a468:	d1f7      	bne.n	801a45a <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a46a:	4b25      	ldr	r3, [pc, #148]	; (801a500 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801a46c:	4d2d      	ldr	r5, [pc, #180]	; (801a524 <WriteSDFLASH_t+0x174>)
 801a46e:	4c2e      	ldr	r4, [pc, #184]	; (801a528 <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a470:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a474:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801a476:	782a      	ldrb	r2, [r5, #0]
 801a478:	2300      	movs	r3, #0
 801a47a:	4621      	mov	r1, r4
 801a47c:	2000      	movs	r0, #0
 801a47e:	f7e7 fe91 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a482:	2800      	cmp	r0, #0
 801a484:	d1f7      	bne.n	801a476 <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a486:	4b1e      	ldr	r3, [pc, #120]	; (801a500 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801a488:	4d28      	ldr	r5, [pc, #160]	; (801a52c <WriteSDFLASH_t+0x17c>)
 801a48a:	4c29      	ldr	r4, [pc, #164]	; (801a530 <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a48c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a490:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801a492:	782a      	ldrb	r2, [r5, #0]
 801a494:	2300      	movs	r3, #0
 801a496:	4621      	mov	r1, r4
 801a498:	2000      	movs	r0, #0
 801a49a:	f7e7 fe83 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a49e:	2800      	cmp	r0, #0
 801a4a0:	d1f7      	bne.n	801a492 <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a4a2:	4b17      	ldr	r3, [pc, #92]	; (801a500 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801a4a4:	4d23      	ldr	r5, [pc, #140]	; (801a534 <WriteSDFLASH_t+0x184>)
 801a4a6:	4c24      	ldr	r4, [pc, #144]	; (801a538 <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a4a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a4ac:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801a4ae:	782a      	ldrb	r2, [r5, #0]
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	4621      	mov	r1, r4
 801a4b4:	2000      	movs	r0, #0
 801a4b6:	f7e7 fe75 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a4ba:	2800      	cmp	r0, #0
 801a4bc:	d1f7      	bne.n	801a4ae <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a4be:	4b10      	ldr	r3, [pc, #64]	; (801a500 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801a4c0:	4d1e      	ldr	r5, [pc, #120]	; (801a53c <WriteSDFLASH_t+0x18c>)
 801a4c2:	4c1f      	ldr	r4, [pc, #124]	; (801a540 <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a4c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a4c8:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801a4ca:	782a      	ldrb	r2, [r5, #0]
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	4621      	mov	r1, r4
 801a4d0:	2000      	movs	r0, #0
 801a4d2:	f7e7 fe67 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a4d6:	2800      	cmp	r0, #0
 801a4d8:	d1f7      	bne.n	801a4ca <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a4da:	4b09      	ldr	r3, [pc, #36]	; (801a500 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801a4dc:	4d19      	ldr	r5, [pc, #100]	; (801a544 <WriteSDFLASH_t+0x194>)
 801a4de:	4c1a      	ldr	r4, [pc, #104]	; (801a548 <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a4e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a4e4:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801a4e6:	782a      	ldrb	r2, [r5, #0]
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	4621      	mov	r1, r4
 801a4ec:	2000      	movs	r0, #0
 801a4ee:	f7e7 fe59 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a4f2:	2800      	cmp	r0, #0
 801a4f4:	d1f7      	bne.n	801a4e6 <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 801a4f6:	f7e7 fe0d 	bl	8002114 <HAL_FLASH_Lock>
}
 801a4fa:	b003      	add	sp, #12
 801a4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a500:	40022000 	.word	0x40022000
 801a504:	20092648 	.word	0x20092648
 801a508:	0812b020 	.word	0x0812b020
 801a50c:	20000ebc 	.word	0x20000ebc
 801a510:	0812b030 	.word	0x0812b030
 801a514:	20005706 	.word	0x20005706
 801a518:	0812b038 	.word	0x0812b038
 801a51c:	20005702 	.word	0x20005702
 801a520:	0812b040 	.word	0x0812b040
 801a524:	200056ff 	.word	0x200056ff
 801a528:	0812b048 	.word	0x0812b048
 801a52c:	20005700 	.word	0x20005700
 801a530:	0812b050 	.word	0x0812b050
 801a534:	20005703 	.word	0x20005703
 801a538:	0812b058 	.word	0x0812b058
 801a53c:	20090ac1 	.word	0x20090ac1
 801a540:	0812b060 	.word	0x0812b060
 801a544:	20090ac2 	.word	0x20090ac2
 801a548:	0812b068 	.word	0x0812b068

0801a54c <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 801a54c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a550:	4c1b      	ldr	r4, [pc, #108]	; (801a5c0 <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 801a552:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a554:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801a558:	f04f 0800 	mov.w	r8, #0
 801a55c:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a560:	6125      	str	r5, [r4, #16]
{
 801a562:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801a564:	f7e7 fdc4 	bl	80020f0 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801a568:	f7e7 fdc2 	bl	80020f0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a56c:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801a56e:	2064      	movs	r0, #100	; 0x64
 801a570:	f7e6 fd5c 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a574:	4813      	ldr	r0, [pc, #76]	; (801a5c4 <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801a576:	2302      	movs	r3, #2
 801a578:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 801a57a:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a57c:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 801a57e:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801a580:	2301      	movs	r3, #1
 801a582:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a584:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a588:	f7e7 fecc 	bl	8002324 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801a58c:	2032      	movs	r0, #50	; 0x32
 801a58e:	f7e6 fd4d 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a592:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801a594:	f7e7 fdbe 	bl	8002114 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801a598:	f7e7 fdaa 	bl	80020f0 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a59c:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 801a59e:	b2f4      	uxtb	r4, r6
 801a5a0:	4e09      	ldr	r6, [pc, #36]	; (801a5c8 <WriteFLASH_Screen+0x7c>)
 801a5a2:	2500      	movs	r5, #0
 801a5a4:	4622      	mov	r2, r4
 801a5a6:	462b      	mov	r3, r5
 801a5a8:	4631      	mov	r1, r6
 801a5aa:	2000      	movs	r0, #0
 801a5ac:	f7e7 fdfa 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a5b0:	2800      	cmp	r0, #0
 801a5b2:	d1f7      	bne.n	801a5a4 <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 801a5b4:	f7e7 fdae 	bl	8002114 <HAL_FLASH_Lock>
}
 801a5b8:	b002      	add	sp, #8
 801a5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5be:	bf00      	nop
 801a5c0:	40022000 	.word	0x40022000
 801a5c4:	20092648 	.word	0x20092648
 801a5c8:	0812c020 	.word	0x0812c020
 801a5cc:	00000000 	.word	0x00000000

0801a5d0 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 801a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a5d2:	4c5b      	ldr	r4, [pc, #364]	; (801a740 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 801a5d4:	4e5b      	ldr	r6, [pc, #364]	; (801a744 <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a5d6:	4d5c      	ldr	r5, [pc, #368]	; (801a748 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a5d8:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801a74c <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 801a5dc:	4f5c      	ldr	r7, [pc, #368]	; (801a750 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 801a5de:	2200      	movs	r2, #0
 801a5e0:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a5e2:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a5e6:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 801a5e8:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a5ec:	f7f9 f90e 	bl	801380c <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a5f0:	462a      	mov	r2, r5
 801a5f2:	4b58      	ldr	r3, [pc, #352]	; (801a754 <Calculate_SD_Data+0x184>)
 801a5f4:	4958      	ldr	r1, [pc, #352]	; (801a758 <Calculate_SD_Data+0x188>)
 801a5f6:	4620      	mov	r0, r4
 801a5f8:	f7f4 f95c 	bl	800e8b4 <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801a5fc:	4638      	mov	r0, r7
 801a5fe:	f7f4 f9c5 	bl	800e98c <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 801a602:	4856      	ldr	r0, [pc, #344]	; (801a75c <Calculate_SD_Data+0x18c>)
 801a604:	f7f4 fa04 	bl	800ea10 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801a608:	4b55      	ldr	r3, [pc, #340]	; (801a760 <Calculate_SD_Data+0x190>)
 801a60a:	781a      	ldrb	r2, [r3, #0]
 801a60c:	4b55      	ldr	r3, [pc, #340]	; (801a764 <Calculate_SD_Data+0x194>)
 801a60e:	4638      	mov	r0, r7
 801a610:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a612:	4f55      	ldr	r7, [pc, #340]	; (801a768 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801a614:	f7f4 fbbc 	bl	800ed90 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801a618:	4620      	mov	r0, r4
 801a61a:	2101      	movs	r1, #1
 801a61c:	f7f4 fa1c 	bl	800ea58 <Calculate_Tc>
 801a620:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a624:	4b51      	ldr	r3, [pc, #324]	; (801a76c <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a626:	ed9f 0a52 	vldr	s0, [pc, #328]	; 801a770 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801a62a:	ee17 2a90 	vmov	r2, s15
 801a62e:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 801a630:	a33d      	add	r3, pc, #244	; (adr r3, 801a728 <Calculate_SD_Data+0x158>)
 801a632:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a636:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a63a:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801a63c:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a640:	f7f9 f8e4 	bl	801380c <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 801a644:	f7f4 fde4 	bl	800f210 <Calculate_deltaEab>
 801a648:	4b4a      	ldr	r3, [pc, #296]	; (801a774 <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a64a:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 801a64c:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a64e:	4620      	mov	r0, r4
 801a650:	f7f3 ff84 	bl	800e55c <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a654:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a656:	4d48      	ldr	r5, [pc, #288]	; (801a778 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a658:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a65c:	f7f3 ff9e 	bl	800e59c <Calculate_EL_Day_Wt>
 801a660:	4b46      	ldr	r3, [pc, #280]	; (801a77c <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a662:	4629      	mov	r1, r5
 801a664:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a666:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a66a:	f7f3 ffdd 	bl	800e628 <Calculate_PPFD_PPL>
 801a66e:	4b44      	ldr	r3, [pc, #272]	; (801a780 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a670:	4629      	mov	r1, r5
 801a672:	4620      	mov	r0, r4
 801a674:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a676:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a67a:	f7f4 f841 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801a67e:	4b41      	ldr	r3, [pc, #260]	; (801a784 <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a680:	4629      	mov	r1, r5
 801a682:	4620      	mov	r0, r4
 801a684:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a686:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a68a:	f7f4 f839 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801a68e:	4b3e      	ldr	r3, [pc, #248]	; (801a788 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a690:	4629      	mov	r1, r5
 801a692:	4620      	mov	r0, r4
 801a694:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a696:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a69a:	f7f4 f831 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801a69e:	4b3b      	ldr	r3, [pc, #236]	; (801a78c <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801a6a0:	4629      	mov	r1, r5
 801a6a2:	4620      	mov	r0, r4
 801a6a4:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a6a6:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801a6aa:	f7f4 f829 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801a6ae:	4b38      	ldr	r3, [pc, #224]	; (801a790 <Calculate_SD_Data+0x1c0>)
 801a6b0:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 801a6b4:	a31e      	add	r3, pc, #120	; (adr r3, 801a730 <Calculate_SD_Data+0x160>)
 801a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a6ba:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801a794 <Calculate_SD_Data+0x1c4>
 801a6be:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a6c2:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 801a6c4:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a6c8:	f7f9 f8a0 	bl	801380c <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801a6cc:	4620      	mov	r0, r4
 801a6ce:	4932      	ldr	r1, [pc, #200]	; (801a798 <Calculate_SD_Data+0x1c8>)
 801a6d0:	f7f3 ff7c 	bl	800e5cc <Calculate_EL_Night>
 801a6d4:	4b31      	ldr	r3, [pc, #196]	; (801a79c <Calculate_SD_Data+0x1cc>)
 801a6d6:	eef0 0a40 	vmov.f32	s1, s0
 801a6da:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801a6de:	ed97 0a00 	vldr	s0, [r7]
 801a6e2:	f7f3 ff93 	bl	800e60c <Calculate_SP>
 801a6e6:	4b2e      	ldr	r3, [pc, #184]	; (801a7a0 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a6e8:	492e      	ldr	r1, [pc, #184]	; (801a7a4 <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801a6ea:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	f7f4 f890 	bl	800e814 <Calculate_ELr>
 801a6f4:	4b2c      	ldr	r3, [pc, #176]	; (801a7a8 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801a6f6:	492d      	ldr	r1, [pc, #180]	; (801a7ac <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a6f8:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801a6fc:	4620      	mov	r0, r4
 801a6fe:	f7f4 f86f 	bl	800e7e0 <Calculate_ELb>
 801a702:	4b2b      	ldr	r3, [pc, #172]	; (801a7b0 <Calculate_SD_Data+0x1e0>)
 801a704:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 801a708:	a30b      	add	r3, pc, #44	; (adr r3, 801a738 <Calculate_SD_Data+0x168>)
 801a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a70e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801a7b4 <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 801a712:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a716:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a71a:	2055      	movs	r0, #85	; 0x55
}
 801a71c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a720:	f7f9 b874 	b.w	801380c <GUI_Bar_Measure>
 801a724:	f3af 8000 	nop.w
 801a728:	9999999a 	.word	0x9999999a
 801a72c:	3fb99999 	.word	0x3fb99999
 801a730:	33333333 	.word	0x33333333
 801a734:	3fd33333 	.word	0x3fd33333
 801a738:	9999999a 	.word	0x9999999a
 801a73c:	3fd99999 	.word	0x3fd99999
 801a740:	2000c53c 	.word	0x2000c53c
 801a744:	20009760 	.word	0x20009760
 801a748:	20052940 	.word	0x20052940
 801a74c:	00000000 	.word	0x00000000
 801a750:	2008f522 	.word	0x2008f522
 801a754:	2008d514 	.word	0x2008d514
 801a758:	2008a514 	.word	0x2008a514
 801a75c:	2008f540 	.word	0x2008f540
 801a760:	20090ac1 	.word	0x20090ac1
 801a764:	20005704 	.word	0x20005704
 801a768:	20095d30 	.word	0x20095d30
 801a76c:	20054940 	.word	0x20054940
 801a770:	3dcccccd 	.word	0x3dcccccd
 801a774:	20090abe 	.word	0x20090abe
 801a778:	20054948 	.word	0x20054948
 801a77c:	20095720 	.word	0x20095720
 801a780:	20095728 	.word	0x20095728
 801a784:	2009580c 	.word	0x2009580c
 801a788:	20095b90 	.word	0x20095b90
 801a78c:	20095aa4 	.word	0x20095aa4
 801a790:	20095724 	.word	0x20095724
 801a794:	3e99999a 	.word	0x3e99999a
 801a798:	20053940 	.word	0x20053940
 801a79c:	20095714 	.word	0x20095714
 801a7a0:	20095808 	.word	0x20095808
 801a7a4:	2000ad38 	.word	0x2000ad38
 801a7a8:	20095ca4 	.word	0x20095ca4
 801a7ac:	20009d38 	.word	0x20009d38
 801a7b0:	20095ca0 	.word	0x20095ca0
 801a7b4:	3ecccccd 	.word	0x3ecccccd

0801a7b8 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 801a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7bc:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a7be:	4bb8      	ldr	r3, [pc, #736]	; (801aaa0 <SD_Witer+0x2e8>)
 801a7c0:	781b      	ldrb	r3, [r3, #0]
 801a7c2:	2b01      	cmp	r3, #1
{
 801a7c4:	b087      	sub	sp, #28
 801a7c6:	4605      	mov	r5, r0
 801a7c8:	460c      	mov	r4, r1
 801a7ca:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a7cc:	f000 85fe 	beq.w	801b3cc <SD_Witer+0xc14>
 801a7d0:	2b02      	cmp	r3, #2
 801a7d2:	f000 85fe 	beq.w	801b3d2 <SD_Witer+0xc1a>
 801a7d6:	2b04      	cmp	r3, #4
 801a7d8:	f000 85fe 	beq.w	801b3d8 <SD_Witer+0xc20>
 801a7dc:	2b08      	cmp	r3, #8
 801a7de:	f000 85fe 	beq.w	801b3de <SD_Witer+0xc26>
 801a7e2:	2b10      	cmp	r3, #16
 801a7e4:	f000 85fe 	beq.w	801b3e4 <SD_Witer+0xc2c>
 801a7e8:	4aae      	ldr	r2, [pc, #696]	; (801aaa4 <SD_Witer+0x2ec>)
 801a7ea:	49af      	ldr	r1, [pc, #700]	; (801aaa8 <SD_Witer+0x2f0>)
 801a7ec:	2b20      	cmp	r3, #32
 801a7ee:	bf18      	it	ne
 801a7f0:	4611      	movne	r1, r2
 801a7f2:	a802      	add	r0, sp, #8
 801a7f4:	f006 f8cf 	bl	8020996 <strcpy>
	
	memset(measure_buff, 0, 12);
 801a7f8:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 801a7fa:	462a      	mov	r2, r5
 801a7fc:	49ab      	ldr	r1, [pc, #684]	; (801aaac <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 801a7fe:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 801a800:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 801a802:	9304      	str	r3, [sp, #16]
 801a804:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 801a806:	f006 f885 	bl	8020914 <sprintf>
		strcat(buffer_sd, digit_buff);
 801a80a:	a901      	add	r1, sp, #4
 801a80c:	48a8      	ldr	r0, [pc, #672]	; (801aab0 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801a80e:	4da9      	ldr	r5, [pc, #676]	; (801aab4 <SD_Witer+0x2fc>)
 801a810:	4ea7      	ldr	r6, [pc, #668]	; (801aab0 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 801a812:	f006 f8a3 	bl	802095c <strcat>
		strcat(buffer_sd, ".txt");
 801a816:	49a8      	ldr	r1, [pc, #672]	; (801aab8 <SD_Witer+0x300>)
 801a818:	48a5      	ldr	r0, [pc, #660]	; (801aab0 <SD_Witer+0x2f8>)
 801a81a:	f006 f89f 	bl	802095c <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801a81e:	2201      	movs	r2, #1
 801a820:	49a6      	ldr	r1, [pc, #664]	; (801aabc <SD_Witer+0x304>)
 801a822:	48a7      	ldr	r0, [pc, #668]	; (801aac0 <SD_Witer+0x308>)
 801a824:	f7ef f8f4 	bl	8009a10 <f_mount>
 801a828:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 801a82a:	2800      	cmp	r0, #0
 801a82c:	f040 85b1 	bne.w	801b392 <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 801a830:	220a      	movs	r2, #10
 801a832:	4631      	mov	r1, r6
 801a834:	48a3      	ldr	r0, [pc, #652]	; (801aac4 <SD_Witer+0x30c>)
 801a836:	f7ef f91f 	bl	8009a78 <f_open>
 801a83a:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 801a83c:	2800      	cmp	r0, #0
 801a83e:	f040 85a8 	bne.w	801b392 <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 801a842:	4ba1      	ldr	r3, [pc, #644]	; (801aac8 <SD_Witer+0x310>)
 801a844:	49a1      	ldr	r1, [pc, #644]	; (801aacc <SD_Witer+0x314>)
 801a846:	2000      	movs	r0, #0
 801a848:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a84c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801a850:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a854:	2055      	movs	r0, #85	; 0x55
 801a856:	f7f8 ffd9 	bl	801380c <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801a85a:	4b9d      	ldr	r3, [pc, #628]	; (801aad0 <SD_Witer+0x318>)
 801a85c:	2c00      	cmp	r4, #0
 801a85e:	f040 85c4 	bne.w	801b3ea <SD_Witer+0xc32>
 801a862:	499c      	ldr	r1, [pc, #624]	; (801aad4 <SD_Witer+0x31c>)
 801a864:	2235      	movs	r2, #53	; 0x35
 801a866:	4897      	ldr	r0, [pc, #604]	; (801aac4 <SD_Witer+0x30c>)
 801a868:	f7ef fa1c 	bl	8009ca4 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 801a86c:	4b9a      	ldr	r3, [pc, #616]	; (801aad8 <SD_Witer+0x320>)
 801a86e:	6818      	ldr	r0, [r3, #0]
 801a870:	f7e5 fe82 	bl	8000578 <__aeabi_f2d>
 801a874:	4602      	mov	r2, r0
 801a876:	460b      	mov	r3, r1
 801a878:	a803      	add	r0, sp, #12
 801a87a:	4998      	ldr	r1, [pc, #608]	; (801aadc <SD_Witer+0x324>)
 801a87c:	f006 f84a 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a880:	220c      	movs	r2, #12
 801a882:	4b93      	ldr	r3, [pc, #588]	; (801aad0 <SD_Witer+0x318>)
 801a884:	488f      	ldr	r0, [pc, #572]	; (801aac4 <SD_Witer+0x30c>)
 801a886:	eb0d 0102 	add.w	r1, sp, r2
 801a88a:	f7ef fa0b 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801a88e:	2300      	movs	r3, #0
 801a890:	9303      	str	r3, [sp, #12]
 801a892:	9304      	str	r3, [sp, #16]
 801a894:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a896:	4b8e      	ldr	r3, [pc, #568]	; (801aad0 <SD_Witer+0x318>)
 801a898:	2c00      	cmp	r4, #0
 801a89a:	f040 85aa 	bne.w	801b3f2 <SD_Witer+0xc3a>
 801a89e:	4990      	ldr	r1, [pc, #576]	; (801aae0 <SD_Witer+0x328>)
 801a8a0:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801a8a2:	f8df 9264 	ldr.w	r9, [pc, #612]	; 801ab08 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a8a6:	4887      	ldr	r0, [pc, #540]	; (801aac4 <SD_Witer+0x30c>)
 801a8a8:	f7ef f9fc 	bl	8009ca4 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801a8ac:	f8b9 2000 	ldrh.w	r2, [r9]
 801a8b0:	498c      	ldr	r1, [pc, #560]	; (801aae4 <SD_Witer+0x32c>)
 801a8b2:	a803      	add	r0, sp, #12
 801a8b4:	f006 f82e 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a8b8:	220c      	movs	r2, #12
 801a8ba:	4b85      	ldr	r3, [pc, #532]	; (801aad0 <SD_Witer+0x318>)
 801a8bc:	4881      	ldr	r0, [pc, #516]	; (801aac4 <SD_Witer+0x30c>)
 801a8be:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801a8c2:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a8c4:	f7ef f9ee 	bl	8009ca4 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a8c8:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801a8cc:	4985      	ldr	r1, [pc, #532]	; (801aae4 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801a8ce:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a8d0:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a8d2:	9504      	str	r5, [sp, #16]
 801a8d4:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a8d6:	f006 f81d 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a8da:	220c      	movs	r2, #12
 801a8dc:	4b7c      	ldr	r3, [pc, #496]	; (801aad0 <SD_Witer+0x318>)
 801a8de:	4879      	ldr	r0, [pc, #484]	; (801aac4 <SD_Witer+0x30c>)
 801a8e0:	eb0d 0102 	add.w	r1, sp, r2
 801a8e4:	f7ef f9de 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a8e8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801a8ec:	497d      	ldr	r1, [pc, #500]	; (801aae4 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801a8ee:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a8f0:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a8f2:	9504      	str	r5, [sp, #16]
 801a8f4:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a8f6:	f006 f80d 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a8fa:	220c      	movs	r2, #12
 801a8fc:	4b74      	ldr	r3, [pc, #464]	; (801aad0 <SD_Witer+0x318>)
 801a8fe:	4871      	ldr	r0, [pc, #452]	; (801aac4 <SD_Witer+0x30c>)
 801a900:	eb0d 0102 	add.w	r1, sp, r2
 801a904:	f7ef f9ce 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801a908:	9503      	str	r5, [sp, #12]
 801a90a:	9504      	str	r5, [sp, #16]
 801a90c:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a90e:	4b70      	ldr	r3, [pc, #448]	; (801aad0 <SD_Witer+0x318>)
 801a910:	2c00      	cmp	r4, #0
 801a912:	f040 8572 	bne.w	801b3fa <SD_Witer+0xc42>
 801a916:	4974      	ldr	r1, [pc, #464]	; (801aae8 <SD_Witer+0x330>)
 801a918:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801a91a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801ab0c <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a91e:	4869      	ldr	r0, [pc, #420]	; (801aac4 <SD_Witer+0x30c>)
 801a920:	f7ef f9c0 	bl	8009ca4 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801a924:	f8d9 0000 	ldr.w	r0, [r9]
 801a928:	f7e5 fe26 	bl	8000578 <__aeabi_f2d>
 801a92c:	4602      	mov	r2, r0
 801a92e:	460b      	mov	r3, r1
 801a930:	a803      	add	r0, sp, #12
 801a932:	496e      	ldr	r1, [pc, #440]	; (801aaec <SD_Witer+0x334>)
 801a934:	f005 ffee 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a938:	220c      	movs	r2, #12
 801a93a:	4b65      	ldr	r3, [pc, #404]	; (801aad0 <SD_Witer+0x318>)
 801a93c:	4861      	ldr	r0, [pc, #388]	; (801aac4 <SD_Witer+0x30c>)
 801a93e:	eb0d 0102 	add.w	r1, sp, r2
 801a942:	f7ef f9af 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801a946:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801a948:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801a94c:	9503      	str	r5, [sp, #12]
 801a94e:	9504      	str	r5, [sp, #16]
 801a950:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801a952:	f7e5 fe11 	bl	8000578 <__aeabi_f2d>
 801a956:	4602      	mov	r2, r0
 801a958:	460b      	mov	r3, r1
 801a95a:	a803      	add	r0, sp, #12
 801a95c:	495f      	ldr	r1, [pc, #380]	; (801aadc <SD_Witer+0x324>)
 801a95e:	f005 ffd9 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a962:	220c      	movs	r2, #12
 801a964:	4b5a      	ldr	r3, [pc, #360]	; (801aad0 <SD_Witer+0x318>)
 801a966:	4857      	ldr	r0, [pc, #348]	; (801aac4 <SD_Witer+0x30c>)
 801a968:	eb0d 0102 	add.w	r1, sp, r2
 801a96c:	f7ef f99a 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801a970:	9503      	str	r5, [sp, #12]
 801a972:	9504      	str	r5, [sp, #16]
 801a974:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a976:	4b56      	ldr	r3, [pc, #344]	; (801aad0 <SD_Witer+0x318>)
 801a978:	2c00      	cmp	r4, #0
 801a97a:	f040 8542 	bne.w	801b402 <SD_Witer+0xc4a>
 801a97e:	495c      	ldr	r1, [pc, #368]	; (801aaf0 <SD_Witer+0x338>)
 801a980:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801a982:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801ab10 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a986:	484f      	ldr	r0, [pc, #316]	; (801aac4 <SD_Witer+0x30c>)
 801a988:	f7ef f98c 	bl	8009ca4 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801a98c:	f8d9 0000 	ldr.w	r0, [r9]
 801a990:	f7e5 fdf2 	bl	8000578 <__aeabi_f2d>
 801a994:	4602      	mov	r2, r0
 801a996:	460b      	mov	r3, r1
 801a998:	a803      	add	r0, sp, #12
 801a99a:	4954      	ldr	r1, [pc, #336]	; (801aaec <SD_Witer+0x334>)
 801a99c:	f005 ffba 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9a0:	220c      	movs	r2, #12
 801a9a2:	4b4b      	ldr	r3, [pc, #300]	; (801aad0 <SD_Witer+0x318>)
 801a9a4:	4847      	ldr	r0, [pc, #284]	; (801aac4 <SD_Witer+0x30c>)
 801a9a6:	eb0d 0102 	add.w	r1, sp, r2
 801a9aa:	f7ef f97b 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801a9ae:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801a9b0:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801a9b4:	9503      	str	r5, [sp, #12]
 801a9b6:	9504      	str	r5, [sp, #16]
 801a9b8:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801a9ba:	f7e5 fddd 	bl	8000578 <__aeabi_f2d>
 801a9be:	4602      	mov	r2, r0
 801a9c0:	460b      	mov	r3, r1
 801a9c2:	a803      	add	r0, sp, #12
 801a9c4:	4945      	ldr	r1, [pc, #276]	; (801aadc <SD_Witer+0x324>)
 801a9c6:	f005 ffa5 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9ca:	220c      	movs	r2, #12
 801a9cc:	4b40      	ldr	r3, [pc, #256]	; (801aad0 <SD_Witer+0x318>)
 801a9ce:	483d      	ldr	r0, [pc, #244]	; (801aac4 <SD_Witer+0x30c>)
 801a9d0:	eb0d 0102 	add.w	r1, sp, r2
 801a9d4:	f7ef f966 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801a9d8:	9503      	str	r5, [sp, #12]
 801a9da:	9504      	str	r5, [sp, #16]
 801a9dc:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801a9de:	4b3c      	ldr	r3, [pc, #240]	; (801aad0 <SD_Witer+0x318>)
 801a9e0:	2c00      	cmp	r4, #0
 801a9e2:	f040 8512 	bne.w	801b40a <SD_Witer+0xc52>
 801a9e6:	4943      	ldr	r1, [pc, #268]	; (801aaf4 <SD_Witer+0x33c>)
 801a9e8:	220e      	movs	r2, #14
 801a9ea:	4836      	ldr	r0, [pc, #216]	; (801aac4 <SD_Witer+0x30c>)
 801a9ec:	f7ef f95a 	bl	8009ca4 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 801a9f0:	4b41      	ldr	r3, [pc, #260]	; (801aaf8 <SD_Witer+0x340>)
 801a9f2:	881a      	ldrh	r2, [r3, #0]
 801a9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	f040 8537 	bne.w	801b46c <SD_Witer+0xcb4>
 801a9fe:	4b34      	ldr	r3, [pc, #208]	; (801aad0 <SD_Witer+0x318>)
 801aa00:	4928      	ldr	r1, [pc, #160]	; (801aaa4 <SD_Witer+0x2ec>)
 801aa02:	4830      	ldr	r0, [pc, #192]	; (801aac4 <SD_Witer+0x30c>)
 801aa04:	2203      	movs	r2, #3
 801aa06:	f7ef f94d 	bl	8009ca4 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 801aa0a:	a123      	add	r1, pc, #140	; (adr r1, 801aa98 <SD_Witer+0x2e0>)
 801aa0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa10:	4b2d      	ldr	r3, [pc, #180]	; (801aac8 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801aa12:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801aafc <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 801aa16:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801aa1a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801aa1e:	2055      	movs	r0, #85	; 0x55
 801aa20:	f7f8 fef4 	bl	801380c <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801aa24:	4b2a      	ldr	r3, [pc, #168]	; (801aad0 <SD_Witer+0x318>)
 801aa26:	2c00      	cmp	r4, #0
 801aa28:	f040 8531 	bne.w	801b48e <SD_Witer+0xcd6>
 801aa2c:	4934      	ldr	r1, [pc, #208]	; (801ab00 <SD_Witer+0x348>)
 801aa2e:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801aa30:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 801ab14 <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801aa34:	4823      	ldr	r0, [pc, #140]	; (801aac4 <SD_Witer+0x30c>)
 801aa36:	f7ef f935 	bl	8009ca4 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801aa3a:	f9b9 2000 	ldrsh.w	r2, [r9]
 801aa3e:	4931      	ldr	r1, [pc, #196]	; (801ab04 <SD_Witer+0x34c>)
 801aa40:	a803      	add	r0, sp, #12
 801aa42:	f005 ff67 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa46:	220c      	movs	r2, #12
 801aa48:	4b21      	ldr	r3, [pc, #132]	; (801aad0 <SD_Witer+0x318>)
 801aa4a:	481e      	ldr	r0, [pc, #120]	; (801aac4 <SD_Witer+0x30c>)
 801aa4c:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801aa50:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa52:	f7ef f927 	bl	8009ca4 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801aa56:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 801aa5a:	492a      	ldr	r1, [pc, #168]	; (801ab04 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801aa5c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801aa5e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801aa60:	9504      	str	r5, [sp, #16]
 801aa62:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801aa64:	f005 ff56 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa68:	220c      	movs	r2, #12
 801aa6a:	4b19      	ldr	r3, [pc, #100]	; (801aad0 <SD_Witer+0x318>)
 801aa6c:	4815      	ldr	r0, [pc, #84]	; (801aac4 <SD_Witer+0x30c>)
 801aa6e:	eb0d 0102 	add.w	r1, sp, r2
 801aa72:	f7ef f917 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801aa76:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801aa7a:	4922      	ldr	r1, [pc, #136]	; (801ab04 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801aa7c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801aa7e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801aa80:	9504      	str	r5, [sp, #16]
 801aa82:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801aa84:	f005 ff46 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa88:	220c      	movs	r2, #12
 801aa8a:	4b11      	ldr	r3, [pc, #68]	; (801aad0 <SD_Witer+0x318>)
 801aa8c:	480d      	ldr	r0, [pc, #52]	; (801aac4 <SD_Witer+0x30c>)
 801aa8e:	eb0d 0102 	add.w	r1, sp, r2
 801aa92:	f7ef f907 	bl	8009ca4 <f_write>
 801aa96:	e03f      	b.n	801ab18 <SD_Witer+0x360>
 801aa98:	66666666 	.word	0x66666666
 801aa9c:	3fe66666 	.word	0x3fe66666
 801aaa0:	20090ac1 	.word	0x20090ac1
 801aaa4:	08032413 	.word	0x08032413
 801aaa8:	08032417 	.word	0x08032417
 801aaac:	0803241b 	.word	0x0803241b
 801aab0:	2009263c 	.word	0x2009263c
 801aab4:	20093688 	.word	0x20093688
 801aab8:	08032420 	.word	0x08032420
 801aabc:	2009368d 	.word	0x2009368d
 801aac0:	20091608 	.word	0x20091608
 801aac4:	20092658 	.word	0x20092658
 801aac8:	20009760 	.word	0x20009760
 801aacc:	3fe00000 	.word	0x3fe00000
 801aad0:	20091600 	.word	0x20091600
 801aad4:	20000929 	.word	0x20000929
 801aad8:	20095808 	.word	0x20095808
 801aadc:	080323ef 	.word	0x080323ef
 801aae0:	20000442 	.word	0x20000442
 801aae4:	08032446 	.word	0x08032446
 801aae8:	200004be 	.word	0x200004be
 801aaec:	08032425 	.word	0x08032425
 801aaf0:	2000047c 	.word	0x2000047c
 801aaf4:	20000250 	.word	0x20000250
 801aaf8:	20054940 	.word	0x20054940
 801aafc:	3f333333 	.word	0x3f333333
 801ab00:	20000614 	.word	0x20000614
 801ab04:	0803242f 	.word	0x0803242f
 801ab08:	2008f522 	.word	0x2008f522
 801ab0c:	2008f540 	.word	0x2008f540
 801ab10:	2008f538 	.word	0x2008f538
 801ab14:	2008f51c 	.word	0x2008f51c
							memset(measure_buff, 0, 12);
 801ab18:	9503      	str	r5, [sp, #12]
 801ab1a:	9504      	str	r5, [sp, #16]
 801ab1c:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801ab1e:	4bb4      	ldr	r3, [pc, #720]	; (801adf0 <SD_Witer+0x638>)
 801ab20:	2c00      	cmp	r4, #0
 801ab22:	f040 84b8 	bne.w	801b496 <SD_Witer+0xcde>
 801ab26:	49b3      	ldr	r1, [pc, #716]	; (801adf4 <SD_Witer+0x63c>)
 801ab28:	222a      	movs	r2, #42	; 0x2a
 801ab2a:	48b3      	ldr	r0, [pc, #716]	; (801adf8 <SD_Witer+0x640>)
 801ab2c:	f7ef f8ba 	bl	8009ca4 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 801ab30:	4baf      	ldr	r3, [pc, #700]	; (801adf0 <SD_Witer+0x638>)
 801ab32:	48b1      	ldr	r0, [pc, #708]	; (801adf8 <SD_Witer+0x640>)
 801ab34:	2204      	movs	r2, #4
 801ab36:	a902      	add	r1, sp, #8
 801ab38:	f7ef f8b4 	bl	8009ca4 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801ab3c:	4bac      	ldr	r3, [pc, #688]	; (801adf0 <SD_Witer+0x638>)
 801ab3e:	2c00      	cmp	r4, #0
 801ab40:	f040 84ad 	bne.w	801b49e <SD_Witer+0xce6>
 801ab44:	49ad      	ldr	r1, [pc, #692]	; (801adfc <SD_Witer+0x644>)
 801ab46:	2235      	movs	r2, #53	; 0x35
 801ab48:	48ab      	ldr	r0, [pc, #684]	; (801adf8 <SD_Witer+0x640>)
 801ab4a:	f7ef f8ab 	bl	8009ca4 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 801ab4e:	4bac      	ldr	r3, [pc, #688]	; (801ae00 <SD_Witer+0x648>)
 801ab50:	49ac      	ldr	r1, [pc, #688]	; (801ae04 <SD_Witer+0x64c>)
 801ab52:	881a      	ldrh	r2, [r3, #0]
 801ab54:	a803      	add	r0, sp, #12
 801ab56:	f005 fedd 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab5a:	220c      	movs	r2, #12
 801ab5c:	4ba4      	ldr	r3, [pc, #656]	; (801adf0 <SD_Witer+0x638>)
 801ab5e:	48a6      	ldr	r0, [pc, #664]	; (801adf8 <SD_Witer+0x640>)
 801ab60:	eb0d 0102 	add.w	r1, sp, r2
 801ab64:	f7ef f89e 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801ab68:	2300      	movs	r3, #0
 801ab6a:	9303      	str	r3, [sp, #12]
 801ab6c:	9304      	str	r3, [sp, #16]
 801ab6e:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801ab70:	4b9f      	ldr	r3, [pc, #636]	; (801adf0 <SD_Witer+0x638>)
 801ab72:	2c00      	cmp	r4, #0
 801ab74:	f040 8497 	bne.w	801b4a6 <SD_Witer+0xcee>
 801ab78:	49a3      	ldr	r1, [pc, #652]	; (801ae08 <SD_Witer+0x650>)
 801ab7a:	223b      	movs	r2, #59	; 0x3b
 801ab7c:	489e      	ldr	r0, [pc, #632]	; (801adf8 <SD_Witer+0x640>)
 801ab7e:	f7ef f891 	bl	8009ca4 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 801ab82:	4ba2      	ldr	r3, [pc, #648]	; (801ae0c <SD_Witer+0x654>)
 801ab84:	499f      	ldr	r1, [pc, #636]	; (801ae04 <SD_Witer+0x64c>)
 801ab86:	881a      	ldrh	r2, [r3, #0]
 801ab88:	a803      	add	r0, sp, #12
 801ab8a:	f005 fec3 	bl	8020914 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab8e:	220c      	movs	r2, #12
 801ab90:	4b97      	ldr	r3, [pc, #604]	; (801adf0 <SD_Witer+0x638>)
 801ab92:	4899      	ldr	r0, [pc, #612]	; (801adf8 <SD_Witer+0x640>)
 801ab94:	eb0d 0102 	add.w	r1, sp, r2
 801ab98:	f7ef f884 	bl	8009ca4 <f_write>
							memset(measure_buff, 0, 12);
 801ab9c:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 801ab9e:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 801aba2:	9303      	str	r3, [sp, #12]
 801aba4:	9304      	str	r3, [sp, #16]
 801aba6:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801aba8:	4b91      	ldr	r3, [pc, #580]	; (801adf0 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 801abaa:	f040 8484 	bne.w	801b4b6 <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801abae:	2c00      	cmp	r4, #0
 801abb0:	f040 847d 	bne.w	801b4ae <SD_Witer+0xcf6>
 801abb4:	4996      	ldr	r1, [pc, #600]	; (801ae10 <SD_Witer+0x658>)
 801abb6:	2224      	movs	r2, #36	; 0x24
 801abb8:	488f      	ldr	r0, [pc, #572]	; (801adf8 <SD_Witer+0x640>)
 801abba:	f7ef f873 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 801abbe:	4b95      	ldr	r3, [pc, #596]	; (801ae14 <SD_Witer+0x65c>)
 801abc0:	4990      	ldr	r1, [pc, #576]	; (801ae04 <SD_Witer+0x64c>)
 801abc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abc6:	a803      	add	r0, sp, #12
 801abc8:	f005 fea4 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801abcc:	220c      	movs	r2, #12
 801abce:	4b88      	ldr	r3, [pc, #544]	; (801adf0 <SD_Witer+0x638>)
 801abd0:	4889      	ldr	r0, [pc, #548]	; (801adf8 <SD_Witer+0x640>)
 801abd2:	eb0d 0102 	add.w	r1, sp, r2
 801abd6:	f7ef f865 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801abda:	2300      	movs	r3, #0
 801abdc:	9303      	str	r3, [sp, #12]
 801abde:	9304      	str	r3, [sp, #16]
 801abe0:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 801abe2:	a181      	add	r1, pc, #516	; (adr r1, 801ade8 <SD_Witer+0x630>)
 801abe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abe8:	4b8b      	ldr	r3, [pc, #556]	; (801ae18 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801abea:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801ae1c <SD_Witer+0x664>
 801abee:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801ae68 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 801abf2:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801abf6:	f44f 718c 	mov.w	r1, #280	; 0x118
 801abfa:	2055      	movs	r0, #85	; 0x55
 801abfc:	f7f8 fe06 	bl	801380c <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 801ac00:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801ac02:	4b7b      	ldr	r3, [pc, #492]	; (801adf0 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 801ac04:	f040 847d 	bne.w	801b502 <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801ac08:	2c00      	cmp	r4, #0
 801ac0a:	f040 8465 	bne.w	801b4d8 <SD_Witer+0xd20>
 801ac0e:	4984      	ldr	r1, [pc, #528]	; (801ae20 <SD_Witer+0x668>)
 801ac10:	2263      	movs	r2, #99	; 0x63
 801ac12:	4879      	ldr	r0, [pc, #484]	; (801adf8 <SD_Witer+0x640>)
 801ac14:	4f83      	ldr	r7, [pc, #524]	; (801ae24 <SD_Witer+0x66c>)
 801ac16:	f8df b254 	ldr.w	fp, [pc, #596]	; 801ae6c <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac1a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801adf0 <SD_Witer+0x638>
 801ac1e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801adf8 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801ac22:	f7ef f83f 	bl	8009ca4 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 801ac26:	f857 0b04 	ldr.w	r0, [r7], #4
 801ac2a:	f7e5 fca5 	bl	8000578 <__aeabi_f2d>
 801ac2e:	4602      	mov	r2, r0
 801ac30:	460b      	mov	r3, r1
 801ac32:	a803      	add	r0, sp, #12
 801ac34:	497c      	ldr	r1, [pc, #496]	; (801ae28 <SD_Witer+0x670>)
 801ac36:	f005 fe6d 	bl	8020914 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac3a:	220c      	movs	r2, #12
 801ac3c:	4653      	mov	r3, sl
 801ac3e:	eb0d 0102 	add.w	r1, sp, r2
 801ac42:	4648      	mov	r0, r9
 801ac44:	f7ef f82e 	bl	8009ca4 <f_write>
									memset(measure_buff, 0, 12);
 801ac48:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801ac4a:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801ac4e:	9503      	str	r5, [sp, #12]
 801ac50:	9504      	str	r5, [sp, #16]
 801ac52:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801ac54:	f7e5 fc90 	bl	8000578 <__aeabi_f2d>
 801ac58:	4602      	mov	r2, r0
 801ac5a:	460b      	mov	r3, r1
 801ac5c:	a803      	add	r0, sp, #12
 801ac5e:	4973      	ldr	r1, [pc, #460]	; (801ae2c <SD_Witer+0x674>)
 801ac60:	f005 fe58 	bl	8020914 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac64:	220c      	movs	r2, #12
 801ac66:	4653      	mov	r3, sl
 801ac68:	eb0d 0102 	add.w	r1, sp, r2
 801ac6c:	4648      	mov	r0, r9
 801ac6e:	f7ef f819 	bl	8009ca4 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801ac72:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801ac74:	9503      	str	r5, [sp, #12]
 801ac76:	9504      	str	r5, [sp, #16]
 801ac78:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801ac7a:	d1d4      	bne.n	801ac26 <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801ac7c:	4b5c      	ldr	r3, [pc, #368]	; (801adf0 <SD_Witer+0x638>)
 801ac7e:	2c00      	cmp	r4, #0
 801ac80:	f040 842e 	bne.w	801b4e0 <SD_Witer+0xd28>
 801ac84:	496a      	ldr	r1, [pc, #424]	; (801ae30 <SD_Witer+0x678>)
 801ac86:	2224      	movs	r2, #36	; 0x24
 801ac88:	485b      	ldr	r0, [pc, #364]	; (801adf8 <SD_Witer+0x640>)
 801ac8a:	f7ef f80b 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 801ac8e:	4b69      	ldr	r3, [pc, #420]	; (801ae34 <SD_Witer+0x67c>)
 801ac90:	6818      	ldr	r0, [r3, #0]
 801ac92:	f7e5 fc71 	bl	8000578 <__aeabi_f2d>
 801ac96:	4602      	mov	r2, r0
 801ac98:	460b      	mov	r3, r1
 801ac9a:	a803      	add	r0, sp, #12
 801ac9c:	4966      	ldr	r1, [pc, #408]	; (801ae38 <SD_Witer+0x680>)
 801ac9e:	f005 fe39 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aca2:	220c      	movs	r2, #12
 801aca4:	4b52      	ldr	r3, [pc, #328]	; (801adf0 <SD_Witer+0x638>)
 801aca6:	4854      	ldr	r0, [pc, #336]	; (801adf8 <SD_Witer+0x640>)
 801aca8:	eb0d 0102 	add.w	r1, sp, r2
 801acac:	f7ee fffa 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801acb0:	2300      	movs	r3, #0
 801acb2:	9303      	str	r3, [sp, #12]
 801acb4:	9304      	str	r3, [sp, #16]
 801acb6:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801acb8:	4b4d      	ldr	r3, [pc, #308]	; (801adf0 <SD_Witer+0x638>)
 801acba:	2c00      	cmp	r4, #0
 801acbc:	f040 8414 	bne.w	801b4e8 <SD_Witer+0xd30>
 801acc0:	495e      	ldr	r1, [pc, #376]	; (801ae3c <SD_Witer+0x684>)
 801acc2:	2221      	movs	r2, #33	; 0x21
 801acc4:	484c      	ldr	r0, [pc, #304]	; (801adf8 <SD_Witer+0x640>)
 801acc6:	f7ee ffed 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 801acca:	4b5d      	ldr	r3, [pc, #372]	; (801ae40 <SD_Witer+0x688>)
 801accc:	6818      	ldr	r0, [r3, #0]
 801acce:	f7e5 fc53 	bl	8000578 <__aeabi_f2d>
 801acd2:	4602      	mov	r2, r0
 801acd4:	460b      	mov	r3, r1
 801acd6:	a803      	add	r0, sp, #12
 801acd8:	495a      	ldr	r1, [pc, #360]	; (801ae44 <SD_Witer+0x68c>)
 801acda:	f005 fe1b 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801acde:	220c      	movs	r2, #12
 801ace0:	4b43      	ldr	r3, [pc, #268]	; (801adf0 <SD_Witer+0x638>)
 801ace2:	4845      	ldr	r0, [pc, #276]	; (801adf8 <SD_Witer+0x640>)
 801ace4:	eb0d 0102 	add.w	r1, sp, r2
 801ace8:	f7ee ffdc 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801acec:	2300      	movs	r3, #0
 801acee:	9303      	str	r3, [sp, #12]
 801acf0:	9304      	str	r3, [sp, #16]
 801acf2:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801acf4:	4b3e      	ldr	r3, [pc, #248]	; (801adf0 <SD_Witer+0x638>)
 801acf6:	2c00      	cmp	r4, #0
 801acf8:	f040 83fa 	bne.w	801b4f0 <SD_Witer+0xd38>
 801acfc:	4952      	ldr	r1, [pc, #328]	; (801ae48 <SD_Witer+0x690>)
 801acfe:	2223      	movs	r2, #35	; 0x23
 801ad00:	483d      	ldr	r0, [pc, #244]	; (801adf8 <SD_Witer+0x640>)
 801ad02:	f7ee ffcf 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 801ad06:	4b51      	ldr	r3, [pc, #324]	; (801ae4c <SD_Witer+0x694>)
 801ad08:	6818      	ldr	r0, [r3, #0]
 801ad0a:	f7e5 fc35 	bl	8000578 <__aeabi_f2d>
 801ad0e:	4602      	mov	r2, r0
 801ad10:	460b      	mov	r3, r1
 801ad12:	a803      	add	r0, sp, #12
 801ad14:	4948      	ldr	r1, [pc, #288]	; (801ae38 <SD_Witer+0x680>)
 801ad16:	f005 fdfd 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad1a:	220c      	movs	r2, #12
 801ad1c:	4b34      	ldr	r3, [pc, #208]	; (801adf0 <SD_Witer+0x638>)
 801ad1e:	4836      	ldr	r0, [pc, #216]	; (801adf8 <SD_Witer+0x640>)
 801ad20:	eb0d 0102 	add.w	r1, sp, r2
 801ad24:	f7ee ffbe 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801ad28:	2300      	movs	r3, #0
 801ad2a:	9303      	str	r3, [sp, #12]
 801ad2c:	9304      	str	r3, [sp, #16]
 801ad2e:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801ad30:	4b2f      	ldr	r3, [pc, #188]	; (801adf0 <SD_Witer+0x638>)
 801ad32:	2c00      	cmp	r4, #0
 801ad34:	f040 83df 	bne.w	801b4f6 <SD_Witer+0xd3e>
 801ad38:	4945      	ldr	r1, [pc, #276]	; (801ae50 <SD_Witer+0x698>)
 801ad3a:	2239      	movs	r2, #57	; 0x39
 801ad3c:	482e      	ldr	r0, [pc, #184]	; (801adf8 <SD_Witer+0x640>)
 801ad3e:	f7ee ffb1 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801ad42:	4b44      	ldr	r3, [pc, #272]	; (801ae54 <SD_Witer+0x69c>)
 801ad44:	6818      	ldr	r0, [r3, #0]
 801ad46:	f7e5 fc17 	bl	8000578 <__aeabi_f2d>
 801ad4a:	4602      	mov	r2, r0
 801ad4c:	460b      	mov	r3, r1
 801ad4e:	a803      	add	r0, sp, #12
 801ad50:	4941      	ldr	r1, [pc, #260]	; (801ae58 <SD_Witer+0x6a0>)
 801ad52:	f005 fddf 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad56:	220c      	movs	r2, #12
 801ad58:	eb0d 0102 	add.w	r1, sp, r2
 801ad5c:	4b24      	ldr	r3, [pc, #144]	; (801adf0 <SD_Witer+0x638>)
 801ad5e:	4826      	ldr	r0, [pc, #152]	; (801adf8 <SD_Witer+0x640>)
 801ad60:	f7ee ffa0 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ad64:	4b3d      	ldr	r3, [pc, #244]	; (801ae5c <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801ad66:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ad68:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ad6a:	9503      	str	r5, [sp, #12]
 801ad6c:	9504      	str	r5, [sp, #16]
 801ad6e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ad70:	f7e5 fc02 	bl	8000578 <__aeabi_f2d>
 801ad74:	4602      	mov	r2, r0
 801ad76:	460b      	mov	r3, r1
 801ad78:	a803      	add	r0, sp, #12
 801ad7a:	4937      	ldr	r1, [pc, #220]	; (801ae58 <SD_Witer+0x6a0>)
 801ad7c:	f005 fdca 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad80:	220c      	movs	r2, #12
 801ad82:	eb0d 0102 	add.w	r1, sp, r2
 801ad86:	4b1a      	ldr	r3, [pc, #104]	; (801adf0 <SD_Witer+0x638>)
 801ad88:	481b      	ldr	r0, [pc, #108]	; (801adf8 <SD_Witer+0x640>)
 801ad8a:	f7ee ff8b 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801ad8e:	4b34      	ldr	r3, [pc, #208]	; (801ae60 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801ad90:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801ad92:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ad94:	9504      	str	r5, [sp, #16]
 801ad96:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801ad98:	f7e5 fbee 	bl	8000578 <__aeabi_f2d>
 801ad9c:	4602      	mov	r2, r0
 801ad9e:	460b      	mov	r3, r1
 801ada0:	a803      	add	r0, sp, #12
 801ada2:	492d      	ldr	r1, [pc, #180]	; (801ae58 <SD_Witer+0x6a0>)
 801ada4:	f005 fdb6 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ada8:	220c      	movs	r2, #12
 801adaa:	eb0d 0102 	add.w	r1, sp, r2
 801adae:	4b10      	ldr	r3, [pc, #64]	; (801adf0 <SD_Witer+0x638>)
 801adb0:	4811      	ldr	r0, [pc, #68]	; (801adf8 <SD_Witer+0x640>)
 801adb2:	f7ee ff77 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801adb6:	4b2b      	ldr	r3, [pc, #172]	; (801ae64 <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801adb8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801adba:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801adbc:	9504      	str	r5, [sp, #16]
 801adbe:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801adc0:	f7e5 fbda 	bl	8000578 <__aeabi_f2d>
 801adc4:	4602      	mov	r2, r0
 801adc6:	460b      	mov	r3, r1
 801adc8:	a803      	add	r0, sp, #12
 801adca:	4923      	ldr	r1, [pc, #140]	; (801ae58 <SD_Witer+0x6a0>)
 801adcc:	f005 fda2 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801add0:	220c      	movs	r2, #12
 801add2:	4b07      	ldr	r3, [pc, #28]	; (801adf0 <SD_Witer+0x638>)
 801add4:	4808      	ldr	r0, [pc, #32]	; (801adf8 <SD_Witer+0x640>)
 801add6:	eb0d 0102 	add.w	r1, sp, r2
 801adda:	f7ee ff63 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801adde:	9503      	str	r5, [sp, #12]
 801ade0:	9504      	str	r5, [sp, #16]
 801ade2:	9505      	str	r5, [sp, #20]
 801ade4:	e044      	b.n	801ae70 <SD_Witer+0x6b8>
 801ade6:	bf00      	nop
 801ade8:	9999999a 	.word	0x9999999a
 801adec:	3fe99999 	.word	0x3fe99999
 801adf0:	20091600 	.word	0x20091600
 801adf4:	200008e1 	.word	0x200008e1
 801adf8:	20092658 	.word	0x20092658
 801adfc:	20000a09 	.word	0x20000a09
 801ae00:	20095b8c 	.word	0x20095b8c
 801ae04:	08032446 	.word	0x08032446
 801ae08:	200009b4 	.word	0x200009b4
 801ae0c:	20095a24 	.word	0x20095a24
 801ae10:	20000971 	.word	0x20000971
 801ae14:	20090abe 	.word	0x20090abe
 801ae18:	20009760 	.word	0x20009760
 801ae1c:	3f4ccccd 	.word	0x3f4ccccd
 801ae20:	20000569 	.word	0x20000569
 801ae24:	2000c53c 	.word	0x2000c53c
 801ae28:	08032433 	.word	0x08032433
 801ae2c:	08032438 	.word	0x08032438
 801ae30:	20000520 	.word	0x20000520
 801ae34:	20095d30 	.word	0x20095d30
 801ae38:	080323ea 	.word	0x080323ea
 801ae3c:	200005de 	.word	0x200005de
 801ae40:	20095720 	.word	0x20095720
 801ae44:	080323e5 	.word	0x080323e5
 801ae48:	20000812 	.word	0x20000812
 801ae4c:	20095728 	.word	0x20095728
 801ae50:	200007c6 	.word	0x200007c6
 801ae54:	2009580c 	.word	0x2009580c
 801ae58:	0803243f 	.word	0x0803243f
 801ae5c:	20095b90 	.word	0x20095b90
 801ae60:	20095aa4 	.word	0x20095aa4
 801ae64:	20095724 	.word	0x20095724
 801ae68:	2000d53c 	.word	0x2000d53c
 801ae6c:	20054948 	.word	0x20054948
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801ae70:	4baf      	ldr	r3, [pc, #700]	; (801b130 <SD_Witer+0x978>)
 801ae72:	2c00      	cmp	r4, #0
 801ae74:	f040 8342 	bne.w	801b4fc <SD_Witer+0xd44>
 801ae78:	49ae      	ldr	r1, [pc, #696]	; (801b134 <SD_Witer+0x97c>)
 801ae7a:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801ae7c:	48ae      	ldr	r0, [pc, #696]	; (801b138 <SD_Witer+0x980>)
 801ae7e:	f7ee ff11 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801ae82:	4bae      	ldr	r3, [pc, #696]	; (801b13c <SD_Witer+0x984>)
 801ae84:	6818      	ldr	r0, [r3, #0]
 801ae86:	f7e5 fb77 	bl	8000578 <__aeabi_f2d>
 801ae8a:	4602      	mov	r2, r0
 801ae8c:	460b      	mov	r3, r1
 801ae8e:	a803      	add	r0, sp, #12
 801ae90:	49ab      	ldr	r1, [pc, #684]	; (801b140 <SD_Witer+0x988>)
 801ae92:	f005 fd3f 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ae96:	220c      	movs	r2, #12
 801ae98:	eb0d 0102 	add.w	r1, sp, r2
 801ae9c:	4ba4      	ldr	r3, [pc, #656]	; (801b130 <SD_Witer+0x978>)
 801ae9e:	48a6      	ldr	r0, [pc, #664]	; (801b138 <SD_Witer+0x980>)
 801aea0:	f7ee ff00 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801aea4:	4ba7      	ldr	r3, [pc, #668]	; (801b144 <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801aea6:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801aea8:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801aeaa:	9503      	str	r5, [sp, #12]
 801aeac:	9504      	str	r5, [sp, #16]
 801aeae:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801aeb0:	f7e5 fb62 	bl	8000578 <__aeabi_f2d>
 801aeb4:	4602      	mov	r2, r0
 801aeb6:	460b      	mov	r3, r1
 801aeb8:	a803      	add	r0, sp, #12
 801aeba:	49a3      	ldr	r1, [pc, #652]	; (801b148 <SD_Witer+0x990>)
 801aebc:	f005 fd2a 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aec0:	220c      	movs	r2, #12
 801aec2:	eb0d 0102 	add.w	r1, sp, r2
 801aec6:	4b9a      	ldr	r3, [pc, #616]	; (801b130 <SD_Witer+0x978>)
 801aec8:	489b      	ldr	r0, [pc, #620]	; (801b138 <SD_Witer+0x980>)
 801aeca:	f7ee feeb 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801aece:	a196      	add	r1, pc, #600	; (adr r1, 801b128 <SD_Witer+0x970>)
 801aed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aed4:	4b9d      	ldr	r3, [pc, #628]	; (801b14c <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801aed6:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801b150 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801aeda:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801aedc:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801aee0:	f44f 718c 	mov.w	r1, #280	; 0x118
 801aee4:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801aee6:	9504      	str	r5, [sp, #16]
 801aee8:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801aeea:	f7f8 fc8f 	bl	801380c <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801aeee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801aef2:	2b01      	cmp	r3, #1
 801aef4:	f040 824d 	bne.w	801b392 <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801aef8:	4b8d      	ldr	r3, [pc, #564]	; (801b130 <SD_Witer+0x978>)
 801aefa:	2c00      	cmp	r4, #0
 801aefc:	f040 8407 	bne.w	801b70e <SD_Witer+0xf56>
 801af00:	4994      	ldr	r1, [pc, #592]	; (801b154 <SD_Witer+0x99c>)
 801af02:	227d      	movs	r2, #125	; 0x7d
 801af04:	488c      	ldr	r0, [pc, #560]	; (801b138 <SD_Witer+0x980>)
 801af06:	f7ee fecd 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801af0a:	2297      	movs	r2, #151	; 0x97
 801af0c:	4992      	ldr	r1, [pc, #584]	; (801b158 <SD_Witer+0x9a0>)
 801af0e:	a803      	add	r0, sp, #12
 801af10:	f005 fd00 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af14:	220c      	movs	r2, #12
 801af16:	4b86      	ldr	r3, [pc, #536]	; (801b130 <SD_Witer+0x978>)
 801af18:	4887      	ldr	r0, [pc, #540]	; (801b138 <SD_Witer+0x980>)
 801af1a:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801af1e:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af20:	f7ee fec0 	bl	8009ca4 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801af24:	22e7      	movs	r2, #231	; 0xe7
 801af26:	498d      	ldr	r1, [pc, #564]	; (801b15c <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801af28:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801af2a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801af2c:	9504      	str	r5, [sp, #16]
 801af2e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801af30:	f005 fcf0 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af34:	220c      	movs	r2, #12
 801af36:	4b7e      	ldr	r3, [pc, #504]	; (801b130 <SD_Witer+0x978>)
 801af38:	487f      	ldr	r0, [pc, #508]	; (801b138 <SD_Witer+0x980>)
 801af3a:	eb0d 0102 	add.w	r1, sp, r2
 801af3e:	f7ee feb1 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801af42:	220d      	movs	r2, #13
 801af44:	4986      	ldr	r1, [pc, #536]	; (801b160 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801af46:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801af48:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801af4a:	9504      	str	r5, [sp, #16]
 801af4c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801af4e:	f005 fce1 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af52:	220c      	movs	r2, #12
 801af54:	4b76      	ldr	r3, [pc, #472]	; (801b130 <SD_Witer+0x978>)
 801af56:	4878      	ldr	r0, [pc, #480]	; (801b138 <SD_Witer+0x980>)
 801af58:	eb0d 0102 	add.w	r1, sp, r2
 801af5c:	f7ee fea2 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801af60:	221d      	movs	r2, #29
 801af62:	497d      	ldr	r1, [pc, #500]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801af64:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801af66:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801af68:	9504      	str	r5, [sp, #16]
 801af6a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801af6c:	f005 fcd2 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af70:	220c      	movs	r2, #12
 801af72:	4b6f      	ldr	r3, [pc, #444]	; (801b130 <SD_Witer+0x978>)
 801af74:	4870      	ldr	r0, [pc, #448]	; (801b138 <SD_Witer+0x980>)
 801af76:	eb0d 0102 	add.w	r1, sp, r2
 801af7a:	f7ee fe93 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801af7e:	2231      	movs	r2, #49	; 0x31
 801af80:	4975      	ldr	r1, [pc, #468]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801af82:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801af84:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801af86:	9504      	str	r5, [sp, #16]
 801af88:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801af8a:	f005 fcc3 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af8e:	220c      	movs	r2, #12
 801af90:	4b67      	ldr	r3, [pc, #412]	; (801b130 <SD_Witer+0x978>)
 801af92:	4869      	ldr	r0, [pc, #420]	; (801b138 <SD_Witer+0x980>)
 801af94:	eb0d 0102 	add.w	r1, sp, r2
 801af98:	f7ee fe84 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801af9c:	222c      	movs	r2, #44	; 0x2c
 801af9e:	496e      	ldr	r1, [pc, #440]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801afa0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801afa2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801afa4:	9504      	str	r5, [sp, #16]
 801afa6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801afa8:	f005 fcb4 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afac:	220c      	movs	r2, #12
 801afae:	4b60      	ldr	r3, [pc, #384]	; (801b130 <SD_Witer+0x978>)
 801afb0:	4861      	ldr	r0, [pc, #388]	; (801b138 <SD_Witer+0x980>)
 801afb2:	eb0d 0102 	add.w	r1, sp, r2
 801afb6:	f7ee fe75 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801afba:	2237      	movs	r2, #55	; 0x37
 801afbc:	4966      	ldr	r1, [pc, #408]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801afbe:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801afc0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801afc2:	9504      	str	r5, [sp, #16]
 801afc4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801afc6:	f005 fca5 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afca:	220c      	movs	r2, #12
 801afcc:	4b58      	ldr	r3, [pc, #352]	; (801b130 <SD_Witer+0x978>)
 801afce:	485a      	ldr	r0, [pc, #360]	; (801b138 <SD_Witer+0x980>)
 801afd0:	eb0d 0102 	add.w	r1, sp, r2
 801afd4:	f7ee fe66 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801afd8:	2244      	movs	r2, #68	; 0x44
 801afda:	495f      	ldr	r1, [pc, #380]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801afdc:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801afde:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801afe0:	9504      	str	r5, [sp, #16]
 801afe2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801afe4:	f005 fc96 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afe8:	220c      	movs	r2, #12
 801afea:	4b51      	ldr	r3, [pc, #324]	; (801b130 <SD_Witer+0x978>)
 801afec:	4852      	ldr	r0, [pc, #328]	; (801b138 <SD_Witer+0x980>)
 801afee:	eb0d 0102 	add.w	r1, sp, r2
 801aff2:	f7ee fe57 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801aff6:	224f      	movs	r2, #79	; 0x4f
 801aff8:	4957      	ldr	r1, [pc, #348]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801affa:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801affc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801affe:	9504      	str	r5, [sp, #16]
 801b000:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801b002:	f005 fc87 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b006:	220c      	movs	r2, #12
 801b008:	4b49      	ldr	r3, [pc, #292]	; (801b130 <SD_Witer+0x978>)
 801b00a:	484b      	ldr	r0, [pc, #300]	; (801b138 <SD_Witer+0x980>)
 801b00c:	eb0d 0102 	add.w	r1, sp, r2
 801b010:	f7ee fe48 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801b014:	2258      	movs	r2, #88	; 0x58
 801b016:	4950      	ldr	r1, [pc, #320]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b018:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801b01a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b01c:	9504      	str	r5, [sp, #16]
 801b01e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801b020:	f005 fc78 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b024:	220c      	movs	r2, #12
 801b026:	4b42      	ldr	r3, [pc, #264]	; (801b130 <SD_Witer+0x978>)
 801b028:	4843      	ldr	r0, [pc, #268]	; (801b138 <SD_Witer+0x980>)
 801b02a:	eb0d 0102 	add.w	r1, sp, r2
 801b02e:	f7ee fe39 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801b032:	2262      	movs	r2, #98	; 0x62
 801b034:	4948      	ldr	r1, [pc, #288]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b036:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801b038:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b03a:	9504      	str	r5, [sp, #16]
 801b03c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801b03e:	f005 fc69 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b042:	220c      	movs	r2, #12
 801b044:	4b3a      	ldr	r3, [pc, #232]	; (801b130 <SD_Witer+0x978>)
 801b046:	483c      	ldr	r0, [pc, #240]	; (801b138 <SD_Witer+0x980>)
 801b048:	eb0d 0102 	add.w	r1, sp, r2
 801b04c:	f7ee fe2a 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801b050:	2269      	movs	r2, #105	; 0x69
 801b052:	4941      	ldr	r1, [pc, #260]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b054:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801b056:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b058:	9504      	str	r5, [sp, #16]
 801b05a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801b05c:	f005 fc5a 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b060:	220c      	movs	r2, #12
 801b062:	4b33      	ldr	r3, [pc, #204]	; (801b130 <SD_Witer+0x978>)
 801b064:	4834      	ldr	r0, [pc, #208]	; (801b138 <SD_Witer+0x980>)
 801b066:	eb0d 0102 	add.w	r1, sp, r2
 801b06a:	f7ee fe1b 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801b06e:	2270      	movs	r2, #112	; 0x70
 801b070:	4939      	ldr	r1, [pc, #228]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b072:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801b074:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b076:	9504      	str	r5, [sp, #16]
 801b078:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801b07a:	f005 fc4b 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b07e:	220c      	movs	r2, #12
 801b080:	4b2b      	ldr	r3, [pc, #172]	; (801b130 <SD_Witer+0x978>)
 801b082:	482d      	ldr	r0, [pc, #180]	; (801b138 <SD_Witer+0x980>)
 801b084:	eb0d 0102 	add.w	r1, sp, r2
 801b088:	f7ee fe0c 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801b08c:	227f      	movs	r2, #127	; 0x7f
 801b08e:	4932      	ldr	r1, [pc, #200]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b090:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801b092:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b094:	9504      	str	r5, [sp, #16]
 801b096:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801b098:	f005 fc3c 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b09c:	220c      	movs	r2, #12
 801b09e:	4b24      	ldr	r3, [pc, #144]	; (801b130 <SD_Witer+0x978>)
 801b0a0:	4825      	ldr	r0, [pc, #148]	; (801b138 <SD_Witer+0x980>)
 801b0a2:	eb0d 0102 	add.w	r1, sp, r2
 801b0a6:	f7ee fdfd 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801b0aa:	2285      	movs	r2, #133	; 0x85
 801b0ac:	492a      	ldr	r1, [pc, #168]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b0ae:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801b0b0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b0b2:	9504      	str	r5, [sp, #16]
 801b0b4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801b0b6:	f005 fc2d 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b0ba:	220c      	movs	r2, #12
 801b0bc:	4b1c      	ldr	r3, [pc, #112]	; (801b130 <SD_Witer+0x978>)
 801b0be:	481e      	ldr	r0, [pc, #120]	; (801b138 <SD_Witer+0x980>)
 801b0c0:	eb0d 0102 	add.w	r1, sp, r2
 801b0c4:	f7ee fdee 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801b0c8:	2294      	movs	r2, #148	; 0x94
 801b0ca:	4923      	ldr	r1, [pc, #140]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b0cc:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801b0ce:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b0d0:	9504      	str	r5, [sp, #16]
 801b0d2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801b0d4:	f005 fc1e 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b0d8:	220c      	movs	r2, #12
 801b0da:	4b15      	ldr	r3, [pc, #84]	; (801b130 <SD_Witer+0x978>)
 801b0dc:	4816      	ldr	r0, [pc, #88]	; (801b138 <SD_Witer+0x980>)
 801b0de:	eb0d 0102 	add.w	r1, sp, r2
 801b0e2:	f7ee fddf 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801b0e6:	2298      	movs	r2, #152	; 0x98
 801b0e8:	491b      	ldr	r1, [pc, #108]	; (801b158 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801b0ea:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801b0ec:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b0ee:	9504      	str	r5, [sp, #16]
 801b0f0:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801b0f2:	f005 fc0f 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b0f6:	220c      	movs	r2, #12
 801b0f8:	4b0d      	ldr	r3, [pc, #52]	; (801b130 <SD_Witer+0x978>)
 801b0fa:	480f      	ldr	r0, [pc, #60]	; (801b138 <SD_Witer+0x980>)
 801b0fc:	eb0d 0102 	add.w	r1, sp, r2
 801b100:	f7ee fdd0 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801b104:	9503      	str	r5, [sp, #12]
 801b106:	9504      	str	r5, [sp, #16]
 801b108:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801b10a:	4b09      	ldr	r3, [pc, #36]	; (801b130 <SD_Witer+0x978>)
 801b10c:	2c00      	cmp	r4, #0
 801b10e:	f040 8302 	bne.w	801b716 <SD_Witer+0xf5e>
 801b112:	4914      	ldr	r1, [pc, #80]	; (801b164 <SD_Witer+0x9ac>)
 801b114:	227f      	movs	r2, #127	; 0x7f
 801b116:	4808      	ldr	r0, [pc, #32]	; (801b138 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801b118:	4d13      	ldr	r5, [pc, #76]	; (801b168 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801b11a:	f7ee fdc3 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801b11e:	4b13      	ldr	r3, [pc, #76]	; (801b16c <SD_Witer+0x9b4>)
 801b120:	e026      	b.n	801b170 <SD_Witer+0x9b8>
 801b122:	bf00      	nop
 801b124:	f3af 8000 	nop.w
 801b128:	cccccccd 	.word	0xcccccccd
 801b12c:	3feccccc 	.word	0x3feccccc
 801b130:	20091600 	.word	0x20091600
 801b134:	200004fb 	.word	0x200004fb
 801b138:	20092658 	.word	0x20092658
 801b13c:	20095ca0 	.word	0x20095ca0
 801b140:	0803243f 	.word	0x0803243f
 801b144:	20095ca4 	.word	0x20095ca4
 801b148:	080323ea 	.word	0x080323ea
 801b14c:	20009760 	.word	0x20009760
 801b150:	3f666666 	.word	0x3f666666
 801b154:	200003b3 	.word	0x200003b3
 801b158:	08032446 	.word	0x08032446
 801b15c:	08025609 	.word	0x08025609
 801b160:	08032445 	.word	0x08032445
 801b164:	200002c9 	.word	0x200002c9
 801b168:	20003624 	.word	0x20003624
 801b16c:	20003633 	.word	0x20003633
 801b170:	49a8      	ldr	r1, [pc, #672]	; (801b414 <SD_Witer+0xc5c>)
 801b172:	781a      	ldrb	r2, [r3, #0]
 801b174:	a803      	add	r0, sp, #12
 801b176:	f005 fbcd 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b17a:	220c      	movs	r2, #12
 801b17c:	eb0d 0102 	add.w	r1, sp, r2
 801b180:	4ba5      	ldr	r3, [pc, #660]	; (801b418 <SD_Witer+0xc60>)
 801b182:	48a6      	ldr	r0, [pc, #664]	; (801b41c <SD_Witer+0xc64>)
 801b184:	f7ee fd8e 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801b188:	4ba5      	ldr	r3, [pc, #660]	; (801b420 <SD_Witer+0xc68>)
 801b18a:	49a2      	ldr	r1, [pc, #648]	; (801b414 <SD_Witer+0xc5c>)
 801b18c:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801b18e:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801b190:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b192:	9403      	str	r4, [sp, #12]
 801b194:	9404      	str	r4, [sp, #16]
 801b196:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801b198:	f005 fbbc 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b19c:	220c      	movs	r2, #12
 801b19e:	eb0d 0102 	add.w	r1, sp, r2
 801b1a2:	4b9d      	ldr	r3, [pc, #628]	; (801b418 <SD_Witer+0xc60>)
 801b1a4:	489d      	ldr	r0, [pc, #628]	; (801b41c <SD_Witer+0xc64>)
 801b1a6:	f7ee fd7d 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801b1aa:	4b9e      	ldr	r3, [pc, #632]	; (801b424 <SD_Witer+0xc6c>)
 801b1ac:	499e      	ldr	r1, [pc, #632]	; (801b428 <SD_Witer+0xc70>)
 801b1ae:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801b1b0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801b1b2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b1b4:	9404      	str	r4, [sp, #16]
 801b1b6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801b1b8:	f005 fbac 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b1bc:	220c      	movs	r2, #12
 801b1be:	4b96      	ldr	r3, [pc, #600]	; (801b418 <SD_Witer+0xc60>)
 801b1c0:	4896      	ldr	r0, [pc, #600]	; (801b41c <SD_Witer+0xc64>)
 801b1c2:	eb0d 0102 	add.w	r1, sp, r2
 801b1c6:	f7ee fd6d 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801b1ca:	782a      	ldrb	r2, [r5, #0]
 801b1cc:	4997      	ldr	r1, [pc, #604]	; (801b42c <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801b1ce:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801b1d0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b1d2:	9404      	str	r4, [sp, #16]
 801b1d4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801b1d6:	f005 fb9d 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b1da:	220c      	movs	r2, #12
 801b1dc:	4b8e      	ldr	r3, [pc, #568]	; (801b418 <SD_Witer+0xc60>)
 801b1de:	488f      	ldr	r0, [pc, #572]	; (801b41c <SD_Witer+0xc64>)
 801b1e0:	eb0d 0102 	add.w	r1, sp, r2
 801b1e4:	f7ee fd5e 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801b1e8:	786a      	ldrb	r2, [r5, #1]
 801b1ea:	498a      	ldr	r1, [pc, #552]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b1ec:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801b1ee:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b1f0:	9404      	str	r4, [sp, #16]
 801b1f2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801b1f4:	f005 fb8e 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b1f8:	220c      	movs	r2, #12
 801b1fa:	4b87      	ldr	r3, [pc, #540]	; (801b418 <SD_Witer+0xc60>)
 801b1fc:	4887      	ldr	r0, [pc, #540]	; (801b41c <SD_Witer+0xc64>)
 801b1fe:	eb0d 0102 	add.w	r1, sp, r2
 801b202:	f7ee fd4f 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801b206:	78aa      	ldrb	r2, [r5, #2]
 801b208:	4982      	ldr	r1, [pc, #520]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b20a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801b20c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b20e:	9404      	str	r4, [sp, #16]
 801b210:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801b212:	f005 fb7f 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b216:	220c      	movs	r2, #12
 801b218:	4b7f      	ldr	r3, [pc, #508]	; (801b418 <SD_Witer+0xc60>)
 801b21a:	4880      	ldr	r0, [pc, #512]	; (801b41c <SD_Witer+0xc64>)
 801b21c:	eb0d 0102 	add.w	r1, sp, r2
 801b220:	f7ee fd40 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801b224:	78ea      	ldrb	r2, [r5, #3]
 801b226:	497b      	ldr	r1, [pc, #492]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b228:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801b22a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b22c:	9404      	str	r4, [sp, #16]
 801b22e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801b230:	f005 fb70 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b234:	220c      	movs	r2, #12
 801b236:	4b78      	ldr	r3, [pc, #480]	; (801b418 <SD_Witer+0xc60>)
 801b238:	4878      	ldr	r0, [pc, #480]	; (801b41c <SD_Witer+0xc64>)
 801b23a:	eb0d 0102 	add.w	r1, sp, r2
 801b23e:	f7ee fd31 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801b242:	792a      	ldrb	r2, [r5, #4]
 801b244:	4973      	ldr	r1, [pc, #460]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b246:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801b248:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b24a:	9404      	str	r4, [sp, #16]
 801b24c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801b24e:	f005 fb61 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b252:	220c      	movs	r2, #12
 801b254:	4b70      	ldr	r3, [pc, #448]	; (801b418 <SD_Witer+0xc60>)
 801b256:	4871      	ldr	r0, [pc, #452]	; (801b41c <SD_Witer+0xc64>)
 801b258:	eb0d 0102 	add.w	r1, sp, r2
 801b25c:	f7ee fd22 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801b260:	796a      	ldrb	r2, [r5, #5]
 801b262:	496c      	ldr	r1, [pc, #432]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b264:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801b266:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b268:	9404      	str	r4, [sp, #16]
 801b26a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801b26c:	f005 fb52 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b270:	220c      	movs	r2, #12
 801b272:	4b69      	ldr	r3, [pc, #420]	; (801b418 <SD_Witer+0xc60>)
 801b274:	4869      	ldr	r0, [pc, #420]	; (801b41c <SD_Witer+0xc64>)
 801b276:	eb0d 0102 	add.w	r1, sp, r2
 801b27a:	f7ee fd13 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801b27e:	79aa      	ldrb	r2, [r5, #6]
 801b280:	4964      	ldr	r1, [pc, #400]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b282:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801b284:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b286:	9404      	str	r4, [sp, #16]
 801b288:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801b28a:	f005 fb43 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b28e:	220c      	movs	r2, #12
 801b290:	4b61      	ldr	r3, [pc, #388]	; (801b418 <SD_Witer+0xc60>)
 801b292:	4862      	ldr	r0, [pc, #392]	; (801b41c <SD_Witer+0xc64>)
 801b294:	eb0d 0102 	add.w	r1, sp, r2
 801b298:	f7ee fd04 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801b29c:	79ea      	ldrb	r2, [r5, #7]
 801b29e:	495d      	ldr	r1, [pc, #372]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b2a0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801b2a2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b2a4:	9404      	str	r4, [sp, #16]
 801b2a6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801b2a8:	f005 fb34 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b2ac:	220c      	movs	r2, #12
 801b2ae:	4b5a      	ldr	r3, [pc, #360]	; (801b418 <SD_Witer+0xc60>)
 801b2b0:	485a      	ldr	r0, [pc, #360]	; (801b41c <SD_Witer+0xc64>)
 801b2b2:	eb0d 0102 	add.w	r1, sp, r2
 801b2b6:	f7ee fcf5 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801b2ba:	7a2a      	ldrb	r2, [r5, #8]
 801b2bc:	4955      	ldr	r1, [pc, #340]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b2be:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801b2c0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b2c2:	9404      	str	r4, [sp, #16]
 801b2c4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801b2c6:	f005 fb25 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b2ca:	220c      	movs	r2, #12
 801b2cc:	4b52      	ldr	r3, [pc, #328]	; (801b418 <SD_Witer+0xc60>)
 801b2ce:	4853      	ldr	r0, [pc, #332]	; (801b41c <SD_Witer+0xc64>)
 801b2d0:	eb0d 0102 	add.w	r1, sp, r2
 801b2d4:	f7ee fce6 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801b2d8:	7a6a      	ldrb	r2, [r5, #9]
 801b2da:	494e      	ldr	r1, [pc, #312]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b2dc:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801b2de:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b2e0:	9404      	str	r4, [sp, #16]
 801b2e2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801b2e4:	f005 fb16 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b2e8:	220c      	movs	r2, #12
 801b2ea:	4b4b      	ldr	r3, [pc, #300]	; (801b418 <SD_Witer+0xc60>)
 801b2ec:	484b      	ldr	r0, [pc, #300]	; (801b41c <SD_Witer+0xc64>)
 801b2ee:	eb0d 0102 	add.w	r1, sp, r2
 801b2f2:	f7ee fcd7 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801b2f6:	7aaa      	ldrb	r2, [r5, #10]
 801b2f8:	4946      	ldr	r1, [pc, #280]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b2fa:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801b2fc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b2fe:	9404      	str	r4, [sp, #16]
 801b300:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801b302:	f005 fb07 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b306:	220c      	movs	r2, #12
 801b308:	4b43      	ldr	r3, [pc, #268]	; (801b418 <SD_Witer+0xc60>)
 801b30a:	4844      	ldr	r0, [pc, #272]	; (801b41c <SD_Witer+0xc64>)
 801b30c:	eb0d 0102 	add.w	r1, sp, r2
 801b310:	f7ee fcc8 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801b314:	7aea      	ldrb	r2, [r5, #11]
 801b316:	493f      	ldr	r1, [pc, #252]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b318:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801b31a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b31c:	9404      	str	r4, [sp, #16]
 801b31e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801b320:	f005 faf8 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b324:	220c      	movs	r2, #12
 801b326:	4b3c      	ldr	r3, [pc, #240]	; (801b418 <SD_Witer+0xc60>)
 801b328:	483c      	ldr	r0, [pc, #240]	; (801b41c <SD_Witer+0xc64>)
 801b32a:	eb0d 0102 	add.w	r1, sp, r2
 801b32e:	f7ee fcb9 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801b332:	7b2a      	ldrb	r2, [r5, #12]
 801b334:	4937      	ldr	r1, [pc, #220]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b336:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801b338:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b33a:	9404      	str	r4, [sp, #16]
 801b33c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801b33e:	f005 fae9 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b342:	220c      	movs	r2, #12
 801b344:	4b34      	ldr	r3, [pc, #208]	; (801b418 <SD_Witer+0xc60>)
 801b346:	4835      	ldr	r0, [pc, #212]	; (801b41c <SD_Witer+0xc64>)
 801b348:	eb0d 0102 	add.w	r1, sp, r2
 801b34c:	f7ee fcaa 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801b350:	7b6a      	ldrb	r2, [r5, #13]
 801b352:	4930      	ldr	r1, [pc, #192]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b354:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801b356:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b358:	9404      	str	r4, [sp, #16]
 801b35a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801b35c:	f005 fada 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b360:	220c      	movs	r2, #12
 801b362:	4b2d      	ldr	r3, [pc, #180]	; (801b418 <SD_Witer+0xc60>)
 801b364:	482d      	ldr	r0, [pc, #180]	; (801b41c <SD_Witer+0xc64>)
 801b366:	eb0d 0102 	add.w	r1, sp, r2
 801b36a:	f7ee fc9b 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801b36e:	7baa      	ldrb	r2, [r5, #14]
 801b370:	4928      	ldr	r1, [pc, #160]	; (801b414 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b372:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801b374:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b376:	9404      	str	r4, [sp, #16]
 801b378:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801b37a:	f005 facb 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b37e:	220c      	movs	r2, #12
 801b380:	4b25      	ldr	r3, [pc, #148]	; (801b418 <SD_Witer+0xc60>)
 801b382:	4826      	ldr	r0, [pc, #152]	; (801b41c <SD_Witer+0xc64>)
 801b384:	eb0d 0102 	add.w	r1, sp, r2
 801b388:	f7ee fc8c 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801b38c:	9403      	str	r4, [sp, #12]
 801b38e:	9404      	str	r4, [sp, #16]
 801b390:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801b392:	4822      	ldr	r0, [pc, #136]	; (801b41c <SD_Witer+0xc64>)
 801b394:	f7ee fda4 	bl	8009ee0 <f_close>
				memset(buffer_sd, 0, 11);
 801b398:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801b39a:	4925      	ldr	r1, [pc, #148]	; (801b430 <SD_Witer+0xc78>)
 801b39c:	4825      	ldr	r0, [pc, #148]	; (801b434 <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801b39e:	6072      	str	r2, [r6, #4]
 801b3a0:	6032      	str	r2, [r6, #0]
 801b3a2:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801b3a6:	f7ee fb33 	bl	8009a10 <f_mount>
 801b3aa:	4b23      	ldr	r3, [pc, #140]	; (801b438 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801b3ac:	4923      	ldr	r1, [pc, #140]	; (801b43c <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801b3ae:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801b3b0:	4b23      	ldr	r3, [pc, #140]	; (801b440 <SD_Witer+0xc88>)
 801b3b2:	2000      	movs	r0, #0
 801b3b4:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801b3b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b3bc:	f44f 718c 	mov.w	r1, #280	; 0x118
 801b3c0:	2055      	movs	r0, #85	; 0x55
 801b3c2:	f7f8 fa23 	bl	801380c <GUI_Bar_Measure>
	}
 801b3c6:	b007      	add	sp, #28
 801b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801b3cc:	491d      	ldr	r1, [pc, #116]	; (801b444 <SD_Witer+0xc8c>)
 801b3ce:	f7ff ba10 	b.w	801a7f2 <SD_Witer+0x3a>
 801b3d2:	491d      	ldr	r1, [pc, #116]	; (801b448 <SD_Witer+0xc90>)
 801b3d4:	f7ff ba0d 	b.w	801a7f2 <SD_Witer+0x3a>
 801b3d8:	491c      	ldr	r1, [pc, #112]	; (801b44c <SD_Witer+0xc94>)
 801b3da:	f7ff ba0a 	b.w	801a7f2 <SD_Witer+0x3a>
 801b3de:	491c      	ldr	r1, [pc, #112]	; (801b450 <SD_Witer+0xc98>)
 801b3e0:	f7ff ba07 	b.w	801a7f2 <SD_Witer+0x3a>
 801b3e4:	491b      	ldr	r1, [pc, #108]	; (801b454 <SD_Witer+0xc9c>)
 801b3e6:	f7ff ba04 	b.w	801a7f2 <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801b3ea:	221e      	movs	r2, #30
 801b3ec:	491a      	ldr	r1, [pc, #104]	; (801b458 <SD_Witer+0xca0>)
 801b3ee:	f7ff ba3a 	b.w	801a866 <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801b3f2:	2212      	movs	r2, #18
 801b3f4:	4919      	ldr	r1, [pc, #100]	; (801b45c <SD_Witer+0xca4>)
 801b3f6:	f7ff ba54 	b.w	801a8a2 <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801b3fa:	2212      	movs	r2, #18
 801b3fc:	4918      	ldr	r1, [pc, #96]	; (801b460 <SD_Witer+0xca8>)
 801b3fe:	f7ff ba8c 	b.w	801a91a <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801b402:	2214      	movs	r2, #20
 801b404:	4917      	ldr	r1, [pc, #92]	; (801b464 <SD_Witer+0xcac>)
 801b406:	f7ff babc 	b.w	801a982 <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801b40a:	2209      	movs	r2, #9
 801b40c:	4916      	ldr	r1, [pc, #88]	; (801b468 <SD_Witer+0xcb0>)
 801b40e:	f7ff baec 	b.w	801a9ea <SD_Witer+0x232>
 801b412:	bf00      	nop
 801b414:	08032446 	.word	0x08032446
 801b418:	20091600 	.word	0x20091600
 801b41c:	20092658 	.word	0x20092658
 801b420:	20003635 	.word	0x20003635
 801b424:	20003634 	.word	0x20003634
 801b428:	08025609 	.word	0x08025609
 801b42c:	08032445 	.word	0x08032445
 801b430:	2009368d 	.word	0x2009368d
 801b434:	20091608 	.word	0x20091608
 801b438:	20093688 	.word	0x20093688
 801b43c:	3ff00000 	.word	0x3ff00000
 801b440:	20009760 	.word	0x20009760
 801b444:	0803254a 	.word	0x0803254a
 801b448:	08032405 	.word	0x08032405
 801b44c:	08032409 	.word	0x08032409
 801b450:	0803240b 	.word	0x0803240b
 801b454:	0803240f 	.word	0x0803240f
 801b458:	2000090b 	.word	0x2000090b
 801b45c:	20000430 	.word	0x20000430
 801b460:	200004ac 	.word	0x200004ac
 801b464:	20000468 	.word	0x20000468
 801b468:	20000247 	.word	0x20000247
										sprintf(measure_buff, "%.d", Tc_Measure);
 801b46c:	49ab      	ldr	r1, [pc, #684]	; (801b71c <SD_Witer+0xf64>)
 801b46e:	a803      	add	r0, sp, #12
 801b470:	f005 fa50 	bl	8020914 <sprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b474:	220c      	movs	r2, #12
 801b476:	4baa      	ldr	r3, [pc, #680]	; (801b720 <SD_Witer+0xf68>)
 801b478:	48aa      	ldr	r0, [pc, #680]	; (801b724 <SD_Witer+0xf6c>)
 801b47a:	eb0d 0102 	add.w	r1, sp, r2
 801b47e:	f7ee fc11 	bl	8009ca4 <f_write>
										memset(measure_buff, 0, 12);
 801b482:	2300      	movs	r3, #0
 801b484:	9303      	str	r3, [sp, #12]
 801b486:	9304      	str	r3, [sp, #16]
 801b488:	9305      	str	r3, [sp, #20]
 801b48a:	f7ff babe 	b.w	801aa0a <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801b48e:	2215      	movs	r2, #21
 801b490:	49a5      	ldr	r1, [pc, #660]	; (801b728 <SD_Witer+0xf70>)
 801b492:	f7ff bacd 	b.w	801aa30 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801b496:	2213      	movs	r2, #19
 801b498:	49a4      	ldr	r1, [pc, #656]	; (801b72c <SD_Witer+0xf74>)
 801b49a:	f7ff bb46 	b.w	801ab2a <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801b49e:	221a      	movs	r2, #26
 801b4a0:	49a3      	ldr	r1, [pc, #652]	; (801b730 <SD_Witer+0xf78>)
 801b4a2:	f7ff bb51 	b.w	801ab48 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801b4a6:	221f      	movs	r2, #31
 801b4a8:	49a2      	ldr	r1, [pc, #648]	; (801b734 <SD_Witer+0xf7c>)
 801b4aa:	f7ff bb67 	b.w	801ab7c <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801b4ae:	2213      	movs	r2, #19
 801b4b0:	49a1      	ldr	r1, [pc, #644]	; (801b738 <SD_Witer+0xf80>)
 801b4b2:	f7ff bb81 	b.w	801abb8 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801b4b6:	b964      	cbnz	r4, 801b4d2 <SD_Witer+0xd1a>
 801b4b8:	49a0      	ldr	r1, [pc, #640]	; (801b73c <SD_Witer+0xf84>)
 801b4ba:	2224      	movs	r2, #36	; 0x24
 801b4bc:	4899      	ldr	r0, [pc, #612]	; (801b724 <SD_Witer+0xf6c>)
 801b4be:	f7ee fbf1 	bl	8009ca4 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801b4c2:	4b97      	ldr	r3, [pc, #604]	; (801b720 <SD_Witer+0xf68>)
 801b4c4:	499e      	ldr	r1, [pc, #632]	; (801b740 <SD_Witer+0xf88>)
 801b4c6:	4897      	ldr	r0, [pc, #604]	; (801b724 <SD_Witer+0xf6c>)
 801b4c8:	2203      	movs	r2, #3
 801b4ca:	f7ee fbeb 	bl	8009ca4 <f_write>
 801b4ce:	f7ff bb88 	b.w	801abe2 <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801b4d2:	2213      	movs	r2, #19
 801b4d4:	4998      	ldr	r1, [pc, #608]	; (801b738 <SD_Witer+0xf80>)
 801b4d6:	e7f1      	b.n	801b4bc <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801b4d8:	2225      	movs	r2, #37	; 0x25
 801b4da:	499a      	ldr	r1, [pc, #616]	; (801b744 <SD_Witer+0xf8c>)
 801b4dc:	f7ff bb99 	b.w	801ac12 <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801b4e0:	2212      	movs	r2, #18
 801b4e2:	4999      	ldr	r1, [pc, #612]	; (801b748 <SD_Witer+0xf90>)
 801b4e4:	f7ff bbd0 	b.w	801ac88 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801b4e8:	2212      	movs	r2, #18
 801b4ea:	4998      	ldr	r1, [pc, #608]	; (801b74c <SD_Witer+0xf94>)
 801b4ec:	f7ff bbea 	b.w	801acc4 <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801b4f0:	2213      	movs	r2, #19
 801b4f2:	4997      	ldr	r1, [pc, #604]	; (801b750 <SD_Witer+0xf98>)
 801b4f4:	e404      	b.n	801ad00 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801b4f6:	221e      	movs	r2, #30
 801b4f8:	4996      	ldr	r1, [pc, #600]	; (801b754 <SD_Witer+0xf9c>)
 801b4fa:	e41f      	b.n	801ad3c <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801b4fc:	220f      	movs	r2, #15
 801b4fe:	4996      	ldr	r1, [pc, #600]	; (801b758 <SD_Witer+0xfa0>)
 801b500:	e4bc      	b.n	801ae7c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801b502:	2c00      	cmp	r4, #0
 801b504:	f040 80f0 	bne.w	801b6e8 <SD_Witer+0xf30>
 801b508:	4994      	ldr	r1, [pc, #592]	; (801b75c <SD_Witer+0xfa4>)
 801b50a:	2276      	movs	r2, #118	; 0x76
 801b50c:	4885      	ldr	r0, [pc, #532]	; (801b724 <SD_Witer+0xf6c>)
 801b50e:	4f94      	ldr	r7, [pc, #592]	; (801b760 <SD_Witer+0xfa8>)
 801b510:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801b7c8 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b514:	f8df a208 	ldr.w	sl, [pc, #520]	; 801b720 <SD_Witer+0xf68>
 801b518:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801b724 <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801b51c:	f7ee fbc2 	bl	8009ca4 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801b520:	f857 0b04 	ldr.w	r0, [r7], #4
 801b524:	f7e5 f828 	bl	8000578 <__aeabi_f2d>
 801b528:	4602      	mov	r2, r0
 801b52a:	460b      	mov	r3, r1
 801b52c:	a803      	add	r0, sp, #12
 801b52e:	498d      	ldr	r1, [pc, #564]	; (801b764 <SD_Witer+0xfac>)
 801b530:	f005 f9f0 	bl	8020914 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b534:	220c      	movs	r2, #12
 801b536:	4653      	mov	r3, sl
 801b538:	eb0d 0102 	add.w	r1, sp, r2
 801b53c:	4648      	mov	r0, r9
 801b53e:	f7ee fbb1 	bl	8009ca4 <f_write>
									memset(measure_buff, 0, 12);
 801b542:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801b544:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801b548:	9503      	str	r5, [sp, #12]
 801b54a:	9504      	str	r5, [sp, #16]
 801b54c:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801b54e:	f7e5 f813 	bl	8000578 <__aeabi_f2d>
 801b552:	4602      	mov	r2, r0
 801b554:	460b      	mov	r3, r1
 801b556:	a803      	add	r0, sp, #12
 801b558:	4983      	ldr	r1, [pc, #524]	; (801b768 <SD_Witer+0xfb0>)
 801b55a:	f005 f9db 	bl	8020914 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b55e:	220c      	movs	r2, #12
 801b560:	4653      	mov	r3, sl
 801b562:	eb0d 0102 	add.w	r1, sp, r2
 801b566:	4648      	mov	r0, r9
 801b568:	f7ee fb9c 	bl	8009ca4 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801b56c:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801b56e:	9503      	str	r5, [sp, #12]
 801b570:	9504      	str	r5, [sp, #16]
 801b572:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801b574:	d1d4      	bne.n	801b520 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801b576:	4b6a      	ldr	r3, [pc, #424]	; (801b720 <SD_Witer+0xf68>)
 801b578:	2c00      	cmp	r4, #0
 801b57a:	f040 80b8 	bne.w	801b6ee <SD_Witer+0xf36>
 801b57e:	497b      	ldr	r1, [pc, #492]	; (801b76c <SD_Witer+0xfb4>)
 801b580:	223f      	movs	r2, #63	; 0x3f
 801b582:	4868      	ldr	r0, [pc, #416]	; (801b724 <SD_Witer+0xf6c>)
 801b584:	f7ee fb8e 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801b588:	4b79      	ldr	r3, [pc, #484]	; (801b770 <SD_Witer+0xfb8>)
 801b58a:	6818      	ldr	r0, [r3, #0]
 801b58c:	f7e4 fff4 	bl	8000578 <__aeabi_f2d>
 801b590:	4602      	mov	r2, r0
 801b592:	460b      	mov	r3, r1
 801b594:	a803      	add	r0, sp, #12
 801b596:	4977      	ldr	r1, [pc, #476]	; (801b774 <SD_Witer+0xfbc>)
 801b598:	f005 f9bc 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b59c:	220c      	movs	r2, #12
 801b59e:	4b60      	ldr	r3, [pc, #384]	; (801b720 <SD_Witer+0xf68>)
 801b5a0:	4860      	ldr	r0, [pc, #384]	; (801b724 <SD_Witer+0xf6c>)
 801b5a2:	eb0d 0102 	add.w	r1, sp, r2
 801b5a6:	f7ee fb7d 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	9303      	str	r3, [sp, #12]
 801b5ae:	9304      	str	r3, [sp, #16]
 801b5b0:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801b5b2:	4b5b      	ldr	r3, [pc, #364]	; (801b720 <SD_Witer+0xf68>)
 801b5b4:	2c00      	cmp	r4, #0
 801b5b6:	f040 809d 	bne.w	801b6f4 <SD_Witer+0xf3c>
 801b5ba:	496f      	ldr	r1, [pc, #444]	; (801b778 <SD_Witer+0xfc0>)
 801b5bc:	221b      	movs	r2, #27
 801b5be:	4859      	ldr	r0, [pc, #356]	; (801b724 <SD_Witer+0xf6c>)
 801b5c0:	f7ee fb70 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801b5c4:	4b6d      	ldr	r3, [pc, #436]	; (801b77c <SD_Witer+0xfc4>)
 801b5c6:	6818      	ldr	r0, [r3, #0]
 801b5c8:	f7e4 ffd6 	bl	8000578 <__aeabi_f2d>
 801b5cc:	4602      	mov	r2, r0
 801b5ce:	460b      	mov	r3, r1
 801b5d0:	a803      	add	r0, sp, #12
 801b5d2:	496b      	ldr	r1, [pc, #428]	; (801b780 <SD_Witer+0xfc8>)
 801b5d4:	f005 f99e 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b5d8:	220c      	movs	r2, #12
 801b5da:	4b51      	ldr	r3, [pc, #324]	; (801b720 <SD_Witer+0xf68>)
 801b5dc:	4851      	ldr	r0, [pc, #324]	; (801b724 <SD_Witer+0xf6c>)
 801b5de:	eb0d 0102 	add.w	r1, sp, r2
 801b5e2:	f7ee fb5f 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	9303      	str	r3, [sp, #12]
 801b5ea:	9304      	str	r3, [sp, #16]
 801b5ec:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801b5ee:	4b4c      	ldr	r3, [pc, #304]	; (801b720 <SD_Witer+0xf68>)
 801b5f0:	2c00      	cmp	r4, #0
 801b5f2:	f040 8082 	bne.w	801b6fa <SD_Witer+0xf42>
 801b5f6:	4963      	ldr	r1, [pc, #396]	; (801b784 <SD_Witer+0xfcc>)
 801b5f8:	2227      	movs	r2, #39	; 0x27
 801b5fa:	484a      	ldr	r0, [pc, #296]	; (801b724 <SD_Witer+0xf6c>)
 801b5fc:	f7ee fb52 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801b600:	4b61      	ldr	r3, [pc, #388]	; (801b788 <SD_Witer+0xfd0>)
 801b602:	6818      	ldr	r0, [r3, #0]
 801b604:	f7e4 ffb8 	bl	8000578 <__aeabi_f2d>
 801b608:	4602      	mov	r2, r0
 801b60a:	460b      	mov	r3, r1
 801b60c:	a803      	add	r0, sp, #12
 801b60e:	4959      	ldr	r1, [pc, #356]	; (801b774 <SD_Witer+0xfbc>)
 801b610:	f005 f980 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b614:	220c      	movs	r2, #12
 801b616:	4b42      	ldr	r3, [pc, #264]	; (801b720 <SD_Witer+0xf68>)
 801b618:	4842      	ldr	r0, [pc, #264]	; (801b724 <SD_Witer+0xf6c>)
 801b61a:	eb0d 0102 	add.w	r1, sp, r2
 801b61e:	f7ee fb41 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801b622:	2300      	movs	r3, #0
 801b624:	9303      	str	r3, [sp, #12]
 801b626:	9304      	str	r3, [sp, #16]
 801b628:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801b62a:	4b3d      	ldr	r3, [pc, #244]	; (801b720 <SD_Witer+0xf68>)
 801b62c:	2c00      	cmp	r4, #0
 801b62e:	d167      	bne.n	801b700 <SD_Witer+0xf48>
 801b630:	4956      	ldr	r1, [pc, #344]	; (801b78c <SD_Witer+0xfd4>)
 801b632:	223d      	movs	r2, #61	; 0x3d
 801b634:	483b      	ldr	r0, [pc, #236]	; (801b724 <SD_Witer+0xf6c>)
 801b636:	f7ee fb35 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801b63a:	4b55      	ldr	r3, [pc, #340]	; (801b790 <SD_Witer+0xfd8>)
 801b63c:	6818      	ldr	r0, [r3, #0]
 801b63e:	f7e4 ff9b 	bl	8000578 <__aeabi_f2d>
 801b642:	4602      	mov	r2, r0
 801b644:	460b      	mov	r3, r1
 801b646:	a803      	add	r0, sp, #12
 801b648:	4952      	ldr	r1, [pc, #328]	; (801b794 <SD_Witer+0xfdc>)
 801b64a:	f005 f963 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b64e:	220c      	movs	r2, #12
 801b650:	eb0d 0102 	add.w	r1, sp, r2
 801b654:	4b32      	ldr	r3, [pc, #200]	; (801b720 <SD_Witer+0xf68>)
 801b656:	4833      	ldr	r0, [pc, #204]	; (801b724 <SD_Witer+0xf6c>)
 801b658:	f7ee fb24 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b65c:	4b4e      	ldr	r3, [pc, #312]	; (801b798 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801b65e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b660:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b662:	9503      	str	r5, [sp, #12]
 801b664:	9504      	str	r5, [sp, #16]
 801b666:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b668:	f7e4 ff86 	bl	8000578 <__aeabi_f2d>
 801b66c:	4602      	mov	r2, r0
 801b66e:	460b      	mov	r3, r1
 801b670:	a803      	add	r0, sp, #12
 801b672:	4948      	ldr	r1, [pc, #288]	; (801b794 <SD_Witer+0xfdc>)
 801b674:	f005 f94e 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b678:	220c      	movs	r2, #12
 801b67a:	eb0d 0102 	add.w	r1, sp, r2
 801b67e:	4b28      	ldr	r3, [pc, #160]	; (801b720 <SD_Witer+0xf68>)
 801b680:	4828      	ldr	r0, [pc, #160]	; (801b724 <SD_Witer+0xf6c>)
 801b682:	f7ee fb0f 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b686:	4b45      	ldr	r3, [pc, #276]	; (801b79c <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801b688:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b68a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b68c:	9504      	str	r5, [sp, #16]
 801b68e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b690:	f7e4 ff72 	bl	8000578 <__aeabi_f2d>
 801b694:	4602      	mov	r2, r0
 801b696:	460b      	mov	r3, r1
 801b698:	a803      	add	r0, sp, #12
 801b69a:	493e      	ldr	r1, [pc, #248]	; (801b794 <SD_Witer+0xfdc>)
 801b69c:	f005 f93a 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b6a0:	220c      	movs	r2, #12
 801b6a2:	eb0d 0102 	add.w	r1, sp, r2
 801b6a6:	4b1e      	ldr	r3, [pc, #120]	; (801b720 <SD_Witer+0xf68>)
 801b6a8:	481e      	ldr	r0, [pc, #120]	; (801b724 <SD_Witer+0xf6c>)
 801b6aa:	f7ee fafb 	bl	8009ca4 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b6ae:	4b3c      	ldr	r3, [pc, #240]	; (801b7a0 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801b6b0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b6b2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b6b4:	9504      	str	r5, [sp, #16]
 801b6b6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b6b8:	f7e4 ff5e 	bl	8000578 <__aeabi_f2d>
 801b6bc:	4602      	mov	r2, r0
 801b6be:	460b      	mov	r3, r1
 801b6c0:	a803      	add	r0, sp, #12
 801b6c2:	4934      	ldr	r1, [pc, #208]	; (801b794 <SD_Witer+0xfdc>)
 801b6c4:	f005 f926 	bl	8020914 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b6c8:	220c      	movs	r2, #12
 801b6ca:	4b15      	ldr	r3, [pc, #84]	; (801b720 <SD_Witer+0xf68>)
 801b6cc:	4815      	ldr	r0, [pc, #84]	; (801b724 <SD_Witer+0xf6c>)
 801b6ce:	eb0d 0102 	add.w	r1, sp, r2
 801b6d2:	f7ee fae7 	bl	8009ca4 <f_write>
								memset(measure_buff, 0, 12);
 801b6d6:	9503      	str	r5, [sp, #12]
 801b6d8:	9504      	str	r5, [sp, #16]
 801b6da:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801b6dc:	4b10      	ldr	r3, [pc, #64]	; (801b720 <SD_Witer+0xf68>)
 801b6de:	b994      	cbnz	r4, 801b706 <SD_Witer+0xf4e>
 801b6e0:	221a      	movs	r2, #26
 801b6e2:	4930      	ldr	r1, [pc, #192]	; (801b7a4 <SD_Witer+0xfec>)
 801b6e4:	f7ff bbca 	b.w	801ae7c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801b6e8:	2223      	movs	r2, #35	; 0x23
 801b6ea:	492f      	ldr	r1, [pc, #188]	; (801b7a8 <SD_Witer+0xff0>)
 801b6ec:	e70e      	b.n	801b50c <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801b6ee:	2216      	movs	r2, #22
 801b6f0:	492e      	ldr	r1, [pc, #184]	; (801b7ac <SD_Witer+0xff4>)
 801b6f2:	e746      	b.n	801b582 <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801b6f4:	2213      	movs	r2, #19
 801b6f6:	492e      	ldr	r1, [pc, #184]	; (801b7b0 <SD_Witer+0xff8>)
 801b6f8:	e761      	b.n	801b5be <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801b6fa:	2215      	movs	r2, #21
 801b6fc:	492d      	ldr	r1, [pc, #180]	; (801b7b4 <SD_Witer+0xffc>)
 801b6fe:	e77c      	b.n	801b5fa <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801b700:	2220      	movs	r2, #32
 801b702:	492d      	ldr	r1, [pc, #180]	; (801b7b8 <SD_Witer+0x1000>)
 801b704:	e796      	b.n	801b634 <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801b706:	2214      	movs	r2, #20
 801b708:	492c      	ldr	r1, [pc, #176]	; (801b7bc <SD_Witer+0x1004>)
 801b70a:	f7ff bbb7 	b.w	801ae7c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801b70e:	226b      	movs	r2, #107	; 0x6b
 801b710:	492b      	ldr	r1, [pc, #172]	; (801b7c0 <SD_Witer+0x1008>)
 801b712:	f7ff bbf7 	b.w	801af04 <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801b716:	226b      	movs	r2, #107	; 0x6b
 801b718:	492a      	ldr	r1, [pc, #168]	; (801b7c4 <SD_Witer+0x100c>)
 801b71a:	e4fc      	b.n	801b116 <SD_Witer+0x95e>
 801b71c:	0803242b 	.word	0x0803242b
 801b720:	20091600 	.word	0x20091600
 801b724:	20092658 	.word	0x20092658
 801b728:	200005ff 	.word	0x200005ff
 801b72c:	200008ce 	.word	0x200008ce
 801b730:	200009ef 	.word	0x200009ef
 801b734:	20000995 	.word	0x20000995
 801b738:	2000095e 	.word	0x2000095e
 801b73c:	20000971 	.word	0x20000971
 801b740:	08032413 	.word	0x08032413
 801b744:	20000544 	.word	0x20000544
 801b748:	2000050e 	.word	0x2000050e
 801b74c:	200005cc 	.word	0x200005cc
 801b750:	200007ff 	.word	0x200007ff
 801b754:	200007a8 	.word	0x200007a8
 801b758:	200004ec 	.word	0x200004ec
 801b75c:	20000704 	.word	0x20000704
 801b760:	2000c53c 	.word	0x2000c53c
 801b764:	08032433 	.word	0x08032433
 801b768:	08032438 	.word	0x08032438
 801b76c:	200006a2 	.word	0x200006a2
 801b770:	20095d30 	.word	0x20095d30
 801b774:	080323ea 	.word	0x080323ea
 801b778:	2000078d 	.word	0x2000078d
 801b77c:	20095720 	.word	0x20095720
 801b780:	080323e5 	.word	0x080323e5
 801b784:	200008a7 	.word	0x200008a7
 801b788:	20095728 	.word	0x20095728
 801b78c:	20000855 	.word	0x20000855
 801b790:	2009580c 	.word	0x2009580c
 801b794:	0803243f 	.word	0x0803243f
 801b798:	20095b90 	.word	0x20095b90
 801b79c:	20095aa4 	.word	0x20095aa4
 801b7a0:	20095724 	.word	0x20095724
 801b7a4:	20000672 	.word	0x20000672
 801b7a8:	200006e1 	.word	0x200006e1
 801b7ac:	2000068c 	.word	0x2000068c
 801b7b0:	2000077a 	.word	0x2000077a
 801b7b4:	20000892 	.word	0x20000892
 801b7b8:	20000835 	.word	0x20000835
 801b7bc:	2000065e 	.word	0x2000065e
 801b7c0:	20000348 	.word	0x20000348
 801b7c4:	2000025e 	.word	0x2000025e
 801b7c8:	20054948 	.word	0x20054948

0801b7cc <Spectral_Axes>:
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,		};


void Spectral_Axes(uint8_t direction){
 801b7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	d145      	bne.n	801b85e <Spectral_Axes+0x92>
	{
//		TFT_FillRectangle(20, 95, 270, 412, TFT_Black_Bkgr);

		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801b7d2:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b7d6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801b7da:	2214      	movs	r2, #20
 801b7dc:	215f      	movs	r1, #95	; 0x5f
 801b7de:	2012      	movs	r0, #18
 801b7e0:	9400      	str	r4, [sp, #0]
 801b7e2:	f001 f9a8 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801b7e6:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801b7ea:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801b7ee:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801b7f2:	2012      	movs	r0, #18
 801b7f4:	9400      	str	r4, [sp, #0]
 801b7f6:	f001 f99e 	bl	801cb36 <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801b7fa:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801b7fe:	4619      	mov	r1, r3
 801b800:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b804:	2012      	movs	r0, #18
 801b806:	9400      	str	r4, [sp, #0]
 801b808:	f001 f938 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801b80c:	f240 1301 	movw	r3, #257	; 0x101
 801b810:	4619      	mov	r1, r3
 801b812:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b816:	2012      	movs	r0, #18
 801b818:	9400      	str	r4, [sp, #0]
 801b81a:	f001 f92f 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801b81e:	23b5      	movs	r3, #181	; 0xb5
 801b820:	4619      	mov	r1, r3
 801b822:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b826:	2012      	movs	r0, #18
 801b828:	9400      	str	r4, [sp, #0]
 801b82a:	f001 f927 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801b82e:	2369      	movs	r3, #105	; 0x69
 801b830:	9400      	str	r4, [sp, #0]
 801b832:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b836:	4619      	mov	r1, r3
 801b838:	2012      	movs	r0, #18
 801b83a:	f001 f91f 	bl	801ca7c <TFT_DrawLine>
 801b83e:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_DrawLine(56+i, 95, 56+i, 412, TFT_Grey);
 801b840:	462a      	mov	r2, r5
 801b842:	4628      	mov	r0, r5
 801b844:	3528      	adds	r5, #40	; 0x28
 801b846:	9400      	str	r4, [sp, #0]
 801b848:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801b84c:	215f      	movs	r1, #95	; 0x5f
 801b84e:	b2ad      	uxth	r5, r5
 801b850:	f001 f914 	bl	801ca7c <TFT_DrawLine>
		for(uint16_t i = 0; i < 210; i+=40){
 801b854:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801b858:	d1f2      	bne.n	801b840 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801b85a:	b003      	add	sp, #12
 801b85c:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801b85e:	2801      	cmp	r0, #1
 801b860:	d140      	bne.n	801b8e4 <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801b862:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b866:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b86a:	22ff      	movs	r2, #255	; 0xff
 801b86c:	2146      	movs	r1, #70	; 0x46
 801b86e:	20fd      	movs	r0, #253	; 0xfd
 801b870:	9400      	str	r4, [sp, #0]
 801b872:	f001 f960 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801b876:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b87a:	22ff      	movs	r2, #255	; 0xff
 801b87c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801b880:	2028      	movs	r0, #40	; 0x28
 801b882:	9400      	str	r4, [sp, #0]
 801b884:	f001 f957 	bl	801cb36 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801b888:	22cc      	movs	r2, #204	; 0xcc
 801b88a:	4610      	mov	r0, r2
 801b88c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b890:	2146      	movs	r1, #70	; 0x46
 801b892:	9400      	str	r4, [sp, #0]
 801b894:	f001 f8f2 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801b898:	2297      	movs	r2, #151	; 0x97
 801b89a:	4610      	mov	r0, r2
 801b89c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b8a0:	2146      	movs	r1, #70	; 0x46
 801b8a2:	9400      	str	r4, [sp, #0]
 801b8a4:	f001 f8ea 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801b8a8:	2262      	movs	r2, #98	; 0x62
 801b8aa:	4610      	mov	r0, r2
 801b8ac:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b8b0:	2146      	movs	r1, #70	; 0x46
 801b8b2:	9400      	str	r4, [sp, #0]
 801b8b4:	f001 f8e2 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801b8b8:	222d      	movs	r2, #45	; 0x2d
 801b8ba:	9400      	str	r4, [sp, #0]
 801b8bc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b8c0:	2146      	movs	r1, #70	; 0x46
 801b8c2:	4610      	mov	r0, r2
 801b8c4:	f001 f8da 	bl	801ca7c <TFT_DrawLine>
 801b8c8:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_DrawLine(40, 354-i, 255, 354-i, TFT_Grey);
 801b8cc:	462b      	mov	r3, r5
 801b8ce:	4629      	mov	r1, r5
 801b8d0:	3d32      	subs	r5, #50	; 0x32
 801b8d2:	9400      	str	r4, [sp, #0]
 801b8d4:	22ff      	movs	r2, #255	; 0xff
 801b8d6:	2028      	movs	r0, #40	; 0x28
 801b8d8:	b2ad      	uxth	r5, r5
 801b8da:	f001 f8cf 	bl	801ca7c <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801b8de:	2d36      	cmp	r5, #54	; 0x36
 801b8e0:	d1f4      	bne.n	801b8cc <Spectral_Axes+0x100>
 801b8e2:	e7ba      	b.n	801b85a <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801b8e4:	2802      	cmp	r0, #2
 801b8e6:	d1b8      	bne.n	801b85a <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801b8e8:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b8ec:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b8f0:	2210      	movs	r2, #16
 801b8f2:	214a      	movs	r1, #74	; 0x4a
 801b8f4:	2012      	movs	r0, #18
 801b8f6:	9400      	str	r4, [sp, #0]
 801b8f8:	f001 f91d 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801b8fc:	234c      	movs	r3, #76	; 0x4c
 801b8fe:	22e8      	movs	r2, #232	; 0xe8
 801b900:	214a      	movs	r1, #74	; 0x4a
 801b902:	2011      	movs	r0, #17
 801b904:	9400      	str	r4, [sp, #0]
 801b906:	f001 f916 	bl	801cb36 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801b90a:	2244      	movs	r2, #68	; 0x44
 801b90c:	4610      	mov	r0, r2
 801b90e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b912:	2146      	movs	r1, #70	; 0x46
 801b914:	9400      	str	r4, [sp, #0]
 801b916:	f001 f8b1 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801b91a:	2279      	movs	r2, #121	; 0x79
 801b91c:	4610      	mov	r0, r2
 801b91e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b922:	2146      	movs	r1, #70	; 0x46
 801b924:	9400      	str	r4, [sp, #0]
 801b926:	f001 f8a9 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801b92a:	22ae      	movs	r2, #174	; 0xae
 801b92c:	4610      	mov	r0, r2
 801b92e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b932:	2146      	movs	r1, #70	; 0x46
 801b934:	9400      	str	r4, [sp, #0]
 801b936:	f001 f8a1 	bl	801ca7c <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801b93a:	22e3      	movs	r2, #227	; 0xe3
 801b93c:	9400      	str	r4, [sp, #0]
 801b93e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b942:	2146      	movs	r1, #70	; 0x46
 801b944:	4610      	mov	r0, r2
 801b946:	f001 f899 	bl	801ca7c <TFT_DrawLine>
 801b94a:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
 801b94e:	462b      	mov	r3, r5
 801b950:	4629      	mov	r1, r5
 801b952:	3d32      	subs	r5, #50	; 0x32
 801b954:	9400      	str	r4, [sp, #0]
 801b956:	22e8      	movs	r2, #232	; 0xe8
 801b958:	2011      	movs	r0, #17
 801b95a:	b2ad      	uxth	r5, r5
 801b95c:	f001 f88e 	bl	801ca7c <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801b960:	2d4a      	cmp	r5, #74	; 0x4a
 801b962:	d1f4      	bne.n	801b94e <Spectral_Axes+0x182>
 801b964:	e779      	b.n	801b85a <Spectral_Axes+0x8e>
	...

0801b968 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801b968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b96c:	4d6b      	ldr	r5, [pc, #428]	; (801bb1c <Spectral_PAR_Range+0x1b4>)
 801b96e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801bb28 <Spectral_PAR_Range+0x1c0>
 801b972:	4f6b      	ldr	r7, [pc, #428]	; (801bb20 <Spectral_PAR_Range+0x1b8>)
 801b974:	4e6b      	ldr	r6, [pc, #428]	; (801bb24 <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801b976:	2800      	cmp	r0, #0
 801b978:	d146      	bne.n	801ba08 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801b97a:	882a      	ldrh	r2, [r5, #0]
 801b97c:	2363      	movs	r3, #99	; 0x63
 801b97e:	0892      	lsrs	r2, r2, #2
 801b980:	9300      	str	r3, [sp, #0]
 801b982:	3213      	adds	r2, #19
 801b984:	f240 139b 	movw	r3, #411	; 0x19b
 801b988:	2169      	movs	r1, #105	; 0x69
 801b98a:	2013      	movs	r0, #19
 801b98c:	f001 f8d3 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801b990:	8828      	ldrh	r0, [r5, #0]
 801b992:	f8b8 2000 	ldrh.w	r2, [r8]
 801b996:	f644 33d4 	movw	r3, #19412	; 0x4bd4
 801b99a:	0892      	lsrs	r2, r2, #2
 801b99c:	0880      	lsrs	r0, r0, #2
 801b99e:	9300      	str	r3, [sp, #0]
 801b9a0:	3213      	adds	r2, #19
 801b9a2:	f240 139b 	movw	r3, #411	; 0x19b
 801b9a6:	2169      	movs	r1, #105	; 0x69
 801b9a8:	3013      	adds	r0, #19
 801b9aa:	f001 f8c4 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801b9ae:	883a      	ldrh	r2, [r7, #0]
 801b9b0:	f8b8 0000 	ldrh.w	r0, [r8]
 801b9b4:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b9b8:	0892      	lsrs	r2, r2, #2
 801b9ba:	0880      	lsrs	r0, r0, #2
 801b9bc:	9300      	str	r3, [sp, #0]
 801b9be:	3213      	adds	r2, #19
 801b9c0:	f240 139b 	movw	r3, #411	; 0x19b
 801b9c4:	2169      	movs	r1, #105	; 0x69
 801b9c6:	3013      	adds	r0, #19
 801b9c8:	f001 f8b5 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801b9cc:	8838      	ldrh	r0, [r7, #0]
 801b9ce:	8832      	ldrh	r2, [r6, #0]
 801b9d0:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b9d4:	0892      	lsrs	r2, r2, #2
 801b9d6:	0880      	lsrs	r0, r0, #2
 801b9d8:	9300      	str	r3, [sp, #0]
 801b9da:	3213      	adds	r2, #19
 801b9dc:	f240 139b 	movw	r3, #411	; 0x19b
 801b9e0:	2169      	movs	r1, #105	; 0x69
 801b9e2:	3013      	adds	r0, #19
 801b9e4:	f001 f8a7 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801b9e8:	8830      	ldrh	r0, [r6, #0]
 801b9ea:	f646 0382 	movw	r3, #26754	; 0x6882
 801b9ee:	0880      	lsrs	r0, r0, #2
 801b9f0:	9300      	str	r3, [sp, #0]
 801b9f2:	f240 120d 	movw	r2, #269	; 0x10d
 801b9f6:	f240 139b 	movw	r3, #411	; 0x19b
 801b9fa:	2169      	movs	r1, #105	; 0x69
 801b9fc:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801b9fe:	f001 f89a 	bl	801cb36 <TFT_FillRectangle>
	}
}
 801ba02:	b002      	add	sp, #8
 801ba04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801ba08:	2801      	cmp	r0, #1
 801ba0a:	f04f 0403 	mov.w	r4, #3
 801ba0e:	d142      	bne.n	801ba96 <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801ba10:	882b      	ldrh	r3, [r5, #0]
 801ba12:	f8b8 1000 	ldrh.w	r1, [r8]
 801ba16:	fbb3 f3f4 	udiv	r3, r3, r4
 801ba1a:	f240 1593 	movw	r5, #403	; 0x193
 801ba1e:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801ba22:	1aeb      	subs	r3, r5, r3
 801ba24:	fbb1 f1f4 	udiv	r1, r1, r4
 801ba28:	1a69      	subs	r1, r5, r1
 801ba2a:	9200      	str	r2, [sp, #0]
 801ba2c:	b29b      	uxth	r3, r3
 801ba2e:	22fd      	movs	r2, #253	; 0xfd
 801ba30:	b289      	uxth	r1, r1
 801ba32:	202d      	movs	r0, #45	; 0x2d
 801ba34:	f001 f87f 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801ba38:	8839      	ldrh	r1, [r7, #0]
 801ba3a:	f8b8 3000 	ldrh.w	r3, [r8]
 801ba3e:	fbb1 f1f4 	udiv	r1, r1, r4
 801ba42:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801ba46:	fbb3 f3f4 	udiv	r3, r3, r4
 801ba4a:	1a69      	subs	r1, r5, r1
 801ba4c:	1aeb      	subs	r3, r5, r3
 801ba4e:	9200      	str	r2, [sp, #0]
 801ba50:	b29b      	uxth	r3, r3
 801ba52:	22fd      	movs	r2, #253	; 0xfd
 801ba54:	b289      	uxth	r1, r1
 801ba56:	202d      	movs	r0, #45	; 0x2d
 801ba58:	f001 f86d 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801ba5c:	883b      	ldrh	r3, [r7, #0]
 801ba5e:	8831      	ldrh	r1, [r6, #0]
 801ba60:	fbb3 f3f4 	udiv	r3, r3, r4
 801ba64:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801ba68:	1aeb      	subs	r3, r5, r3
 801ba6a:	fbb1 f1f4 	udiv	r1, r1, r4
 801ba6e:	1a69      	subs	r1, r5, r1
 801ba70:	9200      	str	r2, [sp, #0]
 801ba72:	b29b      	uxth	r3, r3
 801ba74:	22fd      	movs	r2, #253	; 0xfd
 801ba76:	b289      	uxth	r1, r1
 801ba78:	202d      	movs	r0, #45	; 0x2d
 801ba7a:	f001 f85c 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801ba7e:	f646 0282 	movw	r2, #26754	; 0x6882
 801ba82:	8833      	ldrh	r3, [r6, #0]
 801ba84:	fbb3 f3f4 	udiv	r3, r3, r4
 801ba88:	1aeb      	subs	r3, r5, r3
 801ba8a:	9200      	str	r2, [sp, #0]
 801ba8c:	b29b      	uxth	r3, r3
 801ba8e:	22fd      	movs	r2, #253	; 0xfd
 801ba90:	2146      	movs	r1, #70	; 0x46
 801ba92:	202d      	movs	r0, #45	; 0x2d
 801ba94:	e7b3      	b.n	801b9fe <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801ba96:	8829      	ldrh	r1, [r5, #0]
 801ba98:	f8b8 3000 	ldrh.w	r3, [r8]
 801ba9c:	fbb1 f1f4 	udiv	r1, r1, r4
 801baa0:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801baa4:	fbb3 f3f4 	udiv	r3, r3, r4
 801baa8:	314a      	adds	r1, #74	; 0x4a
 801baaa:	334a      	adds	r3, #74	; 0x4a
 801baac:	9200      	str	r2, [sp, #0]
 801baae:	b29b      	uxth	r3, r3
 801bab0:	22e3      	movs	r2, #227	; 0xe3
 801bab2:	b289      	uxth	r1, r1
 801bab4:	2013      	movs	r0, #19
 801bab6:	f001 f83e 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801baba:	883b      	ldrh	r3, [r7, #0]
 801babc:	f8b8 1000 	ldrh.w	r1, [r8]
 801bac0:	fbb3 f3f4 	udiv	r3, r3, r4
 801bac4:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801bac8:	334a      	adds	r3, #74	; 0x4a
 801baca:	fbb1 f1f4 	udiv	r1, r1, r4
 801bace:	314a      	adds	r1, #74	; 0x4a
 801bad0:	9200      	str	r2, [sp, #0]
 801bad2:	b29b      	uxth	r3, r3
 801bad4:	22e3      	movs	r2, #227	; 0xe3
 801bad6:	b289      	uxth	r1, r1
 801bad8:	2013      	movs	r0, #19
 801bada:	f001 f82c 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801bade:	8839      	ldrh	r1, [r7, #0]
 801bae0:	8833      	ldrh	r3, [r6, #0]
 801bae2:	fbb1 f1f4 	udiv	r1, r1, r4
 801bae6:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801baea:	fbb3 f3f4 	udiv	r3, r3, r4
 801baee:	314a      	adds	r1, #74	; 0x4a
 801baf0:	334a      	adds	r3, #74	; 0x4a
 801baf2:	9200      	str	r2, [sp, #0]
 801baf4:	b29b      	uxth	r3, r3
 801baf6:	22e3      	movs	r2, #227	; 0xe3
 801baf8:	b289      	uxth	r1, r1
 801bafa:	2013      	movs	r0, #19
 801bafc:	f001 f81b 	bl	801cb36 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801bb00:	f646 0382 	movw	r3, #26754	; 0x6882
 801bb04:	8831      	ldrh	r1, [r6, #0]
 801bb06:	fbb1 f1f4 	udiv	r1, r1, r4
 801bb0a:	314a      	adds	r1, #74	; 0x4a
 801bb0c:	9300      	str	r3, [sp, #0]
 801bb0e:	22e3      	movs	r2, #227	; 0xe3
 801bb10:	f240 1397 	movw	r3, #407	; 0x197
 801bb14:	b289      	uxth	r1, r1
 801bb16:	2013      	movs	r0, #19
 801bb18:	e771      	b.n	801b9fe <Spectral_PAR_Range+0x96>
 801bb1a:	bf00      	nop
 801bb1c:	20095aaa 	.word	0x20095aaa
 801bb20:	20095d74 	.word	0x20095d74
 801bb24:	20095aa8 	.word	0x20095aa8
 801bb28:	20095b94 	.word	0x20095b94

0801bb2c <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801bb2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801bb2e:	ac02      	add	r4, sp, #8
 801bb30:	2300      	movs	r3, #0
 801bb32:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801bb36:	4606      	mov	r6, r0
 801bb38:	4d67      	ldr	r5, [pc, #412]	; (801bcd8 <Spectral_Axes_Text+0x1ac>)
 801bb3a:	2800      	cmp	r0, #0
 801bb3c:	d162      	bne.n	801bc04 <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801bb3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bb42:	f001 fa27 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801bb46:	2063      	movs	r0, #99	; 0x63
 801bb48:	f001 fa2a 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801bb4c:	4863      	ldr	r0, [pc, #396]	; (801bcdc <Spectral_Axes_Text+0x1b0>)
 801bb4e:	f001 fa1b 	bl	801cf88 <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801bb52:	2230      	movs	r2, #48	; 0x30
 801bb54:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801bb58:	2005      	movs	r0, #5
 801bb5a:	f001 fadf 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801bb5e:	222e      	movs	r2, #46	; 0x2e
 801bb60:	f240 1101 	movw	r1, #257	; 0x101
 801bb64:	2007      	movs	r0, #7
 801bb66:	f001 fad9 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801bb6a:	2230      	movs	r2, #48	; 0x30
 801bb6c:	f240 1101 	movw	r1, #257	; 0x101
 801bb70:	2003      	movs	r0, #3
 801bb72:	f001 fad3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801bb76:	2235      	movs	r2, #53	; 0x35
 801bb78:	f240 1101 	movw	r1, #257	; 0x101
 801bb7c:	200b      	movs	r0, #11
 801bb7e:	f001 facd 	bl	801d11c <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801bb82:	2231      	movs	r2, #49	; 0x31
 801bb84:	2169      	movs	r1, #105	; 0x69
 801bb86:	4630      	mov	r0, r6
 801bb88:	f001 fac8 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801bb8c:	222e      	movs	r2, #46	; 0x2e
 801bb8e:	2169      	movs	r1, #105	; 0x69
 801bb90:	2004      	movs	r0, #4
 801bb92:	f001 fac3 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801bb96:	2230      	movs	r2, #48	; 0x30
 801bb98:	2169      	movs	r1, #105	; 0x69
 801bb9a:	2009      	movs	r0, #9
 801bb9c:	f001 fabe 	bl	801d11c <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801bba0:	882a      	ldrh	r2, [r5, #0]
 801bba2:	494f      	ldr	r1, [pc, #316]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bba4:	4620      	mov	r0, r4
 801bba6:	f004 feb5 	bl	8020914 <sprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801bbaa:	2303      	movs	r3, #3
 801bbac:	4622      	mov	r2, r4
 801bbae:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801bbb2:	200b      	movs	r0, #11
 801bbb4:	f001 fb0a 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801bbb8:	886a      	ldrh	r2, [r5, #2]
 801bbba:	4949      	ldr	r1, [pc, #292]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	f004 fea9 	bl	8020914 <sprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801bbc2:	2303      	movs	r3, #3
 801bbc4:	4622      	mov	r2, r4
 801bbc6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801bbca:	2055      	movs	r0, #85	; 0x55
 801bbcc:	f001 fafe 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801bbd0:	88aa      	ldrh	r2, [r5, #4]
 801bbd2:	4943      	ldr	r1, [pc, #268]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f004 fe9d 	bl	8020914 <sprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801bbda:	2303      	movs	r3, #3
 801bbdc:	4622      	mov	r2, r4
 801bbde:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801bbe2:	20a5      	movs	r0, #165	; 0xa5
 801bbe4:	f001 faf2 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801bbe8:	88ea      	ldrh	r2, [r5, #6]
 801bbea:	493d      	ldr	r1, [pc, #244]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bbec:	4620      	mov	r0, r4
 801bbee:	f004 fe91 	bl	8020914 <sprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801bbf2:	2303      	movs	r3, #3
 801bbf4:	4622      	mov	r2, r4
 801bbf6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801bbfa:	20f5      	movs	r0, #245	; 0xf5
 801bbfc:	f001 fae6 	bl	801d1cc <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801bc00:	b003      	add	sp, #12
 801bc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc04:	4f37      	ldr	r7, [pc, #220]	; (801bce4 <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801bc06:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801bc08:	bf14      	ite	ne
 801bc0a:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801bc0c:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801bc0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801bc12:	bf18      	it	ne
 801bc14:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801bc16:	f001 f9bd 	bl	801cf94 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801bc1a:	2063      	movs	r0, #99	; 0x63
 801bc1c:	f001 f9c0 	bl	801cfa0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801bc20:	482e      	ldr	r0, [pc, #184]	; (801bcdc <Spectral_Axes_Text+0x1b0>)
 801bc22:	f001 f9b1 	bl	801cf88 <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801bc26:	882a      	ldrh	r2, [r5, #0]
 801bc28:	492d      	ldr	r1, [pc, #180]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bc2a:	4620      	mov	r0, r4
 801bc2c:	f004 fe72 	bl	8020914 <sprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801bc30:	2303      	movs	r3, #3
 801bc32:	4622      	mov	r2, r4
 801bc34:	f44f 7181 	mov.w	r1, #258	; 0x102
 801bc38:	2041      	movs	r0, #65	; 0x41
 801bc3a:	f001 fac7 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801bc3e:	886a      	ldrh	r2, [r5, #2]
 801bc40:	4927      	ldr	r1, [pc, #156]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bc42:	4620      	mov	r0, r4
 801bc44:	f004 fe66 	bl	8020914 <sprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801bc48:	2303      	movs	r3, #3
 801bc4a:	4622      	mov	r2, r4
 801bc4c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801bc50:	20a5      	movs	r0, #165	; 0xa5
 801bc52:	f001 fabb 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801bc56:	88aa      	ldrh	r2, [r5, #4]
 801bc58:	4921      	ldr	r1, [pc, #132]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bc5a:	4620      	mov	r0, r4
 801bc5c:	f004 fe5a 	bl	8020914 <sprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801bc60:	2303      	movs	r3, #3
 801bc62:	4622      	mov	r2, r4
 801bc64:	f44f 7181 	mov.w	r1, #258	; 0x102
 801bc68:	f240 1009 	movw	r0, #265	; 0x109
 801bc6c:	f001 faae 	bl	801d1cc <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801bc70:	88ea      	ldrh	r2, [r5, #6]
 801bc72:	491b      	ldr	r1, [pc, #108]	; (801bce0 <Spectral_Axes_Text+0x1b4>)
 801bc74:	4620      	mov	r0, r4
 801bc76:	f004 fe4d 	bl	8020914 <sprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801bc7a:	2303      	movs	r3, #3
 801bc7c:	4622      	mov	r2, r4
 801bc7e:	f44f 7181 	mov.w	r1, #258	; 0x102
 801bc82:	f240 106d 	movw	r0, #365	; 0x16d
 801bc86:	f001 faa1 	bl	801d1cc <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801bc8a:	2230      	movs	r2, #48	; 0x30
 801bc8c:	21fa      	movs	r1, #250	; 0xfa
 801bc8e:	2041      	movs	r0, #65	; 0x41
 801bc90:	f001 fa44 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801bc94:	2230      	movs	r2, #48	; 0x30
 801bc96:	2195      	movs	r1, #149	; 0x95
 801bc98:	2039      	movs	r0, #57	; 0x39
 801bc9a:	f001 fa3f 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801bc9e:	222e      	movs	r2, #46	; 0x2e
 801bca0:	2195      	movs	r1, #149	; 0x95
 801bca2:	203e      	movs	r0, #62	; 0x3e
 801bca4:	f001 fa3a 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801bca8:	2235      	movs	r2, #53	; 0x35
 801bcaa:	2195      	movs	r1, #149	; 0x95
 801bcac:	2043      	movs	r0, #67	; 0x43
 801bcae:	f001 fa35 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801bcb2:	2231      	movs	r2, #49	; 0x31
 801bcb4:	212b      	movs	r1, #43	; 0x2b
 801bcb6:	2039      	movs	r0, #57	; 0x39
 801bcb8:	f001 fa30 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801bcbc:	222e      	movs	r2, #46	; 0x2e
 801bcbe:	212b      	movs	r1, #43	; 0x2b
 801bcc0:	203e      	movs	r0, #62	; 0x3e
 801bcc2:	f001 fa2b 	bl	801d11c <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801bcc6:	2230      	movs	r2, #48	; 0x30
 801bcc8:	212b      	movs	r1, #43	; 0x2b
 801bcca:	2043      	movs	r0, #67	; 0x43
 801bccc:	f001 fa26 	bl	801d11c <TFT_DrawChar>
		TFT_direction = 0x00;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	703b      	strb	r3, [r7, #0]
}
 801bcd4:	e794      	b.n	801bc00 <Spectral_Axes_Text+0xd4>
 801bcd6:	bf00      	nop
 801bcd8:	20055948 	.word	0x20055948
 801bcdc:	20000210 	.word	0x20000210
 801bce0:	0803244a 	.word	0x0803244a
 801bce4:	200056a0 	.word	0x200056a0

0801bce8 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801bce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcec:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bcf0:	f1b8 0f00 	cmp.w	r8, #0
 801bcf4:	bf0c      	ite	eq
 801bcf6:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801bcfa:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801bcfe:	4682      	mov	sl, r0
 801bd00:	461f      	mov	r7, r3
 801bd02:	4614      	mov	r4, r2
 801bd04:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bd08:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801bd0a:	f100 0b01 	add.w	fp, r0, #1
 801bd0e:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801bd10:	f1b8 0f00 	cmp.w	r8, #0
 801bd14:	d10e      	bne.n	801bd34 <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801bd16:	8863      	ldrh	r3, [r4, #2]
 801bd18:	8821      	ldrh	r1, [r4, #0]
 801bd1a:	eb00 020b 	add.w	r2, r0, fp
 801bd1e:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801bd22:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801bd26:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801bd28:	9700      	str	r7, [sp, #0]
 801bd2a:	b29b      	uxth	r3, r3
 801bd2c:	b292      	uxth	r2, r2
 801bd2e:	b289      	uxth	r1, r1
 801bd30:	b280      	uxth	r0, r0
 801bd32:	e013      	b.n	801bd5c <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801bd34:	f1b8 0f01 	cmp.w	r8, #1
 801bd38:	d11d      	bne.n	801bd76 <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801bd3a:	8872      	ldrh	r2, [r6, #2]
 801bd3c:	f8b6 e000 	ldrh.w	lr, [r6]
 801bd40:	9700      	str	r7, [sp, #0]
 801bd42:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801bd46:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801bd4a:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801bd4e:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801bd52:	b29b      	uxth	r3, r3
 801bd54:	b292      	uxth	r2, r2
 801bd56:	b289      	uxth	r1, r1
 801bd58:	fa1f f08e 	uxth.w	r0, lr
 801bd5c:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801bd5e:	f000 fe8d 	bl	801ca7c <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801bd62:	b2ab      	uxth	r3, r5
 801bd64:	4599      	cmp	r9, r3
 801bd66:	f104 0402 	add.w	r4, r4, #2
 801bd6a:	f1a6 0602 	sub.w	r6, r6, #2
 801bd6e:	d8ce      	bhi.n	801bd0e <Spectral_DrawGraph_Const+0x26>
	}
}
 801bd70:	b003      	add	sp, #12
 801bd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801bd76:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801bd7a:	8862      	ldrh	r2, [r4, #2]
 801bd7c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801bd80:	8820      	ldrh	r0, [r4, #0]
 801bd82:	3212      	adds	r2, #18
 801bd84:	3012      	adds	r0, #18
 801bd86:	e7cf      	b.n	801bd28 <Spectral_DrawGraph_Const+0x40>

0801bd88 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd8c:	b087      	sub	sp, #28
 801bd8e:	4691      	mov	r9, r2
 801bd90:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801bd94:	9004      	str	r0, [sp, #16]
    float buf_pix;
//    static uint16_t
    uint16_t i, j = 0;
    static uint16_t GraphData_Prev[355];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bd96:	2e00      	cmp	r6, #0
 801bd98:	bf0c      	ite	eq
 801bd9a:	23f0      	moveq	r3, #240	; 0xf0
 801bd9c:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801bda0:	9303      	str	r3, [sp, #12]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801bda2:	4bc9      	ldr	r3, [pc, #804]	; (801c0c8 <Spectral_DrawGraph_Line2+0x340>)
 801bda4:	781a      	ldrb	r2, [r3, #0]
 801bda6:	42b2      	cmp	r2, r6
 801bda8:	d01b      	beq.n	801bde2 <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801bdaa:	2463      	movs	r4, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801bdac:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801bdae:	f240 120f 	movw	r2, #271	; 0x10f
 801bdb2:	f240 13a5 	movw	r3, #421	; 0x1a5
 801bdb6:	9400      	str	r4, [sp, #0]
 801bdb8:	2137      	movs	r1, #55	; 0x37
 801bdba:	2001      	movs	r0, #1
 801bdbc:	f000 febb 	bl	801cb36 <TFT_FillRectangle>

        if(Graph_Field&PPF_Bands)
 801bdc0:	4bc2      	ldr	r3, [pc, #776]	; (801c0cc <Spectral_DrawGraph_Line2+0x344>)
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	07db      	lsls	r3, r3, #31
 801bdc6:	f140 8087 	bpl.w	801bed8 <Spectral_DrawGraph_Line2+0x150>
        {
            Spectral_PAR_Range(direction);
 801bdca:	4630      	mov	r0, r6
 801bdcc:	f7ff fdcc 	bl	801b968 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

//    Spectral_Axes(direction);
//    Spectral_Axes_Text(direction);
	memset(GraphData_Prev, 0, sizeof(GraphData_Prev));
 801bdd0:	f240 22c6 	movw	r2, #710	; 0x2c6
 801bdd4:	2100      	movs	r1, #0
 801bdd6:	48be      	ldr	r0, [pc, #760]	; (801c0d0 <Spectral_DrawGraph_Line2+0x348>)
 801bdd8:	f004 fd93 	bl	8020902 <memset>
    screen_cnt = 0;
 801bddc:	4bbd      	ldr	r3, [pc, #756]	; (801c0d4 <Spectral_DrawGraph_Line2+0x34c>)
 801bdde:	2200      	movs	r2, #0
 801bde0:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801bde2:	4bbd      	ldr	r3, [pc, #756]	; (801c0d8 <Spectral_DrawGraph_Line2+0x350>)
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);

//          DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801bde4:	f8df b300 	ldr.w	fp, [pc, #768]	; 801c0e8 <Spectral_DrawGraph_Line2+0x360>
 801bde8:	4dbc      	ldr	r5, [pc, #752]	; (801c0dc <Spectral_DrawGraph_Line2+0x354>)
    flag_refresh = 1;
 801bdea:	2401      	movs	r4, #1
 801bdec:	701c      	strb	r4, [r3, #0]
    i_coord = 0;
 801bdee:	4bbc      	ldr	r3, [pc, #752]	; (801c0e0 <Spectral_DrawGraph_Line2+0x358>)
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	801a      	strh	r2, [r3, #0]
 801bdf4:	1c63      	adds	r3, r4, #1
        if(direction == 0x00){
 801bdf6:	2e00      	cmp	r6, #0
 801bdf8:	f040 8098 	bne.w	801bf2c <Spectral_DrawGraph_Line2+0x1a4>
            flag_spectral = 1;
 801bdfc:	2201      	movs	r2, #1
            			if((i+4)%40 == 0) i++;
 801bdfe:	1d20      	adds	r0, r4, #4
 801be00:	2128      	movs	r1, #40	; 0x28
            flag_spectral = 1;
 801be02:	f88b 2000 	strb.w	r2, [fp]
            			if((i+4)%40 == 0) i++;
 801be06:	fb90 f2f1 	sdiv	r2, r0, r1
 801be0a:	fb01 0212 	mls	r2, r1, r2, r0
 801be0e:	b902      	cbnz	r2, 801be12 <Spectral_DrawGraph_Line2+0x8a>
 801be10:	b29c      	uxth	r4, r3
            			if(412-GraphData[i] < 181)
 801be12:	0063      	lsls	r3, r4, #1
 801be14:	9305      	str	r3, [sp, #20]
 801be16:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801be1a:	9a04      	ldr	r2, [sp, #16]
 801be1c:	4fb1      	ldr	r7, [pc, #708]	; (801c0e4 <Spectral_DrawGraph_Line2+0x35c>)
 801be1e:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801be22:	2bb4      	cmp	r3, #180	; 0xb4
 801be24:	eb04 0a02 	add.w	sl, r4, r2
 801be28:	b299      	uxth	r1, r3
 801be2a:	dc5f      	bgt.n	801beec <Spectral_DrawGraph_Line2+0x164>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 180, Vertical_color_dara[i]);
 801be2c:	fa1f f88a 	uxth.w	r8, sl
 801be30:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801be34:	9300      	str	r3, [sp, #0]
 801be36:	4642      	mov	r2, r8
 801be38:	23b4      	movs	r3, #180	; 0xb4
 801be3a:	4640      	mov	r0, r8
 801be3c:	f001 fa0e 	bl	801d25c <DrawLineX>
            				DrawLineX(ZeroX+i, 182, ZeroX+i, 256, Vertical_color_dara[i]);
 801be40:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801be44:	9300      	str	r3, [sp, #0]
 801be46:	4642      	mov	r2, r8
 801be48:	f44f 7380 	mov.w	r3, #256	; 0x100
 801be4c:	21b6      	movs	r1, #182	; 0xb6
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801be4e:	4640      	mov	r0, r8
 801be50:	f001 fa04 	bl	801d25c <DrawLineX>
							DrawLineX(ZeroX+i, 258, ZeroX+i, 333, Vertical_color_dara[i]);
 801be54:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801be58:	9300      	str	r3, [sp, #0]
 801be5a:	4642      	mov	r2, r8
 801be5c:	f240 134d 	movw	r3, #333	; 0x14d
 801be60:	f44f 7181 	mov.w	r1, #258	; 0x102
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801be64:	4640      	mov	r0, r8
 801be66:	f001 f9f9 	bl	801d25c <DrawLineX>
							DrawLineX(ZeroX+i, 335, ZeroX+i, 411, Vertical_color_dara[i]);
 801be6a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801be6e:	9300      	str	r3, [sp, #0]
 801be70:	4642      	mov	r2, r8
 801be72:	f240 139b 	movw	r3, #411	; 0x19b
 801be76:	f240 114f 	movw	r1, #335	; 0x14f
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801be7a:	4610      	mov	r0, r2
 801be7c:	f001 f9ee 	bl	801d25c <DrawLineX>
						if(GraphData_Prev[i]>GraphData[i])	DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 412 - GraphData_Prev[i], TFT_Black_Bkgr);
 801be80:	4b93      	ldr	r3, [pc, #588]	; (801c0d0 <Spectral_DrawGraph_Line2+0x348>)
 801be82:	0062      	lsls	r2, r4, #1
 801be84:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801be88:	f839 1002 	ldrh.w	r1, [r9, r2]
 801be8c:	428b      	cmp	r3, r1
 801be8e:	d90c      	bls.n	801beaa <Spectral_DrawGraph_Line2+0x122>
 801be90:	2063      	movs	r0, #99	; 0x63
 801be92:	fa1f f28a 	uxth.w	r2, sl
 801be96:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801be9a:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801be9e:	9000      	str	r0, [sp, #0]
 801bea0:	b29b      	uxth	r3, r3
 801bea2:	b289      	uxth	r1, r1
 801bea4:	4610      	mov	r0, r2
				}

//				DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);


				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801bea6:	f001 f9d9 	bl	801d25c <DrawLineX>

//				DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801beaa:	2300      	movs	r3, #0
 801beac:	f88b 3000 	strb.w	r3, [fp]
    for(i = 1; i < graph_lenht; i++)
 801beb0:	3401      	adds	r4, #1
 801beb2:	9b03      	ldr	r3, [sp, #12]
 801beb4:	b2a4      	uxth	r4, r4
 801beb6:	42a3      	cmp	r3, r4
 801beb8:	d89c      	bhi.n	801bdf4 <Spectral_DrawGraph_Line2+0x6c>
					}
    memcpy(GraphData_Prev, GraphData, sizeof(GraphData_Prev));
 801beba:	f240 22c6 	movw	r2, #710	; 0x2c6
 801bebe:	4649      	mov	r1, r9
 801bec0:	4883      	ldr	r0, [pc, #524]	; (801c0d0 <Spectral_DrawGraph_Line2+0x348>)
 801bec2:	f004 fd13 	bl	80208ec <memcpy>
    Spectral_Axes(direction);
 801bec6:	4630      	mov	r0, r6
 801bec8:	f7ff fc80 	bl	801b7cc <Spectral_Axes>
	Spectral_Axes_Text(direction);
 801becc:	4630      	mov	r0, r6
}
 801bece:	b007      	add	sp, #28
 801bed0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Spectral_Axes_Text(direction);
 801bed4:	f7ff be2a 	b.w	801bb2c <Spectral_Axes_Text>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801bed8:	9400      	str	r4, [sp, #0]
 801beda:	f240 13a5 	movw	r3, #421	; 0x1a5
 801bede:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801bee2:	2137      	movs	r1, #55	; 0x37
 801bee4:	2005      	movs	r0, #5
 801bee6:	f000 fe26 	bl	801cb36 <TFT_FillRectangle>
 801beea:	e771      	b.n	801bdd0 <Spectral_DrawGraph_Line2+0x48>
            			else if(412-GraphData[i] < 257)
 801beec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bef0:	dc08      	bgt.n	801bf04 <Spectral_DrawGraph_Line2+0x17c>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801bef2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bef6:	9300      	str	r3, [sp, #0]
 801bef8:	fa1f f88a 	uxth.w	r8, sl
 801befc:	f44f 7380 	mov.w	r3, #256	; 0x100
 801bf00:	4642      	mov	r2, r8
 801bf02:	e7a4      	b.n	801be4e <Spectral_DrawGraph_Line2+0xc6>
            			else if(412-GraphData[i] < 334)
 801bf04:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 801bf08:	da08      	bge.n	801bf1c <Spectral_DrawGraph_Line2+0x194>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801bf0a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bf0e:	9300      	str	r3, [sp, #0]
 801bf10:	fa1f f88a 	uxth.w	r8, sl
 801bf14:	f240 134d 	movw	r3, #333	; 0x14d
 801bf18:	4642      	mov	r2, r8
 801bf1a:	e7a3      	b.n	801be64 <Spectral_DrawGraph_Line2+0xdc>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801bf1c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bf20:	9300      	str	r3, [sp, #0]
 801bf22:	fa1f f28a 	uxth.w	r2, sl
 801bf26:	f240 139b 	movw	r3, #411	; 0x19b
 801bf2a:	e7a6      	b.n	801be7a <Spectral_DrawGraph_Line2+0xf2>
        else if(direction == 0x01)
 801bf2c:	2e01      	cmp	r6, #1
 801bf2e:	d16a      	bne.n	801c006 <Spectral_DrawGraph_Line2+0x27e>
            if((i+18)%50 == 0) i++;
 801bf30:	f104 0012 	add.w	r0, r4, #18
 801bf34:	2132      	movs	r1, #50	; 0x32
 801bf36:	fb90 f2f1 	sdiv	r2, r0, r1
 801bf3a:	fb01 0212 	mls	r2, r1, r2, r0
            flag_spectral = 1;
 801bf3e:	f88b 6000 	strb.w	r6, [fp]
            if((i+18)%50 == 0) i++;
 801bf42:	b902      	cbnz	r2, 801bf46 <Spectral_DrawGraph_Line2+0x1be>
 801bf44:	b29c      	uxth	r4, r3
            if(253 - GraphData[graph_lenht-i] < 98)
 801bf46:	9b03      	ldr	r3, [sp, #12]
 801bf48:	eba3 0804 	sub.w	r8, r3, r4
 801bf4c:	f104 0748 	add.w	r7, r4, #72	; 0x48
 801bf50:	f839 3018 	ldrh.w	r3, [r9, r8, lsl #1]
 801bf54:	f1c3 03fd 	rsb	r3, r3, #253	; 0xfd
 801bf58:	2b61      	cmp	r3, #97	; 0x61
 801bf5a:	b298      	uxth	r0, r3
 801bf5c:	dc38      	bgt.n	801bfd0 <Spectral_DrawGraph_Line2+0x248>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 97, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bf5e:	b2bf      	uxth	r7, r7
 801bf60:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bf64:	9300      	str	r3, [sp, #0]
 801bf66:	2261      	movs	r2, #97	; 0x61
 801bf68:	463b      	mov	r3, r7
 801bf6a:	4639      	mov	r1, r7
 801bf6c:	f001 f976 	bl	801d25c <DrawLineX>
            	DrawLineX(99, 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bf70:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bf74:	9300      	str	r3, [sp, #0]
 801bf76:	2296      	movs	r2, #150	; 0x96
 801bf78:	463b      	mov	r3, r7
 801bf7a:	4639      	mov	r1, r7
 801bf7c:	2063      	movs	r0, #99	; 0x63
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bf7e:	f001 f96d 	bl	801d25c <DrawLineX>
				DrawLineX(152, 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bf82:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bf86:	9300      	str	r3, [sp, #0]
 801bf88:	22cb      	movs	r2, #203	; 0xcb
 801bf8a:	463b      	mov	r3, r7
 801bf8c:	4639      	mov	r1, r7
 801bf8e:	2098      	movs	r0, #152	; 0x98
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bf90:	f001 f964 	bl	801d25c <DrawLineX>
				DrawLineX(205, 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bf94:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bf98:	9300      	str	r3, [sp, #0]
 801bf9a:	22fc      	movs	r2, #252	; 0xfc
 801bf9c:	463b      	mov	r3, r7
 801bf9e:	4639      	mov	r1, r7
 801bfa0:	20cd      	movs	r0, #205	; 0xcd
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bfa2:	f001 f95b 	bl	801d25c <DrawLineX>
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);
 801bfa6:	4b4a      	ldr	r3, [pc, #296]	; (801c0d0 <Spectral_DrawGraph_Line2+0x348>)
 801bfa8:	f839 0018 	ldrh.w	r0, [r9, r8, lsl #1]
 801bfac:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
 801bfb0:	4282      	cmp	r2, r0
 801bfb2:	f67f af7a 	bls.w	801beaa <Spectral_DrawGraph_Line2+0x122>
 801bfb6:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801bfba:	b29b      	uxth	r3, r3
 801bfbc:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801bfc0:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801bfc4:	2163      	movs	r1, #99	; 0x63
 801bfc6:	9100      	str	r1, [sp, #0]
 801bfc8:	b292      	uxth	r2, r2
 801bfca:	4619      	mov	r1, r3
 801bfcc:	b280      	uxth	r0, r0
 801bfce:	e76a      	b.n	801bea6 <Spectral_DrawGraph_Line2+0x11e>
            else if(253 - GraphData[graph_lenht-i] < 151)
 801bfd0:	2b96      	cmp	r3, #150	; 0x96
 801bfd2:	dc07      	bgt.n	801bfe4 <Spectral_DrawGraph_Line2+0x25c>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bfd4:	b2bf      	uxth	r7, r7
 801bfd6:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bfda:	9300      	str	r3, [sp, #0]
 801bfdc:	2296      	movs	r2, #150	; 0x96
 801bfde:	463b      	mov	r3, r7
 801bfe0:	4639      	mov	r1, r7
 801bfe2:	e7cc      	b.n	801bf7e <Spectral_DrawGraph_Line2+0x1f6>
            else if(253 - GraphData[graph_lenht-i] < 204)
 801bfe4:	2bcb      	cmp	r3, #203	; 0xcb
 801bfe6:	dc07      	bgt.n	801bff8 <Spectral_DrawGraph_Line2+0x270>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bfe8:	b2bf      	uxth	r7, r7
 801bfea:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bfee:	9300      	str	r3, [sp, #0]
 801bff0:	22cb      	movs	r2, #203	; 0xcb
 801bff2:	463b      	mov	r3, r7
 801bff4:	4639      	mov	r1, r7
 801bff6:	e7cb      	b.n	801bf90 <Spectral_DrawGraph_Line2+0x208>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bff8:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 801bffc:	9200      	str	r2, [sp, #0]
 801bffe:	b2bb      	uxth	r3, r7
 801c000:	22fc      	movs	r2, #252	; 0xfc
 801c002:	4619      	mov	r1, r3
 801c004:	e7cd      	b.n	801bfa2 <Spectral_DrawGraph_Line2+0x21a>
        } else if(direction == 0x02)
 801c006:	2e02      	cmp	r6, #2
 801c008:	f47f af52 	bne.w	801beb0 <Spectral_DrawGraph_Line2+0x128>
				{flag_spectral = 1; 
 801c00c:	2201      	movs	r2, #1
				if((i+2)%50 == 0) i++;
 801c00e:	1ca0      	adds	r0, r4, #2
 801c010:	2132      	movs	r1, #50	; 0x32
				{flag_spectral = 1; 
 801c012:	f88b 2000 	strb.w	r2, [fp]
				if((i+2)%50 == 0) i++;
 801c016:	fb90 f2f1 	sdiv	r2, r0, r1
 801c01a:	fb01 0212 	mls	r2, r1, r2, r0
 801c01e:	b902      	cbnz	r2, 801c022 <Spectral_DrawGraph_Line2+0x29a>
 801c020:	b29c      	uxth	r4, r3
				if(GraphData[i]+18 > 174)
 801c022:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801c026:	2b9c      	cmp	r3, #156	; 0x9c
 801c028:	ea4f 0844 	mov.w	r8, r4, lsl #1
 801c02c:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 801c030:	f103 0012 	add.w	r0, r3, #18
 801c034:	dd32      	ble.n	801c09c <Spectral_DrawGraph_Line2+0x314>
					DrawLineX(GraphData[i]+18, 76+i, 175, 76+i, Horizontal_color_dara[i]);
 801c036:	b2bf      	uxth	r7, r7
 801c038:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801c03c:	9300      	str	r3, [sp, #0]
 801c03e:	22af      	movs	r2, #175	; 0xaf
 801c040:	463b      	mov	r3, r7
 801c042:	4639      	mov	r1, r7
 801c044:	b280      	uxth	r0, r0
 801c046:	f001 f909 	bl	801d25c <DrawLineX>
					DrawLineX(173, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801c04a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801c04e:	9300      	str	r3, [sp, #0]
 801c050:	227a      	movs	r2, #122	; 0x7a
 801c052:	463b      	mov	r3, r7
 801c054:	4639      	mov	r1, r7
 801c056:	20ad      	movs	r0, #173	; 0xad
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801c058:	f001 f900 	bl	801d25c <DrawLineX>
					DrawLineX(120, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801c05c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801c060:	9300      	str	r3, [sp, #0]
 801c062:	2245      	movs	r2, #69	; 0x45
 801c064:	463b      	mov	r3, r7
 801c066:	4639      	mov	r1, r7
 801c068:	2078      	movs	r0, #120	; 0x78
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801c06a:	f001 f8f7 	bl	801d25c <DrawLineX>
					DrawLineX(67, 76+i, 19, 76+i, Horizontal_color_dara[i]);
 801c06e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801c072:	9300      	str	r3, [sp, #0]
 801c074:	2213      	movs	r2, #19
 801c076:	463b      	mov	r3, r7
 801c078:	4639      	mov	r1, r7
 801c07a:	2043      	movs	r0, #67	; 0x43
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801c07c:	f001 f8ee 	bl	801d25c <DrawLineX>
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801c080:	4b13      	ldr	r3, [pc, #76]	; (801c0d0 <Spectral_DrawGraph_Line2+0x348>)
 801c082:	f839 0008 	ldrh.w	r0, [r9, r8]
 801c086:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 801c08a:	4282      	cmp	r2, r0
 801c08c:	f67f af0d 	bls.w	801beaa <Spectral_DrawGraph_Line2+0x122>
 801c090:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 801c094:	b29b      	uxth	r3, r3
 801c096:	3212      	adds	r2, #18
 801c098:	3012      	adds	r0, #18
 801c09a:	e793      	b.n	801bfc4 <Spectral_DrawGraph_Line2+0x23c>
				else if(GraphData[i]+18 > 121)
 801c09c:	2b67      	cmp	r3, #103	; 0x67
 801c09e:	dd08      	ble.n	801c0b2 <Spectral_DrawGraph_Line2+0x32a>
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801c0a0:	b2bf      	uxth	r7, r7
 801c0a2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801c0a6:	9300      	str	r3, [sp, #0]
 801c0a8:	227a      	movs	r2, #122	; 0x7a
 801c0aa:	463b      	mov	r3, r7
 801c0ac:	4639      	mov	r1, r7
 801c0ae:	b280      	uxth	r0, r0
 801c0b0:	e7d2      	b.n	801c058 <Spectral_DrawGraph_Line2+0x2d0>
				else if(GraphData[i]+18 > 68)
 801c0b2:	2b32      	cmp	r3, #50	; 0x32
 801c0b4:	dd1a      	ble.n	801c0ec <Spectral_DrawGraph_Line2+0x364>
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801c0b6:	b2bf      	uxth	r7, r7
 801c0b8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801c0bc:	9300      	str	r3, [sp, #0]
 801c0be:	2245      	movs	r2, #69	; 0x45
 801c0c0:	463b      	mov	r3, r7
 801c0c2:	4639      	mov	r1, r7
 801c0c4:	b280      	uxth	r0, r0
 801c0c6:	e7d0      	b.n	801c06a <Spectral_DrawGraph_Line2+0x2e2>
 801c0c8:	20093689 	.word	0x20093689
 801c0cc:	20005702 	.word	0x20005702
 801c0d0:	20009768 	.word	0x20009768
 801c0d4:	20009cf8 	.word	0x20009cf8
 801c0d8:	20009cf4 	.word	0x20009cf4
 801c0dc:	20000a3e 	.word	0x20000a3e
 801c0e0:	20009cf6 	.word	0x20009cf6
 801c0e4:	20000cd2 	.word	0x20000cd2
 801c0e8:	20009cf5 	.word	0x20009cf5
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801c0ec:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 801c0f0:	9200      	str	r2, [sp, #0]
 801c0f2:	b2bb      	uxth	r3, r7
 801c0f4:	2212      	movs	r2, #18
 801c0f6:	4619      	mov	r1, r3
 801c0f8:	b280      	uxth	r0, r0
 801c0fa:	e7bf      	b.n	801c07c <Spectral_DrawGraph_Line2+0x2f4>

0801c0fc <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801c0fc:	b570      	push	{r4, r5, r6, lr}
 801c0fe:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801c102:	eddf 7a23 	vldr	s15, [pc, #140]	; 801c190 <Rabs_graph_to_display+0x94>
 801c106:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801c194 <Rabs_graph_to_display+0x98>
 801c10a:	2800      	cmp	r0, #0
{    
 801c10c:	b082      	sub	sp, #8
 801c10e:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801c110:	f240 22c6 	movw	r2, #710	; 0x2c6
 801c114:	f04f 0100 	mov.w	r1, #0
 801c118:	481f      	ldr	r0, [pc, #124]	; (801c198 <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801c11a:	bf14      	ite	ne
 801c11c:	2403      	movne	r4, #3
 801c11e:	2404      	moveq	r4, #4
 801c120:	bf08      	it	eq
 801c122:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801c126:	f004 fbec 	bl	8020902 <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801c12a:	4b1c      	ldr	r3, [pc, #112]	; (801c19c <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801c12c:	481a      	ldr	r0, [pc, #104]	; (801c198 <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801c12e:	ed93 7a00 	vldr	s14, [r3]
 801c132:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801c134:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801c136:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801c13a:	edd2 6a00 	vldr	s13, [r2]
 801c13e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c142:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801c144:	b28d      	uxth	r5, r1
 801c146:	b29b      	uxth	r3, r3
 801c148:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801c14a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801c14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c152:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801c156:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c15a:	ee07 2a90 	vmov	s15, r2
 801c15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c162:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c16a:	bf4c      	ite	mi
 801c16c:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801c170:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801c174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801c178:	edcd 7a01 	vstr	s15, [sp, #4]
 801c17c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c180:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801c184:	d3d7      	bcc.n	801c136 <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801c186:	b002      	add	sp, #8
 801c188:	ecbd 8b02 	vpop	{d8}
 801c18c:	bd70      	pop	{r4, r5, r6, pc}
 801c18e:	bf00      	nop
 801c190:	43998000 	.word	0x43998000
 801c194:	43510000 	.word	0x43510000
 801c198:	20009a2e 	.word	0x20009a2e
 801c19c:	20095b48 	.word	0x20095b48

0801c1a0 <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a4:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801c1a6:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801c1a8:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801c4fc <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	bf0c      	ite	eq
 801c1b0:	23f0      	moveq	r3, #240	; 0xf0
 801c1b2:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801c1b6:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801c1b8:	9303      	str	r3, [sp, #12]
 801c1ba:	4616      	mov	r6, r2
 801c1bc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801c1c0:	2400      	movs	r4, #0
        if(direction == 0x00){
 801c1c2:	2d00      	cmp	r5, #0
 801c1c4:	f040 80a0 	bne.w	801c308 <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801c1c8:	f898 3000 	ldrb.w	r3, [r8]
 801c1cc:	07db      	lsls	r3, r3, #31
 801c1ce:	d529      	bpl.n	801c224 <Refresh_screen_Graph+0x84>
 801c1d0:	4bc6      	ldr	r3, [pc, #792]	; (801c4ec <Refresh_screen_Graph+0x34c>)
 801c1d2:	8819      	ldrh	r1, [r3, #0]
 801c1d4:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801c1d8:	0889      	lsrs	r1, r1, #2
 801c1da:	9300      	str	r3, [sp, #0]
 801c1dc:	f240 1277 	movw	r2, #375	; 0x177
 801c1e0:	f101 0314 	add.w	r3, r1, #20
 801c1e4:	2044      	movs	r0, #68	; 0x44
 801c1e6:	3112      	adds	r1, #18
 801c1e8:	f000 fa66 	bl	801c6b8 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801c1ec:	4bc0      	ldr	r3, [pc, #768]	; (801c4f0 <Refresh_screen_Graph+0x350>)
 801c1ee:	8819      	ldrh	r1, [r3, #0]
 801c1f0:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801c1f4:	0889      	lsrs	r1, r1, #2
 801c1f6:	9300      	str	r3, [sp, #0]
 801c1f8:	f240 1277 	movw	r2, #375	; 0x177
 801c1fc:	f101 0314 	add.w	r3, r1, #20
 801c200:	2044      	movs	r0, #68	; 0x44
 801c202:	3112      	adds	r1, #18
 801c204:	f000 fa58 	bl	801c6b8 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801c208:	4bba      	ldr	r3, [pc, #744]	; (801c4f4 <Refresh_screen_Graph+0x354>)
 801c20a:	8819      	ldrh	r1, [r3, #0]
 801c20c:	f646 0382 	movw	r3, #26754	; 0x6882
 801c210:	0889      	lsrs	r1, r1, #2
 801c212:	9300      	str	r3, [sp, #0]
 801c214:	f240 1277 	movw	r2, #375	; 0x177
 801c218:	f101 0314 	add.w	r3, r1, #20
 801c21c:	2044      	movs	r0, #68	; 0x44
 801c21e:	3112      	adds	r1, #18
 801c220:	f000 fa4a 	bl	801c6b8 <TFT_FillRectangle_DMA>
 801c224:	b2a2      	uxth	r2, r4
 801c226:	f10a 0301 	add.w	r3, sl, #1
 801c22a:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801c22e:	8831      	ldrh	r1, [r6, #0]
 801c230:	f898 7000 	ldrb.w	r7, [r8]
 801c234:	441a      	add	r2, r3
 801c236:	8873      	ldrh	r3, [r6, #2]
 801c238:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801c23c:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801c240:	07ff      	lsls	r7, r7, #31
 801c242:	b280      	uxth	r0, r0
 801c244:	b289      	uxth	r1, r1
 801c246:	b292      	uxth	r2, r2
 801c248:	b29b      	uxth	r3, r3
 801c24a:	f140 8161 	bpl.w	801c510 <Refresh_screen_Graph+0x370>
 801c24e:	4faa      	ldr	r7, [pc, #680]	; (801c4f8 <Refresh_screen_Graph+0x358>)
 801c250:	883f      	ldrh	r7, [r7, #0]
 801c252:	08bf      	lsrs	r7, r7, #2
 801c254:	eb0a 0c04 	add.w	ip, sl, r4
 801c258:	3712      	adds	r7, #18
 801c25a:	4567      	cmp	r7, ip
 801c25c:	f280 8158 	bge.w	801c510 <Refresh_screen_Graph+0x370>
 801c260:	4fa2      	ldr	r7, [pc, #648]	; (801c4ec <Refresh_screen_Graph+0x34c>)
 801c262:	883f      	ldrh	r7, [r7, #0]
 801c264:	08bf      	lsrs	r7, r7, #2
 801c266:	3712      	adds	r7, #18
 801c268:	4567      	cmp	r7, ip
 801c26a:	f280 8153 	bge.w	801c514 <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801c26e:	4fa0      	ldr	r7, [pc, #640]	; (801c4f0 <Refresh_screen_Graph+0x350>)
 801c270:	883f      	ldrh	r7, [r7, #0]
 801c272:	08bf      	lsrs	r7, r7, #2
 801c274:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801c276:	4567      	cmp	r7, ip
 801c278:	f280 814f 	bge.w	801c51a <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801c27c:	4f9d      	ldr	r7, [pc, #628]	; (801c4f4 <Refresh_screen_Graph+0x354>)
 801c27e:	f8b7 e000 	ldrh.w	lr, [r7]
 801c282:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801c286:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801c28a:	f646 0b82 	movw	fp, #26754	; 0x6882
 801c28e:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801c292:	45e6      	cmp	lr, ip
 801c294:	bfb8      	it	lt
 801c296:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c298:	9700      	str	r7, [sp, #0]
 801c29a:	f000 ffdf 	bl	801d25c <DrawLineX>
 801c29e:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801c2a0:	9a03      	ldr	r2, [sp, #12]
 801c2a2:	b2a3      	uxth	r3, r4
 801c2a4:	429a      	cmp	r2, r3
 801c2a6:	f106 0602 	add.w	r6, r6, #2
 801c2aa:	f1a9 0902 	sub.w	r9, r9, #2
 801c2ae:	d888      	bhi.n	801c1c2 <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801c2b0:	4c92      	ldr	r4, [pc, #584]	; (801c4fc <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	f7ff fa8a 	bl	801b7cc <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801c2b8:	7822      	ldrb	r2, [r4, #0]
 801c2ba:	0752      	lsls	r2, r2, #29
 801c2bc:	d50e      	bpl.n	801c2dc <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801c2be:	2114      	movs	r1, #20
 801c2c0:	4608      	mov	r0, r1
 801c2c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801c2c6:	4a8e      	ldr	r2, [pc, #568]	; (801c500 <Refresh_screen_Graph+0x360>)
 801c2c8:	9500      	str	r5, [sp, #0]
 801c2ca:	f7ff fd0d 	bl	801bce8 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801c2ce:	2114      	movs	r1, #20
 801c2d0:	9500      	str	r5, [sp, #0]
 801c2d2:	231f      	movs	r3, #31
 801c2d4:	4a8b      	ldr	r2, [pc, #556]	; (801c504 <Refresh_screen_Graph+0x364>)
 801c2d6:	4608      	mov	r0, r1
 801c2d8:	f7ff fd06 	bl	801bce8 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801c2dc:	7823      	ldrb	r3, [r4, #0]
 801c2de:	079b      	lsls	r3, r3, #30
 801c2e0:	d50f      	bpl.n	801c302 <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801c2e2:	2114      	movs	r1, #20
 801c2e4:	4608      	mov	r0, r1
 801c2e6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801c2ea:	4a87      	ldr	r2, [pc, #540]	; (801c508 <Refresh_screen_Graph+0x368>)
 801c2ec:	9500      	str	r5, [sp, #0]
 801c2ee:	f7ff fcfb 	bl	801bce8 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801c2f2:	2114      	movs	r1, #20
 801c2f4:	9500      	str	r5, [sp, #0]
 801c2f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801c2fa:	4a84      	ldr	r2, [pc, #528]	; (801c50c <Refresh_screen_Graph+0x36c>)
 801c2fc:	4608      	mov	r0, r1
 801c2fe:	f7ff fcf3 	bl	801bce8 <Spectral_DrawGraph_Const>
					}
}
 801c302:	b005      	add	sp, #20
 801c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801c308:	2d01      	cmp	r5, #1
 801c30a:	d178      	bne.n	801c3fe <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801c30c:	f898 3000 	ldrb.w	r3, [r8]
 801c310:	07db      	lsls	r3, r3, #31
 801c312:	d530      	bpl.n	801c376 <Refresh_screen_Graph+0x1d6>
 801c314:	4b75      	ldr	r3, [pc, #468]	; (801c4ec <Refresh_screen_Graph+0x34c>)
 801c316:	2703      	movs	r7, #3
 801c318:	8818      	ldrh	r0, [r3, #0]
 801c31a:	fbb0 f0f7 	udiv	r0, r0, r7
 801c31e:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801c322:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801c326:	304c      	adds	r0, #76	; 0x4c
 801c328:	9300      	str	r3, [sp, #0]
 801c32a:	b292      	uxth	r2, r2
 801c32c:	23fd      	movs	r3, #253	; 0xfd
 801c32e:	212d      	movs	r1, #45	; 0x2d
 801c330:	b280      	uxth	r0, r0
 801c332:	f000 f9c1 	bl	801c6b8 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801c336:	4b6e      	ldr	r3, [pc, #440]	; (801c4f0 <Refresh_screen_Graph+0x350>)
 801c338:	8818      	ldrh	r0, [r3, #0]
 801c33a:	fbb0 f0f7 	udiv	r0, r0, r7
 801c33e:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801c342:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801c346:	304c      	adds	r0, #76	; 0x4c
 801c348:	9300      	str	r3, [sp, #0]
 801c34a:	b292      	uxth	r2, r2
 801c34c:	23fd      	movs	r3, #253	; 0xfd
 801c34e:	212d      	movs	r1, #45	; 0x2d
 801c350:	b280      	uxth	r0, r0
 801c352:	f000 f9b1 	bl	801c6b8 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801c356:	4b67      	ldr	r3, [pc, #412]	; (801c4f4 <Refresh_screen_Graph+0x354>)
 801c358:	8818      	ldrh	r0, [r3, #0]
 801c35a:	fbb0 f7f7 	udiv	r7, r0, r7
 801c35e:	f646 0382 	movw	r3, #26754	; 0x6882
 801c362:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801c366:	374c      	adds	r7, #76	; 0x4c
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	b292      	uxth	r2, r2
 801c36c:	23fd      	movs	r3, #253	; 0xfd
 801c36e:	212d      	movs	r1, #45	; 0x2d
 801c370:	b2b8      	uxth	r0, r7
 801c372:	f000 f9a1 	bl	801c6b8 <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c376:	f8b9 0000 	ldrh.w	r0, [r9]
 801c37a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801c37e:	f898 7000 	ldrb.w	r7, [r8]
 801c382:	b2a3      	uxth	r3, r4
 801c384:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801c388:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801c38c:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801c390:	3348      	adds	r3, #72	; 0x48
 801c392:	07ff      	lsls	r7, r7, #31
 801c394:	b280      	uxth	r0, r0
 801c396:	b289      	uxth	r1, r1
 801c398:	b292      	uxth	r2, r2
 801c39a:	b29b      	uxth	r3, r3
 801c39c:	f140 80b8 	bpl.w	801c510 <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801c3a0:	4f54      	ldr	r7, [pc, #336]	; (801c4f4 <Refresh_screen_Graph+0x354>)
 801c3a2:	f8b7 c000 	ldrh.w	ip, [r7]
 801c3a6:	f240 1793 	movw	r7, #403	; 0x193
 801c3aa:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801c3ae:	f04f 0e03 	mov.w	lr, #3
 801c3b2:	fbbc fcfe 	udiv	ip, ip, lr
 801c3b6:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c3ba:	45dc      	cmp	ip, fp
 801c3bc:	dc19      	bgt.n	801c3f2 <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801c3be:	f8df c130 	ldr.w	ip, [pc, #304]	; 801c4f0 <Refresh_screen_Graph+0x350>
 801c3c2:	f8bc c000 	ldrh.w	ip, [ip]
 801c3c6:	fbbc fcfe 	udiv	ip, ip, lr
 801c3ca:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c3ce:	45dc      	cmp	ip, fp
 801c3d0:	dc12      	bgt.n	801c3f8 <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801c3d2:	f8df c118 	ldr.w	ip, [pc, #280]	; 801c4ec <Refresh_screen_Graph+0x34c>
 801c3d6:	f8bc c000 	ldrh.w	ip, [ip]
 801c3da:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c3de:	f644 3cd4 	movw	ip, #19412	; 0x4bd4
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801c3e2:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c3e6:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801c3ea:	45de      	cmp	lr, fp
 801c3ec:	bfd8      	it	le
 801c3ee:	4667      	movle	r7, ip
 801c3f0:	e752      	b.n	801c298 <Refresh_screen_Graph+0xf8>
 801c3f2:	f646 0782 	movw	r7, #26754	; 0x6882
 801c3f6:	e74f      	b.n	801c298 <Refresh_screen_Graph+0xf8>
 801c3f8:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801c3fc:	e74c      	b.n	801c298 <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801c3fe:	2d02      	cmp	r5, #2
 801c400:	f47f af4d 	bne.w	801c29e <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801c404:	f898 3000 	ldrb.w	r3, [r8]
 801c408:	07db      	lsls	r3, r3, #31
 801c40a:	d535      	bpl.n	801c478 <Refresh_screen_Graph+0x2d8>
 801c40c:	4b37      	ldr	r3, [pc, #220]	; (801c4ec <Refresh_screen_Graph+0x34c>)
 801c40e:	f240 1795 	movw	r7, #405	; 0x195
 801c412:	8818      	ldrh	r0, [r3, #0]
 801c414:	f04f 0b03 	mov.w	fp, #3
 801c418:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801c41c:	fbb0 f0fb 	udiv	r0, r0, fp
 801c420:	1a3a      	subs	r2, r7, r0
 801c422:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801c426:	9300      	str	r3, [sp, #0]
 801c428:	b292      	uxth	r2, r2
 801c42a:	23e3      	movs	r3, #227	; 0xe3
 801c42c:	2113      	movs	r1, #19
 801c42e:	b280      	uxth	r0, r0
 801c430:	f000 f942 	bl	801c6b8 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801c434:	4b2e      	ldr	r3, [pc, #184]	; (801c4f0 <Refresh_screen_Graph+0x350>)
 801c436:	8818      	ldrh	r0, [r3, #0]
 801c438:	fbb0 f0fb 	udiv	r0, r0, fp
 801c43c:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801c440:	1a3a      	subs	r2, r7, r0
 801c442:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801c446:	9300      	str	r3, [sp, #0]
 801c448:	b292      	uxth	r2, r2
 801c44a:	23e3      	movs	r3, #227	; 0xe3
 801c44c:	2113      	movs	r1, #19
 801c44e:	b280      	uxth	r0, r0
 801c450:	f000 f932 	bl	801c6b8 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801c454:	4b27      	ldr	r3, [pc, #156]	; (801c4f4 <Refresh_screen_Graph+0x354>)
 801c456:	8818      	ldrh	r0, [r3, #0]
 801c458:	fbb0 fbfb 	udiv	fp, r0, fp
 801c45c:	f646 0382 	movw	r3, #26754	; 0x6882
 801c460:	eba7 020b 	sub.w	r2, r7, fp
 801c464:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801c468:	9300      	str	r3, [sp, #0]
 801c46a:	b292      	uxth	r2, r2
 801c46c:	23e3      	movs	r3, #227	; 0xe3
 801c46e:	2113      	movs	r1, #19
 801c470:	fa1f f08b 	uxth.w	r0, fp
 801c474:	f000 f920 	bl	801c6b8 <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c478:	8830      	ldrh	r0, [r6, #0]
 801c47a:	8872      	ldrh	r2, [r6, #2]
 801c47c:	f898 7000 	ldrb.w	r7, [r8]
 801c480:	b2a3      	uxth	r3, r4
 801c482:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801c486:	3012      	adds	r0, #18
 801c488:	3212      	adds	r2, #18
 801c48a:	334d      	adds	r3, #77	; 0x4d
 801c48c:	07ff      	lsls	r7, r7, #31
 801c48e:	b280      	uxth	r0, r0
 801c490:	b289      	uxth	r1, r1
 801c492:	b292      	uxth	r2, r2
 801c494:	b29b      	uxth	r3, r3
 801c496:	d53b      	bpl.n	801c510 <Refresh_screen_Graph+0x370>
 801c498:	4f17      	ldr	r7, [pc, #92]	; (801c4f8 <Refresh_screen_Graph+0x358>)
 801c49a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801c49e:	f8b7 e000 	ldrh.w	lr, [r7]
 801c4a2:	2703      	movs	r7, #3
 801c4a4:	fbbe fef7 	udiv	lr, lr, r7
 801c4a8:	45e6      	cmp	lr, ip
 801c4aa:	dc31      	bgt.n	801c510 <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue :
 801c4ac:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801c4ec <Refresh_screen_Graph+0x34c>
 801c4b0:	f104 0e02 	add.w	lr, r4, #2
 801c4b4:	f8bc c000 	ldrh.w	ip, [ip]
 801c4b8:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c4bc:	45f4      	cmp	ip, lr
 801c4be:	dc29      	bgt.n	801c514 <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green :
 801c4c0:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801c4f0 <Refresh_screen_Graph+0x350>
 801c4c4:	f8bc c000 	ldrh.w	ip, [ip]
 801c4c8:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c4cc:	45f4      	cmp	ip, lr
 801c4ce:	dc24      	bgt.n	801c51a <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801c4d0:	f8df c020 	ldr.w	ip, [pc, #32]	; 801c4f4 <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c4d4:	f646 0b82 	movw	fp, #26754	; 0x6882
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801c4d8:	f8bc c000 	ldrh.w	ip, [ip]
 801c4dc:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c4e0:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801c4e4:	45f4      	cmp	ip, lr
 801c4e6:	bfd8      	it	le
 801c4e8:	465f      	movle	r7, fp
 801c4ea:	e6d5      	b.n	801c298 <Refresh_screen_Graph+0xf8>
 801c4ec:	20095b94 	.word	0x20095b94
 801c4f0:	20095d74 	.word	0x20095d74
 801c4f4:	20095aa8 	.word	0x20095aa8
 801c4f8:	20095aaa 	.word	0x20095aaa
 801c4fc:	20005702 	.word	0x20005702
 801c500:	20090d8a 	.word	0x20090d8a
 801c504:	20091328 	.word	0x20091328
 801c508:	20091062 	.word	0x20091062
 801c50c:	20090ac4 	.word	0x20090ac4
 801c510:	2763      	movs	r7, #99	; 0x63
 801c512:	e6c1      	b.n	801c298 <Refresh_screen_Graph+0xf8>
 801c514:	f644 37d4 	movw	r7, #19412	; 0x4bd4
 801c518:	e6be      	b.n	801c298 <Refresh_screen_Graph+0xf8>
 801c51a:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801c51e:	e6bb      	b.n	801c298 <Refresh_screen_Graph+0xf8>

0801c520 <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801c520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801c522:	aa06      	add	r2, sp, #24
 801c524:	2300      	movs	r3, #0
 801c526:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801c52a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c52e:	9302      	str	r3, [sp, #8]
 801c530:	2301      	movs	r3, #1
 801c532:	e88d 000c 	stmia.w	sp, {r2, r3}
 801c536:	460a      	mov	r2, r1
 801c538:	4601      	mov	r1, r0
 801c53a:	4804      	ldr	r0, [pc, #16]	; (801c54c <TS_IO_Read+0x2c>)
 801c53c:	f7e6 fa7e 	bl	8002a3c <HAL_I2C_Mem_Read>

  return read_value;
}
 801c540:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801c544:	b007      	add	sp, #28
 801c546:	f85d fb04 	ldr.w	pc, [sp], #4
 801c54a:	bf00      	nop
 801c54c:	20095770 	.word	0x20095770

0801c550 <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801c550:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801c552:	2300      	movs	r3, #0
{
 801c554:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801c556:	f88d 3007 	strb.w	r3, [sp, #7]
 801c55a:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801c55c:	21a3      	movs	r1, #163	; 0xa3
 801c55e:	4628      	mov	r0, r5
 801c560:	f7ff ffde 	bl	801c520 <TS_IO_Read>
 801c564:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801c568:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c56c:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801c56e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801c572:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801c574:	d001      	beq.n	801c57a <TS_ReadID+0x2a>
 801c576:	2b0a      	cmp	r3, #10
 801c578:	d1f0      	bne.n	801c55c <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801c57a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801c57e:	b003      	add	sp, #12
 801c580:	bd30      	pop	{r4, r5, pc}

0801c582 <Touch_Ini>:

void Touch_Ini(void)
{
 801c582:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801c584:	2070      	movs	r0, #112	; 0x70
 801c586:	f7ff ffe3 	bl	801c550 <TS_ReadID>
  HAL_Delay(200);
 801c58a:	20c8      	movs	r0, #200	; 0xc8
}
 801c58c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801c590:	f7e4 bd4c 	b.w	800102c <HAL_Delay>

0801c594 <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;

	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c596:	b2c5      	uxtb	r5, r0
{
 801c598:	460e      	mov	r6, r1
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c59a:	4628      	mov	r0, r5
 801c59c:	2103      	movs	r1, #3
{
 801c59e:	4617      	mov	r7, r2
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c5a0:	f7ff ffbe 	bl	801c520 <TS_IO_Read>
 801c5a4:	4c10      	ldr	r4, [pc, #64]	; (801c5e8 <TS_Get_XY1+0x54>)
 801c5a6:	0200      	lsls	r0, r0, #8
 801c5a8:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801c5aa:	2104      	movs	r1, #4
 801c5ac:	4628      	mov	r0, r5
 801c5ae:	f7ff ffb7 	bl	801c520 <TS_IO_Read>
 801c5b2:	8823      	ldrh	r3, [r4, #0]
 801c5b4:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
//		*Y = (uint16_t)((X_SIZE_Touch - coord) * TS_Callib_x);
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801c5b6:	4b0d      	ldr	r3, [pc, #52]	; (801c5ec <TS_Get_XY1+0x58>)
 801c5b8:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801c5ba:	b280      	uxth	r0, r0
 801c5bc:	8020      	strh	r0, [r4, #0]
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801c5be:	1a18      	subs	r0, r3, r0
 801c5c0:	8038      	strh	r0, [r7, #0]
	else{
//		*X = (uint16_t)(coord * TS_Callib_x);
		*X = coord * TS_Callib_x;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0xFF00;
 801c5c2:	2105      	movs	r1, #5
 801c5c4:	4628      	mov	r0, r5
 801c5c6:	f7ff ffab 	bl	801c520 <TS_IO_Read>
 801c5ca:	0200      	lsls	r0, r0, #8
 801c5cc:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c5ce:	2106      	movs	r1, #6
 801c5d0:	4628      	mov	r0, r5
 801c5d2:	f7ff ffa5 	bl	801c520 <TS_IO_Read>
 801c5d6:	8823      	ldrh	r3, [r4, #0]
 801c5d8:	4318      	orrs	r0, r3
	
		if (Orientation90)
	{
//		*X = (uint16_t)(coord * TS_Callib_y);
		*X = coord * TS_Callib_y;
		temporary_x = coord;
 801c5da:	4b05      	ldr	r3, [pc, #20]	; (801c5f0 <TS_Get_XY1+0x5c>)
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c5dc:	b280      	uxth	r0, r0
		*X = coord * TS_Callib_y;
 801c5de:	8030      	strh	r0, [r6, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c5e0:	8020      	strh	r0, [r4, #0]
		temporary_x = coord;
 801c5e2:	8018      	strh	r0, [r3, #0]
 801c5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5e6:	bf00      	nop
 801c5e8:	20009cfa 	.word	0x20009cfa
 801c5ec:	20000eb2 	.word	0x20000eb2
 801c5f0:	20009cfc 	.word	0x20009cfc

0801c5f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801c5f4:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801c5f6:	2301      	movs	r3, #1
 801c5f8:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801c5fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801c600:	2b01      	cmp	r3, #1
 801c602:	d10e      	bne.n	801c622 <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801c604:	4808      	ldr	r0, [pc, #32]	; (801c628 <BSP_SD_Init+0x34>)
 801c606:	f7e9 f825 	bl	8005654 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801c60a:	b938      	cbnz	r0, 801c61c <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801c60c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801c610:	4805      	ldr	r0, [pc, #20]	; (801c628 <BSP_SD_Init+0x34>)
 801c612:	f7e8 ff9b 	bl	800554c <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801c616:	3000      	adds	r0, #0
 801c618:	bf18      	it	ne
 801c61a:	2001      	movne	r0, #1
}
 801c61c:	b003      	add	sp, #12
 801c61e:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801c622:	2002      	movs	r0, #2
 801c624:	e7fa      	b.n	801c61c <BSP_SD_Init+0x28>
 801c626:	bf00      	nop
 801c628:	20095810 	.word	0x20095810

0801c62c <BSP_SD_ReadBlocks_DMA>:
{
 801c62c:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801c62e:	4613      	mov	r3, r2
 801c630:	460a      	mov	r2, r1
 801c632:	4601      	mov	r1, r0
 801c634:	4803      	ldr	r0, [pc, #12]	; (801c644 <BSP_SD_ReadBlocks_DMA+0x18>)
 801c636:	f7e8 fbc1 	bl	8004dbc <HAL_SD_ReadBlocks_DMA>
}
 801c63a:	3000      	adds	r0, #0
 801c63c:	bf18      	it	ne
 801c63e:	2001      	movne	r0, #1
 801c640:	bd08      	pop	{r3, pc}
 801c642:	bf00      	nop
 801c644:	20095810 	.word	0x20095810

0801c648 <BSP_SD_WriteBlocks_DMA>:
{
 801c648:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801c64a:	4613      	mov	r3, r2
 801c64c:	460a      	mov	r2, r1
 801c64e:	4601      	mov	r1, r0
 801c650:	4803      	ldr	r0, [pc, #12]	; (801c660 <BSP_SD_WriteBlocks_DMA+0x18>)
 801c652:	f7e8 fc25 	bl	8004ea0 <HAL_SD_WriteBlocks_DMA>
}
 801c656:	3000      	adds	r0, #0
 801c658:	bf18      	it	ne
 801c65a:	2001      	movne	r0, #1
 801c65c:	bd08      	pop	{r3, pc}
 801c65e:	bf00      	nop
 801c660:	20095810 	.word	0x20095810

0801c664 <BSP_SD_GetCardState>:
{
 801c664:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801c666:	4803      	ldr	r0, [pc, #12]	; (801c674 <BSP_SD_GetCardState+0x10>)
 801c668:	f7e9 f82d 	bl	80056c6 <HAL_SD_GetCardState>
}
 801c66c:	3804      	subs	r0, #4
 801c66e:	bf18      	it	ne
 801c670:	2001      	movne	r0, #1
 801c672:	bd08      	pop	{r3, pc}
 801c674:	20095810 	.word	0x20095810

0801c678 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801c678:	4601      	mov	r1, r0
 801c67a:	4801      	ldr	r0, [pc, #4]	; (801c680 <BSP_SD_GetCardInfo+0x8>)
 801c67c:	f7e8 bf54 	b.w	8005528 <HAL_SD_GetCardInfo>
 801c680:	20095810 	.word	0x20095810

0801c684 <BSP_SD_WriteCpltCallback>:
 801c684:	4770      	bx	lr

0801c686 <HAL_SD_TxCpltCallback>:
{
 801c686:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801c688:	f7ff fffc 	bl	801c684 <BSP_SD_WriteCpltCallback>
 801c68c:	bd08      	pop	{r3, pc}

0801c68e <BSP_SD_ReadCpltCallback>:
{
 801c68e:	4770      	bx	lr

0801c690 <HAL_SD_RxCpltCallback>:
{
 801c690:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801c692:	f7ff fffc 	bl	801c68e <BSP_SD_ReadCpltCallback>
 801c696:	bd08      	pop	{r3, pc}

0801c698 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801c698:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801c69a:	4903      	ldr	r1, [pc, #12]	; (801c6a8 <MX_FATFS_Init+0x10>)
 801c69c:	4803      	ldr	r0, [pc, #12]	; (801c6ac <MX_FATFS_Init+0x14>)
 801c69e:	f7ed fc53 	bl	8009f48 <FATFS_LinkDriver>
 801c6a2:	4b03      	ldr	r3, [pc, #12]	; (801c6b0 <MX_FATFS_Init+0x18>)
 801c6a4:	7018      	strb	r0, [r3, #0]
 801c6a6:	bd08      	pop	{r3, pc}
 801c6a8:	2009368d 	.word	0x2009368d
 801c6ac:	08032464 	.word	0x08032464
 801c6b0:	2009368c 	.word	0x2009368c

0801c6b4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801c6b4:	2000      	movs	r0, #0
 801c6b6:	4770      	bx	lr

0801c6b8 <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801c6b8:	4290      	cmp	r0, r2
{
 801c6ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6be:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801c6c0:	bf88      	it	hi
 801c6c2:	4603      	movhi	r3, r0
{
 801c6c4:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801c6c6:	bf84      	itt	hi
 801c6c8:	4690      	movhi	r8, r2
 801c6ca:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801c6cc:	42a9      	cmp	r1, r5
 801c6ce:	bf88      	it	hi
 801c6d0:	460b      	movhi	r3, r1
{
 801c6d2:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801c6d4:	bf84      	itt	hi
 801c6d6:	462f      	movhi	r7, r5
 801c6d8:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c6da:	4b15      	ldr	r3, [pc, #84]	; (801c730 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801c6dc:	4e15      	ldr	r6, [pc, #84]	; (801c734 <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c6de:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801c6e2:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801c6e6:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801c6ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801c6ee:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801c6f2:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c6f4:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801c6f6:	eba9 0304 	sub.w	r3, r9, r4
 801c6fa:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c6fc:	f7e5 fb54 	bl	8001da8 <HAL_DMA2D_Init>
 801c700:	b990      	cbnz	r0, 801c728 <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c702:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801c706:	1bed      	subs	r5, r5, r7
 801c708:	9500      	str	r5, [sp, #0]
 801c70a:	4623      	mov	r3, r4
 801c70c:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801c710:	4651      	mov	r1, sl
 801c712:	4630      	mov	r0, r6
 801c714:	f7e5 fb92 	bl	8001e3c <HAL_DMA2D_Start>
 801c718:	b930      	cbnz	r0, 801c728 <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801c71a:	210a      	movs	r1, #10
 801c71c:	4630      	mov	r0, r6
    }
  }
}
 801c71e:	b003      	add	sp, #12
 801c720:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801c724:	f7e5 bba3 	b.w	8001e6e <HAL_DMA2D_PollForTransfer>
}
 801c728:	b003      	add	sp, #12
 801c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c72e:	bf00      	nop
 801c730:	20095908 	.word	0x20095908
 801c734:	20095b98 	.word	0x20095b98

0801c738 <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801c738:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801c73a:	4c10      	ldr	r4, [pc, #64]	; (801c77c <TFT_FillScreen_DMA+0x44>)
 801c73c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801c740:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801c742:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801c744:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801c746:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c748:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801c74a:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801c74c:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c74e:	f7e5 fb2b 	bl	8001da8 <HAL_DMA2D_Init>
 801c752:	b980      	cbnz	r0, 801c776 <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801c754:	4a0a      	ldr	r2, [pc, #40]	; (801c780 <TFT_FillScreen_DMA+0x48>)
 801c756:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801c758:	9300      	str	r3, [sp, #0]
 801c75a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801c75c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801c75e:	4631      	mov	r1, r6
 801c760:	4620      	mov	r0, r4
 801c762:	f7e5 fb6b 	bl	8001e3c <HAL_DMA2D_Start>
 801c766:	b930      	cbnz	r0, 801c776 <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801c768:	4629      	mov	r1, r5
 801c76a:	4620      	mov	r0, r4
    }
  }
}
 801c76c:	b002      	add	sp, #8
 801c76e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801c772:	f7e5 bb7c 	b.w	8001e6e <HAL_DMA2D_PollForTransfer>
}
 801c776:	b002      	add	sp, #8
 801c778:	bd70      	pop	{r4, r5, r6, pc}
 801c77a:	bf00      	nop
 801c77c:	20095b98 	.word	0x20095b98
 801c780:	20095908 	.word	0x20095908

0801c784 <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801c784:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801c786:	4b14      	ldr	r3, [pc, #80]	; (801c7d8 <TFT_DrawPixel+0x54>)
 801c788:	781c      	ldrb	r4, [r3, #0]
 801c78a:	b97c      	cbnz	r4, 801c7ac <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801c78c:	4b13      	ldr	r3, [pc, #76]	; (801c7dc <TFT_DrawPixel+0x58>)
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801c792:	4913      	ldr	r1, [pc, #76]	; (801c7e0 <TFT_DrawPixel+0x5c>)
 801c794:	8809      	ldrh	r1, [r1, #0]
 801c796:	3901      	subs	r1, #1
 801c798:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801c79a:	4812      	ldr	r0, [pc, #72]	; (801c7e4 <TFT_DrawPixel+0x60>)
 801c79c:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801c79e:	b289      	uxth	r1, r1
 801c7a0:	fb04 3111 	mls	r1, r4, r1, r3
 801c7a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801c7a6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801c7aa:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801c7ac:	781c      	ldrb	r4, [r3, #0]
 801c7ae:	2c01      	cmp	r4, #1
 801c7b0:	d105      	bne.n	801c7be <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801c7b2:	4c0c      	ldr	r4, [pc, #48]	; (801c7e4 <TFT_DrawPixel+0x60>)
 801c7b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801c7b6:	fb03 0101 	mla	r1, r3, r1, r0
 801c7ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c7bc:	e7f3      	b.n	801c7a6 <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801c7be:	781b      	ldrb	r3, [r3, #0]
 801c7c0:	2b02      	cmp	r3, #2
 801c7c2:	d1f2      	bne.n	801c7aa <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801c7c4:	4b05      	ldr	r3, [pc, #20]	; (801c7dc <TFT_DrawPixel+0x58>)
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	1a18      	subs	r0, r3, r0
 801c7ca:	4b06      	ldr	r3, [pc, #24]	; (801c7e4 <TFT_DrawPixel+0x60>)
 801c7cc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801c7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c7d0:	fb04 0111 	mls	r1, r4, r1, r0
 801c7d4:	e7e7      	b.n	801c7a6 <TFT_DrawPixel+0x22>
 801c7d6:	bf00      	nop
 801c7d8:	200056a0 	.word	0x200056a0
 801c7dc:	20000eb4 	.word	0x20000eb4
 801c7e0:	20000eba 	.word	0x20000eba
 801c7e4:	20095908 	.word	0x20095908

0801c7e8 <TFT_DrawCircleCorner>:
{
 801c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7ec:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801c7ee:	b293      	uxth	r3, r2
 801c7f0:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801c7f4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801c7f8:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801c7fa:	005b      	lsls	r3, r3, #1
 801c7fc:	b21b      	sxth	r3, r3
 801c7fe:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801c800:	2300      	movs	r3, #0
 801c802:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801c804:	f00a 0301 	and.w	r3, sl, #1
{
 801c808:	4689      	mov	r9, r1
 801c80a:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801c80c:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801c80e:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801c810:	b287      	uxth	r7, r0
    while (x < y) {
 801c812:	f9bd 3000 	ldrsh.w	r3, [sp]
 801c816:	42b3      	cmp	r3, r6
 801c818:	db02      	blt.n	801c820 <TFT_DrawCircleCorner+0x38>
}
 801c81a:	b005      	add	sp, #20
 801c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c820:	2c00      	cmp	r4, #0
 801c822:	db08      	blt.n	801c836 <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801c824:	9b01      	ldr	r3, [sp, #4]
 801c826:	3302      	adds	r3, #2
 801c828:	b29b      	uxth	r3, r3
            y--;
 801c82a:	3e01      	subs	r6, #1
            ddF_y += 2;
 801c82c:	b21a      	sxth	r2, r3
            f += ddF_y;
 801c82e:	441c      	add	r4, r3
            y--;
 801c830:	b236      	sxth	r6, r6
            ddF_y += 2;
 801c832:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801c834:	b224      	sxth	r4, r4
 801c836:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801c83a:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801c83c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801c840:	3403      	adds	r4, #3
 801c842:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801c844:	b1e3      	cbz	r3, 801c880 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801c846:	fa1f f889 	uxth.w	r8, r9
 801c84a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c84e:	9303      	str	r3, [sp, #12]
 801c850:	fa1f fb86 	uxth.w	fp, r6
 801c854:	f108 3eff 	add.w	lr, r8, #4294967295
 801c858:	ebae 0e05 	sub.w	lr, lr, r5
 801c85c:	eba7 000b 	sub.w	r0, r7, fp
 801c860:	461a      	mov	r2, r3
 801c862:	fa1f f18e 	uxth.w	r1, lr
 801c866:	b280      	uxth	r0, r0
 801c868:	f7ff ff8c 	bl	801c784 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801c86c:	1e78      	subs	r0, r7, #1
 801c86e:	9b03      	ldr	r3, [sp, #12]
 801c870:	eba8 010b 	sub.w	r1, r8, fp
 801c874:	1b40      	subs	r0, r0, r5
 801c876:	461a      	mov	r2, r3
 801c878:	b289      	uxth	r1, r1
 801c87a:	b280      	uxth	r0, r0
 801c87c:	f7ff ff82 	bl	801c784 <TFT_DrawPixel>
        if (corner & 0x02) {	
 801c880:	f01a 0f02 	tst.w	sl, #2
 801c884:	d01a      	beq.n	801c8bc <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801c886:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c88a:	9303      	str	r3, [sp, #12]
 801c88c:	fa1f f889 	uxth.w	r8, r9
 801c890:	fa1f fb86 	uxth.w	fp, r6
 801c894:	1c78      	adds	r0, r7, #1
 801c896:	eba8 010b 	sub.w	r1, r8, fp
 801c89a:	4428      	add	r0, r5
 801c89c:	461a      	mov	r2, r3
 801c89e:	b289      	uxth	r1, r1
 801c8a0:	b280      	uxth	r0, r0
 801c8a2:	f7ff ff6f 	bl	801c784 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801c8a6:	f108 31ff 	add.w	r1, r8, #4294967295
 801c8aa:	9b03      	ldr	r3, [sp, #12]
 801c8ac:	1b49      	subs	r1, r1, r5
 801c8ae:	eb07 000b 	add.w	r0, r7, fp
 801c8b2:	461a      	mov	r2, r3
 801c8b4:	b289      	uxth	r1, r1
 801c8b6:	b280      	uxth	r0, r0
 801c8b8:	f7ff ff64 	bl	801c784 <TFT_DrawPixel>
		if (corner & 0x04) {	
 801c8bc:	f01a 0f04 	tst.w	sl, #4
 801c8c0:	d01a      	beq.n	801c8f8 <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801c8c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c8c6:	9303      	str	r3, [sp, #12]
 801c8c8:	fa1f f889 	uxth.w	r8, r9
 801c8cc:	fa1f fb86 	uxth.w	fp, r6
 801c8d0:	1c78      	adds	r0, r7, #1
 801c8d2:	eb08 010b 	add.w	r1, r8, fp
 801c8d6:	4428      	add	r0, r5
 801c8d8:	461a      	mov	r2, r3
 801c8da:	b289      	uxth	r1, r1
 801c8dc:	b280      	uxth	r0, r0
 801c8de:	f7ff ff51 	bl	801c784 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801c8e2:	f108 0101 	add.w	r1, r8, #1
 801c8e6:	9b03      	ldr	r3, [sp, #12]
 801c8e8:	4429      	add	r1, r5
 801c8ea:	eb07 000b 	add.w	r0, r7, fp
 801c8ee:	461a      	mov	r2, r3
 801c8f0:	b289      	uxth	r1, r1
 801c8f2:	b280      	uxth	r0, r0
 801c8f4:	f7ff ff46 	bl	801c784 <TFT_DrawPixel>
        if (corner & 0x08) {	
 801c8f8:	f01a 0f08 	tst.w	sl, #8
 801c8fc:	d01a      	beq.n	801c934 <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801c8fe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c902:	9303      	str	r3, [sp, #12]
 801c904:	fa1f fb89 	uxth.w	fp, r9
 801c908:	fa1f f886 	uxth.w	r8, r6
 801c90c:	1e78      	subs	r0, r7, #1
 801c90e:	eb0b 0108 	add.w	r1, fp, r8
 801c912:	1b40      	subs	r0, r0, r5
 801c914:	461a      	mov	r2, r3
 801c916:	b289      	uxth	r1, r1
 801c918:	b280      	uxth	r0, r0
 801c91a:	f7ff ff33 	bl	801c784 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801c91e:	f10b 0101 	add.w	r1, fp, #1
 801c922:	9b03      	ldr	r3, [sp, #12]
 801c924:	4429      	add	r1, r5
 801c926:	eba7 0008 	sub.w	r0, r7, r8
 801c92a:	461a      	mov	r2, r3
 801c92c:	b289      	uxth	r1, r1
 801c92e:	b280      	uxth	r0, r0
 801c930:	f7ff ff28 	bl	801c784 <TFT_DrawPixel>
 801c934:	9b00      	ldr	r3, [sp, #0]
 801c936:	3301      	adds	r3, #1
 801c938:	9300      	str	r3, [sp, #0]
 801c93a:	e76a      	b.n	801c812 <TFT_DrawCircleCorner+0x2a>

0801c93c <TFT_DrawCircle>:
{
 801c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801c940:	b295      	uxth	r5, r2
{
 801c942:	b089      	sub	sp, #36	; 0x24
 801c944:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801c946:	f1c5 0201 	rsb	r2, r5, #1
 801c94a:	b212      	sxth	r2, r2
 801c94c:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801c94e:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801c952:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801c954:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801c956:	b29c      	uxth	r4, r3
 801c958:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801c95a:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801c95c:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801c95e:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801c960:	b289      	uxth	r1, r1
 801c962:	4622      	mov	r2, r4
 801c964:	4630      	mov	r0, r6
 801c966:	f7ff ff0d 	bl	801c784 <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801c96a:	1b79      	subs	r1, r7, r5
 801c96c:	4622      	mov	r2, r4
 801c96e:	b289      	uxth	r1, r1
 801c970:	4630      	mov	r0, r6
 801c972:	f7ff ff07 	bl	801c784 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801c976:	19a8      	adds	r0, r5, r6
 801c978:	4622      	mov	r2, r4
 801c97a:	4639      	mov	r1, r7
 801c97c:	b280      	uxth	r0, r0
 801c97e:	f7ff ff01 	bl	801c784 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c982:	1b70      	subs	r0, r6, r5
 801c984:	4622      	mov	r2, r4
 801c986:	4639      	mov	r1, r7
 801c988:	b280      	uxth	r0, r0
 801c98a:	f7ff fefb 	bl	801c784 <TFT_DrawPixel>
    while (x < y) {
 801c98e:	2300      	movs	r3, #0
 801c990:	9302      	str	r3, [sp, #8]
 801c992:	1c73      	adds	r3, r6, #1
 801c994:	9304      	str	r3, [sp, #16]
 801c996:	1e73      	subs	r3, r6, #1
 801c998:	9305      	str	r3, [sp, #20]
 801c99a:	1c7b      	adds	r3, r7, #1
 801c99c:	9306      	str	r3, [sp, #24]
 801c99e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c9a2:	4543      	cmp	r3, r8
 801c9a4:	db02      	blt.n	801c9ac <TFT_DrawCircle+0x70>
}
 801c9a6:	b009      	add	sp, #36	; 0x24
 801c9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c9ac:	9b01      	ldr	r3, [sp, #4]
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	db0c      	blt.n	801c9cc <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801c9b2:	9b03      	ldr	r3, [sp, #12]
 801c9b4:	3302      	adds	r3, #2
 801c9b6:	b29b      	uxth	r3, r3
 801c9b8:	b21a      	sxth	r2, r3
 801c9ba:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801c9bc:	9a01      	ldr	r2, [sp, #4]
 801c9be:	4413      	add	r3, r2
            y--;
 801c9c0:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801c9c4:	b21b      	sxth	r3, r3
            y--;
 801c9c6:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801c9ca:	9301      	str	r3, [sp, #4]
 801c9cc:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801c9d0:	9b01      	ldr	r3, [sp, #4]
 801c9d2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801c9d6:	3303      	adds	r3, #3
 801c9d8:	b21b      	sxth	r3, r3
 801c9da:	9301      	str	r3, [sp, #4]
 801c9dc:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801c9de:	fa1f f588 	uxth.w	r5, r8
 801c9e2:	444b      	add	r3, r9
 801c9e4:	eb07 0b05 	add.w	fp, r7, r5
 801c9e8:	b29b      	uxth	r3, r3
 801c9ea:	fa1f fb8b 	uxth.w	fp, fp
 801c9ee:	4659      	mov	r1, fp
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	4622      	mov	r2, r4
 801c9f4:	9307      	str	r3, [sp, #28]
 801c9f6:	f7ff fec5 	bl	801c784 <TFT_DrawPixel>
 801c9fa:	9b05      	ldr	r3, [sp, #20]
 801c9fc:	eba3 0a09 	sub.w	sl, r3, r9
 801ca00:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801ca04:	4659      	mov	r1, fp
 801ca06:	4650      	mov	r0, sl
 801ca08:	4622      	mov	r2, r4
 801ca0a:	f7ff febb 	bl	801c784 <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801ca0e:	eba7 0b05 	sub.w	fp, r7, r5
 801ca12:	9b07      	ldr	r3, [sp, #28]
 801ca14:	fa1f fb8b 	uxth.w	fp, fp
 801ca18:	4618      	mov	r0, r3
 801ca1a:	4659      	mov	r1, fp
 801ca1c:	4622      	mov	r2, r4
 801ca1e:	f7ff feb1 	bl	801c784 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801ca22:	4659      	mov	r1, fp
 801ca24:	4650      	mov	r0, sl
 801ca26:	4622      	mov	r2, r4
 801ca28:	f7ff feac 	bl	801c784 <TFT_DrawPixel>
 801ca2c:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801ca2e:	eb06 0a05 	add.w	sl, r6, r5
 801ca32:	eb09 0b03 	add.w	fp, r9, r3
 801ca36:	fa1f fa8a 	uxth.w	sl, sl
 801ca3a:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801ca3e:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801ca40:	4622      	mov	r2, r4
 801ca42:	4659      	mov	r1, fp
 801ca44:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801ca46:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801ca48:	f7ff fe9c 	bl	801c784 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801ca4c:	4622      	mov	r2, r4
 801ca4e:	4659      	mov	r1, fp
 801ca50:	4628      	mov	r0, r5
 801ca52:	f7ff fe97 	bl	801c784 <TFT_DrawPixel>
 801ca56:	1e7b      	subs	r3, r7, #1
 801ca58:	eba3 0909 	sub.w	r9, r3, r9
 801ca5c:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801ca60:	4622      	mov	r2, r4
 801ca62:	4649      	mov	r1, r9
 801ca64:	4650      	mov	r0, sl
 801ca66:	f7ff fe8d 	bl	801c784 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801ca6a:	4622      	mov	r2, r4
 801ca6c:	4649      	mov	r1, r9
 801ca6e:	4628      	mov	r0, r5
 801ca70:	f7ff fe88 	bl	801c784 <TFT_DrawPixel>
 801ca74:	9b02      	ldr	r3, [sp, #8]
 801ca76:	3301      	adds	r3, #1
 801ca78:	9302      	str	r3, [sp, #8]
 801ca7a:	e790      	b.n	801c99e <TFT_DrawCircle+0x62>

0801ca7c <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca80:	b085      	sub	sp, #20
 801ca82:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801ca84:	4290      	cmp	r0, r2
{
 801ca86:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ca8a:	9301      	str	r3, [sp, #4]
 801ca8c:	4607      	mov	r7, r0
 801ca8e:	460e      	mov	r6, r1
 801ca90:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801ca92:	d211      	bcs.n	801cab8 <TFT_DrawLine+0x3c>
 801ca94:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801ca98:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801ca9a:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801ca9e:	d341      	bcc.n	801cb24 <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801caa0:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801caa2:	eba6 050a 	sub.w	r5, r6, sl
 801caa6:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801caa8:	bf2c      	ite	cs
 801caaa:	f04f 39ff 	movcs.w	r9, #4294967295
 801caae:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801cab2:	f04f 33ff 	mov.w	r3, #4294967295
 801cab6:	e00b      	b.n	801cad0 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801cab8:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801cabc:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801cabe:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801cac2:	d2ed      	bcs.n	801caa0 <TFT_DrawLine+0x24>
 801cac4:	ebaa 0501 	sub.w	r5, sl, r1
 801cac8:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801caca:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801cace:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801cad0:	45a8      	cmp	r8, r5
 801cad2:	f04f 0402 	mov.w	r4, #2
 801cad6:	dd20      	ble.n	801cb1a <TFT_DrawLine+0x9e>
 801cad8:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801cadc:	f1c8 0200 	rsb	r2, r8, #0
 801cae0:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801cae2:	9a01      	ldr	r2, [sp, #4]
 801cae4:	9303      	str	r3, [sp, #12]
 801cae6:	4631      	mov	r1, r6
 801cae8:	4638      	mov	r0, r7
 801caea:	f7ff fe4b 	bl	801c784 <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801caee:	455f      	cmp	r7, fp
 801caf0:	9b03      	ldr	r3, [sp, #12]
 801caf2:	d101      	bne.n	801caf8 <TFT_DrawLine+0x7c>
 801caf4:	4556      	cmp	r6, sl
 801caf6:	d01b      	beq.n	801cb30 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801caf8:	9a02      	ldr	r2, [sp, #8]
 801cafa:	4294      	cmp	r4, r2
			err -= dy;
 801cafc:	bfc1      	itttt	gt
 801cafe:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801cb00:	444f      	addgt	r7, r9
			err -= dy;
 801cb02:	b212      	sxthgt	r2, r2
			x0 += sx;
 801cb04:	b2bf      	uxthgt	r7, r7
 801cb06:	bfd8      	it	le
 801cb08:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801cb0a:	42ac      	cmp	r4, r5
 801cb0c:	da03      	bge.n	801cb16 <TFT_DrawLine+0x9a>
			err += dx;
 801cb0e:	4442      	add	r2, r8
			y0 += sy;
 801cb10:	441e      	add	r6, r3
			err += dx;
 801cb12:	b212      	sxth	r2, r2
			y0 += sy;
 801cb14:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801cb16:	4614      	mov	r4, r2
 801cb18:	e7e3      	b.n	801cae2 <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801cb1a:	fb95 f4f4 	sdiv	r4, r5, r4
 801cb1e:	4264      	negs	r4, r4
 801cb20:	b224      	sxth	r4, r4
 801cb22:	e7db      	b.n	801cadc <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801cb24:	ebaa 0501 	sub.w	r5, sl, r1
 801cb28:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801cb2a:	f04f 0901 	mov.w	r9, #1
 801cb2e:	e7ce      	b.n	801cace <TFT_DrawLine+0x52>
		} 
	}
}
 801cb30:	b005      	add	sp, #20
 801cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb36 <TFT_FillRectangle>:
{
 801cb36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801cb3a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801cb3e:	4606      	mov	r6, r0
 801cb40:	460c      	mov	r4, r1
 801cb42:	4617      	mov	r7, r2
 801cb44:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801cb46:	42ac      	cmp	r4, r5
 801cb48:	d902      	bls.n	801cb50 <TFT_FillRectangle+0x1a>
}
 801cb4a:	b002      	add	sp, #8
 801cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801cb50:	4623      	mov	r3, r4
 801cb52:	4621      	mov	r1, r4
 801cb54:	f8cd 8000 	str.w	r8, [sp]
 801cb58:	463a      	mov	r2, r7
 801cb5a:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801cb5c:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801cb5e:	f7ff ff8d 	bl	801ca7c <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801cb62:	b2a4      	uxth	r4, r4
 801cb64:	e7ef      	b.n	801cb46 <TFT_FillRectangle+0x10>

0801cb66 <TFT_DrawRectangle>:
{
 801cb66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801cb6a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801cb6e:	9400      	str	r4, [sp, #0]
{
 801cb70:	461f      	mov	r7, r3
 801cb72:	4605      	mov	r5, r0
 801cb74:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801cb76:	460b      	mov	r3, r1
{
 801cb78:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801cb7a:	f7ff ff7f 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801cb7e:	463b      	mov	r3, r7
 801cb80:	462a      	mov	r2, r5
 801cb82:	4641      	mov	r1, r8
 801cb84:	4628      	mov	r0, r5
 801cb86:	9400      	str	r4, [sp, #0]
 801cb88:	f7ff ff78 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801cb8c:	463b      	mov	r3, r7
 801cb8e:	4632      	mov	r2, r6
 801cb90:	4641      	mov	r1, r8
 801cb92:	4630      	mov	r0, r6
 801cb94:	9400      	str	r4, [sp, #0]
 801cb96:	f7ff ff71 	bl	801ca7c <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801cb9a:	463b      	mov	r3, r7
 801cb9c:	4632      	mov	r2, r6
 801cb9e:	4639      	mov	r1, r7
 801cba0:	4628      	mov	r0, r5
 801cba2:	9408      	str	r4, [sp, #32]
}
 801cba4:	b002      	add	sp, #8
 801cba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801cbaa:	f7ff bf67 	b.w	801ca7c <TFT_DrawLine>

0801cbae <TFT_DrawFilledCircle>:
{
 801cbae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801cbb2:	b297      	uxth	r7, r2
{
 801cbb4:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801cbb6:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801cbba:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801cbbc:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801cbbe:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801cbc0:	b29e      	uxth	r6, r3
 801cbc2:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801cbc6:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801cbc8:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801cbca:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801cbcc:	b289      	uxth	r1, r1
 801cbce:	4632      	mov	r2, r6
 801cbd0:	4640      	mov	r0, r8
 801cbd2:	f7ff fdd7 	bl	801c784 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801cbd6:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801cbda:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801cbdc:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801cbe0:	4632      	mov	r2, r6
 801cbe2:	b289      	uxth	r1, r1
 801cbe4:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801cbe6:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801cbea:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801cbee:	f7ff fdc9 	bl	801c784 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801cbf2:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801cbf4:	4632      	mov	r2, r6
 801cbf6:	4629      	mov	r1, r5
 801cbf8:	4650      	mov	r0, sl
 801cbfa:	f7ff fdc3 	bl	801c784 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801cbfe:	4632      	mov	r2, r6
 801cc00:	4629      	mov	r1, r5
 801cc02:	4638      	mov	r0, r7
 801cc04:	f7ff fdbe 	bl	801c784 <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801cc08:	462b      	mov	r3, r5
 801cc0a:	9600      	str	r6, [sp, #0]
 801cc0c:	4652      	mov	r2, sl
 801cc0e:	4629      	mov	r1, r5
 801cc10:	4638      	mov	r0, r7
 801cc12:	f7ff ff33 	bl	801ca7c <TFT_DrawLine>
    while (x < y) {
 801cc16:	2300      	movs	r3, #0
 801cc18:	9302      	str	r3, [sp, #8]
 801cc1a:	f108 33ff 	add.w	r3, r8, #4294967295
 801cc1e:	9305      	str	r3, [sp, #20]
 801cc20:	f108 0301 	add.w	r3, r8, #1
 801cc24:	9306      	str	r3, [sp, #24]
 801cc26:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801cc28:	b224      	sxth	r4, r4
 801cc2a:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801cc2c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801cc30:	454b      	cmp	r3, r9
 801cc32:	db02      	blt.n	801cc3a <TFT_DrawFilledCircle+0x8c>
}
 801cc34:	b009      	add	sp, #36	; 0x24
 801cc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801cc3a:	2c00      	cmp	r4, #0
 801cc3c:	db0a      	blt.n	801cc54 <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801cc3e:	9b03      	ldr	r3, [sp, #12]
 801cc40:	3302      	adds	r3, #2
 801cc42:	b29b      	uxth	r3, r3
            y--;
 801cc44:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801cc48:	b21a      	sxth	r2, r3
            f += ddF_y;
 801cc4a:	441c      	add	r4, r3
            y--;
 801cc4c:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801cc50:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801cc52:	b224      	sxth	r4, r4
 801cc54:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801cc58:	9b05      	ldr	r3, [sp, #20]
 801cc5a:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801cc5c:	9600      	str	r6, [sp, #0]
 801cc5e:	fa1f f789 	uxth.w	r7, r9
 801cc62:	eba3 0b0a 	sub.w	fp, r3, sl
 801cc66:	19eb      	adds	r3, r5, r7
 801cc68:	fa1f fb8b 	uxth.w	fp, fp
 801cc6c:	b29b      	uxth	r3, r3
 801cc6e:	4452      	add	r2, sl
 801cc70:	b292      	uxth	r2, r2
 801cc72:	4619      	mov	r1, r3
 801cc74:	4658      	mov	r0, fp
 801cc76:	9204      	str	r2, [sp, #16]
 801cc78:	f7ff ff00 	bl	801ca7c <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801cc7c:	1beb      	subs	r3, r5, r7
 801cc7e:	b29b      	uxth	r3, r3
 801cc80:	465a      	mov	r2, fp
 801cc82:	4619      	mov	r1, r3
 801cc84:	9804      	ldr	r0, [sp, #16]
 801cc86:	9600      	str	r6, [sp, #0]
 801cc88:	f7ff fef8 	bl	801ca7c <TFT_DrawLine>
 801cc8c:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801cc8e:	9600      	str	r6, [sp, #0]
 801cc90:	eb08 0b07 	add.w	fp, r8, r7
 801cc94:	4453      	add	r3, sl
 801cc96:	eba8 0707 	sub.w	r7, r8, r7
 801cc9a:	b29b      	uxth	r3, r3
 801cc9c:	fa1f fb8b 	uxth.w	fp, fp
 801cca0:	b2bf      	uxth	r7, r7
 801cca2:	4619      	mov	r1, r3
 801cca4:	463a      	mov	r2, r7
 801cca6:	4658      	mov	r0, fp
 801cca8:	f7ff fee8 	bl	801ca7c <TFT_DrawLine>
 801ccac:	1e6b      	subs	r3, r5, #1
 801ccae:	eba3 030a 	sub.w	r3, r3, sl
 801ccb2:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801ccb4:	4619      	mov	r1, r3
 801ccb6:	9600      	str	r6, [sp, #0]
 801ccb8:	463a      	mov	r2, r7
 801ccba:	4658      	mov	r0, fp
 801ccbc:	f7ff fede 	bl	801ca7c <TFT_DrawLine>
 801ccc0:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801ccc2:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801ccc6:	3403      	adds	r4, #3
 801ccc8:	3301      	adds	r3, #1
 801ccca:	b224      	sxth	r4, r4
 801cccc:	9302      	str	r3, [sp, #8]
 801ccce:	e7ad      	b.n	801cc2c <TFT_DrawFilledCircle+0x7e>

0801ccd0 <TFT_DrawFilledCircleCorner>:
{
 801ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccd4:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801ccd6:	b293      	uxth	r3, r2
 801ccd8:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801ccdc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801cce0:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801cce2:	005b      	lsls	r3, r3, #1
 801cce4:	b21b      	sxth	r3, r3
 801cce6:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801cce8:	2300      	movs	r3, #0
 801ccea:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801ccec:	f009 0301 	and.w	r3, r9, #1
{
 801ccf0:	9103      	str	r1, [sp, #12]
 801ccf2:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801ccf4:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801ccf6:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801ccf8:	b284      	uxth	r4, r0
    while (x < y) {
 801ccfa:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801ccfe:	42bb      	cmp	r3, r7
 801cd00:	db02      	blt.n	801cd08 <TFT_DrawFilledCircleCorner+0x38>
}
 801cd02:	b007      	add	sp, #28
 801cd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801cd08:	2e00      	cmp	r6, #0
 801cd0a:	db08      	blt.n	801cd1e <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801cd0c:	9b04      	ldr	r3, [sp, #16]
 801cd0e:	3302      	adds	r3, #2
 801cd10:	b29b      	uxth	r3, r3
            y--;
 801cd12:	3f01      	subs	r7, #1
            ddF_y += 2;
 801cd14:	b21a      	sxth	r2, r3
            f += ddF_y;
 801cd16:	441e      	add	r6, r3
            y--;
 801cd18:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801cd1a:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801cd1c:	b236      	sxth	r6, r6
 801cd1e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801cd22:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801cd24:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801cd28:	3603      	adds	r6, #3
 801cd2a:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801cd2c:	b1f3      	cbz	r3, 801cd6c <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801cd2e:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cd32:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801cd36:	f8cd b000 	str.w	fp, [sp]
 801cd3a:	fa1f fa87 	uxth.w	sl, r7
 801cd3e:	eba8 030a 	sub.w	r3, r8, sl
 801cd42:	1e62      	subs	r2, r4, #1
 801cd44:	b29b      	uxth	r3, r3
 801cd46:	1b52      	subs	r2, r2, r5
 801cd48:	4619      	mov	r1, r3
 801cd4a:	b292      	uxth	r2, r2
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	f7ff fe95 	bl	801ca7c <TFT_DrawLine>
 801cd52:	f108 33ff 	add.w	r3, r8, #4294967295
 801cd56:	1b5b      	subs	r3, r3, r5
 801cd58:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801cd5a:	eba4 020a 	sub.w	r2, r4, sl
 801cd5e:	f8cd b000 	str.w	fp, [sp]
 801cd62:	b292      	uxth	r2, r2
 801cd64:	4619      	mov	r1, r3
 801cd66:	4620      	mov	r0, r4
 801cd68:	f7ff fe88 	bl	801ca7c <TFT_DrawLine>
        if (corner & 0x02) {	
 801cd6c:	f019 0f02 	tst.w	r9, #2
 801cd70:	d01e      	beq.n	801cdb0 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801cd72:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cd76:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801cd7a:	f8cd b000 	str.w	fp, [sp]
 801cd7e:	fa1f fa87 	uxth.w	sl, r7
 801cd82:	eba8 030a 	sub.w	r3, r8, sl
 801cd86:	1c60      	adds	r0, r4, #1
 801cd88:	b29b      	uxth	r3, r3
 801cd8a:	4428      	add	r0, r5
 801cd8c:	4619      	mov	r1, r3
 801cd8e:	4622      	mov	r2, r4
 801cd90:	b280      	uxth	r0, r0
 801cd92:	f7ff fe73 	bl	801ca7c <TFT_DrawLine>
 801cd96:	f108 33ff 	add.w	r3, r8, #4294967295
 801cd9a:	1b5b      	subs	r3, r3, r5
 801cd9c:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801cd9e:	eb04 000a 	add.w	r0, r4, sl
 801cda2:	f8cd b000 	str.w	fp, [sp]
 801cda6:	4622      	mov	r2, r4
 801cda8:	4619      	mov	r1, r3
 801cdaa:	b280      	uxth	r0, r0
 801cdac:	f7ff fe66 	bl	801ca7c <TFT_DrawLine>
		if (corner & 0x04) {
 801cdb0:	f019 0f04 	tst.w	r9, #4
 801cdb4:	d01e      	beq.n	801cdf4 <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801cdb6:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cdba:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801cdbe:	f8cd b000 	str.w	fp, [sp]
 801cdc2:	fa1f fa87 	uxth.w	sl, r7
 801cdc6:	eb08 030a 	add.w	r3, r8, sl
 801cdca:	1c62      	adds	r2, r4, #1
 801cdcc:	b29b      	uxth	r3, r3
 801cdce:	442a      	add	r2, r5
 801cdd0:	4619      	mov	r1, r3
 801cdd2:	b292      	uxth	r2, r2
 801cdd4:	4620      	mov	r0, r4
 801cdd6:	f7ff fe51 	bl	801ca7c <TFT_DrawLine>
 801cdda:	f108 0301 	add.w	r3, r8, #1
 801cdde:	442b      	add	r3, r5
 801cde0:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801cde2:	eb04 000a 	add.w	r0, r4, sl
 801cde6:	f8cd b000 	str.w	fp, [sp]
 801cdea:	4622      	mov	r2, r4
 801cdec:	4619      	mov	r1, r3
 801cdee:	b280      	uxth	r0, r0
 801cdf0:	f7ff fe44 	bl	801ca7c <TFT_DrawLine>
        if (corner & 0x08) {
 801cdf4:	f019 0f08 	tst.w	r9, #8
 801cdf8:	d01e      	beq.n	801ce38 <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801cdfa:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cdfe:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801ce02:	f8cd b000 	str.w	fp, [sp]
 801ce06:	fa1f fa87 	uxth.w	sl, r7
 801ce0a:	eb08 030a 	add.w	r3, r8, sl
 801ce0e:	1e60      	subs	r0, r4, #1
 801ce10:	b29b      	uxth	r3, r3
 801ce12:	1b40      	subs	r0, r0, r5
 801ce14:	4619      	mov	r1, r3
 801ce16:	4622      	mov	r2, r4
 801ce18:	b280      	uxth	r0, r0
 801ce1a:	f7ff fe2f 	bl	801ca7c <TFT_DrawLine>
 801ce1e:	f108 0301 	add.w	r3, r8, #1
 801ce22:	442b      	add	r3, r5
 801ce24:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801ce26:	eba4 020a 	sub.w	r2, r4, sl
 801ce2a:	f8cd b000 	str.w	fp, [sp]
 801ce2e:	b292      	uxth	r2, r2
 801ce30:	4619      	mov	r1, r3
 801ce32:	4620      	mov	r0, r4
 801ce34:	f7ff fe22 	bl	801ca7c <TFT_DrawLine>
 801ce38:	9b02      	ldr	r3, [sp, #8]
 801ce3a:	3301      	adds	r3, #1
 801ce3c:	9302      	str	r3, [sp, #8]
 801ce3e:	e75c      	b.n	801ccfa <TFT_DrawFilledCircleCorner+0x2a>

0801ce40 <TFT_DrawFilledRoundedRectangle>:
{
 801ce40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801ce44:	4282      	cmp	r2, r0
{
 801ce46:	4683      	mov	fp, r0
 801ce48:	460d      	mov	r5, r1
 801ce4a:	4692      	mov	sl, r2
 801ce4c:	461c      	mov	r4, r3
 801ce4e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801ce52:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801ce56:	d06d      	beq.n	801cf34 <TFT_DrawFilledRoundedRectangle+0xf4>
 801ce58:	428b      	cmp	r3, r1
 801ce5a:	d06b      	beq.n	801cf34 <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801ce5c:	b91e      	cbnz	r6, 801ce66 <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801ce5e:	f8cd 8000 	str.w	r8, [sp]
 801ce62:	f7ff fe68 	bl	801cb36 <TFT_FillRectangle>
	if (x0 > x1) {
 801ce66:	45da      	cmp	sl, fp
 801ce68:	bf3e      	ittt	cc
 801ce6a:	465b      	movcc	r3, fp
 801ce6c:	46d3      	movcc	fp, sl
 801ce6e:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801ce70:	42ac      	cmp	r4, r5
 801ce72:	bf38      	it	cc
 801ce74:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801ce76:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801ce7a:	bf3c      	itt	cc
 801ce7c:	4625      	movcc	r5, r4
 801ce7e:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801ce80:	2302      	movs	r3, #2
 801ce82:	fb91 f1f3 	sdiv	r1, r1, r3
 801ce86:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801ce88:	bfc8      	it	gt
 801ce8a:	b28e      	uxthgt	r6, r1
 801ce8c:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801ce8e:	1b63      	subs	r3, r4, r5
 801ce90:	fb93 f3f2 	sdiv	r3, r3, r2
 801ce94:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801ce96:	bfc8      	it	gt
 801ce98:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801ce9a:	eb0b 0706 	add.w	r7, fp, r6
 801ce9e:	ebaa 0906 	sub.w	r9, sl, r6
 801cea2:	b2bf      	uxth	r7, r7
 801cea4:	fa1f f989 	uxth.w	r9, r9
 801cea8:	4623      	mov	r3, r4
 801ceaa:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801ceac:	1ba4      	subs	r4, r4, r6
 801ceae:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801ceb0:	464a      	mov	r2, r9
 801ceb2:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801ceb4:	b2ad      	uxth	r5, r5
 801ceb6:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801ceb8:	f8cd 8000 	str.w	r8, [sp]
 801cebc:	f7ff fe3b 	bl	801cb36 <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801cec0:	4623      	mov	r3, r4
 801cec2:	463a      	mov	r2, r7
 801cec4:	4629      	mov	r1, r5
 801cec6:	4658      	mov	r0, fp
 801cec8:	f8cd 8000 	str.w	r8, [sp]
 801cecc:	f7ff fe33 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801ced0:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801ced2:	4623      	mov	r3, r4
 801ced4:	4652      	mov	r2, sl
 801ced6:	4629      	mov	r1, r5
 801ced8:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801ceda:	b23f      	sxth	r7, r7
 801cedc:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801cede:	f8cd 8000 	str.w	r8, [sp]
 801cee2:	f7ff fe28 	bl	801cb36 <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801cee6:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801ceea:	4632      	mov	r2, r6
 801ceec:	4629      	mov	r1, r5
 801ceee:	4638      	mov	r0, r7
 801cef0:	f8cd 8000 	str.w	r8, [sp]
 801cef4:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801cef6:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801cef8:	f7ff feea 	bl	801ccd0 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801cefc:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801cefe:	4632      	mov	r2, r6
 801cf00:	4629      	mov	r1, r5
 801cf02:	4648      	mov	r0, r9
 801cf04:	f8cd 8000 	str.w	r8, [sp]
 801cf08:	2302      	movs	r3, #2
 801cf0a:	f7ff fee1 	bl	801ccd0 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801cf0e:	4632      	mov	r2, r6
 801cf10:	4621      	mov	r1, r4
 801cf12:	4648      	mov	r0, r9
 801cf14:	f8cd 8000 	str.w	r8, [sp]
 801cf18:	2304      	movs	r3, #4
 801cf1a:	f7ff fed9 	bl	801ccd0 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801cf1e:	2308      	movs	r3, #8
 801cf20:	4632      	mov	r2, r6
 801cf22:	4621      	mov	r1, r4
 801cf24:	4638      	mov	r0, r7
 801cf26:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801cf2a:	b003      	add	sp, #12
 801cf2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801cf30:	f7ff bece 	b.w	801ccd0 <TFT_DrawFilledCircleCorner>
}
 801cf34:	b003      	add	sp, #12
 801cf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf3a <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801cf3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cf3e:	4688      	mov	r8, r1
 801cf40:	a902      	add	r1, sp, #8
 801cf42:	e901 000c 	stmdb	r1, {r2, r3}
 801cf46:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801cf48:	4645      	mov	r5, r8
	uint32_t i = 0;
 801cf4a:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801cf4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf50:	4443      	add	r3, r8
 801cf52:	429d      	cmp	r5, r3
 801cf54:	da15      	bge.n	801cf82 <TFT_DrawBitmap+0x48>
 801cf56:	0066      	lsls	r6, r4, #1
 801cf58:	eba7 0904 	sub.w	r9, r7, r4
 801cf5c:	e006      	b.n	801cf6c <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801cf5e:	9b01      	ldr	r3, [sp, #4]
 801cf60:	4629      	mov	r1, r5
 801cf62:	5b9a      	ldrh	r2, [r3, r6]
 801cf64:	f7ff fc0e 	bl	801c784 <TFT_DrawPixel>
			i++;
 801cf68:	3401      	adds	r4, #1
 801cf6a:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801cf6c:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf70:	eb09 0004 	add.w	r0, r9, r4
 801cf74:	b280      	uxth	r0, r0
 801cf76:	443b      	add	r3, r7
 801cf78:	4298      	cmp	r0, r3
 801cf7a:	dbf0      	blt.n	801cf5e <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801cf7c:	3501      	adds	r5, #1
 801cf7e:	b2ad      	uxth	r5, r5
 801cf80:	e7e4      	b.n	801cf4c <TFT_DrawBitmap+0x12>
		}
	}
}
 801cf82:	b003      	add	sp, #12
 801cf84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801cf88 <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801cf88:	4b01      	ldr	r3, [pc, #4]	; (801cf90 <TFT_SetFont+0x8>)
 801cf8a:	6098      	str	r0, [r3, #8]
 801cf8c:	4770      	bx	lr
 801cf8e:	bf00      	nop
 801cf90:	200956fc 	.word	0x200956fc

0801cf94 <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801cf94:	4b01      	ldr	r3, [pc, #4]	; (801cf9c <TFT_SetTextColor+0x8>)
 801cf96:	6018      	str	r0, [r3, #0]
 801cf98:	4770      	bx	lr
 801cf9a:	bf00      	nop
 801cf9c:	200956fc 	.word	0x200956fc

0801cfa0 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801cfa0:	4b01      	ldr	r3, [pc, #4]	; (801cfa8 <TFT_SetBackColor+0x8>)
 801cfa2:	6058      	str	r0, [r3, #4]
 801cfa4:	4770      	bx	lr
 801cfa6:	bf00      	nop
 801cfa8:	200956fc 	.word	0x200956fc

0801cfac <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801cfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfb0:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801cfb2:	2a01      	cmp	r2, #1
{
 801cfb4:	9001      	str	r0, [sp, #4]
 801cfb6:	9102      	str	r1, [sp, #8]
 801cfb8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801d070 <TFT_DrawCharRus+0xc4>
 801cfbc:	482b      	ldr	r0, [pc, #172]	; (801d06c <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801cfbe:	d11f      	bne.n	801d000 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801cfc0:	6882      	ldr	r2, [r0, #8]
 801cfc2:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801cfc4:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801cfc8:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801cfca:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801cfce:	88d3      	ldrh	r3, [r2, #6]
 801cfd0:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801cfd2:	f10a 0507 	add.w	r5, sl, #7
 801cfd6:	10ed      	asrs	r5, r5, #3
 801cfd8:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801cfdc:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801cfe0:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801cfe2:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801cfe6:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801cfe8:	9303      	str	r3, [sp, #12]
 801cfea:	9b02      	ldr	r3, [sp, #8]
 801cfec:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801cff0:	9b00      	ldr	r3, [sp, #0]
 801cff2:	4598      	cmp	r8, r3
 801cff4:	fa1f f989 	uxth.w	r9, r9
 801cff8:	d30e      	bcc.n	801d018 <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801cffa:	b005      	add	sp, #20
 801cffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801d000:	6884      	ldr	r4, [r0, #8]
 801d002:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801d006:	88e2      	ldrh	r2, [r4, #6]
 801d008:	434a      	muls	r2, r1
 801d00a:	88a1      	ldrh	r1, [r4, #4]
 801d00c:	6824      	ldr	r4, [r4, #0]
 801d00e:	3107      	adds	r1, #7
 801d010:	10c9      	asrs	r1, r1, #3
 801d012:	fb01 4202 	mla	r2, r1, r2, r4
 801d016:	e7d5      	b.n	801cfc4 <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801d018:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801d01c:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801d01e:	eb02 0106 	add.w	r1, r2, r6
 801d022:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801d024:	d00a      	beq.n	801d03c <TFT_DrawCharRus+0x90>
 801d026:	784a      	ldrb	r2, [r1, #1]
 801d028:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801d02a:	bf1d      	ittte	ne
 801d02c:	0212      	lslne	r2, r2, #8
 801d02e:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801d032:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801d034:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801d038:	bf18      	it	ne
 801d03a:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801d03c:	2700      	movs	r7, #0
 801d03e:	4557      	cmp	r7, sl
 801d040:	d303      	bcc.n	801d04a <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801d042:	f108 0801 	add.w	r8, r8, #1
 801d046:	442e      	add	r6, r5
 801d048:	e7cf      	b.n	801cfea <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801d04a:	9b03      	ldr	r3, [sp, #12]
 801d04c:	1bd9      	subs	r1, r3, r7
 801d04e:	9b01      	ldr	r3, [sp, #4]
 801d050:	2201      	movs	r2, #1
 801d052:	408a      	lsls	r2, r1
 801d054:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801d056:	4b05      	ldr	r3, [pc, #20]	; (801d06c <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801d058:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801d05a:	bf14      	ite	ne
 801d05c:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801d05e:	889a      	ldrheq	r2, [r3, #4]
 801d060:	4649      	mov	r1, r9
 801d062:	b280      	uxth	r0, r0
 801d064:	f7ff fb8e 	bl	801c784 <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801d068:	3701      	adds	r7, #1
 801d06a:	e7e8      	b.n	801d03e <TFT_DrawCharRus+0x92>
 801d06c:	200956fc 	.word	0x200956fc
 801d070:	2009570c 	.word	0x2009570c

0801d074 <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d078:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801d07a:	4d25      	ldr	r5, [pc, #148]	; (801d110 <TFT_DrawCutBMP+0x9c>)
 801d07c:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801d080:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801d084:	4c23      	ldr	r4, [pc, #140]	; (801d114 <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801d086:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801d118 <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801d08a:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801d08c:	fb09 2303 	mla	r3, r9, r3, r2
 801d090:	1e5a      	subs	r2, r3, #1
 801d092:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801d094:	19ca      	adds	r2, r1, r7
{
 801d096:	4683      	mov	fp, r0
	uint16_t q = 1;
 801d098:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801d09a:	9202      	str	r2, [sp, #8]
 801d09c:	8822      	ldrh	r2, [r4, #0]
 801d09e:	9902      	ldr	r1, [sp, #8]
 801d0a0:	428a      	cmp	r2, r1
 801d0a2:	db02      	blt.n	801d0aa <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801d0a4:	b005      	add	sp, #20
 801d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801d0aa:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801d0ae:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801d0b2:	f8a8 b000 	strh.w	fp, [r8]
 801d0b6:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801d0b8:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801d0bc:	f8b8 0000 	ldrh.w	r0, [r8]
 801d0c0:	9a01      	ldr	r2, [sp, #4]
 801d0c2:	4290      	cmp	r0, r2
 801d0c4:	db03      	blt.n	801d0ce <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801d0c6:	8822      	ldrh	r2, [r4, #0]
 801d0c8:	3201      	adds	r2, #1
 801d0ca:	8022      	strh	r2, [r4, #0]
 801d0cc:	e7e6      	b.n	801d09c <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801d0ce:	6829      	ldr	r1, [r5, #0]
 801d0d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d0d2:	9303      	str	r3, [sp, #12]
 801d0d4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801d0d8:	8821      	ldrh	r1, [r4, #0]
 801d0da:	f7ff fb53 	bl	801c784 <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801d0de:	682a      	ldr	r2, [r5, #0]
 801d0e0:	9b03      	ldr	r3, [sp, #12]
 801d0e2:	1e71      	subs	r1, r6, #1
 801d0e4:	fb09 a101 	mla	r1, r9, r1, sl
 801d0e8:	4291      	cmp	r1, r2
 801d0ea:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801d0ee:	bf9b      	ittet	ls
 801d0f0:	444a      	addls	r2, r9
 801d0f2:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801d0f4:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801d0f6:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801d0f8:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801d0fc:	bf98      	it	ls
 801d0fe:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801d100:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801d104:	bf98      	it	ls
 801d106:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801d108:	f8a8 2000 	strh.w	r2, [r8]
 801d10c:	e7d6      	b.n	801d0bc <TFT_DrawCutBMP+0x48>
 801d10e:	bf00      	nop
 801d110:	20009d1c 	.word	0x20009d1c
 801d114:	200956f8 	.word	0x200956f8
 801d118:	20095708 	.word	0x20095708

0801d11c <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801d120:	4b28      	ldr	r3, [pc, #160]	; (801d1c4 <TFT_DrawChar+0xa8>)
{
 801d122:	b085      	sub	sp, #20
 801d124:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801d128:	6899      	ldr	r1, [r3, #8]
 801d12a:	4827      	ldr	r0, [pc, #156]	; (801d1c8 <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801d12c:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801d130:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801d134:	6809      	ldr	r1, [r1, #0]
 801d136:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801d138:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801d13c:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801d13e:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801d140:	fb0b f202 	mul.w	r2, fp, r2
 801d144:	fb05 1202 	mla	r2, r5, r2, r1
 801d148:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801d14a:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801d14e:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801d152:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801d154:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801d158:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801d15a:	9303      	str	r3, [sp, #12]
 801d15c:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801d15e:	45d8      	cmp	r8, fp
 801d160:	eb03 0908 	add.w	r9, r3, r8
 801d164:	fa1f f989 	uxth.w	r9, r9
 801d168:	d302      	bcc.n	801d170 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801d16a:	b005      	add	sp, #20
 801d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801d170:	9b02      	ldr	r3, [sp, #8]
 801d172:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801d174:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801d176:	eb02 0106 	add.w	r1, r2, r6
 801d17a:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801d17c:	d00a      	beq.n	801d194 <TFT_DrawChar+0x78>
 801d17e:	784a      	ldrb	r2, [r1, #1]
 801d180:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801d182:	bf1d      	ittte	ne
 801d184:	0212      	lslne	r2, r2, #8
 801d186:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801d18a:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801d18c:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801d190:	bf18      	it	ne
 801d192:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801d194:	2700      	movs	r7, #0
 801d196:	4557      	cmp	r7, sl
 801d198:	d303      	bcc.n	801d1a2 <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801d19a:	f108 0801 	add.w	r8, r8, #1
 801d19e:	442e      	add	r6, r5
 801d1a0:	e7dc      	b.n	801d15c <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801d1a2:	9b03      	ldr	r3, [sp, #12]
 801d1a4:	1bd9      	subs	r1, r3, r7
 801d1a6:	9b00      	ldr	r3, [sp, #0]
 801d1a8:	2201      	movs	r2, #1
 801d1aa:	408a      	lsls	r2, r1
 801d1ac:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801d1ae:	4b05      	ldr	r3, [pc, #20]	; (801d1c4 <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801d1b0:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801d1b2:	bf14      	ite	ne
 801d1b4:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801d1b6:	889a      	ldrheq	r2, [r3, #4]
 801d1b8:	4649      	mov	r1, r9
 801d1ba:	b280      	uxth	r0, r0
 801d1bc:	f7ff fae2 	bl	801c784 <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801d1c0:	3701      	adds	r7, #1
 801d1c2:	e7e8      	b.n	801d196 <TFT_DrawChar+0x7a>
 801d1c4:	200956fc 	.word	0x200956fc
 801d1c8:	2009570c 	.word	0x2009570c

0801d1cc <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801d1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1d0:	460e      	mov	r6, r1
 801d1d2:	4604      	mov	r4, r0
 801d1d4:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801d1d6:	4611      	mov	r1, r2
 801d1d8:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801d1dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d1e0:	2a00      	cmp	r2, #0
 801d1e2:	d1f9      	bne.n	801d1d8 <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801d1e4:	4f1b      	ldr	r7, [pc, #108]	; (801d254 <TFT_DisplayString+0x88>)
 801d1e6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801d258 <TFT_DisplayString+0x8c>
 801d1ea:	68ba      	ldr	r2, [r7, #8]
 801d1ec:	f8b8 1000 	ldrh.w	r1, [r8]
 801d1f0:	8890      	ldrh	r0, [r2, #4]
 801d1f2:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801d1f6:	2b01      	cmp	r3, #1
 801d1f8:	d017      	beq.n	801d22a <TFT_DisplayString+0x5e>
 801d1fa:	2b02      	cmp	r3, #2
 801d1fc:	d01c      	beq.n	801d238 <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801d1fe:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801d200:	2b00      	cmp	r3, #0
 801d202:	bfd8      	it	le
 801d204:	2401      	movle	r4, #1
 801d206:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801d208:	68b9      	ldr	r1, [r7, #8]
 801d20a:	f8b8 0000 	ldrh.w	r0, [r8]
 801d20e:	8889      	ldrh	r1, [r1, #4]
 801d210:	eba9 0305 	sub.w	r3, r9, r5
 801d214:	b29b      	uxth	r3, r3
 801d216:	fb01 0313 	mls	r3, r1, r3, r0
 801d21a:	b29b      	uxth	r3, r3
 801d21c:	4299      	cmp	r1, r3
 801d21e:	f819 2b01 	ldrb.w	r2, [r9], #1
 801d222:	dc00      	bgt.n	801d226 <TFT_DisplayString+0x5a>
 801d224:	b96a      	cbnz	r2, 801d242 <TFT_DisplayString+0x76>
 801d226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801d22a:	eba2 020e 	sub.w	r2, r2, lr
 801d22e:	4342      	muls	r2, r0
 801d230:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801d234:	b2a4      	uxth	r4, r4
			break;
 801d236:	e7e2      	b.n	801d1fe <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801d238:	eba2 020e 	sub.w	r2, r2, lr
 801d23c:	fb12 4400 	smlabb	r4, r2, r0, r4
 801d240:	e7f8      	b.n	801d234 <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801d242:	4620      	mov	r0, r4
 801d244:	4631      	mov	r1, r6
 801d246:	f7ff ff69 	bl	801d11c <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801d24a:	68bb      	ldr	r3, [r7, #8]
 801d24c:	889b      	ldrh	r3, [r3, #4]
 801d24e:	441c      	add	r4, r3
 801d250:	b2a4      	uxth	r4, r4
 801d252:	e7d9      	b.n	801d208 <TFT_DisplayString+0x3c>
 801d254:	200956fc 	.word	0x200956fc
 801d258:	20000eb8 	.word	0x20000eb8

0801d25c <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801d25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801d260:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801d262:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801d264:	eba6 0800 	sub.w	r8, r6, r0
 801d268:	2f00      	cmp	r7, #0
 801d26a:	bfb8      	it	lt
 801d26c:	427f      	neglt	r7, r7
 801d26e:	f1b8 0f00 	cmp.w	r8, #0
 801d272:	bfb8      	it	lt
 801d274:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801d278:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801d27a:	4604      	mov	r4, r0
 801d27c:	460d      	mov	r5, r1
 801d27e:	461a      	mov	r2, r3
 801d280:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801d284:	dd04      	ble.n	801d290 <DrawLineX+0x34>
 801d286:	4633      	mov	r3, r6
        swap(x1, y1);
 801d288:	460c      	mov	r4, r1
        swap(x2, y2);
 801d28a:	4616      	mov	r6, r2
        swap(x1, y1);
 801d28c:	4605      	mov	r5, r0
        swap(x2, y2);
 801d28e:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801d290:	42b4      	cmp	r4, r6
 801d292:	d905      	bls.n	801d2a0 <DrawLineX+0x44>
 801d294:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801d296:	4615      	mov	r5, r2
 801d298:	461a      	mov	r2, r3
    if(x1>x2){
 801d29a:	4623      	mov	r3, r4
 801d29c:	4634      	mov	r4, r6
 801d29e:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801d2a0:	eba2 0905 	sub.w	r9, r2, r5
 801d2a4:	464b      	mov	r3, r9
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	bfb8      	it	lt
 801d2aa:	425b      	neglt	r3, r3
    dx=x2-x1;
 801d2ac:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801d2b0:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801d2b2:	2302      	movs	r3, #2
 801d2b4:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801d2b8:	4295      	cmp	r5, r2
 801d2ba:	bf34      	ite	cc
 801d2bc:	2301      	movcc	r3, #1
 801d2be:	f04f 33ff 	movcs.w	r3, #4294967295
 801d2c2:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801d2c4:	42b4      	cmp	r4, r6
 801d2c6:	d902      	bls.n	801d2ce <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801d2c8:	b003      	add	sp, #12
 801d2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801d2ce:	4547      	cmp	r7, r8
 801d2d0:	bfcb      	itete	gt
 801d2d2:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801d2d4:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801d2d6:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801d2d8:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801d2da:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801d2dc:	f7ff fa52 	bl	801c784 <TFT_DrawPixel>
        if (err<0){
 801d2e0:	9b01      	ldr	r3, [sp, #4]
 801d2e2:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801d2e6:	bf48      	it	mi
 801d2e8:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801d2ea:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801d2ee:	bf42      	ittt	mi
 801d2f0:	18ed      	addmi	r5, r5, r3
 801d2f2:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801d2f4:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801d2f6:	b2a4      	uxth	r4, r4
 801d2f8:	e7e4      	b.n	801d2c4 <DrawLineX+0x68>
	...

0801d2fc <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801d2fc:	4b06      	ldr	r3, [pc, #24]	; (801d318 <MX_SDMMC1_SD_Init+0x1c>)
 801d2fe:	4a07      	ldr	r2, [pc, #28]	; (801d31c <MX_SDMMC1_SD_Init+0x20>)
 801d300:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801d302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801d306:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801d308:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801d30a:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801d30c:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801d30e:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801d310:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801d312:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801d314:	619a      	str	r2, [r3, #24]
 801d316:	4770      	bx	lr
 801d318:	20095810 	.word	0x20095810
 801d31c:	50062400 	.word	0x50062400

0801d320 <MX_TIM2_Init>:
{
 801d320:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d322:	4a16      	ldr	r2, [pc, #88]	; (801d37c <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801d324:	4c16      	ldr	r4, [pc, #88]	; (801d380 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d326:	7811      	ldrb	r1, [r2, #0]
 801d328:	4a16      	ldr	r2, [pc, #88]	; (801d384 <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801d32a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801d32e:	f242 7310 	movw	r3, #10000	; 0x2710
 801d332:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801d336:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d338:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d33a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d33e:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d340:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d342:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d344:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d346:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d348:	f7e8 fe3a 	bl	8005fc0 <HAL_TIM_Base_Init>
 801d34c:	b100      	cbz	r0, 801d350 <MX_TIM2_Init+0x30>
 801d34e:	e7fe      	b.n	801d34e <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d350:	a908      	add	r1, sp, #32
 801d352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d356:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801d35a:	4620      	mov	r0, r4
 801d35c:	f7e8 ff8c 	bl	8006278 <HAL_TIM_ConfigClockSource>
 801d360:	b100      	cbz	r0, 801d364 <MX_TIM2_Init+0x44>
 801d362:	e7fe      	b.n	801d362 <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801d364:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d366:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d368:	a901      	add	r1, sp, #4
 801d36a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801d36c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d36e:	f7e9 f8a7 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 801d372:	b100      	cbz	r0, 801d376 <MX_TIM2_Init+0x56>
 801d374:	e7fe      	b.n	801d374 <MX_TIM2_Init+0x54>
}
 801d376:	b008      	add	sp, #32
 801d378:	bd10      	pop	{r4, pc}
 801d37a:	bf00      	nop
 801d37c:	200905b6 	.word	0x200905b6
 801d380:	20095c60 	.word	0x20095c60
 801d384:	08032450 	.word	0x08032450

0801d388 <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801d388:	4a07      	ldr	r2, [pc, #28]	; (801d3a8 <DWT_Init+0x20>)
 801d38a:	68d3      	ldr	r3, [r2, #12]
 801d38c:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801d390:	d109      	bne.n	801d3a6 <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801d392:	68d1      	ldr	r1, [r2, #12]
 801d394:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801d398:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801d39a:	4a04      	ldr	r2, [pc, #16]	; (801d3ac <DWT_Init+0x24>)
 801d39c:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801d39e:	6813      	ldr	r3, [r2, #0]
 801d3a0:	f043 0301 	orr.w	r3, r3, #1
 801d3a4:	6013      	str	r3, [r2, #0]
 801d3a6:	4770      	bx	lr
 801d3a8:	e000edf0 	.word	0xe000edf0
 801d3ac:	e0001000 	.word	0xe0001000

0801d3b0 <DWT_Delay>:
  return DWT->CYCCNT;
 801d3b0:	4a07      	ldr	r2, [pc, #28]	; (801d3d0 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801d3b2:	4b08      	ldr	r3, [pc, #32]	; (801d3d4 <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801d3b4:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801d3b6:	681b      	ldr	r3, [r3, #0]
{
 801d3b8:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801d3ba:	4c07      	ldr	r4, [pc, #28]	; (801d3d8 <DWT_Delay+0x28>)
 801d3bc:	fbb3 f3f4 	udiv	r3, r3, r4
 801d3c0:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801d3c4:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801d3c6:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	dbfb      	blt.n	801d3c4 <DWT_Delay+0x14>
}
 801d3cc:	bd10      	pop	{r4, pc}
 801d3ce:	bf00      	nop
 801d3d0:	e0001000 	.word	0xe0001000
 801d3d4:	20000ed4 	.word	0x20000ed4
 801d3d8:	000f4240 	.word	0x000f4240

0801d3dc <Calculate_Data>:
{
 801d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801d3de:	4a78      	ldr	r2, [pc, #480]	; (801d5c0 <Calculate_Data+0x1e4>)
 801d3e0:	4b78      	ldr	r3, [pc, #480]	; (801d5c4 <Calculate_Data+0x1e8>)
 801d3e2:	4979      	ldr	r1, [pc, #484]	; (801d5c8 <Calculate_Data+0x1ec>)
 801d3e4:	4879      	ldr	r0, [pc, #484]	; (801d5cc <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801d3e6:	4d7a      	ldr	r5, [pc, #488]	; (801d5d0 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801d3e8:	4f7a      	ldr	r7, [pc, #488]	; (801d5d4 <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801d3ea:	f7f1 fa15 	bl	800e818 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801d3ee:	487a      	ldr	r0, [pc, #488]	; (801d5d8 <Calculate_Data+0x1fc>)
 801d3f0:	f7f1 faae 	bl	800e950 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801d3f4:	4b79      	ldr	r3, [pc, #484]	; (801d5dc <Calculate_Data+0x200>)
 801d3f6:	4a7a      	ldr	r2, [pc, #488]	; (801d5e0 <Calculate_Data+0x204>)
 801d3f8:	497a      	ldr	r1, [pc, #488]	; (801d5e4 <Calculate_Data+0x208>)
 801d3fa:	4874      	ldr	r0, [pc, #464]	; (801d5cc <Calculate_Data+0x1f0>)
 801d3fc:	f7f1 fa5a 	bl	800e8b4 <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801d400:	4879      	ldr	r0, [pc, #484]	; (801d5e8 <Calculate_Data+0x20c>)
 801d402:	f7f1 fac3 	bl	800e98c <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801d406:	7829      	ldrb	r1, [r5, #0]
 801d408:	4870      	ldr	r0, [pc, #448]	; (801d5cc <Calculate_Data+0x1f0>)
 801d40a:	f7f1 fb25 	bl	800ea58 <Calculate_Tc>
 801d40e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801d412:	4b76      	ldr	r3, [pc, #472]	; (801d5ec <Calculate_Data+0x210>)
 801d414:	ee17 2a90 	vmov	r2, s15
 801d418:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801d41a:	783a      	ldrb	r2, [r7, #0]
 801d41c:	2a05      	cmp	r2, #5
 801d41e:	d114      	bne.n	801d44a <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801d420:	4b73      	ldr	r3, [pc, #460]	; (801d5f0 <Calculate_Data+0x214>)
 801d422:	781b      	ldrb	r3, [r3, #0]
 801d424:	075a      	lsls	r2, r3, #29
 801d426:	f140 80ba 	bpl.w	801d59e <Calculate_Data+0x1c2>
 801d42a:	7828      	ldrb	r0, [r5, #0]
 801d42c:	4e71      	ldr	r6, [pc, #452]	; (801d5f4 <Calculate_Data+0x218>)
 801d42e:	4c72      	ldr	r4, [pc, #456]	; (801d5f8 <Calculate_Data+0x21c>)
 801d430:	2800      	cmp	r0, #0
 801d432:	bf0c      	ite	eq
 801d434:	4630      	moveq	r0, r6
 801d436:	4620      	movne	r0, r4
 801d438:	f7f1 faea 	bl	800ea10 <Calculate_uv1976>
 801d43c:	7828      	ldrb	r0, [r5, #0]
 801d43e:	2800      	cmp	r0, #0
 801d440:	bf0c      	ite	eq
 801d442:	4630      	moveq	r0, r6
 801d444:	4620      	movne	r0, r4
 801d446:	f7f1 fabf 	bl	800e9c8 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801d44a:	783b      	ldrb	r3, [r7, #0]
 801d44c:	3b01      	subs	r3, #1
 801d44e:	2b02      	cmp	r3, #2
 801d450:	f200 80a4 	bhi.w	801d59c <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801d454:	4c69      	ldr	r4, [pc, #420]	; (801d5fc <Calculate_Data+0x220>)
 801d456:	8823      	ldrh	r3, [r4, #0]
 801d458:	07de      	lsls	r6, r3, #31
 801d45a:	d506      	bpl.n	801d46a <Calculate_Data+0x8e>
 801d45c:	4960      	ldr	r1, [pc, #384]	; (801d5e0 <Calculate_Data+0x204>)
 801d45e:	485b      	ldr	r0, [pc, #364]	; (801d5cc <Calculate_Data+0x1f0>)
 801d460:	f7f1 f87c 	bl	800e55c <Calculate_EL_Day>
 801d464:	4b66      	ldr	r3, [pc, #408]	; (801d600 <Calculate_Data+0x224>)
 801d466:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801d46a:	8823      	ldrh	r3, [r4, #0]
 801d46c:	0798      	lsls	r0, r3, #30
 801d46e:	d505      	bpl.n	801d47c <Calculate_Data+0xa0>
 801d470:	4856      	ldr	r0, [pc, #344]	; (801d5cc <Calculate_Data+0x1f0>)
 801d472:	f7f1 f893 	bl	800e59c <Calculate_EL_Day_Wt>
 801d476:	4b63      	ldr	r3, [pc, #396]	; (801d604 <Calculate_Data+0x228>)
 801d478:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801d47c:	8823      	ldrh	r3, [r4, #0]
 801d47e:	0499      	lsls	r1, r3, #18
 801d480:	d519      	bpl.n	801d4b6 <Calculate_Data+0xda>
 801d482:	4961      	ldr	r1, [pc, #388]	; (801d608 <Calculate_Data+0x22c>)
 801d484:	4851      	ldr	r0, [pc, #324]	; (801d5cc <Calculate_Data+0x1f0>)
 801d486:	4e61      	ldr	r6, [pc, #388]	; (801d60c <Calculate_Data+0x230>)
 801d488:	4f5d      	ldr	r7, [pc, #372]	; (801d600 <Calculate_Data+0x224>)
 801d48a:	f7f1 f89f 	bl	800e5cc <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d48e:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801d490:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d494:	f012 0f01 	tst.w	r2, #1
 801d498:	f040 808f 	bne.w	801d5ba <Calculate_Data+0x1de>
 801d49c:	4950      	ldr	r1, [pc, #320]	; (801d5e0 <Calculate_Data+0x204>)
 801d49e:	484b      	ldr	r0, [pc, #300]	; (801d5cc <Calculate_Data+0x1f0>)
 801d4a0:	f7f1 f85c 	bl	800e55c <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801d4a4:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d4a8:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801d4ac:	f7f1 f8ae 	bl	800e60c <Calculate_SP>
 801d4b0:	4b57      	ldr	r3, [pc, #348]	; (801d610 <Calculate_Data+0x234>)
 801d4b2:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801d4b6:	8823      	ldrh	r3, [r4, #0]
 801d4b8:	075a      	lsls	r2, r3, #29
 801d4ba:	d506      	bpl.n	801d4ca <Calculate_Data+0xee>
 801d4bc:	4955      	ldr	r1, [pc, #340]	; (801d614 <Calculate_Data+0x238>)
 801d4be:	4843      	ldr	r0, [pc, #268]	; (801d5cc <Calculate_Data+0x1f0>)
 801d4c0:	f7f1 f8b2 	bl	800e628 <Calculate_PPFD_PPL>
 801d4c4:	4b54      	ldr	r3, [pc, #336]	; (801d618 <Calculate_Data+0x23c>)
 801d4c6:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801d4ca:	8823      	ldrh	r3, [r4, #0]
 801d4cc:	071b      	lsls	r3, r3, #28
 801d4ce:	d51f      	bpl.n	801d510 <Calculate_Data+0x134>
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	4950      	ldr	r1, [pc, #320]	; (801d614 <Calculate_Data+0x238>)
 801d4d4:	483d      	ldr	r0, [pc, #244]	; (801d5cc <Calculate_Data+0x1f0>)
 801d4d6:	f7f1 f913 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801d4da:	4b50      	ldr	r3, [pc, #320]	; (801d61c <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801d4dc:	494d      	ldr	r1, [pc, #308]	; (801d614 <Calculate_Data+0x238>)
 801d4de:	483b      	ldr	r0, [pc, #236]	; (801d5cc <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801d4e0:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801d4e4:	2201      	movs	r2, #1
 801d4e6:	f7f1 f90b 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801d4ea:	4b4d      	ldr	r3, [pc, #308]	; (801d620 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801d4ec:	4949      	ldr	r1, [pc, #292]	; (801d614 <Calculate_Data+0x238>)
 801d4ee:	4837      	ldr	r0, [pc, #220]	; (801d5cc <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801d4f0:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801d4f4:	2202      	movs	r2, #2
 801d4f6:	f7f1 f903 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801d4fa:	4b4a      	ldr	r3, [pc, #296]	; (801d624 <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801d4fc:	4945      	ldr	r1, [pc, #276]	; (801d614 <Calculate_Data+0x238>)
 801d4fe:	4833      	ldr	r0, [pc, #204]	; (801d5cc <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801d500:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801d504:	2203      	movs	r2, #3
 801d506:	f7f1 f8fb 	bl	800e700 <Calculate_PPFD_PPL_Range>
 801d50a:	4b47      	ldr	r3, [pc, #284]	; (801d628 <Calculate_Data+0x24c>)
 801d50c:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801d510:	8823      	ldrh	r3, [r4, #0]
 801d512:	051f      	lsls	r7, r3, #20
 801d514:	d503      	bpl.n	801d51e <Calculate_Data+0x142>
 801d516:	f7f1 fe7b 	bl	800f210 <Calculate_deltaEab>
 801d51a:	4b44      	ldr	r3, [pc, #272]	; (801d62c <Calculate_Data+0x250>)
 801d51c:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801d51e:	8823      	ldrh	r3, [r4, #0]
 801d520:	065e      	lsls	r6, r3, #25
 801d522:	d50f      	bpl.n	801d544 <Calculate_Data+0x168>
 801d524:	7828      	ldrb	r0, [r5, #0]
 801d526:	4f33      	ldr	r7, [pc, #204]	; (801d5f4 <Calculate_Data+0x218>)
 801d528:	4e33      	ldr	r6, [pc, #204]	; (801d5f8 <Calculate_Data+0x21c>)
 801d52a:	2800      	cmp	r0, #0
 801d52c:	bf0c      	ite	eq
 801d52e:	4638      	moveq	r0, r7
 801d530:	4630      	movne	r0, r6
 801d532:	f7f1 fa6d 	bl	800ea10 <Calculate_uv1976>
 801d536:	7828      	ldrb	r0, [r5, #0]
 801d538:	2800      	cmp	r0, #0
 801d53a:	bf0c      	ite	eq
 801d53c:	4638      	moveq	r0, r7
 801d53e:	4630      	movne	r0, r6
 801d540:	f7f1 fa42 	bl	800e9c8 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801d544:	8823      	ldrh	r3, [r4, #0]
 801d546:	0618      	lsls	r0, r3, #24
 801d548:	d509      	bpl.n	801d55e <Calculate_Data+0x182>
 801d54a:	4b39      	ldr	r3, [pc, #228]	; (801d630 <Calculate_Data+0x254>)
 801d54c:	7829      	ldrb	r1, [r5, #0]
 801d54e:	781a      	ldrb	r2, [r3, #0]
 801d550:	4821      	ldr	r0, [pc, #132]	; (801d5d8 <Calculate_Data+0x1fc>)
 801d552:	4b25      	ldr	r3, [pc, #148]	; (801d5e8 <Calculate_Data+0x20c>)
 801d554:	2900      	cmp	r1, #0
 801d556:	bf18      	it	ne
 801d558:	4618      	movne	r0, r3
 801d55a:	f7f1 fc19 	bl	800ed90 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801d55e:	8823      	ldrh	r3, [r4, #0]
 801d560:	0599      	lsls	r1, r3, #22
 801d562:	d503      	bpl.n	801d56c <Calculate_Data+0x190>
 801d564:	7829      	ldrb	r1, [r5, #0]
 801d566:	4819      	ldr	r0, [pc, #100]	; (801d5cc <Calculate_Data+0x1f0>)
 801d568:	f7f1 fd48 	bl	800effc <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801d56c:	8823      	ldrh	r3, [r4, #0]
 801d56e:	055a      	lsls	r2, r3, #21
 801d570:	d503      	bpl.n	801d57a <Calculate_Data+0x19e>
 801d572:	7829      	ldrb	r1, [r5, #0]
 801d574:	4815      	ldr	r0, [pc, #84]	; (801d5cc <Calculate_Data+0x1f0>)
 801d576:	f7f1 fd41 	bl	800effc <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801d57a:	8823      	ldrh	r3, [r4, #0]
 801d57c:	04db      	lsls	r3, r3, #19
 801d57e:	d50d      	bpl.n	801d59c <Calculate_Data+0x1c0>
 801d580:	492c      	ldr	r1, [pc, #176]	; (801d634 <Calculate_Data+0x258>)
 801d582:	4812      	ldr	r0, [pc, #72]	; (801d5cc <Calculate_Data+0x1f0>)
 801d584:	f7f1 f946 	bl	800e814 <Calculate_ELr>
 801d588:	4b2b      	ldr	r3, [pc, #172]	; (801d638 <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801d58a:	492c      	ldr	r1, [pc, #176]	; (801d63c <Calculate_Data+0x260>)
 801d58c:	480f      	ldr	r0, [pc, #60]	; (801d5cc <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801d58e:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801d592:	f7f1 f925 	bl	800e7e0 <Calculate_ELb>
 801d596:	4b2a      	ldr	r3, [pc, #168]	; (801d640 <Calculate_Data+0x264>)
 801d598:	ed83 0a00 	vstr	s0, [r3]
 801d59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801d59e:	079b      	lsls	r3, r3, #30
 801d5a0:	f57f af53 	bpl.w	801d44a <Calculate_Data+0x6e>
 801d5a4:	4b22      	ldr	r3, [pc, #136]	; (801d630 <Calculate_Data+0x254>)
 801d5a6:	7829      	ldrb	r1, [r5, #0]
 801d5a8:	781a      	ldrb	r2, [r3, #0]
 801d5aa:	480b      	ldr	r0, [pc, #44]	; (801d5d8 <Calculate_Data+0x1fc>)
 801d5ac:	4b0e      	ldr	r3, [pc, #56]	; (801d5e8 <Calculate_Data+0x20c>)
 801d5ae:	2900      	cmp	r1, #0
 801d5b0:	bf18      	it	ne
 801d5b2:	4618      	movne	r0, r3
 801d5b4:	f7f1 fbec 	bl	800ed90 <Calculate_Lab>
 801d5b8:	e747      	b.n	801d44a <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d5ba:	ed97 0a00 	vldr	s0, [r7]
 801d5be:	e771      	b.n	801d4a4 <Calculate_Data+0xc8>
 801d5c0:	2008c514 	.word	0x2008c514
 801d5c4:	2008e514 	.word	0x2008e514
 801d5c8:	2008b514 	.word	0x2008b514
 801d5cc:	2000c53c 	.word	0x2000c53c
 801d5d0:	20005704 	.word	0x20005704
 801d5d4:	20005701 	.word	0x20005701
 801d5d8:	2008f528 	.word	0x2008f528
 801d5dc:	2008d514 	.word	0x2008d514
 801d5e0:	20052940 	.word	0x20052940
 801d5e4:	2008a514 	.word	0x2008a514
 801d5e8:	2008f522 	.word	0x2008f522
 801d5ec:	20054940 	.word	0x20054940
 801d5f0:	200056ff 	.word	0x200056ff
 801d5f4:	2008f548 	.word	0x2008f548
 801d5f8:	2008f540 	.word	0x2008f540
 801d5fc:	20005706 	.word	0x20005706
 801d600:	20095d30 	.word	0x20095d30
 801d604:	20095720 	.word	0x20095720
 801d608:	20053940 	.word	0x20053940
 801d60c:	20095714 	.word	0x20095714
 801d610:	20095808 	.word	0x20095808
 801d614:	20054948 	.word	0x20054948
 801d618:	20095728 	.word	0x20095728
 801d61c:	2009580c 	.word	0x2009580c
 801d620:	20095b90 	.word	0x20095b90
 801d624:	20095aa4 	.word	0x20095aa4
 801d628:	20095724 	.word	0x20095724
 801d62c:	20090abe 	.word	0x20090abe
 801d630:	20090ac1 	.word	0x20090ac1
 801d634:	2000ad38 	.word	0x2000ad38
 801d638:	20095ca4 	.word	0x20095ca4
 801d63c:	20009d38 	.word	0x20009d38
 801d640:	20095ca0 	.word	0x20095ca0

0801d644 <Get_Battery_Level>:
{
 801d644:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc1);
 801d646:	4818      	ldr	r0, [pc, #96]	; (801d6a8 <Get_Battery_Level+0x64>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801d648:	4c18      	ldr	r4, [pc, #96]	; (801d6ac <Get_Battery_Level+0x68>)
	HAL_ADC_Start(&hadc1);
 801d64a:	f7e4 f8f9 	bl	8001840 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801d64e:	2102      	movs	r1, #2
 801d650:	4815      	ldr	r0, [pc, #84]	; (801d6a8 <Get_Battery_Level+0x64>)
 801d652:	f7e3 fdef 	bl	8001234 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801d656:	4814      	ldr	r0, [pc, #80]	; (801d6a8 <Get_Battery_Level+0x64>)
 801d658:	f7e3 fe3a 	bl	80012d0 <HAL_ADC_GetValue>
 801d65c:	8020      	strh	r0, [r4, #0]
	HAL_ADC_Stop(&hadc1);
 801d65e:	4812      	ldr	r0, [pc, #72]	; (801d6a8 <Get_Battery_Level+0x64>)
 801d660:	f7e4 f96d 	bl	800193e <HAL_ADC_Stop>
	if (adcResult > 3455) adcResult = 3455;
 801d664:	8823      	ldrh	r3, [r4, #0]
 801d666:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 801d66a:	bf24      	itt	cs
 801d66c:	f640 527f 	movwcs	r2, #3455	; 0xd7f
 801d670:	8022      	strhcs	r2, [r4, #0]
	if (adcResult < 2750) adcResult = 2750;
 801d672:	8821      	ldrh	r1, [r4, #0]
 801d674:	f640 22bd 	movw	r2, #2749	; 0xabd
 801d678:	4291      	cmp	r1, r2
 801d67a:	bf9c      	itt	ls
 801d67c:	f640 22be 	movwls	r2, #2750	; 0xabe
 801d680:	8022      	strhls	r2, [r4, #0]
	return percentage_charge = (adcResult - 2750)*100.0 / 705;
 801d682:	8820      	ldrh	r0, [r4, #0]
 801d684:	f6a0 20be 	subw	r0, r0, #2750	; 0xabe
 801d688:	f7e2 ff64 	bl	8000554 <__aeabi_i2d>
 801d68c:	2200      	movs	r2, #0
 801d68e:	4b08      	ldr	r3, [pc, #32]	; (801d6b0 <Get_Battery_Level+0x6c>)
 801d690:	f7e2 ffc6 	bl	8000620 <__aeabi_dmul>
 801d694:	2200      	movs	r2, #0
 801d696:	4b07      	ldr	r3, [pc, #28]	; (801d6b4 <Get_Battery_Level+0x70>)
 801d698:	f7e3 f8ec 	bl	8000874 <__aeabi_ddiv>
 801d69c:	4b06      	ldr	r3, [pc, #24]	; (801d6b8 <Get_Battery_Level+0x74>)
}
 801d69e:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = (adcResult - 2750)*100.0 / 705;
 801d6a2:	e9c3 0100 	strd	r0, r1, [r3]
}
 801d6a6:	bd10      	pop	{r4, pc}
 801d6a8:	20095a38 	.word	0x20095a38
 801d6ac:	20055950 	.word	0x20055950
 801d6b0:	40590000 	.word	0x40590000
 801d6b4:	40860800 	.word	0x40860800
 801d6b8:	200905c8 	.word	0x200905c8

0801d6bc <packet_generator_data_send>:
{
 801d6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d6c0:	4c25      	ldr	r4, [pc, #148]	; (801d758 <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d6c2:	4f26      	ldr	r7, [pc, #152]	; (801d75c <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d6c4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801d764 <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d6c8:	2100      	movs	r1, #0
 801d6ca:	2240      	movs	r2, #64	; 0x40
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	f003 f918 	bl	8020902 <memset>
			dataToSend[0] = 0xAB;
 801d6d2:	23ab      	movs	r3, #171	; 0xab
 801d6d4:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d6d6:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801d6d8:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801d6da:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801d6dc:	2301      	movs	r3, #1
 801d6de:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801d6e0:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801d6e2:	4629      	mov	r1, r5
			q = 5;
 801d6e4:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d6e6:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d6e8:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801d6ec:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d6f0:	0a10      	lsrs	r0, r2, #8
 801d6f2:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801d6f4:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801d6f6:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801d6fa:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801d6fc:	fa50 f282 	uxtab	r2, r0, r2
 801d700:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801d702:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801d704:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801d706:	d803      	bhi.n	801d710 <packet_generator_data_send+0x54>
 801d708:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d70c:	4295      	cmp	r5, r2
 801d70e:	d118      	bne.n	801d742 <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d710:	7860      	ldrb	r0, [r4, #1]
 801d712:	7822      	ldrb	r2, [r4, #0]
 801d714:	4402      	add	r2, r0
 801d716:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d718:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d71a:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d71c:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801d71e:	b2f3      	uxtb	r3, r6
 801d720:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d722:	4413      	add	r3, r2
 801d724:	185a      	adds	r2, r3, r1
 801d726:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d72a:	4641      	mov	r1, r8
 801d72c:	2240      	movs	r2, #64	; 0x40
 801d72e:	4648      	mov	r0, r9
 801d730:	f7ea fece 	bl	80084d0 <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801d734:	3601      	adds	r6, #1
					HAL_Delay(3);
 801d736:	2003      	movs	r0, #3
 801d738:	f7e3 fc78 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801d73c:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801d73e:	2100      	movs	r1, #0
					q = 5;
 801d740:	2305      	movs	r3, #5
 801d742:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d744:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801d748:	d1ce      	bne.n	801d6e8 <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d74a:	4b05      	ldr	r3, [pc, #20]	; (801d760 <packet_generator_data_send+0xa4>)
 801d74c:	2200      	movs	r2, #0
 801d74e:	601a      	str	r2, [r3, #0]
 801d750:	605a      	str	r2, [r3, #4]
 801d752:	609a      	str	r2, [r3, #8]
 801d754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d758:	2008f55c 	.word	0x2008f55c
 801d75c:	2000e53c 	.word	0x2000e53c
 801d760:	2008f550 	.word	0x2008f550
 801d764:	20095d7c 	.word	0x20095d7c

0801d768 <packet_generator_Rabs_data_send>:
{
 801d768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d76c:	4c3b      	ldr	r4, [pc, #236]	; (801d85c <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d76e:	4d3c      	ldr	r5, [pc, #240]	; (801d860 <packet_generator_Rabs_data_send+0xf8>)
 801d770:	4f3c      	ldr	r7, [pc, #240]	; (801d864 <packet_generator_Rabs_data_send+0xfc>)
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d772:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801d888 <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d776:	2240      	movs	r2, #64	; 0x40
 801d778:	2100      	movs	r1, #0
 801d77a:	4620      	mov	r0, r4
 801d77c:	f003 f8c1 	bl	8020902 <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d780:	4b39      	ldr	r3, [pc, #228]	; (801d868 <packet_generator_Rabs_data_send+0x100>)
 801d782:	8828      	ldrh	r0, [r5, #0]
 801d784:	4939      	ldr	r1, [pc, #228]	; (801d86c <packet_generator_Rabs_data_send+0x104>)
 801d786:	ed93 0a00 	vldr	s0, [r3]
 801d78a:	f7fc fd4d 	bl	801a228 <Rabs_calc_Factor1>
 801d78e:	4b38      	ldr	r3, [pc, #224]	; (801d870 <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801d790:	4938      	ldr	r1, [pc, #224]	; (801d874 <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d792:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801d796:	edd1 0a00 	vldr	s1, [r1]
 801d79a:	4b37      	ldr	r3, [pc, #220]	; (801d878 <packet_generator_Rabs_data_send+0x110>)
 801d79c:	8829      	ldrh	r1, [r5, #0]
 801d79e:	4833      	ldr	r0, [pc, #204]	; (801d86c <packet_generator_Rabs_data_send+0x104>)
 801d7a0:	4a36      	ldr	r2, [pc, #216]	; (801d87c <packet_generator_Rabs_data_send+0x114>)
 801d7a2:	f7fc fd75 	bl	801a290 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801d7a6:	23ab      	movs	r3, #171	; 0xab
 801d7a8:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d7aa:	2312      	movs	r3, #18
 801d7ac:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801d7ae:	2303      	movs	r3, #3
 801d7b0:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d7b2:	4b33      	ldr	r3, [pc, #204]	; (801d880 <packet_generator_Rabs_data_send+0x118>)
 801d7b4:	781b      	ldrb	r3, [r3, #0]
 801d7b6:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801d7b8:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d7bc:	bf18      	it	ne
 801d7be:	2301      	movne	r3, #1
 801d7c0:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801d7c2:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801d7c4:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801d7c6:	4628      	mov	r0, r5
			q = 7;
 801d7c8:	2307      	movs	r3, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d7ca:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801d7cc:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d7d0:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d7d4:	0e11      	lsrs	r1, r2, #24
 801d7d6:	54e1      	strb	r1, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d7d8:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d7dc:	0c11      	lsrs	r1, r2, #16
 801d7de:	f804 100c 	strb.w	r1, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d7e2:	0a11      	lsrs	r1, r2, #8
 801d7e4:	f804 100e 	strb.w	r1, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d7e8:	18e1      	adds	r1, r4, r3
 801d7ea:	b2d2      	uxtb	r2, r2
 801d7ec:	70ca      	strb	r2, [r1, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d7ee:	5ce1      	ldrb	r1, [r4, r3]
 801d7f0:	4401      	add	r1, r0
 801d7f2:	f814 000c 	ldrb.w	r0, [r4, ip]
 801d7f6:	4401      	add	r1, r0
 801d7f8:	f814 000e 	ldrb.w	r0, [r4, lr]
				q = q + 4;
 801d7fc:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d7fe:	4408      	add	r0, r1
				q = q + 4;
 801d800:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d802:	fa12 f080 	uxtah	r0, r2, r0
				if(q >= 62 || cnt == 1023){
 801d806:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d808:	b280      	uxth	r0, r0
				if(q >= 62 || cnt == 1023){
 801d80a:	d803      	bhi.n	801d814 <packet_generator_Rabs_data_send+0xac>
 801d80c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d810:	4295      	cmp	r5, r2
 801d812:	d116      	bne.n	801d842 <packet_generator_Rabs_data_send+0xda>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d814:	7861      	ldrb	r1, [r4, #1]
 801d816:	7822      	ldrb	r2, [r4, #0]
 801d818:	440a      	add	r2, r1
 801d81a:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d81c:	0a33      	lsrs	r3, r6, #8
 801d81e:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d820:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801d822:	b2f3      	uxtb	r3, r6
 801d824:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d826:	4413      	add	r3, r2
 801d828:	4418      	add	r0, r3
					packet_number = packet_number + 1;
 801d82a:	3601      	adds	r6, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d82c:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801d830:	b2b6      	uxth	r6, r6
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d832:	2240      	movs	r2, #64	; 0x40
 801d834:	4641      	mov	r1, r8
 801d836:	4648      	mov	r0, r9
 801d838:	f7ea fe4a 	bl	80084d0 <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d1f8      	bne.n	801d832 <packet_generator_Rabs_data_send+0xca>
					q = 7;
 801d840:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d842:	3501      	adds	r5, #1
 801d844:	b2ad      	uxth	r5, r5
 801d846:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801d84a:	d1bf      	bne.n	801d7cc <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d84c:	4b0d      	ldr	r3, [pc, #52]	; (801d884 <packet_generator_Rabs_data_send+0x11c>)
 801d84e:	2200      	movs	r2, #0
 801d850:	601a      	str	r2, [r3, #0]
 801d852:	605a      	str	r2, [r3, #4]
 801d854:	609a      	str	r2, [r3, #8]
 801d856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d85a:	bf00      	nop
 801d85c:	2008f55c 	.word	0x2008f55c
 801d860:	20009d22 	.word	0x20009d22
 801d864:	2000d53c 	.word	0x2000d53c
 801d868:	2005193c 	.word	0x2005193c
 801d86c:	2000e53c 	.word	0x2000e53c
 801d870:	20009d30 	.word	0x20009d30
 801d874:	20009d34 	.word	0x20009d34
 801d878:	2000c53c 	.word	0x2000c53c
 801d87c:	20051940 	.word	0x20051940
 801d880:	20000ebc 	.word	0x20000ebc
 801d884:	2008f550 	.word	0x2008f550
 801d888:	20095d7c 	.word	0x20095d7c

0801d88c <packet_generator_Calculated_data_send>:
{
 801d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d890:	4c8a      	ldr	r4, [pc, #552]	; (801dabc <packet_generator_Calculated_data_send+0x230>)
 801d892:	f8df 9250 	ldr.w	r9, [pc, #592]	; 801dae4 <packet_generator_Calculated_data_send+0x258>
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d896:	f8df b244 	ldr.w	fp, [pc, #580]	; 801dadc <packet_generator_Calculated_data_send+0x250>
{
 801d89a:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801d89c:	2240      	movs	r2, #64	; 0x40
 801d89e:	2100      	movs	r1, #0
 801d8a0:	4620      	mov	r0, r4
 801d8a2:	f003 f82e 	bl	8020902 <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801d8a6:	f7f1 fcb3 	bl	800f210 <Calculate_deltaEab>
 801d8aa:	4b85      	ldr	r3, [pc, #532]	; (801dac0 <packet_generator_Calculated_data_send+0x234>)
 801d8ac:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801d8ae:	23ab      	movs	r3, #171	; 0xab
 801d8b0:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d8b2:	2312      	movs	r3, #18
 801d8b4:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801d8b6:	2304      	movs	r3, #4
 801d8b8:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d8ba:	4b82      	ldr	r3, [pc, #520]	; (801dac4 <packet_generator_Calculated_data_send+0x238>)
 801d8bc:	781b      	ldrb	r3, [r3, #0]
 801d8be:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801d8c0:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d8c4:	bf18      	it	ne
 801d8c6:	2301      	movne	r3, #1
 801d8c8:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801d8ca:	f884 8006 	strb.w	r8, [r4, #6]
			uint16_t CRC_pack = 0, packet_number = 0;
 801d8ce:	4645      	mov	r5, r8
 801d8d0:	4647      	mov	r7, r8
			q = 7;
 801d8d2:	2607      	movs	r6, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d8d4:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801d8d6:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801d8da:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d8dc:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d8de:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d8e0:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d8e2:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d8e4:	0c1a      	lsrs	r2, r3, #16
 801d8e6:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d8e8:	0a1a      	lsrs	r2, r3, #8
 801d8ea:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d8ec:	19a2      	adds	r2, r4, r6
 801d8ee:	b2db      	uxtb	r3, r3
 801d8f0:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d8f2:	5da2      	ldrb	r2, [r4, r6]
 801d8f4:	443a      	add	r2, r7
 801d8f6:	5c27      	ldrb	r7, [r4, r0]
 801d8f8:	443a      	add	r2, r7
 801d8fa:	5c67      	ldrb	r7, [r4, r1]
				q = q + 4;
 801d8fc:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d8fe:	4417      	add	r7, r2
				q = q + 4;
 801d900:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d902:	fa13 f787 	uxtah	r7, r3, r7
				if(q >= 62 || cnt == 1023){
 801d906:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d908:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801d90a:	d803      	bhi.n	801d914 <packet_generator_Calculated_data_send+0x88>
 801d90c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801d910:	4598      	cmp	r8, r3
 801d912:	d11a      	bne.n	801d94a <packet_generator_Calculated_data_send+0xbe>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d914:	7861      	ldrb	r1, [r4, #1]
 801d916:	7822      	ldrb	r2, [r4, #0]
 801d918:	440a      	add	r2, r1
 801d91a:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d91c:	0a2b      	lsrs	r3, r5, #8
 801d91e:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d920:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801d922:	b2eb      	uxtb	r3, r5
 801d924:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d926:	4413      	add	r3, r2
 801d928:	441f      	add	r7, r3
					packet_number = packet_number + 1;
 801d92a:	3501      	adds	r5, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d92c:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801d930:	b2ad      	uxth	r5, r5
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d932:	2240      	movs	r2, #64	; 0x40
 801d934:	4651      	mov	r1, sl
 801d936:	4658      	mov	r0, fp
 801d938:	f7ea fdca 	bl	80084d0 <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801d93c:	4607      	mov	r7, r0
 801d93e:	2800      	cmp	r0, #0
 801d940:	d1f7      	bne.n	801d932 <packet_generator_Calculated_data_send+0xa6>
					HAL_Delay(3);
 801d942:	2003      	movs	r0, #3
 801d944:	f7e3 fb72 	bl	800102c <HAL_Delay>
					q = 7;
 801d948:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d94a:	f108 0801 	add.w	r8, r8, #1
 801d94e:	fa1f f888 	uxth.w	r8, r8
 801d952:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801d956:	d1be      	bne.n	801d8d6 <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d958:	2240      	movs	r2, #64	; 0x40
 801d95a:	2100      	movs	r1, #0
 801d95c:	4857      	ldr	r0, [pc, #348]	; (801dabc <packet_generator_Calculated_data_send+0x230>)
 801d95e:	f002 ffd0 	bl	8020902 <memset>
			dataToSend[0] = 0xAB;
 801d962:	23ab      	movs	r3, #171	; 0xab
 801d964:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d966:	2312      	movs	r3, #18
 801d968:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801d96a:	2304      	movs	r3, #4
 801d96c:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d96e:	4b55      	ldr	r3, [pc, #340]	; (801dac4 <packet_generator_Calculated_data_send+0x238>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801d970:	4a55      	ldr	r2, [pc, #340]	; (801dac8 <packet_generator_Calculated_data_send+0x23c>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d972:	781b      	ldrb	r3, [r3, #0]
 801d974:	3300      	adds	r3, #0
 801d976:	bf18      	it	ne
 801d978:	2301      	movne	r3, #1
 801d97a:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801d97c:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d97e:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d982:	0e19      	lsrs	r1, r3, #24
 801d984:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d986:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d98a:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d98c:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d990:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d994:	0a19      	lsrs	r1, r3, #8
 801d996:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d99a:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801d99e:	6853      	ldr	r3, [r2, #4]
 801d9a0:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801d9a2:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801d9a6:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801d9aa:	0e1a      	lsrs	r2, r3, #24
 801d9ac:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801d9b0:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801d9b2:	0c1a      	lsrs	r2, r3, #16
 801d9b4:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801d9b8:	0a1a      	lsrs	r2, r3, #8
 801d9ba:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801d9bc:	1df2      	adds	r2, r6, #7
 801d9be:	9203      	str	r2, [sp, #12]
 801d9c0:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801d9c2:	4b42      	ldr	r3, [pc, #264]	; (801dacc <packet_generator_Calculated_data_send+0x240>)
 801d9c4:	881b      	ldrh	r3, [r3, #0]
 801d9c6:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801d9ca:	f106 0308 	add.w	r3, r6, #8
 801d9ce:	9300      	str	r3, [sp, #0]
 801d9d0:	9b05      	ldr	r3, [sp, #20]
 801d9d2:	9900      	ldr	r1, [sp, #0]
 801d9d4:	0a1a      	lsrs	r2, r3, #8
 801d9d6:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801d9d8:	f106 0209 	add.w	r2, r6, #9
 801d9dc:	9201      	str	r2, [sp, #4]
 801d9de:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801d9e0:	f106 030a 	add.w	r3, r6, #10
 801d9e4:	9302      	str	r3, [sp, #8]
 801d9e6:	4b3a      	ldr	r3, [pc, #232]	; (801dad0 <packet_generator_Calculated_data_send+0x244>)
 801d9e8:	9a02      	ldr	r2, [sp, #8]
 801d9ea:	781b      	ldrb	r3, [r3, #0]
 801d9ec:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801d9ee:	4b39      	ldr	r3, [pc, #228]	; (801dad4 <packet_generator_Calculated_data_send+0x248>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801d9f0:	4932      	ldr	r1, [pc, #200]	; (801dabc <packet_generator_Calculated_data_send+0x230>)
			if(Calculate_deltaEab_Done == 0x01)
 801d9f2:	781b      	ldrb	r3, [r3, #0]
 801d9f4:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801d9f6:	bf01      	itttt	eq
 801d9f8:	4b31      	ldreq	r3, [pc, #196]	; (801dac0 <packet_generator_Calculated_data_send+0x234>)
 801d9fa:	881b      	ldrheq	r3, [r3, #0]
 801d9fc:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801da00:	9b05      	ldreq	r3, [sp, #20]
 801da02:	4434      	add	r4, r6
 801da04:	bf0b      	itete	eq
 801da06:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801da08:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801da0a:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801da0c:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801da0e:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801da10:	4c31      	ldr	r4, [pc, #196]	; (801dad8 <packet_generator_Calculated_data_send+0x24c>)
 801da12:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801da14:	198b      	adds	r3, r1, r6
 801da16:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801da1a:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801da1e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801da22:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801da26:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801da28:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801da2c:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801da2e:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801da32:	0e14      	lsrs	r4, r2, #24
 801da34:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801da36:	0c14      	lsrs	r4, r2, #16
 801da38:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801da3a:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801da3c:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801da3e:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801da40:	0a2a      	lsrs	r2, r5, #8
 801da42:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801da44:	780c      	ldrb	r4, [r1, #0]
 801da46:	784a      	ldrb	r2, [r1, #1]
 801da48:	4422      	add	r2, r4
 801da4a:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801da4c:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801da4e:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801da50:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801da52:	4415      	add	r5, r2
 801da54:	19ea      	adds	r2, r5, r7
 801da56:	5d8d      	ldrb	r5, [r1, r6]
 801da58:	f811 4008 	ldrb.w	r4, [r1, r8]
 801da5c:	5c08      	ldrb	r0, [r1, r0]
 801da5e:	442a      	add	r2, r5
 801da60:	f811 500a 	ldrb.w	r5, [r1, sl]
 801da64:	442a      	add	r2, r5
 801da66:	f811 5009 	ldrb.w	r5, [r1, r9]
 801da6a:	442a      	add	r2, r5
 801da6c:	4422      	add	r2, r4
 801da6e:	f811 400c 	ldrb.w	r4, [r1, ip]
 801da72:	4422      	add	r2, r4
 801da74:	f811 400e 	ldrb.w	r4, [r1, lr]
 801da78:	4422      	add	r2, r4
 801da7a:	4402      	add	r2, r0
 801da7c:	9803      	ldr	r0, [sp, #12]
 801da7e:	5c08      	ldrb	r0, [r1, r0]
 801da80:	4402      	add	r2, r0
 801da82:	9800      	ldr	r0, [sp, #0]
 801da84:	5c08      	ldrb	r0, [r1, r0]
 801da86:	4402      	add	r2, r0
 801da88:	9801      	ldr	r0, [sp, #4]
 801da8a:	5c08      	ldrb	r0, [r1, r0]
 801da8c:	4402      	add	r2, r0
 801da8e:	9802      	ldr	r0, [sp, #8]
 801da90:	7adb      	ldrb	r3, [r3, #11]
 801da92:	5c08      	ldrb	r0, [r1, r0]
 801da94:	4402      	add	r2, r0
 801da96:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801da98:	4810      	ldr	r0, [pc, #64]	; (801dadc <packet_generator_Calculated_data_send+0x250>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801da9a:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801da9e:	2240      	movs	r2, #64	; 0x40
 801daa0:	f7ea fd16 	bl	80084d0 <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(3);
 801daa4:	2003      	movs	r0, #3
 801daa6:	f7e3 fac1 	bl	800102c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801daaa:	4b0d      	ldr	r3, [pc, #52]	; (801dae0 <packet_generator_Calculated_data_send+0x254>)
 801daac:	2200      	movs	r2, #0
 801daae:	601a      	str	r2, [r3, #0]
 801dab0:	605a      	str	r2, [r3, #4]
 801dab2:	609a      	str	r2, [r3, #8]
}
 801dab4:	b007      	add	sp, #28
 801dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daba:	bf00      	nop
 801dabc:	2008f55c 	.word	0x2008f55c
 801dac0:	20090abe 	.word	0x20090abe
 801dac4:	20000ebc 	.word	0x20000ebc
 801dac8:	2008f548 	.word	0x2008f548
 801dacc:	20054940 	.word	0x20054940
 801dad0:	20090ac1 	.word	0x20090ac1
 801dad4:	200056a1 	.word	0x200056a1
 801dad8:	2008f540 	.word	0x2008f540
 801dadc:	20095d7c 	.word	0x20095d7c
 801dae0:	2008f550 	.word	0x2008f550
 801dae4:	2000d53c 	.word	0x2000d53c

0801dae8 <usb_receive_processing>:
{
 801dae8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801daec:	4ca6      	ldr	r4, [pc, #664]	; (801dd88 <usb_receive_processing+0x2a0>)
 801daee:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801daf2:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801daf4:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801daf8:	9501      	str	r5, [sp, #4]
 801dafa:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801dafc:	d12a      	bne.n	801db54 <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801dafe:	f894 8001 	ldrb.w	r8, [r4, #1]
 801db02:	f1b8 0f12 	cmp.w	r8, #18
 801db06:	d117      	bne.n	801db38 <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801db08:	78a7      	ldrb	r7, [r4, #2]
 801db0a:	2f0a      	cmp	r7, #10
 801db0c:	f000 80dd 	beq.w	801dcca <usb_receive_processing+0x1e2>
 801db10:	d815      	bhi.n	801db3e <usb_receive_processing+0x56>
 801db12:	2f02      	cmp	r7, #2
 801db14:	d023      	beq.n	801db5e <usb_receive_processing+0x76>
 801db16:	2f04      	cmp	r7, #4
 801db18:	f000 81a2 	beq.w	801de60 <usb_receive_processing+0x378>
 801db1c:	2f01      	cmp	r7, #1
 801db1e:	d119      	bne.n	801db54 <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801db20:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801db22:	4c9a      	ldr	r4, [pc, #616]	; (801dd8c <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801db24:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801db26:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801db28:	d116      	bne.n	801db58 <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801db2a:	f7ff fe1d 	bl	801d768 <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801db2e:	2300      	movs	r3, #0
 801db30:	6033      	str	r3, [r6, #0]
 801db32:	6073      	str	r3, [r6, #4]
 801db34:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801db36:	7023      	strb	r3, [r4, #0]
}
 801db38:	b002      	add	sp, #8
 801db3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801db3e:	2f0c      	cmp	r7, #12
 801db40:	f000 8146 	beq.w	801ddd0 <usb_receive_processing+0x2e8>
 801db44:	f0c0 80d8 	bcc.w	801dcf8 <usb_receive_processing+0x210>
 801db48:	2f0d      	cmp	r7, #13
 801db4a:	f000 80a7 	beq.w	801dc9c <usb_receive_processing+0x1b4>
 801db4e:	2f66      	cmp	r7, #102	; 0x66
 801db50:	f000 816f 	beq.w	801de32 <usb_receive_processing+0x34a>
			__asm("nop");
 801db54:	bf00      	nop
}
 801db56:	e7ef      	b.n	801db38 <usb_receive_processing+0x50>
						packet_generator_data_send();
 801db58:	f7ff fdb0 	bl	801d6bc <packet_generator_data_send>
 801db5c:	e7e7      	b.n	801db2e <usb_receive_processing+0x46>
						send_usb_block = 0;
 801db5e:	4b8b      	ldr	r3, [pc, #556]	; (801dd8c <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801db60:	4c8b      	ldr	r4, [pc, #556]	; (801dd90 <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801db62:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801db64:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801db66:	4d8b      	ldr	r5, [pc, #556]	; (801dd94 <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801db68:	2240      	movs	r2, #64	; 0x40
 801db6a:	4620      	mov	r0, r4
 801db6c:	f002 fec9 	bl	8020902 <memset>
						if (exp_num != dataToReceive[3]){
 801db70:	78f3      	ldrb	r3, [r6, #3]
 801db72:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801db74:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801db78:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801db7a:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801db7e:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801db80:	d07a      	beq.n	801dc78 <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801db82:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801db84:	782a      	ldrb	r2, [r5, #0]
 801db86:	4b84      	ldr	r3, [pc, #528]	; (801dd98 <usb_receive_processing+0x2b0>)
 801db88:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801db8c:	4b83      	ldr	r3, [pc, #524]	; (801dd9c <usb_receive_processing+0x2b4>)
 801db8e:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801db90:	f7ff fbc6 	bl	801d320 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801db94:	7828      	ldrb	r0, [r5, #0]
 801db96:	f7f1 fc55 	bl	800f444 <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801db9a:	4a81      	ldr	r2, [pc, #516]	; (801dda0 <usb_receive_processing+0x2b8>)
 801db9c:	7933      	ldrb	r3, [r6, #4]
 801db9e:	7811      	ldrb	r1, [r2, #0]
 801dba0:	428b      	cmp	r3, r1
 801dba2:	4691      	mov	r9, r2
 801dba4:	d06c      	beq.n	801dc80 <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801dba6:	3300      	adds	r3, #0
 801dba8:	bf18      	it	ne
 801dbaa:	2301      	movne	r3, #1
 801dbac:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801dbae:	7813      	ldrb	r3, [r2, #0]
 801dbb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d161      	bne.n	801dc7c <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801dbb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801dbbc:	4879      	ldr	r0, [pc, #484]	; (801dda4 <usb_receive_processing+0x2bc>)
 801dbbe:	f7e4 fd9b 	bl	80026f8 <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801dbc2:	4a79      	ldr	r2, [pc, #484]	; (801dda8 <usb_receive_processing+0x2c0>)
 801dbc4:	7973      	ldrb	r3, [r6, #5]
 801dbc6:	7811      	ldrb	r1, [r2, #0]
 801dbc8:	428b      	cmp	r3, r1
 801dbca:	4690      	mov	r8, r2
 801dbcc:	d05c      	beq.n	801dc88 <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801dbce:	3300      	adds	r3, #0
 801dbd0:	bf18      	it	ne
 801dbd2:	2301      	movne	r3, #1
 801dbd4:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801dbd6:	7813      	ldrb	r3, [r2, #0]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d153      	bne.n	801dc84 <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801dbdc:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801dbde:	2120      	movs	r1, #32
 801dbe0:	4872      	ldr	r0, [pc, #456]	; (801ddac <usb_receive_processing+0x2c4>)
 801dbe2:	f7e4 fd89 	bl	80026f8 <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801dbe6:	4f72      	ldr	r7, [pc, #456]	; (801ddb0 <usb_receive_processing+0x2c8>)
 801dbe8:	79b3      	ldrb	r3, [r6, #6]
 801dbea:	783a      	ldrb	r2, [r7, #0]
 801dbec:	4293      	cmp	r3, r2
 801dbee:	d051      	beq.n	801dc94 <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801dbf0:	3300      	adds	r3, #0
 801dbf2:	bf18      	it	ne
 801dbf4:	2301      	movne	r3, #1
 801dbf6:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801dbf8:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801dbfc:	486d      	ldr	r0, [pc, #436]	; (801ddb4 <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801dbfe:	fa5f fa8a 	uxtb.w	sl, sl
 801dc02:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801dc06:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801dc0a:	d13f      	bne.n	801dc8c <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801dc0c:	f7e8 fbe4 	bl	80063d8 <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801dc10:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801dc12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801dc16:	4865      	ldr	r0, [pc, #404]	; (801ddac <usb_receive_processing+0x2c4>)
 801dc18:	f7e4 fd6e 	bl	80026f8 <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801dc1c:	4866      	ldr	r0, [pc, #408]	; (801ddb8 <usb_receive_processing+0x2d0>)
 801dc1e:	79f3      	ldrb	r3, [r6, #7]
 801dc20:	7802      	ldrb	r2, [r0, #0]
 801dc22:	429a      	cmp	r2, r3
 801dc24:	d038      	beq.n	801dc98 <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801dc26:	3300      	adds	r3, #0
 801dc28:	bf18      	it	ne
 801dc2a:	2301      	movne	r3, #1
 801dc2c:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801dc2e:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801dc30:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801dc34:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801dc38:	7800      	ldrb	r0, [r0, #0]
 801dc3a:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801dc3c:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801dc3e:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801dc40:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801dc42:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801dc44:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801dc46:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801dc48:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801dc4a:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801dc4c:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801dc4e:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801dc50:	4413      	add	r3, r2
 801dc52:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801dc54:	494e      	ldr	r1, [pc, #312]	; (801dd90 <usb_receive_processing+0x2a8>)
 801dc56:	4859      	ldr	r0, [pc, #356]	; (801ddbc <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801dc58:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801dc5a:	4413      	add	r3, r2
 801dc5c:	7862      	ldrb	r2, [r4, #1]
 801dc5e:	4413      	add	r3, r2
 801dc60:	78a2      	ldrb	r2, [r4, #2]
 801dc62:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801dc64:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801dc66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801dc6a:	f7ea fc31 	bl	80084d0 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801dc6e:	2300      	movs	r3, #0
 801dc70:	6033      	str	r3, [r6, #0]
 801dc72:	6073      	str	r3, [r6, #4]
 801dc74:	60b3      	str	r3, [r6, #8]
					break;
 801dc76:	e75f      	b.n	801db38 <usb_receive_processing+0x50>
							__asm("nop");
 801dc78:	bf00      	nop
 801dc7a:	e78e      	b.n	801db9a <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801dc7c:	2201      	movs	r2, #1
 801dc7e:	e79b      	b.n	801dbb8 <usb_receive_processing+0xd0>
							__asm("nop");
 801dc80:	bf00      	nop
 801dc82:	e79e      	b.n	801dbc2 <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801dc84:	2200      	movs	r2, #0
 801dc86:	e7aa      	b.n	801dbde <usb_receive_processing+0xf6>
							__asm("nop");
 801dc88:	bf00      	nop
 801dc8a:	e7ac      	b.n	801dbe6 <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801dc8c:	f7e8 fbda 	bl	8006444 <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801dc90:	2200      	movs	r2, #0
 801dc92:	e7be      	b.n	801dc12 <usb_receive_processing+0x12a>
							__asm("nop");
 801dc94:	bf00      	nop
 801dc96:	e7c1      	b.n	801dc1c <usb_receive_processing+0x134>
							__asm("nop");
 801dc98:	bf00      	nop
 801dc9a:	e7c8      	b.n	801dc2e <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801dc9c:	4e48      	ldr	r6, [pc, #288]	; (801ddc0 <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801dc9e:	232c      	movs	r3, #44	; 0x2c
 801dca0:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801dca2:	2302      	movs	r3, #2
 801dca4:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801dca6:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801dca8:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801dcaa:	f7e4 fa21 	bl	80020f0 <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801dcae:	a901      	add	r1, sp, #4
 801dcb0:	4630      	mov	r0, r6
 801dcb2:	f7e4 fb37 	bl	8002324 <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801dcb6:	4b43      	ldr	r3, [pc, #268]	; (801ddc4 <usb_receive_processing+0x2dc>)
 801dcb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801dcbc:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801dcbe:	f7e4 fa29 	bl	8002114 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801dcc2:	6025      	str	r5, [r4, #0]
 801dcc4:	6065      	str	r5, [r4, #4]
 801dcc6:	60a5      	str	r5, [r4, #8]
					break;
 801dcc8:	e736      	b.n	801db38 <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801dcca:	7923      	ldrb	r3, [r4, #4]
 801dccc:	78e2      	ldrb	r2, [r4, #3]
 801dcce:	041b      	lsls	r3, r3, #16
 801dcd0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801dcd4:	79a2      	ldrb	r2, [r4, #6]
 801dcd6:	4313      	orrs	r3, r2
 801dcd8:	7962      	ldrb	r2, [r4, #5]
 801dcda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801dcde:	4a3a      	ldr	r2, [pc, #232]	; (801ddc8 <usb_receive_processing+0x2e0>)
 801dce0:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801dce2:	4b2b      	ldr	r3, [pc, #172]	; (801dd90 <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801dce4:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801dce6:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801dcea:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801dcee:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801dcf0:	6025      	str	r5, [r4, #0]
 801dcf2:	6065      	str	r5, [r4, #4]
 801dcf4:	60a5      	str	r5, [r4, #8]
 801dcf6:	e043      	b.n	801dd80 <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801dcf8:	79e0      	ldrb	r0, [r4, #7]
 801dcfa:	f894 8008 	ldrb.w	r8, [r4, #8]
 801dcfe:	4e33      	ldr	r6, [pc, #204]	; (801ddcc <usb_receive_processing+0x2e4>)
 801dd00:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801dd04:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801dd06:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd0a:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801dd0c:	462a      	mov	r2, r5
 801dd0e:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd10:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801dd12:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd14:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801dd16:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801dd1a:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd1e:	4302      	orrs	r2, r0
 801dd20:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801dd22:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd26:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801dd28:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801dd2c:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd2e:	432a      	orrs	r2, r5
 801dd30:	430b      	orrs	r3, r1
 801dd32:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801dd34:	2100      	movs	r1, #0
 801dd36:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd3a:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801dd3e:	4d22      	ldr	r5, [pc, #136]	; (801ddc8 <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd40:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801dd42:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801dd44:	4302      	orrs	r2, r0
 801dd46:	430b      	orrs	r3, r1
 801dd48:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801dd4c:	2100      	movs	r1, #0
 801dd4e:	4310      	orrs	r0, r2
 801dd50:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801dd52:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801dd56:	f7e4 f9cb 	bl	80020f0 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801dd5a:	4b1a      	ldr	r3, [pc, #104]	; (801ddc4 <usb_receive_processing+0x2dc>)
 801dd5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801dd60:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801dd62:	e9d6 2300 	ldrd	r2, r3, [r6]
 801dd66:	6829      	ldr	r1, [r5, #0]
 801dd68:	2000      	movs	r0, #0
 801dd6a:	f7e4 fa1b 	bl	80021a4 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801dd6e:	4604      	mov	r4, r0
 801dd70:	2800      	cmp	r0, #0
 801dd72:	d1f6      	bne.n	801dd62 <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801dd74:	f7e4 f9ce 	bl	8002114 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801dd78:	4b03      	ldr	r3, [pc, #12]	; (801dd88 <usb_receive_processing+0x2a0>)
 801dd7a:	601c      	str	r4, [r3, #0]
 801dd7c:	605c      	str	r4, [r3, #4]
 801dd7e:	609c      	str	r4, [r3, #8]
						HAL_Delay(3);
 801dd80:	2003      	movs	r0, #3
 801dd82:	f7e3 f953 	bl	800102c <HAL_Delay>
					break;
 801dd86:	e6d7      	b.n	801db38 <usb_receive_processing+0x50>
 801dd88:	2008f550 	.word	0x2008f550
 801dd8c:	200905d1 	.word	0x200905d1
 801dd90:	2008f55c 	.word	0x2008f55c
 801dd94:	200905b6 	.word	0x200905b6
 801dd98:	08032450 	.word	0x08032450
 801dd9c:	20095c60 	.word	0x20095c60
 801dda0:	2000bd38 	.word	0x2000bd38
 801dda4:	48000800 	.word	0x48000800
 801dda8:	20054946 	.word	0x20054946
 801ddac:	48001400 	.word	0x48001400
 801ddb0:	20000ebe 	.word	0x20000ebe
 801ddb4:	200957bc 	.word	0x200957bc
 801ddb8:	20000ebc 	.word	0x20000ebc
 801ddbc:	20095d7c 	.word	0x20095d7c
 801ddc0:	200959b4 	.word	0x200959b4
 801ddc4:	40022000 	.word	0x40022000
 801ddc8:	20095b44 	.word	0x20095b44
 801ddcc:	20095ab0 	.word	0x20095ab0
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801ddd0:	7920      	ldrb	r0, [r4, #4]
 801ddd2:	78e3      	ldrb	r3, [r4, #3]
 801ddd4:	0400      	lsls	r0, r0, #16
 801ddd6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801ddda:	79a3      	ldrb	r3, [r4, #6]
 801dddc:	4318      	orrs	r0, r3
 801ddde:	7963      	ldrb	r3, [r4, #5]
 801dde0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801dde4:	4b23      	ldr	r3, [pc, #140]	; (801de74 <usb_receive_processing+0x38c>)
 801dde6:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801dde8:	f7ee fb8d 	bl	800c506 <flash_data_read_buff>
 801ddec:	4b22      	ldr	r3, [pc, #136]	; (801de78 <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801ddee:	4a23      	ldr	r2, [pc, #140]	; (801de7c <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801ddf0:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801ddf4:	cb03      	ldmia	r3!, {r0, r1}
 801ddf6:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801ddf8:	4921      	ldr	r1, [pc, #132]	; (801de80 <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801ddfa:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801ddfc:	231c      	movs	r3, #28
 801ddfe:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801de00:	79d3      	ldrb	r3, [r2, #7]
 801de02:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801de04:	7993      	ldrb	r3, [r2, #6]
 801de06:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801de08:	7953      	ldrb	r3, [r2, #5]
 801de0a:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801de0c:	7913      	ldrb	r3, [r2, #4]
 801de0e:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801de10:	78d3      	ldrb	r3, [r2, #3]
 801de12:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801de14:	7893      	ldrb	r3, [r2, #2]
 801de16:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801de18:	7853      	ldrb	r3, [r2, #1]
 801de1a:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801de1c:	4819      	ldr	r0, [pc, #100]	; (801de84 <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801de1e:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801de20:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801de24:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801de26:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801de2a:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801de2c:	f7ea fb50 	bl	80084d0 <USBD_CUSTOM_HID_SendReport>
 801de30:	e75e      	b.n	801dcf0 <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801de32:	4a15      	ldr	r2, [pc, #84]	; (801de88 <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801de34:	4b12      	ldr	r3, [pc, #72]	; (801de80 <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801de36:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801de38:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801de3c:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801de40:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801de42:	b95a      	cbnz	r2, 801de5c <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801de44:	2201      	movs	r2, #1
 801de46:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801de48:	2240      	movs	r2, #64	; 0x40
 801de4a:	490d      	ldr	r1, [pc, #52]	; (801de80 <usb_receive_processing+0x398>)
 801de4c:	480d      	ldr	r0, [pc, #52]	; (801de84 <usb_receive_processing+0x39c>)
 801de4e:	f7ea fb3f 	bl	80084d0 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801de52:	2300      	movs	r3, #0
 801de54:	6033      	str	r3, [r6, #0]
 801de56:	6073      	str	r3, [r6, #4]
 801de58:	60b3      	str	r3, [r6, #8]
 801de5a:	e791      	b.n	801dd80 <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801de5c:	70dd      	strb	r5, [r3, #3]
 801de5e:	e7f3      	b.n	801de48 <usb_receive_processing+0x360>
						send_usb_block = 1;
 801de60:	4e0a      	ldr	r6, [pc, #40]	; (801de8c <usb_receive_processing+0x3a4>)
 801de62:	2301      	movs	r3, #1
 801de64:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801de66:	f7ff fd11 	bl	801d88c <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801de6a:	6025      	str	r5, [r4, #0]
 801de6c:	6065      	str	r5, [r4, #4]
 801de6e:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801de70:	7035      	strb	r5, [r6, #0]
					break;
 801de72:	e661      	b.n	801db38 <usb_receive_processing+0x50>
 801de74:	20095b44 	.word	0x20095b44
 801de78:	20095800 	.word	0x20095800
 801de7c:	200905b7 	.word	0x200905b7
 801de80:	2008f55c 	.word	0x2008f55c
 801de84:	20095d7c 	.word	0x20095d7c
 801de88:	2009571a 	.word	0x2009571a
 801de8c:	200905d1 	.word	0x200905d1

0801de90 <string_parse_no_check>:
{
 801de90:	b537      	push	{r0, r1, r2, r4, r5, lr}
							data_bluetooth_send[0] = 0xAB;
 801de92:	4a47      	ldr	r2, [pc, #284]	; (801dfb0 <string_parse_no_check+0x120>)
 801de94:	4947      	ldr	r1, [pc, #284]	; (801dfb4 <string_parse_no_check+0x124>)
 801de96:	23ab      	movs	r3, #171	; 0xab
 801de98:	7013      	strb	r3, [r2, #0]
							data_bluetooth_send[1] = 0x12;
 801de9a:	2312      	movs	r3, #18
 801de9c:	7053      	strb	r3, [r2, #1]
							data_bluetooth_send[2] = 0x04;
 801de9e:	2304      	movs	r3, #4
 801dea0:	7093      	strb	r3, [r2, #2]
							data_bluetooth_send[3] = (Mode_EL == 0)? 0 : 1;
 801dea2:	4b45      	ldr	r3, [pc, #276]	; (801dfb8 <string_parse_no_check+0x128>)
 801dea4:	781b      	ldrb	r3, [r3, #0]
 801dea6:	3300      	adds	r3, #0
 801dea8:	bf18      	it	ne
 801deaa:	2301      	movne	r3, #1
 801deac:	70d3      	strb	r3, [r2, #3]
							data_bluetooth_send[4] = 0;
 801deae:	2300      	movs	r3, #0
 801deb0:	7113      	strb	r3, [r2, #4]
 801deb2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 801deb6:	4613      	mov	r3, r2
								memcpy(&buff_float, &Line_Rabs_buff[1023-i], sizeof(float));
 801deb8:	f851 0904 	ldr.w	r0, [r1], #-4
								data_bluetooth_send[qz+3] = (buff_float) & 0x000000FF;
 801debc:	7210      	strb	r0, [r2, #8]
								data_bluetooth_send[qz+0] =  (buff_float >> 24) & 0x000000FF;
 801debe:	0e05      	lsrs	r5, r0, #24
 801dec0:	7155      	strb	r5, [r2, #5]
								data_bluetooth_send[qz+1] =  (buff_float >> 16) & 0x000000FF;
 801dec2:	0c05      	lsrs	r5, r0, #16
 801dec4:	7195      	strb	r5, [r2, #6]
							for(uint16_t i = 0; i < 1024; i++){
 801dec6:	428c      	cmp	r4, r1
								data_bluetooth_send[qz+2] =  (buff_float >> 8) & 0x000000FF;
 801dec8:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801decc:	71d5      	strb	r5, [r2, #7]
 801dece:	f102 0204 	add.w	r2, r2, #4
							for(uint16_t i = 0; i < 1024; i++){
 801ded2:	d1f1      	bne.n	801deb8 <string_parse_no_check+0x28>
						memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801ded4:	4939      	ldr	r1, [pc, #228]	; (801dfbc <string_parse_no_check+0x12c>)
 801ded6:	680a      	ldr	r2, [r1, #0]
						data_bluetooth_send[qz] =  (buff_float >> 24) & 0x000000FF;
 801ded8:	f241 0005 	movw	r0, #4101	; 0x1005
 801dedc:	0e14      	lsrs	r4, r2, #24
 801dede:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+1] = (buff_float >> 16) & 0x000000FF;
 801dee0:	f241 0006 	movw	r0, #4102	; 0x1006
 801dee4:	0c14      	lsrs	r4, r2, #16
 801dee6:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+2] = (buff_float >> 8) & 0x000000FF;
 801dee8:	f241 0007 	movw	r0, #4103	; 0x1007
 801deec:	0a14      	lsrs	r4, r2, #8
 801deee:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+3] = (buff_float) & 0x000000FF;
 801def0:	f241 0008 	movw	r0, #4104	; 0x1008
 801def4:	541a      	strb	r2, [r3, r0]
						memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801def6:	684a      	ldr	r2, [r1, #4]
 801def8:	9201      	str	r2, [sp, #4]
						data_bluetooth_send[qz+4] = (buff_float >> 24) & 0x000000FF;
 801defa:	f241 0109 	movw	r1, #4105	; 0x1009
 801defe:	0e10      	lsrs	r0, r2, #24
 801df00:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+5] = (buff_float >> 16) & 0x000000FF;
 801df02:	f241 010a 	movw	r1, #4106	; 0x100a
 801df06:	0c10      	lsrs	r0, r2, #16
 801df08:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+6] = (buff_float >> 8) & 0x000000FF;
 801df0a:	f241 010b 	movw	r1, #4107	; 0x100b
 801df0e:	0a10      	lsrs	r0, r2, #8
 801df10:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+7] = (buff_float) & 0x000000FF;
 801df12:	f241 010c 	movw	r1, #4108	; 0x100c
 801df16:	545a      	strb	r2, [r3, r1]
						memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801df18:	4a29      	ldr	r2, [pc, #164]	; (801dfc0 <string_parse_no_check+0x130>)
 801df1a:	8812      	ldrh	r2, [r2, #0]
 801df1c:	f8ad 2004 	strh.w	r2, [sp, #4]
						data_bluetooth_send[qz+8]= (buff_float >> 8) & 0x000000FF;
 801df20:	9a01      	ldr	r2, [sp, #4]
 801df22:	f241 010d 	movw	r1, #4109	; 0x100d
 801df26:	0a10      	lsrs	r0, r2, #8
 801df28:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+9] = (buff_float) & 0x000000FF;
 801df2a:	f241 010e 	movw	r1, #4110	; 0x100e
 801df2e:	545a      	strb	r2, [r3, r1]
						data_bluetooth_send[qz+10]= Source_Type;
 801df30:	4a24      	ldr	r2, [pc, #144]	; (801dfc4 <string_parse_no_check+0x134>)
 801df32:	7811      	ldrb	r1, [r2, #0]
 801df34:	f241 020f 	movw	r2, #4111	; 0x100f
 801df38:	5499      	strb	r1, [r3, r2]
						if(Calculate_deltaEab_Done == 0x01)
 801df3a:	4a23      	ldr	r2, [pc, #140]	; (801dfc8 <string_parse_no_check+0x138>)
 801df3c:	7812      	ldrb	r2, [r2, #0]
 801df3e:	2a01      	cmp	r2, #1
 801df40:	d131      	bne.n	801dfa6 <string_parse_no_check+0x116>
							memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801df42:	4a22      	ldr	r2, [pc, #136]	; (801dfcc <string_parse_no_check+0x13c>)
 801df44:	8812      	ldrh	r2, [r2, #0]
 801df46:	f8ad 2004 	strh.w	r2, [sp, #4]
							data_bluetooth_send[qz+11] = (buff_float >> 8) & 0x000000FF;
 801df4a:	9a01      	ldr	r2, [sp, #4]
 801df4c:	f241 0110 	movw	r1, #4112	; 0x1010
 801df50:	0a10      	lsrs	r0, r2, #8
 801df52:	5458      	strb	r0, [r3, r1]
							data_bluetooth_send[qz+12] = 0x00;
 801df54:	f241 0111 	movw	r1, #4113	; 0x1011
						data_bluetooth_send[qz+13] = (buff_float >> 24) & 0x000000FF;
 801df58:	f241 0012 	movw	r0, #4114	; 0x1012
							data_bluetooth_send[qz+12] = 0x00;
 801df5c:	545a      	strb	r2, [r3, r1]
						memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801df5e:	491c      	ldr	r1, [pc, #112]	; (801dfd0 <string_parse_no_check+0x140>)
 801df60:	680a      	ldr	r2, [r1, #0]
						data_bluetooth_send[qz+13] = (buff_float >> 24) & 0x000000FF;
 801df62:	0e14      	lsrs	r4, r2, #24
 801df64:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+14] = (buff_float >> 16) & 0x000000FF;
 801df66:	f241 0013 	movw	r0, #4115	; 0x1013
 801df6a:	0c14      	lsrs	r4, r2, #16
 801df6c:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+15]= (buff_float >> 8) & 0x000000FF;
 801df6e:	f241 0014 	movw	r0, #4116	; 0x1014
 801df72:	0a14      	lsrs	r4, r2, #8
 801df74:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+16] = (buff_float) & 0x000000FF;
 801df76:	f241 0015 	movw	r0, #4117	; 0x1015
 801df7a:	541a      	strb	r2, [r3, r0]
						memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801df7c:	684a      	ldr	r2, [r1, #4]
						data_bluetooth_send[qz+17] = (buff_float >> 24) & 0x000000FF;
 801df7e:	f241 0116 	movw	r1, #4118	; 0x1016
 801df82:	0e10      	lsrs	r0, r2, #24
 801df84:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+18] = (buff_float >> 16) & 0x000000FF;
 801df86:	f241 0117 	movw	r1, #4119	; 0x1017
 801df8a:	0c10      	lsrs	r0, r2, #16
 801df8c:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+19] = (buff_float >> 8) & 0x000000FF;
 801df8e:	f241 0118 	movw	r1, #4120	; 0x1018
 801df92:	0a10      	lsrs	r0, r2, #8
 801df94:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+20] = (buff_float) & 0x000000FF;
 801df96:	f241 0119 	movw	r1, #4121	; 0x1019
 801df9a:	545a      	strb	r2, [r3, r1]
						send_bluetooth = 1;
 801df9c:	4b0d      	ldr	r3, [pc, #52]	; (801dfd4 <string_parse_no_check+0x144>)
 801df9e:	2201      	movs	r2, #1
 801dfa0:	701a      	strb	r2, [r3, #0]
}
 801dfa2:	b003      	add	sp, #12
 801dfa4:	bd30      	pop	{r4, r5, pc}
						} else {data_bluetooth_send[qz+11] = 0x00;
 801dfa6:	f241 0110 	movw	r1, #4112	; 0x1010
 801dfaa:	2200      	movs	r2, #0
 801dfac:	545a      	strb	r2, [r3, r1]
 801dfae:	e7d1      	b.n	801df54 <string_parse_no_check+0xc4>
 801dfb0:	2008f59c 	.word	0x2008f59c
 801dfb4:	2000d538 	.word	0x2000d538
 801dfb8:	20000ebc 	.word	0x20000ebc
 801dfbc:	2008f548 	.word	0x2008f548
 801dfc0:	20054940 	.word	0x20054940
 801dfc4:	20090ac1 	.word	0x20090ac1
 801dfc8:	200056a1 	.word	0x200056a1
 801dfcc:	20090abe 	.word	0x20090abe
 801dfd0:	2008f540 	.word	0x2008f540
 801dfd4:	200905d0 	.word	0x200905d0

0801dfd8 <HAL_UART_RxCpltCallback>:
{
 801dfd8:	4770      	bx	lr
	...

0801dfdc <auto_exposure>:
{ 
 801dfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfde:	4d45      	ldr	r5, [pc, #276]	; (801e0f4 <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801dfe0:	4c45      	ldr	r4, [pc, #276]	; (801e0f8 <auto_exposure+0x11c>)
 801dfe2:	882b      	ldrh	r3, [r5, #0]
{ 
 801dfe4:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801dfe6:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801dfea:	18a0      	adds	r0, r4, r2
 801dfec:	3202      	adds	r2, #2
 801dfee:	8940      	ldrh	r0, [r0, #10]
 801dff0:	4283      	cmp	r3, r0
 801dff2:	bf38      	it	cc
 801dff4:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801dff6:	428a      	cmp	r2, r1
 801dff8:	d1f7      	bne.n	801dfea <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801dffa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801dffe:	4293      	cmp	r3, r2
 801e000:	802b      	strh	r3, [r5, #0]
 801e002:	4c3e      	ldr	r4, [pc, #248]	; (801e0fc <auto_exposure+0x120>)
 801e004:	d840      	bhi.n	801e088 <auto_exposure+0xac>
 801e006:	7823      	ldrb	r3, [r4, #0]
 801e008:	2b09      	cmp	r3, #9
 801e00a:	d027      	beq.n	801e05c <auto_exposure+0x80>
		highSignal = 0;
 801e00c:	4a3c      	ldr	r2, [pc, #240]	; (801e100 <auto_exposure+0x124>)
		send_usb_block =1;
 801e00e:	4f3d      	ldr	r7, [pc, #244]	; (801e104 <auto_exposure+0x128>)
		highSignal = 0;
 801e010:	2300      	movs	r3, #0
 801e012:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801e014:	4a3c      	ldr	r2, [pc, #240]	; (801e108 <auto_exposure+0x12c>)
 801e016:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801e018:	2301      	movs	r3, #1
 801e01a:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801e01c:	7823      	ldrb	r3, [r4, #0]
 801e01e:	3301      	adds	r3, #1
		exp_num--;
 801e020:	b2db      	uxtb	r3, r3
 801e022:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801e024:	7822      	ldrb	r2, [r4, #0]
 801e026:	4b39      	ldr	r3, [pc, #228]	; (801e10c <auto_exposure+0x130>)
 801e028:	4e39      	ldr	r6, [pc, #228]	; (801e110 <auto_exposure+0x134>)
 801e02a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e02e:	4b39      	ldr	r3, [pc, #228]	; (801e114 <auto_exposure+0x138>)
 801e030:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801e032:	f7ff f975 	bl	801d320 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801e036:	7820      	ldrb	r0, [r4, #0]
 801e038:	f7f1 fa04 	bl	800f444 <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801e03c:	4b36      	ldr	r3, [pc, #216]	; (801e118 <auto_exposure+0x13c>)
 801e03e:	781a      	ldrb	r2, [r3, #0]
 801e040:	4b36      	ldr	r3, [pc, #216]	; (801e11c <auto_exposure+0x140>)
 801e042:	2a00      	cmp	r2, #0
 801e044:	d132      	bne.n	801e0ac <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801e046:	4a36      	ldr	r2, [pc, #216]	; (801e120 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e048:	ed93 0a00 	vldr	s0, [r3]
 801e04c:	edd2 0a00 	vldr	s1, [r2]
 801e050:	f7fc f8e6 	bl	801a220 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801e054:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e056:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 801e05a:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 801e05c:	4b31      	ldr	r3, [pc, #196]	; (801e124 <auto_exposure+0x148>)
 801e05e:	7822      	ldrb	r2, [r4, #0]
 801e060:	7819      	ldrb	r1, [r3, #0]
 801e062:	4291      	cmp	r1, r2
 801e064:	4a30      	ldr	r2, [pc, #192]	; (801e128 <auto_exposure+0x14c>)
 801e066:	bf14      	ite	ne
 801e068:	2101      	movne	r1, #1
 801e06a:	2100      	moveq	r1, #0
 801e06c:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 801e06e:	7822      	ldrb	r2, [r4, #0]
 801e070:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 801e072:	7823      	ldrb	r3, [r4, #0]
 801e074:	b9e3      	cbnz	r3, 801e0b0 <auto_exposure+0xd4>
 801e076:	882a      	ldrh	r2, [r5, #0]
 801e078:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801e07c:	429a      	cmp	r2, r3
 801e07e:	d917      	bls.n	801e0b0 <auto_exposure+0xd4>
		highSignal = 1;
 801e080:	2201      	movs	r2, #1
			highSignal = 0;
 801e082:	4b1f      	ldr	r3, [pc, #124]	; (801e100 <auto_exposure+0x124>)
			lowSignal = 0;
 801e084:	701a      	strb	r2, [r3, #0]
 801e086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 801e088:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 801e08c:	4293      	cmp	r3, r2
 801e08e:	d9e5      	bls.n	801e05c <auto_exposure+0x80>
 801e090:	7823      	ldrb	r3, [r4, #0]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d0e2      	beq.n	801e05c <auto_exposure+0x80>
		highSignal = 0;
 801e096:	4a1a      	ldr	r2, [pc, #104]	; (801e100 <auto_exposure+0x124>)
		send_usb_block =1;
 801e098:	4f1a      	ldr	r7, [pc, #104]	; (801e104 <auto_exposure+0x128>)
		highSignal = 0;
 801e09a:	2300      	movs	r3, #0
 801e09c:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801e09e:	4a1a      	ldr	r2, [pc, #104]	; (801e108 <auto_exposure+0x12c>)
 801e0a0:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801e0a2:	2301      	movs	r3, #1
 801e0a4:	703b      	strb	r3, [r7, #0]
		exp_num--;
 801e0a6:	7823      	ldrb	r3, [r4, #0]
 801e0a8:	3b01      	subs	r3, #1
 801e0aa:	e7b9      	b.n	801e020 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e0ac:	4a1f      	ldr	r2, [pc, #124]	; (801e12c <auto_exposure+0x150>)
 801e0ae:	e7cb      	b.n	801e048 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 801e0b0:	7823      	ldrb	r3, [r4, #0]
 801e0b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801e0b6:	b923      	cbnz	r3, 801e0c2 <auto_exposure+0xe6>
 801e0b8:	8829      	ldrh	r1, [r5, #0]
 801e0ba:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801e0be:	4299      	cmp	r1, r3
 801e0c0:	d9df      	bls.n	801e082 <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 801e0c2:	7823      	ldrb	r3, [r4, #0]
 801e0c4:	2b09      	cmp	r3, #9
 801e0c6:	d109      	bne.n	801e0dc <auto_exposure+0x100>
 801e0c8:	4b19      	ldr	r3, [pc, #100]	; (801e130 <auto_exposure+0x154>)
 801e0ca:	882a      	ldrh	r2, [r5, #0]
 801e0cc:	881b      	ldrh	r3, [r3, #0]
 801e0ce:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 801e0d2:	4293      	cmp	r3, r2
 801e0d4:	db02      	blt.n	801e0dc <auto_exposure+0x100>
			lowSignal = 1;
 801e0d6:	2201      	movs	r2, #1
			lowSignal = 0;
 801e0d8:	4b0b      	ldr	r3, [pc, #44]	; (801e108 <auto_exposure+0x12c>)
 801e0da:	e7d3      	b.n	801e084 <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 801e0dc:	7823      	ldrb	r3, [r4, #0]
 801e0de:	2b09      	cmp	r3, #9
 801e0e0:	d1d1      	bne.n	801e086 <auto_exposure+0xaa>
 801e0e2:	4b13      	ldr	r3, [pc, #76]	; (801e130 <auto_exposure+0x154>)
 801e0e4:	882a      	ldrh	r2, [r5, #0]
 801e0e6:	881b      	ldrh	r3, [r3, #0]
 801e0e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801e0ec:	429a      	cmp	r2, r3
 801e0ee:	ddca      	ble.n	801e086 <auto_exposure+0xaa>
			lowSignal = 0;
 801e0f0:	2200      	movs	r2, #0
 801e0f2:	e7f1      	b.n	801e0d8 <auto_exposure+0xfc>
 801e0f4:	200905c4 	.word	0x200905c4
 801e0f8:	2000e53c 	.word	0x2000e53c
 801e0fc:	200905b6 	.word	0x200905b6
 801e100:	200905bf 	.word	0x200905bf
 801e104:	200905d1 	.word	0x200905d1
 801e108:	200905c2 	.word	0x200905c2
 801e10c:	08032450 	.word	0x08032450
 801e110:	20009d34 	.word	0x20009d34
 801e114:	20095c60 	.word	0x20095c60
 801e118:	20000ebc 	.word	0x20000ebc
 801e11c:	20009d2c 	.word	0x20009d2c
 801e120:	20009d28 	.word	0x20009d28
 801e124:	200905c6 	.word	0x200905c6
 801e128:	20000ebf 	.word	0x20000ebf
 801e12c:	20009d24 	.word	0x20009d24
 801e130:	20009d22 	.word	0x20009d22

0801e134 <TIM2_IRQHandler>:
{
 801e134:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801e136:	4d0d      	ldr	r5, [pc, #52]	; (801e16c <TIM2_IRQHandler+0x38>)
 801e138:	2200      	movs	r2, #0
 801e13a:	2110      	movs	r1, #16
 801e13c:	4628      	mov	r0, r5
 801e13e:	f7e4 fadb 	bl	80026f8 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801e142:	200a      	movs	r0, #10
 801e144:	f7ff f934 	bl	801d3b0 <DWT_Delay>
	i = 0;
 801e148:	4b09      	ldr	r3, [pc, #36]	; (801e170 <TIM2_IRQHandler+0x3c>)
 801e14a:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801e14c:	4628      	mov	r0, r5
 801e14e:	2201      	movs	r2, #1
 801e150:	2110      	movs	r1, #16
	i = 0;
 801e152:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801e154:	f7e4 fad0 	bl	80026f8 <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801e158:	4b06      	ldr	r3, [pc, #24]	; (801e174 <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801e15a:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801e15c:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801e15e:	f7e3 fc83 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801e162:	4805      	ldr	r0, [pc, #20]	; (801e178 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801e164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801e168:	f7e7 be13 	b.w	8005d92 <HAL_TIM_IRQHandler>
 801e16c:	48000800 	.word	0x48000800
 801e170:	200905c0 	.word	0x200905c0
 801e174:	2008f514 	.word	0x2008f514
 801e178:	20095c60 	.word	0x20095c60

0801e17c <TIM6_DAC_IRQHandler>:
{
 801e17c:	b508      	push	{r3, lr}
	pause_button = 0;
 801e17e:	4b06      	ldr	r3, [pc, #24]	; (801e198 <TIM6_DAC_IRQHandler+0x1c>)
 801e180:	2200      	movs	r2, #0
 801e182:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801e184:	f7ff fa5e 	bl	801d644 <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801e188:	2036      	movs	r0, #54	; 0x36
 801e18a:	f7e3 fc6d 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801e18e:	4803      	ldr	r0, [pc, #12]	; (801e19c <TIM6_DAC_IRQHandler+0x20>)
}
 801e190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801e194:	f7e7 bdfd 	b.w	8005d92 <HAL_TIM_IRQHandler>
 801e198:	200905c7 	.word	0x200905c7
 801e19c:	20095b4c 	.word	0x20095b4c

0801e1a0 <TIM7_IRQHandler>:
{
 801e1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801e1a2:	4b48      	ldr	r3, [pc, #288]	; (801e2c4 <TIM7_IRQHandler+0x124>)
 801e1a4:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801e1a6:	3b01      	subs	r3, #1
 801e1a8:	2b04      	cmp	r3, #4
 801e1aa:	d81e      	bhi.n	801e1ea <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801e1ac:	4b46      	ldr	r3, [pc, #280]	; (801e2c8 <TIM7_IRQHandler+0x128>)
 801e1ae:	781b      	ldrb	r3, [r3, #0]
 801e1b0:	b9db      	cbnz	r3, 801e1ea <TIM7_IRQHandler+0x4a>
 801e1b2:	4b46      	ldr	r3, [pc, #280]	; (801e2cc <TIM7_IRQHandler+0x12c>)
 801e1b4:	781b      	ldrb	r3, [r3, #0]
 801e1b6:	b9c3      	cbnz	r3, 801e1ea <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801e1b8:	4a45      	ldr	r2, [pc, #276]	; (801e2d0 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801e1ba:	4946      	ldr	r1, [pc, #280]	; (801e2d4 <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801e1bc:	8813      	ldrh	r3, [r2, #0]
 801e1be:	3301      	adds	r3, #1
 801e1c0:	b29b      	uxth	r3, r3
 801e1c2:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801e1c4:	780a      	ldrb	r2, [r1, #0]
 801e1c6:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801e1c8:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801e1ca:	d96b      	bls.n	801e2a4 <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801e1cc:	4842      	ldr	r0, [pc, #264]	; (801e2d8 <TIM7_IRQHandler+0x138>)
 801e1ce:	f241 7670 	movw	r6, #6000	; 0x1770
 801e1d2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801e1d6:	fbb2 f2f6 	udiv	r2, r2, r6
 801e1da:	4293      	cmp	r3, r2
 801e1dc:	d12b      	bne.n	801e236 <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801e1de:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801e2dc <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801e1e2:	210d      	movs	r1, #13
 801e1e4:	2055      	movs	r0, #85	; 0x55
 801e1e6:	f7f5 fb11 	bl	801380c <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801e1ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801e1ee:	483c      	ldr	r0, [pc, #240]	; (801e2e0 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801e1f0:	4c3c      	ldr	r4, [pc, #240]	; (801e2e4 <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801e1f2:	4d3d      	ldr	r5, [pc, #244]	; (801e2e8 <TIM7_IRQHandler+0x148>)
 801e1f4:	f7e4 fa7a 	bl	80026ec <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801e1f8:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801e1fa:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801e1fc:	4283      	cmp	r3, r0
 801e1fe:	d012      	beq.n	801e226 <TIM7_IRQHandler+0x86>
 801e200:	4b3a      	ldr	r3, [pc, #232]	; (801e2ec <TIM7_IRQHandler+0x14c>)
 801e202:	781b      	ldrb	r3, [r3, #0]
 801e204:	b97b      	cbnz	r3, 801e226 <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801e206:	fab0 f280 	clz	r2, r0
 801e20a:	0952      	lsrs	r2, r2, #5
 801e20c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e210:	2037      	movs	r0, #55	; 0x37
 801e212:	f7f4 fd6f 	bl	8012cf4 <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801e216:	782b      	ldrb	r3, [r5, #0]
 801e218:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d14b      	bne.n	801e2b6 <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801e21e:	f7ff f86d 	bl	801d2fc <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801e222:	f7fe fa39 	bl	801c698 <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801e226:	2037      	movs	r0, #55	; 0x37
 801e228:	f7e3 fc1e 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801e22c:	4830      	ldr	r0, [pc, #192]	; (801e2f0 <TIM7_IRQHandler+0x150>)
}
 801e22e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801e232:	f7e7 bdae 	b.w	8005d92 <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801e236:	780a      	ldrb	r2, [r1, #0]
 801e238:	270c      	movs	r7, #12
 801e23a:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801e23e:	fbb5 f5f7 	udiv	r5, r5, r7
 801e242:	22fa      	movs	r2, #250	; 0xfa
 801e244:	fb95 f5f2 	sdiv	r5, r5, r2
 801e248:	42ab      	cmp	r3, r5
 801e24a:	d102      	bne.n	801e252 <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801e24c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801e2f4 <TIM7_IRQHandler+0x154>
 801e250:	e7c7      	b.n	801e1e2 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801e252:	780a      	ldrb	r2, [r1, #0]
 801e254:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801e258:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801e25c:	fbb2 f2f7 	udiv	r2, r2, r7
 801e260:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e264:	fb92 f2f4 	sdiv	r2, r2, r4
 801e268:	4293      	cmp	r3, r2
 801e26a:	d102      	bne.n	801e272 <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801e26c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801e2f8 <TIM7_IRQHandler+0x158>
 801e270:	e7b7      	b.n	801e1e2 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801e272:	780a      	ldrb	r2, [r1, #0]
 801e274:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801e278:	fbb4 f4f7 	udiv	r4, r4, r7
 801e27c:	227d      	movs	r2, #125	; 0x7d
 801e27e:	fb94 f4f2 	sdiv	r4, r4, r2
 801e282:	42a3      	cmp	r3, r4
 801e284:	d102      	bne.n	801e28c <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801e286:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801e2fc <TIM7_IRQHandler+0x15c>
 801e28a:	e7aa      	b.n	801e1e2 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801e28c:	780a      	ldrb	r2, [r1, #0]
 801e28e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801e292:	fbb2 f2f6 	udiv	r2, r2, r6
 801e296:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e29a:	4293      	cmp	r3, r2
 801e29c:	d1a5      	bne.n	801e1ea <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801e29e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e2a2:	e79e      	b.n	801e1e2 <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801e2a4:	2a02      	cmp	r2, #2
 801e2a6:	d9fa      	bls.n	801e29e <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801e2a8:	2b01      	cmp	r3, #1
 801e2aa:	d102      	bne.n	801e2b2 <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801e2ac:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801e2b0:	e797      	b.n	801e1e2 <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801e2b2:	2b02      	cmp	r3, #2
 801e2b4:	e7f2      	b.n	801e29c <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801e2b6:	4812      	ldr	r0, [pc, #72]	; (801e300 <TIM7_IRQHandler+0x160>)
 801e2b8:	f7eb fe62 	bl	8009f80 <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801e2bc:	4811      	ldr	r0, [pc, #68]	; (801e304 <TIM7_IRQHandler+0x164>)
 801e2be:	f7e6 fd69 	bl	8004d94 <HAL_SD_DeInit>
 801e2c2:	e7b0      	b.n	801e226 <TIM7_IRQHandler+0x86>
 801e2c4:	20005701 	.word	0x20005701
 801e2c8:	20005728 	.word	0x20005728
 801e2cc:	20009cf5 	.word	0x20009cf5
 801e2d0:	2008f514 	.word	0x2008f514
 801e2d4:	200905b6 	.word	0x200905b6
 801e2d8:	08032450 	.word	0x08032450
 801e2dc:	3e4ccccd 	.word	0x3e4ccccd
 801e2e0:	48000800 	.word	0x48000800
 801e2e4:	20000ec1 	.word	0x20000ec1
 801e2e8:	20095c5c 	.word	0x20095c5c
 801e2ec:	2009571a 	.word	0x2009571a
 801e2f0:	20095d34 	.word	0x20095d34
 801e2f4:	3ecccccd 	.word	0x3ecccccd
 801e2f8:	3f19999a 	.word	0x3f19999a
 801e2fc:	3f4ccccd 	.word	0x3f4ccccd
 801e300:	2009368d 	.word	0x2009368d
 801e304:	20095810 	.word	0x20095810

0801e308 <EXTI9_5_IRQHandler>:
{
 801e308:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801e30a:	4c22      	ldr	r4, [pc, #136]	; (801e394 <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801e30c:	2001      	movs	r0, #1
 801e30e:	f7ff f84f 	bl	801d3b0 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801e312:	2300      	movs	r3, #0
 801e314:	4622      	mov	r2, r4
 801e316:	4621      	mov	r1, r4
 801e318:	9300      	str	r3, [sp, #0]
 801e31a:	481f      	ldr	r0, [pc, #124]	; (801e398 <EXTI9_5_IRQHandler+0x90>)
 801e31c:	2302      	movs	r3, #2
 801e31e:	f7e7 fac8 	bl	80058b2 <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801e322:	7823      	ldrb	r3, [r4, #0]
 801e324:	7862      	ldrb	r2, [r4, #1]
 801e326:	4c1d      	ldr	r4, [pc, #116]	; (801e39c <EXTI9_5_IRQHandler+0x94>)
 801e328:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801e32c:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801e32e:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801e332:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801e334:	b289      	uxth	r1, r1
 801e336:	4b1a      	ldr	r3, [pc, #104]	; (801e3a0 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801e338:	dd05      	ble.n	801e346 <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801e33a:	8822      	ldrh	r2, [r4, #0]
 801e33c:	b292      	uxth	r2, r2
 801e33e:	3a01      	subs	r2, #1
 801e340:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e344:	e002      	b.n	801e34c <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801e346:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801e34a:	dbf6      	blt.n	801e33a <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801e34c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801e350:	8823      	ldrh	r3, [r4, #0]
 801e352:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801e356:	b29b      	uxth	r3, r3
 801e358:	4293      	cmp	r3, r2
 801e35a:	d916      	bls.n	801e38a <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801e35c:	4b11      	ldr	r3, [pc, #68]	; (801e3a4 <EXTI9_5_IRQHandler+0x9c>)
 801e35e:	781b      	ldrb	r3, [r3, #0]
 801e360:	b943      	cbnz	r3, 801e374 <EXTI9_5_IRQHandler+0x6c>
 801e362:	4b11      	ldr	r3, [pc, #68]	; (801e3a8 <EXTI9_5_IRQHandler+0xa0>)
 801e364:	781b      	ldrb	r3, [r3, #0]
 801e366:	b92b      	cbnz	r3, 801e374 <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801e368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e36c:	490c      	ldr	r1, [pc, #48]	; (801e3a0 <EXTI9_5_IRQHandler+0x98>)
 801e36e:	480f      	ldr	r0, [pc, #60]	; (801e3ac <EXTI9_5_IRQHandler+0xa4>)
 801e370:	f002 fabc 	bl	80208ec <memcpy>
			i = 0;
 801e374:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801e376:	2017      	movs	r0, #23
			i++;
 801e378:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801e37a:	f7e3 fb75 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801e37e:	2080      	movs	r0, #128	; 0x80
}
 801e380:	b002      	add	sp, #8
 801e382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801e386:	f7e4 b9c1 	b.w	800270c <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801e38a:	8823      	ldrh	r3, [r4, #0]
 801e38c:	3301      	adds	r3, #1
 801e38e:	b29b      	uxth	r3, r3
 801e390:	e7f1      	b.n	801e376 <EXTI9_5_IRQHandler+0x6e>
 801e392:	bf00      	nop
 801e394:	20095b96 	.word	0x20095b96
 801e398:	20095bf8 	.word	0x20095bf8
 801e39c:	200905c0 	.word	0x200905c0
 801e3a0:	2000bd3a 	.word	0x2000bd3a
 801e3a4:	200905d1 	.word	0x200905d1
 801e3a8:	20005728 	.word	0x20005728
 801e3ac:	2000e53c 	.word	0x2000e53c

0801e3b0 <EXTI3_IRQHandler>:
{	
 801e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801e3b2:	4b29      	ldr	r3, [pc, #164]	; (801e458 <EXTI3_IRQHandler+0xa8>)
	Touch_x = 0, Touch_y = 0;
 801e3b4:	4e29      	ldr	r6, [pc, #164]	; (801e45c <EXTI3_IRQHandler+0xac>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801e3b6:	681a      	ldr	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801e3b8:	4c29      	ldr	r4, [pc, #164]	; (801e460 <EXTI3_IRQHandler+0xb0>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801e3ba:	3201      	adds	r2, #1
 801e3bc:	601a      	str	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801e3be:	2200      	movs	r2, #0
 801e3c0:	8032      	strh	r2, [r6, #0]
 801e3c2:	8022      	strh	r2, [r4, #0]
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801e3c4:	4a27      	ldr	r2, [pc, #156]	; (801e464 <EXTI3_IRQHandler+0xb4>)
 801e3c6:	7817      	ldrb	r7, [r2, #0]
 801e3c8:	461d      	mov	r5, r3
 801e3ca:	4611      	mov	r1, r2
 801e3cc:	b957      	cbnz	r7, 801e3e4 <EXTI3_IRQHandler+0x34>
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	2b31      	cmp	r3, #49	; 0x31
 801e3d2:	d907      	bls.n	801e3e4 <EXTI3_IRQHandler+0x34>
			TFT_ON_OFF = 0x01;
 801e3d4:	2301      	movs	r3, #1
 801e3d6:	7013      	strb	r3, [r2, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801e3d8:	2104      	movs	r1, #4
 801e3da:	4823      	ldr	r0, [pc, #140]	; (801e468 <EXTI3_IRQHandler+0xb8>)
}
 801e3dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801e3e0:	f7e7 bffa 	b.w	80063d8 <HAL_TIM_PWM_Start>
		if(TFT_ON_OFF){
 801e3e4:	780b      	ldrb	r3, [r1, #0]
 801e3e6:	b36b      	cbz	r3, 801e444 <EXTI3_IRQHandler+0x94>
			TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801e3e8:	4a1d      	ldr	r2, [pc, #116]	; (801e460 <EXTI3_IRQHandler+0xb0>)
 801e3ea:	491c      	ldr	r1, [pc, #112]	; (801e45c <EXTI3_IRQHandler+0xac>)
 801e3ec:	2070      	movs	r0, #112	; 0x70
 801e3ee:	f7fe f8d1 	bl	801c594 <TS_Get_XY1>
			if((Mode_EL == 0x00) && ((Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) )))
 801e3f2:	4b1e      	ldr	r3, [pc, #120]	; (801e46c <EXTI3_IRQHandler+0xbc>)
 801e3f4:	781a      	ldrb	r2, [r3, #0]
 801e3f6:	bb0a      	cbnz	r2, 801e43c <EXTI3_IRQHandler+0x8c>
 801e3f8:	8833      	ldrh	r3, [r6, #0]
 801e3fa:	3b6d      	subs	r3, #109	; 0x6d
 801e3fc:	b29b      	uxth	r3, r3
 801e3fe:	2b36      	cmp	r3, #54	; 0x36
 801e400:	d81c      	bhi.n	801e43c <EXTI3_IRQHandler+0x8c>
 801e402:	8823      	ldrh	r3, [r4, #0]
 801e404:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801e408:	b29b      	uxth	r3, r3
 801e40a:	2b36      	cmp	r3, #54	; 0x36
 801e40c:	d816      	bhi.n	801e43c <EXTI3_IRQHandler+0x8c>
				pause_button++;
 801e40e:	4c18      	ldr	r4, [pc, #96]	; (801e470 <EXTI3_IRQHandler+0xc0>)
 801e410:	7823      	ldrb	r3, [r4, #0]
 801e412:	3301      	adds	r3, #1
 801e414:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801e416:	2b03      	cmp	r3, #3
				pause_button++;
 801e418:	7023      	strb	r3, [r4, #0]
				if(pause_button > 3)
 801e41a:	d90f      	bls.n	801e43c <EXTI3_IRQHandler+0x8c>
					LaserOnOff = !LaserOnOff;
 801e41c:	4915      	ldr	r1, [pc, #84]	; (801e474 <EXTI3_IRQHandler+0xc4>)
 801e41e:	780b      	ldrb	r3, [r1, #0]
 801e420:	fab3 f383 	clz	r3, r3
 801e424:	095b      	lsrs	r3, r3, #5
 801e426:	700b      	strb	r3, [r1, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801e428:	780b      	ldrb	r3, [r1, #0]
 801e42a:	b19b      	cbz	r3, 801e454 <EXTI3_IRQHandler+0xa4>
 801e42c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e430:	4811      	ldr	r0, [pc, #68]	; (801e478 <EXTI3_IRQHandler+0xc8>)
 801e432:	f7e4 f961 	bl	80026f8 <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801e436:	2300      	movs	r3, #0
 801e438:	602b      	str	r3, [r5, #0]
					pause_button = 0;
 801e43a:	7023      	strb	r3, [r4, #0]
				GUI_Touch_Processing();
 801e43c:	f7f2 ff70 	bl	8011320 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801e440:	2300      	movs	r3, #0
 801e442:	602b      	str	r3, [r5, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801e444:	2009      	movs	r0, #9
 801e446:	f7e3 fb0f 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801e44a:	2008      	movs	r0, #8
}
 801e44c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801e450:	f7e4 b95c 	b.w	800270c <HAL_GPIO_EXTI_IRQHandler>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801e454:	2201      	movs	r2, #1
 801e456:	e7e9      	b.n	801e42c <EXTI3_IRQHandler+0x7c>
 801e458:	2008f518 	.word	0x2008f518
 801e45c:	20054942 	.word	0x20054942
 801e460:	20054944 	.word	0x20054944
 801e464:	20000ebe 	.word	0x20000ebe
 801e468:	200957bc 	.word	0x200957bc
 801e46c:	20000ebc 	.word	0x20000ebc
 801e470:	200905c7 	.word	0x200905c7
 801e474:	2000bd38 	.word	0x2000bd38
 801e478:	48000800 	.word	0x48000800

0801e47c <USART1_IRQHandler>:
{
 801e47c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t str[12]={0};
 801e47e:	2300      	movs	r3, #0
 801e480:	9301      	str	r3, [sp, #4]
 801e482:	9302      	str	r3, [sp, #8]
 801e484:	9303      	str	r3, [sp, #12]
		HAL_UART_Receive(&huart1,&str,12,10);
 801e486:	220c      	movs	r2, #12
 801e488:	230a      	movs	r3, #10
 801e48a:	a901      	add	r1, sp, #4
 801e48c:	480d      	ldr	r0, [pc, #52]	; (801e4c4 <USART1_IRQHandler+0x48>)
 801e48e:	f7e8 fe60 	bl	8007152 <HAL_UART_Receive>
	if (str[0] == 0x0A)
 801e492:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801e496:	2b0a      	cmp	r3, #10
 801e498:	d10d      	bne.n	801e4b6 <USART1_IRQHandler+0x3a>
		if (str[1] == 0xAB)
 801e49a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801e49e:	2bab      	cmp	r3, #171	; 0xab
 801e4a0:	d109      	bne.n	801e4b6 <USART1_IRQHandler+0x3a>
			if (str[2] == 0x12)
 801e4a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801e4a6:	2b12      	cmp	r3, #18
 801e4a8:	d105      	bne.n	801e4b6 <USART1_IRQHandler+0x3a>
				if (str[3] == 0x02)
 801e4aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e4ae:	2b02      	cmp	r3, #2
 801e4b0:	d101      	bne.n	801e4b6 <USART1_IRQHandler+0x3a>
					string_parse_no_check();
 801e4b2:	f7ff fced 	bl	801de90 <string_parse_no_check>
	HAL_UART_IRQHandler(&huart1);
 801e4b6:	4803      	ldr	r0, [pc, #12]	; (801e4c4 <USART1_IRQHandler+0x48>)
 801e4b8:	f7e8 faa6 	bl	8006a08 <HAL_UART_IRQHandler>
}
 801e4bc:	b005      	add	sp, #20
 801e4be:	f85d fb04 	ldr.w	pc, [sp], #4
 801e4c2:	bf00      	nop
 801e4c4:	20095abc 	.word	0x20095abc

0801e4c8 <SystemClock_Config>:
{
 801e4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801e4ca:	2000      	movs	r0, #0
{
 801e4cc:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801e4ce:	f7e5 fc19 	bl	8003d04 <HAL_PWREx_ControlVoltageScaling>
 801e4d2:	b100      	cbz	r0, 801e4d6 <SystemClock_Config+0xe>
 801e4d4:	e7fe      	b.n	801e4d4 <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801e4d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e4da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801e4dc:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e4de:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801e4e0:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e4e2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801e4e6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801e4e8:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801e4ea:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801e4ec:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801e4ee:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e4f0:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e4f2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801e4f4:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801e4f6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801e4f8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801e4fa:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801e4fc:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801e4fe:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801e500:	f7e5 fcf6 	bl	8003ef0 <HAL_RCC_OscConfig>
 801e504:	b100      	cbz	r0, 801e508 <SystemClock_Config+0x40>
 801e506:	e7fe      	b.n	801e506 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801e508:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801e50a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801e50c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801e50e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801e510:	4639      	mov	r1, r7
 801e512:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801e514:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801e516:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801e518:	f7e5 ff3c 	bl	8004394 <HAL_RCC_ClockConfig>
 801e51c:	b100      	cbz	r0, 801e520 <SystemClock_Config+0x58>
 801e51e:	e7fe      	b.n	801e51e <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801e520:	4b18      	ldr	r3, [pc, #96]	; (801e584 <SystemClock_Config+0xbc>)
 801e522:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801e524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e528:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801e52a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801e52e:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801e530:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801e534:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801e536:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801e53a:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801e53c:	2309      	movs	r3, #9
 801e53e:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801e540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801e544:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801e546:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801e548:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801e54a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801e54c:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801e54e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801e552:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801e554:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801e556:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801e558:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801e55a:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801e55c:	9423      	str	r4, [sp, #140]	; 0x8c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801e55e:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801e560:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801e562:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801e564:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801e566:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801e568:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801e56a:	f7e6 f947 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 801e56e:	4602      	mov	r2, r0
 801e570:	b100      	cbz	r0, 801e574 <SystemClock_Config+0xac>
 801e572:	e7fe      	b.n	801e572 <SystemClock_Config+0xaa>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801e574:	4601      	mov	r1, r0
 801e576:	f04f 30ff 	mov.w	r0, #4294967295
 801e57a:	f7e3 fa11 	bl	80019a0 <HAL_NVIC_SetPriority>
}
 801e57e:	b03f      	add	sp, #252	; 0xfc
 801e580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e582:	bf00      	nop
 801e584:	00486060 	.word	0x00486060

0801e588 <main>:
{
 801e588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e58c:	ed2d 8b02 	vpush	{d8}
 801e590:	b0a9      	sub	sp, #164	; 0xa4
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801e592:	4db2      	ldr	r5, [pc, #712]	; (801e85c <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e594:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801e878 <main+0x2f0>
  HAL_Init();
 801e598:	f7e2 fd2a 	bl	8000ff0 <HAL_Init>
	HAL_Delay(1);
 801e59c:	2001      	movs	r0, #1
 801e59e:	f7e2 fd45 	bl	800102c <HAL_Delay>
  SystemClock_Config();
 801e5a2:	f7ff ff91 	bl	801e4c8 <SystemClock_Config>
	HAL_Delay(1);
 801e5a6:	2001      	movs	r0, #1
 801e5a8:	f7e2 fd40 	bl	800102c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801e5ac:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5ae:	f043 0310 	orr.w	r3, r3, #16
 801e5b2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5b4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5b6:	f003 0310 	and.w	r3, r3, #16
 801e5ba:	9309      	str	r3, [sp, #36]	; 0x24
 801e5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801e5be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5c0:	f043 0320 	orr.w	r3, r3, #32
 801e5c4:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5c6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5c8:	f003 0320 	and.w	r3, r3, #32
 801e5cc:	930a      	str	r3, [sp, #40]	; 0x28
 801e5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801e5d0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e5d6:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5d8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e5de:	930b      	str	r3, [sp, #44]	; 0x2c
 801e5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801e5e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5e4:	f043 0301 	orr.w	r3, r3, #1
 801e5e8:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5ea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5ec:	f003 0301 	and.w	r3, r3, #1
 801e5f0:	930c      	str	r3, [sp, #48]	; 0x30
 801e5f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801e5f4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5f6:	f043 0304 	orr.w	r3, r3, #4
 801e5fa:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5fc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e5fe:	f003 0304 	and.w	r3, r3, #4
 801e602:	930d      	str	r3, [sp, #52]	; 0x34
 801e604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801e606:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e608:	f043 0302 	orr.w	r3, r3, #2
 801e60c:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e60e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e610:	f003 0302 	and.w	r3, r3, #2
 801e614:	930e      	str	r3, [sp, #56]	; 0x38
 801e616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801e618:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e61a:	f043 0308 	orr.w	r3, r3, #8
 801e61e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e620:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e622:	f003 0308 	and.w	r3, r3, #8
 801e626:	930f      	str	r3, [sp, #60]	; 0x3c
 801e628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801e62a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e630:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e632:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e638:	9310      	str	r3, [sp, #64]	; 0x40
 801e63a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	  HAL_PWREx_EnableVddIO2();
 801e63c:	f7e5 fbc4 	bl	8003dc8 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801e640:	2200      	movs	r2, #0
 801e642:	f242 0110 	movw	r1, #8208	; 0x2010
 801e646:	4886      	ldr	r0, [pc, #536]	; (801e860 <main+0x2d8>)
 801e648:	f7e4 f856 	bl	80026f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801e64c:	2200      	movs	r2, #0
 801e64e:	2120      	movs	r1, #32
 801e650:	4884      	ldr	r0, [pc, #528]	; (801e864 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e652:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e654:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801e656:	f7e4 f84f 	bl	80026f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801e65a:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e65c:	a91b      	add	r1, sp, #108	; 0x6c
 801e65e:	4881      	ldr	r0, [pc, #516]	; (801e864 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801e660:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e662:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e664:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e666:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e668:	f7e3 fed0 	bl	800240c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 801e66c:	4622      	mov	r2, r4
 801e66e:	4639      	mov	r1, r7
 801e670:	487c      	ldr	r0, [pc, #496]	; (801e864 <main+0x2dc>)
 801e672:	f7e4 f841 	bl	80026f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801e676:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e67a:	a91b      	add	r1, sp, #108	; 0x6c
 801e67c:	4878      	ldr	r0, [pc, #480]	; (801e860 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801e67e:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e680:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e682:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e684:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e686:	f7e3 fec1 	bl	800240c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801e68a:	4632      	mov	r2, r6
 801e68c:	2110      	movs	r1, #16
 801e68e:	4874      	ldr	r0, [pc, #464]	; (801e860 <main+0x2d8>)
 801e690:	f7e4 f832 	bl	80026f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801e694:	4622      	mov	r2, r4
 801e696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e69a:	4871      	ldr	r0, [pc, #452]	; (801e860 <main+0x2d8>)
 801e69c:	f7e4 f82c 	bl	80026f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801e6a0:	2380      	movs	r3, #128	; 0x80
 801e6a2:	931b      	str	r3, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e6a4:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801e6a6:	4b70      	ldr	r3, [pc, #448]	; (801e868 <main+0x2e0>)
 801e6a8:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e6aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e6ae:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e6b0:	f7e3 feac 	bl	800240c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801e6b4:	4622      	mov	r2, r4
 801e6b6:	2104      	movs	r1, #4
 801e6b8:	486a      	ldr	r0, [pc, #424]	; (801e864 <main+0x2dc>)
 801e6ba:	f7e4 f81d 	bl	80026f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e6be:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e6c2:	a91b      	add	r1, sp, #108	; 0x6c
 801e6c4:	4867      	ldr	r0, [pc, #412]	; (801e864 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e6c6:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e6ca:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e6cc:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e6ce:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e6d0:	f7e3 fe9c 	bl	800240c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801e6d4:	4632      	mov	r2, r6
 801e6d6:	4651      	mov	r1, sl
 801e6d8:	4862      	ldr	r0, [pc, #392]	; (801e864 <main+0x2dc>)
 801e6da:	f7e4 f80d 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801e6de:	4622      	mov	r2, r4
 801e6e0:	2102      	movs	r1, #2
 801e6e2:	4860      	ldr	r0, [pc, #384]	; (801e864 <main+0x2dc>)
 801e6e4:	f7e4 f808 	bl	80026f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801e6e8:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e6ea:	a91b      	add	r1, sp, #108	; 0x6c
 801e6ec:	485d      	ldr	r0, [pc, #372]	; (801e864 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801e6ee:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e6f0:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e6f2:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e6f4:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e6f6:	f7e3 fe89 	bl	800240c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801e6fa:	4632      	mov	r2, r6
 801e6fc:	4639      	mov	r1, r7
 801e6fe:	4859      	ldr	r0, [pc, #356]	; (801e864 <main+0x2dc>)
 801e700:	f7e3 fffa 	bl	80026f8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801e704:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e708:	a91b      	add	r1, sp, #108	; 0x6c
 801e70a:	4856      	ldr	r0, [pc, #344]	; (801e864 <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801e70c:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e710:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e712:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e714:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e716:	f7e3 fe79 	bl	800240c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801e71a:	4632      	mov	r2, r6
 801e71c:	4641      	mov	r1, r8
 801e71e:	4851      	ldr	r0, [pc, #324]	; (801e864 <main+0x2dc>)
 801e720:	f7e3 ffea 	bl	80026f8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801e724:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e728:	a91b      	add	r1, sp, #108	; 0x6c
 801e72a:	484e      	ldr	r0, [pc, #312]	; (801e864 <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e72c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801e730:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e734:	941d      	str	r4, [sp, #116]	; 0x74
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e736:	f7e3 fe69 	bl	800240c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801e73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e73e:	a91b      	add	r1, sp, #108	; 0x6c
 801e740:	4847      	ldr	r0, [pc, #284]	; (801e860 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801e742:	931b      	str	r3, [sp, #108]	; 0x6c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e744:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e748:	941d      	str	r4, [sp, #116]	; 0x74
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e74a:	f7e3 fe5f 	bl	800240c <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 4); //SDO IRQ
 801e74e:	4652      	mov	r2, sl
 801e750:	4639      	mov	r1, r7
 801e752:	2017      	movs	r0, #23
 801e754:	f7e3 f924 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 4, 2); //Touchscreen IRQ
 801e758:	463a      	mov	r2, r7
 801e75a:	4651      	mov	r1, sl
 801e75c:	2009      	movs	r0, #9
 801e75e:	f7e3 f91f 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801e762:	2017      	movs	r0, #23
 801e764:	f7e3 f950 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801e768:	2009      	movs	r0, #9
 801e76a:	f7e3 f94d 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e76e:	4630      	mov	r0, r6
 801e770:	f7e2 fc5c 	bl	800102c <HAL_Delay>
	DWT_Init();
 801e774:	f7fe fe08 	bl	801d388 <DWT_Init>
	HAL_Delay(1);
 801e778:	4630      	mov	r0, r6
 801e77a:	f7e2 fc57 	bl	800102c <HAL_Delay>
	MX_TIM2_Init();
 801e77e:	f7fe fdcf 	bl	801d320 <MX_TIM2_Init>
	HAL_Delay(1);
 801e782:	4630      	mov	r0, r6
 801e784:	f7e2 fc52 	bl	800102c <HAL_Delay>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 801e788:	221c      	movs	r2, #28
 801e78a:	4621      	mov	r1, r4
 801e78c:	a814      	add	r0, sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e78e:	9411      	str	r4, [sp, #68]	; 0x44
 801e790:	9412      	str	r4, [sp, #72]	; 0x48
 801e792:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 801e794:	f002 f8b5 	bl	8020902 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801e798:	222c      	movs	r2, #44	; 0x2c
 801e79a:	4621      	mov	r1, r4
 801e79c:	a81b      	add	r0, sp, #108	; 0x6c
 801e79e:	f002 f8b0 	bl	8020902 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801e7a2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801e87c <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 801e7a6:	4b31      	ldr	r3, [pc, #196]	; (801e86c <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e7a8:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 801e7ac:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 801e7b0:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801e7b4:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 801e7b6:	2364      	movs	r3, #100	; 0x64
 801e7b8:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801e7bc:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 801e7c0:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e7c4:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801e7c8:	f7e7 fc2e 	bl	8006028 <HAL_TIM_PWM_Init>
 801e7cc:	b100      	cbz	r0, 801e7d0 <main+0x248>
 801e7ce:	e7fe      	b.n	801e7ce <main+0x246>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e7d0:	9011      	str	r0, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e7d2:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801e7d4:	a911      	add	r1, sp, #68	; 0x44
 801e7d6:	4648      	mov	r0, r9
 801e7d8:	f7e7 fe72 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 801e7dc:	b100      	cbz	r0, 801e7e0 <main+0x258>
 801e7de:	e7fe      	b.n	801e7de <main+0x256>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801e7e0:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 801e7e2:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801e7e4:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801e7e6:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801e7e8:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801e7ea:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801e7ec:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801e7ee:	4652      	mov	r2, sl
 801e7f0:	a914      	add	r1, sp, #80	; 0x50
 801e7f2:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801e7f4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801e7f6:	f7e7 fcaf 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 801e7fa:	b100      	cbz	r0, 801e7fe <main+0x276>
 801e7fc:	e7fe      	b.n	801e7fc <main+0x274>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801e7fe:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801e800:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801e802:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 801e804:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801e806:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801e808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 801e80c:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801e80e:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801e810:	a91b      	add	r1, sp, #108	; 0x6c
 801e812:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801e814:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801e816:	f7e7 fe7f 	bl	8006518 <HAL_TIMEx_ConfigBreakDeadTime>
 801e81a:	4682      	mov	sl, r0
 801e81c:	b100      	cbz	r0, 801e820 <main+0x298>
 801e81e:	e7fe      	b.n	801e81e <main+0x296>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 801e820:	4648      	mov	r0, r9
 801e822:	f001 fc41 	bl	80200a8 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801e826:	4630      	mov	r0, r6
 801e828:	f7e2 fc00 	bl	800102c <HAL_Delay>
  htim5.Instance = TIM5;
 801e82c:	4c10      	ldr	r4, [pc, #64]	; (801e870 <main+0x2e8>)
 801e82e:	4b11      	ldr	r3, [pc, #68]	; (801e874 <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801e830:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e834:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801e838:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801e83a:	231e      	movs	r3, #30
 801e83c:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e83e:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801e842:	f7e7 fbd7 	bl	8005ff4 <HAL_TIM_OC_Init>
 801e846:	b100      	cbz	r0, 801e84a <main+0x2c2>
 801e848:	e7fe      	b.n	801e848 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e84a:	9014      	str	r0, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e84c:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801e84e:	a914      	add	r1, sp, #80	; 0x50
 801e850:	4620      	mov	r0, r4
 801e852:	f7e7 fe35 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 801e856:	4602      	mov	r2, r0
 801e858:	b190      	cbz	r0, 801e880 <main+0x2f8>
 801e85a:	e7fe      	b.n	801e85a <main+0x2d2>
 801e85c:	40021000 	.word	0x40021000
 801e860:	48000800 	.word	0x48000800
 801e864:	48001400 	.word	0x48001400
 801e868:	10210000 	.word	0x10210000
 801e86c:	40014000 	.word	0x40014000
 801e870:	200958a4 	.word	0x200958a4
 801e874:	40000c00 	.word	0x40000c00
 801e878:	10110000 	.word	0x10110000
 801e87c:	200957bc 	.word	0x200957bc
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801e880:	2330      	movs	r3, #48	; 0x30
 801e882:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801e884:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.Pulse = 5;
 801e886:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801e888:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801e88a:	a91b      	add	r1, sp, #108	; 0x6c
 801e88c:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801e88e:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801e890:	f7e7 fc2a 	bl	80060e8 <HAL_TIM_OC_ConfigChannel>
 801e894:	4681      	mov	r9, r0
 801e896:	b100      	cbz	r0, 801e89a <main+0x312>
 801e898:	e7fe      	b.n	801e898 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 801e89a:	4620      	mov	r0, r4
 801e89c:	f001 fc04 	bl	80200a8 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801e8a0:	4630      	mov	r0, r6
 801e8a2:	f7e2 fbc3 	bl	800102c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801e8a6:	f001 fd9b 	bl	80203e0 <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801e8aa:	4630      	mov	r0, r6
 801e8ac:	f7e2 fbbe 	bl	800102c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801e8b0:	4c90      	ldr	r4, [pc, #576]	; (801eaf4 <main+0x56c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801e8b2:	4b91      	ldr	r3, [pc, #580]	; (801eaf8 <main+0x570>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801e8b4:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801e8b8:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 801e8bc:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801e8c0:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801e8c2:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801e8c4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801e8c8:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801e8ca:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801e8ce:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801e8d0:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801e8d4:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801e8d6:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801e8d8:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 801e8da:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801e8de:	f7e3 fa63 	bl	8001da8 <HAL_DMA2D_Init>
 801e8e2:	b100      	cbz	r0, 801e8e6 <main+0x35e>
 801e8e4:	e7fe      	b.n	801e8e4 <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801e8e6:	4631      	mov	r1, r6
 801e8e8:	4620      	mov	r0, r4
 801e8ea:	f7e3 fb43 	bl	8001f74 <HAL_DMA2D_ConfigLayer>
 801e8ee:	4681      	mov	r9, r0
 801e8f0:	b100      	cbz	r0, 801e8f4 <main+0x36c>
 801e8f2:	e7fe      	b.n	801e8f2 <main+0x36a>
	HAL_Delay(1);
 801e8f4:	4630      	mov	r0, r6
 801e8f6:	f7e2 fb99 	bl	800102c <HAL_Delay>
  hspi1.Instance = SPI1;
 801e8fa:	4c80      	ldr	r4, [pc, #512]	; (801eafc <main+0x574>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801e8fc:	4b80      	ldr	r3, [pc, #512]	; (801eb00 <main+0x578>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801e8fe:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801e902:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801e906:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801e90a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801e90e:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801e910:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e914:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801e916:	2310      	movs	r3, #16
 801e918:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801e91a:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 801e91c:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801e91e:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801e920:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801e922:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801e926:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e92a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 801e92e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801e930:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801e934:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801e938:	f7e6 ff6a 	bl	8005810 <HAL_SPI_Init>
 801e93c:	b100      	cbz	r0, 801e940 <main+0x3b8>
 801e93e:	e7fe      	b.n	801e93e <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 801e940:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 801e942:	4c70      	ldr	r4, [pc, #448]	; (801eb04 <main+0x57c>)
	__HAL_SPI_ENABLE(&hspi1);
 801e944:	6813      	ldr	r3, [r2, #0]
 801e946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e94a:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801e94c:	2001      	movs	r0, #1
 801e94e:	f7e2 fb6d 	bl	800102c <HAL_Delay>
  hi2c1.Instance = I2C1;
 801e952:	4b6d      	ldr	r3, [pc, #436]	; (801eb08 <main+0x580>)
 801e954:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 801e956:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 801e95a:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 801e95e:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 801e962:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 801e964:	2370      	movs	r3, #112	; 0x70
 801e966:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801e968:	2601      	movs	r6, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801e96a:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801e96c:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801e96e:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801e970:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801e972:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801e974:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801e976:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801e978:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801e97a:	f7e4 f80e 	bl	800299a <HAL_I2C_Init>
 801e97e:	4601      	mov	r1, r0
 801e980:	b100      	cbz	r0, 801e984 <main+0x3fc>
 801e982:	e7fe      	b.n	801e982 <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801e984:	4620      	mov	r0, r4
 801e986:	f7e4 fb71 	bl	800306c <HAL_I2CEx_ConfigAnalogFilter>
 801e98a:	4601      	mov	r1, r0
 801e98c:	b100      	cbz	r0, 801e990 <main+0x408>
 801e98e:	e7fe      	b.n	801e98e <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801e990:	4620      	mov	r0, r4
 801e992:	f7e4 fb91 	bl	80030b8 <HAL_I2CEx_ConfigDigitalFilter>
 801e996:	4607      	mov	r7, r0
 801e998:	b100      	cbz	r0, 801e99c <main+0x414>
 801e99a:	e7fe      	b.n	801e99a <main+0x412>
	HAL_Delay(1);
 801e99c:	4630      	mov	r0, r6
 801e99e:	f7e2 fb45 	bl	800102c <HAL_Delay>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801e9a2:	4c5a      	ldr	r4, [pc, #360]	; (801eb0c <main+0x584>)
  huart1.Init.BaudRate = 115200;
 801e9a4:	4b5a      	ldr	r3, [pc, #360]	; (801eb10 <main+0x588>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801e9a6:	60a7      	str	r7, [r4, #8]
  huart1.Init.BaudRate = 115200;
 801e9a8:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 801e9ac:	e884 4008 	stmia.w	r4, {r3, lr}
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801e9b0:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 801e9b2:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 801e9b4:	60e7      	str	r7, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801e9b6:	6127      	str	r7, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801e9b8:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801e9ba:	61a7      	str	r7, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801e9bc:	61e7      	str	r7, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801e9be:	6227      	str	r7, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801e9c0:	6267      	str	r7, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801e9c2:	62a7      	str	r7, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801e9c4:	f7e8 fc68 	bl	8007298 <HAL_UART_Init>
 801e9c8:	4601      	mov	r1, r0
 801e9ca:	b100      	cbz	r0, 801e9ce <main+0x446>
 801e9cc:	e7fe      	b.n	801e9cc <main+0x444>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801e9ce:	4620      	mov	r0, r4
 801e9d0:	f7e8 fcf6 	bl	80073c0 <HAL_UARTEx_SetTxFifoThreshold>
 801e9d4:	4601      	mov	r1, r0
 801e9d6:	b100      	cbz	r0, 801e9da <main+0x452>
 801e9d8:	e7fe      	b.n	801e9d8 <main+0x450>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f7e8 fd14 	bl	8007408 <HAL_UARTEx_SetRxFifoThreshold>
 801e9e0:	b100      	cbz	r0, 801e9e4 <main+0x45c>
 801e9e2:	e7fe      	b.n	801e9e2 <main+0x45a>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 801e9e4:	4620      	mov	r0, r4
 801e9e6:	f7e8 fcd0 	bl	800738a <HAL_UARTEx_DisableFifoMode>
 801e9ea:	4607      	mov	r7, r0
 801e9ec:	b100      	cbz	r0, 801e9f0 <main+0x468>
 801e9ee:	e7fe      	b.n	801e9ee <main+0x466>
  {
    Error_Handler();
  }

  HAL_NVIC_SetPriority(USART1_IRQn, 1, 3);			// ������ ���������� 1, 3
 801e9f0:	2203      	movs	r2, #3
 801e9f2:	4631      	mov	r1, r6
 801e9f4:	2025      	movs	r0, #37	; 0x25
 801e9f6:	f7e2 ffd3 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801e9fa:	4630      	mov	r0, r6
 801e9fc:	f7e2 fb16 	bl	800102c <HAL_Delay>
	HAL_Delay(1);
 801ea00:	4630      	mov	r0, r6
 801ea02:	f7e2 fb13 	bl	800102c <HAL_Delay>
  hltdc.Instance = LTDC;
 801ea06:	4c43      	ldr	r4, [pc, #268]	; (801eb14 <main+0x58c>)
 801ea08:	4b43      	ldr	r3, [pc, #268]	; (801eb18 <main+0x590>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801ea0a:	60a7      	str	r7, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801ea0c:	e884 0088 	stmia.w	r4, {r3, r7}
  hltdc.Init.HorizontalSync = 5;
 801ea10:	2305      	movs	r3, #5
 801ea12:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 801ea14:	231e      	movs	r3, #30
 801ea16:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 801ea18:	2328      	movs	r3, #40	; 0x28
 801ea1a:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 801ea1c:	2308      	movs	r3, #8
 801ea1e:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 801ea20:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ea24:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 801ea26:	f44f 738c 	mov.w	r3, #280	; 0x118
 801ea2a:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 801ea2c:	f240 230d 	movw	r3, #525	; 0x20d
 801ea30:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801ea32:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 801ea34:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801ea38:	60e7      	str	r7, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801ea3a:	6127      	str	r7, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 801ea3c:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801ea3e:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801ea42:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801ea46:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801ea4a:	f7e4 fbe1 	bl	8003210 <HAL_LTDC_Init>
 801ea4e:	4602      	mov	r2, r0
 801ea50:	b100      	cbz	r0, 801ea54 <main+0x4cc>
 801ea52:	e7fe      	b.n	801ea52 <main+0x4ca>
  pLayerCfg.WindowY1 = 272;
 801ea54:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 801ea58:	901b      	str	r0, [sp, #108]	; 0x6c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801ea5a:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 801ea5c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801ea60:	f44f 6780 	mov.w	r7, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 801ea64:	901c      	str	r0, [sp, #112]	; 0x70
  pLayerCfg.WindowY1 = 272;
 801ea66:	911e      	str	r1, [sp, #120]	; 0x78
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801ea68:	931f      	str	r3, [sp, #124]	; 0x7c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801ea6a:	9722      	str	r7, [sp, #136]	; 0x88
  pLayerCfg.Alpha = 255;
 801ea6c:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.ImageWidth = 480;
 801ea6e:	9025      	str	r0, [sp, #148]	; 0x94
  pLayerCfg.ImageHeight = 272;
 801ea70:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801ea72:	4620      	mov	r0, r4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801ea74:	2707      	movs	r7, #7
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801ea76:	a91b      	add	r1, sp, #108	; 0x6c
  pLayerCfg.WindowY0 = 0;
 801ea78:	921d      	str	r2, [sp, #116]	; 0x74
  pLayerCfg.Alpha = 255;
 801ea7a:	9320      	str	r3, [sp, #128]	; 0x80
  pLayerCfg.Alpha0 = 0;
 801ea7c:	9221      	str	r2, [sp, #132]	; 0x84
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801ea7e:	9723      	str	r7, [sp, #140]	; 0x8c
  pLayerCfg.FBStartAdress = 0;
 801ea80:	9224      	str	r2, [sp, #144]	; 0x90
  pLayerCfg.Backcolor.Blue = 255;
 801ea82:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Green = 255;
 801ea86:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
  pLayerCfg.Backcolor.Red = 255;
 801ea8a:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801ea8e:	f7e4 fc2b 	bl	80032e8 <HAL_LTDC_ConfigLayer>
 801ea92:	4604      	mov	r4, r0
 801ea94:	b100      	cbz	r0, 801ea98 <main+0x510>
 801ea96:	e7fe      	b.n	801ea96 <main+0x50e>
	HAL_Delay(1);
 801ea98:	4630      	mov	r0, r6
 801ea9a:	f7e2 fac7 	bl	800102c <HAL_Delay>
  hadc1.Instance = ADC1;
 801ea9e:	481f      	ldr	r0, [pc, #124]	; (801eb1c <main+0x594>)
 801eaa0:	4b1f      	ldr	r3, [pc, #124]	; (801eb20 <main+0x598>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801eaa2:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801eaa4:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801eaa8:	2304      	movs	r3, #4
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801eaaa:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801eaac:	6104      	str	r4, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801eaae:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801eab0:	6184      	str	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801eab2:	61c6      	str	r6, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 801eab4:	6206      	str	r6, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801eab6:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 801eab8:	6286      	str	r6, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801eaba:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801eabc:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801eabe:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801eac0:	6384      	str	r4, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 801eac2:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801eac4:	f7e2 fae8 	bl	8001098 <HAL_ADC_Init>
 801eac8:	b100      	cbz	r0, 801eacc <main+0x544>
 801eaca:	e7fe      	b.n	801eaca <main+0x542>
  sConfig.Channel = ADC_CHANNEL_3;
 801eacc:	4b15      	ldr	r3, [pc, #84]	; (801eb24 <main+0x59c>)
 801eace:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801ead0:	2306      	movs	r3, #6
 801ead2:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 801ead4:	2307      	movs	r3, #7
 801ead6:	931d      	str	r3, [sp, #116]	; 0x74
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801ead8:	237f      	movs	r3, #127	; 0x7f
 801eada:	931e      	str	r3, [sp, #120]	; 0x78
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801eadc:	2604      	movs	r6, #4
  sConfig.Offset = 0;
 801eade:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801eae0:	a91b      	add	r1, sp, #108	; 0x6c
 801eae2:	480e      	ldr	r0, [pc, #56]	; (801eb1c <main+0x594>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801eae4:	961f      	str	r6, [sp, #124]	; 0x7c
  sConfig.Offset = 0;
 801eae6:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801eae8:	f7e2 fbf6 	bl	80012d8 <HAL_ADC_ConfigChannel>
 801eaec:	4604      	mov	r4, r0
 801eaee:	b1d8      	cbz	r0, 801eb28 <main+0x5a0>
 801eaf0:	e7fe      	b.n	801eaf0 <main+0x568>
 801eaf2:	bf00      	nop
 801eaf4:	20095b98 	.word	0x20095b98
 801eaf8:	4002b000 	.word	0x4002b000
 801eafc:	20095bf8 	.word	0x20095bf8
 801eb00:	40013000 	.word	0x40013000
 801eb04:	20095770 	.word	0x20095770
 801eb08:	40005400 	.word	0x40005400
 801eb0c:	20095abc 	.word	0x20095abc
 801eb10:	40013800 	.word	0x40013800
 801eb14:	20095908 	.word	0x20095908
 801eb18:	40016800 	.word	0x40016800
 801eb1c:	20095a38 	.word	0x20095a38
 801eb20:	50040000 	.word	0x50040000
 801eb24:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801eb28:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801eb2a:	f043 0304 	orr.w	r3, r3, #4
 801eb2e:	64ab      	str	r3, [r5, #72]	; 0x48
 801eb30:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801eb32:	f003 0304 	and.w	r3, r3, #4
 801eb36:	9311      	str	r3, [sp, #68]	; 0x44
 801eb38:	9b11      	ldr	r3, [sp, #68]	; 0x44
  __HAL_RCC_DMA1_CLK_ENABLE();
 801eb3a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801eb3c:	f043 0301 	orr.w	r3, r3, #1
 801eb40:	64ab      	str	r3, [r5, #72]	; 0x48
 801eb42:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 801eb44:	4d32      	ldr	r5, [pc, #200]	; (801ec10 <main+0x688>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 801eb46:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801eb4a:	4602      	mov	r2, r0
 801eb4c:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 801eb4e:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801eb50:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 801eb52:	9b14      	ldr	r3, [sp, #80]	; 0x50
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801eb54:	f7e2 ff24 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801eb58:	200b      	movs	r0, #11
 801eb5a:	f7e2 ff55 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801eb5e:	2001      	movs	r0, #1
 801eb60:	f7e2 fa64 	bl	800102c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 801eb64:	4621      	mov	r1, r4
 801eb66:	482b      	ldr	r0, [pc, #172]	; (801ec14 <main+0x68c>)
 801eb68:	f7e7 fc6a 	bl	8006440 <HAL_TIM_OC_Start>
	HAL_Delay(1);
 801eb6c:	2001      	movs	r0, #1
 801eb6e:	f7e2 fa5d 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 801eb72:	2201      	movs	r2, #1
 801eb74:	4621      	mov	r1, r4
 801eb76:	201c      	movs	r0, #28
 801eb78:	f7e2 ff12 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801eb7c:	2002      	movs	r0, #2
 801eb7e:	f7e2 fa55 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801eb82:	201c      	movs	r0, #28
 801eb84:	f7e2 ff40 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801eb88:	2001      	movs	r0, #1
 801eb8a:	f7e2 fa4f 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 801eb8e:	4822      	ldr	r0, [pc, #136]	; (801ec18 <main+0x690>)
 801eb90:	f7e7 f8e2 	bl	8005d58 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 801eb94:	2001      	movs	r0, #1
 801eb96:	f7e2 fa49 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 801eb9a:	2203      	movs	r2, #3
 801eb9c:	2101      	movs	r1, #1
 801eb9e:	205b      	movs	r0, #91	; 0x5b
 801eba0:	f7e2 fefe 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801eba4:	2002      	movs	r0, #2
 801eba6:	f7e2 fa41 	bl	800102c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801ebaa:	4631      	mov	r1, r6
 801ebac:	481b      	ldr	r0, [pc, #108]	; (801ec1c <main+0x694>)
 801ebae:	f7e7 fc13 	bl	80063d8 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 801ebb2:	4b1b      	ldr	r3, [pc, #108]	; (801ec20 <main+0x698>)
 801ebb4:	2232      	movs	r2, #50	; 0x32
 801ebb6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 801ebb8:	2001      	movs	r0, #1
 801ebba:	f7e2 fa37 	bl	800102c <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801ebbe:	2201      	movs	r2, #1
 801ebc0:	4918      	ldr	r1, [pc, #96]	; (801ec24 <main+0x69c>)
 801ebc2:	4819      	ldr	r0, [pc, #100]	; (801ec28 <main+0x6a0>)
 801ebc4:	f7e7 fe20 	bl	8006808 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 801ebc8:	2001      	movs	r0, #1
 801ebca:	f7e2 fa2f 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801ebce:	4817      	ldr	r0, [pc, #92]	; (801ec2c <main+0x6a4>)
 801ebd0:	2201      	movs	r2, #1
 801ebd2:	4631      	mov	r1, r6
 801ebd4:	f7e3 fd90 	bl	80026f8 <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 801ebd8:	4b15      	ldr	r3, [pc, #84]	; (801ec30 <main+0x6a8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801ebda:	941b      	str	r4, [sp, #108]	; 0x6c
  htim6.Init.Prescaler = 48000;
 801ebdc:	f64b 3780 	movw	r7, #48000	; 0xbb80
 801ebe0:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801ebe4:	4628      	mov	r0, r5
  htim6.Init.Period = 3800;
 801ebe6:	f640 63d8 	movw	r3, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801ebea:	941c      	str	r4, [sp, #112]	; 0x70
 801ebec:	941d      	str	r4, [sp, #116]	; 0x74
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ebee:	60ac      	str	r4, [r5, #8]
  htim6.Init.Period = 3800;
 801ebf0:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ebf2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801ebf4:	f7e7 f9e4 	bl	8005fc0 <HAL_TIM_Base_Init>
 801ebf8:	b100      	cbz	r0, 801ebfc <main+0x674>
 801ebfa:	e7fe      	b.n	801ebfa <main+0x672>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ebfc:	901b      	str	r0, [sp, #108]	; 0x6c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ebfe:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801ec00:	a91b      	add	r1, sp, #108	; 0x6c
 801ec02:	4628      	mov	r0, r5
 801ec04:	f7e7 fc5c 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 801ec08:	4607      	mov	r7, r0
 801ec0a:	b198      	cbz	r0, 801ec34 <main+0x6ac>
 801ec0c:	e7fe      	b.n	801ec0c <main+0x684>
 801ec0e:	bf00      	nop
 801ec10:	20095b4c 	.word	0x20095b4c
 801ec14:	200958a4 	.word	0x200958a4
 801ec18:	20095c60 	.word	0x20095c60
 801ec1c:	200957bc 	.word	0x200957bc
 801ec20:	40014000 	.word	0x40014000
 801ec24:	200905d2 	.word	0x200905d2
 801ec28:	20095abc 	.word	0x20095abc
 801ec2c:	48001400 	.word	0x48001400
 801ec30:	40001000 	.word	0x40001000
	HAL_Delay(1);
 801ec34:	2001      	movs	r0, #1
 801ec36:	f7e2 f9f9 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801ec3a:	2036      	movs	r0, #54	; 0x36
 801ec3c:	f7e2 fee4 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801ec40:	2001      	movs	r0, #1
 801ec42:	f7e2 f9f3 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 801ec46:	4628      	mov	r0, r5
 801ec48:	f7e7 f886 	bl	8005d58 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM6_IRQn, 1, 4);
 801ec4c:	4632      	mov	r2, r6
 801ec4e:	2101      	movs	r1, #1
 801ec50:	2036      	movs	r0, #54	; 0x36
 801ec52:	f7e2 fea5 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801ec56:	2001      	movs	r0, #1
 801ec58:	f7e2 f9e8 	bl	800102c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801ec5c:	463a      	mov	r2, r7
 801ec5e:	49d0      	ldr	r1, [pc, #832]	; (801efa0 <main+0xa18>)
 801ec60:	48d0      	ldr	r0, [pc, #832]	; (801efa4 <main+0xa1c>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801ec62:	4cd1      	ldr	r4, [pc, #836]	; (801efa8 <main+0xa20>)
 801ec64:	4dd1      	ldr	r5, [pc, #836]	; (801efac <main+0xa24>)
 801ec66:	4ed2      	ldr	r6, [pc, #840]	; (801efb0 <main+0xa28>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801ec68:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 801f06c <main+0xae4>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801ec6c:	f7e4 fb65 	bl	800333a <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 801ec70:	2001      	movs	r0, #1
 801ec72:	f7e2 f9db 	bl	800102c <HAL_Delay>
	Touch_Ini();
 801ec76:	f7fd fc84 	bl	801c582 <Touch_Ini>
	MX_SDMMC1_SD_Init();
 801ec7a:	f7fe fb3f 	bl	801d2fc <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 801ec7e:	f7fd fd0b 	bl	801c698 <MX_FATFS_Init>
	GPIO_QSPI_Init();
 801ec82:	f7fb f883 	bl	8019d8c <GPIO_QSPI_Init>
	Single_Mode();	
 801ec86:	f7fb f97b 	bl	8019f80 <Single_Mode>
	HAL_Delay(20);
 801ec8a:	2014      	movs	r0, #20
 801ec8c:	f7e2 f9ce 	bl	800102c <HAL_Delay>
	BlueTooth_GPIO_Init();
 801ec90:	f7eb f97a 	bl	8009f88 <BlueTooth_GPIO_Init>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801ec94:	2103      	movs	r1, #3
 801ec96:	48c7      	ldr	r0, [pc, #796]	; (801efb4 <main+0xa2c>)
 801ec98:	f7f0 fb4e 	bl	800f338 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801ec9c:	4bc6      	ldr	r3, [pc, #792]	; (801efb8 <main+0xa30>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801ec9e:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801eca0:	28ff      	cmp	r0, #255	; 0xff
 801eca2:	bf18      	it	ne
 801eca4:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801eca6:	f04f 0103 	mov.w	r1, #3
 801ecaa:	48c4      	ldr	r0, [pc, #784]	; (801efbc <main+0xa34>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801ecac:	bf08      	it	eq
 801ecae:	701f      	strbeq	r7, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801ecb0:	f7f0 fb42 	bl	800f338 <Calibration_Load_1byte>
 801ecb4:	4bc2      	ldr	r3, [pc, #776]	; (801efc0 <main+0xa38>)
 801ecb6:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801ecb8:	28ff      	cmp	r0, #255	; 0xff
 801ecba:	bf0c      	ite	eq
 801ecbc:	2200      	moveq	r2, #0
 801ecbe:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801ecc0:	f04f 0103 	mov.w	r1, #3
 801ecc4:	48bf      	ldr	r0, [pc, #764]	; (801efc4 <main+0xa3c>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801ecc6:	bf08      	it	eq
 801ecc8:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801ecca:	f7f0 fb35 	bl	800f338 <Calibration_Load_1byte>
 801ecce:	4bbe      	ldr	r3, [pc, #760]	; (801efc8 <main+0xa40>)
 801ecd0:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801ecd2:	28ff      	cmp	r0, #255	; 0xff
 801ecd4:	bf0a      	itet	eq
 801ecd6:	781a      	ldrbeq	r2, [r3, #0]
 801ecd8:	7018      	strbne	r0, [r3, #0]
 801ecda:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801ecde:	f04f 0103 	mov.w	r1, #3
 801ece2:	48ba      	ldr	r0, [pc, #744]	; (801efcc <main+0xa44>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801ece4:	bf08      	it	eq
 801ece6:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801ece8:	f7f0 fb26 	bl	800f338 <Calibration_Load_1byte>
 801ecec:	4bb8      	ldr	r3, [pc, #736]	; (801efd0 <main+0xa48>)
 801ecee:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801ecf0:	28ff      	cmp	r0, #255	; 0xff
 801ecf2:	bf0c      	ite	eq
 801ecf4:	2200      	moveq	r2, #0
 801ecf6:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801ecf8:	f04f 0103 	mov.w	r1, #3
 801ecfc:	48b5      	ldr	r0, [pc, #724]	; (801efd4 <main+0xa4c>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801ecfe:	bf08      	it	eq
 801ed00:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801ed02:	f7f0 fb19 	bl	800f338 <Calibration_Load_1byte>
 801ed06:	4bb4      	ldr	r3, [pc, #720]	; (801efd8 <main+0xa50>)
 801ed08:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801ed0a:	28ff      	cmp	r0, #255	; 0xff
 801ed0c:	bf0c      	ite	eq
 801ed0e:	2200      	moveq	r2, #0
 801ed10:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801ed12:	f04f 0103 	mov.w	r1, #3
 801ed16:	48b1      	ldr	r0, [pc, #708]	; (801efdc <main+0xa54>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801ed18:	bf08      	it	eq
 801ed1a:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801ed1c:	f7f0 fb0c 	bl	800f338 <Calibration_Load_1byte>
 801ed20:	4baf      	ldr	r3, [pc, #700]	; (801efe0 <main+0xa58>)
 801ed22:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801ed24:	28ff      	cmp	r0, #255	; 0xff
 801ed26:	bf0a      	itet	eq
 801ed28:	781a      	ldrbeq	r2, [r3, #0]
 801ed2a:	7018      	strbne	r0, [r3, #0]
 801ed2c:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801ed30:	f04f 0103 	mov.w	r1, #3
 801ed34:	48ab      	ldr	r0, [pc, #684]	; (801efe4 <main+0xa5c>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801ed36:	bf08      	it	eq
 801ed38:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801ed3a:	f7f0 fafd 	bl	800f338 <Calibration_Load_1byte>
 801ed3e:	4baa      	ldr	r3, [pc, #680]	; (801efe8 <main+0xa60>)
 801ed40:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801ed42:	28ff      	cmp	r0, #255	; 0xff
 801ed44:	bf0c      	ite	eq
 801ed46:	2200      	moveq	r2, #0
 801ed48:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801ed4a:	f04f 0101 	mov.w	r1, #1
 801ed4e:	48a7      	ldr	r0, [pc, #668]	; (801efec <main+0xa64>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801ed50:	bf08      	it	eq
 801ed52:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801ed54:	f7f0 facc 	bl	800f2f0 <Calibration_Load_2byte>
 801ed58:	4ca5      	ldr	r4, [pc, #660]	; (801eff0 <main+0xa68>)
 801ed5a:	4ba6      	ldr	r3, [pc, #664]	; (801eff4 <main+0xa6c>)
 801ed5c:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801ed5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed62:	4290      	cmp	r0, r2
 801ed64:	bf0c      	ite	eq
 801ed66:	2200      	moveq	r2, #0
 801ed68:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801ed6a:	f04f 0101 	mov.w	r1, #1
 801ed6e:	48a2      	ldr	r0, [pc, #648]	; (801eff8 <main+0xa70>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801ed70:	bf08      	it	eq
 801ed72:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801ed74:	f7f0 fabc 	bl	800f2f0 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801ed78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ed7c:	4298      	cmp	r0, r3
 801ed7e:	4b9f      	ldr	r3, [pc, #636]	; (801effc <main+0xa74>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801ed80:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801ed82:	bf06      	itte	eq
 801ed84:	2200      	moveq	r2, #0
 801ed86:	801a      	strheq	r2, [r3, #0]
 801ed88:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 801ed8a:	f7f0 fb99 	bl	800f4c0 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 801ed8e:	4b9c      	ldr	r3, [pc, #624]	; (801f000 <main+0xa78>)
 801ed90:	4f9c      	ldr	r7, [pc, #624]	; (801f004 <main+0xa7c>)
 801ed92:	7818      	ldrb	r0, [r3, #0]
 801ed94:	f7f0 fb56 	bl	800f444 <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801ed98:	4b87      	ldr	r3, [pc, #540]	; (801efb8 <main+0xa30>)
 801ed9a:	489b      	ldr	r0, [pc, #620]	; (801f008 <main+0xa80>)
 801ed9c:	781c      	ldrb	r4, [r3, #0]
 801ed9e:	4b9b      	ldr	r3, [pc, #620]	; (801f00c <main+0xa84>)
 801eda0:	4a9b      	ldr	r2, [pc, #620]	; (801f010 <main+0xa88>)
 801eda2:	2c00      	cmp	r4, #0
 801eda4:	bf18      	it	ne
 801eda6:	4618      	movne	r0, r3
 801eda8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801edac:	f7f0 fb08 	bl	800f3c0 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801edb0:	4898      	ldr	r0, [pc, #608]	; (801f014 <main+0xa8c>)
 801edb2:	f7f0 faf3 	bl	800f39c <Calibration_Load_float>
 801edb6:	4b98      	ldr	r3, [pc, #608]	; (801f018 <main+0xa90>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801edb8:	4898      	ldr	r0, [pc, #608]	; (801f01c <main+0xa94>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801edba:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801edbe:	f7f0 faed 	bl	800f39c <Calibration_Load_float>
 801edc2:	4b97      	ldr	r3, [pc, #604]	; (801f020 <main+0xa98>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801edc4:	4a97      	ldr	r2, [pc, #604]	; (801f024 <main+0xa9c>)
 801edc6:	4898      	ldr	r0, [pc, #608]	; (801f028 <main+0xaa0>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801edc8:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801edcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801edd0:	f7f0 faf6 	bl	800f3c0 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 801edd4:	4a95      	ldr	r2, [pc, #596]	; (801f02c <main+0xaa4>)
 801edd6:	4896      	ldr	r0, [pc, #600]	; (801f030 <main+0xaa8>)
 801edd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801eddc:	f7f0 faf0 	bl	800f3c0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 801ede0:	4a94      	ldr	r2, [pc, #592]	; (801f034 <main+0xaac>)
 801ede2:	4895      	ldr	r0, [pc, #596]	; (801f038 <main+0xab0>)
 801ede4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ede8:	f7f0 faea 	bl	800f3c0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 801edec:	4a93      	ldr	r2, [pc, #588]	; (801f03c <main+0xab4>)
 801edee:	4894      	ldr	r0, [pc, #592]	; (801f040 <main+0xab8>)
 801edf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801edf4:	f7f0 fae4 	bl	800f3c0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 801edf8:	4a92      	ldr	r2, [pc, #584]	; (801f044 <main+0xabc>)
 801edfa:	4893      	ldr	r0, [pc, #588]	; (801f048 <main+0xac0>)
 801edfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ee00:	f7f0 fade 	bl	800f3c0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 801ee04:	4a91      	ldr	r2, [pc, #580]	; (801f04c <main+0xac4>)
 801ee06:	4892      	ldr	r0, [pc, #584]	; (801f050 <main+0xac8>)
 801ee08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ee0c:	f7f0 fad8 	bl	800f3c0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 801ee10:	4a90      	ldr	r2, [pc, #576]	; (801f054 <main+0xacc>)
 801ee12:	4891      	ldr	r0, [pc, #580]	; (801f058 <main+0xad0>)
 801ee14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ee18:	f7f0 fad2 	bl	800f3c0 <Calibration_Load_Pack>
 801ee1c:	4b8f      	ldr	r3, [pc, #572]	; (801f05c <main+0xad4>)
 801ee1e:	9303      	str	r3, [sp, #12]
 801ee20:	4b8f      	ldr	r3, [pc, #572]	; (801f060 <main+0xad8>)
 801ee22:	9304      	str	r3, [sp, #16]
 801ee24:	4b8f      	ldr	r3, [pc, #572]	; (801f064 <main+0xadc>)
 801ee26:	9302      	str	r3, [sp, #8]
 801ee28:	46aa      	mov	sl, r5
 801ee2a:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801ee2e:	f04f 0800 	mov.w	r8, #0
 801ee32:	2100      	movs	r1, #0
 801ee34:	4620      	mov	r0, r4
 801ee36:	f7f0 fa5b 	bl	800f2f0 <Calibration_Load_2byte>
 801ee3a:	ee07 0a90 	vmov	s15, r0
 801ee3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee42:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 801ee46:	ee17 0a90 	vmov	r0, s15
 801ee4a:	f7e1 fb95 	bl	8000578 <__aeabi_f2d>
 801ee4e:	4642      	mov	r2, r8
 801ee50:	464b      	mov	r3, r9
 801ee52:	f7e1 fd0f 	bl	8000874 <__aeabi_ddiv>
 801ee56:	a350      	add	r3, pc, #320	; (adr r3, 801ef98 <main+0xa10>)
 801ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee5c:	f7e1 fa2e 	bl	80002bc <__adddf3>
 801ee60:	f7e1 fed6 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801ee64:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801ee66:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801ee6a:	4620      	mov	r0, r4
 801ee6c:	f7f0 fa40 	bl	800f2f0 <Calibration_Load_2byte>
 801ee70:	ee07 0a90 	vmov	s15, r0
 801ee74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee78:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801ee7c:	ee17 0a90 	vmov	r0, s15
 801ee80:	f7e1 fb7a 	bl	8000578 <__aeabi_f2d>
 801ee84:	4642      	mov	r2, r8
 801ee86:	464b      	mov	r3, r9
 801ee88:	f7e1 fcf4 	bl	8000874 <__aeabi_ddiv>
 801ee8c:	a342      	add	r3, pc, #264	; (adr r3, 801ef98 <main+0xa10>)
 801ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee92:	f7e1 fa13 	bl	80002bc <__adddf3>
 801ee96:	f7e1 febb 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801ee9a:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801ee9c:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801eea0:	4620      	mov	r0, r4
 801eea2:	f7f0 fa25 	bl	800f2f0 <Calibration_Load_2byte>
 801eea6:	ee07 0a90 	vmov	s15, r0
 801eeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801eeae:	ed9f 8a6e 	vldr	s16, [pc, #440]	; 801f068 <main+0xae0>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801eeb2:	ee17 0a90 	vmov	r0, s15
 801eeb6:	f7e1 fb5f 	bl	8000578 <__aeabi_f2d>
 801eeba:	4642      	mov	r2, r8
 801eebc:	464b      	mov	r3, r9
 801eebe:	f7e1 fcd9 	bl	8000874 <__aeabi_ddiv>
 801eec2:	a335      	add	r3, pc, #212	; (adr r3, 801ef98 <main+0xa10>)
 801eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eec8:	f7e1 f9f8 	bl	80002bc <__adddf3>
 801eecc:	f7e1 fea0 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801eed0:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801eed2:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801eed6:	4620      	mov	r0, r4
 801eed8:	f7f0 fa0a 	bl	800f2f0 <Calibration_Load_2byte>
 801eedc:	ee07 0a90 	vmov	s15, r0
 801eee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eee4:	f10a 0a10 	add.w	sl, sl, #16
 801eee8:	ee17 0a90 	vmov	r0, s15
 801eeec:	f7e1 fb44 	bl	8000578 <__aeabi_f2d>
 801eef0:	4642      	mov	r2, r8
 801eef2:	464b      	mov	r3, r9
 801eef4:	f7e1 fcbe 	bl	8000874 <__aeabi_ddiv>
 801eef8:	a327      	add	r3, pc, #156	; (adr r3, 801ef98 <main+0xa10>)
 801eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eefe:	f7e1 f9dd 	bl	80002bc <__adddf3>
 801ef02:	f7e1 fe85 	bl	8000c10 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801ef06:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801ef08:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801ef0c:	4658      	mov	r0, fp
 801ef0e:	f7f0 f9ef 	bl	800f2f0 <Calibration_Load_2byte>
 801ef12:	ee07 0a90 	vmov	s15, r0
 801ef16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ef1a:	9b03      	ldr	r3, [sp, #12]
 801ef1c:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801ef20:	2101      	movs	r1, #1
 801ef22:	4658      	mov	r0, fp
 801ef24:	3710      	adds	r7, #16
 801ef26:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801ef28:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801ef2c:	f7f0 f9e0 	bl	800f2f0 <Calibration_Load_2byte>
 801ef30:	ee07 0a90 	vmov	s15, r0
 801ef34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ef38:	9b03      	ldr	r3, [sp, #12]
 801ef3a:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801ef3e:	2102      	movs	r1, #2
 801ef40:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801ef42:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801ef46:	f7f0 f9d3 	bl	800f2f0 <Calibration_Load_2byte>
 801ef4a:	ee07 0a90 	vmov	s15, r0
 801ef4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ef52:	9b03      	ldr	r3, [sp, #12]
 801ef54:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801ef58:	2103      	movs	r1, #3
 801ef5a:	4658      	mov	r0, fp
 801ef5c:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 801ef60:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801ef64:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801ef68:	f7f0 f9c2 	bl	800f2f0 <Calibration_Load_2byte>
 801ef6c:	ee07 0a90 	vmov	s15, r0
 801ef70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ef74:	9b03      	ldr	r3, [sp, #12]
 801ef76:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801ef7a:	2100      	movs	r1, #0
 801ef7c:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801ef7e:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801ef82:	f7f0 f9b5 	bl	800f2f0 <Calibration_Load_2byte>
 801ef86:	ee07 0a90 	vmov	s15, r0
 801ef8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ef8e:	9b04      	ldr	r3, [sp, #16]
 801ef90:	e06e      	b.n	801f070 <main+0xae8>
 801ef92:	bf00      	nop
 801ef94:	f3af 8000 	nop.w
 801ef98:	00000000 	.word	0x00000000
 801ef9c:	4072c000 	.word	0x4072c000
 801efa0:	2000ed3c 	.word	0x2000ed3c
 801efa4:	20095908 	.word	0x20095908
 801efa8:	200957fc 	.word	0x200957fc
 801efac:	20054948 	.word	0x20054948
 801efb0:	2004f93c 	.word	0x2004f93c
 801efb4:	0812b030 	.word	0x0812b030
 801efb8:	20000ebc 	.word	0x20000ebc
 801efbc:	0812b040 	.word	0x0812b040
 801efc0:	20005702 	.word	0x20005702
 801efc4:	0812b048 	.word	0x0812b048
 801efc8:	200056ff 	.word	0x200056ff
 801efcc:	0812b050 	.word	0x0812b050
 801efd0:	20005700 	.word	0x20005700
 801efd4:	0812b058 	.word	0x0812b058
 801efd8:	20005703 	.word	0x20005703
 801efdc:	0812b060 	.word	0x0812b060
 801efe0:	20090ac1 	.word	0x20090ac1
 801efe4:	0812b068 	.word	0x0812b068
 801efe8:	20090ac2 	.word	0x20090ac2
 801efec:	0812b038 	.word	0x0812b038
 801eff0:	20095890 	.word	0x20095890
 801eff4:	20005706 	.word	0x20005706
 801eff8:	0812b020 	.word	0x0812b020
 801effc:	2000572e 	.word	0x2000572e
 801f000:	200905b6 	.word	0x200905b6
 801f004:	2004e93c 	.word	0x2004e93c
 801f008:	08101838 	.word	0x08101838
 801f00c:	08100838 	.word	0x08100838
 801f010:	20051940 	.word	0x20051940
 801f014:	08102838 	.word	0x08102838
 801f018:	20009d24 	.word	0x20009d24
 801f01c:	0810283c 	.word	0x0810283c
 801f020:	20009d28 	.word	0x20009d28
 801f024:	20052940 	.word	0x20052940
 801f028:	08102840 	.word	0x08102840
 801f02c:	20053940 	.word	0x20053940
 801f030:	08103844 	.word	0x08103844
 801f034:	2008b514 	.word	0x2008b514
 801f038:	08107840 	.word	0x08107840
 801f03c:	2008c514 	.word	0x2008c514
 801f040:	08108840 	.word	0x08108840
 801f044:	2008e514 	.word	0x2008e514
 801f048:	08109840 	.word	0x08109840
 801f04c:	2008a514 	.word	0x2008a514
 801f050:	08105840 	.word	0x08105840
 801f054:	2008d514 	.word	0x2008d514
 801f058:	08106840 	.word	0x08106840
 801f05c:	20009d38 	.word	0x20009d38
 801f060:	2000ad38 	.word	0x2000ad38
 801f064:	2005093c 	.word	0x2005093c
 801f068:	447a0000 	.word	0x447a0000
 801f06c:	40590000 	.word	0x40590000
 801f070:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801f074:	2101      	movs	r1, #1
 801f076:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801f078:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801f07c:	f7f0 f938 	bl	800f2f0 <Calibration_Load_2byte>
 801f080:	ee07 0a90 	vmov	s15, r0
 801f084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f088:	9b04      	ldr	r3, [sp, #16]
 801f08a:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801f08e:	2102      	movs	r1, #2
 801f090:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801f092:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801f096:	f7f0 f92b 	bl	800f2f0 <Calibration_Load_2byte>
 801f09a:	ee07 0a90 	vmov	s15, r0
 801f09e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f0a2:	9b04      	ldr	r3, [sp, #16]
 801f0a4:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801f0a8:	2103      	movs	r1, #3
 801f0aa:	4658      	mov	r0, fp
 801f0ac:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 801f0b0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801f0b4:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801f0b8:	f7f0 f91a 	bl	800f2f0 <Calibration_Load_2byte>
 801f0bc:	ee07 0a90 	vmov	s15, r0
 801f0c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f0c4:	9b04      	ldr	r3, [sp, #16]
 801f0c6:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801f0ca:	2100      	movs	r1, #0
 801f0cc:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801f0ce:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801f0d2:	f7f0 f90d 	bl	800f2f0 <Calibration_Load_2byte>
 801f0d6:	ee07 0a90 	vmov	s15, r0
 801f0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0de:	ee17 0a90 	vmov	r0, s15
 801f0e2:	f7e1 fa49 	bl	8000578 <__aeabi_f2d>
 801f0e6:	4642      	mov	r2, r8
 801f0e8:	464b      	mov	r3, r9
 801f0ea:	f7e1 fbc3 	bl	8000874 <__aeabi_ddiv>
 801f0ee:	2200      	movs	r2, #0
 801f0f0:	4bda      	ldr	r3, [pc, #872]	; (801f45c <main+0xed4>)
 801f0f2:	f7e1 f8e1 	bl	80002b8 <__aeabi_dsub>
 801f0f6:	f7e1 fd8b 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801f0fa:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801f0fc:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801f100:	4658      	mov	r0, fp
 801f102:	f7f0 f8f5 	bl	800f2f0 <Calibration_Load_2byte>
 801f106:	ee07 0a90 	vmov	s15, r0
 801f10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f10e:	ee17 0a90 	vmov	r0, s15
 801f112:	f7e1 fa31 	bl	8000578 <__aeabi_f2d>
 801f116:	4642      	mov	r2, r8
 801f118:	464b      	mov	r3, r9
 801f11a:	f7e1 fbab 	bl	8000874 <__aeabi_ddiv>
 801f11e:	2200      	movs	r2, #0
 801f120:	4bce      	ldr	r3, [pc, #824]	; (801f45c <main+0xed4>)
 801f122:	f7e1 f8c9 	bl	80002b8 <__aeabi_dsub>
 801f126:	f7e1 fd73 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801f12a:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801f12c:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801f130:	4658      	mov	r0, fp
 801f132:	f7f0 f8dd 	bl	800f2f0 <Calibration_Load_2byte>
 801f136:	ee07 0a90 	vmov	s15, r0
 801f13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f13e:	ee17 0a90 	vmov	r0, s15
 801f142:	f7e1 fa19 	bl	8000578 <__aeabi_f2d>
 801f146:	4642      	mov	r2, r8
 801f148:	464b      	mov	r3, r9
 801f14a:	f7e1 fb93 	bl	8000874 <__aeabi_ddiv>
 801f14e:	2200      	movs	r2, #0
 801f150:	4bc2      	ldr	r3, [pc, #776]	; (801f45c <main+0xed4>)
 801f152:	f7e1 f8b1 	bl	80002b8 <__aeabi_dsub>
 801f156:	f7e1 fd5b 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801f15a:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801f15c:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801f160:	4658      	mov	r0, fp
 801f162:	f7f0 f8c5 	bl	800f2f0 <Calibration_Load_2byte>
 801f166:	ee07 0a90 	vmov	s15, r0
 801f16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f16e:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 801f172:	ee17 0a90 	vmov	r0, s15
 801f176:	f7e1 f9ff 	bl	8000578 <__aeabi_f2d>
 801f17a:	4642      	mov	r2, r8
 801f17c:	464b      	mov	r3, r9
 801f17e:	f7e1 fb79 	bl	8000874 <__aeabi_ddiv>
 801f182:	2200      	movs	r2, #0
 801f184:	4bb5      	ldr	r3, [pc, #724]	; (801f45c <main+0xed4>)
 801f186:	f7e1 f897 	bl	80002b8 <__aeabi_dsub>
 801f18a:	f7e1 fd41 	bl	8000c10 <__aeabi_d2f>
 801f18e:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801f192:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801f196:	2100      	movs	r1, #0
 801f198:	4658      	mov	r0, fp
 801f19a:	f7f0 f8a9 	bl	800f2f0 <Calibration_Load_2byte>
 801f19e:	ee07 0a90 	vmov	s15, r0
 801f1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1a6:	ee17 0a90 	vmov	r0, s15
 801f1aa:	f7e1 f9e5 	bl	8000578 <__aeabi_f2d>
 801f1ae:	4642      	mov	r2, r8
 801f1b0:	464b      	mov	r3, r9
 801f1b2:	f7e1 fb5f 	bl	8000874 <__aeabi_ddiv>
 801f1b6:	2200      	movs	r2, #0
 801f1b8:	4ba8      	ldr	r3, [pc, #672]	; (801f45c <main+0xed4>)
 801f1ba:	f7e1 f87d 	bl	80002b8 <__aeabi_dsub>
 801f1be:	f7e1 fd27 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801f1c2:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801f1c4:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801f1c8:	4658      	mov	r0, fp
 801f1ca:	f7f0 f891 	bl	800f2f0 <Calibration_Load_2byte>
 801f1ce:	ee07 0a90 	vmov	s15, r0
 801f1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1d6:	ee17 0a90 	vmov	r0, s15
 801f1da:	f7e1 f9cd 	bl	8000578 <__aeabi_f2d>
 801f1de:	4642      	mov	r2, r8
 801f1e0:	464b      	mov	r3, r9
 801f1e2:	f7e1 fb47 	bl	8000874 <__aeabi_ddiv>
 801f1e6:	2200      	movs	r2, #0
 801f1e8:	4b9c      	ldr	r3, [pc, #624]	; (801f45c <main+0xed4>)
 801f1ea:	f7e1 f865 	bl	80002b8 <__aeabi_dsub>
 801f1ee:	f7e1 fd0f 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801f1f2:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801f1f4:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801f1f8:	4658      	mov	r0, fp
 801f1fa:	f7f0 f879 	bl	800f2f0 <Calibration_Load_2byte>
 801f1fe:	ee07 0a90 	vmov	s15, r0
 801f202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f206:	ee17 0a90 	vmov	r0, s15
 801f20a:	f7e1 f9b5 	bl	8000578 <__aeabi_f2d>
 801f20e:	4642      	mov	r2, r8
 801f210:	464b      	mov	r3, r9
 801f212:	f7e1 fb2f 	bl	8000874 <__aeabi_ddiv>
 801f216:	2200      	movs	r2, #0
 801f218:	4b90      	ldr	r3, [pc, #576]	; (801f45c <main+0xed4>)
 801f21a:	f7e1 f84d 	bl	80002b8 <__aeabi_dsub>
 801f21e:	f7e1 fcf7 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801f222:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801f224:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801f228:	4658      	mov	r0, fp
 801f22a:	f7f0 f861 	bl	800f2f0 <Calibration_Load_2byte>
 801f22e:	ee07 0a90 	vmov	s15, r0
 801f232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f236:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 801f23a:	ee17 0a90 	vmov	r0, s15
 801f23e:	f7e1 f99b 	bl	8000578 <__aeabi_f2d>
 801f242:	4642      	mov	r2, r8
 801f244:	464b      	mov	r3, r9
 801f246:	f7e1 fb15 	bl	8000874 <__aeabi_ddiv>
 801f24a:	2200      	movs	r2, #0
 801f24c:	4b83      	ldr	r3, [pc, #524]	; (801f45c <main+0xed4>)
 801f24e:	f7e1 f833 	bl	80002b8 <__aeabi_dsub>
 801f252:	f7e1 fcdd 	bl	8000c10 <__aeabi_d2f>
 801f256:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801f25a:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801f25e:	2100      	movs	r1, #0
 801f260:	4658      	mov	r0, fp
 801f262:	f7f0 f845 	bl	800f2f0 <Calibration_Load_2byte>
 801f266:	ee07 0a90 	vmov	s15, r0
 801f26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f26e:	3408      	adds	r4, #8
 801f270:	ee17 0a90 	vmov	r0, s15
 801f274:	f7e1 f980 	bl	8000578 <__aeabi_f2d>
 801f278:	4642      	mov	r2, r8
 801f27a:	464b      	mov	r3, r9
 801f27c:	f7e1 fafa 	bl	8000874 <__aeabi_ddiv>
 801f280:	2200      	movs	r2, #0
 801f282:	4b76      	ldr	r3, [pc, #472]	; (801f45c <main+0xed4>)
 801f284:	f7e1 f818 	bl	80002b8 <__aeabi_dsub>
 801f288:	f7e1 fcc2 	bl	8000c10 <__aeabi_d2f>
 801f28c:	9b02      	ldr	r3, [sp, #8]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801f28e:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801f290:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801f292:	4658      	mov	r0, fp
 801f294:	f7f0 f82c 	bl	800f2f0 <Calibration_Load_2byte>
 801f298:	ee07 0a90 	vmov	s15, r0
 801f29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2a0:	ee17 0a90 	vmov	r0, s15
 801f2a4:	f7e1 f968 	bl	8000578 <__aeabi_f2d>
 801f2a8:	4642      	mov	r2, r8
 801f2aa:	464b      	mov	r3, r9
 801f2ac:	f7e1 fae2 	bl	8000874 <__aeabi_ddiv>
 801f2b0:	2200      	movs	r2, #0
 801f2b2:	4b6a      	ldr	r3, [pc, #424]	; (801f45c <main+0xed4>)
 801f2b4:	f7e1 f800 	bl	80002b8 <__aeabi_dsub>
 801f2b8:	f7e1 fcaa 	bl	8000c10 <__aeabi_d2f>
 801f2bc:	9b02      	ldr	r3, [sp, #8]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801f2be:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801f2c0:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801f2c2:	4658      	mov	r0, fp
 801f2c4:	f7f0 f814 	bl	800f2f0 <Calibration_Load_2byte>
 801f2c8:	ee07 0a90 	vmov	s15, r0
 801f2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2d0:	ee17 0a90 	vmov	r0, s15
 801f2d4:	f7e1 f950 	bl	8000578 <__aeabi_f2d>
 801f2d8:	4642      	mov	r2, r8
 801f2da:	464b      	mov	r3, r9
 801f2dc:	f7e1 faca 	bl	8000874 <__aeabi_ddiv>
 801f2e0:	2200      	movs	r2, #0
 801f2e2:	4b5e      	ldr	r3, [pc, #376]	; (801f45c <main+0xed4>)
 801f2e4:	f7e0 ffe8 	bl	80002b8 <__aeabi_dsub>
 801f2e8:	f7e1 fc92 	bl	8000c10 <__aeabi_d2f>
 801f2ec:	9b02      	ldr	r3, [sp, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801f2ee:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801f2f0:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801f2f2:	4658      	mov	r0, fp
 801f2f4:	f7ef fffc 	bl	800f2f0 <Calibration_Load_2byte>
 801f2f8:	ee07 0a90 	vmov	s15, r0
 801f2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f300:	ee17 0a90 	vmov	r0, s15
 801f304:	f7e1 f938 	bl	8000578 <__aeabi_f2d>
 801f308:	4642      	mov	r2, r8
 801f30a:	464b      	mov	r3, r9
 801f30c:	f7e1 fab2 	bl	8000874 <__aeabi_ddiv>
 801f310:	4b52      	ldr	r3, [pc, #328]	; (801f45c <main+0xed4>)
 801f312:	2200      	movs	r2, #0
 801f314:	f7e0 ffd0 	bl	80002b8 <__aeabi_dsub>
 801f318:	f7e1 fc7a 	bl	8000c10 <__aeabi_d2f>
 801f31c:	9b02      	ldr	r3, [sp, #8]
 801f31e:	60d8      	str	r0, [r3, #12]
 801f320:	9b03      	ldr	r3, [sp, #12]
 801f322:	3310      	adds	r3, #16
 801f324:	9303      	str	r3, [sp, #12]
 801f326:	9b04      	ldr	r3, [sp, #16]
 801f328:	3310      	adds	r3, #16
 801f32a:	9304      	str	r3, [sp, #16]
 801f32c:	9b02      	ldr	r3, [sp, #8]
 801f32e:	3310      	adds	r3, #16
 801f330:	9302      	str	r3, [sp, #8]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 801f332:	4b4b      	ldr	r3, [pc, #300]	; (801f460 <main+0xed8>)
 801f334:	429c      	cmp	r4, r3
 801f336:	f47f ad7c 	bne.w	801ee32 <main+0x8aa>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801f33a:	2100      	movs	r1, #0
 801f33c:	4849      	ldr	r0, [pc, #292]	; (801f464 <main+0xedc>)
 801f33e:	f7ef ffd7 	bl	800f2f0 <Calibration_Load_2byte>
 801f342:	4b49      	ldr	r3, [pc, #292]	; (801f468 <main+0xee0>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801f344:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801f346:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801f348:	4846      	ldr	r0, [pc, #280]	; (801f464 <main+0xedc>)
 801f34a:	f7ef ffd1 	bl	800f2f0 <Calibration_Load_2byte>
 801f34e:	4b47      	ldr	r3, [pc, #284]	; (801f46c <main+0xee4>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801f350:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801f352:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801f354:	4846      	ldr	r0, [pc, #280]	; (801f470 <main+0xee8>)
 801f356:	f7ef ffcb 	bl	800f2f0 <Calibration_Load_2byte>
 801f35a:	4b46      	ldr	r3, [pc, #280]	; (801f474 <main+0xeec>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801f35c:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801f35e:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801f360:	4845      	ldr	r0, [pc, #276]	; (801f478 <main+0xef0>)
 801f362:	f7ef ffc5 	bl	800f2f0 <Calibration_Load_2byte>
 801f366:	4b45      	ldr	r3, [pc, #276]	; (801f47c <main+0xef4>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801f368:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801f36a:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801f36c:	4842      	ldr	r0, [pc, #264]	; (801f478 <main+0xef0>)
 801f36e:	f7ef ffbf 	bl	800f2f0 <Calibration_Load_2byte>
 801f372:	4b43      	ldr	r3, [pc, #268]	; (801f480 <main+0xef8>)
 801f374:	4943      	ldr	r1, [pc, #268]	; (801f484 <main+0xefc>)
 801f376:	8018      	strh	r0, [r3, #0]
 801f378:	4b43      	ldr	r3, [pc, #268]	; (801f488 <main+0xf00>)
 801f37a:	4a44      	ldr	r2, [pc, #272]	; (801f48c <main+0xf04>)
 801f37c:	f8b3 e000 	ldrh.w	lr, [r3]
 801f380:	4b43      	ldr	r3, [pc, #268]	; (801f490 <main+0xf08>)
 801f382:	8808      	ldrh	r0, [r1, #0]
 801f384:	881e      	ldrh	r6, [r3, #0]
 801f386:	f8b2 8000 	ldrh.w	r8, [r2]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801f38a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 801f494 <main+0xf0c>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801f38e:	eddf 6a42 	vldr	s13, [pc, #264]	; 801f498 <main+0xf10>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801f392:	ed9f 6a42 	vldr	s12, [pc, #264]	; 801f49c <main+0xf14>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801f396:	eddf 5a42 	vldr	s11, [pc, #264]	; 801f4a0 <main+0xf18>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801f39a:	2300      	movs	r3, #0
 801f39c:	461f      	mov	r7, r3
 801f39e:	469c      	mov	ip, r3
 801f3a0:	4699      	mov	r9, r3
 801f3a2:	461c      	mov	r4, r3
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801f3a4:	ecf5 7a01 	vldmia	r5!, {s15}
 801f3a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3b0:	fa1f fa83 	uxth.w	sl, r3
 801f3b4:	d807      	bhi.n	801f3c6 <main+0xe3e>
 801f3b6:	ed95 5a00 	vldr	s10, [r5]
 801f3ba:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3c2:	f280 80f2 	bge.w	801f5aa <main+0x1022>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801f3c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3ce:	d807      	bhi.n	801f3e0 <main+0xe58>
 801f3d0:	ed95 5a00 	vldr	s10, [r5]
 801f3d4:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801f3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3dc:	f280 80e8 	bge.w	801f5b0 <main+0x1028>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801f3e0:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3e8:	d807      	bhi.n	801f3fa <main+0xe72>
 801f3ea:	ed95 5a00 	vldr	s10, [r5]
 801f3ee:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3f6:	f280 80df 	bge.w	801f5b8 <main+0x1030>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801f3fa:	eef4 7ae5 	vcmpe.f32	s15, s11
 801f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f402:	d808      	bhi.n	801f416 <main+0xe8e>
 801f404:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 801f408:	eef4 7a65 	vcmp.f32	s15, s11
 801f40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f410:	bfa4      	itt	ge
 801f412:	4650      	movge	r0, sl
 801f414:	2401      	movge	r4, #1
 801f416:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 801f418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f41c:	d1c2      	bne.n	801f3a4 <main+0xe1c>
 801f41e:	b104      	cbz	r4, 801f422 <main+0xe9a>
 801f420:	8008      	strh	r0, [r1, #0]
 801f422:	f1b9 0f00 	cmp.w	r9, #0
 801f426:	d001      	beq.n	801f42c <main+0xea4>
 801f428:	f8a2 8000 	strh.w	r8, [r2]
 801f42c:	f1bc 0f00 	cmp.w	ip, #0
 801f430:	d002      	beq.n	801f438 <main+0xeb0>
 801f432:	4b15      	ldr	r3, [pc, #84]	; (801f488 <main+0xf00>)
 801f434:	f8a3 e000 	strh.w	lr, [r3]
 801f438:	b10f      	cbz	r7, 801f43e <main+0xeb6>
 801f43a:	4b15      	ldr	r3, [pc, #84]	; (801f490 <main+0xf08>)
 801f43c:	801e      	strh	r6, [r3, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801f43e:	4b19      	ldr	r3, [pc, #100]	; (801f4a4 <main+0xf1c>)
 801f440:	4a19      	ldr	r2, [pc, #100]	; (801f4a8 <main+0xf20>)
 801f442:	edd3 7a00 	vldr	s15, [r3]
 801f446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f44a:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801f44e:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801f452:	8011      	strh	r1, [r2, #0]
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801f454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f458:	e028      	b.n	801f4ac <main+0xf24>
 801f45a:	bf00      	nop
 801f45c:	40490000 	.word	0x40490000
 801f460:	08100800 	.word	0x08100800
 801f464:	0812a048 	.word	0x0812a048
 801f468:	20095718 	.word	0x20095718
 801f46c:	2009572c 	.word	0x2009572c
 801f470:	0812a04c 	.word	0x0812a04c
 801f474:	200959b0 	.word	0x200959b0
 801f478:	0812a040 	.word	0x0812a040
 801f47c:	2009571c 	.word	0x2009571c
 801f480:	20095ab8 	.word	0x20095ab8
 801f484:	20095aa8 	.word	0x20095aa8
 801f488:	20095b94 	.word	0x20095b94
 801f48c:	20095d74 	.word	0x20095d74
 801f490:	20095aaa 	.word	0x20095aaa
 801f494:	43c80000 	.word	0x43c80000
 801f498:	43fa0000 	.word	0x43fa0000
 801f49c:	44160000 	.word	0x44160000
 801f4a0:	442f0000 	.word	0x442f0000
 801f4a4:	20054948 	.word	0x20054948
 801f4a8:	20055948 	.word	0x20055948
 801f4ac:	ee17 1a90 	vmov	r1, s15
 801f4b0:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801f4b2:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801f4b6:	edd1 7a00 	vldr	s15, [r1]
 801f4ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801f4be:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801f4c2:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801f4c6:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801f4ca:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801f4cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f4d0:	ee17 3a90 	vmov	r3, s15
 801f4d4:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 801f4d6:	4baf      	ldr	r3, [pc, #700]	; (801f794 <main+0x120c>)
 801f4d8:	781a      	ldrb	r2, [r3, #0]
 801f4da:	4baf      	ldr	r3, [pc, #700]	; (801f798 <main+0x1210>)
 801f4dc:	2a00      	cmp	r2, #0
 801f4de:	d16f      	bne.n	801f5c0 <main+0x1038>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801f4e0:	4aae      	ldr	r2, [pc, #696]	; (801f79c <main+0x1214>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f4e2:	edd2 0a00 	vldr	s1, [r2]
 801f4e6:	ed93 0a00 	vldr	s0, [r3]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801f4ea:	4cad      	ldr	r4, [pc, #692]	; (801f7a0 <main+0x1218>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f4ec:	f7fa fe98 	bl	801a220 <Rabs_calc_Factor2_Settings_change>
 801f4f0:	4bac      	ldr	r3, [pc, #688]	; (801f7a4 <main+0x121c>)
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801f4f2:	48ad      	ldr	r0, [pc, #692]	; (801f7a8 <main+0x1220>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f4f4:	ed83 0a00 	vstr	s0, [r3]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801f4f8:	2103      	movs	r1, #3
 801f4fa:	f7ef ff1d 	bl	800f338 <Calibration_Load_1byte>
 801f4fe:	7020      	strb	r0, [r4, #0]
	Calculate_Data();
 801f500:	f7fd ff6c 	bl	801d3dc <Calculate_Data>
	Get_Battery_Level();
 801f504:	f7fe f89e 	bl	801d644 <Get_Battery_Level>
	HAL_Delay(1);
 801f508:	2001      	movs	r0, #1
 801f50a:	f7e1 fd8f 	bl	800102c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 801f50e:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 801f512:	2000      	movs	r0, #0
 801f514:	f7fa fe54 	bl	801a1c0 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801f518:	4aa4      	ldr	r2, [pc, #656]	; (801f7ac <main+0x1224>)
 801f51a:	f245 410a 	movw	r1, #21514	; 0x540a
 801f51e:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 801f522:	f7ec fff3 	bl	800c50c <CRC_Check>
 801f526:	4ba2      	ldr	r3, [pc, #648]	; (801f7b0 <main+0x1228>)
 801f528:	7018      	strb	r0, [r3, #0]
		BlueTooth_Module_Init();
 801f52a:	f7ea fe77 	bl	800a21c <BlueTooth_Module_Init>
		GUI_Title_Screen();
 801f52e:	f7f0 f8e3 	bl	800f6f8 <GUI_Title_Screen>
		HAL_Delay(2000);	
 801f532:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801f536:	f7e1 fd79 	bl	800102c <HAL_Delay>
		usb_receive_processing();
 801f53a:	f7fe fad5 	bl	801dae8 <usb_receive_processing>
		if(Bluetooth == 0)
 801f53e:	4b9d      	ldr	r3, [pc, #628]	; (801f7b4 <main+0x122c>)
 801f540:	9402      	str	r4, [sp, #8]
 801f542:	781b      	ldrb	r3, [r3, #0]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d13d      	bne.n	801f5c4 <main+0x103c>
			BlueTooth_Off();
 801f548:	f7ea fd72 	bl	800a030 <BlueTooth_Off>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f54c:	4c9a      	ldr	r4, [pc, #616]	; (801f7b8 <main+0x1230>)
			HAL_Delay(200);
 801f54e:	20c8      	movs	r0, #200	; 0xc8
 801f550:	f7e1 fd6c 	bl	800102c <HAL_Delay>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f554:	7823      	ldrb	r3, [r4, #0]
 801f556:	07d8      	lsls	r0, r3, #31
 801f558:	d537      	bpl.n	801f5ca <main+0x1042>
 801f55a:	4b98      	ldr	r3, [pc, #608]	; (801f7bc <main+0x1234>)
 801f55c:	4898      	ldr	r0, [pc, #608]	; (801f7c0 <main+0x1238>)
 801f55e:	781b      	ldrb	r3, [r3, #0]
 801f560:	f013 0f01 	tst.w	r3, #1
 801f564:	bf18      	it	ne
 801f566:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801f56a:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 801f56e:	f7fa fe27 	bl	801a1c0 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 801f572:	4b94      	ldr	r3, [pc, #592]	; (801f7c4 <main+0x123c>)
 801f574:	4a94      	ldr	r2, [pc, #592]	; (801f7c8 <main+0x1240>)
 801f576:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801f578:	7822      	ldrb	r2, [r4, #0]
 801f57a:	f002 0101 	and.w	r1, r2, #1
 801f57e:	2900      	cmp	r1, #0
 801f580:	bf14      	ite	ne
 801f582:	21d8      	movne	r1, #216	; 0xd8
 801f584:	21fa      	moveq	r1, #250	; 0xfa
 801f586:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801f588:	d12d      	bne.n	801f5e6 <main+0x105e>
 801f58a:	f012 0f04 	tst.w	r2, #4
 801f58e:	bf0c      	ite	eq
 801f590:	22fa      	moveq	r2, #250	; 0xfa
 801f592:	22ea      	movne	r2, #234	; 0xea
 801f594:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 801f596:	9b02      	ldr	r3, [sp, #8]
 801f598:	781b      	ldrb	r3, [r3, #0]
 801f59a:	3b01      	subs	r3, #1
 801f59c:	2b05      	cmp	r3, #5
 801f59e:	d858      	bhi.n	801f652 <main+0x10ca>
 801f5a0:	e8df f003 	tbb	[pc, r3]
 801f5a4:	453b235a 	.word	0x453b235a
 801f5a8:	514b      	.short	0x514b
			PARGraph_B = i;
 801f5aa:	4656      	mov	r6, sl
 801f5ac:	2701      	movs	r7, #1
 801f5ae:	e732      	b.n	801f416 <main+0xe8e>
			PARGraph_G = i;
 801f5b0:	46d6      	mov	lr, sl
 801f5b2:	f04f 0c01 	mov.w	ip, #1
 801f5b6:	e72e      	b.n	801f416 <main+0xe8e>
			PARGraph_R = i;
 801f5b8:	46d0      	mov	r8, sl
 801f5ba:	f04f 0901 	mov.w	r9, #1
 801f5be:	e72a      	b.n	801f416 <main+0xe8e>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f5c0:	4a82      	ldr	r2, [pc, #520]	; (801f7cc <main+0x1244>)
 801f5c2:	e78e      	b.n	801f4e2 <main+0xf5a>
			BlueTooth_On();
 801f5c4:	f7ea fd0c 	bl	8009fe0 <BlueTooth_On>
 801f5c8:	e7c0      	b.n	801f54c <main+0xfc4>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f5ca:	f003 0304 	and.w	r3, r3, #4
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	4b7f      	ldr	r3, [pc, #508]	; (801f7d0 <main+0x1248>)
 801f5d2:	4880      	ldr	r0, [pc, #512]	; (801f7d4 <main+0x124c>)
 801f5d4:	bf08      	it	eq
 801f5d6:	4618      	moveq	r0, r3
 801f5d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 801f5dc:	f24e 4184 	movw	r1, #58500	; 0xe484
 801f5e0:	bf08      	it	eq
 801f5e2:	4619      	moveq	r1, r3
 801f5e4:	e7c3      	b.n	801f56e <main+0xfe6>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801f5e6:	22fa      	movs	r2, #250	; 0xfa
 801f5e8:	e7d4      	b.n	801f594 <main+0x100c>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 801f5ea:	4b7b      	ldr	r3, [pc, #492]	; (801f7d8 <main+0x1250>)
 801f5ec:	2201      	movs	r2, #1
 801f5ee:	701a      	strb	r2, [r3, #0]
 801f5f0:	f7f1 f9bc 	bl	801096c <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 801f5f4:	4c79      	ldr	r4, [pc, #484]	; (801f7dc <main+0x1254>)
  htim7.Init.Prescaler = 60000;
 801f5f6:	497a      	ldr	r1, [pc, #488]	; (801f7e0 <main+0x1258>)
 801f5f8:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f5fc:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 801f5fe:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f602:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 801f604:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f606:	931b      	str	r3, [sp, #108]	; 0x6c
 801f608:	931c      	str	r3, [sp, #112]	; 0x70
 801f60a:	931d      	str	r3, [sp, #116]	; 0x74
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f60c:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 801f60e:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801f610:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f612:	f7e6 fcd5 	bl	8005fc0 <HAL_TIM_Base_Init>
 801f616:	b310      	cbz	r0, 801f65e <main+0x10d6>
 801f618:	e7fe      	b.n	801f618 <main+0x1090>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 801f61a:	4b6f      	ldr	r3, [pc, #444]	; (801f7d8 <main+0x1250>)
 801f61c:	2202      	movs	r2, #2
 801f61e:	701a      	strb	r2, [r3, #0]
 801f620:	f7f1 f976 	bl	8010910 <GUI_Measure_Screen>
 801f624:	f7f1 f9a2 	bl	801096c <GUI_Measure2_Screen>
 801f628:	f7f1 f9d8 	bl	80109dc <GUI_Measure3_Screen>
 801f62c:	e7e2      	b.n	801f5f4 <main+0x106c>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 801f62e:	4b6a      	ldr	r3, [pc, #424]	; (801f7d8 <main+0x1250>)
 801f630:	2201      	movs	r2, #1
 801f632:	701a      	strb	r2, [r3, #0]
 801f634:	f7f0 ffd0 	bl	80105d8 <GUI_Graph_Screen>
 801f638:	e7dc      	b.n	801f5f4 <main+0x106c>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 801f63a:	4b67      	ldr	r3, [pc, #412]	; (801f7d8 <main+0x1250>)
 801f63c:	220e      	movs	r2, #14
 801f63e:	701a      	strb	r2, [r3, #0]
 801f640:	f7f1 fa02 	bl	8010a48 <GUI_Color_Screen>
 801f644:	e7d6      	b.n	801f5f4 <main+0x106c>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();	break;
 801f646:	4b64      	ldr	r3, [pc, #400]	; (801f7d8 <main+0x1250>)
 801f648:	2201      	movs	r2, #1
 801f64a:	701a      	strb	r2, [r3, #0]
 801f64c:	f7f1 fd6a 	bl	8011124 <GUI_ColorRend_Screen>
 801f650:	e7d0      	b.n	801f5f4 <main+0x106c>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 801f652:	9a02      	ldr	r2, [sp, #8]
 801f654:	2301      	movs	r3, #1
 801f656:	7013      	strb	r3, [r2, #0]
 801f658:	f7f1 f95a 	bl	8010910 <GUI_Measure_Screen>
 801f65c:	e7ca      	b.n	801f5f4 <main+0x106c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f65e:	901b      	str	r0, [sp, #108]	; 0x6c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f660:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801f662:	a91b      	add	r1, sp, #108	; 0x6c
 801f664:	4620      	mov	r0, r4
 801f666:	f7e6 ff2b 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 801f66a:	4606      	mov	r6, r0
 801f66c:	b100      	cbz	r0, 801f670 <main+0x10e8>
 801f66e:	e7fe      	b.n	801f66e <main+0x10e6>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 801f670:	4d5c      	ldr	r5, [pc, #368]	; (801f7e4 <main+0x125c>)
	HAL_Delay(1);
 801f672:	2001      	movs	r0, #1
 801f674:	f7e1 fcda 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f678:	2037      	movs	r0, #55	; 0x37
 801f67a:	f7e2 f9c5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 801f67e:	682a      	ldr	r2, [r5, #0]
 801f680:	6813      	ldr	r3, [r2, #0]
 801f682:	f043 0320 	orr.w	r3, r3, #32
 801f686:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801f688:	2001      	movs	r0, #1
 801f68a:	f7e1 fccf 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 801f68e:	4620      	mov	r0, r4
 801f690:	f7e6 fb48 	bl	8005d24 <HAL_TIM_Base_Start>
	HAL_Delay(1);
 801f694:	2001      	movs	r0, #1
 801f696:	f7e1 fcc9 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 801f69a:	4620      	mov	r0, r4
 801f69c:	f7e6 fb5c 	bl	8005d58 <HAL_TIM_Base_Start_IT>
	uint8_t exp_stable = 0, start = 1;
 801f6a0:	2301      	movs	r3, #1
 801f6a2:	9505      	str	r5, [sp, #20]
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f6a4:	4d50      	ldr	r5, [pc, #320]	; (801f7e8 <main+0x1260>)
	uint8_t exp_stable = 0, start = 1;
 801f6a6:	9304      	str	r3, [sp, #16]
	uint32_t cnt_delay = 0, scr_refresh = 0, scr_refresh_measure = 0, bat_refresh = 0;
 801f6a8:	4637      	mov	r7, r6
 801f6aa:	46b1      	mov	r9, r6
 801f6ac:	4634      	mov	r4, r6
	uint8_t exp_stable = 0, start = 1;
 801f6ae:	9603      	str	r6, [sp, #12]
	 if(send_bluetooth) 
 801f6b0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 801f814 <main+0x128c>
	 usb_receive_processing();
 801f6b4:	f7fe fa18 	bl	801dae8 <usb_receive_processing>
	 if(send_bluetooth) 
 801f6b8:	f898 3000 	ldrb.w	r3, [r8]
 801f6bc:	b143      	cbz	r3, 801f6d0 <main+0x1148>
		 	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&data_bluetooth_send, 4122);
 801f6be:	f241 021a 	movw	r2, #4122	; 0x101a
 801f6c2:	494a      	ldr	r1, [pc, #296]	; (801f7ec <main+0x1264>)
 801f6c4:	4847      	ldr	r0, [pc, #284]	; (801f7e4 <main+0x125c>)
 801f6c6:	f7e7 f917 	bl	80068f8 <HAL_UART_Transmit_DMA>
			send_bluetooth = 0;
 801f6ca:	2300      	movs	r3, #0
 801f6cc:	f888 3000 	strb.w	r3, [r8]
 801f6d0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 801f818 <main+0x1290>
		while(start)
 801f6d4:	9b04      	ldr	r3, [sp, #16]
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	f040 80a4 	bne.w	801f824 <main+0x129c>
		if(!exp_set){
 801f6dc:	4b44      	ldr	r3, [pc, #272]	; (801f7f0 <main+0x1268>)
 801f6de:	781b      	ldrb	r3, [r3, #0]
 801f6e0:	b9b3      	cbnz	r3, 801f710 <main+0x1188>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f6e2:	4b44      	ldr	r3, [pc, #272]	; (801f7f4 <main+0x126c>)
 801f6e4:	f8df a134 	ldr.w	sl, [pc, #308]	; 801f81c <main+0x1294>
 801f6e8:	4943      	ldr	r1, [pc, #268]	; (801f7f8 <main+0x1270>)
 801f6ea:	ed93 0a00 	vldr	s0, [r3]
 801f6ee:	f8ba 0000 	ldrh.w	r0, [sl]
 801f6f2:	f7fa fd99 	bl	801a228 <Rabs_calc_Factor1>
 801f6f6:	4b41      	ldr	r3, [pc, #260]	; (801f7fc <main+0x1274>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801f6f8:	492a      	ldr	r1, [pc, #168]	; (801f7a4 <main+0x121c>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f6fa:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801f6fe:	edd1 0a00 	vldr	s1, [r1]
 801f702:	4b3f      	ldr	r3, [pc, #252]	; (801f800 <main+0x1278>)
 801f704:	4a3f      	ldr	r2, [pc, #252]	; (801f804 <main+0x127c>)
 801f706:	f8ba 1000 	ldrh.w	r1, [sl]
 801f70a:	483b      	ldr	r0, [pc, #236]	; (801f7f8 <main+0x1270>)
 801f70c:	f7fa fdc0 	bl	801a290 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801f710:	f898 3000 	ldrb.w	r3, [r8]
 801f714:	b92b      	cbnz	r3, 801f722 <main+0x119a>
 801f716:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f71a:	4939      	ldr	r1, [pc, #228]	; (801f800 <main+0x1278>)
 801f71c:	483a      	ldr	r0, [pc, #232]	; (801f808 <main+0x1280>)
 801f71e:	f001 f8e5 	bl	80208ec <memcpy>
			exp_start = 0;
 801f722:	4b3a      	ldr	r3, [pc, #232]	; (801f80c <main+0x1284>)
 801f724:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 801f820 <main+0x1298>
 801f728:	2200      	movs	r2, #0
 801f72a:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 801f72c:	9b02      	ldr	r3, [sp, #8]
 801f72e:	781b      	ldrb	r3, [r3, #0]
 801f730:	1e5a      	subs	r2, r3, #1
 801f732:	2a02      	cmp	r2, #2
 801f734:	f104 0b01 	add.w	fp, r4, #1
 801f738:	f200 80c1 	bhi.w	801f8be <main+0x1336>
 801f73c:	f89a 3000 	ldrb.w	r3, [sl]
 801f740:	2b00      	cmp	r3, #0
 801f742:	f040 815c 	bne.w	801f9fe <main+0x1476>
			if(!pause & !exp_set)
 801f746:	4b2a      	ldr	r3, [pc, #168]	; (801f7f0 <main+0x1268>)
 801f748:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801f74a:	465c      	mov	r4, fp
			if(!pause & !exp_set)
 801f74c:	b93b      	cbnz	r3, 801f75e <main+0x11d6>
				scr_refresh_measure++;
 801f74e:	3701      	adds	r7, #1
				if(scr_refresh_measure == 28 )
 801f750:	2f1c      	cmp	r7, #28
 801f752:	d104      	bne.n	801f75e <main+0x11d6>
 801f754:	9306      	str	r3, [sp, #24]
					Calculate_Data();
 801f756:	f7fd fe41 	bl	801d3dc <Calculate_Data>
					scr_refresh_measure = 0;
 801f75a:	9b06      	ldr	r3, [sp, #24]
 801f75c:	461f      	mov	r7, r3
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801f75e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801f762:	f240 80d7 	bls.w	801f914 <main+0x138c>
 801f766:	782b      	ldrb	r3, [r5, #0]
 801f768:	2b05      	cmp	r3, #5
 801f76a:	d90d      	bls.n	801f788 <main+0x1200>
 801f76c:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
 801f770:	f240 80d0 	bls.w	801f914 <main+0x138c>
 801f774:	782b      	ldrb	r3, [r5, #0]
 801f776:	2b05      	cmp	r3, #5
 801f778:	d902      	bls.n	801f780 <main+0x11f8>
 801f77a:	782b      	ldrb	r3, [r5, #0]
 801f77c:	2b07      	cmp	r3, #7
 801f77e:	d903      	bls.n	801f788 <main+0x1200>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f780:	782b      	ldrb	r3, [r5, #0]
 801f782:	2b07      	cmp	r3, #7
 801f784:	f240 80c6 	bls.w	801f914 <main+0x138c>
								auto_exposure();
 801f788:	f7fe fc28 	bl	801dfdc <auto_exposure>
								max_el = 0;
 801f78c:	4b20      	ldr	r3, [pc, #128]	; (801f810 <main+0x1288>)
 801f78e:	2400      	movs	r4, #0
 801f790:	801c      	strh	r4, [r3, #0]
 801f792:	e0bf      	b.n	801f914 <main+0x138c>
 801f794:	20000ebc 	.word	0x20000ebc
 801f798:	20009d2c 	.word	0x20009d2c
 801f79c:	20009d28 	.word	0x20009d28
 801f7a0:	20005701 	.word	0x20005701
 801f7a4:	20009d34 	.word	0x20009d34
 801f7a8:	0812c020 	.word	0x0812c020
 801f7ac:	0812a050 	.word	0x0812a050
 801f7b0:	2009571a 	.word	0x2009571a
 801f7b4:	20090ac2 	.word	0x20090ac2
 801f7b8:	200056ff 	.word	0x200056ff
 801f7bc:	20005704 	.word	0x20005704
 801f7c0:	00051d00 	.word	0x00051d00
 801f7c4:	20091058 	.word	0x20091058
 801f7c8:	20055954 	.word	0x20055954
 801f7cc:	20009d24 	.word	0x20009d24
 801f7d0:	00018100 	.word	0x00018100
 801f7d4:	0006ca00 	.word	0x0006ca00
 801f7d8:	2000022a 	.word	0x2000022a
 801f7dc:	20095d34 	.word	0x20095d34
 801f7e0:	40001400 	.word	0x40001400
 801f7e4:	20095abc 	.word	0x20095abc
 801f7e8:	200905b6 	.word	0x200905b6
 801f7ec:	2008f59c 	.word	0x2008f59c
 801f7f0:	20000ebf 	.word	0x20000ebf
 801f7f4:	2005193c 	.word	0x2005193c
 801f7f8:	2000e53c 	.word	0x2000e53c
 801f7fc:	20009d30 	.word	0x20009d30
 801f800:	2000c53c 	.word	0x2000c53c
 801f804:	20051940 	.word	0x20051940
 801f808:	2000d53c 	.word	0x2000d53c
 801f80c:	20000ec0 	.word	0x20000ec0
 801f810:	200905c4 	.word	0x200905c4
 801f814:	200905d0 	.word	0x200905d0
 801f818:	20055952 	.word	0x20055952
 801f81c:	20009d22 	.word	0x20009d22
 801f820:	20005728 	.word	0x20005728
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f824:	4b87      	ldr	r3, [pc, #540]	; (801fa44 <main+0x14bc>)
 801f826:	f8df a25c 	ldr.w	sl, [pc, #604]	; 801fa84 <main+0x14fc>
 801f82a:	4987      	ldr	r1, [pc, #540]	; (801fa48 <main+0x14c0>)
 801f82c:	ed93 0a00 	vldr	s0, [r3]
 801f830:	f8ba 0000 	ldrh.w	r0, [sl]
 801f834:	f7fa fcf8 	bl	801a228 <Rabs_calc_Factor1>
 801f838:	4b84      	ldr	r3, [pc, #528]	; (801fa4c <main+0x14c4>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f83a:	4985      	ldr	r1, [pc, #532]	; (801fa50 <main+0x14c8>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f83c:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f840:	edd1 0a00 	vldr	s1, [r1]
 801f844:	4b83      	ldr	r3, [pc, #524]	; (801fa54 <main+0x14cc>)
 801f846:	4a84      	ldr	r2, [pc, #528]	; (801fa58 <main+0x14d0>)
 801f848:	f8ba 1000 	ldrh.w	r1, [sl]
 801f84c:	487e      	ldr	r0, [pc, #504]	; (801fa48 <main+0x14c0>)
 801f84e:	f7fa fd1f 	bl	801a290 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801f852:	f898 3000 	ldrb.w	r3, [r8]
 801f856:	b92b      	cbnz	r3, 801f864 <main+0x12dc>
 801f858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f85c:	497d      	ldr	r1, [pc, #500]	; (801fa54 <main+0x14cc>)
 801f85e:	487f      	ldr	r0, [pc, #508]	; (801fa5c <main+0x14d4>)
 801f860:	f001 f844 	bl	80208ec <memcpy>
			cnt_delay++;
 801f864:	3401      	adds	r4, #1
			Calculate_Data();
 801f866:	f7fd fdb9 	bl	801d3dc <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f86a:	2c14      	cmp	r4, #20
 801f86c:	f67f af32 	bls.w	801f6d4 <main+0x114c>
 801f870:	782b      	ldrb	r3, [r5, #0]
 801f872:	2b05      	cmp	r3, #5
 801f874:	d910      	bls.n	801f898 <main+0x1310>
 801f876:	2c32      	cmp	r4, #50	; 0x32
 801f878:	f67f af2c 	bls.w	801f6d4 <main+0x114c>
 801f87c:	782b      	ldrb	r3, [r5, #0]
 801f87e:	2b05      	cmp	r3, #5
 801f880:	d902      	bls.n	801f888 <main+0x1300>
 801f882:	782b      	ldrb	r3, [r5, #0]
 801f884:	2b07      	cmp	r3, #7
 801f886:	d907      	bls.n	801f898 <main+0x1310>
 801f888:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 801f88c:	f67f af22 	bls.w	801f6d4 <main+0x114c>
 801f890:	782b      	ldrb	r3, [r5, #0]
 801f892:	2b07      	cmp	r3, #7
 801f894:	f67f af1e 	bls.w	801f6d4 <main+0x114c>
								auto_exposure();
 801f898:	f7fe fba0 	bl	801dfdc <auto_exposure>
								max_el = 0;
 801f89c:	4b70      	ldr	r3, [pc, #448]	; (801fa60 <main+0x14d8>)
 801f89e:	2400      	movs	r4, #0
 801f8a0:	801c      	strh	r4, [r3, #0]
								exp_stable = exp_stable+1;
 801f8a2:	9b03      	ldr	r3, [sp, #12]
 801f8a4:	3301      	adds	r3, #1
 801f8a6:	b2db      	uxtb	r3, r3
 801f8a8:	9303      	str	r3, [sp, #12]
								exp_start = 1;
 801f8aa:	4b6e      	ldr	r3, [pc, #440]	; (801fa64 <main+0x14dc>)
 801f8ac:	2201      	movs	r2, #1
 801f8ae:	701a      	strb	r2, [r3, #0]
 801f8b0:	9b03      	ldr	r3, [sp, #12]
 801f8b2:	2b0a      	cmp	r3, #10
 801f8b4:	bf8c      	ite	hi
 801f8b6:	2300      	movhi	r3, #0
 801f8b8:	2301      	movls	r3, #1
 801f8ba:	9304      	str	r3, [sp, #16]
 801f8bc:	e70a      	b.n	801f6d4 <main+0x114c>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 801f8be:	2b05      	cmp	r3, #5
 801f8c0:	f040 809d 	bne.w	801f9fe <main+0x1476>
 801f8c4:	f89a 3000 	ldrb.w	r3, [sl]
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	f040 8098 	bne.w	801f9fe <main+0x1476>
			if(!pause & !exp_set)
 801f8ce:	4b66      	ldr	r3, [pc, #408]	; (801fa68 <main+0x14e0>)
 801f8d0:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801f8d2:	465c      	mov	r4, fp
			if(!pause & !exp_set)
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	f040 80ae 	bne.w	801fa36 <main+0x14ae>
				scr_refresh_measure++;
 801f8da:	3701      	adds	r7, #1
				if(scr_refresh_measure == 28 )
 801f8dc:	2f1c      	cmp	r7, #28
 801f8de:	f040 80aa 	bne.w	801fa36 <main+0x14ae>
 801f8e2:	9306      	str	r3, [sp, #24]
					Calculate_Data();
 801f8e4:	f7fd fd7a 	bl	801d3dc <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f8e8:	9b06      	ldr	r3, [sp, #24]
 801f8ea:	2c28      	cmp	r4, #40	; 0x28
					scr_refresh_measure = 0;
 801f8ec:	461f      	mov	r7, r3
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f8ee:	d911      	bls.n	801f914 <main+0x138c>
 801f8f0:	782b      	ldrb	r3, [r5, #0]
 801f8f2:	2b05      	cmp	r3, #5
 801f8f4:	f67f af48 	bls.w	801f788 <main+0x1200>
 801f8f8:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
 801f8fc:	d90a      	bls.n	801f914 <main+0x138c>
 801f8fe:	782b      	ldrb	r3, [r5, #0]
 801f900:	2b05      	cmp	r3, #5
 801f902:	d903      	bls.n	801f90c <main+0x1384>
 801f904:	782b      	ldrb	r3, [r5, #0]
 801f906:	2b07      	cmp	r3, #7
 801f908:	f67f af3e 	bls.w	801f788 <main+0x1200>
 801f90c:	f5bb 7ffa 	cmp.w	fp, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f910:	f63f af36 	bhi.w	801f780 <main+0x11f8>
        if(GUI_screen_state == Graph_Screen)
 801f914:	9b02      	ldr	r3, [sp, #8]
 801f916:	781b      	ldrb	r3, [r3, #0]
 801f918:	2b04      	cmp	r3, #4
 801f91a:	f040 8090 	bne.w	801fa3e <main+0x14b6>
            scr_refresh++;
 801f91e:	f109 0901 	add.w	r9, r9, #1
            if(scr_refresh == 40 ){
 801f922:	f1b9 0f28 	cmp.w	r9, #40	; 0x28
 801f926:	d134      	bne.n	801f992 <main+0x140a>
							block_graph = 1;
 801f928:	2301      	movs	r3, #1
 801f92a:	f888 3000 	strb.w	r3, [r8]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 801f92e:	4b4f      	ldr	r3, [pc, #316]	; (801fa6c <main+0x14e4>)
 801f930:	f8df 9154 	ldr.w	r9, [pc, #340]	; 801fa88 <main+0x1500>
 801f934:	781b      	ldrb	r3, [r3, #0]
 801f936:	f8df b154 	ldr.w	fp, [pc, #340]	; 801fa8c <main+0x1504>
 801f93a:	2b04      	cmp	r3, #4
 801f93c:	d10a      	bne.n	801f954 <main+0x13cc>
 801f93e:	f899 2000 	ldrb.w	r2, [r9]
 801f942:	f89b 3000 	ldrb.w	r3, [fp]
 801f946:	4293      	cmp	r3, r2
 801f948:	d104      	bne.n	801f954 <main+0x13cc>
 801f94a:	2114      	movs	r1, #20
 801f94c:	4a48      	ldr	r2, [pc, #288]	; (801fa70 <main+0x14e8>)
 801f94e:	4608      	mov	r0, r1
 801f950:	f7fc fc26 	bl	801c1a0 <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801f954:	f89b 1000 	ldrb.w	r1, [fp]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f958:	4840      	ldr	r0, [pc, #256]	; (801fa5c <main+0x14d4>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801f95a:	f889 1000 	strb.w	r1, [r9]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f95e:	f7fa fcf9 	bl	801a354 <Rabs_find_MAX>
 801f962:	4b44      	ldr	r3, [pc, #272]	; (801fa74 <main+0x14ec>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801f964:	f899 0000 	ldrb.w	r0, [r9]
 801f968:	493c      	ldr	r1, [pc, #240]	; (801fa5c <main+0x14d4>)
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f96a:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801f96e:	f7fc fbc5 	bl	801c0fc <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801f972:	f899 3000 	ldrb.w	r3, [r9]
 801f976:	9300      	str	r3, [sp, #0]
 801f978:	2114      	movs	r1, #20
 801f97a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f97e:	4a3c      	ldr	r2, [pc, #240]	; (801fa70 <main+0x14e8>)
 801f980:	4608      	mov	r0, r1
								block_graph = 0;
 801f982:	f04f 0900 	mov.w	r9, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801f986:	f7fc f9ff 	bl	801bd88 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 801f98a:	f888 9000 	strb.w	r9, [r8]
								GUI_SignalLevel();
 801f98e:	f7f0 ff5d 	bl	801084c <GUI_SignalLevel>
        GUI_Display_Refresh();
 801f992:	f7f1 fc65 	bl	8011260 <GUI_Display_Refresh>
        if (pause && !Mode_EL)
 801f996:	f89a 3000 	ldrb.w	r3, [sl]
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d047      	beq.n	801fa2e <main+0x14a6>
 801f99e:	4b36      	ldr	r3, [pc, #216]	; (801fa78 <main+0x14f0>)
 801f9a0:	781b      	ldrb	r3, [r3, #0]
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	d143      	bne.n	801fa2e <main+0x14a6>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801f9a6:	2201      	movs	r2, #1
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 801f9a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801f9ac:	4833      	ldr	r0, [pc, #204]	; (801fa7c <main+0x14f4>)
        bat_refresh++;
 801f9ae:	3601      	adds	r6, #1
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 801f9b0:	f7e2 fea2 	bl	80026f8 <HAL_GPIO_WritePin>
        if (bat_refresh == 1000)
 801f9b4:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 801f9b8:	d11a      	bne.n	801f9f0 <main+0x1468>
        	if(percentage_charge < percentage_charge_prev)
 801f9ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801fa90 <main+0x1508>
 801f9be:	4e30      	ldr	r6, [pc, #192]	; (801fa80 <main+0x14f8>)
        	Get_Battery_Level();
 801f9c0:	f7fd fe40 	bl	801d644 <Get_Battery_Level>
        	if(percentage_charge < percentage_charge_prev)
 801f9c4:	ed98 0b00 	vldr	d0, [r8]
 801f9c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f9cc:	ec51 0b10 	vmov	r0, r1, d0
 801f9d0:	ed8d 0b06 	vstr	d0, [sp, #24]
 801f9d4:	f7e1 f896 	bl	8000b04 <__aeabi_dcmplt>
 801f9d8:	ed9d 0b06 	vldr	d0, [sp, #24]
 801f9dc:	b348      	cbz	r0, 801fa32 <main+0x14aa>
        		GUI_Battery_Level(0, 0, percentage_charge);
 801f9de:	2100      	movs	r1, #0
 801f9e0:	4608      	mov	r0, r1
 801f9e2:	f7f6 fd89 	bl	80164f8 <GUI_Battery_Level>
        		percentage_charge_prev = percentage_charge;
 801f9e6:	e9d8 2300 	ldrd	r2, r3, [r8]
 801f9ea:	e9c6 2300 	strd	r2, r3, [r6]
        	bat_refresh = 0;
 801f9ee:	2600      	movs	r6, #0
        __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 801f9f0:	9b05      	ldr	r3, [sp, #20]
 801f9f2:	681a      	ldr	r2, [r3, #0]
 801f9f4:	6813      	ldr	r3, [r2, #0]
 801f9f6:	f043 0320 	orr.w	r3, r3, #32
 801f9fa:	6013      	str	r3, [r2, #0]
	 usb_receive_processing();
 801f9fc:	e658      	b.n	801f6b0 <main+0x1128>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f9fe:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
				cnt_delay++;
 801fa02:	465c      	mov	r4, fp
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801fa04:	d986      	bls.n	801f914 <main+0x138c>
 801fa06:	782b      	ldrb	r3, [r5, #0]
 801fa08:	2b05      	cmp	r3, #5
 801fa0a:	f67f aebd 	bls.w	801f788 <main+0x1200>
 801fa0e:	f240 33b6 	movw	r3, #950	; 0x3b6
 801fa12:	459b      	cmp	fp, r3
 801fa14:	f67f af7e 	bls.w	801f914 <main+0x138c>
 801fa18:	782b      	ldrb	r3, [r5, #0]
 801fa1a:	2b05      	cmp	r3, #5
 801fa1c:	d903      	bls.n	801fa26 <main+0x149e>
 801fa1e:	782b      	ldrb	r3, [r5, #0]
 801fa20:	2b07      	cmp	r3, #7
 801fa22:	f67f aeb1 	bls.w	801f788 <main+0x1200>
 801fa26:	f240 53aa 	movw	r3, #1450	; 0x5aa
 801fa2a:	459b      	cmp	fp, r3
 801fa2c:	e770      	b.n	801f910 <main+0x1388>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 801fa2e:	2200      	movs	r2, #0
 801fa30:	e7ba      	b.n	801f9a8 <main+0x1420>
        	bat_refresh = 0;
 801fa32:	4606      	mov	r6, r0
 801fa34:	e7dc      	b.n	801f9f0 <main+0x1468>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801fa36:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801fa3a:	f63f af59 	bhi.w	801f8f0 <main+0x1368>
        } else{__asm("nop");}
 801fa3e:	bf00      	nop
 801fa40:	e7a7      	b.n	801f992 <main+0x140a>
 801fa42:	bf00      	nop
 801fa44:	2005193c 	.word	0x2005193c
 801fa48:	2000e53c 	.word	0x2000e53c
 801fa4c:	20009d30 	.word	0x20009d30
 801fa50:	20009d34 	.word	0x20009d34
 801fa54:	2000c53c 	.word	0x2000c53c
 801fa58:	20051940 	.word	0x20051940
 801fa5c:	2000d53c 	.word	0x2000d53c
 801fa60:	200905c4 	.word	0x200905c4
 801fa64:	20000ec0 	.word	0x20000ec0
 801fa68:	20000ebf 	.word	0x20000ebf
 801fa6c:	2000022a 	.word	0x2000022a
 801fa70:	20009a2e 	.word	0x20009a2e
 801fa74:	20095b48 	.word	0x20095b48
 801fa78:	20000ebc 	.word	0x20000ebc
 801fa7c:	48000800 	.word	0x48000800
 801fa80:	20000ec8 	.word	0x20000ec8
 801fa84:	20009d22 	.word	0x20009d22
 801fa88:	20000ebd 	.word	0x20000ebd
 801fa8c:	2000570a 	.word	0x2000570a
 801fa90:	200905c8 	.word	0x200905c8

0801fa94 <_Error_Handler>:
//   HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);

}

void _Error_Handler(char *file, int line)
{
 801fa94:	e7fe      	b.n	801fa94 <_Error_Handler>
	...

0801fa98 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 801fa98:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 801fa9a:	4c06      	ldr	r4, [pc, #24]	; (801fab4 <SD_CheckStatus.isra.0+0x1c>)
 801fa9c:	2301      	movs	r3, #1
 801fa9e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801faa0:	f7fc fde0 	bl	801c664 <BSP_SD_GetCardState>
 801faa4:	4623      	mov	r3, r4
 801faa6:	b918      	cbnz	r0, 801fab0 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 801faa8:	7822      	ldrb	r2, [r4, #0]
 801faaa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801faae:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 801fab0:	7818      	ldrb	r0, [r3, #0]
}
 801fab2:	bd10      	pop	{r4, pc}
 801fab4:	20000ed0 	.word	0x20000ed0

0801fab8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801fab8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801faba:	4c05      	ldr	r4, [pc, #20]	; (801fad0 <SD_initialize+0x18>)
 801fabc:	2301      	movs	r3, #1
 801fabe:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801fac0:	f7fc fd98 	bl	801c5f4 <BSP_SD_Init>
 801fac4:	b910      	cbnz	r0, 801facc <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 801fac6:	f7ff ffe7 	bl	801fa98 <SD_CheckStatus.isra.0>
 801faca:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801facc:	7820      	ldrb	r0, [r4, #0]
}
 801face:	bd10      	pop	{r4, pc}
 801fad0:	20000ed0 	.word	0x20000ed0

0801fad4 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 801fad4:	f7ff bfe0 	b.w	801fa98 <SD_CheckStatus.isra.0>

0801fad8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801fad8:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801fada:	4c16      	ldr	r4, [pc, #88]	; (801fb34 <SD_read+0x5c>)
{
 801fadc:	4608      	mov	r0, r1
 801fade:	4611      	mov	r1, r2
  ReadStatus = 0;
 801fae0:	2200      	movs	r2, #0
 801fae2:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801fae4:	461a      	mov	r2, r3
 801fae6:	f7fc fda1 	bl	801c62c <BSP_SD_ReadBlocks_DMA>
 801faea:	b108      	cbz	r0, 801faf0 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 801faec:	2001      	movs	r0, #1
 801faee:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 801faf0:	f7e1 fa96 	bl	8001020 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801faf4:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801faf8:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801fafa:	6823      	ldr	r3, [r4, #0]
 801fafc:	b19b      	cbz	r3, 801fb26 <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 801fafe:	6823      	ldr	r3, [r4, #0]
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d0f3      	beq.n	801faec <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 801fb04:	2300      	movs	r3, #0
 801fb06:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801fb08:	f7e1 fa8a 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801fb0c:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801fb10:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801fb12:	f7e1 fa85 	bl	8001020 <HAL_GetTick>
 801fb16:	1b40      	subs	r0, r0, r5
 801fb18:	42a0      	cmp	r0, r4
 801fb1a:	d8e7      	bhi.n	801faec <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801fb1c:	f7fc fda2 	bl	801c664 <BSP_SD_GetCardState>
 801fb20:	2800      	cmp	r0, #0
 801fb22:	d1f6      	bne.n	801fb12 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 801fb24:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801fb26:	f7e1 fa7b 	bl	8001020 <HAL_GetTick>
 801fb2a:	1b80      	subs	r0, r0, r6
 801fb2c:	42a8      	cmp	r0, r5
 801fb2e:	d9e4      	bls.n	801fafa <SD_read+0x22>
 801fb30:	e7e5      	b.n	801fafe <SD_read+0x26>
 801fb32:	bf00      	nop
 801fb34:	20090610 	.word	0x20090610

0801fb38 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801fb38:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 801fb3a:	4c16      	ldr	r4, [pc, #88]	; (801fb94 <SD_write+0x5c>)
{
 801fb3c:	4608      	mov	r0, r1
 801fb3e:	4611      	mov	r1, r2
  WriteStatus = 0;
 801fb40:	2200      	movs	r2, #0
 801fb42:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801fb44:	461a      	mov	r2, r3
 801fb46:	f7fc fd7f 	bl	801c648 <BSP_SD_WriteBlocks_DMA>
 801fb4a:	b108      	cbz	r0, 801fb50 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 801fb4c:	2001      	movs	r0, #1
 801fb4e:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 801fb50:	f7e1 fa66 	bl	8001020 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801fb54:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801fb58:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801fb5a:	6823      	ldr	r3, [r4, #0]
 801fb5c:	b19b      	cbz	r3, 801fb86 <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 801fb5e:	6823      	ldr	r3, [r4, #0]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d0f3      	beq.n	801fb4c <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 801fb64:	2300      	movs	r3, #0
 801fb66:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801fb68:	f7e1 fa5a 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801fb6c:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801fb70:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801fb72:	f7e1 fa55 	bl	8001020 <HAL_GetTick>
 801fb76:	1b40      	subs	r0, r0, r5
 801fb78:	42a0      	cmp	r0, r4
 801fb7a:	d8e7      	bhi.n	801fb4c <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801fb7c:	f7fc fd72 	bl	801c664 <BSP_SD_GetCardState>
 801fb80:	2800      	cmp	r0, #0
 801fb82:	d1f6      	bne.n	801fb72 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 801fb84:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801fb86:	f7e1 fa4b 	bl	8001020 <HAL_GetTick>
 801fb8a:	1b80      	subs	r0, r0, r6
 801fb8c:	42a8      	cmp	r0, r5
 801fb8e:	d9e4      	bls.n	801fb5a <SD_write+0x22>
 801fb90:	e7e5      	b.n	801fb5e <SD_write+0x26>
 801fb92:	bf00      	nop
 801fb94:	20090614 	.word	0x20090614

0801fb98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801fb98:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801fb9a:	4b12      	ldr	r3, [pc, #72]	; (801fbe4 <SD_ioctl+0x4c>)
 801fb9c:	781b      	ldrb	r3, [r3, #0]
 801fb9e:	07db      	lsls	r3, r3, #31
{
 801fba0:	b08a      	sub	sp, #40	; 0x28
 801fba2:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801fba4:	d41b      	bmi.n	801fbde <SD_ioctl+0x46>

  switch (cmd)
 801fba6:	2903      	cmp	r1, #3
 801fba8:	d803      	bhi.n	801fbb2 <SD_ioctl+0x1a>
 801fbaa:	e8df f001 	tbb	[pc, r1]
 801fbae:	0510      	.short	0x0510
 801fbb0:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 801fbb2:	2004      	movs	r0, #4
  }

  return res;
}
 801fbb4:	b00a      	add	sp, #40	; 0x28
 801fbb6:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801fbb8:	a801      	add	r0, sp, #4
 801fbba:	f7fc fd5d 	bl	801c678 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801fbbe:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801fbc0:	6023      	str	r3, [r4, #0]
 801fbc2:	e004      	b.n	801fbce <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 801fbc4:	a801      	add	r0, sp, #4
 801fbc6:	f7fc fd57 	bl	801c678 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801fbca:	9b08      	ldr	r3, [sp, #32]
 801fbcc:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 801fbce:	2000      	movs	r0, #0
 801fbd0:	e7f0      	b.n	801fbb4 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 801fbd2:	a801      	add	r0, sp, #4
 801fbd4:	f7fc fd50 	bl	801c678 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801fbd8:	9b08      	ldr	r3, [sp, #32]
 801fbda:	0a5b      	lsrs	r3, r3, #9
 801fbdc:	e7f0      	b.n	801fbc0 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801fbde:	2003      	movs	r0, #3
 801fbe0:	e7e8      	b.n	801fbb4 <SD_ioctl+0x1c>
 801fbe2:	bf00      	nop
 801fbe4:	20000ed0 	.word	0x20000ed0

0801fbe8 <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801fbe8:	4b21      	ldr	r3, [pc, #132]	; (801fc70 <HAL_MspInit+0x88>)
{
 801fbea:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801fbec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fbee:	f042 0201 	orr.w	r2, r2, #1
 801fbf2:	661a      	str	r2, [r3, #96]	; 0x60
 801fbf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fbf6:	f002 0201 	and.w	r2, r2, #1
 801fbfa:	9200      	str	r2, [sp, #0]
 801fbfc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801fbfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fc00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801fc04:	659a      	str	r2, [r3, #88]	; 0x58
 801fc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fc08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801fc0c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801fc0e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 801fc10:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801fc12:	f7e1 feb3 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 801fc16:	2200      	movs	r2, #0
 801fc18:	4611      	mov	r1, r2
 801fc1a:	f06f 000b 	mvn.w	r0, #11
 801fc1e:	f7e1 febf 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 801fc22:	2200      	movs	r2, #0
 801fc24:	4611      	mov	r1, r2
 801fc26:	f06f 000a 	mvn.w	r0, #10
 801fc2a:	f7e1 feb9 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801fc2e:	2200      	movs	r2, #0
 801fc30:	4611      	mov	r1, r2
 801fc32:	f06f 0009 	mvn.w	r0, #9
 801fc36:	f7e1 feb3 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801fc3a:	2200      	movs	r2, #0
 801fc3c:	4611      	mov	r1, r2
 801fc3e:	f06f 0004 	mvn.w	r0, #4
 801fc42:	f7e1 fead 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 801fc46:	2200      	movs	r2, #0
 801fc48:	4611      	mov	r1, r2
 801fc4a:	f06f 0003 	mvn.w	r0, #3
 801fc4e:	f7e1 fea7 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 801fc52:	2200      	movs	r2, #0
 801fc54:	4611      	mov	r1, r2
 801fc56:	f06f 0001 	mvn.w	r0, #1
 801fc5a:	f7e1 fea1 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801fc5e:	2200      	movs	r2, #0
 801fc60:	4611      	mov	r1, r2
 801fc62:	f04f 30ff 	mov.w	r0, #4294967295
 801fc66:	f7e1 fe9b 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801fc6a:	b003      	add	sp, #12
 801fc6c:	f85d fb04 	ldr.w	pc, [sp], #4
 801fc70:	40021000 	.word	0x40021000

0801fc74 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801fc74:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 801fc76:	6802      	ldr	r2, [r0, #0]
 801fc78:	4b31      	ldr	r3, [pc, #196]	; (801fd40 <HAL_LTDC_MspInit+0xcc>)
 801fc7a:	429a      	cmp	r2, r3
{
 801fc7c:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 801fc7e:	d15d      	bne.n	801fd3c <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801fc80:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fc84:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 801fc86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801fc88:	482e      	ldr	r0, [pc, #184]	; (801fd44 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 801fc8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801fc8e:	661a      	str	r2, [r3, #96]	; 0x60
 801fc90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fc92:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801fc96:	9200      	str	r2, [sp, #0]
 801fc98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801fc9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fc9c:	f042 0210 	orr.w	r2, r2, #16
 801fca0:	64da      	str	r2, [r3, #76]	; 0x4c
 801fca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fca4:	f002 0210 	and.w	r2, r2, #16
 801fca8:	9201      	str	r2, [sp, #4]
 801fcaa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801fcac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fcae:	f042 0202 	orr.w	r2, r2, #2
 801fcb2:	64da      	str	r2, [r3, #76]	; 0x4c
 801fcb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fcb6:	f002 0202 	and.w	r2, r2, #2
 801fcba:	9202      	str	r2, [sp, #8]
 801fcbc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801fcbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fcc0:	f042 0220 	orr.w	r2, r2, #32
 801fcc4:	64da      	str	r2, [r3, #76]	; 0x4c
 801fcc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fcc8:	f002 0220 	and.w	r2, r2, #32
 801fccc:	9203      	str	r2, [sp, #12]
 801fcce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801fcd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fcd2:	f042 0208 	orr.w	r2, r2, #8
 801fcd6:	64da      	str	r2, [r3, #76]	; 0x4c
 801fcd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fcda:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801fcdc:	f003 0308 	and.w	r3, r3, #8
 801fce0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fce2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fce4:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801fce6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fce8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801fcea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801fcee:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801fcf0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fcf2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fcf4:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801fcf6:	f7e2 fb89 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fcfa:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801fcfc:	a905      	add	r1, sp, #20
 801fcfe:	4812      	ldr	r0, [pc, #72]	; (801fd48 <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fd00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fd02:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd04:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd06:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fd08:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801fd0a:	f7e2 fb7f 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801fd0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fd12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd14:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801fd16:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd18:	480c      	ldr	r0, [pc, #48]	; (801fd4c <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801fd1a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fd1c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd1e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd20:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd22:	f7e2 fb73 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fd26:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fd2a:	a905      	add	r1, sp, #20
 801fd2c:	4808      	ldr	r0, [pc, #32]	; (801fd50 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fd2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fd30:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd32:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd34:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fd36:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fd38:	f7e2 fb68 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801fd3c:	b00a      	add	sp, #40	; 0x28
 801fd3e:	bd70      	pop	{r4, r5, r6, pc}
 801fd40:	40016800 	.word	0x40016800
 801fd44:	48001000 	.word	0x48001000
 801fd48:	48000400 	.word	0x48000400
 801fd4c:	48001400 	.word	0x48001400
 801fd50:	48000c00 	.word	0x48000c00

0801fd54 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801fd54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 801fd56:	6802      	ldr	r2, [r0, #0]
 801fd58:	4b0f      	ldr	r3, [pc, #60]	; (801fd98 <HAL_SPI_MspInit+0x44>)
 801fd5a:	429a      	cmp	r2, r3
 801fd5c:	d119      	bne.n	801fd92 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801fd5e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd62:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 801fd64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fd66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801fd6a:	661a      	str	r2, [r3, #96]	; 0x60
 801fd6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fd6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801fd72:	9300      	str	r3, [sp, #0]
 801fd74:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 801fd76:	2342      	movs	r3, #66	; 0x42
 801fd78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fd7a:	2302      	movs	r3, #2
 801fd7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd7e:	2300      	movs	r3, #0
 801fd80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fd82:	2303      	movs	r3, #3
 801fd84:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801fd8a:	2305      	movs	r3, #5
 801fd8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd8e:	f7e2 fb3d 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801fd92:	b007      	add	sp, #28
 801fd94:	f85d fb04 	ldr.w	pc, [sp], #4
 801fd98:	40013000 	.word	0x40013000

0801fd9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801fd9c:	b570      	push	{r4, r5, r6, lr}
 801fd9e:	4606      	mov	r6, r0
 801fda0:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801fda2:	2214      	movs	r2, #20
 801fda4:	2100      	movs	r1, #0
 801fda6:	a807      	add	r0, sp, #28
 801fda8:	f000 fdab 	bl	8020902 <memset>
  if(huart->Instance==LPUART1)
 801fdac:	6833      	ldr	r3, [r6, #0]
 801fdae:	4a48      	ldr	r2, [pc, #288]	; (801fed0 <HAL_UART_MspInit+0x134>)
 801fdb0:	4293      	cmp	r3, r2
 801fdb2:	d145      	bne.n	801fe40 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801fdb4:	4b47      	ldr	r3, [pc, #284]	; (801fed4 <HAL_UART_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fdb6:	4848      	ldr	r0, [pc, #288]	; (801fed8 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801fdb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801fdba:	f042 0201 	orr.w	r2, r2, #1
 801fdbe:	65da      	str	r2, [r3, #92]	; 0x5c
 801fdc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801fdc2:	f002 0201 	and.w	r2, r2, #1
 801fdc6:	9201      	str	r2, [sp, #4]
 801fdc8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801fdca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fdcc:	f042 0204 	orr.w	r2, r2, #4
 801fdd0:	64da      	str	r2, [r3, #76]	; 0x4c
 801fdd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fdd4:	f003 0304 	and.w	r3, r3, #4
 801fdd8:	9302      	str	r3, [sp, #8]
 801fdda:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801fddc:	2303      	movs	r3, #3
 801fdde:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fde0:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fde2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fde4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801fde6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fde8:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801fdea:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fdec:	f7e2 fb0e 	bl	800240c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  if(huart->Instance==USART2)
 801fdf0:	6832      	ldr	r2, [r6, #0]
 801fdf2:	4b3a      	ldr	r3, [pc, #232]	; (801fedc <HAL_UART_MspInit+0x140>)
 801fdf4:	429a      	cmp	r2, r3
 801fdf6:	d121      	bne.n	801fe3c <HAL_UART_MspInit+0xa0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801fdf8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fdfc:	a907      	add	r1, sp, #28
    __HAL_RCC_USART2_CLK_ENABLE();
 801fdfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fe00:	4837      	ldr	r0, [pc, #220]	; (801fee0 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART2_CLK_ENABLE();
 801fe02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801fe06:	659a      	str	r2, [r3, #88]	; 0x58
 801fe08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fe0a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 801fe0e:	9205      	str	r2, [sp, #20]
 801fe10:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801fe12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fe14:	f042 0208 	orr.w	r2, r2, #8
 801fe18:	64da      	str	r2, [r3, #76]	; 0x4c
 801fe1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fe1c:	f003 0308 	and.w	r3, r3, #8
 801fe20:	9306      	str	r3, [sp, #24]
 801fe22:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 801fe24:	2360      	movs	r3, #96	; 0x60
 801fe26:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fe28:	2302      	movs	r3, #2
 801fe2a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe2c:	2300      	movs	r3, #0
 801fe2e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fe30:	2303      	movs	r3, #3
 801fe32:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801fe34:	2307      	movs	r3, #7
 801fe36:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fe38:	f7e2 fae8 	bl	800240c <HAL_GPIO_Init>
//    HAL_NVIC_SetPriority(USART2_IRQn, 1, 3);
//	HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE END USART2_MspInit 1 */
  }

}
 801fe3c:	b00c      	add	sp, #48	; 0x30
 801fe3e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART1)
 801fe40:	4a28      	ldr	r2, [pc, #160]	; (801fee4 <HAL_UART_MspInit+0x148>)
 801fe42:	4293      	cmp	r3, r2
 801fe44:	d1d4      	bne.n	801fdf0 <HAL_UART_MspInit+0x54>
    __HAL_RCC_USART1_CLK_ENABLE();
 801fe46:	4b23      	ldr	r3, [pc, #140]	; (801fed4 <HAL_UART_MspInit+0x138>)
    hdma_usart1_tx.Instance = DMA1_Channel1;
 801fe48:	4c27      	ldr	r4, [pc, #156]	; (801fee8 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 801fe4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fe4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801fe50:	661a      	str	r2, [r3, #96]	; 0x60
 801fe52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fe54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801fe58:	9203      	str	r2, [sp, #12]
 801fe5a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801fe5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fe5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fe62:	64da      	str	r2, [r3, #76]	; 0x4c
 801fe64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fe66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe6a:	9304      	str	r3, [sp, #16]
 801fe6c:	9b04      	ldr	r3, [sp, #16]
    HAL_PWREx_EnableVddIO2();
 801fe6e:	f7e3 ffab 	bl	8003dc8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801fe72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801fe76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fe78:	2302      	movs	r3, #2
 801fe7a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fe7c:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe7e:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fe80:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fe82:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801fe84:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fe86:	4819      	ldr	r0, [pc, #100]	; (801feec <HAL_UART_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801fe88:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe8a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fe8c:	f7e2 fabe 	bl	800240c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 5);
 801fe90:	2205      	movs	r2, #5
 801fe92:	2101      	movs	r1, #1
 801fe94:	2025      	movs	r0, #37	; 0x25
 801fe96:	f7e1 fd83 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801fe9a:	2025      	movs	r0, #37	; 0x25
 801fe9c:	f7e1 fdb4 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801fea0:	4913      	ldr	r1, [pc, #76]	; (801fef0 <HAL_UART_MspInit+0x154>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801fea2:	60e5      	str	r5, [r4, #12]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801fea4:	2310      	movs	r3, #16
 801fea6:	2219      	movs	r2, #25
 801fea8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801feac:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801feae:	2380      	movs	r3, #128	; 0x80
 801feb0:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801feb2:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801feb4:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 801feb6:	61e5      	str	r5, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 801feb8:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801feba:	f7e1 fe27 	bl	8001b0c <HAL_DMA_Init>
 801febe:	b120      	cbz	r0, 801feca <HAL_UART_MspInit+0x12e>
      Error_Handler();
 801fec0:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801fec4:	480b      	ldr	r0, [pc, #44]	; (801fef4 <HAL_UART_MspInit+0x158>)
 801fec6:	f7ff fde5 	bl	801fa94 <_Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 801feca:	67b4      	str	r4, [r6, #120]	; 0x78
 801fecc:	62a6      	str	r6, [r4, #40]	; 0x28
 801fece:	e78f      	b.n	801fdf0 <HAL_UART_MspInit+0x54>
 801fed0:	40008000 	.word	0x40008000
 801fed4:	40021000 	.word	0x40021000
 801fed8:	48000800 	.word	0x48000800
 801fedc:	40004400 	.word	0x40004400
 801fee0:	48000c00 	.word	0x48000c00
 801fee4:	40013800 	.word	0x40013800
 801fee8:	200959c4 	.word	0x200959c4
 801feec:	48001800 	.word	0x48001800
 801fef0:	40020008 	.word	0x40020008
 801fef4:	08032478 	.word	0x08032478

0801fef8 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==LPUART1)
 801fef8:	6803      	ldr	r3, [r0, #0]
 801fefa:	4a13      	ldr	r2, [pc, #76]	; (801ff48 <HAL_UART_MspDeInit+0x50>)
 801fefc:	4293      	cmp	r3, r2
 801fefe:	d109      	bne.n	801ff14 <HAL_UART_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801ff00:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801ff04:	4811      	ldr	r0, [pc, #68]	; (801ff4c <HAL_UART_MspDeInit+0x54>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801ff06:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801ff08:	f023 0301 	bic.w	r3, r3, #1
 801ff0c:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801ff0e:	2103      	movs	r1, #3

	  /**USART2 GPIO Configuration
	  PD5     ------> USART2_TX
	  PD6     ------> USART2_RX
	  */
	  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 801ff10:	f7e2 bb54 	b.w	80025bc <HAL_GPIO_DeInit>
  else if(huart->Instance==USART1)
 801ff14:	4a0e      	ldr	r2, [pc, #56]	; (801ff50 <HAL_UART_MspDeInit+0x58>)
 801ff16:	4293      	cmp	r3, r2
 801ff18:	d109      	bne.n	801ff2e <HAL_UART_MspDeInit+0x36>
    __HAL_RCC_USART1_CLK_DISABLE();
 801ff1a:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_10);
 801ff1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 801ff22:	6e13      	ldr	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_10);
 801ff24:	480b      	ldr	r0, [pc, #44]	; (801ff54 <HAL_UART_MspDeInit+0x5c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 801ff26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ff2a:	6613      	str	r3, [r2, #96]	; 0x60
 801ff2c:	e7f0      	b.n	801ff10 <HAL_UART_MspDeInit+0x18>
  else if(huart->Instance==USART2)
 801ff2e:	4a0a      	ldr	r2, [pc, #40]	; (801ff58 <HAL_UART_MspDeInit+0x60>)
 801ff30:	4293      	cmp	r3, r2
 801ff32:	d108      	bne.n	801ff46 <HAL_UART_MspDeInit+0x4e>
	  __HAL_RCC_USART2_CLK_DISABLE();
 801ff34:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
	  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 801ff38:	2160      	movs	r1, #96	; 0x60
	  __HAL_RCC_USART2_CLK_DISABLE();
 801ff3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
	  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 801ff3c:	4807      	ldr	r0, [pc, #28]	; (801ff5c <HAL_UART_MspDeInit+0x64>)
	  __HAL_RCC_USART2_CLK_DISABLE();
 801ff3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ff42:	6593      	str	r3, [r2, #88]	; 0x58
 801ff44:	e7e4      	b.n	801ff10 <HAL_UART_MspDeInit+0x18>
 801ff46:	4770      	bx	lr
 801ff48:	40008000 	.word	0x40008000
 801ff4c:	48000800 	.word	0x48000800
 801ff50:	40013800 	.word	0x40013800
 801ff54:	48001800 	.word	0x48001800
 801ff58:	40004400 	.word	0x40004400
 801ff5c:	48000c00 	.word	0x48000c00

0801ff60 <HAL_ADC_MspInit>:
}



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801ff60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801ff62:	6802      	ldr	r2, [r0, #0]
 801ff64:	4b0e      	ldr	r3, [pc, #56]	; (801ffa0 <HAL_ADC_MspInit+0x40>)
 801ff66:	429a      	cmp	r2, r3
 801ff68:	d116      	bne.n	801ff98 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801ff6a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 801ff6e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ff72:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 801ff74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ff76:	480b      	ldr	r0, [pc, #44]	; (801ffa4 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 801ff78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ff7c:	64da      	str	r2, [r3, #76]	; 0x4c
 801ff7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ff84:	9300      	str	r3, [sp, #0]
 801ff86:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ff88:	2304      	movs	r3, #4
 801ff8a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801ff8c:	230b      	movs	r3, #11
 801ff8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ff90:	2300      	movs	r3, #0
 801ff92:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ff94:	f7e2 fa3a 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801ff98:	b007      	add	sp, #28
 801ff9a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ff9e:	bf00      	nop
 801ffa0:	50040000 	.word	0x50040000
 801ffa4:	48000800 	.word	0x48000800

0801ffa8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ffa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 801ffaa:	6803      	ldr	r3, [r0, #0]
 801ffac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 801ffb0:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 801ffb2:	d112      	bne.n	801ffda <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ffb4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ffb8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ffba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ffbc:	f042 0201 	orr.w	r2, r2, #1
 801ffc0:	659a      	str	r2, [r3, #88]	; 0x58
 801ffc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ffc4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ffc6:	f003 0301 	and.w	r3, r3, #1
 801ffca:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ffcc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ffce:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ffd0:	f7e1 fce6 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801ffd4:	201c      	movs	r0, #28
 801ffd6:	f7e1 fd17 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 801ffda:	6822      	ldr	r2, [r4, #0]
 801ffdc:	4b20      	ldr	r3, [pc, #128]	; (8020060 <HAL_TIM_Base_MspInit+0xb8>)
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	d10d      	bne.n	801fffe <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 801ffe2:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801ffe6:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 801ffe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ffea:	f042 0220 	orr.w	r2, r2, #32
 801ffee:	659a      	str	r2, [r3, #88]	; 0x58
 801fff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fff2:	f003 0320 	and.w	r3, r3, #32
 801fff6:	9301      	str	r3, [sp, #4]
 801fff8:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801fffa:	f7e1 fd05 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 801fffe:	6822      	ldr	r2, [r4, #0]
 8020000:	4b18      	ldr	r3, [pc, #96]	; (8020064 <HAL_TIM_Base_MspInit+0xbc>)
 8020002:	429a      	cmp	r2, r3
 8020004:	d112      	bne.n	802002c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8020006:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802000a:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 802000c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802000e:	f042 0204 	orr.w	r2, r2, #4
 8020012:	659a      	str	r2, [r3, #88]	; 0x58
 8020014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8020016:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8020018:	f003 0304 	and.w	r3, r3, #4
 802001c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802001e:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8020020:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8020022:	f7e1 fcbd 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8020026:	201e      	movs	r0, #30
 8020028:	f7e1 fcee 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 802002c:	6822      	ldr	r2, [r4, #0]
 802002e:	4b0e      	ldr	r3, [pc, #56]	; (8020068 <HAL_TIM_Base_MspInit+0xc0>)
 8020030:	429a      	cmp	r2, r3
 8020032:	d112      	bne.n	802005a <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8020034:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8020038:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 802003a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802003c:	f042 0210 	orr.w	r2, r2, #16
 8020040:	659a      	str	r2, [r3, #88]	; 0x58
 8020042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020044:	f003 0310 	and.w	r3, r3, #16
 8020048:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 802004a:	2200      	movs	r2, #0
 802004c:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 802004e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8020050:	f7e1 fca6 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8020054:	2036      	movs	r0, #54	; 0x36
 8020056:	f7e1 fcd7 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 802005a:	b004      	add	sp, #16
 802005c:	bd10      	pop	{r4, pc}
 802005e:	bf00      	nop
 8020060:	40001400 	.word	0x40001400
 8020064:	40000800 	.word	0x40000800
 8020068:	40001000 	.word	0x40001000

0802006c <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 802006c:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 802006e:	4b0d      	ldr	r3, [pc, #52]	; (80200a4 <HAL_TIM_OC_MspInit+0x38>)
 8020070:	6802      	ldr	r2, [r0, #0]
 8020072:	429a      	cmp	r2, r3
 8020074:	d112      	bne.n	802009c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8020076:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802007a:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 802007c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802007e:	f042 0208 	orr.w	r2, r2, #8
 8020082:	659a      	str	r2, [r3, #88]	; 0x58
 8020084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8020086:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8020088:	f003 0308 	and.w	r3, r3, #8
 802008c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802008e:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 8020090:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8020092:	f7e1 fc85 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8020096:	2032      	movs	r0, #50	; 0x32
 8020098:	f7e1 fcb6 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 802009c:	b003      	add	sp, #12
 802009e:	f85d fb04 	ldr.w	pc, [sp], #4
 80200a2:	bf00      	nop
 80200a4:	40000c00 	.word	0x40000c00

080200a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80200a8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 80200aa:	6802      	ldr	r2, [r0, #0]
 80200ac:	4b19      	ldr	r3, [pc, #100]	; (8020114 <HAL_TIM_MspPostInit+0x6c>)
 80200ae:	429a      	cmp	r2, r3
{
 80200b0:	b086      	sub	sp, #24
 80200b2:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 80200b4:	d10c      	bne.n	80200d0 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80200b6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80200b8:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80200ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80200bc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80200be:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80200c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80200c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80200c6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80200c8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80200ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80200cc:	f7e2 f99e 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 80200d0:	6822      	ldr	r2, [r4, #0]
 80200d2:	4b11      	ldr	r3, [pc, #68]	; (8020118 <HAL_TIM_MspPostInit+0x70>)
 80200d4:	429a      	cmp	r2, r3
 80200d6:	d11a      	bne.n	802010e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80200d8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80200dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80200de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80200e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80200e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80200e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80200ea:	9300      	str	r3, [sp, #0]
 80200ec:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 80200ee:	f7e3 fe6b 	bl	8003dc8 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80200f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80200f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80200f8:	2302      	movs	r3, #2
 80200fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80200fc:	2300      	movs	r3, #0
 80200fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020100:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020102:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8020104:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020106:	4805      	ldr	r0, [pc, #20]	; (802011c <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8020108:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802010a:	f7e2 f97f 	bl	800240c <HAL_GPIO_Init>
	}
}
 802010e:	b006      	add	sp, #24
 8020110:	bd10      	pop	{r4, pc}
 8020112:	bf00      	nop
 8020114:	40000c00 	.word	0x40000c00
 8020118:	40014000 	.word	0x40014000
 802011c:	48001800 	.word	0x48001800

08020120 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8020120:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 8020122:	4b0d      	ldr	r3, [pc, #52]	; (8020158 <HAL_DMA2D_MspInit+0x38>)
 8020124:	6802      	ldr	r2, [r0, #0]
 8020126:	429a      	cmp	r2, r3
 8020128:	d112      	bne.n	8020150 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 802012a:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 802012e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8020130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8020136:	649a      	str	r2, [r3, #72]	; 0x48
 8020138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 802013a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 802013c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020140:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8020142:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8020144:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8020146:	f7e1 fc2b 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 802014a:	205a      	movs	r0, #90	; 0x5a
 802014c:	f7e1 fc5c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8020150:	b003      	add	sp, #12
 8020152:	f85d fb04 	ldr.w	pc, [sp], #4
 8020156:	bf00      	nop
 8020158:	4002b000 	.word	0x4002b000

0802015c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802015c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 802015e:	6802      	ldr	r2, [r0, #0]
 8020160:	4b17      	ldr	r3, [pc, #92]	; (80201c0 <HAL_I2C_MspInit+0x64>)
 8020162:	429a      	cmp	r2, r3
 8020164:	d128      	bne.n	80201b8 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8020166:	23c0      	movs	r3, #192	; 0xc0
 8020168:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802016a:	2312      	movs	r3, #18
 802016c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802016e:	2301      	movs	r3, #1
 8020170:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020172:	2303      	movs	r3, #3
 8020174:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8020176:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020178:	eb0d 0103 	add.w	r1, sp, r3
 802017c:	4811      	ldr	r0, [pc, #68]	; (80201c4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 802017e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020180:	f7e2 f944 	bl	800240c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8020184:	4b10      	ldr	r3, [pc, #64]	; (80201c8 <HAL_I2C_MspInit+0x6c>)
 8020186:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020188:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 802018c:	659a      	str	r2, [r3, #88]	; 0x58
 802018e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8020190:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8020192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8020196:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8020198:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 802019a:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 802019c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 802019e:	f7e1 fbff 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80201a2:	201f      	movs	r0, #31
 80201a4:	f7e1 fc30 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80201a8:	2200      	movs	r2, #0
 80201aa:	2020      	movs	r0, #32
 80201ac:	4611      	mov	r1, r2
 80201ae:	f7e1 fbf7 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80201b2:	2020      	movs	r0, #32
 80201b4:	f7e1 fc28 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80201b8:	b007      	add	sp, #28
 80201ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80201be:	bf00      	nop
 80201c0:	40005400 	.word	0x40005400
 80201c4:	48000400 	.word	0x48000400
 80201c8:	40021000 	.word	0x40021000

080201cc <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80201cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 80201ce:	6802      	ldr	r2, [r0, #0]
 80201d0:	4b18      	ldr	r3, [pc, #96]	; (8020234 <HAL_SD_MspInit+0x68>)
 80201d2:	429a      	cmp	r2, r3
{
 80201d4:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 80201d6:	d12b      	bne.n	8020230 <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80201d8:	4b17      	ldr	r3, [pc, #92]	; (8020238 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80201da:	4818      	ldr	r0, [pc, #96]	; (802023c <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80201dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80201de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80201e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80201e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80201e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80201ea:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80201ec:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80201ee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80201f0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80201f2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80201f6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80201f8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80201fa:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80201fc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80201fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020200:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020202:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8020204:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020206:	f7e2 f901 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 802020a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802020c:	eb0d 0103 	add.w	r1, sp, r3
 8020210:	480b      	ldr	r0, [pc, #44]	; (8020240 <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8020212:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020214:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020216:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020218:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 802021a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802021c:	f7e2 f8f6 	bl	800240c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8020220:	2031      	movs	r0, #49	; 0x31
 8020222:	4622      	mov	r2, r4
 8020224:	4621      	mov	r1, r4
 8020226:	f7e1 fbbb 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 802022a:	2031      	movs	r0, #49	; 0x31
 802022c:	f7e1 fbec 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8020230:	b007      	add	sp, #28
 8020232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020234:	50062400 	.word	0x50062400
 8020238:	40021000 	.word	0x40021000
 802023c:	48000800 	.word	0x48000800
 8020240:	48000c00 	.word	0x48000c00

08020244 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 8020244:	6802      	ldr	r2, [r0, #0]
 8020246:	4b08      	ldr	r3, [pc, #32]	; (8020268 <HAL_TIM_PWM_MspInit+0x24>)
 8020248:	429a      	cmp	r2, r3
{
 802024a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 802024c:	d10a      	bne.n	8020264 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 802024e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8020252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020254:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8020258:	661a      	str	r2, [r3, #96]	; 0x60
 802025a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802025c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020260:	9301      	str	r3, [sp, #4]
 8020262:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8020264:	b002      	add	sp, #8
 8020266:	4770      	bx	lr
 8020268:	40014000 	.word	0x40014000

0802026c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 802026c:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 802026e:	6802      	ldr	r2, [r0, #0]
 8020270:	4b0b      	ldr	r3, [pc, #44]	; (80202a0 <HAL_SD_MspDeInit+0x34>)
 8020272:	429a      	cmp	r2, r3
 8020274:	d112      	bne.n	802029c <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8020276:	4a0b      	ldr	r2, [pc, #44]	; (80202a4 <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8020278:	480b      	ldr	r0, [pc, #44]	; (80202a8 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 802027a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 802027c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8020280:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8020282:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8020286:	f7e2 f999 	bl	80025bc <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 802028a:	4808      	ldr	r0, [pc, #32]	; (80202ac <HAL_SD_MspDeInit+0x40>)
 802028c:	2104      	movs	r1, #4
 802028e:	f7e2 f995 	bl	80025bc <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8020292:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 8020294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8020298:	f7e1 bbc2 	b.w	8001a20 <HAL_NVIC_DisableIRQ>
 802029c:	bd08      	pop	{r3, pc}
 802029e:	bf00      	nop
 80202a0:	50062400 	.word	0x50062400
 80202a4:	40021000 	.word	0x40021000
 80202a8:	48000800 	.word	0x48000800
 80202ac:	48000c00 	.word	0x48000c00

080202b0 <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80202b0:	4801      	ldr	r0, [pc, #4]	; (80202b8 <DMA1_Channel1_IRQHandler+0x8>)
 80202b2:	f7e1 bd14 	b.w	8001cde <HAL_DMA_IRQHandler>
 80202b6:	bf00      	nop
 80202b8:	200959c4 	.word	0x200959c4

080202bc <NMI_Handler>:
 80202bc:	4770      	bx	lr

080202be <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80202be:	e7fe      	b.n	80202be <HardFault_Handler>

080202c0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80202c0:	e7fe      	b.n	80202c0 <MemManage_Handler>

080202c2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80202c2:	e7fe      	b.n	80202c2 <BusFault_Handler>

080202c4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80202c4:	e7fe      	b.n	80202c4 <UsageFault_Handler>

080202c6 <SVC_Handler>:
 80202c6:	4770      	bx	lr

080202c8 <DebugMon_Handler>:
 80202c8:	4770      	bx	lr

080202ca <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80202ca:	4770      	bx	lr

080202cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80202cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80202ce:	f7e0 fe9f 	bl	8001010 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80202d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80202d6:	f7e1 bbd6 	b.w	8001a86 <HAL_SYSTICK_IRQHandler>
	...

080202dc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80202dc:	4801      	ldr	r0, [pc, #4]	; (80202e4 <SPI1_IRQHandler+0x8>)
 80202de:	f7e5 bb77 	b.w	80059d0 <HAL_SPI_IRQHandler>
 80202e2:	bf00      	nop
 80202e4:	20095bf8 	.word	0x20095bf8

080202e8 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80202e8:	4801      	ldr	r0, [pc, #4]	; (80202f0 <TIM5_IRQHandler+0x8>)
 80202ea:	f7e5 bd52 	b.w	8005d92 <HAL_TIM_IRQHandler>
 80202ee:	bf00      	nop
 80202f0:	200958a4 	.word	0x200958a4

080202f4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80202f4:	4801      	ldr	r0, [pc, #4]	; (80202fc <OTG_FS_IRQHandler+0x8>)
 80202f6:	f7e3 b8d3 	b.w	80034a0 <HAL_PCD_IRQHandler>
 80202fa:	bf00      	nop
 80202fc:	20096018 	.word	0x20096018

08020300 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8020300:	4801      	ldr	r0, [pc, #4]	; (8020308 <I2C1_EV_IRQHandler+0x8>)
 8020302:	f7e2 bc59 	b.w	8002bb8 <HAL_I2C_EV_IRQHandler>
 8020306:	bf00      	nop
 8020308:	20095770 	.word	0x20095770

0802030c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 802030c:	4801      	ldr	r0, [pc, #4]	; (8020314 <I2C1_ER_IRQHandler+0x8>)
 802030e:	f7e2 be69 	b.w	8002fe4 <HAL_I2C_ER_IRQHandler>
 8020312:	bf00      	nop
 8020314:	20095770 	.word	0x20095770

08020318 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8020318:	4801      	ldr	r0, [pc, #4]	; (8020320 <SDMMC1_IRQHandler+0x8>)
 802031a:	f7e4 be37 	b.w	8004f8c <HAL_SD_IRQHandler>
 802031e:	bf00      	nop
 8020320:	20095810 	.word	0x20095810

08020324 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8020324:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8020326:	4b0a      	ldr	r3, [pc, #40]	; (8020350 <_sbrk+0x2c>)
 8020328:	6819      	ldr	r1, [r3, #0]
{
 802032a:	4602      	mov	r2, r0
	if (heap_end == 0)
 802032c:	b909      	cbnz	r1, 8020332 <_sbrk+0xe>
		heap_end = &end;
 802032e:	4909      	ldr	r1, [pc, #36]	; (8020354 <_sbrk+0x30>)
 8020330:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8020332:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8020334:	4669      	mov	r1, sp
 8020336:	4402      	add	r2, r0
 8020338:	428a      	cmp	r2, r1
 802033a:	d906      	bls.n	802034a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 802033c:	f000 faac 	bl	8020898 <__errno>
 8020340:	230c      	movs	r3, #12
 8020342:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8020344:	f04f 30ff 	mov.w	r0, #4294967295
 8020348:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 802034a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 802034c:	bd08      	pop	{r3, pc}
 802034e:	bf00      	nop
 8020350:	20090618 	.word	0x20090618
 8020354:	20096630 	.word	0x20096630

08020358 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020358:	490f      	ldr	r1, [pc, #60]	; (8020398 <SystemInit+0x40>)
 802035a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 802035e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8020366:	4b0d      	ldr	r3, [pc, #52]	; (802039c <SystemInit+0x44>)
 8020368:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 802036a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 802036c:	f042 0201 	orr.w	r2, r2, #1
 8020370:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8020372:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8020374:	681a      	ldr	r2, [r3, #0]
 8020376:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 802037a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 802037e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8020380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020384:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8020386:	681a      	ldr	r2, [r3, #0]
 8020388:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802038c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 802038e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8020390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8020394:	608b      	str	r3, [r1, #8]
 8020396:	4770      	bx	lr
 8020398:	e000ed00 	.word	0xe000ed00
 802039c:	40021000 	.word	0x40021000

080203a0 <USART2_IRQHandler>:
	temperature_C = temperature_measure * 0.0625;

}

void USART2_IRQHandler(void)
{
 80203a0:	b510      	push	{r4, lr}

	HAL_UART_Receive(&huart2, u2_receive, 4, 100);
 80203a2:	4c0c      	ldr	r4, [pc, #48]	; (80203d4 <USART2_IRQHandler+0x34>)
 80203a4:	480c      	ldr	r0, [pc, #48]	; (80203d8 <USART2_IRQHandler+0x38>)
 80203a6:	2364      	movs	r3, #100	; 0x64
 80203a8:	2204      	movs	r2, #4
 80203aa:	4621      	mov	r1, r4
 80203ac:	f7e6 fed1 	bl	8007152 <HAL_UART_Receive>

	if(u2_receive[0] == 0x55)
 80203b0:	7823      	ldrb	r3, [r4, #0]
 80203b2:	2b55      	cmp	r3, #85	; 0x55
 80203b4:	d109      	bne.n	80203ca <USART2_IRQHandler+0x2a>
	{
		if(u2_receive[1] == 0xF1)
 80203b6:	7863      	ldrb	r3, [r4, #1]
 80203b8:	2bf1      	cmp	r3, #241	; 0xf1
 80203ba:	d106      	bne.n	80203ca <USART2_IRQHandler+0x2a>
		{
			temperature_measure = (u2_receive[2] >> 4) | ((u2_receive[3]) << 4);
 80203bc:	78e3      	ldrb	r3, [r4, #3]
 80203be:	78a2      	ldrb	r2, [r4, #2]
 80203c0:	011b      	lsls	r3, r3, #4
 80203c2:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80203c6:	4a05      	ldr	r2, [pc, #20]	; (80203dc <USART2_IRQHandler+0x3c>)
 80203c8:	8013      	strh	r3, [r2, #0]
		}
	}

	HAL_UART_IRQHandler(&huart2);
 80203ca:	4803      	ldr	r0, [pc, #12]	; (80203d8 <USART2_IRQHandler+0x38>)
}
 80203cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_IRQHandler(&huart2);
 80203d0:	f7e6 bb1a 	b.w	8006a08 <HAL_UART_IRQHandler>
 80203d4:	2009061e 	.word	0x2009061e
 80203d8:	20095ca8 	.word	0x20095ca8
 80203dc:	2009061c 	.word	0x2009061c

080203e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80203e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80203e2:	2200      	movs	r2, #0
 80203e4:	490a      	ldr	r1, [pc, #40]	; (8020410 <MX_USB_DEVICE_Init+0x30>)
 80203e6:	480b      	ldr	r0, [pc, #44]	; (8020414 <MX_USB_DEVICE_Init+0x34>)
 80203e8:	f7e8 f88d 	bl	8008506 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 80203ec:	490a      	ldr	r1, [pc, #40]	; (8020418 <MX_USB_DEVICE_Init+0x38>)
 80203ee:	4809      	ldr	r0, [pc, #36]	; (8020414 <MX_USB_DEVICE_Init+0x34>)
 80203f0:	f7e8 f89e 	bl	8008530 <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 80203f4:	4909      	ldr	r1, [pc, #36]	; (802041c <MX_USB_DEVICE_Init+0x3c>)
 80203f6:	4807      	ldr	r0, [pc, #28]	; (8020414 <MX_USB_DEVICE_Init+0x34>)
 80203f8:	f7e8 f87e 	bl	80084f8 <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 80203fc:	4805      	ldr	r0, [pc, #20]	; (8020414 <MX_USB_DEVICE_Init+0x34>)
 80203fe:	f000 f9ac 	bl	802075a <USBD_LL_BatteryCharging>
 8020402:	b120      	cbz	r0, 802040e <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8020404:	4803      	ldr	r0, [pc, #12]	; (8020414 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8020406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 802040a:	f7e8 b898 	b.w	800853e <USBD_Start>
 802040e:	bd08      	pop	{r3, pc}
 8020410:	20000f0c 	.word	0x20000f0c
 8020414:	20095d7c 	.word	0x20095d7c
 8020418:	20000020 	.word	0x20000020
 802041c:	20000efc 	.word	0x20000efc

08020420 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8020420:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8020422:	6803      	ldr	r3, [r0, #0]
 8020424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8020428:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 802042a:	d133      	bne.n	8020494 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 802042c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8020430:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020432:	2302      	movs	r3, #2
 8020434:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020436:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020438:	4c19      	ldr	r4, [pc, #100]	; (80204a0 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802043a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802043c:	2303      	movs	r3, #3
 802043e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020440:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020442:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020448:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802044a:	f7e1 ffdf 	bl	800240c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802044e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8020450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020454:	64e3      	str	r3, [r4, #76]	; 0x4c
 8020456:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8020458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802045c:	9301      	str	r3, [sp, #4]
 802045e:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8020460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020462:	00db      	lsls	r3, r3, #3
 8020464:	d418      	bmi.n	8020498 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8020466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802046c:	65a3      	str	r3, [r4, #88]	; 0x58
 802046e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020474:	9302      	str	r3, [sp, #8]
 8020476:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8020478:	f7e3 fc9e 	bl	8003db8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 802047c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802047e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8020482:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8020484:	2200      	movs	r2, #0
 8020486:	2043      	movs	r0, #67	; 0x43
 8020488:	4611      	mov	r1, r2
 802048a:	f7e1 fa89 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802048e:	2043      	movs	r0, #67	; 0x43
 8020490:	f7e1 faba 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020494:	b008      	add	sp, #32
 8020496:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8020498:	f7e3 fc8e 	bl	8003db8 <HAL_PWREx_EnableVddUSB>
 802049c:	e7f2      	b.n	8020484 <HAL_PCD_MspInit+0x64>
 802049e:	bf00      	nop
 80204a0:	40021000 	.word	0x40021000

080204a4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80204a4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80204a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80204ac:	f7e8 b85e 	b.w	800856c <USBD_LL_SetupStage>

080204b0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80204b0:	231c      	movs	r3, #28
 80204b2:	fb03 0301 	mla	r3, r3, r1, r0
 80204b6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80204ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80204be:	f7e8 b882 	b.w	80085c6 <USBD_LL_DataOutStage>

080204c2 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80204c2:	231c      	movs	r3, #28
 80204c4:	fb03 0301 	mla	r3, r3, r1, r0
 80204c8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80204cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80204ce:	f7e8 b8b2 	b.w	8008636 <USBD_LL_DataInStage>

080204d2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80204d2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80204d6:	f7e8 b943 	b.w	8008760 <USBD_LL_SOF>

080204da <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80204da:	b510      	push	{r4, lr}
 80204dc:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80204de:	2101      	movs	r1, #1
 80204e0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80204e4:	f7e8 f92a 	bl	800873c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80204e8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80204ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80204f0:	f7e8 b8fd 	b.w	80086ee <USBD_LL_Reset>

080204f4 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80204f4:	6802      	ldr	r2, [r0, #0]
 80204f6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 80204fa:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80204fc:	f043 0301 	orr.w	r3, r3, #1
{
 8020500:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020502:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020506:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 802050a:	f7e8 f91a 	bl	8008742 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802050e:	6a23      	ldr	r3, [r4, #32]
 8020510:	b123      	cbz	r3, 802051c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020512:	4a03      	ldr	r2, [pc, #12]	; (8020520 <HAL_PCD_SuspendCallback+0x2c>)
 8020514:	6913      	ldr	r3, [r2, #16]
 8020516:	f043 0306 	orr.w	r3, r3, #6
 802051a:	6113      	str	r3, [r2, #16]
 802051c:	bd10      	pop	{r4, pc}
 802051e:	bf00      	nop
 8020520:	e000ed00 	.word	0xe000ed00

08020524 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8020524:	6802      	ldr	r2, [r0, #0]
 8020526:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 802052a:	f023 0301 	bic.w	r3, r3, #1
{
 802052e:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8020530:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8020534:	6a03      	ldr	r3, [r0, #32]
{
 8020536:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8020538:	b133      	cbz	r3, 8020548 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802053a:	4a06      	ldr	r2, [pc, #24]	; (8020554 <HAL_PCD_ResumeCallback+0x30>)
 802053c:	6913      	ldr	r3, [r2, #16]
 802053e:	f023 0306 	bic.w	r3, r3, #6
 8020542:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8020544:	f7fd ffc0 	bl	801e4c8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020548:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 802054c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020550:	f7e8 b900 	b.w	8008754 <USBD_LL_Resume>
 8020554:	e000ed00 	.word	0xe000ed00

08020558 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020558:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 802055c:	f7e8 b90e 	b.w	800877c <USBD_LL_IsoOUTIncomplete>

08020560 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020560:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8020564:	f7e8 b908 	b.w	8008778 <USBD_LL_IsoINIncomplete>

08020568 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8020568:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 802056c:	f7e8 b908 	b.w	8008780 <USBD_LL_DevConnected>

08020570 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8020570:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8020574:	f7e8 b906 	b.w	8008784 <USBD_LL_DevDisconnected>

08020578 <USBD_LL_Init>:
{
 8020578:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 802057a:	7802      	ldrb	r2, [r0, #0]
 802057c:	bb4a      	cbnz	r2, 80205d2 <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 802057e:	4b16      	ldr	r3, [pc, #88]	; (80205d8 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8020580:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8020582:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8020586:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802058a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 802058e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020592:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020594:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8020596:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020598:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 802059a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 802059c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 802059e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80205a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80205a2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80205a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80205a6:	f7e2 fee8 	bl	800337a <HAL_PCD_Init>
 80205aa:	b120      	cbz	r0, 80205b6 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 80205ac:	f240 116b 	movw	r1, #363	; 0x16b
 80205b0:	480a      	ldr	r0, [pc, #40]	; (80205dc <USBD_LL_Init+0x64>)
 80205b2:	f7ff fa6f 	bl	801fa94 <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80205b6:	2180      	movs	r1, #128	; 0x80
 80205b8:	4807      	ldr	r0, [pc, #28]	; (80205d8 <USBD_LL_Init+0x60>)
 80205ba:	f7e3 fb6f 	bl	8003c9c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80205be:	2240      	movs	r2, #64	; 0x40
 80205c0:	2100      	movs	r1, #0
 80205c2:	4805      	ldr	r0, [pc, #20]	; (80205d8 <USBD_LL_Init+0x60>)
 80205c4:	f7e3 fb49 	bl	8003c5a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80205c8:	2280      	movs	r2, #128	; 0x80
 80205ca:	2101      	movs	r1, #1
 80205cc:	4802      	ldr	r0, [pc, #8]	; (80205d8 <USBD_LL_Init+0x60>)
 80205ce:	f7e3 fb44 	bl	8003c5a <HAL_PCDEx_SetTxFiFo>
}
 80205d2:	2000      	movs	r0, #0
 80205d4:	bd08      	pop	{r3, pc}
 80205d6:	bf00      	nop
 80205d8:	20096018 	.word	0x20096018
 80205dc:	080324e0 	.word	0x080324e0

080205e0 <USBD_LL_Start>:
{
 80205e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80205e2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80205e6:	f7e2 ff45 	bl	8003474 <HAL_PCD_Start>
 80205ea:	2803      	cmp	r0, #3
 80205ec:	bf9a      	itte	ls
 80205ee:	4b02      	ldrls	r3, [pc, #8]	; (80205f8 <USBD_LL_Start+0x18>)
 80205f0:	5c18      	ldrbls	r0, [r3, r0]
 80205f2:	2002      	movhi	r0, #2
}
 80205f4:	bd08      	pop	{r3, pc}
 80205f6:	bf00      	nop
 80205f8:	080324dc 	.word	0x080324dc

080205fc <USBD_LL_OpenEP>:
{
 80205fc:	b510      	push	{r4, lr}
 80205fe:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020600:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8020604:	4613      	mov	r3, r2
 8020606:	4622      	mov	r2, r4
 8020608:	f7e3 fa24 	bl	8003a54 <HAL_PCD_EP_Open>
 802060c:	2803      	cmp	r0, #3
 802060e:	bf9a      	itte	ls
 8020610:	4b01      	ldrls	r3, [pc, #4]	; (8020618 <USBD_LL_OpenEP+0x1c>)
 8020612:	5c18      	ldrbls	r0, [r3, r0]
 8020614:	2002      	movhi	r0, #2
}
 8020616:	bd10      	pop	{r4, pc}
 8020618:	080324dc 	.word	0x080324dc

0802061c <USBD_LL_CloseEP>:
{
 802061c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802061e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8020622:	f7e3 fa4c 	bl	8003abe <HAL_PCD_EP_Close>
 8020626:	2803      	cmp	r0, #3
 8020628:	bf9a      	itte	ls
 802062a:	4b02      	ldrls	r3, [pc, #8]	; (8020634 <USBD_LL_CloseEP+0x18>)
 802062c:	5c18      	ldrbls	r0, [r3, r0]
 802062e:	2002      	movhi	r0, #2
}
 8020630:	bd08      	pop	{r3, pc}
 8020632:	bf00      	nop
 8020634:	080324dc 	.word	0x080324dc

08020638 <USBD_LL_StallEP>:
{
 8020638:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802063a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802063e:	f7e3 faa1 	bl	8003b84 <HAL_PCD_EP_SetStall>
 8020642:	2803      	cmp	r0, #3
 8020644:	bf9a      	itte	ls
 8020646:	4b02      	ldrls	r3, [pc, #8]	; (8020650 <USBD_LL_StallEP+0x18>)
 8020648:	5c18      	ldrbls	r0, [r3, r0]
 802064a:	2002      	movhi	r0, #2
}
 802064c:	bd08      	pop	{r3, pc}
 802064e:	bf00      	nop
 8020650:	080324dc 	.word	0x080324dc

08020654 <USBD_LL_ClearStallEP>:
{
 8020654:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8020656:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802065a:	f7e3 facc 	bl	8003bf6 <HAL_PCD_EP_ClrStall>
 802065e:	2803      	cmp	r0, #3
 8020660:	bf9a      	itte	ls
 8020662:	4b02      	ldrls	r3, [pc, #8]	; (802066c <USBD_LL_ClearStallEP+0x18>)
 8020664:	5c18      	ldrbls	r0, [r3, r0]
 8020666:	2002      	movhi	r0, #2
}
 8020668:	bd08      	pop	{r3, pc}
 802066a:	bf00      	nop
 802066c:	080324dc 	.word	0x080324dc

08020670 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8020670:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020674:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8020678:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 802067c:	bf1b      	ittet	ne
 802067e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8020682:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8020686:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 802068a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 802068e:	bf08      	it	eq
 8020690:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8020694:	4770      	bx	lr
	...

08020698 <USBD_LL_SetUSBAddress>:
{
 8020698:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802069a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802069e:	f7e3 f9c5 	bl	8003a2c <HAL_PCD_SetAddress>
 80206a2:	2803      	cmp	r0, #3
 80206a4:	bf9a      	itte	ls
 80206a6:	4b02      	ldrls	r3, [pc, #8]	; (80206b0 <USBD_LL_SetUSBAddress+0x18>)
 80206a8:	5c18      	ldrbls	r0, [r3, r0]
 80206aa:	2002      	movhi	r0, #2
}
 80206ac:	bd08      	pop	{r3, pc}
 80206ae:	bf00      	nop
 80206b0:	080324dc 	.word	0x080324dc

080206b4 <USBD_LL_Transmit>:
{
 80206b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80206b6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80206ba:	f7e3 fa48 	bl	8003b4e <HAL_PCD_EP_Transmit>
 80206be:	2803      	cmp	r0, #3
 80206c0:	bf9a      	itte	ls
 80206c2:	4b02      	ldrls	r3, [pc, #8]	; (80206cc <USBD_LL_Transmit+0x18>)
 80206c4:	5c18      	ldrbls	r0, [r3, r0]
 80206c6:	2002      	movhi	r0, #2
}
 80206c8:	bd08      	pop	{r3, pc}
 80206ca:	bf00      	nop
 80206cc:	080324dc 	.word	0x080324dc

080206d0 <USBD_LL_PrepareReceive>:
{
 80206d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80206d2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80206d6:	f7e3 fa1c 	bl	8003b12 <HAL_PCD_EP_Receive>
 80206da:	2803      	cmp	r0, #3
 80206dc:	bf9a      	itte	ls
 80206de:	4b02      	ldrls	r3, [pc, #8]	; (80206e8 <USBD_LL_PrepareReceive+0x18>)
 80206e0:	5c18      	ldrbls	r0, [r3, r0]
 80206e2:	2002      	movhi	r0, #2
}
 80206e4:	bd08      	pop	{r3, pc}
 80206e6:	bf00      	nop
 80206e8:	080324dc 	.word	0x080324dc

080206ec <HAL_PCDEx_LPM_Callback>:
{
 80206ec:	b510      	push	{r4, lr}
 80206ee:	4604      	mov	r4, r0
  switch (msg)
 80206f0:	b111      	cbz	r1, 80206f8 <HAL_PCDEx_LPM_Callback+0xc>
 80206f2:	2901      	cmp	r1, #1
 80206f4:	d016      	beq.n	8020724 <HAL_PCDEx_LPM_Callback+0x38>
 80206f6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80206f8:	6a03      	ldr	r3, [r0, #32]
 80206fa:	b133      	cbz	r3, 802070a <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 80206fc:	f7fd fee4 	bl	801e4c8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020700:	4a12      	ldr	r2, [pc, #72]	; (802074c <HAL_PCDEx_LPM_Callback+0x60>)
 8020702:	6913      	ldr	r3, [r2, #16]
 8020704:	f023 0306 	bic.w	r3, r3, #6
 8020708:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802070a:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 802070c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8020710:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8020714:	f023 0301 	bic.w	r3, r3, #1
 8020718:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 802071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8020720:	f7e8 b818 	b.w	8008754 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020724:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8020726:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802072a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 802072e:	f043 0301 	orr.w	r3, r3, #1
 8020732:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8020736:	f7e8 f804 	bl	8008742 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 802073a:	6a23      	ldr	r3, [r4, #32]
 802073c:	b123      	cbz	r3, 8020748 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802073e:	4a03      	ldr	r2, [pc, #12]	; (802074c <HAL_PCDEx_LPM_Callback+0x60>)
 8020740:	6913      	ldr	r3, [r2, #16]
 8020742:	f043 0306 	orr.w	r3, r3, #6
 8020746:	6113      	str	r3, [r2, #16]
 8020748:	bd10      	pop	{r4, pc}
 802074a:	bf00      	nop
 802074c:	e000ed00 	.word	0xe000ed00

08020750 <USBD_static_malloc>:
}
 8020750:	4800      	ldr	r0, [pc, #0]	; (8020754 <USBD_static_malloc+0x4>)
 8020752:	4770      	bx	lr
 8020754:	20090624 	.word	0x20090624

08020758 <USBD_static_free>:
{
 8020758:	4770      	bx	lr

0802075a <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 802075a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 802075e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020760:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8020762:	bf14      	ite	ne
 8020764:	2002      	movne	r0, #2
 8020766:	2000      	moveq	r0, #0
 8020768:	4770      	bx	lr

0802076a <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 802076a:	2000      	movs	r0, #0
 802076c:	4770      	bx	lr
	...

08020770 <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8020770:	4b05      	ldr	r3, [pc, #20]	; (8020788 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 8020772:	4a06      	ldr	r2, [pc, #24]	; (802078c <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8020774:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 8020778:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 802077a:	5cc1      	ldrb	r1, [r0, r3]
 802077c:	5499      	strb	r1, [r3, r2]
 802077e:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 8020780:	2b0c      	cmp	r3, #12
 8020782:	d1fa      	bne.n	802077a <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 8020784:	2000      	movs	r0, #0
 8020786:	4770      	bx	lr
 8020788:	20095d7c 	.word	0x20095d7c
 802078c:	2008f550 	.word	0x2008f550

08020790 <CUSTOM_HID_Init_FS>:
 8020790:	2000      	movs	r0, #0
 8020792:	4770      	bx	lr

08020794 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8020794:	2312      	movs	r3, #18
 8020796:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8020798:	4800      	ldr	r0, [pc, #0]	; (802079c <USBD_FS_DeviceDescriptor+0x8>)
 802079a:	4770      	bx	lr
 802079c:	20000f38 	.word	0x20000f38

080207a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80207a0:	2304      	movs	r3, #4
 80207a2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80207a4:	4800      	ldr	r0, [pc, #0]	; (80207a8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80207a6:	4770      	bx	lr
 80207a8:	20000f4c 	.word	0x20000f4c

080207ac <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 80207ac:	230c      	movs	r3, #12
 80207ae:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80207b0:	4800      	ldr	r0, [pc, #0]	; (80207b4 <USBD_FS_USR_BOSDescriptor+0x8>)
 80207b2:	4770      	bx	lr
 80207b4:	20000f2c 	.word	0x20000f2c

080207b8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80207b8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80207ba:	4c04      	ldr	r4, [pc, #16]	; (80207cc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80207bc:	4804      	ldr	r0, [pc, #16]	; (80207d0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80207be:	460a      	mov	r2, r1
 80207c0:	4621      	mov	r1, r4
 80207c2:	f7e8 f9eb 	bl	8008b9c <USBD_GetString>
}
 80207c6:	4620      	mov	r0, r4
 80207c8:	bd10      	pop	{r4, pc}
 80207ca:	bf00      	nop
 80207cc:	20096420 	.word	0x20096420
 80207d0:	0803251a 	.word	0x0803251a

080207d4 <USBD_FS_ProductStrDescriptor>:
{
 80207d4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80207d6:	4c04      	ldr	r4, [pc, #16]	; (80207e8 <USBD_FS_ProductStrDescriptor+0x14>)
 80207d8:	4804      	ldr	r0, [pc, #16]	; (80207ec <USBD_FS_ProductStrDescriptor+0x18>)
 80207da:	460a      	mov	r2, r1
 80207dc:	4621      	mov	r1, r4
 80207de:	f7e8 f9dd 	bl	8008b9c <USBD_GetString>
}
 80207e2:	4620      	mov	r0, r4
 80207e4:	bd10      	pop	{r4, pc}
 80207e6:	bf00      	nop
 80207e8:	20096420 	.word	0x20096420
 80207ec:	08032521 	.word	0x08032521

080207f0 <USBD_FS_SerialStrDescriptor>:
{
 80207f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80207f2:	4c04      	ldr	r4, [pc, #16]	; (8020804 <USBD_FS_SerialStrDescriptor+0x14>)
 80207f4:	4804      	ldr	r0, [pc, #16]	; (8020808 <USBD_FS_SerialStrDescriptor+0x18>)
 80207f6:	460a      	mov	r2, r1
 80207f8:	4621      	mov	r1, r4
 80207fa:	f7e8 f9cf 	bl	8008b9c <USBD_GetString>
}
 80207fe:	4620      	mov	r0, r4
 8020800:	bd10      	pop	{r4, pc}
 8020802:	bf00      	nop
 8020804:	20096420 	.word	0x20096420
 8020808:	0803253f 	.word	0x0803253f

0802080c <USBD_FS_ConfigStrDescriptor>:
{
 802080c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802080e:	4c04      	ldr	r4, [pc, #16]	; (8020820 <USBD_FS_ConfigStrDescriptor+0x14>)
 8020810:	4804      	ldr	r0, [pc, #16]	; (8020824 <USBD_FS_ConfigStrDescriptor+0x18>)
 8020812:	460a      	mov	r2, r1
 8020814:	4621      	mov	r1, r4
 8020816:	f7e8 f9c1 	bl	8008b9c <USBD_GetString>
}
 802081a:	4620      	mov	r0, r4
 802081c:	bd10      	pop	{r4, pc}
 802081e:	bf00      	nop
 8020820:	20096420 	.word	0x20096420
 8020824:	080324f3 	.word	0x080324f3

08020828 <USBD_FS_InterfaceStrDescriptor>:
{
 8020828:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802082a:	4c04      	ldr	r4, [pc, #16]	; (802083c <USBD_FS_InterfaceStrDescriptor+0x14>)
 802082c:	4804      	ldr	r0, [pc, #16]	; (8020840 <USBD_FS_InterfaceStrDescriptor+0x18>)
 802082e:	460a      	mov	r2, r1
 8020830:	4621      	mov	r1, r4
 8020832:	f7e8 f9b3 	bl	8008b9c <USBD_GetString>
}
 8020836:	4620      	mov	r0, r4
 8020838:	bd10      	pop	{r4, pc}
 802083a:	bf00      	nop
 802083c:	20096420 	.word	0x20096420
 8020840:	08032505 	.word	0x08032505

08020844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8020844:	f8df d034 	ldr.w	sp, [pc, #52]	; 802087c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020848:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 802084a:	e003      	b.n	8020854 <LoopCopyDataInit>

0802084c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 802084c:	4b0c      	ldr	r3, [pc, #48]	; (8020880 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 802084e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8020850:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8020852:	3104      	adds	r1, #4

08020854 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8020854:	480b      	ldr	r0, [pc, #44]	; (8020884 <LoopForever+0xa>)
	ldr	r3, =_edata
 8020856:	4b0c      	ldr	r3, [pc, #48]	; (8020888 <LoopForever+0xe>)
	adds	r2, r0, r1
 8020858:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 802085a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 802085c:	d3f6      	bcc.n	802084c <CopyDataInit>
	ldr	r2, =_sbss
 802085e:	4a0b      	ldr	r2, [pc, #44]	; (802088c <LoopForever+0x12>)
	b	LoopFillZerobss
 8020860:	e002      	b.n	8020868 <LoopFillZerobss>

08020862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8020862:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8020864:	f842 3b04 	str.w	r3, [r2], #4

08020868 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020868:	4b09      	ldr	r3, [pc, #36]	; (8020890 <LoopForever+0x16>)
	cmp	r2, r3
 802086a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 802086c:	d3f9      	bcc.n	8020862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 802086e:	f7ff fd73 	bl	8020358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020872:	f000 f817 	bl	80208a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8020876:	f7fd fe87 	bl	801e588 <main>

0802087a <LoopForever>:

LoopForever:
    b LoopForever
 802087a:	e7fe      	b.n	802087a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 802087c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8020880:	08032848 	.word	0x08032848
	ldr	r0, =_sdata
 8020884:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8020888:	200015c4 	.word	0x200015c4
	ldr	r2, =_sbss
 802088c:	200015c8 	.word	0x200015c8
	ldr	r3, = _ebss
 8020890:	20096630 	.word	0x20096630

08020894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020894:	e7fe      	b.n	8020894 <ADC1_IRQHandler>
	...

08020898 <__errno>:
 8020898:	4b01      	ldr	r3, [pc, #4]	; (80208a0 <__errno+0x8>)
 802089a:	6818      	ldr	r0, [r3, #0]
 802089c:	4770      	bx	lr
 802089e:	bf00      	nop
 80208a0:	20000f50 	.word	0x20000f50

080208a4 <__libc_init_array>:
 80208a4:	b570      	push	{r4, r5, r6, lr}
 80208a6:	4e0d      	ldr	r6, [pc, #52]	; (80208dc <__libc_init_array+0x38>)
 80208a8:	4c0d      	ldr	r4, [pc, #52]	; (80208e0 <__libc_init_array+0x3c>)
 80208aa:	1ba4      	subs	r4, r4, r6
 80208ac:	10a4      	asrs	r4, r4, #2
 80208ae:	2500      	movs	r5, #0
 80208b0:	42a5      	cmp	r5, r4
 80208b2:	d109      	bne.n	80208c8 <__libc_init_array+0x24>
 80208b4:	4e0b      	ldr	r6, [pc, #44]	; (80208e4 <__libc_init_array+0x40>)
 80208b6:	4c0c      	ldr	r4, [pc, #48]	; (80208e8 <__libc_init_array+0x44>)
 80208b8:	f004 fe0a 	bl	80254d0 <_init>
 80208bc:	1ba4      	subs	r4, r4, r6
 80208be:	10a4      	asrs	r4, r4, #2
 80208c0:	2500      	movs	r5, #0
 80208c2:	42a5      	cmp	r5, r4
 80208c4:	d105      	bne.n	80208d2 <__libc_init_array+0x2e>
 80208c6:	bd70      	pop	{r4, r5, r6, pc}
 80208c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80208cc:	4798      	blx	r3
 80208ce:	3501      	adds	r5, #1
 80208d0:	e7ee      	b.n	80208b0 <__libc_init_array+0xc>
 80208d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80208d6:	4798      	blx	r3
 80208d8:	3501      	adds	r5, #1
 80208da:	e7f2      	b.n	80208c2 <__libc_init_array+0x1e>
 80208dc:	08032840 	.word	0x08032840
 80208e0:	08032840 	.word	0x08032840
 80208e4:	08032840 	.word	0x08032840
 80208e8:	08032844 	.word	0x08032844

080208ec <memcpy>:
 80208ec:	b510      	push	{r4, lr}
 80208ee:	1e43      	subs	r3, r0, #1
 80208f0:	440a      	add	r2, r1
 80208f2:	4291      	cmp	r1, r2
 80208f4:	d100      	bne.n	80208f8 <memcpy+0xc>
 80208f6:	bd10      	pop	{r4, pc}
 80208f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80208fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020900:	e7f7      	b.n	80208f2 <memcpy+0x6>

08020902 <memset>:
 8020902:	4402      	add	r2, r0
 8020904:	4603      	mov	r3, r0
 8020906:	4293      	cmp	r3, r2
 8020908:	d100      	bne.n	802090c <memset+0xa>
 802090a:	4770      	bx	lr
 802090c:	f803 1b01 	strb.w	r1, [r3], #1
 8020910:	e7f9      	b.n	8020906 <memset+0x4>
	...

08020914 <sprintf>:
 8020914:	b40e      	push	{r1, r2, r3}
 8020916:	b500      	push	{lr}
 8020918:	b09c      	sub	sp, #112	; 0x70
 802091a:	f44f 7102 	mov.w	r1, #520	; 0x208
 802091e:	ab1d      	add	r3, sp, #116	; 0x74
 8020920:	f8ad 1014 	strh.w	r1, [sp, #20]
 8020924:	9002      	str	r0, [sp, #8]
 8020926:	9006      	str	r0, [sp, #24]
 8020928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802092c:	480a      	ldr	r0, [pc, #40]	; (8020958 <sprintf+0x44>)
 802092e:	9104      	str	r1, [sp, #16]
 8020930:	9107      	str	r1, [sp, #28]
 8020932:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020936:	f853 2b04 	ldr.w	r2, [r3], #4
 802093a:	f8ad 1016 	strh.w	r1, [sp, #22]
 802093e:	6800      	ldr	r0, [r0, #0]
 8020940:	9301      	str	r3, [sp, #4]
 8020942:	a902      	add	r1, sp, #8
 8020944:	f000 f830 	bl	80209a8 <_svfprintf_r>
 8020948:	9b02      	ldr	r3, [sp, #8]
 802094a:	2200      	movs	r2, #0
 802094c:	701a      	strb	r2, [r3, #0]
 802094e:	b01c      	add	sp, #112	; 0x70
 8020950:	f85d eb04 	ldr.w	lr, [sp], #4
 8020954:	b003      	add	sp, #12
 8020956:	4770      	bx	lr
 8020958:	20000f50 	.word	0x20000f50

0802095c <strcat>:
 802095c:	b510      	push	{r4, lr}
 802095e:	4602      	mov	r2, r0
 8020960:	4613      	mov	r3, r2
 8020962:	3201      	adds	r2, #1
 8020964:	781c      	ldrb	r4, [r3, #0]
 8020966:	2c00      	cmp	r4, #0
 8020968:	d1fa      	bne.n	8020960 <strcat+0x4>
 802096a:	3b01      	subs	r3, #1
 802096c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020970:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020974:	2a00      	cmp	r2, #0
 8020976:	d1f9      	bne.n	802096c <strcat+0x10>
 8020978:	bd10      	pop	{r4, pc}

0802097a <strchr>:
 802097a:	b2c9      	uxtb	r1, r1
 802097c:	4603      	mov	r3, r0
 802097e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020982:	b11a      	cbz	r2, 802098c <strchr+0x12>
 8020984:	4291      	cmp	r1, r2
 8020986:	d1f9      	bne.n	802097c <strchr+0x2>
 8020988:	4618      	mov	r0, r3
 802098a:	4770      	bx	lr
 802098c:	2900      	cmp	r1, #0
 802098e:	bf0c      	ite	eq
 8020990:	4618      	moveq	r0, r3
 8020992:	2000      	movne	r0, #0
 8020994:	4770      	bx	lr

08020996 <strcpy>:
 8020996:	4603      	mov	r3, r0
 8020998:	f811 2b01 	ldrb.w	r2, [r1], #1
 802099c:	f803 2b01 	strb.w	r2, [r3], #1
 80209a0:	2a00      	cmp	r2, #0
 80209a2:	d1f9      	bne.n	8020998 <strcpy+0x2>
 80209a4:	4770      	bx	lr
	...

080209a8 <_svfprintf_r>:
 80209a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209ac:	b0bd      	sub	sp, #244	; 0xf4
 80209ae:	468a      	mov	sl, r1
 80209b0:	4615      	mov	r5, r2
 80209b2:	461f      	mov	r7, r3
 80209b4:	4683      	mov	fp, r0
 80209b6:	f001 fe25 	bl	8022604 <_localeconv_r>
 80209ba:	6803      	ldr	r3, [r0, #0]
 80209bc:	930d      	str	r3, [sp, #52]	; 0x34
 80209be:	4618      	mov	r0, r3
 80209c0:	f7df fc6e 	bl	80002a0 <strlen>
 80209c4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80209c8:	9008      	str	r0, [sp, #32]
 80209ca:	061b      	lsls	r3, r3, #24
 80209cc:	d518      	bpl.n	8020a00 <_svfprintf_r+0x58>
 80209ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 80209d2:	b9ab      	cbnz	r3, 8020a00 <_svfprintf_r+0x58>
 80209d4:	2140      	movs	r1, #64	; 0x40
 80209d6:	4658      	mov	r0, fp
 80209d8:	f001 fe2a 	bl	8022630 <_malloc_r>
 80209dc:	f8ca 0000 	str.w	r0, [sl]
 80209e0:	f8ca 0010 	str.w	r0, [sl, #16]
 80209e4:	b948      	cbnz	r0, 80209fa <_svfprintf_r+0x52>
 80209e6:	230c      	movs	r3, #12
 80209e8:	f8cb 3000 	str.w	r3, [fp]
 80209ec:	f04f 33ff 	mov.w	r3, #4294967295
 80209f0:	9309      	str	r3, [sp, #36]	; 0x24
 80209f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80209f4:	b03d      	add	sp, #244	; 0xf4
 80209f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209fa:	2340      	movs	r3, #64	; 0x40
 80209fc:	f8ca 3014 	str.w	r3, [sl, #20]
 8020a00:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8020c68 <_svfprintf_r+0x2c0>
 8020a04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020a08:	2300      	movs	r3, #0
 8020a0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8020a0c:	941f      	str	r4, [sp, #124]	; 0x7c
 8020a0e:	9321      	str	r3, [sp, #132]	; 0x84
 8020a10:	9320      	str	r3, [sp, #128]	; 0x80
 8020a12:	9505      	str	r5, [sp, #20]
 8020a14:	9303      	str	r3, [sp, #12]
 8020a16:	9311      	str	r3, [sp, #68]	; 0x44
 8020a18:	9310      	str	r3, [sp, #64]	; 0x40
 8020a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8020a1c:	9d05      	ldr	r5, [sp, #20]
 8020a1e:	462b      	mov	r3, r5
 8020a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a24:	b112      	cbz	r2, 8020a2c <_svfprintf_r+0x84>
 8020a26:	2a25      	cmp	r2, #37	; 0x25
 8020a28:	f040 8083 	bne.w	8020b32 <_svfprintf_r+0x18a>
 8020a2c:	9b05      	ldr	r3, [sp, #20]
 8020a2e:	1aee      	subs	r6, r5, r3
 8020a30:	d00d      	beq.n	8020a4e <_svfprintf_r+0xa6>
 8020a32:	e884 0048 	stmia.w	r4, {r3, r6}
 8020a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020a38:	4433      	add	r3, r6
 8020a3a:	9321      	str	r3, [sp, #132]	; 0x84
 8020a3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a3e:	3301      	adds	r3, #1
 8020a40:	2b07      	cmp	r3, #7
 8020a42:	9320      	str	r3, [sp, #128]	; 0x80
 8020a44:	dc77      	bgt.n	8020b36 <_svfprintf_r+0x18e>
 8020a46:	3408      	adds	r4, #8
 8020a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a4a:	4433      	add	r3, r6
 8020a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8020a4e:	782b      	ldrb	r3, [r5, #0]
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	f000 8729 	beq.w	80218a8 <_svfprintf_r+0xf00>
 8020a56:	2300      	movs	r3, #0
 8020a58:	1c69      	adds	r1, r5, #1
 8020a5a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020a5e:	461a      	mov	r2, r3
 8020a60:	f04f 39ff 	mov.w	r9, #4294967295
 8020a64:	930a      	str	r3, [sp, #40]	; 0x28
 8020a66:	461d      	mov	r5, r3
 8020a68:	200a      	movs	r0, #10
 8020a6a:	1c4e      	adds	r6, r1, #1
 8020a6c:	7809      	ldrb	r1, [r1, #0]
 8020a6e:	9605      	str	r6, [sp, #20]
 8020a70:	9102      	str	r1, [sp, #8]
 8020a72:	9902      	ldr	r1, [sp, #8]
 8020a74:	3920      	subs	r1, #32
 8020a76:	2958      	cmp	r1, #88	; 0x58
 8020a78:	f200 8418 	bhi.w	80212ac <_svfprintf_r+0x904>
 8020a7c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8020a80:	041600a6 	.word	0x041600a6
 8020a84:	00ab0416 	.word	0x00ab0416
 8020a88:	04160416 	.word	0x04160416
 8020a8c:	04160416 	.word	0x04160416
 8020a90:	04160416 	.word	0x04160416
 8020a94:	006500ae 	.word	0x006500ae
 8020a98:	00b70416 	.word	0x00b70416
 8020a9c:	041600ba 	.word	0x041600ba
 8020aa0:	00da00d7 	.word	0x00da00d7
 8020aa4:	00da00da 	.word	0x00da00da
 8020aa8:	00da00da 	.word	0x00da00da
 8020aac:	00da00da 	.word	0x00da00da
 8020ab0:	00da00da 	.word	0x00da00da
 8020ab4:	04160416 	.word	0x04160416
 8020ab8:	04160416 	.word	0x04160416
 8020abc:	04160416 	.word	0x04160416
 8020ac0:	04160416 	.word	0x04160416
 8020ac4:	04160416 	.word	0x04160416
 8020ac8:	012b0115 	.word	0x012b0115
 8020acc:	012b0416 	.word	0x012b0416
 8020ad0:	04160416 	.word	0x04160416
 8020ad4:	04160416 	.word	0x04160416
 8020ad8:	041600ed 	.word	0x041600ed
 8020adc:	03400416 	.word	0x03400416
 8020ae0:	04160416 	.word	0x04160416
 8020ae4:	04160416 	.word	0x04160416
 8020ae8:	03a80416 	.word	0x03a80416
 8020aec:	04160416 	.word	0x04160416
 8020af0:	04160086 	.word	0x04160086
 8020af4:	04160416 	.word	0x04160416
 8020af8:	04160416 	.word	0x04160416
 8020afc:	04160416 	.word	0x04160416
 8020b00:	04160416 	.word	0x04160416
 8020b04:	01070416 	.word	0x01070416
 8020b08:	012b006b 	.word	0x012b006b
 8020b0c:	012b012b 	.word	0x012b012b
 8020b10:	006b00f0 	.word	0x006b00f0
 8020b14:	04160416 	.word	0x04160416
 8020b18:	041600fa 	.word	0x041600fa
 8020b1c:	03420322 	.word	0x03420322
 8020b20:	01010376 	.word	0x01010376
 8020b24:	03870416 	.word	0x03870416
 8020b28:	03aa0416 	.word	0x03aa0416
 8020b2c:	04160416 	.word	0x04160416
 8020b30:	03c2      	.short	0x03c2
 8020b32:	461d      	mov	r5, r3
 8020b34:	e773      	b.n	8020a1e <_svfprintf_r+0x76>
 8020b36:	aa1f      	add	r2, sp, #124	; 0x7c
 8020b38:	4651      	mov	r1, sl
 8020b3a:	4658      	mov	r0, fp
 8020b3c:	f002 fa72 	bl	8023024 <__ssprint_r>
 8020b40:	2800      	cmp	r0, #0
 8020b42:	f040 8692 	bne.w	802186a <_svfprintf_r+0xec2>
 8020b46:	ac2c      	add	r4, sp, #176	; 0xb0
 8020b48:	e77e      	b.n	8020a48 <_svfprintf_r+0xa0>
 8020b4a:	2301      	movs	r3, #1
 8020b4c:	222b      	movs	r2, #43	; 0x2b
 8020b4e:	9905      	ldr	r1, [sp, #20]
 8020b50:	e78b      	b.n	8020a6a <_svfprintf_r+0xc2>
 8020b52:	460f      	mov	r7, r1
 8020b54:	e7fb      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020b56:	b10b      	cbz	r3, 8020b5c <_svfprintf_r+0x1b4>
 8020b58:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020b5c:	06ae      	lsls	r6, r5, #26
 8020b5e:	f140 80aa 	bpl.w	8020cb6 <_svfprintf_r+0x30e>
 8020b62:	3707      	adds	r7, #7
 8020b64:	f027 0707 	bic.w	r7, r7, #7
 8020b68:	f107 0308 	add.w	r3, r7, #8
 8020b6c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020b70:	9304      	str	r3, [sp, #16]
 8020b72:	2e00      	cmp	r6, #0
 8020b74:	f177 0300 	sbcs.w	r3, r7, #0
 8020b78:	da06      	bge.n	8020b88 <_svfprintf_r+0x1e0>
 8020b7a:	4276      	negs	r6, r6
 8020b7c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8020b80:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8020b84:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020b88:	2301      	movs	r3, #1
 8020b8a:	e2ca      	b.n	8021122 <_svfprintf_r+0x77a>
 8020b8c:	b10b      	cbz	r3, 8020b92 <_svfprintf_r+0x1ea>
 8020b8e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020b92:	4b37      	ldr	r3, [pc, #220]	; (8020c70 <_svfprintf_r+0x2c8>)
 8020b94:	9311      	str	r3, [sp, #68]	; 0x44
 8020b96:	06ab      	lsls	r3, r5, #26
 8020b98:	f140 8339 	bpl.w	802120e <_svfprintf_r+0x866>
 8020b9c:	3707      	adds	r7, #7
 8020b9e:	f027 0707 	bic.w	r7, r7, #7
 8020ba2:	f107 0308 	add.w	r3, r7, #8
 8020ba6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020baa:	9304      	str	r3, [sp, #16]
 8020bac:	07e8      	lsls	r0, r5, #31
 8020bae:	d50b      	bpl.n	8020bc8 <_svfprintf_r+0x220>
 8020bb0:	ea56 0307 	orrs.w	r3, r6, r7
 8020bb4:	d008      	beq.n	8020bc8 <_svfprintf_r+0x220>
 8020bb6:	2330      	movs	r3, #48	; 0x30
 8020bb8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8020bbc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8020bc0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8020bc4:	f045 0502 	orr.w	r5, r5, #2
 8020bc8:	2302      	movs	r3, #2
 8020bca:	e2a7      	b.n	802111c <_svfprintf_r+0x774>
 8020bcc:	2a00      	cmp	r2, #0
 8020bce:	d1be      	bne.n	8020b4e <_svfprintf_r+0x1a6>
 8020bd0:	2301      	movs	r3, #1
 8020bd2:	2220      	movs	r2, #32
 8020bd4:	e7bb      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020bd6:	f045 0501 	orr.w	r5, r5, #1
 8020bda:	e7b8      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020bdc:	683e      	ldr	r6, [r7, #0]
 8020bde:	960a      	str	r6, [sp, #40]	; 0x28
 8020be0:	2e00      	cmp	r6, #0
 8020be2:	f107 0104 	add.w	r1, r7, #4
 8020be6:	dab4      	bge.n	8020b52 <_svfprintf_r+0x1aa>
 8020be8:	4276      	negs	r6, r6
 8020bea:	960a      	str	r6, [sp, #40]	; 0x28
 8020bec:	460f      	mov	r7, r1
 8020bee:	f045 0504 	orr.w	r5, r5, #4
 8020bf2:	e7ac      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020bf4:	9905      	ldr	r1, [sp, #20]
 8020bf6:	1c4e      	adds	r6, r1, #1
 8020bf8:	7809      	ldrb	r1, [r1, #0]
 8020bfa:	9102      	str	r1, [sp, #8]
 8020bfc:	292a      	cmp	r1, #42	; 0x2a
 8020bfe:	d010      	beq.n	8020c22 <_svfprintf_r+0x27a>
 8020c00:	f04f 0900 	mov.w	r9, #0
 8020c04:	9605      	str	r6, [sp, #20]
 8020c06:	9902      	ldr	r1, [sp, #8]
 8020c08:	3930      	subs	r1, #48	; 0x30
 8020c0a:	2909      	cmp	r1, #9
 8020c0c:	f63f af31 	bhi.w	8020a72 <_svfprintf_r+0xca>
 8020c10:	fb00 1909 	mla	r9, r0, r9, r1
 8020c14:	9905      	ldr	r1, [sp, #20]
 8020c16:	460e      	mov	r6, r1
 8020c18:	f816 1b01 	ldrb.w	r1, [r6], #1
 8020c1c:	9102      	str	r1, [sp, #8]
 8020c1e:	9605      	str	r6, [sp, #20]
 8020c20:	e7f1      	b.n	8020c06 <_svfprintf_r+0x25e>
 8020c22:	6839      	ldr	r1, [r7, #0]
 8020c24:	9605      	str	r6, [sp, #20]
 8020c26:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8020c2a:	3704      	adds	r7, #4
 8020c2c:	e78f      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020c2e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8020c32:	e78c      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020c34:	2100      	movs	r1, #0
 8020c36:	910a      	str	r1, [sp, #40]	; 0x28
 8020c38:	9902      	ldr	r1, [sp, #8]
 8020c3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020c3c:	3930      	subs	r1, #48	; 0x30
 8020c3e:	fb00 1106 	mla	r1, r0, r6, r1
 8020c42:	910a      	str	r1, [sp, #40]	; 0x28
 8020c44:	9905      	ldr	r1, [sp, #20]
 8020c46:	460e      	mov	r6, r1
 8020c48:	f816 1b01 	ldrb.w	r1, [r6], #1
 8020c4c:	9102      	str	r1, [sp, #8]
 8020c4e:	9902      	ldr	r1, [sp, #8]
 8020c50:	9605      	str	r6, [sp, #20]
 8020c52:	3930      	subs	r1, #48	; 0x30
 8020c54:	2909      	cmp	r1, #9
 8020c56:	d9ef      	bls.n	8020c38 <_svfprintf_r+0x290>
 8020c58:	e70b      	b.n	8020a72 <_svfprintf_r+0xca>
 8020c5a:	f045 0508 	orr.w	r5, r5, #8
 8020c5e:	e776      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020c60:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8020c64:	e773      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020c66:	bf00      	nop
	...
 8020c70:	08032558 	.word	0x08032558
 8020c74:	9905      	ldr	r1, [sp, #20]
 8020c76:	7809      	ldrb	r1, [r1, #0]
 8020c78:	296c      	cmp	r1, #108	; 0x6c
 8020c7a:	d105      	bne.n	8020c88 <_svfprintf_r+0x2e0>
 8020c7c:	9905      	ldr	r1, [sp, #20]
 8020c7e:	3101      	adds	r1, #1
 8020c80:	9105      	str	r1, [sp, #20]
 8020c82:	f045 0520 	orr.w	r5, r5, #32
 8020c86:	e762      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020c88:	f045 0510 	orr.w	r5, r5, #16
 8020c8c:	e75f      	b.n	8020b4e <_svfprintf_r+0x1a6>
 8020c8e:	1d3b      	adds	r3, r7, #4
 8020c90:	9304      	str	r3, [sp, #16]
 8020c92:	2600      	movs	r6, #0
 8020c94:	683b      	ldr	r3, [r7, #0]
 8020c96:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8020c9a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8020c9e:	f04f 0901 	mov.w	r9, #1
 8020ca2:	4637      	mov	r7, r6
 8020ca4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8020ca8:	e11b      	b.n	8020ee2 <_svfprintf_r+0x53a>
 8020caa:	b10b      	cbz	r3, 8020cb0 <_svfprintf_r+0x308>
 8020cac:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020cb0:	f045 0510 	orr.w	r5, r5, #16
 8020cb4:	e752      	b.n	8020b5c <_svfprintf_r+0x1b4>
 8020cb6:	f015 0f10 	tst.w	r5, #16
 8020cba:	f107 0304 	add.w	r3, r7, #4
 8020cbe:	d003      	beq.n	8020cc8 <_svfprintf_r+0x320>
 8020cc0:	683e      	ldr	r6, [r7, #0]
 8020cc2:	9304      	str	r3, [sp, #16]
 8020cc4:	17f7      	asrs	r7, r6, #31
 8020cc6:	e754      	b.n	8020b72 <_svfprintf_r+0x1ca>
 8020cc8:	683e      	ldr	r6, [r7, #0]
 8020cca:	9304      	str	r3, [sp, #16]
 8020ccc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020cd0:	bf18      	it	ne
 8020cd2:	b236      	sxthne	r6, r6
 8020cd4:	e7f6      	b.n	8020cc4 <_svfprintf_r+0x31c>
 8020cd6:	b10b      	cbz	r3, 8020cdc <_svfprintf_r+0x334>
 8020cd8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020cdc:	3707      	adds	r7, #7
 8020cde:	f027 0707 	bic.w	r7, r7, #7
 8020ce2:	f107 0308 	add.w	r3, r7, #8
 8020ce6:	9304      	str	r3, [sp, #16]
 8020ce8:	ed97 7b00 	vldr	d7, [r7]
 8020cec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020cf0:	9b06      	ldr	r3, [sp, #24]
 8020cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8020cf4:	9b07      	ldr	r3, [sp, #28]
 8020cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020cfa:	9313      	str	r3, [sp, #76]	; 0x4c
 8020cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8020d00:	4b4a      	ldr	r3, [pc, #296]	; (8020e2c <_svfprintf_r+0x484>)
 8020d02:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8020d06:	f7df ff25 	bl	8000b54 <__aeabi_dcmpun>
 8020d0a:	2800      	cmp	r0, #0
 8020d0c:	f040 85d5 	bne.w	80218ba <_svfprintf_r+0xf12>
 8020d10:	f04f 32ff 	mov.w	r2, #4294967295
 8020d14:	4b45      	ldr	r3, [pc, #276]	; (8020e2c <_svfprintf_r+0x484>)
 8020d16:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8020d1a:	f7df fefd 	bl	8000b18 <__aeabi_dcmple>
 8020d1e:	2800      	cmp	r0, #0
 8020d20:	f040 85cb 	bne.w	80218ba <_svfprintf_r+0xf12>
 8020d24:	2200      	movs	r2, #0
 8020d26:	2300      	movs	r3, #0
 8020d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020d2c:	f7df feea 	bl	8000b04 <__aeabi_dcmplt>
 8020d30:	b110      	cbz	r0, 8020d38 <_svfprintf_r+0x390>
 8020d32:	232d      	movs	r3, #45	; 0x2d
 8020d34:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020d38:	4b3d      	ldr	r3, [pc, #244]	; (8020e30 <_svfprintf_r+0x488>)
 8020d3a:	4a3e      	ldr	r2, [pc, #248]	; (8020e34 <_svfprintf_r+0x48c>)
 8020d3c:	9902      	ldr	r1, [sp, #8]
 8020d3e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8020d42:	2947      	cmp	r1, #71	; 0x47
 8020d44:	bfcc      	ite	gt
 8020d46:	4690      	movgt	r8, r2
 8020d48:	4698      	movle	r8, r3
 8020d4a:	f04f 0903 	mov.w	r9, #3
 8020d4e:	2600      	movs	r6, #0
 8020d50:	4637      	mov	r7, r6
 8020d52:	e0c6      	b.n	8020ee2 <_svfprintf_r+0x53a>
 8020d54:	f1b9 3fff 	cmp.w	r9, #4294967295
 8020d58:	d022      	beq.n	8020da0 <_svfprintf_r+0x3f8>
 8020d5a:	9b02      	ldr	r3, [sp, #8]
 8020d5c:	f023 0320 	bic.w	r3, r3, #32
 8020d60:	2b47      	cmp	r3, #71	; 0x47
 8020d62:	d104      	bne.n	8020d6e <_svfprintf_r+0x3c6>
 8020d64:	f1b9 0f00 	cmp.w	r9, #0
 8020d68:	bf08      	it	eq
 8020d6a:	f04f 0901 	moveq.w	r9, #1
 8020d6e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8020d72:	930c      	str	r3, [sp, #48]	; 0x30
 8020d74:	9b07      	ldr	r3, [sp, #28]
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	da15      	bge.n	8020da6 <_svfprintf_r+0x3fe>
 8020d7a:	9b06      	ldr	r3, [sp, #24]
 8020d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8020d7e:	9b07      	ldr	r3, [sp, #28]
 8020d80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8020d86:	232d      	movs	r3, #45	; 0x2d
 8020d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d8a:	9b02      	ldr	r3, [sp, #8]
 8020d8c:	f023 0720 	bic.w	r7, r3, #32
 8020d90:	2f46      	cmp	r7, #70	; 0x46
 8020d92:	d00e      	beq.n	8020db2 <_svfprintf_r+0x40a>
 8020d94:	2f45      	cmp	r7, #69	; 0x45
 8020d96:	d146      	bne.n	8020e26 <_svfprintf_r+0x47e>
 8020d98:	f109 0601 	add.w	r6, r9, #1
 8020d9c:	2102      	movs	r1, #2
 8020d9e:	e00a      	b.n	8020db6 <_svfprintf_r+0x40e>
 8020da0:	f04f 0906 	mov.w	r9, #6
 8020da4:	e7e3      	b.n	8020d6e <_svfprintf_r+0x3c6>
 8020da6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8020daa:	2300      	movs	r3, #0
 8020dac:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8020db0:	e7ea      	b.n	8020d88 <_svfprintf_r+0x3e0>
 8020db2:	464e      	mov	r6, r9
 8020db4:	2103      	movs	r1, #3
 8020db6:	ab1d      	add	r3, sp, #116	; 0x74
 8020db8:	9301      	str	r3, [sp, #4]
 8020dba:	ab1a      	add	r3, sp, #104	; 0x68
 8020dbc:	9300      	str	r3, [sp, #0]
 8020dbe:	4632      	mov	r2, r6
 8020dc0:	ab19      	add	r3, sp, #100	; 0x64
 8020dc2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8020dc6:	4658      	mov	r0, fp
 8020dc8:	f000 fe4e 	bl	8021a68 <_dtoa_r>
 8020dcc:	2f47      	cmp	r7, #71	; 0x47
 8020dce:	4680      	mov	r8, r0
 8020dd0:	d102      	bne.n	8020dd8 <_svfprintf_r+0x430>
 8020dd2:	07e8      	lsls	r0, r5, #31
 8020dd4:	f140 857e 	bpl.w	80218d4 <_svfprintf_r+0xf2c>
 8020dd8:	eb08 0306 	add.w	r3, r8, r6
 8020ddc:	2f46      	cmp	r7, #70	; 0x46
 8020dde:	9303      	str	r3, [sp, #12]
 8020de0:	d111      	bne.n	8020e06 <_svfprintf_r+0x45e>
 8020de2:	f898 3000 	ldrb.w	r3, [r8]
 8020de6:	2b30      	cmp	r3, #48	; 0x30
 8020de8:	d109      	bne.n	8020dfe <_svfprintf_r+0x456>
 8020dea:	2200      	movs	r2, #0
 8020dec:	2300      	movs	r3, #0
 8020dee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020df2:	f7df fe7d 	bl	8000af0 <__aeabi_dcmpeq>
 8020df6:	b910      	cbnz	r0, 8020dfe <_svfprintf_r+0x456>
 8020df8:	f1c6 0601 	rsb	r6, r6, #1
 8020dfc:	9619      	str	r6, [sp, #100]	; 0x64
 8020dfe:	9a03      	ldr	r2, [sp, #12]
 8020e00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e02:	441a      	add	r2, r3
 8020e04:	9203      	str	r2, [sp, #12]
 8020e06:	2200      	movs	r2, #0
 8020e08:	2300      	movs	r3, #0
 8020e0a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020e0e:	f7df fe6f 	bl	8000af0 <__aeabi_dcmpeq>
 8020e12:	b988      	cbnz	r0, 8020e38 <_svfprintf_r+0x490>
 8020e14:	2230      	movs	r2, #48	; 0x30
 8020e16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020e18:	9903      	ldr	r1, [sp, #12]
 8020e1a:	4299      	cmp	r1, r3
 8020e1c:	d90e      	bls.n	8020e3c <_svfprintf_r+0x494>
 8020e1e:	1c59      	adds	r1, r3, #1
 8020e20:	911d      	str	r1, [sp, #116]	; 0x74
 8020e22:	701a      	strb	r2, [r3, #0]
 8020e24:	e7f7      	b.n	8020e16 <_svfprintf_r+0x46e>
 8020e26:	464e      	mov	r6, r9
 8020e28:	e7b8      	b.n	8020d9c <_svfprintf_r+0x3f4>
 8020e2a:	bf00      	nop
 8020e2c:	7fefffff 	.word	0x7fefffff
 8020e30:	0803254c 	.word	0x0803254c
 8020e34:	08032550 	.word	0x08032550
 8020e38:	9b03      	ldr	r3, [sp, #12]
 8020e3a:	931d      	str	r3, [sp, #116]	; 0x74
 8020e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020e3e:	2f47      	cmp	r7, #71	; 0x47
 8020e40:	eba3 0308 	sub.w	r3, r3, r8
 8020e44:	9303      	str	r3, [sp, #12]
 8020e46:	f040 80fa 	bne.w	802103e <_svfprintf_r+0x696>
 8020e4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e4c:	1cd9      	adds	r1, r3, #3
 8020e4e:	db02      	blt.n	8020e56 <_svfprintf_r+0x4ae>
 8020e50:	4599      	cmp	r9, r3
 8020e52:	f280 8120 	bge.w	8021096 <_svfprintf_r+0x6ee>
 8020e56:	9b02      	ldr	r3, [sp, #8]
 8020e58:	3b02      	subs	r3, #2
 8020e5a:	9302      	str	r3, [sp, #8]
 8020e5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020e5e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8020e62:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8020e66:	1e53      	subs	r3, r2, #1
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	9319      	str	r3, [sp, #100]	; 0x64
 8020e6c:	bfb6      	itet	lt
 8020e6e:	f1c2 0301 	rsblt	r3, r2, #1
 8020e72:	222b      	movge	r2, #43	; 0x2b
 8020e74:	222d      	movlt	r2, #45	; 0x2d
 8020e76:	2b09      	cmp	r3, #9
 8020e78:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8020e7c:	f340 80fb 	ble.w	8021076 <_svfprintf_r+0x6ce>
 8020e80:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8020e84:	260a      	movs	r6, #10
 8020e86:	fb93 f0f6 	sdiv	r0, r3, r6
 8020e8a:	fb06 3310 	mls	r3, r6, r0, r3
 8020e8e:	3330      	adds	r3, #48	; 0x30
 8020e90:	2809      	cmp	r0, #9
 8020e92:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020e96:	f102 31ff 	add.w	r1, r2, #4294967295
 8020e9a:	4603      	mov	r3, r0
 8020e9c:	f300 80e4 	bgt.w	8021068 <_svfprintf_r+0x6c0>
 8020ea0:	3330      	adds	r3, #48	; 0x30
 8020ea2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8020ea6:	3a02      	subs	r2, #2
 8020ea8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8020eac:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8020eb0:	4282      	cmp	r2, r0
 8020eb2:	4619      	mov	r1, r3
 8020eb4:	f0c0 80da 	bcc.w	802106c <_svfprintf_r+0x6c4>
 8020eb8:	9a03      	ldr	r2, [sp, #12]
 8020eba:	ab1b      	add	r3, sp, #108	; 0x6c
 8020ebc:	1acb      	subs	r3, r1, r3
 8020ebe:	2a01      	cmp	r2, #1
 8020ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8020ec2:	eb03 0902 	add.w	r9, r3, r2
 8020ec6:	dc02      	bgt.n	8020ece <_svfprintf_r+0x526>
 8020ec8:	f015 0701 	ands.w	r7, r5, #1
 8020ecc:	d002      	beq.n	8020ed4 <_svfprintf_r+0x52c>
 8020ece:	9b08      	ldr	r3, [sp, #32]
 8020ed0:	2700      	movs	r7, #0
 8020ed2:	4499      	add	r9, r3
 8020ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ed6:	b113      	cbz	r3, 8020ede <_svfprintf_r+0x536>
 8020ed8:	232d      	movs	r3, #45	; 0x2d
 8020eda:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020ee0:	2600      	movs	r6, #0
 8020ee2:	454e      	cmp	r6, r9
 8020ee4:	4633      	mov	r3, r6
 8020ee6:	bfb8      	it	lt
 8020ee8:	464b      	movlt	r3, r9
 8020eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8020eec:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8020ef0:	b113      	cbz	r3, 8020ef8 <_svfprintf_r+0x550>
 8020ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ef4:	3301      	adds	r3, #1
 8020ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ef8:	f015 0302 	ands.w	r3, r5, #2
 8020efc:	9314      	str	r3, [sp, #80]	; 0x50
 8020efe:	bf1e      	ittt	ne
 8020f00:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8020f02:	3302      	addne	r3, #2
 8020f04:	930b      	strne	r3, [sp, #44]	; 0x2c
 8020f06:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8020f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8020f0c:	d118      	bne.n	8020f40 <_svfprintf_r+0x598>
 8020f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020f12:	1a9b      	subs	r3, r3, r2
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	930c      	str	r3, [sp, #48]	; 0x30
 8020f18:	dd12      	ble.n	8020f40 <_svfprintf_r+0x598>
 8020f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f1c:	2b10      	cmp	r3, #16
 8020f1e:	4ba9      	ldr	r3, [pc, #676]	; (80211c4 <_svfprintf_r+0x81c>)
 8020f20:	6023      	str	r3, [r4, #0]
 8020f22:	f300 81d5 	bgt.w	80212d0 <_svfprintf_r+0x928>
 8020f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f28:	6063      	str	r3, [r4, #4]
 8020f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f2e:	4413      	add	r3, r2
 8020f30:	9321      	str	r3, [sp, #132]	; 0x84
 8020f32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f34:	3301      	adds	r3, #1
 8020f36:	2b07      	cmp	r3, #7
 8020f38:	9320      	str	r3, [sp, #128]	; 0x80
 8020f3a:	f300 81e2 	bgt.w	8021302 <_svfprintf_r+0x95a>
 8020f3e:	3408      	adds	r4, #8
 8020f40:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8020f44:	b173      	cbz	r3, 8020f64 <_svfprintf_r+0x5bc>
 8020f46:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8020f4a:	6023      	str	r3, [r4, #0]
 8020f4c:	2301      	movs	r3, #1
 8020f4e:	6063      	str	r3, [r4, #4]
 8020f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f52:	3301      	adds	r3, #1
 8020f54:	9321      	str	r3, [sp, #132]	; 0x84
 8020f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f58:	3301      	adds	r3, #1
 8020f5a:	2b07      	cmp	r3, #7
 8020f5c:	9320      	str	r3, [sp, #128]	; 0x80
 8020f5e:	f300 81da 	bgt.w	8021316 <_svfprintf_r+0x96e>
 8020f62:	3408      	adds	r4, #8
 8020f64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020f66:	b16b      	cbz	r3, 8020f84 <_svfprintf_r+0x5dc>
 8020f68:	ab18      	add	r3, sp, #96	; 0x60
 8020f6a:	6023      	str	r3, [r4, #0]
 8020f6c:	2302      	movs	r3, #2
 8020f6e:	6063      	str	r3, [r4, #4]
 8020f70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f72:	3302      	adds	r3, #2
 8020f74:	9321      	str	r3, [sp, #132]	; 0x84
 8020f76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f78:	3301      	adds	r3, #1
 8020f7a:	2b07      	cmp	r3, #7
 8020f7c:	9320      	str	r3, [sp, #128]	; 0x80
 8020f7e:	f300 81d4 	bgt.w	802132a <_svfprintf_r+0x982>
 8020f82:	3408      	adds	r4, #8
 8020f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020f86:	2b80      	cmp	r3, #128	; 0x80
 8020f88:	d114      	bne.n	8020fb4 <_svfprintf_r+0x60c>
 8020f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020f8e:	1a9b      	subs	r3, r3, r2
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	dd0f      	ble.n	8020fb4 <_svfprintf_r+0x60c>
 8020f94:	4a8c      	ldr	r2, [pc, #560]	; (80211c8 <_svfprintf_r+0x820>)
 8020f96:	6022      	str	r2, [r4, #0]
 8020f98:	2b10      	cmp	r3, #16
 8020f9a:	f300 81d0 	bgt.w	802133e <_svfprintf_r+0x996>
 8020f9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020fa0:	6063      	str	r3, [r4, #4]
 8020fa2:	4413      	add	r3, r2
 8020fa4:	9321      	str	r3, [sp, #132]	; 0x84
 8020fa6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fa8:	3301      	adds	r3, #1
 8020faa:	2b07      	cmp	r3, #7
 8020fac:	9320      	str	r3, [sp, #128]	; 0x80
 8020fae:	f300 81df 	bgt.w	8021370 <_svfprintf_r+0x9c8>
 8020fb2:	3408      	adds	r4, #8
 8020fb4:	eba6 0609 	sub.w	r6, r6, r9
 8020fb8:	2e00      	cmp	r6, #0
 8020fba:	dd0f      	ble.n	8020fdc <_svfprintf_r+0x634>
 8020fbc:	4b82      	ldr	r3, [pc, #520]	; (80211c8 <_svfprintf_r+0x820>)
 8020fbe:	6023      	str	r3, [r4, #0]
 8020fc0:	2e10      	cmp	r6, #16
 8020fc2:	f300 81df 	bgt.w	8021384 <_svfprintf_r+0x9dc>
 8020fc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fc8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8020fca:	6066      	str	r6, [r4, #4]
 8020fcc:	3301      	adds	r3, #1
 8020fce:	4406      	add	r6, r0
 8020fd0:	2b07      	cmp	r3, #7
 8020fd2:	9621      	str	r6, [sp, #132]	; 0x84
 8020fd4:	9320      	str	r3, [sp, #128]	; 0x80
 8020fd6:	f300 81ec 	bgt.w	80213b2 <_svfprintf_r+0xa0a>
 8020fda:	3408      	adds	r4, #8
 8020fdc:	05eb      	lsls	r3, r5, #23
 8020fde:	f100 81f2 	bmi.w	80213c6 <_svfprintf_r+0xa1e>
 8020fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020fe4:	e884 0300 	stmia.w	r4, {r8, r9}
 8020fe8:	444b      	add	r3, r9
 8020fea:	9321      	str	r3, [sp, #132]	; 0x84
 8020fec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fee:	3301      	adds	r3, #1
 8020ff0:	2b07      	cmp	r3, #7
 8020ff2:	9320      	str	r3, [sp, #128]	; 0x80
 8020ff4:	f340 8419 	ble.w	802182a <_svfprintf_r+0xe82>
 8020ff8:	aa1f      	add	r2, sp, #124	; 0x7c
 8020ffa:	4651      	mov	r1, sl
 8020ffc:	4658      	mov	r0, fp
 8020ffe:	f002 f811 	bl	8023024 <__ssprint_r>
 8021002:	2800      	cmp	r0, #0
 8021004:	f040 8431 	bne.w	802186a <_svfprintf_r+0xec2>
 8021008:	ac2c      	add	r4, sp, #176	; 0xb0
 802100a:	076b      	lsls	r3, r5, #29
 802100c:	f100 8410 	bmi.w	8021830 <_svfprintf_r+0xe88>
 8021010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021016:	428a      	cmp	r2, r1
 8021018:	bfac      	ite	ge
 802101a:	189b      	addge	r3, r3, r2
 802101c:	185b      	addlt	r3, r3, r1
 802101e:	9309      	str	r3, [sp, #36]	; 0x24
 8021020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021022:	b13b      	cbz	r3, 8021034 <_svfprintf_r+0x68c>
 8021024:	aa1f      	add	r2, sp, #124	; 0x7c
 8021026:	4651      	mov	r1, sl
 8021028:	4658      	mov	r0, fp
 802102a:	f001 fffb 	bl	8023024 <__ssprint_r>
 802102e:	2800      	cmp	r0, #0
 8021030:	f040 841b 	bne.w	802186a <_svfprintf_r+0xec2>
 8021034:	2300      	movs	r3, #0
 8021036:	9320      	str	r3, [sp, #128]	; 0x80
 8021038:	9f04      	ldr	r7, [sp, #16]
 802103a:	ac2c      	add	r4, sp, #176	; 0xb0
 802103c:	e4ee      	b.n	8020a1c <_svfprintf_r+0x74>
 802103e:	9b02      	ldr	r3, [sp, #8]
 8021040:	2b65      	cmp	r3, #101	; 0x65
 8021042:	f77f af0b 	ble.w	8020e5c <_svfprintf_r+0x4b4>
 8021046:	9b02      	ldr	r3, [sp, #8]
 8021048:	2b66      	cmp	r3, #102	; 0x66
 802104a:	d124      	bne.n	8021096 <_svfprintf_r+0x6ee>
 802104c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802104e:	2b00      	cmp	r3, #0
 8021050:	dd19      	ble.n	8021086 <_svfprintf_r+0x6de>
 8021052:	f1b9 0f00 	cmp.w	r9, #0
 8021056:	d101      	bne.n	802105c <_svfprintf_r+0x6b4>
 8021058:	07ea      	lsls	r2, r5, #31
 802105a:	d502      	bpl.n	8021062 <_svfprintf_r+0x6ba>
 802105c:	9a08      	ldr	r2, [sp, #32]
 802105e:	4413      	add	r3, r2
 8021060:	444b      	add	r3, r9
 8021062:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8021064:	4699      	mov	r9, r3
 8021066:	e735      	b.n	8020ed4 <_svfprintf_r+0x52c>
 8021068:	460a      	mov	r2, r1
 802106a:	e70c      	b.n	8020e86 <_svfprintf_r+0x4de>
 802106c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021070:	f803 1b01 	strb.w	r1, [r3], #1
 8021074:	e71c      	b.n	8020eb0 <_svfprintf_r+0x508>
 8021076:	2230      	movs	r2, #48	; 0x30
 8021078:	4413      	add	r3, r2
 802107a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 802107e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8021082:	a91c      	add	r1, sp, #112	; 0x70
 8021084:	e718      	b.n	8020eb8 <_svfprintf_r+0x510>
 8021086:	f1b9 0f00 	cmp.w	r9, #0
 802108a:	d101      	bne.n	8021090 <_svfprintf_r+0x6e8>
 802108c:	07eb      	lsls	r3, r5, #31
 802108e:	d515      	bpl.n	80210bc <_svfprintf_r+0x714>
 8021090:	9b08      	ldr	r3, [sp, #32]
 8021092:	3301      	adds	r3, #1
 8021094:	e7e4      	b.n	8021060 <_svfprintf_r+0x6b8>
 8021096:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021098:	9b03      	ldr	r3, [sp, #12]
 802109a:	429a      	cmp	r2, r3
 802109c:	db06      	blt.n	80210ac <_svfprintf_r+0x704>
 802109e:	07ef      	lsls	r7, r5, #31
 80210a0:	d50e      	bpl.n	80210c0 <_svfprintf_r+0x718>
 80210a2:	9b08      	ldr	r3, [sp, #32]
 80210a4:	4413      	add	r3, r2
 80210a6:	2267      	movs	r2, #103	; 0x67
 80210a8:	9202      	str	r2, [sp, #8]
 80210aa:	e7da      	b.n	8021062 <_svfprintf_r+0x6ba>
 80210ac:	9b03      	ldr	r3, [sp, #12]
 80210ae:	9908      	ldr	r1, [sp, #32]
 80210b0:	2a00      	cmp	r2, #0
 80210b2:	440b      	add	r3, r1
 80210b4:	dcf7      	bgt.n	80210a6 <_svfprintf_r+0x6fe>
 80210b6:	f1c2 0201 	rsb	r2, r2, #1
 80210ba:	e7f3      	b.n	80210a4 <_svfprintf_r+0x6fc>
 80210bc:	2301      	movs	r3, #1
 80210be:	e7d0      	b.n	8021062 <_svfprintf_r+0x6ba>
 80210c0:	4613      	mov	r3, r2
 80210c2:	e7f0      	b.n	80210a6 <_svfprintf_r+0x6fe>
 80210c4:	b10b      	cbz	r3, 80210ca <_svfprintf_r+0x722>
 80210c6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80210ca:	f015 0f20 	tst.w	r5, #32
 80210ce:	f107 0304 	add.w	r3, r7, #4
 80210d2:	d008      	beq.n	80210e6 <_svfprintf_r+0x73e>
 80210d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80210d6:	683a      	ldr	r2, [r7, #0]
 80210d8:	17ce      	asrs	r6, r1, #31
 80210da:	4608      	mov	r0, r1
 80210dc:	4631      	mov	r1, r6
 80210de:	e9c2 0100 	strd	r0, r1, [r2]
 80210e2:	461f      	mov	r7, r3
 80210e4:	e49a      	b.n	8020a1c <_svfprintf_r+0x74>
 80210e6:	06ee      	lsls	r6, r5, #27
 80210e8:	d503      	bpl.n	80210f2 <_svfprintf_r+0x74a>
 80210ea:	683a      	ldr	r2, [r7, #0]
 80210ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80210ee:	6011      	str	r1, [r2, #0]
 80210f0:	e7f7      	b.n	80210e2 <_svfprintf_r+0x73a>
 80210f2:	0668      	lsls	r0, r5, #25
 80210f4:	d5f9      	bpl.n	80210ea <_svfprintf_r+0x742>
 80210f6:	683a      	ldr	r2, [r7, #0]
 80210f8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80210fc:	8011      	strh	r1, [r2, #0]
 80210fe:	e7f0      	b.n	80210e2 <_svfprintf_r+0x73a>
 8021100:	f045 0510 	orr.w	r5, r5, #16
 8021104:	f015 0320 	ands.w	r3, r5, #32
 8021108:	d022      	beq.n	8021150 <_svfprintf_r+0x7a8>
 802110a:	3707      	adds	r7, #7
 802110c:	f027 0707 	bic.w	r7, r7, #7
 8021110:	f107 0308 	add.w	r3, r7, #8
 8021114:	e9d7 6700 	ldrd	r6, r7, [r7]
 8021118:	9304      	str	r3, [sp, #16]
 802111a:	2300      	movs	r3, #0
 802111c:	2200      	movs	r2, #0
 802111e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8021122:	f1b9 3fff 	cmp.w	r9, #4294967295
 8021126:	f000 83db 	beq.w	80218e0 <_svfprintf_r+0xf38>
 802112a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 802112e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021130:	ea56 0207 	orrs.w	r2, r6, r7
 8021134:	f040 83d9 	bne.w	80218ea <_svfprintf_r+0xf42>
 8021138:	f1b9 0f00 	cmp.w	r9, #0
 802113c:	f000 80aa 	beq.w	8021294 <_svfprintf_r+0x8ec>
 8021140:	2b01      	cmp	r3, #1
 8021142:	d076      	beq.n	8021232 <_svfprintf_r+0x88a>
 8021144:	2b02      	cmp	r3, #2
 8021146:	f000 8091 	beq.w	802126c <_svfprintf_r+0x8c4>
 802114a:	2600      	movs	r6, #0
 802114c:	2700      	movs	r7, #0
 802114e:	e3d2      	b.n	80218f6 <_svfprintf_r+0xf4e>
 8021150:	1d3a      	adds	r2, r7, #4
 8021152:	f015 0110 	ands.w	r1, r5, #16
 8021156:	9204      	str	r2, [sp, #16]
 8021158:	d002      	beq.n	8021160 <_svfprintf_r+0x7b8>
 802115a:	683e      	ldr	r6, [r7, #0]
 802115c:	2700      	movs	r7, #0
 802115e:	e7dd      	b.n	802111c <_svfprintf_r+0x774>
 8021160:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8021164:	d0f9      	beq.n	802115a <_svfprintf_r+0x7b2>
 8021166:	883e      	ldrh	r6, [r7, #0]
 8021168:	2700      	movs	r7, #0
 802116a:	e7d6      	b.n	802111a <_svfprintf_r+0x772>
 802116c:	1d3b      	adds	r3, r7, #4
 802116e:	9304      	str	r3, [sp, #16]
 8021170:	2330      	movs	r3, #48	; 0x30
 8021172:	2278      	movs	r2, #120	; 0x78
 8021174:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8021178:	4b14      	ldr	r3, [pc, #80]	; (80211cc <_svfprintf_r+0x824>)
 802117a:	683e      	ldr	r6, [r7, #0]
 802117c:	9311      	str	r3, [sp, #68]	; 0x44
 802117e:	2700      	movs	r7, #0
 8021180:	f045 0502 	orr.w	r5, r5, #2
 8021184:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8021188:	2302      	movs	r3, #2
 802118a:	9202      	str	r2, [sp, #8]
 802118c:	e7c6      	b.n	802111c <_svfprintf_r+0x774>
 802118e:	1d3b      	adds	r3, r7, #4
 8021190:	2600      	movs	r6, #0
 8021192:	f1b9 3fff 	cmp.w	r9, #4294967295
 8021196:	9304      	str	r3, [sp, #16]
 8021198:	f8d7 8000 	ldr.w	r8, [r7]
 802119c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80211a0:	d00a      	beq.n	80211b8 <_svfprintf_r+0x810>
 80211a2:	464a      	mov	r2, r9
 80211a4:	4631      	mov	r1, r6
 80211a6:	4640      	mov	r0, r8
 80211a8:	f7df f82a 	bl	8000200 <memchr>
 80211ac:	2800      	cmp	r0, #0
 80211ae:	f000 808d 	beq.w	80212cc <_svfprintf_r+0x924>
 80211b2:	eba0 0908 	sub.w	r9, r0, r8
 80211b6:	e5cb      	b.n	8020d50 <_svfprintf_r+0x3a8>
 80211b8:	4640      	mov	r0, r8
 80211ba:	f7df f871 	bl	80002a0 <strlen>
 80211be:	4681      	mov	r9, r0
 80211c0:	e5c6      	b.n	8020d50 <_svfprintf_r+0x3a8>
 80211c2:	bf00      	nop
 80211c4:	0803257a 	.word	0x0803257a
 80211c8:	0803258a 	.word	0x0803258a
 80211cc:	08032569 	.word	0x08032569
 80211d0:	f045 0510 	orr.w	r5, r5, #16
 80211d4:	06a9      	lsls	r1, r5, #26
 80211d6:	d509      	bpl.n	80211ec <_svfprintf_r+0x844>
 80211d8:	3707      	adds	r7, #7
 80211da:	f027 0707 	bic.w	r7, r7, #7
 80211de:	f107 0308 	add.w	r3, r7, #8
 80211e2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80211e6:	9304      	str	r3, [sp, #16]
 80211e8:	2301      	movs	r3, #1
 80211ea:	e797      	b.n	802111c <_svfprintf_r+0x774>
 80211ec:	1d3b      	adds	r3, r7, #4
 80211ee:	f015 0f10 	tst.w	r5, #16
 80211f2:	9304      	str	r3, [sp, #16]
 80211f4:	d001      	beq.n	80211fa <_svfprintf_r+0x852>
 80211f6:	683e      	ldr	r6, [r7, #0]
 80211f8:	e002      	b.n	8021200 <_svfprintf_r+0x858>
 80211fa:	066a      	lsls	r2, r5, #25
 80211fc:	d5fb      	bpl.n	80211f6 <_svfprintf_r+0x84e>
 80211fe:	883e      	ldrh	r6, [r7, #0]
 8021200:	2700      	movs	r7, #0
 8021202:	e7f1      	b.n	80211e8 <_svfprintf_r+0x840>
 8021204:	b10b      	cbz	r3, 802120a <_svfprintf_r+0x862>
 8021206:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802120a:	4ba3      	ldr	r3, [pc, #652]	; (8021498 <_svfprintf_r+0xaf0>)
 802120c:	e4c2      	b.n	8020b94 <_svfprintf_r+0x1ec>
 802120e:	1d3b      	adds	r3, r7, #4
 8021210:	f015 0f10 	tst.w	r5, #16
 8021214:	9304      	str	r3, [sp, #16]
 8021216:	d001      	beq.n	802121c <_svfprintf_r+0x874>
 8021218:	683e      	ldr	r6, [r7, #0]
 802121a:	e002      	b.n	8021222 <_svfprintf_r+0x87a>
 802121c:	066e      	lsls	r6, r5, #25
 802121e:	d5fb      	bpl.n	8021218 <_svfprintf_r+0x870>
 8021220:	883e      	ldrh	r6, [r7, #0]
 8021222:	2700      	movs	r7, #0
 8021224:	e4c2      	b.n	8020bac <_svfprintf_r+0x204>
 8021226:	4643      	mov	r3, r8
 8021228:	e366      	b.n	80218f8 <_svfprintf_r+0xf50>
 802122a:	2f00      	cmp	r7, #0
 802122c:	bf08      	it	eq
 802122e:	2e0a      	cmpeq	r6, #10
 8021230:	d205      	bcs.n	802123e <_svfprintf_r+0x896>
 8021232:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8021236:	3630      	adds	r6, #48	; 0x30
 8021238:	f808 6d41 	strb.w	r6, [r8, #-65]!
 802123c:	e377      	b.n	802192e <_svfprintf_r+0xf86>
 802123e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8021242:	4630      	mov	r0, r6
 8021244:	4639      	mov	r1, r7
 8021246:	220a      	movs	r2, #10
 8021248:	2300      	movs	r3, #0
 802124a:	f7df fd31 	bl	8000cb0 <__aeabi_uldivmod>
 802124e:	3230      	adds	r2, #48	; 0x30
 8021250:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8021254:	2300      	movs	r3, #0
 8021256:	4630      	mov	r0, r6
 8021258:	4639      	mov	r1, r7
 802125a:	220a      	movs	r2, #10
 802125c:	f7df fd28 	bl	8000cb0 <__aeabi_uldivmod>
 8021260:	4606      	mov	r6, r0
 8021262:	460f      	mov	r7, r1
 8021264:	ea56 0307 	orrs.w	r3, r6, r7
 8021268:	d1eb      	bne.n	8021242 <_svfprintf_r+0x89a>
 802126a:	e360      	b.n	802192e <_svfprintf_r+0xf86>
 802126c:	2600      	movs	r6, #0
 802126e:	2700      	movs	r7, #0
 8021270:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8021274:	f006 030f 	and.w	r3, r6, #15
 8021278:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802127a:	5cd3      	ldrb	r3, [r2, r3]
 802127c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8021280:	0933      	lsrs	r3, r6, #4
 8021282:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8021286:	093a      	lsrs	r2, r7, #4
 8021288:	461e      	mov	r6, r3
 802128a:	4617      	mov	r7, r2
 802128c:	ea56 0307 	orrs.w	r3, r6, r7
 8021290:	d1f0      	bne.n	8021274 <_svfprintf_r+0x8cc>
 8021292:	e34c      	b.n	802192e <_svfprintf_r+0xf86>
 8021294:	b93b      	cbnz	r3, 80212a6 <_svfprintf_r+0x8fe>
 8021296:	07ea      	lsls	r2, r5, #31
 8021298:	d505      	bpl.n	80212a6 <_svfprintf_r+0x8fe>
 802129a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 802129e:	2330      	movs	r3, #48	; 0x30
 80212a0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80212a4:	e343      	b.n	802192e <_svfprintf_r+0xf86>
 80212a6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80212aa:	e340      	b.n	802192e <_svfprintf_r+0xf86>
 80212ac:	b10b      	cbz	r3, 80212b2 <_svfprintf_r+0x90a>
 80212ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80212b2:	9b02      	ldr	r3, [sp, #8]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	f000 82f7 	beq.w	80218a8 <_svfprintf_r+0xf00>
 80212ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80212be:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80212c2:	2600      	movs	r6, #0
 80212c4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80212c8:	9704      	str	r7, [sp, #16]
 80212ca:	e4e8      	b.n	8020c9e <_svfprintf_r+0x2f6>
 80212cc:	4606      	mov	r6, r0
 80212ce:	e53f      	b.n	8020d50 <_svfprintf_r+0x3a8>
 80212d0:	2310      	movs	r3, #16
 80212d2:	6063      	str	r3, [r4, #4]
 80212d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80212d6:	3310      	adds	r3, #16
 80212d8:	9321      	str	r3, [sp, #132]	; 0x84
 80212da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80212dc:	3301      	adds	r3, #1
 80212de:	2b07      	cmp	r3, #7
 80212e0:	9320      	str	r3, [sp, #128]	; 0x80
 80212e2:	dc04      	bgt.n	80212ee <_svfprintf_r+0x946>
 80212e4:	3408      	adds	r4, #8
 80212e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212e8:	3b10      	subs	r3, #16
 80212ea:	930c      	str	r3, [sp, #48]	; 0x30
 80212ec:	e615      	b.n	8020f1a <_svfprintf_r+0x572>
 80212ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80212f0:	4651      	mov	r1, sl
 80212f2:	4658      	mov	r0, fp
 80212f4:	f001 fe96 	bl	8023024 <__ssprint_r>
 80212f8:	2800      	cmp	r0, #0
 80212fa:	f040 82b6 	bne.w	802186a <_svfprintf_r+0xec2>
 80212fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8021300:	e7f1      	b.n	80212e6 <_svfprintf_r+0x93e>
 8021302:	aa1f      	add	r2, sp, #124	; 0x7c
 8021304:	4651      	mov	r1, sl
 8021306:	4658      	mov	r0, fp
 8021308:	f001 fe8c 	bl	8023024 <__ssprint_r>
 802130c:	2800      	cmp	r0, #0
 802130e:	f040 82ac 	bne.w	802186a <_svfprintf_r+0xec2>
 8021312:	ac2c      	add	r4, sp, #176	; 0xb0
 8021314:	e614      	b.n	8020f40 <_svfprintf_r+0x598>
 8021316:	aa1f      	add	r2, sp, #124	; 0x7c
 8021318:	4651      	mov	r1, sl
 802131a:	4658      	mov	r0, fp
 802131c:	f001 fe82 	bl	8023024 <__ssprint_r>
 8021320:	2800      	cmp	r0, #0
 8021322:	f040 82a2 	bne.w	802186a <_svfprintf_r+0xec2>
 8021326:	ac2c      	add	r4, sp, #176	; 0xb0
 8021328:	e61c      	b.n	8020f64 <_svfprintf_r+0x5bc>
 802132a:	aa1f      	add	r2, sp, #124	; 0x7c
 802132c:	4651      	mov	r1, sl
 802132e:	4658      	mov	r0, fp
 8021330:	f001 fe78 	bl	8023024 <__ssprint_r>
 8021334:	2800      	cmp	r0, #0
 8021336:	f040 8298 	bne.w	802186a <_svfprintf_r+0xec2>
 802133a:	ac2c      	add	r4, sp, #176	; 0xb0
 802133c:	e622      	b.n	8020f84 <_svfprintf_r+0x5dc>
 802133e:	2210      	movs	r2, #16
 8021340:	6062      	str	r2, [r4, #4]
 8021342:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021344:	3210      	adds	r2, #16
 8021346:	9221      	str	r2, [sp, #132]	; 0x84
 8021348:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802134a:	3201      	adds	r2, #1
 802134c:	2a07      	cmp	r2, #7
 802134e:	9220      	str	r2, [sp, #128]	; 0x80
 8021350:	dc02      	bgt.n	8021358 <_svfprintf_r+0x9b0>
 8021352:	3408      	adds	r4, #8
 8021354:	3b10      	subs	r3, #16
 8021356:	e61d      	b.n	8020f94 <_svfprintf_r+0x5ec>
 8021358:	aa1f      	add	r2, sp, #124	; 0x7c
 802135a:	4651      	mov	r1, sl
 802135c:	4658      	mov	r0, fp
 802135e:	930c      	str	r3, [sp, #48]	; 0x30
 8021360:	f001 fe60 	bl	8023024 <__ssprint_r>
 8021364:	2800      	cmp	r0, #0
 8021366:	f040 8280 	bne.w	802186a <_svfprintf_r+0xec2>
 802136a:	ac2c      	add	r4, sp, #176	; 0xb0
 802136c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802136e:	e7f1      	b.n	8021354 <_svfprintf_r+0x9ac>
 8021370:	aa1f      	add	r2, sp, #124	; 0x7c
 8021372:	4651      	mov	r1, sl
 8021374:	4658      	mov	r0, fp
 8021376:	f001 fe55 	bl	8023024 <__ssprint_r>
 802137a:	2800      	cmp	r0, #0
 802137c:	f040 8275 	bne.w	802186a <_svfprintf_r+0xec2>
 8021380:	ac2c      	add	r4, sp, #176	; 0xb0
 8021382:	e617      	b.n	8020fb4 <_svfprintf_r+0x60c>
 8021384:	2310      	movs	r3, #16
 8021386:	6063      	str	r3, [r4, #4]
 8021388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802138a:	3310      	adds	r3, #16
 802138c:	9321      	str	r3, [sp, #132]	; 0x84
 802138e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021390:	3301      	adds	r3, #1
 8021392:	2b07      	cmp	r3, #7
 8021394:	9320      	str	r3, [sp, #128]	; 0x80
 8021396:	dc02      	bgt.n	802139e <_svfprintf_r+0x9f6>
 8021398:	3408      	adds	r4, #8
 802139a:	3e10      	subs	r6, #16
 802139c:	e60e      	b.n	8020fbc <_svfprintf_r+0x614>
 802139e:	aa1f      	add	r2, sp, #124	; 0x7c
 80213a0:	4651      	mov	r1, sl
 80213a2:	4658      	mov	r0, fp
 80213a4:	f001 fe3e 	bl	8023024 <__ssprint_r>
 80213a8:	2800      	cmp	r0, #0
 80213aa:	f040 825e 	bne.w	802186a <_svfprintf_r+0xec2>
 80213ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80213b0:	e7f3      	b.n	802139a <_svfprintf_r+0x9f2>
 80213b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80213b4:	4651      	mov	r1, sl
 80213b6:	4658      	mov	r0, fp
 80213b8:	f001 fe34 	bl	8023024 <__ssprint_r>
 80213bc:	2800      	cmp	r0, #0
 80213be:	f040 8254 	bne.w	802186a <_svfprintf_r+0xec2>
 80213c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80213c4:	e60a      	b.n	8020fdc <_svfprintf_r+0x634>
 80213c6:	9b02      	ldr	r3, [sp, #8]
 80213c8:	2b65      	cmp	r3, #101	; 0x65
 80213ca:	f340 81a9 	ble.w	8021720 <_svfprintf_r+0xd78>
 80213ce:	2200      	movs	r2, #0
 80213d0:	2300      	movs	r3, #0
 80213d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80213d6:	f7df fb8b 	bl	8000af0 <__aeabi_dcmpeq>
 80213da:	2800      	cmp	r0, #0
 80213dc:	d062      	beq.n	80214a4 <_svfprintf_r+0xafc>
 80213de:	4b2f      	ldr	r3, [pc, #188]	; (802149c <_svfprintf_r+0xaf4>)
 80213e0:	6023      	str	r3, [r4, #0]
 80213e2:	2301      	movs	r3, #1
 80213e4:	6063      	str	r3, [r4, #4]
 80213e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80213e8:	3301      	adds	r3, #1
 80213ea:	9321      	str	r3, [sp, #132]	; 0x84
 80213ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80213ee:	3301      	adds	r3, #1
 80213f0:	2b07      	cmp	r3, #7
 80213f2:	9320      	str	r3, [sp, #128]	; 0x80
 80213f4:	dc25      	bgt.n	8021442 <_svfprintf_r+0xa9a>
 80213f6:	3408      	adds	r4, #8
 80213f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80213fa:	9a03      	ldr	r2, [sp, #12]
 80213fc:	4293      	cmp	r3, r2
 80213fe:	db02      	blt.n	8021406 <_svfprintf_r+0xa5e>
 8021400:	07ee      	lsls	r6, r5, #31
 8021402:	f57f ae02 	bpl.w	802100a <_svfprintf_r+0x662>
 8021406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021408:	6023      	str	r3, [r4, #0]
 802140a:	9b08      	ldr	r3, [sp, #32]
 802140c:	6063      	str	r3, [r4, #4]
 802140e:	9a08      	ldr	r2, [sp, #32]
 8021410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021412:	4413      	add	r3, r2
 8021414:	9321      	str	r3, [sp, #132]	; 0x84
 8021416:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021418:	3301      	adds	r3, #1
 802141a:	2b07      	cmp	r3, #7
 802141c:	9320      	str	r3, [sp, #128]	; 0x80
 802141e:	dc1a      	bgt.n	8021456 <_svfprintf_r+0xaae>
 8021420:	3408      	adds	r4, #8
 8021422:	9b03      	ldr	r3, [sp, #12]
 8021424:	1e5e      	subs	r6, r3, #1
 8021426:	2e00      	cmp	r6, #0
 8021428:	f77f adef 	ble.w	802100a <_svfprintf_r+0x662>
 802142c:	4f1c      	ldr	r7, [pc, #112]	; (80214a0 <_svfprintf_r+0xaf8>)
 802142e:	f04f 0810 	mov.w	r8, #16
 8021432:	2e10      	cmp	r6, #16
 8021434:	6027      	str	r7, [r4, #0]
 8021436:	dc18      	bgt.n	802146a <_svfprintf_r+0xac2>
 8021438:	6066      	str	r6, [r4, #4]
 802143a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802143c:	441e      	add	r6, r3
 802143e:	9621      	str	r6, [sp, #132]	; 0x84
 8021440:	e5d4      	b.n	8020fec <_svfprintf_r+0x644>
 8021442:	aa1f      	add	r2, sp, #124	; 0x7c
 8021444:	4651      	mov	r1, sl
 8021446:	4658      	mov	r0, fp
 8021448:	f001 fdec 	bl	8023024 <__ssprint_r>
 802144c:	2800      	cmp	r0, #0
 802144e:	f040 820c 	bne.w	802186a <_svfprintf_r+0xec2>
 8021452:	ac2c      	add	r4, sp, #176	; 0xb0
 8021454:	e7d0      	b.n	80213f8 <_svfprintf_r+0xa50>
 8021456:	aa1f      	add	r2, sp, #124	; 0x7c
 8021458:	4651      	mov	r1, sl
 802145a:	4658      	mov	r0, fp
 802145c:	f001 fde2 	bl	8023024 <__ssprint_r>
 8021460:	2800      	cmp	r0, #0
 8021462:	f040 8202 	bne.w	802186a <_svfprintf_r+0xec2>
 8021466:	ac2c      	add	r4, sp, #176	; 0xb0
 8021468:	e7db      	b.n	8021422 <_svfprintf_r+0xa7a>
 802146a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802146c:	f8c4 8004 	str.w	r8, [r4, #4]
 8021470:	3310      	adds	r3, #16
 8021472:	9321      	str	r3, [sp, #132]	; 0x84
 8021474:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021476:	3301      	adds	r3, #1
 8021478:	2b07      	cmp	r3, #7
 802147a:	9320      	str	r3, [sp, #128]	; 0x80
 802147c:	dc02      	bgt.n	8021484 <_svfprintf_r+0xadc>
 802147e:	3408      	adds	r4, #8
 8021480:	3e10      	subs	r6, #16
 8021482:	e7d6      	b.n	8021432 <_svfprintf_r+0xa8a>
 8021484:	aa1f      	add	r2, sp, #124	; 0x7c
 8021486:	4651      	mov	r1, sl
 8021488:	4658      	mov	r0, fp
 802148a:	f001 fdcb 	bl	8023024 <__ssprint_r>
 802148e:	2800      	cmp	r0, #0
 8021490:	f040 81eb 	bne.w	802186a <_svfprintf_r+0xec2>
 8021494:	ac2c      	add	r4, sp, #176	; 0xb0
 8021496:	e7f3      	b.n	8021480 <_svfprintf_r+0xad8>
 8021498:	08032569 	.word	0x08032569
 802149c:	0803240d 	.word	0x0803240d
 80214a0:	0803258a 	.word	0x0803258a
 80214a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	dc7a      	bgt.n	80215a0 <_svfprintf_r+0xbf8>
 80214aa:	4b9b      	ldr	r3, [pc, #620]	; (8021718 <_svfprintf_r+0xd70>)
 80214ac:	6023      	str	r3, [r4, #0]
 80214ae:	2301      	movs	r3, #1
 80214b0:	6063      	str	r3, [r4, #4]
 80214b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80214b4:	3301      	adds	r3, #1
 80214b6:	9321      	str	r3, [sp, #132]	; 0x84
 80214b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80214ba:	3301      	adds	r3, #1
 80214bc:	2b07      	cmp	r3, #7
 80214be:	9320      	str	r3, [sp, #128]	; 0x80
 80214c0:	dc44      	bgt.n	802154c <_svfprintf_r+0xba4>
 80214c2:	3408      	adds	r4, #8
 80214c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80214c6:	b923      	cbnz	r3, 80214d2 <_svfprintf_r+0xb2a>
 80214c8:	9b03      	ldr	r3, [sp, #12]
 80214ca:	b913      	cbnz	r3, 80214d2 <_svfprintf_r+0xb2a>
 80214cc:	07e8      	lsls	r0, r5, #31
 80214ce:	f57f ad9c 	bpl.w	802100a <_svfprintf_r+0x662>
 80214d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214d4:	6023      	str	r3, [r4, #0]
 80214d6:	9b08      	ldr	r3, [sp, #32]
 80214d8:	6063      	str	r3, [r4, #4]
 80214da:	9a08      	ldr	r2, [sp, #32]
 80214dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80214de:	4413      	add	r3, r2
 80214e0:	9321      	str	r3, [sp, #132]	; 0x84
 80214e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80214e4:	3301      	adds	r3, #1
 80214e6:	2b07      	cmp	r3, #7
 80214e8:	9320      	str	r3, [sp, #128]	; 0x80
 80214ea:	dc39      	bgt.n	8021560 <_svfprintf_r+0xbb8>
 80214ec:	f104 0308 	add.w	r3, r4, #8
 80214f0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80214f2:	2e00      	cmp	r6, #0
 80214f4:	da19      	bge.n	802152a <_svfprintf_r+0xb82>
 80214f6:	4f89      	ldr	r7, [pc, #548]	; (802171c <_svfprintf_r+0xd74>)
 80214f8:	4276      	negs	r6, r6
 80214fa:	2410      	movs	r4, #16
 80214fc:	2e10      	cmp	r6, #16
 80214fe:	601f      	str	r7, [r3, #0]
 8021500:	dc38      	bgt.n	8021574 <_svfprintf_r+0xbcc>
 8021502:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021504:	605e      	str	r6, [r3, #4]
 8021506:	4416      	add	r6, r2
 8021508:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802150a:	9621      	str	r6, [sp, #132]	; 0x84
 802150c:	3201      	adds	r2, #1
 802150e:	2a07      	cmp	r2, #7
 8021510:	f103 0308 	add.w	r3, r3, #8
 8021514:	9220      	str	r2, [sp, #128]	; 0x80
 8021516:	dd08      	ble.n	802152a <_svfprintf_r+0xb82>
 8021518:	aa1f      	add	r2, sp, #124	; 0x7c
 802151a:	4651      	mov	r1, sl
 802151c:	4658      	mov	r0, fp
 802151e:	f001 fd81 	bl	8023024 <__ssprint_r>
 8021522:	2800      	cmp	r0, #0
 8021524:	f040 81a1 	bne.w	802186a <_svfprintf_r+0xec2>
 8021528:	ab2c      	add	r3, sp, #176	; 0xb0
 802152a:	9a03      	ldr	r2, [sp, #12]
 802152c:	605a      	str	r2, [r3, #4]
 802152e:	9903      	ldr	r1, [sp, #12]
 8021530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021532:	f8c3 8000 	str.w	r8, [r3]
 8021536:	440a      	add	r2, r1
 8021538:	9221      	str	r2, [sp, #132]	; 0x84
 802153a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802153c:	3201      	adds	r2, #1
 802153e:	2a07      	cmp	r2, #7
 8021540:	9220      	str	r2, [sp, #128]	; 0x80
 8021542:	f73f ad59 	bgt.w	8020ff8 <_svfprintf_r+0x650>
 8021546:	f103 0408 	add.w	r4, r3, #8
 802154a:	e55e      	b.n	802100a <_svfprintf_r+0x662>
 802154c:	aa1f      	add	r2, sp, #124	; 0x7c
 802154e:	4651      	mov	r1, sl
 8021550:	4658      	mov	r0, fp
 8021552:	f001 fd67 	bl	8023024 <__ssprint_r>
 8021556:	2800      	cmp	r0, #0
 8021558:	f040 8187 	bne.w	802186a <_svfprintf_r+0xec2>
 802155c:	ac2c      	add	r4, sp, #176	; 0xb0
 802155e:	e7b1      	b.n	80214c4 <_svfprintf_r+0xb1c>
 8021560:	aa1f      	add	r2, sp, #124	; 0x7c
 8021562:	4651      	mov	r1, sl
 8021564:	4658      	mov	r0, fp
 8021566:	f001 fd5d 	bl	8023024 <__ssprint_r>
 802156a:	2800      	cmp	r0, #0
 802156c:	f040 817d 	bne.w	802186a <_svfprintf_r+0xec2>
 8021570:	ab2c      	add	r3, sp, #176	; 0xb0
 8021572:	e7bd      	b.n	80214f0 <_svfprintf_r+0xb48>
 8021574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021576:	605c      	str	r4, [r3, #4]
 8021578:	3210      	adds	r2, #16
 802157a:	9221      	str	r2, [sp, #132]	; 0x84
 802157c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802157e:	3201      	adds	r2, #1
 8021580:	2a07      	cmp	r2, #7
 8021582:	9220      	str	r2, [sp, #128]	; 0x80
 8021584:	dc02      	bgt.n	802158c <_svfprintf_r+0xbe4>
 8021586:	3308      	adds	r3, #8
 8021588:	3e10      	subs	r6, #16
 802158a:	e7b7      	b.n	80214fc <_svfprintf_r+0xb54>
 802158c:	aa1f      	add	r2, sp, #124	; 0x7c
 802158e:	4651      	mov	r1, sl
 8021590:	4658      	mov	r0, fp
 8021592:	f001 fd47 	bl	8023024 <__ssprint_r>
 8021596:	2800      	cmp	r0, #0
 8021598:	f040 8167 	bne.w	802186a <_svfprintf_r+0xec2>
 802159c:	ab2c      	add	r3, sp, #176	; 0xb0
 802159e:	e7f3      	b.n	8021588 <_svfprintf_r+0xbe0>
 80215a0:	9b03      	ldr	r3, [sp, #12]
 80215a2:	42bb      	cmp	r3, r7
 80215a4:	bfa8      	it	ge
 80215a6:	463b      	movge	r3, r7
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	461e      	mov	r6, r3
 80215ac:	dd0b      	ble.n	80215c6 <_svfprintf_r+0xc1e>
 80215ae:	6063      	str	r3, [r4, #4]
 80215b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80215b2:	f8c4 8000 	str.w	r8, [r4]
 80215b6:	4433      	add	r3, r6
 80215b8:	9321      	str	r3, [sp, #132]	; 0x84
 80215ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80215bc:	3301      	adds	r3, #1
 80215be:	2b07      	cmp	r3, #7
 80215c0:	9320      	str	r3, [sp, #128]	; 0x80
 80215c2:	dc5f      	bgt.n	8021684 <_svfprintf_r+0xcdc>
 80215c4:	3408      	adds	r4, #8
 80215c6:	2e00      	cmp	r6, #0
 80215c8:	bfac      	ite	ge
 80215ca:	1bbe      	subge	r6, r7, r6
 80215cc:	463e      	movlt	r6, r7
 80215ce:	2e00      	cmp	r6, #0
 80215d0:	dd0f      	ble.n	80215f2 <_svfprintf_r+0xc4a>
 80215d2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 802171c <_svfprintf_r+0xd74>
 80215d6:	f8c4 9000 	str.w	r9, [r4]
 80215da:	2e10      	cmp	r6, #16
 80215dc:	dc5c      	bgt.n	8021698 <_svfprintf_r+0xcf0>
 80215de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80215e0:	6066      	str	r6, [r4, #4]
 80215e2:	441e      	add	r6, r3
 80215e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80215e6:	9621      	str	r6, [sp, #132]	; 0x84
 80215e8:	3301      	adds	r3, #1
 80215ea:	2b07      	cmp	r3, #7
 80215ec:	9320      	str	r3, [sp, #128]	; 0x80
 80215ee:	dc6a      	bgt.n	80216c6 <_svfprintf_r+0xd1e>
 80215f0:	3408      	adds	r4, #8
 80215f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80215f4:	9a03      	ldr	r2, [sp, #12]
 80215f6:	4293      	cmp	r3, r2
 80215f8:	db01      	blt.n	80215fe <_svfprintf_r+0xc56>
 80215fa:	07e9      	lsls	r1, r5, #31
 80215fc:	d50d      	bpl.n	802161a <_svfprintf_r+0xc72>
 80215fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021600:	6023      	str	r3, [r4, #0]
 8021602:	9b08      	ldr	r3, [sp, #32]
 8021604:	6063      	str	r3, [r4, #4]
 8021606:	9a08      	ldr	r2, [sp, #32]
 8021608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802160a:	4413      	add	r3, r2
 802160c:	9321      	str	r3, [sp, #132]	; 0x84
 802160e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021610:	3301      	adds	r3, #1
 8021612:	2b07      	cmp	r3, #7
 8021614:	9320      	str	r3, [sp, #128]	; 0x80
 8021616:	dc60      	bgt.n	80216da <_svfprintf_r+0xd32>
 8021618:	3408      	adds	r4, #8
 802161a:	9b03      	ldr	r3, [sp, #12]
 802161c:	9a03      	ldr	r2, [sp, #12]
 802161e:	1bde      	subs	r6, r3, r7
 8021620:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021622:	1ad3      	subs	r3, r2, r3
 8021624:	429e      	cmp	r6, r3
 8021626:	bfa8      	it	ge
 8021628:	461e      	movge	r6, r3
 802162a:	2e00      	cmp	r6, #0
 802162c:	dd0b      	ble.n	8021646 <_svfprintf_r+0xc9e>
 802162e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021630:	6066      	str	r6, [r4, #4]
 8021632:	4433      	add	r3, r6
 8021634:	9321      	str	r3, [sp, #132]	; 0x84
 8021636:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021638:	3301      	adds	r3, #1
 802163a:	4447      	add	r7, r8
 802163c:	2b07      	cmp	r3, #7
 802163e:	6027      	str	r7, [r4, #0]
 8021640:	9320      	str	r3, [sp, #128]	; 0x80
 8021642:	dc54      	bgt.n	80216ee <_svfprintf_r+0xd46>
 8021644:	3408      	adds	r4, #8
 8021646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021648:	9a03      	ldr	r2, [sp, #12]
 802164a:	2e00      	cmp	r6, #0
 802164c:	eba2 0303 	sub.w	r3, r2, r3
 8021650:	bfac      	ite	ge
 8021652:	1b9e      	subge	r6, r3, r6
 8021654:	461e      	movlt	r6, r3
 8021656:	2e00      	cmp	r6, #0
 8021658:	f77f acd7 	ble.w	802100a <_svfprintf_r+0x662>
 802165c:	4f2f      	ldr	r7, [pc, #188]	; (802171c <_svfprintf_r+0xd74>)
 802165e:	f04f 0810 	mov.w	r8, #16
 8021662:	2e10      	cmp	r6, #16
 8021664:	6027      	str	r7, [r4, #0]
 8021666:	f77f aee7 	ble.w	8021438 <_svfprintf_r+0xa90>
 802166a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802166c:	f8c4 8004 	str.w	r8, [r4, #4]
 8021670:	3310      	adds	r3, #16
 8021672:	9321      	str	r3, [sp, #132]	; 0x84
 8021674:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021676:	3301      	adds	r3, #1
 8021678:	2b07      	cmp	r3, #7
 802167a:	9320      	str	r3, [sp, #128]	; 0x80
 802167c:	dc41      	bgt.n	8021702 <_svfprintf_r+0xd5a>
 802167e:	3408      	adds	r4, #8
 8021680:	3e10      	subs	r6, #16
 8021682:	e7ee      	b.n	8021662 <_svfprintf_r+0xcba>
 8021684:	aa1f      	add	r2, sp, #124	; 0x7c
 8021686:	4651      	mov	r1, sl
 8021688:	4658      	mov	r0, fp
 802168a:	f001 fccb 	bl	8023024 <__ssprint_r>
 802168e:	2800      	cmp	r0, #0
 8021690:	f040 80eb 	bne.w	802186a <_svfprintf_r+0xec2>
 8021694:	ac2c      	add	r4, sp, #176	; 0xb0
 8021696:	e796      	b.n	80215c6 <_svfprintf_r+0xc1e>
 8021698:	2310      	movs	r3, #16
 802169a:	6063      	str	r3, [r4, #4]
 802169c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802169e:	3310      	adds	r3, #16
 80216a0:	9321      	str	r3, [sp, #132]	; 0x84
 80216a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80216a4:	3301      	adds	r3, #1
 80216a6:	2b07      	cmp	r3, #7
 80216a8:	9320      	str	r3, [sp, #128]	; 0x80
 80216aa:	dc02      	bgt.n	80216b2 <_svfprintf_r+0xd0a>
 80216ac:	3408      	adds	r4, #8
 80216ae:	3e10      	subs	r6, #16
 80216b0:	e791      	b.n	80215d6 <_svfprintf_r+0xc2e>
 80216b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80216b4:	4651      	mov	r1, sl
 80216b6:	4658      	mov	r0, fp
 80216b8:	f001 fcb4 	bl	8023024 <__ssprint_r>
 80216bc:	2800      	cmp	r0, #0
 80216be:	f040 80d4 	bne.w	802186a <_svfprintf_r+0xec2>
 80216c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80216c4:	e7f3      	b.n	80216ae <_svfprintf_r+0xd06>
 80216c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80216c8:	4651      	mov	r1, sl
 80216ca:	4658      	mov	r0, fp
 80216cc:	f001 fcaa 	bl	8023024 <__ssprint_r>
 80216d0:	2800      	cmp	r0, #0
 80216d2:	f040 80ca 	bne.w	802186a <_svfprintf_r+0xec2>
 80216d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80216d8:	e78b      	b.n	80215f2 <_svfprintf_r+0xc4a>
 80216da:	aa1f      	add	r2, sp, #124	; 0x7c
 80216dc:	4651      	mov	r1, sl
 80216de:	4658      	mov	r0, fp
 80216e0:	f001 fca0 	bl	8023024 <__ssprint_r>
 80216e4:	2800      	cmp	r0, #0
 80216e6:	f040 80c0 	bne.w	802186a <_svfprintf_r+0xec2>
 80216ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80216ec:	e795      	b.n	802161a <_svfprintf_r+0xc72>
 80216ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80216f0:	4651      	mov	r1, sl
 80216f2:	4658      	mov	r0, fp
 80216f4:	f001 fc96 	bl	8023024 <__ssprint_r>
 80216f8:	2800      	cmp	r0, #0
 80216fa:	f040 80b6 	bne.w	802186a <_svfprintf_r+0xec2>
 80216fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8021700:	e7a1      	b.n	8021646 <_svfprintf_r+0xc9e>
 8021702:	aa1f      	add	r2, sp, #124	; 0x7c
 8021704:	4651      	mov	r1, sl
 8021706:	4658      	mov	r0, fp
 8021708:	f001 fc8c 	bl	8023024 <__ssprint_r>
 802170c:	2800      	cmp	r0, #0
 802170e:	f040 80ac 	bne.w	802186a <_svfprintf_r+0xec2>
 8021712:	ac2c      	add	r4, sp, #176	; 0xb0
 8021714:	e7b4      	b.n	8021680 <_svfprintf_r+0xcd8>
 8021716:	bf00      	nop
 8021718:	0803240d 	.word	0x0803240d
 802171c:	0803258a 	.word	0x0803258a
 8021720:	9b03      	ldr	r3, [sp, #12]
 8021722:	2b01      	cmp	r3, #1
 8021724:	dc01      	bgt.n	802172a <_svfprintf_r+0xd82>
 8021726:	07ea      	lsls	r2, r5, #31
 8021728:	d576      	bpl.n	8021818 <_svfprintf_r+0xe70>
 802172a:	2301      	movs	r3, #1
 802172c:	6063      	str	r3, [r4, #4]
 802172e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021730:	f8c4 8000 	str.w	r8, [r4]
 8021734:	3301      	adds	r3, #1
 8021736:	9321      	str	r3, [sp, #132]	; 0x84
 8021738:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802173a:	3301      	adds	r3, #1
 802173c:	2b07      	cmp	r3, #7
 802173e:	9320      	str	r3, [sp, #128]	; 0x80
 8021740:	dc36      	bgt.n	80217b0 <_svfprintf_r+0xe08>
 8021742:	3408      	adds	r4, #8
 8021744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021746:	6023      	str	r3, [r4, #0]
 8021748:	9b08      	ldr	r3, [sp, #32]
 802174a:	6063      	str	r3, [r4, #4]
 802174c:	9a08      	ldr	r2, [sp, #32]
 802174e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021750:	4413      	add	r3, r2
 8021752:	9321      	str	r3, [sp, #132]	; 0x84
 8021754:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021756:	3301      	adds	r3, #1
 8021758:	2b07      	cmp	r3, #7
 802175a:	9320      	str	r3, [sp, #128]	; 0x80
 802175c:	dc31      	bgt.n	80217c2 <_svfprintf_r+0xe1a>
 802175e:	3408      	adds	r4, #8
 8021760:	2300      	movs	r3, #0
 8021762:	2200      	movs	r2, #0
 8021764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021768:	f7df f9c2 	bl	8000af0 <__aeabi_dcmpeq>
 802176c:	9b03      	ldr	r3, [sp, #12]
 802176e:	1e5e      	subs	r6, r3, #1
 8021770:	2800      	cmp	r0, #0
 8021772:	d12f      	bne.n	80217d4 <_svfprintf_r+0xe2c>
 8021774:	f108 0301 	add.w	r3, r8, #1
 8021778:	e884 0048 	stmia.w	r4, {r3, r6}
 802177c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802177e:	9a03      	ldr	r2, [sp, #12]
 8021780:	3b01      	subs	r3, #1
 8021782:	4413      	add	r3, r2
 8021784:	9321      	str	r3, [sp, #132]	; 0x84
 8021786:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021788:	3301      	adds	r3, #1
 802178a:	2b07      	cmp	r3, #7
 802178c:	9320      	str	r3, [sp, #128]	; 0x80
 802178e:	dd4a      	ble.n	8021826 <_svfprintf_r+0xe7e>
 8021790:	aa1f      	add	r2, sp, #124	; 0x7c
 8021792:	4651      	mov	r1, sl
 8021794:	4658      	mov	r0, fp
 8021796:	f001 fc45 	bl	8023024 <__ssprint_r>
 802179a:	2800      	cmp	r0, #0
 802179c:	d165      	bne.n	802186a <_svfprintf_r+0xec2>
 802179e:	ac2c      	add	r4, sp, #176	; 0xb0
 80217a0:	ab1b      	add	r3, sp, #108	; 0x6c
 80217a2:	6023      	str	r3, [r4, #0]
 80217a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217a6:	6063      	str	r3, [r4, #4]
 80217a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80217ac:	4413      	add	r3, r2
 80217ae:	e41c      	b.n	8020fea <_svfprintf_r+0x642>
 80217b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80217b2:	4651      	mov	r1, sl
 80217b4:	4658      	mov	r0, fp
 80217b6:	f001 fc35 	bl	8023024 <__ssprint_r>
 80217ba:	2800      	cmp	r0, #0
 80217bc:	d155      	bne.n	802186a <_svfprintf_r+0xec2>
 80217be:	ac2c      	add	r4, sp, #176	; 0xb0
 80217c0:	e7c0      	b.n	8021744 <_svfprintf_r+0xd9c>
 80217c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80217c4:	4651      	mov	r1, sl
 80217c6:	4658      	mov	r0, fp
 80217c8:	f001 fc2c 	bl	8023024 <__ssprint_r>
 80217cc:	2800      	cmp	r0, #0
 80217ce:	d14c      	bne.n	802186a <_svfprintf_r+0xec2>
 80217d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80217d2:	e7c5      	b.n	8021760 <_svfprintf_r+0xdb8>
 80217d4:	2e00      	cmp	r6, #0
 80217d6:	dde3      	ble.n	80217a0 <_svfprintf_r+0xdf8>
 80217d8:	4f59      	ldr	r7, [pc, #356]	; (8021940 <_svfprintf_r+0xf98>)
 80217da:	f04f 0810 	mov.w	r8, #16
 80217de:	2e10      	cmp	r6, #16
 80217e0:	6027      	str	r7, [r4, #0]
 80217e2:	dc04      	bgt.n	80217ee <_svfprintf_r+0xe46>
 80217e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80217e6:	6066      	str	r6, [r4, #4]
 80217e8:	441e      	add	r6, r3
 80217ea:	9621      	str	r6, [sp, #132]	; 0x84
 80217ec:	e7cb      	b.n	8021786 <_svfprintf_r+0xdde>
 80217ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80217f0:	f8c4 8004 	str.w	r8, [r4, #4]
 80217f4:	3310      	adds	r3, #16
 80217f6:	9321      	str	r3, [sp, #132]	; 0x84
 80217f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80217fa:	3301      	adds	r3, #1
 80217fc:	2b07      	cmp	r3, #7
 80217fe:	9320      	str	r3, [sp, #128]	; 0x80
 8021800:	dc02      	bgt.n	8021808 <_svfprintf_r+0xe60>
 8021802:	3408      	adds	r4, #8
 8021804:	3e10      	subs	r6, #16
 8021806:	e7ea      	b.n	80217de <_svfprintf_r+0xe36>
 8021808:	aa1f      	add	r2, sp, #124	; 0x7c
 802180a:	4651      	mov	r1, sl
 802180c:	4658      	mov	r0, fp
 802180e:	f001 fc09 	bl	8023024 <__ssprint_r>
 8021812:	bb50      	cbnz	r0, 802186a <_svfprintf_r+0xec2>
 8021814:	ac2c      	add	r4, sp, #176	; 0xb0
 8021816:	e7f5      	b.n	8021804 <_svfprintf_r+0xe5c>
 8021818:	2301      	movs	r3, #1
 802181a:	6063      	str	r3, [r4, #4]
 802181c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802181e:	f8c4 8000 	str.w	r8, [r4]
 8021822:	3301      	adds	r3, #1
 8021824:	e7ae      	b.n	8021784 <_svfprintf_r+0xddc>
 8021826:	3408      	adds	r4, #8
 8021828:	e7ba      	b.n	80217a0 <_svfprintf_r+0xdf8>
 802182a:	3408      	adds	r4, #8
 802182c:	f7ff bbed 	b.w	802100a <_svfprintf_r+0x662>
 8021830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021834:	1a9d      	subs	r5, r3, r2
 8021836:	2d00      	cmp	r5, #0
 8021838:	f77f abea 	ble.w	8021010 <_svfprintf_r+0x668>
 802183c:	2610      	movs	r6, #16
 802183e:	4b41      	ldr	r3, [pc, #260]	; (8021944 <_svfprintf_r+0xf9c>)
 8021840:	6023      	str	r3, [r4, #0]
 8021842:	2d10      	cmp	r5, #16
 8021844:	dc1b      	bgt.n	802187e <_svfprintf_r+0xed6>
 8021846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021848:	6065      	str	r5, [r4, #4]
 802184a:	441d      	add	r5, r3
 802184c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802184e:	9521      	str	r5, [sp, #132]	; 0x84
 8021850:	3301      	adds	r3, #1
 8021852:	2b07      	cmp	r3, #7
 8021854:	9320      	str	r3, [sp, #128]	; 0x80
 8021856:	f77f abdb 	ble.w	8021010 <_svfprintf_r+0x668>
 802185a:	aa1f      	add	r2, sp, #124	; 0x7c
 802185c:	4651      	mov	r1, sl
 802185e:	4658      	mov	r0, fp
 8021860:	f001 fbe0 	bl	8023024 <__ssprint_r>
 8021864:	2800      	cmp	r0, #0
 8021866:	f43f abd3 	beq.w	8021010 <_svfprintf_r+0x668>
 802186a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802186e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8021872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021874:	bf18      	it	ne
 8021876:	f04f 33ff 	movne.w	r3, #4294967295
 802187a:	f7ff b8b9 	b.w	80209f0 <_svfprintf_r+0x48>
 802187e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021880:	6066      	str	r6, [r4, #4]
 8021882:	3310      	adds	r3, #16
 8021884:	9321      	str	r3, [sp, #132]	; 0x84
 8021886:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021888:	3301      	adds	r3, #1
 802188a:	2b07      	cmp	r3, #7
 802188c:	9320      	str	r3, [sp, #128]	; 0x80
 802188e:	dc02      	bgt.n	8021896 <_svfprintf_r+0xeee>
 8021890:	3408      	adds	r4, #8
 8021892:	3d10      	subs	r5, #16
 8021894:	e7d3      	b.n	802183e <_svfprintf_r+0xe96>
 8021896:	aa1f      	add	r2, sp, #124	; 0x7c
 8021898:	4651      	mov	r1, sl
 802189a:	4658      	mov	r0, fp
 802189c:	f001 fbc2 	bl	8023024 <__ssprint_r>
 80218a0:	2800      	cmp	r0, #0
 80218a2:	d1e2      	bne.n	802186a <_svfprintf_r+0xec2>
 80218a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80218a6:	e7f4      	b.n	8021892 <_svfprintf_r+0xeea>
 80218a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d0dd      	beq.n	802186a <_svfprintf_r+0xec2>
 80218ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80218b0:	4651      	mov	r1, sl
 80218b2:	4658      	mov	r0, fp
 80218b4:	f001 fbb6 	bl	8023024 <__ssprint_r>
 80218b8:	e7d7      	b.n	802186a <_svfprintf_r+0xec2>
 80218ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80218be:	4610      	mov	r0, r2
 80218c0:	4619      	mov	r1, r3
 80218c2:	f7df f947 	bl	8000b54 <__aeabi_dcmpun>
 80218c6:	2800      	cmp	r0, #0
 80218c8:	f43f aa44 	beq.w	8020d54 <_svfprintf_r+0x3ac>
 80218cc:	4b1e      	ldr	r3, [pc, #120]	; (8021948 <_svfprintf_r+0xfa0>)
 80218ce:	4a1f      	ldr	r2, [pc, #124]	; (802194c <_svfprintf_r+0xfa4>)
 80218d0:	f7ff ba34 	b.w	8020d3c <_svfprintf_r+0x394>
 80218d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80218d6:	eba3 0308 	sub.w	r3, r3, r8
 80218da:	9303      	str	r3, [sp, #12]
 80218dc:	f7ff bab5 	b.w	8020e4a <_svfprintf_r+0x4a2>
 80218e0:	ea56 0207 	orrs.w	r2, r6, r7
 80218e4:	950b      	str	r5, [sp, #44]	; 0x2c
 80218e6:	f43f ac2b 	beq.w	8021140 <_svfprintf_r+0x798>
 80218ea:	2b01      	cmp	r3, #1
 80218ec:	f43f ac9d 	beq.w	802122a <_svfprintf_r+0x882>
 80218f0:	2b02      	cmp	r3, #2
 80218f2:	f43f acbd 	beq.w	8021270 <_svfprintf_r+0x8c8>
 80218f6:	ab2c      	add	r3, sp, #176	; 0xb0
 80218f8:	08f1      	lsrs	r1, r6, #3
 80218fa:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80218fe:	08f8      	lsrs	r0, r7, #3
 8021900:	f006 0207 	and.w	r2, r6, #7
 8021904:	4607      	mov	r7, r0
 8021906:	460e      	mov	r6, r1
 8021908:	3230      	adds	r2, #48	; 0x30
 802190a:	ea56 0107 	orrs.w	r1, r6, r7
 802190e:	f103 38ff 	add.w	r8, r3, #4294967295
 8021912:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021916:	f47f ac86 	bne.w	8021226 <_svfprintf_r+0x87e>
 802191a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802191c:	07c9      	lsls	r1, r1, #31
 802191e:	d506      	bpl.n	802192e <_svfprintf_r+0xf86>
 8021920:	2a30      	cmp	r2, #48	; 0x30
 8021922:	d004      	beq.n	802192e <_svfprintf_r+0xf86>
 8021924:	2230      	movs	r2, #48	; 0x30
 8021926:	f808 2c01 	strb.w	r2, [r8, #-1]
 802192a:	f1a3 0802 	sub.w	r8, r3, #2
 802192e:	464e      	mov	r6, r9
 8021930:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8021934:	eba9 0908 	sub.w	r9, r9, r8
 8021938:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802193a:	2700      	movs	r7, #0
 802193c:	f7ff bad1 	b.w	8020ee2 <_svfprintf_r+0x53a>
 8021940:	0803258a 	.word	0x0803258a
 8021944:	0803257a 	.word	0x0803257a
 8021948:	08032413 	.word	0x08032413
 802194c:	08032554 	.word	0x08032554

08021950 <quorem>:
 8021950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021954:	6903      	ldr	r3, [r0, #16]
 8021956:	690c      	ldr	r4, [r1, #16]
 8021958:	429c      	cmp	r4, r3
 802195a:	4680      	mov	r8, r0
 802195c:	f300 8082 	bgt.w	8021a64 <quorem+0x114>
 8021960:	3c01      	subs	r4, #1
 8021962:	f101 0714 	add.w	r7, r1, #20
 8021966:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 802196a:	f100 0614 	add.w	r6, r0, #20
 802196e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8021972:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8021976:	eb06 030e 	add.w	r3, r6, lr
 802197a:	3501      	adds	r5, #1
 802197c:	eb07 090e 	add.w	r9, r7, lr
 8021980:	9301      	str	r3, [sp, #4]
 8021982:	fbb0 f5f5 	udiv	r5, r0, r5
 8021986:	b395      	cbz	r5, 80219ee <quorem+0x9e>
 8021988:	f04f 0a00 	mov.w	sl, #0
 802198c:	4638      	mov	r0, r7
 802198e:	46b4      	mov	ip, r6
 8021990:	46d3      	mov	fp, sl
 8021992:	f850 2b04 	ldr.w	r2, [r0], #4
 8021996:	b293      	uxth	r3, r2
 8021998:	fb05 a303 	mla	r3, r5, r3, sl
 802199c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80219a0:	b29b      	uxth	r3, r3
 80219a2:	ebab 0303 	sub.w	r3, fp, r3
 80219a6:	0c12      	lsrs	r2, r2, #16
 80219a8:	f8bc b000 	ldrh.w	fp, [ip]
 80219ac:	fb05 a202 	mla	r2, r5, r2, sl
 80219b0:	fa13 f38b 	uxtah	r3, r3, fp
 80219b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80219b8:	fa1f fb82 	uxth.w	fp, r2
 80219bc:	f8dc 2000 	ldr.w	r2, [ip]
 80219c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80219c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80219c8:	b29b      	uxth	r3, r3
 80219ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80219ce:	4581      	cmp	r9, r0
 80219d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80219d4:	f84c 3b04 	str.w	r3, [ip], #4
 80219d8:	d2db      	bcs.n	8021992 <quorem+0x42>
 80219da:	f856 300e 	ldr.w	r3, [r6, lr]
 80219de:	b933      	cbnz	r3, 80219ee <quorem+0x9e>
 80219e0:	9b01      	ldr	r3, [sp, #4]
 80219e2:	3b04      	subs	r3, #4
 80219e4:	429e      	cmp	r6, r3
 80219e6:	461a      	mov	r2, r3
 80219e8:	d330      	bcc.n	8021a4c <quorem+0xfc>
 80219ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80219ee:	4640      	mov	r0, r8
 80219f0:	f001 fa41 	bl	8022e76 <__mcmp>
 80219f4:	2800      	cmp	r0, #0
 80219f6:	db25      	blt.n	8021a44 <quorem+0xf4>
 80219f8:	3501      	adds	r5, #1
 80219fa:	4630      	mov	r0, r6
 80219fc:	f04f 0e00 	mov.w	lr, #0
 8021a00:	f857 2b04 	ldr.w	r2, [r7], #4
 8021a04:	f8d0 c000 	ldr.w	ip, [r0]
 8021a08:	b293      	uxth	r3, r2
 8021a0a:	ebae 0303 	sub.w	r3, lr, r3
 8021a0e:	0c12      	lsrs	r2, r2, #16
 8021a10:	fa13 f38c 	uxtah	r3, r3, ip
 8021a14:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8021a18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021a1c:	b29b      	uxth	r3, r3
 8021a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021a22:	45b9      	cmp	r9, r7
 8021a24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8021a28:	f840 3b04 	str.w	r3, [r0], #4
 8021a2c:	d2e8      	bcs.n	8021a00 <quorem+0xb0>
 8021a2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8021a32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8021a36:	b92a      	cbnz	r2, 8021a44 <quorem+0xf4>
 8021a38:	3b04      	subs	r3, #4
 8021a3a:	429e      	cmp	r6, r3
 8021a3c:	461a      	mov	r2, r3
 8021a3e:	d30b      	bcc.n	8021a58 <quorem+0x108>
 8021a40:	f8c8 4010 	str.w	r4, [r8, #16]
 8021a44:	4628      	mov	r0, r5
 8021a46:	b003      	add	sp, #12
 8021a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a4c:	6812      	ldr	r2, [r2, #0]
 8021a4e:	3b04      	subs	r3, #4
 8021a50:	2a00      	cmp	r2, #0
 8021a52:	d1ca      	bne.n	80219ea <quorem+0x9a>
 8021a54:	3c01      	subs	r4, #1
 8021a56:	e7c5      	b.n	80219e4 <quorem+0x94>
 8021a58:	6812      	ldr	r2, [r2, #0]
 8021a5a:	3b04      	subs	r3, #4
 8021a5c:	2a00      	cmp	r2, #0
 8021a5e:	d1ef      	bne.n	8021a40 <quorem+0xf0>
 8021a60:	3c01      	subs	r4, #1
 8021a62:	e7ea      	b.n	8021a3a <quorem+0xea>
 8021a64:	2000      	movs	r0, #0
 8021a66:	e7ee      	b.n	8021a46 <quorem+0xf6>

08021a68 <_dtoa_r>:
 8021a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a6c:	ec57 6b10 	vmov	r6, r7, d0
 8021a70:	b097      	sub	sp, #92	; 0x5c
 8021a72:	e9cd 6700 	strd	r6, r7, [sp]
 8021a76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021a78:	9107      	str	r1, [sp, #28]
 8021a7a:	4604      	mov	r4, r0
 8021a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8021a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021a80:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8021a82:	b93e      	cbnz	r6, 8021a94 <_dtoa_r+0x2c>
 8021a84:	2010      	movs	r0, #16
 8021a86:	f000 fdcb 	bl	8022620 <malloc>
 8021a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8021a8c:	6046      	str	r6, [r0, #4]
 8021a8e:	6086      	str	r6, [r0, #8]
 8021a90:	6006      	str	r6, [r0, #0]
 8021a92:	60c6      	str	r6, [r0, #12]
 8021a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021a96:	6819      	ldr	r1, [r3, #0]
 8021a98:	b151      	cbz	r1, 8021ab0 <_dtoa_r+0x48>
 8021a9a:	685a      	ldr	r2, [r3, #4]
 8021a9c:	604a      	str	r2, [r1, #4]
 8021a9e:	2301      	movs	r3, #1
 8021aa0:	4093      	lsls	r3, r2
 8021aa2:	608b      	str	r3, [r1, #8]
 8021aa4:	4620      	mov	r0, r4
 8021aa6:	f001 f811 	bl	8022acc <_Bfree>
 8021aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021aac:	2200      	movs	r2, #0
 8021aae:	601a      	str	r2, [r3, #0]
 8021ab0:	9b01      	ldr	r3, [sp, #4]
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	bfbf      	itttt	lt
 8021ab6:	2301      	movlt	r3, #1
 8021ab8:	602b      	strlt	r3, [r5, #0]
 8021aba:	9b01      	ldrlt	r3, [sp, #4]
 8021abc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021ac0:	bfb2      	itee	lt
 8021ac2:	9301      	strlt	r3, [sp, #4]
 8021ac4:	2300      	movge	r3, #0
 8021ac6:	602b      	strge	r3, [r5, #0]
 8021ac8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021acc:	4ba8      	ldr	r3, [pc, #672]	; (8021d70 <_dtoa_r+0x308>)
 8021ace:	ea33 0308 	bics.w	r3, r3, r8
 8021ad2:	d11b      	bne.n	8021b0c <_dtoa_r+0xa4>
 8021ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021ad6:	f242 730f 	movw	r3, #9999	; 0x270f
 8021ada:	6013      	str	r3, [r2, #0]
 8021adc:	9b00      	ldr	r3, [sp, #0]
 8021ade:	b923      	cbnz	r3, 8021aea <_dtoa_r+0x82>
 8021ae0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8021ae4:	2800      	cmp	r0, #0
 8021ae6:	f000 8578 	beq.w	80225da <_dtoa_r+0xb72>
 8021aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021aec:	b953      	cbnz	r3, 8021b04 <_dtoa_r+0x9c>
 8021aee:	4ba1      	ldr	r3, [pc, #644]	; (8021d74 <_dtoa_r+0x30c>)
 8021af0:	e021      	b.n	8021b36 <_dtoa_r+0xce>
 8021af2:	4ba1      	ldr	r3, [pc, #644]	; (8021d78 <_dtoa_r+0x310>)
 8021af4:	9302      	str	r3, [sp, #8]
 8021af6:	3308      	adds	r3, #8
 8021af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021afa:	6013      	str	r3, [r2, #0]
 8021afc:	9802      	ldr	r0, [sp, #8]
 8021afe:	b017      	add	sp, #92	; 0x5c
 8021b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b04:	4b9b      	ldr	r3, [pc, #620]	; (8021d74 <_dtoa_r+0x30c>)
 8021b06:	9302      	str	r3, [sp, #8]
 8021b08:	3303      	adds	r3, #3
 8021b0a:	e7f5      	b.n	8021af8 <_dtoa_r+0x90>
 8021b0c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8021b10:	2200      	movs	r2, #0
 8021b12:	2300      	movs	r3, #0
 8021b14:	4630      	mov	r0, r6
 8021b16:	4639      	mov	r1, r7
 8021b18:	f7de ffea 	bl	8000af0 <__aeabi_dcmpeq>
 8021b1c:	4681      	mov	r9, r0
 8021b1e:	b160      	cbz	r0, 8021b3a <_dtoa_r+0xd2>
 8021b20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021b22:	2301      	movs	r3, #1
 8021b24:	6013      	str	r3, [r2, #0]
 8021b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	f000 8553 	beq.w	80225d4 <_dtoa_r+0xb6c>
 8021b2e:	4b93      	ldr	r3, [pc, #588]	; (8021d7c <_dtoa_r+0x314>)
 8021b30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021b32:	6013      	str	r3, [r2, #0]
 8021b34:	3b01      	subs	r3, #1
 8021b36:	9302      	str	r3, [sp, #8]
 8021b38:	e7e0      	b.n	8021afc <_dtoa_r+0x94>
 8021b3a:	aa14      	add	r2, sp, #80	; 0x50
 8021b3c:	a915      	add	r1, sp, #84	; 0x54
 8021b3e:	ec47 6b10 	vmov	d0, r6, r7
 8021b42:	4620      	mov	r0, r4
 8021b44:	f001 fa0f 	bl	8022f66 <__d2b>
 8021b48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8021b4c:	4682      	mov	sl, r0
 8021b4e:	2d00      	cmp	r5, #0
 8021b50:	d07e      	beq.n	8021c50 <_dtoa_r+0x1e8>
 8021b52:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021b56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8021b5a:	4630      	mov	r0, r6
 8021b5c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8021b60:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021b64:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8021b68:	2200      	movs	r2, #0
 8021b6a:	4b85      	ldr	r3, [pc, #532]	; (8021d80 <_dtoa_r+0x318>)
 8021b6c:	f7de fba4 	bl	80002b8 <__aeabi_dsub>
 8021b70:	a379      	add	r3, pc, #484	; (adr r3, 8021d58 <_dtoa_r+0x2f0>)
 8021b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b76:	f7de fd53 	bl	8000620 <__aeabi_dmul>
 8021b7a:	a379      	add	r3, pc, #484	; (adr r3, 8021d60 <_dtoa_r+0x2f8>)
 8021b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b80:	f7de fb9c 	bl	80002bc <__adddf3>
 8021b84:	4606      	mov	r6, r0
 8021b86:	4628      	mov	r0, r5
 8021b88:	460f      	mov	r7, r1
 8021b8a:	f7de fce3 	bl	8000554 <__aeabi_i2d>
 8021b8e:	a376      	add	r3, pc, #472	; (adr r3, 8021d68 <_dtoa_r+0x300>)
 8021b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b94:	f7de fd44 	bl	8000620 <__aeabi_dmul>
 8021b98:	4602      	mov	r2, r0
 8021b9a:	460b      	mov	r3, r1
 8021b9c:	4630      	mov	r0, r6
 8021b9e:	4639      	mov	r1, r7
 8021ba0:	f7de fb8c 	bl	80002bc <__adddf3>
 8021ba4:	4606      	mov	r6, r0
 8021ba6:	460f      	mov	r7, r1
 8021ba8:	f7de ffea 	bl	8000b80 <__aeabi_d2iz>
 8021bac:	2200      	movs	r2, #0
 8021bae:	4683      	mov	fp, r0
 8021bb0:	2300      	movs	r3, #0
 8021bb2:	4630      	mov	r0, r6
 8021bb4:	4639      	mov	r1, r7
 8021bb6:	f7de ffa5 	bl	8000b04 <__aeabi_dcmplt>
 8021bba:	b158      	cbz	r0, 8021bd4 <_dtoa_r+0x16c>
 8021bbc:	4658      	mov	r0, fp
 8021bbe:	f7de fcc9 	bl	8000554 <__aeabi_i2d>
 8021bc2:	4602      	mov	r2, r0
 8021bc4:	460b      	mov	r3, r1
 8021bc6:	4630      	mov	r0, r6
 8021bc8:	4639      	mov	r1, r7
 8021bca:	f7de ff91 	bl	8000af0 <__aeabi_dcmpeq>
 8021bce:	b908      	cbnz	r0, 8021bd4 <_dtoa_r+0x16c>
 8021bd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021bd4:	f1bb 0f16 	cmp.w	fp, #22
 8021bd8:	d859      	bhi.n	8021c8e <_dtoa_r+0x226>
 8021bda:	496a      	ldr	r1, [pc, #424]	; (8021d84 <_dtoa_r+0x31c>)
 8021bdc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8021be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021be8:	f7de ffaa 	bl	8000b40 <__aeabi_dcmpgt>
 8021bec:	2800      	cmp	r0, #0
 8021bee:	d050      	beq.n	8021c92 <_dtoa_r+0x22a>
 8021bf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	930e      	str	r3, [sp, #56]	; 0x38
 8021bf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021bfa:	1b5d      	subs	r5, r3, r5
 8021bfc:	1e6b      	subs	r3, r5, #1
 8021bfe:	9306      	str	r3, [sp, #24]
 8021c00:	bf45      	ittet	mi
 8021c02:	f1c5 0301 	rsbmi	r3, r5, #1
 8021c06:	9305      	strmi	r3, [sp, #20]
 8021c08:	2300      	movpl	r3, #0
 8021c0a:	2300      	movmi	r3, #0
 8021c0c:	bf4c      	ite	mi
 8021c0e:	9306      	strmi	r3, [sp, #24]
 8021c10:	9305      	strpl	r3, [sp, #20]
 8021c12:	f1bb 0f00 	cmp.w	fp, #0
 8021c16:	db3e      	blt.n	8021c96 <_dtoa_r+0x22e>
 8021c18:	9b06      	ldr	r3, [sp, #24]
 8021c1a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8021c1e:	445b      	add	r3, fp
 8021c20:	9306      	str	r3, [sp, #24]
 8021c22:	2300      	movs	r3, #0
 8021c24:	9308      	str	r3, [sp, #32]
 8021c26:	9b07      	ldr	r3, [sp, #28]
 8021c28:	2b09      	cmp	r3, #9
 8021c2a:	f200 80af 	bhi.w	8021d8c <_dtoa_r+0x324>
 8021c2e:	2b05      	cmp	r3, #5
 8021c30:	bfc4      	itt	gt
 8021c32:	3b04      	subgt	r3, #4
 8021c34:	9307      	strgt	r3, [sp, #28]
 8021c36:	9b07      	ldr	r3, [sp, #28]
 8021c38:	f1a3 0302 	sub.w	r3, r3, #2
 8021c3c:	bfcc      	ite	gt
 8021c3e:	2600      	movgt	r6, #0
 8021c40:	2601      	movle	r6, #1
 8021c42:	2b03      	cmp	r3, #3
 8021c44:	f200 80ae 	bhi.w	8021da4 <_dtoa_r+0x33c>
 8021c48:	e8df f003 	tbb	[pc, r3]
 8021c4c:	772f8482 	.word	0x772f8482
 8021c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021c52:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021c54:	441d      	add	r5, r3
 8021c56:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8021c5a:	2b20      	cmp	r3, #32
 8021c5c:	dd11      	ble.n	8021c82 <_dtoa_r+0x21a>
 8021c5e:	9a00      	ldr	r2, [sp, #0]
 8021c60:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8021c64:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8021c68:	fa22 f000 	lsr.w	r0, r2, r0
 8021c6c:	fa08 f303 	lsl.w	r3, r8, r3
 8021c70:	4318      	orrs	r0, r3
 8021c72:	f7de fc5f 	bl	8000534 <__aeabi_ui2d>
 8021c76:	2301      	movs	r3, #1
 8021c78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8021c7c:	3d01      	subs	r5, #1
 8021c7e:	9312      	str	r3, [sp, #72]	; 0x48
 8021c80:	e772      	b.n	8021b68 <_dtoa_r+0x100>
 8021c82:	f1c3 0020 	rsb	r0, r3, #32
 8021c86:	9b00      	ldr	r3, [sp, #0]
 8021c88:	fa03 f000 	lsl.w	r0, r3, r0
 8021c8c:	e7f1      	b.n	8021c72 <_dtoa_r+0x20a>
 8021c8e:	2301      	movs	r3, #1
 8021c90:	e7b1      	b.n	8021bf6 <_dtoa_r+0x18e>
 8021c92:	900e      	str	r0, [sp, #56]	; 0x38
 8021c94:	e7b0      	b.n	8021bf8 <_dtoa_r+0x190>
 8021c96:	9b05      	ldr	r3, [sp, #20]
 8021c98:	eba3 030b 	sub.w	r3, r3, fp
 8021c9c:	9305      	str	r3, [sp, #20]
 8021c9e:	f1cb 0300 	rsb	r3, fp, #0
 8021ca2:	9308      	str	r3, [sp, #32]
 8021ca4:	2300      	movs	r3, #0
 8021ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8021ca8:	e7bd      	b.n	8021c26 <_dtoa_r+0x1be>
 8021caa:	2301      	movs	r3, #1
 8021cac:	9309      	str	r3, [sp, #36]	; 0x24
 8021cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	dd7a      	ble.n	8021daa <_dtoa_r+0x342>
 8021cb4:	9304      	str	r3, [sp, #16]
 8021cb6:	9303      	str	r3, [sp, #12]
 8021cb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8021cba:	2200      	movs	r2, #0
 8021cbc:	606a      	str	r2, [r5, #4]
 8021cbe:	2104      	movs	r1, #4
 8021cc0:	f101 0214 	add.w	r2, r1, #20
 8021cc4:	429a      	cmp	r2, r3
 8021cc6:	d975      	bls.n	8021db4 <_dtoa_r+0x34c>
 8021cc8:	6869      	ldr	r1, [r5, #4]
 8021cca:	4620      	mov	r0, r4
 8021ccc:	f000 feca 	bl	8022a64 <_Balloc>
 8021cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021cd2:	6028      	str	r0, [r5, #0]
 8021cd4:	681b      	ldr	r3, [r3, #0]
 8021cd6:	9302      	str	r3, [sp, #8]
 8021cd8:	9b03      	ldr	r3, [sp, #12]
 8021cda:	2b0e      	cmp	r3, #14
 8021cdc:	f200 80e5 	bhi.w	8021eaa <_dtoa_r+0x442>
 8021ce0:	2e00      	cmp	r6, #0
 8021ce2:	f000 80e2 	beq.w	8021eaa <_dtoa_r+0x442>
 8021ce6:	ed9d 7b00 	vldr	d7, [sp]
 8021cea:	f1bb 0f00 	cmp.w	fp, #0
 8021cee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021cf2:	dd74      	ble.n	8021dde <_dtoa_r+0x376>
 8021cf4:	4a23      	ldr	r2, [pc, #140]	; (8021d84 <_dtoa_r+0x31c>)
 8021cf6:	f00b 030f 	and.w	r3, fp, #15
 8021cfa:	ea4f 162b 	mov.w	r6, fp, asr #4
 8021cfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021d02:	06f0      	lsls	r0, r6, #27
 8021d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021d08:	d559      	bpl.n	8021dbe <_dtoa_r+0x356>
 8021d0a:	4b1f      	ldr	r3, [pc, #124]	; (8021d88 <_dtoa_r+0x320>)
 8021d0c:	ec51 0b17 	vmov	r0, r1, d7
 8021d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021d14:	f7de fdae 	bl	8000874 <__aeabi_ddiv>
 8021d18:	e9cd 0100 	strd	r0, r1, [sp]
 8021d1c:	f006 060f 	and.w	r6, r6, #15
 8021d20:	2503      	movs	r5, #3
 8021d22:	4f19      	ldr	r7, [pc, #100]	; (8021d88 <_dtoa_r+0x320>)
 8021d24:	2e00      	cmp	r6, #0
 8021d26:	d14c      	bne.n	8021dc2 <_dtoa_r+0x35a>
 8021d28:	4642      	mov	r2, r8
 8021d2a:	464b      	mov	r3, r9
 8021d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021d30:	f7de fda0 	bl	8000874 <__aeabi_ddiv>
 8021d34:	e9cd 0100 	strd	r0, r1, [sp]
 8021d38:	e06a      	b.n	8021e10 <_dtoa_r+0x3a8>
 8021d3a:	2301      	movs	r3, #1
 8021d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8021d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d40:	445b      	add	r3, fp
 8021d42:	9304      	str	r3, [sp, #16]
 8021d44:	3301      	adds	r3, #1
 8021d46:	2b01      	cmp	r3, #1
 8021d48:	9303      	str	r3, [sp, #12]
 8021d4a:	bfb8      	it	lt
 8021d4c:	2301      	movlt	r3, #1
 8021d4e:	e7b3      	b.n	8021cb8 <_dtoa_r+0x250>
 8021d50:	2300      	movs	r3, #0
 8021d52:	e7ab      	b.n	8021cac <_dtoa_r+0x244>
 8021d54:	2300      	movs	r3, #0
 8021d56:	e7f1      	b.n	8021d3c <_dtoa_r+0x2d4>
 8021d58:	636f4361 	.word	0x636f4361
 8021d5c:	3fd287a7 	.word	0x3fd287a7
 8021d60:	8b60c8b3 	.word	0x8b60c8b3
 8021d64:	3fc68a28 	.word	0x3fc68a28
 8021d68:	509f79fb 	.word	0x509f79fb
 8021d6c:	3fd34413 	.word	0x3fd34413
 8021d70:	7ff00000 	.word	0x7ff00000
 8021d74:	080325a3 	.word	0x080325a3
 8021d78:	0803259a 	.word	0x0803259a
 8021d7c:	0803240e 	.word	0x0803240e
 8021d80:	3ff80000 	.word	0x3ff80000
 8021d84:	080325d0 	.word	0x080325d0
 8021d88:	080325a8 	.word	0x080325a8
 8021d8c:	2601      	movs	r6, #1
 8021d8e:	2300      	movs	r3, #0
 8021d90:	9307      	str	r3, [sp, #28]
 8021d92:	9609      	str	r6, [sp, #36]	; 0x24
 8021d94:	f04f 33ff 	mov.w	r3, #4294967295
 8021d98:	9304      	str	r3, [sp, #16]
 8021d9a:	9303      	str	r3, [sp, #12]
 8021d9c:	2200      	movs	r2, #0
 8021d9e:	2312      	movs	r3, #18
 8021da0:	920a      	str	r2, [sp, #40]	; 0x28
 8021da2:	e789      	b.n	8021cb8 <_dtoa_r+0x250>
 8021da4:	2301      	movs	r3, #1
 8021da6:	9309      	str	r3, [sp, #36]	; 0x24
 8021da8:	e7f4      	b.n	8021d94 <_dtoa_r+0x32c>
 8021daa:	2301      	movs	r3, #1
 8021dac:	9304      	str	r3, [sp, #16]
 8021dae:	9303      	str	r3, [sp, #12]
 8021db0:	461a      	mov	r2, r3
 8021db2:	e7f5      	b.n	8021da0 <_dtoa_r+0x338>
 8021db4:	686a      	ldr	r2, [r5, #4]
 8021db6:	3201      	adds	r2, #1
 8021db8:	606a      	str	r2, [r5, #4]
 8021dba:	0049      	lsls	r1, r1, #1
 8021dbc:	e780      	b.n	8021cc0 <_dtoa_r+0x258>
 8021dbe:	2502      	movs	r5, #2
 8021dc0:	e7af      	b.n	8021d22 <_dtoa_r+0x2ba>
 8021dc2:	07f1      	lsls	r1, r6, #31
 8021dc4:	d508      	bpl.n	8021dd8 <_dtoa_r+0x370>
 8021dc6:	4640      	mov	r0, r8
 8021dc8:	4649      	mov	r1, r9
 8021dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021dce:	f7de fc27 	bl	8000620 <__aeabi_dmul>
 8021dd2:	3501      	adds	r5, #1
 8021dd4:	4680      	mov	r8, r0
 8021dd6:	4689      	mov	r9, r1
 8021dd8:	1076      	asrs	r6, r6, #1
 8021dda:	3708      	adds	r7, #8
 8021ddc:	e7a2      	b.n	8021d24 <_dtoa_r+0x2bc>
 8021dde:	f000 809d 	beq.w	8021f1c <_dtoa_r+0x4b4>
 8021de2:	f1cb 0600 	rsb	r6, fp, #0
 8021de6:	4b9f      	ldr	r3, [pc, #636]	; (8022064 <_dtoa_r+0x5fc>)
 8021de8:	4f9f      	ldr	r7, [pc, #636]	; (8022068 <_dtoa_r+0x600>)
 8021dea:	f006 020f 	and.w	r2, r6, #15
 8021dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8021dfa:	f7de fc11 	bl	8000620 <__aeabi_dmul>
 8021dfe:	e9cd 0100 	strd	r0, r1, [sp]
 8021e02:	1136      	asrs	r6, r6, #4
 8021e04:	2300      	movs	r3, #0
 8021e06:	2502      	movs	r5, #2
 8021e08:	2e00      	cmp	r6, #0
 8021e0a:	d17c      	bne.n	8021f06 <_dtoa_r+0x49e>
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d191      	bne.n	8021d34 <_dtoa_r+0x2cc>
 8021e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	f000 8084 	beq.w	8021f20 <_dtoa_r+0x4b8>
 8021e18:	e9dd 8900 	ldrd	r8, r9, [sp]
 8021e1c:	2200      	movs	r2, #0
 8021e1e:	4b93      	ldr	r3, [pc, #588]	; (802206c <_dtoa_r+0x604>)
 8021e20:	4640      	mov	r0, r8
 8021e22:	4649      	mov	r1, r9
 8021e24:	f7de fe6e 	bl	8000b04 <__aeabi_dcmplt>
 8021e28:	2800      	cmp	r0, #0
 8021e2a:	d079      	beq.n	8021f20 <_dtoa_r+0x4b8>
 8021e2c:	9b03      	ldr	r3, [sp, #12]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d076      	beq.n	8021f20 <_dtoa_r+0x4b8>
 8021e32:	9b04      	ldr	r3, [sp, #16]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	dd34      	ble.n	8021ea2 <_dtoa_r+0x43a>
 8021e38:	2200      	movs	r2, #0
 8021e3a:	4b8d      	ldr	r3, [pc, #564]	; (8022070 <_dtoa_r+0x608>)
 8021e3c:	4640      	mov	r0, r8
 8021e3e:	4649      	mov	r1, r9
 8021e40:	f7de fbee 	bl	8000620 <__aeabi_dmul>
 8021e44:	e9cd 0100 	strd	r0, r1, [sp]
 8021e48:	9e04      	ldr	r6, [sp, #16]
 8021e4a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8021e4e:	3501      	adds	r5, #1
 8021e50:	4628      	mov	r0, r5
 8021e52:	f7de fb7f 	bl	8000554 <__aeabi_i2d>
 8021e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021e5a:	f7de fbe1 	bl	8000620 <__aeabi_dmul>
 8021e5e:	2200      	movs	r2, #0
 8021e60:	4b84      	ldr	r3, [pc, #528]	; (8022074 <_dtoa_r+0x60c>)
 8021e62:	f7de fa2b 	bl	80002bc <__adddf3>
 8021e66:	4680      	mov	r8, r0
 8021e68:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8021e6c:	2e00      	cmp	r6, #0
 8021e6e:	d15a      	bne.n	8021f26 <_dtoa_r+0x4be>
 8021e70:	2200      	movs	r2, #0
 8021e72:	4b81      	ldr	r3, [pc, #516]	; (8022078 <_dtoa_r+0x610>)
 8021e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021e78:	f7de fa1e 	bl	80002b8 <__aeabi_dsub>
 8021e7c:	4642      	mov	r2, r8
 8021e7e:	464b      	mov	r3, r9
 8021e80:	e9cd 0100 	strd	r0, r1, [sp]
 8021e84:	f7de fe5c 	bl	8000b40 <__aeabi_dcmpgt>
 8021e88:	2800      	cmp	r0, #0
 8021e8a:	f040 829b 	bne.w	80223c4 <_dtoa_r+0x95c>
 8021e8e:	4642      	mov	r2, r8
 8021e90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021e98:	f7de fe34 	bl	8000b04 <__aeabi_dcmplt>
 8021e9c:	2800      	cmp	r0, #0
 8021e9e:	f040 828f 	bne.w	80223c0 <_dtoa_r+0x958>
 8021ea2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8021ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8021eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	f2c0 8150 	blt.w	8022152 <_dtoa_r+0x6ea>
 8021eb2:	f1bb 0f0e 	cmp.w	fp, #14
 8021eb6:	f300 814c 	bgt.w	8022152 <_dtoa_r+0x6ea>
 8021eba:	4b6a      	ldr	r3, [pc, #424]	; (8022064 <_dtoa_r+0x5fc>)
 8021ebc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	f280 80da 	bge.w	8022080 <_dtoa_r+0x618>
 8021ecc:	9b03      	ldr	r3, [sp, #12]
 8021ece:	2b00      	cmp	r3, #0
 8021ed0:	f300 80d6 	bgt.w	8022080 <_dtoa_r+0x618>
 8021ed4:	f040 8273 	bne.w	80223be <_dtoa_r+0x956>
 8021ed8:	2200      	movs	r2, #0
 8021eda:	4b67      	ldr	r3, [pc, #412]	; (8022078 <_dtoa_r+0x610>)
 8021edc:	4640      	mov	r0, r8
 8021ede:	4649      	mov	r1, r9
 8021ee0:	f7de fb9e 	bl	8000620 <__aeabi_dmul>
 8021ee4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021ee8:	f7de fe20 	bl	8000b2c <__aeabi_dcmpge>
 8021eec:	9e03      	ldr	r6, [sp, #12]
 8021eee:	4637      	mov	r7, r6
 8021ef0:	2800      	cmp	r0, #0
 8021ef2:	f040 824a 	bne.w	802238a <_dtoa_r+0x922>
 8021ef6:	9b02      	ldr	r3, [sp, #8]
 8021ef8:	9a02      	ldr	r2, [sp, #8]
 8021efa:	1c5d      	adds	r5, r3, #1
 8021efc:	2331      	movs	r3, #49	; 0x31
 8021efe:	7013      	strb	r3, [r2, #0]
 8021f00:	f10b 0b01 	add.w	fp, fp, #1
 8021f04:	e245      	b.n	8022392 <_dtoa_r+0x92a>
 8021f06:	07f2      	lsls	r2, r6, #31
 8021f08:	d505      	bpl.n	8021f16 <_dtoa_r+0x4ae>
 8021f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021f0e:	f7de fb87 	bl	8000620 <__aeabi_dmul>
 8021f12:	3501      	adds	r5, #1
 8021f14:	2301      	movs	r3, #1
 8021f16:	1076      	asrs	r6, r6, #1
 8021f18:	3708      	adds	r7, #8
 8021f1a:	e775      	b.n	8021e08 <_dtoa_r+0x3a0>
 8021f1c:	2502      	movs	r5, #2
 8021f1e:	e777      	b.n	8021e10 <_dtoa_r+0x3a8>
 8021f20:	465f      	mov	r7, fp
 8021f22:	9e03      	ldr	r6, [sp, #12]
 8021f24:	e794      	b.n	8021e50 <_dtoa_r+0x3e8>
 8021f26:	9a02      	ldr	r2, [sp, #8]
 8021f28:	4b4e      	ldr	r3, [pc, #312]	; (8022064 <_dtoa_r+0x5fc>)
 8021f2a:	4432      	add	r2, r6
 8021f2c:	9213      	str	r2, [sp, #76]	; 0x4c
 8021f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f30:	1e71      	subs	r1, r6, #1
 8021f32:	2a00      	cmp	r2, #0
 8021f34:	d048      	beq.n	8021fc8 <_dtoa_r+0x560>
 8021f36:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8021f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f3e:	2000      	movs	r0, #0
 8021f40:	494e      	ldr	r1, [pc, #312]	; (802207c <_dtoa_r+0x614>)
 8021f42:	f7de fc97 	bl	8000874 <__aeabi_ddiv>
 8021f46:	4642      	mov	r2, r8
 8021f48:	464b      	mov	r3, r9
 8021f4a:	f7de f9b5 	bl	80002b8 <__aeabi_dsub>
 8021f4e:	9d02      	ldr	r5, [sp, #8]
 8021f50:	4680      	mov	r8, r0
 8021f52:	4689      	mov	r9, r1
 8021f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021f58:	f7de fe12 	bl	8000b80 <__aeabi_d2iz>
 8021f5c:	4606      	mov	r6, r0
 8021f5e:	f7de faf9 	bl	8000554 <__aeabi_i2d>
 8021f62:	4602      	mov	r2, r0
 8021f64:	460b      	mov	r3, r1
 8021f66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021f6a:	f7de f9a5 	bl	80002b8 <__aeabi_dsub>
 8021f6e:	3630      	adds	r6, #48	; 0x30
 8021f70:	f805 6b01 	strb.w	r6, [r5], #1
 8021f74:	4642      	mov	r2, r8
 8021f76:	464b      	mov	r3, r9
 8021f78:	e9cd 0100 	strd	r0, r1, [sp]
 8021f7c:	f7de fdc2 	bl	8000b04 <__aeabi_dcmplt>
 8021f80:	2800      	cmp	r0, #0
 8021f82:	d165      	bne.n	8022050 <_dtoa_r+0x5e8>
 8021f84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021f88:	2000      	movs	r0, #0
 8021f8a:	4938      	ldr	r1, [pc, #224]	; (802206c <_dtoa_r+0x604>)
 8021f8c:	f7de f994 	bl	80002b8 <__aeabi_dsub>
 8021f90:	4642      	mov	r2, r8
 8021f92:	464b      	mov	r3, r9
 8021f94:	f7de fdb6 	bl	8000b04 <__aeabi_dcmplt>
 8021f98:	2800      	cmp	r0, #0
 8021f9a:	f040 80ba 	bne.w	8022112 <_dtoa_r+0x6aa>
 8021f9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021fa0:	429d      	cmp	r5, r3
 8021fa2:	f43f af7e 	beq.w	8021ea2 <_dtoa_r+0x43a>
 8021fa6:	2200      	movs	r2, #0
 8021fa8:	4b31      	ldr	r3, [pc, #196]	; (8022070 <_dtoa_r+0x608>)
 8021faa:	4640      	mov	r0, r8
 8021fac:	4649      	mov	r1, r9
 8021fae:	f7de fb37 	bl	8000620 <__aeabi_dmul>
 8021fb2:	2200      	movs	r2, #0
 8021fb4:	4680      	mov	r8, r0
 8021fb6:	4689      	mov	r9, r1
 8021fb8:	4b2d      	ldr	r3, [pc, #180]	; (8022070 <_dtoa_r+0x608>)
 8021fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021fbe:	f7de fb2f 	bl	8000620 <__aeabi_dmul>
 8021fc2:	e9cd 0100 	strd	r0, r1, [sp]
 8021fc6:	e7c5      	b.n	8021f54 <_dtoa_r+0x4ec>
 8021fc8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8021fcc:	4642      	mov	r2, r8
 8021fce:	464b      	mov	r3, r9
 8021fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021fd4:	f7de fb24 	bl	8000620 <__aeabi_dmul>
 8021fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8021fdc:	9d02      	ldr	r5, [sp, #8]
 8021fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021fe2:	f7de fdcd 	bl	8000b80 <__aeabi_d2iz>
 8021fe6:	4606      	mov	r6, r0
 8021fe8:	f7de fab4 	bl	8000554 <__aeabi_i2d>
 8021fec:	3630      	adds	r6, #48	; 0x30
 8021fee:	4602      	mov	r2, r0
 8021ff0:	460b      	mov	r3, r1
 8021ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021ff6:	f7de f95f 	bl	80002b8 <__aeabi_dsub>
 8021ffa:	f805 6b01 	strb.w	r6, [r5], #1
 8021ffe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022000:	42ab      	cmp	r3, r5
 8022002:	4680      	mov	r8, r0
 8022004:	4689      	mov	r9, r1
 8022006:	f04f 0200 	mov.w	r2, #0
 802200a:	d125      	bne.n	8022058 <_dtoa_r+0x5f0>
 802200c:	4b1b      	ldr	r3, [pc, #108]	; (802207c <_dtoa_r+0x614>)
 802200e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8022012:	f7de f953 	bl	80002bc <__adddf3>
 8022016:	4602      	mov	r2, r0
 8022018:	460b      	mov	r3, r1
 802201a:	4640      	mov	r0, r8
 802201c:	4649      	mov	r1, r9
 802201e:	f7de fd8f 	bl	8000b40 <__aeabi_dcmpgt>
 8022022:	2800      	cmp	r0, #0
 8022024:	d175      	bne.n	8022112 <_dtoa_r+0x6aa>
 8022026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802202a:	2000      	movs	r0, #0
 802202c:	4913      	ldr	r1, [pc, #76]	; (802207c <_dtoa_r+0x614>)
 802202e:	f7de f943 	bl	80002b8 <__aeabi_dsub>
 8022032:	4602      	mov	r2, r0
 8022034:	460b      	mov	r3, r1
 8022036:	4640      	mov	r0, r8
 8022038:	4649      	mov	r1, r9
 802203a:	f7de fd63 	bl	8000b04 <__aeabi_dcmplt>
 802203e:	2800      	cmp	r0, #0
 8022040:	f43f af2f 	beq.w	8021ea2 <_dtoa_r+0x43a>
 8022044:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022048:	2b30      	cmp	r3, #48	; 0x30
 802204a:	f105 32ff 	add.w	r2, r5, #4294967295
 802204e:	d001      	beq.n	8022054 <_dtoa_r+0x5ec>
 8022050:	46bb      	mov	fp, r7
 8022052:	e04d      	b.n	80220f0 <_dtoa_r+0x688>
 8022054:	4615      	mov	r5, r2
 8022056:	e7f5      	b.n	8022044 <_dtoa_r+0x5dc>
 8022058:	4b05      	ldr	r3, [pc, #20]	; (8022070 <_dtoa_r+0x608>)
 802205a:	f7de fae1 	bl	8000620 <__aeabi_dmul>
 802205e:	e9cd 0100 	strd	r0, r1, [sp]
 8022062:	e7bc      	b.n	8021fde <_dtoa_r+0x576>
 8022064:	080325d0 	.word	0x080325d0
 8022068:	080325a8 	.word	0x080325a8
 802206c:	3ff00000 	.word	0x3ff00000
 8022070:	40240000 	.word	0x40240000
 8022074:	401c0000 	.word	0x401c0000
 8022078:	40140000 	.word	0x40140000
 802207c:	3fe00000 	.word	0x3fe00000
 8022080:	e9dd 6700 	ldrd	r6, r7, [sp]
 8022084:	9d02      	ldr	r5, [sp, #8]
 8022086:	4642      	mov	r2, r8
 8022088:	464b      	mov	r3, r9
 802208a:	4630      	mov	r0, r6
 802208c:	4639      	mov	r1, r7
 802208e:	f7de fbf1 	bl	8000874 <__aeabi_ddiv>
 8022092:	f7de fd75 	bl	8000b80 <__aeabi_d2iz>
 8022096:	9000      	str	r0, [sp, #0]
 8022098:	f7de fa5c 	bl	8000554 <__aeabi_i2d>
 802209c:	4642      	mov	r2, r8
 802209e:	464b      	mov	r3, r9
 80220a0:	f7de fabe 	bl	8000620 <__aeabi_dmul>
 80220a4:	4602      	mov	r2, r0
 80220a6:	460b      	mov	r3, r1
 80220a8:	4630      	mov	r0, r6
 80220aa:	4639      	mov	r1, r7
 80220ac:	f7de f904 	bl	80002b8 <__aeabi_dsub>
 80220b0:	9e00      	ldr	r6, [sp, #0]
 80220b2:	9f03      	ldr	r7, [sp, #12]
 80220b4:	3630      	adds	r6, #48	; 0x30
 80220b6:	f805 6b01 	strb.w	r6, [r5], #1
 80220ba:	9e02      	ldr	r6, [sp, #8]
 80220bc:	1bae      	subs	r6, r5, r6
 80220be:	42b7      	cmp	r7, r6
 80220c0:	4602      	mov	r2, r0
 80220c2:	460b      	mov	r3, r1
 80220c4:	d138      	bne.n	8022138 <_dtoa_r+0x6d0>
 80220c6:	f7de f8f9 	bl	80002bc <__adddf3>
 80220ca:	4606      	mov	r6, r0
 80220cc:	460f      	mov	r7, r1
 80220ce:	4602      	mov	r2, r0
 80220d0:	460b      	mov	r3, r1
 80220d2:	4640      	mov	r0, r8
 80220d4:	4649      	mov	r1, r9
 80220d6:	f7de fd15 	bl	8000b04 <__aeabi_dcmplt>
 80220da:	b9c8      	cbnz	r0, 8022110 <_dtoa_r+0x6a8>
 80220dc:	4632      	mov	r2, r6
 80220de:	463b      	mov	r3, r7
 80220e0:	4640      	mov	r0, r8
 80220e2:	4649      	mov	r1, r9
 80220e4:	f7de fd04 	bl	8000af0 <__aeabi_dcmpeq>
 80220e8:	b110      	cbz	r0, 80220f0 <_dtoa_r+0x688>
 80220ea:	9b00      	ldr	r3, [sp, #0]
 80220ec:	07db      	lsls	r3, r3, #31
 80220ee:	d40f      	bmi.n	8022110 <_dtoa_r+0x6a8>
 80220f0:	4651      	mov	r1, sl
 80220f2:	4620      	mov	r0, r4
 80220f4:	f000 fcea 	bl	8022acc <_Bfree>
 80220f8:	2300      	movs	r3, #0
 80220fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80220fc:	702b      	strb	r3, [r5, #0]
 80220fe:	f10b 0301 	add.w	r3, fp, #1
 8022102:	6013      	str	r3, [r2, #0]
 8022104:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022106:	2b00      	cmp	r3, #0
 8022108:	f43f acf8 	beq.w	8021afc <_dtoa_r+0x94>
 802210c:	601d      	str	r5, [r3, #0]
 802210e:	e4f5      	b.n	8021afc <_dtoa_r+0x94>
 8022110:	465f      	mov	r7, fp
 8022112:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8022116:	2a39      	cmp	r2, #57	; 0x39
 8022118:	f105 33ff 	add.w	r3, r5, #4294967295
 802211c:	d106      	bne.n	802212c <_dtoa_r+0x6c4>
 802211e:	9a02      	ldr	r2, [sp, #8]
 8022120:	429a      	cmp	r2, r3
 8022122:	d107      	bne.n	8022134 <_dtoa_r+0x6cc>
 8022124:	2330      	movs	r3, #48	; 0x30
 8022126:	7013      	strb	r3, [r2, #0]
 8022128:	3701      	adds	r7, #1
 802212a:	4613      	mov	r3, r2
 802212c:	781a      	ldrb	r2, [r3, #0]
 802212e:	3201      	adds	r2, #1
 8022130:	701a      	strb	r2, [r3, #0]
 8022132:	e78d      	b.n	8022050 <_dtoa_r+0x5e8>
 8022134:	461d      	mov	r5, r3
 8022136:	e7ec      	b.n	8022112 <_dtoa_r+0x6aa>
 8022138:	2200      	movs	r2, #0
 802213a:	4ba4      	ldr	r3, [pc, #656]	; (80223cc <_dtoa_r+0x964>)
 802213c:	f7de fa70 	bl	8000620 <__aeabi_dmul>
 8022140:	2200      	movs	r2, #0
 8022142:	2300      	movs	r3, #0
 8022144:	4606      	mov	r6, r0
 8022146:	460f      	mov	r7, r1
 8022148:	f7de fcd2 	bl	8000af0 <__aeabi_dcmpeq>
 802214c:	2800      	cmp	r0, #0
 802214e:	d09a      	beq.n	8022086 <_dtoa_r+0x61e>
 8022150:	e7ce      	b.n	80220f0 <_dtoa_r+0x688>
 8022152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022154:	2a00      	cmp	r2, #0
 8022156:	f000 80cd 	beq.w	80222f4 <_dtoa_r+0x88c>
 802215a:	9a07      	ldr	r2, [sp, #28]
 802215c:	2a01      	cmp	r2, #1
 802215e:	f300 80af 	bgt.w	80222c0 <_dtoa_r+0x858>
 8022162:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022164:	2a00      	cmp	r2, #0
 8022166:	f000 80a7 	beq.w	80222b8 <_dtoa_r+0x850>
 802216a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802216e:	9e08      	ldr	r6, [sp, #32]
 8022170:	9d05      	ldr	r5, [sp, #20]
 8022172:	9a05      	ldr	r2, [sp, #20]
 8022174:	441a      	add	r2, r3
 8022176:	9205      	str	r2, [sp, #20]
 8022178:	9a06      	ldr	r2, [sp, #24]
 802217a:	2101      	movs	r1, #1
 802217c:	441a      	add	r2, r3
 802217e:	4620      	mov	r0, r4
 8022180:	9206      	str	r2, [sp, #24]
 8022182:	f000 fd43 	bl	8022c0c <__i2b>
 8022186:	4607      	mov	r7, r0
 8022188:	2d00      	cmp	r5, #0
 802218a:	dd0c      	ble.n	80221a6 <_dtoa_r+0x73e>
 802218c:	9b06      	ldr	r3, [sp, #24]
 802218e:	2b00      	cmp	r3, #0
 8022190:	dd09      	ble.n	80221a6 <_dtoa_r+0x73e>
 8022192:	42ab      	cmp	r3, r5
 8022194:	9a05      	ldr	r2, [sp, #20]
 8022196:	bfa8      	it	ge
 8022198:	462b      	movge	r3, r5
 802219a:	1ad2      	subs	r2, r2, r3
 802219c:	9205      	str	r2, [sp, #20]
 802219e:	9a06      	ldr	r2, [sp, #24]
 80221a0:	1aed      	subs	r5, r5, r3
 80221a2:	1ad3      	subs	r3, r2, r3
 80221a4:	9306      	str	r3, [sp, #24]
 80221a6:	9b08      	ldr	r3, [sp, #32]
 80221a8:	b1f3      	cbz	r3, 80221e8 <_dtoa_r+0x780>
 80221aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	f000 80a5 	beq.w	80222fc <_dtoa_r+0x894>
 80221b2:	2e00      	cmp	r6, #0
 80221b4:	dd10      	ble.n	80221d8 <_dtoa_r+0x770>
 80221b6:	4639      	mov	r1, r7
 80221b8:	4632      	mov	r2, r6
 80221ba:	4620      	mov	r0, r4
 80221bc:	f000 fdbc 	bl	8022d38 <__pow5mult>
 80221c0:	4652      	mov	r2, sl
 80221c2:	4601      	mov	r1, r0
 80221c4:	4607      	mov	r7, r0
 80221c6:	4620      	mov	r0, r4
 80221c8:	f000 fd29 	bl	8022c1e <__multiply>
 80221cc:	4651      	mov	r1, sl
 80221ce:	4680      	mov	r8, r0
 80221d0:	4620      	mov	r0, r4
 80221d2:	f000 fc7b 	bl	8022acc <_Bfree>
 80221d6:	46c2      	mov	sl, r8
 80221d8:	9b08      	ldr	r3, [sp, #32]
 80221da:	1b9a      	subs	r2, r3, r6
 80221dc:	d004      	beq.n	80221e8 <_dtoa_r+0x780>
 80221de:	4651      	mov	r1, sl
 80221e0:	4620      	mov	r0, r4
 80221e2:	f000 fda9 	bl	8022d38 <__pow5mult>
 80221e6:	4682      	mov	sl, r0
 80221e8:	2101      	movs	r1, #1
 80221ea:	4620      	mov	r0, r4
 80221ec:	f000 fd0e 	bl	8022c0c <__i2b>
 80221f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	4606      	mov	r6, r0
 80221f6:	f340 8083 	ble.w	8022300 <_dtoa_r+0x898>
 80221fa:	461a      	mov	r2, r3
 80221fc:	4601      	mov	r1, r0
 80221fe:	4620      	mov	r0, r4
 8022200:	f000 fd9a 	bl	8022d38 <__pow5mult>
 8022204:	9b07      	ldr	r3, [sp, #28]
 8022206:	2b01      	cmp	r3, #1
 8022208:	4606      	mov	r6, r0
 802220a:	dd7c      	ble.n	8022306 <_dtoa_r+0x89e>
 802220c:	f04f 0800 	mov.w	r8, #0
 8022210:	6933      	ldr	r3, [r6, #16]
 8022212:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022216:	6918      	ldr	r0, [r3, #16]
 8022218:	f000 fcaa 	bl	8022b70 <__hi0bits>
 802221c:	f1c0 0020 	rsb	r0, r0, #32
 8022220:	9b06      	ldr	r3, [sp, #24]
 8022222:	4418      	add	r0, r3
 8022224:	f010 001f 	ands.w	r0, r0, #31
 8022228:	f000 8096 	beq.w	8022358 <_dtoa_r+0x8f0>
 802222c:	f1c0 0320 	rsb	r3, r0, #32
 8022230:	2b04      	cmp	r3, #4
 8022232:	f340 8087 	ble.w	8022344 <_dtoa_r+0x8dc>
 8022236:	9b05      	ldr	r3, [sp, #20]
 8022238:	f1c0 001c 	rsb	r0, r0, #28
 802223c:	4403      	add	r3, r0
 802223e:	9305      	str	r3, [sp, #20]
 8022240:	9b06      	ldr	r3, [sp, #24]
 8022242:	4405      	add	r5, r0
 8022244:	4403      	add	r3, r0
 8022246:	9306      	str	r3, [sp, #24]
 8022248:	9b05      	ldr	r3, [sp, #20]
 802224a:	2b00      	cmp	r3, #0
 802224c:	dd05      	ble.n	802225a <_dtoa_r+0x7f2>
 802224e:	4651      	mov	r1, sl
 8022250:	461a      	mov	r2, r3
 8022252:	4620      	mov	r0, r4
 8022254:	f000 fdbe 	bl	8022dd4 <__lshift>
 8022258:	4682      	mov	sl, r0
 802225a:	9b06      	ldr	r3, [sp, #24]
 802225c:	2b00      	cmp	r3, #0
 802225e:	dd05      	ble.n	802226c <_dtoa_r+0x804>
 8022260:	4631      	mov	r1, r6
 8022262:	461a      	mov	r2, r3
 8022264:	4620      	mov	r0, r4
 8022266:	f000 fdb5 	bl	8022dd4 <__lshift>
 802226a:	4606      	mov	r6, r0
 802226c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802226e:	2b00      	cmp	r3, #0
 8022270:	d074      	beq.n	802235c <_dtoa_r+0x8f4>
 8022272:	4631      	mov	r1, r6
 8022274:	4650      	mov	r0, sl
 8022276:	f000 fdfe 	bl	8022e76 <__mcmp>
 802227a:	2800      	cmp	r0, #0
 802227c:	da6e      	bge.n	802235c <_dtoa_r+0x8f4>
 802227e:	2300      	movs	r3, #0
 8022280:	4651      	mov	r1, sl
 8022282:	220a      	movs	r2, #10
 8022284:	4620      	mov	r0, r4
 8022286:	f000 fc38 	bl	8022afa <__multadd>
 802228a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802228c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022290:	4682      	mov	sl, r0
 8022292:	2b00      	cmp	r3, #0
 8022294:	f000 81a8 	beq.w	80225e8 <_dtoa_r+0xb80>
 8022298:	2300      	movs	r3, #0
 802229a:	4639      	mov	r1, r7
 802229c:	220a      	movs	r2, #10
 802229e:	4620      	mov	r0, r4
 80222a0:	f000 fc2b 	bl	8022afa <__multadd>
 80222a4:	9b04      	ldr	r3, [sp, #16]
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	4607      	mov	r7, r0
 80222aa:	f300 80c8 	bgt.w	802243e <_dtoa_r+0x9d6>
 80222ae:	9b07      	ldr	r3, [sp, #28]
 80222b0:	2b02      	cmp	r3, #2
 80222b2:	f340 80c4 	ble.w	802243e <_dtoa_r+0x9d6>
 80222b6:	e059      	b.n	802236c <_dtoa_r+0x904>
 80222b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80222ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80222be:	e756      	b.n	802216e <_dtoa_r+0x706>
 80222c0:	9b03      	ldr	r3, [sp, #12]
 80222c2:	1e5e      	subs	r6, r3, #1
 80222c4:	9b08      	ldr	r3, [sp, #32]
 80222c6:	42b3      	cmp	r3, r6
 80222c8:	bfbf      	itttt	lt
 80222ca:	9b08      	ldrlt	r3, [sp, #32]
 80222cc:	9608      	strlt	r6, [sp, #32]
 80222ce:	1af2      	sublt	r2, r6, r3
 80222d0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80222d2:	bfb6      	itet	lt
 80222d4:	189b      	addlt	r3, r3, r2
 80222d6:	1b9e      	subge	r6, r3, r6
 80222d8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80222da:	9b03      	ldr	r3, [sp, #12]
 80222dc:	bfb8      	it	lt
 80222de:	2600      	movlt	r6, #0
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	bfb9      	ittee	lt
 80222e4:	9b05      	ldrlt	r3, [sp, #20]
 80222e6:	9a03      	ldrlt	r2, [sp, #12]
 80222e8:	9d05      	ldrge	r5, [sp, #20]
 80222ea:	9b03      	ldrge	r3, [sp, #12]
 80222ec:	bfbc      	itt	lt
 80222ee:	1a9d      	sublt	r5, r3, r2
 80222f0:	2300      	movlt	r3, #0
 80222f2:	e73e      	b.n	8022172 <_dtoa_r+0x70a>
 80222f4:	9e08      	ldr	r6, [sp, #32]
 80222f6:	9d05      	ldr	r5, [sp, #20]
 80222f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80222fa:	e745      	b.n	8022188 <_dtoa_r+0x720>
 80222fc:	9a08      	ldr	r2, [sp, #32]
 80222fe:	e76e      	b.n	80221de <_dtoa_r+0x776>
 8022300:	9b07      	ldr	r3, [sp, #28]
 8022302:	2b01      	cmp	r3, #1
 8022304:	dc19      	bgt.n	802233a <_dtoa_r+0x8d2>
 8022306:	9b00      	ldr	r3, [sp, #0]
 8022308:	b9bb      	cbnz	r3, 802233a <_dtoa_r+0x8d2>
 802230a:	9b01      	ldr	r3, [sp, #4]
 802230c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022310:	b99b      	cbnz	r3, 802233a <_dtoa_r+0x8d2>
 8022312:	9b01      	ldr	r3, [sp, #4]
 8022314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022318:	0d1b      	lsrs	r3, r3, #20
 802231a:	051b      	lsls	r3, r3, #20
 802231c:	b183      	cbz	r3, 8022340 <_dtoa_r+0x8d8>
 802231e:	9b05      	ldr	r3, [sp, #20]
 8022320:	3301      	adds	r3, #1
 8022322:	9305      	str	r3, [sp, #20]
 8022324:	9b06      	ldr	r3, [sp, #24]
 8022326:	3301      	adds	r3, #1
 8022328:	9306      	str	r3, [sp, #24]
 802232a:	f04f 0801 	mov.w	r8, #1
 802232e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022330:	2b00      	cmp	r3, #0
 8022332:	f47f af6d 	bne.w	8022210 <_dtoa_r+0x7a8>
 8022336:	2001      	movs	r0, #1
 8022338:	e772      	b.n	8022220 <_dtoa_r+0x7b8>
 802233a:	f04f 0800 	mov.w	r8, #0
 802233e:	e7f6      	b.n	802232e <_dtoa_r+0x8c6>
 8022340:	4698      	mov	r8, r3
 8022342:	e7f4      	b.n	802232e <_dtoa_r+0x8c6>
 8022344:	d080      	beq.n	8022248 <_dtoa_r+0x7e0>
 8022346:	9a05      	ldr	r2, [sp, #20]
 8022348:	331c      	adds	r3, #28
 802234a:	441a      	add	r2, r3
 802234c:	9205      	str	r2, [sp, #20]
 802234e:	9a06      	ldr	r2, [sp, #24]
 8022350:	441a      	add	r2, r3
 8022352:	441d      	add	r5, r3
 8022354:	4613      	mov	r3, r2
 8022356:	e776      	b.n	8022246 <_dtoa_r+0x7de>
 8022358:	4603      	mov	r3, r0
 802235a:	e7f4      	b.n	8022346 <_dtoa_r+0x8de>
 802235c:	9b03      	ldr	r3, [sp, #12]
 802235e:	2b00      	cmp	r3, #0
 8022360:	dc36      	bgt.n	80223d0 <_dtoa_r+0x968>
 8022362:	9b07      	ldr	r3, [sp, #28]
 8022364:	2b02      	cmp	r3, #2
 8022366:	dd33      	ble.n	80223d0 <_dtoa_r+0x968>
 8022368:	9b03      	ldr	r3, [sp, #12]
 802236a:	9304      	str	r3, [sp, #16]
 802236c:	9b04      	ldr	r3, [sp, #16]
 802236e:	b963      	cbnz	r3, 802238a <_dtoa_r+0x922>
 8022370:	4631      	mov	r1, r6
 8022372:	2205      	movs	r2, #5
 8022374:	4620      	mov	r0, r4
 8022376:	f000 fbc0 	bl	8022afa <__multadd>
 802237a:	4601      	mov	r1, r0
 802237c:	4606      	mov	r6, r0
 802237e:	4650      	mov	r0, sl
 8022380:	f000 fd79 	bl	8022e76 <__mcmp>
 8022384:	2800      	cmp	r0, #0
 8022386:	f73f adb6 	bgt.w	8021ef6 <_dtoa_r+0x48e>
 802238a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802238c:	9d02      	ldr	r5, [sp, #8]
 802238e:	ea6f 0b03 	mvn.w	fp, r3
 8022392:	2300      	movs	r3, #0
 8022394:	9303      	str	r3, [sp, #12]
 8022396:	4631      	mov	r1, r6
 8022398:	4620      	mov	r0, r4
 802239a:	f000 fb97 	bl	8022acc <_Bfree>
 802239e:	2f00      	cmp	r7, #0
 80223a0:	f43f aea6 	beq.w	80220f0 <_dtoa_r+0x688>
 80223a4:	9b03      	ldr	r3, [sp, #12]
 80223a6:	b12b      	cbz	r3, 80223b4 <_dtoa_r+0x94c>
 80223a8:	42bb      	cmp	r3, r7
 80223aa:	d003      	beq.n	80223b4 <_dtoa_r+0x94c>
 80223ac:	4619      	mov	r1, r3
 80223ae:	4620      	mov	r0, r4
 80223b0:	f000 fb8c 	bl	8022acc <_Bfree>
 80223b4:	4639      	mov	r1, r7
 80223b6:	4620      	mov	r0, r4
 80223b8:	f000 fb88 	bl	8022acc <_Bfree>
 80223bc:	e698      	b.n	80220f0 <_dtoa_r+0x688>
 80223be:	2600      	movs	r6, #0
 80223c0:	4637      	mov	r7, r6
 80223c2:	e7e2      	b.n	802238a <_dtoa_r+0x922>
 80223c4:	46bb      	mov	fp, r7
 80223c6:	4637      	mov	r7, r6
 80223c8:	e595      	b.n	8021ef6 <_dtoa_r+0x48e>
 80223ca:	bf00      	nop
 80223cc:	40240000 	.word	0x40240000
 80223d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223d2:	bb93      	cbnz	r3, 802243a <_dtoa_r+0x9d2>
 80223d4:	9b03      	ldr	r3, [sp, #12]
 80223d6:	9304      	str	r3, [sp, #16]
 80223d8:	9d02      	ldr	r5, [sp, #8]
 80223da:	4631      	mov	r1, r6
 80223dc:	4650      	mov	r0, sl
 80223de:	f7ff fab7 	bl	8021950 <quorem>
 80223e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80223e6:	f805 9b01 	strb.w	r9, [r5], #1
 80223ea:	9b02      	ldr	r3, [sp, #8]
 80223ec:	9a04      	ldr	r2, [sp, #16]
 80223ee:	1aeb      	subs	r3, r5, r3
 80223f0:	429a      	cmp	r2, r3
 80223f2:	f300 80dc 	bgt.w	80225ae <_dtoa_r+0xb46>
 80223f6:	9b02      	ldr	r3, [sp, #8]
 80223f8:	2a01      	cmp	r2, #1
 80223fa:	bfac      	ite	ge
 80223fc:	189b      	addge	r3, r3, r2
 80223fe:	3301      	addlt	r3, #1
 8022400:	4698      	mov	r8, r3
 8022402:	2300      	movs	r3, #0
 8022404:	9303      	str	r3, [sp, #12]
 8022406:	4651      	mov	r1, sl
 8022408:	2201      	movs	r2, #1
 802240a:	4620      	mov	r0, r4
 802240c:	f000 fce2 	bl	8022dd4 <__lshift>
 8022410:	4631      	mov	r1, r6
 8022412:	4682      	mov	sl, r0
 8022414:	f000 fd2f 	bl	8022e76 <__mcmp>
 8022418:	2800      	cmp	r0, #0
 802241a:	f300 808d 	bgt.w	8022538 <_dtoa_r+0xad0>
 802241e:	d103      	bne.n	8022428 <_dtoa_r+0x9c0>
 8022420:	f019 0f01 	tst.w	r9, #1
 8022424:	f040 8088 	bne.w	8022538 <_dtoa_r+0xad0>
 8022428:	4645      	mov	r5, r8
 802242a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802242e:	2b30      	cmp	r3, #48	; 0x30
 8022430:	f105 32ff 	add.w	r2, r5, #4294967295
 8022434:	d1af      	bne.n	8022396 <_dtoa_r+0x92e>
 8022436:	4615      	mov	r5, r2
 8022438:	e7f7      	b.n	802242a <_dtoa_r+0x9c2>
 802243a:	9b03      	ldr	r3, [sp, #12]
 802243c:	9304      	str	r3, [sp, #16]
 802243e:	2d00      	cmp	r5, #0
 8022440:	dd05      	ble.n	802244e <_dtoa_r+0x9e6>
 8022442:	4639      	mov	r1, r7
 8022444:	462a      	mov	r2, r5
 8022446:	4620      	mov	r0, r4
 8022448:	f000 fcc4 	bl	8022dd4 <__lshift>
 802244c:	4607      	mov	r7, r0
 802244e:	f1b8 0f00 	cmp.w	r8, #0
 8022452:	d04c      	beq.n	80224ee <_dtoa_r+0xa86>
 8022454:	6879      	ldr	r1, [r7, #4]
 8022456:	4620      	mov	r0, r4
 8022458:	f000 fb04 	bl	8022a64 <_Balloc>
 802245c:	693a      	ldr	r2, [r7, #16]
 802245e:	3202      	adds	r2, #2
 8022460:	4605      	mov	r5, r0
 8022462:	0092      	lsls	r2, r2, #2
 8022464:	f107 010c 	add.w	r1, r7, #12
 8022468:	300c      	adds	r0, #12
 802246a:	f7fe fa3f 	bl	80208ec <memcpy>
 802246e:	2201      	movs	r2, #1
 8022470:	4629      	mov	r1, r5
 8022472:	4620      	mov	r0, r4
 8022474:	f000 fcae 	bl	8022dd4 <__lshift>
 8022478:	9b00      	ldr	r3, [sp, #0]
 802247a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802247e:	9703      	str	r7, [sp, #12]
 8022480:	f003 0301 	and.w	r3, r3, #1
 8022484:	4607      	mov	r7, r0
 8022486:	9305      	str	r3, [sp, #20]
 8022488:	4631      	mov	r1, r6
 802248a:	4650      	mov	r0, sl
 802248c:	f7ff fa60 	bl	8021950 <quorem>
 8022490:	9903      	ldr	r1, [sp, #12]
 8022492:	4605      	mov	r5, r0
 8022494:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8022498:	4650      	mov	r0, sl
 802249a:	f000 fcec 	bl	8022e76 <__mcmp>
 802249e:	463a      	mov	r2, r7
 80224a0:	9000      	str	r0, [sp, #0]
 80224a2:	4631      	mov	r1, r6
 80224a4:	4620      	mov	r0, r4
 80224a6:	f000 fd00 	bl	8022eaa <__mdiff>
 80224aa:	68c3      	ldr	r3, [r0, #12]
 80224ac:	4602      	mov	r2, r0
 80224ae:	bb03      	cbnz	r3, 80224f2 <_dtoa_r+0xa8a>
 80224b0:	4601      	mov	r1, r0
 80224b2:	9006      	str	r0, [sp, #24]
 80224b4:	4650      	mov	r0, sl
 80224b6:	f000 fcde 	bl	8022e76 <__mcmp>
 80224ba:	9a06      	ldr	r2, [sp, #24]
 80224bc:	4603      	mov	r3, r0
 80224be:	4611      	mov	r1, r2
 80224c0:	4620      	mov	r0, r4
 80224c2:	9306      	str	r3, [sp, #24]
 80224c4:	f000 fb02 	bl	8022acc <_Bfree>
 80224c8:	9b06      	ldr	r3, [sp, #24]
 80224ca:	b9a3      	cbnz	r3, 80224f6 <_dtoa_r+0xa8e>
 80224cc:	9a07      	ldr	r2, [sp, #28]
 80224ce:	b992      	cbnz	r2, 80224f6 <_dtoa_r+0xa8e>
 80224d0:	9a05      	ldr	r2, [sp, #20]
 80224d2:	b982      	cbnz	r2, 80224f6 <_dtoa_r+0xa8e>
 80224d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80224d8:	d029      	beq.n	802252e <_dtoa_r+0xac6>
 80224da:	9b00      	ldr	r3, [sp, #0]
 80224dc:	2b00      	cmp	r3, #0
 80224de:	dd01      	ble.n	80224e4 <_dtoa_r+0xa7c>
 80224e0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80224e4:	f108 0501 	add.w	r5, r8, #1
 80224e8:	f888 9000 	strb.w	r9, [r8]
 80224ec:	e753      	b.n	8022396 <_dtoa_r+0x92e>
 80224ee:	4638      	mov	r0, r7
 80224f0:	e7c2      	b.n	8022478 <_dtoa_r+0xa10>
 80224f2:	2301      	movs	r3, #1
 80224f4:	e7e3      	b.n	80224be <_dtoa_r+0xa56>
 80224f6:	9a00      	ldr	r2, [sp, #0]
 80224f8:	2a00      	cmp	r2, #0
 80224fa:	db04      	blt.n	8022506 <_dtoa_r+0xa9e>
 80224fc:	d125      	bne.n	802254a <_dtoa_r+0xae2>
 80224fe:	9a07      	ldr	r2, [sp, #28]
 8022500:	bb1a      	cbnz	r2, 802254a <_dtoa_r+0xae2>
 8022502:	9a05      	ldr	r2, [sp, #20]
 8022504:	bb0a      	cbnz	r2, 802254a <_dtoa_r+0xae2>
 8022506:	2b00      	cmp	r3, #0
 8022508:	ddec      	ble.n	80224e4 <_dtoa_r+0xa7c>
 802250a:	4651      	mov	r1, sl
 802250c:	2201      	movs	r2, #1
 802250e:	4620      	mov	r0, r4
 8022510:	f000 fc60 	bl	8022dd4 <__lshift>
 8022514:	4631      	mov	r1, r6
 8022516:	4682      	mov	sl, r0
 8022518:	f000 fcad 	bl	8022e76 <__mcmp>
 802251c:	2800      	cmp	r0, #0
 802251e:	dc03      	bgt.n	8022528 <_dtoa_r+0xac0>
 8022520:	d1e0      	bne.n	80224e4 <_dtoa_r+0xa7c>
 8022522:	f019 0f01 	tst.w	r9, #1
 8022526:	d0dd      	beq.n	80224e4 <_dtoa_r+0xa7c>
 8022528:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802252c:	d1d8      	bne.n	80224e0 <_dtoa_r+0xa78>
 802252e:	2339      	movs	r3, #57	; 0x39
 8022530:	f888 3000 	strb.w	r3, [r8]
 8022534:	f108 0801 	add.w	r8, r8, #1
 8022538:	4645      	mov	r5, r8
 802253a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802253e:	2b39      	cmp	r3, #57	; 0x39
 8022540:	f105 32ff 	add.w	r2, r5, #4294967295
 8022544:	d03b      	beq.n	80225be <_dtoa_r+0xb56>
 8022546:	3301      	adds	r3, #1
 8022548:	e040      	b.n	80225cc <_dtoa_r+0xb64>
 802254a:	2b00      	cmp	r3, #0
 802254c:	f108 0501 	add.w	r5, r8, #1
 8022550:	dd05      	ble.n	802255e <_dtoa_r+0xaf6>
 8022552:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8022556:	d0ea      	beq.n	802252e <_dtoa_r+0xac6>
 8022558:	f109 0901 	add.w	r9, r9, #1
 802255c:	e7c4      	b.n	80224e8 <_dtoa_r+0xa80>
 802255e:	9b02      	ldr	r3, [sp, #8]
 8022560:	9a04      	ldr	r2, [sp, #16]
 8022562:	f805 9c01 	strb.w	r9, [r5, #-1]
 8022566:	1aeb      	subs	r3, r5, r3
 8022568:	4293      	cmp	r3, r2
 802256a:	46a8      	mov	r8, r5
 802256c:	f43f af4b 	beq.w	8022406 <_dtoa_r+0x99e>
 8022570:	4651      	mov	r1, sl
 8022572:	2300      	movs	r3, #0
 8022574:	220a      	movs	r2, #10
 8022576:	4620      	mov	r0, r4
 8022578:	f000 fabf 	bl	8022afa <__multadd>
 802257c:	9b03      	ldr	r3, [sp, #12]
 802257e:	9903      	ldr	r1, [sp, #12]
 8022580:	42bb      	cmp	r3, r7
 8022582:	4682      	mov	sl, r0
 8022584:	f04f 0300 	mov.w	r3, #0
 8022588:	f04f 020a 	mov.w	r2, #10
 802258c:	4620      	mov	r0, r4
 802258e:	d104      	bne.n	802259a <_dtoa_r+0xb32>
 8022590:	f000 fab3 	bl	8022afa <__multadd>
 8022594:	9003      	str	r0, [sp, #12]
 8022596:	4607      	mov	r7, r0
 8022598:	e776      	b.n	8022488 <_dtoa_r+0xa20>
 802259a:	f000 faae 	bl	8022afa <__multadd>
 802259e:	2300      	movs	r3, #0
 80225a0:	9003      	str	r0, [sp, #12]
 80225a2:	220a      	movs	r2, #10
 80225a4:	4639      	mov	r1, r7
 80225a6:	4620      	mov	r0, r4
 80225a8:	f000 faa7 	bl	8022afa <__multadd>
 80225ac:	e7f3      	b.n	8022596 <_dtoa_r+0xb2e>
 80225ae:	4651      	mov	r1, sl
 80225b0:	2300      	movs	r3, #0
 80225b2:	220a      	movs	r2, #10
 80225b4:	4620      	mov	r0, r4
 80225b6:	f000 faa0 	bl	8022afa <__multadd>
 80225ba:	4682      	mov	sl, r0
 80225bc:	e70d      	b.n	80223da <_dtoa_r+0x972>
 80225be:	9b02      	ldr	r3, [sp, #8]
 80225c0:	4293      	cmp	r3, r2
 80225c2:	d105      	bne.n	80225d0 <_dtoa_r+0xb68>
 80225c4:	9a02      	ldr	r2, [sp, #8]
 80225c6:	f10b 0b01 	add.w	fp, fp, #1
 80225ca:	2331      	movs	r3, #49	; 0x31
 80225cc:	7013      	strb	r3, [r2, #0]
 80225ce:	e6e2      	b.n	8022396 <_dtoa_r+0x92e>
 80225d0:	4615      	mov	r5, r2
 80225d2:	e7b2      	b.n	802253a <_dtoa_r+0xad2>
 80225d4:	4b09      	ldr	r3, [pc, #36]	; (80225fc <_dtoa_r+0xb94>)
 80225d6:	f7ff baae 	b.w	8021b36 <_dtoa_r+0xce>
 80225da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80225dc:	2b00      	cmp	r3, #0
 80225de:	f47f aa88 	bne.w	8021af2 <_dtoa_r+0x8a>
 80225e2:	4b07      	ldr	r3, [pc, #28]	; (8022600 <_dtoa_r+0xb98>)
 80225e4:	f7ff baa7 	b.w	8021b36 <_dtoa_r+0xce>
 80225e8:	9b04      	ldr	r3, [sp, #16]
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	f73f aef4 	bgt.w	80223d8 <_dtoa_r+0x970>
 80225f0:	9b07      	ldr	r3, [sp, #28]
 80225f2:	2b02      	cmp	r3, #2
 80225f4:	f77f aef0 	ble.w	80223d8 <_dtoa_r+0x970>
 80225f8:	e6b8      	b.n	802236c <_dtoa_r+0x904>
 80225fa:	bf00      	nop
 80225fc:	0803240d 	.word	0x0803240d
 8022600:	0803259a 	.word	0x0803259a

08022604 <_localeconv_r>:
 8022604:	4b04      	ldr	r3, [pc, #16]	; (8022618 <_localeconv_r+0x14>)
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	6a18      	ldr	r0, [r3, #32]
 802260a:	4b04      	ldr	r3, [pc, #16]	; (802261c <_localeconv_r+0x18>)
 802260c:	2800      	cmp	r0, #0
 802260e:	bf08      	it	eq
 8022610:	4618      	moveq	r0, r3
 8022612:	30f0      	adds	r0, #240	; 0xf0
 8022614:	4770      	bx	lr
 8022616:	bf00      	nop
 8022618:	20000f50 	.word	0x20000f50
 802261c:	20001454 	.word	0x20001454

08022620 <malloc>:
 8022620:	4b02      	ldr	r3, [pc, #8]	; (802262c <malloc+0xc>)
 8022622:	4601      	mov	r1, r0
 8022624:	6818      	ldr	r0, [r3, #0]
 8022626:	f000 b803 	b.w	8022630 <_malloc_r>
 802262a:	bf00      	nop
 802262c:	20000f50 	.word	0x20000f50

08022630 <_malloc_r>:
 8022630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022634:	f101 040b 	add.w	r4, r1, #11
 8022638:	2c16      	cmp	r4, #22
 802263a:	4681      	mov	r9, r0
 802263c:	d907      	bls.n	802264e <_malloc_r+0x1e>
 802263e:	f034 0407 	bics.w	r4, r4, #7
 8022642:	d505      	bpl.n	8022650 <_malloc_r+0x20>
 8022644:	230c      	movs	r3, #12
 8022646:	f8c9 3000 	str.w	r3, [r9]
 802264a:	2600      	movs	r6, #0
 802264c:	e131      	b.n	80228b2 <_malloc_r+0x282>
 802264e:	2410      	movs	r4, #16
 8022650:	428c      	cmp	r4, r1
 8022652:	d3f7      	bcc.n	8022644 <_malloc_r+0x14>
 8022654:	4648      	mov	r0, r9
 8022656:	f000 f9f9 	bl	8022a4c <__malloc_lock>
 802265a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 802265e:	4d9c      	ldr	r5, [pc, #624]	; (80228d0 <_malloc_r+0x2a0>)
 8022660:	d236      	bcs.n	80226d0 <_malloc_r+0xa0>
 8022662:	f104 0208 	add.w	r2, r4, #8
 8022666:	442a      	add	r2, r5
 8022668:	f1a2 0108 	sub.w	r1, r2, #8
 802266c:	6856      	ldr	r6, [r2, #4]
 802266e:	428e      	cmp	r6, r1
 8022670:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8022674:	d102      	bne.n	802267c <_malloc_r+0x4c>
 8022676:	68d6      	ldr	r6, [r2, #12]
 8022678:	42b2      	cmp	r2, r6
 802267a:	d010      	beq.n	802269e <_malloc_r+0x6e>
 802267c:	6873      	ldr	r3, [r6, #4]
 802267e:	68f2      	ldr	r2, [r6, #12]
 8022680:	68b1      	ldr	r1, [r6, #8]
 8022682:	f023 0303 	bic.w	r3, r3, #3
 8022686:	60ca      	str	r2, [r1, #12]
 8022688:	4433      	add	r3, r6
 802268a:	6091      	str	r1, [r2, #8]
 802268c:	685a      	ldr	r2, [r3, #4]
 802268e:	f042 0201 	orr.w	r2, r2, #1
 8022692:	605a      	str	r2, [r3, #4]
 8022694:	4648      	mov	r0, r9
 8022696:	f000 f9df 	bl	8022a58 <__malloc_unlock>
 802269a:	3608      	adds	r6, #8
 802269c:	e109      	b.n	80228b2 <_malloc_r+0x282>
 802269e:	3302      	adds	r3, #2
 80226a0:	4a8c      	ldr	r2, [pc, #560]	; (80228d4 <_malloc_r+0x2a4>)
 80226a2:	692e      	ldr	r6, [r5, #16]
 80226a4:	4296      	cmp	r6, r2
 80226a6:	4611      	mov	r1, r2
 80226a8:	d06d      	beq.n	8022786 <_malloc_r+0x156>
 80226aa:	6870      	ldr	r0, [r6, #4]
 80226ac:	f020 0003 	bic.w	r0, r0, #3
 80226b0:	1b07      	subs	r7, r0, r4
 80226b2:	2f0f      	cmp	r7, #15
 80226b4:	dd47      	ble.n	8022746 <_malloc_r+0x116>
 80226b6:	1933      	adds	r3, r6, r4
 80226b8:	f044 0401 	orr.w	r4, r4, #1
 80226bc:	6074      	str	r4, [r6, #4]
 80226be:	616b      	str	r3, [r5, #20]
 80226c0:	612b      	str	r3, [r5, #16]
 80226c2:	60da      	str	r2, [r3, #12]
 80226c4:	609a      	str	r2, [r3, #8]
 80226c6:	f047 0201 	orr.w	r2, r7, #1
 80226ca:	605a      	str	r2, [r3, #4]
 80226cc:	5037      	str	r7, [r6, r0]
 80226ce:	e7e1      	b.n	8022694 <_malloc_r+0x64>
 80226d0:	0a63      	lsrs	r3, r4, #9
 80226d2:	d02a      	beq.n	802272a <_malloc_r+0xfa>
 80226d4:	2b04      	cmp	r3, #4
 80226d6:	d812      	bhi.n	80226fe <_malloc_r+0xce>
 80226d8:	09a3      	lsrs	r3, r4, #6
 80226da:	3338      	adds	r3, #56	; 0x38
 80226dc:	1c5a      	adds	r2, r3, #1
 80226de:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80226e2:	f1a2 0008 	sub.w	r0, r2, #8
 80226e6:	6856      	ldr	r6, [r2, #4]
 80226e8:	4286      	cmp	r6, r0
 80226ea:	d006      	beq.n	80226fa <_malloc_r+0xca>
 80226ec:	6872      	ldr	r2, [r6, #4]
 80226ee:	f022 0203 	bic.w	r2, r2, #3
 80226f2:	1b11      	subs	r1, r2, r4
 80226f4:	290f      	cmp	r1, #15
 80226f6:	dd1c      	ble.n	8022732 <_malloc_r+0x102>
 80226f8:	3b01      	subs	r3, #1
 80226fa:	3301      	adds	r3, #1
 80226fc:	e7d0      	b.n	80226a0 <_malloc_r+0x70>
 80226fe:	2b14      	cmp	r3, #20
 8022700:	d801      	bhi.n	8022706 <_malloc_r+0xd6>
 8022702:	335b      	adds	r3, #91	; 0x5b
 8022704:	e7ea      	b.n	80226dc <_malloc_r+0xac>
 8022706:	2b54      	cmp	r3, #84	; 0x54
 8022708:	d802      	bhi.n	8022710 <_malloc_r+0xe0>
 802270a:	0b23      	lsrs	r3, r4, #12
 802270c:	336e      	adds	r3, #110	; 0x6e
 802270e:	e7e5      	b.n	80226dc <_malloc_r+0xac>
 8022710:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8022714:	d802      	bhi.n	802271c <_malloc_r+0xec>
 8022716:	0be3      	lsrs	r3, r4, #15
 8022718:	3377      	adds	r3, #119	; 0x77
 802271a:	e7df      	b.n	80226dc <_malloc_r+0xac>
 802271c:	f240 5254 	movw	r2, #1364	; 0x554
 8022720:	4293      	cmp	r3, r2
 8022722:	d804      	bhi.n	802272e <_malloc_r+0xfe>
 8022724:	0ca3      	lsrs	r3, r4, #18
 8022726:	337c      	adds	r3, #124	; 0x7c
 8022728:	e7d8      	b.n	80226dc <_malloc_r+0xac>
 802272a:	233f      	movs	r3, #63	; 0x3f
 802272c:	e7d6      	b.n	80226dc <_malloc_r+0xac>
 802272e:	237e      	movs	r3, #126	; 0x7e
 8022730:	e7d4      	b.n	80226dc <_malloc_r+0xac>
 8022732:	2900      	cmp	r1, #0
 8022734:	68f1      	ldr	r1, [r6, #12]
 8022736:	db04      	blt.n	8022742 <_malloc_r+0x112>
 8022738:	68b3      	ldr	r3, [r6, #8]
 802273a:	60d9      	str	r1, [r3, #12]
 802273c:	608b      	str	r3, [r1, #8]
 802273e:	18b3      	adds	r3, r6, r2
 8022740:	e7a4      	b.n	802268c <_malloc_r+0x5c>
 8022742:	460e      	mov	r6, r1
 8022744:	e7d0      	b.n	80226e8 <_malloc_r+0xb8>
 8022746:	2f00      	cmp	r7, #0
 8022748:	616a      	str	r2, [r5, #20]
 802274a:	612a      	str	r2, [r5, #16]
 802274c:	db05      	blt.n	802275a <_malloc_r+0x12a>
 802274e:	4430      	add	r0, r6
 8022750:	6843      	ldr	r3, [r0, #4]
 8022752:	f043 0301 	orr.w	r3, r3, #1
 8022756:	6043      	str	r3, [r0, #4]
 8022758:	e79c      	b.n	8022694 <_malloc_r+0x64>
 802275a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 802275e:	d244      	bcs.n	80227ea <_malloc_r+0x1ba>
 8022760:	08c0      	lsrs	r0, r0, #3
 8022762:	1087      	asrs	r7, r0, #2
 8022764:	2201      	movs	r2, #1
 8022766:	fa02 f707 	lsl.w	r7, r2, r7
 802276a:	686a      	ldr	r2, [r5, #4]
 802276c:	3001      	adds	r0, #1
 802276e:	433a      	orrs	r2, r7
 8022770:	606a      	str	r2, [r5, #4]
 8022772:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8022776:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 802277a:	60b7      	str	r7, [r6, #8]
 802277c:	3a08      	subs	r2, #8
 802277e:	60f2      	str	r2, [r6, #12]
 8022780:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8022784:	60fe      	str	r6, [r7, #12]
 8022786:	2001      	movs	r0, #1
 8022788:	109a      	asrs	r2, r3, #2
 802278a:	fa00 f202 	lsl.w	r2, r0, r2
 802278e:	6868      	ldr	r0, [r5, #4]
 8022790:	4282      	cmp	r2, r0
 8022792:	f200 80a1 	bhi.w	80228d8 <_malloc_r+0x2a8>
 8022796:	4202      	tst	r2, r0
 8022798:	d106      	bne.n	80227a8 <_malloc_r+0x178>
 802279a:	f023 0303 	bic.w	r3, r3, #3
 802279e:	0052      	lsls	r2, r2, #1
 80227a0:	4202      	tst	r2, r0
 80227a2:	f103 0304 	add.w	r3, r3, #4
 80227a6:	d0fa      	beq.n	802279e <_malloc_r+0x16e>
 80227a8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80227ac:	46e0      	mov	r8, ip
 80227ae:	469e      	mov	lr, r3
 80227b0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80227b4:	4546      	cmp	r6, r8
 80227b6:	d153      	bne.n	8022860 <_malloc_r+0x230>
 80227b8:	f10e 0e01 	add.w	lr, lr, #1
 80227bc:	f01e 0f03 	tst.w	lr, #3
 80227c0:	f108 0808 	add.w	r8, r8, #8
 80227c4:	d1f4      	bne.n	80227b0 <_malloc_r+0x180>
 80227c6:	0798      	lsls	r0, r3, #30
 80227c8:	d179      	bne.n	80228be <_malloc_r+0x28e>
 80227ca:	686b      	ldr	r3, [r5, #4]
 80227cc:	ea23 0302 	bic.w	r3, r3, r2
 80227d0:	606b      	str	r3, [r5, #4]
 80227d2:	6868      	ldr	r0, [r5, #4]
 80227d4:	0052      	lsls	r2, r2, #1
 80227d6:	4282      	cmp	r2, r0
 80227d8:	d87e      	bhi.n	80228d8 <_malloc_r+0x2a8>
 80227da:	2a00      	cmp	r2, #0
 80227dc:	d07c      	beq.n	80228d8 <_malloc_r+0x2a8>
 80227de:	4673      	mov	r3, lr
 80227e0:	4202      	tst	r2, r0
 80227e2:	d1e1      	bne.n	80227a8 <_malloc_r+0x178>
 80227e4:	3304      	adds	r3, #4
 80227e6:	0052      	lsls	r2, r2, #1
 80227e8:	e7fa      	b.n	80227e0 <_malloc_r+0x1b0>
 80227ea:	0a42      	lsrs	r2, r0, #9
 80227ec:	2a04      	cmp	r2, #4
 80227ee:	d815      	bhi.n	802281c <_malloc_r+0x1ec>
 80227f0:	0982      	lsrs	r2, r0, #6
 80227f2:	3238      	adds	r2, #56	; 0x38
 80227f4:	1c57      	adds	r7, r2, #1
 80227f6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80227fa:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80227fe:	45be      	cmp	lr, r7
 8022800:	d126      	bne.n	8022850 <_malloc_r+0x220>
 8022802:	2001      	movs	r0, #1
 8022804:	1092      	asrs	r2, r2, #2
 8022806:	fa00 f202 	lsl.w	r2, r0, r2
 802280a:	6868      	ldr	r0, [r5, #4]
 802280c:	4310      	orrs	r0, r2
 802280e:	6068      	str	r0, [r5, #4]
 8022810:	f8c6 e00c 	str.w	lr, [r6, #12]
 8022814:	60b7      	str	r7, [r6, #8]
 8022816:	f8ce 6008 	str.w	r6, [lr, #8]
 802281a:	e7b3      	b.n	8022784 <_malloc_r+0x154>
 802281c:	2a14      	cmp	r2, #20
 802281e:	d801      	bhi.n	8022824 <_malloc_r+0x1f4>
 8022820:	325b      	adds	r2, #91	; 0x5b
 8022822:	e7e7      	b.n	80227f4 <_malloc_r+0x1c4>
 8022824:	2a54      	cmp	r2, #84	; 0x54
 8022826:	d802      	bhi.n	802282e <_malloc_r+0x1fe>
 8022828:	0b02      	lsrs	r2, r0, #12
 802282a:	326e      	adds	r2, #110	; 0x6e
 802282c:	e7e2      	b.n	80227f4 <_malloc_r+0x1c4>
 802282e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8022832:	d802      	bhi.n	802283a <_malloc_r+0x20a>
 8022834:	0bc2      	lsrs	r2, r0, #15
 8022836:	3277      	adds	r2, #119	; 0x77
 8022838:	e7dc      	b.n	80227f4 <_malloc_r+0x1c4>
 802283a:	f240 5754 	movw	r7, #1364	; 0x554
 802283e:	42ba      	cmp	r2, r7
 8022840:	bf9a      	itte	ls
 8022842:	0c82      	lsrls	r2, r0, #18
 8022844:	327c      	addls	r2, #124	; 0x7c
 8022846:	227e      	movhi	r2, #126	; 0x7e
 8022848:	e7d4      	b.n	80227f4 <_malloc_r+0x1c4>
 802284a:	68bf      	ldr	r7, [r7, #8]
 802284c:	45be      	cmp	lr, r7
 802284e:	d004      	beq.n	802285a <_malloc_r+0x22a>
 8022850:	687a      	ldr	r2, [r7, #4]
 8022852:	f022 0203 	bic.w	r2, r2, #3
 8022856:	4290      	cmp	r0, r2
 8022858:	d3f7      	bcc.n	802284a <_malloc_r+0x21a>
 802285a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 802285e:	e7d7      	b.n	8022810 <_malloc_r+0x1e0>
 8022860:	6870      	ldr	r0, [r6, #4]
 8022862:	68f7      	ldr	r7, [r6, #12]
 8022864:	f020 0003 	bic.w	r0, r0, #3
 8022868:	eba0 0a04 	sub.w	sl, r0, r4
 802286c:	f1ba 0f0f 	cmp.w	sl, #15
 8022870:	dd10      	ble.n	8022894 <_malloc_r+0x264>
 8022872:	68b2      	ldr	r2, [r6, #8]
 8022874:	1933      	adds	r3, r6, r4
 8022876:	f044 0401 	orr.w	r4, r4, #1
 802287a:	6074      	str	r4, [r6, #4]
 802287c:	60d7      	str	r7, [r2, #12]
 802287e:	60ba      	str	r2, [r7, #8]
 8022880:	f04a 0201 	orr.w	r2, sl, #1
 8022884:	616b      	str	r3, [r5, #20]
 8022886:	612b      	str	r3, [r5, #16]
 8022888:	60d9      	str	r1, [r3, #12]
 802288a:	6099      	str	r1, [r3, #8]
 802288c:	605a      	str	r2, [r3, #4]
 802288e:	f846 a000 	str.w	sl, [r6, r0]
 8022892:	e6ff      	b.n	8022694 <_malloc_r+0x64>
 8022894:	f1ba 0f00 	cmp.w	sl, #0
 8022898:	db0f      	blt.n	80228ba <_malloc_r+0x28a>
 802289a:	4430      	add	r0, r6
 802289c:	6843      	ldr	r3, [r0, #4]
 802289e:	f043 0301 	orr.w	r3, r3, #1
 80228a2:	6043      	str	r3, [r0, #4]
 80228a4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80228a8:	4648      	mov	r0, r9
 80228aa:	60df      	str	r7, [r3, #12]
 80228ac:	60bb      	str	r3, [r7, #8]
 80228ae:	f000 f8d3 	bl	8022a58 <__malloc_unlock>
 80228b2:	4630      	mov	r0, r6
 80228b4:	b003      	add	sp, #12
 80228b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228ba:	463e      	mov	r6, r7
 80228bc:	e77a      	b.n	80227b4 <_malloc_r+0x184>
 80228be:	f85c 0908 	ldr.w	r0, [ip], #-8
 80228c2:	4584      	cmp	ip, r0
 80228c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80228c8:	f43f af7d 	beq.w	80227c6 <_malloc_r+0x196>
 80228cc:	e781      	b.n	80227d2 <_malloc_r+0x1a2>
 80228ce:	bf00      	nop
 80228d0:	20001044 	.word	0x20001044
 80228d4:	2000104c 	.word	0x2000104c
 80228d8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80228dc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80228e0:	f026 0603 	bic.w	r6, r6, #3
 80228e4:	42b4      	cmp	r4, r6
 80228e6:	d803      	bhi.n	80228f0 <_malloc_r+0x2c0>
 80228e8:	1b33      	subs	r3, r6, r4
 80228ea:	2b0f      	cmp	r3, #15
 80228ec:	f300 8096 	bgt.w	8022a1c <_malloc_r+0x3ec>
 80228f0:	4a4f      	ldr	r2, [pc, #316]	; (8022a30 <_malloc_r+0x400>)
 80228f2:	6817      	ldr	r7, [r2, #0]
 80228f4:	4a4f      	ldr	r2, [pc, #316]	; (8022a34 <_malloc_r+0x404>)
 80228f6:	6811      	ldr	r1, [r2, #0]
 80228f8:	3710      	adds	r7, #16
 80228fa:	3101      	adds	r1, #1
 80228fc:	eb0b 0306 	add.w	r3, fp, r6
 8022900:	4427      	add	r7, r4
 8022902:	d005      	beq.n	8022910 <_malloc_r+0x2e0>
 8022904:	494c      	ldr	r1, [pc, #304]	; (8022a38 <_malloc_r+0x408>)
 8022906:	3901      	subs	r1, #1
 8022908:	440f      	add	r7, r1
 802290a:	3101      	adds	r1, #1
 802290c:	4249      	negs	r1, r1
 802290e:	400f      	ands	r7, r1
 8022910:	4639      	mov	r1, r7
 8022912:	4648      	mov	r0, r9
 8022914:	9201      	str	r2, [sp, #4]
 8022916:	9300      	str	r3, [sp, #0]
 8022918:	f000 fb74 	bl	8023004 <_sbrk_r>
 802291c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022920:	4680      	mov	r8, r0
 8022922:	d056      	beq.n	80229d2 <_malloc_r+0x3a2>
 8022924:	9b00      	ldr	r3, [sp, #0]
 8022926:	9a01      	ldr	r2, [sp, #4]
 8022928:	4283      	cmp	r3, r0
 802292a:	d901      	bls.n	8022930 <_malloc_r+0x300>
 802292c:	45ab      	cmp	fp, r5
 802292e:	d150      	bne.n	80229d2 <_malloc_r+0x3a2>
 8022930:	4842      	ldr	r0, [pc, #264]	; (8022a3c <_malloc_r+0x40c>)
 8022932:	6801      	ldr	r1, [r0, #0]
 8022934:	4543      	cmp	r3, r8
 8022936:	eb07 0e01 	add.w	lr, r7, r1
 802293a:	f8c0 e000 	str.w	lr, [r0]
 802293e:	4940      	ldr	r1, [pc, #256]	; (8022a40 <_malloc_r+0x410>)
 8022940:	4682      	mov	sl, r0
 8022942:	d113      	bne.n	802296c <_malloc_r+0x33c>
 8022944:	420b      	tst	r3, r1
 8022946:	d111      	bne.n	802296c <_malloc_r+0x33c>
 8022948:	68ab      	ldr	r3, [r5, #8]
 802294a:	443e      	add	r6, r7
 802294c:	f046 0601 	orr.w	r6, r6, #1
 8022950:	605e      	str	r6, [r3, #4]
 8022952:	4a3c      	ldr	r2, [pc, #240]	; (8022a44 <_malloc_r+0x414>)
 8022954:	f8da 3000 	ldr.w	r3, [sl]
 8022958:	6811      	ldr	r1, [r2, #0]
 802295a:	428b      	cmp	r3, r1
 802295c:	bf88      	it	hi
 802295e:	6013      	strhi	r3, [r2, #0]
 8022960:	4a39      	ldr	r2, [pc, #228]	; (8022a48 <_malloc_r+0x418>)
 8022962:	6811      	ldr	r1, [r2, #0]
 8022964:	428b      	cmp	r3, r1
 8022966:	bf88      	it	hi
 8022968:	6013      	strhi	r3, [r2, #0]
 802296a:	e032      	b.n	80229d2 <_malloc_r+0x3a2>
 802296c:	6810      	ldr	r0, [r2, #0]
 802296e:	3001      	adds	r0, #1
 8022970:	bf1b      	ittet	ne
 8022972:	eba8 0303 	subne.w	r3, r8, r3
 8022976:	4473      	addne	r3, lr
 8022978:	f8c2 8000 	streq.w	r8, [r2]
 802297c:	f8ca 3000 	strne.w	r3, [sl]
 8022980:	f018 0007 	ands.w	r0, r8, #7
 8022984:	bf1c      	itt	ne
 8022986:	f1c0 0008 	rsbne	r0, r0, #8
 802298a:	4480      	addne	r8, r0
 802298c:	4b2a      	ldr	r3, [pc, #168]	; (8022a38 <_malloc_r+0x408>)
 802298e:	4447      	add	r7, r8
 8022990:	4418      	add	r0, r3
 8022992:	400f      	ands	r7, r1
 8022994:	1bc7      	subs	r7, r0, r7
 8022996:	4639      	mov	r1, r7
 8022998:	4648      	mov	r0, r9
 802299a:	f000 fb33 	bl	8023004 <_sbrk_r>
 802299e:	1c43      	adds	r3, r0, #1
 80229a0:	bf08      	it	eq
 80229a2:	4640      	moveq	r0, r8
 80229a4:	f8da 3000 	ldr.w	r3, [sl]
 80229a8:	f8c5 8008 	str.w	r8, [r5, #8]
 80229ac:	bf08      	it	eq
 80229ae:	2700      	moveq	r7, #0
 80229b0:	eba0 0008 	sub.w	r0, r0, r8
 80229b4:	443b      	add	r3, r7
 80229b6:	4407      	add	r7, r0
 80229b8:	f047 0701 	orr.w	r7, r7, #1
 80229bc:	45ab      	cmp	fp, r5
 80229be:	f8ca 3000 	str.w	r3, [sl]
 80229c2:	f8c8 7004 	str.w	r7, [r8, #4]
 80229c6:	d0c4      	beq.n	8022952 <_malloc_r+0x322>
 80229c8:	2e0f      	cmp	r6, #15
 80229ca:	d810      	bhi.n	80229ee <_malloc_r+0x3be>
 80229cc:	2301      	movs	r3, #1
 80229ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80229d2:	68ab      	ldr	r3, [r5, #8]
 80229d4:	685a      	ldr	r2, [r3, #4]
 80229d6:	f022 0203 	bic.w	r2, r2, #3
 80229da:	4294      	cmp	r4, r2
 80229dc:	eba2 0304 	sub.w	r3, r2, r4
 80229e0:	d801      	bhi.n	80229e6 <_malloc_r+0x3b6>
 80229e2:	2b0f      	cmp	r3, #15
 80229e4:	dc1a      	bgt.n	8022a1c <_malloc_r+0x3ec>
 80229e6:	4648      	mov	r0, r9
 80229e8:	f000 f836 	bl	8022a58 <__malloc_unlock>
 80229ec:	e62d      	b.n	802264a <_malloc_r+0x1a>
 80229ee:	f8db 3004 	ldr.w	r3, [fp, #4]
 80229f2:	3e0c      	subs	r6, #12
 80229f4:	f026 0607 	bic.w	r6, r6, #7
 80229f8:	f003 0301 	and.w	r3, r3, #1
 80229fc:	4333      	orrs	r3, r6
 80229fe:	f8cb 3004 	str.w	r3, [fp, #4]
 8022a02:	eb0b 0306 	add.w	r3, fp, r6
 8022a06:	2205      	movs	r2, #5
 8022a08:	2e0f      	cmp	r6, #15
 8022a0a:	605a      	str	r2, [r3, #4]
 8022a0c:	609a      	str	r2, [r3, #8]
 8022a0e:	d9a0      	bls.n	8022952 <_malloc_r+0x322>
 8022a10:	f10b 0108 	add.w	r1, fp, #8
 8022a14:	4648      	mov	r0, r9
 8022a16:	f000 fc03 	bl	8023220 <_free_r>
 8022a1a:	e79a      	b.n	8022952 <_malloc_r+0x322>
 8022a1c:	68ae      	ldr	r6, [r5, #8]
 8022a1e:	f044 0201 	orr.w	r2, r4, #1
 8022a22:	4434      	add	r4, r6
 8022a24:	f043 0301 	orr.w	r3, r3, #1
 8022a28:	6072      	str	r2, [r6, #4]
 8022a2a:	60ac      	str	r4, [r5, #8]
 8022a2c:	6063      	str	r3, [r4, #4]
 8022a2e:	e631      	b.n	8022694 <_malloc_r+0x64>
 8022a30:	20090678 	.word	0x20090678
 8022a34:	2000144c 	.word	0x2000144c
 8022a38:	00000080 	.word	0x00000080
 8022a3c:	20090648 	.word	0x20090648
 8022a40:	0000007f 	.word	0x0000007f
 8022a44:	20090670 	.word	0x20090670
 8022a48:	20090674 	.word	0x20090674

08022a4c <__malloc_lock>:
 8022a4c:	4801      	ldr	r0, [pc, #4]	; (8022a54 <__malloc_lock+0x8>)
 8022a4e:	f000 bca3 	b.w	8023398 <__retarget_lock_acquire_recursive>
 8022a52:	bf00      	nop
 8022a54:	20096624 	.word	0x20096624

08022a58 <__malloc_unlock>:
 8022a58:	4801      	ldr	r0, [pc, #4]	; (8022a60 <__malloc_unlock+0x8>)
 8022a5a:	f000 bc9e 	b.w	802339a <__retarget_lock_release_recursive>
 8022a5e:	bf00      	nop
 8022a60:	20096624 	.word	0x20096624

08022a64 <_Balloc>:
 8022a64:	b570      	push	{r4, r5, r6, lr}
 8022a66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022a68:	4604      	mov	r4, r0
 8022a6a:	460e      	mov	r6, r1
 8022a6c:	b93d      	cbnz	r5, 8022a7e <_Balloc+0x1a>
 8022a6e:	2010      	movs	r0, #16
 8022a70:	f7ff fdd6 	bl	8022620 <malloc>
 8022a74:	6260      	str	r0, [r4, #36]	; 0x24
 8022a76:	6045      	str	r5, [r0, #4]
 8022a78:	6085      	str	r5, [r0, #8]
 8022a7a:	6005      	str	r5, [r0, #0]
 8022a7c:	60c5      	str	r5, [r0, #12]
 8022a7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022a80:	68eb      	ldr	r3, [r5, #12]
 8022a82:	b183      	cbz	r3, 8022aa6 <_Balloc+0x42>
 8022a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022a86:	68db      	ldr	r3, [r3, #12]
 8022a88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8022a8c:	b9b8      	cbnz	r0, 8022abe <_Balloc+0x5a>
 8022a8e:	2101      	movs	r1, #1
 8022a90:	fa01 f506 	lsl.w	r5, r1, r6
 8022a94:	1d6a      	adds	r2, r5, #5
 8022a96:	0092      	lsls	r2, r2, #2
 8022a98:	4620      	mov	r0, r4
 8022a9a:	f000 fb3d 	bl	8023118 <_calloc_r>
 8022a9e:	b160      	cbz	r0, 8022aba <_Balloc+0x56>
 8022aa0:	6046      	str	r6, [r0, #4]
 8022aa2:	6085      	str	r5, [r0, #8]
 8022aa4:	e00e      	b.n	8022ac4 <_Balloc+0x60>
 8022aa6:	2221      	movs	r2, #33	; 0x21
 8022aa8:	2104      	movs	r1, #4
 8022aaa:	4620      	mov	r0, r4
 8022aac:	f000 fb34 	bl	8023118 <_calloc_r>
 8022ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022ab2:	60e8      	str	r0, [r5, #12]
 8022ab4:	68db      	ldr	r3, [r3, #12]
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d1e4      	bne.n	8022a84 <_Balloc+0x20>
 8022aba:	2000      	movs	r0, #0
 8022abc:	bd70      	pop	{r4, r5, r6, pc}
 8022abe:	6802      	ldr	r2, [r0, #0]
 8022ac0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8022ac4:	2300      	movs	r3, #0
 8022ac6:	6103      	str	r3, [r0, #16]
 8022ac8:	60c3      	str	r3, [r0, #12]
 8022aca:	bd70      	pop	{r4, r5, r6, pc}

08022acc <_Bfree>:
 8022acc:	b570      	push	{r4, r5, r6, lr}
 8022ace:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8022ad0:	4606      	mov	r6, r0
 8022ad2:	460d      	mov	r5, r1
 8022ad4:	b93c      	cbnz	r4, 8022ae6 <_Bfree+0x1a>
 8022ad6:	2010      	movs	r0, #16
 8022ad8:	f7ff fda2 	bl	8022620 <malloc>
 8022adc:	6270      	str	r0, [r6, #36]	; 0x24
 8022ade:	6044      	str	r4, [r0, #4]
 8022ae0:	6084      	str	r4, [r0, #8]
 8022ae2:	6004      	str	r4, [r0, #0]
 8022ae4:	60c4      	str	r4, [r0, #12]
 8022ae6:	b13d      	cbz	r5, 8022af8 <_Bfree+0x2c>
 8022ae8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022aea:	686a      	ldr	r2, [r5, #4]
 8022aec:	68db      	ldr	r3, [r3, #12]
 8022aee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022af2:	6029      	str	r1, [r5, #0]
 8022af4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8022af8:	bd70      	pop	{r4, r5, r6, pc}

08022afa <__multadd>:
 8022afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022afe:	690d      	ldr	r5, [r1, #16]
 8022b00:	461f      	mov	r7, r3
 8022b02:	4606      	mov	r6, r0
 8022b04:	460c      	mov	r4, r1
 8022b06:	f101 0e14 	add.w	lr, r1, #20
 8022b0a:	2300      	movs	r3, #0
 8022b0c:	f8de 0000 	ldr.w	r0, [lr]
 8022b10:	b281      	uxth	r1, r0
 8022b12:	fb02 7101 	mla	r1, r2, r1, r7
 8022b16:	0c0f      	lsrs	r7, r1, #16
 8022b18:	0c00      	lsrs	r0, r0, #16
 8022b1a:	fb02 7000 	mla	r0, r2, r0, r7
 8022b1e:	b289      	uxth	r1, r1
 8022b20:	3301      	adds	r3, #1
 8022b22:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8022b26:	429d      	cmp	r5, r3
 8022b28:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8022b2c:	f84e 1b04 	str.w	r1, [lr], #4
 8022b30:	dcec      	bgt.n	8022b0c <__multadd+0x12>
 8022b32:	b1d7      	cbz	r7, 8022b6a <__multadd+0x70>
 8022b34:	68a3      	ldr	r3, [r4, #8]
 8022b36:	429d      	cmp	r5, r3
 8022b38:	db12      	blt.n	8022b60 <__multadd+0x66>
 8022b3a:	6861      	ldr	r1, [r4, #4]
 8022b3c:	4630      	mov	r0, r6
 8022b3e:	3101      	adds	r1, #1
 8022b40:	f7ff ff90 	bl	8022a64 <_Balloc>
 8022b44:	6922      	ldr	r2, [r4, #16]
 8022b46:	3202      	adds	r2, #2
 8022b48:	f104 010c 	add.w	r1, r4, #12
 8022b4c:	4680      	mov	r8, r0
 8022b4e:	0092      	lsls	r2, r2, #2
 8022b50:	300c      	adds	r0, #12
 8022b52:	f7fd fecb 	bl	80208ec <memcpy>
 8022b56:	4621      	mov	r1, r4
 8022b58:	4630      	mov	r0, r6
 8022b5a:	f7ff ffb7 	bl	8022acc <_Bfree>
 8022b5e:	4644      	mov	r4, r8
 8022b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022b64:	3501      	adds	r5, #1
 8022b66:	615f      	str	r7, [r3, #20]
 8022b68:	6125      	str	r5, [r4, #16]
 8022b6a:	4620      	mov	r0, r4
 8022b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022b70 <__hi0bits>:
 8022b70:	0c02      	lsrs	r2, r0, #16
 8022b72:	0412      	lsls	r2, r2, #16
 8022b74:	4603      	mov	r3, r0
 8022b76:	b9b2      	cbnz	r2, 8022ba6 <__hi0bits+0x36>
 8022b78:	0403      	lsls	r3, r0, #16
 8022b7a:	2010      	movs	r0, #16
 8022b7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8022b80:	bf04      	itt	eq
 8022b82:	021b      	lsleq	r3, r3, #8
 8022b84:	3008      	addeq	r0, #8
 8022b86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8022b8a:	bf04      	itt	eq
 8022b8c:	011b      	lsleq	r3, r3, #4
 8022b8e:	3004      	addeq	r0, #4
 8022b90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8022b94:	bf04      	itt	eq
 8022b96:	009b      	lsleq	r3, r3, #2
 8022b98:	3002      	addeq	r0, #2
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	db06      	blt.n	8022bac <__hi0bits+0x3c>
 8022b9e:	005b      	lsls	r3, r3, #1
 8022ba0:	d503      	bpl.n	8022baa <__hi0bits+0x3a>
 8022ba2:	3001      	adds	r0, #1
 8022ba4:	4770      	bx	lr
 8022ba6:	2000      	movs	r0, #0
 8022ba8:	e7e8      	b.n	8022b7c <__hi0bits+0xc>
 8022baa:	2020      	movs	r0, #32
 8022bac:	4770      	bx	lr

08022bae <__lo0bits>:
 8022bae:	6803      	ldr	r3, [r0, #0]
 8022bb0:	f013 0207 	ands.w	r2, r3, #7
 8022bb4:	4601      	mov	r1, r0
 8022bb6:	d00b      	beq.n	8022bd0 <__lo0bits+0x22>
 8022bb8:	07da      	lsls	r2, r3, #31
 8022bba:	d423      	bmi.n	8022c04 <__lo0bits+0x56>
 8022bbc:	0798      	lsls	r0, r3, #30
 8022bbe:	bf49      	itett	mi
 8022bc0:	085b      	lsrmi	r3, r3, #1
 8022bc2:	089b      	lsrpl	r3, r3, #2
 8022bc4:	2001      	movmi	r0, #1
 8022bc6:	600b      	strmi	r3, [r1, #0]
 8022bc8:	bf5c      	itt	pl
 8022bca:	600b      	strpl	r3, [r1, #0]
 8022bcc:	2002      	movpl	r0, #2
 8022bce:	4770      	bx	lr
 8022bd0:	b298      	uxth	r0, r3
 8022bd2:	b9a8      	cbnz	r0, 8022c00 <__lo0bits+0x52>
 8022bd4:	0c1b      	lsrs	r3, r3, #16
 8022bd6:	2010      	movs	r0, #16
 8022bd8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8022bdc:	bf04      	itt	eq
 8022bde:	0a1b      	lsreq	r3, r3, #8
 8022be0:	3008      	addeq	r0, #8
 8022be2:	071a      	lsls	r2, r3, #28
 8022be4:	bf04      	itt	eq
 8022be6:	091b      	lsreq	r3, r3, #4
 8022be8:	3004      	addeq	r0, #4
 8022bea:	079a      	lsls	r2, r3, #30
 8022bec:	bf04      	itt	eq
 8022bee:	089b      	lsreq	r3, r3, #2
 8022bf0:	3002      	addeq	r0, #2
 8022bf2:	07da      	lsls	r2, r3, #31
 8022bf4:	d402      	bmi.n	8022bfc <__lo0bits+0x4e>
 8022bf6:	085b      	lsrs	r3, r3, #1
 8022bf8:	d006      	beq.n	8022c08 <__lo0bits+0x5a>
 8022bfa:	3001      	adds	r0, #1
 8022bfc:	600b      	str	r3, [r1, #0]
 8022bfe:	4770      	bx	lr
 8022c00:	4610      	mov	r0, r2
 8022c02:	e7e9      	b.n	8022bd8 <__lo0bits+0x2a>
 8022c04:	2000      	movs	r0, #0
 8022c06:	4770      	bx	lr
 8022c08:	2020      	movs	r0, #32
 8022c0a:	4770      	bx	lr

08022c0c <__i2b>:
 8022c0c:	b510      	push	{r4, lr}
 8022c0e:	460c      	mov	r4, r1
 8022c10:	2101      	movs	r1, #1
 8022c12:	f7ff ff27 	bl	8022a64 <_Balloc>
 8022c16:	2201      	movs	r2, #1
 8022c18:	6144      	str	r4, [r0, #20]
 8022c1a:	6102      	str	r2, [r0, #16]
 8022c1c:	bd10      	pop	{r4, pc}

08022c1e <__multiply>:
 8022c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c22:	4614      	mov	r4, r2
 8022c24:	690a      	ldr	r2, [r1, #16]
 8022c26:	6923      	ldr	r3, [r4, #16]
 8022c28:	429a      	cmp	r2, r3
 8022c2a:	bfb8      	it	lt
 8022c2c:	460b      	movlt	r3, r1
 8022c2e:	4689      	mov	r9, r1
 8022c30:	bfbc      	itt	lt
 8022c32:	46a1      	movlt	r9, r4
 8022c34:	461c      	movlt	r4, r3
 8022c36:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8022c3a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8022c3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8022c42:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8022c46:	eb07 060a 	add.w	r6, r7, sl
 8022c4a:	429e      	cmp	r6, r3
 8022c4c:	bfc8      	it	gt
 8022c4e:	3101      	addgt	r1, #1
 8022c50:	f7ff ff08 	bl	8022a64 <_Balloc>
 8022c54:	f100 0514 	add.w	r5, r0, #20
 8022c58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022c5c:	462b      	mov	r3, r5
 8022c5e:	2200      	movs	r2, #0
 8022c60:	4543      	cmp	r3, r8
 8022c62:	d316      	bcc.n	8022c92 <__multiply+0x74>
 8022c64:	f104 0214 	add.w	r2, r4, #20
 8022c68:	f109 0114 	add.w	r1, r9, #20
 8022c6c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8022c70:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8022c74:	9301      	str	r3, [sp, #4]
 8022c76:	9c01      	ldr	r4, [sp, #4]
 8022c78:	4294      	cmp	r4, r2
 8022c7a:	4613      	mov	r3, r2
 8022c7c:	d80c      	bhi.n	8022c98 <__multiply+0x7a>
 8022c7e:	2e00      	cmp	r6, #0
 8022c80:	dd03      	ble.n	8022c8a <__multiply+0x6c>
 8022c82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	d054      	beq.n	8022d34 <__multiply+0x116>
 8022c8a:	6106      	str	r6, [r0, #16]
 8022c8c:	b003      	add	sp, #12
 8022c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c92:	f843 2b04 	str.w	r2, [r3], #4
 8022c96:	e7e3      	b.n	8022c60 <__multiply+0x42>
 8022c98:	f8b3 a000 	ldrh.w	sl, [r3]
 8022c9c:	3204      	adds	r2, #4
 8022c9e:	f1ba 0f00 	cmp.w	sl, #0
 8022ca2:	d020      	beq.n	8022ce6 <__multiply+0xc8>
 8022ca4:	46ae      	mov	lr, r5
 8022ca6:	4689      	mov	r9, r1
 8022ca8:	f04f 0c00 	mov.w	ip, #0
 8022cac:	f859 4b04 	ldr.w	r4, [r9], #4
 8022cb0:	f8be b000 	ldrh.w	fp, [lr]
 8022cb4:	b2a3      	uxth	r3, r4
 8022cb6:	fb0a b303 	mla	r3, sl, r3, fp
 8022cba:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8022cbe:	f8de 4000 	ldr.w	r4, [lr]
 8022cc2:	4463      	add	r3, ip
 8022cc4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8022cc8:	fb0a c40b 	mla	r4, sl, fp, ip
 8022ccc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8022cd0:	b29b      	uxth	r3, r3
 8022cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8022cd6:	454f      	cmp	r7, r9
 8022cd8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8022cdc:	f84e 3b04 	str.w	r3, [lr], #4
 8022ce0:	d8e4      	bhi.n	8022cac <__multiply+0x8e>
 8022ce2:	f8ce c000 	str.w	ip, [lr]
 8022ce6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8022cea:	f1b9 0f00 	cmp.w	r9, #0
 8022cee:	d01f      	beq.n	8022d30 <__multiply+0x112>
 8022cf0:	682b      	ldr	r3, [r5, #0]
 8022cf2:	46ae      	mov	lr, r5
 8022cf4:	468c      	mov	ip, r1
 8022cf6:	f04f 0a00 	mov.w	sl, #0
 8022cfa:	f8bc 4000 	ldrh.w	r4, [ip]
 8022cfe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022d02:	fb09 b404 	mla	r4, r9, r4, fp
 8022d06:	44a2      	add	sl, r4
 8022d08:	b29b      	uxth	r3, r3
 8022d0a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8022d0e:	f84e 3b04 	str.w	r3, [lr], #4
 8022d12:	f85c 3b04 	ldr.w	r3, [ip], #4
 8022d16:	f8be 4000 	ldrh.w	r4, [lr]
 8022d1a:	0c1b      	lsrs	r3, r3, #16
 8022d1c:	fb09 4303 	mla	r3, r9, r3, r4
 8022d20:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8022d24:	4567      	cmp	r7, ip
 8022d26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022d2a:	d8e6      	bhi.n	8022cfa <__multiply+0xdc>
 8022d2c:	f8ce 3000 	str.w	r3, [lr]
 8022d30:	3504      	adds	r5, #4
 8022d32:	e7a0      	b.n	8022c76 <__multiply+0x58>
 8022d34:	3e01      	subs	r6, #1
 8022d36:	e7a2      	b.n	8022c7e <__multiply+0x60>

08022d38 <__pow5mult>:
 8022d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022d3c:	4615      	mov	r5, r2
 8022d3e:	f012 0203 	ands.w	r2, r2, #3
 8022d42:	4606      	mov	r6, r0
 8022d44:	460f      	mov	r7, r1
 8022d46:	d007      	beq.n	8022d58 <__pow5mult+0x20>
 8022d48:	3a01      	subs	r2, #1
 8022d4a:	4c21      	ldr	r4, [pc, #132]	; (8022dd0 <__pow5mult+0x98>)
 8022d4c:	2300      	movs	r3, #0
 8022d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022d52:	f7ff fed2 	bl	8022afa <__multadd>
 8022d56:	4607      	mov	r7, r0
 8022d58:	10ad      	asrs	r5, r5, #2
 8022d5a:	d035      	beq.n	8022dc8 <__pow5mult+0x90>
 8022d5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022d5e:	b93c      	cbnz	r4, 8022d70 <__pow5mult+0x38>
 8022d60:	2010      	movs	r0, #16
 8022d62:	f7ff fc5d 	bl	8022620 <malloc>
 8022d66:	6270      	str	r0, [r6, #36]	; 0x24
 8022d68:	6044      	str	r4, [r0, #4]
 8022d6a:	6084      	str	r4, [r0, #8]
 8022d6c:	6004      	str	r4, [r0, #0]
 8022d6e:	60c4      	str	r4, [r0, #12]
 8022d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022d78:	b94c      	cbnz	r4, 8022d8e <__pow5mult+0x56>
 8022d7a:	f240 2171 	movw	r1, #625	; 0x271
 8022d7e:	4630      	mov	r0, r6
 8022d80:	f7ff ff44 	bl	8022c0c <__i2b>
 8022d84:	2300      	movs	r3, #0
 8022d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8022d8a:	4604      	mov	r4, r0
 8022d8c:	6003      	str	r3, [r0, #0]
 8022d8e:	f04f 0800 	mov.w	r8, #0
 8022d92:	07eb      	lsls	r3, r5, #31
 8022d94:	d50a      	bpl.n	8022dac <__pow5mult+0x74>
 8022d96:	4639      	mov	r1, r7
 8022d98:	4622      	mov	r2, r4
 8022d9a:	4630      	mov	r0, r6
 8022d9c:	f7ff ff3f 	bl	8022c1e <__multiply>
 8022da0:	4639      	mov	r1, r7
 8022da2:	4681      	mov	r9, r0
 8022da4:	4630      	mov	r0, r6
 8022da6:	f7ff fe91 	bl	8022acc <_Bfree>
 8022daa:	464f      	mov	r7, r9
 8022dac:	106d      	asrs	r5, r5, #1
 8022dae:	d00b      	beq.n	8022dc8 <__pow5mult+0x90>
 8022db0:	6820      	ldr	r0, [r4, #0]
 8022db2:	b938      	cbnz	r0, 8022dc4 <__pow5mult+0x8c>
 8022db4:	4622      	mov	r2, r4
 8022db6:	4621      	mov	r1, r4
 8022db8:	4630      	mov	r0, r6
 8022dba:	f7ff ff30 	bl	8022c1e <__multiply>
 8022dbe:	6020      	str	r0, [r4, #0]
 8022dc0:	f8c0 8000 	str.w	r8, [r0]
 8022dc4:	4604      	mov	r4, r0
 8022dc6:	e7e4      	b.n	8022d92 <__pow5mult+0x5a>
 8022dc8:	4638      	mov	r0, r7
 8022dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022dce:	bf00      	nop
 8022dd0:	08032698 	.word	0x08032698

08022dd4 <__lshift>:
 8022dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022dd8:	460c      	mov	r4, r1
 8022dda:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022dde:	6923      	ldr	r3, [r4, #16]
 8022de0:	6849      	ldr	r1, [r1, #4]
 8022de2:	eb0a 0903 	add.w	r9, sl, r3
 8022de6:	68a3      	ldr	r3, [r4, #8]
 8022de8:	4607      	mov	r7, r0
 8022dea:	4616      	mov	r6, r2
 8022dec:	f109 0501 	add.w	r5, r9, #1
 8022df0:	42ab      	cmp	r3, r5
 8022df2:	db31      	blt.n	8022e58 <__lshift+0x84>
 8022df4:	4638      	mov	r0, r7
 8022df6:	f7ff fe35 	bl	8022a64 <_Balloc>
 8022dfa:	2200      	movs	r2, #0
 8022dfc:	4680      	mov	r8, r0
 8022dfe:	f100 0314 	add.w	r3, r0, #20
 8022e02:	4611      	mov	r1, r2
 8022e04:	4552      	cmp	r2, sl
 8022e06:	db2a      	blt.n	8022e5e <__lshift+0x8a>
 8022e08:	6920      	ldr	r0, [r4, #16]
 8022e0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022e0e:	f104 0114 	add.w	r1, r4, #20
 8022e12:	f016 021f 	ands.w	r2, r6, #31
 8022e16:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8022e1a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8022e1e:	d022      	beq.n	8022e66 <__lshift+0x92>
 8022e20:	f1c2 0c20 	rsb	ip, r2, #32
 8022e24:	2000      	movs	r0, #0
 8022e26:	680e      	ldr	r6, [r1, #0]
 8022e28:	4096      	lsls	r6, r2
 8022e2a:	4330      	orrs	r0, r6
 8022e2c:	f843 0b04 	str.w	r0, [r3], #4
 8022e30:	f851 0b04 	ldr.w	r0, [r1], #4
 8022e34:	458e      	cmp	lr, r1
 8022e36:	fa20 f00c 	lsr.w	r0, r0, ip
 8022e3a:	d8f4      	bhi.n	8022e26 <__lshift+0x52>
 8022e3c:	6018      	str	r0, [r3, #0]
 8022e3e:	b108      	cbz	r0, 8022e44 <__lshift+0x70>
 8022e40:	f109 0502 	add.w	r5, r9, #2
 8022e44:	3d01      	subs	r5, #1
 8022e46:	4638      	mov	r0, r7
 8022e48:	f8c8 5010 	str.w	r5, [r8, #16]
 8022e4c:	4621      	mov	r1, r4
 8022e4e:	f7ff fe3d 	bl	8022acc <_Bfree>
 8022e52:	4640      	mov	r0, r8
 8022e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e58:	3101      	adds	r1, #1
 8022e5a:	005b      	lsls	r3, r3, #1
 8022e5c:	e7c8      	b.n	8022df0 <__lshift+0x1c>
 8022e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8022e62:	3201      	adds	r2, #1
 8022e64:	e7ce      	b.n	8022e04 <__lshift+0x30>
 8022e66:	3b04      	subs	r3, #4
 8022e68:	f851 2b04 	ldr.w	r2, [r1], #4
 8022e6c:	f843 2f04 	str.w	r2, [r3, #4]!
 8022e70:	458e      	cmp	lr, r1
 8022e72:	d8f9      	bhi.n	8022e68 <__lshift+0x94>
 8022e74:	e7e6      	b.n	8022e44 <__lshift+0x70>

08022e76 <__mcmp>:
 8022e76:	6903      	ldr	r3, [r0, #16]
 8022e78:	690a      	ldr	r2, [r1, #16]
 8022e7a:	1a9b      	subs	r3, r3, r2
 8022e7c:	b530      	push	{r4, r5, lr}
 8022e7e:	d10c      	bne.n	8022e9a <__mcmp+0x24>
 8022e80:	0092      	lsls	r2, r2, #2
 8022e82:	3014      	adds	r0, #20
 8022e84:	3114      	adds	r1, #20
 8022e86:	1884      	adds	r4, r0, r2
 8022e88:	4411      	add	r1, r2
 8022e8a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8022e8e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8022e92:	4295      	cmp	r5, r2
 8022e94:	d003      	beq.n	8022e9e <__mcmp+0x28>
 8022e96:	d305      	bcc.n	8022ea4 <__mcmp+0x2e>
 8022e98:	2301      	movs	r3, #1
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	bd30      	pop	{r4, r5, pc}
 8022e9e:	42a0      	cmp	r0, r4
 8022ea0:	d3f3      	bcc.n	8022e8a <__mcmp+0x14>
 8022ea2:	e7fa      	b.n	8022e9a <__mcmp+0x24>
 8022ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8022ea8:	e7f7      	b.n	8022e9a <__mcmp+0x24>

08022eaa <__mdiff>:
 8022eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022eae:	460d      	mov	r5, r1
 8022eb0:	4607      	mov	r7, r0
 8022eb2:	4611      	mov	r1, r2
 8022eb4:	4628      	mov	r0, r5
 8022eb6:	4614      	mov	r4, r2
 8022eb8:	f7ff ffdd 	bl	8022e76 <__mcmp>
 8022ebc:	1e06      	subs	r6, r0, #0
 8022ebe:	d108      	bne.n	8022ed2 <__mdiff+0x28>
 8022ec0:	4631      	mov	r1, r6
 8022ec2:	4638      	mov	r0, r7
 8022ec4:	f7ff fdce 	bl	8022a64 <_Balloc>
 8022ec8:	2301      	movs	r3, #1
 8022eca:	6103      	str	r3, [r0, #16]
 8022ecc:	6146      	str	r6, [r0, #20]
 8022ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ed2:	bfa4      	itt	ge
 8022ed4:	4623      	movge	r3, r4
 8022ed6:	462c      	movge	r4, r5
 8022ed8:	4638      	mov	r0, r7
 8022eda:	6861      	ldr	r1, [r4, #4]
 8022edc:	bfa6      	itte	ge
 8022ede:	461d      	movge	r5, r3
 8022ee0:	2600      	movge	r6, #0
 8022ee2:	2601      	movlt	r6, #1
 8022ee4:	f7ff fdbe 	bl	8022a64 <_Balloc>
 8022ee8:	692b      	ldr	r3, [r5, #16]
 8022eea:	60c6      	str	r6, [r0, #12]
 8022eec:	6926      	ldr	r6, [r4, #16]
 8022eee:	f105 0914 	add.w	r9, r5, #20
 8022ef2:	f104 0214 	add.w	r2, r4, #20
 8022ef6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8022efa:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8022efe:	f100 0514 	add.w	r5, r0, #20
 8022f02:	f04f 0c00 	mov.w	ip, #0
 8022f06:	f852 ab04 	ldr.w	sl, [r2], #4
 8022f0a:	f859 4b04 	ldr.w	r4, [r9], #4
 8022f0e:	fa1c f18a 	uxtah	r1, ip, sl
 8022f12:	b2a3      	uxth	r3, r4
 8022f14:	1ac9      	subs	r1, r1, r3
 8022f16:	0c23      	lsrs	r3, r4, #16
 8022f18:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8022f1c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8022f20:	b289      	uxth	r1, r1
 8022f22:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8022f26:	45c8      	cmp	r8, r9
 8022f28:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8022f2c:	4696      	mov	lr, r2
 8022f2e:	f845 3b04 	str.w	r3, [r5], #4
 8022f32:	d8e8      	bhi.n	8022f06 <__mdiff+0x5c>
 8022f34:	45be      	cmp	lr, r7
 8022f36:	d305      	bcc.n	8022f44 <__mdiff+0x9a>
 8022f38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8022f3c:	b18b      	cbz	r3, 8022f62 <__mdiff+0xb8>
 8022f3e:	6106      	str	r6, [r0, #16]
 8022f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f44:	f85e 1b04 	ldr.w	r1, [lr], #4
 8022f48:	fa1c f381 	uxtah	r3, ip, r1
 8022f4c:	141a      	asrs	r2, r3, #16
 8022f4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022f52:	b29b      	uxth	r3, r3
 8022f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022f58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022f5c:	f845 3b04 	str.w	r3, [r5], #4
 8022f60:	e7e8      	b.n	8022f34 <__mdiff+0x8a>
 8022f62:	3e01      	subs	r6, #1
 8022f64:	e7e8      	b.n	8022f38 <__mdiff+0x8e>

08022f66 <__d2b>:
 8022f66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022f6a:	460e      	mov	r6, r1
 8022f6c:	2101      	movs	r1, #1
 8022f6e:	ec59 8b10 	vmov	r8, r9, d0
 8022f72:	4615      	mov	r5, r2
 8022f74:	f7ff fd76 	bl	8022a64 <_Balloc>
 8022f78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8022f7c:	4607      	mov	r7, r0
 8022f7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022f82:	bb34      	cbnz	r4, 8022fd2 <__d2b+0x6c>
 8022f84:	9301      	str	r3, [sp, #4]
 8022f86:	f1b8 0f00 	cmp.w	r8, #0
 8022f8a:	d027      	beq.n	8022fdc <__d2b+0x76>
 8022f8c:	a802      	add	r0, sp, #8
 8022f8e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8022f92:	f7ff fe0c 	bl	8022bae <__lo0bits>
 8022f96:	9900      	ldr	r1, [sp, #0]
 8022f98:	b1f0      	cbz	r0, 8022fd8 <__d2b+0x72>
 8022f9a:	9a01      	ldr	r2, [sp, #4]
 8022f9c:	f1c0 0320 	rsb	r3, r0, #32
 8022fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8022fa4:	430b      	orrs	r3, r1
 8022fa6:	40c2      	lsrs	r2, r0
 8022fa8:	617b      	str	r3, [r7, #20]
 8022faa:	9201      	str	r2, [sp, #4]
 8022fac:	9b01      	ldr	r3, [sp, #4]
 8022fae:	61bb      	str	r3, [r7, #24]
 8022fb0:	2b00      	cmp	r3, #0
 8022fb2:	bf14      	ite	ne
 8022fb4:	2102      	movne	r1, #2
 8022fb6:	2101      	moveq	r1, #1
 8022fb8:	6139      	str	r1, [r7, #16]
 8022fba:	b1c4      	cbz	r4, 8022fee <__d2b+0x88>
 8022fbc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8022fc0:	4404      	add	r4, r0
 8022fc2:	6034      	str	r4, [r6, #0]
 8022fc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022fc8:	6028      	str	r0, [r5, #0]
 8022fca:	4638      	mov	r0, r7
 8022fcc:	b003      	add	sp, #12
 8022fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022fd6:	e7d5      	b.n	8022f84 <__d2b+0x1e>
 8022fd8:	6179      	str	r1, [r7, #20]
 8022fda:	e7e7      	b.n	8022fac <__d2b+0x46>
 8022fdc:	a801      	add	r0, sp, #4
 8022fde:	f7ff fde6 	bl	8022bae <__lo0bits>
 8022fe2:	9b01      	ldr	r3, [sp, #4]
 8022fe4:	617b      	str	r3, [r7, #20]
 8022fe6:	2101      	movs	r1, #1
 8022fe8:	6139      	str	r1, [r7, #16]
 8022fea:	3020      	adds	r0, #32
 8022fec:	e7e5      	b.n	8022fba <__d2b+0x54>
 8022fee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8022ff2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022ff6:	6030      	str	r0, [r6, #0]
 8022ff8:	6918      	ldr	r0, [r3, #16]
 8022ffa:	f7ff fdb9 	bl	8022b70 <__hi0bits>
 8022ffe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8023002:	e7e1      	b.n	8022fc8 <__d2b+0x62>

08023004 <_sbrk_r>:
 8023004:	b538      	push	{r3, r4, r5, lr}
 8023006:	4c06      	ldr	r4, [pc, #24]	; (8023020 <_sbrk_r+0x1c>)
 8023008:	2300      	movs	r3, #0
 802300a:	4605      	mov	r5, r0
 802300c:	4608      	mov	r0, r1
 802300e:	6023      	str	r3, [r4, #0]
 8023010:	f7fd f988 	bl	8020324 <_sbrk>
 8023014:	1c43      	adds	r3, r0, #1
 8023016:	d102      	bne.n	802301e <_sbrk_r+0x1a>
 8023018:	6823      	ldr	r3, [r4, #0]
 802301a:	b103      	cbz	r3, 802301e <_sbrk_r+0x1a>
 802301c:	602b      	str	r3, [r5, #0]
 802301e:	bd38      	pop	{r3, r4, r5, pc}
 8023020:	2009662c 	.word	0x2009662c

08023024 <__ssprint_r>:
 8023024:	6893      	ldr	r3, [r2, #8]
 8023026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802302a:	4681      	mov	r9, r0
 802302c:	460c      	mov	r4, r1
 802302e:	4617      	mov	r7, r2
 8023030:	2b00      	cmp	r3, #0
 8023032:	d060      	beq.n	80230f6 <__ssprint_r+0xd2>
 8023034:	f04f 0b00 	mov.w	fp, #0
 8023038:	f8d2 a000 	ldr.w	sl, [r2]
 802303c:	465e      	mov	r6, fp
 802303e:	b356      	cbz	r6, 8023096 <__ssprint_r+0x72>
 8023040:	68a3      	ldr	r3, [r4, #8]
 8023042:	429e      	cmp	r6, r3
 8023044:	d344      	bcc.n	80230d0 <__ssprint_r+0xac>
 8023046:	89a2      	ldrh	r2, [r4, #12]
 8023048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802304c:	d03e      	beq.n	80230cc <__ssprint_r+0xa8>
 802304e:	6825      	ldr	r5, [r4, #0]
 8023050:	6921      	ldr	r1, [r4, #16]
 8023052:	eba5 0801 	sub.w	r8, r5, r1
 8023056:	6965      	ldr	r5, [r4, #20]
 8023058:	2302      	movs	r3, #2
 802305a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802305e:	fb95 f5f3 	sdiv	r5, r5, r3
 8023062:	f108 0301 	add.w	r3, r8, #1
 8023066:	4433      	add	r3, r6
 8023068:	429d      	cmp	r5, r3
 802306a:	bf38      	it	cc
 802306c:	461d      	movcc	r5, r3
 802306e:	0553      	lsls	r3, r2, #21
 8023070:	d546      	bpl.n	8023100 <__ssprint_r+0xdc>
 8023072:	4629      	mov	r1, r5
 8023074:	4648      	mov	r0, r9
 8023076:	f7ff fadb 	bl	8022630 <_malloc_r>
 802307a:	b998      	cbnz	r0, 80230a4 <__ssprint_r+0x80>
 802307c:	230c      	movs	r3, #12
 802307e:	f8c9 3000 	str.w	r3, [r9]
 8023082:	89a3      	ldrh	r3, [r4, #12]
 8023084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023088:	81a3      	strh	r3, [r4, #12]
 802308a:	2300      	movs	r3, #0
 802308c:	60bb      	str	r3, [r7, #8]
 802308e:	607b      	str	r3, [r7, #4]
 8023090:	f04f 30ff 	mov.w	r0, #4294967295
 8023094:	e031      	b.n	80230fa <__ssprint_r+0xd6>
 8023096:	f8da b000 	ldr.w	fp, [sl]
 802309a:	f8da 6004 	ldr.w	r6, [sl, #4]
 802309e:	f10a 0a08 	add.w	sl, sl, #8
 80230a2:	e7cc      	b.n	802303e <__ssprint_r+0x1a>
 80230a4:	4642      	mov	r2, r8
 80230a6:	6921      	ldr	r1, [r4, #16]
 80230a8:	9001      	str	r0, [sp, #4]
 80230aa:	f7fd fc1f 	bl	80208ec <memcpy>
 80230ae:	89a2      	ldrh	r2, [r4, #12]
 80230b0:	9b01      	ldr	r3, [sp, #4]
 80230b2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80230b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80230ba:	81a2      	strh	r2, [r4, #12]
 80230bc:	6123      	str	r3, [r4, #16]
 80230be:	6165      	str	r5, [r4, #20]
 80230c0:	4443      	add	r3, r8
 80230c2:	eba5 0508 	sub.w	r5, r5, r8
 80230c6:	6023      	str	r3, [r4, #0]
 80230c8:	60a5      	str	r5, [r4, #8]
 80230ca:	4633      	mov	r3, r6
 80230cc:	429e      	cmp	r6, r3
 80230ce:	d200      	bcs.n	80230d2 <__ssprint_r+0xae>
 80230d0:	4633      	mov	r3, r6
 80230d2:	461a      	mov	r2, r3
 80230d4:	4659      	mov	r1, fp
 80230d6:	6820      	ldr	r0, [r4, #0]
 80230d8:	9301      	str	r3, [sp, #4]
 80230da:	f000 f971 	bl	80233c0 <memmove>
 80230de:	68a2      	ldr	r2, [r4, #8]
 80230e0:	9b01      	ldr	r3, [sp, #4]
 80230e2:	1ad2      	subs	r2, r2, r3
 80230e4:	60a2      	str	r2, [r4, #8]
 80230e6:	6822      	ldr	r2, [r4, #0]
 80230e8:	4413      	add	r3, r2
 80230ea:	6023      	str	r3, [r4, #0]
 80230ec:	68bb      	ldr	r3, [r7, #8]
 80230ee:	1b9e      	subs	r6, r3, r6
 80230f0:	60be      	str	r6, [r7, #8]
 80230f2:	2e00      	cmp	r6, #0
 80230f4:	d1cf      	bne.n	8023096 <__ssprint_r+0x72>
 80230f6:	2000      	movs	r0, #0
 80230f8:	6078      	str	r0, [r7, #4]
 80230fa:	b003      	add	sp, #12
 80230fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023100:	462a      	mov	r2, r5
 8023102:	4648      	mov	r0, r9
 8023104:	f000 f976 	bl	80233f4 <_realloc_r>
 8023108:	4603      	mov	r3, r0
 802310a:	2800      	cmp	r0, #0
 802310c:	d1d6      	bne.n	80230bc <__ssprint_r+0x98>
 802310e:	6921      	ldr	r1, [r4, #16]
 8023110:	4648      	mov	r0, r9
 8023112:	f000 f885 	bl	8023220 <_free_r>
 8023116:	e7b1      	b.n	802307c <__ssprint_r+0x58>

08023118 <_calloc_r>:
 8023118:	b510      	push	{r4, lr}
 802311a:	4351      	muls	r1, r2
 802311c:	f7ff fa88 	bl	8022630 <_malloc_r>
 8023120:	4604      	mov	r4, r0
 8023122:	b198      	cbz	r0, 802314c <_calloc_r+0x34>
 8023124:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8023128:	f022 0203 	bic.w	r2, r2, #3
 802312c:	3a04      	subs	r2, #4
 802312e:	2a24      	cmp	r2, #36	; 0x24
 8023130:	d81b      	bhi.n	802316a <_calloc_r+0x52>
 8023132:	2a13      	cmp	r2, #19
 8023134:	d917      	bls.n	8023166 <_calloc_r+0x4e>
 8023136:	2100      	movs	r1, #0
 8023138:	2a1b      	cmp	r2, #27
 802313a:	6001      	str	r1, [r0, #0]
 802313c:	6041      	str	r1, [r0, #4]
 802313e:	d807      	bhi.n	8023150 <_calloc_r+0x38>
 8023140:	f100 0308 	add.w	r3, r0, #8
 8023144:	2200      	movs	r2, #0
 8023146:	601a      	str	r2, [r3, #0]
 8023148:	605a      	str	r2, [r3, #4]
 802314a:	609a      	str	r2, [r3, #8]
 802314c:	4620      	mov	r0, r4
 802314e:	bd10      	pop	{r4, pc}
 8023150:	2a24      	cmp	r2, #36	; 0x24
 8023152:	6081      	str	r1, [r0, #8]
 8023154:	60c1      	str	r1, [r0, #12]
 8023156:	bf11      	iteee	ne
 8023158:	f100 0310 	addne.w	r3, r0, #16
 802315c:	6101      	streq	r1, [r0, #16]
 802315e:	f100 0318 	addeq.w	r3, r0, #24
 8023162:	6141      	streq	r1, [r0, #20]
 8023164:	e7ee      	b.n	8023144 <_calloc_r+0x2c>
 8023166:	4603      	mov	r3, r0
 8023168:	e7ec      	b.n	8023144 <_calloc_r+0x2c>
 802316a:	2100      	movs	r1, #0
 802316c:	f7fd fbc9 	bl	8020902 <memset>
 8023170:	e7ec      	b.n	802314c <_calloc_r+0x34>
	...

08023174 <_malloc_trim_r>:
 8023174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023178:	4f25      	ldr	r7, [pc, #148]	; (8023210 <_malloc_trim_r+0x9c>)
 802317a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 802321c <_malloc_trim_r+0xa8>
 802317e:	4689      	mov	r9, r1
 8023180:	4606      	mov	r6, r0
 8023182:	f7ff fc63 	bl	8022a4c <__malloc_lock>
 8023186:	68bb      	ldr	r3, [r7, #8]
 8023188:	685d      	ldr	r5, [r3, #4]
 802318a:	f1a8 0411 	sub.w	r4, r8, #17
 802318e:	f025 0503 	bic.w	r5, r5, #3
 8023192:	eba4 0409 	sub.w	r4, r4, r9
 8023196:	442c      	add	r4, r5
 8023198:	fbb4 f4f8 	udiv	r4, r4, r8
 802319c:	3c01      	subs	r4, #1
 802319e:	fb08 f404 	mul.w	r4, r8, r4
 80231a2:	4544      	cmp	r4, r8
 80231a4:	da05      	bge.n	80231b2 <_malloc_trim_r+0x3e>
 80231a6:	4630      	mov	r0, r6
 80231a8:	f7ff fc56 	bl	8022a58 <__malloc_unlock>
 80231ac:	2000      	movs	r0, #0
 80231ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231b2:	2100      	movs	r1, #0
 80231b4:	4630      	mov	r0, r6
 80231b6:	f7ff ff25 	bl	8023004 <_sbrk_r>
 80231ba:	68bb      	ldr	r3, [r7, #8]
 80231bc:	442b      	add	r3, r5
 80231be:	4298      	cmp	r0, r3
 80231c0:	d1f1      	bne.n	80231a6 <_malloc_trim_r+0x32>
 80231c2:	4261      	negs	r1, r4
 80231c4:	4630      	mov	r0, r6
 80231c6:	f7ff ff1d 	bl	8023004 <_sbrk_r>
 80231ca:	3001      	adds	r0, #1
 80231cc:	d110      	bne.n	80231f0 <_malloc_trim_r+0x7c>
 80231ce:	2100      	movs	r1, #0
 80231d0:	4630      	mov	r0, r6
 80231d2:	f7ff ff17 	bl	8023004 <_sbrk_r>
 80231d6:	68ba      	ldr	r2, [r7, #8]
 80231d8:	1a83      	subs	r3, r0, r2
 80231da:	2b0f      	cmp	r3, #15
 80231dc:	dde3      	ble.n	80231a6 <_malloc_trim_r+0x32>
 80231de:	490d      	ldr	r1, [pc, #52]	; (8023214 <_malloc_trim_r+0xa0>)
 80231e0:	6809      	ldr	r1, [r1, #0]
 80231e2:	1a40      	subs	r0, r0, r1
 80231e4:	490c      	ldr	r1, [pc, #48]	; (8023218 <_malloc_trim_r+0xa4>)
 80231e6:	f043 0301 	orr.w	r3, r3, #1
 80231ea:	6008      	str	r0, [r1, #0]
 80231ec:	6053      	str	r3, [r2, #4]
 80231ee:	e7da      	b.n	80231a6 <_malloc_trim_r+0x32>
 80231f0:	68bb      	ldr	r3, [r7, #8]
 80231f2:	4a09      	ldr	r2, [pc, #36]	; (8023218 <_malloc_trim_r+0xa4>)
 80231f4:	1b2d      	subs	r5, r5, r4
 80231f6:	f045 0501 	orr.w	r5, r5, #1
 80231fa:	605d      	str	r5, [r3, #4]
 80231fc:	6813      	ldr	r3, [r2, #0]
 80231fe:	4630      	mov	r0, r6
 8023200:	1b1c      	subs	r4, r3, r4
 8023202:	6014      	str	r4, [r2, #0]
 8023204:	f7ff fc28 	bl	8022a58 <__malloc_unlock>
 8023208:	2001      	movs	r0, #1
 802320a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802320e:	bf00      	nop
 8023210:	20001044 	.word	0x20001044
 8023214:	2000144c 	.word	0x2000144c
 8023218:	20090648 	.word	0x20090648
 802321c:	00000080 	.word	0x00000080

08023220 <_free_r>:
 8023220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023224:	4604      	mov	r4, r0
 8023226:	4688      	mov	r8, r1
 8023228:	2900      	cmp	r1, #0
 802322a:	f000 80ab 	beq.w	8023384 <_free_r+0x164>
 802322e:	f7ff fc0d 	bl	8022a4c <__malloc_lock>
 8023232:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8023236:	4d54      	ldr	r5, [pc, #336]	; (8023388 <_free_r+0x168>)
 8023238:	f022 0001 	bic.w	r0, r2, #1
 802323c:	f1a8 0308 	sub.w	r3, r8, #8
 8023240:	181f      	adds	r7, r3, r0
 8023242:	68a9      	ldr	r1, [r5, #8]
 8023244:	687e      	ldr	r6, [r7, #4]
 8023246:	428f      	cmp	r7, r1
 8023248:	f026 0603 	bic.w	r6, r6, #3
 802324c:	f002 0201 	and.w	r2, r2, #1
 8023250:	d11b      	bne.n	802328a <_free_r+0x6a>
 8023252:	4430      	add	r0, r6
 8023254:	b93a      	cbnz	r2, 8023266 <_free_r+0x46>
 8023256:	f858 2c08 	ldr.w	r2, [r8, #-8]
 802325a:	1a9b      	subs	r3, r3, r2
 802325c:	4410      	add	r0, r2
 802325e:	6899      	ldr	r1, [r3, #8]
 8023260:	68da      	ldr	r2, [r3, #12]
 8023262:	60ca      	str	r2, [r1, #12]
 8023264:	6091      	str	r1, [r2, #8]
 8023266:	f040 0201 	orr.w	r2, r0, #1
 802326a:	605a      	str	r2, [r3, #4]
 802326c:	60ab      	str	r3, [r5, #8]
 802326e:	4b47      	ldr	r3, [pc, #284]	; (802338c <_free_r+0x16c>)
 8023270:	681b      	ldr	r3, [r3, #0]
 8023272:	4298      	cmp	r0, r3
 8023274:	d304      	bcc.n	8023280 <_free_r+0x60>
 8023276:	4b46      	ldr	r3, [pc, #280]	; (8023390 <_free_r+0x170>)
 8023278:	4620      	mov	r0, r4
 802327a:	6819      	ldr	r1, [r3, #0]
 802327c:	f7ff ff7a 	bl	8023174 <_malloc_trim_r>
 8023280:	4620      	mov	r0, r4
 8023282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023286:	f7ff bbe7 	b.w	8022a58 <__malloc_unlock>
 802328a:	607e      	str	r6, [r7, #4]
 802328c:	2a00      	cmp	r2, #0
 802328e:	d139      	bne.n	8023304 <_free_r+0xe4>
 8023290:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8023294:	1a5b      	subs	r3, r3, r1
 8023296:	4408      	add	r0, r1
 8023298:	6899      	ldr	r1, [r3, #8]
 802329a:	f105 0e08 	add.w	lr, r5, #8
 802329e:	4571      	cmp	r1, lr
 80232a0:	d032      	beq.n	8023308 <_free_r+0xe8>
 80232a2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80232a6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80232aa:	f8ce 1008 	str.w	r1, [lr, #8]
 80232ae:	19b9      	adds	r1, r7, r6
 80232b0:	6849      	ldr	r1, [r1, #4]
 80232b2:	07c9      	lsls	r1, r1, #31
 80232b4:	d40a      	bmi.n	80232cc <_free_r+0xac>
 80232b6:	4430      	add	r0, r6
 80232b8:	68b9      	ldr	r1, [r7, #8]
 80232ba:	bb3a      	cbnz	r2, 802330c <_free_r+0xec>
 80232bc:	4e35      	ldr	r6, [pc, #212]	; (8023394 <_free_r+0x174>)
 80232be:	42b1      	cmp	r1, r6
 80232c0:	d124      	bne.n	802330c <_free_r+0xec>
 80232c2:	616b      	str	r3, [r5, #20]
 80232c4:	612b      	str	r3, [r5, #16]
 80232c6:	2201      	movs	r2, #1
 80232c8:	60d9      	str	r1, [r3, #12]
 80232ca:	6099      	str	r1, [r3, #8]
 80232cc:	f040 0101 	orr.w	r1, r0, #1
 80232d0:	6059      	str	r1, [r3, #4]
 80232d2:	5018      	str	r0, [r3, r0]
 80232d4:	2a00      	cmp	r2, #0
 80232d6:	d1d3      	bne.n	8023280 <_free_r+0x60>
 80232d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80232dc:	d21a      	bcs.n	8023314 <_free_r+0xf4>
 80232de:	08c0      	lsrs	r0, r0, #3
 80232e0:	1081      	asrs	r1, r0, #2
 80232e2:	2201      	movs	r2, #1
 80232e4:	408a      	lsls	r2, r1
 80232e6:	6869      	ldr	r1, [r5, #4]
 80232e8:	3001      	adds	r0, #1
 80232ea:	430a      	orrs	r2, r1
 80232ec:	606a      	str	r2, [r5, #4]
 80232ee:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80232f2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80232f6:	6099      	str	r1, [r3, #8]
 80232f8:	3a08      	subs	r2, #8
 80232fa:	60da      	str	r2, [r3, #12]
 80232fc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8023300:	60cb      	str	r3, [r1, #12]
 8023302:	e7bd      	b.n	8023280 <_free_r+0x60>
 8023304:	2200      	movs	r2, #0
 8023306:	e7d2      	b.n	80232ae <_free_r+0x8e>
 8023308:	2201      	movs	r2, #1
 802330a:	e7d0      	b.n	80232ae <_free_r+0x8e>
 802330c:	68fe      	ldr	r6, [r7, #12]
 802330e:	60ce      	str	r6, [r1, #12]
 8023310:	60b1      	str	r1, [r6, #8]
 8023312:	e7db      	b.n	80232cc <_free_r+0xac>
 8023314:	0a42      	lsrs	r2, r0, #9
 8023316:	2a04      	cmp	r2, #4
 8023318:	d813      	bhi.n	8023342 <_free_r+0x122>
 802331a:	0982      	lsrs	r2, r0, #6
 802331c:	3238      	adds	r2, #56	; 0x38
 802331e:	1c51      	adds	r1, r2, #1
 8023320:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8023324:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8023328:	428e      	cmp	r6, r1
 802332a:	d124      	bne.n	8023376 <_free_r+0x156>
 802332c:	2001      	movs	r0, #1
 802332e:	1092      	asrs	r2, r2, #2
 8023330:	fa00 f202 	lsl.w	r2, r0, r2
 8023334:	6868      	ldr	r0, [r5, #4]
 8023336:	4302      	orrs	r2, r0
 8023338:	606a      	str	r2, [r5, #4]
 802333a:	60de      	str	r6, [r3, #12]
 802333c:	6099      	str	r1, [r3, #8]
 802333e:	60b3      	str	r3, [r6, #8]
 8023340:	e7de      	b.n	8023300 <_free_r+0xe0>
 8023342:	2a14      	cmp	r2, #20
 8023344:	d801      	bhi.n	802334a <_free_r+0x12a>
 8023346:	325b      	adds	r2, #91	; 0x5b
 8023348:	e7e9      	b.n	802331e <_free_r+0xfe>
 802334a:	2a54      	cmp	r2, #84	; 0x54
 802334c:	d802      	bhi.n	8023354 <_free_r+0x134>
 802334e:	0b02      	lsrs	r2, r0, #12
 8023350:	326e      	adds	r2, #110	; 0x6e
 8023352:	e7e4      	b.n	802331e <_free_r+0xfe>
 8023354:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8023358:	d802      	bhi.n	8023360 <_free_r+0x140>
 802335a:	0bc2      	lsrs	r2, r0, #15
 802335c:	3277      	adds	r2, #119	; 0x77
 802335e:	e7de      	b.n	802331e <_free_r+0xfe>
 8023360:	f240 5154 	movw	r1, #1364	; 0x554
 8023364:	428a      	cmp	r2, r1
 8023366:	bf9a      	itte	ls
 8023368:	0c82      	lsrls	r2, r0, #18
 802336a:	327c      	addls	r2, #124	; 0x7c
 802336c:	227e      	movhi	r2, #126	; 0x7e
 802336e:	e7d6      	b.n	802331e <_free_r+0xfe>
 8023370:	6889      	ldr	r1, [r1, #8]
 8023372:	428e      	cmp	r6, r1
 8023374:	d004      	beq.n	8023380 <_free_r+0x160>
 8023376:	684a      	ldr	r2, [r1, #4]
 8023378:	f022 0203 	bic.w	r2, r2, #3
 802337c:	4290      	cmp	r0, r2
 802337e:	d3f7      	bcc.n	8023370 <_free_r+0x150>
 8023380:	68ce      	ldr	r6, [r1, #12]
 8023382:	e7da      	b.n	802333a <_free_r+0x11a>
 8023384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023388:	20001044 	.word	0x20001044
 802338c:	20001450 	.word	0x20001450
 8023390:	20090678 	.word	0x20090678
 8023394:	2000104c 	.word	0x2000104c

08023398 <__retarget_lock_acquire_recursive>:
 8023398:	4770      	bx	lr

0802339a <__retarget_lock_release_recursive>:
 802339a:	4770      	bx	lr

0802339c <__ascii_mbtowc>:
 802339c:	b082      	sub	sp, #8
 802339e:	b901      	cbnz	r1, 80233a2 <__ascii_mbtowc+0x6>
 80233a0:	a901      	add	r1, sp, #4
 80233a2:	b142      	cbz	r2, 80233b6 <__ascii_mbtowc+0x1a>
 80233a4:	b14b      	cbz	r3, 80233ba <__ascii_mbtowc+0x1e>
 80233a6:	7813      	ldrb	r3, [r2, #0]
 80233a8:	600b      	str	r3, [r1, #0]
 80233aa:	7812      	ldrb	r2, [r2, #0]
 80233ac:	1c10      	adds	r0, r2, #0
 80233ae:	bf18      	it	ne
 80233b0:	2001      	movne	r0, #1
 80233b2:	b002      	add	sp, #8
 80233b4:	4770      	bx	lr
 80233b6:	4610      	mov	r0, r2
 80233b8:	e7fb      	b.n	80233b2 <__ascii_mbtowc+0x16>
 80233ba:	f06f 0001 	mvn.w	r0, #1
 80233be:	e7f8      	b.n	80233b2 <__ascii_mbtowc+0x16>

080233c0 <memmove>:
 80233c0:	4288      	cmp	r0, r1
 80233c2:	b510      	push	{r4, lr}
 80233c4:	eb01 0302 	add.w	r3, r1, r2
 80233c8:	d803      	bhi.n	80233d2 <memmove+0x12>
 80233ca:	1e42      	subs	r2, r0, #1
 80233cc:	4299      	cmp	r1, r3
 80233ce:	d10c      	bne.n	80233ea <memmove+0x2a>
 80233d0:	bd10      	pop	{r4, pc}
 80233d2:	4298      	cmp	r0, r3
 80233d4:	d2f9      	bcs.n	80233ca <memmove+0xa>
 80233d6:	1881      	adds	r1, r0, r2
 80233d8:	1ad2      	subs	r2, r2, r3
 80233da:	42d3      	cmn	r3, r2
 80233dc:	d100      	bne.n	80233e0 <memmove+0x20>
 80233de:	bd10      	pop	{r4, pc}
 80233e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80233e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80233e8:	e7f7      	b.n	80233da <memmove+0x1a>
 80233ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80233ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80233f2:	e7eb      	b.n	80233cc <memmove+0xc>

080233f4 <_realloc_r>:
 80233f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233f8:	4682      	mov	sl, r0
 80233fa:	460c      	mov	r4, r1
 80233fc:	b929      	cbnz	r1, 802340a <_realloc_r+0x16>
 80233fe:	4611      	mov	r1, r2
 8023400:	b003      	add	sp, #12
 8023402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023406:	f7ff b913 	b.w	8022630 <_malloc_r>
 802340a:	9201      	str	r2, [sp, #4]
 802340c:	f7ff fb1e 	bl	8022a4c <__malloc_lock>
 8023410:	9a01      	ldr	r2, [sp, #4]
 8023412:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8023416:	f102 080b 	add.w	r8, r2, #11
 802341a:	f1b8 0f16 	cmp.w	r8, #22
 802341e:	f1a4 0908 	sub.w	r9, r4, #8
 8023422:	f025 0603 	bic.w	r6, r5, #3
 8023426:	d90a      	bls.n	802343e <_realloc_r+0x4a>
 8023428:	f038 0807 	bics.w	r8, r8, #7
 802342c:	d509      	bpl.n	8023442 <_realloc_r+0x4e>
 802342e:	230c      	movs	r3, #12
 8023430:	f8ca 3000 	str.w	r3, [sl]
 8023434:	2700      	movs	r7, #0
 8023436:	4638      	mov	r0, r7
 8023438:	b003      	add	sp, #12
 802343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802343e:	f04f 0810 	mov.w	r8, #16
 8023442:	4590      	cmp	r8, r2
 8023444:	d3f3      	bcc.n	802342e <_realloc_r+0x3a>
 8023446:	45b0      	cmp	r8, r6
 8023448:	f340 8145 	ble.w	80236d6 <_realloc_r+0x2e2>
 802344c:	4ba8      	ldr	r3, [pc, #672]	; (80236f0 <_realloc_r+0x2fc>)
 802344e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8023452:	eb09 0106 	add.w	r1, r9, r6
 8023456:	4571      	cmp	r1, lr
 8023458:	469b      	mov	fp, r3
 802345a:	684b      	ldr	r3, [r1, #4]
 802345c:	d005      	beq.n	802346a <_realloc_r+0x76>
 802345e:	f023 0001 	bic.w	r0, r3, #1
 8023462:	4408      	add	r0, r1
 8023464:	6840      	ldr	r0, [r0, #4]
 8023466:	07c7      	lsls	r7, r0, #31
 8023468:	d447      	bmi.n	80234fa <_realloc_r+0x106>
 802346a:	f023 0303 	bic.w	r3, r3, #3
 802346e:	4571      	cmp	r1, lr
 8023470:	eb06 0703 	add.w	r7, r6, r3
 8023474:	d119      	bne.n	80234aa <_realloc_r+0xb6>
 8023476:	f108 0010 	add.w	r0, r8, #16
 802347a:	4287      	cmp	r7, r0
 802347c:	db3f      	blt.n	80234fe <_realloc_r+0x10a>
 802347e:	eb09 0308 	add.w	r3, r9, r8
 8023482:	eba7 0708 	sub.w	r7, r7, r8
 8023486:	f047 0701 	orr.w	r7, r7, #1
 802348a:	f8cb 3008 	str.w	r3, [fp, #8]
 802348e:	605f      	str	r7, [r3, #4]
 8023490:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023494:	f003 0301 	and.w	r3, r3, #1
 8023498:	ea43 0308 	orr.w	r3, r3, r8
 802349c:	f844 3c04 	str.w	r3, [r4, #-4]
 80234a0:	4650      	mov	r0, sl
 80234a2:	f7ff fad9 	bl	8022a58 <__malloc_unlock>
 80234a6:	4627      	mov	r7, r4
 80234a8:	e7c5      	b.n	8023436 <_realloc_r+0x42>
 80234aa:	45b8      	cmp	r8, r7
 80234ac:	dc27      	bgt.n	80234fe <_realloc_r+0x10a>
 80234ae:	68cb      	ldr	r3, [r1, #12]
 80234b0:	688a      	ldr	r2, [r1, #8]
 80234b2:	60d3      	str	r3, [r2, #12]
 80234b4:	609a      	str	r2, [r3, #8]
 80234b6:	eba7 0008 	sub.w	r0, r7, r8
 80234ba:	280f      	cmp	r0, #15
 80234bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80234c0:	eb09 0207 	add.w	r2, r9, r7
 80234c4:	f240 8109 	bls.w	80236da <_realloc_r+0x2e6>
 80234c8:	eb09 0108 	add.w	r1, r9, r8
 80234cc:	f003 0301 	and.w	r3, r3, #1
 80234d0:	ea43 0308 	orr.w	r3, r3, r8
 80234d4:	f040 0001 	orr.w	r0, r0, #1
 80234d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80234dc:	6048      	str	r0, [r1, #4]
 80234de:	6853      	ldr	r3, [r2, #4]
 80234e0:	f043 0301 	orr.w	r3, r3, #1
 80234e4:	6053      	str	r3, [r2, #4]
 80234e6:	3108      	adds	r1, #8
 80234e8:	4650      	mov	r0, sl
 80234ea:	f7ff fe99 	bl	8023220 <_free_r>
 80234ee:	4650      	mov	r0, sl
 80234f0:	f7ff fab2 	bl	8022a58 <__malloc_unlock>
 80234f4:	f109 0708 	add.w	r7, r9, #8
 80234f8:	e79d      	b.n	8023436 <_realloc_r+0x42>
 80234fa:	2300      	movs	r3, #0
 80234fc:	4619      	mov	r1, r3
 80234fe:	07e8      	lsls	r0, r5, #31
 8023500:	f100 8084 	bmi.w	802360c <_realloc_r+0x218>
 8023504:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8023508:	eba9 0505 	sub.w	r5, r9, r5
 802350c:	6868      	ldr	r0, [r5, #4]
 802350e:	f020 0003 	bic.w	r0, r0, #3
 8023512:	4430      	add	r0, r6
 8023514:	2900      	cmp	r1, #0
 8023516:	d076      	beq.n	8023606 <_realloc_r+0x212>
 8023518:	4571      	cmp	r1, lr
 802351a:	d150      	bne.n	80235be <_realloc_r+0x1ca>
 802351c:	4403      	add	r3, r0
 802351e:	f108 0110 	add.w	r1, r8, #16
 8023522:	428b      	cmp	r3, r1
 8023524:	db6f      	blt.n	8023606 <_realloc_r+0x212>
 8023526:	462f      	mov	r7, r5
 8023528:	68ea      	ldr	r2, [r5, #12]
 802352a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 802352e:	60ca      	str	r2, [r1, #12]
 8023530:	6091      	str	r1, [r2, #8]
 8023532:	1f32      	subs	r2, r6, #4
 8023534:	2a24      	cmp	r2, #36	; 0x24
 8023536:	d83b      	bhi.n	80235b0 <_realloc_r+0x1bc>
 8023538:	2a13      	cmp	r2, #19
 802353a:	d936      	bls.n	80235aa <_realloc_r+0x1b6>
 802353c:	6821      	ldr	r1, [r4, #0]
 802353e:	60a9      	str	r1, [r5, #8]
 8023540:	6861      	ldr	r1, [r4, #4]
 8023542:	60e9      	str	r1, [r5, #12]
 8023544:	2a1b      	cmp	r2, #27
 8023546:	d81c      	bhi.n	8023582 <_realloc_r+0x18e>
 8023548:	f105 0210 	add.w	r2, r5, #16
 802354c:	f104 0108 	add.w	r1, r4, #8
 8023550:	6808      	ldr	r0, [r1, #0]
 8023552:	6010      	str	r0, [r2, #0]
 8023554:	6848      	ldr	r0, [r1, #4]
 8023556:	6050      	str	r0, [r2, #4]
 8023558:	6889      	ldr	r1, [r1, #8]
 802355a:	6091      	str	r1, [r2, #8]
 802355c:	eb05 0208 	add.w	r2, r5, r8
 8023560:	eba3 0308 	sub.w	r3, r3, r8
 8023564:	f043 0301 	orr.w	r3, r3, #1
 8023568:	f8cb 2008 	str.w	r2, [fp, #8]
 802356c:	6053      	str	r3, [r2, #4]
 802356e:	686b      	ldr	r3, [r5, #4]
 8023570:	f003 0301 	and.w	r3, r3, #1
 8023574:	ea43 0308 	orr.w	r3, r3, r8
 8023578:	606b      	str	r3, [r5, #4]
 802357a:	4650      	mov	r0, sl
 802357c:	f7ff fa6c 	bl	8022a58 <__malloc_unlock>
 8023580:	e759      	b.n	8023436 <_realloc_r+0x42>
 8023582:	68a1      	ldr	r1, [r4, #8]
 8023584:	6129      	str	r1, [r5, #16]
 8023586:	68e1      	ldr	r1, [r4, #12]
 8023588:	6169      	str	r1, [r5, #20]
 802358a:	2a24      	cmp	r2, #36	; 0x24
 802358c:	bf01      	itttt	eq
 802358e:	6922      	ldreq	r2, [r4, #16]
 8023590:	61aa      	streq	r2, [r5, #24]
 8023592:	6960      	ldreq	r0, [r4, #20]
 8023594:	61e8      	streq	r0, [r5, #28]
 8023596:	bf19      	ittee	ne
 8023598:	f105 0218 	addne.w	r2, r5, #24
 802359c:	f104 0110 	addne.w	r1, r4, #16
 80235a0:	f105 0220 	addeq.w	r2, r5, #32
 80235a4:	f104 0118 	addeq.w	r1, r4, #24
 80235a8:	e7d2      	b.n	8023550 <_realloc_r+0x15c>
 80235aa:	463a      	mov	r2, r7
 80235ac:	4621      	mov	r1, r4
 80235ae:	e7cf      	b.n	8023550 <_realloc_r+0x15c>
 80235b0:	4621      	mov	r1, r4
 80235b2:	4638      	mov	r0, r7
 80235b4:	9301      	str	r3, [sp, #4]
 80235b6:	f7ff ff03 	bl	80233c0 <memmove>
 80235ba:	9b01      	ldr	r3, [sp, #4]
 80235bc:	e7ce      	b.n	802355c <_realloc_r+0x168>
 80235be:	18c7      	adds	r7, r0, r3
 80235c0:	45b8      	cmp	r8, r7
 80235c2:	dc20      	bgt.n	8023606 <_realloc_r+0x212>
 80235c4:	68cb      	ldr	r3, [r1, #12]
 80235c6:	688a      	ldr	r2, [r1, #8]
 80235c8:	60d3      	str	r3, [r2, #12]
 80235ca:	609a      	str	r2, [r3, #8]
 80235cc:	4628      	mov	r0, r5
 80235ce:	68eb      	ldr	r3, [r5, #12]
 80235d0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80235d4:	60d3      	str	r3, [r2, #12]
 80235d6:	609a      	str	r2, [r3, #8]
 80235d8:	1f32      	subs	r2, r6, #4
 80235da:	2a24      	cmp	r2, #36	; 0x24
 80235dc:	d842      	bhi.n	8023664 <_realloc_r+0x270>
 80235de:	2a13      	cmp	r2, #19
 80235e0:	d93e      	bls.n	8023660 <_realloc_r+0x26c>
 80235e2:	6823      	ldr	r3, [r4, #0]
 80235e4:	60ab      	str	r3, [r5, #8]
 80235e6:	6863      	ldr	r3, [r4, #4]
 80235e8:	60eb      	str	r3, [r5, #12]
 80235ea:	2a1b      	cmp	r2, #27
 80235ec:	d824      	bhi.n	8023638 <_realloc_r+0x244>
 80235ee:	f105 0010 	add.w	r0, r5, #16
 80235f2:	f104 0308 	add.w	r3, r4, #8
 80235f6:	681a      	ldr	r2, [r3, #0]
 80235f8:	6002      	str	r2, [r0, #0]
 80235fa:	685a      	ldr	r2, [r3, #4]
 80235fc:	6042      	str	r2, [r0, #4]
 80235fe:	689b      	ldr	r3, [r3, #8]
 8023600:	6083      	str	r3, [r0, #8]
 8023602:	46a9      	mov	r9, r5
 8023604:	e757      	b.n	80234b6 <_realloc_r+0xc2>
 8023606:	4580      	cmp	r8, r0
 8023608:	4607      	mov	r7, r0
 802360a:	dddf      	ble.n	80235cc <_realloc_r+0x1d8>
 802360c:	4611      	mov	r1, r2
 802360e:	4650      	mov	r0, sl
 8023610:	f7ff f80e 	bl	8022630 <_malloc_r>
 8023614:	4607      	mov	r7, r0
 8023616:	2800      	cmp	r0, #0
 8023618:	d0af      	beq.n	802357a <_realloc_r+0x186>
 802361a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802361e:	f023 0301 	bic.w	r3, r3, #1
 8023622:	f1a0 0208 	sub.w	r2, r0, #8
 8023626:	444b      	add	r3, r9
 8023628:	429a      	cmp	r2, r3
 802362a:	d11f      	bne.n	802366c <_realloc_r+0x278>
 802362c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8023630:	f027 0703 	bic.w	r7, r7, #3
 8023634:	4437      	add	r7, r6
 8023636:	e73e      	b.n	80234b6 <_realloc_r+0xc2>
 8023638:	68a3      	ldr	r3, [r4, #8]
 802363a:	612b      	str	r3, [r5, #16]
 802363c:	68e3      	ldr	r3, [r4, #12]
 802363e:	616b      	str	r3, [r5, #20]
 8023640:	2a24      	cmp	r2, #36	; 0x24
 8023642:	bf01      	itttt	eq
 8023644:	6923      	ldreq	r3, [r4, #16]
 8023646:	61ab      	streq	r3, [r5, #24]
 8023648:	6962      	ldreq	r2, [r4, #20]
 802364a:	61ea      	streq	r2, [r5, #28]
 802364c:	bf19      	ittee	ne
 802364e:	f105 0018 	addne.w	r0, r5, #24
 8023652:	f104 0310 	addne.w	r3, r4, #16
 8023656:	f105 0020 	addeq.w	r0, r5, #32
 802365a:	f104 0318 	addeq.w	r3, r4, #24
 802365e:	e7ca      	b.n	80235f6 <_realloc_r+0x202>
 8023660:	4623      	mov	r3, r4
 8023662:	e7c8      	b.n	80235f6 <_realloc_r+0x202>
 8023664:	4621      	mov	r1, r4
 8023666:	f7ff feab 	bl	80233c0 <memmove>
 802366a:	e7ca      	b.n	8023602 <_realloc_r+0x20e>
 802366c:	1f32      	subs	r2, r6, #4
 802366e:	2a24      	cmp	r2, #36	; 0x24
 8023670:	d82d      	bhi.n	80236ce <_realloc_r+0x2da>
 8023672:	2a13      	cmp	r2, #19
 8023674:	d928      	bls.n	80236c8 <_realloc_r+0x2d4>
 8023676:	6823      	ldr	r3, [r4, #0]
 8023678:	6003      	str	r3, [r0, #0]
 802367a:	6863      	ldr	r3, [r4, #4]
 802367c:	6043      	str	r3, [r0, #4]
 802367e:	2a1b      	cmp	r2, #27
 8023680:	d80e      	bhi.n	80236a0 <_realloc_r+0x2ac>
 8023682:	f100 0308 	add.w	r3, r0, #8
 8023686:	f104 0208 	add.w	r2, r4, #8
 802368a:	6811      	ldr	r1, [r2, #0]
 802368c:	6019      	str	r1, [r3, #0]
 802368e:	6851      	ldr	r1, [r2, #4]
 8023690:	6059      	str	r1, [r3, #4]
 8023692:	6892      	ldr	r2, [r2, #8]
 8023694:	609a      	str	r2, [r3, #8]
 8023696:	4621      	mov	r1, r4
 8023698:	4650      	mov	r0, sl
 802369a:	f7ff fdc1 	bl	8023220 <_free_r>
 802369e:	e76c      	b.n	802357a <_realloc_r+0x186>
 80236a0:	68a3      	ldr	r3, [r4, #8]
 80236a2:	6083      	str	r3, [r0, #8]
 80236a4:	68e3      	ldr	r3, [r4, #12]
 80236a6:	60c3      	str	r3, [r0, #12]
 80236a8:	2a24      	cmp	r2, #36	; 0x24
 80236aa:	bf01      	itttt	eq
 80236ac:	6923      	ldreq	r3, [r4, #16]
 80236ae:	6103      	streq	r3, [r0, #16]
 80236b0:	6961      	ldreq	r1, [r4, #20]
 80236b2:	6141      	streq	r1, [r0, #20]
 80236b4:	bf19      	ittee	ne
 80236b6:	f100 0310 	addne.w	r3, r0, #16
 80236ba:	f104 0210 	addne.w	r2, r4, #16
 80236be:	f100 0318 	addeq.w	r3, r0, #24
 80236c2:	f104 0218 	addeq.w	r2, r4, #24
 80236c6:	e7e0      	b.n	802368a <_realloc_r+0x296>
 80236c8:	4603      	mov	r3, r0
 80236ca:	4622      	mov	r2, r4
 80236cc:	e7dd      	b.n	802368a <_realloc_r+0x296>
 80236ce:	4621      	mov	r1, r4
 80236d0:	f7ff fe76 	bl	80233c0 <memmove>
 80236d4:	e7df      	b.n	8023696 <_realloc_r+0x2a2>
 80236d6:	4637      	mov	r7, r6
 80236d8:	e6ed      	b.n	80234b6 <_realloc_r+0xc2>
 80236da:	f003 0301 	and.w	r3, r3, #1
 80236de:	431f      	orrs	r7, r3
 80236e0:	f8c9 7004 	str.w	r7, [r9, #4]
 80236e4:	6853      	ldr	r3, [r2, #4]
 80236e6:	f043 0301 	orr.w	r3, r3, #1
 80236ea:	6053      	str	r3, [r2, #4]
 80236ec:	e6ff      	b.n	80234ee <_realloc_r+0xfa>
 80236ee:	bf00      	nop
 80236f0:	20001044 	.word	0x20001044

080236f4 <__ascii_wctomb>:
 80236f4:	b149      	cbz	r1, 802370a <__ascii_wctomb+0x16>
 80236f6:	2aff      	cmp	r2, #255	; 0xff
 80236f8:	bf85      	ittet	hi
 80236fa:	238a      	movhi	r3, #138	; 0x8a
 80236fc:	6003      	strhi	r3, [r0, #0]
 80236fe:	700a      	strbls	r2, [r1, #0]
 8023700:	f04f 30ff 	movhi.w	r0, #4294967295
 8023704:	bf98      	it	ls
 8023706:	2001      	movls	r0, #1
 8023708:	4770      	bx	lr
 802370a:	4608      	mov	r0, r1
 802370c:	4770      	bx	lr
	...

08023710 <cbrt>:
 8023710:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023714:	ec51 0b10 	vmov	r0, r1, d0
 8023718:	4a59      	ldr	r2, [pc, #356]	; (8023880 <cbrt+0x170>)
 802371a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802371e:	4293      	cmp	r3, r2
 8023720:	468a      	mov	sl, r1
 8023722:	ee10 2a10 	vmov	r2, s0
 8023726:	d907      	bls.n	8023738 <cbrt+0x28>
 8023728:	460b      	mov	r3, r1
 802372a:	f7dc fdc7 	bl	80002bc <__adddf3>
 802372e:	ec41 0b10 	vmov	d0, r0, r1
 8023732:	b002      	add	sp, #8
 8023734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023738:	431a      	orrs	r2, r3
 802373a:	d0f8      	beq.n	802372e <cbrt+0x1e>
 802373c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023740:	4619      	mov	r1, r3
 8023742:	4606      	mov	r6, r0
 8023744:	461f      	mov	r7, r3
 8023746:	d27c      	bcs.n	8023842 <cbrt+0x132>
 8023748:	2200      	movs	r2, #0
 802374a:	4b4e      	ldr	r3, [pc, #312]	; (8023884 <cbrt+0x174>)
 802374c:	f7dc ff68 	bl	8000620 <__aeabi_dmul>
 8023750:	2203      	movs	r2, #3
 8023752:	fbb1 f3f2 	udiv	r3, r1, r2
 8023756:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 802375a:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 802375e:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 8023762:	4604      	mov	r4, r0
 8023764:	3513      	adds	r5, #19
 8023766:	4622      	mov	r2, r4
 8023768:	462b      	mov	r3, r5
 802376a:	4620      	mov	r0, r4
 802376c:	4629      	mov	r1, r5
 802376e:	f7dc ff57 	bl	8000620 <__aeabi_dmul>
 8023772:	4632      	mov	r2, r6
 8023774:	463b      	mov	r3, r7
 8023776:	f7dd f87d 	bl	8000874 <__aeabi_ddiv>
 802377a:	4622      	mov	r2, r4
 802377c:	462b      	mov	r3, r5
 802377e:	f7dc ff4f 	bl	8000620 <__aeabi_dmul>
 8023782:	a335      	add	r3, pc, #212	; (adr r3, 8023858 <cbrt+0x148>)
 8023784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023788:	f7dc fd98 	bl	80002bc <__adddf3>
 802378c:	a334      	add	r3, pc, #208	; (adr r3, 8023860 <cbrt+0x150>)
 802378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023792:	e9cd 0100 	strd	r0, r1, [sp]
 8023796:	f7dc fd91 	bl	80002bc <__adddf3>
 802379a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802379e:	4680      	mov	r8, r0
 80237a0:	4689      	mov	r9, r1
 80237a2:	a131      	add	r1, pc, #196	; (adr r1, 8023868 <cbrt+0x158>)
 80237a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80237a8:	f7dd f864 	bl	8000874 <__aeabi_ddiv>
 80237ac:	4602      	mov	r2, r0
 80237ae:	460b      	mov	r3, r1
 80237b0:	4640      	mov	r0, r8
 80237b2:	4649      	mov	r1, r9
 80237b4:	f7dc fd82 	bl	80002bc <__adddf3>
 80237b8:	4602      	mov	r2, r0
 80237ba:	460b      	mov	r3, r1
 80237bc:	a12c      	add	r1, pc, #176	; (adr r1, 8023870 <cbrt+0x160>)
 80237be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80237c2:	f7dd f857 	bl	8000874 <__aeabi_ddiv>
 80237c6:	a32c      	add	r3, pc, #176	; (adr r3, 8023878 <cbrt+0x168>)
 80237c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237cc:	f7dc fd76 	bl	80002bc <__adddf3>
 80237d0:	4622      	mov	r2, r4
 80237d2:	462b      	mov	r3, r5
 80237d4:	f7dc ff24 	bl	8000620 <__aeabi_dmul>
 80237d8:	2400      	movs	r4, #0
 80237da:	1c4d      	adds	r5, r1, #1
 80237dc:	4622      	mov	r2, r4
 80237de:	462b      	mov	r3, r5
 80237e0:	4620      	mov	r0, r4
 80237e2:	4629      	mov	r1, r5
 80237e4:	f7dc ff1c 	bl	8000620 <__aeabi_dmul>
 80237e8:	4602      	mov	r2, r0
 80237ea:	460b      	mov	r3, r1
 80237ec:	4630      	mov	r0, r6
 80237ee:	4639      	mov	r1, r7
 80237f0:	f7dd f840 	bl	8000874 <__aeabi_ddiv>
 80237f4:	4622      	mov	r2, r4
 80237f6:	462b      	mov	r3, r5
 80237f8:	4680      	mov	r8, r0
 80237fa:	4689      	mov	r9, r1
 80237fc:	f7dc fd5c 	bl	80002b8 <__aeabi_dsub>
 8023800:	4622      	mov	r2, r4
 8023802:	4606      	mov	r6, r0
 8023804:	460f      	mov	r7, r1
 8023806:	462b      	mov	r3, r5
 8023808:	4620      	mov	r0, r4
 802380a:	4629      	mov	r1, r5
 802380c:	f7dc fd56 	bl	80002bc <__adddf3>
 8023810:	4642      	mov	r2, r8
 8023812:	464b      	mov	r3, r9
 8023814:	f7dc fd52 	bl	80002bc <__adddf3>
 8023818:	4602      	mov	r2, r0
 802381a:	460b      	mov	r3, r1
 802381c:	4630      	mov	r0, r6
 802381e:	4639      	mov	r1, r7
 8023820:	f7dd f828 	bl	8000874 <__aeabi_ddiv>
 8023824:	4622      	mov	r2, r4
 8023826:	462b      	mov	r3, r5
 8023828:	f7dc fefa 	bl	8000620 <__aeabi_dmul>
 802382c:	4602      	mov	r2, r0
 802382e:	460b      	mov	r3, r1
 8023830:	4620      	mov	r0, r4
 8023832:	4629      	mov	r1, r5
 8023834:	f7dc fd42 	bl	80002bc <__adddf3>
 8023838:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 802383c:	ea4a 0101 	orr.w	r1, sl, r1
 8023840:	e775      	b.n	802372e <cbrt+0x1e>
 8023842:	2203      	movs	r2, #3
 8023844:	fb93 f3f2 	sdiv	r3, r3, r2
 8023848:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 802384c:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 8023850:	2400      	movs	r4, #0
 8023852:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 8023856:	e786      	b.n	8023766 <cbrt+0x56>
 8023858:	f15f15f1 	.word	0xf15f15f1
 802385c:	3fe15f15 	.word	0x3fe15f15
 8023860:	0ea0ea0f 	.word	0x0ea0ea0f
 8023864:	3ff6a0ea 	.word	0x3ff6a0ea
 8023868:	2532c834 	.word	0x2532c834
 802386c:	bfe691de 	.word	0xbfe691de
 8023870:	6db6db6e 	.word	0x6db6db6e
 8023874:	3ff9b6db 	.word	0x3ff9b6db
 8023878:	b6db6db7 	.word	0xb6db6db7
 802387c:	3fd6db6d 	.word	0x3fd6db6d
 8023880:	7fefffff 	.word	0x7fefffff
 8023884:	43500000 	.word	0x43500000

08023888 <floor>:
 8023888:	ec51 0b10 	vmov	r0, r1, d0
 802388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023890:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023894:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023898:	2e13      	cmp	r6, #19
 802389a:	ee10 8a10 	vmov	r8, s0
 802389e:	460c      	mov	r4, r1
 80238a0:	ee10 5a10 	vmov	r5, s0
 80238a4:	dc35      	bgt.n	8023912 <floor+0x8a>
 80238a6:	2e00      	cmp	r6, #0
 80238a8:	da17      	bge.n	80238da <floor+0x52>
 80238aa:	a335      	add	r3, pc, #212	; (adr r3, 8023980 <floor+0xf8>)
 80238ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238b0:	f7dc fd04 	bl	80002bc <__adddf3>
 80238b4:	2200      	movs	r2, #0
 80238b6:	2300      	movs	r3, #0
 80238b8:	f7dd f942 	bl	8000b40 <__aeabi_dcmpgt>
 80238bc:	b150      	cbz	r0, 80238d4 <floor+0x4c>
 80238be:	2c00      	cmp	r4, #0
 80238c0:	da5a      	bge.n	8023978 <floor+0xf0>
 80238c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80238c6:	ea53 0308 	orrs.w	r3, r3, r8
 80238ca:	4b2f      	ldr	r3, [pc, #188]	; (8023988 <floor+0x100>)
 80238cc:	f04f 0500 	mov.w	r5, #0
 80238d0:	bf18      	it	ne
 80238d2:	461c      	movne	r4, r3
 80238d4:	4621      	mov	r1, r4
 80238d6:	4628      	mov	r0, r5
 80238d8:	e025      	b.n	8023926 <floor+0x9e>
 80238da:	4f2c      	ldr	r7, [pc, #176]	; (802398c <floor+0x104>)
 80238dc:	4137      	asrs	r7, r6
 80238de:	ea01 0307 	and.w	r3, r1, r7
 80238e2:	4303      	orrs	r3, r0
 80238e4:	d01f      	beq.n	8023926 <floor+0x9e>
 80238e6:	a326      	add	r3, pc, #152	; (adr r3, 8023980 <floor+0xf8>)
 80238e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238ec:	f7dc fce6 	bl	80002bc <__adddf3>
 80238f0:	2200      	movs	r2, #0
 80238f2:	2300      	movs	r3, #0
 80238f4:	f7dd f924 	bl	8000b40 <__aeabi_dcmpgt>
 80238f8:	2800      	cmp	r0, #0
 80238fa:	d0eb      	beq.n	80238d4 <floor+0x4c>
 80238fc:	2c00      	cmp	r4, #0
 80238fe:	bfbe      	ittt	lt
 8023900:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8023904:	fa43 f606 	asrlt.w	r6, r3, r6
 8023908:	19a4      	addlt	r4, r4, r6
 802390a:	ea24 0407 	bic.w	r4, r4, r7
 802390e:	2500      	movs	r5, #0
 8023910:	e7e0      	b.n	80238d4 <floor+0x4c>
 8023912:	2e33      	cmp	r6, #51	; 0x33
 8023914:	dd0b      	ble.n	802392e <floor+0xa6>
 8023916:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802391a:	d104      	bne.n	8023926 <floor+0x9e>
 802391c:	ee10 2a10 	vmov	r2, s0
 8023920:	460b      	mov	r3, r1
 8023922:	f7dc fccb 	bl	80002bc <__adddf3>
 8023926:	ec41 0b10 	vmov	d0, r0, r1
 802392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802392e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023932:	f04f 33ff 	mov.w	r3, #4294967295
 8023936:	fa23 f707 	lsr.w	r7, r3, r7
 802393a:	4238      	tst	r0, r7
 802393c:	d0f3      	beq.n	8023926 <floor+0x9e>
 802393e:	a310      	add	r3, pc, #64	; (adr r3, 8023980 <floor+0xf8>)
 8023940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023944:	f7dc fcba 	bl	80002bc <__adddf3>
 8023948:	2200      	movs	r2, #0
 802394a:	2300      	movs	r3, #0
 802394c:	f7dd f8f8 	bl	8000b40 <__aeabi_dcmpgt>
 8023950:	2800      	cmp	r0, #0
 8023952:	d0bf      	beq.n	80238d4 <floor+0x4c>
 8023954:	2c00      	cmp	r4, #0
 8023956:	da02      	bge.n	802395e <floor+0xd6>
 8023958:	2e14      	cmp	r6, #20
 802395a:	d103      	bne.n	8023964 <floor+0xdc>
 802395c:	3401      	adds	r4, #1
 802395e:	ea25 0507 	bic.w	r5, r5, r7
 8023962:	e7b7      	b.n	80238d4 <floor+0x4c>
 8023964:	2301      	movs	r3, #1
 8023966:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802396a:	fa03 f606 	lsl.w	r6, r3, r6
 802396e:	4435      	add	r5, r6
 8023970:	45a8      	cmp	r8, r5
 8023972:	bf88      	it	hi
 8023974:	18e4      	addhi	r4, r4, r3
 8023976:	e7f2      	b.n	802395e <floor+0xd6>
 8023978:	2500      	movs	r5, #0
 802397a:	462c      	mov	r4, r5
 802397c:	e7aa      	b.n	80238d4 <floor+0x4c>
 802397e:	bf00      	nop
 8023980:	8800759c 	.word	0x8800759c
 8023984:	7e37e43c 	.word	0x7e37e43c
 8023988:	bff00000 	.word	0xbff00000
 802398c:	000fffff 	.word	0x000fffff

08023990 <exp>:
 8023990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023992:	ed2d 8b02 	vpush	{d8}
 8023996:	4e38      	ldr	r6, [pc, #224]	; (8023a78 <exp+0xe8>)
 8023998:	b08b      	sub	sp, #44	; 0x2c
 802399a:	ec55 4b10 	vmov	r4, r5, d0
 802399e:	f000 fb17 	bl	8023fd0 <__ieee754_exp>
 80239a2:	f996 3000 	ldrsb.w	r3, [r6]
 80239a6:	eeb0 8a40 	vmov.f32	s16, s0
 80239aa:	eef0 8a60 	vmov.f32	s17, s1
 80239ae:	3301      	adds	r3, #1
 80239b0:	d02c      	beq.n	8023a0c <exp+0x7c>
 80239b2:	ec45 4b10 	vmov	d0, r4, r5
 80239b6:	f001 fc67 	bl	8025288 <finite>
 80239ba:	b338      	cbz	r0, 8023a0c <exp+0x7c>
 80239bc:	a32a      	add	r3, pc, #168	; (adr r3, 8023a68 <exp+0xd8>)
 80239be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239c2:	4620      	mov	r0, r4
 80239c4:	4629      	mov	r1, r5
 80239c6:	f7dd f8bb 	bl	8000b40 <__aeabi_dcmpgt>
 80239ca:	4607      	mov	r7, r0
 80239cc:	2800      	cmp	r0, #0
 80239ce:	d030      	beq.n	8023a32 <exp+0xa2>
 80239d0:	2303      	movs	r3, #3
 80239d2:	9300      	str	r3, [sp, #0]
 80239d4:	4b29      	ldr	r3, [pc, #164]	; (8023a7c <exp+0xec>)
 80239d6:	9301      	str	r3, [sp, #4]
 80239d8:	2300      	movs	r3, #0
 80239da:	9308      	str	r3, [sp, #32]
 80239dc:	f996 3000 	ldrsb.w	r3, [r6]
 80239e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80239e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80239e8:	b9c3      	cbnz	r3, 8023a1c <exp+0x8c>
 80239ea:	4b25      	ldr	r3, [pc, #148]	; (8023a80 <exp+0xf0>)
 80239ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80239f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80239f4:	4668      	mov	r0, sp
 80239f6:	f001 fc4f 	bl	8025298 <matherr>
 80239fa:	b1a8      	cbz	r0, 8023a28 <exp+0x98>
 80239fc:	9b08      	ldr	r3, [sp, #32]
 80239fe:	b11b      	cbz	r3, 8023a08 <exp+0x78>
 8023a00:	f7fc ff4a 	bl	8020898 <__errno>
 8023a04:	9b08      	ldr	r3, [sp, #32]
 8023a06:	6003      	str	r3, [r0, #0]
 8023a08:	ed9d 8b06 	vldr	d8, [sp, #24]
 8023a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8023a10:	eef0 0a68 	vmov.f32	s1, s17
 8023a14:	b00b      	add	sp, #44	; 0x2c
 8023a16:	ecbd 8b02 	vpop	{d8}
 8023a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a1c:	4919      	ldr	r1, [pc, #100]	; (8023a84 <exp+0xf4>)
 8023a1e:	2000      	movs	r0, #0
 8023a20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023a24:	2b02      	cmp	r3, #2
 8023a26:	d1e5      	bne.n	80239f4 <exp+0x64>
 8023a28:	f7fc ff36 	bl	8020898 <__errno>
 8023a2c:	2322      	movs	r3, #34	; 0x22
 8023a2e:	6003      	str	r3, [r0, #0]
 8023a30:	e7e4      	b.n	80239fc <exp+0x6c>
 8023a32:	a30f      	add	r3, pc, #60	; (adr r3, 8023a70 <exp+0xe0>)
 8023a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a38:	4620      	mov	r0, r4
 8023a3a:	4629      	mov	r1, r5
 8023a3c:	f7dd f862 	bl	8000b04 <__aeabi_dcmplt>
 8023a40:	2800      	cmp	r0, #0
 8023a42:	d0e3      	beq.n	8023a0c <exp+0x7c>
 8023a44:	2304      	movs	r3, #4
 8023a46:	9300      	str	r3, [sp, #0]
 8023a48:	4b0c      	ldr	r3, [pc, #48]	; (8023a7c <exp+0xec>)
 8023a4a:	9301      	str	r3, [sp, #4]
 8023a4c:	2200      	movs	r2, #0
 8023a4e:	2300      	movs	r3, #0
 8023a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023a54:	9708      	str	r7, [sp, #32]
 8023a56:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8023a5a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8023a5e:	f996 3000 	ldrsb.w	r3, [r6]
 8023a62:	e7df      	b.n	8023a24 <exp+0x94>
 8023a64:	f3af 8000 	nop.w
 8023a68:	fefa39ef 	.word	0xfefa39ef
 8023a6c:	40862e42 	.word	0x40862e42
 8023a70:	d52d3051 	.word	0xd52d3051
 8023a74:	c0874910 	.word	0xc0874910
 8023a78:	200015c0 	.word	0x200015c0
 8023a7c:	080327ad 	.word	0x080327ad
 8023a80:	47efffff 	.word	0x47efffff
 8023a84:	7ff00000 	.word	0x7ff00000

08023a88 <log>:
 8023a88:	b570      	push	{r4, r5, r6, lr}
 8023a8a:	ed2d 8b02 	vpush	{d8}
 8023a8e:	b08a      	sub	sp, #40	; 0x28
 8023a90:	ec55 4b10 	vmov	r4, r5, d0
 8023a94:	f000 fc10 	bl	80242b8 <__ieee754_log>
 8023a98:	4b36      	ldr	r3, [pc, #216]	; (8023b74 <log+0xec>)
 8023a9a:	eeb0 8a40 	vmov.f32	s16, s0
 8023a9e:	eef0 8a60 	vmov.f32	s17, s1
 8023aa2:	f993 6000 	ldrsb.w	r6, [r3]
 8023aa6:	1c73      	adds	r3, r6, #1
 8023aa8:	d05b      	beq.n	8023b62 <log+0xda>
 8023aaa:	4622      	mov	r2, r4
 8023aac:	462b      	mov	r3, r5
 8023aae:	4620      	mov	r0, r4
 8023ab0:	4629      	mov	r1, r5
 8023ab2:	f7dd f84f 	bl	8000b54 <__aeabi_dcmpun>
 8023ab6:	2800      	cmp	r0, #0
 8023ab8:	d153      	bne.n	8023b62 <log+0xda>
 8023aba:	2200      	movs	r2, #0
 8023abc:	2300      	movs	r3, #0
 8023abe:	4620      	mov	r0, r4
 8023ac0:	4629      	mov	r1, r5
 8023ac2:	f7dd f83d 	bl	8000b40 <__aeabi_dcmpgt>
 8023ac6:	2800      	cmp	r0, #0
 8023ac8:	d14b      	bne.n	8023b62 <log+0xda>
 8023aca:	4b2b      	ldr	r3, [pc, #172]	; (8023b78 <log+0xf0>)
 8023acc:	9301      	str	r3, [sp, #4]
 8023ace:	9008      	str	r0, [sp, #32]
 8023ad0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8023ad4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8023ad8:	b9a6      	cbnz	r6, 8023b04 <log+0x7c>
 8023ada:	4b28      	ldr	r3, [pc, #160]	; (8023b7c <log+0xf4>)
 8023adc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023ae0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023ae4:	4620      	mov	r0, r4
 8023ae6:	2200      	movs	r2, #0
 8023ae8:	2300      	movs	r3, #0
 8023aea:	4629      	mov	r1, r5
 8023aec:	f7dd f800 	bl	8000af0 <__aeabi_dcmpeq>
 8023af0:	bb40      	cbnz	r0, 8023b44 <log+0xbc>
 8023af2:	2301      	movs	r3, #1
 8023af4:	2e02      	cmp	r6, #2
 8023af6:	9300      	str	r3, [sp, #0]
 8023af8:	d119      	bne.n	8023b2e <log+0xa6>
 8023afa:	f7fc fecd 	bl	8020898 <__errno>
 8023afe:	2321      	movs	r3, #33	; 0x21
 8023b00:	6003      	str	r3, [r0, #0]
 8023b02:	e019      	b.n	8023b38 <log+0xb0>
 8023b04:	4b1e      	ldr	r3, [pc, #120]	; (8023b80 <log+0xf8>)
 8023b06:	2200      	movs	r2, #0
 8023b08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023b0c:	4620      	mov	r0, r4
 8023b0e:	2200      	movs	r2, #0
 8023b10:	2300      	movs	r3, #0
 8023b12:	4629      	mov	r1, r5
 8023b14:	f7dc ffec 	bl	8000af0 <__aeabi_dcmpeq>
 8023b18:	2800      	cmp	r0, #0
 8023b1a:	d0ea      	beq.n	8023af2 <log+0x6a>
 8023b1c:	2302      	movs	r3, #2
 8023b1e:	429e      	cmp	r6, r3
 8023b20:	9300      	str	r3, [sp, #0]
 8023b22:	d111      	bne.n	8023b48 <log+0xc0>
 8023b24:	f7fc feb8 	bl	8020898 <__errno>
 8023b28:	2322      	movs	r3, #34	; 0x22
 8023b2a:	6003      	str	r3, [r0, #0]
 8023b2c:	e011      	b.n	8023b52 <log+0xca>
 8023b2e:	4668      	mov	r0, sp
 8023b30:	f001 fbb2 	bl	8025298 <matherr>
 8023b34:	2800      	cmp	r0, #0
 8023b36:	d0e0      	beq.n	8023afa <log+0x72>
 8023b38:	4812      	ldr	r0, [pc, #72]	; (8023b84 <log+0xfc>)
 8023b3a:	f001 fbb1 	bl	80252a0 <nan>
 8023b3e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8023b42:	e006      	b.n	8023b52 <log+0xca>
 8023b44:	2302      	movs	r3, #2
 8023b46:	9300      	str	r3, [sp, #0]
 8023b48:	4668      	mov	r0, sp
 8023b4a:	f001 fba5 	bl	8025298 <matherr>
 8023b4e:	2800      	cmp	r0, #0
 8023b50:	d0e8      	beq.n	8023b24 <log+0x9c>
 8023b52:	9b08      	ldr	r3, [sp, #32]
 8023b54:	b11b      	cbz	r3, 8023b5e <log+0xd6>
 8023b56:	f7fc fe9f 	bl	8020898 <__errno>
 8023b5a:	9b08      	ldr	r3, [sp, #32]
 8023b5c:	6003      	str	r3, [r0, #0]
 8023b5e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8023b62:	eeb0 0a48 	vmov.f32	s0, s16
 8023b66:	eef0 0a68 	vmov.f32	s1, s17
 8023b6a:	b00a      	add	sp, #40	; 0x28
 8023b6c:	ecbd 8b02 	vpop	{d8}
 8023b70:	bd70      	pop	{r4, r5, r6, pc}
 8023b72:	bf00      	nop
 8023b74:	200015c0 	.word	0x200015c0
 8023b78:	080327b1 	.word	0x080327b1
 8023b7c:	c7efffff 	.word	0xc7efffff
 8023b80:	fff00000 	.word	0xfff00000
 8023b84:	08032449 	.word	0x08032449

08023b88 <pow>:
 8023b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b8c:	ed2d 8b04 	vpush	{d8-d9}
 8023b90:	b08d      	sub	sp, #52	; 0x34
 8023b92:	ec57 6b10 	vmov	r6, r7, d0
 8023b96:	ec55 4b11 	vmov	r4, r5, d1
 8023b9a:	f000 fd65 	bl	8024668 <__ieee754_pow>
 8023b9e:	4bae      	ldr	r3, [pc, #696]	; (8023e58 <pow+0x2d0>)
 8023ba0:	eeb0 8a40 	vmov.f32	s16, s0
 8023ba4:	eef0 8a60 	vmov.f32	s17, s1
 8023ba8:	f993 9000 	ldrsb.w	r9, [r3]
 8023bac:	f1b9 3fff 	cmp.w	r9, #4294967295
 8023bb0:	4698      	mov	r8, r3
 8023bb2:	d05f      	beq.n	8023c74 <pow+0xec>
 8023bb4:	4622      	mov	r2, r4
 8023bb6:	462b      	mov	r3, r5
 8023bb8:	4620      	mov	r0, r4
 8023bba:	4629      	mov	r1, r5
 8023bbc:	f7dc ffca 	bl	8000b54 <__aeabi_dcmpun>
 8023bc0:	4683      	mov	fp, r0
 8023bc2:	2800      	cmp	r0, #0
 8023bc4:	d156      	bne.n	8023c74 <pow+0xec>
 8023bc6:	4632      	mov	r2, r6
 8023bc8:	463b      	mov	r3, r7
 8023bca:	4630      	mov	r0, r6
 8023bcc:	4639      	mov	r1, r7
 8023bce:	f7dc ffc1 	bl	8000b54 <__aeabi_dcmpun>
 8023bd2:	9001      	str	r0, [sp, #4]
 8023bd4:	b1e8      	cbz	r0, 8023c12 <pow+0x8a>
 8023bd6:	2200      	movs	r2, #0
 8023bd8:	2300      	movs	r3, #0
 8023bda:	4620      	mov	r0, r4
 8023bdc:	4629      	mov	r1, r5
 8023bde:	f7dc ff87 	bl	8000af0 <__aeabi_dcmpeq>
 8023be2:	2800      	cmp	r0, #0
 8023be4:	d046      	beq.n	8023c74 <pow+0xec>
 8023be6:	2301      	movs	r3, #1
 8023be8:	9302      	str	r3, [sp, #8]
 8023bea:	4b9c      	ldr	r3, [pc, #624]	; (8023e5c <pow+0x2d4>)
 8023bec:	9303      	str	r3, [sp, #12]
 8023bee:	4b9c      	ldr	r3, [pc, #624]	; (8023e60 <pow+0x2d8>)
 8023bf0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8023bf4:	2200      	movs	r2, #0
 8023bf6:	f1b9 0f02 	cmp.w	r9, #2
 8023bfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023bfe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023c02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023c06:	d033      	beq.n	8023c70 <pow+0xe8>
 8023c08:	a802      	add	r0, sp, #8
 8023c0a:	f001 fb45 	bl	8025298 <matherr>
 8023c0e:	bb48      	cbnz	r0, 8023c64 <pow+0xdc>
 8023c10:	e05e      	b.n	8023cd0 <pow+0x148>
 8023c12:	f04f 0a00 	mov.w	sl, #0
 8023c16:	f04f 0b00 	mov.w	fp, #0
 8023c1a:	4652      	mov	r2, sl
 8023c1c:	465b      	mov	r3, fp
 8023c1e:	4630      	mov	r0, r6
 8023c20:	4639      	mov	r1, r7
 8023c22:	f7dc ff65 	bl	8000af0 <__aeabi_dcmpeq>
 8023c26:	ec4b ab19 	vmov	d9, sl, fp
 8023c2a:	2800      	cmp	r0, #0
 8023c2c:	d055      	beq.n	8023cda <pow+0x152>
 8023c2e:	4652      	mov	r2, sl
 8023c30:	465b      	mov	r3, fp
 8023c32:	4620      	mov	r0, r4
 8023c34:	4629      	mov	r1, r5
 8023c36:	f7dc ff5b 	bl	8000af0 <__aeabi_dcmpeq>
 8023c3a:	4680      	mov	r8, r0
 8023c3c:	b318      	cbz	r0, 8023c86 <pow+0xfe>
 8023c3e:	2301      	movs	r3, #1
 8023c40:	9302      	str	r3, [sp, #8]
 8023c42:	4b86      	ldr	r3, [pc, #536]	; (8023e5c <pow+0x2d4>)
 8023c44:	9303      	str	r3, [sp, #12]
 8023c46:	9b01      	ldr	r3, [sp, #4]
 8023c48:	930a      	str	r3, [sp, #40]	; 0x28
 8023c4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023c4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023c52:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8023c56:	f1b9 0f00 	cmp.w	r9, #0
 8023c5a:	d0d5      	beq.n	8023c08 <pow+0x80>
 8023c5c:	4b80      	ldr	r3, [pc, #512]	; (8023e60 <pow+0x2d8>)
 8023c5e:	2200      	movs	r2, #0
 8023c60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c66:	b11b      	cbz	r3, 8023c70 <pow+0xe8>
 8023c68:	f7fc fe16 	bl	8020898 <__errno>
 8023c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c6e:	6003      	str	r3, [r0, #0]
 8023c70:	ed9d 8b08 	vldr	d8, [sp, #32]
 8023c74:	eeb0 0a48 	vmov.f32	s0, s16
 8023c78:	eef0 0a68 	vmov.f32	s1, s17
 8023c7c:	b00d      	add	sp, #52	; 0x34
 8023c7e:	ecbd 8b04 	vpop	{d8-d9}
 8023c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c86:	ec45 4b10 	vmov	d0, r4, r5
 8023c8a:	f001 fafd 	bl	8025288 <finite>
 8023c8e:	2800      	cmp	r0, #0
 8023c90:	d0f0      	beq.n	8023c74 <pow+0xec>
 8023c92:	4652      	mov	r2, sl
 8023c94:	465b      	mov	r3, fp
 8023c96:	4620      	mov	r0, r4
 8023c98:	4629      	mov	r1, r5
 8023c9a:	f7dc ff33 	bl	8000b04 <__aeabi_dcmplt>
 8023c9e:	2800      	cmp	r0, #0
 8023ca0:	d0e8      	beq.n	8023c74 <pow+0xec>
 8023ca2:	2301      	movs	r3, #1
 8023ca4:	9302      	str	r3, [sp, #8]
 8023ca6:	4b6d      	ldr	r3, [pc, #436]	; (8023e5c <pow+0x2d4>)
 8023ca8:	9303      	str	r3, [sp, #12]
 8023caa:	4b6b      	ldr	r3, [pc, #428]	; (8023e58 <pow+0x2d0>)
 8023cac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8023cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8023cb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023cb8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023cbc:	b913      	cbnz	r3, 8023cc4 <pow+0x13c>
 8023cbe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8023cc2:	e7a1      	b.n	8023c08 <pow+0x80>
 8023cc4:	4967      	ldr	r1, [pc, #412]	; (8023e64 <pow+0x2dc>)
 8023cc6:	2000      	movs	r0, #0
 8023cc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023ccc:	2b02      	cmp	r3, #2
 8023cce:	d19b      	bne.n	8023c08 <pow+0x80>
 8023cd0:	f7fc fde2 	bl	8020898 <__errno>
 8023cd4:	2321      	movs	r3, #33	; 0x21
 8023cd6:	6003      	str	r3, [r0, #0]
 8023cd8:	e7c4      	b.n	8023c64 <pow+0xdc>
 8023cda:	eeb0 0a48 	vmov.f32	s0, s16
 8023cde:	eef0 0a68 	vmov.f32	s1, s17
 8023ce2:	f001 fad1 	bl	8025288 <finite>
 8023ce6:	9001      	str	r0, [sp, #4]
 8023ce8:	2800      	cmp	r0, #0
 8023cea:	f040 808a 	bne.w	8023e02 <pow+0x27a>
 8023cee:	ec47 6b10 	vmov	d0, r6, r7
 8023cf2:	f001 fac9 	bl	8025288 <finite>
 8023cf6:	2800      	cmp	r0, #0
 8023cf8:	f000 8083 	beq.w	8023e02 <pow+0x27a>
 8023cfc:	ec45 4b10 	vmov	d0, r4, r5
 8023d00:	f001 fac2 	bl	8025288 <finite>
 8023d04:	2800      	cmp	r0, #0
 8023d06:	d07c      	beq.n	8023e02 <pow+0x27a>
 8023d08:	ec53 2b18 	vmov	r2, r3, d8
 8023d0c:	ee18 0a10 	vmov	r0, s16
 8023d10:	4619      	mov	r1, r3
 8023d12:	f7dc ff1f 	bl	8000b54 <__aeabi_dcmpun>
 8023d16:	f998 9000 	ldrsb.w	r9, [r8]
 8023d1a:	4b50      	ldr	r3, [pc, #320]	; (8023e5c <pow+0x2d4>)
 8023d1c:	b1b0      	cbz	r0, 8023d4c <pow+0x1c4>
 8023d1e:	2201      	movs	r2, #1
 8023d20:	9303      	str	r3, [sp, #12]
 8023d22:	9b01      	ldr	r3, [sp, #4]
 8023d24:	9202      	str	r2, [sp, #8]
 8023d26:	930a      	str	r3, [sp, #40]	; 0x28
 8023d28:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023d2c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023d30:	f1b9 0f00 	cmp.w	r9, #0
 8023d34:	d0c3      	beq.n	8023cbe <pow+0x136>
 8023d36:	4652      	mov	r2, sl
 8023d38:	465b      	mov	r3, fp
 8023d3a:	4650      	mov	r0, sl
 8023d3c:	4659      	mov	r1, fp
 8023d3e:	f7dc fd99 	bl	8000874 <__aeabi_ddiv>
 8023d42:	f1b9 0f02 	cmp.w	r9, #2
 8023d46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023d4a:	e7c0      	b.n	8023cce <pow+0x146>
 8023d4c:	2203      	movs	r2, #3
 8023d4e:	9202      	str	r2, [sp, #8]
 8023d50:	9303      	str	r3, [sp, #12]
 8023d52:	900a      	str	r0, [sp, #40]	; 0x28
 8023d54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023d58:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023d5c:	f1b9 0f00 	cmp.w	r9, #0
 8023d60:	d12c      	bne.n	8023dbc <pow+0x234>
 8023d62:	4b41      	ldr	r3, [pc, #260]	; (8023e68 <pow+0x2e0>)
 8023d64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023d68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023d6c:	4630      	mov	r0, r6
 8023d6e:	4652      	mov	r2, sl
 8023d70:	465b      	mov	r3, fp
 8023d72:	4639      	mov	r1, r7
 8023d74:	f7dc fec6 	bl	8000b04 <__aeabi_dcmplt>
 8023d78:	2800      	cmp	r0, #0
 8023d7a:	d066      	beq.n	8023e4a <pow+0x2c2>
 8023d7c:	2200      	movs	r2, #0
 8023d7e:	4b3b      	ldr	r3, [pc, #236]	; (8023e6c <pow+0x2e4>)
 8023d80:	4620      	mov	r0, r4
 8023d82:	4629      	mov	r1, r5
 8023d84:	f7dc fc4c 	bl	8000620 <__aeabi_dmul>
 8023d88:	4604      	mov	r4, r0
 8023d8a:	460d      	mov	r5, r1
 8023d8c:	ec45 4b10 	vmov	d0, r4, r5
 8023d90:	f001 fa8e 	bl	80252b0 <rint>
 8023d94:	4620      	mov	r0, r4
 8023d96:	ec53 2b10 	vmov	r2, r3, d0
 8023d9a:	4629      	mov	r1, r5
 8023d9c:	f7dc fea8 	bl	8000af0 <__aeabi_dcmpeq>
 8023da0:	b920      	cbnz	r0, 8023dac <pow+0x224>
 8023da2:	4b33      	ldr	r3, [pc, #204]	; (8023e70 <pow+0x2e8>)
 8023da4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023da8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023dac:	f998 3000 	ldrsb.w	r3, [r8]
 8023db0:	2b02      	cmp	r3, #2
 8023db2:	d14a      	bne.n	8023e4a <pow+0x2c2>
 8023db4:	f7fc fd70 	bl	8020898 <__errno>
 8023db8:	2322      	movs	r3, #34	; 0x22
 8023dba:	e78c      	b.n	8023cd6 <pow+0x14e>
 8023dbc:	4b2d      	ldr	r3, [pc, #180]	; (8023e74 <pow+0x2ec>)
 8023dbe:	2200      	movs	r2, #0
 8023dc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023dc4:	4630      	mov	r0, r6
 8023dc6:	4652      	mov	r2, sl
 8023dc8:	465b      	mov	r3, fp
 8023dca:	4639      	mov	r1, r7
 8023dcc:	f7dc fe9a 	bl	8000b04 <__aeabi_dcmplt>
 8023dd0:	2800      	cmp	r0, #0
 8023dd2:	d0eb      	beq.n	8023dac <pow+0x224>
 8023dd4:	2200      	movs	r2, #0
 8023dd6:	4b25      	ldr	r3, [pc, #148]	; (8023e6c <pow+0x2e4>)
 8023dd8:	4620      	mov	r0, r4
 8023dda:	4629      	mov	r1, r5
 8023ddc:	f7dc fc20 	bl	8000620 <__aeabi_dmul>
 8023de0:	4604      	mov	r4, r0
 8023de2:	460d      	mov	r5, r1
 8023de4:	ec45 4b10 	vmov	d0, r4, r5
 8023de8:	f001 fa62 	bl	80252b0 <rint>
 8023dec:	4620      	mov	r0, r4
 8023dee:	ec53 2b10 	vmov	r2, r3, d0
 8023df2:	4629      	mov	r1, r5
 8023df4:	f7dc fe7c 	bl	8000af0 <__aeabi_dcmpeq>
 8023df8:	2800      	cmp	r0, #0
 8023dfa:	d1d7      	bne.n	8023dac <pow+0x224>
 8023dfc:	2200      	movs	r2, #0
 8023dfe:	4b19      	ldr	r3, [pc, #100]	; (8023e64 <pow+0x2dc>)
 8023e00:	e7d2      	b.n	8023da8 <pow+0x220>
 8023e02:	2200      	movs	r2, #0
 8023e04:	2300      	movs	r3, #0
 8023e06:	ec51 0b18 	vmov	r0, r1, d8
 8023e0a:	f7dc fe71 	bl	8000af0 <__aeabi_dcmpeq>
 8023e0e:	2800      	cmp	r0, #0
 8023e10:	f43f af30 	beq.w	8023c74 <pow+0xec>
 8023e14:	ec47 6b10 	vmov	d0, r6, r7
 8023e18:	f001 fa36 	bl	8025288 <finite>
 8023e1c:	2800      	cmp	r0, #0
 8023e1e:	f43f af29 	beq.w	8023c74 <pow+0xec>
 8023e22:	ec45 4b10 	vmov	d0, r4, r5
 8023e26:	f001 fa2f 	bl	8025288 <finite>
 8023e2a:	2800      	cmp	r0, #0
 8023e2c:	f43f af22 	beq.w	8023c74 <pow+0xec>
 8023e30:	2304      	movs	r3, #4
 8023e32:	9302      	str	r3, [sp, #8]
 8023e34:	4b09      	ldr	r3, [pc, #36]	; (8023e5c <pow+0x2d4>)
 8023e36:	9303      	str	r3, [sp, #12]
 8023e38:	2300      	movs	r3, #0
 8023e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8023e3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023e40:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023e44:	ed8d 9b08 	vstr	d9, [sp, #32]
 8023e48:	e7b0      	b.n	8023dac <pow+0x224>
 8023e4a:	a802      	add	r0, sp, #8
 8023e4c:	f001 fa24 	bl	8025298 <matherr>
 8023e50:	2800      	cmp	r0, #0
 8023e52:	f47f af07 	bne.w	8023c64 <pow+0xdc>
 8023e56:	e7ad      	b.n	8023db4 <pow+0x22c>
 8023e58:	200015c0 	.word	0x200015c0
 8023e5c:	080327b5 	.word	0x080327b5
 8023e60:	3ff00000 	.word	0x3ff00000
 8023e64:	fff00000 	.word	0xfff00000
 8023e68:	47efffff 	.word	0x47efffff
 8023e6c:	3fe00000 	.word	0x3fe00000
 8023e70:	c7efffff 	.word	0xc7efffff
 8023e74:	7ff00000 	.word	0x7ff00000

08023e78 <sqrt>:
 8023e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023e7c:	ed2d 8b02 	vpush	{d8}
 8023e80:	b08b      	sub	sp, #44	; 0x2c
 8023e82:	ec55 4b10 	vmov	r4, r5, d0
 8023e86:	f001 f901 	bl	802508c <__ieee754_sqrt>
 8023e8a:	4b26      	ldr	r3, [pc, #152]	; (8023f24 <sqrt+0xac>)
 8023e8c:	eeb0 8a40 	vmov.f32	s16, s0
 8023e90:	eef0 8a60 	vmov.f32	s17, s1
 8023e94:	f993 6000 	ldrsb.w	r6, [r3]
 8023e98:	1c73      	adds	r3, r6, #1
 8023e9a:	d02a      	beq.n	8023ef2 <sqrt+0x7a>
 8023e9c:	4622      	mov	r2, r4
 8023e9e:	462b      	mov	r3, r5
 8023ea0:	4620      	mov	r0, r4
 8023ea2:	4629      	mov	r1, r5
 8023ea4:	f7dc fe56 	bl	8000b54 <__aeabi_dcmpun>
 8023ea8:	4607      	mov	r7, r0
 8023eaa:	bb10      	cbnz	r0, 8023ef2 <sqrt+0x7a>
 8023eac:	f04f 0800 	mov.w	r8, #0
 8023eb0:	f04f 0900 	mov.w	r9, #0
 8023eb4:	4642      	mov	r2, r8
 8023eb6:	464b      	mov	r3, r9
 8023eb8:	4620      	mov	r0, r4
 8023eba:	4629      	mov	r1, r5
 8023ebc:	f7dc fe22 	bl	8000b04 <__aeabi_dcmplt>
 8023ec0:	b1b8      	cbz	r0, 8023ef2 <sqrt+0x7a>
 8023ec2:	2301      	movs	r3, #1
 8023ec4:	9300      	str	r3, [sp, #0]
 8023ec6:	4b18      	ldr	r3, [pc, #96]	; (8023f28 <sqrt+0xb0>)
 8023ec8:	9301      	str	r3, [sp, #4]
 8023eca:	9708      	str	r7, [sp, #32]
 8023ecc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8023ed0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8023ed4:	b9b6      	cbnz	r6, 8023f04 <sqrt+0x8c>
 8023ed6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8023eda:	4668      	mov	r0, sp
 8023edc:	f001 f9dc 	bl	8025298 <matherr>
 8023ee0:	b1d0      	cbz	r0, 8023f18 <sqrt+0xa0>
 8023ee2:	9b08      	ldr	r3, [sp, #32]
 8023ee4:	b11b      	cbz	r3, 8023eee <sqrt+0x76>
 8023ee6:	f7fc fcd7 	bl	8020898 <__errno>
 8023eea:	9b08      	ldr	r3, [sp, #32]
 8023eec:	6003      	str	r3, [r0, #0]
 8023eee:	ed9d 8b06 	vldr	d8, [sp, #24]
 8023ef2:	eeb0 0a48 	vmov.f32	s0, s16
 8023ef6:	eef0 0a68 	vmov.f32	s1, s17
 8023efa:	b00b      	add	sp, #44	; 0x2c
 8023efc:	ecbd 8b02 	vpop	{d8}
 8023f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023f04:	4642      	mov	r2, r8
 8023f06:	464b      	mov	r3, r9
 8023f08:	4640      	mov	r0, r8
 8023f0a:	4649      	mov	r1, r9
 8023f0c:	f7dc fcb2 	bl	8000874 <__aeabi_ddiv>
 8023f10:	2e02      	cmp	r6, #2
 8023f12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023f16:	d1e0      	bne.n	8023eda <sqrt+0x62>
 8023f18:	f7fc fcbe 	bl	8020898 <__errno>
 8023f1c:	2321      	movs	r3, #33	; 0x21
 8023f1e:	6003      	str	r3, [r0, #0]
 8023f20:	e7df      	b.n	8023ee2 <sqrt+0x6a>
 8023f22:	bf00      	nop
 8023f24:	200015c0 	.word	0x200015c0
 8023f28:	080327b9 	.word	0x080327b9

08023f2c <sqrtf>:
 8023f2c:	b510      	push	{r4, lr}
 8023f2e:	ed2d 8b02 	vpush	{d8}
 8023f32:	b08a      	sub	sp, #40	; 0x28
 8023f34:	eeb0 8a40 	vmov.f32	s16, s0
 8023f38:	f001 f958 	bl	80251ec <__ieee754_sqrtf>
 8023f3c:	4b21      	ldr	r3, [pc, #132]	; (8023fc4 <sqrtf+0x98>)
 8023f3e:	f993 4000 	ldrsb.w	r4, [r3]
 8023f42:	1c63      	adds	r3, r4, #1
 8023f44:	d02c      	beq.n	8023fa0 <sqrtf+0x74>
 8023f46:	eeb4 8a48 	vcmp.f32	s16, s16
 8023f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f4e:	d627      	bvs.n	8023fa0 <sqrtf+0x74>
 8023f50:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f58:	d522      	bpl.n	8023fa0 <sqrtf+0x74>
 8023f5a:	2301      	movs	r3, #1
 8023f5c:	9300      	str	r3, [sp, #0]
 8023f5e:	4b1a      	ldr	r3, [pc, #104]	; (8023fc8 <sqrtf+0x9c>)
 8023f60:	9301      	str	r3, [sp, #4]
 8023f62:	ee18 0a10 	vmov	r0, s16
 8023f66:	2300      	movs	r3, #0
 8023f68:	9308      	str	r3, [sp, #32]
 8023f6a:	f7dc fb05 	bl	8000578 <__aeabi_f2d>
 8023f6e:	2200      	movs	r2, #0
 8023f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023f78:	2300      	movs	r3, #0
 8023f7a:	b9ac      	cbnz	r4, 8023fa8 <sqrtf+0x7c>
 8023f7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023f80:	4668      	mov	r0, sp
 8023f82:	f001 f989 	bl	8025298 <matherr>
 8023f86:	b1b8      	cbz	r0, 8023fb8 <sqrtf+0x8c>
 8023f88:	9b08      	ldr	r3, [sp, #32]
 8023f8a:	b11b      	cbz	r3, 8023f94 <sqrtf+0x68>
 8023f8c:	f7fc fc84 	bl	8020898 <__errno>
 8023f90:	9b08      	ldr	r3, [sp, #32]
 8023f92:	6003      	str	r3, [r0, #0]
 8023f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023f98:	f7dc fe3a 	bl	8000c10 <__aeabi_d2f>
 8023f9c:	ee00 0a10 	vmov	s0, r0
 8023fa0:	b00a      	add	sp, #40	; 0x28
 8023fa2:	ecbd 8b02 	vpop	{d8}
 8023fa6:	bd10      	pop	{r4, pc}
 8023fa8:	4610      	mov	r0, r2
 8023faa:	4619      	mov	r1, r3
 8023fac:	f7dc fc62 	bl	8000874 <__aeabi_ddiv>
 8023fb0:	2c02      	cmp	r4, #2
 8023fb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023fb6:	d1e3      	bne.n	8023f80 <sqrtf+0x54>
 8023fb8:	f7fc fc6e 	bl	8020898 <__errno>
 8023fbc:	2321      	movs	r3, #33	; 0x21
 8023fbe:	6003      	str	r3, [r0, #0]
 8023fc0:	e7e2      	b.n	8023f88 <sqrtf+0x5c>
 8023fc2:	bf00      	nop
 8023fc4:	200015c0 	.word	0x200015c0
 8023fc8:	080327be 	.word	0x080327be
 8023fcc:	00000000 	.word	0x00000000

08023fd0 <__ieee754_exp>:
 8023fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fd4:	ec55 4b10 	vmov	r4, r5, d0
 8023fd8:	4aad      	ldr	r2, [pc, #692]	; (8024290 <__ieee754_exp+0x2c0>)
 8023fda:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8023fde:	4297      	cmp	r7, r2
 8023fe0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023fe4:	f240 80af 	bls.w	8024146 <__ieee754_exp+0x176>
 8023fe8:	4aaa      	ldr	r2, [pc, #680]	; (8024294 <__ieee754_exp+0x2c4>)
 8023fea:	4297      	cmp	r7, r2
 8023fec:	d915      	bls.n	802401a <__ieee754_exp+0x4a>
 8023fee:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8023ff2:	4323      	orrs	r3, r4
 8023ff4:	d009      	beq.n	802400a <__ieee754_exp+0x3a>
 8023ff6:	ee10 2a10 	vmov	r2, s0
 8023ffa:	462b      	mov	r3, r5
 8023ffc:	4620      	mov	r0, r4
 8023ffe:	4629      	mov	r1, r5
 8024000:	f7dc f95c 	bl	80002bc <__adddf3>
 8024004:	4604      	mov	r4, r0
 8024006:	460d      	mov	r5, r1
 8024008:	e002      	b.n	8024010 <__ieee754_exp+0x40>
 802400a:	b10e      	cbz	r6, 8024010 <__ieee754_exp+0x40>
 802400c:	2400      	movs	r4, #0
 802400e:	2500      	movs	r5, #0
 8024010:	ec45 4b10 	vmov	d0, r4, r5
 8024014:	b003      	add	sp, #12
 8024016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802401a:	a387      	add	r3, pc, #540	; (adr r3, 8024238 <__ieee754_exp+0x268>)
 802401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024020:	ee10 0a10 	vmov	r0, s0
 8024024:	4629      	mov	r1, r5
 8024026:	f7dc fd8b 	bl	8000b40 <__aeabi_dcmpgt>
 802402a:	b138      	cbz	r0, 802403c <__ieee754_exp+0x6c>
 802402c:	a384      	add	r3, pc, #528	; (adr r3, 8024240 <__ieee754_exp+0x270>)
 802402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024032:	4610      	mov	r0, r2
 8024034:	4619      	mov	r1, r3
 8024036:	f7dc faf3 	bl	8000620 <__aeabi_dmul>
 802403a:	e7e3      	b.n	8024004 <__ieee754_exp+0x34>
 802403c:	a382      	add	r3, pc, #520	; (adr r3, 8024248 <__ieee754_exp+0x278>)
 802403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024042:	4620      	mov	r0, r4
 8024044:	4629      	mov	r1, r5
 8024046:	f7dc fd5d 	bl	8000b04 <__aeabi_dcmplt>
 802404a:	2800      	cmp	r0, #0
 802404c:	d1de      	bne.n	802400c <__ieee754_exp+0x3c>
 802404e:	4b92      	ldr	r3, [pc, #584]	; (8024298 <__ieee754_exp+0x2c8>)
 8024050:	429f      	cmp	r7, r3
 8024052:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 8024056:	f200 808e 	bhi.w	8024176 <__ieee754_exp+0x1a6>
 802405a:	4b90      	ldr	r3, [pc, #576]	; (802429c <__ieee754_exp+0x2cc>)
 802405c:	443b      	add	r3, r7
 802405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024062:	4620      	mov	r0, r4
 8024064:	4629      	mov	r1, r5
 8024066:	f7dc f927 	bl	80002b8 <__aeabi_dsub>
 802406a:	4b8d      	ldr	r3, [pc, #564]	; (80242a0 <__ieee754_exp+0x2d0>)
 802406c:	441f      	add	r7, r3
 802406e:	ed97 7b00 	vldr	d7, [r7]
 8024072:	ed8d 7b00 	vstr	d7, [sp]
 8024076:	4682      	mov	sl, r0
 8024078:	f1c6 0001 	rsb	r0, r6, #1
 802407c:	468b      	mov	fp, r1
 802407e:	1b86      	subs	r6, r0, r6
 8024080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024084:	4650      	mov	r0, sl
 8024086:	4659      	mov	r1, fp
 8024088:	f7dc f916 	bl	80002b8 <__aeabi_dsub>
 802408c:	4604      	mov	r4, r0
 802408e:	460d      	mov	r5, r1
 8024090:	4622      	mov	r2, r4
 8024092:	462b      	mov	r3, r5
 8024094:	4620      	mov	r0, r4
 8024096:	4629      	mov	r1, r5
 8024098:	f7dc fac2 	bl	8000620 <__aeabi_dmul>
 802409c:	a36c      	add	r3, pc, #432	; (adr r3, 8024250 <__ieee754_exp+0x280>)
 802409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240a2:	4680      	mov	r8, r0
 80240a4:	4689      	mov	r9, r1
 80240a6:	f7dc fabb 	bl	8000620 <__aeabi_dmul>
 80240aa:	a36b      	add	r3, pc, #428	; (adr r3, 8024258 <__ieee754_exp+0x288>)
 80240ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240b0:	f7dc f902 	bl	80002b8 <__aeabi_dsub>
 80240b4:	4642      	mov	r2, r8
 80240b6:	464b      	mov	r3, r9
 80240b8:	f7dc fab2 	bl	8000620 <__aeabi_dmul>
 80240bc:	a368      	add	r3, pc, #416	; (adr r3, 8024260 <__ieee754_exp+0x290>)
 80240be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240c2:	f7dc f8fb 	bl	80002bc <__adddf3>
 80240c6:	4642      	mov	r2, r8
 80240c8:	464b      	mov	r3, r9
 80240ca:	f7dc faa9 	bl	8000620 <__aeabi_dmul>
 80240ce:	a366      	add	r3, pc, #408	; (adr r3, 8024268 <__ieee754_exp+0x298>)
 80240d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240d4:	f7dc f8f0 	bl	80002b8 <__aeabi_dsub>
 80240d8:	4642      	mov	r2, r8
 80240da:	464b      	mov	r3, r9
 80240dc:	f7dc faa0 	bl	8000620 <__aeabi_dmul>
 80240e0:	a363      	add	r3, pc, #396	; (adr r3, 8024270 <__ieee754_exp+0x2a0>)
 80240e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240e6:	f7dc f8e9 	bl	80002bc <__adddf3>
 80240ea:	4642      	mov	r2, r8
 80240ec:	464b      	mov	r3, r9
 80240ee:	f7dc fa97 	bl	8000620 <__aeabi_dmul>
 80240f2:	4602      	mov	r2, r0
 80240f4:	460b      	mov	r3, r1
 80240f6:	4620      	mov	r0, r4
 80240f8:	4629      	mov	r1, r5
 80240fa:	f7dc f8dd 	bl	80002b8 <__aeabi_dsub>
 80240fe:	4680      	mov	r8, r0
 8024100:	4689      	mov	r9, r1
 8024102:	4602      	mov	r2, r0
 8024104:	460b      	mov	r3, r1
 8024106:	4620      	mov	r0, r4
 8024108:	4629      	mov	r1, r5
 802410a:	2e00      	cmp	r6, #0
 802410c:	d162      	bne.n	80241d4 <__ieee754_exp+0x204>
 802410e:	f7dc fa87 	bl	8000620 <__aeabi_dmul>
 8024112:	2200      	movs	r2, #0
 8024114:	4606      	mov	r6, r0
 8024116:	460f      	mov	r7, r1
 8024118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802411c:	4640      	mov	r0, r8
 802411e:	4649      	mov	r1, r9
 8024120:	f7dc f8ca 	bl	80002b8 <__aeabi_dsub>
 8024124:	4602      	mov	r2, r0
 8024126:	460b      	mov	r3, r1
 8024128:	4630      	mov	r0, r6
 802412a:	4639      	mov	r1, r7
 802412c:	f7dc fba2 	bl	8000874 <__aeabi_ddiv>
 8024130:	4622      	mov	r2, r4
 8024132:	462b      	mov	r3, r5
 8024134:	f7dc f8c0 	bl	80002b8 <__aeabi_dsub>
 8024138:	4602      	mov	r2, r0
 802413a:	460b      	mov	r3, r1
 802413c:	2000      	movs	r0, #0
 802413e:	4959      	ldr	r1, [pc, #356]	; (80242a4 <__ieee754_exp+0x2d4>)
 8024140:	f7dc f8ba 	bl	80002b8 <__aeabi_dsub>
 8024144:	e75e      	b.n	8024004 <__ieee754_exp+0x34>
 8024146:	4b58      	ldr	r3, [pc, #352]	; (80242a8 <__ieee754_exp+0x2d8>)
 8024148:	429f      	cmp	r7, r3
 802414a:	d880      	bhi.n	802404e <__ieee754_exp+0x7e>
 802414c:	4b57      	ldr	r3, [pc, #348]	; (80242ac <__ieee754_exp+0x2dc>)
 802414e:	429f      	cmp	r7, r3
 8024150:	d83c      	bhi.n	80241cc <__ieee754_exp+0x1fc>
 8024152:	a33b      	add	r3, pc, #236	; (adr r3, 8024240 <__ieee754_exp+0x270>)
 8024154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024158:	ee10 0a10 	vmov	r0, s0
 802415c:	4629      	mov	r1, r5
 802415e:	f7dc f8ad 	bl	80002bc <__adddf3>
 8024162:	2200      	movs	r2, #0
 8024164:	4b4f      	ldr	r3, [pc, #316]	; (80242a4 <__ieee754_exp+0x2d4>)
 8024166:	f7dc fceb 	bl	8000b40 <__aeabi_dcmpgt>
 802416a:	b388      	cbz	r0, 80241d0 <__ieee754_exp+0x200>
 802416c:	2200      	movs	r2, #0
 802416e:	4b4d      	ldr	r3, [pc, #308]	; (80242a4 <__ieee754_exp+0x2d4>)
 8024170:	4620      	mov	r0, r4
 8024172:	4629      	mov	r1, r5
 8024174:	e744      	b.n	8024000 <__ieee754_exp+0x30>
 8024176:	4e4e      	ldr	r6, [pc, #312]	; (80242b0 <__ieee754_exp+0x2e0>)
 8024178:	a33f      	add	r3, pc, #252	; (adr r3, 8024278 <__ieee754_exp+0x2a8>)
 802417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802417e:	443e      	add	r6, r7
 8024180:	4620      	mov	r0, r4
 8024182:	4629      	mov	r1, r5
 8024184:	f7dc fa4c 	bl	8000620 <__aeabi_dmul>
 8024188:	e9d6 2300 	ldrd	r2, r3, [r6]
 802418c:	f7dc f896 	bl	80002bc <__adddf3>
 8024190:	f7dc fcf6 	bl	8000b80 <__aeabi_d2iz>
 8024194:	4606      	mov	r6, r0
 8024196:	f7dc f9dd 	bl	8000554 <__aeabi_i2d>
 802419a:	a339      	add	r3, pc, #228	; (adr r3, 8024280 <__ieee754_exp+0x2b0>)
 802419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241a0:	4680      	mov	r8, r0
 80241a2:	4689      	mov	r9, r1
 80241a4:	f7dc fa3c 	bl	8000620 <__aeabi_dmul>
 80241a8:	4602      	mov	r2, r0
 80241aa:	460b      	mov	r3, r1
 80241ac:	4620      	mov	r0, r4
 80241ae:	4629      	mov	r1, r5
 80241b0:	f7dc f882 	bl	80002b8 <__aeabi_dsub>
 80241b4:	a334      	add	r3, pc, #208	; (adr r3, 8024288 <__ieee754_exp+0x2b8>)
 80241b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241ba:	4682      	mov	sl, r0
 80241bc:	468b      	mov	fp, r1
 80241be:	4640      	mov	r0, r8
 80241c0:	4649      	mov	r1, r9
 80241c2:	f7dc fa2d 	bl	8000620 <__aeabi_dmul>
 80241c6:	e9cd 0100 	strd	r0, r1, [sp]
 80241ca:	e759      	b.n	8024080 <__ieee754_exp+0xb0>
 80241cc:	2600      	movs	r6, #0
 80241ce:	e75f      	b.n	8024090 <__ieee754_exp+0xc0>
 80241d0:	4606      	mov	r6, r0
 80241d2:	e75d      	b.n	8024090 <__ieee754_exp+0xc0>
 80241d4:	f7dc fa24 	bl	8000620 <__aeabi_dmul>
 80241d8:	4642      	mov	r2, r8
 80241da:	4604      	mov	r4, r0
 80241dc:	460d      	mov	r5, r1
 80241de:	464b      	mov	r3, r9
 80241e0:	2000      	movs	r0, #0
 80241e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80241e6:	f7dc f867 	bl	80002b8 <__aeabi_dsub>
 80241ea:	4602      	mov	r2, r0
 80241ec:	460b      	mov	r3, r1
 80241ee:	4620      	mov	r0, r4
 80241f0:	4629      	mov	r1, r5
 80241f2:	f7dc fb3f 	bl	8000874 <__aeabi_ddiv>
 80241f6:	4602      	mov	r2, r0
 80241f8:	460b      	mov	r3, r1
 80241fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80241fe:	f7dc f85b 	bl	80002b8 <__aeabi_dsub>
 8024202:	4652      	mov	r2, sl
 8024204:	465b      	mov	r3, fp
 8024206:	f7dc f857 	bl	80002b8 <__aeabi_dsub>
 802420a:	460b      	mov	r3, r1
 802420c:	4602      	mov	r2, r0
 802420e:	4925      	ldr	r1, [pc, #148]	; (80242a4 <__ieee754_exp+0x2d4>)
 8024210:	2000      	movs	r0, #0
 8024212:	f7dc f851 	bl	80002b8 <__aeabi_dsub>
 8024216:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 802421a:	429e      	cmp	r6, r3
 802421c:	db02      	blt.n	8024224 <__ieee754_exp+0x254>
 802421e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8024222:	e6ef      	b.n	8024004 <__ieee754_exp+0x34>
 8024224:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8024228:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 802422c:	2200      	movs	r2, #0
 802422e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8024232:	e700      	b.n	8024036 <__ieee754_exp+0x66>
 8024234:	f3af 8000 	nop.w
 8024238:	fefa39ef 	.word	0xfefa39ef
 802423c:	40862e42 	.word	0x40862e42
 8024240:	8800759c 	.word	0x8800759c
 8024244:	7e37e43c 	.word	0x7e37e43c
 8024248:	d52d3051 	.word	0xd52d3051
 802424c:	c0874910 	.word	0xc0874910
 8024250:	72bea4d0 	.word	0x72bea4d0
 8024254:	3e663769 	.word	0x3e663769
 8024258:	c5d26bf1 	.word	0xc5d26bf1
 802425c:	3ebbbd41 	.word	0x3ebbbd41
 8024260:	af25de2c 	.word	0xaf25de2c
 8024264:	3f11566a 	.word	0x3f11566a
 8024268:	16bebd93 	.word	0x16bebd93
 802426c:	3f66c16c 	.word	0x3f66c16c
 8024270:	5555553e 	.word	0x5555553e
 8024274:	3fc55555 	.word	0x3fc55555
 8024278:	652b82fe 	.word	0x652b82fe
 802427c:	3ff71547 	.word	0x3ff71547
 8024280:	fee00000 	.word	0xfee00000
 8024284:	3fe62e42 	.word	0x3fe62e42
 8024288:	35793c76 	.word	0x35793c76
 802428c:	3dea39ef 	.word	0x3dea39ef
 8024290:	40862e41 	.word	0x40862e41
 8024294:	7fefffff 	.word	0x7fefffff
 8024298:	3ff0a2b1 	.word	0x3ff0a2b1
 802429c:	080327d8 	.word	0x080327d8
 80242a0:	080327e8 	.word	0x080327e8
 80242a4:	3ff00000 	.word	0x3ff00000
 80242a8:	3fd62e42 	.word	0x3fd62e42
 80242ac:	3e2fffff 	.word	0x3e2fffff
 80242b0:	080327c8 	.word	0x080327c8
 80242b4:	00000000 	.word	0x00000000

080242b8 <__ieee754_log>:
 80242b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242bc:	ec51 0b10 	vmov	r0, r1, d0
 80242c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80242c4:	b087      	sub	sp, #28
 80242c6:	ee10 3a10 	vmov	r3, s0
 80242ca:	460d      	mov	r5, r1
 80242cc:	da27      	bge.n	802431e <__ieee754_log+0x66>
 80242ce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80242d2:	4313      	orrs	r3, r2
 80242d4:	d10a      	bne.n	80242ec <__ieee754_log+0x34>
 80242d6:	49cc      	ldr	r1, [pc, #816]	; (8024608 <__ieee754_log+0x350>)
 80242d8:	2200      	movs	r2, #0
 80242da:	2300      	movs	r3, #0
 80242dc:	2000      	movs	r0, #0
 80242de:	f7dc fac9 	bl	8000874 <__aeabi_ddiv>
 80242e2:	ec41 0b10 	vmov	d0, r0, r1
 80242e6:	b007      	add	sp, #28
 80242e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242ec:	2900      	cmp	r1, #0
 80242ee:	da07      	bge.n	8024300 <__ieee754_log+0x48>
 80242f0:	ee10 2a10 	vmov	r2, s0
 80242f4:	460b      	mov	r3, r1
 80242f6:	f7db ffdf 	bl	80002b8 <__aeabi_dsub>
 80242fa:	2200      	movs	r2, #0
 80242fc:	2300      	movs	r3, #0
 80242fe:	e7ee      	b.n	80242de <__ieee754_log+0x26>
 8024300:	4bc2      	ldr	r3, [pc, #776]	; (802460c <__ieee754_log+0x354>)
 8024302:	2200      	movs	r2, #0
 8024304:	f7dc f98c 	bl	8000620 <__aeabi_dmul>
 8024308:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802430c:	460d      	mov	r5, r1
 802430e:	4ac0      	ldr	r2, [pc, #768]	; (8024610 <__ieee754_log+0x358>)
 8024310:	4295      	cmp	r5, r2
 8024312:	dd06      	ble.n	8024322 <__ieee754_log+0x6a>
 8024314:	4602      	mov	r2, r0
 8024316:	460b      	mov	r3, r1
 8024318:	f7db ffd0 	bl	80002bc <__adddf3>
 802431c:	e7e1      	b.n	80242e2 <__ieee754_log+0x2a>
 802431e:	2300      	movs	r3, #0
 8024320:	e7f5      	b.n	802430e <__ieee754_log+0x56>
 8024322:	152c      	asrs	r4, r5, #20
 8024324:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8024328:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802432c:	441c      	add	r4, r3
 802432e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8024332:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8024336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802433a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802433e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8024342:	ea42 0105 	orr.w	r1, r2, r5
 8024346:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802434a:	2200      	movs	r2, #0
 802434c:	4bb1      	ldr	r3, [pc, #708]	; (8024614 <__ieee754_log+0x35c>)
 802434e:	f7db ffb3 	bl	80002b8 <__aeabi_dsub>
 8024352:	1cab      	adds	r3, r5, #2
 8024354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024358:	2b02      	cmp	r3, #2
 802435a:	4682      	mov	sl, r0
 802435c:	468b      	mov	fp, r1
 802435e:	f04f 0200 	mov.w	r2, #0
 8024362:	dc5b      	bgt.n	802441c <__ieee754_log+0x164>
 8024364:	2300      	movs	r3, #0
 8024366:	f7dc fbc3 	bl	8000af0 <__aeabi_dcmpeq>
 802436a:	b1d0      	cbz	r0, 80243a2 <__ieee754_log+0xea>
 802436c:	2c00      	cmp	r4, #0
 802436e:	f000 8170 	beq.w	8024652 <__ieee754_log+0x39a>
 8024372:	4620      	mov	r0, r4
 8024374:	f7dc f8ee 	bl	8000554 <__aeabi_i2d>
 8024378:	a38f      	add	r3, pc, #572	; (adr r3, 80245b8 <__ieee754_log+0x300>)
 802437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802437e:	4606      	mov	r6, r0
 8024380:	460f      	mov	r7, r1
 8024382:	f7dc f94d 	bl	8000620 <__aeabi_dmul>
 8024386:	a38e      	add	r3, pc, #568	; (adr r3, 80245c0 <__ieee754_log+0x308>)
 8024388:	e9d3 2300 	ldrd	r2, r3, [r3]
 802438c:	4604      	mov	r4, r0
 802438e:	460d      	mov	r5, r1
 8024390:	4630      	mov	r0, r6
 8024392:	4639      	mov	r1, r7
 8024394:	f7dc f944 	bl	8000620 <__aeabi_dmul>
 8024398:	4602      	mov	r2, r0
 802439a:	460b      	mov	r3, r1
 802439c:	4620      	mov	r0, r4
 802439e:	4629      	mov	r1, r5
 80243a0:	e7ba      	b.n	8024318 <__ieee754_log+0x60>
 80243a2:	a389      	add	r3, pc, #548	; (adr r3, 80245c8 <__ieee754_log+0x310>)
 80243a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a8:	4650      	mov	r0, sl
 80243aa:	4659      	mov	r1, fp
 80243ac:	f7dc f938 	bl	8000620 <__aeabi_dmul>
 80243b0:	4602      	mov	r2, r0
 80243b2:	460b      	mov	r3, r1
 80243b4:	2000      	movs	r0, #0
 80243b6:	4998      	ldr	r1, [pc, #608]	; (8024618 <__ieee754_log+0x360>)
 80243b8:	f7db ff7e 	bl	80002b8 <__aeabi_dsub>
 80243bc:	4652      	mov	r2, sl
 80243be:	4606      	mov	r6, r0
 80243c0:	460f      	mov	r7, r1
 80243c2:	465b      	mov	r3, fp
 80243c4:	4650      	mov	r0, sl
 80243c6:	4659      	mov	r1, fp
 80243c8:	f7dc f92a 	bl	8000620 <__aeabi_dmul>
 80243cc:	4602      	mov	r2, r0
 80243ce:	460b      	mov	r3, r1
 80243d0:	4630      	mov	r0, r6
 80243d2:	4639      	mov	r1, r7
 80243d4:	f7dc f924 	bl	8000620 <__aeabi_dmul>
 80243d8:	4606      	mov	r6, r0
 80243da:	460f      	mov	r7, r1
 80243dc:	b934      	cbnz	r4, 80243ec <__ieee754_log+0x134>
 80243de:	4602      	mov	r2, r0
 80243e0:	460b      	mov	r3, r1
 80243e2:	4650      	mov	r0, sl
 80243e4:	4659      	mov	r1, fp
 80243e6:	f7db ff67 	bl	80002b8 <__aeabi_dsub>
 80243ea:	e77a      	b.n	80242e2 <__ieee754_log+0x2a>
 80243ec:	4620      	mov	r0, r4
 80243ee:	f7dc f8b1 	bl	8000554 <__aeabi_i2d>
 80243f2:	a371      	add	r3, pc, #452	; (adr r3, 80245b8 <__ieee754_log+0x300>)
 80243f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243f8:	4680      	mov	r8, r0
 80243fa:	4689      	mov	r9, r1
 80243fc:	f7dc f910 	bl	8000620 <__aeabi_dmul>
 8024400:	a36f      	add	r3, pc, #444	; (adr r3, 80245c0 <__ieee754_log+0x308>)
 8024402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024406:	4604      	mov	r4, r0
 8024408:	460d      	mov	r5, r1
 802440a:	4640      	mov	r0, r8
 802440c:	4649      	mov	r1, r9
 802440e:	f7dc f907 	bl	8000620 <__aeabi_dmul>
 8024412:	4602      	mov	r2, r0
 8024414:	460b      	mov	r3, r1
 8024416:	4630      	mov	r0, r6
 8024418:	4639      	mov	r1, r7
 802441a:	e0b2      	b.n	8024582 <__ieee754_log+0x2ca>
 802441c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024420:	f7db ff4c 	bl	80002bc <__adddf3>
 8024424:	4602      	mov	r2, r0
 8024426:	460b      	mov	r3, r1
 8024428:	4650      	mov	r0, sl
 802442a:	4659      	mov	r1, fp
 802442c:	f7dc fa22 	bl	8000874 <__aeabi_ddiv>
 8024430:	e9cd 0100 	strd	r0, r1, [sp]
 8024434:	4620      	mov	r0, r4
 8024436:	f7dc f88d 	bl	8000554 <__aeabi_i2d>
 802443a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802443e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024442:	4610      	mov	r0, r2
 8024444:	4619      	mov	r1, r3
 8024446:	f7dc f8eb 	bl	8000620 <__aeabi_dmul>
 802444a:	4602      	mov	r2, r0
 802444c:	460b      	mov	r3, r1
 802444e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024452:	f7dc f8e5 	bl	8000620 <__aeabi_dmul>
 8024456:	a35e      	add	r3, pc, #376	; (adr r3, 80245d0 <__ieee754_log+0x318>)
 8024458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802445c:	4606      	mov	r6, r0
 802445e:	460f      	mov	r7, r1
 8024460:	f7dc f8de 	bl	8000620 <__aeabi_dmul>
 8024464:	a35c      	add	r3, pc, #368	; (adr r3, 80245d8 <__ieee754_log+0x320>)
 8024466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802446a:	f7db ff27 	bl	80002bc <__adddf3>
 802446e:	4632      	mov	r2, r6
 8024470:	463b      	mov	r3, r7
 8024472:	f7dc f8d5 	bl	8000620 <__aeabi_dmul>
 8024476:	a35a      	add	r3, pc, #360	; (adr r3, 80245e0 <__ieee754_log+0x328>)
 8024478:	e9d3 2300 	ldrd	r2, r3, [r3]
 802447c:	f7db ff1e 	bl	80002bc <__adddf3>
 8024480:	4632      	mov	r2, r6
 8024482:	463b      	mov	r3, r7
 8024484:	f7dc f8cc 	bl	8000620 <__aeabi_dmul>
 8024488:	a357      	add	r3, pc, #348	; (adr r3, 80245e8 <__ieee754_log+0x330>)
 802448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802448e:	f7db ff15 	bl	80002bc <__adddf3>
 8024492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024496:	f7dc f8c3 	bl	8000620 <__aeabi_dmul>
 802449a:	a355      	add	r3, pc, #340	; (adr r3, 80245f0 <__ieee754_log+0x338>)
 802449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80244a4:	4630      	mov	r0, r6
 80244a6:	4639      	mov	r1, r7
 80244a8:	f7dc f8ba 	bl	8000620 <__aeabi_dmul>
 80244ac:	a352      	add	r3, pc, #328	; (adr r3, 80245f8 <__ieee754_log+0x340>)
 80244ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244b2:	f7db ff03 	bl	80002bc <__adddf3>
 80244b6:	4632      	mov	r2, r6
 80244b8:	463b      	mov	r3, r7
 80244ba:	f7dc f8b1 	bl	8000620 <__aeabi_dmul>
 80244be:	a350      	add	r3, pc, #320	; (adr r3, 8024600 <__ieee754_log+0x348>)
 80244c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244c4:	f7db fefa 	bl	80002bc <__adddf3>
 80244c8:	4632      	mov	r2, r6
 80244ca:	463b      	mov	r3, r7
 80244cc:	f7dc f8a8 	bl	8000620 <__aeabi_dmul>
 80244d0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80244d4:	4602      	mov	r2, r0
 80244d6:	460b      	mov	r3, r1
 80244d8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80244dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80244e0:	f7db feec 	bl	80002bc <__adddf3>
 80244e4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80244e8:	3551      	adds	r5, #81	; 0x51
 80244ea:	ea45 0508 	orr.w	r5, r5, r8
 80244ee:	2d00      	cmp	r5, #0
 80244f0:	4606      	mov	r6, r0
 80244f2:	460f      	mov	r7, r1
 80244f4:	dd50      	ble.n	8024598 <__ieee754_log+0x2e0>
 80244f6:	2200      	movs	r2, #0
 80244f8:	4b47      	ldr	r3, [pc, #284]	; (8024618 <__ieee754_log+0x360>)
 80244fa:	4650      	mov	r0, sl
 80244fc:	4659      	mov	r1, fp
 80244fe:	f7dc f88f 	bl	8000620 <__aeabi_dmul>
 8024502:	4652      	mov	r2, sl
 8024504:	465b      	mov	r3, fp
 8024506:	f7dc f88b 	bl	8000620 <__aeabi_dmul>
 802450a:	4680      	mov	r8, r0
 802450c:	4689      	mov	r9, r1
 802450e:	b994      	cbnz	r4, 8024536 <__ieee754_log+0x27e>
 8024510:	4602      	mov	r2, r0
 8024512:	460b      	mov	r3, r1
 8024514:	4630      	mov	r0, r6
 8024516:	4639      	mov	r1, r7
 8024518:	f7db fed0 	bl	80002bc <__adddf3>
 802451c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024520:	f7dc f87e 	bl	8000620 <__aeabi_dmul>
 8024524:	4602      	mov	r2, r0
 8024526:	460b      	mov	r3, r1
 8024528:	4640      	mov	r0, r8
 802452a:	4649      	mov	r1, r9
 802452c:	f7db fec4 	bl	80002b8 <__aeabi_dsub>
 8024530:	4602      	mov	r2, r0
 8024532:	460b      	mov	r3, r1
 8024534:	e755      	b.n	80243e2 <__ieee754_log+0x12a>
 8024536:	a320      	add	r3, pc, #128	; (adr r3, 80245b8 <__ieee754_log+0x300>)
 8024538:	e9d3 2300 	ldrd	r2, r3, [r3]
 802453c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024540:	f7dc f86e 	bl	8000620 <__aeabi_dmul>
 8024544:	4642      	mov	r2, r8
 8024546:	464b      	mov	r3, r9
 8024548:	4604      	mov	r4, r0
 802454a:	460d      	mov	r5, r1
 802454c:	4630      	mov	r0, r6
 802454e:	4639      	mov	r1, r7
 8024550:	f7db feb4 	bl	80002bc <__adddf3>
 8024554:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024558:	f7dc f862 	bl	8000620 <__aeabi_dmul>
 802455c:	a318      	add	r3, pc, #96	; (adr r3, 80245c0 <__ieee754_log+0x308>)
 802455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024562:	4606      	mov	r6, r0
 8024564:	460f      	mov	r7, r1
 8024566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802456a:	f7dc f859 	bl	8000620 <__aeabi_dmul>
 802456e:	4602      	mov	r2, r0
 8024570:	460b      	mov	r3, r1
 8024572:	4630      	mov	r0, r6
 8024574:	4639      	mov	r1, r7
 8024576:	f7db fea1 	bl	80002bc <__adddf3>
 802457a:	4602      	mov	r2, r0
 802457c:	460b      	mov	r3, r1
 802457e:	4640      	mov	r0, r8
 8024580:	4649      	mov	r1, r9
 8024582:	f7db fe99 	bl	80002b8 <__aeabi_dsub>
 8024586:	4652      	mov	r2, sl
 8024588:	465b      	mov	r3, fp
 802458a:	f7db fe95 	bl	80002b8 <__aeabi_dsub>
 802458e:	4602      	mov	r2, r0
 8024590:	460b      	mov	r3, r1
 8024592:	4620      	mov	r0, r4
 8024594:	4629      	mov	r1, r5
 8024596:	e726      	b.n	80243e6 <__ieee754_log+0x12e>
 8024598:	2c00      	cmp	r4, #0
 802459a:	d13f      	bne.n	802461c <__ieee754_log+0x364>
 802459c:	4602      	mov	r2, r0
 802459e:	460b      	mov	r3, r1
 80245a0:	4650      	mov	r0, sl
 80245a2:	4659      	mov	r1, fp
 80245a4:	f7db fe88 	bl	80002b8 <__aeabi_dsub>
 80245a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80245ac:	f7dc f838 	bl	8000620 <__aeabi_dmul>
 80245b0:	e7be      	b.n	8024530 <__ieee754_log+0x278>
 80245b2:	bf00      	nop
 80245b4:	f3af 8000 	nop.w
 80245b8:	fee00000 	.word	0xfee00000
 80245bc:	3fe62e42 	.word	0x3fe62e42
 80245c0:	35793c76 	.word	0x35793c76
 80245c4:	3dea39ef 	.word	0x3dea39ef
 80245c8:	55555555 	.word	0x55555555
 80245cc:	3fd55555 	.word	0x3fd55555
 80245d0:	df3e5244 	.word	0xdf3e5244
 80245d4:	3fc2f112 	.word	0x3fc2f112
 80245d8:	96cb03de 	.word	0x96cb03de
 80245dc:	3fc74664 	.word	0x3fc74664
 80245e0:	94229359 	.word	0x94229359
 80245e4:	3fd24924 	.word	0x3fd24924
 80245e8:	55555593 	.word	0x55555593
 80245ec:	3fe55555 	.word	0x3fe55555
 80245f0:	d078c69f 	.word	0xd078c69f
 80245f4:	3fc39a09 	.word	0x3fc39a09
 80245f8:	1d8e78af 	.word	0x1d8e78af
 80245fc:	3fcc71c5 	.word	0x3fcc71c5
 8024600:	9997fa04 	.word	0x9997fa04
 8024604:	3fd99999 	.word	0x3fd99999
 8024608:	c3500000 	.word	0xc3500000
 802460c:	43500000 	.word	0x43500000
 8024610:	7fefffff 	.word	0x7fefffff
 8024614:	3ff00000 	.word	0x3ff00000
 8024618:	3fe00000 	.word	0x3fe00000
 802461c:	a30e      	add	r3, pc, #56	; (adr r3, 8024658 <__ieee754_log+0x3a0>)
 802461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024626:	f7db fffb 	bl	8000620 <__aeabi_dmul>
 802462a:	4632      	mov	r2, r6
 802462c:	463b      	mov	r3, r7
 802462e:	4604      	mov	r4, r0
 8024630:	460d      	mov	r5, r1
 8024632:	4650      	mov	r0, sl
 8024634:	4659      	mov	r1, fp
 8024636:	f7db fe3f 	bl	80002b8 <__aeabi_dsub>
 802463a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802463e:	f7db ffef 	bl	8000620 <__aeabi_dmul>
 8024642:	a307      	add	r3, pc, #28	; (adr r3, 8024660 <__ieee754_log+0x3a8>)
 8024644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024648:	4606      	mov	r6, r0
 802464a:	460f      	mov	r7, r1
 802464c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024650:	e6dd      	b.n	802440e <__ieee754_log+0x156>
 8024652:	2000      	movs	r0, #0
 8024654:	2100      	movs	r1, #0
 8024656:	e644      	b.n	80242e2 <__ieee754_log+0x2a>
 8024658:	fee00000 	.word	0xfee00000
 802465c:	3fe62e42 	.word	0x3fe62e42
 8024660:	35793c76 	.word	0x35793c76
 8024664:	3dea39ef 	.word	0x3dea39ef

08024668 <__ieee754_pow>:
 8024668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802466c:	b091      	sub	sp, #68	; 0x44
 802466e:	ed8d 1b00 	vstr	d1, [sp]
 8024672:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8024676:	ec57 6b10 	vmov	r6, r7, d0
 802467a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802467e:	ea58 0302 	orrs.w	r3, r8, r2
 8024682:	ee10 aa10 	vmov	sl, s0
 8024686:	463d      	mov	r5, r7
 8024688:	f000 84bd 	beq.w	8025006 <__ieee754_pow+0x99e>
 802468c:	4b78      	ldr	r3, [pc, #480]	; (8024870 <__ieee754_pow+0x208>)
 802468e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8024692:	429c      	cmp	r4, r3
 8024694:	dc09      	bgt.n	80246aa <__ieee754_pow+0x42>
 8024696:	d103      	bne.n	80246a0 <__ieee754_pow+0x38>
 8024698:	b93e      	cbnz	r6, 80246aa <__ieee754_pow+0x42>
 802469a:	45a0      	cmp	r8, r4
 802469c:	dc0d      	bgt.n	80246ba <__ieee754_pow+0x52>
 802469e:	e001      	b.n	80246a4 <__ieee754_pow+0x3c>
 80246a0:	4598      	cmp	r8, r3
 80246a2:	dc02      	bgt.n	80246aa <__ieee754_pow+0x42>
 80246a4:	4598      	cmp	r8, r3
 80246a6:	d10e      	bne.n	80246c6 <__ieee754_pow+0x5e>
 80246a8:	b16a      	cbz	r2, 80246c6 <__ieee754_pow+0x5e>
 80246aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80246ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80246b2:	ea54 030a 	orrs.w	r3, r4, sl
 80246b6:	f000 84a6 	beq.w	8025006 <__ieee754_pow+0x99e>
 80246ba:	486e      	ldr	r0, [pc, #440]	; (8024874 <__ieee754_pow+0x20c>)
 80246bc:	b011      	add	sp, #68	; 0x44
 80246be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246c2:	f000 bded 	b.w	80252a0 <nan>
 80246c6:	2d00      	cmp	r5, #0
 80246c8:	da53      	bge.n	8024772 <__ieee754_pow+0x10a>
 80246ca:	4b6b      	ldr	r3, [pc, #428]	; (8024878 <__ieee754_pow+0x210>)
 80246cc:	4598      	cmp	r8, r3
 80246ce:	dc4d      	bgt.n	802476c <__ieee754_pow+0x104>
 80246d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80246d4:	4598      	cmp	r8, r3
 80246d6:	dd4c      	ble.n	8024772 <__ieee754_pow+0x10a>
 80246d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80246dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80246e0:	2b14      	cmp	r3, #20
 80246e2:	dd26      	ble.n	8024732 <__ieee754_pow+0xca>
 80246e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80246e8:	fa22 f103 	lsr.w	r1, r2, r3
 80246ec:	fa01 f303 	lsl.w	r3, r1, r3
 80246f0:	429a      	cmp	r2, r3
 80246f2:	d13e      	bne.n	8024772 <__ieee754_pow+0x10a>
 80246f4:	f001 0101 	and.w	r1, r1, #1
 80246f8:	f1c1 0b02 	rsb	fp, r1, #2
 80246fc:	2a00      	cmp	r2, #0
 80246fe:	d15b      	bne.n	80247b8 <__ieee754_pow+0x150>
 8024700:	4b5b      	ldr	r3, [pc, #364]	; (8024870 <__ieee754_pow+0x208>)
 8024702:	4598      	cmp	r8, r3
 8024704:	d124      	bne.n	8024750 <__ieee754_pow+0xe8>
 8024706:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802470a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802470e:	ea53 030a 	orrs.w	r3, r3, sl
 8024712:	f000 8478 	beq.w	8025006 <__ieee754_pow+0x99e>
 8024716:	4b59      	ldr	r3, [pc, #356]	; (802487c <__ieee754_pow+0x214>)
 8024718:	429c      	cmp	r4, r3
 802471a:	dd2d      	ble.n	8024778 <__ieee754_pow+0x110>
 802471c:	f1b9 0f00 	cmp.w	r9, #0
 8024720:	f280 8475 	bge.w	802500e <__ieee754_pow+0x9a6>
 8024724:	2000      	movs	r0, #0
 8024726:	2100      	movs	r1, #0
 8024728:	ec41 0b10 	vmov	d0, r0, r1
 802472c:	b011      	add	sp, #68	; 0x44
 802472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024732:	2a00      	cmp	r2, #0
 8024734:	d13e      	bne.n	80247b4 <__ieee754_pow+0x14c>
 8024736:	f1c3 0314 	rsb	r3, r3, #20
 802473a:	fa48 f103 	asr.w	r1, r8, r3
 802473e:	fa01 f303 	lsl.w	r3, r1, r3
 8024742:	4598      	cmp	r8, r3
 8024744:	f040 846b 	bne.w	802501e <__ieee754_pow+0x9b6>
 8024748:	f001 0101 	and.w	r1, r1, #1
 802474c:	f1c1 0b02 	rsb	fp, r1, #2
 8024750:	4b4b      	ldr	r3, [pc, #300]	; (8024880 <__ieee754_pow+0x218>)
 8024752:	4598      	cmp	r8, r3
 8024754:	d118      	bne.n	8024788 <__ieee754_pow+0x120>
 8024756:	f1b9 0f00 	cmp.w	r9, #0
 802475a:	f280 845c 	bge.w	8025016 <__ieee754_pow+0x9ae>
 802475e:	4948      	ldr	r1, [pc, #288]	; (8024880 <__ieee754_pow+0x218>)
 8024760:	4632      	mov	r2, r6
 8024762:	463b      	mov	r3, r7
 8024764:	2000      	movs	r0, #0
 8024766:	f7dc f885 	bl	8000874 <__aeabi_ddiv>
 802476a:	e7dd      	b.n	8024728 <__ieee754_pow+0xc0>
 802476c:	f04f 0b02 	mov.w	fp, #2
 8024770:	e7c4      	b.n	80246fc <__ieee754_pow+0x94>
 8024772:	f04f 0b00 	mov.w	fp, #0
 8024776:	e7c1      	b.n	80246fc <__ieee754_pow+0x94>
 8024778:	f1b9 0f00 	cmp.w	r9, #0
 802477c:	dad2      	bge.n	8024724 <__ieee754_pow+0xbc>
 802477e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8024782:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024786:	e7cf      	b.n	8024728 <__ieee754_pow+0xc0>
 8024788:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802478c:	d106      	bne.n	802479c <__ieee754_pow+0x134>
 802478e:	4632      	mov	r2, r6
 8024790:	463b      	mov	r3, r7
 8024792:	4610      	mov	r0, r2
 8024794:	4619      	mov	r1, r3
 8024796:	f7db ff43 	bl	8000620 <__aeabi_dmul>
 802479a:	e7c5      	b.n	8024728 <__ieee754_pow+0xc0>
 802479c:	4b39      	ldr	r3, [pc, #228]	; (8024884 <__ieee754_pow+0x21c>)
 802479e:	4599      	cmp	r9, r3
 80247a0:	d10a      	bne.n	80247b8 <__ieee754_pow+0x150>
 80247a2:	2d00      	cmp	r5, #0
 80247a4:	db08      	blt.n	80247b8 <__ieee754_pow+0x150>
 80247a6:	ec47 6b10 	vmov	d0, r6, r7
 80247aa:	b011      	add	sp, #68	; 0x44
 80247ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247b0:	f000 bc6c 	b.w	802508c <__ieee754_sqrt>
 80247b4:	f04f 0b00 	mov.w	fp, #0
 80247b8:	ec47 6b10 	vmov	d0, r6, r7
 80247bc:	f000 fd5d 	bl	802527a <fabs>
 80247c0:	ec51 0b10 	vmov	r0, r1, d0
 80247c4:	f1ba 0f00 	cmp.w	sl, #0
 80247c8:	d127      	bne.n	802481a <__ieee754_pow+0x1b2>
 80247ca:	b124      	cbz	r4, 80247d6 <__ieee754_pow+0x16e>
 80247cc:	4b2c      	ldr	r3, [pc, #176]	; (8024880 <__ieee754_pow+0x218>)
 80247ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80247d2:	429a      	cmp	r2, r3
 80247d4:	d121      	bne.n	802481a <__ieee754_pow+0x1b2>
 80247d6:	f1b9 0f00 	cmp.w	r9, #0
 80247da:	da05      	bge.n	80247e8 <__ieee754_pow+0x180>
 80247dc:	4602      	mov	r2, r0
 80247de:	460b      	mov	r3, r1
 80247e0:	2000      	movs	r0, #0
 80247e2:	4927      	ldr	r1, [pc, #156]	; (8024880 <__ieee754_pow+0x218>)
 80247e4:	f7dc f846 	bl	8000874 <__aeabi_ddiv>
 80247e8:	2d00      	cmp	r5, #0
 80247ea:	da9d      	bge.n	8024728 <__ieee754_pow+0xc0>
 80247ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80247f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80247f4:	ea54 030b 	orrs.w	r3, r4, fp
 80247f8:	d108      	bne.n	802480c <__ieee754_pow+0x1a4>
 80247fa:	4602      	mov	r2, r0
 80247fc:	460b      	mov	r3, r1
 80247fe:	4610      	mov	r0, r2
 8024800:	4619      	mov	r1, r3
 8024802:	f7db fd59 	bl	80002b8 <__aeabi_dsub>
 8024806:	4602      	mov	r2, r0
 8024808:	460b      	mov	r3, r1
 802480a:	e7ac      	b.n	8024766 <__ieee754_pow+0xfe>
 802480c:	f1bb 0f01 	cmp.w	fp, #1
 8024810:	d18a      	bne.n	8024728 <__ieee754_pow+0xc0>
 8024812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024816:	4619      	mov	r1, r3
 8024818:	e786      	b.n	8024728 <__ieee754_pow+0xc0>
 802481a:	0fed      	lsrs	r5, r5, #31
 802481c:	1e6b      	subs	r3, r5, #1
 802481e:	930d      	str	r3, [sp, #52]	; 0x34
 8024820:	ea5b 0303 	orrs.w	r3, fp, r3
 8024824:	d102      	bne.n	802482c <__ieee754_pow+0x1c4>
 8024826:	4632      	mov	r2, r6
 8024828:	463b      	mov	r3, r7
 802482a:	e7e8      	b.n	80247fe <__ieee754_pow+0x196>
 802482c:	4b16      	ldr	r3, [pc, #88]	; (8024888 <__ieee754_pow+0x220>)
 802482e:	4598      	cmp	r8, r3
 8024830:	f340 80fe 	ble.w	8024a30 <__ieee754_pow+0x3c8>
 8024834:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8024838:	4598      	cmp	r8, r3
 802483a:	dd0a      	ble.n	8024852 <__ieee754_pow+0x1ea>
 802483c:	4b0f      	ldr	r3, [pc, #60]	; (802487c <__ieee754_pow+0x214>)
 802483e:	429c      	cmp	r4, r3
 8024840:	dc0d      	bgt.n	802485e <__ieee754_pow+0x1f6>
 8024842:	f1b9 0f00 	cmp.w	r9, #0
 8024846:	f6bf af6d 	bge.w	8024724 <__ieee754_pow+0xbc>
 802484a:	a307      	add	r3, pc, #28	; (adr r3, 8024868 <__ieee754_pow+0x200>)
 802484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024850:	e79f      	b.n	8024792 <__ieee754_pow+0x12a>
 8024852:	4b0e      	ldr	r3, [pc, #56]	; (802488c <__ieee754_pow+0x224>)
 8024854:	429c      	cmp	r4, r3
 8024856:	ddf4      	ble.n	8024842 <__ieee754_pow+0x1da>
 8024858:	4b09      	ldr	r3, [pc, #36]	; (8024880 <__ieee754_pow+0x218>)
 802485a:	429c      	cmp	r4, r3
 802485c:	dd18      	ble.n	8024890 <__ieee754_pow+0x228>
 802485e:	f1b9 0f00 	cmp.w	r9, #0
 8024862:	dcf2      	bgt.n	802484a <__ieee754_pow+0x1e2>
 8024864:	e75e      	b.n	8024724 <__ieee754_pow+0xbc>
 8024866:	bf00      	nop
 8024868:	8800759c 	.word	0x8800759c
 802486c:	7e37e43c 	.word	0x7e37e43c
 8024870:	7ff00000 	.word	0x7ff00000
 8024874:	08032449 	.word	0x08032449
 8024878:	433fffff 	.word	0x433fffff
 802487c:	3fefffff 	.word	0x3fefffff
 8024880:	3ff00000 	.word	0x3ff00000
 8024884:	3fe00000 	.word	0x3fe00000
 8024888:	41e00000 	.word	0x41e00000
 802488c:	3feffffe 	.word	0x3feffffe
 8024890:	2200      	movs	r2, #0
 8024892:	4b63      	ldr	r3, [pc, #396]	; (8024a20 <__ieee754_pow+0x3b8>)
 8024894:	f7db fd10 	bl	80002b8 <__aeabi_dsub>
 8024898:	a355      	add	r3, pc, #340	; (adr r3, 80249f0 <__ieee754_pow+0x388>)
 802489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802489e:	4604      	mov	r4, r0
 80248a0:	460d      	mov	r5, r1
 80248a2:	f7db febd 	bl	8000620 <__aeabi_dmul>
 80248a6:	a354      	add	r3, pc, #336	; (adr r3, 80249f8 <__ieee754_pow+0x390>)
 80248a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248ac:	4606      	mov	r6, r0
 80248ae:	460f      	mov	r7, r1
 80248b0:	4620      	mov	r0, r4
 80248b2:	4629      	mov	r1, r5
 80248b4:	f7db feb4 	bl	8000620 <__aeabi_dmul>
 80248b8:	2200      	movs	r2, #0
 80248ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80248be:	4b59      	ldr	r3, [pc, #356]	; (8024a24 <__ieee754_pow+0x3bc>)
 80248c0:	4620      	mov	r0, r4
 80248c2:	4629      	mov	r1, r5
 80248c4:	f7db feac 	bl	8000620 <__aeabi_dmul>
 80248c8:	4602      	mov	r2, r0
 80248ca:	460b      	mov	r3, r1
 80248cc:	a14c      	add	r1, pc, #304	; (adr r1, 8024a00 <__ieee754_pow+0x398>)
 80248ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80248d2:	f7db fcf1 	bl	80002b8 <__aeabi_dsub>
 80248d6:	4622      	mov	r2, r4
 80248d8:	462b      	mov	r3, r5
 80248da:	f7db fea1 	bl	8000620 <__aeabi_dmul>
 80248de:	4602      	mov	r2, r0
 80248e0:	460b      	mov	r3, r1
 80248e2:	2000      	movs	r0, #0
 80248e4:	4950      	ldr	r1, [pc, #320]	; (8024a28 <__ieee754_pow+0x3c0>)
 80248e6:	f7db fce7 	bl	80002b8 <__aeabi_dsub>
 80248ea:	4622      	mov	r2, r4
 80248ec:	462b      	mov	r3, r5
 80248ee:	4680      	mov	r8, r0
 80248f0:	4689      	mov	r9, r1
 80248f2:	4620      	mov	r0, r4
 80248f4:	4629      	mov	r1, r5
 80248f6:	f7db fe93 	bl	8000620 <__aeabi_dmul>
 80248fa:	4602      	mov	r2, r0
 80248fc:	460b      	mov	r3, r1
 80248fe:	4640      	mov	r0, r8
 8024900:	4649      	mov	r1, r9
 8024902:	f7db fe8d 	bl	8000620 <__aeabi_dmul>
 8024906:	a340      	add	r3, pc, #256	; (adr r3, 8024a08 <__ieee754_pow+0x3a0>)
 8024908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802490c:	f7db fe88 	bl	8000620 <__aeabi_dmul>
 8024910:	4602      	mov	r2, r0
 8024912:	460b      	mov	r3, r1
 8024914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024918:	f7db fcce 	bl	80002b8 <__aeabi_dsub>
 802491c:	4602      	mov	r2, r0
 802491e:	460b      	mov	r3, r1
 8024920:	4604      	mov	r4, r0
 8024922:	460d      	mov	r5, r1
 8024924:	4630      	mov	r0, r6
 8024926:	4639      	mov	r1, r7
 8024928:	f7db fcc8 	bl	80002bc <__adddf3>
 802492c:	2000      	movs	r0, #0
 802492e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024932:	4632      	mov	r2, r6
 8024934:	463b      	mov	r3, r7
 8024936:	f7db fcbf 	bl	80002b8 <__aeabi_dsub>
 802493a:	4602      	mov	r2, r0
 802493c:	460b      	mov	r3, r1
 802493e:	4620      	mov	r0, r4
 8024940:	4629      	mov	r1, r5
 8024942:	f7db fcb9 	bl	80002b8 <__aeabi_dsub>
 8024946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024948:	f10b 33ff 	add.w	r3, fp, #4294967295
 802494c:	4313      	orrs	r3, r2
 802494e:	4606      	mov	r6, r0
 8024950:	460f      	mov	r7, r1
 8024952:	f040 81eb 	bne.w	8024d2c <__ieee754_pow+0x6c4>
 8024956:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8024a10 <__ieee754_pow+0x3a8>
 802495a:	e9dd 4500 	ldrd	r4, r5, [sp]
 802495e:	2400      	movs	r4, #0
 8024960:	4622      	mov	r2, r4
 8024962:	462b      	mov	r3, r5
 8024964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024968:	ed8d 7b02 	vstr	d7, [sp, #8]
 802496c:	f7db fca4 	bl	80002b8 <__aeabi_dsub>
 8024970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024974:	f7db fe54 	bl	8000620 <__aeabi_dmul>
 8024978:	e9dd 2300 	ldrd	r2, r3, [sp]
 802497c:	4680      	mov	r8, r0
 802497e:	4689      	mov	r9, r1
 8024980:	4630      	mov	r0, r6
 8024982:	4639      	mov	r1, r7
 8024984:	f7db fe4c 	bl	8000620 <__aeabi_dmul>
 8024988:	4602      	mov	r2, r0
 802498a:	460b      	mov	r3, r1
 802498c:	4640      	mov	r0, r8
 802498e:	4649      	mov	r1, r9
 8024990:	f7db fc94 	bl	80002bc <__adddf3>
 8024994:	4622      	mov	r2, r4
 8024996:	462b      	mov	r3, r5
 8024998:	4680      	mov	r8, r0
 802499a:	4689      	mov	r9, r1
 802499c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80249a0:	f7db fe3e 	bl	8000620 <__aeabi_dmul>
 80249a4:	460b      	mov	r3, r1
 80249a6:	4604      	mov	r4, r0
 80249a8:	460d      	mov	r5, r1
 80249aa:	4602      	mov	r2, r0
 80249ac:	4649      	mov	r1, r9
 80249ae:	4640      	mov	r0, r8
 80249b0:	e9cd 4500 	strd	r4, r5, [sp]
 80249b4:	f7db fc82 	bl	80002bc <__adddf3>
 80249b8:	4b1c      	ldr	r3, [pc, #112]	; (8024a2c <__ieee754_pow+0x3c4>)
 80249ba:	4299      	cmp	r1, r3
 80249bc:	4606      	mov	r6, r0
 80249be:	460f      	mov	r7, r1
 80249c0:	468b      	mov	fp, r1
 80249c2:	f340 82f7 	ble.w	8024fb4 <__ieee754_pow+0x94c>
 80249c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80249ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80249ce:	4303      	orrs	r3, r0
 80249d0:	f000 81ea 	beq.w	8024da8 <__ieee754_pow+0x740>
 80249d4:	a310      	add	r3, pc, #64	; (adr r3, 8024a18 <__ieee754_pow+0x3b0>)
 80249d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80249de:	f7db fe1f 	bl	8000620 <__aeabi_dmul>
 80249e2:	a30d      	add	r3, pc, #52	; (adr r3, 8024a18 <__ieee754_pow+0x3b0>)
 80249e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249e8:	e6d5      	b.n	8024796 <__ieee754_pow+0x12e>
 80249ea:	bf00      	nop
 80249ec:	f3af 8000 	nop.w
 80249f0:	60000000 	.word	0x60000000
 80249f4:	3ff71547 	.word	0x3ff71547
 80249f8:	f85ddf44 	.word	0xf85ddf44
 80249fc:	3e54ae0b 	.word	0x3e54ae0b
 8024a00:	55555555 	.word	0x55555555
 8024a04:	3fd55555 	.word	0x3fd55555
 8024a08:	652b82fe 	.word	0x652b82fe
 8024a0c:	3ff71547 	.word	0x3ff71547
 8024a10:	00000000 	.word	0x00000000
 8024a14:	bff00000 	.word	0xbff00000
 8024a18:	8800759c 	.word	0x8800759c
 8024a1c:	7e37e43c 	.word	0x7e37e43c
 8024a20:	3ff00000 	.word	0x3ff00000
 8024a24:	3fd00000 	.word	0x3fd00000
 8024a28:	3fe00000 	.word	0x3fe00000
 8024a2c:	408fffff 	.word	0x408fffff
 8024a30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024a34:	f04f 0200 	mov.w	r2, #0
 8024a38:	da05      	bge.n	8024a46 <__ieee754_pow+0x3de>
 8024a3a:	4bd3      	ldr	r3, [pc, #844]	; (8024d88 <__ieee754_pow+0x720>)
 8024a3c:	f7db fdf0 	bl	8000620 <__aeabi_dmul>
 8024a40:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8024a44:	460c      	mov	r4, r1
 8024a46:	1523      	asrs	r3, r4, #20
 8024a48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024a4c:	4413      	add	r3, r2
 8024a4e:	9307      	str	r3, [sp, #28]
 8024a50:	4bce      	ldr	r3, [pc, #824]	; (8024d8c <__ieee754_pow+0x724>)
 8024a52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8024a56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8024a5a:	429c      	cmp	r4, r3
 8024a5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8024a60:	dd08      	ble.n	8024a74 <__ieee754_pow+0x40c>
 8024a62:	4bcb      	ldr	r3, [pc, #812]	; (8024d90 <__ieee754_pow+0x728>)
 8024a64:	429c      	cmp	r4, r3
 8024a66:	f340 815e 	ble.w	8024d26 <__ieee754_pow+0x6be>
 8024a6a:	9b07      	ldr	r3, [sp, #28]
 8024a6c:	3301      	adds	r3, #1
 8024a6e:	9307      	str	r3, [sp, #28]
 8024a70:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8024a74:	f04f 0a00 	mov.w	sl, #0
 8024a78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8024a7c:	930c      	str	r3, [sp, #48]	; 0x30
 8024a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024a80:	4bc4      	ldr	r3, [pc, #784]	; (8024d94 <__ieee754_pow+0x72c>)
 8024a82:	4413      	add	r3, r2
 8024a84:	ed93 7b00 	vldr	d7, [r3]
 8024a88:	4629      	mov	r1, r5
 8024a8a:	ec53 2b17 	vmov	r2, r3, d7
 8024a8e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8024a92:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024a96:	f7db fc0f 	bl	80002b8 <__aeabi_dsub>
 8024a9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024a9e:	4606      	mov	r6, r0
 8024aa0:	460f      	mov	r7, r1
 8024aa2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024aa6:	f7db fc09 	bl	80002bc <__adddf3>
 8024aaa:	4602      	mov	r2, r0
 8024aac:	460b      	mov	r3, r1
 8024aae:	2000      	movs	r0, #0
 8024ab0:	49b9      	ldr	r1, [pc, #740]	; (8024d98 <__ieee754_pow+0x730>)
 8024ab2:	f7db fedf 	bl	8000874 <__aeabi_ddiv>
 8024ab6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8024aba:	4602      	mov	r2, r0
 8024abc:	460b      	mov	r3, r1
 8024abe:	4630      	mov	r0, r6
 8024ac0:	4639      	mov	r1, r7
 8024ac2:	f7db fdad 	bl	8000620 <__aeabi_dmul>
 8024ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024aca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8024ace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8024ad2:	2300      	movs	r3, #0
 8024ad4:	9302      	str	r3, [sp, #8]
 8024ad6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8024ada:	106d      	asrs	r5, r5, #1
 8024adc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8024ae0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8024ae4:	2200      	movs	r2, #0
 8024ae6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8024aea:	4640      	mov	r0, r8
 8024aec:	4649      	mov	r1, r9
 8024aee:	4614      	mov	r4, r2
 8024af0:	461d      	mov	r5, r3
 8024af2:	f7db fd95 	bl	8000620 <__aeabi_dmul>
 8024af6:	4602      	mov	r2, r0
 8024af8:	460b      	mov	r3, r1
 8024afa:	4630      	mov	r0, r6
 8024afc:	4639      	mov	r1, r7
 8024afe:	f7db fbdb 	bl	80002b8 <__aeabi_dsub>
 8024b02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024b06:	4606      	mov	r6, r0
 8024b08:	460f      	mov	r7, r1
 8024b0a:	4620      	mov	r0, r4
 8024b0c:	4629      	mov	r1, r5
 8024b0e:	f7db fbd3 	bl	80002b8 <__aeabi_dsub>
 8024b12:	4602      	mov	r2, r0
 8024b14:	460b      	mov	r3, r1
 8024b16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024b1a:	f7db fbcd 	bl	80002b8 <__aeabi_dsub>
 8024b1e:	4642      	mov	r2, r8
 8024b20:	464b      	mov	r3, r9
 8024b22:	f7db fd7d 	bl	8000620 <__aeabi_dmul>
 8024b26:	4602      	mov	r2, r0
 8024b28:	460b      	mov	r3, r1
 8024b2a:	4630      	mov	r0, r6
 8024b2c:	4639      	mov	r1, r7
 8024b2e:	f7db fbc3 	bl	80002b8 <__aeabi_dsub>
 8024b32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8024b36:	f7db fd73 	bl	8000620 <__aeabi_dmul>
 8024b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024b3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024b42:	4610      	mov	r0, r2
 8024b44:	4619      	mov	r1, r3
 8024b46:	f7db fd6b 	bl	8000620 <__aeabi_dmul>
 8024b4a:	a37b      	add	r3, pc, #492	; (adr r3, 8024d38 <__ieee754_pow+0x6d0>)
 8024b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b50:	4604      	mov	r4, r0
 8024b52:	460d      	mov	r5, r1
 8024b54:	f7db fd64 	bl	8000620 <__aeabi_dmul>
 8024b58:	a379      	add	r3, pc, #484	; (adr r3, 8024d40 <__ieee754_pow+0x6d8>)
 8024b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b5e:	f7db fbad 	bl	80002bc <__adddf3>
 8024b62:	4622      	mov	r2, r4
 8024b64:	462b      	mov	r3, r5
 8024b66:	f7db fd5b 	bl	8000620 <__aeabi_dmul>
 8024b6a:	a377      	add	r3, pc, #476	; (adr r3, 8024d48 <__ieee754_pow+0x6e0>)
 8024b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b70:	f7db fba4 	bl	80002bc <__adddf3>
 8024b74:	4622      	mov	r2, r4
 8024b76:	462b      	mov	r3, r5
 8024b78:	f7db fd52 	bl	8000620 <__aeabi_dmul>
 8024b7c:	a374      	add	r3, pc, #464	; (adr r3, 8024d50 <__ieee754_pow+0x6e8>)
 8024b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b82:	f7db fb9b 	bl	80002bc <__adddf3>
 8024b86:	4622      	mov	r2, r4
 8024b88:	462b      	mov	r3, r5
 8024b8a:	f7db fd49 	bl	8000620 <__aeabi_dmul>
 8024b8e:	a372      	add	r3, pc, #456	; (adr r3, 8024d58 <__ieee754_pow+0x6f0>)
 8024b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b94:	f7db fb92 	bl	80002bc <__adddf3>
 8024b98:	4622      	mov	r2, r4
 8024b9a:	462b      	mov	r3, r5
 8024b9c:	f7db fd40 	bl	8000620 <__aeabi_dmul>
 8024ba0:	a36f      	add	r3, pc, #444	; (adr r3, 8024d60 <__ieee754_pow+0x6f8>)
 8024ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ba6:	f7db fb89 	bl	80002bc <__adddf3>
 8024baa:	4622      	mov	r2, r4
 8024bac:	4606      	mov	r6, r0
 8024bae:	460f      	mov	r7, r1
 8024bb0:	462b      	mov	r3, r5
 8024bb2:	4620      	mov	r0, r4
 8024bb4:	4629      	mov	r1, r5
 8024bb6:	f7db fd33 	bl	8000620 <__aeabi_dmul>
 8024bba:	4602      	mov	r2, r0
 8024bbc:	460b      	mov	r3, r1
 8024bbe:	4630      	mov	r0, r6
 8024bc0:	4639      	mov	r1, r7
 8024bc2:	f7db fd2d 	bl	8000620 <__aeabi_dmul>
 8024bc6:	4642      	mov	r2, r8
 8024bc8:	4604      	mov	r4, r0
 8024bca:	460d      	mov	r5, r1
 8024bcc:	464b      	mov	r3, r9
 8024bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024bd2:	f7db fb73 	bl	80002bc <__adddf3>
 8024bd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8024bda:	f7db fd21 	bl	8000620 <__aeabi_dmul>
 8024bde:	4622      	mov	r2, r4
 8024be0:	462b      	mov	r3, r5
 8024be2:	f7db fb6b 	bl	80002bc <__adddf3>
 8024be6:	4642      	mov	r2, r8
 8024be8:	4606      	mov	r6, r0
 8024bea:	460f      	mov	r7, r1
 8024bec:	464b      	mov	r3, r9
 8024bee:	4640      	mov	r0, r8
 8024bf0:	4649      	mov	r1, r9
 8024bf2:	f7db fd15 	bl	8000620 <__aeabi_dmul>
 8024bf6:	2200      	movs	r2, #0
 8024bf8:	4b68      	ldr	r3, [pc, #416]	; (8024d9c <__ieee754_pow+0x734>)
 8024bfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8024bfe:	f7db fb5d 	bl	80002bc <__adddf3>
 8024c02:	4632      	mov	r2, r6
 8024c04:	463b      	mov	r3, r7
 8024c06:	f7db fb59 	bl	80002bc <__adddf3>
 8024c0a:	9802      	ldr	r0, [sp, #8]
 8024c0c:	460d      	mov	r5, r1
 8024c0e:	4604      	mov	r4, r0
 8024c10:	4602      	mov	r2, r0
 8024c12:	460b      	mov	r3, r1
 8024c14:	4640      	mov	r0, r8
 8024c16:	4649      	mov	r1, r9
 8024c18:	f7db fd02 	bl	8000620 <__aeabi_dmul>
 8024c1c:	2200      	movs	r2, #0
 8024c1e:	4680      	mov	r8, r0
 8024c20:	4689      	mov	r9, r1
 8024c22:	4b5e      	ldr	r3, [pc, #376]	; (8024d9c <__ieee754_pow+0x734>)
 8024c24:	4620      	mov	r0, r4
 8024c26:	4629      	mov	r1, r5
 8024c28:	f7db fb46 	bl	80002b8 <__aeabi_dsub>
 8024c2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024c30:	f7db fb42 	bl	80002b8 <__aeabi_dsub>
 8024c34:	4602      	mov	r2, r0
 8024c36:	460b      	mov	r3, r1
 8024c38:	4630      	mov	r0, r6
 8024c3a:	4639      	mov	r1, r7
 8024c3c:	f7db fb3c 	bl	80002b8 <__aeabi_dsub>
 8024c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024c44:	f7db fcec 	bl	8000620 <__aeabi_dmul>
 8024c48:	4622      	mov	r2, r4
 8024c4a:	4606      	mov	r6, r0
 8024c4c:	460f      	mov	r7, r1
 8024c4e:	462b      	mov	r3, r5
 8024c50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024c54:	f7db fce4 	bl	8000620 <__aeabi_dmul>
 8024c58:	4602      	mov	r2, r0
 8024c5a:	460b      	mov	r3, r1
 8024c5c:	4630      	mov	r0, r6
 8024c5e:	4639      	mov	r1, r7
 8024c60:	f7db fb2c 	bl	80002bc <__adddf3>
 8024c64:	4606      	mov	r6, r0
 8024c66:	460f      	mov	r7, r1
 8024c68:	4602      	mov	r2, r0
 8024c6a:	460b      	mov	r3, r1
 8024c6c:	4640      	mov	r0, r8
 8024c6e:	4649      	mov	r1, r9
 8024c70:	f7db fb24 	bl	80002bc <__adddf3>
 8024c74:	9802      	ldr	r0, [sp, #8]
 8024c76:	a33c      	add	r3, pc, #240	; (adr r3, 8024d68 <__ieee754_pow+0x700>)
 8024c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c7c:	4604      	mov	r4, r0
 8024c7e:	460d      	mov	r5, r1
 8024c80:	f7db fcce 	bl	8000620 <__aeabi_dmul>
 8024c84:	4642      	mov	r2, r8
 8024c86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024c8a:	464b      	mov	r3, r9
 8024c8c:	4620      	mov	r0, r4
 8024c8e:	4629      	mov	r1, r5
 8024c90:	f7db fb12 	bl	80002b8 <__aeabi_dsub>
 8024c94:	4602      	mov	r2, r0
 8024c96:	460b      	mov	r3, r1
 8024c98:	4630      	mov	r0, r6
 8024c9a:	4639      	mov	r1, r7
 8024c9c:	f7db fb0c 	bl	80002b8 <__aeabi_dsub>
 8024ca0:	a333      	add	r3, pc, #204	; (adr r3, 8024d70 <__ieee754_pow+0x708>)
 8024ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ca6:	f7db fcbb 	bl	8000620 <__aeabi_dmul>
 8024caa:	a333      	add	r3, pc, #204	; (adr r3, 8024d78 <__ieee754_pow+0x710>)
 8024cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cb0:	4606      	mov	r6, r0
 8024cb2:	460f      	mov	r7, r1
 8024cb4:	4620      	mov	r0, r4
 8024cb6:	4629      	mov	r1, r5
 8024cb8:	f7db fcb2 	bl	8000620 <__aeabi_dmul>
 8024cbc:	4602      	mov	r2, r0
 8024cbe:	460b      	mov	r3, r1
 8024cc0:	4630      	mov	r0, r6
 8024cc2:	4639      	mov	r1, r7
 8024cc4:	f7db fafa 	bl	80002bc <__adddf3>
 8024cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024cca:	4b35      	ldr	r3, [pc, #212]	; (8024da0 <__ieee754_pow+0x738>)
 8024ccc:	4413      	add	r3, r2
 8024cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cd2:	f7db faf3 	bl	80002bc <__adddf3>
 8024cd6:	4604      	mov	r4, r0
 8024cd8:	9807      	ldr	r0, [sp, #28]
 8024cda:	460d      	mov	r5, r1
 8024cdc:	f7db fc3a 	bl	8000554 <__aeabi_i2d>
 8024ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024ce2:	4b30      	ldr	r3, [pc, #192]	; (8024da4 <__ieee754_pow+0x73c>)
 8024ce4:	4413      	add	r3, r2
 8024ce6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024cea:	4606      	mov	r6, r0
 8024cec:	460f      	mov	r7, r1
 8024cee:	4622      	mov	r2, r4
 8024cf0:	462b      	mov	r3, r5
 8024cf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024cf6:	f7db fae1 	bl	80002bc <__adddf3>
 8024cfa:	4642      	mov	r2, r8
 8024cfc:	464b      	mov	r3, r9
 8024cfe:	f7db fadd 	bl	80002bc <__adddf3>
 8024d02:	4632      	mov	r2, r6
 8024d04:	463b      	mov	r3, r7
 8024d06:	f7db fad9 	bl	80002bc <__adddf3>
 8024d0a:	9802      	ldr	r0, [sp, #8]
 8024d0c:	4632      	mov	r2, r6
 8024d0e:	463b      	mov	r3, r7
 8024d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024d14:	f7db fad0 	bl	80002b8 <__aeabi_dsub>
 8024d18:	4642      	mov	r2, r8
 8024d1a:	464b      	mov	r3, r9
 8024d1c:	f7db facc 	bl	80002b8 <__aeabi_dsub>
 8024d20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8024d24:	e607      	b.n	8024936 <__ieee754_pow+0x2ce>
 8024d26:	f04f 0a01 	mov.w	sl, #1
 8024d2a:	e6a5      	b.n	8024a78 <__ieee754_pow+0x410>
 8024d2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8024d80 <__ieee754_pow+0x718>
 8024d30:	e613      	b.n	802495a <__ieee754_pow+0x2f2>
 8024d32:	bf00      	nop
 8024d34:	f3af 8000 	nop.w
 8024d38:	4a454eef 	.word	0x4a454eef
 8024d3c:	3fca7e28 	.word	0x3fca7e28
 8024d40:	93c9db65 	.word	0x93c9db65
 8024d44:	3fcd864a 	.word	0x3fcd864a
 8024d48:	a91d4101 	.word	0xa91d4101
 8024d4c:	3fd17460 	.word	0x3fd17460
 8024d50:	518f264d 	.word	0x518f264d
 8024d54:	3fd55555 	.word	0x3fd55555
 8024d58:	db6fabff 	.word	0xdb6fabff
 8024d5c:	3fdb6db6 	.word	0x3fdb6db6
 8024d60:	33333303 	.word	0x33333303
 8024d64:	3fe33333 	.word	0x3fe33333
 8024d68:	e0000000 	.word	0xe0000000
 8024d6c:	3feec709 	.word	0x3feec709
 8024d70:	dc3a03fd 	.word	0xdc3a03fd
 8024d74:	3feec709 	.word	0x3feec709
 8024d78:	145b01f5 	.word	0x145b01f5
 8024d7c:	be3e2fe0 	.word	0xbe3e2fe0
 8024d80:	00000000 	.word	0x00000000
 8024d84:	3ff00000 	.word	0x3ff00000
 8024d88:	43400000 	.word	0x43400000
 8024d8c:	0003988e 	.word	0x0003988e
 8024d90:	000bb679 	.word	0x000bb679
 8024d94:	080327f8 	.word	0x080327f8
 8024d98:	3ff00000 	.word	0x3ff00000
 8024d9c:	40080000 	.word	0x40080000
 8024da0:	08032818 	.word	0x08032818
 8024da4:	08032808 	.word	0x08032808
 8024da8:	a3b6      	add	r3, pc, #728	; (adr r3, 8025084 <__ieee754_pow+0xa1c>)
 8024daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024dae:	4640      	mov	r0, r8
 8024db0:	4649      	mov	r1, r9
 8024db2:	f7db fa83 	bl	80002bc <__adddf3>
 8024db6:	4622      	mov	r2, r4
 8024db8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024dbc:	462b      	mov	r3, r5
 8024dbe:	4630      	mov	r0, r6
 8024dc0:	4639      	mov	r1, r7
 8024dc2:	f7db fa79 	bl	80002b8 <__aeabi_dsub>
 8024dc6:	4602      	mov	r2, r0
 8024dc8:	460b      	mov	r3, r1
 8024dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024dce:	f7db feb7 	bl	8000b40 <__aeabi_dcmpgt>
 8024dd2:	2800      	cmp	r0, #0
 8024dd4:	f47f adfe 	bne.w	80249d4 <__ieee754_pow+0x36c>
 8024dd8:	4aa5      	ldr	r2, [pc, #660]	; (8025070 <__ieee754_pow+0xa08>)
 8024dda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024dde:	4293      	cmp	r3, r2
 8024de0:	f340 810c 	ble.w	8024ffc <__ieee754_pow+0x994>
 8024de4:	151b      	asrs	r3, r3, #20
 8024de6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8024dea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8024dee:	fa4a f303 	asr.w	r3, sl, r3
 8024df2:	445b      	add	r3, fp
 8024df4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024df8:	4e9e      	ldr	r6, [pc, #632]	; (8025074 <__ieee754_pow+0xa0c>)
 8024dfa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8024dfe:	4116      	asrs	r6, r2
 8024e00:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8024e04:	2000      	movs	r0, #0
 8024e06:	ea23 0106 	bic.w	r1, r3, r6
 8024e0a:	f1c2 0214 	rsb	r2, r2, #20
 8024e0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8024e12:	fa4a fa02 	asr.w	sl, sl, r2
 8024e16:	f1bb 0f00 	cmp.w	fp, #0
 8024e1a:	4602      	mov	r2, r0
 8024e1c:	460b      	mov	r3, r1
 8024e1e:	4620      	mov	r0, r4
 8024e20:	4629      	mov	r1, r5
 8024e22:	bfb8      	it	lt
 8024e24:	f1ca 0a00 	rsblt	sl, sl, #0
 8024e28:	f7db fa46 	bl	80002b8 <__aeabi_dsub>
 8024e2c:	e9cd 0100 	strd	r0, r1, [sp]
 8024e30:	4642      	mov	r2, r8
 8024e32:	464b      	mov	r3, r9
 8024e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024e38:	f7db fa40 	bl	80002bc <__adddf3>
 8024e3c:	2000      	movs	r0, #0
 8024e3e:	a37a      	add	r3, pc, #488	; (adr r3, 8025028 <__ieee754_pow+0x9c0>)
 8024e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e44:	4604      	mov	r4, r0
 8024e46:	460d      	mov	r5, r1
 8024e48:	f7db fbea 	bl	8000620 <__aeabi_dmul>
 8024e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024e50:	4606      	mov	r6, r0
 8024e52:	460f      	mov	r7, r1
 8024e54:	4620      	mov	r0, r4
 8024e56:	4629      	mov	r1, r5
 8024e58:	f7db fa2e 	bl	80002b8 <__aeabi_dsub>
 8024e5c:	4602      	mov	r2, r0
 8024e5e:	460b      	mov	r3, r1
 8024e60:	4640      	mov	r0, r8
 8024e62:	4649      	mov	r1, r9
 8024e64:	f7db fa28 	bl	80002b8 <__aeabi_dsub>
 8024e68:	a371      	add	r3, pc, #452	; (adr r3, 8025030 <__ieee754_pow+0x9c8>)
 8024e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e6e:	f7db fbd7 	bl	8000620 <__aeabi_dmul>
 8024e72:	a371      	add	r3, pc, #452	; (adr r3, 8025038 <__ieee754_pow+0x9d0>)
 8024e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e78:	4680      	mov	r8, r0
 8024e7a:	4689      	mov	r9, r1
 8024e7c:	4620      	mov	r0, r4
 8024e7e:	4629      	mov	r1, r5
 8024e80:	f7db fbce 	bl	8000620 <__aeabi_dmul>
 8024e84:	4602      	mov	r2, r0
 8024e86:	460b      	mov	r3, r1
 8024e88:	4640      	mov	r0, r8
 8024e8a:	4649      	mov	r1, r9
 8024e8c:	f7db fa16 	bl	80002bc <__adddf3>
 8024e90:	4604      	mov	r4, r0
 8024e92:	460d      	mov	r5, r1
 8024e94:	4602      	mov	r2, r0
 8024e96:	460b      	mov	r3, r1
 8024e98:	4630      	mov	r0, r6
 8024e9a:	4639      	mov	r1, r7
 8024e9c:	f7db fa0e 	bl	80002bc <__adddf3>
 8024ea0:	4632      	mov	r2, r6
 8024ea2:	463b      	mov	r3, r7
 8024ea4:	4680      	mov	r8, r0
 8024ea6:	4689      	mov	r9, r1
 8024ea8:	f7db fa06 	bl	80002b8 <__aeabi_dsub>
 8024eac:	4602      	mov	r2, r0
 8024eae:	460b      	mov	r3, r1
 8024eb0:	4620      	mov	r0, r4
 8024eb2:	4629      	mov	r1, r5
 8024eb4:	f7db fa00 	bl	80002b8 <__aeabi_dsub>
 8024eb8:	4642      	mov	r2, r8
 8024eba:	4606      	mov	r6, r0
 8024ebc:	460f      	mov	r7, r1
 8024ebe:	464b      	mov	r3, r9
 8024ec0:	4640      	mov	r0, r8
 8024ec2:	4649      	mov	r1, r9
 8024ec4:	f7db fbac 	bl	8000620 <__aeabi_dmul>
 8024ec8:	a35d      	add	r3, pc, #372	; (adr r3, 8025040 <__ieee754_pow+0x9d8>)
 8024eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ece:	4604      	mov	r4, r0
 8024ed0:	460d      	mov	r5, r1
 8024ed2:	f7db fba5 	bl	8000620 <__aeabi_dmul>
 8024ed6:	a35c      	add	r3, pc, #368	; (adr r3, 8025048 <__ieee754_pow+0x9e0>)
 8024ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024edc:	f7db f9ec 	bl	80002b8 <__aeabi_dsub>
 8024ee0:	4622      	mov	r2, r4
 8024ee2:	462b      	mov	r3, r5
 8024ee4:	f7db fb9c 	bl	8000620 <__aeabi_dmul>
 8024ee8:	a359      	add	r3, pc, #356	; (adr r3, 8025050 <__ieee754_pow+0x9e8>)
 8024eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024eee:	f7db f9e5 	bl	80002bc <__adddf3>
 8024ef2:	4622      	mov	r2, r4
 8024ef4:	462b      	mov	r3, r5
 8024ef6:	f7db fb93 	bl	8000620 <__aeabi_dmul>
 8024efa:	a357      	add	r3, pc, #348	; (adr r3, 8025058 <__ieee754_pow+0x9f0>)
 8024efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f00:	f7db f9da 	bl	80002b8 <__aeabi_dsub>
 8024f04:	4622      	mov	r2, r4
 8024f06:	462b      	mov	r3, r5
 8024f08:	f7db fb8a 	bl	8000620 <__aeabi_dmul>
 8024f0c:	a354      	add	r3, pc, #336	; (adr r3, 8025060 <__ieee754_pow+0x9f8>)
 8024f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f12:	f7db f9d3 	bl	80002bc <__adddf3>
 8024f16:	4622      	mov	r2, r4
 8024f18:	462b      	mov	r3, r5
 8024f1a:	f7db fb81 	bl	8000620 <__aeabi_dmul>
 8024f1e:	4602      	mov	r2, r0
 8024f20:	460b      	mov	r3, r1
 8024f22:	4640      	mov	r0, r8
 8024f24:	4649      	mov	r1, r9
 8024f26:	f7db f9c7 	bl	80002b8 <__aeabi_dsub>
 8024f2a:	4604      	mov	r4, r0
 8024f2c:	460d      	mov	r5, r1
 8024f2e:	4602      	mov	r2, r0
 8024f30:	460b      	mov	r3, r1
 8024f32:	4640      	mov	r0, r8
 8024f34:	4649      	mov	r1, r9
 8024f36:	f7db fb73 	bl	8000620 <__aeabi_dmul>
 8024f3a:	2200      	movs	r2, #0
 8024f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8024f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024f44:	4620      	mov	r0, r4
 8024f46:	4629      	mov	r1, r5
 8024f48:	f7db f9b6 	bl	80002b8 <__aeabi_dsub>
 8024f4c:	4602      	mov	r2, r0
 8024f4e:	460b      	mov	r3, r1
 8024f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024f54:	f7db fc8e 	bl	8000874 <__aeabi_ddiv>
 8024f58:	4632      	mov	r2, r6
 8024f5a:	4604      	mov	r4, r0
 8024f5c:	460d      	mov	r5, r1
 8024f5e:	463b      	mov	r3, r7
 8024f60:	4640      	mov	r0, r8
 8024f62:	4649      	mov	r1, r9
 8024f64:	f7db fb5c 	bl	8000620 <__aeabi_dmul>
 8024f68:	4632      	mov	r2, r6
 8024f6a:	463b      	mov	r3, r7
 8024f6c:	f7db f9a6 	bl	80002bc <__adddf3>
 8024f70:	4602      	mov	r2, r0
 8024f72:	460b      	mov	r3, r1
 8024f74:	4620      	mov	r0, r4
 8024f76:	4629      	mov	r1, r5
 8024f78:	f7db f99e 	bl	80002b8 <__aeabi_dsub>
 8024f7c:	4642      	mov	r2, r8
 8024f7e:	464b      	mov	r3, r9
 8024f80:	f7db f99a 	bl	80002b8 <__aeabi_dsub>
 8024f84:	4602      	mov	r2, r0
 8024f86:	460b      	mov	r3, r1
 8024f88:	2000      	movs	r0, #0
 8024f8a:	493b      	ldr	r1, [pc, #236]	; (8025078 <__ieee754_pow+0xa10>)
 8024f8c:	f7db f994 	bl	80002b8 <__aeabi_dsub>
 8024f90:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8024f94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024f98:	4602      	mov	r2, r0
 8024f9a:	460b      	mov	r3, r1
 8024f9c:	da31      	bge.n	8025002 <__ieee754_pow+0x99a>
 8024f9e:	4650      	mov	r0, sl
 8024fa0:	ec43 2b10 	vmov	d0, r2, r3
 8024fa4:	f000 fa0c 	bl	80253c0 <scalbn>
 8024fa8:	ec51 0b10 	vmov	r0, r1, d0
 8024fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024fb0:	f7ff bbf1 	b.w	8024796 <__ieee754_pow+0x12e>
 8024fb4:	4b31      	ldr	r3, [pc, #196]	; (802507c <__ieee754_pow+0xa14>)
 8024fb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024fba:	429e      	cmp	r6, r3
 8024fbc:	f77f af0c 	ble.w	8024dd8 <__ieee754_pow+0x770>
 8024fc0:	4b2f      	ldr	r3, [pc, #188]	; (8025080 <__ieee754_pow+0xa18>)
 8024fc2:	440b      	add	r3, r1
 8024fc4:	4303      	orrs	r3, r0
 8024fc6:	d00b      	beq.n	8024fe0 <__ieee754_pow+0x978>
 8024fc8:	a327      	add	r3, pc, #156	; (adr r3, 8025068 <__ieee754_pow+0xa00>)
 8024fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024fd2:	f7db fb25 	bl	8000620 <__aeabi_dmul>
 8024fd6:	a324      	add	r3, pc, #144	; (adr r3, 8025068 <__ieee754_pow+0xa00>)
 8024fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fdc:	f7ff bbdb 	b.w	8024796 <__ieee754_pow+0x12e>
 8024fe0:	4622      	mov	r2, r4
 8024fe2:	462b      	mov	r3, r5
 8024fe4:	f7db f968 	bl	80002b8 <__aeabi_dsub>
 8024fe8:	4602      	mov	r2, r0
 8024fea:	460b      	mov	r3, r1
 8024fec:	4640      	mov	r0, r8
 8024fee:	4649      	mov	r1, r9
 8024ff0:	f7db fd92 	bl	8000b18 <__aeabi_dcmple>
 8024ff4:	2800      	cmp	r0, #0
 8024ff6:	f43f aeef 	beq.w	8024dd8 <__ieee754_pow+0x770>
 8024ffa:	e7e5      	b.n	8024fc8 <__ieee754_pow+0x960>
 8024ffc:	f04f 0a00 	mov.w	sl, #0
 8025000:	e716      	b.n	8024e30 <__ieee754_pow+0x7c8>
 8025002:	4621      	mov	r1, r4
 8025004:	e7d2      	b.n	8024fac <__ieee754_pow+0x944>
 8025006:	2000      	movs	r0, #0
 8025008:	491b      	ldr	r1, [pc, #108]	; (8025078 <__ieee754_pow+0xa10>)
 802500a:	f7ff bb8d 	b.w	8024728 <__ieee754_pow+0xc0>
 802500e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025012:	f7ff bb89 	b.w	8024728 <__ieee754_pow+0xc0>
 8025016:	4630      	mov	r0, r6
 8025018:	4639      	mov	r1, r7
 802501a:	f7ff bb85 	b.w	8024728 <__ieee754_pow+0xc0>
 802501e:	4693      	mov	fp, r2
 8025020:	f7ff bb96 	b.w	8024750 <__ieee754_pow+0xe8>
 8025024:	f3af 8000 	nop.w
 8025028:	00000000 	.word	0x00000000
 802502c:	3fe62e43 	.word	0x3fe62e43
 8025030:	fefa39ef 	.word	0xfefa39ef
 8025034:	3fe62e42 	.word	0x3fe62e42
 8025038:	0ca86c39 	.word	0x0ca86c39
 802503c:	be205c61 	.word	0xbe205c61
 8025040:	72bea4d0 	.word	0x72bea4d0
 8025044:	3e663769 	.word	0x3e663769
 8025048:	c5d26bf1 	.word	0xc5d26bf1
 802504c:	3ebbbd41 	.word	0x3ebbbd41
 8025050:	af25de2c 	.word	0xaf25de2c
 8025054:	3f11566a 	.word	0x3f11566a
 8025058:	16bebd93 	.word	0x16bebd93
 802505c:	3f66c16c 	.word	0x3f66c16c
 8025060:	5555553e 	.word	0x5555553e
 8025064:	3fc55555 	.word	0x3fc55555
 8025068:	c2f8f359 	.word	0xc2f8f359
 802506c:	01a56e1f 	.word	0x01a56e1f
 8025070:	3fe00000 	.word	0x3fe00000
 8025074:	000fffff 	.word	0x000fffff
 8025078:	3ff00000 	.word	0x3ff00000
 802507c:	4090cbff 	.word	0x4090cbff
 8025080:	3f6f3400 	.word	0x3f6f3400
 8025084:	652b82fe 	.word	0x652b82fe
 8025088:	3c971547 	.word	0x3c971547

0802508c <__ieee754_sqrt>:
 802508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025090:	ec55 4b10 	vmov	r4, r5, d0
 8025094:	4e54      	ldr	r6, [pc, #336]	; (80251e8 <__ieee754_sqrt+0x15c>)
 8025096:	43ae      	bics	r6, r5
 8025098:	ee10 0a10 	vmov	r0, s0
 802509c:	462b      	mov	r3, r5
 802509e:	462a      	mov	r2, r5
 80250a0:	4621      	mov	r1, r4
 80250a2:	d113      	bne.n	80250cc <__ieee754_sqrt+0x40>
 80250a4:	ee10 2a10 	vmov	r2, s0
 80250a8:	462b      	mov	r3, r5
 80250aa:	ee10 0a10 	vmov	r0, s0
 80250ae:	4629      	mov	r1, r5
 80250b0:	f7db fab6 	bl	8000620 <__aeabi_dmul>
 80250b4:	4602      	mov	r2, r0
 80250b6:	460b      	mov	r3, r1
 80250b8:	4620      	mov	r0, r4
 80250ba:	4629      	mov	r1, r5
 80250bc:	f7db f8fe 	bl	80002bc <__adddf3>
 80250c0:	4604      	mov	r4, r0
 80250c2:	460d      	mov	r5, r1
 80250c4:	ec45 4b10 	vmov	d0, r4, r5
 80250c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80250cc:	2d00      	cmp	r5, #0
 80250ce:	dc10      	bgt.n	80250f2 <__ieee754_sqrt+0x66>
 80250d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80250d4:	4330      	orrs	r0, r6
 80250d6:	d0f5      	beq.n	80250c4 <__ieee754_sqrt+0x38>
 80250d8:	b15d      	cbz	r5, 80250f2 <__ieee754_sqrt+0x66>
 80250da:	ee10 2a10 	vmov	r2, s0
 80250de:	462b      	mov	r3, r5
 80250e0:	4620      	mov	r0, r4
 80250e2:	4629      	mov	r1, r5
 80250e4:	f7db f8e8 	bl	80002b8 <__aeabi_dsub>
 80250e8:	4602      	mov	r2, r0
 80250ea:	460b      	mov	r3, r1
 80250ec:	f7db fbc2 	bl	8000874 <__aeabi_ddiv>
 80250f0:	e7e6      	b.n	80250c0 <__ieee754_sqrt+0x34>
 80250f2:	151b      	asrs	r3, r3, #20
 80250f4:	d10c      	bne.n	8025110 <__ieee754_sqrt+0x84>
 80250f6:	2a00      	cmp	r2, #0
 80250f8:	d06d      	beq.n	80251d6 <__ieee754_sqrt+0x14a>
 80250fa:	2000      	movs	r0, #0
 80250fc:	02d6      	lsls	r6, r2, #11
 80250fe:	d56e      	bpl.n	80251de <__ieee754_sqrt+0x152>
 8025100:	1e44      	subs	r4, r0, #1
 8025102:	1b1b      	subs	r3, r3, r4
 8025104:	f1c0 0420 	rsb	r4, r0, #32
 8025108:	fa21 f404 	lsr.w	r4, r1, r4
 802510c:	4322      	orrs	r2, r4
 802510e:	4081      	lsls	r1, r0
 8025110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8025114:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8025118:	07dd      	lsls	r5, r3, #31
 802511a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 802511e:	bf42      	ittt	mi
 8025120:	0052      	lslmi	r2, r2, #1
 8025122:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8025126:	0049      	lslmi	r1, r1, #1
 8025128:	1058      	asrs	r0, r3, #1
 802512a:	2500      	movs	r5, #0
 802512c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8025130:	441a      	add	r2, r3
 8025132:	0049      	lsls	r1, r1, #1
 8025134:	2316      	movs	r3, #22
 8025136:	462c      	mov	r4, r5
 8025138:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 802513c:	19a7      	adds	r7, r4, r6
 802513e:	4297      	cmp	r7, r2
 8025140:	bfde      	ittt	le
 8025142:	1bd2      	suble	r2, r2, r7
 8025144:	19bc      	addle	r4, r7, r6
 8025146:	19ad      	addle	r5, r5, r6
 8025148:	0052      	lsls	r2, r2, #1
 802514a:	3b01      	subs	r3, #1
 802514c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8025150:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8025154:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8025158:	d1f0      	bne.n	802513c <__ieee754_sqrt+0xb0>
 802515a:	f04f 0e20 	mov.w	lr, #32
 802515e:	469c      	mov	ip, r3
 8025160:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8025164:	42a2      	cmp	r2, r4
 8025166:	eb06 070c 	add.w	r7, r6, ip
 802516a:	dc02      	bgt.n	8025172 <__ieee754_sqrt+0xe6>
 802516c:	d112      	bne.n	8025194 <__ieee754_sqrt+0x108>
 802516e:	428f      	cmp	r7, r1
 8025170:	d810      	bhi.n	8025194 <__ieee754_sqrt+0x108>
 8025172:	2f00      	cmp	r7, #0
 8025174:	eb07 0c06 	add.w	ip, r7, r6
 8025178:	da34      	bge.n	80251e4 <__ieee754_sqrt+0x158>
 802517a:	f1bc 0f00 	cmp.w	ip, #0
 802517e:	db31      	blt.n	80251e4 <__ieee754_sqrt+0x158>
 8025180:	f104 0801 	add.w	r8, r4, #1
 8025184:	1b12      	subs	r2, r2, r4
 8025186:	428f      	cmp	r7, r1
 8025188:	bf88      	it	hi
 802518a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802518e:	1bc9      	subs	r1, r1, r7
 8025190:	4433      	add	r3, r6
 8025192:	4644      	mov	r4, r8
 8025194:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8025198:	f1be 0e01 	subs.w	lr, lr, #1
 802519c:	443a      	add	r2, r7
 802519e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80251a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80251a6:	d1dd      	bne.n	8025164 <__ieee754_sqrt+0xd8>
 80251a8:	430a      	orrs	r2, r1
 80251aa:	d006      	beq.n	80251ba <__ieee754_sqrt+0x12e>
 80251ac:	1c5c      	adds	r4, r3, #1
 80251ae:	bf13      	iteet	ne
 80251b0:	3301      	addne	r3, #1
 80251b2:	3501      	addeq	r5, #1
 80251b4:	4673      	moveq	r3, lr
 80251b6:	f023 0301 	bicne.w	r3, r3, #1
 80251ba:	106a      	asrs	r2, r5, #1
 80251bc:	085b      	lsrs	r3, r3, #1
 80251be:	07e9      	lsls	r1, r5, #31
 80251c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80251c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80251c8:	bf48      	it	mi
 80251ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80251ce:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80251d2:	461c      	mov	r4, r3
 80251d4:	e776      	b.n	80250c4 <__ieee754_sqrt+0x38>
 80251d6:	0aca      	lsrs	r2, r1, #11
 80251d8:	3b15      	subs	r3, #21
 80251da:	0549      	lsls	r1, r1, #21
 80251dc:	e78b      	b.n	80250f6 <__ieee754_sqrt+0x6a>
 80251de:	0052      	lsls	r2, r2, #1
 80251e0:	3001      	adds	r0, #1
 80251e2:	e78b      	b.n	80250fc <__ieee754_sqrt+0x70>
 80251e4:	46a0      	mov	r8, r4
 80251e6:	e7cd      	b.n	8025184 <__ieee754_sqrt+0xf8>
 80251e8:	7ff00000 	.word	0x7ff00000

080251ec <__ieee754_sqrtf>:
 80251ec:	ee10 2a10 	vmov	r2, s0
 80251f0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80251f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80251f8:	b570      	push	{r4, r5, r6, lr}
 80251fa:	d302      	bcc.n	8025202 <__ieee754_sqrtf+0x16>
 80251fc:	eea0 0a00 	vfma.f32	s0, s0, s0
 8025200:	bd70      	pop	{r4, r5, r6, pc}
 8025202:	b3b1      	cbz	r1, 8025272 <__ieee754_sqrtf+0x86>
 8025204:	2a00      	cmp	r2, #0
 8025206:	da04      	bge.n	8025212 <__ieee754_sqrtf+0x26>
 8025208:	ee70 7a40 	vsub.f32	s15, s0, s0
 802520c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8025210:	bd70      	pop	{r4, r5, r6, pc}
 8025212:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8025216:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802521a:	d204      	bcs.n	8025226 <__ieee754_sqrtf+0x3a>
 802521c:	2100      	movs	r1, #0
 802521e:	0210      	lsls	r0, r2, #8
 8025220:	d528      	bpl.n	8025274 <__ieee754_sqrtf+0x88>
 8025222:	3901      	subs	r1, #1
 8025224:	1a5b      	subs	r3, r3, r1
 8025226:	3b7f      	subs	r3, #127	; 0x7f
 8025228:	f3c2 0216 	ubfx	r2, r2, #0, #23
 802522c:	07d9      	lsls	r1, r3, #31
 802522e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8025232:	bf48      	it	mi
 8025234:	0052      	lslmi	r2, r2, #1
 8025236:	1059      	asrs	r1, r3, #1
 8025238:	2300      	movs	r3, #0
 802523a:	0052      	lsls	r2, r2, #1
 802523c:	2419      	movs	r4, #25
 802523e:	461e      	mov	r6, r3
 8025240:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8025244:	1835      	adds	r5, r6, r0
 8025246:	4295      	cmp	r5, r2
 8025248:	bfde      	ittt	le
 802524a:	182e      	addle	r6, r5, r0
 802524c:	1b52      	suble	r2, r2, r5
 802524e:	181b      	addle	r3, r3, r0
 8025250:	3c01      	subs	r4, #1
 8025252:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025256:	ea4f 0050 	mov.w	r0, r0, lsr #1
 802525a:	d1f3      	bne.n	8025244 <__ieee754_sqrtf+0x58>
 802525c:	b112      	cbz	r2, 8025264 <__ieee754_sqrtf+0x78>
 802525e:	3301      	adds	r3, #1
 8025260:	f023 0301 	bic.w	r3, r3, #1
 8025264:	105b      	asrs	r3, r3, #1
 8025266:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 802526a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 802526e:	ee00 3a10 	vmov	s0, r3
 8025272:	bd70      	pop	{r4, r5, r6, pc}
 8025274:	0052      	lsls	r2, r2, #1
 8025276:	3101      	adds	r1, #1
 8025278:	e7d1      	b.n	802521e <__ieee754_sqrtf+0x32>

0802527a <fabs>:
 802527a:	ec53 2b10 	vmov	r2, r3, d0
 802527e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025282:	ec43 2b10 	vmov	d0, r2, r3
 8025286:	4770      	bx	lr

08025288 <finite>:
 8025288:	ee10 3a90 	vmov	r3, s1
 802528c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8025290:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8025294:	0fc0      	lsrs	r0, r0, #31
 8025296:	4770      	bx	lr

08025298 <matherr>:
 8025298:	2000      	movs	r0, #0
 802529a:	4770      	bx	lr
 802529c:	0000      	movs	r0, r0
	...

080252a0 <nan>:
 80252a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80252a8 <nan+0x8>
 80252a4:	4770      	bx	lr
 80252a6:	bf00      	nop
 80252a8:	00000000 	.word	0x00000000
 80252ac:	7ff80000 	.word	0x7ff80000

080252b0 <rint>:
 80252b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80252b2:	ec51 0b10 	vmov	r0, r1, d0
 80252b6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80252ba:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80252be:	2e13      	cmp	r6, #19
 80252c0:	ee10 7a10 	vmov	r7, s0
 80252c4:	460b      	mov	r3, r1
 80252c6:	4602      	mov	r2, r0
 80252c8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80252cc:	dc58      	bgt.n	8025380 <rint+0xd0>
 80252ce:	2e00      	cmp	r6, #0
 80252d0:	da2b      	bge.n	802532a <rint+0x7a>
 80252d2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80252d6:	4302      	orrs	r2, r0
 80252d8:	d023      	beq.n	8025322 <rint+0x72>
 80252da:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80252de:	4302      	orrs	r2, r0
 80252e0:	4251      	negs	r1, r2
 80252e2:	4311      	orrs	r1, r2
 80252e4:	0b09      	lsrs	r1, r1, #12
 80252e6:	0c5b      	lsrs	r3, r3, #17
 80252e8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80252ec:	045b      	lsls	r3, r3, #17
 80252ee:	ea41 0703 	orr.w	r7, r1, r3
 80252f2:	4b31      	ldr	r3, [pc, #196]	; (80253b8 <rint+0x108>)
 80252f4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80252f8:	4639      	mov	r1, r7
 80252fa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80252fe:	ee10 0a10 	vmov	r0, s0
 8025302:	4632      	mov	r2, r6
 8025304:	463b      	mov	r3, r7
 8025306:	f7da ffd9 	bl	80002bc <__adddf3>
 802530a:	e9cd 0100 	strd	r0, r1, [sp]
 802530e:	463b      	mov	r3, r7
 8025310:	4632      	mov	r2, r6
 8025312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025316:	f7da ffcf 	bl	80002b8 <__aeabi_dsub>
 802531a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802531e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8025322:	ec41 0b10 	vmov	d0, r0, r1
 8025326:	b003      	add	sp, #12
 8025328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802532a:	4c24      	ldr	r4, [pc, #144]	; (80253bc <rint+0x10c>)
 802532c:	4134      	asrs	r4, r6
 802532e:	ea01 0704 	and.w	r7, r1, r4
 8025332:	4307      	orrs	r7, r0
 8025334:	d0f5      	beq.n	8025322 <rint+0x72>
 8025336:	0861      	lsrs	r1, r4, #1
 8025338:	ea03 0001 	and.w	r0, r3, r1
 802533c:	4302      	orrs	r2, r0
 802533e:	d00b      	beq.n	8025358 <rint+0xa8>
 8025340:	ea23 0101 	bic.w	r1, r3, r1
 8025344:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8025348:	2e13      	cmp	r6, #19
 802534a:	fa43 f306 	asr.w	r3, r3, r6
 802534e:	bf0c      	ite	eq
 8025350:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8025354:	2200      	movne	r2, #0
 8025356:	430b      	orrs	r3, r1
 8025358:	4619      	mov	r1, r3
 802535a:	4b17      	ldr	r3, [pc, #92]	; (80253b8 <rint+0x108>)
 802535c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8025360:	e9d5 4500 	ldrd	r4, r5, [r5]
 8025364:	4610      	mov	r0, r2
 8025366:	462b      	mov	r3, r5
 8025368:	4622      	mov	r2, r4
 802536a:	f7da ffa7 	bl	80002bc <__adddf3>
 802536e:	e9cd 0100 	strd	r0, r1, [sp]
 8025372:	4622      	mov	r2, r4
 8025374:	462b      	mov	r3, r5
 8025376:	e9dd 0100 	ldrd	r0, r1, [sp]
 802537a:	f7da ff9d 	bl	80002b8 <__aeabi_dsub>
 802537e:	e7d0      	b.n	8025322 <rint+0x72>
 8025380:	2e33      	cmp	r6, #51	; 0x33
 8025382:	dd08      	ble.n	8025396 <rint+0xe6>
 8025384:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025388:	d1cb      	bne.n	8025322 <rint+0x72>
 802538a:	ee10 2a10 	vmov	r2, s0
 802538e:	460b      	mov	r3, r1
 8025390:	f7da ff94 	bl	80002bc <__adddf3>
 8025394:	e7c5      	b.n	8025322 <rint+0x72>
 8025396:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 802539a:	f04f 34ff 	mov.w	r4, #4294967295
 802539e:	40f4      	lsrs	r4, r6
 80253a0:	4220      	tst	r0, r4
 80253a2:	d0be      	beq.n	8025322 <rint+0x72>
 80253a4:	0861      	lsrs	r1, r4, #1
 80253a6:	420f      	tst	r7, r1
 80253a8:	bf1f      	itttt	ne
 80253aa:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80253ae:	ea27 0101 	bicne.w	r1, r7, r1
 80253b2:	4132      	asrne	r2, r6
 80253b4:	430a      	orrne	r2, r1
 80253b6:	e7cf      	b.n	8025358 <rint+0xa8>
 80253b8:	08032828 	.word	0x08032828
 80253bc:	000fffff 	.word	0x000fffff

080253c0 <scalbn>:
 80253c0:	b570      	push	{r4, r5, r6, lr}
 80253c2:	ec55 4b10 	vmov	r4, r5, d0
 80253c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80253ca:	4606      	mov	r6, r0
 80253cc:	462b      	mov	r3, r5
 80253ce:	b9b2      	cbnz	r2, 80253fe <scalbn+0x3e>
 80253d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80253d4:	4323      	orrs	r3, r4
 80253d6:	d03c      	beq.n	8025452 <scalbn+0x92>
 80253d8:	2200      	movs	r2, #0
 80253da:	4b33      	ldr	r3, [pc, #204]	; (80254a8 <scalbn+0xe8>)
 80253dc:	4629      	mov	r1, r5
 80253de:	ee10 0a10 	vmov	r0, s0
 80253e2:	f7db f91d 	bl	8000620 <__aeabi_dmul>
 80253e6:	4a31      	ldr	r2, [pc, #196]	; (80254ac <scalbn+0xec>)
 80253e8:	4296      	cmp	r6, r2
 80253ea:	4604      	mov	r4, r0
 80253ec:	460d      	mov	r5, r1
 80253ee:	460b      	mov	r3, r1
 80253f0:	da13      	bge.n	802541a <scalbn+0x5a>
 80253f2:	a329      	add	r3, pc, #164	; (adr r3, 8025498 <scalbn+0xd8>)
 80253f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253f8:	f7db f912 	bl	8000620 <__aeabi_dmul>
 80253fc:	e00a      	b.n	8025414 <scalbn+0x54>
 80253fe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025402:	428a      	cmp	r2, r1
 8025404:	d10c      	bne.n	8025420 <scalbn+0x60>
 8025406:	ee10 2a10 	vmov	r2, s0
 802540a:	462b      	mov	r3, r5
 802540c:	4620      	mov	r0, r4
 802540e:	4629      	mov	r1, r5
 8025410:	f7da ff54 	bl	80002bc <__adddf3>
 8025414:	4604      	mov	r4, r0
 8025416:	460d      	mov	r5, r1
 8025418:	e01b      	b.n	8025452 <scalbn+0x92>
 802541a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802541e:	3a36      	subs	r2, #54	; 0x36
 8025420:	4432      	add	r2, r6
 8025422:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025426:	428a      	cmp	r2, r1
 8025428:	dd0b      	ble.n	8025442 <scalbn+0x82>
 802542a:	ec45 4b11 	vmov	d1, r4, r5
 802542e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80254a0 <scalbn+0xe0>
 8025432:	f000 f83f 	bl	80254b4 <copysign>
 8025436:	a31a      	add	r3, pc, #104	; (adr r3, 80254a0 <scalbn+0xe0>)
 8025438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802543c:	ec51 0b10 	vmov	r0, r1, d0
 8025440:	e7da      	b.n	80253f8 <scalbn+0x38>
 8025442:	2a00      	cmp	r2, #0
 8025444:	dd08      	ble.n	8025458 <scalbn+0x98>
 8025446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802544a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802544e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025452:	ec45 4b10 	vmov	d0, r4, r5
 8025456:	bd70      	pop	{r4, r5, r6, pc}
 8025458:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802545c:	da0d      	bge.n	802547a <scalbn+0xba>
 802545e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025462:	429e      	cmp	r6, r3
 8025464:	ec45 4b11 	vmov	d1, r4, r5
 8025468:	dce1      	bgt.n	802542e <scalbn+0x6e>
 802546a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8025498 <scalbn+0xd8>
 802546e:	f000 f821 	bl	80254b4 <copysign>
 8025472:	a309      	add	r3, pc, #36	; (adr r3, 8025498 <scalbn+0xd8>)
 8025474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025478:	e7e0      	b.n	802543c <scalbn+0x7c>
 802547a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802547e:	3236      	adds	r2, #54	; 0x36
 8025480:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025484:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025488:	4620      	mov	r0, r4
 802548a:	4629      	mov	r1, r5
 802548c:	2200      	movs	r2, #0
 802548e:	4b08      	ldr	r3, [pc, #32]	; (80254b0 <scalbn+0xf0>)
 8025490:	e7b2      	b.n	80253f8 <scalbn+0x38>
 8025492:	bf00      	nop
 8025494:	f3af 8000 	nop.w
 8025498:	c2f8f359 	.word	0xc2f8f359
 802549c:	01a56e1f 	.word	0x01a56e1f
 80254a0:	8800759c 	.word	0x8800759c
 80254a4:	7e37e43c 	.word	0x7e37e43c
 80254a8:	43500000 	.word	0x43500000
 80254ac:	ffff3cb0 	.word	0xffff3cb0
 80254b0:	3c900000 	.word	0x3c900000

080254b4 <copysign>:
 80254b4:	ec53 2b10 	vmov	r2, r3, d0
 80254b8:	ee11 0a90 	vmov	r0, s3
 80254bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80254c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80254c4:	ea41 0300 	orr.w	r3, r1, r0
 80254c8:	ec43 2b10 	vmov	d0, r2, r3
 80254cc:	4770      	bx	lr
	...

080254d0 <_init>:
 80254d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254d2:	bf00      	nop
 80254d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80254d6:	bc08      	pop	{r3}
 80254d8:	469e      	mov	lr, r3
 80254da:	4770      	bx	lr

080254dc <_fini>:
 80254dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254de:	bf00      	nop
 80254e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80254e2:	bc08      	pop	{r3}
 80254e4:	469e      	mov	lr, r3
 80254e6:	4770      	bx	lr
