
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021360  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d398  08021520  08021520  00031520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802e8b8  0802e8b8  0003e8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802e8c0  0802e8c0  0003e8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802e8c4  0802e8c4  0003e8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b3c  20000000  0802e8c8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0008ff10  20000b40  0802f404  00040b40  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20090a50  0802f404  00050a50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00040b3c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00073bf5  00000000  00000000  00040b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf7b  00000000  00000000  000b4761  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002a870  00000000  00000000  000c06dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002e08  00000000  00000000  000eaf50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003dc8  00000000  00000000  000edd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e02c  00000000  00000000  000f1b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000ecc6  00000000  00000000  0010fb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0011e812  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a54  00000000  00000000  0011e890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b40 	.word	0x20000b40
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08021508 	.word	0x08021508

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000b44 	.word	0x20000b44
 80001fc:	08021508 	.word	0x08021508

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b97a 	b.w	8000fac <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4604      	mov	r4, r0
 8000cda:	9e08      	ldr	r6, [sp, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d151      	bne.n	8000d84 <__udivmoddi4+0xb4>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	d96d      	bls.n	8000dc2 <__udivmoddi4+0xf2>
 8000ce6:	fab2 fe82 	clz	lr, r2
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d00b      	beq.n	8000d08 <__udivmoddi4+0x38>
 8000cf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d0c:	0c25      	lsrs	r5, r4, #16
 8000d0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d12:	fa1f f987 	uxth.w	r9, r7
 8000d16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d1e:	fb08 f309 	mul.w	r3, r8, r9
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x6c>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d2c:	f080 8123 	bcs.w	8000f76 <__udivmoddi4+0x2a6>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f240 8120 	bls.w	8000f76 <__udivmoddi4+0x2a6>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	443d      	add	r5, r7
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d4c:	fb00 f909 	mul.w	r9, r0, r9
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x98>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 810a 	bcs.w	8000f72 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8107 	bls.w	8000f72 <__udivmoddi4+0x2a2>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 0409 	sub.w	r4, r4, r9
 8000d6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d061      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000d76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6034      	str	r4, [r6, #0]
 8000d7e:	6073      	str	r3, [r6, #4]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xc8>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d054      	beq.n	8000e36 <__udivmoddi4+0x166>
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d92:	4608      	mov	r0, r1
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	f040 808e 	bne.w	8000ebe <__udivmoddi4+0x1ee>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xdc>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2d0>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0503 	sbc.w	r5, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	46ac      	mov	ip, r5
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d03f      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000dba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b912      	cbnz	r2, 8000dca <__udivmoddi4+0xfa>
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dca:	fab7 fe87 	clz	lr, r7
 8000dce:	f1be 0f00 	cmp.w	lr, #0
 8000dd2:	d134      	bne.n	8000e3e <__udivmoddi4+0x16e>
 8000dd4:	1beb      	subs	r3, r5, r7
 8000dd6:	0c3a      	lsrs	r2, r7, #16
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000de2:	0c25      	lsrs	r5, r4, #16
 8000de4:	fb02 3318 	mls	r3, r2, r8, r3
 8000de8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dec:	fb0c f308 	mul.w	r3, ip, r8
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x134>
 8000df4:	19ed      	adds	r5, r5, r7
 8000df6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x132>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f200 80d1 	bhi.w	8000fa4 <__udivmoddi4+0x2d4>
 8000e02:	4680      	mov	r8, r0
 8000e04:	1aed      	subs	r5, r5, r3
 8000e06:	b2a3      	uxth	r3, r4
 8000e08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e14:	fb0c fc00 	mul.w	ip, ip, r0
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x15c>
 8000e1c:	19e4      	adds	r4, r4, r7
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x15a>
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	f200 80b8 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e34:	e79d      	b.n	8000d72 <__udivmoddi4+0xa2>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	f1ce 0420 	rsb	r4, lr, #32
 8000e42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e4e:	0c3a      	lsrs	r2, r7, #16
 8000e50:	fa25 f404 	lsr.w	r4, r5, r4
 8000e54:	ea48 0803 	orr.w	r8, r8, r3
 8000e58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e60:	fb02 4411 	mls	r4, r2, r1, r4
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1bc>
 8000e78:	19ed      	adds	r5, r5, r7
 8000e7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e7e:	f080 808a 	bcs.w	8000f96 <__udivmoddi4+0x2c6>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	f240 8087 	bls.w	8000f96 <__udivmoddi4+0x2c6>
 8000e88:	3902      	subs	r1, #2
 8000e8a:	443d      	add	r5, r7
 8000e8c:	1aeb      	subs	r3, r5, r3
 8000e8e:	fa1f f588 	uxth.w	r5, r8
 8000e92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e96:	fb02 3310 	mls	r3, r2, r0, r3
 8000e9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1e6>
 8000ea6:	19ed      	adds	r5, r5, r7
 8000ea8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eac:	d26f      	bcs.n	8000f8e <__udivmoddi4+0x2be>
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d96d      	bls.n	8000f8e <__udivmoddi4+0x2be>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443d      	add	r5, r7
 8000eb6:	1aeb      	subs	r3, r5, r3
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	e78f      	b.n	8000dde <__udivmoddi4+0x10e>
 8000ebe:	f1c1 0720 	rsb	r7, r1, #32
 8000ec2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ec6:	408b      	lsls	r3, r1
 8000ec8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ecc:	ea48 0303 	orr.w	r3, r8, r3
 8000ed0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ed4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ede:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ee2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ee6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eea:	fa1f f883 	uxth.w	r8, r3
 8000eee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ef2:	fb09 f408 	mul.w	r4, r9, r8
 8000ef6:	42ac      	cmp	r4, r5
 8000ef8:	fa02 f201 	lsl.w	r2, r2, r1
 8000efc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x244>
 8000f02:	18ed      	adds	r5, r5, r3
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	d243      	bcs.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	d941      	bls.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	441d      	add	r5, r3
 8000f14:	1b2d      	subs	r5, r5, r4
 8000f16:	fa1f fe8e 	uxth.w	lr, lr
 8000f1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x26e>
 8000f2e:	18e4      	adds	r4, r4, r3
 8000f30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f34:	d229      	bcs.n	8000f8a <__udivmoddi4+0x2ba>
 8000f36:	45a0      	cmp	r8, r4
 8000f38:	d927      	bls.n	8000f8a <__udivmoddi4+0x2ba>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	441c      	add	r4, r3
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba4 0408 	sub.w	r4, r4, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	464d      	mov	r5, r9
 8000f50:	d315      	bcc.n	8000f7e <__udivmoddi4+0x2ae>
 8000f52:	d012      	beq.n	8000f7a <__udivmoddi4+0x2aa>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x29c>
 8000f56:	ebba 030e 	subs.w	r3, sl, lr
 8000f5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40cb      	lsrs	r3, r1
 8000f64:	431f      	orrs	r7, r3
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	6037      	str	r7, [r6, #0]
 8000f6a:	6074      	str	r4, [r6, #4]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	4618      	mov	r0, r3
 8000f74:	e6f8      	b.n	8000d68 <__udivmoddi4+0x98>
 8000f76:	4690      	mov	r8, r2
 8000f78:	e6e0      	b.n	8000d3c <__udivmoddi4+0x6c>
 8000f7a:	45c2      	cmp	sl, r8
 8000f7c:	d2ea      	bcs.n	8000f54 <__udivmoddi4+0x284>
 8000f7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f82:	eb69 0503 	sbc.w	r5, r9, r3
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e4      	b.n	8000f54 <__udivmoddi4+0x284>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	e7d7      	b.n	8000f3e <__udivmoddi4+0x26e>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	e791      	b.n	8000eb6 <__udivmoddi4+0x1e6>
 8000f92:	4681      	mov	r9, r0
 8000f94:	e7be      	b.n	8000f14 <__udivmoddi4+0x244>
 8000f96:	4601      	mov	r1, r0
 8000f98:	e778      	b.n	8000e8c <__udivmoddi4+0x1bc>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	443c      	add	r4, r7
 8000f9e:	e745      	b.n	8000e2c <__udivmoddi4+0x15c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xe6>
 8000fa4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa8:	443d      	add	r5, r7
 8000faa:	e72b      	b.n	8000e04 <__udivmoddi4+0x134>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_InitTick+0x2c>)
{
 8000fb4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc0:	f000 fd34 	bl	8001a2c <HAL_SYSTICK_Config>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	b938      	cbnz	r0, 8000fd8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 fcde 	bl	8001990 <HAL_NVIC_SetPriority>
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	20000a58 	.word	0x20000a58

08000fe0 <HAL_Init>:
{
 8000fe0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 fcc2 	bl	800196c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff ffe1 	bl	8000fb0 <HAL_InitTick>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	b918      	cbnz	r0, 8000ffa <HAL_Init+0x1a>
    HAL_MspInit();
 8000ff2:	f01d fae3 	bl	801e5bc <HAL_MspInit>
}
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000ffa:	2401      	movs	r4, #1
 8000ffc:	e7fb      	b.n	8000ff6 <HAL_Init+0x16>
	...

08001000 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001000:	4a02      	ldr	r2, [pc, #8]	; (800100c <HAL_IncTick+0xc>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2008a890 	.word	0x2008a890

08001010 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_GetTick+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2008a890 	.word	0x2008a890

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff6 	bl	8001010 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001024:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001026:	4605      	mov	r5, r0
  {
    wait++;
 8001028:	bf18      	it	ne
 800102a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102c:	f7ff fff0 	bl	8001010 <HAL_GetTick>
 8001030:	1b40      	subs	r0, r0, r5
 8001032:	4284      	cmp	r4, r0
 8001034:	d8fa      	bhi.n	800102c <HAL_Delay+0x10>
  {
  }
}
 8001036:	bd38      	pop	{r3, r4, r5, pc}

08001038 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001038:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800103e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001042:	fab6 f386 	clz	r3, r6
 8001046:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800104a:	40de      	lsrs	r6, r3
 800104c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800104e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001052:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001056:	fa93 f5a3 	rbit	r5, r3
 800105a:	fab5 f585 	clz	r5, r5
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	2407      	movs	r4, #7
 8001064:	fa21 f505 	lsr.w	r5, r1, r5
 8001068:	fa04 f505 	lsl.w	r5, r4, r5
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001074:	40d9      	lsrs	r1, r3
 8001076:	ea24 0405 	bic.w	r4, r4, r5
 800107a:	fa02 f101 	lsl.w	r1, r2, r1
 800107e:	4321      	orrs	r1, r4
 8001080:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001084:	bd70      	pop	{r4, r5, r6, pc}
	...

08001088 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001088:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800108e:	4604      	mov	r4, r0
 8001090:	2800      	cmp	r0, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001096:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001098:	b925      	cbnz	r5, 80010a4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109a:	f01d fbb7 	bl	801e80c <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109e:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010a0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010a4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010aa:	bf41      	itttt	mi
 80010ac:	689a      	ldrmi	r2, [r3, #8]
 80010ae:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010b2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010b6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010b8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ba:	00d1      	lsls	r1, r2, #3
 80010bc:	d576      	bpl.n	80011ac <HAL_ADC_Init+0x124>
 80010be:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010c0:	00d2      	lsls	r2, r2, #3
 80010c2:	f140 808a 	bpl.w	80011da <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ca:	06d5      	lsls	r5, r2, #27
 80010cc:	f100 8093 	bmi.w	80011f6 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010d0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d2:	0751      	lsls	r1, r2, #29
 80010d4:	f100 808f 	bmi.w	80011f6 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010de:	f042 0202 	orr.w	r2, r2, #2
 80010e2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	2a01      	cmp	r2, #1
 80010ec:	f040 8089 	bne.w	8001202 <HAL_ADC_Init+0x17a>
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	07d2      	lsls	r2, r2, #31
 80010f4:	f140 8085 	bpl.w	8001202 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 80010f8:	68e5      	ldr	r5, [r4, #12]
 80010fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80010fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 80010fe:	432a      	orrs	r2, r5
 8001100:	68a5      	ldr	r5, [r4, #8]
 8001102:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001104:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001106:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001108:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800110c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001110:	bf02      	ittt	eq
 8001112:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001114:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001118:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800111c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800111e:	b121      	cbz	r1, 800112a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001120:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001122:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001126:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001128:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800112a:	68dd      	ldr	r5, [r3, #12]
 800112c:	4939      	ldr	r1, [pc, #228]	; (8001214 <HAL_ADC_Init+0x18c>)
 800112e:	4029      	ands	r1, r5
 8001130:	430a      	orrs	r2, r1
 8001132:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f012 0f0c 	tst.w	r2, #12
 800113a:	d120      	bne.n	800117e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800113c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800113e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001140:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001142:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001144:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001148:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800114a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800114e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	f021 0106 	bic.w	r1, r1, #6
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001158:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800115a:	2a01      	cmp	r2, #1
 800115c:	d147      	bne.n	80011ee <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800115e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001160:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001162:	6919      	ldr	r1, [r3, #16]
 8001164:	432a      	orrs	r2, r5
 8001166:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	432a      	orrs	r2, r5
 800116e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001170:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001174:	432a      	orrs	r2, r5
 8001176:	f021 0104 	bic.w	r1, r1, #4
 800117a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800117c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800117e:	6922      	ldr	r2, [r4, #16]
 8001180:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001182:	bf05      	ittet	eq
 8001184:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001186:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001188:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800118a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800118e:	bf06      	itte	eq
 8001190:	f021 010f 	biceq.w	r1, r1, #15
 8001194:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001196:	f022 020f 	bicne.w	r2, r2, #15
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800119c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800119e:	f023 0303 	bic.w	r3, r3, #3
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011a8:	b003      	add	sp, #12
 80011aa:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011ac:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011ae:	491a      	ldr	r1, [pc, #104]	; (8001218 <HAL_ADC_Init+0x190>)
 80011b0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_ADC_Init+0x194>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011c6:	220a      	movs	r2, #10
 80011c8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011ca:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011cc:	9a01      	ldr	r2, [sp, #4]
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	f43f af75 	beq.w	80010be <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011d4:	9a01      	ldr	r2, [sp, #4]
 80011d6:	3a01      	subs	r2, #1
 80011d8:	e7f7      	b.n	80011ca <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011dc:	f042 0210 	orr.w	r2, r2, #16
 80011e0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011e4:	f042 0201 	orr.w	r2, r2, #1
 80011e8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
 80011ec:	e76c      	b.n	80010c8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	e7c2      	b.n	800117c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
 8001200:	e7d2      	b.n	80011a8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001202:	4907      	ldr	r1, [pc, #28]	; (8001220 <HAL_ADC_Init+0x198>)
 8001204:	6865      	ldr	r5, [r4, #4]
 8001206:	688a      	ldr	r2, [r1, #8]
 8001208:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800120c:	432a      	orrs	r2, r5
 800120e:	608a      	str	r2, [r1, #8]
 8001210:	e772      	b.n	80010f8 <HAL_ADC_Init+0x70>
 8001212:	bf00      	nop
 8001214:	fff0c007 	.word	0xfff0c007
 8001218:	001e8480 	.word	0x001e8480
 800121c:	20000a58 	.word	0x20000a58
 8001220:	50040300 	.word	0x50040300

08001224 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001226:	6945      	ldr	r5, [r0, #20]
 8001228:	2d08      	cmp	r5, #8
{
 800122a:	4604      	mov	r4, r0
 800122c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800122e:	d00a      	beq.n	8001246 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001230:	6803      	ldr	r3, [r0, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	07dd      	lsls	r5, r3, #31
 8001236:	d505      	bpl.n	8001244 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001238:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800123a:	f043 0320 	orr.w	r3, r3, #32
 800123e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
 8001242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001244:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001246:	f7ff fee3 	bl	8001010 <HAL_GetTick>
 800124a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4215      	tst	r5, r2
 8001252:	d01d      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001254:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001262:	d10f      	bne.n	8001284 <HAL_ADC_PollForConversion+0x60>
 8001264:	69e2      	ldr	r2, [r4, #28]
 8001266:	b96a      	cbnz	r2, 8001284 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	0711      	lsls	r1, r2, #28
 800126c:	d50a      	bpl.n	8001284 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800126e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001274:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001276:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001278:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127a:	bf5e      	ittt	pl
 800127c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800127e:	f042 0201 	orrpl.w	r2, r2, #1
 8001282:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001284:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001286:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001288:	d114      	bne.n	80012b4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800128a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800128c:	2000      	movs	r0, #0
}
 800128e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001290:	1c70      	adds	r0, r6, #1
 8001292:	d0dc      	beq.n	800124e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001294:	b946      	cbnz	r6, 80012a8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001296:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 800129e:	2300      	movs	r3, #0
 80012a0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012a4:	2003      	movs	r0, #3
 80012a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a8:	f7ff feb2 	bl	8001010 <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	4286      	cmp	r6, r0
 80012b0:	d2cc      	bcs.n	800124c <HAL_ADC_PollForConversion+0x28>
 80012b2:	e7f0      	b.n	8001296 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012b4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012b8:	d1e8      	bne.n	800128c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012c0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012c0:	6803      	ldr	r3, [r0, #0]
 80012c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ce:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012d2:	2b01      	cmp	r3, #1
{
 80012d4:	4605      	mov	r5, r0
 80012d6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012d8:	f000 8168 	beq.w	80015ac <HAL_ADC_ConfigChannel+0x2e4>
 80012dc:	2301      	movs	r3, #1
 80012de:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012e2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012e4:	6882      	ldr	r2, [r0, #8]
 80012e6:	0757      	lsls	r7, r2, #29
 80012e8:	f100 815a 	bmi.w	80015a0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012ec:	684b      	ldr	r3, [r1, #4]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d808      	bhi.n	8001304 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 80012f2:	3b02      	subs	r3, #2
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d864      	bhi.n	80013c2 <HAL_ADC_ConfigChannel+0xfa>
 80012f8:	e8df f003 	tbb	[pc, r3]
 80012fc:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001300:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001302:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001304:	6861      	ldr	r1, [r4, #4]
 8001306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001316:	40de      	lsrs	r6, r3
 8001318:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800131c:	f001 011f 	and.w	r1, r1, #31
 8001320:	231f      	movs	r3, #31
 8001322:	fa03 f201 	lsl.w	r2, r3, r1
 8001326:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800132a:	ea23 0302 	bic.w	r3, r3, r2
 800132e:	6822      	ldr	r2, [r4, #0]
 8001330:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001334:	408a      	lsls	r2, r1
 8001336:	4313      	orrs	r3, r2
 8001338:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800133c:	6882      	ldr	r2, [r0, #8]
 800133e:	f012 020c 	ands.w	r2, r2, #12
 8001342:	d126      	bne.n	8001392 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001344:	68a3      	ldr	r3, [r4, #8]
 8001346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800134a:	d13c      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800134c:	6821      	ldr	r1, [r4, #0]
 800134e:	f7ff fe73 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001352:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001354:	6953      	ldr	r3, [r2, #20]
 8001356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800135a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800135c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800135e:	f8d5 e000 	ldr.w	lr, [r5]
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001368:	2e04      	cmp	r6, #4
 800136a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800136e:	d033      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001370:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001374:	0048      	lsls	r0, r1, #1
 8001376:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001378:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800137c:	4081      	lsls	r1, r0
 800137e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001382:	4319      	orrs	r1, r3
 8001384:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001388:	4bc5      	ldr	r3, [pc, #788]	; (80016a0 <HAL_ADC_ConfigChannel+0x3d8>)
 800138a:	4003      	ands	r3, r0
 800138c:	4319      	orrs	r1, r3
 800138e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001392:	6828      	ldr	r0, [r5, #0]
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	f040 8108 	bne.w	80015b0 <HAL_ADC_ConfigChannel+0x2e8>
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	07de      	lsls	r6, r3, #31
 80013a4:	f140 8104 	bpl.w	80015b0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013aa:	2300      	movs	r3, #0
 80013ac:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013b0:	b003      	add	sp, #12
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013b4:	2312      	movs	r3, #18
 80013b6:	e7a4      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013b8:	2318      	movs	r3, #24
 80013ba:	e7a2      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c0:	e79f      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013c2:	2306      	movs	r3, #6
 80013c4:	e79d      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013c6:	461a      	mov	r2, r3
 80013c8:	6821      	ldr	r1, [r4, #0]
 80013ca:	f7ff fe35 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013ce:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013d0:	6953      	ldr	r3, [r2, #20]
 80013d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d6:	e7c0      	b.n	800135a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013d8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013dc:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013e0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013e4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d13a      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x19a>
 80013ec:	f3c3 6084 	ubfx	r0, r3, #26, #5
 80013f0:	4287      	cmp	r7, r0
 80013f2:	f040 8149 	bne.w	8001688 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 80013f6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013fa:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013fe:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001400:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001404:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001408:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800140c:	bb9f      	cbnz	r7, 8001476 <HAL_ADC_ConfigChannel+0x1ae>
 800140e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001412:	4283      	cmp	r3, r0
 8001414:	f040 813d 	bne.w	8001692 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800141c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800141e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001420:	6891      	ldr	r1, [r2, #8]
 8001422:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001426:	f102 0608 	add.w	r6, r2, #8
 800142a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800142e:	bb77      	cbnz	r7, 800148e <HAL_ADC_ConfigChannel+0x1c6>
 8001430:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001434:	4283      	cmp	r3, r0
 8001436:	f040 8147 	bne.w	80016c8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800143a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800143e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001440:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001442:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001446:	68d2      	ldr	r2, [r2, #12]
 8001448:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800144c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001450:	bb4e      	cbnz	r6, 80014a6 <HAL_ADC_ConfigChannel+0x1de>
 8001452:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001456:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001458:	bf04      	itt	eq
 800145a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800145e:	6002      	streq	r2, [r0, #0]
 8001460:	e797      	b.n	8001392 <HAL_ADC_ConfigChannel+0xca>
 8001462:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001466:	fab0 f080 	clz	r0, r0
 800146a:	4287      	cmp	r7, r0
 800146c:	d0c3      	beq.n	80013f6 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800146e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001472:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	4283      	cmp	r3, r0
 8001480:	d0ca      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x150>
 8001482:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001484:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001486:	f102 0608 	add.w	r6, r2, #8
 800148a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	4283      	cmp	r3, r0
 8001498:	d0cf      	beq.n	800143a <HAL_ADC_ConfigChannel+0x172>
 800149a:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800149e:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	e7d2      	b.n	8001456 <HAL_ADC_ConfigChannel+0x18e>
 80014b0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014b4:	fab2 f282 	clz	r2, r2
 80014b8:	3201      	adds	r2, #1
 80014ba:	2a09      	cmp	r2, #9
 80014bc:	d90d      	bls.n	80014da <HAL_ADC_ConfigChannel+0x212>
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	fab2 f282 	clz	r2, r2
 80014c6:	3201      	adds	r2, #1
 80014c8:	0696      	lsls	r6, r2, #26
 80014ca:	fa93 f1a3 	rbit	r1, r3
 80014ce:	fab1 f181 	clz	r1, r1
 80014d2:	1c4a      	adds	r2, r1, #1
 80014d4:	2101      	movs	r1, #1
 80014d6:	4091      	lsls	r1, r2
 80014d8:	e016      	b.n	8001508 <HAL_ADC_ConfigChannel+0x240>
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	fab2 f282 	clz	r2, r2
 80014e2:	3201      	adds	r2, #1
 80014e4:	0692      	lsls	r2, r2, #26
 80014e6:	fa93 f1a3 	rbit	r1, r3
 80014ea:	fab1 f181 	clz	r1, r1
 80014ee:	1c4e      	adds	r6, r1, #1
 80014f0:	2101      	movs	r1, #1
 80014f2:	40b1      	lsls	r1, r6
 80014f4:	e07f      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x32e>
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	3101      	adds	r1, #1
 8001500:	e080      	b.n	8001604 <HAL_ADC_ConfigChannel+0x33c>
 8001502:	4616      	mov	r6, r2
 8001504:	fa01 f10e 	lsl.w	r1, r1, lr
 8001508:	ea41 0206 	orr.w	r2, r1, r6
 800150c:	b94f      	cbnz	r7, 8001522 <HAL_ADC_ConfigChannel+0x25a>
 800150e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001516:	f1a3 011b 	sub.w	r1, r3, #27
 800151a:	0509      	lsls	r1, r1, #20
 800151c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001520:	e073      	b.n	800160a <HAL_ADC_ConfigChannel+0x342>
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	e7f2      	b.n	8001512 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800152c:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_ADC_ConfigChannel+0x3dc>)
 800152e:	429a      	cmp	r2, r3
 8001530:	d104      	bne.n	800153c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001534:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001536:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800153a:	e072      	b.n	8001622 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_ADC_ConfigChannel+0x3e4>)
 800153e:	429a      	cmp	r2, r3
 8001540:	f47f af32 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001546:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001548:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800154c:	e069      	b.n	8001622 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800154e:	4955      	ldr	r1, [pc, #340]	; (80016a4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001550:	428a      	cmp	r2, r1
 8001552:	d111      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001554:	4a56      	ldr	r2, [pc, #344]	; (80016b0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	f47f af26 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
 800155c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001560:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001564:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001568:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800156c:	430b      	orrs	r3, r1
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001576:	e717      	b.n	80013a8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001578:	494c      	ldr	r1, [pc, #304]	; (80016ac <HAL_ADC_ConfigChannel+0x3e4>)
 800157a:	428a      	cmp	r2, r1
 800157c:	f47f af14 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	f47f af10 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001588:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800158c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001590:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001594:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001598:	430b      	orrs	r3, r1
 800159a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159e:	e7e8      	b.n	8001572 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015a8:	4618      	mov	r0, r3
 80015aa:	e6fe      	b.n	80013aa <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015ac:	2002      	movs	r0, #2
 80015ae:	e6ff      	b.n	80013b0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015b0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015b2:	4a40      	ldr	r2, [pc, #256]	; (80016b4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015b4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	f001 0e20 	and.w	lr, r1, #32
 80015be:	fa02 f20e 	lsl.w	r2, r2, lr
 80015c2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015c6:	4072      	eors	r2, r6
 80015c8:	403a      	ands	r2, r7
 80015ca:	4072      	eors	r2, r6
 80015cc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015d0:	4a39      	ldr	r2, [pc, #228]	; (80016b8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015d2:	4291      	cmp	r1, r2
 80015d4:	d11d      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	f47f af6a 	bne.w	80014b0 <HAL_ADC_ConfigChannel+0x1e8>
 80015dc:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015e0:	f101 0e01 	add.w	lr, r1, #1
 80015e4:	f1be 0f09 	cmp.w	lr, #9
 80015e8:	f04f 0101 	mov.w	r1, #1
 80015ec:	ea4f 628e 	mov.w	r2, lr, lsl #26
 80015f0:	d887      	bhi.n	8001502 <HAL_ADC_ConfigChannel+0x23a>
 80015f2:	fa01 f10e 	lsl.w	r1, r1, lr
 80015f6:	430a      	orrs	r2, r1
 80015f8:	2f00      	cmp	r7, #0
 80015fa:	f47f af7c 	bne.w	80014f6 <HAL_ADC_ConfigChannel+0x22e>
 80015fe:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001602:	1c59      	adds	r1, r3, #1
 8001604:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001608:	0509      	lsls	r1, r1, #20
 800160a:	4311      	orrs	r1, r2
 800160c:	68a2      	ldr	r2, [r4, #8]
 800160e:	f7ff fd13 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_ADC_ConfigChannel+0x3f4>)
 8001616:	429a      	cmp	r2, r3
 8001618:	d188      	bne.n	800152c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_ADC_ConfigChannel+0x3e0>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001622:	f47f aec1 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001626:	682b      	ldr	r3, [r5, #0]
 8001628:	6898      	ldr	r0, [r3, #8]
 800162a:	f000 0003 	and.w	r0, r0, #3
 800162e:	2801      	cmp	r0, #1
 8001630:	d102      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x370>
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	07c9      	lsls	r1, r1, #31
 8001636:	d422      	bmi.n	800167e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001638:	4920      	ldr	r1, [pc, #128]	; (80016bc <HAL_ADC_ConfigChannel+0x3f4>)
 800163a:	428a      	cmp	r2, r1
 800163c:	d187      	bne.n	800154e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f47f aeb1 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
 8001646:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800164a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800164e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001652:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001656:	430b      	orrs	r3, r1
 8001658:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800165c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fbb3 f2f2 	udiv	r2, r3, r2
 800166a:	2378      	movs	r3, #120	; 0x78
 800166c:	4353      	muls	r3, r2
                wait_loop_index--;
 800166e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f43f ae98 	beq.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001678:	9b01      	ldr	r3, [sp, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	e7f7      	b.n	800166e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001686:	e690      	b.n	80013aa <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001688:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800168c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001690:	e6bd      	b.n	800140e <HAL_ADC_ConfigChannel+0x146>
 8001692:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001694:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001696:	f102 0608 	add.w	r6, r2, #8
 800169a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800169e:	e6c7      	b.n	8001430 <HAL_ADC_ConfigChannel+0x168>
 80016a0:	03fff000 	.word	0x03fff000
 80016a4:	cb840000 	.word	0xcb840000
 80016a8:	50040300 	.word	0x50040300
 80016ac:	80000001 	.word	0x80000001
 80016b0:	50040000 	.word	0x50040000
 80016b4:	0007ffff 	.word	0x0007ffff
 80016b8:	407f0000 	.word	0x407f0000
 80016bc:	c7520000 	.word	0xc7520000
 80016c0:	20000a58 	.word	0x20000a58
 80016c4:	001e8480 	.word	0x001e8480
 80016c8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016cc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016d4:	e6bd      	b.n	8001452 <HAL_ADC_ConfigChannel+0x18a>
 80016d6:	bf00      	nop

080016d8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	f012 0f0c 	tst.w	r2, #12
{
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e4:	d101      	bne.n	80016ea <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016e6:	2000      	movs	r0, #0
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	0190      	lsls	r0, r2, #6
 80016ee:	d52a      	bpl.n	8001746 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 80016f0:	69e2      	ldr	r2, [r4, #28]
 80016f2:	2a01      	cmp	r2, #1
 80016f4:	d127      	bne.n	8001746 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 80016f6:	69a2      	ldr	r2, [r4, #24]
 80016f8:	2a01      	cmp	r2, #1
 80016fa:	d124      	bne.n	8001746 <ADC_ConversionStop+0x6e>
 80016fc:	4a22      	ldr	r2, [pc, #136]	; (8001788 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	0649      	lsls	r1, r1, #25
 8001702:	d514      	bpl.n	800172e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001708:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	0756      	lsls	r6, r2, #29
 800170e:	d50a      	bpl.n	8001726 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001710:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001712:	0795      	lsls	r5, r2, #30
 8001714:	d407      	bmi.n	8001726 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800171c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001720:	f042 0210 	orr.w	r2, r2, #16
 8001724:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001726:	2901      	cmp	r1, #1
 8001728:	d10f      	bne.n	800174a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800172a:	2504      	movs	r5, #4
        break;
 800172c:	e01e      	b.n	800176c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800172e:	3a01      	subs	r2, #1
 8001730:	d1e5      	bne.n	80016fe <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
 8001744:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001746:	2902      	cmp	r1, #2
 8001748:	d1df      	bne.n	800170a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	0710      	lsls	r0, r2, #28
 800174e:	d506      	bpl.n	800175e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001750:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001752:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001754:	bf5e      	ittt	pl
 8001756:	689a      	ldrpl	r2, [r3, #8]
 8001758:	f042 0220 	orrpl.w	r2, r2, #32
 800175c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800175e:	2902      	cmp	r1, #2
 8001760:	d003      	beq.n	800176a <ADC_ConversionStop+0x92>
 8001762:	2903      	cmp	r1, #3
 8001764:	d1e1      	bne.n	800172a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001766:	250c      	movs	r5, #12
 8001768:	e000      	b.n	800176c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800176a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800176c:	f7ff fc50 	bl	8001010 <HAL_GetTick>
 8001770:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	421d      	tst	r5, r3
 8001778:	d0b5      	beq.n	80016e6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800177a:	f7ff fc49 	bl	8001010 <HAL_GetTick>
 800177e:	1b80      	subs	r0, r0, r6
 8001780:	2805      	cmp	r0, #5
 8001782:	d9f6      	bls.n	8001772 <ADC_ConversionStop+0x9a>
 8001784:	e7d5      	b.n	8001732 <ADC_ConversionStop+0x5a>
 8001786:	bf00      	nop
 8001788:	0a340001 	.word	0x0a340001

0800178c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800178c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800178e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001790:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 8001792:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001794:	6893      	ldr	r3, [r2, #8]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
{
 800179c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800179e:	d108      	bne.n	80017b2 <ADC_Enable+0x26>
 80017a0:	6813      	ldr	r3, [r2, #0]
 80017a2:	07d8      	lsls	r0, r3, #31
 80017a4:	d505      	bpl.n	80017b2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017a6:	2000      	movs	r0, #0
}
 80017a8:	b002      	add	sp, #8
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017ac:	9b01      	ldr	r3, [sp, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	e012      	b.n	80017d8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017b2:	6891      	ldr	r1, [r2, #8]
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <ADC_Enable+0x94>)
 80017b6:	4219      	tst	r1, r3
 80017b8:	d127      	bne.n	800180a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ba:	6893      	ldr	r3, [r2, #8]
 80017bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <ADC_Enable+0x98>)
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <ADC_Enable+0x9c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017d4:	230a      	movs	r3, #10
 80017d6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017d8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e5      	bne.n	80017ac <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017e0:	f7ff fc16 	bl	8001010 <HAL_GetTick>
 80017e4:	4e11      	ldr	r6, [pc, #68]	; (800182c <ADC_Enable+0xa0>)
 80017e6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	6813      	ldr	r3, [r2, #0]
 80017ec:	07db      	lsls	r3, r3, #31
 80017ee:	d4da      	bmi.n	80017a6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80017f0:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 80017f2:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80017f4:	bf5f      	itttt	pl
 80017f6:	6893      	ldrpl	r3, [r2, #8]
 80017f8:	4033      	andpl	r3, r6
 80017fa:	f043 0301 	orrpl.w	r3, r3, #1
 80017fe:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001800:	f7ff fc06 	bl	8001010 <HAL_GetTick>
 8001804:	1b40      	subs	r0, r0, r5
 8001806:	2802      	cmp	r0, #2
 8001808:	d9ee      	bls.n	80017e8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001812:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
 800181c:	e7c4      	b.n	80017a8 <ADC_Enable+0x1c>
 800181e:	bf00      	nop
 8001820:	8000003f 	.word	0x8000003f
 8001824:	20000a58 	.word	0x20000a58
 8001828:	001e8480 	.word	0x001e8480
 800182c:	7fffffc0 	.word	0x7fffffc0

08001830 <HAL_ADC_Start>:
{
 8001830:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001832:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001834:	689d      	ldr	r5, [r3, #8]
 8001836:	f015 0504 	ands.w	r5, r5, #4
{
 800183a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800183c:	d13a      	bne.n	80018b4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800183e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001842:	2b01      	cmp	r3, #1
 8001844:	d036      	beq.n	80018b4 <HAL_ADC_Start+0x84>
 8001846:	2301      	movs	r3, #1
 8001848:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800184c:	f7ff ff9e 	bl	800178c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001850:	2800      	cmp	r0, #0
 8001852:	d12c      	bne.n	80018ae <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001856:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800186a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800186c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800186e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001870:	bf48      	it	mi
 8001872:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001874:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001876:	bf52      	itee	pl
 8001878:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800187a:	f023 0306 	bicmi.w	r3, r3, #6
 800187e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001880:	231c      	movs	r3, #28
 8001882:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001884:	2300      	movs	r3, #0
 8001886:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800188a:	68d3      	ldr	r3, [r2, #12]
 800188c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800188e:	bf41      	itttt	mi
 8001890:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 8001892:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001896:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 800189a:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 800189c:	6893      	ldr	r3, [r2, #8]
 800189e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6093      	str	r3, [r2, #8]
 80018ac:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018ae:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018b2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018b4:	2002      	movs	r0, #2
}
 80018b6:	bd38      	pop	{r3, r4, r5, pc}

080018b8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018b8:	6802      	ldr	r2, [r0, #0]
{
 80018ba:	b538      	push	{r3, r4, r5, lr}
 80018bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018be:	6890      	ldr	r0, [r2, #8]
 80018c0:	f000 0003 	and.w	r0, r0, #3
 80018c4:	2801      	cmp	r0, #1
 80018c6:	d001      	beq.n	80018cc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	07d9      	lsls	r1, r3, #31
 80018d0:	d5fa      	bpl.n	80018c8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018d2:	6893      	ldr	r3, [r2, #8]
 80018d4:	f003 030d 	and.w	r3, r3, #13
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11f      	bne.n	800191c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018dc:	6893      	ldr	r3, [r2, #8]
 80018de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018ec:	2303      	movs	r3, #3
 80018ee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80018f0:	f7ff fb8e 	bl	8001010 <HAL_GetTick>
 80018f4:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	07db      	lsls	r3, r3, #31
 80018fc:	d5e4      	bpl.n	80018c8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018fe:	f7ff fb87 	bl	8001010 <HAL_GetTick>
 8001902:	1b40      	subs	r0, r0, r5
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f6      	bls.n	80018f6 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001918:	2001      	movs	r0, #1
 800191a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800192c:	bd38      	pop	{r3, r4, r5, pc}

0800192e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800192e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001932:	2b01      	cmp	r3, #1
{
 8001934:	b510      	push	{r4, lr}
 8001936:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001938:	d016      	beq.n	8001968 <HAL_ADC_Stop+0x3a>
 800193a:	2301      	movs	r3, #1
 800193c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001940:	2103      	movs	r1, #3
 8001942:	f7ff fec9 	bl	80016d8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001946:	b958      	cbnz	r0, 8001960 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff ffb5 	bl	80018b8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800194e:	b938      	cbnz	r0, 8001960 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001950:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001952:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001960:	2300      	movs	r3, #0
 8001962:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001966:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001968:	2002      	movs	r0, #2
}
 800196a:	bd10      	pop	{r4, pc}

0800196c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800196e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	0c1b      	lsrs	r3, r3, #16
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800197c:	0200      	lsls	r0, r0, #8
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001986:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001988:	60d3      	str	r3, [r2, #12]
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b530      	push	{r4, r5, lr}
 8001994:	68dc      	ldr	r4, [r3, #12]
 8001996:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	bf28      	it	cs
 80019a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 0501 	mov.w	r5, #1
 80019ac:	fa05 f303 	lsl.w	r3, r5, r3
 80019b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b4:	bf8c      	ite	hi
 80019b6:	3c03      	subhi	r4, #3
 80019b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ba:	4019      	ands	r1, r3
 80019bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019be:	fa05 f404 	lsl.w	r4, r5, r4
 80019c2:	3c01      	subs	r4, #1
 80019c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	ea42 0201 	orr.w	r2, r2, r1
 80019cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	bfaf      	iteee	ge
 80019d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	f000 000f 	andlt.w	r0, r0, #15
 80019da:	4b06      	ldrlt	r3, [pc, #24]	; (80019f4 <HAL_NVIC_SetPriority+0x64>)
 80019dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	bfa5      	ittet	ge
 80019e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019ec:	bd30      	pop	{r4, r5, pc}
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	e000ed14 	.word	0xe000ed14

080019f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019f8:	0942      	lsrs	r2, r0, #5
 80019fa:	2301      	movs	r3, #1
 80019fc:	f000 001f 	and.w	r0, r0, #31
 8001a00:	fa03 f000 	lsl.w	r0, r3, r0
 8001a04:	4b01      	ldr	r3, [pc, #4]	; (8001a0c <HAL_NVIC_EnableIRQ+0x14>)
 8001a06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a10:	0943      	lsrs	r3, r0, #5
 8001a12:	2201      	movs	r2, #1
 8001a14:	f000 001f 	and.w	r0, r0, #31
 8001a18:	fa02 f000 	lsl.w	r0, r2, r0
 8001a1c:	3320      	adds	r3, #32
 8001a1e:	4a02      	ldr	r2, [pc, #8]	; (8001a28 <HAL_NVIC_DisableIRQ+0x18>)
 8001a20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	3801      	subs	r0, #1
 8001a2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a32:	d20a      	bcs.n	8001a4a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a38:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	21f0      	movs	r1, #240	; 0xf0
 8001a3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a58:	0943      	lsrs	r3, r0, #5
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f000 001f 	and.w	r0, r0, #31
 8001a60:	fa02 f000 	lsl.w	r0, r2, r0
 8001a64:	3360      	adds	r3, #96	; 0x60
 8001a66:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a68:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a76:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a78:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a7a:	bf0c      	ite	eq
 8001a7c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a80:	f022 0204 	bicne.w	r2, r2, #4
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	4770      	bx	lr
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001a8e:	6805      	ldr	r5, [r0, #0]
 8001a90:	4e0a      	ldr	r6, [pc, #40]	; (8001abc <DMA2D_SetConfig+0x30>)
 8001a92:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001a94:	fa96 f6a6 	rbit	r6, r6
 8001a98:	9f05      	ldr	r7, [sp, #20]
 8001a9a:	fab6 f686 	clz	r6, r6
 8001a9e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001aa2:	433c      	orrs	r4, r7
 8001aa4:	40b3      	lsls	r3, r6
 8001aa6:	4323      	orrs	r3, r4
 8001aa8:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001aaa:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001aac:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001aae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001ab2:	bf0c      	ite	eq
 8001ab4:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001ab6:	60e9      	strne	r1, [r5, #12]
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	3fff0000 	.word	0x3fff0000

08001ac0 <HAL_DMA2D_Init>:
{ 
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d043      	beq.n	8001b50 <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ac8:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001acc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ad0:	b91b      	cbnz	r3, 8001ada <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001ad2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001ad6:	f01c ff55 	bl	801e984 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001ada:	2302      	movs	r3, #2
 8001adc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	69e0      	ldr	r0, [r4, #28]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	6862      	ldr	r2, [r4, #4]
 8001ae8:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001aec:	4302      	orrs	r2, r0
 8001aee:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001af6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af8:	68a2      	ldr	r2, [r4, #8]
 8001afa:	69a0      	ldr	r0, [r4, #24]
 8001afc:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001b00:	4302      	orrs	r2, r0
 8001b02:	f021 0101 	bic.w	r1, r1, #1
 8001b06:	430a      	orrs	r2, r1
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0c:	68e1      	ldr	r1, [r4, #12]
 8001b0e:	0c12      	lsrs	r2, r2, #16
 8001b10:	0412      	lsls	r2, r2, #16
 8001b12:	430a      	orrs	r2, r1
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001b16:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001b18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b1c:	fa92 f2a2 	rbit	r2, r2
 8001b20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001b24:	fab2 f082 	clz	r0, r2
 8001b28:	fa91 f1a1 	rbit	r1, r1
 8001b2c:	6922      	ldr	r2, [r4, #16]
 8001b2e:	4082      	lsls	r2, r0
 8001b30:	6960      	ldr	r0, [r4, #20]
 8001b32:	fab1 f181 	clz	r1, r1
 8001b36:	fa00 f101 	lsl.w	r1, r0, r1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001b40:	430a      	orrs	r2, r1
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b44:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b46:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b48:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b4a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001b50:	2001      	movs	r0, #1
}
 8001b52:	bd38      	pop	{r3, r4, r5, pc}

08001b54 <HAL_DMA2D_Start>:
{
 8001b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001b56:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001b5a:	2c01      	cmp	r4, #1
 8001b5c:	f04f 0402 	mov.w	r4, #2
 8001b60:	d00f      	beq.n	8001b82 <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b62:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001b66:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001b68:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001b6a:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001b6e:	9400      	str	r4, [sp, #0]
 8001b70:	f7ff ff8c 	bl	8001a8c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001b74:	6802      	ldr	r2, [r0, #0]
 8001b76:	6813      	ldr	r3, [r2, #0]
 8001b78:	4333      	orrs	r3, r6
 8001b7a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001b7c:	2000      	movs	r0, #0
}
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001b82:	4620      	mov	r0, r4
 8001b84:	e7fb      	b.n	8001b7e <HAL_DMA2D_Start+0x2a>

08001b86 <HAL_DMA2D_PollForTransfer>:
{
 8001b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001b8c:	6803      	ldr	r3, [r0, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	07db      	lsls	r3, r3, #31
{
 8001b92:	4604      	mov	r4, r0
 8001b94:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001b96:	d427      	bmi.n	8001be8 <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	69da      	ldr	r2, [r3, #28]
 8001b9c:	0696      	lsls	r6, r2, #26
 8001b9e:	d55c      	bpl.n	8001c5a <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001ba0:	f7ff fa36 	bl	8001010 <HAL_GetTick>
 8001ba4:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	06d2      	lsls	r2, r2, #27
 8001bac:	d458      	bmi.n	8001c60 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001bb2:	9a01      	ldr	r2, [sp, #4]
 8001bb4:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001bb8:	d05d      	beq.n	8001c76 <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001bba:	9a01      	ldr	r2, [sp, #4]
 8001bbc:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001bbe:	bf42      	ittt	mi
 8001bc0:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001bc2:	f042 0204 	orrmi.w	r2, r2, #4
 8001bc6:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001bc8:	9a01      	ldr	r2, [sp, #4]
 8001bca:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001bcc:	bf42      	ittt	mi
 8001bce:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001bd0:	f042 0202 	orrmi.w	r2, r2, #2
 8001bd4:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001bd6:	9a01      	ldr	r2, [sp, #4]
 8001bd8:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001bda:	bf42      	ittt	mi
 8001bdc:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001bde:	f042 0201 	orrmi.w	r2, r2, #1
 8001be2:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001be4:	2229      	movs	r2, #41	; 0x29
 8001be6:	e01b      	b.n	8001c20 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001be8:	f7ff fa12 	bl	8001010 <HAL_GetTick>
 8001bec:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	0792      	lsls	r2, r2, #30
 8001bf4:	d4d0      	bmi.n	8001b98 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001bfa:	9a01      	ldr	r2, [sp, #4]
 8001bfc:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001c00:	d017      	beq.n	8001c32 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001c02:	9a01      	ldr	r2, [sp, #4]
 8001c04:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001c06:	bf42      	ittt	mi
 8001c08:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001c0a:	f042 0202 	orrmi.w	r2, r2, #2
 8001c0e:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001c10:	9a01      	ldr	r2, [sp, #4]
 8001c12:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001c14:	bf42      	ittt	mi
 8001c16:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001c18:	f042 0201 	orrmi.w	r2, r2, #1
 8001c1c:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001c1e:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001c20:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001c22:	2304      	movs	r3, #4
 8001c24:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e01f      	b.n	8001c72 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001c32:	1c69      	adds	r1, r5, #1
 8001c34:	d0dc      	beq.n	8001bf0 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c36:	b955      	cbnz	r5, 8001c4e <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001c38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c3a:	f043 0320 	orr.w	r3, r3, #32
 8001c3e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001c40:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001c42:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001c44:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001c48:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001c4c:	e011      	b.n	8001c72 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c4e:	f7ff f9df 	bl	8001010 <HAL_GetTick>
 8001c52:	1b80      	subs	r0, r0, r6
 8001c54:	4285      	cmp	r5, r0
 8001c56:	d2ca      	bcs.n	8001bee <HAL_DMA2D_PollForTransfer+0x68>
 8001c58:	e7ee      	b.n	8001c38 <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001c5c:	069b      	lsls	r3, r3, #26
 8001c5e:	d49f      	bmi.n	8001ba0 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	2212      	movs	r2, #18
 8001c64:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001c66:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 8001c6e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8001c72:	b002      	add	sp, #8
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001c76:	1c69      	adds	r1, r5, #1
 8001c78:	d096      	beq.n	8001ba8 <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c7a:	2d00      	cmp	r5, #0
 8001c7c:	d0dc      	beq.n	8001c38 <HAL_DMA2D_PollForTransfer+0xb2>
 8001c7e:	f7ff f9c7 	bl	8001010 <HAL_GetTick>
 8001c82:	1b80      	subs	r0, r0, r6
 8001c84:	4285      	cmp	r5, r0
 8001c86:	d28e      	bcs.n	8001ba6 <HAL_DMA2D_PollForTransfer+0x20>
 8001c88:	e7d6      	b.n	8001c38 <HAL_DMA2D_PollForTransfer+0xb2>
	...

08001c8c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001c8c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001c90:	2b01      	cmp	r3, #1
{   
 8001c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c94:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001c98:	d041      	beq.n	8001d1e <HAL_DMA2D_ConfigLayer+0x92>
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8001ca0:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8001ca4:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	d14d      	bne.n	8001d46 <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001caa:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001cac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001cae:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8001cb0:	f1a6 0509 	sub.w	r5, r6, #9
 8001cb4:	2d01      	cmp	r5, #1
 8001cb6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001cba:	d832      	bhi.n	8001d22 <HAL_DMA2D_ConfigLayer+0x96>
 8001cbc:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8001cc8:	4331      	orrs	r1, r6
 8001cca:	fa07 f303 	lsl.w	r3, r7, r3
 8001cce:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8001cd0:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8001cd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001ce0:	fab3 f783 	clz	r7, r3
 8001ce4:	fa96 f6a6 	rbit	r6, r6
 8001ce8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cea:	40bb      	lsls	r3, r7
 8001cec:	4f3c      	ldr	r7, [pc, #240]	; (8001de0 <HAL_DMA2D_ConfigLayer+0x154>)
 8001cee:	ea0e 0707 	and.w	r7, lr, r7
 8001cf2:	4339      	orrs	r1, r7
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001cf8:	fab6 f686 	clz	r6, r6
 8001cfc:	fa01 f606 	lsl.w	r6, r1, r6
 8001d00:	4333      	orrs	r3, r6
 8001d02:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d04:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 8001d06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d08:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d0a:	d802      	bhi.n	8001d12 <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001d0c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001d10:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 8001d1e:	4618      	mov	r0, r3
}
 8001d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	fa91 f1a1 	rbit	r1, r1
 8001d32:	fab1 f181 	clz	r1, r1
 8001d36:	fa04 f101 	lsl.w	r1, r4, r1
 8001d3a:	fa07 f303 	lsl.w	r3, r7, r3
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	ea43 0106 	orr.w	r1, r3, r6
 8001d44:	e7c4      	b.n	8001cd0 <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d46:	2418      	movs	r4, #24
 8001d48:	fb04 0401 	mla	r4, r4, r1, r0
 8001d4c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001d50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001d52:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001d54:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8001d56:	f1a7 0509 	sub.w	r5, r7, #9
 8001d5a:	2d01      	cmp	r5, #1
 8001d5c:	d82f      	bhi.n	8001dbe <HAL_DMA2D_ConfigLayer+0x132>
 8001d5e:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8001d6a:	4337      	orrs	r7, r6
 8001d6c:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001d70:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8001d72:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8001d76:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8001d7a:	fa94 f4a4 	rbit	r4, r4
 8001d7e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001d82:	fab4 f784 	clz	r7, r4
 8001d86:	fa96 f6a6 	rbit	r6, r6
 8001d8a:	2418      	movs	r4, #24
 8001d8c:	fb04 0101 	mla	r1, r4, r1, r0
 8001d90:	fab6 f686 	clz	r6, r6
 8001d94:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8001d96:	40bc      	lsls	r4, r7
 8001d98:	4f11      	ldr	r7, [pc, #68]	; (8001de0 <HAL_DMA2D_ConfigLayer+0x154>)
 8001d9a:	ea0e 0707 	and.w	r7, lr, r7
 8001d9e:	433b      	orrs	r3, r7
 8001da0:	4323      	orrs	r3, r4
 8001da2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001da4:	fa04 f606 	lsl.w	r6, r4, r6
 8001da8:	4333      	orrs	r3, r6
 8001daa:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dac:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 8001dae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001db0:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001db2:	bf9e      	ittt	ls
 8001db4:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 8001db6:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 8001dba:	6213      	strls	r3, [r2, #32]
 8001dbc:	e7a9      	b.n	8001d12 <HAL_DMA2D_ConfigLayer+0x86>
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	fa9e feae 	rbit	lr, lr
 8001dce:	fabe fe8e 	clz	lr, lr
 8001dd2:	fa04 f303 	lsl.w	r3, r4, r3
 8001dd6:	fa06 f60e 	lsl.w	r6, r6, lr
 8001dda:	4333      	orrs	r3, r6
 8001ddc:	e7c8      	b.n	8001d70 <HAL_DMA2D_ConfigLayer+0xe4>
 8001dde:	bf00      	nop
 8001de0:	00ccfff0 	.word	0x00ccfff0

08001de4 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <FLASH_Program_Fast+0x20>)
 8001de6:	6953      	ldr	r3, [r2, #20]
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dee:	b672      	cpsid	i
 8001df0:	f501 7300 	add.w	r3, r1, #512	; 0x200
 8001df4:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001df6:	680a      	ldr	r2, [r1, #0]
 8001df8:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 8001dfa:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8001dfc:	4299      	cmp	r1, r3
 8001dfe:	d1fa      	bne.n	8001df6 <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e00:	b662      	cpsie	i
 8001e02:	4770      	bx	lr
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_FLASH_Unlock+0x1c>)
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e0e:	bfbf      	itttt	lt
 8001e10:	4a05      	ldrlt	r2, [pc, #20]	; (8001e28 <HAL_FLASH_Unlock+0x20>)
 8001e12:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e14:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001e18:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001e1a:	bfba      	itte	lt
 8001e1c:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	0fc0      	lsrlt	r0, r0, #31
 8001e20:	2000      	movge	r0, #0
}
 8001e22:	4770      	bx	lr
 8001e24:	40022000 	.word	0x40022000
 8001e28:	45670123 	.word	0x45670123

08001e2c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_FLASH_Lock+0x10>)
 8001e2e:	6953      	ldr	r3, [r2, #20]
 8001e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e34:	6153      	str	r3, [r2, #20]
}
 8001e36:	2000      	movs	r0, #0
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000

08001e40 <FLASH_WaitForLastOperation>:
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff f8e4 	bl	8001010 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001e48:	4c1a      	ldr	r4, [pc, #104]	; (8001eb4 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 8001e4a:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001e4c:	6923      	ldr	r3, [r4, #16]
 8001e4e:	03db      	lsls	r3, r3, #15
 8001e50:	d41e      	bmi.n	8001e90 <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001e52:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8001e54:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001e56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e5a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001e5e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001e62:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8001e66:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 8001e6a:	4318      	orrs	r0, r3
 8001e6c:	d019      	beq.n	8001ea2 <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <FLASH_WaitForLastOperation+0x78>)
 8001e70:	6853      	ldr	r3, [r2, #4]
 8001e72:	4303      	orrs	r3, r0
 8001e74:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8001e76:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 8001e7a:	bf1e      	ittt	ne
 8001e7c:	69a2      	ldrne	r2, [r4, #24]
 8001e7e:	4313      	orrne	r3, r2
 8001e80:	61a3      	strne	r3, [r4, #24]
 8001e82:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 8001e86:	d001      	beq.n	8001e8c <FLASH_WaitForLastOperation+0x4c>
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <FLASH_WaitForLastOperation+0x74>)
 8001e8a:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e90:	1c6a      	adds	r2, r5, #1
 8001e92:	d0db      	beq.n	8001e4c <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001e94:	f7ff f8bc 	bl	8001010 <HAL_GetTick>
 8001e98:	1b80      	subs	r0, r0, r6
 8001e9a:	4285      	cmp	r5, r0
 8001e9c:	d8d6      	bhi.n	8001e4c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ea2:	6923      	ldr	r3, [r4, #16]
 8001ea4:	f013 0301 	ands.w	r3, r3, #1
 8001ea8:	d002      	beq.n	8001eb0 <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001eaa:	2301      	movs	r3, #1
 8001eac:	6123      	str	r3, [r4, #16]
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001eb0:	4618      	mov	r0, r3
}
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_FLASH_Program>:
{
 8001ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8001ec0:	4c24      	ldr	r4, [pc, #144]	; (8001f54 <HAL_FLASH_Program+0x98>)
{
 8001ec2:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8001ec4:	7823      	ldrb	r3, [r4, #0]
 8001ec6:	2b01      	cmp	r3, #1
{
 8001ec8:	4607      	mov	r7, r0
 8001eca:	4688      	mov	r8, r1
 8001ecc:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8001ece:	d03f      	beq.n	8001f50 <HAL_FLASH_Program+0x94>
 8001ed0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001ed6:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ed8:	f7ff ffb2 	bl	8001e40 <FLASH_WaitForLastOperation>
 8001edc:	4606      	mov	r6, r0
  if(status == HAL_OK)
 8001ede:	bb20      	cbnz	r0, 8001f2a <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ee0:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001ee2:	481d      	ldr	r0, [pc, #116]	; (8001f58 <HAL_FLASH_Program+0x9c>)
 8001ee4:	6805      	ldr	r5, [r0, #0]
 8001ee6:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001eea:	bf17      	itett	ne
 8001eec:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001eee:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ef0:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8001ef4:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001ef6:	bf1c      	itt	ne
 8001ef8:	2302      	movne	r3, #2
 8001efa:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001efc:	b9d7      	cbnz	r7, 8001f34 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001efe:	6945      	ldr	r5, [r0, #20]
 8001f00:	f045 0501 	orr.w	r5, r5, #1
 8001f04:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f06:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 8001f0a:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001f0c:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f14:	f7ff ff94 	bl	8001e40 <FLASH_WaitForLastOperation>
 8001f18:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 8001f1a:	b125      	cbz	r5, 8001f26 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <HAL_FLASH_Program+0x9c>)
 8001f1e:	6953      	ldr	r3, [r2, #20]
 8001f20:	ea23 0505 	bic.w	r5, r3, r5
 8001f24:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8001f26:	f000 f85d 	bl	8001fe4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	7023      	strb	r3, [r4, #0]
}
 8001f2e:	4630      	mov	r0, r6
 8001f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f34:	1e7b      	subs	r3, r7, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d901      	bls.n	8001f3e <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8001f3a:	2500      	movs	r5, #0
 8001f3c:	e7e8      	b.n	8001f10 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001f3e:	4649      	mov	r1, r9
 8001f40:	4640      	mov	r0, r8
 8001f42:	f7ff ff4f 	bl	8001de4 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001f46:	2f02      	cmp	r7, #2
 8001f48:	d1f7      	bne.n	8001f3a <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8001f4a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001f4e:	e7df      	b.n	8001f10 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8001f50:	2602      	movs	r6, #2
 8001f52:	e7ec      	b.n	8001f2e <HAL_FLASH_Program+0x72>
 8001f54:	20000000 	.word	0x20000000
 8001f58:	40022000 	.word	0x40022000

08001f5c <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <FLASH_MassErase+0x40>)
 8001f5e:	6a13      	ldr	r3, [r2, #32]
 8001f60:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f64:	4613      	mov	r3, r2
 8001f66:	d011      	beq.n	8001f8c <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001f68:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001f6a:	bf42      	ittt	mi
 8001f6c:	6952      	ldrmi	r2, [r2, #20]
 8001f6e:	f042 0204 	orrmi.w	r2, r2, #4
 8001f72:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8001f74:	0782      	lsls	r2, r0, #30
 8001f76:	d503      	bpl.n	8001f80 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <FLASH_MassErase+0x40>)
 8001f82:	6953      	ldr	r3, [r2, #20]
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6153      	str	r3, [r2, #20]
 8001f8a:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001f8c:	6953      	ldr	r3, [r2, #20]
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6153      	str	r3, [r2, #20]
 8001f98:	e7f2      	b.n	8001f80 <FLASH_MassErase+0x24>
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <FLASH_PageErase+0x40>)
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001fa8:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001faa:	d113      	bne.n	8001fd4 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001fb0:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	00c0      	lsls	r0, r0, #3
 8001fb6:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8001fba:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8001fbe:	4310      	orrs	r0, r2
 8001fc0:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	f042 0202 	orr.w	r2, r2, #2
 8001fc8:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8001fd4:	07c9      	lsls	r1, r1, #31
 8001fd6:	d4e9      	bmi.n	8001fac <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fdc:	e7e8      	b.n	8001fb0 <FLASH_PageErase+0x10>
 8001fde:	bf00      	nop
 8001fe0:	40022000 	.word	0x40022000

08001fe4 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001fe4:	4913      	ldr	r1, [pc, #76]	; (8002034 <FLASH_FlushCaches+0x50>)
 8001fe6:	7f0b      	ldrb	r3, [r1, #28]
 8001fe8:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 8001fea:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8001fee:	2a01      	cmp	r2, #1
 8001ff0:	d10c      	bne.n	800200c <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ff2:	4a11      	ldr	r2, [pc, #68]	; (8002038 <FLASH_FlushCaches+0x54>)
 8001ff4:	6810      	ldr	r0, [r2, #0]
 8001ff6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001ffa:	6010      	str	r0, [r2, #0]
 8001ffc:	6810      	ldr	r0, [r2, #0]
 8001ffe:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8002002:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002004:	6810      	ldr	r0, [r2, #0]
 8002006:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800200a:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 800200c:	3b02      	subs	r3, #2
 800200e:	2b01      	cmp	r3, #1
 8002010:	d80c      	bhi.n	800202c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <FLASH_FlushCaches+0x54>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002022:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800202a:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800202c:	2300      	movs	r3, #0
 800202e:	770b      	strb	r3, [r1, #28]
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000000 	.word	0x20000000
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_FLASHEx_Erase>:
{
 800203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002040:	4c35      	ldr	r4, [pc, #212]	; (8002118 <HAL_FLASHEx_Erase+0xdc>)
 8002042:	7823      	ldrb	r3, [r4, #0]
 8002044:	2b01      	cmp	r3, #1
{
 8002046:	4606      	mov	r6, r0
 8002048:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800204a:	d062      	beq.n	8002112 <HAL_FLASHEx_Erase+0xd6>
 800204c:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800204e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002052:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002054:	f7ff fef4 	bl	8001e40 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002058:	4605      	mov	r5, r0
 800205a:	bb40      	cbnz	r0, 80020ae <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800205e:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002066:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002068:	d026      	beq.n	80020b8 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800206a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	0551      	lsls	r1, r2, #21
 8002074:	d506      	bpl.n	8002084 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207c:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800207e:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002080:	7723      	strb	r3, [r4, #28]
 8002082:	e000      	b.n	8002086 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002084:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002086:	6833      	ldr	r3, [r6, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d11f      	bne.n	80020cc <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 800208c:	6870      	ldr	r0, [r6, #4]
 800208e:	f7ff ff65 	bl	8001f5c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002092:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002096:	f7ff fed3 	bl	8001e40 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <HAL_FLASHEx_Erase+0xe0>)
 800209c:	6953      	ldr	r3, [r2, #20]
 800209e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020a2:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020a6:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80020a8:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80020aa:	f7ff ff9b 	bl	8001fe4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80020ae:	2300      	movs	r3, #0
 80020b0:	7023      	strb	r3, [r4, #0]
}
 80020b2:	4628      	mov	r0, r5
 80020b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80020b8:	0552      	lsls	r2, r2, #21
 80020ba:	d505      	bpl.n	80020c8 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80020c4:	2302      	movs	r3, #2
 80020c6:	e7db      	b.n	8002080 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80020c8:	7720      	strb	r0, [r4, #28]
 80020ca:	e7dc      	b.n	8002086 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80020d4:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80020d6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800211c <HAL_FLASHEx_Erase+0xe0>
 80020da:	f8df a044 	ldr.w	sl, [pc, #68]	; 8002120 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80020de:	68b3      	ldr	r3, [r6, #8]
 80020e0:	68f2      	ldr	r2, [r6, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	429f      	cmp	r7, r3
 80020e6:	d2e0      	bcs.n	80020aa <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80020e8:	6871      	ldr	r1, [r6, #4]
 80020ea:	4638      	mov	r0, r7
 80020ec:	f7ff ff58 	bl	8001fa0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020f4:	f7ff fea4 	bl	8001e40 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80020f8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80020fc:	ea03 030a 	and.w	r3, r3, sl
 8002100:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8002104:	b118      	cbz	r0, 800210e <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8002106:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800210a:	4605      	mov	r5, r0
          break;
 800210c:	e7cd      	b.n	80020aa <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800210e:	3701      	adds	r7, #1
 8002110:	e7e5      	b.n	80020de <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 8002112:	2502      	movs	r5, #2
 8002114:	e7cd      	b.n	80020b2 <HAL_FLASHEx_Erase+0x76>
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000
 800211c:	40022000 	.word	0x40022000
 8002120:	fffff805 	.word	0xfffff805

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002128:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80022d0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002130:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	fa38 f403 	lsrs.w	r4, r8, r3
 8002138:	d102      	bne.n	8002140 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800213a:	b003      	add	sp, #12
 800213c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002140:	f04f 0e01 	mov.w	lr, #1
 8002144:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002148:	ea18 060e 	ands.w	r6, r8, lr
 800214c:	f000 80ab 	beq.w	80022a6 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002150:	684c      	ldr	r4, [r1, #4]
 8002152:	f024 0710 	bic.w	r7, r4, #16
 8002156:	2f02      	cmp	r7, #2
 8002158:	d116      	bne.n	8002188 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800215a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800215e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002162:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002166:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800216a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800216e:	f04f 0c0f 	mov.w	ip, #15
 8002172:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002176:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800217a:	690d      	ldr	r5, [r1, #16]
 800217c:	fa05 f50b 	lsl.w	r5, r5, fp
 8002180:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002184:	f8ca 5020 	str.w	r5, [sl, #32]
 8002188:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800218c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800218e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002192:	fa05 f50a 	lsl.w	r5, r5, sl
 8002196:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002198:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800219c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a0:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a6:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021aa:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80021ac:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b0:	d811      	bhi.n	80021d6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80021b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021b4:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021b8:	68cf      	ldr	r7, [r1, #12]
 80021ba:	fa07 fc0a 	lsl.w	ip, r7, sl
 80021be:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80021c2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80021c4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021c6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021ca:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80021ce:	409f      	lsls	r7, r3
 80021d0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80021d4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80021d6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021d8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021da:	688f      	ldr	r7, [r1, #8]
 80021dc:	fa07 f70a 	lsl.w	r7, r7, sl
 80021e0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80021e2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e4:	00e5      	lsls	r5, r4, #3
 80021e6:	d55e      	bpl.n	80022a6 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e8:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80021ec:	f045 0501 	orr.w	r5, r5, #1
 80021f0:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80021f4:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80021f8:	f023 0703 	bic.w	r7, r3, #3
 80021fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002200:	f005 0501 	and.w	r5, r5, #1
 8002204:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002208:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800220a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002210:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002214:	f04f 0c0f 	mov.w	ip, #15
 8002218:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800221c:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002220:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002224:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002228:	d03f      	beq.n	80022aa <HAL_GPIO_Init+0x186>
 800222a:	4d28      	ldr	r5, [pc, #160]	; (80022cc <HAL_GPIO_Init+0x1a8>)
 800222c:	42a8      	cmp	r0, r5
 800222e:	d03e      	beq.n	80022ae <HAL_GPIO_Init+0x18a>
 8002230:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002234:	42a8      	cmp	r0, r5
 8002236:	d03c      	beq.n	80022b2 <HAL_GPIO_Init+0x18e>
 8002238:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800223c:	42a8      	cmp	r0, r5
 800223e:	d03a      	beq.n	80022b6 <HAL_GPIO_Init+0x192>
 8002240:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002244:	42a8      	cmp	r0, r5
 8002246:	d038      	beq.n	80022ba <HAL_GPIO_Init+0x196>
 8002248:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800224c:	42a8      	cmp	r0, r5
 800224e:	d036      	beq.n	80022be <HAL_GPIO_Init+0x19a>
 8002250:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002254:	42a8      	cmp	r0, r5
 8002256:	d034      	beq.n	80022c2 <HAL_GPIO_Init+0x19e>
 8002258:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800225c:	42a8      	cmp	r0, r5
 800225e:	bf14      	ite	ne
 8002260:	2508      	movne	r5, #8
 8002262:	2507      	moveq	r5, #7
 8002264:	fa05 f50e 	lsl.w	r5, r5, lr
 8002268:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 800226e:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8002270:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002272:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002276:	bf0c      	ite	eq
 8002278:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800227a:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 800227c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 800227e:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002280:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002284:	bf0c      	ite	eq
 8002286:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002288:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 800228a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 800228c:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002292:	bf0c      	ite	eq
 8002294:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002296:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8002298:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 800229a:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800229c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800229e:	bf54      	ite	pl
 80022a0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80022a2:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 80022a4:	60d5      	str	r5, [r2, #12]
    position++;
 80022a6:	3301      	adds	r3, #1
 80022a8:	e744      	b.n	8002134 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022aa:	2500      	movs	r5, #0
 80022ac:	e7da      	b.n	8002264 <HAL_GPIO_Init+0x140>
 80022ae:	2501      	movs	r5, #1
 80022b0:	e7d8      	b.n	8002264 <HAL_GPIO_Init+0x140>
 80022b2:	2502      	movs	r5, #2
 80022b4:	e7d6      	b.n	8002264 <HAL_GPIO_Init+0x140>
 80022b6:	2503      	movs	r5, #3
 80022b8:	e7d4      	b.n	8002264 <HAL_GPIO_Init+0x140>
 80022ba:	2504      	movs	r5, #4
 80022bc:	e7d2      	b.n	8002264 <HAL_GPIO_Init+0x140>
 80022be:	2505      	movs	r5, #5
 80022c0:	e7d0      	b.n	8002264 <HAL_GPIO_Init+0x140>
 80022c2:	2506      	movs	r5, #6
 80022c4:	e7ce      	b.n	8002264 <HAL_GPIO_Init+0x140>
 80022c6:	bf00      	nop
 80022c8:	40010400 	.word	0x40010400
 80022cc:	48000400 	.word	0x48000400
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80022d8:	4d46      	ldr	r5, [pc, #280]	; (80023f4 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80022da:	f8df a120 	ldr.w	sl, [pc, #288]	; 80023fc <HAL_GPIO_DeInit+0x128>
 80022de:	f8df b120 	ldr.w	fp, [pc, #288]	; 8002400 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 80022e2:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022e4:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80022e8:	fa31 f302 	lsrs.w	r3, r1, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 80022ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022f2:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 80022f6:	ea11 0608 	ands.w	r6, r1, r8
 80022fa:	d06b      	beq.n	80023d4 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80022fc:	6807      	ldr	r7, [r0, #0]
 80022fe:	2303      	movs	r3, #3
 8002300:	0054      	lsls	r4, r2, #1
 8002302:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002306:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800230a:	4327      	orrs	r7, r4
 800230c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002310:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002312:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8002316:	f002 0e07 	and.w	lr, r2, #7
 800231a:	463b      	mov	r3, r7
 800231c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002320:	270f      	movs	r7, #15
 8002322:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002326:	ea23 0e0e 	bic.w	lr, r3, lr
 800232a:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002332:	43e4      	mvns	r4, r4
 8002334:	ea0e 0e04 	and.w	lr, lr, r4
 8002338:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800233c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002340:	ea2e 0808 	bic.w	r8, lr, r8
 8002344:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002348:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800234c:	ea04 040e 	and.w	r4, r4, lr
 8002350:	60c4      	str	r4, [r0, #12]
 8002352:	f022 0403 	bic.w	r4, r2, #3
 8002356:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800235a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800235e:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002362:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002366:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800236a:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800236e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002372:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002376:	d02f      	beq.n	80023d8 <HAL_GPIO_DeInit+0x104>
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_GPIO_DeInit+0x124>)
 800237a:	4298      	cmp	r0, r3
 800237c:	d02e      	beq.n	80023dc <HAL_GPIO_DeInit+0x108>
 800237e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002382:	4298      	cmp	r0, r3
 8002384:	d02c      	beq.n	80023e0 <HAL_GPIO_DeInit+0x10c>
 8002386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238a:	4298      	cmp	r0, r3
 800238c:	d02a      	beq.n	80023e4 <HAL_GPIO_DeInit+0x110>
 800238e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002392:	4298      	cmp	r0, r3
 8002394:	d028      	beq.n	80023e8 <HAL_GPIO_DeInit+0x114>
 8002396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239a:	4298      	cmp	r0, r3
 800239c:	d026      	beq.n	80023ec <HAL_GPIO_DeInit+0x118>
 800239e:	4550      	cmp	r0, sl
 80023a0:	d026      	beq.n	80023f0 <HAL_GPIO_DeInit+0x11c>
 80023a2:	4558      	cmp	r0, fp
 80023a4:	bf0c      	ite	eq
 80023a6:	2307      	moveq	r3, #7
 80023a8:	2308      	movne	r3, #8
 80023aa:	fa03 f30e 	lsl.w	r3, r3, lr
 80023ae:	459c      	cmp	ip, r3
 80023b0:	d110      	bne.n	80023d4 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80023b2:	68a3      	ldr	r3, [r4, #8]
 80023b4:	ea23 0707 	bic.w	r7, r3, r7
 80023b8:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 80023ba:	682b      	ldr	r3, [r5, #0]
 80023bc:	43f6      	mvns	r6, r6
 80023be:	4033      	ands	r3, r6
 80023c0:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80023c2:	686b      	ldr	r3, [r5, #4]
 80023c4:	4033      	ands	r3, r6
 80023c6:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80023c8:	68ab      	ldr	r3, [r5, #8]
 80023ca:	4033      	ands	r3, r6
 80023cc:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80023ce:	68eb      	ldr	r3, [r5, #12]
 80023d0:	401e      	ands	r6, r3
 80023d2:	60ee      	str	r6, [r5, #12]
    position++;
 80023d4:	3201      	adds	r2, #1
 80023d6:	e787      	b.n	80022e8 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80023d8:	2300      	movs	r3, #0
 80023da:	e7e6      	b.n	80023aa <HAL_GPIO_DeInit+0xd6>
 80023dc:	2301      	movs	r3, #1
 80023de:	e7e4      	b.n	80023aa <HAL_GPIO_DeInit+0xd6>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e7e2      	b.n	80023aa <HAL_GPIO_DeInit+0xd6>
 80023e4:	2303      	movs	r3, #3
 80023e6:	e7e0      	b.n	80023aa <HAL_GPIO_DeInit+0xd6>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e7de      	b.n	80023aa <HAL_GPIO_DeInit+0xd6>
 80023ec:	2305      	movs	r3, #5
 80023ee:	e7dc      	b.n	80023aa <HAL_GPIO_DeInit+0xd6>
 80023f0:	2306      	movs	r3, #6
 80023f2:	e7da      	b.n	80023aa <HAL_GPIO_DeInit+0xd6>
 80023f4:	40010400 	.word	0x40010400
 80023f8:	48000400 	.word	0x48000400
 80023fc:	48001800 	.word	0x48001800
 8002400:	48001c00 	.word	0x48001c00

08002404 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002404:	6903      	ldr	r3, [r0, #16]
 8002406:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002408:	bf14      	ite	ne
 800240a:	2001      	movne	r0, #1
 800240c:	2000      	moveq	r0, #0
 800240e:	4770      	bx	lr

08002410 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	b10a      	cbz	r2, 8002416 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002412:	6181      	str	r1, [r0, #24]
 8002414:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002416:	6281      	str	r1, [r0, #40]	; 0x28
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800241a:	6943      	ldr	r3, [r0, #20]
 800241c:	4059      	eors	r1, r3
 800241e:	6141      	str	r1, [r0, #20]
 8002420:	4770      	bx	lr

08002422 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002424:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002428:	6959      	ldr	r1, [r3, #20]
 800242a:	4201      	tst	r1, r0
 800242c:	d002      	beq.n	8002434 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800242e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002430:	f7ff fff7 	bl	8002422 <HAL_GPIO_EXTI_Callback>
 8002434:	bd08      	pop	{r3, pc}
 8002436:	bf00      	nop
 8002438:	40010400 	.word	0x40010400

0800243c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800243c:	6803      	ldr	r3, [r0, #0]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002442:	bf44      	itt	mi
 8002444:	2200      	movmi	r2, #0
 8002446:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800244c:	bf5e      	ittt	pl
 800244e:	699a      	ldrpl	r2, [r3, #24]
 8002450:	f042 0201 	orrpl.w	r2, r2, #1
 8002454:	619a      	strpl	r2, [r3, #24]
 8002456:	4770      	bx	lr

08002458 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002458:	b530      	push	{r4, r5, lr}
 800245a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800245c:	6805      	ldr	r5, [r0, #0]
 800245e:	4323      	orrs	r3, r4
 8002460:	0d64      	lsrs	r4, r4, #21
 8002462:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002466:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800246a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800246e:	6868      	ldr	r0, [r5, #4]
 8002470:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002474:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002478:	4319      	orrs	r1, r3
 800247a:	f044 0403 	orr.w	r4, r4, #3
 800247e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002482:	ea20 0404 	bic.w	r4, r0, r4
 8002486:	4321      	orrs	r1, r4
 8002488:	6069      	str	r1, [r5, #4]
 800248a:	bd30      	pop	{r4, r5, pc}

0800248c <I2C_WaitOnFlagUntilTimeout>:
{
 800248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002490:	9f06      	ldr	r7, [sp, #24]
 8002492:	4604      	mov	r4, r0
 8002494:	4688      	mov	r8, r1
 8002496:	4616      	mov	r6, r2
 8002498:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	6993      	ldr	r3, [r2, #24]
 800249e:	ea38 0303 	bics.w	r3, r8, r3
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	42b3      	cmp	r3, r6
 80024aa:	d002      	beq.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80024ac:	2000      	movs	r0, #0
}
 80024ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80024b2:	1c6b      	adds	r3, r5, #1
 80024b4:	d0f2      	beq.n	800249c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7fe fdab 	bl	8001010 <HAL_GetTick>
 80024ba:	1bc0      	subs	r0, r0, r7
 80024bc:	4285      	cmp	r5, r0
 80024be:	d301      	bcc.n	80024c4 <I2C_WaitOnFlagUntilTimeout+0x38>
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	d1ea      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024c6:	f043 0320 	orr.w	r3, r3, #32
 80024ca:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	2320      	movs	r3, #32
 80024ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80024d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80024dc:	2001      	movs	r0, #1
 80024de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024e2 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e2:	6803      	ldr	r3, [r0, #0]
{
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e8:	6998      	ldr	r0, [r3, #24]
 80024ea:	f010 0010 	ands.w	r0, r0, #16
{
 80024ee:	460d      	mov	r5, r1
 80024f0:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f2:	d116      	bne.n	8002522 <I2C_IsAcknowledgeFailed+0x40>
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80024f6:	1c69      	adds	r1, r5, #1
 80024f8:	d014      	beq.n	8002524 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7fe fd89 	bl	8001010 <HAL_GetTick>
 80024fe:	1b80      	subs	r0, r0, r6
 8002500:	4285      	cmp	r5, r0
 8002502:	d300      	bcc.n	8002506 <I2C_IsAcknowledgeFailed+0x24>
 8002504:	b96d      	cbnz	r5, 8002522 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002506:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002508:	f043 0320 	orr.w	r3, r3, #32
 800250c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800250e:	2320      	movs	r3, #32
 8002510:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	2300      	movs	r3, #0
 8002516:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800251a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800251e:	2001      	movs	r0, #1
}
 8002520:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	6999      	ldr	r1, [r3, #24]
 8002526:	068a      	lsls	r2, r1, #26
 8002528:	d5e5      	bpl.n	80024f6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252a:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252c:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252e:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002530:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002532:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002534:	f7ff ff82 	bl	800243c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002538:	6822      	ldr	r2, [r4, #0]
 800253a:	6853      	ldr	r3, [r2, #4]
 800253c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002540:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002544:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800254e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800255a:	e7db      	b.n	8002514 <I2C_IsAcknowledgeFailed+0x32>

0800255c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	4604      	mov	r4, r0
 8002560:	460d      	mov	r5, r1
 8002562:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	079b      	lsls	r3, r3, #30
 800256a:	d501      	bpl.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800256c:	2000      	movs	r0, #0
 800256e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002570:	4632      	mov	r2, r6
 8002572:	4629      	mov	r1, r5
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff ffb4 	bl	80024e2 <I2C_IsAcknowledgeFailed>
 800257a:	b9a0      	cbnz	r0, 80025a6 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800257c:	1c6a      	adds	r2, r5, #1
 800257e:	d0f1      	beq.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002580:	f7fe fd46 	bl	8001010 <HAL_GetTick>
 8002584:	1b80      	subs	r0, r0, r6
 8002586:	4285      	cmp	r5, r0
 8002588:	d301      	bcc.n	800258e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800258a:	2d00      	cmp	r5, #0
 800258c:	d1ea      	bne.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002590:	f043 0320 	orr.w	r3, r3, #32
 8002594:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002596:	2320      	movs	r3, #32
 8002598:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	2300      	movs	r3, #0
 800259e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80025a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
}
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025ac <I2C_RequestMemoryRead>:
{
 80025ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80025b0:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <I2C_RequestMemoryRead+0x60>)
 80025b4:	9300      	str	r3, [sp, #0]
{
 80025b6:	4605      	mov	r5, r0
 80025b8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025ba:	2300      	movs	r3, #0
 80025bc:	b2fa      	uxtb	r2, r7
 80025be:	f7ff ff4b 	bl	8002458 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c2:	4632      	mov	r2, r6
 80025c4:	9908      	ldr	r1, [sp, #32]
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7ff ffc8 	bl	800255c <I2C_WaitOnTXISFlagUntilTimeout>
 80025cc:	b110      	cbz	r0, 80025d4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
}
 80025d0:	b003      	add	sp, #12
 80025d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025d4:	2f01      	cmp	r7, #1
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	d10c      	bne.n	80025f4 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025da:	b2e4      	uxtb	r4, r4
 80025dc:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025de:	9b08      	ldr	r3, [sp, #32]
 80025e0:	9600      	str	r6, [sp, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	2140      	movs	r1, #64	; 0x40
 80025e6:	4628      	mov	r0, r5
 80025e8:	f7ff ff50 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80025ec:	3000      	adds	r0, #0
 80025ee:	bf18      	it	ne
 80025f0:	2001      	movne	r0, #1
 80025f2:	e7ed      	b.n	80025d0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025f4:	0a22      	lsrs	r2, r4, #8
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f8:	9908      	ldr	r1, [sp, #32]
 80025fa:	4632      	mov	r2, r6
 80025fc:	4628      	mov	r0, r5
 80025fe:	f7ff ffad 	bl	800255c <I2C_WaitOnTXISFlagUntilTimeout>
 8002602:	2800      	cmp	r0, #0
 8002604:	d1e3      	bne.n	80025ce <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	e7e7      	b.n	80025da <I2C_RequestMemoryRead+0x2e>
 800260a:	bf00      	nop
 800260c:	80002000 	.word	0x80002000

08002610 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	4604      	mov	r4, r0
 8002614:	460d      	mov	r5, r1
 8002616:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	069b      	lsls	r3, r3, #26
 800261e:	d501      	bpl.n	8002624 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002620:	2000      	movs	r0, #0
 8002622:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002624:	4632      	mov	r2, r6
 8002626:	4629      	mov	r1, r5
 8002628:	4620      	mov	r0, r4
 800262a:	f7ff ff5a 	bl	80024e2 <I2C_IsAcknowledgeFailed>
 800262e:	b990      	cbnz	r0, 8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002630:	f7fe fcee 	bl	8001010 <HAL_GetTick>
 8002634:	1b80      	subs	r0, r0, r6
 8002636:	4285      	cmp	r5, r0
 8002638:	d301      	bcc.n	800263e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800263a:	2d00      	cmp	r5, #0
 800263c:	d1ec      	bne.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002640:	f043 0320 	orr.w	r3, r3, #32
 8002644:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002646:	2320      	movs	r3, #32
 8002648:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	2300      	movs	r3, #0
 800264e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	bd70      	pop	{r4, r5, r6, pc}

0800265a <HAL_I2C_Init>:
{
 800265a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800265c:	4604      	mov	r4, r0
 800265e:	2800      	cmp	r0, #0
 8002660:	d04a      	beq.n	80026f8 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002662:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002666:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800266a:	b91b      	cbnz	r3, 8002674 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800266c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002670:	f01c f9a6 	bl	801e9c0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	2324      	movs	r3, #36	; 0x24
 8002676:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800267a:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267c:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002686:	6862      	ldr	r2, [r4, #4]
 8002688:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800268e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002690:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269a:	d124      	bne.n	80026e6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800269c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026a2:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026a4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80026aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ae:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026b8:	6922      	ldr	r2, [r4, #16]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	69a1      	ldr	r1, [r4, #24]
 80026be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026c2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026c4:	6a21      	ldr	r1, [r4, #32]
 80026c6:	69e2      	ldr	r2, [r4, #28]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80026e4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026ea:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ec:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ee:	bf04      	itt	eq
 80026f0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80026f4:	605a      	streq	r2, [r3, #4]
 80026f6:	e7d4      	b.n	80026a2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
}
 80026fa:	bd10      	pop	{r4, pc}

080026fc <HAL_I2C_Mem_Read>:
{
 80026fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002700:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002706:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002708:	2b20      	cmp	r3, #32
{
 800270a:	4604      	mov	r4, r0
 800270c:	460f      	mov	r7, r1
 800270e:	9203      	str	r2, [sp, #12]
 8002710:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002714:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002718:	f040 80a9 	bne.w	800286e <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 800271c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800271e:	b113      	cbz	r3, 8002726 <HAL_I2C_Mem_Read+0x2a>
 8002720:	f1ba 0f00 	cmp.w	sl, #0
 8002724:	d106      	bne.n	8002734 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
}
 800272e:	b005      	add	sp, #20
 8002730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002734:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002738:	2b01      	cmp	r3, #1
 800273a:	f000 8098 	beq.w	800286e <HAL_I2C_Mem_Read+0x172>
 800273e:	2501      	movs	r5, #1
 8002740:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002744:	f7fe fc64 	bl	8001010 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002748:	2319      	movs	r3, #25
 800274a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800274c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800274e:	462a      	mov	r2, r5
 8002750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002754:	4620      	mov	r0, r4
 8002756:	f7ff fe99 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 800275a:	4681      	mov	r9, r0
 800275c:	2800      	cmp	r0, #0
 800275e:	d1e5      	bne.n	800272c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002760:	2322      	movs	r3, #34	; 0x22
 8002762:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002766:	2340      	movs	r3, #64	; 0x40
 8002768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800276c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002770:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002772:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002774:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002778:	9601      	str	r6, [sp, #4]
 800277a:	f8cd 8000 	str.w	r8, [sp]
 800277e:	465b      	mov	r3, fp
 8002780:	9a03      	ldr	r2, [sp, #12]
 8002782:	4639      	mov	r1, r7
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff11 	bl	80025ac <I2C_RequestMemoryRead>
 800278a:	b110      	cbz	r0, 8002792 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 800278c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002790:	e7cc      	b.n	800272c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002792:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_I2C_Mem_Read+0x178>)
 800279a:	d958      	bls.n	800284e <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800279c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800279e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80027a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80027a6:	4639      	mov	r1, r7
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff fe55 	bl	8002458 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027ae:	9600      	str	r6, [sp, #0]
 80027b0:	4643      	mov	r3, r8
 80027b2:	2200      	movs	r2, #0
 80027b4:	2104      	movs	r1, #4
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff fe68 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 80027bc:	2800      	cmp	r0, #0
 80027be:	d1b5      	bne.n	800272c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80027c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80027ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80027cc:	3301      	adds	r3, #1
 80027ce:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027da:	3a01      	subs	r2, #1
 80027dc:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027de:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80027e0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e2:	b1ab      	cbz	r3, 8002810 <HAL_I2C_Mem_Read+0x114>
 80027e4:	b9a2      	cbnz	r2, 8002810 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	9600      	str	r6, [sp, #0]
 80027e8:	4643      	mov	r3, r8
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff fe4d 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d19a      	bne.n	800272c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d92f      	bls.n	800285e <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002802:	9000      	str	r0, [sp, #0]
 8002804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002808:	4639      	mov	r1, r7
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff fe24 	bl	8002458 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002810:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ca      	bne.n	80027ae <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002818:	4632      	mov	r2, r6
 800281a:	4641      	mov	r1, r8
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff fef7 	bl	8002610 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002822:	2800      	cmp	r0, #0
 8002824:	d182      	bne.n	800272c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	2120      	movs	r1, #32
 800282a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002832:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002836:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002840:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002844:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002848:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800284c:	e76f      	b.n	800272e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800284e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002850:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002852:	b292      	uxth	r2, r2
 8002854:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	e7a3      	b.n	80027a6 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800285e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002860:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002862:	b292      	uxth	r2, r2
 8002864:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	e7cc      	b.n	8002808 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800286e:	2002      	movs	r0, #2
 8002870:	e75d      	b.n	800272e <HAL_I2C_Mem_Read+0x32>
 8002872:	bf00      	nop
 8002874:	80002400 	.word	0x80002400

08002878 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002878:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	2a20      	cmp	r2, #32
{
 8002880:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002882:	d11d      	bne.n	80028c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002884:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002888:	2b01      	cmp	r3, #1
 800288a:	d019      	beq.n	80028c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	2324      	movs	r3, #36	; 0x24
 800288e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002892:	6803      	ldr	r3, [r0, #0]
 8002894:	681c      	ldr	r4, [r3, #0]
 8002896:	f024 0401 	bic.w	r4, r4, #1
 800289a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800289c:	681c      	ldr	r4, [r3, #0]
 800289e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80028a2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028a4:	681c      	ldr	r4, [r3, #0]
 80028a6:	4321      	orrs	r1, r4
 80028a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	f041 0101 	orr.w	r1, r1, #1
 80028b0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028b4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80028bc:	4618      	mov	r0, r3
 80028be:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2002      	movs	r0, #2
  }
}
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80028ca:	b2e4      	uxtb	r4, r4
 80028cc:	2c20      	cmp	r4, #32
 80028ce:	d11c      	bne.n	800290a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d018      	beq.n	800290a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	2324      	movs	r3, #36	; 0x24
 80028da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028de:	6803      	ldr	r3, [r0, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028e8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028f2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002902:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002906:	4618      	mov	r0, r3
 8002908:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800290a:	2002      	movs	r0, #2
  }
}
 800290c:	bd10      	pop	{r4, pc}

0800290e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800290e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002912:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002914:	6804      	ldr	r4, [r0, #0]
 8002916:	684f      	ldr	r7, [r1, #4]
 8002918:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800291a:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800291e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002922:	3284      	adds	r2, #132	; 0x84
 8002924:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002926:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800292a:	6858      	ldr	r0, [r3, #4]
 800292c:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8002930:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002932:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002934:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002938:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800293c:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800293e:	4430      	add	r0, r6
 8002940:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002944:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002946:	68e0      	ldr	r0, [r4, #12]
 8002948:	68cd      	ldr	r5, [r1, #12]
 800294a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800294e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002950:	6898      	ldr	r0, [r3, #8]
 8002952:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8002956:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002958:	68e6      	ldr	r6, [r4, #12]
 800295a:	6888      	ldr	r0, [r1, #8]
 800295c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002960:	3001      	adds	r0, #1
 8002962:	4430      	add	r0, r6
 8002964:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002968:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800296a:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800296c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800296e:	f020 0007 	bic.w	r0, r0, #7
 8002972:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002974:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002978:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800297a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800297c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002980:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002984:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002988:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800298c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002990:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002994:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002998:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800299a:	6958      	ldr	r0, [r3, #20]
 800299c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80029a0:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80029a2:	6948      	ldr	r0, [r1, #20]
 80029a4:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80029a6:	69d8      	ldr	r0, [r3, #28]
 80029a8:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80029ac:	f020 0007 	bic.w	r0, r0, #7
 80029b0:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80029b2:	6a08      	ldr	r0, [r1, #32]
 80029b4:	69cd      	ldr	r5, [r1, #28]
 80029b6:	4305      	orrs	r5, r0
 80029b8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80029ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80029bc:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80029be:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80029c2:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80029c4:	b31e      	cbz	r6, 8002a0e <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80029c6:	2e01      	cmp	r6, #1
 80029c8:	d023      	beq.n	8002a12 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80029ca:	1eb0      	subs	r0, r6, #2
 80029cc:	2802      	cmp	r0, #2
 80029ce:	d922      	bls.n	8002a16 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80029d0:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 80029d2:	bf0c      	ite	eq
 80029d4:	2002      	moveq	r0, #2
 80029d6:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80029d8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80029da:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80029de:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80029e0:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80029e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80029e4:	eba7 070e 	sub.w	r7, r7, lr
 80029e8:	4345      	muls	r5, r0
 80029ea:	4378      	muls	r0, r7
 80029ec:	3003      	adds	r0, #3
 80029ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80029f2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80029f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029f6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80029fa:	f020 0007 	bic.w	r0, r0, #7
 80029fe:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002a00:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002a02:	58a3      	ldr	r3, [r4, r2]
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	50a3      	str	r3, [r4, r2]
 8002a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8002a0e:	2004      	movs	r0, #4
 8002a10:	e7e2      	b.n	80029d8 <LTDC_SetConfig+0xca>
    tmp = 3;
 8002a12:	2003      	movs	r0, #3
 8002a14:	e7e0      	b.n	80029d8 <LTDC_SetConfig+0xca>
    tmp = 2;
 8002a16:	2002      	movs	r0, #2
 8002a18:	e7de      	b.n	80029d8 <LTDC_SetConfig+0xca>
	...

08002a1c <HAL_LTDC_Init>:
{
 8002a1c:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8002a1e:	4604      	mov	r4, r0
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d063      	beq.n	8002aec <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002a24:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002a28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a2c:	b91b      	cbnz	r3, 8002a36 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8002a2e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002a32:	f01b fe09 	bl	801e648 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002a3c:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002a3e:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002a46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002a48:	6862      	ldr	r2, [r4, #4]
 8002a4a:	6999      	ldr	r1, [r3, #24]
 8002a4c:	4302      	orrs	r2, r0
 8002a4e:	68e0      	ldr	r0, [r4, #12]
 8002a50:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002a52:	6920      	ldr	r0, [r4, #16]
 8002a54:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002a56:	430a      	orrs	r2, r1
 8002a58:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	4924      	ldr	r1, [pc, #144]	; (8002af0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 8002a5e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002a60:	400a      	ands	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002a6a:	69a0      	ldr	r0, [r4, #24]
 8002a6c:	4302      	orrs	r2, r0
 8002a6e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002a70:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8002a72:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002a74:	400a      	ands	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002a7e:	6a20      	ldr	r0, [r4, #32]
 8002a80:	4302      	orrs	r2, r0
 8002a82:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002a84:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002a86:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002a88:	400a      	ands	r2, r1
 8002a8a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002a92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a94:	4302      	orrs	r2, r0
 8002a96:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	4011      	ands	r1, r2
 8002a9c:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002a9e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002aa0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002aa2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002aa6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8002aae:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002ab2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002ab6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8002aba:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002abe:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002ac8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad0:	f042 0206 	orr.w	r2, r2, #6
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002ade:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ae0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002ae2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ae6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002aec:	2001      	movs	r0, #1
}
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	f000f800 	.word	0xf000f800

08002af4 <HAL_LTDC_ConfigLayer>:
{   
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002af6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002afa:	2b01      	cmp	r3, #1
{   
 8002afc:	4606      	mov	r6, r0
 8002afe:	468e      	mov	lr, r1
 8002b00:	4694      	mov	ip, r2
 8002b02:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8002b06:	d01d      	beq.n	8002b44 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002b08:	2434      	movs	r4, #52	; 0x34
 8002b0a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b0c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002b10:	fb04 6402 	mla	r4, r4, r2, r6
 8002b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 8002b16:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002b18:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8002b1a:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	4662      	mov	r2, ip
 8002b30:	4671      	mov	r1, lr
 8002b32:	f7ff feec 	bl	800290e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b36:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002b38:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b3a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002b3c:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002b40:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b46 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8002b46:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002b4a:	2b01      	cmp	r3, #1
{
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	f04f 0302 	mov.w	r3, #2
 8002b52:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8002b54:	d015      	beq.n	8002b82 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b56:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8002b5a:	2334      	movs	r3, #52	; 0x34
 8002b5c:	4353      	muls	r3, r2
 8002b5e:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8002b60:	2501      	movs	r5, #1
 8002b62:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8002b66:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002b68:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002b6c:	4401      	add	r1, r0
 8002b6e:	f7ff fece 	bl	800290e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b72:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8002b74:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b76:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b78:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002b7c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8002b82:	4618      	mov	r0, r3
}
 8002b84:	bd70      	pop	{r4, r5, r6, pc}

08002b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b8a:	4604      	mov	r4, r0
{
 8002b8c:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d074      	beq.n	8002c7c <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b92:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8002b96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b9a:	b91b      	cbnz	r3, 8002ba4 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b9c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ba0:	f01b ffb4 	bl	801eb0c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ba4:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ba6:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8002ba8:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bac:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8002bb0:	f003 fdd5 	bl	800675e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bb6:	466e      	mov	r6, sp
 8002bb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002bbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bc2:	e886 0003 	stmia.w	r6, {r0, r1}
 8002bc6:	f104 0804 	add.w	r8, r4, #4
 8002bca:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	f003 fd90 	bl	80066f4 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	f003 fdc7 	bl	800676a <USB_SetCurrentMode>
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4622      	mov	r2, r4
 8002be0:	4623      	mov	r3, r4
 8002be2:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002be6:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be8:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8002bea:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bee:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8002bf2:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8002bf4:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8002bf6:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bfa:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bfe:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c00:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c02:	6518      	str	r0, [r3, #80]	; 0x50
 8002c04:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8002c08:	d1ef      	bne.n	8002bea <HAL_PCD_Init+0x64>
 8002c0a:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c0c:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8002c0e:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8002c12:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8002c14:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8002c16:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c1a:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c1e:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c22:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c26:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8002c2a:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c32:	466e      	mov	r6, sp
 8002c34:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c3e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c42:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002c46:	6820      	ldr	r0, [r4, #0]
 8002c48:	f003 fdd0 	bl	80067ec <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8002c4c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002c4e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c52:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f000 fc27 	bl	80034b0 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8002c62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d102      	bne.n	8002c6e <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 fc34 	bl	80034d6 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c6e:	6820      	ldr	r0, [r4, #0]
 8002c70:	f004 f896 	bl	8006da0 <USB_DevDisconnect>

  return HAL_OK;
 8002c74:	2000      	movs	r0, #0
}
 8002c76:	b00a      	add	sp, #40	; 0x28
 8002c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	e7fa      	b.n	8002c76 <HAL_PCD_Init+0xf0>

08002c80 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8002c80:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002c84:	2b01      	cmp	r3, #1
{
 8002c86:	b510      	push	{r4, lr}
 8002c88:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002c8a:	d00c      	beq.n	8002ca6 <HAL_PCD_Start+0x26>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8002c92:	6800      	ldr	r0, [r0, #0]
 8002c94:	f004 f878 	bl	8006d88 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	f003 fd5a 	bl	8006752 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002ca4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002ca6:	2002      	movs	r0, #2
}
 8002ca8:	bd10      	pop	{r4, pc}
	...

08002cac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	f8d0 9000 	ldr.w	r9, [r0]
{
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cb8:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8002cba:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cbe:	f004 f8aa 	bl	8006e16 <USB_GetMode>
 8002cc2:	9000      	str	r0, [sp, #0]
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	f040 8154 	bne.w	8002f72 <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cca:	6820      	ldr	r0, [r4, #0]
 8002ccc:	f004 f874 	bl	8006db8 <USB_ReadInterrupts>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	f000 814e 	beq.w	8002f72 <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	f004 f86e 	bl	8006db8 <USB_ReadInterrupts>
 8002cdc:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cde:	bf48      	it	mi
 8002ce0:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ce2:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ce4:	bf42      	ittt	mi
 8002ce6:	6953      	ldrmi	r3, [r2, #20]
 8002ce8:	f003 0302 	andmi.w	r3, r3, #2
 8002cec:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cee:	f004 f863 	bl	8006db8 <USB_ReadInterrupts>
 8002cf2:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 8002cf6:	d00b      	beq.n	8002d10 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cf8:	6820      	ldr	r0, [r4, #0]
 8002cfa:	f004 f861 	bl	8006dc0 <USB_ReadDevAllOutEpInterrupt>
 8002cfe:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8002d02:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 8002d04:	46b2      	mov	sl, r6
      epnum = 0U;
 8002d06:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	f040 8134 	bne.w	8002f78 <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d10:	6820      	ldr	r0, [r4, #0]
 8002d12:	f004 f851 	bl	8006db8 <USB_ReadInterrupts>
 8002d16:	0347      	lsls	r7, r0, #13
 8002d18:	d50c      	bpl.n	8002d34 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d1a:	6820      	ldr	r0, [r4, #0]
 8002d1c:	f004 f858 	bl	8006dd0 <USB_ReadDevAllInEpInterrupt>
 8002d20:	4625      	mov	r5, r4
 8002d22:	9001      	str	r0, [sp, #4]
 8002d24:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 8002d28:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 8002d2c:	9b01      	ldr	r3, [sp, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 8164 	bne.w	8002ffc <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d34:	6820      	ldr	r0, [r4, #0]
 8002d36:	f004 f83f 	bl	8006db8 <USB_ReadInterrupts>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	da15      	bge.n	8002d6a <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d3e:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8002d4a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	f040 81cf 	bne.w	80030f2 <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 8002d54:	2100      	movs	r1, #0
 8002d56:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f01c f83c 	bl	801edd8 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d60:	6822      	ldr	r2, [r4, #0]
 8002d62:	6953      	ldr	r3, [r2, #20]
 8002d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d68:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d6a:	6820      	ldr	r0, [r4, #0]
 8002d6c:	f004 f824 	bl	8006db8 <USB_ReadInterrupts>
 8002d70:	0505      	lsls	r5, r0, #20
 8002d72:	d50b      	bpl.n	8002d8c <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d74:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8002d78:	07d8      	lsls	r0, r3, #31
 8002d7a:	d502      	bpl.n	8002d82 <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f01b ff2f 	bl	801ebe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	6953      	ldr	r3, [r2, #20]
 8002d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8a:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d8c:	6820      	ldr	r0, [r4, #0]
 8002d8e:	f004 f813 	bl	8006db8 <USB_ReadInterrupts>
 8002d92:	0101      	lsls	r1, r0, #4
 8002d94:	d514      	bpl.n	8002dc0 <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002d9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002da0:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	f040 81a8 	bne.w	80030fa <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8002dac:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002dae:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8002db2:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002db6:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f01c f80c 	bl	801edd8 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dc0:	6820      	ldr	r0, [r4, #0]
 8002dc2:	f003 fff9 	bl	8006db8 <USB_ReadInterrupts>
 8002dc6:	04c2      	lsls	r2, r0, #19
 8002dc8:	d534      	bpl.n	8002e34 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dca:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 8002dce:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dd0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dd8:	2110      	movs	r1, #16
 8002dda:	f003 fcdd 	bl	8006798 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dde:	6860      	ldr	r0, [r4, #4]
 8002de0:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002de4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de8:	9a00      	ldr	r2, [sp, #0]
 8002dea:	4282      	cmp	r2, r0
 8002dec:	f040 8189 	bne.w	8003102 <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002df0:	69eb      	ldr	r3, [r5, #28]
 8002df2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002df6:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002df8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 819a 	beq.w	8003134 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8002e00:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8002e04:	f043 030b 	orr.w	r3, r3, #11
 8002e08:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002e0c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002e0e:	f043 030b 	orr.w	r3, r3, #11
 8002e12:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e14:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e18:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e1e:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e22:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002e26:	f004 f815 	bl	8006e54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	6953      	ldr	r3, [r2, #20]
 8002e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e32:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e34:	6820      	ldr	r0, [r4, #0]
 8002e36:	f003 ffbf 	bl	8006db8 <USB_ReadInterrupts>
 8002e3a:	0483      	lsls	r3, r0, #18
 8002e3c:	d520      	bpl.n	8002e80 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	f003 ffed 	bl	8006e1e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	68d3      	ldr	r3, [r2, #12]
 8002e48:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002e4c:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 8002e52:	2340      	movs	r3, #64	; 0x40
 8002e54:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8002e56:	f000 ff9d 	bl	8003d94 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e5a:	4bb3      	ldr	r3, [pc, #716]	; (8003128 <HAL_PCD_IRQHandler+0x47c>)
 8002e5c:	4ab3      	ldr	r2, [pc, #716]	; (800312c <HAL_PCD_IRQHandler+0x480>)
 8002e5e:	4403      	add	r3, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	f200 816f 	bhi.w	8003146 <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e6e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e70:	4620      	mov	r0, r4
 8002e72:	f01b fea8 	bl	801ebc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	6953      	ldr	r3, [r2, #20]
 8002e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e7e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	f003 ff99 	bl	8006db8 <USB_ReadInterrupts>
 8002e86:	06c7      	lsls	r7, r0, #27
 8002e88:	d52b      	bpl.n	8002ee2 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	6993      	ldr	r3, [r2, #24]
 8002e8e:	f023 0310 	bic.w	r3, r3, #16
 8002e92:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8002e94:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e98:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8002e9c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002e9e:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ea2:	f040 81a0 	bne.w	80031e6 <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ea6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eaa:	421d      	tst	r5, r3
 8002eac:	d014      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eae:	261c      	movs	r6, #28
 8002eb0:	fb06 4607 	mla	r6, r6, r7, r4
 8002eb4:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8002eb8:	462a      	mov	r2, r5
 8002eba:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8002ebe:	4648      	mov	r0, r9
 8002ec0:	f003 feec 	bl	8006c9c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec4:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 8002ec8:	442b      	add	r3, r5
 8002eca:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ece:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8002ed2:	441d      	add	r5, r3
 8002ed4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	6993      	ldr	r3, [r2, #24]
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	f003 ff68 	bl	8006db8 <USB_ReadInterrupts>
 8002ee8:	0706      	lsls	r6, r0, #28
 8002eea:	d507      	bpl.n	8002efc <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002eec:	4620      	mov	r0, r4
 8002eee:	f01b fe66 	bl	801ebbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	6953      	ldr	r3, [r2, #20]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	f003 ff5b 	bl	8006db8 <USB_ReadInterrupts>
 8002f02:	02c5      	lsls	r5, r0, #11
 8002f04:	d509      	bpl.n	8002f1a <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f06:	fa5f f18b 	uxtb.w	r1, fp
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f01b fe9e 	bl	801ec4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	6953      	ldr	r3, [r2, #20]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f18:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f1a:	6820      	ldr	r0, [r4, #0]
 8002f1c:	f003 ff4c 	bl	8006db8 <USB_ReadInterrupts>
 8002f20:	0280      	lsls	r0, r0, #10
 8002f22:	d509      	bpl.n	8002f38 <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f24:	fa5f f18b 	uxtb.w	r1, fp
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f01b fe8b 	bl	801ec44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	6953      	ldr	r3, [r2, #20]
 8002f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f36:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	f003 ff3d 	bl	8006db8 <USB_ReadInterrupts>
 8002f3e:	0041      	lsls	r1, r0, #1
 8002f40:	d507      	bpl.n	8002f52 <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f42:	4620      	mov	r0, r4
 8002f44:	f01b fe86 	bl	801ec54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	6953      	ldr	r3, [r2, #20]
 8002f4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f50:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	f003 ff30 	bl	8006db8 <USB_ReadInterrupts>
 8002f58:	0742      	lsls	r2, r0, #29
 8002f5a:	d50a      	bpl.n	8002f72 <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f60:	076b      	lsls	r3, r5, #29
 8002f62:	d502      	bpl.n	8002f6a <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f64:	4620      	mov	r0, r4
 8002f66:	f01b fe79 	bl	801ec5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4315      	orrs	r5, r2
 8002f70:	605d      	str	r5, [r3, #4]
    }
  }
}
 8002f72:	b005      	add	sp, #20
 8002f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8002f78:	07e9      	lsls	r1, r5, #31
 8002f7a:	d52e      	bpl.n	8002fda <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f7c:	fa5f f28b 	uxtb.w	r2, fp
 8002f80:	4611      	mov	r1, r2
 8002f82:	6820      	ldr	r0, [r4, #0]
 8002f84:	9201      	str	r2, [sp, #4]
 8002f86:	f003 ff2b 	bl	8006de0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f8a:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f8c:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f8e:	d50d      	bpl.n	8002fac <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f90:	4b67      	ldr	r3, [pc, #412]	; (8003130 <HAL_PCD_IRQHandler+0x484>)
 8002f92:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f94:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f96:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f98:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f9c:	d129      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8002f9e:	68b1      	ldr	r1, [r6, #8]
 8002fa0:	040b      	lsls	r3, r1, #16
 8002fa2:	d520      	bpl.n	8002fe6 <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8002fa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fa8:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fac:	0739      	lsls	r1, r7, #28
 8002fae:	d50f      	bpl.n	8002fd0 <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fb0:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_PCD_IRQHandler+0x484>)
 8002fb2:	4598      	cmp	r8, r3
 8002fb4:	d106      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8002fb6:	68b2      	ldr	r2, [r6, #8]
 8002fb8:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8002fba:	bf44      	itt	mi
 8002fbc:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8002fc0:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f01b fde3 	bl	801eb90 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fca:	2308      	movs	r3, #8
 8002fcc:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fd0:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fd2:	bf44      	itt	mi
 8002fd4:	2310      	movmi	r3, #16
 8002fd6:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 8002fda:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 8002fde:	086d      	lsrs	r5, r5, #1
 8002fe0:	f10a 0a20 	add.w	sl, sl, #32
 8002fe4:	e691      	b.n	8002d0a <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 8002fe6:	68b1      	ldr	r1, [r6, #8]
 8002fe8:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 8002fea:	bf44      	itt	mi
 8002fec:	2120      	movmi	r1, #32
 8002fee:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f01b fdd1 	bl	801eb9c <HAL_PCD_DataOutStageCallback>
 8002ffa:	e7d7      	b.n	8002fac <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ffc:	9b01      	ldr	r3, [sp, #4]
 8002ffe:	07de      	lsls	r6, r3, #31
 8003000:	d56e      	bpl.n	80030e0 <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003002:	fa5f fa8b 	uxtb.w	sl, fp
 8003006:	4651      	mov	r1, sl
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	f003 fef2 	bl	8006df2 <USB_ReadDevInEPInterrupt>
 800300e:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003010:	07f0      	lsls	r0, r6, #31
 8003012:	d510      	bpl.n	8003036 <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003014:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8003018:	2001      	movs	r0, #1
 800301a:	f00b 020f 	and.w	r2, fp, #15
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003022:	ea23 0302 	bic.w	r3, r3, r2
 8003026:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800302a:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800302c:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003030:	4620      	mov	r0, r4
 8003032:	f01b fdbc 	bl	801ebae <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003036:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003038:	bf44      	itt	mi
 800303a:	2308      	movmi	r3, #8
 800303c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003040:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003042:	bf44      	itt	mi
 8003044:	2310      	movmi	r3, #16
 8003046:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800304a:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800304c:	bf44      	itt	mi
 800304e:	2340      	movmi	r3, #64	; 0x40
 8003050:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003054:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003056:	bf44      	itt	mi
 8003058:	2302      	movmi	r3, #2
 800305a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800305e:	0636      	lsls	r6, r6, #24
 8003060:	d53e      	bpl.n	80030e0 <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003062:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003064:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8003066:	42b3      	cmp	r3, r6
 8003068:	d83a      	bhi.n	80030e0 <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800306a:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800306c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 8003072:	429e      	cmp	r6, r3
 8003074:	bf28      	it	cs
 8003076:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003078:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800307c:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800307e:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8003082:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003084:	9303      	str	r3, [sp, #12]
 8003086:	9b03      	ldr	r3, [sp, #12]
 8003088:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	b29b      	uxth	r3, r3
 800308e:	42b3      	cmp	r3, r6
 8003090:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003092:	d923      	bls.n	80030dc <HAL_PCD_IRQHandler+0x430>
 8003094:	429f      	cmp	r7, r3
 8003096:	d921      	bls.n	80030dc <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003098:	b967      	cbnz	r7, 80030b4 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800309a:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 800309c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800309e:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80030a2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 80030a6:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030aa:	ea23 0302 	bic.w	r3, r3, r2
 80030ae:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 80030b2:	e015      	b.n	80030e0 <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 80030b4:	1aff      	subs	r7, r7, r3
 80030b6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80030b8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80030ba:	9802      	ldr	r0, [sp, #8]
 80030bc:	429f      	cmp	r7, r3
 80030be:	bf28      	it	cs
 80030c0:	461f      	movcs	r7, r3
 80030c2:	b2bb      	uxth	r3, r7
 80030c4:	4652      	mov	r2, sl
 80030c6:	f003 fd13 	bl	8006af0 <USB_WritePacket>
    ep->xfer_buff  += len;
 80030ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80030cc:	443b      	add	r3, r7
 80030ce:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80030d0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80030d2:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 80030d4:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 80030d6:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 80030d8:	656f      	str	r7, [r5, #84]	; 0x54
 80030da:	e7d4      	b.n	8003086 <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 80030dc:	429f      	cmp	r7, r3
 80030de:	d9dc      	bls.n	800309a <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 80030e0:	9b01      	ldr	r3, [sp, #4]
 80030e2:	085b      	lsrs	r3, r3, #1
        epnum++;
 80030e4:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	351c      	adds	r5, #28
 80030ec:	f108 0820 	add.w	r8, r8, #32
 80030f0:	e61c      	b.n	8002d2c <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 80030f2:	4620      	mov	r0, r4
 80030f4:	f01b fd8c 	bl	801ec10 <HAL_PCD_ResumeCallback>
 80030f8:	e632      	b.n	8002d60 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 80030fa:	4620      	mov	r0, r4
 80030fc:	f01b fd70 	bl	801ebe0 <HAL_PCD_SuspendCallback>
 8003100:	e65e      	b.n	8002dc0 <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003102:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800310a:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800310c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003110:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003114:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003118:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311c:	9a00      	ldr	r2, [sp, #0]
 800311e:	3201      	adds	r2, #1
 8003120:	9200      	str	r2, [sp, #0]
 8003122:	3320      	adds	r3, #32
 8003124:	e660      	b.n	8002de8 <HAL_PCD_IRQHandler+0x13c>
 8003126:	bf00      	nop
 8003128:	ff275340 	.word	0xff275340
 800312c:	000c34ff 	.word	0x000c34ff
 8003130:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003134:	696b      	ldr	r3, [r5, #20]
 8003136:	f043 030b 	orr.w	r3, r3, #11
 800313a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800313c:	692b      	ldr	r3, [r5, #16]
 800313e:	f043 030b 	orr.w	r3, r3, #11
 8003142:	612b      	str	r3, [r5, #16]
 8003144:	e666      	b.n	8002e14 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003146:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <HAL_PCD_IRQHandler+0x558>)
 8003148:	492f      	ldr	r1, [pc, #188]	; (8003208 <HAL_PCD_IRQHandler+0x55c>)
 800314a:	4402      	add	r2, r0
 800314c:	428a      	cmp	r2, r1
 800314e:	d803      	bhi.n	8003158 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003156:	e68a      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003158:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800315c:	492b      	ldr	r1, [pc, #172]	; (800320c <HAL_PCD_IRQHandler+0x560>)
 800315e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003162:	428a      	cmp	r2, r1
 8003164:	d803      	bhi.n	800316e <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800316c:	e67f      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800316e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003172:	4927      	ldr	r1, [pc, #156]	; (8003210 <HAL_PCD_IRQHandler+0x564>)
 8003174:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003178:	428a      	cmp	r2, r1
 800317a:	d803      	bhi.n	8003184 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003182:	e674      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <HAL_PCD_IRQHandler+0x568>)
 8003186:	4924      	ldr	r1, [pc, #144]	; (8003218 <HAL_PCD_IRQHandler+0x56c>)
 8003188:	4402      	add	r2, r0
 800318a:	428a      	cmp	r2, r1
 800318c:	d803      	bhi.n	8003196 <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003194:	e66b      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003196:	4a21      	ldr	r2, [pc, #132]	; (800321c <HAL_PCD_IRQHandler+0x570>)
 8003198:	4921      	ldr	r1, [pc, #132]	; (8003220 <HAL_PCD_IRQHandler+0x574>)
 800319a:	4402      	add	r2, r0
 800319c:	428a      	cmp	r2, r1
 800319e:	d803      	bhi.n	80031a8 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80031a6:	e662      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80031a8:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_PCD_IRQHandler+0x578>)
 80031aa:	491f      	ldr	r1, [pc, #124]	; (8003228 <HAL_PCD_IRQHandler+0x57c>)
 80031ac:	4402      	add	r2, r0
 80031ae:	428a      	cmp	r2, r1
 80031b0:	d803      	bhi.n	80031ba <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80031b8:	e659      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80031ba:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80031be:	491b      	ldr	r1, [pc, #108]	; (800322c <HAL_PCD_IRQHandler+0x580>)
 80031c0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80031c4:	428a      	cmp	r2, r1
 80031c6:	d803      	bhi.n	80031d0 <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ce:	e64e      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80031d0:	4a17      	ldr	r2, [pc, #92]	; (8003230 <HAL_PCD_IRQHandler+0x584>)
 80031d2:	4918      	ldr	r1, [pc, #96]	; (8003234 <HAL_PCD_IRQHandler+0x588>)
 80031d4:	4402      	add	r2, r0
 80031d6:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	bf94      	ite	ls
 80031dc:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80031e0:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80031e4:	e643      	b.n	8002e6e <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	f47f ae76 	bne.w	8002ed8 <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031ec:	2208      	movs	r2, #8
 80031ee:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80031f2:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f4:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031f6:	f003 fd51 	bl	8006c9c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031fa:	fb06 4607 	mla	r6, r6, r7, r4
 80031fe:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003202:	e664      	b.n	8002ece <HAL_PCD_IRQHandler+0x222>
 8003204:	ff1b1e40 	.word	0xff1b1e40
 8003208:	000f423f 	.word	0x000f423f
 800320c:	00124f7f 	.word	0x00124f7f
 8003210:	0013d61f 	.word	0x0013d61f
 8003214:	fee5b660 	.word	0xfee5b660
 8003218:	0016e35f 	.word	0x0016e35f
 800321c:	feced300 	.word	0xfeced300
 8003220:	001b773f 	.word	0x001b773f
 8003224:	feb35bc0 	.word	0xfeb35bc0
 8003228:	002191bf 	.word	0x002191bf
 800322c:	0038751f 	.word	0x0038751f
 8003230:	fe5954e0 	.word	0xfe5954e0
 8003234:	00419cdf 	.word	0x00419cdf

08003238 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003238:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800323c:	2a01      	cmp	r2, #1
{
 800323e:	b510      	push	{r4, lr}
 8003240:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003242:	d00b      	beq.n	800325c <HAL_PCD_SetAddress+0x24>
 8003244:	2201      	movs	r2, #1
 8003246:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800324a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800324e:	6800      	ldr	r0, [r0, #0]
 8003250:	f003 fd8a 	bl	8006d68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003254:	2000      	movs	r0, #0
 8003256:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800325a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800325c:	2002      	movs	r0, #2
}
 800325e:	bd10      	pop	{r4, pc}

08003260 <HAL_PCD_EP_Open>:
{
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003268:	f011 0f80 	tst.w	r1, #128	; 0x80
 800326c:	f04f 061c 	mov.w	r6, #28
 8003270:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003272:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003276:	bf15      	itete	ne
 8003278:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 800327c:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003280:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003282:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003286:	bf15      	itete	ne
 8003288:	2601      	movne	r6, #1
    ep->is_in = 0U;
 800328a:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 800328c:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003290:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003294:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003296:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003298:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 800329a:	b2c0      	uxtb	r0, r0
 800329c:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 800329e:	b102      	cbz	r2, 80032a2 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80032a0:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80032a2:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80032a4:	bf04      	itt	eq
 80032a6:	2300      	moveq	r3, #0
 80032a8:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80032aa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d009      	beq.n	80032c6 <HAL_PCD_EP_Open+0x66>
 80032b2:	2301      	movs	r3, #1
 80032b4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	f003 fb33 	bl	8006924 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032be:	2000      	movs	r0, #0
 80032c0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80032c6:	2002      	movs	r0, #2
}
 80032c8:	bd70      	pop	{r4, r5, r6, pc}

080032ca <HAL_PCD_EP_Close>:
{
 80032ca:	f001 030f 	and.w	r3, r1, #15
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80032d6:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80032da:	fb00 4102 	mla	r1, r0, r2, r4
 80032de:	bf19      	ittee	ne
 80032e0:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80032e2:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 80032e6:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80032ea:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80032ee:	bf15      	itete	ne
 80032f0:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80032f2:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80032f4:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 80032f8:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 80032fc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80032fe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003302:	2b01      	cmp	r3, #1
 8003304:	d009      	beq.n	800331a <HAL_PCD_EP_Close+0x50>
 8003306:	2301      	movs	r3, #1
 8003308:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800330c:	6820      	ldr	r0, [r4, #0]
 800330e:	f003 fb4b 	bl	80069a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003312:	2000      	movs	r0, #0
 8003314:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003318:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800331a:	2002      	movs	r0, #2
}
 800331c:	bd10      	pop	{r4, pc}

0800331e <HAL_PCD_EP_Receive>:
{
 800331e:	b538      	push	{r3, r4, r5, lr}
 8003320:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003324:	241c      	movs	r4, #28
 8003326:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800332a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800332e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003332:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003336:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003338:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 800333c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003340:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003344:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003348:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 800334a:	b91d      	cbnz	r5, 8003354 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800334c:	f003 fb5e 	bl	8006a0c <USB_EP0StartXfer>
}
 8003350:	2000      	movs	r0, #0
 8003352:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003354:	f003 fbdc 	bl	8006b10 <USB_EPStartXfer>
 8003358:	e7fa      	b.n	8003350 <HAL_PCD_EP_Receive+0x32>

0800335a <HAL_PCD_EP_Transmit>:
{
 800335a:	b538      	push	{r3, r4, r5, lr}
 800335c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003360:	241c      	movs	r4, #28
 8003362:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003366:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800336a:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800336c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003372:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003374:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003376:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 800337a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800337e:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003380:	b91d      	cbnz	r5, 800338a <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003382:	f003 fb43 	bl	8006a0c <USB_EP0StartXfer>
}
 8003386:	2000      	movs	r0, #0
 8003388:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800338a:	f003 fbc1 	bl	8006b10 <USB_EPStartXfer>
 800338e:	e7fa      	b.n	8003386 <HAL_PCD_EP_Transmit+0x2c>

08003390 <HAL_PCD_EP_SetStall>:
{
 8003390:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003392:	6843      	ldr	r3, [r0, #4]
 8003394:	f001 050f 	and.w	r5, r1, #15
 8003398:	429d      	cmp	r5, r3
{
 800339a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 800339c:	d82d      	bhi.n	80033fa <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800339e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033a2:	f04f 021c 	mov.w	r2, #28
 80033a6:	d01e      	beq.n	80033e6 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 80033a8:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80033ac:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80033b0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80033b2:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 80033b4:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 80033b8:	2201      	movs	r2, #1
 80033ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80033bc:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80033be:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80033c2:	4291      	cmp	r1, r2
 80033c4:	d01b      	beq.n	80033fe <HAL_PCD_EP_SetStall+0x6e>
 80033c6:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033ca:	4619      	mov	r1, r3
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	f003 fc73 	bl	8006cb8 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 80033d2:	b925      	cbnz	r5, 80033de <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033d4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	f003 fd3b 	bl	8006e54 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80033de:	2000      	movs	r0, #0
 80033e0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80033e4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80033e6:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80033ea:	fb02 0101 	mla	r1, r2, r1, r0
 80033ee:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80033f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80033f4:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80033f8:	e7de      	b.n	80033b8 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80033fa:	2001      	movs	r0, #1
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80033fe:	2002      	movs	r0, #2
}
 8003400:	bd38      	pop	{r3, r4, r5, pc}

08003402 <HAL_PCD_EP_ClrStall>:
{
 8003402:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003404:	6843      	ldr	r3, [r0, #4]
 8003406:	f001 020f 	and.w	r2, r1, #15
 800340a:	429a      	cmp	r2, r3
{
 800340c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800340e:	d826      	bhi.n	800345e <HAL_PCD_EP_ClrStall+0x5c>
 8003410:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003412:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003416:	fb03 0102 	mla	r1, r3, r2, r0
 800341a:	bf19      	ittee	ne
 800341c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 800341e:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003422:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003426:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 800342a:	bf14      	ite	ne
 800342c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800342e:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003430:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003434:	bf14      	ite	ne
 8003436:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 800343a:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 800343e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003440:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003442:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003446:	2b01      	cmp	r3, #1
 8003448:	d00b      	beq.n	8003462 <HAL_PCD_EP_ClrStall+0x60>
 800344a:	2301      	movs	r3, #1
 800344c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	f003 fc5e 	bl	8006d12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003456:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 800345a:	4628      	mov	r0, r5
 800345c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800345e:	2001      	movs	r0, #1
 8003460:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003462:	2002      	movs	r0, #2
}
 8003464:	bd38      	pop	{r3, r4, r5, pc}

08003466 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003466:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003468:	6804      	ldr	r4, [r0, #0]
 800346a:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 800346c:	b921      	cbnz	r1, 8003478 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800346e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003472:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003474:	2000      	movs	r0, #0
 8003476:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003478:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800347a:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800347c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003480:	2000      	movs	r0, #0
 8003482:	1c46      	adds	r6, r0, #1
 8003484:	b2c0      	uxtb	r0, r0
 8003486:	4285      	cmp	r5, r0
 8003488:	d806      	bhi.n	8003498 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800348a:	313f      	adds	r1, #63	; 0x3f
 800348c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003494:	6063      	str	r3, [r4, #4]
 8003496:	e7ed      	b.n	8003474 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003498:	3040      	adds	r0, #64	; 0x40
 800349a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800349e:	6840      	ldr	r0, [r0, #4]
 80034a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80034a4:	4630      	mov	r0, r6
 80034a6:	e7ec      	b.n	8003482 <HAL_PCDEx_SetTxFiFo+0x1c>

080034a8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80034a8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80034aa:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80034ac:	6259      	str	r1, [r3, #36]	; 0x24
}
 80034ae:	4770      	bx	lr

080034b0 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b0:	6802      	ldr	r2, [r0, #0]
{
 80034b2:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 80034b4:	2101      	movs	r1, #1
 80034b6:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80034ba:	2000      	movs	r0, #0
 80034bc:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034c0:	6993      	ldr	r3, [r2, #24]
 80034c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034c6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034c8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	f043 0303 	orr.w	r3, r3, #3
 80034d2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80034d4:	4770      	bx	lr

080034d6 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d6:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 80034d8:	2301      	movs	r3, #1
 80034da:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80034de:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80034e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e4:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 80034e6:	2000      	movs	r0, #0
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_PWREx_GetVoltageRange+0x20>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80034f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80034f8:	d007      	beq.n	800350a <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80034fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fe:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003502:	bf14      	ite	ne
 8003504:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003508:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800350a:	4770      	bx	lr
 800350c:	40007000 	.word	0x40007000

08003510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003510:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003512:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003514:	bb28      	cbnz	r0, 8003562 <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003516:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800351a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800351e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800352a:	d119      	bne.n	8003560 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003538:	4a20      	ldr	r2, [pc, #128]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xac>)
 800353a:	6811      	ldr	r1, [r2, #0]
 800353c:	2232      	movs	r2, #50	; 0x32
 800353e:	434a      	muls	r2, r1
 8003540:	491f      	ldr	r1, [pc, #124]	; (80035c0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003542:	fbb2 f2f1 	udiv	r2, r2, r1
 8003546:	4619      	mov	r1, r3
 8003548:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354a:	6958      	ldr	r0, [r3, #20]
 800354c:	0540      	lsls	r0, r0, #21
 800354e:	d500      	bpl.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003550:	b922      	cbnz	r2, 800355c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003552:	694b      	ldr	r3, [r1, #20]
 8003554:	055b      	lsls	r3, r3, #21
 8003556:	d52d      	bpl.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003558:	2003      	movs	r0, #3
 800355a:	4770      	bx	lr
        wait_loop_index--;
 800355c:	3a01      	subs	r2, #1
 800355e:	e7f4      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003560:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003562:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003566:	d120      	bne.n	80035aa <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003568:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800356c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003570:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800357c:	d11a      	bne.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003588:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800358a:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xac>)
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	2232      	movs	r2, #50	; 0x32
 8003590:	434a      	muls	r2, r1
 8003592:	490b      	ldr	r1, [pc, #44]	; (80035c0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003594:	fbb2 f2f1 	udiv	r2, r2, r1
 8003598:	4619      	mov	r1, r3
 800359a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800359c:	6958      	ldr	r0, [r3, #20]
 800359e:	0540      	lsls	r0, r0, #21
 80035a0:	d5d7      	bpl.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x42>
 80035a2:	2a00      	cmp	r2, #0
 80035a4:	d0d5      	beq.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 80035a6:	3a01      	subs	r2, #1
 80035a8:	e7f8      	b.n	800359c <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035aa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80035ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035b2:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035b4:	2000      	movs	r0, #0
}
 80035b6:	4770      	bx	lr
 80035b8:	40007000 	.word	0x40007000
 80035bc:	20000a58 	.word	0x20000a58
 80035c0:	000f4240 	.word	0x000f4240

080035c4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035c4:	4a02      	ldr	r2, [pc, #8]	; (80035d0 <HAL_PWREx_EnableVddUSB+0xc>)
 80035c6:	6853      	ldr	r3, [r2, #4]
 80035c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035cc:	6053      	str	r3, [r2, #4]
 80035ce:	4770      	bx	lr
 80035d0:	40007000 	.word	0x40007000

080035d4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80035d4:	4a02      	ldr	r2, [pc, #8]	; (80035e0 <HAL_PWREx_EnableVddIO2+0xc>)
 80035d6:	6853      	ldr	r3, [r2, #4]
 80035d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035dc:	6053      	str	r3, [r2, #4]
 80035de:	4770      	bx	lr
 80035e0:	40007000 	.word	0x40007000

080035e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035e6:	4d1c      	ldr	r5, [pc, #112]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 80035e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80035ea:	00da      	lsls	r2, r3, #3
{
 80035ec:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035ee:	d518      	bpl.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f0:	f7ff ff7c 	bl	80034ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80035f8:	d123      	bne.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035fa:	2c80      	cmp	r4, #128	; 0x80
 80035fc:	d928      	bls.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035fe:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003600:	bf8c      	ite	hi
 8003602:	2002      	movhi	r0, #2
 8003604:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003606:	4a15      	ldr	r2, [pc, #84]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	f023 030f 	bic.w	r3, r3, #15
 800360e:	4303      	orrs	r3, r0
 8003610:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003618:	1a18      	subs	r0, r3, r0
 800361a:	bf18      	it	ne
 800361c:	2001      	movne	r0, #1
 800361e:	b003      	add	sp, #12
 8003620:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	65ab      	str	r3, [r5, #88]	; 0x58
 800362a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003634:	f7ff ff5a 	bl	80034ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003638:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003640:	e7d8      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003642:	2c7f      	cmp	r4, #127	; 0x7f
 8003644:	d806      	bhi.n	8003654 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003646:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800364a:	4258      	negs	r0, r3
 800364c:	4158      	adcs	r0, r3
 800364e:	e7da      	b.n	8003606 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003650:	2000      	movs	r0, #0
 8003652:	e7d8      	b.n	8003606 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003654:	2002      	movs	r0, #2
 8003656:	e7d6      	b.n	8003606 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003658:	40021000 	.word	0x40021000
 800365c:	40022000 	.word	0x40022000

08003660 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x90>)
 8003662:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003664:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003666:	f012 020c 	ands.w	r2, r2, #12
 800366a:	d005      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x18>
 800366c:	2a0c      	cmp	r2, #12
 800366e:	d115      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003670:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003674:	2901      	cmp	r1, #1
 8003676:	d118      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003678:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800367a:	481e      	ldr	r0, [pc, #120]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800367c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800367e:	bf55      	itete	pl
 8003680:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003684:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003686:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800368a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800368e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003692:	b112      	cbz	r2, 800369a <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003694:	2a0c      	cmp	r2, #12
 8003696:	d009      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x4c>
 8003698:	2000      	movs	r0, #0
}
 800369a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800369c:	2a04      	cmp	r2, #4
 800369e:	d024      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036a0:	2a08      	cmp	r2, #8
 80036a2:	4815      	ldr	r0, [pc, #84]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036a4:	bf18      	it	ne
 80036a6:	2000      	movne	r0, #0
 80036a8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036aa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ac:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ae:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b0:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b4:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 80036b8:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ba:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80036be:	d005      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x6c>
 80036c0:	2903      	cmp	r1, #3
 80036c2:	d003      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80036ca:	e003      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036cc:	68d9      	ldr	r1, [r3, #12]
 80036ce:	480a      	ldr	r0, [pc, #40]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036d0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036d4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036da:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80036de:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036e2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80036e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80036e8:	4770      	bx	lr
 80036ea:	4803      	ldr	r0, [pc, #12]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	0802e758 	.word	0x0802e758
 80036f8:	00f42400 	.word	0x00f42400

080036fc <HAL_RCC_OscConfig>:
{
 80036fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003700:	4605      	mov	r5, r0
 8003702:	b908      	cbnz	r0, 8003708 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003704:	2001      	movs	r0, #1
 8003706:	e046      	b.n	8003796 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003708:	4ca8      	ldr	r4, [pc, #672]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800370a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800370c:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800370e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003710:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003712:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003716:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800371a:	d572      	bpl.n	8003802 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800371c:	b11e      	cbz	r6, 8003726 <HAL_RCC_OscConfig+0x2a>
 800371e:	2e0c      	cmp	r6, #12
 8003720:	d151      	bne.n	80037c6 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003722:	2f01      	cmp	r7, #1
 8003724:	d14f      	bne.n	80037c6 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	0799      	lsls	r1, r3, #30
 800372a:	d502      	bpl.n	8003732 <HAL_RCC_OscConfig+0x36>
 800372c:	69ab      	ldr	r3, [r5, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0e8      	beq.n	8003704 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	6a28      	ldr	r0, [r5, #32]
 8003736:	071a      	lsls	r2, r3, #28
 8003738:	bf56      	itet	pl
 800373a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800373e:	6823      	ldrmi	r3, [r4, #0]
 8003740:	091b      	lsrpl	r3, r3, #4
 8003742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003746:	4283      	cmp	r3, r0
 8003748:	d228      	bcs.n	800379c <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800374a:	f7ff ff4b 	bl	80035e4 <RCC_SetFlashLatencyFromMSIRange>
 800374e:	2800      	cmp	r0, #0
 8003750:	d1d8      	bne.n	8003704 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	6a2a      	ldr	r2, [r5, #32]
 800375e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003762:	4313      	orrs	r3, r2
 8003764:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003766:	6863      	ldr	r3, [r4, #4]
 8003768:	69ea      	ldr	r2, [r5, #28]
 800376a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003772:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003774:	f7ff ff74 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8003778:	68a3      	ldr	r3, [r4, #8]
 800377a:	4a8d      	ldr	r2, [pc, #564]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 800377c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	40d8      	lsrs	r0, r3
 8003788:	4b8a      	ldr	r3, [pc, #552]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 800378a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800378c:	2000      	movs	r0, #0
 800378e:	f7fd fc0f 	bl	8000fb0 <HAL_InitTick>
        if(status != HAL_OK)
 8003792:	2800      	cmp	r0, #0
 8003794:	d035      	beq.n	8003802 <HAL_RCC_OscConfig+0x106>
}
 8003796:	b003      	add	sp, #12
 8003798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6023      	str	r3, [r4, #0]
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037aa:	4303      	orrs	r3, r0
 80037ac:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ae:	6863      	ldr	r3, [r4, #4]
 80037b0:	69ea      	ldr	r2, [r5, #28]
 80037b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037ba:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037bc:	f7ff ff12 	bl	80035e4 <RCC_SetFlashLatencyFromMSIRange>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d0d7      	beq.n	8003774 <HAL_RCC_OscConfig+0x78>
 80037c4:	e79e      	b.n	8003704 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037c6:	69ab      	ldr	r3, [r5, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03a      	beq.n	8003842 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037d4:	f7fd fc1c 	bl	8001010 <HAL_GetTick>
 80037d8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	079b      	lsls	r3, r3, #30
 80037de:	d528      	bpl.n	8003832 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f043 0308 	orr.w	r3, r3, #8
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	6a2a      	ldr	r2, [r5, #32]
 80037ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f0:	4313      	orrs	r3, r2
 80037f2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f4:	6863      	ldr	r3, [r4, #4]
 80037f6:	69ea      	ldr	r2, [r5, #28]
 80037f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003800:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	682b      	ldr	r3, [r5, #0]
 8003804:	07d9      	lsls	r1, r3, #31
 8003806:	d42d      	bmi.n	8003864 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	079a      	lsls	r2, r3, #30
 800380c:	d46b      	bmi.n	80038e6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380e:	682b      	ldr	r3, [r5, #0]
 8003810:	0719      	lsls	r1, r3, #28
 8003812:	f100 80a0 	bmi.w	8003956 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	075a      	lsls	r2, r3, #29
 800381a:	f100 80cd 	bmi.w	80039b8 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800381e:	682b      	ldr	r3, [r5, #0]
 8003820:	069a      	lsls	r2, r3, #26
 8003822:	f100 8136 	bmi.w	8003a92 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003826:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	f040 815c 	bne.w	8003ae6 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 800382e:	2000      	movs	r0, #0
 8003830:	e7b1      	b.n	8003796 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003832:	f7fd fbed 	bl	8001010 <HAL_GetTick>
 8003836:	eba0 0008 	sub.w	r0, r0, r8
 800383a:	2802      	cmp	r0, #2
 800383c:	d9cd      	bls.n	80037da <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 800383e:	2003      	movs	r0, #3
 8003840:	e7a9      	b.n	8003796 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800384a:	f7fd fbe1 	bl	8001010 <HAL_GetTick>
 800384e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	0798      	lsls	r0, r3, #30
 8003854:	d5d5      	bpl.n	8003802 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003856:	f7fd fbdb 	bl	8001010 <HAL_GetTick>
 800385a:	eba0 0008 	sub.w	r0, r0, r8
 800385e:	2802      	cmp	r0, #2
 8003860:	d9f6      	bls.n	8003850 <HAL_RCC_OscConfig+0x154>
 8003862:	e7ec      	b.n	800383e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003864:	2e08      	cmp	r6, #8
 8003866:	d003      	beq.n	8003870 <HAL_RCC_OscConfig+0x174>
 8003868:	2e0c      	cmp	r6, #12
 800386a:	d108      	bne.n	800387e <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800386c:	2f03      	cmp	r7, #3
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	039b      	lsls	r3, r3, #14
 8003874:	d5c8      	bpl.n	8003808 <HAL_RCC_OscConfig+0x10c>
 8003876:	686b      	ldr	r3, [r5, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1c5      	bne.n	8003808 <HAL_RCC_OscConfig+0x10c>
 800387c:	e742      	b.n	8003704 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	686b      	ldr	r3, [r5, #4]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d110      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1ac>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800388e:	f7fd fbbf 	bl	8001010 <HAL_GetTick>
 8003892:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	0398      	lsls	r0, r3, #14
 8003898:	d4b6      	bmi.n	8003808 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389a:	f7fd fbb9 	bl	8001010 <HAL_GetTick>
 800389e:	eba0 0008 	sub.w	r0, r0, r8
 80038a2:	2864      	cmp	r0, #100	; 0x64
 80038a4:	d9f6      	bls.n	8003894 <HAL_RCC_OscConfig+0x198>
 80038a6:	e7ca      	b.n	800383e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ac:	d104      	bne.n	80038b8 <HAL_RCC_OscConfig+0x1bc>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	e7e6      	b.n	8003886 <HAL_RCC_OscConfig+0x18a>
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038be:	6022      	str	r2, [r4, #0]
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e0      	bne.n	800388e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80038cc:	f7fd fba0 	bl	8001010 <HAL_GetTick>
 80038d0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	0399      	lsls	r1, r3, #14
 80038d6:	d597      	bpl.n	8003808 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fd fb9a 	bl	8001010 <HAL_GetTick>
 80038dc:	eba0 0008 	sub.w	r0, r0, r8
 80038e0:	2864      	cmp	r0, #100	; 0x64
 80038e2:	d9f6      	bls.n	80038d2 <HAL_RCC_OscConfig+0x1d6>
 80038e4:	e7ab      	b.n	800383e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038e6:	2e04      	cmp	r6, #4
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1f6>
 80038ea:	2e0c      	cmp	r6, #12
 80038ec:	d110      	bne.n	8003910 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80038ee:	2f02      	cmp	r7, #2
 80038f0:	d10e      	bne.n	8003910 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	055a      	lsls	r2, r3, #21
 80038f6:	d503      	bpl.n	8003900 <HAL_RCC_OscConfig+0x204>
 80038f8:	68eb      	ldr	r3, [r5, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f43f af02 	beq.w	8003704 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	692a      	ldr	r2, [r5, #16]
 8003904:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003908:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800390c:	6063      	str	r3, [r4, #4]
 800390e:	e77e      	b.n	800380e <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003910:	68eb      	ldr	r3, [r5, #12]
 8003912:	b17b      	cbz	r3, 8003934 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800391c:	f7fd fb78 	bl	8001010 <HAL_GetTick>
 8003920:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	055b      	lsls	r3, r3, #21
 8003926:	d4eb      	bmi.n	8003900 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fd fb72 	bl	8001010 <HAL_GetTick>
 800392c:	1bc0      	subs	r0, r0, r7
 800392e:	2802      	cmp	r0, #2
 8003930:	d9f7      	bls.n	8003922 <HAL_RCC_OscConfig+0x226>
 8003932:	e784      	b.n	800383e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800393c:	f7fd fb68 	bl	8001010 <HAL_GetTick>
 8003940:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	0558      	lsls	r0, r3, #21
 8003946:	f57f af62 	bpl.w	800380e <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394a:	f7fd fb61 	bl	8001010 <HAL_GetTick>
 800394e:	1bc0      	subs	r0, r0, r7
 8003950:	2802      	cmp	r0, #2
 8003952:	d9f6      	bls.n	8003942 <HAL_RCC_OscConfig+0x246>
 8003954:	e773      	b.n	800383e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003956:	696b      	ldr	r3, [r5, #20]
 8003958:	b19b      	cbz	r3, 8003982 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800395a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003966:	f7fd fb53 	bl	8001010 <HAL_GetTick>
 800396a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800396c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003970:	079b      	lsls	r3, r3, #30
 8003972:	f53f af50 	bmi.w	8003816 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003976:	f7fd fb4b 	bl	8001010 <HAL_GetTick>
 800397a:	1bc0      	subs	r0, r0, r7
 800397c:	2802      	cmp	r0, #2
 800397e:	d9f5      	bls.n	800396c <HAL_RCC_OscConfig+0x270>
 8003980:	e75d      	b.n	800383e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8003982:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800398e:	f7fd fb3f 	bl	8001010 <HAL_GetTick>
 8003992:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003998:	0798      	lsls	r0, r3, #30
 800399a:	f57f af3c 	bpl.w	8003816 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399e:	f7fd fb37 	bl	8001010 <HAL_GetTick>
 80039a2:	1bc0      	subs	r0, r0, r7
 80039a4:	2802      	cmp	r0, #2
 80039a6:	d9f5      	bls.n	8003994 <HAL_RCC_OscConfig+0x298>
 80039a8:	e749      	b.n	800383e <HAL_RCC_OscConfig+0x142>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	0802e740 	.word	0x0802e740
 80039b4:	20000a58 	.word	0x20000a58
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039ba:	00d9      	lsls	r1, r3, #3
 80039bc:	d429      	bmi.n	8003a12 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80039c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039d0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d4:	4f71      	ldr	r7, [pc, #452]	; (8003b9c <HAL_RCC_OscConfig+0x4a0>)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	05da      	lsls	r2, r3, #23
 80039da:	d51d      	bpl.n	8003a18 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039dc:	68ab      	ldr	r3, [r5, #8]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d12b      	bne.n	8003a3a <HAL_RCC_OscConfig+0x33e>
 80039e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80039ee:	f7fd fb0f 	bl	8001010 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039f6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80039fc:	0798      	lsls	r0, r3, #30
 80039fe:	d542      	bpl.n	8003a86 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8003a00:	f1b8 0f00 	cmp.w	r8, #0
 8003a04:	f43f af0b 	beq.w	800381e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a10:	e705      	b.n	800381e <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	f04f 0800 	mov.w	r8, #0
 8003a16:	e7dd      	b.n	80039d4 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003a20:	f7fd faf6 	bl	8001010 <HAL_GetTick>
 8003a24:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	d4d7      	bmi.n	80039dc <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2c:	f7fd faf0 	bl	8001010 <HAL_GetTick>
 8003a30:	eba0 0009 	sub.w	r0, r0, r9
 8003a34:	2802      	cmp	r0, #2
 8003a36:	d9f6      	bls.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 8003a38:	e701      	b.n	800383e <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x350>
 8003a3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003a4a:	e7ca      	b.n	80039e2 <HAL_RCC_OscConfig+0x2e6>
 8003a4c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8003a58:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003a5c:	f022 0204 	bic.w	r2, r2, #4
 8003a60:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1c2      	bne.n	80039ee <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8003a68:	f7fd fad2 	bl	8001010 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a70:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003a76:	0799      	lsls	r1, r3, #30
 8003a78:	d5c2      	bpl.n	8003a00 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fd fac9 	bl	8001010 <HAL_GetTick>
 8003a7e:	1bc0      	subs	r0, r0, r7
 8003a80:	4548      	cmp	r0, r9
 8003a82:	d9f6      	bls.n	8003a72 <HAL_RCC_OscConfig+0x376>
 8003a84:	e6db      	b.n	800383e <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd fac3 	bl	8001010 <HAL_GetTick>
 8003a8a:	1bc0      	subs	r0, r0, r7
 8003a8c:	4548      	cmp	r0, r9
 8003a8e:	d9b3      	bls.n	80039f8 <HAL_RCC_OscConfig+0x2fc>
 8003a90:	e6d5      	b.n	800383e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a94:	b19b      	cbz	r3, 8003abe <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8003a96:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003aa2:	f7fd fab5 	bl	8001010 <HAL_GetTick>
 8003aa6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003aac:	079b      	lsls	r3, r3, #30
 8003aae:	f53f aeba 	bmi.w	8003826 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab2:	f7fd faad 	bl	8001010 <HAL_GetTick>
 8003ab6:	1bc0      	subs	r0, r0, r7
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d9f5      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x3ac>
 8003abc:	e6bf      	b.n	800383e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8003abe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003aca:	f7fd faa1 	bl	8001010 <HAL_GetTick>
 8003ace:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ad0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003ad4:	0798      	lsls	r0, r3, #30
 8003ad6:	f57f aea6 	bpl.w	8003826 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ada:	f7fd fa99 	bl	8001010 <HAL_GetTick>
 8003ade:	1bc0      	subs	r0, r0, r7
 8003ae0:	2802      	cmp	r0, #2
 8003ae2:	d9f5      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x3d4>
 8003ae4:	e6ab      	b.n	800383e <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae6:	2e0c      	cmp	r6, #12
 8003ae8:	f43f ae0c 	beq.w	8003704 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aec:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003af6:	d136      	bne.n	8003b66 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8003af8:	f7fd fa8a 	bl	8001010 <HAL_GetTick>
 8003afc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	0199      	lsls	r1, r3, #6
 8003b02:	d42a      	bmi.n	8003b5a <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b04:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003b06:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003b08:	06db      	lsls	r3, r3, #27
 8003b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b0e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003b10:	4313      	orrs	r3, r2
 8003b12:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003b14:	3a01      	subs	r2, #1
 8003b16:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003b1a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003b1c:	0852      	lsrs	r2, r2, #1
 8003b1e:	3a01      	subs	r2, #1
 8003b20:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003b24:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003b26:	0852      	lsrs	r2, r2, #1
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003b2e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b38:	68e3      	ldr	r3, [r4, #12]
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003b40:	f7fd fa66 	bl	8001010 <HAL_GetTick>
 8003b44:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	019a      	lsls	r2, r3, #6
 8003b4a:	f53f ae70 	bmi.w	800382e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fa5f 	bl	8001010 <HAL_GetTick>
 8003b52:	1b40      	subs	r0, r0, r5
 8003b54:	2802      	cmp	r0, #2
 8003b56:	d9f6      	bls.n	8003b46 <HAL_RCC_OscConfig+0x44a>
 8003b58:	e671      	b.n	800383e <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd fa59 	bl	8001010 <HAL_GetTick>
 8003b5e:	1b80      	subs	r0, r0, r6
 8003b60:	2802      	cmp	r0, #2
 8003b62:	d9cc      	bls.n	8003afe <HAL_RCC_OscConfig+0x402>
 8003b64:	e66b      	b.n	800383e <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b6c:	bf02      	ittt	eq
 8003b6e:	68e3      	ldreq	r3, [r4, #12]
 8003b70:	f023 0303 	biceq.w	r3, r3, #3
 8003b74:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b80:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003b82:	f7fd fa45 	bl	8001010 <HAL_GetTick>
 8003b86:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	019b      	lsls	r3, r3, #6
 8003b8c:	f57f ae4f 	bpl.w	800382e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fa3e 	bl	8001010 <HAL_GetTick>
 8003b94:	1b40      	subs	r0, r0, r5
 8003b96:	2802      	cmp	r0, #2
 8003b98:	d9f6      	bls.n	8003b88 <HAL_RCC_OscConfig+0x48c>
 8003b9a:	e650      	b.n	800383e <HAL_RCC_OscConfig+0x142>
 8003b9c:	40007000 	.word	0x40007000

08003ba0 <HAL_RCC_ClockConfig>:
{
 8003ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ba4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	b910      	cbnz	r0, 8003bb0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003baa:	2001      	movs	r0, #1
 8003bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4a71      	ldr	r2, [pc, #452]	; (8003d78 <HAL_RCC_ClockConfig+0x1d8>)
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	428b      	cmp	r3, r1
 8003bba:	d334      	bcc.n	8003c26 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbc:	6829      	ldr	r1, [r5, #0]
 8003bbe:	f011 0701 	ands.w	r7, r1, #1
 8003bc2:	d13b      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	682a      	ldr	r2, [r5, #0]
 8003bc6:	0791      	lsls	r1, r2, #30
 8003bc8:	f140 80bb 	bpl.w	8003d42 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	496b      	ldr	r1, [pc, #428]	; (8003d7c <HAL_RCC_ClockConfig+0x1dc>)
 8003bce:	68a8      	ldr	r0, [r5, #8]
 8003bd0:	688b      	ldr	r3, [r1, #8]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd6:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bd8:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bda:	4967      	ldr	r1, [pc, #412]	; (8003d78 <HAL_RCC_ClockConfig+0x1d8>)
 8003bdc:	680b      	ldr	r3, [r1, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	429e      	cmp	r6, r3
 8003be4:	f0c0 80b5 	bcc.w	8003d52 <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	f012 0f04 	tst.w	r2, #4
 8003bec:	4c63      	ldr	r4, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1dc>)
 8003bee:	f040 80bc 	bne.w	8003d6a <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	0713      	lsls	r3, r2, #28
 8003bf4:	d506      	bpl.n	8003c04 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	692a      	ldr	r2, [r5, #16]
 8003bfa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003bfe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c02:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c04:	f7ff fd2c 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8003c08:	68a3      	ldr	r3, [r4, #8]
 8003c0a:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <HAL_RCC_ClockConfig+0x1e0>)
 8003c0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c10:	5cd3      	ldrb	r3, [r2, r3]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	40d8      	lsrs	r0, r3
 8003c18:	4b5a      	ldr	r3, [pc, #360]	; (8003d84 <HAL_RCC_ClockConfig+0x1e4>)
 8003c1a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c1c:	2000      	movs	r0, #0
}
 8003c1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c22:	f7fd b9c5 	b.w	8000fb0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	f023 030f 	bic.w	r3, r3, #15
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c30:	6813      	ldr	r3, [r2, #0]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	4299      	cmp	r1, r3
 8003c38:	d1b7      	bne.n	8003baa <HAL_RCC_ClockConfig+0xa>
 8003c3a:	e7bf      	b.n	8003bbc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3c:	686b      	ldr	r3, [r5, #4]
 8003c3e:	4c4f      	ldr	r4, [pc, #316]	; (8003d7c <HAL_RCC_ClockConfig+0x1dc>)
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d168      	bne.n	8003d16 <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	019b      	lsls	r3, r3, #6
 8003c48:	d5af      	bpl.n	8003baa <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d11e      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c54:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c56:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c58:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c5a:	bf55      	itete	pl
 8003c5c:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c60:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c62:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c66:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 8003c6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6e:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c70:	68e3      	ldr	r3, [r4, #12]
 8003c72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c76:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c78:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xf6>
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d008      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c84:	fbb2 f3f0 	udiv	r3, r2, r0
 8003c88:	68e7      	ldr	r7, [r4, #12]
 8003c8a:	f3c7 2706 	ubfx	r7, r7, #8, #7
 8003c8e:	437b      	muls	r3, r7
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 8003c92:	2200      	movs	r2, #0
 8003c94:	e7eb      	b.n	8003c6e <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c96:	68e2      	ldr	r2, [r4, #12]
 8003c98:	4b3c      	ldr	r3, [pc, #240]	; (8003d8c <HAL_RCC_ClockConfig+0x1ec>)
 8003c9a:	fbb3 f3f0 	udiv	r3, r3, r0
 8003c9e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003ca2:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca4:	68e2      	ldr	r2, [r4, #12]
 8003ca6:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8003caa:	3201      	adds	r2, #1
 8003cac:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8003cae:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d81c      	bhi.n	8003cf2 <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cb8:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cba:	68a3      	ldr	r3, [r4, #8]
 8003cbc:	686a      	ldr	r2, [r5, #4]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003cc6:	f7fd f9a3 	bl	8001010 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cca:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003cce:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd0:	68a3      	ldr	r3, [r4, #8]
 8003cd2:	686a      	ldr	r2, [r5, #4]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cdc:	f43f af72 	beq.w	8003bc4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce0:	f7fd f996 	bl	8001010 <HAL_GetTick>
 8003ce4:	eba0 0008 	sub.w	r0, r0, r8
 8003ce8:	4548      	cmp	r0, r9
 8003cea:	d9f1      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8003cec:	2003      	movs	r0, #3
}
 8003cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d06:	2780      	movs	r7, #128	; 0x80
 8003d08:	e7d7      	b.n	8003cba <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003d0a:	0788      	lsls	r0, r1, #30
 8003d0c:	d5d4      	bpl.n	8003cb8 <HAL_RCC_ClockConfig+0x118>
 8003d0e:	68ab      	ldr	r3, [r5, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1d1      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x118>
 8003d14:	e7f1      	b.n	8003cfa <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d10a      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d20:	f43f af43 	beq.w	8003baa <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d24:	f7ff fc9c 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2a:	4298      	cmp	r0, r3
 8003d2c:	d9c4      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x118>
 8003d2e:	e7e4      	b.n	8003cfa <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d30:	b91b      	cbnz	r3, 8003d3a <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f013 0f02 	tst.w	r3, #2
 8003d38:	e7f2      	b.n	8003d20 <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d40:	e7ee      	b.n	8003d20 <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 8003d42:	2f80      	cmp	r7, #128	; 0x80
 8003d44:	f47f af49 	bne.w	8003bda <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d48:	490c      	ldr	r1, [pc, #48]	; (8003d7c <HAL_RCC_ClockConfig+0x1dc>)
 8003d4a:	688b      	ldr	r3, [r1, #8]
 8003d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d50:	e742      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	680b      	ldr	r3, [r1, #0]
 8003d54:	f023 030f 	bic.w	r3, r3, #15
 8003d58:	4333      	orrs	r3, r6
 8003d5a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5c:	680b      	ldr	r3, [r1, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	429e      	cmp	r6, r3
 8003d64:	f47f af21 	bne.w	8003baa <HAL_RCC_ClockConfig+0xa>
 8003d68:	e73e      	b.n	8003be8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d6a:	68a3      	ldr	r3, [r4, #8]
 8003d6c:	68e9      	ldr	r1, [r5, #12]
 8003d6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d72:	430b      	orrs	r3, r1
 8003d74:	60a3      	str	r3, [r4, #8]
 8003d76:	e73c      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x52>
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	0802e740 	.word	0x0802e740
 8003d84:	20000a58 	.word	0x20000a58
 8003d88:	0802e758 	.word	0x0802e758
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	04c4b400 	.word	0x04c4b400

08003d94 <HAL_RCC_GetHCLKFreq>:
}
 8003d94:	4b01      	ldr	r3, [pc, #4]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000a58 	.word	0x20000a58

08003da0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003da2:	4a06      	ldr	r2, [pc, #24]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dae:	6810      	ldr	r0, [r2, #0]
 8003db0:	f003 031f 	and.w	r3, r3, #31
}
 8003db4:	40d8      	lsrs	r0, r3
 8003db6:	4770      	bx	lr
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	0802e750 	.word	0x0802e750
 8003dc0:	20000a58 	.word	0x20000a58

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x18>)
 8003dc6:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd2:	6810      	ldr	r0, [r2, #0]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
}
 8003dd8:	40d8      	lsrs	r0, r3
 8003dda:	4770      	bx	lr
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	0802e750 	.word	0x0802e750
 8003de4:	20000a58 	.word	0x20000a58

08003de8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x100>)
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	f012 0f03 	tst.w	r2, #3
{
 8003df2:	4605      	mov	r5, r0
 8003df4:	460e      	mov	r6, r1
 8003df6:	461c      	mov	r4, r3
 8003df8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfa:	d022      	beq.n	8003e42 <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	4283      	cmp	r3, r0
 8003e04:	d130      	bne.n	8003e68 <RCCEx_PLLSAI1_Config+0x80>
       ||
 8003e06:	b37b      	cbz	r3, 8003e68 <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e10:	f7fd f8fe 	bl	8001010 <HAL_GetTick>
 8003e14:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	011a      	lsls	r2, r3, #4
 8003e1a:	d42e      	bmi.n	8003e7a <RCCEx_PLLSAI1_Config+0x92>
 8003e1c:	68af      	ldr	r7, [r5, #8]
 8003e1e:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e20:	b396      	cbz	r6, 8003e88 <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e22:	2e01      	cmp	r6, #1
 8003e24:	d14c      	bne.n	8003ec0 <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e26:	6922      	ldr	r2, [r4, #16]
 8003e28:	4930      	ldr	r1, [pc, #192]	; (8003eec <RCCEx_PLLSAI1_Config+0x104>)
 8003e2a:	4011      	ands	r1, r2
 8003e2c:	692a      	ldr	r2, [r5, #16]
 8003e2e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003e32:	3b01      	subs	r3, #1
 8003e34:	0852      	lsrs	r2, r2, #1
 8003e36:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003e40:	e02d      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 8003e42:	2802      	cmp	r0, #2
 8003e44:	d00c      	beq.n	8003e60 <RCCEx_PLLSAI1_Config+0x78>
 8003e46:	2803      	cmp	r0, #3
 8003e48:	d010      	beq.n	8003e6c <RCCEx_PLLSAI1_Config+0x84>
 8003e4a:	2801      	cmp	r0, #1
 8003e4c:	d10c      	bne.n	8003e68 <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	079f      	lsls	r7, r3, #30
 8003e52:	d534      	bpl.n	8003ebe <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003e54:	68e3      	ldr	r3, [r4, #12]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	4318      	orrs	r0, r3
 8003e5c:	60e0      	str	r0, [r4, #12]
 8003e5e:	e7d3      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e66:	d1f5      	bne.n	8003e54 <RCCEx_PLLSAI1_Config+0x6c>
 8003e68:	2001      	movs	r0, #1
 8003e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	0391      	lsls	r1, r2, #14
 8003e70:	d4f0      	bmi.n	8003e54 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003e78:	e7f5      	b.n	8003e66 <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e7a:	f7fd f8c9 	bl	8001010 <HAL_GetTick>
 8003e7e:	1bc0      	subs	r0, r0, r7
 8003e80:	2802      	cmp	r0, #2
 8003e82:	d9c8      	bls.n	8003e16 <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 8003e84:	2003      	movs	r0, #3
 8003e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e88:	68e8      	ldr	r0, [r5, #12]
 8003e8a:	6926      	ldr	r6, [r4, #16]
 8003e8c:	4918      	ldr	r1, [pc, #96]	; (8003ef0 <RCCEx_PLLSAI1_Config+0x108>)
 8003e8e:	06c2      	lsls	r2, r0, #27
 8003e90:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003e94:	4031      	ands	r1, r6
 8003e96:	430a      	orrs	r2, r1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e9e:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ea6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd f8b2 	bl	8001010 <HAL_GetTick>
 8003eac:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	d513      	bpl.n	8003edc <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	69aa      	ldr	r2, [r5, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8003ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec0:	6921      	ldr	r1, [r4, #16]
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x10c>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8003ed0:	696a      	ldr	r2, [r5, #20]
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003eda:	e7e0      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003edc:	f7fd f898 	bl	8001010 <HAL_GetTick>
 8003ee0:	1b80      	subs	r0, r0, r6
 8003ee2:	2802      	cmp	r0, #2
 8003ee4:	d9e3      	bls.n	8003eae <RCCEx_PLLSAI1_Config+0xc6>
 8003ee6:	e7cd      	b.n	8003e84 <RCCEx_PLLSAI1_Config+0x9c>
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	ff9f800f 	.word	0xff9f800f
 8003ef0:	07ff800f 	.word	0x07ff800f
 8003ef4:	f9ff800f 	.word	0xf9ff800f

08003ef8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003efa:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <RCCEx_PLLSAI2_Config+0x100>)
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	f012 0f03 	tst.w	r2, #3
{
 8003f02:	4605      	mov	r5, r0
 8003f04:	460e      	mov	r6, r1
 8003f06:	461c      	mov	r4, r3
 8003f08:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f0a:	d022      	beq.n	8003f52 <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	4283      	cmp	r3, r0
 8003f14:	d130      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0x80>
       ||
 8003f16:	b37b      	cbz	r3, 8003f78 <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f20:	f7fd f876 	bl	8001010 <HAL_GetTick>
 8003f24:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	009a      	lsls	r2, r3, #2
 8003f2a:	d42e      	bmi.n	8003f8a <RCCEx_PLLSAI2_Config+0x92>
 8003f2c:	68af      	ldr	r7, [r5, #8]
 8003f2e:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f30:	b396      	cbz	r6, 8003f98 <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f32:	2e01      	cmp	r6, #1
 8003f34:	d14c      	bne.n	8003fd0 <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f36:	6962      	ldr	r2, [r4, #20]
 8003f38:	4930      	ldr	r1, [pc, #192]	; (8003ffc <RCCEx_PLLSAI2_Config+0x104>)
 8003f3a:	4011      	ands	r1, r2
 8003f3c:	692a      	ldr	r2, [r5, #16]
 8003f3e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003f42:	3b01      	subs	r3, #1
 8003f44:	0852      	lsrs	r2, r2, #1
 8003f46:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8003f4a:	3a01      	subs	r2, #1
 8003f4c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003f50:	e02d      	b.n	8003fae <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 8003f52:	2802      	cmp	r0, #2
 8003f54:	d00c      	beq.n	8003f70 <RCCEx_PLLSAI2_Config+0x78>
 8003f56:	2803      	cmp	r0, #3
 8003f58:	d010      	beq.n	8003f7c <RCCEx_PLLSAI2_Config+0x84>
 8003f5a:	2801      	cmp	r0, #1
 8003f5c:	d10c      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	079f      	lsls	r7, r3, #30
 8003f62:	d534      	bpl.n	8003fce <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003f64:	68e3      	ldr	r3, [r4, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	4318      	orrs	r0, r3
 8003f6c:	60e0      	str	r0, [r4, #12]
 8003f6e:	e7d3      	b.n	8003f18 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f76:	d1f5      	bne.n	8003f64 <RCCEx_PLLSAI2_Config+0x6c>
 8003f78:	2001      	movs	r0, #1
 8003f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	0391      	lsls	r1, r2, #14
 8003f80:	d4f0      	bmi.n	8003f64 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003f88:	e7f5      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f8a:	f7fd f841 	bl	8001010 <HAL_GetTick>
 8003f8e:	1bc0      	subs	r0, r0, r7
 8003f90:	2802      	cmp	r0, #2
 8003f92:	d9c8      	bls.n	8003f26 <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8003f94:	2003      	movs	r0, #3
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f98:	68e8      	ldr	r0, [r5, #12]
 8003f9a:	6966      	ldr	r6, [r4, #20]
 8003f9c:	4918      	ldr	r1, [pc, #96]	; (8004000 <RCCEx_PLLSAI2_Config+0x108>)
 8003f9e:	06c2      	lsls	r2, r0, #27
 8003fa0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003fa4:	4031      	ands	r1, r6
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fae:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd f82a 	bl	8001010 <HAL_GetTick>
 8003fbc:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	d513      	bpl.n	8003fec <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fc4:	6963      	ldr	r3, [r4, #20]
 8003fc6:	69aa      	ldr	r2, [r5, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	6163      	str	r3, [r4, #20]
 8003fcc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8003fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fd0:	6961      	ldr	r1, [r4, #20]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <RCCEx_PLLSAI2_Config+0x10c>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8003fe0:	696a      	ldr	r2, [r5, #20]
 8003fe2:	0852      	lsrs	r2, r2, #1
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003fea:	e7e0      	b.n	8003fae <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fec:	f7fd f810 	bl	8001010 <HAL_GetTick>
 8003ff0:	1b80      	subs	r0, r0, r6
 8003ff2:	2802      	cmp	r0, #2
 8003ff4:	d9e3      	bls.n	8003fbe <RCCEx_PLLSAI2_Config+0xc6>
 8003ff6:	e7cd      	b.n	8003f94 <RCCEx_PLLSAI2_Config+0x9c>
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	ff9f800f 	.word	0xff9f800f
 8004000:	07ff800f 	.word	0x07ff800f
 8004004:	f9ff800f 	.word	0xf9ff800f

08004008 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004008:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800400c:	6805      	ldr	r5, [r0, #0]
 800400e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8004012:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004014:	d023      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004016:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004018:	2940      	cmp	r1, #64	; 0x40
 800401a:	d014      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800401c:	d804      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800401e:	b1c1      	cbz	r1, 8004052 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004020:	2920      	cmp	r1, #32
 8004022:	d02b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 8004024:	2501      	movs	r5, #1
 8004026:	e01a      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004028:	2960      	cmp	r1, #96	; 0x60
 800402a:	d001      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800402c:	2980      	cmp	r1, #128	; 0x80
 800402e:	d1f9      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004030:	4a4e      	ldr	r2, [pc, #312]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004032:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004034:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004038:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800403c:	430b      	orrs	r3, r1
 800403e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004042:	2500      	movs	r5, #0
 8004044:	e00b      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004046:	4a49      	ldr	r2, [pc, #292]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004048:	68d3      	ldr	r3, [r2, #12]
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	60d3      	str	r3, [r2, #12]
      break;
 8004050:	e7ee      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004052:	3004      	adds	r0, #4
 8004054:	f7ff fec8 	bl	8003de8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004058:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800405a:	2800      	cmp	r0, #0
 800405c:	d0e8      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	04db      	lsls	r3, r3, #19
 8004062:	d509      	bpl.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004064:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004066:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800406a:	d014      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800406c:	d80b      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800406e:	b1c1      	cbz	r1, 80040a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004070:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004074:	d071      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 8004076:	2501      	movs	r5, #1
 8004078:	462e      	mov	r6, r5
 800407a:	e021      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800407c:	2100      	movs	r1, #0
 800407e:	3020      	adds	r0, #32
 8004080:	f7ff ff3a 	bl	8003ef8 <RCCEx_PLLSAI2_Config>
 8004084:	e7e8      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004086:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800408a:	d002      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800408c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004090:	d1f1      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004092:	462e      	mov	r6, r5
 8004094:	e009      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004096:	4a35      	ldr	r2, [pc, #212]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004098:	68d3      	ldr	r3, [r2, #12]
 800409a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409e:	60d3      	str	r3, [r2, #12]
 80040a0:	e7f7      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040a2:	1d20      	adds	r0, r4, #4
 80040a4:	f7ff fea0 	bl	8003de8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040a8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80040aa:	2e00      	cmp	r6, #0
 80040ac:	d15b      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040ae:	4a2f      	ldr	r2, [pc, #188]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80040b2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80040b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040ba:	430b      	orrs	r3, r1
 80040bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	039f      	lsls	r7, r3, #14
 80040c4:	d565      	bpl.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040c6:	4f29      	ldr	r7, [pc, #164]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ca:	00d8      	lsls	r0, r3, #3
 80040cc:	f140 81f3 	bpl.w	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 80040d0:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004170 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80040d8:	f8d9 3000 	ldr.w	r3, [r9]
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80040e4:	f7fc ff94 	bl	8001010 <HAL_GetTick>
 80040e8:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ea:	f8d9 3000 	ldr.w	r3, [r9]
 80040ee:	05d9      	lsls	r1, r3, #23
 80040f0:	d540      	bpl.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 80040f2:	2e00      	cmp	r6, #0
 80040f4:	f040 8197 	bne.w	8004426 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040fc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004100:	d015      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004102:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004106:	4293      	cmp	r3, r2
 8004108:	d011      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800410a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800410e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004112:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004116:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800411a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004122:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004126:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800412a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800412e:	07da      	lsls	r2, r3, #31
 8004130:	d509      	bpl.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 8004132:	f7fc ff6d 	bl	8001010 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800413a:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004140:	079b      	lsls	r3, r3, #30
 8004142:	f140 8168 	bpl.w	8004416 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004146:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800414a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004158:	e014      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800415a:	2100      	movs	r1, #0
 800415c:	f104 0020 	add.w	r0, r4, #32
 8004160:	f7ff feca 	bl	8003ef8 <RCCEx_PLLSAI2_Config>
 8004164:	e7a0      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004166:	4635      	mov	r5, r6
 8004168:	e7aa      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
 8004170:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7fc ff4c 	bl	8001010 <HAL_GetTick>
 8004178:	eba0 000a 	sub.w	r0, r0, sl
 800417c:	2802      	cmp	r0, #2
 800417e:	d9b4      	bls.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004180:	2503      	movs	r5, #3
 8004182:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004184:	f1b8 0f00 	cmp.w	r8, #0
 8004188:	d003      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004190:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	07df      	lsls	r7, r3, #31
 8004196:	d508      	bpl.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004198:	49c0      	ldr	r1, [pc, #768]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800419a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800419c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041a0:	f022 0203 	bic.w	r2, r2, #3
 80041a4:	4302      	orrs	r2, r0
 80041a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041aa:	0798      	lsls	r0, r3, #30
 80041ac:	d508      	bpl.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ae:	49bb      	ldr	r1, [pc, #748]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80041b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041b6:	f022 020c 	bic.w	r2, r2, #12
 80041ba:	4302      	orrs	r2, r0
 80041bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041c0:	0759      	lsls	r1, r3, #29
 80041c2:	d508      	bpl.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c4:	49b5      	ldr	r1, [pc, #724]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80041c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041cc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80041d0:	4302      	orrs	r2, r0
 80041d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d6:	071a      	lsls	r2, r3, #28
 80041d8:	d508      	bpl.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041da:	49b0      	ldr	r1, [pc, #704]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80041de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80041e6:	4302      	orrs	r2, r0
 80041e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ec:	06df      	lsls	r7, r3, #27
 80041ee:	d508      	bpl.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041f0:	49aa      	ldr	r1, [pc, #680]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80041f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041fc:	4302      	orrs	r2, r0
 80041fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004202:	0698      	lsls	r0, r3, #26
 8004204:	d508      	bpl.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004206:	49a5      	ldr	r1, [pc, #660]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004208:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800420a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800420e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004212:	4302      	orrs	r2, r0
 8004214:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004218:	0599      	lsls	r1, r3, #22
 800421a:	d508      	bpl.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800421c:	499f      	ldr	r1, [pc, #636]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800421e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004220:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004224:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004228:	4302      	orrs	r2, r0
 800422a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800422e:	055a      	lsls	r2, r3, #21
 8004230:	d508      	bpl.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004232:	499a      	ldr	r1, [pc, #616]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004234:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004236:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800423a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800423e:	4302      	orrs	r2, r0
 8004240:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004244:	065f      	lsls	r7, r3, #25
 8004246:	d508      	bpl.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004248:	4994      	ldr	r1, [pc, #592]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800424a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800424c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004250:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004254:	4302      	orrs	r2, r0
 8004256:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800425a:	0618      	lsls	r0, r3, #24
 800425c:	d508      	bpl.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800425e:	498f      	ldr	r1, [pc, #572]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004262:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004266:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800426a:	4302      	orrs	r2, r0
 800426c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004270:	05d9      	lsls	r1, r3, #23
 8004272:	d508      	bpl.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004274:	4989      	ldr	r1, [pc, #548]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004276:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004278:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800427c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004280:	4302      	orrs	r2, r0
 8004282:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004286:	02da      	lsls	r2, r3, #11
 8004288:	d508      	bpl.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800428a:	4984      	ldr	r1, [pc, #528]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800428c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800428e:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004292:	f022 0203 	bic.w	r2, r2, #3
 8004296:	4302      	orrs	r2, r0
 8004298:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800429c:	049f      	lsls	r7, r3, #18
 800429e:	d510      	bpl.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a0:	4a7e      	ldr	r2, [pc, #504]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80042a2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80042a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042a8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80042ac:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042b6:	f040 80b8 	bne.w	800442a <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ba:	68d3      	ldr	r3, [r2, #12]
 80042bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	0318      	lsls	r0, r3, #12
 80042c6:	d50f      	bpl.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80042ca:	4b74      	ldr	r3, [pc, #464]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80042cc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80042d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80042d4:	f040 80b6 	bne.w	8004444 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80042d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e6:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	0359      	lsls	r1, r3, #13
 80042ec:	d510      	bpl.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ee:	4a6b      	ldr	r2, [pc, #428]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80042f0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80042f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80042fa:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004304:	f040 80bd 	bne.w	8004482 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004308:	68d3      	ldr	r3, [r2, #12]
 800430a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	045a      	lsls	r2, r3, #17
 8004314:	d514      	bpl.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004316:	4961      	ldr	r1, [pc, #388]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004318:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800431c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004320:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004324:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004326:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800432e:	d107      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004330:	2102      	movs	r1, #2
 8004332:	1d20      	adds	r0, r4, #4
 8004334:	f7ff fd58 	bl	8003de8 <RCCEx_PLLSAI1_Config>
 8004338:	4606      	mov	r6, r0
 800433a:	2800      	cmp	r0, #0
 800433c:	bf18      	it	ne
 800433e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	03d3      	lsls	r3, r2, #15
 8004344:	d509      	bpl.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004346:	4955      	ldr	r1, [pc, #340]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004348:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800434c:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	4303      	orrs	r3, r0
 8004356:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800435a:	0297      	lsls	r7, r2, #10
 800435c:	d509      	bpl.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800435e:	494f      	ldr	r1, [pc, #316]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004360:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004364:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004368:	f023 0318 	bic.w	r3, r3, #24
 800436c:	4303      	orrs	r3, r0
 800436e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004372:	0250      	lsls	r0, r2, #9
 8004374:	d51f      	bpl.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004376:	4f49      	ldr	r7, [pc, #292]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004380:	f7fc fe46 	bl	8001010 <HAL_GetTick>
 8004384:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	0099      	lsls	r1, r3, #2
 800438a:	f100 8089 	bmi.w	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 800438e:	2e00      	cmp	r6, #0
 8004390:	f040 808f 	bne.w	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004398:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800439c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043a6:	2102      	movs	r1, #2
 80043a8:	f104 0020 	add.w	r0, r4, #32
 80043ac:	f7ff fda4 	bl	8003ef8 <RCCEx_PLLSAI2_Config>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	bf18      	it	ne
 80043b4:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	021a      	lsls	r2, r3, #8
 80043ba:	d514      	bpl.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80043bc:	4937      	ldr	r1, [pc, #220]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80043be:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80043c2:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 80043c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ca:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80043cc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80043d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80043d4:	d107      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80043d6:	2101      	movs	r1, #1
 80043d8:	f104 0020 	add.w	r0, r4, #32
 80043dc:	f7ff fd8c 	bl	8003ef8 <RCCEx_PLLSAI2_Config>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	bf18      	it	ne
 80043e4:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	01db      	lsls	r3, r3, #7
 80043ea:	d510      	bpl.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043ec:	4a2b      	ldr	r2, [pc, #172]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80043ee:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80043f2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80043f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043fa:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004400:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004404:	d103      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004406:	68d3      	ldr	r3, [r2, #12]
 8004408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440c:	60d3      	str	r3, [r2, #12]
}
 800440e:	4628      	mov	r0, r5
 8004410:	b002      	add	sp, #8
 8004412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fc fdfb 	bl	8001010 <HAL_GetTick>
 800441a:	eba0 0009 	sub.w	r0, r0, r9
 800441e:	4550      	cmp	r0, sl
 8004420:	f67f ae8c 	bls.w	800413c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004424:	e6ac      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004426:	4635      	mov	r5, r6
 8004428:	e6ac      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800442a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800442e:	f47f af48 	bne.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004432:	2101      	movs	r1, #1
 8004434:	1d20      	adds	r0, r4, #4
 8004436:	f7ff fcd7 	bl	8003de8 <RCCEx_PLLSAI1_Config>
 800443a:	4606      	mov	r6, r0
 800443c:	2800      	cmp	r0, #0
 800443e:	bf18      	it	ne
 8004440:	4605      	movne	r5, r0
 8004442:	e73e      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004444:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004448:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800444c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004450:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004454:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004456:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800445a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800445e:	d103      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004466:	e73e      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004468:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800446c:	f47f af3c 	bne.w	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004470:	2101      	movs	r1, #1
 8004472:	1d20      	adds	r0, r4, #4
 8004474:	f7ff fcb8 	bl	8003de8 <RCCEx_PLLSAI1_Config>
 8004478:	4606      	mov	r6, r0
 800447a:	2800      	cmp	r0, #0
 800447c:	bf18      	it	ne
 800447e:	4605      	movne	r5, r0
 8004480:	e732      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004482:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004486:	f47f af43 	bne.w	8004310 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448a:	2101      	movs	r1, #1
 800448c:	1d20      	adds	r0, r4, #4
 800448e:	f7ff fcab 	bl	8003de8 <RCCEx_PLLSAI1_Config>
 8004492:	4606      	mov	r6, r0
 8004494:	2800      	cmp	r0, #0
 8004496:	bf18      	it	ne
 8004498:	4605      	movne	r5, r0
 800449a:	e739      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800449c:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044a0:	f7fc fdb6 	bl	8001010 <HAL_GetTick>
 80044a4:	eba0 0008 	sub.w	r0, r0, r8
 80044a8:	2802      	cmp	r0, #2
 80044aa:	f67f af6c 	bls.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 80044ae:	2503      	movs	r5, #3
 80044b0:	e781      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80044b2:	4635      	mov	r5, r6
 80044b4:	e77f      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80044c8:	f04f 0801 	mov.w	r8, #1
 80044cc:	e602      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80044ce:	bf00      	nop

080044d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	b087      	sub	sp, #28
 80044d6:	4606      	mov	r6, r0
 80044d8:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 80044da:	f7fc fd99 	bl	8001010 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80044de:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80044e0:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80044e2:	6830      	ldr	r0, [r6, #0]
 80044e4:	f001 fed8 	bl	8006298 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 80044e8:	4604      	mov	r4, r0
 80044ea:	bb40      	cbnz	r0, 800453e <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80044ec:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80044ee:	6830      	ldr	r0, [r6, #0]
 80044f0:	0409      	lsls	r1, r1, #16
 80044f2:	f001 ffcf 	bl	8006494 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 80044f6:	4604      	mov	r4, r0
 80044f8:	bb08      	cbnz	r0, 800453e <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80044fa:	2230      	movs	r2, #48	; 0x30
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	2108      	movs	r1, #8
 8004502:	2302      	movs	r3, #2
 8004504:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004508:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 800450a:	4669      	mov	r1, sp
 800450c:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800450e:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004510:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004512:	f001 feaf 	bl	8006274 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004516:	6830      	ldr	r0, [r6, #0]
 8004518:	f001 ffeb 	bl	80064f2 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 800451c:	4604      	mov	r4, r0
 800451e:	b970      	cbnz	r0, 800453e <SD_FindSCR+0x6e>
 8004520:	4605      	mov	r5, r0
 8004522:	4607      	mov	r7, r0
 8004524:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004526:	f240 592a 	movw	r9, #1322	; 0x52a
 800452a:	6830      	ldr	r0, [r6, #0]
 800452c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800452e:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004532:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004534:	d007      	beq.n	8004546 <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004536:	0719      	lsls	r1, r3, #28
 8004538:	d51c      	bpl.n	8004574 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800453a:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800453c:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 800453e:	4620      	mov	r0, r4
 8004540:	b007      	add	sp, #28
 8004542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004546:	031b      	lsls	r3, r3, #12
 8004548:	d40b      	bmi.n	8004562 <SD_FindSCR+0x92>
 800454a:	f1bb 0f00 	cmp.w	fp, #0
 800454e:	d108      	bne.n	8004562 <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004550:	f001 fdd0 	bl	80060f4 <SDMMC_ReadFIFO>
 8004554:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004556:	6830      	ldr	r0, [r6, #0]
 8004558:	f001 fdcc 	bl	80060f4 <SDMMC_ReadFIFO>
      index++;
 800455c:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004560:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004562:	f7fc fd55 	bl	8001010 <HAL_GetTick>
 8004566:	eba0 000a 	sub.w	r0, r0, sl
 800456a:	3001      	adds	r0, #1
 800456c:	d1dd      	bne.n	800452a <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 800456e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004572:	e7e4      	b.n	800453e <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004574:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004576:	079a      	lsls	r2, r3, #30
 8004578:	d501      	bpl.n	800457e <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800457a:	2402      	movs	r4, #2
 800457c:	e7de      	b.n	800453c <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800457e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004580:	069b      	lsls	r3, r3, #26
 8004582:	d501      	bpl.n	8004588 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004584:	2420      	movs	r4, #32
 8004586:	e7d9      	b.n	800453c <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <SD_FindSCR+0xcc>)
 800458a:	6383      	str	r3, [r0, #56]	; 0x38
 800458c:	ba3f      	rev	r7, r7
 800458e:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004590:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004594:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004598:	e7d1      	b.n	800453e <SD_FindSCR+0x6e>
 800459a:	bf00      	nop
 800459c:	18000f3a 	.word	0x18000f3a

080045a0 <HAL_SD_MspInit>:
 80045a0:	4770      	bx	lr

080045a2 <HAL_SD_MspDeInit>:
 80045a2:	4770      	bx	lr

080045a4 <HAL_SD_DeInit>:
{
 80045a4:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80045a6:	4604      	mov	r4, r0
 80045a8:	b168      	cbz	r0, 80045c6 <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 80045aa:	2303      	movs	r3, #3
 80045ac:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	f001 fda8 	bl	8006106 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff fff3 	bl	80045a2 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045bc:	2000      	movs	r0, #0
 80045be:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 80045c0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 80045c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80045c6:	2001      	movs	r0, #1
}
 80045c8:	bd10      	pop	{r4, pc}
	...

080045cc <HAL_SD_ReadBlocks_DMA>:
{
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	4604      	mov	r4, r0
 80045d2:	b086      	sub	sp, #24
 80045d4:	4615      	mov	r5, r2
 80045d6:	461e      	mov	r6, r3
  if(NULL == pData)
 80045d8:	460f      	mov	r7, r1
 80045da:	b939      	cbnz	r1, 80045ec <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80045de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045e2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80045e4:	2001      	movs	r0, #1
}
 80045e6:	b006      	add	sp, #24
 80045e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80045ec:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80045f0:	b2c0      	uxtb	r0, r0
 80045f2:	2801      	cmp	r0, #1
 80045f4:	d158      	bne.n	80046a8 <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045f6:	18d3      	adds	r3, r2, r3
 80045f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045fa:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045fc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045fe:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004600:	d904      	bls.n	800460c <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004608:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800460a:	e7ec      	b.n	80045e6 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 800460c:	2303      	movs	r3, #3
 800460e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004612:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004616:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004618:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800461c:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 800461e:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004620:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004624:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004628:	bf18      	it	ne
 800462a:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800462c:	f001 fe34 	bl	8006298 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004630:	b148      	cbz	r0, 8004646 <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800463a:	4318      	orrs	r0, r3
 800463c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800463e:	2001      	movs	r0, #1
 8004640:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004644:	e7cf      	b.n	80045e6 <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800464a:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800464e:	2390      	movs	r3, #144	; 0x90
 8004650:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004652:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004654:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004656:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004658:	4669      	mov	r1, sp
 800465a:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800465c:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 800465e:	f001 fe09 	bl	8006274 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004666:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 800466a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800466c:	68c3      	ldr	r3, [r0, #12]
 800466e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004672:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004674:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004676:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004678:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800467a:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800467c:	d90e      	bls.n	800469c <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800467e:	2382      	movs	r3, #130	; 0x82
 8004680:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004682:	4629      	mov	r1, r5
 8004684:	f001 fe3a 	bl	80062fc <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004688:	2800      	cmp	r0, #0
 800468a:	d0ac      	beq.n	80045e6 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	4a07      	ldr	r2, [pc, #28]	; (80046ac <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004694:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c
 800469a:	e7cd      	b.n	8004638 <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800469c:	2381      	movs	r3, #129	; 0x81
 800469e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80046a0:	4629      	mov	r1, r5
 80046a2:	f001 fe12 	bl	80062ca <SDMMC_CmdReadSingleBlock>
 80046a6:	e7ef      	b.n	8004688 <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 80046a8:	2002      	movs	r0, #2
 80046aa:	e79c      	b.n	80045e6 <HAL_SD_ReadBlocks_DMA+0x1a>
 80046ac:	1fe00fff 	.word	0x1fe00fff

080046b0 <HAL_SD_WriteBlocks_DMA>:
{
 80046b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b4:	4604      	mov	r4, r0
 80046b6:	b086      	sub	sp, #24
 80046b8:	4615      	mov	r5, r2
 80046ba:	461e      	mov	r6, r3
  if(NULL == pData)
 80046bc:	460f      	mov	r7, r1
 80046be:	b939      	cbnz	r1, 80046d0 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80046c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80046c8:	2001      	movs	r0, #1
}
 80046ca:	b006      	add	sp, #24
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80046d0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80046d4:	b2c0      	uxtb	r0, r0
 80046d6:	2801      	cmp	r0, #1
 80046d8:	d159      	bne.n	800478e <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046de:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046e0:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046e2:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046e4:	d904      	bls.n	80046f0 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80046e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ec:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80046ee:	e7ec      	b.n	80046ca <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 80046f0:	2303      	movs	r3, #3
 80046f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80046f6:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 80046fa:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80046fc:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004700:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004702:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004704:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004708:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 800470c:	bf18      	it	ne
 800470e:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004710:	f001 fdc2 	bl	8006298 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004714:	b148      	cbz	r0, 800472a <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <HAL_SD_WriteBlocks_DMA+0xe4>)
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800471c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800471e:	4318      	orrs	r0, r3
 8004720:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004722:	2001      	movs	r0, #1
 8004724:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004728:	e7cf      	b.n	80046ca <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800472e:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004732:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004734:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004736:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004738:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 800473c:	4669      	mov	r1, sp
 800473e:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004740:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004744:	f001 fd96 	bl	8006274 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800474c:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8004750:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004752:	68c3      	ldr	r3, [r0, #12]
 8004754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004758:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 800475a:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 800475c:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 800475e:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004760:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004762:	d90e      	bls.n	8004782 <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004764:	23a0      	movs	r3, #160	; 0xa0
 8004766:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004768:	4629      	mov	r1, r5
 800476a:	f001 fdf9 	bl	8006360 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800476e:	2800      	cmp	r0, #0
 8004770:	d0ab      	beq.n	80046ca <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	4a07      	ldr	r2, [pc, #28]	; (8004794 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800477a:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 800477e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004780:	e7cc      	b.n	800471c <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004782:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004786:	4629      	mov	r1, r5
 8004788:	f001 fdd1 	bl	800632e <SDMMC_CmdWriteSingleBlock>
 800478c:	e7ef      	b.n	800476e <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 800478e:	2002      	movs	r0, #2
 8004790:	e79b      	b.n	80046ca <HAL_SD_WriteBlocks_DMA+0x1a>
 8004792:	bf00      	nop
 8004794:	1fe00fff 	.word	0x1fe00fff

08004798 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004798:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800479a:	0f9a      	lsrs	r2, r3, #30
 800479c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800479e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80047a2:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80047a4:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80047a8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80047aa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80047ae:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80047b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80047b4:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 80047b6:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80047b8:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80047ba:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80047bc:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80047c2:	88ca      	ldrh	r2, [r1, #6]
{
 80047c4:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80047c6:	b292      	uxth	r2, r2
 80047c8:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80047cc:	4322      	orrs	r2, r4
 80047ce:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80047d0:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80047d4:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80047d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80047da:	09d4      	lsrs	r4, r2, #7
 80047dc:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80047de:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80047e2:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80047e4:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80047e8:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80047ea:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80047ee:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80047f0:	2400      	movs	r4, #0
 80047f2:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80047f4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80047f6:	2c00      	cmp	r4, #0
 80047f8:	f040 8083 	bne.w	8004902 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80047fc:	0292      	lsls	r2, r2, #10
 80047fe:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004802:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8004804:	690a      	ldr	r2, [r1, #16]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004810:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8004818:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800481a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800481e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004820:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8004824:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004826:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800482a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800482c:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8004830:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004832:	0bd3      	lsrs	r3, r2, #15
 8004834:	f003 0306 	and.w	r3, r3, #6
 8004838:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800483a:	7e0c      	ldrb	r4, [r1, #24]
 800483c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004840:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8004844:	4322      	orrs	r2, r4
 8004846:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004848:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800484a:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800484c:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800484e:	3402      	adds	r4, #2
 8004850:	40a2      	lsls	r2, r4
 8004852:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004854:	7a0d      	ldrb	r5, [r1, #8]
 8004856:	2401      	movs	r4, #1
 8004858:	40ac      	lsls	r4, r5
 800485a:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800485c:	0a64      	lsrs	r4, r4, #9
 800485e:	4362      	muls	r2, r4
 8004860:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 8004862:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004866:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004868:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004872:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004874:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8004876:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004878:	7e8a      	ldrb	r2, [r1, #26]
 800487a:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 800487e:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004884:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004886:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004888:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800488a:	0fda      	lsrs	r2, r3, #31
 800488c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800488e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8004892:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004894:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8004898:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800489a:	0d9a      	lsrs	r2, r3, #22
 800489c:	f002 020c 	and.w	r2, r2, #12
 80048a0:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80048a2:	7fca      	ldrb	r2, [r1, #31]
 80048a4:	f3c3 5081 	ubfx	r0, r3, #22, #2
 80048a8:	4302      	orrs	r2, r0
 80048aa:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80048ac:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80048b0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 80048b4:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80048b6:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 80048ba:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80048be:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80048c2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80048c6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80048ca:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80048ce:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80048d2:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80048d6:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80048da:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80048de:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80048e2:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80048e6:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80048ea:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80048ee:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 80048f2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80048f6:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8004900:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004902:	2c01      	cmp	r4, #1
 8004904:	d11a      	bne.n	800493c <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004906:	041b      	lsls	r3, r3, #16
 8004908:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800490c:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800490e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 8004910:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004912:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8004914:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8004918:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800491a:	690c      	ldr	r4, [r1, #16]
 800491c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004920:	4322      	orrs	r2, r4
 8004922:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004924:	690a      	ldr	r2, [r1, #16]
 8004926:	0292      	lsls	r2, r2, #10
 8004928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492c:	64c2      	str	r2, [r0, #76]	; 0x4c
 800492e:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004934:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004938:	6502      	str	r2, [r0, #80]	; 0x50
 800493a:	e794      	b.n	8004866 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800493c:	6803      	ldr	r3, [r0, #0]
 800493e:	4a05      	ldr	r2, [pc, #20]	; (8004954 <HAL_SD_GetCardCSD+0x1bc>)
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004942:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800494a:	2301      	movs	r3, #1
 800494c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8004950:	4618      	mov	r0, r3
 8004952:	bd30      	pop	{r4, r5, pc}
 8004954:	1fe00fff 	.word	0x1fe00fff

08004958 <HAL_SD_InitCard>:
{
 8004958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495a:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800495c:	2300      	movs	r3, #0
 800495e:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004960:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004962:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004964:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004966:	233c      	movs	r3, #60	; 0x3c
 8004968:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800496a:	6983      	ldr	r3, [r0, #24]
 800496c:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800496e:	bf01      	itttt	eq
 8004970:	6802      	ldreq	r2, [r0, #0]
 8004972:	6813      	ldreq	r3, [r2, #0]
 8004974:	f043 0304 	orreq.w	r3, r3, #4
 8004978:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 800497a:	ab0a      	add	r3, sp, #40	; 0x28
{
 800497c:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 800497e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004982:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004986:	ab07      	add	r3, sp, #28
 8004988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800498a:	6820      	ldr	r0, [r4, #0]
 800498c:	f001 fb98 	bl	80060c0 <SDMMC_Init>
  if(status != HAL_OK)
 8004990:	2800      	cmp	r0, #0
 8004992:	f040 80e9 	bne.w	8004b68 <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	f001 fbaf 	bl	80060fa <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800499c:	4605      	mov	r5, r0
 800499e:	2800      	cmp	r0, #0
 80049a0:	f040 80e2 	bne.w	8004b68 <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 80049a4:	2002      	movs	r0, #2
 80049a6:	f7fc fb39 	bl	800101c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049aa:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 80049ac:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049ae:	f001 fd09 	bl	80063c4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b2:	b958      	cbnz	r0, 80049cc <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	f001 fd2f 	bl	8006418 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ba:	b170      	cbz	r0, 80049da <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80049bc:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049be:	2100      	movs	r1, #0
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	f001 fd67 	bl	8006494 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049c6:	b158      	cbz	r0, 80049e0 <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 80049cc:	2501      	movs	r5, #1
 80049ce:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80049d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049d4:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 80049d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80049d8:	e098      	b.n	8004b0c <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049da:	2301      	movs	r3, #1
 80049dc:	6423      	str	r3, [r4, #64]	; 0x40
 80049de:	e7ee      	b.n	80049be <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049e0:	4f62      	ldr	r7, [pc, #392]	; (8004b6c <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80049e2:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 80049e6:	9b06      	ldr	r3, [sp, #24]
 80049e8:	42b3      	cmp	r3, r6
 80049ea:	d815      	bhi.n	8004a18 <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049ec:	2100      	movs	r1, #0
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	f001 fd50 	bl	8006494 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d1e9      	bne.n	80049cc <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049f8:	4639      	mov	r1, r7
 80049fa:	6820      	ldr	r0, [r4, #0]
 80049fc:	f001 fd63 	bl	80064c6 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004a00:	4601      	mov	r1, r0
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d1e0      	bne.n	80049c8 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	f001 fb9a 	bl	8006140 <SDMMC_GetResponse>
      count++;
 8004a0c:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8004a0e:	2800      	cmp	r0, #0
      count++;
 8004a10:	f103 0301 	add.w	r3, r3, #1
 8004a14:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8004a16:	dae6      	bge.n	80049e6 <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a18:	9a06      	ldr	r2, [sp, #24]
 8004a1a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d902      	bls.n	8004a28 <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a22:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004a26:	e7d1      	b.n	80049cc <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a28:	0043      	lsls	r3, r0, #1
 8004a2a:	d532      	bpl.n	8004a92 <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8004a30:	69a3      	ldr	r3, [r4, #24]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d12d      	bne.n	8004a92 <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8004a36:	01c7      	lsls	r7, r0, #7
 8004a38:	d52b      	bpl.n	8004a92 <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8004a3a:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a40:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8004a42:	6803      	ldr	r3, [r0, #0]
 8004a44:	f043 0303 	orr.w	r3, r3, #3
 8004a48:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8004a4a:	f001 fe21 	bl	8006690 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d1bc      	bne.n	80049cc <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a56:	0156      	lsls	r6, r2, #5
 8004a58:	d5fc      	bpl.n	8004a54 <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8004a5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	02d8      	lsls	r0, r3, #11
 8004a64:	d5b0      	bpl.n	80049c8 <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8004a66:	2001      	movs	r0, #1
 8004a68:	f000 f965 	bl	8004d36 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f042 0202 	orr.w	r2, r2, #2
 8004a74:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 8004a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a78:	0191      	lsls	r1, r2, #6
 8004a7a:	d5fc      	bpl.n	8004a76 <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8004a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8004a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a84:	02d2      	lsls	r2, r2, #11
 8004a86:	d4cc      	bmi.n	8004a22 <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 8004a88:	2213      	movs	r2, #19
 8004a8a:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 8004a92:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004a94:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8004a96:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004a9a:	f001 fb3a 	bl	8006112 <SDMMC_GetPowerState>
 8004a9e:	b910      	cbnz	r0, 8004aa6 <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004aa0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004aa4:	e03c      	b.n	8004b20 <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d018      	beq.n	8004ade <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	f001 fd39 	bl	8006524 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d134      	bne.n	8004b20 <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	f001 fb41 	bl	8006140 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004abe:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ac0:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	f001 fb3c 	bl	8006140 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ac8:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004aca:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004acc:	6820      	ldr	r0, [r4, #0]
 8004ace:	f001 fb37 	bl	8006140 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004ad2:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ad4:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	f001 fb32 	bl	8006140 <SDMMC_GetResponse>
 8004adc:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004ade:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d116      	bne.n	8004b12 <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d120      	bne.n	8004b2c <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004aea:	2104      	movs	r1, #4
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	f001 fb27 	bl	8006140 <SDMMC_GetResponse>
 8004af2:	0d00      	lsrs	r0, r0, #20
 8004af4:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004af6:	a90d      	add	r1, sp, #52	; 0x34
 8004af8:	4620      	mov	r0, r4
 8004afa:	f7ff fe4d 	bl	8004798 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004afe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	0412      	lsls	r2, r2, #16
 8004b04:	2300      	movs	r3, #0
 8004b06:	f001 fc44 	bl	8006392 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b0a:	b948      	cbnz	r0, 8004b20 <HAL_SD_InitCard+0x1c8>
}
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	b019      	add	sp, #100	; 0x64
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004b12:	f10d 0116 	add.w	r1, sp, #22
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	f001 fd30 	bl	800657c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d0e1      	beq.n	8004ae4 <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 8004b20:	2501      	movs	r5, #1
 8004b22:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004b26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b28:	4308      	orrs	r0, r1
 8004b2a:	e754      	b.n	80049d6 <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004b2c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8004b30:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	0409      	lsls	r1, r1, #16
 8004b36:	f001 fd0b 	bl	8006550 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b3e:	4601      	mov	r1, r0
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	f001 fafd 	bl	8006140 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004b46:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b48:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004b4a:	6820      	ldr	r0, [r4, #0]
 8004b4c:	f001 faf8 	bl	8006140 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004b50:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004b52:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	f001 faf3 	bl	8006140 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004b5a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004b5c:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	f001 faee 	bl	8006140 <SDMMC_GetResponse>
 8004b64:	66e0      	str	r0, [r4, #108]	; 0x6c
 8004b66:	e7c0      	b.n	8004aea <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 8004b68:	2501      	movs	r5, #1
 8004b6a:	e7cf      	b.n	8004b0c <HAL_SD_InitCard+0x1b4>
 8004b6c:	c1100000 	.word	0xc1100000

08004b70 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004b70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004b72:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004b74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b76:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004b78:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b7a:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004b7c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004b7e:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004b80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004b82:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004b84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b86:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004b88:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004b8a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004b8c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004b8e:	61cb      	str	r3, [r1, #28]
}
 8004b90:	2000      	movs	r0, #0
 8004b92:	4770      	bx	lr

08004b94 <HAL_SD_ConfigWideBusOperation>:
{
 8004b94:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8004b96:	2303      	movs	r3, #3
 8004b98:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004b9c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004b9e:	2b03      	cmp	r3, #3
{
 8004ba0:	b08a      	sub	sp, #40	; 0x28
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004ba6:	d002      	beq.n	8004bae <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004ba8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004bac:	d103      	bne.n	8004bb6 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	e056      	b.n	8004c64 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004bb6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004bba:	d12d      	bne.n	8004c18 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8004bbc:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bbe:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8004bc0:	9104      	str	r1, [sp, #16]
 8004bc2:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bc4:	f001 fabc 	bl	8006140 <SDMMC_GetResponse>
 8004bc8:	0180      	lsls	r0, r0, #6
 8004bca:	d41f      	bmi.n	8004c0c <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 8004bcc:	a904      	add	r1, sp, #16
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff fc7e 	bl	80044d0 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8004bd4:	b960      	cbnz	r0, 8004bf0 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004bd6:	9b05      	ldr	r3, [sp, #20]
 8004bd8:	0359      	lsls	r1, r3, #13
 8004bda:	d51a      	bpl.n	8004c12 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004bdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004bde:	6820      	ldr	r0, [r4, #0]
 8004be0:	0409      	lsls	r1, r1, #16
 8004be2:	f001 fc57 	bl	8006494 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8004be6:	b918      	cbnz	r0, 8004bf0 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8004be8:	2102      	movs	r1, #2
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	f001 fd4e 	bl	800668c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8004bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bf2:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8004bf4:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004bf6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	d035      	beq.n	8004c68 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <HAL_SD_ConfigWideBusOperation+0x104>)
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c02:	2001      	movs	r0, #1
 8004c04:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8004c08:	b00a      	add	sp, #40	; 0x28
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c10:	e7ee      	b.n	8004bf0 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c12:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004c16:	e7eb      	b.n	8004bf0 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004c18:	bb09      	cbnz	r1, 8004c5e <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c1a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8004c1c:	9104      	str	r1, [sp, #16]
 8004c1e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c20:	f001 fa8e 	bl	8006140 <SDMMC_GetResponse>
 8004c24:	0182      	lsls	r2, r0, #6
 8004c26:	d414      	bmi.n	8004c52 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8004c28:	a904      	add	r1, sp, #16
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f7ff fc50 	bl	80044d0 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8004c30:	b960      	cbnz	r0, 8004c4c <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c32:	9b05      	ldr	r3, [sp, #20]
 8004c34:	03db      	lsls	r3, r3, #15
 8004c36:	d50f      	bpl.n	8004c58 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004c38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	0409      	lsls	r1, r1, #16
 8004c3e:	f001 fc29 	bl	8006494 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8004c42:	b918      	cbnz	r0, 8004c4c <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8004c44:	4601      	mov	r1, r0
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	f001 fd20 	bl	800668c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8004c4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c4e:	4308      	orrs	r0, r1
 8004c50:	e7d0      	b.n	8004bf4 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c52:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c56:	e7f9      	b.n	8004c4c <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c58:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004c5c:	e7f6      	b.n	8004c4c <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c64:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c66:	e7c6      	b.n	8004bf6 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004c74:	6963      	ldr	r3, [r4, #20]
 8004c76:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 8004c78:	ab0a      	add	r3, sp, #40	; 0x28
 8004c7a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004c7e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 8004c82:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8004c84:	ab04      	add	r3, sp, #16
 8004c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	f001 fa19 	bl	80060c0 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004c94:	4628      	mov	r0, r5
 8004c96:	e7b7      	b.n	8004c08 <HAL_SD_ConfigWideBusOperation+0x74>
 8004c98:	1fe00fff 	.word	0x1fe00fff

08004c9c <HAL_SD_Init>:
{ 
 8004c9c:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	b910      	cbnz	r0, 8004ca8 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8004ca2:	2501      	movs	r5, #1
}
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8004ca8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cb0:	b913      	cbnz	r3, 8004cb8 <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 8004cb2:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8004cb4:	f7ff fc74 	bl	80045a0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7ff fe4a 	bl	8004958 <HAL_SD_InitCard>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d1ec      	bne.n	8004ca2 <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004cc8:	68e1      	ldr	r1, [r4, #12]
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7ff ff62 	bl	8004b94 <HAL_SD_ConfigWideBusOperation>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d1e5      	bne.n	8004ca2 <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8004cd6:	69a3      	ldr	r3, [r4, #24]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d006      	beq.n	8004cea <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004ce0:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004ce8:	e7dc      	b.n	8004ca4 <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 8004cea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d002      	beq.n	8004cf8 <HAL_SD_Init+0x5c>
 8004cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d1f1      	bne.n	8004cdc <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	6853      	ldr	r3, [r2, #4]
 8004cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d00:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 f818 	bl	8004d38 <HAL_SDEx_HighSpeed>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d0e7      	beq.n	8004cdc <HAL_SD_Init+0x40>
 8004d0c:	e7c9      	b.n	8004ca2 <HAL_SD_Init+0x6>

08004d0e <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004d0e:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8004d10:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004d12:	0409      	lsls	r1, r1, #16
{
 8004d14:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004d16:	6800      	ldr	r0, [r0, #0]
 8004d18:	f001 fc86 	bl	8006628 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8004d1c:	4601      	mov	r1, r0
 8004d1e:	b928      	cbnz	r0, 8004d2c <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	f001 fa0d 	bl	8006140 <SDMMC_GetResponse>
  return cardstate;
 8004d26:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8004d2a:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8004d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d2e:	4319      	orrs	r1, r3
 8004d30:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8004d32:	2000      	movs	r0, #0
 8004d34:	e7f7      	b.n	8004d26 <HAL_SD_GetCardState+0x18>

08004d36 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8004d36:	4770      	bx	lr

08004d38 <HAL_SDEx_HighSpeed>:
{
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 8004d3c:	2640      	movs	r6, #64	; 0x40
{
 8004d3e:	b096      	sub	sp, #88	; 0x58
 8004d40:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 8004d42:	4632      	mov	r2, r6
 8004d44:	2100      	movs	r1, #0
 8004d46:	a806      	add	r0, sp, #24
 8004d48:	f01a f951 	bl	801efee <memset>
  uint32_t Timeout = HAL_GetTick();
 8004d4c:	f7fc f960 	bl	8001010 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8004d50:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 8004d52:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d074      	beq.n	8004e42 <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8004d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5c:	d004      	beq.n	8004d68 <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 8004d5e:	2400      	movs	r4, #0
}
 8004d60:	4620      	mov	r0, r4
 8004d62:	b016      	add	sp, #88	; 0x58
 8004d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 8004d68:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8004d6a:	2f01      	cmp	r7, #1
 8004d6c:	d1f7      	bne.n	8004d5e <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 8004d6e:	6828      	ldr	r0, [r5, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 8004d74:	4631      	mov	r1, r6
 8004d76:	f001 fa8f 	bl	8006298 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d1ef      	bne.n	8004d60 <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 8004d84:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8004d88:	2360      	movs	r3, #96	; 0x60
 8004d8a:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d8c:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d8e:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8004d90:	4669      	mov	r1, sp
 8004d92:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d94:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8004d96:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8004d98:	f001 fa6c 	bl	8006274 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 8004d9c:	492a      	ldr	r1, [pc, #168]	; (8004e48 <HAL_SDEx_HighSpeed+0x110>)
 8004d9e:	6828      	ldr	r0, [r5, #0]
 8004da0:	f001 fc5b 	bl	800665a <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8004da4:	4604      	mov	r4, r0
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d1da      	bne.n	8004d60 <HAL_SDEx_HighSpeed+0x28>
 8004daa:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8004dac:	f240 592a 	movw	r9, #1322	; 0x52a
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db4:	ea12 0f09 	tst.w	r2, r9
 8004db8:	d005      	beq.n	8004dc6 <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dbc:	0710      	lsls	r0, r2, #28
 8004dbe:	d51e      	bpl.n	8004dfe <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8004dc4:	e7cc      	b.n	8004d60 <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	041f      	lsls	r7, r3, #16
 8004dca:	d50a      	bpl.n	8004de2 <HAL_SDEx_HighSpeed+0xaa>
 8004dcc:	1f37      	subs	r7, r6, #4
 8004dce:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8004dd2:	6828      	ldr	r0, [r5, #0]
 8004dd4:	f001 f98e 	bl	80060f4 <SDMMC_ReadFIFO>
 8004dd8:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 8004ddc:	4557      	cmp	r7, sl
 8004dde:	d1f8      	bne.n	8004dd2 <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 8004de0:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8004de2:	f7fc f915 	bl	8001010 <HAL_GetTick>
 8004de6:	eba0 0008 	sub.w	r0, r0, r8
 8004dea:	3001      	adds	r0, #1
 8004dec:	d1e0      	bne.n	8004db0 <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004df2:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 8004dfa:	2403      	movs	r4, #3
 8004dfc:	e7b0      	b.n	8004d60 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e00:	0791      	lsls	r1, r2, #30
 8004e02:	d502      	bpl.n	8004e0a <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004e04:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e06:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 8004e08:	e7aa      	b.n	8004d60 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0c:	0692      	lsls	r2, r2, #26
 8004e0e:	d501      	bpl.n	8004e14 <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e10:	2420      	movs	r4, #32
 8004e12:	e7f8      	b.n	8004e06 <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <HAL_SDEx_HighSpeed+0x114>)
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 8004e18:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8004e1c:	079b      	lsls	r3, r3, #30
 8004e1e:	d502      	bpl.n	8004e26 <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8004e20:	2001      	movs	r0, #1
 8004e22:	f7ff ff88 	bl	8004d36 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e2a:	6828      	ldr	r0, [r5, #0]
 8004e2c:	f001 fa34 	bl	8006298 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d094      	beq.n	8004d5e <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 8004e34:	2401      	movs	r4, #1
 8004e36:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 8004e3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e3c:	4318      	orrs	r0, r3
 8004e3e:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 8004e40:	e78e      	b.n	8004d60 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 8004e42:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8004e46:	e78b      	b.n	8004d60 <HAL_SDEx_HighSpeed+0x28>
 8004e48:	80ffff01 	.word	0x80ffff01
 8004e4c:	18000f3a 	.word	0x18000f3a

08004e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e50:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e52:	4604      	mov	r4, r0
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d04a      	beq.n	8004eee <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004e60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e64:	b91b      	cbnz	r3, 8004e6e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e66:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e6a:	f019 fc5d 	bl	801e728 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e6e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e70:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004e76:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e78:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e7e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004e82:	600b      	str	r3, [r1, #0]
 8004e84:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e88:	d92e      	bls.n	8004ee8 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e8a:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e8c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e90:	bf18      	it	ne
 8004e92:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e96:	b92b      	cbnz	r3, 8004ea4 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e98:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e9c:	bf8c      	ite	hi
 8004e9e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ea0:	2301      	movls	r3, #1
 8004ea2:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004ea4:	68a6      	ldr	r6, [r4, #8]
 8004ea6:	6863      	ldr	r3, [r4, #4]
 8004ea8:	69a5      	ldr	r5, [r4, #24]
 8004eaa:	4333      	orrs	r3, r6
 8004eac:	6926      	ldr	r6, [r4, #16]
 8004eae:	4333      	orrs	r3, r6
 8004eb0:	6966      	ldr	r6, [r4, #20]
 8004eb2:	4333      	orrs	r3, r6
 8004eb4:	69e6      	ldr	r6, [r4, #28]
 8004eb6:	4333      	orrs	r3, r6
 8004eb8:	6a26      	ldr	r6, [r4, #32]
 8004eba:	4333      	orrs	r3, r6
 8004ebc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ebe:	4333      	orrs	r3, r6
 8004ec0:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8004ec4:	4333      	orrs	r3, r6
 8004ec6:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ece:	0c2d      	lsrs	r5, r5, #16
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	f005 0504 	and.w	r5, r5, #4
 8004ed6:	432a      	orrs	r2, r5
 8004ed8:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8004eda:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004edc:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004ede:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ee8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004eec:	e7d0      	b.n	8004e90 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8004eee:	2001      	movs	r0, #1
}
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}

08004ef2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef6:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8004f00:	2b01      	cmp	r3, #1
{
 8004f02:	4604      	mov	r4, r0
 8004f04:	460e      	mov	r6, r1
 8004f06:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8004f08:	d07d      	beq.n	8005006 <HAL_SPI_TransmitReceive+0x114>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f10:	f7fc f87e 	bl	8001010 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f14:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f18:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 8004f1a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f1e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f20:	bf1c      	itt	ne
 8004f22:	2305      	movne	r3, #5
 8004f24:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8004f2c:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8004f30:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 8004f32:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f34:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 8004f36:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f3c:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f3e:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 8004f40:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f42:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 8004f44:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	b95b      	cbnz	r3, 8004f64 <HAL_SPI_TransmitReceive+0x72>
 8004f4c:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8004f50:	b280      	uxth	r0, r0
 8004f52:	b938      	cbnz	r0, 8004f64 <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8004f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004f64:	b195      	cbz	r5, 8004f8c <HAL_SPI_TransmitReceive+0x9a>
 8004f66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	b17b      	cbz	r3, 8004f8c <HAL_SPI_TransmitReceive+0x9a>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	0791      	lsls	r1, r2, #30
 8004f72:	d50b      	bpl.n	8004f8c <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 8004f74:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004f76:	b292      	uxth	r2, r2
 8004f78:	2a01      	cmp	r2, #1
 8004f7a:	d932      	bls.n	8004fe2 <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8004f7c:	f836 2b02 	ldrh.w	r2, [r6], #2
 8004f80:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8004f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f84:	3b02      	subs	r3, #2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004f8a:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004f8c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	b1db      	cbz	r3, 8004fcc <HAL_SPI_TransmitReceive+0xda>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	07d2      	lsls	r2, r2, #31
 8004f9a:	d517      	bpl.n	8004fcc <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 8004f9c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004fa0:	b292      	uxth	r2, r2
 8004fa2:	2a01      	cmp	r2, #1
 8004fa4:	d925      	bls.n	8004ff2 <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 8004fac:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004fb0:	3a02      	subs	r2, #2
 8004fb2:	b292      	uxth	r2, r2
 8004fb4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004fb8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004fbc:	b292      	uxth	r2, r2
 8004fbe:	2a01      	cmp	r2, #1
 8004fc0:	d803      	bhi.n	8004fca <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fc8:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8004fca:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004fcc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004fd0:	d0b9      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x54>
 8004fd2:	f7fc f81d 	bl	8001010 <HAL_GetTick>
 8004fd6:	eba0 0009 	sub.w	r0, r0, r9
 8004fda:	4580      	cmp	r8, r0
 8004fdc:	d8b3      	bhi.n	8004f46 <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 8004fde:	2003      	movs	r0, #3
 8004fe0:	e7b8      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004fe2:	7832      	ldrb	r2, [r6, #0]
 8004fe4:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8004fe6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7cb      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ff2:	7b1b      	ldrb	r3, [r3, #12]
 8004ff4:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 8004ff6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005002:	3701      	adds	r7, #1
 8005004:	e7e1      	b.n	8004fca <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 8005006:	2002      	movs	r0, #2
  return errorcode;
}
 8005008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800500c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500c:	6a03      	ldr	r3, [r0, #32]
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005014:	6a03      	ldr	r3, [r0, #32]
{
 8005016:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800501c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800501e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005022:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005026:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005028:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800502a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800502e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005030:	4d1b      	ldr	r5, [pc, #108]	; (80050a0 <TIM_OC1_SetConfig+0x94>)
 8005032:	42a8      	cmp	r0, r5
 8005034:	d00f      	beq.n	8005056 <TIM_OC1_SetConfig+0x4a>
 8005036:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800503a:	42a8      	cmp	r0, r5
 800503c:	d00b      	beq.n	8005056 <TIM_OC1_SetConfig+0x4a>
 800503e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005042:	42a8      	cmp	r0, r5
 8005044:	d007      	beq.n	8005056 <TIM_OC1_SetConfig+0x4a>
 8005046:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800504a:	42a8      	cmp	r0, r5
 800504c:	d003      	beq.n	8005056 <TIM_OC1_SetConfig+0x4a>
 800504e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005052:	42a8      	cmp	r0, r5
 8005054:	d11e      	bne.n	8005094 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005056:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005058:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800505c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505e:	4d10      	ldr	r5, [pc, #64]	; (80050a0 <TIM_OC1_SetConfig+0x94>)
 8005060:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005062:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005066:	d00f      	beq.n	8005088 <TIM_OC1_SetConfig+0x7c>
 8005068:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800506c:	42a8      	cmp	r0, r5
 800506e:	d00b      	beq.n	8005088 <TIM_OC1_SetConfig+0x7c>
 8005070:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005074:	42a8      	cmp	r0, r5
 8005076:	d007      	beq.n	8005088 <TIM_OC1_SetConfig+0x7c>
 8005078:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800507c:	42a8      	cmp	r0, r5
 800507e:	d003      	beq.n	8005088 <TIM_OC1_SetConfig+0x7c>
 8005080:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005084:	42a8      	cmp	r0, r5
 8005086:	d105      	bne.n	8005094 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005088:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800508c:	698e      	ldr	r6, [r1, #24]
 800508e:	694c      	ldr	r4, [r1, #20]
 8005090:	4334      	orrs	r4, r6
 8005092:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005094:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005096:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005098:	684a      	ldr	r2, [r1, #4]
 800509a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509c:	6203      	str	r3, [r0, #32]
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	40012c00 	.word	0x40012c00

080050a4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a4:	6a03      	ldr	r3, [r0, #32]
 80050a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ac:	6a03      	ldr	r3, [r0, #32]
{
 80050ae:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80050be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80050c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ca:	4d16      	ldr	r5, [pc, #88]	; (8005124 <TIM_OC3_SetConfig+0x80>)
 80050cc:	42a8      	cmp	r0, r5
 80050ce:	d003      	beq.n	80050d8 <TIM_OC3_SetConfig+0x34>
 80050d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80050d4:	42a8      	cmp	r0, r5
 80050d6:	d10d      	bne.n	80050f4 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80050da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	4d10      	ldr	r5, [pc, #64]	; (8005124 <TIM_OC3_SetConfig+0x80>)
 80050e4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80050e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	d00e      	beq.n	800510a <TIM_OC3_SetConfig+0x66>
 80050ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80050f0:	42a8      	cmp	r0, r5
 80050f2:	d00a      	beq.n	800510a <TIM_OC3_SetConfig+0x66>
 80050f4:	4d0c      	ldr	r5, [pc, #48]	; (8005128 <TIM_OC3_SetConfig+0x84>)
 80050f6:	42a8      	cmp	r0, r5
 80050f8:	d007      	beq.n	800510a <TIM_OC3_SetConfig+0x66>
 80050fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050fe:	42a8      	cmp	r0, r5
 8005100:	d003      	beq.n	800510a <TIM_OC3_SetConfig+0x66>
 8005102:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005106:	42a8      	cmp	r0, r5
 8005108:	d106      	bne.n	8005118 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800510a:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005110:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005112:	4334      	orrs	r4, r6
 8005114:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005118:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511c:	684a      	ldr	r2, [r1, #4]
 800511e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005120:	6203      	str	r3, [r0, #32]
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40014000 	.word	0x40014000

0800512c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800512c:	6a03      	ldr	r3, [r0, #32]
 800512e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005132:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005134:	6a03      	ldr	r3, [r0, #32]
{
 8005136:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800513c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800513e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005142:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005146:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800514a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800514c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005150:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	4d0e      	ldr	r5, [pc, #56]	; (8005190 <TIM_OC4_SetConfig+0x64>)
 8005156:	42a8      	cmp	r0, r5
 8005158:	d00f      	beq.n	800517a <TIM_OC4_SetConfig+0x4e>
 800515a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800515e:	42a8      	cmp	r0, r5
 8005160:	d00b      	beq.n	800517a <TIM_OC4_SetConfig+0x4e>
 8005162:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005166:	42a8      	cmp	r0, r5
 8005168:	d007      	beq.n	800517a <TIM_OC4_SetConfig+0x4e>
 800516a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800516e:	42a8      	cmp	r0, r5
 8005170:	d003      	beq.n	800517a <TIM_OC4_SetConfig+0x4e>
 8005172:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005176:	42a8      	cmp	r0, r5
 8005178:	d104      	bne.n	8005184 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800517a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800517c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005180:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005184:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005186:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005188:	684a      	ldr	r2, [r1, #4]
 800518a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518c:	6203      	str	r3, [r0, #32]
 800518e:	bd30      	pop	{r4, r5, pc}
 8005190:	40012c00 	.word	0x40012c00

08005194 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005194:	6a03      	ldr	r3, [r0, #32]
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519c:	6a03      	ldr	r3, [r0, #32]
{
 800519e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051a2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80051ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051b0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80051b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051b6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ba:	4d0f      	ldr	r5, [pc, #60]	; (80051f8 <TIM_OC5_SetConfig+0x64>)
 80051bc:	42a8      	cmp	r0, r5
 80051be:	d00f      	beq.n	80051e0 <TIM_OC5_SetConfig+0x4c>
 80051c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051c4:	42a8      	cmp	r0, r5
 80051c6:	d00b      	beq.n	80051e0 <TIM_OC5_SetConfig+0x4c>
 80051c8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80051cc:	42a8      	cmp	r0, r5
 80051ce:	d007      	beq.n	80051e0 <TIM_OC5_SetConfig+0x4c>
 80051d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051d4:	42a8      	cmp	r0, r5
 80051d6:	d003      	beq.n	80051e0 <TIM_OC5_SetConfig+0x4c>
 80051d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051dc:	42a8      	cmp	r0, r5
 80051de:	d104      	bne.n	80051ea <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051e0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051e2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051e6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051ec:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051ee:	684a      	ldr	r2, [r1, #4]
 80051f0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	6203      	str	r3, [r0, #32]
 80051f4:	bd30      	pop	{r4, r5, pc}
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00

080051fc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051fc:	6a03      	ldr	r3, [r0, #32]
 80051fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005202:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005204:	6a03      	ldr	r3, [r0, #32]
{
 8005206:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800520e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005212:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005216:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800521a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800521c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005220:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	4d0e      	ldr	r5, [pc, #56]	; (8005260 <TIM_OC6_SetConfig+0x64>)
 8005226:	42a8      	cmp	r0, r5
 8005228:	d00f      	beq.n	800524a <TIM_OC6_SetConfig+0x4e>
 800522a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800522e:	42a8      	cmp	r0, r5
 8005230:	d00b      	beq.n	800524a <TIM_OC6_SetConfig+0x4e>
 8005232:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005236:	42a8      	cmp	r0, r5
 8005238:	d007      	beq.n	800524a <TIM_OC6_SetConfig+0x4e>
 800523a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800523e:	42a8      	cmp	r0, r5
 8005240:	d003      	beq.n	800524a <TIM_OC6_SetConfig+0x4e>
 8005242:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005246:	42a8      	cmp	r0, r5
 8005248:	d104      	bne.n	8005254 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800524a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800524c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005250:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005256:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005258:	684a      	ldr	r2, [r1, #4]
 800525a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	6203      	str	r3, [r0, #32]
 800525e:	bd30      	pop	{r4, r5, pc}
 8005260:	40012c00 	.word	0x40012c00

08005264 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	2302      	movs	r3, #2
{
 8005266:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 800526c:	6803      	ldr	r3, [r0, #0]
 800526e:	4c09      	ldr	r4, [pc, #36]	; (8005294 <HAL_TIM_Base_Start+0x30>)
 8005270:	6899      	ldr	r1, [r3, #8]
 8005272:	4021      	ands	r1, r4
 8005274:	2906      	cmp	r1, #6
 8005276:	d008      	beq.n	800528a <HAL_TIM_Base_Start+0x26>
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	4022      	ands	r2, r4
 800527c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005280:	bf1e      	ittt	ne
 8005282:	681a      	ldrne	r2, [r3, #0]
 8005284:	f042 0201 	orrne.w	r2, r2, #1
 8005288:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800528a:	2301      	movs	r3, #1
 800528c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005290:	2000      	movs	r0, #0
 8005292:	bd10      	pop	{r4, pc}
 8005294:	00010007 	.word	0x00010007

08005298 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005298:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 800529a:	480a      	ldr	r0, [pc, #40]	; (80052c4 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80052a4:	6899      	ldr	r1, [r3, #8]
 80052a6:	4001      	ands	r1, r0
 80052a8:	2906      	cmp	r1, #6
 80052aa:	d008      	beq.n	80052be <HAL_TIM_Base_Start_IT+0x26>
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	4002      	ands	r2, r0
 80052b0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 80052b4:	bf1e      	ittt	ne
 80052b6:	681a      	ldrne	r2, [r3, #0]
 80052b8:	f042 0201 	orrne.w	r2, r2, #1
 80052bc:	601a      	strne	r2, [r3, #0]
}
 80052be:	2000      	movs	r0, #0
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	00010007 	.word	0x00010007

080052c8 <HAL_TIM_PeriodElapsedCallback>:
 80052c8:	4770      	bx	lr

080052ca <HAL_TIM_OC_DelayElapsedCallback>:
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_IC_CaptureCallback>:
 80052cc:	4770      	bx	lr

080052ce <HAL_TIM_PWM_PulseFinishedCallback>:
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_TriggerCallback>:
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d2:	6803      	ldr	r3, [r0, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	0791      	lsls	r1, r2, #30
{
 80052d8:	b510      	push	{r4, lr}
 80052da:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052dc:	d50f      	bpl.n	80052fe <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	0792      	lsls	r2, r2, #30
 80052e2:	d50c      	bpl.n	80052fe <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e4:	f06f 0202 	mvn.w	r2, #2
 80052e8:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ec:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ee:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f2:	f000 8085 	beq.w	8005400 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	f7ff ffe9 	bl	80052cc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	2300      	movs	r3, #0
 80052fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	0752      	lsls	r2, r2, #29
 8005304:	d510      	bpl.n	8005328 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	0750      	lsls	r0, r2, #29
 800530a:	d50d      	bpl.n	8005328 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800530c:	f06f 0204 	mvn.w	r2, #4
 8005310:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005312:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005314:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005316:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800531a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800531c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800531e:	d075      	beq.n	800540c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005320:	f7ff ffd4 	bl	80052cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005324:	2300      	movs	r3, #0
 8005326:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	0711      	lsls	r1, r2, #28
 800532e:	d50f      	bpl.n	8005350 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	0712      	lsls	r2, r2, #28
 8005334:	d50c      	bpl.n	8005350 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005336:	f06f 0208 	mvn.w	r2, #8
 800533a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800533c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005340:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005342:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005344:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005346:	d067      	beq.n	8005418 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005348:	f7ff ffc0 	bl	80052cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534c:	2300      	movs	r3, #0
 800534e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	06d0      	lsls	r0, r2, #27
 8005356:	d510      	bpl.n	800537a <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	06d1      	lsls	r1, r2, #27
 800535c:	d50d      	bpl.n	800537a <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800535e:	f06f 0210 	mvn.w	r2, #16
 8005362:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005364:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005366:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005368:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800536e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005370:	d058      	beq.n	8005424 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	f7ff ffab 	bl	80052cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	2300      	movs	r3, #0
 8005378:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	07d2      	lsls	r2, r2, #31
 8005380:	d508      	bpl.n	8005394 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	07d0      	lsls	r0, r2, #31
 8005386:	d505      	bpl.n	8005394 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005388:	f06f 0201 	mvn.w	r2, #1
 800538c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff ff9a 	bl	80052c8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	0611      	lsls	r1, r2, #24
 800539a:	d508      	bpl.n	80053ae <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	0612      	lsls	r2, r2, #24
 80053a0:	d505      	bpl.n	80053ae <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 facc 	bl	8005946 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	05d0      	lsls	r0, r2, #23
 80053b4:	d508      	bpl.n	80053c8 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	0611      	lsls	r1, r2, #24
 80053ba:	d505      	bpl.n	80053c8 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 fac0 	bl	8005948 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	0652      	lsls	r2, r2, #25
 80053ce:	d508      	bpl.n	80053e2 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	0650      	lsls	r0, r2, #25
 80053d4:	d505      	bpl.n	80053e2 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053da:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80053dc:	4620      	mov	r0, r4
 80053de:	f7ff ff77 	bl	80052d0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	0691      	lsls	r1, r2, #26
 80053e8:	d522      	bpl.n	8005430 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	0692      	lsls	r2, r2, #26
 80053ee:	d51f      	bpl.n	8005430 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80053f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f6:	611a      	str	r2, [r3, #16]
}
 80053f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80053fc:	f000 baa2 	b.w	8005944 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005400:	f7ff ff63 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff ff62 	bl	80052ce <HAL_TIM_PWM_PulseFinishedCallback>
 800540a:	e776      	b.n	80052fa <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540c:	f7ff ff5d 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff ff5c 	bl	80052ce <HAL_TIM_PWM_PulseFinishedCallback>
 8005416:	e785      	b.n	8005324 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005418:	f7ff ff57 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	4620      	mov	r0, r4
 800541e:	f7ff ff56 	bl	80052ce <HAL_TIM_PWM_PulseFinishedCallback>
 8005422:	e793      	b.n	800534c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005424:	f7ff ff51 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff ff50 	bl	80052ce <HAL_TIM_PWM_PulseFinishedCallback>
 800542e:	e7a2      	b.n	8005376 <HAL_TIM_IRQHandler+0xa4>
 8005430:	bd10      	pop	{r4, pc}
	...

08005434 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005434:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005436:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005438:	4290      	cmp	r0, r2
 800543a:	d012      	beq.n	8005462 <TIM_Base_SetConfig+0x2e>
 800543c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005440:	d00f      	beq.n	8005462 <TIM_Base_SetConfig+0x2e>
 8005442:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005446:	4290      	cmp	r0, r2
 8005448:	d00b      	beq.n	8005462 <TIM_Base_SetConfig+0x2e>
 800544a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800544e:	4290      	cmp	r0, r2
 8005450:	d007      	beq.n	8005462 <TIM_Base_SetConfig+0x2e>
 8005452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005456:	4290      	cmp	r0, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0x2e>
 800545a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800545e:	4290      	cmp	r0, r2
 8005460:	d119      	bne.n	8005496 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005462:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005468:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546a:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <TIM_Base_SetConfig+0xc4>)
 800546c:	4290      	cmp	r0, r2
 800546e:	d01d      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 8005470:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005474:	d01a      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 8005476:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800547a:	4290      	cmp	r0, r2
 800547c:	d016      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 800547e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005482:	4290      	cmp	r0, r2
 8005484:	d012      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 8005486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800548a:	4290      	cmp	r0, r2
 800548c:	d00e      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 800548e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005492:	4290      	cmp	r0, r2
 8005494:	d00a      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 8005496:	4a19      	ldr	r2, [pc, #100]	; (80054fc <TIM_Base_SetConfig+0xc8>)
 8005498:	4290      	cmp	r0, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 800549c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054a0:	4290      	cmp	r0, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x78>
 80054a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054a8:	4290      	cmp	r0, r2
 80054aa:	d103      	bne.n	80054b4 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b4:	694a      	ldr	r2, [r1, #20]
 80054b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80054bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054be:	688b      	ldr	r3, [r1, #8]
 80054c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054c2:	680b      	ldr	r3, [r1, #0]
 80054c4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <TIM_Base_SetConfig+0xc4>)
 80054c8:	4298      	cmp	r0, r3
 80054ca:	d00f      	beq.n	80054ec <TIM_Base_SetConfig+0xb8>
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	4298      	cmp	r0, r3
 80054d2:	d00b      	beq.n	80054ec <TIM_Base_SetConfig+0xb8>
 80054d4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80054d8:	4298      	cmp	r0, r3
 80054da:	d007      	beq.n	80054ec <TIM_Base_SetConfig+0xb8>
 80054dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e0:	4298      	cmp	r0, r3
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0xb8>
 80054e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e8:	4298      	cmp	r0, r3
 80054ea:	d101      	bne.n	80054f0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80054ec:	690b      	ldr	r3, [r1, #16]
 80054ee:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80054f0:	2301      	movs	r3, #1
 80054f2:	6143      	str	r3, [r0, #20]
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40014000 	.word	0x40014000

08005500 <HAL_TIM_Base_Init>:
{
 8005500:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005502:	4604      	mov	r4, r0
 8005504:	b1a0      	cbz	r0, 8005530 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800550a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800550e:	b91b      	cbnz	r3, 8005518 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005510:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005514:	f019 f99e 	bl	801e854 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	2302      	movs	r3, #2
 800551a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	1d21      	adds	r1, r4, #4
 8005522:	f7ff ff87 	bl	8005434 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005526:	2301      	movs	r3, #1
 8005528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800552c:	2000      	movs	r0, #0
 800552e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005530:	2001      	movs	r0, #1
}
 8005532:	bd10      	pop	{r4, pc}

08005534 <HAL_TIM_OC_Init>:
{
 8005534:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005536:	4604      	mov	r4, r0
 8005538:	b1a0      	cbz	r0, 8005564 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800553a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800553e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005542:	b91b      	cbnz	r3, 800554c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005544:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005548:	f019 f9e6 	bl	801e918 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	2302      	movs	r3, #2
 800554e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	1d21      	adds	r1, r4, #4
 8005556:	f7ff ff6d 	bl	8005434 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800555a:	2301      	movs	r3, #1
 800555c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005560:	2000      	movs	r0, #0
 8005562:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005564:	2001      	movs	r0, #1
}
 8005566:	bd10      	pop	{r4, pc}

08005568 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005568:	6a03      	ldr	r3, [r0, #32]
 800556a:	f023 0310 	bic.w	r3, r3, #16
 800556e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005570:	6a03      	ldr	r3, [r0, #32]
{
 8005572:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005574:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005576:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800557a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800557e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005582:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005586:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005588:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800558c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005590:	4d16      	ldr	r5, [pc, #88]	; (80055ec <TIM_OC2_SetConfig+0x84>)
 8005592:	42a8      	cmp	r0, r5
 8005594:	d003      	beq.n	800559e <TIM_OC2_SetConfig+0x36>
 8005596:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800559a:	42a8      	cmp	r0, r5
 800559c:	d10d      	bne.n	80055ba <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800559e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a8:	4d10      	ldr	r5, [pc, #64]	; (80055ec <TIM_OC2_SetConfig+0x84>)
 80055aa:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80055ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b0:	d00e      	beq.n	80055d0 <TIM_OC2_SetConfig+0x68>
 80055b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80055b6:	42a8      	cmp	r0, r5
 80055b8:	d00a      	beq.n	80055d0 <TIM_OC2_SetConfig+0x68>
 80055ba:	4d0d      	ldr	r5, [pc, #52]	; (80055f0 <TIM_OC2_SetConfig+0x88>)
 80055bc:	42a8      	cmp	r0, r5
 80055be:	d007      	beq.n	80055d0 <TIM_OC2_SetConfig+0x68>
 80055c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055c4:	42a8      	cmp	r0, r5
 80055c6:	d003      	beq.n	80055d0 <TIM_OC2_SetConfig+0x68>
 80055c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055cc:	42a8      	cmp	r0, r5
 80055ce:	d106      	bne.n	80055de <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d0:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055d4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055d8:	4334      	orrs	r4, r6
 80055da:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80055de:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80055e0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80055e2:	684a      	ldr	r2, [r1, #4]
 80055e4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80055e6:	6203      	str	r3, [r0, #32]
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	bf00      	nop
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40014000 	.word	0x40014000

080055f4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80055f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
{
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005602:	d010      	beq.n	8005626 <HAL_TIM_OC_ConfigChannel+0x32>
 8005604:	2301      	movs	r3, #1
  switch (Channel)
 8005606:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005608:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005610:	d01c      	beq.n	800564c <HAL_TIM_OC_ConfigChannel+0x58>
 8005612:	d809      	bhi.n	8005628 <HAL_TIM_OC_ConfigChannel+0x34>
 8005614:	b192      	cbz	r2, 800563c <HAL_TIM_OC_ConfigChannel+0x48>
 8005616:	2a04      	cmp	r2, #4
 8005618:	d014      	beq.n	8005644 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 800561a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800561c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800561e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005622:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005626:	bd10      	pop	{r4, pc}
  switch (Channel)
 8005628:	2a10      	cmp	r2, #16
 800562a:	d013      	beq.n	8005654 <HAL_TIM_OC_ConfigChannel+0x60>
 800562c:	2a14      	cmp	r2, #20
 800562e:	d015      	beq.n	800565c <HAL_TIM_OC_ConfigChannel+0x68>
 8005630:	2a0c      	cmp	r2, #12
 8005632:	d1f2      	bne.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	f7ff fd79 	bl	800512c <TIM_OC4_SetConfig>
      break;
 800563a:	e7ee      	b.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	f7ff fce5 	bl	800500c <TIM_OC1_SetConfig>
      break;
 8005642:	e7ea      	b.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	f7ff ff8f 	bl	8005568 <TIM_OC2_SetConfig>
      break;
 800564a:	e7e6      	b.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	f7ff fd29 	bl	80050a4 <TIM_OC3_SetConfig>
      break;
 8005652:	e7e2      	b.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	f7ff fd9d 	bl	8005194 <TIM_OC5_SetConfig>
      break;
 800565a:	e7de      	b.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	f7ff fdcd 	bl	80051fc <TIM_OC6_SetConfig>
      break;
 8005662:	e7da      	b.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>

08005664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005664:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005666:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005668:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800566a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005672:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005674:	6083      	str	r3, [r0, #8]
 8005676:	bd10      	pop	{r4, pc}

08005678 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005678:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800567c:	2b01      	cmp	r3, #1
{
 800567e:	b570      	push	{r4, r5, r6, lr}
 8005680:	4604      	mov	r4, r0
 8005682:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005686:	d017      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800568c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800568e:	2301      	movs	r3, #1
 8005690:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005694:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005696:	4b48      	ldr	r3, [pc, #288]	; (80057b8 <HAL_TIM_ConfigClockSource+0x140>)
 8005698:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800569a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800569c:	680b      	ldr	r3, [r1, #0]
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d072      	beq.n	8005788 <HAL_TIM_ConfigClockSource+0x110>
 80056a2:	d815      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x58>
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d00c      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x4a>
 80056a8:	d807      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x42>
 80056aa:	b153      	cbz	r3, 80056c2 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80056ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80056b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d001      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x4a>
 80056be:	2b30      	cmp	r3, #48	; 0x30
 80056c0:	d1f4      	bne.n	80056ac <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80056c2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80056c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056cc:	4313      	orrs	r3, r2
 80056ce:	e033      	b.n	8005738 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d033      	beq.n	800573c <HAL_TIM_ConfigClockSource+0xc4>
 80056d4:	d81b      	bhi.n	800570e <HAL_TIM_ConfigClockSource+0x96>
 80056d6:	2b50      	cmp	r3, #80	; 0x50
 80056d8:	d03f      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xe2>
 80056da:	2b60      	cmp	r3, #96	; 0x60
 80056dc:	d1e6      	bne.n	80056ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056de:	684d      	ldr	r5, [r1, #4]
 80056e0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e2:	6a01      	ldr	r1, [r0, #32]
 80056e4:	f021 0110 	bic.w	r1, r1, #16
 80056e8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ea:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80056ec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056fa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80056fe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005700:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005702:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005708:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800570c:	e014      	b.n	8005738 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	d00c      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xb6>
 8005714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005718:	d1c8      	bne.n	80056ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800571a:	68cb      	ldr	r3, [r1, #12]
 800571c:	684a      	ldr	r2, [r1, #4]
 800571e:	6889      	ldr	r1, [r1, #8]
 8005720:	f7ff ffa0 	bl	8005664 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005724:	6822      	ldr	r2, [r4, #0]
 8005726:	6893      	ldr	r3, [r2, #8]
 8005728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800572c:	e013      	b.n	8005756 <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800572e:	6883      	ldr	r3, [r0, #8]
 8005730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005734:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005738:	6083      	str	r3, [r0, #8]
 800573a:	e7b7      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800573c:	68cb      	ldr	r3, [r1, #12]
 800573e:	684a      	ldr	r2, [r1, #4]
 8005740:	6889      	ldr	r1, [r1, #8]
 8005742:	f7ff ff8f 	bl	8005664 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800574a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005752:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005756:	6093      	str	r3, [r2, #8]
      break;
 8005758:	e7a8      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	684a      	ldr	r2, [r1, #4]
 800575c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800575e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005760:	6a05      	ldr	r5, [r0, #32]
 8005762:	f025 0501 	bic.w	r5, r5, #1
 8005766:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005768:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800576a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800576e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005772:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005776:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005778:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800577a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800577c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005782:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8005786:	e7d7      	b.n	8005738 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005788:	684a      	ldr	r2, [r1, #4]
 800578a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800578c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	6a05      	ldr	r5, [r0, #32]
 8005790:	f025 0501 	bic.w	r5, r5, #1
 8005794:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005796:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005798:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800579c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80057a4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80057a6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80057a8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80057aa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80057b4:	e7c0      	b.n	8005738 <HAL_TIM_ConfigClockSource+0xc0>
 80057b6:	bf00      	nop
 80057b8:	fffe0088 	.word	0xfffe0088

080057bc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057bc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057be:	f001 011f 	and.w	r1, r1, #31
{
 80057c2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057c4:	2401      	movs	r4, #1
 80057c6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80057c8:	ea23 0304 	bic.w	r3, r3, r4
 80057cc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057ce:	6a03      	ldr	r3, [r0, #32]
 80057d0:	408a      	lsls	r2, r1
 80057d2:	431a      	orrs	r2, r3
 80057d4:	6202      	str	r2, [r0, #32]
 80057d6:	bd10      	pop	{r4, pc}

080057d8 <HAL_TIM_PWM_Start>:
{
 80057d8:	b510      	push	{r4, lr}
 80057da:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057dc:	2201      	movs	r2, #1
 80057de:	6800      	ldr	r0, [r0, #0]
 80057e0:	f7ff ffec 	bl	80057bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	4a14      	ldr	r2, [pc, #80]	; (8005838 <HAL_TIM_PWM_Start+0x60>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d01f      	beq.n	800582c <HAL_TIM_PWM_Start+0x54>
 80057ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d01b      	beq.n	800582c <HAL_TIM_PWM_Start+0x54>
 80057f4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d017      	beq.n	800582c <HAL_TIM_PWM_Start+0x54>
 80057fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <HAL_TIM_PWM_Start+0x54>
 8005804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005808:	4293      	cmp	r3, r2
 800580a:	d00f      	beq.n	800582c <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 800580c:	6899      	ldr	r1, [r3, #8]
 800580e:	480b      	ldr	r0, [pc, #44]	; (800583c <HAL_TIM_PWM_Start+0x64>)
 8005810:	4001      	ands	r1, r0
 8005812:	2906      	cmp	r1, #6
 8005814:	d008      	beq.n	8005828 <HAL_TIM_PWM_Start+0x50>
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	4002      	ands	r2, r0
 800581a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800581e:	d003      	beq.n	8005828 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]
}
 8005828:	2000      	movs	r0, #0
 800582a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800582c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005832:	645a      	str	r2, [r3, #68]	; 0x44
 8005834:	e7ea      	b.n	800580c <HAL_TIM_PWM_Start+0x34>
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00
 800583c:	00010007 	.word	0x00010007

08005840 <HAL_TIM_OC_Start>:
 8005840:	f7ff bfca 	b.w	80057d8 <HAL_TIM_PWM_Start>

08005844 <HAL_TIM_PWM_Start_IT>:
{
 8005844:	b510      	push	{r4, lr}
 8005846:	4604      	mov	r4, r0
  switch (Channel)
 8005848:	290c      	cmp	r1, #12
 800584a:	d80d      	bhi.n	8005868 <HAL_TIM_PWM_Start_IT+0x24>
 800584c:	e8df f001 	tbb	[pc, r1]
 8005850:	0c0c0c07 	.word	0x0c0c0c07
 8005854:	0c0c0c34 	.word	0x0c0c0c34
 8005858:	0c0c0c39 	.word	0x0c0c0c39
 800585c:	3e          	.byte	0x3e
 800585d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800585e:	6802      	ldr	r2, [r0, #0]
 8005860:	68d3      	ldr	r3, [r2, #12]
 8005862:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005866:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005868:	2201      	movs	r2, #1
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	f7ff ffa6 	bl	80057bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <HAL_TIM_PWM_Start_IT+0x9c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d02e      	beq.n	80058d6 <HAL_TIM_PWM_Start_IT+0x92>
 8005878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587c:	4293      	cmp	r3, r2
 800587e:	d02a      	beq.n	80058d6 <HAL_TIM_PWM_Start_IT+0x92>
 8005880:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005884:	4293      	cmp	r3, r2
 8005886:	d026      	beq.n	80058d6 <HAL_TIM_PWM_Start_IT+0x92>
 8005888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800588c:	4293      	cmp	r3, r2
 800588e:	d022      	beq.n	80058d6 <HAL_TIM_PWM_Start_IT+0x92>
 8005890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005894:	4293      	cmp	r3, r2
 8005896:	d01e      	beq.n	80058d6 <HAL_TIM_PWM_Start_IT+0x92>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005898:	6899      	ldr	r1, [r3, #8]
 800589a:	4812      	ldr	r0, [pc, #72]	; (80058e4 <HAL_TIM_PWM_Start_IT+0xa0>)
 800589c:	4001      	ands	r1, r0
 800589e:	2906      	cmp	r1, #6
 80058a0:	d008      	beq.n	80058b4 <HAL_TIM_PWM_Start_IT+0x70>
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	4002      	ands	r2, r0
 80058a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80058aa:	d003      	beq.n	80058b4 <HAL_TIM_PWM_Start_IT+0x70>
    __HAL_TIM_ENABLE(htim);
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	2000      	movs	r0, #0
 80058b6:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058b8:	6802      	ldr	r2, [r0, #0]
 80058ba:	68d3      	ldr	r3, [r2, #12]
 80058bc:	f043 0304 	orr.w	r3, r3, #4
 80058c0:	e7d1      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058c2:	6802      	ldr	r2, [r0, #0]
 80058c4:	68d3      	ldr	r3, [r2, #12]
 80058c6:	f043 0308 	orr.w	r3, r3, #8
 80058ca:	e7cc      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058cc:	6802      	ldr	r2, [r0, #0]
 80058ce:	68d3      	ldr	r3, [r2, #12]
 80058d0:	f043 0310 	orr.w	r3, r3, #16
 80058d4:	e7c7      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 80058d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058dc:	645a      	str	r2, [r3, #68]	; 0x44
 80058de:	e7db      	b.n	8005898 <HAL_TIM_PWM_Start_IT+0x54>
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	00010007 	.word	0x00010007

080058e8 <HAL_TIM_OC_Start_IT>:
 80058e8:	f7ff bfac 	b.w	8005844 <HAL_TIM_PWM_Start_IT>

080058ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
{
 80058f2:	b530      	push	{r4, r5, lr}
 80058f4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80058f8:	d01f      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058fc:	4d10      	ldr	r5, [pc, #64]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80058fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005902:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005904:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005906:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005908:	d003      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800590a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800590e:	42aa      	cmp	r2, r5
 8005910:	d103      	bne.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005912:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005914:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005918:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005922:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005924:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005928:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800592a:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800592c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800592e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005930:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005934:	2300      	movs	r3, #0
 8005936:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800593a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800593c:	bd30      	pop	{r4, r5, pc}
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00

08005944 <HAL_TIMEx_CommutationCallback>:
 8005944:	4770      	bx	lr

08005946 <HAL_TIMEx_BreakCallback>:
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005948:	4770      	bx	lr
	...

0800594c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 800594c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800594e:	69c1      	ldr	r1, [r0, #28]
 8005950:	6882      	ldr	r2, [r0, #8]
{
 8005952:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005956:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005958:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800595a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800595c:	4302      	orrs	r2, r0
 800595e:	6960      	ldr	r0, [r4, #20]
 8005960:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005962:	48bd      	ldr	r0, [pc, #756]	; (8005c58 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005964:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005966:	4028      	ands	r0, r5
 8005968:	4302      	orrs	r2, r0
 800596a:	601a      	str	r2, [r3, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68e0      	ldr	r0, [r4, #12]
 8005970:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005974:	4302      	orrs	r2, r0
 8005976:	605a      	str	r2, [r3, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005978:	4ab8      	ldr	r2, [pc, #736]	; (8005c5c <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800597a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800597c:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 800597e:	bf1c      	itt	ne
 8005980:	6a22      	ldrne	r2, [r4, #32]
 8005982:	4310      	orrne	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800598a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800598e:	4302      	orrs	r2, r0
 8005990:	609a      	str	r2, [r3, #8]
  
#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005992:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005994:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005996:	f020 000f 	bic.w	r0, r0, #15
 800599a:	4310      	orrs	r0, r2
 800599c:	62d8      	str	r0, [r3, #44]	; 0x2c
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800599e:	48b0      	ldr	r0, [pc, #704]	; (8005c60 <UART_SetConfig+0x314>)
 80059a0:	4283      	cmp	r3, r0
 80059a2:	d117      	bne.n	80059d4 <UART_SetConfig+0x88>
 80059a4:	4baf      	ldr	r3, [pc, #700]	; (8005c64 <UART_SetConfig+0x318>)
 80059a6:	48b0      	ldr	r0, [pc, #704]	; (8005c68 <UART_SetConfig+0x31c>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	5cc3      	ldrb	r3, [r0, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80059b6:	f040 81a7 	bne.w	8005d08 <UART_SetConfig+0x3bc>
  {
    switch (clocksource)
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d849      	bhi.n	8005a52 <UART_SetConfig+0x106>
 80059be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80059c2:	017f      	.short	0x017f
 80059c4:	016800d0 	.word	0x016800d0
 80059c8:	01780048 	.word	0x01780048
 80059cc:	00480048 	.word	0x00480048
 80059d0:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d4:	48a5      	ldr	r0, [pc, #660]	; (8005c6c <UART_SetConfig+0x320>)
 80059d6:	4283      	cmp	r3, r0
 80059d8:	d106      	bne.n	80059e8 <UART_SetConfig+0x9c>
 80059da:	4ba2      	ldr	r3, [pc, #648]	; (8005c64 <UART_SetConfig+0x318>)
 80059dc:	48a4      	ldr	r0, [pc, #656]	; (8005c70 <UART_SetConfig+0x324>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	e7e3      	b.n	80059b0 <UART_SetConfig+0x64>
 80059e8:	48a2      	ldr	r0, [pc, #648]	; (8005c74 <UART_SetConfig+0x328>)
 80059ea:	4283      	cmp	r3, r0
 80059ec:	d11d      	bne.n	8005a2a <UART_SetConfig+0xde>
 80059ee:	4b9d      	ldr	r3, [pc, #628]	; (8005c64 <UART_SetConfig+0x318>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	f000 8157 	beq.w	8005cac <UART_SetConfig+0x360>
 80059fe:	d804      	bhi.n	8005a0a <UART_SetConfig+0xbe>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8159 	beq.w	8005cb8 <UART_SetConfig+0x36c>
 8005a06:	2310      	movs	r3, #16
 8005a08:	e7d3      	b.n	80059b2 <UART_SetConfig+0x66>
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	f000 813e 	beq.w	8005c8c <UART_SetConfig+0x340>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d1f8      	bne.n	8005a06 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a14:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005a18:	f040 80d0 	bne.w	8005bbc <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1c:	4b96      	ldr	r3, [pc, #600]	; (8005c78 <UART_SetConfig+0x32c>)
 8005a1e:	6861      	ldr	r1, [r4, #4]
 8005a20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005a24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a28:	e138      	b.n	8005c9c <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a2a:	4894      	ldr	r0, [pc, #592]	; (8005c7c <UART_SetConfig+0x330>)
 8005a2c:	4283      	cmp	r3, r0
 8005a2e:	d12d      	bne.n	8005a8c <UART_SetConfig+0x140>
 8005a30:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 8005a34:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8005a38:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8005a3c:	2840      	cmp	r0, #64	; 0x40
 8005a3e:	f000 80fd 	beq.w	8005c3c <UART_SetConfig+0x2f0>
 8005a42:	d812      	bhi.n	8005a6a <UART_SetConfig+0x11e>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f000 80c0 	beq.w	8005bca <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8005a4a:	4884      	ldr	r0, [pc, #528]	; (8005c5c <UART_SetConfig+0x310>)
 8005a4c:	4283      	cmp	r3, r0
 8005a4e:	f040 8156 	bne.w	8005cfe <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
    }
  }
  
#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a54:	2201      	movs	r2, #1
 8005a56:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8005a5a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a5e:	2200      	movs	r2, #0
 8005a60:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005a62:	6762      	str	r2, [r4, #116]	; 0x74
  
  return ret;
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a6a:	2880      	cmp	r0, #128	; 0x80
 8005a6c:	f000 80bb 	beq.w	8005be6 <UART_SetConfig+0x29a>
 8005a70:	28c0      	cmp	r0, #192	; 0xc0
 8005a72:	d1ea      	bne.n	8005a4a <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8005a74:	4879      	ldr	r0, [pc, #484]	; (8005c5c <UART_SetConfig+0x310>)
 8005a76:	4283      	cmp	r3, r0
 8005a78:	d1cc      	bne.n	8005a14 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a7a:	4b7f      	ldr	r3, [pc, #508]	; (8005c78 <UART_SetConfig+0x32c>)
 8005a7c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8005a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8005a84:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a86:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8005a8a:	e0aa      	b.n	8005be2 <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a8c:	487c      	ldr	r0, [pc, #496]	; (8005c80 <UART_SetConfig+0x334>)
 8005a8e:	4283      	cmp	r3, r0
 8005a90:	d111      	bne.n	8005ab6 <UART_SetConfig+0x16a>
 8005a92:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 8005a96:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8005a9a:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8005a9e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005aa2:	f000 80cb 	beq.w	8005c3c <UART_SetConfig+0x2f0>
 8005aa6:	d9cd      	bls.n	8005a44 <UART_SetConfig+0xf8>
 8005aa8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005aac:	f000 809b 	beq.w	8005be6 <UART_SetConfig+0x29a>
 8005ab0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8005ab4:	e7dd      	b.n	8005a72 <UART_SetConfig+0x126>
 8005ab6:	4869      	ldr	r0, [pc, #420]	; (8005c5c <UART_SetConfig+0x310>)
 8005ab8:	4283      	cmp	r3, r0
 8005aba:	d1a4      	bne.n	8005a06 <UART_SetConfig+0xba>
 8005abc:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 8005ac0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8005ac4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8005ac8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005acc:	f000 80b6 	beq.w	8005c3c <UART_SetConfig+0x2f0>
 8005ad0:	d9b8      	bls.n	8005a44 <UART_SetConfig+0xf8>
 8005ad2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005ad6:	f000 8086 	beq.w	8005be6 <UART_SetConfig+0x29a>
 8005ada:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8005ade:	e7c8      	b.n	8005a72 <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae0:	f7fe f95e 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae4:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <UART_SetConfig+0x32c>)
 8005ae6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ae8:	6865      	ldr	r5, [r4, #4]
 8005aea:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005aee:	2300      	movs	r3, #0
 8005af0:	e005      	b.n	8005afe <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af2:	4b61      	ldr	r3, [pc, #388]	; (8005c78 <UART_SetConfig+0x32c>)
 8005af4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005af6:	4863      	ldr	r0, [pc, #396]	; (8005c84 <UART_SetConfig+0x338>)
 8005af8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005afc:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005afe:	2100      	movs	r1, #0
 8005b00:	f7fb f8ce 	bl	8000ca0 <__aeabi_uldivmod>
 8005b04:	020f      	lsls	r7, r1, #8
 8005b06:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005b0a:	0206      	lsls	r6, r0, #8
 8005b0c:	0868      	lsrs	r0, r5, #1
 8005b0e:	eb16 0b00 	adds.w	fp, r6, r0
 8005b12:	f147 0c00 	adc.w	ip, r7, #0
 8005b16:	462a      	mov	r2, r5
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4658      	mov	r0, fp
 8005b1c:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1e:	f7fb f8bf 	bl	8000ca0 <__aeabi_uldivmod>
          break;
 8005b22:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b24:	4a58      	ldr	r2, [pc, #352]	; (8005c88 <UART_SetConfig+0x33c>)
 8005b26:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005b2a:	4291      	cmp	r1, r2
 8005b2c:	d891      	bhi.n	8005a52 <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	60d0      	str	r0, [r2, #12]
 8005b32:	e78f      	b.n	8005a54 <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b34:	f7fd fd94 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8005b38:	e7d4      	b.n	8005ae4 <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b3c:	4b4e      	ldr	r3, [pc, #312]	; (8005c78 <UART_SetConfig+0x32c>)
 8005b3e:	0868      	lsrs	r0, r5, #1
 8005b40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005b44:	2100      	movs	r1, #0
 8005b46:	462a      	mov	r2, r5
 8005b48:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005b4c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8005b50:	fbb6 f6f3 	udiv	r6, r6, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	fbe6 0105 	umlal	r0, r1, r6, r5
 8005b5a:	e7e0      	b.n	8005b1e <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e7e0      	b.n	8005b24 <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	f7fe f92f 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8005b66:	e0ad      	b.n	8005cc4 <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b68:	f7fe f91a 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b6c:	6862      	ldr	r2, [r4, #4]
 8005b6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b70:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <UART_SetConfig+0x32c>)
 8005b72:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b76:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b7a:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8005b7e:	fbb0 f0f2 	udiv	r0, r0, r2
 8005b82:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b84:	f1a0 0210 	sub.w	r2, r0, #16
 8005b88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	f63f af60 	bhi.w	8005a52 <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	60d8      	str	r0, [r3, #12]
 8005b96:	e0b0      	b.n	8005cfa <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b98:	f7fe f914 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	e7e6      	b.n	8005b6c <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b9e:	4936      	ldr	r1, [pc, #216]	; (8005c78 <UART_SetConfig+0x32c>)
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005ba6:	4837      	ldr	r0, [pc, #220]	; (8005c84 <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ba8:	fbb0 f0f2 	udiv	r0, r0, r2
 8005bac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005bb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8005bb4:	e7e5      	b.n	8005b82 <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb6:	f7fd fd53 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8005bba:	e7d7      	b.n	8005b6c <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bbc:	492e      	ldr	r1, [pc, #184]	; (8005c78 <UART_SetConfig+0x32c>)
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005bc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005bc8:	e7ee      	b.n	8005ba8 <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 8005bca:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <UART_SetConfig+0x310>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d173      	bne.n	8005cb8 <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bd0:	f7fe f8e6 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8005bd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005bd6:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <UART_SetConfig+0x32c>)
 8005bd8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005bdc:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8005be0:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8005be2:	b953      	cbnz	r3, 8005bfa <UART_SetConfig+0x2ae>
 8005be4:	e736      	b.n	8005a54 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8005be6:	481d      	ldr	r0, [pc, #116]	; (8005c5c <UART_SetConfig+0x310>)
 8005be8:	4283      	cmp	r3, r0
 8005bea:	d14f      	bne.n	8005c8c <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bec:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <UART_SetConfig+0x32c>)
 8005bee:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <UART_SetConfig+0x338>)
 8005bf4:	fbb3 f3f0 	udiv	r3, r3, r0
 8005bf8:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8005bfa:	6865      	ldr	r5, [r4, #4]
 8005bfc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005c00:	4299      	cmp	r1, r3
 8005c02:	f63f af26 	bhi.w	8005a52 <UART_SetConfig+0x106>
 8005c06:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005c0a:	f63f af22 	bhi.w	8005a52 <UART_SetConfig+0x106>
        switch (clocksource)
 8005c0e:	2a08      	cmp	r2, #8
 8005c10:	d8a4      	bhi.n	8005b5c <UART_SetConfig+0x210>
 8005c12:	a301      	add	r3, pc, #4	; (adr r3, 8005c18 <UART_SetConfig+0x2cc>)
 8005c14:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8005c18:	08005ae1 	.word	0x08005ae1
 8005c1c:	08005b5d 	.word	0x08005b5d
 8005c20:	08005af3 	.word	0x08005af3
 8005c24:	08005b5d 	.word	0x08005b5d
 8005c28:	08005b35 	.word	0x08005b35
 8005c2c:	08005b5d 	.word	0x08005b5d
 8005c30:	08005b5d 	.word	0x08005b5d
 8005c34:	08005b5d 	.word	0x08005b5d
 8005c38:	08005b3b 	.word	0x08005b3b
  if(UART_INSTANCE_LOWPOWER(huart))
 8005c3c:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <UART_SetConfig+0x310>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d134      	bne.n	8005cac <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c42:	f7fd fd0d 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8005c46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <UART_SetConfig+0x32c>)
 8005c4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8005c52:	2204      	movs	r2, #4
 8005c54:	e7c5      	b.n	8005be2 <UART_SetConfig+0x296>
 8005c56:	bf00      	nop
 8005c58:	cfff69f3 	.word	0xcfff69f3
 8005c5c:	40008000 	.word	0x40008000
 8005c60:	40013800 	.word	0x40013800
 8005c64:	40021000 	.word	0x40021000
 8005c68:	08021520 	.word	0x08021520
 8005c6c:	40004400 	.word	0x40004400
 8005c70:	08021524 	.word	0x08021524
 8005c74:	40004800 	.word	0x40004800
 8005c78:	08021532 	.word	0x08021532
 8005c7c:	40004c00 	.word	0x40004c00
 8005c80:	40005000 	.word	0x40005000
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005c90:	d185      	bne.n	8005b9e <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c92:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <UART_SetConfig+0x3ec>)
 8005c94:	6861      	ldr	r1, [r4, #4]
 8005c96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c9a:	4828      	ldr	r0, [pc, #160]	; (8005d3c <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca0:	0848      	lsrs	r0, r1, #1
 8005ca2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8005ca6:	fbb0 f0f1 	udiv	r0, r0, r1
 8005caa:	e017      	b.n	8005cdc <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cb0:	d181      	bne.n	8005bb6 <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb2:	f7fd fcd5 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8005cb6:	e005      	b.n	8005cc4 <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cbc:	f47f af54 	bne.w	8005b68 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc0:	f7fe f86e 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc4:	6862      	ldr	r2, [r4, #4]
 8005cc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <UART_SetConfig+0x3ec>)
 8005cca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd2:	0850      	lsrs	r0, r2, #1
 8005cd4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8005cd8:	fbb0 f0f2 	udiv	r0, r0, r2
 8005cdc:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cde:	f1a0 0210 	sub.w	r2, r0, #16
 8005ce2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	f63f aeb3 	bhi.w	8005a52 <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8005cec:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8005cf0:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf2:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8005cf6:	4318      	orrs	r0, r3
 8005cf8:	60d0      	str	r0, [r2, #12]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e6aa      	b.n	8005a54 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005d02:	f43f aea6 	beq.w	8005a52 <UART_SetConfig+0x106>
 8005d06:	2310      	movs	r3, #16
    switch (clocksource)
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	f63f aea2 	bhi.w	8005a52 <UART_SetConfig+0x106>
 8005d0e:	a101      	add	r1, pc, #4	; (adr r1, 8005d14 <UART_SetConfig+0x3c8>)
 8005d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d14:	08005b69 	.word	0x08005b69
 8005d18:	08005b99 	.word	0x08005b99
 8005d1c:	08005b9f 	.word	0x08005b9f
 8005d20:	08005a53 	.word	0x08005a53
 8005d24:	08005bb7 	.word	0x08005bb7
 8005d28:	08005a53 	.word	0x08005a53
 8005d2c:	08005a53 	.word	0x08005a53
 8005d30:	08005a53 	.word	0x08005a53
 8005d34:	08005bbd 	.word	0x08005bbd
 8005d38:	08021532 	.word	0x08021532
 8005d3c:	00f42400 	.word	0x00f42400

08005d40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005d42:	07da      	lsls	r2, r3, #31
{
 8005d44:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d46:	d506      	bpl.n	8005d56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d48:	6801      	ldr	r1, [r0, #0]
 8005d4a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005d4c:	684a      	ldr	r2, [r1, #4]
 8005d4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d52:	4322      	orrs	r2, r4
 8005d54:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d56:	079c      	lsls	r4, r3, #30
 8005d58:	d506      	bpl.n	8005d68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d5a:	6801      	ldr	r1, [r0, #0]
 8005d5c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005d5e:	684a      	ldr	r2, [r1, #4]
 8005d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d64:	4322      	orrs	r2, r4
 8005d66:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d68:	0759      	lsls	r1, r3, #29
 8005d6a:	d506      	bpl.n	8005d7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d6c:	6801      	ldr	r1, [r0, #0]
 8005d6e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005d70:	684a      	ldr	r2, [r1, #4]
 8005d72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d76:	4322      	orrs	r2, r4
 8005d78:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d7a:	071a      	lsls	r2, r3, #28
 8005d7c:	d506      	bpl.n	8005d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d7e:	6801      	ldr	r1, [r0, #0]
 8005d80:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005d82:	684a      	ldr	r2, [r1, #4]
 8005d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d88:	4322      	orrs	r2, r4
 8005d8a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d8c:	06dc      	lsls	r4, r3, #27
 8005d8e:	d506      	bpl.n	8005d9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d90:	6801      	ldr	r1, [r0, #0]
 8005d92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005d94:	688a      	ldr	r2, [r1, #8]
 8005d96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d9a:	4322      	orrs	r2, r4
 8005d9c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d9e:	0699      	lsls	r1, r3, #26
 8005da0:	d506      	bpl.n	8005db0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005da2:	6801      	ldr	r1, [r0, #0]
 8005da4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005da6:	688a      	ldr	r2, [r1, #8]
 8005da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dac:	4322      	orrs	r2, r4
 8005dae:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005db0:	065a      	lsls	r2, r3, #25
 8005db2:	d50f      	bpl.n	8005dd4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db4:	6801      	ldr	r1, [r0, #0]
 8005db6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005db8:	684a      	ldr	r2, [r1, #4]
 8005dba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005dbe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dc4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc6:	d105      	bne.n	8005dd4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dc8:	684a      	ldr	r2, [r1, #4]
 8005dca:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005dcc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005dd0:	4322      	orrs	r2, r4
 8005dd2:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	d506      	bpl.n	8005de6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd8:	6802      	ldr	r2, [r0, #0]
 8005dda:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005ddc:	6853      	ldr	r3, [r2, #4]
 8005dde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005de2:	430b      	orrs	r3, r1
 8005de4:	6053      	str	r3, [r2, #4]
 8005de6:	bd10      	pop	{r4, pc}

08005de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dec:	9d06      	ldr	r5, [sp, #24]
 8005dee:	4604      	mov	r4, r0
 8005df0:	460f      	mov	r7, r1
 8005df2:	4616      	mov	r6, r2
 8005df4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df6:	6821      	ldr	r1, [r4, #0]
 8005df8:	69ca      	ldr	r2, [r1, #28]
 8005dfa:	ea37 0302 	bics.w	r3, r7, r2
 8005dfe:	bf0c      	ite	eq
 8005e00:	2201      	moveq	r2, #1
 8005e02:	2200      	movne	r2, #0
 8005e04:	42b2      	cmp	r2, r6
 8005e06:	d002      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005e08:	2000      	movs	r0, #0
}
 8005e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8005e0e:	1c6b      	adds	r3, r5, #1
 8005e10:	d0f2      	beq.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005e12:	b99d      	cbnz	r5, 8005e3c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005e26:	2320      	movs	r3, #32
 8005e28:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8005e30:	2300      	movs	r3, #0
 8005e32:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8005e36:	2003      	movs	r0, #3
 8005e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005e3c:	f7fb f8e8 	bl	8001010 <HAL_GetTick>
 8005e40:	eba0 0008 	sub.w	r0, r0, r8
 8005e44:	4285      	cmp	r5, r0
 8005e46:	d2d6      	bcs.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xe>
 8005e48:	e7e4      	b.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x2c>

08005e4a <UART_CheckIdleState>:
{
 8005e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e4c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4e:	2600      	movs	r6, #0
 8005e50:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8005e54:	f7fb f8dc 	bl	8001010 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005e5e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e60:	d417      	bmi.n	8005e92 <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	075b      	lsls	r3, r3, #29
 8005e68:	d50a      	bpl.n	8005e80 <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2200      	movs	r2, #0
 8005e72:	462b      	mov	r3, r5
 8005e74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f7ff ffb5 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005e7e:	b9a0      	cbnz	r0, 8005eaa <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8005e80:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005e82:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8005e84:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8005e88:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8005e8c:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8005e90:	e00c      	b.n	8005eac <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4632      	mov	r2, r6
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff ffa1 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0db      	beq.n	8005e62 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005eaa:	2003      	movs	r0, #3
}
 8005eac:	b002      	add	sp, #8
 8005eae:	bd70      	pop	{r4, r5, r6, pc}

08005eb0 <HAL_UART_Init>:
{
 8005eb0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	b360      	cbz	r0, 8005f10 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8005eb6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005eba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ebe:	b91b      	cbnz	r3, 8005ec8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005ec0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005ec4:	f018 fc5c 	bl	801e780 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005ec8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005eca:	2324      	movs	r3, #36	; 0x24
 8005ecc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 8005ed0:	6813      	ldr	r3, [r2, #0]
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff fd37 	bl	800594c <UART_SetConfig>
 8005ede:	2801      	cmp	r0, #1
 8005ee0:	d016      	beq.n	8005f10 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ee4:	b113      	cbz	r3, 8005eec <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f7ff ff2a 	bl	8005d40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005f04:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005f06:	601a      	str	r2, [r3, #0]
}
 8005f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005f0c:	f7ff bf9d 	b.w	8005e4a <UART_CheckIdleState>
}
 8005f10:	2001      	movs	r0, #1
 8005f12:	bd10      	pop	{r4, pc}

08005f14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8005f16:	2203      	movs	r2, #3
 8005f18:	f88d 2003 	strb.w	r2, [sp, #3]
 8005f1c:	2207      	movs	r2, #7
 8005f1e:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8005f22:	2208      	movs	r2, #8
 8005f24:	f88d 2008 	strb.w	r2, [sp, #8]
 8005f28:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f2c:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8005f2e:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8005f30:	2104      	movs	r1, #4
 8005f32:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8005f34:	f88d 3000 	strb.w	r3, [sp]
 8005f38:	f88d 3001 	strb.w	r3, [sp, #1]
 8005f3c:	f88d 3002 	strb.w	r3, [sp, #2]
 8005f40:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8005f44:	f88d 1009 	strb.w	r1, [sp, #9]
 8005f48:	f88d 400a 	strb.w	r4, [sp, #10]
 8005f4c:	f88d 100b 	strb.w	r1, [sp, #11]
 8005f50:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f54:	b92a      	cbnz	r2, 8005f62 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 8005f56:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8005f5a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8005f5e:	b004      	add	sp, #16
 8005f60:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f62:	6803      	ldr	r3, [r0, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f66:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8005f68:	ab04      	add	r3, sp, #16
 8005f6a:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8005f6e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8005f72:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8005f76:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f82:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8005f86:	ab04      	add	r3, sp, #16
 8005f88:	441a      	add	r2, r3
 8005f8a:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8005f8e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f9a:	e7de      	b.n	8005f5a <UARTEx_SetNbDataToProcess+0x46>

08005f9c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005f9c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005f9e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005fa2:	2b01      	cmp	r3, #1
{
 8005fa4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005fa6:	d01b      	beq.n	8005fe0 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005fae:	2324      	movs	r3, #36	; 0x24
 8005fb0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb4:	6803      	ldr	r3, [r0, #0]
 8005fb6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005fc6:	4311      	orrs	r1, r2
 8005fc8:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005fca:	f7ff ffa3 	bl	8005f14 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fce:	6803      	ldr	r3, [r0, #0]
 8005fd0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005fe0:	2002      	movs	r0, #2
}
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}

08005fe4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005fe4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005fe6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005fea:	2b01      	cmp	r3, #1
{
 8005fec:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005fee:	d01b      	beq.n	8006028 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005ff6:	2324      	movs	r3, #36	; 0x24
 8005ff8:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ffc:	6803      	ldr	r3, [r0, #0]
 8005ffe:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800600e:	4311      	orrs	r1, r2
 8006010:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006012:	f7ff ff7f 	bl	8005f14 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006016:	6803      	ldr	r3, [r0, #0]
 8006018:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800601a:	2320      	movs	r3, #32
 800601c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006020:	2000      	movs	r0, #0
 8006022:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006026:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006028:	2002      	movs	r0, #2
}
 800602a:	bd38      	pop	{r3, r4, r5, pc}

0800602c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <SDMMC_GetCmdResp2+0x48>)
 800602e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	fbb3 f2f2 	udiv	r2, r3, r2
 8006038:	f241 3388 	movw	r3, #5000	; 0x1388
 800603c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800603e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006042:	d313      	bcc.n	800606c <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006044:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006046:	f012 0f45 	tst.w	r2, #69	; 0x45
 800604a:	d0f8      	beq.n	800603e <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800604c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800604e:	075b      	lsls	r3, r3, #29
 8006050:	d503      	bpl.n	800605a <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006052:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006054:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8006056:	4618      	mov	r0, r3
 8006058:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800605a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800605c:	f013 0301 	ands.w	r3, r3, #1
 8006060:	d001      	beq.n	8006066 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006062:	2301      	movs	r3, #1
 8006064:	e7f6      	b.n	8006054 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006066:	4a04      	ldr	r2, [pc, #16]	; (8006078 <SDMMC_GetCmdResp2+0x4c>)
 8006068:	6382      	str	r2, [r0, #56]	; 0x38
 800606a:	e7f4      	b.n	8006056 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800606c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006070:	e7f1      	b.n	8006056 <SDMMC_GetCmdResp2+0x2a>
 8006072:	bf00      	nop
 8006074:	20000a58 	.word	0x20000a58
 8006078:	002000c5 	.word	0x002000c5

0800607c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800607c:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <SDMMC_GetCmdResp3+0x3c>)
 800607e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	fbb3 f2f2 	udiv	r2, r3, r2
 8006088:	f241 3388 	movw	r3, #5000	; 0x1388
 800608c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800608e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006092:	d30d      	bcc.n	80060b0 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006094:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006096:	f012 0f45 	tst.w	r2, #69	; 0x45
 800609a:	d0f8      	beq.n	800608e <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800609c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800609e:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80060a2:	bf15      	itete	ne
 80060a4:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060a6:	4a05      	ldreq	r2, [pc, #20]	; (80060bc <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80060a8:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060aa:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80060ac:	4618      	mov	r0, r3
 80060ae:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80060b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000a58 	.word	0x20000a58
 80060bc:	002000c5 	.word	0x002000c5

080060c0 <SDMMC_Init>:
{
 80060c0:	b084      	sub	sp, #16
 80060c2:	b510      	push	{r4, lr}
 80060c4:	ac03      	add	r4, sp, #12
 80060c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80060ca:	9a04      	ldr	r2, [sp, #16]
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	6841      	ldr	r1, [r0, #4]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	9a05      	ldr	r2, [sp, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	9a06      	ldr	r2, [sp, #24]
 80060d8:	4313      	orrs	r3, r2
 80060da:	9a07      	ldr	r2, [sp, #28]
}
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80060e0:	4313      	orrs	r3, r2
 80060e2:	4a03      	ldr	r2, [pc, #12]	; (80060f0 <SDMMC_Init+0x30>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	4313      	orrs	r3, r2
 80060e8:	6043      	str	r3, [r0, #4]
}
 80060ea:	b004      	add	sp, #16
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr
 80060f0:	fffc2c00 	.word	0xfffc2c00

080060f4 <SDMMC_ReadFIFO>:
 80060f4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80060f8:	4770      	bx	lr

080060fa <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80060fa:	6803      	ldr	r3, [r0, #0]
 80060fc:	f043 0303 	orr.w	r3, r3, #3
 8006100:	6003      	str	r3, [r0, #0]
}
 8006102:	2000      	movs	r0, #0
 8006104:	4770      	bx	lr

08006106 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8006106:	6803      	ldr	r3, [r0, #0]
 8006108:	f023 0303 	bic.w	r3, r3, #3
 800610c:	6003      	str	r3, [r0, #0]
}
 800610e:	2000      	movs	r0, #0
 8006110:	4770      	bx	lr

08006112 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006112:	6800      	ldr	r0, [r0, #0]
}
 8006114:	f000 0003 	and.w	r0, r0, #3
 8006118:	4770      	bx	lr
	...

0800611c <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800611c:	680b      	ldr	r3, [r1, #0]
 800611e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8006120:	68c2      	ldr	r2, [r0, #12]
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <SDMMC_SendCommand+0x20>)
 8006124:	4013      	ands	r3, r2
 8006126:	684a      	ldr	r2, [r1, #4]
 8006128:	4313      	orrs	r3, r2
 800612a:	688a      	ldr	r2, [r1, #8]
 800612c:	4313      	orrs	r3, r2
 800612e:	68ca      	ldr	r2, [r1, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	690a      	ldr	r2, [r1, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	60c3      	str	r3, [r0, #12]
}
 8006138:	2000      	movs	r0, #0
 800613a:	4770      	bx	lr
 800613c:	fffee0c0 	.word	0xfffee0c0

08006140 <SDMMC_GetResponse>:
{
 8006140:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006142:	3014      	adds	r0, #20
 8006144:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800614a:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800614c:	9b01      	ldr	r3, [sp, #4]
 800614e:	6818      	ldr	r0, [r3, #0]
}  
 8006150:	b002      	add	sp, #8
 8006152:	4770      	bx	lr

08006154 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006154:	4b44      	ldr	r3, [pc, #272]	; (8006268 <SDMMC_GetCmdResp1+0x114>)
{
 8006156:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800615e:	fbb3 f3f4 	udiv	r3, r3, r4
 8006162:	435a      	muls	r2, r3
    if (count-- == 0)
 8006164:	2a00      	cmp	r2, #0
 8006166:	d049      	beq.n	80061fc <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8006168:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800616a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800616e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006172:	d0f7      	beq.n	8006164 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006174:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006176:	075c      	lsls	r4, r3, #29
 8006178:	d503      	bpl.n	8006182 <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800617a:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800617c:	6383      	str	r3, [r0, #56]	; 0x38
}
 800617e:	4618      	mov	r0, r3
 8006180:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006182:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006184:	f013 0301 	ands.w	r3, r3, #1
 8006188:	d001      	beq.n	800618e <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800618a:	2301      	movs	r3, #1
 800618c:	e7f6      	b.n	800617c <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 800618e:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	4291      	cmp	r1, r2
 8006194:	d135      	bne.n	8006202 <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006196:	4a35      	ldr	r2, [pc, #212]	; (800626c <SDMMC_GetCmdResp1+0x118>)
 8006198:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800619a:	4619      	mov	r1, r3
 800619c:	f7ff ffd0 	bl	8006140 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80061a0:	4b33      	ldr	r3, [pc, #204]	; (8006270 <SDMMC_GetCmdResp1+0x11c>)
 80061a2:	4003      	ands	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0ea      	beq.n	800617e <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80061a8:	2800      	cmp	r0, #0
 80061aa:	db2c      	blt.n	8006206 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80061ac:	0042      	lsls	r2, r0, #1
 80061ae:	d42d      	bmi.n	800620c <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80061b0:	0084      	lsls	r4, r0, #2
 80061b2:	d42d      	bmi.n	8006210 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80061b4:	00c1      	lsls	r1, r0, #3
 80061b6:	d42d      	bmi.n	8006214 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80061b8:	0102      	lsls	r2, r0, #4
 80061ba:	d42e      	bmi.n	800621a <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80061bc:	0144      	lsls	r4, r0, #5
 80061be:	d42f      	bmi.n	8006220 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80061c0:	01c1      	lsls	r1, r0, #7
 80061c2:	d430      	bmi.n	8006226 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80061c4:	0202      	lsls	r2, r0, #8
 80061c6:	d431      	bmi.n	800622c <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80061c8:	0244      	lsls	r4, r0, #9
 80061ca:	d432      	bmi.n	8006232 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80061cc:	0281      	lsls	r1, r0, #10
 80061ce:	d433      	bmi.n	8006238 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80061d0:	02c2      	lsls	r2, r0, #11
 80061d2:	d434      	bmi.n	800623e <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80061d4:	0344      	lsls	r4, r0, #13
 80061d6:	d435      	bmi.n	8006244 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80061d8:	0381      	lsls	r1, r0, #14
 80061da:	d436      	bmi.n	800624a <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80061dc:	03c2      	lsls	r2, r0, #15
 80061de:	d437      	bmi.n	8006250 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80061e0:	0404      	lsls	r4, r0, #16
 80061e2:	d438      	bmi.n	8006256 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80061e4:	0441      	lsls	r1, r0, #17
 80061e6:	d439      	bmi.n	800625c <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80061e8:	0482      	lsls	r2, r0, #18
 80061ea:	d43a      	bmi.n	8006262 <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061ec:	f010 0f08 	tst.w	r0, #8
 80061f0:	bf14      	ite	ne
 80061f2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80061f6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80061fa:	e7c0      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80061fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006200:	e7bd      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006202:	2301      	movs	r3, #1
 8006204:	e7bb      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800620a:	e7b8      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	e7b6      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	e7b4      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006218:	e7b1      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800621a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800621e:	e7ae      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006224:	e7ab      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800622a:	e7a8      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800622c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006230:	e7a5      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006236:	e7a2      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006238:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800623c:	e79f      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 800623e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006242:	e79c      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006248:	e799      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800624a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800624e:	e796      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006254:	e793      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006256:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800625a:	e790      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800625c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006260:	e78d      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8006262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006266:	e78a      	b.n	800617e <SDMMC_GetCmdResp1+0x2a>
 8006268:	20000a58 	.word	0x20000a58
 800626c:	002000c5 	.word	0x002000c5
 8006270:	fdffe008 	.word	0xfdffe008

08006274 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006274:	680b      	ldr	r3, [r1, #0]
 8006276:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8006278:	684b      	ldr	r3, [r1, #4]
 800627a:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 800627c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800627e:	688a      	ldr	r2, [r1, #8]
 8006280:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006284:	4313      	orrs	r3, r2
 8006286:	68ca      	ldr	r2, [r1, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	690a      	ldr	r2, [r1, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	694a      	ldr	r2, [r1, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8006294:	2000      	movs	r0, #0
 8006296:	4770      	bx	lr

08006298 <SDMMC_CmdBlockLength>:
{
 8006298:	b530      	push	{r4, r5, lr}
 800629a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800629c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062a0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062a2:	2300      	movs	r3, #0
{
 80062a4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80062a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80062a8:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062aa:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062ac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80062b4:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062b6:	f7ff ff31 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80062ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80062be:	4621      	mov	r1, r4
 80062c0:	4628      	mov	r0, r5
 80062c2:	f7ff ff47 	bl	8006154 <SDMMC_GetCmdResp1>
}
 80062c6:	b007      	add	sp, #28
 80062c8:	bd30      	pop	{r4, r5, pc}

080062ca <SDMMC_CmdReadSingleBlock>:
{
 80062ca:	b530      	push	{r4, r5, lr}
 80062cc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062d4:	2300      	movs	r3, #0
{
 80062d6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80062d8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80062da:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062dc:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062de:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80062e6:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062e8:	f7ff ff18 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80062ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f0:	4621      	mov	r1, r4
 80062f2:	4628      	mov	r0, r5
 80062f4:	f7ff ff2e 	bl	8006154 <SDMMC_GetCmdResp1>
}
 80062f8:	b007      	add	sp, #28
 80062fa:	bd30      	pop	{r4, r5, pc}

080062fc <SDMMC_CmdReadMultiBlock>:
{
 80062fc:	b530      	push	{r4, r5, lr}
 80062fe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006304:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006306:	2300      	movs	r3, #0
{
 8006308:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800630a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800630c:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800630e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006310:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006316:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006318:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800631a:	f7ff feff 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800631e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006322:	4621      	mov	r1, r4
 8006324:	4628      	mov	r0, r5
 8006326:	f7ff ff15 	bl	8006154 <SDMMC_GetCmdResp1>
}
 800632a:	b007      	add	sp, #28
 800632c:	bd30      	pop	{r4, r5, pc}

0800632e <SDMMC_CmdWriteSingleBlock>:
{
 800632e:	b530      	push	{r4, r5, lr}
 8006330:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006336:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006338:	2300      	movs	r3, #0
{
 800633a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800633c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800633e:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006340:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006342:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006348:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800634a:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800634c:	f7ff fee6 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006350:	f241 3288 	movw	r2, #5000	; 0x1388
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f7ff fefc 	bl	8006154 <SDMMC_GetCmdResp1>
}
 800635c:	b007      	add	sp, #28
 800635e:	bd30      	pop	{r4, r5, pc}

08006360 <SDMMC_CmdWriteMultiBlock>:
{
 8006360:	b530      	push	{r4, r5, lr}
 8006362:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006368:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800636a:	2300      	movs	r3, #0
{
 800636c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800636e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006370:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006372:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006374:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800637a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800637c:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800637e:	f7ff fecd 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4621      	mov	r1, r4
 8006388:	4628      	mov	r0, r5
 800638a:	f7ff fee3 	bl	8006154 <SDMMC_GetCmdResp1>
}
 800638e:	b007      	add	sp, #28
 8006390:	bd30      	pop	{r4, r5, pc}

08006392 <SDMMC_CmdSelDesel>:
{
 8006392:	b530      	push	{r4, r5, lr}
 8006394:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800639a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800639c:	2300      	movs	r3, #0
{
 800639e:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80063a0:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063a2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063a4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80063aa:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063ac:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80063ae:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063b0:	f7ff feb4 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80063b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b8:	4621      	mov	r1, r4
 80063ba:	4628      	mov	r0, r5
 80063bc:	f7ff feca 	bl	8006154 <SDMMC_GetCmdResp1>
}
 80063c0:	b007      	add	sp, #28
 80063c2:	bd30      	pop	{r4, r5, pc}

080063c4 <SDMMC_CmdGoIdleState>:
{
 80063c4:	b510      	push	{r4, lr}
 80063c6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80063cc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80063ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063d0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063d8:	9305      	str	r3, [sp, #20]
{
 80063da:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063dc:	f7ff fe9e 	bl	800611c <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <SDMMC_CmdGoIdleState+0x4c>)
 80063e2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80063f0:	4353      	muls	r3, r2
    if (count-- == 0)
 80063f2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80063f6:	d307      	bcc.n	8006408 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80063f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80063fa:	0612      	lsls	r2, r2, #24
 80063fc:	d5f9      	bpl.n	80063f2 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <SDMMC_CmdGoIdleState+0x50>)
 8006400:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8006402:	2000      	movs	r0, #0
}
 8006404:	b006      	add	sp, #24
 8006406:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8006408:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800640c:	e7fa      	b.n	8006404 <SDMMC_CmdGoIdleState+0x40>
 800640e:	bf00      	nop
 8006410:	20000a58 	.word	0x20000a58
 8006414:	002000c5 	.word	0x002000c5

08006418 <SDMMC_CmdOperCond>:
{
 8006418:	b510      	push	{r4, lr}
 800641a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800641c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006420:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006422:	2308      	movs	r3, #8
 8006424:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800642a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800642c:	2300      	movs	r3, #0
 800642e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006430:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006436:	9305      	str	r3, [sp, #20]
{
 8006438:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800643a:	f7ff fe6f 	bl	800611c <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800643e:	4b14      	ldr	r3, [pc, #80]	; (8006490 <SDMMC_CmdOperCond+0x78>)
 8006440:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	fbb3 f2f2 	udiv	r2, r3, r2
 800644a:	f241 3388 	movw	r3, #5000	; 0x1388
 800644e:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8006450:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006454:	d318      	bcc.n	8006488 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006456:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006458:	f012 0f45 	tst.w	r2, #69	; 0x45
 800645c:	d0f8      	beq.n	8006450 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800645e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006460:	075b      	lsls	r3, r3, #29
 8006462:	d503      	bpl.n	800646c <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006464:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006466:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006468:	b006      	add	sp, #24
 800646a:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800646c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800646e:	f012 0201 	ands.w	r2, r2, #1
 8006472:	d001      	beq.n	8006478 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006474:	2001      	movs	r0, #1
 8006476:	e7f6      	b.n	8006466 <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006478:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800647a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800647e:	d0f3      	beq.n	8006468 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006480:	2340      	movs	r3, #64	; 0x40
 8006482:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006484:	4610      	mov	r0, r2
 8006486:	e7ef      	b.n	8006468 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8006488:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800648c:	e7ec      	b.n	8006468 <SDMMC_CmdOperCond+0x50>
 800648e:	bf00      	nop
 8006490:	20000a58 	.word	0x20000a58

08006494 <SDMMC_CmdAppCommand>:
{
 8006494:	b530      	push	{r4, r5, lr}
 8006496:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800649c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800649e:	2300      	movs	r3, #0
{
 80064a0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80064a2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80064a4:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064a6:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064a8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ae:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80064b0:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064b2:	f7ff fe33 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80064b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	f7ff fe49 	bl	8006154 <SDMMC_GetCmdResp1>
}
 80064c2:	b007      	add	sp, #28
 80064c4:	bd30      	pop	{r4, r5, pc}

080064c6 <SDMMC_CmdAppOperCommand>:
{
 80064c6:	b510      	push	{r4, lr}
 80064c8:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80064ca:	2329      	movs	r3, #41	; 0x29
 80064cc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064d4:	2300      	movs	r3, #0
{
 80064d6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80064d8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064da:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064dc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064e2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064e4:	f7ff fe1a 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80064e8:	4620      	mov	r0, r4
 80064ea:	f7ff fdc7 	bl	800607c <SDMMC_GetCmdResp3>
}
 80064ee:	b006      	add	sp, #24
 80064f0:	bd10      	pop	{r4, pc}

080064f2 <SDMMC_CmdSendSCR>:
{
 80064f2:	b530      	push	{r4, r5, lr}
 80064f4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80064f6:	2300      	movs	r3, #0
{
 80064f8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 80064fa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80064fc:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064fe:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006502:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006504:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800650a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800650c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800650e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006510:	f7ff fe04 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4621      	mov	r1, r4
 800651a:	4628      	mov	r0, r5
 800651c:	f7ff fe1a 	bl	8006154 <SDMMC_GetCmdResp1>
}
 8006520:	b007      	add	sp, #28
 8006522:	bd30      	pop	{r4, r5, pc}

08006524 <SDMMC_CmdSendCID>:
{
 8006524:	b510      	push	{r4, lr}
 8006526:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8006528:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800652a:	2202      	movs	r2, #2
{
 800652c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800652e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006530:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006532:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006534:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800653c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800653e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006540:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006542:	f7ff fdeb 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006546:	4620      	mov	r0, r4
 8006548:	f7ff fd70 	bl	800602c <SDMMC_GetCmdResp2>
}
 800654c:	b006      	add	sp, #24
 800654e:	bd10      	pop	{r4, pc}

08006550 <SDMMC_CmdSendCSD>:
{
 8006550:	b510      	push	{r4, lr}
 8006552:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006554:	2309      	movs	r3, #9
 8006556:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800655c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800655e:	2300      	movs	r3, #0
{
 8006560:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8006562:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006564:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006566:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800656c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800656e:	f7ff fdd5 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006572:	4620      	mov	r0, r4
 8006574:	f7ff fd5a 	bl	800602c <SDMMC_GetCmdResp2>
}
 8006578:	b006      	add	sp, #24
 800657a:	bd10      	pop	{r4, pc}

0800657c <SDMMC_CmdSetRelAdd>:
{
 800657c:	b530      	push	{r4, r5, lr}
 800657e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8006580:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006582:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 8006584:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006586:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006588:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800658a:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800658e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 8006592:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006594:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006596:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006598:	9305      	str	r3, [sp, #20]
{
 800659a:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800659c:	f7ff fdbe 	bl	800611c <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <SDMMC_CmdSetRelAdd+0xa4>)
 80065a2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80065ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80065b0:	4353      	muls	r3, r2
    if (count-- == 0)
 80065b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80065b6:	d32a      	bcc.n	800660e <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80065b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80065ba:	f012 0f45 	tst.w	r2, #69	; 0x45
 80065be:	d0f8      	beq.n	80065b2 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065c2:	075a      	lsls	r2, r3, #29
 80065c4:	d503      	bpl.n	80065ce <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065c6:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80065c8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80065ca:	b007      	add	sp, #28
 80065cc:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80065ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065d0:	f011 0101 	ands.w	r1, r1, #1
 80065d4:	d001      	beq.n	80065da <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80065d6:	2001      	movs	r0, #1
 80065d8:	e7f6      	b.n	80065c8 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 80065da:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d118      	bne.n	8006614 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <SDMMC_CmdSetRelAdd+0xa8>)
 80065e4:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff fdaa 	bl	8006140 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80065ec:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 80065f0:	d103      	bne.n	80065fa <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80065f2:	0c00      	lsrs	r0, r0, #16
 80065f4:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 80065f6:	4618      	mov	r0, r3
 80065f8:	e7e7      	b.n	80065ca <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80065fa:	0443      	lsls	r3, r0, #17
 80065fc:	d40c      	bmi.n	8006618 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065fe:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8006602:	bf14      	ite	ne
 8006604:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8006608:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800660c:	e7dd      	b.n	80065ca <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 800660e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006612:	e7da      	b.n	80065ca <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006614:	2001      	movs	r0, #1
 8006616:	e7d8      	b.n	80065ca <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006618:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800661c:	e7d5      	b.n	80065ca <SDMMC_CmdSetRelAdd+0x4e>
 800661e:	bf00      	nop
 8006620:	20000a58 	.word	0x20000a58
 8006624:	002000c5 	.word	0x002000c5

08006628 <SDMMC_CmdSendStatus>:
{
 8006628:	b530      	push	{r4, r5, lr}
 800662a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800662c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006630:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006632:	2300      	movs	r3, #0
{
 8006634:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8006636:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006638:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800663a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800663c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800663e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006642:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006644:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006646:	f7ff fd69 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800664a:	f241 3288 	movw	r2, #5000	; 0x1388
 800664e:	4621      	mov	r1, r4
 8006650:	4628      	mov	r0, r5
 8006652:	f7ff fd7f 	bl	8006154 <SDMMC_GetCmdResp1>
}
 8006656:	b007      	add	sp, #28
 8006658:	bd30      	pop	{r4, r5, pc}

0800665a <SDMMC_CmdSwitch>:
{
 800665a:	b530      	push	{r4, r5, lr}
 800665c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800665e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006662:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006664:	2300      	movs	r3, #0
{
 8006666:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8006668:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800666a:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800666c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800666e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006674:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8006676:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006678:	f7ff fd50 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800667c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006680:	4621      	mov	r1, r4
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff fd66 	bl	8006154 <SDMMC_GetCmdResp1>
}
 8006688:	b007      	add	sp, #28
 800668a:	bd30      	pop	{r4, r5, pc}

0800668c <SDMMC_CmdBusWidth>:
 800668c:	f7ff bfe5 	b.w	800665a <SDMMC_CmdSwitch>

08006690 <SDMMC_CmdVoltageSwitch>:
{
 8006690:	b530      	push	{r4, r5, lr}
 8006692:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 8006694:	2300      	movs	r3, #0
{
 8006696:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8006698:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800669a:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800669c:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066a0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066a2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066a8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066aa:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80066ac:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066ae:	f7ff fd35 	bl	800611c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80066b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b6:	4621      	mov	r1, r4
 80066b8:	4628      	mov	r0, r5
 80066ba:	f7ff fd4b 	bl	8006154 <SDMMC_GetCmdResp1>
}
 80066be:	b007      	add	sp, #28
 80066c0:	bd30      	pop	{r4, r5, pc}
	...

080066c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066c6:	3b01      	subs	r3, #1
 80066c8:	d101      	bne.n	80066ce <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80066ca:	2003      	movs	r0, #3
 80066cc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ce:	6902      	ldr	r2, [r0, #16]
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	daf8      	bge.n	80066c6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066d4:	6903      	ldr	r3, [r0, #16]
 80066d6:	4a06      	ldr	r2, [pc, #24]	; (80066f0 <USB_CoreReset+0x2c>)
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80066de:	3a01      	subs	r2, #1
 80066e0:	d0f3      	beq.n	80066ca <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066e2:	6903      	ldr	r3, [r0, #16]
 80066e4:	f013 0301 	ands.w	r3, r3, #1
 80066e8:	d1f9      	bne.n	80066de <USB_CoreReset+0x1a>

  return HAL_OK;
 80066ea:	4618      	mov	r0, r3
}
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	00030d41 	.word	0x00030d41

080066f4 <USB_CoreInit>:
{
 80066f4:	b084      	sub	sp, #16
 80066f6:	b538      	push	{r3, r4, r5, lr}
 80066f8:	ad05      	add	r5, sp, #20
 80066fa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006700:	2b01      	cmp	r3, #1
{
 8006702:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006704:	d11b      	bne.n	800673e <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006706:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800670e:	68c3      	ldr	r3, [r0, #12]
 8006710:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800671a:	68c3      	ldr	r3, [r0, #12]
 800671c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006720:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8006722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006724:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006726:	bf02      	ittt	eq
 8006728:	68c3      	ldreq	r3, [r0, #12]
 800672a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800672e:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8006730:	f7ff ffc8 	bl	80066c4 <USB_CoreReset>
}
 8006734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006738:	2000      	movs	r0, #0
 800673a:	b004      	add	sp, #16
 800673c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800673e:	68c3      	ldr	r3, [r0, #12]
 8006740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006744:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8006746:	f7ff ffbd 	bl	80066c4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800674a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800674e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006750:	e7f0      	b.n	8006734 <USB_CoreInit+0x40>

08006752 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006752:	6883      	ldr	r3, [r0, #8]
 8006754:	f043 0301 	orr.w	r3, r3, #1
 8006758:	6083      	str	r3, [r0, #8]
}
 800675a:	2000      	movs	r0, #0
 800675c:	4770      	bx	lr

0800675e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800675e:	6883      	ldr	r3, [r0, #8]
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6083      	str	r3, [r0, #8]
}
 8006766:	2000      	movs	r0, #0
 8006768:	4770      	bx	lr

0800676a <USB_SetCurrentMode>:
{
 800676a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800676c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800676e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006770:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006774:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006776:	d108      	bne.n	800678a <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006778:	68c3      	ldr	r3, [r0, #12]
 800677a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800677e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8006780:	2032      	movs	r0, #50	; 0x32
 8006782:	f7fa fc4b 	bl	800101c <HAL_Delay>
  return HAL_OK;
 8006786:	2000      	movs	r0, #0
 8006788:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800678a:	b919      	cbnz	r1, 8006794 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800678c:	68c3      	ldr	r3, [r0, #12]
 800678e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006792:	e7f4      	b.n	800677e <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8006794:	2001      	movs	r0, #1
}
 8006796:	bd08      	pop	{r3, pc}

08006798 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006798:	0189      	lsls	r1, r1, #6
 800679a:	f041 0120 	orr.w	r1, r1, #32
 800679e:	4a06      	ldr	r2, [pc, #24]	; (80067b8 <USB_FlushTxFifo+0x20>)
 80067a0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80067a2:	3a01      	subs	r2, #1
 80067a4:	d005      	beq.n	80067b2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067a6:	6903      	ldr	r3, [r0, #16]
 80067a8:	f013 0320 	ands.w	r3, r3, #32
 80067ac:	d1f9      	bne.n	80067a2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80067ae:	4618      	mov	r0, r3
 80067b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80067b2:	2003      	movs	r0, #3
}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	00030d41 	.word	0x00030d41

080067bc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067bc:	2310      	movs	r3, #16
 80067be:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <USB_FlushRxFifo+0x1c>)
 80067c0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80067c2:	3a01      	subs	r2, #1
 80067c4:	d005      	beq.n	80067d2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067c6:	6903      	ldr	r3, [r0, #16]
 80067c8:	f013 0310 	ands.w	r3, r3, #16
 80067cc:	d1f9      	bne.n	80067c2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80067ce:	4618      	mov	r0, r3
 80067d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80067d2:	2003      	movs	r0, #3
}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	00030d41 	.word	0x00030d41

080067dc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80067dc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80067e0:	4319      	orrs	r1, r3
 80067e2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80067e6:	2000      	movs	r0, #0
 80067e8:	4770      	bx	lr
	...

080067ec <USB_DevInit>:
{
 80067ec:	b084      	sub	sp, #16
 80067ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	a807      	add	r0, sp, #28
 80067f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80067fa:	2300      	movs	r3, #0
 80067fc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80067fe:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8006800:	4619      	mov	r1, r3
 8006802:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006806:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800680a:	3301      	adds	r3, #1
 800680c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800680e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006810:	d1f7      	bne.n	8006802 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006818:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800681a:	b95f      	cbnz	r7, 8006834 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800681c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800681e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006822:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800682a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006832:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8006834:	2500      	movs	r5, #0
 8006836:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800683a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800683e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006842:	2103      	movs	r1, #3
 8006844:	4620      	mov	r0, r4
 8006846:	f7ff ffc9 	bl	80067dc <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800684a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800684e:	2110      	movs	r1, #16
 8006850:	4620      	mov	r0, r4
 8006852:	f7ff ffa1 	bl	8006798 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006856:	4620      	mov	r0, r4
 8006858:	f7ff ffb0 	bl	80067bc <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 800685c:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685e:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8006860:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8006862:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8006864:	61f5      	str	r5, [r6, #28]
 8006866:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800686a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800686e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006872:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006876:	4543      	cmp	r3, r8
 8006878:	d12f      	bne.n	80068da <USB_DevInit+0xee>
 800687a:	2100      	movs	r1, #0
 800687c:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006880:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006882:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006886:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800688a:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688e:	428b      	cmp	r3, r1
 8006890:	d134      	bne.n	80068fc <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006892:	6933      	ldr	r3, [r6, #16]
 8006894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006898:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800689e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80068a2:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068a4:	69a3      	ldr	r3, [r4, #24]
 80068a6:	f043 0310 	orr.w	r3, r3, #16
 80068aa:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068ac:	69a2      	ldr	r2, [r4, #24]
 80068ae:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <USB_DevInit+0x134>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80068b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068b6:	b11b      	cbz	r3, 80068c0 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068b8:	69a3      	ldr	r3, [r4, #24]
 80068ba:	f043 0308 	orr.w	r3, r3, #8
 80068be:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80068c0:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068c2:	bf01      	itttt	eq
 80068c4:	69a3      	ldreq	r3, [r4, #24]
 80068c6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80068ca:	f043 0304 	orreq.w	r3, r3, #4
 80068ce:	61a3      	streq	r3, [r4, #24]
}
 80068d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d4:	2000      	movs	r0, #0
 80068d6:	b004      	add	sp, #16
 80068d8:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068da:	f8d2 c000 	ldr.w	ip, [r2]
 80068de:	f1bc 0f00 	cmp.w	ip, #0
 80068e2:	da09      	bge.n	80068f8 <USB_DevInit+0x10c>
      if (i == 0U)
 80068e4:	b933      	cbnz	r3, 80068f4 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068e6:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068e8:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ea:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068ec:	f8c2 e008 	str.w	lr, [r2, #8]
 80068f0:	3220      	adds	r2, #32
 80068f2:	e7c0      	b.n	8006876 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068f4:	6010      	str	r0, [r2, #0]
 80068f6:	e7f7      	b.n	80068e8 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 80068f8:	6011      	str	r1, [r2, #0]
 80068fa:	e7f5      	b.n	80068e8 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068fc:	f8d2 8000 	ldr.w	r8, [r2]
 8006900:	f1b8 0f00 	cmp.w	r8, #0
 8006904:	da0a      	bge.n	800691c <USB_DevInit+0x130>
      if (i == 0U)
 8006906:	b939      	cbnz	r1, 8006918 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006908:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800690c:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800690e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006910:	f8c2 c008 	str.w	ip, [r2, #8]
 8006914:	3220      	adds	r2, #32
 8006916:	e7ba      	b.n	800688e <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006918:	6015      	str	r5, [r2, #0]
 800691a:	e7f7      	b.n	800690c <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800691c:	6010      	str	r0, [r2, #0]
 800691e:	e7f5      	b.n	800690c <USB_DevInit+0x120>
 8006920:	803c3800 	.word	0x803c3800

08006924 <USB_ActivateEndpoint>:
{
 8006924:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8006926:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006928:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800692a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800692e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8006932:	2a01      	cmp	r2, #1
 8006934:	f004 050f 	and.w	r5, r4, #15
 8006938:	d11b      	bne.n	8006972 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800693a:	40aa      	lsls	r2, r5
 800693c:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800693e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8006942:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006944:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006948:	041a      	lsls	r2, r3, #16
 800694a:	d410      	bmi.n	800696e <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800694c:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800694e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006950:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006960:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8006964:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8006968:	4313      	orrs	r3, r2
 800696a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800696e:	2000      	movs	r0, #0
 8006970:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8006972:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006976:	40aa      	lsls	r2, r5
 8006978:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800697a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 800697e:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006980:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006984:	041b      	lsls	r3, r3, #16
 8006986:	d4f2      	bmi.n	800696e <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006988:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800698a:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800698c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80069a6:	e7e2      	b.n	800696e <USB_ActivateEndpoint+0x4a>

080069a8 <USB_DeactivateEndpoint>:
{
 80069a8:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80069aa:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80069ac:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80069ae:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80069b2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	f004 050f 	and.w	r5, r4, #15
 80069bc:	d110      	bne.n	80069e0 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80069be:	40ab      	lsls	r3, r5
 80069c0:	43db      	mvns	r3, r3
 80069c2:	4019      	ands	r1, r3
 80069c4:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80069c6:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069c8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80069cc:	400b      	ands	r3, r1
 80069ce:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069d0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80069d4:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <USB_DeactivateEndpoint+0x5c>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80069dc:	2000      	movs	r0, #0
 80069de:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80069e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069e4:	40ab      	lsls	r3, r5
 80069e6:	43db      	mvns	r3, r3
 80069e8:	4019      	ands	r1, r3
 80069ea:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80069ec:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069ee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80069f2:	400b      	ands	r3, r1
 80069f4:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069f6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80069fa:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <USB_DeactivateEndpoint+0x60>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006a02:	e7eb      	b.n	80069dc <USB_DeactivateEndpoint+0x34>
 8006a04:	ec337800 	.word	0xec337800
 8006a08:	eff37800 	.word	0xeff37800

08006a0c <USB_EP0StartXfer>:
{
 8006a0c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8006a0e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006a10:	780a      	ldrb	r2, [r1, #0]
 8006a12:	694d      	ldr	r5, [r1, #20]
 8006a14:	4e35      	ldr	r6, [pc, #212]	; (8006aec <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	f04f 0320 	mov.w	r3, #32
 8006a1c:	d145      	bne.n	8006aaa <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a1e:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8006a22:	bb45      	cbnz	r5, 8006a76 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a24:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006a28:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006a2c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006a30:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a34:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006a38:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006a3c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a40:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006a44:	4026      	ands	r6, r4
 8006a46:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8006a4a:	694b      	ldr	r3, [r1, #20]
 8006a4c:	b14b      	cbz	r3, 8006a62 <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8006a4e:	780b      	ldrb	r3, [r1, #0]
 8006a50:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8006a54:	f003 010f 	and.w	r1, r3, #15
 8006a58:	2301      	movs	r3, #1
 8006a5a:	408b      	lsls	r3, r1
 8006a5c:	432b      	orrs	r3, r5
 8006a5e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a62:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8006a66:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8006a6a:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8006a6e:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8006a72:	2000      	movs	r0, #0
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	691c      	ldr	r4, [r3, #16]
 8006a7c:	4026      	ands	r6, r4
 8006a7e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a80:	691c      	ldr	r4, [r3, #16]
 8006a82:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006a86:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006a8a:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8006a8c:	688c      	ldr	r4, [r1, #8]
 8006a8e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8006a90:	bf88      	it	hi
 8006a92:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a94:	691c      	ldr	r4, [r3, #16]
 8006a96:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006a9a:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a9c:	694c      	ldr	r4, [r1, #20]
 8006a9e:	691d      	ldr	r5, [r3, #16]
 8006aa0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006aa4:	432c      	orrs	r4, r5
 8006aa6:	611c      	str	r4, [r3, #16]
 8006aa8:	e7cf      	b.n	8006a4a <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aaa:	fb13 0002 	smlabb	r0, r3, r2, r0
 8006aae:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	4032      	ands	r2, r6
 8006ab6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8006abe:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006ac2:	611a      	str	r2, [r3, #16]
 8006ac4:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8006ac6:	b105      	cbz	r5, 8006aca <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8006ac8:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aca:	6919      	ldr	r1, [r3, #16]
 8006acc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8006ad0:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ad2:	6919      	ldr	r1, [r3, #16]
 8006ad4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006adc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006ae0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ae4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006ae8:	e7c3      	b.n	8006a72 <USB_EP0StartXfer+0x66>
 8006aea:	bf00      	nop
 8006aec:	fff80000 	.word	0xfff80000

08006af0 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8006af0:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006af2:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006afe:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8006b00:	4299      	cmp	r1, r3
 8006b02:	d101      	bne.n	8006b08 <USB_WritePacket+0x18>
}
 8006b04:	2000      	movs	r0, #0
 8006b06:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006b08:	f851 0b04 	ldr.w	r0, [r1], #4
 8006b0c:	6010      	str	r0, [r2, #0]
 8006b0e:	e7f7      	b.n	8006b00 <USB_WritePacket+0x10>

08006b10 <USB_EPStartXfer>:
{
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8006b12:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006b14:	780d      	ldrb	r5, [r1, #0]
 8006b16:	4e5f      	ldr	r6, [pc, #380]	; (8006c94 <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f04f 0220 	mov.w	r2, #32
 8006b1e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b20:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8006b24:	d169      	bne.n	8006bfa <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8006b26:	bb83      	cbnz	r3, 8006b8a <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b28:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8006b2c:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8006b30:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8006b34:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006b38:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b3a:	6922      	ldr	r2, [r4, #16]
 8006b3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006b40:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b42:	6922      	ldr	r2, [r4, #16]
 8006b44:	4016      	ands	r6, r2
 8006b46:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8006b48:	78ce      	ldrb	r6, [r1, #3]
 8006b4a:	2e01      	cmp	r6, #1
 8006b4c:	f000 8094 	beq.w	8006c78 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8006b50:	b153      	cbz	r3, 8006b68 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8006b52:	780a      	ldrb	r2, [r1, #0]
 8006b54:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8006b58:	f002 040f 	and.w	r4, r2, #15
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	40a2      	lsls	r2, r4
 8006b60:	ea42 020e 	orr.w	r2, r2, lr
 8006b64:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b68:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8006b6c:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b6e:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006b72:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006b76:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8006b7a:	d104      	bne.n	8006b86 <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006b7c:	780a      	ldrb	r2, [r1, #0]
 8006b7e:	68c9      	ldr	r1, [r1, #12]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f7ff ffb5 	bl	8006af0 <USB_WritePacket>
}
 8006b86:	2000      	movs	r0, #0
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b8a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8006b8e:	4034      	ands	r4, r6
 8006b90:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b94:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b98:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b9a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006b9e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006ba2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ba6:	199c      	adds	r4, r3, r6
 8006ba8:	3c01      	subs	r4, #1
 8006baa:	fbb4 f6f6 	udiv	r6, r4, r6
 8006bae:	4c3a      	ldr	r4, [pc, #232]	; (8006c98 <USB_EPStartXfer+0x188>)
 8006bb0:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8006bb4:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8006bb8:	433c      	orrs	r4, r7
 8006bba:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bbe:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8006bc2:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8006bc6:	4334      	orrs	r4, r6
 8006bc8:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8006bcc:	78cc      	ldrb	r4, [r1, #3]
 8006bce:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8006bd4:	d1b8      	bne.n	8006b48 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bd6:	6914      	ldr	r4, [r2, #16]
 8006bd8:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8006bdc:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bde:	6914      	ldr	r4, [r2, #16]
 8006be0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8006be4:	6114      	str	r4, [r2, #16]
 8006be6:	e7af      	b.n	8006b48 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006be8:	fb12 0205 	smlabb	r2, r2, r5, r0
 8006bec:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006bf0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bf4:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8006bf8:	e7b6      	b.n	8006b68 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bfa:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8006bfe:	692c      	ldr	r4, [r5, #16]
 8006c00:	4034      	ands	r4, r6
 8006c02:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c04:	692c      	ldr	r4, [r5, #16]
 8006c06:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006c0a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006c0e:	612c      	str	r4, [r5, #16]
 8006c10:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8006c12:	b9fb      	cbnz	r3, 8006c54 <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c14:	692b      	ldr	r3, [r5, #16]
 8006c16:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006c1a:	431c      	orrs	r4, r3
 8006c1c:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c1e:	692b      	ldr	r3, [r5, #16]
 8006c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c24:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8006c26:	78cb      	ldrb	r3, [r1, #3]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10c      	bne.n	8006c46 <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c2c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8006c30:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c34:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006c38:	bf0c      	ite	eq
 8006c3a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c3e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006c42:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c46:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c4e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8006c52:	e798      	b.n	8006b86 <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c54:	4e10      	ldr	r6, [pc, #64]	; (8006c98 <USB_EPStartXfer+0x188>)
 8006c56:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c58:	4423      	add	r3, r4
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c60:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8006c64:	433e      	orrs	r6, r7
 8006c66:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	692e      	ldr	r6, [r5, #16]
 8006c6c:	435c      	muls	r4, r3
 8006c6e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006c72:	4334      	orrs	r4, r6
 8006c74:	612c      	str	r4, [r5, #16]
 8006c76:	e7d6      	b.n	8006c26 <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c78:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8006c7c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006c80:	f04f 0220 	mov.w	r2, #32
 8006c84:	d0b0      	beq.n	8006be8 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c86:	fb12 0205 	smlabb	r2, r2, r5, r0
 8006c8a:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006c8e:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006c92:	e7af      	b.n	8006bf4 <USB_EPStartXfer+0xe4>
 8006c94:	fff80000 	.word	0xfff80000
 8006c98:	1ff80000 	.word	0x1ff80000

08006c9c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c9c:	3203      	adds	r2, #3
 8006c9e:	f022 0203 	bic.w	r2, r2, #3
 8006ca2:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006ca4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8006ca8:	4291      	cmp	r1, r2
 8006caa:	d101      	bne.n	8006cb0 <USB_ReadPacket+0x14>
}
 8006cac:	4608      	mov	r0, r1
 8006cae:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006cb0:	6803      	ldr	r3, [r0, #0]
 8006cb2:	f841 3b04 	str.w	r3, [r1], #4
 8006cb6:	e7f7      	b.n	8006ca8 <USB_ReadPacket+0xc>

08006cb8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8006cb8:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006cba:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cc2:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8006cc6:	d112      	bne.n	8006cee <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cc8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	db06      	blt.n	8006cde <USB_EPSetStall+0x26>
 8006cd0:	b12a      	cbz	r2, 8006cde <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cd2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006cd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cda:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cde:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ce6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006cea:	2000      	movs	r0, #0
 8006cec:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	db06      	blt.n	8006d04 <USB_EPSetStall+0x4c>
 8006cf6:	b12a      	cbz	r2, 8006d04 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cf8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d00:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d04:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d0c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006d10:	e7eb      	b.n	8006cea <USB_EPSetStall+0x32>

08006d12 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8006d12:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006d14:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d1c:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8006d20:	d111      	bne.n	8006d46 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d22:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006d26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d2a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d2e:	78cb      	ldrb	r3, [r1, #3]
 8006d30:	3b02      	subs	r3, #2
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d805      	bhi.n	8006d42 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d36:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006d42:	2000      	movs	r0, #0
 8006d44:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d46:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d4e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d52:	78cb      	ldrb	r3, [r1, #3]
 8006d54:	3b02      	subs	r3, #2
 8006d56:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d58:	bf9e      	ittt	ls
 8006d5a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8006d5e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8006d62:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8006d66:	e7ec      	b.n	8006d42 <USB_EPClearStall+0x30>

08006d68 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d68:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006d6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d70:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d74:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006d78:	0109      	lsls	r1, r1, #4
 8006d7a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8006d7e:	4319      	orrs	r1, r3
 8006d80:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006d84:	2000      	movs	r0, #0
 8006d86:	4770      	bx	lr

08006d88 <USB_DevConnect>:
{
 8006d88:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d8a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006d8e:	f023 0302 	bic.w	r3, r3, #2
 8006d92:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006d96:	2003      	movs	r0, #3
 8006d98:	f7fa f940 	bl	800101c <HAL_Delay>
}
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	bd08      	pop	{r3, pc}

08006da0 <USB_DevDisconnect>:
{
 8006da0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006da2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006da6:	f043 0302 	orr.w	r3, r3, #2
 8006daa:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006dae:	2003      	movs	r0, #3
 8006db0:	f7fa f934 	bl	800101c <HAL_Delay>
}
 8006db4:	2000      	movs	r0, #0
 8006db6:	bd08      	pop	{r3, pc}

08006db8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006db8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006dba:	6980      	ldr	r0, [r0, #24]
}
 8006dbc:	4010      	ands	r0, r2
 8006dbe:	4770      	bx	lr

08006dc0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006dc0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006dc4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dc8:	69c0      	ldr	r0, [r0, #28]
 8006dca:	4018      	ands	r0, r3
}
 8006dcc:	0c00      	lsrs	r0, r0, #16
 8006dce:	4770      	bx	lr

08006dd0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006dd0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006dd4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dd8:	69c0      	ldr	r0, [r0, #28]
 8006dda:	4018      	ands	r0, r3
}
 8006ddc:	b280      	uxth	r0, r0
 8006dde:	4770      	bx	lr

08006de0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006de0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006de4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006de8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006dec:	6940      	ldr	r0, [r0, #20]
}
 8006dee:	4010      	ands	r0, r2
 8006df0:	4770      	bx	lr

08006df2 <USB_ReadDevInEPInterrupt>:
{
 8006df2:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8006df4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006df8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dfc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006e00:	f001 010f 	and.w	r1, r1, #15
 8006e04:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e06:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006e0a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e0c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	4323      	orrs	r3, r4
}
 8006e12:	4018      	ands	r0, r3
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8006e16:	6940      	ldr	r0, [r0, #20]
}
 8006e18:	f000 0001 	and.w	r0, r0, #1
 8006e1c:	4770      	bx	lr

08006e1e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006e22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006e2e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	f002 0206 	and.w	r2, r2, #6
 8006e38:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006e3a:	bf02      	ittt	eq
 8006e3c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8006e40:	f042 0203 	orreq.w	r2, r2, #3
 8006e44:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e4e:	605a      	str	r2, [r3, #4]
}
 8006e50:	2000      	movs	r0, #0
 8006e52:	4770      	bx	lr

08006e54 <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e54:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006e58:	2000      	movs	r0, #0
 8006e5a:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006e62:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	f042 0218 	orr.w	r2, r2, #24
 8006e6a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e6c:	691a      	ldr	r2, [r3, #16]
 8006e6e:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8006e72:	611a      	str	r2, [r3, #16]
}
 8006e74:	4770      	bx	lr
	...

08006e78 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8006e78:	2329      	movs	r3, #41	; 0x29
 8006e7a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8006e7c:	4800      	ldr	r0, [pc, #0]	; (8006e80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8006e7e:	4770      	bx	lr
 8006e80:	2000005c 	.word	0x2000005c

08006e84 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8006e84:	2329      	movs	r3, #41	; 0x29
 8006e86:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8006e88:	4800      	ldr	r0, [pc, #0]	; (8006e8c <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8006e8a:	4770      	bx	lr
 8006e8c:	20000088 	.word	0x20000088

08006e90 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006e90:	2329      	movs	r3, #41	; 0x29
 8006e92:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8006e94:	4800      	ldr	r0, [pc, #0]	; (8006e98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8006e96:	4770      	bx	lr
 8006e98:	200000cc 	.word	0x200000cc

08006e9c <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006e9c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8006ea4:	4770      	bx	lr

08006ea6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ea6:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006ea8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8006eac:	69a3      	ldr	r3, [r4, #24]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d107      	bne.n	8006ec2 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006eb2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006eb6:	7861      	ldrb	r1, [r4, #1]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	7820      	ldrb	r0, [r4, #0]
 8006ebc:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	bd10      	pop	{r4, pc}
	...

08006ec8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006ec8:	230a      	movs	r3, #10
 8006eca:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8006ecc:	4800      	ldr	r0, [pc, #0]	; (8006ed0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8006ece:	4770      	bx	lr
 8006ed0:	200000c0 	.word	0x200000c0

08006ed4 <USBD_CUSTOM_HID_DataOut>:
{
 8006ed4:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006ed6:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006eda:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006ede:	7869      	ldrb	r1, [r5, #1]
 8006ee0:	68db      	ldr	r3, [r3, #12]
{
 8006ee2:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006ee4:	7828      	ldrb	r0, [r5, #0]
 8006ee6:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8006ee8:	230c      	movs	r3, #12
 8006eea:	462a      	mov	r2, r5
 8006eec:	2101      	movs	r1, #1
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f017 ff64 	bl	801edbc <USBD_LL_PrepareReceive>
}
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}

08006ef8 <USBD_CUSTOM_HID_Setup>:
{
 8006ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8006efa:	2500      	movs	r5, #0
 8006efc:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f00:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006f02:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f06:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f0e:	d028      	beq.n	8006f62 <USBD_CUSTOM_HID_Setup+0x6a>
 8006f10:	2d20      	cmp	r5, #32
 8006f12:	d161      	bne.n	8006fd8 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8006f14:	7849      	ldrb	r1, [r1, #1]
 8006f16:	3902      	subs	r1, #2
 8006f18:	2909      	cmp	r1, #9
 8006f1a:	d85b      	bhi.n	8006fd4 <USBD_CUSTOM_HID_Setup+0xdc>
 8006f1c:	e8df f001 	tbb	[pc, r1]
 8006f20:	5a5a0a15 	.word	0x5a5a0a15
 8006f24:	195a5a5a 	.word	0x195a5a5a
 8006f28:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 8006f2a:	7893      	ldrb	r3, [r2, #2]
 8006f2c:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 8006f2e:	2000      	movs	r0, #0
}
 8006f30:	b003      	add	sp, #12
 8006f32:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006f34:	2201      	movs	r2, #1
 8006f36:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fc18 	bl	8007770 <USBD_CtlSendData>
 8006f40:	e7f5      	b.n	8006f2e <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f42:	8853      	ldrh	r3, [r2, #2]
 8006f44:	0a1b      	lsrs	r3, r3, #8
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	e7f1      	b.n	8006f2e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f104 0110 	add.w	r1, r4, #16
 8006f50:	e7f3      	b.n	8006f3a <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 8006f52:	2101      	movs	r1, #1
 8006f54:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8006f56:	88d2      	ldrh	r2, [r2, #6]
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fc1d 	bl	800779a <USBD_CtlPrepareRx>
 8006f60:	e7e5      	b.n	8006f2e <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 8006f62:	7849      	ldrb	r1, [r1, #1]
 8006f64:	290b      	cmp	r1, #11
 8006f66:	d835      	bhi.n	8006fd4 <USBD_CUSTOM_HID_Setup+0xdc>
 8006f68:	e8df f001 	tbb	[pc, r1]
 8006f6c:	34343406 	.word	0x34343406
 8006f70:	340e3434 	.word	0x340e3434
 8006f74:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f78:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8006f7c:	2903      	cmp	r1, #3
 8006f7e:	d129      	bne.n	8006fd4 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f80:	2202      	movs	r2, #2
 8006f82:	f10d 0106 	add.w	r1, sp, #6
 8006f86:	e7d8      	b.n	8006f3a <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006f88:	8851      	ldrh	r1, [r2, #2]
 8006f8a:	0a09      	lsrs	r1, r1, #8
 8006f8c:	2922      	cmp	r1, #34	; 0x22
 8006f8e:	d107      	bne.n	8006fa0 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8006f90:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006f92:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8006f96:	2a21      	cmp	r2, #33	; 0x21
 8006f98:	bf28      	it	cs
 8006f9a:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006f9c:	6809      	ldr	r1, [r1, #0]
 8006f9e:	e7cc      	b.n	8006f3a <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006fa0:	2921      	cmp	r1, #33	; 0x21
 8006fa2:	d105      	bne.n	8006fb0 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8006fa4:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8006fa6:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8006fa8:	2a09      	cmp	r2, #9
 8006faa:	bf28      	it	cs
 8006fac:	2209      	movcs	r2, #9
 8006fae:	e7c4      	b.n	8006f3a <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8006fb0:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	e7c1      	b.n	8006f3a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8006fba:	2903      	cmp	r1, #3
 8006fbc:	d10a      	bne.n	8006fd4 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f104 0114 	add.w	r1, r4, #20
 8006fc4:	e7b9      	b.n	8006f3a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8006fca:	2903      	cmp	r1, #3
 8006fcc:	d102      	bne.n	8006fd4 <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8006fce:	7893      	ldrb	r3, [r2, #2]
 8006fd0:	6163      	str	r3, [r4, #20]
 8006fd2:	e7ac      	b.n	8006f2e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8006fd8:	f000 fba3 	bl	8007722 <USBD_CtlError>
    ret = USBD_FAIL;
 8006fdc:	2002      	movs	r0, #2
    break;
 8006fde:	e7a7      	b.n	8006f30 <USBD_CUSTOM_HID_Setup+0x38>
 8006fe0:	200000b4 	.word	0x200000b4

08006fe4 <USBD_CUSTOM_HID_DeInit>:
{
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006fe8:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006fea:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006fec:	f017 fe8c 	bl	801ed08 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006ff0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f017 fe87 	bl	801ed08 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8006ffa:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006ffe:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8007002:	b14b      	cbz	r3, 8007018 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007004:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800700c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8007010:	f017 ff18 	bl	801ee44 <USBD_static_free>
    pdev->pClassData = NULL;
 8007014:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8007018:	2000      	movs	r0, #0
 800701a:	bd38      	pop	{r3, r4, r5, pc}

0800701c <USBD_CUSTOM_HID_Init>:
{
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007020:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	2203      	movs	r2, #3
 8007026:	2181      	movs	r1, #129	; 0x81
 8007028:	f017 fe5e 	bl	801ece8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800702c:	230c      	movs	r3, #12
 800702e:	2203      	movs	r2, #3
 8007030:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007032:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007034:	4628      	mov	r0, r5
 8007036:	f017 fe57 	bl	801ece8 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800703a:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800703e:	2020      	movs	r0, #32
 8007040:	f017 fefc 	bl	801ee3c <USBD_static_malloc>
 8007044:	4606      	mov	r6, r0
 8007046:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800704a:	b168      	cbz	r0, 8007068 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800704c:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 8007050:	2700      	movs	r7, #0
 8007052:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007058:	230c      	movs	r3, #12
 800705a:	4632      	mov	r2, r6
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f017 feac 	bl	801edbc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8007064:	4638      	mov	r0, r7
 8007066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8007068:	4620      	mov	r0, r4
}
 800706a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800706c <USBD_CUSTOM_HID_SendReport>:
{
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8007070:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007074:	2a03      	cmp	r2, #3
 8007076:	d109      	bne.n	800708c <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007078:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 800707c:	7f35      	ldrb	r5, [r6, #28]
 800707e:	2401      	movs	r4, #1
 8007080:	b935      	cbnz	r5, 8007090 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007082:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 8007084:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007086:	2181      	movs	r1, #129	; 0x81
 8007088:	f017 fe8a 	bl	801eda0 <USBD_LL_Transmit>
  return USBD_OK;
 800708c:	2000      	movs	r0, #0
 800708e:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8007090:	4620      	mov	r0, r4
}
 8007092:	bd70      	pop	{r4, r5, r6, pc}

08007094 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8007094:	b119      	cbz	r1, 800709e <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8007096:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800709a:	2000      	movs	r0, #0
 800709c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800709e:	2002      	movs	r0, #2
  }

  return ret;
}
 80070a0:	4770      	bx	lr

080070a2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070a2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80070a4:	b180      	cbz	r0, 80070c8 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80070a6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80070aa:	b113      	cbz	r3, 80070b2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80070b2:	b109      	cbz	r1, 80070b8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80070b4:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80070be:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070c0:	f017 fdd0 	bl	801ec64 <USBD_LL_Init>

  return USBD_OK;
 80070c4:	2000      	movs	r0, #0
 80070c6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80070c8:	2002      	movs	r0, #2
}
 80070ca:	bd08      	pop	{r3, pc}

080070cc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80070cc:	b119      	cbz	r1, 80070d6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070ce:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80070d2:	2000      	movs	r0, #0
 80070d4:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070d6:	2002      	movs	r0, #2
  }

  return status;
}
 80070d8:	4770      	bx	lr

080070da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80070da:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070dc:	f017 fdf6 	bl	801eccc <USBD_LL_Start>

  return USBD_OK;
}
 80070e0:	2000      	movs	r0, #0
 80070e2:	bd08      	pop	{r3, pc}

080070e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070e4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80070e6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80070ea:	b90b      	cbnz	r3, 80070f0 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80070ec:	2002      	movs	r0, #2
 80070ee:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4798      	blx	r3
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1f9      	bne.n	80070ec <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80070f8:	bd08      	pop	{r3, pc}

080070fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070fa:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80070fc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4798      	blx	r3
  return USBD_OK;
}
 8007104:	2000      	movs	r0, #0
 8007106:	bd08      	pop	{r3, pc}

08007108 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800710c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8007110:	4628      	mov	r0, r5
 8007112:	f000 faf2 	bl	80076fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007116:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007118:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800711c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8007120:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8007124:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8007128:	f001 031f 	and.w	r3, r1, #31
 800712c:	2b01      	cmp	r3, #1
 800712e:	d00e      	beq.n	800714e <USBD_LL_SetupStage+0x46>
 8007130:	d307      	bcc.n	8007142 <USBD_LL_SetupStage+0x3a>
 8007132:	2b02      	cmp	r3, #2
 8007134:	d010      	beq.n	8007158 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007136:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800713a:	4620      	mov	r0, r4
 800713c:	f017 fdf2 	bl	801ed24 <USBD_LL_StallEP>
    break;
 8007140:	e003      	b.n	800714a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8007142:	4629      	mov	r1, r5
 8007144:	4620      	mov	r0, r4
 8007146:	f000 f901 	bl	800734c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800714a:	2000      	movs	r0, #0
 800714c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800714e:	4629      	mov	r1, r5
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fa25 	bl	80075a0 <USBD_StdItfReq>
    break;
 8007156:	e7f8      	b.n	800714a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f000 fa45 	bl	80075ea <USBD_StdEPReq>
    break;
 8007160:	e7f3      	b.n	800714a <USBD_LL_SetupStage+0x42>

08007162 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007162:	b570      	push	{r4, r5, r6, lr}
 8007164:	4605      	mov	r5, r0
 8007166:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007168:	bb39      	cbnz	r1, 80071ba <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800716a:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800716e:	2b03      	cmp	r3, #3
 8007170:	d11e      	bne.n	80071b0 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8007172:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8007176:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800717a:	4293      	cmp	r3, r2
 800717c:	d90b      	bls.n	8007196 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800717e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8007180:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8007182:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8007186:	bf8c      	ite	hi
 8007188:	b29a      	uxthhi	r2, r3
 800718a:	b292      	uxthls	r2, r2
 800718c:	4631      	mov	r1, r6
 800718e:	f000 fb13 	bl	80077b8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007192:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8007194:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007196:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	b123      	cbz	r3, 80071a8 <USBD_LL_DataOutStage+0x46>
 800719e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80071a2:	2a03      	cmp	r2, #3
 80071a4:	d100      	bne.n	80071a8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80071a6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80071a8:	4628      	mov	r0, r5
 80071aa:	f000 fb0d 	bl	80077c8 <USBD_CtlSendStatus>
 80071ae:	e7f0      	b.n	8007192 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071b0:	2b05      	cmp	r3, #5
 80071b2:	d1ee      	bne.n	8007192 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 80071b4:	f017 fdb6 	bl	801ed24 <USBD_LL_StallEP>
 80071b8:	e7eb      	b.n	8007192 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80071ba:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	b12b      	cbz	r3, 80071ce <USBD_LL_DataOutStage+0x6c>
 80071c2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80071c6:	2a03      	cmp	r2, #3
 80071c8:	d101      	bne.n	80071ce <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80071ca:	4798      	blx	r3
 80071cc:	e7e1      	b.n	8007192 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80071ce:	2002      	movs	r0, #2
}
 80071d0:	bd70      	pop	{r4, r5, r6, pc}

080071d2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80071d2:	b570      	push	{r4, r5, r6, lr}
 80071d4:	4613      	mov	r3, r2
 80071d6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80071d8:	460e      	mov	r6, r1
 80071da:	2900      	cmp	r1, #0
 80071dc:	d148      	bne.n	8007270 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80071de:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80071e2:	2a02      	cmp	r2, #2
 80071e4:	d13d      	bne.n	8007262 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80071e6:	6a05      	ldr	r5, [r0, #32]
 80071e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80071ea:	4295      	cmp	r5, r2
 80071ec:	d914      	bls.n	8007218 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80071ee:	1aaa      	subs	r2, r5, r2
 80071f0:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80071f2:	4619      	mov	r1, r3
 80071f4:	b292      	uxth	r2, r2
 80071f6:	f000 fac8 	bl	800778a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80071fa:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80071fc:	461a      	mov	r2, r3
 80071fe:	4619      	mov	r1, r3
 8007200:	4620      	mov	r0, r4
 8007202:	f017 fddb 	bl	801edbc <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007206:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800720a:	2b01      	cmp	r3, #1
 800720c:	f04f 0000 	mov.w	r0, #0
 8007210:	d13a      	bne.n	8007288 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8007212:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8007216:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007218:	69c3      	ldr	r3, [r0, #28]
 800721a:	fbb3 f5f2 	udiv	r5, r3, r2
 800721e:	fb02 3515 	mls	r5, r2, r5, r3
 8007222:	b965      	cbnz	r5, 800723e <USBD_LL_DataInStage+0x6c>
 8007224:	429a      	cmp	r2, r3
 8007226:	d80a      	bhi.n	800723e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8007228:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800722c:	4293      	cmp	r3, r2
 800722e:	d206      	bcs.n	800723e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007230:	462a      	mov	r2, r5
 8007232:	f000 faaa 	bl	800778a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007236:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800723a:	462b      	mov	r3, r5
 800723c:	e7de      	b.n	80071fc <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800723e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	b12b      	cbz	r3, 8007252 <USBD_LL_DataInStage+0x80>
 8007246:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800724a:	2a03      	cmp	r2, #3
 800724c:	d101      	bne.n	8007252 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800724e:	4620      	mov	r0, r4
 8007250:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8007252:	2180      	movs	r1, #128	; 0x80
 8007254:	4620      	mov	r0, r4
 8007256:	f017 fd65 	bl	801ed24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fabf 	bl	80077de <USBD_CtlReceiveStatus>
 8007260:	e7d1      	b.n	8007206 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007262:	f032 0304 	bics.w	r3, r2, #4
 8007266:	d1ce      	bne.n	8007206 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	f017 fd5b 	bl	801ed24 <USBD_LL_StallEP>
 800726e:	e7ca      	b.n	8007206 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007270:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	b133      	cbz	r3, 8007286 <USBD_LL_DataInStage+0xb4>
 8007278:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800727c:	2a03      	cmp	r2, #3
 800727e:	d102      	bne.n	8007286 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007280:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007282:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8007284:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8007286:	2002      	movs	r0, #2
}
 8007288:	bd70      	pop	{r4, r5, r6, pc}

0800728a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800728a:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800728c:	2200      	movs	r2, #0
{
 800728e:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007290:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007292:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007294:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007296:	2340      	movs	r3, #64	; 0x40
 8007298:	f017 fd26 	bl	801ece8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800729c:	4633      	mov	r3, r6
 800729e:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072a0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072a4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072a8:	2200      	movs	r2, #0
 80072aa:	4620      	mov	r0, r4
 80072ac:	f017 fd1c 	bl	801ece8 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80072b0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072b4:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80072b6:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072b8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ba:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80072be:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80072c2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80072c4:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80072c8:	b123      	cbz	r3, 80072d4 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072ca:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80072ce:	4620      	mov	r0, r4
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80072d4:	2000      	movs	r0, #0
 80072d6:	bd70      	pop	{r4, r5, r6, pc}

080072d8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80072d8:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80072da:	2000      	movs	r0, #0
 80072dc:	4770      	bx	lr

080072de <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80072de:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80072e2:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072e6:	2304      	movs	r3, #4
 80072e8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80072ec:	2000      	movs	r0, #0
 80072ee:	4770      	bx	lr

080072f0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 80072f0:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80072f4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80072f8:	2000      	movs	r0, #0
 80072fa:	4770      	bx	lr

080072fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80072fc:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007302:	2a03      	cmp	r2, #3
 8007304:	d104      	bne.n	8007310 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8007306:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	b103      	cbz	r3, 8007310 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800730e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8007310:	2000      	movs	r0, #0
 8007312:	bd08      	pop	{r3, pc}

08007314 <USBD_LL_IsoINIncomplete>:
 8007314:	2000      	movs	r0, #0
 8007316:	4770      	bx	lr

08007318 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007318:	2000      	movs	r0, #0
 800731a:	4770      	bx	lr

0800731c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800731c:	2000      	movs	r0, #0
 800731e:	4770      	bx	lr

08007320 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007320:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007322:	2201      	movs	r2, #1
 8007324:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007328:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 800732c:	7901      	ldrb	r1, [r0, #4]
 800732e:	6852      	ldr	r2, [r2, #4]
 8007330:	4790      	blx	r2

  return USBD_OK;
}
 8007332:	2000      	movs	r0, #0
 8007334:	bd08      	pop	{r3, pc}

08007336 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8007336:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8007338:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800733a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800733c:	f017 fcf2 	bl	801ed24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007340:	4620      	mov	r0, r4
 8007342:	2100      	movs	r1, #0
}
 8007344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007348:	f017 bcec 	b.w	801ed24 <USBD_LL_StallEP>

0800734c <USBD_StdDevReq>:
{
 800734c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800734e:	780b      	ldrb	r3, [r1, #0]
 8007350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007354:	2b20      	cmp	r3, #32
{
 8007356:	4604      	mov	r4, r0
 8007358:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800735a:	d014      	beq.n	8007386 <USBD_StdDevReq+0x3a>
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d012      	beq.n	8007386 <USBD_StdDevReq+0x3a>
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 809c 	bne.w	800749e <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 8007366:	784b      	ldrb	r3, [r1, #1]
 8007368:	2b09      	cmp	r3, #9
 800736a:	f200 8097 	bhi.w	800749c <USBD_StdDevReq+0x150>
 800736e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007372:	00ef      	.short	0x00ef
 8007374:	00950109 	.word	0x00950109
 8007378:	00950102 	.word	0x00950102
 800737c:	00130089 	.word	0x00130089
 8007380:	00da0095 	.word	0x00da0095
 8007384:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 8007386:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800738a:	4629      	mov	r1, r5
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	4620      	mov	r0, r4
 8007390:	4798      	blx	r3
}
 8007392:	2000      	movs	r0, #0
 8007394:	b003      	add	sp, #12
 8007396:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8007398:	8849      	ldrh	r1, [r1, #2]
 800739a:	0a0b      	lsrs	r3, r1, #8
 800739c:	3b01      	subs	r3, #1
 800739e:	2b0e      	cmp	r3, #14
 80073a0:	d87c      	bhi.n	800749c <USBD_StdDevReq+0x150>
 80073a2:	e8df f003 	tbb	[pc, r3]
 80073a6:	2824      	.short	0x2824
 80073a8:	5c7b7b35 	.word	0x5c7b7b35
 80073ac:	7b7b7b65 	.word	0x7b7b7b65
 80073b0:	7b7b7b7b 	.word	0x7b7b7b7b
 80073b4:	08          	.byte	0x08
 80073b5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80073b6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80073ba:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073bc:	7c20      	ldrb	r0, [r4, #16]
 80073be:	f10d 0106 	add.w	r1, sp, #6
 80073c2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80073c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80073c8:	b152      	cbz	r2, 80073e0 <USBD_StdDevReq+0x94>
 80073ca:	88eb      	ldrh	r3, [r5, #6]
 80073cc:	b143      	cbz	r3, 80073e0 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80073ce:	429a      	cmp	r2, r3
 80073d0:	bf28      	it	cs
 80073d2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80073d4:	4601      	mov	r1, r0
 80073d6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80073d8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80073dc:	f000 f9c8 	bl	8007770 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80073e0:	88eb      	ldrh	r3, [r5, #6]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d5      	bne.n	8007392 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 80073e6:	4620      	mov	r0, r4
 80073e8:	f000 f9ee 	bl	80077c8 <USBD_CtlSendStatus>
 80073ec:	e7d1      	b.n	8007392 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073ee:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	e7e2      	b.n	80073bc <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80073f6:	7c02      	ldrb	r2, [r0, #16]
 80073f8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80073fc:	b932      	cbnz	r2, 800740c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007400:	f10d 0006 	add.w	r0, sp, #6
 8007404:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007406:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007408:	7043      	strb	r3, [r0, #1]
 800740a:	e7db      	b.n	80073c4 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	e7f7      	b.n	8007400 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8007410:	b2c9      	uxtb	r1, r1
 8007412:	2905      	cmp	r1, #5
 8007414:	d81c      	bhi.n	8007450 <USBD_StdDevReq+0x104>
 8007416:	e8df f001 	tbb	[pc, r1]
 800741a:	0703      	.short	0x0703
 800741c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007420:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	e7c9      	b.n	80073bc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007428:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	e7c5      	b.n	80073bc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007430:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	e7c1      	b.n	80073bc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007438:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	e7bd      	b.n	80073bc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007440:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	e7b9      	b.n	80073bc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007448:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	e7b5      	b.n	80073bc <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8007450:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007454:	f10d 0206 	add.w	r2, sp, #6
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	4798      	blx	r3
 800745c:	e7b2      	b.n	80073c4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800745e:	7c03      	ldrb	r3, [r0, #16]
 8007460:	b9e3      	cbnz	r3, 800749c <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007462:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007466:	f10d 0006 	add.w	r0, sp, #6
 800746a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746c:	4798      	blx	r3
 800746e:	e7a9      	b.n	80073c4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007470:	7c03      	ldrb	r3, [r0, #16]
 8007472:	b99b      	cbnz	r3, 800749c <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007474:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007478:	f10d 0006 	add.w	r0, sp, #6
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007480:	2307      	movs	r3, #7
 8007482:	e7c1      	b.n	8007408 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007484:	888b      	ldrh	r3, [r1, #4]
 8007486:	b94b      	cbnz	r3, 800749c <USBD_StdDevReq+0x150>
 8007488:	88cb      	ldrh	r3, [r1, #6]
 800748a:	b93b      	cbnz	r3, 800749c <USBD_StdDevReq+0x150>
 800748c:	884d      	ldrh	r5, [r1, #2]
 800748e:	2d7f      	cmp	r5, #127	; 0x7f
 8007490:	d804      	bhi.n	800749c <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007496:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007498:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749a:	d103      	bne.n	80074a4 <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 800749c:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 800749e:	f7ff ff4a 	bl	8007336 <USBD_CtlError.constprop.1>
    break;
 80074a2:	e776      	b.n	8007392 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80074a4:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074a8:	f017 fc6c 	bl	801ed84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 f98b 	bl	80077c8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80074b2:	b11d      	cbz	r5, 80074bc <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b4:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074b6:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80074ba:	e76a      	b.n	8007392 <USBD_StdDevReq+0x46>
 80074bc:	2301      	movs	r3, #1
 80074be:	e7fa      	b.n	80074b6 <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 80074c0:	7889      	ldrb	r1, [r1, #2]
 80074c2:	4d36      	ldr	r5, [pc, #216]	; (800759c <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074c4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80074c6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074c8:	d8e8      	bhi.n	800749c <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 80074ca:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d008      	beq.n	80074e4 <USBD_StdDevReq+0x198>
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d015      	beq.n	8007502 <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 80074d6:	f7ff ff2e 	bl	8007336 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80074da:	7829      	ldrb	r1, [r5, #0]
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff fe0c 	bl	80070fa <USBD_ClrClassConfig>
 80074e2:	e756      	b.n	8007392 <USBD_StdDevReq+0x46>
      if (cfgidx)
 80074e4:	2900      	cmp	r1, #0
 80074e6:	f43f af7e 	beq.w	80073e6 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 80074ea:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80074ec:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80074ee:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80074f0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff fdf5 	bl	80070e4 <USBD_SetClassConfig>
 80074fa:	2802      	cmp	r0, #2
 80074fc:	f47f af73 	bne.w	80073e6 <USBD_StdDevReq+0x9a>
 8007500:	e7cc      	b.n	800749c <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 8007502:	b931      	cbnz	r1, 8007512 <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007504:	2302      	movs	r3, #2
 8007506:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800750a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800750c:	f7ff fdf5 	bl	80070fa <USBD_ClrClassConfig>
 8007510:	e769      	b.n	80073e6 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8007512:	6841      	ldr	r1, [r0, #4]
 8007514:	2901      	cmp	r1, #1
 8007516:	f43f af66 	beq.w	80073e6 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800751a:	b2c9      	uxtb	r1, r1
 800751c:	f7ff fded 	bl	80070fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007520:	7829      	ldrb	r1, [r5, #0]
 8007522:	6061      	str	r1, [r4, #4]
 8007524:	e7e6      	b.n	80074f4 <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 8007526:	88ca      	ldrh	r2, [r1, #6]
 8007528:	2a01      	cmp	r2, #1
 800752a:	d1b7      	bne.n	800749c <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 800752c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0b3      	beq.n	800749c <USBD_StdDevReq+0x150>
 8007534:	2b02      	cmp	r3, #2
 8007536:	d903      	bls.n	8007540 <USBD_StdDevReq+0x1f4>
 8007538:	2b03      	cmp	r3, #3
 800753a:	d1af      	bne.n	800749c <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800753c:	1d01      	adds	r1, r0, #4
 800753e:	e003      	b.n	8007548 <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 8007540:	4601      	mov	r1, r0
 8007542:	2300      	movs	r3, #0
 8007544:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007548:	4620      	mov	r0, r4
 800754a:	f000 f911 	bl	8007770 <USBD_CtlSendData>
 800754e:	e720      	b.n	8007392 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8007550:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007554:	3b01      	subs	r3, #1
 8007556:	2b02      	cmp	r3, #2
 8007558:	d8a0      	bhi.n	800749c <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 800755a:	88cb      	ldrh	r3, [r1, #6]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d19d      	bne.n	800749c <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007560:	2301      	movs	r3, #1
 8007562:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8007564:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8007568:	b10b      	cbz	r3, 800756e <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800756a:	2303      	movs	r3, #3
 800756c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800756e:	2202      	movs	r2, #2
 8007570:	f104 010c 	add.w	r1, r4, #12
 8007574:	e7e8      	b.n	8007548 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007576:	884b      	ldrh	r3, [r1, #2]
 8007578:	2b01      	cmp	r3, #1
 800757a:	f47f af0a 	bne.w	8007392 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 800757e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8007582:	e730      	b.n	80073e6 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8007584:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007588:	3b01      	subs	r3, #1
 800758a:	2b02      	cmp	r3, #2
 800758c:	d886      	bhi.n	800749c <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800758e:	884b      	ldrh	r3, [r1, #2]
 8007590:	2b01      	cmp	r3, #1
 8007592:	f47f aefe 	bne.w	8007392 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	e7f1      	b.n	800757e <USBD_StdDevReq+0x232>
 800759a:	bf00      	nop
 800759c:	20000b5c 	.word	0x20000b5c

080075a0 <USBD_StdItfReq>:
{
 80075a0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a2:	780b      	ldrb	r3, [r1, #0]
 80075a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075a8:	2b20      	cmp	r3, #32
{
 80075aa:	4604      	mov	r4, r0
 80075ac:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ae:	d002      	beq.n	80075b6 <USBD_StdItfReq+0x16>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d000      	beq.n	80075b6 <USBD_StdItfReq+0x16>
 80075b4:	b9b3      	cbnz	r3, 80075e4 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80075b6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80075ba:	3b01      	subs	r3, #1
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d810      	bhi.n	80075e2 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075c0:	792b      	ldrb	r3, [r5, #4]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d80d      	bhi.n	80075e2 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80075c6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80075ca:	4629      	mov	r1, r5
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	4620      	mov	r0, r4
 80075d0:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80075d2:	88eb      	ldrh	r3, [r5, #6]
 80075d4:	b91b      	cbnz	r3, 80075de <USBD_StdItfReq+0x3e>
 80075d6:	b910      	cbnz	r0, 80075de <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80075d8:	4620      	mov	r0, r4
 80075da:	f000 f8f5 	bl	80077c8 <USBD_CtlSendStatus>
}
 80075de:	2000      	movs	r0, #0
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80075e2:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80075e4:	f7ff fea7 	bl	8007336 <USBD_CtlError.constprop.1>
    break;
 80075e8:	e7f9      	b.n	80075de <USBD_StdItfReq+0x3e>

080075ea <USBD_StdEPReq>:
{
 80075ea:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ec:	780a      	ldrb	r2, [r1, #0]
 80075ee:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80075f2:	2a20      	cmp	r2, #32
{
 80075f4:	4604      	mov	r4, r0
 80075f6:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f8:	d013      	beq.n	8007622 <USBD_StdEPReq+0x38>
 80075fa:	2a40      	cmp	r2, #64	; 0x40
 80075fc:	d011      	beq.n	8007622 <USBD_StdEPReq+0x38>
 80075fe:	b96a      	cbnz	r2, 800761c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8007600:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007602:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8007604:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8007606:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8007608:	d01f      	beq.n	800764a <USBD_StdEPReq+0x60>
 800760a:	d335      	bcc.n	8007678 <USBD_StdEPReq+0x8e>
 800760c:	2d03      	cmp	r5, #3
 800760e:	d105      	bne.n	800761c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8007610:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007614:	2a02      	cmp	r2, #2
 8007616:	d026      	beq.n	8007666 <USBD_StdEPReq+0x7c>
 8007618:	2a03      	cmp	r2, #3
 800761a:	d00a      	beq.n	8007632 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800761c:	f7ff fe8b 	bl	8007336 <USBD_CtlError.constprop.1>
    break;
 8007620:	e005      	b.n	800762e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8007622:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8007626:	4619      	mov	r1, r3
 8007628:	6892      	ldr	r2, [r2, #8]
 800762a:	4620      	mov	r0, r4
 800762c:	4790      	blx	r2
}
 800762e:	2000      	movs	r0, #0
 8007630:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007632:	885a      	ldrh	r2, [r3, #2]
 8007634:	b92a      	cbnz	r2, 8007642 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007636:	064a      	lsls	r2, r1, #25
 8007638:	d003      	beq.n	8007642 <USBD_StdEPReq+0x58>
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	b90b      	cbnz	r3, 8007642 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 800763e:	f017 fb71 	bl	801ed24 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8007642:	4620      	mov	r0, r4
 8007644:	f000 f8c0 	bl	80077c8 <USBD_CtlSendStatus>
        break;
 8007648:	e7f1      	b.n	800762e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800764a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800764e:	2a02      	cmp	r2, #2
 8007650:	d009      	beq.n	8007666 <USBD_StdEPReq+0x7c>
 8007652:	2a03      	cmp	r2, #3
 8007654:	d1e2      	bne.n	800761c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007656:	885b      	ldrh	r3, [r3, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e8      	bne.n	800762e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 800765c:	064d      	lsls	r5, r1, #25
 800765e:	d0f0      	beq.n	8007642 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007660:	f017 fb6e 	bl	801ed40 <USBD_LL_ClearStallEP>
 8007664:	e7ed      	b.n	8007642 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007666:	064b      	lsls	r3, r1, #25
 8007668:	d017      	beq.n	800769a <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800766a:	f017 fb5b 	bl	801ed24 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800766e:	2180      	movs	r1, #128	; 0x80
 8007670:	4620      	mov	r0, r4
 8007672:	f017 fb57 	bl	801ed24 <USBD_LL_StallEP>
 8007676:	e7da      	b.n	800762e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8007678:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800767c:	2b02      	cmp	r3, #2
 800767e:	d00e      	beq.n	800769e <USBD_StdEPReq+0xb4>
 8007680:	2b03      	cmp	r3, #3
 8007682:	d1cb      	bne.n	800761c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8007684:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007688:	f04f 0314 	mov.w	r3, #20
 800768c:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007690:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8007694:	d012      	beq.n	80076bc <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007696:	6992      	ldr	r2, [r2, #24]
 8007698:	b9da      	cbnz	r2, 80076d2 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800769a:	4620      	mov	r0, r4
 800769c:	e7be      	b.n	800761c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800769e:	0649      	lsls	r1, r1, #25
 80076a0:	d1fb      	bne.n	800769a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80076a2:	0613      	lsls	r3, r2, #24
 80076a4:	bf4c      	ite	mi
 80076a6:	f100 0114 	addmi.w	r1, r0, #20
 80076aa:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076b2:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 f85b 	bl	8007770 <USBD_CtlSendData>
          break;
 80076ba:	e7b8      	b.n	800762e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076bc:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d0ea      	beq.n	800769a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80076c4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80076c8:	fb03 0505 	mla	r5, r3, r5, r0
 80076cc:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80076d0:	e004      	b.n	80076dc <USBD_StdEPReq+0xf2>
 80076d2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80076d6:	fb05 3503 	mla	r5, r5, r3, r3
 80076da:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076dc:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80076e0:	d103      	bne.n	80076ea <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 80076e2:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076e4:	2202      	movs	r2, #2
 80076e6:	4629      	mov	r1, r5
 80076e8:	e7e4      	b.n	80076b4 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80076ea:	4620      	mov	r0, r4
 80076ec:	f017 fb36 	bl	801ed5c <USBD_LL_IsStallEP>
 80076f0:	b108      	cbz	r0, 80076f6 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e7f5      	b.n	80076e2 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 80076f6:	6028      	str	r0, [r5, #0]
 80076f8:	e7f4      	b.n	80076e4 <USBD_StdEPReq+0xfa>

080076fa <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80076fa:	780b      	ldrb	r3, [r1, #0]
 80076fc:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80076fe:	784b      	ldrb	r3, [r1, #1]
 8007700:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007702:	78ca      	ldrb	r2, [r1, #3]
 8007704:	788b      	ldrb	r3, [r1, #2]
 8007706:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800770a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800770c:	794a      	ldrb	r2, [r1, #5]
 800770e:	790b      	ldrb	r3, [r1, #4]
 8007710:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007714:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007716:	79ca      	ldrb	r2, [r1, #7]
 8007718:	798b      	ldrb	r3, [r1, #6]
 800771a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800771e:	80c3      	strh	r3, [r0, #6]
 8007720:	4770      	bx	lr

08007722 <USBD_CtlError>:
{
 8007722:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8007724:	2180      	movs	r1, #128	; 0x80
{
 8007726:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007728:	f017 fafc 	bl	801ed24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800772c:	4620      	mov	r0, r4
 800772e:	2100      	movs	r1, #0
}
 8007730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007734:	f017 baf6 	b.w	801ed24 <USBD_LL_StallEP>

08007738 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007738:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800773a:	b188      	cbz	r0, 8007760 <USBD_GetString+0x28>
 800773c:	4605      	mov	r5, r0
 800773e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8007740:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2c00      	cmp	r4, #0
 8007748:	d1f9      	bne.n	800773e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800774a:	3301      	adds	r3, #1
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007750:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007752:	2303      	movs	r3, #3
 8007754:	704b      	strb	r3, [r1, #1]
 8007756:	3801      	subs	r0, #1
 8007758:	2302      	movs	r3, #2
    while (*desc != '\0')
 800775a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800775e:	b905      	cbnz	r5, 8007762 <USBD_GetString+0x2a>
 8007760:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8007768:	3302      	adds	r3, #2
 800776a:	b2db      	uxtb	r3, r3
 800776c:	548c      	strb	r4, [r1, r2]
 800776e:	e7f4      	b.n	800775a <USBD_GetString+0x22>

08007770 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007770:	b510      	push	{r4, lr}
 8007772:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007774:	2202      	movs	r2, #2
 8007776:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800777a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800777c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800777e:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007780:	2100      	movs	r1, #0
 8007782:	f017 fb0d 	bl	801eda0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007786:	2000      	movs	r0, #0
 8007788:	bd10      	pop	{r4, pc}

0800778a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800778a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800778c:	4613      	mov	r3, r2
 800778e:	460a      	mov	r2, r1
 8007790:	2100      	movs	r1, #0
 8007792:	f017 fb05 	bl	801eda0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007796:	2000      	movs	r0, #0
 8007798:	bd08      	pop	{r3, pc}

0800779a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800779a:	b510      	push	{r4, lr}
 800779c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800779e:	2203      	movs	r2, #3
 80077a0:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80077a4:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80077a8:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80077aa:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80077ae:	2100      	movs	r1, #0
 80077b0:	f017 fb04 	bl	801edbc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80077b4:	2000      	movs	r0, #0
 80077b6:	bd10      	pop	{r4, pc}

080077b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80077b8:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ba:	4613      	mov	r3, r2
 80077bc:	460a      	mov	r2, r1
 80077be:	2100      	movs	r1, #0
 80077c0:	f017 fafc 	bl	801edbc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80077c4:	2000      	movs	r0, #0
 80077c6:	bd08      	pop	{r3, pc}

080077c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80077c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077ca:	2304      	movs	r3, #4
 80077cc:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077d0:	2300      	movs	r3, #0
 80077d2:	461a      	mov	r2, r3
 80077d4:	4619      	mov	r1, r3
 80077d6:	f017 fae3 	bl	801eda0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80077da:	2000      	movs	r0, #0
 80077dc:	bd08      	pop	{r3, pc}

080077de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80077de:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077e0:	2305      	movs	r3, #5
 80077e2:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80077e6:	2300      	movs	r3, #0
 80077e8:	461a      	mov	r2, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	f017 fae6 	bl	801edbc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80077f0:	2000      	movs	r0, #0
 80077f2:	bd08      	pop	{r3, pc}

080077f4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80077f4:	4b03      	ldr	r3, [pc, #12]	; (8007804 <disk_status+0x10>)
 80077f6:	181a      	adds	r2, r3, r0
 80077f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80077fc:	7a10      	ldrb	r0, [r2, #8]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	4718      	bx	r3
 8007804:	20000b88 	.word	0x20000b88

08007808 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007808:	4b06      	ldr	r3, [pc, #24]	; (8007824 <disk_initialize+0x1c>)
 800780a:	5c1a      	ldrb	r2, [r3, r0]
 800780c:	b942      	cbnz	r2, 8007820 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800780e:	2201      	movs	r2, #1
 8007810:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007812:	181a      	adds	r2, r3, r0
 8007814:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007818:	7a10      	ldrb	r0, [r2, #8]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4718      	bx	r3
  }
  return stat;
}
 8007820:	2000      	movs	r0, #0
 8007822:	4770      	bx	lr
 8007824:	20000b88 	.word	0x20000b88

08007828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007828:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800782a:	4c05      	ldr	r4, [pc, #20]	; (8007840 <disk_read+0x18>)
 800782c:	1825      	adds	r5, r4, r0
 800782e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007832:	6860      	ldr	r0, [r4, #4]
 8007834:	6884      	ldr	r4, [r0, #8]
 8007836:	7a28      	ldrb	r0, [r5, #8]
 8007838:	46a4      	mov	ip, r4
  return res;
}
 800783a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800783c:	4760      	bx	ip
 800783e:	bf00      	nop
 8007840:	20000b88 	.word	0x20000b88

08007844 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007844:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007846:	4c05      	ldr	r4, [pc, #20]	; (800785c <disk_write+0x18>)
 8007848:	1825      	adds	r5, r4, r0
 800784a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800784e:	6860      	ldr	r0, [r4, #4]
 8007850:	68c4      	ldr	r4, [r0, #12]
 8007852:	7a28      	ldrb	r0, [r5, #8]
 8007854:	46a4      	mov	ip, r4
  return res;
}
 8007856:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007858:	4760      	bx	ip
 800785a:	bf00      	nop
 800785c:	20000b88 	.word	0x20000b88

08007860 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <disk_ioctl+0x18>)
{
 8007862:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007864:	181c      	adds	r4, r3, r0
 8007866:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800786a:	7a20      	ldrb	r0, [r4, #8]
 800786c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800786e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	4718      	bx	r3
 8007876:	bf00      	nop
 8007878:	20000b88 	.word	0x20000b88

0800787c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800787c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800787e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8007880:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8007882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8007886:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800788a:	4770      	bx	lr

0800788c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800788c:	0a0b      	lsrs	r3, r1, #8
 800788e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007890:	7043      	strb	r3, [r0, #1]
 8007892:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007894:	0e09      	lsrs	r1, r1, #24
 8007896:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8007898:	70c1      	strb	r1, [r0, #3]
 800789a:	4770      	bx	lr

0800789c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800789c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800789e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80078a2:	4290      	cmp	r0, r2
 80078a4:	d1fb      	bne.n	800789e <mem_set+0x2>
}
 80078a6:	4770      	bx	lr

080078a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <chk_lock+0x58>)
 80078aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078ac:	2500      	movs	r5, #0
 80078ae:	462a      	mov	r2, r5
 80078b0:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80078b2:	681e      	ldr	r6, [r3, #0]
 80078b4:	b1a6      	cbz	r6, 80078e0 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078b6:	6807      	ldr	r7, [r0, #0]
 80078b8:	42be      	cmp	r6, r7
 80078ba:	d112      	bne.n	80078e2 <chk_lock+0x3a>
 80078bc:	685f      	ldr	r7, [r3, #4]
 80078be:	6886      	ldr	r6, [r0, #8]
 80078c0:	42b7      	cmp	r7, r6
 80078c2:	d10e      	bne.n	80078e2 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80078c4:	689f      	ldr	r7, [r3, #8]
 80078c6:	6946      	ldr	r6, [r0, #20]
 80078c8:	42b7      	cmp	r7, r6
 80078ca:	d10a      	bne.n	80078e2 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078cc:	b9b1      	cbnz	r1, 80078fc <chk_lock+0x54>
 80078ce:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80078d2:	8993      	ldrh	r3, [r2, #12]
 80078d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d8:	bf14      	ite	ne
 80078da:	2000      	movne	r0, #0
 80078dc:	2010      	moveq	r0, #16
 80078de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80078e0:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078e2:	3201      	adds	r2, #1
 80078e4:	2a02      	cmp	r2, #2
 80078e6:	f103 0310 	add.w	r3, r3, #16
 80078ea:	d1e2      	bne.n	80078b2 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078ec:	b10d      	cbz	r5, 80078f2 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078ee:	2000      	movs	r0, #0
 80078f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078f2:	2902      	cmp	r1, #2
 80078f4:	bf0c      	ite	eq
 80078f6:	2000      	moveq	r0, #0
 80078f8:	2012      	movne	r0, #18
 80078fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078fc:	2010      	movs	r0, #16
 80078fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007900:	20000b64 	.word	0x20000b64

08007904 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007904:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <inc_lock+0x74>)
 8007906:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8007908:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800790a:	2300      	movs	r3, #0
 800790c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 800790e:	6814      	ldr	r4, [r2, #0]
 8007910:	42ac      	cmp	r4, r5
 8007912:	d107      	bne.n	8007924 <inc_lock+0x20>
 8007914:	6857      	ldr	r7, [r2, #4]
 8007916:	6884      	ldr	r4, [r0, #8]
 8007918:	42a7      	cmp	r7, r4
 800791a:	d103      	bne.n	8007924 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 800791c:	6897      	ldr	r7, [r2, #8]
 800791e:	6944      	ldr	r4, [r0, #20]
 8007920:	42a7      	cmp	r7, r4
 8007922:	d01d      	beq.n	8007960 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007924:	3301      	adds	r3, #1
 8007926:	2b02      	cmp	r3, #2
 8007928:	f102 0210 	add.w	r2, r2, #16
 800792c:	d1ef      	bne.n	800790e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800792e:	6833      	ldr	r3, [r6, #0]
 8007930:	b113      	cbz	r3, 8007938 <inc_lock+0x34>
 8007932:	6933      	ldr	r3, [r6, #16]
 8007934:	b9eb      	cbnz	r3, 8007972 <inc_lock+0x6e>
 8007936:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8007938:	011c      	lsls	r4, r3, #4
 800793a:	1932      	adds	r2, r6, r4
 800793c:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 800793e:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8007940:	6940      	ldr	r0, [r0, #20]
 8007942:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8007944:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8007946:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8007948:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800794a:	b979      	cbnz	r1, 800796c <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800794c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8007950:	8992      	ldrh	r2, [r2, #12]
 8007952:	3201      	adds	r2, #1
 8007954:	b292      	uxth	r2, r2
 8007956:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 800795a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800795c:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 800795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007960:	2900      	cmp	r1, #0
 8007962:	d0f3      	beq.n	800794c <inc_lock+0x48>
 8007964:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8007968:	8992      	ldrh	r2, [r2, #12]
 800796a:	b912      	cbnz	r2, 8007972 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800796c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007970:	e7f1      	b.n	8007956 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007972:	2000      	movs	r0, #0
 8007974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007976:	bf00      	nop
 8007978:	20000b64 	.word	0x20000b64

0800797c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800797c:	3801      	subs	r0, #1
 800797e:	2801      	cmp	r0, #1
 8007980:	d80e      	bhi.n	80079a0 <dec_lock+0x24>
		n = Files[i].ctr;
 8007982:	4a09      	ldr	r2, [pc, #36]	; (80079a8 <dec_lock+0x2c>)
 8007984:	0103      	lsls	r3, r0, #4
 8007986:	18d1      	adds	r1, r2, r3
 8007988:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 800798a:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800798e:	b280      	uxth	r0, r0
 8007990:	b108      	cbz	r0, 8007996 <dec_lock+0x1a>
 8007992:	1e48      	subs	r0, r1, #1
 8007994:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8007996:	18d1      	adds	r1, r2, r3
 8007998:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800799a:	b918      	cbnz	r0, 80079a4 <dec_lock+0x28>
 800799c:	50d0      	str	r0, [r2, r3]
 800799e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80079a0:	2002      	movs	r0, #2
 80079a2:	4770      	bx	lr
		res = FR_OK;
 80079a4:	2000      	movs	r0, #0
	}
	return res;
}
 80079a6:	4770      	bx	lr
 80079a8:	20000b64 	.word	0x20000b64

080079ac <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079ac:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 80079ae:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079b0:	3b02      	subs	r3, #2
 80079b2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80079b4:	bf3d      	ittte	cc
 80079b6:	8943      	ldrhcc	r3, [r0, #10]
 80079b8:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 80079ba:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079be:	2000      	movcs	r0, #0
}
 80079c0:	4770      	bx	lr

080079c2 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 80079c4:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 80079c6:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079c8:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	fbb1 f1f3 	udiv	r1, r1, r3
 80079d0:	8963      	ldrh	r3, [r4, #10]
 80079d2:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079d6:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80079d8:	b130      	cbz	r0, 80079e8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80079da:	4281      	cmp	r1, r0
 80079dc:	d302      	bcc.n	80079e4 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80079de:	1a09      	subs	r1, r1, r0
 80079e0:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079e2:	e7f8      	b.n	80079d6 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80079e4:	6850      	ldr	r0, [r2, #4]
 80079e6:	4408      	add	r0, r1
}
 80079e8:	bd10      	pop	{r4, pc}

080079ea <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80079ea:	6802      	ldr	r2, [r0, #0]
{
 80079ec:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80079ee:	b152      	cbz	r2, 8007a06 <get_ldnumber+0x1c>
 80079f0:	4611      	mov	r1, r2
 80079f2:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80079f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079f8:	2c20      	cmp	r4, #32
 80079fa:	d90c      	bls.n	8007a16 <get_ldnumber+0x2c>
 80079fc:	2c3a      	cmp	r4, #58	; 0x3a
 80079fe:	d1f8      	bne.n	80079f2 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8007a00:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a02:	428b      	cmp	r3, r1
 8007a04:	d002      	beq.n	8007a0c <get_ldnumber+0x22>
	int vol = -1;
 8007a06:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8007a0a:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	2a30      	cmp	r2, #48	; 0x30
 8007a10:	d1f9      	bne.n	8007a06 <get_ldnumber+0x1c>
					*path = ++tt;
 8007a12:	3301      	adds	r3, #1
 8007a14:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8007a16:	2000      	movs	r0, #0
 8007a18:	bd10      	pop	{r4, pc}

08007a1a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a1a:	b538      	push	{r3, r4, r5, lr}
 8007a1c:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8007a1e:	4604      	mov	r4, r0
 8007a20:	b918      	cbnz	r0, 8007a2a <validate+0x10>
		*fs = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8007a26:	2009      	movs	r0, #9
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0f8      	beq.n	8007a22 <validate+0x8>
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	d0f5      	beq.n	8007a22 <validate+0x8>
 8007a36:	88d9      	ldrh	r1, [r3, #6]
 8007a38:	8882      	ldrh	r2, [r0, #4]
 8007a3a:	4291      	cmp	r1, r2
 8007a3c:	d1f1      	bne.n	8007a22 <validate+0x8>
 8007a3e:	7858      	ldrb	r0, [r3, #1]
 8007a40:	f7ff fed8 	bl	80077f4 <disk_status>
 8007a44:	f010 0001 	ands.w	r0, r0, #1
 8007a48:	d1eb      	bne.n	8007a22 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}

08007a50 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007a50:	3801      	subs	r0, #1
 8007a52:	440a      	add	r2, r1
			*d++ = *s++;
 8007a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a58:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8007a5c:	4291      	cmp	r1, r2
 8007a5e:	d1f9      	bne.n	8007a54 <mem_cpy.part.0+0x4>
}
 8007a60:	4770      	bx	lr

08007a62 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8007a62:	7eca      	ldrb	r2, [r1, #27]
 8007a64:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8007a66:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8007a68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007a6c:	bf01      	itttt	eq
 8007a6e:	7d48      	ldrbeq	r0, [r1, #21]
 8007a70:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007a72:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8007a76:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	4770      	bx	lr

08007a7e <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8007a7e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007a82:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8007a84:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8007a86:	7803      	ldrb	r3, [r0, #0]
 8007a88:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007a8a:	bf01      	itttt	eq
 8007a8c:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007a8e:	750a      	strbeq	r2, [r1, #20]
 8007a90:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8007a92:	754a      	strbeq	r2, [r1, #21]
 8007a94:	4770      	bx	lr

08007a96 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8007a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8007a98:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a9a:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8007a9e:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	7840      	ldrb	r0, [r0, #1]
 8007aa8:	f7ff fecc 	bl	8007844 <disk_write>
 8007aac:	b9a0      	cbnz	r0, 8007ad8 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab0:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8007ab2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ab4:	1aeb      	subs	r3, r5, r3
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d301      	bcc.n	8007abe <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8007aba:	2000      	movs	r0, #0
 8007abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007abe:	78a6      	ldrb	r6, [r4, #2]
 8007ac0:	2e01      	cmp	r6, #1
 8007ac2:	d9fa      	bls.n	8007aba <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8007ac4:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ac6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8007ac8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007aca:	462a      	mov	r2, r5
 8007acc:	2301      	movs	r3, #1
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7ff feb8 	bl	8007844 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ad4:	3e01      	subs	r6, #1
 8007ad6:	e7f3      	b.n	8007ac0 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8007ad8:	2001      	movs	r0, #1
}
 8007ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007adc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007adc:	78c3      	ldrb	r3, [r0, #3]
 8007ade:	b10b      	cbz	r3, 8007ae4 <sync_window+0x8>
 8007ae0:	f7ff bfd9 	b.w	8007a96 <sync_window.part.4>
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	4770      	bx	lr

08007ae8 <sync_fs>:
{
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	4604      	mov	r4, r0
	res = sync_window(fs);
 8007aec:	f7ff fff6 	bl	8007adc <sync_window>
 8007af0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d141      	bne.n	8007b7a <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007af6:	7823      	ldrb	r3, [r4, #0]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d136      	bne.n	8007b6a <sync_fs+0x82>
 8007afc:	7927      	ldrb	r7, [r4, #4]
 8007afe:	2f01      	cmp	r7, #1
 8007b00:	d133      	bne.n	8007b6a <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8007b02:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8007b06:	4601      	mov	r1, r0
 8007b08:	89a2      	ldrh	r2, [r4, #12]
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff fec6 	bl	800789c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8007b10:	2355      	movs	r3, #85	; 0x55
 8007b12:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8007b16:	23aa      	movs	r3, #170	; 0xaa
 8007b18:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8007b1c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8007b1e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8007b20:	2172      	movs	r1, #114	; 0x72
 8007b22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8007b26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8007b2a:	2361      	movs	r3, #97	; 0x61
 8007b2c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8007b30:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8007b34:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 8007b38:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8007b3c:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8007b40:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007b44:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007b48:	6961      	ldr	r1, [r4, #20]
 8007b4a:	f7ff fe9f 	bl	800788c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007b4e:	6921      	ldr	r1, [r4, #16]
 8007b50:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8007b54:	f7ff fe9a 	bl	800788c <st_dword>
			fs->winsect = fs->volbase + 1;
 8007b58:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b5a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8007b5c:	3201      	adds	r2, #1
 8007b5e:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b60:	463b      	mov	r3, r7
 8007b62:	4631      	mov	r1, r6
 8007b64:	f7ff fe6e 	bl	8007844 <disk_write>
			fs->fsi_flag = 0;
 8007b68:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	7860      	ldrb	r0, [r4, #1]
 8007b70:	f7ff fe76 	bl	8007860 <disk_ioctl>
 8007b74:	3000      	adds	r0, #0
 8007b76:	bf18      	it	ne
 8007b78:	2001      	movne	r0, #1
}
 8007b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b7c <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007b7e:	428b      	cmp	r3, r1
{
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4606      	mov	r6, r0
 8007b84:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b86:	d012      	beq.n	8007bae <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8007b88:	f7ff ffa8 	bl	8007adc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	b960      	cbnz	r0, 8007baa <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b90:	462a      	mov	r2, r5
 8007b92:	2301      	movs	r3, #1
 8007b94:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8007b98:	7870      	ldrb	r0, [r6, #1]
 8007b9a:	f7ff fe45 	bl	8007828 <disk_read>
 8007b9e:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8007ba0:	bf1c      	itt	ne
 8007ba2:	f04f 35ff 	movne.w	r5, #4294967295
 8007ba6:	2401      	movne	r4, #1
			fs->winsect = sector;
 8007ba8:	6335      	str	r5, [r6, #48]	; 0x30
}
 8007baa:	4620      	mov	r0, r4
 8007bac:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8007bae:	2400      	movs	r4, #0
 8007bb0:	e7fb      	b.n	8007baa <move_window+0x2e>
	...

08007bb4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007bb4:	2300      	movs	r3, #0
{
 8007bb6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007bb8:	70c3      	strb	r3, [r0, #3]
 8007bba:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbe:	6303      	str	r3, [r0, #48]	; 0x30
{
 8007bc0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007bc2:	f7ff ffdb 	bl	8007b7c <move_window>
 8007bc6:	bb30      	cbnz	r0, 8007c16 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8007bc8:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8007bcc:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8007bd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007bd4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d11e      	bne.n	8007c1a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007bdc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007be0:	2be9      	cmp	r3, #233	; 0xe9
 8007be2:	d005      	beq.n	8007bf0 <check_fs+0x3c>
 8007be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007be6:	4a10      	ldr	r2, [pc, #64]	; (8007c28 <check_fs+0x74>)
 8007be8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d116      	bne.n	8007c1e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bf0:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8007bf4:	f7ff fe42 	bl	800787c <ld_dword>
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <check_fs+0x78>)
 8007bfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007bfe:	4298      	cmp	r0, r3
 8007c00:	d00f      	beq.n	8007c22 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c02:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8007c06:	f7ff fe39 	bl	800787c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <check_fs+0x7c>)
 8007c0c:	4298      	cmp	r0, r3
 8007c0e:	bf14      	ite	ne
 8007c10:	2002      	movne	r0, #2
 8007c12:	2000      	moveq	r0, #0
 8007c14:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c16:	2004      	movs	r0, #4
 8007c18:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c1a:	2003      	movs	r0, #3
 8007c1c:	bd10      	pop	{r4, pc}
	return 2;
 8007c1e:	2002      	movs	r0, #2
 8007c20:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c22:	2000      	movs	r0, #0
}
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	bf00      	nop
 8007c28:	009000eb 	.word	0x009000eb
 8007c2c:	00544146 	.word	0x00544146
 8007c30:	33544146 	.word	0x33544146

08007c34 <find_volume>:
{
 8007c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8007c38:	2300      	movs	r3, #0
{
 8007c3a:	b085      	sub	sp, #20
	*rfs = 0;
 8007c3c:	600b      	str	r3, [r1, #0]
{
 8007c3e:	460f      	mov	r7, r1
 8007c40:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8007c42:	f7ff fed2 	bl	80079ea <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c46:	1e06      	subs	r6, r0, #0
 8007c48:	f2c0 815e 	blt.w	8007f08 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c4c:	4bb2      	ldr	r3, [pc, #712]	; (8007f18 <find_volume+0x2e4>)
 8007c4e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c52:	2c00      	cmp	r4, #0
 8007c54:	f000 815a 	beq.w	8007f0c <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8007c58:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c5a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c5c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c60:	b173      	cbz	r3, 8007c80 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8007c62:	7860      	ldrb	r0, [r4, #1]
 8007c64:	f7ff fdc6 	bl	80077f4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c68:	07c1      	lsls	r1, r0, #31
 8007c6a:	d409      	bmi.n	8007c80 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c6c:	2d00      	cmp	r5, #0
 8007c6e:	f000 814f 	beq.w	8007f10 <find_volume+0x2dc>
 8007c72:	f010 0004 	ands.w	r0, r0, #4
 8007c76:	d000      	beq.n	8007c7a <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8007c78:	200a      	movs	r0, #10
}
 8007c7a:	b005      	add	sp, #20
 8007c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8007c80:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c82:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8007c84:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c86:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c88:	f7ff fdbe 	bl	8007808 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c8c:	07c2      	lsls	r2, r0, #31
 8007c8e:	f100 8141 	bmi.w	8007f14 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007c92:	b10d      	cbz	r5, 8007c98 <find_volume+0x64>
 8007c94:	0743      	lsls	r3, r0, #29
 8007c96:	d4ef      	bmi.n	8007c78 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007c98:	f104 020c 	add.w	r2, r4, #12
 8007c9c:	2102      	movs	r1, #2
 8007c9e:	7860      	ldrb	r0, [r4, #1]
 8007ca0:	f7ff fdde 	bl	8007860 <disk_ioctl>
 8007ca4:	b108      	cbz	r0, 8007caa <find_volume+0x76>
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e7e7      	b.n	8007c7a <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8007cb0:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8007cb4:	d8f7      	bhi.n	8007ca6 <find_volume+0x72>
 8007cb6:	1e5e      	subs	r6, r3, #1
 8007cb8:	401e      	ands	r6, r3
 8007cba:	d1f4      	bne.n	8007ca6 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7ff ff78 	bl	8007bb4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007cc4:	2802      	cmp	r0, #2
 8007cc6:	f040 8101 	bne.w	8007ecc <find_volume+0x298>
 8007cca:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007cce:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8007cd2:	b110      	cbz	r0, 8007cda <find_volume+0xa6>
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	f7ff fdd1 	bl	800787c <ld_dword>
 8007cda:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cde:	3601      	adds	r6, #1
 8007ce0:	2e04      	cmp	r6, #4
 8007ce2:	f101 0110 	add.w	r1, r1, #16
 8007ce6:	d1f2      	bne.n	8007cce <find_volume+0x9a>
 8007ce8:	2500      	movs	r5, #0
			bsect = br[i];
 8007cea:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	f000 80e4 	beq.w	8007ebc <find_volume+0x288>
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f7ff ff5c 	bl	8007bb4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007cfc:	2801      	cmp	r0, #1
 8007cfe:	f200 80de 	bhi.w	8007ebe <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8007d02:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007d06:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d0a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8007d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007d12:	4598      	cmp	r8, r3
 8007d14:	f040 80e0 	bne.w	8007ed8 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8007d18:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8007d1c:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d20:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8007d24:	d104      	bne.n	8007d30 <find_volume+0xfc>
 8007d26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d2a:	f7ff fda7 	bl	800787c <ld_dword>
 8007d2e:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d30:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8007d34:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d36:	1e7b      	subs	r3, r7, #1
 8007d38:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d3a:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d3c:	f200 80cc 	bhi.w	8007ed8 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007d40:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8007d44:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007d48:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007d4a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80c3 	beq.w	8007ed8 <find_volume+0x2a4>
 8007d52:	f109 33ff 	add.w	r3, r9, #4294967295
 8007d56:	ea13 0f09 	tst.w	r3, r9
 8007d5a:	f040 80bd 	bne.w	8007ed8 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8007d5e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007d62:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8007d66:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d6a:	ea4f 1358 	mov.w	r3, r8, lsr #5
 8007d6e:	fbba fbf3 	udiv	fp, sl, r3
 8007d72:	fb03 a31b 	mls	r3, r3, fp, sl
 8007d76:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d78:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 80ab 	bne.w	8007ed8 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8007d82:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8007d86:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d8a:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 8007d8e:	d103      	bne.n	8007d98 <find_volume+0x164>
 8007d90:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007d94:	f7ff fd72 	bl	800787c <ld_dword>
	rv = rv << 8 | ptr[0];
 8007d98:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d9c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007da0:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8007da4:	f000 8098 	beq.w	8007ed8 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007da8:	fa12 f38b 	uxtah	r3, r2, fp
 8007dac:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007dae:	4298      	cmp	r0, r3
 8007db0:	f0c0 8092 	bcc.w	8007ed8 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007db4:	1ac5      	subs	r5, r0, r3
 8007db6:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	f000 808c 	beq.w	8007ed8 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007dc0:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8007dc4:	4285      	cmp	r5, r0
 8007dc6:	f200 8089 	bhi.w	8007edc <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007dca:	f640 79f5 	movw	r9, #4085	; 0xff5
 8007dce:	454d      	cmp	r5, r9
 8007dd0:	bf8c      	ite	hi
 8007dd2:	f04f 0902 	movhi.w	r9, #2
 8007dd6:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007dda:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ddc:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8007dde:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8007de0:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007de4:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007de6:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007de8:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007dea:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007dec:	d179      	bne.n	8007ee2 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8007dee:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8007df2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007df6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8007dfa:	d16d      	bne.n	8007ed8 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007dfc:	f1ba 0f00 	cmp.w	sl, #0
 8007e00:	d16a      	bne.n	8007ed8 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007e02:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8007e06:	f7ff fd39 	bl	800787c <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007e0a:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007e0c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e0e:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e12:	441d      	add	r5, r3
 8007e14:	fbb5 f8f8 	udiv	r8, r5, r8
 8007e18:	4541      	cmp	r1, r8
 8007e1a:	d35d      	bcc.n	8007ed8 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e20:	6163      	str	r3, [r4, #20]
 8007e22:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e24:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8007e28:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007e2c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e2e:	d12f      	bne.n	8007e90 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8007e30:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8007e34:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8007e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d127      	bne.n	8007e90 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e40:	1c71      	adds	r1, r6, #1
 8007e42:	4620      	mov	r0, r4
 8007e44:	f7ff fe9a 	bl	8007b7c <move_window>
 8007e48:	bb10      	cbnz	r0, 8007e90 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8007e4a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8007e4e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8007e52:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8007e54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e58:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d117      	bne.n	8007e90 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e60:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007e64:	f7ff fd0a 	bl	800787c <ld_dword>
 8007e68:	4b2c      	ldr	r3, [pc, #176]	; (8007f1c <find_volume+0x2e8>)
 8007e6a:	4298      	cmp	r0, r3
 8007e6c:	d110      	bne.n	8007e90 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e6e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8007e72:	f7ff fd03 	bl	800787c <ld_dword>
 8007e76:	4b2a      	ldr	r3, [pc, #168]	; (8007f20 <find_volume+0x2ec>)
 8007e78:	4298      	cmp	r0, r3
 8007e7a:	d109      	bne.n	8007e90 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007e7c:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007e80:	f7ff fcfc 	bl	800787c <ld_dword>
 8007e84:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007e86:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8007e8a:	f7ff fcf7 	bl	800787c <ld_dword>
 8007e8e:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e90:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8007e92:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e96:	8813      	ldrh	r3, [r2, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	8013      	strh	r3, [r2, #0]
 8007e9e:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <find_volume+0x2f4>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4294      	cmp	r4, r2
 8007ea6:	bf04      	itt	eq
 8007ea8:	2200      	moveq	r2, #0
 8007eaa:	601a      	streq	r2, [r3, #0]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	4294      	cmp	r4, r2
 8007eb0:	f04f 0000 	mov.w	r0, #0
 8007eb4:	f47f aee1 	bne.w	8007c7a <find_volume+0x46>
 8007eb8:	6118      	str	r0, [r3, #16]
 8007eba:	e6de      	b.n	8007c7a <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ebc:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ebe:	3501      	adds	r5, #1
 8007ec0:	2d04      	cmp	r5, #4
 8007ec2:	f47f af12 	bne.w	8007cea <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ec6:	2804      	cmp	r0, #4
 8007ec8:	d106      	bne.n	8007ed8 <find_volume+0x2a4>
 8007eca:	e6ec      	b.n	8007ca6 <find_volume+0x72>
 8007ecc:	2804      	cmp	r0, #4
 8007ece:	f43f aeea 	beq.w	8007ca6 <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007ed2:	2801      	cmp	r0, #1
 8007ed4:	f67f af15 	bls.w	8007d02 <find_volume+0xce>
 8007ed8:	200d      	movs	r0, #13
 8007eda:	e6ce      	b.n	8007c7a <find_volume+0x46>
		fmt = FS_FAT32;
 8007edc:	f04f 0903 	mov.w	r9, #3
 8007ee0:	e77b      	b.n	8007dda <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ee2:	f1ba 0f00 	cmp.w	sl, #0
 8007ee6:	d0f7      	beq.n	8007ed8 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ee8:	f1b9 0f02 	cmp.w	r9, #2
 8007eec:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8007ef0:	bf18      	it	ne
 8007ef2:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ef4:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ef6:	bf18      	it	ne
 8007ef8:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007efc:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007efe:	bf0c      	ite	eq
 8007f00:	4605      	moveq	r5, r0
 8007f02:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8007f06:	e782      	b.n	8007e0e <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f08:	200b      	movs	r0, #11
 8007f0a:	e6b6      	b.n	8007c7a <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f0c:	200c      	movs	r0, #12
 8007f0e:	e6b4      	b.n	8007c7a <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8007f10:	4628      	mov	r0, r5
 8007f12:	e6b2      	b.n	8007c7a <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f14:	2003      	movs	r0, #3
 8007f16:	e6b0      	b.n	8007c7a <find_volume+0x46>
 8007f18:	20000b60 	.word	0x20000b60
 8007f1c:	41615252 	.word	0x41615252
 8007f20:	61417272 	.word	0x61417272
 8007f24:	20000b84 	.word	0x20000b84
 8007f28:	20000b64 	.word	0x20000b64

08007f2c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f2c:	2901      	cmp	r1, #1
{
 8007f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f38:	f240 808a 	bls.w	8008050 <put_fat+0x124>
 8007f3c:	6983      	ldr	r3, [r0, #24]
 8007f3e:	4299      	cmp	r1, r3
 8007f40:	f080 8086 	bcs.w	8008050 <put_fat+0x124>
		switch (fs->fs_type) {
 8007f44:	7803      	ldrb	r3, [r0, #0]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d049      	beq.n	8007fde <put_fat+0xb2>
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d060      	beq.n	8008010 <put_fat+0xe4>
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d17e      	bne.n	8008050 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8007f52:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f56:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007f58:	8983      	ldrh	r3, [r0, #12]
 8007f5a:	fbba f3f3 	udiv	r3, sl, r3
 8007f5e:	4419      	add	r1, r3
 8007f60:	f7ff fe0c 	bl	8007b7c <move_window>
 8007f64:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8007f66:	bb78      	cbnz	r0, 8007fc8 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	fbba f2f3 	udiv	r2, sl, r3
 8007f6e:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8007f72:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f76:	f015 0501 	ands.w	r5, r5, #1
 8007f7a:	bf1f      	itttt	ne
 8007f7c:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8007f80:	f003 010f 	andne.w	r1, r3, #15
 8007f84:	013b      	lslne	r3, r7, #4
 8007f86:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8007f8a:	bf14      	ite	ne
 8007f8c:	430b      	orrne	r3, r1
 8007f8e:	b2fb      	uxtbeq	r3, r7
 8007f90:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8007f96:	2301      	movs	r3, #1
 8007f98:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8007f9a:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	fbb9 f3f3 	udiv	r3, r9, r3
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	4419      	add	r1, r3
 8007fa8:	f7ff fde8 	bl	8007b7c <move_window>
			if (res != FR_OK) break;
 8007fac:	4606      	mov	r6, r0
 8007fae:	b958      	cbnz	r0, 8007fc8 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	fbb9 f2f3 	udiv	r2, r9, r3
 8007fb6:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007fba:	b145      	cbz	r5, 8007fce <put_fat+0xa2>
 8007fbc:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8007fc0:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	70e3      	strb	r3, [r4, #3]
}
 8007fc8:	4630      	mov	r0, r6
 8007fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007fce:	f818 3002 	ldrb.w	r3, [r8, r2]
 8007fd2:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8007fd6:	f023 030f 	bic.w	r3, r3, #15
 8007fda:	431f      	orrs	r7, r3
 8007fdc:	e7f0      	b.n	8007fc0 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007fde:	8983      	ldrh	r3, [r0, #12]
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fe6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007fe8:	4419      	add	r1, r3
 8007fea:	f7ff fdc7 	bl	8007b7c <move_window>
			if (res != FR_OK) break;
 8007fee:	4606      	mov	r6, r0
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d1e9      	bne.n	8007fc8 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007ff4:	89a1      	ldrh	r1, [r4, #12]
 8007ff6:	006d      	lsls	r5, r5, #1
 8007ff8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8007ffc:	fbb5 f3f1 	udiv	r3, r5, r1
 8008000:	fb01 5513 	mls	r5, r1, r3, r5
 8008004:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8008006:	5557      	strb	r7, [r2, r5]
 8008008:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800800c:	705f      	strb	r7, [r3, #1]
 800800e:	e7d9      	b.n	8007fc4 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008010:	8983      	ldrh	r3, [r0, #12]
 8008012:	089b      	lsrs	r3, r3, #2
 8008014:	fbb1 f3f3 	udiv	r3, r1, r3
 8008018:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800801a:	4419      	add	r1, r3
 800801c:	f7ff fdae 	bl	8007b7c <move_window>
			if (res != FR_OK) break;
 8008020:	4606      	mov	r6, r0
 8008022:	2800      	cmp	r0, #0
 8008024:	d1d0      	bne.n	8007fc8 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008026:	89a1      	ldrh	r1, [r4, #12]
 8008028:	00ad      	lsls	r5, r5, #2
 800802a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800802e:	fbb5 f2f1 	udiv	r2, r5, r1
 8008032:	fb01 5512 	mls	r5, r1, r2, r5
 8008036:	441d      	add	r5, r3
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff fc1f 	bl	800787c <ld_dword>
 800803e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8008042:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008046:	4339      	orrs	r1, r7
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff fc1f 	bl	800788c <st_dword>
 800804e:	e7b9      	b.n	8007fc4 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8008050:	2602      	movs	r6, #2
 8008052:	e7b9      	b.n	8007fc8 <put_fat+0x9c>

08008054 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008054:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8008056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800805c:	d968      	bls.n	8008130 <get_fat.isra.8+0xdc>
 800805e:	6983      	ldr	r3, [r0, #24]
 8008060:	4299      	cmp	r1, r3
 8008062:	d265      	bcs.n	8008130 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 8008064:	7803      	ldrb	r3, [r0, #0]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d032      	beq.n	80080d0 <get_fat.isra.8+0x7c>
 800806a:	2b03      	cmp	r3, #3
 800806c:	d048      	beq.n	8008100 <get_fat.isra.8+0xac>
 800806e:	2b01      	cmp	r3, #1
 8008070:	d15e      	bne.n	8008130 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 8008072:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008076:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008078:	8983      	ldrh	r3, [r0, #12]
 800807a:	fbb5 f3f3 	udiv	r3, r5, r3
 800807e:	4419      	add	r1, r3
 8008080:	f7ff fd7c 	bl	8007b7c <move_window>
 8008084:	b110      	cbz	r0, 800808c <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800808c:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800808e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8008090:	fbb5 f2f1 	udiv	r2, r5, r1
 8008094:	fb01 5212 	mls	r2, r1, r2, r5
 8008098:	4422      	add	r2, r4
 800809a:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800809c:	4620      	mov	r0, r4
 800809e:	fbb7 f1f1 	udiv	r1, r7, r1
 80080a2:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 80080a4:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080a8:	f7ff fd68 	bl	8007b7c <move_window>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d1ea      	bne.n	8008086 <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 80080b0:	89a2      	ldrh	r2, [r4, #12]
 80080b2:	fbb7 f3f2 	udiv	r3, r7, r2
 80080b6:	fb02 7313 	mls	r3, r2, r3, r7
 80080ba:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80080bc:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80080be:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80080c2:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80080c6:	bf4c      	ite	mi
 80080c8:	0900      	lsrmi	r0, r0, #4
 80080ca:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80080ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080d0:	8983      	ldrh	r3, [r0, #12]
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80080d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80080da:	4419      	add	r1, r3
 80080dc:	f7ff fd4e 	bl	8007b7c <move_window>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d1d0      	bne.n	8008086 <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080e4:	89a1      	ldrh	r1, [r4, #12]
 80080e6:	0076      	lsls	r6, r6, #1
 80080e8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80080ec:	fbb6 f3f1 	udiv	r3, r6, r1
 80080f0:	fb01 6613 	mls	r6, r1, r3, r6
 80080f4:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 80080f6:	5d90      	ldrb	r0, [r2, r6]
 80080f8:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080fa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80080fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008100:	8983      	ldrh	r3, [r0, #12]
 8008102:	089b      	lsrs	r3, r3, #2
 8008104:	fbb1 f3f3 	udiv	r3, r1, r3
 8008108:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800810a:	4419      	add	r1, r3
 800810c:	f7ff fd36 	bl	8007b7c <move_window>
 8008110:	2800      	cmp	r0, #0
 8008112:	d1b8      	bne.n	8008086 <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008114:	89a2      	ldrh	r2, [r4, #12]
 8008116:	00b6      	lsls	r6, r6, #2
 8008118:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800811c:	fbb6 f3f2 	udiv	r3, r6, r2
 8008120:	fb02 6613 	mls	r6, r2, r3, r6
 8008124:	4430      	add	r0, r6
 8008126:	f7ff fba9 	bl	800787c <ld_dword>
 800812a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800812e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8008130:	2001      	movs	r0, #1
}
 8008132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008134 <create_chain>:
{
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800813a:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800813c:	460f      	mov	r7, r1
 800813e:	b971      	cbnz	r1, 800815e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008140:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008142:	b1f6      	cbz	r6, 8008182 <create_chain+0x4e>
 8008144:	69ab      	ldr	r3, [r5, #24]
 8008146:	429e      	cmp	r6, r3
 8008148:	bf28      	it	cs
 800814a:	2601      	movcs	r6, #1
 800814c:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800814e:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 8008150:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008152:	429c      	cmp	r4, r3
 8008154:	d318      	bcc.n	8008188 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8008156:	2e01      	cmp	r6, #1
 8008158:	d815      	bhi.n	8008186 <create_chain+0x52>
 800815a:	2400      	movs	r4, #0
 800815c:	e009      	b.n	8008172 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800815e:	4628      	mov	r0, r5
 8008160:	f7ff ff78 	bl	8008054 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008164:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008166:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008168:	d937      	bls.n	80081da <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d104      	bne.n	8008178 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800816e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8008172:	4620      	mov	r0, r4
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008178:	69ab      	ldr	r3, [r5, #24]
 800817a:	4298      	cmp	r0, r3
 800817c:	d3f9      	bcc.n	8008172 <create_chain+0x3e>
 800817e:	463e      	mov	r6, r7
 8008180:	e7e4      	b.n	800814c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008182:	2601      	movs	r6, #1
 8008184:	e7e2      	b.n	800814c <create_chain+0x18>
				ncl = 2;
 8008186:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008188:	4621      	mov	r1, r4
 800818a:	f8d8 0000 	ldr.w	r0, [r8]
 800818e:	f7ff ff61 	bl	8008054 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8008192:	b130      	cbz	r0, 80081a2 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008194:	2801      	cmp	r0, #1
 8008196:	d020      	beq.n	80081da <create_chain+0xa6>
 8008198:	3001      	adds	r0, #1
 800819a:	d0e8      	beq.n	800816e <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800819c:	42b4      	cmp	r4, r6
 800819e:	d1d6      	bne.n	800814e <create_chain+0x1a>
 80081a0:	e7db      	b.n	800815a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7ff febf 	bl	8007f2c <put_fat>
		if (res == FR_OK && clst != 0) {
 80081ae:	b990      	cbnz	r0, 80081d6 <create_chain+0xa2>
 80081b0:	b957      	cbnz	r7, 80081c8 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80081b2:	69aa      	ldr	r2, [r5, #24]
 80081b4:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 80081b6:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80081b8:	3a02      	subs	r2, #2
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d90f      	bls.n	80081de <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80081be:	792b      	ldrb	r3, [r5, #4]
 80081c0:	f043 0301 	orr.w	r3, r3, #1
 80081c4:	712b      	strb	r3, [r5, #4]
 80081c6:	e7d4      	b.n	8008172 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80081c8:	4622      	mov	r2, r4
 80081ca:	4639      	mov	r1, r7
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7ff fead 	bl	8007f2c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d0ed      	beq.n	80081b2 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80081d6:	2801      	cmp	r0, #1
 80081d8:	d0c9      	beq.n	800816e <create_chain+0x3a>
 80081da:	2401      	movs	r4, #1
 80081dc:	e7c9      	b.n	8008172 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80081de:	3b01      	subs	r3, #1
 80081e0:	616b      	str	r3, [r5, #20]
 80081e2:	e7ec      	b.n	80081be <create_chain+0x8a>

080081e4 <remove_chain>:
{
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80081e8:	2d01      	cmp	r5, #1
{
 80081ea:	4607      	mov	r7, r0
 80081ec:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80081ee:	d801      	bhi.n	80081f4 <remove_chain+0x10>
 80081f0:	2002      	movs	r0, #2
 80081f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 80081f4:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80081f6:	69a3      	ldr	r3, [r4, #24]
 80081f8:	429d      	cmp	r5, r3
 80081fa:	d2f9      	bcs.n	80081f0 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80081fc:	b12a      	cbz	r2, 800820a <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80081fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008202:	4620      	mov	r0, r4
 8008204:	f7ff fe92 	bl	8007f2c <put_fat>
		if (res != FR_OK) return res;
 8008208:	bb08      	cbnz	r0, 800824e <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800820a:	4629      	mov	r1, r5
 800820c:	6838      	ldr	r0, [r7, #0]
 800820e:	f7ff ff21 	bl	8008054 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8008212:	4606      	mov	r6, r0
 8008214:	b908      	cbnz	r0, 800821a <remove_chain+0x36>
	return FR_OK;
 8008216:	2000      	movs	r0, #0
 8008218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800821a:	2801      	cmp	r0, #1
 800821c:	d0e8      	beq.n	80081f0 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d014      	beq.n	800824c <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008222:	2200      	movs	r2, #0
 8008224:	4629      	mov	r1, r5
 8008226:	4620      	mov	r0, r4
 8008228:	f7ff fe80 	bl	8007f2c <put_fat>
			if (res != FR_OK) return res;
 800822c:	b978      	cbnz	r0, 800824e <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800822e:	69a2      	ldr	r2, [r4, #24]
 8008230:	6963      	ldr	r3, [r4, #20]
 8008232:	1e91      	subs	r1, r2, #2
 8008234:	428b      	cmp	r3, r1
 8008236:	d205      	bcs.n	8008244 <remove_chain+0x60>
			fs->free_clst++;
 8008238:	3301      	adds	r3, #1
 800823a:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800823c:	7923      	ldrb	r3, [r4, #4]
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008244:	4296      	cmp	r6, r2
 8008246:	4635      	mov	r5, r6
 8008248:	d3df      	bcc.n	800820a <remove_chain+0x26>
 800824a:	e7e4      	b.n	8008216 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800824c:	2001      	movs	r0, #1
}
 800824e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008250 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008250:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8008252:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8008254:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8008256:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8008258:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800825a:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800825c:	b992      	cbnz	r2, 8008284 <dir_sdi.constprop.11+0x34>
 800825e:	7823      	ldrb	r3, [r4, #0]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d901      	bls.n	8008268 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8008264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008266:	b973      	cbnz	r3, 8008286 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008268:	8923      	ldrh	r3, [r4, #8]
 800826a:	b90b      	cbnz	r3, 8008270 <dir_sdi.constprop.11+0x20>
 800826c:	2002      	movs	r0, #2
 800826e:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8008270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008272:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8008274:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8008276:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0f7      	beq.n	800826c <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800827c:	3434      	adds	r4, #52	; 0x34
 800827e:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8008280:	2000      	movs	r0, #0
 8008282:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008284:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008286:	8961      	ldrh	r1, [r4, #10]
 8008288:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800828a:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800828c:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800828e:	d10c      	bne.n	80082aa <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008290:	4611      	mov	r1, r2
 8008292:	6828      	ldr	r0, [r5, #0]
 8008294:	f7ff fede 	bl	8008054 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008298:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800829a:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800829c:	d00b      	beq.n	80082b6 <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800829e:	2801      	cmp	r0, #1
 80082a0:	d9e4      	bls.n	800826c <dir_sdi.constprop.11+0x1c>
 80082a2:	69a3      	ldr	r3, [r4, #24]
 80082a4:	4298      	cmp	r0, r3
 80082a6:	d3f3      	bcc.n	8008290 <dir_sdi.constprop.11+0x40>
 80082a8:	e7e0      	b.n	800826c <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 80082aa:	4619      	mov	r1, r3
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7ff fb7d 	bl	80079ac <clust2sect>
 80082b2:	61e8      	str	r0, [r5, #28]
 80082b4:	e7de      	b.n	8008274 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082b6:	2001      	movs	r0, #1
}
 80082b8:	bd38      	pop	{r3, r4, r5, pc}

080082ba <dir_next>:
{
 80082ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80082be:	69c3      	ldr	r3, [r0, #28]
{
 80082c0:	4605      	mov	r5, r0
 80082c2:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80082c4:	b1b3      	cbz	r3, 80082f4 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80082c6:	6947      	ldr	r7, [r0, #20]
 80082c8:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80082ca:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 80082ce:	d211      	bcs.n	80082f4 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 80082d0:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80082d2:	89a2      	ldrh	r2, [r4, #12]
 80082d4:	fbb7 f0f2 	udiv	r0, r7, r2
 80082d8:	fb02 7210 	mls	r2, r2, r0, r7
 80082dc:	2a00      	cmp	r2, #0
 80082de:	d14f      	bne.n	8008380 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 80082e0:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 80082e2:	3301      	adds	r3, #1
 80082e4:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 80082e6:	b941      	cbnz	r1, 80082fa <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80082e8:	8923      	ldrh	r3, [r4, #8]
 80082ea:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80082ee:	d847      	bhi.n	8008380 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80082f4:	2004      	movs	r0, #4
 80082f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80082fa:	8963      	ldrh	r3, [r4, #10]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	4203      	tst	r3, r0
 8008300:	d13e      	bne.n	8008380 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008302:	4620      	mov	r0, r4
 8008304:	f7ff fea6 	bl	8008054 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008308:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800830a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800830c:	d802      	bhi.n	8008314 <dir_next+0x5a>
 800830e:	2002      	movs	r0, #2
 8008310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008314:	1c42      	adds	r2, r0, #1
 8008316:	d102      	bne.n	800831e <dir_next+0x64>
 8008318:	2001      	movs	r0, #1
 800831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800831e:	69a3      	ldr	r3, [r4, #24]
 8008320:	4298      	cmp	r0, r3
 8008322:	d327      	bcc.n	8008374 <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 8008324:	f1b8 0f00 	cmp.w	r8, #0
 8008328:	d0e2      	beq.n	80082f0 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800832a:	69a9      	ldr	r1, [r5, #24]
 800832c:	4628      	mov	r0, r5
 800832e:	f7ff ff01 	bl	8008134 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008332:	4606      	mov	r6, r0
 8008334:	2800      	cmp	r0, #0
 8008336:	d03d      	beq.n	80083b4 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008338:	2801      	cmp	r0, #1
 800833a:	d0e8      	beq.n	800830e <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d0eb      	beq.n	8008318 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008340:	4620      	mov	r0, r4
 8008342:	f7ff fbcb 	bl	8007adc <sync_window>
 8008346:	4680      	mov	r8, r0
 8008348:	2800      	cmp	r0, #0
 800834a:	d1e5      	bne.n	8008318 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800834c:	4601      	mov	r1, r0
 800834e:	89a2      	ldrh	r2, [r4, #12]
 8008350:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008354:	f7ff faa2 	bl	800789c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008358:	4631      	mov	r1, r6
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff fb26 	bl	80079ac <clust2sect>
						fs->wflag = 1;
 8008360:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008364:	6320      	str	r0, [r4, #48]	; 0x30
 8008366:	8963      	ldrh	r3, [r4, #10]
 8008368:	4598      	cmp	r8, r3
 800836a:	d316      	bcc.n	800839a <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 800836c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800836e:	eba3 0308 	sub.w	r3, r3, r8
 8008372:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8008374:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8008376:	4631      	mov	r1, r6
 8008378:	4620      	mov	r0, r4
 800837a:	f7ff fb17 	bl	80079ac <clust2sect>
 800837e:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008380:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 8008382:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008384:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8008388:	fbb7 f2f1 	udiv	r2, r7, r1
 800838c:	fb01 7712 	mls	r7, r1, r2, r7
 8008390:	441f      	add	r7, r3
 8008392:	622f      	str	r7, [r5, #32]
	return FR_OK;
 8008394:	2000      	movs	r0, #0
 8008396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 800839a:	f884 9003 	strb.w	r9, [r4, #3]
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fb79 	bl	8007a96 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d1b7      	bne.n	8008318 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083aa:	3301      	adds	r3, #1
 80083ac:	f108 0801 	add.w	r8, r8, #1
 80083b0:	6323      	str	r3, [r4, #48]	; 0x30
 80083b2:	e7d8      	b.n	8008366 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083b4:	2007      	movs	r0, #7
}
 80083b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080083bc <follow_path>:
{
 80083bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80083c0:	6806      	ldr	r6, [r0, #0]
{
 80083c2:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80083c4:	780b      	ldrb	r3, [r1, #0]
 80083c6:	2b2f      	cmp	r3, #47	; 0x2f
 80083c8:	460d      	mov	r5, r1
 80083ca:	f101 0101 	add.w	r1, r1, #1
 80083ce:	d0f9      	beq.n	80083c4 <follow_path+0x8>
 80083d0:	2b5c      	cmp	r3, #92	; 0x5c
 80083d2:	d0f7      	beq.n	80083c4 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80083d4:	2300      	movs	r3, #0
 80083d6:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80083d8:	782b      	ldrb	r3, [r5, #0]
 80083da:	2b1f      	cmp	r3, #31
 80083dc:	d959      	bls.n	8008492 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80083de:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8008540 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 80083e2:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 80083e6:	220b      	movs	r2, #11
 80083e8:	2120      	movs	r1, #32
 80083ea:	4638      	mov	r0, r7
 80083ec:	f7ff fa56 	bl	800789c <mem_set>
	si = i = 0; ni = 8;
 80083f0:	2200      	movs	r2, #0
 80083f2:	f105 3eff 	add.w	lr, r5, #4294967295
 80083f6:	4611      	mov	r1, r2
 80083f8:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 80083fa:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80083fe:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8008400:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008404:	d90b      	bls.n	800841e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008406:	2b2f      	cmp	r3, #47	; 0x2f
 8008408:	d14b      	bne.n	80084a2 <follow_path+0xe6>
 800840a:	1868      	adds	r0, r5, r1
 800840c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800840e:	f810 eb01 	ldrb.w	lr, [r0], #1
 8008412:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8008416:	d0f9      	beq.n	800840c <follow_path+0x50>
 8008418:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 800841c:	d0f6      	beq.n	800840c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800841e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008420:	2a00      	cmp	r2, #0
 8008422:	d054      	beq.n	80084ce <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008424:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8008428:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800842c:	2ae5      	cmp	r2, #229	; 0xe5
 800842e:	bf04      	itt	eq
 8008430:	2205      	moveq	r2, #5
 8008432:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008436:	2b21      	cmp	r3, #33	; 0x21
 8008438:	bf34      	ite	cc
 800843a:	2304      	movcc	r3, #4
 800843c:	2300      	movcs	r3, #0
 800843e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008442:	4620      	mov	r0, r4
 8008444:	f7ff ff04 	bl	8008250 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8008448:	2800      	cmp	r0, #0
 800844a:	d145      	bne.n	80084d8 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 800844c:	69e1      	ldr	r1, [r4, #28]
 800844e:	4648      	mov	r0, r9
 8008450:	f7ff fb94 	bl	8007b7c <move_window>
		if (res != FR_OK) break;
 8008454:	2800      	cmp	r0, #0
 8008456:	d13f      	bne.n	80084d8 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8008458:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	2a00      	cmp	r2, #0
 800845e:	d046      	beq.n	80084ee <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008460:	7ada      	ldrb	r2, [r3, #11]
 8008462:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008466:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008468:	7ada      	ldrb	r2, [r3, #11]
 800846a:	0711      	lsls	r1, r2, #28
 800846c:	d40c      	bmi.n	8008488 <follow_path+0xcc>
 800846e:	f103 0e0b 	add.w	lr, r3, #11
 8008472:	4639      	mov	r1, r7
		r = *d++ - *s++;
 8008474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008478:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 800847c:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 800847e:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8008482:	d027      	beq.n	80084d4 <follow_path+0x118>
 8008484:	2a00      	cmp	r2, #0
 8008486:	d0f5      	beq.n	8008474 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8008488:	2100      	movs	r1, #0
 800848a:	4620      	mov	r0, r4
 800848c:	f7ff ff15 	bl	80082ba <dir_next>
 8008490:	e7da      	b.n	8008448 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8008492:	2380      	movs	r3, #128	; 0x80
 8008494:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008498:	4620      	mov	r0, r4
}
 800849a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800849e:	f7ff bed7 	b.w	8008250 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80084a2:	2b5c      	cmp	r3, #92	; 0x5c
 80084a4:	d0b1      	beq.n	800840a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80084a6:	2b2e      	cmp	r3, #46	; 0x2e
 80084a8:	d039      	beq.n	800851e <follow_path+0x162>
 80084aa:	4290      	cmp	r0, r2
 80084ac:	d90f      	bls.n	80084ce <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 80084ae:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80084b2:	bf18      	it	ne
 80084b4:	3b80      	subne	r3, #128	; 0x80
 80084b6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008544 <follow_path+0x188>
 80084ba:	bf18      	it	ne
 80084bc:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80084c0:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80084c4:	f1bc 0f00 	cmp.w	ip, #0
 80084c8:	d02e      	beq.n	8008528 <follow_path+0x16c>
 80084ca:	4563      	cmp	r3, ip
 80084cc:	d1f8      	bne.n	80084c0 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80084ce:	2006      	movs	r0, #6
	return res;
 80084d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	d1d7      	bne.n	8008488 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 80084d8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80084dc:	b148      	cbz	r0, 80084f2 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80084de:	2804      	cmp	r0, #4
 80084e0:	d12c      	bne.n	800853c <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80084e2:	f013 0f04 	tst.w	r3, #4
 80084e6:	bf08      	it	eq
 80084e8:	2005      	moveq	r0, #5
 80084ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084ee:	2004      	movs	r0, #4
 80084f0:	e7f2      	b.n	80084d8 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80084f2:	075a      	lsls	r2, r3, #29
 80084f4:	d422      	bmi.n	800853c <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80084f6:	79a3      	ldrb	r3, [r4, #6]
 80084f8:	06db      	lsls	r3, r3, #27
 80084fa:	d50d      	bpl.n	8008518 <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80084fc:	89b2      	ldrh	r2, [r6, #12]
 80084fe:	6960      	ldr	r0, [r4, #20]
 8008500:	fbb0 f3f2 	udiv	r3, r0, r2
 8008504:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008508:	fb02 0313 	mls	r3, r2, r3, r0
 800850c:	4419      	add	r1, r3
 800850e:	7830      	ldrb	r0, [r6, #0]
 8008510:	f7ff faa7 	bl	8007a62 <ld_clust.isra.1>
 8008514:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008516:	e764      	b.n	80083e2 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008518:	2005      	movs	r0, #5
 800851a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800851e:	280b      	cmp	r0, #11
 8008520:	d0d5      	beq.n	80084ce <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8008522:	2208      	movs	r2, #8
 8008524:	200b      	movs	r0, #11
 8008526:	e768      	b.n	80083fa <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008528:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800852c:	f1bc 0f19 	cmp.w	ip, #25
 8008530:	d801      	bhi.n	8008536 <follow_path+0x17a>
 8008532:	3b20      	subs	r3, #32
 8008534:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8008536:	54bb      	strb	r3, [r7, r2]
 8008538:	3201      	adds	r2, #1
 800853a:	e75e      	b.n	80083fa <follow_path+0x3e>
}
 800853c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008540:	0802154a 	.word	0x0802154a
 8008544:	080215c9 	.word	0x080215c9

08008548 <dir_register>:
{
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800854c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800854e:	f7ff fe7f 	bl	8008250 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8008552:	4604      	mov	r4, r0
 8008554:	bb28      	cbnz	r0, 80085a2 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8008556:	69e9      	ldr	r1, [r5, #28]
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff fb0f 	bl	8007b7c <move_window>
			if (res != FR_OK) break;
 800855e:	4604      	mov	r4, r0
 8008560:	b9f8      	cbnz	r0, 80085a2 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008562:	6a2b      	ldr	r3, [r5, #32]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2be5      	cmp	r3, #229	; 0xe5
 8008568:	d114      	bne.n	8008594 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800856a:	69e9      	ldr	r1, [r5, #28]
 800856c:	4630      	mov	r0, r6
 800856e:	f7ff fb05 	bl	8007b7c <move_window>
		if (res == FR_OK) {
 8008572:	4604      	mov	r4, r0
 8008574:	b960      	cbnz	r0, 8008590 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008576:	4601      	mov	r1, r0
 8008578:	2220      	movs	r2, #32
 800857a:	6a28      	ldr	r0, [r5, #32]
 800857c:	f7ff f98e 	bl	800789c <mem_set>
 8008580:	220b      	movs	r2, #11
 8008582:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8008586:	6a28      	ldr	r0, [r5, #32]
 8008588:	f7ff fa62 	bl	8007a50 <mem_cpy.part.0>
			fs->wflag = 1;
 800858c:	2301      	movs	r3, #1
 800858e:	70f3      	strb	r3, [r6, #3]
}
 8008590:	4620      	mov	r0, r4
 8008592:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0e8      	beq.n	800856a <dir_register+0x22>
			res = dir_next(dp, 1);
 8008598:	2101      	movs	r1, #1
 800859a:	4628      	mov	r0, r5
 800859c:	f7ff fe8d 	bl	80082ba <dir_next>
 80085a0:	e7d7      	b.n	8008552 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80085a2:	2c04      	cmp	r4, #4
 80085a4:	bf08      	it	eq
 80085a6:	2407      	moveq	r4, #7
 80085a8:	e7f2      	b.n	8008590 <dir_register+0x48>
	...

080085ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80085ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80085ae:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80085b0:	a804      	add	r0, sp, #16
{
 80085b2:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80085b4:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80085b8:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80085ba:	f7ff fa16 	bl	80079ea <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80085be:	1e05      	subs	r5, r0, #0
 80085c0:	db1f      	blt.n	8008602 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80085c2:	4912      	ldr	r1, [pc, #72]	; (800860c <f_mount+0x60>)
 80085c4:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80085c8:	b15c      	cbz	r4, 80085e2 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80085ca:	4b11      	ldr	r3, [pc, #68]	; (8008610 <f_mount+0x64>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4294      	cmp	r4, r2
 80085d0:	bf04      	itt	eq
 80085d2:	2200      	moveq	r2, #0
 80085d4:	601a      	streq	r2, [r3, #0]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	2000      	movs	r0, #0
 80085da:	4294      	cmp	r4, r2
 80085dc:	bf08      	it	eq
 80085de:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80085e0:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 80085e2:	9801      	ldr	r0, [sp, #4]
 80085e4:	b108      	cbz	r0, 80085ea <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 80085e6:	2300      	movs	r3, #0
 80085e8:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80085ea:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085ee:	b130      	cbz	r0, 80085fe <f_mount+0x52>
 80085f0:	2e01      	cmp	r6, #1
 80085f2:	d108      	bne.n	8008606 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085f4:	2200      	movs	r2, #0
 80085f6:	a901      	add	r1, sp, #4
 80085f8:	4668      	mov	r0, sp
 80085fa:	f7ff fb1b 	bl	8007c34 <find_volume>
	LEAVE_FF(fs, res);
}
 80085fe:	b004      	add	sp, #16
 8008600:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8008602:	200b      	movs	r0, #11
 8008604:	e7fb      	b.n	80085fe <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008606:	2000      	movs	r0, #0
 8008608:	e7f9      	b.n	80085fe <f_mount+0x52>
 800860a:	bf00      	nop
 800860c:	20000b60 	.word	0x20000b60
 8008610:	20000b64 	.word	0x20000b64

08008614 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008618:	b090      	sub	sp, #64	; 0x40
 800861a:	4690      	mov	r8, r2
 800861c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800861e:	4604      	mov	r4, r0
 8008620:	2800      	cmp	r0, #0
 8008622:	f000 80d1 	beq.w	80087c8 <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008626:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800862a:	462a      	mov	r2, r5
 800862c:	a903      	add	r1, sp, #12
 800862e:	a801      	add	r0, sp, #4
 8008630:	f7ff fb00 	bl	8007c34 <find_volume>
	if (res == FR_OK) {
 8008634:	4607      	mov	r7, r0
 8008636:	bb38      	cbnz	r0, 8008688 <f_open+0x74>
		dj.obj.fs = fs;
 8008638:	ae10      	add	r6, sp, #64	; 0x40
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008640:	9901      	ldr	r1, [sp, #4]
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff feba 	bl	80083bc <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008648:	b958      	cbnz	r0, 8008662 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800864a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800864e:	2b00      	cmp	r3, #0
 8008650:	db1e      	blt.n	8008690 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008652:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8008656:	bf14      	ite	ne
 8008658:	2101      	movne	r1, #1
 800865a:	2100      	moveq	r1, #0
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff f923 	bl	80078a8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008662:	f018 0f1c 	tst.w	r8, #28
 8008666:	d073      	beq.n	8008750 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8008668:	b1a0      	cbz	r0, 8008694 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800866a:	2804      	cmp	r0, #4
 800866c:	d109      	bne.n	8008682 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800866e:	4b73      	ldr	r3, [pc, #460]	; (800883c <f_open+0x228>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	2a00      	cmp	r2, #0
 8008674:	f000 80de 	beq.w	8008834 <f_open+0x220>
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80da 	beq.w	8008834 <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008680:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008682:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008686:	b170      	cbz	r0, 80086a6 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008688:	2300      	movs	r3, #0
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	4607      	mov	r7, r0
 800868e:	e095      	b.n	80087bc <f_open+0x1a8>
				res = FR_INVALID_NAME;
 8008690:	2006      	movs	r0, #6
 8008692:	e7e6      	b.n	8008662 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008694:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008698:	f013 0f11 	tst.w	r3, #17
 800869c:	d163      	bne.n	8008766 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800869e:	f018 0f04 	tst.w	r8, #4
 80086a2:	f040 80c1 	bne.w	8008828 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086a6:	0728      	lsls	r0, r5, #28
 80086a8:	d53c      	bpl.n	8008724 <f_open+0x110>
				dw = GET_FATTIME();
 80086aa:	f012 fe55 	bl	801b358 <get_fattime>
 80086ae:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086b0:	4601      	mov	r1, r0
 80086b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086b4:	300e      	adds	r0, #14
 80086b6:	f7ff f8e9 	bl	800788c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086bc:	4611      	mov	r1, r2
 80086be:	3016      	adds	r0, #22
 80086c0:	f7ff f8e4 	bl	800788c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086c6:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086ca:	2220      	movs	r2, #32
 80086cc:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086d2:	f899 0000 	ldrb.w	r0, [r9]
 80086d6:	4651      	mov	r1, sl
 80086d8:	f7ff f9c3 	bl	8007a62 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086dc:	2200      	movs	r2, #0
 80086de:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086e0:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086e2:	4648      	mov	r0, r9
 80086e4:	f7ff f9cb 	bl	8007a7e <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80086ea:	2200      	movs	r2, #0
 80086ec:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80086ee:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80086f0:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80086f2:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	2101      	movs	r1, #1
 80086f8:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80086fa:	f1b8 0f00 	cmp.w	r8, #0
 80086fe:	d011      	beq.n	8008724 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8008700:	4641      	mov	r1, r8
 8008702:	4630      	mov	r0, r6
						dw = fs->winsect;
 8008704:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8008708:	f7ff fd6c 	bl	80081e4 <remove_chain>
						if (res == FR_OK) {
 800870c:	2800      	cmp	r0, #0
 800870e:	d1bb      	bne.n	8008688 <f_open+0x74>
							res = move_window(fs, dw);
 8008710:	4649      	mov	r1, r9
 8008712:	9803      	ldr	r0, [sp, #12]
 8008714:	f7ff fa32 	bl	8007b7c <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008718:	9a03      	ldr	r2, [sp, #12]
 800871a:	f108 33ff 	add.w	r3, r8, #4294967295
 800871e:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8008720:	2800      	cmp	r0, #0
 8008722:	d1b1      	bne.n	8008688 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008724:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008726:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 800872c:	bf48      	it	mi
 800872e:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008732:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8008736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008738:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800873a:	bf14      	ite	ne
 800873c:	2101      	movne	r1, #1
 800873e:	2100      	moveq	r1, #0
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff f8df 	bl	8007904 <inc_lock>
 8008746:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008748:	2800      	cmp	r0, #0
 800874a:	d13f      	bne.n	80087cc <f_open+0x1b8>
 800874c:	2002      	movs	r0, #2
 800874e:	e79b      	b.n	8008688 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8008750:	2800      	cmp	r0, #0
 8008752:	d199      	bne.n	8008688 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008754:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008758:	06da      	lsls	r2, r3, #27
 800875a:	d467      	bmi.n	800882c <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800875c:	f018 0f02 	tst.w	r8, #2
 8008760:	d0e0      	beq.n	8008724 <f_open+0x110>
 8008762:	07db      	lsls	r3, r3, #31
 8008764:	d5de      	bpl.n	8008724 <f_open+0x110>
					res = FR_DENIED;
 8008766:	2007      	movs	r0, #7
 8008768:	e78e      	b.n	8008688 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 800876a:	6820      	ldr	r0, [r4, #0]
 800876c:	f7ff fc72 	bl	8008054 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8008770:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8008772:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8008774:	d926      	bls.n	80087c4 <f_open+0x1b0>
 8008776:	1c42      	adds	r2, r0, #1
 8008778:	4250      	negs	r0, r2
 800877a:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800877c:	eba5 0508 	sub.w	r5, r5, r8
 8008780:	2800      	cmp	r0, #0
 8008782:	d04d      	beq.n	8008820 <f_open+0x20c>
				fp->clust = clst;
 8008784:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008786:	2800      	cmp	r0, #0
 8008788:	f47f af7e 	bne.w	8008688 <f_open+0x74>
 800878c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008790:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008794:	fbb5 f2f3 	udiv	r2, r5, r3
 8008798:	fb03 5512 	mls	r5, r3, r2, r5
 800879c:	b175      	cbz	r5, 80087bc <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800879e:	4640      	mov	r0, r8
 80087a0:	f7ff f904 	bl	80079ac <clust2sect>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d0d1      	beq.n	800874c <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80087a8:	4402      	add	r2, r0
 80087aa:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	4631      	mov	r1, r6
 80087b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80087b4:	f7ff f838 	bl	8007828 <disk_read>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d139      	bne.n	8008830 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 80087bc:	4638      	mov	r0, r7
 80087be:	b010      	add	sp, #64	; 0x40
 80087c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80087c4:	2002      	movs	r0, #2
 80087c6:	e7d9      	b.n	800877c <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 80087c8:	2709      	movs	r7, #9
 80087ca:	e7f7      	b.n	80087bc <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80087cc:	9e03      	ldr	r6, [sp, #12]
 80087ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80087d2:	7830      	ldrb	r0, [r6, #0]
 80087d4:	4641      	mov	r1, r8
 80087d6:	f7ff f944 	bl	8007a62 <ld_clust.isra.1>
 80087da:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087dc:	f108 001c 	add.w	r0, r8, #28
 80087e0:	f7ff f84c 	bl	800787c <ld_dword>
			fp->obj.id = fs->id;
 80087e4:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80087e6:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087e8:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80087ea:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087ee:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 80087f0:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087f2:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 80087f4:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 80087f6:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80087f8:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80087fa:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80087fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff f84b 	bl	800789c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008806:	06ab      	lsls	r3, r5, #26
 8008808:	d5d8      	bpl.n	80087bc <f_open+0x1a8>
 800880a:	68e5      	ldr	r5, [r4, #12]
 800880c:	2d00      	cmp	r5, #0
 800880e:	d0d5      	beq.n	80087bc <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008810:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008812:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008814:	895a      	ldrh	r2, [r3, #10]
 8008816:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800881a:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800881c:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008820:	45a8      	cmp	r8, r5
 8008822:	d3a2      	bcc.n	800876a <f_open+0x156>
 8008824:	2000      	movs	r0, #0
 8008826:	e7ad      	b.n	8008784 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008828:	2008      	movs	r0, #8
 800882a:	e72d      	b.n	8008688 <f_open+0x74>
					res = FR_NO_FILE;
 800882c:	2004      	movs	r0, #4
 800882e:	e72b      	b.n	8008688 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008830:	2001      	movs	r0, #1
 8008832:	e729      	b.n	8008688 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008834:	4630      	mov	r0, r6
 8008836:	f7ff fe87 	bl	8008548 <dir_register>
 800883a:	e722      	b.n	8008682 <f_open+0x6e>
 800883c:	20000b64 	.word	0x20000b64

08008840 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	469b      	mov	fp, r3
 8008846:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8008848:	2300      	movs	r3, #0
{
 800884a:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 800884c:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008850:	a903      	add	r1, sp, #12
{
 8008852:	4604      	mov	r4, r0
 8008854:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008856:	f7ff f8e0 	bl	8007a1a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800885a:	4605      	mov	r5, r0
 800885c:	2800      	cmp	r0, #0
 800885e:	d132      	bne.n	80088c6 <f_write+0x86>
 8008860:	7d65      	ldrb	r5, [r4, #21]
 8008862:	bb85      	cbnz	r5, 80088c6 <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008864:	7d23      	ldrb	r3, [r4, #20]
 8008866:	079a      	lsls	r2, r3, #30
 8008868:	f140 80be 	bpl.w	80089e8 <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800886c:	69a3      	ldr	r3, [r4, #24]
 800886e:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008872:	bf28      	it	cs
 8008874:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008878:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800887c:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800887e:	f1b8 0f00 	cmp.w	r8, #0
 8008882:	d01c      	beq.n	80088be <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008884:	9803      	ldr	r0, [sp, #12]
 8008886:	69a1      	ldr	r1, [r4, #24]
 8008888:	8983      	ldrh	r3, [r0, #12]
 800888a:	fbb1 f2f3 	udiv	r2, r1, r3
 800888e:	fb03 1312 	mls	r3, r3, r2, r1
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 8091 	bne.w	80089ba <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008898:	8943      	ldrh	r3, [r0, #10]
 800889a:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800889c:	4013      	ands	r3, r2
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	d124      	bne.n	80088ec <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088a2:	b931      	cbnz	r1, 80088b2 <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80088a4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80088a6:	b9a0      	cbnz	r0, 80088d2 <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80088a8:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff fc42 	bl	8008134 <create_chain>
 80088b0:	e004      	b.n	80088bc <f_write+0x7c>
					if (fp->cltbl) {
 80088b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80088b4:	b15b      	cbz	r3, 80088ce <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff f883 	bl	80079c2 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088bc:	b948      	cbnz	r0, 80088d2 <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80088be:	7d23      	ldrb	r3, [r4, #20]
 80088c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c4:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80088c6:	4628      	mov	r0, r5
 80088c8:	b005      	add	sp, #20
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088ce:	69e1      	ldr	r1, [r4, #28]
 80088d0:	e7eb      	b.n	80088aa <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80088d2:	2801      	cmp	r0, #1
 80088d4:	d102      	bne.n	80088dc <f_write+0x9c>
 80088d6:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80088d8:	7565      	strb	r5, [r4, #21]
 80088da:	e7f4      	b.n	80088c6 <f_write+0x86>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d101      	bne.n	80088e4 <f_write+0xa4>
 80088e0:	2501      	movs	r5, #1
 80088e2:	e7f9      	b.n	80088d8 <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80088e4:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80088e6:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80088e8:	b903      	cbnz	r3, 80088ec <f_write+0xac>
 80088ea:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80088ec:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da0c      	bge.n	800890e <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088f4:	9803      	ldr	r0, [sp, #12]
 80088f6:	6a22      	ldr	r2, [r4, #32]
 80088f8:	9900      	ldr	r1, [sp, #0]
 80088fa:	7840      	ldrb	r0, [r0, #1]
 80088fc:	2301      	movs	r3, #1
 80088fe:	f7fe ffa1 	bl	8007844 <disk_write>
 8008902:	2800      	cmp	r0, #0
 8008904:	d1ec      	bne.n	80088e0 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008906:	7d23      	ldrb	r3, [r4, #20]
 8008908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890c:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800890e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8008912:	69e1      	ldr	r1, [r4, #28]
 8008914:	4650      	mov	r0, sl
 8008916:	f7ff f849 	bl	80079ac <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800891a:	2800      	cmp	r0, #0
 800891c:	d0db      	beq.n	80088d6 <f_write+0x96>
			sect += csect;
 800891e:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008920:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 8008924:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8008928:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800892a:	2f00      	cmp	r7, #0
 800892c:	d034      	beq.n	8008998 <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800892e:	9a01      	ldr	r2, [sp, #4]
 8008930:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008934:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008938:	443a      	add	r2, r7
 800893a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800893c:	bf84      	itt	hi
 800893e:	9a01      	ldrhi	r2, [sp, #4]
 8008940:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008942:	463b      	mov	r3, r7
 8008944:	4632      	mov	r2, r6
 8008946:	4649      	mov	r1, r9
 8008948:	f7fe ff7c 	bl	8007844 <disk_write>
 800894c:	2800      	cmp	r0, #0
 800894e:	d1c7      	bne.n	80088e0 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008950:	6a21      	ldr	r1, [r4, #32]
 8008952:	1b89      	subs	r1, r1, r6
 8008954:	428f      	cmp	r7, r1
 8008956:	d90b      	bls.n	8008970 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 800895c:	b122      	cbz	r2, 8008968 <f_write+0x128>
 800895e:	fb02 9101 	mla	r1, r2, r1, r9
 8008962:	9800      	ldr	r0, [sp, #0]
 8008964:	f7ff f874 	bl	8007a50 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008968:	7d23      	ldrb	r3, [r4, #20]
 800896a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800896e:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	899b      	ldrh	r3, [r3, #12]
 8008974:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008976:	69a3      	ldr	r3, [r4, #24]
 8008978:	68e2      	ldr	r2, [r4, #12]
 800897a:	443b      	add	r3, r7
 800897c:	61a3      	str	r3, [r4, #24]
 800897e:	429a      	cmp	r2, r3
 8008980:	bf2c      	ite	cs
 8008982:	60e2      	strcs	r2, [r4, #12]
 8008984:	60e3      	strcc	r3, [r4, #12]
 8008986:	f8db 3000 	ldr.w	r3, [fp]
 800898a:	443b      	add	r3, r7
 800898c:	44b9      	add	r9, r7
 800898e:	f8cb 3000 	str.w	r3, [fp]
 8008992:	eba8 0807 	sub.w	r8, r8, r7
 8008996:	e772      	b.n	800887e <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008998:	6a23      	ldr	r3, [r4, #32]
 800899a:	429e      	cmp	r6, r3
 800899c:	d00c      	beq.n	80089b8 <f_write+0x178>
 800899e:	69a2      	ldr	r2, [r4, #24]
 80089a0:	68e3      	ldr	r3, [r4, #12]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d208      	bcs.n	80089b8 <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80089a6:	2301      	movs	r3, #1
 80089a8:	4632      	mov	r2, r6
 80089aa:	9900      	ldr	r1, [sp, #0]
 80089ac:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80089b0:	f7fe ff3a 	bl	8007828 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d193      	bne.n	80088e0 <f_write+0xa0>
			fp->sect = sect;
 80089b8:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	899f      	ldrh	r7, [r3, #12]
 80089be:	69a3      	ldr	r3, [r4, #24]
 80089c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80089c4:	fb07 3010 	mls	r0, r7, r0, r3
 80089c8:	1a3f      	subs	r7, r7, r0
 80089ca:	4547      	cmp	r7, r8
 80089cc:	bf28      	it	cs
 80089ce:	4647      	movcs	r7, r8
	if (cnt) {
 80089d0:	b12f      	cbz	r7, 80089de <f_write+0x19e>
 80089d2:	9b00      	ldr	r3, [sp, #0]
 80089d4:	463a      	mov	r2, r7
 80089d6:	4649      	mov	r1, r9
 80089d8:	4418      	add	r0, r3
 80089da:	f7ff f839 	bl	8007a50 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80089de:	7d23      	ldrb	r3, [r4, #20]
 80089e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089e4:	7523      	strb	r3, [r4, #20]
 80089e6:	e7c6      	b.n	8008976 <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80089e8:	2507      	movs	r5, #7
 80089ea:	e76c      	b.n	80088c6 <f_write+0x86>

080089ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80089ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80089ee:	a901      	add	r1, sp, #4
{
 80089f0:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80089f2:	f7ff f812 	bl	8007a1a <validate>
	if (res == FR_OK) {
 80089f6:	4605      	mov	r5, r0
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d13a      	bne.n	8008a72 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80089fc:	7d23      	ldrb	r3, [r4, #20]
 80089fe:	065a      	lsls	r2, r3, #25
 8008a00:	d537      	bpl.n	8008a72 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008a02:	061b      	lsls	r3, r3, #24
 8008a04:	d50c      	bpl.n	8008a20 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a06:	9801      	ldr	r0, [sp, #4]
 8008a08:	6a22      	ldr	r2, [r4, #32]
 8008a0a:	7840      	ldrb	r0, [r0, #1]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008a12:	f7fe ff17 	bl	8007844 <disk_write>
 8008a16:	bb78      	cbnz	r0, 8008a78 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a18:	7d23      	ldrb	r3, [r4, #20]
 8008a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1e:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008a20:	f012 fc9a 	bl	801b358 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008a24:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8008a26:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8008a28:	9801      	ldr	r0, [sp, #4]
 8008a2a:	f7ff f8a7 	bl	8007b7c <move_window>
				if (res == FR_OK) {
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b9f8      	cbnz	r0, 8008a72 <f_sync+0x86>
					dir = fp->dir_ptr;
 8008a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a34:	7af3      	ldrb	r3, [r6, #11]
 8008a36:	f043 0320 	orr.w	r3, r3, #32
 8008a3a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a3c:	68a2      	ldr	r2, [r4, #8]
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	4631      	mov	r1, r6
 8008a42:	f7ff f81c 	bl	8007a7e <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008a46:	68e1      	ldr	r1, [r4, #12]
 8008a48:	f106 001c 	add.w	r0, r6, #28
 8008a4c:	f7fe ff1e 	bl	800788c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008a50:	4639      	mov	r1, r7
 8008a52:	f106 0016 	add.w	r0, r6, #22
 8008a56:	f7fe ff19 	bl	800788c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8008a5a:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a5c:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8008a5e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8008a60:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8008a62:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a64:	f7ff f840 	bl	8007ae8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a68:	7d23      	ldrb	r3, [r4, #20]
 8008a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a6e:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a70:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8008a72:	4628      	mov	r0, r5
 8008a74:	b003      	add	sp, #12
 8008a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a78:	2501      	movs	r5, #1
 8008a7a:	e7fa      	b.n	8008a72 <f_sync+0x86>

08008a7c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a7c:	b513      	push	{r0, r1, r4, lr}
 8008a7e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a80:	f7ff ffb4 	bl	80089ec <f_sync>
	if (res == FR_OK)
 8008a84:	b948      	cbnz	r0, 8008a9a <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a86:	a901      	add	r1, sp, #4
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7fe ffc6 	bl	8007a1a <validate>
		if (res == FR_OK) {
 8008a8e:	b920      	cbnz	r0, 8008a9a <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a90:	6920      	ldr	r0, [r4, #16]
 8008a92:	f7fe ff73 	bl	800797c <dec_lock>
			if (res == FR_OK)
 8008a96:	b900      	cbnz	r0, 8008a9a <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a98:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008a9a:	b002      	add	sp, #8
 8008a9c:	bd10      	pop	{r4, pc}
	...

08008aa0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008aa0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <FATFS_LinkDriverEx+0x40>)
 8008aa4:	7a5d      	ldrb	r5, [r3, #9]
 8008aa6:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8008aaa:	b9b5      	cbnz	r5, 8008ada <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008aac:	7a5d      	ldrb	r5, [r3, #9]
 8008aae:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8008ab0:	7a5d      	ldrb	r5, [r3, #9]
 8008ab2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8008ab6:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8008ab8:	7a58      	ldrb	r0, [r3, #9]
 8008aba:	4418      	add	r0, r3
 8008abc:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8008abe:	7a5a      	ldrb	r2, [r3, #9]
 8008ac0:	b2d2      	uxtb	r2, r2
 8008ac2:	1c50      	adds	r0, r2, #1
 8008ac4:	b2c0      	uxtb	r0, r0
 8008ac6:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8008ac8:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8008aca:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8008acc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008ace:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8008ad0:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8008ad2:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008ad4:	70cc      	strb	r4, [r1, #3]
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8008ada:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8008adc:	bd30      	pop	{r4, r5, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000b88 	.word	0x20000b88

08008ae4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f7ff bfdb 	b.w	8008aa0 <FATFS_LinkDriverEx>
	...

08008aec <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8008aec:	4a0a      	ldr	r2, [pc, #40]	; (8008b18 <FATFS_UnLinkDriverEx+0x2c>)
 8008aee:	7a53      	ldrb	r3, [r2, #9]
 8008af0:	b17b      	cbz	r3, 8008b12 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8008af2:	7803      	ldrb	r3, [r0, #0]
 8008af4:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008afc:	6848      	ldr	r0, [r1, #4]
 8008afe:	b140      	cbz	r0, 8008b12 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8008b00:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8008b02:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8008b04:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8008b06:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8008b08:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	7253      	strb	r3, [r2, #9]
 8008b10:	4770      	bx	lr
  uint8_t ret = 1;
 8008b12:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000b88 	.word	0x20000b88

08008b1c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	f7ff bfe5 	b.w	8008aec <FATFS_UnLinkDriverEx>
 8008b22:	0000      	movs	r0, r0
 8008b24:	0000      	movs	r0, r0
	...

08008b28 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 8008b28:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 8008b2a:	f7f7 fd0b 	bl	8000544 <__aeabi_i2d>
 8008b2e:	a316      	add	r3, pc, #88	; (adr r3, 8008b88 <calcNorm560+0x60>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fd6c 	bl	8000610 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	a114      	add	r1, pc, #80	; (adr r1, 8008b90 <calcNorm560+0x68>)
 8008b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b42:	f7f7 fe8f 	bl	8000864 <__aeabi_ddiv>
 8008b46:	ec41 0b10 	vmov	d0, r0, r1
 8008b4a:	f016 ff3d 	bl	801f9c8 <exp>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	ec51 0b10 	vmov	r0, r1, d0
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <calcNorm560+0x58>)
 8008b56:	f7f7 fba7 	bl	80002a8 <__aeabi_dsub>
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	a106      	add	r1, pc, #24	; (adr r1, 8008b78 <calcNorm560+0x50>)
 8008b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b64:	f7f7 fe7e 	bl	8000864 <__aeabi_ddiv>
 8008b68:	f7f8 f84a 	bl	8000c00 <__aeabi_d2f>
 8008b6c:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <calcNorm560+0x5c>)
 8008b6e:	6018      	str	r0, [r3, #0]
 8008b70:	bd08      	pop	{r3, pc}
 8008b72:	bf00      	nop
 8008b74:	f3af 8000 	nop.w
 8008b78:	f9f35846 	.word	0xf9f35846
 8008b7c:	466ca5d1 	.word	0x466ca5d1
 8008b80:	3ff00000 	.word	0x3ff00000
 8008b84:	2008aa88 	.word	0x2008aa88
 8008b88:	05ea7ab3 	.word	0x05ea7ab3
 8008b8c:	3ea2ca5d 	.word	0x3ea2ca5d
 8008b90:	aba38759 	.word	0xaba38759
 8008b94:	3f8d7774 	.word	0x3f8d7774

08008b98 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 8008b9c:	f241 3387 	movw	r3, #4999	; 0x1387
 8008ba0:	4299      	cmp	r1, r3
{
 8008ba2:	460e      	mov	r6, r1
 8008ba4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8008ba8:	4c3b      	ldr	r4, [pc, #236]	; (8008c98 <calcSref+0x100>)
	if (CCT_measure < 5000)
 8008baa:	d84d      	bhi.n	8008c48 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 8008bac:	4d3b      	ldr	r5, [pc, #236]	; (8008c9c <calcSref+0x104>)
 8008bae:	4405      	add	r5, r0
 8008bb0:	6828      	ldr	r0, [r5, #0]
 8008bb2:	f7f7 fcd9 	bl	8000568 <__aeabi_f2d>
 8008bb6:	a332      	add	r3, pc, #200	; (adr r3, 8008c80 <calcSref+0xe8>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f7f7 fd28 	bl	8000610 <__aeabi_dmul>
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	f7f7 fcbd 	bl	8000544 <__aeabi_i2d>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4640      	mov	r0, r8
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f7 fd1d 	bl	8000610 <__aeabi_dmul>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	a12b      	add	r1, pc, #172	; (adr r1, 8008c88 <calcSref+0xf0>)
 8008bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be0:	f7f7 fe40 	bl	8000864 <__aeabi_ddiv>
 8008be4:	ec41 0b10 	vmov	d0, r0, r1
 8008be8:	f016 feee 	bl	801f9c8 <exp>
 8008bec:	2200      	movs	r2, #0
 8008bee:	ec51 0b10 	vmov	r0, r1, d0
 8008bf2:	4b2b      	ldr	r3, [pc, #172]	; (8008ca0 <calcSref+0x108>)
 8008bf4:	f7f7 fb58 	bl	80002a8 <__aeabi_dsub>
 8008bf8:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8008bfc:	6828      	ldr	r0, [r5, #0]
 8008bfe:	f7f7 fcb3 	bl	8000568 <__aeabi_f2d>
 8008c02:	a31f      	add	r3, pc, #124	; (adr r3, 8008c80 <calcSref+0xe8>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fd02 	bl	8000610 <__aeabi_dmul>
 8008c0c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8008c90 <calcSref+0xf8>
 8008c10:	ec41 0b10 	vmov	d0, r0, r1
 8008c14:	f016 ffd4 	bl	801fbc0 <pow>
 8008c18:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c1c:	ec51 0b10 	vmov	r0, r1, d0
 8008c20:	f7f7 fe20 	bl	8000864 <__aeabi_ddiv>
		ans /= norm_560;
 8008c24:	4b1f      	ldr	r3, [pc, #124]	; (8008ca4 <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8008c26:	4606      	mov	r6, r0
		ans /= norm_560;
 8008c28:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8008c2a:	460f      	mov	r7, r1
		ans /= norm_560;
 8008c2c:	f7f7 fc9c 	bl	8000568 <__aeabi_f2d>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	f7f7 fe14 	bl	8000864 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8008c3c:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 8008c40:	ed94 0b00 	vldr	d0, [r4]
 8008c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8008c48:	4a17      	ldr	r2, [pc, #92]	; (8008ca8 <calcSref+0x110>)
 8008c4a:	4b18      	ldr	r3, [pc, #96]	; (8008cac <calcSref+0x114>)
 8008c4c:	4918      	ldr	r1, [pc, #96]	; (8008cb0 <calcSref+0x118>)
 8008c4e:	4403      	add	r3, r0
 8008c50:	4401      	add	r1, r0
 8008c52:	4410      	add	r0, r2
 8008c54:	4a17      	ldr	r2, [pc, #92]	; (8008cb4 <calcSref+0x11c>)
 8008c56:	edd1 6a00 	vldr	s13, [r1]
 8008c5a:	ed92 7a00 	vldr	s14, [r2]
 8008c5e:	edd0 7a00 	vldr	s15, [r0]
 8008c62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c66:	edd3 6a00 	vldr	s13, [r3]
 8008c6a:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <calcSref+0x120>)
 8008c6c:	ed93 7a00 	vldr	s14, [r3]
 8008c70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c74:	ee17 0a90 	vmov	r0, s15
 8008c78:	f7f7 fc76 	bl	8000568 <__aeabi_f2d>
 8008c7c:	e7de      	b.n	8008c3c <calcSref+0xa4>
 8008c7e:	bf00      	nop
 8008c80:	e826d695 	.word	0xe826d695
 8008c84:	3e112e0b 	.word	0x3e112e0b
 8008c88:	aba38759 	.word	0xaba38759
 8008c8c:	3f8d7774 	.word	0x3f8d7774
 8008c90:	00000000 	.word	0x00000000
 8008c94:	c0140000 	.word	0xc0140000
 8008c98:	20002bb0 	.word	0x20002bb0
 8008c9c:	2004fc04 	.word	0x2004fc04
 8008ca0:	3ff00000 	.word	0x3ff00000
 8008ca4:	2008aa88 	.word	0x2008aa88
 8008ca8:	20049bfc 	.word	0x20049bfc
 8008cac:	2004bbfc 	.word	0x2004bbfc
 8008cb0:	2004abfc 	.word	0x2004abfc
 8008cb4:	20002b94 	.word	0x20002b94
 8008cb8:	20002b98 	.word	0x20002b98
 8008cbc:	00000000 	.word	0x00000000

08008cc0 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b0a 	vpush	{d8-d12}
 8008cc8:	b0af      	sub	sp, #188	; 0xbc
 8008cca:	460c      	mov	r4, r1
 8008ccc:	9004      	str	r0, [sp, #16]
double x_test = 0;	
double y_test = 0;		
double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 8008cce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	48c4      	ldr	r0, [pc, #784]	; (8008fe8 <cqs_func+0x328>)
 8008cd6:	f016 f98a 	bl	801efee <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 8008cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008cde:	2100      	movs	r1, #0
 8008ce0:	48c2      	ldr	r0, [pc, #776]	; (8008fec <cqs_func+0x32c>)
 8008ce2:	f016 f984 	bl	801efee <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8008ce6:	4bc2      	ldr	r3, [pc, #776]	; (8008ff0 <cqs_func+0x330>)
 8008ce8:	ed93 7a00 	vldr	s14, [r3]
 8008cec:	4bbe      	ldr	r3, [pc, #760]	; (8008fe8 <cqs_func+0x328>)
 8008cee:	4621      	mov	r1, r4
 8008cf0:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8008cf4:	ecf1 6a01 	vldmia	r1!, {s13}
 8008cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 8008cfc:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8008cfe:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 8008d02:	d1f7      	bne.n	8008cf4 <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 8008d04:	9a04      	ldr	r2, [sp, #16]
 8008d06:	f640 53ab 	movw	r3, #3499	; 0xdab
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	f200 870d 	bhi.w	8009b2a <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 8008d10:	ee07 2a90 	vmov	s15, r2
 8008d14:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8008d18:	ee68 8a08 	vmul.f32	s17, s16, s16
 8008d1c:	ee68 7a28 	vmul.f32	s15, s16, s17
 8008d20:	ee17 0a90 	vmov	r0, s15
 8008d24:	f7f7 fc20 	bl	8000568 <__aeabi_f2d>
 8008d28:	a3a3      	add	r3, pc, #652	; (adr r3, 8008fb8 <cqs_func+0x2f8>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fc6f 	bl	8000610 <__aeabi_dmul>
 8008d32:	4604      	mov	r4, r0
 8008d34:	ee18 0a90 	vmov	r0, s17
 8008d38:	460d      	mov	r5, r1
 8008d3a:	f7f7 fc15 	bl	8000568 <__aeabi_f2d>
 8008d3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008fc0 <cqs_func+0x300>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fc64 	bl	8000610 <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	f7f7 faaa 	bl	80002a8 <__aeabi_dsub>
 8008d54:	4604      	mov	r4, r0
 8008d56:	ee18 0a10 	vmov	r0, s16
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	f7f7 fc04 	bl	8000568 <__aeabi_f2d>
 8008d60:	a399      	add	r3, pc, #612	; (adr r3, 8008fc8 <cqs_func+0x308>)
 8008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d66:	f7f7 fc53 	bl	8000610 <__aeabi_dmul>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fa9b 	bl	80002ac <__adddf3>
 8008d76:	a396      	add	r3, pc, #600	; (adr r3, 8008fd0 <cqs_func+0x310>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f7f7 fa94 	bl	80002a8 <__aeabi_dsub>
 8008d80:	4b9c      	ldr	r3, [pc, #624]	; (8008ff4 <cqs_func+0x334>)
 8008d82:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 8008d86:	9804      	ldr	r0, [sp, #16]
 8008d88:	f7ff fece 	bl	8008b28 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 8008d8c:	a192      	add	r1, pc, #584	; (adr r1, 8008fd8 <cqs_func+0x318>)
 8008d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d92:	4b99      	ldr	r3, [pc, #612]	; (8008ff8 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 8008d94:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8008ffc <cqs_func+0x33c>
	bar_CQS = 0.2;
 8008d98:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 8008d9c:	210d      	movs	r1, #13
 8008d9e:	2055      	movs	r0, #85	; 0x55
 8008da0:	f00b fb5c 	bl	801445c <GUI_Bar_Measure>
	


	memset(x_ref, 0, sizeof(x_ref));
 8008da4:	2278      	movs	r2, #120	; 0x78
 8008da6:	2100      	movs	r1, #0
 8008da8:	4895      	ldr	r0, [pc, #596]	; (8009000 <cqs_func+0x340>)
 8008daa:	f016 f920 	bl	801efee <memset>
	memset(y_ref, 0, sizeof(y_ref));
 8008dae:	2278      	movs	r2, #120	; 0x78
 8008db0:	2100      	movs	r1, #0
 8008db2:	4894      	ldr	r0, [pc, #592]	; (8009004 <cqs_func+0x344>)
 8008db4:	f016 f91b 	bl	801efee <memset>
	memset(z_ref, 0, sizeof(z_ref));
 8008db8:	2278      	movs	r2, #120	; 0x78
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4892      	ldr	r0, [pc, #584]	; (8009008 <cqs_func+0x348>)
 8008dbe:	f016 f916 	bl	801efee <memset>
	double zw_test = 0;
 8008dc2:	f04f 0a00 	mov.w	sl, #0
 8008dc6:	f04f 0b00 	mov.w	fp, #0
 8008dca:	4b8d      	ldr	r3, [pc, #564]	; (8009000 <cqs_func+0x340>)
 8008dcc:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 8008dce:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8008dd2:	4b8c      	ldr	r3, [pc, #560]	; (8009004 <cqs_func+0x344>)
 8008dd4:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 8008dd6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 8008dda:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 8008dde:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 8008de2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 8008de6:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 8008dea:	e9cd ab00 	strd	sl, fp, [sp]
 8008dee:	4b86      	ldr	r3, [pc, #536]	; (8009008 <cqs_func+0x348>)
 8008df0:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 8008df2:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 8008df6:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 8008dfa:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 8008dfc:	4d7e      	ldr	r5, [pc, #504]	; (8008ff8 <cqs_func+0x338>)
 8008dfe:	4f83      	ldr	r7, [pc, #524]	; (800900c <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8008e00:	4e79      	ldr	r6, [pc, #484]	; (8008fe8 <cqs_func+0x328>)
		bar_CQS += 0.04;
 8008e02:	a377      	add	r3, pc, #476	; (adr r3, 8008fe0 <cqs_func+0x320>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e0c:	f7f7 fa4e 	bl	80002ac <__adddf3>
 8008e10:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 8008e14:	f7f7 fef4 	bl	8000c00 <__aeabi_d2f>
 8008e18:	210d      	movs	r1, #13
 8008e1a:	ee00 0a10 	vmov	s0, r0
 8008e1e:	2055      	movs	r0, #85	; 0x55
 8008e20:	f00b fb1c 	bl	801445c <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8008e24:	487a      	ldr	r0, [pc, #488]	; (8009010 <cqs_func+0x350>)
 8008e26:	4a71      	ldr	r2, [pc, #452]	; (8008fec <cqs_func+0x32c>)
 8008e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e2c:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8008e30:	f004 fed6 	bl	800dbe0 <Calibration_Load_Pack>
 8008e34:	4b77      	ldr	r3, [pc, #476]	; (8009014 <cqs_func+0x354>)
 8008e36:	9320      	str	r3, [sp, #128]	; 0x80
 8008e38:	4b77      	ldr	r3, [pc, #476]	; (8009018 <cqs_func+0x358>)
 8008e3a:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 8008e3c:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 8008e40:	4b76      	ldr	r3, [pc, #472]	; (800901c <cqs_func+0x35c>)
 8008e42:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 8008e44:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 8008e48:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 8008e4c:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 8008e4e:	2500      	movs	r5, #0
 8008e50:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 8008e52:	2c00      	cmp	r4, #0
 8008e54:	d17d      	bne.n	8008f52 <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 8008e56:	9904      	ldr	r1, [sp, #16]
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f7ff fe9d 	bl	8008b98 <calcSref>
 8008e5e:	ec51 0b10 	vmov	r0, r1, d0
 8008e62:	f7f7 fecd 	bl	8000c00 <__aeabi_d2f>
 8008e66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e68:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * calibratre_y_1931[j];
 8008e6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 8008e6c:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * calibratre_y_1931[j];
 8008e70:	edd3 9a00 	vldr	s19, [r3]
 8008e74:	ee68 7a29 	vmul.f32	s15, s16, s19
 8008e78:	ee17 0a90 	vmov	r0, s15
 8008e7c:	f7f7 fb74 	bl	8000568 <__aeabi_f2d>
 8008e80:	4602      	mov	r2, r0
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	460b      	mov	r3, r1
 8008e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e8c:	f7f7 fa0e 	bl	80002ac <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8008e90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e92:	ed93 9a00 	vldr	s18, [r3]
 8008e96:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * calibratre_y_1931[j];
 8008e9a:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8008e9e:	ee17 0a90 	vmov	r0, s15
 8008ea2:	f7f7 fb61 	bl	8000568 <__aeabi_f2d>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eae:	f7f7 f9fd 	bl	80002ac <__adddf3>
				yw_ref += s_ref[j] * calibratre_y_1931[j];
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8008eb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * calibratre_y_1931[j];
 8008eba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ebe:	f7f7 f9f5 	bl	80002ac <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8008ec2:	edd7 8a00 	vldr	s17, [r7]
 8008ec6:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * calibratre_y_1931[j];
 8008eca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8008ece:	ee17 0a90 	vmov	r0, s15
 8008ed2:	f7f7 fb49 	bl	8000568 <__aeabi_f2d>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ede:	f7f7 f9e5 	bl	80002ac <__adddf3>
				k_test += CQS_S_test[j] * calibratre_y_1931[j];
 8008ee2:	ed96 8a00 	vldr	s16, [r6]
 8008ee6:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8008eea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * calibratre_y_1931[j];
 8008eee:	ee17 0a90 	vmov	r0, s15
 8008ef2:	f7f7 fb39 	bl	8000568 <__aeabi_f2d>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4680      	mov	r8, r0
 8008efc:	4689      	mov	r9, r1
 8008efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f02:	f7f7 f9d3 	bl	80002ac <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8008f06:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * calibratre_y_1931[j];
 8008f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8008f0e:	ee17 0a90 	vmov	r0, s15
 8008f12:	f7f7 fb29 	bl	8000568 <__aeabi_f2d>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008f1e:	f7f7 f9c5 	bl	80002ac <__adddf3>
				yw_test += CQS_S_test[j] * calibratre_y_1931[j];
 8008f22:	4642      	mov	r2, r8
 8008f24:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8008f26:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * calibratre_y_1931[j];
 8008f2a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8008f2e:	f7f7 f9bd 	bl	80002ac <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8008f32:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * calibratre_y_1931[j];
 8008f36:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8008f3a:	ee17 0a90 	vmov	r0, s15
 8008f3e:	f7f7 fb13 	bl	8000568 <__aeabi_f2d>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4650      	mov	r0, sl
 8008f48:	4659      	mov	r1, fp
 8008f4a:	f7f7 f9af 	bl	80002ac <__adddf3>
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8008f52:	4b26      	ldr	r3, [pc, #152]	; (8008fec <cqs_func+0x32c>)
 8008f54:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008f58:	ed93 8a00 	vldr	s16, [r3]
 8008f5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f5e:	ecb3 9a01 	vldmia	r3!, {s18}
 8008f62:	9320      	str	r3, [sp, #128]	; 0x80
 8008f64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f66:	ee28 9a09 	vmul.f32	s18, s16, s18
 8008f6a:	ecf3 9a01 	vldmia	r3!, {s19}
 8008f6e:	ee69 7a29 	vmul.f32	s15, s18, s19
 8008f72:	931e      	str	r3, [sp, #120]	; 0x78
 8008f74:	ee17 0a90 	vmov	r0, s15
 8008f78:	f7f7 faf6 	bl	8000568 <__aeabi_f2d>
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 f993 	bl	80002ac <__adddf3>
 8008f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f88:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += calibratre_y_1931[j] * CQS_R_temp[j] * s_ref[j];
 8008f8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f8e:	ecf3 8a01 	vldmia	r3!, {s17}
 8008f92:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8008f96:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += calibratre_y_1931[j] * CQS_R_temp[j] * s_ref[j];
 8008f9a:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8008f9e:	931c      	str	r3, [sp, #112]	; 0x70
 8008fa0:	ee17 0a90 	vmov	r0, s15
 8008fa4:	f7f7 fae0 	bl	8000568 <__aeabi_f2d>
 8008fa8:	9b08      	ldr	r3, [sp, #32]
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7f7 f97d 	bl	80002ac <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8008fb2:	ecf7 7a01 	vldmia	r7!, {s15}
 8008fb6:	e033      	b.n	8009020 <cqs_func+0x360>
 8008fb8:	56b31fbb 	.word	0x56b31fbb
 8008fbc:	3dd97936 	.word	0x3dd97936
 8008fc0:	ef649b9b 	.word	0xef649b9b
 8008fc4:	3eac2c05 	.word	0x3eac2c05
 8008fc8:	d35a8588 	.word	0xd35a8588
 8008fcc:	3f64e3bc 	.word	0x3f64e3bc
 8008fd0:	83126e98 	.word	0x83126e98
 8008fd4:	3ff9cac0 	.word	0x3ff9cac0
 8008fd8:	9999999a 	.word	0x9999999a
 8008fdc:	3fc99999 	.word	0x3fc99999
 8008fe0:	47ae147b 	.word	0x47ae147b
 8008fe4:	3fa47ae1 	.word	0x3fa47ae1
 8008fe8:	20001b94 	.word	0x20001b94
 8008fec:	20000b94 	.word	0x20000b94
 8008ff0:	2008fda4 	.word	0x2008fda4
 8008ff4:	20000188 	.word	0x20000188
 8008ff8:	2008a910 	.word	0x2008a910
 8008ffc:	3e4ccccd 	.word	0x3e4ccccd
 8009000:	2008a918 	.word	0x2008a918
 8009004:	2008aaa8 	.word	0x2008aaa8
 8009008:	2008aa10 	.word	0x2008aa10
 800900c:	200887d0 	.word	0x200887d0
 8009010:	0810c040 	.word	0x0810c040
 8009014:	200857d0 	.word	0x200857d0
 8009018:	20002bb8 	.word	0x20002bb8
 800901c:	200877d0 	.word	0x200877d0
			y_ref[i] += calibratre_y_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009020:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009022:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += calibratre_y_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009026:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800902a:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += calibratre_y_1931[j] * CQS_R_temp[j] * s_ref[j];
 800902e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009032:	ee17 0a90 	vmov	r0, s15
 8009036:	f7f7 fa97 	bl	8000568 <__aeabi_f2d>
 800903a:	9b06      	ldr	r3, [sp, #24]
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f934 	bl	80002ac <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009044:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009048:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800904a:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800904e:	4680      	mov	r8, r0
 8009050:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009052:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009056:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800905a:	f7f7 fa85 	bl	8000568 <__aeabi_f2d>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8009066:	f7f7 f921 	bl	80002ac <__adddf3>
			y_test += calibratre_y_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800906a:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800906e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += calibratre_y_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009072:	ee17 0a90 	vmov	r0, s15
 8009076:	f7f7 fa77 	bl	8000568 <__aeabi_f2d>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8009082:	f7f7 f913 	bl	80002ac <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009086:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += calibratre_y_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800908a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800908e:	ee17 0a90 	vmov	r0, s15
 8009092:	f7f7 fa69 	bl	8000568 <__aeabi_f2d>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800909e:	f7f7 f905 	bl	80002ac <__adddf3>
		for (int j = 0; j < 1024; j++)
 80090a2:	3501      	adds	r5, #1
 80090a4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 80090a8:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 80090ac:	f47f aed1 	bne.w	8008e52 <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 80090b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090b4:	2100      	movs	r1, #0
 80090b6:	4874      	ldr	r0, [pc, #464]	; (8009288 <cqs_func+0x5c8>)
 80090b8:	f015 ff99 	bl	801efee <memset>
		
		if (i == 0) {
 80090bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090be:	b97b      	cbnz	r3, 80090e0 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 80090c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090c4:	2000      	movs	r0, #0
 80090c6:	4971      	ldr	r1, [pc, #452]	; (800928c <cqs_func+0x5cc>)
 80090c8:	f7f7 fbcc 	bl	8000864 <__aeabi_ddiv>
			k_test = 100 / k_test;
 80090cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 80090d0:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 80090d4:	2000      	movs	r0, #0
 80090d6:	496d      	ldr	r1, [pc, #436]	; (800928c <cqs_func+0x5cc>)
 80090d8:	f7f7 fbc4 	bl	8000864 <__aeabi_ddiv>
 80090dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 80090e0:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80090e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090e8:	f7f7 fa92 	bl	8000610 <__aeabi_dmul>
 80090ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 80090ee:	4d68      	ldr	r5, [pc, #416]	; (8009290 <cqs_func+0x5d0>)
 80090f0:	4f68      	ldr	r7, [pc, #416]	; (8009294 <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 80090f2:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 80090f6:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 80090fa:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 80090fc:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8009100:	f7f7 fa86 	bl	8000610 <__aeabi_dmul>
 8009104:	9b08      	ldr	r3, [sp, #32]
 8009106:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800910a:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800910c:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800910e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009112:	464b      	mov	r3, r9
 8009114:	f7f7 fa7c 	bl	8000610 <__aeabi_dmul>
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800911e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 8009122:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 8009124:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009128:	f7f7 fa72 	bl	8000610 <__aeabi_dmul>
		y_test *= k_test;
 800912c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 8009130:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 8009134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009138:	f7f7 fa6a 	bl	8000610 <__aeabi_dmul>
		z_test *= k_test;
 800913c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 8009140:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 8009144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009148:	f7f7 fa62 	bl	8000610 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800914c:	ed95 7b00 	vldr	d7, [r5]
 8009150:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8009154:	ed95 7b02 	vldr	d7, [r5, #8]
 8009158:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800915c:	ed95 7b04 	vldr	d7, [r5, #16]
 8009160:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 8009164:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 8009168:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800916c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8009170:	f7f7 fa4e 	bl	8000610 <__aeabi_dmul>
 8009174:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009178:	4680      	mov	r8, r0
 800917a:	4689      	mov	r9, r1
 800917c:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8009180:	f7f7 fa46 	bl	8000610 <__aeabi_dmul>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 f88e 	bl	80002ac <__adddf3>
 8009190:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009194:	4680      	mov	r8, r0
 8009196:	4689      	mov	r9, r1
 8009198:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800919c:	f7f7 fa38 	bl	8000610 <__aeabi_dmul>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 f880 	bl	80002ac <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 80091ac:	ed95 7b06 	vldr	d7, [r5, #24]
 80091b0:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 80091b4:	ed95 7b08 	vldr	d7, [r5, #32]
 80091b8:	00e6      	lsls	r6, r4, #3
 80091ba:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 80091be:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 80091c2:	4437      	add	r7, r6
 80091c4:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 80091c8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80091cc:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 80091d0:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 80091d4:	f7f7 fa1c 	bl	8000610 <__aeabi_dmul>
 80091d8:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 80091dc:	4680      	mov	r8, r0
 80091de:	4689      	mov	r9, r1
 80091e0:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80091e4:	f7f7 fa14 	bl	8000610 <__aeabi_dmul>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4640      	mov	r0, r8
 80091ee:	4649      	mov	r1, r9
 80091f0:	f7f7 f85c 	bl	80002ac <__adddf3>
 80091f4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80091f8:	4680      	mov	r8, r0
 80091fa:	4689      	mov	r9, r1
 80091fc:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8009200:	f7f7 fa06 	bl	8000610 <__aeabi_dmul>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 f84e 	bl	80002ac <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 8009210:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 8009214:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8009218:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800921c:	4f1e      	ldr	r7, [pc, #120]	; (8009298 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800921e:	4b1f      	ldr	r3, [pc, #124]	; (800929c <cqs_func+0x5dc>)
 8009220:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8009224:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 8009228:	4437      	add	r7, r6
 800922a:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800922e:	441e      	add	r6, r3
 8009230:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8009234:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009238:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800923c:	f7f7 f9e8 	bl	8000610 <__aeabi_dmul>
 8009240:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8009244:	4680      	mov	r8, r0
 8009246:	4689      	mov	r9, r1
 8009248:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800924c:	f7f7 f9e0 	bl	8000610 <__aeabi_dmul>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4640      	mov	r0, r8
 8009256:	4649      	mov	r1, r9
 8009258:	f7f7 f828 	bl	80002ac <__adddf3>
 800925c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009260:	4680      	mov	r8, r0
 8009262:	4689      	mov	r9, r1
 8009264:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8009268:	f7f7 f9d2 	bl	8000610 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4640      	mov	r0, r8
 8009272:	4649      	mov	r1, r9
 8009274:	f7f7 f81a 	bl	80002ac <__adddf3>
 8009278:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800927a:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800927c:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 8009280:	f47f adbc 	bne.w	8008dfc <cqs_func+0x13c>
 8009284:	e00e      	b.n	80092a4 <cqs_func+0x5e4>
 8009286:	bf00      	nop
 8009288:	20000b94 	.word	0x20000b94
 800928c:	40590000 	.word	0x40590000
 8009290:	200000f8 	.word	0x200000f8
 8009294:	2008a998 	.word	0x2008a998
 8009298:	2008ab20 	.word	0x2008ab20
 800929c:	2008a898 	.word	0x2008a898
 80092a0:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 80092a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80092a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092ac:	f7f7 f9b0 	bl	8000610 <__aeabi_dmul>
	yw_ref *= k_ref;
 80092b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 80092b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 80092b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092bc:	f7f7 f9a8 	bl	8000610 <__aeabi_dmul>
	zw_ref *= k_ref;
 80092c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 80092c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 80092c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092cc:	f7f7 f9a0 	bl	8000610 <__aeabi_dmul>
	xw_test *= k_test;
 80092d0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 80092d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 80092d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092dc:	f7f7 f998 	bl	8000610 <__aeabi_dmul>
	yw_test *= k_test;
 80092e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 80092e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 80092e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ec:	f7f7 f990 	bl	8000610 <__aeabi_dmul>
	zw_test *= k_test;
 80092f0:	4652      	mov	r2, sl
 80092f2:	465b      	mov	r3, fp
	yw_test *= k_test;
 80092f4:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 80092f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092fc:	f7f7 f988 	bl	8000610 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 8009300:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 8009304:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 8009308:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800930c:	f7f7 f980 	bl	8000610 <__aeabi_dmul>
 8009310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800931c:	f7f7 f978 	bl	8000610 <__aeabi_dmul>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	f7f6 ffc0 	bl	80002ac <__adddf3>
 800932c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009330:	4604      	mov	r4, r0
 8009332:	460d      	mov	r5, r1
 8009334:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009338:	f7f7 f96a 	bl	8000610 <__aeabi_dmul>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4620      	mov	r0, r4
 8009342:	4629      	mov	r1, r5
 8009344:	f7f6 ffb2 	bl	80002ac <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 8009348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800934c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 8009350:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8009354:	f7f7 f95c 	bl	8000610 <__aeabi_dmul>
 8009358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935c:	4604      	mov	r4, r0
 800935e:	460d      	mov	r5, r1
 8009360:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8009364:	f7f7 f954 	bl	8000610 <__aeabi_dmul>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f6 ff9c 	bl	80002ac <__adddf3>
 8009374:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8009380:	f7f7 f946 	bl	8000610 <__aeabi_dmul>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4620      	mov	r0, r4
 800938a:	4629      	mov	r1, r5
 800938c:	f7f6 ff8e 	bl	80002ac <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 8009390:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 8009394:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 8009398:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800939c:	f7f7 f938 	bl	8000610 <__aeabi_dmul>
 80093a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80093ac:	f7f7 f930 	bl	8000610 <__aeabi_dmul>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4620      	mov	r0, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	f7f6 ff78 	bl	80002ac <__adddf3>
 80093bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093c0:	4604      	mov	r4, r0
 80093c2:	460d      	mov	r5, r1
 80093c4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80093c8:	f7f7 f922 	bl	8000610 <__aeabi_dmul>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4620      	mov	r0, r4
 80093d2:	4629      	mov	r1, r5
 80093d4:	f7f6 ff6a 	bl	80002ac <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 80093d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 80093dc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 80093e0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80093e4:	f7f7 f914 	bl	8000610 <__aeabi_dmul>
 80093e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80093f4:	f7f7 f90c 	bl	8000610 <__aeabi_dmul>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f6 ff54 	bl	80002ac <__adddf3>
 8009404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009410:	f7f7 f8fe 	bl	8000610 <__aeabi_dmul>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4620      	mov	r0, r4
 800941a:	4629      	mov	r1, r5
 800941c:	f7f6 ff46 	bl	80002ac <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 8009420:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 8009424:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 8009428:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800942c:	f7f7 f8f0 	bl	8000610 <__aeabi_dmul>
 8009430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009434:	4604      	mov	r4, r0
 8009436:	460d      	mov	r5, r1
 8009438:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800943c:	f7f7 f8e8 	bl	8000610 <__aeabi_dmul>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f7f6 ff30 	bl	80002ac <__adddf3>
 800944c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009450:	4604      	mov	r4, r0
 8009452:	460d      	mov	r5, r1
 8009454:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8009458:	f7f7 f8da 	bl	8000610 <__aeabi_dmul>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4620      	mov	r0, r4
 8009462:	4629      	mov	r1, r5
 8009464:	f7f6 ff22 	bl	80002ac <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 8009468:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800946c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 8009470:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8009474:	f7f7 f8cc 	bl	8000610 <__aeabi_dmul>
 8009478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8009484:	f7f7 f8c4 	bl	8000610 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4620      	mov	r0, r4
 800948e:	4629      	mov	r1, r5
 8009490:	f7f6 ff0c 	bl	80002ac <__adddf3>
 8009494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009498:	4604      	mov	r4, r0
 800949a:	460d      	mov	r5, r1
 800949c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80094a0:	f7f7 f8b6 	bl	8000610 <__aeabi_dmul>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4620      	mov	r0, r4
 80094aa:	4629      	mov	r1, r5
 80094ac:	f7f6 fefe 	bl	80002ac <__adddf3>

	float alpha = yw_test / yw_ref;
 80094b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 80094b4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 80094b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094bc:	f7f7 f9d2 	bl	8000864 <__aeabi_ddiv>
 80094c0:	f7f7 fb9e 	bl	8000c00 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 80094c4:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 80092a0 <cqs_func+0x5e0>
 80094c8:	f8df b390 	ldr.w	fp, [pc, #912]	; 800985c <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 80094cc:	901c      	str	r0, [sp, #112]	; 0x70
 80094ce:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 80094d2:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 80094d6:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
			R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 80094da:	981c      	ldr	r0, [sp, #112]	; 0x70
			G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
			B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		 X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		 Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 80094dc:	f8df 8380 	ldr.w	r8, [pc, #896]	; 8009860 <cqs_func+0xba0>
		 Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 80094e0:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 8009830 <cqs_func+0xb70>
			R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 80094e4:	f7f7 f840 	bl	8000568 <__aeabi_f2d>
 80094e8:	4bd2      	ldr	r3, [pc, #840]	; (8009834 <cqs_func+0xb74>)
 80094ea:	4453      	add	r3, sl
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	4604      	mov	r4, r0
 80094f2:	460d      	mov	r5, r1
 80094f4:	f7f7 f88c 	bl	8000610 <__aeabi_dmul>
 80094f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094fc:	f7f7 f888 	bl	8000610 <__aeabi_dmul>
 8009500:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009504:	f7f7 f9ae 	bl	8000864 <__aeabi_ddiv>
			G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 8009508:	4bcb      	ldr	r3, [pc, #812]	; (8009838 <cqs_func+0xb78>)
 800950a:	4453      	add	r3, sl
			R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800950c:	4606      	mov	r6, r0
 800950e:	460f      	mov	r7, r1
			G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	4620      	mov	r0, r4
 8009516:	4629      	mov	r1, r5
 8009518:	f7f7 f87a 	bl	8000610 <__aeabi_dmul>
 800951c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009520:	f7f7 f876 	bl	8000610 <__aeabi_dmul>
 8009524:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009528:	f7f7 f99c 	bl	8000864 <__aeabi_ddiv>
			B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800952c:	4bc3      	ldr	r3, [pc, #780]	; (800983c <cqs_func+0xb7c>)
 800952e:	4453      	add	r3, sl
			G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 8009530:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	4620      	mov	r0, r4
 800953a:	4629      	mov	r1, r5
 800953c:	f7f7 f868 	bl	8000610 <__aeabi_dmul>
 8009540:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009544:	f7f7 f864 	bl	8000610 <__aeabi_dmul>
 8009548:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800954c:	f7f7 f98a 	bl	8000864 <__aeabi_ddiv>
 8009550:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 8009554:	49ba      	ldr	r1, [pc, #744]	; (8009840 <cqs_func+0xb80>)
 8009556:	4451      	add	r1, sl
 8009558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800955c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009560:	f7f7 f980 	bl	8000864 <__aeabi_ddiv>
 8009564:	ec41 0b10 	vmov	d0, r0, r1
 8009568:	f016 f972 	bl	801f850 <cbrt>
 800956c:	ec51 0b10 	vmov	r0, r1, d0
 8009570:	f7f7 fb46 	bl	8000c00 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 8009574:	49b3      	ldr	r1, [pc, #716]	; (8009844 <cqs_func+0xb84>)
 8009576:	4451      	add	r1, sl
 8009578:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800957c:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 8009580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009584:	f7f7 f96e 	bl	8000864 <__aeabi_ddiv>
 8009588:	ec41 0b10 	vmov	d0, r0, r1
 800958c:	f016 f960 	bl	801f850 <cbrt>
 8009590:	ee1a 0a90 	vmov	r0, s21
 8009594:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 8009598:	f7f6 ffe6 	bl	8000568 <__aeabi_f2d>
 800959c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	ec51 0b10 	vmov	r0, r1, d0
 80095ac:	f7f6 fe7c 	bl	80002a8 <__aeabi_dsub>
 80095b0:	2200      	movs	r2, #0
 80095b2:	4ba5      	ldr	r3, [pc, #660]	; (8009848 <cqs_func+0xb88>)
 80095b4:	f7f7 f82c 	bl	8000610 <__aeabi_dmul>
 80095b8:	f7f7 fb22 	bl	8000c00 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 80095bc:	49a3      	ldr	r1, [pc, #652]	; (800984c <cqs_func+0xb8c>)
 80095be:	4451      	add	r1, sl
 80095c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 80095c4:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 80095c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095cc:	f7f7 f94a 	bl	8000864 <__aeabi_ddiv>
 80095d0:	ec41 0b10 	vmov	d0, r0, r1
 80095d4:	f016 f93c 	bl	801f850 <cbrt>
 80095d8:	4620      	mov	r0, r4
 80095da:	ec53 2b10 	vmov	r2, r3, d0
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 fe62 	bl	80002a8 <__aeabi_dsub>
 80095e4:	2200      	movs	r2, #0
 80095e6:	4b9a      	ldr	r3, [pc, #616]	; (8009850 <cqs_func+0xb90>)
 80095e8:	f7f7 f812 	bl	8000610 <__aeabi_dmul>
 80095ec:	f7f7 fb08 	bl	8000c00 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 80095f0:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 80095f4:	eef0 ca48 	vmov.f32	s25, s16
		 Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 80095f8:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 80095fc:	eeea ca89 	vfma.f32	s25, s21, s18
		 Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 8009600:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 8009602:	ee0a 0a90 	vmov	s21, r0
		 Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 8009606:	4630      	mov	r0, r6
 8009608:	f7f7 f802 	bl	8000610 <__aeabi_dmul>
 800960c:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8009610:	4604      	mov	r4, r0
 8009612:	460d      	mov	r5, r1
 8009614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009618:	f7f6 fffa 	bl	8000610 <__aeabi_dmul>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4620      	mov	r0, r4
 8009622:	4629      	mov	r1, r5
 8009624:	f7f6 fe42 	bl	80002ac <__adddf3>
 8009628:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009634:	f7f6 ffec 	bl	8000610 <__aeabi_dmul>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	f7f6 fe34 	bl	80002ac <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 8009644:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009648:	f7f7 f90c 	bl	8000864 <__aeabi_ddiv>
 800964c:	ec41 0b10 	vmov	d0, r0, r1
 8009650:	f016 f8fe 	bl	801f850 <cbrt>
 8009654:	ec51 0b10 	vmov	r0, r1, d0
 8009658:	f7f7 fad2 	bl	8000c00 <__aeabi_d2f>
		 X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800965c:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 8009660:	ee0b 0a10 	vmov	s22, r0
		 X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 8009664:	4639      	mov	r1, r7
 8009666:	4630      	mov	r0, r6
 8009668:	f7f6 ffd2 	bl	8000610 <__aeabi_dmul>
 800966c:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009678:	f7f6 ffca 	bl	8000610 <__aeabi_dmul>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4620      	mov	r0, r4
 8009682:	4629      	mov	r1, r5
 8009684:	f7f6 fe12 	bl	80002ac <__adddf3>
 8009688:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800968c:	4604      	mov	r4, r0
 800968e:	460d      	mov	r5, r1
 8009690:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009694:	f7f6 ffbc 	bl	8000610 <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4620      	mov	r0, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	f7f6 fe04 	bl	80002ac <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 80096a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096a8:	f7f7 f8dc 	bl	8000864 <__aeabi_ddiv>
 80096ac:	ec41 0b10 	vmov	d0, r0, r1
 80096b0:	f016 f8ce 	bl	801f850 <cbrt>
 80096b4:	ee1b 0a10 	vmov	r0, s22
 80096b8:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 80096bc:	f7f6 ff54 	bl	8000568 <__aeabi_f2d>
 80096c0:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	ec51 0b10 	vmov	r0, r1, d0
 80096d0:	f7f6 fdea 	bl	80002a8 <__aeabi_dsub>
 80096d4:	2200      	movs	r2, #0
 80096d6:	4b5c      	ldr	r3, [pc, #368]	; (8009848 <cqs_func+0xb88>)
 80096d8:	f7f6 ff9a 	bl	8000610 <__aeabi_dmul>
 80096dc:	f7f7 fa90 	bl	8000c00 <__aeabi_d2f>
		 Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 80096e0:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 80096e4:	ee0c 0a10 	vmov	s24, r0
		 Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 80096e8:	4639      	mov	r1, r7
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7f6 ff90 	bl	8000610 <__aeabi_dmul>
 80096f0:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 80096f4:	4606      	mov	r6, r0
 80096f6:	460f      	mov	r7, r1
 80096f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096fc:	f7f6 ff88 	bl	8000610 <__aeabi_dmul>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	f7f6 fdd0 	bl	80002ac <__adddf3>
 800970c:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009718:	f7f6 ff7a 	bl	8000610 <__aeabi_dmul>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f6 fdc2 	bl	80002ac <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 8009728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800972c:	f7f7 f89a 	bl	8000864 <__aeabi_ddiv>
 8009730:	ec41 0b10 	vmov	d0, r0, r1
 8009734:	f016 f88c 	bl	801f850 <cbrt>
 8009738:	4620      	mov	r0, r4
 800973a:	ec53 2b10 	vmov	r2, r3, d0
 800973e:	4629      	mov	r1, r5
 8009740:	f7f6 fdb2 	bl	80002a8 <__aeabi_dsub>
 8009744:	2200      	movs	r2, #0
 8009746:	4b42      	ldr	r3, [pc, #264]	; (8009850 <cqs_func+0xb90>)
 8009748:	f7f6 ff62 	bl	8000610 <__aeabi_dmul>
 800974c:	f7f7 fa58 	bl	8000c00 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 8009750:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 8009754:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 8009758:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800975c:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 8009760:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8009764:	ee17 0a90 	vmov	r0, s15
 8009768:	f7f6 fefe 	bl	8000568 <__aeabi_f2d>
 800976c:	ec41 0b10 	vmov	d0, r0, r1
 8009770:	f016 fb9e 	bl	801feb0 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 8009774:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 8009778:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800977c:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8009780:	ee17 0a90 	vmov	r0, s15
 8009784:	f7f6 fef0 	bl	8000568 <__aeabi_f2d>
 8009788:	ec41 0b10 	vmov	d0, r0, r1
 800978c:	f016 fb90 	bl	801feb0 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 8009790:	4629      	mov	r1, r5
 8009792:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 8009794:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 8009798:	f7f7 fa32 	bl	8000c00 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800979c:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 80097a0:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 80097a4:	ec51 0b10 	vmov	r0, r1, d0
 80097a8:	f7f7 fa2a 	bl	8000c00 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 80097ac:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 80097b0:	a11d      	add	r1, pc, #116	; (adr r1, 8009828 <cqs_func+0xb68>)
 80097b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b6:	4b27      	ldr	r3, [pc, #156]	; (8009854 <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 80097b8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8009858 <cqs_func+0xb98>
		bar_CQS = 0.9;
 80097bc:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 80097c0:	210d      	movs	r1, #13
 80097c2:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 80097c4:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 80097c8:	f00a fe48 	bl	801445c <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 80097cc:	ee79 7a6c 	vsub.f32	s15, s18, s25
 80097d0:	ee17 0a90 	vmov	r0, s15
 80097d4:	f7f6 fec8 	bl	8000568 <__aeabi_f2d>
 80097d8:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 80097dc:	4606      	mov	r6, r0
 80097de:	ee17 0a90 	vmov	r0, s15
 80097e2:	460f      	mov	r7, r1
 80097e4:	f7f6 fec0 	bl	8000568 <__aeabi_f2d>
 80097e8:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 80097ec:	4680      	mov	r8, r0
 80097ee:	ee17 0a90 	vmov	r0, s15
 80097f2:	4689      	mov	r9, r1
 80097f4:	f7f6 feb8 	bl	8000568 <__aeabi_f2d>
 80097f8:	4632      	mov	r2, r6
 80097fa:	4604      	mov	r4, r0
 80097fc:	460d      	mov	r5, r1
 80097fe:	463b      	mov	r3, r7
 8009800:	4630      	mov	r0, r6
 8009802:	4639      	mov	r1, r7
 8009804:	f7f6 ff04 	bl	8000610 <__aeabi_dmul>
 8009808:	4642      	mov	r2, r8
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	464b      	mov	r3, r9
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f6 fefc 	bl	8000610 <__aeabi_dmul>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f6 fd44 	bl	80002ac <__adddf3>
 8009824:	e01e      	b.n	8009864 <cqs_func+0xba4>
 8009826:	bf00      	nop
 8009828:	cccccccd 	.word	0xcccccccd
 800982c:	3feccccc 	.word	0x3feccccc
 8009830:	42e80000 	.word	0x42e80000
 8009834:	2008a998 	.word	0x2008a998
 8009838:	2008ab20 	.word	0x2008ab20
 800983c:	2008a898 	.word	0x2008a898
 8009840:	2008aaa8 	.word	0x2008aaa8
 8009844:	2008a918 	.word	0x2008a918
 8009848:	407f4000 	.word	0x407f4000
 800984c:	2008aa10 	.word	0x2008aa10
 8009850:	40690000 	.word	0x40690000
 8009854:	2008a910 	.word	0x2008a910
 8009858:	3f666666 	.word	0x3f666666
 800985c:	20002b9b 	.word	0x20002b9b
 8009860:	20000140 	.word	0x20000140
 8009864:	4622      	mov	r2, r4
 8009866:	4606      	mov	r6, r0
 8009868:	460f      	mov	r7, r1
 800986a:	462b      	mov	r3, r5
 800986c:	4620      	mov	r0, r4
 800986e:	4629      	mov	r1, r5
 8009870:	f7f6 fece 	bl	8000610 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	f7f6 fd16 	bl	80002ac <__adddf3>
 8009880:	ec41 0b10 	vmov	d0, r0, r1
 8009884:	f016 fb14 	bl	801feb0 <sqrt>
 8009888:	ec51 0b10 	vmov	r0, r1, d0
 800988c:	f7f7 f9b8 	bl	8000c00 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 8009890:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 8009898:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800989c:	f340 82a4 	ble.w	8009de8 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 80098a0:	ee68 7a48 	vnmul.f32	s15, s16, s16
 80098a4:	eee9 7a09 	vfma.f32	s15, s18, s18
 80098a8:	ee17 0a90 	vmov	r0, s15
 80098ac:	f7f6 fe5c 	bl	8000568 <__aeabi_f2d>
 80098b0:	ec41 0b10 	vmov	d0, r0, r1
 80098b4:	f016 fafc 	bl	801feb0 <sqrt>
 80098b8:	ec51 0b10 	vmov	r0, r1, d0
 80098bc:	f7f7 f9a0 	bl	8000c00 <__aeabi_d2f>
			sum_delta_c += delta_c;
 80098c0:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 80098c4:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 80098c8:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 80098cc:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 80098d0:	f7f6 fe4a 	bl	8000568 <__aeabi_f2d>
 80098d4:	a3bc      	add	r3, pc, #752	; (adr r3, 8009bc8 <cqs_func+0xf08>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f7f6 fe99 	bl	8000610 <__aeabi_dmul>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	2000      	movs	r0, #0
 80098e4:	49c8      	ldr	r1, [pc, #800]	; (8009c08 <cqs_func+0xf48>)
 80098e6:	4cc9      	ldr	r4, [pc, #804]	; (8009c0c <cqs_func+0xf4c>)
 80098e8:	f7f6 fcde 	bl	80002a8 <__aeabi_dsub>
 80098ec:	2200      	movs	r2, #0
 80098ee:	4bc8      	ldr	r3, [pc, #800]	; (8009c10 <cqs_func+0xf50>)
 80098f0:	f7f6 ffb8 	bl	8000864 <__aeabi_ddiv>
 80098f4:	ec41 0b10 	vmov	d0, r0, r1
 80098f8:	f016 f866 	bl	801f9c8 <exp>
 80098fc:	2200      	movs	r2, #0
 80098fe:	4bc5      	ldr	r3, [pc, #788]	; (8009c14 <cqs_func+0xf54>)
 8009900:	ec51 0b10 	vmov	r0, r1, d0
 8009904:	f7f6 fcd2 	bl	80002ac <__adddf3>
 8009908:	ec41 0b10 	vmov	d0, r0, r1
 800990c:	f016 f8d8 	bl	801fac0 <log>
 8009910:	2200      	movs	r2, #0
 8009912:	ec51 0b10 	vmov	r0, r1, d0
 8009916:	4bbe      	ldr	r3, [pc, #760]	; (8009c10 <cqs_func+0xf50>)
 8009918:	f7f6 fe7a 	bl	8000610 <__aeabi_dmul>
 800991c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009920:	f7f6 fe76 	bl	8000610 <__aeabi_dmul>
 8009924:	f7f7 f96c 	bl	8000c00 <__aeabi_d2f>
 8009928:	ee07 0a90 	vmov	s15, r0
 800992c:	4bba      	ldr	r3, [pc, #744]	; (8009c18 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800992e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 8009932:	6018      	str	r0, [r3, #0]
 8009934:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 8009938:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800993c:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 8009940:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 8009944:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 8009948:	f47f adc7 	bne.w	80094da <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800994c:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 8009950:	eeca 7a08 	vdiv.f32	s15, s20, s16
 8009954:	ee17 0a90 	vmov	r0, s15
 8009958:	f7f6 fe06 	bl	8000568 <__aeabi_f2d>
 800995c:	ec41 0b10 	vmov	d0, r0, r1
 8009960:	f016 faa6 	bl	801feb0 <sqrt>
 8009964:	ec51 0b10 	vmov	r0, r1, d0
 8009968:	f7f7 f94a 	bl	8000c00 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800996c:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 8009970:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 8009974:	ee17 0a90 	vmov	r0, s15
 8009978:	f7f6 fdf6 	bl	8000568 <__aeabi_f2d>
 800997c:	ec41 0b10 	vmov	d0, r0, r1
 8009980:	f016 fa96 	bl	801feb0 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 8009984:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 8009988:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800998c:	f7f6 fdec 	bl	8000568 <__aeabi_f2d>
 8009990:	a38d      	add	r3, pc, #564	; (adr r3, 8009bc8 <cqs_func+0xf08>)
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f7f6 fe3b 	bl	8000610 <__aeabi_dmul>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	2000      	movs	r0, #0
 80099a0:	4999      	ldr	r1, [pc, #612]	; (8009c08 <cqs_func+0xf48>)
 80099a2:	f7f6 fc81 	bl	80002a8 <__aeabi_dsub>
 80099a6:	f7f7 f92b 	bl	8000c00 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 80099aa:	ee06 0a90 	vmov	s13, r0
 80099ae:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80099b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b6:	ee17 0a10 	vmov	r0, s14
 80099ba:	f7f6 fdd5 	bl	8000568 <__aeabi_f2d>
 80099be:	ec41 0b10 	vmov	d0, r0, r1
 80099c2:	f016 f801 	bl	801f9c8 <exp>
 80099c6:	2200      	movs	r2, #0
 80099c8:	4b92      	ldr	r3, [pc, #584]	; (8009c14 <cqs_func+0xf54>)
 80099ca:	ec51 0b10 	vmov	r0, r1, d0
 80099ce:	f7f6 fc6d 	bl	80002ac <__adddf3>
 80099d2:	ec41 0b10 	vmov	d0, r0, r1
 80099d6:	f016 f873 	bl	801fac0 <log>

	 Qa_temp = Mcct * Qa0_100;
 80099da:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 80099de:	ec51 0b10 	vmov	r0, r1, d0
 80099e2:	2200      	movs	r2, #0
 80099e4:	4b8a      	ldr	r3, [pc, #552]	; (8009c10 <cqs_func+0xf50>)
 80099e6:	f7f6 fe13 	bl	8000610 <__aeabi_dmul>
 80099ea:	f7f7 f909 	bl	8000c00 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 80099ee:	f7f6 fdbb 	bl	8000568 <__aeabi_f2d>
 80099f2:	4632      	mov	r2, r6
 80099f4:	463b      	mov	r3, r7
 80099f6:	f7f6 fe0b 	bl	8000610 <__aeabi_dmul>
 80099fa:	f7f7 f901 	bl	8000c00 <__aeabi_d2f>
 80099fe:	ee07 0a90 	vmov	s15, r0
 8009a02:	4b86      	ldr	r3, [pc, #536]	; (8009c1c <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 8009a04:	4a86      	ldr	r2, [pc, #536]	; (8009c20 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 8009a06:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 8009a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 8009a0c:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 8009a0e:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 8009a12:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 8009a14:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 8009a16:	f7f7 f8f3 	bl	8000c00 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 8009a1a:	f7f6 fda5 	bl	8000568 <__aeabi_f2d>
 8009a1e:	a36c      	add	r3, pc, #432	; (adr r3, 8009bd0 <cqs_func+0xf10>)
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f7f6 fdf4 	bl	8000610 <__aeabi_dmul>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	4976      	ldr	r1, [pc, #472]	; (8009c08 <cqs_func+0xf48>)
 8009a30:	f7f6 fc3a 	bl	80002a8 <__aeabi_dsub>
 8009a34:	2200      	movs	r2, #0
 8009a36:	4b76      	ldr	r3, [pc, #472]	; (8009c10 <cqs_func+0xf50>)
 8009a38:	f7f6 ff14 	bl	8000864 <__aeabi_ddiv>
 8009a3c:	ec41 0b10 	vmov	d0, r0, r1
 8009a40:	f015 ffc2 	bl	801f9c8 <exp>
 8009a44:	2200      	movs	r2, #0
 8009a46:	4b73      	ldr	r3, [pc, #460]	; (8009c14 <cqs_func+0xf54>)
 8009a48:	ec51 0b10 	vmov	r0, r1, d0
 8009a4c:	f7f6 fc2c 	bl	80002a8 <__aeabi_dsub>
 8009a50:	ec41 0b10 	vmov	d0, r0, r1
 8009a54:	f016 f834 	bl	801fac0 <log>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4b6d      	ldr	r3, [pc, #436]	; (8009c10 <cqs_func+0xf50>)
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	4639      	mov	r1, r7
 8009a60:	ed8d 0b00 	vstr	d0, [sp]
 8009a64:	f7f6 fdd4 	bl	8000610 <__aeabi_dmul>
 8009a68:	ed9d 0b00 	vldr	d0, [sp]
 8009a6c:	ec53 2b10 	vmov	r2, r3, d0
 8009a70:	f7f6 fdce 	bl	8000610 <__aeabi_dmul>
 8009a74:	f7f7 f8c4 	bl	8000c00 <__aeabi_d2f>
 8009a78:	ee07 0a90 	vmov	s15, r0
 8009a7c:	4b69      	ldr	r3, [pc, #420]	; (8009c24 <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 8009a7e:	4a6a      	ldr	r2, [pc, #424]	; (8009c28 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 8009a80:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 8009a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 8009a86:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 8009a8a:	ee17 3a90 	vmov	r3, s15
 8009a8e:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 8009a90:	2200      	movs	r2, #0
 8009a92:	4b5f      	ldr	r3, [pc, #380]	; (8009c10 <cqs_func+0xf50>)
 8009a94:	f7f6 fdbc 	bl	8000610 <__aeabi_dmul>
 8009a98:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	ee79 7a67 	vsub.f32	s15, s18, s15
 8009aa4:	ee17 0a90 	vmov	r0, s15
 8009aa8:	f7f6 fd5e 	bl	8000568 <__aeabi_f2d>
 8009aac:	a34a      	add	r3, pc, #296	; (adr r3, 8009bd8 <cqs_func+0xf18>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fdad 	bl	8000610 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	2000      	movs	r0, #0
 8009abc:	4952      	ldr	r1, [pc, #328]	; (8009c08 <cqs_func+0xf48>)
 8009abe:	f7f6 fbf3 	bl	80002a8 <__aeabi_dsub>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4b52      	ldr	r3, [pc, #328]	; (8009c10 <cqs_func+0xf50>)
 8009ac6:	f7f6 fecd 	bl	8000864 <__aeabi_ddiv>
 8009aca:	ec41 0b10 	vmov	d0, r0, r1
 8009ace:	f015 ff7b 	bl	801f9c8 <exp>
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4b4f      	ldr	r3, [pc, #316]	; (8009c14 <cqs_func+0xf54>)
 8009ad6:	ec51 0b10 	vmov	r0, r1, d0
 8009ada:	f7f6 fbe5 	bl	80002a8 <__aeabi_dsub>
 8009ade:	ec41 0b10 	vmov	d0, r0, r1
 8009ae2:	f015 ffed 	bl	801fac0 <log>
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	ec53 2b10 	vmov	r2, r3, d0
 8009aec:	4629      	mov	r1, r5
 8009aee:	f7f6 fd8f 	bl	8000610 <__aeabi_dmul>
 8009af2:	f7f7 f885 	bl	8000c00 <__aeabi_d2f>
 8009af6:	ee07 0a90 	vmov	s15, r0
 8009afa:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 8009afc:	4a4c      	ldr	r2, [pc, #304]	; (8009c30 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 8009afe:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 8009b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 8009b04:	4943      	ldr	r1, [pc, #268]	; (8009c14 <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 8009b06:	ee17 3a90 	vmov	r3, s15
 8009b0a:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 8009b0c:	4b49      	ldr	r3, [pc, #292]	; (8009c34 <cqs_func+0xf74>)
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 8009b14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009b18:	210d      	movs	r1, #13
 8009b1a:	2055      	movs	r0, #85	; 0x55
 8009b1c:	b02f      	add	sp, #188	; 0xbc
 8009b1e:	ecbd 8b0a 	vpop	{d8-d12}
 8009b22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 8009b26:	f00a bc99 	b.w	801445c <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 8009b2a:	9a04      	ldr	r2, [sp, #16]
 8009b2c:	f241 3387 	movw	r3, #4999	; 0x1387
 8009b30:	429a      	cmp	r2, r3
 8009b32:	f67f a928 	bls.w	8008d86 <cqs_func+0xc6>
		if (CCT_measure < 7000)
 8009b36:	9a04      	ldr	r2, [sp, #16]
 8009b38:	f641 3357 	movw	r3, #6999	; 0x1b57
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d97b      	bls.n	8009c38 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 8009b40:	9804      	ldr	r0, [sp, #16]
 8009b42:	f7f6 fcef 	bl	8000524 <__aeabi_ui2d>
 8009b46:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8009be0 <cqs_func+0xf20>
 8009b4a:	ec41 0b10 	vmov	d0, r0, r1
 8009b4e:	f016 f837 	bl	801fbc0 <pow>
 8009b52:	eddd 7a04 	vldr	s15, [sp, #16]
 8009b56:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009b5a:	ed8d 0b00 	vstr	d0, [sp]
 8009b5e:	ee68 7a08 	vmul.f32	s15, s16, s16
 8009b62:	ee17 0a90 	vmov	r0, s15
 8009b66:	f7f6 fcff 	bl	8000568 <__aeabi_f2d>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	a11e      	add	r1, pc, #120	; (adr r1, 8009be8 <cqs_func+0xf28>)
 8009b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b74:	f7f6 fe76 	bl	8000864 <__aeabi_ddiv>
 8009b78:	ed9d 0b00 	vldr	d0, [sp]
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	ec53 2b10 	vmov	r2, r3, d0
 8009b82:	460d      	mov	r5, r1
 8009b84:	a11a      	add	r1, pc, #104	; (adr r1, 8009bf0 <cqs_func+0xf30>)
 8009b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b8a:	f7f6 fe6b 	bl	8000864 <__aeabi_ddiv>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 fb89 	bl	80002ac <__adddf3>
 8009b9a:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 8009b9c:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 8009ba0:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 8009ba2:	f7f6 fce1 	bl	8000568 <__aeabi_f2d>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	a113      	add	r1, pc, #76	; (adr r1, 8009bf8 <cqs_func+0xf38>)
 8009bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb0:	f7f6 fe58 	bl	8000864 <__aeabi_ddiv>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4620      	mov	r0, r4
 8009bba:	4629      	mov	r1, r5
 8009bbc:	f7f6 fb76 	bl	80002ac <__adddf3>
 8009bc0:	a30f      	add	r3, pc, #60	; (adr r3, 8009c00 <cqs_func+0xf40>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	e073      	b.n	8009cb0 <cqs_func+0xff0>
 8009bc8:	cccccccd 	.word	0xcccccccd
 8009bcc:	4008cccc 	.word	0x4008cccc
 8009bd0:	d70a3d71 	.word	0xd70a3d71
 8009bd4:	400770a3 	.word	0x400770a3
 8009bd8:	a3d70a3d 	.word	0xa3d70a3d
 8009bdc:	400e3d70 	.word	0x400e3d70
 8009be0:	00000000 	.word	0x00000000
 8009be4:	40080000 	.word	0x40080000
 8009be8:	00000000 	.word	0x00000000
 8009bec:	413d04e8 	.word	0x413d04e8
 8009bf0:	00000001 	.word	0x00000001
 8009bf4:	c1dde5cf 	.word	0xc1dde5cf
 8009bf8:	28f5c290 	.word	0x28f5c290
 8009bfc:	406eef5c 	.word	0x406eef5c
 8009c00:	a3ec02f3 	.word	0xa3ec02f3
 8009c04:	3fce5753 	.word	0x3fce5753
 8009c08:	40590000 	.word	0x40590000
 8009c0c:	20000188 	.word	0x20000188
 8009c10:	40240000 	.word	0x40240000
 8009c14:	3ff00000 	.word	0x3ff00000
 8009c18:	2008aaa0 	.word	0x2008aaa0
 8009c1c:	2008ab98 	.word	0x2008ab98
 8009c20:	20002bab 	.word	0x20002bab
 8009c24:	2008ab9c 	.word	0x2008ab9c
 8009c28:	20002bac 	.word	0x20002bac
 8009c2c:	2008a990 	.word	0x2008a990
 8009c30:	20002bad 	.word	0x20002bad
 8009c34:	2008a910 	.word	0x2008a910
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 8009c38:	eddd 7a04 	vldr	s15, [sp, #16]
 8009c3c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009c40:	ee68 8a08 	vmul.f32	s17, s16, s16
 8009c44:	ee68 7a28 	vmul.f32	s15, s16, s17
 8009c48:	ee17 0a90 	vmov	r0, s15
 8009c4c:	f7f6 fc8c 	bl	8000568 <__aeabi_f2d>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	a181      	add	r1, pc, #516	; (adr r1, 8009e5c <cqs_func+0x119c>)
 8009c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c5a:	f7f6 fe03 	bl	8000864 <__aeabi_ddiv>
 8009c5e:	4604      	mov	r4, r0
 8009c60:	ee18 0a90 	vmov	r0, s17
 8009c64:	460d      	mov	r5, r1
 8009c66:	f7f6 fc7f 	bl	8000568 <__aeabi_f2d>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	a17d      	add	r1, pc, #500	; (adr r1, 8009e64 <cqs_func+0x11a4>)
 8009c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c74:	f7f6 fdf6 	bl	8000864 <__aeabi_ddiv>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	f7f6 fb14 	bl	80002ac <__adddf3>
 8009c84:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 8009c86:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 8009c8a:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 8009c8c:	f7f6 fc6c 	bl	8000568 <__aeabi_f2d>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	a175      	add	r1, pc, #468	; (adr r1, 8009e6c <cqs_func+0x11ac>)
 8009c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c9a:	f7f6 fde3 	bl	8000864 <__aeabi_ddiv>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7f6 fb01 	bl	80002ac <__adddf3>
 8009caa:	a372      	add	r3, pc, #456	; (adr r3, 8009e74 <cqs_func+0x11b4>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 8009cb0:	f7f6 fafc 	bl	80002ac <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 8009cb4:	4b64      	ldr	r3, [pc, #400]	; (8009e48 <cqs_func+0x1188>)
 8009cb6:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 8009cba:	4b63      	ldr	r3, [pc, #396]	; (8009e48 <cqs_func+0x1188>)
 8009cbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4b62      	ldr	r3, [pc, #392]	; (8009e4c <cqs_func+0x118c>)
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 fca2 	bl	8000610 <__aeabi_dmul>
 8009ccc:	4622      	mov	r2, r4
 8009cce:	462b      	mov	r3, r5
 8009cd0:	f7f6 fc9e 	bl	8000610 <__aeabi_dmul>
 8009cd4:	a346      	add	r3, pc, #280	; (adr r3, 8009df0 <cqs_func+0x1130>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460f      	mov	r7, r1
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fc95 	bl	8000610 <__aeabi_dmul>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4630      	mov	r0, r6
 8009cec:	4639      	mov	r1, r7
 8009cee:	f7f6 fadd 	bl	80002ac <__adddf3>
 8009cf2:	a341      	add	r3, pc, #260	; (adr r3, 8009df8 <cqs_func+0x1138>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fad6 	bl	80002a8 <__aeabi_dsub>
 8009cfc:	4b54      	ldr	r3, [pc, #336]	; (8009e50 <cqs_func+0x1190>)
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 8009d06:	4620      	mov	r0, r4
 8009d08:	a33d      	add	r3, pc, #244	; (adr r3, 8009e00 <cqs_func+0x1140>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	4629      	mov	r1, r5
 8009d10:	f7f6 fc7e 	bl	8000610 <__aeabi_dmul>
 8009d14:	a33c      	add	r3, pc, #240	; (adr r3, 8009e08 <cqs_func+0x1148>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fac7 	bl	80002ac <__adddf3>
 8009d1e:	a33c      	add	r3, pc, #240	; (adr r3, 8009e10 <cqs_func+0x1150>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	4680      	mov	r8, r0
 8009d26:	4689      	mov	r9, r1
 8009d28:	4630      	mov	r0, r6
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	f7f6 fc70 	bl	8000610 <__aeabi_dmul>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	f7f6 fab6 	bl	80002a8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 8009d3c:	a336      	add	r3, pc, #216	; (adr r3, 8009e18 <cqs_func+0x1158>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 8009d42:	4680      	mov	r8, r0
 8009d44:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 8009d46:	4620      	mov	r0, r4
 8009d48:	4629      	mov	r1, r5
 8009d4a:	f7f6 fc61 	bl	8000610 <__aeabi_dmul>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	a133      	add	r1, pc, #204	; (adr r1, 8009e20 <cqs_func+0x1160>)
 8009d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d58:	f7f6 faa6 	bl	80002a8 <__aeabi_dsub>
 8009d5c:	a332      	add	r3, pc, #200	; (adr r3, 8009e28 <cqs_func+0x1168>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	4682      	mov	sl, r0
 8009d64:	468b      	mov	fp, r1
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 fc51 	bl	8000610 <__aeabi_dmul>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4650      	mov	r0, sl
 8009d74:	4659      	mov	r1, fp
 8009d76:	f7f6 fa99 	bl	80002ac <__adddf3>
 8009d7a:	f7f6 ff41 	bl	8000c00 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 8009d7e:	f7f6 fbf3 	bl	8000568 <__aeabi_f2d>
 8009d82:	4642      	mov	r2, r8
 8009d84:	464b      	mov	r3, r9
 8009d86:	f7f6 fd6d 	bl	8000864 <__aeabi_ddiv>
 8009d8a:	f7f6 ff39 	bl	8000c00 <__aeabi_d2f>
 8009d8e:	4b31      	ldr	r3, [pc, #196]	; (8009e54 <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 8009d90:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 8009d92:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 8009d94:	a326      	add	r3, pc, #152	; (adr r3, 8009e30 <cqs_func+0x1170>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f7f6 fc38 	bl	8000610 <__aeabi_dmul>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	a124      	add	r1, pc, #144	; (adr r1, 8009e38 <cqs_func+0x1178>)
 8009da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009daa:	f7f6 fa7d 	bl	80002a8 <__aeabi_dsub>
 8009dae:	a324      	add	r3, pc, #144	; (adr r3, 8009e40 <cqs_func+0x1180>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	4604      	mov	r4, r0
 8009db6:	460d      	mov	r5, r1
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 fc28 	bl	8000610 <__aeabi_dmul>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f7f6 fa70 	bl	80002ac <__adddf3>
 8009dcc:	f7f6 ff18 	bl	8000c00 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 8009dd0:	f7f6 fbca 	bl	8000568 <__aeabi_f2d>
 8009dd4:	464b      	mov	r3, r9
 8009dd6:	4642      	mov	r2, r8
 8009dd8:	f7f6 fd44 	bl	8000864 <__aeabi_ddiv>
 8009ddc:	f7f6 ff10 	bl	8000c00 <__aeabi_d2f>
 8009de0:	4b1d      	ldr	r3, [pc, #116]	; (8009e58 <cqs_func+0x1198>)
 8009de2:	6018      	str	r0, [r3, #0]
 8009de4:	f7fe bfd2 	b.w	8008d8c <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 8009de8:	ee07 0a90 	vmov	s15, r0
 8009dec:	e56c      	b.n	80098c8 <cqs_func+0xc08>
 8009dee:	bf00      	nop
 8009df0:	8f5c28f6 	.word	0x8f5c28f6
 8009df4:	4006f5c2 	.word	0x4006f5c2
 8009df8:	9999999a 	.word	0x9999999a
 8009dfc:	3fd19999 	.word	0x3fd19999
 8009e00:	af4f0d84 	.word	0xaf4f0d84
 8009e04:	3fd06594 	.word	0x3fd06594
 8009e08:	9f559b3d 	.word	0x9f559b3d
 8009e0c:	3f98adab 	.word	0x3f98adab
 8009e10:	487fcb92 	.word	0x487fcb92
 8009e14:	3fe77dbf 	.word	0x3fe77dbf
 8009e18:	17c1bda5 	.word	0x17c1bda5
 8009e1c:	3ffc5326 	.word	0x3ffc5326
 8009e20:	76c8b439 	.word	0x76c8b439
 8009e24:	bff59fbe 	.word	0xbff59fbe
 8009e28:	0aa64c30 	.word	0x0aa64c30
 8009e2c:	4017a546 	.word	0x4017a546
 8009e30:	205bc01a 	.word	0x205bc01a
 8009e34:	403f7141 	.word	0x403f7141
 8009e38:	eb851eb8 	.word	0xeb851eb8
 8009e3c:	3f9eb851 	.word	0x3f9eb851
 8009e40:	ee631f8a 	.word	0xee631f8a
 8009e44:	403e125a 	.word	0x403e125a
 8009e48:	2008aa98 	.word	0x2008aa98
 8009e4c:	c0080000 	.word	0xc0080000
 8009e50:	2008aa90 	.word	0x2008aa90
 8009e54:	20002b94 	.word	0x20002b94
 8009e58:	20002b98 	.word	0x20002b98
 8009e5c:	dc000000 	.word	0xdc000000
 8009e60:	c1f12993 	.word	0xc1f12993
 8009e64:	00000000 	.word	0x00000000
 8009e68:	4146a47c 	.word	0x4146a47c
 8009e6c:	3d70a3d7 	.word	0x3d70a3d7
 8009e70:	4058c70a 	.word	0x4058c70a
 8009e74:	d594f26b 	.word	0xd594f26b
 8009e78:	3fcf3d74 	.word	0x3fcf3d74

08009e7c <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 8009e7c:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 8009e7e:	bbb8      	cbnz	r0, 8009ef0 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 8009e80:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8009e84:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8009e88:	2212      	movs	r2, #18
 8009e8a:	215f      	movs	r1, #95	; 0x5f
 8009e8c:	2010      	movs	r0, #16
 8009e8e:	9400      	str	r4, [sp, #0]
 8009e90:	f011 fca3 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 8009e94:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8009e98:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8009e9c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8009ea0:	2010      	movs	r0, #16
 8009ea2:	9400      	str	r4, [sp, #0]
 8009ea4:	f011 fc99 	bl	801b7da <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 8009ea8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8009eac:	4619      	mov	r1, r3
 8009eae:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	9400      	str	r4, [sp, #0]
 8009eb6:	f011 fc33 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 8009eba:	f240 1301 	movw	r3, #257	; 0x101
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8009ec4:	2010      	movs	r0, #16
 8009ec6:	9400      	str	r4, [sp, #0]
 8009ec8:	f011 fc2a 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 8009ecc:	23b5      	movs	r3, #181	; 0xb5
 8009ece:	4619      	mov	r1, r3
 8009ed0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8009ed4:	2010      	movs	r0, #16
 8009ed6:	9400      	str	r4, [sp, #0]
 8009ed8:	f011 fc22 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 8009edc:	2369      	movs	r3, #105	; 0x69
 8009ede:	9400      	str	r4, [sp, #0]
 8009ee0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 8009ee8:	f011 fc1a 	bl	801b720 <TFT_DrawLine>
		}
}
 8009eec:	b002      	add	sp, #8
 8009eee:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 8009ef0:	2801      	cmp	r0, #1
 8009ef2:	d131      	bne.n	8009f58 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 8009ef4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8009ef8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009efc:	22ff      	movs	r2, #255	; 0xff
 8009efe:	2146      	movs	r1, #70	; 0x46
 8009f00:	20fd      	movs	r0, #253	; 0xfd
 8009f02:	9400      	str	r4, [sp, #0]
 8009f04:	f011 fc69 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 8009f08:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f0c:	22ff      	movs	r2, #255	; 0xff
 8009f0e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8009f12:	2028      	movs	r0, #40	; 0x28
 8009f14:	9400      	str	r4, [sp, #0]
 8009f16:	f011 fc60 	bl	801b7da <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 8009f1a:	22cc      	movs	r2, #204	; 0xcc
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f22:	2146      	movs	r1, #70	; 0x46
 8009f24:	9400      	str	r4, [sp, #0]
 8009f26:	f011 fbfb 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 8009f2a:	2297      	movs	r2, #151	; 0x97
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f32:	2146      	movs	r1, #70	; 0x46
 8009f34:	9400      	str	r4, [sp, #0]
 8009f36:	f011 fbf3 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 8009f3a:	2262      	movs	r2, #98	; 0x62
 8009f3c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f40:	4610      	mov	r0, r2
 8009f42:	9400      	str	r4, [sp, #0]
 8009f44:	2146      	movs	r1, #70	; 0x46
 8009f46:	f011 fbeb 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 8009f4a:	9400      	str	r4, [sp, #0]
 8009f4c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f50:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 8009f52:	2146      	movs	r1, #70	; 0x46
 8009f54:	4610      	mov	r0, r2
 8009f56:	e7c7      	b.n	8009ee8 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 8009f58:	2802      	cmp	r0, #2
 8009f5a:	d1c7      	bne.n	8009eec <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 8009f5c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8009f60:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f64:	2210      	movs	r2, #16
 8009f66:	214a      	movs	r1, #74	; 0x4a
 8009f68:	2012      	movs	r0, #18
 8009f6a:	9400      	str	r4, [sp, #0]
 8009f6c:	f011 fc35 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 8009f70:	234c      	movs	r3, #76	; 0x4c
 8009f72:	22e8      	movs	r2, #232	; 0xe8
 8009f74:	214a      	movs	r1, #74	; 0x4a
 8009f76:	2011      	movs	r0, #17
 8009f78:	9400      	str	r4, [sp, #0]
 8009f7a:	f011 fc2e 	bl	801b7da <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 8009f7e:	2244      	movs	r2, #68	; 0x44
 8009f80:	4610      	mov	r0, r2
 8009f82:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f86:	2146      	movs	r1, #70	; 0x46
 8009f88:	9400      	str	r4, [sp, #0]
 8009f8a:	f011 fbc9 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 8009f8e:	2279      	movs	r2, #121	; 0x79
 8009f90:	4610      	mov	r0, r2
 8009f92:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009f96:	2146      	movs	r1, #70	; 0x46
 8009f98:	9400      	str	r4, [sp, #0]
 8009f9a:	f011 fbc1 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 8009f9e:	22ae      	movs	r2, #174	; 0xae
 8009fa0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	9400      	str	r4, [sp, #0]
 8009fa8:	2146      	movs	r1, #70	; 0x46
 8009faa:	f011 fbb9 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 8009fae:	9400      	str	r4, [sp, #0]
 8009fb0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8009fb4:	22e3      	movs	r2, #227	; 0xe3
 8009fb6:	e7cc      	b.n	8009f52 <CQS_Axes+0xd6>

08009fb8 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 8009fb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 8009fbc:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 8009fbe:	461e      	mov	r6, r3
	char buffer[2] = {0};
 8009fc0:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 8009fc2:	4688      	mov	r8, r1
 8009fc4:	4617      	mov	r7, r2
	char buffer[2] = {0};
 8009fc6:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d15a      	bne.n	800a084 <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 8009fce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009fd2:	f011 fe31 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8009fd6:	2063      	movs	r0, #99	; 0x63
 8009fd8:	f011 fe34 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 8009fdc:	485c      	ldr	r0, [pc, #368]	; (800a150 <CQS_Axes_Measure+0x198>)
 8009fde:	f011 fe25 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 8009fe2:	2261      	movs	r2, #97	; 0x61
 8009fe4:	2146      	movs	r1, #70	; 0x46
 8009fe6:	2014      	movs	r0, #20
 8009fe8:	f011 feea 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 8009fec:	4859      	ldr	r0, [pc, #356]	; (800a154 <CQS_Axes_Measure+0x19c>)
 8009fee:	f011 fe1d 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 8009ff2:	2251      	movs	r2, #81	; 0x51
 8009ff4:	2144      	movs	r1, #68	; 0x44
 8009ff6:	2005      	movs	r0, #5
 8009ff8:	f011 fee2 	bl	801bdc0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	4956      	ldr	r1, [pc, #344]	; (800a158 <CQS_Axes_Measure+0x1a0>)
 800a000:	4620      	mov	r0, r4
 800a002:	f014 fffd 	bl	801f000 <siprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800a006:	2303      	movs	r3, #3
 800a008:	4622      	mov	r2, r4
 800a00a:	2144      	movs	r1, #68	; 0x44
 800a00c:	2027      	movs	r0, #39	; 0x27
 800a00e:	f011 ff2f 	bl	801be70 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800a012:	484f      	ldr	r0, [pc, #316]	; (800a150 <CQS_Axes_Measure+0x198>)
 800a014:	f011 fe0a 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800a018:	2270      	movs	r2, #112	; 0x70
 800a01a:	4610      	mov	r0, r2
 800a01c:	2146      	movs	r1, #70	; 0x46
 800a01e:	f011 fecf 	bl	801bdc0 <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800a022:	484c      	ldr	r0, [pc, #304]	; (800a154 <CQS_Axes_Measure+0x19c>)
 800a024:	f011 fe02 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800a028:	2251      	movs	r2, #81	; 0x51
 800a02a:	2144      	movs	r1, #68	; 0x44
 800a02c:	205d      	movs	r0, #93	; 0x5d
 800a02e:	f011 fec7 	bl	801bdc0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800a032:	463a      	mov	r2, r7
 800a034:	4948      	ldr	r1, [pc, #288]	; (800a158 <CQS_Axes_Measure+0x1a0>)
 800a036:	4620      	mov	r0, r4
 800a038:	f014 ffe2 	bl	801f000 <siprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800a03c:	2303      	movs	r3, #3
 800a03e:	4622      	mov	r2, r4
 800a040:	2144      	movs	r1, #68	; 0x44
 800a042:	2082      	movs	r0, #130	; 0x82
 800a044:	f011 ff14 	bl	801be70 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800a048:	4841      	ldr	r0, [pc, #260]	; (800a150 <CQS_Axes_Measure+0x198>)
 800a04a:	f011 fdef 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800a04e:	2266      	movs	r2, #102	; 0x66
 800a050:	2146      	movs	r1, #70	; 0x46
 800a052:	20ce      	movs	r0, #206	; 0xce
 800a054:	f011 feb4 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800a058:	483e      	ldr	r0, [pc, #248]	; (800a154 <CQS_Axes_Measure+0x19c>)
 800a05a:	f011 fde7 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800a05e:	2251      	movs	r2, #81	; 0x51
 800a060:	2144      	movs	r1, #68	; 0x44
 800a062:	20bf      	movs	r0, #191	; 0xbf
 800a064:	f011 feac 	bl	801bdc0 <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800a068:	4632      	mov	r2, r6
 800a06a:	493b      	ldr	r1, [pc, #236]	; (800a158 <CQS_Axes_Measure+0x1a0>)
 800a06c:	4620      	mov	r0, r4
 800a06e:	f014 ffc7 	bl	801f000 <siprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800a072:	2303      	movs	r3, #3
 800a074:	4622      	mov	r2, r4
 800a076:	2144      	movs	r1, #68	; 0x44
 800a078:	20e6      	movs	r0, #230	; 0xe6
 800a07a:	f011 fef9 	bl	801be70 <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800a07e:	b002      	add	sp, #8
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	4d35      	ldr	r5, [pc, #212]	; (800a15c <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800a086:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800a088:	bf14      	ite	ne
 800a08a:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800a08c:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800a08e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800a092:	bf18      	it	ne
 800a094:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800a096:	f011 fdcf 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800a09a:	2063      	movs	r0, #99	; 0x63
 800a09c:	f011 fdd2 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800a0a0:	482b      	ldr	r0, [pc, #172]	; (800a150 <CQS_Axes_Measure+0x198>)
 800a0a2:	f011 fdc3 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800a0a6:	2261      	movs	r2, #97	; 0x61
 800a0a8:	2110      	movs	r1, #16
 800a0aa:	2064      	movs	r0, #100	; 0x64
 800a0ac:	f011 fe88 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800a0b0:	4828      	ldr	r0, [pc, #160]	; (800a154 <CQS_Axes_Measure+0x19c>)
 800a0b2:	f011 fdbb 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800a0b6:	2251      	movs	r2, #81	; 0x51
 800a0b8:	210e      	movs	r1, #14
 800a0ba:	2055      	movs	r0, #85	; 0x55
 800a0bc:	f011 fe80 	bl	801bdc0 <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	4925      	ldr	r1, [pc, #148]	; (800a158 <CQS_Axes_Measure+0x1a0>)
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f014 ff9b 	bl	801f000 <siprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	210e      	movs	r1, #14
 800a0d0:	207d      	movs	r0, #125	; 0x7d
 800a0d2:	f011 fecd 	bl	801be70 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800a0d6:	481e      	ldr	r0, [pc, #120]	; (800a150 <CQS_Axes_Measure+0x198>)
 800a0d8:	f011 fda8 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800a0dc:	2270      	movs	r2, #112	; 0x70
 800a0de:	2110      	movs	r1, #16
 800a0e0:	20d8      	movs	r0, #216	; 0xd8
 800a0e2:	f011 fe6d 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800a0e6:	481b      	ldr	r0, [pc, #108]	; (800a154 <CQS_Axes_Measure+0x19c>)
 800a0e8:	f011 fda0 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800a0ec:	2251      	movs	r2, #81	; 0x51
 800a0ee:	210e      	movs	r1, #14
 800a0f0:	20c7      	movs	r0, #199	; 0xc7
 800a0f2:	f011 fe65 	bl	801bdc0 <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800a0f6:	463a      	mov	r2, r7
 800a0f8:	4917      	ldr	r1, [pc, #92]	; (800a158 <CQS_Axes_Measure+0x1a0>)
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f014 ff80 	bl	801f000 <siprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800a100:	2303      	movs	r3, #3
 800a102:	4622      	mov	r2, r4
 800a104:	210e      	movs	r1, #14
 800a106:	20fc      	movs	r0, #252	; 0xfc
 800a108:	f011 feb2 	bl	801be70 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800a10c:	4810      	ldr	r0, [pc, #64]	; (800a150 <CQS_Axes_Measure+0x198>)
 800a10e:	f011 fd8d 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800a112:	2266      	movs	r2, #102	; 0x66
 800a114:	210e      	movs	r1, #14
 800a116:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800a11a:	f011 fe51 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800a11e:	480d      	ldr	r0, [pc, #52]	; (800a154 <CQS_Axes_Measure+0x19c>)
 800a120:	f011 fd84 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800a124:	2251      	movs	r2, #81	; 0x51
 800a126:	210e      	movs	r1, #14
 800a128:	f240 1045 	movw	r0, #325	; 0x145
 800a12c:	f011 fe48 	bl	801bdc0 <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800a130:	4632      	mov	r2, r6
 800a132:	4909      	ldr	r1, [pc, #36]	; (800a158 <CQS_Axes_Measure+0x1a0>)
 800a134:	4620      	mov	r0, r4
 800a136:	f014 ff63 	bl	801f000 <siprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800a13a:	2303      	movs	r3, #3
 800a13c:	4622      	mov	r2, r4
 800a13e:	210e      	movs	r1, #14
 800a140:	f240 106d 	movw	r0, #365	; 0x16d
 800a144:	f011 fe94 	bl	801be70 <TFT_DisplayString>
		TFT_direction = 0x00;
 800a148:	2300      	movs	r3, #0
 800a14a:	702b      	strb	r3, [r5, #0]
}
 800a14c:	e797      	b.n	800a07e <CQS_Axes_Measure+0xc6>
 800a14e:	bf00      	nop
 800a150:	200001c0 	.word	0x200001c0
 800a154:	200001b0 	.word	0x200001b0
 800a158:	080215d9 	.word	0x080215d9
 800a15c:	20004c40 	.word	0x20004c40

0800a160 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800a160:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800a162:	4604      	mov	r4, r0
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 811f 	bne.w	800a3a8 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800a16a:	488e      	ldr	r0, [pc, #568]	; (800a3a4 <CQS_Axes_Text+0x244>)
 800a16c:	f011 fd5e 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800a170:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a174:	f011 fd60 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800a178:	2063      	movs	r0, #99	; 0x63
 800a17a:	f011 fd63 	bl	801bc44 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800a17e:	2251      	movs	r2, #81	; 0x51
 800a180:	f240 119f 	movw	r1, #415	; 0x19f
 800a184:	2018      	movs	r0, #24
 800a186:	f011 fe1b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800a18a:	2231      	movs	r2, #49	; 0x31
 800a18c:	f240 119f 	movw	r1, #415	; 0x19f
 800a190:	201e      	movs	r0, #30
 800a192:	f011 fe15 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800a196:	2251      	movs	r2, #81	; 0x51
 800a198:	f240 119f 	movw	r1, #415	; 0x19f
 800a19c:	2028      	movs	r0, #40	; 0x28
 800a19e:	f011 fe0f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800a1a2:	2232      	movs	r2, #50	; 0x32
 800a1a4:	f240 119f 	movw	r1, #415	; 0x19f
 800a1a8:	202e      	movs	r0, #46	; 0x2e
 800a1aa:	f011 fe09 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800a1ae:	2251      	movs	r2, #81	; 0x51
 800a1b0:	f240 119f 	movw	r1, #415	; 0x19f
 800a1b4:	2038      	movs	r0, #56	; 0x38
 800a1b6:	f011 fe03 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800a1ba:	2233      	movs	r2, #51	; 0x33
 800a1bc:	f240 119f 	movw	r1, #415	; 0x19f
 800a1c0:	203e      	movs	r0, #62	; 0x3e
 800a1c2:	f011 fdfd 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800a1c6:	2251      	movs	r2, #81	; 0x51
 800a1c8:	f240 119f 	movw	r1, #415	; 0x19f
 800a1cc:	2048      	movs	r0, #72	; 0x48
 800a1ce:	f011 fdf7 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800a1d2:	2234      	movs	r2, #52	; 0x34
 800a1d4:	f240 119f 	movw	r1, #415	; 0x19f
 800a1d8:	204e      	movs	r0, #78	; 0x4e
 800a1da:	f011 fdf1 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800a1de:	2251      	movs	r2, #81	; 0x51
 800a1e0:	f240 119f 	movw	r1, #415	; 0x19f
 800a1e4:	2058      	movs	r0, #88	; 0x58
 800a1e6:	f011 fdeb 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800a1ea:	2235      	movs	r2, #53	; 0x35
 800a1ec:	f240 119f 	movw	r1, #415	; 0x19f
 800a1f0:	205e      	movs	r0, #94	; 0x5e
 800a1f2:	f011 fde5 	bl	801bdc0 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800a1f6:	2251      	movs	r2, #81	; 0x51
 800a1f8:	f240 119f 	movw	r1, #415	; 0x19f
 800a1fc:	2068      	movs	r0, #104	; 0x68
 800a1fe:	f011 fddf 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800a202:	2236      	movs	r2, #54	; 0x36
 800a204:	f240 119f 	movw	r1, #415	; 0x19f
 800a208:	206e      	movs	r0, #110	; 0x6e
 800a20a:	f011 fdd9 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800a20e:	2251      	movs	r2, #81	; 0x51
 800a210:	f240 119f 	movw	r1, #415	; 0x19f
 800a214:	2078      	movs	r0, #120	; 0x78
 800a216:	f011 fdd3 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800a21a:	2237      	movs	r2, #55	; 0x37
 800a21c:	f240 119f 	movw	r1, #415	; 0x19f
 800a220:	207e      	movs	r0, #126	; 0x7e
 800a222:	f011 fdcd 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800a226:	2251      	movs	r2, #81	; 0x51
 800a228:	f240 119f 	movw	r1, #415	; 0x19f
 800a22c:	2088      	movs	r0, #136	; 0x88
 800a22e:	f011 fdc7 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800a232:	2238      	movs	r2, #56	; 0x38
 800a234:	f240 119f 	movw	r1, #415	; 0x19f
 800a238:	208e      	movs	r0, #142	; 0x8e
 800a23a:	f011 fdc1 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800a23e:	2251      	movs	r2, #81	; 0x51
 800a240:	f240 119f 	movw	r1, #415	; 0x19f
 800a244:	2098      	movs	r0, #152	; 0x98
 800a246:	f011 fdbb 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800a24a:	2239      	movs	r2, #57	; 0x39
 800a24c:	f240 119f 	movw	r1, #415	; 0x19f
 800a250:	209e      	movs	r0, #158	; 0x9e
 800a252:	f011 fdb5 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800a256:	2231      	movs	r2, #49	; 0x31
 800a258:	f240 119f 	movw	r1, #415	; 0x19f
 800a25c:	20ad      	movs	r0, #173	; 0xad
 800a25e:	f011 fdaf 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800a262:	2251      	movs	r2, #81	; 0x51
 800a264:	f240 119f 	movw	r1, #415	; 0x19f
 800a268:	20a8      	movs	r0, #168	; 0xa8
 800a26a:	f011 fda9 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800a26e:	2230      	movs	r2, #48	; 0x30
 800a270:	f240 119f 	movw	r1, #415	; 0x19f
 800a274:	20b1      	movs	r0, #177	; 0xb1
 800a276:	f011 fda3 	bl	801bdc0 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800a27a:	2231      	movs	r2, #49	; 0x31
 800a27c:	f240 119f 	movw	r1, #415	; 0x19f
 800a280:	20bd      	movs	r0, #189	; 0xbd
 800a282:	f011 fd9d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800a286:	2251      	movs	r2, #81	; 0x51
 800a288:	f240 119f 	movw	r1, #415	; 0x19f
 800a28c:	20b8      	movs	r0, #184	; 0xb8
 800a28e:	f011 fd97 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800a292:	2231      	movs	r2, #49	; 0x31
 800a294:	f240 119f 	movw	r1, #415	; 0x19f
 800a298:	20c2      	movs	r0, #194	; 0xc2
 800a29a:	f011 fd91 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800a29e:	2231      	movs	r2, #49	; 0x31
 800a2a0:	f240 119f 	movw	r1, #415	; 0x19f
 800a2a4:	20cd      	movs	r0, #205	; 0xcd
 800a2a6:	f011 fd8b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800a2aa:	2251      	movs	r2, #81	; 0x51
 800a2ac:	f240 119f 	movw	r1, #415	; 0x19f
 800a2b0:	20c8      	movs	r0, #200	; 0xc8
 800a2b2:	f011 fd85 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800a2b6:	2232      	movs	r2, #50	; 0x32
 800a2b8:	f240 119f 	movw	r1, #415	; 0x19f
 800a2bc:	20d1      	movs	r0, #209	; 0xd1
 800a2be:	f011 fd7f 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800a2c2:	2231      	movs	r2, #49	; 0x31
 800a2c4:	f240 119f 	movw	r1, #415	; 0x19f
 800a2c8:	20dd      	movs	r0, #221	; 0xdd
 800a2ca:	f011 fd79 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800a2ce:	2251      	movs	r2, #81	; 0x51
 800a2d0:	f240 119f 	movw	r1, #415	; 0x19f
 800a2d4:	20d8      	movs	r0, #216	; 0xd8
 800a2d6:	f011 fd73 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800a2da:	2233      	movs	r2, #51	; 0x33
 800a2dc:	f240 119f 	movw	r1, #415	; 0x19f
 800a2e0:	20e1      	movs	r0, #225	; 0xe1
 800a2e2:	f011 fd6d 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800a2e6:	2231      	movs	r2, #49	; 0x31
 800a2e8:	f240 119f 	movw	r1, #415	; 0x19f
 800a2ec:	20ed      	movs	r0, #237	; 0xed
 800a2ee:	f011 fd67 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800a2f2:	2251      	movs	r2, #81	; 0x51
 800a2f4:	f240 119f 	movw	r1, #415	; 0x19f
 800a2f8:	20e8      	movs	r0, #232	; 0xe8
 800a2fa:	f011 fd61 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800a2fe:	2234      	movs	r2, #52	; 0x34
 800a300:	f240 119f 	movw	r1, #415	; 0x19f
 800a304:	20f1      	movs	r0, #241	; 0xf1
 800a306:	f011 fd5b 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800a30a:	2231      	movs	r2, #49	; 0x31
 800a30c:	f240 119f 	movw	r1, #415	; 0x19f
 800a310:	20fd      	movs	r0, #253	; 0xfd
 800a312:	f011 fd55 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800a316:	2251      	movs	r2, #81	; 0x51
 800a318:	f240 119f 	movw	r1, #415	; 0x19f
 800a31c:	20f8      	movs	r0, #248	; 0xf8
 800a31e:	f011 fd4f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800a322:	2235      	movs	r2, #53	; 0x35
 800a324:	f240 119f 	movw	r1, #415	; 0x19f
 800a328:	f240 1001 	movw	r0, #257	; 0x101
 800a32c:	f011 fd48 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800a330:	2230      	movs	r2, #48	; 0x30
 800a332:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800a336:	2005      	movs	r0, #5
 800a338:	f011 fd42 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800a33c:	2232      	movs	r2, #50	; 0x32
 800a33e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800a342:	2001      	movs	r0, #1
 800a344:	f011 fd3c 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800a348:	2235      	movs	r2, #53	; 0x35
 800a34a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800a34e:	2007      	movs	r0, #7
 800a350:	f011 fd36 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800a354:	2235      	movs	r2, #53	; 0x35
 800a356:	f240 1101 	movw	r1, #257	; 0x101
 800a35a:	2001      	movs	r0, #1
 800a35c:	f011 fd30 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800a360:	2230      	movs	r2, #48	; 0x30
 800a362:	f240 1101 	movw	r1, #257	; 0x101
 800a366:	2007      	movs	r0, #7
 800a368:	f011 fd2a 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800a36c:	2237      	movs	r2, #55	; 0x37
 800a36e:	21b5      	movs	r1, #181	; 0xb5
 800a370:	2001      	movs	r0, #1
 800a372:	f011 fd25 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800a376:	2235      	movs	r2, #53	; 0x35
 800a378:	21b5      	movs	r1, #181	; 0xb5
 800a37a:	2007      	movs	r0, #7
 800a37c:	f011 fd20 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800a380:	4620      	mov	r0, r4
 800a382:	2231      	movs	r2, #49	; 0x31
 800a384:	2169      	movs	r1, #105	; 0x69
 800a386:	f011 fd1b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800a38a:	2230      	movs	r2, #48	; 0x30
 800a38c:	2169      	movs	r1, #105	; 0x69
 800a38e:	2004      	movs	r0, #4
 800a390:	f011 fd16 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800a394:	2230      	movs	r2, #48	; 0x30
 800a396:	2169      	movs	r1, #105	; 0x69
 800a398:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800a39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800a39e:	f011 bd0f 	b.w	801bdc0 <TFT_DrawChar>
 800a3a2:	bf00      	nop
 800a3a4:	20000210 	.word	0x20000210
 800a3a8:	4d98      	ldr	r5, [pc, #608]	; (800a60c <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800a3aa:	2801      	cmp	r0, #1
 800a3ac:	bf0c      	ite	eq
 800a3ae:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800a3b0:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800a3b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800a3b6:	bf18      	it	ne
 800a3b8:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800a3ba:	f011 fc3d 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800a3be:	2063      	movs	r0, #99	; 0x63
 800a3c0:	f011 fc40 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800a3c4:	4892      	ldr	r0, [pc, #584]	; (800a610 <CQS_Axes_Text+0x4b0>)
 800a3c6:	f011 fc31 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800a3ca:	2251      	movs	r2, #81	; 0x51
 800a3cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a3d0:	2057      	movs	r0, #87	; 0x57
 800a3d2:	f011 fcf5 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800a3d6:	2231      	movs	r2, #49	; 0x31
 800a3d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a3dc:	205d      	movs	r0, #93	; 0x5d
 800a3de:	f011 fcef 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800a3e2:	2251      	movs	r2, #81	; 0x51
 800a3e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a3e8:	206d      	movs	r0, #109	; 0x6d
 800a3ea:	f011 fce9 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800a3ee:	2232      	movs	r2, #50	; 0x32
 800a3f0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a3f4:	2073      	movs	r0, #115	; 0x73
 800a3f6:	f011 fce3 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800a3fa:	2251      	movs	r2, #81	; 0x51
 800a3fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a400:	2083      	movs	r0, #131	; 0x83
 800a402:	f011 fcdd 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800a406:	2233      	movs	r2, #51	; 0x33
 800a408:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a40c:	2089      	movs	r0, #137	; 0x89
 800a40e:	f011 fcd7 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800a412:	2251      	movs	r2, #81	; 0x51
 800a414:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a418:	2099      	movs	r0, #153	; 0x99
 800a41a:	f011 fcd1 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800a41e:	2234      	movs	r2, #52	; 0x34
 800a420:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a424:	209f      	movs	r0, #159	; 0x9f
 800a426:	f011 fccb 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800a42a:	2251      	movs	r2, #81	; 0x51
 800a42c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a430:	20af      	movs	r0, #175	; 0xaf
 800a432:	f011 fcc5 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800a436:	2235      	movs	r2, #53	; 0x35
 800a438:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a43c:	20b5      	movs	r0, #181	; 0xb5
 800a43e:	f011 fcbf 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800a442:	2251      	movs	r2, #81	; 0x51
 800a444:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a448:	20c5      	movs	r0, #197	; 0xc5
 800a44a:	f011 fcb9 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800a44e:	2236      	movs	r2, #54	; 0x36
 800a450:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a454:	20cb      	movs	r0, #203	; 0xcb
 800a456:	f011 fcb3 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800a45a:	2251      	movs	r2, #81	; 0x51
 800a45c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a460:	20db      	movs	r0, #219	; 0xdb
 800a462:	f011 fcad 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800a466:	2237      	movs	r2, #55	; 0x37
 800a468:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a46c:	20e1      	movs	r0, #225	; 0xe1
 800a46e:	f011 fca7 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800a472:	2251      	movs	r2, #81	; 0x51
 800a474:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a478:	20f1      	movs	r0, #241	; 0xf1
 800a47a:	f011 fca1 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800a47e:	2238      	movs	r2, #56	; 0x38
 800a480:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a484:	20f7      	movs	r0, #247	; 0xf7
 800a486:	f011 fc9b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800a48a:	2251      	movs	r2, #81	; 0x51
 800a48c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a490:	f240 1007 	movw	r0, #263	; 0x107
 800a494:	f011 fc94 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800a498:	2239      	movs	r2, #57	; 0x39
 800a49a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a49e:	f240 100d 	movw	r0, #269	; 0x10d
 800a4a2:	f011 fc8d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800a4a6:	2231      	movs	r2, #49	; 0x31
 800a4a8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a4ac:	f44f 7091 	mov.w	r0, #290	; 0x122
 800a4b0:	f011 fc86 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800a4b4:	2251      	movs	r2, #81	; 0x51
 800a4b6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a4ba:	f240 101d 	movw	r0, #285	; 0x11d
 800a4be:	f011 fc7f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800a4c2:	2230      	movs	r2, #48	; 0x30
 800a4c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a4c8:	f44f 7093 	mov.w	r0, #294	; 0x126
 800a4cc:	f011 fc78 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800a4d0:	2231      	movs	r2, #49	; 0x31
 800a4d2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a4d6:	f44f 709c 	mov.w	r0, #312	; 0x138
 800a4da:	f011 fc71 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800a4de:	2251      	movs	r2, #81	; 0x51
 800a4e0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a4e4:	f240 1033 	movw	r0, #307	; 0x133
 800a4e8:	f011 fc6a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800a4ec:	2231      	movs	r2, #49	; 0x31
 800a4ee:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a4f2:	f240 103d 	movw	r0, #317	; 0x13d
 800a4f6:	f011 fc63 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800a4fa:	2231      	movs	r2, #49	; 0x31
 800a4fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a500:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800a504:	f011 fc5c 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800a508:	2251      	movs	r2, #81	; 0x51
 800a50a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a50e:	f240 1049 	movw	r0, #329	; 0x149
 800a512:	f011 fc55 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800a516:	2232      	movs	r2, #50	; 0x32
 800a518:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a51c:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800a520:	f011 fc4e 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800a524:	2231      	movs	r2, #49	; 0x31
 800a526:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a52a:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800a52e:	f011 fc47 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800a532:	2251      	movs	r2, #81	; 0x51
 800a534:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a538:	f240 105f 	movw	r0, #351	; 0x15f
 800a53c:	f011 fc40 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800a540:	2233      	movs	r2, #51	; 0x33
 800a542:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a546:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800a54a:	f011 fc39 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800a54e:	2231      	movs	r2, #49	; 0x31
 800a550:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a554:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800a558:	f011 fc32 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800a55c:	2251      	movs	r2, #81	; 0x51
 800a55e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a562:	f240 1075 	movw	r0, #373	; 0x175
 800a566:	f011 fc2b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800a56a:	2234      	movs	r2, #52	; 0x34
 800a56c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a570:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800a574:	f011 fc24 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800a578:	2231      	movs	r2, #49	; 0x31
 800a57a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a57e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a582:	f011 fc1d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800a586:	2251      	movs	r2, #81	; 0x51
 800a588:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a58c:	f240 108b 	movw	r0, #395	; 0x18b
 800a590:	f011 fc16 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800a594:	2235      	movs	r2, #53	; 0x35
 800a596:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a59a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800a59e:	f011 fc0f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800a5a2:	2230      	movs	r2, #48	; 0x30
 800a5a4:	21fa      	movs	r1, #250	; 0xfa
 800a5a6:	2041      	movs	r0, #65	; 0x41
 800a5a8:	f011 fc0a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800a5ac:	2232      	movs	r2, #50	; 0x32
 800a5ae:	21ca      	movs	r1, #202	; 0xca
 800a5b0:	203a      	movs	r0, #58	; 0x3a
 800a5b2:	f011 fc05 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800a5b6:	2235      	movs	r2, #53	; 0x35
 800a5b8:	21ca      	movs	r1, #202	; 0xca
 800a5ba:	2041      	movs	r0, #65	; 0x41
 800a5bc:	f011 fc00 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800a5c0:	2235      	movs	r2, #53	; 0x35
 800a5c2:	2195      	movs	r1, #149	; 0x95
 800a5c4:	203a      	movs	r0, #58	; 0x3a
 800a5c6:	f011 fbfb 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800a5ca:	2230      	movs	r2, #48	; 0x30
 800a5cc:	2195      	movs	r1, #149	; 0x95
 800a5ce:	2041      	movs	r0, #65	; 0x41
 800a5d0:	f011 fbf6 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800a5d4:	2237      	movs	r2, #55	; 0x37
 800a5d6:	2160      	movs	r1, #96	; 0x60
 800a5d8:	203a      	movs	r0, #58	; 0x3a
 800a5da:	f011 fbf1 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800a5de:	2235      	movs	r2, #53	; 0x35
 800a5e0:	2160      	movs	r1, #96	; 0x60
 800a5e2:	2041      	movs	r0, #65	; 0x41
 800a5e4:	f011 fbec 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800a5e8:	2231      	movs	r2, #49	; 0x31
 800a5ea:	212b      	movs	r1, #43	; 0x2b
 800a5ec:	2039      	movs	r0, #57	; 0x39
 800a5ee:	f011 fbe7 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800a5f2:	2230      	movs	r2, #48	; 0x30
 800a5f4:	212b      	movs	r1, #43	; 0x2b
 800a5f6:	203e      	movs	r0, #62	; 0x3e
 800a5f8:	f011 fbe2 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800a5fc:	2230      	movs	r2, #48	; 0x30
 800a5fe:	212b      	movs	r1, #43	; 0x2b
 800a600:	2043      	movs	r0, #67	; 0x43
 800a602:	f011 fbdd 	bl	801bdc0 <TFT_DrawChar>
		TFT_direction = 0x00;
 800a606:	2300      	movs	r3, #0
 800a608:	702b      	strb	r3, [r5, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20004c40 	.word	0x20004c40
 800a610:	20000210 	.word	0x20000210

0800a614 <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800a614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a618:	ed2d 8b04 	vpush	{d8-d9}
 800a61c:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800a61e:	ad06      	add	r5, sp, #24
 800a620:	2300      	movs	r3, #0
{
 800a622:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800a624:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800a628:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800a9b0 <CQS_chart+0x39c>
 800a62c:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800a62e:	2800      	cmp	r0, #0
 800a630:	f040 81ca 	bne.w	800a9c8 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800a634:	780b      	ldrb	r3, [r1, #0]
 800a636:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800a9b4 <CQS_chart+0x3a0>
 800a63a:	eddf 8adf 	vldr	s17, [pc, #892]	; 800a9b8 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800a63e:	4fdf      	ldr	r7, [pc, #892]	; (800a9bc <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800a640:	ee07 3a90 	vmov	s15, r3
 800a644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a648:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800a64c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2222      	movs	r2, #34	; 0x22
 800a654:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a658:	2018      	movs	r0, #24
 800a65a:	eef0 7a49 	vmov.f32	s15, s18
 800a65e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a666:	edcd 7a03 	vstr	s15, [sp, #12]
 800a66a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a66e:	f011 f8b4 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800a672:	7863      	ldrb	r3, [r4, #1]
 800a674:	ee07 3a90 	vmov	s15, r3
 800a678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67c:	f645 2392 	movw	r3, #23186	; 0x5a92
 800a680:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	2232      	movs	r2, #50	; 0x32
 800a688:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a68c:	2028      	movs	r0, #40	; 0x28
 800a68e:	eef0 7a49 	vmov.f32	s15, s18
 800a692:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69a:	edcd 7a03 	vstr	s15, [sp, #12]
 800a69e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a6a2:	f011 f89a 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800a6a6:	78a3      	ldrb	r3, [r4, #2]
 800a6a8:	ee07 3a90 	vmov	s15, r3
 800a6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b0:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800a6b4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	2242      	movs	r2, #66	; 0x42
 800a6bc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a6c0:	2038      	movs	r0, #56	; 0x38
 800a6c2:	eef0 7a49 	vmov.f32	s15, s18
 800a6c6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ce:	edcd 7a03 	vstr	s15, [sp, #12]
 800a6d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a6d6:	f011 f880 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800a6da:	78e3      	ldrb	r3, [r4, #3]
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e4:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800a6e8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	2252      	movs	r2, #82	; 0x52
 800a6f0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a6f4:	2048      	movs	r0, #72	; 0x48
 800a6f6:	eef0 7a49 	vmov.f32	s15, s18
 800a6fa:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a6fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a702:	edcd 7a03 	vstr	s15, [sp, #12]
 800a706:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a70a:	f011 f866 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800a70e:	7923      	ldrb	r3, [r4, #4]
 800a710:	ee07 3a90 	vmov	s15, r3
 800a714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a718:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800a71c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	2262      	movs	r2, #98	; 0x62
 800a724:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a728:	2058      	movs	r0, #88	; 0x58
 800a72a:	eef0 7a49 	vmov.f32	s15, s18
 800a72e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a736:	edcd 7a03 	vstr	s15, [sp, #12]
 800a73a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a73e:	f011 f84c 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800a742:	7963      	ldrb	r3, [r4, #5]
 800a744:	ee07 3a90 	vmov	s15, r3
 800a748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800a750:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	2272      	movs	r2, #114	; 0x72
 800a758:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a75c:	2068      	movs	r0, #104	; 0x68
 800a75e:	eef0 7a49 	vmov.f32	s15, s18
 800a762:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a76a:	edcd 7a03 	vstr	s15, [sp, #12]
 800a76e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a772:	f011 f832 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800a776:	79a3      	ldrb	r3, [r4, #6]
 800a778:	ee07 3a90 	vmov	s15, r3
 800a77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a780:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800a784:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	2282      	movs	r2, #130	; 0x82
 800a78c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a790:	2078      	movs	r0, #120	; 0x78
 800a792:	eef0 7a49 	vmov.f32	s15, s18
 800a796:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a79e:	edcd 7a03 	vstr	s15, [sp, #12]
 800a7a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a7a6:	f011 f818 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800a7aa:	79e3      	ldrb	r3, [r4, #7]
 800a7ac:	ee07 3a90 	vmov	s15, r3
 800a7b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b4:	f247 5369 	movw	r3, #30057	; 0x7569
 800a7b8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	2292      	movs	r2, #146	; 0x92
 800a7c0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a7c4:	2088      	movs	r0, #136	; 0x88
 800a7c6:	eef0 7a49 	vmov.f32	s15, s18
 800a7ca:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7d2:	edcd 7a03 	vstr	s15, [sp, #12]
 800a7d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a7da:	f010 fffe 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800a7de:	7a23      	ldrb	r3, [r4, #8]
 800a7e0:	ee07 3a90 	vmov	s15, r3
 800a7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e8:	f24b 6307 	movw	r3, #46599	; 0xb607
 800a7ec:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	22a2      	movs	r2, #162	; 0xa2
 800a7f4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a7f8:	2098      	movs	r0, #152	; 0x98
 800a7fa:	eef0 7a49 	vmov.f32	s15, s18
 800a7fe:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a806:	edcd 7a03 	vstr	s15, [sp, #12]
 800a80a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a80e:	f010 ffe4 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800a812:	7a63      	ldrb	r3, [r4, #9]
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81c:	f64e 6325 	movw	r3, #60965	; 0xee25
 800a820:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	22b2      	movs	r2, #178	; 0xb2
 800a828:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a82c:	20a8      	movs	r0, #168	; 0xa8
 800a82e:	eef0 7a49 	vmov.f32	s15, s18
 800a832:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a83a:	edcd 7a03 	vstr	s15, [sp, #12]
 800a83e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a842:	f010 ffca 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800a846:	7aa3      	ldrb	r3, [r4, #10]
 800a848:	ee07 3a90 	vmov	s15, r3
 800a84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a850:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800a854:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	22c2      	movs	r2, #194	; 0xc2
 800a85c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a860:	20b8      	movs	r0, #184	; 0xb8
 800a862:	eef0 7a49 	vmov.f32	s15, s18
 800a866:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a86a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a86e:	edcd 7a03 	vstr	s15, [sp, #12]
 800a872:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a876:	f010 ffb0 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800a87a:	7ae3      	ldrb	r3, [r4, #11]
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a884:	f64e 4347 	movw	r3, #60487	; 0xec47
 800a888:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	22d2      	movs	r2, #210	; 0xd2
 800a890:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a894:	20c8      	movs	r0, #200	; 0xc8
 800a896:	eef0 7a49 	vmov.f32	s15, s18
 800a89a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8a2:	edcd 7a03 	vstr	s15, [sp, #12]
 800a8a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a8aa:	f010 ff96 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800a8ae:	7b23      	ldrb	r3, [r4, #12]
 800a8b0:	ee07 3a90 	vmov	s15, r3
 800a8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b8:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800a8bc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	22e2      	movs	r2, #226	; 0xe2
 800a8c4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a8c8:	20d8      	movs	r0, #216	; 0xd8
 800a8ca:	eef0 7a49 	vmov.f32	s15, s18
 800a8ce:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a8d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d6:	edcd 7a03 	vstr	s15, [sp, #12]
 800a8da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a8de:	f010 ff7c 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800a8e2:	7b63      	ldrb	r3, [r4, #13]
 800a8e4:	ee07 3a90 	vmov	s15, r3
 800a8e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ec:	f64a 1347 	movw	r3, #43335	; 0xa947
 800a8f0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	22f2      	movs	r2, #242	; 0xf2
 800a8f8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800a8fc:	20e8      	movs	r0, #232	; 0xe8
 800a8fe:	eef0 7a49 	vmov.f32	s15, s18
 800a902:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a90a:	edcd 7a03 	vstr	s15, [sp, #12]
 800a90e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a912:	f010 ff62 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800a916:	7ba3      	ldrb	r3, [r4, #14]
 800a918:	ee07 3a90 	vmov	s15, r3
 800a91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a920:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800a924:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a928:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	20f8      	movs	r0, #248	; 0xf8
 800a930:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800a934:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800a936:	eea7 9a68 	vfms.f32	s18, s14, s17
 800a93a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800a93e:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800a9c0 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800a942:	edcd 7a03 	vstr	s15, [sp, #12]
 800a946:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a94a:	f010 ff46 	bl	801b7da <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800a94e:	481d      	ldr	r0, [pc, #116]	; (800a9c4 <CQS_chart+0x3b0>)
 800a950:	f011 f96c 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800a954:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a958:	f011 f96e 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800a95c:	2063      	movs	r0, #99	; 0x63
 800a95e:	f011 f971 	bl	801bc44 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800a962:	7872      	ldrb	r2, [r6, #1]
 800a964:	4639      	mov	r1, r7
 800a966:	4628      	mov	r0, r5
 800a968:	f014 fb4a 	bl	801f000 <siprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800a96c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800a970:	ee07 3a90 	vmov	s15, r3
 800a974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a978:	4620      	mov	r0, r4
 800a97a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a97e:	3410      	adds	r4, #16
 800a980:	2303      	movs	r3, #3
 800a982:	462a      	mov	r2, r5
 800a984:	b2a4      	uxth	r4, r4
 800a986:	eef0 7a49 	vmov.f32	s15, s18
 800a98a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800a98e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a992:	edcd 7a03 	vstr	s15, [sp, #12]
 800a996:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a99a:	f011 fa69 	bl	801be70 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800a99e:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800a9a2:	d1de      	bne.n	800a962 <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800a9a4:	b006      	add	sp, #24
 800a9a6:	ecbd 8b04 	vpop	{d8-d9}
 800a9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ae:	bf00      	nop
 800a9b0:	42c80000 	.word	0x42c80000
 800a9b4:	43cd0000 	.word	0x43cd0000
 800a9b8:	43988000 	.word	0x43988000
 800a9bc:	080215d9 	.word	0x080215d9
 800a9c0:	43c80000 	.word	0x43c80000
 800a9c4:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800a9c8:	2801      	cmp	r0, #1
 800a9ca:	4fdf      	ldr	r7, [pc, #892]	; (800ad48 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800a9cc:	eddf 8adf 	vldr	s17, [pc, #892]	; 800ad4c <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800a9d0:	bf0e      	itee	eq
 800a9d2:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800a9d4:	2302      	movne	r3, #2
 800a9d6:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800a9d8:	780b      	ldrb	r3, [r1, #0]
 800a9da:	ed9f 9add 	vldr	s18, [pc, #884]	; 800ad50 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800a9de:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800ad60 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800a9ee:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	2262      	movs	r2, #98	; 0x62
 800a9f6:	23fc      	movs	r3, #252	; 0xfc
 800a9f8:	2057      	movs	r0, #87	; 0x57
 800a9fa:	eef0 7a68 	vmov.f32	s15, s17
 800a9fe:	eee7 7a49 	vfms.f32	s15, s14, s18
 800aa02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa06:	edcd 7a03 	vstr	s15, [sp, #12]
 800aa0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800aa0e:	f010 fee4 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800aa12:	7863      	ldrb	r3, [r4, #1]
 800aa14:	ee07 3a90 	vmov	s15, r3
 800aa18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1c:	f645 2392 	movw	r3, #23186	; 0x5a92
 800aa20:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	2278      	movs	r2, #120	; 0x78
 800aa28:	23fc      	movs	r3, #252	; 0xfc
 800aa2a:	206d      	movs	r0, #109	; 0x6d
 800aa2c:	eef0 7a68 	vmov.f32	s15, s17
 800aa30:	eee7 7a49 	vfms.f32	s15, s14, s18
 800aa34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa38:	edcd 7a03 	vstr	s15, [sp, #12]
 800aa3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800aa40:	f010 fecb 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800aa44:	78a3      	ldrb	r3, [r4, #2]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800aa52:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	228e      	movs	r2, #142	; 0x8e
 800aa5a:	23fc      	movs	r3, #252	; 0xfc
 800aa5c:	2083      	movs	r0, #131	; 0x83
 800aa5e:	eef0 7a68 	vmov.f32	s15, s17
 800aa62:	eee7 7a49 	vfms.f32	s15, s14, s18
 800aa66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa6a:	edcd 7a03 	vstr	s15, [sp, #12]
 800aa6e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800aa72:	f010 feb2 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800aa76:	78e3      	ldrb	r3, [r4, #3]
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa80:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800aa84:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	22a4      	movs	r2, #164	; 0xa4
 800aa8c:	23fc      	movs	r3, #252	; 0xfc
 800aa8e:	2099      	movs	r0, #153	; 0x99
 800aa90:	eef0 7a68 	vmov.f32	s15, s17
 800aa94:	eee7 7a49 	vfms.f32	s15, s14, s18
 800aa98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa9c:	edcd 7a03 	vstr	s15, [sp, #12]
 800aaa0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800aaa4:	f010 fe99 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800aaa8:	7923      	ldrb	r3, [r4, #4]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800aab6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	22ba      	movs	r2, #186	; 0xba
 800aabe:	23fc      	movs	r3, #252	; 0xfc
 800aac0:	20af      	movs	r0, #175	; 0xaf
 800aac2:	eef0 7a68 	vmov.f32	s15, s17
 800aac6:	eee7 7a49 	vfms.f32	s15, s14, s18
 800aaca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aace:	edcd 7a03 	vstr	s15, [sp, #12]
 800aad2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800aad6:	f010 fe80 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800aada:	7963      	ldrb	r3, [r4, #5]
 800aadc:	ee07 3a90 	vmov	s15, r3
 800aae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae4:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800aae8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	22d0      	movs	r2, #208	; 0xd0
 800aaf0:	23fc      	movs	r3, #252	; 0xfc
 800aaf2:	20c5      	movs	r0, #197	; 0xc5
 800aaf4:	eef0 7a68 	vmov.f32	s15, s17
 800aaf8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800aafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab00:	edcd 7a03 	vstr	s15, [sp, #12]
 800ab04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ab08:	f010 fe67 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800ab0c:	79a3      	ldrb	r3, [r4, #6]
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800ab1a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	22e6      	movs	r2, #230	; 0xe6
 800ab22:	23fc      	movs	r3, #252	; 0xfc
 800ab24:	20db      	movs	r0, #219	; 0xdb
 800ab26:	eef0 7a68 	vmov.f32	s15, s17
 800ab2a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ab2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab32:	edcd 7a03 	vstr	s15, [sp, #12]
 800ab36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ab3a:	f010 fe4e 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800ab3e:	79e3      	ldrb	r3, [r4, #7]
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab48:	f247 5369 	movw	r3, #30057	; 0x7569
 800ab4c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	23fc      	movs	r3, #252	; 0xfc
 800ab54:	461a      	mov	r2, r3
 800ab56:	20f1      	movs	r0, #241	; 0xf1
 800ab58:	eef0 7a68 	vmov.f32	s15, s17
 800ab5c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ab60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab64:	edcd 7a03 	vstr	s15, [sp, #12]
 800ab68:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ab6c:	f010 fe35 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800ab70:	7a23      	ldrb	r3, [r4, #8]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	f24b 6307 	movw	r3, #46599	; 0xb607
 800ab7e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ab88:	23fc      	movs	r3, #252	; 0xfc
 800ab8a:	f240 1007 	movw	r0, #263	; 0x107
 800ab8e:	eef0 7a68 	vmov.f32	s15, s17
 800ab92:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ab96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab9a:	edcd 7a03 	vstr	s15, [sp, #12]
 800ab9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800aba2:	f010 fe1a 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800aba6:	7a63      	ldrb	r3, [r4, #9]
 800aba8:	ee07 3a90 	vmov	s15, r3
 800abac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb0:	f64e 6325 	movw	r3, #60965	; 0xee25
 800abb4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	f44f 7294 	mov.w	r2, #296	; 0x128
 800abbe:	23fc      	movs	r3, #252	; 0xfc
 800abc0:	f240 101d 	movw	r0, #285	; 0x11d
 800abc4:	eef0 7a68 	vmov.f32	s15, s17
 800abc8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800abcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd0:	edcd 7a03 	vstr	s15, [sp, #12]
 800abd4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800abd8:	f010 fdff 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800abdc:	7aa3      	ldrb	r3, [r4, #10]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800abea:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800abf4:	23fc      	movs	r3, #252	; 0xfc
 800abf6:	f240 1033 	movw	r0, #307	; 0x133
 800abfa:	eef0 7a68 	vmov.f32	s15, s17
 800abfe:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ac02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac06:	edcd 7a03 	vstr	s15, [sp, #12]
 800ac0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ac0e:	f010 fde4 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800ac12:	7ae3      	ldrb	r3, [r4, #11]
 800ac14:	ee07 3a90 	vmov	s15, r3
 800ac18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1c:	f64e 4347 	movw	r3, #60487	; 0xec47
 800ac20:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800ac2a:	23fc      	movs	r3, #252	; 0xfc
 800ac2c:	f240 1049 	movw	r0, #329	; 0x149
 800ac30:	eef0 7a68 	vmov.f32	s15, s17
 800ac34:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ac38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3c:	edcd 7a03 	vstr	s15, [sp, #12]
 800ac40:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ac44:	f010 fdc9 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800ac48:	7b23      	ldrb	r3, [r4, #12]
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac52:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800ac56:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ac60:	23fc      	movs	r3, #252	; 0xfc
 800ac62:	f240 105f 	movw	r0, #351	; 0x15f
 800ac66:	eef0 7a68 	vmov.f32	s15, s17
 800ac6a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ac6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac72:	edcd 7a03 	vstr	s15, [sp, #12]
 800ac76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ac7a:	f010 fdae 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800ac7e:	7b63      	ldrb	r3, [r4, #13]
 800ac80:	ee07 3a90 	vmov	s15, r3
 800ac84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac88:	f64a 1347 	movw	r3, #43335	; 0xa947
 800ac8c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ac96:	23fc      	movs	r3, #252	; 0xfc
 800ac98:	f240 1075 	movw	r0, #373	; 0x175
 800ac9c:	eef0 7a68 	vmov.f32	s15, s17
 800aca0:	eee7 7a49 	vfms.f32	s15, s14, s18
 800aca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca8:	edcd 7a03 	vstr	s15, [sp, #12]
 800acac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800acb0:	f010 fd93 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800acb4:	7ba3      	ldrb	r3, [r4, #14]
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acbe:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800acc2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800accc:	23fc      	movs	r3, #252	; 0xfc
 800acce:	f240 108b 	movw	r0, #395	; 0x18b
 800acd2:	2457      	movs	r4, #87	; 0x57
 800acd4:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800acd8:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800ad54 <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800acdc:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800ace0:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800ad58 <CQS_chart+0x744>
 800ace4:	edcd 7a03 	vstr	s15, [sp, #12]
 800ace8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800acec:	f010 fd75 	bl	801b7da <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800acf0:	7872      	ldrb	r2, [r6, #1]
 800acf2:	4641      	mov	r1, r8
 800acf4:	4628      	mov	r0, r5
 800acf6:	f014 f983 	bl	801f000 <siprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800acfa:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	2b09      	cmp	r3, #9
 800ad08:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ad0c:	f04f 0303 	mov.w	r3, #3
 800ad10:	4620      	mov	r0, r4
 800ad12:	462a      	mov	r2, r5
 800ad14:	f104 0416 	add.w	r4, r4, #22
 800ad18:	b2a4      	uxth	r4, r4
 800ad1a:	bf94      	ite	ls
 800ad1c:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800ad5c <CQS_chart+0x748>
 800ad20:	eef0 7a49 	vmovhi.f32	s15, s18
 800ad24:	eee7 7a68 	vfms.f32	s15, s14, s17
 800ad28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2c:	edcd 7a03 	vstr	s15, [sp, #12]
 800ad30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ad34:	f011 f89c 	bl	801be70 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800ad38:	f240 13a1 	movw	r3, #417	; 0x1a1
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d1d7      	bne.n	800acf0 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800ad40:	2300      	movs	r3, #0
 800ad42:	703b      	strb	r3, [r7, #0]
}
 800ad44:	e62e      	b.n	800a9a4 <CQS_chart+0x390>
 800ad46:	bf00      	nop
 800ad48:	20004c40 	.word	0x20004c40
 800ad4c:	437c0000 	.word	0x437c0000
 800ad50:	43520000 	.word	0x43520000
 800ad54:	437a0000 	.word	0x437a0000
 800ad58:	43570000 	.word	0x43570000
 800ad5c:	43730000 	.word	0x43730000
 800ad60:	080215d9 	.word	0x080215d9

0800ad64 <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800ad64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ad68:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 50, 270, 410, TFT_Black_Bkgr);
 800ad6a:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	4688      	mov	r8, r1
 800ad70:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 50, 270, 410, TFT_Black_Bkgr);
 800ad72:	2132      	movs	r1, #50	; 0x32
 800ad74:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	2005      	movs	r0, #5
 800ad7c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800ad80:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 50, 270, 410, TFT_Black_Bkgr);
 800ad84:	f010 fd29 	bl	801b7da <TFT_FillRectangle>
	CQS_Axes(direction);
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff f877 	bl	8009e7c <CQS_Axes>
	CQS_Axes_Text(direction);
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7ff f9e6 	bl	800a160 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800ad94:	4641      	mov	r1, r8
 800ad96:	4620      	mov	r0, r4
 800ad98:	f7ff fc3c 	bl	800a614 <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800ad9c:	463b      	mov	r3, r7
 800ad9e:	4632      	mov	r2, r6
 800ada0:	4629      	mov	r1, r5
 800ada2:	4620      	mov	r0, r4
 800ada4:	b002      	add	sp, #8
 800ada6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800adaa:	f7ff b905 	b.w	8009fb8 <CQS_Axes_Measure>

0800adae <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800adae:	e9d0 0100 	ldrd	r0, r1, [r0]
 800adb2:	4770      	bx	lr

0800adb4 <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800adb4:	4b13      	ldr	r3, [pc, #76]	; (800ae04 <CRC_Check+0x50>)
{
 800adb6:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800adba:	4e13      	ldr	r6, [pc, #76]	; (800ae08 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800adbc:	6018      	str	r0, [r3, #0]
 800adbe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800adc2:	2400      	movs	r4, #0
 800adc4:	4281      	cmp	r1, r0
 800adc6:	d811      	bhi.n	800adec <CRC_Check+0x38>
 800adc8:	b104      	cbz	r4, 800adcc <CRC_Check+0x18>
 800adca:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800adcc:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800add0:	4b0e      	ldr	r3, [pc, #56]	; (800ae0c <CRC_Check+0x58>)
 800add2:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800add6:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800adda:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800adde:	4299      	cmp	r1, r3
 800ade0:	bf0a      	itet	eq
 800ade2:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800ade4:	2001      	movne	r0, #1
 800ade6:	2000      	moveq	r0, #0
 800ade8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800adec:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800adf0:	e9d6 4500 	ldrd	r4, r5, [r6]
 800adf4:	eb14 0408 	adds.w	r4, r4, r8
 800adf8:	eb45 0509 	adc.w	r5, r5, r9
 800adfc:	e9c6 4500 	strd	r4, r5, [r6]
 800ae00:	2401      	movs	r4, #1
 800ae02:	e7df      	b.n	800adc4 <CRC_Check+0x10>
 800ae04:	2008aba0 	.word	0x2008aba0
 800ae08:	20003bb8 	.word	0x20003bb8
 800ae0c:	20003bc0 	.word	0x20003bc0

0800ae10 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800ae10:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800ae12:	f7f5 fb97 	bl	8000544 <__aeabi_i2d>
 800ae16:	a316      	add	r3, pc, #88	; (adr r3, 800ae70 <calcNorm560_CRI+0x60>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	f7f5 fbf8 	bl	8000610 <__aeabi_dmul>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	a114      	add	r1, pc, #80	; (adr r1, 800ae78 <calcNorm560_CRI+0x68>)
 800ae26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2a:	f7f5 fd1b 	bl	8000864 <__aeabi_ddiv>
 800ae2e:	ec41 0b10 	vmov	d0, r0, r1
 800ae32:	f014 fdc9 	bl	801f9c8 <exp>
 800ae36:	2200      	movs	r2, #0
 800ae38:	ec51 0b10 	vmov	r0, r1, d0
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <calcNorm560_CRI+0x58>)
 800ae3e:	f7f5 fa33 	bl	80002a8 <__aeabi_dsub>
 800ae42:	460b      	mov	r3, r1
 800ae44:	4602      	mov	r2, r0
 800ae46:	a106      	add	r1, pc, #24	; (adr r1, 800ae60 <calcNorm560_CRI+0x50>)
 800ae48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae4c:	f7f5 fd0a 	bl	8000864 <__aeabi_ddiv>
 800ae50:	f7f5 fed6 	bl	8000c00 <__aeabi_d2f>
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <calcNorm560_CRI+0x5c>)
 800ae56:	6018      	str	r0, [r3, #0]
 800ae58:	bd08      	pop	{r3, pc}
 800ae5a:	bf00      	nop
 800ae5c:	f3af 8000 	nop.w
 800ae60:	f9f35846 	.word	0xf9f35846
 800ae64:	466ca5d1 	.word	0x466ca5d1
 800ae68:	3ff00000 	.word	0x3ff00000
 800ae6c:	2008abd0 	.word	0x2008abd0
 800ae70:	05ea7ab3 	.word	0x05ea7ab3
 800ae74:	3ea2ca5d 	.word	0x3ea2ca5d
 800ae78:	aba38759 	.word	0xaba38759
 800ae7c:	3f8d7774 	.word	0x3f8d7774

0800ae80 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800ae80:	f241 3387 	movw	r3, #4999	; 0x1387
 800ae84:	4299      	cmp	r1, r3
{
 800ae86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae88:	460d      	mov	r5, r1
 800ae8a:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800ae8e:	d84e      	bhi.n	800af2e <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800ae90:	4c39      	ldr	r4, [pc, #228]	; (800af78 <calcSref_CRI+0xf8>)
 800ae92:	4404      	add	r4, r0
 800ae94:	6820      	ldr	r0, [r4, #0]
 800ae96:	f7f5 fb67 	bl	8000568 <__aeabi_f2d>
 800ae9a:	a331      	add	r3, pc, #196	; (adr r3, 800af60 <calcSref_CRI+0xe0>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 fbb6 	bl	8000610 <__aeabi_dmul>
 800aea4:	4606      	mov	r6, r0
 800aea6:	4628      	mov	r0, r5
 800aea8:	460f      	mov	r7, r1
 800aeaa:	f7f5 fb4b 	bl	8000544 <__aeabi_i2d>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	f7f5 fbab 	bl	8000610 <__aeabi_dmul>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	a12a      	add	r1, pc, #168	; (adr r1, 800af68 <calcSref_CRI+0xe8>)
 800aec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec4:	f7f5 fcce 	bl	8000864 <__aeabi_ddiv>
 800aec8:	ec41 0b10 	vmov	d0, r0, r1
 800aecc:	f014 fd7c 	bl	801f9c8 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800aed0:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800aed2:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800aed6:	f7f5 fb47 	bl	8000568 <__aeabi_f2d>
 800aeda:	a321      	add	r3, pc, #132	; (adr r3, 800af60 <calcSref_CRI+0xe0>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f7f5 fb96 	bl	8000610 <__aeabi_dmul>
 800aee4:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800af70 <calcSref_CRI+0xf0>
 800aee8:	ec41 0b10 	vmov	d0, r0, r1
 800aeec:	f014 fe68 	bl	801fbc0 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800aef0:	2200      	movs	r2, #0
 800aef2:	4b22      	ldr	r3, [pc, #136]	; (800af7c <calcSref_CRI+0xfc>)
 800aef4:	4630      	mov	r0, r6
 800aef6:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800aef8:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800aefc:	f7f5 f9d4 	bl	80002a8 <__aeabi_dsub>
 800af00:	f7f5 fe7e 	bl	8000c00 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800af04:	f7f5 fb30 	bl	8000568 <__aeabi_f2d>
 800af08:	ed9d 0b00 	vldr	d0, [sp]
 800af0c:	460b      	mov	r3, r1
 800af0e:	4602      	mov	r2, r0
 800af10:	ec51 0b10 	vmov	r0, r1, d0
 800af14:	f7f5 fca6 	bl	8000864 <__aeabi_ddiv>
 800af18:	f7f5 fe72 	bl	8000c00 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800af1c:	4b18      	ldr	r3, [pc, #96]	; (800af80 <calcSref_CRI+0x100>)
 800af1e:	ee07 0a10 	vmov	s14, r0
 800af22:	edd3 7a00 	vldr	s15, [r3]
 800af26:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800af2a:	b003      	add	sp, #12
 800af2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800af2e:	4a15      	ldr	r2, [pc, #84]	; (800af84 <calcSref_CRI+0x104>)
 800af30:	4b15      	ldr	r3, [pc, #84]	; (800af88 <calcSref_CRI+0x108>)
 800af32:	4916      	ldr	r1, [pc, #88]	; (800af8c <calcSref_CRI+0x10c>)
 800af34:	4403      	add	r3, r0
 800af36:	4401      	add	r1, r0
 800af38:	4410      	add	r0, r2
 800af3a:	4a15      	ldr	r2, [pc, #84]	; (800af90 <calcSref_CRI+0x110>)
 800af3c:	ed91 7a00 	vldr	s14, [r1]
 800af40:	edd2 7a00 	vldr	s15, [r2]
 800af44:	ed90 0a00 	vldr	s0, [r0]
 800af48:	eea7 0a27 	vfma.f32	s0, s14, s15
 800af4c:	ed93 7a00 	vldr	s14, [r3]
 800af50:	4b10      	ldr	r3, [pc, #64]	; (800af94 <calcSref_CRI+0x114>)
 800af52:	edd3 7a00 	vldr	s15, [r3]
 800af56:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800af5a:	e7e6      	b.n	800af2a <calcSref_CRI+0xaa>
 800af5c:	f3af 8000 	nop.w
 800af60:	e826d695 	.word	0xe826d695
 800af64:	3e112e0b 	.word	0x3e112e0b
 800af68:	aba38759 	.word	0xaba38759
 800af6c:	3f8d7774 	.word	0x3f8d7774
 800af70:	00000000 	.word	0x00000000
 800af74:	c0140000 	.word	0xc0140000
 800af78:	2004fc04 	.word	0x2004fc04
 800af7c:	3ff00000 	.word	0x3ff00000
 800af80:	2008abd0 	.word	0x2008abd0
 800af84:	20049bfc 	.word	0x20049bfc
 800af88:	2004bbfc 	.word	0x2004bbfc
 800af8c:	2004abfc 	.word	0x2004abfc
 800af90:	20003bc8 	.word	0x20003bc8
 800af94:	20003bcc 	.word	0x20003bcc

0800af98 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	ed2d 8b08 	vpush	{d8-d11}
 800afa0:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800afa4:	b081      	sub	sp, #4
	
	float s_ref_CRI[1024] = {0};
 800afa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800afaa:	900c      	str	r0, [sp, #48]	; 0x30
 800afac:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800afae:	a820      	add	r0, sp, #128	; 0x80
 800afb0:	2100      	movs	r1, #0
 800afb2:	f014 f81c 	bl	801efee <memset>
	float CRI_R_temp[1024] = {0};
 800afb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afba:	2100      	movs	r1, #0
 800afbc:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800afc0:	f014 f815 	bl	801efee <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800afc4:	2278      	movs	r2, #120	; 0x78
 800afc6:	2100      	movs	r1, #0
 800afc8:	48c1      	ldr	r0, [pc, #772]	; (800b2d0 <CRI_func+0x338>)
 800afca:	f014 f810 	bl	801efee <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800afce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afd0:	f241 3387 	movw	r3, #4999	; 0x1387
 800afd4:	429a      	cmp	r2, r3
 800afd6:	f200 84f9 	bhi.w	800b9cc <CRI_func+0xa34>
	{
		calcNorm560_CRI(CCT_measure);
 800afda:	4610      	mov	r0, r2
 800afdc:	f7ff ff18 	bl	800ae10 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800afe0:	4bbc      	ldr	r3, [pc, #752]	; (800b2d4 <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800afe2:	ed9f 0abd 	vldr	s0, [pc, #756]	; 800b2d8 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800afe6:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800afea:	a1b3      	add	r1, pc, #716	; (adr r1, 800b2b8 <CRI_func+0x320>)
 800afec:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800aff0:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
	float v_test = colorimetry_uv[1];
 800aff4:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800aff8:	4bb8      	ldr	r3, [pc, #736]	; (800b2dc <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800affa:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
	bar_CRI = 0.1;
 800affe:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800b002:	210d      	movs	r1, #13
 800b004:	2055      	movs	r0, #85	; 0x55
 800b006:	f009 fa29 	bl	801445c <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800b00a:	4bb5      	ldr	r3, [pc, #724]	; (800b2e0 <CRI_func+0x348>)
 800b00c:	ed93 7a00 	vldr	s14, [r3]
 800b010:	4bb4      	ldr	r3, [pc, #720]	; (800b2e4 <CRI_func+0x34c>)
 800b012:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800b016:	ecfa 6a01 	vldmia	sl!, {s13}
 800b01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800b01e:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800b020:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800b024:	d1f7      	bne.n	800b016 <CRI_func+0x7e>
 800b026:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800b2c0 <CRI_func+0x328>
 800b02a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800b02e:	eeb0 8a47 	vmov.f32	s16, s14
 800b032:	eef0 8a67 	vmov.f32	s17, s15
 800b036:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800b03a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b03e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b042:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b046:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b04a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b04e:	2300      	movs	r3, #0
 800b050:	9300      	str	r3, [sp, #0]
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800b052:	4ca2      	ldr	r4, [pc, #648]	; (800b2dc <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * calibratre_y_1931[j];
 800b054:	4fa4      	ldr	r7, [pc, #656]	; (800b2e8 <CRI_func+0x350>)
 800b056:	f8df 928c 	ldr.w	r9, [pc, #652]	; 800b2e4 <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800b05a:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 800b310 <CRI_func+0x378>
		bar_CRI += 0.05;
 800b05e:	a39a      	add	r3, pc, #616	; (adr r3, 800b2c8 <CRI_func+0x330>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b068:	f7f5 f920 	bl	80002ac <__adddf3>
 800b06c:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800b070:	f7f5 fdc6 	bl	8000c00 <__aeabi_d2f>
 800b074:	210d      	movs	r1, #13
 800b076:	ee00 0a10 	vmov	s0, r0
 800b07a:	2055      	movs	r0, #85	; 0x55
 800b07c:	f009 f9ee 	bl	801445c <GUI_Bar_Measure>
		 x_i_test = 0;
 800b080:	4b9a      	ldr	r3, [pc, #616]	; (800b2ec <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800b082:	489b      	ldr	r0, [pc, #620]	; (800b2f0 <CRI_func+0x358>)
		 x_i_test = 0;
 800b084:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800b088:	4b9a      	ldr	r3, [pc, #616]	; (800b2f4 <CRI_func+0x35c>)
 800b08a:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800b08e:	4b9a      	ldr	r3, [pc, #616]	; (800b2f8 <CRI_func+0x360>)
 800b090:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800b094:	4b99      	ldr	r3, [pc, #612]	; (800b2fc <CRI_func+0x364>)
 800b096:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800b09a:	4b99      	ldr	r3, [pc, #612]	; (800b300 <CRI_func+0x368>)
 800b09c:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800b0a0:	4b98      	ldr	r3, [pc, #608]	; (800b304 <CRI_func+0x36c>)
 800b0a2:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800b0a6:	9b00      	ldr	r3, [sp, #0]
 800b0a8:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800b0ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b0b0:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800b0b4:	f002 fd94 	bl	800dbe0 <Calibration_Load_Pack>
 800b0b8:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800b0ba:	4625      	mov	r5, r4
 800b0bc:	f89d 3000 	ldrb.w	r3, [sp]
 800b0c0:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800b0c2:	9b00      	ldr	r3, [sp, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d150      	bne.n	800b16a <CRI_func+0x1d2>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800b0c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f7ff fed8 	bl	800ae80 <calcSref_CRI>
 800b0d0:	ab20      	add	r3, sp, #128	; 0x80
 800b0d2:	4423      	add	r3, r4
 800b0d4:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * calibratre_y_1931[j];
 800b0d8:	19e3      	adds	r3, r4, r7
 800b0da:	edd3 9a00 	vldr	s19, [r3]
 800b0de:	eb09 0304 	add.w	r3, r9, r4
 800b0e2:	edd3 7a00 	vldr	s15, [r3]
 800b0e6:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800b0ea:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * calibratre_y_1931[j];
 800b0ee:	ee17 0a90 	vmov	r0, s15
 800b0f2:	f7f5 fa39 	bl	8000568 <__aeabi_f2d>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0fe:	f7f5 f8d5 	bl	80002ac <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800b102:	eb04 0308 	add.w	r3, r4, r8
 800b106:	edd3 7a00 	vldr	s15, [r3]
 800b10a:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * calibratre_y_1931[j];
 800b10e:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800b112:	ee17 0a90 	vmov	r0, s15
 800b116:	f7f5 fa27 	bl	8000568 <__aeabi_f2d>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b122:	f7f5 f8c3 	bl	80002ac <__adddf3>
				y_ref += s_ref_CRI[j] * calibratre_y_1931[j];
 800b126:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800b12a:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * calibratre_y_1931[j];
 800b12e:	ee17 0a90 	vmov	r0, s15
 800b132:	f7f5 fa19 	bl	8000568 <__aeabi_f2d>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b13e:	f7f5 f8b5 	bl	80002ac <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800b142:	4b71      	ldr	r3, [pc, #452]	; (800b308 <CRI_func+0x370>)
 800b144:	4423      	add	r3, r4
 800b146:	edd3 7a00 	vldr	s15, [r3]
 800b14a:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * calibratre_y_1931[j];
 800b14e:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800b152:	ee17 0a90 	vmov	r0, s15
 800b156:	f7f5 fa07 	bl	8000568 <__aeabi_f2d>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b162:	f7f5 f8a3 	bl	80002ac <__adddf3>
 800b166:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b16a:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800b16e:	4423      	add	r3, r4
 800b170:	ed93 9a00 	vldr	s18, [r3]
 800b174:	4e5d      	ldr	r6, [pc, #372]	; (800b2ec <CRI_func+0x354>)
 800b176:	eb09 0304 	add.w	r3, r9, r4
 800b17a:	edd3 9a00 	vldr	s19, [r3]
 800b17e:	eb04 0308 	add.w	r3, r4, r8
 800b182:	ee69 9a29 	vmul.f32	s19, s18, s19
 800b186:	ed93 ba00 	vldr	s22, [r3]
 800b18a:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800b18e:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b190:	ee17 0a90 	vmov	r0, s15
 800b194:	f7f5 f9e8 	bl	8000568 <__aeabi_f2d>
 800b198:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b19c:	f7f5 f886 	bl	80002ac <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b1a0:	19e3      	adds	r3, r4, r7
 800b1a2:	edd3 aa00 	vldr	s21, [r3]
 800b1a6:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b1aa:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b1ae:	4e51      	ldr	r6, [pc, #324]	; (800b2f4 <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b1b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b1b4:	ee17 0a90 	vmov	r0, s15
 800b1b8:	f7f5 f9d6 	bl	8000568 <__aeabi_f2d>
 800b1bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1c0:	f7f5 f874 	bl	80002ac <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b1c4:	4b50      	ldr	r3, [pc, #320]	; (800b308 <CRI_func+0x370>)
 800b1c6:	4423      	add	r3, r4
 800b1c8:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b1cc:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b1ce:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b1d2:	468b      	mov	fp, r1
 800b1d4:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b1d8:	4e47      	ldr	r6, [pc, #284]	; (800b2f8 <CRI_func+0x360>)
 800b1da:	ee17 0a90 	vmov	r0, s15
 800b1de:	f7f5 f9c3 	bl	8000568 <__aeabi_f2d>
 800b1e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1e6:	f7f5 f861 	bl	80002ac <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b1ea:	ab20      	add	r3, sp, #128	; 0x80
 800b1ec:	4423      	add	r3, r4
 800b1ee:	edd3 7a00 	vldr	s15, [r3]
 800b1f2:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b1f6:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b1fa:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800b1fe:	4e3f      	ldr	r6, [pc, #252]	; (800b2fc <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b200:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b204:	ee17 0a90 	vmov	r0, s15
 800b208:	f7f5 f9ae 	bl	8000568 <__aeabi_f2d>
 800b20c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b210:	f7f5 f84c 	bl	80002ac <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b214:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b218:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b21c:	4e38      	ldr	r6, [pc, #224]	; (800b300 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800b21e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b222:	ee17 0a90 	vmov	r0, s15
 800b226:	f7f5 f99f 	bl	8000568 <__aeabi_f2d>
 800b22a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b22e:	f7f5 f83d 	bl	80002ac <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b232:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b236:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b23a:	4e32      	ldr	r6, [pc, #200]	; (800b304 <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_y_1931[j];
 800b23c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b240:	ee17 0a90 	vmov	r0, s15
 800b244:	f7f5 f990 	bl	8000568 <__aeabi_f2d>
 800b248:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b24c:	f7f5 f82e 	bl	80002ac <__adddf3>
		for (int j = 0; j < 1024; j++)
 800b250:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800b254:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800b258:	e9c6 0100 	strd	r0, r1, [r6]
 800b25c:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800b260:	f47f af2c 	bne.w	800b0bc <CRI_func+0x124>
		}
		if (i == 0) 
 800b264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b266:	2b00      	cmp	r3, #0
 800b268:	f040 808a 	bne.w	800b380 <CRI_func+0x3e8>
		{
			k_ref = 100 / y_ref;
 800b26c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b270:	2000      	movs	r0, #0
 800b272:	4926      	ldr	r1, [pc, #152]	; (800b30c <CRI_func+0x374>)
 800b274:	f7f5 faf6 	bl	8000864 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800b278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800b27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800b280:	2000      	movs	r0, #0
 800b282:	4922      	ldr	r1, [pc, #136]	; (800b30c <CRI_func+0x374>)
 800b284:	f7f5 faee 	bl	8000864 <__aeabi_ddiv>
			x_ref *= k_ref;
 800b288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800b28c:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800b290:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b294:	f7f5 f9bc 	bl	8000610 <__aeabi_dmul>
			y_ref *= k_ref;
 800b298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800b29c:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800b2a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2a4:	f7f5 f9b4 	bl	8000610 <__aeabi_dmul>
			z_ref *= k_ref;
 800b2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			y_ref *= k_ref;
 800b2ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800b2b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2b4:	e02e      	b.n	800b314 <CRI_func+0x37c>
 800b2b6:	bf00      	nop
 800b2b8:	9999999a 	.word	0x9999999a
 800b2bc:	3fb99999 	.word	0x3fb99999
	...
 800b2c8:	9999999a 	.word	0x9999999a
 800b2cc:	3fa99999 	.word	0x3fa99999
 800b2d0:	2008ac30 	.word	0x2008ac30
 800b2d4:	2008a7e4 	.word	0x2008a7e4
 800b2d8:	3dcccccd 	.word	0x3dcccccd
 800b2dc:	2008abe0 	.word	0x2008abe0
 800b2e0:	2008fda4 	.word	0x2008fda4
 800b2e4:	20003c10 	.word	0x20003c10
 800b2e8:	200877d0 	.word	0x200877d0
 800b2ec:	20004c18 	.word	0x20004c18
 800b2f0:	0811b040 	.word	0x0811b040
 800b2f4:	20004c28 	.word	0x20004c28
 800b2f8:	20004c38 	.word	0x20004c38
 800b2fc:	20004c10 	.word	0x20004c10
 800b300:	20004c20 	.word	0x20004c20
 800b304:	20004c30 	.word	0x20004c30
 800b308:	200887d0 	.word	0x200887d0
 800b30c:	40590000 	.word	0x40590000
 800b310:	200857d0 	.word	0x200857d0
 800b314:	f7f5 f97c 	bl	8000610 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800b318:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800b31a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800b31e:	4bb7      	ldr	r3, [pc, #732]	; (800b5fc <CRI_func+0x664>)
 800b320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b324:	f7f5 f974 	bl	8000610 <__aeabi_dmul>
 800b328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b32c:	f7f4 ffbe 	bl	80002ac <__adddf3>
 800b330:	2200      	movs	r2, #0
 800b332:	4604      	mov	r4, r0
 800b334:	460d      	mov	r5, r1
 800b336:	4bb2      	ldr	r3, [pc, #712]	; (800b600 <CRI_func+0x668>)
 800b338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b33c:	f7f5 f968 	bl	8000610 <__aeabi_dmul>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4620      	mov	r0, r4
 800b346:	4629      	mov	r1, r5
 800b348:	f7f4 ffb0 	bl	80002ac <__adddf3>
 800b34c:	2200      	movs	r2, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	460d      	mov	r5, r1
 800b352:	4bac      	ldr	r3, [pc, #688]	; (800b604 <CRI_func+0x66c>)
 800b354:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b358:	f7f5 f95a 	bl	8000610 <__aeabi_dmul>
 800b35c:	4622      	mov	r2, r4
 800b35e:	462b      	mov	r3, r5
 800b360:	f7f5 fa80 	bl	8000864 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800b364:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800b366:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800b36a:	4ba7      	ldr	r3, [pc, #668]	; (800b608 <CRI_func+0x670>)
 800b36c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b370:	f7f5 f94e 	bl	8000610 <__aeabi_dmul>
 800b374:	4622      	mov	r2, r4
 800b376:	462b      	mov	r3, r5
 800b378:	f7f5 fa74 	bl	8000864 <__aeabi_ddiv>
 800b37c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50

		}	
		x_i_test *= k_test;	
 800b380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b388:	f7f5 f942 	bl	8000610 <__aeabi_dmul>
 800b38c:	4b9f      	ldr	r3, [pc, #636]	; (800b60c <CRI_func+0x674>)
 800b38e:	4604      	mov	r4, r0
 800b390:	460d      	mov	r5, r1
 800b392:	e9c3 4500 	strd	r4, r5, [r3]
		y_i_test *= k_test;
 800b396:	4652      	mov	r2, sl
 800b398:	465b      	mov	r3, fp
 800b39a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b39e:	f7f5 f937 	bl	8000610 <__aeabi_dmul>
 800b3a2:	4b9b      	ldr	r3, [pc, #620]	; (800b610 <CRI_func+0x678>)
 800b3a4:	4682      	mov	sl, r0
 800b3a6:	468b      	mov	fp, r1
 800b3a8:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800b3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3b4:	f7f5 f92c 	bl	8000610 <__aeabi_dmul>
 800b3b8:	4b96      	ldr	r3, [pc, #600]	; (800b614 <CRI_func+0x67c>)
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	e9c3 6700 	strd	r6, r7, [r3]
		
		x_i_ref *= k_ref;
 800b3c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3c6:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b3ca:	f7f5 f921 	bl	8000610 <__aeabi_dmul>
 800b3ce:	4b92      	ldr	r3, [pc, #584]	; (800b618 <CRI_func+0x680>)
 800b3d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3d4:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800b3d8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e0:	f7f5 f916 	bl	8000610 <__aeabi_dmul>
 800b3e4:	4b8d      	ldr	r3, [pc, #564]	; (800b61c <CRI_func+0x684>)
 800b3e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b3ea:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800b3ee:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f6:	f7f5 f90b 	bl	8000610 <__aeabi_dmul>
 800b3fa:	4b89      	ldr	r3, [pc, #548]	; (800b620 <CRI_func+0x688>)
 800b3fc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800b400:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800b404:	2200      	movs	r2, #0
 800b406:	4b7d      	ldr	r3, [pc, #500]	; (800b5fc <CRI_func+0x664>)
 800b408:	4650      	mov	r0, sl
 800b40a:	4659      	mov	r1, fp
 800b40c:	f7f5 f900 	bl	8000610 <__aeabi_dmul>
 800b410:	4622      	mov	r2, r4
 800b412:	462b      	mov	r3, r5
 800b414:	f7f4 ff4a 	bl	80002ac <__adddf3>
 800b418:	2200      	movs	r2, #0
 800b41a:	4680      	mov	r8, r0
 800b41c:	4689      	mov	r9, r1
 800b41e:	4b78      	ldr	r3, [pc, #480]	; (800b600 <CRI_func+0x668>)
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f5 f8f4 	bl	8000610 <__aeabi_dmul>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4640      	mov	r0, r8
 800b42e:	4649      	mov	r1, r9
 800b430:	f7f4 ff3c 	bl	80002ac <__adddf3>
 800b434:	2200      	movs	r2, #0
 800b436:	4606      	mov	r6, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	4b72      	ldr	r3, [pc, #456]	; (800b604 <CRI_func+0x66c>)
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f5 f8e6 	bl	8000610 <__aeabi_dmul>
 800b444:	4632      	mov	r2, r6
 800b446:	463b      	mov	r3, r7
 800b448:	f7f5 fa0c 	bl	8000864 <__aeabi_ddiv>
 800b44c:	4b75      	ldr	r3, [pc, #468]	; (800b624 <CRI_func+0x68c>)
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	e9c3 4500 	strd	r4, r5, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800b456:	2200      	movs	r2, #0
 800b458:	4b6b      	ldr	r3, [pc, #428]	; (800b608 <CRI_func+0x670>)
 800b45a:	4650      	mov	r0, sl
 800b45c:	4659      	mov	r1, fp
 800b45e:	f7f5 f8d7 	bl	8000610 <__aeabi_dmul>
 800b462:	4632      	mov	r2, r6
 800b464:	463b      	mov	r3, r7
 800b466:	f7f5 f9fd 	bl	8000864 <__aeabi_ddiv>
 800b46a:	4b6f      	ldr	r3, [pc, #444]	; (800b628 <CRI_func+0x690>)
 800b46c:	4606      	mov	r6, r0
 800b46e:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800b470:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800b474:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800b478:	f014 f9ea 	bl	801f850 <cbrt>
 800b47c:	2200      	movs	r2, #0
 800b47e:	ec51 0b10 	vmov	r0, r1, d0
 800b482:	4b6a      	ldr	r3, [pc, #424]	; (800b62c <CRI_func+0x694>)
 800b484:	f7f5 f8c4 	bl	8000610 <__aeabi_dmul>
 800b488:	2200      	movs	r2, #0
 800b48a:	4b69      	ldr	r3, [pc, #420]	; (800b630 <CRI_func+0x698>)
 800b48c:	f7f4 ff0c 	bl	80002a8 <__aeabi_dsub>
 800b490:	4b68      	ldr	r3, [pc, #416]	; (800b634 <CRI_func+0x69c>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800b492:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800b494:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800b498:	4b67      	ldr	r3, [pc, #412]	; (800b638 <CRI_func+0x6a0>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800b49a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800b49e:	f7f5 f8b7 	bl	8000610 <__aeabi_dmul>
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	981e      	ldr	r0, [sp, #120]	; 0x78
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	f7f5 f85e 	bl	8000568 <__aeabi_f2d>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 fef8 	bl	80002a8 <__aeabi_dsub>
 800b4b8:	4642      	mov	r2, r8
 800b4ba:	464b      	mov	r3, r9
 800b4bc:	f7f5 f8a8 	bl	8000610 <__aeabi_dmul>
 800b4c0:	4b5e      	ldr	r3, [pc, #376]	; (800b63c <CRI_func+0x6a4>)
 800b4c2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800b4c6:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800b4ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800b4cc:	f7f5 f84c 	bl	8000568 <__aeabi_f2d>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	f7f4 fee6 	bl	80002a8 <__aeabi_dsub>
 800b4dc:	4642      	mov	r2, r8
 800b4de:	464b      	mov	r3, r9
 800b4e0:	f7f5 f896 	bl	8000610 <__aeabi_dmul>
 800b4e4:	4b56      	ldr	r3, [pc, #344]	; (800b640 <CRI_func+0x6a8>)
 800b4e6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800b4ea:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4b42      	ldr	r3, [pc, #264]	; (800b5fc <CRI_func+0x664>)
 800b4f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b4f6:	f7f5 f88b 	bl	8000610 <__aeabi_dmul>
 800b4fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4fe:	f7f4 fed5 	bl	80002ac <__adddf3>
 800b502:	2200      	movs	r2, #0
 800b504:	4604      	mov	r4, r0
 800b506:	460d      	mov	r5, r1
 800b508:	4b3d      	ldr	r3, [pc, #244]	; (800b600 <CRI_func+0x668>)
 800b50a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800b50e:	f7f5 f87f 	bl	8000610 <__aeabi_dmul>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4620      	mov	r0, r4
 800b518:	4629      	mov	r1, r5
 800b51a:	f7f4 fec7 	bl	80002ac <__adddf3>
 800b51e:	2200      	movs	r2, #0
 800b520:	4606      	mov	r6, r0
 800b522:	460f      	mov	r7, r1
 800b524:	4b37      	ldr	r3, [pc, #220]	; (800b604 <CRI_func+0x66c>)
 800b526:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b52a:	f7f5 f871 	bl	8000610 <__aeabi_dmul>
 800b52e:	4632      	mov	r2, r6
 800b530:	463b      	mov	r3, r7
 800b532:	f7f5 f997 	bl	8000864 <__aeabi_ddiv>
 800b536:	4b43      	ldr	r3, [pc, #268]	; (800b644 <CRI_func+0x6ac>)
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800b540:	2200      	movs	r2, #0
 800b542:	4b31      	ldr	r3, [pc, #196]	; (800b608 <CRI_func+0x670>)
 800b544:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b548:	f7f5 f862 	bl	8000610 <__aeabi_dmul>
 800b54c:	4632      	mov	r2, r6
 800b54e:	463b      	mov	r3, r7
 800b550:	f7f5 f988 	bl	8000864 <__aeabi_ddiv>
 800b554:	4b3c      	ldr	r3, [pc, #240]	; (800b648 <CRI_func+0x6b0>)
 800b556:	4682      	mov	sl, r0
 800b558:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800b55a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800b55e:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800b562:	f014 f975 	bl	801f850 <cbrt>
 800b566:	2200      	movs	r2, #0
 800b568:	ec51 0b10 	vmov	r0, r1, d0
 800b56c:	4b2f      	ldr	r3, [pc, #188]	; (800b62c <CRI_func+0x694>)
 800b56e:	f7f5 f84f 	bl	8000610 <__aeabi_dmul>
 800b572:	2200      	movs	r2, #0
 800b574:	4b2e      	ldr	r3, [pc, #184]	; (800b630 <CRI_func+0x698>)
 800b576:	f7f4 fe97 	bl	80002a8 <__aeabi_dsub>
 800b57a:	4b34      	ldr	r3, [pc, #208]	; (800b64c <CRI_func+0x6b4>)
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800b584:	2200      	movs	r2, #0
 800b586:	4b2c      	ldr	r3, [pc, #176]	; (800b638 <CRI_func+0x6a0>)
 800b588:	f7f5 f842 	bl	8000610 <__aeabi_dmul>
 800b58c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b590:	4680      	mov	r8, r0
 800b592:	4689      	mov	r9, r1
 800b594:	4620      	mov	r0, r4
 800b596:	4629      	mov	r1, r5
 800b598:	f7f4 fe86 	bl	80002a8 <__aeabi_dsub>
 800b59c:	4642      	mov	r2, r8
 800b59e:	464b      	mov	r3, r9
 800b5a0:	f7f5 f836 	bl	8000610 <__aeabi_dmul>
 800b5a4:	4b2a      	ldr	r3, [pc, #168]	; (800b650 <CRI_func+0x6b8>)
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	460d      	mov	r5, r1
 800b5aa:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800b5ae:	4650      	mov	r0, sl
 800b5b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b5b4:	4659      	mov	r1, fp
 800b5b6:	f7f4 fe77 	bl	80002a8 <__aeabi_dsub>
 800b5ba:	4642      	mov	r2, r8
 800b5bc:	464b      	mov	r3, r9
 800b5be:	f7f5 f827 	bl	8000610 <__aeabi_dmul>
 800b5c2:	4b24      	ldr	r3, [pc, #144]	; (800b654 <CRI_func+0x6bc>)
 800b5c4:	4680      	mov	r8, r0
 800b5c6:	4689      	mov	r9, r1
 800b5c8:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	f7f4 fe68 	bl	80002a8 <__aeabi_dsub>
 800b5d8:	4b1f      	ldr	r3, [pc, #124]	; (800b658 <CRI_func+0x6c0>)
 800b5da:	4606      	mov	r6, r0
 800b5dc:	460f      	mov	r7, r1
 800b5de:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7f4 fe5d 	bl	80002a8 <__aeabi_dsub>
 800b5ee:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <CRI_func+0x6c4>)
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800b5f8:	4640      	mov	r0, r8
 800b5fa:	e031      	b.n	800b660 <CRI_func+0x6c8>
 800b5fc:	402e0000 	.word	0x402e0000
 800b600:	40080000 	.word	0x40080000
 800b604:	40100000 	.word	0x40100000
 800b608:	40180000 	.word	0x40180000
 800b60c:	20004c18 	.word	0x20004c18
 800b610:	20004c28 	.word	0x20004c28
 800b614:	20004c38 	.word	0x20004c38
 800b618:	20004c10 	.word	0x20004c10
 800b61c:	20004c20 	.word	0x20004c20
 800b620:	20004c30 	.word	0x20004c30
 800b624:	2008ac00 	.word	0x2008ac00
 800b628:	2008abb0 	.word	0x2008abb0
 800b62c:	40390000 	.word	0x40390000
 800b630:	40310000 	.word	0x40310000
 800b634:	2008ac28 	.word	0x2008ac28
 800b638:	402a0000 	.word	0x402a0000
 800b63c:	2008abb8 	.word	0x2008abb8
 800b640:	2008abf8 	.word	0x2008abf8
 800b644:	2008ac20 	.word	0x2008ac20
 800b648:	2008abc0 	.word	0x2008abc0
 800b64c:	2008ac08 	.word	0x2008ac08
 800b650:	2008abd8 	.word	0x2008abd8
 800b654:	2008aba8 	.word	0x2008aba8
 800b658:	2008abf0 	.word	0x2008abf0
 800b65c:	2008abe8 	.word	0x2008abe8
 800b660:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800b664:	4649      	mov	r1, r9
 800b666:	f7f4 fe1f 	bl	80002a8 <__aeabi_dsub>
 800b66a:	4b5b      	ldr	r3, [pc, #364]	; (800b7d8 <CRI_func+0x840>)
 800b66c:	4680      	mov	r8, r0
 800b66e:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800b670:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800b672:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800b676:	4630      	mov	r0, r6
 800b678:	463b      	mov	r3, r7
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f4 ffc8 	bl	8000610 <__aeabi_dmul>
 800b680:	4622      	mov	r2, r4
 800b682:	462b      	mov	r3, r5
 800b684:	4606      	mov	r6, r0
 800b686:	460f      	mov	r7, r1
 800b688:	4620      	mov	r0, r4
 800b68a:	4629      	mov	r1, r5
 800b68c:	f7f4 ffc0 	bl	8000610 <__aeabi_dmul>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4630      	mov	r0, r6
 800b696:	4639      	mov	r1, r7
 800b698:	f7f4 fe08 	bl	80002ac <__adddf3>
 800b69c:	4642      	mov	r2, r8
 800b69e:	4604      	mov	r4, r0
 800b6a0:	460d      	mov	r5, r1
 800b6a2:	464b      	mov	r3, r9
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	f7f4 ffb2 	bl	8000610 <__aeabi_dmul>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	f7f4 fdfa 	bl	80002ac <__adddf3>
 800b6b8:	ec41 0b10 	vmov	d0, r0, r1
 800b6bc:	f014 fbf8 	bl	801feb0 <sqrt>
 800b6c0:	4b46      	ldr	r3, [pc, #280]	; (800b7dc <CRI_func+0x844>)
 800b6c2:	ec51 0b10 	vmov	r0, r1, d0
 800b6c6:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800b6ca:	a33f      	add	r3, pc, #252	; (adr r3, 800b7c8 <CRI_func+0x830>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f7f4 ff9e 	bl	8000610 <__aeabi_dmul>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	2000      	movs	r0, #0
 800b6da:	4941      	ldr	r1, [pc, #260]	; (800b7e0 <CRI_func+0x848>)
 800b6dc:	f7f4 fde4 	bl	80002a8 <__aeabi_dsub>
 800b6e0:	9a00      	ldr	r2, [sp, #0]
 800b6e2:	4b40      	ldr	r3, [pc, #256]	; (800b7e4 <CRI_func+0x84c>)
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	e9c3 4500 	strd	r4, r5, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800b6f0:	f7f5 fa3e 	bl	8000b70 <__aeabi_d2iz>
 800b6f4:	4b3c      	ldr	r3, [pc, #240]	; (800b7e8 <CRI_func+0x850>)
 800b6f6:	9a00      	ldr	r2, [sp, #0]
 800b6f8:	b240      	sxtb	r0, r0
 800b6fa:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800b6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6fe:	2b07      	cmp	r3, #7
 800b700:	f200 815a 	bhi.w	800b9b8 <CRI_func+0xa20>
			Ra_temp += Ri_temp[i];
 800b704:	4e39      	ldr	r6, [pc, #228]	; (800b7ec <CRI_func+0x854>)
 800b706:	4622      	mov	r2, r4
 800b708:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b70c:	462b      	mov	r3, r5
 800b70e:	f7f4 fdcd 	bl	80002ac <__adddf3>
 800b712:	e9c6 0100 	strd	r0, r1, [r6]
		if (i == 8)
			R9_temp = (int8_t)Ri_temp[i];
			R9 = (int8_t)R9_temp;
 800b716:	4b36      	ldr	r3, [pc, #216]	; (800b7f0 <CRI_func+0x858>)
 800b718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b71c:	f7f5 fa28 	bl	8000b70 <__aeabi_d2iz>
 800b720:	4b34      	ldr	r3, [pc, #208]	; (800b7f4 <CRI_func+0x85c>)
 800b722:	7018      	strb	r0, [r3, #0]
		if(i < 14)
 800b724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b726:	2b0e      	cmp	r3, #14
 800b728:	d008      	beq.n	800b73c <CRI_func+0x7a4>
			Rall_temp += Ri_temp[i];
 800b72a:	4e33      	ldr	r6, [pc, #204]	; (800b7f8 <CRI_func+0x860>)
 800b72c:	4622      	mov	r2, r4
 800b72e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b732:	462b      	mov	r3, r5
 800b734:	f7f4 fdba 	bl	80002ac <__adddf3>
 800b738:	e9c6 0100 	strd	r0, r1, [r6]
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800b73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b740:	2100      	movs	r1, #0
 800b742:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800b746:	f013 fc52 	bl	801efee <memset>
 800b74a:	9b00      	ldr	r3, [sp, #0]
 800b74c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800b74e:	2b0f      	cmp	r3, #15
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	f47f ac7e 	bne.w	800b052 <CRI_func+0xba>
	}
	
	bar_CRI = 0.9;
 800b756:	a31e      	add	r3, pc, #120	; (adr r3, 800b7d0 <CRI_func+0x838>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	4c27      	ldr	r4, [pc, #156]	; (800b7fc <CRI_func+0x864>)
	GUI_Bar_Measure(85, 13, bar_CRI);
	
	Rall_temp /= 14;
 800b75e:	4d26      	ldr	r5, [pc, #152]	; (800b7f8 <CRI_func+0x860>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800b760:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800b800 <CRI_func+0x868>
 800b764:	210d      	movs	r1, #13
 800b766:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800b768:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800b76c:	f008 fe76 	bl	801445c <GUI_Bar_Measure>
	Rall_temp /= 14;
 800b770:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b774:	2200      	movs	r2, #0
 800b776:	4b23      	ldr	r3, [pc, #140]	; (800b804 <CRI_func+0x86c>)
 800b778:	f7f5 f874 	bl	8000864 <__aeabi_ddiv>
 800b77c:	e9c5 0100 	strd	r0, r1, [r5]
	Rall = (int8_t)Rall_temp;
 800b780:	f7f5 f9f6 	bl	8000b70 <__aeabi_d2iz>
	
	Ra_temp /= 8;
 800b784:	4d19      	ldr	r5, [pc, #100]	; (800b7ec <CRI_func+0x854>)
	Rall = (int8_t)Rall_temp;
 800b786:	4b20      	ldr	r3, [pc, #128]	; (800b808 <CRI_func+0x870>)
	Ra_temp /= 8;
 800b788:	2200      	movs	r2, #0
	Rall = (int8_t)Rall_temp;
 800b78a:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800b78c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b790:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b794:	f7f4 ff3c 	bl	8000610 <__aeabi_dmul>
 800b798:	e9c5 0100 	strd	r0, r1, [r5]
	Ra = (int8_t)Ra_temp;
 800b79c:	f7f5 f9e8 	bl	8000b70 <__aeabi_d2iz>
 800b7a0:	4b1a      	ldr	r3, [pc, #104]	; (800b80c <CRI_func+0x874>)
 800b7a2:	7018      	strb	r0, [r3, #0]
	
	bar_CRI = 1.0;
 800b7a4:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <CRI_func+0x878>)
 800b7a6:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800b7a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b7ac:	210d      	movs	r1, #13
 800b7ae:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800b7b0:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800b7b4:	f008 fe52 	bl	801445c <GUI_Bar_Measure>
 800b7b8:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800b7bc:	b001      	add	sp, #4
 800b7be:	ecbd 8b08 	vpop	{d8-d11}
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	bf00      	nop
 800b7c8:	66666666 	.word	0x66666666
 800b7cc:	40126666 	.word	0x40126666
 800b7d0:	cccccccd 	.word	0xcccccccd
 800b7d4:	3feccccc 	.word	0x3feccccc
 800b7d8:	2008aca8 	.word	0x2008aca8
 800b7dc:	2008ac18 	.word	0x2008ac18
 800b7e0:	40590000 	.word	0x40590000
 800b7e4:	2008ac30 	.word	0x2008ac30
 800b7e8:	20003c00 	.word	0x20003c00
 800b7ec:	20003be8 	.word	0x20003be8
 800b7f0:	20003bd8 	.word	0x20003bd8
 800b7f4:	20003bd0 	.word	0x20003bd0
 800b7f8:	20003bf8 	.word	0x20003bf8
 800b7fc:	2008abe0 	.word	0x2008abe0
 800b800:	3f666666 	.word	0x3f666666
 800b804:	402c0000 	.word	0x402c0000
 800b808:	20003bf0 	.word	0x20003bf0
 800b80c:	20003be0 	.word	0x20003be0
 800b810:	3ff00000 	.word	0x3ff00000
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b814:	ee68 8a08 	vmul.f32	s17, s16, s16
 800b818:	ee68 7a28 	vmul.f32	s15, s16, s17
 800b81c:	ee17 0a90 	vmov	r0, s15
 800b820:	f7f4 fea2 	bl	8000568 <__aeabi_f2d>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	a1b5      	add	r1, pc, #724	; (adr r1, 800bb00 <CRI_func+0xb68>)
 800b82a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82e:	f7f5 f819 	bl	8000864 <__aeabi_ddiv>
 800b832:	4606      	mov	r6, r0
 800b834:	ee18 0a90 	vmov	r0, s17
 800b838:	460f      	mov	r7, r1
 800b83a:	f7f4 fe95 	bl	8000568 <__aeabi_f2d>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	a1b1      	add	r1, pc, #708	; (adr r1, 800bb08 <CRI_func+0xb70>)
 800b844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b848:	f7f5 f80c 	bl	8000864 <__aeabi_ddiv>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4630      	mov	r0, r6
 800b852:	4639      	mov	r1, r7
 800b854:	f7f4 fd2a 	bl	80002ac <__adddf3>
 800b858:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b85a:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b85e:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b860:	f7f4 fe82 	bl	8000568 <__aeabi_f2d>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	a1a9      	add	r1, pc, #676	; (adr r1, 800bb10 <CRI_func+0xb78>)
 800b86a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b86e:	f7f4 fff9 	bl	8000864 <__aeabi_ddiv>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	4630      	mov	r0, r6
 800b878:	4639      	mov	r1, r7
 800b87a:	f7f4 fd17 	bl	80002ac <__adddf3>
 800b87e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bb18 <CRI_func+0xb80>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b884:	f7f4 fd12 	bl	80002ac <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b888:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800b88c:	e9d4 4500 	ldrd	r4, r5, [r4]
 800b890:	2200      	movs	r2, #0
 800b892:	4b95      	ldr	r3, [pc, #596]	; (800bae8 <CRI_func+0xb50>)
 800b894:	4620      	mov	r0, r4
 800b896:	4629      	mov	r1, r5
 800b898:	f7f4 feba 	bl	8000610 <__aeabi_dmul>
 800b89c:	4622      	mov	r2, r4
 800b89e:	462b      	mov	r3, r5
 800b8a0:	f7f4 feb6 	bl	8000610 <__aeabi_dmul>
 800b8a4:	a370      	add	r3, pc, #448	; (adr r3, 800ba68 <CRI_func+0xad0>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460f      	mov	r7, r1
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fead 	bl	8000610 <__aeabi_dmul>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f4 fcf5 	bl	80002ac <__adddf3>
 800b8c2:	a36b      	add	r3, pc, #428	; (adr r3, 800ba70 <CRI_func+0xad8>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f7f4 fcee 	bl	80002a8 <__aeabi_dsub>
 800b8cc:	4b87      	ldr	r3, [pc, #540]	; (800baec <CRI_func+0xb54>)
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	460f      	mov	r7, r1
 800b8d2:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	a367      	add	r3, pc, #412	; (adr r3, 800ba78 <CRI_func+0xae0>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f4 fe96 	bl	8000610 <__aeabi_dmul>
 800b8e4:	a366      	add	r3, pc, #408	; (adr r3, 800ba80 <CRI_func+0xae8>)
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	f7f4 fcdf 	bl	80002ac <__adddf3>
 800b8ee:	a366      	add	r3, pc, #408	; (adr r3, 800ba88 <CRI_func+0xaf0>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	4689      	mov	r9, r1
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	f7f4 fe88 	bl	8000610 <__aeabi_dmul>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4640      	mov	r0, r8
 800b906:	4649      	mov	r1, r9
 800b908:	f7f4 fcce 	bl	80002a8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800b90c:	a360      	add	r3, pc, #384	; (adr r3, 800ba90 <CRI_func+0xaf8>)
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800b912:	4680      	mov	r8, r0
 800b914:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800b916:	4620      	mov	r0, r4
 800b918:	4629      	mov	r1, r5
 800b91a:	f7f4 fe79 	bl	8000610 <__aeabi_dmul>
 800b91e:	4602      	mov	r2, r0
 800b920:	460b      	mov	r3, r1
 800b922:	a15d      	add	r1, pc, #372	; (adr r1, 800ba98 <CRI_func+0xb00>)
 800b924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b928:	f7f4 fcbe 	bl	80002a8 <__aeabi_dsub>
 800b92c:	a35c      	add	r3, pc, #368	; (adr r3, 800baa0 <CRI_func+0xb08>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	e9cd 0100 	strd	r0, r1, [sp]
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 fe69 	bl	8000610 <__aeabi_dmul>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b946:	f7f4 fcb1 	bl	80002ac <__adddf3>
 800b94a:	f7f5 f959 	bl	8000c00 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800b94e:	f7f4 fe0b 	bl	8000568 <__aeabi_f2d>
 800b952:	4642      	mov	r2, r8
 800b954:	464b      	mov	r3, r9
 800b956:	f7f4 ff85 	bl	8000864 <__aeabi_ddiv>
 800b95a:	f7f5 f951 	bl	8000c00 <__aeabi_d2f>
 800b95e:	4b64      	ldr	r3, [pc, #400]	; (800baf0 <CRI_func+0xb58>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800b960:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800b962:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800b964:	a350      	add	r3, pc, #320	; (adr r3, 800baa8 <CRI_func+0xb10>)
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7f4 fe50 	bl	8000610 <__aeabi_dmul>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	a14e      	add	r1, pc, #312	; (adr r1, 800bab0 <CRI_func+0xb18>)
 800b976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b97a:	f7f4 fc95 	bl	80002a8 <__aeabi_dsub>
 800b97e:	a34e      	add	r3, pc, #312	; (adr r3, 800bab8 <CRI_func+0xb20>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	4604      	mov	r4, r0
 800b986:	460d      	mov	r5, r1
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f4 fe40 	bl	8000610 <__aeabi_dmul>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4620      	mov	r0, r4
 800b996:	4629      	mov	r1, r5
 800b998:	f7f4 fc88 	bl	80002ac <__adddf3>
 800b99c:	f7f5 f930 	bl	8000c00 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800b9a0:	f7f4 fde2 	bl	8000568 <__aeabi_f2d>
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	4642      	mov	r2, r8
 800b9a8:	f7f4 ff5c 	bl	8000864 <__aeabi_ddiv>
 800b9ac:	f7f5 f928 	bl	8000c00 <__aeabi_d2f>
 800b9b0:	4b50      	ldr	r3, [pc, #320]	; (800baf4 <CRI_func+0xb5c>)
 800b9b2:	6018      	str	r0, [r3, #0]
 800b9b4:	f7ff bb14 	b.w	800afe0 <CRI_func+0x48>
		if (i == 8)
 800b9b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	f47f aeab 	bne.w	800b716 <CRI_func+0x77e>
			R9_temp = (int8_t)Ri_temp[i];
 800b9c0:	f7f4 fdc0 	bl	8000544 <__aeabi_i2d>
 800b9c4:	4b4c      	ldr	r3, [pc, #304]	; (800baf8 <CRI_func+0xb60>)
 800b9c6:	e9c3 0100 	strd	r0, r1, [r3]
 800b9ca:	e6a4      	b.n	800b716 <CRI_func+0x77e>
		if (CCT_measure < 7000)
 800b9cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9ce:	4c4b      	ldr	r4, [pc, #300]	; (800bafc <CRI_func+0xb64>)
 800b9d0:	f641 3357 	movw	r3, #6999	; 0x1b57
 800b9d4:	ee07 2a90 	vmov	s15, r2
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b9de:	f67f af19 	bls.w	800b814 <CRI_func+0x87c>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b9e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b9e4:	f7f4 fd9e 	bl	8000524 <__aeabi_ui2d>
 800b9e8:	ed9f 1b35 	vldr	d1, [pc, #212]	; 800bac0 <CRI_func+0xb28>
 800b9ec:	ec41 0b10 	vmov	d0, r0, r1
 800b9f0:	f014 f8e6 	bl	801fbc0 <pow>
 800b9f4:	ee68 7a08 	vmul.f32	s15, s16, s16
 800b9f8:	ed8d 0b00 	vstr	d0, [sp]
 800b9fc:	ee17 0a90 	vmov	r0, s15
 800ba00:	f7f4 fdb2 	bl	8000568 <__aeabi_f2d>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	a12f      	add	r1, pc, #188	; (adr r1, 800bac8 <CRI_func+0xb30>)
 800ba0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba0e:	f7f4 ff29 	bl	8000864 <__aeabi_ddiv>
 800ba12:	ed9d 0b00 	vldr	d0, [sp]
 800ba16:	4606      	mov	r6, r0
 800ba18:	ec53 2b10 	vmov	r2, r3, d0
 800ba1c:	460f      	mov	r7, r1
 800ba1e:	a12c      	add	r1, pc, #176	; (adr r1, 800bad0 <CRI_func+0xb38>)
 800ba20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba24:	f7f4 ff1e 	bl	8000864 <__aeabi_ddiv>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	4639      	mov	r1, r7
 800ba30:	f7f4 fc3c 	bl	80002ac <__adddf3>
 800ba34:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ba36:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ba3a:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ba3c:	f7f4 fd94 	bl	8000568 <__aeabi_f2d>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	a124      	add	r1, pc, #144	; (adr r1, 800bad8 <CRI_func+0xb40>)
 800ba46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba4a:	f7f4 ff0b 	bl	8000864 <__aeabi_ddiv>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	460b      	mov	r3, r1
 800ba52:	4630      	mov	r0, r6
 800ba54:	4639      	mov	r1, r7
 800ba56:	f7f4 fc29 	bl	80002ac <__adddf3>
 800ba5a:	a321      	add	r3, pc, #132	; (adr r3, 800bae0 <CRI_func+0xb48>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	e710      	b.n	800b884 <CRI_func+0x8ec>
 800ba62:	bf00      	nop
 800ba64:	f3af 8000 	nop.w
 800ba68:	8f5c28f6 	.word	0x8f5c28f6
 800ba6c:	4006f5c2 	.word	0x4006f5c2
 800ba70:	9999999a 	.word	0x9999999a
 800ba74:	3fd19999 	.word	0x3fd19999
 800ba78:	af4f0d84 	.word	0xaf4f0d84
 800ba7c:	3fd06594 	.word	0x3fd06594
 800ba80:	9f559b3d 	.word	0x9f559b3d
 800ba84:	3f98adab 	.word	0x3f98adab
 800ba88:	487fcb92 	.word	0x487fcb92
 800ba8c:	3fe77dbf 	.word	0x3fe77dbf
 800ba90:	17c1bda5 	.word	0x17c1bda5
 800ba94:	3ffc5326 	.word	0x3ffc5326
 800ba98:	76c8b439 	.word	0x76c8b439
 800ba9c:	bff59fbe 	.word	0xbff59fbe
 800baa0:	0aa64c30 	.word	0x0aa64c30
 800baa4:	4017a546 	.word	0x4017a546
 800baa8:	205bc01a 	.word	0x205bc01a
 800baac:	403f7141 	.word	0x403f7141
 800bab0:	eb851eb8 	.word	0xeb851eb8
 800bab4:	3f9eb851 	.word	0x3f9eb851
 800bab8:	ee631f8a 	.word	0xee631f8a
 800babc:	403e125a 	.word	0x403e125a
 800bac0:	00000000 	.word	0x00000000
 800bac4:	40080000 	.word	0x40080000
 800bac8:	00000000 	.word	0x00000000
 800bacc:	413d04e8 	.word	0x413d04e8
 800bad0:	00000001 	.word	0x00000001
 800bad4:	c1dde5cf 	.word	0xc1dde5cf
 800bad8:	28f5c290 	.word	0x28f5c290
 800badc:	406eef5c 	.word	0x406eef5c
 800bae0:	a3ec02f3 	.word	0xa3ec02f3
 800bae4:	3fce5753 	.word	0x3fce5753
 800bae8:	c0080000 	.word	0xc0080000
 800baec:	2008ac10 	.word	0x2008ac10
 800baf0:	20003bc8 	.word	0x20003bc8
 800baf4:	20003bcc 	.word	0x20003bcc
 800baf8:	20003bd8 	.word	0x20003bd8
 800bafc:	2008abc8 	.word	0x2008abc8
 800bb00:	dc000000 	.word	0xdc000000
 800bb04:	c1f12993 	.word	0xc1f12993
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	4146a47c 	.word	0x4146a47c
 800bb10:	3d70a3d7 	.word	0x3d70a3d7
 800bb14:	4058c70a 	.word	0x4058c70a
 800bb18:	d594f26b 	.word	0xd594f26b
 800bb1c:	3fcf3d74 	.word	0x3fcf3d74

0800bb20 <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800bb20:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800bb22:	bbb8      	cbnz	r0, 800bb94 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800bb24:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800bb28:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800bb2c:	2212      	movs	r2, #18
 800bb2e:	215f      	movs	r1, #95	; 0x5f
 800bb30:	2010      	movs	r0, #16
 800bb32:	9400      	str	r4, [sp, #0]
 800bb34:	f00f fe51 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800bb38:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800bb3c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800bb40:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800bb44:	2010      	movs	r0, #16
 800bb46:	9400      	str	r4, [sp, #0]
 800bb48:	f00f fe47 	bl	801b7da <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800bb4c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800bb50:	4619      	mov	r1, r3
 800bb52:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800bb56:	2010      	movs	r0, #16
 800bb58:	9400      	str	r4, [sp, #0]
 800bb5a:	f00f fde1 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800bb5e:	f240 1301 	movw	r3, #257	; 0x101
 800bb62:	4619      	mov	r1, r3
 800bb64:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800bb68:	2010      	movs	r0, #16
 800bb6a:	9400      	str	r4, [sp, #0]
 800bb6c:	f00f fdd8 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800bb70:	23b5      	movs	r3, #181	; 0xb5
 800bb72:	4619      	mov	r1, r3
 800bb74:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800bb78:	2010      	movs	r0, #16
 800bb7a:	9400      	str	r4, [sp, #0]
 800bb7c:	f00f fdd0 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800bb80:	2369      	movs	r3, #105	; 0x69
 800bb82:	9400      	str	r4, [sp, #0]
 800bb84:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800bb88:	4619      	mov	r1, r3
 800bb8a:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800bb8c:	f00f fdc8 	bl	801b720 <TFT_DrawLine>
		
	}
}
 800bb90:	b002      	add	sp, #8
 800bb92:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800bb94:	2801      	cmp	r0, #1
 800bb96:	d131      	bne.n	800bbfc <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800bb98:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800bb9c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bba0:	22ff      	movs	r2, #255	; 0xff
 800bba2:	2146      	movs	r1, #70	; 0x46
 800bba4:	20fd      	movs	r0, #253	; 0xfd
 800bba6:	9400      	str	r4, [sp, #0]
 800bba8:	f00f fe17 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800bbac:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bbb0:	22ff      	movs	r2, #255	; 0xff
 800bbb2:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800bbb6:	2028      	movs	r0, #40	; 0x28
 800bbb8:	9400      	str	r4, [sp, #0]
 800bbba:	f00f fe0e 	bl	801b7da <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800bbbe:	22cc      	movs	r2, #204	; 0xcc
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bbc6:	2146      	movs	r1, #70	; 0x46
 800bbc8:	9400      	str	r4, [sp, #0]
 800bbca:	f00f fda9 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800bbce:	2297      	movs	r2, #151	; 0x97
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bbd6:	2146      	movs	r1, #70	; 0x46
 800bbd8:	9400      	str	r4, [sp, #0]
 800bbda:	f00f fda1 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800bbde:	2262      	movs	r2, #98	; 0x62
 800bbe0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	9400      	str	r4, [sp, #0]
 800bbe8:	2146      	movs	r1, #70	; 0x46
 800bbea:	f00f fd99 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800bbee:	9400      	str	r4, [sp, #0]
 800bbf0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bbf4:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800bbf6:	2146      	movs	r1, #70	; 0x46
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	e7c7      	b.n	800bb8c <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800bbfc:	2802      	cmp	r0, #2
 800bbfe:	d1c7      	bne.n	800bb90 <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800bc00:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800bc04:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bc08:	2210      	movs	r2, #16
 800bc0a:	214a      	movs	r1, #74	; 0x4a
 800bc0c:	2012      	movs	r0, #18
 800bc0e:	9400      	str	r4, [sp, #0]
 800bc10:	f00f fde3 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800bc14:	234c      	movs	r3, #76	; 0x4c
 800bc16:	22e8      	movs	r2, #232	; 0xe8
 800bc18:	214a      	movs	r1, #74	; 0x4a
 800bc1a:	2011      	movs	r0, #17
 800bc1c:	9400      	str	r4, [sp, #0]
 800bc1e:	f00f fddc 	bl	801b7da <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800bc22:	2244      	movs	r2, #68	; 0x44
 800bc24:	4610      	mov	r0, r2
 800bc26:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bc2a:	2146      	movs	r1, #70	; 0x46
 800bc2c:	9400      	str	r4, [sp, #0]
 800bc2e:	f00f fd77 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800bc32:	2279      	movs	r2, #121	; 0x79
 800bc34:	4610      	mov	r0, r2
 800bc36:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bc3a:	2146      	movs	r1, #70	; 0x46
 800bc3c:	9400      	str	r4, [sp, #0]
 800bc3e:	f00f fd6f 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800bc42:	22ae      	movs	r2, #174	; 0xae
 800bc44:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bc48:	4610      	mov	r0, r2
 800bc4a:	9400      	str	r4, [sp, #0]
 800bc4c:	2146      	movs	r1, #70	; 0x46
 800bc4e:	f00f fd67 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800bc52:	9400      	str	r4, [sp, #0]
 800bc54:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800bc58:	22e3      	movs	r2, #227	; 0xe3
 800bc5a:	e7cc      	b.n	800bbf6 <CRI_Axes+0xd6>

0800bc5c <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800bc5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800bc60:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800bc62:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800bc64:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800bc66:	4688      	mov	r8, r1
 800bc68:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800bc6a:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d161      	bne.n	800bd36 <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800bc72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bc76:	f00f ffdf 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800bc7a:	2063      	movs	r0, #99	; 0x63
 800bc7c:	f00f ffe2 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800bc80:	4861      	ldr	r0, [pc, #388]	; (800be08 <CRI_Axes_Measure+0x1ac>)
 800bc82:	f00f ffd3 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800bc86:	2261      	movs	r2, #97	; 0x61
 800bc88:	2146      	movs	r1, #70	; 0x46
 800bc8a:	2011      	movs	r0, #17
 800bc8c:	f010 f898 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800bc90:	485e      	ldr	r0, [pc, #376]	; (800be0c <CRI_Axes_Measure+0x1b0>)
 800bc92:	f00f ffcb 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800bc96:	2252      	movs	r2, #82	; 0x52
 800bc98:	2144      	movs	r1, #68	; 0x44
 800bc9a:	2003      	movs	r0, #3
 800bc9c:	f010 f890 	bl	801bdc0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800bca0:	4642      	mov	r2, r8
 800bca2:	495b      	ldr	r1, [pc, #364]	; (800be10 <CRI_Axes_Measure+0x1b4>)
 800bca4:	4620      	mov	r0, r4
 800bca6:	f013 f9ab 	bl	801f000 <siprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800bcaa:	2303      	movs	r3, #3
 800bcac:	4622      	mov	r2, r4
 800bcae:	2144      	movs	r1, #68	; 0x44
 800bcb0:	2023      	movs	r0, #35	; 0x23
 800bcb2:	f010 f8dd 	bl	801be70 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800bcb6:	4854      	ldr	r0, [pc, #336]	; (800be08 <CRI_Axes_Measure+0x1ac>)
 800bcb8:	f00f ffb8 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800bcbc:	226c      	movs	r2, #108	; 0x6c
 800bcbe:	2146      	movs	r1, #70	; 0x46
 800bcc0:	2071      	movs	r0, #113	; 0x71
 800bcc2:	f010 f87d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800bcc6:	226c      	movs	r2, #108	; 0x6c
 800bcc8:	2146      	movs	r1, #70	; 0x46
 800bcca:	207a      	movs	r0, #122	; 0x7a
 800bccc:	f010 f878 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800bcd0:	2261      	movs	r2, #97	; 0x61
 800bcd2:	2146      	movs	r1, #70	; 0x46
 800bcd4:	2066      	movs	r0, #102	; 0x66
 800bcd6:	f010 f873 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800bcda:	484c      	ldr	r0, [pc, #304]	; (800be0c <CRI_Axes_Measure+0x1b0>)
 800bcdc:	f00f ffa6 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800bce0:	2252      	movs	r2, #82	; 0x52
 800bce2:	2144      	movs	r1, #68	; 0x44
 800bce4:	2056      	movs	r0, #86	; 0x56
 800bce6:	f010 f86b 	bl	801bdc0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800bcea:	463a      	mov	r2, r7
 800bcec:	4948      	ldr	r1, [pc, #288]	; (800be10 <CRI_Axes_Measure+0x1b4>)
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f013 f986 	bl	801f000 <siprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	2144      	movs	r1, #68	; 0x44
 800bcfa:	208a      	movs	r0, #138	; 0x8a
 800bcfc:	f010 f8b8 	bl	801be70 <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800bd00:	4632      	mov	r2, r6
 800bd02:	4943      	ldr	r1, [pc, #268]	; (800be10 <CRI_Axes_Measure+0x1b4>)
 800bd04:	4620      	mov	r0, r4
 800bd06:	f013 f97b 	bl	801f000 <siprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800bd0a:	2e00      	cmp	r6, #0
 800bd0c:	bfb4      	ite	lt
 800bd0e:	20d7      	movlt	r0, #215	; 0xd7
 800bd10:	20dc      	movge	r0, #220	; 0xdc
 800bd12:	2303      	movs	r3, #3
 800bd14:	4622      	mov	r2, r4
 800bd16:	2144      	movs	r1, #68	; 0x44
 800bd18:	f010 f8aa 	bl	801be70 <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800bd1c:	2252      	movs	r2, #82	; 0x52
 800bd1e:	2144      	movs	r1, #68	; 0x44
 800bd20:	20b7      	movs	r0, #183	; 0xb7
 800bd22:	f010 f84d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800bd26:	2239      	movs	r2, #57	; 0x39
 800bd28:	2144      	movs	r1, #68	; 0x44
 800bd2a:	20c6      	movs	r0, #198	; 0xc6
 800bd2c:	f010 f848 	bl	801bdc0 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800bd30:	b002      	add	sp, #8
 800bd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd36:	4d37      	ldr	r5, [pc, #220]	; (800be14 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bd38:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800bd3a:	bf14      	ite	ne
 800bd3c:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bd3e:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800bd40:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800bd44:	bf18      	it	ne
 800bd46:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800bd48:	f00f ff76 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800bd4c:	2063      	movs	r0, #99	; 0x63
 800bd4e:	f00f ff79 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800bd52:	482d      	ldr	r0, [pc, #180]	; (800be08 <CRI_Axes_Measure+0x1ac>)
 800bd54:	f00f ff6a 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800bd58:	2261      	movs	r2, #97	; 0x61
 800bd5a:	2110      	movs	r1, #16
 800bd5c:	2064      	movs	r0, #100	; 0x64
 800bd5e:	f010 f82f 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800bd62:	482a      	ldr	r0, [pc, #168]	; (800be0c <CRI_Axes_Measure+0x1b0>)
 800bd64:	f00f ff62 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800bd68:	2252      	movs	r2, #82	; 0x52
 800bd6a:	210e      	movs	r1, #14
 800bd6c:	2055      	movs	r0, #85	; 0x55
 800bd6e:	f010 f827 	bl	801bdc0 <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800bd72:	4642      	mov	r2, r8
 800bd74:	4926      	ldr	r1, [pc, #152]	; (800be10 <CRI_Axes_Measure+0x1b4>)
 800bd76:	4620      	mov	r0, r4
 800bd78:	f013 f942 	bl	801f000 <siprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	4622      	mov	r2, r4
 800bd80:	210e      	movs	r1, #14
 800bd82:	207d      	movs	r0, #125	; 0x7d
 800bd84:	f010 f874 	bl	801be70 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800bd88:	481f      	ldr	r0, [pc, #124]	; (800be08 <CRI_Axes_Measure+0x1ac>)
 800bd8a:	f00f ff4f 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800bd8e:	226c      	movs	r2, #108	; 0x6c
 800bd90:	2110      	movs	r1, #16
 800bd92:	20dd      	movs	r0, #221	; 0xdd
 800bd94:	f010 f814 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800bd98:	226c      	movs	r2, #108	; 0x6c
 800bd9a:	2110      	movs	r1, #16
 800bd9c:	20e6      	movs	r0, #230	; 0xe6
 800bd9e:	f010 f80f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800bda2:	2261      	movs	r2, #97	; 0x61
 800bda4:	2110      	movs	r1, #16
 800bda6:	20d2      	movs	r0, #210	; 0xd2
 800bda8:	f010 f80a 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800bdac:	4817      	ldr	r0, [pc, #92]	; (800be0c <CRI_Axes_Measure+0x1b0>)
 800bdae:	f00f ff3d 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800bdb2:	2252      	movs	r2, #82	; 0x52
 800bdb4:	210e      	movs	r1, #14
 800bdb6:	20c3      	movs	r0, #195	; 0xc3
 800bdb8:	f010 f802 	bl	801bdc0 <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800bdbc:	463a      	mov	r2, r7
 800bdbe:	4914      	ldr	r1, [pc, #80]	; (800be10 <CRI_Axes_Measure+0x1b4>)
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f013 f91d 	bl	801f000 <siprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	4622      	mov	r2, r4
 800bdca:	210e      	movs	r1, #14
 800bdcc:	20ff      	movs	r0, #255	; 0xff
 800bdce:	f010 f84f 	bl	801be70 <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800bdd2:	2252      	movs	r2, #82	; 0x52
 800bdd4:	210e      	movs	r1, #14
 800bdd6:	f240 1045 	movw	r0, #325	; 0x145
 800bdda:	f00f fff1 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800bdde:	2239      	movs	r2, #57	; 0x39
 800bde0:	210e      	movs	r1, #14
 800bde2:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800bde6:	f00f ffeb 	bl	801bdc0 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800bdea:	4632      	mov	r2, r6
 800bdec:	4908      	ldr	r1, [pc, #32]	; (800be10 <CRI_Axes_Measure+0x1b4>)
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f013 f906 	bl	801f000 <siprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	210e      	movs	r1, #14
 800bdfa:	f240 106d 	movw	r0, #365	; 0x16d
 800bdfe:	f010 f837 	bl	801be70 <TFT_DisplayString>
		TFT_direction = 0x00;
 800be02:	2300      	movs	r3, #0
 800be04:	702b      	strb	r3, [r5, #0]
}
 800be06:	e793      	b.n	800bd30 <CRI_Axes_Measure+0xd4>
 800be08:	200001c0 	.word	0x200001c0
 800be0c:	200001b0 	.word	0x200001b0
 800be10:	080215d9 	.word	0x080215d9
 800be14:	20004c40 	.word	0x20004c40

0800be18 <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800be18:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800be1a:	4604      	mov	r4, r0
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f040 811f 	bne.w	800c060 <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800be22:	488e      	ldr	r0, [pc, #568]	; (800c05c <CRI_Axes_Text+0x244>)
 800be24:	f00f ff02 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800be28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800be2c:	f00f ff04 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800be30:	2063      	movs	r0, #99	; 0x63
 800be32:	f00f ff07 	bl	801bc44 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800be36:	2252      	movs	r2, #82	; 0x52
 800be38:	f240 119f 	movw	r1, #415	; 0x19f
 800be3c:	2018      	movs	r0, #24
 800be3e:	f00f ffbf 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800be42:	2231      	movs	r2, #49	; 0x31
 800be44:	f240 119f 	movw	r1, #415	; 0x19f
 800be48:	201e      	movs	r0, #30
 800be4a:	f00f ffb9 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800be4e:	2252      	movs	r2, #82	; 0x52
 800be50:	f240 119f 	movw	r1, #415	; 0x19f
 800be54:	2028      	movs	r0, #40	; 0x28
 800be56:	f00f ffb3 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800be5a:	2232      	movs	r2, #50	; 0x32
 800be5c:	f240 119f 	movw	r1, #415	; 0x19f
 800be60:	202e      	movs	r0, #46	; 0x2e
 800be62:	f00f ffad 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800be66:	2252      	movs	r2, #82	; 0x52
 800be68:	f240 119f 	movw	r1, #415	; 0x19f
 800be6c:	2038      	movs	r0, #56	; 0x38
 800be6e:	f00f ffa7 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800be72:	2233      	movs	r2, #51	; 0x33
 800be74:	f240 119f 	movw	r1, #415	; 0x19f
 800be78:	203e      	movs	r0, #62	; 0x3e
 800be7a:	f00f ffa1 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800be7e:	2252      	movs	r2, #82	; 0x52
 800be80:	f240 119f 	movw	r1, #415	; 0x19f
 800be84:	2048      	movs	r0, #72	; 0x48
 800be86:	f00f ff9b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800be8a:	2234      	movs	r2, #52	; 0x34
 800be8c:	f240 119f 	movw	r1, #415	; 0x19f
 800be90:	204e      	movs	r0, #78	; 0x4e
 800be92:	f00f ff95 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800be96:	2252      	movs	r2, #82	; 0x52
 800be98:	f240 119f 	movw	r1, #415	; 0x19f
 800be9c:	2058      	movs	r0, #88	; 0x58
 800be9e:	f00f ff8f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800bea2:	2235      	movs	r2, #53	; 0x35
 800bea4:	f240 119f 	movw	r1, #415	; 0x19f
 800bea8:	205e      	movs	r0, #94	; 0x5e
 800beaa:	f00f ff89 	bl	801bdc0 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800beae:	2252      	movs	r2, #82	; 0x52
 800beb0:	f240 119f 	movw	r1, #415	; 0x19f
 800beb4:	2068      	movs	r0, #104	; 0x68
 800beb6:	f00f ff83 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800beba:	2236      	movs	r2, #54	; 0x36
 800bebc:	f240 119f 	movw	r1, #415	; 0x19f
 800bec0:	206e      	movs	r0, #110	; 0x6e
 800bec2:	f00f ff7d 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800bec6:	2252      	movs	r2, #82	; 0x52
 800bec8:	f240 119f 	movw	r1, #415	; 0x19f
 800becc:	2078      	movs	r0, #120	; 0x78
 800bece:	f00f ff77 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800bed2:	2237      	movs	r2, #55	; 0x37
 800bed4:	f240 119f 	movw	r1, #415	; 0x19f
 800bed8:	207e      	movs	r0, #126	; 0x7e
 800beda:	f00f ff71 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800bede:	2252      	movs	r2, #82	; 0x52
 800bee0:	f240 119f 	movw	r1, #415	; 0x19f
 800bee4:	2088      	movs	r0, #136	; 0x88
 800bee6:	f00f ff6b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800beea:	2238      	movs	r2, #56	; 0x38
 800beec:	f240 119f 	movw	r1, #415	; 0x19f
 800bef0:	208e      	movs	r0, #142	; 0x8e
 800bef2:	f00f ff65 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800bef6:	2252      	movs	r2, #82	; 0x52
 800bef8:	f240 119f 	movw	r1, #415	; 0x19f
 800befc:	2098      	movs	r0, #152	; 0x98
 800befe:	f00f ff5f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800bf02:	2239      	movs	r2, #57	; 0x39
 800bf04:	f240 119f 	movw	r1, #415	; 0x19f
 800bf08:	209e      	movs	r0, #158	; 0x9e
 800bf0a:	f00f ff59 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800bf0e:	2231      	movs	r2, #49	; 0x31
 800bf10:	f240 119f 	movw	r1, #415	; 0x19f
 800bf14:	20ad      	movs	r0, #173	; 0xad
 800bf16:	f00f ff53 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800bf1a:	2252      	movs	r2, #82	; 0x52
 800bf1c:	f240 119f 	movw	r1, #415	; 0x19f
 800bf20:	20a8      	movs	r0, #168	; 0xa8
 800bf22:	f00f ff4d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800bf26:	2230      	movs	r2, #48	; 0x30
 800bf28:	f240 119f 	movw	r1, #415	; 0x19f
 800bf2c:	20b1      	movs	r0, #177	; 0xb1
 800bf2e:	f00f ff47 	bl	801bdc0 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800bf32:	2231      	movs	r2, #49	; 0x31
 800bf34:	f240 119f 	movw	r1, #415	; 0x19f
 800bf38:	20bd      	movs	r0, #189	; 0xbd
 800bf3a:	f00f ff41 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800bf3e:	2252      	movs	r2, #82	; 0x52
 800bf40:	f240 119f 	movw	r1, #415	; 0x19f
 800bf44:	20b8      	movs	r0, #184	; 0xb8
 800bf46:	f00f ff3b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800bf4a:	2231      	movs	r2, #49	; 0x31
 800bf4c:	f240 119f 	movw	r1, #415	; 0x19f
 800bf50:	20c2      	movs	r0, #194	; 0xc2
 800bf52:	f00f ff35 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800bf56:	2231      	movs	r2, #49	; 0x31
 800bf58:	f240 119f 	movw	r1, #415	; 0x19f
 800bf5c:	20cd      	movs	r0, #205	; 0xcd
 800bf5e:	f00f ff2f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800bf62:	2252      	movs	r2, #82	; 0x52
 800bf64:	f240 119f 	movw	r1, #415	; 0x19f
 800bf68:	20c8      	movs	r0, #200	; 0xc8
 800bf6a:	f00f ff29 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800bf6e:	2232      	movs	r2, #50	; 0x32
 800bf70:	f240 119f 	movw	r1, #415	; 0x19f
 800bf74:	20d1      	movs	r0, #209	; 0xd1
 800bf76:	f00f ff23 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800bf7a:	2231      	movs	r2, #49	; 0x31
 800bf7c:	f240 119f 	movw	r1, #415	; 0x19f
 800bf80:	20dd      	movs	r0, #221	; 0xdd
 800bf82:	f00f ff1d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800bf86:	2252      	movs	r2, #82	; 0x52
 800bf88:	f240 119f 	movw	r1, #415	; 0x19f
 800bf8c:	20d8      	movs	r0, #216	; 0xd8
 800bf8e:	f00f ff17 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800bf92:	2233      	movs	r2, #51	; 0x33
 800bf94:	f240 119f 	movw	r1, #415	; 0x19f
 800bf98:	20e1      	movs	r0, #225	; 0xe1
 800bf9a:	f00f ff11 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800bf9e:	2231      	movs	r2, #49	; 0x31
 800bfa0:	f240 119f 	movw	r1, #415	; 0x19f
 800bfa4:	20ed      	movs	r0, #237	; 0xed
 800bfa6:	f00f ff0b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800bfaa:	2252      	movs	r2, #82	; 0x52
 800bfac:	f240 119f 	movw	r1, #415	; 0x19f
 800bfb0:	20e8      	movs	r0, #232	; 0xe8
 800bfb2:	f00f ff05 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800bfb6:	2234      	movs	r2, #52	; 0x34
 800bfb8:	f240 119f 	movw	r1, #415	; 0x19f
 800bfbc:	20f1      	movs	r0, #241	; 0xf1
 800bfbe:	f00f feff 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800bfc2:	2231      	movs	r2, #49	; 0x31
 800bfc4:	f240 119f 	movw	r1, #415	; 0x19f
 800bfc8:	20fd      	movs	r0, #253	; 0xfd
 800bfca:	f00f fef9 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800bfce:	2252      	movs	r2, #82	; 0x52
 800bfd0:	f240 119f 	movw	r1, #415	; 0x19f
 800bfd4:	20f8      	movs	r0, #248	; 0xf8
 800bfd6:	f00f fef3 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800bfda:	2235      	movs	r2, #53	; 0x35
 800bfdc:	f240 119f 	movw	r1, #415	; 0x19f
 800bfe0:	f240 1001 	movw	r0, #257	; 0x101
 800bfe4:	f00f feec 	bl	801bdc0 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800bfe8:	2230      	movs	r2, #48	; 0x30
 800bfea:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800bfee:	2005      	movs	r0, #5
 800bff0:	f00f fee6 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800bff4:	2232      	movs	r2, #50	; 0x32
 800bff6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800bffa:	2001      	movs	r0, #1
 800bffc:	f00f fee0 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800c000:	2235      	movs	r2, #53	; 0x35
 800c002:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800c006:	2007      	movs	r0, #7
 800c008:	f00f feda 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800c00c:	2235      	movs	r2, #53	; 0x35
 800c00e:	f240 1101 	movw	r1, #257	; 0x101
 800c012:	2001      	movs	r0, #1
 800c014:	f00f fed4 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800c018:	2230      	movs	r2, #48	; 0x30
 800c01a:	f240 1101 	movw	r1, #257	; 0x101
 800c01e:	2007      	movs	r0, #7
 800c020:	f00f fece 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800c024:	2237      	movs	r2, #55	; 0x37
 800c026:	21b5      	movs	r1, #181	; 0xb5
 800c028:	2001      	movs	r0, #1
 800c02a:	f00f fec9 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800c02e:	2235      	movs	r2, #53	; 0x35
 800c030:	21b5      	movs	r1, #181	; 0xb5
 800c032:	2007      	movs	r0, #7
 800c034:	f00f fec4 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800c038:	4620      	mov	r0, r4
 800c03a:	2231      	movs	r2, #49	; 0x31
 800c03c:	2169      	movs	r1, #105	; 0x69
 800c03e:	f00f febf 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800c042:	2230      	movs	r2, #48	; 0x30
 800c044:	2169      	movs	r1, #105	; 0x69
 800c046:	2004      	movs	r0, #4
 800c048:	f00f feba 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800c04c:	2230      	movs	r2, #48	; 0x30
 800c04e:	2169      	movs	r1, #105	; 0x69
 800c050:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800c052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800c056:	f00f beb3 	b.w	801bdc0 <TFT_DrawChar>
 800c05a:	bf00      	nop
 800c05c:	20000210 	.word	0x20000210
 800c060:	4d98      	ldr	r5, [pc, #608]	; (800c2c4 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800c062:	2801      	cmp	r0, #1
 800c064:	bf0c      	ite	eq
 800c066:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800c068:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800c06a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800c06e:	bf18      	it	ne
 800c070:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800c072:	f00f fde1 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800c076:	2063      	movs	r0, #99	; 0x63
 800c078:	f00f fde4 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800c07c:	4892      	ldr	r0, [pc, #584]	; (800c2c8 <CRI_Axes_Text+0x4b0>)
 800c07e:	f00f fdd5 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800c082:	2252      	movs	r2, #82	; 0x52
 800c084:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c088:	2057      	movs	r0, #87	; 0x57
 800c08a:	f00f fe99 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800c08e:	2231      	movs	r2, #49	; 0x31
 800c090:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c094:	205d      	movs	r0, #93	; 0x5d
 800c096:	f00f fe93 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800c09a:	2252      	movs	r2, #82	; 0x52
 800c09c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0a0:	206d      	movs	r0, #109	; 0x6d
 800c0a2:	f00f fe8d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800c0a6:	2232      	movs	r2, #50	; 0x32
 800c0a8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0ac:	2073      	movs	r0, #115	; 0x73
 800c0ae:	f00f fe87 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800c0b2:	2252      	movs	r2, #82	; 0x52
 800c0b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0b8:	2083      	movs	r0, #131	; 0x83
 800c0ba:	f00f fe81 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800c0be:	2233      	movs	r2, #51	; 0x33
 800c0c0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0c4:	2089      	movs	r0, #137	; 0x89
 800c0c6:	f00f fe7b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800c0ca:	2252      	movs	r2, #82	; 0x52
 800c0cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0d0:	2099      	movs	r0, #153	; 0x99
 800c0d2:	f00f fe75 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800c0d6:	2234      	movs	r2, #52	; 0x34
 800c0d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0dc:	209f      	movs	r0, #159	; 0x9f
 800c0de:	f00f fe6f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800c0e2:	2252      	movs	r2, #82	; 0x52
 800c0e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0e8:	20af      	movs	r0, #175	; 0xaf
 800c0ea:	f00f fe69 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800c0ee:	2235      	movs	r2, #53	; 0x35
 800c0f0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c0f4:	20b5      	movs	r0, #181	; 0xb5
 800c0f6:	f00f fe63 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800c0fa:	2252      	movs	r2, #82	; 0x52
 800c0fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c100:	20c5      	movs	r0, #197	; 0xc5
 800c102:	f00f fe5d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800c106:	2236      	movs	r2, #54	; 0x36
 800c108:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c10c:	20cb      	movs	r0, #203	; 0xcb
 800c10e:	f00f fe57 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800c112:	2252      	movs	r2, #82	; 0x52
 800c114:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c118:	20db      	movs	r0, #219	; 0xdb
 800c11a:	f00f fe51 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800c11e:	2237      	movs	r2, #55	; 0x37
 800c120:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c124:	20e1      	movs	r0, #225	; 0xe1
 800c126:	f00f fe4b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800c12a:	2252      	movs	r2, #82	; 0x52
 800c12c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c130:	20f1      	movs	r0, #241	; 0xf1
 800c132:	f00f fe45 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800c136:	2238      	movs	r2, #56	; 0x38
 800c138:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c13c:	20f7      	movs	r0, #247	; 0xf7
 800c13e:	f00f fe3f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800c142:	2252      	movs	r2, #82	; 0x52
 800c144:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c148:	f240 1007 	movw	r0, #263	; 0x107
 800c14c:	f00f fe38 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800c150:	2239      	movs	r2, #57	; 0x39
 800c152:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c156:	f240 100d 	movw	r0, #269	; 0x10d
 800c15a:	f00f fe31 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800c15e:	2231      	movs	r2, #49	; 0x31
 800c160:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c164:	f44f 7091 	mov.w	r0, #290	; 0x122
 800c168:	f00f fe2a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800c16c:	2252      	movs	r2, #82	; 0x52
 800c16e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c172:	f240 101d 	movw	r0, #285	; 0x11d
 800c176:	f00f fe23 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800c17a:	2230      	movs	r2, #48	; 0x30
 800c17c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c180:	f44f 7093 	mov.w	r0, #294	; 0x126
 800c184:	f00f fe1c 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800c188:	2231      	movs	r2, #49	; 0x31
 800c18a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c18e:	f44f 709c 	mov.w	r0, #312	; 0x138
 800c192:	f00f fe15 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800c196:	2252      	movs	r2, #82	; 0x52
 800c198:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c19c:	f240 1033 	movw	r0, #307	; 0x133
 800c1a0:	f00f fe0e 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800c1a4:	2231      	movs	r2, #49	; 0x31
 800c1a6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c1aa:	f240 103d 	movw	r0, #317	; 0x13d
 800c1ae:	f00f fe07 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800c1b2:	2231      	movs	r2, #49	; 0x31
 800c1b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c1b8:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800c1bc:	f00f fe00 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800c1c0:	2252      	movs	r2, #82	; 0x52
 800c1c2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c1c6:	f240 1049 	movw	r0, #329	; 0x149
 800c1ca:	f00f fdf9 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800c1ce:	2232      	movs	r2, #50	; 0x32
 800c1d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c1d4:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800c1d8:	f00f fdf2 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800c1dc:	2231      	movs	r2, #49	; 0x31
 800c1de:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c1e2:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800c1e6:	f00f fdeb 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800c1ea:	2252      	movs	r2, #82	; 0x52
 800c1ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c1f0:	f240 105f 	movw	r0, #351	; 0x15f
 800c1f4:	f00f fde4 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800c1f8:	2233      	movs	r2, #51	; 0x33
 800c1fa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c1fe:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800c202:	f00f fddd 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800c206:	2231      	movs	r2, #49	; 0x31
 800c208:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c20c:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800c210:	f00f fdd6 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800c214:	2252      	movs	r2, #82	; 0x52
 800c216:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c21a:	f240 1075 	movw	r0, #373	; 0x175
 800c21e:	f00f fdcf 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800c222:	2234      	movs	r2, #52	; 0x34
 800c224:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c228:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800c22c:	f00f fdc8 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800c230:	2231      	movs	r2, #49	; 0x31
 800c232:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c236:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c23a:	f00f fdc1 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800c23e:	2252      	movs	r2, #82	; 0x52
 800c240:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c244:	f240 108b 	movw	r0, #395	; 0x18b
 800c248:	f00f fdba 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800c24c:	2235      	movs	r2, #53	; 0x35
 800c24e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c252:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800c256:	f00f fdb3 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800c25a:	2230      	movs	r2, #48	; 0x30
 800c25c:	21fa      	movs	r1, #250	; 0xfa
 800c25e:	2041      	movs	r0, #65	; 0x41
 800c260:	f00f fdae 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800c264:	2232      	movs	r2, #50	; 0x32
 800c266:	21ca      	movs	r1, #202	; 0xca
 800c268:	203a      	movs	r0, #58	; 0x3a
 800c26a:	f00f fda9 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800c26e:	2235      	movs	r2, #53	; 0x35
 800c270:	21ca      	movs	r1, #202	; 0xca
 800c272:	2041      	movs	r0, #65	; 0x41
 800c274:	f00f fda4 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800c278:	2235      	movs	r2, #53	; 0x35
 800c27a:	2195      	movs	r1, #149	; 0x95
 800c27c:	203a      	movs	r0, #58	; 0x3a
 800c27e:	f00f fd9f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800c282:	2230      	movs	r2, #48	; 0x30
 800c284:	2195      	movs	r1, #149	; 0x95
 800c286:	2041      	movs	r0, #65	; 0x41
 800c288:	f00f fd9a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800c28c:	2237      	movs	r2, #55	; 0x37
 800c28e:	2160      	movs	r1, #96	; 0x60
 800c290:	203a      	movs	r0, #58	; 0x3a
 800c292:	f00f fd95 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800c296:	2235      	movs	r2, #53	; 0x35
 800c298:	2160      	movs	r1, #96	; 0x60
 800c29a:	2041      	movs	r0, #65	; 0x41
 800c29c:	f00f fd90 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800c2a0:	2231      	movs	r2, #49	; 0x31
 800c2a2:	212b      	movs	r1, #43	; 0x2b
 800c2a4:	2039      	movs	r0, #57	; 0x39
 800c2a6:	f00f fd8b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800c2aa:	2230      	movs	r2, #48	; 0x30
 800c2ac:	212b      	movs	r1, #43	; 0x2b
 800c2ae:	203e      	movs	r0, #62	; 0x3e
 800c2b0:	f00f fd86 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800c2b4:	2230      	movs	r2, #48	; 0x30
 800c2b6:	212b      	movs	r1, #43	; 0x2b
 800c2b8:	2043      	movs	r0, #67	; 0x43
 800c2ba:	f00f fd81 	bl	801bdc0 <TFT_DrawChar>
		TFT_direction = 0x00;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	702b      	strb	r3, [r5, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20004c40 	.word	0x20004c40
 800c2c8:	20000210 	.word	0x20000210

0800c2cc <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800c2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d0:	ed2d 8b02 	vpush	{d8}
 800c2d4:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800c2d6:	ae06      	add	r6, sp, #24
 800c2d8:	2300      	movs	r3, #0
{
 800c2da:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800c2dc:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800c2e0:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	f040 82de 	bne.w	800c8a4 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800c2e8:	f991 3000 	ldrsb.w	r3, [r1]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f2c0 826f 	blt.w	800c7d0 <CRI_chart+0x504>
 800c2f2:	2b64      	cmp	r3, #100	; 0x64
 800c2f4:	f300 826f 	bgt.w	800c7d6 <CRI_chart+0x50a>
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800c6dc <CRI_chart+0x410>
 800c300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c304:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c308:	eddf 7af5 	vldr	s15, [pc, #980]	; 800c6e0 <CRI_chart+0x414>
 800c30c:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800c6e4 <CRI_chart+0x418>
 800c310:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c318:	edcd 7a03 	vstr	s15, [sp, #12]
 800c31c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c320:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	2222      	movs	r2, #34	; 0x22
 800c328:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c32c:	2018      	movs	r0, #24
 800c32e:	f00f fa54 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800c332:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f2c0 8250 	blt.w	800c7dc <CRI_chart+0x510>
 800c33c:	2b64      	cmp	r3, #100	; 0x64
 800c33e:	f300 8250 	bgt.w	800c7e2 <CRI_chart+0x516>
 800c342:	ee07 3a90 	vmov	s15, r3
 800c346:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800c6dc <CRI_chart+0x410>
 800c34a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c34e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c352:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800c6e0 <CRI_chart+0x414>
 800c356:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800c6e4 <CRI_chart+0x418>
 800c35a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c362:	edcd 7a03 	vstr	s15, [sp, #12]
 800c366:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c36a:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	2232      	movs	r2, #50	; 0x32
 800c372:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c376:	2028      	movs	r0, #40	; 0x28
 800c378:	f00f fa2f 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800c37c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800c380:	2b00      	cmp	r3, #0
 800c382:	f2c0 8231 	blt.w	800c7e8 <CRI_chart+0x51c>
 800c386:	2b64      	cmp	r3, #100	; 0x64
 800c388:	f300 8231 	bgt.w	800c7ee <CRI_chart+0x522>
 800c38c:	ee07 3a90 	vmov	s15, r3
 800c390:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800c6dc <CRI_chart+0x410>
 800c394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c398:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c39c:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800c6e0 <CRI_chart+0x414>
 800c3a0:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800c6e4 <CRI_chart+0x418>
 800c3a4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ac:	edcd 7a03 	vstr	s15, [sp, #12]
 800c3b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c3b4:	f64a 5388 	movw	r3, #44424	; 0xad88
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	2242      	movs	r2, #66	; 0x42
 800c3bc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c3c0:	2038      	movs	r0, #56	; 0x38
 800c3c2:	f00f fa0a 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800c3c6:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f2c0 8212 	blt.w	800c7f4 <CRI_chart+0x528>
 800c3d0:	2b64      	cmp	r3, #100	; 0x64
 800c3d2:	f300 8212 	bgt.w	800c7fa <CRI_chart+0x52e>
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800c6dc <CRI_chart+0x410>
 800c3de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c3e6:	eddf 7abe 	vldr	s15, [pc, #760]	; 800c6e0 <CRI_chart+0x414>
 800c3ea:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800c6e4 <CRI_chart+0x418>
 800c3ee:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c3f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3f6:	edcd 7a03 	vstr	s15, [sp, #12]
 800c3fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c3fe:	f241 430f 	movw	r3, #5135	; 0x140f
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	2252      	movs	r2, #82	; 0x52
 800c406:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c40a:	2048      	movs	r0, #72	; 0x48
 800c40c:	f00f f9e5 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800c410:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	f2c0 81f3 	blt.w	800c800 <CRI_chart+0x534>
 800c41a:	2b64      	cmp	r3, #100	; 0x64
 800c41c:	f300 81f3 	bgt.w	800c806 <CRI_chart+0x53a>
 800c420:	ee07 3a90 	vmov	s15, r3
 800c424:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800c6dc <CRI_chart+0x410>
 800c428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c42c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c430:	eddf 7aab 	vldr	s15, [pc, #684]	; 800c6e0 <CRI_chart+0x414>
 800c434:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c6e4 <CRI_chart+0x418>
 800c438:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c440:	edcd 7a03 	vstr	s15, [sp, #12]
 800c444:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c448:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	2262      	movs	r2, #98	; 0x62
 800c450:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c454:	2058      	movs	r0, #88	; 0x58
 800c456:	f00f f9c0 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800c45a:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f2c0 81d4 	blt.w	800c80c <CRI_chart+0x540>
 800c464:	2b64      	cmp	r3, #100	; 0x64
 800c466:	f300 81d4 	bgt.w	800c812 <CRI_chart+0x546>
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800c6dc <CRI_chart+0x410>
 800c472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c476:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c47a:	eddf 7a99 	vldr	s15, [pc, #612]	; 800c6e0 <CRI_chart+0x414>
 800c47e:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800c6e4 <CRI_chart+0x418>
 800c482:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c48a:	edcd 7a03 	vstr	s15, [sp, #12]
 800c48e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c492:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	2272      	movs	r2, #114	; 0x72
 800c49a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c49e:	2068      	movs	r0, #104	; 0x68
 800c4a0:	f00f f99b 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800c4a4:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f2c0 81b5 	blt.w	800c818 <CRI_chart+0x54c>
 800c4ae:	2b64      	cmp	r3, #100	; 0x64
 800c4b0:	f300 81b5 	bgt.w	800c81e <CRI_chart+0x552>
 800c4b4:	ee07 3a90 	vmov	s15, r3
 800c4b8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c6dc <CRI_chart+0x410>
 800c4bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c4c4:	eddf 7a86 	vldr	s15, [pc, #536]	; 800c6e0 <CRI_chart+0x414>
 800c4c8:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800c6e4 <CRI_chart+0x418>
 800c4cc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4d4:	edcd 7a03 	vstr	s15, [sp, #12]
 800c4d8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c4dc:	f248 4357 	movw	r3, #33879	; 0x8457
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	2282      	movs	r2, #130	; 0x82
 800c4e4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c4e8:	2078      	movs	r0, #120	; 0x78
 800c4ea:	f00f f976 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800c4ee:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f2c0 8196 	blt.w	800c824 <CRI_chart+0x558>
 800c4f8:	2b64      	cmp	r3, #100	; 0x64
 800c4fa:	f300 8196 	bgt.w	800c82a <CRI_chart+0x55e>
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800c6dc <CRI_chart+0x410>
 800c506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c50a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c50e:	eddf 7a74 	vldr	s15, [pc, #464]	; 800c6e0 <CRI_chart+0x414>
 800c512:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800c6e4 <CRI_chart+0x418>
 800c516:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c51a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c51e:	edcd 7a03 	vstr	s15, [sp, #12]
 800c522:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c526:	f24a 4377 	movw	r3, #42103	; 0xa477
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	2292      	movs	r2, #146	; 0x92
 800c52e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c532:	2088      	movs	r0, #136	; 0x88
 800c534:	f00f f951 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800c538:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f2c0 8177 	blt.w	800c830 <CRI_chart+0x564>
 800c542:	2b64      	cmp	r3, #100	; 0x64
 800c544:	f300 8177 	bgt.w	800c836 <CRI_chart+0x56a>
 800c548:	ee07 3a90 	vmov	s15, r3
 800c54c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800c6dc <CRI_chart+0x410>
 800c550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c554:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c558:	eddf 7a61 	vldr	s15, [pc, #388]	; 800c6e0 <CRI_chart+0x414>
 800c55c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800c6e4 <CRI_chart+0x418>
 800c560:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c568:	edcd 7a03 	vstr	s15, [sp, #12]
 800c56c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c570:	f24e 1365 	movw	r3, #57701	; 0xe165
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	22a2      	movs	r2, #162	; 0xa2
 800c578:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c57c:	2098      	movs	r0, #152	; 0x98
 800c57e:	f00f f92c 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800c582:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800c586:	2b00      	cmp	r3, #0
 800c588:	f2c0 8158 	blt.w	800c83c <CRI_chart+0x570>
 800c58c:	2b64      	cmp	r3, #100	; 0x64
 800c58e:	f300 8158 	bgt.w	800c842 <CRI_chart+0x576>
 800c592:	ee07 3a90 	vmov	s15, r3
 800c596:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800c6dc <CRI_chart+0x410>
 800c59a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c59e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c5a2:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800c6e0 <CRI_chart+0x414>
 800c5a6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800c6e4 <CRI_chart+0x418>
 800c5aa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c5ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5b2:	edcd 7a03 	vstr	s15, [sp, #12]
 800c5b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c5ba:	f24e 7323 	movw	r3, #59171	; 0xe723
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	22b2      	movs	r2, #178	; 0xb2
 800c5c2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c5c6:	20a8      	movs	r0, #168	; 0xa8
 800c5c8:	f00f f907 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800c5cc:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f2c0 8139 	blt.w	800c848 <CRI_chart+0x57c>
 800c5d6:	2b64      	cmp	r3, #100	; 0x64
 800c5d8:	f300 8139 	bgt.w	800c84e <CRI_chart+0x582>
 800c5dc:	ee07 3a90 	vmov	s15, r3
 800c5e0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800c6dc <CRI_chart+0x410>
 800c5e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c5ec:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800c6e0 <CRI_chart+0x414>
 800c5f0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800c6e4 <CRI_chart+0x418>
 800c5f4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c5f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5fc:	edcd 7a03 	vstr	s15, [sp, #12]
 800c600:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c604:	f241 4327 	movw	r3, #5159	; 0x1427
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	22c2      	movs	r2, #194	; 0xc2
 800c60c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c610:	20b8      	movs	r0, #184	; 0xb8
 800c612:	f00f f8e2 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800c616:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f2c0 811a 	blt.w	800c854 <CRI_chart+0x588>
 800c620:	2b64      	cmp	r3, #100	; 0x64
 800c622:	f300 811a 	bgt.w	800c85a <CRI_chart+0x58e>
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800c6dc <CRI_chart+0x410>
 800c62e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c632:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c636:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c6e0 <CRI_chart+0x414>
 800c63a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c6e4 <CRI_chart+0x418>
 800c63e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c646:	edcd 7a03 	vstr	s15, [sp, #12]
 800c64a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c64e:	f242 138d 	movw	r3, #8589	; 0x218d
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	22d2      	movs	r2, #210	; 0xd2
 800c656:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c65a:	20c8      	movs	r0, #200	; 0xc8
 800c65c:	f00f f8bd 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800c660:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f2c0 80fb 	blt.w	800c860 <CRI_chart+0x594>
 800c66a:	2b64      	cmp	r3, #100	; 0x64
 800c66c:	f300 80fb 	bgt.w	800c866 <CRI_chart+0x59a>
 800c670:	ee07 3a90 	vmov	s15, r3
 800c674:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c6dc <CRI_chart+0x410>
 800c678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c67c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c680:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c6e0 <CRI_chart+0x414>
 800c684:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c6e4 <CRI_chart+0x418>
 800c688:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c68c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c690:	edcd 7a03 	vstr	s15, [sp, #12]
 800c694:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c698:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	22e2      	movs	r2, #226	; 0xe2
 800c6a0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c6a4:	20d8      	movs	r0, #216	; 0xd8
 800c6a6:	f00f f898 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800c6aa:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f2c0 80dc 	blt.w	800c86c <CRI_chart+0x5a0>
 800c6b4:	2b64      	cmp	r3, #100	; 0x64
 800c6b6:	f300 80dc 	bgt.w	800c872 <CRI_chart+0x5a6>
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800c6dc <CRI_chart+0x410>
 800c6c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c6ca:	eddf 7a05 	vldr	s15, [pc, #20]	; 800c6e0 <CRI_chart+0x414>
 800c6ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c6e4 <CRI_chart+0x418>
 800c6d2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c6d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6da:	e00b      	b.n	800c6f4 <CRI_chart+0x428>
 800c6dc:	42c80000 	.word	0x42c80000
 800c6e0:	43cd0000 	.word	0x43cd0000
 800c6e4:	43988000 	.word	0x43988000
 800c6e8:	42c80000 	.word	0x42c80000
 800c6ec:	43cd0000 	.word	0x43cd0000
 800c6f0:	43988000 	.word	0x43988000
 800c6f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800c6f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c6fc:	f641 3346 	movw	r3, #6982	; 0x1b46
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	22f2      	movs	r2, #242	; 0xf2
 800c704:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c708:	20e8      	movs	r0, #232	; 0xe8
 800c70a:	f00f f866 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800c70e:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800c712:	2b00      	cmp	r3, #0
 800c714:	f2c0 80b0 	blt.w	800c878 <CRI_chart+0x5ac>
 800c718:	2b64      	cmp	r3, #100	; 0x64
 800c71a:	f300 80b0 	bgt.w	800c87e <CRI_chart+0x5b2>
 800c71e:	ee07 3a90 	vmov	s15, r3
 800c722:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800c6e8 <CRI_chart+0x41c>
 800c726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c72a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c72e:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800c6ec <CRI_chart+0x420>
 800c732:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800c6f0 <CRI_chart+0x424>
 800c736:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c73e:	edcd 7a03 	vstr	s15, [sp, #12]
 800c742:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800c746:	4f52      	ldr	r7, [pc, #328]	; (800c890 <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800c748:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800c894 <CRI_chart+0x5c8>
 800c74c:	eddf 8a52 	vldr	s17, [pc, #328]	; 800c898 <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800c750:	f24f 6311 	movw	r3, #62993	; 0xf611
 800c754:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	20f8      	movs	r0, #248	; 0xf8
 800c75c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c760:	f00f f83b 	bl	801b7da <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800c764:	484d      	ldr	r0, [pc, #308]	; (800c89c <CRI_chart+0x5d0>)
 800c766:	f00f fa61 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800c76a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c76e:	f00f fa63 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800c772:	2063      	movs	r0, #99	; 0x63
 800c774:	f00f fa66 	bl	801bc44 <TFT_SetBackColor>
 800c778:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800c77a:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800c77e:	4639      	mov	r1, r7
 800c780:	4630      	mov	r0, r6
 800c782:	f012 fc3d 	bl	801f000 <siprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800c786:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	db7a      	blt.n	800c884 <CRI_chart+0x5b8>
 800c78e:	2b64      	cmp	r3, #100	; 0x64
 800c790:	dc7b      	bgt.n	800c88a <CRI_chart+0x5be>
 800c792:	ee07 3a90 	vmov	s15, r3
 800c796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c79a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c79e:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c8a0 <CRI_chart+0x5d4>
 800c7a2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c7a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7aa:	edcd 7a03 	vstr	s15, [sp, #12]
 800c7ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	3410      	adds	r4, #16
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	b2a4      	uxth	r4, r4
 800c7bc:	f00f fb58 	bl	801be70 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800c7c0:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800c7c4:	d1d9      	bne.n	800c77a <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800c7c6:	b006      	add	sp, #24
 800c7c8:	ecbd 8b02 	vpop	{d8}
 800c7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800c7d0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c7d4:	e5a4      	b.n	800c320 <CRI_chart+0x54>
 800c7d6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c7da:	e5a1      	b.n	800c320 <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800c7dc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c7e0:	e5c3      	b.n	800c36a <CRI_chart+0x9e>
 800c7e2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c7e6:	e5c0      	b.n	800c36a <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800c7e8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c7ec:	e5e2      	b.n	800c3b4 <CRI_chart+0xe8>
 800c7ee:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c7f2:	e5df      	b.n	800c3b4 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800c7f4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c7f8:	e601      	b.n	800c3fe <CRI_chart+0x132>
 800c7fa:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c7fe:	e5fe      	b.n	800c3fe <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800c800:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c804:	e620      	b.n	800c448 <CRI_chart+0x17c>
 800c806:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c80a:	e61d      	b.n	800c448 <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800c80c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c810:	e63f      	b.n	800c492 <CRI_chart+0x1c6>
 800c812:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c816:	e63c      	b.n	800c492 <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800c818:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c81c:	e65e      	b.n	800c4dc <CRI_chart+0x210>
 800c81e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c822:	e65b      	b.n	800c4dc <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800c824:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c828:	e67d      	b.n	800c526 <CRI_chart+0x25a>
 800c82a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c82e:	e67a      	b.n	800c526 <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800c830:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c834:	e69c      	b.n	800c570 <CRI_chart+0x2a4>
 800c836:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c83a:	e699      	b.n	800c570 <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800c83c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c840:	e6bb      	b.n	800c5ba <CRI_chart+0x2ee>
 800c842:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c846:	e6b8      	b.n	800c5ba <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800c848:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c84c:	e6da      	b.n	800c604 <CRI_chart+0x338>
 800c84e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c852:	e6d7      	b.n	800c604 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800c854:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c858:	e6f9      	b.n	800c64e <CRI_chart+0x382>
 800c85a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c85e:	e6f6      	b.n	800c64e <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800c860:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c864:	e718      	b.n	800c698 <CRI_chart+0x3cc>
 800c866:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c86a:	e715      	b.n	800c698 <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800c86c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c870:	e744      	b.n	800c6fc <CRI_chart+0x430>
 800c872:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c876:	e741      	b.n	800c6fc <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800c878:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c87c:	e763      	b.n	800c746 <CRI_chart+0x47a>
 800c87e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c882:	e760      	b.n	800c746 <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800c884:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c888:	e793      	b.n	800c7b2 <CRI_chart+0x4e6>
 800c88a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c88e:	e790      	b.n	800c7b2 <CRI_chart+0x4e6>
 800c890:	080215d9 	.word	0x080215d9
 800c894:	42c80000 	.word	0x42c80000
 800c898:	43988000 	.word	0x43988000
 800c89c:	20000210 	.word	0x20000210
 800c8a0:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800c8a4:	2801      	cmp	r0, #1
 800c8a6:	4fed      	ldr	r7, [pc, #948]	; (800cc5c <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800c8a8:	bf16      	itet	ne
 800c8aa:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800c8ac:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800c8ae:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800c8b0:	f991 3000 	ldrsb.w	r3, [r1]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f2c0 8260 	blt.w	800cd7a <CRI_chart+0xaae>
 800c8ba:	2b64      	cmp	r3, #100	; 0x64
 800c8bc:	f300 825f 	bgt.w	800cd7e <CRI_chart+0xab2>
 800c8c0:	ee07 3a90 	vmov	s15, r3
 800c8c4:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800cc60 <CRI_chart+0x994>
 800c8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c8d0:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800cc64 <CRI_chart+0x998>
 800c8d4:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800cc68 <CRI_chart+0x99c>
 800c8d8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c8dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8e0:	edcd 7a03 	vstr	s15, [sp, #12]
 800c8e4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c8e8:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	2262      	movs	r2, #98	; 0x62
 800c8f0:	23fc      	movs	r3, #252	; 0xfc
 800c8f2:	2057      	movs	r0, #87	; 0x57
 800c8f4:	f00e ff71 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800c8f8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f2c0 8240 	blt.w	800cd82 <CRI_chart+0xab6>
 800c902:	2b64      	cmp	r3, #100	; 0x64
 800c904:	f300 823f 	bgt.w	800cd86 <CRI_chart+0xaba>
 800c908:	ee07 3a90 	vmov	s15, r3
 800c90c:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800cc60 <CRI_chart+0x994>
 800c910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c914:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c918:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800cc64 <CRI_chart+0x998>
 800c91c:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800cc68 <CRI_chart+0x99c>
 800c920:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c928:	edcd 7a03 	vstr	s15, [sp, #12]
 800c92c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c930:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	2278      	movs	r2, #120	; 0x78
 800c938:	23fc      	movs	r3, #252	; 0xfc
 800c93a:	206d      	movs	r0, #109	; 0x6d
 800c93c:	f00e ff4d 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800c940:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800c944:	2b00      	cmp	r3, #0
 800c946:	f2c0 8220 	blt.w	800cd8a <CRI_chart+0xabe>
 800c94a:	2b64      	cmp	r3, #100	; 0x64
 800c94c:	f300 821f 	bgt.w	800cd8e <CRI_chart+0xac2>
 800c950:	ee07 3a90 	vmov	s15, r3
 800c954:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800cc60 <CRI_chart+0x994>
 800c958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c95c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c960:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800cc64 <CRI_chart+0x998>
 800c964:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800cc68 <CRI_chart+0x99c>
 800c968:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c96c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c970:	edcd 7a03 	vstr	s15, [sp, #12]
 800c974:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c978:	f64a 5388 	movw	r3, #44424	; 0xad88
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	228e      	movs	r2, #142	; 0x8e
 800c980:	23fc      	movs	r3, #252	; 0xfc
 800c982:	2083      	movs	r0, #131	; 0x83
 800c984:	f00e ff29 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800c988:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f2c0 8200 	blt.w	800cd92 <CRI_chart+0xac6>
 800c992:	2b64      	cmp	r3, #100	; 0x64
 800c994:	f300 81ff 	bgt.w	800cd96 <CRI_chart+0xaca>
 800c998:	ee07 3a90 	vmov	s15, r3
 800c99c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800cc60 <CRI_chart+0x994>
 800c9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c9a8:	eddf 7aae 	vldr	s15, [pc, #696]	; 800cc64 <CRI_chart+0x998>
 800c9ac:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800cc68 <CRI_chart+0x99c>
 800c9b0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c9b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9b8:	edcd 7a03 	vstr	s15, [sp, #12]
 800c9bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c9c0:	f241 430f 	movw	r3, #5135	; 0x140f
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	22a4      	movs	r2, #164	; 0xa4
 800c9c8:	23fc      	movs	r3, #252	; 0xfc
 800c9ca:	2099      	movs	r0, #153	; 0x99
 800c9cc:	f00e ff05 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800c9d0:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f2c0 81e0 	blt.w	800cd9a <CRI_chart+0xace>
 800c9da:	2b64      	cmp	r3, #100	; 0x64
 800c9dc:	f300 81df 	bgt.w	800cd9e <CRI_chart+0xad2>
 800c9e0:	ee07 3a90 	vmov	s15, r3
 800c9e4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800cc60 <CRI_chart+0x994>
 800c9e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c9f0:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800cc64 <CRI_chart+0x998>
 800c9f4:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800cc68 <CRI_chart+0x99c>
 800c9f8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c9fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca00:	edcd 7a03 	vstr	s15, [sp, #12]
 800ca04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ca08:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	22ba      	movs	r2, #186	; 0xba
 800ca10:	23fc      	movs	r3, #252	; 0xfc
 800ca12:	20af      	movs	r0, #175	; 0xaf
 800ca14:	f00e fee1 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800ca18:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f2c0 81c0 	blt.w	800cda2 <CRI_chart+0xad6>
 800ca22:	2b64      	cmp	r3, #100	; 0x64
 800ca24:	f300 81bf 	bgt.w	800cda6 <CRI_chart+0xada>
 800ca28:	ee07 3a90 	vmov	s15, r3
 800ca2c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800cc60 <CRI_chart+0x994>
 800ca30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ca38:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800cc64 <CRI_chart+0x998>
 800ca3c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cc68 <CRI_chart+0x99c>
 800ca40:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ca44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca48:	edcd 7a03 	vstr	s15, [sp, #12]
 800ca4c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ca50:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	22d0      	movs	r2, #208	; 0xd0
 800ca58:	23fc      	movs	r3, #252	; 0xfc
 800ca5a:	20c5      	movs	r0, #197	; 0xc5
 800ca5c:	f00e febd 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800ca60:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f2c0 81a0 	blt.w	800cdaa <CRI_chart+0xade>
 800ca6a:	2b64      	cmp	r3, #100	; 0x64
 800ca6c:	f300 819f 	bgt.w	800cdae <CRI_chart+0xae2>
 800ca70:	ee07 3a90 	vmov	s15, r3
 800ca74:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800cc60 <CRI_chart+0x994>
 800ca78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ca80:	eddf 7a78 	vldr	s15, [pc, #480]	; 800cc64 <CRI_chart+0x998>
 800ca84:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800cc68 <CRI_chart+0x99c>
 800ca88:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ca8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca90:	edcd 7a03 	vstr	s15, [sp, #12]
 800ca94:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ca98:	f248 4357 	movw	r3, #33879	; 0x8457
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	22e6      	movs	r2, #230	; 0xe6
 800caa0:	23fc      	movs	r3, #252	; 0xfc
 800caa2:	20db      	movs	r0, #219	; 0xdb
 800caa4:	f00e fe99 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800caa8:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f2c0 8180 	blt.w	800cdb2 <CRI_chart+0xae6>
 800cab2:	2b64      	cmp	r3, #100	; 0x64
 800cab4:	f300 817f 	bgt.w	800cdb6 <CRI_chart+0xaea>
 800cab8:	ee07 3a90 	vmov	s15, r3
 800cabc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800cc60 <CRI_chart+0x994>
 800cac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cac4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cac8:	eddf 7a66 	vldr	s15, [pc, #408]	; 800cc64 <CRI_chart+0x998>
 800cacc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800cc68 <CRI_chart+0x99c>
 800cad0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cad8:	edcd 7a03 	vstr	s15, [sp, #12]
 800cadc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800cae0:	f24a 4377 	movw	r3, #42103	; 0xa477
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	23fc      	movs	r3, #252	; 0xfc
 800cae8:	461a      	mov	r2, r3
 800caea:	20f1      	movs	r0, #241	; 0xf1
 800caec:	f00e fe75 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800caf0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f2c0 8160 	blt.w	800cdba <CRI_chart+0xaee>
 800cafa:	2b64      	cmp	r3, #100	; 0x64
 800cafc:	f300 815f 	bgt.w	800cdbe <CRI_chart+0xaf2>
 800cb00:	ee07 3a90 	vmov	s15, r3
 800cb04:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800cc60 <CRI_chart+0x994>
 800cb08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cb10:	eddf 7a54 	vldr	s15, [pc, #336]	; 800cc64 <CRI_chart+0x998>
 800cb14:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800cc68 <CRI_chart+0x99c>
 800cb18:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cb1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb20:	edcd 7a03 	vstr	s15, [sp, #12]
 800cb24:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800cb28:	f24e 1365 	movw	r3, #57701	; 0xe165
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cb32:	23fc      	movs	r3, #252	; 0xfc
 800cb34:	f240 1007 	movw	r0, #263	; 0x107
 800cb38:	f00e fe4f 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800cb3c:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f2c0 813e 	blt.w	800cdc2 <CRI_chart+0xaf6>
 800cb46:	2b64      	cmp	r3, #100	; 0x64
 800cb48:	f300 813d 	bgt.w	800cdc6 <CRI_chart+0xafa>
 800cb4c:	ee07 3a90 	vmov	s15, r3
 800cb50:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800cc60 <CRI_chart+0x994>
 800cb54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cb5c:	eddf 7a41 	vldr	s15, [pc, #260]	; 800cc64 <CRI_chart+0x998>
 800cb60:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800cc68 <CRI_chart+0x99c>
 800cb64:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cb68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800cb70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800cb74:	f24e 7323 	movw	r3, #59171	; 0xe723
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cb7e:	23fc      	movs	r3, #252	; 0xfc
 800cb80:	f240 101d 	movw	r0, #285	; 0x11d
 800cb84:	f00e fe29 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800cb88:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f2c0 811c 	blt.w	800cdca <CRI_chart+0xafe>
 800cb92:	2b64      	cmp	r3, #100	; 0x64
 800cb94:	f300 811b 	bgt.w	800cdce <CRI_chart+0xb02>
 800cb98:	ee07 3a90 	vmov	s15, r3
 800cb9c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800cc60 <CRI_chart+0x994>
 800cba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cba4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cba8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800cc64 <CRI_chart+0x998>
 800cbac:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800cc68 <CRI_chart+0x99c>
 800cbb0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cbb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb8:	edcd 7a03 	vstr	s15, [sp, #12]
 800cbbc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800cbc0:	f241 4327 	movw	r3, #5159	; 0x1427
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800cbca:	23fc      	movs	r3, #252	; 0xfc
 800cbcc:	f240 1033 	movw	r0, #307	; 0x133
 800cbd0:	f00e fe03 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800cbd4:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f2c0 80fa 	blt.w	800cdd2 <CRI_chart+0xb06>
 800cbde:	2b64      	cmp	r3, #100	; 0x64
 800cbe0:	f300 80f9 	bgt.w	800cdd6 <CRI_chart+0xb0a>
 800cbe4:	ee07 3a90 	vmov	s15, r3
 800cbe8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800cc60 <CRI_chart+0x994>
 800cbec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbf0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cbf4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800cc64 <CRI_chart+0x998>
 800cbf8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800cc68 <CRI_chart+0x99c>
 800cbfc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cc00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc04:	edcd 7a03 	vstr	s15, [sp, #12]
 800cc08:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800cc0c:	f242 138d 	movw	r3, #8589	; 0x218d
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800cc16:	23fc      	movs	r3, #252	; 0xfc
 800cc18:	f240 1049 	movw	r0, #329	; 0x149
 800cc1c:	f00e fddd 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800cc20:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f2c0 80d8 	blt.w	800cdda <CRI_chart+0xb0e>
 800cc2a:	2b64      	cmp	r3, #100	; 0x64
 800cc2c:	f300 80d7 	bgt.w	800cdde <CRI_chart+0xb12>
 800cc30:	ee07 3a90 	vmov	s15, r3
 800cc34:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800cc60 <CRI_chart+0x994>
 800cc38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cc40:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cc64 <CRI_chart+0x998>
 800cc44:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800cc68 <CRI_chart+0x99c>
 800cc48:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cc4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc50:	edcd 7a03 	vstr	s15, [sp, #12]
 800cc54:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800cc58:	e008      	b.n	800cc6c <CRI_chart+0x9a0>
 800cc5a:	bf00      	nop
 800cc5c:	20004c40 	.word	0x20004c40
 800cc60:	42c80000 	.word	0x42c80000
 800cc64:	437e0000 	.word	0x437e0000
 800cc68:	43520000 	.word	0x43520000
 800cc6c:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800cc76:	23fc      	movs	r3, #252	; 0xfc
 800cc78:	f240 105f 	movw	r0, #351	; 0x15f
 800cc7c:	f00e fdad 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800cc80:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f2c0 80ac 	blt.w	800cde2 <CRI_chart+0xb16>
 800cc8a:	2b64      	cmp	r3, #100	; 0x64
 800cc8c:	f300 80ab 	bgt.w	800cde6 <CRI_chart+0xb1a>
 800cc90:	ee07 3a90 	vmov	s15, r3
 800cc94:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800cc60 <CRI_chart+0x994>
 800cc98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cca0:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800cc64 <CRI_chart+0x998>
 800cca4:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800cc68 <CRI_chart+0x99c>
 800cca8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ccac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb0:	edcd 7a03 	vstr	s15, [sp, #12]
 800ccb4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ccb8:	f641 3346 	movw	r3, #6982	; 0x1b46
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ccc2:	23fc      	movs	r3, #252	; 0xfc
 800ccc4:	f240 1075 	movw	r0, #373	; 0x175
 800ccc8:	f00e fd87 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800cccc:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f2c0 808a 	blt.w	800cdea <CRI_chart+0xb1e>
 800ccd6:	2b64      	cmp	r3, #100	; 0x64
 800ccd8:	f300 8089 	bgt.w	800cdee <CRI_chart+0xb22>
 800ccdc:	ee07 3a90 	vmov	s15, r3
 800cce0:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800cc60 <CRI_chart+0x994>
 800cce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cce8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ccec:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800cc64 <CRI_chart+0x998>
 800ccf0:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800cc68 <CRI_chart+0x99c>
 800ccf4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ccf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccfc:	edcd 7a03 	vstr	s15, [sp, #12]
 800cd00:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800cd04:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800ce08 <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800cd08:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800cdfc <CRI_chart+0xb30>
 800cd0c:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800ce00 <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800cd10:	f24f 6311 	movw	r3, #62993	; 0xf611
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800cd1a:	23fc      	movs	r3, #252	; 0xfc
 800cd1c:	f240 108b 	movw	r0, #395	; 0x18b
 800cd20:	f00e fd5b 	bl	801b7da <TFT_FillRectangle>
 800cd24:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800cd26:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800cd2a:	4641      	mov	r1, r8
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f012 f967 	bl	801f000 <siprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800cd32:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	db5b      	blt.n	800cdf2 <CRI_chart+0xb26>
 800cd3a:	2b64      	cmp	r3, #100	; 0x64
 800cd3c:	dc5b      	bgt.n	800cdf6 <CRI_chart+0xb2a>
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd46:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800cd4a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ce04 <CRI_chart+0xb38>
 800cd4e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800cd52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd56:	edcd 7a03 	vstr	s15, [sp, #12]
 800cd5a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800cd5e:	2303      	movs	r3, #3
 800cd60:	4620      	mov	r0, r4
 800cd62:	4632      	mov	r2, r6
 800cd64:	3416      	adds	r4, #22
 800cd66:	f00f f883 	bl	801be70 <TFT_DisplayString>
 800cd6a:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800cd6c:	f240 13a1 	movw	r3, #417	; 0x1a1
 800cd70:	429c      	cmp	r4, r3
 800cd72:	d1d8      	bne.n	800cd26 <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800cd74:	2300      	movs	r3, #0
 800cd76:	703b      	strb	r3, [r7, #0]
}
 800cd78:	e525      	b.n	800c7c6 <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800cd7a:	21fe      	movs	r1, #254	; 0xfe
 800cd7c:	e5b4      	b.n	800c8e8 <CRI_chart+0x61c>
 800cd7e:	219a      	movs	r1, #154	; 0x9a
 800cd80:	e5b2      	b.n	800c8e8 <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800cd82:	21fe      	movs	r1, #254	; 0xfe
 800cd84:	e5d4      	b.n	800c930 <CRI_chart+0x664>
 800cd86:	219a      	movs	r1, #154	; 0x9a
 800cd88:	e5d2      	b.n	800c930 <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800cd8a:	21fe      	movs	r1, #254	; 0xfe
 800cd8c:	e5f4      	b.n	800c978 <CRI_chart+0x6ac>
 800cd8e:	219a      	movs	r1, #154	; 0x9a
 800cd90:	e5f2      	b.n	800c978 <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800cd92:	21fe      	movs	r1, #254	; 0xfe
 800cd94:	e614      	b.n	800c9c0 <CRI_chart+0x6f4>
 800cd96:	219a      	movs	r1, #154	; 0x9a
 800cd98:	e612      	b.n	800c9c0 <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800cd9a:	21fe      	movs	r1, #254	; 0xfe
 800cd9c:	e634      	b.n	800ca08 <CRI_chart+0x73c>
 800cd9e:	219a      	movs	r1, #154	; 0x9a
 800cda0:	e632      	b.n	800ca08 <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800cda2:	21fe      	movs	r1, #254	; 0xfe
 800cda4:	e654      	b.n	800ca50 <CRI_chart+0x784>
 800cda6:	219a      	movs	r1, #154	; 0x9a
 800cda8:	e652      	b.n	800ca50 <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800cdaa:	21fe      	movs	r1, #254	; 0xfe
 800cdac:	e674      	b.n	800ca98 <CRI_chart+0x7cc>
 800cdae:	219a      	movs	r1, #154	; 0x9a
 800cdb0:	e672      	b.n	800ca98 <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800cdb2:	21fe      	movs	r1, #254	; 0xfe
 800cdb4:	e694      	b.n	800cae0 <CRI_chart+0x814>
 800cdb6:	219a      	movs	r1, #154	; 0x9a
 800cdb8:	e692      	b.n	800cae0 <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800cdba:	21fe      	movs	r1, #254	; 0xfe
 800cdbc:	e6b4      	b.n	800cb28 <CRI_chart+0x85c>
 800cdbe:	219a      	movs	r1, #154	; 0x9a
 800cdc0:	e6b2      	b.n	800cb28 <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800cdc2:	21fe      	movs	r1, #254	; 0xfe
 800cdc4:	e6d6      	b.n	800cb74 <CRI_chart+0x8a8>
 800cdc6:	219a      	movs	r1, #154	; 0x9a
 800cdc8:	e6d4      	b.n	800cb74 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800cdca:	21fe      	movs	r1, #254	; 0xfe
 800cdcc:	e6f8      	b.n	800cbc0 <CRI_chart+0x8f4>
 800cdce:	219a      	movs	r1, #154	; 0x9a
 800cdd0:	e6f6      	b.n	800cbc0 <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800cdd2:	21fe      	movs	r1, #254	; 0xfe
 800cdd4:	e71a      	b.n	800cc0c <CRI_chart+0x940>
 800cdd6:	219a      	movs	r1, #154	; 0x9a
 800cdd8:	e718      	b.n	800cc0c <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800cdda:	21fe      	movs	r1, #254	; 0xfe
 800cddc:	e746      	b.n	800cc6c <CRI_chart+0x9a0>
 800cdde:	219a      	movs	r1, #154	; 0x9a
 800cde0:	e744      	b.n	800cc6c <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800cde2:	21fe      	movs	r1, #254	; 0xfe
 800cde4:	e768      	b.n	800ccb8 <CRI_chart+0x9ec>
 800cde6:	219a      	movs	r1, #154	; 0x9a
 800cde8:	e766      	b.n	800ccb8 <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800cdea:	21fe      	movs	r1, #254	; 0xfe
 800cdec:	e78a      	b.n	800cd04 <CRI_chart+0xa38>
 800cdee:	219a      	movs	r1, #154	; 0x9a
 800cdf0:	e788      	b.n	800cd04 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800cdf2:	21f4      	movs	r1, #244	; 0xf4
 800cdf4:	e7b3      	b.n	800cd5e <CRI_chart+0xa92>
 800cdf6:	2190      	movs	r1, #144	; 0x90
 800cdf8:	e7b1      	b.n	800cd5e <CRI_chart+0xa92>
 800cdfa:	bf00      	nop
 800cdfc:	42c80000 	.word	0x42c80000
 800ce00:	43570000 	.word	0x43570000
 800ce04:	43740000 	.word	0x43740000
 800ce08:	080215d9 	.word	0x080215d9

0800ce0c <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800ce0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ce10:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 50, 270, 410, TFT_Black_Bkgr);
 800ce12:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800ce14:	4604      	mov	r4, r0
 800ce16:	4688      	mov	r8, r1
 800ce18:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 50, 270, 410, TFT_Black_Bkgr);
 800ce1a:	2132      	movs	r1, #50	; 0x32
 800ce1c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	2005      	movs	r0, #5
 800ce24:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800ce28:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 50, 270, 410, TFT_Black_Bkgr);
 800ce2c:	f00e fcd5 	bl	801b7da <TFT_FillRectangle>
	CRI_Axes(direction);
 800ce30:	4620      	mov	r0, r4
 800ce32:	f7fe fe75 	bl	800bb20 <CRI_Axes>
	CRI_Axes_Text(direction);
 800ce36:	4620      	mov	r0, r4
 800ce38:	f7fe ffee 	bl	800be18 <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800ce3c:	4641      	mov	r1, r8
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f7ff fa44 	bl	800c2cc <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800ce44:	463b      	mov	r3, r7
 800ce46:	4632      	mov	r2, r6
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	b002      	add	sp, #8
 800ce4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800ce52:	f7fe bf03 	b.w	800bc5c <CRI_Axes_Measure>
	...

0800ce58 <Calculate_EL_Day>:
extern float colorimetry_xy[2], colorimetry_uv[2], colorimetry_uv1976[2];
extern float calibratre_x_1931[1024], calibratre_y_1931[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800ce58:	4a0c      	ldr	r2, [pc, #48]	; (800ce8c <Calculate_EL_Day+0x34>)
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800ce60:	ecb0 7a01 	vldmia	r0!, {s14}
 800ce64:	ecf1 7a01 	vldmia	r1!, {s15}
 800ce68:	ed92 0a00 	vldr	s0, [r2]
 800ce6c:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800ce70:	3301      	adds	r3, #1
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800ce78:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800ce7c:	d1f0      	bne.n	800ce60 <Calculate_EL_Day+0x8>
 800ce7e:	4a04      	ldr	r2, [pc, #16]	; (800ce90 <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800ce80:	eddf 7a04 	vldr	s15, [pc, #16]	; 800ce94 <Calculate_EL_Day+0x3c>
 800ce84:	8013      	strh	r3, [r2, #0]
 800ce86:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ce8a:	4770      	bx	lr
 800ce8c:	2008acbc 	.word	0x2008acbc
 800ce90:	2008acb4 	.word	0x2008acb4
 800ce94:	442ac000 	.word	0x442ac000

0800ce98 <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800ce98:	4a09      	ldr	r2, [pc, #36]	; (800cec0 <Calculate_EL_Day_Wt+0x28>)
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800cea0:	ecf0 7a01 	vldmia	r0!, {s15}
 800cea4:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800cea8:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800ceaa:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800ceb4:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800ceb8:	d1f2      	bne.n	800cea0 <Calculate_EL_Day_Wt+0x8>
 800ceba:	4a02      	ldr	r2, [pc, #8]	; (800cec4 <Calculate_EL_Day_Wt+0x2c>)
 800cebc:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800cebe:	4770      	bx	lr
 800cec0:	2008acbc 	.word	0x2008acbc
 800cec4:	2008acb4 	.word	0x2008acb4

0800cec8 <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800cec8:	4a0c      	ldr	r2, [pc, #48]	; (800cefc <Calculate_EL_Night+0x34>)
 800ceca:	2300      	movs	r3, #0
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800ced0:	ecb0 7a01 	vldmia	r0!, {s14}
 800ced4:	ecf1 7a01 	vldmia	r1!, {s15}
 800ced8:	ed92 0a00 	vldr	s0, [r2]
 800cedc:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800cee0:	3301      	adds	r3, #1
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800cee8:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800ceec:	d1f0      	bne.n	800ced0 <Calculate_EL_Night+0x8>
 800ceee:	4a04      	ldr	r2, [pc, #16]	; (800cf00 <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800cef0:	eddf 7a04 	vldr	s15, [pc, #16]	; 800cf04 <Calculate_EL_Night+0x3c>
 800cef4:	8013      	strh	r3, [r2, #0]
 800cef6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cefa:	4770      	bx	lr
 800cefc:	2008acbc 	.word	0x2008acbc
 800cf00:	2008acb4 	.word	0x2008acb4
 800cf04:	44d48000 	.word	0x44d48000

0800cf08 <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800cf08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cf0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf10:	bf14      	ite	ne
 800cf12:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800cf16:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800cf20 <Calculate_SP+0x18>
}
 800cf1a:	eeb0 0a67 	vmov.f32	s0, s15
 800cf1e:	4770      	bx	lr
	...

0800cf28 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800cf28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sum = 0;
 800cf2c:	4d1a      	ldr	r5, [pc, #104]	; (800cf98 <Calculate_PPFD_PPL+0x70>)
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800cf2e:	f20f 0960 	addw	r9, pc, #96	; 0x60
 800cf32:	e9d9 8900 	ldrd	r8, r9, [r9]
	sum = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	4683      	mov	fp, r0
 800cf3c:	468a      	mov	sl, r1
 800cf3e:	2400      	movs	r4, #0
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800cf40:	ecbb 7a01 	vldmia	fp!, {s14}
 800cf44:	ecfa 7a01 	vldmia	sl!, {s15}
 800cf48:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800cf4c:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800cf4e:	ee17 0a90 	vmov	r0, s15
 800cf52:	f7f3 fb09 	bl	8000568 <__aeabi_f2d>
 800cf56:	4642      	mov	r2, r8
 800cf58:	464b      	mov	r3, r9
 800cf5a:	f7f3 fb59 	bl	8000610 <__aeabi_dmul>
 800cf5e:	4606      	mov	r6, r0
 800cf60:	6828      	ldr	r0, [r5, #0]
 800cf62:	460f      	mov	r7, r1
 800cf64:	f7f3 fb00 	bl	8000568 <__aeabi_f2d>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	4639      	mov	r1, r7
 800cf70:	f7f3 f99c 	bl	80002ac <__adddf3>
 800cf74:	f7f3 fe44 	bl	8000c00 <__aeabi_d2f>
	for (iq = 0; iq < 1024; iq++)
 800cf78:	b2a4      	uxth	r4, r4
 800cf7a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800cf7e:	6028      	str	r0, [r5, #0]
	for (iq = 0; iq < 1024; iq++)
 800cf80:	d1de      	bne.n	800cf40 <Calculate_PPFD_PPL+0x18>
 800cf82:	4b06      	ldr	r3, [pc, #24]	; (800cf9c <Calculate_PPFD_PPL+0x74>)
	}
	return sum;
}
 800cf84:	ee00 0a10 	vmov	s0, r0
 800cf88:	801c      	strh	r4, [r3, #0]
 800cf8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8e:	bf00      	nop
 800cf90:	73f2981b 	.word	0x73f2981b
 800cf94:	3f811eb6 	.word	0x3f811eb6
 800cf98:	2008acbc 	.word	0x2008acbc
 800cf9c:	2008acb4 	.word	0x2008acb4

0800cfa0 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800cfa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800cfa4:	4d34      	ldr	r5, [pc, #208]	; (800d078 <Calculate_PPFD_PPL_Range+0xd8>)
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800cfaa:	b1f2      	cbz	r2, 800cfea <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800cfac:	2a01      	cmp	r2, #1
 800cfae:	d021      	beq.n	800cff4 <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800cfb0:	2a02      	cmp	r2, #2
 800cfb2:	d024      	beq.n	800cffe <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800cfb4:	2a03      	cmp	r2, #3
 800cfb6:	bf0b      	itete	eq
 800cfb8:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800cfbc:	f04f 0a00 	movne.w	sl, #0
 800cfc0:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800cfc4:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800cfc6:	4a2d      	ldr	r2, [pc, #180]	; (800d07c <Calculate_PPFD_PPL_Range+0xdc>)
 800cfc8:	9201      	str	r2, [sp, #4]
 800cfca:	2400      	movs	r4, #0
 800cfcc:	8014      	strh	r4, [r2, #0]
 800cfce:	4606      	mov	r6, r0
 800cfd0:	468b      	mov	fp, r1
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800cfd8:	d116      	bne.n	800d008 <Calculate_PPFD_PPL_Range+0x68>
 800cfda:	b10b      	cbz	r3, 800cfe0 <Calculate_PPFD_PPL_Range+0x40>
 800cfdc:	9b01      	ldr	r3, [sp, #4]
 800cfde:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800cfe0:	ed95 0a00 	vldr	s0, [r5]
 800cfe4:	b003      	add	sp, #12
 800cfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800cfea:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800cfee:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800cff2:	e7e8      	b.n	800cfc6 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800cff4:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800cff8:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800cffc:	e7e3      	b.n	800cfc6 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800cffe:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800d002:	f44f 7716 	mov.w	r7, #600	; 0x258
 800d006:	e7de      	b.n	800cfc6 <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800d008:	ee07 7a10 	vmov	s14, r7
 800d00c:	ecfb 7a01 	vldmia	fp!, {s15}
 800d010:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d014:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01c:	dd23      	ble.n	800d066 <Calculate_PPFD_PPL_Range+0xc6>
 800d01e:	ee07 aa10 	vmov	s14, sl
 800d022:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d02e:	d51a      	bpl.n	800d066 <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800d030:	ed96 7a00 	vldr	s14, [r6]
 800d034:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d038:	ee17 0a90 	vmov	r0, s15
 800d03c:	f7f3 fa94 	bl	8000568 <__aeabi_f2d>
 800d040:	a30b      	add	r3, pc, #44	; (adr r3, 800d070 <Calculate_PPFD_PPL_Range+0xd0>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	f7f3 fae3 	bl	8000610 <__aeabi_dmul>
 800d04a:	4680      	mov	r8, r0
 800d04c:	6828      	ldr	r0, [r5, #0]
 800d04e:	4689      	mov	r9, r1
 800d050:	f7f3 fa8a 	bl	8000568 <__aeabi_f2d>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	f7f3 f926 	bl	80002ac <__adddf3>
 800d060:	f7f3 fdce 	bl	8000c00 <__aeabi_d2f>
 800d064:	6028      	str	r0, [r5, #0]
 800d066:	3401      	adds	r4, #1
 800d068:	b2a4      	uxth	r4, r4
 800d06a:	3604      	adds	r6, #4
 800d06c:	2301      	movs	r3, #1
 800d06e:	e7b1      	b.n	800cfd4 <Calculate_PPFD_PPL_Range+0x34>
 800d070:	73f2981b 	.word	0x73f2981b
 800d074:	3f811eb6 	.word	0x3f811eb6
 800d078:	2008acbc 	.word	0x2008acbc
 800d07c:	2008acb4 	.word	0x2008acb4

0800d080 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800d080:	4a0a      	ldr	r2, [pc, #40]	; (800d0ac <Calculate_ELb+0x2c>)
 800d082:	2300      	movs	r3, #0
 800d084:	6013      	str	r3, [r2, #0]
 800d086:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800d088:	ecb0 7a01 	vldmia	r0!, {s14}
 800d08c:	ecf1 7a01 	vldmia	r1!, {s15}
 800d090:	ed92 0a00 	vldr	s0, [r2]
 800d094:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800d098:	3301      	adds	r3, #1
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800d0a0:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800d0a4:	d1f0      	bne.n	800d088 <Calculate_ELb+0x8>
 800d0a6:	4a02      	ldr	r2, [pc, #8]	; (800d0b0 <Calculate_ELb+0x30>)
 800d0a8:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800d0aa:	4770      	bx	lr
 800d0ac:	2008acbc 	.word	0x2008acbc
 800d0b0:	2008acb4 	.word	0x2008acb4

0800d0b4 <Calculate_ELr>:
 800d0b4:	f7ff bfe4 	b.w	800d080 <Calculate_ELb>

0800d0b8 <Calculate_XYZ>:


void Calculate_XYZ(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800d0b8:	b5d0      	push	{r4, r6, r7, lr}
 800d0ba:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800d0be:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800d144 <Calculate_XYZ+0x8c>
{
 800d0c2:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800d0c4:	eef0 7a48 	vmov.f32	s15, s16
 800d0c8:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ[0] = 0;
	colorimetry_XYZ[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800d0cc:	ecb0 7a01 	vldmia	r0!, {s14}
 800d0d0:	ecf1 6a01 	vldmia	r1!, {s13}
 800d0d4:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800d0d8:	3401      	adds	r4, #1
 800d0da:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800d0dc:	ecf2 6a01 	vldmia	r2!, {s13}
 800d0e0:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800d0e4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800d0e8:	ecf3 6a01 	vldmia	r3!, {s13}
 800d0ec:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800d0f0:	d1ec      	bne.n	800d0cc <Calculate_XYZ+0x14>
	}
	
	k = 100/Y_sum;
 800d0f2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d148 <Calculate_XYZ+0x90>
 800d0f6:	4b15      	ldr	r3, [pc, #84]	; (800d14c <Calculate_XYZ+0x94>)
 800d0f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d0fc:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ[0] = k*X_sum;
 800d0fe:	4c14      	ldr	r4, [pc, #80]	; (800d150 <Calculate_XYZ+0x98>)
	k = 100/Y_sum;
 800d100:	ee16 0a90 	vmov	r0, s13
 800d104:	f7f3 fa30 	bl	8000568 <__aeabi_f2d>
 800d108:	4606      	mov	r6, r0
 800d10a:	460f      	mov	r7, r1
	colorimetry_XYZ[0] = k*X_sum;
 800d10c:	ee18 0a90 	vmov	r0, s17
 800d110:	f7f3 fa2a 	bl	8000568 <__aeabi_f2d>
 800d114:	4632      	mov	r2, r6
 800d116:	463b      	mov	r3, r7
 800d118:	f7f3 fa7a 	bl	8000610 <__aeabi_dmul>
 800d11c:	f7f3 fd50 	bl	8000bc0 <__aeabi_d2uiz>
	colorimetry_XYZ[1] = 100;
 800d120:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ[0] = k*X_sum;
 800d122:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ[1] = 100;
 800d124:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ[2] = k*Z_sum;	
 800d126:	ee18 0a10 	vmov	r0, s16
 800d12a:	f7f3 fa1d 	bl	8000568 <__aeabi_f2d>
 800d12e:	4632      	mov	r2, r6
 800d130:	463b      	mov	r3, r7
 800d132:	f7f3 fa6d 	bl	8000610 <__aeabi_dmul>
 800d136:	f7f3 fd43 	bl	8000bc0 <__aeabi_d2uiz>
}
 800d13a:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ[2] = k*Z_sum;	
 800d13e:	80a0      	strh	r0, [r4, #4]
}
 800d140:	bdd0      	pop	{r4, r6, r7, pc}
 800d142:	bf00      	nop
 800d144:	00000000 	.word	0x00000000
 800d148:	42c80000 	.word	0x42c80000
 800d14c:	2008acb4 	.word	0x2008acb4
 800d150:	2008a7de 	.word	0x2008a7de

0800d154 <Calculate_xy>:

void Calculate_xy(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800d154:	8801      	ldrh	r1, [r0, #0]
 800d156:	8842      	ldrh	r2, [r0, #2]
 800d158:	8880      	ldrh	r0, [r0, #4]
 800d15a:	188b      	adds	r3, r1, r2
 800d15c:	4403      	add	r3, r0
	
	colorimetry_xy[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800d15e:	b29b      	uxth	r3, r3
 800d160:	ee07 3a90 	vmov	s15, r3
 800d164:	ee07 1a10 	vmov	s14, r1
 800d168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d16c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d170:	4b06      	ldr	r3, [pc, #24]	; (800d18c <Calculate_xy+0x38>)
 800d172:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800d176:	ee07 2a10 	vmov	s14, r2
 800d17a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800d17e:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800d182:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d186:	edc3 6a01 	vstr	s13, [r3, #4]
 800d18a:	4770      	bx	lr
 800d18c:	2008a7f4 	.word	0x2008a7f4

0800d190 <Calculate_uv>:

}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800d190:	edd0 7a01 	vldr	s15, [r0, #4]
 800d194:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy[0]/sum;
 800d198:	4a11      	ldr	r2, [pc, #68]	; (800d1e0 <Calculate_uv+0x50>)
 800d19a:	4b12      	ldr	r3, [pc, #72]	; (800d1e4 <Calculate_uv+0x54>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800d19c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800d1a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1a4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800d1a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d1ac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d1b0:	ee77 7a87 	vadd.f32	s15, s15, s14
	colorimetry_uv[0] = 4*colorimetry_xy[0]/sum;
 800d1b4:	ed92 7a00 	vldr	s14, [r2]
 800d1b8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d1bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_uv[1] = 6*colorimetry_xy[1]/sum;
 800d1c4:	ed92 7a01 	vldr	s14, [r2, #4]
	colorimetry_uv[0] = 4*colorimetry_xy[0]/sum;
 800d1c8:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy[1]/sum;
 800d1cc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d1d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d1d8:	edc3 6a01 	vstr	s13, [r3, #4]
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	2008a7f4 	.word	0x2008a7f4
 800d1e4:	2008a7e4 	.word	0x2008a7e4

0800d1e8 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800d1e8:	edd0 7a01 	vldr	s15, [r0, #4]
 800d1ec:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy[0]/sum;
 800d1f0:	4a11      	ldr	r2, [pc, #68]	; (800d238 <Calculate_uv1976+0x50>)
 800d1f2:	4b12      	ldr	r3, [pc, #72]	; (800d23c <Calculate_uv1976+0x54>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800d1f4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800d1f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1fc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800d200:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d204:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d208:	ee77 7a87 	vadd.f32	s15, s15, s14
	colorimetry_uv1976[0] = 4*colorimetry_xy[0]/sum;
 800d20c:	ed92 7a00 	vldr	s14, [r2]
 800d210:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d214:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d218:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy[1]/sum;
 800d21c:	ed92 7a01 	vldr	s14, [r2, #4]
	colorimetry_uv1976[0] = 4*colorimetry_xy[0]/sum;
 800d220:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy[1]/sum;
 800d224:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800d228:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d22c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d230:	edc3 6a01 	vstr	s13, [r3, #4]
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	2008a7f4 	.word	0x2008a7f4
 800d23c:	2008a7ec 	.word	0x2008a7ec

0800d240 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	ed2d 8b02 	vpush	{d8}
 800d248:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800d24a:	b921      	cbnz	r1, 800d256 <Calculate_Tc+0x16>
	{
		Calculate_XYZ(R_data, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 800d24c:	4bb4      	ldr	r3, [pc, #720]	; (800d520 <Calculate_Tc+0x2e0>)
 800d24e:	4ab5      	ldr	r2, [pc, #724]	; (800d524 <Calculate_Tc+0x2e4>)
 800d250:	49b5      	ldr	r1, [pc, #724]	; (800d528 <Calculate_Tc+0x2e8>)
 800d252:	f7ff ff31 	bl	800d0b8 <Calculate_XYZ>
	}
	
	factor_uvp = (colorimetry_XYZ[0] + 15*colorimetry_XYZ[1] + 3*colorimetry_XYZ[2]);
 800d256:	4bb5      	ldr	r3, [pc, #724]	; (800d52c <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800d258:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800d530 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ[0] + 15*colorimetry_XYZ[1] + 3*colorimetry_XYZ[2]);
 800d25c:	885e      	ldrh	r6, [r3, #2]
 800d25e:	881f      	ldrh	r7, [r3, #0]
 800d260:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800d262:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800d570 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ[0] + 15*colorimetry_XYZ[1] + 3*colorimetry_XYZ[2]);
 800d266:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800d26a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d26e:	4438      	add	r0, r7
 800d270:	4418      	add	r0, r3
 800d272:	f7f3 f967 	bl	8000544 <__aeabi_i2d>
 800d276:	4baf      	ldr	r3, [pc, #700]	; (800d534 <Calculate_Tc+0x2f4>)
 800d278:	4604      	mov	r4, r0
 800d27a:	460d      	mov	r5, r1
 800d27c:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ[0])/factor_uvp;
 800d280:	4638      	mov	r0, r7
 800d282:	f7f3 f95f 	bl	8000544 <__aeabi_i2d>
 800d286:	2200      	movs	r2, #0
 800d288:	4bab      	ldr	r3, [pc, #684]	; (800d538 <Calculate_Tc+0x2f8>)
 800d28a:	4fac      	ldr	r7, [pc, #688]	; (800d53c <Calculate_Tc+0x2fc>)
 800d28c:	f7f3 f9c0 	bl	8000610 <__aeabi_dmul>
 800d290:	4622      	mov	r2, r4
 800d292:	462b      	mov	r3, r5
 800d294:	f7f3 fae6 	bl	8000864 <__aeabi_ddiv>
 800d298:	4ba9      	ldr	r3, [pc, #676]	; (800d540 <Calculate_Tc+0x300>)
 800d29a:	e9cd 0100 	strd	r0, r1, [sp]
 800d29e:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ[1])/factor_uvp;
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f7f3 f94e 	bl	8000544 <__aeabi_i2d>
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	4ba6      	ldr	r3, [pc, #664]	; (800d544 <Calculate_Tc+0x304>)
 800d2ac:	f7f3 f9b0 	bl	8000610 <__aeabi_dmul>
 800d2b0:	462b      	mov	r3, r5
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	f7f3 fad6 	bl	8000864 <__aeabi_ddiv>
 800d2b8:	4ba3      	ldr	r3, [pc, #652]	; (800d548 <Calculate_Tc+0x308>)
 800d2ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2be:	2600      	movs	r6, #0
 800d2c0:	e9c3 0100 	strd	r0, r1, [r3]
 800d2c4:	4ba1      	ldr	r3, [pc, #644]	; (800d54c <Calculate_Tc+0x30c>)
 800d2c6:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800d2c8:	4635      	mov	r5, r6
 800d2ca:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800d2cc:	eeb0 8a68 	vmov.f32	s16, s17
 800d2d0:	46d3      	mov	fp, sl
 800d2d2:	b2f3      	uxtb	r3, r6
 800d2d4:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800d2d6:	9b04      	ldr	r3, [sp, #16]
 800d2d8:	ecf3 7a01 	vldmia	r3!, {s15}
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	4b9c      	ldr	r3, [pc, #624]	; (800d550 <Calculate_Tc+0x310>)
 800d2e0:	edcd 7a05 	vstr	s15, [sp, #20]
 800d2e4:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800d2e8:	ecf7 7a01 	vldmia	r7!, {s15}
 800d2ec:	edcd 7a06 	vstr	s15, [sp, #24]
 800d2f0:	ee07 0a90 	vmov	s15, r0
 800d2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f8:	ee17 0a90 	vmov	r0, s15
 800d2fc:	f7f3 f934 	bl	8000568 <__aeabi_f2d>
 800d300:	a381      	add	r3, pc, #516	; (adr r3, 800d508 <Calculate_Tc+0x2c8>)
 800d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d306:	f7f3 faad 	bl	8000864 <__aeabi_ddiv>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d312:	f7f2 ffc9 	bl	80002a8 <__aeabi_dsub>
 800d316:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d31a:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800d31e:	ee07 0a90 	vmov	s15, r0
 800d322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d326:	3601      	adds	r6, #1
 800d328:	ee17 0a90 	vmov	r0, s15
 800d32c:	f7f3 f91c 	bl	8000568 <__aeabi_f2d>
 800d330:	a375      	add	r3, pc, #468	; (adr r3, 800d508 <Calculate_Tc+0x2c8>)
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	f7f3 fa95 	bl	8000864 <__aeabi_ddiv>
 800d33a:	4602      	mov	r2, r0
 800d33c:	460b      	mov	r3, r1
 800d33e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d342:	f7f2 ffb1 	bl	80002a8 <__aeabi_dsub>
 800d346:	4680      	mov	r8, r0
 800d348:	9805      	ldr	r0, [sp, #20]
 800d34a:	4689      	mov	r9, r1
 800d34c:	f7f3 f90c 	bl	8000568 <__aeabi_f2d>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	4640      	mov	r0, r8
 800d356:	4649      	mov	r1, r9
 800d358:	f7f3 f95a 	bl	8000610 <__aeabi_dmul>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d364:	f7f2 ffa0 	bl	80002a8 <__aeabi_dsub>
 800d368:	4680      	mov	r8, r0
 800d36a:	9806      	ldr	r0, [sp, #24]
 800d36c:	4689      	mov	r9, r1
 800d36e:	f7f3 f8fb 	bl	8000568 <__aeabi_f2d>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	4640      	mov	r0, r8
 800d378:	4649      	mov	r1, r9
 800d37a:	f7f3 fa73 	bl	8000864 <__aeabi_ddiv>
 800d37e:	f7f3 fc3f 	bl	8000c00 <__aeabi_d2f>
 800d382:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800d386:	eef0 7ac8 	vabs.f32	s15, s16
 800d38a:	eef0 6ac7 	vabs.f32	s13, s14
 800d38e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d396:	bfc1      	itttt	gt
 800d398:	4625      	movgt	r5, r4
 800d39a:	eef0 8a48 	vmovgt.f32	s17, s16
 800d39e:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800d3a0:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800d3a4:	2e1f      	cmp	r6, #31
 800d3a6:	d194      	bne.n	800d2d2 <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800d3a8:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800d3ac:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800d550 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800d3b0:	f7f3 f8c8 	bl	8000544 <__aeabi_i2d>
 800d3b4:	a354      	add	r3, pc, #336	; (adr r3, 800d508 <Calculate_Tc+0x2c8>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	f7f3 fa53 	bl	8000864 <__aeabi_ddiv>
 800d3be:	4606      	mov	r6, r0
 800d3c0:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800d3c4:	460f      	mov	r7, r1
 800d3c6:	f7f3 f8bd 	bl	8000544 <__aeabi_i2d>
 800d3ca:	a34f      	add	r3, pc, #316	; (adr r3, 800d508 <Calculate_Tc+0x2c8>)
 800d3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d0:	f7f3 fa48 	bl	8000864 <__aeabi_ddiv>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4630      	mov	r0, r6
 800d3da:	4639      	mov	r1, r7
 800d3dc:	f7f2 ff66 	bl	80002ac <__adddf3>
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	4b5c      	ldr	r3, [pc, #368]	; (800d554 <Calculate_Tc+0x314>)
 800d3e4:	f7f3 f914 	bl	8000610 <__aeabi_dmul>
 800d3e8:	4b5b      	ldr	r3, [pc, #364]	; (800d558 <Calculate_Tc+0x318>)
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800d3f2:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800d3f6:	f7f3 f8a5 	bl	8000544 <__aeabi_i2d>
 800d3fa:	a343      	add	r3, pc, #268	; (adr r3, 800d508 <Calculate_Tc+0x2c8>)
 800d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d400:	f7f3 fa30 	bl	8000864 <__aeabi_ddiv>
 800d404:	4606      	mov	r6, r0
 800d406:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800d40a:	460f      	mov	r7, r1
 800d40c:	f7f3 f89a 	bl	8000544 <__aeabi_i2d>
 800d410:	a33d      	add	r3, pc, #244	; (adr r3, 800d508 <Calculate_Tc+0x2c8>)
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	f7f3 fa25 	bl	8000864 <__aeabi_ddiv>
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	4630      	mov	r0, r6
 800d420:	4639      	mov	r1, r7
 800d422:	f7f2 ff43 	bl	80002ac <__adddf3>
 800d426:	2200      	movs	r2, #0
 800d428:	4b4a      	ldr	r3, [pc, #296]	; (800d554 <Calculate_Tc+0x314>)
 800d42a:	f7f3 f8f1 	bl	8000610 <__aeabi_dmul>
 800d42e:	4b4b      	ldr	r3, [pc, #300]	; (800d55c <Calculate_Tc+0x31c>)
 800d430:	4606      	mov	r6, r0
 800d432:	460f      	mov	r7, r1
 800d434:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800d438:	4640      	mov	r0, r8
 800d43a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d43e:	4649      	mov	r1, r9
 800d440:	f7f2 ff32 	bl	80002a8 <__aeabi_dsub>
 800d444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d448:	4680      	mov	r8, r0
 800d44a:	4689      	mov	r9, r1
 800d44c:	4630      	mov	r0, r6
 800d44e:	4639      	mov	r1, r7
 800d450:	f7f2 ff2a 	bl	80002a8 <__aeabi_dsub>
 800d454:	4642      	mov	r2, r8
 800d456:	4606      	mov	r6, r0
 800d458:	460f      	mov	r7, r1
 800d45a:	464b      	mov	r3, r9
 800d45c:	4640      	mov	r0, r8
 800d45e:	4649      	mov	r1, r9
 800d460:	f7f3 f8d6 	bl	8000610 <__aeabi_dmul>
 800d464:	4632      	mov	r2, r6
 800d466:	4680      	mov	r8, r0
 800d468:	4689      	mov	r9, r1
 800d46a:	463b      	mov	r3, r7
 800d46c:	4630      	mov	r0, r6
 800d46e:	4639      	mov	r1, r7
 800d470:	f7f3 f8ce 	bl	8000610 <__aeabi_dmul>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	f7f2 ff16 	bl	80002ac <__adddf3>
 800d480:	ec41 0b10 	vmov	d0, r0, r1
 800d484:	f012 fd14 	bl	801feb0 <sqrt>
 800d488:	4b35      	ldr	r3, [pc, #212]	; (800d560 <Calculate_Tc+0x320>)
 800d48a:	ec51 0b10 	vmov	r0, r1, d0
 800d48e:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800d492:	a31f      	add	r3, pc, #124	; (adr r3, 800d510 <Calculate_Tc+0x2d0>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	f7f3 fb4a 	bl	8000b30 <__aeabi_dcmpgt>
 800d49c:	bb78      	cbnz	r0, 800d4fe <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800d49e:	4b31      	ldr	r3, [pc, #196]	; (800d564 <Calculate_Tc+0x324>)
 800d4a0:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800d4a4:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800d4a8:	ee07 2a90 	vmov	s15, r2
 800d4ac:	1a9b      	subs	r3, r3, r2
 800d4ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d4b2:	ee07 3a90 	vmov	s15, r3
 800d4b6:	ee78 8a68 	vsub.f32	s17, s16, s17
 800d4ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4be:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800d4c2:	eea8 7a26 	vfma.f32	s14, s16, s13
 800d4c6:	ee17 0a10 	vmov	r0, s14
 800d4ca:	f7f3 f84d 	bl	8000568 <__aeabi_f2d>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	a111      	add	r1, pc, #68	; (adr r1, 800d518 <Calculate_Tc+0x2d8>)
 800d4d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d8:	f7f3 f9c4 	bl	8000864 <__aeabi_ddiv>
 800d4dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4e0:	4921      	ldr	r1, [pc, #132]	; (800d568 <Calculate_Tc+0x328>)
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	e9c1 2300 	strd	r2, r3, [r1]
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	f7f3 fb88 	bl	8000c00 <__aeabi_d2f>
	}
}
 800d4f0:	ee00 0a10 	vmov	s0, r0
 800d4f4:	b00b      	add	sp, #44	; 0x2c
 800d4f6:	ecbd 8b02 	vpop	{d8}
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800d4fe:	481b      	ldr	r0, [pc, #108]	; (800d56c <Calculate_Tc+0x32c>)
 800d500:	e7f6      	b.n	800d4f0 <Calculate_Tc+0x2b0>
 800d502:	bf00      	nop
 800d504:	f3af 8000 	nop.w
 800d508:	00000000 	.word	0x00000000
 800d50c:	40f86a00 	.word	0x40f86a00
 800d510:	9999999a 	.word	0x9999999a
 800d514:	3fa99999 	.word	0x3fa99999
 800d518:	00000000 	.word	0x00000000
 800d51c:	412e8480 	.word	0x412e8480
 800d520:	200887d0 	.word	0x200887d0
 800d524:	200877d0 	.word	0x200877d0
 800d528:	200857d0 	.word	0x200857d0
 800d52c:	2008a7de 	.word	0x2008a7de
 800d530:	447a0000 	.word	0x447a0000
 800d534:	20004c50 	.word	0x20004c50
 800d538:	40100000 	.word	0x40100000
 800d53c:	0802174c 	.word	0x0802174c
 800d540:	20004c60 	.word	0x20004c60
 800d544:	40180000 	.word	0x40180000
 800d548:	20004c70 	.word	0x20004c70
 800d54c:	080216d0 	.word	0x080216d0
 800d550:	08021806 	.word	0x08021806
 800d554:	3fe00000 	.word	0x3fe00000
 800d558:	20004c58 	.word	0x20004c58
 800d55c:	20004c68 	.word	0x20004c68
 800d560:	20004c48 	.word	0x20004c48
 800d564:	080215dc 	.word	0x080215dc
 800d568:	2008acc0 	.word	0x2008acc0
 800d56c:	477fff00 	.word	0x477fff00
 800d570:	080217c8 	.word	0x080217c8
 800d574:	00000000 	.word	0x00000000

0800d578 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800d57c:	2a01      	cmp	r2, #1
{
 800d57e:	ed2d 8b02 	vpush	{d8}
 800d582:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800d584:	f000 80b9 	beq.w	800d6fa <Calculate_Lab+0x182>
 800d588:	2a02      	cmp	r2, #2
 800d58a:	f000 80b8 	beq.w	800d6fe <Calculate_Lab+0x186>
 800d58e:	2a04      	cmp	r2, #4
 800d590:	f000 80b7 	beq.w	800d702 <Calculate_Lab+0x18a>
 800d594:	2a08      	cmp	r2, #8
 800d596:	f000 80b6 	beq.w	800d706 <Calculate_Lab+0x18e>
 800d59a:	2a10      	cmp	r2, #16
 800d59c:	f000 80b5 	beq.w	800d70a <Calculate_Lab+0x192>
 800d5a0:	2a20      	cmp	r2, #32
 800d5a2:	bf14      	ite	ne
 800d5a4:	2400      	movne	r4, #0
 800d5a6:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800d5a8:	2901      	cmp	r1, #1
 800d5aa:	f040 80b0 	bne.w	800d70e <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800d5ae:	4b82      	ldr	r3, [pc, #520]	; (800d7b8 <Calculate_Lab+0x240>)
 800d5b0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800d5b4:	f7f2 ffc6 	bl	8000544 <__aeabi_i2d>
 800d5b8:	4b80      	ldr	r3, [pc, #512]	; (800d7bc <Calculate_Lab+0x244>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f7f3 f952 	bl	8000864 <__aeabi_ddiv>
 800d5c0:	f7f3 fb1e 	bl	8000c00 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800d5c4:	4b7e      	ldr	r3, [pc, #504]	; (800d7c0 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800d5c6:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800d5ca:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800d5ce:	f7f2 ffb9 	bl	8000544 <__aeabi_i2d>
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	4b79      	ldr	r3, [pc, #484]	; (800d7bc <Calculate_Lab+0x244>)
 800d5d6:	f7f3 f945 	bl	8000864 <__aeabi_ddiv>
 800d5da:	f7f3 fb11 	bl	8000c00 <__aeabi_d2f>
 800d5de:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800d5e2:	8833      	ldrh	r3, [r6, #0]
 800d5e4:	ee07 3a90 	vmov	s15, r3
 800d5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ec:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800d5f0:	ee17 0a10 	vmov	r0, s14
 800d5f4:	f7f2 ffb8 	bl	8000568 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800d5f8:	8873      	ldrh	r3, [r6, #2]
 800d5fa:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800d7c4 <Calculate_Lab+0x24c>
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800d606:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800d608:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800d60c:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800d60e:	ee16 0a90 	vmov	r0, s13
 800d612:	f7f2 ffa9 	bl	8000568 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800d616:	88b3      	ldrh	r3, [r6, #4]
 800d618:	ee07 3a90 	vmov	s15, r3
 800d61c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800d620:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800d622:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800d626:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800d628:	ee17 0a10 	vmov	r0, s14
 800d62c:	f7f2 ff9c 	bl	8000568 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800d630:	a35b      	add	r3, pc, #364	; (adr r3, 800d7a0 <Calculate_Lab+0x228>)
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800d636:	4606      	mov	r6, r0
 800d638:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800d63a:	4640      	mov	r0, r8
 800d63c:	4649      	mov	r1, r9
 800d63e:	f7f3 fa77 	bl	8000b30 <__aeabi_dcmpgt>
 800d642:	2800      	cmp	r0, #0
 800d644:	d075      	beq.n	800d732 <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800d646:	ec49 8b10 	vmov	d0, r8, r9
 800d64a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800d7a8 <Calculate_Lab+0x230>
 800d64e:	f012 fab7 	bl	801fbc0 <pow>
 800d652:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800d656:	a352      	add	r3, pc, #328	; (adr r3, 800d7a0 <Calculate_Lab+0x228>)
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	4620      	mov	r0, r4
 800d65e:	4629      	mov	r1, r5
 800d660:	f7f3 fa66 	bl	8000b30 <__aeabi_dcmpgt>
 800d664:	2800      	cmp	r0, #0
 800d666:	d076      	beq.n	800d756 <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800d668:	ec45 4b10 	vmov	d0, r4, r5
 800d66c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800d7a8 <Calculate_Lab+0x230>
 800d670:	f012 faa6 	bl	801fbc0 <pow>
 800d674:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800d678:	a349      	add	r3, pc, #292	; (adr r3, 800d7a0 <Calculate_Lab+0x228>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	4630      	mov	r0, r6
 800d680:	4639      	mov	r1, r7
 800d682:	f7f3 fa55 	bl	8000b30 <__aeabi_dcmpgt>
 800d686:	2800      	cmp	r0, #0
 800d688:	d077      	beq.n	800d77a <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800d68a:	ec47 6b10 	vmov	d0, r6, r7
 800d68e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800d7a8 <Calculate_Lab+0x230>
 800d692:	f012 fa95 	bl	801fbc0 <pow>
 800d696:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800d69a:	2200      	movs	r2, #0
 800d69c:	4b4a      	ldr	r3, [pc, #296]	; (800d7c8 <Calculate_Lab+0x250>)
 800d69e:	f8df a140 	ldr.w	sl, [pc, #320]	; 800d7e0 <Calculate_Lab+0x268>
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	f7f2 ffb3 	bl	8000610 <__aeabi_dmul>
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	4b47      	ldr	r3, [pc, #284]	; (800d7cc <Calculate_Lab+0x254>)
 800d6ae:	f7f2 fdfb 	bl	80002a8 <__aeabi_dsub>
 800d6b2:	f7f3 fa5d 	bl	8000b70 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800d6b6:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800d6b8:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800d6bc:	462b      	mov	r3, r5
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	f7f2 fdf1 	bl	80002a8 <__aeabi_dsub>
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	4b41      	ldr	r3, [pc, #260]	; (800d7d0 <Calculate_Lab+0x258>)
 800d6ca:	f7f2 ffa1 	bl	8000610 <__aeabi_dmul>
 800d6ce:	f7f3 fa4f 	bl	8000b70 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800d6d2:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800d6d4:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800d6d8:	463b      	mov	r3, r7
 800d6da:	4620      	mov	r0, r4
 800d6dc:	4629      	mov	r1, r5
 800d6de:	f7f2 fde3 	bl	80002a8 <__aeabi_dsub>
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	4b3b      	ldr	r3, [pc, #236]	; (800d7d4 <Calculate_Lab+0x25c>)
 800d6e6:	f7f2 ff93 	bl	8000610 <__aeabi_dmul>
 800d6ea:	f7f3 fa41 	bl	8000b70 <__aeabi_d2iz>
	
}
 800d6ee:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800d6f2:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800d6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800d6fa:	2400      	movs	r4, #0
 800d6fc:	e754      	b.n	800d5a8 <Calculate_Lab+0x30>
 800d6fe:	2401      	movs	r4, #1
 800d700:	e752      	b.n	800d5a8 <Calculate_Lab+0x30>
 800d702:	2402      	movs	r4, #2
 800d704:	e750      	b.n	800d5a8 <Calculate_Lab+0x30>
 800d706:	2403      	movs	r4, #3
 800d708:	e74e      	b.n	800d5a8 <Calculate_Lab+0x30>
 800d70a:	2404      	movs	r4, #4
 800d70c:	e74c      	b.n	800d5a8 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800d70e:	2900      	cmp	r1, #0
 800d710:	f47f af67 	bne.w	800d5e2 <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800d714:	4b30      	ldr	r3, [pc, #192]	; (800d7d8 <Calculate_Lab+0x260>)
 800d716:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800d71a:	f7f2 ff13 	bl	8000544 <__aeabi_i2d>
 800d71e:	4b27      	ldr	r3, [pc, #156]	; (800d7bc <Calculate_Lab+0x244>)
 800d720:	2200      	movs	r2, #0
 800d722:	f7f3 f89f 	bl	8000864 <__aeabi_ddiv>
 800d726:	f7f3 fa6b 	bl	8000c00 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800d72a:	4b2c      	ldr	r3, [pc, #176]	; (800d7dc <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800d72c:	ee08 0a90 	vmov	s17, r0
 800d730:	e74b      	b.n	800d5ca <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800d732:	a31f      	add	r3, pc, #124	; (adr r3, 800d7b0 <Calculate_Lab+0x238>)
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	4640      	mov	r0, r8
 800d73a:	4649      	mov	r1, r9
 800d73c:	f7f2 ff68 	bl	8000610 <__aeabi_dmul>
 800d740:	2200      	movs	r2, #0
 800d742:	4b22      	ldr	r3, [pc, #136]	; (800d7cc <Calculate_Lab+0x254>)
 800d744:	f7f2 fdb2 	bl	80002ac <__adddf3>
 800d748:	2200      	movs	r2, #0
 800d74a:	4b1f      	ldr	r3, [pc, #124]	; (800d7c8 <Calculate_Lab+0x250>)
 800d74c:	f7f3 f88a 	bl	8000864 <__aeabi_ddiv>
 800d750:	4680      	mov	r8, r0
 800d752:	4689      	mov	r9, r1
 800d754:	e77f      	b.n	800d656 <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800d756:	a316      	add	r3, pc, #88	; (adr r3, 800d7b0 <Calculate_Lab+0x238>)
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	4620      	mov	r0, r4
 800d75e:	4629      	mov	r1, r5
 800d760:	f7f2 ff56 	bl	8000610 <__aeabi_dmul>
 800d764:	2200      	movs	r2, #0
 800d766:	4b19      	ldr	r3, [pc, #100]	; (800d7cc <Calculate_Lab+0x254>)
 800d768:	f7f2 fda0 	bl	80002ac <__adddf3>
 800d76c:	2200      	movs	r2, #0
 800d76e:	4b16      	ldr	r3, [pc, #88]	; (800d7c8 <Calculate_Lab+0x250>)
 800d770:	f7f3 f878 	bl	8000864 <__aeabi_ddiv>
 800d774:	4604      	mov	r4, r0
 800d776:	460d      	mov	r5, r1
 800d778:	e77e      	b.n	800d678 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800d77a:	a30d      	add	r3, pc, #52	; (adr r3, 800d7b0 <Calculate_Lab+0x238>)
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	4630      	mov	r0, r6
 800d782:	4639      	mov	r1, r7
 800d784:	f7f2 ff44 	bl	8000610 <__aeabi_dmul>
 800d788:	2200      	movs	r2, #0
 800d78a:	4b10      	ldr	r3, [pc, #64]	; (800d7cc <Calculate_Lab+0x254>)
 800d78c:	f7f2 fd8e 	bl	80002ac <__adddf3>
 800d790:	2200      	movs	r2, #0
 800d792:	4b0d      	ldr	r3, [pc, #52]	; (800d7c8 <Calculate_Lab+0x250>)
 800d794:	f7f3 f866 	bl	8000864 <__aeabi_ddiv>
 800d798:	4606      	mov	r6, r0
 800d79a:	460f      	mov	r7, r1
 800d79c:	e77d      	b.n	800d69a <Calculate_Lab+0x122>
 800d79e:	bf00      	nop
 800d7a0:	98de88b7 	.word	0x98de88b7
 800d7a4:	3f822354 	.word	0x3f822354
 800d7a8:	55555555 	.word	0x55555555
 800d7ac:	3fd55555 	.word	0x3fd55555
 800d7b0:	66666666 	.word	0x66666666
 800d7b4:	408c3a66 	.word	0x408c3a66
 800d7b8:	0802161a 	.word	0x0802161a
 800d7bc:	40590000 	.word	0x40590000
 800d7c0:	08021632 	.word	0x08021632
 800d7c4:	42c80000 	.word	0x42c80000
 800d7c8:	405d0000 	.word	0x405d0000
 800d7cc:	40300000 	.word	0x40300000
 800d7d0:	407f4000 	.word	0x407f4000
 800d7d4:	40690000 	.word	0x40690000
 800d7d8:	08021626 	.word	0x08021626
 800d7dc:	0802163e 	.word	0x0802163e
 800d7e0:	2008a7d8 	.word	0x2008a7d8

0800d7e4 <Calculate_Lambda_Dominant>:


void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
 800d7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800d7e8:	b939      	cbnz	r1, 800d7fa <Calculate_Lambda_Dominant+0x16>
	{
		Calculate_XYZ(R_data, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 800d7ea:	4b80      	ldr	r3, [pc, #512]	; (800d9ec <Calculate_Lambda_Dominant+0x208>)
 800d7ec:	4a80      	ldr	r2, [pc, #512]	; (800d9f0 <Calculate_Lambda_Dominant+0x20c>)
 800d7ee:	4981      	ldr	r1, [pc, #516]	; (800d9f4 <Calculate_Lambda_Dominant+0x210>)
 800d7f0:	f7ff fc62 	bl	800d0b8 <Calculate_XYZ>
		Calculate_xy(colorimetry_XYZ);
 800d7f4:	4880      	ldr	r0, [pc, #512]	; (800d9f8 <Calculate_Lambda_Dominant+0x214>)
 800d7f6:	f7ff fcad 	bl	800d154 <Calculate_xy>
	}
	
	x2 = colorimetry_xy[0];
 800d7fa:	4b80      	ldr	r3, [pc, #512]	; (800d9fc <Calculate_Lambda_Dominant+0x218>)
	y2 = colorimetry_xy[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800d7fc:	eddf 7a80 	vldr	s15, [pc, #512]	; 800da00 <Calculate_Lambda_Dominant+0x21c>
	y2 = colorimetry_xy[1];
 800d800:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy[0];
 800d804:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800d808:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800da04 <Calculate_Lambda_Dominant+0x220>
 800d80c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800da08 <Calculate_Lambda_Dominant+0x224>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800d810:	ed9f 5a7e 	vldr	s10, [pc, #504]	; 800da0c <Calculate_Lambda_Dominant+0x228>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800d814:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800d818:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800d81c:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800d820:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800d824:	eea2 7a26 	vfma.f32	s14, s4, s13
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800d828:	eddf 6a79 	vldr	s13, [pc, #484]	; 800da10 <Calculate_Lambda_Dominant+0x22c>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800d82c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800d830:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800d834:	eddf 6a77 	vldr	s13, [pc, #476]	; 800da14 <Calculate_Lambda_Dominant+0x230>
 800d838:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800d83c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800da18 <Calculate_Lambda_Dominant+0x234>
 800d840:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800d844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800d848:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800da1c <Calculate_Lambda_Dominant+0x238>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800d84c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800d850:	ee77 6a46 	vsub.f32	s13, s14, s12
 800d854:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800da20 <Calculate_Lambda_Dominant+0x23c>
 800d858:	ee35 5a65 	vsub.f32	s10, s10, s11
 800d85c:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800d860:	eddf 6a70 	vldr	s13, [pc, #448]	; 800da24 <Calculate_Lambda_Dominant+0x240>
 800d864:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800d868:	bfcc      	ite	gt
 800d86a:	2201      	movgt	r2, #1
 800d86c:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800d870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800d874:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800d878:	bfcc      	ite	gt
 800d87a:	2101      	movgt	r1, #1
 800d87c:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800d880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d884:	bfcc      	ite	gt
 800d886:	2301      	movgt	r3, #1
 800d888:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800d88c:	428a      	cmp	r2, r1
 800d88e:	f040 80a1 	bne.w	800d9d4 <Calculate_Lambda_Dominant+0x1f0>
 800d892:	429a      	cmp	r2, r3
 800d894:	bf14      	ite	ne
 800d896:	2201      	movne	r2, #1
 800d898:	f04f 32ff 	moveq.w	r2, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d89c:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800d8a0:	4861      	ldr	r0, [pc, #388]	; (800da28 <Calculate_Lambda_Dominant+0x244>)
 800d8a2:	4c62      	ldr	r4, [pc, #392]	; (800da2c <Calculate_Lambda_Dominant+0x248>)
 800d8a4:	4b62      	ldr	r3, [pc, #392]	; (800da30 <Calculate_Lambda_Dominant+0x24c>)
 800d8a6:	8805      	ldrh	r5, [r0, #0]
 800d8a8:	f8b4 c000 	ldrh.w	ip, [r4]
 800d8ac:	f8df e188 	ldr.w	lr, [pc, #392]	; 800da38 <Calculate_Lambda_Dominant+0x254>
 800d8b0:	4f60      	ldr	r7, [pc, #384]	; (800da34 <Calculate_Lambda_Dominant+0x250>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800d8b2:	eddf 0a53 	vldr	s1, [pc, #332]	; 800da00 <Calculate_Lambda_Dominant+0x21c>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d8b6:	eee6 3a27 	vfma.f32	s7, s12, s15
 800d8ba:	2600      	movs	r6, #0
 800d8bc:	f103 0982 	add.w	r9, r3, #130	; 0x82
 800d8c0:	46b0      	mov	r8, r6
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d8c2:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800d8c6:	ed97 6a00 	vldr	s12, [r7]
 800d8ca:	edde 6a00 	vldr	s13, [lr]
 800d8ce:	ed97 4a01 	vldr	s8, [r7, #4]
 800d8d2:	ed9e 5a01 	vldr	s10, [lr, #4]
 800d8d6:	3704      	adds	r7, #4
 800d8d8:	f10e 0e04 	add.w	lr, lr, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d8dc:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800d8e0:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d8e4:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800d8e8:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800d8ec:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d8f0:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800d8f4:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d8f8:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800d8fc:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d900:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800d904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d908:	bf54      	ite	pl
 800d90a:	eeb0 1a44 	vmovpl.f32	s2, s8
 800d90e:	eeb0 1a46 	vmovmi.f32	s2, s12
 800d912:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800d916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d91a:	d54f      	bpl.n	800d9bc <Calculate_Lambda_Dominant+0x1d8>
 800d91c:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800d920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d924:	bfd8      	it	le
 800d926:	eeb0 6a44 	vmovle.f32	s12, s8
 800d92a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800d92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d932:	dd43      	ble.n	800d9bc <Calculate_Lambda_Dominant+0x1d8>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d934:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800d938:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d93c:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800d940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800d944:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800d948:	bf54      	ite	pl
 800d94a:	eeb0 4a45 	vmovpl.f32	s8, s10
 800d94e:	eeb0 4a66 	vmovmi.f32	s8, s13
 800d952:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800d956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95a:	d52f      	bpl.n	800d9bc <Calculate_Lambda_Dominant+0x1d8>
 800d95c:	eef4 6ac5 	vcmpe.f32	s13, s10
 800d960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d964:	bfd8      	it	le
 800d966:	eef0 6a45 	vmovle.f32	s13, s10
 800d96a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d972:	dd23      	ble.n	800d9bc <Calculate_Lambda_Dominant+0x1d8>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800d974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97c:	bf54      	ite	pl
 800d97e:	eef0 6a60 	vmovpl.f32	s13, s1
 800d982:	eef0 6a47 	vmovmi.f32	s13, s14
 800d986:	eef4 6ae5 	vcmpe.f32	s13, s11
 800d98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98e:	d523      	bpl.n	800d9d8 <Calculate_Lambda_Dominant+0x1f4>
 800d990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d998:	bfd8      	it	le
 800d99a:	eeb0 7a60 	vmovle.f32	s14, s1
 800d99e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800d9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a6:	bfcc      	ite	gt
 800d9a8:	2101      	movgt	r1, #1
 800d9aa:	f04f 31ff 	movle.w	r1, #4294967295
			
			if((ld*triangle_out) > 0)
 800d9ae:	fb11 f102 	smulbb	r1, r1, r2
 800d9b2:	2901      	cmp	r1, #1
 800d9b4:	d113      	bne.n	800d9de <Calculate_Lambda_Dominant+0x1fa>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800d9b6:	f8b3 c000 	ldrh.w	ip, [r3]
 800d9ba:	4688      	mov	r8, r1
 800d9bc:	3302      	adds	r3, #2
	for(uint8_t i = 0; i < 65; i++)
 800d9be:	4599      	cmp	r9, r3
 800d9c0:	d181      	bne.n	800d8c6 <Calculate_Lambda_Dominant+0xe2>
 800d9c2:	f1b8 0f00 	cmp.w	r8, #0
 800d9c6:	d001      	beq.n	800d9cc <Calculate_Lambda_Dominant+0x1e8>
 800d9c8:	f8a4 c000 	strh.w	ip, [r4]
 800d9cc:	b106      	cbz	r6, 800d9d0 <Calculate_Lambda_Dominant+0x1ec>
 800d9ce:	8005      	strh	r5, [r0, #0]
 800d9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	e761      	b.n	800d89c <Calculate_Lambda_Dominant+0xb8>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800d9d8:	f04f 31ff 	mov.w	r1, #4294967295
 800d9dc:	e7e7      	b.n	800d9ae <Calculate_Lambda_Dominant+0x1ca>
			} else {
				lambda_c_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800d9de:	1c55      	adds	r5, r2, #1
 800d9e0:	bf14      	ite	ne
 800d9e2:	881d      	ldrhne	r5, [r3, #0]
 800d9e4:	2500      	moveq	r5, #0
 800d9e6:	2601      	movs	r6, #1
 800d9e8:	e7e8      	b.n	800d9bc <Calculate_Lambda_Dominant+0x1d8>
 800d9ea:	bf00      	nop
 800d9ec:	200887d0 	.word	0x200887d0
 800d9f0:	200877d0 	.word	0x200877d0
 800d9f4:	200857d0 	.word	0x200857d0
 800d9f8:	2008a7de 	.word	0x2008a7de
 800d9fc:	2008a7f4 	.word	0x2008a7f4
 800da00:	3eaaa64c 	.word	0x3eaaa64c
 800da04:	be1fd4b2 	.word	0xbe1fd4b2
 800da08:	beaaa64c 	.word	0xbeaaa64c
 800da0c:	3e3577e6 	.word	0x3e3577e6
 800da10:	00000000 	.word	0x00000000
 800da14:	3f0eeab2 	.word	0x3f0eeab2
 800da18:	3e876ea8 	.word	0x3e876ea8
 800da1c:	3f3c48ac 	.word	0x3f3c48ac
 800da20:	becdeb0c 	.word	0xbecdeb0c
 800da24:	3d8cde90 	.word	0x3d8cde90
 800da28:	2008feec 	.word	0x2008feec
 800da2c:	2008ffd0 	.word	0x2008ffd0
 800da30:	0802164c 	.word	0x0802164c
 800da34:	08021844 	.word	0x08021844
 800da38:	0802194c 	.word	0x0802194c

0800da3c <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;
int16_t Calculate_deltaEab()
{
	if((Measure_Field&CIE_Lab) == 0){
 800da3c:	4b2a      	ldr	r3, [pc, #168]	; (800dae8 <Calculate_deltaEab+0xac>)
 800da3e:	881b      	ldrh	r3, [r3, #0]
 800da40:	061b      	lsls	r3, r3, #24
{
 800da42:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800da44:	d406      	bmi.n	800da54 <Calculate_deltaEab+0x18>
		Calculate_Lab(colorimetry_XYZ, Measure_Color_xy, Source_Type);
 800da46:	4b29      	ldr	r3, [pc, #164]	; (800daec <Calculate_deltaEab+0xb0>)
 800da48:	4829      	ldr	r0, [pc, #164]	; (800daf0 <Calculate_deltaEab+0xb4>)
 800da4a:	781a      	ldrb	r2, [r3, #0]
 800da4c:	4b29      	ldr	r3, [pc, #164]	; (800daf4 <Calculate_deltaEab+0xb8>)
 800da4e:	7819      	ldrb	r1, [r3, #0]
 800da50:	f7ff fd92 	bl	800d578 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800da54:	4a28      	ldr	r2, [pc, #160]	; (800daf8 <Calculate_deltaEab+0xbc>)
 800da56:	f9b2 3000 	ldrsh.w	r3, [r2]
 800da5a:	ee06 3a90 	vmov	s13, r3
 800da5e:	4b27      	ldr	r3, [pc, #156]	; (800dafc <Calculate_deltaEab+0xc0>)
 800da60:	f9b3 1000 	ldrsh.w	r1, [r3]
 800da64:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800da68:	ee06 1a90 	vmov	s13, r1
 800da6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800da70:	4923      	ldr	r1, [pc, #140]	; (800db00 <Calculate_deltaEab+0xc4>)
 800da72:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800da76:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800da7a:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800da7e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800da82:	ee00 1a10 	vmov	s0, r1
 800da86:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800da8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800da8e:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800da92:	ee00 1a10 	vmov	s0, r1
 800da96:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800da9a:	491a      	ldr	r1, [pc, #104]	; (800db04 <Calculate_deltaEab+0xc8>)
 800da9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800daa0:	ee07 2a90 	vmov	s15, r2
 800daa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800daa8:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800daac:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800dab0:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800dab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800dab8:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800dabc:	4b12      	ldr	r3, [pc, #72]	; (800db08 <Calculate_deltaEab+0xcc>)
 800dabe:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800dac2:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800dac4:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800dac8:	4b10      	ldr	r3, [pc, #64]	; (800db0c <Calculate_deltaEab+0xd0>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800daca:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800dace:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800dad0:	f012 fa48 	bl	801ff64 <sqrtf>
 800dad4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dad8:	edcd 7a01 	vstr	s15, [sp, #4]
 800dadc:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800dae0:	b003      	add	sp, #12
 800dae2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dae6:	bf00      	nop
 800dae8:	20004ca6 	.word	0x20004ca6
 800daec:	2008acd9 	.word	0x2008acd9
 800daf0:	2008a7de 	.word	0x2008a7de
 800daf4:	20004ca4 	.word	0x20004ca4
 800daf8:	2008a7d8 	.word	0x2008a7d8
 800dafc:	2008b268 	.word	0x2008b268
 800db00:	2008acb8 	.word	0x2008acb8
 800db04:	2008acb0 	.word	0x2008acb0
 800db08:	2008acc8 	.word	0x2008acc8
 800db0c:	20004c41 	.word	0x20004c41

0800db10 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800db10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800db12:	2903      	cmp	r1, #3
{
 800db14:	460c      	mov	r4, r1
 800db16:	bf88      	it	hi
 800db18:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800db1c:	f7fd f947 	bl	800adae <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800db20:	aa04      	add	r2, sp, #16
 800db22:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800db26:	ca03      	ldmia	r2!, {r0, r1}
 800db28:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <Calibration_Load_2byte+0x44>)
 800db2a:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800db2c:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800db2e:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800db30:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800db34:	881a      	ldrh	r2, [r3, #0]
 800db36:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800db3a:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800db3c:	889b      	ldrh	r3, [r3, #4]
 800db3e:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800db42:	ab04      	add	r3, sp, #16
 800db44:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800db48:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800db4c:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800db50:	b004      	add	sp, #16
 800db52:	bd10      	pop	{r4, pc}
 800db54:	20004c80 	.word	0x20004c80

0800db58 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800db58:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800db5a:	2907      	cmp	r1, #7
{
 800db5c:	b085      	sub	sp, #20
 800db5e:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800db60:	bf84      	itt	hi
 800db62:	f1a1 0408 	subhi.w	r4, r1, #8
 800db66:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800db68:	f7fd f921 	bl	800adae <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800db6c:	e9cd 0100 	strd	r0, r1, [sp]
 800db70:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800db74:	ab04      	add	r3, sp, #16
 800db76:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800db7a:	4b0f      	ldr	r3, [pc, #60]	; (800dbb8 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800db7c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800db80:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800db84:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800db88:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800db8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800db90:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800db94:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800db98:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800db9c:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800dba0:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800dba4:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800dba6:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800dba8:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800dbaa:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800dbac:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800dbae:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800dbb0:	5d18      	ldrb	r0, [r3, r4]
 800dbb2:	b005      	add	sp, #20
 800dbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20004c94 	.word	0x20004c94

0800dbbc <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800dbbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800dbbe:	f7fd f8f6 	bl	800adae <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800dbc2:	e9cd 0100 	strd	r0, r1, [sp]
 800dbc6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800dbca:	ab04      	add	r3, sp, #16
 800dbcc:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800dbd0:	9b02      	ldr	r3, [sp, #8]
 800dbd2:	ba1b      	rev	r3, r3
}
 800dbd4:	ee00 3a10 	vmov	s0, r3
 800dbd8:	b005      	add	sp, #20
 800dbda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800dbe0 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800dbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800dbe4:	f8df a078 	ldr.w	sl, [pc, #120]	; 800dc60 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800dbe8:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800dc58 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800dbec:	4c19      	ldr	r4, [pc, #100]	; (800dc54 <Calibration_Load_Pack+0x74>)
{
 800dbee:	4681      	mov	r9, r0
 800dbf0:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800dbf2:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800dbf6:	2500      	movs	r5, #0
 800dbf8:	00ae      	lsls	r6, r5, #2
 800dbfa:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800dbfc:	4540      	cmp	r0, r8
 800dbfe:	db01      	blt.n	800dc04 <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800dc00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800dc04:	4448      	add	r0, r9
 800dc06:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800dc0a:	f7fd f8d0 	bl	800adae <flash_data_read_buff>
 800dc0e:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800dc12:	4b11      	ldr	r3, [pc, #68]	; (800dc58 <Calibration_Load_Pack+0x78>)
 800dc14:	cb03      	ldmia	r3!, {r0, r1}
 800dc16:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800dc18:	7863      	ldrb	r3, [r4, #1]
 800dc1a:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800dc1c:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800dc1e:	041b      	lsls	r3, r3, #16
 800dc20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc24:	78e2      	ldrb	r2, [r4, #3]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	78a2      	ldrb	r2, [r4, #2]
 800dc2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800dc2e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800dc32:	7963      	ldrb	r3, [r4, #5]
 800dc34:	7922      	ldrb	r2, [r4, #4]
 800dc36:	041b      	lsls	r3, r3, #16
 800dc38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc3c:	79e2      	ldrb	r2, [r4, #7]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800dc42:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800dc44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc48:	4a04      	ldr	r2, [pc, #16]	; (800dc5c <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800dc4a:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800dc4c:	6013      	str	r3, [r2, #0]
		idx+=2;
 800dc4e:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800dc50:	6073      	str	r3, [r6, #4]
 800dc52:	e7d1      	b.n	800dbf8 <Calibration_Load_Pack+0x18>
 800dc54:	20004c88 	.word	0x20004c88
 800dc58:	20004c78 	.word	0x20004c78
 800dc5c:	20004c90 	.word	0x20004c90
 800dc60:	2008acd0 	.word	0x2008acd0

0800dc64 <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800dc68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800dc6c:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800dc70:	4629      	mov	r1, r5
 800dc72:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800dc76:	f7ff ff6f 	bl	800db58 <Calibration_Load_1byte>
 800dc7a:	ee07 0a90 	vmov	s15, r0
 800dc7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800dc86:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800dc8a:	08a8      	lsrs	r0, r5, #2
 800dc8c:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800dc90:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800dc94:	4b0d      	ldr	r3, [pc, #52]	; (800dccc <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800dc96:	00c4      	lsls	r4, r0, #3
 800dc98:	4629      	mov	r1, r5
 800dc9a:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800dc9c:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800dca0:	f7ff ff36 	bl	800db10 <Calibration_Load_2byte>
 800dca4:	4b0a      	ldr	r3, [pc, #40]	; (800dcd0 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800dca6:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800dca8:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800dcaa:	f104 0014 	add.w	r0, r4, #20
 800dcae:	f7ff ff2f 	bl	800db10 <Calibration_Load_2byte>
 800dcb2:	ee07 0a90 	vmov	s15, r0
 800dcb6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800dcd4 <Calibration_Exposure_Change+0x70>
 800dcba:	4b07      	ldr	r3, [pc, #28]	; (800dcd8 <Calibration_Exposure_Change+0x74>)
 800dcbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcc4:	edc3 7a00 	vstr	s15, [r3]
 800dcc8:	bd38      	pop	{r3, r4, r5, pc}
 800dcca:	bf00      	nop
 800dccc:	2004cbfc 	.word	0x2004cbfc
 800dcd0:	20004fe2 	.word	0x20004fe2
 800dcd4:	42c80000 	.word	0x42c80000
 800dcd8:	20004fec 	.word	0x20004fec
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800dce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800dce4:	a717      	add	r7, pc, #92	; (adr r7, 800dd44 <Calibration_WaveLenght_Graph+0x64>)
 800dce6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800dcea:	f8df a060 	ldr.w	sl, [pc, #96]	; 800dd4c <Calibration_WaveLenght_Graph+0x6c>
 800dcee:	4d14      	ldr	r5, [pc, #80]	; (800dd40 <Calibration_WaveLenght_Graph+0x60>)
 800dcf0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800dd50 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800dcf4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800dd54 <Calibration_WaveLenght_Graph+0x74>
{
 800dcf8:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800dcfc:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800dd00:	2100      	movs	r1, #0
 800dd02:	4620      	mov	r0, r4
 800dd04:	f7ff ff04 	bl	800db10 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800dd08:	ee07 0a90 	vmov	s15, r0
 800dd0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800dd10:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800dd14:	ee17 0a90 	vmov	r0, s15
 800dd18:	f7f2 fc26 	bl	8000568 <__aeabi_f2d>
 800dd1c:	4642      	mov	r2, r8
 800dd1e:	464b      	mov	r3, r9
 800dd20:	f7f2 fda0 	bl	8000864 <__aeabi_ddiv>
 800dd24:	4632      	mov	r2, r6
 800dd26:	463b      	mov	r3, r7
 800dd28:	f7f2 fac0 	bl	80002ac <__adddf3>
 800dd2c:	f7f2 ff68 	bl	8000c00 <__aeabi_d2f>
 800dd30:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800dd34:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800dd36:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800dd3a:	d1e1      	bne.n	800dd00 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800dd3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd40:	20004fc0 	.word	0x20004fc0
 800dd44:	00000000 	.word	0x00000000
 800dd48:	4072c000 	.word	0x4072c000
 800dd4c:	20050c02 	.word	0x20050c02
 800dd50:	40590000 	.word	0x40590000
 800dd54:	08100920 	.word	0x08100920

0800dd58 <GUI_OptionMenuRu>:
uint8_t screen_count = 0, screen_count_old = 0, state_Measure_Elements = 0;
sImage Locus;
extern volatile uint8_t TFT_direction;

void GUI_OptionMenuRu()
{	
 800dd58:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800dd5a:	2156      	movs	r1, #86	; 0x56
 800dd5c:	200a      	movs	r0, #10
 800dd5e:	f00a f881 	bl	8017e64 <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800dd62:	2156      	movs	r1, #86	; 0x56
 800dd64:	2076      	movs	r0, #118	; 0x76
 800dd66:	f00a f8af 	bl	8017ec8 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800dd6a:	2156      	movs	r1, #86	; 0x56
 800dd6c:	20da      	movs	r0, #218	; 0xda
 800dd6e:	f006 fa5a 	bl	8014226 <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800dd72:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800dd76:	2378      	movs	r3, #120	; 0x78
 800dd78:	4619      	mov	r1, r3
 800dd7a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800dd7e:	9400      	str	r4, [sp, #0]
 800dd80:	200a      	movs	r0, #10
 800dd82:	f00d fccd 	bl	801b720 <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800dd86:	2191      	movs	r1, #145	; 0x91
 800dd88:	200a      	movs	r0, #10
 800dd8a:	f00a f8e5 	bl	8017f58 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800dd8e:	23b7      	movs	r3, #183	; 0xb7
 800dd90:	4619      	mov	r1, r3
 800dd92:	f44f 7283 	mov.w	r2, #262	; 0x106
 800dd96:	9400      	str	r4, [sp, #0]
 800dd98:	200a      	movs	r0, #10
 800dd9a:	f00d fcc1 	bl	801b720 <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800dd9e:	21d1      	movs	r1, #209	; 0xd1
 800dda0:	200a      	movs	r0, #10
 800dda2:	f00a f97b 	bl	801809c <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800dda6:	4b21      	ldr	r3, [pc, #132]	; (800de2c <GUI_OptionMenuRu+0xd4>)
 800dda8:	21ca      	movs	r1, #202	; 0xca
 800ddaa:	781a      	ldrb	r2, [r3, #0]
 800ddac:	20b6      	movs	r0, #182	; 0xb6
 800ddae:	f006 fa01 	bl	80141b4 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f00d ff40 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800ddb8:	2063      	movs	r0, #99	; 0x63
 800ddba:	f00d ff43 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800ddbe:	481c      	ldr	r0, [pc, #112]	; (800de30 <GUI_OptionMenuRu+0xd8>)
 800ddc0:	f00d ff34 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800ddc4:	2245      	movs	r2, #69	; 0x45
 800ddc6:	21d2      	movs	r1, #210	; 0xd2
 800ddc8:	20e1      	movs	r0, #225	; 0xe1
 800ddca:	f00d fff9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800ddce:	224c      	movs	r2, #76	; 0x4c
 800ddd0:	21d2      	movs	r1, #210	; 0xd2
 800ddd2:	209b      	movs	r0, #155	; 0x9b
 800ddd4:	f00d fff4 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ddd8:	23f8      	movs	r3, #248	; 0xf8
 800ddda:	4619      	mov	r1, r3
 800dddc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800dde0:	9400      	str	r4, [sp, #0]
 800dde2:	200a      	movs	r0, #10
 800dde4:	f00d fc9c 	bl	801b720 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800dde8:	f240 1113 	movw	r1, #275	; 0x113
 800ddec:	200a      	movs	r0, #10
 800ddee:	f008 fd61 	bl	80168b4 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ddf2:	4b10      	ldr	r3, [pc, #64]	; (800de34 <GUI_OptionMenuRu+0xdc>)
 800ddf4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ddf8:	781a      	ldrb	r2, [r3, #0]
 800ddfa:	20b6      	movs	r0, #182	; 0xb6
 800ddfc:	f006 f980 	bl	8014100 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800de00:	f240 1113 	movw	r1, #275	; 0x113
 800de04:	20de      	movs	r0, #222	; 0xde
 800de06:	f009 f833 	bl	8016e70 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800de0a:	f240 1113 	movw	r1, #275	; 0x113
 800de0e:	208c      	movs	r0, #140	; 0x8c
 800de10:	f009 f852 	bl	8016eb8 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800de14:	f240 1339 	movw	r3, #313	; 0x139
 800de18:	9400      	str	r4, [sp, #0]
 800de1a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800de1e:	4619      	mov	r1, r3
 800de20:	200a      	movs	r0, #10
 800de22:	f00d fc7d 	bl	801b720 <TFT_DrawLine>
}
 800de26:	b002      	add	sp, #8
 800de28:	bd10      	pop	{r4, pc}
 800de2a:	bf00      	nop
 800de2c:	20000a50 	.word	0x20000a50
 800de30:	200001b0 	.word	0x200001b0
 800de34:	2008acda 	.word	0x2008acda

0800de38 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800de38:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800de3a:	2158      	movs	r1, #88	; 0x58
 800de3c:	200a      	movs	r0, #10
 800de3e:	f009 f8db 	bl	8016ff8 <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800de42:	2158      	movs	r1, #88	; 0x58
 800de44:	207f      	movs	r0, #127	; 0x7f
 800de46:	f009 f925 	bl	8017094 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800de4a:	2156      	movs	r1, #86	; 0x56
 800de4c:	20da      	movs	r0, #218	; 0xda
 800de4e:	f006 fa14 	bl	801427a <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800de52:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800de56:	2378      	movs	r3, #120	; 0x78
 800de58:	4619      	mov	r1, r3
 800de5a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800de5e:	9400      	str	r4, [sp, #0]
 800de60:	200a      	movs	r0, #10
 800de62:	f00d fc5d 	bl	801b720 <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800de66:	2193      	movs	r1, #147	; 0x93
 800de68:	200a      	movs	r0, #10
 800de6a:	f009 f95b 	bl	8017124 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800de6e:	23b7      	movs	r3, #183	; 0xb7
 800de70:	4619      	mov	r1, r3
 800de72:	f44f 7283 	mov.w	r2, #262	; 0x106
 800de76:	9400      	str	r4, [sp, #0]
 800de78:	200a      	movs	r0, #10
 800de7a:	f00d fc51 	bl	801b720 <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800de7e:	21d3      	movs	r1, #211	; 0xd3
 800de80:	200a      	movs	r0, #10
 800de82:	f009 fae5 	bl	8017450 <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800de86:	4b21      	ldr	r3, [pc, #132]	; (800df0c <GUI_OptionMenuEn+0xd4>)
 800de88:	21ca      	movs	r1, #202	; 0xca
 800de8a:	781a      	ldrb	r2, [r3, #0]
 800de8c:	20b6      	movs	r0, #182	; 0xb6
 800de8e:	f006 f991 	bl	80141b4 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800de92:	4620      	mov	r0, r4
 800de94:	f00d fed0 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800de98:	2063      	movs	r0, #99	; 0x63
 800de9a:	f00d fed3 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800de9e:	481c      	ldr	r0, [pc, #112]	; (800df10 <GUI_OptionMenuEn+0xd8>)
 800dea0:	f00d fec4 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800dea4:	2245      	movs	r2, #69	; 0x45
 800dea6:	21d2      	movs	r1, #210	; 0xd2
 800dea8:	20e1      	movs	r0, #225	; 0xe1
 800deaa:	f00d ff89 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800deae:	224c      	movs	r2, #76	; 0x4c
 800deb0:	21d2      	movs	r1, #210	; 0xd2
 800deb2:	209b      	movs	r0, #155	; 0x9b
 800deb4:	f00d ff84 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800deb8:	23f8      	movs	r3, #248	; 0xf8
 800deba:	4619      	mov	r1, r3
 800debc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800dec0:	9400      	str	r4, [sp, #0]
 800dec2:	200a      	movs	r0, #10
 800dec4:	f00d fc2c 	bl	801b720 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800dec8:	f240 1113 	movw	r1, #275	; 0x113
 800decc:	200a      	movs	r0, #10
 800dece:	f008 fcf1 	bl	80168b4 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ded2:	4b10      	ldr	r3, [pc, #64]	; (800df14 <GUI_OptionMenuEn+0xdc>)
 800ded4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ded8:	781a      	ldrb	r2, [r3, #0]
 800deda:	20b6      	movs	r0, #182	; 0xb6
 800dedc:	f006 f910 	bl	8014100 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800dee0:	f240 1113 	movw	r1, #275	; 0x113
 800dee4:	20de      	movs	r0, #222	; 0xde
 800dee6:	f008 ffc3 	bl	8016e70 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800deea:	f240 1113 	movw	r1, #275	; 0x113
 800deee:	208c      	movs	r0, #140	; 0x8c
 800def0:	f008 ffe2 	bl	8016eb8 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800def4:	f240 1339 	movw	r3, #313	; 0x139
 800def8:	9400      	str	r4, [sp, #0]
 800defa:	f44f 7283 	mov.w	r2, #262	; 0x106
 800defe:	4619      	mov	r1, r3
 800df00:	200a      	movs	r0, #10
 800df02:	f00d fc0d 	bl	801b720 <TFT_DrawLine>
}
 800df06:	b002      	add	sp, #8
 800df08:	bd10      	pop	{r4, pc}
 800df0a:	bf00      	nop
 800df0c:	20000a50 	.word	0x20000a50
 800df10:	200001b0 	.word	0x200001b0
 800df14:	2008acda 	.word	0x2008acda

0800df18 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800df18:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800df1a:	2084      	movs	r0, #132	; 0x84
 800df1c:	f00d fa5e 	bl	801b3dc <TFT_FillScreen_DMA>
	GUI_TitleString_Name(50, 330);
 800df20:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800df24:	2032      	movs	r0, #50	; 0x32
 800df26:	f009 fef1 	bl	8017d0c <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420);
 800df2a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800df2e:	20b4      	movs	r0, #180	; 0xb4
 800df30:	f009 ff60 	bl	8017df4 <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800df34:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800df38:	f8ad 3000 	strh.w	r3, [sp]
 800df3c:	23b5      	movs	r3, #181	; 0xb5
 800df3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800df42:	4b08      	ldr	r3, [pc, #32]	; (800df64 <GUI_Title_Screen+0x4c>)
 800df44:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800df46:	ab02      	add	r3, sp, #8
 800df48:	e913 000c 	ldmdb	r3, {r2, r3}
 800df4c:	2164      	movs	r1, #100	; 0x64
 800df4e:	2000      	movs	r0, #0
 800df50:	f00d fe45 	bl	801bbde <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800df54:	4a04      	ldr	r2, [pc, #16]	; (800df68 <GUI_Title_Screen+0x50>)
 800df56:	7813      	ldrb	r3, [r2, #0]
 800df58:	f043 0301 	orr.w	r3, r3, #1
 800df5c:	7013      	strb	r3, [r2, #0]
}
 800df5e:	b003      	add	sp, #12
 800df60:	f85d fb04 	ldr.w	pc, [sp], #4
 800df64:	20050c0e 	.word	0x20050c0e
 800df68:	20004ca4 	.word	0x20004ca4

0800df6c <Measure_Elements_Draw>:
	}
		Prev_Inf_Screen = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800df6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 50, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800df70:	4dad      	ldr	r5, [pc, #692]	; (800e228 <Measure_Elements_Draw+0x2bc>)
 800df72:	4fae      	ldr	r7, [pc, #696]	; (800e22c <Measure_Elements_Draw+0x2c0>)
{	
 800df74:	4606      	mov	r6, r0
	uint16_t Y = 50, limit = 410;
 800df76:	2432      	movs	r4, #50	; 0x32
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800df78:	2e0e      	cmp	r6, #14
 800df7a:	f200 809e 	bhi.w	800e0ba <Measure_Elements_Draw+0x14e>
		screen_count_old = screen_count;
 800df7e:	782b      	ldrb	r3, [r5, #0]
 800df80:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800df82:	2e0d      	cmp	r6, #13
 800df84:	f200 8091 	bhi.w	800e0aa <Measure_Elements_Draw+0x13e>
 800df88:	e8df f016 	tbh	[pc, r6, lsl #1]
 800df8c:	0037000e 	.word	0x0037000e
 800df90:	00690059 	.word	0x00690059
 800df94:	00ba009a 	.word	0x00ba009a
 800df98:	00ed00ce 	.word	0x00ed00ce
 800df9c:	011100ff 	.word	0x011100ff
 800dfa0:	013a0127 	.word	0x013a0127
 800dfa4:	01910176 	.word	0x01910176
					case 0: if(Measure_Field&Illuminance){
 800dfa8:	4aa1      	ldr	r2, [pc, #644]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800dfaa:	8812      	ldrh	r2, [r2, #0]
 800dfac:	07d1      	lsls	r1, r2, #31
 800dfae:	d57c      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+35 <= limit){
 800dfb0:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800dfb4:	f280 818b 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
						Y+=35;
					Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0):GUI_Text_L_Measure(20, Y, E_day, 0); 
 800dfb8:	4b9e      	ldr	r3, [pc, #632]	; (800e234 <Measure_Elements_Draw+0x2c8>)
 800dfba:	781a      	ldrb	r2, [r3, #0]
 800dfbc:	4b9e      	ldr	r3, [pc, #632]	; (800e238 <Measure_Elements_Draw+0x2cc>)
						Y+=35;
 800dfbe:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800dfc2:	b289      	uxth	r1, r1
					Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0):GUI_Text_L_Measure(20, Y, E_day, 0); 
 800dfc4:	b19a      	cbz	r2, 800dfee <Measure_Elements_Draw+0x82>
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	ed93 0a00 	vldr	s0, [r3]
 800dfcc:	2014      	movs	r0, #20
 800dfce:	f006 fa75 	bl	80144bc <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&EbEr){
					if(Y+70 <= limit){
						Mode_EL ?	 GUI_Text_EbEr_Measure(10, Y, ELb_Measure, ELr_Measure):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure); 
									Y+=70;
 800dfd2:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800dfd6:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800dfd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfdc:	9200      	str	r2, [sp, #0]
 800dfde:	4619      	mov	r1, r3
 800dfe0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800dfe4:	200a      	movs	r0, #10
 800dfe6:	f00d fb9b 	bl	801b720 <TFT_DrawLine>
									Y+=10;
 800dfea:	3450      	adds	r4, #80	; 0x50
 800dfec:	e05c      	b.n	800e0a8 <Measure_Elements_Draw+0x13c>
					Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0):GUI_Text_L_Measure(20, Y, E_day, 0); 
 800dfee:	ed93 0a00 	vldr	s0, [r3]
 800dff2:	2014      	movs	r0, #20
 800dff4:	f006 fbda 	bl	80147ac <GUI_Text_L_Measure>
 800dff8:	e7eb      	b.n	800dfd2 <Measure_Elements_Draw+0x66>
				case 1: if(Measure_Field&Irradiance){
 800dffa:	4a8d      	ldr	r2, [pc, #564]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800dffc:	8812      	ldrh	r2, [r2, #0]
 800dffe:	0792      	lsls	r2, r2, #30
 800e000:	d553      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+35 <= limit){
 800e002:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800e006:	f280 8162 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1):GUI_Text_L_Measure(20, Y, E_day_Wt, 1); 
 800e00a:	4b8a      	ldr	r3, [pc, #552]	; (800e234 <Measure_Elements_Draw+0x2c8>)
 800e00c:	781a      	ldrb	r2, [r3, #0]
 800e00e:	4b8b      	ldr	r3, [pc, #556]	; (800e23c <Measure_Elements_Draw+0x2d0>)
 800e010:	b16a      	cbz	r2, 800e02e <Measure_Elements_Draw+0xc2>
 800e012:	2201      	movs	r2, #1
 800e014:	ed93 0a00 	vldr	s0, [r3]
 800e018:	4621      	mov	r1, r4
 800e01a:	2014      	movs	r0, #20
 800e01c:	f006 fa4e 	bl	80144bc <GUI_Text_E_Measure>
							}else {screen_count++;}} break;
				case 13: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure); 
									Y+=35;
 800e020:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800e024:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800e028:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800e02a:	9200      	str	r2, [sp, #0]
 800e02c:	e060      	b.n	800e0f0 <Measure_Elements_Draw+0x184>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1):GUI_Text_L_Measure(20, Y, E_day_Wt, 1); 
 800e02e:	2201      	movs	r2, #1
 800e030:	ed93 0a00 	vldr	s0, [r3]
 800e034:	4621      	mov	r1, r4
 800e036:	2014      	movs	r0, #20
 800e038:	f006 fbb8 	bl	80147ac <GUI_Text_L_Measure>
 800e03c:	e7f0      	b.n	800e020 <Measure_Elements_Draw+0xb4>
				case 2: if(Measure_Field&PPFD){
 800e03e:	4a7c      	ldr	r2, [pc, #496]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e040:	8812      	ldrh	r2, [r2, #0]
 800e042:	0750      	lsls	r0, r2, #29
 800e044:	d531      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
						if(Y+35 <= limit){
 800e046:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800e04a:	f280 8140 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure);
 800e04e:	4b7c      	ldr	r3, [pc, #496]	; (800e240 <Measure_Elements_Draw+0x2d4>)
 800e050:	4621      	mov	r1, r4
 800e052:	ed93 0a00 	vldr	s0, [r3]
 800e056:	2014      	movs	r0, #20
 800e058:	f006 fcf8 	bl	8014a4c <GUI_Text_PPF_Measure>
 800e05c:	e7e0      	b.n	800e020 <Measure_Elements_Draw+0xb4>
				case 3: if(Measure_Field&PPFD_BGR){
 800e05e:	4a74      	ldr	r2, [pc, #464]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e060:	8812      	ldrh	r2, [r2, #0]
 800e062:	0711      	lsls	r1, r2, #28
 800e064:	d521      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
						if(Y+95 <= limit){
 800e066:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800e06a:	f280 8130 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure);
 800e06e:	4b75      	ldr	r3, [pc, #468]	; (800e244 <Measure_Elements_Draw+0x2d8>)
 800e070:	edd3 1a00 	vldr	s3, [r3]
 800e074:	4b74      	ldr	r3, [pc, #464]	; (800e248 <Measure_Elements_Draw+0x2dc>)
 800e076:	ed93 1a00 	vldr	s2, [r3]
 800e07a:	4b74      	ldr	r3, [pc, #464]	; (800e24c <Measure_Elements_Draw+0x2e0>)
 800e07c:	edd3 0a00 	vldr	s1, [r3]
 800e080:	4b73      	ldr	r3, [pc, #460]	; (800e250 <Measure_Elements_Draw+0x2e4>)
 800e082:	4621      	mov	r1, r4
 800e084:	ed93 0a00 	vldr	s0, [r3]
 800e088:	2014      	movs	r0, #20
 800e08a:	f006 fdad 	bl	8014be8 <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800e08e:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800e092:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800e094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e098:	9200      	str	r2, [sp, #0]
 800e09a:	4619      	mov	r1, r3
 800e09c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e0a0:	200a      	movs	r0, #10
 800e0a2:	f00d fb3d 	bl	801b720 <TFT_DrawLine>
									Y+=10;
 800e0a6:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800e0a8:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800e0aa:	782b      	ldrb	r3, [r5, #0]
 800e0ac:	783a      	ldrb	r2, [r7, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	f000 8110 	beq.w	800e2d4 <Measure_Elements_Draw+0x368>
			{
				state_Measure_Elements = state_i;
 800e0b4:	4a67      	ldr	r2, [pc, #412]	; (800e254 <Measure_Elements_Draw+0x2e8>)
				screen_count_old = screen_count;
 800e0b6:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800e0b8:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800e0ba:	b002      	add	sp, #8
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800e0c0:	4a5b      	ldr	r2, [pc, #364]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e0c2:	8812      	ldrh	r2, [r2, #0]
 800e0c4:	05d2      	lsls	r2, r2, #23
 800e0c6:	d5f0      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
						if(Y+35 <= limit){
 800e0c8:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800e0cc:	f280 80ff 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure); //
 800e0d0:	4b61      	ldr	r3, [pc, #388]	; (800e258 <Measure_Elements_Draw+0x2ec>)
 800e0d2:	881a      	ldrh	r2, [r3, #0]
 800e0d4:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800e0d8:	4542      	cmp	r2, r8
 800e0da:	bf08      	it	eq
 800e0dc:	2200      	moveq	r2, #0
 800e0de:	4621      	mov	r1, r4
 800e0e0:	2014      	movs	r0, #20
 800e0e2:	f007 f9f3 	bl	80154cc <GUI_Text_CCT_Measure>
									Y+=35;
 800e0e6:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800e0ea:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800e0ec:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800e0f0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	200a      	movs	r0, #10
 800e0f8:	f00d fb12 	bl	801b720 <TFT_DrawLine>
									Y+=10;
 800e0fc:	342d      	adds	r4, #45	; 0x2d
 800e0fe:	e7d3      	b.n	800e0a8 <Measure_Elements_Draw+0x13c>
				case 5: if(Measure_Field&delta_E){
 800e100:	4a4b      	ldr	r2, [pc, #300]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e102:	8812      	ldrh	r2, [r2, #0]
 800e104:	0510      	lsls	r0, r2, #20
 800e106:	d5d0      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
						if(Y+35 <= limit){
 800e108:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800e10c:	f280 80df 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure);
 800e110:	4b52      	ldr	r3, [pc, #328]	; (800e25c <Measure_Elements_Draw+0x2f0>)
 800e112:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e116:	ee00 3a10 	vmov	s0, r3
 800e11a:	4621      	mov	r1, r4
 800e11c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e120:	2014      	movs	r0, #20
 800e122:	f007 fbb7 	bl	8015894 <GUI_Text_deltaE_Measure>
 800e126:	e77b      	b.n	800e020 <Measure_Elements_Draw+0xb4>
				case 6: if(Measure_Field&CIE_XYZ){
 800e128:	4a41      	ldr	r2, [pc, #260]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e12a:	8812      	ldrh	r2, [r2, #0]
 800e12c:	06d1      	lsls	r1, r2, #27
 800e12e:	d5bc      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
						if(Y+105 <= limit){
 800e130:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800e134:	f280 80cb 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_XYZ_Measure(20, Y, colorimetry_XYZ[0], colorimetry_XYZ[1], colorimetry_XYZ[2]);
 800e138:	4949      	ldr	r1, [pc, #292]	; (800e260 <Measure_Elements_Draw+0x2f4>)
 800e13a:	884b      	ldrh	r3, [r1, #2]
 800e13c:	880a      	ldrh	r2, [r1, #0]
 800e13e:	8889      	ldrh	r1, [r1, #4]
 800e140:	9100      	str	r1, [sp, #0]
 800e142:	2014      	movs	r0, #20
 800e144:	4621      	mov	r1, r4
 800e146:	f006 ffbb 	bl	80150c0 <GUI_Text_XYZ_Measure>
									Y+=105;
 800e14a:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800e14e:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800e150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e154:	9200      	str	r2, [sp, #0]
 800e156:	4619      	mov	r1, r3
 800e158:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e15c:	200a      	movs	r0, #10
 800e15e:	f00d fadf 	bl	801b720 <TFT_DrawLine>
									Y+=10;
 800e162:	3473      	adds	r4, #115	; 0x73
 800e164:	e7a0      	b.n	800e0a8 <Measure_Elements_Draw+0x13c>
				case 7: if(Measure_Field&CIE_xy){
 800e166:	4a32      	ldr	r2, [pc, #200]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e168:	8812      	ldrh	r2, [r2, #0]
 800e16a:	0692      	lsls	r2, r2, #26
 800e16c:	d59d      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+70 <= limit){
 800e16e:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800e172:	f300 80ac 	bgt.w	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_xy_Measure(20, Y, colorimetry_xy[0], colorimetry_xy[1]);
 800e176:	4b3b      	ldr	r3, [pc, #236]	; (800e264 <Measure_Elements_Draw+0x2f8>)
 800e178:	4621      	mov	r1, r4
 800e17a:	edd3 0a01 	vldr	s1, [r3, #4]
 800e17e:	ed93 0a00 	vldr	s0, [r3]
 800e182:	2014      	movs	r0, #20
 800e184:	f007 f8b6 	bl	80152f4 <GUI_Text_xy_Measure>
 800e188:	e723      	b.n	800dfd2 <Measure_Elements_Draw+0x66>
				case 8: if(Measure_Field&CIE_Luv){
 800e18a:	4a29      	ldr	r2, [pc, #164]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e18c:	8812      	ldrh	r2, [r2, #0]
 800e18e:	0650      	lsls	r0, r2, #25
 800e190:	d58b      	bpl.n	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+70 <= limit){
 800e192:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800e196:	f300 809a 	bgt.w	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1]);
 800e19a:	4b33      	ldr	r3, [pc, #204]	; (800e268 <Measure_Elements_Draw+0x2fc>)
 800e19c:	4621      	mov	r1, r4
 800e19e:	edd3 0a01 	vldr	s1, [r3, #4]
 800e1a2:	ed93 0a00 	vldr	s0, [r3]
 800e1a6:	2014      	movs	r0, #20
 800e1a8:	f007 f914 	bl	80153d4 <GUI_Text_uv_Measure>
 800e1ac:	e711      	b.n	800dfd2 <Measure_Elements_Draw+0x66>
				case 9: if(Measure_Field&CIE_Lab){
 800e1ae:	4a20      	ldr	r2, [pc, #128]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e1b0:	8812      	ldrh	r2, [r2, #0]
 800e1b2:	0611      	lsls	r1, r2, #24
 800e1b4:	f57f af79 	bpl.w	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+105 <= limit){
 800e1b8:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800e1bc:	f280 8087 	bge.w	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2]); 
 800e1c0:	492a      	ldr	r1, [pc, #168]	; (800e26c <Measure_Elements_Draw+0x300>)
 800e1c2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800e1c6:	f9b1 2000 	ldrsh.w	r2, [r1]
 800e1ca:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800e1ce:	9100      	str	r1, [sp, #0]
 800e1d0:	2014      	movs	r0, #20
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	f007 fe28 	bl	8015e28 <GUI_Text_LAB_Measure>
 800e1d8:	e7b7      	b.n	800e14a <Measure_Elements_Draw+0x1de>
				case 10: if(Measure_Field&lambda_d){
 800e1da:	4a15      	ldr	r2, [pc, #84]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e1dc:	8812      	ldrh	r2, [r2, #0]
 800e1de:	0592      	lsls	r2, r2, #22
 800e1e0:	f57f af63 	bpl.w	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+35 <= limit){
 800e1e4:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800e1e8:	da71      	bge.n	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure); 
 800e1ea:	4b21      	ldr	r3, [pc, #132]	; (800e270 <Measure_Elements_Draw+0x304>)
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	ee00 3a10 	vmov	s0, r3
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800e1f8:	2014      	movs	r0, #20
 800e1fa:	f007 fa1b 	bl	8015634 <GUI_Text_lambdaD_Measure>
 800e1fe:	e70f      	b.n	800e020 <Measure_Elements_Draw+0xb4>
				case 11: if(Measure_Field&lambda_c){
 800e200:	4a0b      	ldr	r2, [pc, #44]	; (800e230 <Measure_Elements_Draw+0x2c4>)
 800e202:	8812      	ldrh	r2, [r2, #0]
 800e204:	0550      	lsls	r0, r2, #21
 800e206:	f57f af50 	bpl.w	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+35 <= limit){
 800e20a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800e20e:	da5e      	bge.n	800e2ce <Measure_Elements_Draw+0x362>
									GUI_Text_lambdaC_Measure(20, Y, lambda_c_Measure); 
 800e210:	4b18      	ldr	r3, [pc, #96]	; (800e274 <Measure_Elements_Draw+0x308>)
 800e212:	881b      	ldrh	r3, [r3, #0]
 800e214:	ee00 3a10 	vmov	s0, r3
 800e218:	4621      	mov	r1, r4
 800e21a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800e21e:	2014      	movs	r0, #20
 800e220:	f007 faa0 	bl	8015764 <GUI_Text_lambdaC_Measure>
 800e224:	e6fc      	b.n	800e020 <Measure_Elements_Draw+0xb4>
 800e226:	bf00      	nop
 800e228:	20004cc9 	.word	0x20004cc9
 800e22c:	20004cca 	.word	0x20004cca
 800e230:	20004ca6 	.word	0x20004ca6
 800e234:	20000a50 	.word	0x20000a50
 800e238:	2009015c 	.word	0x2009015c
 800e23c:	2008fbfc 	.word	0x2008fbfc
 800e240:	2008fc04 	.word	0x2008fc04
 800e244:	2008fc00 	.word	0x2008fc00
 800e248:	2008fcac 	.word	0x2008fcac
 800e24c:	20090038 	.word	0x20090038
 800e250:	2008ff6c 	.word	0x2008ff6c
 800e254:	20004cce 	.word	0x20004cce
 800e258:	2004fc00 	.word	0x2004fc00
 800e25c:	2008acd6 	.word	0x2008acd6
 800e260:	2008a7de 	.word	0x2008a7de
 800e264:	2008a7f4 	.word	0x2008a7f4
 800e268:	2008a7ec 	.word	0x2008a7ec
 800e26c:	2008a7d8 	.word	0x2008a7d8
 800e270:	2008ffd0 	.word	0x2008ffd0
 800e274:	2008feec 	.word	0x2008feec
				case 12: if(Measure_Field&EbEr){
 800e278:	4a18      	ldr	r2, [pc, #96]	; (800e2dc <Measure_Elements_Draw+0x370>)
 800e27a:	8812      	ldrh	r2, [r2, #0]
 800e27c:	04d1      	lsls	r1, r2, #19
 800e27e:	f57f af14 	bpl.w	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+70 <= limit){
 800e282:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800e286:	dc22      	bgt.n	800e2ce <Measure_Elements_Draw+0x362>
						Mode_EL ?	 GUI_Text_EbEr_Measure(10, Y, ELb_Measure, ELr_Measure):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure); 
 800e288:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <Measure_Elements_Draw+0x374>)
 800e28a:	4a16      	ldr	r2, [pc, #88]	; (800e2e4 <Measure_Elements_Draw+0x378>)
 800e28c:	7819      	ldrb	r1, [r3, #0]
 800e28e:	4b16      	ldr	r3, [pc, #88]	; (800e2e8 <Measure_Elements_Draw+0x37c>)
 800e290:	edd2 0a00 	vldr	s1, [r2]
 800e294:	ed93 0a00 	vldr	s0, [r3]
 800e298:	b121      	cbz	r1, 800e2a4 <Measure_Elements_Draw+0x338>
 800e29a:	4621      	mov	r1, r4
 800e29c:	200a      	movs	r0, #10
 800e29e:	f007 fb91 	bl	80159c4 <GUI_Text_EbEr_Measure>
 800e2a2:	e696      	b.n	800dfd2 <Measure_Elements_Draw+0x66>
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	2014      	movs	r0, #20
 800e2a8:	f007 fc64 	bl	8015b74 <GUI_Text_LbLr_Measure>
 800e2ac:	e691      	b.n	800dfd2 <Measure_Elements_Draw+0x66>
				case 13: if(Measure_Field&SP_measure){
 800e2ae:	4a0b      	ldr	r2, [pc, #44]	; (800e2dc <Measure_Elements_Draw+0x370>)
 800e2b0:	8812      	ldrh	r2, [r2, #0]
 800e2b2:	0492      	lsls	r2, r2, #18
 800e2b4:	f57f aef9 	bpl.w	800e0aa <Measure_Elements_Draw+0x13e>
					if(Y+35 <= limit){
 800e2b8:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800e2bc:	da07      	bge.n	800e2ce <Measure_Elements_Draw+0x362>
						GUI_Text_S_P_Measure(20, Y, SP_Measure); 
 800e2be:	4b0b      	ldr	r3, [pc, #44]	; (800e2ec <Measure_Elements_Draw+0x380>)
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	ed93 0a00 	vldr	s0, [r3]
 800e2c6:	2014      	movs	r0, #20
 800e2c8:	f007 fd2e 	bl	8015d28 <GUI_Text_S_P_Measure>
 800e2cc:	e6a8      	b.n	800e020 <Measure_Elements_Draw+0xb4>
							}else {screen_count++;}} break;
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	702b      	strb	r3, [r5, #0]
 800e2d2:	e6ea      	b.n	800e0aa <Measure_Elements_Draw+0x13e>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800e2d4:	3601      	adds	r6, #1
 800e2d6:	b2f6      	uxtb	r6, r6
 800e2d8:	e64e      	b.n	800df78 <Measure_Elements_Draw+0xc>
 800e2da:	bf00      	nop
 800e2dc:	20004ca6 	.word	0x20004ca6
 800e2e0:	20000a50 	.word	0x20000a50
 800e2e4:	20090158 	.word	0x20090158
 800e2e8:	20090154 	.word	0x20090154
 800e2ec:	2008fca8 	.word	0x2008fca8

0800e2f0 <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800e2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800e2f2:	4b1e      	ldr	r3, [pc, #120]	; (800e36c <GUI_Information_Screen+0x7c>)
 800e2f4:	4a1e      	ldr	r2, [pc, #120]	; (800e370 <GUI_Information_Screen+0x80>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	7812      	ldrb	r2, [r2, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d034      	beq.n	800e368 <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800e2fe:	2063      	movs	r0, #99	; 0x63
 800e300:	f00d f86c 	bl	801b3dc <TFT_FillScreen_DMA>
		if(Language_status == En){
 800e304:	4b1b      	ldr	r3, [pc, #108]	; (800e374 <GUI_Information_Screen+0x84>)
 800e306:	491c      	ldr	r1, [pc, #112]	; (800e378 <GUI_Information_Screen+0x88>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	4a1c      	ldr	r2, [pc, #112]	; (800e37c <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800e30c:	8809      	ldrh	r1, [r1, #0]
 800e30e:	7812      	ldrb	r2, [r2, #0]
 800e310:	4d1b      	ldr	r5, [pc, #108]	; (800e380 <GUI_Information_Screen+0x90>)
 800e312:	4c1c      	ldr	r4, [pc, #112]	; (800e384 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800e314:	2b01      	cmp	r3, #1
 800e316:	4b1c      	ldr	r3, [pc, #112]	; (800e388 <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	9100      	str	r1, [sp, #0]
 800e31c:	f04f 0100 	mov.w	r1, #0
 800e320:	4608      	mov	r0, r1
		if(Language_status == En){
 800e322:	d110      	bne.n	800e346 <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800e324:	f009 fb86 	bl	8017a34 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800e328:	2100      	movs	r1, #0
 800e32a:	4608      	mov	r0, r1
 800e32c:	882b      	ldrh	r3, [r5, #0]
 800e32e:	8822      	ldrh	r2, [r4, #0]
 800e330:	f009 fc02 	bl	8017b38 <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800e334:	2100      	movs	r1, #0
 800e336:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800e38c <GUI_Information_Screen+0x9c>
 800e33a:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800e33c:	b003      	add	sp, #12
 800e33e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800e342:	f009 bc6f 	b.w	8017c24 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800e346:	f00a f869 	bl	801841c <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800e34a:	2100      	movs	r1, #0
 800e34c:	4608      	mov	r0, r1
 800e34e:	882b      	ldrh	r3, [r5, #0]
 800e350:	8822      	ldrh	r2, [r4, #0]
 800e352:	f00a f921 	bl	8018598 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800e356:	2100      	movs	r1, #0
 800e358:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e38c <GUI_Information_Screen+0x9c>
 800e35c:	4608      	mov	r0, r1
}
 800e35e:	b003      	add	sp, #12
 800e360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800e364:	f00a b992 	b.w	801868c <GUI_TextRu_Info_Ver>
}
 800e368:	b003      	add	sp, #12
 800e36a:	bd30      	pop	{r4, r5, pc}
 800e36c:	20000232 	.word	0x20000232
 800e370:	20004ca1 	.word	0x20004ca1
 800e374:	20004ca3 	.word	0x20004ca3
 800e378:	2008fed8 	.word	0x2008fed8
 800e37c:	2008f930 	.word	0x2008f930
 800e380:	2008ff80 	.word	0x2008ff80
 800e384:	2008f934 	.word	0x2008f934
 800e388:	2008fc0c 	.word	0x2008fc0c
 800e38c:	3f99999a 	.word	0x3f99999a

0800e390 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800e390:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800e392:	4b29      	ldr	r3, [pc, #164]	; (800e438 <GUI_SD_Write_Screen+0xa8>)
 800e394:	4d29      	ldr	r5, [pc, #164]	; (800e43c <GUI_SD_Write_Screen+0xac>)
 800e396:	781a      	ldrb	r2, [r3, #0]
 800e398:	7829      	ldrb	r1, [r5, #0]
 800e39a:	4291      	cmp	r1, r2
 800e39c:	d020      	beq.n	800e3e0 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800e39e:	4b28      	ldr	r3, [pc, #160]	; (800e440 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800e3a0:	4c28      	ldr	r4, [pc, #160]	; (800e444 <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800e3a2:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800e3a4:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800e3a6:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800e3a8:	f00d f818 	bl	801b3dc <TFT_FillScreen_DMA>
		if(Language_status == En){
 800e3ac:	7822      	ldrb	r2, [r4, #0]
 800e3ae:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800e3b0:	f04f 0178 	mov.w	r1, #120	; 0x78
 800e3b4:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800e3b8:	d13a      	bne.n	800e430 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800e3ba:	f009 fb01 	bl	80179c0 <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800e3be:	4b22      	ldr	r3, [pc, #136]	; (800e448 <GUI_SD_Write_Screen+0xb8>)
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	b96b      	cbnz	r3, 800e3e0 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800e3c4:	f00b f89c 	bl	8019500 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800e3c8:	7821      	ldrb	r1, [r4, #0]
 800e3ca:	4c20      	ldr	r4, [pc, #128]	; (800e44c <GUI_SD_Write_Screen+0xbc>)
 800e3cc:	4b20      	ldr	r3, [pc, #128]	; (800e450 <GUI_SD_Write_Screen+0xc0>)
 800e3ce:	4a21      	ldr	r2, [pc, #132]	; (800e454 <GUI_SD_Write_Screen+0xc4>)
 800e3d0:	4821      	ldr	r0, [pc, #132]	; (800e458 <GUI_SD_Write_Screen+0xc8>)
 800e3d2:	7824      	ldrb	r4, [r4, #0]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	7812      	ldrb	r2, [r2, #0]
 800e3d8:	8800      	ldrh	r0, [r0, #0]
 800e3da:	9400      	str	r4, [sp, #0]
 800e3dc:	f00b f988 	bl	80196f0 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800e3e0:	4c1e      	ldr	r4, [pc, #120]	; (800e45c <GUI_SD_Write_Screen+0xcc>)
 800e3e2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e3e6:	f7f2 fc0b 	bl	8000c00 <__aeabi_d2f>
 800e3ea:	f44f 718c 	mov.w	r1, #280	; 0x118
 800e3ee:	ee00 0a10 	vmov	s0, r0
 800e3f2:	2055      	movs	r0, #85	; 0x55
 800e3f4:	f006 f832 	bl	801445c <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	4b19      	ldr	r3, [pc, #100]	; (800e460 <GUI_SD_Write_Screen+0xd0>)
 800e3fc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e400:	f7f2 fb6e 	bl	8000ae0 <__aeabi_dcmpeq>
 800e404:	b190      	cbz	r0, 800e42c <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800e406:	4b14      	ldr	r3, [pc, #80]	; (800e458 <GUI_SD_Write_Screen+0xc8>)
 800e408:	881a      	ldrh	r2, [r3, #0]
 800e40a:	f240 31e6 	movw	r1, #998	; 0x3e6
 800e40e:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800e410:	bf94      	ite	ls
 800e412:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800e414:	2200      	movhi	r2, #0
 800e416:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800e418:	8818      	ldrh	r0, [r3, #0]
 800e41a:	2100      	movs	r1, #0
 800e41c:	f00a ff60 	bl	80192e0 <WriteSDFLASH_t>
			pause = 0; 
 800e420:	4b07      	ldr	r3, [pc, #28]	; (800e440 <GUI_SD_Write_Screen+0xb0>)
 800e422:	2200      	movs	r2, #0
 800e424:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800e426:	4b0f      	ldr	r3, [pc, #60]	; (800e464 <GUI_SD_Write_Screen+0xd4>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	702b      	strb	r3, [r5, #0]
	}

}
 800e42c:	b003      	add	sp, #12
 800e42e:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800e430:	f00a f872 	bl	8018518 <GUI_TextRu_WriteSD>
 800e434:	e7c3      	b.n	800e3be <GUI_SD_Write_Screen+0x2e>
 800e436:	bf00      	nop
 800e438:	20000232 	.word	0x20000232
 800e43c:	20004ca1 	.word	0x20004ca1
 800e440:	20004cc6 	.word	0x20004cc6
 800e444:	20004ca3 	.word	0x20004ca3
 800e448:	20090110 	.word	0x20090110
 800e44c:	20004c9c 	.word	0x20004c9c
 800e450:	20000a50 	.word	0x20000a50
 800e454:	20000230 	.word	0x20000230
 800e458:	20004ccc 	.word	0x20004ccc
 800e45c:	20004ce8 	.word	0x20004ce8
 800e460:	3ff00000 	.word	0x3ff00000
 800e464:	2008acd5 	.word	0x2008acd5

0800e468 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800e468:	4b0f      	ldr	r3, [pc, #60]	; (800e4a8 <GUI_Up_Panel+0x40>)
{
 800e46a:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800e46c:	2100      	movs	r1, #0
 800e46e:	ed93 0b00 	vldr	d0, [r3]
 800e472:	4608      	mov	r0, r1
 800e474:	f007 fe26 	bl	80160c4 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800e478:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <GUI_Up_Panel+0x44>)
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d106      	bne.n	800e48e <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 5);
 800e480:	2105      	movs	r1, #5
 800e482:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 4, 260, 35, TFT_Black_Bkgr);
	}
}
 800e484:	b003      	add	sp, #12
 800e486:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 5);
 800e48a:	f005 b855 	b.w	8013538 <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 4, 260, 35, TFT_Black_Bkgr);
 800e48e:	2363      	movs	r3, #99	; 0x63
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e496:	2323      	movs	r3, #35	; 0x23
 800e498:	2104      	movs	r1, #4
 800e49a:	20ef      	movs	r0, #239	; 0xef
 800e49c:	f00d f99d 	bl	801b7da <TFT_FillRectangle>
}
 800e4a0:	b003      	add	sp, #12
 800e4a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4a6:	bf00      	nop
 800e4a8:	20090040 	.word	0x20090040
 800e4ac:	2008acda 	.word	0x2008acda

0800e4b0 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800e4b0:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800e4b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4b6:	2001      	movs	r0, #1
 800e4b8:	f005 f890 	bl	80135dc <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800e4bc:	4b1b      	ldr	r3, [pc, #108]	; (800e52c <GUI_Down_Panel+0x7c>)
 800e4be:	781a      	ldrb	r2, [r3, #0]
 800e4c0:	fab2 f282 	clz	r2, r2
 800e4c4:	0952      	lsrs	r2, r2, #5
 800e4c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4ca:	2037      	movs	r0, #55	; 0x37
 800e4cc:	f005 fa40 	bl	8013950 <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800e4d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4d4:	206d      	movs	r0, #109	; 0x6d
 800e4d6:	f005 fb07 	bl	8013ae8 <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800e4da:	4b15      	ldr	r3, [pc, #84]	; (800e530 <GUI_Down_Panel+0x80>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	2b06      	cmp	r3, #6
 800e4e0:	d90b      	bls.n	800e4fa <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800e4e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4e6:	20a3      	movs	r0, #163	; 0xa3
 800e4e8:	f005 f8b6 	bl	8013658 <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800e4ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4f0:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800e4f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800e4f6:	f005 b988 	b.w	801380a <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d810      	bhi.n	800e520 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800e4fe:	4b0d      	ldr	r3, [pc, #52]	; (800e534 <GUI_Down_Panel+0x84>)
 800e500:	781a      	ldrb	r2, [r3, #0]
 800e502:	3200      	adds	r2, #0
 800e504:	bf18      	it	ne
 800e506:	2201      	movne	r2, #1
 800e508:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e50c:	20a3      	movs	r0, #163	; 0xa3
 800e50e:	f005 f8e8 	bl	80136e2 <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800e512:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e516:	20d9      	movs	r0, #217	; 0xd9
}
 800e518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800e51c:	f005 b92b 	b.w	8013776 <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800e520:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e524:	20a3      	movs	r0, #163	; 0xa3
 800e526:	f005 f99e 	bl	8013866 <GUI_Button_TFT_Rotate>
 800e52a:	e7f2      	b.n	800e512 <GUI_Down_Panel+0x62>
 800e52c:	20090110 	.word	0x20090110
 800e530:	20004ca1 	.word	0x20004ca1
 800e534:	20004cc9 	.word	0x20004cc9

0800e538 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 800e538:	b508      	push	{r3, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800e53a:	4a0d      	ldr	r2, [pc, #52]	; (800e570 <GUI_Measure_Screen+0x38>)
 800e53c:	4b0d      	ldr	r3, [pc, #52]	; (800e574 <GUI_Measure_Screen+0x3c>)
 800e53e:	7812      	ldrb	r2, [r2, #0]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d00f      	beq.n	800e566 <GUI_Measure_Screen+0x2e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800e546:	2063      	movs	r0, #99	; 0x63
 800e548:	f00c ff48 	bl	801b3dc <TFT_FillScreen_DMA>
		screen_count = 0;
 800e54c:	4b0a      	ldr	r3, [pc, #40]	; (800e578 <GUI_Measure_Screen+0x40>)
 800e54e:	2000      	movs	r0, #0
 800e550:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 800e552:	f7ff fd0b 	bl	800df6c <Measure_Elements_Draw>
		GUI_Up_Panel();
 800e556:	f7ff ff87 	bl	800e468 <GUI_Up_Panel>
		GUI_Down_Panel();
 800e55a:	f7ff ffa9 	bl	800e4b0 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 800e55e:	4b07      	ldr	r3, [pc, #28]	; (800e57c <GUI_Measure_Screen+0x44>)
 800e560:	2201      	movs	r2, #1
 800e562:	701a      	strb	r2, [r3, #0]
 800e564:	bd08      	pop	{r3, pc}
			Measure_Elements_Draw(0);
 800e566:	2000      	movs	r0, #0
 800e568:	f7ff fd00 	bl	800df6c <Measure_Elements_Draw>
 800e56c:	e7f7      	b.n	800e55e <GUI_Measure_Screen+0x26>
 800e56e:	bf00      	nop
 800e570:	20004ca1 	.word	0x20004ca1
 800e574:	20000232 	.word	0x20000232
 800e578:	20004cc9 	.word	0x20004cc9
 800e57c:	2008acd5 	.word	0x2008acd5

0800e580 <GUI_Measure2_Screen>:
	old_meas_type_E = 2; old_meas_type_L = 2;
 800e580:	4a10      	ldr	r2, [pc, #64]	; (800e5c4 <GUI_Measure2_Screen+0x44>)
{
 800e582:	b510      	push	{r4, lr}
	old_meas_type_E = 2; old_meas_type_L = 2;
 800e584:	2302      	movs	r3, #2
 800e586:	7013      	strb	r3, [r2, #0]
 800e588:	4a0f      	ldr	r2, [pc, #60]	; (800e5c8 <GUI_Measure2_Screen+0x48>)
 800e58a:	4c10      	ldr	r4, [pc, #64]	; (800e5cc <GUI_Measure2_Screen+0x4c>)
 800e58c:	7013      	strb	r3, [r2, #0]
	if(preGUI_screen_state != Measure2_Screen){
 800e58e:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <GUI_Measure2_Screen+0x50>)
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d012      	beq.n	800e5bc <GUI_Measure2_Screen+0x3c>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800e596:	2063      	movs	r0, #99	; 0x63
 800e598:	f00c ff20 	bl	801b3dc <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 800e59c:	4b0d      	ldr	r3, [pc, #52]	; (800e5d4 <GUI_Measure2_Screen+0x54>)
 800e59e:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 800e5a0:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <GUI_Measure2_Screen+0x58>)
		current_state_Measure_Draw = state_Measure_Elements;
 800e5a2:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	701a      	strb	r2, [r3, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 800e5a8:	f7ff fce0 	bl	800df6c <Measure_Elements_Draw>
		GUI_Up_Panel();
 800e5ac:	f7ff ff5c 	bl	800e468 <GUI_Up_Panel>
		GUI_Down_Panel();
 800e5b0:	f7ff ff7e 	bl	800e4b0 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 800e5b4:	4b09      	ldr	r3, [pc, #36]	; (800e5dc <GUI_Measure2_Screen+0x5c>)
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	701a      	strb	r2, [r3, #0]
 800e5ba:	bd10      	pop	{r4, pc}
			Measure_Elements_Draw(current_state_Measure_Draw);
 800e5bc:	7820      	ldrb	r0, [r4, #0]
 800e5be:	f7ff fcd5 	bl	800df6c <Measure_Elements_Draw>
 800e5c2:	e7f7      	b.n	800e5b4 <GUI_Measure2_Screen+0x34>
 800e5c4:	20000237 	.word	0x20000237
 800e5c8:	20000238 	.word	0x20000238
 800e5cc:	20004cc4 	.word	0x20004cc4
 800e5d0:	20000232 	.word	0x20000232
 800e5d4:	20004cce 	.word	0x20004cce
 800e5d8:	20004cc9 	.word	0x20004cc9
 800e5dc:	2008acd5 	.word	0x2008acd5

0800e5e0 <GUI_Measure3_Screen>:
{
 800e5e0:	b538      	push	{r3, r4, r5, lr}
	old_meas_type_E = 2; old_meas_type_L = 2;
 800e5e2:	4b10      	ldr	r3, [pc, #64]	; (800e624 <GUI_Measure3_Screen+0x44>)
 800e5e4:	4d10      	ldr	r5, [pc, #64]	; (800e628 <GUI_Measure3_Screen+0x48>)
 800e5e6:	2402      	movs	r4, #2
 800e5e8:	701c      	strb	r4, [r3, #0]
 800e5ea:	4b10      	ldr	r3, [pc, #64]	; (800e62c <GUI_Measure3_Screen+0x4c>)
 800e5ec:	701c      	strb	r4, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 800e5ee:	4b10      	ldr	r3, [pc, #64]	; (800e630 <GUI_Measure3_Screen+0x50>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b03      	cmp	r3, #3
 800e5f4:	d011      	beq.n	800e61a <GUI_Measure3_Screen+0x3a>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800e5f6:	2063      	movs	r0, #99	; 0x63
 800e5f8:	f00c fef0 	bl	801b3dc <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 800e5fc:	4b0d      	ldr	r3, [pc, #52]	; (800e634 <GUI_Measure3_Screen+0x54>)
 800e5fe:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 800e600:	4b0d      	ldr	r3, [pc, #52]	; (800e638 <GUI_Measure3_Screen+0x58>)
		current_state_Measure_Draw= state_Measure_Elements;
 800e602:	7028      	strb	r0, [r5, #0]
		screen_count = 2;
 800e604:	701c      	strb	r4, [r3, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 800e606:	f7ff fcb1 	bl	800df6c <Measure_Elements_Draw>
		GUI_Up_Panel();
 800e60a:	f7ff ff2d 	bl	800e468 <GUI_Up_Panel>
		GUI_Down_Panel();
 800e60e:	f7ff ff4f 	bl	800e4b0 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 800e612:	4b0a      	ldr	r3, [pc, #40]	; (800e63c <GUI_Measure3_Screen+0x5c>)
 800e614:	2201      	movs	r2, #1
 800e616:	701a      	strb	r2, [r3, #0]
 800e618:	bd38      	pop	{r3, r4, r5, pc}
			Measure_Elements_Draw(current_state_Measure_Draw);
 800e61a:	7828      	ldrb	r0, [r5, #0]
 800e61c:	f7ff fca6 	bl	800df6c <Measure_Elements_Draw>
 800e620:	e7f7      	b.n	800e612 <GUI_Measure3_Screen+0x32>
 800e622:	bf00      	nop
 800e624:	20000237 	.word	0x20000237
 800e628:	20004cc4 	.word	0x20004cc4
 800e62c:	20000238 	.word	0x20000238
 800e630:	20000232 	.word	0x20000232
 800e634:	20004cce 	.word	0x20004cce
 800e638:	20004cc9 	.word	0x20004cc9
 800e63c:	2008acd5 	.word	0x2008acd5

0800e640 <GUI_Panels>:

void GUI_Panels()
{
 800e640:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800e642:	4b1c      	ldr	r3, [pc, #112]	; (800e6b4 <GUI_Panels+0x74>)
 800e644:	781a      	ldrb	r2, [r3, #0]
 800e646:	2a01      	cmp	r2, #1
 800e648:	d121      	bne.n	800e68e <GUI_Panels+0x4e>
 800e64a:	4b1b      	ldr	r3, [pc, #108]	; (800e6b8 <GUI_Panels+0x78>)
 800e64c:	7819      	ldrb	r1, [r3, #0]
 800e64e:	2902      	cmp	r1, #2
 800e650:	d125      	bne.n	800e69e <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	2b03      	cmp	r3, #3
 800e656:	d122      	bne.n	800e69e <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800e658:	4b17      	ldr	r3, [pc, #92]	; (800e6b8 <GUI_Panels+0x78>)
 800e65a:	7819      	ldrb	r1, [r3, #0]
 800e65c:	2906      	cmp	r1, #6
 800e65e:	d901      	bls.n	800e664 <GUI_Panels+0x24>
 800e660:	2a06      	cmp	r2, #6
 800e662:	d91c      	bls.n	800e69e <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800e664:	7819      	ldrb	r1, [r3, #0]
 800e666:	2911      	cmp	r1, #17
 800e668:	d019      	beq.n	800e69e <GUI_Panels+0x5e>
 800e66a:	2a06      	cmp	r2, #6
 800e66c:	d102      	bne.n	800e674 <GUI_Panels+0x34>
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	2b05      	cmp	r3, #5
 800e672:	d914      	bls.n	800e69e <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800e674:	2363      	movs	r3, #99	; 0x63
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	f240 120f 	movw	r2, #271	; 0x10f
 800e67c:	f240 13a9 	movw	r3, #425	; 0x1a9
 800e680:	2128      	movs	r1, #40	; 0x28
 800e682:	2000      	movs	r0, #0
 800e684:	f00d f8a9 	bl	801b7da <TFT_FillRectangle>
	}
}
 800e688:	b003      	add	sp, #12
 800e68a:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800e68e:	2a04      	cmp	r2, #4
 800e690:	d005      	beq.n	800e69e <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800e692:	2a06      	cmp	r2, #6
 800e694:	d9e0      	bls.n	800e658 <GUI_Panels+0x18>
 800e696:	4b08      	ldr	r3, [pc, #32]	; (800e6b8 <GUI_Panels+0x78>)
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b06      	cmp	r3, #6
 800e69c:	d8dc      	bhi.n	800e658 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800e69e:	2063      	movs	r0, #99	; 0x63
 800e6a0:	f00c fe9c 	bl	801b3dc <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800e6a4:	f7ff fee0 	bl	800e468 <GUI_Up_Panel>
}
 800e6a8:	b003      	add	sp, #12
 800e6aa:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800e6ae:	f7ff beff 	b.w	800e4b0 <GUI_Down_Panel>
 800e6b2:	bf00      	nop
 800e6b4:	20004ca1 	.word	0x20004ca1
 800e6b8:	20000232 	.word	0x20000232

0800e6bc <GUI_DataSet1_Screen>:
{
 800e6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	old_meas_type_E = 2; old_meas_type_L = 2;
 800e6be:	4a29      	ldr	r2, [pc, #164]	; (800e764 <GUI_DataSet1_Screen+0xa8>)
 800e6c0:	4c29      	ldr	r4, [pc, #164]	; (800e768 <GUI_DataSet1_Screen+0xac>)
 800e6c2:	4d2a      	ldr	r5, [pc, #168]	; (800e76c <GUI_DataSet1_Screen+0xb0>)
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	7013      	strb	r3, [r2, #0]
 800e6c8:	4a29      	ldr	r2, [pc, #164]	; (800e770 <GUI_DataSet1_Screen+0xb4>)
 800e6ca:	7013      	strb	r3, [r2, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800e6cc:	4b29      	ldr	r3, [pc, #164]	; (800e774 <GUI_DataSet1_Screen+0xb8>)
 800e6ce:	4a2a      	ldr	r2, [pc, #168]	; (800e778 <GUI_DataSet1_Screen+0xbc>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	7812      	ldrb	r2, [r2, #0]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	4a29      	ldr	r2, [pc, #164]	; (800e77c <GUI_DataSet1_Screen+0xc0>)
 800e6d8:	4b29      	ldr	r3, [pc, #164]	; (800e780 <GUI_DataSet1_Screen+0xc4>)
 800e6da:	d107      	bne.n	800e6ec <GUI_DataSet1_Screen+0x30>
 800e6dc:	7810      	ldrb	r0, [r2, #0]
 800e6de:	7821      	ldrb	r1, [r4, #0]
 800e6e0:	4288      	cmp	r0, r1
 800e6e2:	d103      	bne.n	800e6ec <GUI_DataSet1_Screen+0x30>
 800e6e4:	7818      	ldrb	r0, [r3, #0]
 800e6e6:	7829      	ldrb	r1, [r5, #0]
 800e6e8:	4288      	cmp	r0, r1
 800e6ea:	d027      	beq.n	800e73c <GUI_DataSet1_Screen+0x80>
		Mode_EL_Old = Mode_EL;
 800e6ec:	7821      	ldrb	r1, [r4, #0]
 800e6ee:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800e6f0:	782a      	ldrb	r2, [r5, #0]
 800e6f2:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800e6f4:	f7ff ffa4 	bl	800e640 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800e6f8:	4b22      	ldr	r3, [pc, #136]	; (800e784 <GUI_DataSet1_Screen+0xc8>)
 800e6fa:	2207      	movs	r2, #7
 800e6fc:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800e6fe:	782b      	ldrb	r3, [r5, #0]
 800e700:	bb0b      	cbnz	r3, 800e746 <GUI_DataSet1_Screen+0x8a>
			GUI_OptionMenuRu();
 800e702:	f7ff fb29 	bl	800dd58 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800e706:	7823      	ldrb	r3, [r4, #0]
 800e708:	f240 1151 	movw	r1, #337	; 0x151
 800e70c:	200a      	movs	r0, #10
 800e70e:	b1bb      	cbz	r3, 800e740 <GUI_DataSet1_Screen+0x84>
 800e710:	f009 fcfe 	bl	8018110 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800e714:	4b1c      	ldr	r3, [pc, #112]	; (800e788 <GUI_DataSet1_Screen+0xcc>)
 800e716:	881a      	ldrh	r2, [r3, #0]
 800e718:	f240 1147 	movw	r1, #327	; 0x147
 800e71c:	f002 0201 	and.w	r2, r2, #1
 800e720:	20c8      	movs	r0, #200	; 0xc8
 800e722:	f005 fc7d 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800e726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	f240 1379 	movw	r3, #377	; 0x179
 800e730:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e734:	4619      	mov	r1, r3
 800e736:	200a      	movs	r0, #10
 800e738:	f00c fff2 	bl	801b720 <TFT_DrawLine>
}
 800e73c:	b003      	add	sp, #12
 800e73e:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800e740:	f00a fa26 	bl	8018b90 <GUI_TextRu_Luminance>
 800e744:	e7e6      	b.n	800e714 <GUI_DataSet1_Screen+0x58>
		else if (Language_status == En) {
 800e746:	2b01      	cmp	r3, #1
 800e748:	d1e4      	bne.n	800e714 <GUI_DataSet1_Screen+0x58>
			GUI_OptionMenuEn();
 800e74a:	f7ff fb75 	bl	800de38 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800e74e:	7823      	ldrb	r3, [r4, #0]
 800e750:	f240 1153 	movw	r1, #339	; 0x153
 800e754:	200a      	movs	r0, #10
 800e756:	b113      	cbz	r3, 800e75e <GUI_DataSet1_Screen+0xa2>
 800e758:	f008 fe16 	bl	8017388 <GUI_TextEn_Illuminance>
 800e75c:	e7da      	b.n	800e714 <GUI_DataSet1_Screen+0x58>
 800e75e:	f008 fdbd 	bl	80172dc <GUI_TextEn_Luminance>
 800e762:	e7d7      	b.n	800e714 <GUI_DataSet1_Screen+0x58>
 800e764:	20000237 	.word	0x20000237
 800e768:	20000a50 	.word	0x20000a50
 800e76c:	20004ca3 	.word	0x20004ca3
 800e770:	20000238 	.word	0x20000238
 800e774:	20000232 	.word	0x20000232
 800e778:	20004ca1 	.word	0x20004ca1
 800e77c:	2008acdb 	.word	0x2008acdb
 800e780:	2008acd4 	.word	0x2008acd4
 800e784:	2008b278 	.word	0x2008b278
 800e788:	20004ca6 	.word	0x20004ca6

0800e78c <GUI_DataSet2_Screen>:
{
 800e78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800e78e:	4b62      	ldr	r3, [pc, #392]	; (800e918 <GUI_DataSet2_Screen+0x18c>)
 800e790:	4a62      	ldr	r2, [pc, #392]	; (800e91c <GUI_DataSet2_Screen+0x190>)
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	7812      	ldrb	r2, [r2, #0]
 800e796:	429a      	cmp	r2, r3
 800e798:	f000 80bb 	beq.w	800e912 <GUI_DataSet2_Screen+0x186>
			GUI_Panels();
 800e79c:	f7ff ff50 	bl	800e640 <GUI_Panels>
			if(Language_status == Ru){
 800e7a0:	4b5f      	ldr	r3, [pc, #380]	; (800e920 <GUI_DataSet2_Screen+0x194>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d172      	bne.n	800e88e <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800e7a8:	4b5e      	ldr	r3, [pc, #376]	; (800e924 <GUI_DataSet2_Screen+0x198>)
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	2152      	movs	r1, #82	; 0x52
 800e7ae:	2012      	movs	r0, #18
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d069      	beq.n	800e888 <GUI_DataSet2_Screen+0xfc>
 800e7b4:	f00a f982 	bl	8018abc <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800e7b8:	4c5b      	ldr	r4, [pc, #364]	; (800e928 <GUI_DataSet2_Screen+0x19c>)
 800e7ba:	8822      	ldrh	r2, [r4, #0]
 800e7bc:	2146      	movs	r1, #70	; 0x46
 800e7be:	f002 0202 	and.w	r2, r2, #2
 800e7c2:	20c8      	movs	r0, #200	; 0xc8
 800e7c4:	f005 fc2c 	bl	8014020 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800e7c8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800e7cc:	2378      	movs	r3, #120	; 0x78
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e7d4:	200a      	movs	r0, #10
 800e7d6:	9500      	str	r5, [sp, #0]
 800e7d8:	f00c ffa2 	bl	801b720 <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800e7dc:	2191      	movs	r1, #145	; 0x91
 800e7de:	200a      	movs	r0, #10
 800e7e0:	f009 fd00 	bl	80181e4 <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800e7e4:	8822      	ldrh	r2, [r4, #0]
 800e7e6:	2185      	movs	r1, #133	; 0x85
 800e7e8:	f002 0204 	and.w	r2, r2, #4
 800e7ec:	20c8      	movs	r0, #200	; 0xc8
 800e7ee:	f005 fc17 	bl	8014020 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800e7f2:	21d1      	movs	r1, #209	; 0xd1
 800e7f4:	200a      	movs	r0, #10
 800e7f6:	f009 fd19 	bl	801822c <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800e7fa:	8822      	ldrh	r2, [r4, #0]
 800e7fc:	21c6      	movs	r1, #198	; 0xc6
 800e7fe:	f002 0208 	and.w	r2, r2, #8
 800e802:	20c8      	movs	r0, #200	; 0xc8
 800e804:	f005 fc0c 	bl	8014020 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800e808:	23f8      	movs	r3, #248	; 0xf8
 800e80a:	4619      	mov	r1, r3
 800e80c:	200a      	movs	r0, #10
 800e80e:	9500      	str	r5, [sp, #0]
 800e810:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e814:	f00c ff84 	bl	801b720 <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800e818:	f240 1113 	movw	r1, #275	; 0x113
 800e81c:	2014      	movs	r0, #20
 800e81e:	f009 ff81 	bl	8018724 <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800e822:	8822      	ldrh	r2, [r4, #0]
 800e824:	f240 1107 	movw	r1, #263	; 0x107
 800e828:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800e82c:	20c8      	movs	r0, #200	; 0xc8
 800e82e:	f005 fbf7 	bl	8014020 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800e832:	f240 1339 	movw	r3, #313	; 0x139
 800e836:	4619      	mov	r1, r3
 800e838:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e83c:	9500      	str	r5, [sp, #0]
 800e83e:	200a      	movs	r0, #10
 800e840:	f00c ff6e 	bl	801b720 <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800e844:	f240 1151 	movw	r1, #337	; 0x151
 800e848:	2014      	movs	r0, #20
 800e84a:	f008 fa8d 	bl	8016d68 <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800e84e:	8822      	ldrh	r2, [r4, #0]
 800e850:	f240 1147 	movw	r1, #327	; 0x147
 800e854:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e858:	20c8      	movs	r0, #200	; 0xc8
 800e85a:	f005 fbe1 	bl	8014020 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800e85e:	f240 1379 	movw	r3, #377	; 0x179
 800e862:	4619      	mov	r1, r3
 800e864:	9500      	str	r5, [sp, #0]
 800e866:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e86a:	200a      	movs	r0, #10
 800e86c:	f00c ff58 	bl	801b720 <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800e870:	8822      	ldrh	r2, [r4, #0]
 800e872:	2300      	movs	r3, #0
 800e874:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e878:	f240 1147 	movw	r1, #327	; 0x147
 800e87c:	2082      	movs	r0, #130	; 0x82
}
 800e87e:	b003      	add	sp, #12
 800e880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800e884:	f005 baac 	b.w	8013de0 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800e888:	f00a f9ca 	bl	8018c20 <GUI_TextRu_Radiance>
 800e88c:	e794      	b.n	800e7b8 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d13f      	bne.n	800e912 <GUI_DataSet2_Screen+0x186>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800e892:	4b24      	ldr	r3, [pc, #144]	; (800e924 <GUI_DataSet2_Screen+0x198>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2154      	movs	r1, #84	; 0x54
 800e898:	2012      	movs	r0, #18
 800e89a:	b3bb      	cbz	r3, 800e90c <GUI_DataSet2_Screen+0x180>
 800e89c:	f008 fcc2 	bl	8017224 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800e8a0:	4c21      	ldr	r4, [pc, #132]	; (800e928 <GUI_DataSet2_Screen+0x19c>)
 800e8a2:	8822      	ldrh	r2, [r4, #0]
 800e8a4:	2146      	movs	r1, #70	; 0x46
 800e8a6:	f002 0202 	and.w	r2, r2, #2
 800e8aa:	20c8      	movs	r0, #200	; 0xc8
 800e8ac:	f005 fbb8 	bl	8014020 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800e8b0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800e8b4:	2378      	movs	r3, #120	; 0x78
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e8bc:	9500      	str	r5, [sp, #0]
 800e8be:	200a      	movs	r0, #10
 800e8c0:	f00c ff2e 	bl	801b720 <TFT_DrawLine>
				GUI_TextEn_PPFD(10, 147);
 800e8c4:	2193      	movs	r1, #147	; 0x93
 800e8c6:	200a      	movs	r0, #10
 800e8c8:	f008 fdf4 	bl	80174b4 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800e8cc:	8822      	ldrh	r2, [r4, #0]
 800e8ce:	2185      	movs	r1, #133	; 0x85
 800e8d0:	f002 0204 	and.w	r2, r2, #4
 800e8d4:	20c8      	movs	r0, #200	; 0xc8
 800e8d6:	f005 fba3 	bl	8014020 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800e8da:	21d3      	movs	r1, #211	; 0xd3
 800e8dc:	200a      	movs	r0, #10
 800e8de:	f008 fe7f 	bl	80175e0 <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800e8e2:	8822      	ldrh	r2, [r4, #0]
 800e8e4:	21c6      	movs	r1, #198	; 0xc6
 800e8e6:	f002 0208 	and.w	r2, r2, #8
 800e8ea:	20c8      	movs	r0, #200	; 0xc8
 800e8ec:	f005 fb98 	bl	8014020 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800e8f0:	23f8      	movs	r3, #248	; 0xf8
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	9500      	str	r5, [sp, #0]
 800e8f6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e8fa:	200a      	movs	r0, #10
 800e8fc:	f00c ff10 	bl	801b720 <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800e900:	f240 1115 	movw	r1, #277	; 0x115
 800e904:	2014      	movs	r0, #20
 800e906:	f008 feb3 	bl	8017670 <GUI_TextEn_CCT>
 800e90a:	e78a      	b.n	800e822 <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800e90c:	f008 fc3c 	bl	8017188 <GUI_TextEn_Radiance>
 800e910:	e7c6      	b.n	800e8a0 <GUI_DataSet2_Screen+0x114>
}
 800e912:	b003      	add	sp, #12
 800e914:	bd30      	pop	{r4, r5, pc}
 800e916:	bf00      	nop
 800e918:	20000232 	.word	0x20000232
 800e91c:	20004ca1 	.word	0x20004ca1
 800e920:	20004ca3 	.word	0x20004ca3
 800e924:	20000a50 	.word	0x20000a50
 800e928:	20004ca6 	.word	0x20004ca6

0800e92c <GUI_DataSet3_Screen>:
{
 800e92c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800e92e:	4b35      	ldr	r3, [pc, #212]	; (800ea04 <GUI_DataSet3_Screen+0xd8>)
 800e930:	4a35      	ldr	r2, [pc, #212]	; (800ea08 <GUI_DataSet3_Screen+0xdc>)
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	7812      	ldrb	r2, [r2, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	d061      	beq.n	800e9fe <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800e93a:	4c34      	ldr	r4, [pc, #208]	; (800ea0c <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800e93c:	4e34      	ldr	r6, [pc, #208]	; (800ea10 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 800e93e:	f7ff fe7f 	bl	800e640 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 800e942:	2152      	movs	r1, #82	; 0x52
 800e944:	2014      	movs	r0, #20
 800e946:	f007 fe1f 	bl	8016588 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800e94a:	8822      	ldrh	r2, [r4, #0]
 800e94c:	2146      	movs	r1, #70	; 0x46
 800e94e:	f002 0210 	and.w	r2, r2, #16
 800e952:	20c8      	movs	r0, #200	; 0xc8
 800e954:	f005 fb64 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800e958:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800e95c:	2378      	movs	r3, #120	; 0x78
 800e95e:	4619      	mov	r1, r3
 800e960:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e964:	200a      	movs	r0, #10
 800e966:	9500      	str	r5, [sp, #0]
 800e968:	f00c feda 	bl	801b720 <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 800e96c:	2191      	movs	r1, #145	; 0x91
 800e96e:	2014      	movs	r0, #20
 800e970:	f008 f8b6 	bl	8016ae0 <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 800e974:	8822      	ldrh	r2, [r4, #0]
 800e976:	2185      	movs	r1, #133	; 0x85
 800e978:	f002 0220 	and.w	r2, r2, #32
 800e97c:	20c8      	movs	r0, #200	; 0xc8
 800e97e:	f005 fb4f 	bl	8014020 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 800e982:	21d1      	movs	r1, #209	; 0xd1
 800e984:	2023      	movs	r0, #35	; 0x23
 800e986:	f007 fe39 	bl	80165fc <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800e98a:	8823      	ldrh	r3, [r4, #0]
 800e98c:	7832      	ldrb	r2, [r6, #0]
 800e98e:	f003 0320 	and.w	r3, r3, #32
 800e992:	f002 0201 	and.w	r2, r2, #1
 800e996:	21c6      	movs	r1, #198	; 0xc6
 800e998:	20c8      	movs	r0, #200	; 0xc8
 800e99a:	f005 fb82 	bl	80140a2 <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 800e99e:	f240 1113 	movw	r1, #275	; 0x113
 800e9a2:	2023      	movs	r0, #35	; 0x23
 800e9a4:	f007 fe8a 	bl	80166bc <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 800e9a8:	7832      	ldrb	r2, [r6, #0]
 800e9aa:	8823      	ldrh	r3, [r4, #0]
 800e9ac:	43d2      	mvns	r2, r2
 800e9ae:	f003 0320 	and.w	r3, r3, #32
 800e9b2:	f002 0201 	and.w	r2, r2, #1
 800e9b6:	f240 1107 	movw	r1, #263	; 0x107
 800e9ba:	20c8      	movs	r0, #200	; 0xc8
 800e9bc:	f005 fb71 	bl	80140a2 <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800e9c0:	f240 1339 	movw	r3, #313	; 0x139
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e9ca:	200a      	movs	r0, #10
 800e9cc:	9500      	str	r5, [sp, #0]
 800e9ce:	f00c fea7 	bl	801b720 <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 800e9d2:	f240 1151 	movw	r1, #337	; 0x151
 800e9d6:	2014      	movs	r0, #20
 800e9d8:	f007 fed0 	bl	801677c <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 800e9dc:	8822      	ldrh	r2, [r4, #0]
 800e9de:	f240 1147 	movw	r1, #327	; 0x147
 800e9e2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800e9e6:	20c8      	movs	r0, #200	; 0xc8
 800e9e8:	f005 fb1a 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800e9ec:	f240 1379 	movw	r3, #377	; 0x179
 800e9f0:	9500      	str	r5, [sp, #0]
 800e9f2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	200a      	movs	r0, #10
 800e9fa:	f00c fe91 	bl	801b720 <TFT_DrawLine>
}
 800e9fe:	b002      	add	sp, #8
 800ea00:	bd70      	pop	{r4, r5, r6, pc}
 800ea02:	bf00      	nop
 800ea04:	20000232 	.word	0x20000232
 800ea08:	20004ca1 	.word	0x20004ca1
 800ea0c:	20004ca6 	.word	0x20004ca6
 800ea10:	20004ca4 	.word	0x20004ca4

0800ea14 <GUI_DataSet4_Screen>:
{
 800ea14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800ea16:	4b4b      	ldr	r3, [pc, #300]	; (800eb44 <GUI_DataSet4_Screen+0x130>)
 800ea18:	4a4b      	ldr	r2, [pc, #300]	; (800eb48 <GUI_DataSet4_Screen+0x134>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	7812      	ldrb	r2, [r2, #0]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	f000 808b 	beq.w	800eb3a <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800ea24:	4c49      	ldr	r4, [pc, #292]	; (800eb4c <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800ea26:	4d4a      	ldr	r5, [pc, #296]	; (800eb50 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 800ea28:	f7ff fe0a 	bl	800e640 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 800ea2c:	2150      	movs	r1, #80	; 0x50
 800ea2e:	2014      	movs	r0, #20
 800ea30:	f007 fef2 	bl	8016818 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800ea34:	8822      	ldrh	r2, [r4, #0]
 800ea36:	2141      	movs	r1, #65	; 0x41
 800ea38:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800ea3c:	20c8      	movs	r0, #200	; 0xc8
 800ea3e:	f005 faef 	bl	8014020 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 800ea42:	2173      	movs	r1, #115	; 0x73
 800ea44:	2028      	movs	r0, #40	; 0x28
 800ea46:	f007 ff8f 	bl	8016968 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800ea4a:	8823      	ldrh	r3, [r4, #0]
 800ea4c:	782a      	ldrb	r2, [r5, #0]
 800ea4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea52:	f002 0201 	and.w	r2, r2, #1
 800ea56:	216c      	movs	r1, #108	; 0x6c
 800ea58:	20c8      	movs	r0, #200	; 0xc8
 800ea5a:	f005 fb22 	bl	80140a2 <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 800ea5e:	2196      	movs	r1, #150	; 0x96
 800ea60:	2028      	movs	r0, #40	; 0x28
 800ea62:	f007 ff97 	bl	8016994 <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 800ea66:	8823      	ldrh	r3, [r4, #0]
 800ea68:	782a      	ldrb	r2, [r5, #0]
 800ea6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea6e:	f002 0202 	and.w	r2, r2, #2
 800ea72:	218f      	movs	r1, #143	; 0x8f
 800ea74:	20c8      	movs	r0, #200	; 0xc8
 800ea76:	f005 fb14 	bl	80140a2 <GUI_RadioBox>
		GUI_Text_C(40, 185);
 800ea7a:	21b9      	movs	r1, #185	; 0xb9
 800ea7c:	2028      	movs	r0, #40	; 0x28
 800ea7e:	f007 ffad 	bl	80169dc <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 800ea82:	8823      	ldrh	r3, [r4, #0]
 800ea84:	782a      	ldrb	r2, [r5, #0]
 800ea86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea8a:	f002 0204 	and.w	r2, r2, #4
 800ea8e:	21b2      	movs	r1, #178	; 0xb2
 800ea90:	20c8      	movs	r0, #200	; 0xc8
 800ea92:	f005 fb06 	bl	80140a2 <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 800ea96:	21dc      	movs	r1, #220	; 0xdc
 800ea98:	2028      	movs	r0, #40	; 0x28
 800ea9a:	f007 ffb5 	bl	8016a08 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 800ea9e:	8823      	ldrh	r3, [r4, #0]
 800eaa0:	782a      	ldrb	r2, [r5, #0]
 800eaa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaa6:	f002 0208 	and.w	r2, r2, #8
 800eaaa:	21d5      	movs	r1, #213	; 0xd5
 800eaac:	20c8      	movs	r0, #200	; 0xc8
 800eaae:	f005 faf8 	bl	80140a2 <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 800eab2:	21ff      	movs	r1, #255	; 0xff
 800eab4:	2028      	movs	r0, #40	; 0x28
 800eab6:	f007 ffcb 	bl	8016a50 <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 800eaba:	8823      	ldrh	r3, [r4, #0]
 800eabc:	782a      	ldrb	r2, [r5, #0]
 800eabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac2:	f002 0210 	and.w	r2, r2, #16
 800eac6:	21f8      	movs	r1, #248	; 0xf8
 800eac8:	20c8      	movs	r0, #200	; 0xc8
 800eaca:	f005 faea 	bl	80140a2 <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 800eace:	f44f 7191 	mov.w	r1, #290	; 0x122
 800ead2:	2028      	movs	r0, #40	; 0x28
 800ead4:	f007 ffe0 	bl	8016a98 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 800ead8:	8823      	ldrh	r3, [r4, #0]
 800eada:	782a      	ldrb	r2, [r5, #0]
 800eadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eae0:	f002 0220 	and.w	r2, r2, #32
 800eae4:	f240 111b 	movw	r1, #283	; 0x11b
 800eae8:	20c8      	movs	r0, #200	; 0xc8
 800eaea:	f005 fada 	bl	80140a2 <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 800eaee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800eaf8:	4619      	mov	r1, r3
 800eafa:	200a      	movs	r0, #10
 800eafc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eb00:	f00c fe0e 	bl	801b720 <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800eb04:	4b13      	ldr	r3, [pc, #76]	; (800eb54 <GUI_DataSet4_Screen+0x140>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800eb0c:	2014      	movs	r0, #20
 800eb0e:	b1b3      	cbz	r3, 800eb3e <GUI_DataSet4_Screen+0x12a>
 800eb10:	f008 f9fe 	bl	8016f10 <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 800eb14:	8822      	ldrh	r2, [r4, #0]
 800eb16:	f240 1159 	movw	r1, #345	; 0x159
 800eb1a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800eb1e:	20c8      	movs	r0, #200	; 0xc8
 800eb20:	f005 fa7e 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 800eb24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800eb2e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eb32:	4619      	mov	r1, r3
 800eb34:	200a      	movs	r0, #10
 800eb36:	f00c fdf3 	bl	801b720 <TFT_DrawLine>
}
 800eb3a:	b003      	add	sp, #12
 800eb3c:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800eb3e:	f008 fa21 	bl	8016f84 <GUI_Text_LbLr>
 800eb42:	e7e7      	b.n	800eb14 <GUI_DataSet4_Screen+0x100>
 800eb44:	20000232 	.word	0x20000232
 800eb48:	20004ca1 	.word	0x20004ca1
 800eb4c:	20004ca6 	.word	0x20004ca6
 800eb50:	2008acd9 	.word	0x2008acd9
 800eb54:	20000a50 	.word	0x20000a50

0800eb58 <GUI_DataSet5_Screen>:
{
 800eb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800eb5a:	4b23      	ldr	r3, [pc, #140]	; (800ebe8 <GUI_DataSet5_Screen+0x90>)
 800eb5c:	4a23      	ldr	r2, [pc, #140]	; (800ebec <GUI_DataSet5_Screen+0x94>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	7812      	ldrb	r2, [r2, #0]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d03d      	beq.n	800ebe2 <GUI_DataSet5_Screen+0x8a>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800eb66:	4d22      	ldr	r5, [pc, #136]	; (800ebf0 <GUI_DataSet5_Screen+0x98>)
		GUI_Panels();
 800eb68:	f7ff fd6a 	bl	800e640 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 800eb6c:	2156      	movs	r1, #86	; 0x56
 800eb6e:	2023      	movs	r0, #35	; 0x23
 800eb70:	f008 f85c 	bl	8016c2c <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800eb74:	882a      	ldrh	r2, [r5, #0]
 800eb76:	2146      	movs	r1, #70	; 0x46
 800eb78:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800eb7c:	20c8      	movs	r0, #200	; 0xc8
 800eb7e:	f005 fa4f 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800eb82:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800eb86:	2378      	movs	r3, #120	; 0x78
 800eb88:	4619      	mov	r1, r3
 800eb8a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eb8e:	200a      	movs	r0, #10
 800eb90:	9400      	str	r4, [sp, #0]
 800eb92:	f00c fdc5 	bl	801b720 <TFT_DrawLine>
		GUI_Text_lambda_c(35, 145);
 800eb96:	2191      	movs	r1, #145	; 0x91
 800eb98:	2023      	movs	r0, #35	; 0x23
 800eb9a:	f008 f86b 	bl	8016c74 <GUI_Text_lambda_c>
		GUI_CheckBox(200, 133, Measure_Field&lambda_c);
 800eb9e:	882a      	ldrh	r2, [r5, #0]
 800eba0:	2185      	movs	r1, #133	; 0x85
 800eba2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800eba6:	20c8      	movs	r0, #200	; 0xc8
 800eba8:	f005 fa3a 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800ebac:	23b7      	movs	r3, #183	; 0xb7
 800ebae:	4619      	mov	r1, r3
 800ebb0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ebb4:	200a      	movs	r0, #10
 800ebb6:	9400      	str	r4, [sp, #0]
 800ebb8:	f00c fdb2 	bl	801b720 <TFT_DrawLine>
		GUI_Text_SP(35, 209);
 800ebbc:	21d1      	movs	r1, #209	; 0xd1
 800ebbe:	2023      	movs	r0, #35	; 0x23
 800ebc0:	f008 f810 	bl	8016be4 <GUI_Text_SP>
		GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 800ebc4:	882a      	ldrh	r2, [r5, #0]
 800ebc6:	21c6      	movs	r1, #198	; 0xc6
 800ebc8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ebcc:	20c8      	movs	r0, #200	; 0xc8
 800ebce:	f005 fa27 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ebd2:	23f8      	movs	r3, #248	; 0xf8
 800ebd4:	9400      	str	r4, [sp, #0]
 800ebd6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ebda:	4619      	mov	r1, r3
 800ebdc:	200a      	movs	r0, #10
 800ebde:	f00c fd9f 	bl	801b720 <TFT_DrawLine>
}
 800ebe2:	b003      	add	sp, #12
 800ebe4:	bd30      	pop	{r4, r5, pc}
 800ebe6:	bf00      	nop
 800ebe8:	20000232 	.word	0x20000232
 800ebec:	20004ca1 	.word	0x20004ca1
 800ebf0:	20004ca6 	.word	0x20004ca6

0800ebf4 <GUI_GraphSet1_Screen>:
{
 800ebf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800ebf6:	4b1d      	ldr	r3, [pc, #116]	; (800ec6c <GUI_GraphSet1_Screen+0x78>)
 800ebf8:	4a1d      	ldr	r2, [pc, #116]	; (800ec70 <GUI_GraphSet1_Screen+0x7c>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	7812      	ldrb	r2, [r2, #0]
 800ebfe:	4c1d      	ldr	r4, [pc, #116]	; (800ec74 <GUI_GraphSet1_Screen+0x80>)
 800ec00:	4d1d      	ldr	r5, [pc, #116]	; (800ec78 <GUI_GraphSet1_Screen+0x84>)
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d103      	bne.n	800ec0e <GUI_GraphSet1_Screen+0x1a>
 800ec06:	7822      	ldrb	r2, [r4, #0]
 800ec08:	782b      	ldrb	r3, [r5, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d022      	beq.n	800ec54 <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 800ec0e:	f7ff fd17 	bl	800e640 <GUI_Panels>
		Language_status_prev = Language_status;
 800ec12:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800ec14:	4a19      	ldr	r2, [pc, #100]	; (800ec7c <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 800ec16:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800ec18:	210c      	movs	r1, #12
 800ec1a:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800ec1c:	b9e3      	cbnz	r3, 800ec58 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 800ec1e:	f7ff f89b 	bl	800dd58 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 800ec22:	f240 1151 	movw	r1, #337	; 0x151
 800ec26:	200a      	movs	r0, #10
 800ec28:	f009 fb8e 	bl	8018348 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 800ec2c:	4b14      	ldr	r3, [pc, #80]	; (800ec80 <GUI_GraphSet1_Screen+0x8c>)
 800ec2e:	781a      	ldrb	r2, [r3, #0]
 800ec30:	f240 1147 	movw	r1, #327	; 0x147
 800ec34:	f002 0201 	and.w	r2, r2, #1
 800ec38:	20c8      	movs	r0, #200	; 0xc8
 800ec3a:	f005 f9f1 	bl	8014020 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800ec3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	f240 1379 	movw	r3, #377	; 0x179
 800ec48:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	200a      	movs	r0, #10
 800ec50:	f00c fd66 	bl	801b720 <TFT_DrawLine>
}
 800ec54:	b003      	add	sp, #12
 800ec56:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d1e7      	bne.n	800ec2c <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 800ec5c:	f7ff f8ec 	bl	800de38 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 800ec60:	f240 1153 	movw	r1, #339	; 0x153
 800ec64:	200a      	movs	r0, #10
 800ec66:	f008 fc51 	bl	801750c <GUI_TextEn_PARwavebands>
 800ec6a:	e7df      	b.n	800ec2c <GUI_GraphSet1_Screen+0x38>
 800ec6c:	20000232 	.word	0x20000232
 800ec70:	20004ca1 	.word	0x20004ca1
 800ec74:	2008acd4 	.word	0x2008acd4
 800ec78:	20004ca3 	.word	0x20004ca3
 800ec7c:	2008b278 	.word	0x2008b278
 800ec80:	20004ca2 	.word	0x20004ca2

0800ec84 <GUI_GraphSet2_Screen>:
{
 800ec84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800ec86:	4b19      	ldr	r3, [pc, #100]	; (800ecec <GUI_GraphSet2_Screen+0x68>)
 800ec88:	4a19      	ldr	r2, [pc, #100]	; (800ecf0 <GUI_GraphSet2_Screen+0x6c>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	7812      	ldrb	r2, [r2, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d02a      	beq.n	800ece8 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800ec92:	4d18      	ldr	r5, [pc, #96]	; (800ecf4 <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 800ec94:	f7ff fcd4 	bl	800e640 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 800ec98:	2152      	movs	r1, #82	; 0x52
 800ec9a:	2012      	movs	r0, #18
 800ec9c:	f008 f938 	bl	8016f10 <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800eca0:	782a      	ldrb	r2, [r5, #0]
 800eca2:	2146      	movs	r1, #70	; 0x46
 800eca4:	f002 0202 	and.w	r2, r2, #2
 800eca8:	20c8      	movs	r0, #200	; 0xc8
 800ecaa:	f005 f9b9 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800ecae:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ecb2:	237a      	movs	r3, #122	; 0x7a
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ecba:	200a      	movs	r0, #10
 800ecbc:	9400      	str	r4, [sp, #0]
 800ecbe:	f00c fd2f 	bl	801b720 <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 800ecc2:	2191      	movs	r1, #145	; 0x91
 800ecc4:	200a      	movs	r0, #10
 800ecc6:	f007 fff9 	bl	8016cbc <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 800ecca:	782a      	ldrb	r2, [r5, #0]
 800eccc:	2185      	movs	r1, #133	; 0x85
 800ecce:	f002 0204 	and.w	r2, r2, #4
 800ecd2:	20c8      	movs	r0, #200	; 0xc8
 800ecd4:	f005 f9a4 	bl	8014020 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800ecd8:	23b9      	movs	r3, #185	; 0xb9
 800ecda:	9400      	str	r4, [sp, #0]
 800ecdc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ece0:	4619      	mov	r1, r3
 800ece2:	200a      	movs	r0, #10
 800ece4:	f00c fd1c 	bl	801b720 <TFT_DrawLine>
}
 800ece8:	b003      	add	sp, #12
 800ecea:	bd30      	pop	{r4, r5, pc}
 800ecec:	20000232 	.word	0x20000232
 800ecf0:	20004ca1 	.word	0x20004ca1
 800ecf4:	20004ca2 	.word	0x20004ca2

0800ecf8 <GUI_ColorSet1_Screen>:
{
 800ecf8:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800ecfa:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <GUI_ColorSet1_Screen+0x70>)
 800ecfc:	4a1b      	ldr	r2, [pc, #108]	; (800ed6c <GUI_ColorSet1_Screen+0x74>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	7812      	ldrb	r2, [r2, #0]
 800ed02:	4c1b      	ldr	r4, [pc, #108]	; (800ed70 <GUI_ColorSet1_Screen+0x78>)
 800ed04:	429a      	cmp	r2, r3
 800ed06:	4b1b      	ldr	r3, [pc, #108]	; (800ed74 <GUI_ColorSet1_Screen+0x7c>)
 800ed08:	d103      	bne.n	800ed12 <GUI_ColorSet1_Screen+0x1a>
 800ed0a:	7819      	ldrb	r1, [r3, #0]
 800ed0c:	7822      	ldrb	r2, [r4, #0]
 800ed0e:	4291      	cmp	r1, r2
 800ed10:	d023      	beq.n	800ed5a <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 800ed12:	7822      	ldrb	r2, [r4, #0]
 800ed14:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800ed16:	f7ff fc93 	bl	800e640 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 800ed1a:	4b17      	ldr	r3, [pc, #92]	; (800ed78 <GUI_ColorSet1_Screen+0x80>)
 800ed1c:	220e      	movs	r2, #14
 800ed1e:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800ed20:	7823      	ldrb	r3, [r4, #0]
 800ed22:	b9e3      	cbnz	r3, 800ed5e <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 800ed24:	f7ff f818 	bl	800dd58 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 800ed28:	f240 1151 	movw	r1, #337	; 0x151
 800ed2c:	200a      	movs	r0, #10
 800ed2e:	f007 fed7 	bl	8016ae0 <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 800ed32:	4b12      	ldr	r3, [pc, #72]	; (800ed7c <GUI_ColorSet1_Screen+0x84>)
 800ed34:	781a      	ldrb	r2, [r3, #0]
 800ed36:	2301      	movs	r3, #1
 800ed38:	401a      	ands	r2, r3
 800ed3a:	f240 1147 	movw	r1, #327	; 0x147
 800ed3e:	20c8      	movs	r0, #200	; 0xc8
 800ed40:	f005 f9af 	bl	80140a2 <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800ed44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	f240 1379 	movw	r3, #377	; 0x179
 800ed4e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ed52:	4619      	mov	r1, r3
 800ed54:	200a      	movs	r0, #10
 800ed56:	f00c fce3 	bl	801b720 <TFT_DrawLine>
}
 800ed5a:	b002      	add	sp, #8
 800ed5c:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d1e2      	bne.n	800ed28 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 800ed62:	f7ff f869 	bl	800de38 <GUI_OptionMenuEn>
 800ed66:	e7df      	b.n	800ed28 <GUI_ColorSet1_Screen+0x30>
 800ed68:	20000232 	.word	0x20000232
 800ed6c:	20004ca1 	.word	0x20004ca1
 800ed70:	20004ca3 	.word	0x20004ca3
 800ed74:	2008acd4 	.word	0x2008acd4
 800ed78:	2008b278 	.word	0x2008b278
 800ed7c:	20004c9f 	.word	0x20004c9f

0800ed80 <GUI_ColorSet2_Screen>:
{
 800ed80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800ed82:	4b1a      	ldr	r3, [pc, #104]	; (800edec <GUI_ColorSet2_Screen+0x6c>)
 800ed84:	4a1a      	ldr	r2, [pc, #104]	; (800edf0 <GUI_ColorSet2_Screen+0x70>)
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	7812      	ldrb	r2, [r2, #0]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d02c      	beq.n	800ede8 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800ed8e:	4d19      	ldr	r5, [pc, #100]	; (800edf4 <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 800ed90:	f7ff fc56 	bl	800e640 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 800ed94:	2152      	movs	r1, #82	; 0x52
 800ed96:	2014      	movs	r0, #20
 800ed98:	f007 fcf0 	bl	801677c <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800ed9c:	782a      	ldrb	r2, [r5, #0]
 800ed9e:	2301      	movs	r3, #1
 800eda0:	f002 0204 	and.w	r2, r2, #4
 800eda4:	2146      	movs	r1, #70	; 0x46
 800eda6:	20c8      	movs	r0, #200	; 0xc8
 800eda8:	f005 f97b 	bl	80140a2 <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800edac:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800edb0:	237a      	movs	r3, #122	; 0x7a
 800edb2:	4619      	mov	r1, r3
 800edb4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800edb8:	200a      	movs	r0, #10
 800edba:	9400      	str	r4, [sp, #0]
 800edbc:	f00c fcb0 	bl	801b720 <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 800edc0:	2191      	movs	r1, #145	; 0x91
 800edc2:	2014      	movs	r0, #20
 800edc4:	f007 fd28 	bl	8016818 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 800edc8:	782a      	ldrb	r2, [r5, #0]
 800edca:	2301      	movs	r3, #1
 800edcc:	f002 0202 	and.w	r2, r2, #2
 800edd0:	2185      	movs	r1, #133	; 0x85
 800edd2:	20c8      	movs	r0, #200	; 0xc8
 800edd4:	f005 f965 	bl	80140a2 <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800edd8:	23b9      	movs	r3, #185	; 0xb9
 800edda:	9400      	str	r4, [sp, #0]
 800eddc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ede0:	4619      	mov	r1, r3
 800ede2:	200a      	movs	r0, #10
 800ede4:	f00c fc9c 	bl	801b720 <TFT_DrawLine>
}
 800ede8:	b003      	add	sp, #12
 800edea:	bd30      	pop	{r4, r5, pc}
 800edec:	20000232 	.word	0x20000232
 800edf0:	20004ca1 	.word	0x20004ca1
 800edf4:	20004c9f 	.word	0x20004c9f

0800edf8 <GUI_ColorRendSet_Screen>:
{
 800edf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	old_meas_type_E = 2; old_meas_type_L = 2;
 800edfa:	4a29      	ldr	r2, [pc, #164]	; (800eea0 <GUI_ColorRendSet_Screen+0xa8>)
 800edfc:	4d29      	ldr	r5, [pc, #164]	; (800eea4 <GUI_ColorRendSet_Screen+0xac>)
 800edfe:	4c2a      	ldr	r4, [pc, #168]	; (800eea8 <GUI_ColorRendSet_Screen+0xb0>)
 800ee00:	2302      	movs	r3, #2
 800ee02:	7013      	strb	r3, [r2, #0]
 800ee04:	4a29      	ldr	r2, [pc, #164]	; (800eeac <GUI_ColorRendSet_Screen+0xb4>)
 800ee06:	7013      	strb	r3, [r2, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800ee08:	4b29      	ldr	r3, [pc, #164]	; (800eeb0 <GUI_ColorRendSet_Screen+0xb8>)
 800ee0a:	4a2a      	ldr	r2, [pc, #168]	; (800eeb4 <GUI_ColorRendSet_Screen+0xbc>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	7812      	ldrb	r2, [r2, #0]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d103      	bne.n	800ee1c <GUI_ColorRendSet_Screen+0x24>
 800ee14:	782a      	ldrb	r2, [r5, #0]
 800ee16:	7823      	ldrb	r3, [r4, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d03e      	beq.n	800ee9a <GUI_ColorRendSet_Screen+0xa2>
		GUI_Panels();
 800ee1c:	f7ff fc10 	bl	800e640 <GUI_Panels>
		Language_status_prev = Language_status;
 800ee20:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800ee22:	4a25      	ldr	r2, [pc, #148]	; (800eeb8 <GUI_ColorRendSet_Screen+0xc0>)
		Language_status_prev = Language_status;
 800ee24:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800ee26:	2110      	movs	r1, #16
 800ee28:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800ee2a:	b90b      	cbnz	r3, 800ee30 <GUI_ColorRendSet_Screen+0x38>
			GUI_OptionMenuRu();
 800ee2c:	f7fe ff94 	bl	800dd58 <GUI_OptionMenuRu>
		if(Language_status == En){
 800ee30:	7823      	ldrb	r3, [r4, #0]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d101      	bne.n	800ee3a <GUI_ColorRendSet_Screen+0x42>
			GUI_OptionMenuEn();
 800ee36:	f7fe ffff 	bl	800de38 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800ee3a:	4d20      	ldr	r5, [pc, #128]	; (800eebc <GUI_ColorRendSet_Screen+0xc4>)
			GUI_Text_CRI(30, 325);
 800ee3c:	f240 1145 	movw	r1, #325	; 0x145
 800ee40:	201e      	movs	r0, #30
 800ee42:	f007 fe87 	bl	8016b54 <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800ee46:	782a      	ldrb	r2, [r5, #0]
 800ee48:	2301      	movs	r3, #1
 800ee4a:	401a      	ands	r2, r3
 800ee4c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800ee50:	20b9      	movs	r0, #185	; 0xb9
 800ee52:	f005 f926 	bl	80140a2 <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 800ee56:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ee5a:	f240 1363 	movw	r3, #355	; 0x163
 800ee5e:	4619      	mov	r1, r3
 800ee60:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee64:	200a      	movs	r0, #10
 800ee66:	9400      	str	r4, [sp, #0]
 800ee68:	f00c fc5a 	bl	801b720 <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 800ee6c:	f240 1171 	movw	r1, #369	; 0x171
 800ee70:	201e      	movs	r0, #30
 800ee72:	f007 fe93 	bl	8016b9c <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 800ee76:	782a      	ldrb	r2, [r5, #0]
 800ee78:	2301      	movs	r3, #1
 800ee7a:	43d2      	mvns	r2, r2
 800ee7c:	401a      	ands	r2, r3
 800ee7e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800ee82:	20b9      	movs	r0, #185	; 0xb9
 800ee84:	f005 f90d 	bl	80140a2 <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 800ee88:	f240 1391 	movw	r3, #401	; 0x191
 800ee8c:	9400      	str	r4, [sp, #0]
 800ee8e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee92:	4619      	mov	r1, r3
 800ee94:	200a      	movs	r0, #10
 800ee96:	f00c fc43 	bl	801b720 <TFT_DrawLine>
}
 800ee9a:	b003      	add	sp, #12
 800ee9c:	bd30      	pop	{r4, r5, pc}
 800ee9e:	bf00      	nop
 800eea0:	20000237 	.word	0x20000237
 800eea4:	2008acd4 	.word	0x2008acd4
 800eea8:	20004ca3 	.word	0x20004ca3
 800eeac:	20000238 	.word	0x20000238
 800eeb0:	20000232 	.word	0x20000232
 800eeb4:	20004ca1 	.word	0x20004ca1
 800eeb8:	2008b278 	.word	0x2008b278
 800eebc:	20004ca0 	.word	0x20004ca0

0800eec0 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 800eec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec4:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800eec8:	4b83      	ldr	r3, [pc, #524]	; (800f0d8 <GUI_Graph_Screen+0x218>)
 800eeca:	4a84      	ldr	r2, [pc, #528]	; (800f0dc <GUI_Graph_Screen+0x21c>)
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	7812      	ldrb	r2, [r2, #0]
 800eed0:	4d83      	ldr	r5, [pc, #524]	; (800f0e0 <GUI_Graph_Screen+0x220>)
 800eed2:	4c84      	ldr	r4, [pc, #528]	; (800f0e4 <GUI_Graph_Screen+0x224>)
 800eed4:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 800eed6:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800eed8:	d104      	bne.n	800eee4 <GUI_Graph_Screen+0x24>
 800eeda:	782a      	ldrb	r2, [r5, #0]
 800eedc:	7823      	ldrb	r3, [r4, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	f000 8098 	beq.w	800f014 <GUI_Graph_Screen+0x154>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800eee4:	2063      	movs	r0, #99	; 0x63
 800eee6:	f00c fa79 	bl	801b3dc <TFT_FillScreen_DMA>
		GUI_Panels();		
 800eeea:	f7ff fba9 	bl	800e640 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 800eeee:	7820      	ldrb	r0, [r4, #0]
 800eef0:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 800eef2:	4d7d      	ldr	r5, [pc, #500]	; (800f0e8 <GUI_Graph_Screen+0x228>)
 800eef4:	782b      	ldrb	r3, [r5, #0]
 800eef6:	07d9      	lsls	r1, r3, #31
 800eef8:	d501      	bpl.n	800eefe <GUI_Graph_Screen+0x3e>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 800eefa:	f00b fcd1 	bl	801a8a0 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 800eefe:	782b      	ldrb	r3, [r5, #0]
 800ef00:	075a      	lsls	r2, r3, #29
 800ef02:	d538      	bpl.n	800ef76 <GUI_Graph_Screen+0xb6>
			if(Rotation_Screen_Spectral == 0)
 800ef04:	7820      	ldrb	r0, [r4, #0]
 800ef06:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 800f0f8 <GUI_Graph_Screen+0x238>
 800ef0a:	f8df c204 	ldr.w	ip, [pc, #516]	; 800f110 <GUI_Graph_Screen+0x250>
 800ef0e:	4e77      	ldr	r6, [pc, #476]	; (800f0ec <GUI_Graph_Screen+0x22c>)
 800ef10:	4f77      	ldr	r7, [pc, #476]	; (800f0f0 <GUI_Graph_Screen+0x230>)
 800ef12:	2800      	cmp	r0, #0
 800ef14:	f040 8086 	bne.w	800f024 <GUI_Graph_Screen+0x164>
						buf_pix = (Spectral_day[i])*307;
 800ef18:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800f0f4 <GUI_Graph_Screen+0x234>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	0119      	lsls	r1, r3, #4
 800ef20:	eb0c 0201 	add.w	r2, ip, r1
 800ef24:	edd2 7a00 	vldr	s15, [r2]
 800ef28:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 800ef2c:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800ef2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef32:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 800ef36:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800ef3a:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 800ef3e:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 800ef42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef46:	ee17 2a90 	vmov	r2, s15
 800ef4a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800ef4e:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 800ef50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef54:	d1e3      	bne.n	800ef1e <GUI_Graph_Screen+0x5e>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 800ef56:	2114      	movs	r1, #20
 800ef58:	9000      	str	r0, [sp, #0]
 800ef5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ef5e:	4608      	mov	r0, r1
 800ef60:	4a65      	ldr	r2, [pc, #404]	; (800f0f8 <GUI_Graph_Screen+0x238>)
 800ef62:	f00b fe5d 	bl	801ac20 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 800ef66:	7823      	ldrb	r3, [r4, #0]
 800ef68:	9300      	str	r3, [sp, #0]
 800ef6a:	2114      	movs	r1, #20
 800ef6c:	231f      	movs	r3, #31
 800ef6e:	4a5f      	ldr	r2, [pc, #380]	; (800f0ec <GUI_Graph_Screen+0x22c>)
 800ef70:	4608      	mov	r0, r1
 800ef72:	f00b fe55 	bl	801ac20 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 800ef76:	782b      	ldrb	r3, [r5, #0]
 800ef78:	079b      	lsls	r3, r3, #30
 800ef7a:	d545      	bpl.n	800f008 <GUI_Graph_Screen+0x148>
				if(Rotation_Screen_Spectral == 0)
 800ef7c:	7826      	ldrb	r6, [r4, #0]
 800ef7e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800f104 <GUI_Graph_Screen+0x244>
 800ef82:	f8df a190 	ldr.w	sl, [pc, #400]	; 800f114 <GUI_Graph_Screen+0x254>
 800ef86:	4f5d      	ldr	r7, [pc, #372]	; (800f0fc <GUI_Graph_Screen+0x23c>)
 800ef88:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800f118 <GUI_Graph_Screen+0x258>
 800ef8c:	2e00      	cmp	r6, #0
 800ef8e:	d16c      	bne.n	800f06a <GUI_Graph_Screen+0x1aa>
							buf_pix = (Hazard_Blue[i])*307;
 800ef90:	ed9f 8a58 	vldr	s16, [pc, #352]	; 800f0f4 <GUI_Graph_Screen+0x234>
 800ef94:	4635      	mov	r5, r6
 800ef96:	012a      	lsls	r2, r5, #4
 800ef98:	eb0a 0302 	add.w	r3, sl, r2
 800ef9c:	edd3 7a00 	vldr	s15, [r3]
 800efa0:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 800efa4:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800efa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 800efaa:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800efac:	ee17 3a90 	vmov	r3, s15
 800efb0:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 800efb4:	f7f1 fad8 	bl	8000568 <__aeabi_f2d>
 800efb8:	2200      	movs	r2, #0
 800efba:	4b51      	ldr	r3, [pc, #324]	; (800f100 <GUI_Graph_Screen+0x240>)
 800efbc:	f7f1 fc52 	bl	8000864 <__aeabi_ddiv>
 800efc0:	a341      	add	r3, pc, #260	; (adr r3, 800f0c8 <GUI_Graph_Screen+0x208>)
 800efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc6:	f7f1 fb23 	bl	8000610 <__aeabi_dmul>
 800efca:	f7f1 fe19 	bl	8000c00 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 800efce:	ee07 0a90 	vmov	s15, r0
 800efd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efd6:	ee17 0a90 	vmov	r0, s15
 800efda:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800efde:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 800efe0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800efe4:	d1d7      	bne.n	800ef96 <GUI_Graph_Screen+0xd6>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 800efe6:	2114      	movs	r1, #20
 800efe8:	4608      	mov	r0, r1
 800efea:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800efee:	4a45      	ldr	r2, [pc, #276]	; (800f104 <GUI_Graph_Screen+0x244>)
 800eff0:	9600      	str	r6, [sp, #0]
 800eff2:	f00b fe15 	bl	801ac20 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 800eff6:	7823      	ldrb	r3, [r4, #0]
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	2114      	movs	r1, #20
 800effc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f000:	4a3e      	ldr	r2, [pc, #248]	; (800f0fc <GUI_Graph_Screen+0x23c>)
 800f002:	4608      	mov	r0, r1
 800f004:	f00b fe0c 	bl	801ac20 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 800f008:	7820      	ldrb	r0, [r4, #0]
 800f00a:	f00b fb7b 	bl	801a704 <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 800f00e:	7820      	ldrb	r0, [r4, #0]
 800f010:	f00b fd28 	bl	801aa64 <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 800f014:	4b3c      	ldr	r3, [pc, #240]	; (800f108 <GUI_Graph_Screen+0x248>)
 800f016:	2204      	movs	r2, #4
 800f018:	701a      	strb	r2, [r3, #0]
}
 800f01a:	b003      	add	sp, #12
 800f01c:	ecbd 8b02 	vpop	{d8}
 800f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 800f024:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800f10c <GUI_Graph_Screen+0x24c>
 800f028:	2300      	movs	r3, #0
 800f02a:	f04f 080c 	mov.w	r8, #12
 800f02e:	fb08 f103 	mul.w	r1, r8, r3
 800f032:	eb0c 0201 	add.w	r2, ip, r1
 800f036:	edd2 7a00 	vldr	s15, [r2]
 800f03a:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 800f03e:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800f040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f044:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 800f048:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800f04c:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 800f050:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 800f054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f058:	ee17 2a90 	vmov	r2, s15
 800f05c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800f060:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 800f062:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800f066:	d1e2      	bne.n	800f02e <GUI_Graph_Screen+0x16e>
 800f068:	e775      	b.n	800ef56 <GUI_Graph_Screen+0x96>
								buf_pix = (Hazard_Blue[i])*209;
 800f06a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800f10c <GUI_Graph_Screen+0x24c>
 800f06e:	2500      	movs	r5, #0
 800f070:	f04f 0b0c 	mov.w	fp, #12
 800f074:	fb0b f205 	mul.w	r2, fp, r5
 800f078:	eb0a 0302 	add.w	r3, sl, r2
 800f07c:	edd3 7a00 	vldr	s15, [r3]
 800f080:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 800f084:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 800f086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 800f08a:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 800f08c:	ee17 3a90 	vmov	r3, s15
 800f090:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 800f094:	f7f1 fa68 	bl	8000568 <__aeabi_f2d>
 800f098:	2200      	movs	r2, #0
 800f09a:	4b19      	ldr	r3, [pc, #100]	; (800f100 <GUI_Graph_Screen+0x240>)
 800f09c:	f7f1 fbe2 	bl	8000864 <__aeabi_ddiv>
 800f0a0:	a30b      	add	r3, pc, #44	; (adr r3, 800f0d0 <GUI_Graph_Screen+0x210>)
 800f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a6:	f7f1 fab3 	bl	8000610 <__aeabi_dmul>
 800f0aa:	f7f1 fda9 	bl	8000c00 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 800f0ae:	ee07 0a90 	vmov	s15, r0
 800f0b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0b6:	ee17 0a90 	vmov	r0, s15
 800f0ba:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800f0be:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 800f0c0:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 800f0c4:	d1d6      	bne.n	800f074 <GUI_Graph_Screen+0x1b4>
 800f0c6:	e78e      	b.n	800efe6 <GUI_Graph_Screen+0x126>
 800f0c8:	00000000 	.word	0x00000000
 800f0cc:	40733000 	.word	0x40733000
 800f0d0:	00000000 	.word	0x00000000
 800f0d4:	406a2000 	.word	0x406a2000
 800f0d8:	20000232 	.word	0x20000232
 800f0dc:	20004ca1 	.word	0x20004ca1
 800f0e0:	2008b279 	.word	0x2008b279
 800f0e4:	20004caa 	.word	0x20004caa
 800f0e8:	20004ca2 	.word	0x20004ca2
 800f0ec:	2008b540 	.word	0x2008b540
 800f0f0:	2004ec00 	.word	0x2004ec00
 800f0f4:	43998000 	.word	0x43998000
 800f0f8:	2008afa2 	.word	0x2008afa2
 800f0fc:	2008acdc 	.word	0x2008acdc
 800f100:	40240000 	.word	0x40240000
 800f104:	2008b27a 	.word	0x2008b27a
 800f108:	2008acd5 	.word	0x2008acd5
 800f10c:	43510000 	.word	0x43510000
 800f110:	2004dc00 	.word	0x2004dc00
 800f114:	20004ff8 	.word	0x20004ff8
 800f118:	20005ff8 	.word	0x20005ff8
 800f11c:	00000000 	.word	0x00000000

0800f120 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 800f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f124:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 800f128:	4c7f      	ldr	r4, [pc, #508]	; (800f328 <GUI_Color_Screen+0x208>)
 800f12a:	4f80      	ldr	r7, [pc, #512]	; (800f32c <GUI_Color_Screen+0x20c>)
 800f12c:	7823      	ldrb	r3, [r4, #0]
 800f12e:	4d80      	ldr	r5, [pc, #512]	; (800f330 <GUI_Color_Screen+0x210>)
 800f130:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 800f132:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 800f134:	d008      	beq.n	800f148 <GUI_Color_Screen+0x28>
 800f136:	7823      	ldrb	r3, [r4, #0]
 800f138:	2b0e      	cmp	r3, #14
 800f13a:	d005      	beq.n	800f148 <GUI_Color_Screen+0x28>
 800f13c:	7823      	ldrb	r3, [r4, #0]
 800f13e:	2b0f      	cmp	r3, #15
 800f140:	d002      	beq.n	800f148 <GUI_Color_Screen+0x28>
 800f142:	7823      	ldrb	r3, [r4, #0]
 800f144:	2b12      	cmp	r3, #18
 800f146:	d121      	bne.n	800f18c <GUI_Color_Screen+0x6c>
		GUI_Panels();	
 800f148:	f7ff fa7a 	bl	800e640 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 800f14c:	4b79      	ldr	r3, [pc, #484]	; (800f334 <GUI_Color_Screen+0x214>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 800f152:	782b      	ldrb	r3, [r5, #0]
 800f154:	f013 0f05 	tst.w	r3, #5
 800f158:	bf0c      	ite	eq
 800f15a:	200b      	moveq	r0, #11
 800f15c:	2012      	movne	r0, #18
 800f15e:	f013 0f04 	tst.w	r3, #4
 800f162:	4b75      	ldr	r3, [pc, #468]	; (800f338 <GUI_Color_Screen+0x218>)
 800f164:	bf18      	it	ne
 800f166:	21ac      	movne	r1, #172	; 0xac
 800f168:	cb0c      	ldmia	r3, {r2, r3}
 800f16a:	bf08      	it	eq
 800f16c:	2196      	moveq	r1, #150	; 0x96
 800f16e:	f00c fd36 	bl	801bbde <TFT_DrawBitmap>
		flag = 0;	
 800f172:	4b72      	ldr	r3, [pc, #456]	; (800f33c <GUI_Color_Screen+0x21c>)
 800f174:	2200      	movs	r2, #0
 800f176:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 800f178:	782b      	ldrb	r3, [r5, #0]
 800f17a:	f013 0101 	ands.w	r1, r3, #1
 800f17e:	f000 80b8 	beq.w	800f2f2 <GUI_Color_Screen+0x1d2>
 800f182:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800f186:	2012      	movs	r0, #18
 800f188:	f007 f86e 	bl	8016268 <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 800f18c:	4a6c      	ldr	r2, [pc, #432]	; (800f340 <GUI_Color_Screen+0x220>)
	preGUI_screen_state = Color_Screen;
 800f18e:	2305      	movs	r3, #5
 800f190:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 800f192:	7013      	strb	r3, [r2, #0]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(40, 50, colorimetry_xy[0], colorimetry_xy[1]); 
 800f194:	782b      	ldrb	r3, [r5, #0]
 800f196:	07d9      	lsls	r1, r3, #31
 800f198:	f140 80e4 	bpl.w	800f364 <GUI_Color_Screen+0x244>
 800f19c:	4c69      	ldr	r4, [pc, #420]	; (800f344 <GUI_Color_Screen+0x224>)
		 scr_refresh++;
 800f19e:	4d6a      	ldr	r5, [pc, #424]	; (800f348 <GUI_Color_Screen+0x228>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(40, 50, colorimetry_xy[0], colorimetry_xy[1]); 
 800f1a0:	edd4 0a01 	vldr	s1, [r4, #4]
 800f1a4:	ed94 0a00 	vldr	s0, [r4]
 800f1a8:	2132      	movs	r1, #50	; 0x32
 800f1aa:	2028      	movs	r0, #40	; 0x28
 800f1ac:	f006 f8a2 	bl	80152f4 <GUI_Text_xy_Measure>
		 scr_refresh++;
 800f1b0:	782b      	ldrb	r3, [r5, #0]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 800f1b6:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 800f1b8:	702b      	strb	r3, [r5, #0]
   if(scr_refresh > 15 ){
 800f1ba:	f240 8093 	bls.w	800f2e4 <GUI_Color_Screen+0x1c4>
		 if(colorimetry_xy[0] < 0.74 & colorimetry_xy[1] < 0.84 ){
 800f1be:	6820      	ldr	r0, [r4, #0]
 800f1c0:	f7f1 f9d2 	bl	8000568 <__aeabi_f2d>
 800f1c4:	a354      	add	r3, pc, #336	; (adr r3, 800f318 <GUI_Color_Screen+0x1f8>)
 800f1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ca:	f04f 0601 	mov.w	r6, #1
 800f1ce:	f7f1 fc91 	bl	8000af4 <__aeabi_dcmplt>
 800f1d2:	b900      	cbnz	r0, 800f1d6 <GUI_Color_Screen+0xb6>
 800f1d4:	4606      	mov	r6, r0
 800f1d6:	f016 0fff 	tst.w	r6, #255	; 0xff
 800f1da:	f000 8083 	beq.w	800f2e4 <GUI_Color_Screen+0x1c4>
 800f1de:	6860      	ldr	r0, [r4, #4]
 800f1e0:	f7f1 f9c2 	bl	8000568 <__aeabi_f2d>
 800f1e4:	a34e      	add	r3, pc, #312	; (adr r3, 800f320 <GUI_Color_Screen+0x200>)
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	f04f 0601 	mov.w	r6, #1
 800f1ee:	f7f1 fc81 	bl	8000af4 <__aeabi_dcmplt>
 800f1f2:	b900      	cbnz	r0, 800f1f6 <GUI_Color_Screen+0xd6>
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	f016 0fff 	tst.w	r6, #255	; 0xff
 800f1fa:	d073      	beq.n	800f2e4 <GUI_Color_Screen+0x1c4>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 800f1fc:	4e4f      	ldr	r6, [pc, #316]	; (800f33c <GUI_Color_Screen+0x21c>)
 800f1fe:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800f360 <GUI_Color_Screen+0x240>
 800f202:	7832      	ldrb	r2, [r6, #0]
 800f204:	eddf 8a51 	vldr	s17, [pc, #324]	; 800f34c <GUI_Color_Screen+0x22c>
 800f208:	ed9f 8a51 	vldr	s16, [pc, #324]	; 800f350 <GUI_Color_Screen+0x230>
 800f20c:	2a00      	cmp	r2, #0
 800f20e:	d03f      	beq.n	800f290 <GUI_Color_Screen+0x170>
 800f210:	edd8 6a01 	vldr	s13, [r8, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 10, Locus);}
 800f214:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800f354 <GUI_Color_Screen+0x234>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 800f218:	edd8 5a00 	vldr	s11, [r8]
 800f21c:	4a46      	ldr	r2, [pc, #280]	; (800f338 <GUI_Color_Screen+0x218>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 10, Locus);}
 800f21e:	eef1 6a66 	vneg.f32	s13, s13
 800f222:	eea6 7aa8 	vfma.f32	s14, s13, s17
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 800f226:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 10, Locus);}
 800f22a:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800f22e:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 800f232:	ab01      	add	r3, sp, #4
 800f234:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f238:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800f358 <GUI_Color_Screen+0x238>
 800f23c:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 10, Locus);}
 800f240:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 800f244:	eee5 7a88 	vfma.f32	s15, s11, s16
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 800f248:	eea6 7aa8 	vfma.f32	s14, s13, s17
 800f24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f250:	ee37 7a46 	vsub.f32	s14, s14, s12
 800f254:	edcd 7a05 	vstr	s15, [sp, #20]
 800f258:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f25c:	edcd 7a06 	vstr	s15, [sp, #24]
 800f260:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 800f264:	eee5 7a88 	vfma.f32	s15, s11, s16
 800f268:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f26c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f270:	edcd 7a07 	vstr	s15, [sp, #28]
 800f274:	e883 0003 	stmia.w	r3, {r0, r1}
 800f278:	230a      	movs	r3, #10
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f280:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f284:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800f288:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800f28c:	f00c fd44 	bl	801bd18 <TFT_DrawCutBMP>
		colorimetry_xy_old[1] = colorimetry_xy[1];
 800f290:	edd4 6a01 	vldr	s13, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy[1]*300, 2, TFT_Black);
 800f294:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f35c <GUI_Color_Screen+0x23c>
		colorimetry_xy_old[0] = colorimetry_xy[0];
 800f298:	ed94 7a00 	vldr	s14, [r4]
		colorimetry_xy_old[1] = colorimetry_xy[1];
 800f29c:	edc8 6a01 	vstr	s13, [r8, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy[1]*300, 2, TFT_Black);
 800f2a0:	eee6 7ae8 	vfms.f32	s15, s13, s17
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	2202      	movs	r2, #2
		colorimetry_xy_old[0] = colorimetry_xy[0];
 800f2a8:	ed88 7a00 	vstr	s14, [r8]
		TFT_DrawFilledCircle( 18+colorimetry_xy[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy[1]*300, 2, TFT_Black);
 800f2ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2b0:	edcd 7a04 	vstr	s15, [sp, #16]
 800f2b4:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 800f2b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f2bc:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800f2c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2c4:	edcd 7a05 	vstr	s15, [sp, #20]
 800f2c8:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 800f2cc:	f00c fac1 	bl	801b852 <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800f2d6:	2012      	movs	r0, #18
 800f2d8:	f006 ffc6 	bl	8016268 <GUI_Axes_Locus_XY>
		flag = 1;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	7033      	strb	r3, [r6, #0]
		scr_refresh = 0;}
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	702b      	strb	r3, [r5, #0]
	TFT_direction = 0x00;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	703b      	strb	r3, [r7, #0]
}         
 800f2e8:	b009      	add	sp, #36	; 0x24
 800f2ea:	ecbd 8b02 	vpop	{d8}
 800f2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 800f2f2:	f013 0204 	ands.w	r2, r3, #4
 800f2f6:	d006      	beq.n	800f306 <GUI_Color_Screen+0x1e6>
 800f2f8:	460a      	mov	r2, r1
 800f2fa:	2012      	movs	r0, #18
 800f2fc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800f300:	f007 f818 	bl	8016334 <GUI_Axes_Locus_LUV>
 800f304:	e742      	b.n	800f18c <GUI_Color_Screen+0x6c>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 800f306:	0798      	lsls	r0, r3, #30
 800f308:	f57f af40 	bpl.w	800f18c <GUI_Color_Screen+0x6c>
 800f30c:	f240 1113 	movw	r1, #275	; 0x113
 800f310:	2088      	movs	r0, #136	; 0x88
 800f312:	f007 f875 	bl	8016400 <GUI_Axes_Locus_Lab>
 800f316:	e739      	b.n	800f18c <GUI_Color_Screen+0x6c>
 800f318:	7ae147ae 	.word	0x7ae147ae
 800f31c:	3fe7ae14 	.word	0x3fe7ae14
 800f320:	ae147ae1 	.word	0xae147ae1
 800f324:	3feae147 	.word	0x3feae147
 800f328:	20000232 	.word	0x20000232
 800f32c:	20004c40 	.word	0x20004c40
 800f330:	20004c9f 	.word	0x20004c9f
 800f334:	20004ca8 	.word	0x20004ca8
 800f338:	2008b270 	.word	0x2008b270
 800f33c:	20004cc5 	.word	0x20004cc5
 800f340:	2008acd5 	.word	0x2008acd5
 800f344:	2008a7f4 	.word	0x2008a7f4
 800f348:	20004cc8 	.word	0x20004cc8
 800f34c:	43960000 	.word	0x43960000
 800f350:	43938000 	.word	0x43938000
 800f354:	43790000 	.word	0x43790000
 800f358:	43c78000 	.word	0x43c78000
 800f35c:	43c80000 	.word	0x43c80000
 800f360:	20004cbc 	.word	0x20004cbc
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(40, 50, colorimetry_uv1976[0], colorimetry_uv1976[1]);
 800f364:	075a      	lsls	r2, r3, #29
 800f366:	f140 80b9 	bpl.w	800f4dc <GUI_Color_Screen+0x3bc>
 800f36a:	4cc9      	ldr	r4, [pc, #804]	; (800f690 <GUI_Color_Screen+0x570>)
		scr_refresh++;
 800f36c:	4ec9      	ldr	r6, [pc, #804]	; (800f694 <GUI_Color_Screen+0x574>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(40, 50, colorimetry_uv1976[0], colorimetry_uv1976[1]);
 800f36e:	edd4 0a01 	vldr	s1, [r4, #4]
 800f372:	ed94 0a00 	vldr	s0, [r4]
 800f376:	2132      	movs	r1, #50	; 0x32
 800f378:	2028      	movs	r0, #40	; 0x28
 800f37a:	f006 f82b 	bl	80153d4 <GUI_Text_uv_Measure>
		scr_refresh++;
 800f37e:	7833      	ldrb	r3, [r6, #0]
 800f380:	3301      	adds	r3, #1
 800f382:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 800f384:	2b0f      	cmp	r3, #15
		scr_refresh++;
 800f386:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 800f388:	d9ac      	bls.n	800f2e4 <GUI_Color_Screen+0x1c4>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 800f38a:	edd4 7a00 	vldr	s15, [r4]
 800f38e:	ed94 8a01 	vldr	s16, [r4, #4]
 800f392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f39e:	bfcc      	ite	gt
 800f3a0:	2501      	movgt	r5, #1
 800f3a2:	2500      	movle	r5, #0
 800f3a4:	ee17 0a90 	vmov	r0, s15
 800f3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ac:	f005 0501 	and.w	r5, r5, #1
 800f3b0:	bfd8      	it	le
 800f3b2:	2500      	movle	r5, #0
 800f3b4:	f7f1 f8d8 	bl	8000568 <__aeabi_f2d>
 800f3b8:	a3a9      	add	r3, pc, #676	; (adr r3, 800f660 <GUI_Color_Screen+0x540>)
 800f3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3be:	f04f 0801 	mov.w	r8, #1
 800f3c2:	f7f1 fb97 	bl	8000af4 <__aeabi_dcmplt>
 800f3c6:	b900      	cbnz	r0, 800f3ca <GUI_Color_Screen+0x2aa>
 800f3c8:	4680      	mov	r8, r0
 800f3ca:	ea15 0f08 	tst.w	r5, r8
 800f3ce:	d089      	beq.n	800f2e4 <GUI_Color_Screen+0x1c4>
 800f3d0:	ee18 0a10 	vmov	r0, s16
 800f3d4:	f7f1 f8c8 	bl	8000568 <__aeabi_f2d>
 800f3d8:	a3a3      	add	r3, pc, #652	; (adr r3, 800f668 <GUI_Color_Screen+0x548>)
 800f3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3de:	f04f 0501 	mov.w	r5, #1
 800f3e2:	f7f1 fb87 	bl	8000af4 <__aeabi_dcmplt>
 800f3e6:	b900      	cbnz	r0, 800f3ea <GUI_Color_Screen+0x2ca>
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	f015 0fff 	tst.w	r5, #255	; 0xff
 800f3ee:	f43f af79 	beq.w	800f2e4 <GUI_Color_Screen+0x1c4>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 800f3f2:	4da9      	ldr	r5, [pc, #676]	; (800f698 <GUI_Color_Screen+0x578>)
 800f3f4:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800f6cc <GUI_Color_Screen+0x5ac>
 800f3f8:	782a      	ldrb	r2, [r5, #0]
 800f3fa:	eddf 8aa8 	vldr	s17, [pc, #672]	; 800f69c <GUI_Color_Screen+0x57c>
 800f3fe:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 800f6a0 <GUI_Color_Screen+0x580>
 800f402:	2a00      	cmp	r2, #0
 800f404:	d03f      	beq.n	800f486 <GUI_Color_Screen+0x366>
 800f406:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 10, Locus);}
 800f40a:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800f6a4 <GUI_Color_Screen+0x584>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 800f40e:	edd8 5a00 	vldr	s11, [r8]
 800f412:	4aa5      	ldr	r2, [pc, #660]	; (800f6a8 <GUI_Color_Screen+0x588>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 10, Locus);}
 800f414:	eef1 6a66 	vneg.f32	s13, s13
 800f418:	eea6 7aa8 	vfma.f32	s14, s13, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 800f41c:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 10, Locus);}
 800f420:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800f424:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 800f428:	ab01      	add	r3, sp, #4
 800f42a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f42e:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800f6ac <GUI_Color_Screen+0x58c>
 800f432:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 10, Locus);}
 800f436:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 800f43a:	eee5 7a88 	vfma.f32	s15, s11, s16
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 800f43e:	eea6 7aa8 	vfma.f32	s14, s13, s17
 800f442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f446:	ee37 7a46 	vsub.f32	s14, s14, s12
 800f44a:	edcd 7a05 	vstr	s15, [sp, #20]
 800f44e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f452:	edcd 7a06 	vstr	s15, [sp, #24]
 800f456:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 800f45a:	eee5 7a88 	vfma.f32	s15, s11, s16
 800f45e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f466:	edcd 7a07 	vstr	s15, [sp, #28]
 800f46a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f46e:	230a      	movs	r3, #10
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f476:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f47a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800f47e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800f482:	f00c fc49 	bl	801bd18 <TFT_DrawCutBMP>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 800f486:	edd4 6a01 	vldr	s13, [r4, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 800f48a:	eddf 7a89 	vldr	s15, [pc, #548]	; 800f6b0 <GUI_Color_Screen+0x590>
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 800f48e:	ed94 7a00 	vldr	s14, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 800f492:	edc8 6a01 	vstr	s13, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 800f496:	eee6 7ae8 	vfms.f32	s15, s13, s17
 800f49a:	2300      	movs	r3, #0
 800f49c:	2202      	movs	r2, #2
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 800f49e:	ed88 7a00 	vstr	s14, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 800f4a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4a6:	edcd 7a04 	vstr	s15, [sp, #16]
 800f4aa:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 800f4ae:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f4b2:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800f4b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4ba:	edcd 7a05 	vstr	s15, [sp, #20]
 800f4be:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 800f4c2:	f00c f9c6 	bl	801b852 <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800f4cc:	2012      	movs	r0, #18
 800f4ce:	f006 ff31 	bl	8016334 <GUI_Axes_Locus_LUV>
			flag = 1;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	702b      	strb	r3, [r5, #0]
			scr_refresh = 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	7033      	strb	r3, [r6, #0]
 800f4da:	e703      	b.n	800f2e4 <GUI_Color_Screen+0x1c4>
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(40, 45, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2]);
 800f4dc:	079b      	lsls	r3, r3, #30
 800f4de:	f57f af01 	bpl.w	800f2e4 <GUI_Color_Screen+0x1c4>
 800f4e2:	4c74      	ldr	r4, [pc, #464]	; (800f6b4 <GUI_Color_Screen+0x594>)
 800f4e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f4e8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f4ec:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f4f0:	9100      	str	r1, [sp, #0]
 800f4f2:	2028      	movs	r0, #40	; 0x28
 800f4f4:	212d      	movs	r1, #45	; 0x2d
 800f4f6:	f006 fc97 	bl	8015e28 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 800f4fa:	8863      	ldrh	r3, [r4, #2]
 800f4fc:	337f      	adds	r3, #127	; 0x7f
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	2bfe      	cmp	r3, #254	; 0xfe
 800f502:	f63f aeef 	bhi.w	800f2e4 <GUI_Color_Screen+0x1c4>
 800f506:	88a3      	ldrh	r3, [r4, #4]
 800f508:	337f      	adds	r3, #127	; 0x7f
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	2bfe      	cmp	r3, #254	; 0xfe
 800f50e:	f63f aee9 	bhi.w	800f2e4 <GUI_Color_Screen+0x1c4>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 800f512:	4d61      	ldr	r5, [pc, #388]	; (800f698 <GUI_Color_Screen+0x578>)
 800f514:	4e68      	ldr	r6, [pc, #416]	; (800f6b8 <GUI_Color_Screen+0x598>)
 800f516:	782b      	ldrb	r3, [r5, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d05d      	beq.n	800f5d8 <GUI_Color_Screen+0x4b8>
 800f51c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800f520:	f7f1 f810 	bl	8000544 <__aeabi_i2d>
 800f524:	a352      	add	r3, pc, #328	; (adr r3, 800f670 <GUI_Color_Screen+0x550>)
 800f526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52a:	f7f1 f871 	bl	8000610 <__aeabi_dmul>
 800f52e:	4682      	mov	sl, r0
 800f530:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 800f534:	468b      	mov	fp, r1
 800f536:	f7f1 f805 	bl	8000544 <__aeabi_i2d>
 800f53a:	a34d      	add	r3, pc, #308	; (adr r3, 800f670 <GUI_Color_Screen+0x550>)
 800f53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f540:	f7f1 f866 	bl	8000610 <__aeabi_dmul>
 800f544:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 10, Locus);}
 800f546:	4602      	mov	r2, r0
 800f548:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 800f54a:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 10, Locus);}
 800f54c:	2000      	movs	r0, #0
 800f54e:	495b      	ldr	r1, [pc, #364]	; (800f6bc <GUI_Color_Screen+0x59c>)
 800f550:	f7f0 feaa 	bl	80002a8 <__aeabi_dsub>
 800f554:	2200      	movs	r2, #0
 800f556:	4b5a      	ldr	r3, [pc, #360]	; (800f6c0 <GUI_Color_Screen+0x5a0>)
 800f558:	f7f0 fea6 	bl	80002a8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 800f55c:	f7f1 fb30 	bl	8000bc0 <__aeabi_d2uiz>
 800f560:	b283      	uxth	r3, r0
 800f562:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 10, Locus);}
 800f564:	2200      	movs	r2, #0
 800f566:	4b57      	ldr	r3, [pc, #348]	; (800f6c4 <GUI_Color_Screen+0x5a4>)
 800f568:	4650      	mov	r0, sl
 800f56a:	4659      	mov	r1, fp
 800f56c:	f7f0 fe9e 	bl	80002ac <__adddf3>
 800f570:	2200      	movs	r2, #0
 800f572:	4b53      	ldr	r3, [pc, #332]	; (800f6c0 <GUI_Color_Screen+0x5a0>)
 800f574:	f7f0 fe98 	bl	80002a8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 800f578:	f7f1 fb22 	bl	8000bc0 <__aeabi_d2uiz>
 800f57c:	b283      	uxth	r3, r0
 800f57e:	4642      	mov	r2, r8
 800f580:	9305      	str	r3, [sp, #20]
 800f582:	a13d      	add	r1, pc, #244	; (adr r1, 800f678 <GUI_Color_Screen+0x558>)
 800f584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f588:	464b      	mov	r3, r9
 800f58a:	f7f0 fe8d 	bl	80002a8 <__aeabi_dsub>
 800f58e:	2200      	movs	r2, #0
 800f590:	4b4b      	ldr	r3, [pc, #300]	; (800f6c0 <GUI_Color_Screen+0x5a0>)
 800f592:	f7f0 fe89 	bl	80002a8 <__aeabi_dsub>
 800f596:	f7f1 fb13 	bl	8000bc0 <__aeabi_d2uiz>
 800f59a:	a339      	add	r3, pc, #228	; (adr r3, 800f680 <GUI_Color_Screen+0x560>)
 800f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a0:	fa1f f880 	uxth.w	r8, r0
 800f5a4:	4659      	mov	r1, fp
 800f5a6:	4650      	mov	r0, sl
 800f5a8:	f7f0 fe80 	bl	80002ac <__adddf3>
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	4b44      	ldr	r3, [pc, #272]	; (800f6c0 <GUI_Color_Screen+0x5a0>)
 800f5b0:	f7f0 fe7a 	bl	80002a8 <__aeabi_dsub>
 800f5b4:	f7f1 fb04 	bl	8000bc0 <__aeabi_d2uiz>
 800f5b8:	4a3b      	ldr	r2, [pc, #236]	; (800f6a8 <GUI_Color_Screen+0x588>)
 800f5ba:	fa1f fe80 	uxth.w	lr, r0
 800f5be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5c2:	ab01      	add	r3, sp, #4
 800f5c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5c8:	230a      	movs	r3, #10
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	9a05      	ldr	r2, [sp, #20]
 800f5ce:	9b04      	ldr	r3, [sp, #16]
 800f5d0:	4641      	mov	r1, r8
 800f5d2:	4670      	mov	r0, lr
 800f5d4:	f00c fba0 	bl	801bd18 <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 800f5d8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 800f5dc:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 800f5e0:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 800f5e2:	ee07 0a90 	vmov	s15, r0
 800f5e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 800f5ea:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 800f5ee:	ee17 0a90 	vmov	r0, s15
 800f5f2:	f7f0 ffb9 	bl	8000568 <__aeabi_f2d>
 800f5f6:	a31e      	add	r3, pc, #120	; (adr r3, 800f670 <GUI_Color_Screen+0x550>)
 800f5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fc:	f7f1 f808 	bl	8000610 <__aeabi_dmul>
 800f600:	4602      	mov	r2, r0
 800f602:	460b      	mov	r3, r1
 800f604:	a120      	add	r1, pc, #128	; (adr r1, 800f688 <GUI_Color_Screen+0x568>)
 800f606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f60a:	f7f0 fe4d 	bl	80002a8 <__aeabi_dsub>
 800f60e:	f7f1 faaf 	bl	8000b70 <__aeabi_d2iz>
 800f612:	ee07 8a90 	vmov	s15, r8
 800f616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f61a:	b204      	sxth	r4, r0
 800f61c:	ee17 0a90 	vmov	r0, s15
 800f620:	f7f0 ffa2 	bl	8000568 <__aeabi_f2d>
 800f624:	a312      	add	r3, pc, #72	; (adr r3, 800f670 <GUI_Color_Screen+0x550>)
 800f626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62a:	f7f0 fff1 	bl	8000610 <__aeabi_dmul>
 800f62e:	2200      	movs	r2, #0
 800f630:	4b25      	ldr	r3, [pc, #148]	; (800f6c8 <GUI_Color_Screen+0x5a8>)
 800f632:	f7f0 fe3b 	bl	80002ac <__adddf3>
 800f636:	f7f1 fa9b 	bl	8000b70 <__aeabi_d2iz>
 800f63a:	2300      	movs	r3, #0
 800f63c:	2202      	movs	r2, #2
 800f63e:	4621      	mov	r1, r4
 800f640:	b200      	sxth	r0, r0
 800f642:	f00c f906 	bl	801b852 <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 800f646:	2200      	movs	r2, #0
 800f648:	f240 1113 	movw	r1, #275	; 0x113
 800f64c:	2088      	movs	r0, #136	; 0x88
 800f64e:	f006 fed7 	bl	8016400 <GUI_Axes_Locus_Lab>
				flag = 1;
 800f652:	2301      	movs	r3, #1
 800f654:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 800f656:	4b0f      	ldr	r3, [pc, #60]	; (800f694 <GUI_Color_Screen+0x574>)
 800f658:	2200      	movs	r2, #0
 800f65a:	701a      	strb	r2, [r3, #0]
 800f65c:	e642      	b.n	800f2e4 <GUI_Color_Screen+0x1c4>
 800f65e:	bf00      	nop
 800f660:	c28f5c29 	.word	0xc28f5c29
 800f664:	3fe428f5 	.word	0x3fe428f5
 800f668:	ae147ae1 	.word	0xae147ae1
 800f66c:	3fe2e147 	.word	0x3fe2e147
 800f670:	5a1cac08 	.word	0x5a1cac08
 800f674:	3fef3b64 	.word	0x3fef3b64
 800f678:	00000000 	.word	0x00000000
 800f67c:	40712000 	.word	0x40712000
 800f680:	00000000 	.word	0x00000000
 800f684:	4060e000 	.word	0x4060e000
 800f688:	00000000 	.word	0x00000000
 800f68c:	40713000 	.word	0x40713000
 800f690:	2008a7ec 	.word	0x2008a7ec
 800f694:	20004cc8 	.word	0x20004cc8
 800f698:	20004cc5 	.word	0x20004cc5
 800f69c:	43c60000 	.word	0x43c60000
 800f6a0:	43c98000 	.word	0x43c98000
 800f6a4:	43690000 	.word	0x43690000
 800f6a8:	2008b270 	.word	0x2008b270
 800f6ac:	43ca8000 	.word	0x43ca8000
 800f6b0:	43cb0000 	.word	0x43cb0000
 800f6b4:	2008a7d8 	.word	0x2008a7d8
 800f6b8:	20004cac 	.word	0x20004cac
 800f6bc:	405f0000 	.word	0x405f0000
 800f6c0:	40140000 	.word	0x40140000
 800f6c4:	405f4000 	.word	0x405f4000
 800f6c8:	40610000 	.word	0x40610000
 800f6cc:	20004cb4 	.word	0x20004cb4

0800f6d0 <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 800f6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	old_meas_type_E = 2; old_meas_type_L = 2;
 800f6d2:	4a36      	ldr	r2, [pc, #216]	; (800f7ac <GUI_ColorRend_Screen+0xdc>)
 800f6d4:	4d36      	ldr	r5, [pc, #216]	; (800f7b0 <GUI_ColorRend_Screen+0xe0>)
 800f6d6:	4c37      	ldr	r4, [pc, #220]	; (800f7b4 <GUI_ColorRend_Screen+0xe4>)
 800f6d8:	2302      	movs	r3, #2
 800f6da:	7013      	strb	r3, [r2, #0]
 800f6dc:	4a36      	ldr	r2, [pc, #216]	; (800f7b8 <GUI_ColorRend_Screen+0xe8>)
 800f6de:	7013      	strb	r3, [r2, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 800f6e0:	4b36      	ldr	r3, [pc, #216]	; (800f7bc <GUI_ColorRend_Screen+0xec>)
 800f6e2:	4a37      	ldr	r2, [pc, #220]	; (800f7c0 <GUI_ColorRend_Screen+0xf0>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d103      	bne.n	800f6f4 <GUI_ColorRend_Screen+0x24>
 800f6ec:	782a      	ldrb	r2, [r5, #0]
 800f6ee:	7823      	ldrb	r3, [r4, #0]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d026      	beq.n	800f742 <GUI_ColorRend_Screen+0x72>
		GUI_Panels();		
 800f6f4:	f7fe ffa4 	bl	800e640 <GUI_Panels>
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 800f6f8:	7823      	ldrb	r3, [r4, #0]
 800f6fa:	702b      	strb	r3, [r5, #0]
		GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 800f6fc:	4d31      	ldr	r5, [pc, #196]	; (800f7c4 <GUI_ColorRend_Screen+0xf4>)
 800f6fe:	782a      	ldrb	r2, [r5, #0]
 800f700:	2a00      	cmp	r2, #0
 800f702:	d039      	beq.n	800f778 <GUI_ColorRend_Screen+0xa8>
 800f704:	4b30      	ldr	r3, [pc, #192]	; (800f7c8 <GUI_ColorRend_Screen+0xf8>)
 800f706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f70a:	f7f1 fa79 	bl	8000c00 <__aeabi_d2f>
 800f70e:	210d      	movs	r1, #13
 800f710:	ee00 0a10 	vmov	s0, r0
 800f714:	2055      	movs	r0, #85	; 0x55
 800f716:	f004 fea1 	bl	801445c <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 800f71a:	4b2c      	ldr	r3, [pc, #176]	; (800f7cc <GUI_ColorRend_Screen+0xfc>)
 800f71c:	2206      	movs	r2, #6
 800f71e:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 800f720:	782b      	ldrb	r3, [r5, #0]
 800f722:	07da      	lsls	r2, r3, #31
 800f724:	d52a      	bpl.n	800f77c <GUI_ColorRend_Screen+0xac>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 800f726:	492a      	ldr	r1, [pc, #168]	; (800f7d0 <GUI_ColorRend_Screen+0x100>)
 800f728:	4b2a      	ldr	r3, [pc, #168]	; (800f7d4 <GUI_ColorRend_Screen+0x104>)
 800f72a:	4a2b      	ldr	r2, [pc, #172]	; (800f7d8 <GUI_ColorRend_Screen+0x108>)
 800f72c:	f991 1000 	ldrsb.w	r1, [r1]
 800f730:	f993 3000 	ldrsb.w	r3, [r3]
 800f734:	f992 2000 	ldrsb.w	r2, [r2]
 800f738:	7820      	ldrb	r0, [r4, #0]
 800f73a:	9100      	str	r1, [sp, #0]
 800f73c:	4927      	ldr	r1, [pc, #156]	; (800f7dc <GUI_ColorRend_Screen+0x10c>)
 800f73e:	f7fd fb65 	bl	800ce0c <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 800f742:	4b27      	ldr	r3, [pc, #156]	; (800f7e0 <GUI_ColorRend_Screen+0x110>)
 800f744:	781a      	ldrb	r2, [r3, #0]
 800f746:	4b27      	ldr	r3, [pc, #156]	; (800f7e4 <GUI_ColorRend_Screen+0x114>)
 800f748:	7819      	ldrb	r1, [r3, #0]
 800f74a:	4291      	cmp	r1, r2
 800f74c:	d012      	beq.n	800f774 <GUI_ColorRend_Screen+0xa4>
		Calc_ColorRend_old = Calc_ColorRend;
 800f74e:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 800f750:	4b1c      	ldr	r3, [pc, #112]	; (800f7c4 <GUI_ColorRend_Screen+0xf4>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	07db      	lsls	r3, r3, #31
 800f756:	d51d      	bpl.n	800f794 <GUI_ColorRend_Screen+0xc4>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 800f758:	491d      	ldr	r1, [pc, #116]	; (800f7d0 <GUI_ColorRend_Screen+0x100>)
 800f75a:	4b1e      	ldr	r3, [pc, #120]	; (800f7d4 <GUI_ColorRend_Screen+0x104>)
 800f75c:	4a1e      	ldr	r2, [pc, #120]	; (800f7d8 <GUI_ColorRend_Screen+0x108>)
 800f75e:	f991 1000 	ldrsb.w	r1, [r1]
 800f762:	f993 3000 	ldrsb.w	r3, [r3]
 800f766:	f992 2000 	ldrsb.w	r2, [r2]
 800f76a:	7820      	ldrb	r0, [r4, #0]
 800f76c:	9100      	str	r1, [sp, #0]
 800f76e:	491b      	ldr	r1, [pc, #108]	; (800f7dc <GUI_ColorRend_Screen+0x10c>)
 800f770:	f7fd fb4c 	bl	800ce0c <CRI_Draw>
}
 800f774:	b003      	add	sp, #12
 800f776:	bd30      	pop	{r4, r5, pc}
		GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 800f778:	4b1b      	ldr	r3, [pc, #108]	; (800f7e8 <GUI_ColorRend_Screen+0x118>)
 800f77a:	e7c4      	b.n	800f706 <GUI_ColorRend_Screen+0x36>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 800f77c:	491b      	ldr	r1, [pc, #108]	; (800f7ec <GUI_ColorRend_Screen+0x11c>)
 800f77e:	4b1c      	ldr	r3, [pc, #112]	; (800f7f0 <GUI_ColorRend_Screen+0x120>)
 800f780:	4a1c      	ldr	r2, [pc, #112]	; (800f7f4 <GUI_ColorRend_Screen+0x124>)
 800f782:	7809      	ldrb	r1, [r1, #0]
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	7812      	ldrb	r2, [r2, #0]
 800f788:	7820      	ldrb	r0, [r4, #0]
 800f78a:	9100      	str	r1, [sp, #0]
 800f78c:	491a      	ldr	r1, [pc, #104]	; (800f7f8 <GUI_ColorRend_Screen+0x128>)
 800f78e:	f7fb fae9 	bl	800ad64 <CQS_Draw>
 800f792:	e7d6      	b.n	800f742 <GUI_ColorRend_Screen+0x72>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 800f794:	4915      	ldr	r1, [pc, #84]	; (800f7ec <GUI_ColorRend_Screen+0x11c>)
 800f796:	4b16      	ldr	r3, [pc, #88]	; (800f7f0 <GUI_ColorRend_Screen+0x120>)
 800f798:	4a16      	ldr	r2, [pc, #88]	; (800f7f4 <GUI_ColorRend_Screen+0x124>)
 800f79a:	7809      	ldrb	r1, [r1, #0]
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	7812      	ldrb	r2, [r2, #0]
 800f7a0:	7820      	ldrb	r0, [r4, #0]
 800f7a2:	9100      	str	r1, [sp, #0]
 800f7a4:	4914      	ldr	r1, [pc, #80]	; (800f7f8 <GUI_ColorRend_Screen+0x128>)
 800f7a6:	f7fb fadd 	bl	800ad64 <CQS_Draw>
}
 800f7aa:	e7e3      	b.n	800f774 <GUI_ColorRend_Screen+0xa4>
 800f7ac:	20000237 	.word	0x20000237
 800f7b0:	2008acd8 	.word	0x2008acd8
 800f7b4:	20004ca9 	.word	0x20004ca9
 800f7b8:	20000238 	.word	0x20000238
 800f7bc:	20000232 	.word	0x20000232
 800f7c0:	20004ca1 	.word	0x20004ca1
 800f7c4:	20004ca0 	.word	0x20004ca0
 800f7c8:	2008abe0 	.word	0x2008abe0
 800f7cc:	2008acd5 	.word	0x2008acd5
 800f7d0:	20003bd0 	.word	0x20003bd0
 800f7d4:	20003bf0 	.word	0x20003bf0
 800f7d8:	20003be0 	.word	0x20003be0
 800f7dc:	20003c00 	.word	0x20003c00
 800f7e0:	20004c9d 	.word	0x20004c9d
 800f7e4:	20004c9e 	.word	0x20004c9e
 800f7e8:	2008a910 	.word	0x2008a910
 800f7ec:	20002bac 	.word	0x20002bac
 800f7f0:	20002bad 	.word	0x20002bad
 800f7f4:	20002bab 	.word	0x20002bab
 800f7f8:	20002b9c 	.word	0x20002b9c

0800f7fc <GUI_Display_Refresh>:
{

}

void GUI_Display_Refresh()
{
 800f7fc:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 800f7fe:	4b2d      	ldr	r3, [pc, #180]	; (800f8b4 <GUI_Display_Refresh+0xb8>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	3b01      	subs	r3, #1
 800f804:	2b11      	cmp	r3, #17
 800f806:	d80f      	bhi.n	800f828 <GUI_Display_Refresh+0x2c>
 800f808:	e8df f003 	tbb	[pc, r3]
 800f80c:	17130f09 	.word	0x17130f09
 800f810:	27231f1b 	.word	0x27231f1b
 800f814:	37332f2b 	.word	0x37332f2b
 800f818:	47433f3b 	.word	0x47433f3b
 800f81c:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 800f81e:	f7fe fe8b 	bl	800e538 <GUI_Measure_Screen>
 800f822:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 800f824:	4b24      	ldr	r3, [pc, #144]	; (800f8b8 <GUI_Display_Refresh+0xbc>)
 800f826:	701a      	strb	r2, [r3, #0]
 800f828:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 800f82a:	f7fe fea9 	bl	800e580 <GUI_Measure2_Screen>
 800f82e:	2202      	movs	r2, #2
 800f830:	e7f8      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 800f832:	f7fe fed5 	bl	800e5e0 <GUI_Measure3_Screen>
 800f836:	2203      	movs	r2, #3
 800f838:	e7f4      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 800f83a:	f7ff fb41 	bl	800eec0 <GUI_Graph_Screen>
 800f83e:	2204      	movs	r2, #4
 800f840:	e7f0      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 800f842:	f7ff fc6d 	bl	800f120 <GUI_Color_Screen>
 800f846:	2205      	movs	r2, #5
 800f848:	e7ec      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 800f84a:	f7ff ff41 	bl	800f6d0 <GUI_ColorRend_Screen>
 800f84e:	2206      	movs	r2, #6
 800f850:	e7e8      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 800f852:	f7fe ff33 	bl	800e6bc <GUI_DataSet1_Screen>
 800f856:	2207      	movs	r2, #7
 800f858:	e7e4      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 800f85a:	f7fe ff97 	bl	800e78c <GUI_DataSet2_Screen>
 800f85e:	2208      	movs	r2, #8
 800f860:	e7e0      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 800f862:	f7ff f863 	bl	800e92c <GUI_DataSet3_Screen>
 800f866:	2209      	movs	r2, #9
 800f868:	e7dc      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 800f86a:	f7ff f8d3 	bl	800ea14 <GUI_DataSet4_Screen>
 800f86e:	220a      	movs	r2, #10
 800f870:	e7d8      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 800f872:	f7ff f971 	bl	800eb58 <GUI_DataSet5_Screen>
 800f876:	220b      	movs	r2, #11
 800f878:	e7d4      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 800f87a:	f7ff f9bb 	bl	800ebf4 <GUI_GraphSet1_Screen>
 800f87e:	220c      	movs	r2, #12
 800f880:	e7d0      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 800f882:	f7ff f9ff 	bl	800ec84 <GUI_GraphSet2_Screen>
 800f886:	220d      	movs	r2, #13
 800f888:	e7cc      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 800f88a:	f7ff fa35 	bl	800ecf8 <GUI_ColorSet1_Screen>
 800f88e:	220e      	movs	r2, #14
 800f890:	e7c8      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 800f892:	f7ff fa75 	bl	800ed80 <GUI_ColorSet2_Screen>
 800f896:	220f      	movs	r2, #15
 800f898:	e7c4      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 800f89a:	f7ff faad 	bl	800edf8 <GUI_ColorRendSet_Screen>
 800f89e:	2210      	movs	r2, #16
 800f8a0:	e7c0      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 800f8a2:	f7fe fd25 	bl	800e2f0 <GUI_Information_Screen>
 800f8a6:	2211      	movs	r2, #17
 800f8a8:	e7bc      	b.n	800f824 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 800f8aa:	f7fe fd71 	bl	800e390 <GUI_SD_Write_Screen>
 800f8ae:	2212      	movs	r2, #18
 800f8b0:	e7b8      	b.n	800f824 <GUI_Display_Refresh+0x28>
 800f8b2:	bf00      	nop
 800f8b4:	20004ca1 	.word	0x20004ca1
 800f8b8:	20000232 	.word	0x20000232
 800f8bc:	00000000 	.word	0x00000000

0800f8c0 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 800f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c4:	b087      	sub	sp, #28
	uint16_t Touch_x = 0, Touch_y = 0;
 800f8c6:	aa06      	add	r2, sp, #24
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 800f8ce:	a905      	add	r1, sp, #20
 800f8d0:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 800f8d2:	f8ad 3014 	strh.w	r3, [sp, #20]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 800f8d6:	f00b fcb9 	bl	801b24c <TS_Get_XY1>
	switch(GUI_screen_state){
 800f8da:	4a87      	ldr	r2, [pc, #540]	; (800faf8 <GUI_Touch_Processing+0x238>)
 800f8dc:	7813      	ldrb	r3, [r2, #0]
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	4693      	mov	fp, r2
 800f8e2:	2b11      	cmp	r3, #17
 800f8e4:	f203 85f0 	bhi.w	80134c8 <GUI_Touch_Processing+0x3c08>
 800f8e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f8ec:	01140012 	.word	0x01140012
 800f8f0:	02cb01dc 	.word	0x02cb01dc
 800f8f4:	04700395 	.word	0x04700395
 800f8f8:	0872060f 	.word	0x0872060f
 800f8fc:	0d1b0af3 	.word	0x0d1b0af3
 800f900:	12ac1126 	.word	0x12ac1126
 800f904:	1667150a 	.word	0x1667150a
 800f908:	1a8818b8 	.word	0x1a8818b8
 800f90c:	00781d69 	.word	0x00781d69
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 800f910:	4b7a      	ldr	r3, [pc, #488]	; (800fafc <GUI_Touch_Processing+0x23c>)
		
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800f912:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 800f916:	2401      	movs	r4, #1
 800f918:	701c      	strb	r4, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800f91a:	f7f0 fe13 	bl	8000544 <__aeabi_i2d>
 800f91e:	4606      	mov	r6, r0
 800f920:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800f924:	460f      	mov	r7, r1
 800f926:	f7f0 fe0d 	bl	8000544 <__aeabi_i2d>
 800f92a:	a365      	add	r3, pc, #404	; (adr r3, 800fac0 <GUI_Touch_Processing+0x200>)
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	4680      	mov	r8, r0
 800f932:	4689      	mov	r9, r1
 800f934:	f7f1 f8f2 	bl	8000b1c <__aeabi_dcmpge>
 800f938:	b900      	cbnz	r0, 800f93c <GUI_Touch_Processing+0x7c>
 800f93a:	4604      	mov	r4, r0
 800f93c:	2200      	movs	r2, #0
 800f93e:	4b70      	ldr	r3, [pc, #448]	; (800fb00 <GUI_Touch_Processing+0x240>)
 800f940:	4640      	mov	r0, r8
 800f942:	4649      	mov	r1, r9
 800f944:	b2e4      	uxtb	r4, r4
 800f946:	f04f 0501 	mov.w	r5, #1
 800f94a:	f7f1 f8dd 	bl	8000b08 <__aeabi_dcmple>
 800f94e:	b900      	cbnz	r0, 800f952 <GUI_Touch_Processing+0x92>
 800f950:	4605      	mov	r5, r0
 800f952:	a35d      	add	r3, pc, #372	; (adr r3, 800fac8 <GUI_Touch_Processing+0x208>)
 800f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f958:	4630      	mov	r0, r6
 800f95a:	4639      	mov	r1, r7
 800f95c:	b2ed      	uxtb	r5, r5
 800f95e:	f04f 0801 	mov.w	r8, #1
 800f962:	f7f1 f8db 	bl	8000b1c <__aeabi_dcmpge>
 800f966:	b900      	cbnz	r0, 800f96a <GUI_Touch_Processing+0xaa>
 800f968:	4680      	mov	r8, r0
 800f96a:	a359      	add	r3, pc, #356	; (adr r3, 800fad0 <GUI_Touch_Processing+0x210>)
 800f96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f04f 0901 	mov.w	r9, #1
 800f978:	f7f1 f8c6 	bl	8000b08 <__aeabi_dcmple>
 800f97c:	b900      	cbnz	r0, 800f980 <GUI_Touch_Processing+0xc0>
 800f97e:	4681      	mov	r9, r0
 800f980:	ea08 0309 	and.w	r3, r8, r9
 800f984:	421c      	tst	r4, r3
 800f986:	d003      	beq.n	800f990 <GUI_Touch_Processing+0xd0>
 800f988:	b115      	cbz	r5, 800f990 <GUI_Touch_Processing+0xd0>
				{	
					GUI_screen_state = DataSet1_Screen;
 800f98a:	2307      	movs	r3, #7
 800f98c:	f88b 3000 	strb.w	r3, [fp]
				} 
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 800f990:	a351      	add	r3, pc, #324	; (adr r3, 800fad8 <GUI_Touch_Processing+0x218>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	4630      	mov	r0, r6
 800f998:	4639      	mov	r1, r7
 800f99a:	402c      	ands	r4, r5
 800f99c:	f04f 0501 	mov.w	r5, #1
 800f9a0:	f7f1 f8bc 	bl	8000b1c <__aeabi_dcmpge>
 800f9a4:	b900      	cbnz	r0, 800f9a8 <GUI_Touch_Processing+0xe8>
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	a34d      	add	r3, pc, #308	; (adr r3, 800fae0 <GUI_Touch_Processing+0x220>)
 800f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	f04f 0801 	mov.w	r8, #1
 800f9b6:	f7f1 f8a7 	bl	8000b08 <__aeabi_dcmple>
 800f9ba:	b900      	cbnz	r0, 800f9be <GUI_Touch_Processing+0xfe>
 800f9bc:	4680      	mov	r8, r0
 800f9be:	ea05 0508 	and.w	r5, r5, r8
 800f9c2:	07ea      	lsls	r2, r5, #31
 800f9c4:	d50d      	bpl.n	800f9e2 <GUI_Touch_Processing+0x122>
 800f9c6:	b164      	cbz	r4, 800f9e2 <GUI_Touch_Processing+0x122>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 800f9c8:	4b4e      	ldr	r3, [pc, #312]	; (800fb04 <GUI_Touch_Processing+0x244>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	bf0c      	ite	eq
 800f9d0:	2001      	moveq	r0, #1
 800f9d2:	2002      	movne	r0, #2
 800f9d4:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 800f9d8:	f009 fd50 	bl	801947c <WriteFLASH_Screen>

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
}
 800f9dc:	b007      	add	sp, #28
 800f9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 800f9e2:	a33f      	add	r3, pc, #252	; (adr r3, 800fae0 <GUI_Touch_Processing+0x220>)
 800f9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	f04f 0501 	mov.w	r5, #1
 800f9f0:	f7f1 f894 	bl	8000b1c <__aeabi_dcmpge>
 800f9f4:	b900      	cbnz	r0, 800f9f8 <GUI_Touch_Processing+0x138>
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	a33b      	add	r3, pc, #236	; (adr r3, 800fae8 <GUI_Touch_Processing+0x228>)
 800f9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fe:	4630      	mov	r0, r6
 800fa00:	4639      	mov	r1, r7
 800fa02:	f04f 0801 	mov.w	r8, #1
 800fa06:	f7f1 f87f 	bl	8000b08 <__aeabi_dcmple>
 800fa0a:	b900      	cbnz	r0, 800fa0e <GUI_Touch_Processing+0x14e>
 800fa0c:	4680      	mov	r8, r0
 800fa0e:	ea05 0508 	and.w	r5, r5, r8
 800fa12:	07eb      	lsls	r3, r5, #31
 800fa14:	d507      	bpl.n	800fa26 <GUI_Touch_Processing+0x166>
 800fa16:	b134      	cbz	r4, 800fa26 <GUI_Touch_Processing+0x166>
					WriteFLASH_Screen(Graph_Screen);
 800fa18:	2004      	movs	r0, #4
 800fa1a:	f009 fd2f 	bl	801947c <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 800fa1e:	2304      	movs	r3, #4
 800fa20:	f88b 3000 	strb.w	r3, [fp]
 800fa24:	e7da      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 800fa26:	a32a      	add	r3, pc, #168	; (adr r3, 800fad0 <GUI_Touch_Processing+0x210>)
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	4639      	mov	r1, r7
 800fa30:	f04f 0501 	mov.w	r5, #1
 800fa34:	f7f1 f872 	bl	8000b1c <__aeabi_dcmpge>
 800fa38:	b900      	cbnz	r0, 800fa3c <GUI_Touch_Processing+0x17c>
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	a32c      	add	r3, pc, #176	; (adr r3, 800faf0 <GUI_Touch_Processing+0x230>)
 800fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa42:	4630      	mov	r0, r6
 800fa44:	4639      	mov	r1, r7
 800fa46:	f04f 0801 	mov.w	r8, #1
 800fa4a:	f7f1 f85d 	bl	8000b08 <__aeabi_dcmple>
 800fa4e:	b900      	cbnz	r0, 800fa52 <GUI_Touch_Processing+0x192>
 800fa50:	4680      	mov	r8, r0
 800fa52:	ea05 0508 	and.w	r5, r5, r8
 800fa56:	07ed      	lsls	r5, r5, #31
 800fa58:	d508      	bpl.n	800fa6c <GUI_Touch_Processing+0x1ac>
 800fa5a:	b13c      	cbz	r4, 800fa6c <GUI_Touch_Processing+0x1ac>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 800fa5c:	4b2a      	ldr	r3, [pc, #168]	; (800fb08 <GUI_Touch_Processing+0x248>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d1bb      	bne.n	800f9dc <GUI_Touch_Processing+0x11c>
 800fa64:	4b24      	ldr	r3, [pc, #144]	; (800faf8 <GUI_Touch_Processing+0x238>)
 800fa66:	2212      	movs	r2, #18
 800fa68:	701a      	strb	r2, [r3, #0]
 800fa6a:	e7b7      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 800fa6c:	a320      	add	r3, pc, #128	; (adr r3, 800faf0 <GUI_Touch_Processing+0x230>)
 800fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa72:	4630      	mov	r0, r6
 800fa74:	4639      	mov	r1, r7
 800fa76:	f04f 0501 	mov.w	r5, #1
 800fa7a:	f7f1 f84f 	bl	8000b1c <__aeabi_dcmpge>
 800fa7e:	b900      	cbnz	r0, 800fa82 <GUI_Touch_Processing+0x1c2>
 800fa80:	4605      	mov	r5, r0
 800fa82:	a315      	add	r3, pc, #84	; (adr r3, 800fad8 <GUI_Touch_Processing+0x218>)
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	4630      	mov	r0, r6
 800fa8a:	4639      	mov	r1, r7
 800fa8c:	f04f 0801 	mov.w	r8, #1
 800fa90:	f7f1 f83a 	bl	8000b08 <__aeabi_dcmple>
 800fa94:	b900      	cbnz	r0, 800fa98 <GUI_Touch_Processing+0x1d8>
 800fa96:	4680      	mov	r8, r0
 800fa98:	ea05 0508 	and.w	r5, r5, r8
 800fa9c:	07e8      	lsls	r0, r5, #31
 800fa9e:	d59d      	bpl.n	800f9dc <GUI_Touch_Processing+0x11c>
 800faa0:	2c00      	cmp	r4, #0
 800faa2:	d09b      	beq.n	800f9dc <GUI_Touch_Processing+0x11c>
						pause = !pause;
 800faa4:	4a19      	ldr	r2, [pc, #100]	; (800fb0c <GUI_Touch_Processing+0x24c>)
						GUI_Bar_Measure(85, 13, 0.0);
 800faa6:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800fb10 <GUI_Touch_Processing+0x250>
						pause = !pause;
 800faaa:	7813      	ldrb	r3, [r2, #0]
 800faac:	fab3 f383 	clz	r3, r3
 800fab0:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 800fab2:	210d      	movs	r1, #13
 800fab4:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 800fab6:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 800fab8:	f004 fcd0 	bl	801445c <GUI_Bar_Measure>
 800fabc:	e78e      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
 800fabe:	bf00      	nop
 800fac0:	99999999 	.word	0x99999999
 800fac4:	4091a399 	.word	0x4091a399
 800fac8:	33333333 	.word	0x33333333
 800facc:	40053333 	.word	0x40053333
 800fad0:	00000000 	.word	0x00000000
 800fad4:	40623800 	.word	0x40623800
 800fad8:	33333333 	.word	0x33333333
 800fadc:	407aff33 	.word	0x407aff33
 800fae0:	66666666 	.word	0x66666666
 800fae4:	4081f866 	.word	0x4081f866
 800fae8:	33333333 	.word	0x33333333
 800faec:	40867133 	.word	0x40867133
 800faf0:	99999999 	.word	0x99999999
 800faf4:	40720d99 	.word	0x40720d99
 800faf8:	20004ca1 	.word	0x20004ca1
 800fafc:	20000232 	.word	0x20000232
 800fb00:	4093e000 	.word	0x4093e000
 800fb04:	20004cc9 	.word	0x20004cc9
 800fb08:	20090110 	.word	0x20090110
 800fb0c:	20004cc6 	.word	0x20004cc6
 800fb10:	00000000 	.word	0x00000000
			preGUI_screen_state = GUI_screen_state;
 800fb14:	4ba4      	ldr	r3, [pc, #656]	; (800fda8 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800fb16:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 800fb1a:	2202      	movs	r2, #2
 800fb1c:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800fb1e:	f7f0 fd11 	bl	8000544 <__aeabi_i2d>
 800fb22:	4606      	mov	r6, r0
 800fb24:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800fb28:	460f      	mov	r7, r1
 800fb2a:	f7f0 fd0b 	bl	8000544 <__aeabi_i2d>
 800fb2e:	a390      	add	r3, pc, #576	; (adr r3, 800fd70 <GUI_Touch_Processing+0x4b0>)
 800fb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb34:	4680      	mov	r8, r0
 800fb36:	4689      	mov	r9, r1
 800fb38:	f04f 0501 	mov.w	r5, #1
 800fb3c:	f7f0 ffee 	bl	8000b1c <__aeabi_dcmpge>
 800fb40:	b900      	cbnz	r0, 800fb44 <GUI_Touch_Processing+0x284>
 800fb42:	4605      	mov	r5, r0
 800fb44:	2200      	movs	r2, #0
 800fb46:	4b99      	ldr	r3, [pc, #612]	; (800fdac <GUI_Touch_Processing+0x4ec>)
 800fb48:	4640      	mov	r0, r8
 800fb4a:	4649      	mov	r1, r9
 800fb4c:	b2ed      	uxtb	r5, r5
 800fb4e:	f04f 0401 	mov.w	r4, #1
 800fb52:	f7f0 ffd9 	bl	8000b08 <__aeabi_dcmple>
 800fb56:	b900      	cbnz	r0, 800fb5a <GUI_Touch_Processing+0x29a>
 800fb58:	4604      	mov	r4, r0
 800fb5a:	a387      	add	r3, pc, #540	; (adr r3, 800fd78 <GUI_Touch_Processing+0x4b8>)
 800fb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb60:	4630      	mov	r0, r6
 800fb62:	4639      	mov	r1, r7
 800fb64:	b2e4      	uxtb	r4, r4
 800fb66:	f04f 0801 	mov.w	r8, #1
 800fb6a:	f7f0 ffd7 	bl	8000b1c <__aeabi_dcmpge>
 800fb6e:	b900      	cbnz	r0, 800fb72 <GUI_Touch_Processing+0x2b2>
 800fb70:	4680      	mov	r8, r0
 800fb72:	a383      	add	r3, pc, #524	; (adr r3, 800fd80 <GUI_Touch_Processing+0x4c0>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	4630      	mov	r0, r6
 800fb7a:	4639      	mov	r1, r7
 800fb7c:	f04f 0901 	mov.w	r9, #1
 800fb80:	f7f0 ffc2 	bl	8000b08 <__aeabi_dcmple>
 800fb84:	b900      	cbnz	r0, 800fb88 <GUI_Touch_Processing+0x2c8>
 800fb86:	4681      	mov	r9, r0
 800fb88:	ea08 0309 	and.w	r3, r8, r9
 800fb8c:	421d      	tst	r5, r3
 800fb8e:	d003      	beq.n	800fb98 <GUI_Touch_Processing+0x2d8>
 800fb90:	b114      	cbz	r4, 800fb98 <GUI_Touch_Processing+0x2d8>
					GUI_screen_state = DataSet1_Screen;
 800fb92:	2307      	movs	r3, #7
 800fb94:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800fb98:	a37b      	add	r3, pc, #492	; (adr r3, 800fd88 <GUI_Touch_Processing+0x4c8>)
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	4630      	mov	r0, r6
 800fba0:	4639      	mov	r1, r7
 800fba2:	402c      	ands	r4, r5
 800fba4:	f04f 0501 	mov.w	r5, #1
 800fba8:	f7f0 ffb8 	bl	8000b1c <__aeabi_dcmpge>
 800fbac:	b900      	cbnz	r0, 800fbb0 <GUI_Touch_Processing+0x2f0>
 800fbae:	4605      	mov	r5, r0
 800fbb0:	a377      	add	r3, pc, #476	; (adr r3, 800fd90 <GUI_Touch_Processing+0x4d0>)
 800fbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	4639      	mov	r1, r7
 800fbba:	f04f 0801 	mov.w	r8, #1
 800fbbe:	f7f0 ffa3 	bl	8000b08 <__aeabi_dcmple>
 800fbc2:	b900      	cbnz	r0, 800fbc6 <GUI_Touch_Processing+0x306>
 800fbc4:	4680      	mov	r8, r0
 800fbc6:	ea05 0508 	and.w	r5, r5, r8
 800fbca:	07e9      	lsls	r1, r5, #31
 800fbcc:	d50b      	bpl.n	800fbe6 <GUI_Touch_Processing+0x326>
 800fbce:	b154      	cbz	r4, 800fbe6 <GUI_Touch_Processing+0x326>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 800fbd0:	4b77      	ldr	r3, [pc, #476]	; (800fdb0 <GUI_Touch_Processing+0x4f0>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	bf34      	ite	cc
 800fbd8:	2001      	movcc	r0, #1
 800fbda:	2003      	movcs	r0, #3
 800fbdc:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 800fbe0:	f009 fc4c 	bl	801947c <WriteFLASH_Screen>
 800fbe4:	e6fa      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 800fbe6:	a36a      	add	r3, pc, #424	; (adr r3, 800fd90 <GUI_Touch_Processing+0x4d0>)
 800fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbec:	4630      	mov	r0, r6
 800fbee:	4639      	mov	r1, r7
 800fbf0:	f04f 0501 	mov.w	r5, #1
 800fbf4:	f7f0 ff92 	bl	8000b1c <__aeabi_dcmpge>
 800fbf8:	b900      	cbnz	r0, 800fbfc <GUI_Touch_Processing+0x33c>
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	a366      	add	r3, pc, #408	; (adr r3, 800fd98 <GUI_Touch_Processing+0x4d8>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	4630      	mov	r0, r6
 800fc04:	4639      	mov	r1, r7
 800fc06:	f04f 0801 	mov.w	r8, #1
 800fc0a:	f7f0 ff7d 	bl	8000b08 <__aeabi_dcmple>
 800fc0e:	b900      	cbnz	r0, 800fc12 <GUI_Touch_Processing+0x352>
 800fc10:	4680      	mov	r8, r0
 800fc12:	ea05 0508 	and.w	r5, r5, r8
 800fc16:	07ea      	lsls	r2, r5, #31
 800fc18:	d502      	bpl.n	800fc20 <GUI_Touch_Processing+0x360>
 800fc1a:	2c00      	cmp	r4, #0
 800fc1c:	f47f aefc 	bne.w	800fa18 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 800fc20:	a357      	add	r3, pc, #348	; (adr r3, 800fd80 <GUI_Touch_Processing+0x4c0>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	4630      	mov	r0, r6
 800fc28:	4639      	mov	r1, r7
 800fc2a:	f04f 0501 	mov.w	r5, #1
 800fc2e:	f7f0 ff75 	bl	8000b1c <__aeabi_dcmpge>
 800fc32:	b900      	cbnz	r0, 800fc36 <GUI_Touch_Processing+0x376>
 800fc34:	4605      	mov	r5, r0
 800fc36:	a35a      	add	r3, pc, #360	; (adr r3, 800fda0 <GUI_Touch_Processing+0x4e0>)
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	4639      	mov	r1, r7
 800fc40:	f04f 0801 	mov.w	r8, #1
 800fc44:	f7f0 ff60 	bl	8000b08 <__aeabi_dcmple>
 800fc48:	b900      	cbnz	r0, 800fc4c <GUI_Touch_Processing+0x38c>
 800fc4a:	4680      	mov	r8, r0
 800fc4c:	ea05 0508 	and.w	r5, r5, r8
 800fc50:	07eb      	lsls	r3, r5, #31
 800fc52:	d502      	bpl.n	800fc5a <GUI_Touch_Processing+0x39a>
 800fc54:	2c00      	cmp	r4, #0
 800fc56:	f47f af01 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 800fc5a:	a351      	add	r3, pc, #324	; (adr r3, 800fda0 <GUI_Touch_Processing+0x4e0>)
 800fc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc60:	4630      	mov	r0, r6
 800fc62:	4639      	mov	r1, r7
 800fc64:	f04f 0501 	mov.w	r5, #1
 800fc68:	f7f0 ff58 	bl	8000b1c <__aeabi_dcmpge>
 800fc6c:	b900      	cbnz	r0, 800fc70 <GUI_Touch_Processing+0x3b0>
 800fc6e:	4605      	mov	r5, r0
 800fc70:	a345      	add	r3, pc, #276	; (adr r3, 800fd88 <GUI_Touch_Processing+0x4c8>)
 800fc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc76:	4630      	mov	r0, r6
 800fc78:	4639      	mov	r1, r7
 800fc7a:	f04f 0801 	mov.w	r8, #1
 800fc7e:	f7f0 ff43 	bl	8000b08 <__aeabi_dcmple>
 800fc82:	b900      	cbnz	r0, 800fc86 <GUI_Touch_Processing+0x3c6>
 800fc84:	4680      	mov	r8, r0
 800fc86:	ea05 0508 	and.w	r5, r5, r8
 800fc8a:	07ee      	lsls	r6, r5, #31
 800fc8c:	f57f aea6 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 800fc90:	2c00      	cmp	r4, #0
 800fc92:	f43f aea3 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
						pause = !pause;
 800fc96:	4a47      	ldr	r2, [pc, #284]	; (800fdb4 <GUI_Touch_Processing+0x4f4>)
 800fc98:	7813      	ldrb	r3, [r2, #0]
 800fc9a:	fab3 f383 	clz	r3, r3
 800fc9e:	095b      	lsrs	r3, r3, #5
 800fca0:	7013      	strb	r3, [r2, #0]
 800fca2:	e69b      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 800fca4:	4b40      	ldr	r3, [pc, #256]	; (800fda8 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800fca6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 800fcaa:	2203      	movs	r2, #3
 800fcac:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800fcae:	f7f0 fc49 	bl	8000544 <__aeabi_i2d>
 800fcb2:	4606      	mov	r6, r0
 800fcb4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800fcb8:	460f      	mov	r7, r1
 800fcba:	f7f0 fc43 	bl	8000544 <__aeabi_i2d>
 800fcbe:	a32c      	add	r3, pc, #176	; (adr r3, 800fd70 <GUI_Touch_Processing+0x4b0>)
 800fcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc4:	4680      	mov	r8, r0
 800fcc6:	4689      	mov	r9, r1
 800fcc8:	f04f 0501 	mov.w	r5, #1
 800fccc:	f7f0 ff26 	bl	8000b1c <__aeabi_dcmpge>
 800fcd0:	b900      	cbnz	r0, 800fcd4 <GUI_Touch_Processing+0x414>
 800fcd2:	4605      	mov	r5, r0
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	4b35      	ldr	r3, [pc, #212]	; (800fdac <GUI_Touch_Processing+0x4ec>)
 800fcd8:	4640      	mov	r0, r8
 800fcda:	4649      	mov	r1, r9
 800fcdc:	b2ed      	uxtb	r5, r5
 800fcde:	f04f 0401 	mov.w	r4, #1
 800fce2:	f7f0 ff11 	bl	8000b08 <__aeabi_dcmple>
 800fce6:	b900      	cbnz	r0, 800fcea <GUI_Touch_Processing+0x42a>
 800fce8:	4604      	mov	r4, r0
 800fcea:	a323      	add	r3, pc, #140	; (adr r3, 800fd78 <GUI_Touch_Processing+0x4b8>)
 800fcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	b2e4      	uxtb	r4, r4
 800fcf6:	f04f 0801 	mov.w	r8, #1
 800fcfa:	f7f0 ff0f 	bl	8000b1c <__aeabi_dcmpge>
 800fcfe:	b900      	cbnz	r0, 800fd02 <GUI_Touch_Processing+0x442>
 800fd00:	4680      	mov	r8, r0
 800fd02:	a31f      	add	r3, pc, #124	; (adr r3, 800fd80 <GUI_Touch_Processing+0x4c0>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	4630      	mov	r0, r6
 800fd0a:	4639      	mov	r1, r7
 800fd0c:	f04f 0901 	mov.w	r9, #1
 800fd10:	f7f0 fefa 	bl	8000b08 <__aeabi_dcmple>
 800fd14:	b900      	cbnz	r0, 800fd18 <GUI_Touch_Processing+0x458>
 800fd16:	4681      	mov	r9, r0
 800fd18:	ea08 0309 	and.w	r3, r8, r9
 800fd1c:	421d      	tst	r5, r3
 800fd1e:	d003      	beq.n	800fd28 <GUI_Touch_Processing+0x468>
 800fd20:	b114      	cbz	r4, 800fd28 <GUI_Touch_Processing+0x468>
					GUI_screen_state = DataSet1_Screen;
 800fd22:	2307      	movs	r3, #7
 800fd24:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 800fd28:	a317      	add	r3, pc, #92	; (adr r3, 800fd88 <GUI_Touch_Processing+0x4c8>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	4630      	mov	r0, r6
 800fd30:	4639      	mov	r1, r7
 800fd32:	402c      	ands	r4, r5
 800fd34:	f04f 0501 	mov.w	r5, #1
 800fd38:	f7f0 fef0 	bl	8000b1c <__aeabi_dcmpge>
 800fd3c:	b900      	cbnz	r0, 800fd40 <GUI_Touch_Processing+0x480>
 800fd3e:	4605      	mov	r5, r0
 800fd40:	a313      	add	r3, pc, #76	; (adr r3, 800fd90 <GUI_Touch_Processing+0x4d0>)
 800fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd46:	4630      	mov	r0, r6
 800fd48:	4639      	mov	r1, r7
 800fd4a:	f04f 0801 	mov.w	r8, #1
 800fd4e:	f7f0 fedb 	bl	8000b08 <__aeabi_dcmple>
 800fd52:	b900      	cbnz	r0, 800fd56 <GUI_Touch_Processing+0x496>
 800fd54:	4680      	mov	r8, r0
 800fd56:	ea05 0508 	and.w	r5, r5, r8
 800fd5a:	07ed      	lsls	r5, r5, #31
 800fd5c:	d52c      	bpl.n	800fdb8 <GUI_Touch_Processing+0x4f8>
 800fd5e:	b35c      	cbz	r4, 800fdb8 <GUI_Touch_Processing+0x4f8>
					GUI_screen_state = Measure_Screen;
 800fd60:	2001      	movs	r0, #1
 800fd62:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 800fd66:	f009 fb89 	bl	801947c <WriteFLASH_Screen>
 800fd6a:	e637      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
 800fd6c:	f3af 8000 	nop.w
 800fd70:	99999999 	.word	0x99999999
 800fd74:	4091a399 	.word	0x4091a399
 800fd78:	33333333 	.word	0x33333333
 800fd7c:	40053333 	.word	0x40053333
 800fd80:	00000000 	.word	0x00000000
 800fd84:	40623800 	.word	0x40623800
 800fd88:	33333333 	.word	0x33333333
 800fd8c:	407aff33 	.word	0x407aff33
 800fd90:	66666666 	.word	0x66666666
 800fd94:	4081f866 	.word	0x4081f866
 800fd98:	33333333 	.word	0x33333333
 800fd9c:	40867133 	.word	0x40867133
 800fda0:	99999999 	.word	0x99999999
 800fda4:	40720d99 	.word	0x40720d99
 800fda8:	20000232 	.word	0x20000232
 800fdac:	4093e000 	.word	0x4093e000
 800fdb0:	20004cc9 	.word	0x20004cc9
 800fdb4:	20004cc6 	.word	0x20004cc6
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 800fdb8:	a3d5      	add	r3, pc, #852	; (adr r3, 8010110 <GUI_Touch_Processing+0x850>)
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	4639      	mov	r1, r7
 800fdc2:	f04f 0501 	mov.w	r5, #1
 800fdc6:	f7f0 fea9 	bl	8000b1c <__aeabi_dcmpge>
 800fdca:	b900      	cbnz	r0, 800fdce <GUI_Touch_Processing+0x50e>
 800fdcc:	4605      	mov	r5, r0
 800fdce:	a3d2      	add	r3, pc, #840	; (adr r3, 8010118 <GUI_Touch_Processing+0x858>)
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	4630      	mov	r0, r6
 800fdd6:	4639      	mov	r1, r7
 800fdd8:	f04f 0801 	mov.w	r8, #1
 800fddc:	f7f0 fe94 	bl	8000b08 <__aeabi_dcmple>
 800fde0:	b900      	cbnz	r0, 800fde4 <GUI_Touch_Processing+0x524>
 800fde2:	4680      	mov	r8, r0
 800fde4:	ea05 0508 	and.w	r5, r5, r8
 800fde8:	07e8      	lsls	r0, r5, #31
 800fdea:	d502      	bpl.n	800fdf2 <GUI_Touch_Processing+0x532>
 800fdec:	2c00      	cmp	r4, #0
 800fdee:	f47f ae13 	bne.w	800fa18 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 800fdf2:	a3c3      	add	r3, pc, #780	; (adr r3, 8010100 <GUI_Touch_Processing+0x840>)
 800fdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	4639      	mov	r1, r7
 800fdfc:	f04f 0501 	mov.w	r5, #1
 800fe00:	f7f0 fe8c 	bl	8000b1c <__aeabi_dcmpge>
 800fe04:	b900      	cbnz	r0, 800fe08 <GUI_Touch_Processing+0x548>
 800fe06:	4605      	mov	r5, r0
 800fe08:	a3c5      	add	r3, pc, #788	; (adr r3, 8010120 <GUI_Touch_Processing+0x860>)
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	4630      	mov	r0, r6
 800fe10:	4639      	mov	r1, r7
 800fe12:	f04f 0801 	mov.w	r8, #1
 800fe16:	f7f0 fe77 	bl	8000b08 <__aeabi_dcmple>
 800fe1a:	b900      	cbnz	r0, 800fe1e <GUI_Touch_Processing+0x55e>
 800fe1c:	4680      	mov	r8, r0
 800fe1e:	ea05 0508 	and.w	r5, r5, r8
 800fe22:	07e9      	lsls	r1, r5, #31
 800fe24:	d502      	bpl.n	800fe2c <GUI_Touch_Processing+0x56c>
 800fe26:	2c00      	cmp	r4, #0
 800fe28:	f47f ae18 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 800fe2c:	a3bc      	add	r3, pc, #752	; (adr r3, 8010120 <GUI_Touch_Processing+0x860>)
 800fe2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe32:	4630      	mov	r0, r6
 800fe34:	4639      	mov	r1, r7
 800fe36:	f04f 0501 	mov.w	r5, #1
 800fe3a:	f7f0 fe6f 	bl	8000b1c <__aeabi_dcmpge>
 800fe3e:	b900      	cbnz	r0, 800fe42 <GUI_Touch_Processing+0x582>
 800fe40:	4605      	mov	r5, r0
 800fe42:	a3b1      	add	r3, pc, #708	; (adr r3, 8010108 <GUI_Touch_Processing+0x848>)
 800fe44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe48:	4630      	mov	r0, r6
 800fe4a:	4639      	mov	r1, r7
 800fe4c:	f04f 0801 	mov.w	r8, #1
 800fe50:	f7f0 fe5a 	bl	8000b08 <__aeabi_dcmple>
 800fe54:	b900      	cbnz	r0, 800fe58 <GUI_Touch_Processing+0x598>
 800fe56:	4680      	mov	r8, r0
 800fe58:	ea05 0508 	and.w	r5, r5, r8
 800fe5c:	07ea      	lsls	r2, r5, #31
 800fe5e:	f57f adbd 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 800fe62:	2c00      	cmp	r4, #0
 800fe64:	f43f adba 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
						pause = !pause;
 800fe68:	4aaf      	ldr	r2, [pc, #700]	; (8010128 <GUI_Touch_Processing+0x868>)
						GUI_Bar_Measure(85, 13, 0.0);
 800fe6a:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 801012c <GUI_Touch_Processing+0x86c>
						pause = !pause;
 800fe6e:	7813      	ldrb	r3, [r2, #0]
 800fe70:	fab3 f383 	clz	r3, r3
 800fe74:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 800fe76:	210d      	movs	r1, #13
 800fe78:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 800fe7a:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 800fe7c:	f004 faee 	bl	801445c <GUI_Bar_Measure>
 800fe80:	e5ac      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 800fe82:	4bab      	ldr	r3, [pc, #684]	; (8010130 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800fe84:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 800fe88:	2204      	movs	r2, #4
 800fe8a:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 800fe8c:	f7f0 fb5a 	bl	8000544 <__aeabi_i2d>
 800fe90:	4606      	mov	r6, r0
 800fe92:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800fe96:	460f      	mov	r7, r1
 800fe98:	f7f0 fb54 	bl	8000544 <__aeabi_i2d>
 800fe9c:	a394      	add	r3, pc, #592	; (adr r3, 80100f0 <GUI_Touch_Processing+0x830>)
 800fe9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea2:	4680      	mov	r8, r0
 800fea4:	4689      	mov	r9, r1
 800fea6:	f04f 0501 	mov.w	r5, #1
 800feaa:	f7f0 fe37 	bl	8000b1c <__aeabi_dcmpge>
 800feae:	b900      	cbnz	r0, 800feb2 <GUI_Touch_Processing+0x5f2>
 800feb0:	4605      	mov	r5, r0
 800feb2:	2200      	movs	r2, #0
 800feb4:	4b9f      	ldr	r3, [pc, #636]	; (8010134 <GUI_Touch_Processing+0x874>)
 800feb6:	4640      	mov	r0, r8
 800feb8:	4649      	mov	r1, r9
 800feba:	b2ed      	uxtb	r5, r5
 800febc:	f04f 0401 	mov.w	r4, #1
 800fec0:	f7f0 fe22 	bl	8000b08 <__aeabi_dcmple>
 800fec4:	b900      	cbnz	r0, 800fec8 <GUI_Touch_Processing+0x608>
 800fec6:	4604      	mov	r4, r0
 800fec8:	a38b      	add	r3, pc, #556	; (adr r3, 80100f8 <GUI_Touch_Processing+0x838>)
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	4630      	mov	r0, r6
 800fed0:	4639      	mov	r1, r7
 800fed2:	b2e4      	uxtb	r4, r4
 800fed4:	f04f 0801 	mov.w	r8, #1
 800fed8:	f7f0 fe20 	bl	8000b1c <__aeabi_dcmpge>
 800fedc:	b900      	cbnz	r0, 800fee0 <GUI_Touch_Processing+0x620>
 800fede:	4680      	mov	r8, r0
 800fee0:	a387      	add	r3, pc, #540	; (adr r3, 8010100 <GUI_Touch_Processing+0x840>)
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	4630      	mov	r0, r6
 800fee8:	4639      	mov	r1, r7
 800feea:	f04f 0901 	mov.w	r9, #1
 800feee:	f7f0 fe0b 	bl	8000b08 <__aeabi_dcmple>
 800fef2:	b900      	cbnz	r0, 800fef6 <GUI_Touch_Processing+0x636>
 800fef4:	4681      	mov	r9, r0
 800fef6:	ea08 0309 	and.w	r3, r8, r9
 800fefa:	421d      	tst	r5, r3
 800fefc:	d003      	beq.n	800ff06 <GUI_Touch_Processing+0x646>
 800fefe:	b114      	cbz	r4, 800ff06 <GUI_Touch_Processing+0x646>
					GUI_screen_state = GraphSet1_Screen;
 800ff00:	230c      	movs	r3, #12
 800ff02:	f88b 3000 	strb.w	r3, [fp]
			if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 800ff06:	a380      	add	r3, pc, #512	; (adr r3, 8010108 <GUI_Touch_Processing+0x848>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	4639      	mov	r1, r7
 800ff10:	402c      	ands	r4, r5
 800ff12:	f04f 0501 	mov.w	r5, #1
 800ff16:	f7f0 fe01 	bl	8000b1c <__aeabi_dcmpge>
 800ff1a:	b900      	cbnz	r0, 800ff1e <GUI_Touch_Processing+0x65e>
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	a37c      	add	r3, pc, #496	; (adr r3, 8010110 <GUI_Touch_Processing+0x850>)
 800ff20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff24:	4630      	mov	r0, r6
 800ff26:	4639      	mov	r1, r7
 800ff28:	f04f 0801 	mov.w	r8, #1
 800ff2c:	f7f0 fdec 	bl	8000b08 <__aeabi_dcmple>
 800ff30:	b900      	cbnz	r0, 800ff34 <GUI_Touch_Processing+0x674>
 800ff32:	4680      	mov	r8, r0
 800ff34:	ea05 0508 	and.w	r5, r5, r8
 800ff38:	07eb      	lsls	r3, r5, #31
 800ff3a:	d508      	bpl.n	800ff4e <GUI_Touch_Processing+0x68e>
 800ff3c:	b13c      	cbz	r4, 800ff4e <GUI_Touch_Processing+0x68e>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 800ff3e:	4a7e      	ldr	r2, [pc, #504]	; (8010138 <GUI_Touch_Processing+0x878>)
 800ff40:	7813      	ldrb	r3, [r2, #0]
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	bf94      	ite	ls
 800ff46:	3301      	addls	r3, #1
 800ff48:	2300      	movhi	r3, #0
 800ff4a:	7013      	strb	r3, [r2, #0]
 800ff4c:	e546      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 800ff4e:	a370      	add	r3, pc, #448	; (adr r3, 8010110 <GUI_Touch_Processing+0x850>)
 800ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff54:	4630      	mov	r0, r6
 800ff56:	4639      	mov	r1, r7
 800ff58:	f04f 0501 	mov.w	r5, #1
 800ff5c:	f7f0 fdde 	bl	8000b1c <__aeabi_dcmpge>
 800ff60:	b900      	cbnz	r0, 800ff64 <GUI_Touch_Processing+0x6a4>
 800ff62:	4605      	mov	r5, r0
 800ff64:	a36c      	add	r3, pc, #432	; (adr r3, 8010118 <GUI_Touch_Processing+0x858>)
 800ff66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	f04f 0801 	mov.w	r8, #1
 800ff72:	f7f0 fdc9 	bl	8000b08 <__aeabi_dcmple>
 800ff76:	b900      	cbnz	r0, 800ff7a <GUI_Touch_Processing+0x6ba>
 800ff78:	4680      	mov	r8, r0
 800ff7a:	ea05 0508 	and.w	r5, r5, r8
 800ff7e:	07ed      	lsls	r5, r5, #31
 800ff80:	d507      	bpl.n	800ff92 <GUI_Touch_Processing+0x6d2>
 800ff82:	b134      	cbz	r4, 800ff92 <GUI_Touch_Processing+0x6d2>
					WriteFLASH_Screen(Color_Screen);
 800ff84:	2005      	movs	r0, #5
 800ff86:	f009 fa79 	bl	801947c <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 800ff8a:	2305      	movs	r3, #5
 800ff8c:	f88b 3000 	strb.w	r3, [fp]
 800ff90:	e524      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 800ff92:	a35b      	add	r3, pc, #364	; (adr r3, 8010100 <GUI_Touch_Processing+0x840>)
 800ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff98:	4630      	mov	r0, r6
 800ff9a:	4639      	mov	r1, r7
 800ff9c:	f04f 0501 	mov.w	r5, #1
 800ffa0:	f7f0 fdbc 	bl	8000b1c <__aeabi_dcmpge>
 800ffa4:	b900      	cbnz	r0, 800ffa8 <GUI_Touch_Processing+0x6e8>
 800ffa6:	4605      	mov	r5, r0
 800ffa8:	a35d      	add	r3, pc, #372	; (adr r3, 8010120 <GUI_Touch_Processing+0x860>)
 800ffaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffae:	4630      	mov	r0, r6
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	f04f 0801 	mov.w	r8, #1
 800ffb6:	f7f0 fda7 	bl	8000b08 <__aeabi_dcmple>
 800ffba:	b900      	cbnz	r0, 800ffbe <GUI_Touch_Processing+0x6fe>
 800ffbc:	4680      	mov	r8, r0
 800ffbe:	ea05 0508 	and.w	r5, r5, r8
 800ffc2:	07e8      	lsls	r0, r5, #31
 800ffc4:	d502      	bpl.n	800ffcc <GUI_Touch_Processing+0x70c>
 800ffc6:	2c00      	cmp	r4, #0
 800ffc8:	f47f ad48 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 800ffcc:	a354      	add	r3, pc, #336	; (adr r3, 8010120 <GUI_Touch_Processing+0x860>)
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	4639      	mov	r1, r7
 800ffd6:	f04f 0501 	mov.w	r5, #1
 800ffda:	f7f0 fd9f 	bl	8000b1c <__aeabi_dcmpge>
 800ffde:	b900      	cbnz	r0, 800ffe2 <GUI_Touch_Processing+0x722>
 800ffe0:	4605      	mov	r5, r0
 800ffe2:	a349      	add	r3, pc, #292	; (adr r3, 8010108 <GUI_Touch_Processing+0x848>)
 800ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe8:	4630      	mov	r0, r6
 800ffea:	4639      	mov	r1, r7
 800ffec:	f04f 0801 	mov.w	r8, #1
 800fff0:	f7f0 fd8a 	bl	8000b08 <__aeabi_dcmple>
 800fff4:	b900      	cbnz	r0, 800fff8 <GUI_Touch_Processing+0x738>
 800fff6:	4680      	mov	r8, r0
 800fff8:	ea05 0508 	and.w	r5, r5, r8
 800fffc:	07e9      	lsls	r1, r5, #31
 800fffe:	f57f aced 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 8010002:	2c00      	cmp	r4, #0
 8010004:	f43f acea 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
					pause = !pause;
 8010008:	4a47      	ldr	r2, [pc, #284]	; (8010128 <GUI_Touch_Processing+0x868>)
 801000a:	7813      	ldrb	r3, [r2, #0]
 801000c:	fab3 f383 	clz	r3, r3
 8010010:	095b      	lsrs	r3, r3, #5
 8010012:	7013      	strb	r3, [r2, #0]
 8010014:	e4e2      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8010016:	4b46      	ldr	r3, [pc, #280]	; (8010130 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010018:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 801001c:	2205      	movs	r2, #5
 801001e:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010020:	f7f0 fa90 	bl	8000544 <__aeabi_i2d>
 8010024:	4604      	mov	r4, r0
 8010026:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801002a:	460d      	mov	r5, r1
 801002c:	f7f0 fa8a 	bl	8000544 <__aeabi_i2d>
 8010030:	a32f      	add	r3, pc, #188	; (adr r3, 80100f0 <GUI_Touch_Processing+0x830>)
 8010032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010036:	4680      	mov	r8, r0
 8010038:	4689      	mov	r9, r1
 801003a:	f04f 0701 	mov.w	r7, #1
 801003e:	f7f0 fd6d 	bl	8000b1c <__aeabi_dcmpge>
 8010042:	b900      	cbnz	r0, 8010046 <GUI_Touch_Processing+0x786>
 8010044:	4607      	mov	r7, r0
 8010046:	2200      	movs	r2, #0
 8010048:	4b3a      	ldr	r3, [pc, #232]	; (8010134 <GUI_Touch_Processing+0x874>)
 801004a:	4640      	mov	r0, r8
 801004c:	4649      	mov	r1, r9
 801004e:	b2ff      	uxtb	r7, r7
 8010050:	f04f 0601 	mov.w	r6, #1
 8010054:	f7f0 fd58 	bl	8000b08 <__aeabi_dcmple>
 8010058:	b900      	cbnz	r0, 801005c <GUI_Touch_Processing+0x79c>
 801005a:	4606      	mov	r6, r0
 801005c:	a326      	add	r3, pc, #152	; (adr r3, 80100f8 <GUI_Touch_Processing+0x838>)
 801005e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010062:	4620      	mov	r0, r4
 8010064:	4629      	mov	r1, r5
 8010066:	b2f6      	uxtb	r6, r6
 8010068:	f04f 0801 	mov.w	r8, #1
 801006c:	f7f0 fd56 	bl	8000b1c <__aeabi_dcmpge>
 8010070:	b900      	cbnz	r0, 8010074 <GUI_Touch_Processing+0x7b4>
 8010072:	4680      	mov	r8, r0
 8010074:	a322      	add	r3, pc, #136	; (adr r3, 8010100 <GUI_Touch_Processing+0x840>)
 8010076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007a:	4620      	mov	r0, r4
 801007c:	4629      	mov	r1, r5
 801007e:	f04f 0901 	mov.w	r9, #1
 8010082:	f7f0 fd41 	bl	8000b08 <__aeabi_dcmple>
 8010086:	b900      	cbnz	r0, 801008a <GUI_Touch_Processing+0x7ca>
 8010088:	4681      	mov	r9, r0
 801008a:	ea08 0309 	and.w	r3, r8, r9
 801008e:	421f      	tst	r7, r3
 8010090:	d008      	beq.n	80100a4 <GUI_Touch_Processing+0x7e4>
 8010092:	b13e      	cbz	r6, 80100a4 <GUI_Touch_Processing+0x7e4>
					preColor_Field = Color_Field;
 8010094:	4b29      	ldr	r3, [pc, #164]	; (801013c <GUI_Touch_Processing+0x87c>)
 8010096:	781a      	ldrb	r2, [r3, #0]
 8010098:	4b29      	ldr	r3, [pc, #164]	; (8010140 <GUI_Touch_Processing+0x880>)
 801009a:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 801009c:	230e      	movs	r3, #14
 801009e:	f88b 3000 	strb.w	r3, [fp]
 80100a2:	e49b      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 80100a4:	a31a      	add	r3, pc, #104	; (adr r3, 8010110 <GUI_Touch_Processing+0x850>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	4620      	mov	r0, r4
 80100ac:	4629      	mov	r1, r5
 80100ae:	ea07 0806 	and.w	r8, r7, r6
 80100b2:	f04f 0901 	mov.w	r9, #1
 80100b6:	f7f0 fd31 	bl	8000b1c <__aeabi_dcmpge>
 80100ba:	b900      	cbnz	r0, 80100be <GUI_Touch_Processing+0x7fe>
 80100bc:	4681      	mov	r9, r0
 80100be:	a316      	add	r3, pc, #88	; (adr r3, 8010118 <GUI_Touch_Processing+0x858>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	4620      	mov	r0, r4
 80100c6:	4629      	mov	r1, r5
 80100c8:	f04f 0a01 	mov.w	sl, #1
 80100cc:	f7f0 fd1c 	bl	8000b08 <__aeabi_dcmple>
 80100d0:	b900      	cbnz	r0, 80100d4 <GUI_Touch_Processing+0x814>
 80100d2:	4682      	mov	sl, r0
 80100d4:	ea09 030a 	and.w	r3, r9, sl
 80100d8:	07da      	lsls	r2, r3, #31
 80100da:	d533      	bpl.n	8010144 <GUI_Touch_Processing+0x884>
 80100dc:	f1b8 0f00 	cmp.w	r8, #0
 80100e0:	d030      	beq.n	8010144 <GUI_Touch_Processing+0x884>
					WriteFLASH_Screen(Color_Rendition_Screen);
 80100e2:	2006      	movs	r0, #6
 80100e4:	f009 f9ca 	bl	801947c <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 80100e8:	2306      	movs	r3, #6
 80100ea:	f88b 3000 	strb.w	r3, [fp]
 80100ee:	e475      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
 80100f0:	99999999 	.word	0x99999999
 80100f4:	4091a399 	.word	0x4091a399
 80100f8:	33333333 	.word	0x33333333
 80100fc:	40053333 	.word	0x40053333
 8010100:	00000000 	.word	0x00000000
 8010104:	40623800 	.word	0x40623800
 8010108:	33333333 	.word	0x33333333
 801010c:	407aff33 	.word	0x407aff33
 8010110:	66666666 	.word	0x66666666
 8010114:	4081f866 	.word	0x4081f866
 8010118:	33333333 	.word	0x33333333
 801011c:	40867133 	.word	0x40867133
 8010120:	99999999 	.word	0x99999999
 8010124:	40720d99 	.word	0x40720d99
 8010128:	20004cc6 	.word	0x20004cc6
 801012c:	00000000 	.word	0x00000000
 8010130:	20000232 	.word	0x20000232
 8010134:	4093e000 	.word	0x4093e000
 8010138:	20004caa 	.word	0x20004caa
 801013c:	20004c9f 	.word	0x20004c9f
 8010140:	20004cc7 	.word	0x20004cc7
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8010144:	a3b8      	add	r3, pc, #736	; (adr r3, 8010428 <GUI_Touch_Processing+0xb68>)
 8010146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014a:	4620      	mov	r0, r4
 801014c:	4629      	mov	r1, r5
 801014e:	f04f 0901 	mov.w	r9, #1
 8010152:	f7f0 fce3 	bl	8000b1c <__aeabi_dcmpge>
 8010156:	b900      	cbnz	r0, 801015a <GUI_Touch_Processing+0x89a>
 8010158:	4681      	mov	r9, r0
 801015a:	a3bd      	add	r3, pc, #756	; (adr r3, 8010450 <GUI_Touch_Processing+0xb90>)
 801015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010160:	4620      	mov	r0, r4
 8010162:	4629      	mov	r1, r5
 8010164:	f04f 0a01 	mov.w	sl, #1
 8010168:	f7f0 fcce 	bl	8000b08 <__aeabi_dcmple>
 801016c:	b900      	cbnz	r0, 8010170 <GUI_Touch_Processing+0x8b0>
 801016e:	4682      	mov	sl, r0
 8010170:	ea09 030a 	and.w	r3, r9, sl
 8010174:	07db      	lsls	r3, r3, #31
 8010176:	d509      	bpl.n	801018c <GUI_Touch_Processing+0x8cc>
 8010178:	f1b8 0f00 	cmp.w	r8, #0
 801017c:	d006      	beq.n	801018c <GUI_Touch_Processing+0x8cc>
					pause = !pause;
 801017e:	4ab6      	ldr	r2, [pc, #728]	; (8010458 <GUI_Touch_Processing+0xb98>)
 8010180:	7813      	ldrb	r3, [r2, #0]
 8010182:	fab3 f383 	clz	r3, r3
 8010186:	095b      	lsrs	r3, r3, #5
 8010188:	7013      	strb	r3, [r2, #0]
 801018a:	e427      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801018c:	a3a4      	add	r3, pc, #656	; (adr r3, 8010420 <GUI_Touch_Processing+0xb60>)
 801018e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010192:	4620      	mov	r0, r4
 8010194:	4629      	mov	r1, r5
 8010196:	f04f 0801 	mov.w	r8, #1
 801019a:	f7f0 fcbf 	bl	8000b1c <__aeabi_dcmpge>
 801019e:	b900      	cbnz	r0, 80101a2 <GUI_Touch_Processing+0x8e2>
 80101a0:	4680      	mov	r8, r0
 80101a2:	a3a1      	add	r3, pc, #644	; (adr r3, 8010428 <GUI_Touch_Processing+0xb68>)
 80101a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a8:	4620      	mov	r0, r4
 80101aa:	4629      	mov	r1, r5
 80101ac:	f04f 0901 	mov.w	r9, #1
 80101b0:	f7f0 fcaa 	bl	8000b08 <__aeabi_dcmple>
 80101b4:	b900      	cbnz	r0, 80101b8 <GUI_Touch_Processing+0x8f8>
 80101b6:	4681      	mov	r9, r0
 80101b8:	ea08 0809 	and.w	r8, r8, r9
 80101bc:	ea17 0f08 	tst.w	r7, r8
 80101c0:	f43f ac0c 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
 80101c4:	2e00      	cmp	r6, #0
 80101c6:	f47f ac49 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
 80101ca:	e407      	b.n	800f9dc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 80101cc:	4ba3      	ldr	r3, [pc, #652]	; (801045c <GUI_Touch_Processing+0xb9c>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80101ce:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80101d2:	2206      	movs	r2, #6
 80101d4:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80101d6:	f7f0 f9b5 	bl	8000544 <__aeabi_i2d>
 80101da:	4606      	mov	r6, r0
 80101dc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80101e0:	460f      	mov	r7, r1
 80101e2:	f7f0 f9af 	bl	8000544 <__aeabi_i2d>
 80101e6:	a392      	add	r3, pc, #584	; (adr r3, 8010430 <GUI_Touch_Processing+0xb70>)
 80101e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ec:	4680      	mov	r8, r0
 80101ee:	4689      	mov	r9, r1
 80101f0:	f04f 0501 	mov.w	r5, #1
 80101f4:	f7f0 fc92 	bl	8000b1c <__aeabi_dcmpge>
 80101f8:	b900      	cbnz	r0, 80101fc <GUI_Touch_Processing+0x93c>
 80101fa:	4605      	mov	r5, r0
 80101fc:	2200      	movs	r2, #0
 80101fe:	4b98      	ldr	r3, [pc, #608]	; (8010460 <GUI_Touch_Processing+0xba0>)
 8010200:	4640      	mov	r0, r8
 8010202:	4649      	mov	r1, r9
 8010204:	b2ed      	uxtb	r5, r5
 8010206:	f04f 0401 	mov.w	r4, #1
 801020a:	f7f0 fc7d 	bl	8000b08 <__aeabi_dcmple>
 801020e:	b900      	cbnz	r0, 8010212 <GUI_Touch_Processing+0x952>
 8010210:	4604      	mov	r4, r0
 8010212:	a389      	add	r3, pc, #548	; (adr r3, 8010438 <GUI_Touch_Processing+0xb78>)
 8010214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010218:	4630      	mov	r0, r6
 801021a:	4639      	mov	r1, r7
 801021c:	b2e4      	uxtb	r4, r4
 801021e:	f04f 0801 	mov.w	r8, #1
 8010222:	f7f0 fc7b 	bl	8000b1c <__aeabi_dcmpge>
 8010226:	b900      	cbnz	r0, 801022a <GUI_Touch_Processing+0x96a>
 8010228:	4680      	mov	r8, r0
 801022a:	a37d      	add	r3, pc, #500	; (adr r3, 8010420 <GUI_Touch_Processing+0xb60>)
 801022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010230:	4630      	mov	r0, r6
 8010232:	4639      	mov	r1, r7
 8010234:	f04f 0901 	mov.w	r9, #1
 8010238:	f7f0 fc66 	bl	8000b08 <__aeabi_dcmple>
 801023c:	b900      	cbnz	r0, 8010240 <GUI_Touch_Processing+0x980>
 801023e:	4681      	mov	r9, r0
 8010240:	ea08 0309 	and.w	r3, r8, r9
 8010244:	421d      	tst	r5, r3
 8010246:	d005      	beq.n	8010254 <GUI_Touch_Processing+0x994>
 8010248:	b124      	cbz	r4, 8010254 <GUI_Touch_Processing+0x994>
					GUI_screen_state = ColorRendSet_Screen;
 801024a:	2310      	movs	r3, #16
 801024c:	f88b 3000 	strb.w	r3, [fp]
 8010250:	f7ff bbc4 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8010254:	a37a      	add	r3, pc, #488	; (adr r3, 8010440 <GUI_Touch_Processing+0xb80>)
 8010256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025a:	4630      	mov	r0, r6
 801025c:	4639      	mov	r1, r7
 801025e:	402c      	ands	r4, r5
 8010260:	f04f 0501 	mov.w	r5, #1
 8010264:	f7f0 fc5a 	bl	8000b1c <__aeabi_dcmpge>
 8010268:	b900      	cbnz	r0, 801026c <GUI_Touch_Processing+0x9ac>
 801026a:	4605      	mov	r5, r0
 801026c:	a376      	add	r3, pc, #472	; (adr r3, 8010448 <GUI_Touch_Processing+0xb88>)
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	4630      	mov	r0, r6
 8010274:	4639      	mov	r1, r7
 8010276:	f04f 0801 	mov.w	r8, #1
 801027a:	f7f0 fc45 	bl	8000b08 <__aeabi_dcmple>
 801027e:	b900      	cbnz	r0, 8010282 <GUI_Touch_Processing+0x9c2>
 8010280:	4680      	mov	r8, r0
 8010282:	ea05 0508 	and.w	r5, r5, r8
 8010286:	07ed      	lsls	r5, r5, #31
 8010288:	d508      	bpl.n	801029c <GUI_Touch_Processing+0x9dc>
 801028a:	b13c      	cbz	r4, 801029c <GUI_Touch_Processing+0x9dc>
					WriteFLASH_Screen(Measure_Screen);
 801028c:	2001      	movs	r0, #1
 801028e:	f009 f8f5 	bl	801947c <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 8010292:	2301      	movs	r3, #1
 8010294:	f88b 3000 	strb.w	r3, [fp]
 8010298:	f7ff bba0 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 801029c:	a36c      	add	r3, pc, #432	; (adr r3, 8010450 <GUI_Touch_Processing+0xb90>)
 801029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a2:	4630      	mov	r0, r6
 80102a4:	4639      	mov	r1, r7
 80102a6:	f04f 0501 	mov.w	r5, #1
 80102aa:	f7f0 fc37 	bl	8000b1c <__aeabi_dcmpge>
 80102ae:	b900      	cbnz	r0, 80102b2 <GUI_Touch_Processing+0x9f2>
 80102b0:	4605      	mov	r5, r0
 80102b2:	a363      	add	r3, pc, #396	; (adr r3, 8010440 <GUI_Touch_Processing+0xb80>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f04f 0801 	mov.w	r8, #1
 80102c0:	f7f0 fc22 	bl	8000b08 <__aeabi_dcmple>
 80102c4:	b900      	cbnz	r0, 80102c8 <GUI_Touch_Processing+0xa08>
 80102c6:	4680      	mov	r8, r0
 80102c8:	ea05 0508 	and.w	r5, r5, r8
 80102cc:	07e8      	lsls	r0, r5, #31
 80102ce:	d509      	bpl.n	80102e4 <GUI_Touch_Processing+0xa24>
 80102d0:	b144      	cbz	r4, 80102e4 <GUI_Touch_Processing+0xa24>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 80102d2:	4a64      	ldr	r2, [pc, #400]	; (8010464 <GUI_Touch_Processing+0xba4>)
 80102d4:	7813      	ldrb	r3, [r2, #0]
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	bf94      	ite	ls
 80102da:	3301      	addls	r3, #1
 80102dc:	2300      	movhi	r3, #0
 80102de:	7013      	strb	r3, [r2, #0]
 80102e0:	f7ff bb7c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 80102e4:	a350      	add	r3, pc, #320	; (adr r3, 8010428 <GUI_Touch_Processing+0xb68>)
 80102e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ea:	4630      	mov	r0, r6
 80102ec:	4639      	mov	r1, r7
 80102ee:	f04f 0501 	mov.w	r5, #1
 80102f2:	f7f0 fc13 	bl	8000b1c <__aeabi_dcmpge>
 80102f6:	b900      	cbnz	r0, 80102fa <GUI_Touch_Processing+0xa3a>
 80102f8:	4605      	mov	r5, r0
 80102fa:	a355      	add	r3, pc, #340	; (adr r3, 8010450 <GUI_Touch_Processing+0xb90>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	4630      	mov	r0, r6
 8010302:	4639      	mov	r1, r7
 8010304:	f04f 0801 	mov.w	r8, #1
 8010308:	f7f0 fbfe 	bl	8000b08 <__aeabi_dcmple>
 801030c:	b900      	cbnz	r0, 8010310 <GUI_Touch_Processing+0xa50>
 801030e:	4680      	mov	r8, r0
 8010310:	ea05 0508 	and.w	r5, r5, r8
 8010314:	07e9      	lsls	r1, r5, #31
 8010316:	f140 80cf 	bpl.w	80104b8 <GUI_Touch_Processing+0xbf8>
 801031a:	2c00      	cmp	r4, #0
 801031c:	f000 80cc 	beq.w	80104b8 <GUI_Touch_Processing+0xbf8>
					if (Color_rend_Field & CRI_CQS){
 8010320:	4b51      	ldr	r3, [pc, #324]	; (8010468 <GUI_Touch_Processing+0xba8>)
 8010322:	4f52      	ldr	r7, [pc, #328]	; (801046c <GUI_Touch_Processing+0xbac>)
 8010324:	781c      	ldrb	r4, [r3, #0]
 8010326:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80104b0 <GUI_Touch_Processing+0xbf0>
 801032a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80104b4 <GUI_Touch_Processing+0xbf4>
 801032e:	4d50      	ldr	r5, [pc, #320]	; (8010470 <GUI_Touch_Processing+0xbb0>)
 8010330:	f014 0401 	ands.w	r4, r4, #1
 8010334:	d03d      	beq.n	80103b2 <GUI_Touch_Processing+0xaf2>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010336:	484f      	ldr	r0, [pc, #316]	; (8010474 <GUI_Touch_Processing+0xbb4>)
						CRICQS_done = 0x00;
 8010338:	2400      	movs	r4, #0
 801033a:	703c      	strb	r4, [r7, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 801033c:	f008 ffbe 	bl	80192bc <Rabs_find_MAX_all>
						Calculate_XYZ(Line_Rabs_buff, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 8010340:	4b4d      	ldr	r3, [pc, #308]	; (8010478 <GUI_Touch_Processing+0xbb8>)
 8010342:	4a4e      	ldr	r2, [pc, #312]	; (801047c <GUI_Touch_Processing+0xbbc>)
 8010344:	494e      	ldr	r1, [pc, #312]	; (8010480 <GUI_Touch_Processing+0xbc0>)
 8010346:	484b      	ldr	r0, [pc, #300]	; (8010474 <GUI_Touch_Processing+0xbb4>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010348:	ed88 0a00 	vstr	s0, [r8]
						Calculate_XYZ(Line_Rabs_buff, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 801034c:	f7fc feb4 	bl	800d0b8 <Calculate_XYZ>
						Calculate_xy(colorimetry_XYZ);
 8010350:	484c      	ldr	r0, [pc, #304]	; (8010484 <GUI_Touch_Processing+0xbc4>)
 8010352:	f7fc feff 	bl	800d154 <Calculate_xy>
						Calculate_uv(colorimetry_xy);
 8010356:	484c      	ldr	r0, [pc, #304]	; (8010488 <GUI_Touch_Processing+0xbc8>)
 8010358:	f7fc ff1a 	bl	800d190 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801035c:	4845      	ldr	r0, [pc, #276]	; (8010474 <GUI_Touch_Processing+0xbb4>)
 801035e:	f899 1000 	ldrb.w	r1, [r9]
 8010362:	f7fc ff6d 	bl	800d240 <Calculate_Tc>
 8010366:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 801036a:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801036e:	edcd 7a00 	vstr	s15, [sp]
 8010372:	f8bd 0000 	ldrh.w	r0, [sp]
 8010376:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8010378:	4298      	cmp	r0, r3
 801037a:	d116      	bne.n	80103aa <GUI_Touch_Processing+0xaea>
 801037c:	4b43      	ldr	r3, [pc, #268]	; (801048c <GUI_Touch_Processing+0xbcc>)
 801037e:	4844      	ldr	r0, [pc, #272]	; (8010490 <GUI_Touch_Processing+0xbd0>)
 8010380:	701c      	strb	r4, [r3, #0]
 8010382:	4b44      	ldr	r3, [pc, #272]	; (8010494 <GUI_Touch_Processing+0xbd4>)
 8010384:	701c      	strb	r4, [r3, #0]
 8010386:	4b44      	ldr	r3, [pc, #272]	; (8010498 <GUI_Touch_Processing+0xbd8>)
 8010388:	220e      	movs	r2, #14
 801038a:	4621      	mov	r1, r4
 801038c:	701c      	strb	r4, [r3, #0]
 801038e:	f00e fe2e 	bl	801efee <memset>
						CRICQS_done = 0x01;
 8010392:	2301      	movs	r3, #1
 8010394:	703b      	strb	r3, [r7, #0]
					Calc_ColorRend = !Calc_ColorRend;
 8010396:	4a41      	ldr	r2, [pc, #260]	; (801049c <GUI_Touch_Processing+0xbdc>)
 8010398:	7813      	ldrb	r3, [r2, #0]
 801039a:	fab3 f383 	clz	r3, r3
 801039e:	095b      	lsrs	r3, r3, #5
 80103a0:	7013      	strb	r3, [r2, #0]
					GUI_Display_Refresh();
 80103a2:	f7ff fa2b 	bl	800f7fc <GUI_Display_Refresh>
 80103a6:	f7ff bb19 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 80103aa:	4932      	ldr	r1, [pc, #200]	; (8010474 <GUI_Touch_Processing+0xbb4>)
 80103ac:	f7fa fdf4 	bl	800af98 <CRI_func>
 80103b0:	e7ef      	b.n	8010392 <GUI_Touch_Processing+0xad2>
						pause = 1;
 80103b2:	4e29      	ldr	r6, [pc, #164]	; (8010458 <GUI_Touch_Processing+0xb98>)
						Calculate_XYZ(Line_Rabs_buff, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 80103b4:	4a31      	ldr	r2, [pc, #196]	; (801047c <GUI_Touch_Processing+0xbbc>)
 80103b6:	4932      	ldr	r1, [pc, #200]	; (8010480 <GUI_Touch_Processing+0xbc0>)
 80103b8:	482e      	ldr	r0, [pc, #184]	; (8010474 <GUI_Touch_Processing+0xbb4>)
						CRICQS_done = 0x00;
 80103ba:	703c      	strb	r4, [r7, #0]
						pause = 1;
 80103bc:	2301      	movs	r3, #1
 80103be:	7033      	strb	r3, [r6, #0]
						Calculate_XYZ(Line_Rabs_buff, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 80103c0:	4b2d      	ldr	r3, [pc, #180]	; (8010478 <GUI_Touch_Processing+0xbb8>)
 80103c2:	f7fc fe79 	bl	800d0b8 <Calculate_XYZ>
						Calculate_xy(colorimetry_XYZ);
 80103c6:	482f      	ldr	r0, [pc, #188]	; (8010484 <GUI_Touch_Processing+0xbc4>)
 80103c8:	f7fc fec4 	bl	800d154 <Calculate_xy>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 80103cc:	f899 1000 	ldrb.w	r1, [r9]
 80103d0:	4828      	ldr	r0, [pc, #160]	; (8010474 <GUI_Touch_Processing+0xbb4>)
 80103d2:	f7fc ff35 	bl	800d240 <Calculate_Tc>
 80103d6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80103da:	4826      	ldr	r0, [pc, #152]	; (8010474 <GUI_Touch_Processing+0xbb4>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 80103dc:	ee17 3a90 	vmov	r3, s15
 80103e0:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80103e2:	f008 ff6b 	bl	80192bc <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80103e6:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80103e8:	ed88 0a00 	vstr	s0, [r8]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80103ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103f0:	4298      	cmp	r0, r3
 80103f2:	d10f      	bne.n	8010414 <GUI_Touch_Processing+0xb54>
 80103f4:	4b2a      	ldr	r3, [pc, #168]	; (80104a0 <GUI_Touch_Processing+0xbe0>)
 80103f6:	482b      	ldr	r0, [pc, #172]	; (80104a4 <GUI_Touch_Processing+0xbe4>)
 80103f8:	701c      	strb	r4, [r3, #0]
 80103fa:	4b2b      	ldr	r3, [pc, #172]	; (80104a8 <GUI_Touch_Processing+0xbe8>)
 80103fc:	701c      	strb	r4, [r3, #0]
 80103fe:	4b2b      	ldr	r3, [pc, #172]	; (80104ac <GUI_Touch_Processing+0xbec>)
 8010400:	220f      	movs	r2, #15
 8010402:	4621      	mov	r1, r4
 8010404:	701c      	strb	r4, [r3, #0]
 8010406:	f00e fdf2 	bl	801efee <memset>
						CRICQS_done = 0x01;
 801040a:	2301      	movs	r3, #1
 801040c:	703b      	strb	r3, [r7, #0]
						pause = 0;
 801040e:	2300      	movs	r3, #0
 8010410:	7033      	strb	r3, [r6, #0]
 8010412:	e7c0      	b.n	8010396 <GUI_Touch_Processing+0xad6>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 8010414:	4917      	ldr	r1, [pc, #92]	; (8010474 <GUI_Touch_Processing+0xbb4>)
 8010416:	f7f8 fc53 	bl	8008cc0 <cqs_func>
 801041a:	e7f6      	b.n	801040a <GUI_Touch_Processing+0xb4a>
 801041c:	f3af 8000 	nop.w
 8010420:	00000000 	.word	0x00000000
 8010424:	40623800 	.word	0x40623800
 8010428:	99999999 	.word	0x99999999
 801042c:	40720d99 	.word	0x40720d99
 8010430:	99999999 	.word	0x99999999
 8010434:	4091a399 	.word	0x4091a399
 8010438:	33333333 	.word	0x33333333
 801043c:	40053333 	.word	0x40053333
 8010440:	66666666 	.word	0x66666666
 8010444:	4081f866 	.word	0x4081f866
 8010448:	33333333 	.word	0x33333333
 801044c:	40867133 	.word	0x40867133
 8010450:	33333333 	.word	0x33333333
 8010454:	407aff33 	.word	0x407aff33
 8010458:	20004cc6 	.word	0x20004cc6
 801045c:	20000232 	.word	0x20000232
 8010460:	4093e000 	.word	0x4093e000
 8010464:	20004ca9 	.word	0x20004ca9
 8010468:	20004ca0 	.word	0x20004ca0
 801046c:	20004c9c 	.word	0x20004c9c
 8010470:	2004fc00 	.word	0x2004fc00
 8010474:	200077fc 	.word	0x200077fc
 8010478:	200887d0 	.word	0x200887d0
 801047c:	200877d0 	.word	0x200877d0
 8010480:	200857d0 	.word	0x200857d0
 8010484:	2008a7de 	.word	0x2008a7de
 8010488:	2008a7f4 	.word	0x2008a7f4
 801048c:	20003be0 	.word	0x20003be0
 8010490:	20003c00 	.word	0x20003c00
 8010494:	20003bf0 	.word	0x20003bf0
 8010498:	20003bd0 	.word	0x20003bd0
 801049c:	20004c9d 	.word	0x20004c9d
 80104a0:	20002bab 	.word	0x20002bab
 80104a4:	20002b9c 	.word	0x20002b9c
 80104a8:	20002bad 	.word	0x20002bad
 80104ac:	20002bac 	.word	0x20002bac
 80104b0:	2008fda4 	.word	0x2008fda4
 80104b4:	20004ca4 	.word	0x20004ca4
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80104b8:	a3be      	add	r3, pc, #760	; (adr r3, 80107b4 <GUI_Touch_Processing+0xef4>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	4630      	mov	r0, r6
 80104c0:	4639      	mov	r1, r7
 80104c2:	f04f 0501 	mov.w	r5, #1
 80104c6:	f7f0 fb29 	bl	8000b1c <__aeabi_dcmpge>
 80104ca:	b900      	cbnz	r0, 80104ce <GUI_Touch_Processing+0xc0e>
 80104cc:	4605      	mov	r5, r0
 80104ce:	a3bb      	add	r3, pc, #748	; (adr r3, 80107bc <GUI_Touch_Processing+0xefc>)
 80104d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d4:	4630      	mov	r0, r6
 80104d6:	4639      	mov	r1, r7
 80104d8:	f04f 0801 	mov.w	r8, #1
 80104dc:	f7f0 fb14 	bl	8000b08 <__aeabi_dcmple>
 80104e0:	b900      	cbnz	r0, 80104e4 <GUI_Touch_Processing+0xc24>
 80104e2:	4680      	mov	r8, r0
 80104e4:	ea05 0508 	and.w	r5, r5, r8
 80104e8:	07ea      	lsls	r2, r5, #31
 80104ea:	f57f aa77 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 80104ee:	2c00      	cmp	r4, #0
 80104f0:	f43f aa74 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 80104f4:	4ba2      	ldr	r3, [pc, #648]	; (8010780 <GUI_Touch_Processing+0xec0>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	b913      	cbnz	r3, 8010500 <GUI_Touch_Processing+0xc40>
 80104fa:	2312      	movs	r3, #18
 80104fc:	f88b 3000 	strb.w	r3, [fp]
						pause = 0;
 8010500:	4ba0      	ldr	r3, [pc, #640]	; (8010784 <GUI_Touch_Processing+0xec4>)
 8010502:	2200      	movs	r2, #0
 8010504:	701a      	strb	r2, [r3, #0]
 8010506:	f7ff ba69 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 801050a:	4b9f      	ldr	r3, [pc, #636]	; (8010788 <GUI_Touch_Processing+0xec8>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 801050c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8010510:	2207      	movs	r2, #7
 8010512:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 8010514:	f7f0 f816 	bl	8000544 <__aeabi_i2d>
 8010518:	4604      	mov	r4, r0
 801051a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801051e:	460d      	mov	r5, r1
 8010520:	f7f0 f810 	bl	8000544 <__aeabi_i2d>
 8010524:	a37c      	add	r3, pc, #496	; (adr r3, 8010718 <GUI_Touch_Processing+0xe58>)
 8010526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052a:	e9cd 0100 	strd	r0, r1, [sp]
 801052e:	f04f 0701 	mov.w	r7, #1
 8010532:	f7f0 faf3 	bl	8000b1c <__aeabi_dcmpge>
 8010536:	b900      	cbnz	r0, 801053a <GUI_Touch_Processing+0xc7a>
 8010538:	4607      	mov	r7, r0
 801053a:	2200      	movs	r2, #0
 801053c:	4b93      	ldr	r3, [pc, #588]	; (801078c <GUI_Touch_Processing+0xecc>)
 801053e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010542:	b2ff      	uxtb	r7, r7
 8010544:	f04f 0601 	mov.w	r6, #1
 8010548:	f7f0 fade 	bl	8000b08 <__aeabi_dcmple>
 801054c:	b900      	cbnz	r0, 8010550 <GUI_Touch_Processing+0xc90>
 801054e:	4606      	mov	r6, r0
 8010550:	b2f3      	uxtb	r3, r6
 8010552:	9303      	str	r3, [sp, #12]
 8010554:	4620      	mov	r0, r4
 8010556:	a372      	add	r3, pc, #456	; (adr r3, 8010720 <GUI_Touch_Processing+0xe60>)
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	4629      	mov	r1, r5
 801055e:	f04f 0601 	mov.w	r6, #1
 8010562:	f7f0 fadb 	bl	8000b1c <__aeabi_dcmpge>
 8010566:	b900      	cbnz	r0, 801056a <GUI_Touch_Processing+0xcaa>
 8010568:	4606      	mov	r6, r0
 801056a:	a36f      	add	r3, pc, #444	; (adr r3, 8010728 <GUI_Touch_Processing+0xe68>)
 801056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010570:	4620      	mov	r0, r4
 8010572:	4629      	mov	r1, r5
 8010574:	f04f 0801 	mov.w	r8, #1
 8010578:	f7f0 fac6 	bl	8000b08 <__aeabi_dcmple>
 801057c:	b900      	cbnz	r0, 8010580 <GUI_Touch_Processing+0xcc0>
 801057e:	4680      	mov	r8, r0
 8010580:	ea06 0608 	and.w	r6, r6, r8
 8010584:	4237      	tst	r7, r6
 8010586:	d006      	beq.n	8010596 <GUI_Touch_Processing+0xcd6>
 8010588:	9b03      	ldr	r3, [sp, #12]
 801058a:	b123      	cbz	r3, 8010596 <GUI_Touch_Processing+0xcd6>
					GUI_screen_state = DataSet2_Screen;
 801058c:	2308      	movs	r3, #8
 801058e:	f88b 3000 	strb.w	r3, [fp]
 8010592:	f7ff ba23 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8010596:	a366      	add	r3, pc, #408	; (adr r3, 8010730 <GUI_Touch_Processing+0xe70>)
 8010598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059c:	4620      	mov	r0, r4
 801059e:	4629      	mov	r1, r5
 80105a0:	f04f 0601 	mov.w	r6, #1
 80105a4:	f7f0 faba 	bl	8000b1c <__aeabi_dcmpge>
 80105a8:	b900      	cbnz	r0, 80105ac <GUI_Touch_Processing+0xcec>
 80105aa:	4606      	mov	r6, r0
 80105ac:	a362      	add	r3, pc, #392	; (adr r3, 8010738 <GUI_Touch_Processing+0xe78>)
 80105ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b2:	4620      	mov	r0, r4
 80105b4:	4629      	mov	r1, r5
 80105b6:	f04f 0801 	mov.w	r8, #1
 80105ba:	f7f0 faa5 	bl	8000b08 <__aeabi_dcmple>
 80105be:	b900      	cbnz	r0, 80105c2 <GUI_Touch_Processing+0xd02>
 80105c0:	4680      	mov	r8, r0
 80105c2:	ea06 0608 	and.w	r6, r6, r8
 80105c6:	a35e      	add	r3, pc, #376	; (adr r3, 8010740 <GUI_Touch_Processing+0xe80>)
 80105c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105d0:	b2f6      	uxtb	r6, r6
 80105d2:	f04f 0801 	mov.w	r8, #1
 80105d6:	f7f0 faa1 	bl	8000b1c <__aeabi_dcmpge>
 80105da:	b900      	cbnz	r0, 80105de <GUI_Touch_Processing+0xd1e>
 80105dc:	4680      	mov	r8, r0
 80105de:	a35a      	add	r3, pc, #360	; (adr r3, 8010748 <GUI_Touch_Processing+0xe88>)
 80105e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105e8:	f04f 0901 	mov.w	r9, #1
 80105ec:	f7f0 fa8c 	bl	8000b08 <__aeabi_dcmple>
 80105f0:	b900      	cbnz	r0, 80105f4 <GUI_Touch_Processing+0xd34>
 80105f2:	4681      	mov	r9, r0
 80105f4:	ea08 0809 	and.w	r8, r8, r9
 80105f8:	f018 0f01 	tst.w	r8, #1
 80105fc:	d026      	beq.n	801064c <GUI_Touch_Processing+0xd8c>
 80105fe:	b32e      	cbz	r6, 801064c <GUI_Touch_Processing+0xd8c>
					Mode_EL = !Mode_EL;
 8010600:	4c63      	ldr	r4, [pc, #396]	; (8010790 <GUI_Touch_Processing+0xed0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8010602:	4b64      	ldr	r3, [pc, #400]	; (8010794 <GUI_Touch_Processing+0xed4>)
					Mode_EL = !Mode_EL;
 8010604:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8010606:	4864      	ldr	r0, [pc, #400]	; (8010798 <GUI_Touch_Processing+0xed8>)
					Mode_EL = !Mode_EL;
 8010608:	2a00      	cmp	r2, #0
 801060a:	bf0c      	ite	eq
 801060c:	2201      	moveq	r2, #1
 801060e:	2200      	movne	r2, #0
 8010610:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8010612:	bf18      	it	ne
 8010614:	4618      	movne	r0, r3
 8010616:	4a61      	ldr	r2, [pc, #388]	; (801079c <GUI_Touch_Processing+0xedc>)
 8010618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801061c:	f7fd fae0 	bl	800dbe0 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8010620:	7822      	ldrb	r2, [r4, #0]
 8010622:	4b5f      	ldr	r3, [pc, #380]	; (80107a0 <GUI_Touch_Processing+0xee0>)
 8010624:	b982      	cbnz	r2, 8010648 <GUI_Touch_Processing+0xd88>
 8010626:	4a5f      	ldr	r2, [pc, #380]	; (80107a4 <GUI_Touch_Processing+0xee4>)
 8010628:	edd2 0a00 	vldr	s1, [r2]
 801062c:	ed93 0a00 	vldr	s0, [r3]
 8010630:	f008 fdc4 	bl	80191bc <Rabs_calc_Factor2_Settings_change>
 8010634:	4b5c      	ldr	r3, [pc, #368]	; (80107a8 <GUI_Touch_Processing+0xee8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8010636:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8010638:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801063c:	21ca      	movs	r1, #202	; 0xca
 801063e:	20b6      	movs	r0, #182	; 0xb6
 8010640:	f003 fdb8 	bl	80141b4 <GUI_Switch_ButtonActive>
 8010644:	f7ff b9ca 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8010648:	4a58      	ldr	r2, [pc, #352]	; (80107ac <GUI_Touch_Processing+0xeec>)
 801064a:	e7ed      	b.n	8010628 <GUI_Touch_Processing+0xd68>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 801064c:	a340      	add	r3, pc, #256	; (adr r3, 8010750 <GUI_Touch_Processing+0xe90>)
 801064e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010652:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010656:	f04f 0801 	mov.w	r8, #1
 801065a:	f7f0 fa5f 	bl	8000b1c <__aeabi_dcmpge>
 801065e:	b900      	cbnz	r0, 8010662 <GUI_Touch_Processing+0xda2>
 8010660:	4680      	mov	r8, r0
 8010662:	a33d      	add	r3, pc, #244	; (adr r3, 8010758 <GUI_Touch_Processing+0xe98>)
 8010664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010668:	e9dd 0100 	ldrd	r0, r1, [sp]
 801066c:	f04f 0901 	mov.w	r9, #1
 8010670:	f7f0 fa4a 	bl	8000b08 <__aeabi_dcmple>
 8010674:	b900      	cbnz	r0, 8010678 <GUI_Touch_Processing+0xdb8>
 8010676:	4681      	mov	r9, r0
 8010678:	ea08 0809 	and.w	r8, r8, r9
 801067c:	f018 0f01 	tst.w	r8, #1
 8010680:	d00f      	beq.n	80106a2 <GUI_Touch_Processing+0xde2>
 8010682:	b176      	cbz	r6, 80106a2 <GUI_Touch_Processing+0xde2>
					Bluetooth = !Bluetooth;
 8010684:	4b4a      	ldr	r3, [pc, #296]	; (80107b0 <GUI_Touch_Processing+0xef0>)
 8010686:	781a      	ldrb	r2, [r3, #0]
 8010688:	fab2 f282 	clz	r2, r2
 801068c:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801068e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8010692:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8010694:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8010696:	f003 fd33 	bl	8014100 <GUI_Switch_Button>
					GUI_Up_Panel();
 801069a:	f7fd fee5 	bl	800e468 <GUI_Up_Panel>
 801069e:	f7ff b99d 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 80106a2:	a32f      	add	r3, pc, #188	; (adr r3, 8010760 <GUI_Touch_Processing+0xea0>)
 80106a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a8:	4620      	mov	r0, r4
 80106aa:	4629      	mov	r1, r5
 80106ac:	f04f 0601 	mov.w	r6, #1
 80106b0:	f7f0 fa34 	bl	8000b1c <__aeabi_dcmpge>
 80106b4:	b900      	cbnz	r0, 80106b8 <GUI_Touch_Processing+0xdf8>
 80106b6:	4606      	mov	r6, r0
 80106b8:	a32b      	add	r3, pc, #172	; (adr r3, 8010768 <GUI_Touch_Processing+0xea8>)
 80106ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106be:	4620      	mov	r0, r4
 80106c0:	4629      	mov	r1, r5
 80106c2:	f04f 0801 	mov.w	r8, #1
 80106c6:	f7f0 fa1f 	bl	8000b08 <__aeabi_dcmple>
 80106ca:	b900      	cbnz	r0, 80106ce <GUI_Touch_Processing+0xe0e>
 80106cc:	4680      	mov	r8, r0
 80106ce:	ea06 0608 	and.w	r6, r6, r8
 80106d2:	a327      	add	r3, pc, #156	; (adr r3, 8010770 <GUI_Touch_Processing+0xeb0>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106dc:	b2f6      	uxtb	r6, r6
 80106de:	f04f 0801 	mov.w	r8, #1
 80106e2:	f7f0 fa1b 	bl	8000b1c <__aeabi_dcmpge>
 80106e6:	b900      	cbnz	r0, 80106ea <GUI_Touch_Processing+0xe2a>
 80106e8:	4680      	mov	r8, r0
 80106ea:	a323      	add	r3, pc, #140	; (adr r3, 8010778 <GUI_Touch_Processing+0xeb8>)
 80106ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106f4:	f04f 0901 	mov.w	r9, #1
 80106f8:	f7f0 fa06 	bl	8000b08 <__aeabi_dcmple>
 80106fc:	b900      	cbnz	r0, 8010700 <GUI_Touch_Processing+0xe40>
 80106fe:	4681      	mov	r9, r0
 8010700:	ea08 0809 	and.w	r8, r8, r9
 8010704:	f018 0f01 	tst.w	r8, #1
 8010708:	d05c      	beq.n	80107c4 <GUI_Touch_Processing+0xf04>
 801070a:	2e00      	cmp	r6, #0
 801070c:	d05a      	beq.n	80107c4 <GUI_Touch_Processing+0xf04>
					GUI_screen_state = Information_Screen;
 801070e:	2311      	movs	r3, #17
 8010710:	f88b 3000 	strb.w	r3, [fp]
 8010714:	f7ff b962 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8010718:	99999999 	.word	0x99999999
 801071c:	4091a399 	.word	0x4091a399
 8010720:	33333333 	.word	0x33333333
 8010724:	407aff33 	.word	0x407aff33
 8010728:	66666666 	.word	0x66666666
 801072c:	4081f866 	.word	0x4081f866
 8010730:	cccccccd 	.word	0xcccccccd
 8010734:	407e24cc 	.word	0x407e24cc
 8010738:	33333333 	.word	0x33333333
 801073c:	40838b33 	.word	0x40838b33
 8010740:	66666666 	.word	0x66666666
 8010744:	4080ba66 	.word	0x4080ba66
 8010748:	33333333 	.word	0x33333333
 801074c:	40853333 	.word	0x40853333
 8010750:	99999999 	.word	0x99999999
 8010754:	40863199 	.word	0x40863199
 8010758:	66666666 	.word	0x66666666
 801075c:	408aaa66 	.word	0x408aaa66
 8010760:	33333333 	.word	0x33333333
 8010764:	40353333 	.word	0x40353333
 8010768:	00000000 	.word	0x00000000
 801076c:	4084b400 	.word	0x4084b400
 8010770:	99999999 	.word	0x99999999
 8010774:	40748999 	.word	0x40748999
 8010778:	99999999 	.word	0x99999999
 801077c:	407cd199 	.word	0x407cd199
 8010780:	20090110 	.word	0x20090110
 8010784:	20004cc6 	.word	0x20004cc6
 8010788:	20000232 	.word	0x20000232
 801078c:	4093e000 	.word	0x4093e000
 8010790:	20000a50 	.word	0x20000a50
 8010794:	08101838 	.word	0x08101838
 8010798:	08100838 	.word	0x08100838
 801079c:	2004cc00 	.word	0x2004cc00
 80107a0:	20004fec 	.word	0x20004fec
 80107a4:	20004fe8 	.word	0x20004fe8
 80107a8:	20004ff4 	.word	0x20004ff4
 80107ac:	20004fe4 	.word	0x20004fe4
 80107b0:	2008acda 	.word	0x2008acda
 80107b4:	00000000 	.word	0x00000000
 80107b8:	40623800 	.word	0x40623800
 80107bc:	99999999 	.word	0x99999999
 80107c0:	40720d99 	.word	0x40720d99
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Illuminance
 80107c4:	2200      	movs	r2, #0
 80107c6:	4bbe      	ldr	r3, [pc, #760]	; (8010ac0 <GUI_Touch_Processing+0x1200>)
 80107c8:	4620      	mov	r0, r4
 80107ca:	4629      	mov	r1, r5
 80107cc:	f04f 0901 	mov.w	r9, #1
 80107d0:	f7f0 f9a4 	bl	8000b1c <__aeabi_dcmpge>
 80107d4:	b900      	cbnz	r0, 80107d8 <GUI_Touch_Processing+0xf18>
 80107d6:	4681      	mov	r9, r0
 80107d8:	a3a3      	add	r3, pc, #652	; (adr r3, 8010a68 <GUI_Touch_Processing+0x11a8>)
 80107da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107de:	4620      	mov	r0, r4
 80107e0:	4629      	mov	r1, r5
 80107e2:	f04f 0801 	mov.w	r8, #1
 80107e6:	f7f0 f98f 	bl	8000b08 <__aeabi_dcmple>
 80107ea:	b900      	cbnz	r0, 80107ee <GUI_Touch_Processing+0xf2e>
 80107ec:	4680      	mov	r8, r0
 80107ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8010a70 <GUI_Touch_Processing+0x11b0>)
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107f8:	ea09 0808 	and.w	r8, r9, r8
 80107fc:	f04f 0901 	mov.w	r9, #1
 8010800:	f7f0 f98c 	bl	8000b1c <__aeabi_dcmpge>
 8010804:	b900      	cbnz	r0, 8010808 <GUI_Touch_Processing+0xf48>
 8010806:	4681      	mov	r9, r0
 8010808:	ea08 0809 	and.w	r8, r8, r9
 801080c:	f018 0f01 	tst.w	r8, #1
 8010810:	d01b      	beq.n	801084a <GUI_Touch_Processing+0xf8a>
 8010812:	a399      	add	r3, pc, #612	; (adr r3, 8010a78 <GUI_Touch_Processing+0x11b8>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	e9dd 0100 	ldrd	r0, r1, [sp]
 801081c:	f04f 0801 	mov.w	r8, #1
 8010820:	f7f0 f972 	bl	8000b08 <__aeabi_dcmple>
 8010824:	b900      	cbnz	r0, 8010828 <GUI_Touch_Processing+0xf68>
 8010826:	4680      	mov	r8, r0
 8010828:	f018 0fff 	tst.w	r8, #255	; 0xff
 801082c:	d00d      	beq.n	801084a <GUI_Touch_Processing+0xf8a>
					Measure_Field ^= Illuminance;
 801082e:	4ba5      	ldr	r3, [pc, #660]	; (8010ac4 <GUI_Touch_Processing+0x1204>)
 8010830:	881a      	ldrh	r2, [r3, #0]
 8010832:	f082 0201 	eor.w	r2, r2, #1
 8010836:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 8010838:	f240 1147 	movw	r1, #327	; 0x147
 801083c:	f002 0201 	and.w	r2, r2, #1
 8010840:	20c8      	movs	r0, #200	; 0xc8
 8010842:	f003 fbed 	bl	8014020 <GUI_CheckBox>
 8010846:	f7ff b8c9 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 801084a:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 801084c:	4620      	mov	r0, r4
 801084e:	ea07 0903 	and.w	r9, r7, r3
 8010852:	4629      	mov	r1, r5
 8010854:	a38a      	add	r3, pc, #552	; (adr r3, 8010a80 <GUI_Touch_Processing+0x11c0>)
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	f04f 0801 	mov.w	r8, #1
 801085e:	f7f0 f95d 	bl	8000b1c <__aeabi_dcmpge>
 8010862:	b900      	cbnz	r0, 8010866 <GUI_Touch_Processing+0xfa6>
 8010864:	4680      	mov	r8, r0
 8010866:	a388      	add	r3, pc, #544	; (adr r3, 8010a88 <GUI_Touch_Processing+0x11c8>)
 8010868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086c:	4620      	mov	r0, r4
 801086e:	4629      	mov	r1, r5
 8010870:	f04f 0a01 	mov.w	sl, #1
 8010874:	f7f0 f948 	bl	8000b08 <__aeabi_dcmple>
 8010878:	b900      	cbnz	r0, 801087c <GUI_Touch_Processing+0xfbc>
 801087a:	4682      	mov	sl, r0
 801087c:	ea08 080a 	and.w	r8, r8, sl
 8010880:	f018 0f01 	tst.w	r8, #1
 8010884:	d029      	beq.n	80108da <GUI_Touch_Processing+0x101a>
 8010886:	f1b9 0f00 	cmp.w	r9, #0
 801088a:	d026      	beq.n	80108da <GUI_Touch_Processing+0x101a>
					WriteSDFLASH_t(sdfile_cnt);
 801088c:	4b8e      	ldr	r3, [pc, #568]	; (8010ac8 <GUI_Touch_Processing+0x1208>)
 801088e:	2100      	movs	r1, #0
 8010890:	8818      	ldrh	r0, [r3, #0]
 8010892:	f008 fd25 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8010896:	4b8d      	ldr	r3, [pc, #564]	; (8010acc <GUI_Touch_Processing+0x120c>)
 8010898:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801089a:	1e5a      	subs	r2, r3, #1
 801089c:	2a05      	cmp	r2, #5
 801089e:	d804      	bhi.n	80108aa <GUI_Touch_Processing+0xfea>
 80108a0:	e8df f002 	tbb	[pc, r2]
 80108a4:	0c030307 	.word	0x0c030307
 80108a8:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 80108aa:	f88b 3000 	strb.w	r3, [fp]
 80108ae:	f7ff b895 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80108b2:	2301      	movs	r3, #1
 80108b4:	f88b 3000 	strb.w	r3, [fp]
 80108b8:	f7ff b890 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80108bc:	2304      	movs	r3, #4
 80108be:	f88b 3000 	strb.w	r3, [fp]
 80108c2:	f7ff b88b 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80108c6:	2306      	movs	r3, #6
 80108c8:	f88b 3000 	strb.w	r3, [fp]
 80108cc:	f7ff b886 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80108d0:	2305      	movs	r3, #5
 80108d2:	f88b 3000 	strb.w	r3, [fp]
 80108d6:	f7ff b881 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 80108da:	2200      	movs	r2, #0
 80108dc:	4b7c      	ldr	r3, [pc, #496]	; (8010ad0 <GUI_Touch_Processing+0x1210>)
 80108de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108e2:	f04f 0801 	mov.w	r8, #1
 80108e6:	f7f0 f919 	bl	8000b1c <__aeabi_dcmpge>
 80108ea:	b900      	cbnz	r0, 80108ee <GUI_Touch_Processing+0x102e>
 80108ec:	4680      	mov	r8, r0
 80108ee:	a368      	add	r3, pc, #416	; (adr r3, 8010a90 <GUI_Touch_Processing+0x11d0>)
 80108f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108f8:	f04f 0a01 	mov.w	sl, #1
 80108fc:	f7f0 f904 	bl	8000b08 <__aeabi_dcmple>
 8010900:	b900      	cbnz	r0, 8010904 <GUI_Touch_Processing+0x1044>
 8010902:	4682      	mov	sl, r0
 8010904:	ea08 080a 	and.w	r8, r8, sl
 8010908:	f018 0f01 	tst.w	r8, #1
 801090c:	d00e      	beq.n	801092c <GUI_Touch_Processing+0x106c>
 801090e:	b16e      	cbz	r6, 801092c <GUI_Touch_Processing+0x106c>
					if (Language_status == Ru) Language_status=En;
 8010910:	4b70      	ldr	r3, [pc, #448]	; (8010ad4 <GUI_Touch_Processing+0x1214>)
 8010912:	781a      	ldrb	r2, [r3, #0]
 8010914:	b91a      	cbnz	r2, 801091e <GUI_Touch_Processing+0x105e>
 8010916:	2201      	movs	r2, #1
 8010918:	701a      	strb	r2, [r3, #0]
 801091a:	f7ff b85f 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 801091e:	2a01      	cmp	r2, #1
 8010920:	f47f a85c 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
 8010924:	2200      	movs	r2, #0
 8010926:	701a      	strb	r2, [r3, #0]
 8010928:	f7ff b858 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 801092c:	a35a      	add	r3, pc, #360	; (adr r3, 8010a98 <GUI_Touch_Processing+0x11d8>)
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	4620      	mov	r0, r4
 8010934:	4629      	mov	r1, r5
 8010936:	f04f 0601 	mov.w	r6, #1
 801093a:	f7f0 f8ef 	bl	8000b1c <__aeabi_dcmpge>
 801093e:	b900      	cbnz	r0, 8010942 <GUI_Touch_Processing+0x1082>
 8010940:	4606      	mov	r6, r0
 8010942:	a357      	add	r3, pc, #348	; (adr r3, 8010aa0 <GUI_Touch_Processing+0x11e0>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	4620      	mov	r0, r4
 801094a:	4629      	mov	r1, r5
 801094c:	f04f 0801 	mov.w	r8, #1
 8010950:	f7f0 f8da 	bl	8000b08 <__aeabi_dcmple>
 8010954:	b900      	cbnz	r0, 8010958 <GUI_Touch_Processing+0x1098>
 8010956:	4680      	mov	r8, r0
 8010958:	ea06 0308 	and.w	r3, r6, r8
 801095c:	07db      	lsls	r3, r3, #31
 801095e:	d516      	bpl.n	801098e <GUI_Touch_Processing+0x10ce>
 8010960:	f1b9 0f00 	cmp.w	r9, #0
 8010964:	d013      	beq.n	801098e <GUI_Touch_Processing+0x10ce>
					TFT_ON_OFF = 0x00;
 8010966:	4b5c      	ldr	r3, [pc, #368]	; (8010ad8 <GUI_Touch_Processing+0x1218>)
 8010968:	2400      	movs	r4, #0
					HAL_NVIC_DisableIRQ(TIM4_IRQn);	//TFT_booster SHDN off
 801096a:	201e      	movs	r0, #30
					TFT_ON_OFF = 0x00;
 801096c:	701c      	strb	r4, [r3, #0]
					HAL_NVIC_DisableIRQ(TIM4_IRQn);	//TFT_booster SHDN off
 801096e:	f7f1 f84f 	bl	8001a10 <HAL_NVIC_DisableIRQ>
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET); //TFT_booster SHDN off
 8010972:	4622      	mov	r2, r4
 8010974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010978:	4858      	ldr	r0, [pc, #352]	; (8010adc <GUI_Touch_Processing+0x121c>)
 801097a:	f7f1 fd49 	bl	8002410 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801097e:	4622      	mov	r2, r4
 8010980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010984:	4856      	ldr	r0, [pc, #344]	; (8010ae0 <GUI_Touch_Processing+0x1220>)
 8010986:	f7f1 fd43 	bl	8002410 <HAL_GPIO_WritePin>
 801098a:	f7ff b827 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801098e:	a33e      	add	r3, pc, #248	; (adr r3, 8010a88 <GUI_Touch_Processing+0x11c8>)
 8010990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010994:	4620      	mov	r0, r4
 8010996:	4629      	mov	r1, r5
 8010998:	f04f 0601 	mov.w	r6, #1
 801099c:	f7f0 f8be 	bl	8000b1c <__aeabi_dcmpge>
 80109a0:	b900      	cbnz	r0, 80109a4 <GUI_Touch_Processing+0x10e4>
 80109a2:	4606      	mov	r6, r0
 80109a4:	a340      	add	r3, pc, #256	; (adr r3, 8010aa8 <GUI_Touch_Processing+0x11e8>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	4620      	mov	r0, r4
 80109ac:	4629      	mov	r1, r5
 80109ae:	f04f 0801 	mov.w	r8, #1
 80109b2:	f7f0 f8a9 	bl	8000b08 <__aeabi_dcmple>
 80109b6:	b900      	cbnz	r0, 80109ba <GUI_Touch_Processing+0x10fa>
 80109b8:	4680      	mov	r8, r0
 80109ba:	ea06 0608 	and.w	r6, r6, r8
 80109be:	4237      	tst	r7, r6
 80109c0:	f43f a80c 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
 80109c4:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f47f a848 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
 80109cc:	f7ff b806 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				preGUI_screen_state = GUI_screen_state;
 80109d0:	4b44      	ldr	r3, [pc, #272]	; (8010ae4 <GUI_Touch_Processing+0x1224>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 80109d2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
				preGUI_screen_state = GUI_screen_state;
 80109d6:	2208      	movs	r2, #8
 80109d8:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 80109da:	f7ef fdb3 	bl	8000544 <__aeabi_i2d>
 80109de:	4604      	mov	r4, r0
 80109e0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80109e4:	460d      	mov	r5, r1
 80109e6:	f7ef fdad 	bl	8000544 <__aeabi_i2d>
 80109ea:	a331      	add	r3, pc, #196	; (adr r3, 8010ab0 <GUI_Touch_Processing+0x11f0>)
 80109ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f0:	4606      	mov	r6, r0
 80109f2:	460f      	mov	r7, r1
 80109f4:	f04f 0a01 	mov.w	sl, #1
 80109f8:	f7f0 f890 	bl	8000b1c <__aeabi_dcmpge>
 80109fc:	b900      	cbnz	r0, 8010a00 <GUI_Touch_Processing+0x1140>
 80109fe:	4682      	mov	sl, r0
 8010a00:	2200      	movs	r2, #0
 8010a02:	4b39      	ldr	r3, [pc, #228]	; (8010ae8 <GUI_Touch_Processing+0x1228>)
 8010a04:	4630      	mov	r0, r6
 8010a06:	4639      	mov	r1, r7
 8010a08:	fa5f fa8a 	uxtb.w	sl, sl
 8010a0c:	f04f 0801 	mov.w	r8, #1
 8010a10:	f7f0 f87a 	bl	8000b08 <__aeabi_dcmple>
 8010a14:	b900      	cbnz	r0, 8010a18 <GUI_Touch_Processing+0x1158>
 8010a16:	4680      	mov	r8, r0
 8010a18:	fa5f f388 	uxtb.w	r3, r8
 8010a1c:	9300      	str	r3, [sp, #0]
 8010a1e:	4620      	mov	r0, r4
 8010a20:	a325      	add	r3, pc, #148	; (adr r3, 8010ab8 <GUI_Touch_Processing+0x11f8>)
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	4629      	mov	r1, r5
 8010a28:	f04f 0801 	mov.w	r8, #1
 8010a2c:	f7f0 f876 	bl	8000b1c <__aeabi_dcmpge>
 8010a30:	b900      	cbnz	r0, 8010a34 <GUI_Touch_Processing+0x1174>
 8010a32:	4680      	mov	r8, r0
 8010a34:	a318      	add	r3, pc, #96	; (adr r3, 8010a98 <GUI_Touch_Processing+0x11d8>)
 8010a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	f04f 0901 	mov.w	r9, #1
 8010a42:	f7f0 f861 	bl	8000b08 <__aeabi_dcmple>
 8010a46:	b900      	cbnz	r0, 8010a4a <GUI_Touch_Processing+0x118a>
 8010a48:	4681      	mov	r9, r0
 8010a4a:	ea08 0809 	and.w	r8, r8, r9
 8010a4e:	ea1a 0f08 	tst.w	sl, r8
 8010a52:	d04b      	beq.n	8010aec <GUI_Touch_Processing+0x122c>
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d048      	beq.n	8010aec <GUI_Touch_Processing+0x122c>
					GUI_screen_state = DataSet3_Screen;
 8010a5a:	2309      	movs	r3, #9
 8010a5c:	f88b 3000 	strb.w	r3, [fp]
 8010a60:	f7fe bfbc 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8010a64:	f3af 8000 	nop.w
 8010a68:	cccccccd 	.word	0xcccccccd
 8010a6c:	408508cc 	.word	0x408508cc
 8010a70:	66666666 	.word	0x66666666
 8010a74:	408b1466 	.word	0x408b1466
 8010a78:	33333333 	.word	0x33333333
 8010a7c:	408f8d33 	.word	0x408f8d33
 8010a80:	33333333 	.word	0x33333333
 8010a84:	40053333 	.word	0x40053333
 8010a88:	00000000 	.word	0x00000000
 8010a8c:	40623800 	.word	0x40623800
 8010a90:	00000000 	.word	0x00000000
 8010a94:	4073e000 	.word	0x4073e000
 8010a98:	66666666 	.word	0x66666666
 8010a9c:	4081f866 	.word	0x4081f866
 8010aa0:	33333333 	.word	0x33333333
 8010aa4:	40867133 	.word	0x40867133
 8010aa8:	99999999 	.word	0x99999999
 8010aac:	40720d99 	.word	0x40720d99
 8010ab0:	99999999 	.word	0x99999999
 8010ab4:	4091a399 	.word	0x4091a399
 8010ab8:	33333333 	.word	0x33333333
 8010abc:	407aff33 	.word	0x407aff33
 8010ac0:	40809000 	.word	0x40809000
 8010ac4:	20004ca6 	.word	0x20004ca6
 8010ac8:	20004ccc 	.word	0x20004ccc
 8010acc:	2008acd5 	.word	0x2008acd5
 8010ad0:	406a8000 	.word	0x406a8000
 8010ad4:	20004ca3 	.word	0x20004ca3
 8010ad8:	20000a52 	.word	0x20000a52
 8010adc:	48001800 	.word	0x48001800
 8010ae0:	48001400 	.word	0x48001400
 8010ae4:	20000232 	.word	0x20000232
 8010ae8:	4093e000 	.word	0x4093e000
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Irradiance
 8010aec:	2200      	movs	r2, #0
 8010aee:	4bb4      	ldr	r3, [pc, #720]	; (8010dc0 <GUI_Touch_Processing+0x1500>)
 8010af0:	4620      	mov	r0, r4
 8010af2:	4629      	mov	r1, r5
 8010af4:	f04f 0801 	mov.w	r8, #1
 8010af8:	f7f0 f810 	bl	8000b1c <__aeabi_dcmpge>
 8010afc:	b900      	cbnz	r0, 8010b00 <GUI_Touch_Processing+0x1240>
 8010afe:	4680      	mov	r8, r0
 8010b00:	a395      	add	r3, pc, #596	; (adr r3, 8010d58 <GUI_Touch_Processing+0x1498>)
 8010b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b06:	4620      	mov	r0, r4
 8010b08:	4629      	mov	r1, r5
 8010b0a:	f04f 0901 	mov.w	r9, #1
 8010b0e:	f7ef fffb 	bl	8000b08 <__aeabi_dcmple>
 8010b12:	b900      	cbnz	r0, 8010b16 <GUI_Touch_Processing+0x1256>
 8010b14:	4681      	mov	r9, r0
 8010b16:	ea08 0809 	and.w	r8, r8, r9
 8010b1a:	a391      	add	r3, pc, #580	; (adr r3, 8010d60 <GUI_Touch_Processing+0x14a0>)
 8010b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b20:	4630      	mov	r0, r6
 8010b22:	4639      	mov	r1, r7
 8010b24:	fa5f f888 	uxtb.w	r8, r8
 8010b28:	f04f 0901 	mov.w	r9, #1
 8010b2c:	f7ef fff6 	bl	8000b1c <__aeabi_dcmpge>
 8010b30:	b900      	cbnz	r0, 8010b34 <GUI_Touch_Processing+0x1274>
 8010b32:	4681      	mov	r9, r0
 8010b34:	a38c      	add	r3, pc, #560	; (adr r3, 8010d68 <GUI_Touch_Processing+0x14a8>)
 8010b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	4639      	mov	r1, r7
 8010b3e:	f04f 0b01 	mov.w	fp, #1
 8010b42:	f7ef ffe1 	bl	8000b08 <__aeabi_dcmple>
 8010b46:	b900      	cbnz	r0, 8010b4a <GUI_Touch_Processing+0x128a>
 8010b48:	4683      	mov	fp, r0
 8010b4a:	ea09 090b 	and.w	r9, r9, fp
 8010b4e:	f019 0f01 	tst.w	r9, #1
 8010b52:	d00f      	beq.n	8010b74 <GUI_Touch_Processing+0x12b4>
 8010b54:	f1b8 0f00 	cmp.w	r8, #0
 8010b58:	d00c      	beq.n	8010b74 <GUI_Touch_Processing+0x12b4>
					Measure_Field ^= Irradiance;
 8010b5a:	4b9a      	ldr	r3, [pc, #616]	; (8010dc4 <GUI_Touch_Processing+0x1504>)
 8010b5c:	881a      	ldrh	r2, [r3, #0]
 8010b5e:	f082 0202 	eor.w	r2, r2, #2
 8010b62:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 8010b64:	2146      	movs	r1, #70	; 0x46
 8010b66:	f002 0202 	and.w	r2, r2, #2
 8010b6a:	20c8      	movs	r0, #200	; 0xc8
 8010b6c:	f003 fa58 	bl	8014020 <GUI_CheckBox>
 8010b70:	f7fe bf34 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPFD
 8010b74:	a37e      	add	r3, pc, #504	; (adr r3, 8010d70 <GUI_Touch_Processing+0x14b0>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	4639      	mov	r1, r7
 8010b7e:	f04f 0901 	mov.w	r9, #1
 8010b82:	f7ef ffcb 	bl	8000b1c <__aeabi_dcmpge>
 8010b86:	b900      	cbnz	r0, 8010b8a <GUI_Touch_Processing+0x12ca>
 8010b88:	4681      	mov	r9, r0
 8010b8a:	a37b      	add	r3, pc, #492	; (adr r3, 8010d78 <GUI_Touch_Processing+0x14b8>)
 8010b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b90:	4630      	mov	r0, r6
 8010b92:	4639      	mov	r1, r7
 8010b94:	f04f 0b01 	mov.w	fp, #1
 8010b98:	f7ef ffb6 	bl	8000b08 <__aeabi_dcmple>
 8010b9c:	b900      	cbnz	r0, 8010ba0 <GUI_Touch_Processing+0x12e0>
 8010b9e:	4683      	mov	fp, r0
 8010ba0:	ea09 090b 	and.w	r9, r9, fp
 8010ba4:	f019 0f01 	tst.w	r9, #1
 8010ba8:	d00f      	beq.n	8010bca <GUI_Touch_Processing+0x130a>
 8010baa:	f1b8 0f00 	cmp.w	r8, #0
 8010bae:	d00c      	beq.n	8010bca <GUI_Touch_Processing+0x130a>
					Measure_Field ^= PPFD;
 8010bb0:	4b84      	ldr	r3, [pc, #528]	; (8010dc4 <GUI_Touch_Processing+0x1504>)
 8010bb2:	881a      	ldrh	r2, [r3, #0]
 8010bb4:	f082 0204 	eor.w	r2, r2, #4
 8010bb8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&PPFD);
 8010bba:	2185      	movs	r1, #133	; 0x85
 8010bbc:	f002 0204 	and.w	r2, r2, #4
 8010bc0:	20c8      	movs	r0, #200	; 0xc8
 8010bc2:	f003 fa2d 	bl	8014020 <GUI_CheckBox>
 8010bc6:	f7fe bf09 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //PPFD_BGR
 8010bca:	a36d      	add	r3, pc, #436	; (adr r3, 8010d80 <GUI_Touch_Processing+0x14c0>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	f04f 0901 	mov.w	r9, #1
 8010bd8:	f7ef ffa0 	bl	8000b1c <__aeabi_dcmpge>
 8010bdc:	b900      	cbnz	r0, 8010be0 <GUI_Touch_Processing+0x1320>
 8010bde:	4681      	mov	r9, r0
 8010be0:	a369      	add	r3, pc, #420	; (adr r3, 8010d88 <GUI_Touch_Processing+0x14c8>)
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	4630      	mov	r0, r6
 8010be8:	4639      	mov	r1, r7
 8010bea:	f04f 0b01 	mov.w	fp, #1
 8010bee:	f7ef ff8b 	bl	8000b08 <__aeabi_dcmple>
 8010bf2:	b900      	cbnz	r0, 8010bf6 <GUI_Touch_Processing+0x1336>
 8010bf4:	4683      	mov	fp, r0
 8010bf6:	ea09 090b 	and.w	r9, r9, fp
 8010bfa:	f019 0f01 	tst.w	r9, #1
 8010bfe:	d00f      	beq.n	8010c20 <GUI_Touch_Processing+0x1360>
 8010c00:	f1b8 0f00 	cmp.w	r8, #0
 8010c04:	d00c      	beq.n	8010c20 <GUI_Touch_Processing+0x1360>
					Measure_Field ^= PPFD_BGR;
 8010c06:	4b6f      	ldr	r3, [pc, #444]	; (8010dc4 <GUI_Touch_Processing+0x1504>)
 8010c08:	881a      	ldrh	r2, [r3, #0]
 8010c0a:	f082 0208 	eor.w	r2, r2, #8
 8010c0e:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 8010c10:	21c6      	movs	r1, #198	; 0xc6
 8010c12:	f002 0208 	and.w	r2, r2, #8
 8010c16:	20c8      	movs	r0, #200	; 0xc8
 8010c18:	f003 fa02 	bl	8014020 <GUI_CheckBox>
 8010c1c:	f7fe bede 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib) //CCT
 8010c20:	a35b      	add	r3, pc, #364	; (adr r3, 8010d90 <GUI_Touch_Processing+0x14d0>)
 8010c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c26:	4630      	mov	r0, r6
 8010c28:	4639      	mov	r1, r7
 8010c2a:	f04f 0901 	mov.w	r9, #1
 8010c2e:	f7ef ff75 	bl	8000b1c <__aeabi_dcmpge>
 8010c32:	b900      	cbnz	r0, 8010c36 <GUI_Touch_Processing+0x1376>
 8010c34:	4681      	mov	r9, r0
 8010c36:	a358      	add	r3, pc, #352	; (adr r3, 8010d98 <GUI_Touch_Processing+0x14d8>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	4639      	mov	r1, r7
 8010c40:	f04f 0b01 	mov.w	fp, #1
 8010c44:	f7ef ff60 	bl	8000b08 <__aeabi_dcmple>
 8010c48:	b900      	cbnz	r0, 8010c4c <GUI_Touch_Processing+0x138c>
 8010c4a:	4683      	mov	fp, r0
 8010c4c:	ea09 090b 	and.w	r9, r9, fp
 8010c50:	f019 0f01 	tst.w	r9, #1
 8010c54:	d010      	beq.n	8010c78 <GUI_Touch_Processing+0x13b8>
 8010c56:	f1b8 0f00 	cmp.w	r8, #0
 8010c5a:	d00d      	beq.n	8010c78 <GUI_Touch_Processing+0x13b8>
					Measure_Field ^= CCT;
 8010c5c:	4b59      	ldr	r3, [pc, #356]	; (8010dc4 <GUI_Touch_Processing+0x1504>)
 8010c5e:	881a      	ldrh	r2, [r3, #0]
 8010c60:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8010c64:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 8010c66:	f240 1107 	movw	r1, #263	; 0x107
 8010c6a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010c6e:	20c8      	movs	r0, #200	; 0xc8
 8010c70:	f003 f9d6 	bl	8014020 <GUI_CheckBox>
 8010c74:	f7fe beb2 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E
 8010c78:	a349      	add	r3, pc, #292	; (adr r3, 8010da0 <GUI_Touch_Processing+0x14e0>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	4630      	mov	r0, r6
 8010c80:	4639      	mov	r1, r7
 8010c82:	f04f 0901 	mov.w	r9, #1
 8010c86:	f7ef ff49 	bl	8000b1c <__aeabi_dcmpge>
 8010c8a:	b900      	cbnz	r0, 8010c8e <GUI_Touch_Processing+0x13ce>
 8010c8c:	4681      	mov	r9, r0
 8010c8e:	a346      	add	r3, pc, #280	; (adr r3, 8010da8 <GUI_Touch_Processing+0x14e8>)
 8010c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c94:	4630      	mov	r0, r6
 8010c96:	4639      	mov	r1, r7
 8010c98:	f04f 0b01 	mov.w	fp, #1
 8010c9c:	f7ef ff34 	bl	8000b08 <__aeabi_dcmple>
 8010ca0:	b900      	cbnz	r0, 8010ca4 <GUI_Touch_Processing+0x13e4>
 8010ca2:	4683      	mov	fp, r0
 8010ca4:	ea09 090b 	and.w	r9, r9, fp
 8010ca8:	fa5f f689 	uxtb.w	r6, r9
 8010cac:	f1b8 0f00 	cmp.w	r8, #0
 8010cb0:	d017      	beq.n	8010ce2 <GUI_Touch_Processing+0x1422>
 8010cb2:	b1b6      	cbz	r6, 8010ce2 <GUI_Touch_Processing+0x1422>
					Measure_Field ^= delta_E;
 8010cb4:	4c43      	ldr	r4, [pc, #268]	; (8010dc4 <GUI_Touch_Processing+0x1504>)
 8010cb6:	8822      	ldrh	r2, [r4, #0]
 8010cb8:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 8010cbc:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 8010cbe:	f240 1147 	movw	r1, #327	; 0x147
 8010cc2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010cc6:	20c8      	movs	r0, #200	; 0xc8
 8010cc8:	f003 f9aa 	bl	8014020 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 8010ccc:	8822      	ldrh	r2, [r4, #0]
 8010cce:	2300      	movs	r3, #0
 8010cd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010cd4:	f240 1147 	movw	r1, #327	; 0x147
 8010cd8:	2082      	movs	r0, #130	; 0x82
 8010cda:	f003 f881 	bl	8013de0 <GUI_Button_Measure_deltaE_Small>
 8010cde:	f7fe be7d 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				else	if(Touch_x >= 130*TS_Callib & Touch_x <= (200+38)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E_measure_small
 8010ce2:	a333      	add	r3, pc, #204	; (adr r3, 8010db0 <GUI_Touch_Processing+0x14f0>)
 8010ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4629      	mov	r1, r5
 8010cec:	f04f 0701 	mov.w	r7, #1
 8010cf0:	f7ef ff14 	bl	8000b1c <__aeabi_dcmpge>
 8010cf4:	b900      	cbnz	r0, 8010cf8 <GUI_Touch_Processing+0x1438>
 8010cf6:	4607      	mov	r7, r0
 8010cf8:	a32f      	add	r3, pc, #188	; (adr r3, 8010db8 <GUI_Touch_Processing+0x14f8>)
 8010cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfe:	4620      	mov	r0, r4
 8010d00:	4629      	mov	r1, r5
 8010d02:	f04f 0801 	mov.w	r8, #1
 8010d06:	f7ef feff 	bl	8000b08 <__aeabi_dcmple>
 8010d0a:	b900      	cbnz	r0, 8010d0e <GUI_Touch_Processing+0x144e>
 8010d0c:	4680      	mov	r8, r0
 8010d0e:	ea07 0308 	and.w	r3, r7, r8
 8010d12:	07df      	lsls	r7, r3, #31
 8010d14:	d562      	bpl.n	8010ddc <GUI_Touch_Processing+0x151c>
 8010d16:	2e00      	cmp	r6, #0
 8010d18:	d060      	beq.n	8010ddc <GUI_Touch_Processing+0x151c>
					if(Measure_Field&delta_E)
 8010d1a:	4c2a      	ldr	r4, [pc, #168]	; (8010dc4 <GUI_Touch_Processing+0x1504>)
 8010d1c:	8823      	ldrh	r3, [r4, #0]
 8010d1e:	0518      	lsls	r0, r3, #20
 8010d20:	f57e ae5c 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
						Calculate_Lab(colorimetry_XYZ, Measure_Color_xy, Source_Type);
 8010d24:	4b28      	ldr	r3, [pc, #160]	; (8010dc8 <GUI_Touch_Processing+0x1508>)
 8010d26:	4829      	ldr	r0, [pc, #164]	; (8010dcc <GUI_Touch_Processing+0x150c>)
 8010d28:	781a      	ldrb	r2, [r3, #0]
 8010d2a:	4b29      	ldr	r3, [pc, #164]	; (8010dd0 <GUI_Touch_Processing+0x1510>)
 8010d2c:	7819      	ldrb	r1, [r3, #0]
 8010d2e:	f7fc fc23 	bl	800d578 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 8010d32:	4a28      	ldr	r2, [pc, #160]	; (8010dd4 <GUI_Touch_Processing+0x1514>)
 8010d34:	4b28      	ldr	r3, [pc, #160]	; (8010dd8 <GUI_Touch_Processing+0x1518>)
 8010d36:	8811      	ldrh	r1, [r2, #0]
 8010d38:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8010d3a:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 8010d3c:	8892      	ldrh	r2, [r2, #4]
 8010d3e:	809a      	strh	r2, [r3, #4]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8010d40:	8822      	ldrh	r2, [r4, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8010d42:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8010d44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010d48:	2301      	movs	r3, #1
 8010d4a:	f240 1147 	movw	r1, #327	; 0x147
 8010d4e:	2082      	movs	r0, #130	; 0x82
 8010d50:	f003 f846 	bl	8013de0 <GUI_Button_Measure_deltaE_Small>
 8010d54:	f7fe be42 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8010d58:	cccccccd 	.word	0xcccccccd
 8010d5c:	408508cc 	.word	0x408508cc
 8010d60:	00000000 	.word	0x00000000
 8010d64:	40673000 	.word	0x40673000
 8010d68:	99999999 	.word	0x99999999
 8010d6c:	40748999 	.word	0x40748999
 8010d70:	33333333 	.word	0x33333333
 8010d74:	40760733 	.word	0x40760733
 8010d78:	cccccccd 	.word	0xcccccccd
 8010d7c:	407ef8cc 	.word	0x407ef8cc
 8010d80:	99999999 	.word	0x99999999
 8010d84:	40806599 	.word	0x40806599
 8010d88:	66666666 	.word	0x66666666
 8010d8c:	4084de66 	.word	0x4084de66
 8010d90:	99999999 	.word	0x99999999
 8010d94:	4085c799 	.word	0x4085c799
 8010d98:	66666666 	.word	0x66666666
 8010d9c:	408a4066 	.word	0x408a4066
 8010da0:	66666666 	.word	0x66666666
 8010da4:	408b1466 	.word	0x408b1466
 8010da8:	33333333 	.word	0x33333333
 8010dac:	408f8d33 	.word	0x408f8d33
 8010db0:	00000000 	.word	0x00000000
 8010db4:	40758800 	.word	0x40758800
 8010db8:	99999999 	.word	0x99999999
 8010dbc:	4083b599 	.word	0x4083b599
 8010dc0:	40809000 	.word	0x40809000
 8010dc4:	20004ca6 	.word	0x20004ca6
 8010dc8:	2008acd9 	.word	0x2008acd9
 8010dcc:	2008a7de 	.word	0x2008a7de
 8010dd0:	20004ca4 	.word	0x20004ca4
 8010dd4:	2008a7d8 	.word	0x2008a7d8
 8010dd8:	2008b268 	.word	0x2008b268
 8010ddc:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8010dde:	4620      	mov	r0, r4
 8010de0:	ea0a 0703 	and.w	r7, sl, r3
 8010de4:	4629      	mov	r1, r5
 8010de6:	a3be      	add	r3, pc, #760	; (adr r3, 80110e0 <GUI_Touch_Processing+0x1820>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	f04f 0601 	mov.w	r6, #1
 8010df0:	f7ef fe94 	bl	8000b1c <__aeabi_dcmpge>
 8010df4:	b900      	cbnz	r0, 8010df8 <GUI_Touch_Processing+0x1538>
 8010df6:	4606      	mov	r6, r0
 8010df8:	a39f      	add	r3, pc, #636	; (adr r3, 8011078 <GUI_Touch_Processing+0x17b8>)
 8010dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f04f 0801 	mov.w	r8, #1
 8010e06:	f7ef fe7f 	bl	8000b08 <__aeabi_dcmple>
 8010e0a:	b900      	cbnz	r0, 8010e0e <GUI_Touch_Processing+0x154e>
 8010e0c:	4680      	mov	r8, r0
 8010e0e:	ea06 0308 	and.w	r3, r6, r8
 8010e12:	07d9      	lsls	r1, r3, #31
 8010e14:	d523      	bpl.n	8010e5e <GUI_Touch_Processing+0x159e>
 8010e16:	b317      	cbz	r7, 8010e5e <GUI_Touch_Processing+0x159e>
					WriteSDFLASH_t(sdfile_cnt);
 8010e18:	4ba9      	ldr	r3, [pc, #676]	; (80110c0 <GUI_Touch_Processing+0x1800>)
 8010e1a:	2100      	movs	r1, #0
 8010e1c:	8818      	ldrh	r0, [r3, #0]
 8010e1e:	f008 fa5f 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8010e22:	4ba8      	ldr	r3, [pc, #672]	; (80110c4 <GUI_Touch_Processing+0x1804>)
 8010e24:	781a      	ldrb	r2, [r3, #0]
 8010e26:	4ba8      	ldr	r3, [pc, #672]	; (80110c8 <GUI_Touch_Processing+0x1808>)
					switch (Prev_Inf_Screen){
 8010e28:	1e51      	subs	r1, r2, #1
 8010e2a:	2905      	cmp	r1, #5
 8010e2c:	d804      	bhi.n	8010e38 <GUI_Touch_Processing+0x1578>
 8010e2e:	e8df f001 	tbb	[pc, r1]
 8010e32:	0306      	.short	0x0306
 8010e34:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8010e38:	701a      	strb	r2, [r3, #0]
 8010e3a:	f7fe bdcf 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8010e3e:	2201      	movs	r2, #1
 8010e40:	701a      	strb	r2, [r3, #0]
 8010e42:	f7fe bdcb 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8010e46:	2204      	movs	r2, #4
 8010e48:	701a      	strb	r2, [r3, #0]
 8010e4a:	f7fe bdc7 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8010e4e:	2206      	movs	r2, #6
 8010e50:	701a      	strb	r2, [r3, #0]
 8010e52:	f7fe bdc3 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8010e56:	2205      	movs	r2, #5
 8010e58:	701a      	strb	r2, [r3, #0]
 8010e5a:	f7fe bdbf 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8010e5e:	a382      	add	r3, pc, #520	; (adr r3, 8011068 <GUI_Touch_Processing+0x17a8>)
 8010e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e64:	4620      	mov	r0, r4
 8010e66:	4629      	mov	r1, r5
 8010e68:	f04f 0601 	mov.w	r6, #1
 8010e6c:	f7ef fe56 	bl	8000b1c <__aeabi_dcmpge>
 8010e70:	b900      	cbnz	r0, 8010e74 <GUI_Touch_Processing+0x15b4>
 8010e72:	4606      	mov	r6, r0
 8010e74:	a37e      	add	r3, pc, #504	; (adr r3, 8011070 <GUI_Touch_Processing+0x17b0>)
 8010e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	4629      	mov	r1, r5
 8010e7e:	f04f 0801 	mov.w	r8, #1
 8010e82:	f7ef fe41 	bl	8000b08 <__aeabi_dcmple>
 8010e86:	b900      	cbnz	r0, 8010e8a <GUI_Touch_Processing+0x15ca>
 8010e88:	4680      	mov	r8, r0
 8010e8a:	ea06 0308 	and.w	r3, r6, r8
 8010e8e:	07da      	lsls	r2, r3, #31
 8010e90:	d502      	bpl.n	8010e98 <GUI_Touch_Processing+0x15d8>
 8010e92:	2f00      	cmp	r7, #0
 8010e94:	f47f ad67 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8010e98:	a377      	add	r3, pc, #476	; (adr r3, 8011078 <GUI_Touch_Processing+0x17b8>)
 8010e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	4629      	mov	r1, r5
 8010ea2:	f04f 0601 	mov.w	r6, #1
 8010ea6:	f7ef fe39 	bl	8000b1c <__aeabi_dcmpge>
 8010eaa:	b900      	cbnz	r0, 8010eae <GUI_Touch_Processing+0x15ee>
 8010eac:	4606      	mov	r6, r0
 8010eae:	a374      	add	r3, pc, #464	; (adr r3, 8011080 <GUI_Touch_Processing+0x17c0>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	f04f 0701 	mov.w	r7, #1
 8010ebc:	f7ef fe24 	bl	8000b08 <__aeabi_dcmple>
 8010ec0:	b900      	cbnz	r0, 8010ec4 <GUI_Touch_Processing+0x1604>
 8010ec2:	4607      	mov	r7, r0
 8010ec4:	403e      	ands	r6, r7
 8010ec6:	ea1a 0f06 	tst.w	sl, r6
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8010eca:	f43e ad87 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
 8010ece:	9b00      	ldr	r3, [sp, #0]
 8010ed0:	e579      	b.n	80109c6 <GUI_Touch_Processing+0x1106>
					preGUI_screen_state = GUI_screen_state;
 8010ed2:	4b7e      	ldr	r3, [pc, #504]	; (80110cc <GUI_Touch_Processing+0x180c>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 8010ed4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8010ed8:	2209      	movs	r2, #9
 8010eda:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 8010edc:	f7ef fb32 	bl	8000544 <__aeabi_i2d>
 8010ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8010ee4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010ee8:	f7ef fb2c 	bl	8000544 <__aeabi_i2d>
 8010eec:	a366      	add	r3, pc, #408	; (adr r3, 8011088 <GUI_Touch_Processing+0x17c8>)
 8010eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	460d      	mov	r5, r1
 8010ef6:	f04f 0801 	mov.w	r8, #1
 8010efa:	f7ef fe0f 	bl	8000b1c <__aeabi_dcmpge>
 8010efe:	b900      	cbnz	r0, 8010f02 <GUI_Touch_Processing+0x1642>
 8010f00:	4680      	mov	r8, r0
 8010f02:	2200      	movs	r2, #0
 8010f04:	4b72      	ldr	r3, [pc, #456]	; (80110d0 <GUI_Touch_Processing+0x1810>)
 8010f06:	4620      	mov	r0, r4
 8010f08:	4629      	mov	r1, r5
 8010f0a:	fa5f f888 	uxtb.w	r8, r8
 8010f0e:	f04f 0701 	mov.w	r7, #1
 8010f12:	f7ef fdf9 	bl	8000b08 <__aeabi_dcmple>
 8010f16:	b900      	cbnz	r0, 8010f1a <GUI_Touch_Processing+0x165a>
 8010f18:	4607      	mov	r7, r0
 8010f1a:	a35d      	add	r3, pc, #372	; (adr r3, 8011090 <GUI_Touch_Processing+0x17d0>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f24:	b2ff      	uxtb	r7, r7
 8010f26:	f04f 0601 	mov.w	r6, #1
 8010f2a:	f7ef fdf7 	bl	8000b1c <__aeabi_dcmpge>
 8010f2e:	b900      	cbnz	r0, 8010f32 <GUI_Touch_Processing+0x1672>
 8010f30:	4606      	mov	r6, r0
 8010f32:	a34d      	add	r3, pc, #308	; (adr r3, 8011068 <GUI_Touch_Processing+0x17a8>)
 8010f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f3c:	f04f 0901 	mov.w	r9, #1
 8010f40:	f7ef fde2 	bl	8000b08 <__aeabi_dcmple>
 8010f44:	b900      	cbnz	r0, 8010f48 <GUI_Touch_Processing+0x1688>
 8010f46:	4681      	mov	r9, r0
 8010f48:	ea06 0609 	and.w	r6, r6, r9
 8010f4c:	ea18 0f06 	tst.w	r8, r6
 8010f50:	d005      	beq.n	8010f5e <GUI_Touch_Processing+0x169e>
 8010f52:	b127      	cbz	r7, 8010f5e <GUI_Touch_Processing+0x169e>
					GUI_screen_state = DataSet4_Screen;
 8010f54:	230a      	movs	r3, #10
 8010f56:	f88b 3000 	strb.w	r3, [fp]
 8010f5a:	f7fe bd3f 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //CIE_XYZ
 8010f5e:	2200      	movs	r2, #0
 8010f60:	4b5c      	ldr	r3, [pc, #368]	; (80110d4 <GUI_Touch_Processing+0x1814>)
 8010f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f66:	f04f 0601 	mov.w	r6, #1
 8010f6a:	f7ef fdd7 	bl	8000b1c <__aeabi_dcmpge>
 8010f6e:	b900      	cbnz	r0, 8010f72 <GUI_Touch_Processing+0x16b2>
 8010f70:	4606      	mov	r6, r0
 8010f72:	a349      	add	r3, pc, #292	; (adr r3, 8011098 <GUI_Touch_Processing+0x17d8>)
 8010f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f7c:	f04f 0901 	mov.w	r9, #1
 8010f80:	f7ef fdc2 	bl	8000b08 <__aeabi_dcmple>
 8010f84:	b900      	cbnz	r0, 8010f88 <GUI_Touch_Processing+0x16c8>
 8010f86:	4681      	mov	r9, r0
 8010f88:	ea06 0609 	and.w	r6, r6, r9
 8010f8c:	a344      	add	r3, pc, #272	; (adr r3, 80110a0 <GUI_Touch_Processing+0x17e0>)
 8010f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f92:	4620      	mov	r0, r4
 8010f94:	4629      	mov	r1, r5
 8010f96:	b2f6      	uxtb	r6, r6
 8010f98:	f04f 0901 	mov.w	r9, #1
 8010f9c:	f7ef fdbe 	bl	8000b1c <__aeabi_dcmpge>
 8010fa0:	b900      	cbnz	r0, 8010fa4 <GUI_Touch_Processing+0x16e4>
 8010fa2:	4681      	mov	r9, r0
 8010fa4:	a340      	add	r3, pc, #256	; (adr r3, 80110a8 <GUI_Touch_Processing+0x17e8>)
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	4620      	mov	r0, r4
 8010fac:	4629      	mov	r1, r5
 8010fae:	f04f 0a01 	mov.w	sl, #1
 8010fb2:	f7ef fda9 	bl	8000b08 <__aeabi_dcmple>
 8010fb6:	b900      	cbnz	r0, 8010fba <GUI_Touch_Processing+0x16fa>
 8010fb8:	4682      	mov	sl, r0
 8010fba:	ea09 090a 	and.w	r9, r9, sl
 8010fbe:	f019 0f01 	tst.w	r9, #1
 8010fc2:	d00d      	beq.n	8010fe0 <GUI_Touch_Processing+0x1720>
 8010fc4:	b166      	cbz	r6, 8010fe0 <GUI_Touch_Processing+0x1720>
					Measure_Field ^= CIE_XYZ;
 8010fc6:	4b44      	ldr	r3, [pc, #272]	; (80110d8 <GUI_Touch_Processing+0x1818>)
 8010fc8:	881a      	ldrh	r2, [r3, #0]
 8010fca:	f082 0210 	eor.w	r2, r2, #16
 8010fce:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8010fd0:	2146      	movs	r1, #70	; 0x46
 8010fd2:	f002 0210 	and.w	r2, r2, #16
 8010fd6:	20c8      	movs	r0, #200	; 0xc8
 8010fd8:	f003 f822 	bl	8014020 <GUI_CheckBox>
 8010fdc:	f7fe bcfe 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //CIE_xy
 8010fe0:	a333      	add	r3, pc, #204	; (adr r3, 80110b0 <GUI_Touch_Processing+0x17f0>)
 8010fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	4629      	mov	r1, r5
 8010fea:	f04f 0901 	mov.w	r9, #1
 8010fee:	f7ef fd95 	bl	8000b1c <__aeabi_dcmpge>
 8010ff2:	b900      	cbnz	r0, 8010ff6 <GUI_Touch_Processing+0x1736>
 8010ff4:	4681      	mov	r9, r0
 8010ff6:	a330      	add	r3, pc, #192	; (adr r3, 80110b8 <GUI_Touch_Processing+0x17f8>)
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	4629      	mov	r1, r5
 8011000:	f04f 0a01 	mov.w	sl, #1
 8011004:	f7ef fd80 	bl	8000b08 <__aeabi_dcmple>
 8011008:	b900      	cbnz	r0, 801100c <GUI_Touch_Processing+0x174c>
 801100a:	4682      	mov	sl, r0
 801100c:	ea09 090a 	and.w	r9, r9, sl
 8011010:	f019 0f01 	tst.w	r9, #1
 8011014:	d068      	beq.n	80110e8 <GUI_Touch_Processing+0x1828>
 8011016:	2e00      	cmp	r6, #0
 8011018:	d066      	beq.n	80110e8 <GUI_Touch_Processing+0x1828>
					Measure_Field ^= CIE_xy;
 801101a:	4c2f      	ldr	r4, [pc, #188]	; (80110d8 <GUI_Touch_Processing+0x1818>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 801101c:	4d2f      	ldr	r5, [pc, #188]	; (80110dc <GUI_Touch_Processing+0x181c>)
					Measure_Field ^= CIE_xy;
 801101e:	8822      	ldrh	r2, [r4, #0]
 8011020:	f082 0220 	eor.w	r2, r2, #32
 8011024:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 8011026:	2185      	movs	r1, #133	; 0x85
 8011028:	f002 0220 	and.w	r2, r2, #32
 801102c:	20c8      	movs	r0, #200	; 0xc8
 801102e:	f002 fff7 	bl	8014020 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011032:	8823      	ldrh	r3, [r4, #0]
 8011034:	782a      	ldrb	r2, [r5, #0]
 8011036:	f003 0320 	and.w	r3, r3, #32
 801103a:	f002 0201 	and.w	r2, r2, #1
 801103e:	21c6      	movs	r1, #198	; 0xc6
 8011040:	20c8      	movs	r0, #200	; 0xc8
 8011042:	f003 f82e 	bl	80140a2 <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 8011046:	782a      	ldrb	r2, [r5, #0]
 8011048:	8823      	ldrh	r3, [r4, #0]
 801104a:	43d2      	mvns	r2, r2
 801104c:	f003 0320 	and.w	r3, r3, #32
 8011050:	f002 0201 	and.w	r2, r2, #1
 8011054:	f240 1107 	movw	r1, #263	; 0x107
 8011058:	20c8      	movs	r0, #200	; 0xc8
 801105a:	f003 f822 	bl	80140a2 <GUI_RadioBox>
 801105e:	f7fe bcbd 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8011062:	bf00      	nop
 8011064:	f3af 8000 	nop.w
 8011068:	66666666 	.word	0x66666666
 801106c:	4081f866 	.word	0x4081f866
 8011070:	33333333 	.word	0x33333333
 8011074:	40867133 	.word	0x40867133
 8011078:	00000000 	.word	0x00000000
 801107c:	40623800 	.word	0x40623800
 8011080:	99999999 	.word	0x99999999
 8011084:	40720d99 	.word	0x40720d99
 8011088:	99999999 	.word	0x99999999
 801108c:	4091a399 	.word	0x4091a399
 8011090:	33333333 	.word	0x33333333
 8011094:	407aff33 	.word	0x407aff33
 8011098:	cccccccd 	.word	0xcccccccd
 801109c:	408508cc 	.word	0x408508cc
 80110a0:	00000000 	.word	0x00000000
 80110a4:	40673000 	.word	0x40673000
 80110a8:	99999999 	.word	0x99999999
 80110ac:	40748999 	.word	0x40748999
 80110b0:	33333333 	.word	0x33333333
 80110b4:	40760733 	.word	0x40760733
 80110b8:	cccccccd 	.word	0xcccccccd
 80110bc:	407ef8cc 	.word	0x407ef8cc
 80110c0:	20004ccc 	.word	0x20004ccc
 80110c4:	2008acd5 	.word	0x2008acd5
 80110c8:	20004ca1 	.word	0x20004ca1
 80110cc:	20000232 	.word	0x20000232
 80110d0:	4093e000 	.word	0x4093e000
 80110d4:	40809000 	.word	0x40809000
 80110d8:	20004ca6 	.word	0x20004ca6
 80110dc:	20004ca4 	.word	0x20004ca4
 80110e0:	33333333 	.word	0x33333333
 80110e4:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //CIE_Luv
 80110e8:	a3cd      	add	r3, pc, #820	; (adr r3, 8011420 <GUI_Touch_Processing+0x1b60>)
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	4620      	mov	r0, r4
 80110f0:	4629      	mov	r1, r5
 80110f2:	f04f 0901 	mov.w	r9, #1
 80110f6:	f7ef fd11 	bl	8000b1c <__aeabi_dcmpge>
 80110fa:	b900      	cbnz	r0, 80110fe <GUI_Touch_Processing+0x183e>
 80110fc:	4681      	mov	r9, r0
 80110fe:	a3ca      	add	r3, pc, #808	; (adr r3, 8011428 <GUI_Touch_Processing+0x1b68>)
 8011100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011104:	4620      	mov	r0, r4
 8011106:	4629      	mov	r1, r5
 8011108:	f04f 0a01 	mov.w	sl, #1
 801110c:	f7ef fcfc 	bl	8000b08 <__aeabi_dcmple>
 8011110:	b900      	cbnz	r0, 8011114 <GUI_Touch_Processing+0x1854>
 8011112:	4682      	mov	sl, r0
 8011114:	ea09 090a 	and.w	r9, r9, sl
 8011118:	f019 0f01 	tst.w	r9, #1
 801111c:	d00e      	beq.n	801113c <GUI_Touch_Processing+0x187c>
 801111e:	b16e      	cbz	r6, 801113c <GUI_Touch_Processing+0x187c>
					Measure_Field ^= CIE_Luv;
 8011120:	4bb9      	ldr	r3, [pc, #740]	; (8011408 <GUI_Touch_Processing+0x1b48>)
 8011122:	881a      	ldrh	r2, [r3, #0]
 8011124:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8011128:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 801112a:	f240 1147 	movw	r1, #327	; 0x147
 801112e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8011132:	20c8      	movs	r0, #200	; 0xc8
 8011134:	f002 ff74 	bl	8014020 <GUI_CheckBox>
 8011138:	f7fe bc50 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1931
 801113c:	a39c      	add	r3, pc, #624	; (adr r3, 80113b0 <GUI_Touch_Processing+0x1af0>)
 801113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011142:	4620      	mov	r0, r4
 8011144:	4629      	mov	r1, r5
 8011146:	f04f 0901 	mov.w	r9, #1
 801114a:	f7ef fce7 	bl	8000b1c <__aeabi_dcmpge>
 801114e:	b900      	cbnz	r0, 8011152 <GUI_Touch_Processing+0x1892>
 8011150:	4681      	mov	r9, r0
 8011152:	ea16 0f09 	tst.w	r6, r9
 8011156:	d02a      	beq.n	80111ae <GUI_Touch_Processing+0x18ee>
 8011158:	a397      	add	r3, pc, #604	; (adr r3, 80113b8 <GUI_Touch_Processing+0x1af8>)
 801115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115e:	4620      	mov	r0, r4
 8011160:	4629      	mov	r1, r5
 8011162:	f04f 0901 	mov.w	r9, #1
 8011166:	f7ef fccf 	bl	8000b08 <__aeabi_dcmple>
 801116a:	b900      	cbnz	r0, 801116e <GUI_Touch_Processing+0x18ae>
 801116c:	4681      	mov	r9, r0
 801116e:	f019 0fff 	tst.w	r9, #255	; 0xff
 8011172:	d01c      	beq.n	80111ae <GUI_Touch_Processing+0x18ee>
 8011174:	4ba4      	ldr	r3, [pc, #656]	; (8011408 <GUI_Touch_Processing+0x1b48>)
 8011176:	881b      	ldrh	r3, [r3, #0]
 8011178:	069b      	lsls	r3, r3, #26
 801117a:	d518      	bpl.n	80111ae <GUI_Touch_Processing+0x18ee>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 801117c:	4ca3      	ldr	r4, [pc, #652]	; (801140c <GUI_Touch_Processing+0x1b4c>)
 801117e:	7822      	ldrb	r2, [r4, #0]
 8011180:	07d5      	lsls	r5, r2, #31
 8011182:	f53e ac2b 	bmi.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8011186:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8011188:	f082 0201 	eor.w	r2, r2, #1
 801118c:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 801118e:	21c6      	movs	r1, #198	; 0xc6
 8011190:	401a      	ands	r2, r3
 8011192:	20c8      	movs	r0, #200	; 0xc8
 8011194:	f002 ff85 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8011198:	7822      	ldrb	r2, [r4, #0]
 801119a:	2301      	movs	r3, #1
 801119c:	43d2      	mvns	r2, r2
 801119e:	401a      	ands	r2, r3
 80111a0:	f240 1107 	movw	r1, #263	; 0x107
 80111a4:	20c8      	movs	r0, #200	; 0xc8
 80111a6:	f002 ff7c 	bl	80140a2 <GUI_RadioBox>
 80111aa:	f7fe bc17 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1964
 80111ae:	a384      	add	r3, pc, #528	; (adr r3, 80113c0 <GUI_Touch_Processing+0x1b00>)
 80111b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b4:	4620      	mov	r0, r4
 80111b6:	4629      	mov	r1, r5
 80111b8:	f04f 0901 	mov.w	r9, #1
 80111bc:	f7ef fcae 	bl	8000b1c <__aeabi_dcmpge>
 80111c0:	b900      	cbnz	r0, 80111c4 <GUI_Touch_Processing+0x1904>
 80111c2:	4681      	mov	r9, r0
 80111c4:	ea16 0f09 	tst.w	r6, r9
 80111c8:	d02a      	beq.n	8011220 <GUI_Touch_Processing+0x1960>
 80111ca:	a37f      	add	r3, pc, #508	; (adr r3, 80113c8 <GUI_Touch_Processing+0x1b08>)
 80111cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d0:	4620      	mov	r0, r4
 80111d2:	4629      	mov	r1, r5
 80111d4:	f04f 0601 	mov.w	r6, #1
 80111d8:	f7ef fc96 	bl	8000b08 <__aeabi_dcmple>
 80111dc:	b900      	cbnz	r0, 80111e0 <GUI_Touch_Processing+0x1920>
 80111de:	4606      	mov	r6, r0
 80111e0:	f016 0fff 	tst.w	r6, #255	; 0xff
 80111e4:	d01c      	beq.n	8011220 <GUI_Touch_Processing+0x1960>
 80111e6:	4b88      	ldr	r3, [pc, #544]	; (8011408 <GUI_Touch_Processing+0x1b48>)
 80111e8:	881b      	ldrh	r3, [r3, #0]
 80111ea:	069c      	lsls	r4, r3, #26
 80111ec:	d518      	bpl.n	8011220 <GUI_Touch_Processing+0x1960>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 80111ee:	4c87      	ldr	r4, [pc, #540]	; (801140c <GUI_Touch_Processing+0x1b4c>)
 80111f0:	7822      	ldrb	r2, [r4, #0]
 80111f2:	07d0      	lsls	r0, r2, #31
 80111f4:	f57e abf2 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80111f8:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 80111fa:	f082 0201 	eor.w	r2, r2, #1
 80111fe:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8011200:	21c6      	movs	r1, #198	; 0xc6
 8011202:	401a      	ands	r2, r3
 8011204:	20c8      	movs	r0, #200	; 0xc8
 8011206:	f002 ff4c 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 801120a:	7822      	ldrb	r2, [r4, #0]
 801120c:	2301      	movs	r3, #1
 801120e:	43d2      	mvns	r2, r2
 8011210:	401a      	ands	r2, r3
 8011212:	f240 1107 	movw	r1, #263	; 0x107
 8011216:	20c8      	movs	r0, #200	; 0xc8
 8011218:	f002 ff43 	bl	80140a2 <GUI_RadioBox>
 801121c:	f7fe bbde 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8011220:	a36b      	add	r3, pc, #428	; (adr r3, 80113d0 <GUI_Touch_Processing+0x1b10>)
 8011222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011226:	e9dd 0100 	ldrd	r0, r1, [sp]
 801122a:	ea08 0407 	and.w	r4, r8, r7
 801122e:	f04f 0501 	mov.w	r5, #1
 8011232:	f7ef fc73 	bl	8000b1c <__aeabi_dcmpge>
 8011236:	b900      	cbnz	r0, 801123a <GUI_Touch_Processing+0x197a>
 8011238:	4605      	mov	r5, r0
 801123a:	a367      	add	r3, pc, #412	; (adr r3, 80113d8 <GUI_Touch_Processing+0x1b18>)
 801123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011244:	f04f 0601 	mov.w	r6, #1
 8011248:	f7ef fc5e 	bl	8000b08 <__aeabi_dcmple>
 801124c:	b900      	cbnz	r0, 8011250 <GUI_Touch_Processing+0x1990>
 801124e:	4606      	mov	r6, r0
 8011250:	ea05 0306 	and.w	r3, r5, r6
 8011254:	07d9      	lsls	r1, r3, #31
 8011256:	d502      	bpl.n	801125e <GUI_Touch_Processing+0x199e>
 8011258:	2c00      	cmp	r4, #0
 801125a:	f47f ab84 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 801125e:	a360      	add	r3, pc, #384	; (adr r3, 80113e0 <GUI_Touch_Processing+0x1b20>)
 8011260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011268:	f04f 0501 	mov.w	r5, #1
 801126c:	f7ef fc56 	bl	8000b1c <__aeabi_dcmpge>
 8011270:	b900      	cbnz	r0, 8011274 <GUI_Touch_Processing+0x19b4>
 8011272:	4605      	mov	r5, r0
 8011274:	a35c      	add	r3, pc, #368	; (adr r3, 80113e8 <GUI_Touch_Processing+0x1b28>)
 8011276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801127e:	f04f 0601 	mov.w	r6, #1
 8011282:	f7ef fc41 	bl	8000b08 <__aeabi_dcmple>
 8011286:	b900      	cbnz	r0, 801128a <GUI_Touch_Processing+0x19ca>
 8011288:	4606      	mov	r6, r0
 801128a:	ea05 0306 	and.w	r3, r5, r6
 801128e:	07da      	lsls	r2, r3, #31
 8011290:	d527      	bpl.n	80112e2 <GUI_Touch_Processing+0x1a22>
 8011292:	b334      	cbz	r4, 80112e2 <GUI_Touch_Processing+0x1a22>
					WriteSDFLASH_t(sdfile_cnt);
 8011294:	4b5e      	ldr	r3, [pc, #376]	; (8011410 <GUI_Touch_Processing+0x1b50>)
 8011296:	2100      	movs	r1, #0
 8011298:	8818      	ldrh	r0, [r3, #0]
 801129a:	f008 f821 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801129e:	4b5d      	ldr	r3, [pc, #372]	; (8011414 <GUI_Touch_Processing+0x1b54>)
 80112a0:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80112a2:	1e5a      	subs	r2, r3, #1
 80112a4:	2a05      	cmp	r2, #5
 80112a6:	d804      	bhi.n	80112b2 <GUI_Touch_Processing+0x19f2>
 80112a8:	e8df f002 	tbb	[pc, r2]
 80112ac:	0c030307 	.word	0x0c030307
 80112b0:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 80112b2:	f88b 3000 	strb.w	r3, [fp]
 80112b6:	f7fe bb91 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80112ba:	2301      	movs	r3, #1
 80112bc:	f88b 3000 	strb.w	r3, [fp]
 80112c0:	f7fe bb8c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80112c4:	2304      	movs	r3, #4
 80112c6:	f88b 3000 	strb.w	r3, [fp]
 80112ca:	f7fe bb87 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80112ce:	2306      	movs	r3, #6
 80112d0:	f88b 3000 	strb.w	r3, [fp]
 80112d4:	f7fe bb82 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80112d8:	2305      	movs	r3, #5
 80112da:	f88b 3000 	strb.w	r3, [fp]
 80112de:	f7fe bb7d 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80112e2:	a341      	add	r3, pc, #260	; (adr r3, 80113e8 <GUI_Touch_Processing+0x1b28>)
 80112e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112ec:	f04f 0401 	mov.w	r4, #1
 80112f0:	f7ef fc14 	bl	8000b1c <__aeabi_dcmpge>
 80112f4:	b900      	cbnz	r0, 80112f8 <GUI_Touch_Processing+0x1a38>
 80112f6:	4604      	mov	r4, r0
 80112f8:	a33d      	add	r3, pc, #244	; (adr r3, 80113f0 <GUI_Touch_Processing+0x1b30>)
 80112fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011302:	f04f 0501 	mov.w	r5, #1
 8011306:	f7ef fbff 	bl	8000b08 <__aeabi_dcmple>
 801130a:	b900      	cbnz	r0, 801130e <GUI_Touch_Processing+0x1a4e>
 801130c:	4605      	mov	r5, r0
 801130e:	402c      	ands	r4, r5
 8011310:	ea18 0f04 	tst.w	r8, r4
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011314:	f43e ab62 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
 8011318:	2f00      	cmp	r7, #0
 801131a:	f47e ab9f 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
 801131e:	f7fe bb5d 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8011322:	4b3d      	ldr	r3, [pc, #244]	; (8011418 <GUI_Touch_Processing+0x1b58>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 8011324:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8011328:	220a      	movs	r2, #10
 801132a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 801132c:	f7ef f90a 	bl	8000544 <__aeabi_i2d>
 8011330:	4680      	mov	r8, r0
 8011332:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011336:	4689      	mov	r9, r1
 8011338:	f7ef f904 	bl	8000544 <__aeabi_i2d>
 801133c:	a32e      	add	r3, pc, #184	; (adr r3, 80113f8 <GUI_Touch_Processing+0x1b38>)
 801133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011342:	4604      	mov	r4, r0
 8011344:	460d      	mov	r5, r1
 8011346:	f04f 0701 	mov.w	r7, #1
 801134a:	f7ef fbe7 	bl	8000b1c <__aeabi_dcmpge>
 801134e:	b900      	cbnz	r0, 8011352 <GUI_Touch_Processing+0x1a92>
 8011350:	4607      	mov	r7, r0
 8011352:	2200      	movs	r2, #0
 8011354:	4b31      	ldr	r3, [pc, #196]	; (801141c <GUI_Touch_Processing+0x1b5c>)
 8011356:	4620      	mov	r0, r4
 8011358:	4629      	mov	r1, r5
 801135a:	b2ff      	uxtb	r7, r7
 801135c:	f04f 0601 	mov.w	r6, #1
 8011360:	f7ef fbd2 	bl	8000b08 <__aeabi_dcmple>
 8011364:	b900      	cbnz	r0, 8011368 <GUI_Touch_Processing+0x1aa8>
 8011366:	4606      	mov	r6, r0
 8011368:	b2f3      	uxtb	r3, r6
 801136a:	9300      	str	r3, [sp, #0]
 801136c:	4640      	mov	r0, r8
 801136e:	a324      	add	r3, pc, #144	; (adr r3, 8011400 <GUI_Touch_Processing+0x1b40>)
 8011370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011374:	4649      	mov	r1, r9
 8011376:	f04f 0601 	mov.w	r6, #1
 801137a:	f7ef fbcf 	bl	8000b1c <__aeabi_dcmpge>
 801137e:	b900      	cbnz	r0, 8011382 <GUI_Touch_Processing+0x1ac2>
 8011380:	4606      	mov	r6, r0
 8011382:	a313      	add	r3, pc, #76	; (adr r3, 80113d0 <GUI_Touch_Processing+0x1b10>)
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	4640      	mov	r0, r8
 801138a:	4649      	mov	r1, r9
 801138c:	f04f 0a01 	mov.w	sl, #1
 8011390:	f7ef fbba 	bl	8000b08 <__aeabi_dcmple>
 8011394:	b900      	cbnz	r0, 8011398 <GUI_Touch_Processing+0x1ad8>
 8011396:	4682      	mov	sl, r0
 8011398:	ea06 060a 	and.w	r6, r6, sl
 801139c:	4237      	tst	r7, r6
 801139e:	d047      	beq.n	8011430 <GUI_Touch_Processing+0x1b70>
 80113a0:	9b00      	ldr	r3, [sp, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d044      	beq.n	8011430 <GUI_Touch_Processing+0x1b70>
					GUI_screen_state = DataSet5_Screen;
 80113a6:	230b      	movs	r3, #11
 80113a8:	f88b 3000 	strb.w	r3, [fp]
 80113ac:	f7fe bb16 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 80113b0:	99999999 	.word	0x99999999
 80113b4:	40806599 	.word	0x40806599
 80113b8:	66666666 	.word	0x66666666
 80113bc:	4084de66 	.word	0x4084de66
 80113c0:	99999999 	.word	0x99999999
 80113c4:	4085c799 	.word	0x4085c799
 80113c8:	66666666 	.word	0x66666666
 80113cc:	408a4066 	.word	0x408a4066
 80113d0:	66666666 	.word	0x66666666
 80113d4:	4081f866 	.word	0x4081f866
 80113d8:	33333333 	.word	0x33333333
 80113dc:	40867133 	.word	0x40867133
 80113e0:	33333333 	.word	0x33333333
 80113e4:	40053333 	.word	0x40053333
 80113e8:	00000000 	.word	0x00000000
 80113ec:	40623800 	.word	0x40623800
 80113f0:	99999999 	.word	0x99999999
 80113f4:	40720d99 	.word	0x40720d99
 80113f8:	99999999 	.word	0x99999999
 80113fc:	4091a399 	.word	0x4091a399
 8011400:	33333333 	.word	0x33333333
 8011404:	407aff33 	.word	0x407aff33
 8011408:	20004ca6 	.word	0x20004ca6
 801140c:	20004ca4 	.word	0x20004ca4
 8011410:	20004ccc 	.word	0x20004ccc
 8011414:	2008acd5 	.word	0x2008acd5
 8011418:	20000232 	.word	0x20000232
 801141c:	4093e000 	.word	0x4093e000
 8011420:	66666666 	.word	0x66666666
 8011424:	408b1466 	.word	0x408b1466
 8011428:	33333333 	.word	0x33333333
 801142c:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=65*TS_Callib & Touch_y <=(65+54)*TS_Callib) //CIE_Lab
 8011430:	2200      	movs	r2, #0
 8011432:	4bbf      	ldr	r3, [pc, #764]	; (8011730 <GUI_Touch_Processing+0x1e70>)
 8011434:	4640      	mov	r0, r8
 8011436:	4649      	mov	r1, r9
 8011438:	f04f 0601 	mov.w	r6, #1
 801143c:	f7ef fb6e 	bl	8000b1c <__aeabi_dcmpge>
 8011440:	b900      	cbnz	r0, 8011444 <GUI_Touch_Processing+0x1b84>
 8011442:	4606      	mov	r6, r0
 8011444:	a3a8      	add	r3, pc, #672	; (adr r3, 80116e8 <GUI_Touch_Processing+0x1e28>)
 8011446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144a:	4640      	mov	r0, r8
 801144c:	4649      	mov	r1, r9
 801144e:	f04f 0a01 	mov.w	sl, #1
 8011452:	f7ef fb59 	bl	8000b08 <__aeabi_dcmple>
 8011456:	b900      	cbnz	r0, 801145a <GUI_Touch_Processing+0x1b9a>
 8011458:	4682      	mov	sl, r0
 801145a:	ea06 060a 	and.w	r6, r6, sl
 801145e:	a3a4      	add	r3, pc, #656	; (adr r3, 80116f0 <GUI_Touch_Processing+0x1e30>)
 8011460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011464:	4620      	mov	r0, r4
 8011466:	4629      	mov	r1, r5
 8011468:	b2f6      	uxtb	r6, r6
 801146a:	f04f 0a01 	mov.w	sl, #1
 801146e:	f7ef fb55 	bl	8000b1c <__aeabi_dcmpge>
 8011472:	b900      	cbnz	r0, 8011476 <GUI_Touch_Processing+0x1bb6>
 8011474:	4682      	mov	sl, r0
 8011476:	a3a0      	add	r3, pc, #640	; (adr r3, 80116f8 <GUI_Touch_Processing+0x1e38>)
 8011478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147c:	4620      	mov	r0, r4
 801147e:	4629      	mov	r1, r5
 8011480:	f04f 0b01 	mov.w	fp, #1
 8011484:	f7ef fb40 	bl	8000b08 <__aeabi_dcmple>
 8011488:	b900      	cbnz	r0, 801148c <GUI_Touch_Processing+0x1bcc>
 801148a:	4683      	mov	fp, r0
 801148c:	ea0a 0a0b 	and.w	sl, sl, fp
 8011490:	f01a 0f01 	tst.w	sl, #1
 8011494:	d04c      	beq.n	8011530 <GUI_Touch_Processing+0x1c70>
 8011496:	2e00      	cmp	r6, #0
 8011498:	d04a      	beq.n	8011530 <GUI_Touch_Processing+0x1c70>
					Measure_Field ^= CIE_Lab;
 801149a:	4ca6      	ldr	r4, [pc, #664]	; (8011734 <GUI_Touch_Processing+0x1e74>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 801149c:	4da6      	ldr	r5, [pc, #664]	; (8011738 <GUI_Touch_Processing+0x1e78>)
					Measure_Field ^= CIE_Lab;
 801149e:	8822      	ldrh	r2, [r4, #0]
 80114a0:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 80114a4:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 80114a6:	2141      	movs	r1, #65	; 0x41
 80114a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80114ac:	20c8      	movs	r0, #200	; 0xc8
 80114ae:	f002 fdb7 	bl	8014020 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 80114b2:	8823      	ldrh	r3, [r4, #0]
 80114b4:	782a      	ldrb	r2, [r5, #0]
 80114b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114ba:	f002 0201 	and.w	r2, r2, #1
 80114be:	216c      	movs	r1, #108	; 0x6c
 80114c0:	20c8      	movs	r0, #200	; 0xc8
 80114c2:	f002 fdee 	bl	80140a2 <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 80114c6:	8823      	ldrh	r3, [r4, #0]
 80114c8:	782a      	ldrb	r2, [r5, #0]
 80114ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114ce:	f002 0202 	and.w	r2, r2, #2
 80114d2:	218f      	movs	r1, #143	; 0x8f
 80114d4:	20c8      	movs	r0, #200	; 0xc8
 80114d6:	f002 fde4 	bl	80140a2 <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 80114da:	8823      	ldrh	r3, [r4, #0]
 80114dc:	782a      	ldrb	r2, [r5, #0]
 80114de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114e2:	f002 0204 	and.w	r2, r2, #4
 80114e6:	21b2      	movs	r1, #178	; 0xb2
 80114e8:	20c8      	movs	r0, #200	; 0xc8
 80114ea:	f002 fdda 	bl	80140a2 <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 80114ee:	8823      	ldrh	r3, [r4, #0]
 80114f0:	782a      	ldrb	r2, [r5, #0]
 80114f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114f6:	f002 0208 	and.w	r2, r2, #8
 80114fa:	21d5      	movs	r1, #213	; 0xd5
 80114fc:	20c8      	movs	r0, #200	; 0xc8
 80114fe:	f002 fdd0 	bl	80140a2 <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8011502:	8823      	ldrh	r3, [r4, #0]
 8011504:	782a      	ldrb	r2, [r5, #0]
 8011506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801150a:	f002 0210 	and.w	r2, r2, #16
 801150e:	21f8      	movs	r1, #248	; 0xf8
 8011510:	20c8      	movs	r0, #200	; 0xc8
 8011512:	f002 fdc6 	bl	80140a2 <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8011516:	8823      	ldrh	r3, [r4, #0]
 8011518:	782a      	ldrb	r2, [r5, #0]
 801151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801151e:	f002 0220 	and.w	r2, r2, #32
 8011522:	f240 111b 	movw	r1, #283	; 0x11b
 8011526:	20c8      	movs	r0, #200	; 0xc8
 8011528:	f002 fdbb 	bl	80140a2 <GUI_RadioBox>
 801152c:	f7fe ba56 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=345*TS_Callib & Touch_y <=(345+54)*TS_Callib) //EbEr
 8011530:	a373      	add	r3, pc, #460	; (adr r3, 8011700 <GUI_Touch_Processing+0x1e40>)
 8011532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011536:	4620      	mov	r0, r4
 8011538:	4629      	mov	r1, r5
 801153a:	f04f 0a01 	mov.w	sl, #1
 801153e:	f7ef faed 	bl	8000b1c <__aeabi_dcmpge>
 8011542:	b900      	cbnz	r0, 8011546 <GUI_Touch_Processing+0x1c86>
 8011544:	4682      	mov	sl, r0
 8011546:	a370      	add	r3, pc, #448	; (adr r3, 8011708 <GUI_Touch_Processing+0x1e48>)
 8011548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154c:	4620      	mov	r0, r4
 801154e:	4629      	mov	r1, r5
 8011550:	f04f 0b01 	mov.w	fp, #1
 8011554:	f7ef fad8 	bl	8000b08 <__aeabi_dcmple>
 8011558:	b900      	cbnz	r0, 801155c <GUI_Touch_Processing+0x1c9c>
 801155a:	4683      	mov	fp, r0
 801155c:	ea0a 0a0b 	and.w	sl, sl, fp
 8011560:	f01a 0f01 	tst.w	sl, #1
 8011564:	d00e      	beq.n	8011584 <GUI_Touch_Processing+0x1cc4>
 8011566:	b16e      	cbz	r6, 8011584 <GUI_Touch_Processing+0x1cc4>
					Measure_Field ^= EbEr;
 8011568:	4b72      	ldr	r3, [pc, #456]	; (8011734 <GUI_Touch_Processing+0x1e74>)
 801156a:	881a      	ldrh	r2, [r3, #0]
 801156c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8011570:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 8011572:	f240 1159 	movw	r1, #345	; 0x159
 8011576:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801157a:	20c8      	movs	r0, #200	; 0xc8
 801157c:	f002 fd50 	bl	8014020 <GUI_CheckBox>
 8011580:	f7fe ba2c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=108*TS_Callib & Touch_y <=(108+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_A
 8011584:	a362      	add	r3, pc, #392	; (adr r3, 8011710 <GUI_Touch_Processing+0x1e50>)
 8011586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158a:	4620      	mov	r0, r4
 801158c:	4629      	mov	r1, r5
 801158e:	f04f 0a01 	mov.w	sl, #1
 8011592:	f7ef fac3 	bl	8000b1c <__aeabi_dcmpge>
 8011596:	b900      	cbnz	r0, 801159a <GUI_Touch_Processing+0x1cda>
 8011598:	4682      	mov	sl, r0
 801159a:	ea16 0f0a 	tst.w	r6, sl
 801159e:	d049      	beq.n	8011634 <GUI_Touch_Processing+0x1d74>
 80115a0:	a35d      	add	r3, pc, #372	; (adr r3, 8011718 <GUI_Touch_Processing+0x1e58>)
 80115a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a6:	4620      	mov	r0, r4
 80115a8:	4629      	mov	r1, r5
 80115aa:	f04f 0a01 	mov.w	sl, #1
 80115ae:	f7ef faab 	bl	8000b08 <__aeabi_dcmple>
 80115b2:	b900      	cbnz	r0, 80115b6 <GUI_Touch_Processing+0x1cf6>
 80115b4:	4682      	mov	sl, r0
 80115b6:	f01a 0fff 	tst.w	sl, #255	; 0xff
 80115ba:	d03b      	beq.n	8011634 <GUI_Touch_Processing+0x1d74>
 80115bc:	4b5d      	ldr	r3, [pc, #372]	; (8011734 <GUI_Touch_Processing+0x1e74>)
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	061b      	lsls	r3, r3, #24
 80115c2:	d537      	bpl.n	8011634 <GUI_Touch_Processing+0x1d74>
					if(!(Source_Type&Source_A))
 80115c4:	4d5c      	ldr	r5, [pc, #368]	; (8011738 <GUI_Touch_Processing+0x1e78>)
 80115c6:	782b      	ldrb	r3, [r5, #0]
 80115c8:	07dc      	lsls	r4, r3, #31
 80115ca:	f53e aa07 	bmi.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 80115ce:	2401      	movs	r4, #1
 80115d0:	4623      	mov	r3, r4
 80115d2:	4622      	mov	r2, r4
 80115d4:	216c      	movs	r1, #108	; 0x6c
 80115d6:	20c8      	movs	r0, #200	; 0xc8
 80115d8:	702c      	strb	r4, [r5, #0]
 80115da:	f002 fd62 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80115de:	782a      	ldrb	r2, [r5, #0]
 80115e0:	4623      	mov	r3, r4
 80115e2:	f002 0202 	and.w	r2, r2, #2
 80115e6:	218f      	movs	r1, #143	; 0x8f
 80115e8:	20c8      	movs	r0, #200	; 0xc8
 80115ea:	f002 fd5a 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80115ee:	782a      	ldrb	r2, [r5, #0]
 80115f0:	4623      	mov	r3, r4
 80115f2:	f002 0204 	and.w	r2, r2, #4
 80115f6:	21b2      	movs	r1, #178	; 0xb2
 80115f8:	20c8      	movs	r0, #200	; 0xc8
 80115fa:	f002 fd52 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80115fe:	782a      	ldrb	r2, [r5, #0]
 8011600:	4623      	mov	r3, r4
 8011602:	f002 0208 	and.w	r2, r2, #8
 8011606:	21d5      	movs	r1, #213	; 0xd5
 8011608:	20c8      	movs	r0, #200	; 0xc8
 801160a:	f002 fd4a 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 801160e:	782a      	ldrb	r2, [r5, #0]
 8011610:	4623      	mov	r3, r4
 8011612:	f002 0210 	and.w	r2, r2, #16
 8011616:	21f8      	movs	r1, #248	; 0xf8
 8011618:	20c8      	movs	r0, #200	; 0xc8
 801161a:	f002 fd42 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 801161e:	782a      	ldrb	r2, [r5, #0]
 8011620:	4623      	mov	r3, r4
 8011622:	f002 0220 	and.w	r2, r2, #32
 8011626:	f240 111b 	movw	r1, #283	; 0x11b
 801162a:	20c8      	movs	r0, #200	; 0xc8
 801162c:	f002 fd39 	bl	80140a2 <GUI_RadioBox>
 8011630:	f7fe b9d4 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=143*TS_Callib & Touch_y <=(143+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D65
 8011634:	a33a      	add	r3, pc, #232	; (adr r3, 8011720 <GUI_Touch_Processing+0x1e60>)
 8011636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163a:	4620      	mov	r0, r4
 801163c:	4629      	mov	r1, r5
 801163e:	f04f 0a01 	mov.w	sl, #1
 8011642:	f7ef fa6b 	bl	8000b1c <__aeabi_dcmpge>
 8011646:	b900      	cbnz	r0, 801164a <GUI_Touch_Processing+0x1d8a>
 8011648:	4682      	mov	sl, r0
 801164a:	ea16 0f0a 	tst.w	r6, sl
 801164e:	d075      	beq.n	801173c <GUI_Touch_Processing+0x1e7c>
 8011650:	a335      	add	r3, pc, #212	; (adr r3, 8011728 <GUI_Touch_Processing+0x1e68>)
 8011652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011656:	4620      	mov	r0, r4
 8011658:	4629      	mov	r1, r5
 801165a:	f04f 0a01 	mov.w	sl, #1
 801165e:	f7ef fa53 	bl	8000b08 <__aeabi_dcmple>
 8011662:	b900      	cbnz	r0, 8011666 <GUI_Touch_Processing+0x1da6>
 8011664:	4682      	mov	sl, r0
 8011666:	f01a 0fff 	tst.w	sl, #255	; 0xff
 801166a:	d067      	beq.n	801173c <GUI_Touch_Processing+0x1e7c>
 801166c:	4b31      	ldr	r3, [pc, #196]	; (8011734 <GUI_Touch_Processing+0x1e74>)
 801166e:	881b      	ldrh	r3, [r3, #0]
 8011670:	0618      	lsls	r0, r3, #24
 8011672:	d563      	bpl.n	801173c <GUI_Touch_Processing+0x1e7c>
					if(!(Source_Type&Source_D65))
 8011674:	4c30      	ldr	r4, [pc, #192]	; (8011738 <GUI_Touch_Processing+0x1e78>)
 8011676:	7822      	ldrb	r2, [r4, #0]
 8011678:	f012 0202 	ands.w	r2, r2, #2
 801167c:	f47e a9ae 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011680:	2301      	movs	r3, #1
 8011682:	216c      	movs	r1, #108	; 0x6c
 8011684:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011686:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011688:	f002 fd0b 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 801168c:	7822      	ldrb	r2, [r4, #0]
 801168e:	2301      	movs	r3, #1
 8011690:	f042 0202 	orr.w	r2, r2, #2
 8011694:	218f      	movs	r1, #143	; 0x8f
 8011696:	20c8      	movs	r0, #200	; 0xc8
 8011698:	7022      	strb	r2, [r4, #0]
 801169a:	f002 fd02 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 801169e:	7822      	ldrb	r2, [r4, #0]
 80116a0:	2301      	movs	r3, #1
 80116a2:	f002 0204 	and.w	r2, r2, #4
 80116a6:	21b2      	movs	r1, #178	; 0xb2
 80116a8:	20c8      	movs	r0, #200	; 0xc8
 80116aa:	f002 fcfa 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80116ae:	7822      	ldrb	r2, [r4, #0]
 80116b0:	2301      	movs	r3, #1
 80116b2:	f002 0208 	and.w	r2, r2, #8
 80116b6:	21d5      	movs	r1, #213	; 0xd5
 80116b8:	20c8      	movs	r0, #200	; 0xc8
 80116ba:	f002 fcf2 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80116be:	7822      	ldrb	r2, [r4, #0]
 80116c0:	2301      	movs	r3, #1
 80116c2:	f002 0210 	and.w	r2, r2, #16
 80116c6:	21f8      	movs	r1, #248	; 0xf8
 80116c8:	20c8      	movs	r0, #200	; 0xc8
 80116ca:	f002 fcea 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80116ce:	7822      	ldrb	r2, [r4, #0]
 80116d0:	2301      	movs	r3, #1
 80116d2:	f002 0220 	and.w	r2, r2, #32
 80116d6:	f240 111b 	movw	r1, #283	; 0x11b
 80116da:	20c8      	movs	r0, #200	; 0xc8
 80116dc:	f002 fce1 	bl	80140a2 <GUI_RadioBox>
 80116e0:	f7fe b97c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 80116e4:	f3af 8000 	nop.w
 80116e8:	cccccccd 	.word	0xcccccccd
 80116ec:	408508cc 	.word	0x408508cc
 80116f0:	00000000 	.word	0x00000000
 80116f4:	40658800 	.word	0x40658800
 80116f8:	99999999 	.word	0x99999999
 80116fc:	4073b599 	.word	0x4073b599
 8011700:	00000000 	.word	0x00000000
 8011704:	408c9200 	.word	0x408c9200
 8011708:	66666666 	.word	0x66666666
 801170c:	40908566 	.word	0x40908566
 8011710:	33333333 	.word	0x33333333
 8011714:	4071e333 	.word	0x4071e333
 8011718:	cccccccd 	.word	0xcccccccd
 801171c:	407ad4cc 	.word	0x407ad4cc
 8011720:	33333333 	.word	0x33333333
 8011724:	4077af33 	.word	0x4077af33
 8011728:	66666666 	.word	0x66666666
 801172c:	40805066 	.word	0x40805066
 8011730:	40809000 	.word	0x40809000
 8011734:	20004ca6 	.word	0x20004ca6
 8011738:	2008acd9 	.word	0x2008acd9
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=178*TS_Callib & Touch_y <=(178+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_C
 801173c:	a3be      	add	r3, pc, #760	; (adr r3, 8011a38 <GUI_Touch_Processing+0x2178>)
 801173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011742:	4620      	mov	r0, r4
 8011744:	4629      	mov	r1, r5
 8011746:	f04f 0a01 	mov.w	sl, #1
 801174a:	f7ef f9e7 	bl	8000b1c <__aeabi_dcmpge>
 801174e:	b900      	cbnz	r0, 8011752 <GUI_Touch_Processing+0x1e92>
 8011750:	4682      	mov	sl, r0
 8011752:	ea16 0f0a 	tst.w	r6, sl
 8011756:	d049      	beq.n	80117ec <GUI_Touch_Processing+0x1f2c>
 8011758:	a3b9      	add	r3, pc, #740	; (adr r3, 8011a40 <GUI_Touch_Processing+0x2180>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	4620      	mov	r0, r4
 8011760:	4629      	mov	r1, r5
 8011762:	f04f 0a01 	mov.w	sl, #1
 8011766:	f7ef f9cf 	bl	8000b08 <__aeabi_dcmple>
 801176a:	b900      	cbnz	r0, 801176e <GUI_Touch_Processing+0x1eae>
 801176c:	4682      	mov	sl, r0
 801176e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8011772:	d03b      	beq.n	80117ec <GUI_Touch_Processing+0x1f2c>
 8011774:	4bae      	ldr	r3, [pc, #696]	; (8011a30 <GUI_Touch_Processing+0x2170>)
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	0619      	lsls	r1, r3, #24
 801177a:	d537      	bpl.n	80117ec <GUI_Touch_Processing+0x1f2c>
					if(!(Source_Type&Source_C))
 801177c:	4cad      	ldr	r4, [pc, #692]	; (8011a34 <GUI_Touch_Processing+0x2174>)
 801177e:	7822      	ldrb	r2, [r4, #0]
 8011780:	f012 0204 	ands.w	r2, r2, #4
 8011784:	f47e a92a 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011788:	2301      	movs	r3, #1
 801178a:	216c      	movs	r1, #108	; 0x6c
 801178c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801178e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011790:	f002 fc87 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011794:	7822      	ldrb	r2, [r4, #0]
 8011796:	2301      	movs	r3, #1
 8011798:	f002 0202 	and.w	r2, r2, #2
 801179c:	218f      	movs	r1, #143	; 0x8f
 801179e:	20c8      	movs	r0, #200	; 0xc8
 80117a0:	f002 fc7f 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 80117a4:	7822      	ldrb	r2, [r4, #0]
 80117a6:	2301      	movs	r3, #1
 80117a8:	f042 0204 	orr.w	r2, r2, #4
 80117ac:	21b2      	movs	r1, #178	; 0xb2
 80117ae:	20c8      	movs	r0, #200	; 0xc8
 80117b0:	7022      	strb	r2, [r4, #0]
 80117b2:	f002 fc76 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80117b6:	7822      	ldrb	r2, [r4, #0]
 80117b8:	2301      	movs	r3, #1
 80117ba:	f002 0208 	and.w	r2, r2, #8
 80117be:	21d5      	movs	r1, #213	; 0xd5
 80117c0:	20c8      	movs	r0, #200	; 0xc8
 80117c2:	f002 fc6e 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80117c6:	7822      	ldrb	r2, [r4, #0]
 80117c8:	2301      	movs	r3, #1
 80117ca:	f002 0210 	and.w	r2, r2, #16
 80117ce:	21f8      	movs	r1, #248	; 0xf8
 80117d0:	20c8      	movs	r0, #200	; 0xc8
 80117d2:	f002 fc66 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80117d6:	7822      	ldrb	r2, [r4, #0]
 80117d8:	2301      	movs	r3, #1
 80117da:	f002 0220 	and.w	r2, r2, #32
 80117de:	f240 111b 	movw	r1, #283	; 0x11b
 80117e2:	20c8      	movs	r0, #200	; 0xc8
 80117e4:	f002 fc5d 	bl	80140a2 <GUI_RadioBox>
 80117e8:	f7fe b8f8 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=213*TS_Callib & Touch_y <=(213+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D50
 80117ec:	a384      	add	r3, pc, #528	; (adr r3, 8011a00 <GUI_Touch_Processing+0x2140>)
 80117ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f2:	4620      	mov	r0, r4
 80117f4:	4629      	mov	r1, r5
 80117f6:	f04f 0a01 	mov.w	sl, #1
 80117fa:	f7ef f98f 	bl	8000b1c <__aeabi_dcmpge>
 80117fe:	b900      	cbnz	r0, 8011802 <GUI_Touch_Processing+0x1f42>
 8011800:	4682      	mov	sl, r0
 8011802:	ea16 0f0a 	tst.w	r6, sl
 8011806:	d049      	beq.n	801189c <GUI_Touch_Processing+0x1fdc>
 8011808:	a37f      	add	r3, pc, #508	; (adr r3, 8011a08 <GUI_Touch_Processing+0x2148>)
 801180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180e:	4620      	mov	r0, r4
 8011810:	4629      	mov	r1, r5
 8011812:	f04f 0a01 	mov.w	sl, #1
 8011816:	f7ef f977 	bl	8000b08 <__aeabi_dcmple>
 801181a:	b900      	cbnz	r0, 801181e <GUI_Touch_Processing+0x1f5e>
 801181c:	4682      	mov	sl, r0
 801181e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8011822:	d03b      	beq.n	801189c <GUI_Touch_Processing+0x1fdc>
 8011824:	4b82      	ldr	r3, [pc, #520]	; (8011a30 <GUI_Touch_Processing+0x2170>)
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	061a      	lsls	r2, r3, #24
 801182a:	d537      	bpl.n	801189c <GUI_Touch_Processing+0x1fdc>
					if(!(Source_Type&Source_D50))
 801182c:	4c81      	ldr	r4, [pc, #516]	; (8011a34 <GUI_Touch_Processing+0x2174>)
 801182e:	7822      	ldrb	r2, [r4, #0]
 8011830:	f012 0208 	ands.w	r2, r2, #8
 8011834:	f47e a8d2 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011838:	2301      	movs	r3, #1
 801183a:	216c      	movs	r1, #108	; 0x6c
 801183c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801183e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011840:	f002 fc2f 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011844:	7822      	ldrb	r2, [r4, #0]
 8011846:	2301      	movs	r3, #1
 8011848:	f002 0202 	and.w	r2, r2, #2
 801184c:	218f      	movs	r1, #143	; 0x8f
 801184e:	20c8      	movs	r0, #200	; 0xc8
 8011850:	f002 fc27 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011854:	7822      	ldrb	r2, [r4, #0]
 8011856:	2301      	movs	r3, #1
 8011858:	f002 0204 	and.w	r2, r2, #4
 801185c:	21b2      	movs	r1, #178	; 0xb2
 801185e:	20c8      	movs	r0, #200	; 0xc8
 8011860:	f002 fc1f 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 8011864:	7822      	ldrb	r2, [r4, #0]
 8011866:	2301      	movs	r3, #1
 8011868:	f042 0208 	orr.w	r2, r2, #8
 801186c:	21d5      	movs	r1, #213	; 0xd5
 801186e:	20c8      	movs	r0, #200	; 0xc8
 8011870:	7022      	strb	r2, [r4, #0]
 8011872:	f002 fc16 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011876:	7822      	ldrb	r2, [r4, #0]
 8011878:	2301      	movs	r3, #1
 801187a:	f002 0210 	and.w	r2, r2, #16
 801187e:	21f8      	movs	r1, #248	; 0xf8
 8011880:	20c8      	movs	r0, #200	; 0xc8
 8011882:	f002 fc0e 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011886:	7822      	ldrb	r2, [r4, #0]
 8011888:	2301      	movs	r3, #1
 801188a:	f002 0220 	and.w	r2, r2, #32
 801188e:	f240 111b 	movw	r1, #283	; 0x11b
 8011892:	20c8      	movs	r0, #200	; 0xc8
 8011894:	f002 fc05 	bl	80140a2 <GUI_RadioBox>
 8011898:	f7fe b8a0 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=248*TS_Callib & Touch_y <=(248+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D55
 801189c:	a35c      	add	r3, pc, #368	; (adr r3, 8011a10 <GUI_Touch_Processing+0x2150>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	4620      	mov	r0, r4
 80118a4:	4629      	mov	r1, r5
 80118a6:	f04f 0a01 	mov.w	sl, #1
 80118aa:	f7ef f937 	bl	8000b1c <__aeabi_dcmpge>
 80118ae:	b900      	cbnz	r0, 80118b2 <GUI_Touch_Processing+0x1ff2>
 80118b0:	4682      	mov	sl, r0
 80118b2:	ea16 0f0a 	tst.w	r6, sl
 80118b6:	d049      	beq.n	801194c <GUI_Touch_Processing+0x208c>
 80118b8:	a357      	add	r3, pc, #348	; (adr r3, 8011a18 <GUI_Touch_Processing+0x2158>)
 80118ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118be:	4620      	mov	r0, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	f04f 0a01 	mov.w	sl, #1
 80118c6:	f7ef f91f 	bl	8000b08 <__aeabi_dcmple>
 80118ca:	b900      	cbnz	r0, 80118ce <GUI_Touch_Processing+0x200e>
 80118cc:	4682      	mov	sl, r0
 80118ce:	f01a 0fff 	tst.w	sl, #255	; 0xff
 80118d2:	d03b      	beq.n	801194c <GUI_Touch_Processing+0x208c>
 80118d4:	4b56      	ldr	r3, [pc, #344]	; (8011a30 <GUI_Touch_Processing+0x2170>)
 80118d6:	881b      	ldrh	r3, [r3, #0]
 80118d8:	061b      	lsls	r3, r3, #24
 80118da:	d537      	bpl.n	801194c <GUI_Touch_Processing+0x208c>
					if(!(Source_Type&Source_D55))
 80118dc:	4c55      	ldr	r4, [pc, #340]	; (8011a34 <GUI_Touch_Processing+0x2174>)
 80118de:	7822      	ldrb	r2, [r4, #0]
 80118e0:	f012 0210 	ands.w	r2, r2, #16
 80118e4:	f47e a87a 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80118e8:	2301      	movs	r3, #1
 80118ea:	216c      	movs	r1, #108	; 0x6c
 80118ec:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80118ee:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80118f0:	f002 fbd7 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80118f4:	7822      	ldrb	r2, [r4, #0]
 80118f6:	2301      	movs	r3, #1
 80118f8:	f002 0202 	and.w	r2, r2, #2
 80118fc:	218f      	movs	r1, #143	; 0x8f
 80118fe:	20c8      	movs	r0, #200	; 0xc8
 8011900:	f002 fbcf 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011904:	7822      	ldrb	r2, [r4, #0]
 8011906:	2301      	movs	r3, #1
 8011908:	f002 0204 	and.w	r2, r2, #4
 801190c:	21b2      	movs	r1, #178	; 0xb2
 801190e:	20c8      	movs	r0, #200	; 0xc8
 8011910:	f002 fbc7 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011914:	7822      	ldrb	r2, [r4, #0]
 8011916:	2301      	movs	r3, #1
 8011918:	f002 0208 	and.w	r2, r2, #8
 801191c:	21d5      	movs	r1, #213	; 0xd5
 801191e:	20c8      	movs	r0, #200	; 0xc8
 8011920:	f002 fbbf 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011924:	7822      	ldrb	r2, [r4, #0]
 8011926:	2301      	movs	r3, #1
 8011928:	f042 0210 	orr.w	r2, r2, #16
 801192c:	21f8      	movs	r1, #248	; 0xf8
 801192e:	20c8      	movs	r0, #200	; 0xc8
 8011930:	7022      	strb	r2, [r4, #0]
 8011932:	f002 fbb6 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011936:	7822      	ldrb	r2, [r4, #0]
 8011938:	2301      	movs	r3, #1
 801193a:	f002 0220 	and.w	r2, r2, #32
 801193e:	f240 111b 	movw	r1, #283	; 0x11b
 8011942:	20c8      	movs	r0, #200	; 0xc8
 8011944:	f002 fbad 	bl	80140a2 <GUI_RadioBox>
 8011948:	f7fe b848 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=283*TS_Callib & Touch_y <=(283+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D75
 801194c:	a334      	add	r3, pc, #208	; (adr r3, 8011a20 <GUI_Touch_Processing+0x2160>)
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	4620      	mov	r0, r4
 8011954:	4629      	mov	r1, r5
 8011956:	f04f 0a01 	mov.w	sl, #1
 801195a:	f7ef f8df 	bl	8000b1c <__aeabi_dcmpge>
 801195e:	b900      	cbnz	r0, 8011962 <GUI_Touch_Processing+0x20a2>
 8011960:	4682      	mov	sl, r0
 8011962:	ea16 0f0a 	tst.w	r6, sl
 8011966:	d06f      	beq.n	8011a48 <GUI_Touch_Processing+0x2188>
 8011968:	a32f      	add	r3, pc, #188	; (adr r3, 8011a28 <GUI_Touch_Processing+0x2168>)
 801196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196e:	4620      	mov	r0, r4
 8011970:	4629      	mov	r1, r5
 8011972:	f04f 0601 	mov.w	r6, #1
 8011976:	f7ef f8c7 	bl	8000b08 <__aeabi_dcmple>
 801197a:	b900      	cbnz	r0, 801197e <GUI_Touch_Processing+0x20be>
 801197c:	4606      	mov	r6, r0
 801197e:	f016 0fff 	tst.w	r6, #255	; 0xff
 8011982:	d061      	beq.n	8011a48 <GUI_Touch_Processing+0x2188>
 8011984:	4b2a      	ldr	r3, [pc, #168]	; (8011a30 <GUI_Touch_Processing+0x2170>)
 8011986:	881b      	ldrh	r3, [r3, #0]
 8011988:	0618      	lsls	r0, r3, #24
 801198a:	d55d      	bpl.n	8011a48 <GUI_Touch_Processing+0x2188>
					if(!(Source_Type&Source_D75))
 801198c:	4c29      	ldr	r4, [pc, #164]	; (8011a34 <GUI_Touch_Processing+0x2174>)
 801198e:	7822      	ldrb	r2, [r4, #0]
 8011990:	f012 0220 	ands.w	r2, r2, #32
 8011994:	f47e a822 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011998:	2301      	movs	r3, #1
 801199a:	216c      	movs	r1, #108	; 0x6c
 801199c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801199e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80119a0:	f002 fb7f 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80119a4:	7822      	ldrb	r2, [r4, #0]
 80119a6:	2301      	movs	r3, #1
 80119a8:	f002 0202 	and.w	r2, r2, #2
 80119ac:	218f      	movs	r1, #143	; 0x8f
 80119ae:	20c8      	movs	r0, #200	; 0xc8
 80119b0:	f002 fb77 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80119b4:	7822      	ldrb	r2, [r4, #0]
 80119b6:	2301      	movs	r3, #1
 80119b8:	f002 0204 	and.w	r2, r2, #4
 80119bc:	21b2      	movs	r1, #178	; 0xb2
 80119be:	20c8      	movs	r0, #200	; 0xc8
 80119c0:	f002 fb6f 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80119c4:	7822      	ldrb	r2, [r4, #0]
 80119c6:	2301      	movs	r3, #1
 80119c8:	f002 0208 	and.w	r2, r2, #8
 80119cc:	21d5      	movs	r1, #213	; 0xd5
 80119ce:	20c8      	movs	r0, #200	; 0xc8
 80119d0:	f002 fb67 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80119d4:	7822      	ldrb	r2, [r4, #0]
 80119d6:	2301      	movs	r3, #1
 80119d8:	f002 0210 	and.w	r2, r2, #16
 80119dc:	21f8      	movs	r1, #248	; 0xf8
 80119de:	20c8      	movs	r0, #200	; 0xc8
 80119e0:	f002 fb5f 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 80119e4:	7822      	ldrb	r2, [r4, #0]
 80119e6:	2301      	movs	r3, #1
 80119e8:	f042 0220 	orr.w	r2, r2, #32
 80119ec:	f240 111b 	movw	r1, #283	; 0x11b
 80119f0:	20c8      	movs	r0, #200	; 0xc8
 80119f2:	7022      	strb	r2, [r4, #0]
 80119f4:	f002 fb55 	bl	80140a2 <GUI_RadioBox>
 80119f8:	f7fd bff0 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 80119fc:	f3af 8000 	nop.w
 8011a00:	99999999 	.word	0x99999999
 8011a04:	4081a399 	.word	0x4081a399
 8011a08:	66666666 	.word	0x66666666
 8011a0c:	40861c66 	.word	0x40861c66
 8011a10:	99999999 	.word	0x99999999
 8011a14:	40848999 	.word	0x40848999
 8011a18:	66666666 	.word	0x66666666
 8011a1c:	40890266 	.word	0x40890266
 8011a20:	99999999 	.word	0x99999999
 8011a24:	40876f99 	.word	0x40876f99
 8011a28:	66666666 	.word	0x66666666
 8011a2c:	408be866 	.word	0x408be866
 8011a30:	20004ca6 	.word	0x20004ca6
 8011a34:	2008acd9 	.word	0x2008acd9
 8011a38:	33333333 	.word	0x33333333
 8011a3c:	407d7b33 	.word	0x407d7b33
 8011a40:	66666666 	.word	0x66666666
 8011a44:	40833666 	.word	0x40833666
 8011a48:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8011a4a:	4640      	mov	r0, r8
 8011a4c:	ea07 0503 	and.w	r5, r7, r3
 8011a50:	4649      	mov	r1, r9
 8011a52:	a3af      	add	r3, pc, #700	; (adr r3, 8011d10 <GUI_Touch_Processing+0x2450>)
 8011a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a58:	f04f 0401 	mov.w	r4, #1
 8011a5c:	f7ef f85e 	bl	8000b1c <__aeabi_dcmpge>
 8011a60:	b900      	cbnz	r0, 8011a64 <GUI_Touch_Processing+0x21a4>
 8011a62:	4604      	mov	r4, r0
 8011a64:	a3ba      	add	r3, pc, #744	; (adr r3, 8011d50 <GUI_Touch_Processing+0x2490>)
 8011a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6a:	4640      	mov	r0, r8
 8011a6c:	4649      	mov	r1, r9
 8011a6e:	f04f 0601 	mov.w	r6, #1
 8011a72:	f7ef f849 	bl	8000b08 <__aeabi_dcmple>
 8011a76:	b900      	cbnz	r0, 8011a7a <GUI_Touch_Processing+0x21ba>
 8011a78:	4606      	mov	r6, r0
 8011a7a:	ea04 0306 	and.w	r3, r4, r6
 8011a7e:	07d9      	lsls	r1, r3, #31
 8011a80:	d502      	bpl.n	8011a88 <GUI_Touch_Processing+0x21c8>
 8011a82:	2d00      	cmp	r5, #0
 8011a84:	f47e af6f 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8011a88:	a3b3      	add	r3, pc, #716	; (adr r3, 8011d58 <GUI_Touch_Processing+0x2498>)
 8011a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8e:	4640      	mov	r0, r8
 8011a90:	4649      	mov	r1, r9
 8011a92:	f04f 0401 	mov.w	r4, #1
 8011a96:	f7ef f841 	bl	8000b1c <__aeabi_dcmpge>
 8011a9a:	b900      	cbnz	r0, 8011a9e <GUI_Touch_Processing+0x21de>
 8011a9c:	4604      	mov	r4, r0
 8011a9e:	a394      	add	r3, pc, #592	; (adr r3, 8011cf0 <GUI_Touch_Processing+0x2430>)
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	4640      	mov	r0, r8
 8011aa6:	4649      	mov	r1, r9
 8011aa8:	f04f 0601 	mov.w	r6, #1
 8011aac:	f7ef f82c 	bl	8000b08 <__aeabi_dcmple>
 8011ab0:	b900      	cbnz	r0, 8011ab4 <GUI_Touch_Processing+0x21f4>
 8011ab2:	4606      	mov	r6, r0
 8011ab4:	ea04 0306 	and.w	r3, r4, r6
 8011ab8:	07da      	lsls	r2, r3, #31
 8011aba:	d523      	bpl.n	8011b04 <GUI_Touch_Processing+0x2244>
 8011abc:	b315      	cbz	r5, 8011b04 <GUI_Touch_Processing+0x2244>
					WriteSDFLASH_t(sdfile_cnt);
 8011abe:	4ba8      	ldr	r3, [pc, #672]	; (8011d60 <GUI_Touch_Processing+0x24a0>)
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	8818      	ldrh	r0, [r3, #0]
 8011ac4:	f007 fc0c 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011ac8:	4ba6      	ldr	r3, [pc, #664]	; (8011d64 <GUI_Touch_Processing+0x24a4>)
 8011aca:	781a      	ldrb	r2, [r3, #0]
 8011acc:	4ba6      	ldr	r3, [pc, #664]	; (8011d68 <GUI_Touch_Processing+0x24a8>)
					switch (Prev_Inf_Screen){
 8011ace:	1e51      	subs	r1, r2, #1
 8011ad0:	2905      	cmp	r1, #5
 8011ad2:	d804      	bhi.n	8011ade <GUI_Touch_Processing+0x221e>
 8011ad4:	e8df f001 	tbb	[pc, r1]
 8011ad8:	0a030306 	.word	0x0a030306
 8011adc:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8011ade:	701a      	strb	r2, [r3, #0]
 8011ae0:	f7fd bf7c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	701a      	strb	r2, [r3, #0]
 8011ae8:	f7fd bf78 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011aec:	2204      	movs	r2, #4
 8011aee:	701a      	strb	r2, [r3, #0]
 8011af0:	f7fd bf74 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011af4:	2206      	movs	r2, #6
 8011af6:	701a      	strb	r2, [r3, #0]
 8011af8:	f7fd bf70 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011afc:	2205      	movs	r2, #5
 8011afe:	701a      	strb	r2, [r3, #0]
 8011b00:	f7fd bf6c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011b04:	a37a      	add	r3, pc, #488	; (adr r3, 8011cf0 <GUI_Touch_Processing+0x2430>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	4640      	mov	r0, r8
 8011b0c:	4649      	mov	r1, r9
 8011b0e:	f04f 0401 	mov.w	r4, #1
 8011b12:	f7ef f803 	bl	8000b1c <__aeabi_dcmpge>
 8011b16:	b900      	cbnz	r0, 8011b1a <GUI_Touch_Processing+0x225a>
 8011b18:	4604      	mov	r4, r0
 8011b1a:	a377      	add	r3, pc, #476	; (adr r3, 8011cf8 <GUI_Touch_Processing+0x2438>)
 8011b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b20:	4640      	mov	r0, r8
 8011b22:	4649      	mov	r1, r9
 8011b24:	f04f 0501 	mov.w	r5, #1
 8011b28:	f7ee ffee 	bl	8000b08 <__aeabi_dcmple>
 8011b2c:	b900      	cbnz	r0, 8011b30 <GUI_Touch_Processing+0x2270>
 8011b2e:	4605      	mov	r5, r0
 8011b30:	402c      	ands	r4, r5
 8011b32:	4227      	tst	r7, r4
 8011b34:	f7ff b9c9 	b.w	8010eca <GUI_Touch_Processing+0x160a>
					preGUI_screen_state = GUI_screen_state;
 8011b38:	4b8c      	ldr	r3, [pc, #560]	; (8011d6c <GUI_Touch_Processing+0x24ac>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011b3a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8011b3e:	220b      	movs	r2, #11
 8011b40:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011b42:	f7ee fcff 	bl	8000544 <__aeabi_i2d>
 8011b46:	4604      	mov	r4, r0
 8011b48:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011b4c:	460d      	mov	r5, r1
 8011b4e:	f7ee fcf9 	bl	8000544 <__aeabi_i2d>
 8011b52:	a36b      	add	r3, pc, #428	; (adr r3, 8011d00 <GUI_Touch_Processing+0x2440>)
 8011b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b58:	e9cd 0100 	strd	r0, r1, [sp]
 8011b5c:	f04f 0801 	mov.w	r8, #1
 8011b60:	f7ee ffdc 	bl	8000b1c <__aeabi_dcmpge>
 8011b64:	b900      	cbnz	r0, 8011b68 <GUI_Touch_Processing+0x22a8>
 8011b66:	4680      	mov	r8, r0
 8011b68:	2200      	movs	r2, #0
 8011b6a:	4b81      	ldr	r3, [pc, #516]	; (8011d70 <GUI_Touch_Processing+0x24b0>)
 8011b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b70:	fa5f f888 	uxtb.w	r8, r8
 8011b74:	f04f 0701 	mov.w	r7, #1
 8011b78:	f7ee ffc6 	bl	8000b08 <__aeabi_dcmple>
 8011b7c:	b900      	cbnz	r0, 8011b80 <GUI_Touch_Processing+0x22c0>
 8011b7e:	4607      	mov	r7, r0
 8011b80:	a361      	add	r3, pc, #388	; (adr r3, 8011d08 <GUI_Touch_Processing+0x2448>)
 8011b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b86:	4620      	mov	r0, r4
 8011b88:	4629      	mov	r1, r5
 8011b8a:	b2ff      	uxtb	r7, r7
 8011b8c:	f04f 0601 	mov.w	r6, #1
 8011b90:	f7ee ffc4 	bl	8000b1c <__aeabi_dcmpge>
 8011b94:	b900      	cbnz	r0, 8011b98 <GUI_Touch_Processing+0x22d8>
 8011b96:	4606      	mov	r6, r0
 8011b98:	a35d      	add	r3, pc, #372	; (adr r3, 8011d10 <GUI_Touch_Processing+0x2450>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	4629      	mov	r1, r5
 8011ba2:	f04f 0901 	mov.w	r9, #1
 8011ba6:	f7ee ffaf 	bl	8000b08 <__aeabi_dcmple>
 8011baa:	b900      	cbnz	r0, 8011bae <GUI_Touch_Processing+0x22ee>
 8011bac:	4681      	mov	r9, r0
 8011bae:	ea06 0609 	and.w	r6, r6, r9
 8011bb2:	ea18 0f06 	tst.w	r8, r6
 8011bb6:	d005      	beq.n	8011bc4 <GUI_Touch_Processing+0x2304>
 8011bb8:	b127      	cbz	r7, 8011bc4 <GUI_Touch_Processing+0x2304>
					GUI_screen_state = DataSet1_Screen;
 8011bba:	2307      	movs	r3, #7
 8011bbc:	f88b 3000 	strb.w	r3, [fp]
 8011bc0:	f7fd bf0c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //EbEr
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	4b6b      	ldr	r3, [pc, #428]	; (8011d74 <GUI_Touch_Processing+0x24b4>)
 8011bc8:	4620      	mov	r0, r4
 8011bca:	4629      	mov	r1, r5
 8011bcc:	f04f 0601 	mov.w	r6, #1
 8011bd0:	f7ee ffa4 	bl	8000b1c <__aeabi_dcmpge>
 8011bd4:	b900      	cbnz	r0, 8011bd8 <GUI_Touch_Processing+0x2318>
 8011bd6:	4606      	mov	r6, r0
 8011bd8:	a34f      	add	r3, pc, #316	; (adr r3, 8011d18 <GUI_Touch_Processing+0x2458>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	4620      	mov	r0, r4
 8011be0:	4629      	mov	r1, r5
 8011be2:	f04f 0901 	mov.w	r9, #1
 8011be6:	f7ee ff8f 	bl	8000b08 <__aeabi_dcmple>
 8011bea:	b900      	cbnz	r0, 8011bee <GUI_Touch_Processing+0x232e>
 8011bec:	4681      	mov	r9, r0
 8011bee:	ea06 0609 	and.w	r6, r6, r9
 8011bf2:	a34b      	add	r3, pc, #300	; (adr r3, 8011d20 <GUI_Touch_Processing+0x2460>)
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bfc:	b2f6      	uxtb	r6, r6
 8011bfe:	f04f 0901 	mov.w	r9, #1
 8011c02:	f7ee ff8b 	bl	8000b1c <__aeabi_dcmpge>
 8011c06:	b900      	cbnz	r0, 8011c0a <GUI_Touch_Processing+0x234a>
 8011c08:	4681      	mov	r9, r0
 8011c0a:	a347      	add	r3, pc, #284	; (adr r3, 8011d28 <GUI_Touch_Processing+0x2468>)
 8011c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c14:	f04f 0a01 	mov.w	sl, #1
 8011c18:	f7ee ff76 	bl	8000b08 <__aeabi_dcmple>
 8011c1c:	b900      	cbnz	r0, 8011c20 <GUI_Touch_Processing+0x2360>
 8011c1e:	4682      	mov	sl, r0
 8011c20:	ea09 090a 	and.w	r9, r9, sl
 8011c24:	f019 0f01 	tst.w	r9, #1
 8011c28:	d00d      	beq.n	8011c46 <GUI_Touch_Processing+0x2386>
 8011c2a:	b166      	cbz	r6, 8011c46 <GUI_Touch_Processing+0x2386>
					Measure_Field ^= lambda_d;
 8011c2c:	4b52      	ldr	r3, [pc, #328]	; (8011d78 <GUI_Touch_Processing+0x24b8>)
 8011c2e:	881a      	ldrh	r2, [r3, #0]
 8011c30:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8011c34:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 8011c36:	2146      	movs	r1, #70	; 0x46
 8011c38:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8011c3c:	20c8      	movs	r0, #200	; 0xc8
 8011c3e:	f002 f9ef 	bl	8014020 <GUI_CheckBox>
 8011c42:	f7fd becb 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //EbEr
 8011c46:	a33a      	add	r3, pc, #232	; (adr r3, 8011d30 <GUI_Touch_Processing+0x2470>)
 8011c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c50:	f04f 0901 	mov.w	r9, #1
 8011c54:	f7ee ff62 	bl	8000b1c <__aeabi_dcmpge>
 8011c58:	b900      	cbnz	r0, 8011c5c <GUI_Touch_Processing+0x239c>
 8011c5a:	4681      	mov	r9, r0
 8011c5c:	a336      	add	r3, pc, #216	; (adr r3, 8011d38 <GUI_Touch_Processing+0x2478>)
 8011c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c66:	f04f 0a01 	mov.w	sl, #1
 8011c6a:	f7ee ff4d 	bl	8000b08 <__aeabi_dcmple>
 8011c6e:	b900      	cbnz	r0, 8011c72 <GUI_Touch_Processing+0x23b2>
 8011c70:	4682      	mov	sl, r0
 8011c72:	ea09 090a 	and.w	r9, r9, sl
 8011c76:	f019 0f01 	tst.w	r9, #1
 8011c7a:	d00d      	beq.n	8011c98 <GUI_Touch_Processing+0x23d8>
 8011c7c:	b166      	cbz	r6, 8011c98 <GUI_Touch_Processing+0x23d8>
					Measure_Field ^= lambda_c;
 8011c7e:	4b3e      	ldr	r3, [pc, #248]	; (8011d78 <GUI_Touch_Processing+0x24b8>)
 8011c80:	881a      	ldrh	r2, [r3, #0]
 8011c82:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8011c86:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&lambda_c);
 8011c88:	2185      	movs	r1, #133	; 0x85
 8011c8a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8011c8e:	20c8      	movs	r0, #200	; 0xc8
 8011c90:	f002 f9c6 	bl	8014020 <GUI_CheckBox>
 8011c94:	f7fd bea2 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //EbEr
 8011c98:	a329      	add	r3, pc, #164	; (adr r3, 8011d40 <GUI_Touch_Processing+0x2480>)
 8011c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ca2:	f04f 0901 	mov.w	r9, #1
 8011ca6:	f7ee ff39 	bl	8000b1c <__aeabi_dcmpge>
 8011caa:	b900      	cbnz	r0, 8011cae <GUI_Touch_Processing+0x23ee>
 8011cac:	4681      	mov	r9, r0
 8011cae:	a326      	add	r3, pc, #152	; (adr r3, 8011d48 <GUI_Touch_Processing+0x2488>)
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cb8:	f04f 0a01 	mov.w	sl, #1
 8011cbc:	f7ee ff24 	bl	8000b08 <__aeabi_dcmple>
 8011cc0:	b900      	cbnz	r0, 8011cc4 <GUI_Touch_Processing+0x2404>
 8011cc2:	4682      	mov	sl, r0
 8011cc4:	ea09 090a 	and.w	r9, r9, sl
 8011cc8:	f019 0f01 	tst.w	r9, #1
 8011ccc:	d056      	beq.n	8011d7c <GUI_Touch_Processing+0x24bc>
 8011cce:	2e00      	cmp	r6, #0
 8011cd0:	d054      	beq.n	8011d7c <GUI_Touch_Processing+0x24bc>
					Measure_Field ^= SP_measure;
 8011cd2:	4b29      	ldr	r3, [pc, #164]	; (8011d78 <GUI_Touch_Processing+0x24b8>)
 8011cd4:	881a      	ldrh	r2, [r3, #0]
 8011cd6:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8011cda:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 8011cdc:	21c6      	movs	r1, #198	; 0xc6
 8011cde:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011ce2:	20c8      	movs	r0, #200	; 0xc8
 8011ce4:	f002 f99c 	bl	8014020 <GUI_CheckBox>
 8011ce8:	f7fd be78 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8011cec:	f3af 8000 	nop.w
 8011cf0:	00000000 	.word	0x00000000
 8011cf4:	40623800 	.word	0x40623800
 8011cf8:	99999999 	.word	0x99999999
 8011cfc:	40720d99 	.word	0x40720d99
 8011d00:	99999999 	.word	0x99999999
 8011d04:	4091a399 	.word	0x4091a399
 8011d08:	33333333 	.word	0x33333333
 8011d0c:	407aff33 	.word	0x407aff33
 8011d10:	66666666 	.word	0x66666666
 8011d14:	4081f866 	.word	0x4081f866
 8011d18:	cccccccd 	.word	0xcccccccd
 8011d1c:	408508cc 	.word	0x408508cc
 8011d20:	00000000 	.word	0x00000000
 8011d24:	40673000 	.word	0x40673000
 8011d28:	99999999 	.word	0x99999999
 8011d2c:	40748999 	.word	0x40748999
 8011d30:	33333333 	.word	0x33333333
 8011d34:	40760733 	.word	0x40760733
 8011d38:	cccccccd 	.word	0xcccccccd
 8011d3c:	407ef8cc 	.word	0x407ef8cc
 8011d40:	99999999 	.word	0x99999999
 8011d44:	40806599 	.word	0x40806599
 8011d48:	66666666 	.word	0x66666666
 8011d4c:	4084de66 	.word	0x4084de66
 8011d50:	33333333 	.word	0x33333333
 8011d54:	40867133 	.word	0x40867133
 8011d58:	33333333 	.word	0x33333333
 8011d5c:	40053333 	.word	0x40053333
 8011d60:	20004ccc 	.word	0x20004ccc
 8011d64:	2008acd5 	.word	0x2008acd5
 8011d68:	20004ca1 	.word	0x20004ca1
 8011d6c:	20000232 	.word	0x20000232
 8011d70:	4093e000 	.word	0x4093e000
 8011d74:	40809000 	.word	0x40809000
 8011d78:	20004ca6 	.word	0x20004ca6
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8011d7c:	a3c2      	add	r3, pc, #776	; (adr r3, 8012088 <GUI_Touch_Processing+0x27c8>)
 8011d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d82:	4620      	mov	r0, r4
 8011d84:	4629      	mov	r1, r5
 8011d86:	ea08 0607 	and.w	r6, r8, r7
 8011d8a:	f04f 0901 	mov.w	r9, #1
 8011d8e:	f7ee fec5 	bl	8000b1c <__aeabi_dcmpge>
 8011d92:	b900      	cbnz	r0, 8011d96 <GUI_Touch_Processing+0x24d6>
 8011d94:	4681      	mov	r9, r0
 8011d96:	a3df      	add	r3, pc, #892	; (adr r3, 8012114 <GUI_Touch_Processing+0x2854>)
 8011d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	4629      	mov	r1, r5
 8011da0:	f04f 0a01 	mov.w	sl, #1
 8011da4:	f7ee feb0 	bl	8000b08 <__aeabi_dcmple>
 8011da8:	b900      	cbnz	r0, 8011dac <GUI_Touch_Processing+0x24ec>
 8011daa:	4682      	mov	sl, r0
 8011dac:	ea09 030a 	and.w	r3, r9, sl
 8011db0:	07db      	lsls	r3, r3, #31
 8011db2:	d502      	bpl.n	8011dba <GUI_Touch_Processing+0x24fa>
 8011db4:	2e00      	cmp	r6, #0
 8011db6:	f47e add6 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8011dba:	a3d8      	add	r3, pc, #864	; (adr r3, 801211c <GUI_Touch_Processing+0x285c>)
 8011dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	f04f 0901 	mov.w	r9, #1
 8011dc8:	f7ee fea8 	bl	8000b1c <__aeabi_dcmpge>
 8011dcc:	b900      	cbnz	r0, 8011dd0 <GUI_Touch_Processing+0x2510>
 8011dce:	4681      	mov	r9, r0
 8011dd0:	a3d4      	add	r3, pc, #848	; (adr r3, 8012124 <GUI_Touch_Processing+0x2864>)
 8011dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	4629      	mov	r1, r5
 8011dda:	f04f 0a01 	mov.w	sl, #1
 8011dde:	f7ee fe93 	bl	8000b08 <__aeabi_dcmple>
 8011de2:	b900      	cbnz	r0, 8011de6 <GUI_Touch_Processing+0x2526>
 8011de4:	4682      	mov	sl, r0
 8011de6:	ea09 030a 	and.w	r3, r9, sl
 8011dea:	07d8      	lsls	r0, r3, #31
 8011dec:	f140 87ea 	bpl.w	8012dc4 <GUI_Touch_Processing+0x3504>
 8011df0:	2e00      	cmp	r6, #0
 8011df2:	f000 87e7 	beq.w	8012dc4 <GUI_Touch_Processing+0x3504>
					WriteSDFLASH_t(sdfile_cnt);
 8011df6:	4bb8      	ldr	r3, [pc, #736]	; (80120d8 <GUI_Touch_Processing+0x2818>)
 8011df8:	2100      	movs	r1, #0
 8011dfa:	8818      	ldrh	r0, [r3, #0]
 8011dfc:	f007 fa70 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011e00:	4bb6      	ldr	r3, [pc, #728]	; (80120dc <GUI_Touch_Processing+0x281c>)
 8011e02:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011e04:	1e5a      	subs	r2, r3, #1
 8011e06:	2a05      	cmp	r2, #5
 8011e08:	d804      	bhi.n	8011e14 <GUI_Touch_Processing+0x2554>
 8011e0a:	e8df f002 	tbb	[pc, r2]
 8011e0e:	0307      	.short	0x0307
 8011e10:	11160c03 	.word	0x11160c03
					GUI_screen_state = Prev_Inf_Screen;
 8011e14:	f88b 3000 	strb.w	r3, [fp]
 8011e18:	f7fd bde0 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	f88b 3000 	strb.w	r3, [fp]
 8011e22:	f7fd bddb 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011e26:	2304      	movs	r3, #4
 8011e28:	f88b 3000 	strb.w	r3, [fp]
 8011e2c:	f7fd bdd6 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011e30:	2306      	movs	r3, #6
 8011e32:	f88b 3000 	strb.w	r3, [fp]
 8011e36:	f7fd bdd1 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011e3a:	2305      	movs	r3, #5
 8011e3c:	f88b 3000 	strb.w	r3, [fp]
 8011e40:	f7fd bdcc 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8011e44:	4ba6      	ldr	r3, [pc, #664]	; (80120e0 <GUI_Touch_Processing+0x2820>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8011e46:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8011e4a:	220c      	movs	r2, #12
 8011e4c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8011e4e:	f7ee fb79 	bl	8000544 <__aeabi_i2d>
 8011e52:	4604      	mov	r4, r0
 8011e54:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011e58:	460d      	mov	r5, r1
 8011e5a:	f7ee fb73 	bl	8000544 <__aeabi_i2d>
 8011e5e:	a386      	add	r3, pc, #536	; (adr r3, 8012078 <GUI_Touch_Processing+0x27b8>)
 8011e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e64:	4606      	mov	r6, r0
 8011e66:	460f      	mov	r7, r1
 8011e68:	f04f 0801 	mov.w	r8, #1
 8011e6c:	f7ee fe56 	bl	8000b1c <__aeabi_dcmpge>
 8011e70:	b900      	cbnz	r0, 8011e74 <GUI_Touch_Processing+0x25b4>
 8011e72:	4680      	mov	r8, r0
 8011e74:	fa5f f388 	uxtb.w	r3, r8
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	4b99      	ldr	r3, [pc, #612]	; (80120e4 <GUI_Touch_Processing+0x2824>)
 8011e7e:	4630      	mov	r0, r6
 8011e80:	4639      	mov	r1, r7
 8011e82:	f04f 0801 	mov.w	r8, #1
 8011e86:	f7ee fe3f 	bl	8000b08 <__aeabi_dcmple>
 8011e8a:	b900      	cbnz	r0, 8011e8e <GUI_Touch_Processing+0x25ce>
 8011e8c:	4680      	mov	r8, r0
 8011e8e:	fa5f f388 	uxtb.w	r3, r8
 8011e92:	9303      	str	r3, [sp, #12]
 8011e94:	4620      	mov	r0, r4
 8011e96:	a37a      	add	r3, pc, #488	; (adr r3, 8012080 <GUI_Touch_Processing+0x27c0>)
 8011e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	f04f 0801 	mov.w	r8, #1
 8011ea2:	f7ee fe3b 	bl	8000b1c <__aeabi_dcmpge>
 8011ea6:	b900      	cbnz	r0, 8011eaa <GUI_Touch_Processing+0x25ea>
 8011ea8:	4680      	mov	r8, r0
 8011eaa:	a377      	add	r3, pc, #476	; (adr r3, 8012088 <GUI_Touch_Processing+0x27c8>)
 8011eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	4629      	mov	r1, r5
 8011eb4:	f04f 0901 	mov.w	r9, #1
 8011eb8:	f7ee fe26 	bl	8000b08 <__aeabi_dcmple>
 8011ebc:	b900      	cbnz	r0, 8011ec0 <GUI_Touch_Processing+0x2600>
 8011ebe:	4681      	mov	r9, r0
 8011ec0:	9b00      	ldr	r3, [sp, #0]
 8011ec2:	ea08 0809 	and.w	r8, r8, r9
 8011ec6:	ea13 0f08 	tst.w	r3, r8
 8011eca:	d006      	beq.n	8011eda <GUI_Touch_Processing+0x261a>
 8011ecc:	9b03      	ldr	r3, [sp, #12]
 8011ece:	b123      	cbz	r3, 8011eda <GUI_Touch_Processing+0x261a>
					GUI_screen_state = GraphSet2_Screen;
 8011ed0:	230d      	movs	r3, #13
 8011ed2:	f88b 3000 	strb.w	r3, [fp]
 8011ed6:	f7fd bd81 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8011eda:	a36d      	add	r3, pc, #436	; (adr r3, 8012090 <GUI_Touch_Processing+0x27d0>)
 8011edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	4629      	mov	r1, r5
 8011ee4:	f04f 0801 	mov.w	r8, #1
 8011ee8:	f7ee fe18 	bl	8000b1c <__aeabi_dcmpge>
 8011eec:	b900      	cbnz	r0, 8011ef0 <GUI_Touch_Processing+0x2630>
 8011eee:	4680      	mov	r8, r0
 8011ef0:	a369      	add	r3, pc, #420	; (adr r3, 8012098 <GUI_Touch_Processing+0x27d8>)
 8011ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	4629      	mov	r1, r5
 8011efa:	f04f 0901 	mov.w	r9, #1
 8011efe:	f7ee fe03 	bl	8000b08 <__aeabi_dcmple>
 8011f02:	b900      	cbnz	r0, 8011f06 <GUI_Touch_Processing+0x2646>
 8011f04:	4681      	mov	r9, r0
 8011f06:	ea08 0809 	and.w	r8, r8, r9
 8011f0a:	a365      	add	r3, pc, #404	; (adr r3, 80120a0 <GUI_Touch_Processing+0x27e0>)
 8011f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f10:	4630      	mov	r0, r6
 8011f12:	4639      	mov	r1, r7
 8011f14:	fa5f f888 	uxtb.w	r8, r8
 8011f18:	f04f 0901 	mov.w	r9, #1
 8011f1c:	f7ee fdfe 	bl	8000b1c <__aeabi_dcmpge>
 8011f20:	b900      	cbnz	r0, 8011f24 <GUI_Touch_Processing+0x2664>
 8011f22:	4681      	mov	r9, r0
 8011f24:	a360      	add	r3, pc, #384	; (adr r3, 80120a8 <GUI_Touch_Processing+0x27e8>)
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	4639      	mov	r1, r7
 8011f2e:	f04f 0a01 	mov.w	sl, #1
 8011f32:	f7ee fde9 	bl	8000b08 <__aeabi_dcmple>
 8011f36:	b900      	cbnz	r0, 8011f3a <GUI_Touch_Processing+0x267a>
 8011f38:	4682      	mov	sl, r0
 8011f3a:	ea09 090a 	and.w	r9, r9, sl
 8011f3e:	f019 0f01 	tst.w	r9, #1
 8011f42:	d028      	beq.n	8011f96 <GUI_Touch_Processing+0x26d6>
 8011f44:	f1b8 0f00 	cmp.w	r8, #0
 8011f48:	d025      	beq.n	8011f96 <GUI_Touch_Processing+0x26d6>
					Mode_EL = !Mode_EL;
 8011f4a:	4c67      	ldr	r4, [pc, #412]	; (80120e8 <GUI_Touch_Processing+0x2828>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011f4c:	4b67      	ldr	r3, [pc, #412]	; (80120ec <GUI_Touch_Processing+0x282c>)
					Mode_EL = !Mode_EL;
 8011f4e:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011f50:	4867      	ldr	r0, [pc, #412]	; (80120f0 <GUI_Touch_Processing+0x2830>)
					Mode_EL = !Mode_EL;
 8011f52:	2a00      	cmp	r2, #0
 8011f54:	bf0c      	ite	eq
 8011f56:	2201      	moveq	r2, #1
 8011f58:	2200      	movne	r2, #0
 8011f5a:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011f5c:	bf18      	it	ne
 8011f5e:	4618      	movne	r0, r3
 8011f60:	4a64      	ldr	r2, [pc, #400]	; (80120f4 <GUI_Touch_Processing+0x2834>)
 8011f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011f66:	f7fb fe3b 	bl	800dbe0 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011f6a:	7822      	ldrb	r2, [r4, #0]
 8011f6c:	4b62      	ldr	r3, [pc, #392]	; (80120f8 <GUI_Touch_Processing+0x2838>)
 8011f6e:	b982      	cbnz	r2, 8011f92 <GUI_Touch_Processing+0x26d2>
 8011f70:	4a62      	ldr	r2, [pc, #392]	; (80120fc <GUI_Touch_Processing+0x283c>)
 8011f72:	edd2 0a00 	vldr	s1, [r2]
 8011f76:	ed93 0a00 	vldr	s0, [r3]
 8011f7a:	f007 f91f 	bl	80191bc <Rabs_calc_Factor2_Settings_change>
 8011f7e:	4b60      	ldr	r3, [pc, #384]	; (8012100 <GUI_Touch_Processing+0x2840>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8011f80:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011f82:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8011f86:	21ca      	movs	r1, #202	; 0xca
 8011f88:	20b6      	movs	r0, #182	; 0xb6
 8011f8a:	f002 f913 	bl	80141b4 <GUI_Switch_ButtonActive>
 8011f8e:	f7fd bd25 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011f92:	4a5c      	ldr	r2, [pc, #368]	; (8012104 <GUI_Touch_Processing+0x2844>)
 8011f94:	e7ed      	b.n	8011f72 <GUI_Touch_Processing+0x26b2>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 8011f96:	a346      	add	r3, pc, #280	; (adr r3, 80120b0 <GUI_Touch_Processing+0x27f0>)
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	4639      	mov	r1, r7
 8011fa0:	f04f 0901 	mov.w	r9, #1
 8011fa4:	f7ee fdba 	bl	8000b1c <__aeabi_dcmpge>
 8011fa8:	b900      	cbnz	r0, 8011fac <GUI_Touch_Processing+0x26ec>
 8011faa:	4681      	mov	r9, r0
 8011fac:	a342      	add	r3, pc, #264	; (adr r3, 80120b8 <GUI_Touch_Processing+0x27f8>)
 8011fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb2:	4630      	mov	r0, r6
 8011fb4:	4639      	mov	r1, r7
 8011fb6:	f04f 0a01 	mov.w	sl, #1
 8011fba:	f7ee fda5 	bl	8000b08 <__aeabi_dcmple>
 8011fbe:	b900      	cbnz	r0, 8011fc2 <GUI_Touch_Processing+0x2702>
 8011fc0:	4682      	mov	sl, r0
 8011fc2:	ea09 090a 	and.w	r9, r9, sl
 8011fc6:	f019 0f01 	tst.w	r9, #1
 8011fca:	d011      	beq.n	8011ff0 <GUI_Touch_Processing+0x2730>
 8011fcc:	f1b8 0f00 	cmp.w	r8, #0
 8011fd0:	d00e      	beq.n	8011ff0 <GUI_Touch_Processing+0x2730>
					Bluetooth = !Bluetooth;
 8011fd2:	4b4d      	ldr	r3, [pc, #308]	; (8012108 <GUI_Touch_Processing+0x2848>)
 8011fd4:	781a      	ldrb	r2, [r3, #0]
 8011fd6:	fab2 f282 	clz	r2, r2
 8011fda:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8011fdc:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8011fe0:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8011fe2:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8011fe4:	f002 f88c 	bl	8014100 <GUI_Switch_Button>
					GUI_Up_Panel();
 8011fe8:	f7fc fa3e 	bl	800e468 <GUI_Up_Panel>
 8011fec:	f7fd bcf6 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //PPF_Bands
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	4b46      	ldr	r3, [pc, #280]	; (801210c <GUI_Touch_Processing+0x284c>)
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	4629      	mov	r1, r5
 8011ff8:	f04f 0901 	mov.w	r9, #1
 8011ffc:	f7ee fd8e 	bl	8000b1c <__aeabi_dcmpge>
 8012000:	b900      	cbnz	r0, 8012004 <GUI_Touch_Processing+0x2744>
 8012002:	4681      	mov	r9, r0
 8012004:	a32e      	add	r3, pc, #184	; (adr r3, 80120c0 <GUI_Touch_Processing+0x2800>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	4620      	mov	r0, r4
 801200c:	4629      	mov	r1, r5
 801200e:	f04f 0801 	mov.w	r8, #1
 8012012:	f7ee fd79 	bl	8000b08 <__aeabi_dcmple>
 8012016:	b900      	cbnz	r0, 801201a <GUI_Touch_Processing+0x275a>
 8012018:	4680      	mov	r8, r0
 801201a:	a32b      	add	r3, pc, #172	; (adr r3, 80120c8 <GUI_Touch_Processing+0x2808>)
 801201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012020:	4630      	mov	r0, r6
 8012022:	4639      	mov	r1, r7
 8012024:	ea09 0808 	and.w	r8, r9, r8
 8012028:	f04f 0901 	mov.w	r9, #1
 801202c:	f7ee fd76 	bl	8000b1c <__aeabi_dcmpge>
 8012030:	b900      	cbnz	r0, 8012034 <GUI_Touch_Processing+0x2774>
 8012032:	4681      	mov	r9, r0
 8012034:	ea08 0809 	and.w	r8, r8, r9
 8012038:	f018 0f01 	tst.w	r8, #1
 801203c:	d076      	beq.n	801212c <GUI_Touch_Processing+0x286c>
 801203e:	a324      	add	r3, pc, #144	; (adr r3, 80120d0 <GUI_Touch_Processing+0x2810>)
 8012040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012044:	4630      	mov	r0, r6
 8012046:	4639      	mov	r1, r7
 8012048:	f04f 0801 	mov.w	r8, #1
 801204c:	f7ee fd5c 	bl	8000b08 <__aeabi_dcmple>
 8012050:	b900      	cbnz	r0, 8012054 <GUI_Touch_Processing+0x2794>
 8012052:	4680      	mov	r8, r0
 8012054:	f018 0fff 	tst.w	r8, #255	; 0xff
 8012058:	d068      	beq.n	801212c <GUI_Touch_Processing+0x286c>
					Graph_Field ^= PPF_Bands;
 801205a:	4b2d      	ldr	r3, [pc, #180]	; (8012110 <GUI_Touch_Processing+0x2850>)
 801205c:	781a      	ldrb	r2, [r3, #0]
 801205e:	f082 0201 	eor.w	r2, r2, #1
 8012062:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8012064:	f240 1147 	movw	r1, #327	; 0x147
 8012068:	f002 0201 	and.w	r2, r2, #1
 801206c:	20c8      	movs	r0, #200	; 0xc8
 801206e:	f001 ffd7 	bl	8014020 <GUI_CheckBox>
 8012072:	f7fd bcb3 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8012076:	bf00      	nop
 8012078:	99999999 	.word	0x99999999
 801207c:	4091a399 	.word	0x4091a399
 8012080:	33333333 	.word	0x33333333
 8012084:	407aff33 	.word	0x407aff33
 8012088:	66666666 	.word	0x66666666
 801208c:	4081f866 	.word	0x4081f866
 8012090:	cccccccd 	.word	0xcccccccd
 8012094:	407e24cc 	.word	0x407e24cc
 8012098:	33333333 	.word	0x33333333
 801209c:	40838b33 	.word	0x40838b33
 80120a0:	66666666 	.word	0x66666666
 80120a4:	4080ba66 	.word	0x4080ba66
 80120a8:	33333333 	.word	0x33333333
 80120ac:	40853333 	.word	0x40853333
 80120b0:	99999999 	.word	0x99999999
 80120b4:	40863199 	.word	0x40863199
 80120b8:	66666666 	.word	0x66666666
 80120bc:	408aaa66 	.word	0x408aaa66
 80120c0:	cccccccd 	.word	0xcccccccd
 80120c4:	408508cc 	.word	0x408508cc
 80120c8:	66666666 	.word	0x66666666
 80120cc:	408b1466 	.word	0x408b1466
 80120d0:	33333333 	.word	0x33333333
 80120d4:	408f8d33 	.word	0x408f8d33
 80120d8:	20004ccc 	.word	0x20004ccc
 80120dc:	2008acd5 	.word	0x2008acd5
 80120e0:	20000232 	.word	0x20000232
 80120e4:	4093e000 	.word	0x4093e000
 80120e8:	20000a50 	.word	0x20000a50
 80120ec:	08101838 	.word	0x08101838
 80120f0:	08100838 	.word	0x08100838
 80120f4:	2004cc00 	.word	0x2004cc00
 80120f8:	20004fec 	.word	0x20004fec
 80120fc:	20004fe8 	.word	0x20004fe8
 8012100:	20004ff4 	.word	0x20004ff4
 8012104:	20004fe4 	.word	0x20004fe4
 8012108:	2008acda 	.word	0x2008acda
 801210c:	40809000 	.word	0x40809000
 8012110:	20004ca2 	.word	0x20004ca2
 8012114:	33333333 	.word	0x33333333
 8012118:	40867133 	.word	0x40867133
 801211c:	33333333 	.word	0x33333333
 8012120:	40053333 	.word	0x40053333
 8012124:	00000000 	.word	0x00000000
 8012128:	40623800 	.word	0x40623800
 801212c:	9b00      	ldr	r3, [sp, #0]
 801212e:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012130:	4620      	mov	r0, r4
 8012132:	ea03 0802 	and.w	r8, r3, r2
 8012136:	4629      	mov	r1, r5
 8012138:	a3c7      	add	r3, pc, #796	; (adr r3, 8012458 <GUI_Touch_Processing+0x2b98>)
 801213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213e:	f04f 0901 	mov.w	r9, #1
 8012142:	f7ee fceb 	bl	8000b1c <__aeabi_dcmpge>
 8012146:	b900      	cbnz	r0, 801214a <GUI_Touch_Processing+0x288a>
 8012148:	4681      	mov	r9, r0
 801214a:	a3d1      	add	r3, pc, #836	; (adr r3, 8012490 <GUI_Touch_Processing+0x2bd0>)
 801214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012150:	4620      	mov	r0, r4
 8012152:	4629      	mov	r1, r5
 8012154:	f04f 0a01 	mov.w	sl, #1
 8012158:	f7ee fcd6 	bl	8000b08 <__aeabi_dcmple>
 801215c:	b900      	cbnz	r0, 8012160 <GUI_Touch_Processing+0x28a0>
 801215e:	4682      	mov	sl, r0
 8012160:	ea09 030a 	and.w	r3, r9, sl
 8012164:	07d9      	lsls	r1, r3, #31
 8012166:	d503      	bpl.n	8012170 <GUI_Touch_Processing+0x28b0>
 8012168:	f1b8 0f00 	cmp.w	r8, #0
 801216c:	f47e abfb 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012170:	a3c9      	add	r3, pc, #804	; (adr r3, 8012498 <GUI_Touch_Processing+0x2bd8>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	4620      	mov	r0, r4
 8012178:	4629      	mov	r1, r5
 801217a:	f04f 0901 	mov.w	r9, #1
 801217e:	f7ee fccd 	bl	8000b1c <__aeabi_dcmpge>
 8012182:	b900      	cbnz	r0, 8012186 <GUI_Touch_Processing+0x28c6>
 8012184:	4681      	mov	r9, r0
 8012186:	a3a2      	add	r3, pc, #648	; (adr r3, 8012410 <GUI_Touch_Processing+0x2b50>)
 8012188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218c:	4620      	mov	r0, r4
 801218e:	4629      	mov	r1, r5
 8012190:	f04f 0a01 	mov.w	sl, #1
 8012194:	f7ee fcb8 	bl	8000b08 <__aeabi_dcmple>
 8012198:	b900      	cbnz	r0, 801219c <GUI_Touch_Processing+0x28dc>
 801219a:	4682      	mov	sl, r0
 801219c:	ea09 030a 	and.w	r3, r9, sl
 80121a0:	07da      	lsls	r2, r3, #31
 80121a2:	d529      	bpl.n	80121f8 <GUI_Touch_Processing+0x2938>
 80121a4:	f1b8 0f00 	cmp.w	r8, #0
 80121a8:	d026      	beq.n	80121f8 <GUI_Touch_Processing+0x2938>
					WriteSDFLASH_t(sdfile_cnt);
 80121aa:	4bb1      	ldr	r3, [pc, #708]	; (8012470 <GUI_Touch_Processing+0x2bb0>)
 80121ac:	2100      	movs	r1, #0
 80121ae:	8818      	ldrh	r0, [r3, #0]
 80121b0:	f007 f896 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80121b4:	4baf      	ldr	r3, [pc, #700]	; (8012474 <GUI_Touch_Processing+0x2bb4>)
 80121b6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80121b8:	1e5a      	subs	r2, r3, #1
 80121ba:	2a05      	cmp	r2, #5
 80121bc:	d804      	bhi.n	80121c8 <GUI_Touch_Processing+0x2908>
 80121be:	e8df f002 	tbb	[pc, r2]
 80121c2:	0307      	.short	0x0307
 80121c4:	11160c03 	.word	0x11160c03
					GUI_screen_state = Prev_Inf_Screen;
 80121c8:	f88b 3000 	strb.w	r3, [fp]
 80121cc:	f7fd bc06 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80121d0:	2301      	movs	r3, #1
 80121d2:	f88b 3000 	strb.w	r3, [fp]
 80121d6:	f7fd bc01 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80121da:	2304      	movs	r3, #4
 80121dc:	f88b 3000 	strb.w	r3, [fp]
 80121e0:	f7fd bbfc 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80121e4:	2306      	movs	r3, #6
 80121e6:	f88b 3000 	strb.w	r3, [fp]
 80121ea:	f7fd bbf7 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80121ee:	2305      	movs	r3, #5
 80121f0:	f88b 3000 	strb.w	r3, [fp]
 80121f4:	f7fd bbf2 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80121f8:	a385      	add	r3, pc, #532	; (adr r3, 8012410 <GUI_Touch_Processing+0x2b50>)
 80121fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fe:	4620      	mov	r0, r4
 8012200:	4629      	mov	r1, r5
 8012202:	f04f 0901 	mov.w	r9, #1
 8012206:	f7ee fc89 	bl	8000b1c <__aeabi_dcmpge>
 801220a:	b900      	cbnz	r0, 801220e <GUI_Touch_Processing+0x294e>
 801220c:	4681      	mov	r9, r0
 801220e:	a382      	add	r3, pc, #520	; (adr r3, 8012418 <GUI_Touch_Processing+0x2b58>)
 8012210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012214:	4620      	mov	r0, r4
 8012216:	4629      	mov	r1, r5
 8012218:	f04f 0a01 	mov.w	sl, #1
 801221c:	f7ee fc74 	bl	8000b08 <__aeabi_dcmple>
 8012220:	b900      	cbnz	r0, 8012224 <GUI_Touch_Processing+0x2964>
 8012222:	4682      	mov	sl, r0
 8012224:	ea09 030a 	and.w	r3, r9, sl
 8012228:	07db      	lsls	r3, r3, #31
 801222a:	d503      	bpl.n	8012234 <GUI_Touch_Processing+0x2974>
 801222c:	f1b8 0f00 	cmp.w	r8, #0
 8012230:	f47d ac14 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8012234:	a37a      	add	r3, pc, #488	; (adr r3, 8012420 <GUI_Touch_Processing+0x2b60>)
 8012236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223a:	4620      	mov	r0, r4
 801223c:	4629      	mov	r1, r5
 801223e:	f04f 0801 	mov.w	r8, #1
 8012242:	f7ee fc6b 	bl	8000b1c <__aeabi_dcmpge>
 8012246:	b900      	cbnz	r0, 801224a <GUI_Touch_Processing+0x298a>
 8012248:	4680      	mov	r8, r0
 801224a:	a377      	add	r3, pc, #476	; (adr r3, 8012428 <GUI_Touch_Processing+0x2b68>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	4620      	mov	r0, r4
 8012252:	4629      	mov	r1, r5
 8012254:	f04f 0901 	mov.w	r9, #1
 8012258:	f7ee fc56 	bl	8000b08 <__aeabi_dcmple>
 801225c:	b900      	cbnz	r0, 8012260 <GUI_Touch_Processing+0x29a0>
 801225e:	4681      	mov	r9, r0
 8012260:	ea08 0409 	and.w	r4, r8, r9
 8012264:	2200      	movs	r2, #0
 8012266:	4b84      	ldr	r3, [pc, #528]	; (8012478 <GUI_Touch_Processing+0x2bb8>)
 8012268:	4630      	mov	r0, r6
 801226a:	4639      	mov	r1, r7
 801226c:	b2e4      	uxtb	r4, r4
 801226e:	f04f 0501 	mov.w	r5, #1
 8012272:	f7ee fc53 	bl	8000b1c <__aeabi_dcmpge>
 8012276:	b900      	cbnz	r0, 801227a <GUI_Touch_Processing+0x29ba>
 8012278:	4605      	mov	r5, r0
 801227a:	a36d      	add	r3, pc, #436	; (adr r3, 8012430 <GUI_Touch_Processing+0x2b70>)
 801227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012280:	4630      	mov	r0, r6
 8012282:	4639      	mov	r1, r7
 8012284:	f04f 0801 	mov.w	r8, #1
 8012288:	f7ee fc3e 	bl	8000b08 <__aeabi_dcmple>
 801228c:	b900      	cbnz	r0, 8012290 <GUI_Touch_Processing+0x29d0>
 801228e:	4680      	mov	r8, r0
 8012290:	ea05 0508 	and.w	r5, r5, r8
 8012294:	07e8      	lsls	r0, r5, #31
 8012296:	d510      	bpl.n	80122ba <GUI_Touch_Processing+0x29fa>
 8012298:	b17c      	cbz	r4, 80122ba <GUI_Touch_Processing+0x29fa>
					if (Language_status == Ru) Language_status=En;
 801229a:	4b78      	ldr	r3, [pc, #480]	; (801247c <GUI_Touch_Processing+0x2bbc>)
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	b923      	cbnz	r3, 80122aa <GUI_Touch_Processing+0x29ea>
 80122a0:	4b76      	ldr	r3, [pc, #472]	; (801247c <GUI_Touch_Processing+0x2bbc>)
 80122a2:	2201      	movs	r2, #1
 80122a4:	701a      	strb	r2, [r3, #0]
 80122a6:	f7fd bb99 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	f47d ab96 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
 80122b0:	4b72      	ldr	r3, [pc, #456]	; (801247c <GUI_Touch_Processing+0x2bbc>)
 80122b2:	2200      	movs	r2, #0
 80122b4:	701a      	strb	r2, [r3, #0]
 80122b6:	f7fd bb91 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 80122ba:	a35f      	add	r3, pc, #380	; (adr r3, 8012438 <GUI_Touch_Processing+0x2b78>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	4630      	mov	r0, r6
 80122c2:	4639      	mov	r1, r7
 80122c4:	f04f 0501 	mov.w	r5, #1
 80122c8:	f7ee fc28 	bl	8000b1c <__aeabi_dcmpge>
 80122cc:	b900      	cbnz	r0, 80122d0 <GUI_Touch_Processing+0x2a10>
 80122ce:	4605      	mov	r5, r0
 80122d0:	a35b      	add	r3, pc, #364	; (adr r3, 8012440 <GUI_Touch_Processing+0x2b80>)
 80122d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d6:	4630      	mov	r0, r6
 80122d8:	4639      	mov	r1, r7
 80122da:	f04f 0801 	mov.w	r8, #1
 80122de:	f7ee fc13 	bl	8000b08 <__aeabi_dcmple>
 80122e2:	b900      	cbnz	r0, 80122e6 <GUI_Touch_Processing+0x2a26>
 80122e4:	4680      	mov	r8, r0
 80122e6:	ea05 0508 	and.w	r5, r5, r8
 80122ea:	07e9      	lsls	r1, r5, #31
 80122ec:	f57d ab76 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 80122f0:	2c00      	cmp	r4, #0
 80122f2:	f43d ab73 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
					GUI_screen_state = Information_Screen;
 80122f6:	2311      	movs	r3, #17
 80122f8:	f88b 3000 	strb.w	r3, [fp]
 80122fc:	f7fd bb6e 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8012300:	4b5f      	ldr	r3, [pc, #380]	; (8012480 <GUI_Touch_Processing+0x2bc0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8012302:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8012306:	220d      	movs	r2, #13
 8012308:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 801230a:	f7ee f91b 	bl	8000544 <__aeabi_i2d>
 801230e:	4604      	mov	r4, r0
 8012310:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012314:	460d      	mov	r5, r1
 8012316:	f7ee f915 	bl	8000544 <__aeabi_i2d>
 801231a:	a34b      	add	r3, pc, #300	; (adr r3, 8012448 <GUI_Touch_Processing+0x2b88>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	e9cd 0100 	strd	r0, r1, [sp]
 8012324:	f04f 0801 	mov.w	r8, #1
 8012328:	f7ee fbf8 	bl	8000b1c <__aeabi_dcmpge>
 801232c:	b900      	cbnz	r0, 8012330 <GUI_Touch_Processing+0x2a70>
 801232e:	4680      	mov	r8, r0
 8012330:	2200      	movs	r2, #0
 8012332:	4b54      	ldr	r3, [pc, #336]	; (8012484 <GUI_Touch_Processing+0x2bc4>)
 8012334:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012338:	fa5f f888 	uxtb.w	r8, r8
 801233c:	f04f 0701 	mov.w	r7, #1
 8012340:	f7ee fbe2 	bl	8000b08 <__aeabi_dcmple>
 8012344:	b900      	cbnz	r0, 8012348 <GUI_Touch_Processing+0x2a88>
 8012346:	4607      	mov	r7, r0
 8012348:	a341      	add	r3, pc, #260	; (adr r3, 8012450 <GUI_Touch_Processing+0x2b90>)
 801234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234e:	4620      	mov	r0, r4
 8012350:	4629      	mov	r1, r5
 8012352:	b2ff      	uxtb	r7, r7
 8012354:	f04f 0601 	mov.w	r6, #1
 8012358:	f7ee fbe0 	bl	8000b1c <__aeabi_dcmpge>
 801235c:	b900      	cbnz	r0, 8012360 <GUI_Touch_Processing+0x2aa0>
 801235e:	4606      	mov	r6, r0
 8012360:	a33d      	add	r3, pc, #244	; (adr r3, 8012458 <GUI_Touch_Processing+0x2b98>)
 8012362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012366:	4620      	mov	r0, r4
 8012368:	4629      	mov	r1, r5
 801236a:	f04f 0901 	mov.w	r9, #1
 801236e:	f7ee fbcb 	bl	8000b08 <__aeabi_dcmple>
 8012372:	b900      	cbnz	r0, 8012376 <GUI_Touch_Processing+0x2ab6>
 8012374:	4681      	mov	r9, r0
 8012376:	ea06 0609 	and.w	r6, r6, r9
 801237a:	ea18 0f06 	tst.w	r8, r6
 801237e:	d005      	beq.n	801238c <GUI_Touch_Processing+0x2acc>
 8012380:	b127      	cbz	r7, 801238c <GUI_Touch_Processing+0x2acc>
					GUI_screen_state = GraphSet1_Screen;
 8012382:	230c      	movs	r3, #12
 8012384:	f88b 3000 	strb.w	r3, [fp]
 8012388:	f7fd bb28 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //PPF_Bands
 801238c:	2200      	movs	r2, #0
 801238e:	4b3e      	ldr	r3, [pc, #248]	; (8012488 <GUI_Touch_Processing+0x2bc8>)
 8012390:	4620      	mov	r0, r4
 8012392:	4629      	mov	r1, r5
 8012394:	f04f 0601 	mov.w	r6, #1
 8012398:	f7ee fbc0 	bl	8000b1c <__aeabi_dcmpge>
 801239c:	b900      	cbnz	r0, 80123a0 <GUI_Touch_Processing+0x2ae0>
 801239e:	4606      	mov	r6, r0
 80123a0:	a32f      	add	r3, pc, #188	; (adr r3, 8012460 <GUI_Touch_Processing+0x2ba0>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	4620      	mov	r0, r4
 80123a8:	4629      	mov	r1, r5
 80123aa:	f04f 0901 	mov.w	r9, #1
 80123ae:	f7ee fbab 	bl	8000b08 <__aeabi_dcmple>
 80123b2:	b900      	cbnz	r0, 80123b6 <GUI_Touch_Processing+0x2af6>
 80123b4:	4681      	mov	r9, r0
 80123b6:	ea06 0609 	and.w	r6, r6, r9
 80123ba:	a32b      	add	r3, pc, #172	; (adr r3, 8012468 <GUI_Touch_Processing+0x2ba8>)
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123c4:	b2f6      	uxtb	r6, r6
 80123c6:	f04f 0901 	mov.w	r9, #1
 80123ca:	f7ee fba7 	bl	8000b1c <__aeabi_dcmpge>
 80123ce:	b900      	cbnz	r0, 80123d2 <GUI_Touch_Processing+0x2b12>
 80123d0:	4681      	mov	r9, r0
 80123d2:	a319      	add	r3, pc, #100	; (adr r3, 8012438 <GUI_Touch_Processing+0x2b78>)
 80123d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123dc:	f04f 0a01 	mov.w	sl, #1
 80123e0:	f7ee fb92 	bl	8000b08 <__aeabi_dcmple>
 80123e4:	b900      	cbnz	r0, 80123e8 <GUI_Touch_Processing+0x2b28>
 80123e6:	4682      	mov	sl, r0
 80123e8:	ea09 090a 	and.w	r9, r9, sl
 80123ec:	f019 0f01 	tst.w	r9, #1
 80123f0:	d056      	beq.n	80124a0 <GUI_Touch_Processing+0x2be0>
 80123f2:	2e00      	cmp	r6, #0
 80123f4:	d054      	beq.n	80124a0 <GUI_Touch_Processing+0x2be0>
					Graph_Field ^= EbEr_graph;
 80123f6:	4b25      	ldr	r3, [pc, #148]	; (801248c <GUI_Touch_Processing+0x2bcc>)
 80123f8:	781a      	ldrb	r2, [r3, #0]
 80123fa:	f082 0202 	eor.w	r2, r2, #2
 80123fe:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8012400:	2146      	movs	r1, #70	; 0x46
 8012402:	f002 0202 	and.w	r2, r2, #2
 8012406:	20c8      	movs	r0, #200	; 0xc8
 8012408:	f001 fe0a 	bl	8014020 <GUI_CheckBox>
 801240c:	f7fd bae6 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8012410:	00000000 	.word	0x00000000
 8012414:	40623800 	.word	0x40623800
 8012418:	99999999 	.word	0x99999999
 801241c:	40720d99 	.word	0x40720d99
 8012420:	33333333 	.word	0x33333333
 8012424:	40353333 	.word	0x40353333
 8012428:	00000000 	.word	0x00000000
 801242c:	4084b400 	.word	0x4084b400
 8012430:	00000000 	.word	0x00000000
 8012434:	4073e000 	.word	0x4073e000
 8012438:	99999999 	.word	0x99999999
 801243c:	40748999 	.word	0x40748999
 8012440:	99999999 	.word	0x99999999
 8012444:	407cd199 	.word	0x407cd199
 8012448:	99999999 	.word	0x99999999
 801244c:	4091a399 	.word	0x4091a399
 8012450:	33333333 	.word	0x33333333
 8012454:	407aff33 	.word	0x407aff33
 8012458:	66666666 	.word	0x66666666
 801245c:	4081f866 	.word	0x4081f866
 8012460:	cccccccd 	.word	0xcccccccd
 8012464:	408508cc 	.word	0x408508cc
 8012468:	00000000 	.word	0x00000000
 801246c:	40673000 	.word	0x40673000
 8012470:	20004ccc 	.word	0x20004ccc
 8012474:	2008acd5 	.word	0x2008acd5
 8012478:	406a8000 	.word	0x406a8000
 801247c:	20004ca3 	.word	0x20004ca3
 8012480:	20000232 	.word	0x20000232
 8012484:	4093e000 	.word	0x4093e000
 8012488:	40809000 	.word	0x40809000
 801248c:	20004ca2 	.word	0x20004ca2
 8012490:	33333333 	.word	0x33333333
 8012494:	40867133 	.word	0x40867133
 8012498:	33333333 	.word	0x33333333
 801249c:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPF_Bands
 80124a0:	a3d1      	add	r3, pc, #836	; (adr r3, 80127e8 <GUI_Touch_Processing+0x2f28>)
 80124a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124aa:	f04f 0901 	mov.w	r9, #1
 80124ae:	f7ee fb35 	bl	8000b1c <__aeabi_dcmpge>
 80124b2:	b900      	cbnz	r0, 80124b6 <GUI_Touch_Processing+0x2bf6>
 80124b4:	4681      	mov	r9, r0
 80124b6:	a3ce      	add	r3, pc, #824	; (adr r3, 80127f0 <GUI_Touch_Processing+0x2f30>)
 80124b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124c0:	f04f 0a01 	mov.w	sl, #1
 80124c4:	f7ee fb20 	bl	8000b08 <__aeabi_dcmple>
 80124c8:	b900      	cbnz	r0, 80124cc <GUI_Touch_Processing+0x2c0c>
 80124ca:	4682      	mov	sl, r0
 80124cc:	ea09 090a 	and.w	r9, r9, sl
 80124d0:	f019 0f01 	tst.w	r9, #1
 80124d4:	d00d      	beq.n	80124f2 <GUI_Touch_Processing+0x2c32>
 80124d6:	b166      	cbz	r6, 80124f2 <GUI_Touch_Processing+0x2c32>
					Graph_Field ^= V_lambda;
 80124d8:	4bb5      	ldr	r3, [pc, #724]	; (80127b0 <GUI_Touch_Processing+0x2ef0>)
 80124da:	781a      	ldrb	r2, [r3, #0]
 80124dc:	f082 0204 	eor.w	r2, r2, #4
 80124e0:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80124e2:	2185      	movs	r1, #133	; 0x85
 80124e4:	f002 0204 	and.w	r2, r2, #4
 80124e8:	20c8      	movs	r0, #200	; 0xc8
 80124ea:	f001 fd99 	bl	8014020 <GUI_CheckBox>
 80124ee:	f7fd ba75 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80124f2:	a397      	add	r3, pc, #604	; (adr r3, 8012750 <GUI_Touch_Processing+0x2e90>)
 80124f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f8:	4620      	mov	r0, r4
 80124fa:	4629      	mov	r1, r5
 80124fc:	ea08 0607 	and.w	r6, r8, r7
 8012500:	f04f 0901 	mov.w	r9, #1
 8012504:	f7ee fb0a 	bl	8000b1c <__aeabi_dcmpge>
 8012508:	b900      	cbnz	r0, 801250c <GUI_Touch_Processing+0x2c4c>
 801250a:	4681      	mov	r9, r0
 801250c:	a392      	add	r3, pc, #584	; (adr r3, 8012758 <GUI_Touch_Processing+0x2e98>)
 801250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012512:	4620      	mov	r0, r4
 8012514:	4629      	mov	r1, r5
 8012516:	f04f 0a01 	mov.w	sl, #1
 801251a:	f7ee faf5 	bl	8000b08 <__aeabi_dcmple>
 801251e:	b900      	cbnz	r0, 8012522 <GUI_Touch_Processing+0x2c62>
 8012520:	4682      	mov	sl, r0
 8012522:	ea09 030a 	and.w	r3, r9, sl
 8012526:	07da      	lsls	r2, r3, #31
 8012528:	d502      	bpl.n	8012530 <GUI_Touch_Processing+0x2c70>
 801252a:	2e00      	cmp	r6, #0
 801252c:	f47e aa1b 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012530:	a38b      	add	r3, pc, #556	; (adr r3, 8012760 <GUI_Touch_Processing+0x2ea0>)
 8012532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012536:	4620      	mov	r0, r4
 8012538:	4629      	mov	r1, r5
 801253a:	f04f 0901 	mov.w	r9, #1
 801253e:	f7ee faed 	bl	8000b1c <__aeabi_dcmpge>
 8012542:	b900      	cbnz	r0, 8012546 <GUI_Touch_Processing+0x2c86>
 8012544:	4681      	mov	r9, r0
 8012546:	a388      	add	r3, pc, #544	; (adr r3, 8012768 <GUI_Touch_Processing+0x2ea8>)
 8012548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254c:	4620      	mov	r0, r4
 801254e:	4629      	mov	r1, r5
 8012550:	f04f 0a01 	mov.w	sl, #1
 8012554:	f7ee fad8 	bl	8000b08 <__aeabi_dcmple>
 8012558:	b900      	cbnz	r0, 801255c <GUI_Touch_Processing+0x2c9c>
 801255a:	4682      	mov	sl, r0
 801255c:	ea09 030a 	and.w	r3, r9, sl
 8012560:	07db      	lsls	r3, r3, #31
 8012562:	f140 842f 	bpl.w	8012dc4 <GUI_Touch_Processing+0x3504>
 8012566:	2e00      	cmp	r6, #0
 8012568:	f000 842c 	beq.w	8012dc4 <GUI_Touch_Processing+0x3504>
					WriteSDFLASH_t(sdfile_cnt);
 801256c:	4b91      	ldr	r3, [pc, #580]	; (80127b4 <GUI_Touch_Processing+0x2ef4>)
 801256e:	2100      	movs	r1, #0
 8012570:	8818      	ldrh	r0, [r3, #0]
 8012572:	f006 feb5 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012576:	4b90      	ldr	r3, [pc, #576]	; (80127b8 <GUI_Touch_Processing+0x2ef8>)
 8012578:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801257a:	1e5a      	subs	r2, r3, #1
 801257c:	2a05      	cmp	r2, #5
 801257e:	d804      	bhi.n	801258a <GUI_Touch_Processing+0x2cca>
 8012580:	e8df f002 	tbb	[pc, r2]
 8012584:	0c030307 	.word	0x0c030307
 8012588:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 801258a:	f88b 3000 	strb.w	r3, [fp]
 801258e:	f7fd ba25 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012592:	2301      	movs	r3, #1
 8012594:	f88b 3000 	strb.w	r3, [fp]
 8012598:	f7fd ba20 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801259c:	2304      	movs	r3, #4
 801259e:	f88b 3000 	strb.w	r3, [fp]
 80125a2:	f7fd ba1b 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80125a6:	2306      	movs	r3, #6
 80125a8:	f88b 3000 	strb.w	r3, [fp]
 80125ac:	f7fd ba16 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80125b0:	2305      	movs	r3, #5
 80125b2:	f88b 3000 	strb.w	r3, [fp]
 80125b6:	f7fd ba11 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80125ba:	4b80      	ldr	r3, [pc, #512]	; (80127bc <GUI_Touch_Processing+0x2efc>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80125bc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80125c0:	220e      	movs	r2, #14
 80125c2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80125c4:	f7ed ffbe 	bl	8000544 <__aeabi_i2d>
 80125c8:	4604      	mov	r4, r0
 80125ca:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80125ce:	460d      	mov	r5, r1
 80125d0:	f7ed ffb8 	bl	8000544 <__aeabi_i2d>
 80125d4:	a366      	add	r3, pc, #408	; (adr r3, 8012770 <GUI_Touch_Processing+0x2eb0>)
 80125d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125da:	e9cd 0100 	strd	r0, r1, [sp]
 80125de:	f04f 0a01 	mov.w	sl, #1
 80125e2:	f7ee fa9b 	bl	8000b1c <__aeabi_dcmpge>
 80125e6:	b900      	cbnz	r0, 80125ea <GUI_Touch_Processing+0x2d2a>
 80125e8:	4682      	mov	sl, r0
 80125ea:	2200      	movs	r2, #0
 80125ec:	4b74      	ldr	r3, [pc, #464]	; (80127c0 <GUI_Touch_Processing+0x2f00>)
 80125ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125f2:	fa5f fa8a 	uxtb.w	sl, sl
 80125f6:	f04f 0601 	mov.w	r6, #1
 80125fa:	f7ee fa85 	bl	8000b08 <__aeabi_dcmple>
 80125fe:	b900      	cbnz	r0, 8012602 <GUI_Touch_Processing+0x2d42>
 8012600:	4606      	mov	r6, r0
 8012602:	b2f3      	uxtb	r3, r6
 8012604:	9303      	str	r3, [sp, #12]
 8012606:	4620      	mov	r0, r4
 8012608:	a35b      	add	r3, pc, #364	; (adr r3, 8012778 <GUI_Touch_Processing+0x2eb8>)
 801260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260e:	4629      	mov	r1, r5
 8012610:	f04f 0601 	mov.w	r6, #1
 8012614:	f7ee fa82 	bl	8000b1c <__aeabi_dcmpge>
 8012618:	b900      	cbnz	r0, 801261c <GUI_Touch_Processing+0x2d5c>
 801261a:	4606      	mov	r6, r0
 801261c:	a34c      	add	r3, pc, #304	; (adr r3, 8012750 <GUI_Touch_Processing+0x2e90>)
 801261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012622:	4620      	mov	r0, r4
 8012624:	4629      	mov	r1, r5
 8012626:	f04f 0701 	mov.w	r7, #1
 801262a:	f7ee fa6d 	bl	8000b08 <__aeabi_dcmple>
 801262e:	b900      	cbnz	r0, 8012632 <GUI_Touch_Processing+0x2d72>
 8012630:	4607      	mov	r7, r0
 8012632:	403e      	ands	r6, r7
 8012634:	ea1a 0f06 	tst.w	sl, r6
 8012638:	d006      	beq.n	8012648 <GUI_Touch_Processing+0x2d88>
 801263a:	9b03      	ldr	r3, [sp, #12]
 801263c:	b123      	cbz	r3, 8012648 <GUI_Touch_Processing+0x2d88>
					GUI_screen_state = ColorSet2_Screen;
 801263e:	230f      	movs	r3, #15
 8012640:	f88b 3000 	strb.w	r3, [fp]
 8012644:	f7fd b9ca 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8012648:	a34d      	add	r3, pc, #308	; (adr r3, 8012780 <GUI_Touch_Processing+0x2ec0>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	4620      	mov	r0, r4
 8012650:	4629      	mov	r1, r5
 8012652:	f04f 0601 	mov.w	r6, #1
 8012656:	f7ee fa61 	bl	8000b1c <__aeabi_dcmpge>
 801265a:	b900      	cbnz	r0, 801265e <GUI_Touch_Processing+0x2d9e>
 801265c:	4606      	mov	r6, r0
 801265e:	a34a      	add	r3, pc, #296	; (adr r3, 8012788 <GUI_Touch_Processing+0x2ec8>)
 8012660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012664:	4620      	mov	r0, r4
 8012666:	4629      	mov	r1, r5
 8012668:	f04f 0701 	mov.w	r7, #1
 801266c:	f7ee fa4c 	bl	8000b08 <__aeabi_dcmple>
 8012670:	b900      	cbnz	r0, 8012674 <GUI_Touch_Processing+0x2db4>
 8012672:	4607      	mov	r7, r0
 8012674:	403e      	ands	r6, r7
 8012676:	a346      	add	r3, pc, #280	; (adr r3, 8012790 <GUI_Touch_Processing+0x2ed0>)
 8012678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012680:	b2f6      	uxtb	r6, r6
 8012682:	f04f 0701 	mov.w	r7, #1
 8012686:	f7ee fa49 	bl	8000b1c <__aeabi_dcmpge>
 801268a:	b900      	cbnz	r0, 801268e <GUI_Touch_Processing+0x2dce>
 801268c:	4607      	mov	r7, r0
 801268e:	a342      	add	r3, pc, #264	; (adr r3, 8012798 <GUI_Touch_Processing+0x2ed8>)
 8012690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012698:	f04f 0801 	mov.w	r8, #1
 801269c:	f7ee fa34 	bl	8000b08 <__aeabi_dcmple>
 80126a0:	b900      	cbnz	r0, 80126a4 <GUI_Touch_Processing+0x2de4>
 80126a2:	4680      	mov	r8, r0
 80126a4:	ea07 0708 	and.w	r7, r7, r8
 80126a8:	07ff      	lsls	r7, r7, #31
 80126aa:	d526      	bpl.n	80126fa <GUI_Touch_Processing+0x2e3a>
 80126ac:	b32e      	cbz	r6, 80126fa <GUI_Touch_Processing+0x2e3a>
					Mode_EL = !Mode_EL;
 80126ae:	4c45      	ldr	r4, [pc, #276]	; (80127c4 <GUI_Touch_Processing+0x2f04>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80126b0:	4b45      	ldr	r3, [pc, #276]	; (80127c8 <GUI_Touch_Processing+0x2f08>)
					Mode_EL = !Mode_EL;
 80126b2:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80126b4:	4845      	ldr	r0, [pc, #276]	; (80127cc <GUI_Touch_Processing+0x2f0c>)
					Mode_EL = !Mode_EL;
 80126b6:	2a00      	cmp	r2, #0
 80126b8:	bf0c      	ite	eq
 80126ba:	2201      	moveq	r2, #1
 80126bc:	2200      	movne	r2, #0
 80126be:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80126c0:	bf18      	it	ne
 80126c2:	4618      	movne	r0, r3
 80126c4:	4a42      	ldr	r2, [pc, #264]	; (80127d0 <GUI_Touch_Processing+0x2f10>)
 80126c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80126ca:	f7fb fa89 	bl	800dbe0 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80126ce:	7822      	ldrb	r2, [r4, #0]
 80126d0:	4b40      	ldr	r3, [pc, #256]	; (80127d4 <GUI_Touch_Processing+0x2f14>)
 80126d2:	b982      	cbnz	r2, 80126f6 <GUI_Touch_Processing+0x2e36>
 80126d4:	4a40      	ldr	r2, [pc, #256]	; (80127d8 <GUI_Touch_Processing+0x2f18>)
 80126d6:	edd2 0a00 	vldr	s1, [r2]
 80126da:	ed93 0a00 	vldr	s0, [r3]
 80126de:	f006 fd6d 	bl	80191bc <Rabs_calc_Factor2_Settings_change>
 80126e2:	4b3e      	ldr	r3, [pc, #248]	; (80127dc <GUI_Touch_Processing+0x2f1c>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80126e4:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80126e6:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80126ea:	21ca      	movs	r1, #202	; 0xca
 80126ec:	20b6      	movs	r0, #182	; 0xb6
 80126ee:	f001 fd61 	bl	80141b4 <GUI_Switch_ButtonActive>
 80126f2:	f7fd b973 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80126f6:	4a3a      	ldr	r2, [pc, #232]	; (80127e0 <GUI_Touch_Processing+0x2f20>)
 80126f8:	e7ed      	b.n	80126d6 <GUI_Touch_Processing+0x2e16>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 80126fa:	a329      	add	r3, pc, #164	; (adr r3, 80127a0 <GUI_Touch_Processing+0x2ee0>)
 80126fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012704:	f04f 0701 	mov.w	r7, #1
 8012708:	f7ee fa08 	bl	8000b1c <__aeabi_dcmpge>
 801270c:	b900      	cbnz	r0, 8012710 <GUI_Touch_Processing+0x2e50>
 801270e:	4607      	mov	r7, r0
 8012710:	a325      	add	r3, pc, #148	; (adr r3, 80127a8 <GUI_Touch_Processing+0x2ee8>)
 8012712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012716:	e9dd 0100 	ldrd	r0, r1, [sp]
 801271a:	f04f 0801 	mov.w	r8, #1
 801271e:	f7ee f9f3 	bl	8000b08 <__aeabi_dcmple>
 8012722:	b900      	cbnz	r0, 8012726 <GUI_Touch_Processing+0x2e66>
 8012724:	4680      	mov	r8, r0
 8012726:	ea07 0708 	and.w	r7, r7, r8
 801272a:	07f8      	lsls	r0, r7, #31
 801272c:	d564      	bpl.n	80127f8 <GUI_Touch_Processing+0x2f38>
 801272e:	2e00      	cmp	r6, #0
 8012730:	d062      	beq.n	80127f8 <GUI_Touch_Processing+0x2f38>
					Bluetooth = !Bluetooth;
 8012732:	4b2c      	ldr	r3, [pc, #176]	; (80127e4 <GUI_Touch_Processing+0x2f24>)
 8012734:	781a      	ldrb	r2, [r3, #0]
 8012736:	fab2 f282 	clz	r2, r2
 801273a:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801273c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8012740:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8012742:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8012744:	f001 fcdc 	bl	8014100 <GUI_Switch_Button>
					GUI_Up_Panel();
 8012748:	f7fb fe8e 	bl	800e468 <GUI_Up_Panel>
 801274c:	f7fd b946 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8012750:	66666666 	.word	0x66666666
 8012754:	4081f866 	.word	0x4081f866
 8012758:	33333333 	.word	0x33333333
 801275c:	40867133 	.word	0x40867133
 8012760:	33333333 	.word	0x33333333
 8012764:	40053333 	.word	0x40053333
 8012768:	00000000 	.word	0x00000000
 801276c:	40623800 	.word	0x40623800
 8012770:	99999999 	.word	0x99999999
 8012774:	4091a399 	.word	0x4091a399
 8012778:	33333333 	.word	0x33333333
 801277c:	407aff33 	.word	0x407aff33
 8012780:	cccccccd 	.word	0xcccccccd
 8012784:	407e24cc 	.word	0x407e24cc
 8012788:	33333333 	.word	0x33333333
 801278c:	40838b33 	.word	0x40838b33
 8012790:	66666666 	.word	0x66666666
 8012794:	4080ba66 	.word	0x4080ba66
 8012798:	33333333 	.word	0x33333333
 801279c:	40853333 	.word	0x40853333
 80127a0:	99999999 	.word	0x99999999
 80127a4:	40863199 	.word	0x40863199
 80127a8:	66666666 	.word	0x66666666
 80127ac:	408aaa66 	.word	0x408aaa66
 80127b0:	20004ca2 	.word	0x20004ca2
 80127b4:	20004ccc 	.word	0x20004ccc
 80127b8:	2008acd5 	.word	0x2008acd5
 80127bc:	20000232 	.word	0x20000232
 80127c0:	4093e000 	.word	0x4093e000
 80127c4:	20000a50 	.word	0x20000a50
 80127c8:	08101838 	.word	0x08101838
 80127cc:	08100838 	.word	0x08100838
 80127d0:	2004cc00 	.word	0x2004cc00
 80127d4:	20004fec 	.word	0x20004fec
 80127d8:	20004fe8 	.word	0x20004fe8
 80127dc:	20004ff4 	.word	0x20004ff4
 80127e0:	20004fe4 	.word	0x20004fe4
 80127e4:	2008acda 	.word	0x2008acda
 80127e8:	33333333 	.word	0x33333333
 80127ec:	40760733 	.word	0x40760733
 80127f0:	cccccccd 	.word	0xcccccccd
 80127f4:	407ef8cc 	.word	0x407ef8cc
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 80127f8:	a3db      	add	r3, pc, #876	; (adr r3, 8012b68 <GUI_Touch_Processing+0x32a8>)
 80127fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fe:	4620      	mov	r0, r4
 8012800:	4629      	mov	r1, r5
 8012802:	f04f 0701 	mov.w	r7, #1
 8012806:	f7ee f989 	bl	8000b1c <__aeabi_dcmpge>
 801280a:	b900      	cbnz	r0, 801280e <GUI_Touch_Processing+0x2f4e>
 801280c:	4607      	mov	r7, r0
 801280e:	a3d8      	add	r3, pc, #864	; (adr r3, 8012b70 <GUI_Touch_Processing+0x32b0>)
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	4620      	mov	r0, r4
 8012816:	4629      	mov	r1, r5
 8012818:	f04f 0801 	mov.w	r8, #1
 801281c:	f7ee f974 	bl	8000b08 <__aeabi_dcmple>
 8012820:	b900      	cbnz	r0, 8012824 <GUI_Touch_Processing+0x2f64>
 8012822:	4680      	mov	r8, r0
 8012824:	ea07 0708 	and.w	r7, r7, r8
 8012828:	a3d3      	add	r3, pc, #844	; (adr r3, 8012b78 <GUI_Touch_Processing+0x32b8>)
 801282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012832:	b2ff      	uxtb	r7, r7
 8012834:	f04f 0801 	mov.w	r8, #1
 8012838:	f7ee f970 	bl	8000b1c <__aeabi_dcmpge>
 801283c:	b900      	cbnz	r0, 8012840 <GUI_Touch_Processing+0x2f80>
 801283e:	4680      	mov	r8, r0
 8012840:	a3cf      	add	r3, pc, #828	; (adr r3, 8012b80 <GUI_Touch_Processing+0x32c0>)
 8012842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012846:	e9dd 0100 	ldrd	r0, r1, [sp]
 801284a:	f04f 0901 	mov.w	r9, #1
 801284e:	f7ee f95b 	bl	8000b08 <__aeabi_dcmple>
 8012852:	b900      	cbnz	r0, 8012856 <GUI_Touch_Processing+0x2f96>
 8012854:	4681      	mov	r9, r0
 8012856:	ea08 0809 	and.w	r8, r8, r9
 801285a:	f018 0f01 	tst.w	r8, #1
 801285e:	d002      	beq.n	8012866 <GUI_Touch_Processing+0x2fa6>
 8012860:	2f00      	cmp	r7, #0
 8012862:	f47f ad48 	bne.w	80122f6 <GUI_Touch_Processing+0x2a36>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Color_CIE_xy
 8012866:	a3c8      	add	r3, pc, #800	; (adr r3, 8012b88 <GUI_Touch_Processing+0x32c8>)
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012870:	f04f 0801 	mov.w	r8, #1
 8012874:	f7ee f952 	bl	8000b1c <__aeabi_dcmpge>
 8012878:	b900      	cbnz	r0, 801287c <GUI_Touch_Processing+0x2fbc>
 801287a:	4680      	mov	r8, r0
 801287c:	a3c4      	add	r3, pc, #784	; (adr r3, 8012b90 <GUI_Touch_Processing+0x32d0>)
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012886:	f04f 0901 	mov.w	r9, #1
 801288a:	f7ee f93d 	bl	8000b08 <__aeabi_dcmple>
 801288e:	b900      	cbnz	r0, 8012892 <GUI_Touch_Processing+0x2fd2>
 8012890:	4681      	mov	r9, r0
 8012892:	ea08 0809 	and.w	r8, r8, r9
 8012896:	f018 0f01 	tst.w	r8, #1
 801289a:	d00f      	beq.n	80128bc <GUI_Touch_Processing+0x2ffc>
 801289c:	b176      	cbz	r6, 80128bc <GUI_Touch_Processing+0x2ffc>
					if(!(Color_Field&Color_CIE_xy))
 801289e:	4aa4      	ldr	r2, [pc, #656]	; (8012b30 <GUI_Touch_Processing+0x3270>)
 80128a0:	7813      	ldrb	r3, [r2, #0]
 80128a2:	07d9      	lsls	r1, r3, #31
 80128a4:	f53d a89a 	bmi.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 80128a8:	2301      	movs	r3, #1
 80128aa:	7013      	strb	r3, [r2, #0]
 80128ac:	f240 1147 	movw	r1, #327	; 0x147
 80128b0:	461a      	mov	r2, r3
 80128b2:	20c8      	movs	r0, #200	; 0xc8
 80128b4:	f001 fbf5 	bl	80140a2 <GUI_RadioBox>
 80128b8:	f7fd b890 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 80128bc:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80128be:	4620      	mov	r0, r4
 80128c0:	ea0a 0603 	and.w	r6, sl, r3
 80128c4:	4629      	mov	r1, r5
 80128c6:	a38a      	add	r3, pc, #552	; (adr r3, 8012af0 <GUI_Touch_Processing+0x3230>)
 80128c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128cc:	f04f 0801 	mov.w	r8, #1
 80128d0:	f7ee f924 	bl	8000b1c <__aeabi_dcmpge>
 80128d4:	b900      	cbnz	r0, 80128d8 <GUI_Touch_Processing+0x3018>
 80128d6:	4680      	mov	r8, r0
 80128d8:	a387      	add	r3, pc, #540	; (adr r3, 8012af8 <GUI_Touch_Processing+0x3238>)
 80128da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128de:	4620      	mov	r0, r4
 80128e0:	4629      	mov	r1, r5
 80128e2:	f04f 0901 	mov.w	r9, #1
 80128e6:	f7ee f90f 	bl	8000b08 <__aeabi_dcmple>
 80128ea:	b900      	cbnz	r0, 80128ee <GUI_Touch_Processing+0x302e>
 80128ec:	4681      	mov	r9, r0
 80128ee:	ea08 0309 	and.w	r3, r8, r9
 80128f2:	07da      	lsls	r2, r3, #31
 80128f4:	d502      	bpl.n	80128fc <GUI_Touch_Processing+0x303c>
 80128f6:	2e00      	cmp	r6, #0
 80128f8:	f47e a835 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80128fc:	a380      	add	r3, pc, #512	; (adr r3, 8012b00 <GUI_Touch_Processing+0x3240>)
 80128fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012902:	4620      	mov	r0, r4
 8012904:	4629      	mov	r1, r5
 8012906:	f04f 0801 	mov.w	r8, #1
 801290a:	f7ee f907 	bl	8000b1c <__aeabi_dcmpge>
 801290e:	b900      	cbnz	r0, 8012912 <GUI_Touch_Processing+0x3052>
 8012910:	4680      	mov	r8, r0
 8012912:	a37d      	add	r3, pc, #500	; (adr r3, 8012b08 <GUI_Touch_Processing+0x3248>)
 8012914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012918:	4620      	mov	r0, r4
 801291a:	4629      	mov	r1, r5
 801291c:	f04f 0901 	mov.w	r9, #1
 8012920:	f7ee f8f2 	bl	8000b08 <__aeabi_dcmple>
 8012924:	b900      	cbnz	r0, 8012928 <GUI_Touch_Processing+0x3068>
 8012926:	4681      	mov	r9, r0
 8012928:	ea08 0309 	and.w	r3, r8, r9
 801292c:	07db      	lsls	r3, r3, #31
 801292e:	d55a      	bpl.n	80129e6 <GUI_Touch_Processing+0x3126>
 8012930:	2e00      	cmp	r6, #0
 8012932:	d058      	beq.n	80129e6 <GUI_Touch_Processing+0x3126>
					if(preColor_Field != Color_Field)
 8012934:	4c7e      	ldr	r4, [pc, #504]	; (8012b30 <GUI_Touch_Processing+0x3270>)
 8012936:	497f      	ldr	r1, [pc, #508]	; (8012b34 <GUI_Touch_Processing+0x3274>)
 8012938:	7823      	ldrb	r3, [r4, #0]
 801293a:	7809      	ldrb	r1, [r1, #0]
 801293c:	4299      	cmp	r1, r3
 801293e:	d01f      	beq.n	8012980 <GUI_Touch_Processing+0x30c0>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8012940:	07dd      	lsls	r5, r3, #31
 8012942:	d52d      	bpl.n	80129a0 <GUI_Touch_Processing+0x30e0>
 8012944:	4b7c      	ldr	r3, [pc, #496]	; (8012b38 <GUI_Touch_Processing+0x3278>)
 8012946:	487d      	ldr	r0, [pc, #500]	; (8012b3c <GUI_Touch_Processing+0x327c>)
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	f013 0f01 	tst.w	r3, #1
 801294e:	bf18      	it	ne
 8012950:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8012954:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8012958:	f006 fc00 	bl	801915c <Image_load>
						Locus.pData = (uint16_t *)bmp;
 801295c:	4b78      	ldr	r3, [pc, #480]	; (8012b40 <GUI_Touch_Processing+0x3280>)
 801295e:	4a79      	ldr	r2, [pc, #484]	; (8012b44 <GUI_Touch_Processing+0x3284>)
 8012960:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8012962:	7822      	ldrb	r2, [r4, #0]
 8012964:	f002 0101 	and.w	r1, r2, #1
 8012968:	2900      	cmp	r1, #0
 801296a:	bf0c      	ite	eq
 801296c:	21fa      	moveq	r1, #250	; 0xfa
 801296e:	21d8      	movne	r1, #216	; 0xd8
 8012970:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8012972:	d123      	bne.n	80129bc <GUI_Touch_Processing+0x30fc>
 8012974:	f012 0f04 	tst.w	r2, #4
 8012978:	bf0c      	ite	eq
 801297a:	22fa      	moveq	r2, #250	; 0xfa
 801297c:	22ea      	movne	r2, #234	; 0xea
 801297e:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8012980:	4b71      	ldr	r3, [pc, #452]	; (8012b48 <GUI_Touch_Processing+0x3288>)
 8012982:	2100      	movs	r1, #0
 8012984:	8818      	ldrh	r0, [r3, #0]
 8012986:	f006 fcab 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801298a:	4b70      	ldr	r3, [pc, #448]	; (8012b4c <GUI_Touch_Processing+0x328c>)
 801298c:	781a      	ldrb	r2, [r3, #0]
 801298e:	4b70      	ldr	r3, [pc, #448]	; (8012b50 <GUI_Touch_Processing+0x3290>)
					switch (Prev_Inf_Screen){
 8012990:	1e51      	subs	r1, r2, #1
 8012992:	2905      	cmp	r1, #5
 8012994:	d814      	bhi.n	80129c0 <GUI_Touch_Processing+0x3100>
 8012996:	e8df f001 	tbb	[pc, r1]
 801299a:	1316      	.short	0x1316
 801299c:	1e221a13 	.word	0x1e221a13
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80129a0:	f003 0304 	and.w	r3, r3, #4
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	4b6b      	ldr	r3, [pc, #428]	; (8012b54 <GUI_Touch_Processing+0x3294>)
 80129a8:	486b      	ldr	r0, [pc, #428]	; (8012b58 <GUI_Touch_Processing+0x3298>)
 80129aa:	bf08      	it	eq
 80129ac:	4618      	moveq	r0, r3
 80129ae:	f24f 4324 	movw	r3, #62500	; 0xf424
 80129b2:	f24e 4184 	movw	r1, #58500	; 0xe484
 80129b6:	bf08      	it	eq
 80129b8:	4619      	moveq	r1, r3
 80129ba:	e7cd      	b.n	8012958 <GUI_Touch_Processing+0x3098>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 80129bc:	22fa      	movs	r2, #250	; 0xfa
 80129be:	e7de      	b.n	801297e <GUI_Touch_Processing+0x30be>
					GUI_screen_state = Prev_Inf_Screen;
 80129c0:	701a      	strb	r2, [r3, #0]
 80129c2:	f7fd b80b 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80129c6:	2201      	movs	r2, #1
 80129c8:	701a      	strb	r2, [r3, #0]
 80129ca:	f7fd b807 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80129ce:	2204      	movs	r2, #4
 80129d0:	701a      	strb	r2, [r3, #0]
 80129d2:	f7fd b803 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80129d6:	2206      	movs	r2, #6
 80129d8:	701a      	strb	r2, [r3, #0]
 80129da:	f7fc bfff 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80129de:	2205      	movs	r2, #5
 80129e0:	701a      	strb	r2, [r3, #0]
 80129e2:	f7fc bffb 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80129e6:	a348      	add	r3, pc, #288	; (adr r3, 8012b08 <GUI_Touch_Processing+0x3248>)
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ec:	4620      	mov	r0, r4
 80129ee:	4629      	mov	r1, r5
 80129f0:	f04f 0801 	mov.w	r8, #1
 80129f4:	f7ee f892 	bl	8000b1c <__aeabi_dcmpge>
 80129f8:	b900      	cbnz	r0, 80129fc <GUI_Touch_Processing+0x313c>
 80129fa:	4680      	mov	r8, r0
 80129fc:	a344      	add	r3, pc, #272	; (adr r3, 8012b10 <GUI_Touch_Processing+0x3250>)
 80129fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a02:	4620      	mov	r0, r4
 8012a04:	4629      	mov	r1, r5
 8012a06:	f04f 0901 	mov.w	r9, #1
 8012a0a:	f7ee f87d 	bl	8000b08 <__aeabi_dcmple>
 8012a0e:	b900      	cbnz	r0, 8012a12 <GUI_Touch_Processing+0x3152>
 8012a10:	4681      	mov	r9, r0
 8012a12:	ea08 0309 	and.w	r3, r8, r9
 8012a16:	07dc      	lsls	r4, r3, #31
 8012a18:	d502      	bpl.n	8012a20 <GUI_Touch_Processing+0x3160>
 8012a1a:	2e00      	cmp	r6, #0
 8012a1c:	f47d a81e 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8012a20:	2200      	movs	r2, #0
 8012a22:	4b4e      	ldr	r3, [pc, #312]	; (8012b5c <GUI_Touch_Processing+0x329c>)
 8012a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a28:	f04f 0401 	mov.w	r4, #1
 8012a2c:	f7ee f876 	bl	8000b1c <__aeabi_dcmpge>
 8012a30:	b900      	cbnz	r0, 8012a34 <GUI_Touch_Processing+0x3174>
 8012a32:	4604      	mov	r4, r0
 8012a34:	a338      	add	r3, pc, #224	; (adr r3, 8012b18 <GUI_Touch_Processing+0x3258>)
 8012a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a3e:	f04f 0501 	mov.w	r5, #1
 8012a42:	f7ee f861 	bl	8000b08 <__aeabi_dcmple>
 8012a46:	b900      	cbnz	r0, 8012a4a <GUI_Touch_Processing+0x318a>
 8012a48:	4605      	mov	r5, r0
 8012a4a:	402c      	ands	r4, r5
 8012a4c:	07e0      	lsls	r0, r4, #31
 8012a4e:	f57c afc5 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 8012a52:	2f00      	cmp	r7, #0
 8012a54:	f47f ac21 	bne.w	801229a <GUI_Touch_Processing+0x29da>
 8012a58:	f7fc bfc0 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8012a5c:	4b40      	ldr	r3, [pc, #256]	; (8012b60 <GUI_Touch_Processing+0x32a0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8012a5e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8012a62:	220f      	movs	r2, #15
 8012a64:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8012a66:	f7ed fd6d 	bl	8000544 <__aeabi_i2d>
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012a70:	460d      	mov	r5, r1
 8012a72:	f7ed fd67 	bl	8000544 <__aeabi_i2d>
 8012a76:	a32a      	add	r3, pc, #168	; (adr r3, 8012b20 <GUI_Touch_Processing+0x3260>)
 8012a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7c:	e9cd 0100 	strd	r0, r1, [sp]
 8012a80:	f04f 0801 	mov.w	r8, #1
 8012a84:	f7ee f84a 	bl	8000b1c <__aeabi_dcmpge>
 8012a88:	b900      	cbnz	r0, 8012a8c <GUI_Touch_Processing+0x31cc>
 8012a8a:	4680      	mov	r8, r0
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	4b35      	ldr	r3, [pc, #212]	; (8012b64 <GUI_Touch_Processing+0x32a4>)
 8012a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a94:	fa5f f888 	uxtb.w	r8, r8
 8012a98:	f04f 0701 	mov.w	r7, #1
 8012a9c:	f7ee f834 	bl	8000b08 <__aeabi_dcmple>
 8012aa0:	b900      	cbnz	r0, 8012aa4 <GUI_Touch_Processing+0x31e4>
 8012aa2:	4607      	mov	r7, r0
 8012aa4:	a320      	add	r3, pc, #128	; (adr r3, 8012b28 <GUI_Touch_Processing+0x3268>)
 8012aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aaa:	4620      	mov	r0, r4
 8012aac:	4629      	mov	r1, r5
 8012aae:	b2ff      	uxtb	r7, r7
 8012ab0:	f04f 0601 	mov.w	r6, #1
 8012ab4:	f7ee f832 	bl	8000b1c <__aeabi_dcmpge>
 8012ab8:	b900      	cbnz	r0, 8012abc <GUI_Touch_Processing+0x31fc>
 8012aba:	4606      	mov	r6, r0
 8012abc:	a30c      	add	r3, pc, #48	; (adr r3, 8012af0 <GUI_Touch_Processing+0x3230>)
 8012abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	4629      	mov	r1, r5
 8012ac6:	f04f 0901 	mov.w	r9, #1
 8012aca:	f7ee f81d 	bl	8000b08 <__aeabi_dcmple>
 8012ace:	b900      	cbnz	r0, 8012ad2 <GUI_Touch_Processing+0x3212>
 8012ad0:	4681      	mov	r9, r0
 8012ad2:	ea06 0609 	and.w	r6, r6, r9
 8012ad6:	ea18 0f06 	tst.w	r8, r6
 8012ada:	d05d      	beq.n	8012b98 <GUI_Touch_Processing+0x32d8>
 8012adc:	2f00      	cmp	r7, #0
 8012ade:	d05b      	beq.n	8012b98 <GUI_Touch_Processing+0x32d8>
					GUI_screen_state = ColorSet1_Screen;
 8012ae0:	230e      	movs	r3, #14
 8012ae2:	f88b 3000 	strb.w	r3, [fp]
 8012ae6:	f7fc bf79 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8012aea:	bf00      	nop
 8012aec:	f3af 8000 	nop.w
 8012af0:	66666666 	.word	0x66666666
 8012af4:	4081f866 	.word	0x4081f866
 8012af8:	33333333 	.word	0x33333333
 8012afc:	40867133 	.word	0x40867133
 8012b00:	33333333 	.word	0x33333333
 8012b04:	40053333 	.word	0x40053333
 8012b08:	00000000 	.word	0x00000000
 8012b0c:	40623800 	.word	0x40623800
 8012b10:	99999999 	.word	0x99999999
 8012b14:	40720d99 	.word	0x40720d99
 8012b18:	00000000 	.word	0x00000000
 8012b1c:	4073e000 	.word	0x4073e000
 8012b20:	99999999 	.word	0x99999999
 8012b24:	4091a399 	.word	0x4091a399
 8012b28:	33333333 	.word	0x33333333
 8012b2c:	407aff33 	.word	0x407aff33
 8012b30:	20004c9f 	.word	0x20004c9f
 8012b34:	20004cc7 	.word	0x20004cc7
 8012b38:	20004ca4 	.word	0x20004ca4
 8012b3c:	00051d00 	.word	0x00051d00
 8012b40:	2008b270 	.word	0x2008b270
 8012b44:	20050c0e 	.word	0x20050c0e
 8012b48:	20004ccc 	.word	0x20004ccc
 8012b4c:	2008acd5 	.word	0x2008acd5
 8012b50:	20004ca1 	.word	0x20004ca1
 8012b54:	00018100 	.word	0x00018100
 8012b58:	0006ca00 	.word	0x0006ca00
 8012b5c:	406a8000 	.word	0x406a8000
 8012b60:	20000232 	.word	0x20000232
 8012b64:	4093e000 	.word	0x4093e000
 8012b68:	33333333 	.word	0x33333333
 8012b6c:	40353333 	.word	0x40353333
 8012b70:	00000000 	.word	0x00000000
 8012b74:	4084b400 	.word	0x4084b400
 8012b78:	99999999 	.word	0x99999999
 8012b7c:	40748999 	.word	0x40748999
 8012b80:	99999999 	.word	0x99999999
 8012b84:	407cd199 	.word	0x407cd199
 8012b88:	66666666 	.word	0x66666666
 8012b8c:	408b1466 	.word	0x408b1466
 8012b90:	33333333 	.word	0x33333333
 8012b94:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Color_CIE_Luv
 8012b98:	a3d3      	add	r3, pc, #844	; (adr r3, 8012ee8 <GUI_Touch_Processing+0x3628>)
 8012b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	f04f 0601 	mov.w	r6, #1
 8012ba6:	f7ed ffb9 	bl	8000b1c <__aeabi_dcmpge>
 8012baa:	b900      	cbnz	r0, 8012bae <GUI_Touch_Processing+0x32ee>
 8012bac:	4606      	mov	r6, r0
 8012bae:	a3dc      	add	r3, pc, #880	; (adr r3, 8012f20 <GUI_Touch_Processing+0x3660>)
 8012bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	4629      	mov	r1, r5
 8012bb8:	f04f 0901 	mov.w	r9, #1
 8012bbc:	f7ed ffa4 	bl	8000b08 <__aeabi_dcmple>
 8012bc0:	b900      	cbnz	r0, 8012bc4 <GUI_Touch_Processing+0x3304>
 8012bc2:	4681      	mov	r9, r0
 8012bc4:	ea06 0609 	and.w	r6, r6, r9
 8012bc8:	a3d7      	add	r3, pc, #860	; (adr r3, 8012f28 <GUI_Touch_Processing+0x3668>)
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bd2:	b2f6      	uxtb	r6, r6
 8012bd4:	f04f 0901 	mov.w	r9, #1
 8012bd8:	f7ed ffa0 	bl	8000b1c <__aeabi_dcmpge>
 8012bdc:	b900      	cbnz	r0, 8012be0 <GUI_Touch_Processing+0x3320>
 8012bde:	4681      	mov	r9, r0
 8012be0:	a3d3      	add	r3, pc, #844	; (adr r3, 8012f30 <GUI_Touch_Processing+0x3670>)
 8012be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bea:	f04f 0a01 	mov.w	sl, #1
 8012bee:	f7ed ff8b 	bl	8000b08 <__aeabi_dcmple>
 8012bf2:	b900      	cbnz	r0, 8012bf6 <GUI_Touch_Processing+0x3336>
 8012bf4:	4682      	mov	sl, r0
 8012bf6:	ea09 090a 	and.w	r9, r9, sl
 8012bfa:	f019 0f01 	tst.w	r9, #1
 8012bfe:	d016      	beq.n	8012c2e <GUI_Touch_Processing+0x336e>
 8012c00:	b1ae      	cbz	r6, 8012c2e <GUI_Touch_Processing+0x336e>
					if(!(Color_Field&Color_CIE_Luv))
 8012c02:	4cbb      	ldr	r4, [pc, #748]	; (8012ef0 <GUI_Touch_Processing+0x3630>)
 8012c04:	7823      	ldrb	r3, [r4, #0]
 8012c06:	0759      	lsls	r1, r3, #29
 8012c08:	f53c aee8 	bmi.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 8012c0c:	2204      	movs	r2, #4
 8012c0e:	2301      	movs	r3, #1
 8012c10:	2146      	movs	r1, #70	; 0x46
 8012c12:	20c8      	movs	r0, #200	; 0xc8
 8012c14:	7022      	strb	r2, [r4, #0]
 8012c16:	f001 fa44 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8012c1a:	7822      	ldrb	r2, [r4, #0]
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	f002 0202 	and.w	r2, r2, #2
 8012c22:	2185      	movs	r1, #133	; 0x85
 8012c24:	20c8      	movs	r0, #200	; 0xc8
 8012c26:	f001 fa3c 	bl	80140a2 <GUI_RadioBox>
 8012c2a:	f7fc bed7 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //Color_CIE_Lab
 8012c2e:	a39c      	add	r3, pc, #624	; (adr r3, 8012ea0 <GUI_Touch_Processing+0x35e0>)
 8012c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c38:	f04f 0901 	mov.w	r9, #1
 8012c3c:	f7ed ff6e 	bl	8000b1c <__aeabi_dcmpge>
 8012c40:	b900      	cbnz	r0, 8012c44 <GUI_Touch_Processing+0x3384>
 8012c42:	4681      	mov	r9, r0
 8012c44:	a398      	add	r3, pc, #608	; (adr r3, 8012ea8 <GUI_Touch_Processing+0x35e8>)
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c4e:	f04f 0a01 	mov.w	sl, #1
 8012c52:	f7ed ff59 	bl	8000b08 <__aeabi_dcmple>
 8012c56:	b900      	cbnz	r0, 8012c5a <GUI_Touch_Processing+0x339a>
 8012c58:	4682      	mov	sl, r0
 8012c5a:	ea09 090a 	and.w	r9, r9, sl
 8012c5e:	f019 0f01 	tst.w	r9, #1
 8012c62:	d017      	beq.n	8012c94 <GUI_Touch_Processing+0x33d4>
 8012c64:	b1b6      	cbz	r6, 8012c94 <GUI_Touch_Processing+0x33d4>
					if(!(Color_Field&Color_CIE_Lab))
 8012c66:	4ca2      	ldr	r4, [pc, #648]	; (8012ef0 <GUI_Touch_Processing+0x3630>)
 8012c68:	7822      	ldrb	r2, [r4, #0]
 8012c6a:	f012 0202 	ands.w	r2, r2, #2
 8012c6e:	f47c aeb5 	bne.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8012c72:	2301      	movs	r3, #1
 8012c74:	2146      	movs	r1, #70	; 0x46
 8012c76:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 8012c78:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8012c7a:	f001 fa12 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8012c7e:	7822      	ldrb	r2, [r4, #0]
 8012c80:	2301      	movs	r3, #1
 8012c82:	f042 0202 	orr.w	r2, r2, #2
 8012c86:	2185      	movs	r1, #133	; 0x85
 8012c88:	20c8      	movs	r0, #200	; 0xc8
 8012c8a:	7022      	strb	r2, [r4, #0]
 8012c8c:	f001 fa09 	bl	80140a2 <GUI_RadioBox>
 8012c90:	f7fc bea4 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012c94:	a386      	add	r3, pc, #536	; (adr r3, 8012eb0 <GUI_Touch_Processing+0x35f0>)
 8012c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	ea08 0607 	and.w	r6, r8, r7
 8012ca2:	f04f 0901 	mov.w	r9, #1
 8012ca6:	f7ed ff39 	bl	8000b1c <__aeabi_dcmpge>
 8012caa:	b900      	cbnz	r0, 8012cae <GUI_Touch_Processing+0x33ee>
 8012cac:	4681      	mov	r9, r0
 8012cae:	a382      	add	r3, pc, #520	; (adr r3, 8012eb8 <GUI_Touch_Processing+0x35f8>)
 8012cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	4629      	mov	r1, r5
 8012cb8:	f04f 0a01 	mov.w	sl, #1
 8012cbc:	f7ed ff24 	bl	8000b08 <__aeabi_dcmple>
 8012cc0:	b900      	cbnz	r0, 8012cc4 <GUI_Touch_Processing+0x3404>
 8012cc2:	4682      	mov	sl, r0
 8012cc4:	ea09 030a 	and.w	r3, r9, sl
 8012cc8:	07da      	lsls	r2, r3, #31
 8012cca:	d502      	bpl.n	8012cd2 <GUI_Touch_Processing+0x3412>
 8012ccc:	2e00      	cmp	r6, #0
 8012cce:	f47d ae4a 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012cd2:	a37b      	add	r3, pc, #492	; (adr r3, 8012ec0 <GUI_Touch_Processing+0x3600>)
 8012cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd8:	4620      	mov	r0, r4
 8012cda:	4629      	mov	r1, r5
 8012cdc:	f04f 0901 	mov.w	r9, #1
 8012ce0:	f7ed ff1c 	bl	8000b1c <__aeabi_dcmpge>
 8012ce4:	b900      	cbnz	r0, 8012ce8 <GUI_Touch_Processing+0x3428>
 8012ce6:	4681      	mov	r9, r0
 8012ce8:	a377      	add	r3, pc, #476	; (adr r3, 8012ec8 <GUI_Touch_Processing+0x3608>)
 8012cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cee:	4620      	mov	r0, r4
 8012cf0:	4629      	mov	r1, r5
 8012cf2:	f04f 0a01 	mov.w	sl, #1
 8012cf6:	f7ed ff07 	bl	8000b08 <__aeabi_dcmple>
 8012cfa:	b900      	cbnz	r0, 8012cfe <GUI_Touch_Processing+0x343e>
 8012cfc:	4682      	mov	sl, r0
 8012cfe:	ea09 030a 	and.w	r3, r9, sl
 8012d02:	07db      	lsls	r3, r3, #31
 8012d04:	d55e      	bpl.n	8012dc4 <GUI_Touch_Processing+0x3504>
 8012d06:	2e00      	cmp	r6, #0
 8012d08:	d05c      	beq.n	8012dc4 <GUI_Touch_Processing+0x3504>
					if(preColor_Field != Color_Field)
 8012d0a:	4c79      	ldr	r4, [pc, #484]	; (8012ef0 <GUI_Touch_Processing+0x3630>)
 8012d0c:	4979      	ldr	r1, [pc, #484]	; (8012ef4 <GUI_Touch_Processing+0x3634>)
 8012d0e:	7823      	ldrb	r3, [r4, #0]
 8012d10:	7809      	ldrb	r1, [r1, #0]
 8012d12:	4299      	cmp	r1, r3
 8012d14:	d01f      	beq.n	8012d56 <GUI_Touch_Processing+0x3496>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8012d16:	07dd      	lsls	r5, r3, #31
 8012d18:	d52c      	bpl.n	8012d74 <GUI_Touch_Processing+0x34b4>
 8012d1a:	4b77      	ldr	r3, [pc, #476]	; (8012ef8 <GUI_Touch_Processing+0x3638>)
 8012d1c:	4877      	ldr	r0, [pc, #476]	; (8012efc <GUI_Touch_Processing+0x363c>)
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	f013 0f01 	tst.w	r3, #1
 8012d24:	bf18      	it	ne
 8012d26:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8012d2a:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8012d2e:	f006 fa15 	bl	801915c <Image_load>
								Locus.pData = (uint16_t *)bmp;
 8012d32:	4b73      	ldr	r3, [pc, #460]	; (8012f00 <GUI_Touch_Processing+0x3640>)
 8012d34:	4a73      	ldr	r2, [pc, #460]	; (8012f04 <GUI_Touch_Processing+0x3644>)
 8012d36:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8012d38:	7822      	ldrb	r2, [r4, #0]
 8012d3a:	f002 0101 	and.w	r1, r2, #1
 8012d3e:	2900      	cmp	r1, #0
 8012d40:	bf0c      	ite	eq
 8012d42:	21fa      	moveq	r1, #250	; 0xfa
 8012d44:	21d8      	movne	r1, #216	; 0xd8
 8012d46:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8012d48:	d122      	bne.n	8012d90 <GUI_Touch_Processing+0x34d0>
 8012d4a:	f012 0f04 	tst.w	r2, #4
 8012d4e:	bf0c      	ite	eq
 8012d50:	22fa      	moveq	r2, #250	; 0xfa
 8012d52:	22ea      	movne	r2, #234	; 0xea
 8012d54:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8012d56:	4b6c      	ldr	r3, [pc, #432]	; (8012f08 <GUI_Touch_Processing+0x3648>)
 8012d58:	2100      	movs	r1, #0
 8012d5a:	8818      	ldrh	r0, [r3, #0]
 8012d5c:	f006 fac0 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012d60:	4b6a      	ldr	r3, [pc, #424]	; (8012f0c <GUI_Touch_Processing+0x364c>)
 8012d62:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012d64:	1e5a      	subs	r2, r3, #1
 8012d66:	2a05      	cmp	r2, #5
 8012d68:	d814      	bhi.n	8012d94 <GUI_Touch_Processing+0x34d4>
 8012d6a:	e8df f002 	tbb	[pc, r2]
 8012d6e:	1317      	.short	0x1317
 8012d70:	21261c13 	.word	0x21261c13
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8012d74:	f003 0304 	and.w	r3, r3, #4
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	4b65      	ldr	r3, [pc, #404]	; (8012f10 <GUI_Touch_Processing+0x3650>)
 8012d7c:	4865      	ldr	r0, [pc, #404]	; (8012f14 <GUI_Touch_Processing+0x3654>)
 8012d7e:	bf18      	it	ne
 8012d80:	4618      	movne	r0, r3
 8012d82:	f24e 4384 	movw	r3, #58500	; 0xe484
 8012d86:	f24f 4124 	movw	r1, #62500	; 0xf424
 8012d8a:	bf18      	it	ne
 8012d8c:	4619      	movne	r1, r3
 8012d8e:	e7ce      	b.n	8012d2e <GUI_Touch_Processing+0x346e>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8012d90:	22fa      	movs	r2, #250	; 0xfa
 8012d92:	e7df      	b.n	8012d54 <GUI_Touch_Processing+0x3494>
					GUI_screen_state = Prev_Inf_Screen;
 8012d94:	f88b 3000 	strb.w	r3, [fp]
 8012d98:	f7fc be20 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	f88b 3000 	strb.w	r3, [fp]
 8012da2:	f7fc be1b 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012da6:	2304      	movs	r3, #4
 8012da8:	f88b 3000 	strb.w	r3, [fp]
 8012dac:	f7fc be16 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012db0:	2306      	movs	r3, #6
 8012db2:	f88b 3000 	strb.w	r3, [fp]
 8012db6:	f7fc be11 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012dba:	2305      	movs	r3, #5
 8012dbc:	f88b 3000 	strb.w	r3, [fp]
 8012dc0:	f7fc be0c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012dc4:	a340      	add	r3, pc, #256	; (adr r3, 8012ec8 <GUI_Touch_Processing+0x3608>)
 8012dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dca:	4620      	mov	r0, r4
 8012dcc:	4629      	mov	r1, r5
 8012dce:	f04f 0601 	mov.w	r6, #1
 8012dd2:	f7ed fea3 	bl	8000b1c <__aeabi_dcmpge>
 8012dd6:	b900      	cbnz	r0, 8012dda <GUI_Touch_Processing+0x351a>
 8012dd8:	4606      	mov	r6, r0
 8012dda:	a33d      	add	r3, pc, #244	; (adr r3, 8012ed0 <GUI_Touch_Processing+0x3610>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	4620      	mov	r0, r4
 8012de2:	4629      	mov	r1, r5
 8012de4:	f04f 0901 	mov.w	r9, #1
 8012de8:	f7ed fe8e 	bl	8000b08 <__aeabi_dcmple>
 8012dec:	b900      	cbnz	r0, 8012df0 <GUI_Touch_Processing+0x3530>
 8012dee:	4681      	mov	r9, r0
 8012df0:	ea06 0609 	and.w	r6, r6, r9
 8012df4:	ea18 0f06 	tst.w	r8, r6
 8012df8:	f7fe ba8c 	b.w	8011314 <GUI_Touch_Processing+0x1a54>
					preGUI_screen_state = GUI_screen_state;
 8012dfc:	4b46      	ldr	r3, [pc, #280]	; (8012f18 <GUI_Touch_Processing+0x3658>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 8012dfe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8012e02:	2210      	movs	r2, #16
 8012e04:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 8012e06:	f7ed fb9d 	bl	8000544 <__aeabi_i2d>
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012e10:	460d      	mov	r5, r1
 8012e12:	f7ed fb97 	bl	8000544 <__aeabi_i2d>
 8012e16:	a330      	add	r3, pc, #192	; (adr r3, 8012ed8 <GUI_Touch_Processing+0x3618>)
 8012e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1c:	4606      	mov	r6, r0
 8012e1e:	460f      	mov	r7, r1
 8012e20:	f04f 0801 	mov.w	r8, #1
 8012e24:	f7ed fe7a 	bl	8000b1c <__aeabi_dcmpge>
 8012e28:	b900      	cbnz	r0, 8012e2c <GUI_Touch_Processing+0x356c>
 8012e2a:	4680      	mov	r8, r0
 8012e2c:	fa5f f388 	uxtb.w	r3, r8
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	2200      	movs	r2, #0
 8012e34:	4b39      	ldr	r3, [pc, #228]	; (8012f1c <GUI_Touch_Processing+0x365c>)
 8012e36:	4630      	mov	r0, r6
 8012e38:	4639      	mov	r1, r7
 8012e3a:	f04f 0801 	mov.w	r8, #1
 8012e3e:	f7ed fe63 	bl	8000b08 <__aeabi_dcmple>
 8012e42:	b900      	cbnz	r0, 8012e46 <GUI_Touch_Processing+0x3586>
 8012e44:	4680      	mov	r8, r0
 8012e46:	fa5f f388 	uxtb.w	r3, r8
 8012e4a:	9303      	str	r3, [sp, #12]
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	a324      	add	r3, pc, #144	; (adr r3, 8012ee0 <GUI_Touch_Processing+0x3620>)
 8012e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e54:	4629      	mov	r1, r5
 8012e56:	f04f 0801 	mov.w	r8, #1
 8012e5a:	f7ed fe5f 	bl	8000b1c <__aeabi_dcmpge>
 8012e5e:	b900      	cbnz	r0, 8012e62 <GUI_Touch_Processing+0x35a2>
 8012e60:	4680      	mov	r8, r0
 8012e62:	a313      	add	r3, pc, #76	; (adr r3, 8012eb0 <GUI_Touch_Processing+0x35f0>)
 8012e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e68:	4620      	mov	r0, r4
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	f04f 0901 	mov.w	r9, #1
 8012e70:	f7ed fe4a 	bl	8000b08 <__aeabi_dcmple>
 8012e74:	b900      	cbnz	r0, 8012e78 <GUI_Touch_Processing+0x35b8>
 8012e76:	4681      	mov	r9, r0
 8012e78:	9b00      	ldr	r3, [sp, #0]
 8012e7a:	ea08 0809 	and.w	r8, r8, r9
 8012e7e:	ea13 0f08 	tst.w	r3, r8
 8012e82:	d059      	beq.n	8012f38 <GUI_Touch_Processing+0x3678>
 8012e84:	9b03      	ldr	r3, [sp, #12]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d056      	beq.n	8012f38 <GUI_Touch_Processing+0x3678>
					WriteSDFLASH_t(sdfile_cnt);
 8012e8a:	4b1f      	ldr	r3, [pc, #124]	; (8012f08 <GUI_Touch_Processing+0x3648>)
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	8818      	ldrh	r0, [r3, #0]
 8012e90:	f006 fa26 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 8012e94:	2306      	movs	r3, #6
 8012e96:	f88b 3000 	strb.w	r3, [fp]
 8012e9a:	f7fc bd9f 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 8012e9e:	bf00      	nop
 8012ea0:	33333333 	.word	0x33333333
 8012ea4:	40760733 	.word	0x40760733
 8012ea8:	cccccccd 	.word	0xcccccccd
 8012eac:	407ef8cc 	.word	0x407ef8cc
 8012eb0:	66666666 	.word	0x66666666
 8012eb4:	4081f866 	.word	0x4081f866
 8012eb8:	33333333 	.word	0x33333333
 8012ebc:	40867133 	.word	0x40867133
 8012ec0:	33333333 	.word	0x33333333
 8012ec4:	40053333 	.word	0x40053333
 8012ec8:	00000000 	.word	0x00000000
 8012ecc:	40623800 	.word	0x40623800
 8012ed0:	99999999 	.word	0x99999999
 8012ed4:	40720d99 	.word	0x40720d99
 8012ed8:	99999999 	.word	0x99999999
 8012edc:	4091a399 	.word	0x4091a399
 8012ee0:	33333333 	.word	0x33333333
 8012ee4:	407aff33 	.word	0x407aff33
 8012ee8:	cccccccd 	.word	0xcccccccd
 8012eec:	407e24cc 	.word	0x407e24cc
 8012ef0:	20004c9f 	.word	0x20004c9f
 8012ef4:	20004cc7 	.word	0x20004cc7
 8012ef8:	20004ca4 	.word	0x20004ca4
 8012efc:	00051d00 	.word	0x00051d00
 8012f00:	2008b270 	.word	0x2008b270
 8012f04:	20050c0e 	.word	0x20050c0e
 8012f08:	20004ccc 	.word	0x20004ccc
 8012f0c:	2008acd5 	.word	0x2008acd5
 8012f10:	0006ca00 	.word	0x0006ca00
 8012f14:	00018100 	.word	0x00018100
 8012f18:	20000232 	.word	0x20000232
 8012f1c:	4093e000 	.word	0x4093e000
 8012f20:	33333333 	.word	0x33333333
 8012f24:	40838b33 	.word	0x40838b33
 8012f28:	00000000 	.word	0x00000000
 8012f2c:	40673000 	.word	0x40673000
 8012f30:	99999999 	.word	0x99999999
 8012f34:	40748999 	.word	0x40748999
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8012f38:	a3c9      	add	r3, pc, #804	; (adr r3, 8013260 <GUI_Touch_Processing+0x39a0>)
 8012f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	4629      	mov	r1, r5
 8012f42:	f04f 0801 	mov.w	r8, #1
 8012f46:	f7ed fde9 	bl	8000b1c <__aeabi_dcmpge>
 8012f4a:	b900      	cbnz	r0, 8012f4e <GUI_Touch_Processing+0x368e>
 8012f4c:	4680      	mov	r8, r0
 8012f4e:	a3c6      	add	r3, pc, #792	; (adr r3, 8013268 <GUI_Touch_Processing+0x39a8>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	4620      	mov	r0, r4
 8012f56:	4629      	mov	r1, r5
 8012f58:	f04f 0901 	mov.w	r9, #1
 8012f5c:	f7ed fdd4 	bl	8000b08 <__aeabi_dcmple>
 8012f60:	b900      	cbnz	r0, 8012f64 <GUI_Touch_Processing+0x36a4>
 8012f62:	4681      	mov	r9, r0
 8012f64:	ea08 0809 	and.w	r8, r8, r9
 8012f68:	a3c1      	add	r3, pc, #772	; (adr r3, 8013270 <GUI_Touch_Processing+0x39b0>)
 8012f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6e:	4630      	mov	r0, r6
 8012f70:	4639      	mov	r1, r7
 8012f72:	fa5f f888 	uxtb.w	r8, r8
 8012f76:	f04f 0901 	mov.w	r9, #1
 8012f7a:	f7ed fdcf 	bl	8000b1c <__aeabi_dcmpge>
 8012f7e:	b900      	cbnz	r0, 8012f82 <GUI_Touch_Processing+0x36c2>
 8012f80:	4681      	mov	r9, r0
 8012f82:	a3bd      	add	r3, pc, #756	; (adr r3, 8013278 <GUI_Touch_Processing+0x39b8>)
 8012f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f88:	4630      	mov	r0, r6
 8012f8a:	4639      	mov	r1, r7
 8012f8c:	f04f 0a01 	mov.w	sl, #1
 8012f90:	f7ed fdba 	bl	8000b08 <__aeabi_dcmple>
 8012f94:	b900      	cbnz	r0, 8012f98 <GUI_Touch_Processing+0x36d8>
 8012f96:	4682      	mov	sl, r0
 8012f98:	ea09 090a 	and.w	r9, r9, sl
 8012f9c:	f019 0f01 	tst.w	r9, #1
 8012fa0:	d028      	beq.n	8012ff4 <GUI_Touch_Processing+0x3734>
 8012fa2:	f1b8 0f00 	cmp.w	r8, #0
 8012fa6:	d025      	beq.n	8012ff4 <GUI_Touch_Processing+0x3734>
					Mode_EL = !Mode_EL;
 8012fa8:	4ca3      	ldr	r4, [pc, #652]	; (8013238 <GUI_Touch_Processing+0x3978>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8012faa:	4ba4      	ldr	r3, [pc, #656]	; (801323c <GUI_Touch_Processing+0x397c>)
					Mode_EL = !Mode_EL;
 8012fac:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8012fae:	48a4      	ldr	r0, [pc, #656]	; (8013240 <GUI_Touch_Processing+0x3980>)
					Mode_EL = !Mode_EL;
 8012fb0:	2a00      	cmp	r2, #0
 8012fb2:	bf0c      	ite	eq
 8012fb4:	2201      	moveq	r2, #1
 8012fb6:	2200      	movne	r2, #0
 8012fb8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8012fba:	bf18      	it	ne
 8012fbc:	4618      	movne	r0, r3
 8012fbe:	4aa1      	ldr	r2, [pc, #644]	; (8013244 <GUI_Touch_Processing+0x3984>)
 8012fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012fc4:	f7fa fe0c 	bl	800dbe0 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8012fc8:	7822      	ldrb	r2, [r4, #0]
 8012fca:	4b9f      	ldr	r3, [pc, #636]	; (8013248 <GUI_Touch_Processing+0x3988>)
 8012fcc:	b982      	cbnz	r2, 8012ff0 <GUI_Touch_Processing+0x3730>
 8012fce:	4a9f      	ldr	r2, [pc, #636]	; (801324c <GUI_Touch_Processing+0x398c>)
 8012fd0:	edd2 0a00 	vldr	s1, [r2]
 8012fd4:	ed93 0a00 	vldr	s0, [r3]
 8012fd8:	f006 f8f0 	bl	80191bc <Rabs_calc_Factor2_Settings_change>
 8012fdc:	4b9c      	ldr	r3, [pc, #624]	; (8013250 <GUI_Touch_Processing+0x3990>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8012fde:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8012fe0:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8012fe4:	21ca      	movs	r1, #202	; 0xca
 8012fe6:	20b6      	movs	r0, #182	; 0xb6
 8012fe8:	f001 f8e4 	bl	80141b4 <GUI_Switch_ButtonActive>
 8012fec:	f7fc bcf6 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8012ff0:	4a98      	ldr	r2, [pc, #608]	; (8013254 <GUI_Touch_Processing+0x3994>)
 8012ff2:	e7ed      	b.n	8012fd0 <GUI_Touch_Processing+0x3710>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 8012ff4:	a378      	add	r3, pc, #480	; (adr r3, 80131d8 <GUI_Touch_Processing+0x3918>)
 8012ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	4639      	mov	r1, r7
 8012ffe:	f04f 0901 	mov.w	r9, #1
 8013002:	f7ed fd8b 	bl	8000b1c <__aeabi_dcmpge>
 8013006:	b900      	cbnz	r0, 801300a <GUI_Touch_Processing+0x374a>
 8013008:	4681      	mov	r9, r0
 801300a:	a375      	add	r3, pc, #468	; (adr r3, 80131e0 <GUI_Touch_Processing+0x3920>)
 801300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013010:	4630      	mov	r0, r6
 8013012:	4639      	mov	r1, r7
 8013014:	f04f 0a01 	mov.w	sl, #1
 8013018:	f7ed fd76 	bl	8000b08 <__aeabi_dcmple>
 801301c:	b900      	cbnz	r0, 8013020 <GUI_Touch_Processing+0x3760>
 801301e:	4682      	mov	sl, r0
 8013020:	ea09 090a 	and.w	r9, r9, sl
 8013024:	f019 0f01 	tst.w	r9, #1
 8013028:	d011      	beq.n	801304e <GUI_Touch_Processing+0x378e>
 801302a:	f1b8 0f00 	cmp.w	r8, #0
 801302e:	d00e      	beq.n	801304e <GUI_Touch_Processing+0x378e>
					Bluetooth = !Bluetooth;
 8013030:	4b89      	ldr	r3, [pc, #548]	; (8013258 <GUI_Touch_Processing+0x3998>)
 8013032:	781a      	ldrb	r2, [r3, #0]
 8013034:	fab2 f282 	clz	r2, r2
 8013038:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801303a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 801303e:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8013040:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8013042:	f001 f85d 	bl	8014100 <GUI_Switch_Button>
					GUI_Up_Panel();
 8013046:	f7fb fa0f 	bl	800e468 <GUI_Up_Panel>
 801304a:	f7fc bcc7 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 801304e:	a366      	add	r3, pc, #408	; (adr r3, 80131e8 <GUI_Touch_Processing+0x3928>)
 8013050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013054:	4620      	mov	r0, r4
 8013056:	4629      	mov	r1, r5
 8013058:	f04f 0801 	mov.w	r8, #1
 801305c:	f7ed fd5e 	bl	8000b1c <__aeabi_dcmpge>
 8013060:	b900      	cbnz	r0, 8013064 <GUI_Touch_Processing+0x37a4>
 8013062:	4680      	mov	r8, r0
 8013064:	a362      	add	r3, pc, #392	; (adr r3, 80131f0 <GUI_Touch_Processing+0x3930>)
 8013066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306a:	4620      	mov	r0, r4
 801306c:	4629      	mov	r1, r5
 801306e:	f04f 0901 	mov.w	r9, #1
 8013072:	f7ed fd49 	bl	8000b08 <__aeabi_dcmple>
 8013076:	b900      	cbnz	r0, 801307a <GUI_Touch_Processing+0x37ba>
 8013078:	4681      	mov	r9, r0
 801307a:	ea08 0809 	and.w	r8, r8, r9
 801307e:	a35e      	add	r3, pc, #376	; (adr r3, 80131f8 <GUI_Touch_Processing+0x3938>)
 8013080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013084:	4630      	mov	r0, r6
 8013086:	4639      	mov	r1, r7
 8013088:	fa5f f888 	uxtb.w	r8, r8
 801308c:	f04f 0901 	mov.w	r9, #1
 8013090:	f7ed fd44 	bl	8000b1c <__aeabi_dcmpge>
 8013094:	b900      	cbnz	r0, 8013098 <GUI_Touch_Processing+0x37d8>
 8013096:	4681      	mov	r9, r0
 8013098:	a359      	add	r3, pc, #356	; (adr r3, 8013200 <GUI_Touch_Processing+0x3940>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	4630      	mov	r0, r6
 80130a0:	4639      	mov	r1, r7
 80130a2:	f04f 0a01 	mov.w	sl, #1
 80130a6:	f7ed fd2f 	bl	8000b08 <__aeabi_dcmple>
 80130aa:	b900      	cbnz	r0, 80130ae <GUI_Touch_Processing+0x37ee>
 80130ac:	4682      	mov	sl, r0
 80130ae:	ea09 090a 	and.w	r9, r9, sl
 80130b2:	f019 0f01 	tst.w	r9, #1
 80130b6:	d003      	beq.n	80130c0 <GUI_Touch_Processing+0x3800>
 80130b8:	f1b8 0f00 	cmp.w	r8, #0
 80130bc:	f47f a91b 	bne.w	80122f6 <GUI_Touch_Processing+0x2a36>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=318*TS_Callib & Touch_y <=(318+54)*TS_Callib) //CRI
 80130c0:	a351      	add	r3, pc, #324	; (adr r3, 8013208 <GUI_Touch_Processing+0x3948>)
 80130c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c6:	4620      	mov	r0, r4
 80130c8:	4629      	mov	r1, r5
 80130ca:	f04f 0901 	mov.w	r9, #1
 80130ce:	f7ed fd25 	bl	8000b1c <__aeabi_dcmpge>
 80130d2:	b900      	cbnz	r0, 80130d6 <GUI_Touch_Processing+0x3816>
 80130d4:	4681      	mov	r9, r0
 80130d6:	a34e      	add	r3, pc, #312	; (adr r3, 8013210 <GUI_Touch_Processing+0x3950>)
 80130d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130dc:	4620      	mov	r0, r4
 80130de:	4629      	mov	r1, r5
 80130e0:	f04f 0a01 	mov.w	sl, #1
 80130e4:	f7ed fd10 	bl	8000b08 <__aeabi_dcmple>
 80130e8:	b900      	cbnz	r0, 80130ec <GUI_Touch_Processing+0x382c>
 80130ea:	4682      	mov	sl, r0
 80130ec:	ea09 090a 	and.w	r9, r9, sl
 80130f0:	a349      	add	r3, pc, #292	; (adr r3, 8013218 <GUI_Touch_Processing+0x3958>)
 80130f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f6:	4630      	mov	r0, r6
 80130f8:	4639      	mov	r1, r7
 80130fa:	fa5f f989 	uxtb.w	r9, r9
 80130fe:	f04f 0a01 	mov.w	sl, #1
 8013102:	f7ed fd0b 	bl	8000b1c <__aeabi_dcmpge>
 8013106:	b900      	cbnz	r0, 801310a <GUI_Touch_Processing+0x384a>
 8013108:	4682      	mov	sl, r0
 801310a:	a345      	add	r3, pc, #276	; (adr r3, 8013220 <GUI_Touch_Processing+0x3960>)
 801310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013110:	4630      	mov	r0, r6
 8013112:	4639      	mov	r1, r7
 8013114:	f04f 0b01 	mov.w	fp, #1
 8013118:	f7ed fcf6 	bl	8000b08 <__aeabi_dcmple>
 801311c:	b900      	cbnz	r0, 8013120 <GUI_Touch_Processing+0x3860>
 801311e:	4683      	mov	fp, r0
 8013120:	ea0a 0a0b 	and.w	sl, sl, fp
 8013124:	f01a 0f01 	tst.w	sl, #1
 8013128:	d01c      	beq.n	8013164 <GUI_Touch_Processing+0x38a4>
 801312a:	f1b9 0f00 	cmp.w	r9, #0
 801312e:	d019      	beq.n	8013164 <GUI_Touch_Processing+0x38a4>
					if(!(Color_rend_Field & CRI_CQS)){
 8013130:	4c4a      	ldr	r4, [pc, #296]	; (801325c <GUI_Touch_Processing+0x399c>)
 8013132:	7822      	ldrb	r2, [r4, #0]
 8013134:	07d0      	lsls	r0, r2, #31
 8013136:	f53c ac51 	bmi.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 801313a:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 801313c:	f082 0201 	eor.w	r2, r2, #1
 8013140:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8013142:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8013146:	401a      	ands	r2, r3
 8013148:	20b9      	movs	r0, #185	; 0xb9
 801314a:	f000 ffaa 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 801314e:	7822      	ldrb	r2, [r4, #0]
 8013150:	2301      	movs	r3, #1
 8013152:	43d2      	mvns	r2, r2
 8013154:	401a      	ands	r2, r3
 8013156:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801315a:	20b9      	movs	r0, #185	; 0xb9
 801315c:	f000 ffa1 	bl	80140a2 <GUI_RadioBox>
 8013160:	f7fc bc3c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=362*TS_Callib & Touch_y <=(362+54)*TS_Callib) //CQS
 8013164:	a330      	add	r3, pc, #192	; (adr r3, 8013228 <GUI_Touch_Processing+0x3968>)
 8013166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316a:	4630      	mov	r0, r6
 801316c:	4639      	mov	r1, r7
 801316e:	f04f 0a01 	mov.w	sl, #1
 8013172:	f7ed fcd3 	bl	8000b1c <__aeabi_dcmpge>
 8013176:	b900      	cbnz	r0, 801317a <GUI_Touch_Processing+0x38ba>
 8013178:	4682      	mov	sl, r0
 801317a:	a32d      	add	r3, pc, #180	; (adr r3, 8013230 <GUI_Touch_Processing+0x3970>)
 801317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013180:	4630      	mov	r0, r6
 8013182:	4639      	mov	r1, r7
 8013184:	f04f 0b01 	mov.w	fp, #1
 8013188:	f7ed fcbe 	bl	8000b08 <__aeabi_dcmple>
 801318c:	b900      	cbnz	r0, 8013190 <GUI_Touch_Processing+0x38d0>
 801318e:	4683      	mov	fp, r0
 8013190:	ea0a 0a0b 	and.w	sl, sl, fp
 8013194:	f01a 0f01 	tst.w	sl, #1
 8013198:	d072      	beq.n	8013280 <GUI_Touch_Processing+0x39c0>
 801319a:	f1b9 0f00 	cmp.w	r9, #0
 801319e:	d06f      	beq.n	8013280 <GUI_Touch_Processing+0x39c0>
					if((Color_rend_Field&CRI_CQS)){
 80131a0:	4c2e      	ldr	r4, [pc, #184]	; (801325c <GUI_Touch_Processing+0x399c>)
 80131a2:	7822      	ldrb	r2, [r4, #0]
 80131a4:	07d1      	lsls	r1, r2, #31
 80131a6:	f57c ac19 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80131aa:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 80131ac:	f082 0201 	eor.w	r2, r2, #1
 80131b0:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80131b2:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80131b6:	401a      	ands	r2, r3
 80131b8:	20b9      	movs	r0, #185	; 0xb9
 80131ba:	f000 ff72 	bl	80140a2 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 80131be:	7822      	ldrb	r2, [r4, #0]
 80131c0:	2301      	movs	r3, #1
 80131c2:	43d2      	mvns	r2, r2
 80131c4:	401a      	ands	r2, r3
 80131c6:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80131ca:	20b9      	movs	r0, #185	; 0xb9
 80131cc:	f000 ff69 	bl	80140a2 <GUI_RadioBox>
 80131d0:	f7fc bc04 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 80131d4:	f3af 8000 	nop.w
 80131d8:	99999999 	.word	0x99999999
 80131dc:	40863199 	.word	0x40863199
 80131e0:	66666666 	.word	0x66666666
 80131e4:	408aaa66 	.word	0x408aaa66
 80131e8:	33333333 	.word	0x33333333
 80131ec:	40353333 	.word	0x40353333
 80131f0:	00000000 	.word	0x00000000
 80131f4:	4084b400 	.word	0x4084b400
 80131f8:	99999999 	.word	0x99999999
 80131fc:	40748999 	.word	0x40748999
 8013200:	99999999 	.word	0x99999999
 8013204:	407cd199 	.word	0x407cd199
 8013208:	00000000 	.word	0x00000000
 801320c:	407ea400 	.word	0x407ea400
 8013210:	cccccccd 	.word	0xcccccccd
 8013214:	4083cacc 	.word	0x4083cacc
 8013218:	99999999 	.word	0x99999999
 801321c:	408a5599 	.word	0x408a5599
 8013220:	66666666 	.word	0x66666666
 8013224:	408ece66 	.word	0x408ece66
 8013228:	66666666 	.word	0x66666666
 801322c:	408dfa66 	.word	0x408dfa66
 8013230:	99999999 	.word	0x99999999
 8013234:	40913999 	.word	0x40913999
 8013238:	20000a50 	.word	0x20000a50
 801323c:	08101838 	.word	0x08101838
 8013240:	08100838 	.word	0x08100838
 8013244:	2004cc00 	.word	0x2004cc00
 8013248:	20004fec 	.word	0x20004fec
 801324c:	20004fe8 	.word	0x20004fe8
 8013250:	20004ff4 	.word	0x20004ff4
 8013254:	20004fe4 	.word	0x20004fe4
 8013258:	2008acda 	.word	0x2008acda
 801325c:	20004ca0 	.word	0x20004ca0
 8013260:	cccccccd 	.word	0xcccccccd
 8013264:	407e24cc 	.word	0x407e24cc
 8013268:	33333333 	.word	0x33333333
 801326c:	40838b33 	.word	0x40838b33
 8013270:	66666666 	.word	0x66666666
 8013274:	4080ba66 	.word	0x4080ba66
 8013278:	33333333 	.word	0x33333333
 801327c:	40853333 	.word	0x40853333
 8013280:	9b00      	ldr	r3, [sp, #0]
 8013282:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013284:	4620      	mov	r0, r4
 8013286:	ea03 0902 	and.w	r9, r3, r2
 801328a:	4629      	mov	r1, r5
 801328c:	a3a4      	add	r3, pc, #656	; (adr r3, 8013520 <GUI_Touch_Processing+0x3c60>)
 801328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013292:	f04f 0a01 	mov.w	sl, #1
 8013296:	f7ed fc41 	bl	8000b1c <__aeabi_dcmpge>
 801329a:	b900      	cbnz	r0, 801329e <GUI_Touch_Processing+0x39de>
 801329c:	4682      	mov	sl, r0
 801329e:	a3a2      	add	r3, pc, #648	; (adr r3, 8013528 <GUI_Touch_Processing+0x3c68>)
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	4620      	mov	r0, r4
 80132a6:	4629      	mov	r1, r5
 80132a8:	f04f 0b01 	mov.w	fp, #1
 80132ac:	f7ed fc2c 	bl	8000b08 <__aeabi_dcmple>
 80132b0:	b900      	cbnz	r0, 80132b4 <GUI_Touch_Processing+0x39f4>
 80132b2:	4683      	mov	fp, r0
 80132b4:	ea0a 030b 	and.w	r3, sl, fp
 80132b8:	07db      	lsls	r3, r3, #31
 80132ba:	d503      	bpl.n	80132c4 <GUI_Touch_Processing+0x3a04>
 80132bc:	f1b9 0f00 	cmp.w	r9, #0
 80132c0:	f47d ab51 	bne.w	8010966 <GUI_Touch_Processing+0x10a6>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80132c4:	a39a      	add	r3, pc, #616	; (adr r3, 8013530 <GUI_Touch_Processing+0x3c70>)
 80132c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ca:	4620      	mov	r0, r4
 80132cc:	4629      	mov	r1, r5
 80132ce:	f04f 0a01 	mov.w	sl, #1
 80132d2:	f7ed fc23 	bl	8000b1c <__aeabi_dcmpge>
 80132d6:	b900      	cbnz	r0, 80132da <GUI_Touch_Processing+0x3a1a>
 80132d8:	4682      	mov	sl, r0
 80132da:	a37f      	add	r3, pc, #508	; (adr r3, 80134d8 <GUI_Touch_Processing+0x3c18>)
 80132dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e0:	4620      	mov	r0, r4
 80132e2:	4629      	mov	r1, r5
 80132e4:	f04f 0b01 	mov.w	fp, #1
 80132e8:	f7ed fc0e 	bl	8000b08 <__aeabi_dcmple>
 80132ec:	b900      	cbnz	r0, 80132f0 <GUI_Touch_Processing+0x3a30>
 80132ee:	4683      	mov	fp, r0
 80132f0:	ea0a 030b 	and.w	r3, sl, fp
 80132f4:	07d8      	lsls	r0, r3, #31
 80132f6:	d525      	bpl.n	8013344 <GUI_Touch_Processing+0x3a84>
 80132f8:	f1b9 0f00 	cmp.w	r9, #0
 80132fc:	d022      	beq.n	8013344 <GUI_Touch_Processing+0x3a84>
					WriteSDFLASH_t(sdfile_cnt);
 80132fe:	4b82      	ldr	r3, [pc, #520]	; (8013508 <GUI_Touch_Processing+0x3c48>)
 8013300:	2100      	movs	r1, #0
 8013302:	8818      	ldrh	r0, [r3, #0]
 8013304:	f005 ffec 	bl	80192e0 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013308:	4b80      	ldr	r3, [pc, #512]	; (801350c <GUI_Touch_Processing+0x3c4c>)
 801330a:	781a      	ldrb	r2, [r3, #0]
 801330c:	4b80      	ldr	r3, [pc, #512]	; (8013510 <GUI_Touch_Processing+0x3c50>)
					switch (Prev_Inf_Screen){
 801330e:	1e51      	subs	r1, r2, #1
 8013310:	2905      	cmp	r1, #5
 8013312:	d804      	bhi.n	801331e <GUI_Touch_Processing+0x3a5e>
 8013314:	e8df f001 	tbb	[pc, r1]
 8013318:	0a030306 	.word	0x0a030306
 801331c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801331e:	701a      	strb	r2, [r3, #0]
 8013320:	f7fc bb5c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013324:	2201      	movs	r2, #1
 8013326:	701a      	strb	r2, [r3, #0]
 8013328:	f7fc bb58 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801332c:	2204      	movs	r2, #4
 801332e:	701a      	strb	r2, [r3, #0]
 8013330:	f7fc bb54 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013334:	2206      	movs	r2, #6
 8013336:	701a      	strb	r2, [r3, #0]
 8013338:	f7fc bb50 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801333c:	2205      	movs	r2, #5
 801333e:	701a      	strb	r2, [r3, #0]
 8013340:	f7fc bb4c 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8013344:	a364      	add	r3, pc, #400	; (adr r3, 80134d8 <GUI_Touch_Processing+0x3c18>)
 8013346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334a:	4620      	mov	r0, r4
 801334c:	4629      	mov	r1, r5
 801334e:	f04f 0a01 	mov.w	sl, #1
 8013352:	f7ed fbe3 	bl	8000b1c <__aeabi_dcmpge>
 8013356:	b900      	cbnz	r0, 801335a <GUI_Touch_Processing+0x3a9a>
 8013358:	4682      	mov	sl, r0
 801335a:	a361      	add	r3, pc, #388	; (adr r3, 80134e0 <GUI_Touch_Processing+0x3c20>)
 801335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013360:	4620      	mov	r0, r4
 8013362:	4629      	mov	r1, r5
 8013364:	f04f 0b01 	mov.w	fp, #1
 8013368:	f7ed fbce 	bl	8000b08 <__aeabi_dcmple>
 801336c:	b900      	cbnz	r0, 8013370 <GUI_Touch_Processing+0x3ab0>
 801336e:	4683      	mov	fp, r0
 8013370:	ea0a 030b 	and.w	r3, sl, fp
 8013374:	07d9      	lsls	r1, r3, #31
 8013376:	d503      	bpl.n	8013380 <GUI_Touch_Processing+0x3ac0>
 8013378:	f1b9 0f00 	cmp.w	r9, #0
 801337c:	f47c ab6e 	bne.w	800fa5c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8013380:	2200      	movs	r2, #0
 8013382:	4b64      	ldr	r3, [pc, #400]	; (8013514 <GUI_Touch_Processing+0x3c54>)
 8013384:	4630      	mov	r0, r6
 8013386:	4639      	mov	r1, r7
 8013388:	f04f 0401 	mov.w	r4, #1
 801338c:	f7ed fbc6 	bl	8000b1c <__aeabi_dcmpge>
 8013390:	b900      	cbnz	r0, 8013394 <GUI_Touch_Processing+0x3ad4>
 8013392:	4604      	mov	r4, r0
 8013394:	a354      	add	r3, pc, #336	; (adr r3, 80134e8 <GUI_Touch_Processing+0x3c28>)
 8013396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339a:	4630      	mov	r0, r6
 801339c:	4639      	mov	r1, r7
 801339e:	f04f 0501 	mov.w	r5, #1
 80133a2:	f7ed fbb1 	bl	8000b08 <__aeabi_dcmple>
 80133a6:	b900      	cbnz	r0, 80133aa <GUI_Touch_Processing+0x3aea>
 80133a8:	4605      	mov	r5, r0
 80133aa:	402c      	ands	r4, r5
 80133ac:	07e2      	lsls	r2, r4, #31
 80133ae:	f57c ab15 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 80133b2:	f1b8 0f00 	cmp.w	r8, #0
 80133b6:	f47e af70 	bne.w	801229a <GUI_Touch_Processing+0x29da>
 80133ba:	f7fc bb0f 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 8*TS_Callib & Touch_x <= (270)*TS_Callib & Touch_y >=8*TS_Callib & Touch_y <=(470)*TS_Callib) // Information
 80133be:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80133c2:	f7ed f8bf 	bl	8000544 <__aeabi_i2d>
 80133c6:	4680      	mov	r8, r0
 80133c8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80133cc:	4689      	mov	r9, r1
 80133ce:	f7ed f8b9 	bl	8000544 <__aeabi_i2d>
 80133d2:	a347      	add	r3, pc, #284	; (adr r3, 80134f0 <GUI_Touch_Processing+0x3c30>)
 80133d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d8:	4606      	mov	r6, r0
 80133da:	460f      	mov	r7, r1
 80133dc:	4640      	mov	r0, r8
 80133de:	4649      	mov	r1, r9
 80133e0:	f04f 0401 	mov.w	r4, #1
 80133e4:	f7ed fb9a 	bl	8000b1c <__aeabi_dcmpge>
 80133e8:	b900      	cbnz	r0, 80133ec <GUI_Touch_Processing+0x3b2c>
 80133ea:	4604      	mov	r4, r0
 80133ec:	a342      	add	r3, pc, #264	; (adr r3, 80134f8 <GUI_Touch_Processing+0x3c38>)
 80133ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f2:	4640      	mov	r0, r8
 80133f4:	4649      	mov	r1, r9
 80133f6:	f04f 0501 	mov.w	r5, #1
 80133fa:	f7ed fb85 	bl	8000b08 <__aeabi_dcmple>
 80133fe:	b900      	cbnz	r0, 8013402 <GUI_Touch_Processing+0x3b42>
 8013400:	4605      	mov	r5, r0
 8013402:	a33b      	add	r3, pc, #236	; (adr r3, 80134f0 <GUI_Touch_Processing+0x3c30>)
 8013404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013408:	4630      	mov	r0, r6
 801340a:	4639      	mov	r1, r7
 801340c:	402c      	ands	r4, r5
 801340e:	f04f 0501 	mov.w	r5, #1
 8013412:	f7ed fb83 	bl	8000b1c <__aeabi_dcmpge>
 8013416:	b900      	cbnz	r0, 801341a <GUI_Touch_Processing+0x3b5a>
 8013418:	4605      	mov	r5, r0
 801341a:	402c      	ands	r4, r5
 801341c:	07e3      	lsls	r3, r4, #31
 801341e:	f57c aadd 	bpl.w	800f9dc <GUI_Touch_Processing+0x11c>
 8013422:	a337      	add	r3, pc, #220	; (adr r3, 8013500 <GUI_Touch_Processing+0x3c40>)
 8013424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013428:	4630      	mov	r0, r6
 801342a:	4639      	mov	r1, r7
 801342c:	f04f 0401 	mov.w	r4, #1
 8013430:	f7ed fb6a 	bl	8000b08 <__aeabi_dcmple>
 8013434:	b900      	cbnz	r0, 8013438 <GUI_Touch_Processing+0x3b78>
 8013436:	4604      	mov	r4, r0
 8013438:	f014 0fff 	tst.w	r4, #255	; 0xff
 801343c:	f43c aace 	beq.w	800f9dc <GUI_Touch_Processing+0x11c>
					GUI_screen_state = preGUI_screen_state;
 8013440:	4b35      	ldr	r3, [pc, #212]	; (8013518 <GUI_Touch_Processing+0x3c58>)
 8013442:	781a      	ldrb	r2, [r3, #0]
 8013444:	f88b 2000 	strb.w	r2, [fp]
					preGUI_screen_state = Information_Screen;
 8013448:	2211      	movs	r2, #17
 801344a:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 801344c:	4b33      	ldr	r3, [pc, #204]	; (801351c <GUI_Touch_Processing+0x3c5c>)
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	3b07      	subs	r3, #7
 8013452:	2b09      	cmp	r3, #9
 8013454:	f63c aac2 	bhi.w	800f9dc <GUI_Touch_Processing+0x11c>
 8013458:	a201      	add	r2, pc, #4	; (adr r2, 8013460 <GUI_Touch_Processing+0x3ba0>)
 801345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801345e:	bf00      	nop
 8013460:	08013489 	.word	0x08013489
 8013464:	0800f9dd 	.word	0x0800f9dd
 8013468:	0800f9dd 	.word	0x0800f9dd
 801346c:	0800f9dd 	.word	0x0800f9dd
 8013470:	0800f9dd 	.word	0x0800f9dd
 8013474:	08013499 	.word	0x08013499
 8013478:	0800f9dd 	.word	0x0800f9dd
 801347c:	080134a9 	.word	0x080134a9
 8013480:	0800f9dd 	.word	0x0800f9dd
 8013484:	080134b9 	.word	0x080134b9
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 8013488:	2307      	movs	r3, #7
 801348a:	f88b 3000 	strb.w	r3, [fp]
 801348e:	4b1f      	ldr	r3, [pc, #124]	; (801350c <GUI_Touch_Processing+0x3c4c>)
 8013490:	2201      	movs	r2, #1
 8013492:	701a      	strb	r2, [r3, #0]
 8013494:	f7fc baa2 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 8013498:	230c      	movs	r3, #12
 801349a:	f88b 3000 	strb.w	r3, [fp]
 801349e:	4b1b      	ldr	r3, [pc, #108]	; (801350c <GUI_Touch_Processing+0x3c4c>)
 80134a0:	2204      	movs	r2, #4
 80134a2:	701a      	strb	r2, [r3, #0]
 80134a4:	f7fc ba9a 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 80134a8:	230e      	movs	r3, #14
 80134aa:	f88b 3000 	strb.w	r3, [fp]
 80134ae:	4b17      	ldr	r3, [pc, #92]	; (801350c <GUI_Touch_Processing+0x3c4c>)
 80134b0:	2205      	movs	r2, #5
 80134b2:	701a      	strb	r2, [r3, #0]
 80134b4:	f7fc ba92 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 80134b8:	2310      	movs	r3, #16
 80134ba:	f88b 3000 	strb.w	r3, [fp]
 80134be:	4b13      	ldr	r3, [pc, #76]	; (801350c <GUI_Touch_Processing+0x3c4c>)
 80134c0:	2206      	movs	r2, #6
 80134c2:	701a      	strb	r2, [r3, #0]
 80134c4:	f7fc ba8a 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
		default: preGUI_screen_state = Measure_Screen;
 80134c8:	4b13      	ldr	r3, [pc, #76]	; (8013518 <GUI_Touch_Processing+0x3c58>)
 80134ca:	2201      	movs	r2, #1
 80134cc:	701a      	strb	r2, [r3, #0]
}
 80134ce:	f7fc ba85 	b.w	800f9dc <GUI_Touch_Processing+0x11c>
 80134d2:	bf00      	nop
 80134d4:	f3af 8000 	nop.w
 80134d8:	00000000 	.word	0x00000000
 80134dc:	40623800 	.word	0x40623800
 80134e0:	99999999 	.word	0x99999999
 80134e4:	40720d99 	.word	0x40720d99
 80134e8:	00000000 	.word	0x00000000
 80134ec:	4073e000 	.word	0x4073e000
 80134f0:	33333333 	.word	0x33333333
 80134f4:	40353333 	.word	0x40353333
 80134f8:	00000000 	.word	0x00000000
 80134fc:	40865c00 	.word	0x40865c00
 8013500:	00000000 	.word	0x00000000
 8013504:	40937600 	.word	0x40937600
 8013508:	20004ccc 	.word	0x20004ccc
 801350c:	2008acd5 	.word	0x2008acd5
 8013510:	20004ca1 	.word	0x20004ca1
 8013514:	406a8000 	.word	0x406a8000
 8013518:	20000232 	.word	0x20000232
 801351c:	2008b278 	.word	0x2008b278
 8013520:	66666666 	.word	0x66666666
 8013524:	4081f866 	.word	0x4081f866
 8013528:	33333333 	.word	0x33333333
 801352c:	40867133 	.word	0x40867133
 8013530:	33333333 	.word	0x33333333
 8013534:	40053333 	.word	0x40053333

08013538 <GUI_Bluetooth_Logo>:

extern UART_HandleTypeDef hlpuart1;
extern uint8_t BluetoothStat;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 8013538:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 801353c:	f101 031e 	add.w	r3, r1, #30
{
 8013540:	460c      	mov	r4, r1
 8013542:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8013544:	f100 0214 	add.w	r2, r0, #20
 8013548:	2605      	movs	r6, #5
 801354a:	f241 3776 	movw	r7, #4982	; 0x1376
 801354e:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8013552:	b29b      	uxth	r3, r3
 8013554:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8013556:	f105 060a 	add.w	r6, r5, #10
 801355a:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 801355e:	f008 fac1 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8013562:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8013566:	b2b6      	uxth	r6, r6
 8013568:	fa1f fa8a 	uxth.w	sl, sl
 801356c:	1d21      	adds	r1, r4, #4
 801356e:	4653      	mov	r3, sl
 8013570:	4632      	mov	r2, r6
 8013572:	4630      	mov	r0, r6
 8013574:	f8cd 8000 	str.w	r8, [sp]
 8013578:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801357a:	f105 070f 	add.w	r7, r5, #15
 801357e:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8013582:	f008 f8cd 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8013586:	b2bf      	uxth	r7, r7
 8013588:	fa1f f989 	uxth.w	r9, r9
 801358c:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801358e:	3506      	adds	r5, #6
 8013590:	3414      	adds	r4, #20
 8013592:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8013594:	464b      	mov	r3, r9
 8013596:	463a      	mov	r2, r7
 8013598:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801359a:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801359c:	f8cd 8000 	str.w	r8, [sp]
 80135a0:	b289      	uxth	r1, r1
 80135a2:	f008 f8bd 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80135a6:	464b      	mov	r3, r9
 80135a8:	463a      	mov	r2, r7
 80135aa:	4621      	mov	r1, r4
 80135ac:	4628      	mov	r0, r5
 80135ae:	f8cd 8000 	str.w	r8, [sp]
 80135b2:	f008 f8b5 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 80135b6:	4623      	mov	r3, r4
 80135b8:	463a      	mov	r2, r7
 80135ba:	4649      	mov	r1, r9
 80135bc:	4628      	mov	r0, r5
 80135be:	f8cd 8000 	str.w	r8, [sp]
 80135c2:	f008 f8ad 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 80135c6:	f8cd 8000 	str.w	r8, [sp]
 80135ca:	4623      	mov	r3, r4
 80135cc:	463a      	mov	r2, r7
 80135ce:	4651      	mov	r1, sl
 80135d0:	4630      	mov	r0, r6
 80135d2:	f008 f8a5 	bl	801b720 <TFT_DrawLine>
}
 80135d6:	b002      	add	sp, #8
 80135d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080135dc <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 80135dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80135e0:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 80135e4:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80135e6:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80135ea:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80135ee:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80135f0:	9600      	str	r6, [sp, #0]
 80135f2:	b29b      	uxth	r3, r3
 80135f4:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 80135f6:	f105 0608 	add.w	r6, r5, #8
 80135fa:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80135fc:	f008 f8ed 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8013600:	b2b6      	uxth	r6, r6
 8013602:	b2ad      	uxth	r5, r5
 8013604:	2702      	movs	r7, #2
 8013606:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801360a:	f104 0313 	add.w	r3, r4, #19
 801360e:	f104 010d 	add.w	r1, r4, #13
 8013612:	462a      	mov	r2, r5
 8013614:	4630      	mov	r0, r6
 8013616:	e88d 0180 	stmia.w	sp, {r7, r8}
 801361a:	b29b      	uxth	r3, r3
 801361c:	b289      	uxth	r1, r1
 801361e:	f008 fa61 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 8013622:	f104 031f 	add.w	r3, r4, #31
 8013626:	f104 0119 	add.w	r1, r4, #25
 801362a:	462a      	mov	r2, r5
 801362c:	4630      	mov	r0, r6
 801362e:	e88d 0180 	stmia.w	sp, {r7, r8}
 8013632:	b29b      	uxth	r3, r3
 8013634:	b289      	uxth	r1, r1
 8013636:	f008 fa55 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 801363a:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 801363e:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8013642:	e88d 0180 	stmia.w	sp, {r7, r8}
 8013646:	b29b      	uxth	r3, r3
 8013648:	462a      	mov	r2, r5
 801364a:	b289      	uxth	r1, r1
 801364c:	4630      	mov	r0, r6
 801364e:	f008 fa49 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
}
 8013652:	b002      	add	sp, #8
 8013654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013658 <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 8013658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801365c:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8013660:	4604      	mov	r4, r0
 8013662:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8013664:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8013668:	f241 3676 	movw	r6, #4982	; 0x1376
 801366c:	9600      	str	r6, [sp, #0]
 801366e:	b29b      	uxth	r3, r3
 8013670:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8013672:	f105 0612 	add.w	r6, r5, #18
 8013676:	f104 081c 	add.w	r8, r4, #28
 801367a:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801367c:	f008 f8ad 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8013680:	b2b6      	uxth	r6, r6
 8013682:	b2ad      	uxth	r5, r5
 8013684:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8013688:	fa1f f888 	uxth.w	r8, r8
 801368c:	f104 000c 	add.w	r0, r4, #12
 8013690:	462b      	mov	r3, r5
 8013692:	4642      	mov	r2, r8
 8013694:	4631      	mov	r1, r6
 8013696:	9700      	str	r7, [sp, #0]
 8013698:	b280      	uxth	r0, r0
 801369a:	f008 f841 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 801369e:	f104 021d 	add.w	r2, r4, #29
 80136a2:	f104 000d 	add.w	r0, r4, #13
 80136a6:	462b      	mov	r3, r5
 80136a8:	4631      	mov	r1, r6
 80136aa:	9700      	str	r7, [sp, #0]
 80136ac:	b292      	uxth	r2, r2
 80136ae:	b280      	uxth	r0, r0
 80136b0:	f008 f836 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 80136b4:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80136b8:	462b      	mov	r3, r5
 80136ba:	4642      	mov	r2, r8
 80136bc:	4631      	mov	r1, r6
 80136be:	9700      	str	r7, [sp, #0]
 80136c0:	b280      	uxth	r0, r0
 80136c2:	f008 f82d 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 80136c6:	f104 021b 	add.w	r2, r4, #27
 80136ca:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80136ce:	9700      	str	r7, [sp, #0]
 80136d0:	462b      	mov	r3, r5
 80136d2:	b292      	uxth	r2, r2
 80136d4:	4631      	mov	r1, r6
 80136d6:	b280      	uxth	r0, r0
 80136d8:	f008 f822 	bl	801b720 <TFT_DrawLine>
}
 80136dc:	b002      	add	sp, #8
 80136de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136e2 <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 80136e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80136e6:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80136ea:	4604      	mov	r4, r0
 80136ec:	460d      	mov	r5, r1
 80136ee:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 80136f2:	2a00      	cmp	r2, #0
 80136f4:	d03c      	beq.n	8013770 <GUI_Button_Down_Active+0x8e>
 80136f6:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80136fa:	9200      	str	r2, [sp, #0]
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8013700:	f104 081c 	add.w	r8, r4, #28
 8013704:	f105 0612 	add.w	r6, r5, #18
 8013708:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801370a:	f008 f866 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801370e:	b2b6      	uxth	r6, r6
 8013710:	b2ad      	uxth	r5, r5
 8013712:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8013716:	fa1f f888 	uxth.w	r8, r8
 801371a:	f104 000c 	add.w	r0, r4, #12
 801371e:	462b      	mov	r3, r5
 8013720:	4642      	mov	r2, r8
 8013722:	4631      	mov	r1, r6
 8013724:	9700      	str	r7, [sp, #0]
 8013726:	b280      	uxth	r0, r0
 8013728:	f007 fffa 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 801372c:	f104 021d 	add.w	r2, r4, #29
 8013730:	f104 000d 	add.w	r0, r4, #13
 8013734:	462b      	mov	r3, r5
 8013736:	4631      	mov	r1, r6
 8013738:	9700      	str	r7, [sp, #0]
 801373a:	b292      	uxth	r2, r2
 801373c:	b280      	uxth	r0, r0
 801373e:	f007 ffef 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8013742:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8013746:	462b      	mov	r3, r5
 8013748:	4642      	mov	r2, r8
 801374a:	4631      	mov	r1, r6
 801374c:	9700      	str	r7, [sp, #0]
 801374e:	b280      	uxth	r0, r0
 8013750:	f007 ffe6 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8013754:	f104 021b 	add.w	r2, r4, #27
 8013758:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801375c:	9700      	str	r7, [sp, #0]
 801375e:	462b      	mov	r3, r5
 8013760:	b292      	uxth	r2, r2
 8013762:	4631      	mov	r1, r6
 8013764:	b280      	uxth	r0, r0
 8013766:	f007 ffdb 	bl	801b720 <TFT_DrawLine>
}
 801376a:	b002      	add	sp, #8
 801376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8013770:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 8013774:	e7c1      	b.n	80136fa <GUI_Button_Down_Active+0x18>

08013776 <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 8013776:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377a:	4604      	mov	r4, r0
 801377c:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801377e:	f241 3676 	movw	r6, #4982	; 0x1376
 8013782:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8013786:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801378a:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 801378c:	f104 0a13 	add.w	sl, r4, #19
 8013790:	f105 0b0c 	add.w	fp, r5, #12
 8013794:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8013798:	f105 061b 	add.w	r6, r5, #27
 801379c:	b2b6      	uxth	r6, r6
 801379e:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80137a2:	fa1f fa8a 	uxth.w	sl, sl
 80137a6:	fa1f fb8b 	uxth.w	fp, fp
 80137aa:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80137b2:	f104 0712 	add.w	r7, r4, #18
 80137b6:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80137b8:	f008 f80f 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80137bc:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80137be:	4633      	mov	r3, r6
 80137c0:	464a      	mov	r2, r9
 80137c2:	4659      	mov	r1, fp
 80137c4:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80137c6:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80137c8:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 80137cc:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80137ce:	f007 ffa7 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 80137d2:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80137d4:	4633      	mov	r3, r6
 80137d6:	4622      	mov	r2, r4
 80137d8:	4659      	mov	r1, fp
 80137da:	4638      	mov	r0, r7
 80137dc:	f8cd 8000 	str.w	r8, [sp]
 80137e0:	f007 ff9e 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 80137e4:	462b      	mov	r3, r5
 80137e6:	4652      	mov	r2, sl
 80137e8:	4631      	mov	r1, r6
 80137ea:	4648      	mov	r0, r9
 80137ec:	f8cd 8000 	str.w	r8, [sp]
 80137f0:	f007 ff96 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 80137f4:	f8cd 8000 	str.w	r8, [sp]
 80137f8:	462b      	mov	r3, r5
 80137fa:	463a      	mov	r2, r7
 80137fc:	4631      	mov	r1, r6
 80137fe:	4620      	mov	r0, r4
 8013800:	f007 ff8e 	bl	801b720 <TFT_DrawLine>
}
 8013804:	b003      	add	sp, #12
 8013806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801380a <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 801380a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801380c:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8013810:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8013814:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8013818:	4604      	mov	r4, r0
 801381a:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801381c:	9600      	str	r6, [sp, #0]
 801381e:	b29b      	uxth	r3, r3
 8013820:	b292      	uxth	r2, r2
 8013822:	f007 ffda 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 8013826:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801382a:	f105 0327 	add.w	r3, r5, #39	; 0x27
 801382e:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8013832:	f105 0110 	add.w	r1, r5, #16
 8013836:	f104 0008 	add.w	r0, r4, #8
 801383a:	9600      	str	r6, [sp, #0]
 801383c:	b29b      	uxth	r3, r3
 801383e:	b292      	uxth	r2, r2
 8013840:	b289      	uxth	r1, r1
 8013842:	b280      	uxth	r0, r0
 8013844:	f007 ffe1 	bl	801b80a <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 8013848:	f105 0330 	add.w	r3, r5, #48	; 0x30
 801384c:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8013850:	1d69      	adds	r1, r5, #5
 8013852:	1da0      	adds	r0, r4, #6
 8013854:	9600      	str	r6, [sp, #0]
 8013856:	b29b      	uxth	r3, r3
 8013858:	b292      	uxth	r2, r2
 801385a:	b289      	uxth	r1, r1
 801385c:	b280      	uxth	r0, r0
 801385e:	f007 ff5f 	bl	801b720 <TFT_DrawLine>
}
 8013862:	b002      	add	sp, #8
 8013864:	bd70      	pop	{r4, r5, r6, pc}

08013866 <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 8013866:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801386a:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 801386e:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8013870:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8013874:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8013878:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801387a:	9600      	str	r6, [sp, #0]
 801387c:	b29b      	uxth	r3, r3
 801387e:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8013880:	f105 071c 	add.w	r7, r5, #28
 8013884:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8013888:	f007 ffa7 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 801388c:	b2bf      	uxth	r7, r7
 801388e:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8013892:	f104 0109 	add.w	r1, r4, #9
 8013896:	f105 0009 	add.w	r0, r5, #9
 801389a:	463a      	mov	r2, r7
 801389c:	9600      	str	r6, [sp, #0]
 801389e:	b29b      	uxth	r3, r3
 80138a0:	b289      	uxth	r1, r1
 80138a2:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 80138a4:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80138a8:	f007 ffaf 	bl	801b80a <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 80138ac:	fa1f f888 	uxth.w	r8, r8
 80138b0:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80138b4:	f105 0231 	add.w	r2, r5, #49	; 0x31
 80138b8:	f105 0012 	add.w	r0, r5, #18
 80138bc:	4641      	mov	r1, r8
 80138be:	9600      	str	r6, [sp, #0]
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	b292      	uxth	r2, r2
 80138c4:	b280      	uxth	r0, r0
 80138c6:	f007 ffa0 	bl	801b80a <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 80138ca:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 80138ce:	fa0f f188 	sxth.w	r1, r8
 80138d2:	b238      	sxth	r0, r7
 80138d4:	9600      	str	r6, [sp, #0]
 80138d6:	2302      	movs	r3, #2
 80138d8:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 80138da:	f105 071d 	add.w	r7, r5, #29
 80138de:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 80138e2:	f007 fdd3 	bl	801b48c <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 80138e6:	b2bf      	uxth	r7, r7
 80138e8:	fa1f f888 	uxth.w	r8, r8
 80138ec:	fa1f f989 	uxth.w	r9, r9
 80138f0:	f104 0313 	add.w	r3, r4, #19
 80138f4:	464a      	mov	r2, r9
 80138f6:	4641      	mov	r1, r8
 80138f8:	4638      	mov	r0, r7
 80138fa:	9600      	str	r6, [sp, #0]
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	f007 ff0f 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8013902:	f104 030b 	add.w	r3, r4, #11
 8013906:	464a      	mov	r2, r9
 8013908:	4641      	mov	r1, r8
 801390a:	4638      	mov	r0, r7
 801390c:	9600      	str	r6, [sp, #0]
 801390e:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8013910:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8013914:	f104 081d 	add.w	r8, r4, #29
 8013918:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 801391a:	f007 ff01 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 801391e:	b2bf      	uxth	r7, r7
 8013920:	fa1f f888 	uxth.w	r8, r8
 8013924:	b2a4      	uxth	r4, r4
 8013926:	f105 0227 	add.w	r2, r5, #39	; 0x27
 801392a:	4623      	mov	r3, r4
 801392c:	4641      	mov	r1, r8
 801392e:	4638      	mov	r0, r7
 8013930:	9600      	str	r6, [sp, #0]
 8013932:	b292      	uxth	r2, r2
 8013934:	f007 fef4 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8013938:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 801393c:	9600      	str	r6, [sp, #0]
 801393e:	4623      	mov	r3, r4
 8013940:	b292      	uxth	r2, r2
 8013942:	4641      	mov	r1, r8
 8013944:	4638      	mov	r0, r7
 8013946:	f007 feeb 	bl	801b720 <TFT_DrawLine>
}
 801394a:	b003      	add	sp, #12
 801394c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013950 <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 8013950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013954:	b085      	sub	sp, #20
 8013956:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8013958:	9203      	str	r2, [sp, #12]
 801395a:	9e03      	ldr	r6, [sp, #12]
{
 801395c:	460d      	mov	r5, r1
 801395e:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8013962:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8013966:	2e00      	cmp	r6, #0
 8013968:	f000 80b6 	beq.w	8013ad8 <GUI_Button_SD_Card+0x188>
 801396c:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8013970:	f104 0715 	add.w	r7, r4, #21
 8013974:	f105 0b05 	add.w	fp, r5, #5
 8013978:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 801397c:	f105 0a07 	add.w	sl, r5, #7
 8013980:	b2bf      	uxth	r7, r7
 8013982:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8013986:	9600      	str	r6, [sp, #0]
 8013988:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 801398a:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801398e:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8013990:	fa1f fb8b 	uxth.w	fp, fp
 8013994:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8013998:	f007 ff1f 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 801399c:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80139a0:	464a      	mov	r2, r9
 80139a2:	4638      	mov	r0, r7
 80139a4:	4653      	mov	r3, sl
 80139a6:	4659      	mov	r1, fp
 80139a8:	9600      	str	r6, [sp, #0]
 80139aa:	f007 ff16 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80139ae:	fa1f f888 	uxth.w	r8, r8
 80139b2:	f105 0108 	add.w	r1, r5, #8
 80139b6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80139ba:	4643      	mov	r3, r8
 80139bc:	464a      	mov	r2, r9
 80139be:	b289      	uxth	r1, r1
 80139c0:	b280      	uxth	r0, r0
 80139c2:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 80139c4:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80139c8:	f007 ff07 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 80139cc:	fa1f f989 	uxth.w	r9, r9
 80139d0:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80139d4:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80139d8:	4643      	mov	r3, r8
 80139da:	464a      	mov	r2, r9
 80139dc:	b289      	uxth	r1, r1
 80139de:	b280      	uxth	r0, r0
 80139e0:	9600      	str	r6, [sp, #0]
 80139e2:	f007 fefa 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 80139e6:	f104 030c 	add.w	r3, r4, #12
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	f105 0810 	add.w	r8, r5, #16
 80139f0:	fa1f f888 	uxth.w	r8, r8
 80139f4:	9302      	str	r3, [sp, #8]
 80139f6:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 80139fa:	4641      	mov	r1, r8
 80139fc:	4648      	mov	r0, r9
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	9a02      	ldr	r2, [sp, #8]
 8013a02:	9600      	str	r6, [sp, #0]
 8013a04:	f007 fee9 	bl	801b7da <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8013a08:	463a      	mov	r2, r7
 8013a0a:	4641      	mov	r1, r8
 8013a0c:	4648      	mov	r0, r9
 8013a0e:	465b      	mov	r3, fp
 8013a10:	9600      	str	r6, [sp, #0]
 8013a12:	f007 fe85 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 8013a16:	1dab      	adds	r3, r5, #6
 8013a18:	f104 000b 	add.w	r0, r4, #11
 8013a1c:	463a      	mov	r2, r7
 8013a1e:	4641      	mov	r1, r8
 8013a20:	b29b      	uxth	r3, r3
 8013a22:	b280      	uxth	r0, r0
 8013a24:	9600      	str	r6, [sp, #0]
 8013a26:	f007 fe7b 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8013a2a:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8013a2e:	463a      	mov	r2, r7
 8013a30:	4641      	mov	r1, r8
 8013a32:	4653      	mov	r3, sl
 8013a34:	9802      	ldr	r0, [sp, #8]
 8013a36:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8013a38:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8013a3c:	f007 fe70 	bl	801b720 <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8013a40:	fa1f f888 	uxth.w	r8, r8
 8013a44:	fa1f f989 	uxth.w	r9, r9
 8013a48:	f104 0013 	add.w	r0, r4, #19
 8013a4c:	463a      	mov	r2, r7
 8013a4e:	464b      	mov	r3, r9
 8013a50:	4641      	mov	r1, r8
 8013a52:	b280      	uxth	r0, r0
 8013a54:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8013a56:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8013a5a:	f007 febe 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8013a5e:	b2bf      	uxth	r7, r7
 8013a60:	f104 0019 	add.w	r0, r4, #25
 8013a64:	464b      	mov	r3, r9
 8013a66:	463a      	mov	r2, r7
 8013a68:	4641      	mov	r1, r8
 8013a6a:	b280      	uxth	r0, r0
 8013a6c:	9600      	str	r6, [sp, #0]
 8013a6e:	f007 feb4 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 8013a72:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8013a76:	f104 001f 	add.w	r0, r4, #31
 8013a7a:	464b      	mov	r3, r9
 8013a7c:	b292      	uxth	r2, r2
 8013a7e:	4641      	mov	r1, r8
 8013a80:	b280      	uxth	r0, r0
 8013a82:	9600      	str	r6, [sp, #0]
 8013a84:	f007 fea9 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 8013a88:	f104 0227 	add.w	r2, r4, #39	; 0x27
 8013a8c:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8013a90:	464b      	mov	r3, r9
 8013a92:	b292      	uxth	r2, r2
 8013a94:	4641      	mov	r1, r8
 8013a96:	b280      	uxth	r0, r0
 8013a98:	9600      	str	r6, [sp, #0]
 8013a9a:	f007 fe9e 	bl	801b7da <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 8013a9e:	4811      	ldr	r0, [pc, #68]	; (8013ae4 <GUI_Button_SD_Card+0x194>)
 8013aa0:	f008 f8c4 	bl	801bc2c <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 8013aa4:	4630      	mov	r0, r6
 8013aa6:	f008 f8c7 	bl	801bc38 <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8013aaa:	9b03      	ldr	r3, [sp, #12]
 8013aac:	b1bb      	cbz	r3, 8013ade <GUI_Button_SD_Card+0x18e>
 8013aae:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 8013ab2:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8013ab4:	f008 f8c6 	bl	801bc44 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 8013ab8:	b2ad      	uxth	r5, r5
 8013aba:	f104 0010 	add.w	r0, r4, #16
 8013abe:	4629      	mov	r1, r5
 8013ac0:	2253      	movs	r2, #83	; 0x53
 8013ac2:	b280      	uxth	r0, r0
 8013ac4:	f008 f97c 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 8013ac8:	2244      	movs	r2, #68	; 0x44
 8013aca:	4629      	mov	r1, r5
 8013acc:	4638      	mov	r0, r7
}
 8013ace:	b005      	add	sp, #20
 8013ad0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8013ad4:	f008 b974 	b.w	801bdc0 <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8013ad8:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8013adc:	e748      	b.n	8013970 <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8013ade:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 8013ae2:	e7e6      	b.n	8013ab2 <GUI_Button_SD_Card+0x162>
 8013ae4:	200001e0 	.word	0x200001e0

08013ae8 <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aec:	b085      	sub	sp, #20
 8013aee:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8013af0:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8013af4:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8013af8:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8013afc:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8013afe:	9600      	str	r6, [sp, #0]
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	b292      	uxth	r2, r2
	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8013b04:	f104 090b 	add.w	r9, r4, #11
 8013b08:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8013b0c:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8013b10:	f007 fe63 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8013b14:	fa1f f989 	uxth.w	r9, r9
 8013b18:	b2bf      	uxth	r7, r7
 8013b1a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8013b1e:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8013b22:	463b      	mov	r3, r7
 8013b24:	4649      	mov	r1, r9
 8013b26:	9600      	str	r6, [sp, #0]
 8013b28:	b292      	uxth	r2, r2
 8013b2a:	b280      	uxth	r0, r0
 8013b2c:	f007 fe55 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8013b30:	f105 0232 	add.w	r2, r5, #50	; 0x32
 8013b34:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8013b38:	463b      	mov	r3, r7
 8013b3a:	4649      	mov	r1, r9
 8013b3c:	9600      	str	r6, [sp, #0]
 8013b3e:	b292      	uxth	r2, r2
 8013b40:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8013b42:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8013b46:	f007 fe48 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8013b4a:	fa1f f888 	uxth.w	r8, r8
 8013b4e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8013b52:	f105 0a1e 	add.w	sl, r5, #30
 8013b56:	f104 0b1b 	add.w	fp, r4, #27
 8013b5a:	fa1f fa8a 	uxth.w	sl, sl
 8013b5e:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	4642      	mov	r2, r8
 8013b66:	4649      	mov	r1, r9
 8013b68:	4640      	mov	r0, r8
 8013b6a:	9600      	str	r6, [sp, #0]
 8013b6c:	9303      	str	r3, [sp, #12]
 8013b6e:	f007 fdd7 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8013b72:	465b      	mov	r3, fp
 8013b74:	4652      	mov	r2, sl
 8013b76:	4649      	mov	r1, r9
 8013b78:	4640      	mov	r0, r8
 8013b7a:	9600      	str	r6, [sp, #0]
 8013b7c:	f007 fdd0 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 8013b80:	465b      	mov	r3, fp
 8013b82:	4652      	mov	r2, sl
 8013b84:	9903      	ldr	r1, [sp, #12]
 8013b86:	9600      	str	r6, [sp, #0]
 8013b88:	4640      	mov	r0, r8
 8013b8a:	f007 fdc9 	bl	801b720 <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 8013b8e:	f104 080c 	add.w	r8, r4, #12
 8013b92:	1dea      	adds	r2, r5, #7
 8013b94:	b292      	uxth	r2, r2
 8013b96:	fa1f f888 	uxth.w	r8, r8
 8013b9a:	463b      	mov	r3, r7
 8013b9c:	4641      	mov	r1, r8
 8013b9e:	4610      	mov	r0, r2
 8013ba0:	9600      	str	r6, [sp, #0]
 8013ba2:	f007 fdbd 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 8013ba6:	f105 0208 	add.w	r2, r5, #8
 8013baa:	b292      	uxth	r2, r2
 8013bac:	463b      	mov	r3, r7
 8013bae:	4641      	mov	r1, r8
 8013bb0:	4610      	mov	r0, r2
 8013bb2:	9600      	str	r6, [sp, #0]
 8013bb4:	f007 fdb4 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 8013bb8:	f105 0209 	add.w	r2, r5, #9
 8013bbc:	b292      	uxth	r2, r2
 8013bbe:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8013bc2:	f104 010d 	add.w	r1, r4, #13
 8013bc6:	4610      	mov	r0, r2
 8013bc8:	9600      	str	r6, [sp, #0]
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	b289      	uxth	r1, r1
 8013bce:	f007 fda7 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 8013bd2:	f104 080e 	add.w	r8, r4, #14
 8013bd6:	f105 020a 	add.w	r2, r5, #10
 8013bda:	b292      	uxth	r2, r2
 8013bdc:	fa1f f888 	uxth.w	r8, r8
 8013be0:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8013be4:	4641      	mov	r1, r8
 8013be6:	4610      	mov	r0, r2
 8013be8:	9600      	str	r6, [sp, #0]
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	f007 fd98 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 8013bf0:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8013bf4:	f105 020b 	add.w	r2, r5, #11
 8013bf8:	b292      	uxth	r2, r2
 8013bfa:	b2bf      	uxth	r7, r7
 8013bfc:	463b      	mov	r3, r7
 8013bfe:	4641      	mov	r1, r8
 8013c00:	4610      	mov	r0, r2
 8013c02:	9600      	str	r6, [sp, #0]
 8013c04:	f007 fd8c 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8013c08:	f105 020c 	add.w	r2, r5, #12
 8013c0c:	b292      	uxth	r2, r2
 8013c0e:	f104 010f 	add.w	r1, r4, #15
 8013c12:	463b      	mov	r3, r7
 8013c14:	4610      	mov	r0, r2
 8013c16:	9600      	str	r6, [sp, #0]
 8013c18:	b289      	uxth	r1, r1
 8013c1a:	f007 fd81 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 8013c1e:	f104 0810 	add.w	r8, r4, #16
 8013c22:	f105 020d 	add.w	r2, r5, #13
 8013c26:	b292      	uxth	r2, r2
 8013c28:	fa1f f888 	uxth.w	r8, r8
 8013c2c:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8013c30:	4641      	mov	r1, r8
 8013c32:	4610      	mov	r0, r2
 8013c34:	9600      	str	r6, [sp, #0]
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	f007 fd72 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8013c3c:	f104 0726 	add.w	r7, r4, #38	; 0x26
 8013c40:	f105 020e 	add.w	r2, r5, #14
 8013c44:	b292      	uxth	r2, r2
 8013c46:	b2bf      	uxth	r7, r7
 8013c48:	463b      	mov	r3, r7
 8013c4a:	4641      	mov	r1, r8
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	9600      	str	r6, [sp, #0]
 8013c50:	f007 fd66 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 8013c54:	f105 020f 	add.w	r2, r5, #15
 8013c58:	b292      	uxth	r2, r2
 8013c5a:	f104 0111 	add.w	r1, r4, #17
 8013c5e:	463b      	mov	r3, r7
 8013c60:	4610      	mov	r0, r2
 8013c62:	9600      	str	r6, [sp, #0]
 8013c64:	b289      	uxth	r1, r1
 8013c66:	f007 fd5b 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 8013c6a:	f104 0812 	add.w	r8, r4, #18
 8013c6e:	f105 0210 	add.w	r2, r5, #16
 8013c72:	b292      	uxth	r2, r2
 8013c74:	fa1f f888 	uxth.w	r8, r8
 8013c78:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8013c7c:	4641      	mov	r1, r8
 8013c7e:	4610      	mov	r0, r2
 8013c80:	9600      	str	r6, [sp, #0]
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	f007 fd4c 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 8013c88:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8013c8c:	f105 0211 	add.w	r2, r5, #17
 8013c90:	b292      	uxth	r2, r2
 8013c92:	b2bf      	uxth	r7, r7
 8013c94:	463b      	mov	r3, r7
 8013c96:	4641      	mov	r1, r8
 8013c98:	4610      	mov	r0, r2
 8013c9a:	9600      	str	r6, [sp, #0]
 8013c9c:	f007 fd40 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 8013ca0:	f105 0212 	add.w	r2, r5, #18
 8013ca4:	b292      	uxth	r2, r2
 8013ca6:	f104 0113 	add.w	r1, r4, #19
 8013caa:	463b      	mov	r3, r7
 8013cac:	4610      	mov	r0, r2
 8013cae:	9600      	str	r6, [sp, #0]
 8013cb0:	b289      	uxth	r1, r1
 8013cb2:	f007 fd35 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 8013cb6:	f104 0714 	add.w	r7, r4, #20
 8013cba:	f105 0213 	add.w	r2, r5, #19
 8013cbe:	b292      	uxth	r2, r2
 8013cc0:	b2bf      	uxth	r7, r7
 8013cc2:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8013cc6:	4639      	mov	r1, r7
 8013cc8:	4610      	mov	r0, r2
 8013cca:	9600      	str	r6, [sp, #0]
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	f007 fd27 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 8013cd2:	f105 0214 	add.w	r2, r5, #20
 8013cd6:	b292      	uxth	r2, r2
 8013cd8:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8013cdc:	4639      	mov	r1, r7
 8013cde:	4610      	mov	r0, r2
 8013ce0:	9600      	str	r6, [sp, #0]
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	f007 fd1c 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8013ce8:	f104 0821 	add.w	r8, r4, #33	; 0x21
 8013cec:	f105 0215 	add.w	r2, r5, #21
 8013cf0:	b292      	uxth	r2, r2
 8013cf2:	fa1f f888 	uxth.w	r8, r8
 8013cf6:	f104 0115 	add.w	r1, r4, #21
 8013cfa:	4643      	mov	r3, r8
 8013cfc:	4610      	mov	r0, r2
 8013cfe:	9600      	str	r6, [sp, #0]
 8013d00:	b289      	uxth	r1, r1
 8013d02:	f007 fd0d 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 8013d06:	f104 0716 	add.w	r7, r4, #22
 8013d0a:	f105 0216 	add.w	r2, r5, #22
 8013d0e:	b292      	uxth	r2, r2
 8013d10:	b2bf      	uxth	r7, r7
 8013d12:	4643      	mov	r3, r8
 8013d14:	4639      	mov	r1, r7
 8013d16:	4610      	mov	r0, r2
 8013d18:	9600      	str	r6, [sp, #0]
 8013d1a:	f007 fd01 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 8013d1e:	f105 0217 	add.w	r2, r5, #23
 8013d22:	b292      	uxth	r2, r2
 8013d24:	f104 0320 	add.w	r3, r4, #32
 8013d28:	4639      	mov	r1, r7
 8013d2a:	4610      	mov	r0, r2
 8013d2c:	9600      	str	r6, [sp, #0]
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	f007 fcf6 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 8013d34:	f104 081f 	add.w	r8, r4, #31
 8013d38:	f105 0218 	add.w	r2, r5, #24
 8013d3c:	b292      	uxth	r2, r2
 8013d3e:	fa1f f888 	uxth.w	r8, r8
 8013d42:	f104 0117 	add.w	r1, r4, #23
 8013d46:	4643      	mov	r3, r8
 8013d48:	4610      	mov	r0, r2
 8013d4a:	9600      	str	r6, [sp, #0]
 8013d4c:	b289      	uxth	r1, r1
 8013d4e:	f007 fce7 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 8013d52:	f104 0718 	add.w	r7, r4, #24
 8013d56:	f105 0219 	add.w	r2, r5, #25
 8013d5a:	b292      	uxth	r2, r2
 8013d5c:	b2bf      	uxth	r7, r7
 8013d5e:	4643      	mov	r3, r8
 8013d60:	4639      	mov	r1, r7
 8013d62:	4610      	mov	r0, r2
 8013d64:	9600      	str	r6, [sp, #0]
 8013d66:	f007 fcdb 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 8013d6a:	f105 021a 	add.w	r2, r5, #26
 8013d6e:	b292      	uxth	r2, r2
 8013d70:	f104 031e 	add.w	r3, r4, #30
 8013d74:	4639      	mov	r1, r7
 8013d76:	4610      	mov	r0, r2
 8013d78:	9600      	str	r6, [sp, #0]
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	f007 fcd0 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 8013d80:	f104 0819 	add.w	r8, r4, #25
 8013d84:	f105 021b 	add.w	r2, r5, #27
 8013d88:	b292      	uxth	r2, r2
 8013d8a:	fa1f f888 	uxth.w	r8, r8
 8013d8e:	f104 031d 	add.w	r3, r4, #29
 8013d92:	4641      	mov	r1, r8
 8013d94:	4610      	mov	r0, r2
 8013d96:	9600      	str	r6, [sp, #0]
 8013d98:	b29b      	uxth	r3, r3
 8013d9a:	f007 fcc1 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 8013d9e:	f104 071c 	add.w	r7, r4, #28
 8013da2:	f105 021c 	add.w	r2, r5, #28
 8013da6:	b292      	uxth	r2, r2
 8013da8:	b2bf      	uxth	r7, r7
 8013daa:	463b      	mov	r3, r7
 8013dac:	4641      	mov	r1, r8
 8013dae:	4610      	mov	r0, r2
 8013db0:	9600      	str	r6, [sp, #0]
 8013db2:	f007 fcb5 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 8013db6:	f105 021d 	add.w	r2, r5, #29
 8013dba:	b292      	uxth	r2, r2
 8013dbc:	f104 011a 	add.w	r1, r4, #26
 8013dc0:	463b      	mov	r3, r7
 8013dc2:	4610      	mov	r0, r2
 8013dc4:	9600      	str	r6, [sp, #0]
 8013dc6:	b289      	uxth	r1, r1
 8013dc8:	f007 fcaa 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 8013dcc:	9600      	str	r6, [sp, #0]
 8013dce:	465b      	mov	r3, fp
 8013dd0:	4652      	mov	r2, sl
 8013dd2:	4659      	mov	r1, fp
 8013dd4:	4650      	mov	r0, sl
 8013dd6:	f007 fca3 	bl	801b720 <TFT_DrawLine>
}
 8013dda:	b005      	add	sp, #20
 8013ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013de0 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8013de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	4605      	mov	r5, r0
 8013de6:	460c      	mov	r4, r1
 8013de8:	f100 0623 	add.w	r6, r0, #35	; 0x23
 8013dec:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 8013df0:	2a00      	cmp	r2, #0
 8013df2:	f000 8111 	beq.w	8014018 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	f241 3276 	movw	r2, #4982	; 0x1376
 8013dfc:	bf18      	it	ne
 8013dfe:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 8013e02:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8013e04:	f105 080a 	add.w	r8, r5, #10
 8013e08:	f104 0b07 	add.w	fp, r4, #7
 8013e0c:	f104 091e 	add.w	r9, r4, #30
 8013e10:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8013e14:	b2bb      	uxth	r3, r7
 8013e16:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8013e18:	fa1f fb8b 	uxth.w	fp, fp
 8013e1c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8013e20:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8013e24:	f105 0a1c 	add.w	sl, r5, #28
 8013e28:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8013e2c:	f007 fcd5 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8013e30:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8013e32:	464b      	mov	r3, r9
 8013e34:	4642      	mov	r2, r8
 8013e36:	4659      	mov	r1, fp
 8013e38:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8013e3a:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8013e3e:	9600      	str	r6, [sp, #0]
 8013e40:	f007 fc6e 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8013e44:	463b      	mov	r3, r7
 8013e46:	4652      	mov	r2, sl
 8013e48:	4659      	mov	r1, fp
 8013e4a:	4640      	mov	r0, r8
 8013e4c:	9600      	str	r6, [sp, #0]
 8013e4e:	f007 fc67 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 8013e52:	463b      	mov	r3, r7
 8013e54:	4652      	mov	r2, sl
 8013e56:	4649      	mov	r1, r9
 8013e58:	4640      	mov	r0, r8
 8013e5a:	9600      	str	r6, [sp, #0]
 8013e5c:	f007 fc60 	bl	801b720 <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 8013e60:	f105 020b 	add.w	r2, r5, #11
 8013e64:	b292      	uxth	r2, r2
 8013e66:	f104 031d 	add.w	r3, r4, #29
 8013e6a:	f104 0108 	add.w	r1, r4, #8
 8013e6e:	4610      	mov	r0, r2
 8013e70:	9600      	str	r6, [sp, #0]
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	b289      	uxth	r1, r1
 8013e76:	f007 fc53 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 8013e7a:	f104 091c 	add.w	r9, r4, #28
 8013e7e:	f105 020c 	add.w	r2, r5, #12
 8013e82:	b292      	uxth	r2, r2
 8013e84:	fa1f f989 	uxth.w	r9, r9
 8013e88:	f104 0109 	add.w	r1, r4, #9
 8013e8c:	464b      	mov	r3, r9
 8013e8e:	4610      	mov	r0, r2
 8013e90:	9600      	str	r6, [sp, #0]
 8013e92:	b289      	uxth	r1, r1
 8013e94:	f007 fc44 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 8013e98:	f104 080a 	add.w	r8, r4, #10
 8013e9c:	f105 020d 	add.w	r2, r5, #13
 8013ea0:	b292      	uxth	r2, r2
 8013ea2:	fa1f f888 	uxth.w	r8, r8
 8013ea6:	464b      	mov	r3, r9
 8013ea8:	4641      	mov	r1, r8
 8013eaa:	4610      	mov	r0, r2
 8013eac:	9600      	str	r6, [sp, #0]
 8013eae:	f007 fc37 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 8013eb2:	f105 020e 	add.w	r2, r5, #14
 8013eb6:	b292      	uxth	r2, r2
 8013eb8:	f104 031b 	add.w	r3, r4, #27
 8013ebc:	4641      	mov	r1, r8
 8013ebe:	4610      	mov	r0, r2
 8013ec0:	9600      	str	r6, [sp, #0]
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	f007 fc2c 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 8013ec8:	f104 091a 	add.w	r9, r4, #26
 8013ecc:	f105 020f 	add.w	r2, r5, #15
 8013ed0:	b292      	uxth	r2, r2
 8013ed2:	fa1f f989 	uxth.w	r9, r9
 8013ed6:	f104 010b 	add.w	r1, r4, #11
 8013eda:	464b      	mov	r3, r9
 8013edc:	4610      	mov	r0, r2
 8013ede:	9600      	str	r6, [sp, #0]
 8013ee0:	b289      	uxth	r1, r1
 8013ee2:	f007 fc1d 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 8013ee6:	f104 080c 	add.w	r8, r4, #12
 8013eea:	f105 0210 	add.w	r2, r5, #16
 8013eee:	b292      	uxth	r2, r2
 8013ef0:	fa1f f888 	uxth.w	r8, r8
 8013ef4:	464b      	mov	r3, r9
 8013ef6:	4641      	mov	r1, r8
 8013ef8:	4610      	mov	r0, r2
 8013efa:	9600      	str	r6, [sp, #0]
 8013efc:	f007 fc10 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 8013f00:	f105 0211 	add.w	r2, r5, #17
 8013f04:	b292      	uxth	r2, r2
 8013f06:	f104 0319 	add.w	r3, r4, #25
 8013f0a:	4641      	mov	r1, r8
 8013f0c:	4610      	mov	r0, r2
 8013f0e:	9600      	str	r6, [sp, #0]
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	f007 fc05 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 8013f16:	f105 0212 	add.w	r2, r5, #18
 8013f1a:	b292      	uxth	r2, r2
 8013f1c:	f104 0318 	add.w	r3, r4, #24
 8013f20:	f104 010d 	add.w	r1, r4, #13
 8013f24:	4610      	mov	r0, r2
 8013f26:	9600      	str	r6, [sp, #0]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	b289      	uxth	r1, r1
 8013f2c:	f007 fbf8 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 8013f30:	f104 080e 	add.w	r8, r4, #14
 8013f34:	f105 0213 	add.w	r2, r5, #19
 8013f38:	f104 0917 	add.w	r9, r4, #23
 8013f3c:	b292      	uxth	r2, r2
 8013f3e:	fa1f f888 	uxth.w	r8, r8
 8013f42:	fa1f f989 	uxth.w	r9, r9
 8013f46:	464b      	mov	r3, r9
 8013f48:	4641      	mov	r1, r8
 8013f4a:	4610      	mov	r0, r2
 8013f4c:	9600      	str	r6, [sp, #0]
 8013f4e:	f007 fbe7 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 8013f52:	f105 0214 	add.w	r2, r5, #20
 8013f56:	b292      	uxth	r2, r2
 8013f58:	464b      	mov	r3, r9
 8013f5a:	4641      	mov	r1, r8
 8013f5c:	4610      	mov	r0, r2
 8013f5e:	9600      	str	r6, [sp, #0]
 8013f60:	f007 fbde 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 8013f64:	f104 080f 	add.w	r8, r4, #15
 8013f68:	f105 0215 	add.w	r2, r5, #21
 8013f6c:	f104 0916 	add.w	r9, r4, #22
 8013f70:	b292      	uxth	r2, r2
 8013f72:	fa1f f888 	uxth.w	r8, r8
 8013f76:	fa1f f989 	uxth.w	r9, r9
 8013f7a:	464b      	mov	r3, r9
 8013f7c:	4641      	mov	r1, r8
 8013f7e:	4610      	mov	r0, r2
 8013f80:	9600      	str	r6, [sp, #0]
 8013f82:	f007 fbcd 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 8013f86:	f105 0216 	add.w	r2, r5, #22
 8013f8a:	b292      	uxth	r2, r2
 8013f8c:	464b      	mov	r3, r9
 8013f8e:	4641      	mov	r1, r8
 8013f90:	4610      	mov	r0, r2
 8013f92:	9600      	str	r6, [sp, #0]
 8013f94:	f007 fbc4 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 8013f98:	f104 0810 	add.w	r8, r4, #16
 8013f9c:	f105 0217 	add.w	r2, r5, #23
 8013fa0:	b292      	uxth	r2, r2
 8013fa2:	fa1f f888 	uxth.w	r8, r8
 8013fa6:	f104 0315 	add.w	r3, r4, #21
 8013faa:	4641      	mov	r1, r8
 8013fac:	4610      	mov	r0, r2
 8013fae:	9600      	str	r6, [sp, #0]
 8013fb0:	b29b      	uxth	r3, r3
 8013fb2:	f007 fbb5 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 8013fb6:	f104 0914 	add.w	r9, r4, #20
 8013fba:	f105 0218 	add.w	r2, r5, #24
 8013fbe:	b292      	uxth	r2, r2
 8013fc0:	fa1f f989 	uxth.w	r9, r9
 8013fc4:	464b      	mov	r3, r9
 8013fc6:	4641      	mov	r1, r8
 8013fc8:	4610      	mov	r0, r2
 8013fca:	9600      	str	r6, [sp, #0]
 8013fcc:	f007 fba8 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8013fd0:	f104 0811 	add.w	r8, r4, #17
 8013fd4:	f105 0219 	add.w	r2, r5, #25
 8013fd8:	b292      	uxth	r2, r2
 8013fda:	fa1f f888 	uxth.w	r8, r8
 8013fde:	464b      	mov	r3, r9
 8013fe0:	4641      	mov	r1, r8
 8013fe2:	4610      	mov	r0, r2
 8013fe4:	9600      	str	r6, [sp, #0]
 8013fe6:	f007 fb9b 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 8013fea:	3413      	adds	r4, #19
 8013fec:	f105 021a 	add.w	r2, r5, #26
 8013ff0:	b292      	uxth	r2, r2
 8013ff2:	b2a4      	uxth	r4, r4
 8013ff4:	4623      	mov	r3, r4
 8013ff6:	4641      	mov	r1, r8
 8013ff8:	4610      	mov	r0, r2
 8013ffa:	9600      	str	r6, [sp, #0]
 8013ffc:	f007 fb90 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 8014000:	f105 021b 	add.w	r2, r5, #27
 8014004:	b292      	uxth	r2, r2
 8014006:	9600      	str	r6, [sp, #0]
 8014008:	4623      	mov	r3, r4
 801400a:	4639      	mov	r1, r7
 801400c:	4610      	mov	r0, r2
 801400e:	f007 fb87 	bl	801b720 <TFT_DrawLine>
//	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
//	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
//	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
//	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
//	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
}
 8014012:	b003      	add	sp, #12
 8014014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8014018:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	e6f1      	b.n	8013e04 <GUI_Button_Measure_deltaE_Small+0x24>

08014020 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 8014020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8014024:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 8014028:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 801402a:	f241 3876 	movw	r8, #4982	; 0x1376
 801402e:	f100 0223 	add.w	r2, r0, #35	; 0x23
 8014032:	f8cd 8000 	str.w	r8, [sp]
 8014036:	b29b      	uxth	r3, r3
 8014038:	b292      	uxth	r2, r2
{
 801403a:	4604      	mov	r4, r0
 801403c:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 801403e:	f007 fbe4 	bl	801b80a <TFT_DrawRectangle>
	if(Check)
 8014042:	b1fe      	cbz	r6, 8014084 <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 8014044:	f104 0610 	add.w	r6, r4, #16
 8014048:	f105 071a 	add.w	r7, r5, #26
 801404c:	b2b6      	uxth	r6, r6
 801404e:	b2bf      	uxth	r7, r7
 8014050:	f105 0111 	add.w	r1, r5, #17
 8014054:	f104 0008 	add.w	r0, r4, #8
 8014058:	463b      	mov	r3, r7
 801405a:	4632      	mov	r2, r6
 801405c:	b289      	uxth	r1, r1
 801405e:	b280      	uxth	r0, r0
 8014060:	f8cd 8000 	str.w	r8, [sp]
 8014064:	f007 fb5c 	bl	801b720 <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 8014068:	1d6b      	adds	r3, r5, #5
 801406a:	f104 021d 	add.w	r2, r4, #29
 801406e:	f8cd 8000 	str.w	r8, [sp]
 8014072:	b29b      	uxth	r3, r3
 8014074:	b292      	uxth	r2, r2
 8014076:	4639      	mov	r1, r7
 8014078:	4630      	mov	r0, r6
 801407a:	f007 fb51 	bl	801b720 <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 801407e:	b002      	add	sp, #8
 8014080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 8014084:	f105 0320 	add.w	r3, r5, #32
 8014088:	f104 0220 	add.w	r2, r4, #32
 801408c:	1ca9      	adds	r1, r5, #2
 801408e:	1ca0      	adds	r0, r4, #2
 8014090:	2463      	movs	r4, #99	; 0x63
 8014092:	9400      	str	r4, [sp, #0]
 8014094:	b29b      	uxth	r3, r3
 8014096:	b292      	uxth	r2, r2
 8014098:	b289      	uxth	r1, r1
 801409a:	b280      	uxth	r0, r0
 801409c:	f007 fb9d 	bl	801b7da <TFT_FillRectangle>
}
 80140a0:	e7ed      	b.n	801407e <GUI_CheckBox+0x5e>

080140a2 <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 80140a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a6:	f100 0411 	add.w	r4, r0, #17
 80140aa:	f101 0511 	add.w	r5, r1, #17
 80140ae:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80140b0:	b226      	sxth	r6, r4
 80140b2:	b22f      	sxth	r7, r5
	if(Active){
 80140b4:	b173      	cbz	r3, 80140d4 <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80140b6:	f241 3376 	movw	r3, #4982	; 0x1376
 80140ba:	220f      	movs	r2, #15
 80140bc:	4639      	mov	r1, r7
 80140be:	4630      	mov	r0, r6
 80140c0:	f007 fa8e 	bl	801b5e0 <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 80140c4:	f1b8 0f00 	cmp.w	r8, #0
 80140c8:	d111      	bne.n	80140ee <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 80140ca:	2363      	movs	r3, #99	; 0x63
 80140cc:	220a      	movs	r2, #10
 80140ce:	b229      	sxth	r1, r5
 80140d0:	b220      	sxth	r0, r4
 80140d2:	e011      	b.n	80140f8 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 80140d4:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 80140d8:	220f      	movs	r2, #15
 80140da:	4639      	mov	r1, r7
 80140dc:	4630      	mov	r0, r6
 80140de:	f007 fa7f 	bl	801b5e0 <TFT_DrawCircle>
	if(Check)
 80140e2:	f1b8 0f00 	cmp.w	r8, #0
 80140e6:	d0f0      	beq.n	80140ca <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 80140e8:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 80140ec:	e001      	b.n	80140f2 <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 80140ee:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 80140f2:	220a      	movs	r2, #10
 80140f4:	4639      	mov	r1, r7
 80140f6:	4630      	mov	r0, r6
		}
}
 80140f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 80140fc:	f007 bba9 	b.w	801b852 <TFT_DrawFilledCircle>

08014100 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 8014100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8014104:	f101 031c 	add.w	r3, r1, #28
 8014108:	2663      	movs	r6, #99	; 0x63
{
 801410a:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 801410c:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 8014110:	460d      	mov	r5, r1
 8014112:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8014114:	9600      	str	r6, [sp, #0]
 8014116:	b29b      	uxth	r3, r3
 8014118:	b292      	uxth	r2, r2
 801411a:	f007 fb5e 	bl	801b7da <TFT_FillRectangle>
 801411e:	f105 0611 	add.w	r6, r5, #17
 8014122:	f105 0318 	add.w	r3, r5, #24
 8014126:	f105 010a 	add.w	r1, r5, #10
 801412a:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801412e:	4d1f      	ldr	r5, [pc, #124]	; (80141ac <GUI_Switch_Button+0xac>)
	if(Check)
 8014130:	b1ef      	cbz	r7, 801416e <GUI_Switch_Button+0x6e>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8014132:	f242 409b 	movw	r0, #9371	; 0x249b
 8014136:	270a      	movs	r7, #10
 8014138:	9001      	str	r0, [sp, #4]
 801413a:	b29b      	uxth	r3, r3
 801413c:	b292      	uxth	r2, r2
 801413e:	b289      	uxth	r1, r1
 8014140:	4620      	mov	r0, r4
 8014142:	9700      	str	r7, [sp, #0]
 8014144:	f007 fcce 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8014148:	f104 0019 	add.w	r0, r4, #25
 801414c:	f241 3376 	movw	r3, #4982	; 0x1376
 8014150:	463a      	mov	r2, r7
 8014152:	b231      	sxth	r1, r6
 8014154:	b200      	sxth	r0, r0
 8014156:	f007 fb7c 	bl	801b852 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 801415a:	782b      	ldrb	r3, [r5, #0]
 801415c:	b923      	cbnz	r3, 8014168 <GUI_Switch_Button+0x68>
				HAL_UART_MspInit(&hlpuart1); //Enable Bluetooth
 801415e:	4814      	ldr	r0, [pc, #80]	; (80141b0 <GUI_Switch_Button+0xb0>)
 8014160:	f00a fb0e 	bl	801e780 <HAL_UART_MspInit>
				BluetoothStat = 0x01;
 8014164:	2301      	movs	r3, #1
 8014166:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 8014168:	b002      	add	sp, #8
 801416a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 801416e:	f04f 080a 	mov.w	r8, #10
 8014172:	f24c 6018 	movw	r0, #50712	; 0xc618
 8014176:	9001      	str	r0, [sp, #4]
 8014178:	b29b      	uxth	r3, r3
 801417a:	b292      	uxth	r2, r2
 801417c:	b289      	uxth	r1, r1
 801417e:	4620      	mov	r0, r4
 8014180:	f8cd 8000 	str.w	r8, [sp]
 8014184:	f007 fcae 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8014188:	eb04 0008 	add.w	r0, r4, r8
 801418c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014190:	4642      	mov	r2, r8
 8014192:	b231      	sxth	r1, r6
 8014194:	b200      	sxth	r0, r0
 8014196:	f007 fb5c 	bl	801b852 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 801419a:	782b      	ldrb	r3, [r5, #0]
 801419c:	2b01      	cmp	r3, #1
 801419e:	d1e3      	bne.n	8014168 <GUI_Switch_Button+0x68>
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
 80141a0:	4803      	ldr	r0, [pc, #12]	; (80141b0 <GUI_Switch_Button+0xb0>)
 80141a2:	f00a fb19 	bl	801e7d8 <HAL_UART_MspDeInit>
				BluetoothStat = 0x00;
 80141a6:	702f      	strb	r7, [r5, #0]
}
 80141a8:	e7de      	b.n	8014168 <GUI_Switch_Button+0x68>
 80141aa:	bf00      	nop
 80141ac:	20004fe0 	.word	0x20004fe0
 80141b0:	2008fda8 	.word	0x2008fda8

080141b4 <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 80141b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80141b6:	f101 031c 	add.w	r3, r1, #28
{
 80141ba:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80141bc:	2763      	movs	r7, #99	; 0x63
 80141be:	f100 0224 	add.w	r2, r0, #36	; 0x24
 80141c2:	b29b      	uxth	r3, r3
 80141c4:	b292      	uxth	r2, r2
 80141c6:	9700      	str	r7, [sp, #0]
{
 80141c8:	460d      	mov	r5, r1
 80141ca:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80141cc:	f007 fb05 	bl	801b7da <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 80141d0:	f242 409b 	movw	r0, #9371	; 0x249b
 80141d4:	f105 0318 	add.w	r3, r5, #24
 80141d8:	f105 010a 	add.w	r1, r5, #10
 80141dc:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80141e0:	3511      	adds	r5, #17
 80141e2:	9001      	str	r0, [sp, #4]
	if(Check)
 80141e4:	b19e      	cbz	r6, 801420e <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 80141e6:	260a      	movs	r6, #10
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	4620      	mov	r0, r4
 80141ec:	9600      	str	r6, [sp, #0]
 80141ee:	b292      	uxth	r2, r2
 80141f0:	b289      	uxth	r1, r1
 80141f2:	f007 fc77 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 80141f6:	f104 0019 	add.w	r0, r4, #25
 80141fa:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80141fe:	4632      	mov	r2, r6
 8014200:	b229      	sxth	r1, r5
 8014202:	b200      	sxth	r0, r0
		}
}
 8014204:	b003      	add	sp, #12
 8014206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801420a:	f007 bb22 	b.w	801b852 <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 801420e:	260a      	movs	r6, #10
 8014210:	b29b      	uxth	r3, r3
 8014212:	4620      	mov	r0, r4
 8014214:	9600      	str	r6, [sp, #0]
 8014216:	b292      	uxth	r2, r2
 8014218:	b289      	uxth	r1, r1
 801421a:	f007 fc63 	bl	801bae4 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801421e:	19a0      	adds	r0, r4, r6
 8014220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014224:	e7eb      	b.n	80141fe <GUI_Switch_ButtonActive+0x4a>

08014226 <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 8014226:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 801422a:	f100 0423 	add.w	r4, r0, #35	; 0x23
 801422e:	1dcf      	adds	r7, r1, #7
{
 8014230:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8014232:	b2a4      	uxth	r4, r4
 8014234:	b2bf      	uxth	r7, r7
 8014236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801423a:	9300      	str	r3, [sp, #0]
 801423c:	4622      	mov	r2, r4
 801423e:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8014240:	f105 060e 	add.w	r6, r5, #14
{
 8014244:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8014246:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8014248:	f007 fac7 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 801424c:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	4622      	mov	r2, r4
 8014254:	4633      	mov	r3, r6
 8014256:	4639      	mov	r1, r7
 8014258:	4640      	mov	r0, r8
 801425a:	f007 fabe 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 801425e:	f105 0315 	add.w	r3, r5, #21
 8014262:	f64c 1243 	movw	r2, #51523	; 0xc943
 8014266:	9200      	str	r2, [sp, #0]
 8014268:	b29b      	uxth	r3, r3
 801426a:	4622      	mov	r2, r4
 801426c:	4631      	mov	r1, r6
 801426e:	4640      	mov	r0, r8
 8014270:	f007 fab3 	bl	801b7da <TFT_FillRectangle>
}
 8014274:	b002      	add	sp, #8
 8014276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801427a <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 801427a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 801427e:	f100 030f 	add.w	r3, r0, #15
{
 8014282:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8014284:	b29b      	uxth	r3, r3
 8014286:	270f      	movs	r7, #15
 8014288:	9302      	str	r3, [sp, #8]
 801428a:	f101 0309 	add.w	r3, r1, #9
{
 801428e:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8014290:	b29b      	uxth	r3, r3
 8014292:	9700      	str	r7, [sp, #0]
 8014294:	9a02      	ldr	r2, [sp, #8]
 8014296:	9303      	str	r3, [sp, #12]
{
 8014298:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 801429a:	f007 fa9e 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 801429e:	f104 0314 	add.w	r3, r4, #20
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	f104 0822 	add.w	r8, r4, #34	; 0x22
 80142a8:	fa1f f888 	uxth.w	r8, r8
 80142ac:	9304      	str	r3, [sp, #16]
 80142ae:	9700      	str	r7, [sp, #0]
 80142b0:	9b03      	ldr	r3, [sp, #12]
 80142b2:	9804      	ldr	r0, [sp, #16]
 80142b4:	4642      	mov	r2, r8
 80142b6:	4629      	mov	r1, r5
 80142b8:	f007 fa8f 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 80142bc:	f105 030e 	add.w	r3, r5, #14
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	f105 0615 	add.w	r6, r5, #21
 80142c6:	b2b6      	uxth	r6, r6
 80142c8:	9305      	str	r3, [sp, #20]
 80142ca:	9700      	str	r7, [sp, #0]
 80142cc:	4633      	mov	r3, r6
 80142ce:	9a02      	ldr	r2, [sp, #8]
 80142d0:	9905      	ldr	r1, [sp, #20]
 80142d2:	4620      	mov	r0, r4
 80142d4:	f007 fa81 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 80142d8:	9700      	str	r7, [sp, #0]
 80142da:	4633      	mov	r3, r6
 80142dc:	4642      	mov	r2, r8
 80142de:	9905      	ldr	r1, [sp, #20]
 80142e0:	9804      	ldr	r0, [sp, #16]
 80142e2:	f007 fa7a 	bl	801b7da <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 80142e6:	1cab      	adds	r3, r5, #2
 80142e8:	b29b      	uxth	r3, r3
 80142ea:	f104 091d 	add.w	r9, r4, #29
 80142ee:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80142f2:	9307      	str	r3, [sp, #28]
 80142f4:	fa1f f989 	uxth.w	r9, r9
 80142f8:	9700      	str	r7, [sp, #0]
 80142fa:	4633      	mov	r3, r6
 80142fc:	464a      	mov	r2, r9
 80142fe:	9907      	ldr	r1, [sp, #28]
 8014300:	4620      	mov	r0, r4
 8014302:	f007 fa0d 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 8014306:	1c6b      	adds	r3, r5, #1
 8014308:	b29b      	uxth	r3, r3
 801430a:	9308      	str	r3, [sp, #32]
 801430c:	9700      	str	r7, [sp, #0]
 801430e:	4633      	mov	r3, r6
 8014310:	464a      	mov	r2, r9
 8014312:	9908      	ldr	r1, [sp, #32]
 8014314:	4620      	mov	r0, r4
 8014316:	f007 fa03 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 801431a:	f104 021e 	add.w	r2, r4, #30
 801431e:	9700      	str	r7, [sp, #0]
 8014320:	4633      	mov	r3, r6
 8014322:	4629      	mov	r1, r5
 8014324:	4620      	mov	r0, r4
 8014326:	b292      	uxth	r2, r2
 8014328:	f007 f9fa 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 801432c:	1c63      	adds	r3, r4, #1
 801432e:	b29b      	uxth	r3, r3
 8014330:	f104 0a1f 	add.w	sl, r4, #31
 8014334:	9309      	str	r3, [sp, #36]	; 0x24
 8014336:	fa1f fa8a 	uxth.w	sl, sl
 801433a:	9700      	str	r7, [sp, #0]
 801433c:	4633      	mov	r3, r6
 801433e:	4652      	mov	r2, sl
 8014340:	4629      	mov	r1, r5
 8014342:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014344:	f007 f9ec 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8014348:	1ca3      	adds	r3, r4, #2
 801434a:	b29b      	uxth	r3, r3
 801434c:	930a      	str	r3, [sp, #40]	; 0x28
 801434e:	9700      	str	r7, [sp, #0]
 8014350:	4633      	mov	r3, r6
 8014352:	4652      	mov	r2, sl
 8014354:	4629      	mov	r1, r5
 8014356:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014358:	f007 f9e2 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 801435c:	1ce3      	adds	r3, r4, #3
 801435e:	b29b      	uxth	r3, r3
 8014360:	f104 0920 	add.w	r9, r4, #32
 8014364:	930b      	str	r3, [sp, #44]	; 0x2c
 8014366:	fa1f f989 	uxth.w	r9, r9
 801436a:	9700      	str	r7, [sp, #0]
 801436c:	4633      	mov	r3, r6
 801436e:	464a      	mov	r2, r9
 8014370:	4629      	mov	r1, r5
 8014372:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014374:	f007 f9d4 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 8014378:	1d23      	adds	r3, r4, #4
 801437a:	b29b      	uxth	r3, r3
 801437c:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 8014380:	9306      	str	r3, [sp, #24]
 8014382:	fa1f fb8b 	uxth.w	fp, fp
 8014386:	9700      	str	r7, [sp, #0]
 8014388:	4633      	mov	r3, r6
 801438a:	465a      	mov	r2, fp
 801438c:	4629      	mov	r1, r5
 801438e:	9806      	ldr	r0, [sp, #24]
 8014390:	f007 f9c6 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 8014394:	9700      	str	r7, [sp, #0]
 8014396:	4633      	mov	r3, r6
 8014398:	4642      	mov	r2, r8
 801439a:	4629      	mov	r1, r5
 801439c:	9806      	ldr	r0, [sp, #24]
 801439e:	f007 f9bf 	bl	801b720 <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 80143a2:	9700      	str	r7, [sp, #0]
 80143a4:	462b      	mov	r3, r5
 80143a6:	4652      	mov	r2, sl
 80143a8:	4631      	mov	r1, r6
 80143aa:	4620      	mov	r0, r4
 80143ac:	f007 f9b8 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 80143b0:	9700      	str	r7, [sp, #0]
 80143b2:	462b      	mov	r3, r5
 80143b4:	464a      	mov	r2, r9
 80143b6:	4631      	mov	r1, r6
 80143b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143ba:	f007 f9b1 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 80143be:	9700      	str	r7, [sp, #0]
 80143c0:	462b      	mov	r3, r5
 80143c2:	464a      	mov	r2, r9
 80143c4:	4631      	mov	r1, r6
 80143c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143c8:	f007 f9aa 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 80143cc:	9700      	str	r7, [sp, #0]
 80143ce:	462b      	mov	r3, r5
 80143d0:	465a      	mov	r2, fp
 80143d2:	4631      	mov	r1, r6
 80143d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80143d6:	f007 f9a3 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 80143da:	9700      	str	r7, [sp, #0]
 80143dc:	462b      	mov	r3, r5
 80143de:	4642      	mov	r2, r8
 80143e0:	4631      	mov	r1, r6
 80143e2:	9806      	ldr	r0, [sp, #24]
 80143e4:	f007 f99c 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 80143e8:	1d60      	adds	r0, r4, #5
 80143ea:	9700      	str	r7, [sp, #0]
 80143ec:	9b08      	ldr	r3, [sp, #32]
 80143ee:	4642      	mov	r2, r8
 80143f0:	4631      	mov	r1, r6
 80143f2:	b280      	uxth	r0, r0
 80143f4:	f007 f994 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 80143f8:	1da0      	adds	r0, r4, #6
 80143fa:	9700      	str	r7, [sp, #0]
 80143fc:	9b07      	ldr	r3, [sp, #28]
 80143fe:	4642      	mov	r2, r8
 8014400:	4631      	mov	r1, r6
 8014402:	b280      	uxth	r0, r0
 8014404:	f007 f98c 	bl	801b720 <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 8014408:	9700      	str	r7, [sp, #0]
 801440a:	9b05      	ldr	r3, [sp, #20]
 801440c:	9903      	ldr	r1, [sp, #12]
 801440e:	4642      	mov	r2, r8
 8014410:	4620      	mov	r0, r4
 8014412:	f007 f9e2 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 8014416:	9700      	str	r7, [sp, #0]
 8014418:	4633      	mov	r3, r6
 801441a:	9a04      	ldr	r2, [sp, #16]
 801441c:	9802      	ldr	r0, [sp, #8]
 801441e:	4629      	mov	r1, r5
 8014420:	f007 f9db 	bl	801b7da <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 8014424:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 8014428:	f104 0213 	add.w	r2, r4, #19
 801442c:	f104 0010 	add.w	r0, r4, #16
 8014430:	4633      	mov	r3, r6
 8014432:	4629      	mov	r1, r5
 8014434:	9700      	str	r7, [sp, #0]
 8014436:	b292      	uxth	r2, r2
 8014438:	b280      	uxth	r0, r0
 801443a:	f007 f9ce 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 801443e:	f105 030d 	add.w	r3, r5, #13
 8014442:	f105 010a 	add.w	r1, r5, #10
 8014446:	9700      	str	r7, [sp, #0]
 8014448:	b29b      	uxth	r3, r3
 801444a:	4642      	mov	r2, r8
 801444c:	b289      	uxth	r1, r1
 801444e:	4620      	mov	r0, r4
 8014450:	f007 f9c3 	bl	801b7da <TFT_FillRectangle>
	
}
 8014454:	b00d      	add	sp, #52	; 0x34
 8014456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801445c <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"

extern uint8_t Language_status;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 801445c:	b570      	push	{r4, r5, r6, lr}
 801445e:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8014462:	f101 040a 	add.w	r4, r1, #10
{
 8014466:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8014468:	b2a4      	uxth	r4, r4
 801446a:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 801446e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8014472:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8014474:	9300      	str	r3, [sp, #0]
 8014476:	b292      	uxth	r2, r2
 8014478:	4623      	mov	r3, r4
{
 801447a:	eeb0 8a40 	vmov.f32	s16, s0
 801447e:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8014480:	f007 f9ab 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 8014484:	ee07 5a90 	vmov	s15, r5
 8014488:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80144b8 <GUI_Bar_Measure+0x5c>
 801448c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014490:	f241 3376 	movw	r3, #4982	; 0x1376
 8014494:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	4631      	mov	r1, r6
 801449c:	4623      	mov	r3, r4
 801449e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144a2:	4628      	mov	r0, r5
 80144a4:	edcd 7a03 	vstr	s15, [sp, #12]
 80144a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80144ac:	f007 f995 	bl	801b7da <TFT_FillRectangle>
}
 80144b0:	b004      	add	sp, #16
 80144b2:	ecbd 8b02 	vpop	{d8}
 80144b6:	bd70      	pop	{r4, r5, r6, pc}
 80144b8:	42dc0000 	.word	0x42dc0000

080144bc <GUI_Text_E_Measure>:
}

uint8_t old_meas_type_E = 2, old_num_e = 10, old_num_n = 10, old_deg = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10;
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light)
{
 80144bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144c0:	ed2d 8b02 	vpush	{d8}
 80144c4:	b086      	sub	sp, #24
	char buffer[9] = {0};
 80144c6:	2300      	movs	r3, #0
{
 80144c8:	4605      	mov	r5, r0
	uint8_t	delta_pos = 122, deg = 0, number = 0, meas_type=0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80144ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80144ce:	460c      	mov	r4, r1
 80144d0:	eeb0 8a40 	vmov.f32	s16, s0
 80144d4:	4692      	mov	sl, r2
	char buffer[9] = {0};
 80144d6:	9303      	str	r3, [sp, #12]
 80144d8:	9304      	str	r3, [sp, #16]
 80144da:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80144de:	f007 fbab 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80144e2:	2063      	movs	r0, #99	; 0x63
 80144e4:	f007 fbae 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80144e8:	48a2      	ldr	r0, [pc, #648]	; (8014774 <GUI_Text_E_Measure+0x2b8>)
 80144ea:	f007 fb9f 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 80144ee:	1ca1      	adds	r1, r4, #2
 80144f0:	4628      	mov	r0, r5
 80144f2:	2224      	movs	r2, #36	; 0x24
 80144f4:	b289      	uxth	r1, r1
 80144f6:	f007 fc63 	bl	801bdc0 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 80144fa:	489f      	ldr	r0, [pc, #636]	; (8014778 <GUI_Text_E_Measure+0x2bc>)
	if(energy_light) {
 80144fc:	f1ba 0f00 	cmp.w	sl, #0
 8014500:	f000 80bb 	beq.w	801467a <GUI_Text_E_Measure+0x1be>
	TFT_SetFont(&Font16EN_arch_small);
 8014504:	f007 fb92 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8014508:	f104 010e 	add.w	r1, r4, #14
 801450c:	f105 0014 	add.w	r0, r5, #20
 8014510:	2265      	movs	r2, #101	; 0x65
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8014512:	b289      	uxth	r1, r1
 8014514:	b280      	uxth	r0, r0
 8014516:	f007 fc53 	bl	801bdc0 <TFT_DrawChar>
	}
	
	if((Value/1000.0) >= 1.0)
 801451a:	ee18 0a10 	vmov	r0, s16
 801451e:	f7ec f823 	bl	8000568 <__aeabi_f2d>
 8014522:	2200      	movs	r2, #0
 8014524:	4b95      	ldr	r3, [pc, #596]	; (801477c <GUI_Text_E_Measure+0x2c0>)
 8014526:	f7ec f99d 	bl	8000864 <__aeabi_ddiv>
 801452a:	2200      	movs	r2, #0
 801452c:	4b94      	ldr	r3, [pc, #592]	; (8014780 <GUI_Text_E_Measure+0x2c4>)
 801452e:	f7ec faf5 	bl	8000b1c <__aeabi_dcmpge>
 8014532:	2800      	cmp	r0, #0
 8014534:	f000 80a9 	beq.w	801468a <GUI_Text_E_Measure+0x1ce>
	{
		Value = Value/(1000.0);
 8014538:	eddf 7a92 	vldr	s15, [pc, #584]	; 8014784 <GUI_Text_E_Measure+0x2c8>
 801453c:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8014540:	2601      	movs	r6, #1
		meas_type = 1;
	}else {meas_type = 0;}
	
	TFT_SetTextColor(TFT_White);
 8014542:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014546:	f007 fb77 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801454a:	2063      	movs	r0, #99	; 0x63
 801454c:	f007 fb7a 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014550:	488d      	ldr	r0, [pc, #564]	; (8014788 <GUI_Text_E_Measure+0x2cc>)
 8014552:	f007 fb6b 	bl	801bc2c <TFT_SetFont>
	
	if(energy_light){
		sprintf (buffer, "%.1f", Value);}
	else{
		sprintf (buffer, "%.1f", Value);
 8014556:	ee18 0a10 	vmov	r0, s16
 801455a:	f7ec f805 	bl	8000568 <__aeabi_f2d>
 801455e:	4602      	mov	r2, r0
 8014560:	460b      	mov	r3, r1
 8014562:	a803      	add	r0, sp, #12
 8014564:	4989      	ldr	r1, [pc, #548]	; (801478c <GUI_Text_E_Measure+0x2d0>)
 8014566:	f00a fd4b 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 801456a:	220a      	movs	r2, #10
		sprintf (buffer, "%.1f", Value);
 801456c:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, deg = 0, number = 0, meas_type=0; 
 801456e:	2700      	movs	r7, #0
 8014570:	f04f 087a 	mov.w	r8, #122	; 0x7a
	}
	
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8014574:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 8014578:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 801457a:	ee07 2a10 	vmov	s14, r2
 801457e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8014582:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8014586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458e:	db06      	blt.n	801459e <GUI_Text_E_Measure+0xe2>
			delta_pos-=23;
 8014590:	f1a8 0817 	sub.w	r8, r8, #23
			number++;
 8014594:	3701      	adds	r7, #1
			dec *= 10;
 8014596:	434a      	muls	r2, r1
			delta_pos-=23;
 8014598:	fa5f f888 	uxtb.w	r8, r8
			number++;
 801459c:	b2ff      	uxtb	r7, r7
 801459e:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80145a0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80145a4:	d1e9      	bne.n	801457a <GUI_Text_E_Measure+0xbe>
		}
	}
	
	if(energy_light && number < old_num_e )
 80145a6:	f1ba 0f00 	cmp.w	sl, #0
 80145aa:	d070      	beq.n	801468e <GUI_Text_E_Measure+0x1d2>
 80145ac:	4b78      	ldr	r3, [pc, #480]	; (8014790 <GUI_Text_E_Measure+0x2d4>)
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
		old_meas_type_E = !old_meas_type_E;
	} 
	else if(!energy_light && number < old_num_n)
 80145ae:	781a      	ldrb	r2, [r3, #0]
 80145b0:	42ba      	cmp	r2, r7
 80145b2:	4699      	mov	r9, r3
 80145b4:	d913      	bls.n	80145de <GUI_Text_E_Measure+0x122>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80145b6:	2163      	movs	r1, #99	; 0x63
 80145b8:	f104 031a 	add.w	r3, r4, #26
 80145bc:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80145c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80145c4:	9100      	str	r1, [sp, #0]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	b292      	uxth	r2, r2
 80145ca:	4621      	mov	r1, r4
 80145cc:	b280      	uxth	r0, r0
 80145ce:	f007 f904 	bl	801b7da <TFT_FillRectangle>
		old_meas_type_E = !old_meas_type_E;
 80145d2:	4a70      	ldr	r2, [pc, #448]	; (8014794 <GUI_Text_E_Measure+0x2d8>)
 80145d4:	7813      	ldrb	r3, [r2, #0]
 80145d6:	fab3 f383 	clz	r3, r3
 80145da:	095b      	lsrs	r3, r3, #5
 80145dc:	7013      	strb	r3, [r2, #0]
		old_num_e = number;}
	else{
		old_num_n = number;
	}
	
	buffer[8] = 0;
 80145de:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80145e0:	eb05 0008 	add.w	r0, r5, r8
		old_num_n = number;
 80145e4:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80145e8:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80145ea:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80145ee:	4621      	mov	r1, r4
 80145f0:	2303      	movs	r3, #3
 80145f2:	b280      	uxth	r0, r0
 80145f4:	f007 fc3c 	bl	801be70 <TFT_DisplayString>
	
	if (Language_status == Ru && !energy_light)
 80145f8:	4b67      	ldr	r3, [pc, #412]	; (8014798 <GUI_Text_E_Measure+0x2dc>)
 80145fa:	781f      	ldrb	r7, [r3, #0]
 80145fc:	2f00      	cmp	r7, #0
 80145fe:	d160      	bne.n	80146c2 <GUI_Text_E_Measure+0x206>
 8014600:	f1ba 0f00 	cmp.w	sl, #0
 8014604:	f040 80ab 	bne.w	801475e <GUI_Text_E_Measure+0x2a2>
 8014608:	f104 031a 	add.w	r3, r4, #26
 801460c:	1ce1      	adds	r1, r4, #3
 801460e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8014794 <GUI_Text_E_Measure+0x2d8>
 8014612:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8014616:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801461a:	3404      	adds	r4, #4
 801461c:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
	{
		if (deg){
 8014620:	2e00      	cmp	r6, #0
 8014622:	d036      	beq.n	8014692 <GUI_Text_E_Measure+0x1d6>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8014624:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014628:	f8cd e000 	str.w	lr, [sp]
 801462c:	b292      	uxth	r2, r2
 801462e:	b289      	uxth	r1, r1
 8014630:	b29b      	uxth	r3, r3
 8014632:	b280      	uxth	r0, r0
 8014634:	f007 f8d1 	bl	801b7da <TFT_FillRectangle>
			old_meas_type_E = 1;
			TFT_SetFont(&Font26RU_arch_small);
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8014638:	b2a4      	uxth	r4, r4
			old_meas_type_E = 1;
 801463a:	2301      	movs	r3, #1
			TFT_SetFont(&Font26RU_arch_small);
 801463c:	4857      	ldr	r0, [pc, #348]	; (801479c <GUI_Text_E_Measure+0x2e0>)
			old_meas_type_E = 1;
 801463e:	f888 3000 	strb.w	r3, [r8]
			TFT_SetFont(&Font26RU_arch_small);
 8014642:	f007 faf3 	bl	801bc2c <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8014646:	22ba      	movs	r2, #186	; 0xba
 8014648:	4621      	mov	r1, r4
 801464a:	b2b8      	uxth	r0, r7
 801464c:	f007 fb00 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 8014650:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
 8014654:	b280      	uxth	r0, r0
 8014656:	22bb      	movs	r2, #187	; 0xbb
 8014658:	4621      	mov	r1, r4
 801465a:	f007 faf9 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');
 801465e:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
		}else if(!deg ){
			old_meas_type_E = 0;
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
			TFT_SetFont(&Font26RU_arch_small);
			TFT_DrawCharRus(X+200, Y+4, 'л');
			TFT_DrawCharRus(X+215, Y+4, 'к');
 8014662:	22ba      	movs	r2, #186	; 0xba
 8014664:	4621      	mov	r1, r4
 8014666:	b280      	uxth	r0, r0
 8014668:	f007 faf2 	bl	801bc50 <TFT_DrawCharRus>
		GUI_TextRu_W_m2(244, Y);
	}else if (Language_status == En && energy_light)
	{
		GUI_TextEn_W_m2(244, Y);
	}
	old_deg = deg;
 801466c:	4b4c      	ldr	r3, [pc, #304]	; (80147a0 <GUI_Text_E_Measure+0x2e4>)
 801466e:	701e      	strb	r6, [r3, #0]

}
 8014670:	b006      	add	sp, #24
 8014672:	ecbd 8b02 	vpop	{d8}
 8014676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		TFT_SetFont(&Font16EN_arch_small);
 801467a:	f007 fad7 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 801467e:	f104 010d 	add.w	r1, r4, #13
 8014682:	f105 0017 	add.w	r0, r5, #23
 8014686:	227b      	movs	r2, #123	; 0x7b
 8014688:	e743      	b.n	8014512 <GUI_Text_E_Measure+0x56>
	uint8_t	delta_pos = 122, deg = 0, number = 0, meas_type=0; 
 801468a:	4606      	mov	r6, r0
 801468c:	e759      	b.n	8014542 <GUI_Text_E_Measure+0x86>
	else if(!energy_light && number < old_num_n)
 801468e:	4b45      	ldr	r3, [pc, #276]	; (80147a4 <GUI_Text_E_Measure+0x2e8>)
 8014690:	e78d      	b.n	80145ae <GUI_Text_E_Measure+0xf2>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8014692:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014696:	b29b      	uxth	r3, r3
 8014698:	b292      	uxth	r2, r2
 801469a:	b289      	uxth	r1, r1
			old_meas_type_E = 0;
 801469c:	f888 6000 	strb.w	r6, [r8]
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 80146a0:	b280      	uxth	r0, r0
 80146a2:	f8cd e000 	str.w	lr, [sp]
 80146a6:	f007 f898 	bl	801b7da <TFT_FillRectangle>
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80146aa:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font26RU_arch_small);
 80146ac:	483b      	ldr	r0, [pc, #236]	; (801479c <GUI_Text_E_Measure+0x2e0>)
 80146ae:	f007 fabd 	bl	801bc2c <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80146b2:	b2b8      	uxth	r0, r7
 80146b4:	22bb      	movs	r2, #187	; 0xbb
 80146b6:	4621      	mov	r1, r4
 80146b8:	f007 faca 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');
 80146bc:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
 80146c0:	e7cf      	b.n	8014662 <GUI_Text_E_Measure+0x1a6>
	} else if (Language_status == En && !energy_light)
 80146c2:	2f01      	cmp	r7, #1
 80146c4:	d1d2      	bne.n	801466c <GUI_Text_E_Measure+0x1b0>
 80146c6:	f1ba 0f00 	cmp.w	sl, #0
 80146ca:	d14d      	bne.n	8014768 <GUI_Text_E_Measure+0x2ac>
 80146cc:	f104 031a 	add.w	r3, r4, #26
 80146d0:	1ce1      	adds	r1, r4, #3
 80146d2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8014794 <GUI_Text_E_Measure+0x2d8>
 80146d6:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 80146da:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 80146de:	3404      	adds	r4, #4
		if (deg){
 80146e0:	b32e      	cbz	r6, 801472e <GUI_Text_E_Measure+0x272>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 80146e2:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80146e6:	f8cd e000 	str.w	lr, [sp]
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	b292      	uxth	r2, r2
 80146ee:	b289      	uxth	r1, r1
 80146f0:	b280      	uxth	r0, r0
 80146f2:	f007 f872 	bl	801b7da <TFT_FillRectangle>
			TFT_SetFont(&Font26EN_arch_small);
 80146f6:	482c      	ldr	r0, [pc, #176]	; (80147a8 <GUI_Text_E_Measure+0x2ec>)
			old_meas_type_E = 1;
 80146f8:	f888 7000 	strb.w	r7, [r8]
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 80146fc:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font26EN_arch_small);
 80146fe:	f007 fa95 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 8014702:	f105 00d6 	add.w	r0, r5, #214	; 0xd6
 8014706:	222b      	movs	r2, #43	; 0x2b
 8014708:	4621      	mov	r1, r4
 801470a:	b280      	uxth	r0, r0
 801470c:	f007 fb58 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 8014710:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014714:	b280      	uxth	r0, r0
 8014716:	222a      	movs	r2, #42	; 0x2a
 8014718:	4621      	mov	r1, r4
 801471a:	f007 fb51 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 801471e:	f105 00e2 	add.w	r0, r5, #226	; 0xe2
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 8014722:	2237      	movs	r2, #55	; 0x37
 8014724:	4621      	mov	r1, r4
 8014726:	b280      	uxth	r0, r0
 8014728:	f007 fb4a 	bl	801bdc0 <TFT_DrawChar>
 801472c:	e79e      	b.n	801466c <GUI_Text_E_Measure+0x1b0>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 801472e:	2763      	movs	r7, #99	; 0x63
 8014730:	b29b      	uxth	r3, r3
 8014732:	b292      	uxth	r2, r2
 8014734:	b289      	uxth	r1, r1
			old_meas_type_E = 0;
 8014736:	f888 6000 	strb.w	r6, [r8]
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 801473a:	b280      	uxth	r0, r0
 801473c:	9700      	str	r7, [sp, #0]
 801473e:	f007 f84c 	bl	801b7da <TFT_FillRectangle>
			TFT_SetFont(&Font26EN_arch_small);
 8014742:	4819      	ldr	r0, [pc, #100]	; (80147a8 <GUI_Text_E_Measure+0x2ec>)
 8014744:	f007 fa72 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8014748:	b2a4      	uxth	r4, r4
 801474a:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801474e:	b280      	uxth	r0, r0
 8014750:	222b      	movs	r2, #43	; 0x2b
 8014752:	4621      	mov	r1, r4
 8014754:	f007 fb34 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 8014758:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 801475c:	e7e1      	b.n	8014722 <GUI_Text_E_Measure+0x266>
		GUI_TextRu_W_m2(244, Y);
 801475e:	4621      	mov	r1, r4
 8014760:	20f4      	movs	r0, #244	; 0xf4
 8014762:	f004 f899 	bl	8018898 <GUI_TextRu_W_m2>
 8014766:	e781      	b.n	801466c <GUI_Text_E_Measure+0x1b0>
		GUI_TextEn_W_m2(244, Y);
 8014768:	4621      	mov	r1, r4
 801476a:	20f4      	movs	r0, #244	; 0xf4
 801476c:	f002 ffa4 	bl	80176b8 <GUI_TextEn_W_m2>
 8014770:	e77c      	b.n	801466c <GUI_Text_E_Measure+0x1b0>
 8014772:	bf00      	nop
 8014774:	200001e8 	.word	0x200001e8
 8014778:	200001c0 	.word	0x200001c0
 801477c:	408f4000 	.word	0x408f4000
 8014780:	3ff00000 	.word	0x3ff00000
 8014784:	447a0000 	.word	0x447a0000
 8014788:	200001f0 	.word	0x200001f0
 801478c:	0802e6ad 	.word	0x0802e6ad
 8014790:	2000024c 	.word	0x2000024c
 8014794:	20000237 	.word	0x20000237
 8014798:	20004ca3 	.word	0x20004ca3
 801479c:	20000208 	.word	0x20000208
 80147a0:	20000233 	.word	0x20000233
 80147a4:	2000024d 	.word	0x2000024d
 80147a8:	200001f8 	.word	0x200001f8

080147ac <GUI_Text_L_Measure>:


void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light)
{
 80147ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147b0:	ed2d 8b02 	vpush	{d8}
 80147b4:	b086      	sub	sp, #24
	char buffer[9] = {0};
 80147b6:	2300      	movs	r3, #0
{
 80147b8:	4604      	mov	r4, r0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80147ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80147be:	460d      	mov	r5, r1
 80147c0:	eeb0 8a40 	vmov.f32	s16, s0
 80147c4:	4691      	mov	r9, r2
	char buffer[9] = {0};
 80147c6:	9303      	str	r3, [sp, #12]
 80147c8:	9304      	str	r3, [sp, #16]
 80147ca:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80147ce:	f007 fa33 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80147d2:	2063      	movs	r0, #99	; 0x63
 80147d4:	f007 fa36 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80147d8:	4890      	ldr	r0, [pc, #576]	; (8014a1c <GUI_Text_L_Measure+0x270>)
 80147da:	f007 fa27 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 80147de:	1ca9      	adds	r1, r5, #2
 80147e0:	4620      	mov	r0, r4
 80147e2:	222b      	movs	r2, #43	; 0x2b
 80147e4:	b289      	uxth	r1, r1
 80147e6:	f007 faeb 	bl	801bdc0 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 80147ea:	488d      	ldr	r0, [pc, #564]	; (8014a20 <GUI_Text_L_Measure+0x274>)
	if(energy_light) {
 80147ec:	f1b9 0f00 	cmp.w	r9, #0
 80147f0:	f000 80a2 	beq.w	8014938 <GUI_Text_L_Measure+0x18c>
	TFT_SetFont(&Font16EN_arch_small);
 80147f4:	f007 fa1a 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 80147f8:	f105 010e 	add.w	r1, r5, #14
 80147fc:	f104 0014 	add.w	r0, r4, #20
 8014800:	2265      	movs	r2, #101	; 0x65
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8014802:	b289      	uxth	r1, r1
 8014804:	b280      	uxth	r0, r0
 8014806:	f007 fadb 	bl	801bdc0 <TFT_DrawChar>
	}
	
	if((Value/1000.0) >= 1.0)
 801480a:	ee18 0a10 	vmov	r0, s16
 801480e:	f7eb feab 	bl	8000568 <__aeabi_f2d>
 8014812:	2200      	movs	r2, #0
 8014814:	4b83      	ldr	r3, [pc, #524]	; (8014a24 <GUI_Text_L_Measure+0x278>)
 8014816:	f7ec f825 	bl	8000864 <__aeabi_ddiv>
 801481a:	2200      	movs	r2, #0
 801481c:	4b82      	ldr	r3, [pc, #520]	; (8014a28 <GUI_Text_L_Measure+0x27c>)
 801481e:	f7ec f97d 	bl	8000b1c <__aeabi_dcmpge>
 8014822:	2800      	cmp	r0, #0
 8014824:	f000 8090 	beq.w	8014948 <GUI_Text_L_Measure+0x19c>
	{
		Value = Value/(1000.0);
 8014828:	eddf 7a80 	vldr	s15, [pc, #512]	; 8014a2c <GUI_Text_L_Measure+0x280>
 801482c:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8014830:	2601      	movs	r6, #1
		meas_type = 1;
	}else {meas_type = 0;}
	
	TFT_SetTextColor(TFT_White);
 8014832:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014836:	f007 f9ff 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801483a:	2063      	movs	r0, #99	; 0x63
 801483c:	f007 fa02 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014840:	487b      	ldr	r0, [pc, #492]	; (8014a30 <GUI_Text_L_Measure+0x284>)
 8014842:	f007 f9f3 	bl	801bc2c <TFT_SetFont>
	
	if(energy_light){
		sprintf (buffer, "%.2f", Value);}
 8014846:	ee18 0a10 	vmov	r0, s16
	if(energy_light){
 801484a:	f1b9 0f00 	cmp.w	r9, #0
 801484e:	d07d      	beq.n	801494c <GUI_Text_L_Measure+0x1a0>
		sprintf (buffer, "%.2f", Value);}
 8014850:	f7eb fe8a 	bl	8000568 <__aeabi_f2d>
 8014854:	460b      	mov	r3, r1
 8014856:	4977      	ldr	r1, [pc, #476]	; (8014a34 <GUI_Text_L_Measure+0x288>)
 8014858:	4602      	mov	r2, r0
	else{
		sprintf (buffer, "%.1f", Value);
 801485a:	a803      	add	r0, sp, #12
 801485c:	f00a fbd0 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8014860:	220a      	movs	r2, #10
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8014862:	2304      	movs	r3, #4
 8014864:	2700      	movs	r7, #0
 8014866:	f04f 0875 	mov.w	r8, #117	; 0x75
	}

for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 801486a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 801486e:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8014870:	ee07 2a10 	vmov	s14, r2
 8014874:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8014878:	ee88 7a26 	vdiv.f32	s14, s16, s13
 801487c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014884:	db06      	blt.n	8014894 <GUI_Text_L_Measure+0xe8>
			delta_pos-=23;
 8014886:	f1a8 0817 	sub.w	r8, r8, #23
			number++;
 801488a:	3701      	adds	r7, #1
			dec *= 10;
 801488c:	434a      	muls	r2, r1
			delta_pos-=23;
 801488e:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8014892:	b2ff      	uxtb	r7, r7
 8014894:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 8014896:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801489a:	d1e9      	bne.n	8014870 <GUI_Text_L_Measure+0xc4>
		}
	}
	
	if(energy_light && number < old_numL_e )
 801489c:	f1b9 0f00 	cmp.w	r9, #0
 80148a0:	d05a      	beq.n	8014958 <GUI_Text_L_Measure+0x1ac>
 80148a2:	4b65      	ldr	r3, [pc, #404]	; (8014a38 <GUI_Text_L_Measure+0x28c>)
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_numL_n)
 80148a4:	781a      	ldrb	r2, [r3, #0]
 80148a6:	42ba      	cmp	r2, r7
 80148a8:	469a      	mov	sl, r3
 80148aa:	d90d      	bls.n	80148c8 <GUI_Text_L_Measure+0x11c>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80148ac:	2163      	movs	r1, #99	; 0x63
 80148ae:	f105 031a 	add.w	r3, r5, #26
 80148b2:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80148b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80148ba:	9100      	str	r1, [sp, #0]
 80148bc:	b29b      	uxth	r3, r3
 80148be:	b292      	uxth	r2, r2
 80148c0:	4629      	mov	r1, r5
 80148c2:	b280      	uxth	r0, r0
 80148c4:	f006 ff89 	bl	801b7da <TFT_FillRectangle>
		old_numL_e = number;}
	else{
		old_numL_n = number;
	}
	
	buffer[8] = 0;
 80148c8:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80148ca:	eb04 0008 	add.w	r0, r4, r8
		old_numL_n = number;
 80148ce:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80148d2:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80148d4:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80148d8:	4629      	mov	r1, r5
 80148da:	2303      	movs	r3, #3
 80148dc:	b280      	uxth	r0, r0
 80148de:	f007 fac7 	bl	801be70 <TFT_DisplayString>
	if (Language_status == Ru && !energy_light)
 80148e2:	4b56      	ldr	r3, [pc, #344]	; (8014a3c <GUI_Text_L_Measure+0x290>)
 80148e4:	f893 8000 	ldrb.w	r8, [r3]
 80148e8:	f1b8 0f00 	cmp.w	r8, #0
 80148ec:	d14b      	bne.n	8014986 <GUI_Text_L_Measure+0x1da>
 80148ee:	f1b9 0f00 	cmp.w	r9, #0
 80148f2:	f040 8084 	bne.w	80149fe <GUI_Text_L_Measure+0x252>
 80148f6:	4f52      	ldr	r7, [pc, #328]	; (8014a40 <GUI_Text_L_Measure+0x294>)
	{
		if (deg && old_meas_type_L != meas_type){
 80148f8:	783b      	ldrb	r3, [r7, #0]
 80148fa:	b37e      	cbz	r6, 801495c <GUI_Text_L_Measure+0x1b0>
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d016      	beq.n	801492e <GUI_Text_L_Measure+0x182>
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8014900:	f105 031a 	add.w	r3, r5, #26
 8014904:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8014908:	1ce9      	adds	r1, r5, #3
 801490a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 801490e:	2663      	movs	r6, #99	; 0x63
 8014910:	b292      	uxth	r2, r2
 8014912:	b280      	uxth	r0, r0
 8014914:	9600      	str	r6, [sp, #0]
 8014916:	b29b      	uxth	r3, r3
 8014918:	b289      	uxth	r1, r1
 801491a:	f006 ff5e 	bl	801b7da <TFT_FillRectangle>
			old_meas_type_L = 1;
 801491e:	2201      	movs	r2, #1
 8014920:	703a      	strb	r2, [r7, #0]
			GUI_TextRu_Cd_m2(X+192, Y, 1);
 8014922:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		}else if(!deg && old_meas_type_L != meas_type){
			old_meas_type_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
			GUI_TextRu_Cd_m2(X+192, Y, 0);
 8014926:	4629      	mov	r1, r5
 8014928:	b280      	uxth	r0, r0
 801492a:	f004 f859 	bl	80189e0 <GUI_TextRu_Cd_m2>
		GUI_TextRu_W_m2_sr(X+210, Y);
	}else if (Language_status == En && energy_light)
	{
		GUI_TextEn_W_m2_sr(X+210, Y);
	}
}
 801492e:	b006      	add	sp, #24
 8014930:	ecbd 8b02 	vpop	{d8}
 8014934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		TFT_SetFont(&Font16EN_arch_small);
 8014938:	f007 f978 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 801493c:	f105 010d 	add.w	r1, r5, #13
 8014940:	f104 0017 	add.w	r0, r4, #23
 8014944:	227b      	movs	r2, #123	; 0x7b
 8014946:	e75c      	b.n	8014802 <GUI_Text_L_Measure+0x56>
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8014948:	4606      	mov	r6, r0
 801494a:	e772      	b.n	8014832 <GUI_Text_L_Measure+0x86>
		sprintf (buffer, "%.1f", Value);
 801494c:	f7eb fe0c 	bl	8000568 <__aeabi_f2d>
 8014950:	460b      	mov	r3, r1
 8014952:	4602      	mov	r2, r0
 8014954:	493b      	ldr	r1, [pc, #236]	; (8014a44 <GUI_Text_L_Measure+0x298>)
 8014956:	e780      	b.n	801485a <GUI_Text_L_Measure+0xae>
	else if(!energy_light && number < old_numL_n)
 8014958:	4b3b      	ldr	r3, [pc, #236]	; (8014a48 <GUI_Text_L_Measure+0x29c>)
 801495a:	e7a3      	b.n	80148a4 <GUI_Text_L_Measure+0xf8>
		}else if(!deg && old_meas_type_L != meas_type){
 801495c:	2b00      	cmp	r3, #0
 801495e:	d0e6      	beq.n	801492e <GUI_Text_L_Measure+0x182>
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8014960:	2163      	movs	r1, #99	; 0x63
 8014962:	f105 031a 	add.w	r3, r5, #26
 8014966:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 801496a:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
			old_meas_type_L = 0;
 801496e:	703e      	strb	r6, [r7, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8014970:	b292      	uxth	r2, r2
 8014972:	9100      	str	r1, [sp, #0]
 8014974:	b280      	uxth	r0, r0
 8014976:	b29b      	uxth	r3, r3
 8014978:	4629      	mov	r1, r5
 801497a:	f006 ff2e 	bl	801b7da <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+192, Y, 0);
 801497e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8014982:	4632      	mov	r2, r6
 8014984:	e7cf      	b.n	8014926 <GUI_Text_L_Measure+0x17a>
	else if (Language_status == En && !energy_light)
 8014986:	f1b8 0f01 	cmp.w	r8, #1
 801498a:	d1d0      	bne.n	801492e <GUI_Text_L_Measure+0x182>
 801498c:	f1b9 0f00 	cmp.w	r9, #0
 8014990:	d13c      	bne.n	8014a0c <GUI_Text_L_Measure+0x260>
 8014992:	4f2b      	ldr	r7, [pc, #172]	; (8014a40 <GUI_Text_L_Measure+0x294>)
		if (deg && old_meas_type_L != meas_type){
 8014994:	783b      	ldrb	r3, [r7, #0]
 8014996:	b1d6      	cbz	r6, 80149ce <GUI_Text_L_Measure+0x222>
 8014998:	2b01      	cmp	r3, #1
 801499a:	d0c8      	beq.n	801492e <GUI_Text_L_Measure+0x182>
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 801499c:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
 80149a0:	b2b6      	uxth	r6, r6
 80149a2:	2063      	movs	r0, #99	; 0x63
 80149a4:	f105 031a 	add.w	r3, r5, #26
 80149a8:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80149ac:	1ce9      	adds	r1, r5, #3
 80149ae:	9000      	str	r0, [sp, #0]
 80149b0:	b292      	uxth	r2, r2
 80149b2:	b289      	uxth	r1, r1
 80149b4:	4630      	mov	r0, r6
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	f006 ff0f 	bl	801b7da <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+195, Y-4, 1);
 80149bc:	1f29      	subs	r1, r5, #4
			old_meas_type_L = 1;
 80149be:	f887 8000 	strb.w	r8, [r7]
			GUI_TextEn_cd_m2(X+195, Y-4, 1);
 80149c2:	4642      	mov	r2, r8
 80149c4:	b289      	uxth	r1, r1
 80149c6:	4630      	mov	r0, r6
			GUI_TextEn_cd_m2(X+195, Y-4, 0);
 80149c8:	f002 ff08 	bl	80177dc <GUI_TextEn_cd_m2>
 80149cc:	e7af      	b.n	801492e <GUI_Text_L_Measure+0x182>
		}else if(!deg && old_meas_type_L != meas_type){
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d0ad      	beq.n	801492e <GUI_Text_L_Measure+0x182>
			old_meas_type_L = 0;
 80149d2:	703e      	strb	r6, [r7, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 80149d4:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
 80149d8:	b2bf      	uxth	r7, r7
 80149da:	2063      	movs	r0, #99	; 0x63
 80149dc:	f105 031a 	add.w	r3, r5, #26
 80149e0:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80149e4:	1ce9      	adds	r1, r5, #3
 80149e6:	9000      	str	r0, [sp, #0]
 80149e8:	b292      	uxth	r2, r2
 80149ea:	b289      	uxth	r1, r1
 80149ec:	4638      	mov	r0, r7
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	f006 fef3 	bl	801b7da <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+195, Y-4, 0);
 80149f4:	1f29      	subs	r1, r5, #4
 80149f6:	4632      	mov	r2, r6
 80149f8:	b289      	uxth	r1, r1
 80149fa:	4638      	mov	r0, r7
 80149fc:	e7e4      	b.n	80149c8 <GUI_Text_L_Measure+0x21c>
		GUI_TextRu_W_m2_sr(X+210, Y);
 80149fe:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8014a02:	4629      	mov	r1, r5
 8014a04:	b280      	uxth	r0, r0
 8014a06:	f003 ff89 	bl	801891c <GUI_TextRu_W_m2_sr>
 8014a0a:	e790      	b.n	801492e <GUI_Text_L_Measure+0x182>
		GUI_TextEn_W_m2_sr(X+210, Y);
 8014a0c:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8014a10:	4629      	mov	r1, r5
 8014a12:	b280      	uxth	r0, r0
 8014a14:	f002 fe8a 	bl	801772c <GUI_TextEn_W_m2_sr>
}
 8014a18:	e789      	b.n	801492e <GUI_Text_L_Measure+0x182>
 8014a1a:	bf00      	nop
 8014a1c:	200001e8 	.word	0x200001e8
 8014a20:	200001c0 	.word	0x200001c0
 8014a24:	408f4000 	.word	0x408f4000
 8014a28:	3ff00000 	.word	0x3ff00000
 8014a2c:	447a0000 	.word	0x447a0000
 8014a30:	200001f0 	.word	0x200001f0
 8014a34:	0802e6b2 	.word	0x0802e6b2
 8014a38:	2000023a 	.word	0x2000023a
 8014a3c:	20004ca3 	.word	0x20004ca3
 8014a40:	20000238 	.word	0x20000238
 8014a44:	0802e6ad 	.word	0x0802e6ad
 8014a48:	2000023b 	.word	0x2000023b

08014a4c <GUI_Text_PPF_Measure>:

	char buffer[9] = {0};
	uint8_t	delta_pos = 122, deg = 0, number;
	uint32_t dec = 10;

	if((Value/1000) >= 1.0)
 8014a4c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8014bcc <GUI_Text_PPF_Measure+0x180>
 8014a50:	eec0 7a07 	vdiv.f32	s15, s0, s14
{	
 8014a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char buffer[9] = {0};
 8014a58:	2300      	movs	r3, #0
{	
 8014a5a:	4604      	mov	r4, r0
	{
		Value = Value/(1000);
		deg = 1;
	}
	
	TFT_SetTextColor(TFT_White);
 8014a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	
 8014a60:	460e      	mov	r6, r1
	uint8_t	delta_pos = 122, deg = 0, number;
 8014a62:	257a      	movs	r5, #122	; 0x7a
{	
 8014a64:	ed2d 8b02 	vpush	{d8}
	if((Value/1000) >= 1.0)
 8014a68:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
{	
 8014a6c:	b086      	sub	sp, #24
	uint8_t	delta_pos = 122, deg = 0, number;
 8014a6e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{	
 8014a76:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 122, deg = 0, number;
 8014a7a:	bfb8      	it	lt
 8014a7c:	461f      	movlt	r7, r3
 8014a7e:	bfa8      	it	ge
 8014a80:	eeb0 8a67 	vmovge.f32	s16, s15
	char buffer[9] = {0};
 8014a84:	9303      	str	r3, [sp, #12]
 8014a86:	9304      	str	r3, [sp, #16]
 8014a88:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number;
 8014a8c:	bfa8      	it	ge
 8014a8e:	2701      	movge	r7, #1
	TFT_SetTextColor(TFT_White);
 8014a90:	f007 f8d2 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014a94:	2063      	movs	r0, #99	; 0x63
 8014a96:	f007 f8d5 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014a9a:	484d      	ldr	r0, [pc, #308]	; (8014bd0 <GUI_Text_PPF_Measure+0x184>)
 8014a9c:	f007 f8c6 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8014aa0:	ee18 0a10 	vmov	r0, s16
 8014aa4:	f7eb fd60 	bl	8000568 <__aeabi_f2d>
 8014aa8:	4602      	mov	r2, r0
 8014aaa:	460b      	mov	r3, r1
 8014aac:	a803      	add	r0, sp, #12
 8014aae:	4949      	ldr	r1, [pc, #292]	; (8014bd4 <GUI_Text_PPF_Measure+0x188>)
 8014ab0:	f00a faa6 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8014ab4:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8014ab6:	2304      	movs	r3, #4

	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
		{
			dec *= 10;
 8014ab8:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8014aba:	ee07 2a90 	vmov	s15, r2
 8014abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014ac2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8014ac6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ace:	db06      	blt.n	8014ade <GUI_Text_PPF_Measure+0x92>
			delta_pos-=23;
 8014ad0:	3d17      	subs	r5, #23
			number++;
 8014ad2:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8014ad6:	434a      	muls	r2, r1
			delta_pos-=23;
 8014ad8:	b2ed      	uxtb	r5, r5
			number++;
 8014ada:	fa5f f888 	uxtb.w	r8, r8
 8014ade:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014ae0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014ae4:	d1e9      	bne.n	8014aba <GUI_Text_PPF_Measure+0x6e>
		}
	}
	
	if(number < old_numPPF )
 8014ae6:	4b3c      	ldr	r3, [pc, #240]	; (8014bd8 <GUI_Text_PPF_Measure+0x18c>)
 8014ae8:	781a      	ldrb	r2, [r3, #0]
 8014aea:	4542      	cmp	r2, r8
 8014aec:	4699      	mov	r9, r3
 8014aee:	d90d      	bls.n	8014b0c <GUI_Text_PPF_Measure+0xc0>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8014af0:	2163      	movs	r1, #99	; 0x63
 8014af2:	f106 031a 	add.w	r3, r6, #26
 8014af6:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014afa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014afe:	9100      	str	r1, [sp, #0]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	b292      	uxth	r2, r2
 8014b04:	4631      	mov	r1, r6
 8014b06:	b280      	uxth	r0, r0
 8014b08:	f006 fe67 	bl	801b7da <TFT_FillRectangle>
	} 

	old_numPPF = number;

	buffer[8] = 0;
 8014b0c:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014b0e:	1960      	adds	r0, r4, r5
 8014b10:	aa03      	add	r2, sp, #12
 8014b12:	4631      	mov	r1, r6
	buffer[8] = 0;
 8014b14:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014b18:	b280      	uxth	r0, r0
 8014b1a:	2303      	movs	r3, #3
	old_numPPF = number;
 8014b1c:	f889 8000 	strb.w	r8, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014b20:	f007 f9a6 	bl	801be70 <TFT_DisplayString>
	
	TFT_SetTextColor(TFT_White);
 8014b24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014b28:	f007 f886 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014b2c:	2063      	movs	r0, #99	; 0x63
 8014b2e:	f007 f889 	bl	801bc44 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8014b32:	4b2a      	ldr	r3, [pc, #168]	; (8014bdc <GUI_Text_PPF_Measure+0x190>)
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	f104 0a18 	add.w	sl, r4, #24
 8014b3a:	f104 0930 	add.w	r9, r4, #48	; 0x30
 8014b3e:	1cb5      	adds	r5, r6, #2
 8014b40:	f104 08c8 	add.w	r8, r4, #200	; 0xc8
 8014b44:	b9f3      	cbnz	r3, 8014b84 <GUI_Text_PPF_Measure+0x138>
			TFT_SetFont(&Font26RU_arch_big);
 8014b46:	4826      	ldr	r0, [pc, #152]	; (8014be0 <GUI_Text_PPF_Measure+0x194>)
 8014b48:	f007 f870 	bl	801bc2c <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'Ф'-17);
 8014b4c:	2293      	movs	r2, #147	; 0x93
 8014b4e:	4631      	mov	r1, r6
 8014b50:	4620      	mov	r0, r4
 8014b52:	f007 f87d 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'А'-17);
 8014b56:	227f      	movs	r2, #127	; 0x7f
 8014b58:	4631      	mov	r1, r6
 8014b5a:	fa1f f08a 	uxth.w	r0, sl
 8014b5e:	f007 f877 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+48, Y, 'Р'-17);
 8014b62:	228f      	movs	r2, #143	; 0x8f
 8014b64:	4631      	mov	r1, r6
 8014b66:	fa1f f089 	uxth.w	r0, r9
 8014b6a:	f007 f871 	bl	801bc50 <TFT_DrawCharRus>
			GUI_TextRu_umol(X+200, Y+2, deg);
 8014b6e:	463a      	mov	r2, r7
 8014b70:	b2a9      	uxth	r1, r5
 8014b72:	fa1f f088 	uxth.w	r0, r8
 8014b76:	f003 fe21 	bl	80187bc <GUI_TextRu_umol>
			TFT_DrawChar(X+24, Y+2, 'P'-33);
			TFT_DrawChar(X+48, Y+2, 'F'-33);
			TFT_DrawChar(X+72, Y+2, 'D'-33);
			GUI_TextEn_umol(X+200, Y+2, deg);
		}	
}
 8014b7a:	b006      	add	sp, #24
 8014b7c:	ecbd 8b02 	vpop	{d8}
 8014b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			TFT_DrawChar(X, Y+2, 'P'-33);
 8014b84:	b2ad      	uxth	r5, r5
			TFT_SetFont(&Font26EN_arch_big);
 8014b86:	4817      	ldr	r0, [pc, #92]	; (8014be4 <GUI_Text_PPF_Measure+0x198>)
 8014b88:	f007 f850 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X, Y+2, 'P'-33);
 8014b8c:	4629      	mov	r1, r5
 8014b8e:	4620      	mov	r0, r4
 8014b90:	222f      	movs	r2, #47	; 0x2f
 8014b92:	f007 f915 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+24, Y+2, 'P'-33);
 8014b96:	4629      	mov	r1, r5
 8014b98:	fa1f f08a 	uxth.w	r0, sl
 8014b9c:	222f      	movs	r2, #47	; 0x2f
 8014b9e:	f007 f90f 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+48, Y+2, 'F'-33);
 8014ba2:	4629      	mov	r1, r5
 8014ba4:	fa1f f089 	uxth.w	r0, r9
 8014ba8:	2225      	movs	r2, #37	; 0x25
 8014baa:	f007 f909 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+72, Y+2, 'D'-33);
 8014bae:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8014bb2:	4629      	mov	r1, r5
 8014bb4:	2223      	movs	r2, #35	; 0x23
 8014bb6:	b280      	uxth	r0, r0
 8014bb8:	f007 f902 	bl	801bdc0 <TFT_DrawChar>
			GUI_TextEn_umol(X+200, Y+2, deg);
 8014bbc:	463a      	mov	r2, r7
 8014bbe:	4629      	mov	r1, r5
 8014bc0:	fa1f f088 	uxth.w	r0, r8
 8014bc4:	f002 f8ee 	bl	8016da4 <GUI_TextEn_umol>
}
 8014bc8:	e7d7      	b.n	8014b7a <GUI_Text_PPF_Measure+0x12e>
 8014bca:	bf00      	nop
 8014bcc:	447a0000 	.word	0x447a0000
 8014bd0:	200001f0 	.word	0x200001f0
 8014bd4:	0802e6ad 	.word	0x0802e6ad
 8014bd8:	2000023c 	.word	0x2000023c
 8014bdc:	20004ca3 	.word	0x20004ca3
 8014be0:	20000200 	.word	0x20000200
 8014be4:	200001e8 	.word	0x200001e8

08014be8 <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR)
{
 8014be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bec:	ed2d 8b06 	vpush	{d8-d10}
	char buffer[9] = {0};
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;
	
	if((ValueB/1000) >= 1.0)
 8014bf0:	eddf 8ad3 	vldr	s17, [pc, #844]	; 8014f40 <GUI_Text_PPFRGB_Measure+0x358>
 8014bf4:	eec1 7a28 	vdiv.f32	s15, s2, s17
{
 8014bf8:	b086      	sub	sp, #24
	char buffer[9] = {0};
 8014bfa:	2600      	movs	r6, #0
{
 8014bfc:	4604      	mov	r4, r0
		ValueB = ValueB/(1000);
		deg = 1;
	}
	else deg=0;
	
	TFT_SetTextColor(TFT_White);
 8014bfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8014c02:	460d      	mov	r5, r1
	char buffer[9] = {0};
 8014c04:	9603      	str	r6, [sp, #12]
 8014c06:	9604      	str	r6, [sp, #16]
 8014c08:	f88d 6014 	strb.w	r6, [sp, #20]
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8014c0c:	278c      	movs	r7, #140	; 0x8c
 8014c0e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	else deg=0;
 8014c12:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8014c1a:	eef0 aa41 	vmov.f32	s21, s2
	else deg=0;
 8014c1e:	bfa8      	it	ge
 8014c20:	eef0 aa67 	vmovge.f32	s21, s15
{
 8014c24:	eef0 9a40 	vmov.f32	s19, s0
 8014c28:	eeb0 aa60 	vmov.f32	s20, s1
 8014c2c:	eeb0 9a61 	vmov.f32	s18, s3
	else deg=0;
 8014c30:	bfac      	ite	ge
 8014c32:	f04f 0901 	movge.w	r9, #1
 8014c36:	46b1      	movlt	r9, r6
	TFT_SetTextColor(TFT_White);
 8014c38:	f006 fffe 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014c3c:	2063      	movs	r0, #99	; 0x63
 8014c3e:	f007 f801 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8014c42:	48c0      	ldr	r0, [pc, #768]	; (8014f44 <GUI_Text_PPFRGB_Measure+0x35c>)
 8014c44:	f006 fff2 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 8014c48:	ee1a 0a90 	vmov	r0, s21
 8014c4c:	f7eb fc8c 	bl	8000568 <__aeabi_f2d>
 8014c50:	4602      	mov	r2, r0
 8014c52:	460b      	mov	r3, r1
 8014c54:	a803      	add	r0, sp, #12
 8014c56:	49bc      	ldr	r1, [pc, #752]	; (8014f48 <GUI_Text_PPFRGB_Measure+0x360>)
 8014c58:	f00a f9d2 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8014c5c:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueB);
 8014c5e:	2304      	movs	r3, #4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueB/(dec)) >= 1.0)
		{
			dec *= 10;
 8014c60:	4611      	mov	r1, r2
		if((ValueB/(dec)) >= 1.0)
 8014c62:	ee07 2a90 	vmov	s15, r2
 8014c66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014c6a:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8014c6e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c76:	db04      	blt.n	8014c82 <GUI_Text_PPFRGB_Measure+0x9a>
			delta_pos-=23;
 8014c78:	3f17      	subs	r7, #23
			number++;
 8014c7a:	3601      	adds	r6, #1
			dec *= 10;
 8014c7c:	434a      	muls	r2, r1
			delta_pos-=23;
 8014c7e:	b2ff      	uxtb	r7, r7
			number++;
 8014c80:	b2f6      	uxtb	r6, r6
 8014c82:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014c84:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014c88:	d1eb      	bne.n	8014c62 <GUI_Text_PPFRGB_Measure+0x7a>
		}
	}
	
		if(number < old_numPPFB )
 8014c8a:	4bb0      	ldr	r3, [pc, #704]	; (8014f4c <GUI_Text_PPFRGB_Measure+0x364>)
 8014c8c:	781a      	ldrb	r2, [r3, #0]
 8014c8e:	42b2      	cmp	r2, r6
 8014c90:	4698      	mov	r8, r3
 8014c92:	d90d      	bls.n	8014cb0 <GUI_Text_PPFRGB_Measure+0xc8>
	{
		TFT_FillRectangle(X+20, Y, X+197, Y+20, TFT_Black_Bkgr);
 8014c94:	2163      	movs	r1, #99	; 0x63
 8014c96:	f105 0314 	add.w	r3, r5, #20
 8014c9a:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014c9e:	f104 0014 	add.w	r0, r4, #20
 8014ca2:	9100      	str	r1, [sp, #0]
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	b292      	uxth	r2, r2
 8014ca8:	4629      	mov	r1, r5
 8014caa:	b280      	uxth	r0, r0
 8014cac:	f006 fd95 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numPPFB = number;
	number = 0;
	buffer[8] = 0;
 8014cb0:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014cb2:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 8014cb4:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014cb8:	aa03      	add	r2, sp, #12
 8014cba:	2303      	movs	r3, #3
 8014cbc:	4629      	mov	r1, r5
 8014cbe:	b280      	uxth	r0, r0
	old_numPPFB = number;
 8014cc0:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014cc4:	f007 f8d4 	bl	801be70 <TFT_DisplayString>
	
	if (Language_status==Ru)
 8014cc8:	4aa1      	ldr	r2, [pc, #644]	; (8014f50 <GUI_Text_PPFRGB_Measure+0x368>)
 8014cca:	7813      	ldrb	r3, [r2, #0]
 8014ccc:	4690      	mov	r8, r2
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	f040 81b3 	bne.w	801503a <GUI_Text_PPFRGB_Measure+0x452>
	{
		TFT_SetFont(&Font16RU_arch_big);
 8014cd4:	489f      	ldr	r0, [pc, #636]	; (8014f54 <GUI_Text_PPFRGB_Measure+0x36c>)
 8014cd6:	f006 ffa9 	bl	801bc2c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 8014cda:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014cde:	22a1      	movs	r2, #161	; 0xa1
 8014ce0:	4629      	mov	r1, r5
 8014ce2:	b280      	uxth	r0, r0
 8014ce4:	f006 ffb4 	bl	801bc50 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8014ce8:	1d6e      	adds	r6, r5, #5
		TFT_SetFont(&Font16RU_arch_small);
 8014cea:	489b      	ldr	r0, [pc, #620]	; (8014f58 <GUI_Text_PPFRGB_Measure+0x370>)
 8014cec:	f006 ff9e 	bl	801bc2c <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8014cf0:	b2b6      	uxth	r6, r6
 8014cf2:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8014cf6:	22b8      	movs	r2, #184	; 0xb8
 8014cf8:	4631      	mov	r1, r6
 8014cfa:	b280      	uxth	r0, r0
 8014cfc:	f006 ffa8 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 8014d00:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8014d04:	22bd      	movs	r2, #189	; 0xbd
 8014d06:	4631      	mov	r1, r6
 8014d08:	b280      	uxth	r0, r0
 8014d0a:	f006 ffa1 	bl	801bc50 <TFT_DrawCharRus>
		GUI_TextRu_umol(X+202, Y, deg);
 8014d0e:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 8014d12:	464a      	mov	r2, r9
 8014d14:	4629      	mov	r1, r5
 8014d16:	b280      	uxth	r0, r0
 8014d18:	f003 fd50 	bl	80187bc <GUI_TextRu_umol>
		GUI_TextEn_Blue(X+34, Y);
		GUI_TextEn_umol(X+200, Y, deg);
	}
	
	
	if((ValueG/1000) >= 1.0)
 8014d1c:	eeca 7a28 	vdiv.f32	s15, s20, s17
	}
	else deg=0;
	
	delta_pos = 140;
	dec = 10;
	TFT_SetFont(&Font16EN_arch_big);
 8014d20:	4888      	ldr	r0, [pc, #544]	; (8014f44 <GUI_Text_PPFRGB_Measure+0x35c>)
	number = 0;
 8014d22:	2600      	movs	r6, #0
	delta_pos = 140;
 8014d24:	278c      	movs	r7, #140	; 0x8c
	else deg=0;
 8014d26:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2e:	bfa8      	it	ge
 8014d30:	eeb0 aa67 	vmovge.f32	s20, s15
 8014d34:	bfac      	ite	ge
 8014d36:	f04f 0901 	movge.w	r9, #1
 8014d3a:	f04f 0900 	movlt.w	r9, #0
	TFT_SetFont(&Font16EN_arch_big);
 8014d3e:	f006 ff75 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 8014d42:	ee1a 0a10 	vmov	r0, s20
 8014d46:	f7eb fc0f 	bl	8000568 <__aeabi_f2d>
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	a803      	add	r0, sp, #12
 8014d50:	497d      	ldr	r1, [pc, #500]	; (8014f48 <GUI_Text_PPFRGB_Measure+0x360>)
 8014d52:	f00a f955 	bl	801f000 <siprintf>
	dec = 10;
 8014d56:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 8014d58:	2304      	movs	r3, #4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueG/(dec)) >= 1.0)
		{
			dec *= 10;
 8014d5a:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 8014d5c:	ee07 2a90 	vmov	s15, r2
 8014d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014d64:	eeca 7a07 	vdiv.f32	s15, s20, s14
 8014d68:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d70:	db04      	blt.n	8014d7c <GUI_Text_PPFRGB_Measure+0x194>
			delta_pos-=23;
 8014d72:	3f17      	subs	r7, #23
			number++;
 8014d74:	3601      	adds	r6, #1
			dec *= 10;
 8014d76:	434a      	muls	r2, r1
			delta_pos-=23;
 8014d78:	b2ff      	uxtb	r7, r7
			number++;
 8014d7a:	b2f6      	uxtb	r6, r6
 8014d7c:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014d7e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014d82:	d1eb      	bne.n	8014d5c <GUI_Text_PPFRGB_Measure+0x174>
		}
	}
	
		if(number < old_numPPFG )
 8014d84:	4b75      	ldr	r3, [pc, #468]	; (8014f5c <GUI_Text_PPFRGB_Measure+0x374>)
 8014d86:	781a      	ldrb	r2, [r3, #0]
 8014d88:	42b2      	cmp	r2, r6
 8014d8a:	469a      	mov	sl, r3
 8014d8c:	d911      	bls.n	8014db2 <GUI_Text_PPFRGB_Measure+0x1ca>
	{
		TFT_FillRectangle(X+20, Y+21, X+197, Y+41, TFT_Black_Bkgr);
 8014d8e:	f105 0329 	add.w	r3, r5, #41	; 0x29
 8014d92:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014d96:	f105 0115 	add.w	r1, r5, #21
 8014d9a:	f104 0014 	add.w	r0, r4, #20
 8014d9e:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014da2:	f8cd e000 	str.w	lr, [sp]
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	b292      	uxth	r2, r2
 8014daa:	b289      	uxth	r1, r1
 8014dac:	b280      	uxth	r0, r0
 8014dae:	f006 fd14 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numPPFG = number;
 8014db2:	f88a 6000 	strb.w	r6, [sl]
	number = 0;
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014db6:	f105 0616 	add.w	r6, r5, #22
	buffer[8] = 0;
 8014dba:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014dbc:	b2b6      	uxth	r6, r6
 8014dbe:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 8014dc0:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014dc4:	aa03      	add	r2, sp, #12
 8014dc6:	2303      	movs	r3, #3
 8014dc8:	4631      	mov	r1, r6
 8014dca:	b280      	uxth	r0, r0
 8014dcc:	f007 f850 	bl	801be70 <TFT_DisplayString>
	
	if (Language_status==Ru)
 8014dd0:	f898 3000 	ldrb.w	r3, [r8]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	f040 8141 	bne.w	801505c <GUI_Text_PPFRGB_Measure+0x474>
	{
		TFT_SetFont(&Font16RU_arch_big);
 8014dda:	485e      	ldr	r0, [pc, #376]	; (8014f54 <GUI_Text_PPFRGB_Measure+0x36c>)
 8014ddc:	f006 ff26 	bl	801bc2c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8014de0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014de4:	2297      	movs	r2, #151	; 0x97
 8014de6:	4631      	mov	r1, r6
 8014de8:	b280      	uxth	r0, r0
 8014dea:	f006 ff31 	bl	801bc50 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8014dee:	f105 071b 	add.w	r7, r5, #27
		TFT_SetFont(&Font16RU_arch_small);
 8014df2:	4859      	ldr	r0, [pc, #356]	; (8014f58 <GUI_Text_PPFRGB_Measure+0x370>)
 8014df4:	f006 ff1a 	bl	801bc2c <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8014df8:	b2bf      	uxth	r7, r7
 8014dfa:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8014dfe:	22b5      	movs	r2, #181	; 0xb5
 8014e00:	4639      	mov	r1, r7
 8014e02:	b280      	uxth	r0, r0
 8014e04:	f006 ff24 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 8014e08:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8014e0c:	22bb      	movs	r2, #187	; 0xbb
 8014e0e:	4639      	mov	r1, r7
 8014e10:	b280      	uxth	r0, r0
 8014e12:	f006 ff1d 	bl	801bc50 <TFT_DrawCharRus>
		GUI_TextRu_umol(X+202, Y+22, deg);
 8014e16:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 8014e1a:	464a      	mov	r2, r9
 8014e1c:	4631      	mov	r1, r6
 8014e1e:	b280      	uxth	r0, r0
 8014e20:	f003 fccc 	bl	80187bc <GUI_TextRu_umol>
		GUI_TextEn_umol(X+200, Y+22, deg);
	}
	
	
	
	if((ValueR/1000) >= 1.0)
 8014e24:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	}
	else deg=0;
	
	delta_pos = 140;
	dec = 10;
	TFT_SetFont(&Font16EN_arch_big);
 8014e28:	4846      	ldr	r0, [pc, #280]	; (8014f44 <GUI_Text_PPFRGB_Measure+0x35c>)
	number = 0;
 8014e2a:	2600      	movs	r6, #0
	delta_pos = 140;
 8014e2c:	278c      	movs	r7, #140	; 0x8c
	else deg=0;
 8014e2e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e36:	bfa8      	it	ge
 8014e38:	eef0 9a67 	vmovge.f32	s19, s15
 8014e3c:	bfac      	ite	ge
 8014e3e:	f04f 0901 	movge.w	r9, #1
 8014e42:	f04f 0900 	movlt.w	r9, #0
	TFT_SetFont(&Font16EN_arch_big);
 8014e46:	f006 fef1 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 8014e4a:	ee19 0a90 	vmov	r0, s19
 8014e4e:	f7eb fb8b 	bl	8000568 <__aeabi_f2d>
 8014e52:	4602      	mov	r2, r0
 8014e54:	460b      	mov	r3, r1
 8014e56:	a803      	add	r0, sp, #12
 8014e58:	493b      	ldr	r1, [pc, #236]	; (8014f48 <GUI_Text_PPFRGB_Measure+0x360>)
 8014e5a:	f00a f8d1 	bl	801f000 <siprintf>
	dec = 10;
 8014e5e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 8014e60:	2304      	movs	r3, #4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueR/(dec)) >= 1.0)
		{
			dec *= 10;
 8014e62:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 8014e64:	ee07 2a90 	vmov	s15, r2
 8014e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e6c:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8014e70:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e78:	db04      	blt.n	8014e84 <GUI_Text_PPFRGB_Measure+0x29c>
			delta_pos-=23;
 8014e7a:	3f17      	subs	r7, #23
			number++;
 8014e7c:	3601      	adds	r6, #1
			dec *= 10;
 8014e7e:	434a      	muls	r2, r1
			delta_pos-=23;
 8014e80:	b2ff      	uxtb	r7, r7
			number++;
 8014e82:	b2f6      	uxtb	r6, r6
 8014e84:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014e86:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014e8a:	d1eb      	bne.n	8014e64 <GUI_Text_PPFRGB_Measure+0x27c>
		}
	}
	
	if(number < old_numPPFR )
 8014e8c:	4b34      	ldr	r3, [pc, #208]	; (8014f60 <GUI_Text_PPFRGB_Measure+0x378>)
 8014e8e:	781a      	ldrb	r2, [r3, #0]
 8014e90:	42b2      	cmp	r2, r6
 8014e92:	469a      	mov	sl, r3
 8014e94:	d911      	bls.n	8014eba <GUI_Text_PPFRGB_Measure+0x2d2>
	{
		TFT_FillRectangle(X+20, Y+42, X+197, Y+63, TFT_Black_Bkgr);
 8014e96:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8014e9a:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014e9e:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8014ea2:	f104 0014 	add.w	r0, r4, #20
 8014ea6:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014eaa:	f8cd e000 	str.w	lr, [sp]
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	b292      	uxth	r2, r2
 8014eb2:	b289      	uxth	r1, r1
 8014eb4:	b280      	uxth	r0, r0
 8014eb6:	f006 fc90 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numPPFR = number;
 8014eba:	f88a 6000 	strb.w	r6, [sl]
	number = 0;
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014ebe:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	buffer[8] = 0;
 8014ec2:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014ec4:	b2b6      	uxth	r6, r6
 8014ec6:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 8014ec8:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014ecc:	aa03      	add	r2, sp, #12
 8014ece:	2303      	movs	r3, #3
 8014ed0:	4631      	mov	r1, r6
 8014ed2:	b280      	uxth	r0, r0
 8014ed4:	f006 ffcc 	bl	801be70 <TFT_DisplayString>
	
	if (Language_status==Ru)
 8014ed8:	f898 3000 	ldrb.w	r3, [r8]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	f040 80ce 	bne.w	801507e <GUI_Text_PPFRGB_Measure+0x496>
	{
		TFT_SetFont(&Font16RU_arch_big);
 8014ee2:	481c      	ldr	r0, [pc, #112]	; (8014f54 <GUI_Text_PPFRGB_Measure+0x36c>)
 8014ee4:	f006 fea2 	bl	801bc2c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8014ee8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014eec:	229a      	movs	r2, #154	; 0x9a
 8014eee:	4631      	mov	r1, r6
 8014ef0:	b280      	uxth	r0, r0
 8014ef2:	f006 fead 	bl	801bc50 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 8014ef6:	4818      	ldr	r0, [pc, #96]	; (8014f58 <GUI_Text_PPFRGB_Measure+0x370>)
 8014ef8:	f006 fe98 	bl	801bc2c <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 8014efc:	f105 0131 	add.w	r1, r5, #49	; 0x31
 8014f00:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8014f04:	2280      	movs	r2, #128	; 0x80
 8014f06:	b289      	uxth	r1, r1
 8014f08:	b280      	uxth	r0, r0
 8014f0a:	f006 fea1 	bl	801bc50 <TFT_DrawCharRus>
		GUI_TextRu_umol(X+202, Y+44, deg);
 8014f0e:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 8014f12:	464a      	mov	r2, r9
 8014f14:	4631      	mov	r1, r6
 8014f16:	b280      	uxth	r0, r0
 8014f18:	f003 fc50 	bl	80187bc <GUI_TextRu_umol>
	{
		GUI_TextEn_Red(X+37, Y+44);
		GUI_TextEn_umol(X+200, Y+44, deg);
	}

	if((ValueFR/1000) >= 1.0)
 8014f1c:	eec9 7a28 	vdiv.f32	s15, s18, s17
	}
	else deg=0;
	
	delta_pos = 140;
	dec = 10;
	TFT_SetFont(&Font16EN_arch_big);
 8014f20:	4808      	ldr	r0, [pc, #32]	; (8014f44 <GUI_Text_PPFRGB_Measure+0x35c>)
	number = 0;
 8014f22:	f04f 0900 	mov.w	r9, #0
	delta_pos = 140;
 8014f26:	268c      	movs	r6, #140	; 0x8c
	else deg=0;
 8014f28:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f30:	bfa8      	it	ge
 8014f32:	eeb0 9a67 	vmovge.f32	s18, s15
 8014f36:	bfac      	ite	ge
 8014f38:	2701      	movge	r7, #1
 8014f3a:	2700      	movlt	r7, #0
 8014f3c:	e012      	b.n	8014f64 <GUI_Text_PPFRGB_Measure+0x37c>
 8014f3e:	bf00      	nop
 8014f40:	447a0000 	.word	0x447a0000
 8014f44:	200001b0 	.word	0x200001b0
 8014f48:	0802e6ad 	.word	0x0802e6ad
 8014f4c:	2000023d 	.word	0x2000023d
 8014f50:	20004ca3 	.word	0x20004ca3
 8014f54:	200001d0 	.word	0x200001d0
 8014f58:	200001d8 	.word	0x200001d8
 8014f5c:	2000023f 	.word	0x2000023f
 8014f60:	20000240 	.word	0x20000240
	TFT_SetFont(&Font16EN_arch_big);
 8014f64:	f006 fe62 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 8014f68:	ee19 0a10 	vmov	r0, s18
 8014f6c:	f7eb fafc 	bl	8000568 <__aeabi_f2d>
 8014f70:	4602      	mov	r2, r0
 8014f72:	460b      	mov	r3, r1
 8014f74:	a803      	add	r0, sp, #12
 8014f76:	494f      	ldr	r1, [pc, #316]	; (80150b4 <GUI_Text_PPFRGB_Measure+0x4cc>)
 8014f78:	f00a f842 	bl	801f000 <siprintf>
	dec = 10;
 8014f7c:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 8014f7e:	2304      	movs	r3, #4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueFR/(dec)) >= 1.0)
		{
			dec *= 10;
 8014f80:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 8014f82:	ee07 2a90 	vmov	s15, r2
 8014f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014f8a:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8014f8e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f96:	db06      	blt.n	8014fa6 <GUI_Text_PPFRGB_Measure+0x3be>
			delta_pos-=23;
 8014f98:	3e17      	subs	r6, #23
			number++;
 8014f9a:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 8014f9e:	434a      	muls	r2, r1
			delta_pos-=23;
 8014fa0:	b2f6      	uxtb	r6, r6
			number++;
 8014fa2:	fa5f f989 	uxtb.w	r9, r9
 8014fa6:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014fa8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014fac:	d1e9      	bne.n	8014f82 <GUI_Text_PPFRGB_Measure+0x39a>
		}
	}
	
	if(number < old_numPPFFR )
 8014fae:	4b42      	ldr	r3, [pc, #264]	; (80150b8 <GUI_Text_PPFRGB_Measure+0x4d0>)
 8014fb0:	781a      	ldrb	r2, [r3, #0]
 8014fb2:	454a      	cmp	r2, r9
 8014fb4:	469a      	mov	sl, r3
 8014fb6:	d911      	bls.n	8014fdc <GUI_Text_PPFRGB_Measure+0x3f4>
	{
		TFT_FillRectangle(X+20, Y+65, X+197, Y+87, TFT_Black_Bkgr);
 8014fb8:	f105 0357 	add.w	r3, r5, #87	; 0x57
 8014fbc:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014fc0:	f105 0141 	add.w	r1, r5, #65	; 0x41
 8014fc4:	f104 0014 	add.w	r0, r4, #20
 8014fc8:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014fcc:	f8cd e000 	str.w	lr, [sp]
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	b292      	uxth	r2, r2
 8014fd4:	b289      	uxth	r1, r1
 8014fd6:	b280      	uxth	r0, r0
 8014fd8:	f006 fbff 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numPPFFR = number;
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014fdc:	3542      	adds	r5, #66	; 0x42
 8014fde:	b2ad      	uxth	r5, r5
	buffer[8] = 0;
 8014fe0:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014fe2:	19a0      	adds	r0, r4, r6
 8014fe4:	aa03      	add	r2, sp, #12
 8014fe6:	4629      	mov	r1, r5
	buffer[8] = 0;
 8014fe8:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014fec:	b280      	uxth	r0, r0
 8014fee:	2303      	movs	r3, #3
	old_numPPFFR = number;
 8014ff0:	f88a 9000 	strb.w	r9, [sl]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014ff4:	f006 ff3c 	bl	801be70 <TFT_DisplayString>
	
	TFT_SetFont(&Font16EN_arch_big);
 8014ff8:	4830      	ldr	r0, [pc, #192]	; (80150bc <GUI_Text_PPFRGB_Measure+0x4d4>)
 8014ffa:	f006 fe17 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 8014ffe:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8015002:	2246      	movs	r2, #70	; 0x46
 8015004:	4629      	mov	r1, r5
 8015006:	b280      	uxth	r0, r0
 8015008:	f006 feda 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 801500c:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8015010:	2252      	movs	r2, #82	; 0x52
 8015012:	4629      	mov	r1, r5
 8015014:	b280      	uxth	r0, r0
 8015016:	f006 fed3 	bl	801bdc0 <TFT_DrawChar>
	if (Language_status==Ru) GUI_TextRu_umol(X+202, Y+66, deg);
 801501a:	f898 3000 	ldrb.w	r3, [r8]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d13e      	bne.n	80150a0 <GUI_Text_PPFRGB_Measure+0x4b8>
 8015022:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 8015026:	463a      	mov	r2, r7
 8015028:	4629      	mov	r1, r5
 801502a:	b280      	uxth	r0, r0
 801502c:	f003 fbc6 	bl	80187bc <GUI_TextRu_umol>
	else if (Language_status==En) GUI_TextEn_umol(X+200, Y+66, deg);

}
 8015030:	b006      	add	sp, #24
 8015032:	ecbd 8b06 	vpop	{d8-d10}
 8015036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if (Language_status==En)
 801503a:	2b01      	cmp	r3, #1
 801503c:	f47f ae6e 	bne.w	8014d1c <GUI_Text_PPFRGB_Measure+0x134>
		GUI_TextEn_Blue(X+34, Y);
 8015040:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8015044:	4629      	mov	r1, r5
 8015046:	b280      	uxth	r0, r0
 8015048:	f002 fc6a 	bl	8017920 <GUI_TextEn_Blue>
		GUI_TextEn_umol(X+200, Y, deg);
 801504c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8015050:	464a      	mov	r2, r9
 8015052:	4629      	mov	r1, r5
 8015054:	b280      	uxth	r0, r0
 8015056:	f001 fea5 	bl	8016da4 <GUI_TextEn_umol>
 801505a:	e65f      	b.n	8014d1c <GUI_Text_PPFRGB_Measure+0x134>
	else if (Language_status==En)
 801505c:	2b01      	cmp	r3, #1
 801505e:	f47f aee1 	bne.w	8014e24 <GUI_Text_PPFRGB_Measure+0x23c>
		GUI_TextEn_Green(X+17, Y+22);
 8015062:	f104 0011 	add.w	r0, r4, #17
 8015066:	4631      	mov	r1, r6
 8015068:	b280      	uxth	r0, r0
 801506a:	f002 fc27 	bl	80178bc <GUI_TextEn_Green>
		GUI_TextEn_umol(X+200, Y+22, deg);
 801506e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8015072:	464a      	mov	r2, r9
 8015074:	4631      	mov	r1, r6
 8015076:	b280      	uxth	r0, r0
 8015078:	f001 fe94 	bl	8016da4 <GUI_TextEn_umol>
 801507c:	e6d2      	b.n	8014e24 <GUI_Text_PPFRGB_Measure+0x23c>
	else if (Language_status==En)
 801507e:	2b01      	cmp	r3, #1
 8015080:	f47f af4c 	bne.w	8014f1c <GUI_Text_PPFRGB_Measure+0x334>
		GUI_TextEn_Red(X+37, Y+44);
 8015084:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8015088:	4631      	mov	r1, r6
 801508a:	b280      	uxth	r0, r0
 801508c:	f002 fc74 	bl	8017978 <GUI_TextEn_Red>
		GUI_TextEn_umol(X+200, Y+44, deg);
 8015090:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8015094:	464a      	mov	r2, r9
 8015096:	4631      	mov	r1, r6
 8015098:	b280      	uxth	r0, r0
 801509a:	f001 fe83 	bl	8016da4 <GUI_TextEn_umol>
 801509e:	e73d      	b.n	8014f1c <GUI_Text_PPFRGB_Measure+0x334>
	else if (Language_status==En) GUI_TextEn_umol(X+200, Y+66, deg);
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d1c5      	bne.n	8015030 <GUI_Text_PPFRGB_Measure+0x448>
 80150a4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 80150a8:	463a      	mov	r2, r7
 80150aa:	4629      	mov	r1, r5
 80150ac:	b280      	uxth	r0, r0
 80150ae:	f001 fe79 	bl	8016da4 <GUI_TextEn_umol>
}
 80150b2:	e7bd      	b.n	8015030 <GUI_Text_PPFRGB_Measure+0x448>
 80150b4:	0802e6ad 	.word	0x0802e6ad
 80150b8:	2000023e 	.word	0x2000023e
 80150bc:	200001b0 	.word	0x200001b0

080150c0 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ)
{
 80150c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c4:	b087      	sub	sp, #28
	char buffer[5] = {0};
 80150c6:	2600      	movs	r6, #0
{
 80150c8:	4604      	mov	r4, r0
 80150ca:	469a      	mov	sl, r3
	uint8_t	delta_pos = 180, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80150cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80150d0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80150d4:	9303      	str	r3, [sp, #12]
 80150d6:	460d      	mov	r5, r1
 80150d8:	4693      	mov	fp, r2
	char buffer[5] = {0};
 80150da:	9604      	str	r6, [sp, #16]
 80150dc:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80150e0:	f006 fdaa 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80150e4:	2063      	movs	r0, #99	; 0x63
 80150e6:	f006 fdad 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80150ea:	487b      	ldr	r0, [pc, #492]	; (80152d8 <GUI_Text_XYZ_Measure+0x218>)
 80150ec:	f006 fd9e 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 80150f0:	465a      	mov	r2, fp
 80150f2:	497a      	ldr	r1, [pc, #488]	; (80152dc <GUI_Text_XYZ_Measure+0x21c>)
 80150f4:	a804      	add	r0, sp, #16
 80150f6:	f009 ff83 	bl	801f000 <siprintf>
 80150fa:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 80150fe:	f04f 090a 	mov.w	r9, #10
	uint8_t	delta_pos = 180, number = 0;
 8015102:	27b4      	movs	r7, #180	; 0xb4
	
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueX/(dec)) >= 1.0)
 8015104:	fbbb f0f9 	udiv	r0, fp, r9
 8015108:	f7eb fa0c 	bl	8000524 <__aeabi_ui2d>
 801510c:	2200      	movs	r2, #0
 801510e:	4b74      	ldr	r3, [pc, #464]	; (80152e0 <GUI_Text_XYZ_Measure+0x220>)
 8015110:	f7eb fd04 	bl	8000b1c <__aeabi_dcmpge>
 8015114:	b130      	cbz	r0, 8015124 <GUI_Text_XYZ_Measure+0x64>
		{
			dec *= 10;
 8015116:	230a      	movs	r3, #10
			delta_pos-=23;
 8015118:	3f17      	subs	r7, #23
			number++;
 801511a:	3601      	adds	r6, #1
			dec *= 10;
 801511c:	fb03 f909 	mul.w	r9, r3, r9
			delta_pos-=23;
 8015120:	b2ff      	uxtb	r7, r7
			number++;
 8015122:	b2f6      	uxtb	r6, r6
 8015124:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8015128:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 801512c:	d1ea      	bne.n	8015104 <GUI_Text_XYZ_Measure+0x44>
		}
	}
	
	if(number < old_numX )
 801512e:	4b6d      	ldr	r3, [pc, #436]	; (80152e4 <GUI_Text_XYZ_Measure+0x224>)
 8015130:	781a      	ldrb	r2, [r3, #0]
 8015132:	42b2      	cmp	r2, r6
 8015134:	4698      	mov	r8, r3
 8015136:	d90d      	bls.n	8015154 <GUI_Text_XYZ_Measure+0x94>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 8015138:	2163      	movs	r1, #99	; 0x63
 801513a:	f105 0318 	add.w	r3, r5, #24
 801513e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015142:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015146:	9100      	str	r1, [sp, #0]
 8015148:	b29b      	uxth	r3, r3
 801514a:	b292      	uxth	r2, r2
 801514c:	4629      	mov	r1, r5
 801514e:	b280      	uxth	r0, r0
 8015150:	f006 fb43 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numX = number;
	number = 0;
	
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015154:	19e0      	adds	r0, r4, r7
 8015156:	2303      	movs	r3, #3
 8015158:	aa04      	add	r2, sp, #16
 801515a:	4629      	mov	r1, r5
 801515c:	b280      	uxth	r0, r0
	old_numX = number;
 801515e:	f888 6000 	strb.w	r6, [r8]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015162:	f006 fe85 	bl	801be70 <TFT_DisplayString>
	
			TFT_SetTextColor(TFT_White);
 8015166:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801516a:	f006 fd65 	bl	801bc38 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 801516e:	2063      	movs	r0, #99	; 0x63
 8015170:	f006 fd68 	bl	801bc44 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8015174:	485c      	ldr	r0, [pc, #368]	; (80152e8 <GUI_Text_XYZ_Measure+0x228>)
 8015176:	f006 fd59 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 801517a:	2236      	movs	r2, #54	; 0x36
 801517c:	4629      	mov	r1, r5
 801517e:	4620      	mov	r0, r4
 8015180:	f006 fe1e 	bl	801bdc0 <TFT_DrawChar>
	
	delta_pos = 180;
	dec = 10;
	
	TFT_SetFont(&Font26EN_arch_digit);
 8015184:	4854      	ldr	r0, [pc, #336]	; (80152d8 <GUI_Text_XYZ_Measure+0x218>)
 8015186:	f006 fd51 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 801518a:	4652      	mov	r2, sl
 801518c:	4953      	ldr	r1, [pc, #332]	; (80152dc <GUI_Text_XYZ_Measure+0x21c>)
 801518e:	a804      	add	r0, sp, #16
 8015190:	f009 ff36 	bl	801f000 <siprintf>
	dec = 10;
 8015194:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueY);
 8015198:	f04f 0804 	mov.w	r8, #4
	number = 0;
 801519c:	2700      	movs	r7, #0
	delta_pos = 180;
 801519e:	26b4      	movs	r6, #180	; 0xb4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueY/(dec)) >= 1.0)
		{
			dec *= 10;
 80151a0:	46cb      	mov	fp, r9
		if((ValueY/(dec)) >= 1.0)
 80151a2:	fbba f0f9 	udiv	r0, sl, r9
 80151a6:	f7eb f9bd 	bl	8000524 <__aeabi_ui2d>
 80151aa:	2200      	movs	r2, #0
 80151ac:	4b4c      	ldr	r3, [pc, #304]	; (80152e0 <GUI_Text_XYZ_Measure+0x220>)
 80151ae:	f7eb fcb5 	bl	8000b1c <__aeabi_dcmpge>
 80151b2:	b128      	cbz	r0, 80151c0 <GUI_Text_XYZ_Measure+0x100>
			delta_pos-=23;
 80151b4:	3e17      	subs	r6, #23
			number++;
 80151b6:	3701      	adds	r7, #1
			dec *= 10;
 80151b8:	fb0b f909 	mul.w	r9, fp, r9
			delta_pos-=23;
 80151bc:	b2f6      	uxtb	r6, r6
			number++;
 80151be:	b2ff      	uxtb	r7, r7
 80151c0:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 80151c4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80151c8:	d1eb      	bne.n	80151a2 <GUI_Text_XYZ_Measure+0xe2>
		}
	}
	
	if(number < old_numY )
 80151ca:	4b48      	ldr	r3, [pc, #288]	; (80152ec <GUI_Text_XYZ_Measure+0x22c>)
 80151cc:	781a      	ldrb	r2, [r3, #0]
 80151ce:	42ba      	cmp	r2, r7
 80151d0:	4699      	mov	r9, r3
 80151d2:	f105 0823 	add.w	r8, r5, #35	; 0x23
 80151d6:	d90e      	bls.n	80151f6 <GUI_Text_XYZ_Measure+0x136>
	{
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 80151d8:	2163      	movs	r1, #99	; 0x63
 80151da:	f105 033b 	add.w	r3, r5, #59	; 0x3b
 80151de:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80151e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80151e6:	9100      	str	r1, [sp, #0]
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	b292      	uxth	r2, r2
 80151ec:	fa1f f188 	uxth.w	r1, r8
 80151f0:	b280      	uxth	r0, r0
 80151f2:	f006 faf2 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numY = number;
	number = 0;
	

			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80151f6:	fa1f f888 	uxth.w	r8, r8
 80151fa:	19a0      	adds	r0, r4, r6
 80151fc:	2303      	movs	r3, #3
 80151fe:	4641      	mov	r1, r8
 8015200:	aa04      	add	r2, sp, #16
 8015202:	b280      	uxth	r0, r0
	old_numY = number;
 8015204:	f889 7000 	strb.w	r7, [r9]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015208:	f006 fe32 	bl	801be70 <TFT_DisplayString>
	
			TFT_SetTextColor(TFT_White);
 801520c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015210:	f006 fd12 	bl	801bc38 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8015214:	2063      	movs	r0, #99	; 0x63
 8015216:	f006 fd15 	bl	801bc44 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 801521a:	4833      	ldr	r0, [pc, #204]	; (80152e8 <GUI_Text_XYZ_Measure+0x228>)
 801521c:	f006 fd06 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8015220:	4641      	mov	r1, r8
 8015222:	2237      	movs	r2, #55	; 0x37
 8015224:	4620      	mov	r0, r4
 8015226:	f006 fdcb 	bl	801bdc0 <TFT_DrawChar>
	
		delta_pos = 180;
	 dec = 10;
	
	TFT_SetFont(&Font26EN_arch_digit);
 801522a:	482b      	ldr	r0, [pc, #172]	; (80152d8 <GUI_Text_XYZ_Measure+0x218>)
 801522c:	f006 fcfe 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 8015230:	9a03      	ldr	r2, [sp, #12]
 8015232:	492a      	ldr	r1, [pc, #168]	; (80152dc <GUI_Text_XYZ_Measure+0x21c>)
 8015234:	a804      	add	r0, sp, #16
 8015236:	f009 fee3 	bl	801f000 <siprintf>
	 dec = 10;
 801523a:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 801523e:	f04f 0804 	mov.w	r8, #4
	number = 0;
 8015242:	2700      	movs	r7, #0
		delta_pos = 180;
 8015244:	26b4      	movs	r6, #180	; 0xb4
		for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueZ/(dec)) >= 1.0)
		{
			dec *= 10;
 8015246:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 8015248:	9b03      	ldr	r3, [sp, #12]
 801524a:	fbb3 f0f9 	udiv	r0, r3, r9
 801524e:	f7eb f969 	bl	8000524 <__aeabi_ui2d>
 8015252:	2200      	movs	r2, #0
 8015254:	4b22      	ldr	r3, [pc, #136]	; (80152e0 <GUI_Text_XYZ_Measure+0x220>)
 8015256:	f7eb fc61 	bl	8000b1c <__aeabi_dcmpge>
 801525a:	b128      	cbz	r0, 8015268 <GUI_Text_XYZ_Measure+0x1a8>
			delta_pos-=23;
 801525c:	3e17      	subs	r6, #23
			number++;
 801525e:	3701      	adds	r7, #1
			dec *= 10;
 8015260:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 8015264:	b2f6      	uxtb	r6, r6
			number++;
 8015266:	b2ff      	uxtb	r7, r7
 8015268:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 801526c:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8015270:	d1ea      	bne.n	8015248 <GUI_Text_XYZ_Measure+0x188>
		}
	}
	
	if(number < old_numZ )
 8015272:	4b1f      	ldr	r3, [pc, #124]	; (80152f0 <GUI_Text_XYZ_Measure+0x230>)
 8015274:	781a      	ldrb	r2, [r3, #0]
 8015276:	42ba      	cmp	r2, r7
 8015278:	4699      	mov	r9, r3
 801527a:	f105 0846 	add.w	r8, r5, #70	; 0x46
 801527e:	d90e      	bls.n	801529e <GUI_Text_XYZ_Measure+0x1de>
	{
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8015280:	2163      	movs	r1, #99	; 0x63
 8015282:	f105 035e 	add.w	r3, r5, #94	; 0x5e
 8015286:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801528a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801528e:	9100      	str	r1, [sp, #0]
 8015290:	b29b      	uxth	r3, r3
 8015292:	b292      	uxth	r2, r2
 8015294:	fa1f f188 	uxth.w	r1, r8
 8015298:	b280      	uxth	r0, r0
 801529a:	f006 fa9e 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numZ = number;
	number = 0;
	

			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 801529e:	fa1f f888 	uxth.w	r8, r8
 80152a2:	19a0      	adds	r0, r4, r6
 80152a4:	2303      	movs	r3, #3
 80152a6:	aa04      	add	r2, sp, #16
 80152a8:	4641      	mov	r1, r8
 80152aa:	b280      	uxth	r0, r0
	old_numZ = number;
 80152ac:	f889 7000 	strb.w	r7, [r9]
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 80152b0:	f006 fdde 	bl	801be70 <TFT_DisplayString>
	
			TFT_SetTextColor(TFT_White);
 80152b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80152b8:	f006 fcbe 	bl	801bc38 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 80152bc:	2063      	movs	r0, #99	; 0x63
 80152be:	f006 fcc1 	bl	801bc44 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 80152c2:	4809      	ldr	r0, [pc, #36]	; (80152e8 <GUI_Text_XYZ_Measure+0x228>)
 80152c4:	f006 fcb2 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 80152c8:	2238      	movs	r2, #56	; 0x38
 80152ca:	4641      	mov	r1, r8
 80152cc:	4620      	mov	r0, r4
 80152ce:	f006 fd77 	bl	801bdc0 <TFT_DrawChar>
}	
 80152d2:	b007      	add	sp, #28
 80152d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d8:	200001f0 	.word	0x200001f0
 80152dc:	080215d9 	.word	0x080215d9
 80152e0:	3ff00000 	.word	0x3ff00000
 80152e4:	20000241 	.word	0x20000241
 80152e8:	200001e8 	.word	0x200001e8
 80152ec:	20000242 	.word	0x20000242
 80152f0:	20000243 	.word	0x20000243

080152f4 <GUI_Text_xy_Measure>:

void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey)
{
 80152f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152f8:	b085      	sub	sp, #20
	char buffer[5] = {0};
 80152fa:	2300      	movs	r3, #0
{
 80152fc:	4606      	mov	r6, r0
	uint8_t	delta_pos = 60;
	
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font26EN_arch_digit);
 80152fe:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80153cc <GUI_Text_xy_Measure+0xd8>
{
 8015302:	edcd 0a00 	vstr	s1, [sp]
	TFT_SetTextColor(TFT_White);
 8015306:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801530a:	460c      	mov	r4, r1
	char buffer[5] = {0};
 801530c:	9302      	str	r3, [sp, #8]
 801530e:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8015312:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 8015316:	f006 fc8f 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801531a:	2063      	movs	r0, #99	; 0x63
 801531c:	f006 fc92 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015320:	4648      	mov	r0, r9
 8015322:	f006 fc83 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.4f", Valuex);
 8015326:	ed9d 0a01 	vldr	s0, [sp, #4]
 801532a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80153d0 <GUI_Text_xy_Measure+0xdc>

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);

	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font26EN_arch_small);
 801532e:	4f26      	ldr	r7, [pc, #152]	; (80153c8 <GUI_Text_xy_Measure+0xd4>)
	sprintf (buffer, "%.4f", Valuex);
 8015330:	ee10 0a10 	vmov	r0, s0
 8015334:	f7eb f918 	bl	8000568 <__aeabi_f2d>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015338:	f106 053c 	add.w	r5, r6, #60	; 0x3c
	sprintf (buffer, "%.4f", Valuex);
 801533c:	4602      	mov	r2, r0
 801533e:	460b      	mov	r3, r1
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015340:	b2ad      	uxth	r5, r5
	sprintf (buffer, "%.4f", Valuex);
 8015342:	4641      	mov	r1, r8
 8015344:	a802      	add	r0, sp, #8
 8015346:	f009 fe5b 	bl	801f000 <siprintf>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801534a:	2303      	movs	r3, #3
 801534c:	aa02      	add	r2, sp, #8
 801534e:	4621      	mov	r1, r4
 8015350:	4628      	mov	r0, r5
 8015352:	f006 fd8d 	bl	801be70 <TFT_DisplayString>
	TFT_SetTextColor(TFT_White);
 8015356:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801535a:	f006 fc6d 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801535e:	2063      	movs	r0, #99	; 0x63
 8015360:	f006 fc70 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8015364:	4638      	mov	r0, r7
 8015366:	f006 fc61 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 801536a:	2237      	movs	r2, #55	; 0x37
 801536c:	4621      	mov	r1, r4
 801536e:	4630      	mov	r0, r6
 8015370:	f006 fd26 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_digit);
 8015374:	4648      	mov	r0, r9
 8015376:	f006 fc59 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.4f", Valuey);
 801537a:	eddd 0a00 	vldr	s1, [sp]
 801537e:	ee10 0a90 	vmov	r0, s1
 8015382:	f7eb f8f1 	bl	8000568 <__aeabi_f2d>

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015386:	3423      	adds	r4, #35	; 0x23
	sprintf (buffer, "%.4f", Valuey);
 8015388:	4602      	mov	r2, r0
 801538a:	460b      	mov	r3, r1
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801538c:	b2a4      	uxth	r4, r4
	sprintf (buffer, "%.4f", Valuey);
 801538e:	4641      	mov	r1, r8
 8015390:	a802      	add	r0, sp, #8
 8015392:	f009 fe35 	bl	801f000 <siprintf>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015396:	2303      	movs	r3, #3
 8015398:	aa02      	add	r2, sp, #8
 801539a:	4621      	mov	r1, r4
 801539c:	4628      	mov	r0, r5
 801539e:	f006 fd67 	bl	801be70 <TFT_DisplayString>

	TFT_SetTextColor(TFT_White);
 80153a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80153a6:	f006 fc47 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80153aa:	2063      	movs	r0, #99	; 0x63
 80153ac:	f006 fc4a 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 80153b0:	4638      	mov	r0, r7
 80153b2:	f006 fc3b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y+35, 'y'-65);
 80153b6:	2238      	movs	r2, #56	; 0x38
 80153b8:	4621      	mov	r1, r4
 80153ba:	4630      	mov	r0, r6
 80153bc:	f006 fd00 	bl	801bdc0 <TFT_DrawChar>
	
}	
 80153c0:	b005      	add	sp, #20
 80153c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153c6:	bf00      	nop
 80153c8:	200001f8 	.word	0x200001f8
 80153cc:	200001f0 	.word	0x200001f0
 80153d0:	0802e6b7 	.word	0x0802e6b7

080153d4 <GUI_Text_uv_Measure>:

void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV)
{
 80153d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	char buffer[5] = {0};
 80153d8:	2300      	movs	r3, #0
{
 80153da:	4605      	mov	r5, r0
	uint8_t	delta_pos = 60;
	
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font26EN_arch_digit);
 80153dc:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80154c0 <GUI_Text_uv_Measure+0xec>
{
 80153e0:	edcd 0a00 	vstr	s1, [sp]
	TFT_SetTextColor(TFT_White);
 80153e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80153e8:	460c      	mov	r4, r1
	char buffer[5] = {0};
 80153ea:	9302      	str	r3, [sp, #8]
 80153ec:	f88d 300c 	strb.w	r3, [sp, #12]
{
 80153f0:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 80153f4:	f006 fc20 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80153f8:	2063      	movs	r0, #99	; 0x63
 80153fa:	f006 fc23 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80153fe:	4650      	mov	r0, sl
 8015400:	f006 fc14 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.4f", ValueU);
 8015404:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015408:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80154c4 <GUI_Text_uv_Measure+0xf0>

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
	
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font26EN_arch_small);
 801540c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80154c8 <GUI_Text_uv_Measure+0xf4>
	sprintf (buffer, "%.4f", ValueU);
 8015410:	ee10 0a10 	vmov	r0, s0
 8015414:	f7eb f8a8 	bl	8000568 <__aeabi_f2d>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015418:	f105 073c 	add.w	r7, r5, #60	; 0x3c
	sprintf (buffer, "%.4f", ValueU);
 801541c:	4602      	mov	r2, r0
 801541e:	460b      	mov	r3, r1
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015420:	b2bf      	uxth	r7, r7
	sprintf (buffer, "%.4f", ValueU);
 8015422:	4649      	mov	r1, r9
 8015424:	a802      	add	r0, sp, #8
 8015426:	f009 fdeb 	bl	801f000 <siprintf>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801542a:	2303      	movs	r3, #3
 801542c:	aa02      	add	r2, sp, #8
 801542e:	4621      	mov	r1, r4
 8015430:	4638      	mov	r0, r7
 8015432:	f006 fd1d 	bl	801be70 <TFT_DisplayString>
	TFT_SetTextColor(TFT_White);
 8015436:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801543a:	f006 fbfd 	bl	801bc38 <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 801543e:	f105 060f 	add.w	r6, r5, #15
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015442:	2063      	movs	r0, #99	; 0x63
 8015444:	f006 fbfe 	bl	801bc44 <TFT_SetBackColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8015448:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font26EN_arch_small);
 801544a:	4640      	mov	r0, r8
 801544c:	f006 fbee 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8015450:	4621      	mov	r1, r4
 8015452:	4630      	mov	r0, r6
 8015454:	223a      	movs	r2, #58	; 0x3a
 8015456:	f006 fcb3 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
 801545a:	2234      	movs	r2, #52	; 0x34
 801545c:	4621      	mov	r1, r4
 801545e:	4628      	mov	r0, r5
 8015460:	f006 fcae 	bl	801bdc0 <TFT_DrawChar>

	TFT_SetFont(&Font26EN_arch_digit);
 8015464:	4650      	mov	r0, sl
 8015466:	f006 fbe1 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.4f", ValueV);
 801546a:	eddd 0a00 	vldr	s1, [sp]
 801546e:	ee10 0a90 	vmov	r0, s1
 8015472:	f7eb f879 	bl	8000568 <__aeabi_f2d>

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015476:	3423      	adds	r4, #35	; 0x23
 8015478:	b2a4      	uxth	r4, r4
	sprintf (buffer, "%.4f", ValueV);
 801547a:	4602      	mov	r2, r0
 801547c:	460b      	mov	r3, r1
 801547e:	a802      	add	r0, sp, #8
 8015480:	4649      	mov	r1, r9
 8015482:	f009 fdbd 	bl	801f000 <siprintf>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015486:	2303      	movs	r3, #3
 8015488:	aa02      	add	r2, sp, #8
 801548a:	4621      	mov	r1, r4
 801548c:	4638      	mov	r0, r7
 801548e:	f006 fcef 	bl	801be70 <TFT_DisplayString>

	TFT_SetTextColor(TFT_White);
 8015492:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015496:	f006 fbcf 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801549a:	2063      	movs	r0, #99	; 0x63
 801549c:	f006 fbd2 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 80154a0:	4640      	mov	r0, r8
 80154a2:	f006 fbc3 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 80154a6:	4621      	mov	r1, r4
 80154a8:	4630      	mov	r0, r6
 80154aa:	223a      	movs	r2, #58	; 0x3a
 80154ac:	f006 fc88 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 80154b0:	2235      	movs	r2, #53	; 0x35
 80154b2:	4621      	mov	r1, r4
 80154b4:	4628      	mov	r0, r5
 80154b6:	f006 fc83 	bl	801bdc0 <TFT_DrawChar>
}	
 80154ba:	b004      	add	sp, #16
 80154bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154c0:	200001f0 	.word	0x200001f0
 80154c4:	0802e6b7 	.word	0x0802e6b7
 80154c8:	200001f8 	.word	0x200001f8

080154cc <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value)
{	
 80154cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d0:	b087      	sub	sp, #28

	char buffer[9] = {0};
 80154d2:	2600      	movs	r6, #0
{	
 80154d4:	4605      	mov	r5, r0
	uint8_t	delta_pos = 160, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80154d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	
 80154da:	460c      	mov	r4, r1
 80154dc:	4692      	mov	sl, r2
	char buffer[9] = {0};
 80154de:	9603      	str	r6, [sp, #12]
 80154e0:	9604      	str	r6, [sp, #16]
 80154e2:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80154e6:	f006 fba7 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80154ea:	2063      	movs	r0, #99	; 0x63
 80154ec:	f006 fbaa 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80154f0:	4849      	ldr	r0, [pc, #292]	; (8015618 <GUI_Text_CCT_Measure+0x14c>)
 80154f2:	f006 fb9b 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 80154f6:	4652      	mov	r2, sl
 80154f8:	4948      	ldr	r1, [pc, #288]	; (801561c <GUI_Text_CCT_Measure+0x150>)
 80154fa:	a803      	add	r0, sp, #12
 80154fc:	f009 fd80 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8015500:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", Value);
 8015504:	f04f 0804 	mov.w	r8, #4
	uint8_t	delta_pos = 160, number = 0;
 8015508:	27a0      	movs	r7, #160	; 0xa0
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
		{
			dec *= 10;
 801550a:	46cb      	mov	fp, r9
		if((Value/(dec)) >= 1.0)
 801550c:	fbba f0f9 	udiv	r0, sl, r9
 8015510:	f7eb f808 	bl	8000524 <__aeabi_ui2d>
 8015514:	2200      	movs	r2, #0
 8015516:	4b42      	ldr	r3, [pc, #264]	; (8015620 <GUI_Text_CCT_Measure+0x154>)
 8015518:	f7eb fb00 	bl	8000b1c <__aeabi_dcmpge>
 801551c:	b128      	cbz	r0, 801552a <GUI_Text_CCT_Measure+0x5e>
			delta_pos-=23;
 801551e:	3f17      	subs	r7, #23
			number++;
 8015520:	3601      	adds	r6, #1
			dec *= 10;
 8015522:	fb0b f909 	mul.w	r9, fp, r9
			delta_pos-=23;
 8015526:	b2ff      	uxtb	r7, r7
			number++;
 8015528:	b2f6      	uxtb	r6, r6
 801552a:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 801552e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8015532:	d1eb      	bne.n	801550c <GUI_Text_CCT_Measure+0x40>
		}
	}
	
	if(number < old_numCCT )
 8015534:	4b3b      	ldr	r3, [pc, #236]	; (8015624 <GUI_Text_CCT_Measure+0x158>)
 8015536:	781a      	ldrb	r2, [r3, #0]
 8015538:	42b2      	cmp	r2, r6
 801553a:	4698      	mov	r8, r3
 801553c:	d90d      	bls.n	801555a <GUI_Text_CCT_Measure+0x8e>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 801553e:	2163      	movs	r1, #99	; 0x63
 8015540:	f104 0319 	add.w	r3, r4, #25
 8015544:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015548:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801554c:	9100      	str	r1, [sp, #0]
 801554e:	b29b      	uxth	r3, r3
 8015550:	b292      	uxth	r2, r2
 8015552:	4621      	mov	r1, r4
 8015554:	b280      	uxth	r0, r0
 8015556:	f006 f940 	bl	801b7da <TFT_FillRectangle>
	} 
	old_numCCT = number;
 801555a:	f888 6000 	strb.w	r6, [r8]
	
	if(Value == 0){TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+100, Y+4, 'N'-33);TFT_DrawChar(X+125, Y+4, 'A'-33);TFT_DrawChar(X+150, Y+4, 'N'-33);}else{
 801555e:	f1ba 0f00 	cmp.w	sl, #0
 8015562:	d143      	bne.n	80155ec <GUI_Text_CCT_Measure+0x120>
 8015564:	4830      	ldr	r0, [pc, #192]	; (8015628 <GUI_Text_CCT_Measure+0x15c>)
 8015566:	1d26      	adds	r6, r4, #4
 8015568:	f006 fb60 	bl	801bc2c <TFT_SetFont>
 801556c:	b2b6      	uxth	r6, r6
 801556e:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8015572:	222d      	movs	r2, #45	; 0x2d
 8015574:	4631      	mov	r1, r6
 8015576:	b280      	uxth	r0, r0
 8015578:	f006 fc22 	bl	801bdc0 <TFT_DrawChar>
 801557c:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8015580:	2220      	movs	r2, #32
 8015582:	4631      	mov	r1, r6
 8015584:	b280      	uxth	r0, r0
 8015586:	f006 fc1b 	bl	801bdc0 <TFT_DrawChar>
 801558a:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801558e:	222d      	movs	r2, #45	; 0x2d
 8015590:	4631      	mov	r1, r6
 8015592:	b280      	uxth	r0, r0
 8015594:	f006 fc14 	bl	801bdc0 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE);}
	
	TFT_SetTextColor(TFT_White);
 8015598:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801559c:	f006 fb4c 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80155a0:	2063      	movs	r0, #99	; 0x63
 80155a2:	f006 fb4f 	bl	801bc44 <TFT_SetBackColor>
	if(Language_status == Ru ){
 80155a6:	4b21      	ldr	r3, [pc, #132]	; (801562c <GUI_Text_CCT_Measure+0x160>)
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	f105 06c8 	add.w	r6, r5, #200	; 0xc8
 80155ae:	bb33      	cbnz	r3, 80155fe <GUI_Text_CCT_Measure+0x132>
			TFT_SetFont(&Font26RU_arch_big);
 80155b0:	481f      	ldr	r0, [pc, #124]	; (8015630 <GUI_Text_CCT_Measure+0x164>)
 80155b2:	f006 fb3b 	bl	801bc2c <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 80155b6:	2289      	movs	r2, #137	; 0x89
 80155b8:	4621      	mov	r1, r4
 80155ba:	4628      	mov	r0, r5
 80155bc:	f006 fb48 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 80155c0:	f105 0018 	add.w	r0, r5, #24
 80155c4:	2295      	movs	r2, #149	; 0x95
 80155c6:	4621      	mov	r1, r4
 80155c8:	b280      	uxth	r0, r0
 80155ca:	f006 fb41 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 80155ce:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 80155d2:	2291      	movs	r2, #145	; 0x91
 80155d4:	4621      	mov	r1, r4
 80155d6:	b280      	uxth	r0, r0
 80155d8:	f006 fb3a 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+200, Y, 'К'-17);
 80155dc:	2289      	movs	r2, #137	; 0x89
 80155de:	4621      	mov	r1, r4
 80155e0:	b2b0      	uxth	r0, r6
 80155e2:	f006 fb35 	bl	801bc50 <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+200, Y+4, 'K'-33);
		}	
}
 80155e6:	b007      	add	sp, #28
 80155e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE);}
 80155ec:	1ca1      	adds	r1, r4, #2
 80155ee:	19e8      	adds	r0, r5, r7
 80155f0:	2303      	movs	r3, #3
 80155f2:	aa03      	add	r2, sp, #12
 80155f4:	b289      	uxth	r1, r1
 80155f6:	b280      	uxth	r0, r0
 80155f8:	f006 fc3a 	bl	801be70 <TFT_DisplayString>
 80155fc:	e7cc      	b.n	8015598 <GUI_Text_CCT_Measure+0xcc>
			GUI_TextEn_CCT(X, Y+4);
 80155fe:	3404      	adds	r4, #4
 8015600:	b2a4      	uxth	r4, r4
 8015602:	4621      	mov	r1, r4
 8015604:	4628      	mov	r0, r5
 8015606:	f002 f833 	bl	8017670 <GUI_TextEn_CCT>
			TFT_DrawChar(X+200, Y+4, 'K'-33);
 801560a:	222a      	movs	r2, #42	; 0x2a
 801560c:	4621      	mov	r1, r4
 801560e:	b2b0      	uxth	r0, r6
 8015610:	f006 fbd6 	bl	801bdc0 <TFT_DrawChar>
}
 8015614:	e7e7      	b.n	80155e6 <GUI_Text_CCT_Measure+0x11a>
 8015616:	bf00      	nop
 8015618:	200001f0 	.word	0x200001f0
 801561c:	080215d9 	.word	0x080215d9
 8015620:	3ff00000 	.word	0x3ff00000
 8015624:	20000239 	.word	0x20000239
 8015628:	200001e8 	.word	0x200001e8
 801562c:	20004ca3 	.word	0x20004ca3
 8015630:	20000200 	.word	0x20000200

08015634 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value)
{	
 8015634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015638:	ed2d 8b02 	vpush	{d8}
 801563c:	b086      	sub	sp, #24

	char buffer[9] = {0};
 801563e:	2400      	movs	r4, #0
{	
 8015640:	4605      	mov	r5, r0
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015642:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	
 8015646:	eeb0 8a40 	vmov.f32	s16, s0
 801564a:	460f      	mov	r7, r1
	char buffer[9] = {0};
 801564c:	9403      	str	r4, [sp, #12]
 801564e:	9404      	str	r4, [sp, #16]
 8015650:	f88d 4014 	strb.w	r4, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015654:	f006 faf0 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015658:	2063      	movs	r0, #99	; 0x63
 801565a:	f006 faf3 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801565e:	483b      	ldr	r0, [pc, #236]	; (801574c <GUI_Text_lambdaD_Measure+0x118>)
 8015660:	f006 fae4 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8015664:	ee18 0a10 	vmov	r0, s16
 8015668:	f7ea ff7e 	bl	8000568 <__aeabi_f2d>
 801566c:	4602      	mov	r2, r0
 801566e:	460b      	mov	r3, r1
 8015670:	a803      	add	r0, sp, #12
 8015672:	4937      	ldr	r1, [pc, #220]	; (8015750 <GUI_Text_lambdaD_Measure+0x11c>)
 8015674:	f009 fcc4 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8015678:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 801567a:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 801567c:	267a      	movs	r6, #122	; 0x7a

		for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 801567e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 8015682:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015684:	ee07 2a10 	vmov	s14, r2
 8015688:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801568c:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015698:	db04      	blt.n	80156a4 <GUI_Text_lambdaD_Measure+0x70>
			delta_pos-=23;
 801569a:	3e17      	subs	r6, #23
			number++;
 801569c:	3401      	adds	r4, #1
			dec *= 10;
 801569e:	434a      	muls	r2, r1
			delta_pos-=23;
 80156a0:	b2f6      	uxtb	r6, r6
			number++;
 80156a2:	b2e4      	uxtb	r4, r4
 80156a4:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 80156a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80156aa:	d1eb      	bne.n	8015684 <GUI_Text_lambdaD_Measure+0x50>
		}
	}
	
	if(number < old_lambdaD )
 80156ac:	4b29      	ldr	r3, [pc, #164]	; (8015754 <GUI_Text_lambdaD_Measure+0x120>)
 80156ae:	781a      	ldrb	r2, [r3, #0]
 80156b0:	42a2      	cmp	r2, r4
 80156b2:	4698      	mov	r8, r3
 80156b4:	d90d      	bls.n	80156d2 <GUI_Text_lambdaD_Measure+0x9e>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80156b6:	2163      	movs	r1, #99	; 0x63
 80156b8:	f107 0319 	add.w	r3, r7, #25
 80156bc:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80156c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80156c4:	9100      	str	r1, [sp, #0]
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	b292      	uxth	r2, r2
 80156ca:	4639      	mov	r1, r7
 80156cc:	b280      	uxth	r0, r0
 80156ce:	f006 f884 	bl	801b7da <TFT_FillRectangle>
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80156d2:	19a8      	adds	r0, r5, r6
 80156d4:	2303      	movs	r3, #3
 80156d6:	aa03      	add	r2, sp, #12
 80156d8:	4639      	mov	r1, r7
 80156da:	b280      	uxth	r0, r0
	old_lambdaD = number;
 80156dc:	f888 4000 	strb.w	r4, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80156e0:	f006 fbc6 	bl	801be70 <TFT_DisplayString>
	
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 80156e4:	1d7c      	adds	r4, r7, #5
	TFT_SetTextColor(TFT_White);
 80156e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80156ea:	f006 faa5 	bl	801bc38 <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 80156ee:	b2a4      	uxth	r4, r4
	TFT_SetBackColor(TFT_Black_Bkgr);
 80156f0:	2063      	movs	r0, #99	; 0x63
 80156f2:	f006 faa7 	bl	801bc44 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 80156f6:	4628      	mov	r0, r5
 80156f8:	4621      	mov	r1, r4
 80156fa:	f001 fa97 	bl	8016c2c <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 80156fe:	4b16      	ldr	r3, [pc, #88]	; (8015758 <GUI_Text_lambdaD_Measure+0x124>)
 8015700:	781b      	ldrb	r3, [r3, #0]
 8015702:	f105 06c8 	add.w	r6, r5, #200	; 0xc8
 8015706:	35d8      	adds	r5, #216	; 0xd8
 8015708:	b98b      	cbnz	r3, 801572e <GUI_Text_lambdaD_Measure+0xfa>
			TFT_SetFont(&Font26RU_arch_small);
 801570a:	4814      	ldr	r0, [pc, #80]	; (801575c <GUI_Text_lambdaD_Measure+0x128>)
 801570c:	f006 fa8e 	bl	801bc2c <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8015710:	22bd      	movs	r2, #189	; 0xbd
 8015712:	4621      	mov	r1, r4
 8015714:	b2b0      	uxth	r0, r6
 8015716:	f006 fa9b 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 801571a:	22bc      	movs	r2, #188	; 0xbc
 801571c:	4621      	mov	r1, r4
 801571e:	b2a8      	uxth	r0, r5
 8015720:	f006 fa96 	bl	801bc50 <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y, 'n');
			TFT_DrawChar(X+216, Y, 'm');
		}	

}
 8015724:	b006      	add	sp, #24
 8015726:	ecbd 8b02 	vpop	{d8}
 801572a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_SetFont(&Font16EN_arch_small);
 801572e:	480c      	ldr	r0, [pc, #48]	; (8015760 <GUI_Text_lambdaD_Measure+0x12c>)
 8015730:	f006 fa7c 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X+200, Y, 'n');
 8015734:	4639      	mov	r1, r7
 8015736:	b2b0      	uxth	r0, r6
 8015738:	226e      	movs	r2, #110	; 0x6e
 801573a:	f006 fb41 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y, 'm');
 801573e:	226d      	movs	r2, #109	; 0x6d
 8015740:	4639      	mov	r1, r7
 8015742:	b2a8      	uxth	r0, r5
 8015744:	f006 fb3c 	bl	801bdc0 <TFT_DrawChar>
}
 8015748:	e7ec      	b.n	8015724 <GUI_Text_lambdaD_Measure+0xf0>
 801574a:	bf00      	nop
 801574c:	200001f0 	.word	0x200001f0
 8015750:	0802e6ad 	.word	0x0802e6ad
 8015754:	20000236 	.word	0x20000236
 8015758:	20004ca3 	.word	0x20004ca3
 801575c:	20000208 	.word	0x20000208
 8015760:	200001c0 	.word	0x200001c0

08015764 <GUI_Text_lambdaC_Measure>:
uint8_t old_lambdaC = 10;
void GUI_Text_lambdaC_Measure(uint16_t X, uint16_t Y, float Value)
{	
 8015764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015768:	ed2d 8b02 	vpush	{d8}
 801576c:	b086      	sub	sp, #24

	char buffer[9] = {0};
 801576e:	2400      	movs	r4, #0
{	
 8015770:	4605      	mov	r5, r0
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015772:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	
 8015776:	eeb0 8a40 	vmov.f32	s16, s0
 801577a:	460f      	mov	r7, r1
	char buffer[9] = {0};
 801577c:	9403      	str	r4, [sp, #12]
 801577e:	9404      	str	r4, [sp, #16]
 8015780:	f88d 4014 	strb.w	r4, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015784:	f006 fa58 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015788:	2063      	movs	r0, #99	; 0x63
 801578a:	f006 fa5b 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801578e:	483b      	ldr	r0, [pc, #236]	; (801587c <GUI_Text_lambdaC_Measure+0x118>)
 8015790:	f006 fa4c 	bl	801bc2c <TFT_SetFont>
	
	sprintf (buffer, "%.1f", Value);
 8015794:	ee18 0a10 	vmov	r0, s16
 8015798:	f7ea fee6 	bl	8000568 <__aeabi_f2d>
 801579c:	4602      	mov	r2, r0
 801579e:	460b      	mov	r3, r1
 80157a0:	a803      	add	r0, sp, #12
 80157a2:	4937      	ldr	r1, [pc, #220]	; (8015880 <GUI_Text_lambdaC_Measure+0x11c>)
 80157a4:	f009 fc2c 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 80157a8:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 80157aa:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 80157ac:	267a      	movs	r6, #122	; 0x7a
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80157ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 80157b2:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80157b4:	ee07 2a10 	vmov	s14, r2
 80157b8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80157bc:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80157c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c8:	db04      	blt.n	80157d4 <GUI_Text_lambdaC_Measure+0x70>
			delta_pos-=23;
 80157ca:	3e17      	subs	r6, #23
			number++;
 80157cc:	3401      	adds	r4, #1
			dec *= 10;
 80157ce:	434a      	muls	r2, r1
			delta_pos-=23;
 80157d0:	b2f6      	uxtb	r6, r6
			number++;
 80157d2:	b2e4      	uxtb	r4, r4
 80157d4:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80157d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80157da:	d1eb      	bne.n	80157b4 <GUI_Text_lambdaC_Measure+0x50>
		}
	}
	
	if(number < old_lambdaC )
 80157dc:	4b29      	ldr	r3, [pc, #164]	; (8015884 <GUI_Text_lambdaC_Measure+0x120>)
 80157de:	781a      	ldrb	r2, [r3, #0]
 80157e0:	42a2      	cmp	r2, r4
 80157e2:	4698      	mov	r8, r3
 80157e4:	d90d      	bls.n	8015802 <GUI_Text_lambdaC_Measure+0x9e>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80157e6:	2163      	movs	r1, #99	; 0x63
 80157e8:	f107 0319 	add.w	r3, r7, #25
 80157ec:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80157f0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80157f4:	9100      	str	r1, [sp, #0]
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	b292      	uxth	r2, r2
 80157fa:	4639      	mov	r1, r7
 80157fc:	b280      	uxth	r0, r0
 80157fe:	f005 ffec 	bl	801b7da <TFT_FillRectangle>
	} 
	old_lambdaC = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015802:	19a8      	adds	r0, r5, r6
 8015804:	2303      	movs	r3, #3
 8015806:	aa03      	add	r2, sp, #12
 8015808:	4639      	mov	r1, r7
 801580a:	b280      	uxth	r0, r0
	old_lambdaC = number;
 801580c:	f888 4000 	strb.w	r4, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015810:	f006 fb2e 	bl	801be70 <TFT_DisplayString>
	
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_c(X, Y+5);
 8015814:	1d7c      	adds	r4, r7, #5
	TFT_SetTextColor(TFT_White);
 8015816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801581a:	f006 fa0d 	bl	801bc38 <TFT_SetTextColor>
	GUI_Text_lambda_c(X, Y+5);
 801581e:	b2a4      	uxth	r4, r4
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015820:	2063      	movs	r0, #99	; 0x63
 8015822:	f006 fa0f 	bl	801bc44 <TFT_SetBackColor>
	GUI_Text_lambda_c(X, Y+5);
 8015826:	4628      	mov	r0, r5
 8015828:	4621      	mov	r1, r4
 801582a:	f001 fa23 	bl	8016c74 <GUI_Text_lambda_c>
	if(Language_status == Ru ){
 801582e:	4b16      	ldr	r3, [pc, #88]	; (8015888 <GUI_Text_lambdaC_Measure+0x124>)
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	f105 06c8 	add.w	r6, r5, #200	; 0xc8
 8015836:	35d8      	adds	r5, #216	; 0xd8
 8015838:	b98b      	cbnz	r3, 801585e <GUI_Text_lambdaC_Measure+0xfa>
			TFT_SetFont(&Font26RU_arch_small);
 801583a:	4814      	ldr	r0, [pc, #80]	; (801588c <GUI_Text_lambdaC_Measure+0x128>)
 801583c:	f006 f9f6 	bl	801bc2c <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8015840:	22bd      	movs	r2, #189	; 0xbd
 8015842:	4621      	mov	r1, r4
 8015844:	b2b0      	uxth	r0, r6
 8015846:	f006 fa03 	bl	801bc50 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 801584a:	22bc      	movs	r2, #188	; 0xbc
 801584c:	4621      	mov	r1, r4
 801584e:	b2a8      	uxth	r0, r5
 8015850:	f006 f9fe 	bl	801bc50 <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y, 'n');
			TFT_DrawChar(X+216, Y, 'm');
		}	

}
 8015854:	b006      	add	sp, #24
 8015856:	ecbd 8b02 	vpop	{d8}
 801585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_SetFont(&Font16EN_arch_small);
 801585e:	480c      	ldr	r0, [pc, #48]	; (8015890 <GUI_Text_lambdaC_Measure+0x12c>)
 8015860:	f006 f9e4 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X+200, Y, 'n');
 8015864:	4639      	mov	r1, r7
 8015866:	b2b0      	uxth	r0, r6
 8015868:	226e      	movs	r2, #110	; 0x6e
 801586a:	f006 faa9 	bl	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y, 'm');
 801586e:	226d      	movs	r2, #109	; 0x6d
 8015870:	4639      	mov	r1, r7
 8015872:	b2a8      	uxth	r0, r5
 8015874:	f006 faa4 	bl	801bdc0 <TFT_DrawChar>
}
 8015878:	e7ec      	b.n	8015854 <GUI_Text_lambdaC_Measure+0xf0>
 801587a:	bf00      	nop
 801587c:	200001f0 	.word	0x200001f0
 8015880:	0802e6ad 	.word	0x0802e6ad
 8015884:	20000235 	.word	0x20000235
 8015888:	20004ca3 	.word	0x20004ca3
 801588c:	20000208 	.word	0x20000208
 8015890:	200001c0 	.word	0x200001c0

08015894 <GUI_Text_deltaE_Measure>:


uint8_t old_deltaE = 10;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value)
{	
 8015894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015898:	ed2d 8b02 	vpush	{d8}
 801589c:	b087      	sub	sp, #28

	char buffer[9] = {0};
 801589e:	2700      	movs	r7, #0
{	
 80158a0:	4604      	mov	r4, r0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80158a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	
 80158a6:	eeb0 8a40 	vmov.f32	s16, s0
 80158aa:	460d      	mov	r5, r1
	char buffer[9] = {0};
 80158ac:	9703      	str	r7, [sp, #12]
 80158ae:	9704      	str	r7, [sp, #16]
 80158b0:	f88d 7014 	strb.w	r7, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80158b4:	f006 f9c0 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80158b8:	2063      	movs	r0, #99	; 0x63
 80158ba:	f006 f9c3 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80158be:	483c      	ldr	r0, [pc, #240]	; (80159b0 <GUI_Text_deltaE_Measure+0x11c>)
 80158c0:	f006 f9b4 	bl	801bc2c <TFT_SetFont>
	
	if(Value < 0){Value *= -1; sign = 1;}
 80158c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80158c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158cc:	bf48      	it	mi
 80158ce:	eeb1 8a48 	vnegmi.f32	s16, s16
	
	sprintf (buffer, "%.2f", Value);
 80158d2:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 80158d6:	bf48      	it	mi
 80158d8:	2701      	movmi	r7, #1
	sprintf (buffer, "%.2f", Value);
 80158da:	f7ea fe45 	bl	8000568 <__aeabi_f2d>
 80158de:	4602      	mov	r2, r0
 80158e0:	460b      	mov	r3, r1
 80158e2:	a803      	add	r0, sp, #12
 80158e4:	4933      	ldr	r1, [pc, #204]	; (80159b4 <GUI_Text_deltaE_Measure+0x120>)
 80158e6:	f009 fb8b 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 80158ea:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 80158ec:	2304      	movs	r3, #4
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 80158ee:	f04f 0800 	mov.w	r8, #0
 80158f2:	268c      	movs	r6, #140	; 0x8c
	
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80158f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 80158f8:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80158fa:	ee07 2a10 	vmov	s14, r2
 80158fe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015902:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590e:	db06      	blt.n	801591e <GUI_Text_deltaE_Measure+0x8a>
			delta_pos-=23;
 8015910:	3e17      	subs	r6, #23
			number++;
 8015912:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015916:	434a      	muls	r2, r1
			delta_pos-=23;
 8015918:	b2f6      	uxtb	r6, r6
			number++;
 801591a:	fa5f f888 	uxtb.w	r8, r8
 801591e:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015920:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015924:	d1e9      	bne.n	80158fa <GUI_Text_deltaE_Measure+0x66>
		}
	}
	
	if(number < old_deltaE )
 8015926:	4b24      	ldr	r3, [pc, #144]	; (80159b8 <GUI_Text_deltaE_Measure+0x124>)
 8015928:	781a      	ldrb	r2, [r3, #0]
 801592a:	4542      	cmp	r2, r8
 801592c:	4699      	mov	r9, r3
 801592e:	d90d      	bls.n	801594c <GUI_Text_deltaE_Measure+0xb8>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015930:	2163      	movs	r1, #99	; 0x63
 8015932:	f105 0319 	add.w	r3, r5, #25
 8015936:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801593a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801593e:	9100      	str	r1, [sp, #0]
 8015940:	b29b      	uxth	r3, r3
 8015942:	b292      	uxth	r2, r2
 8015944:	4629      	mov	r1, r5
 8015946:	b280      	uxth	r0, r0
 8015948:	f005 ff47 	bl	801b7da <TFT_FillRectangle>
	} 
	old_deltaE = number;
 801594c:	f889 8000 	strb.w	r8, [r9]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8015950:	b13f      	cbz	r7, 8015962 <GUI_Text_deltaE_Measure+0xce>
 8015952:	f1a4 0012 	sub.w	r0, r4, #18
 8015956:	4430      	add	r0, r6
 8015958:	222d      	movs	r2, #45	; 0x2d
 801595a:	4629      	mov	r1, r5
 801595c:	b280      	uxth	r0, r0
 801595e:	f006 fa2f 	bl	801bdc0 <TFT_DrawChar>

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015962:	19a0      	adds	r0, r4, r6
 8015964:	2303      	movs	r3, #3
 8015966:	aa03      	add	r2, sp, #12
 8015968:	4629      	mov	r1, r5
 801596a:	b280      	uxth	r0, r0
 801596c:	f006 fa80 	bl	801be70 <TFT_DisplayString>
	
	TFT_SetTextColor(TFT_White);
 8015970:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015974:	f006 f960 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015978:	2063      	movs	r0, #99	; 0x63
 801597a:	f006 f963 	bl	801bc44 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 801597e:	480f      	ldr	r0, [pc, #60]	; (80159bc <GUI_Text_deltaE_Measure+0x128>)
 8015980:	f006 f954 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 8015984:	1da9      	adds	r1, r5, #6
 8015986:	2280      	movs	r2, #128	; 0x80
 8015988:	b289      	uxth	r1, r1
 801598a:	4620      	mov	r0, r4
 801598c:	f006 fa18 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015990:	480b      	ldr	r0, [pc, #44]	; (80159c0 <GUI_Text_deltaE_Measure+0x12c>)
 8015992:	f006 f94b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 8015996:	1ca9      	adds	r1, r5, #2
 8015998:	f104 0012 	add.w	r0, r4, #18
 801599c:	2224      	movs	r2, #36	; 0x24
 801599e:	b289      	uxth	r1, r1
 80159a0:	b280      	uxth	r0, r0
 80159a2:	f006 fa0d 	bl	801bdc0 <TFT_DrawChar>

}
 80159a6:	b007      	add	sp, #28
 80159a8:	ecbd 8b02 	vpop	{d8}
 80159ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159b0:	200001f0 	.word	0x200001f0
 80159b4:	0802e6b2 	.word	0x0802e6b2
 80159b8:	20000234 	.word	0x20000234
 80159bc:	200001b0 	.word	0x200001b0
 80159c0:	200001e8 	.word	0x200001e8

080159c4 <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER)
{
 80159c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159c8:	ed2d 8b04 	vpush	{d8-d9}
 80159cc:	b087      	sub	sp, #28
	char buffer[9] = {0};
 80159ce:	2600      	movs	r6, #0
{
 80159d0:	4607      	mov	r7, r0
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80159d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80159d6:	eef0 8a40 	vmov.f32	s17, s0
 80159da:	eeb0 8a60 	vmov.f32	s16, s1
 80159de:	460c      	mov	r4, r1
	char buffer[9] = {0};
 80159e0:	9603      	str	r6, [sp, #12]
 80159e2:	9604      	str	r6, [sp, #16]
 80159e4:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80159e8:	f006 f926 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80159ec:	2063      	movs	r0, #99	; 0x63
 80159ee:	f006 f929 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80159f2:	485a      	ldr	r0, [pc, #360]	; (8015b5c <GUI_Text_EbEr_Measure+0x198>)
 80159f4:	f006 f91a 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 80159f8:	ee18 0a90 	vmov	r0, s17
 80159fc:	f7ea fdb4 	bl	8000568 <__aeabi_f2d>
 8015a00:	4602      	mov	r2, r0
 8015a02:	460b      	mov	r3, r1
 8015a04:	a803      	add	r0, sp, #12
 8015a06:	4956      	ldr	r1, [pc, #344]	; (8015b60 <GUI_Text_EbEr_Measure+0x19c>)
 8015a08:	f009 fafa 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8015a0c:	f04f 080a 	mov.w	r8, #10
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueEB/(dec)) >= 1.0)
 8015a10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 8015a14:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8015a16:	2596      	movs	r5, #150	; 0x96
 8015a18:	eeb0 9a67 	vmov.f32	s18, s15
		{
			dec *= 10;
 8015a1c:	4642      	mov	r2, r8
		if((ValueEB/(dec)) >= 1.0)
 8015a1e:	ee07 8a10 	vmov	s14, r8
 8015a22:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015a26:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8015a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a32:	db05      	blt.n	8015a40 <GUI_Text_EbEr_Measure+0x7c>
			delta_pos-=23;
 8015a34:	3d17      	subs	r5, #23
			number++;
 8015a36:	3601      	adds	r6, #1
			dec *= 10;
 8015a38:	fb02 f808 	mul.w	r8, r2, r8
			delta_pos-=23;
 8015a3c:	b2ed      	uxtb	r5, r5
			number++;
 8015a3e:	b2f6      	uxtb	r6, r6
 8015a40:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015a42:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015a46:	d1ea      	bne.n	8015a1e <GUI_Text_EbEr_Measure+0x5a>
		}
	}
	
	if(number < old_num_EB )
 8015a48:	4b46      	ldr	r3, [pc, #280]	; (8015b64 <GUI_Text_EbEr_Measure+0x1a0>)
 8015a4a:	781a      	ldrb	r2, [r3, #0]
 8015a4c:	42b2      	cmp	r2, r6
 8015a4e:	4699      	mov	r9, r3
 8015a50:	d90d      	bls.n	8015a6e <GUI_Text_EbEr_Measure+0xaa>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015a52:	2163      	movs	r1, #99	; 0x63
 8015a54:	f104 0319 	add.w	r3, r4, #25
 8015a58:	f107 02c5 	add.w	r2, r7, #197	; 0xc5
 8015a5c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8015a60:	9100      	str	r1, [sp, #0]
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	b292      	uxth	r2, r2
 8015a66:	4621      	mov	r1, r4
 8015a68:	b280      	uxth	r0, r0
 8015a6a:	f005 feb6 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_EB = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015a6e:	1978      	adds	r0, r7, r5
 8015a70:	2303      	movs	r3, #3
 8015a72:	aa03      	add	r2, sp, #12
 8015a74:	4621      	mov	r1, r4
 8015a76:	b280      	uxth	r0, r0
	old_num_EB = number;
 8015a78:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015a7c:	f006 f9f8 	bl	801be70 <TFT_DisplayString>
	
	sprintf (buffer, "%.2f", ValueER);
 8015a80:	ee18 0a10 	vmov	r0, s16
 8015a84:	f7ea fd70 	bl	8000568 <__aeabi_f2d>
 8015a88:	4602      	mov	r2, r0
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	a803      	add	r0, sp, #12
 8015a8e:	4934      	ldr	r1, [pc, #208]	; (8015b60 <GUI_Text_EbEr_Measure+0x19c>)
 8015a90:	f009 fab6 	bl	801f000 <siprintf>
	number = 0;
 8015a94:	2600      	movs	r6, #0
	sprintf (buffer, "%.2f", ValueER);
 8015a96:	2304      	movs	r3, #4
		for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueER/(dec)) >= 1.0)
		{
			dec *= 10;
 8015a98:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 8015a9a:	ee07 8a90 	vmov	s15, r8
 8015a9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015aa2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015aa6:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aae:	db05      	blt.n	8015abc <GUI_Text_EbEr_Measure+0xf8>
			delta_pos-=23;
 8015ab0:	3d17      	subs	r5, #23
			number++;
 8015ab2:	3601      	adds	r6, #1
			dec *= 10;
 8015ab4:	fb02 f808 	mul.w	r8, r2, r8
			delta_pos-=23;
 8015ab8:	b2ed      	uxtb	r5, r5
			number++;
 8015aba:	b2f6      	uxtb	r6, r6
 8015abc:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8015abe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015ac2:	d1ea      	bne.n	8015a9a <GUI_Text_EbEr_Measure+0xd6>
		}
	}
	
	if(number < old_num_ER )
 8015ac4:	4b28      	ldr	r3, [pc, #160]	; (8015b68 <GUI_Text_EbEr_Measure+0x1a4>)
 8015ac6:	781a      	ldrb	r2, [r3, #0]
 8015ac8:	42b2      	cmp	r2, r6
 8015aca:	4698      	mov	r8, r3
 8015acc:	d911      	bls.n	8015af2 <GUI_Text_EbEr_Measure+0x12e>
	{
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015ace:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015ad2:	f107 02c5 	add.w	r2, r7, #197	; 0xc5
 8015ad6:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015ada:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8015ade:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015ae2:	f8cd e000 	str.w	lr, [sp]
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	b292      	uxth	r2, r2
 8015aea:	b289      	uxth	r1, r1
 8015aec:	b280      	uxth	r0, r0
 8015aee:	f005 fe74 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015af2:	1978      	adds	r0, r7, r5
 8015af4:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015af8:	2303      	movs	r3, #3
 8015afa:	aa03      	add	r2, sp, #12
 8015afc:	b289      	uxth	r1, r1
 8015afe:	b280      	uxth	r0, r0
	old_num_ER = number;
 8015b00:	f888 6000 	strb.w	r6, [r8]
	
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015b04:	f107 0515 	add.w	r5, r7, #21
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015b08:	f006 f9b2 	bl	801be70 <TFT_DisplayString>
	TFT_SetFont(&Font16EN_arch_big);
 8015b0c:	4817      	ldr	r0, [pc, #92]	; (8015b6c <GUI_Text_EbEr_Measure+0x1a8>)
 8015b0e:	f006 f88d 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8015b12:	b2ad      	uxth	r5, r5
 8015b14:	f104 010c 	add.w	r1, r4, #12
 8015b18:	4628      	mov	r0, r5
 8015b1a:	2242      	movs	r2, #66	; 0x42
 8015b1c:	b289      	uxth	r1, r1
 8015b1e:	f006 f94f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8015b22:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8015b26:	2252      	movs	r2, #82	; 0x52
 8015b28:	b289      	uxth	r1, r1
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	f006 f948 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015b30:	480f      	ldr	r0, [pc, #60]	; (8015b70 <GUI_Text_EbEr_Measure+0x1ac>)
 8015b32:	f006 f87b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8015b36:	1ca1      	adds	r1, r4, #2
 8015b38:	4638      	mov	r0, r7
 8015b3a:	2224      	movs	r2, #36	; 0x24
 8015b3c:	b289      	uxth	r1, r1
 8015b3e:	f006 f93f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 8015b42:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8015b46:	2224      	movs	r2, #36	; 0x24
 8015b48:	b289      	uxth	r1, r1
 8015b4a:	4638      	mov	r0, r7
 8015b4c:	f006 f938 	bl	801bdc0 <TFT_DrawChar>
}
 8015b50:	b007      	add	sp, #28
 8015b52:	ecbd 8b04 	vpop	{d8-d9}
 8015b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b5a:	bf00      	nop
 8015b5c:	200001f0 	.word	0x200001f0
 8015b60:	0802e6b2 	.word	0x0802e6b2
 8015b64:	20000246 	.word	0x20000246
 8015b68:	20000247 	.word	0x20000247
 8015b6c:	200001b0 	.word	0x200001b0
 8015b70:	200001e8 	.word	0x200001e8

08015b74 <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR)
{
 8015b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b78:	ed2d 8b04 	vpush	{d8-d9}
 8015b7c:	b087      	sub	sp, #28
	char buffer[9] = {0};
 8015b7e:	2600      	movs	r6, #0
{
 8015b80:	4607      	mov	r7, r0
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015b82:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8015b86:	eef0 8a40 	vmov.f32	s17, s0
 8015b8a:	eeb0 8a60 	vmov.f32	s16, s1
 8015b8e:	460c      	mov	r4, r1
	char buffer[9] = {0};
 8015b90:	9603      	str	r6, [sp, #12]
 8015b92:	9604      	str	r6, [sp, #16]
 8015b94:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015b98:	f006 f84e 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015b9c:	2063      	movs	r0, #99	; 0x63
 8015b9e:	f006 f851 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015ba2:	485b      	ldr	r0, [pc, #364]	; (8015d10 <GUI_Text_LbLr_Measure+0x19c>)
 8015ba4:	f006 f842 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 8015ba8:	ee18 0a90 	vmov	r0, s17
 8015bac:	f7ea fcdc 	bl	8000568 <__aeabi_f2d>
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	460b      	mov	r3, r1
 8015bb4:	a803      	add	r0, sp, #12
 8015bb6:	4957      	ldr	r1, [pc, #348]	; (8015d14 <GUI_Text_LbLr_Measure+0x1a0>)
 8015bb8:	f009 fa22 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8015bbc:	f04f 080a 	mov.w	r8, #10
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueLB/(dec)) >= 1.0)
 8015bc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 8015bc4:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8015bc6:	2596      	movs	r5, #150	; 0x96
 8015bc8:	eeb0 9a67 	vmov.f32	s18, s15
		{
			dec *= 10;
 8015bcc:	4642      	mov	r2, r8
		if((ValueLB/(dec)) >= 1.0)
 8015bce:	ee07 8a10 	vmov	s14, r8
 8015bd2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015bd6:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8015bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015be2:	db05      	blt.n	8015bf0 <GUI_Text_LbLr_Measure+0x7c>
			delta_pos-=23;
 8015be4:	3d17      	subs	r5, #23
			number++;
 8015be6:	3601      	adds	r6, #1
			dec *= 10;
 8015be8:	fb02 f808 	mul.w	r8, r2, r8
			delta_pos-=23;
 8015bec:	b2ed      	uxtb	r5, r5
			number++;
 8015bee:	b2f6      	uxtb	r6, r6
 8015bf0:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015bf2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015bf6:	d1ea      	bne.n	8015bce <GUI_Text_LbLr_Measure+0x5a>
		}
	}
	
	if(number < old_num_LB )
 8015bf8:	4b47      	ldr	r3, [pc, #284]	; (8015d18 <GUI_Text_LbLr_Measure+0x1a4>)
 8015bfa:	781a      	ldrb	r2, [r3, #0]
 8015bfc:	42b2      	cmp	r2, r6
 8015bfe:	4699      	mov	r9, r3
 8015c00:	d90d      	bls.n	8015c1e <GUI_Text_LbLr_Measure+0xaa>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015c02:	2163      	movs	r1, #99	; 0x63
 8015c04:	f104 0319 	add.w	r3, r4, #25
 8015c08:	f107 02c5 	add.w	r2, r7, #197	; 0xc5
 8015c0c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8015c10:	9100      	str	r1, [sp, #0]
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	b292      	uxth	r2, r2
 8015c16:	4621      	mov	r1, r4
 8015c18:	b280      	uxth	r0, r0
 8015c1a:	f005 fdde 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_LB = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015c1e:	1978      	adds	r0, r7, r5
 8015c20:	2303      	movs	r3, #3
 8015c22:	aa03      	add	r2, sp, #12
 8015c24:	4621      	mov	r1, r4
 8015c26:	b280      	uxth	r0, r0
	old_num_LB = number;
 8015c28:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015c2c:	f006 f920 	bl	801be70 <TFT_DisplayString>
	
	sprintf (buffer, "%.2f", ValueLR);
 8015c30:	ee18 0a10 	vmov	r0, s16
 8015c34:	f7ea fc98 	bl	8000568 <__aeabi_f2d>
 8015c38:	4602      	mov	r2, r0
 8015c3a:	460b      	mov	r3, r1
 8015c3c:	a803      	add	r0, sp, #12
 8015c3e:	4935      	ldr	r1, [pc, #212]	; (8015d14 <GUI_Text_LbLr_Measure+0x1a0>)
 8015c40:	f009 f9de 	bl	801f000 <siprintf>
	number = 0;
 8015c44:	2600      	movs	r6, #0
	sprintf (buffer, "%.2f", ValueLR);
 8015c46:	2304      	movs	r3, #4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueLR/(dec)) >= 1.0)
		{
			dec *= 10;
 8015c48:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 8015c4a:	ee07 8a90 	vmov	s15, r8
 8015c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015c52:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015c56:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5e:	db05      	blt.n	8015c6c <GUI_Text_LbLr_Measure+0xf8>
			delta_pos-=23;
 8015c60:	3d17      	subs	r5, #23
			number++;
 8015c62:	3601      	adds	r6, #1
			dec *= 10;
 8015c64:	fb02 f808 	mul.w	r8, r2, r8
			delta_pos-=23;
 8015c68:	b2ed      	uxtb	r5, r5
			number++;
 8015c6a:	b2f6      	uxtb	r6, r6
 8015c6c:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015c6e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015c72:	d1ea      	bne.n	8015c4a <GUI_Text_LbLr_Measure+0xd6>
		}
	}
	
	if(number < old_num_LR )
 8015c74:	4b29      	ldr	r3, [pc, #164]	; (8015d1c <GUI_Text_LbLr_Measure+0x1a8>)
 8015c76:	781a      	ldrb	r2, [r3, #0]
 8015c78:	42b2      	cmp	r2, r6
 8015c7a:	4698      	mov	r8, r3
 8015c7c:	d911      	bls.n	8015ca2 <GUI_Text_LbLr_Measure+0x12e>
	{
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015c7e:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015c82:	f107 02c5 	add.w	r2, r7, #197	; 0xc5
 8015c86:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015c8a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8015c8e:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015c92:	f8cd e000 	str.w	lr, [sp]
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	b292      	uxth	r2, r2
 8015c9a:	b289      	uxth	r1, r1
 8015c9c:	b280      	uxth	r0, r0
 8015c9e:	f005 fd9c 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015ca2:	1978      	adds	r0, r7, r5
 8015ca4:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015ca8:	2303      	movs	r3, #3
 8015caa:	aa03      	add	r2, sp, #12
 8015cac:	b289      	uxth	r1, r1
 8015cae:	b280      	uxth	r0, r0
	old_num_LR = number;
 8015cb0:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015cb4:	f006 f8dc 	bl	801be70 <TFT_DisplayString>
	
	TFT_SetFont(&Font26EN_arch_digit);
 8015cb8:	4815      	ldr	r0, [pc, #84]	; (8015d10 <GUI_Text_LbLr_Measure+0x19c>)
 8015cba:	f005 ffb7 	bl	801bc2c <TFT_SetFont>

	
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015cbe:	f107 0515 	add.w	r5, r7, #21
	TFT_SetFont(&Font16EN_arch_big);
 8015cc2:	4817      	ldr	r0, [pc, #92]	; (8015d20 <GUI_Text_LbLr_Measure+0x1ac>)
 8015cc4:	f005 ffb2 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8015cc8:	b2ad      	uxth	r5, r5
 8015cca:	f104 010c 	add.w	r1, r4, #12
 8015cce:	4628      	mov	r0, r5
 8015cd0:	2242      	movs	r2, #66	; 0x42
 8015cd2:	b289      	uxth	r1, r1
 8015cd4:	f006 f874 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8015cd8:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8015cdc:	2252      	movs	r2, #82	; 0x52
 8015cde:	b289      	uxth	r1, r1
 8015ce0:	4628      	mov	r0, r5
 8015ce2:	f006 f86d 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015ce6:	480f      	ldr	r0, [pc, #60]	; (8015d24 <GUI_Text_LbLr_Measure+0x1b0>)
 8015ce8:	f005 ffa0 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8015cec:	1ca1      	adds	r1, r4, #2
 8015cee:	4638      	mov	r0, r7
 8015cf0:	222b      	movs	r2, #43	; 0x2b
 8015cf2:	b289      	uxth	r1, r1
 8015cf4:	f006 f864 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 8015cf8:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8015cfc:	222b      	movs	r2, #43	; 0x2b
 8015cfe:	b289      	uxth	r1, r1
 8015d00:	4638      	mov	r0, r7
 8015d02:	f006 f85d 	bl	801bdc0 <TFT_DrawChar>
}
 8015d06:	b007      	add	sp, #28
 8015d08:	ecbd 8b04 	vpop	{d8-d9}
 8015d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d10:	200001f0 	.word	0x200001f0
 8015d14:	0802e6b2 	.word	0x0802e6b2
 8015d18:	20000249 	.word	0x20000249
 8015d1c:	2000024a 	.word	0x2000024a
 8015d20:	200001b0 	.word	0x200001b0
 8015d24:	200001e8 	.word	0x200001e8

08015d28 <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value)
{
 8015d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d2c:	ed2d 8b02 	vpush	{d8}
 8015d30:	b086      	sub	sp, #24
	char buffer[9] = {0};
 8015d32:	2400      	movs	r4, #0
{
 8015d34:	4606      	mov	r6, r0
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8015d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8015d3e:	460d      	mov	r5, r1
	char buffer[9] = {0};
 8015d40:	9403      	str	r4, [sp, #12]
 8015d42:	9404      	str	r4, [sp, #16]
 8015d44:	f88d 4014 	strb.w	r4, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015d48:	f005 ff76 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015d4c:	2063      	movs	r0, #99	; 0x63
 8015d4e:	f005 ff79 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015d52:	4831      	ldr	r0, [pc, #196]	; (8015e18 <GUI_Text_S_P_Measure+0xf0>)
 8015d54:	f005 ff6a 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 8015d58:	ee18 0a10 	vmov	r0, s16
 8015d5c:	f7ea fc04 	bl	8000568 <__aeabi_f2d>
 8015d60:	4602      	mov	r2, r0
 8015d62:	460b      	mov	r3, r1
 8015d64:	a803      	add	r0, sp, #12
 8015d66:	492d      	ldr	r1, [pc, #180]	; (8015e1c <GUI_Text_S_P_Measure+0xf4>)
 8015d68:	f009 f94a 	bl	801f000 <siprintf>
	uint32_t dec = 10;
 8015d6c:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 8015d6e:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 8015d70:	2764      	movs	r7, #100	; 0x64
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8015d72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 8015d76:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015d78:	ee07 2a10 	vmov	s14, r2
 8015d7c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015d80:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d8c:	db04      	blt.n	8015d98 <GUI_Text_S_P_Measure+0x70>
			delta_pos-=23;
 8015d8e:	3f17      	subs	r7, #23
			number++;
 8015d90:	3401      	adds	r4, #1
			dec *= 10;
 8015d92:	434a      	muls	r2, r1
			delta_pos-=23;
 8015d94:	b2ff      	uxtb	r7, r7
			number++;
 8015d96:	b2e4      	uxtb	r4, r4
 8015d98:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015d9a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015d9e:	d1eb      	bne.n	8015d78 <GUI_Text_S_P_Measure+0x50>
		}
	}
	
	if(number < old_num_SP )
 8015da0:	4b1f      	ldr	r3, [pc, #124]	; (8015e20 <GUI_Text_S_P_Measure+0xf8>)
 8015da2:	781a      	ldrb	r2, [r3, #0]
 8015da4:	42a2      	cmp	r2, r4
 8015da6:	4698      	mov	r8, r3
 8015da8:	d90d      	bls.n	8015dc6 <GUI_Text_S_P_Measure+0x9e>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015daa:	2163      	movs	r1, #99	; 0x63
 8015dac:	f105 0319 	add.w	r3, r5, #25
 8015db0:	f106 02c5 	add.w	r2, r6, #197	; 0xc5
 8015db4:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8015db8:	9100      	str	r1, [sp, #0]
 8015dba:	b29b      	uxth	r3, r3
 8015dbc:	b292      	uxth	r2, r2
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	b280      	uxth	r0, r0
 8015dc2:	f005 fd0a 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015dc6:	19f0      	adds	r0, r6, r7
 8015dc8:	2303      	movs	r3, #3
 8015dca:	aa03      	add	r2, sp, #12
 8015dcc:	4629      	mov	r1, r5
 8015dce:	b280      	uxth	r0, r0
	old_num_SP = number;
 8015dd0:	f888 4000 	strb.w	r4, [r8]
	
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8015dd4:	3502      	adds	r5, #2
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015dd6:	f006 f84b 	bl	801be70 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8015dda:	480f      	ldr	r0, [pc, #60]	; (8015e18 <GUI_Text_S_P_Measure+0xf0>)
 8015ddc:	f005 ff26 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 8015de0:	b2ad      	uxth	r5, r5
 8015de2:	f106 0016 	add.w	r0, r6, #22
 8015de6:	4629      	mov	r1, r5
 8015de8:	222f      	movs	r2, #47	; 0x2f
 8015dea:	b280      	uxth	r0, r0
 8015dec:	f005 ffe8 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015df0:	480c      	ldr	r0, [pc, #48]	; (8015e24 <GUI_Text_S_P_Measure+0xfc>)
 8015df2:	f005 ff1b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8015df6:	4629      	mov	r1, r5
 8015df8:	4630      	mov	r0, r6
 8015dfa:	2232      	movs	r2, #50	; 0x32
 8015dfc:	f005 ffe0 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 8015e00:	f106 002e 	add.w	r0, r6, #46	; 0x2e
 8015e04:	222f      	movs	r2, #47	; 0x2f
 8015e06:	4629      	mov	r1, r5
 8015e08:	b280      	uxth	r0, r0
 8015e0a:	f005 ffd9 	bl	801bdc0 <TFT_DrawChar>
}
 8015e0e:	b006      	add	sp, #24
 8015e10:	ecbd 8b02 	vpop	{d8}
 8015e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e18:	200001f0 	.word	0x200001f0
 8015e1c:	0802e6b7 	.word	0x0802e6b7
 8015e20:	2000024b 	.word	0x2000024b
 8015e24:	200001e8 	.word	0x200001e8

08015e28 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB)
{
 8015e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e2c:	b087      	sub	sp, #28
	char buffer[5] = {0};
 8015e2e:	2600      	movs	r6, #0
{
 8015e30:	4604      	mov	r4, r0
 8015e32:	461f      	mov	r7, r3
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015e34:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8015e38:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8015e3c:	9302      	str	r3, [sp, #8]
 8015e3e:	4690      	mov	r8, r2
 8015e40:	460d      	mov	r5, r1
	char buffer[5] = {0};
 8015e42:	9604      	str	r6, [sp, #16]
 8015e44:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015e48:	f005 fef6 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015e4c:	2063      	movs	r0, #99	; 0x63
 8015e4e:	f005 fef9 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015e52:	4894      	ldr	r0, [pc, #592]	; (80160a4 <GUI_Text_LAB_Measure+0x27c>)
 8015e54:	f005 feea 	bl	801bc2c <TFT_SetFont>
	
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 8015e58:	45b0      	cmp	r8, r6
 8015e5a:	bfbe      	ittt	lt
 8015e5c:	f1c8 0800 	rsblt	r8, r8, #0
 8015e60:	fa0f f888 	sxthlt.w	r8, r8
 8015e64:	2301      	movlt	r3, #1
	
	sprintf (buffer, "%d", ValueL);
 8015e66:	4642      	mov	r2, r8
 8015e68:	498f      	ldr	r1, [pc, #572]	; (80160a8 <GUI_Text_LAB_Measure+0x280>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015e6a:	bfa8      	it	ge
 8015e6c:	9603      	strge	r6, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 8015e6e:	a804      	add	r0, sp, #16
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 8015e70:	bfb8      	it	lt
 8015e72:	9303      	strlt	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 8015e74:	f009 f8c4 	bl	801f000 <siprintf>
 8015e78:	f04f 0a04 	mov.w	sl, #4
	uint32_t dec = 10;
 8015e7c:	f04f 0b0a 	mov.w	fp, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015e80:	f04f 0900 	mov.w	r9, #0
 8015e84:	26b4      	movs	r6, #180	; 0xb4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueL/(dec)) >= 1.0)
 8015e86:	fbb8 f0fb 	udiv	r0, r8, fp
 8015e8a:	f7ea fb4b 	bl	8000524 <__aeabi_ui2d>
 8015e8e:	2200      	movs	r2, #0
 8015e90:	4b86      	ldr	r3, [pc, #536]	; (80160ac <GUI_Text_LAB_Measure+0x284>)
 8015e92:	f7ea fe43 	bl	8000b1c <__aeabi_dcmpge>
 8015e96:	b140      	cbz	r0, 8015eaa <GUI_Text_LAB_Measure+0x82>
		{
			dec *= 10;
 8015e98:	230a      	movs	r3, #10
			delta_pos-=23;
 8015e9a:	3e17      	subs	r6, #23
			number++;
 8015e9c:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 8015ea0:	fb03 fb0b 	mul.w	fp, r3, fp
			delta_pos-=23;
 8015ea4:	b2f6      	uxtb	r6, r6
			number++;
 8015ea6:	fa5f f989 	uxtb.w	r9, r9
 8015eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8015eae:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8015eb2:	d1e8      	bne.n	8015e86 <GUI_Text_LAB_Measure+0x5e>
		}
	}
	
	if(number < old_num_L )
 8015eb4:	4b7e      	ldr	r3, [pc, #504]	; (80160b0 <GUI_Text_LAB_Measure+0x288>)
 8015eb6:	781a      	ldrb	r2, [r3, #0]
 8015eb8:	454a      	cmp	r2, r9
 8015eba:	4698      	mov	r8, r3
 8015ebc:	d90d      	bls.n	8015eda <GUI_Text_LAB_Measure+0xb2>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015ebe:	2163      	movs	r1, #99	; 0x63
 8015ec0:	f105 0319 	add.w	r3, r5, #25
 8015ec4:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015ec8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015ecc:	9100      	str	r1, [sp, #0]
 8015ece:	b29b      	uxth	r3, r3
 8015ed0:	b292      	uxth	r2, r2
 8015ed2:	4629      	mov	r1, r5
 8015ed4:	b280      	uxth	r0, r0
 8015ed6:	f005 fc80 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_L = number;
	number = 0;
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8015eda:	9b03      	ldr	r3, [sp, #12]
	old_num_L = number;
 8015edc:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8015ee0:	b13b      	cbz	r3, 8015ef2 <GUI_Text_LAB_Measure+0xca>
 8015ee2:	f1a4 0012 	sub.w	r0, r4, #18
 8015ee6:	4430      	add	r0, r6
 8015ee8:	222d      	movs	r2, #45	; 0x2d
 8015eea:	4629      	mov	r1, r5
 8015eec:	b280      	uxth	r0, r0
 8015eee:	f005 ff67 	bl	801bdc0 <TFT_DrawChar>
	
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ef2:	19a0      	adds	r0, r4, r6
			TFT_DrawChar(X+17, Y, '*');
 8015ef4:	f104 0911 	add.w	r9, r4, #17
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ef8:	2303      	movs	r3, #3
 8015efa:	aa04      	add	r2, sp, #16
 8015efc:	4629      	mov	r1, r5
 8015efe:	b280      	uxth	r0, r0
			TFT_DrawChar(X+17, Y, '*');
 8015f00:	fa1f f989 	uxth.w	r9, r9
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015f04:	f005 ffb4 	bl	801be70 <TFT_DisplayString>
			TFT_DrawChar(X+17, Y, '*');
 8015f08:	222a      	movs	r2, #42	; 0x2a
 8015f0a:	4629      	mov	r1, r5
 8015f0c:	4648      	mov	r0, r9
 8015f0e:	f005 ff57 	bl	801bdc0 <TFT_DrawChar>

			TFT_SetFont(&Font26EN_arch_big);
 8015f12:	4868      	ldr	r0, [pc, #416]	; (80160b4 <GUI_Text_LAB_Measure+0x28c>)
 8015f14:	f005 fe8a 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 8015f18:	222b      	movs	r2, #43	; 0x2b
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	f005 ff4f 	bl	801bdc0 <TFT_DrawChar>
	
	delta_pos = 180;
	dec = 10;
			
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8015f22:	2f00      	cmp	r7, #0
 8015f24:	bfbd      	ittte	lt
 8015f26:	427f      	neglt	r7, r7
 8015f28:	b23f      	sxthlt	r7, r7
 8015f2a:	2301      	movlt	r3, #1
 8015f2c:	2300      	movge	r3, #0
			
	TFT_SetFont(&Font26EN_arch_digit);
 8015f2e:	485d      	ldr	r0, [pc, #372]	; (80160a4 <GUI_Text_LAB_Measure+0x27c>)
 8015f30:	9303      	str	r3, [sp, #12]
 8015f32:	f005 fe7b 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 8015f36:	463a      	mov	r2, r7
 8015f38:	495b      	ldr	r1, [pc, #364]	; (80160a8 <GUI_Text_LAB_Measure+0x280>)
 8015f3a:	a804      	add	r0, sp, #16
 8015f3c:	f009 f860 	bl	801f000 <siprintf>
 8015f40:	f04f 0a04 	mov.w	sl, #4
	dec = 10;
 8015f44:	f04f 0b0a 	mov.w	fp, #10
	number = 0;
 8015f48:	f04f 0800 	mov.w	r8, #0
	delta_pos = 180;
 8015f4c:	26b4      	movs	r6, #180	; 0xb4
		for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueA/(dec)) >= 1.0)
 8015f4e:	fbb7 f0fb 	udiv	r0, r7, fp
 8015f52:	f7ea fae7 	bl	8000524 <__aeabi_ui2d>
 8015f56:	2200      	movs	r2, #0
 8015f58:	4b54      	ldr	r3, [pc, #336]	; (80160ac <GUI_Text_LAB_Measure+0x284>)
 8015f5a:	f7ea fddf 	bl	8000b1c <__aeabi_dcmpge>
 8015f5e:	b140      	cbz	r0, 8015f72 <GUI_Text_LAB_Measure+0x14a>
		{
			dec *= 10;
 8015f60:	230a      	movs	r3, #10
			delta_pos-=23;
 8015f62:	3e17      	subs	r6, #23
			number++;
 8015f64:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015f68:	fb03 fb0b 	mul.w	fp, r3, fp
			delta_pos-=23;
 8015f6c:	b2f6      	uxtb	r6, r6
			number++;
 8015f6e:	fa5f f888 	uxtb.w	r8, r8
 8015f72:	f10a 3aff 	add.w	sl, sl, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8015f76:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8015f7a:	d1e8      	bne.n	8015f4e <GUI_Text_LAB_Measure+0x126>
		}
	}
	
	if(number < old_num_A )
 8015f7c:	4f4e      	ldr	r7, [pc, #312]	; (80160b8 <GUI_Text_LAB_Measure+0x290>)
 8015f7e:	783b      	ldrb	r3, [r7, #0]
 8015f80:	4543      	cmp	r3, r8
 8015f82:	d911      	bls.n	8015fa8 <GUI_Text_LAB_Measure+0x180>
	{
		TFT_FillRectangle(X+40, Y+35, X+197, Y+62, TFT_Black_Bkgr);
 8015f84:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 8015f88:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015f8c:	f105 0123 	add.w	r1, r5, #35	; 0x23
 8015f90:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015f94:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015f98:	f8cd e000 	str.w	lr, [sp]
 8015f9c:	b29b      	uxth	r3, r3
 8015f9e:	b292      	uxth	r2, r2
 8015fa0:	b289      	uxth	r1, r1
 8015fa2:	b280      	uxth	r0, r0
 8015fa4:	f005 fc19 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_A = number;
	number = 0;
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 8015fa8:	9b03      	ldr	r3, [sp, #12]
	old_num_A = number;
 8015faa:	f887 8000 	strb.w	r8, [r7]
 8015fae:	f105 0723 	add.w	r7, r5, #35	; 0x23
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 8015fb2:	b13b      	cbz	r3, 8015fc4 <GUI_Text_LAB_Measure+0x19c>
 8015fb4:	f1a4 0012 	sub.w	r0, r4, #18
 8015fb8:	4430      	add	r0, r6
 8015fba:	222d      	movs	r2, #45	; 0x2d
 8015fbc:	b2b9      	uxth	r1, r7
 8015fbe:	b280      	uxth	r0, r0
 8015fc0:	f005 fefe 	bl	801bdc0 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015fc4:	b2bf      	uxth	r7, r7
 8015fc6:	19a0      	adds	r0, r4, r6
 8015fc8:	2303      	movs	r3, #3
 8015fca:	4639      	mov	r1, r7
 8015fcc:	aa04      	add	r2, sp, #16
 8015fce:	b280      	uxth	r0, r0
 8015fd0:	f005 ff4e 	bl	801be70 <TFT_DisplayString>
			TFT_DrawChar(X+17, Y+35, '*');
 8015fd4:	4639      	mov	r1, r7
 8015fd6:	222a      	movs	r2, #42	; 0x2a
 8015fd8:	4648      	mov	r0, r9
 8015fda:	f005 fef1 	bl	801bdc0 <TFT_DrawChar>

			TFT_SetFont(&Font26EN_arch_small);
 8015fde:	4837      	ldr	r0, [pc, #220]	; (80160bc <GUI_Text_LAB_Measure+0x294>)
 8015fe0:	f005 fe24 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	2220      	movs	r2, #32
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f005 fee9 	bl	801bdc0 <TFT_DrawChar>
	
		delta_pos = 180;
	 dec = 10;
	
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8015fee:	9b02      	ldr	r3, [sp, #8]
	
	TFT_SetFont(&Font26EN_arch_digit);
 8015ff0:	482c      	ldr	r0, [pc, #176]	; (80160a4 <GUI_Text_LAB_Measure+0x27c>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	bfbe      	ittt	lt
 8015ff6:	425b      	neglt	r3, r3
 8015ff8:	b21b      	sxthlt	r3, r3
 8015ffa:	9302      	strlt	r3, [sp, #8]
	TFT_SetFont(&Font26EN_arch_digit);
 8015ffc:	f005 fe16 	bl	801bc2c <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 8016000:	9a02      	ldr	r2, [sp, #8]
 8016002:	4929      	ldr	r1, [pc, #164]	; (80160a8 <GUI_Text_LAB_Measure+0x280>)
 8016004:	a804      	add	r0, sp, #16
 8016006:	f008 fffb 	bl	801f000 <siprintf>
	 dec = 10;
 801600a:	f04f 0a0a 	mov.w	sl, #10
	sprintf (buffer, "%d", ValueB);
 801600e:	f04f 0804 	mov.w	r8, #4
	number = 0;
 8016012:	2700      	movs	r7, #0
		delta_pos = 180;
 8016014:	26b4      	movs	r6, #180	; 0xb4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((ValueB/(dec)) >= 1.0)
		{
			dec *= 10;
 8016016:	46d3      	mov	fp, sl
		if((ValueB/(dec)) >= 1.0)
 8016018:	9b02      	ldr	r3, [sp, #8]
 801601a:	fbb3 f0fa 	udiv	r0, r3, sl
 801601e:	f7ea fa81 	bl	8000524 <__aeabi_ui2d>
 8016022:	2200      	movs	r2, #0
 8016024:	4b21      	ldr	r3, [pc, #132]	; (80160ac <GUI_Text_LAB_Measure+0x284>)
 8016026:	f7ea fd79 	bl	8000b1c <__aeabi_dcmpge>
 801602a:	b128      	cbz	r0, 8016038 <GUI_Text_LAB_Measure+0x210>
			delta_pos-=23;
 801602c:	3e17      	subs	r6, #23
			number++;
 801602e:	3701      	adds	r7, #1
			dec *= 10;
 8016030:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 8016034:	b2f6      	uxtb	r6, r6
			number++;
 8016036:	b2ff      	uxtb	r7, r7
 8016038:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 801603c:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8016040:	d1ea      	bne.n	8016018 <GUI_Text_LAB_Measure+0x1f0>
		}
	}
	
	if(number < old_num_B )
 8016042:	4b1f      	ldr	r3, [pc, #124]	; (80160c0 <GUI_Text_LAB_Measure+0x298>)
 8016044:	781a      	ldrb	r2, [r3, #0]
 8016046:	42ba      	cmp	r2, r7
 8016048:	469a      	mov	sl, r3
 801604a:	f105 0846 	add.w	r8, r5, #70	; 0x46
 801604e:	d90e      	bls.n	801606e <GUI_Text_LAB_Measure+0x246>
	{
		TFT_FillRectangle(X+40, Y+70, X+197, Y+95, TFT_Black_Bkgr);
 8016050:	2163      	movs	r1, #99	; 0x63
 8016052:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8016056:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801605a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801605e:	9100      	str	r1, [sp, #0]
 8016060:	b29b      	uxth	r3, r3
 8016062:	b292      	uxth	r2, r2
 8016064:	fa1f f188 	uxth.w	r1, r8
 8016068:	b280      	uxth	r0, r0
 801606a:	f005 fbb6 	bl	801b7da <TFT_FillRectangle>
	} 
	old_num_B = number;
	number = 0;

//		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 801606e:	fa1f f888 	uxth.w	r8, r8
 8016072:	19a0      	adds	r0, r4, r6
 8016074:	2303      	movs	r3, #3
 8016076:	aa04      	add	r2, sp, #16
 8016078:	4641      	mov	r1, r8
 801607a:	b280      	uxth	r0, r0
	old_num_B = number;
 801607c:	f88a 7000 	strb.w	r7, [sl]
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8016080:	f005 fef6 	bl	801be70 <TFT_DisplayString>
			TFT_DrawChar(X+17, Y+70, '*');
 8016084:	4641      	mov	r1, r8
 8016086:	222a      	movs	r2, #42	; 0x2a
 8016088:	4648      	mov	r0, r9
 801608a:	f005 fe99 	bl	801bdc0 <TFT_DrawChar>

			TFT_SetFont(&Font26EN_arch_small);
 801608e:	480b      	ldr	r0, [pc, #44]	; (80160bc <GUI_Text_LAB_Measure+0x294>)
 8016090:	f005 fdcc 	bl	801bc2c <TFT_SetFont>
			TFT_DrawChar(X, Y+70, 'b'-65);
 8016094:	2221      	movs	r2, #33	; 0x21
 8016096:	4641      	mov	r1, r8
 8016098:	4620      	mov	r0, r4
 801609a:	f005 fe91 	bl	801bdc0 <TFT_DrawChar>
}	
 801609e:	b007      	add	sp, #28
 80160a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a4:	200001f0 	.word	0x200001f0
 80160a8:	080215d9 	.word	0x080215d9
 80160ac:	3ff00000 	.word	0x3ff00000
 80160b0:	20000248 	.word	0x20000248
 80160b4:	200001e8 	.word	0x200001e8
 80160b8:	20000244 	.word	0x20000244
 80160bc:	200001f8 	.word	0x200001f8
 80160c0:	20000245 	.word	0x20000245

080160c4 <GUI_Battery_Level>:


void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 80160c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160c8:	b085      	sub	sp, #20
	char buffer[5] = {0};
 80160ca:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 80160cc:	f100 082d 	add.w	r8, r0, #45	; 0x2d
{
 80160d0:	460c      	mov	r4, r1
 80160d2:	4605      	mov	r5, r0
	char buffer[5] = {0};
 80160d4:	9302      	str	r3, [sp, #8]
 80160d6:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 80160da:	fa1f f888 	uxth.w	r8, r8
 80160de:	f101 031a 	add.w	r3, r1, #26
 80160e2:	f241 3976 	movw	r9, #4982	; 0x1376
 80160e6:	310a      	adds	r1, #10
 80160e8:	300a      	adds	r0, #10
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	4642      	mov	r2, r8
 80160ee:	b289      	uxth	r1, r1
 80160f0:	b280      	uxth	r0, r0
 80160f2:	f8cd 9000 	str.w	r9, [sp]
{
 80160f6:	ec57 6b10 	vmov	r6, r7, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 80160fa:	f005 fb6e 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 80160fe:	f104 0314 	add.w	r3, r4, #20
 8016102:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8016106:	f104 010f 	add.w	r1, r4, #15
 801610a:	b29b      	uxth	r3, r3
 801610c:	b292      	uxth	r2, r2
 801610e:	b289      	uxth	r1, r1
 8016110:	4640      	mov	r0, r8
 8016112:	f8cd 9000 	str.w	r9, [sp]
 8016116:	f005 fb60 	bl	801b7da <TFT_FillRectangle>

		if(charge < 12)
 801611a:	2200      	movs	r2, #0
 801611c:	4b4c      	ldr	r3, [pc, #304]	; (8016250 <GUI_Battery_Level+0x18c>)
 801611e:	4630      	mov	r0, r6
 8016120:	4639      	mov	r1, r7
 8016122:	f7ea fce7 	bl	8000af4 <__aeabi_dcmplt>
 8016126:	b188      	cbz	r0, 801614c <GUI_Battery_Level+0x88>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 8016128:	f104 0318 	add.w	r3, r4, #24
 801612c:	f105 0213 	add.w	r2, r5, #19
 8016130:	f104 010c 	add.w	r1, r4, #12
 8016134:	f105 000f 	add.w	r0, r5, #15
 8016138:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 801613c:	f8cd e000 	str.w	lr, [sp]
 8016140:	b29b      	uxth	r3, r3
 8016142:	b292      	uxth	r2, r2
 8016144:	b289      	uxth	r1, r1
 8016146:	b280      	uxth	r0, r0
 8016148:	f005 fb47 	bl	801b7da <TFT_FillRectangle>
		}		
		if(charge >= 12)
 801614c:	2200      	movs	r2, #0
 801614e:	4b40      	ldr	r3, [pc, #256]	; (8016250 <GUI_Battery_Level+0x18c>)
 8016150:	4630      	mov	r0, r6
 8016152:	4639      	mov	r1, r7
 8016154:	f7ea fce2 	bl	8000b1c <__aeabi_dcmpge>
 8016158:	b188      	cbz	r0, 801617e <GUI_Battery_Level+0xba>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 801615a:	f104 0318 	add.w	r3, r4, #24
 801615e:	f105 0213 	add.w	r2, r5, #19
 8016162:	f104 010c 	add.w	r1, r4, #12
 8016166:	f105 000f 	add.w	r0, r5, #15
 801616a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801616e:	f8cd e000 	str.w	lr, [sp]
 8016172:	b29b      	uxth	r3, r3
 8016174:	b292      	uxth	r2, r2
 8016176:	b289      	uxth	r1, r1
 8016178:	b280      	uxth	r0, r0
 801617a:	f005 fb2e 	bl	801b7da <TFT_FillRectangle>
		}		
		if(charge >= 25)
 801617e:	2200      	movs	r2, #0
 8016180:	4b34      	ldr	r3, [pc, #208]	; (8016254 <GUI_Battery_Level+0x190>)
 8016182:	4630      	mov	r0, r6
 8016184:	4639      	mov	r1, r7
 8016186:	f7ea fcc9 	bl	8000b1c <__aeabi_dcmpge>
 801618a:	b188      	cbz	r0, 80161b0 <GUI_Battery_Level+0xec>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 801618c:	f104 0318 	add.w	r3, r4, #24
 8016190:	f105 021a 	add.w	r2, r5, #26
 8016194:	f104 010c 	add.w	r1, r4, #12
 8016198:	f105 0016 	add.w	r0, r5, #22
 801619c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80161a0:	f8cd e000 	str.w	lr, [sp]
 80161a4:	b29b      	uxth	r3, r3
 80161a6:	b292      	uxth	r2, r2
 80161a8:	b289      	uxth	r1, r1
 80161aa:	b280      	uxth	r0, r0
 80161ac:	f005 fb15 	bl	801b7da <TFT_FillRectangle>
		}		
		if(charge >= 50)
 80161b0:	2200      	movs	r2, #0
 80161b2:	4b29      	ldr	r3, [pc, #164]	; (8016258 <GUI_Battery_Level+0x194>)
 80161b4:	4630      	mov	r0, r6
 80161b6:	4639      	mov	r1, r7
 80161b8:	f7ea fcb0 	bl	8000b1c <__aeabi_dcmpge>
 80161bc:	b188      	cbz	r0, 80161e2 <GUI_Battery_Level+0x11e>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 80161be:	f104 0318 	add.w	r3, r4, #24
 80161c2:	f105 0221 	add.w	r2, r5, #33	; 0x21
 80161c6:	f104 010c 	add.w	r1, r4, #12
 80161ca:	f105 001d 	add.w	r0, r5, #29
 80161ce:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80161d2:	f8cd e000 	str.w	lr, [sp]
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	b292      	uxth	r2, r2
 80161da:	b289      	uxth	r1, r1
 80161dc:	b280      	uxth	r0, r0
 80161de:	f005 fafc 	bl	801b7da <TFT_FillRectangle>
		}
		if(charge >= 85)
 80161e2:	2200      	movs	r2, #0
 80161e4:	4b1d      	ldr	r3, [pc, #116]	; (801625c <GUI_Battery_Level+0x198>)
 80161e6:	4630      	mov	r0, r6
 80161e8:	4639      	mov	r1, r7
 80161ea:	f7ea fc97 	bl	8000b1c <__aeabi_dcmpge>
 80161ee:	b188      	cbz	r0, 8016214 <GUI_Battery_Level+0x150>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 80161f0:	f104 0318 	add.w	r3, r4, #24
 80161f4:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80161f8:	f104 010c 	add.w	r1, r4, #12
 80161fc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8016200:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8016204:	f8cd e000 	str.w	lr, [sp]
 8016208:	b29b      	uxth	r3, r3
 801620a:	b292      	uxth	r2, r2
 801620c:	b289      	uxth	r1, r1
 801620e:	b280      	uxth	r0, r0
 8016210:	f005 fae3 	bl	801b7da <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 8016214:	4632      	mov	r2, r6
 8016216:	463b      	mov	r3, r7
 8016218:	4911      	ldr	r1, [pc, #68]	; (8016260 <GUI_Battery_Level+0x19c>)
 801621a:	a802      	add	r0, sp, #8
 801621c:	f008 fef0 	bl	801f000 <siprintf>
		TFT_SetFont(&Font8);
 8016220:	4810      	ldr	r0, [pc, #64]	; (8016264 <GUI_Battery_Level+0x1a0>)
 8016222:	f005 fd03 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8016226:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801622a:	f005 fd05 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801622e:	2063      	movs	r0, #99	; 0x63
 8016230:	f005 fd08 	bl	801bc44 <TFT_SetBackColor>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 8016234:	f104 010e 	add.w	r1, r4, #14
 8016238:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801623c:	2303      	movs	r3, #3
 801623e:	aa02      	add	r2, sp, #8
 8016240:	b289      	uxth	r1, r1
 8016242:	b280      	uxth	r0, r0
 8016244:	f005 fe14 	bl	801be70 <TFT_DisplayString>

}
 8016248:	b005      	add	sp, #20
 801624a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801624e:	bf00      	nop
 8016250:	40280000 	.word	0x40280000
 8016254:	40390000 	.word	0x40390000
 8016258:	40490000 	.word	0x40490000
 801625c:	40554000 	.word	0x40554000
 8016260:	0802e6a6 	.word	0x0802e6a6
 8016264:	20000220 	.word	0x20000220

08016268 <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801626a:	1e86      	subs	r6, r0, #2
{
 801626c:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801626e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016272:	b2b6      	uxth	r6, r6
 8016274:	39fa      	subs	r1, #250	; 0xfa
{
 8016276:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016278:	4623      	mov	r3, r4
 801627a:	4602      	mov	r2, r0
 801627c:	9700      	str	r7, [sp, #0]
 801627e:	4630      	mov	r0, r6
 8016280:	b289      	uxth	r1, r1
 8016282:	f005 faaa 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8016286:	1ce3      	adds	r3, r4, #3
 8016288:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 801628c:	1c61      	adds	r1, r4, #1
 801628e:	4630      	mov	r0, r6
 8016290:	9700      	str	r7, [sp, #0]
 8016292:	b29b      	uxth	r3, r3
 8016294:	b292      	uxth	r2, r2
 8016296:	b289      	uxth	r1, r1
 8016298:	f005 fa9f 	bl	801b7da <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 801629c:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	1cea      	adds	r2, r5, #3
 80162a4:	1f68      	subs	r0, r5, #5
 80162a6:	4619      	mov	r1, r3
 80162a8:	9700      	str	r7, [sp, #0]
 80162aa:	b292      	uxth	r2, r2
 80162ac:	b280      	uxth	r0, r0
 80162ae:	f005 fa37 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 80162b2:	1da6      	adds	r6, r4, #6
 80162b4:	f105 0293 	add.w	r2, r5, #147	; 0x93
 80162b8:	b292      	uxth	r2, r2
 80162ba:	b2b6      	uxth	r6, r6
 80162bc:	1ee1      	subs	r1, r4, #3
 80162be:	4633      	mov	r3, r6
 80162c0:	4610      	mov	r0, r2
 80162c2:	b289      	uxth	r1, r1
 80162c4:	9700      	str	r7, [sp, #0]
 80162c6:	f005 fa2b 	bl	801b720 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 80162ca:	4819      	ldr	r0, [pc, #100]	; (8016330 <GUI_Axes_Locus_XY+0xc8>)
 80162cc:	f005 fcae 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 80162d0:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 80162d2:	4638      	mov	r0, r7
 80162d4:	f005 fcb0 	bl	801bc38 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 80162d8:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 80162da:	2063      	movs	r0, #99	; 0x63
 80162dc:	f005 fcb2 	bl	801bc44 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 80162e0:	4621      	mov	r1, r4
 80162e2:	222e      	movs	r2, #46	; 0x2e
 80162e4:	2004      	movs	r0, #4
 80162e6:	f005 fd6b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 80162ea:	4621      	mov	r1, r4
 80162ec:	2230      	movs	r2, #48	; 0x30
 80162ee:	2000      	movs	r0, #0
 80162f0:	f005 fd66 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 80162f4:	4621      	mov	r1, r4
 80162f6:	2235      	movs	r2, #53	; 0x35
 80162f8:	2008      	movs	r0, #8
 80162fa:	f005 fd61 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 80162fe:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8016302:	4631      	mov	r1, r6
 8016304:	222e      	movs	r2, #46	; 0x2e
 8016306:	b280      	uxth	r0, r0
 8016308:	f005 fd5a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 801630c:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8016310:	4631      	mov	r1, r6
 8016312:	2230      	movs	r2, #48	; 0x30
 8016314:	b280      	uxth	r0, r0
 8016316:	f005 fd53 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 801631a:	f105 0095 	add.w	r0, r5, #149	; 0x95
 801631e:	2235      	movs	r2, #53	; 0x35
 8016320:	4631      	mov	r1, r6
 8016322:	b280      	uxth	r0, r0
}
 8016324:	b003      	add	sp, #12
 8016326:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 801632a:	f005 bd49 	b.w	801bdc0 <TFT_DrawChar>
 801632e:	bf00      	nop
 8016330:	20000210 	.word	0x20000210

08016334 <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016336:	1e86      	subs	r6, r0, #2
{
 8016338:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801633a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801633e:	b2b6      	uxth	r6, r6
 8016340:	39ea      	subs	r1, #234	; 0xea
{
 8016342:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016344:	4623      	mov	r3, r4
 8016346:	4602      	mov	r2, r0
 8016348:	9700      	str	r7, [sp, #0]
 801634a:	4630      	mov	r0, r6
 801634c:	b289      	uxth	r1, r1
 801634e:	f005 fa44 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8016352:	1ce3      	adds	r3, r4, #3
 8016354:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8016358:	1c61      	adds	r1, r4, #1
 801635a:	4630      	mov	r0, r6
 801635c:	9700      	str	r7, [sp, #0]
 801635e:	b29b      	uxth	r3, r3
 8016360:	b292      	uxth	r2, r2
 8016362:	b289      	uxth	r1, r1
 8016364:	f005 fa39 	bl	801b7da <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 8016368:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 801636c:	b29b      	uxth	r3, r3
 801636e:	1cea      	adds	r2, r5, #3
 8016370:	1f68      	subs	r0, r5, #5
 8016372:	4619      	mov	r1, r3
 8016374:	9700      	str	r7, [sp, #0]
 8016376:	b292      	uxth	r2, r2
 8016378:	b280      	uxth	r0, r0
 801637a:	f005 f9d1 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 801637e:	1da6      	adds	r6, r4, #6
 8016380:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 8016384:	b292      	uxth	r2, r2
 8016386:	b2b6      	uxth	r6, r6
 8016388:	1ee1      	subs	r1, r4, #3
 801638a:	4633      	mov	r3, r6
 801638c:	4610      	mov	r0, r2
 801638e:	b289      	uxth	r1, r1
 8016390:	9700      	str	r7, [sp, #0]
 8016392:	f005 f9c5 	bl	801b720 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8016396:	4819      	ldr	r0, [pc, #100]	; (80163fc <GUI_Axes_Locus_LUV+0xc8>)
 8016398:	f005 fc48 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 801639c:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 801639e:	4638      	mov	r0, r7
 80163a0:	f005 fc4a 	bl	801bc38 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80163a4:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 80163a6:	2063      	movs	r0, #99	; 0x63
 80163a8:	f005 fc4c 	bl	801bc44 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80163ac:	4621      	mov	r1, r4
 80163ae:	222e      	movs	r2, #46	; 0x2e
 80163b0:	2004      	movs	r0, #4
 80163b2:	f005 fd05 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 80163b6:	4621      	mov	r1, r4
 80163b8:	2230      	movs	r2, #48	; 0x30
 80163ba:	2000      	movs	r0, #0
 80163bc:	f005 fd00 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 80163c0:	4621      	mov	r1, r4
 80163c2:	2235      	movs	r2, #53	; 0x35
 80163c4:	2008      	movs	r0, #8
 80163c6:	f005 fcfb 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 80163ca:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 80163ce:	4631      	mov	r1, r6
 80163d0:	222e      	movs	r2, #46	; 0x2e
 80163d2:	b280      	uxth	r0, r0
 80163d4:	f005 fcf4 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 80163d8:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 80163dc:	4631      	mov	r1, r6
 80163de:	2230      	movs	r2, #48	; 0x30
 80163e0:	b280      	uxth	r0, r0
 80163e2:	f005 fced 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 80163e6:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 80163ea:	2235      	movs	r2, #53	; 0x35
 80163ec:	4631      	mov	r1, r6
 80163ee:	b280      	uxth	r0, r0
}
 80163f0:	b003      	add	sp, #12
 80163f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 80163f6:	f005 bce3 	b.w	801bdc0 <TFT_DrawChar>
 80163fa:	bf00      	nop
 80163fc:	20000210 	.word	0x20000210

08016400 <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8016404:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8016408:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801640a:	b29b      	uxth	r3, r3
{
 801640c:	4604      	mov	r4, r0
 801640e:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8016410:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016414:	9303      	str	r3, [sp, #12]
 8016416:	387f      	subs	r0, #127	; 0x7f
 8016418:	1c4b      	adds	r3, r1, #1
 801641a:	3901      	subs	r1, #1
 801641c:	9a03      	ldr	r2, [sp, #12]
 801641e:	9600      	str	r6, [sp, #0]
 8016420:	b29b      	uxth	r3, r3
 8016422:	b289      	uxth	r1, r1
 8016424:	b280      	uxth	r0, r0
 8016426:	f005 f9d8 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 801642a:	f1a5 037d 	sub.w	r3, r5, #125	; 0x7d
 801642e:	b29b      	uxth	r3, r3
 8016430:	9304      	str	r3, [sp, #16]
 8016432:	1ea0      	subs	r0, r4, #2
 8016434:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 8016438:	b29b      	uxth	r3, r3
 801643a:	4622      	mov	r2, r4
 801643c:	9904      	ldr	r1, [sp, #16]
 801643e:	9600      	str	r6, [sp, #0]
 8016440:	b280      	uxth	r0, r0
 8016442:	9305      	str	r3, [sp, #20]
 8016444:	f005 f9c9 	bl	801b7da <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 8016448:	484e      	ldr	r0, [pc, #312]	; (8016584 <GUI_Axes_Locus_Lab+0x184>)
 801644a:	f005 fbef 	bl	801bc2c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
	
		TFT_DrawChar(X_center-14+0,  Y_center-LAB_LOCUS_SIZEY/2-8, '-');
 801644e:	f1a4 0b0e 	sub.w	fp, r4, #14
		TFT_SetTextColor(TFT_White);
 8016452:	4630      	mov	r0, r6
		TFT_DrawChar(X_center-14+0,  Y_center-LAB_LOCUS_SIZEY/2-8, '-');
 8016454:	f1a5 0785 	sub.w	r7, r5, #133	; 0x85
		TFT_SetTextColor(TFT_White);
 8016458:	f005 fbee 	bl	801bc38 <TFT_SetTextColor>
		TFT_DrawChar(X_center-14+0,  Y_center-LAB_LOCUS_SIZEY/2-8, '-');
 801645c:	b2bf      	uxth	r7, r7
 801645e:	fa1f fb8b 	uxth.w	fp, fp
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016462:	2063      	movs	r0, #99	; 0x63
		TFT_DrawChar(X_center-14+5,  Y_center-LAB_LOCUS_SIZEY/2-8, '1');
 8016464:	f1a4 0a09 	sub.w	sl, r4, #9
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016468:	f005 fbec 	bl	801bc44 <TFT_SetBackColor>
		TFT_DrawChar(X_center-14+5,  Y_center-LAB_LOCUS_SIZEY/2-8, '1');
 801646c:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-14+0,  Y_center-LAB_LOCUS_SIZEY/2-8, '-');
 8016470:	4639      	mov	r1, r7
 8016472:	4658      	mov	r0, fp
 8016474:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawChar(X_center-14+10,  Y_center-LAB_LOCUS_SIZEY/2-8, '2');
 8016476:	f1a4 0904 	sub.w	r9, r4, #4
		TFT_DrawChar(X_center-14+0,  Y_center-LAB_LOCUS_SIZEY/2-8, '-');
 801647a:	f005 fca1 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center-14+10,  Y_center-LAB_LOCUS_SIZEY/2-8, '2');
 801647e:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-14+5,  Y_center-LAB_LOCUS_SIZEY/2-8, '1');
 8016482:	4639      	mov	r1, r7
 8016484:	4650      	mov	r0, sl
 8016486:	2231      	movs	r2, #49	; 0x31
 8016488:	f005 fc9a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center-14+16,  Y_center-LAB_LOCUS_SIZEY/2-8, '8');
 801648c:	f104 0802 	add.w	r8, r4, #2
		TFT_DrawChar(X_center-14+10,  Y_center-LAB_LOCUS_SIZEY/2-8, '2');
 8016490:	4639      	mov	r1, r7
 8016492:	4648      	mov	r0, r9
 8016494:	2232      	movs	r2, #50	; 0x32
 8016496:	f005 fc93 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center-14+16,  Y_center-LAB_LOCUS_SIZEY/2-8, '8');
 801649a:	fa1f f888 	uxth.w	r8, r8
 801649e:	4639      	mov	r1, r7
		
		TFT_DrawChar(X_center-14+0,  Y_center+LAB_LOCUS_SIZEY/2+6, '+');
 80164a0:	f105 0783 	add.w	r7, r5, #131	; 0x83
 80164a4:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X_center-14+16,  Y_center-LAB_LOCUS_SIZEY/2-8, '8');
 80164a6:	4640      	mov	r0, r8
 80164a8:	2238      	movs	r2, #56	; 0x38
 80164aa:	f005 fc89 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center-14+0,  Y_center+LAB_LOCUS_SIZEY/2+6, '+');
 80164ae:	4639      	mov	r1, r7
 80164b0:	4658      	mov	r0, fp
 80164b2:	222b      	movs	r2, #43	; 0x2b
 80164b4:	f005 fc84 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center-14+5,  Y_center+LAB_LOCUS_SIZEY/2+6, '1');
 80164b8:	4639      	mov	r1, r7
 80164ba:	4650      	mov	r0, sl
 80164bc:	2231      	movs	r2, #49	; 0x31
 80164be:	f005 fc7f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center-14+10,  Y_center+LAB_LOCUS_SIZEY/2+6, '2');
 80164c2:	4639      	mov	r1, r7
 80164c4:	4648      	mov	r0, r9
 80164c6:	2232      	movs	r2, #50	; 0x32
 80164c8:	f005 fc7a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X_center-14+16,  Y_center+LAB_LOCUS_SIZEY/2+6, '8');
 80164cc:	4639      	mov	r1, r7
		
		TFT_DrawChar(0,  Y_center-11, '-');
 80164ce:	f1a5 070b 	sub.w	r7, r5, #11
 80164d2:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X_center-14+16,  Y_center+LAB_LOCUS_SIZEY/2+6, '8');
 80164d4:	4640      	mov	r0, r8
 80164d6:	2238      	movs	r2, #56	; 0x38
 80164d8:	f005 fc72 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 80164dc:	4639      	mov	r1, r7
 80164de:	222d      	movs	r2, #45	; 0x2d
 80164e0:	2000      	movs	r0, #0
 80164e2:	f005 fc6d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 80164e6:	4639      	mov	r1, r7
 80164e8:	2231      	movs	r2, #49	; 0x31
 80164ea:	2005      	movs	r0, #5
 80164ec:	f005 fc68 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 80164f0:	4639      	mov	r1, r7
 80164f2:	2232      	movs	r2, #50	; 0x32
 80164f4:	200a      	movs	r0, #10
 80164f6:	f005 fc63 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 80164fa:	4639      	mov	r1, r7
 80164fc:	2238      	movs	r2, #56	; 0x38
 80164fe:	2010      	movs	r0, #16
 8016500:	f005 fc5e 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 8016504:	4639      	mov	r1, r7
 8016506:	222b      	movs	r2, #43	; 0x2b
 8016508:	20f5      	movs	r0, #245	; 0xf5
 801650a:	f005 fc59 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 801650e:	4639      	mov	r1, r7
 8016510:	2231      	movs	r2, #49	; 0x31
 8016512:	20fa      	movs	r0, #250	; 0xfa
 8016514:	f005 fc54 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 8016518:	4639      	mov	r1, r7
 801651a:	2232      	movs	r2, #50	; 0x32
 801651c:	20ff      	movs	r0, #255	; 0xff
 801651e:	f005 fc4f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
 8016522:	4639      	mov	r1, r7
 8016524:	2238      	movs	r2, #56	; 0x38
 8016526:	f44f 7082 	mov.w	r0, #260	; 0x104
 801652a:	f005 fc49 	bl	801bdc0 <TFT_DrawChar>
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 801652e:	1f67      	subs	r7, r4, #5
 8016530:	9b04      	ldr	r3, [sp, #16]
 8016532:	9600      	str	r6, [sp, #0]
 8016534:	f104 0803 	add.w	r8, r4, #3
 8016538:	b2bf      	uxth	r7, r7
 801653a:	fa1f f888 	uxth.w	r8, r8
 801653e:	4642      	mov	r2, r8
 8016540:	4619      	mov	r1, r3
 8016542:	4638      	mov	r0, r7
 8016544:	f005 f8ec 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 8016548:	9b05      	ldr	r3, [sp, #20]
 801654a:	9600      	str	r6, [sp, #0]
 801654c:	4642      	mov	r2, r8
 801654e:	4619      	mov	r1, r3
 8016550:	4638      	mov	r0, r7
 8016552:	f005 f8e5 	bl	801b720 <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 8016556:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 801655a:	1eec      	subs	r4, r5, #3
 801655c:	3506      	adds	r5, #6
 801655e:	b292      	uxth	r2, r2
 8016560:	b2a4      	uxth	r4, r4
 8016562:	b2ad      	uxth	r5, r5
 8016564:	462b      	mov	r3, r5
 8016566:	4621      	mov	r1, r4
 8016568:	4610      	mov	r0, r2
 801656a:	9600      	str	r6, [sp, #0]
 801656c:	f005 f8d8 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 8016570:	9a03      	ldr	r2, [sp, #12]
 8016572:	9600      	str	r6, [sp, #0]
 8016574:	462b      	mov	r3, r5
 8016576:	4621      	mov	r1, r4
 8016578:	4610      	mov	r0, r2
 801657a:	f005 f8d1 	bl	801b720 <TFT_DrawLine>
 801657e:	b007      	add	sp, #28
 8016580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016584:	20000210 	.word	0x20000210

08016588 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 8016588:	b538      	push	{r3, r4, r5, lr}
 801658a:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 801658c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016590:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 8016592:	f005 fb51 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016596:	2063      	movs	r0, #99	; 0x63
 8016598:	f005 fb54 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801659c:	4816      	ldr	r0, [pc, #88]	; (80165f8 <GUI_Text_CIE_XYZ+0x70>)
 801659e:	f005 fb45 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80165a2:	4629      	mov	r1, r5
 80165a4:	4620      	mov	r0, r4
 80165a6:	2243      	movs	r2, #67	; 0x43
 80165a8:	f005 fc0a 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80165ac:	f104 000d 	add.w	r0, r4, #13
 80165b0:	4629      	mov	r1, r5
 80165b2:	2249      	movs	r2, #73	; 0x49
 80165b4:	b280      	uxth	r0, r0
 80165b6:	f005 fc03 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80165ba:	f104 001b 	add.w	r0, r4, #27
 80165be:	4629      	mov	r1, r5
 80165c0:	2245      	movs	r2, #69	; 0x45
 80165c2:	b280      	uxth	r0, r0
 80165c4:	f005 fbfc 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 80165c8:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80165cc:	4629      	mov	r1, r5
 80165ce:	2258      	movs	r2, #88	; 0x58
 80165d0:	b280      	uxth	r0, r0
 80165d2:	f005 fbf5 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 80165d6:	f104 0041 	add.w	r0, r4, #65	; 0x41
 80165da:	4629      	mov	r1, r5
 80165dc:	2259      	movs	r2, #89	; 0x59
 80165de:	b280      	uxth	r0, r0
 80165e0:	f005 fbee 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 80165e4:	f104 0051 	add.w	r0, r4, #81	; 0x51
 80165e8:	4629      	mov	r1, r5
 80165ea:	225a      	movs	r2, #90	; 0x5a
 80165ec:	b280      	uxth	r0, r0
}
 80165ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 80165f2:	f005 bbe5 	b.w	801bdc0 <TFT_DrawChar>
 80165f6:	bf00      	nop
 80165f8:	200001b0 	.word	0x200001b0

080165fc <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 80165fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8016600:	4f2c      	ldr	r7, [pc, #176]	; (80166b4 <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 8016602:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016606:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016608:	f005 fb16 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801660c:	2063      	movs	r0, #99	; 0x63
 801660e:	f005 fb19 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016612:	4638      	mov	r0, r7
 8016614:	f005 fb0a 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016618:	4629      	mov	r1, r5
 801661a:	4620      	mov	r0, r4
 801661c:	2243      	movs	r2, #67	; 0x43
 801661e:	f005 fbcf 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016622:	f104 000d 	add.w	r0, r4, #13
 8016626:	4629      	mov	r1, r5
 8016628:	2249      	movs	r2, #73	; 0x49
 801662a:	b280      	uxth	r0, r0
 801662c:	f005 fbc8 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016630:	f104 001b 	add.w	r0, r4, #27
 8016634:	4629      	mov	r1, r5
 8016636:	2245      	movs	r2, #69	; 0x45
 8016638:	b280      	uxth	r0, r0
 801663a:	f005 fbc1 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 801663e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8016642:	4629      	mov	r1, r5
 8016644:	222c      	movs	r2, #44	; 0x2c
 8016646:	b280      	uxth	r0, r0
 8016648:	f005 fbba 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 801664c:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 801664e:	481a      	ldr	r0, [pc, #104]	; (80166b8 <GUI_Text_CIE_xy_1931+0xbc>)
 8016650:	f005 faec 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016654:	b2b6      	uxth	r6, r6
 8016656:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801665a:	4631      	mov	r1, r6
 801665c:	2278      	movs	r2, #120	; 0x78
 801665e:	b280      	uxth	r0, r0
 8016660:	f005 fbae 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8016664:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016668:	4631      	mov	r1, r6
 801666a:	2279      	movs	r2, #121	; 0x79
 801666c:	b280      	uxth	r0, r0
 801666e:	f005 fba7 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016672:	4638      	mov	r0, r7
 8016674:	f005 fada 	bl	801bc2c <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801667c:	4629      	mov	r1, r5
 801667e:	2231      	movs	r2, #49	; 0x31
 8016680:	b280      	uxth	r0, r0
 8016682:	f005 fb9d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 8016686:	f104 0085 	add.w	r0, r4, #133	; 0x85
 801668a:	4629      	mov	r1, r5
 801668c:	2231      	movs	r2, #49	; 0x31
 801668e:	b280      	uxth	r0, r0
 8016690:	f005 fb96 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016694:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016698:	4629      	mov	r1, r5
 801669a:	2239      	movs	r2, #57	; 0x39
 801669c:	b280      	uxth	r0, r0
 801669e:	f005 fb8f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 80166a2:	f104 0079 	add.w	r0, r4, #121	; 0x79
 80166a6:	4629      	mov	r1, r5
 80166a8:	2233      	movs	r2, #51	; 0x33
 80166aa:	b280      	uxth	r0, r0


}
 80166ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 80166b0:	f005 bb86 	b.w	801bdc0 <TFT_DrawChar>
 80166b4:	200001b0 	.word	0x200001b0
 80166b8:	200001c0 	.word	0x200001c0

080166bc <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 80166bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166be:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 80166c0:	4f2c      	ldr	r7, [pc, #176]	; (8016774 <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 80166c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80166c6:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80166c8:	f005 fab6 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80166cc:	2063      	movs	r0, #99	; 0x63
 80166ce:	f005 fab9 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80166d2:	4638      	mov	r0, r7
 80166d4:	f005 faaa 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80166d8:	4629      	mov	r1, r5
 80166da:	4620      	mov	r0, r4
 80166dc:	2243      	movs	r2, #67	; 0x43
 80166de:	f005 fb6f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80166e2:	f104 000d 	add.w	r0, r4, #13
 80166e6:	4629      	mov	r1, r5
 80166e8:	2249      	movs	r2, #73	; 0x49
 80166ea:	b280      	uxth	r0, r0
 80166ec:	f005 fb68 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80166f0:	f104 001b 	add.w	r0, r4, #27
 80166f4:	4629      	mov	r1, r5
 80166f6:	2245      	movs	r2, #69	; 0x45
 80166f8:	b280      	uxth	r0, r0
 80166fa:	f005 fb61 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 80166fe:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8016702:	4629      	mov	r1, r5
 8016704:	222c      	movs	r2, #44	; 0x2c
 8016706:	b280      	uxth	r0, r0
 8016708:	f005 fb5a 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 801670c:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 801670e:	481a      	ldr	r0, [pc, #104]	; (8016778 <GUI_Text_CIE_xy_1964+0xbc>)
 8016710:	f005 fa8c 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016714:	b2b6      	uxth	r6, r6
 8016716:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801671a:	4631      	mov	r1, r6
 801671c:	2278      	movs	r2, #120	; 0x78
 801671e:	b280      	uxth	r0, r0
 8016720:	f005 fb4e 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8016724:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016728:	4631      	mov	r1, r6
 801672a:	2279      	movs	r2, #121	; 0x79
 801672c:	b280      	uxth	r0, r0
 801672e:	f005 fb47 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016732:	4638      	mov	r0, r7
 8016734:	f005 fa7a 	bl	801bc2c <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801673c:	4629      	mov	r1, r5
 801673e:	2231      	movs	r2, #49	; 0x31
 8016740:	b280      	uxth	r0, r0
 8016742:	f005 fb3d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016746:	f104 0069 	add.w	r0, r4, #105	; 0x69
 801674a:	4629      	mov	r1, r5
 801674c:	2239      	movs	r2, #57	; 0x39
 801674e:	b280      	uxth	r0, r0
 8016750:	f005 fb36 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 8016754:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8016758:	4629      	mov	r1, r5
 801675a:	2236      	movs	r2, #54	; 0x36
 801675c:	b280      	uxth	r0, r0
 801675e:	f005 fb2f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 8016762:	f104 0087 	add.w	r0, r4, #135	; 0x87
 8016766:	4629      	mov	r1, r5
 8016768:	2234      	movs	r2, #52	; 0x34
 801676a:	b280      	uxth	r0, r0
}
 801676c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 8016770:	f005 bb26 	b.w	801bdc0 <TFT_DrawChar>
 8016774:	200001b0 	.word	0x200001b0
 8016778:	200001c0 	.word	0x200001c0

0801677c <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 801677c:	b538      	push	{r3, r4, r5, lr}
 801677e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016780:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016784:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016786:	f005 fa57 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801678a:	2063      	movs	r0, #99	; 0x63
 801678c:	f005 fa5a 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016790:	481f      	ldr	r0, [pc, #124]	; (8016810 <GUI_Text_CIE_Luv+0x94>)
 8016792:	f005 fa4b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016796:	4621      	mov	r1, r4
 8016798:	4628      	mov	r0, r5
 801679a:	2243      	movs	r2, #67	; 0x43
 801679c:	f005 fb10 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80167a0:	f105 000d 	add.w	r0, r5, #13
 80167a4:	4621      	mov	r1, r4
 80167a6:	2249      	movs	r2, #73	; 0x49
 80167a8:	b280      	uxth	r0, r0
 80167aa:	f005 fb09 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80167ae:	f105 001b 	add.w	r0, r5, #27
 80167b2:	4621      	mov	r1, r4
 80167b4:	2245      	movs	r2, #69	; 0x45
 80167b6:	b280      	uxth	r0, r0
 80167b8:	f005 fb02 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 80167bc:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80167c0:	4621      	mov	r1, r4
 80167c2:	224c      	movs	r2, #76	; 0x4c
 80167c4:	b280      	uxth	r0, r0
 80167c6:	f005 fafb 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 80167ca:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80167ce:	4621      	mov	r1, r4
 80167d0:	2227      	movs	r2, #39	; 0x27
 80167d2:	b280      	uxth	r0, r0
 80167d4:	f005 faf4 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 80167d8:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 80167dc:	4621      	mov	r1, r4
 80167de:	2227      	movs	r2, #39	; 0x27
 80167e0:	b280      	uxth	r0, r0
 80167e2:	f005 faed 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 80167e6:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 80167e8:	480a      	ldr	r0, [pc, #40]	; (8016814 <GUI_Text_CIE_Luv+0x98>)
 80167ea:	f005 fa1f 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 80167ee:	b2a4      	uxth	r4, r4
 80167f0:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80167f4:	4621      	mov	r1, r4
 80167f6:	2275      	movs	r2, #117	; 0x75
 80167f8:	b280      	uxth	r0, r0
 80167fa:	f005 fae1 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 80167fe:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8016802:	4621      	mov	r1, r4
 8016804:	2276      	movs	r2, #118	; 0x76
 8016806:	b280      	uxth	r0, r0
}
 8016808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 801680c:	f005 bad8 	b.w	801bdc0 <TFT_DrawChar>
 8016810:	200001b0 	.word	0x200001b0
 8016814:	200001c0 	.word	0x200001c0

08016818 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 8016818:	b538      	push	{r3, r4, r5, lr}
 801681a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801681c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016820:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016822:	f005 fa09 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016826:	2063      	movs	r0, #99	; 0x63
 8016828:	f005 fa0c 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801682c:	481f      	ldr	r0, [pc, #124]	; (80168ac <GUI_Text_CIE_Lab+0x94>)
 801682e:	f005 f9fd 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016832:	4621      	mov	r1, r4
 8016834:	4628      	mov	r0, r5
 8016836:	2243      	movs	r2, #67	; 0x43
 8016838:	f005 fac2 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801683c:	f105 000d 	add.w	r0, r5, #13
 8016840:	4621      	mov	r1, r4
 8016842:	2249      	movs	r2, #73	; 0x49
 8016844:	b280      	uxth	r0, r0
 8016846:	f005 fabb 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801684a:	f105 001b 	add.w	r0, r5, #27
 801684e:	4621      	mov	r1, r4
 8016850:	2245      	movs	r2, #69	; 0x45
 8016852:	b280      	uxth	r0, r0
 8016854:	f005 fab4 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016858:	f105 0031 	add.w	r0, r5, #49	; 0x31
 801685c:	4621      	mov	r1, r4
 801685e:	224c      	movs	r2, #76	; 0x4c
 8016860:	b280      	uxth	r0, r0
 8016862:	f005 faad 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 8016866:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801686a:	4621      	mov	r1, r4
 801686c:	222a      	movs	r2, #42	; 0x2a
 801686e:	b280      	uxth	r0, r0
 8016870:	f005 faa6 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 8016874:	f105 0069 	add.w	r0, r5, #105	; 0x69
 8016878:	4621      	mov	r1, r4
 801687a:	222a      	movs	r2, #42	; 0x2a
 801687c:	b280      	uxth	r0, r0
 801687e:	f005 fa9f 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 8016882:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016884:	480a      	ldr	r0, [pc, #40]	; (80168b0 <GUI_Text_CIE_Lab+0x98>)
 8016886:	f005 f9d1 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 801688a:	b2a4      	uxth	r4, r4
 801688c:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016890:	4621      	mov	r1, r4
 8016892:	2261      	movs	r2, #97	; 0x61
 8016894:	b280      	uxth	r0, r0
 8016896:	f005 fa93 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 801689a:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 801689e:	4621      	mov	r1, r4
 80168a0:	2262      	movs	r2, #98	; 0x62
 80168a2:	b280      	uxth	r0, r0
}
 80168a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 80168a8:	f005 ba8a 	b.w	801bdc0 <TFT_DrawChar>
 80168ac:	200001b0 	.word	0x200001b0
 80168b0:	200001c0 	.word	0x200001c0

080168b4 <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 80168b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 80168b8:	4e29      	ldr	r6, [pc, #164]	; (8016960 <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 80168ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80168be:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 80168c0:	f005 f9ba 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80168c4:	2063      	movs	r0, #99	; 0x63
 80168c6:	f005 f9bd 	bl	801bc44 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 80168ca:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 80168cc:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 80168ce:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 80168d0:	f005 f9ac 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 80168d4:	f104 000d 	add.w	r0, r4, #13
 80168d8:	4629      	mov	r1, r5
 80168da:	226c      	movs	r2, #108	; 0x6c
 80168dc:	b280      	uxth	r0, r0
 80168de:	f005 fa6f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 80168e2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 80168e6:	4629      	mov	r1, r5
 80168e8:	2274      	movs	r2, #116	; 0x74
 80168ea:	b280      	uxth	r0, r0
 80168ec:	f005 fa68 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 80168f0:	f104 0051 	add.w	r0, r4, #81	; 0x51
 80168f4:	4629      	mov	r1, r5
 80168f6:	2274      	movs	r2, #116	; 0x74
 80168f8:	b280      	uxth	r0, r0
 80168fa:	f005 fa61 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80168fe:	4819      	ldr	r0, [pc, #100]	; (8016964 <GUI_Text_Bluetooth+0xb0>)
 8016900:	f005 f994 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 8016904:	4639      	mov	r1, r7
 8016906:	2242      	movs	r2, #66	; 0x42
 8016908:	4620      	mov	r0, r4
 801690a:	f005 fa59 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801690e:	4630      	mov	r0, r6
 8016910:	f005 f98c 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 8016914:	f104 0017 	add.w	r0, r4, #23
 8016918:	4629      	mov	r1, r5
 801691a:	2275      	movs	r2, #117	; 0x75
 801691c:	b280      	uxth	r0, r0
 801691e:	f005 fa4f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 8016922:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016926:	4629      	mov	r1, r5
 8016928:	2265      	movs	r2, #101	; 0x65
 801692a:	b280      	uxth	r0, r0
 801692c:	f005 fa48 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 8016930:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8016934:	4629      	mov	r1, r5
 8016936:	226f      	movs	r2, #111	; 0x6f
 8016938:	b280      	uxth	r0, r0
 801693a:	f005 fa41 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 801693e:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8016942:	4629      	mov	r1, r5
 8016944:	226f      	movs	r2, #111	; 0x6f
 8016946:	b280      	uxth	r0, r0
 8016948:	f005 fa3a 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 801694c:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8016950:	4629      	mov	r1, r5
 8016952:	2268      	movs	r2, #104	; 0x68
 8016954:	b280      	uxth	r0, r0
}
 8016956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 801695a:	f005 ba31 	b.w	801bdc0 <TFT_DrawChar>
 801695e:	bf00      	nop
 8016960:	200001c0 	.word	0x200001c0
 8016964:	200001b0 	.word	0x200001b0

08016968 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8016968:	b538      	push	{r3, r4, r5, lr}
 801696a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801696c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016970:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016972:	f005 f961 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016976:	2063      	movs	r0, #99	; 0x63
 8016978:	f005 f964 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801697c:	4804      	ldr	r0, [pc, #16]	; (8016990 <GUI_Text_A+0x28>)
 801697e:	f005 f955 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 8016982:	4629      	mov	r1, r5
 8016984:	4620      	mov	r0, r4
 8016986:	2241      	movs	r2, #65	; 0x41
}
 8016988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 801698c:	f005 ba18 	b.w	801bdc0 <TFT_DrawChar>
 8016990:	200001b0 	.word	0x200001b0

08016994 <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 8016994:	b538      	push	{r3, r4, r5, lr}
 8016996:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016998:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801699c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801699e:	f005 f94b 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80169a2:	2063      	movs	r0, #99	; 0x63
 80169a4:	f005 f94e 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80169a8:	480b      	ldr	r0, [pc, #44]	; (80169d8 <GUI_Text_D65+0x44>)
 80169aa:	f005 f93f 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 80169ae:	4629      	mov	r1, r5
 80169b0:	4620      	mov	r0, r4
 80169b2:	2244      	movs	r2, #68	; 0x44
 80169b4:	f005 fa04 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 80169b8:	f104 000f 	add.w	r0, r4, #15
 80169bc:	4629      	mov	r1, r5
 80169be:	2236      	movs	r2, #54	; 0x36
 80169c0:	b280      	uxth	r0, r0
 80169c2:	f005 f9fd 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 80169c6:	f104 0020 	add.w	r0, r4, #32
 80169ca:	4629      	mov	r1, r5
 80169cc:	2235      	movs	r2, #53	; 0x35
 80169ce:	b280      	uxth	r0, r0
}
 80169d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 80169d4:	f005 b9f4 	b.w	801bdc0 <TFT_DrawChar>
 80169d8:	200001b0 	.word	0x200001b0

080169dc <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 80169dc:	b538      	push	{r3, r4, r5, lr}
 80169de:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80169e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80169e4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80169e6:	f005 f927 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80169ea:	2063      	movs	r0, #99	; 0x63
 80169ec:	f005 f92a 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80169f0:	4804      	ldr	r0, [pc, #16]	; (8016a04 <GUI_Text_C+0x28>)
 80169f2:	f005 f91b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80169f6:	4629      	mov	r1, r5
 80169f8:	4620      	mov	r0, r4
 80169fa:	2243      	movs	r2, #67	; 0x43
}
 80169fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 8016a00:	f005 b9de 	b.w	801bdc0 <TFT_DrawChar>
 8016a04:	200001b0 	.word	0x200001b0

08016a08 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 8016a08:	b538      	push	{r3, r4, r5, lr}
 8016a0a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016a0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016a10:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016a12:	f005 f911 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016a16:	2063      	movs	r0, #99	; 0x63
 8016a18:	f005 f914 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016a1c:	480b      	ldr	r0, [pc, #44]	; (8016a4c <GUI_Text_D50+0x44>)
 8016a1e:	f005 f905 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016a22:	4629      	mov	r1, r5
 8016a24:	4620      	mov	r0, r4
 8016a26:	2244      	movs	r2, #68	; 0x44
 8016a28:	f005 f9ca 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016a2c:	f104 000f 	add.w	r0, r4, #15
 8016a30:	4629      	mov	r1, r5
 8016a32:	2235      	movs	r2, #53	; 0x35
 8016a34:	b280      	uxth	r0, r0
 8016a36:	f005 f9c3 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 8016a3a:	f104 001f 	add.w	r0, r4, #31
 8016a3e:	4629      	mov	r1, r5
 8016a40:	2230      	movs	r2, #48	; 0x30
 8016a42:	b280      	uxth	r0, r0
}
 8016a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 8016a48:	f005 b9ba 	b.w	801bdc0 <TFT_DrawChar>
 8016a4c:	200001b0 	.word	0x200001b0

08016a50 <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 8016a50:	b538      	push	{r3, r4, r5, lr}
 8016a52:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016a54:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016a58:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016a5a:	f005 f8ed 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016a5e:	2063      	movs	r0, #99	; 0x63
 8016a60:	f005 f8f0 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016a64:	480b      	ldr	r0, [pc, #44]	; (8016a94 <GUI_Text_D55+0x44>)
 8016a66:	f005 f8e1 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016a6a:	4629      	mov	r1, r5
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	2244      	movs	r2, #68	; 0x44
 8016a70:	f005 f9a6 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016a74:	f104 000f 	add.w	r0, r4, #15
 8016a78:	4629      	mov	r1, r5
 8016a7a:	2235      	movs	r2, #53	; 0x35
 8016a7c:	b280      	uxth	r0, r0
 8016a7e:	f005 f99f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016a82:	f104 001f 	add.w	r0, r4, #31
 8016a86:	4629      	mov	r1, r5
 8016a88:	2235      	movs	r2, #53	; 0x35
 8016a8a:	b280      	uxth	r0, r0
}
 8016a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016a90:	f005 b996 	b.w	801bdc0 <TFT_DrawChar>
 8016a94:	200001b0 	.word	0x200001b0

08016a98 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8016a98:	b538      	push	{r3, r4, r5, lr}
 8016a9a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016a9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016aa0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016aa2:	f005 f8c9 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016aa6:	2063      	movs	r0, #99	; 0x63
 8016aa8:	f005 f8cc 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016aac:	480b      	ldr	r0, [pc, #44]	; (8016adc <GUI_Text_D75+0x44>)
 8016aae:	f005 f8bd 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016ab2:	4629      	mov	r1, r5
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	2244      	movs	r2, #68	; 0x44
 8016ab8:	f005 f982 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8016abc:	f104 000f 	add.w	r0, r4, #15
 8016ac0:	4629      	mov	r1, r5
 8016ac2:	2237      	movs	r2, #55	; 0x37
 8016ac4:	b280      	uxth	r0, r0
 8016ac6:	f005 f97b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016aca:	f104 001f 	add.w	r0, r4, #31
 8016ace:	4629      	mov	r1, r5
 8016ad0:	2235      	movs	r2, #53	; 0x35
 8016ad2:	b280      	uxth	r0, r0
}
 8016ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016ad8:	f005 b972 	b.w	801bdc0 <TFT_DrawChar>
 8016adc:	200001b0 	.word	0x200001b0

08016ae0 <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8016ae0:	b538      	push	{r3, r4, r5, lr}
 8016ae2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016ae4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016ae8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016aea:	f005 f8a5 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016aee:	2063      	movs	r0, #99	; 0x63
 8016af0:	f005 f8a8 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016af4:	4815      	ldr	r0, [pc, #84]	; (8016b4c <GUI_Text_CIE_xy+0x6c>)
 8016af6:	f005 f899 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016afa:	4621      	mov	r1, r4
 8016afc:	4628      	mov	r0, r5
 8016afe:	2243      	movs	r2, #67	; 0x43
 8016b00:	f005 f95e 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016b04:	f105 000d 	add.w	r0, r5, #13
 8016b08:	4621      	mov	r1, r4
 8016b0a:	2249      	movs	r2, #73	; 0x49
 8016b0c:	b280      	uxth	r0, r0
 8016b0e:	f005 f957 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016b12:	f105 001b 	add.w	r0, r5, #27
 8016b16:	4621      	mov	r1, r4
 8016b18:	2245      	movs	r2, #69	; 0x45
 8016b1a:	b280      	uxth	r0, r0
 8016b1c:	f005 f950 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016b20:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 8016b22:	480b      	ldr	r0, [pc, #44]	; (8016b50 <GUI_Text_CIE_xy+0x70>)
 8016b24:	f005 f882 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016b28:	b2a4      	uxth	r4, r4
 8016b2a:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016b2e:	4621      	mov	r1, r4
 8016b30:	2278      	movs	r2, #120	; 0x78
 8016b32:	b280      	uxth	r0, r0
 8016b34:	f005 f944 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 8016b38:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 8016b3c:	4621      	mov	r1, r4
 8016b3e:	2279      	movs	r2, #121	; 0x79
 8016b40:	b280      	uxth	r0, r0
}
 8016b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 8016b46:	f005 b93b 	b.w	801bdc0 <TFT_DrawChar>
 8016b4a:	bf00      	nop
 8016b4c:	200001b0 	.word	0x200001b0
 8016b50:	200001c0 	.word	0x200001c0

08016b54 <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 8016b54:	b538      	push	{r3, r4, r5, lr}
 8016b56:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016b58:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016b5c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016b5e:	f005 f86b 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b62:	2063      	movs	r0, #99	; 0x63
 8016b64:	f005 f86e 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016b68:	480b      	ldr	r0, [pc, #44]	; (8016b98 <GUI_Text_CRI+0x44>)
 8016b6a:	f005 f85f 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 8016b6e:	f104 001b 	add.w	r0, r4, #27
 8016b72:	4629      	mov	r1, r5
 8016b74:	2249      	movs	r2, #73	; 0x49
 8016b76:	b280      	uxth	r0, r0
 8016b78:	f005 f922 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8016b7c:	4629      	mov	r1, r5
 8016b7e:	4620      	mov	r0, r4
 8016b80:	2243      	movs	r2, #67	; 0x43
 8016b82:	f005 f91d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 8016b86:	f104 000d 	add.w	r0, r4, #13
 8016b8a:	4629      	mov	r1, r5
 8016b8c:	2252      	movs	r2, #82	; 0x52
 8016b8e:	b280      	uxth	r0, r0
}
 8016b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 8016b94:	f005 b914 	b.w	801bdc0 <TFT_DrawChar>
 8016b98:	200001b0 	.word	0x200001b0

08016b9c <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8016b9c:	b538      	push	{r3, r4, r5, lr}
 8016b9e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016ba0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016ba4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016ba6:	f005 f847 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016baa:	2063      	movs	r0, #99	; 0x63
 8016bac:	f005 f84a 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016bb0:	480b      	ldr	r0, [pc, #44]	; (8016be0 <GUI_Text_CQS+0x44>)
 8016bb2:	f005 f83b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	4620      	mov	r0, r4
 8016bba:	2243      	movs	r2, #67	; 0x43
 8016bbc:	f005 f900 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8016bc0:	f104 000d 	add.w	r0, r4, #13
 8016bc4:	4629      	mov	r1, r5
 8016bc6:	2251      	movs	r2, #81	; 0x51
 8016bc8:	b280      	uxth	r0, r0
 8016bca:	f005 f8f9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8016bce:	f104 001c 	add.w	r0, r4, #28
 8016bd2:	4629      	mov	r1, r5
 8016bd4:	2253      	movs	r2, #83	; 0x53
 8016bd6:	b280      	uxth	r0, r0
}
 8016bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8016bdc:	f005 b8f0 	b.w	801bdc0 <TFT_DrawChar>
 8016be0:	200001b0 	.word	0x200001b0

08016be4 <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 8016be4:	b538      	push	{r3, r4, r5, lr}
 8016be6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016be8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016bec:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016bee:	f005 f823 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016bf2:	2063      	movs	r0, #99	; 0x63
 8016bf4:	f005 f826 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016bf8:	480b      	ldr	r0, [pc, #44]	; (8016c28 <GUI_Text_SP+0x44>)
 8016bfa:	f005 f817 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 8016bfe:	f104 000d 	add.w	r0, r4, #13
 8016c02:	4629      	mov	r1, r5
 8016c04:	222f      	movs	r2, #47	; 0x2f
 8016c06:	b280      	uxth	r0, r0
 8016c08:	f005 f8da 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 8016c0c:	4629      	mov	r1, r5
 8016c0e:	4620      	mov	r0, r4
 8016c10:	2253      	movs	r2, #83	; 0x53
 8016c12:	f005 f8d5 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 8016c16:	f104 001c 	add.w	r0, r4, #28
 8016c1a:	4629      	mov	r1, r5
 8016c1c:	2250      	movs	r2, #80	; 0x50
 8016c1e:	b280      	uxth	r0, r0
}
 8016c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 8016c24:	f005 b8cc 	b.w	801bdc0 <TFT_DrawChar>
 8016c28:	200001b0 	.word	0x200001b0

08016c2c <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 8016c2c:	b538      	push	{r3, r4, r5, lr}
 8016c2e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016c30:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c34:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016c36:	f004 ffff 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c3a:	2063      	movs	r0, #99	; 0x63
 8016c3c:	f005 f802 	bl	801bc44 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016c40:	480a      	ldr	r0, [pc, #40]	; (8016c6c <GUI_Text_lambda_d+0x40>)
 8016c42:	f004 fff3 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 8016c46:	4629      	mov	r1, r5
 8016c48:	227f      	movs	r2, #127	; 0x7f
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	f005 f8b8 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016c50:	4807      	ldr	r0, [pc, #28]	; (8016c70 <GUI_Text_lambda_d+0x44>)
 8016c52:	f004 ffeb 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 8016c56:	1de9      	adds	r1, r5, #7
 8016c58:	f104 000f 	add.w	r0, r4, #15
 8016c5c:	2264      	movs	r2, #100	; 0x64
 8016c5e:	b289      	uxth	r1, r1
 8016c60:	b280      	uxth	r0, r0
}
 8016c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 8016c66:	f005 b8ab 	b.w	801bdc0 <TFT_DrawChar>
 8016c6a:	bf00      	nop
 8016c6c:	200001b0 	.word	0x200001b0
 8016c70:	200001c0 	.word	0x200001c0

08016c74 <GUI_Text_lambda_c>:

void GUI_Text_lambda_c(uint16_t X, uint16_t Y)
{
 8016c74:	b538      	push	{r3, r4, r5, lr}
 8016c76:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016c78:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c7c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016c7e:	f004 ffdb 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c82:	2063      	movs	r0, #99	; 0x63
 8016c84:	f004 ffde 	bl	801bc44 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016c88:	480a      	ldr	r0, [pc, #40]	; (8016cb4 <GUI_Text_lambda_c+0x40>)
 8016c8a:	f004 ffcf 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 8016c8e:	4629      	mov	r1, r5
 8016c90:	227f      	movs	r2, #127	; 0x7f
 8016c92:	4620      	mov	r0, r4
 8016c94:	f005 f894 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016c98:	4807      	ldr	r0, [pc, #28]	; (8016cb8 <GUI_Text_lambda_c+0x44>)
 8016c9a:	f004 ffc7 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'c');
 8016c9e:	1de9      	adds	r1, r5, #7
 8016ca0:	f104 000f 	add.w	r0, r4, #15
 8016ca4:	2263      	movs	r2, #99	; 0x63
 8016ca6:	b289      	uxth	r1, r1
 8016ca8:	b280      	uxth	r0, r0
}
 8016caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'c');
 8016cae:	f005 b887 	b.w	801bdc0 <TFT_DrawChar>
 8016cb2:	bf00      	nop
 8016cb4:	200001b0 	.word	0x200001b0
 8016cb8:	200001c0 	.word	0x200001c0

08016cbc <GUI_Text_V_lambda>:

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 8016cbc:	b538      	push	{r3, r4, r5, lr}
 8016cbe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016cc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016cc4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016cc6:	f004 ffb7 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016cca:	2063      	movs	r0, #99	; 0x63
 8016ccc:	f004 ffba 	bl	801bc44 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016cd0:	4824      	ldr	r0, [pc, #144]	; (8016d64 <GUI_Text_V_lambda+0xa8>)
 8016cd2:	f004 ffab 	bl	801bc2c <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 8016cd6:	f104 000d 	add.w	r0, r4, #13
 8016cda:	4629      	mov	r1, r5
 8016cdc:	2228      	movs	r2, #40	; 0x28
 8016cde:	b280      	uxth	r0, r0
 8016ce0:	f005 f86e 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 8016ce4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016ce8:	4629      	mov	r1, r5
 8016cea:	2229      	movs	r2, #41	; 0x29
 8016cec:	b280      	uxth	r0, r0
 8016cee:	f005 f867 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 8016cf2:	4629      	mov	r1, r5
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	2256      	movs	r2, #86	; 0x56
 8016cf8:	f005 f862 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 8016cfc:	f104 001a 	add.w	r0, r4, #26
 8016d00:	4629      	mov	r1, r5
 8016d02:	227f      	movs	r2, #127	; 0x7f
 8016d04:	b280      	uxth	r0, r0
 8016d06:	f005 f85b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 8016d0a:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8016d0e:	4629      	mov	r1, r5
 8016d10:	222f      	movs	r2, #47	; 0x2f
 8016d12:	b280      	uxth	r0, r0
 8016d14:	f005 f854 	bl	801bdc0 <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8016d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016d1c:	4629      	mov	r1, r5
 8016d1e:	2227      	movs	r2, #39	; 0x27
 8016d20:	b280      	uxth	r0, r0
 8016d22:	f005 f84d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8016d26:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8016d2a:	4629      	mov	r1, r5
 8016d2c:	2228      	movs	r2, #40	; 0x28
 8016d2e:	b280      	uxth	r0, r0
 8016d30:	f005 f846 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8016d34:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8016d38:	4629      	mov	r1, r5
 8016d3a:	2229      	movs	r2, #41	; 0x29
 8016d3c:	b280      	uxth	r0, r0
 8016d3e:	f005 f83f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 8016d42:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8016d46:	4629      	mov	r1, r5
 8016d48:	2256      	movs	r2, #86	; 0x56
 8016d4a:	b280      	uxth	r0, r0
 8016d4c:	f005 f838 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 8016d50:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8016d54:	4629      	mov	r1, r5
 8016d56:	227f      	movs	r2, #127	; 0x7f
 8016d58:	b280      	uxth	r0, r0
		
}
 8016d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 8016d5e:	f005 b82f 	b.w	801bdc0 <TFT_DrawChar>
 8016d62:	bf00      	nop
 8016d64:	200001b0 	.word	0x200001b0

08016d68 <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016d6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016d70:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016d72:	f004 ff61 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d76:	2063      	movs	r0, #99	; 0x63
 8016d78:	f004 ff64 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016d7c:	4808      	ldr	r0, [pc, #32]	; (8016da0 <GUI_Text_deltaE+0x38>)
 8016d7e:	f004 ff55 	bl	801bc2c <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 8016d82:	4629      	mov	r1, r5
 8016d84:	4620      	mov	r0, r4
 8016d86:	2280      	movs	r2, #128	; 0x80
 8016d88:	f005 f81a 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 8016d8c:	f104 000e 	add.w	r0, r4, #14
 8016d90:	4629      	mov	r1, r5
 8016d92:	2245      	movs	r2, #69	; 0x45
 8016d94:	b280      	uxth	r0, r0
}
 8016d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 8016d9a:	f005 b811 	b.w	801bdc0 <TFT_DrawChar>
 8016d9e:	bf00      	nop
 8016da0:	200001b0 	.word	0x200001b0

08016da4 <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8016da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016da8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016daa:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016dae:	4616      	mov	r6, r2
 8016db0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016db2:	f004 ff41 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016db6:	2063      	movs	r0, #99	; 0x63
 8016db8:	f004 ff44 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8016dbc:	482b      	ldr	r0, [pc, #172]	; (8016e6c <GUI_TextEn_umol+0xc8>)
 8016dbe:	f004 ff35 	bl	801bc2c <TFT_SetFont>
	
	if(deg){
 8016dc2:	2e00      	cmp	r6, #0
 8016dc4:	d050      	beq.n	8016e68 <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 8016dc6:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8016dc8:	4629      	mov	r1, r5
 8016dca:	4620      	mov	r0, r4
 8016dcc:	f004 fff8 	bl	801bdc0 <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016dd0:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016dd4:	f104 0008 	add.w	r0, r4, #8
 8016dd8:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016dda:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016ddc:	222c      	movs	r2, #44	; 0x2c
 8016dde:	b280      	uxth	r0, r0
 8016de0:	f004 ffee 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016de4:	4629      	mov	r1, r5
 8016de6:	4638      	mov	r0, r7
 8016de8:	222e      	movs	r2, #46	; 0x2e
 8016dea:	f004 ffe9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 8016dee:	f104 0016 	add.w	r0, r4, #22
 8016df2:	4629      	mov	r1, r5
 8016df4:	222b      	movs	r2, #43	; 0x2b
 8016df6:	b280      	uxth	r0, r0
 8016df8:	f004 ffe2 	bl	801bdc0 <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016dfc:	f105 030a 	add.w	r3, r5, #10
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016e06:	f104 0219 	add.w	r2, r4, #25
 8016e0a:	4619      	mov	r1, r3
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	f8cd 8000 	str.w	r8, [sp]
 8016e12:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8016e14:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016e18:	f004 fc82 	bl	801b720 <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8016e1c:	b2b6      	uxth	r6, r6
 8016e1e:	f104 000a 	add.w	r0, r4, #10
 8016e22:	4631      	mov	r1, r6
 8016e24:	223b      	movs	r2, #59	; 0x3b
 8016e26:	b280      	uxth	r0, r0
 8016e28:	f004 ffca 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 8016e2c:	1ca0      	adds	r0, r4, #2
 8016e2e:	4631      	mov	r1, r6
 8016e30:	222c      	movs	r2, #44	; 0x2c
 8016e32:	b280      	uxth	r0, r0
 8016e34:	f004 ffc4 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8016e38:	f105 030f 	add.w	r3, r5, #15
 8016e3c:	f104 0211 	add.w	r2, r4, #17
 8016e40:	f105 010e 	add.w	r1, r5, #14
 8016e44:	4638      	mov	r0, r7
 8016e46:	f8cd 8000 	str.w	r8, [sp]
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	b292      	uxth	r2, r2
 8016e4e:	b289      	uxth	r1, r1
 8016e50:	f004 fcdb 	bl	801b80a <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8016e54:	f104 0013 	add.w	r0, r4, #19
 8016e58:	2232      	movs	r2, #50	; 0x32
 8016e5a:	4631      	mov	r1, r6
 8016e5c:	b280      	uxth	r0, r0
}
 8016e5e:	b002      	add	sp, #8
 8016e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8016e64:	f004 bfac 	b.w	801bdc0 <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 8016e68:	223a      	movs	r2, #58	; 0x3a
 8016e6a:	e7ad      	b.n	8016dc8 <GUI_TextEn_umol+0x24>
 8016e6c:	20000190 	.word	0x20000190

08016e70 <GUI_Text_On>:

void GUI_Text_On(uint16_t X, uint16_t Y)
{
 8016e70:	b538      	push	{r3, r4, r5, lr}
 8016e72:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016e74:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e78:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016e7a:	f004 fedd 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e7e:	2063      	movs	r0, #99	; 0x63
 8016e80:	f004 fee0 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016e84:	480a      	ldr	r0, [pc, #40]	; (8016eb0 <GUI_Text_On+0x40>)
 8016e86:	f004 fed1 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8016e8a:	4629      	mov	r1, r5
 8016e8c:	224f      	movs	r2, #79	; 0x4f
 8016e8e:	4620      	mov	r0, r4
 8016e90:	f004 ff96 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016e94:	4807      	ldr	r0, [pc, #28]	; (8016eb4 <GUI_Text_On+0x44>)
 8016e96:	f004 fec9 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8016e9a:	1ca9      	adds	r1, r5, #2
 8016e9c:	f104 0010 	add.w	r0, r4, #16
 8016ea0:	226e      	movs	r2, #110	; 0x6e
 8016ea2:	b289      	uxth	r1, r1
 8016ea4:	b280      	uxth	r0, r0
	
}
 8016ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 8016eaa:	f004 bf89 	b.w	801bdc0 <TFT_DrawChar>
 8016eae:	bf00      	nop
 8016eb0:	200001b0 	.word	0x200001b0
 8016eb4:	200001c0 	.word	0x200001c0

08016eb8 <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 8016eb8:	b570      	push	{r4, r5, r6, lr}
 8016eba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016ebc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016ec0:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8016ec2:	f004 feb9 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016ec6:	2063      	movs	r0, #99	; 0x63
 8016ec8:	f004 febc 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 8016ecc:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016ece:	480e      	ldr	r0, [pc, #56]	; (8016f08 <GUI_Text_Off+0x50>)
 8016ed0:	f004 feac 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 8016ed4:	b2a4      	uxth	r4, r4
 8016ed6:	f105 000d 	add.w	r0, r5, #13
 8016eda:	4621      	mov	r1, r4
 8016edc:	2266      	movs	r2, #102	; 0x66
 8016ede:	b280      	uxth	r0, r0
 8016ee0:	f004 ff6e 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 8016ee4:	f105 0017 	add.w	r0, r5, #23
 8016ee8:	4621      	mov	r1, r4
 8016eea:	2266      	movs	r2, #102	; 0x66
 8016eec:	b280      	uxth	r0, r0
 8016eee:	f004 ff67 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016ef2:	4806      	ldr	r0, [pc, #24]	; (8016f0c <GUI_Text_Off+0x54>)
 8016ef4:	f004 fe9a 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8016ef8:	4631      	mov	r1, r6
 8016efa:	4628      	mov	r0, r5
 8016efc:	224f      	movs	r2, #79	; 0x4f
}
 8016efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 8016f02:	f004 bf5d 	b.w	801bdc0 <TFT_DrawChar>
 8016f06:	bf00      	nop
 8016f08:	200001c0 	.word	0x200001c0
 8016f0c:	200001b0 	.word	0x200001b0

08016f10 <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 8016f10:	b538      	push	{r3, r4, r5, lr}
 8016f12:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016f14:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f18:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016f1a:	f004 fe8d 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f1e:	2063      	movs	r0, #99	; 0x63
 8016f20:	f004 fe90 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016f24:	4815      	ldr	r0, [pc, #84]	; (8016f7c <GUI_Text_EbEr+0x6c>)
 8016f26:	f004 fe81 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016f2a:	1ca1      	adds	r1, r4, #2
 8016f2c:	f105 0013 	add.w	r0, r5, #19
 8016f30:	222c      	movs	r2, #44	; 0x2c
 8016f32:	b289      	uxth	r1, r1
 8016f34:	b280      	uxth	r0, r0
 8016f36:	f004 ff43 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 8016f3a:	4621      	mov	r1, r4
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	2245      	movs	r2, #69	; 0x45
 8016f40:	f004 ff3e 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 8016f44:	f105 0020 	add.w	r0, r5, #32
 8016f48:	4621      	mov	r1, r4
 8016f4a:	2245      	movs	r2, #69	; 0x45
 8016f4c:	b280      	uxth	r0, r0
 8016f4e:	f004 ff37 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8016f52:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8016f54:	480a      	ldr	r0, [pc, #40]	; (8016f80 <GUI_Text_EbEr+0x70>)
 8016f56:	f004 fe69 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8016f5a:	b2a4      	uxth	r4, r4
 8016f5c:	f105 0012 	add.w	r0, r5, #18
 8016f60:	4621      	mov	r1, r4
 8016f62:	2242      	movs	r2, #66	; 0x42
 8016f64:	b280      	uxth	r0, r0
 8016f66:	f004 ff2b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 8016f6a:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8016f6e:	4621      	mov	r1, r4
 8016f70:	2252      	movs	r2, #82	; 0x52
 8016f72:	b280      	uxth	r0, r0
}
 8016f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 8016f78:	f004 bf22 	b.w	801bdc0 <TFT_DrawChar>
 8016f7c:	200001b0 	.word	0x200001b0
 8016f80:	20000220 	.word	0x20000220

08016f84 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 8016f84:	b538      	push	{r3, r4, r5, lr}
 8016f86:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016f88:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f8c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016f8e:	f004 fe53 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f92:	2063      	movs	r0, #99	; 0x63
 8016f94:	f004 fe56 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016f98:	4815      	ldr	r0, [pc, #84]	; (8016ff0 <GUI_Text_LbLr+0x6c>)
 8016f9a:	f004 fe47 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016f9e:	1ca1      	adds	r1, r4, #2
 8016fa0:	f105 0013 	add.w	r0, r5, #19
 8016fa4:	222c      	movs	r2, #44	; 0x2c
 8016fa6:	b289      	uxth	r1, r1
 8016fa8:	b280      	uxth	r0, r0
 8016faa:	f004 ff09 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 8016fae:	4621      	mov	r1, r4
 8016fb0:	4628      	mov	r0, r5
 8016fb2:	224c      	movs	r2, #76	; 0x4c
 8016fb4:	f004 ff04 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 8016fb8:	f105 001e 	add.w	r0, r5, #30
 8016fbc:	4621      	mov	r1, r4
 8016fbe:	224c      	movs	r2, #76	; 0x4c
 8016fc0:	b280      	uxth	r0, r0
 8016fc2:	f004 fefd 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8016fc6:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8016fc8:	480a      	ldr	r0, [pc, #40]	; (8016ff4 <GUI_Text_LbLr+0x70>)
 8016fca:	f004 fe2f 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8016fce:	b2a4      	uxth	r4, r4
 8016fd0:	f105 0012 	add.w	r0, r5, #18
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	2242      	movs	r2, #66	; 0x42
 8016fd8:	b280      	uxth	r0, r0
 8016fda:	f004 fef1 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 8016fde:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8016fe2:	4621      	mov	r1, r4
 8016fe4:	2252      	movs	r2, #82	; 0x52
 8016fe6:	b280      	uxth	r0, r0
}
 8016fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 8016fec:	f004 bee8 	b.w	801bdc0 <TFT_DrawChar>
 8016ff0:	200001b0 	.word	0x200001b0
 8016ff4:	20000220 	.word	0x20000220

08016ff8 <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 8016ff8:	b538      	push	{r3, r4, r5, lr}
 8016ffa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016ffc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 8017000:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017002:	f004 fe19 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017006:	2063      	movs	r0, #99	; 0x63
 8017008:	f004 fe1c 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801700c:	481f      	ldr	r0, [pc, #124]	; (801708c <GUI_TextEn_Language+0x94>)
 801700e:	f004 fe0d 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8017012:	4621      	mov	r1, r4
 8017014:	224c      	movs	r2, #76	; 0x4c
 8017016:	4628      	mov	r0, r5
 8017018:	f004 fed2 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 801701c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801701e:	481c      	ldr	r0, [pc, #112]	; (8017090 <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8017020:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017022:	f004 fe03 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 8017026:	f105 000e 	add.w	r0, r5, #14
 801702a:	4621      	mov	r1, r4
 801702c:	2261      	movs	r2, #97	; 0x61
 801702e:	b280      	uxth	r0, r0
 8017030:	f004 fec6 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8017034:	f105 001a 	add.w	r0, r5, #26
 8017038:	4621      	mov	r1, r4
 801703a:	226e      	movs	r2, #110	; 0x6e
 801703c:	b280      	uxth	r0, r0
 801703e:	f004 febf 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 8017042:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8017046:	4621      	mov	r1, r4
 8017048:	2267      	movs	r2, #103	; 0x67
 801704a:	b280      	uxth	r0, r0
 801704c:	f004 feb8 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8017050:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8017054:	4621      	mov	r1, r4
 8017056:	2261      	movs	r2, #97	; 0x61
 8017058:	b280      	uxth	r0, r0
 801705a:	f004 feb1 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 801705e:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8017062:	4621      	mov	r1, r4
 8017064:	2275      	movs	r2, #117	; 0x75
 8017066:	b280      	uxth	r0, r0
 8017068:	f004 feaa 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 801706c:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8017070:	4621      	mov	r1, r4
 8017072:	2267      	movs	r2, #103	; 0x67
 8017074:	b280      	uxth	r0, r0
 8017076:	f004 fea3 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 801707a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801707e:	4621      	mov	r1, r4
 8017080:	2265      	movs	r2, #101	; 0x65
 8017082:	b280      	uxth	r0, r0
}
 8017084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 8017088:	f004 be9a 	b.w	801bdc0 <TFT_DrawChar>
 801708c:	200001b8 	.word	0x200001b8
 8017090:	200001c8 	.word	0x200001c8

08017094 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 8017094:	b538      	push	{r3, r4, r5, lr}
 8017096:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017098:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801709c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801709e:	f004 fdcb 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170a2:	2063      	movs	r0, #99	; 0x63
 80170a4:	f004 fdce 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80170a8:	481c      	ldr	r0, [pc, #112]	; (801711c <GUI_TextEn_English+0x88>)
 80170aa:	f004 fdbf 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 80170ae:	4621      	mov	r1, r4
 80170b0:	2245      	movs	r2, #69	; 0x45
 80170b2:	4628      	mov	r0, r5
 80170b4:	f004 fe84 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 80170b8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80170ba:	4819      	ldr	r0, [pc, #100]	; (8017120 <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 80170bc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80170be:	f004 fdb5 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 80170c2:	f105 0010 	add.w	r0, r5, #16
 80170c6:	4621      	mov	r1, r4
 80170c8:	226e      	movs	r2, #110	; 0x6e
 80170ca:	b280      	uxth	r0, r0
 80170cc:	f004 fe78 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 80170d0:	f105 001d 	add.w	r0, r5, #29
 80170d4:	4621      	mov	r1, r4
 80170d6:	2267      	movs	r2, #103	; 0x67
 80170d8:	b280      	uxth	r0, r0
 80170da:	f004 fe71 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 80170de:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 80170e2:	4621      	mov	r1, r4
 80170e4:	226c      	movs	r2, #108	; 0x6c
 80170e6:	b280      	uxth	r0, r0
 80170e8:	f004 fe6a 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 80170ec:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 80170f0:	4621      	mov	r1, r4
 80170f2:	2269      	movs	r2, #105	; 0x69
 80170f4:	b280      	uxth	r0, r0
 80170f6:	f004 fe63 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 80170fa:	f105 0035 	add.w	r0, r5, #53	; 0x35
 80170fe:	4621      	mov	r1, r4
 8017100:	2273      	movs	r2, #115	; 0x73
 8017102:	b280      	uxth	r0, r0
 8017104:	f004 fe5c 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 8017108:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801710c:	4621      	mov	r1, r4
 801710e:	2268      	movs	r2, #104	; 0x68
 8017110:	b280      	uxth	r0, r0
	

}
 8017112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 8017116:	f004 be53 	b.w	801bdc0 <TFT_DrawChar>
 801711a:	bf00      	nop
 801711c:	200001b8 	.word	0x200001b8
 8017120:	200001c8 	.word	0x200001c8

08017124 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 8017124:	b538      	push	{r3, r4, r5, lr}
 8017126:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017128:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801712c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801712e:	f004 fd83 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017132:	2063      	movs	r0, #99	; 0x63
 8017134:	f004 fd86 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017138:	4811      	ldr	r0, [pc, #68]	; (8017180 <GUI_TextEn_Info+0x5c>)
 801713a:	f004 fd77 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 801713e:	4621      	mov	r1, r4
 8017140:	2249      	movs	r2, #73	; 0x49
 8017142:	4628      	mov	r0, r5
 8017144:	f004 fe3c 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 8017148:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801714a:	480e      	ldr	r0, [pc, #56]	; (8017184 <GUI_TextEn_Info+0x60>)
 801714c:	f004 fd6e 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8017150:	b2a4      	uxth	r4, r4
 8017152:	f105 0012 	add.w	r0, r5, #18
 8017156:	4621      	mov	r1, r4
 8017158:	2266      	movs	r2, #102	; 0x66
 801715a:	b280      	uxth	r0, r0
 801715c:	f004 fe30 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 8017160:	f105 0008 	add.w	r0, r5, #8
 8017164:	4621      	mov	r1, r4
 8017166:	226e      	movs	r2, #110	; 0x6e
 8017168:	b280      	uxth	r0, r0
 801716a:	f004 fe29 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 801716e:	f105 001d 	add.w	r0, r5, #29
 8017172:	4621      	mov	r1, r4
 8017174:	226f      	movs	r2, #111	; 0x6f
 8017176:	b280      	uxth	r0, r0
}
 8017178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 801717c:	f004 be20 	b.w	801bdc0 <TFT_DrawChar>
 8017180:	200001b8 	.word	0x200001b8
 8017184:	200001c8 	.word	0x200001c8

08017188 <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 8017188:	b538      	push	{r3, r4, r5, lr}
 801718a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801718c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017190:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017192:	f004 fd51 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017196:	2063      	movs	r0, #99	; 0x63
 8017198:	f004 fd54 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801719c:	481f      	ldr	r0, [pc, #124]	; (801721c <GUI_TextEn_Radiance+0x94>)
 801719e:	f004 fd45 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 80171a2:	4621      	mov	r1, r4
 80171a4:	2252      	movs	r2, #82	; 0x52
 80171a6:	4628      	mov	r0, r5
 80171a8:	f004 fe0a 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 80171ac:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80171ae:	481c      	ldr	r0, [pc, #112]	; (8017220 <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 80171b0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80171b2:	f004 fd3b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 80171b6:	f105 0010 	add.w	r0, r5, #16
 80171ba:	4621      	mov	r1, r4
 80171bc:	2261      	movs	r2, #97	; 0x61
 80171be:	b280      	uxth	r0, r0
 80171c0:	f004 fdfe 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 80171c4:	f105 001c 	add.w	r0, r5, #28
 80171c8:	4621      	mov	r1, r4
 80171ca:	2264      	movs	r2, #100	; 0x64
 80171cc:	b280      	uxth	r0, r0
 80171ce:	f004 fdf7 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 80171d2:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80171d6:	4621      	mov	r1, r4
 80171d8:	2269      	movs	r2, #105	; 0x69
 80171da:	b280      	uxth	r0, r0
 80171dc:	f004 fdf0 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 80171e0:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80171e4:	4621      	mov	r1, r4
 80171e6:	2261      	movs	r2, #97	; 0x61
 80171e8:	b280      	uxth	r0, r0
 80171ea:	f004 fde9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 80171ee:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 80171f2:	4621      	mov	r1, r4
 80171f4:	226e      	movs	r2, #110	; 0x6e
 80171f6:	b280      	uxth	r0, r0
 80171f8:	f004 fde2 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 80171fc:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017200:	4621      	mov	r1, r4
 8017202:	2263      	movs	r2, #99	; 0x63
 8017204:	b280      	uxth	r0, r0
 8017206:	f004 fddb 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 801720a:	f105 0053 	add.w	r0, r5, #83	; 0x53
 801720e:	4621      	mov	r1, r4
 8017210:	2265      	movs	r2, #101	; 0x65
 8017212:	b280      	uxth	r0, r0
}
 8017214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 8017218:	f004 bdd2 	b.w	801bdc0 <TFT_DrawChar>
 801721c:	200001b8 	.word	0x200001b8
 8017220:	200001c8 	.word	0x200001c8

08017224 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 8017224:	b538      	push	{r3, r4, r5, lr}
 8017226:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017228:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801722c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801722e:	f004 fd03 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017232:	2063      	movs	r0, #99	; 0x63
 8017234:	f004 fd06 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017238:	4826      	ldr	r0, [pc, #152]	; (80172d4 <GUI_TextEn_Irradiance+0xb0>)
 801723a:	f004 fcf7 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 801723e:	4621      	mov	r1, r4
 8017240:	2249      	movs	r2, #73	; 0x49
 8017242:	4628      	mov	r0, r5
 8017244:	f004 fdbc 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 8017248:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801724a:	4823      	ldr	r0, [pc, #140]	; (80172d8 <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 801724c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801724e:	f004 fced 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 8017252:	f105 0009 	add.w	r0, r5, #9
 8017256:	4621      	mov	r1, r4
 8017258:	2272      	movs	r2, #114	; 0x72
 801725a:	b280      	uxth	r0, r0
 801725c:	f004 fdb0 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 8017260:	f105 0015 	add.w	r0, r5, #21
 8017264:	4621      	mov	r1, r4
 8017266:	2272      	movs	r2, #114	; 0x72
 8017268:	b280      	uxth	r0, r0
 801726a:	f004 fda9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 801726e:	f105 0020 	add.w	r0, r5, #32
 8017272:	4621      	mov	r1, r4
 8017274:	2261      	movs	r2, #97	; 0x61
 8017276:	b280      	uxth	r0, r0
 8017278:	f004 fda2 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 801727c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8017280:	4621      	mov	r1, r4
 8017282:	2264      	movs	r2, #100	; 0x64
 8017284:	b280      	uxth	r0, r0
 8017286:	f004 fd9b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 801728a:	f105 0039 	add.w	r0, r5, #57	; 0x39
 801728e:	4621      	mov	r1, r4
 8017290:	2269      	movs	r2, #105	; 0x69
 8017292:	b280      	uxth	r0, r0
 8017294:	f004 fd94 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 8017298:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801729c:	4621      	mov	r1, r4
 801729e:	2261      	movs	r2, #97	; 0x61
 80172a0:	b280      	uxth	r0, r0
 80172a2:	f004 fd8d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 80172a6:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80172aa:	4621      	mov	r1, r4
 80172ac:	226e      	movs	r2, #110	; 0x6e
 80172ae:	b280      	uxth	r0, r0
 80172b0:	f004 fd86 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 80172b4:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80172b8:	4621      	mov	r1, r4
 80172ba:	2263      	movs	r2, #99	; 0x63
 80172bc:	b280      	uxth	r0, r0
 80172be:	f004 fd7f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 80172c2:	f105 0063 	add.w	r0, r5, #99	; 0x63
 80172c6:	4621      	mov	r1, r4
 80172c8:	2265      	movs	r2, #101	; 0x65
 80172ca:	b280      	uxth	r0, r0
}
 80172cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 80172d0:	f004 bd76 	b.w	801bdc0 <TFT_DrawChar>
 80172d4:	200001b8 	.word	0x200001b8
 80172d8:	200001c8 	.word	0x200001c8

080172dc <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 80172dc:	b538      	push	{r3, r4, r5, lr}
 80172de:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80172e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80172e4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80172e6:	f004 fca7 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80172ea:	2063      	movs	r0, #99	; 0x63
 80172ec:	f004 fcaa 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80172f0:	4823      	ldr	r0, [pc, #140]	; (8017380 <GUI_TextEn_Luminance+0xa4>)
 80172f2:	f004 fc9b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80172f6:	4621      	mov	r1, r4
 80172f8:	224c      	movs	r2, #76	; 0x4c
 80172fa:	4628      	mov	r0, r5
 80172fc:	f004 fd60 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 8017300:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017302:	4820      	ldr	r0, [pc, #128]	; (8017384 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 8017304:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017306:	f004 fc91 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 801730a:	f105 000d 	add.w	r0, r5, #13
 801730e:	4621      	mov	r1, r4
 8017310:	2275      	movs	r2, #117	; 0x75
 8017312:	b280      	uxth	r0, r0
 8017314:	f004 fd54 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 8017318:	f105 001b 	add.w	r0, r5, #27
 801731c:	4621      	mov	r1, r4
 801731e:	226d      	movs	r2, #109	; 0x6d
 8017320:	b280      	uxth	r0, r0
 8017322:	f004 fd4d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8017326:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801732a:	4621      	mov	r1, r4
 801732c:	2269      	movs	r2, #105	; 0x69
 801732e:	b280      	uxth	r0, r0
 8017330:	f004 fd46 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 8017334:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017338:	4621      	mov	r1, r4
 801733a:	2261      	movs	r2, #97	; 0x61
 801733c:	b280      	uxth	r0, r0
 801733e:	f004 fd3f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 8017342:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017346:	4621      	mov	r1, r4
 8017348:	226e      	movs	r2, #110	; 0x6e
 801734a:	b280      	uxth	r0, r0
 801734c:	f004 fd38 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 8017350:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017354:	4621      	mov	r1, r4
 8017356:	226e      	movs	r2, #110	; 0x6e
 8017358:	b280      	uxth	r0, r0
 801735a:	f004 fd31 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 801735e:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8017362:	4621      	mov	r1, r4
 8017364:	2263      	movs	r2, #99	; 0x63
 8017366:	b280      	uxth	r0, r0
 8017368:	f004 fd2a 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 801736c:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8017370:	4621      	mov	r1, r4
 8017372:	2265      	movs	r2, #101	; 0x65
 8017374:	b280      	uxth	r0, r0
}
 8017376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 801737a:	f004 bd21 	b.w	801bdc0 <TFT_DrawChar>
 801737e:	bf00      	nop
 8017380:	200001b8 	.word	0x200001b8
 8017384:	200001c8 	.word	0x200001c8

08017388 <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 8017388:	b538      	push	{r3, r4, r5, lr}
 801738a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801738c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017390:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017392:	f004 fc51 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017396:	2063      	movs	r0, #99	; 0x63
 8017398:	f004 fc54 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801739c:	482a      	ldr	r0, [pc, #168]	; (8017448 <GUI_TextEn_Illuminance+0xc0>)
 801739e:	f004 fc45 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 80173a2:	4621      	mov	r1, r4
 80173a4:	2249      	movs	r2, #73	; 0x49
 80173a6:	4628      	mov	r0, r5
 80173a8:	f004 fd0a 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 80173ac:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80173ae:	4827      	ldr	r0, [pc, #156]	; (801744c <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 80173b0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80173b2:	f004 fc3b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 80173b6:	f105 0008 	add.w	r0, r5, #8
 80173ba:	4621      	mov	r1, r4
 80173bc:	226c      	movs	r2, #108	; 0x6c
 80173be:	b280      	uxth	r0, r0
 80173c0:	f004 fcfe 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 80173c4:	f105 000d 	add.w	r0, r5, #13
 80173c8:	4621      	mov	r1, r4
 80173ca:	226c      	movs	r2, #108	; 0x6c
 80173cc:	b280      	uxth	r0, r0
 80173ce:	f004 fcf7 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 80173d2:	f105 0012 	add.w	r0, r5, #18
 80173d6:	4621      	mov	r1, r4
 80173d8:	2275      	movs	r2, #117	; 0x75
 80173da:	b280      	uxth	r0, r0
 80173dc:	f004 fcf0 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 80173e0:	f105 0020 	add.w	r0, r5, #32
 80173e4:	4621      	mov	r1, r4
 80173e6:	226d      	movs	r2, #109	; 0x6d
 80173e8:	b280      	uxth	r0, r0
 80173ea:	f004 fce9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 80173ee:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80173f2:	4621      	mov	r1, r4
 80173f4:	2269      	movs	r2, #105	; 0x69
 80173f6:	b280      	uxth	r0, r0
 80173f8:	f004 fce2 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 80173fc:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017400:	4621      	mov	r1, r4
 8017402:	2261      	movs	r2, #97	; 0x61
 8017404:	b280      	uxth	r0, r0
 8017406:	f004 fcdb 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 801740a:	f105 0033 	add.w	r0, r5, #51	; 0x33
 801740e:	4621      	mov	r1, r4
 8017410:	226e      	movs	r2, #110	; 0x6e
 8017412:	b280      	uxth	r0, r0
 8017414:	f004 fcd4 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 8017418:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 801741c:	4621      	mov	r1, r4
 801741e:	226e      	movs	r2, #110	; 0x6e
 8017420:	b280      	uxth	r0, r0
 8017422:	f004 fccd 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 8017426:	f105 0059 	add.w	r0, r5, #89	; 0x59
 801742a:	4621      	mov	r1, r4
 801742c:	2263      	movs	r2, #99	; 0x63
 801742e:	b280      	uxth	r0, r0
 8017430:	f004 fcc6 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017434:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017438:	4621      	mov	r1, r4
 801743a:	2265      	movs	r2, #101	; 0x65
 801743c:	b280      	uxth	r0, r0
}
 801743e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 8017442:	f004 bcbd 	b.w	801bdc0 <TFT_DrawChar>
 8017446:	bf00      	nop
 8017448:	200001b8 	.word	0x200001b8
 801744c:	200001c8 	.word	0x200001c8

08017450 <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 8017450:	b538      	push	{r3, r4, r5, lr}
 8017452:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017454:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017458:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801745a:	f004 fbed 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801745e:	2063      	movs	r0, #99	; 0x63
 8017460:	f004 fbf0 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017464:	4811      	ldr	r0, [pc, #68]	; (80174ac <GUI_TextEn_Mode+0x5c>)
 8017466:	f004 fbe1 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 801746a:	4621      	mov	r1, r4
 801746c:	224d      	movs	r2, #77	; 0x4d
 801746e:	4628      	mov	r0, r5
 8017470:	f004 fca6 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8017474:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017476:	480e      	ldr	r0, [pc, #56]	; (80174b0 <GUI_TextEn_Mode+0x60>)
 8017478:	f004 fbd8 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 801747c:	b2a4      	uxth	r4, r4
 801747e:	f105 0013 	add.w	r0, r5, #19
 8017482:	4621      	mov	r1, r4
 8017484:	226f      	movs	r2, #111	; 0x6f
 8017486:	b280      	uxth	r0, r0
 8017488:	f004 fc9a 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 801748c:	f105 001e 	add.w	r0, r5, #30
 8017490:	4621      	mov	r1, r4
 8017492:	2264      	movs	r2, #100	; 0x64
 8017494:	b280      	uxth	r0, r0
 8017496:	f004 fc93 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 801749a:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 801749e:	4621      	mov	r1, r4
 80174a0:	2265      	movs	r2, #101	; 0x65
 80174a2:	b280      	uxth	r0, r0
}
 80174a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 80174a8:	f004 bc8a 	b.w	801bdc0 <TFT_DrawChar>
 80174ac:	200001b8 	.word	0x200001b8
 80174b0:	200001c8 	.word	0x200001c8

080174b4 <GUI_TextEn_PPFD>:
	TFT_DrawChar(X+85, Y+2, 't');
	TFT_DrawChar(X+92, Y+2, 'h');
}
*/
void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 80174b4:	b538      	push	{r3, r4, r5, lr}
 80174b6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80174b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80174bc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80174be:	f004 fbbb 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80174c2:	2063      	movs	r0, #99	; 0x63
 80174c4:	f004 fbbe 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80174c8:	480f      	ldr	r0, [pc, #60]	; (8017508 <GUI_TextEn_PPFD+0x54>)
 80174ca:	f004 fbaf 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 80174ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80174d2:	4629      	mov	r1, r5
 80174d4:	2244      	movs	r2, #68	; 0x44
 80174d6:	b280      	uxth	r0, r0
 80174d8:	f004 fc72 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 80174dc:	f104 001f 	add.w	r0, r4, #31
 80174e0:	4629      	mov	r1, r5
 80174e2:	2246      	movs	r2, #70	; 0x46
 80174e4:	b280      	uxth	r0, r0
 80174e6:	f004 fc6b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 80174ea:	f104 0010 	add.w	r0, r4, #16
 80174ee:	4629      	mov	r1, r5
 80174f0:	2250      	movs	r2, #80	; 0x50
 80174f2:	b280      	uxth	r0, r0
 80174f4:	f004 fc64 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 80174f8:	4629      	mov	r1, r5
 80174fa:	4620      	mov	r0, r4
 80174fc:	2250      	movs	r2, #80	; 0x50
}
 80174fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8017502:	f004 bc5d 	b.w	801bdc0 <TFT_DrawChar>
 8017506:	bf00      	nop
 8017508:	200001b8 	.word	0x200001b8

0801750c <GUI_TextEn_PARwavebands>:
	TFT_DrawChar(X+31, Y, 'L');
	TFT_DrawChar(X+16, Y, 'P');
	TFT_DrawChar(X, Y, 'P');
}
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 801750c:	b538      	push	{r3, r4, r5, lr}
 801750e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017510:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017514:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017516:	f004 fb8f 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801751a:	2063      	movs	r0, #99	; 0x63
 801751c:	f004 fb92 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017520:	482d      	ldr	r0, [pc, #180]	; (80175d8 <GUI_TextEn_PARwavebands+0xcc>)
 8017522:	f004 fb83 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 8017526:	f105 0020 	add.w	r0, r5, #32
 801752a:	4621      	mov	r1, r4
 801752c:	2252      	movs	r2, #82	; 0x52
 801752e:	b280      	uxth	r0, r0
 8017530:	f004 fc46 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 8017534:	f105 0010 	add.w	r0, r5, #16
 8017538:	4621      	mov	r1, r4
 801753a:	2241      	movs	r2, #65	; 0x41
 801753c:	b280      	uxth	r0, r0
 801753e:	f004 fc3f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017542:	4621      	mov	r1, r4
 8017544:	2250      	movs	r2, #80	; 0x50
 8017546:	4628      	mov	r0, r5
 8017548:	f004 fc3a 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 801754c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801754e:	4823      	ldr	r0, [pc, #140]	; (80175dc <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 8017550:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017552:	f004 fb6b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 8017556:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 801755a:	4621      	mov	r1, r4
 801755c:	2261      	movs	r2, #97	; 0x61
 801755e:	b280      	uxth	r0, r0
 8017560:	f004 fc2e 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 8017564:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8017568:	4621      	mov	r1, r4
 801756a:	2277      	movs	r2, #119	; 0x77
 801756c:	b280      	uxth	r0, r0
 801756e:	f004 fc27 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017572:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017576:	4621      	mov	r1, r4
 8017578:	2265      	movs	r2, #101	; 0x65
 801757a:	b280      	uxth	r0, r0
 801757c:	f004 fc20 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 8017580:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8017584:	4621      	mov	r1, r4
 8017586:	2276      	movs	r2, #118	; 0x76
 8017588:	b280      	uxth	r0, r0
 801758a:	f004 fc19 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 801758e:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8017592:	4621      	mov	r1, r4
 8017594:	2261      	movs	r2, #97	; 0x61
 8017596:	b280      	uxth	r0, r0
 8017598:	f004 fc12 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 801759c:	f105 0071 	add.w	r0, r5, #113	; 0x71
 80175a0:	4621      	mov	r1, r4
 80175a2:	2262      	movs	r2, #98	; 0x62
 80175a4:	b280      	uxth	r0, r0
 80175a6:	f004 fc0b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 80175aa:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80175ae:	4621      	mov	r1, r4
 80175b0:	226e      	movs	r2, #110	; 0x6e
 80175b2:	b280      	uxth	r0, r0
 80175b4:	f004 fc04 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 80175b8:	f105 0097 	add.w	r0, r5, #151	; 0x97
 80175bc:	4621      	mov	r1, r4
 80175be:	2264      	movs	r2, #100	; 0x64
 80175c0:	b280      	uxth	r0, r0
 80175c2:	f004 fbfd 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 80175c6:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 80175ca:	4621      	mov	r1, r4
 80175cc:	2273      	movs	r2, #115	; 0x73
 80175ce:	b280      	uxth	r0, r0
}
 80175d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 80175d4:	f004 bbf4 	b.w	801bdc0 <TFT_DrawChar>
 80175d8:	200001b8 	.word	0x200001b8
 80175dc:	200001c8 	.word	0x200001c8

080175e0 <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 80175e0:	b538      	push	{r3, r4, r5, lr}
 80175e2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80175e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80175e8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80175ea:	f004 fb25 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80175ee:	2063      	movs	r0, #99	; 0x63
 80175f0:	f004 fb28 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80175f4:	481d      	ldr	r0, [pc, #116]	; (801766c <GUI_TextEn_B_G_R_FR+0x8c>)
 80175f6:	f004 fb19 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 80175fa:	f104 000f 	add.w	r0, r4, #15
 80175fe:	4629      	mov	r1, r5
 8017600:	222d      	movs	r2, #45	; 0x2d
 8017602:	b280      	uxth	r0, r0
 8017604:	f004 fbdc 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 8017608:	4629      	mov	r1, r5
 801760a:	4620      	mov	r0, r4
 801760c:	2242      	movs	r2, #66	; 0x42
 801760e:	f004 fbd7 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 8017612:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017616:	4629      	mov	r1, r5
 8017618:	222d      	movs	r2, #45	; 0x2d
 801761a:	b280      	uxth	r0, r0
 801761c:	f004 fbd0 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 8017620:	f104 001d 	add.w	r0, r4, #29
 8017624:	4629      	mov	r1, r5
 8017626:	2247      	movs	r2, #71	; 0x47
 8017628:	b280      	uxth	r0, r0
 801762a:	f004 fbc9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 801762e:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8017632:	4629      	mov	r1, r5
 8017634:	222d      	movs	r2, #45	; 0x2d
 8017636:	b280      	uxth	r0, r0
 8017638:	f004 fbc2 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 801763c:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8017640:	4629      	mov	r1, r5
 8017642:	2252      	movs	r2, #82	; 0x52
 8017644:	b280      	uxth	r0, r0
 8017646:	f004 fbbb 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 801764a:	f104 0057 	add.w	r0, r4, #87	; 0x57
 801764e:	4629      	mov	r1, r5
 8017650:	2246      	movs	r2, #70	; 0x46
 8017652:	b280      	uxth	r0, r0
 8017654:	f004 fbb4 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 8017658:	f104 0067 	add.w	r0, r4, #103	; 0x67
 801765c:	4629      	mov	r1, r5
 801765e:	2252      	movs	r2, #82	; 0x52
 8017660:	b280      	uxth	r0, r0
}
 8017662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 8017666:	f004 bbab 	b.w	801bdc0 <TFT_DrawChar>
 801766a:	bf00      	nop
 801766c:	200001b8 	.word	0x200001b8

08017670 <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 8017670:	b538      	push	{r3, r4, r5, lr}
 8017672:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017674:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017678:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801767a:	f004 fadd 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801767e:	2063      	movs	r0, #99	; 0x63
 8017680:	f004 fae0 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8017684:	480b      	ldr	r0, [pc, #44]	; (80176b4 <GUI_TextEn_CCT+0x44>)
 8017686:	f004 fad1 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 801768a:	4629      	mov	r1, r5
 801768c:	4620      	mov	r0, r4
 801768e:	2222      	movs	r2, #34	; 0x22
 8017690:	f004 fb96 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 8017694:	f104 0017 	add.w	r0, r4, #23
 8017698:	4629      	mov	r1, r5
 801769a:	2222      	movs	r2, #34	; 0x22
 801769c:	b280      	uxth	r0, r0
 801769e:	f004 fb8f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 80176a2:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80176a6:	4629      	mov	r1, r5
 80176a8:	2233      	movs	r2, #51	; 0x33
 80176aa:	b280      	uxth	r0, r0
}
 80176ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 80176b0:	f004 bb86 	b.w	801bdc0 <TFT_DrawChar>
 80176b4:	200001e8 	.word	0x200001e8

080176b8 <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 80176b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176ba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80176bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80176c0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80176c2:	f004 fab9 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80176c6:	2063      	movs	r0, #99	; 0x63
 80176c8:	f004 fabc 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 80176cc:	4815      	ldr	r0, [pc, #84]	; (8017724 <GUI_TextEn_W_m2+0x6c>)
 80176ce:	f004 faad 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 80176d2:	1ce8      	adds	r0, r5, #3
 80176d4:	4621      	mov	r1, r4
 80176d6:	2257      	movs	r2, #87	; 0x57
 80176d8:	b280      	uxth	r0, r0
 80176da:	f004 fb71 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 80176de:	f104 0111 	add.w	r1, r4, #17
 80176e2:	1c68      	adds	r0, r5, #1
 80176e4:	226d      	movs	r2, #109	; 0x6d
 80176e6:	b289      	uxth	r1, r1
 80176e8:	b280      	uxth	r0, r0
 80176ea:	f004 fb69 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 80176ee:	480e      	ldr	r0, [pc, #56]	; (8017728 <GUI_TextEn_W_m2+0x70>)
 80176f0:	f004 fa9c 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 80176f4:	f104 0110 	add.w	r1, r4, #16
 80176f8:	f105 000b 	add.w	r0, r5, #11
 80176fc:	2232      	movs	r2, #50	; 0x32
 80176fe:	b289      	uxth	r1, r1
 8017700:	b280      	uxth	r0, r0
 8017702:	f004 fb5d 	bl	801bdc0 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8017706:	f104 030e 	add.w	r3, r4, #14
 801770a:	b29b      	uxth	r3, r3
 801770c:	f105 0211 	add.w	r2, r5, #17
 8017710:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017714:	9100      	str	r1, [sp, #0]
 8017716:	b292      	uxth	r2, r2
 8017718:	4619      	mov	r1, r3
 801771a:	4628      	mov	r0, r5
 801771c:	f004 f800 	bl	801b720 <TFT_DrawLine>
}
 8017720:	b003      	add	sp, #12
 8017722:	bd30      	pop	{r4, r5, pc}
 8017724:	20000228 	.word	0x20000228
 8017728:	20000210 	.word	0x20000210

0801772c <GUI_TextEn_W_m2_sr>:
void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 801772c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801772e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017730:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017734:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017736:	f004 fa7f 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801773a:	2063      	movs	r0, #99	; 0x63
 801773c:	f004 fa82 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017740:	4824      	ldr	r0, [pc, #144]	; (80177d4 <GUI_TextEn_W_m2_sr+0xa8>)
 8017742:	f004 fa73 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 8017746:	f105 000c 	add.w	r0, r5, #12
 801774a:	4621      	mov	r1, r4
 801774c:	2257      	movs	r2, #87	; 0x57
 801774e:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8017750:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8017754:	f004 fb34 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8017758:	b2b6      	uxth	r6, r6
 801775a:	f105 0014 	add.w	r0, r5, #20
 801775e:	4631      	mov	r1, r6
 8017760:	226d      	movs	r2, #109	; 0x6d
 8017762:	b280      	uxth	r0, r0
 8017764:	f004 fb2c 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8017768:	4631      	mov	r1, r6
 801776a:	4628      	mov	r0, r5
 801776c:	2273      	movs	r2, #115	; 0x73
 801776e:	f004 fb27 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8017772:	1de8      	adds	r0, r5, #7
 8017774:	4631      	mov	r1, r6
 8017776:	2272      	movs	r2, #114	; 0x72
 8017778:	b280      	uxth	r0, r0
 801777a:	f004 fb21 	bl	801bdc0 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 801777e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017782:	f104 0318 	add.w	r3, r4, #24
 8017786:	f105 0212 	add.w	r2, r5, #18
 801778a:	f104 0117 	add.w	r1, r4, #23
 801778e:	f105 0011 	add.w	r0, r5, #17
 8017792:	b29b      	uxth	r3, r3
 8017794:	b292      	uxth	r2, r2
 8017796:	b289      	uxth	r1, r1
 8017798:	9600      	str	r6, [sp, #0]
 801779a:	b280      	uxth	r0, r0
 801779c:	f004 f81d 	bl	801b7da <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 80177a0:	480d      	ldr	r0, [pc, #52]	; (80177d8 <GUI_TextEn_W_m2_sr+0xac>)
 80177a2:	f004 fa43 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 80177a6:	f104 0110 	add.w	r1, r4, #16
 80177aa:	f105 001e 	add.w	r0, r5, #30
 80177ae:	2232      	movs	r2, #50	; 0x32
 80177b0:	b289      	uxth	r1, r1
 80177b2:	b280      	uxth	r0, r0
 80177b4:	f004 fb04 	bl	801bdc0 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 80177b8:	f104 030e 	add.w	r3, r4, #14
 80177bc:	b29b      	uxth	r3, r3
 80177be:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80177c2:	9600      	str	r6, [sp, #0]
 80177c4:	b292      	uxth	r2, r2
 80177c6:	4619      	mov	r1, r3
 80177c8:	4628      	mov	r0, r5
 80177ca:	f003 ffa9 	bl	801b720 <TFT_DrawLine>
}
 80177ce:	b002      	add	sp, #8
 80177d0:	bd70      	pop	{r4, r5, r6, pc}
 80177d2:	bf00      	nop
 80177d4:	20000228 	.word	0x20000228
 80177d8:	20000210 	.word	0x20000210

080177dc <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 80177dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80177e0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80177e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80177e6:	460d      	mov	r5, r1
 80177e8:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 80177ea:	f004 fa25 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80177ee:	2063      	movs	r0, #99	; 0x63
 80177f0:	f004 fa28 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 80177f4:	482f      	ldr	r0, [pc, #188]	; (80178b4 <GUI_TextEn_cd_m2+0xd8>)
 80177f6:	f004 fa19 	bl	801bc2c <TFT_SetFont>
	
	if (deg==1)
 80177fa:	2e01      	cmp	r6, #1
 80177fc:	f105 0911 	add.w	r9, r5, #17
 8017800:	f105 0810 	add.w	r8, r5, #16
 8017804:	f105 060e 	add.w	r6, r5, #14
 8017808:	d131      	bne.n	801786e <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 801780a:	226b      	movs	r2, #107	; 0x6b
 801780c:	4629      	mov	r1, r5
 801780e:	4620      	mov	r0, r4
 8017810:	f004 fad6 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8017814:	1de0      	adds	r0, r4, #7
 8017816:	2263      	movs	r2, #99	; 0x63
 8017818:	4629      	mov	r1, r5
 801781a:	b280      	uxth	r0, r0
 801781c:	f004 fad0 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 8017820:	f104 000e 	add.w	r0, r4, #14
 8017824:	2264      	movs	r2, #100	; 0x64
 8017826:	4629      	mov	r1, r5
 8017828:	b280      	uxth	r0, r0
 801782a:	f004 fac9 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 801782e:	1d60      	adds	r0, r4, #5
 8017830:	226d      	movs	r2, #109	; 0x6d
 8017832:	fa1f f189 	uxth.w	r1, r9
 8017836:	b280      	uxth	r0, r0
 8017838:	f004 fac2 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 801783c:	481e      	ldr	r0, [pc, #120]	; (80178b8 <GUI_TextEn_cd_m2+0xdc>)
 801783e:	f004 f9f5 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 8017842:	f104 000f 	add.w	r0, r4, #15
 8017846:	2232      	movs	r2, #50	; 0x32
 8017848:	fa1f f188 	uxth.w	r1, r8
 801784c:	b280      	uxth	r0, r0
 801784e:	f004 fab7 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 8017852:	b2b3      	uxth	r3, r6
 8017854:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8017858:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801785c:	9100      	str	r1, [sp, #0]
 801785e:	b292      	uxth	r2, r2
 8017860:	4619      	mov	r1, r3
 8017862:	4620      	mov	r0, r4
 8017864:	f003 ff5c 	bl	801b720 <TFT_DrawLine>
	}
}
 8017868:	b003      	add	sp, #12
 801786a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 801786e:	1ca7      	adds	r7, r4, #2
 8017870:	b2bf      	uxth	r7, r7
 8017872:	2263      	movs	r2, #99	; 0x63
 8017874:	4629      	mov	r1, r5
 8017876:	4638      	mov	r0, r7
 8017878:	f004 faa2 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 801787c:	f104 0009 	add.w	r0, r4, #9
 8017880:	2264      	movs	r2, #100	; 0x64
 8017882:	4629      	mov	r1, r5
 8017884:	b280      	uxth	r0, r0
 8017886:	f004 fa9b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 801788a:	226d      	movs	r2, #109	; 0x6d
 801788c:	fa1f f189 	uxth.w	r1, r9
 8017890:	4638      	mov	r0, r7
 8017892:	f004 fa95 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8017896:	4808      	ldr	r0, [pc, #32]	; (80178b8 <GUI_TextEn_cd_m2+0xdc>)
 8017898:	f004 f9c8 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 801789c:	f104 000c 	add.w	r0, r4, #12
 80178a0:	2232      	movs	r2, #50	; 0x32
 80178a2:	fa1f f188 	uxth.w	r1, r8
 80178a6:	b280      	uxth	r0, r0
 80178a8:	f004 fa8a 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 80178ac:	b2b3      	uxth	r3, r6
 80178ae:	f104 0213 	add.w	r2, r4, #19
 80178b2:	e7d1      	b.n	8017858 <GUI_TextEn_cd_m2+0x7c>
 80178b4:	20000228 	.word	0x20000228
 80178b8:	20000210 	.word	0x20000210

080178bc <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 80178bc:	b538      	push	{r3, r4, r5, lr}
 80178be:	4605      	mov	r5, r0
 80178c0:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 80178c2:	4815      	ldr	r0, [pc, #84]	; (8017918 <GUI_TextEn_Green+0x5c>)
 80178c4:	f004 f9b2 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 80178c8:	4621      	mov	r1, r4
 80178ca:	2247      	movs	r2, #71	; 0x47
 80178cc:	4628      	mov	r0, r5
 80178ce:	f004 fa77 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 80178d2:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 80178d4:	4811      	ldr	r0, [pc, #68]	; (801791c <GUI_TextEn_Green+0x60>)
 80178d6:	f004 f9a9 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 80178da:	b2a4      	uxth	r4, r4
 80178dc:	f105 000f 	add.w	r0, r5, #15
 80178e0:	4621      	mov	r1, r4
 80178e2:	2272      	movs	r2, #114	; 0x72
 80178e4:	b280      	uxth	r0, r0
 80178e6:	f004 fa6b 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 80178ea:	f105 001a 	add.w	r0, r5, #26
 80178ee:	4621      	mov	r1, r4
 80178f0:	2265      	movs	r2, #101	; 0x65
 80178f2:	b280      	uxth	r0, r0
 80178f4:	f004 fa64 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 80178f8:	f105 0026 	add.w	r0, r5, #38	; 0x26
 80178fc:	4621      	mov	r1, r4
 80178fe:	2265      	movs	r2, #101	; 0x65
 8017900:	b280      	uxth	r0, r0
 8017902:	f004 fa5d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 8017906:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801790a:	4621      	mov	r1, r4
 801790c:	226e      	movs	r2, #110	; 0x6e
 801790e:	b280      	uxth	r0, r0
}
 8017910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8017914:	f004 ba54 	b.w	801bdc0 <TFT_DrawChar>
 8017918:	200001b0 	.word	0x200001b0
 801791c:	200001c0 	.word	0x200001c0

08017920 <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 8017920:	b538      	push	{r3, r4, r5, lr}
 8017922:	4605      	mov	r5, r0
 8017924:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8017926:	4812      	ldr	r0, [pc, #72]	; (8017970 <GUI_TextEn_Blue+0x50>)
 8017928:	f004 f980 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 801792c:	4621      	mov	r1, r4
 801792e:	2242      	movs	r2, #66	; 0x42
 8017930:	4628      	mov	r0, r5
 8017932:	f004 fa45 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 8017936:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 8017938:	480e      	ldr	r0, [pc, #56]	; (8017974 <GUI_TextEn_Blue+0x54>)
 801793a:	f004 f977 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 801793e:	b2a4      	uxth	r4, r4
 8017940:	f105 000f 	add.w	r0, r5, #15
 8017944:	4621      	mov	r1, r4
 8017946:	226c      	movs	r2, #108	; 0x6c
 8017948:	b280      	uxth	r0, r0
 801794a:	f004 fa39 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 801794e:	f105 0014 	add.w	r0, r5, #20
 8017952:	4621      	mov	r1, r4
 8017954:	2275      	movs	r2, #117	; 0x75
 8017956:	b280      	uxth	r0, r0
 8017958:	f004 fa32 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 801795c:	f105 0021 	add.w	r0, r5, #33	; 0x21
 8017960:	4621      	mov	r1, r4
 8017962:	2265      	movs	r2, #101	; 0x65
 8017964:	b280      	uxth	r0, r0
}
 8017966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 801796a:	f004 ba29 	b.w	801bdc0 <TFT_DrawChar>
 801796e:	bf00      	nop
 8017970:	200001b0 	.word	0x200001b0
 8017974:	200001c8 	.word	0x200001c8

08017978 <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 8017978:	b538      	push	{r3, r4, r5, lr}
 801797a:	4605      	mov	r5, r0
 801797c:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801797e:	480e      	ldr	r0, [pc, #56]	; (80179b8 <GUI_TextEn_Red+0x40>)
 8017980:	f004 f954 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 8017984:	4621      	mov	r1, r4
 8017986:	2252      	movs	r2, #82	; 0x52
 8017988:	4628      	mov	r0, r5
 801798a:	f004 fa19 	bl	801bdc0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 801798e:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8017990:	480a      	ldr	r0, [pc, #40]	; (80179bc <GUI_TextEn_Red+0x44>)
 8017992:	f004 f94b 	bl	801bc2c <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 8017996:	b2a4      	uxth	r4, r4
 8017998:	f105 0010 	add.w	r0, r5, #16
 801799c:	4621      	mov	r1, r4
 801799e:	2265      	movs	r2, #101	; 0x65
 80179a0:	b280      	uxth	r0, r0
 80179a2:	f004 fa0d 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 80179a6:	f105 001d 	add.w	r0, r5, #29
 80179aa:	4621      	mov	r1, r4
 80179ac:	2264      	movs	r2, #100	; 0x64
 80179ae:	b280      	uxth	r0, r0
}
 80179b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 80179b4:	f004 ba04 	b.w	801bdc0 <TFT_DrawChar>
 80179b8:	200001b0 	.word	0x200001b0
 80179bc:	200001c0 	.word	0x200001c0

080179c0 <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 80179c0:	b538      	push	{r3, r4, r5, lr}
 80179c2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80179c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80179c8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80179ca:	f004 f935 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80179ce:	2063      	movs	r0, #99	; 0x63
 80179d0:	f004 f938 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80179d4:	4815      	ldr	r0, [pc, #84]	; (8017a2c <GUI_TextEn_WriteSD+0x6c>)
 80179d6:	f004 f929 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 80179da:	4621      	mov	r1, r4
 80179dc:	2257      	movs	r2, #87	; 0x57
 80179de:	4628      	mov	r0, r5
 80179e0:	f004 f9ee 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 80179e4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 80179e6:	4812      	ldr	r0, [pc, #72]	; (8017a30 <GUI_TextEn_WriteSD+0x70>)
 80179e8:	f004 f920 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 80179ec:	b2a4      	uxth	r4, r4
 80179ee:	f105 0011 	add.w	r0, r5, #17
 80179f2:	4621      	mov	r1, r4
 80179f4:	2272      	movs	r2, #114	; 0x72
 80179f6:	b280      	uxth	r0, r0
 80179f8:	f004 f9e2 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 80179fc:	f105 001c 	add.w	r0, r5, #28
 8017a00:	4621      	mov	r1, r4
 8017a02:	2269      	movs	r2, #105	; 0x69
 8017a04:	b280      	uxth	r0, r0
 8017a06:	f004 f9db 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 8017a0a:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017a0e:	4621      	mov	r1, r4
 8017a10:	2274      	movs	r2, #116	; 0x74
 8017a12:	b280      	uxth	r0, r0
 8017a14:	f004 f9d4 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 8017a18:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8017a1c:	4621      	mov	r1, r4
 8017a1e:	2265      	movs	r2, #101	; 0x65
 8017a20:	b280      	uxth	r0, r0
}
 8017a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 8017a26:	f004 b9cb 	b.w	801bdc0 <TFT_DrawChar>
 8017a2a:	bf00      	nop
 8017a2c:	200001b0 	.word	0x200001b0
 8017a30:	200001c0 	.word	0x200001c0

08017a34 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8017a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a36:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8017a38:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8017a44:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8017a46:	f004 f8f7 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017a4a:	2063      	movs	r0, #99	; 0x63
 8017a4c:	f004 f8fa 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017a50:	4834      	ldr	r0, [pc, #208]	; (8017b24 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 8017a52:	4d35      	ldr	r5, [pc, #212]	; (8017b28 <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 8017a54:	f004 f8ea 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8017a58:	2243      	movs	r2, #67	; 0x43
 8017a5a:	2164      	movs	r1, #100	; 0x64
 8017a5c:	2046      	movs	r0, #70	; 0x46
 8017a5e:	f004 f9af 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017a62:	4832      	ldr	r0, [pc, #200]	; (8017b2c <GUI_TextEn_Info_Callibration+0xf8>)
 8017a64:	f004 f8e2 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8017a68:	2261      	movs	r2, #97	; 0x61
 8017a6a:	2166      	movs	r1, #102	; 0x66
 8017a6c:	2056      	movs	r0, #86	; 0x56
 8017a6e:	f004 f9a7 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 8017a72:	226c      	movs	r2, #108	; 0x6c
 8017a74:	2166      	movs	r1, #102	; 0x66
 8017a76:	2063      	movs	r0, #99	; 0x63
 8017a78:	f004 f9a2 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 8017a7c:	2269      	movs	r2, #105	; 0x69
 8017a7e:	2166      	movs	r1, #102	; 0x66
 8017a80:	206c      	movs	r0, #108	; 0x6c
 8017a82:	f004 f99d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 8017a86:	2262      	movs	r2, #98	; 0x62
 8017a88:	2166      	movs	r1, #102	; 0x66
 8017a8a:	2078      	movs	r0, #120	; 0x78
 8017a8c:	f004 f998 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 8017a90:	2272      	movs	r2, #114	; 0x72
 8017a92:	2166      	movs	r1, #102	; 0x66
 8017a94:	2085      	movs	r0, #133	; 0x85
 8017a96:	f004 f993 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 8017a9a:	2261      	movs	r2, #97	; 0x61
 8017a9c:	2166      	movs	r1, #102	; 0x66
 8017a9e:	2092      	movs	r0, #146	; 0x92
 8017aa0:	f004 f98e 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 8017aa4:	2274      	movs	r2, #116	; 0x74
 8017aa6:	2166      	movs	r1, #102	; 0x66
 8017aa8:	209f      	movs	r0, #159	; 0x9f
 8017aaa:	f004 f989 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 8017aae:	2269      	movs	r2, #105	; 0x69
 8017ab0:	2166      	movs	r1, #102	; 0x66
 8017ab2:	20a7      	movs	r0, #167	; 0xa7
 8017ab4:	f004 f984 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 8017ab8:	226f      	movs	r2, #111	; 0x6f
 8017aba:	2166      	movs	r1, #102	; 0x66
 8017abc:	20b2      	movs	r0, #178	; 0xb2
 8017abe:	f004 f97f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 8017ac2:	226e      	movs	r2, #110	; 0x6e
 8017ac4:	2166      	movs	r1, #102	; 0x66
 8017ac6:	20be      	movs	r0, #190	; 0xbe
 8017ac8:	f004 f97a 	bl	801bdc0 <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 8017acc:	4622      	mov	r2, r4
 8017ace:	4629      	mov	r1, r5
 8017ad0:	4668      	mov	r0, sp
 8017ad2:	f007 fa95 	bl	801f000 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8017ad6:	4816      	ldr	r0, [pc, #88]	; (8017b30 <GUI_TextEn_Info_Callibration+0xfc>)
 8017ad8:	f004 f8a8 	bl	801bc2c <TFT_SetFont>
	buffer[2] = '.';
 8017adc:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017ade:	2303      	movs	r3, #3
 8017ae0:	466a      	mov	r2, sp
 8017ae2:	2182      	movs	r1, #130	; 0x82
 8017ae4:	201e      	movs	r0, #30
	buffer[2] = '.';
 8017ae6:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017aea:	f004 f9c1 	bl	801be70 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 8017aee:	4632      	mov	r2, r6
 8017af0:	4629      	mov	r1, r5
 8017af2:	4668      	mov	r0, sp
 8017af4:	f007 fa84 	bl	801f000 <siprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017af8:	2303      	movs	r3, #3
 8017afa:	466a      	mov	r2, sp
 8017afc:	2182      	movs	r1, #130	; 0x82
 8017afe:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 8017b00:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017b04:	f004 f9b4 	bl	801be70 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 8017b08:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8017b0c:	4909      	ldr	r1, [pc, #36]	; (8017b34 <GUI_TextEn_Info_Callibration+0x100>)
 8017b0e:	4668      	mov	r0, sp
 8017b10:	f007 fa76 	bl	801f000 <siprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017b14:	2303      	movs	r3, #3
 8017b16:	466a      	mov	r2, sp
 8017b18:	2182      	movs	r1, #130	; 0x82
 8017b1a:	209b      	movs	r0, #155	; 0x9b
 8017b1c:	f004 f9a8 	bl	801be70 <TFT_DisplayString>
}
 8017b20:	b002      	add	sp, #8
 8017b22:	bd70      	pop	{r4, r5, r6, pc}
 8017b24:	200001b0 	.word	0x200001b0
 8017b28:	0802e6bc 	.word	0x0802e6bc
 8017b2c:	200001c0 	.word	0x200001c0
 8017b30:	200001f0 	.word	0x200001f0
 8017b34:	0802e6c1 	.word	0x0802e6c1

08017b38 <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8017b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b3a:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8017b3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017b40:	2300      	movs	r3, #0
 8017b42:	9300      	str	r3, [sp, #0]
 8017b44:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8017b48:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 8017b4a:	f004 f875 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017b4e:	2063      	movs	r0, #99	; 0x63
 8017b50:	f004 f878 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017b54:	482e      	ldr	r0, [pc, #184]	; (8017c10 <GUI_TextEn_Info_Serial+0xd8>)
 8017b56:	f004 f869 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 8017b5a:	2253      	movs	r2, #83	; 0x53
 8017b5c:	21c8      	movs	r1, #200	; 0xc8
 8017b5e:	203c      	movs	r0, #60	; 0x3c
 8017b60:	f004 f92e 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017b64:	482b      	ldr	r0, [pc, #172]	; (8017c14 <GUI_TextEn_Info_Serial+0xdc>)
 8017b66:	f004 f861 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 8017b6a:	2265      	movs	r2, #101	; 0x65
 8017b6c:	21ca      	movs	r1, #202	; 0xca
 8017b6e:	204d      	movs	r0, #77	; 0x4d
 8017b70:	f004 f926 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 8017b74:	2272      	movs	r2, #114	; 0x72
 8017b76:	21ca      	movs	r1, #202	; 0xca
 8017b78:	205a      	movs	r0, #90	; 0x5a
 8017b7a:	f004 f921 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 8017b7e:	2269      	movs	r2, #105	; 0x69
 8017b80:	21ca      	movs	r1, #202	; 0xca
 8017b82:	2066      	movs	r0, #102	; 0x66
 8017b84:	f004 f91c 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 8017b88:	2261      	movs	r2, #97	; 0x61
 8017b8a:	21ca      	movs	r1, #202	; 0xca
 8017b8c:	2072      	movs	r0, #114	; 0x72
 8017b8e:	f004 f917 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 8017b92:	226c      	movs	r2, #108	; 0x6c
 8017b94:	21ca      	movs	r1, #202	; 0xca
 8017b96:	207f      	movs	r0, #127	; 0x7f
 8017b98:	f004 f912 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 8017b9c:	226e      	movs	r2, #110	; 0x6e
 8017b9e:	21ca      	movs	r1, #202	; 0xca
 8017ba0:	2095      	movs	r0, #149	; 0x95
 8017ba2:	f004 f90d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 8017ba6:	2275      	movs	r2, #117	; 0x75
 8017ba8:	21ca      	movs	r1, #202	; 0xca
 8017baa:	20a2      	movs	r0, #162	; 0xa2
 8017bac:	f004 f908 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 8017bb0:	226d      	movs	r2, #109	; 0x6d
 8017bb2:	21ca      	movs	r1, #202	; 0xca
 8017bb4:	20af      	movs	r0, #175	; 0xaf
 8017bb6:	f004 f903 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 8017bba:	2262      	movs	r2, #98	; 0x62
 8017bbc:	21ca      	movs	r1, #202	; 0xca
 8017bbe:	20bc      	movs	r0, #188	; 0xbc
 8017bc0:	f004 f8fe 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 8017bc4:	2265      	movs	r2, #101	; 0x65
 8017bc6:	21ca      	movs	r1, #202	; 0xca
 8017bc8:	20c9      	movs	r0, #201	; 0xc9
 8017bca:	f004 f8f9 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 8017bce:	2272      	movs	r2, #114	; 0x72
 8017bd0:	21ca      	movs	r1, #202	; 0xca
 8017bd2:	20d6      	movs	r0, #214	; 0xd6
 8017bd4:	f004 f8f4 	bl	801bdc0 <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 8017bd8:	462a      	mov	r2, r5
 8017bda:	490f      	ldr	r1, [pc, #60]	; (8017c18 <GUI_TextEn_Info_Serial+0xe0>)
 8017bdc:	4668      	mov	r0, sp
 8017bde:	f007 fa0f 	bl	801f000 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8017be2:	480e      	ldr	r0, [pc, #56]	; (8017c1c <GUI_TextEn_Info_Serial+0xe4>)
 8017be4:	f004 f822 	bl	801bc2c <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017be8:	2303      	movs	r3, #3
 8017bea:	466a      	mov	r2, sp
 8017bec:	21e6      	movs	r1, #230	; 0xe6
 8017bee:	2028      	movs	r0, #40	; 0x28
 8017bf0:	f004 f93e 	bl	801be70 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 8017bf4:	4622      	mov	r2, r4
 8017bf6:	490a      	ldr	r1, [pc, #40]	; (8017c20 <GUI_TextEn_Info_Serial+0xe8>)
 8017bf8:	4668      	mov	r0, sp
 8017bfa:	f007 fa01 	bl	801f000 <siprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017bfe:	2303      	movs	r3, #3
 8017c00:	466a      	mov	r2, sp
 8017c02:	21e6      	movs	r1, #230	; 0xe6
 8017c04:	2087      	movs	r0, #135	; 0x87
 8017c06:	f004 f933 	bl	801be70 <TFT_DisplayString>
}
 8017c0a:	b003      	add	sp, #12
 8017c0c:	bd30      	pop	{r4, r5, pc}
 8017c0e:	bf00      	nop
 8017c10:	200001b0 	.word	0x200001b0
 8017c14:	200001c0 	.word	0x200001c0
 8017c18:	0802e6c5 	.word	0x0802e6c5
 8017c1c:	200001f0 	.word	0x200001f0
 8017c20:	0802e6c8 	.word	0x0802e6c8

08017c24 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8017c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 8017c26:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8017c28:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017c2c:	9302      	str	r3, [sp, #8]
 8017c2e:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8017c32:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 8017c36:	f003 ffff 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017c3a:	2063      	movs	r0, #99	; 0x63
 8017c3c:	f004 f802 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017c40:	482e      	ldr	r0, [pc, #184]	; (8017cfc <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 8017c42:	4c2f      	ldr	r4, [pc, #188]	; (8017d00 <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 8017c44:	f003 fff2 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 8017c48:	2246      	movs	r2, #70	; 0x46
 8017c4a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017c4e:	2014      	movs	r0, #20
 8017c50:	f004 f8b6 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017c54:	482b      	ldr	r0, [pc, #172]	; (8017d04 <GUI_TextEn_Info_Ver+0xe0>)
 8017c56:	f003 ffe9 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 8017c5a:	2269      	movs	r2, #105	; 0x69
 8017c5c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c60:	2024      	movs	r0, #36	; 0x24
 8017c62:	f004 f8ad 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 8017c66:	2272      	movs	r2, #114	; 0x72
 8017c68:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c6c:	202f      	movs	r0, #47	; 0x2f
 8017c6e:	f004 f8a7 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 8017c72:	226d      	movs	r2, #109	; 0x6d
 8017c74:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c78:	203c      	movs	r0, #60	; 0x3c
 8017c7a:	f004 f8a1 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 8017c7e:	2277      	movs	r2, #119	; 0x77
 8017c80:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c84:	204b      	movs	r0, #75	; 0x4b
 8017c86:	f004 f89b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 8017c8a:	2261      	movs	r2, #97	; 0x61
 8017c8c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c90:	205a      	movs	r0, #90	; 0x5a
 8017c92:	f004 f895 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 8017c96:	2272      	movs	r2, #114	; 0x72
 8017c98:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c9c:	206a      	movs	r0, #106	; 0x6a
 8017c9e:	f004 f88f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8017ca2:	2265      	movs	r2, #101	; 0x65
 8017ca4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017ca8:	2077      	movs	r0, #119	; 0x77
 8017caa:	f004 f889 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16);
 8017cae:	4620      	mov	r0, r4
 8017cb0:	f003 ffbc 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 8017cb4:	222e      	movs	r2, #46	; 0x2e
 8017cb6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017cba:	20ac      	movs	r0, #172	; 0xac
 8017cbc:	f004 f880 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 8017cc0:	2276      	movs	r2, #118	; 0x76
 8017cc2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017cc6:	20a2      	movs	r0, #162	; 0xa2
 8017cc8:	f004 f87a 	bl	801bdc0 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 8017ccc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017cd0:	ee10 0a10 	vmov	r0, s0
 8017cd4:	f7e8 fc48 	bl	8000568 <__aeabi_f2d>
 8017cd8:	4602      	mov	r2, r0
 8017cda:	460b      	mov	r3, r1
 8017cdc:	a802      	add	r0, sp, #8
 8017cde:	490a      	ldr	r1, [pc, #40]	; (8017d08 <GUI_TextEn_Info_Ver+0xe4>)
 8017ce0:	f007 f98e 	bl	801f000 <siprintf>
	TFT_SetFont(&Font16);
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f003 ffa1 	bl	801bc2c <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 8017cea:	2303      	movs	r3, #3
 8017cec:	aa02      	add	r2, sp, #8
 8017cee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017cf2:	20c0      	movs	r0, #192	; 0xc0
 8017cf4:	f004 f8bc 	bl	801be70 <TFT_DisplayString>
 8017cf8:	b004      	add	sp, #16
 8017cfa:	bd10      	pop	{r4, pc}
 8017cfc:	200001b0 	.word	0x200001b0
 8017d00:	200001a8 	.word	0x200001a8
 8017d04:	200001c0 	.word	0x200001c0
 8017d08:	0802e6ad 	.word	0x0802e6ad

08017d0c <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 8017d0c:	b570      	push	{r4, r5, r6, lr}
 8017d0e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	
	TFT_SetFont(&Font16EN_arch_big);
 8017d10:	4e36      	ldr	r6, [pc, #216]	; (8017dec <GUI_TitleString_Name+0xe0>)
	TFT_SetTextColor(TFT_White);
 8017d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017d16:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017d18:	f003 ff8e 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d1c:	2063      	movs	r0, #99	; 0x63
 8017d1e:	f003 ff91 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017d22:	4630      	mov	r0, r6
 8017d24:	f003 ff82 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 8017d28:	4629      	mov	r1, r5
 8017d2a:	4620      	mov	r0, r4
 8017d2c:	2254      	movs	r2, #84	; 0x54
 8017d2e:	f004 f847 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 8017d32:	f104 000f 	add.w	r0, r4, #15
 8017d36:	4629      	mov	r1, r5
 8017d38:	224b      	movs	r2, #75	; 0x4b
 8017d3a:	b280      	uxth	r0, r0
 8017d3c:	f004 f840 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 8017d40:	f104 001e 	add.w	r0, r4, #30
 8017d44:	4629      	mov	r1, r5
 8017d46:	2241      	movs	r2, #65	; 0x41
 8017d48:	b280      	uxth	r0, r0
 8017d4a:	f004 f839 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 8017d4e:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 8017d52:	4629      	mov	r1, r5
 8017d54:	222d      	movs	r2, #45	; 0x2d
 8017d56:	b280      	uxth	r0, r0
 8017d58:	f004 f832 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 8017d5c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8017d60:	4629      	mov	r1, r5
 8017d62:	2253      	movs	r2, #83	; 0x53
 8017d64:	b280      	uxth	r0, r0
 8017d66:	f004 f82b 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017d6a:	4821      	ldr	r0, [pc, #132]	; (8017df0 <GUI_TitleString_Name+0xe4>)
 8017d6c:	f003 ff5e 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 8017d70:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8017d74:	4629      	mov	r1, r5
 8017d76:	2270      	movs	r2, #112	; 0x70
 8017d78:	b280      	uxth	r0, r0
 8017d7a:	f004 f821 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 8017d7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d82:	4629      	mov	r1, r5
 8017d84:	2265      	movs	r2, #101	; 0x65
 8017d86:	b280      	uxth	r0, r0
 8017d88:	f004 f81a 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 8017d8c:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8017d90:	4629      	mov	r1, r5
 8017d92:	2263      	movs	r2, #99	; 0x63
 8017d94:	b280      	uxth	r0, r0
 8017d96:	f004 f813 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 8017d9a:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8017d9e:	4629      	mov	r1, r5
 8017da0:	2274      	movs	r2, #116	; 0x74
 8017da2:	b280      	uxth	r0, r0
 8017da4:	f004 f80c 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 8017da8:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8017dac:	4629      	mov	r1, r5
 8017dae:	2272      	movs	r2, #114	; 0x72
 8017db0:	b280      	uxth	r0, r0
 8017db2:	f004 f805 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8017db6:	4630      	mov	r0, r6
 8017db8:	f003 ff38 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+135, 	Y, '(');
 8017dbc:	f104 0087 	add.w	r0, r4, #135	; 0x87
 8017dc0:	4629      	mov	r1, r5
 8017dc2:	2228      	movs	r2, #40	; 0x28
 8017dc4:	b280      	uxth	r0, r0
 8017dc6:	f003 fffb 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+150, 	Y, 'M');
 8017dca:	f104 0096 	add.w	r0, r4, #150	; 0x96
 8017dce:	4629      	mov	r1, r5
 8017dd0:	224d      	movs	r2, #77	; 0x4d
 8017dd2:	b280      	uxth	r0, r0
 8017dd4:	f003 fff4 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+166, 	Y, ')');
 8017dd8:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8017ddc:	4629      	mov	r1, r5
 8017dde:	2229      	movs	r2, #41	; 0x29
 8017de0:	b280      	uxth	r0, r0
}
 8017de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X+166, 	Y, ')');
 8017de6:	f003 bfeb 	b.w	801bdc0 <TFT_DrawChar>
 8017dea:	bf00      	nop
 8017dec:	200001b0 	.word	0x200001b0
 8017df0:	200001c0 	.word	0x200001c0

08017df4 <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y)
{
 8017df4:	b538      	push	{r3, r4, r5, lr}
 8017df6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017df8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017dfc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017dfe:	f003 ff1b 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017e02:	2063      	movs	r0, #99	; 0x63
 8017e04:	f003 ff1e 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 8017e08:	4814      	ldr	r0, [pc, #80]	; (8017e5c <GUI_TitleString_Version+0x68>)
 8017e0a:	f003 ff0f 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 8017e0e:	4629      	mov	r1, r5
 8017e10:	2276      	movs	r2, #118	; 0x76
 8017e12:	4620      	mov	r0, r4
 8017e14:	f003 ffd4 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8017e18:	4811      	ldr	r0, [pc, #68]	; (8017e60 <GUI_TitleString_Version+0x6c>)
 8017e1a:	f003 ff07 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 8017e1e:	f104 000d 	add.w	r0, r4, #13
 8017e22:	4629      	mov	r1, r5
 8017e24:	222e      	movs	r2, #46	; 0x2e
 8017e26:	b280      	uxth	r0, r0
 8017e28:	f003 ffca 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+24, 		Y, '1');
 8017e2c:	f104 0018 	add.w	r0, r4, #24
 8017e30:	4629      	mov	r1, r5
 8017e32:	2231      	movs	r2, #49	; 0x31
 8017e34:	b280      	uxth	r0, r0
 8017e36:	f003 ffc3 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+35, 		Y, '.');
 8017e3a:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8017e3e:	4629      	mov	r1, r5
 8017e40:	222e      	movs	r2, #46	; 0x2e
 8017e42:	b280      	uxth	r0, r0
 8017e44:	f003 ffbc 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+45, 		Y, '0');
 8017e48:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	2230      	movs	r2, #48	; 0x30
 8017e50:	b280      	uxth	r0, r0
}
 8017e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+45, 		Y, '0');
 8017e56:	f003 bfb3 	b.w	801bdc0 <TFT_DrawChar>
 8017e5a:	bf00      	nop
 8017e5c:	200001c0 	.word	0x200001c0
 8017e60:	200001b0 	.word	0x200001b0

08017e64 <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017e68:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017e6c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017e6e:	f003 fee3 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017e72:	2063      	movs	r0, #99	; 0x63
 8017e74:	f003 fee6 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017e78:	4811      	ldr	r0, [pc, #68]	; (8017ec0 <GUI_TextRu_Language+0x5c>)
 8017e7a:	f003 fed7 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 8017e7e:	4621      	mov	r1, r4
 8017e80:	22af      	movs	r2, #175	; 0xaf
 8017e82:	4628      	mov	r0, r5
 8017e84:	f003 fee4 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8017e88:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017e8a:	480e      	ldr	r0, [pc, #56]	; (8017ec4 <GUI_TextRu_Language+0x60>)
 8017e8c:	f003 fece 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8017e90:	b2a4      	uxth	r4, r4
 8017e92:	f105 000f 	add.w	r0, r5, #15
 8017e96:	4621      	mov	r1, r4
 8017e98:	22b7      	movs	r2, #183	; 0xb7
 8017e9a:	b280      	uxth	r0, r0
 8017e9c:	f003 fed8 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 8017ea0:	f105 001c 	add.w	r0, r5, #28
 8017ea4:	4621      	mov	r1, r4
 8017ea6:	228b      	movs	r2, #139	; 0x8b
 8017ea8:	b280      	uxth	r0, r0
 8017eaa:	f003 fed1 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8017eae:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017eb2:	4621      	mov	r1, r4
 8017eb4:	22ba      	movs	r2, #186	; 0xba
 8017eb6:	b280      	uxth	r0, r0
}
 8017eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8017ebc:	f003 bec8 	b.w	801bc50 <TFT_DrawCharRus>
 8017ec0:	200001d0 	.word	0x200001d0
 8017ec4:	200001d8 	.word	0x200001d8

08017ec8 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017ecc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017ed0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017ed2:	f003 feb1 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017ed6:	2063      	movs	r0, #99	; 0x63
 8017ed8:	f003 feb4 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017edc:	481c      	ldr	r0, [pc, #112]	; (8017f50 <GUI_TextRu_Russian+0x88>)
 8017ede:	f003 fea5 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 8017ee2:	4621      	mov	r1, r4
 8017ee4:	22a0      	movs	r2, #160	; 0xa0
 8017ee6:	4628      	mov	r0, r5
 8017ee8:	f003 feb2 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017eec:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017eee:	4819      	ldr	r0, [pc, #100]	; (8017f54 <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017ef0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8017ef2:	f003 fe9b 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017ef6:	f105 000f 	add.w	r0, r5, #15
 8017efa:	4621      	mov	r1, r4
 8017efc:	2283      	movs	r2, #131	; 0x83
 8017efe:	b280      	uxth	r0, r0
 8017f00:	f003 fea6 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 8017f04:	f105 001c 	add.w	r0, r5, #28
 8017f08:	4621      	mov	r1, r4
 8017f0a:	2281      	movs	r2, #129	; 0x81
 8017f0c:	b280      	uxth	r0, r0
 8017f0e:	f003 fe9f 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 8017f12:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017f16:	4621      	mov	r1, r4
 8017f18:	2281      	movs	r2, #129	; 0x81
 8017f1a:	b280      	uxth	r0, r0
 8017f1c:	f003 fe98 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 8017f20:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8017f24:	4621      	mov	r1, r4
 8017f26:	22ba      	movs	r2, #186	; 0xba
 8017f28:	b280      	uxth	r0, r0
 8017f2a:	f003 fe91 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 8017f2e:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017f32:	4621      	mov	r1, r4
 8017f34:	22b8      	movs	r2, #184	; 0xb8
 8017f36:	b280      	uxth	r0, r0
 8017f38:	f003 fe8a 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8017f3c:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8017f40:	4621      	mov	r1, r4
 8017f42:	22b9      	movs	r2, #185	; 0xb9
 8017f44:	b280      	uxth	r0, r0
}
 8017f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8017f4a:	f003 be81 	b.w	801bc50 <TFT_DrawCharRus>
 8017f4e:	bf00      	nop
 8017f50:	200001d0 	.word	0x200001d0
 8017f54:	200001d8 	.word	0x200001d8

08017f58 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 8017f58:	b538      	push	{r3, r4, r5, lr}
 8017f5a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017f5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017f60:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017f62:	f003 fe69 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017f66:	2063      	movs	r0, #99	; 0x63
 8017f68:	f003 fe6c 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017f6c:	4849      	ldr	r0, [pc, #292]	; (8018094 <GUI_TextRu_Info+0x13c>)
 8017f6e:	f003 fe5d 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 8017f72:	4621      	mov	r1, r4
 8017f74:	2298      	movs	r2, #152	; 0x98
 8017f76:	4628      	mov	r0, r5
 8017f78:	f003 fe6a 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017f7c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017f7e:	4846      	ldr	r0, [pc, #280]	; (8018098 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017f80:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8017f82:	f003 fe53 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017f86:	f105 000f 	add.w	r0, r5, #15
 8017f8a:	4621      	mov	r1, r4
 8017f8c:	22bd      	movs	r2, #189	; 0xbd
 8017f8e:	b280      	uxth	r0, r0
 8017f90:	f003 fe5e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 8017f94:	f105 001c 	add.w	r0, r5, #28
 8017f98:	4621      	mov	r1, r4
 8017f9a:	2284      	movs	r2, #132	; 0x84
 8017f9c:	b280      	uxth	r0, r0
 8017f9e:	f003 fe57 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 8017fa2:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017fa6:	4621      	mov	r1, r4
 8017fa8:	22be      	movs	r2, #190	; 0xbe
 8017faa:	b280      	uxth	r0, r0
 8017fac:	f003 fe50 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 8017fb0:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8017fb4:	4621      	mov	r1, r4
 8017fb6:	2280      	movs	r2, #128	; 0x80
 8017fb8:	b280      	uxth	r0, r0
 8017fba:	f003 fe49 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 8017fbe:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8017fc2:	4621      	mov	r1, r4
 8017fc4:	22bc      	movs	r2, #188	; 0xbc
 8017fc6:	b280      	uxth	r0, r0
 8017fc8:	f003 fe42 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 8017fcc:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 8017fd0:	4621      	mov	r1, r4
 8017fd2:	22b0      	movs	r2, #176	; 0xb0
 8017fd4:	b280      	uxth	r0, r0
 8017fd6:	f003 fe3b 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 8017fda:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017fde:	4621      	mov	r1, r4
 8017fe0:	2286      	movs	r2, #134	; 0x86
 8017fe2:	b280      	uxth	r0, r0
 8017fe4:	f003 fe34 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 8017fe8:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8017fec:	4621      	mov	r1, r4
 8017fee:	22b8      	movs	r2, #184	; 0xb8
 8017ff0:	b280      	uxth	r0, r0
 8017ff2:	f003 fe2d 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 8017ff6:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8017ffa:	4621      	mov	r1, r4
 8017ffc:	228f      	movs	r2, #143	; 0x8f
 8017ffe:	b280      	uxth	r0, r0
 8018000:	f003 fe26 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 8018004:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8018008:	4621      	mov	r1, r4
 801800a:	2201      	movs	r2, #1
 801800c:	b280      	uxth	r0, r0
 801800e:	f003 fe1f 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 8018012:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8018016:	4621      	mov	r1, r4
 8018018:	22be      	movs	r2, #190	; 0xbe
 801801a:	b280      	uxth	r0, r0
 801801c:	f003 fe18 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 8018020:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8018024:	4621      	mov	r1, r4
 8018026:	2201      	movs	r2, #1
 8018028:	b280      	uxth	r0, r0
 801802a:	f003 fe11 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 801802e:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8018032:	4621      	mov	r1, r4
 8018034:	22bf      	movs	r2, #191	; 0xbf
 8018036:	b280      	uxth	r0, r0
 8018038:	f003 fe0a 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 801803c:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8018040:	4621      	mov	r1, r4
 8018042:	2280      	movs	r2, #128	; 0x80
 8018044:	b280      	uxth	r0, r0
 8018046:	f003 fe03 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 801804a:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801804e:	4621      	mov	r1, r4
 8018050:	22b8      	movs	r2, #184	; 0xb8
 8018052:	b280      	uxth	r0, r0
 8018054:	f003 fdfc 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 8018058:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801805c:	4621      	mov	r1, r4
 801805e:	22b1      	movs	r2, #177	; 0xb1
 8018060:	b280      	uxth	r0, r0
 8018062:	f003 fdf5 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 8018066:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801806a:	4621      	mov	r1, r4
 801806c:	22be      	movs	r2, #190	; 0xbe
 801806e:	b280      	uxth	r0, r0
 8018070:	f003 fdee 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 8018074:	f105 00de 	add.w	r0, r5, #222	; 0xde
 8018078:	4621      	mov	r1, r4
 801807a:	2280      	movs	r2, #128	; 0x80
 801807c:	b280      	uxth	r0, r0
 801807e:	f003 fde7 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8018082:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 8018086:	4621      	mov	r1, r4
 8018088:	22b5      	movs	r2, #181	; 0xb5
 801808a:	b280      	uxth	r0, r0
}
 801808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8018090:	f003 bdde 	b.w	801bc50 <TFT_DrawCharRus>
 8018094:	200001d0 	.word	0x200001d0
 8018098:	200001d8 	.word	0x200001d8

0801809c <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 801809c:	b538      	push	{r3, r4, r5, lr}
 801809e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80180a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80180a4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80180a6:	f003 fdc7 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80180aa:	2063      	movs	r0, #99	; 0x63
 80180ac:	f003 fdca 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80180b0:	4815      	ldr	r0, [pc, #84]	; (8018108 <GUI_TextRu_Mode+0x6c>)
 80180b2:	f003 fdbb 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 80180b6:	4621      	mov	r1, r4
 80180b8:	22a0      	movs	r2, #160	; 0xa0
 80180ba:	4628      	mov	r0, r5
 80180bc:	f003 fdc8 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 80180c0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80180c2:	4812      	ldr	r0, [pc, #72]	; (801810c <GUI_TextRu_Mode+0x70>)
 80180c4:	f003 fdb2 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 80180c8:	b2a4      	uxth	r4, r4
 80180ca:	f105 000f 	add.w	r0, r5, #15
 80180ce:	4621      	mov	r1, r4
 80180d0:	22b5      	movs	r2, #181	; 0xb5
 80180d2:	b280      	uxth	r0, r0
 80180d4:	f003 fdbc 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 80180d8:	f105 001c 	add.w	r0, r5, #28
 80180dc:	4621      	mov	r1, r4
 80180de:	22b6      	movs	r2, #182	; 0xb6
 80180e0:	b280      	uxth	r0, r0
 80180e2:	f003 fdb5 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 80180e6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80180ea:	4621      	mov	r1, r4
 80180ec:	22b8      	movs	r2, #184	; 0xb8
 80180ee:	b280      	uxth	r0, r0
 80180f0:	f003 fdae 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 80180f4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80180f8:	4621      	mov	r1, r4
 80180fa:	22bc      	movs	r2, #188	; 0xbc
 80180fc:	b280      	uxth	r0, r0
}
 80180fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 8018102:	f003 bda5 	b.w	801bc50 <TFT_DrawCharRus>
 8018106:	bf00      	nop
 8018108:	200001d0 	.word	0x200001d0
 801810c:	200001d8 	.word	0x200001d8

08018110 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018114:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018118:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801811a:	f003 fd8d 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801811e:	2063      	movs	r0, #99	; 0x63
 8018120:	f003 fd90 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018124:	482d      	ldr	r0, [pc, #180]	; (80181dc <GUI_TextRu_Illuminance+0xcc>)
 8018126:	f003 fd81 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801812a:	4621      	mov	r1, r4
 801812c:	229e      	movs	r2, #158	; 0x9e
 801812e:	4628      	mov	r0, r5
 8018130:	f003 fd8e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018134:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018136:	482a      	ldr	r0, [pc, #168]	; (80181e0 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018138:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801813a:	f003 fd77 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801813e:	f105 000f 	add.w	r0, r5, #15
 8018142:	4621      	mov	r1, r4
 8018144:	2281      	movs	r2, #129	; 0x81
 8018146:	b280      	uxth	r0, r0
 8018148:	f003 fd82 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 801814c:	f105 001a 	add.w	r0, r5, #26
 8018150:	4621      	mov	r1, r4
 8018152:	22b2      	movs	r2, #178	; 0xb2
 8018154:	b280      	uxth	r0, r0
 8018156:	f003 fd7b 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 801815a:	f105 0026 	add.w	r0, r5, #38	; 0x26
 801815e:	4621      	mov	r1, r4
 8018160:	22b5      	movs	r2, #181	; 0xb5
 8018162:	b280      	uxth	r0, r0
 8018164:	f003 fd74 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 8018168:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801816c:	4621      	mov	r1, r4
 801816e:	2289      	movs	r2, #137	; 0x89
 8018170:	b280      	uxth	r0, r0
 8018172:	f003 fd6d 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 8018176:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801817a:	4621      	mov	r1, r4
 801817c:	22b5      	movs	r2, #181	; 0xb5
 801817e:	b280      	uxth	r0, r0
 8018180:	f003 fd66 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 8018184:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018188:	4621      	mov	r1, r4
 801818a:	22bd      	movs	r2, #189	; 0xbd
 801818c:	b280      	uxth	r0, r0
 801818e:	f003 fd5f 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 8018192:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8018196:	4621      	mov	r1, r4
 8018198:	22bd      	movs	r2, #189	; 0xbd
 801819a:	b280      	uxth	r0, r0
 801819c:	f003 fd58 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 80181a0:	f105 0061 	add.w	r0, r5, #97	; 0x61
 80181a4:	4621      	mov	r1, r4
 80181a6:	22be      	movs	r2, #190	; 0xbe
 80181a8:	b280      	uxth	r0, r0
 80181aa:	f003 fd51 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 80181ae:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 80181b2:	4621      	mov	r1, r4
 80181b4:	2281      	movs	r2, #129	; 0x81
 80181b6:	b280      	uxth	r0, r0
 80181b8:	f003 fd4a 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 80181bc:	f105 0076 	add.w	r0, r5, #118	; 0x76
 80181c0:	4621      	mov	r1, r4
 80181c2:	2282      	movs	r2, #130	; 0x82
 80181c4:	b280      	uxth	r0, r0
 80181c6:	f003 fd43 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 80181ca:	f105 0082 	add.w	r0, r5, #130	; 0x82
 80181ce:	4621      	mov	r1, r4
 80181d0:	228c      	movs	r2, #140	; 0x8c
 80181d2:	b280      	uxth	r0, r0
}
 80181d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 80181d8:	f003 bd3a 	b.w	801bc50 <TFT_DrawCharRus>
 80181dc:	200001d0 	.word	0x200001d0
 80181e0:	200001d8 	.word	0x200001d8

080181e4 <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 80181e4:	b538      	push	{r3, r4, r5, lr}
 80181e6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80181e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80181ec:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80181ee:	f003 fd23 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80181f2:	2063      	movs	r0, #99	; 0x63
 80181f4:	f003 fd26 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80181f8:	480b      	ldr	r0, [pc, #44]	; (8018228 <GUI_TextRu_PPF+0x44>)
 80181fa:	f003 fd17 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 80181fe:	4629      	mov	r1, r5
 8018200:	4620      	mov	r0, r4
 8018202:	22a4      	movs	r2, #164	; 0xa4
 8018204:	f003 fd24 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018208:	f104 0011 	add.w	r0, r4, #17
 801820c:	4629      	mov	r1, r5
 801820e:	2290      	movs	r2, #144	; 0x90
 8018210:	b280      	uxth	r0, r0
 8018212:	f003 fd1d 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018216:	f104 0020 	add.w	r0, r4, #32
 801821a:	4629      	mov	r1, r5
 801821c:	22a0      	movs	r2, #160	; 0xa0
 801821e:	b280      	uxth	r0, r0
}
 8018220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018224:	f003 bd14 	b.w	801bc50 <TFT_DrawCharRus>
 8018228:	200001d0 	.word	0x200001d0

0801822c <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 801822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018230:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 8018232:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8018340 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 8018236:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8018344 <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 801823a:	4f40      	ldr	r7, [pc, #256]	; (801833c <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 801823c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018240:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018242:	f003 fcf9 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018246:	2063      	movs	r0, #99	; 0x63
 8018248:	f003 fcfc 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801824c:	4648      	mov	r0, r9
 801824e:	f003 fced 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 8018252:	4629      	mov	r1, r5
 8018254:	22a1      	movs	r2, #161	; 0xa1
 8018256:	4620      	mov	r0, r4
 8018258:	f003 fcfa 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801825c:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 801825e:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018260:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 8018262:	f003 fce3 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018266:	f104 000f 	add.w	r0, r4, #15
 801826a:	4631      	mov	r1, r6
 801826c:	22b8      	movs	r2, #184	; 0xb8
 801826e:	b280      	uxth	r0, r0
 8018270:	f003 fcee 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 8018274:	f104 001b 	add.w	r0, r4, #27
 8018278:	4631      	mov	r1, r6
 801827a:	22bd      	movs	r2, #189	; 0xbd
 801827c:	b280      	uxth	r0, r0
 801827e:	f003 fce7 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018282:	4638      	mov	r0, r7
 8018284:	f003 fcd2 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 8018288:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801828c:	4629      	mov	r1, r5
 801828e:	222d      	movs	r2, #45	; 0x2d
 8018290:	b280      	uxth	r0, r0
 8018292:	f003 fd95 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 8018296:	4648      	mov	r0, r9
 8018298:	f003 fcc8 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 801829c:	f104 0037 	add.w	r0, r4, #55	; 0x37
 80182a0:	4629      	mov	r1, r5
 80182a2:	2297      	movs	r2, #151	; 0x97
 80182a4:	b280      	uxth	r0, r0
 80182a6:	f003 fcd3 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80182aa:	4640      	mov	r0, r8
 80182ac:	f003 fcbe 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 80182b0:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80182b4:	4631      	mov	r1, r6
 80182b6:	22b5      	movs	r2, #181	; 0xb5
 80182b8:	b280      	uxth	r0, r0
 80182ba:	f003 fcc9 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 80182be:	f104 0052 	add.w	r0, r4, #82	; 0x52
 80182c2:	4631      	mov	r1, r6
 80182c4:	22bb      	movs	r2, #187	; 0xbb
 80182c6:	b280      	uxth	r0, r0
 80182c8:	f003 fcc2 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 80182cc:	4638      	mov	r0, r7
 80182ce:	f003 fcad 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 80182d2:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 80182d6:	4629      	mov	r1, r5
 80182d8:	222d      	movs	r2, #45	; 0x2d
 80182da:	b280      	uxth	r0, r0
 80182dc:	f003 fd70 	bl	801bdc0 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 80182e0:	4648      	mov	r0, r9
 80182e2:	f003 fca3 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 80182e6:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 80182ea:	4629      	mov	r1, r5
 80182ec:	229a      	movs	r2, #154	; 0x9a
 80182ee:	b280      	uxth	r0, r0
 80182f0:	f003 fcae 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80182f4:	4640      	mov	r0, r8
 80182f6:	f003 fc99 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 80182fa:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80182fe:	4631      	mov	r1, r6
 8018300:	2280      	movs	r2, #128	; 0x80
 8018302:	b280      	uxth	r0, r0
 8018304:	f003 fca4 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018308:	4638      	mov	r0, r7
 801830a:	f003 fc8f 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 801830e:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8018312:	4629      	mov	r1, r5
 8018314:	222d      	movs	r2, #45	; 0x2d
 8018316:	b280      	uxth	r0, r0
 8018318:	f003 fd52 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 801831c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8018320:	4629      	mov	r1, r5
 8018322:	2246      	movs	r2, #70	; 0x46
 8018324:	b280      	uxth	r0, r0
 8018326:	f003 fd4b 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 801832a:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 801832e:	4629      	mov	r1, r5
 8018330:	2252      	movs	r2, #82	; 0x52
 8018332:	b280      	uxth	r0, r0
}
 8018334:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 8018338:	f003 bd42 	b.w	801bdc0 <TFT_DrawChar>
 801833c:	200001b0 	.word	0x200001b0
 8018340:	200001d0 	.word	0x200001d0
 8018344:	200001d8 	.word	0x200001d8

08018348 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 8018348:	b538      	push	{r3, r4, r5, lr}
 801834a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801834c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018350:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018352:	f003 fc71 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018356:	2063      	movs	r0, #99	; 0x63
 8018358:	f003 fc74 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801835c:	482d      	ldr	r0, [pc, #180]	; (8018414 <GUI_TextRu_PPF_bands+0xcc>)
 801835e:	f003 fc65 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 8018362:	4621      	mov	r1, r4
 8018364:	4628      	mov	r0, r5
 8018366:	22a4      	movs	r2, #164	; 0xa4
 8018368:	f003 fc72 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801836c:	f105 0011 	add.w	r0, r5, #17
 8018370:	4621      	mov	r1, r4
 8018372:	2290      	movs	r2, #144	; 0x90
 8018374:	b280      	uxth	r0, r0
 8018376:	f003 fc6b 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801837a:	f105 0020 	add.w	r0, r5, #32
 801837e:	4621      	mov	r1, r4
 8018380:	22a0      	movs	r2, #160	; 0xa0
 8018382:	b280      	uxth	r0, r0
 8018384:	f003 fc64 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018388:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 801838a:	4823      	ldr	r0, [pc, #140]	; (8018418 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801838c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801838e:	f003 fc4d 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018392:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8018396:	4621      	mov	r1, r4
 8018398:	22b4      	movs	r2, #180	; 0xb4
 801839a:	b280      	uxth	r0, r0
 801839c:	f003 fc58 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 80183a0:	f105 0046 	add.w	r0, r5, #70	; 0x46
 80183a4:	4621      	mov	r1, r4
 80183a6:	22b8      	movs	r2, #184	; 0xb8
 80183a8:	b280      	uxth	r0, r0
 80183aa:	f003 fc51 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 80183ae:	f105 0053 	add.w	r0, r5, #83	; 0x53
 80183b2:	4621      	mov	r1, r4
 80183b4:	22b0      	movs	r2, #176	; 0xb0
 80183b6:	b280      	uxth	r0, r0
 80183b8:	f003 fc4a 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 80183bc:	f105 0060 	add.w	r0, r5, #96	; 0x60
 80183c0:	4621      	mov	r1, r4
 80183c2:	22bf      	movs	r2, #191	; 0xbf
 80183c4:	b280      	uxth	r0, r0
 80183c6:	f003 fc43 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 80183ca:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 80183ce:	4621      	mov	r1, r4
 80183d0:	22b0      	movs	r2, #176	; 0xb0
 80183d2:	b280      	uxth	r0, r0
 80183d4:	f003 fc3c 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 80183d8:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 80183dc:	4621      	mov	r1, r4
 80183de:	22b7      	movs	r2, #183	; 0xb7
 80183e0:	b280      	uxth	r0, r0
 80183e2:	f003 fc35 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 80183e6:	f105 0087 	add.w	r0, r5, #135	; 0x87
 80183ea:	4621      	mov	r1, r4
 80183ec:	22be      	movs	r2, #190	; 0xbe
 80183ee:	b280      	uxth	r0, r0
 80183f0:	f003 fc2e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 80183f4:	f105 0094 	add.w	r0, r5, #148	; 0x94
 80183f8:	4621      	mov	r1, r4
 80183fa:	22bd      	movs	r2, #189	; 0xbd
 80183fc:	b280      	uxth	r0, r0
 80183fe:	f003 fc27 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018402:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8018406:	4621      	mov	r1, r4
 8018408:	228b      	movs	r2, #139	; 0x8b
 801840a:	b280      	uxth	r0, r0
}
 801840c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018410:	f003 bc1e 	b.w	801bc50 <TFT_DrawCharRus>
 8018414:	200001d0 	.word	0x200001d0
 8018418:	200001d8 	.word	0x200001d8

0801841c <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801841c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801841e:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8018420:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018424:	2300      	movs	r3, #0
 8018426:	9300      	str	r3, [sp, #0]
 8018428:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801842c:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801842e:	f003 fc03 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018432:	2063      	movs	r0, #99	; 0x63
 8018434:	f003 fc06 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018438:	4832      	ldr	r0, [pc, #200]	; (8018504 <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 801843a:	4d33      	ldr	r5, [pc, #204]	; (8018508 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 801843c:	f003 fbf6 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 8018440:	229a      	movs	r2, #154	; 0x9a
 8018442:	2160      	movs	r1, #96	; 0x60
 8018444:	2046      	movs	r0, #70	; 0x46
 8018446:	f003 fc03 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801844a:	4830      	ldr	r0, [pc, #192]	; (801850c <GUI_TextRu_Info_Callibration+0xf0>)
 801844c:	f003 fbee 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 8018450:	22b0      	movs	r2, #176	; 0xb0
 8018452:	2166      	movs	r1, #102	; 0x66
 8018454:	2057      	movs	r0, #87	; 0x57
 8018456:	f003 fbfb 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 801845a:	22bb      	movs	r2, #187	; 0xbb
 801845c:	2166      	movs	r1, #102	; 0x66
 801845e:	2064      	movs	r0, #100	; 0x64
 8018460:	f003 fbf6 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 8018464:	22b8      	movs	r2, #184	; 0xb8
 8018466:	2166      	movs	r1, #102	; 0x66
 8018468:	2071      	movs	r0, #113	; 0x71
 801846a:	f003 fbf1 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 801846e:	22b1      	movs	r2, #177	; 0xb1
 8018470:	2166      	movs	r1, #102	; 0x66
 8018472:	207e      	movs	r0, #126	; 0x7e
 8018474:	f003 fbec 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 8018478:	2280      	movs	r2, #128	; 0x80
 801847a:	2166      	movs	r1, #102	; 0x66
 801847c:	208b      	movs	r0, #139	; 0x8b
 801847e:	f003 fbe7 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 8018482:	22be      	movs	r2, #190	; 0xbe
 8018484:	2166      	movs	r1, #102	; 0x66
 8018486:	2098      	movs	r0, #152	; 0x98
 8018488:	f003 fbe2 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 801848c:	22b2      	movs	r2, #178	; 0xb2
 801848e:	2166      	movs	r1, #102	; 0x66
 8018490:	20a5      	movs	r0, #165	; 0xa5
 8018492:	f003 fbdd 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 8018496:	22ba      	movs	r2, #186	; 0xba
 8018498:	2166      	movs	r1, #102	; 0x66
 801849a:	20b2      	movs	r0, #178	; 0xb2
 801849c:	f003 fbd8 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 80184a0:	22b0      	movs	r2, #176	; 0xb0
 80184a2:	2166      	movs	r1, #102	; 0x66
 80184a4:	20bc      	movs	r0, #188	; 0xbc
 80184a6:	f003 fbd3 	bl	801bc50 <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 80184aa:	4622      	mov	r2, r4
 80184ac:	4629      	mov	r1, r5
 80184ae:	4668      	mov	r0, sp
 80184b0:	f006 fda6 	bl	801f000 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80184b4:	4816      	ldr	r0, [pc, #88]	; (8018510 <GUI_TextRu_Info_Callibration+0xf4>)
 80184b6:	f003 fbb9 	bl	801bc2c <TFT_SetFont>
	buffer[2] = '.';
 80184ba:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184bc:	2303      	movs	r3, #3
 80184be:	466a      	mov	r2, sp
 80184c0:	2182      	movs	r1, #130	; 0x82
 80184c2:	201e      	movs	r0, #30
	buffer[2] = '.';
 80184c4:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184c8:	f003 fcd2 	bl	801be70 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 80184cc:	4632      	mov	r2, r6
 80184ce:	4629      	mov	r1, r5
 80184d0:	4668      	mov	r0, sp
 80184d2:	f006 fd95 	bl	801f000 <siprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184d6:	2303      	movs	r3, #3
 80184d8:	466a      	mov	r2, sp
 80184da:	2182      	movs	r1, #130	; 0x82
 80184dc:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 80184de:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184e2:	f003 fcc5 	bl	801be70 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 80184e6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80184ea:	490a      	ldr	r1, [pc, #40]	; (8018514 <GUI_TextRu_Info_Callibration+0xf8>)
 80184ec:	4668      	mov	r0, sp
 80184ee:	f006 fd87 	bl	801f000 <siprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184f2:	2303      	movs	r3, #3
 80184f4:	466a      	mov	r2, sp
 80184f6:	2182      	movs	r1, #130	; 0x82
 80184f8:	209b      	movs	r0, #155	; 0x9b
 80184fa:	f003 fcb9 	bl	801be70 <TFT_DisplayString>
}
 80184fe:	b002      	add	sp, #8
 8018500:	bd70      	pop	{r4, r5, r6, pc}
 8018502:	bf00      	nop
 8018504:	200001d0 	.word	0x200001d0
 8018508:	0802e6bc 	.word	0x0802e6bc
 801850c:	200001d8 	.word	0x200001d8
 8018510:	200001f0 	.word	0x200001f0
 8018514:	0802e6c1 	.word	0x0802e6c1

08018518 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801851c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018520:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018522:	f003 fb89 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018526:	2063      	movs	r0, #99	; 0x63
 8018528:	f003 fb8c 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801852c:	4818      	ldr	r0, [pc, #96]	; (8018590 <GUI_TextRu_WriteSD+0x78>)
 801852e:	f003 fb7d 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 8018532:	4621      	mov	r1, r4
 8018534:	2297      	movs	r2, #151	; 0x97
 8018536:	4628      	mov	r0, r5
 8018538:	f003 fb8a 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801853c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801853e:	4815      	ldr	r0, [pc, #84]	; (8018594 <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018540:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018542:	f003 fb73 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018546:	f105 000f 	add.w	r0, r5, #15
 801854a:	4621      	mov	r1, r4
 801854c:	22b0      	movs	r2, #176	; 0xb0
 801854e:	b280      	uxth	r0, r0
 8018550:	f003 fb7e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 8018554:	f105 001c 	add.w	r0, r5, #28
 8018558:	4621      	mov	r1, r4
 801855a:	22bf      	movs	r2, #191	; 0xbf
 801855c:	b280      	uxth	r0, r0
 801855e:	f003 fb77 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 8018562:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018566:	4621      	mov	r1, r4
 8018568:	22b8      	movs	r2, #184	; 0xb8
 801856a:	b280      	uxth	r0, r0
 801856c:	f003 fb70 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 8018570:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8018574:	4621      	mov	r1, r4
 8018576:	2281      	movs	r2, #129	; 0x81
 8018578:	b280      	uxth	r0, r0
 801857a:	f003 fb69 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801857e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8018582:	4621      	mov	r1, r4
 8018584:	228c      	movs	r2, #140	; 0x8c
 8018586:	b280      	uxth	r0, r0
}
 8018588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801858c:	f003 bb60 	b.w	801bc50 <TFT_DrawCharRus>
 8018590:	200001d0 	.word	0x200001d0
 8018594:	200001d8 	.word	0x200001d8

08018598 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8018598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801859a:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801859c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80185a0:	2300      	movs	r3, #0
 80185a2:	9300      	str	r3, [sp, #0]
 80185a4:	f88d 3004 	strb.w	r3, [sp, #4]
{
 80185a8:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 80185aa:	f003 fb45 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80185ae:	2063      	movs	r0, #99	; 0x63
 80185b0:	f003 fb48 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80185b4:	4830      	ldr	r0, [pc, #192]	; (8018678 <GUI_TextRu_Info_Serial+0xe0>)
 80185b6:	f003 fb39 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 80185ba:	22a1      	movs	r2, #161	; 0xa1
 80185bc:	21c4      	movs	r1, #196	; 0xc4
 80185be:	203c      	movs	r0, #60	; 0x3c
 80185c0:	f003 fb46 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80185c4:	482d      	ldr	r0, [pc, #180]	; (801867c <GUI_TextRu_Info_Serial+0xe4>)
 80185c6:	f003 fb31 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 80185ca:	22b5      	movs	r2, #181	; 0xb5
 80185cc:	21ca      	movs	r1, #202	; 0xca
 80185ce:	204d      	movs	r0, #77	; 0x4d
 80185d0:	f003 fb3e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 80185d4:	2280      	movs	r2, #128	; 0x80
 80185d6:	21ca      	movs	r1, #202	; 0xca
 80185d8:	205a      	movs	r0, #90	; 0x5a
 80185da:	f003 fb39 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 80185de:	22b8      	movs	r2, #184	; 0xb8
 80185e0:	21ca      	movs	r1, #202	; 0xca
 80185e2:	2067      	movs	r0, #103	; 0x67
 80185e4:	f003 fb34 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 80185e8:	22b9      	movs	r2, #185	; 0xb9
 80185ea:	21ca      	movs	r1, #202	; 0xca
 80185ec:	2074      	movs	r0, #116	; 0x74
 80185ee:	f003 fb2f 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 80185f2:	22bd      	movs	r2, #189	; 0xbd
 80185f4:	21ca      	movs	r1, #202	; 0xca
 80185f6:	2081      	movs	r0, #129	; 0x81
 80185f8:	f003 fb2a 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 80185fc:	228b      	movs	r2, #139	; 0x8b
 80185fe:	21ca      	movs	r1, #202	; 0xca
 8018600:	208e      	movs	r0, #142	; 0x8e
 8018602:	f003 fb25 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 8018606:	22b9      	movs	r2, #185	; 0xb9
 8018608:	21ca      	movs	r1, #202	; 0xca
 801860a:	209b      	movs	r0, #155	; 0x9b
 801860c:	f003 fb20 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 8018610:	22bd      	movs	r2, #189	; 0xbd
 8018612:	21ca      	movs	r1, #202	; 0xca
 8018614:	20af      	movs	r0, #175	; 0xaf
 8018616:	f003 fb1b 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 801861a:	22be      	movs	r2, #190	; 0xbe
 801861c:	21ca      	movs	r1, #202	; 0xca
 801861e:	20bc      	movs	r0, #188	; 0xbc
 8018620:	f003 fb16 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 8018624:	22bc      	movs	r2, #188	; 0xbc
 8018626:	21ca      	movs	r1, #202	; 0xca
 8018628:	20c9      	movs	r0, #201	; 0xc9
 801862a:	f003 fb11 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 801862e:	22b5      	movs	r2, #181	; 0xb5
 8018630:	21ca      	movs	r1, #202	; 0xca
 8018632:	20d6      	movs	r0, #214	; 0xd6
 8018634:	f003 fb0c 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 8018638:	2280      	movs	r2, #128	; 0x80
 801863a:	21ca      	movs	r1, #202	; 0xca
 801863c:	20e1      	movs	r0, #225	; 0xe1
 801863e:	f003 fb07 	bl	801bc50 <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 8018642:	462a      	mov	r2, r5
 8018644:	490e      	ldr	r1, [pc, #56]	; (8018680 <GUI_TextRu_Info_Serial+0xe8>)
 8018646:	4668      	mov	r0, sp
 8018648:	f006 fcda 	bl	801f000 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801864c:	480d      	ldr	r0, [pc, #52]	; (8018684 <GUI_TextRu_Info_Serial+0xec>)
 801864e:	f003 faed 	bl	801bc2c <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018652:	2303      	movs	r3, #3
 8018654:	466a      	mov	r2, sp
 8018656:	21e6      	movs	r1, #230	; 0xe6
 8018658:	2028      	movs	r0, #40	; 0x28
 801865a:	f003 fc09 	bl	801be70 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801865e:	4622      	mov	r2, r4
 8018660:	4909      	ldr	r1, [pc, #36]	; (8018688 <GUI_TextRu_Info_Serial+0xf0>)
 8018662:	4668      	mov	r0, sp
 8018664:	f006 fccc 	bl	801f000 <siprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018668:	2303      	movs	r3, #3
 801866a:	466a      	mov	r2, sp
 801866c:	21e6      	movs	r1, #230	; 0xe6
 801866e:	2087      	movs	r0, #135	; 0x87
 8018670:	f003 fbfe 	bl	801be70 <TFT_DisplayString>
}
 8018674:	b003      	add	sp, #12
 8018676:	bd30      	pop	{r4, r5, pc}
 8018678:	200001d0 	.word	0x200001d0
 801867c:	200001d8 	.word	0x200001d8
 8018680:	0802e6c5 	.word	0x0802e6c5
 8018684:	200001f0 	.word	0x200001f0
 8018688:	0802e6c8 	.word	0x0802e6c8

0801868c <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801868c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801868e:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8018690:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018694:	9302      	str	r3, [sp, #8]
 8018696:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801869a:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801869e:	f003 facb 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80186a2:	2063      	movs	r0, #99	; 0x63
 80186a4:	f003 face 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80186a8:	481b      	ldr	r0, [pc, #108]	; (8018718 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 80186aa:	4c1c      	ldr	r4, [pc, #112]	; (801871c <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 80186ac:	f003 fabe 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 80186b0:	229f      	movs	r2, #159	; 0x9f
 80186b2:	f240 115d 	movw	r1, #349	; 0x15d
 80186b6:	2078      	movs	r0, #120	; 0x78
 80186b8:	f003 faca 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 80186bc:	229e      	movs	r2, #158	; 0x9e
 80186be:	f240 115d 	movw	r1, #349	; 0x15d
 80186c2:	208a      	movs	r0, #138	; 0x8a
 80186c4:	f003 fac4 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 80186c8:	4620      	mov	r0, r4
 80186ca:	f003 faaf 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 80186ce:	222e      	movs	r2, #46	; 0x2e
 80186d0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80186d4:	20ac      	movs	r0, #172	; 0xac
 80186d6:	f003 fb73 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 80186da:	2276      	movs	r2, #118	; 0x76
 80186dc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80186e0:	20a2      	movs	r0, #162	; 0xa2
 80186e2:	f003 fb6d 	bl	801bdc0 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 80186e6:	ed9d 0a01 	vldr	s0, [sp, #4]
 80186ea:	ee10 0a10 	vmov	r0, s0
 80186ee:	f7e7 ff3b 	bl	8000568 <__aeabi_f2d>
 80186f2:	4602      	mov	r2, r0
 80186f4:	460b      	mov	r3, r1
 80186f6:	a802      	add	r0, sp, #8
 80186f8:	4909      	ldr	r1, [pc, #36]	; (8018720 <GUI_TextRu_Info_Ver+0x94>)
 80186fa:	f006 fc81 	bl	801f000 <siprintf>
	TFT_SetFont(&Font16);
 80186fe:	4620      	mov	r0, r4
 8018700:	f003 fa94 	bl	801bc2c <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 8018704:	2303      	movs	r3, #3
 8018706:	aa02      	add	r2, sp, #8
 8018708:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801870c:	20b9      	movs	r0, #185	; 0xb9
 801870e:	f003 fbaf 	bl	801be70 <TFT_DisplayString>
}
 8018712:	b004      	add	sp, #16
 8018714:	bd10      	pop	{r4, pc}
 8018716:	bf00      	nop
 8018718:	200001d0 	.word	0x200001d0
 801871c:	200001a8 	.word	0x200001a8
 8018720:	0802e6ad 	.word	0x0802e6ad

08018724 <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 8018724:	b538      	push	{r3, r4, r5, lr}
 8018726:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018728:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801872c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801872e:	f003 fa83 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018732:	2063      	movs	r0, #99	; 0x63
 8018734:	f003 fa86 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018738:	481e      	ldr	r0, [pc, #120]	; (80187b4 <GUI_TextRu_CCT+0x90>)
 801873a:	f003 fa77 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 801873e:	4629      	mov	r1, r5
 8018740:	4620      	mov	r0, r4
 8018742:	229a      	movs	r2, #154	; 0x9a
 8018744:	f003 fa84 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 8018748:	f104 0011 	add.w	r0, r4, #17
 801874c:	4629      	mov	r1, r5
 801874e:	22a6      	movs	r2, #166	; 0xa6
 8018750:	b280      	uxth	r0, r0
 8018752:	f003 fa7d 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 8018756:	f104 0021 	add.w	r0, r4, #33	; 0x21
 801875a:	4629      	mov	r1, r5
 801875c:	22a2      	movs	r2, #162	; 0xa2
 801875e:	b280      	uxth	r0, r0
 8018760:	f003 fa76 	bl	801bc50 <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 8018764:	4814      	ldr	r0, [pc, #80]	; (80187b8 <GUI_TextRu_CCT+0x94>)
 8018766:	f003 fa61 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 801876a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801876e:	4629      	mov	r1, r5
 8018770:	2228      	movs	r2, #40	; 0x28
 8018772:	b280      	uxth	r0, r0
 8018774:	f003 fb24 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 8018778:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801877c:	4629      	mov	r1, r5
 801877e:	2229      	movs	r2, #41	; 0x29
 8018780:	b280      	uxth	r0, r0
 8018782:	f003 fb1d 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 8018786:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 801878a:	4629      	mov	r1, r5
 801878c:	2243      	movs	r2, #67	; 0x43
 801878e:	b280      	uxth	r0, r0
 8018790:	f003 fb16 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 8018794:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018798:	4629      	mov	r1, r5
 801879a:	2243      	movs	r2, #67	; 0x43
 801879c:	b280      	uxth	r0, r0
 801879e:	f003 fb0f 	bl	801bdc0 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 80187a2:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 80187a6:	4629      	mov	r1, r5
 80187a8:	2254      	movs	r2, #84	; 0x54
 80187aa:	b280      	uxth	r0, r0
}
 80187ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 80187b0:	f003 bb06 	b.w	801bdc0 <TFT_DrawChar>
 80187b4:	200001d0 	.word	0x200001d0
 80187b8:	200001b0 	.word	0x200001b0

080187bc <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 80187bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80187c0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80187c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80187c6:	4616      	mov	r6, r2
 80187c8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80187ca:	f003 fa35 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80187ce:	2063      	movs	r0, #99	; 0x63
 80187d0:	f003 fa38 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80187d4:	482f      	ldr	r0, [pc, #188]	; (8018894 <GUI_TextRu_umol+0xd8>)
 80187d6:	f003 fa29 	bl	801bc2c <TFT_SetFont>
	
	if(deg){
 80187da:	2e00      	cmp	r6, #0
 80187dc:	d057      	beq.n	801888e <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 80187de:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 80187e0:	4629      	mov	r1, r5
 80187e2:	4620      	mov	r0, r4
 80187e4:	f003 fa34 	bl	801bc50 <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 80187e8:	f104 0008 	add.w	r0, r4, #8
 80187ec:	4629      	mov	r1, r5
 80187ee:	22bc      	movs	r2, #188	; 0xbc
 80187f0:	b280      	uxth	r0, r0
 80187f2:	f003 fa2d 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 80187f6:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 80187fa:	f104 0010 	add.w	r0, r4, #16
 80187fe:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 8018800:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 8018802:	22be      	movs	r2, #190	; 0xbe
 8018804:	b280      	uxth	r0, r0
 8018806:	f003 fa23 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 801880a:	4629      	mov	r1, r5
 801880c:	4638      	mov	r0, r7
 801880e:	22bb      	movs	r2, #187	; 0xbb
 8018810:	f003 fa1e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 8018814:	f104 001c 	add.w	r0, r4, #28
 8018818:	4629      	mov	r1, r5
 801881a:	228c      	movs	r2, #140	; 0x8c
 801881c:	b280      	uxth	r0, r0
 801881e:	f003 fa17 	bl	801bc50 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018822:	f105 030a 	add.w	r3, r5, #10
 8018826:	b29b      	uxth	r3, r3
 8018828:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801882c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8018830:	4619      	mov	r1, r3
 8018832:	4620      	mov	r0, r4
 8018834:	f8cd 8000 	str.w	r8, [sp]
 8018838:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801883a:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801883e:	f002 ff6f 	bl	801b720 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 8018842:	b2b6      	uxth	r6, r6
 8018844:	f104 000d 	add.w	r0, r4, #13
 8018848:	4631      	mov	r1, r6
 801884a:	2291      	movs	r2, #145	; 0x91
 801884c:	b280      	uxth	r0, r0
 801884e:	f003 f9ff 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 8018852:	1d60      	adds	r0, r4, #5
 8018854:	4631      	mov	r1, r6
 8018856:	22bc      	movs	r2, #188	; 0xbc
 8018858:	b280      	uxth	r0, r0
 801885a:	f003 f9f9 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801885e:	f105 030f 	add.w	r3, r5, #15
 8018862:	f104 0214 	add.w	r2, r4, #20
 8018866:	f105 010e 	add.w	r1, r5, #14
 801886a:	f104 0013 	add.w	r0, r4, #19
 801886e:	f8cd 8000 	str.w	r8, [sp]
 8018872:	b29b      	uxth	r3, r3
 8018874:	b292      	uxth	r2, r2
 8018876:	b289      	uxth	r1, r1
 8018878:	b280      	uxth	r0, r0
 801887a:	f002 ffc6 	bl	801b80a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801887e:	2281      	movs	r2, #129	; 0x81
 8018880:	4631      	mov	r1, r6
 8018882:	4638      	mov	r0, r7
}
 8018884:	b002      	add	sp, #8
 8018886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801888a:	f003 b9e1 	b.w	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 801888e:	2290      	movs	r2, #144	; 0x90
 8018890:	e7a6      	b.n	80187e0 <GUI_TextRu_umol+0x24>
 8018892:	bf00      	nop
 8018894:	200001a0 	.word	0x200001a0

08018898 <GUI_TextRu_W_m2>:
	TFT_DrawCharRus(X+39, Y+12, 'р');
	
}

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 8018898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801889a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801889c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80188a0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80188a2:	f003 f9c9 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80188a6:	2063      	movs	r0, #99	; 0x63
 80188a8:	f003 f9cc 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 80188ac:	4819      	ldr	r0, [pc, #100]	; (8018914 <GUI_TextRu_W_m2+0x7c>)
 80188ae:	f003 f9bd 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+3, Y, 'В'-17);
 80188b2:	1ce8      	adds	r0, r5, #3
 80188b4:	4621      	mov	r1, r4
 80188b6:	2281      	movs	r2, #129	; 0x81
 80188b8:	b280      	uxth	r0, r0
 80188ba:	f003 f9c9 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 80188be:	4816      	ldr	r0, [pc, #88]	; (8018918 <GUI_TextRu_W_m2+0x80>)
 80188c0:	f003 f9b4 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+13, Y+2, 'т');
 80188c4:	1ca1      	adds	r1, r4, #2
 80188c6:	f105 000d 	add.w	r0, r5, #13
 80188ca:	2282      	movs	r2, #130	; 0x82
 80188cc:	b289      	uxth	r1, r1
 80188ce:	b280      	uxth	r0, r0
 80188d0:	f003 f9be 	bl	801bc50 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80188d4:	f104 030a 	add.w	r3, r4, #10
 80188d8:	b29b      	uxth	r3, r3
 80188da:	f105 0214 	add.w	r2, r5, #20
 80188de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80188e2:	9100      	str	r1, [sp, #0]
 80188e4:	4628      	mov	r0, r5
 80188e6:	4619      	mov	r1, r3
 80188e8:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80188ea:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80188ec:	f002 ff18 	bl	801b720 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80188f0:	b2a4      	uxth	r4, r4
 80188f2:	f105 000c 	add.w	r0, r5, #12
 80188f6:	4621      	mov	r1, r4
 80188f8:	2291      	movs	r2, #145	; 0x91
 80188fa:	b280      	uxth	r0, r0
 80188fc:	f003 f9a8 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018900:	1d28      	adds	r0, r5, #4
 8018902:	22bc      	movs	r2, #188	; 0xbc
 8018904:	4621      	mov	r1, r4
 8018906:	b280      	uxth	r0, r0
}
 8018908:	b003      	add	sp, #12
 801890a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801890e:	f003 b99f 	b.w	801bc50 <TFT_DrawCharRus>
 8018912:	bf00      	nop
 8018914:	20000198 	.word	0x20000198
 8018918:	200001a0 	.word	0x200001a0

0801891c <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 801891c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018920:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018922:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018926:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018928:	f003 f986 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801892c:	2063      	movs	r0, #99	; 0x63
 801892e:	f003 f989 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 8018932:	4829      	ldr	r0, [pc, #164]	; (80189d8 <GUI_TextRu_W_m2_sr+0xbc>)
 8018934:	f003 f97a 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 8018938:	f104 0008 	add.w	r0, r4, #8
 801893c:	4629      	mov	r1, r5
 801893e:	2281      	movs	r2, #129	; 0x81
 8018940:	b280      	uxth	r0, r0
 8018942:	f003 f985 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 8018946:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 801894a:	4824      	ldr	r0, [pc, #144]	; (80189dc <GUI_TextRu_W_m2_sr+0xc0>)
 801894c:	f003 f96e 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 8018950:	b2bf      	uxth	r7, r7
 8018952:	1ca9      	adds	r1, r5, #2
 8018954:	4638      	mov	r0, r7
 8018956:	2282      	movs	r2, #130	; 0x82
 8018958:	b289      	uxth	r1, r1
 801895a:	f003 f979 	bl	801bc50 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801895e:	f105 030a 	add.w	r3, r5, #10
 8018962:	b29b      	uxth	r3, r3
 8018964:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018968:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801896c:	4619      	mov	r1, r3
 801896e:	4620      	mov	r0, r4
 8018970:	f8cd 8000 	str.w	r8, [sp]
 8018974:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 8018976:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801897a:	f002 fed1 	bl	801b720 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801897e:	b2b6      	uxth	r6, r6
 8018980:	f104 000a 	add.w	r0, r4, #10
 8018984:	4631      	mov	r1, r6
 8018986:	2291      	movs	r2, #145	; 0x91
 8018988:	b280      	uxth	r0, r0
 801898a:	f003 f961 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 801898e:	1ca0      	adds	r0, r4, #2
 8018990:	4631      	mov	r1, r6
 8018992:	22bc      	movs	r2, #188	; 0xbc
 8018994:	b280      	uxth	r0, r0
 8018996:	f003 f95b 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 801899a:	f105 030f 	add.w	r3, r5, #15
 801899e:	f105 0110 	add.w	r1, r5, #16
 80189a2:	f104 0011 	add.w	r0, r4, #17
 80189a6:	b29b      	uxth	r3, r3
 80189a8:	463a      	mov	r2, r7
 80189aa:	f8cd 8000 	str.w	r8, [sp]
 80189ae:	b289      	uxth	r1, r1
 80189b0:	b280      	uxth	r0, r0
 80189b2:	f002 ff2a 	bl	801b80a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 80189b6:	f104 0015 	add.w	r0, r4, #21
 80189ba:	4631      	mov	r1, r6
 80189bc:	2281      	movs	r2, #129	; 0x81
 80189be:	b280      	uxth	r0, r0
 80189c0:	f003 f946 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 80189c4:	f104 001c 	add.w	r0, r4, #28
 80189c8:	2280      	movs	r2, #128	; 0x80
 80189ca:	4631      	mov	r1, r6
 80189cc:	b280      	uxth	r0, r0
}
 80189ce:	b002      	add	sp, #8
 80189d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 80189d4:	f003 b93c 	b.w	801bc50 <TFT_DrawCharRus>
 80189d8:	20000198 	.word	0x20000198
 80189dc:	200001a0 	.word	0x200001a0

080189e0 <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 80189e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80189e4:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80189e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80189ea:	460e      	mov	r6, r1
 80189ec:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 80189ee:	f003 f923 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80189f2:	2063      	movs	r0, #99	; 0x63
 80189f4:	f003 f926 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80189f8:	482f      	ldr	r0, [pc, #188]	; (8018ab8 <GUI_TextRu_Cd_m2+0xd8>)
 80189fa:	f003 f917 	bl	801bc2c <TFT_SetFont>
 80189fe:	f104 0008 	add.w	r0, r4, #8
 8018a02:	f104 0810 	add.w	r8, r4, #16
 8018a06:	f106 070a 	add.w	r7, r6, #10
 8018a0a:	f104 0906 	add.w	r9, r4, #6
 8018a0e:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 8018a12:	22ba      	movs	r2, #186	; 0xba
 8018a14:	4631      	mov	r1, r6
 8018a16:	b280      	uxth	r0, r0
	if(deg){
 8018a18:	f1ba 0f00 	cmp.w	sl, #0
 8018a1c:	d02c      	beq.n	8018a78 <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 8018a1e:	f003 f917 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 8018a22:	22ba      	movs	r2, #186	; 0xba
 8018a24:	4631      	mov	r1, r6
 8018a26:	fa1f f088 	uxth.w	r0, r8
 8018a2a:	f003 f911 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 8018a2e:	f104 0018 	add.w	r0, r4, #24
 8018a32:	22b4      	movs	r2, #180	; 0xb4
 8018a34:	4631      	mov	r1, r6
 8018a36:	b280      	uxth	r0, r0
 8018a38:	f003 f90a 	bl	801bc50 <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 8018a3c:	b2bb      	uxth	r3, r7
 8018a3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018a42:	f104 021f 	add.w	r2, r4, #31
 8018a46:	9100      	str	r1, [sp, #0]
 8018a48:	b292      	uxth	r2, r2
 8018a4a:	4619      	mov	r1, r3
 8018a4c:	fa1f f089 	uxth.w	r0, r9
 8018a50:	f002 fe66 	bl	801b720 <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 8018a54:	b2ad      	uxth	r5, r5
 8018a56:	f104 0014 	add.w	r0, r4, #20
 8018a5a:	b280      	uxth	r0, r0
 8018a5c:	2291      	movs	r2, #145	; 0x91
 8018a5e:	4629      	mov	r1, r5
 8018a60:	f003 f8f6 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 8018a64:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8018a68:	22bc      	movs	r2, #188	; 0xbc
 8018a6a:	4629      	mov	r1, r5
 8018a6c:	b280      	uxth	r0, r0
		
}
 8018a6e:	b002      	add	sp, #8
 8018a70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8018a74:	f003 b8ec 	b.w	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 8018a78:	f003 f8ea 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 8018a7c:	22b4      	movs	r2, #180	; 0xb4
 8018a7e:	4631      	mov	r1, r6
 8018a80:	fa1f f088 	uxth.w	r0, r8
 8018a84:	f003 f8e4 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 8018a88:	b2bb      	uxth	r3, r7
 8018a8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018a8e:	f104 0217 	add.w	r2, r4, #23
 8018a92:	9100      	str	r1, [sp, #0]
 8018a94:	b292      	uxth	r2, r2
 8018a96:	4619      	mov	r1, r3
 8018a98:	fa1f f089 	uxth.w	r0, r9
 8018a9c:	f002 fe40 	bl	801b720 <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 8018aa0:	b2ad      	uxth	r5, r5
 8018aa2:	f104 0011 	add.w	r0, r4, #17
 8018aa6:	b280      	uxth	r0, r0
 8018aa8:	2291      	movs	r2, #145	; 0x91
 8018aaa:	4629      	mov	r1, r5
 8018aac:	f003 f8d0 	bl	801bc50 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8018ab0:	f104 0009 	add.w	r0, r4, #9
 8018ab4:	e7d8      	b.n	8018a68 <GUI_TextRu_Cd_m2+0x88>
 8018ab6:	bf00      	nop
 8018ab8:	200001a0 	.word	0x200001a0

08018abc <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 8018abc:	b538      	push	{r3, r4, r5, lr}
 8018abe:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018ac0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ac4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018ac6:	f003 f8b7 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018aca:	2063      	movs	r0, #99	; 0x63
 8018acc:	f003 f8ba 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018ad0:	482d      	ldr	r0, [pc, #180]	; (8018b88 <GUI_TextRu_Irradiance+0xcc>)
 8018ad2:	f003 f8ab 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 8018ad6:	4621      	mov	r1, r4
 8018ad8:	229e      	movs	r2, #158	; 0x9e
 8018ada:	4628      	mov	r0, r5
 8018adc:	f003 f8b8 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8018ae0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018ae2:	482a      	ldr	r0, [pc, #168]	; (8018b8c <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8018ae4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018ae6:	f003 f8a1 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8018aea:	f105 0010 	add.w	r0, r5, #16
 8018aee:	4621      	mov	r1, r4
 8018af0:	22b1      	movs	r2, #177	; 0xb1
 8018af2:	b280      	uxth	r0, r0
 8018af4:	f003 f8ac 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 8018af8:	f105 001b 	add.w	r0, r5, #27
 8018afc:	4621      	mov	r1, r4
 8018afe:	22bb      	movs	r2, #187	; 0xbb
 8018b00:	b280      	uxth	r0, r0
 8018b02:	f003 f8a5 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 8018b06:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8018b0a:	4621      	mov	r1, r4
 8018b0c:	2283      	movs	r2, #131	; 0x83
 8018b0e:	b280      	uxth	r0, r0
 8018b10:	f003 f89e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 8018b14:	f105 0033 	add.w	r0, r5, #51	; 0x33
 8018b18:	4621      	mov	r1, r4
 8018b1a:	2287      	movs	r2, #135	; 0x87
 8018b1c:	b280      	uxth	r0, r0
 8018b1e:	f003 f897 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 8018b22:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8018b26:	4621      	mov	r1, r4
 8018b28:	22b5      	movs	r2, #181	; 0xb5
 8018b2a:	b280      	uxth	r0, r0
 8018b2c:	f003 f890 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 8018b30:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8018b34:	4621      	mov	r1, r4
 8018b36:	22bd      	movs	r2, #189	; 0xbd
 8018b38:	b280      	uxth	r0, r0
 8018b3a:	f003 f889 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 8018b3e:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8018b42:	4621      	mov	r1, r4
 8018b44:	22bd      	movs	r2, #189	; 0xbd
 8018b46:	b280      	uxth	r0, r0
 8018b48:	f003 f882 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 8018b4c:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8018b50:	4621      	mov	r1, r4
 8018b52:	22be      	movs	r2, #190	; 0xbe
 8018b54:	b280      	uxth	r0, r0
 8018b56:	f003 f87b 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 8018b5a:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 8018b5e:	4621      	mov	r1, r4
 8018b60:	2281      	movs	r2, #129	; 0x81
 8018b62:	b280      	uxth	r0, r0
 8018b64:	f003 f874 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 8018b68:	f105 0077 	add.w	r0, r5, #119	; 0x77
 8018b6c:	4621      	mov	r1, r4
 8018b6e:	2282      	movs	r2, #130	; 0x82
 8018b70:	b280      	uxth	r0, r0
 8018b72:	f003 f86d 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018b76:	f105 0083 	add.w	r0, r5, #131	; 0x83
 8018b7a:	4621      	mov	r1, r4
 8018b7c:	228c      	movs	r2, #140	; 0x8c
 8018b7e:	b280      	uxth	r0, r0
}
 8018b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018b84:	f003 b864 	b.w	801bc50 <TFT_DrawCharRus>
 8018b88:	200001d0 	.word	0x200001d0
 8018b8c:	200001d8 	.word	0x200001d8

08018b90 <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 8018b90:	b538      	push	{r3, r4, r5, lr}
 8018b92:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018b94:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b98:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018b9a:	f003 f84d 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b9e:	2063      	movs	r0, #99	; 0x63
 8018ba0:	f003 f850 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018ba4:	481c      	ldr	r0, [pc, #112]	; (8018c18 <GUI_TextRu_Luminance+0x88>)
 8018ba6:	f003 f841 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 8018baa:	4621      	mov	r1, r4
 8018bac:	22af      	movs	r2, #175	; 0xaf
 8018bae:	4628      	mov	r0, r5
 8018bb0:	f003 f84e 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018bb4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018bb6:	4819      	ldr	r0, [pc, #100]	; (8018c1c <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018bb8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018bba:	f003 f837 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018bbe:	f105 0010 	add.w	r0, r5, #16
 8018bc2:	4621      	mov	r1, r4
 8018bc4:	2280      	movs	r2, #128	; 0x80
 8018bc6:	b280      	uxth	r0, r0
 8018bc8:	f003 f842 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 8018bcc:	f105 001c 	add.w	r0, r5, #28
 8018bd0:	4621      	mov	r1, r4
 8018bd2:	22ba      	movs	r2, #186	; 0xba
 8018bd4:	b280      	uxth	r0, r0
 8018bd6:	f003 f83b 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 8018bda:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018bde:	4621      	mov	r1, r4
 8018be0:	22be      	movs	r2, #190	; 0xbe
 8018be2:	b280      	uxth	r0, r0
 8018be4:	f003 f834 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 8018be8:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018bec:	4621      	mov	r1, r4
 8018bee:	2281      	movs	r2, #129	; 0x81
 8018bf0:	b280      	uxth	r0, r0
 8018bf2:	f003 f82d 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 8018bf6:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8018bfa:	4621      	mov	r1, r4
 8018bfc:	2282      	movs	r2, #130	; 0x82
 8018bfe:	b280      	uxth	r0, r0
 8018c00:	f003 f826 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8018c04:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8018c08:	4621      	mov	r1, r4
 8018c0a:	228c      	movs	r2, #140	; 0x8c
 8018c0c:	b280      	uxth	r0, r0
}
 8018c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8018c12:	f003 b81d 	b.w	801bc50 <TFT_DrawCharRus>
 8018c16:	bf00      	nop
 8018c18:	200001d0 	.word	0x200001d0
 8018c1c:	200001d8 	.word	0x200001d8

08018c20 <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 8018c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c22:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018c24:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c28:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8018c2a:	f003 f805 	bl	801bc38 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c2e:	2063      	movs	r0, #99	; 0x63
 8018c30:	f003 f808 	bl	801bc44 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 8018c34:	4f31      	ldr	r7, [pc, #196]	; (8018cfc <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 8018c36:	4832      	ldr	r0, [pc, #200]	; (8018d00 <GUI_TextRu_Radiance+0xe0>)
 8018c38:	f002 fff8 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 8018c3c:	4631      	mov	r1, r6
 8018c3e:	22ad      	movs	r2, #173	; 0xad
 8018c40:	4620      	mov	r0, r4
 8018c42:	f003 f805 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018c46:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018c48:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018c4a:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 8018c4c:	f002 ffee 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018c50:	f104 0010 	add.w	r0, r4, #16
 8018c54:	4629      	mov	r1, r5
 8018c56:	22bd      	movs	r2, #189	; 0xbd
 8018c58:	b280      	uxth	r0, r0
 8018c5a:	f002 fff9 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 8018c5e:	f104 001d 	add.w	r0, r4, #29
 8018c62:	4629      	mov	r1, r5
 8018c64:	22b5      	movs	r2, #181	; 0xb5
 8018c66:	b280      	uxth	r0, r0
 8018c68:	f002 fff2 	bl	801bc50 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018c6c:	4825      	ldr	r0, [pc, #148]	; (8018d04 <GUI_TextRu_Radiance+0xe4>)
 8018c6e:	f002 ffdd 	bl	801bc2c <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 8018c72:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8018c76:	4631      	mov	r1, r6
 8018c78:	222e      	movs	r2, #46	; 0x2e
 8018c7a:	b280      	uxth	r0, r0
 8018c7c:	f003 f8a0 	bl	801bdc0 <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 8018c80:	4638      	mov	r0, r7
 8018c82:	f002 ffd3 	bl	801bc2c <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 8018c86:	f104 0029 	add.w	r0, r4, #41	; 0x29
 8018c8a:	4629      	mov	r1, r5
 8018c8c:	2280      	movs	r2, #128	; 0x80
 8018c8e:	b280      	uxth	r0, r0
 8018c90:	f002 ffde 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 8018c94:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8018c98:	4629      	mov	r1, r5
 8018c9a:	228f      	movs	r2, #143	; 0x8f
 8018c9c:	b280      	uxth	r0, r0
 8018c9e:	f002 ffd7 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 8018ca2:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8018ca6:	4629      	mov	r1, r5
 8018ca8:	2280      	movs	r2, #128	; 0x80
 8018caa:	b280      	uxth	r0, r0
 8018cac:	f002 ffd0 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 8018cb0:	f104 0055 	add.w	r0, r4, #85	; 0x55
 8018cb4:	4629      	mov	r1, r5
 8018cb6:	22ba      	movs	r2, #186	; 0xba
 8018cb8:	b280      	uxth	r0, r0
 8018cba:	f002 ffc9 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8018cbe:	f104 0061 	add.w	r0, r4, #97	; 0x61
 8018cc2:	4629      	mov	r1, r5
 8018cc4:	22be      	movs	r2, #190	; 0xbe
 8018cc6:	b280      	uxth	r0, r0
 8018cc8:	f002 ffc2 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8018ccc:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018cd0:	4629      	mov	r1, r5
 8018cd2:	2281      	movs	r2, #129	; 0x81
 8018cd4:	b280      	uxth	r0, r0
 8018cd6:	f002 ffbb 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 8018cda:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8018cde:	4629      	mov	r1, r5
 8018ce0:	2282      	movs	r2, #130	; 0x82
 8018ce2:	b280      	uxth	r0, r0
 8018ce4:	f002 ffb4 	bl	801bc50 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018ce8:	f104 0083 	add.w	r0, r4, #131	; 0x83
 8018cec:	4629      	mov	r1, r5
 8018cee:	228c      	movs	r2, #140	; 0x8c
 8018cf0:	b280      	uxth	r0, r0

 8018cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018cf6:	f002 bfab 	b.w	801bc50 <TFT_DrawCharRus>
 8018cfa:	bf00      	nop
 8018cfc:	200001d8 	.word	0x200001d8
 8018d00:	200001d0 	.word	0x200001d0
 8018d04:	200001b0 	.word	0x200001b0

08018d08 <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 8018d08:	2201      	movs	r2, #1
 8018d0a:	2102      	movs	r1, #2
 8018d0c:	4801      	ldr	r0, [pc, #4]	; (8018d14 <Set.part.0+0xc>)
 8018d0e:	f7e9 bb7f 	b.w	8002410 <HAL_GPIO_WritePin>
 8018d12:	bf00      	nop
 8018d14:	48000400 	.word	0x48000400

08018d18 <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 8018d18:	2200      	movs	r2, #0
 8018d1a:	2102      	movs	r1, #2
 8018d1c:	4801      	ldr	r0, [pc, #4]	; (8018d24 <Reset.part.1+0xc>)
 8018d1e:	f7e9 bb77 	b.w	8002410 <HAL_GPIO_WritePin>
 8018d22:	bf00      	nop
 8018d24:	48000400 	.word	0x48000400

08018d28 <GPIO_QSPI_Init>:
{
 8018d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8018d2c:	4b39      	ldr	r3, [pc, #228]	; (8018e14 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8018d2e:	4c3a      	ldr	r4, [pc, #232]	; (8018e18 <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8018d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018d32:	4f3a      	ldr	r7, [pc, #232]	; (8018e1c <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8018d34:	f042 0220 	orr.w	r2, r2, #32
 8018d38:	64da      	str	r2, [r3, #76]	; 0x4c
 8018d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018d3c:	f002 0220 	and.w	r2, r2, #32
 8018d40:	9201      	str	r2, [sp, #4]
 8018d42:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018d46:	f042 0201 	orr.w	r2, r2, #1
 8018d4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8018d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018d4e:	f002 0201 	and.w	r2, r2, #1
 8018d52:	9202      	str	r2, [sp, #8]
 8018d54:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018d58:	f042 0202 	orr.w	r2, r2, #2
 8018d5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8018d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d60:	f003 0302 	and.w	r3, r3, #2
 8018d64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d66:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018d68:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018d6a:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018d6e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d70:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018d72:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018d74:	4621      	mov	r1, r4
 8018d76:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018d78:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8018d7c:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018d80:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018d84:	f7e9 f9ce 	bl	8002124 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018d88:	4621      	mov	r1, r4
 8018d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8018d8e:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018d92:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018d94:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018d96:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018d9a:	f7e9 f9c3 	bl	8002124 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8018d9e:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018da0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8018e20 <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8018da4:	4632      	mov	r2, r6
 8018da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018daa:	f7e9 fb31 	bl	8002410 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018dae:	4621      	mov	r1, r4
 8018db0:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8018db2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8018db6:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018dba:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018dbc:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018dbe:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018dc2:	f7e9 f9af 	bl	8002124 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018dc6:	4621      	mov	r1, r4
 8018dc8:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8018dca:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018dce:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018dd0:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018dd2:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018dd6:	f7e9 f9a5 	bl	8002124 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8018dda:	462a      	mov	r2, r5
 8018ddc:	4631      	mov	r1, r6
 8018dde:	4648      	mov	r0, r9
 8018de0:	f7e9 fb16 	bl	8002410 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8018de4:	462a      	mov	r2, r5
 8018de6:	4648      	mov	r0, r9
 8018de8:	2102      	movs	r1, #2
 8018dea:	f7e9 fb11 	bl	8002410 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8018dee:	462a      	mov	r2, r5
 8018df0:	4638      	mov	r0, r7
 8018df2:	2140      	movs	r1, #64	; 0x40
 8018df4:	f7e9 fb0c 	bl	8002410 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8018df8:	462a      	mov	r2, r5
 8018dfa:	4638      	mov	r0, r7
 8018dfc:	2180      	movs	r1, #128	; 0x80
 8018dfe:	f7e9 fb07 	bl	8002410 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8018e02:	462a      	mov	r2, r5
 8018e04:	4651      	mov	r1, sl
 8018e06:	4638      	mov	r0, r7
 8018e08:	f7e9 fb02 	bl	8002410 <HAL_GPIO_WritePin>
}
 8018e0c:	b004      	add	sp, #16
 8018e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e12:	bf00      	nop
 8018e14:	40021000 	.word	0x40021000
 8018e18:	20004cd0 	.word	0x20004cd0
 8018e1c:	48001400 	.word	0x48001400
 8018e20:	48000400 	.word	0x48000400

08018e24 <Set>:
	switch(pin)
 8018e24:	3801      	subs	r0, #1
 8018e26:	2805      	cmp	r0, #5
 8018e28:	d81b      	bhi.n	8018e62 <Set+0x3e>
 8018e2a:	e8df f000 	tbb	[pc, r0]
 8018e2e:	0503      	.short	0x0503
 8018e30:	16110e0a 	.word	0x16110e0a
 8018e34:	f7ff bf68 	b.w	8018d08 <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 8018e38:	2201      	movs	r2, #1
 8018e3a:	480a      	ldr	r0, [pc, #40]	; (8018e64 <Set+0x40>)
 8018e3c:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8018e3e:	f7e9 bae7 	b.w	8002410 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 8018e42:	2201      	movs	r2, #1
 8018e44:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8018e46:	4808      	ldr	r0, [pc, #32]	; (8018e68 <Set+0x44>)
 8018e48:	e7f9      	b.n	8018e3e <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 8018e4a:	2201      	movs	r2, #1
 8018e4c:	2140      	movs	r1, #64	; 0x40
 8018e4e:	e7fa      	b.n	8018e46 <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8018e50:	2201      	movs	r2, #1
 8018e52:	2104      	movs	r1, #4
 8018e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018e58:	e7f1      	b.n	8018e3e <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8018e5a:	2201      	movs	r2, #1
 8018e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018e60:	e7f1      	b.n	8018e46 <Set+0x22>
 8018e62:	4770      	bx	lr
 8018e64:	48000400 	.word	0x48000400
 8018e68:	48001400 	.word	0x48001400

08018e6c <Reset>:
	switch(pin)
 8018e6c:	3801      	subs	r0, #1
 8018e6e:	2805      	cmp	r0, #5
 8018e70:	d81b      	bhi.n	8018eaa <Reset+0x3e>
 8018e72:	e8df f000 	tbb	[pc, r0]
 8018e76:	0503      	.short	0x0503
 8018e78:	16110e0a 	.word	0x16110e0a
 8018e7c:	f7ff bf4c 	b.w	8018d18 <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 8018e80:	480a      	ldr	r0, [pc, #40]	; (8018eac <Reset+0x40>)
 8018e82:	2200      	movs	r2, #0
 8018e84:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8018e86:	f7e9 bac3 	b.w	8002410 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8018e8e:	4808      	ldr	r0, [pc, #32]	; (8018eb0 <Reset+0x44>)
 8018e90:	e7f9      	b.n	8018e86 <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 8018e92:	2200      	movs	r2, #0
 8018e94:	2140      	movs	r1, #64	; 0x40
 8018e96:	e7fa      	b.n	8018e8e <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8018e98:	2200      	movs	r2, #0
 8018e9a:	2104      	movs	r1, #4
 8018e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018ea0:	e7f1      	b.n	8018e86 <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018ea8:	e7f1      	b.n	8018e8e <Reset+0x22>
 8018eaa:	4770      	bx	lr
 8018eac:	48000400 	.word	0x48000400
 8018eb0:	48001400 	.word	0x48001400

08018eb4 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 8018eb4:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8018eb6:	4c09      	ldr	r4, [pc, #36]	; (8018edc <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018eb8:	4809      	ldr	r0, [pc, #36]	; (8018ee0 <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018eba:	2303      	movs	r3, #3
 8018ebc:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018ebe:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018ec0:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018ec4:	f7e9 f92e 	bl	8002124 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8018ec8:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018eca:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018ece:	4621      	mov	r1, r4
 8018ed0:	4804      	ldr	r0, [pc, #16]	; (8018ee4 <QSPI_Recieve_Init+0x30>)
}
 8018ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018ed6:	f7e9 b925 	b.w	8002124 <HAL_GPIO_Init>
 8018eda:	bf00      	nop
 8018edc:	20004cd0 	.word	0x20004cd0
 8018ee0:	48000400 	.word	0x48000400
 8018ee4:	48001400 	.word	0x48001400

08018ee8 <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 8018ee8:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8018eea:	4c09      	ldr	r4, [pc, #36]	; (8018f10 <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018eec:	4809      	ldr	r0, [pc, #36]	; (8018f14 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018eee:	2303      	movs	r3, #3
 8018ef0:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018ef2:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018ef4:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018ef8:	f7e9 f914 	bl	8002124 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8018efc:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018efe:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018f02:	4621      	mov	r1, r4
 8018f04:	4804      	ldr	r0, [pc, #16]	; (8018f18 <QSPI_Transmit_Init+0x30>)
}
 8018f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018f0a:	f7e9 b90b 	b.w	8002124 <HAL_GPIO_Init>
 8018f0e:	bf00      	nop
 8018f10:	20004cd0 	.word	0x20004cd0
 8018f14:	48000400 	.word	0x48000400
 8018f18:	48001400 	.word	0x48001400

08018f1c <Single_Mode>:
void Single_Mode(void)
{
 8018f1c:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 8018f1e:	4c0d      	ldr	r4, [pc, #52]	; (8018f54 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8018f20:	4e0d      	ldr	r6, [pc, #52]	; (8018f58 <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018f22:	2501      	movs	r5, #1
 8018f24:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8018f26:	4621      	mov	r1, r4
 8018f28:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018f2a:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8018f2e:	f7e9 f8f9 	bl	8002124 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018f32:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8018f34:	4621      	mov	r1, r4
 8018f36:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018f38:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 8018f3a:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8018f3c:	f7e9 f8f2 	bl	8002124 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 8018f40:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018f42:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8018f46:	4621      	mov	r1, r4
 8018f48:	4804      	ldr	r0, [pc, #16]	; (8018f5c <Single_Mode+0x40>)
}
 8018f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8018f4e:	f7e9 b8e9 	b.w	8002124 <HAL_GPIO_Init>
 8018f52:	bf00      	nop
 8018f54:	20004cd0 	.word	0x20004cd0
 8018f58:	48000400 	.word	0x48000400
 8018f5c:	48001400 	.word	0x48001400

08018f60 <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 8018f60:	b538      	push	{r3, r4, r5, lr}
 8018f62:	4605      	mov	r5, r0
 8018f64:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 8018f66:	062b      	lsls	r3, r5, #24
 8018f68:	d501      	bpl.n	8018f6e <SPI_Byte_T+0xe>
 8018f6a:	f7ff fecd 	bl	8018d08 <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 8018f6e:	2006      	movs	r0, #6
 8018f70:	f7ff ff58 	bl	8018e24 <Set>
 8018f74:	3c01      	subs	r4, #1
 8018f76:	f7ff fecf 	bl	8018d18 <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 8018f7a:	2006      	movs	r0, #6
		byte=(byte<<1);
 8018f7c:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 8018f7e:	f7ff ff75 	bl	8018e6c <Reset>
	for(uint8_t i=0; i<8; i++)
 8018f82:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 8018f86:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 8018f88:	d1ed      	bne.n	8018f66 <SPI_Byte_T+0x6>
	}	
}
 8018f8a:	bd38      	pop	{r3, r4, r5, pc}

08018f8c <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 8018f8c:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 8018f8e:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8018f90:	4e0d      	ldr	r6, [pc, #52]	; (8018fc8 <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 8018f92:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8018f94:	2101      	movs	r1, #1
 8018f96:	4630      	mov	r0, r6
 8018f98:	f7e9 fa34 	bl	8002404 <HAL_GPIO_ReadPin>
 8018f9c:	b108      	cbz	r0, 8018fa2 <SPI_Byte_R+0x16>
 8018f9e:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 8018fa2:	2006      	movs	r0, #6
 8018fa4:	f7ff ff3e 	bl	8018e24 <Set>
		if (i<7) byte=(byte<<1);
 8018fa8:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 8018faa:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 8018fae:	bf18      	it	ne
 8018fb0:	0064      	lslne	r4, r4, #1
		Reset(clk);
 8018fb2:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 8018fb6:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 8018fb8:	bf18      	it	ne
 8018fba:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 8018fbc:	f7ff ff56 	bl	8018e6c <Reset>
	for(uint8_t i=0; i<8; i++)
 8018fc0:	2d08      	cmp	r5, #8
 8018fc2:	d1e7      	bne.n	8018f94 <SPI_Byte_R+0x8>
	}
	return byte;
}
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	bd70      	pop	{r4, r5, r6, pc}
 8018fc8:	48000400 	.word	0x48000400

08018fcc <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 8018fcc:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 8018fce:	2005      	movs	r0, #5
 8018fd0:	f7ff ff4c 	bl	8018e6c <Reset>
	SPI_Byte_T(cmd);
 8018fd4:	2005      	movs	r0, #5
 8018fd6:	f7ff ffc3 	bl	8018f60 <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 8018fda:	f7ff ffd7 	bl	8018f8c <SPI_Byte_R>
 8018fde:	4604      	mov	r4, r0
			Set(cs);
 8018fe0:	2005      	movs	r0, #5
 8018fe2:	f7ff ff1f 	bl	8018e24 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 8018fe6:	4620      	mov	r0, r4
 8018fe8:	bd10      	pop	{r4, pc}

08018fea <SPI_Check_Busy>:
{
 8018fea:	b508      	push	{r3, lr}
 8018fec:	f7ff ffee 	bl	8018fcc <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 8018ff0:	07c3      	lsls	r3, r0, #31
 8018ff2:	d400      	bmi.n	8018ff6 <SPI_Check_Busy+0xc>
}
 8018ff4:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 8018ff6:	2000      	movs	r0, #0
 8018ff8:	f7e8 f810 	bl	800101c <HAL_Delay>
 8018ffc:	e7f6      	b.n	8018fec <SPI_Check_Busy+0x2>
	...

08019000 <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 8019000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 8019002:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019004:	4e18      	ldr	r6, [pc, #96]	; (8019068 <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019006:	4f19      	ldr	r7, [pc, #100]	; (801906c <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 8019008:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801900a:	2102      	movs	r1, #2
 801900c:	4630      	mov	r0, r6
 801900e:	f7e9 f9f9 	bl	8002404 <HAL_GPIO_ReadPin>
 8019012:	b108      	cbz	r0, 8019018 <QSPI_16_R+0x18>
 8019014:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 8019018:	2101      	movs	r1, #1
 801901a:	4630      	mov	r0, r6
 801901c:	f7e9 f9f2 	bl	8002404 <HAL_GPIO_ReadPin>
 8019020:	b108      	cbz	r0, 8019026 <QSPI_16_R+0x26>
 8019022:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019026:	2180      	movs	r1, #128	; 0x80
 8019028:	4638      	mov	r0, r7
 801902a:	f7e9 f9eb 	bl	8002404 <HAL_GPIO_ReadPin>
 801902e:	b108      	cbz	r0, 8019034 <QSPI_16_R+0x34>
 8019030:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 8019034:	2140      	movs	r1, #64	; 0x40
 8019036:	4638      	mov	r0, r7
 8019038:	f7e9 f9e4 	bl	8002404 <HAL_GPIO_ReadPin>
 801903c:	b108      	cbz	r0, 8019042 <QSPI_16_R+0x42>
 801903e:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 8019042:	2006      	movs	r0, #6
 8019044:	f7ff feee 	bl	8018e24 <Set>
		if (i<3) byte=(byte<<4);
 8019048:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 801904a:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 801904e:	bf18      	it	ne
 8019050:	0124      	lslne	r4, r4, #4
		Reset(clk);
 8019052:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 8019056:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 8019058:	bf18      	it	ne
 801905a:	b2a4      	uxthne	r4, r4
		Reset(clk);
 801905c:	f7ff ff06 	bl	8018e6c <Reset>
	for(uint8_t i=0; i<4; i++)
 8019060:	2d04      	cmp	r5, #4
 8019062:	d1d2      	bne.n	801900a <QSPI_16_R+0xa>
	}
	return byte;
}
 8019064:	4620      	mov	r0, r4
 8019066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019068:	48000400 	.word	0x48000400
 801906c:	48001400 	.word	0x48001400

08019070 <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 8019070:	b538      	push	{r3, r4, r5, lr}
 8019072:	4604      	mov	r4, r0
 8019074:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 8019076:	0620      	lsls	r0, r4, #24
 8019078:	d502      	bpl.n	8019080 <QSPI_Byte_T+0x10>
 801907a:	2004      	movs	r0, #4
 801907c:	f7ff fed2 	bl	8018e24 <Set>
		if(0x40 & byte)	Set(io2);
 8019080:	0661      	lsls	r1, r4, #25
 8019082:	d502      	bpl.n	801908a <QSPI_Byte_T+0x1a>
 8019084:	2003      	movs	r0, #3
 8019086:	f7ff fecd 	bl	8018e24 <Set>
		if(0x20 & byte)	Set(io1);
 801908a:	06a2      	lsls	r2, r4, #26
 801908c:	d502      	bpl.n	8019094 <QSPI_Byte_T+0x24>
 801908e:	2002      	movs	r0, #2
 8019090:	f7ff fec8 	bl	8018e24 <Set>
		if(0x10 & byte)	Set(io0);
 8019094:	06e3      	lsls	r3, r4, #27
 8019096:	d501      	bpl.n	801909c <QSPI_Byte_T+0x2c>
 8019098:	f7ff fe36 	bl	8018d08 <Set.part.0>

		Set(clk);
 801909c:	2006      	movs	r0, #6
 801909e:	f7ff fec1 	bl	8018e24 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 80190a2:	2004      	movs	r0, #4
 80190a4:	f7ff fee2 	bl	8018e6c <Reset>
 80190a8:	2003      	movs	r0, #3
 80190aa:	f7ff fedf 	bl	8018e6c <Reset>
 80190ae:	2002      	movs	r0, #2
 80190b0:	f7ff fedc 	bl	8018e6c <Reset>
 80190b4:	3d01      	subs	r5, #1
 80190b6:	f7ff fe2f 	bl	8018d18 <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 80190ba:	2006      	movs	r0, #6
		byte=(byte<<4);
 80190bc:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 80190be:	f7ff fed5 	bl	8018e6c <Reset>
	for(uint8_t i=0; i<2; i++)
 80190c2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 80190c6:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 80190c8:	d1d5      	bne.n	8019076 <QSPI_Byte_T+0x6>
	}	
}
 80190ca:	bd38      	pop	{r3, r4, r5, pc}

080190cc <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 80190cc:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 80190ce:	4e07      	ldr	r6, [pc, #28]	; (80190ec <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 80190d0:	0085      	lsls	r5, r0, #2
 80190d2:	2400      	movs	r4, #0
 80190d4:	b2e3      	uxtb	r3, r4
 80190d6:	42ab      	cmp	r3, r5
 80190d8:	f104 0401 	add.w	r4, r4, #1
 80190dc:	db00      	blt.n	80190e0 <QSPI_Dummy+0x14>
	}
}
 80190de:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 80190e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80190e4:	4630      	mov	r0, r6
 80190e6:	f7e9 f998 	bl	800241a <HAL_GPIO_TogglePin>
 80190ea:	e7f3      	b.n	80190d4 <QSPI_Dummy+0x8>
 80190ec:	48001400 	.word	0x48001400

080190f0 <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 80190f0:	b510      	push	{r4, lr}
 80190f2:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 80190f4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80190f8:	f7ff ffba 	bl	8019070 <QSPI_Byte_T>
 80190fc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8019100:	f7ff ffb6 	bl	8019070 <QSPI_Byte_T>
 8019104:	b2e0      	uxtb	r0, r4
	}
}
 8019106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 801910a:	f7ff bfb1 	b.w	8019070 <QSPI_Byte_T>

0801910e <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 801910e:	b570      	push	{r4, r5, r6, lr}
 8019110:	460c      	mov	r4, r1
 8019112:	4615      	mov	r5, r2
 8019114:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 8019116:	f7ff fee7 	bl	8018ee8 <QSPI_Transmit_Init>
	Reset(cs);
 801911a:	2005      	movs	r0, #5
 801911c:	f7ff fea6 	bl	8018e6c <Reset>
	SPI_Byte_T(cmd);
 8019120:	20eb      	movs	r0, #235	; 0xeb
 8019122:	f7ff ff1d 	bl	8018f60 <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 8019126:	4620      	mov	r0, r4
 8019128:	f7ff ffe2 	bl	80190f0 <QSPI_Address>
	QSPI_Dummy(3);	
 801912c:	2003      	movs	r0, #3
 801912e:	f7ff ffcd 	bl	80190cc <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 8019132:	f7ff febf 	bl	8018eb4 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 8019136:	2400      	movs	r4, #0
 8019138:	42ac      	cmp	r4, r5
 801913a:	d108      	bne.n	801914e <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 801913c:	2005      	movs	r0, #5
 801913e:	f7ff fe71 	bl	8018e24 <Set>

	Single_Mode();
 8019142:	f7ff feeb 	bl	8018f1c <Single_Mode>
	SPI_Check_Busy();
}
 8019146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 801914a:	f7ff bf4e 	b.w	8018fea <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801914e:	f7ff ff57 	bl	8019000 <QSPI_16_R>
 8019152:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 8019156:	3401      	adds	r4, #1
 8019158:	e7ee      	b.n	8019138 <QSPI_Recieve_IO_16+0x2a>
	...

0801915c <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 801915c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019160:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 8019164:	4680      	mov	r8, r0
 8019166:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 8019168:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801916c:	2100      	movs	r1, #0
 801916e:	4668      	mov	r0, sp
 8019170:	f005 ff3d 	bl	801efee <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 8019174:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80191b8 <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 8019178:	2400      	movs	r4, #0
 801917a:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801917e:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 8019182:	fb06 f304 	mul.w	r3, r6, r4
 8019186:	429f      	cmp	r7, r3
 8019188:	d803      	bhi.n	8019192 <Image_load+0x36>
}
 801918a:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 801918e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 8019192:	b2a5      	uxth	r5, r4
 8019194:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8019198:	fb0a 8105 	mla	r1, sl, r5, r8
 801919c:	4668      	mov	r0, sp
 801919e:	f7ff ffb6 	bl	801910e <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 80191a2:	fb06 f005 	mul.w	r0, r6, r5
 80191a6:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80191aa:	4669      	mov	r1, sp
 80191ac:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 80191b0:	f005 ff12 	bl	801efd8 <memcpy>
 80191b4:	3401      	adds	r4, #1
 80191b6:	e7e4      	b.n	8019182 <Image_load+0x26>
 80191b8:	20050c0e 	.word	0x20050c0e

080191bc <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 80191bc:	ee20 0a20 	vmul.f32	s0, s0, s1
 80191c0:	4770      	bx	lr
	...

080191c4 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 80191c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 80191c6:	eddf 7a17 	vldr	s15, [pc, #92]	; 8019224 <Rabs_calc_Factor1+0x60>
{
 80191ca:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 80191ce:	ee80 8a27 	vdiv.f32	s16, s0, s15
 80191d2:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 80191d4:	2300      	movs	r3, #0
 80191d6:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 80191da:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 80191de:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 80191e0:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 80191e2:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 80191e4:	d1f9      	bne.n	80191da <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 80191e6:	ee07 3a90 	vmov	s15, r3
 80191ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80191ee:	ee17 0a90 	vmov	r0, s15
 80191f2:	f7e7 f9b9 	bl	8000568 <__aeabi_f2d>
 80191f6:	2200      	movs	r2, #0
 80191f8:	4b0b      	ldr	r3, [pc, #44]	; (8019228 <Rabs_calc_Factor1+0x64>)
 80191fa:	f7e7 fa09 	bl	8000610 <__aeabi_dmul>
 80191fe:	4604      	mov	r4, r0
 8019200:	ee18 0a10 	vmov	r0, s16
 8019204:	460d      	mov	r5, r1
 8019206:	f7e7 f9af 	bl	8000568 <__aeabi_f2d>
 801920a:	4602      	mov	r2, r0
 801920c:	460b      	mov	r3, r1
 801920e:	4620      	mov	r0, r4
 8019210:	4629      	mov	r1, r5
 8019212:	f7e7 f9fd 	bl	8000610 <__aeabi_dmul>
 8019216:	f7e7 fcf3 	bl	8000c00 <__aeabi_d2f>
}
 801921a:	ecbd 8b02 	vpop	{d8}
 801921e:	ee00 0a10 	vmov	s0, r0
 8019222:	bd38      	pop	{r3, r4, r5, pc}
 8019224:	42c80000 	.word	0x42c80000
 8019228:	3f500000 	.word	0x3f500000

0801922c <Rabs_calc_main>:

float Factor3 = 0;

void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{	
 801922c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t r = 1023;
	
	for (uint16_t i = 0; i < 1024; i++)
	{
		Factor3 = R_data[i] - Rdark - Factor1;
 801922e:	4f14      	ldr	r7, [pc, #80]	; (8019280 <Rabs_calc_main+0x54>)
 8019230:	3802      	subs	r0, #2
{	
 8019232:	f640 75fc 	movw	r5, #4092	; 0xffc
		
		if(Factor3 <= 0)
 8019236:	f04f 0e00 	mov.w	lr, #0
		Factor3 = R_data[i] - Rdark - Factor1;
 801923a:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 801923e:	1a64      	subs	r4, r4, r1
 8019240:	ee07 4a90 	vmov	s15, r4
 8019244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019248:	195e      	adds	r6, r3, r5
 801924a:	ee77 7ac0 	vsub.f32	s15, s15, s0
		if(Factor3 <= 0)
 801924e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Factor3 = R_data[i] - Rdark - Factor1;
 8019256:	edc7 7a00 	vstr	s15, [r7]
		{	
			Rabs[1023-i] = 0;
		} else 
		{
			Rabs[1023-i] = Factor3*Factor2*(Sn[r]);
 801925a:	bf83      	ittte	hi
 801925c:	1954      	addhi	r4, r2, r5
 801925e:	ee67 7aa0 	vmulhi.f32	s15, s15, s1
 8019262:	ed94 7a00 	vldrhi	s14, [r4]
			Rabs[1023-i] = 0;
 8019266:	f8c6 e000 	strls.w	lr, [r6]
			Rabs[1023-i] = Factor3*Factor2*(Sn[r]);
 801926a:	bf88      	it	hi
 801926c:	ee67 7a27 	vmulhi.f32	s15, s14, s15
 8019270:	f1a5 0504 	sub.w	r5, r5, #4
 8019274:	bf88      	it	hi
 8019276:	edc6 7a00 	vstrhi	s15, [r6]
	for (uint16_t i = 0; i < 1024; i++)
 801927a:	1d2c      	adds	r4, r5, #4
 801927c:	d1dd      	bne.n	801923a <Rabs_calc_main+0xe>
		}
		
		r--;
	}
}
 801927e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019280:	20004ce4 	.word	0x20004ce4

08019284 <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 8019284:	2900      	cmp	r1, #0

	float max = 0;
 8019286:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80192b8 <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 801928a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801928e:	bf0c      	ite	eq
 8019290:	2204      	moveq	r2, #4
 8019292:	2203      	movne	r2, #3
 8019294:	4293      	cmp	r3, r2
 8019296:	d200      	bcs.n	801929a <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 8019298:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 801929a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801929e:	edd1 7a00 	vldr	s15, [r1]
 80192a2:	eeb4 0a67 	vcmp.f32	s0, s15
 80192a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192aa:	eba3 0302 	sub.w	r3, r3, r2
 80192ae:	bf48      	it	mi
 80192b0:	eeb0 0a67 	vmovmi.f32	s0, s15
 80192b4:	b29b      	uxth	r3, r3
 80192b6:	e7ed      	b.n	8019294 <Rabs_find_MAX+0x10>
 80192b8:	00000000 	.word	0x00000000

080192bc <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 80192bc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80192dc <Rabs_find_MAX_all+0x20>
 80192c0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 80192c4:	ecf0 7a01 	vldmia	r0!, {s15}
 80192c8:	eef4 7a40 	vcmp.f32	s15, s0
 80192cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192d0:	bfc8      	it	gt
 80192d2:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 80192d6:	4298      	cmp	r0, r3
 80192d8:	d1f4      	bne.n	80192c4 <Rabs_find_MAX_all+0x8>
	}
	return max;
 80192da:	4770      	bx	lr
 80192dc:	00000000 	.word	0x00000000

080192e0 <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 80192e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80192e4:	4c52      	ldr	r4, [pc, #328]	; (8019430 <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 80192e6:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80192ea:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 80192ee:	f04f 0900 	mov.w	r9, #0
 80192f2:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80192f6:	6125      	str	r5, [r4, #16]
{
 80192f8:	460f      	mov	r7, r1
 80192fa:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 80192fc:	f7e8 fd84 	bl	8001e08 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 8019300:	f7e8 fd82 	bl	8001e08 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019304:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 8019306:	2064      	movs	r0, #100	; 0x64
 8019308:	f7e7 fe88 	bl	800101c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801930c:	4849      	ldr	r0, [pc, #292]	; (8019434 <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801930e:	2302      	movs	r3, #2
 8019310:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 8019312:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 8019314:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 8019316:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 8019318:	2301      	movs	r3, #1
 801931a:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801931c:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 8019320:	f7e8 fe8c 	bl	800203c <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 8019324:	2032      	movs	r0, #50	; 0x32
 8019326:	f7e7 fe79 	bl	800101c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801932a:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801932c:	f7e8 fd7e 	bl	8001e2c <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 8019330:	f7e8 fd6a 	bl	8001e08 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019334:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 8019336:	4d40      	ldr	r5, [pc, #256]	; (8019438 <WriteSDFLASH_t+0x158>)
 8019338:	4632      	mov	r2, r6
 801933a:	463b      	mov	r3, r7
 801933c:	4629      	mov	r1, r5
 801933e:	2000      	movs	r0, #0
 8019340:	f7e8 fdbc 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019344:	2800      	cmp	r0, #0
 8019346:	d1f7      	bne.n	8019338 <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801934c:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 801934e:	4d3b      	ldr	r5, [pc, #236]	; (801943c <WriteSDFLASH_t+0x15c>)
 8019350:	4c3b      	ldr	r4, [pc, #236]	; (8019440 <WriteSDFLASH_t+0x160>)
 8019352:	782a      	ldrb	r2, [r5, #0]
 8019354:	2300      	movs	r3, #0
 8019356:	4621      	mov	r1, r4
 8019358:	2000      	movs	r0, #0
 801935a:	f7e8 fdaf 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801935e:	2800      	cmp	r0, #0
 8019360:	d1f7      	bne.n	8019352 <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019362:	4b33      	ldr	r3, [pc, #204]	; (8019430 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 8019364:	4d37      	ldr	r5, [pc, #220]	; (8019444 <WriteSDFLASH_t+0x164>)
 8019366:	4c38      	ldr	r4, [pc, #224]	; (8019448 <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019368:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801936c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801936e:	882a      	ldrh	r2, [r5, #0]
 8019370:	2300      	movs	r3, #0
 8019372:	4621      	mov	r1, r4
 8019374:	2000      	movs	r0, #0
 8019376:	f7e8 fda1 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801937a:	2800      	cmp	r0, #0
 801937c:	d1f7      	bne.n	801936e <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801937e:	4b2c      	ldr	r3, [pc, #176]	; (8019430 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 8019380:	4d32      	ldr	r5, [pc, #200]	; (801944c <WriteSDFLASH_t+0x16c>)
 8019382:	4c33      	ldr	r4, [pc, #204]	; (8019450 <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019384:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019388:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801938a:	782a      	ldrb	r2, [r5, #0]
 801938c:	2300      	movs	r3, #0
 801938e:	4621      	mov	r1, r4
 8019390:	2000      	movs	r0, #0
 8019392:	f7e8 fd93 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019396:	2800      	cmp	r0, #0
 8019398:	d1f7      	bne.n	801938a <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801939a:	4b25      	ldr	r3, [pc, #148]	; (8019430 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801939c:	4d2d      	ldr	r5, [pc, #180]	; (8019454 <WriteSDFLASH_t+0x174>)
 801939e:	4c2e      	ldr	r4, [pc, #184]	; (8019458 <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80193a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80193a4:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 80193a6:	782a      	ldrb	r2, [r5, #0]
 80193a8:	2300      	movs	r3, #0
 80193aa:	4621      	mov	r1, r4
 80193ac:	2000      	movs	r0, #0
 80193ae:	f7e8 fd85 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80193b2:	2800      	cmp	r0, #0
 80193b4:	d1f7      	bne.n	80193a6 <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80193b6:	4b1e      	ldr	r3, [pc, #120]	; (8019430 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 80193b8:	4d28      	ldr	r5, [pc, #160]	; (801945c <WriteSDFLASH_t+0x17c>)
 80193ba:	4c29      	ldr	r4, [pc, #164]	; (8019460 <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80193bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80193c0:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 80193c2:	782a      	ldrb	r2, [r5, #0]
 80193c4:	2300      	movs	r3, #0
 80193c6:	4621      	mov	r1, r4
 80193c8:	2000      	movs	r0, #0
 80193ca:	f7e8 fd77 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80193ce:	2800      	cmp	r0, #0
 80193d0:	d1f7      	bne.n	80193c2 <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80193d2:	4b17      	ldr	r3, [pc, #92]	; (8019430 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 80193d4:	4d23      	ldr	r5, [pc, #140]	; (8019464 <WriteSDFLASH_t+0x184>)
 80193d6:	4c24      	ldr	r4, [pc, #144]	; (8019468 <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80193d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80193dc:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 80193de:	782a      	ldrb	r2, [r5, #0]
 80193e0:	2300      	movs	r3, #0
 80193e2:	4621      	mov	r1, r4
 80193e4:	2000      	movs	r0, #0
 80193e6:	f7e8 fd69 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80193ea:	2800      	cmp	r0, #0
 80193ec:	d1f7      	bne.n	80193de <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80193ee:	4b10      	ldr	r3, [pc, #64]	; (8019430 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 80193f0:	4d1e      	ldr	r5, [pc, #120]	; (801946c <WriteSDFLASH_t+0x18c>)
 80193f2:	4c1f      	ldr	r4, [pc, #124]	; (8019470 <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80193f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80193f8:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 80193fa:	782a      	ldrb	r2, [r5, #0]
 80193fc:	2300      	movs	r3, #0
 80193fe:	4621      	mov	r1, r4
 8019400:	2000      	movs	r0, #0
 8019402:	f7e8 fd5b 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019406:	2800      	cmp	r0, #0
 8019408:	d1f7      	bne.n	80193fa <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801940a:	4b09      	ldr	r3, [pc, #36]	; (8019430 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801940c:	4d19      	ldr	r5, [pc, #100]	; (8019474 <WriteSDFLASH_t+0x194>)
 801940e:	4c1a      	ldr	r4, [pc, #104]	; (8019478 <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019410:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019414:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 8019416:	782a      	ldrb	r2, [r5, #0]
 8019418:	2300      	movs	r3, #0
 801941a:	4621      	mov	r1, r4
 801941c:	2000      	movs	r0, #0
 801941e:	f7e8 fd4d 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019422:	2800      	cmp	r0, #0
 8019424:	d1f7      	bne.n	8019416 <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 8019426:	f7e8 fd01 	bl	8001e2c <HAL_FLASH_Lock>
}
 801942a:	b003      	add	sp, #12
 801942c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019430:	40022000 	.word	0x40022000
 8019434:	2008c860 	.word	0x2008c860
 8019438:	0812b020 	.word	0x0812b020
 801943c:	20000a50 	.word	0x20000a50
 8019440:	0812b030 	.word	0x0812b030
 8019444:	20004ca6 	.word	0x20004ca6
 8019448:	0812b038 	.word	0x0812b038
 801944c:	20004ca2 	.word	0x20004ca2
 8019450:	0812b040 	.word	0x0812b040
 8019454:	20004c9f 	.word	0x20004c9f
 8019458:	0812b048 	.word	0x0812b048
 801945c:	20004ca0 	.word	0x20004ca0
 8019460:	0812b050 	.word	0x0812b050
 8019464:	20004ca3 	.word	0x20004ca3
 8019468:	0812b058 	.word	0x0812b058
 801946c:	2008acd9 	.word	0x2008acd9
 8019470:	0812b060 	.word	0x0812b060
 8019474:	2008acda 	.word	0x2008acda
 8019478:	0812b068 	.word	0x0812b068

0801947c <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 801947c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019480:	4c1b      	ldr	r4, [pc, #108]	; (80194f0 <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 8019482:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019484:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 8019488:	f04f 0800 	mov.w	r8, #0
 801948c:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019490:	6125      	str	r5, [r4, #16]
{
 8019492:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 8019494:	f7e8 fcb8 	bl	8001e08 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 8019498:	f7e8 fcb6 	bl	8001e08 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801949c:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801949e:	2064      	movs	r0, #100	; 0x64
 80194a0:	f7e7 fdbc 	bl	800101c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 80194a4:	4813      	ldr	r0, [pc, #76]	; (80194f4 <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 80194a6:	2302      	movs	r3, #2
 80194a8:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 80194aa:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 80194ac:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 80194ae:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 80194b0:	2301      	movs	r3, #1
 80194b2:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 80194b4:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 80194b8:	f7e8 fdc0 	bl	800203c <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 80194bc:	2032      	movs	r0, #50	; 0x32
 80194be:	f7e7 fdad 	bl	800101c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80194c2:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 80194c4:	f7e8 fcb2 	bl	8001e2c <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 80194c8:	f7e8 fc9e 	bl	8001e08 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80194cc:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 80194ce:	b2f4      	uxtb	r4, r6
 80194d0:	4e09      	ldr	r6, [pc, #36]	; (80194f8 <WriteFLASH_Screen+0x7c>)
 80194d2:	2500      	movs	r5, #0
 80194d4:	4622      	mov	r2, r4
 80194d6:	462b      	mov	r3, r5
 80194d8:	4631      	mov	r1, r6
 80194da:	2000      	movs	r0, #0
 80194dc:	f7e8 fcee 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80194e0:	2800      	cmp	r0, #0
 80194e2:	d1f7      	bne.n	80194d4 <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 80194e4:	f7e8 fca2 	bl	8001e2c <HAL_FLASH_Lock>
}
 80194e8:	b002      	add	sp, #8
 80194ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ee:	bf00      	nop
 80194f0:	40022000 	.word	0x40022000
 80194f4:	2008c860 	.word	0x2008c860
 80194f8:	0812c020 	.word	0x0812c020
 80194fc:	00000000 	.word	0x00000000

08019500 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 8019500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ(Line_Rabs_buff, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 8019502:	4c5b      	ldr	r4, [pc, #364]	; (8019670 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 8019504:	4e5b      	ldr	r6, [pc, #364]	; (8019674 <Calculate_SD_Data+0x174>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019506:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8019678 <Calculate_SD_Data+0x178>
	Calculate_xy(colorimetry_XYZ);
 801950a:	4d5c      	ldr	r5, [pc, #368]	; (801967c <Calculate_SD_Data+0x17c>)
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801950c:	4f5c      	ldr	r7, [pc, #368]	; (8019680 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 801950e:	2200      	movs	r2, #0
 8019510:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019512:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019516:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 8019518:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801951c:	f7fa ff9e 	bl	801445c <GUI_Bar_Measure>
	Calculate_XYZ(Line_Rabs_buff, calibratre_x_1931, calibratre_y_1931, calibratre_z_1931);
 8019520:	4b58      	ldr	r3, [pc, #352]	; (8019684 <Calculate_SD_Data+0x184>)
 8019522:	4a59      	ldr	r2, [pc, #356]	; (8019688 <Calculate_SD_Data+0x188>)
 8019524:	4959      	ldr	r1, [pc, #356]	; (801968c <Calculate_SD_Data+0x18c>)
 8019526:	4620      	mov	r0, r4
 8019528:	f7f3 fdc6 	bl	800d0b8 <Calculate_XYZ>
	Calculate_xy(colorimetry_XYZ);
 801952c:	4628      	mov	r0, r5
 801952e:	f7f3 fe11 	bl	800d154 <Calculate_xy>
	Calculate_uv1976(colorimetry_xy);
 8019532:	4857      	ldr	r0, [pc, #348]	; (8019690 <Calculate_SD_Data+0x190>)
 8019534:	f7f3 fe58 	bl	800d1e8 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ, Measure_Color_xy, Source_Type);
 8019538:	4b56      	ldr	r3, [pc, #344]	; (8019694 <Calculate_SD_Data+0x194>)
 801953a:	781a      	ldrb	r2, [r3, #0]
 801953c:	4b56      	ldr	r3, [pc, #344]	; (8019698 <Calculate_SD_Data+0x198>)
 801953e:	4628      	mov	r0, r5
 8019540:	7819      	ldrb	r1, [r3, #0]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019542:	4d56      	ldr	r5, [pc, #344]	; (801969c <Calculate_SD_Data+0x19c>)
	Calculate_Lab(colorimetry_XYZ, Measure_Color_xy, Source_Type);
 8019544:	f7f4 f818 	bl	800d578 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 8019548:	4620      	mov	r0, r4
 801954a:	2101      	movs	r1, #1
 801954c:	f7f3 fe78 	bl	800d240 <Calculate_Tc>
 8019550:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019554:	4b52      	ldr	r3, [pc, #328]	; (80196a0 <Calculate_SD_Data+0x1a0>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019556:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80196a4 <Calculate_SD_Data+0x1a4>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801955a:	ee17 2a90 	vmov	r2, s15
 801955e:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 8019560:	a33d      	add	r3, pc, #244	; (adr r3, 8019658 <Calculate_SD_Data+0x158>)
 8019562:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019566:	f44f 718c 	mov.w	r1, #280	; 0x118
 801956a:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801956c:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019570:	f7fa ff74 	bl	801445c <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 8019574:	f7f4 fa62 	bl	800da3c <Calculate_deltaEab>
 8019578:	4b4b      	ldr	r3, [pc, #300]	; (80196a8 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801957a:	494c      	ldr	r1, [pc, #304]	; (80196ac <Calculate_SD_Data+0x1ac>)
	delta_Eab_Measure = Calculate_deltaEab();
 801957c:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801957e:	4620      	mov	r0, r4
 8019580:	f7f3 fc6a 	bl	800ce58 <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 8019584:	4620      	mov	r0, r4
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 8019586:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801958a:	f7f3 fc85 	bl	800ce98 <Calculate_EL_Day_Wt>
 801958e:	4b48      	ldr	r3, [pc, #288]	; (80196b0 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019590:	4629      	mov	r1, r5
 8019592:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 8019594:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019598:	f7f3 fcc6 	bl	800cf28 <Calculate_PPFD_PPL>
 801959c:	4b45      	ldr	r3, [pc, #276]	; (80196b4 <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801959e:	4629      	mov	r1, r5
 80195a0:	4620      	mov	r0, r4
 80195a2:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 80195a4:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 80195a8:	f7f3 fcfa 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 80195ac:	4b42      	ldr	r3, [pc, #264]	; (80196b8 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 80195ae:	4629      	mov	r1, r5
 80195b0:	4620      	mov	r0, r4
 80195b2:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 80195b4:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 80195b8:	f7f3 fcf2 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 80195bc:	4b3f      	ldr	r3, [pc, #252]	; (80196bc <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 80195be:	4629      	mov	r1, r5
 80195c0:	4620      	mov	r0, r4
 80195c2:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 80195c4:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 80195c8:	f7f3 fcea 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 80195cc:	4b3c      	ldr	r3, [pc, #240]	; (80196c0 <Calculate_SD_Data+0x1c0>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 80195ce:	4629      	mov	r1, r5
 80195d0:	4620      	mov	r0, r4
 80195d2:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 80195d4:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 80195d8:	f7f3 fce2 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 80195dc:	4b39      	ldr	r3, [pc, #228]	; (80196c4 <Calculate_SD_Data+0x1c4>)
 80195de:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 80195e2:	a31f      	add	r3, pc, #124	; (adr r3, 8019660 <Calculate_SD_Data+0x160>)
 80195e4:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80195e8:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80196c8 <Calculate_SD_Data+0x1c8>
 80195ec:	f44f 718c 	mov.w	r1, #280	; 0x118
 80195f0:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 80195f2:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80195f6:	f7fa ff31 	bl	801445c <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 80195fa:	4620      	mov	r0, r4
 80195fc:	4933      	ldr	r1, [pc, #204]	; (80196cc <Calculate_SD_Data+0x1cc>)
 80195fe:	f7f3 fc63 	bl	800cec8 <Calculate_EL_Night>
 8019602:	4b33      	ldr	r3, [pc, #204]	; (80196d0 <Calculate_SD_Data+0x1d0>)
 8019604:	eef0 0a40 	vmov.f32	s1, s0
 8019608:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801960c:	ed97 0a00 	vldr	s0, [r7]
 8019610:	f7f3 fc7a 	bl	800cf08 <Calculate_SP>
 8019614:	4b2f      	ldr	r3, [pc, #188]	; (80196d4 <Calculate_SD_Data+0x1d4>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 8019616:	4930      	ldr	r1, [pc, #192]	; (80196d8 <Calculate_SD_Data+0x1d8>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 8019618:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801961c:	4620      	mov	r0, r4
 801961e:	f7f3 fd49 	bl	800d0b4 <Calculate_ELr>
 8019622:	4b2e      	ldr	r3, [pc, #184]	; (80196dc <Calculate_SD_Data+0x1dc>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 8019624:	492e      	ldr	r1, [pc, #184]	; (80196e0 <Calculate_SD_Data+0x1e0>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 8019626:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801962a:	4620      	mov	r0, r4
 801962c:	f7f3 fd28 	bl	800d080 <Calculate_ELb>
 8019630:	4b2c      	ldr	r3, [pc, #176]	; (80196e4 <Calculate_SD_Data+0x1e4>)
 8019632:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 8019636:	a30c      	add	r3, pc, #48	; (adr r3, 8019668 <Calculate_SD_Data+0x168>)
 8019638:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801963c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80196e8 <Calculate_SD_Data+0x1e8>
	SDWr_Status_bar = 0.4;
 8019640:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019644:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019648:	2055      	movs	r0, #85	; 0x55
}
 801964a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801964e:	f7fa bf05 	b.w	801445c <GUI_Bar_Measure>
 8019652:	bf00      	nop
 8019654:	f3af 8000 	nop.w
 8019658:	9999999a 	.word	0x9999999a
 801965c:	3fb99999 	.word	0x3fb99999
 8019660:	33333333 	.word	0x33333333
 8019664:	3fd33333 	.word	0x3fd33333
 8019668:	9999999a 	.word	0x9999999a
 801966c:	3fd99999 	.word	0x3fd99999
 8019670:	200077fc 	.word	0x200077fc
 8019674:	20004ce8 	.word	0x20004ce8
 8019678:	00000000 	.word	0x00000000
 801967c:	2008a7de 	.word	0x2008a7de
 8019680:	2009015c 	.word	0x2009015c
 8019684:	200887d0 	.word	0x200887d0
 8019688:	200877d0 	.word	0x200877d0
 801968c:	200857d0 	.word	0x200857d0
 8019690:	2008a7f4 	.word	0x2008a7f4
 8019694:	2008acd9 	.word	0x2008acd9
 8019698:	20004ca4 	.word	0x20004ca4
 801969c:	2004fc04 	.word	0x2004fc04
 80196a0:	2004fc00 	.word	0x2004fc00
 80196a4:	3dcccccd 	.word	0x3dcccccd
 80196a8:	2008acd6 	.word	0x2008acd6
 80196ac:	2004dc00 	.word	0x2004dc00
 80196b0:	2008fbfc 	.word	0x2008fbfc
 80196b4:	2008fc04 	.word	0x2008fc04
 80196b8:	2008fcac 	.word	0x2008fcac
 80196bc:	20090038 	.word	0x20090038
 80196c0:	2008ff6c 	.word	0x2008ff6c
 80196c4:	2008fc00 	.word	0x2008fc00
 80196c8:	3e99999a 	.word	0x3e99999a
 80196cc:	2004ec00 	.word	0x2004ec00
 80196d0:	2008f92c 	.word	0x2008f92c
 80196d4:	2008fca8 	.word	0x2008fca8
 80196d8:	20005ff8 	.word	0x20005ff8
 80196dc:	20090158 	.word	0x20090158
 80196e0:	20004ff8 	.word	0x20004ff8
 80196e4:	20090154 	.word	0x20090154
 80196e8:	3ecccccd 	.word	0x3ecccccd
 80196ec:	00000000 	.word	0x00000000

080196f0 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 80196f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f4:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 80196f6:	4bb8      	ldr	r3, [pc, #736]	; (80199d8 <SD_Witer+0x2e8>)
 80196f8:	781b      	ldrb	r3, [r3, #0]
 80196fa:	2b01      	cmp	r3, #1
{
 80196fc:	b087      	sub	sp, #28
 80196fe:	4605      	mov	r5, r0
 8019700:	460c      	mov	r4, r1
 8019702:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 8019704:	f000 85fe 	beq.w	801a304 <SD_Witer+0xc14>
 8019708:	2b02      	cmp	r3, #2
 801970a:	f000 85fe 	beq.w	801a30a <SD_Witer+0xc1a>
 801970e:	2b04      	cmp	r3, #4
 8019710:	f000 85fe 	beq.w	801a310 <SD_Witer+0xc20>
 8019714:	2b08      	cmp	r3, #8
 8019716:	f000 85fe 	beq.w	801a316 <SD_Witer+0xc26>
 801971a:	2b10      	cmp	r3, #16
 801971c:	f000 85fe 	beq.w	801a31c <SD_Witer+0xc2c>
 8019720:	4aae      	ldr	r2, [pc, #696]	; (80199dc <SD_Witer+0x2ec>)
 8019722:	49af      	ldr	r1, [pc, #700]	; (80199e0 <SD_Witer+0x2f0>)
 8019724:	2b20      	cmp	r3, #32
 8019726:	bf18      	it	ne
 8019728:	4611      	movne	r1, r2
 801972a:	a802      	add	r0, sp, #8
 801972c:	f005 fc9b 	bl	801f066 <strcpy>
	
	memset(measure_buff, 0, 12);
 8019730:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 8019732:	462a      	mov	r2, r5
 8019734:	49ab      	ldr	r1, [pc, #684]	; (80199e4 <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 8019736:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 8019738:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 801973a:	9304      	str	r3, [sp, #16]
 801973c:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 801973e:	f005 fc5f 	bl	801f000 <siprintf>
		strcat(buffer_sd, digit_buff);
 8019742:	a901      	add	r1, sp, #4
 8019744:	48a8      	ldr	r0, [pc, #672]	; (80199e8 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 8019746:	4da9      	ldr	r5, [pc, #676]	; (80199ec <SD_Witer+0x2fc>)
 8019748:	4ea7      	ldr	r6, [pc, #668]	; (80199e8 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 801974a:	f005 fc7d 	bl	801f048 <strcat>
		strcat(buffer_sd, ".txt");
 801974e:	49a8      	ldr	r1, [pc, #672]	; (80199f0 <SD_Witer+0x300>)
 8019750:	48a5      	ldr	r0, [pc, #660]	; (80199e8 <SD_Witer+0x2f8>)
 8019752:	f005 fc79 	bl	801f048 <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 8019756:	2201      	movs	r2, #1
 8019758:	49a6      	ldr	r1, [pc, #664]	; (80199f4 <SD_Witer+0x304>)
 801975a:	48a7      	ldr	r0, [pc, #668]	; (80199f8 <SD_Witer+0x308>)
 801975c:	f7ee ff26 	bl	80085ac <f_mount>
 8019760:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 8019762:	2800      	cmp	r0, #0
 8019764:	f040 85b1 	bne.w	801a2ca <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 8019768:	220a      	movs	r2, #10
 801976a:	4631      	mov	r1, r6
 801976c:	48a3      	ldr	r0, [pc, #652]	; (80199fc <SD_Witer+0x30c>)
 801976e:	f7ee ff51 	bl	8008614 <f_open>
 8019772:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 8019774:	2800      	cmp	r0, #0
 8019776:	f040 85a8 	bne.w	801a2ca <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 801977a:	4ba1      	ldr	r3, [pc, #644]	; (8019a00 <SD_Witer+0x310>)
 801977c:	49a1      	ldr	r1, [pc, #644]	; (8019a04 <SD_Witer+0x314>)
 801977e:	2000      	movs	r0, #0
 8019780:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019784:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8019788:	f44f 718c 	mov.w	r1, #280	; 0x118
 801978c:	2055      	movs	r0, #85	; 0x55
 801978e:	f7fa fe65 	bl	801445c <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 8019792:	4b9d      	ldr	r3, [pc, #628]	; (8019a08 <SD_Witer+0x318>)
 8019794:	2c00      	cmp	r4, #0
 8019796:	f040 85c4 	bne.w	801a322 <SD_Witer+0xc32>
 801979a:	499c      	ldr	r1, [pc, #624]	; (8019a0c <SD_Witer+0x31c>)
 801979c:	2235      	movs	r2, #53	; 0x35
 801979e:	4897      	ldr	r0, [pc, #604]	; (80199fc <SD_Witer+0x30c>)
 80197a0:	f7ef f84e 	bl	8008840 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 80197a4:	4b9a      	ldr	r3, [pc, #616]	; (8019a10 <SD_Witer+0x320>)
 80197a6:	6818      	ldr	r0, [r3, #0]
 80197a8:	f7e6 fede 	bl	8000568 <__aeabi_f2d>
 80197ac:	4602      	mov	r2, r0
 80197ae:	460b      	mov	r3, r1
 80197b0:	a803      	add	r0, sp, #12
 80197b2:	4998      	ldr	r1, [pc, #608]	; (8019a14 <SD_Witer+0x324>)
 80197b4:	f005 fc24 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 80197b8:	220c      	movs	r2, #12
 80197ba:	4b93      	ldr	r3, [pc, #588]	; (8019a08 <SD_Witer+0x318>)
 80197bc:	488f      	ldr	r0, [pc, #572]	; (80199fc <SD_Witer+0x30c>)
 80197be:	eb0d 0102 	add.w	r1, sp, r2
 80197c2:	f7ef f83d 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 80197c6:	2300      	movs	r3, #0
 80197c8:	9303      	str	r3, [sp, #12]
 80197ca:	9304      	str	r3, [sp, #16]
 80197cc:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 80197ce:	4b8e      	ldr	r3, [pc, #568]	; (8019a08 <SD_Witer+0x318>)
 80197d0:	2c00      	cmp	r4, #0
 80197d2:	f040 85aa 	bne.w	801a32a <SD_Witer+0xc3a>
 80197d6:	4990      	ldr	r1, [pc, #576]	; (8019a18 <SD_Witer+0x328>)
 80197d8:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[0]);//X
 80197da:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8019a40 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 80197de:	4887      	ldr	r0, [pc, #540]	; (80199fc <SD_Witer+0x30c>)
 80197e0:	f7ef f82e 	bl	8008840 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[0]);//X
 80197e4:	f8b9 2000 	ldrh.w	r2, [r9]
 80197e8:	498c      	ldr	r1, [pc, #560]	; (8019a1c <SD_Witer+0x32c>)
 80197ea:	a803      	add	r0, sp, #12
 80197ec:	f005 fc08 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 80197f0:	220c      	movs	r2, #12
 80197f2:	4b85      	ldr	r3, [pc, #532]	; (8019a08 <SD_Witer+0x318>)
 80197f4:	4881      	ldr	r0, [pc, #516]	; (80199fc <SD_Witer+0x30c>)
 80197f6:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 80197fa:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 80197fc:	f7ef f820 	bl	8008840 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[1]);//Y
 8019800:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8019804:	4985      	ldr	r1, [pc, #532]	; (8019a1c <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 8019806:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[1]);//Y
 8019808:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801980a:	9504      	str	r5, [sp, #16]
 801980c:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[1]);//Y
 801980e:	f005 fbf7 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019812:	220c      	movs	r2, #12
 8019814:	4b7c      	ldr	r3, [pc, #496]	; (8019a08 <SD_Witer+0x318>)
 8019816:	4879      	ldr	r0, [pc, #484]	; (80199fc <SD_Witer+0x30c>)
 8019818:	eb0d 0102 	add.w	r1, sp, r2
 801981c:	f7ef f810 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[2]);//Z
 8019820:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8019824:	497d      	ldr	r1, [pc, #500]	; (8019a1c <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 8019826:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[2]);//Z
 8019828:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801982a:	9504      	str	r5, [sp, #16]
 801982c:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ[2]);//Z
 801982e:	f005 fbe7 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019832:	220c      	movs	r2, #12
 8019834:	4b74      	ldr	r3, [pc, #464]	; (8019a08 <SD_Witer+0x318>)
 8019836:	4871      	ldr	r0, [pc, #452]	; (80199fc <SD_Witer+0x30c>)
 8019838:	eb0d 0102 	add.w	r1, sp, r2
 801983c:	f7ef f800 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 8019840:	9503      	str	r5, [sp, #12]
 8019842:	9504      	str	r5, [sp, #16]
 8019844:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 8019846:	4b70      	ldr	r3, [pc, #448]	; (8019a08 <SD_Witer+0x318>)
 8019848:	2c00      	cmp	r4, #0
 801984a:	f040 8572 	bne.w	801a332 <SD_Witer+0xc42>
 801984e:	4974      	ldr	r1, [pc, #464]	; (8019a20 <SD_Witer+0x330>)
 8019850:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy[0]); //x
 8019852:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8019a44 <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 8019856:	4869      	ldr	r0, [pc, #420]	; (80199fc <SD_Witer+0x30c>)
 8019858:	f7ee fff2 	bl	8008840 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy[0]); //x
 801985c:	f8d9 0000 	ldr.w	r0, [r9]
 8019860:	f7e6 fe82 	bl	8000568 <__aeabi_f2d>
 8019864:	4602      	mov	r2, r0
 8019866:	460b      	mov	r3, r1
 8019868:	a803      	add	r0, sp, #12
 801986a:	496e      	ldr	r1, [pc, #440]	; (8019a24 <SD_Witer+0x334>)
 801986c:	f005 fbc8 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019870:	220c      	movs	r2, #12
 8019872:	4b65      	ldr	r3, [pc, #404]	; (8019a08 <SD_Witer+0x318>)
 8019874:	4861      	ldr	r0, [pc, #388]	; (80199fc <SD_Witer+0x30c>)
 8019876:	eb0d 0102 	add.w	r1, sp, r2
 801987a:	f7ee ffe1 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 801987e:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy[1]);//y
 8019880:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 8019884:	9503      	str	r5, [sp, #12]
 8019886:	9504      	str	r5, [sp, #16]
 8019888:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy[1]);//y
 801988a:	f7e6 fe6d 	bl	8000568 <__aeabi_f2d>
 801988e:	4602      	mov	r2, r0
 8019890:	460b      	mov	r3, r1
 8019892:	a803      	add	r0, sp, #12
 8019894:	495f      	ldr	r1, [pc, #380]	; (8019a14 <SD_Witer+0x324>)
 8019896:	f005 fbb3 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801989a:	220c      	movs	r2, #12
 801989c:	4b5a      	ldr	r3, [pc, #360]	; (8019a08 <SD_Witer+0x318>)
 801989e:	4857      	ldr	r0, [pc, #348]	; (80199fc <SD_Witer+0x30c>)
 80198a0:	eb0d 0102 	add.w	r1, sp, r2
 80198a4:	f7ee ffcc 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 80198a8:	9503      	str	r5, [sp, #12]
 80198aa:	9504      	str	r5, [sp, #16]
 80198ac:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 80198ae:	4b56      	ldr	r3, [pc, #344]	; (8019a08 <SD_Witer+0x318>)
 80198b0:	2c00      	cmp	r4, #0
 80198b2:	f040 8542 	bne.w	801a33a <SD_Witer+0xc4a>
 80198b6:	495c      	ldr	r1, [pc, #368]	; (8019a28 <SD_Witer+0x338>)
 80198b8:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 80198ba:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8019a48 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 80198be:	484f      	ldr	r0, [pc, #316]	; (80199fc <SD_Witer+0x30c>)
 80198c0:	f7ee ffbe 	bl	8008840 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 80198c4:	f8d9 0000 	ldr.w	r0, [r9]
 80198c8:	f7e6 fe4e 	bl	8000568 <__aeabi_f2d>
 80198cc:	4602      	mov	r2, r0
 80198ce:	460b      	mov	r3, r1
 80198d0:	a803      	add	r0, sp, #12
 80198d2:	4954      	ldr	r1, [pc, #336]	; (8019a24 <SD_Witer+0x334>)
 80198d4:	f005 fb94 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 80198d8:	220c      	movs	r2, #12
 80198da:	4b4b      	ldr	r3, [pc, #300]	; (8019a08 <SD_Witer+0x318>)
 80198dc:	4847      	ldr	r0, [pc, #284]	; (80199fc <SD_Witer+0x30c>)
 80198de:	eb0d 0102 	add.w	r1, sp, r2
 80198e2:	f7ee ffad 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 80198e6:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 80198e8:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 80198ec:	9503      	str	r5, [sp, #12]
 80198ee:	9504      	str	r5, [sp, #16]
 80198f0:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 80198f2:	f7e6 fe39 	bl	8000568 <__aeabi_f2d>
 80198f6:	4602      	mov	r2, r0
 80198f8:	460b      	mov	r3, r1
 80198fa:	a803      	add	r0, sp, #12
 80198fc:	4945      	ldr	r1, [pc, #276]	; (8019a14 <SD_Witer+0x324>)
 80198fe:	f005 fb7f 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019902:	220c      	movs	r2, #12
 8019904:	4b40      	ldr	r3, [pc, #256]	; (8019a08 <SD_Witer+0x318>)
 8019906:	483d      	ldr	r0, [pc, #244]	; (80199fc <SD_Witer+0x30c>)
 8019908:	eb0d 0102 	add.w	r1, sp, r2
 801990c:	f7ee ff98 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 8019910:	9503      	str	r5, [sp, #12]
 8019912:	9504      	str	r5, [sp, #16]
 8019914:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 8019916:	4b3c      	ldr	r3, [pc, #240]	; (8019a08 <SD_Witer+0x318>)
 8019918:	2c00      	cmp	r4, #0
 801991a:	f040 8512 	bne.w	801a342 <SD_Witer+0xc52>
 801991e:	4943      	ldr	r1, [pc, #268]	; (8019a2c <SD_Witer+0x33c>)
 8019920:	220e      	movs	r2, #14
 8019922:	4836      	ldr	r0, [pc, #216]	; (80199fc <SD_Witer+0x30c>)
 8019924:	f7ee ff8c 	bl	8008840 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 8019928:	4b41      	ldr	r3, [pc, #260]	; (8019a30 <SD_Witer+0x340>)
 801992a:	881a      	ldrh	r2, [r3, #0]
 801992c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019930:	429a      	cmp	r2, r3
 8019932:	f040 8537 	bne.w	801a3a4 <SD_Witer+0xcb4>
 8019936:	4b34      	ldr	r3, [pc, #208]	; (8019a08 <SD_Witer+0x318>)
 8019938:	4928      	ldr	r1, [pc, #160]	; (80199dc <SD_Witer+0x2ec>)
 801993a:	4830      	ldr	r0, [pc, #192]	; (80199fc <SD_Witer+0x30c>)
 801993c:	2203      	movs	r2, #3
 801993e:	f7ee ff7f 	bl	8008840 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 8019942:	a123      	add	r1, pc, #140	; (adr r1, 80199d0 <SD_Witer+0x2e0>)
 8019944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019948:	4b2d      	ldr	r3, [pc, #180]	; (8019a00 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801994a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8019a34 <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 801994e:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019952:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019956:	2055      	movs	r0, #85	; 0x55
 8019958:	f7fa fd80 	bl	801445c <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801995c:	4b2a      	ldr	r3, [pc, #168]	; (8019a08 <SD_Witer+0x318>)
 801995e:	2c00      	cmp	r4, #0
 8019960:	f040 8531 	bne.w	801a3c6 <SD_Witer+0xcd6>
 8019964:	4934      	ldr	r1, [pc, #208]	; (8019a38 <SD_Witer+0x348>)
 8019966:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 8019968:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8019a4c <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801996c:	4823      	ldr	r0, [pc, #140]	; (80199fc <SD_Witer+0x30c>)
 801996e:	f7ee ff67 	bl	8008840 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 8019972:	f9b9 2000 	ldrsh.w	r2, [r9]
 8019976:	4931      	ldr	r1, [pc, #196]	; (8019a3c <SD_Witer+0x34c>)
 8019978:	a803      	add	r0, sp, #12
 801997a:	f005 fb41 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801997e:	220c      	movs	r2, #12
 8019980:	4b21      	ldr	r3, [pc, #132]	; (8019a08 <SD_Witer+0x318>)
 8019982:	481e      	ldr	r0, [pc, #120]	; (80199fc <SD_Witer+0x30c>)
 8019984:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 8019988:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801998a:	f7ee ff59 	bl	8008840 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801998e:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 8019992:	492a      	ldr	r1, [pc, #168]	; (8019a3c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 8019994:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 8019996:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019998:	9504      	str	r5, [sp, #16]
 801999a:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801999c:	f005 fb30 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 80199a0:	220c      	movs	r2, #12
 80199a2:	4b19      	ldr	r3, [pc, #100]	; (8019a08 <SD_Witer+0x318>)
 80199a4:	4815      	ldr	r0, [pc, #84]	; (80199fc <SD_Witer+0x30c>)
 80199a6:	eb0d 0102 	add.w	r1, sp, r2
 80199aa:	f7ee ff49 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 80199ae:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80199b2:	4922      	ldr	r1, [pc, #136]	; (8019a3c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 80199b4:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 80199b6:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 80199b8:	9504      	str	r5, [sp, #16]
 80199ba:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 80199bc:	f005 fb20 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 80199c0:	220c      	movs	r2, #12
 80199c2:	4b11      	ldr	r3, [pc, #68]	; (8019a08 <SD_Witer+0x318>)
 80199c4:	480d      	ldr	r0, [pc, #52]	; (80199fc <SD_Witer+0x30c>)
 80199c6:	eb0d 0102 	add.w	r1, sp, r2
 80199ca:	f7ee ff39 	bl	8008840 <f_write>
 80199ce:	e03f      	b.n	8019a50 <SD_Witer+0x360>
 80199d0:	66666666 	.word	0x66666666
 80199d4:	3fe66666 	.word	0x3fe66666
 80199d8:	2008acd9 	.word	0x2008acd9
 80199dc:	0802e6db 	.word	0x0802e6db
 80199e0:	0802e6df 	.word	0x0802e6df
 80199e4:	0802e6e3 	.word	0x0802e6e3
 80199e8:	2008c854 	.word	0x2008c854
 80199ec:	2008d8a0 	.word	0x2008d8a0
 80199f0:	0802e6e8 	.word	0x0802e6e8
 80199f4:	2008d8a5 	.word	0x2008d8a5
 80199f8:	2008b820 	.word	0x2008b820
 80199fc:	2008c870 	.word	0x2008c870
 8019a00:	20004ce8 	.word	0x20004ce8
 8019a04:	3fe00000 	.word	0x3fe00000
 8019a08:	2008b818 	.word	0x2008b818
 8019a0c:	20000930 	.word	0x20000930
 8019a10:	2008fca8 	.word	0x2008fca8
 8019a14:	0802e6b7 	.word	0x0802e6b7
 8019a18:	20000449 	.word	0x20000449
 8019a1c:	0802e70e 	.word	0x0802e70e
 8019a20:	200004c5 	.word	0x200004c5
 8019a24:	0802e6ed 	.word	0x0802e6ed
 8019a28:	20000483 	.word	0x20000483
 8019a2c:	20000257 	.word	0x20000257
 8019a30:	2004fc00 	.word	0x2004fc00
 8019a34:	3f333333 	.word	0x3f333333
 8019a38:	2000061b 	.word	0x2000061b
 8019a3c:	0802e6f7 	.word	0x0802e6f7
 8019a40:	2008a7de 	.word	0x2008a7de
 8019a44:	2008a7f4 	.word	0x2008a7f4
 8019a48:	2008a7ec 	.word	0x2008a7ec
 8019a4c:	2008a7d8 	.word	0x2008a7d8
							memset(measure_buff, 0, 12);
 8019a50:	9503      	str	r5, [sp, #12]
 8019a52:	9504      	str	r5, [sp, #16]
 8019a54:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 8019a56:	4bb4      	ldr	r3, [pc, #720]	; (8019d28 <SD_Witer+0x638>)
 8019a58:	2c00      	cmp	r4, #0
 8019a5a:	f040 84b8 	bne.w	801a3ce <SD_Witer+0xcde>
 8019a5e:	49b3      	ldr	r1, [pc, #716]	; (8019d2c <SD_Witer+0x63c>)
 8019a60:	222a      	movs	r2, #42	; 0x2a
 8019a62:	48b3      	ldr	r0, [pc, #716]	; (8019d30 <SD_Witer+0x640>)
 8019a64:	f7ee feec 	bl	8008840 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 8019a68:	4baf      	ldr	r3, [pc, #700]	; (8019d28 <SD_Witer+0x638>)
 8019a6a:	48b1      	ldr	r0, [pc, #708]	; (8019d30 <SD_Witer+0x640>)
 8019a6c:	2204      	movs	r2, #4
 8019a6e:	a902      	add	r1, sp, #8
 8019a70:	f7ee fee6 	bl	8008840 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 8019a74:	4bac      	ldr	r3, [pc, #688]	; (8019d28 <SD_Witer+0x638>)
 8019a76:	2c00      	cmp	r4, #0
 8019a78:	f040 84ad 	bne.w	801a3d6 <SD_Witer+0xce6>
 8019a7c:	49ad      	ldr	r1, [pc, #692]	; (8019d34 <SD_Witer+0x644>)
 8019a7e:	2235      	movs	r2, #53	; 0x35
 8019a80:	48ab      	ldr	r0, [pc, #684]	; (8019d30 <SD_Witer+0x640>)
 8019a82:	f7ee fedd 	bl	8008840 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 8019a86:	4bac      	ldr	r3, [pc, #688]	; (8019d38 <SD_Witer+0x648>)
 8019a88:	49ac      	ldr	r1, [pc, #688]	; (8019d3c <SD_Witer+0x64c>)
 8019a8a:	881a      	ldrh	r2, [r3, #0]
 8019a8c:	a803      	add	r0, sp, #12
 8019a8e:	f005 fab7 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019a92:	220c      	movs	r2, #12
 8019a94:	4ba4      	ldr	r3, [pc, #656]	; (8019d28 <SD_Witer+0x638>)
 8019a96:	48a6      	ldr	r0, [pc, #664]	; (8019d30 <SD_Witer+0x640>)
 8019a98:	eb0d 0102 	add.w	r1, sp, r2
 8019a9c:	f7ee fed0 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	9303      	str	r3, [sp, #12]
 8019aa4:	9304      	str	r3, [sp, #16]
 8019aa6:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 8019aa8:	4b9f      	ldr	r3, [pc, #636]	; (8019d28 <SD_Witer+0x638>)
 8019aaa:	2c00      	cmp	r4, #0
 8019aac:	f040 8497 	bne.w	801a3de <SD_Witer+0xcee>
 8019ab0:	49a3      	ldr	r1, [pc, #652]	; (8019d40 <SD_Witer+0x650>)
 8019ab2:	223b      	movs	r2, #59	; 0x3b
 8019ab4:	489e      	ldr	r0, [pc, #632]	; (8019d30 <SD_Witer+0x640>)
 8019ab6:	f7ee fec3 	bl	8008840 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 8019aba:	4ba2      	ldr	r3, [pc, #648]	; (8019d44 <SD_Witer+0x654>)
 8019abc:	499f      	ldr	r1, [pc, #636]	; (8019d3c <SD_Witer+0x64c>)
 8019abe:	881a      	ldrh	r2, [r3, #0]
 8019ac0:	a803      	add	r0, sp, #12
 8019ac2:	f005 fa9d 	bl	801f000 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ac6:	220c      	movs	r2, #12
 8019ac8:	4b97      	ldr	r3, [pc, #604]	; (8019d28 <SD_Witer+0x638>)
 8019aca:	4899      	ldr	r0, [pc, #612]	; (8019d30 <SD_Witer+0x640>)
 8019acc:	eb0d 0102 	add.w	r1, sp, r2
 8019ad0:	f7ee feb6 	bl	8008840 <f_write>
							memset(measure_buff, 0, 12);
 8019ad4:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 8019ad6:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 8019ada:	9303      	str	r3, [sp, #12]
 8019adc:	9304      	str	r3, [sp, #16]
 8019ade:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 8019ae0:	4b91      	ldr	r3, [pc, #580]	; (8019d28 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 8019ae2:	f040 8484 	bne.w	801a3ee <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 8019ae6:	2c00      	cmp	r4, #0
 8019ae8:	f040 847d 	bne.w	801a3e6 <SD_Witer+0xcf6>
 8019aec:	4996      	ldr	r1, [pc, #600]	; (8019d48 <SD_Witer+0x658>)
 8019aee:	2224      	movs	r2, #36	; 0x24
 8019af0:	488f      	ldr	r0, [pc, #572]	; (8019d30 <SD_Witer+0x640>)
 8019af2:	f7ee fea5 	bl	8008840 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 8019af6:	4b95      	ldr	r3, [pc, #596]	; (8019d4c <SD_Witer+0x65c>)
 8019af8:	4990      	ldr	r1, [pc, #576]	; (8019d3c <SD_Witer+0x64c>)
 8019afa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019afe:	a803      	add	r0, sp, #12
 8019b00:	f005 fa7e 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019b04:	220c      	movs	r2, #12
 8019b06:	4b88      	ldr	r3, [pc, #544]	; (8019d28 <SD_Witer+0x638>)
 8019b08:	4889      	ldr	r0, [pc, #548]	; (8019d30 <SD_Witer+0x640>)
 8019b0a:	eb0d 0102 	add.w	r1, sp, r2
 8019b0e:	f7ee fe97 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 8019b12:	2300      	movs	r3, #0
 8019b14:	9303      	str	r3, [sp, #12]
 8019b16:	9304      	str	r3, [sp, #16]
 8019b18:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 8019b1a:	a181      	add	r1, pc, #516	; (adr r1, 8019d20 <SD_Witer+0x630>)
 8019b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b20:	4b8b      	ldr	r3, [pc, #556]	; (8019d50 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019b22:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8019d54 <SD_Witer+0x664>
 8019b26:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8019da0 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 8019b2a:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019b2e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019b32:	2055      	movs	r0, #85	; 0x55
 8019b34:	f7fa fc92 	bl	801445c <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 8019b38:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 8019b3a:	4b7b      	ldr	r3, [pc, #492]	; (8019d28 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 8019b3c:	f040 847d 	bne.w	801a43a <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 8019b40:	2c00      	cmp	r4, #0
 8019b42:	f040 8465 	bne.w	801a410 <SD_Witer+0xd20>
 8019b46:	4984      	ldr	r1, [pc, #528]	; (8019d58 <SD_Witer+0x668>)
 8019b48:	2263      	movs	r2, #99	; 0x63
 8019b4a:	4879      	ldr	r0, [pc, #484]	; (8019d30 <SD_Witer+0x640>)
 8019b4c:	4f83      	ldr	r7, [pc, #524]	; (8019d5c <SD_Witer+0x66c>)
 8019b4e:	f8df b254 	ldr.w	fp, [pc, #596]	; 8019da4 <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019b52:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8019d28 <SD_Witer+0x638>
 8019b56:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8019d30 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 8019b5a:	f7ee fe71 	bl	8008840 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 8019b5e:	f857 0b04 	ldr.w	r0, [r7], #4
 8019b62:	f7e6 fd01 	bl	8000568 <__aeabi_f2d>
 8019b66:	4602      	mov	r2, r0
 8019b68:	460b      	mov	r3, r1
 8019b6a:	a803      	add	r0, sp, #12
 8019b6c:	497c      	ldr	r1, [pc, #496]	; (8019d60 <SD_Witer+0x670>)
 8019b6e:	f005 fa47 	bl	801f000 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019b72:	220c      	movs	r2, #12
 8019b74:	4653      	mov	r3, sl
 8019b76:	eb0d 0102 	add.w	r1, sp, r2
 8019b7a:	4648      	mov	r0, r9
 8019b7c:	f7ee fe60 	bl	8008840 <f_write>
									memset(measure_buff, 0, 12);
 8019b80:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 8019b82:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 8019b86:	9503      	str	r5, [sp, #12]
 8019b88:	9504      	str	r5, [sp, #16]
 8019b8a:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 8019b8c:	f7e6 fcec 	bl	8000568 <__aeabi_f2d>
 8019b90:	4602      	mov	r2, r0
 8019b92:	460b      	mov	r3, r1
 8019b94:	a803      	add	r0, sp, #12
 8019b96:	4973      	ldr	r1, [pc, #460]	; (8019d64 <SD_Witer+0x674>)
 8019b98:	f005 fa32 	bl	801f000 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019b9c:	220c      	movs	r2, #12
 8019b9e:	4653      	mov	r3, sl
 8019ba0:	eb0d 0102 	add.w	r1, sp, r2
 8019ba4:	4648      	mov	r0, r9
 8019ba6:	f7ee fe4b 	bl	8008840 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 8019baa:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 8019bac:	9503      	str	r5, [sp, #12]
 8019bae:	9504      	str	r5, [sp, #16]
 8019bb0:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 8019bb2:	d1d4      	bne.n	8019b5e <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 8019bb4:	4b5c      	ldr	r3, [pc, #368]	; (8019d28 <SD_Witer+0x638>)
 8019bb6:	2c00      	cmp	r4, #0
 8019bb8:	f040 842e 	bne.w	801a418 <SD_Witer+0xd28>
 8019bbc:	496a      	ldr	r1, [pc, #424]	; (8019d68 <SD_Witer+0x678>)
 8019bbe:	2224      	movs	r2, #36	; 0x24
 8019bc0:	485b      	ldr	r0, [pc, #364]	; (8019d30 <SD_Witer+0x640>)
 8019bc2:	f7ee fe3d 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 8019bc6:	4b69      	ldr	r3, [pc, #420]	; (8019d6c <SD_Witer+0x67c>)
 8019bc8:	6818      	ldr	r0, [r3, #0]
 8019bca:	f7e6 fccd 	bl	8000568 <__aeabi_f2d>
 8019bce:	4602      	mov	r2, r0
 8019bd0:	460b      	mov	r3, r1
 8019bd2:	a803      	add	r0, sp, #12
 8019bd4:	4966      	ldr	r1, [pc, #408]	; (8019d70 <SD_Witer+0x680>)
 8019bd6:	f005 fa13 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019bda:	220c      	movs	r2, #12
 8019bdc:	4b52      	ldr	r3, [pc, #328]	; (8019d28 <SD_Witer+0x638>)
 8019bde:	4854      	ldr	r0, [pc, #336]	; (8019d30 <SD_Witer+0x640>)
 8019be0:	eb0d 0102 	add.w	r1, sp, r2
 8019be4:	f7ee fe2c 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 8019be8:	2300      	movs	r3, #0
 8019bea:	9303      	str	r3, [sp, #12]
 8019bec:	9304      	str	r3, [sp, #16]
 8019bee:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 8019bf0:	4b4d      	ldr	r3, [pc, #308]	; (8019d28 <SD_Witer+0x638>)
 8019bf2:	2c00      	cmp	r4, #0
 8019bf4:	f040 8414 	bne.w	801a420 <SD_Witer+0xd30>
 8019bf8:	495e      	ldr	r1, [pc, #376]	; (8019d74 <SD_Witer+0x684>)
 8019bfa:	2221      	movs	r2, #33	; 0x21
 8019bfc:	484c      	ldr	r0, [pc, #304]	; (8019d30 <SD_Witer+0x640>)
 8019bfe:	f7ee fe1f 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 8019c02:	4b5d      	ldr	r3, [pc, #372]	; (8019d78 <SD_Witer+0x688>)
 8019c04:	6818      	ldr	r0, [r3, #0]
 8019c06:	f7e6 fcaf 	bl	8000568 <__aeabi_f2d>
 8019c0a:	4602      	mov	r2, r0
 8019c0c:	460b      	mov	r3, r1
 8019c0e:	a803      	add	r0, sp, #12
 8019c10:	495a      	ldr	r1, [pc, #360]	; (8019d7c <SD_Witer+0x68c>)
 8019c12:	f005 f9f5 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019c16:	220c      	movs	r2, #12
 8019c18:	4b43      	ldr	r3, [pc, #268]	; (8019d28 <SD_Witer+0x638>)
 8019c1a:	4845      	ldr	r0, [pc, #276]	; (8019d30 <SD_Witer+0x640>)
 8019c1c:	eb0d 0102 	add.w	r1, sp, r2
 8019c20:	f7ee fe0e 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 8019c24:	2300      	movs	r3, #0
 8019c26:	9303      	str	r3, [sp, #12]
 8019c28:	9304      	str	r3, [sp, #16]
 8019c2a:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 8019c2c:	4b3e      	ldr	r3, [pc, #248]	; (8019d28 <SD_Witer+0x638>)
 8019c2e:	2c00      	cmp	r4, #0
 8019c30:	f040 83fa 	bne.w	801a428 <SD_Witer+0xd38>
 8019c34:	4952      	ldr	r1, [pc, #328]	; (8019d80 <SD_Witer+0x690>)
 8019c36:	2223      	movs	r2, #35	; 0x23
 8019c38:	483d      	ldr	r0, [pc, #244]	; (8019d30 <SD_Witer+0x640>)
 8019c3a:	f7ee fe01 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 8019c3e:	4b51      	ldr	r3, [pc, #324]	; (8019d84 <SD_Witer+0x694>)
 8019c40:	6818      	ldr	r0, [r3, #0]
 8019c42:	f7e6 fc91 	bl	8000568 <__aeabi_f2d>
 8019c46:	4602      	mov	r2, r0
 8019c48:	460b      	mov	r3, r1
 8019c4a:	a803      	add	r0, sp, #12
 8019c4c:	4948      	ldr	r1, [pc, #288]	; (8019d70 <SD_Witer+0x680>)
 8019c4e:	f005 f9d7 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019c52:	220c      	movs	r2, #12
 8019c54:	4b34      	ldr	r3, [pc, #208]	; (8019d28 <SD_Witer+0x638>)
 8019c56:	4836      	ldr	r0, [pc, #216]	; (8019d30 <SD_Witer+0x640>)
 8019c58:	eb0d 0102 	add.w	r1, sp, r2
 8019c5c:	f7ee fdf0 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 8019c60:	2300      	movs	r3, #0
 8019c62:	9303      	str	r3, [sp, #12]
 8019c64:	9304      	str	r3, [sp, #16]
 8019c66:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 8019c68:	4b2f      	ldr	r3, [pc, #188]	; (8019d28 <SD_Witer+0x638>)
 8019c6a:	2c00      	cmp	r4, #0
 8019c6c:	f040 83df 	bne.w	801a42e <SD_Witer+0xd3e>
 8019c70:	4945      	ldr	r1, [pc, #276]	; (8019d88 <SD_Witer+0x698>)
 8019c72:	2239      	movs	r2, #57	; 0x39
 8019c74:	482e      	ldr	r0, [pc, #184]	; (8019d30 <SD_Witer+0x640>)
 8019c76:	f7ee fde3 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 8019c7a:	4b44      	ldr	r3, [pc, #272]	; (8019d8c <SD_Witer+0x69c>)
 8019c7c:	6818      	ldr	r0, [r3, #0]
 8019c7e:	f7e6 fc73 	bl	8000568 <__aeabi_f2d>
 8019c82:	4602      	mov	r2, r0
 8019c84:	460b      	mov	r3, r1
 8019c86:	a803      	add	r0, sp, #12
 8019c88:	4941      	ldr	r1, [pc, #260]	; (8019d90 <SD_Witer+0x6a0>)
 8019c8a:	f005 f9b9 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019c8e:	220c      	movs	r2, #12
 8019c90:	eb0d 0102 	add.w	r1, sp, r2
 8019c94:	4b24      	ldr	r3, [pc, #144]	; (8019d28 <SD_Witer+0x638>)
 8019c96:	4826      	ldr	r0, [pc, #152]	; (8019d30 <SD_Witer+0x640>)
 8019c98:	f7ee fdd2 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 8019c9c:	4b3d      	ldr	r3, [pc, #244]	; (8019d94 <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 8019c9e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 8019ca0:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 8019ca2:	9503      	str	r5, [sp, #12]
 8019ca4:	9504      	str	r5, [sp, #16]
 8019ca6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 8019ca8:	f7e6 fc5e 	bl	8000568 <__aeabi_f2d>
 8019cac:	4602      	mov	r2, r0
 8019cae:	460b      	mov	r3, r1
 8019cb0:	a803      	add	r0, sp, #12
 8019cb2:	4937      	ldr	r1, [pc, #220]	; (8019d90 <SD_Witer+0x6a0>)
 8019cb4:	f005 f9a4 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019cb8:	220c      	movs	r2, #12
 8019cba:	eb0d 0102 	add.w	r1, sp, r2
 8019cbe:	4b1a      	ldr	r3, [pc, #104]	; (8019d28 <SD_Witer+0x638>)
 8019cc0:	481b      	ldr	r0, [pc, #108]	; (8019d30 <SD_Witer+0x640>)
 8019cc2:	f7ee fdbd 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 8019cc6:	4b34      	ldr	r3, [pc, #208]	; (8019d98 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 8019cc8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 8019cca:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 8019ccc:	9504      	str	r5, [sp, #16]
 8019cce:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 8019cd0:	f7e6 fc4a 	bl	8000568 <__aeabi_f2d>
 8019cd4:	4602      	mov	r2, r0
 8019cd6:	460b      	mov	r3, r1
 8019cd8:	a803      	add	r0, sp, #12
 8019cda:	492d      	ldr	r1, [pc, #180]	; (8019d90 <SD_Witer+0x6a0>)
 8019cdc:	f005 f990 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ce0:	220c      	movs	r2, #12
 8019ce2:	eb0d 0102 	add.w	r1, sp, r2
 8019ce6:	4b10      	ldr	r3, [pc, #64]	; (8019d28 <SD_Witer+0x638>)
 8019ce8:	4811      	ldr	r0, [pc, #68]	; (8019d30 <SD_Witer+0x640>)
 8019cea:	f7ee fda9 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 8019cee:	4b2b      	ldr	r3, [pc, #172]	; (8019d9c <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 8019cf0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 8019cf2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 8019cf4:	9504      	str	r5, [sp, #16]
 8019cf6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 8019cf8:	f7e6 fc36 	bl	8000568 <__aeabi_f2d>
 8019cfc:	4602      	mov	r2, r0
 8019cfe:	460b      	mov	r3, r1
 8019d00:	a803      	add	r0, sp, #12
 8019d02:	4923      	ldr	r1, [pc, #140]	; (8019d90 <SD_Witer+0x6a0>)
 8019d04:	f005 f97c 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d08:	220c      	movs	r2, #12
 8019d0a:	4b07      	ldr	r3, [pc, #28]	; (8019d28 <SD_Witer+0x638>)
 8019d0c:	4808      	ldr	r0, [pc, #32]	; (8019d30 <SD_Witer+0x640>)
 8019d0e:	eb0d 0102 	add.w	r1, sp, r2
 8019d12:	f7ee fd95 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 8019d16:	9503      	str	r5, [sp, #12]
 8019d18:	9504      	str	r5, [sp, #16]
 8019d1a:	9505      	str	r5, [sp, #20]
 8019d1c:	e044      	b.n	8019da8 <SD_Witer+0x6b8>
 8019d1e:	bf00      	nop
 8019d20:	9999999a 	.word	0x9999999a
 8019d24:	3fe99999 	.word	0x3fe99999
 8019d28:	2008b818 	.word	0x2008b818
 8019d2c:	200008e8 	.word	0x200008e8
 8019d30:	2008c870 	.word	0x2008c870
 8019d34:	20000a10 	.word	0x20000a10
 8019d38:	2008ffd0 	.word	0x2008ffd0
 8019d3c:	0802e70e 	.word	0x0802e70e
 8019d40:	200009bb 	.word	0x200009bb
 8019d44:	2008feec 	.word	0x2008feec
 8019d48:	20000978 	.word	0x20000978
 8019d4c:	2008acd6 	.word	0x2008acd6
 8019d50:	20004ce8 	.word	0x20004ce8
 8019d54:	3f4ccccd 	.word	0x3f4ccccd
 8019d58:	20000570 	.word	0x20000570
 8019d5c:	200077fc 	.word	0x200077fc
 8019d60:	0802e6fb 	.word	0x0802e6fb
 8019d64:	0802e700 	.word	0x0802e700
 8019d68:	20000527 	.word	0x20000527
 8019d6c:	2009015c 	.word	0x2009015c
 8019d70:	0802e6b2 	.word	0x0802e6b2
 8019d74:	200005e5 	.word	0x200005e5
 8019d78:	2008fbfc 	.word	0x2008fbfc
 8019d7c:	0802e6ad 	.word	0x0802e6ad
 8019d80:	20000819 	.word	0x20000819
 8019d84:	2008fc04 	.word	0x2008fc04
 8019d88:	200007cd 	.word	0x200007cd
 8019d8c:	2008fcac 	.word	0x2008fcac
 8019d90:	0802e707 	.word	0x0802e707
 8019d94:	20090038 	.word	0x20090038
 8019d98:	2008ff6c 	.word	0x2008ff6c
 8019d9c:	2008fc00 	.word	0x2008fc00
 8019da0:	200087fc 	.word	0x200087fc
 8019da4:	2004fc04 	.word	0x2004fc04
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 8019da8:	4baf      	ldr	r3, [pc, #700]	; (801a068 <SD_Witer+0x978>)
 8019daa:	2c00      	cmp	r4, #0
 8019dac:	f040 8342 	bne.w	801a434 <SD_Witer+0xd44>
 8019db0:	49ae      	ldr	r1, [pc, #696]	; (801a06c <SD_Witer+0x97c>)
 8019db2:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 8019db4:	48ae      	ldr	r0, [pc, #696]	; (801a070 <SD_Witer+0x980>)
 8019db6:	f7ee fd43 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 8019dba:	4bae      	ldr	r3, [pc, #696]	; (801a074 <SD_Witer+0x984>)
 8019dbc:	6818      	ldr	r0, [r3, #0]
 8019dbe:	f7e6 fbd3 	bl	8000568 <__aeabi_f2d>
 8019dc2:	4602      	mov	r2, r0
 8019dc4:	460b      	mov	r3, r1
 8019dc6:	a803      	add	r0, sp, #12
 8019dc8:	49ab      	ldr	r1, [pc, #684]	; (801a078 <SD_Witer+0x988>)
 8019dca:	f005 f919 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019dce:	220c      	movs	r2, #12
 8019dd0:	eb0d 0102 	add.w	r1, sp, r2
 8019dd4:	4ba4      	ldr	r3, [pc, #656]	; (801a068 <SD_Witer+0x978>)
 8019dd6:	48a6      	ldr	r0, [pc, #664]	; (801a070 <SD_Witer+0x980>)
 8019dd8:	f7ee fd32 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 8019ddc:	4ba7      	ldr	r3, [pc, #668]	; (801a07c <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 8019dde:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 8019de0:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 8019de2:	9503      	str	r5, [sp, #12]
 8019de4:	9504      	str	r5, [sp, #16]
 8019de6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 8019de8:	f7e6 fbbe 	bl	8000568 <__aeabi_f2d>
 8019dec:	4602      	mov	r2, r0
 8019dee:	460b      	mov	r3, r1
 8019df0:	a803      	add	r0, sp, #12
 8019df2:	49a3      	ldr	r1, [pc, #652]	; (801a080 <SD_Witer+0x990>)
 8019df4:	f005 f904 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019df8:	220c      	movs	r2, #12
 8019dfa:	eb0d 0102 	add.w	r1, sp, r2
 8019dfe:	4b9a      	ldr	r3, [pc, #616]	; (801a068 <SD_Witer+0x978>)
 8019e00:	489b      	ldr	r0, [pc, #620]	; (801a070 <SD_Witer+0x980>)
 8019e02:	f7ee fd1d 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 8019e06:	a196      	add	r1, pc, #600	; (adr r1, 801a060 <SD_Witer+0x970>)
 8019e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e0c:	4b9d      	ldr	r3, [pc, #628]	; (801a084 <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019e0e:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801a088 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 8019e12:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 8019e14:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019e18:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019e1c:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 8019e1e:	9504      	str	r5, [sp, #16]
 8019e20:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019e22:	f7fa fb1b 	bl	801445c <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 8019e26:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019e2a:	2b01      	cmp	r3, #1
 8019e2c:	f040 824d 	bne.w	801a2ca <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 8019e30:	4b8d      	ldr	r3, [pc, #564]	; (801a068 <SD_Witer+0x978>)
 8019e32:	2c00      	cmp	r4, #0
 8019e34:	f040 8407 	bne.w	801a646 <SD_Witer+0xf56>
 8019e38:	4994      	ldr	r1, [pc, #592]	; (801a08c <SD_Witer+0x99c>)
 8019e3a:	227d      	movs	r2, #125	; 0x7d
 8019e3c:	488c      	ldr	r0, [pc, #560]	; (801a070 <SD_Witer+0x980>)
 8019e3e:	f7ee fcff 	bl	8008840 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 8019e42:	2297      	movs	r2, #151	; 0x97
 8019e44:	4992      	ldr	r1, [pc, #584]	; (801a090 <SD_Witer+0x9a0>)
 8019e46:	a803      	add	r0, sp, #12
 8019e48:	f005 f8da 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e4c:	220c      	movs	r2, #12
 8019e4e:	4b86      	ldr	r3, [pc, #536]	; (801a068 <SD_Witer+0x978>)
 8019e50:	4887      	ldr	r0, [pc, #540]	; (801a070 <SD_Witer+0x980>)
 8019e52:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 8019e56:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e58:	f7ee fcf2 	bl	8008840 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 8019e5c:	22e7      	movs	r2, #231	; 0xe7
 8019e5e:	498d      	ldr	r1, [pc, #564]	; (801a094 <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 8019e60:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 8019e62:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019e64:	9504      	str	r5, [sp, #16]
 8019e66:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 8019e68:	f005 f8ca 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e6c:	220c      	movs	r2, #12
 8019e6e:	4b7e      	ldr	r3, [pc, #504]	; (801a068 <SD_Witer+0x978>)
 8019e70:	487f      	ldr	r0, [pc, #508]	; (801a070 <SD_Witer+0x980>)
 8019e72:	eb0d 0102 	add.w	r1, sp, r2
 8019e76:	f7ee fce3 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 8019e7a:	220d      	movs	r2, #13
 8019e7c:	4986      	ldr	r1, [pc, #536]	; (801a098 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 8019e7e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 8019e80:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019e82:	9504      	str	r5, [sp, #16]
 8019e84:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 8019e86:	f005 f8bb 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e8a:	220c      	movs	r2, #12
 8019e8c:	4b76      	ldr	r3, [pc, #472]	; (801a068 <SD_Witer+0x978>)
 8019e8e:	4878      	ldr	r0, [pc, #480]	; (801a070 <SD_Witer+0x980>)
 8019e90:	eb0d 0102 	add.w	r1, sp, r2
 8019e94:	f7ee fcd4 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 8019e98:	221d      	movs	r2, #29
 8019e9a:	497d      	ldr	r1, [pc, #500]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019e9c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 8019e9e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019ea0:	9504      	str	r5, [sp, #16]
 8019ea2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 8019ea4:	f005 f8ac 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ea8:	220c      	movs	r2, #12
 8019eaa:	4b6f      	ldr	r3, [pc, #444]	; (801a068 <SD_Witer+0x978>)
 8019eac:	4870      	ldr	r0, [pc, #448]	; (801a070 <SD_Witer+0x980>)
 8019eae:	eb0d 0102 	add.w	r1, sp, r2
 8019eb2:	f7ee fcc5 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 8019eb6:	2231      	movs	r2, #49	; 0x31
 8019eb8:	4975      	ldr	r1, [pc, #468]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019eba:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 8019ebc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019ebe:	9504      	str	r5, [sp, #16]
 8019ec0:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 8019ec2:	f005 f89d 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ec6:	220c      	movs	r2, #12
 8019ec8:	4b67      	ldr	r3, [pc, #412]	; (801a068 <SD_Witer+0x978>)
 8019eca:	4869      	ldr	r0, [pc, #420]	; (801a070 <SD_Witer+0x980>)
 8019ecc:	eb0d 0102 	add.w	r1, sp, r2
 8019ed0:	f7ee fcb6 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 8019ed4:	222c      	movs	r2, #44	; 0x2c
 8019ed6:	496e      	ldr	r1, [pc, #440]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019ed8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 8019eda:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019edc:	9504      	str	r5, [sp, #16]
 8019ede:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 8019ee0:	f005 f88e 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ee4:	220c      	movs	r2, #12
 8019ee6:	4b60      	ldr	r3, [pc, #384]	; (801a068 <SD_Witer+0x978>)
 8019ee8:	4861      	ldr	r0, [pc, #388]	; (801a070 <SD_Witer+0x980>)
 8019eea:	eb0d 0102 	add.w	r1, sp, r2
 8019eee:	f7ee fca7 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 8019ef2:	2237      	movs	r2, #55	; 0x37
 8019ef4:	4966      	ldr	r1, [pc, #408]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019ef6:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 8019ef8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019efa:	9504      	str	r5, [sp, #16]
 8019efc:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 8019efe:	f005 f87f 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f02:	220c      	movs	r2, #12
 8019f04:	4b58      	ldr	r3, [pc, #352]	; (801a068 <SD_Witer+0x978>)
 8019f06:	485a      	ldr	r0, [pc, #360]	; (801a070 <SD_Witer+0x980>)
 8019f08:	eb0d 0102 	add.w	r1, sp, r2
 8019f0c:	f7ee fc98 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 8019f10:	2244      	movs	r2, #68	; 0x44
 8019f12:	495f      	ldr	r1, [pc, #380]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019f14:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 8019f16:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019f18:	9504      	str	r5, [sp, #16]
 8019f1a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 8019f1c:	f005 f870 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f20:	220c      	movs	r2, #12
 8019f22:	4b51      	ldr	r3, [pc, #324]	; (801a068 <SD_Witer+0x978>)
 8019f24:	4852      	ldr	r0, [pc, #328]	; (801a070 <SD_Witer+0x980>)
 8019f26:	eb0d 0102 	add.w	r1, sp, r2
 8019f2a:	f7ee fc89 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 8019f2e:	224f      	movs	r2, #79	; 0x4f
 8019f30:	4957      	ldr	r1, [pc, #348]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019f32:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 8019f34:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019f36:	9504      	str	r5, [sp, #16]
 8019f38:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 8019f3a:	f005 f861 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f3e:	220c      	movs	r2, #12
 8019f40:	4b49      	ldr	r3, [pc, #292]	; (801a068 <SD_Witer+0x978>)
 8019f42:	484b      	ldr	r0, [pc, #300]	; (801a070 <SD_Witer+0x980>)
 8019f44:	eb0d 0102 	add.w	r1, sp, r2
 8019f48:	f7ee fc7a 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 8019f4c:	2258      	movs	r2, #88	; 0x58
 8019f4e:	4950      	ldr	r1, [pc, #320]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019f50:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 8019f52:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019f54:	9504      	str	r5, [sp, #16]
 8019f56:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 8019f58:	f005 f852 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f5c:	220c      	movs	r2, #12
 8019f5e:	4b42      	ldr	r3, [pc, #264]	; (801a068 <SD_Witer+0x978>)
 8019f60:	4843      	ldr	r0, [pc, #268]	; (801a070 <SD_Witer+0x980>)
 8019f62:	eb0d 0102 	add.w	r1, sp, r2
 8019f66:	f7ee fc6b 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 8019f6a:	2262      	movs	r2, #98	; 0x62
 8019f6c:	4948      	ldr	r1, [pc, #288]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019f6e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 8019f70:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019f72:	9504      	str	r5, [sp, #16]
 8019f74:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 8019f76:	f005 f843 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f7a:	220c      	movs	r2, #12
 8019f7c:	4b3a      	ldr	r3, [pc, #232]	; (801a068 <SD_Witer+0x978>)
 8019f7e:	483c      	ldr	r0, [pc, #240]	; (801a070 <SD_Witer+0x980>)
 8019f80:	eb0d 0102 	add.w	r1, sp, r2
 8019f84:	f7ee fc5c 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 8019f88:	2269      	movs	r2, #105	; 0x69
 8019f8a:	4941      	ldr	r1, [pc, #260]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019f8c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 8019f8e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019f90:	9504      	str	r5, [sp, #16]
 8019f92:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 8019f94:	f005 f834 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f98:	220c      	movs	r2, #12
 8019f9a:	4b33      	ldr	r3, [pc, #204]	; (801a068 <SD_Witer+0x978>)
 8019f9c:	4834      	ldr	r0, [pc, #208]	; (801a070 <SD_Witer+0x980>)
 8019f9e:	eb0d 0102 	add.w	r1, sp, r2
 8019fa2:	f7ee fc4d 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 8019fa6:	2270      	movs	r2, #112	; 0x70
 8019fa8:	4939      	ldr	r1, [pc, #228]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019faa:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 8019fac:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019fae:	9504      	str	r5, [sp, #16]
 8019fb0:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 8019fb2:	f005 f825 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019fb6:	220c      	movs	r2, #12
 8019fb8:	4b2b      	ldr	r3, [pc, #172]	; (801a068 <SD_Witer+0x978>)
 8019fba:	482d      	ldr	r0, [pc, #180]	; (801a070 <SD_Witer+0x980>)
 8019fbc:	eb0d 0102 	add.w	r1, sp, r2
 8019fc0:	f7ee fc3e 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 8019fc4:	227f      	movs	r2, #127	; 0x7f
 8019fc6:	4932      	ldr	r1, [pc, #200]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019fc8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 8019fca:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019fcc:	9504      	str	r5, [sp, #16]
 8019fce:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 8019fd0:	f005 f816 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019fd4:	220c      	movs	r2, #12
 8019fd6:	4b24      	ldr	r3, [pc, #144]	; (801a068 <SD_Witer+0x978>)
 8019fd8:	4825      	ldr	r0, [pc, #148]	; (801a070 <SD_Witer+0x980>)
 8019fda:	eb0d 0102 	add.w	r1, sp, r2
 8019fde:	f7ee fc2f 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 8019fe2:	2285      	movs	r2, #133	; 0x85
 8019fe4:	492a      	ldr	r1, [pc, #168]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 8019fe6:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 8019fe8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 8019fea:	9504      	str	r5, [sp, #16]
 8019fec:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 8019fee:	f005 f807 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ff2:	220c      	movs	r2, #12
 8019ff4:	4b1c      	ldr	r3, [pc, #112]	; (801a068 <SD_Witer+0x978>)
 8019ff6:	481e      	ldr	r0, [pc, #120]	; (801a070 <SD_Witer+0x980>)
 8019ff8:	eb0d 0102 	add.w	r1, sp, r2
 8019ffc:	f7ee fc20 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801a000:	2294      	movs	r2, #148	; 0x94
 801a002:	4923      	ldr	r1, [pc, #140]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a004:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801a006:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a008:	9504      	str	r5, [sp, #16]
 801a00a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801a00c:	f004 fff8 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a010:	220c      	movs	r2, #12
 801a012:	4b15      	ldr	r3, [pc, #84]	; (801a068 <SD_Witer+0x978>)
 801a014:	4816      	ldr	r0, [pc, #88]	; (801a070 <SD_Witer+0x980>)
 801a016:	eb0d 0102 	add.w	r1, sp, r2
 801a01a:	f7ee fc11 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801a01e:	2298      	movs	r2, #152	; 0x98
 801a020:	491b      	ldr	r1, [pc, #108]	; (801a090 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a022:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801a024:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a026:	9504      	str	r5, [sp, #16]
 801a028:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801a02a:	f004 ffe9 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a02e:	220c      	movs	r2, #12
 801a030:	4b0d      	ldr	r3, [pc, #52]	; (801a068 <SD_Witer+0x978>)
 801a032:	480f      	ldr	r0, [pc, #60]	; (801a070 <SD_Witer+0x980>)
 801a034:	eb0d 0102 	add.w	r1, sp, r2
 801a038:	f7ee fc02 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 801a03c:	9503      	str	r5, [sp, #12]
 801a03e:	9504      	str	r5, [sp, #16]
 801a040:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a042:	4b09      	ldr	r3, [pc, #36]	; (801a068 <SD_Witer+0x978>)
 801a044:	2c00      	cmp	r4, #0
 801a046:	f040 8302 	bne.w	801a64e <SD_Witer+0xf5e>
 801a04a:	4914      	ldr	r1, [pc, #80]	; (801a09c <SD_Witer+0x9ac>)
 801a04c:	227f      	movs	r2, #127	; 0x7f
 801a04e:	4808      	ldr	r0, [pc, #32]	; (801a070 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a050:	4d13      	ldr	r5, [pc, #76]	; (801a0a0 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a052:	f7ee fbf5 	bl	8008840 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801a056:	4b13      	ldr	r3, [pc, #76]	; (801a0a4 <SD_Witer+0x9b4>)
 801a058:	e026      	b.n	801a0a8 <SD_Witer+0x9b8>
 801a05a:	bf00      	nop
 801a05c:	f3af 8000 	nop.w
 801a060:	cccccccd 	.word	0xcccccccd
 801a064:	3feccccc 	.word	0x3feccccc
 801a068:	2008b818 	.word	0x2008b818
 801a06c:	20000502 	.word	0x20000502
 801a070:	2008c870 	.word	0x2008c870
 801a074:	20090154 	.word	0x20090154
 801a078:	0802e707 	.word	0x0802e707
 801a07c:	20090158 	.word	0x20090158
 801a080:	0802e6b2 	.word	0x0802e6b2
 801a084:	20004ce8 	.word	0x20004ce8
 801a088:	3f666666 	.word	0x3f666666
 801a08c:	200003ba 	.word	0x200003ba
 801a090:	0802e70e 	.word	0x0802e70e
 801a094:	080215d9 	.word	0x080215d9
 801a098:	0802e70d 	.word	0x0802e70d
 801a09c:	200002d0 	.word	0x200002d0
 801a0a0:	20002b9c 	.word	0x20002b9c
 801a0a4:	20002bab 	.word	0x20002bab
 801a0a8:	49a8      	ldr	r1, [pc, #672]	; (801a34c <SD_Witer+0xc5c>)
 801a0aa:	781a      	ldrb	r2, [r3, #0]
 801a0ac:	a803      	add	r0, sp, #12
 801a0ae:	f004 ffa7 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a0b2:	220c      	movs	r2, #12
 801a0b4:	eb0d 0102 	add.w	r1, sp, r2
 801a0b8:	4ba5      	ldr	r3, [pc, #660]	; (801a350 <SD_Witer+0xc60>)
 801a0ba:	48a6      	ldr	r0, [pc, #664]	; (801a354 <SD_Witer+0xc64>)
 801a0bc:	f7ee fbc0 	bl	8008840 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a0c0:	4ba5      	ldr	r3, [pc, #660]	; (801a358 <SD_Witer+0xc68>)
 801a0c2:	49a2      	ldr	r1, [pc, #648]	; (801a34c <SD_Witer+0xc5c>)
 801a0c4:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801a0c6:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a0c8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a0ca:	9403      	str	r4, [sp, #12]
 801a0cc:	9404      	str	r4, [sp, #16]
 801a0ce:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a0d0:	f004 ff96 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a0d4:	220c      	movs	r2, #12
 801a0d6:	eb0d 0102 	add.w	r1, sp, r2
 801a0da:	4b9d      	ldr	r3, [pc, #628]	; (801a350 <SD_Witer+0xc60>)
 801a0dc:	489d      	ldr	r0, [pc, #628]	; (801a354 <SD_Witer+0xc64>)
 801a0de:	f7ee fbaf 	bl	8008840 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801a0e2:	4b9e      	ldr	r3, [pc, #632]	; (801a35c <SD_Witer+0xc6c>)
 801a0e4:	499e      	ldr	r1, [pc, #632]	; (801a360 <SD_Witer+0xc70>)
 801a0e6:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801a0e8:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801a0ea:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a0ec:	9404      	str	r4, [sp, #16]
 801a0ee:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801a0f0:	f004 ff86 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a0f4:	220c      	movs	r2, #12
 801a0f6:	4b96      	ldr	r3, [pc, #600]	; (801a350 <SD_Witer+0xc60>)
 801a0f8:	4896      	ldr	r0, [pc, #600]	; (801a354 <SD_Witer+0xc64>)
 801a0fa:	eb0d 0102 	add.w	r1, sp, r2
 801a0fe:	f7ee fb9f 	bl	8008840 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a102:	782a      	ldrb	r2, [r5, #0]
 801a104:	4997      	ldr	r1, [pc, #604]	; (801a364 <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801a106:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a108:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a10a:	9404      	str	r4, [sp, #16]
 801a10c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a10e:	f004 ff77 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a112:	220c      	movs	r2, #12
 801a114:	4b8e      	ldr	r3, [pc, #568]	; (801a350 <SD_Witer+0xc60>)
 801a116:	488f      	ldr	r0, [pc, #572]	; (801a354 <SD_Witer+0xc64>)
 801a118:	eb0d 0102 	add.w	r1, sp, r2
 801a11c:	f7ee fb90 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a120:	786a      	ldrb	r2, [r5, #1]
 801a122:	498a      	ldr	r1, [pc, #552]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a124:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a126:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a128:	9404      	str	r4, [sp, #16]
 801a12a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a12c:	f004 ff68 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a130:	220c      	movs	r2, #12
 801a132:	4b87      	ldr	r3, [pc, #540]	; (801a350 <SD_Witer+0xc60>)
 801a134:	4887      	ldr	r0, [pc, #540]	; (801a354 <SD_Witer+0xc64>)
 801a136:	eb0d 0102 	add.w	r1, sp, r2
 801a13a:	f7ee fb81 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a13e:	78aa      	ldrb	r2, [r5, #2]
 801a140:	4982      	ldr	r1, [pc, #520]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a142:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a144:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a146:	9404      	str	r4, [sp, #16]
 801a148:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a14a:	f004 ff59 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a14e:	220c      	movs	r2, #12
 801a150:	4b7f      	ldr	r3, [pc, #508]	; (801a350 <SD_Witer+0xc60>)
 801a152:	4880      	ldr	r0, [pc, #512]	; (801a354 <SD_Witer+0xc64>)
 801a154:	eb0d 0102 	add.w	r1, sp, r2
 801a158:	f7ee fb72 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a15c:	78ea      	ldrb	r2, [r5, #3]
 801a15e:	497b      	ldr	r1, [pc, #492]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a160:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a162:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a164:	9404      	str	r4, [sp, #16]
 801a166:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a168:	f004 ff4a 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a16c:	220c      	movs	r2, #12
 801a16e:	4b78      	ldr	r3, [pc, #480]	; (801a350 <SD_Witer+0xc60>)
 801a170:	4878      	ldr	r0, [pc, #480]	; (801a354 <SD_Witer+0xc64>)
 801a172:	eb0d 0102 	add.w	r1, sp, r2
 801a176:	f7ee fb63 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a17a:	792a      	ldrb	r2, [r5, #4]
 801a17c:	4973      	ldr	r1, [pc, #460]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a17e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a180:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a182:	9404      	str	r4, [sp, #16]
 801a184:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a186:	f004 ff3b 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a18a:	220c      	movs	r2, #12
 801a18c:	4b70      	ldr	r3, [pc, #448]	; (801a350 <SD_Witer+0xc60>)
 801a18e:	4871      	ldr	r0, [pc, #452]	; (801a354 <SD_Witer+0xc64>)
 801a190:	eb0d 0102 	add.w	r1, sp, r2
 801a194:	f7ee fb54 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a198:	796a      	ldrb	r2, [r5, #5]
 801a19a:	496c      	ldr	r1, [pc, #432]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a19c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a19e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a1a0:	9404      	str	r4, [sp, #16]
 801a1a2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a1a4:	f004 ff2c 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a1a8:	220c      	movs	r2, #12
 801a1aa:	4b69      	ldr	r3, [pc, #420]	; (801a350 <SD_Witer+0xc60>)
 801a1ac:	4869      	ldr	r0, [pc, #420]	; (801a354 <SD_Witer+0xc64>)
 801a1ae:	eb0d 0102 	add.w	r1, sp, r2
 801a1b2:	f7ee fb45 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a1b6:	79aa      	ldrb	r2, [r5, #6]
 801a1b8:	4964      	ldr	r1, [pc, #400]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a1ba:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a1bc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a1be:	9404      	str	r4, [sp, #16]
 801a1c0:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a1c2:	f004 ff1d 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a1c6:	220c      	movs	r2, #12
 801a1c8:	4b61      	ldr	r3, [pc, #388]	; (801a350 <SD_Witer+0xc60>)
 801a1ca:	4862      	ldr	r0, [pc, #392]	; (801a354 <SD_Witer+0xc64>)
 801a1cc:	eb0d 0102 	add.w	r1, sp, r2
 801a1d0:	f7ee fb36 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a1d4:	79ea      	ldrb	r2, [r5, #7]
 801a1d6:	495d      	ldr	r1, [pc, #372]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a1d8:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a1da:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a1dc:	9404      	str	r4, [sp, #16]
 801a1de:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a1e0:	f004 ff0e 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a1e4:	220c      	movs	r2, #12
 801a1e6:	4b5a      	ldr	r3, [pc, #360]	; (801a350 <SD_Witer+0xc60>)
 801a1e8:	485a      	ldr	r0, [pc, #360]	; (801a354 <SD_Witer+0xc64>)
 801a1ea:	eb0d 0102 	add.w	r1, sp, r2
 801a1ee:	f7ee fb27 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a1f2:	7a2a      	ldrb	r2, [r5, #8]
 801a1f4:	4955      	ldr	r1, [pc, #340]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a1f6:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a1f8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a1fa:	9404      	str	r4, [sp, #16]
 801a1fc:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a1fe:	f004 feff 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a202:	220c      	movs	r2, #12
 801a204:	4b52      	ldr	r3, [pc, #328]	; (801a350 <SD_Witer+0xc60>)
 801a206:	4853      	ldr	r0, [pc, #332]	; (801a354 <SD_Witer+0xc64>)
 801a208:	eb0d 0102 	add.w	r1, sp, r2
 801a20c:	f7ee fb18 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a210:	7a6a      	ldrb	r2, [r5, #9]
 801a212:	494e      	ldr	r1, [pc, #312]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a214:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a216:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a218:	9404      	str	r4, [sp, #16]
 801a21a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a21c:	f004 fef0 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a220:	220c      	movs	r2, #12
 801a222:	4b4b      	ldr	r3, [pc, #300]	; (801a350 <SD_Witer+0xc60>)
 801a224:	484b      	ldr	r0, [pc, #300]	; (801a354 <SD_Witer+0xc64>)
 801a226:	eb0d 0102 	add.w	r1, sp, r2
 801a22a:	f7ee fb09 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a22e:	7aaa      	ldrb	r2, [r5, #10]
 801a230:	4946      	ldr	r1, [pc, #280]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a232:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a234:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a236:	9404      	str	r4, [sp, #16]
 801a238:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a23a:	f004 fee1 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a23e:	220c      	movs	r2, #12
 801a240:	4b43      	ldr	r3, [pc, #268]	; (801a350 <SD_Witer+0xc60>)
 801a242:	4844      	ldr	r0, [pc, #272]	; (801a354 <SD_Witer+0xc64>)
 801a244:	eb0d 0102 	add.w	r1, sp, r2
 801a248:	f7ee fafa 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a24c:	7aea      	ldrb	r2, [r5, #11]
 801a24e:	493f      	ldr	r1, [pc, #252]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a250:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a252:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a254:	9404      	str	r4, [sp, #16]
 801a256:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a258:	f004 fed2 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a25c:	220c      	movs	r2, #12
 801a25e:	4b3c      	ldr	r3, [pc, #240]	; (801a350 <SD_Witer+0xc60>)
 801a260:	483c      	ldr	r0, [pc, #240]	; (801a354 <SD_Witer+0xc64>)
 801a262:	eb0d 0102 	add.w	r1, sp, r2
 801a266:	f7ee faeb 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a26a:	7b2a      	ldrb	r2, [r5, #12]
 801a26c:	4937      	ldr	r1, [pc, #220]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a26e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a270:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a272:	9404      	str	r4, [sp, #16]
 801a274:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a276:	f004 fec3 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a27a:	220c      	movs	r2, #12
 801a27c:	4b34      	ldr	r3, [pc, #208]	; (801a350 <SD_Witer+0xc60>)
 801a27e:	4835      	ldr	r0, [pc, #212]	; (801a354 <SD_Witer+0xc64>)
 801a280:	eb0d 0102 	add.w	r1, sp, r2
 801a284:	f7ee fadc 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a288:	7b6a      	ldrb	r2, [r5, #13]
 801a28a:	4930      	ldr	r1, [pc, #192]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a28c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a28e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a290:	9404      	str	r4, [sp, #16]
 801a292:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a294:	f004 feb4 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a298:	220c      	movs	r2, #12
 801a29a:	4b2d      	ldr	r3, [pc, #180]	; (801a350 <SD_Witer+0xc60>)
 801a29c:	482d      	ldr	r0, [pc, #180]	; (801a354 <SD_Witer+0xc64>)
 801a29e:	eb0d 0102 	add.w	r1, sp, r2
 801a2a2:	f7ee facd 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a2a6:	7baa      	ldrb	r2, [r5, #14]
 801a2a8:	4928      	ldr	r1, [pc, #160]	; (801a34c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a2aa:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a2ac:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a2ae:	9404      	str	r4, [sp, #16]
 801a2b0:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a2b2:	f004 fea5 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a2b6:	220c      	movs	r2, #12
 801a2b8:	4b25      	ldr	r3, [pc, #148]	; (801a350 <SD_Witer+0xc60>)
 801a2ba:	4826      	ldr	r0, [pc, #152]	; (801a354 <SD_Witer+0xc64>)
 801a2bc:	eb0d 0102 	add.w	r1, sp, r2
 801a2c0:	f7ee fabe 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 801a2c4:	9403      	str	r4, [sp, #12]
 801a2c6:	9404      	str	r4, [sp, #16]
 801a2c8:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801a2ca:	4822      	ldr	r0, [pc, #136]	; (801a354 <SD_Witer+0xc64>)
 801a2cc:	f7ee fbd6 	bl	8008a7c <f_close>
				memset(buffer_sd, 0, 11);
 801a2d0:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a2d2:	4925      	ldr	r1, [pc, #148]	; (801a368 <SD_Witer+0xc78>)
 801a2d4:	4825      	ldr	r0, [pc, #148]	; (801a36c <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801a2d6:	6072      	str	r2, [r6, #4]
 801a2d8:	6032      	str	r2, [r6, #0]
 801a2da:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a2de:	f7ee f965 	bl	80085ac <f_mount>
 801a2e2:	4b23      	ldr	r3, [pc, #140]	; (801a370 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801a2e4:	4923      	ldr	r1, [pc, #140]	; (801a374 <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a2e6:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801a2e8:	4b23      	ldr	r3, [pc, #140]	; (801a378 <SD_Witer+0xc88>)
 801a2ea:	2000      	movs	r0, #0
 801a2ec:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a2f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a2f4:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a2f8:	2055      	movs	r0, #85	; 0x55
 801a2fa:	f7fa f8af 	bl	801445c <GUI_Bar_Measure>
	}
 801a2fe:	b007      	add	sp, #28
 801a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a304:	491d      	ldr	r1, [pc, #116]	; (801a37c <SD_Witer+0xc8c>)
 801a306:	f7ff ba10 	b.w	801972a <SD_Witer+0x3a>
 801a30a:	491d      	ldr	r1, [pc, #116]	; (801a380 <SD_Witer+0xc90>)
 801a30c:	f7ff ba0d 	b.w	801972a <SD_Witer+0x3a>
 801a310:	491c      	ldr	r1, [pc, #112]	; (801a384 <SD_Witer+0xc94>)
 801a312:	f7ff ba0a 	b.w	801972a <SD_Witer+0x3a>
 801a316:	491c      	ldr	r1, [pc, #112]	; (801a388 <SD_Witer+0xc98>)
 801a318:	f7ff ba07 	b.w	801972a <SD_Witer+0x3a>
 801a31c:	491b      	ldr	r1, [pc, #108]	; (801a38c <SD_Witer+0xc9c>)
 801a31e:	f7ff ba04 	b.w	801972a <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801a322:	221e      	movs	r2, #30
 801a324:	491a      	ldr	r1, [pc, #104]	; (801a390 <SD_Witer+0xca0>)
 801a326:	f7ff ba3a 	b.w	801979e <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a32a:	2212      	movs	r2, #18
 801a32c:	4919      	ldr	r1, [pc, #100]	; (801a394 <SD_Witer+0xca4>)
 801a32e:	f7ff ba54 	b.w	80197da <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a332:	2212      	movs	r2, #18
 801a334:	4918      	ldr	r1, [pc, #96]	; (801a398 <SD_Witer+0xca8>)
 801a336:	f7ff ba8c 	b.w	8019852 <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a33a:	2214      	movs	r2, #20
 801a33c:	4917      	ldr	r1, [pc, #92]	; (801a39c <SD_Witer+0xcac>)
 801a33e:	f7ff babc 	b.w	80198ba <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801a342:	2209      	movs	r2, #9
 801a344:	4916      	ldr	r1, [pc, #88]	; (801a3a0 <SD_Witer+0xcb0>)
 801a346:	f7ff baec 	b.w	8019922 <SD_Witer+0x232>
 801a34a:	bf00      	nop
 801a34c:	0802e70e 	.word	0x0802e70e
 801a350:	2008b818 	.word	0x2008b818
 801a354:	2008c870 	.word	0x2008c870
 801a358:	20002bad 	.word	0x20002bad
 801a35c:	20002bac 	.word	0x20002bac
 801a360:	080215d9 	.word	0x080215d9
 801a364:	0802e70d 	.word	0x0802e70d
 801a368:	2008d8a5 	.word	0x2008d8a5
 801a36c:	2008b820 	.word	0x2008b820
 801a370:	2008d8a0 	.word	0x2008d8a0
 801a374:	3ff00000 	.word	0x3ff00000
 801a378:	20004ce8 	.word	0x20004ce8
 801a37c:	0802e7f6 	.word	0x0802e7f6
 801a380:	0802e6cd 	.word	0x0802e6cd
 801a384:	0802e6d1 	.word	0x0802e6d1
 801a388:	0802e6d3 	.word	0x0802e6d3
 801a38c:	0802e6d7 	.word	0x0802e6d7
 801a390:	20000912 	.word	0x20000912
 801a394:	20000437 	.word	0x20000437
 801a398:	200004b3 	.word	0x200004b3
 801a39c:	2000046f 	.word	0x2000046f
 801a3a0:	2000024e 	.word	0x2000024e
										sprintf(measure_buff, "%.d", Tc_Measure);
 801a3a4:	49ab      	ldr	r1, [pc, #684]	; (801a654 <SD_Witer+0xf64>)
 801a3a6:	a803      	add	r0, sp, #12
 801a3a8:	f004 fe2a 	bl	801f000 <siprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3ac:	220c      	movs	r2, #12
 801a3ae:	4baa      	ldr	r3, [pc, #680]	; (801a658 <SD_Witer+0xf68>)
 801a3b0:	48aa      	ldr	r0, [pc, #680]	; (801a65c <SD_Witer+0xf6c>)
 801a3b2:	eb0d 0102 	add.w	r1, sp, r2
 801a3b6:	f7ee fa43 	bl	8008840 <f_write>
										memset(measure_buff, 0, 12);
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	9303      	str	r3, [sp, #12]
 801a3be:	9304      	str	r3, [sp, #16]
 801a3c0:	9305      	str	r3, [sp, #20]
 801a3c2:	f7ff babe 	b.w	8019942 <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801a3c6:	2215      	movs	r2, #21
 801a3c8:	49a5      	ldr	r1, [pc, #660]	; (801a660 <SD_Witer+0xf70>)
 801a3ca:	f7ff bacd 	b.w	8019968 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801a3ce:	2213      	movs	r2, #19
 801a3d0:	49a4      	ldr	r1, [pc, #656]	; (801a664 <SD_Witer+0xf74>)
 801a3d2:	f7ff bb46 	b.w	8019a62 <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801a3d6:	221a      	movs	r2, #26
 801a3d8:	49a3      	ldr	r1, [pc, #652]	; (801a668 <SD_Witer+0xf78>)
 801a3da:	f7ff bb51 	b.w	8019a80 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801a3de:	221f      	movs	r2, #31
 801a3e0:	49a2      	ldr	r1, [pc, #648]	; (801a66c <SD_Witer+0xf7c>)
 801a3e2:	f7ff bb67 	b.w	8019ab4 <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a3e6:	2213      	movs	r2, #19
 801a3e8:	49a1      	ldr	r1, [pc, #644]	; (801a670 <SD_Witer+0xf80>)
 801a3ea:	f7ff bb81 	b.w	8019af0 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a3ee:	b964      	cbnz	r4, 801a40a <SD_Witer+0xd1a>
 801a3f0:	49a0      	ldr	r1, [pc, #640]	; (801a674 <SD_Witer+0xf84>)
 801a3f2:	2224      	movs	r2, #36	; 0x24
 801a3f4:	4899      	ldr	r0, [pc, #612]	; (801a65c <SD_Witer+0xf6c>)
 801a3f6:	f7ee fa23 	bl	8008840 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801a3fa:	4b97      	ldr	r3, [pc, #604]	; (801a658 <SD_Witer+0xf68>)
 801a3fc:	499e      	ldr	r1, [pc, #632]	; (801a678 <SD_Witer+0xf88>)
 801a3fe:	4897      	ldr	r0, [pc, #604]	; (801a65c <SD_Witer+0xf6c>)
 801a400:	2203      	movs	r2, #3
 801a402:	f7ee fa1d 	bl	8008840 <f_write>
 801a406:	f7ff bb88 	b.w	8019b1a <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a40a:	2213      	movs	r2, #19
 801a40c:	4998      	ldr	r1, [pc, #608]	; (801a670 <SD_Witer+0xf80>)
 801a40e:	e7f1      	b.n	801a3f4 <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a410:	2225      	movs	r2, #37	; 0x25
 801a412:	499a      	ldr	r1, [pc, #616]	; (801a67c <SD_Witer+0xf8c>)
 801a414:	f7ff bb99 	b.w	8019b4a <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801a418:	2212      	movs	r2, #18
 801a41a:	4999      	ldr	r1, [pc, #612]	; (801a680 <SD_Witer+0xf90>)
 801a41c:	f7ff bbd0 	b.w	8019bc0 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801a420:	2212      	movs	r2, #18
 801a422:	4998      	ldr	r1, [pc, #608]	; (801a684 <SD_Witer+0xf94>)
 801a424:	f7ff bbea 	b.w	8019bfc <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801a428:	2213      	movs	r2, #19
 801a42a:	4997      	ldr	r1, [pc, #604]	; (801a688 <SD_Witer+0xf98>)
 801a42c:	e404      	b.n	8019c38 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801a42e:	221e      	movs	r2, #30
 801a430:	4996      	ldr	r1, [pc, #600]	; (801a68c <SD_Witer+0xf9c>)
 801a432:	e41f      	b.n	8019c74 <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801a434:	220f      	movs	r2, #15
 801a436:	4996      	ldr	r1, [pc, #600]	; (801a690 <SD_Witer+0xfa0>)
 801a438:	e4bc      	b.n	8019db4 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a43a:	2c00      	cmp	r4, #0
 801a43c:	f040 80f0 	bne.w	801a620 <SD_Witer+0xf30>
 801a440:	4994      	ldr	r1, [pc, #592]	; (801a694 <SD_Witer+0xfa4>)
 801a442:	2276      	movs	r2, #118	; 0x76
 801a444:	4885      	ldr	r0, [pc, #532]	; (801a65c <SD_Witer+0xf6c>)
 801a446:	4f94      	ldr	r7, [pc, #592]	; (801a698 <SD_Witer+0xfa8>)
 801a448:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801a700 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a44c:	f8df a208 	ldr.w	sl, [pc, #520]	; 801a658 <SD_Witer+0xf68>
 801a450:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801a65c <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a454:	f7ee f9f4 	bl	8008840 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801a458:	f857 0b04 	ldr.w	r0, [r7], #4
 801a45c:	f7e6 f884 	bl	8000568 <__aeabi_f2d>
 801a460:	4602      	mov	r2, r0
 801a462:	460b      	mov	r3, r1
 801a464:	a803      	add	r0, sp, #12
 801a466:	498d      	ldr	r1, [pc, #564]	; (801a69c <SD_Witer+0xfac>)
 801a468:	f004 fdca 	bl	801f000 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a46c:	220c      	movs	r2, #12
 801a46e:	4653      	mov	r3, sl
 801a470:	eb0d 0102 	add.w	r1, sp, r2
 801a474:	4648      	mov	r0, r9
 801a476:	f7ee f9e3 	bl	8008840 <f_write>
									memset(measure_buff, 0, 12);
 801a47a:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a47c:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801a480:	9503      	str	r5, [sp, #12]
 801a482:	9504      	str	r5, [sp, #16]
 801a484:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a486:	f7e6 f86f 	bl	8000568 <__aeabi_f2d>
 801a48a:	4602      	mov	r2, r0
 801a48c:	460b      	mov	r3, r1
 801a48e:	a803      	add	r0, sp, #12
 801a490:	4983      	ldr	r1, [pc, #524]	; (801a6a0 <SD_Witer+0xfb0>)
 801a492:	f004 fdb5 	bl	801f000 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a496:	220c      	movs	r2, #12
 801a498:	4653      	mov	r3, sl
 801a49a:	eb0d 0102 	add.w	r1, sp, r2
 801a49e:	4648      	mov	r0, r9
 801a4a0:	f7ee f9ce 	bl	8008840 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801a4a4:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801a4a6:	9503      	str	r5, [sp, #12]
 801a4a8:	9504      	str	r5, [sp, #16]
 801a4aa:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801a4ac:	d1d4      	bne.n	801a458 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801a4ae:	4b6a      	ldr	r3, [pc, #424]	; (801a658 <SD_Witer+0xf68>)
 801a4b0:	2c00      	cmp	r4, #0
 801a4b2:	f040 80b8 	bne.w	801a626 <SD_Witer+0xf36>
 801a4b6:	497b      	ldr	r1, [pc, #492]	; (801a6a4 <SD_Witer+0xfb4>)
 801a4b8:	223f      	movs	r2, #63	; 0x3f
 801a4ba:	4868      	ldr	r0, [pc, #416]	; (801a65c <SD_Witer+0xf6c>)
 801a4bc:	f7ee f9c0 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801a4c0:	4b79      	ldr	r3, [pc, #484]	; (801a6a8 <SD_Witer+0xfb8>)
 801a4c2:	6818      	ldr	r0, [r3, #0]
 801a4c4:	f7e6 f850 	bl	8000568 <__aeabi_f2d>
 801a4c8:	4602      	mov	r2, r0
 801a4ca:	460b      	mov	r3, r1
 801a4cc:	a803      	add	r0, sp, #12
 801a4ce:	4977      	ldr	r1, [pc, #476]	; (801a6ac <SD_Witer+0xfbc>)
 801a4d0:	f004 fd96 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4d4:	220c      	movs	r2, #12
 801a4d6:	4b60      	ldr	r3, [pc, #384]	; (801a658 <SD_Witer+0xf68>)
 801a4d8:	4860      	ldr	r0, [pc, #384]	; (801a65c <SD_Witer+0xf6c>)
 801a4da:	eb0d 0102 	add.w	r1, sp, r2
 801a4de:	f7ee f9af 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	9303      	str	r3, [sp, #12]
 801a4e6:	9304      	str	r3, [sp, #16]
 801a4e8:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801a4ea:	4b5b      	ldr	r3, [pc, #364]	; (801a658 <SD_Witer+0xf68>)
 801a4ec:	2c00      	cmp	r4, #0
 801a4ee:	f040 809d 	bne.w	801a62c <SD_Witer+0xf3c>
 801a4f2:	496f      	ldr	r1, [pc, #444]	; (801a6b0 <SD_Witer+0xfc0>)
 801a4f4:	221b      	movs	r2, #27
 801a4f6:	4859      	ldr	r0, [pc, #356]	; (801a65c <SD_Witer+0xf6c>)
 801a4f8:	f7ee f9a2 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801a4fc:	4b6d      	ldr	r3, [pc, #436]	; (801a6b4 <SD_Witer+0xfc4>)
 801a4fe:	6818      	ldr	r0, [r3, #0]
 801a500:	f7e6 f832 	bl	8000568 <__aeabi_f2d>
 801a504:	4602      	mov	r2, r0
 801a506:	460b      	mov	r3, r1
 801a508:	a803      	add	r0, sp, #12
 801a50a:	496b      	ldr	r1, [pc, #428]	; (801a6b8 <SD_Witer+0xfc8>)
 801a50c:	f004 fd78 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a510:	220c      	movs	r2, #12
 801a512:	4b51      	ldr	r3, [pc, #324]	; (801a658 <SD_Witer+0xf68>)
 801a514:	4851      	ldr	r0, [pc, #324]	; (801a65c <SD_Witer+0xf6c>)
 801a516:	eb0d 0102 	add.w	r1, sp, r2
 801a51a:	f7ee f991 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 801a51e:	2300      	movs	r3, #0
 801a520:	9303      	str	r3, [sp, #12]
 801a522:	9304      	str	r3, [sp, #16]
 801a524:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801a526:	4b4c      	ldr	r3, [pc, #304]	; (801a658 <SD_Witer+0xf68>)
 801a528:	2c00      	cmp	r4, #0
 801a52a:	f040 8082 	bne.w	801a632 <SD_Witer+0xf42>
 801a52e:	4963      	ldr	r1, [pc, #396]	; (801a6bc <SD_Witer+0xfcc>)
 801a530:	2227      	movs	r2, #39	; 0x27
 801a532:	484a      	ldr	r0, [pc, #296]	; (801a65c <SD_Witer+0xf6c>)
 801a534:	f7ee f984 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801a538:	4b61      	ldr	r3, [pc, #388]	; (801a6c0 <SD_Witer+0xfd0>)
 801a53a:	6818      	ldr	r0, [r3, #0]
 801a53c:	f7e6 f814 	bl	8000568 <__aeabi_f2d>
 801a540:	4602      	mov	r2, r0
 801a542:	460b      	mov	r3, r1
 801a544:	a803      	add	r0, sp, #12
 801a546:	4959      	ldr	r1, [pc, #356]	; (801a6ac <SD_Witer+0xfbc>)
 801a548:	f004 fd5a 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a54c:	220c      	movs	r2, #12
 801a54e:	4b42      	ldr	r3, [pc, #264]	; (801a658 <SD_Witer+0xf68>)
 801a550:	4842      	ldr	r0, [pc, #264]	; (801a65c <SD_Witer+0xf6c>)
 801a552:	eb0d 0102 	add.w	r1, sp, r2
 801a556:	f7ee f973 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 801a55a:	2300      	movs	r3, #0
 801a55c:	9303      	str	r3, [sp, #12]
 801a55e:	9304      	str	r3, [sp, #16]
 801a560:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801a562:	4b3d      	ldr	r3, [pc, #244]	; (801a658 <SD_Witer+0xf68>)
 801a564:	2c00      	cmp	r4, #0
 801a566:	d167      	bne.n	801a638 <SD_Witer+0xf48>
 801a568:	4956      	ldr	r1, [pc, #344]	; (801a6c4 <SD_Witer+0xfd4>)
 801a56a:	223d      	movs	r2, #61	; 0x3d
 801a56c:	483b      	ldr	r0, [pc, #236]	; (801a65c <SD_Witer+0xf6c>)
 801a56e:	f7ee f967 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801a572:	4b55      	ldr	r3, [pc, #340]	; (801a6c8 <SD_Witer+0xfd8>)
 801a574:	6818      	ldr	r0, [r3, #0]
 801a576:	f7e5 fff7 	bl	8000568 <__aeabi_f2d>
 801a57a:	4602      	mov	r2, r0
 801a57c:	460b      	mov	r3, r1
 801a57e:	a803      	add	r0, sp, #12
 801a580:	4952      	ldr	r1, [pc, #328]	; (801a6cc <SD_Witer+0xfdc>)
 801a582:	f004 fd3d 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a586:	220c      	movs	r2, #12
 801a588:	eb0d 0102 	add.w	r1, sp, r2
 801a58c:	4b32      	ldr	r3, [pc, #200]	; (801a658 <SD_Witer+0xf68>)
 801a58e:	4833      	ldr	r0, [pc, #204]	; (801a65c <SD_Witer+0xf6c>)
 801a590:	f7ee f956 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801a594:	4b4e      	ldr	r3, [pc, #312]	; (801a6d0 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801a596:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801a598:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a59a:	9503      	str	r5, [sp, #12]
 801a59c:	9504      	str	r5, [sp, #16]
 801a59e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801a5a0:	f7e5 ffe2 	bl	8000568 <__aeabi_f2d>
 801a5a4:	4602      	mov	r2, r0
 801a5a6:	460b      	mov	r3, r1
 801a5a8:	a803      	add	r0, sp, #12
 801a5aa:	4948      	ldr	r1, [pc, #288]	; (801a6cc <SD_Witer+0xfdc>)
 801a5ac:	f004 fd28 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5b0:	220c      	movs	r2, #12
 801a5b2:	eb0d 0102 	add.w	r1, sp, r2
 801a5b6:	4b28      	ldr	r3, [pc, #160]	; (801a658 <SD_Witer+0xf68>)
 801a5b8:	4828      	ldr	r0, [pc, #160]	; (801a65c <SD_Witer+0xf6c>)
 801a5ba:	f7ee f941 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801a5be:	4b45      	ldr	r3, [pc, #276]	; (801a6d4 <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801a5c0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801a5c2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a5c4:	9504      	str	r5, [sp, #16]
 801a5c6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801a5c8:	f7e5 ffce 	bl	8000568 <__aeabi_f2d>
 801a5cc:	4602      	mov	r2, r0
 801a5ce:	460b      	mov	r3, r1
 801a5d0:	a803      	add	r0, sp, #12
 801a5d2:	493e      	ldr	r1, [pc, #248]	; (801a6cc <SD_Witer+0xfdc>)
 801a5d4:	f004 fd14 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5d8:	220c      	movs	r2, #12
 801a5da:	eb0d 0102 	add.w	r1, sp, r2
 801a5de:	4b1e      	ldr	r3, [pc, #120]	; (801a658 <SD_Witer+0xf68>)
 801a5e0:	481e      	ldr	r0, [pc, #120]	; (801a65c <SD_Witer+0xf6c>)
 801a5e2:	f7ee f92d 	bl	8008840 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801a5e6:	4b3c      	ldr	r3, [pc, #240]	; (801a6d8 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801a5e8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801a5ea:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a5ec:	9504      	str	r5, [sp, #16]
 801a5ee:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801a5f0:	f7e5 ffba 	bl	8000568 <__aeabi_f2d>
 801a5f4:	4602      	mov	r2, r0
 801a5f6:	460b      	mov	r3, r1
 801a5f8:	a803      	add	r0, sp, #12
 801a5fa:	4934      	ldr	r1, [pc, #208]	; (801a6cc <SD_Witer+0xfdc>)
 801a5fc:	f004 fd00 	bl	801f000 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a600:	220c      	movs	r2, #12
 801a602:	4b15      	ldr	r3, [pc, #84]	; (801a658 <SD_Witer+0xf68>)
 801a604:	4815      	ldr	r0, [pc, #84]	; (801a65c <SD_Witer+0xf6c>)
 801a606:	eb0d 0102 	add.w	r1, sp, r2
 801a60a:	f7ee f919 	bl	8008840 <f_write>
								memset(measure_buff, 0, 12);
 801a60e:	9503      	str	r5, [sp, #12]
 801a610:	9504      	str	r5, [sp, #16]
 801a612:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801a614:	4b10      	ldr	r3, [pc, #64]	; (801a658 <SD_Witer+0xf68>)
 801a616:	b994      	cbnz	r4, 801a63e <SD_Witer+0xf4e>
 801a618:	221a      	movs	r2, #26
 801a61a:	4930      	ldr	r1, [pc, #192]	; (801a6dc <SD_Witer+0xfec>)
 801a61c:	f7ff bbca 	b.w	8019db4 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a620:	2223      	movs	r2, #35	; 0x23
 801a622:	492f      	ldr	r1, [pc, #188]	; (801a6e0 <SD_Witer+0xff0>)
 801a624:	e70e      	b.n	801a444 <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801a626:	2216      	movs	r2, #22
 801a628:	492e      	ldr	r1, [pc, #184]	; (801a6e4 <SD_Witer+0xff4>)
 801a62a:	e746      	b.n	801a4ba <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801a62c:	2213      	movs	r2, #19
 801a62e:	492e      	ldr	r1, [pc, #184]	; (801a6e8 <SD_Witer+0xff8>)
 801a630:	e761      	b.n	801a4f6 <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801a632:	2215      	movs	r2, #21
 801a634:	492d      	ldr	r1, [pc, #180]	; (801a6ec <SD_Witer+0xffc>)
 801a636:	e77c      	b.n	801a532 <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801a638:	2220      	movs	r2, #32
 801a63a:	492d      	ldr	r1, [pc, #180]	; (801a6f0 <SD_Witer+0x1000>)
 801a63c:	e796      	b.n	801a56c <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801a63e:	2214      	movs	r2, #20
 801a640:	492c      	ldr	r1, [pc, #176]	; (801a6f4 <SD_Witer+0x1004>)
 801a642:	f7ff bbb7 	b.w	8019db4 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801a646:	226b      	movs	r2, #107	; 0x6b
 801a648:	492b      	ldr	r1, [pc, #172]	; (801a6f8 <SD_Witer+0x1008>)
 801a64a:	f7ff bbf7 	b.w	8019e3c <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a64e:	226b      	movs	r2, #107	; 0x6b
 801a650:	492a      	ldr	r1, [pc, #168]	; (801a6fc <SD_Witer+0x100c>)
 801a652:	e4fc      	b.n	801a04e <SD_Witer+0x95e>
 801a654:	0802e6f3 	.word	0x0802e6f3
 801a658:	2008b818 	.word	0x2008b818
 801a65c:	2008c870 	.word	0x2008c870
 801a660:	20000606 	.word	0x20000606
 801a664:	200008d5 	.word	0x200008d5
 801a668:	200009f6 	.word	0x200009f6
 801a66c:	2000099c 	.word	0x2000099c
 801a670:	20000965 	.word	0x20000965
 801a674:	20000978 	.word	0x20000978
 801a678:	0802e6db 	.word	0x0802e6db
 801a67c:	2000054b 	.word	0x2000054b
 801a680:	20000515 	.word	0x20000515
 801a684:	200005d3 	.word	0x200005d3
 801a688:	20000806 	.word	0x20000806
 801a68c:	200007af 	.word	0x200007af
 801a690:	200004f3 	.word	0x200004f3
 801a694:	2000070b 	.word	0x2000070b
 801a698:	200077fc 	.word	0x200077fc
 801a69c:	0802e6fb 	.word	0x0802e6fb
 801a6a0:	0802e700 	.word	0x0802e700
 801a6a4:	200006a9 	.word	0x200006a9
 801a6a8:	2009015c 	.word	0x2009015c
 801a6ac:	0802e6b2 	.word	0x0802e6b2
 801a6b0:	20000794 	.word	0x20000794
 801a6b4:	2008fbfc 	.word	0x2008fbfc
 801a6b8:	0802e6ad 	.word	0x0802e6ad
 801a6bc:	200008ae 	.word	0x200008ae
 801a6c0:	2008fc04 	.word	0x2008fc04
 801a6c4:	2000085c 	.word	0x2000085c
 801a6c8:	2008fcac 	.word	0x2008fcac
 801a6cc:	0802e707 	.word	0x0802e707
 801a6d0:	20090038 	.word	0x20090038
 801a6d4:	2008ff6c 	.word	0x2008ff6c
 801a6d8:	2008fc00 	.word	0x2008fc00
 801a6dc:	20000679 	.word	0x20000679
 801a6e0:	200006e8 	.word	0x200006e8
 801a6e4:	20000693 	.word	0x20000693
 801a6e8:	20000781 	.word	0x20000781
 801a6ec:	20000899 	.word	0x20000899
 801a6f0:	2000083c 	.word	0x2000083c
 801a6f4:	20000665 	.word	0x20000665
 801a6f8:	2000034f 	.word	0x2000034f
 801a6fc:	20000265 	.word	0x20000265
 801a700:	2004fc04 	.word	0x2004fc04

0801a704 <Spectral_Axes>:
extern uint8_t TFT_direction;
extern uint16_t WaveLenght_Graph[4];
extern uint16_t PARGraph_B, PARGraph_G, PARGraph_R, PARGraph_IR;
extern uint8_t Graph_Field;

void Spectral_Axes(uint8_t direction){
 801a704:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801a706:	2800      	cmp	r0, #0
 801a708:	d145      	bne.n	801a796 <Spectral_Axes+0x92>
	{
		TFT_FillRectangle(18, 95, 20, 412, TFT_White); //Yline
 801a70a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801a70e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801a712:	2214      	movs	r2, #20
 801a714:	215f      	movs	r1, #95	; 0x5f
 801a716:	2012      	movs	r0, #18
 801a718:	9400      	str	r4, [sp, #0]
 801a71a:	f001 f85e 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_White);//XLine
 801a71e:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801a722:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801a726:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801a72a:	2012      	movs	r0, #18
 801a72c:	9400      	str	r4, [sp, #0]
 801a72e:	f001 f854 	bl	801b7da <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_White); //25
 801a732:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801a736:	4619      	mov	r1, r3
 801a738:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801a73c:	2012      	movs	r0, #18
 801a73e:	9400      	str	r4, [sp, #0]
 801a740:	f000 ffee 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_White); //50
 801a744:	f240 1301 	movw	r3, #257	; 0x101
 801a748:	4619      	mov	r1, r3
 801a74a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801a74e:	2012      	movs	r0, #18
 801a750:	9400      	str	r4, [sp, #0]
 801a752:	f000 ffe5 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_White); //75
 801a756:	23b5      	movs	r3, #181	; 0xb5
 801a758:	4619      	mov	r1, r3
 801a75a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801a75e:	2012      	movs	r0, #18
 801a760:	9400      	str	r4, [sp, #0]
 801a762:	f000 ffdd 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_White); //100
 801a766:	2369      	movs	r3, #105	; 0x69
 801a768:	9400      	str	r4, [sp, #0]
 801a76a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801a76e:	4619      	mov	r1, r3
 801a770:	2012      	movs	r0, #18
 801a772:	f000 ffd5 	bl	801b720 <TFT_DrawLine>
 801a776:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_FillRectangle(56+i, 95, 56+i, 412, TFT_White); 
 801a778:	462a      	mov	r2, r5
 801a77a:	4628      	mov	r0, r5
 801a77c:	3528      	adds	r5, #40	; 0x28
 801a77e:	9400      	str	r4, [sp, #0]
 801a780:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801a784:	215f      	movs	r1, #95	; 0x5f
 801a786:	b2ad      	uxth	r5, r5
 801a788:	f001 f827 	bl	801b7da <TFT_FillRectangle>
		for(uint16_t i = 0; i < 210; i+=40){
 801a78c:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801a790:	d1f2      	bne.n	801a778 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_White);
		}
	}
}
 801a792:	b003      	add	sp, #12
 801a794:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801a796:	2801      	cmp	r0, #1
 801a798:	d140      	bne.n	801a81c <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 801a79a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801a79e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a7a2:	22ff      	movs	r2, #255	; 0xff
 801a7a4:	2146      	movs	r1, #70	; 0x46
 801a7a6:	20fd      	movs	r0, #253	; 0xfd
 801a7a8:	9400      	str	r4, [sp, #0]
 801a7aa:	f001 f816 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 801a7ae:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a7b2:	22ff      	movs	r2, #255	; 0xff
 801a7b4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801a7b8:	2028      	movs	r0, #40	; 0x28
 801a7ba:	9400      	str	r4, [sp, #0]
 801a7bc:	f001 f80d 	bl	801b7da <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 801a7c0:	22cc      	movs	r2, #204	; 0xcc
 801a7c2:	4610      	mov	r0, r2
 801a7c4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a7c8:	2146      	movs	r1, #70	; 0x46
 801a7ca:	9400      	str	r4, [sp, #0]
 801a7cc:	f000 ffa8 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 801a7d0:	2297      	movs	r2, #151	; 0x97
 801a7d2:	4610      	mov	r0, r2
 801a7d4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a7d8:	2146      	movs	r1, #70	; 0x46
 801a7da:	9400      	str	r4, [sp, #0]
 801a7dc:	f000 ffa0 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 801a7e0:	2262      	movs	r2, #98	; 0x62
 801a7e2:	4610      	mov	r0, r2
 801a7e4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a7e8:	2146      	movs	r1, #70	; 0x46
 801a7ea:	9400      	str	r4, [sp, #0]
 801a7ec:	f000 ff98 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 801a7f0:	222d      	movs	r2, #45	; 0x2d
 801a7f2:	9400      	str	r4, [sp, #0]
 801a7f4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a7f8:	2146      	movs	r1, #70	; 0x46
 801a7fa:	4610      	mov	r0, r2
 801a7fc:	f000 ff90 	bl	801b720 <TFT_DrawLine>
 801a800:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_FillRectangle(40, 354-i, 255, 354-i, TFT_White);
 801a804:	462b      	mov	r3, r5
 801a806:	4629      	mov	r1, r5
 801a808:	3d32      	subs	r5, #50	; 0x32
 801a80a:	9400      	str	r4, [sp, #0]
 801a80c:	22ff      	movs	r2, #255	; 0xff
 801a80e:	2028      	movs	r0, #40	; 0x28
 801a810:	b2ad      	uxth	r5, r5
 801a812:	f000 ffe2 	bl	801b7da <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801a816:	2d36      	cmp	r5, #54	; 0x36
 801a818:	d1f4      	bne.n	801a804 <Spectral_Axes+0x100>
 801a81a:	e7ba      	b.n	801a792 <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801a81c:	2802      	cmp	r0, #2
 801a81e:	d1b8      	bne.n	801a792 <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 801a820:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801a824:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a828:	2210      	movs	r2, #16
 801a82a:	214a      	movs	r1, #74	; 0x4a
 801a82c:	2012      	movs	r0, #18
 801a82e:	9400      	str	r4, [sp, #0]
 801a830:	f000 ffd3 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 801a834:	234c      	movs	r3, #76	; 0x4c
 801a836:	22e8      	movs	r2, #232	; 0xe8
 801a838:	214a      	movs	r1, #74	; 0x4a
 801a83a:	2011      	movs	r0, #17
 801a83c:	9400      	str	r4, [sp, #0]
 801a83e:	f000 ffcc 	bl	801b7da <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 801a842:	2244      	movs	r2, #68	; 0x44
 801a844:	4610      	mov	r0, r2
 801a846:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a84a:	2146      	movs	r1, #70	; 0x46
 801a84c:	9400      	str	r4, [sp, #0]
 801a84e:	f000 ff67 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 801a852:	2279      	movs	r2, #121	; 0x79
 801a854:	4610      	mov	r0, r2
 801a856:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a85a:	2146      	movs	r1, #70	; 0x46
 801a85c:	9400      	str	r4, [sp, #0]
 801a85e:	f000 ff5f 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 801a862:	22ae      	movs	r2, #174	; 0xae
 801a864:	4610      	mov	r0, r2
 801a866:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a86a:	2146      	movs	r1, #70	; 0x46
 801a86c:	9400      	str	r4, [sp, #0]
 801a86e:	f000 ff57 	bl	801b720 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 801a872:	22e3      	movs	r2, #227	; 0xe3
 801a874:	9400      	str	r4, [sp, #0]
 801a876:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801a87a:	2146      	movs	r1, #70	; 0x46
 801a87c:	4610      	mov	r0, r2
 801a87e:	f000 ff4f 	bl	801b720 <TFT_DrawLine>
 801a882:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_White);
 801a886:	462b      	mov	r3, r5
 801a888:	4629      	mov	r1, r5
 801a88a:	3d32      	subs	r5, #50	; 0x32
 801a88c:	9400      	str	r4, [sp, #0]
 801a88e:	22e8      	movs	r2, #232	; 0xe8
 801a890:	2011      	movs	r0, #17
 801a892:	b2ad      	uxth	r5, r5
 801a894:	f000 ffa1 	bl	801b7da <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801a898:	2d4a      	cmp	r5, #74	; 0x4a
 801a89a:	d1f4      	bne.n	801a886 <Spectral_Axes+0x182>
 801a89c:	e779      	b.n	801a792 <Spectral_Axes+0x8e>
	...

0801a8a0 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801a8a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a8a4:	4d6b      	ldr	r5, [pc, #428]	; (801aa54 <Spectral_PAR_Range+0x1b4>)
 801a8a6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801aa60 <Spectral_PAR_Range+0x1c0>
 801a8aa:	4f6b      	ldr	r7, [pc, #428]	; (801aa58 <Spectral_PAR_Range+0x1b8>)
 801a8ac:	4e6b      	ldr	r6, [pc, #428]	; (801aa5c <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801a8ae:	2800      	cmp	r0, #0
 801a8b0:	d146      	bne.n	801a940 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801a8b2:	882a      	ldrh	r2, [r5, #0]
 801a8b4:	2363      	movs	r3, #99	; 0x63
 801a8b6:	0892      	lsrs	r2, r2, #2
 801a8b8:	9300      	str	r3, [sp, #0]
 801a8ba:	3213      	adds	r2, #19
 801a8bc:	f240 139b 	movw	r3, #411	; 0x19b
 801a8c0:	2169      	movs	r1, #105	; 0x69
 801a8c2:	2013      	movs	r0, #19
 801a8c4:	f000 ff89 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801a8c8:	8828      	ldrh	r0, [r5, #0]
 801a8ca:	f8b8 2000 	ldrh.w	r2, [r8]
 801a8ce:	f242 23b2 	movw	r3, #8882	; 0x22b2
 801a8d2:	0892      	lsrs	r2, r2, #2
 801a8d4:	0880      	lsrs	r0, r0, #2
 801a8d6:	9300      	str	r3, [sp, #0]
 801a8d8:	3213      	adds	r2, #19
 801a8da:	f240 139b 	movw	r3, #411	; 0x19b
 801a8de:	2169      	movs	r1, #105	; 0x69
 801a8e0:	3013      	adds	r0, #19
 801a8e2:	f000 ff7a 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801a8e6:	883a      	ldrh	r2, [r7, #0]
 801a8e8:	f8b8 0000 	ldrh.w	r0, [r8]
 801a8ec:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801a8f0:	0892      	lsrs	r2, r2, #2
 801a8f2:	0880      	lsrs	r0, r0, #2
 801a8f4:	9300      	str	r3, [sp, #0]
 801a8f6:	3213      	adds	r2, #19
 801a8f8:	f240 139b 	movw	r3, #411	; 0x19b
 801a8fc:	2169      	movs	r1, #105	; 0x69
 801a8fe:	3013      	adds	r0, #19
 801a900:	f000 ff6b 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801a904:	8838      	ldrh	r0, [r7, #0]
 801a906:	8832      	ldrh	r2, [r6, #0]
 801a908:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801a90c:	0892      	lsrs	r2, r2, #2
 801a90e:	0880      	lsrs	r0, r0, #2
 801a910:	9300      	str	r3, [sp, #0]
 801a912:	3213      	adds	r2, #19
 801a914:	f240 139b 	movw	r3, #411	; 0x19b
 801a918:	2169      	movs	r1, #105	; 0x69
 801a91a:	3013      	adds	r0, #19
 801a91c:	f000 ff5d 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801a920:	8830      	ldrh	r0, [r6, #0]
 801a922:	f641 3346 	movw	r3, #6982	; 0x1b46
 801a926:	0880      	lsrs	r0, r0, #2
 801a928:	9300      	str	r3, [sp, #0]
 801a92a:	f240 120d 	movw	r2, #269	; 0x10d
 801a92e:	f240 139b 	movw	r3, #411	; 0x19b
 801a932:	2169      	movs	r1, #105	; 0x69
 801a934:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801a936:	f000 ff50 	bl	801b7da <TFT_FillRectangle>
	}
}
 801a93a:	b002      	add	sp, #8
 801a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801a940:	2801      	cmp	r0, #1
 801a942:	f04f 0403 	mov.w	r4, #3
 801a946:	d142      	bne.n	801a9ce <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801a948:	882b      	ldrh	r3, [r5, #0]
 801a94a:	f8b8 1000 	ldrh.w	r1, [r8]
 801a94e:	fbb3 f3f4 	udiv	r3, r3, r4
 801a952:	f240 1593 	movw	r5, #403	; 0x193
 801a956:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801a95a:	1aeb      	subs	r3, r5, r3
 801a95c:	fbb1 f1f4 	udiv	r1, r1, r4
 801a960:	1a69      	subs	r1, r5, r1
 801a962:	9200      	str	r2, [sp, #0]
 801a964:	b29b      	uxth	r3, r3
 801a966:	22fd      	movs	r2, #253	; 0xfd
 801a968:	b289      	uxth	r1, r1
 801a96a:	202d      	movs	r0, #45	; 0x2d
 801a96c:	f000 ff35 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801a970:	8839      	ldrh	r1, [r7, #0]
 801a972:	f8b8 3000 	ldrh.w	r3, [r8]
 801a976:	fbb1 f1f4 	udiv	r1, r1, r4
 801a97a:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801a97e:	fbb3 f3f4 	udiv	r3, r3, r4
 801a982:	1a69      	subs	r1, r5, r1
 801a984:	1aeb      	subs	r3, r5, r3
 801a986:	9200      	str	r2, [sp, #0]
 801a988:	b29b      	uxth	r3, r3
 801a98a:	22fd      	movs	r2, #253	; 0xfd
 801a98c:	b289      	uxth	r1, r1
 801a98e:	202d      	movs	r0, #45	; 0x2d
 801a990:	f000 ff23 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801a994:	883b      	ldrh	r3, [r7, #0]
 801a996:	8831      	ldrh	r1, [r6, #0]
 801a998:	fbb3 f3f4 	udiv	r3, r3, r4
 801a99c:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801a9a0:	1aeb      	subs	r3, r5, r3
 801a9a2:	fbb1 f1f4 	udiv	r1, r1, r4
 801a9a6:	1a69      	subs	r1, r5, r1
 801a9a8:	9200      	str	r2, [sp, #0]
 801a9aa:	b29b      	uxth	r3, r3
 801a9ac:	22fd      	movs	r2, #253	; 0xfd
 801a9ae:	b289      	uxth	r1, r1
 801a9b0:	202d      	movs	r0, #45	; 0x2d
 801a9b2:	f000 ff12 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801a9b6:	f641 3246 	movw	r2, #6982	; 0x1b46
 801a9ba:	8833      	ldrh	r3, [r6, #0]
 801a9bc:	fbb3 f3f4 	udiv	r3, r3, r4
 801a9c0:	1aeb      	subs	r3, r5, r3
 801a9c2:	9200      	str	r2, [sp, #0]
 801a9c4:	b29b      	uxth	r3, r3
 801a9c6:	22fd      	movs	r2, #253	; 0xfd
 801a9c8:	2146      	movs	r1, #70	; 0x46
 801a9ca:	202d      	movs	r0, #45	; 0x2d
 801a9cc:	e7b3      	b.n	801a936 <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801a9ce:	8829      	ldrh	r1, [r5, #0]
 801a9d0:	f8b8 3000 	ldrh.w	r3, [r8]
 801a9d4:	fbb1 f1f4 	udiv	r1, r1, r4
 801a9d8:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801a9dc:	fbb3 f3f4 	udiv	r3, r3, r4
 801a9e0:	314a      	adds	r1, #74	; 0x4a
 801a9e2:	334a      	adds	r3, #74	; 0x4a
 801a9e4:	9200      	str	r2, [sp, #0]
 801a9e6:	b29b      	uxth	r3, r3
 801a9e8:	22e3      	movs	r2, #227	; 0xe3
 801a9ea:	b289      	uxth	r1, r1
 801a9ec:	2013      	movs	r0, #19
 801a9ee:	f000 fef4 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801a9f2:	883b      	ldrh	r3, [r7, #0]
 801a9f4:	f8b8 1000 	ldrh.w	r1, [r8]
 801a9f8:	fbb3 f3f4 	udiv	r3, r3, r4
 801a9fc:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801aa00:	334a      	adds	r3, #74	; 0x4a
 801aa02:	fbb1 f1f4 	udiv	r1, r1, r4
 801aa06:	314a      	adds	r1, #74	; 0x4a
 801aa08:	9200      	str	r2, [sp, #0]
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	22e3      	movs	r2, #227	; 0xe3
 801aa0e:	b289      	uxth	r1, r1
 801aa10:	2013      	movs	r0, #19
 801aa12:	f000 fee2 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801aa16:	8839      	ldrh	r1, [r7, #0]
 801aa18:	8833      	ldrh	r3, [r6, #0]
 801aa1a:	fbb1 f1f4 	udiv	r1, r1, r4
 801aa1e:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801aa22:	fbb3 f3f4 	udiv	r3, r3, r4
 801aa26:	314a      	adds	r1, #74	; 0x4a
 801aa28:	334a      	adds	r3, #74	; 0x4a
 801aa2a:	9200      	str	r2, [sp, #0]
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	22e3      	movs	r2, #227	; 0xe3
 801aa30:	b289      	uxth	r1, r1
 801aa32:	2013      	movs	r0, #19
 801aa34:	f000 fed1 	bl	801b7da <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801aa38:	f641 3346 	movw	r3, #6982	; 0x1b46
 801aa3c:	8831      	ldrh	r1, [r6, #0]
 801aa3e:	fbb1 f1f4 	udiv	r1, r1, r4
 801aa42:	314a      	adds	r1, #74	; 0x4a
 801aa44:	9300      	str	r3, [sp, #0]
 801aa46:	22e3      	movs	r2, #227	; 0xe3
 801aa48:	f240 1397 	movw	r3, #407	; 0x197
 801aa4c:	b289      	uxth	r1, r1
 801aa4e:	2013      	movs	r0, #19
 801aa50:	e771      	b.n	801a936 <Spectral_PAR_Range+0x96>
 801aa52:	bf00      	nop
 801aa54:	2008ff72 	.word	0x2008ff72
 801aa58:	200901a0 	.word	0x200901a0
 801aa5c:	2008ff70 	.word	0x2008ff70
 801aa60:	2009003c 	.word	0x2009003c

0801aa64 <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801aa64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801aa66:	ac02      	add	r4, sp, #8
 801aa68:	2300      	movs	r3, #0
 801aa6a:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801aa6e:	4606      	mov	r6, r0
 801aa70:	4d67      	ldr	r5, [pc, #412]	; (801ac10 <Spectral_Axes_Text+0x1ac>)
 801aa72:	2800      	cmp	r0, #0
 801aa74:	d162      	bne.n	801ab3c <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801aa76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801aa7a:	f001 f8dd 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801aa7e:	2063      	movs	r0, #99	; 0x63
 801aa80:	f001 f8e0 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801aa84:	4863      	ldr	r0, [pc, #396]	; (801ac14 <Spectral_Axes_Text+0x1b0>)
 801aa86:	f001 f8d1 	bl	801bc2c <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801aa8a:	2230      	movs	r2, #48	; 0x30
 801aa8c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801aa90:	2005      	movs	r0, #5
 801aa92:	f001 f995 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801aa96:	222e      	movs	r2, #46	; 0x2e
 801aa98:	f240 1101 	movw	r1, #257	; 0x101
 801aa9c:	2007      	movs	r0, #7
 801aa9e:	f001 f98f 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801aaa2:	2230      	movs	r2, #48	; 0x30
 801aaa4:	f240 1101 	movw	r1, #257	; 0x101
 801aaa8:	2003      	movs	r0, #3
 801aaaa:	f001 f989 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801aaae:	2235      	movs	r2, #53	; 0x35
 801aab0:	f240 1101 	movw	r1, #257	; 0x101
 801aab4:	200b      	movs	r0, #11
 801aab6:	f001 f983 	bl	801bdc0 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801aaba:	2231      	movs	r2, #49	; 0x31
 801aabc:	2169      	movs	r1, #105	; 0x69
 801aabe:	4630      	mov	r0, r6
 801aac0:	f001 f97e 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801aac4:	222e      	movs	r2, #46	; 0x2e
 801aac6:	2169      	movs	r1, #105	; 0x69
 801aac8:	2004      	movs	r0, #4
 801aaca:	f001 f979 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801aace:	2230      	movs	r2, #48	; 0x30
 801aad0:	2169      	movs	r1, #105	; 0x69
 801aad2:	2009      	movs	r0, #9
 801aad4:	f001 f974 	bl	801bdc0 <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801aad8:	882a      	ldrh	r2, [r5, #0]
 801aada:	494f      	ldr	r1, [pc, #316]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801aadc:	4620      	mov	r0, r4
 801aade:	f004 fa8f 	bl	801f000 <siprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801aae2:	2303      	movs	r3, #3
 801aae4:	4622      	mov	r2, r4
 801aae6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801aaea:	200b      	movs	r0, #11
 801aaec:	f001 f9c0 	bl	801be70 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801aaf0:	886a      	ldrh	r2, [r5, #2]
 801aaf2:	4949      	ldr	r1, [pc, #292]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	f004 fa83 	bl	801f000 <siprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801aafa:	2303      	movs	r3, #3
 801aafc:	4622      	mov	r2, r4
 801aafe:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801ab02:	2055      	movs	r0, #85	; 0x55
 801ab04:	f001 f9b4 	bl	801be70 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801ab08:	88aa      	ldrh	r2, [r5, #4]
 801ab0a:	4943      	ldr	r1, [pc, #268]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801ab0c:	4620      	mov	r0, r4
 801ab0e:	f004 fa77 	bl	801f000 <siprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801ab12:	2303      	movs	r3, #3
 801ab14:	4622      	mov	r2, r4
 801ab16:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801ab1a:	20a5      	movs	r0, #165	; 0xa5
 801ab1c:	f001 f9a8 	bl	801be70 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801ab20:	88ea      	ldrh	r2, [r5, #6]
 801ab22:	493d      	ldr	r1, [pc, #244]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801ab24:	4620      	mov	r0, r4
 801ab26:	f004 fa6b 	bl	801f000 <siprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801ab2a:	2303      	movs	r3, #3
 801ab2c:	4622      	mov	r2, r4
 801ab2e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801ab32:	20f5      	movs	r0, #245	; 0xf5
 801ab34:	f001 f99c 	bl	801be70 <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801ab38:	b003      	add	sp, #12
 801ab3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab3c:	4f37      	ldr	r7, [pc, #220]	; (801ac1c <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801ab3e:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801ab40:	bf14      	ite	ne
 801ab42:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801ab44:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801ab46:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801ab4a:	bf18      	it	ne
 801ab4c:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801ab4e:	f001 f873 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801ab52:	2063      	movs	r0, #99	; 0x63
 801ab54:	f001 f876 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801ab58:	482e      	ldr	r0, [pc, #184]	; (801ac14 <Spectral_Axes_Text+0x1b0>)
 801ab5a:	f001 f867 	bl	801bc2c <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801ab5e:	882a      	ldrh	r2, [r5, #0]
 801ab60:	492d      	ldr	r1, [pc, #180]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801ab62:	4620      	mov	r0, r4
 801ab64:	f004 fa4c 	bl	801f000 <siprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801ab68:	2303      	movs	r3, #3
 801ab6a:	4622      	mov	r2, r4
 801ab6c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ab70:	2041      	movs	r0, #65	; 0x41
 801ab72:	f001 f97d 	bl	801be70 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801ab76:	886a      	ldrh	r2, [r5, #2]
 801ab78:	4927      	ldr	r1, [pc, #156]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	f004 fa40 	bl	801f000 <siprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801ab80:	2303      	movs	r3, #3
 801ab82:	4622      	mov	r2, r4
 801ab84:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ab88:	20a5      	movs	r0, #165	; 0xa5
 801ab8a:	f001 f971 	bl	801be70 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801ab8e:	88aa      	ldrh	r2, [r5, #4]
 801ab90:	4921      	ldr	r1, [pc, #132]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801ab92:	4620      	mov	r0, r4
 801ab94:	f004 fa34 	bl	801f000 <siprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801ab98:	2303      	movs	r3, #3
 801ab9a:	4622      	mov	r2, r4
 801ab9c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801aba0:	f240 1009 	movw	r0, #265	; 0x109
 801aba4:	f001 f964 	bl	801be70 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801aba8:	88ea      	ldrh	r2, [r5, #6]
 801abaa:	491b      	ldr	r1, [pc, #108]	; (801ac18 <Spectral_Axes_Text+0x1b4>)
 801abac:	4620      	mov	r0, r4
 801abae:	f004 fa27 	bl	801f000 <siprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801abb2:	2303      	movs	r3, #3
 801abb4:	4622      	mov	r2, r4
 801abb6:	f44f 7181 	mov.w	r1, #258	; 0x102
 801abba:	f240 106d 	movw	r0, #365	; 0x16d
 801abbe:	f001 f957 	bl	801be70 <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801abc2:	2230      	movs	r2, #48	; 0x30
 801abc4:	21fa      	movs	r1, #250	; 0xfa
 801abc6:	2041      	movs	r0, #65	; 0x41
 801abc8:	f001 f8fa 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801abcc:	2230      	movs	r2, #48	; 0x30
 801abce:	2195      	movs	r1, #149	; 0x95
 801abd0:	2039      	movs	r0, #57	; 0x39
 801abd2:	f001 f8f5 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801abd6:	222e      	movs	r2, #46	; 0x2e
 801abd8:	2195      	movs	r1, #149	; 0x95
 801abda:	203e      	movs	r0, #62	; 0x3e
 801abdc:	f001 f8f0 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801abe0:	2235      	movs	r2, #53	; 0x35
 801abe2:	2195      	movs	r1, #149	; 0x95
 801abe4:	2043      	movs	r0, #67	; 0x43
 801abe6:	f001 f8eb 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801abea:	2231      	movs	r2, #49	; 0x31
 801abec:	212b      	movs	r1, #43	; 0x2b
 801abee:	2039      	movs	r0, #57	; 0x39
 801abf0:	f001 f8e6 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801abf4:	222e      	movs	r2, #46	; 0x2e
 801abf6:	212b      	movs	r1, #43	; 0x2b
 801abf8:	203e      	movs	r0, #62	; 0x3e
 801abfa:	f001 f8e1 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801abfe:	2230      	movs	r2, #48	; 0x30
 801ac00:	212b      	movs	r1, #43	; 0x2b
 801ac02:	2043      	movs	r0, #67	; 0x43
 801ac04:	f001 f8dc 	bl	801bdc0 <TFT_DrawChar>
		TFT_direction = 0x00;
 801ac08:	2300      	movs	r3, #0
 801ac0a:	703b      	strb	r3, [r7, #0]
}
 801ac0c:	e794      	b.n	801ab38 <Spectral_Axes_Text+0xd4>
 801ac0e:	bf00      	nop
 801ac10:	20050c04 	.word	0x20050c04
 801ac14:	20000210 	.word	0x20000210
 801ac18:	0802e712 	.word	0x0802e712
 801ac1c:	20004c40 	.word	0x20004c40

0801ac20 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801ac20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac24:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801ac28:	f1b8 0f00 	cmp.w	r8, #0
 801ac2c:	bf0c      	ite	eq
 801ac2e:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801ac32:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801ac36:	4682      	mov	sl, r0
 801ac38:	461f      	mov	r7, r3
 801ac3a:	4614      	mov	r4, r2
 801ac3c:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801ac40:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801ac42:	f100 0b01 	add.w	fp, r0, #1
 801ac46:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801ac48:	f1b8 0f00 	cmp.w	r8, #0
 801ac4c:	d10e      	bne.n	801ac6c <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801ac4e:	8863      	ldrh	r3, [r4, #2]
 801ac50:	8821      	ldrh	r1, [r4, #0]
 801ac52:	eb00 020b 	add.w	r2, r0, fp
 801ac56:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801ac5a:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801ac5e:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801ac60:	9700      	str	r7, [sp, #0]
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	b292      	uxth	r2, r2
 801ac66:	b289      	uxth	r1, r1
 801ac68:	b280      	uxth	r0, r0
 801ac6a:	e013      	b.n	801ac94 <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801ac6c:	f1b8 0f01 	cmp.w	r8, #1
 801ac70:	d11d      	bne.n	801acae <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801ac72:	8872      	ldrh	r2, [r6, #2]
 801ac74:	f8b6 e000 	ldrh.w	lr, [r6]
 801ac78:	9700      	str	r7, [sp, #0]
 801ac7a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801ac7e:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801ac82:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801ac86:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	b292      	uxth	r2, r2
 801ac8e:	b289      	uxth	r1, r1
 801ac90:	fa1f f08e 	uxth.w	r0, lr
 801ac94:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801ac96:	f000 fd43 	bl	801b720 <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801ac9a:	b2ab      	uxth	r3, r5
 801ac9c:	4599      	cmp	r9, r3
 801ac9e:	f104 0402 	add.w	r4, r4, #2
 801aca2:	f1a6 0602 	sub.w	r6, r6, #2
 801aca6:	d8ce      	bhi.n	801ac46 <Spectral_DrawGraph_Const+0x26>
	}
}
 801aca8:	b003      	add	sp, #12
 801acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801acae:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801acb2:	8862      	ldrh	r2, [r4, #2]
 801acb4:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801acb8:	8820      	ldrh	r0, [r4, #0]
 801acba:	3212      	adds	r2, #18
 801acbc:	3012      	adds	r0, #18
 801acbe:	e7cf      	b.n	801ac60 <Spectral_DrawGraph_Const+0x40>

0801acc0 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc4:	b085      	sub	sp, #20
 801acc6:	4699      	mov	r9, r3
 801acc8:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    float buf_pix;
    uint16_t i, j = 0;
    uint16_t graph_data[335];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801accc:	2c00      	cmp	r4, #0
 801acce:	bf0c      	ite	eq
 801acd0:	23f0      	moveq	r3, #240	; 0xf0
 801acd2:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801acd6:	9302      	str	r3, [sp, #8]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801acd8:	4b41      	ldr	r3, [pc, #260]	; (801ade0 <Spectral_DrawGraph_Line2+0x120>)
{
 801acda:	4616      	mov	r6, r2
    if( direction != Rotation_Screen_Spectral_Old2){
 801acdc:	781a      	ldrb	r2, [r3, #0]
 801acde:	42a2      	cmp	r2, r4
{
 801ace0:	4682      	mov	sl, r0
    if( direction != Rotation_Screen_Spectral_Old2){
 801ace2:	d01a      	beq.n	801ad1a <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801ace4:	2563      	movs	r5, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801ace6:	701c      	strb	r4, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801ace8:	f240 120f 	movw	r2, #271	; 0x10f
 801acec:	f240 13a5 	movw	r3, #421	; 0x1a5
 801acf0:	9500      	str	r5, [sp, #0]
 801acf2:	2137      	movs	r1, #55	; 0x37
 801acf4:	2001      	movs	r0, #1
 801acf6:	f000 fd70 	bl	801b7da <TFT_FillRectangle>
        if(Graph_Field&PPF_Bands)
 801acfa:	4b3a      	ldr	r3, [pc, #232]	; (801ade4 <Spectral_DrawGraph_Line2+0x124>)
 801acfc:	781b      	ldrb	r3, [r3, #0]
 801acfe:	07db      	lsls	r3, r3, #31
 801ad00:	d53b      	bpl.n	801ad7a <Spectral_DrawGraph_Line2+0xba>
        {
            Spectral_PAR_Range(direction);
 801ad02:	4620      	mov	r0, r4
 801ad04:	f7ff fdcc 	bl	801a8a0 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

    Spectral_Axes(direction);
 801ad08:	4620      	mov	r0, r4
 801ad0a:	f7ff fcfb 	bl	801a704 <Spectral_Axes>
    Spectral_Axes_Text(direction);
 801ad0e:	4620      	mov	r0, r4
 801ad10:	f7ff fea8 	bl	801aa64 <Spectral_Axes_Text>
						
    screen_cnt = 0;
 801ad14:	4b34      	ldr	r3, [pc, #208]	; (801ade8 <Spectral_DrawGraph_Line2+0x128>)
 801ad16:	2200      	movs	r2, #0
 801ad18:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801ad1a:	4a34      	ldr	r2, [pc, #208]	; (801adec <Spectral_DrawGraph_Line2+0x12c>)
        {
            flag_spectral = 1;
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801ad1c:	4f34      	ldr	r7, [pc, #208]	; (801adf0 <Spectral_DrawGraph_Line2+0x130>)
    flag_refresh = 1;
 801ad1e:	2301      	movs	r3, #1
 801ad20:	7013      	strb	r3, [r2, #0]
    i_coord = 0;
 801ad22:	4a34      	ldr	r2, [pc, #208]	; (801adf4 <Spectral_DrawGraph_Line2+0x134>)
				{flag_spectral = 1; 
 801ad24:	9303      	str	r3, [sp, #12]
    i_coord = 0;
 801ad26:	2500      	movs	r5, #0
 801ad28:	8015      	strh	r5, [r2, #0]
 801ad2a:	9a02      	ldr	r2, [sp, #8]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801ad2c:	46ab      	mov	fp, r5
 801ad2e:	eb06 0842 	add.w	r8, r6, r2, lsl #1
        if(direction == 0x00){
 801ad32:	bb64      	cbnz	r4, 801ad8e <Spectral_DrawGraph_Line2+0xce>
            flag_spectral = 1;
 801ad34:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ad38:	703b      	strb	r3, [r7, #0]
						DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);
 801ad3a:	8873      	ldrh	r3, [r6, #2]
 801ad3c:	8831      	ldrh	r1, [r6, #0]
 801ad3e:	f8cd 9000 	str.w	r9, [sp]
 801ad42:	b2a8      	uxth	r0, r5
 801ad44:	f10a 0201 	add.w	r2, sl, #1
 801ad48:	4402      	add	r2, r0
 801ad4a:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801ad4e:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801ad52:	4450      	add	r0, sl
 801ad54:	b29b      	uxth	r3, r3
 801ad56:	b292      	uxth	r2, r2
 801ad58:	b289      	uxth	r1, r1
 801ad5a:	b280      	uxth	r0, r0
 801ad5c:	f001 f8d0 	bl	801bf00 <DrawLineX>
            flag_spectral = 0;
 801ad60:	703c      	strb	r4, [r7, #0]
 801ad62:	3501      	adds	r5, #1
    for(i = 0; i < graph_lenht; i++)
 801ad64:	9a02      	ldr	r2, [sp, #8]
 801ad66:	b2ab      	uxth	r3, r5
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	f106 0602 	add.w	r6, r6, #2
 801ad6e:	f1a8 0802 	sub.w	r8, r8, #2
 801ad72:	d8de      	bhi.n	801ad32 <Spectral_DrawGraph_Line2+0x72>
					}
}
 801ad74:	b005      	add	sp, #20
 801ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801ad7a:	9500      	str	r5, [sp, #0]
 801ad7c:	f240 13a5 	movw	r3, #421	; 0x1a5
 801ad80:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801ad84:	2137      	movs	r1, #55	; 0x37
 801ad86:	2005      	movs	r0, #5
 801ad88:	f000 fd27 	bl	801b7da <TFT_FillRectangle>
 801ad8c:	e7bc      	b.n	801ad08 <Spectral_DrawGraph_Line2+0x48>
        else if(direction == 0x01)
 801ad8e:	2c01      	cmp	r4, #1
 801ad90:	d117      	bne.n	801adc2 <Spectral_DrawGraph_Line2+0x102>
            flag_spectral = 1;
 801ad92:	703c      	strb	r4, [r7, #0]
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801ad94:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801ad98:	f8b8 0000 	ldrh.w	r0, [r8]
 801ad9c:	b2a9      	uxth	r1, r5
 801ad9e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 801ada2:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801ada6:	3149      	adds	r1, #73	; 0x49
 801ada8:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801adac:	f8cd 9000 	str.w	r9, [sp]
 801adb0:	b29b      	uxth	r3, r3
 801adb2:	b292      	uxth	r2, r2
 801adb4:	b289      	uxth	r1, r1
 801adb6:	b280      	uxth	r0, r0
 801adb8:	f001 f8a2 	bl	801bf00 <DrawLineX>
				flag_spectral = 0;}
 801adbc:	f887 b000 	strb.w	fp, [r7]
 801adc0:	e7cf      	b.n	801ad62 <Spectral_DrawGraph_Line2+0xa2>
        } else if(direction == 0x02)
 801adc2:	2c02      	cmp	r4, #2
 801adc4:	d1cd      	bne.n	801ad62 <Spectral_DrawGraph_Line2+0xa2>
				{flag_spectral = 1; 
 801adc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801adca:	703b      	strb	r3, [r7, #0]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801adcc:	8872      	ldrh	r2, [r6, #2]
 801adce:	8830      	ldrh	r0, [r6, #0]
 801add0:	b2a9      	uxth	r1, r5
 801add2:	f101 034d 	add.w	r3, r1, #77	; 0x4d
 801add6:	3212      	adds	r2, #18
 801add8:	314c      	adds	r1, #76	; 0x4c
 801adda:	3012      	adds	r0, #18
 801addc:	e7e6      	b.n	801adac <Spectral_DrawGraph_Line2+0xec>
 801adde:	bf00      	nop
 801ade0:	2008d8a1 	.word	0x2008d8a1
 801ade4:	20004ca2 	.word	0x20004ca2
 801ade8:	20004fba 	.word	0x20004fba
 801adec:	20004fb6 	.word	0x20004fb6
 801adf0:	20004fb7 	.word	0x20004fb7
 801adf4:	20004fb8 	.word	0x20004fb8

0801adf8 <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801adf8:	b570      	push	{r4, r5, r6, lr}
 801adfa:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801adfe:	eddf 7a23 	vldr	s15, [pc, #140]	; 801ae8c <Rabs_graph_to_display+0x94>
 801ae02:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801ae90 <Rabs_graph_to_display+0x98>
 801ae06:	2800      	cmp	r0, #0
{    
 801ae08:	b082      	sub	sp, #8
 801ae0a:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801ae0c:	f240 22c6 	movw	r2, #710	; 0x2c6
 801ae10:	f04f 0100 	mov.w	r1, #0
 801ae14:	481f      	ldr	r0, [pc, #124]	; (801ae94 <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801ae16:	bf14      	ite	ne
 801ae18:	2403      	movne	r4, #3
 801ae1a:	2404      	moveq	r4, #4
 801ae1c:	bf08      	it	eq
 801ae1e:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801ae22:	f004 f8e4 	bl	801efee <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801ae26:	4b1c      	ldr	r3, [pc, #112]	; (801ae98 <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801ae28:	481a      	ldr	r0, [pc, #104]	; (801ae94 <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801ae2a:	ed93 7a00 	vldr	s14, [r3]
 801ae2e:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801ae30:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801ae32:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801ae36:	edd2 6a00 	vldr	s13, [r2]
 801ae3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ae3e:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801ae40:	b28d      	uxth	r5, r1
 801ae42:	b29b      	uxth	r3, r3
 801ae44:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801ae46:	ee67 7a88 	vmul.f32	s15, s15, s16
 801ae4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ae4e:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801ae52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ae56:	ee07 2a90 	vmov	s15, r2
 801ae5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ae62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae66:	bf4c      	ite	mi
 801ae68:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801ae6c:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801ae70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801ae74:	edcd 7a01 	vstr	s15, [sp, #4]
 801ae78:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ae7c:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801ae80:	d3d7      	bcc.n	801ae32 <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801ae82:	b002      	add	sp, #8
 801ae84:	ecbd 8b02 	vpop	{d8}
 801ae88:	bd70      	pop	{r4, r5, r6, pc}
 801ae8a:	bf00      	nop
 801ae8c:	43998000 	.word	0x43998000
 801ae90:	43510000 	.word	0x43510000
 801ae94:	20004cf0 	.word	0x20004cf0
 801ae98:	2008ff8c 	.word	0x2008ff8c

0801ae9c <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea0:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801aea2:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801aea4:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801b1f8 <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	bf0c      	ite	eq
 801aeac:	23f0      	moveq	r3, #240	; 0xf0
 801aeae:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801aeb2:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801aeb4:	9303      	str	r3, [sp, #12]
 801aeb6:	4616      	mov	r6, r2
 801aeb8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801aebc:	2400      	movs	r4, #0
        if(direction == 0x00){
 801aebe:	2d00      	cmp	r5, #0
 801aec0:	f040 80a0 	bne.w	801b004 <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801aec4:	f898 3000 	ldrb.w	r3, [r8]
 801aec8:	07db      	lsls	r3, r3, #31
 801aeca:	d529      	bpl.n	801af20 <Refresh_screen_Graph+0x84>
 801aecc:	4bc6      	ldr	r3, [pc, #792]	; (801b1e8 <Refresh_screen_Graph+0x34c>)
 801aece:	8819      	ldrh	r1, [r3, #0]
 801aed0:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801aed4:	0889      	lsrs	r1, r1, #2
 801aed6:	9300      	str	r3, [sp, #0]
 801aed8:	f240 1277 	movw	r2, #375	; 0x177
 801aedc:	f101 0314 	add.w	r3, r1, #20
 801aee0:	2044      	movs	r0, #68	; 0x44
 801aee2:	3112      	adds	r1, #18
 801aee4:	f000 fa3a 	bl	801b35c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801aee8:	4bc0      	ldr	r3, [pc, #768]	; (801b1ec <Refresh_screen_Graph+0x350>)
 801aeea:	8819      	ldrh	r1, [r3, #0]
 801aeec:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801aef0:	0889      	lsrs	r1, r1, #2
 801aef2:	9300      	str	r3, [sp, #0]
 801aef4:	f240 1277 	movw	r2, #375	; 0x177
 801aef8:	f101 0314 	add.w	r3, r1, #20
 801aefc:	2044      	movs	r0, #68	; 0x44
 801aefe:	3112      	adds	r1, #18
 801af00:	f000 fa2c 	bl	801b35c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801af04:	4bba      	ldr	r3, [pc, #744]	; (801b1f0 <Refresh_screen_Graph+0x354>)
 801af06:	8819      	ldrh	r1, [r3, #0]
 801af08:	f641 3346 	movw	r3, #6982	; 0x1b46
 801af0c:	0889      	lsrs	r1, r1, #2
 801af0e:	9300      	str	r3, [sp, #0]
 801af10:	f240 1277 	movw	r2, #375	; 0x177
 801af14:	f101 0314 	add.w	r3, r1, #20
 801af18:	2044      	movs	r0, #68	; 0x44
 801af1a:	3112      	adds	r1, #18
 801af1c:	f000 fa1e 	bl	801b35c <TFT_FillRectangle_DMA>
 801af20:	b2a2      	uxth	r2, r4
 801af22:	f10a 0301 	add.w	r3, sl, #1
 801af26:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801af2a:	8831      	ldrh	r1, [r6, #0]
 801af2c:	f898 7000 	ldrb.w	r7, [r8]
 801af30:	441a      	add	r2, r3
 801af32:	8873      	ldrh	r3, [r6, #2]
 801af34:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801af38:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801af3c:	07ff      	lsls	r7, r7, #31
 801af3e:	b280      	uxth	r0, r0
 801af40:	b289      	uxth	r1, r1
 801af42:	b292      	uxth	r2, r2
 801af44:	b29b      	uxth	r3, r3
 801af46:	f140 8161 	bpl.w	801b20c <Refresh_screen_Graph+0x370>
 801af4a:	4faa      	ldr	r7, [pc, #680]	; (801b1f4 <Refresh_screen_Graph+0x358>)
 801af4c:	883f      	ldrh	r7, [r7, #0]
 801af4e:	08bf      	lsrs	r7, r7, #2
 801af50:	eb0a 0c04 	add.w	ip, sl, r4
 801af54:	3712      	adds	r7, #18
 801af56:	4567      	cmp	r7, ip
 801af58:	f280 8158 	bge.w	801b20c <Refresh_screen_Graph+0x370>
 801af5c:	4fa2      	ldr	r7, [pc, #648]	; (801b1e8 <Refresh_screen_Graph+0x34c>)
 801af5e:	883f      	ldrh	r7, [r7, #0]
 801af60:	08bf      	lsrs	r7, r7, #2
 801af62:	3712      	adds	r7, #18
 801af64:	4567      	cmp	r7, ip
 801af66:	f280 8153 	bge.w	801b210 <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801af6a:	4fa0      	ldr	r7, [pc, #640]	; (801b1ec <Refresh_screen_Graph+0x350>)
 801af6c:	883f      	ldrh	r7, [r7, #0]
 801af6e:	08bf      	lsrs	r7, r7, #2
 801af70:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801af72:	4567      	cmp	r7, ip
 801af74:	f280 814f 	bge.w	801b216 <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801af78:	4f9d      	ldr	r7, [pc, #628]	; (801b1f0 <Refresh_screen_Graph+0x354>)
 801af7a:	f8b7 e000 	ldrh.w	lr, [r7]
 801af7e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801af82:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801af86:	f641 3b46 	movw	fp, #6982	; 0x1b46
 801af8a:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801af8e:	45e6      	cmp	lr, ip
 801af90:	bfb8      	it	lt
 801af92:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801af94:	9700      	str	r7, [sp, #0]
 801af96:	f000 ffb3 	bl	801bf00 <DrawLineX>
 801af9a:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801af9c:	9a03      	ldr	r2, [sp, #12]
 801af9e:	b2a3      	uxth	r3, r4
 801afa0:	429a      	cmp	r2, r3
 801afa2:	f106 0602 	add.w	r6, r6, #2
 801afa6:	f1a9 0902 	sub.w	r9, r9, #2
 801afaa:	d888      	bhi.n	801aebe <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801afac:	4c92      	ldr	r4, [pc, #584]	; (801b1f8 <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801afae:	4628      	mov	r0, r5
 801afb0:	f7ff fba8 	bl	801a704 <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801afb4:	7822      	ldrb	r2, [r4, #0]
 801afb6:	0752      	lsls	r2, r2, #29
 801afb8:	d50e      	bpl.n	801afd8 <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801afba:	2114      	movs	r1, #20
 801afbc:	4608      	mov	r0, r1
 801afbe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801afc2:	4a8e      	ldr	r2, [pc, #568]	; (801b1fc <Refresh_screen_Graph+0x360>)
 801afc4:	9500      	str	r5, [sp, #0]
 801afc6:	f7ff fe2b 	bl	801ac20 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801afca:	2114      	movs	r1, #20
 801afcc:	9500      	str	r5, [sp, #0]
 801afce:	231f      	movs	r3, #31
 801afd0:	4a8b      	ldr	r2, [pc, #556]	; (801b200 <Refresh_screen_Graph+0x364>)
 801afd2:	4608      	mov	r0, r1
 801afd4:	f7ff fe24 	bl	801ac20 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801afd8:	7823      	ldrb	r3, [r4, #0]
 801afda:	079b      	lsls	r3, r3, #30
 801afdc:	d50f      	bpl.n	801affe <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801afde:	2114      	movs	r1, #20
 801afe0:	4608      	mov	r0, r1
 801afe2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801afe6:	4a87      	ldr	r2, [pc, #540]	; (801b204 <Refresh_screen_Graph+0x368>)
 801afe8:	9500      	str	r5, [sp, #0]
 801afea:	f7ff fe19 	bl	801ac20 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801afee:	2114      	movs	r1, #20
 801aff0:	9500      	str	r5, [sp, #0]
 801aff2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801aff6:	4a84      	ldr	r2, [pc, #528]	; (801b208 <Refresh_screen_Graph+0x36c>)
 801aff8:	4608      	mov	r0, r1
 801affa:	f7ff fe11 	bl	801ac20 <Spectral_DrawGraph_Const>
					}
 801affe:	b005      	add	sp, #20
 801b000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801b004:	2d01      	cmp	r5, #1
 801b006:	d178      	bne.n	801b0fa <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801b008:	f898 3000 	ldrb.w	r3, [r8]
 801b00c:	07db      	lsls	r3, r3, #31
 801b00e:	d530      	bpl.n	801b072 <Refresh_screen_Graph+0x1d6>
 801b010:	4b75      	ldr	r3, [pc, #468]	; (801b1e8 <Refresh_screen_Graph+0x34c>)
 801b012:	2703      	movs	r7, #3
 801b014:	8818      	ldrh	r0, [r3, #0]
 801b016:	fbb0 f0f7 	udiv	r0, r0, r7
 801b01a:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801b01e:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801b022:	304c      	adds	r0, #76	; 0x4c
 801b024:	9300      	str	r3, [sp, #0]
 801b026:	b292      	uxth	r2, r2
 801b028:	23fd      	movs	r3, #253	; 0xfd
 801b02a:	212d      	movs	r1, #45	; 0x2d
 801b02c:	b280      	uxth	r0, r0
 801b02e:	f000 f995 	bl	801b35c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801b032:	4b6e      	ldr	r3, [pc, #440]	; (801b1ec <Refresh_screen_Graph+0x350>)
 801b034:	8818      	ldrh	r0, [r3, #0]
 801b036:	fbb0 f0f7 	udiv	r0, r0, r7
 801b03a:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801b03e:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801b042:	304c      	adds	r0, #76	; 0x4c
 801b044:	9300      	str	r3, [sp, #0]
 801b046:	b292      	uxth	r2, r2
 801b048:	23fd      	movs	r3, #253	; 0xfd
 801b04a:	212d      	movs	r1, #45	; 0x2d
 801b04c:	b280      	uxth	r0, r0
 801b04e:	f000 f985 	bl	801b35c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801b052:	4b67      	ldr	r3, [pc, #412]	; (801b1f0 <Refresh_screen_Graph+0x354>)
 801b054:	8818      	ldrh	r0, [r3, #0]
 801b056:	fbb0 f7f7 	udiv	r7, r0, r7
 801b05a:	f641 3346 	movw	r3, #6982	; 0x1b46
 801b05e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801b062:	374c      	adds	r7, #76	; 0x4c
 801b064:	9300      	str	r3, [sp, #0]
 801b066:	b292      	uxth	r2, r2
 801b068:	23fd      	movs	r3, #253	; 0xfd
 801b06a:	212d      	movs	r1, #45	; 0x2d
 801b06c:	b2b8      	uxth	r0, r7
 801b06e:	f000 f975 	bl	801b35c <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801b072:	f8b9 0000 	ldrh.w	r0, [r9]
 801b076:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801b07a:	f898 7000 	ldrb.w	r7, [r8]
 801b07e:	b2a3      	uxth	r3, r4
 801b080:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801b084:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801b088:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b08c:	3348      	adds	r3, #72	; 0x48
 801b08e:	07ff      	lsls	r7, r7, #31
 801b090:	b280      	uxth	r0, r0
 801b092:	b289      	uxth	r1, r1
 801b094:	b292      	uxth	r2, r2
 801b096:	b29b      	uxth	r3, r3
 801b098:	f140 80b8 	bpl.w	801b20c <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801b09c:	4f54      	ldr	r7, [pc, #336]	; (801b1f0 <Refresh_screen_Graph+0x354>)
 801b09e:	f8b7 c000 	ldrh.w	ip, [r7]
 801b0a2:	f240 1793 	movw	r7, #403	; 0x193
 801b0a6:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801b0aa:	f04f 0e03 	mov.w	lr, #3
 801b0ae:	fbbc fcfe 	udiv	ip, ip, lr
 801b0b2:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801b0b6:	45dc      	cmp	ip, fp
 801b0b8:	dc19      	bgt.n	801b0ee <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801b0ba:	f8df c130 	ldr.w	ip, [pc, #304]	; 801b1ec <Refresh_screen_Graph+0x350>
 801b0be:	f8bc c000 	ldrh.w	ip, [ip]
 801b0c2:	fbbc fcfe 	udiv	ip, ip, lr
 801b0c6:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801b0ca:	45dc      	cmp	ip, fp
 801b0cc:	dc12      	bgt.n	801b0f4 <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801b0ce:	f8df c118 	ldr.w	ip, [pc, #280]	; 801b1e8 <Refresh_screen_Graph+0x34c>
 801b0d2:	f8bc c000 	ldrh.w	ip, [ip]
 801b0d6:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801b0da:	f242 2cb2 	movw	ip, #8882	; 0x22b2
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801b0de:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801b0e2:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801b0e6:	45de      	cmp	lr, fp
 801b0e8:	bfd8      	it	le
 801b0ea:	4667      	movle	r7, ip
 801b0ec:	e752      	b.n	801af94 <Refresh_screen_Graph+0xf8>
 801b0ee:	f641 3746 	movw	r7, #6982	; 0x1b46
 801b0f2:	e74f      	b.n	801af94 <Refresh_screen_Graph+0xf8>
 801b0f4:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801b0f8:	e74c      	b.n	801af94 <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801b0fa:	2d02      	cmp	r5, #2
 801b0fc:	f47f af4d 	bne.w	801af9a <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801b100:	f898 3000 	ldrb.w	r3, [r8]
 801b104:	07db      	lsls	r3, r3, #31
 801b106:	d535      	bpl.n	801b174 <Refresh_screen_Graph+0x2d8>
 801b108:	4b37      	ldr	r3, [pc, #220]	; (801b1e8 <Refresh_screen_Graph+0x34c>)
 801b10a:	f240 1795 	movw	r7, #405	; 0x195
 801b10e:	8818      	ldrh	r0, [r3, #0]
 801b110:	f04f 0b03 	mov.w	fp, #3
 801b114:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801b118:	fbb0 f0fb 	udiv	r0, r0, fp
 801b11c:	1a3a      	subs	r2, r7, r0
 801b11e:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801b122:	9300      	str	r3, [sp, #0]
 801b124:	b292      	uxth	r2, r2
 801b126:	23e3      	movs	r3, #227	; 0xe3
 801b128:	2113      	movs	r1, #19
 801b12a:	b280      	uxth	r0, r0
 801b12c:	f000 f916 	bl	801b35c <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801b130:	4b2e      	ldr	r3, [pc, #184]	; (801b1ec <Refresh_screen_Graph+0x350>)
 801b132:	8818      	ldrh	r0, [r3, #0]
 801b134:	fbb0 f0fb 	udiv	r0, r0, fp
 801b138:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801b13c:	1a3a      	subs	r2, r7, r0
 801b13e:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801b142:	9300      	str	r3, [sp, #0]
 801b144:	b292      	uxth	r2, r2
 801b146:	23e3      	movs	r3, #227	; 0xe3
 801b148:	2113      	movs	r1, #19
 801b14a:	b280      	uxth	r0, r0
 801b14c:	f000 f906 	bl	801b35c <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801b150:	4b27      	ldr	r3, [pc, #156]	; (801b1f0 <Refresh_screen_Graph+0x354>)
 801b152:	8818      	ldrh	r0, [r3, #0]
 801b154:	fbb0 fbfb 	udiv	fp, r0, fp
 801b158:	f641 3346 	movw	r3, #6982	; 0x1b46
 801b15c:	eba7 020b 	sub.w	r2, r7, fp
 801b160:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801b164:	9300      	str	r3, [sp, #0]
 801b166:	b292      	uxth	r2, r2
 801b168:	23e3      	movs	r3, #227	; 0xe3
 801b16a:	2113      	movs	r1, #19
 801b16c:	fa1f f08b 	uxth.w	r0, fp
 801b170:	f000 f8f4 	bl	801b35c <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b174:	8830      	ldrh	r0, [r6, #0]
 801b176:	8872      	ldrh	r2, [r6, #2]
 801b178:	f898 7000 	ldrb.w	r7, [r8]
 801b17c:	b2a3      	uxth	r3, r4
 801b17e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801b182:	3012      	adds	r0, #18
 801b184:	3212      	adds	r2, #18
 801b186:	334d      	adds	r3, #77	; 0x4d
 801b188:	07ff      	lsls	r7, r7, #31
 801b18a:	b280      	uxth	r0, r0
 801b18c:	b289      	uxth	r1, r1
 801b18e:	b292      	uxth	r2, r2
 801b190:	b29b      	uxth	r3, r3
 801b192:	d53b      	bpl.n	801b20c <Refresh_screen_Graph+0x370>
 801b194:	4f17      	ldr	r7, [pc, #92]	; (801b1f4 <Refresh_screen_Graph+0x358>)
 801b196:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801b19a:	f8b7 e000 	ldrh.w	lr, [r7]
 801b19e:	2703      	movs	r7, #3
 801b1a0:	fbbe fef7 	udiv	lr, lr, r7
 801b1a4:	45e6      	cmp	lr, ip
 801b1a6:	dc31      	bgt.n	801b20c <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue : 
 801b1a8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801b1e8 <Refresh_screen_Graph+0x34c>
 801b1ac:	f104 0e02 	add.w	lr, r4, #2
 801b1b0:	f8bc c000 	ldrh.w	ip, [ip]
 801b1b4:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b1b8:	45f4      	cmp	ip, lr
 801b1ba:	dc29      	bgt.n	801b210 <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green : 
 801b1bc:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801b1ec <Refresh_screen_Graph+0x350>
 801b1c0:	f8bc c000 	ldrh.w	ip, [ip]
 801b1c4:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b1c8:	45f4      	cmp	ip, lr
 801b1ca:	dc24      	bgt.n	801b216 <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801b1cc:	f8df c020 	ldr.w	ip, [pc, #32]	; 801b1f0 <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b1d0:	f641 3b46 	movw	fp, #6982	; 0x1b46
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801b1d4:	f8bc c000 	ldrh.w	ip, [ip]
 801b1d8:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b1dc:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801b1e0:	45f4      	cmp	ip, lr
 801b1e2:	bfd8      	it	le
 801b1e4:	465f      	movle	r7, fp
 801b1e6:	e6d5      	b.n	801af94 <Refresh_screen_Graph+0xf8>
 801b1e8:	2009003c 	.word	0x2009003c
 801b1ec:	200901a0 	.word	0x200901a0
 801b1f0:	2008ff70 	.word	0x2008ff70
 801b1f4:	2008ff72 	.word	0x2008ff72
 801b1f8:	20004ca2 	.word	0x20004ca2
 801b1fc:	2008afa2 	.word	0x2008afa2
 801b200:	2008b540 	.word	0x2008b540
 801b204:	2008b27a 	.word	0x2008b27a
 801b208:	2008acdc 	.word	0x2008acdc
 801b20c:	2763      	movs	r7, #99	; 0x63
 801b20e:	e6c1      	b.n	801af94 <Refresh_screen_Graph+0xf8>
 801b210:	f242 27b2 	movw	r7, #8882	; 0x22b2
 801b214:	e6be      	b.n	801af94 <Refresh_screen_Graph+0xf8>
 801b216:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801b21a:	e6bb      	b.n	801af94 <Refresh_screen_Graph+0xf8>

0801b21c <TS_IO_Read>:
		GUI_Error_Screen();
	}
  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801b21c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801b21e:	aa06      	add	r2, sp, #24
 801b220:	2300      	movs	r3, #0
 801b222:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801b226:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b22a:	9302      	str	r3, [sp, #8]
 801b22c:	2301      	movs	r3, #1
 801b22e:	e88d 000c 	stmia.w	sp, {r2, r3}
 801b232:	460a      	mov	r2, r1
 801b234:	4601      	mov	r1, r0
 801b236:	4804      	ldr	r0, [pc, #16]	; (801b248 <TS_IO_Read+0x2c>)
 801b238:	f7e7 fa60 	bl	80026fc <HAL_I2C_Mem_Read>

  return read_value;
}
 801b23c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801b240:	b007      	add	sp, #28
 801b242:	f85d fb04 	ldr.w	pc, [sp], #4
 801b246:	bf00      	nop
 801b248:	2008fc50 	.word	0x2008fc50

0801b24c <TS_Get_XY1>:
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
  HAL_Delay(200);
}

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;
	uint16_t temp;
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801b24e:	b2c5      	uxtb	r5, r0
{
 801b250:	460e      	mov	r6, r1
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801b252:	4628      	mov	r0, r5
 801b254:	2103      	movs	r1, #3
{
 801b256:	4617      	mov	r7, r2
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801b258:	f7ff ffe0 	bl	801b21c <TS_IO_Read>
 801b25c:	4c11      	ldr	r4, [pc, #68]	; (801b2a4 <TS_Get_XY1+0x58>)
 801b25e:	0200      	lsls	r0, r0, #8
 801b260:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801b264:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801b266:	2104      	movs	r1, #4
 801b268:	4628      	mov	r0, r5
 801b26a:	f7ff ffd7 	bl	801b21c <TS_IO_Read>
 801b26e:	8823      	ldrh	r3, [r4, #0]
 801b270:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
		temp = coord;
		*Y = X_SIZE_Touch - coord;
 801b272:	4b0d      	ldr	r3, [pc, #52]	; (801b2a8 <TS_Get_XY1+0x5c>)
 801b274:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801b276:	b280      	uxth	r0, r0
 801b278:	8020      	strh	r0, [r4, #0]
		*Y = X_SIZE_Touch - coord;
 801b27a:	1a18      	subs	r0, r3, r0
 801b27c:	8038      	strh	r0, [r7, #0]
	}
	else{
		*X = coord;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0x0F00;
 801b27e:	2105      	movs	r1, #5
 801b280:	4628      	mov	r0, r5
 801b282:	f7ff ffcb 	bl	801b21c <TS_IO_Read>
 801b286:	0200      	lsls	r0, r0, #8
 801b288:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801b28c:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801b28e:	2106      	movs	r1, #6
 801b290:	4628      	mov	r0, r5
 801b292:	f7ff ffc3 	bl	801b21c <TS_IO_Read>
 801b296:	8823      	ldrh	r3, [r4, #0]
 801b298:	4318      	orrs	r0, r3
 801b29a:	b280      	uxth	r0, r0
 801b29c:	8020      	strh	r0, [r4, #0]
	
		if (Orientation90)
	{
		*X = coord;
 801b29e:	8030      	strh	r0, [r6, #0]
 801b2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	20004fbc 	.word	0x20004fbc
 801b2a8:	20000a46 	.word	0x20000a46

0801b2ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801b2ac:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801b2ae:	2301      	movs	r3, #1
 801b2b0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801b2b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801b2b8:	2b01      	cmp	r3, #1
 801b2ba:	d10e      	bne.n	801b2da <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801b2bc:	4808      	ldr	r0, [pc, #32]	; (801b2e0 <BSP_SD_Init+0x34>)
 801b2be:	f7e9 fced 	bl	8004c9c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801b2c2:	b938      	cbnz	r0, 801b2d4 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801b2c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b2c8:	4805      	ldr	r0, [pc, #20]	; (801b2e0 <BSP_SD_Init+0x34>)
 801b2ca:	f7e9 fc63 	bl	8004b94 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801b2ce:	3000      	adds	r0, #0
 801b2d0:	bf18      	it	ne
 801b2d2:	2001      	movne	r0, #1
}
 801b2d4:	b003      	add	sp, #12
 801b2d6:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801b2da:	2002      	movs	r0, #2
 801b2dc:	e7fa      	b.n	801b2d4 <BSP_SD_Init+0x28>
 801b2de:	bf00      	nop
 801b2e0:	2008fcb0 	.word	0x2008fcb0

0801b2e4 <BSP_SD_ReadBlocks_DMA>:
{
 801b2e4:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801b2e6:	4613      	mov	r3, r2
 801b2e8:	460a      	mov	r2, r1
 801b2ea:	4601      	mov	r1, r0
 801b2ec:	4803      	ldr	r0, [pc, #12]	; (801b2fc <BSP_SD_ReadBlocks_DMA+0x18>)
 801b2ee:	f7e9 f96d 	bl	80045cc <HAL_SD_ReadBlocks_DMA>
}
 801b2f2:	3000      	adds	r0, #0
 801b2f4:	bf18      	it	ne
 801b2f6:	2001      	movne	r0, #1
 801b2f8:	bd08      	pop	{r3, pc}
 801b2fa:	bf00      	nop
 801b2fc:	2008fcb0 	.word	0x2008fcb0

0801b300 <BSP_SD_WriteBlocks_DMA>:
{
 801b300:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801b302:	4613      	mov	r3, r2
 801b304:	460a      	mov	r2, r1
 801b306:	4601      	mov	r1, r0
 801b308:	4803      	ldr	r0, [pc, #12]	; (801b318 <BSP_SD_WriteBlocks_DMA+0x18>)
 801b30a:	f7e9 f9d1 	bl	80046b0 <HAL_SD_WriteBlocks_DMA>
}
 801b30e:	3000      	adds	r0, #0
 801b310:	bf18      	it	ne
 801b312:	2001      	movne	r0, #1
 801b314:	bd08      	pop	{r3, pc}
 801b316:	bf00      	nop
 801b318:	2008fcb0 	.word	0x2008fcb0

0801b31c <BSP_SD_GetCardState>:
{
 801b31c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801b31e:	4803      	ldr	r0, [pc, #12]	; (801b32c <BSP_SD_GetCardState+0x10>)
 801b320:	f7e9 fcf5 	bl	8004d0e <HAL_SD_GetCardState>
}
 801b324:	3804      	subs	r0, #4
 801b326:	bf18      	it	ne
 801b328:	2001      	movne	r0, #1
 801b32a:	bd08      	pop	{r3, pc}
 801b32c:	2008fcb0 	.word	0x2008fcb0

0801b330 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801b330:	4601      	mov	r1, r0
 801b332:	4801      	ldr	r0, [pc, #4]	; (801b338 <BSP_SD_GetCardInfo+0x8>)
 801b334:	f7e9 bc1c 	b.w	8004b70 <HAL_SD_GetCardInfo>
 801b338:	2008fcb0 	.word	0x2008fcb0

0801b33c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801b33c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801b33e:	4903      	ldr	r1, [pc, #12]	; (801b34c <MX_FATFS_Init+0x10>)
 801b340:	4803      	ldr	r0, [pc, #12]	; (801b350 <MX_FATFS_Init+0x14>)
 801b342:	f7ed fbcf 	bl	8008ae4 <FATFS_LinkDriver>
 801b346:	4b03      	ldr	r3, [pc, #12]	; (801b354 <MX_FATFS_Init+0x18>)
 801b348:	7018      	strb	r0, [r3, #0]
 801b34a:	bd08      	pop	{r3, pc}
 801b34c:	2008d8a5 	.word	0x2008d8a5
 801b350:	0802e72c 	.word	0x0802e72c
 801b354:	2008d8a4 	.word	0x2008d8a4

0801b358 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801b358:	2000      	movs	r0, #0
 801b35a:	4770      	bx	lr

0801b35c <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801b35c:	4290      	cmp	r0, r2
{
 801b35e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b362:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801b364:	bf88      	it	hi
 801b366:	4603      	movhi	r3, r0
{
 801b368:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801b36a:	bf84      	itt	hi
 801b36c:	4690      	movhi	r8, r2
 801b36e:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801b370:	42a9      	cmp	r1, r5
 801b372:	bf88      	it	hi
 801b374:	460b      	movhi	r3, r1
{
 801b376:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801b378:	bf84      	itt	hi
 801b37a:	462f      	movhi	r7, r5
 801b37c:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801b37e:	4b15      	ldr	r3, [pc, #84]	; (801b3d4 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801b380:	4e15      	ldr	r6, [pc, #84]	; (801b3d8 <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801b382:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801b386:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801b38a:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801b38e:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801b392:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801b396:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801b398:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801b39a:	eba9 0304 	sub.w	r3, r9, r4
 801b39e:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801b3a0:	f7e6 fb8e 	bl	8001ac0 <HAL_DMA2D_Init>
 801b3a4:	b990      	cbnz	r0, 801b3cc <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801b3a6:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801b3aa:	1bed      	subs	r5, r5, r7
 801b3ac:	9500      	str	r5, [sp, #0]
 801b3ae:	4623      	mov	r3, r4
 801b3b0:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801b3b4:	4651      	mov	r1, sl
 801b3b6:	4630      	mov	r0, r6
 801b3b8:	f7e6 fbcc 	bl	8001b54 <HAL_DMA2D_Start>
 801b3bc:	b930      	cbnz	r0, 801b3cc <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801b3be:	210a      	movs	r1, #10
 801b3c0:	4630      	mov	r0, r6
    }
  }
}
 801b3c2:	b003      	add	sp, #12
 801b3c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801b3c8:	f7e6 bbdd 	b.w	8001b86 <HAL_DMA2D_PollForTransfer>
}
 801b3cc:	b003      	add	sp, #12
 801b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3d2:	bf00      	nop
 801b3d4:	2008fe30 	.word	0x2008fe30
 801b3d8:	2009004c 	.word	0x2009004c

0801b3dc <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801b3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801b3de:	4c10      	ldr	r4, [pc, #64]	; (801b420 <TFT_FillScreen_DMA+0x44>)
 801b3e0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801b3e4:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801b3e6:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801b3e8:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801b3ea:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801b3ec:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801b3ee:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801b3f0:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801b3f2:	f7e6 fb65 	bl	8001ac0 <HAL_DMA2D_Init>
 801b3f6:	b980      	cbnz	r0, 801b41a <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801b3f8:	4a0a      	ldr	r2, [pc, #40]	; (801b424 <TFT_FillScreen_DMA+0x48>)
 801b3fa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801b3fc:	9300      	str	r3, [sp, #0]
 801b3fe:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801b400:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b402:	4631      	mov	r1, r6
 801b404:	4620      	mov	r0, r4
 801b406:	f7e6 fba5 	bl	8001b54 <HAL_DMA2D_Start>
 801b40a:	b930      	cbnz	r0, 801b41a <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801b40c:	4629      	mov	r1, r5
 801b40e:	4620      	mov	r0, r4
    }
  }
}
 801b410:	b002      	add	sp, #8
 801b412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801b416:	f7e6 bbb6 	b.w	8001b86 <HAL_DMA2D_PollForTransfer>
}
 801b41a:	b002      	add	sp, #8
 801b41c:	bd70      	pop	{r4, r5, r6, pc}
 801b41e:	bf00      	nop
 801b420:	2009004c 	.word	0x2009004c
 801b424:	2008fe30 	.word	0x2008fe30

0801b428 <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801b428:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801b42a:	4b14      	ldr	r3, [pc, #80]	; (801b47c <TFT_DrawPixel+0x54>)
 801b42c:	781c      	ldrb	r4, [r3, #0]
 801b42e:	b97c      	cbnz	r4, 801b450 <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801b430:	4b13      	ldr	r3, [pc, #76]	; (801b480 <TFT_DrawPixel+0x58>)
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801b436:	4913      	ldr	r1, [pc, #76]	; (801b484 <TFT_DrawPixel+0x5c>)
 801b438:	8809      	ldrh	r1, [r1, #0]
 801b43a:	3901      	subs	r1, #1
 801b43c:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801b43e:	4812      	ldr	r0, [pc, #72]	; (801b488 <TFT_DrawPixel+0x60>)
 801b440:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801b442:	b289      	uxth	r1, r1
 801b444:	fb04 3111 	mls	r1, r4, r1, r3
 801b448:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801b44a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801b44e:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801b450:	781c      	ldrb	r4, [r3, #0]
 801b452:	2c01      	cmp	r4, #1
 801b454:	d105      	bne.n	801b462 <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801b456:	4c0c      	ldr	r4, [pc, #48]	; (801b488 <TFT_DrawPixel+0x60>)
 801b458:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801b45a:	fb03 0101 	mla	r1, r3, r1, r0
 801b45e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801b460:	e7f3      	b.n	801b44a <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801b462:	781b      	ldrb	r3, [r3, #0]
 801b464:	2b02      	cmp	r3, #2
 801b466:	d1f2      	bne.n	801b44e <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801b468:	4b05      	ldr	r3, [pc, #20]	; (801b480 <TFT_DrawPixel+0x58>)
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	1a18      	subs	r0, r3, r0
 801b46e:	4b06      	ldr	r3, [pc, #24]	; (801b488 <TFT_DrawPixel+0x60>)
 801b470:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801b472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b474:	fb04 0111 	mls	r1, r4, r1, r0
 801b478:	e7e7      	b.n	801b44a <TFT_DrawPixel+0x22>
 801b47a:	bf00      	nop
 801b47c:	20004c40 	.word	0x20004c40
 801b480:	20000a48 	.word	0x20000a48
 801b484:	20000a4e 	.word	0x20000a4e
 801b488:	2008fe30 	.word	0x2008fe30

0801b48c <TFT_DrawCircleCorner>:
{
 801b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b490:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801b492:	b293      	uxth	r3, r2
 801b494:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801b498:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801b49c:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801b49e:	005b      	lsls	r3, r3, #1
 801b4a0:	b21b      	sxth	r3, r3
 801b4a2:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801b4a8:	f00a 0301 	and.w	r3, sl, #1
{
 801b4ac:	4689      	mov	r9, r1
 801b4ae:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801b4b0:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801b4b2:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801b4b4:	b287      	uxth	r7, r0
    while (x < y) {
 801b4b6:	f9bd 3000 	ldrsh.w	r3, [sp]
 801b4ba:	42b3      	cmp	r3, r6
 801b4bc:	db02      	blt.n	801b4c4 <TFT_DrawCircleCorner+0x38>
}
 801b4be:	b005      	add	sp, #20
 801b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801b4c4:	2c00      	cmp	r4, #0
 801b4c6:	db08      	blt.n	801b4da <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801b4c8:	9b01      	ldr	r3, [sp, #4]
 801b4ca:	3302      	adds	r3, #2
 801b4cc:	b29b      	uxth	r3, r3
            y--;
 801b4ce:	3e01      	subs	r6, #1
            ddF_y += 2;
 801b4d0:	b21a      	sxth	r2, r3
            f += ddF_y;
 801b4d2:	441c      	add	r4, r3
            y--;
 801b4d4:	b236      	sxth	r6, r6
            ddF_y += 2;
 801b4d6:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801b4d8:	b224      	sxth	r4, r4
 801b4da:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801b4de:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801b4e0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801b4e4:	3403      	adds	r4, #3
 801b4e6:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801b4e8:	b1e3      	cbz	r3, 801b524 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801b4ea:	fa1f f889 	uxth.w	r8, r9
 801b4ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b4f2:	9303      	str	r3, [sp, #12]
 801b4f4:	fa1f fb86 	uxth.w	fp, r6
 801b4f8:	f108 3eff 	add.w	lr, r8, #4294967295
 801b4fc:	ebae 0e05 	sub.w	lr, lr, r5
 801b500:	eba7 000b 	sub.w	r0, r7, fp
 801b504:	461a      	mov	r2, r3
 801b506:	fa1f f18e 	uxth.w	r1, lr
 801b50a:	b280      	uxth	r0, r0
 801b50c:	f7ff ff8c 	bl	801b428 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801b510:	1e78      	subs	r0, r7, #1
 801b512:	9b03      	ldr	r3, [sp, #12]
 801b514:	eba8 010b 	sub.w	r1, r8, fp
 801b518:	1b40      	subs	r0, r0, r5
 801b51a:	461a      	mov	r2, r3
 801b51c:	b289      	uxth	r1, r1
 801b51e:	b280      	uxth	r0, r0
 801b520:	f7ff ff82 	bl	801b428 <TFT_DrawPixel>
        if (corner & 0x02) {	
 801b524:	f01a 0f02 	tst.w	sl, #2
 801b528:	d01a      	beq.n	801b560 <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801b52a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b52e:	9303      	str	r3, [sp, #12]
 801b530:	fa1f f889 	uxth.w	r8, r9
 801b534:	fa1f fb86 	uxth.w	fp, r6
 801b538:	1c78      	adds	r0, r7, #1
 801b53a:	eba8 010b 	sub.w	r1, r8, fp
 801b53e:	4428      	add	r0, r5
 801b540:	461a      	mov	r2, r3
 801b542:	b289      	uxth	r1, r1
 801b544:	b280      	uxth	r0, r0
 801b546:	f7ff ff6f 	bl	801b428 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801b54a:	f108 31ff 	add.w	r1, r8, #4294967295
 801b54e:	9b03      	ldr	r3, [sp, #12]
 801b550:	1b49      	subs	r1, r1, r5
 801b552:	eb07 000b 	add.w	r0, r7, fp
 801b556:	461a      	mov	r2, r3
 801b558:	b289      	uxth	r1, r1
 801b55a:	b280      	uxth	r0, r0
 801b55c:	f7ff ff64 	bl	801b428 <TFT_DrawPixel>
		if (corner & 0x04) {	
 801b560:	f01a 0f04 	tst.w	sl, #4
 801b564:	d01a      	beq.n	801b59c <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801b566:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b56a:	9303      	str	r3, [sp, #12]
 801b56c:	fa1f f889 	uxth.w	r8, r9
 801b570:	fa1f fb86 	uxth.w	fp, r6
 801b574:	1c78      	adds	r0, r7, #1
 801b576:	eb08 010b 	add.w	r1, r8, fp
 801b57a:	4428      	add	r0, r5
 801b57c:	461a      	mov	r2, r3
 801b57e:	b289      	uxth	r1, r1
 801b580:	b280      	uxth	r0, r0
 801b582:	f7ff ff51 	bl	801b428 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801b586:	f108 0101 	add.w	r1, r8, #1
 801b58a:	9b03      	ldr	r3, [sp, #12]
 801b58c:	4429      	add	r1, r5
 801b58e:	eb07 000b 	add.w	r0, r7, fp
 801b592:	461a      	mov	r2, r3
 801b594:	b289      	uxth	r1, r1
 801b596:	b280      	uxth	r0, r0
 801b598:	f7ff ff46 	bl	801b428 <TFT_DrawPixel>
        if (corner & 0x08) {	
 801b59c:	f01a 0f08 	tst.w	sl, #8
 801b5a0:	d01a      	beq.n	801b5d8 <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801b5a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b5a6:	9303      	str	r3, [sp, #12]
 801b5a8:	fa1f fb89 	uxth.w	fp, r9
 801b5ac:	fa1f f886 	uxth.w	r8, r6
 801b5b0:	1e78      	subs	r0, r7, #1
 801b5b2:	eb0b 0108 	add.w	r1, fp, r8
 801b5b6:	1b40      	subs	r0, r0, r5
 801b5b8:	461a      	mov	r2, r3
 801b5ba:	b289      	uxth	r1, r1
 801b5bc:	b280      	uxth	r0, r0
 801b5be:	f7ff ff33 	bl	801b428 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801b5c2:	f10b 0101 	add.w	r1, fp, #1
 801b5c6:	9b03      	ldr	r3, [sp, #12]
 801b5c8:	4429      	add	r1, r5
 801b5ca:	eba7 0008 	sub.w	r0, r7, r8
 801b5ce:	461a      	mov	r2, r3
 801b5d0:	b289      	uxth	r1, r1
 801b5d2:	b280      	uxth	r0, r0
 801b5d4:	f7ff ff28 	bl	801b428 <TFT_DrawPixel>
 801b5d8:	9b00      	ldr	r3, [sp, #0]
 801b5da:	3301      	adds	r3, #1
 801b5dc:	9300      	str	r3, [sp, #0]
 801b5de:	e76a      	b.n	801b4b6 <TFT_DrawCircleCorner+0x2a>

0801b5e0 <TFT_DrawCircle>:
{
 801b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801b5e4:	b295      	uxth	r5, r2
{
 801b5e6:	b089      	sub	sp, #36	; 0x24
 801b5e8:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801b5ea:	f1c5 0201 	rsb	r2, r5, #1
 801b5ee:	b212      	sxth	r2, r2
 801b5f0:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801b5f2:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801b5f6:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801b5f8:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801b5fa:	b29c      	uxth	r4, r3
 801b5fc:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801b5fe:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801b600:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801b602:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801b604:	b289      	uxth	r1, r1
 801b606:	4622      	mov	r2, r4
 801b608:	4630      	mov	r0, r6
 801b60a:	f7ff ff0d 	bl	801b428 <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801b60e:	1b79      	subs	r1, r7, r5
 801b610:	4622      	mov	r2, r4
 801b612:	b289      	uxth	r1, r1
 801b614:	4630      	mov	r0, r6
 801b616:	f7ff ff07 	bl	801b428 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801b61a:	19a8      	adds	r0, r5, r6
 801b61c:	4622      	mov	r2, r4
 801b61e:	4639      	mov	r1, r7
 801b620:	b280      	uxth	r0, r0
 801b622:	f7ff ff01 	bl	801b428 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801b626:	1b70      	subs	r0, r6, r5
 801b628:	4622      	mov	r2, r4
 801b62a:	4639      	mov	r1, r7
 801b62c:	b280      	uxth	r0, r0
 801b62e:	f7ff fefb 	bl	801b428 <TFT_DrawPixel>
    while (x < y) {
 801b632:	2300      	movs	r3, #0
 801b634:	9302      	str	r3, [sp, #8]
 801b636:	1c73      	adds	r3, r6, #1
 801b638:	9304      	str	r3, [sp, #16]
 801b63a:	1e73      	subs	r3, r6, #1
 801b63c:	9305      	str	r3, [sp, #20]
 801b63e:	1c7b      	adds	r3, r7, #1
 801b640:	9306      	str	r3, [sp, #24]
 801b642:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b646:	4543      	cmp	r3, r8
 801b648:	db02      	blt.n	801b650 <TFT_DrawCircle+0x70>
}
 801b64a:	b009      	add	sp, #36	; 0x24
 801b64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801b650:	9b01      	ldr	r3, [sp, #4]
 801b652:	2b00      	cmp	r3, #0
 801b654:	db0c      	blt.n	801b670 <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801b656:	9b03      	ldr	r3, [sp, #12]
 801b658:	3302      	adds	r3, #2
 801b65a:	b29b      	uxth	r3, r3
 801b65c:	b21a      	sxth	r2, r3
 801b65e:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801b660:	9a01      	ldr	r2, [sp, #4]
 801b662:	4413      	add	r3, r2
            y--;
 801b664:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801b668:	b21b      	sxth	r3, r3
            y--;
 801b66a:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801b66e:	9301      	str	r3, [sp, #4]
 801b670:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801b674:	9b01      	ldr	r3, [sp, #4]
 801b676:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801b67a:	3303      	adds	r3, #3
 801b67c:	b21b      	sxth	r3, r3
 801b67e:	9301      	str	r3, [sp, #4]
 801b680:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801b682:	fa1f f588 	uxth.w	r5, r8
 801b686:	444b      	add	r3, r9
 801b688:	eb07 0b05 	add.w	fp, r7, r5
 801b68c:	b29b      	uxth	r3, r3
 801b68e:	fa1f fb8b 	uxth.w	fp, fp
 801b692:	4659      	mov	r1, fp
 801b694:	4618      	mov	r0, r3
 801b696:	4622      	mov	r2, r4
 801b698:	9307      	str	r3, [sp, #28]
 801b69a:	f7ff fec5 	bl	801b428 <TFT_DrawPixel>
 801b69e:	9b05      	ldr	r3, [sp, #20]
 801b6a0:	eba3 0a09 	sub.w	sl, r3, r9
 801b6a4:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801b6a8:	4659      	mov	r1, fp
 801b6aa:	4650      	mov	r0, sl
 801b6ac:	4622      	mov	r2, r4
 801b6ae:	f7ff febb 	bl	801b428 <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801b6b2:	eba7 0b05 	sub.w	fp, r7, r5
 801b6b6:	9b07      	ldr	r3, [sp, #28]
 801b6b8:	fa1f fb8b 	uxth.w	fp, fp
 801b6bc:	4618      	mov	r0, r3
 801b6be:	4659      	mov	r1, fp
 801b6c0:	4622      	mov	r2, r4
 801b6c2:	f7ff feb1 	bl	801b428 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801b6c6:	4659      	mov	r1, fp
 801b6c8:	4650      	mov	r0, sl
 801b6ca:	4622      	mov	r2, r4
 801b6cc:	f7ff feac 	bl	801b428 <TFT_DrawPixel>
 801b6d0:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801b6d2:	eb06 0a05 	add.w	sl, r6, r5
 801b6d6:	eb09 0b03 	add.w	fp, r9, r3
 801b6da:	fa1f fa8a 	uxth.w	sl, sl
 801b6de:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801b6e2:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801b6e4:	4622      	mov	r2, r4
 801b6e6:	4659      	mov	r1, fp
 801b6e8:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801b6ea:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801b6ec:	f7ff fe9c 	bl	801b428 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801b6f0:	4622      	mov	r2, r4
 801b6f2:	4659      	mov	r1, fp
 801b6f4:	4628      	mov	r0, r5
 801b6f6:	f7ff fe97 	bl	801b428 <TFT_DrawPixel>
 801b6fa:	1e7b      	subs	r3, r7, #1
 801b6fc:	eba3 0909 	sub.w	r9, r3, r9
 801b700:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801b704:	4622      	mov	r2, r4
 801b706:	4649      	mov	r1, r9
 801b708:	4650      	mov	r0, sl
 801b70a:	f7ff fe8d 	bl	801b428 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801b70e:	4622      	mov	r2, r4
 801b710:	4649      	mov	r1, r9
 801b712:	4628      	mov	r0, r5
 801b714:	f7ff fe88 	bl	801b428 <TFT_DrawPixel>
 801b718:	9b02      	ldr	r3, [sp, #8]
 801b71a:	3301      	adds	r3, #1
 801b71c:	9302      	str	r3, [sp, #8]
 801b71e:	e790      	b.n	801b642 <TFT_DrawCircle+0x62>

0801b720 <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b724:	b085      	sub	sp, #20
 801b726:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801b728:	4290      	cmp	r0, r2
{
 801b72a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b72e:	9301      	str	r3, [sp, #4]
 801b730:	4607      	mov	r7, r0
 801b732:	460e      	mov	r6, r1
 801b734:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801b736:	d211      	bcs.n	801b75c <TFT_DrawLine+0x3c>
 801b738:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801b73c:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801b73e:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801b742:	d341      	bcc.n	801b7c8 <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801b744:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801b746:	eba6 050a 	sub.w	r5, r6, sl
 801b74a:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801b74c:	bf2c      	ite	cs
 801b74e:	f04f 39ff 	movcs.w	r9, #4294967295
 801b752:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801b756:	f04f 33ff 	mov.w	r3, #4294967295
 801b75a:	e00b      	b.n	801b774 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801b75c:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801b760:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801b762:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801b766:	d2ed      	bcs.n	801b744 <TFT_DrawLine+0x24>
 801b768:	ebaa 0501 	sub.w	r5, sl, r1
 801b76c:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801b76e:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801b772:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801b774:	45a8      	cmp	r8, r5
 801b776:	f04f 0402 	mov.w	r4, #2
 801b77a:	dd20      	ble.n	801b7be <TFT_DrawLine+0x9e>
 801b77c:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801b780:	f1c8 0200 	rsb	r2, r8, #0
 801b784:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801b786:	9a01      	ldr	r2, [sp, #4]
 801b788:	9303      	str	r3, [sp, #12]
 801b78a:	4631      	mov	r1, r6
 801b78c:	4638      	mov	r0, r7
 801b78e:	f7ff fe4b 	bl	801b428 <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801b792:	455f      	cmp	r7, fp
 801b794:	9b03      	ldr	r3, [sp, #12]
 801b796:	d101      	bne.n	801b79c <TFT_DrawLine+0x7c>
 801b798:	4556      	cmp	r6, sl
 801b79a:	d01b      	beq.n	801b7d4 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801b79c:	9a02      	ldr	r2, [sp, #8]
 801b79e:	4294      	cmp	r4, r2
			err -= dy;
 801b7a0:	bfc1      	itttt	gt
 801b7a2:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801b7a4:	444f      	addgt	r7, r9
			err -= dy;
 801b7a6:	b212      	sxthgt	r2, r2
			x0 += sx;
 801b7a8:	b2bf      	uxthgt	r7, r7
 801b7aa:	bfd8      	it	le
 801b7ac:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801b7ae:	42ac      	cmp	r4, r5
 801b7b0:	da03      	bge.n	801b7ba <TFT_DrawLine+0x9a>
			err += dx;
 801b7b2:	4442      	add	r2, r8
			y0 += sy;
 801b7b4:	441e      	add	r6, r3
			err += dx;
 801b7b6:	b212      	sxth	r2, r2
			y0 += sy;
 801b7b8:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801b7ba:	4614      	mov	r4, r2
 801b7bc:	e7e3      	b.n	801b786 <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801b7be:	fb95 f4f4 	sdiv	r4, r5, r4
 801b7c2:	4264      	negs	r4, r4
 801b7c4:	b224      	sxth	r4, r4
 801b7c6:	e7db      	b.n	801b780 <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801b7c8:	ebaa 0501 	sub.w	r5, sl, r1
 801b7cc:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801b7ce:	f04f 0901 	mov.w	r9, #1
 801b7d2:	e7ce      	b.n	801b772 <TFT_DrawLine+0x52>
		} 
	}
}
 801b7d4:	b005      	add	sp, #20
 801b7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7da <TFT_FillRectangle>:
{
 801b7da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801b7de:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801b7e2:	4606      	mov	r6, r0
 801b7e4:	460c      	mov	r4, r1
 801b7e6:	4617      	mov	r7, r2
 801b7e8:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801b7ea:	42ac      	cmp	r4, r5
 801b7ec:	d902      	bls.n	801b7f4 <TFT_FillRectangle+0x1a>
}
 801b7ee:	b002      	add	sp, #8
 801b7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801b7f4:	4623      	mov	r3, r4
 801b7f6:	4621      	mov	r1, r4
 801b7f8:	f8cd 8000 	str.w	r8, [sp]
 801b7fc:	463a      	mov	r2, r7
 801b7fe:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801b800:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801b802:	f7ff ff8d 	bl	801b720 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801b806:	b2a4      	uxth	r4, r4
 801b808:	e7ef      	b.n	801b7ea <TFT_FillRectangle+0x10>

0801b80a <TFT_DrawRectangle>:
{
 801b80a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801b80e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801b812:	9400      	str	r4, [sp, #0]
{
 801b814:	461f      	mov	r7, r3
 801b816:	4605      	mov	r5, r0
 801b818:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801b81a:	460b      	mov	r3, r1
{
 801b81c:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801b81e:	f7ff ff7f 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801b822:	463b      	mov	r3, r7
 801b824:	462a      	mov	r2, r5
 801b826:	4641      	mov	r1, r8
 801b828:	4628      	mov	r0, r5
 801b82a:	9400      	str	r4, [sp, #0]
 801b82c:	f7ff ff78 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801b830:	463b      	mov	r3, r7
 801b832:	4632      	mov	r2, r6
 801b834:	4641      	mov	r1, r8
 801b836:	4630      	mov	r0, r6
 801b838:	9400      	str	r4, [sp, #0]
 801b83a:	f7ff ff71 	bl	801b720 <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801b83e:	463b      	mov	r3, r7
 801b840:	4632      	mov	r2, r6
 801b842:	4639      	mov	r1, r7
 801b844:	4628      	mov	r0, r5
 801b846:	9408      	str	r4, [sp, #32]
}
 801b848:	b002      	add	sp, #8
 801b84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801b84e:	f7ff bf67 	b.w	801b720 <TFT_DrawLine>

0801b852 <TFT_DrawFilledCircle>:
{
 801b852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801b856:	b297      	uxth	r7, r2
{
 801b858:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801b85a:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801b85e:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801b860:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801b862:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801b864:	b29e      	uxth	r6, r3
 801b866:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801b86a:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801b86c:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801b86e:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801b870:	b289      	uxth	r1, r1
 801b872:	4632      	mov	r2, r6
 801b874:	4640      	mov	r0, r8
 801b876:	f7ff fdd7 	bl	801b428 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801b87a:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801b87e:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801b880:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801b884:	4632      	mov	r2, r6
 801b886:	b289      	uxth	r1, r1
 801b888:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801b88a:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801b88e:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801b892:	f7ff fdc9 	bl	801b428 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801b896:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801b898:	4632      	mov	r2, r6
 801b89a:	4629      	mov	r1, r5
 801b89c:	4650      	mov	r0, sl
 801b89e:	f7ff fdc3 	bl	801b428 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801b8a2:	4632      	mov	r2, r6
 801b8a4:	4629      	mov	r1, r5
 801b8a6:	4638      	mov	r0, r7
 801b8a8:	f7ff fdbe 	bl	801b428 <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801b8ac:	462b      	mov	r3, r5
 801b8ae:	9600      	str	r6, [sp, #0]
 801b8b0:	4652      	mov	r2, sl
 801b8b2:	4629      	mov	r1, r5
 801b8b4:	4638      	mov	r0, r7
 801b8b6:	f7ff ff33 	bl	801b720 <TFT_DrawLine>
    while (x < y) {
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	9302      	str	r3, [sp, #8]
 801b8be:	f108 33ff 	add.w	r3, r8, #4294967295
 801b8c2:	9305      	str	r3, [sp, #20]
 801b8c4:	f108 0301 	add.w	r3, r8, #1
 801b8c8:	9306      	str	r3, [sp, #24]
 801b8ca:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801b8cc:	b224      	sxth	r4, r4
 801b8ce:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801b8d0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b8d4:	454b      	cmp	r3, r9
 801b8d6:	db02      	blt.n	801b8de <TFT_DrawFilledCircle+0x8c>
}
 801b8d8:	b009      	add	sp, #36	; 0x24
 801b8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801b8de:	2c00      	cmp	r4, #0
 801b8e0:	db0a      	blt.n	801b8f8 <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801b8e2:	9b03      	ldr	r3, [sp, #12]
 801b8e4:	3302      	adds	r3, #2
 801b8e6:	b29b      	uxth	r3, r3
            y--;
 801b8e8:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801b8ec:	b21a      	sxth	r2, r3
            f += ddF_y;
 801b8ee:	441c      	add	r4, r3
            y--;
 801b8f0:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801b8f4:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801b8f6:	b224      	sxth	r4, r4
 801b8f8:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801b8fc:	9b05      	ldr	r3, [sp, #20]
 801b8fe:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801b900:	9600      	str	r6, [sp, #0]
 801b902:	fa1f f789 	uxth.w	r7, r9
 801b906:	eba3 0b0a 	sub.w	fp, r3, sl
 801b90a:	19eb      	adds	r3, r5, r7
 801b90c:	fa1f fb8b 	uxth.w	fp, fp
 801b910:	b29b      	uxth	r3, r3
 801b912:	4452      	add	r2, sl
 801b914:	b292      	uxth	r2, r2
 801b916:	4619      	mov	r1, r3
 801b918:	4658      	mov	r0, fp
 801b91a:	9204      	str	r2, [sp, #16]
 801b91c:	f7ff ff00 	bl	801b720 <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801b920:	1beb      	subs	r3, r5, r7
 801b922:	b29b      	uxth	r3, r3
 801b924:	465a      	mov	r2, fp
 801b926:	4619      	mov	r1, r3
 801b928:	9804      	ldr	r0, [sp, #16]
 801b92a:	9600      	str	r6, [sp, #0]
 801b92c:	f7ff fef8 	bl	801b720 <TFT_DrawLine>
 801b930:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801b932:	9600      	str	r6, [sp, #0]
 801b934:	eb08 0b07 	add.w	fp, r8, r7
 801b938:	4453      	add	r3, sl
 801b93a:	eba8 0707 	sub.w	r7, r8, r7
 801b93e:	b29b      	uxth	r3, r3
 801b940:	fa1f fb8b 	uxth.w	fp, fp
 801b944:	b2bf      	uxth	r7, r7
 801b946:	4619      	mov	r1, r3
 801b948:	463a      	mov	r2, r7
 801b94a:	4658      	mov	r0, fp
 801b94c:	f7ff fee8 	bl	801b720 <TFT_DrawLine>
 801b950:	1e6b      	subs	r3, r5, #1
 801b952:	eba3 030a 	sub.w	r3, r3, sl
 801b956:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801b958:	4619      	mov	r1, r3
 801b95a:	9600      	str	r6, [sp, #0]
 801b95c:	463a      	mov	r2, r7
 801b95e:	4658      	mov	r0, fp
 801b960:	f7ff fede 	bl	801b720 <TFT_DrawLine>
 801b964:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801b966:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801b96a:	3403      	adds	r4, #3
 801b96c:	3301      	adds	r3, #1
 801b96e:	b224      	sxth	r4, r4
 801b970:	9302      	str	r3, [sp, #8]
 801b972:	e7ad      	b.n	801b8d0 <TFT_DrawFilledCircle+0x7e>

0801b974 <TFT_DrawFilledCircleCorner>:
{
 801b974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b978:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801b97a:	b293      	uxth	r3, r2
 801b97c:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801b980:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801b984:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801b986:	005b      	lsls	r3, r3, #1
 801b988:	b21b      	sxth	r3, r3
 801b98a:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801b98c:	2300      	movs	r3, #0
 801b98e:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801b990:	f009 0301 	and.w	r3, r9, #1
{
 801b994:	9103      	str	r1, [sp, #12]
 801b996:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801b998:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801b99a:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801b99c:	b284      	uxth	r4, r0
    while (x < y) {
 801b99e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b9a2:	42bb      	cmp	r3, r7
 801b9a4:	db02      	blt.n	801b9ac <TFT_DrawFilledCircleCorner+0x38>
}
 801b9a6:	b007      	add	sp, #28
 801b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801b9ac:	2e00      	cmp	r6, #0
 801b9ae:	db08      	blt.n	801b9c2 <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801b9b0:	9b04      	ldr	r3, [sp, #16]
 801b9b2:	3302      	adds	r3, #2
 801b9b4:	b29b      	uxth	r3, r3
            y--;
 801b9b6:	3f01      	subs	r7, #1
            ddF_y += 2;
 801b9b8:	b21a      	sxth	r2, r3
            f += ddF_y;
 801b9ba:	441e      	add	r6, r3
            y--;
 801b9bc:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801b9be:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801b9c0:	b236      	sxth	r6, r6
 801b9c2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801b9c6:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801b9c8:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801b9cc:	3603      	adds	r6, #3
 801b9ce:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801b9d0:	b1f3      	cbz	r3, 801ba10 <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801b9d2:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801b9d6:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801b9da:	f8cd b000 	str.w	fp, [sp]
 801b9de:	fa1f fa87 	uxth.w	sl, r7
 801b9e2:	eba8 030a 	sub.w	r3, r8, sl
 801b9e6:	1e62      	subs	r2, r4, #1
 801b9e8:	b29b      	uxth	r3, r3
 801b9ea:	1b52      	subs	r2, r2, r5
 801b9ec:	4619      	mov	r1, r3
 801b9ee:	b292      	uxth	r2, r2
 801b9f0:	4620      	mov	r0, r4
 801b9f2:	f7ff fe95 	bl	801b720 <TFT_DrawLine>
 801b9f6:	f108 33ff 	add.w	r3, r8, #4294967295
 801b9fa:	1b5b      	subs	r3, r3, r5
 801b9fc:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801b9fe:	eba4 020a 	sub.w	r2, r4, sl
 801ba02:	f8cd b000 	str.w	fp, [sp]
 801ba06:	b292      	uxth	r2, r2
 801ba08:	4619      	mov	r1, r3
 801ba0a:	4620      	mov	r0, r4
 801ba0c:	f7ff fe88 	bl	801b720 <TFT_DrawLine>
        if (corner & 0x02) {	
 801ba10:	f019 0f02 	tst.w	r9, #2
 801ba14:	d01e      	beq.n	801ba54 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801ba16:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801ba1a:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801ba1e:	f8cd b000 	str.w	fp, [sp]
 801ba22:	fa1f fa87 	uxth.w	sl, r7
 801ba26:	eba8 030a 	sub.w	r3, r8, sl
 801ba2a:	1c60      	adds	r0, r4, #1
 801ba2c:	b29b      	uxth	r3, r3
 801ba2e:	4428      	add	r0, r5
 801ba30:	4619      	mov	r1, r3
 801ba32:	4622      	mov	r2, r4
 801ba34:	b280      	uxth	r0, r0
 801ba36:	f7ff fe73 	bl	801b720 <TFT_DrawLine>
 801ba3a:	f108 33ff 	add.w	r3, r8, #4294967295
 801ba3e:	1b5b      	subs	r3, r3, r5
 801ba40:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801ba42:	eb04 000a 	add.w	r0, r4, sl
 801ba46:	f8cd b000 	str.w	fp, [sp]
 801ba4a:	4622      	mov	r2, r4
 801ba4c:	4619      	mov	r1, r3
 801ba4e:	b280      	uxth	r0, r0
 801ba50:	f7ff fe66 	bl	801b720 <TFT_DrawLine>
		if (corner & 0x04) {
 801ba54:	f019 0f04 	tst.w	r9, #4
 801ba58:	d01e      	beq.n	801ba98 <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801ba5a:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801ba5e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801ba62:	f8cd b000 	str.w	fp, [sp]
 801ba66:	fa1f fa87 	uxth.w	sl, r7
 801ba6a:	eb08 030a 	add.w	r3, r8, sl
 801ba6e:	1c62      	adds	r2, r4, #1
 801ba70:	b29b      	uxth	r3, r3
 801ba72:	442a      	add	r2, r5
 801ba74:	4619      	mov	r1, r3
 801ba76:	b292      	uxth	r2, r2
 801ba78:	4620      	mov	r0, r4
 801ba7a:	f7ff fe51 	bl	801b720 <TFT_DrawLine>
 801ba7e:	f108 0301 	add.w	r3, r8, #1
 801ba82:	442b      	add	r3, r5
 801ba84:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801ba86:	eb04 000a 	add.w	r0, r4, sl
 801ba8a:	f8cd b000 	str.w	fp, [sp]
 801ba8e:	4622      	mov	r2, r4
 801ba90:	4619      	mov	r1, r3
 801ba92:	b280      	uxth	r0, r0
 801ba94:	f7ff fe44 	bl	801b720 <TFT_DrawLine>
        if (corner & 0x08) {
 801ba98:	f019 0f08 	tst.w	r9, #8
 801ba9c:	d01e      	beq.n	801badc <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801ba9e:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801baa2:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801baa6:	f8cd b000 	str.w	fp, [sp]
 801baaa:	fa1f fa87 	uxth.w	sl, r7
 801baae:	eb08 030a 	add.w	r3, r8, sl
 801bab2:	1e60      	subs	r0, r4, #1
 801bab4:	b29b      	uxth	r3, r3
 801bab6:	1b40      	subs	r0, r0, r5
 801bab8:	4619      	mov	r1, r3
 801baba:	4622      	mov	r2, r4
 801babc:	b280      	uxth	r0, r0
 801babe:	f7ff fe2f 	bl	801b720 <TFT_DrawLine>
 801bac2:	f108 0301 	add.w	r3, r8, #1
 801bac6:	442b      	add	r3, r5
 801bac8:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801baca:	eba4 020a 	sub.w	r2, r4, sl
 801bace:	f8cd b000 	str.w	fp, [sp]
 801bad2:	b292      	uxth	r2, r2
 801bad4:	4619      	mov	r1, r3
 801bad6:	4620      	mov	r0, r4
 801bad8:	f7ff fe22 	bl	801b720 <TFT_DrawLine>
 801badc:	9b02      	ldr	r3, [sp, #8]
 801bade:	3301      	adds	r3, #1
 801bae0:	9302      	str	r3, [sp, #8]
 801bae2:	e75c      	b.n	801b99e <TFT_DrawFilledCircleCorner+0x2a>

0801bae4 <TFT_DrawFilledRoundedRectangle>:
{
 801bae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801bae8:	4282      	cmp	r2, r0
{
 801baea:	4683      	mov	fp, r0
 801baec:	460d      	mov	r5, r1
 801baee:	4692      	mov	sl, r2
 801baf0:	461c      	mov	r4, r3
 801baf2:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801baf6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801bafa:	d06d      	beq.n	801bbd8 <TFT_DrawFilledRoundedRectangle+0xf4>
 801bafc:	428b      	cmp	r3, r1
 801bafe:	d06b      	beq.n	801bbd8 <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801bb00:	b91e      	cbnz	r6, 801bb0a <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801bb02:	f8cd 8000 	str.w	r8, [sp]
 801bb06:	f7ff fe68 	bl	801b7da <TFT_FillRectangle>
	if (x0 > x1) {
 801bb0a:	45da      	cmp	sl, fp
 801bb0c:	bf3e      	ittt	cc
 801bb0e:	465b      	movcc	r3, fp
 801bb10:	46d3      	movcc	fp, sl
 801bb12:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801bb14:	42ac      	cmp	r4, r5
 801bb16:	bf38      	it	cc
 801bb18:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801bb1a:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801bb1e:	bf3c      	itt	cc
 801bb20:	4625      	movcc	r5, r4
 801bb22:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801bb24:	2302      	movs	r3, #2
 801bb26:	fb91 f1f3 	sdiv	r1, r1, r3
 801bb2a:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801bb2c:	bfc8      	it	gt
 801bb2e:	b28e      	uxthgt	r6, r1
 801bb30:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801bb32:	1b63      	subs	r3, r4, r5
 801bb34:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb38:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801bb3a:	bfc8      	it	gt
 801bb3c:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801bb3e:	eb0b 0706 	add.w	r7, fp, r6
 801bb42:	ebaa 0906 	sub.w	r9, sl, r6
 801bb46:	b2bf      	uxth	r7, r7
 801bb48:	fa1f f989 	uxth.w	r9, r9
 801bb4c:	4623      	mov	r3, r4
 801bb4e:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801bb50:	1ba4      	subs	r4, r4, r6
 801bb52:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801bb54:	464a      	mov	r2, r9
 801bb56:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801bb58:	b2ad      	uxth	r5, r5
 801bb5a:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801bb5c:	f8cd 8000 	str.w	r8, [sp]
 801bb60:	f7ff fe3b 	bl	801b7da <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801bb64:	4623      	mov	r3, r4
 801bb66:	463a      	mov	r2, r7
 801bb68:	4629      	mov	r1, r5
 801bb6a:	4658      	mov	r0, fp
 801bb6c:	f8cd 8000 	str.w	r8, [sp]
 801bb70:	f7ff fe33 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801bb74:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801bb76:	4623      	mov	r3, r4
 801bb78:	4652      	mov	r2, sl
 801bb7a:	4629      	mov	r1, r5
 801bb7c:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801bb7e:	b23f      	sxth	r7, r7
 801bb80:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801bb82:	f8cd 8000 	str.w	r8, [sp]
 801bb86:	f7ff fe28 	bl	801b7da <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801bb8a:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801bb8e:	4632      	mov	r2, r6
 801bb90:	4629      	mov	r1, r5
 801bb92:	4638      	mov	r0, r7
 801bb94:	f8cd 8000 	str.w	r8, [sp]
 801bb98:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801bb9a:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801bb9c:	f7ff feea 	bl	801b974 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801bba0:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801bba2:	4632      	mov	r2, r6
 801bba4:	4629      	mov	r1, r5
 801bba6:	4648      	mov	r0, r9
 801bba8:	f8cd 8000 	str.w	r8, [sp]
 801bbac:	2302      	movs	r3, #2
 801bbae:	f7ff fee1 	bl	801b974 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801bbb2:	4632      	mov	r2, r6
 801bbb4:	4621      	mov	r1, r4
 801bbb6:	4648      	mov	r0, r9
 801bbb8:	f8cd 8000 	str.w	r8, [sp]
 801bbbc:	2304      	movs	r3, #4
 801bbbe:	f7ff fed9 	bl	801b974 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801bbc2:	2308      	movs	r3, #8
 801bbc4:	4632      	mov	r2, r6
 801bbc6:	4621      	mov	r1, r4
 801bbc8:	4638      	mov	r0, r7
 801bbca:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801bbce:	b003      	add	sp, #12
 801bbd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801bbd4:	f7ff bece 	b.w	801b974 <TFT_DrawFilledCircleCorner>
}
 801bbd8:	b003      	add	sp, #12
 801bbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbde <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801bbde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bbe2:	4688      	mov	r8, r1
 801bbe4:	a902      	add	r1, sp, #8
 801bbe6:	e901 000c 	stmdb	r1, {r2, r3}
 801bbea:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801bbec:	4645      	mov	r5, r8
	uint32_t i = 0;
 801bbee:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801bbf0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bbf4:	4443      	add	r3, r8
 801bbf6:	429d      	cmp	r5, r3
 801bbf8:	da15      	bge.n	801bc26 <TFT_DrawBitmap+0x48>
 801bbfa:	0066      	lsls	r6, r4, #1
 801bbfc:	eba7 0904 	sub.w	r9, r7, r4
 801bc00:	e006      	b.n	801bc10 <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801bc02:	9b01      	ldr	r3, [sp, #4]
 801bc04:	4629      	mov	r1, r5
 801bc06:	5b9a      	ldrh	r2, [r3, r6]
 801bc08:	f7ff fc0e 	bl	801b428 <TFT_DrawPixel>
			i++;
 801bc0c:	3401      	adds	r4, #1
 801bc0e:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801bc10:	f8bd 3000 	ldrh.w	r3, [sp]
 801bc14:	eb09 0004 	add.w	r0, r9, r4
 801bc18:	b280      	uxth	r0, r0
 801bc1a:	443b      	add	r3, r7
 801bc1c:	4298      	cmp	r0, r3
 801bc1e:	dbf0      	blt.n	801bc02 <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801bc20:	3501      	adds	r5, #1
 801bc22:	b2ad      	uxth	r5, r5
 801bc24:	e7e4      	b.n	801bbf0 <TFT_DrawBitmap+0x12>
		}
	}
}
 801bc26:	b003      	add	sp, #12
 801bc28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801bc2c <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801bc2c:	4b01      	ldr	r3, [pc, #4]	; (801bc34 <TFT_SetFont+0x8>)
 801bc2e:	6098      	str	r0, [r3, #8]
 801bc30:	4770      	bx	lr
 801bc32:	bf00      	nop
 801bc34:	2008f914 	.word	0x2008f914

0801bc38 <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801bc38:	4b01      	ldr	r3, [pc, #4]	; (801bc40 <TFT_SetTextColor+0x8>)
 801bc3a:	6018      	str	r0, [r3, #0]
 801bc3c:	4770      	bx	lr
 801bc3e:	bf00      	nop
 801bc40:	2008f914 	.word	0x2008f914

0801bc44 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801bc44:	4b01      	ldr	r3, [pc, #4]	; (801bc4c <TFT_SetBackColor+0x8>)
 801bc46:	6058      	str	r0, [r3, #4]
 801bc48:	4770      	bx	lr
 801bc4a:	bf00      	nop
 801bc4c:	2008f914 	.word	0x2008f914

0801bc50 <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc54:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801bc56:	2a01      	cmp	r2, #1
{
 801bc58:	9001      	str	r0, [sp, #4]
 801bc5a:	9102      	str	r1, [sp, #8]
 801bc5c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801bd14 <TFT_DrawCharRus+0xc4>
 801bc60:	482b      	ldr	r0, [pc, #172]	; (801bd10 <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801bc62:	d11f      	bne.n	801bca4 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801bc64:	6882      	ldr	r2, [r0, #8]
 801bc66:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801bc68:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801bc6c:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801bc6e:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801bc72:	88d3      	ldrh	r3, [r2, #6]
 801bc74:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801bc76:	f10a 0507 	add.w	r5, sl, #7
 801bc7a:	10ed      	asrs	r5, r5, #3
 801bc7c:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801bc80:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801bc84:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801bc86:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801bc8a:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801bc8c:	9303      	str	r3, [sp, #12]
 801bc8e:	9b02      	ldr	r3, [sp, #8]
 801bc90:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801bc94:	9b00      	ldr	r3, [sp, #0]
 801bc96:	4598      	cmp	r8, r3
 801bc98:	fa1f f989 	uxth.w	r9, r9
 801bc9c:	d30e      	bcc.n	801bcbc <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801bc9e:	b005      	add	sp, #20
 801bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801bca4:	6884      	ldr	r4, [r0, #8]
 801bca6:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801bcaa:	88e2      	ldrh	r2, [r4, #6]
 801bcac:	434a      	muls	r2, r1
 801bcae:	88a1      	ldrh	r1, [r4, #4]
 801bcb0:	6824      	ldr	r4, [r4, #0]
 801bcb2:	3107      	adds	r1, #7
 801bcb4:	10c9      	asrs	r1, r1, #3
 801bcb6:	fb01 4202 	mla	r2, r1, r2, r4
 801bcba:	e7d5      	b.n	801bc68 <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801bcbc:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801bcc0:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801bcc2:	eb02 0106 	add.w	r1, r2, r6
 801bcc6:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801bcc8:	d00a      	beq.n	801bce0 <TFT_DrawCharRus+0x90>
 801bcca:	784a      	ldrb	r2, [r1, #1]
 801bccc:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801bcce:	bf1d      	ittte	ne
 801bcd0:	0212      	lslne	r2, r2, #8
 801bcd2:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801bcd6:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801bcd8:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801bcdc:	bf18      	it	ne
 801bcde:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801bce0:	2700      	movs	r7, #0
 801bce2:	4557      	cmp	r7, sl
 801bce4:	d303      	bcc.n	801bcee <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801bce6:	f108 0801 	add.w	r8, r8, #1
 801bcea:	442e      	add	r6, r5
 801bcec:	e7cf      	b.n	801bc8e <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801bcee:	9b03      	ldr	r3, [sp, #12]
 801bcf0:	1bd9      	subs	r1, r3, r7
 801bcf2:	9b01      	ldr	r3, [sp, #4]
 801bcf4:	2201      	movs	r2, #1
 801bcf6:	408a      	lsls	r2, r1
 801bcf8:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801bcfa:	4b05      	ldr	r3, [pc, #20]	; (801bd10 <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801bcfc:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801bcfe:	bf14      	ite	ne
 801bd00:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801bd02:	889a      	ldrheq	r2, [r3, #4]
 801bd04:	4649      	mov	r1, r9
 801bd06:	b280      	uxth	r0, r0
 801bd08:	f7ff fb8e 	bl	801b428 <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801bd0c:	3701      	adds	r7, #1
 801bd0e:	e7e8      	b.n	801bce2 <TFT_DrawCharRus+0x92>
 801bd10:	2008f914 	.word	0x2008f914
 801bd14:	2008f924 	.word	0x2008f924

0801bd18 <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd1c:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801bd1e:	4d25      	ldr	r5, [pc, #148]	; (801bdb4 <TFT_DrawCutBMP+0x9c>)
 801bd20:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801bd24:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801bd28:	4c23      	ldr	r4, [pc, #140]	; (801bdb8 <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801bd2a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801bdbc <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801bd2e:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801bd30:	fb09 2303 	mla	r3, r9, r3, r2
 801bd34:	1e5a      	subs	r2, r3, #1
 801bd36:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801bd38:	19ca      	adds	r2, r1, r7
{
 801bd3a:	4683      	mov	fp, r0
	uint16_t q = 1;
 801bd3c:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801bd3e:	9202      	str	r2, [sp, #8]
 801bd40:	8822      	ldrh	r2, [r4, #0]
 801bd42:	9902      	ldr	r1, [sp, #8]
 801bd44:	428a      	cmp	r2, r1
 801bd46:	db02      	blt.n	801bd4e <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801bd48:	b005      	add	sp, #20
 801bd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801bd4e:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801bd52:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801bd56:	f8a8 b000 	strh.w	fp, [r8]
 801bd5a:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801bd5c:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801bd60:	f8b8 0000 	ldrh.w	r0, [r8]
 801bd64:	9a01      	ldr	r2, [sp, #4]
 801bd66:	4290      	cmp	r0, r2
 801bd68:	db03      	blt.n	801bd72 <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801bd6a:	8822      	ldrh	r2, [r4, #0]
 801bd6c:	3201      	adds	r2, #1
 801bd6e:	8022      	strh	r2, [r4, #0]
 801bd70:	e7e6      	b.n	801bd40 <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801bd72:	6829      	ldr	r1, [r5, #0]
 801bd74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd76:	9303      	str	r3, [sp, #12]
 801bd78:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801bd7c:	8821      	ldrh	r1, [r4, #0]
 801bd7e:	f7ff fb53 	bl	801b428 <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801bd82:	682a      	ldr	r2, [r5, #0]
 801bd84:	9b03      	ldr	r3, [sp, #12]
 801bd86:	1e71      	subs	r1, r6, #1
 801bd88:	fb09 a101 	mla	r1, r9, r1, sl
 801bd8c:	4291      	cmp	r1, r2
 801bd8e:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801bd92:	bf9b      	ittet	ls
 801bd94:	444a      	addls	r2, r9
 801bd96:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801bd98:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801bd9a:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801bd9c:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801bda0:	bf98      	it	ls
 801bda2:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801bda4:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801bda8:	bf98      	it	ls
 801bdaa:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801bdac:	f8a8 2000 	strh.w	r2, [r8]
 801bdb0:	e7d6      	b.n	801bd60 <TFT_DrawCutBMP+0x48>
 801bdb2:	bf00      	nop
 801bdb4:	20004fdc 	.word	0x20004fdc
 801bdb8:	2008f910 	.word	0x2008f910
 801bdbc:	2008f920 	.word	0x2008f920

0801bdc0 <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801bdc4:	4b28      	ldr	r3, [pc, #160]	; (801be68 <TFT_DrawChar+0xa8>)
{
 801bdc6:	b085      	sub	sp, #20
 801bdc8:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801bdcc:	6899      	ldr	r1, [r3, #8]
 801bdce:	4827      	ldr	r0, [pc, #156]	; (801be6c <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801bdd0:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801bdd4:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801bdd8:	6809      	ldr	r1, [r1, #0]
 801bdda:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801bddc:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801bde0:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801bde2:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801bde4:	fb0b f202 	mul.w	r2, fp, r2
 801bde8:	fb05 1202 	mla	r2, r5, r2, r1
 801bdec:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801bdee:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801bdf2:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801bdf6:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801bdf8:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801bdfc:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801bdfe:	9303      	str	r3, [sp, #12]
 801be00:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801be02:	45d8      	cmp	r8, fp
 801be04:	eb03 0908 	add.w	r9, r3, r8
 801be08:	fa1f f989 	uxth.w	r9, r9
 801be0c:	d302      	bcc.n	801be14 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801be0e:	b005      	add	sp, #20
 801be10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801be14:	9b02      	ldr	r3, [sp, #8]
 801be16:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801be18:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801be1a:	eb02 0106 	add.w	r1, r2, r6
 801be1e:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801be20:	d00a      	beq.n	801be38 <TFT_DrawChar+0x78>
 801be22:	784a      	ldrb	r2, [r1, #1]
 801be24:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801be26:	bf1d      	ittte	ne
 801be28:	0212      	lslne	r2, r2, #8
 801be2a:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801be2e:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801be30:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801be34:	bf18      	it	ne
 801be36:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801be38:	2700      	movs	r7, #0
 801be3a:	4557      	cmp	r7, sl
 801be3c:	d303      	bcc.n	801be46 <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801be3e:	f108 0801 	add.w	r8, r8, #1
 801be42:	442e      	add	r6, r5
 801be44:	e7dc      	b.n	801be00 <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801be46:	9b03      	ldr	r3, [sp, #12]
 801be48:	1bd9      	subs	r1, r3, r7
 801be4a:	9b00      	ldr	r3, [sp, #0]
 801be4c:	2201      	movs	r2, #1
 801be4e:	408a      	lsls	r2, r1
 801be50:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801be52:	4b05      	ldr	r3, [pc, #20]	; (801be68 <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801be54:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801be56:	bf14      	ite	ne
 801be58:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801be5a:	889a      	ldrheq	r2, [r3, #4]
 801be5c:	4649      	mov	r1, r9
 801be5e:	b280      	uxth	r0, r0
 801be60:	f7ff fae2 	bl	801b428 <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801be64:	3701      	adds	r7, #1
 801be66:	e7e8      	b.n	801be3a <TFT_DrawChar+0x7a>
 801be68:	2008f914 	.word	0x2008f914
 801be6c:	2008f924 	.word	0x2008f924

0801be70 <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801be70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be74:	460e      	mov	r6, r1
 801be76:	4604      	mov	r4, r0
 801be78:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801be7a:	4611      	mov	r1, r2
 801be7c:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801be80:	f811 2b01 	ldrb.w	r2, [r1], #1
 801be84:	2a00      	cmp	r2, #0
 801be86:	d1f9      	bne.n	801be7c <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801be88:	4f1b      	ldr	r7, [pc, #108]	; (801bef8 <TFT_DisplayString+0x88>)
 801be8a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801befc <TFT_DisplayString+0x8c>
 801be8e:	68ba      	ldr	r2, [r7, #8]
 801be90:	f8b8 1000 	ldrh.w	r1, [r8]
 801be94:	8890      	ldrh	r0, [r2, #4]
 801be96:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801be9a:	2b01      	cmp	r3, #1
 801be9c:	d017      	beq.n	801bece <TFT_DisplayString+0x5e>
 801be9e:	2b02      	cmp	r3, #2
 801bea0:	d01c      	beq.n	801bedc <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801bea2:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	bfd8      	it	le
 801bea8:	2401      	movle	r4, #1
 801beaa:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801beac:	68b9      	ldr	r1, [r7, #8]
 801beae:	f8b8 0000 	ldrh.w	r0, [r8]
 801beb2:	8889      	ldrh	r1, [r1, #4]
 801beb4:	eba9 0305 	sub.w	r3, r9, r5
 801beb8:	b29b      	uxth	r3, r3
 801beba:	fb01 0313 	mls	r3, r1, r3, r0
 801bebe:	b29b      	uxth	r3, r3
 801bec0:	4299      	cmp	r1, r3
 801bec2:	f819 2b01 	ldrb.w	r2, [r9], #1
 801bec6:	dc00      	bgt.n	801beca <TFT_DisplayString+0x5a>
 801bec8:	b96a      	cbnz	r2, 801bee6 <TFT_DisplayString+0x76>
 801beca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801bece:	eba2 020e 	sub.w	r2, r2, lr
 801bed2:	4342      	muls	r2, r0
 801bed4:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801bed8:	b2a4      	uxth	r4, r4
			break;
 801beda:	e7e2      	b.n	801bea2 <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801bedc:	eba2 020e 	sub.w	r2, r2, lr
 801bee0:	fb12 4400 	smlabb	r4, r2, r0, r4
 801bee4:	e7f8      	b.n	801bed8 <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801bee6:	4620      	mov	r0, r4
 801bee8:	4631      	mov	r1, r6
 801beea:	f7ff ff69 	bl	801bdc0 <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801beee:	68bb      	ldr	r3, [r7, #8]
 801bef0:	889b      	ldrh	r3, [r3, #4]
 801bef2:	441c      	add	r4, r3
 801bef4:	b2a4      	uxth	r4, r4
 801bef6:	e7d9      	b.n	801beac <TFT_DisplayString+0x3c>
 801bef8:	2008f914 	.word	0x2008f914
 801befc:	20000a4c 	.word	0x20000a4c

0801bf00 <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801bf00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801bf04:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801bf06:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801bf08:	eba6 0800 	sub.w	r8, r6, r0
 801bf0c:	2f00      	cmp	r7, #0
 801bf0e:	bfb8      	it	lt
 801bf10:	427f      	neglt	r7, r7
 801bf12:	f1b8 0f00 	cmp.w	r8, #0
 801bf16:	bfb8      	it	lt
 801bf18:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801bf1c:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801bf1e:	4604      	mov	r4, r0
 801bf20:	460d      	mov	r5, r1
 801bf22:	461a      	mov	r2, r3
 801bf24:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801bf28:	dd04      	ble.n	801bf34 <DrawLineX+0x34>
 801bf2a:	4633      	mov	r3, r6
        swap(x1, y1);
 801bf2c:	460c      	mov	r4, r1
        swap(x2, y2);
 801bf2e:	4616      	mov	r6, r2
        swap(x1, y1);
 801bf30:	4605      	mov	r5, r0
        swap(x2, y2);
 801bf32:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801bf34:	42b4      	cmp	r4, r6
 801bf36:	d905      	bls.n	801bf44 <DrawLineX+0x44>
 801bf38:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801bf3a:	4615      	mov	r5, r2
 801bf3c:	461a      	mov	r2, r3
    if(x1>x2){
 801bf3e:	4623      	mov	r3, r4
 801bf40:	4634      	mov	r4, r6
 801bf42:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801bf44:	eba2 0905 	sub.w	r9, r2, r5
 801bf48:	464b      	mov	r3, r9
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	bfb8      	it	lt
 801bf4e:	425b      	neglt	r3, r3
    dx=x2-x1;
 801bf50:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801bf54:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801bf56:	2302      	movs	r3, #2
 801bf58:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801bf5c:	4295      	cmp	r5, r2
 801bf5e:	bf34      	ite	cc
 801bf60:	2301      	movcc	r3, #1
 801bf62:	f04f 33ff 	movcs.w	r3, #4294967295
 801bf66:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801bf68:	42b4      	cmp	r4, r6
 801bf6a:	d902      	bls.n	801bf72 <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801bf6c:	b003      	add	sp, #12
 801bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801bf72:	4547      	cmp	r7, r8
 801bf74:	bfcb      	itete	gt
 801bf76:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801bf78:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801bf7a:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801bf7c:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801bf7e:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801bf80:	f7ff fa52 	bl	801b428 <TFT_DrawPixel>
        if (err<0){
 801bf84:	9b01      	ldr	r3, [sp, #4]
 801bf86:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801bf8a:	bf48      	it	mi
 801bf8c:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801bf8e:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801bf92:	bf42      	ittt	mi
 801bf94:	18ed      	addmi	r5, r5, r3
 801bf96:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801bf98:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801bf9a:	b2a4      	uxth	r4, r4
 801bf9c:	e7e4      	b.n	801bf68 <DrawLineX+0x68>
	...

0801bfa0 <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801bfa0:	4b06      	ldr	r3, [pc, #24]	; (801bfbc <MX_SDMMC1_SD_Init+0x1c>)
 801bfa2:	4a07      	ldr	r2, [pc, #28]	; (801bfc0 <MX_SDMMC1_SD_Init+0x20>)
 801bfa4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801bfa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801bfaa:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801bfac:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801bfae:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801bfb0:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801bfb2:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801bfb4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801bfb6:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801bfb8:	619a      	str	r2, [r3, #24]
 801bfba:	4770      	bx	lr
 801bfbc:	2008fcb0 	.word	0x2008fcb0
 801bfc0:	50062400 	.word	0x50062400

0801bfc4 <MX_TIM2_Init>:
{
 801bfc4:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801bfc6:	4a16      	ldr	r2, [pc, #88]	; (801c020 <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801bfc8:	4c16      	ldr	r4, [pc, #88]	; (801c024 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801bfca:	7811      	ldrb	r1, [r2, #0]
 801bfcc:	4a16      	ldr	r2, [pc, #88]	; (801c028 <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801bfce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801bfd2:	f242 7310 	movw	r3, #10000	; 0x2710
 801bfd6:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801bfda:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bfdc:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801bfde:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bfe2:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801bfe4:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801bfe6:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801bfe8:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801bfea:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801bfec:	f7e9 fa88 	bl	8005500 <HAL_TIM_Base_Init>
 801bff0:	b100      	cbz	r0, 801bff4 <MX_TIM2_Init+0x30>
 801bff2:	e7fe      	b.n	801bff2 <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801bff4:	a908      	add	r1, sp, #32
 801bff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bffa:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801bffe:	4620      	mov	r0, r4
 801c000:	f7e9 fb3a 	bl	8005678 <HAL_TIM_ConfigClockSource>
 801c004:	b100      	cbz	r0, 801c008 <MX_TIM2_Init+0x44>
 801c006:	e7fe      	b.n	801c006 <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801c008:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c00a:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801c00c:	a901      	add	r1, sp, #4
 801c00e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801c010:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801c012:	f7e9 fc6b 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 801c016:	b100      	cbz	r0, 801c01a <MX_TIM2_Init+0x56>
 801c018:	e7fe      	b.n	801c018 <MX_TIM2_Init+0x54>
}
 801c01a:	b008      	add	sp, #32
 801c01c:	bd10      	pop	{r4, pc}
 801c01e:	bf00      	nop
 801c020:	2008a848 	.word	0x2008a848
 801c024:	20090114 	.word	0x20090114
 801c028:	0802e718 	.word	0x0802e718

0801c02c <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801c02c:	4a07      	ldr	r2, [pc, #28]	; (801c04c <DWT_Init+0x20>)
 801c02e:	68d3      	ldr	r3, [r2, #12]
 801c030:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801c034:	d109      	bne.n	801c04a <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801c036:	68d1      	ldr	r1, [r2, #12]
 801c038:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801c03c:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801c03e:	4a04      	ldr	r2, [pc, #16]	; (801c050 <DWT_Init+0x24>)
 801c040:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801c042:	6813      	ldr	r3, [r2, #0]
 801c044:	f043 0301 	orr.w	r3, r3, #1
 801c048:	6013      	str	r3, [r2, #0]
 801c04a:	4770      	bx	lr
 801c04c:	e000edf0 	.word	0xe000edf0
 801c050:	e0001000 	.word	0xe0001000

0801c054 <DWT_Delay>:
  return DWT->CYCCNT;
 801c054:	4a07      	ldr	r2, [pc, #28]	; (801c074 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c056:	4b08      	ldr	r3, [pc, #32]	; (801c078 <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801c058:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c05a:	681b      	ldr	r3, [r3, #0]
{
 801c05c:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c05e:	4c07      	ldr	r4, [pc, #28]	; (801c07c <DWT_Delay+0x28>)
 801c060:	fbb3 f3f4 	udiv	r3, r3, r4
 801c064:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801c068:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801c06a:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	dbfb      	blt.n	801c068 <DWT_Delay+0x14>
}
 801c070:	bd10      	pop	{r4, pc}
 801c072:	bf00      	nop
 801c074:	e0001000 	.word	0xe0001000
 801c078:	20000a58 	.word	0x20000a58
 801c07c:	000f4240 	.word	0x000f4240

0801c080 <Calculate_Data>:
{
 801c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ(Line_Rabs_buff, Measure_Color_xy ? calibratre_x_1931 : calibratre_x_1964, Measure_Color_xy ? calibratre_y_1931:Spectral_day, Measure_Color_xy ? calibratre_z_1931:calibratre_z_1964);
 801c082:	4d6b      	ldr	r5, [pc, #428]	; (801c230 <Calculate_Data+0x1b0>)
 801c084:	4a6b      	ldr	r2, [pc, #428]	; (801c234 <Calculate_Data+0x1b4>)
 801c086:	782b      	ldrb	r3, [r5, #0]
 801c088:	496b      	ldr	r1, [pc, #428]	; (801c238 <Calculate_Data+0x1b8>)
 801c08a:	486c      	ldr	r0, [pc, #432]	; (801c23c <Calculate_Data+0x1bc>)
	if(GUI_screen_state == Color_Screen)
 801c08c:	4c6c      	ldr	r4, [pc, #432]	; (801c240 <Calculate_Data+0x1c0>)
	Calculate_XYZ(Line_Rabs_buff, Measure_Color_xy ? calibratre_x_1931 : calibratre_x_1964, Measure_Color_xy ? calibratre_y_1931:Spectral_day, Measure_Color_xy ? calibratre_z_1931:calibratre_z_1964);
 801c08e:	2b00      	cmp	r3, #0
 801c090:	4b6c      	ldr	r3, [pc, #432]	; (801c244 <Calculate_Data+0x1c4>)
 801c092:	bf18      	it	ne
 801c094:	4613      	movne	r3, r2
 801c096:	4a6c      	ldr	r2, [pc, #432]	; (801c248 <Calculate_Data+0x1c8>)
 801c098:	bf18      	it	ne
 801c09a:	460a      	movne	r2, r1
 801c09c:	496b      	ldr	r1, [pc, #428]	; (801c24c <Calculate_Data+0x1cc>)
 801c09e:	bf18      	it	ne
 801c0a0:	4601      	movne	r1, r0
 801c0a2:	486b      	ldr	r0, [pc, #428]	; (801c250 <Calculate_Data+0x1d0>)
 801c0a4:	f7f1 f808 	bl	800d0b8 <Calculate_XYZ>
	Calculate_xy(colorimetry_XYZ);
 801c0a8:	486a      	ldr	r0, [pc, #424]	; (801c254 <Calculate_Data+0x1d4>)
 801c0aa:	f7f1 f853 	bl	800d154 <Calculate_xy>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801c0ae:	7829      	ldrb	r1, [r5, #0]
 801c0b0:	4867      	ldr	r0, [pc, #412]	; (801c250 <Calculate_Data+0x1d0>)
 801c0b2:	f7f1 f8c5 	bl	800d240 <Calculate_Tc>
 801c0b6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c0ba:	4b67      	ldr	r3, [pc, #412]	; (801c258 <Calculate_Data+0x1d8>)
 801c0bc:	ee17 2a90 	vmov	r2, s15
 801c0c0:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801c0c2:	7822      	ldrb	r2, [r4, #0]
 801c0c4:	2a05      	cmp	r2, #5
 801c0c6:	d10a      	bne.n	801c0de <Calculate_Data+0x5e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976(colorimetry_xy);Calculate_uv(colorimetry_xy);} else 
 801c0c8:	4b64      	ldr	r3, [pc, #400]	; (801c25c <Calculate_Data+0x1dc>)
 801c0ca:	781b      	ldrb	r3, [r3, #0]
 801c0cc:	075a      	lsls	r2, r3, #29
 801c0ce:	f140 80a1 	bpl.w	801c214 <Calculate_Data+0x194>
 801c0d2:	4863      	ldr	r0, [pc, #396]	; (801c260 <Calculate_Data+0x1e0>)
 801c0d4:	f7f1 f888 	bl	800d1e8 <Calculate_uv1976>
 801c0d8:	4861      	ldr	r0, [pc, #388]	; (801c260 <Calculate_Data+0x1e0>)
 801c0da:	f7f1 f859 	bl	800d190 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801c0de:	7823      	ldrb	r3, [r4, #0]
 801c0e0:	3b01      	subs	r3, #1
 801c0e2:	2b02      	cmp	r3, #2
 801c0e4:	f200 8095 	bhi.w	801c212 <Calculate_Data+0x192>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801c0e8:	4c5e      	ldr	r4, [pc, #376]	; (801c264 <Calculate_Data+0x1e4>)
 801c0ea:	8823      	ldrh	r3, [r4, #0]
 801c0ec:	07de      	lsls	r6, r3, #31
 801c0ee:	d506      	bpl.n	801c0fe <Calculate_Data+0x7e>
 801c0f0:	4955      	ldr	r1, [pc, #340]	; (801c248 <Calculate_Data+0x1c8>)
 801c0f2:	4857      	ldr	r0, [pc, #348]	; (801c250 <Calculate_Data+0x1d0>)
 801c0f4:	f7f0 feb0 	bl	800ce58 <Calculate_EL_Day>
 801c0f8:	4b5b      	ldr	r3, [pc, #364]	; (801c268 <Calculate_Data+0x1e8>)
 801c0fa:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801c0fe:	8823      	ldrh	r3, [r4, #0]
 801c100:	0798      	lsls	r0, r3, #30
 801c102:	d505      	bpl.n	801c110 <Calculate_Data+0x90>
 801c104:	4852      	ldr	r0, [pc, #328]	; (801c250 <Calculate_Data+0x1d0>)
 801c106:	f7f0 fec7 	bl	800ce98 <Calculate_EL_Day_Wt>
 801c10a:	4b58      	ldr	r3, [pc, #352]	; (801c26c <Calculate_Data+0x1ec>)
 801c10c:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c110:	8823      	ldrh	r3, [r4, #0]
 801c112:	0499      	lsls	r1, r3, #18
 801c114:	d518      	bpl.n	801c148 <Calculate_Data+0xc8>
 801c116:	4956      	ldr	r1, [pc, #344]	; (801c270 <Calculate_Data+0x1f0>)
 801c118:	484d      	ldr	r0, [pc, #308]	; (801c250 <Calculate_Data+0x1d0>)
 801c11a:	4e56      	ldr	r6, [pc, #344]	; (801c274 <Calculate_Data+0x1f4>)
 801c11c:	4f52      	ldr	r7, [pc, #328]	; (801c268 <Calculate_Data+0x1e8>)
 801c11e:	f7f0 fed3 	bl	800cec8 <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c122:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c124:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c128:	f012 0f01 	tst.w	r2, #1
 801c12c:	d17c      	bne.n	801c228 <Calculate_Data+0x1a8>
 801c12e:	4946      	ldr	r1, [pc, #280]	; (801c248 <Calculate_Data+0x1c8>)
 801c130:	4847      	ldr	r0, [pc, #284]	; (801c250 <Calculate_Data+0x1d0>)
 801c132:	f7f0 fe91 	bl	800ce58 <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801c136:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c13a:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801c13e:	f7f0 fee3 	bl	800cf08 <Calculate_SP>
 801c142:	4b4d      	ldr	r3, [pc, #308]	; (801c278 <Calculate_Data+0x1f8>)
 801c144:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801c148:	8823      	ldrh	r3, [r4, #0]
 801c14a:	075a      	lsls	r2, r3, #29
 801c14c:	d506      	bpl.n	801c15c <Calculate_Data+0xdc>
 801c14e:	494b      	ldr	r1, [pc, #300]	; (801c27c <Calculate_Data+0x1fc>)
 801c150:	483f      	ldr	r0, [pc, #252]	; (801c250 <Calculate_Data+0x1d0>)
 801c152:	f7f0 fee9 	bl	800cf28 <Calculate_PPFD_PPL>
 801c156:	4b4a      	ldr	r3, [pc, #296]	; (801c280 <Calculate_Data+0x200>)
 801c158:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801c15c:	8823      	ldrh	r3, [r4, #0]
 801c15e:	071b      	lsls	r3, r3, #28
 801c160:	d51f      	bpl.n	801c1a2 <Calculate_Data+0x122>
 801c162:	2200      	movs	r2, #0
 801c164:	4945      	ldr	r1, [pc, #276]	; (801c27c <Calculate_Data+0x1fc>)
 801c166:	483a      	ldr	r0, [pc, #232]	; (801c250 <Calculate_Data+0x1d0>)
 801c168:	f7f0 ff1a 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 801c16c:	4b45      	ldr	r3, [pc, #276]	; (801c284 <Calculate_Data+0x204>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c16e:	4943      	ldr	r1, [pc, #268]	; (801c27c <Calculate_Data+0x1fc>)
 801c170:	4837      	ldr	r0, [pc, #220]	; (801c250 <Calculate_Data+0x1d0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801c172:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c176:	2201      	movs	r2, #1
 801c178:	f7f0 ff12 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 801c17c:	4b42      	ldr	r3, [pc, #264]	; (801c288 <Calculate_Data+0x208>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c17e:	493f      	ldr	r1, [pc, #252]	; (801c27c <Calculate_Data+0x1fc>)
 801c180:	4833      	ldr	r0, [pc, #204]	; (801c250 <Calculate_Data+0x1d0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c182:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c186:	2202      	movs	r2, #2
 801c188:	f7f0 ff0a 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 801c18c:	4b3f      	ldr	r3, [pc, #252]	; (801c28c <Calculate_Data+0x20c>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801c18e:	493b      	ldr	r1, [pc, #236]	; (801c27c <Calculate_Data+0x1fc>)
 801c190:	482f      	ldr	r0, [pc, #188]	; (801c250 <Calculate_Data+0x1d0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c192:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801c196:	2203      	movs	r2, #3
 801c198:	f7f0 ff02 	bl	800cfa0 <Calculate_PPFD_PPL_Range>
 801c19c:	4b3c      	ldr	r3, [pc, #240]	; (801c290 <Calculate_Data+0x210>)
 801c19e:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801c1a2:	8823      	ldrh	r3, [r4, #0]
 801c1a4:	051f      	lsls	r7, r3, #20
 801c1a6:	d503      	bpl.n	801c1b0 <Calculate_Data+0x130>
 801c1a8:	f7f1 fc48 	bl	800da3c <Calculate_deltaEab>
 801c1ac:	4b39      	ldr	r3, [pc, #228]	; (801c294 <Calculate_Data+0x214>)
 801c1ae:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976(colorimetry_xy);Calculate_uv(colorimetry_xy);}
 801c1b0:	8823      	ldrh	r3, [r4, #0]
 801c1b2:	065e      	lsls	r6, r3, #25
 801c1b4:	d505      	bpl.n	801c1c2 <Calculate_Data+0x142>
 801c1b6:	482a      	ldr	r0, [pc, #168]	; (801c260 <Calculate_Data+0x1e0>)
 801c1b8:	f7f1 f816 	bl	800d1e8 <Calculate_uv1976>
 801c1bc:	4828      	ldr	r0, [pc, #160]	; (801c260 <Calculate_Data+0x1e0>)
 801c1be:	f7f0 ffe7 	bl	800d190 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab(colorimetry_XYZ, Measure_Color_xy, Source_Type);}
 801c1c2:	8823      	ldrh	r3, [r4, #0]
 801c1c4:	0618      	lsls	r0, r3, #24
 801c1c6:	d505      	bpl.n	801c1d4 <Calculate_Data+0x154>
 801c1c8:	4b33      	ldr	r3, [pc, #204]	; (801c298 <Calculate_Data+0x218>)
 801c1ca:	7829      	ldrb	r1, [r5, #0]
 801c1cc:	781a      	ldrb	r2, [r3, #0]
 801c1ce:	4821      	ldr	r0, [pc, #132]	; (801c254 <Calculate_Data+0x1d4>)
 801c1d0:	f7f1 f9d2 	bl	800d578 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801c1d4:	8823      	ldrh	r3, [r4, #0]
 801c1d6:	0599      	lsls	r1, r3, #22
 801c1d8:	d503      	bpl.n	801c1e2 <Calculate_Data+0x162>
 801c1da:	7829      	ldrb	r1, [r5, #0]
 801c1dc:	481c      	ldr	r0, [pc, #112]	; (801c250 <Calculate_Data+0x1d0>)
 801c1de:	f7f1 fb01 	bl	800d7e4 <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801c1e2:	8823      	ldrh	r3, [r4, #0]
 801c1e4:	055a      	lsls	r2, r3, #21
 801c1e6:	d503      	bpl.n	801c1f0 <Calculate_Data+0x170>
 801c1e8:	7829      	ldrb	r1, [r5, #0]
 801c1ea:	4819      	ldr	r0, [pc, #100]	; (801c250 <Calculate_Data+0x1d0>)
 801c1ec:	f7f1 fafa 	bl	800d7e4 <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c1f0:	8823      	ldrh	r3, [r4, #0]
 801c1f2:	04db      	lsls	r3, r3, #19
 801c1f4:	d50d      	bpl.n	801c212 <Calculate_Data+0x192>
 801c1f6:	4929      	ldr	r1, [pc, #164]	; (801c29c <Calculate_Data+0x21c>)
 801c1f8:	4815      	ldr	r0, [pc, #84]	; (801c250 <Calculate_Data+0x1d0>)
 801c1fa:	f7f0 ff5b 	bl	800d0b4 <Calculate_ELr>
 801c1fe:	4b28      	ldr	r3, [pc, #160]	; (801c2a0 <Calculate_Data+0x220>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801c200:	4928      	ldr	r1, [pc, #160]	; (801c2a4 <Calculate_Data+0x224>)
 801c202:	4813      	ldr	r0, [pc, #76]	; (801c250 <Calculate_Data+0x1d0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c204:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801c208:	f7f0 ff3a 	bl	800d080 <Calculate_ELb>
 801c20c:	4b26      	ldr	r3, [pc, #152]	; (801c2a8 <Calculate_Data+0x228>)
 801c20e:	ed83 0a00 	vstr	s0, [r3]
 801c212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab(colorimetry_XYZ, Measure_Color_xy, Source_Type);}
 801c214:	079f      	lsls	r7, r3, #30
 801c216:	f57f af62 	bpl.w	801c0de <Calculate_Data+0x5e>
 801c21a:	4b1f      	ldr	r3, [pc, #124]	; (801c298 <Calculate_Data+0x218>)
 801c21c:	7829      	ldrb	r1, [r5, #0]
 801c21e:	781a      	ldrb	r2, [r3, #0]
 801c220:	480c      	ldr	r0, [pc, #48]	; (801c254 <Calculate_Data+0x1d4>)
 801c222:	f7f1 f9a9 	bl	800d578 <Calculate_Lab>
 801c226:	e75a      	b.n	801c0de <Calculate_Data+0x5e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c228:	ed97 0a00 	vldr	s0, [r7]
 801c22c:	e783      	b.n	801c136 <Calculate_Data+0xb6>
 801c22e:	bf00      	nop
 801c230:	20004ca4 	.word	0x20004ca4
 801c234:	200887d0 	.word	0x200887d0
 801c238:	200877d0 	.word	0x200877d0
 801c23c:	200857d0 	.word	0x200857d0
 801c240:	20004ca1 	.word	0x20004ca1
 801c244:	200897d0 	.word	0x200897d0
 801c248:	2004dc00 	.word	0x2004dc00
 801c24c:	200867d0 	.word	0x200867d0
 801c250:	200077fc 	.word	0x200077fc
 801c254:	2008a7de 	.word	0x2008a7de
 801c258:	2004fc00 	.word	0x2004fc00
 801c25c:	20004c9f 	.word	0x20004c9f
 801c260:	2008a7f4 	.word	0x2008a7f4
 801c264:	20004ca6 	.word	0x20004ca6
 801c268:	2009015c 	.word	0x2009015c
 801c26c:	2008fbfc 	.word	0x2008fbfc
 801c270:	2004ec00 	.word	0x2004ec00
 801c274:	2008f92c 	.word	0x2008f92c
 801c278:	2008fca8 	.word	0x2008fca8
 801c27c:	2004fc04 	.word	0x2004fc04
 801c280:	2008fc04 	.word	0x2008fc04
 801c284:	2008fcac 	.word	0x2008fcac
 801c288:	20090038 	.word	0x20090038
 801c28c:	2008ff6c 	.word	0x2008ff6c
 801c290:	2008fc00 	.word	0x2008fc00
 801c294:	2008acd6 	.word	0x2008acd6
 801c298:	2008acd9 	.word	0x2008acd9
 801c29c:	20005ff8 	.word	0x20005ff8
 801c2a0:	20090158 	.word	0x20090158
 801c2a4:	20004ff8 	.word	0x20004ff8
 801c2a8:	20090154 	.word	0x20090154
 801c2ac:	00000000 	.word	0x00000000

0801c2b0 <Get_Battery_Level>:
{
 801c2b0:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 801c2b2:	4c13      	ldr	r4, [pc, #76]	; (801c300 <Get_Battery_Level+0x50>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801c2b4:	4d13      	ldr	r5, [pc, #76]	; (801c304 <Get_Battery_Level+0x54>)
	HAL_ADC_Start(&hadc1);
 801c2b6:	4620      	mov	r0, r4
 801c2b8:	f7e5 faba 	bl	8001830 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801c2bc:	2102      	movs	r1, #2
 801c2be:	4620      	mov	r0, r4
 801c2c0:	f7e4 ffb0 	bl	8001224 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801c2c4:	4620      	mov	r0, r4
 801c2c6:	f7e4 fffb 	bl	80012c0 <HAL_ADC_GetValue>
 801c2ca:	7028      	strb	r0, [r5, #0]
	HAL_ADC_Stop(&hadc1);
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	f7e5 fb2e 	bl	800192e <HAL_ADC_Stop>
	return percentage_charge = 100.0*adcResult/190;
 801c2d2:	7828      	ldrb	r0, [r5, #0]
 801c2d4:	f7e4 f936 	bl	8000544 <__aeabi_i2d>
 801c2d8:	2200      	movs	r2, #0
 801c2da:	4b0b      	ldr	r3, [pc, #44]	; (801c308 <Get_Battery_Level+0x58>)
 801c2dc:	f7e4 f998 	bl	8000610 <__aeabi_dmul>
 801c2e0:	a305      	add	r3, pc, #20	; (adr r3, 801c2f8 <Get_Battery_Level+0x48>)
 801c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e6:	f7e4 fabd 	bl	8000864 <__aeabi_ddiv>
 801c2ea:	4b08      	ldr	r3, [pc, #32]	; (801c30c <Get_Battery_Level+0x5c>)
}
 801c2ec:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = 100.0*adcResult/190;
 801c2f0:	e9c3 0100 	strd	r0, r1, [r3]
}
 801c2f4:	bd38      	pop	{r3, r4, r5, pc}
 801c2f6:	bf00      	nop
 801c2f8:	00000000 	.word	0x00000000
 801c2fc:	4067c000 	.word	0x4067c000
 801c300:	2008ff00 	.word	0x2008ff00
 801c304:	20050c0c 	.word	0x20050c0c
 801c308:	40590000 	.word	0x40590000
 801c30c:	20090040 	.word	0x20090040

0801c310 <packet_generator_data_send>:
{
 801c310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801c314:	4c25      	ldr	r4, [pc, #148]	; (801c3ac <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801c316:	4f26      	ldr	r7, [pc, #152]	; (801c3b0 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c318:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801c3b8 <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801c31c:	2100      	movs	r1, #0
 801c31e:	2240      	movs	r2, #64	; 0x40
 801c320:	4620      	mov	r0, r4
 801c322:	f002 fe64 	bl	801efee <memset>
			dataToSend[0] = 0xAB;
 801c326:	23ab      	movs	r3, #171	; 0xab
 801c328:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801c32a:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801c32c:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801c32e:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801c330:	2301      	movs	r3, #1
 801c332:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801c334:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801c336:	4629      	mov	r1, r5
			q = 5;
 801c338:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c33a:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801c33c:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801c340:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801c344:	0a10      	lsrs	r0, r2, #8
 801c346:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801c348:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801c34a:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801c34e:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801c350:	fa50 f282 	uxtab	r2, r0, r2
 801c354:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801c356:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801c358:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801c35a:	d803      	bhi.n	801c364 <packet_generator_data_send+0x54>
 801c35c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801c360:	4295      	cmp	r5, r2
 801c362:	d118      	bne.n	801c396 <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c364:	7860      	ldrb	r0, [r4, #1]
 801c366:	7822      	ldrb	r2, [r4, #0]
 801c368:	4402      	add	r2, r0
 801c36a:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c36c:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c36e:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c370:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801c372:	b2f3      	uxtb	r3, r6
 801c374:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c376:	4413      	add	r3, r2
 801c378:	185a      	adds	r2, r3, r1
 801c37a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c37e:	4641      	mov	r1, r8
 801c380:	2240      	movs	r2, #64	; 0x40
 801c382:	4648      	mov	r0, r9
 801c384:	f7ea fe72 	bl	800706c <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801c388:	3601      	adds	r6, #1
					HAL_Delay(2);
 801c38a:	2002      	movs	r0, #2
 801c38c:	f7e4 fe46 	bl	800101c <HAL_Delay>
					packet_number = packet_number + 1;
 801c390:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801c392:	2100      	movs	r1, #0
					q = 5;
 801c394:	2305      	movs	r3, #5
 801c396:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801c398:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801c39c:	d1ce      	bne.n	801c33c <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801c39e:	4b05      	ldr	r3, [pc, #20]	; (801c3b4 <packet_generator_data_send+0xa4>)
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	601a      	str	r2, [r3, #0]
 801c3a4:	605a      	str	r2, [r3, #4]
 801c3a6:	609a      	str	r2, [r3, #8]
 801c3a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3ac:	2008a808 	.word	0x2008a808
 801c3b0:	200097fc 	.word	0x200097fc
 801c3b4:	2008a7fc 	.word	0x2008a7fc
 801c3b8:	200901a8 	.word	0x200901a8

0801c3bc <packet_generator_Rabs_data_send>:
{
 801c3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801c3c0:	4c3b      	ldr	r4, [pc, #236]	; (801c4b0 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801c3c2:	4d3c      	ldr	r5, [pc, #240]	; (801c4b4 <packet_generator_Rabs_data_send+0xf8>)
 801c3c4:	4f3c      	ldr	r7, [pc, #240]	; (801c4b8 <packet_generator_Rabs_data_send+0xfc>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c3c6:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801c4dc <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801c3ca:	2240      	movs	r2, #64	; 0x40
 801c3cc:	2100      	movs	r1, #0
 801c3ce:	4620      	mov	r0, r4
 801c3d0:	f002 fe0d 	bl	801efee <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801c3d4:	4b39      	ldr	r3, [pc, #228]	; (801c4bc <packet_generator_Rabs_data_send+0x100>)
 801c3d6:	8828      	ldrh	r0, [r5, #0]
 801c3d8:	4939      	ldr	r1, [pc, #228]	; (801c4c0 <packet_generator_Rabs_data_send+0x104>)
 801c3da:	ed93 0a00 	vldr	s0, [r3]
 801c3de:	f7fc fef1 	bl	80191c4 <Rabs_calc_Factor1>
 801c3e2:	4b38      	ldr	r3, [pc, #224]	; (801c4c4 <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801c3e4:	4938      	ldr	r1, [pc, #224]	; (801c4c8 <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801c3e6:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801c3ea:	edd1 0a00 	vldr	s1, [r1]
 801c3ee:	4b37      	ldr	r3, [pc, #220]	; (801c4cc <packet_generator_Rabs_data_send+0x110>)
 801c3f0:	8829      	ldrh	r1, [r5, #0]
 801c3f2:	4a37      	ldr	r2, [pc, #220]	; (801c4d0 <packet_generator_Rabs_data_send+0x114>)
 801c3f4:	4832      	ldr	r0, [pc, #200]	; (801c4c0 <packet_generator_Rabs_data_send+0x104>)
 801c3f6:	f7fc ff19 	bl	801922c <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801c3fa:	23ab      	movs	r3, #171	; 0xab
 801c3fc:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801c3fe:	2312      	movs	r3, #18
 801c400:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801c402:	2303      	movs	r3, #3
 801c404:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801c406:	4b33      	ldr	r3, [pc, #204]	; (801c4d4 <packet_generator_Rabs_data_send+0x118>)
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801c40c:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801c410:	bf18      	it	ne
 801c412:	2301      	movne	r3, #1
 801c414:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801c416:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801c418:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801c41a:	4629      	mov	r1, r5
			q = 7;
 801c41c:	2307      	movs	r3, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c41e:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801c420:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801c424:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801c428:	0e10      	lsrs	r0, r2, #24
 801c42a:	54e0      	strb	r0, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801c42c:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801c430:	0c10      	lsrs	r0, r2, #16
 801c432:	f804 000c 	strb.w	r0, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801c436:	0a10      	lsrs	r0, r2, #8
 801c438:	f804 000e 	strb.w	r0, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801c43c:	18e0      	adds	r0, r4, r3
 801c43e:	b2d2      	uxtb	r2, r2
 801c440:	70c2      	strb	r2, [r0, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c442:	5ce0      	ldrb	r0, [r4, r3]
 801c444:	4402      	add	r2, r0
 801c446:	f814 000c 	ldrb.w	r0, [r4, ip]
 801c44a:	4410      	add	r0, r2
 801c44c:	f814 200e 	ldrb.w	r2, [r4, lr]
				q = q + 4;
 801c450:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c452:	4402      	add	r2, r0
				q = q + 4;
 801c454:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c456:	4411      	add	r1, r2
				if(q >= 62 || cnt == 1023){
 801c458:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c45a:	b289      	uxth	r1, r1
				if(q >= 62 || cnt == 1023){
 801c45c:	d803      	bhi.n	801c466 <packet_generator_Rabs_data_send+0xaa>
 801c45e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801c462:	4295      	cmp	r5, r2
 801c464:	d118      	bne.n	801c498 <packet_generator_Rabs_data_send+0xdc>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c466:	7860      	ldrb	r0, [r4, #1]
 801c468:	7822      	ldrb	r2, [r4, #0]
 801c46a:	4402      	add	r2, r0
 801c46c:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c46e:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c470:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c472:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801c474:	b2f3      	uxtb	r3, r6
 801c476:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c478:	4413      	add	r3, r2
 801c47a:	440b      	add	r3, r1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c47c:	2240      	movs	r2, #64	; 0x40
 801c47e:	4641      	mov	r1, r8
 801c480:	4648      	mov	r0, r9
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c482:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801c486:	3601      	adds	r6, #1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c488:	f7ea fdf0 	bl	800706c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801c48c:	2002      	movs	r0, #2
 801c48e:	f7e4 fdc5 	bl	800101c <HAL_Delay>
					packet_number = packet_number + 1;
 801c492:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801c494:	2100      	movs	r1, #0
					q = 7;
 801c496:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801c498:	3501      	adds	r5, #1
 801c49a:	b2ad      	uxth	r5, r5
 801c49c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801c4a0:	d1be      	bne.n	801c420 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801c4a2:	4b0d      	ldr	r3, [pc, #52]	; (801c4d8 <packet_generator_Rabs_data_send+0x11c>)
 801c4a4:	2200      	movs	r2, #0
 801c4a6:	601a      	str	r2, [r3, #0]
 801c4a8:	605a      	str	r2, [r3, #4]
 801c4aa:	609a      	str	r2, [r3, #8]
 801c4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4b0:	2008a808 	.word	0x2008a808
 801c4b4:	20004fe2 	.word	0x20004fe2
 801c4b8:	200087fc 	.word	0x200087fc
 801c4bc:	2004cbfc 	.word	0x2004cbfc
 801c4c0:	200097fc 	.word	0x200097fc
 801c4c4:	20004ff0 	.word	0x20004ff0
 801c4c8:	20004ff4 	.word	0x20004ff4
 801c4cc:	200077fc 	.word	0x200077fc
 801c4d0:	2004cc00 	.word	0x2004cc00
 801c4d4:	20000a50 	.word	0x20000a50
 801c4d8:	2008a7fc 	.word	0x2008a7fc
 801c4dc:	200901a8 	.word	0x200901a8

0801c4e0 <packet_generator_Calculated_data_send>:
{
 801c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801c4e4:	4c73      	ldr	r4, [pc, #460]	; (801c6b4 <packet_generator_Calculated_data_send+0x1d4>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c4e6:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801c6d4 <packet_generator_Calculated_data_send+0x1f4>
{
 801c4ea:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801c4ec:	2240      	movs	r2, #64	; 0x40
 801c4ee:	2100      	movs	r1, #0
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	f002 fd7c 	bl	801efee <memset>
			dataToSend[0] = 0xAB;
 801c4f6:	23ab      	movs	r3, #171	; 0xab
 801c4f8:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801c4fa:	2312      	movs	r3, #18
 801c4fc:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801c4fe:	2304      	movs	r3, #4
 801c500:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801c502:	4b6d      	ldr	r3, [pc, #436]	; (801c6b8 <packet_generator_Calculated_data_send+0x1d8>)
 801c504:	781b      	ldrb	r3, [r3, #0]
 801c506:	3300      	adds	r3, #0
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801c508:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801c50c:	bf18      	it	ne
 801c50e:	2301      	movne	r3, #1
 801c510:	7163      	strb	r3, [r4, #5]
			packet_number = 0;
 801c512:	4645      	mov	r5, r8
			uint16_t CRC_pack = 0, packet_number = 0;
 801c514:	4647      	mov	r7, r8
			q = 7;
 801c516:	2607      	movs	r6, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c518:	46a1      	mov	r9, r4
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801c51a:	9b05      	ldr	r3, [sp, #20]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801c51c:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801c51e:	0e1a      	lsrs	r2, r3, #24
 801c520:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801c522:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801c524:	0c1a      	lsrs	r2, r3, #16
 801c526:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801c528:	0a1a      	lsrs	r2, r3, #8
 801c52a:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801c52c:	19a2      	adds	r2, r4, r6
 801c52e:	b2db      	uxtb	r3, r3
 801c530:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c532:	5da2      	ldrb	r2, [r4, r6]
 801c534:	4413      	add	r3, r2
 801c536:	5c22      	ldrb	r2, [r4, r0]
 801c538:	441a      	add	r2, r3
 801c53a:	5c63      	ldrb	r3, [r4, r1]
				q = q + 4;
 801c53c:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c53e:	4413      	add	r3, r2
				q = q + 4;
 801c540:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c542:	441f      	add	r7, r3
				if(q >= 62 || cnt == 1023){
 801c544:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801c546:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801c548:	d803      	bhi.n	801c552 <packet_generator_Calculated_data_send+0x72>
 801c54a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801c54e:	4598      	cmp	r8, r3
 801c550:	d118      	bne.n	801c584 <packet_generator_Calculated_data_send+0xa4>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c552:	7861      	ldrb	r1, [r4, #1]
 801c554:	7822      	ldrb	r2, [r4, #0]
 801c556:	440a      	add	r2, r1
 801c558:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c55a:	0a2b      	lsrs	r3, r5, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c55c:	440a      	add	r2, r1
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c55e:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801c560:	b2eb      	uxtb	r3, r5
 801c562:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c564:	4413      	add	r3, r2
 801c566:	441f      	add	r7, r3
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c568:	2240      	movs	r2, #64	; 0x40
 801c56a:	4649      	mov	r1, r9
 801c56c:	4650      	mov	r0, sl
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c56e:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c572:	f7ea fd7b 	bl	800706c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801c576:	2002      	movs	r0, #2
 801c578:	f7e4 fd50 	bl	800101c <HAL_Delay>
					packet_number = packet_number + 1;
 801c57c:	3501      	adds	r5, #1
 801c57e:	b2ad      	uxth	r5, r5
					CRC_pack = 0;
 801c580:	2700      	movs	r7, #0
					q = 7;
 801c582:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801c584:	f108 0801 	add.w	r8, r8, #1
 801c588:	fa1f f888 	uxth.w	r8, r8
 801c58c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801c590:	d1c3      	bne.n	801c51a <packet_generator_Calculated_data_send+0x3a>
			memset(dataToSend, 0, sizeof(dataToSend)); 
 801c592:	2240      	movs	r2, #64	; 0x40
 801c594:	2100      	movs	r1, #0
 801c596:	4847      	ldr	r0, [pc, #284]	; (801c6b4 <packet_generator_Calculated_data_send+0x1d4>)
 801c598:	f002 fd29 	bl	801efee <memset>
			colorimetry_xy[0] = 0.133;
 801c59c:	4b47      	ldr	r3, [pc, #284]	; (801c6bc <packet_generator_Calculated_data_send+0x1dc>)
 801c59e:	4a48      	ldr	r2, [pc, #288]	; (801c6c0 <packet_generator_Calculated_data_send+0x1e0>)
 801c5a0:	601a      	str	r2, [r3, #0]
				colorimetry_xy[1] = 0.852;
 801c5a2:	4a48      	ldr	r2, [pc, #288]	; (801c6c4 <packet_generator_Calculated_data_send+0x1e4>)
 801c5a4:	605a      	str	r2, [r3, #4]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801c5a6:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801c5aa:	233e      	movs	r3, #62	; 0x3e
 801c5ac:	55a3      	strb	r3, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801c5ae:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801c5b2:	2308      	movs	r3, #8
 801c5b4:	f804 300a 	strb.w	r3, [r4, sl]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801c5b8:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801c5bc:	2331      	movs	r3, #49	; 0x31
 801c5be:	f804 3009 	strb.w	r3, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801c5c2:	2327      	movs	r3, #39	; 0x27
 801c5c4:	f804 3008 	strb.w	r3, [r4, r8]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801c5c8:	f106 0c04 	add.w	ip, r6, #4
				memcpy(&buff_float, &colorimetry_xy[1], sizeof(float));
 801c5cc:	4b3d      	ldr	r3, [pc, #244]	; (801c6c4 <packet_generator_Calculated_data_send+0x1e4>)
 801c5ce:	9305      	str	r3, [sp, #20]
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801c5d0:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801c5d4:	233f      	movs	r3, #63	; 0x3f
 801c5d6:	f804 300c 	strb.w	r3, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801c5da:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801c5dc:	235a      	movs	r3, #90	; 0x5a
 801c5de:	f804 300e 	strb.w	r3, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801c5e2:	231c      	movs	r3, #28
 801c5e4:	5423      	strb	r3, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801c5e6:	1df2      	adds	r2, r6, #7
 801c5e8:	1df3      	adds	r3, r6, #7
 801c5ea:	9303      	str	r3, [sp, #12]
 801c5ec:	23ac      	movs	r3, #172	; 0xac
 801c5ee:	54a3      	strb	r3, [r4, r2]
			Tc_Measure = 3555;
 801c5f0:	4a35      	ldr	r2, [pc, #212]	; (801c6c8 <packet_generator_Calculated_data_send+0x1e8>)
 801c5f2:	f640 53e3 	movw	r3, #3555	; 0xde3
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801c5f6:	f8ad 3014 	strh.w	r3, [sp, #20]
			Tc_Measure = 3555;
 801c5fa:	8013      	strh	r3, [r2, #0]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801c5fc:	f106 0308 	add.w	r3, r6, #8
 801c600:	9301      	str	r3, [sp, #4]
 801c602:	9b05      	ldr	r3, [sp, #20]
 801c604:	9901      	ldr	r1, [sp, #4]
 801c606:	0a1a      	lsrs	r2, r3, #8
 801c608:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801c60a:	f106 0209 	add.w	r2, r6, #9
 801c60e:	9202      	str	r2, [sp, #8]
 801c610:	54a3      	strb	r3, [r4, r2]
				Calculate_deltaEab_Done = 0x01;
 801c612:	4b2e      	ldr	r3, [pc, #184]	; (801c6cc <packet_generator_Calculated_data_send+0x1ec>)
 801c614:	2201      	movs	r2, #1
 801c616:	701a      	strb	r2, [r3, #0]
				delta_Eab_Measure = -79;
 801c618:	f64f 73b1 	movw	r3, #65457	; 0xffb1
 801c61c:	4a2c      	ldr	r2, [pc, #176]	; (801c6d0 <packet_generator_Calculated_data_send+0x1f0>)
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801c61e:	f8ad 3014 	strh.w	r3, [sp, #20]
				delta_Eab_Measure = -79;
 801c622:	8013      	strh	r3, [r2, #0]
				dataToSend[q+10] = (buff_float >> 8) & 0x000000FF;
 801c624:	9b05      	ldr	r3, [sp, #20]
 801c626:	f106 010a 	add.w	r1, r6, #10
 801c62a:	0a1a      	lsrs	r2, r3, #8
 801c62c:	5462      	strb	r2, [r4, r1]
				dataToSend[q+11] = (buff_float) & 0x000000FF;
 801c62e:	f106 020b 	add.w	r2, r6, #11
 801c632:	54a3      	strb	r3, [r4, r2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c634:	0a2b      	lsrs	r3, r5, #8
 801c636:	70e3      	strb	r3, [r4, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801c638:	f894 b000 	ldrb.w	fp, [r4]
 801c63c:	7863      	ldrb	r3, [r4, #1]
 801c63e:	445b      	add	r3, fp
 801c640:	f894 b002 	ldrb.w	fp, [r4, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801c644:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801c646:	445b      	add	r3, fp
					dataToSend[4] = packet_number & 0x00FF;
 801c648:	7125      	strb	r5, [r4, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801c64a:	441d      	add	r5, r3
 801c64c:	19eb      	adds	r3, r5, r7
 801c64e:	5da5      	ldrb	r5, [r4, r6]
 801c650:	442b      	add	r3, r5
 801c652:	f814 500a 	ldrb.w	r5, [r4, sl]
 801c656:	5c20      	ldrb	r0, [r4, r0]
 801c658:	5c61      	ldrb	r1, [r4, r1]
 801c65a:	5ca2      	ldrb	r2, [r4, r2]
 801c65c:	442b      	add	r3, r5
 801c65e:	f814 5009 	ldrb.w	r5, [r4, r9]
 801c662:	442b      	add	r3, r5
 801c664:	f814 5008 	ldrb.w	r5, [r4, r8]
 801c668:	442b      	add	r3, r5
 801c66a:	f814 500c 	ldrb.w	r5, [r4, ip]
 801c66e:	442b      	add	r3, r5
 801c670:	f814 500e 	ldrb.w	r5, [r4, lr]
 801c674:	442b      	add	r3, r5
 801c676:	4403      	add	r3, r0
 801c678:	9803      	ldr	r0, [sp, #12]
 801c67a:	5c20      	ldrb	r0, [r4, r0]
 801c67c:	4403      	add	r3, r0
 801c67e:	9801      	ldr	r0, [sp, #4]
 801c680:	5c20      	ldrb	r0, [r4, r0]
 801c682:	4403      	add	r3, r0
 801c684:	9802      	ldr	r0, [sp, #8]
 801c686:	5c20      	ldrb	r0, [r4, r0]
 801c688:	4403      	add	r3, r0
 801c68a:	440b      	add	r3, r1
 801c68c:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c68e:	4909      	ldr	r1, [pc, #36]	; (801c6b4 <packet_generator_Calculated_data_send+0x1d4>)
 801c690:	4810      	ldr	r0, [pc, #64]	; (801c6d4 <packet_generator_Calculated_data_send+0x1f4>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801c692:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c696:	2240      	movs	r2, #64	; 0x40
 801c698:	f7ea fce8 	bl	800706c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801c69c:	2002      	movs	r0, #2
 801c69e:	f7e4 fcbd 	bl	800101c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801c6a2:	4b0d      	ldr	r3, [pc, #52]	; (801c6d8 <packet_generator_Calculated_data_send+0x1f8>)
 801c6a4:	2200      	movs	r2, #0
 801c6a6:	601a      	str	r2, [r3, #0]
 801c6a8:	605a      	str	r2, [r3, #4]
 801c6aa:	609a      	str	r2, [r3, #8]
}
 801c6ac:	b007      	add	sp, #28
 801c6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6b2:	bf00      	nop
 801c6b4:	2008a808 	.word	0x2008a808
 801c6b8:	20000a50 	.word	0x20000a50
 801c6bc:	2008a7f4 	.word	0x2008a7f4
 801c6c0:	3e083127 	.word	0x3e083127
 801c6c4:	3f5a1cac 	.word	0x3f5a1cac
 801c6c8:	2004fc00 	.word	0x2004fc00
 801c6cc:	20004c41 	.word	0x20004c41
 801c6d0:	2008acd6 	.word	0x2008acd6
 801c6d4:	200901a8 	.word	0x200901a8
 801c6d8:	2008a7fc 	.word	0x2008a7fc

0801c6dc <usb_receive_processing>:
{
 801c6dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801c6e0:	4cac      	ldr	r4, [pc, #688]	; (801c994 <usb_receive_processing+0x2b8>)
 801c6e2:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801c6e6:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801c6e8:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801c6ec:	9501      	str	r5, [sp, #4]
 801c6ee:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801c6f0:	d12a      	bne.n	801c748 <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801c6f2:	f894 8001 	ldrb.w	r8, [r4, #1]
 801c6f6:	f1b8 0f12 	cmp.w	r8, #18
 801c6fa:	d117      	bne.n	801c72c <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801c6fc:	78a7      	ldrb	r7, [r4, #2]
 801c6fe:	2f0a      	cmp	r7, #10
 801c700:	f000 80e8 	beq.w	801c8d4 <usb_receive_processing+0x1f8>
 801c704:	d815      	bhi.n	801c732 <usb_receive_processing+0x56>
 801c706:	2f02      	cmp	r7, #2
 801c708:	d023      	beq.n	801c752 <usb_receive_processing+0x76>
 801c70a:	2f04      	cmp	r7, #4
 801c70c:	f000 81ae 	beq.w	801ca6c <usb_receive_processing+0x390>
 801c710:	2f01      	cmp	r7, #1
 801c712:	d119      	bne.n	801c748 <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801c714:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801c716:	4ca0      	ldr	r4, [pc, #640]	; (801c998 <usb_receive_processing+0x2bc>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801c718:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801c71a:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801c71c:	d116      	bne.n	801c74c <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801c71e:	f7ff fe4d 	bl	801c3bc <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801c722:	2300      	movs	r3, #0
 801c724:	6033      	str	r3, [r6, #0]
 801c726:	6073      	str	r3, [r6, #4]
 801c728:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801c72a:	7023      	strb	r3, [r4, #0]
}
 801c72c:	b002      	add	sp, #8
 801c72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801c732:	2f0c      	cmp	r7, #12
 801c734:	f000 8152 	beq.w	801c9dc <usb_receive_processing+0x300>
 801c738:	f0c0 80e3 	bcc.w	801c902 <usb_receive_processing+0x226>
 801c73c:	2f0d      	cmp	r7, #13
 801c73e:	f000 80b2 	beq.w	801c8a6 <usb_receive_processing+0x1ca>
 801c742:	2f66      	cmp	r7, #102	; 0x66
 801c744:	f000 817b 	beq.w	801ca3e <usb_receive_processing+0x362>
			__asm("nop");
 801c748:	bf00      	nop
}
 801c74a:	e7ef      	b.n	801c72c <usb_receive_processing+0x50>
						packet_generator_data_send();
 801c74c:	f7ff fde0 	bl	801c310 <packet_generator_data_send>
 801c750:	e7e7      	b.n	801c722 <usb_receive_processing+0x46>
						send_usb_block = 0;
 801c752:	4b91      	ldr	r3, [pc, #580]	; (801c998 <usb_receive_processing+0x2bc>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801c754:	4c91      	ldr	r4, [pc, #580]	; (801c99c <usb_receive_processing+0x2c0>)
						send_usb_block = 0;
 801c756:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801c758:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801c75a:	4d91      	ldr	r5, [pc, #580]	; (801c9a0 <usb_receive_processing+0x2c4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801c75c:	2240      	movs	r2, #64	; 0x40
 801c75e:	4620      	mov	r0, r4
 801c760:	f002 fc45 	bl	801efee <memset>
						if (exp_num != dataToReceive[3]){
 801c764:	78f3      	ldrb	r3, [r6, #3]
 801c766:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801c768:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801c76c:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801c76e:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801c772:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801c774:	d07e      	beq.n	801c874 <usb_receive_processing+0x198>
							exp_num = dataToReceive[3];
 801c776:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801c778:	782a      	ldrb	r2, [r5, #0]
 801c77a:	4b8a      	ldr	r3, [pc, #552]	; (801c9a4 <usb_receive_processing+0x2c8>)
 801c77c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801c780:	4b89      	ldr	r3, [pc, #548]	; (801c9a8 <usb_receive_processing+0x2cc>)
 801c782:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801c784:	f7ff fc1e 	bl	801bfc4 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801c788:	7828      	ldrb	r0, [r5, #0]
 801c78a:	f7f1 fa6b 	bl	800dc64 <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801c78e:	4a87      	ldr	r2, [pc, #540]	; (801c9ac <usb_receive_processing+0x2d0>)
 801c790:	7933      	ldrb	r3, [r6, #4]
 801c792:	7811      	ldrb	r1, [r2, #0]
 801c794:	428b      	cmp	r3, r1
 801c796:	4691      	mov	r9, r2
 801c798:	d070      	beq.n	801c87c <usb_receive_processing+0x1a0>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801c79a:	3300      	adds	r3, #0
 801c79c:	bf18      	it	ne
 801c79e:	2301      	movne	r3, #1
 801c7a0:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801c7a2:	7813      	ldrb	r3, [r2, #0]
 801c7a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d165      	bne.n	801c878 <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801c7ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801c7b0:	487f      	ldr	r0, [pc, #508]	; (801c9b0 <usb_receive_processing+0x2d4>)
 801c7b2:	f7e5 fe2d 	bl	8002410 <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801c7b6:	4a7f      	ldr	r2, [pc, #508]	; (801c9b4 <usb_receive_processing+0x2d8>)
 801c7b8:	7973      	ldrb	r3, [r6, #5]
 801c7ba:	7811      	ldrb	r1, [r2, #0]
 801c7bc:	428b      	cmp	r3, r1
 801c7be:	4690      	mov	r8, r2
 801c7c0:	d060      	beq.n	801c884 <usb_receive_processing+0x1a8>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801c7c2:	3300      	adds	r3, #0
 801c7c4:	bf18      	it	ne
 801c7c6:	2301      	movne	r3, #1
 801c7c8:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801c7ca:	7813      	ldrb	r3, [r2, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d157      	bne.n	801c880 <usb_receive_processing+0x1a4>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801c7d0:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801c7d2:	2120      	movs	r1, #32
 801c7d4:	4878      	ldr	r0, [pc, #480]	; (801c9b8 <usb_receive_processing+0x2dc>)
 801c7d6:	f7e5 fe1b 	bl	8002410 <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801c7da:	4f78      	ldr	r7, [pc, #480]	; (801c9bc <usb_receive_processing+0x2e0>)
 801c7dc:	79b3      	ldrb	r3, [r6, #6]
 801c7de:	783a      	ldrb	r2, [r7, #0]
 801c7e0:	4293      	cmp	r3, r2
 801c7e2:	d05c      	beq.n	801c89e <usb_receive_processing+0x1c2>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801c7e4:	3300      	adds	r3, #0
 801c7e6:	bf18      	it	ne
 801c7e8:	2301      	movne	r3, #1
 801c7ea:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801c7ec:	f897 a000 	ldrb.w	sl, [r7]
 801c7f0:	fa5f fa8a 	uxtb.w	sl, sl
 801c7f4:	f1ba 0f01 	cmp.w	sl, #1
 801c7f8:	d146      	bne.n	801c888 <usb_receive_processing+0x1ac>
								HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);//TFT_booster SHDN on
 801c7fa:	4652      	mov	r2, sl
 801c7fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801c800:	486f      	ldr	r0, [pc, #444]	; (801c9c0 <usb_receive_processing+0x2e4>)
 801c802:	f7e5 fe05 	bl	8002410 <HAL_GPIO_WritePin>
								HAL_NVIC_EnableIRQ(TIM4_IRQn); //TFT_booster SHDN on
 801c806:	201e      	movs	r0, #30
 801c808:	f7e5 f8f6 	bl	80019f8 <HAL_NVIC_EnableIRQ>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801c80c:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801c80e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801c812:	4869      	ldr	r0, [pc, #420]	; (801c9b8 <usb_receive_processing+0x2dc>)
 801c814:	f7e5 fdfc 	bl	8002410 <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801c818:	486a      	ldr	r0, [pc, #424]	; (801c9c4 <usb_receive_processing+0x2e8>)
 801c81a:	79f3      	ldrb	r3, [r6, #7]
 801c81c:	7802      	ldrb	r2, [r0, #0]
 801c81e:	429a      	cmp	r2, r3
 801c820:	d03f      	beq.n	801c8a2 <usb_receive_processing+0x1c6>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801c822:	3300      	adds	r3, #0
 801c824:	bf18      	it	ne
 801c826:	2301      	movne	r3, #1
 801c828:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801c82a:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801c82c:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801c830:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801c834:	7800      	ldrb	r0, [r0, #0]
 801c836:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801c838:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801c83a:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801c83c:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801c83e:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801c840:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801c842:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801c844:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801c846:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801c848:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801c84a:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801c84c:	4413      	add	r3, r2
 801c84e:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c850:	4952      	ldr	r1, [pc, #328]	; (801c99c <usb_receive_processing+0x2c0>)
 801c852:	485d      	ldr	r0, [pc, #372]	; (801c9c8 <usb_receive_processing+0x2ec>)
						dataToSend[4] = LaserOnOff;
 801c854:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801c856:	4413      	add	r3, r2
 801c858:	7862      	ldrb	r2, [r4, #1]
 801c85a:	4413      	add	r3, r2
 801c85c:	78a2      	ldrb	r2, [r4, #2]
 801c85e:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c860:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801c862:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c866:	f7ea fc01 	bl	800706c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801c86a:	2300      	movs	r3, #0
 801c86c:	6033      	str	r3, [r6, #0]
 801c86e:	6073      	str	r3, [r6, #4]
 801c870:	60b3      	str	r3, [r6, #8]
					break;
 801c872:	e75b      	b.n	801c72c <usb_receive_processing+0x50>
							__asm("nop");
 801c874:	bf00      	nop
 801c876:	e78a      	b.n	801c78e <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801c878:	2201      	movs	r2, #1
 801c87a:	e797      	b.n	801c7ac <usb_receive_processing+0xd0>
							__asm("nop");
 801c87c:	bf00      	nop
 801c87e:	e79a      	b.n	801c7b6 <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801c880:	2200      	movs	r2, #0
 801c882:	e7a6      	b.n	801c7d2 <usb_receive_processing+0xf6>
							__asm("nop");
 801c884:	bf00      	nop
 801c886:	e7a8      	b.n	801c7da <usb_receive_processing+0xfe>
								HAL_NVIC_DisableIRQ(TIM4_IRQn);	//TFT_booster SHDN off
 801c888:	201e      	movs	r0, #30
 801c88a:	f7e5 f8c1 	bl	8001a10 <HAL_NVIC_DisableIRQ>
								HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET); //TFT_booster SHDN off
 801c88e:	2200      	movs	r2, #0
 801c890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801c894:	484a      	ldr	r0, [pc, #296]	; (801c9c0 <usb_receive_processing+0x2e4>)
 801c896:	f7e5 fdbb 	bl	8002410 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801c89a:	2200      	movs	r2, #0
 801c89c:	e7b7      	b.n	801c80e <usb_receive_processing+0x132>
							__asm("nop");
 801c89e:	bf00      	nop
 801c8a0:	e7ba      	b.n	801c818 <usb_receive_processing+0x13c>
							__asm("nop");
 801c8a2:	bf00      	nop
 801c8a4:	e7c1      	b.n	801c82a <usb_receive_processing+0x14e>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801c8a6:	4e49      	ldr	r6, [pc, #292]	; (801c9cc <usb_receive_processing+0x2f0>)
						EraseInitStruct.NbPages = 44; 
 801c8a8:	232c      	movs	r3, #44	; 0x2c
 801c8aa:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801c8ac:	2302      	movs	r3, #2
 801c8ae:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801c8b0:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801c8b2:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801c8b4:	f7e5 faa8 	bl	8001e08 <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801c8b8:	a901      	add	r1, sp, #4
 801c8ba:	4630      	mov	r0, r6
 801c8bc:	f7e5 fbbe 	bl	800203c <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c8c0:	4b43      	ldr	r3, [pc, #268]	; (801c9d0 <usb_receive_processing+0x2f4>)
 801c8c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c8c6:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801c8c8:	f7e5 fab0 	bl	8001e2c <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801c8cc:	6025      	str	r5, [r4, #0]
 801c8ce:	6065      	str	r5, [r4, #4]
 801c8d0:	60a5      	str	r5, [r4, #8]
					break;
 801c8d2:	e72b      	b.n	801c72c <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801c8d4:	7923      	ldrb	r3, [r4, #4]
 801c8d6:	78e2      	ldrb	r2, [r4, #3]
 801c8d8:	041b      	lsls	r3, r3, #16
 801c8da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c8de:	79a2      	ldrb	r2, [r4, #6]
 801c8e0:	4313      	orrs	r3, r2
 801c8e2:	7962      	ldrb	r2, [r4, #5]
 801c8e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c8e8:	4a3a      	ldr	r2, [pc, #232]	; (801c9d4 <usb_receive_processing+0x2f8>)
 801c8ea:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801c8ec:	4b2b      	ldr	r3, [pc, #172]	; (801c99c <usb_receive_processing+0x2c0>)
						dataToSend[2] = 0x1A;
 801c8ee:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801c8f0:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801c8f4:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801c8f8:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801c8fa:	6025      	str	r5, [r4, #0]
 801c8fc:	6065      	str	r5, [r4, #4]
 801c8fe:	60a5      	str	r5, [r4, #8]
 801c900:	e043      	b.n	801c98a <usb_receive_processing+0x2ae>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801c902:	79e0      	ldrb	r0, [r4, #7]
 801c904:	f894 8008 	ldrb.w	r8, [r4, #8]
 801c908:	4e33      	ldr	r6, [pc, #204]	; (801c9d8 <usb_receive_processing+0x2fc>)
 801c90a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801c90e:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801c910:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c914:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801c916:	462a      	mov	r2, r5
 801c918:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c91a:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801c91c:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c91e:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801c920:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801c924:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c928:	4302      	orrs	r2, r0
 801c92a:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801c92c:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c930:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801c932:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801c936:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c938:	432a      	orrs	r2, r5
 801c93a:	430b      	orrs	r3, r1
 801c93c:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801c93e:	2100      	movs	r1, #0
 801c940:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c944:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801c948:	4d22      	ldr	r5, [pc, #136]	; (801c9d4 <usb_receive_processing+0x2f8>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c94a:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801c94c:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801c94e:	4302      	orrs	r2, r0
 801c950:	430b      	orrs	r3, r1
 801c952:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801c956:	2100      	movs	r1, #0
 801c958:	4310      	orrs	r0, r2
 801c95a:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801c95c:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801c960:	f7e5 fa52 	bl	8001e08 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c964:	4b1a      	ldr	r3, [pc, #104]	; (801c9d0 <usb_receive_processing+0x2f4>)
 801c966:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c96a:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801c96c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c970:	6829      	ldr	r1, [r5, #0]
 801c972:	2000      	movs	r0, #0
 801c974:	f7e5 faa2 	bl	8001ebc <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c978:	4604      	mov	r4, r0
 801c97a:	2800      	cmp	r0, #0
 801c97c:	d1f6      	bne.n	801c96c <usb_receive_processing+0x290>
						HAL_FLASH_Lock();
 801c97e:	f7e5 fa55 	bl	8001e2c <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801c982:	4b04      	ldr	r3, [pc, #16]	; (801c994 <usb_receive_processing+0x2b8>)
 801c984:	601c      	str	r4, [r3, #0]
 801c986:	605c      	str	r4, [r3, #4]
 801c988:	609c      	str	r4, [r3, #8]
						HAL_Delay(2);
 801c98a:	2002      	movs	r0, #2
 801c98c:	f7e4 fb46 	bl	800101c <HAL_Delay>
					break;
 801c990:	e6cc      	b.n	801c72c <usb_receive_processing+0x50>
 801c992:	bf00      	nop
 801c994:	2008a7fc 	.word	0x2008a7fc
 801c998:	2008a857 	.word	0x2008a857
 801c99c:	2008a808 	.word	0x2008a808
 801c9a0:	2008a848 	.word	0x2008a848
 801c9a4:	0802e718 	.word	0x0802e718
 801c9a8:	20090114 	.word	0x20090114
 801c9ac:	20006ff8 	.word	0x20006ff8
 801c9b0:	48000800 	.word	0x48000800
 801c9b4:	2004fc02 	.word	0x2004fc02
 801c9b8:	48001400 	.word	0x48001400
 801c9bc:	20000a52 	.word	0x20000a52
 801c9c0:	48001800 	.word	0x48001800
 801c9c4:	20000a50 	.word	0x20000a50
 801c9c8:	200901a8 	.word	0x200901a8
 801c9cc:	2008fedc 	.word	0x2008fedc
 801c9d0:	40022000 	.word	0x40022000
 801c9d4:	2008ff84 	.word	0x2008ff84
 801c9d8:	2008ff78 	.word	0x2008ff78
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801c9dc:	7920      	ldrb	r0, [r4, #4]
 801c9de:	78e3      	ldrb	r3, [r4, #3]
 801c9e0:	0400      	lsls	r0, r0, #16
 801c9e2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801c9e6:	79a3      	ldrb	r3, [r4, #6]
 801c9e8:	4318      	orrs	r0, r3
 801c9ea:	7963      	ldrb	r3, [r4, #5]
 801c9ec:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801c9f0:	4b23      	ldr	r3, [pc, #140]	; (801ca80 <usb_receive_processing+0x3a4>)
 801c9f2:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801c9f4:	f7ee f9db 	bl	800adae <flash_data_read_buff>
 801c9f8:	4b22      	ldr	r3, [pc, #136]	; (801ca84 <usb_receive_processing+0x3a8>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801c9fa:	4a23      	ldr	r2, [pc, #140]	; (801ca88 <usb_receive_processing+0x3ac>)
						flash_data_read = flash_data_read_buff(flash_address);
 801c9fc:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801ca00:	cb03      	ldmia	r3!, {r0, r1}
 801ca02:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801ca04:	4921      	ldr	r1, [pc, #132]	; (801ca8c <usb_receive_processing+0x3b0>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801ca06:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801ca08:	231c      	movs	r3, #28
 801ca0a:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801ca0c:	79d3      	ldrb	r3, [r2, #7]
 801ca0e:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801ca10:	7993      	ldrb	r3, [r2, #6]
 801ca12:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801ca14:	7953      	ldrb	r3, [r2, #5]
 801ca16:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801ca18:	7913      	ldrb	r3, [r2, #4]
 801ca1a:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801ca1c:	78d3      	ldrb	r3, [r2, #3]
 801ca1e:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801ca20:	7893      	ldrb	r3, [r2, #2]
 801ca22:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801ca24:	7853      	ldrb	r3, [r2, #1]
 801ca26:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ca28:	4819      	ldr	r0, [pc, #100]	; (801ca90 <usb_receive_processing+0x3b4>)
						dataToSend[6]	= flash_data_read_SND[0];
 801ca2a:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801ca2c:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ca30:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801ca32:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801ca36:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ca38:	f7ea fb18 	bl	800706c <USBD_CUSTOM_HID_SendReport>
 801ca3c:	e75d      	b.n	801c8fa <usb_receive_processing+0x21e>
						if(CRC_STATUS == CRC_OK){
 801ca3e:	4a15      	ldr	r2, [pc, #84]	; (801ca94 <usb_receive_processing+0x3b8>)
						dataToSend[0] = 0xAB;
 801ca40:	4b12      	ldr	r3, [pc, #72]	; (801ca8c <usb_receive_processing+0x3b0>)
						if(CRC_STATUS == CRC_OK){
 801ca42:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801ca44:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801ca48:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801ca4c:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801ca4e:	b95a      	cbnz	r2, 801ca68 <usb_receive_processing+0x38c>
							dataToSend[3] = 0x01;
 801ca50:	2201      	movs	r2, #1
 801ca52:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ca54:	2240      	movs	r2, #64	; 0x40
 801ca56:	490d      	ldr	r1, [pc, #52]	; (801ca8c <usb_receive_processing+0x3b0>)
 801ca58:	480d      	ldr	r0, [pc, #52]	; (801ca90 <usb_receive_processing+0x3b4>)
 801ca5a:	f7ea fb07 	bl	800706c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801ca5e:	2300      	movs	r3, #0
 801ca60:	6033      	str	r3, [r6, #0]
 801ca62:	6073      	str	r3, [r6, #4]
 801ca64:	60b3      	str	r3, [r6, #8]
 801ca66:	e790      	b.n	801c98a <usb_receive_processing+0x2ae>
							dataToSend[3] = 0x00;
 801ca68:	70dd      	strb	r5, [r3, #3]
 801ca6a:	e7f3      	b.n	801ca54 <usb_receive_processing+0x378>
						send_usb_block = 1;
 801ca6c:	4e0a      	ldr	r6, [pc, #40]	; (801ca98 <usb_receive_processing+0x3bc>)
 801ca6e:	2301      	movs	r3, #1
 801ca70:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801ca72:	f7ff fd35 	bl	801c4e0 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801ca76:	6025      	str	r5, [r4, #0]
 801ca78:	6065      	str	r5, [r4, #4]
 801ca7a:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801ca7c:	7035      	strb	r5, [r6, #0]
					break;
 801ca7e:	e655      	b.n	801c72c <usb_receive_processing+0x50>
 801ca80:	2008ff84 	.word	0x2008ff84
 801ca84:	2008fca0 	.word	0x2008fca0
 801ca88:	2008a849 	.word	0x2008a849
 801ca8c:	2008a808 	.word	0x2008a808
 801ca90:	200901a8 	.word	0x200901a8
 801ca94:	2008f932 	.word	0x2008f932
 801ca98:	2008a857 	.word	0x2008a857

0801ca9c <auto_exposure>:
{ 
 801ca9c:	4a25      	ldr	r2, [pc, #148]	; (801cb34 <auto_exposure+0x98>)
 801ca9e:	b538      	push	{r3, r4, r5, lr}
 801caa0:	8813      	ldrh	r3, [r2, #0]
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801caa2:	4d25      	ldr	r5, [pc, #148]	; (801cb38 <auto_exposure+0x9c>)
{ 
 801caa4:	2100      	movs	r1, #0
	for (uint16_t i = 5; i<1024; i++){
 801caa6:	f240 70f6 	movw	r0, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801caaa:	186c      	adds	r4, r5, r1
 801caac:	3102      	adds	r1, #2
 801caae:	8964      	ldrh	r4, [r4, #10]
 801cab0:	42a3      	cmp	r3, r4
 801cab2:	bf38      	it	cc
 801cab4:	4623      	movcc	r3, r4
	for (uint16_t i = 5; i<1024; i++){
 801cab6:	4281      	cmp	r1, r0
 801cab8:	d1f7      	bne.n	801caaa <auto_exposure+0xe>
 801caba:	8013      	strh	r3, [r2, #0]
	if(max_el < 20000 && exp_num != 9)
 801cabc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801cac0:	4293      	cmp	r3, r2
 801cac2:	d826      	bhi.n	801cb12 <auto_exposure+0x76>
 801cac4:	4c1d      	ldr	r4, [pc, #116]	; (801cb3c <auto_exposure+0xa0>)
 801cac6:	7823      	ldrb	r3, [r4, #0]
 801cac8:	2b09      	cmp	r3, #9
 801caca:	d021      	beq.n	801cb10 <auto_exposure+0x74>
		send_usb_block =1;
 801cacc:	4d1c      	ldr	r5, [pc, #112]	; (801cb40 <auto_exposure+0xa4>)
 801cace:	2301      	movs	r3, #1
 801cad0:	702b      	strb	r3, [r5, #0]
		exp_num++;
 801cad2:	7823      	ldrb	r3, [r4, #0]
 801cad4:	3301      	adds	r3, #1
		exp_num--;
 801cad6:	b2db      	uxtb	r3, r3
 801cad8:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801cada:	7822      	ldrb	r2, [r4, #0]
 801cadc:	4b19      	ldr	r3, [pc, #100]	; (801cb44 <auto_exposure+0xa8>)
 801cade:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801cae2:	4b19      	ldr	r3, [pc, #100]	; (801cb48 <auto_exposure+0xac>)
 801cae4:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801cae6:	f7ff fa6d 	bl	801bfc4 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801caea:	7820      	ldrb	r0, [r4, #0]
 801caec:	4c17      	ldr	r4, [pc, #92]	; (801cb4c <auto_exposure+0xb0>)
 801caee:	f7f1 f8b9 	bl	800dc64 <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801caf2:	4b17      	ldr	r3, [pc, #92]	; (801cb50 <auto_exposure+0xb4>)
 801caf4:	781a      	ldrb	r2, [r3, #0]
 801caf6:	4b17      	ldr	r3, [pc, #92]	; (801cb54 <auto_exposure+0xb8>)
 801caf8:	b9ca      	cbnz	r2, 801cb2e <auto_exposure+0x92>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801cafa:	4a17      	ldr	r2, [pc, #92]	; (801cb58 <auto_exposure+0xbc>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801cafc:	ed93 0a00 	vldr	s0, [r3]
 801cb00:	edd2 0a00 	vldr	s1, [r2]
 801cb04:	f7fc fb5a 	bl	80191bc <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801cb08:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801cb0a:	ed84 0a00 	vstr	s0, [r4]
		send_usb_block =0;
 801cb0e:	702b      	strb	r3, [r5, #0]
 801cb10:	bd38      	pop	{r3, r4, r5, pc}
	} else if(max_el > 50000 && exp_num != 0)
 801cb12:	f24c 3250 	movw	r2, #50000	; 0xc350
 801cb16:	4293      	cmp	r3, r2
 801cb18:	d9fa      	bls.n	801cb10 <auto_exposure+0x74>
 801cb1a:	4c08      	ldr	r4, [pc, #32]	; (801cb3c <auto_exposure+0xa0>)
 801cb1c:	7823      	ldrb	r3, [r4, #0]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d0f6      	beq.n	801cb10 <auto_exposure+0x74>
		send_usb_block =1;
 801cb22:	4d07      	ldr	r5, [pc, #28]	; (801cb40 <auto_exposure+0xa4>)
 801cb24:	2301      	movs	r3, #1
 801cb26:	702b      	strb	r3, [r5, #0]
		exp_num--;
 801cb28:	7823      	ldrb	r3, [r4, #0]
 801cb2a:	3b01      	subs	r3, #1
 801cb2c:	e7d3      	b.n	801cad6 <auto_exposure+0x3a>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801cb2e:	4a0b      	ldr	r2, [pc, #44]	; (801cb5c <auto_exposure+0xc0>)
 801cb30:	e7e4      	b.n	801cafc <auto_exposure+0x60>
 801cb32:	bf00      	nop
 801cb34:	2008a854 	.word	0x2008a854
 801cb38:	200097fc 	.word	0x200097fc
 801cb3c:	2008a848 	.word	0x2008a848
 801cb40:	2008a857 	.word	0x2008a857
 801cb44:	0802e718 	.word	0x0802e718
 801cb48:	20090114 	.word	0x20090114
 801cb4c:	20004ff4 	.word	0x20004ff4
 801cb50:	20000a50 	.word	0x20000a50
 801cb54:	20004fec 	.word	0x20004fec
 801cb58:	20004fe8 	.word	0x20004fe8
 801cb5c:	20004fe4 	.word	0x20004fe4

0801cb60 <exposure_display>:
{
 801cb60:	b570      	push	{r4, r5, r6, lr}
 801cb62:	b086      	sub	sp, #24
		char buffer[9] = {0};
 801cb64:	2300      	movs	r3, #0
		TFT_FillRectangle(X, Y, X+60, Y+8, TFT_Black_Bkgr);
 801cb66:	f100 023c 	add.w	r2, r0, #60	; 0x3c
		char buffer[9] = {0};
 801cb6a:	9303      	str	r3, [sp, #12]
 801cb6c:	9304      	str	r3, [sp, #16]
 801cb6e:	f88d 3014 	strb.w	r3, [sp, #20]
		TFT_FillRectangle(X, Y, X+60, Y+8, TFT_Black_Bkgr);
 801cb72:	2663      	movs	r6, #99	; 0x63
 801cb74:	f101 0308 	add.w	r3, r1, #8
 801cb78:	b29b      	uxth	r3, r3
 801cb7a:	b292      	uxth	r2, r2
 801cb7c:	9600      	str	r6, [sp, #0]
{
 801cb7e:	460d      	mov	r5, r1
 801cb80:	4604      	mov	r4, r0
		TFT_FillRectangle(X, Y, X+60, Y+8, TFT_Black_Bkgr);
 801cb82:	f7fe fe2a 	bl	801b7da <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 801cb86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cb8a:	f7ff f855 	bl	801bc38 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801cb8e:	4630      	mov	r0, r6
 801cb90:	f7ff f858 	bl	801bc44 <TFT_SetBackColor>
		TFT_SetFont(&Font7EN_arch_big);
 801cb94:	482a      	ldr	r0, [pc, #168]	; (801cc40 <exposure_display+0xe0>)
 801cb96:	f7ff f849 	bl	801bc2c <TFT_SetFont>
		exposure_text = (exp_num == 0) ? 7.812 : (exp_num == 1) ? 15.625 : (exp_num == 2) ? 31.25 : (exp_num == 3) ? 62.5 : (exp_num == 4) ? 125 :
 801cb9a:	4b2a      	ldr	r3, [pc, #168]	; (801cc44 <exposure_display+0xe4>)
 801cb9c:	781a      	ldrb	r2, [r3, #0]
 801cb9e:	2a00      	cmp	r2, #0
 801cba0:	d03d      	beq.n	801cc1e <exposure_display+0xbe>
 801cba2:	781a      	ldrb	r2, [r3, #0]
 801cba4:	2a01      	cmp	r2, #1
 801cba6:	d03c      	beq.n	801cc22 <exposure_display+0xc2>
 801cba8:	781a      	ldrb	r2, [r3, #0]
 801cbaa:	2a02      	cmp	r2, #2
 801cbac:	d03b      	beq.n	801cc26 <exposure_display+0xc6>
 801cbae:	781a      	ldrb	r2, [r3, #0]
 801cbb0:	2a03      	cmp	r2, #3
 801cbb2:	d03a      	beq.n	801cc2a <exposure_display+0xca>
 801cbb4:	781a      	ldrb	r2, [r3, #0]
 801cbb6:	2a04      	cmp	r2, #4
 801cbb8:	d039      	beq.n	801cc2e <exposure_display+0xce>
		(exp_num == 5) ? 250 :(exp_num == 6) ? 500 : (exp_num == 7) ? 1000 : (exp_num == 8) ? 2000 : 4000;
 801cbba:	781a      	ldrb	r2, [r3, #0]
		exposure_text = (exp_num == 0) ? 7.812 : (exp_num == 1) ? 15.625 : (exp_num == 2) ? 31.25 : (exp_num == 3) ? 62.5 : (exp_num == 4) ? 125 :
 801cbbc:	2a05      	cmp	r2, #5
 801cbbe:	d038      	beq.n	801cc32 <exposure_display+0xd2>
		(exp_num == 5) ? 250 :(exp_num == 6) ? 500 : (exp_num == 7) ? 1000 : (exp_num == 8) ? 2000 : 4000;
 801cbc0:	781a      	ldrb	r2, [r3, #0]
		exposure_text = (exp_num == 0) ? 7.812 : (exp_num == 1) ? 15.625 : (exp_num == 2) ? 31.25 : (exp_num == 3) ? 62.5 : (exp_num == 4) ? 125 :
 801cbc2:	2a06      	cmp	r2, #6
 801cbc4:	d037      	beq.n	801cc36 <exposure_display+0xd6>
		(exp_num == 5) ? 250 :(exp_num == 6) ? 500 : (exp_num == 7) ? 1000 : (exp_num == 8) ? 2000 : 4000;
 801cbc6:	781a      	ldrb	r2, [r3, #0]
		exposure_text = (exp_num == 0) ? 7.812 : (exp_num == 1) ? 15.625 : (exp_num == 2) ? 31.25 : (exp_num == 3) ? 62.5 : (exp_num == 4) ? 125 :
 801cbc8:	2a07      	cmp	r2, #7
 801cbca:	d036      	beq.n	801cc3a <exposure_display+0xda>
		(exp_num == 5) ? 250 :(exp_num == 6) ? 500 : (exp_num == 7) ? 1000 : (exp_num == 8) ? 2000 : 4000;
 801cbcc:	781b      	ldrb	r3, [r3, #0]
		exposure_text = (exp_num == 0) ? 7.812 : (exp_num == 1) ? 15.625 : (exp_num == 2) ? 31.25 : (exp_num == 3) ? 62.5 : (exp_num == 4) ? 125 :
 801cbce:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 801cc48 <exposure_display+0xe8>
 801cbd2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801cc4c <exposure_display+0xec>
 801cbd6:	2b08      	cmp	r3, #8
 801cbd8:	bf14      	ite	ne
 801cbda:	ee17 0a10 	vmovne	r0, s14
 801cbde:	ee17 0a90 	vmoveq	r0, s15
		sprintf (buffer, "%.2f", exposure_text);
 801cbe2:	f7e3 fcc1 	bl	8000568 <__aeabi_f2d>
 801cbe6:	4602      	mov	r2, r0
 801cbe8:	460b      	mov	r3, r1
 801cbea:	a803      	add	r0, sp, #12
 801cbec:	4918      	ldr	r1, [pc, #96]	; (801cc50 <exposure_display+0xf0>)
 801cbee:	f002 fa07 	bl	801f000 <siprintf>
		TFT_DisplayString(X, Y, (uint8_t *)buffer, LEFT_MODE);
 801cbf2:	2303      	movs	r3, #3
 801cbf4:	aa03      	add	r2, sp, #12
 801cbf6:	4629      	mov	r1, r5
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	f7ff f939 	bl	801be70 <TFT_DisplayString>
		TFT_DrawChar(X+56, Y, 'm');
 801cbfe:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801cc02:	4629      	mov	r1, r5
 801cc04:	226d      	movs	r2, #109	; 0x6d
 801cc06:	b280      	uxth	r0, r0
 801cc08:	f7ff f8da 	bl	801bdc0 <TFT_DrawChar>
		TFT_DrawChar(X+64, Y, 's');
 801cc0c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801cc10:	2273      	movs	r2, #115	; 0x73
 801cc12:	4629      	mov	r1, r5
 801cc14:	b280      	uxth	r0, r0
 801cc16:	f7ff f8d3 	bl	801bdc0 <TFT_DrawChar>
}
 801cc1a:	b006      	add	sp, #24
 801cc1c:	bd70      	pop	{r4, r5, r6, pc}
		exposure_text = (exp_num == 0) ? 7.812 : (exp_num == 1) ? 15.625 : (exp_num == 2) ? 31.25 : (exp_num == 3) ? 62.5 : (exp_num == 4) ? 125 :
 801cc1e:	480d      	ldr	r0, [pc, #52]	; (801cc54 <exposure_display+0xf4>)
 801cc20:	e7df      	b.n	801cbe2 <exposure_display+0x82>
 801cc22:	480d      	ldr	r0, [pc, #52]	; (801cc58 <exposure_display+0xf8>)
 801cc24:	e7dd      	b.n	801cbe2 <exposure_display+0x82>
 801cc26:	480d      	ldr	r0, [pc, #52]	; (801cc5c <exposure_display+0xfc>)
 801cc28:	e7db      	b.n	801cbe2 <exposure_display+0x82>
 801cc2a:	480d      	ldr	r0, [pc, #52]	; (801cc60 <exposure_display+0x100>)
 801cc2c:	e7d9      	b.n	801cbe2 <exposure_display+0x82>
 801cc2e:	480d      	ldr	r0, [pc, #52]	; (801cc64 <exposure_display+0x104>)
 801cc30:	e7d7      	b.n	801cbe2 <exposure_display+0x82>
 801cc32:	480d      	ldr	r0, [pc, #52]	; (801cc68 <exposure_display+0x108>)
 801cc34:	e7d5      	b.n	801cbe2 <exposure_display+0x82>
 801cc36:	480d      	ldr	r0, [pc, #52]	; (801cc6c <exposure_display+0x10c>)
 801cc38:	e7d3      	b.n	801cbe2 <exposure_display+0x82>
 801cc3a:	480d      	ldr	r0, [pc, #52]	; (801cc70 <exposure_display+0x110>)
 801cc3c:	e7d1      	b.n	801cbe2 <exposure_display+0x82>
 801cc3e:	bf00      	nop
 801cc40:	20000218 	.word	0x20000218
 801cc44:	2008a848 	.word	0x2008a848
 801cc48:	457a0000 	.word	0x457a0000
 801cc4c:	44fa0000 	.word	0x44fa0000
 801cc50:	0802e6b2 	.word	0x0802e6b2
 801cc54:	40f9fbe7 	.word	0x40f9fbe7
 801cc58:	417a0000 	.word	0x417a0000
 801cc5c:	41fa0000 	.word	0x41fa0000
 801cc60:	427a0000 	.word	0x427a0000
 801cc64:	42fa0000 	.word	0x42fa0000
 801cc68:	437a0000 	.word	0x437a0000
 801cc6c:	43fa0000 	.word	0x43fa0000
 801cc70:	447a0000 	.word	0x447a0000

0801cc74 <TIM2_IRQHandler>:
{
 801cc74:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801cc76:	4d0d      	ldr	r5, [pc, #52]	; (801ccac <TIM2_IRQHandler+0x38>)
 801cc78:	2200      	movs	r2, #0
 801cc7a:	2110      	movs	r1, #16
 801cc7c:	4628      	mov	r0, r5
 801cc7e:	f7e5 fbc7 	bl	8002410 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801cc82:	200a      	movs	r0, #10
 801cc84:	f7ff f9e6 	bl	801c054 <DWT_Delay>
	i = 0;
 801cc88:	4b09      	ldr	r3, [pc, #36]	; (801ccb0 <TIM2_IRQHandler+0x3c>)
 801cc8a:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801cc8c:	4628      	mov	r0, r5
 801cc8e:	2201      	movs	r2, #1
 801cc90:	2110      	movs	r1, #16
	i = 0;
 801cc92:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801cc94:	f7e5 fbbc 	bl	8002410 <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801cc98:	4b06      	ldr	r3, [pc, #24]	; (801ccb4 <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801cc9a:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801cc9c:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801cc9e:	f7e4 fedb 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801cca2:	4805      	ldr	r0, [pc, #20]	; (801ccb8 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801cca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801cca8:	f7e8 bb13 	b.w	80052d2 <HAL_TIM_IRQHandler>
 801ccac:	48000800 	.word	0x48000800
 801ccb0:	2008a852 	.word	0x2008a852
 801ccb4:	2008a7d0 	.word	0x2008a7d0
 801ccb8:	20090114 	.word	0x20090114

0801ccbc <TIM6_DAC_IRQHandler>:
{
 801ccbc:	b508      	push	{r3, lr}
	pause_button = 0;
 801ccbe:	4b06      	ldr	r3, [pc, #24]	; (801ccd8 <TIM6_DAC_IRQHandler+0x1c>)
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801ccc4:	f7ff faf4 	bl	801c2b0 <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801ccc8:	2036      	movs	r0, #54	; 0x36
 801ccca:	f7e4 fec5 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801ccce:	4803      	ldr	r0, [pc, #12]	; (801ccdc <TIM6_DAC_IRQHandler+0x20>)
}
 801ccd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801ccd4:	f7e8 bafd 	b.w	80052d2 <HAL_TIM_IRQHandler>
 801ccd8:	2008a856 	.word	0x2008a856
 801ccdc:	2008ff90 	.word	0x2008ff90

0801cce0 <TIM7_IRQHandler>:
{
 801cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801cce2:	4b48      	ldr	r3, [pc, #288]	; (801ce04 <TIM7_IRQHandler+0x124>)
 801cce4:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801cce6:	3b01      	subs	r3, #1
 801cce8:	2b04      	cmp	r3, #4
 801ccea:	d81e      	bhi.n	801cd2a <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801ccec:	4b46      	ldr	r3, [pc, #280]	; (801ce08 <TIM7_IRQHandler+0x128>)
 801ccee:	781b      	ldrb	r3, [r3, #0]
 801ccf0:	b9db      	cbnz	r3, 801cd2a <TIM7_IRQHandler+0x4a>
 801ccf2:	4b46      	ldr	r3, [pc, #280]	; (801ce0c <TIM7_IRQHandler+0x12c>)
 801ccf4:	781b      	ldrb	r3, [r3, #0]
 801ccf6:	b9c3      	cbnz	r3, 801cd2a <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801ccf8:	4a45      	ldr	r2, [pc, #276]	; (801ce10 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801ccfa:	4946      	ldr	r1, [pc, #280]	; (801ce14 <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801ccfc:	8813      	ldrh	r3, [r2, #0]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	b29b      	uxth	r3, r3
 801cd02:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801cd04:	780a      	ldrb	r2, [r1, #0]
 801cd06:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801cd08:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801cd0a:	d96b      	bls.n	801cde4 <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801cd0c:	4842      	ldr	r0, [pc, #264]	; (801ce18 <TIM7_IRQHandler+0x138>)
 801cd0e:	f241 7670 	movw	r6, #6000	; 0x1770
 801cd12:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801cd16:	fbb2 f2f6 	udiv	r2, r2, r6
 801cd1a:	4293      	cmp	r3, r2
 801cd1c:	d12b      	bne.n	801cd76 <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801cd1e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801ce1c <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801cd22:	210d      	movs	r1, #13
 801cd24:	2055      	movs	r0, #85	; 0x55
 801cd26:	f7f7 fb99 	bl	801445c <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801cd2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801cd2e:	483c      	ldr	r0, [pc, #240]	; (801ce20 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801cd30:	4c3c      	ldr	r4, [pc, #240]	; (801ce24 <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801cd32:	4d3d      	ldr	r5, [pc, #244]	; (801ce28 <TIM7_IRQHandler+0x148>)
 801cd34:	f7e5 fb66 	bl	8002404 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801cd38:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801cd3a:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801cd3c:	4283      	cmp	r3, r0
 801cd3e:	d012      	beq.n	801cd66 <TIM7_IRQHandler+0x86>
 801cd40:	4b3a      	ldr	r3, [pc, #232]	; (801ce2c <TIM7_IRQHandler+0x14c>)
 801cd42:	781b      	ldrb	r3, [r3, #0]
 801cd44:	b97b      	cbnz	r3, 801cd66 <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801cd46:	fab0 f280 	clz	r2, r0
 801cd4a:	0952      	lsrs	r2, r2, #5
 801cd4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cd50:	2037      	movs	r0, #55	; 0x37
 801cd52:	f7f6 fdfd 	bl	8013950 <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801cd56:	782b      	ldrb	r3, [r5, #0]
 801cd58:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d14b      	bne.n	801cdf6 <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801cd5e:	f7ff f91f 	bl	801bfa0 <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801cd62:	f7fe faeb 	bl	801b33c <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801cd66:	2037      	movs	r0, #55	; 0x37
 801cd68:	f7e4 fe76 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801cd6c:	4830      	ldr	r0, [pc, #192]	; (801ce30 <TIM7_IRQHandler+0x150>)
}
 801cd6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801cd72:	f7e8 baae 	b.w	80052d2 <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801cd76:	780a      	ldrb	r2, [r1, #0]
 801cd78:	270c      	movs	r7, #12
 801cd7a:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801cd7e:	fbb5 f5f7 	udiv	r5, r5, r7
 801cd82:	22fa      	movs	r2, #250	; 0xfa
 801cd84:	fb95 f5f2 	sdiv	r5, r5, r2
 801cd88:	42ab      	cmp	r3, r5
 801cd8a:	d102      	bne.n	801cd92 <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801cd8c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801ce34 <TIM7_IRQHandler+0x154>
 801cd90:	e7c7      	b.n	801cd22 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801cd92:	780a      	ldrb	r2, [r1, #0]
 801cd94:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801cd98:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801cd9c:	fbb2 f2f7 	udiv	r2, r2, r7
 801cda0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cda4:	fb92 f2f4 	sdiv	r2, r2, r4
 801cda8:	4293      	cmp	r3, r2
 801cdaa:	d102      	bne.n	801cdb2 <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801cdac:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801ce38 <TIM7_IRQHandler+0x158>
 801cdb0:	e7b7      	b.n	801cd22 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801cdb2:	780a      	ldrb	r2, [r1, #0]
 801cdb4:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801cdb8:	fbb4 f4f7 	udiv	r4, r4, r7
 801cdbc:	227d      	movs	r2, #125	; 0x7d
 801cdbe:	fb94 f4f2 	sdiv	r4, r4, r2
 801cdc2:	42a3      	cmp	r3, r4
 801cdc4:	d102      	bne.n	801cdcc <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801cdc6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801ce3c <TIM7_IRQHandler+0x15c>
 801cdca:	e7aa      	b.n	801cd22 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801cdcc:	780a      	ldrb	r2, [r1, #0]
 801cdce:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801cdd2:	fbb2 f2f6 	udiv	r2, r2, r6
 801cdd6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cdda:	4293      	cmp	r3, r2
 801cddc:	d1a5      	bne.n	801cd2a <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801cdde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801cde2:	e79e      	b.n	801cd22 <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801cde4:	2a02      	cmp	r2, #2
 801cde6:	d9fa      	bls.n	801cdde <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801cde8:	2b01      	cmp	r3, #1
 801cdea:	d102      	bne.n	801cdf2 <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801cdec:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801cdf0:	e797      	b.n	801cd22 <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801cdf2:	2b02      	cmp	r3, #2
 801cdf4:	e7f2      	b.n	801cddc <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801cdf6:	4812      	ldr	r0, [pc, #72]	; (801ce40 <TIM7_IRQHandler+0x160>)
 801cdf8:	f7eb fe90 	bl	8008b1c <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801cdfc:	4811      	ldr	r0, [pc, #68]	; (801ce44 <TIM7_IRQHandler+0x164>)
 801cdfe:	f7e7 fbd1 	bl	80045a4 <HAL_SD_DeInit>
 801ce02:	e7b0      	b.n	801cd66 <TIM7_IRQHandler+0x86>
 801ce04:	20004ca1 	.word	0x20004ca1
 801ce08:	20004cc6 	.word	0x20004cc6
 801ce0c:	20004fb7 	.word	0x20004fb7
 801ce10:	2008a7d0 	.word	0x2008a7d0
 801ce14:	2008a848 	.word	0x2008a848
 801ce18:	0802e718 	.word	0x0802e718
 801ce1c:	3e4ccccd 	.word	0x3e4ccccd
 801ce20:	48000800 	.word	0x48000800
 801ce24:	20000a53 	.word	0x20000a53
 801ce28:	20090110 	.word	0x20090110
 801ce2c:	2008f932 	.word	0x2008f932
 801ce30:	20090160 	.word	0x20090160
 801ce34:	3ecccccd 	.word	0x3ecccccd
 801ce38:	3f19999a 	.word	0x3f19999a
 801ce3c:	3f4ccccd 	.word	0x3f4ccccd
 801ce40:	2008d8a5 	.word	0x2008d8a5
 801ce44:	2008fcb0 	.word	0x2008fcb0

0801ce48 <TIM4_IRQHandler>:
{
 801ce48:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
 801ce4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ce4e:	4805      	ldr	r0, [pc, #20]	; (801ce64 <TIM4_IRQHandler+0x1c>)
 801ce50:	f7e5 fae3 	bl	800241a <HAL_GPIO_TogglePin>
	HAL_NVIC_ClearPendingIRQ(TIM4_IRQn);
 801ce54:	201e      	movs	r0, #30
 801ce56:	f7e4 fdff 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim4);
 801ce5a:	4803      	ldr	r0, [pc, #12]	; (801ce68 <TIM4_IRQHandler+0x20>)
}
 801ce5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim4);
 801ce60:	f7e8 ba37 	b.w	80052d2 <HAL_TIM_IRQHandler>
 801ce64:	48001800 	.word	0x48001800
 801ce68:	2008fc10 	.word	0x2008fc10

0801ce6c <EXTI9_5_IRQHandler>:
{
 801ce6c:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801ce6e:	4c22      	ldr	r4, [pc, #136]	; (801cef8 <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801ce70:	2001      	movs	r0, #1
 801ce72:	f7ff f8ef 	bl	801c054 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801ce76:	2300      	movs	r3, #0
 801ce78:	4622      	mov	r2, r4
 801ce7a:	4621      	mov	r1, r4
 801ce7c:	9300      	str	r3, [sp, #0]
 801ce7e:	481f      	ldr	r0, [pc, #124]	; (801cefc <EXTI9_5_IRQHandler+0x90>)
 801ce80:	2302      	movs	r3, #2
 801ce82:	f7e8 f836 	bl	8004ef2 <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801ce86:	7823      	ldrb	r3, [r4, #0]
 801ce88:	7862      	ldrb	r2, [r4, #1]
 801ce8a:	4c1d      	ldr	r4, [pc, #116]	; (801cf00 <EXTI9_5_IRQHandler+0x94>)
 801ce8c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801ce90:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801ce92:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801ce96:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801ce98:	b289      	uxth	r1, r1
 801ce9a:	4b1a      	ldr	r3, [pc, #104]	; (801cf04 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801ce9c:	dd05      	ble.n	801ceaa <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801ce9e:	8822      	ldrh	r2, [r4, #0]
 801cea0:	b292      	uxth	r2, r2
 801cea2:	3a01      	subs	r2, #1
 801cea4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801cea8:	e002      	b.n	801ceb0 <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801ceaa:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801ceae:	dbf6      	blt.n	801ce9e <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801ceb0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801ceb4:	8823      	ldrh	r3, [r4, #0]
 801ceb6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801ceba:	b29b      	uxth	r3, r3
 801cebc:	4293      	cmp	r3, r2
 801cebe:	d916      	bls.n	801ceee <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801cec0:	4b11      	ldr	r3, [pc, #68]	; (801cf08 <EXTI9_5_IRQHandler+0x9c>)
 801cec2:	781b      	ldrb	r3, [r3, #0]
 801cec4:	b943      	cbnz	r3, 801ced8 <EXTI9_5_IRQHandler+0x6c>
 801cec6:	4b11      	ldr	r3, [pc, #68]	; (801cf0c <EXTI9_5_IRQHandler+0xa0>)
 801cec8:	781b      	ldrb	r3, [r3, #0]
 801ceca:	b92b      	cbnz	r3, 801ced8 <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801cecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ced0:	490c      	ldr	r1, [pc, #48]	; (801cf04 <EXTI9_5_IRQHandler+0x98>)
 801ced2:	480f      	ldr	r0, [pc, #60]	; (801cf10 <EXTI9_5_IRQHandler+0xa4>)
 801ced4:	f002 f880 	bl	801efd8 <memcpy>
			i = 0;
 801ced8:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801ceda:	2017      	movs	r0, #23
			i++;
 801cedc:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801cede:	f7e4 fdbb 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801cee2:	2080      	movs	r0, #128	; 0x80
}
 801cee4:	b002      	add	sp, #8
 801cee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801ceea:	f7e5 ba9b 	b.w	8002424 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801ceee:	8823      	ldrh	r3, [r4, #0]
 801cef0:	3301      	adds	r3, #1
 801cef2:	b29b      	uxth	r3, r3
 801cef4:	e7f1      	b.n	801ceda <EXTI9_5_IRQHandler+0x6e>
 801cef6:	bf00      	nop
 801cef8:	20090048 	.word	0x20090048
 801cefc:	200900ac 	.word	0x200900ac
 801cf00:	2008a852 	.word	0x2008a852
 801cf04:	20006ffa 	.word	0x20006ffa
 801cf08:	2008a857 	.word	0x2008a857
 801cf0c:	20004cc6 	.word	0x20004cc6
 801cf10:	200097fc 	.word	0x200097fc
 801cf14:	00000000 	.word	0x00000000

0801cf18 <EXTI3_IRQHandler>:
{	
 801cf18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801cf1c:	4d52      	ldr	r5, [pc, #328]	; (801d068 <EXTI3_IRQHandler+0x150>)
 801cf1e:	682b      	ldr	r3, [r5, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 801cf20:	aa02      	add	r2, sp, #8
	cnt_touch_delay = cnt_touch_delay + 1;
 801cf22:	3301      	adds	r3, #1
 801cf24:	602b      	str	r3, [r5, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 801cf26:	2300      	movs	r3, #0
 801cf28:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801cf2c:	a901      	add	r1, sp, #4
 801cf2e:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 801cf30:	f8ad 3004 	strh.w	r3, [sp, #4]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801cf34:	f7fe f98a 	bl	801b24c <TS_Get_XY1>
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801cf38:	4b4c      	ldr	r3, [pc, #304]	; (801d06c <EXTI3_IRQHandler+0x154>)
 801cf3a:	7819      	ldrb	r1, [r3, #0]
 801cf3c:	462c      	mov	r4, r5
 801cf3e:	461a      	mov	r2, r3
 801cf40:	b9b1      	cbnz	r1, 801cf70 <EXTI3_IRQHandler+0x58>
 801cf42:	6829      	ldr	r1, [r5, #0]
 801cf44:	2931      	cmp	r1, #49	; 0x31
 801cf46:	d913      	bls.n	801cf70 <EXTI3_IRQHandler+0x58>
			TFT_ON_OFF = 0x01;
 801cf48:	2401      	movs	r4, #1
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);//TFT_booster SHDN on
 801cf4a:	4622      	mov	r2, r4
 801cf4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801cf50:	4847      	ldr	r0, [pc, #284]	; (801d070 <EXTI3_IRQHandler+0x158>)
			TFT_ON_OFF = 0x01;
 801cf52:	701c      	strb	r4, [r3, #0]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);//TFT_booster SHDN on
 801cf54:	f7e5 fa5c 	bl	8002410 <HAL_GPIO_WritePin>
			HAL_NVIC_EnableIRQ(TIM4_IRQn); //TFT_booster SHDN on
 801cf58:	201e      	movs	r0, #30
 801cf5a:	f7e4 fd4d 	bl	80019f8 <HAL_NVIC_EnableIRQ>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801cf5e:	4622      	mov	r2, r4
 801cf60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801cf64:	4843      	ldr	r0, [pc, #268]	; (801d074 <EXTI3_IRQHandler+0x15c>)
 801cf66:	f7e5 fa53 	bl	8002410 <HAL_GPIO_WritePin>
}
 801cf6a:	b002      	add	sp, #8
 801cf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(TFT_ON_OFF && (cnt_touch_delay >= 0x0B)){
 801cf70:	7813      	ldrb	r3, [r2, #0]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d062      	beq.n	801d03c <EXTI3_IRQHandler+0x124>
 801cf76:	6823      	ldr	r3, [r4, #0]
 801cf78:	2b0a      	cmp	r3, #10
 801cf7a:	d95f      	bls.n	801d03c <EXTI3_IRQHandler+0x124>
			if((Mode_EL == 0x00) && ((Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)))
 801cf7c:	4b3e      	ldr	r3, [pc, #248]	; (801d078 <EXTI3_IRQHandler+0x160>)
 801cf7e:	781b      	ldrb	r3, [r3, #0]
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d157      	bne.n	801d034 <EXTI3_IRQHandler+0x11c>
 801cf84:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801cf88:	f7e3 fadc 	bl	8000544 <__aeabi_i2d>
 801cf8c:	4680      	mov	r8, r0
 801cf8e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801cf92:	4689      	mov	r9, r1
 801cf94:	f7e3 fad6 	bl	8000544 <__aeabi_i2d>
 801cf98:	a32d      	add	r3, pc, #180	; (adr r3, 801d050 <EXTI3_IRQHandler+0x138>)
 801cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf9e:	4606      	mov	r6, r0
 801cfa0:	460f      	mov	r7, r1
 801cfa2:	4640      	mov	r0, r8
 801cfa4:	4649      	mov	r1, r9
 801cfa6:	f04f 0501 	mov.w	r5, #1
 801cfaa:	f7e3 fdb7 	bl	8000b1c <__aeabi_dcmpge>
 801cfae:	b900      	cbnz	r0, 801cfb2 <EXTI3_IRQHandler+0x9a>
 801cfb0:	4605      	mov	r5, r0
 801cfb2:	a329      	add	r3, pc, #164	; (adr r3, 801d058 <EXTI3_IRQHandler+0x140>)
 801cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfb8:	4640      	mov	r0, r8
 801cfba:	4649      	mov	r1, r9
 801cfbc:	f04f 0a01 	mov.w	sl, #1
 801cfc0:	f7e3 fda2 	bl	8000b08 <__aeabi_dcmple>
 801cfc4:	b900      	cbnz	r0, 801cfc8 <EXTI3_IRQHandler+0xb0>
 801cfc6:	4682      	mov	sl, r0
 801cfc8:	a325      	add	r3, pc, #148	; (adr r3, 801d060 <EXTI3_IRQHandler+0x148>)
 801cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfce:	4630      	mov	r0, r6
 801cfd0:	4639      	mov	r1, r7
 801cfd2:	ea05 050a 	and.w	r5, r5, sl
 801cfd6:	f04f 0801 	mov.w	r8, #1
 801cfda:	f7e3 fd9f 	bl	8000b1c <__aeabi_dcmpge>
 801cfde:	b900      	cbnz	r0, 801cfe2 <EXTI3_IRQHandler+0xca>
 801cfe0:	4680      	mov	r8, r0
 801cfe2:	ea05 0508 	and.w	r5, r5, r8
 801cfe6:	07eb      	lsls	r3, r5, #31
 801cfe8:	d524      	bpl.n	801d034 <EXTI3_IRQHandler+0x11c>
 801cfea:	2200      	movs	r2, #0
 801cfec:	4b23      	ldr	r3, [pc, #140]	; (801d07c <EXTI3_IRQHandler+0x164>)
 801cfee:	4630      	mov	r0, r6
 801cff0:	4639      	mov	r1, r7
 801cff2:	f04f 0501 	mov.w	r5, #1
 801cff6:	f7e3 fd87 	bl	8000b08 <__aeabi_dcmple>
 801cffa:	b900      	cbnz	r0, 801cffe <EXTI3_IRQHandler+0xe6>
 801cffc:	4605      	mov	r5, r0
 801cffe:	f015 0fff 	tst.w	r5, #255	; 0xff
 801d002:	d017      	beq.n	801d034 <EXTI3_IRQHandler+0x11c>
				pause_button++;
 801d004:	4d1e      	ldr	r5, [pc, #120]	; (801d080 <EXTI3_IRQHandler+0x168>)
 801d006:	782b      	ldrb	r3, [r5, #0]
 801d008:	3301      	adds	r3, #1
 801d00a:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801d00c:	2b03      	cmp	r3, #3
				pause_button++;
 801d00e:	702b      	strb	r3, [r5, #0]
				if(pause_button > 3)
 801d010:	d910      	bls.n	801d034 <EXTI3_IRQHandler+0x11c>
					LaserOnOff = !LaserOnOff;
 801d012:	4a1c      	ldr	r2, [pc, #112]	; (801d084 <EXTI3_IRQHandler+0x16c>)
 801d014:	7813      	ldrb	r3, [r2, #0]
 801d016:	fab3 f383 	clz	r3, r3
 801d01a:	095b      	lsrs	r3, r3, #5
 801d01c:	7013      	strb	r3, [r2, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d01e:	7813      	ldrb	r3, [r2, #0]
 801d020:	b19b      	cbz	r3, 801d04a <EXTI3_IRQHandler+0x132>
 801d022:	2200      	movs	r2, #0
 801d024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d028:	4817      	ldr	r0, [pc, #92]	; (801d088 <EXTI3_IRQHandler+0x170>)
 801d02a:	f7e5 f9f1 	bl	8002410 <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801d02e:	2300      	movs	r3, #0
 801d030:	6023      	str	r3, [r4, #0]
					pause_button = 0;
 801d032:	702b      	strb	r3, [r5, #0]
				GUI_Touch_Processing();
 801d034:	f7f2 fc44 	bl	800f8c0 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801d038:	2300      	movs	r3, #0
 801d03a:	6023      	str	r3, [r4, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801d03c:	2009      	movs	r0, #9
 801d03e:	f7e4 fd0b 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801d042:	2008      	movs	r0, #8
 801d044:	f7e5 f9ee 	bl	8002424 <HAL_GPIO_EXTI_IRQHandler>
}
 801d048:	e78f      	b.n	801cf6a <EXTI3_IRQHandler+0x52>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d04a:	2201      	movs	r2, #1
 801d04c:	e7ea      	b.n	801d024 <EXTI3_IRQHandler+0x10c>
 801d04e:	bf00      	nop
 801d050:	99999999 	.word	0x99999999
 801d054:	40720d99 	.word	0x40720d99
 801d058:	33333333 	.word	0x33333333
 801d05c:	407aff33 	.word	0x407aff33
 801d060:	99999999 	.word	0x99999999
 801d064:	4091a399 	.word	0x4091a399
 801d068:	2008a7d4 	.word	0x2008a7d4
 801d06c:	20000a52 	.word	0x20000a52
 801d070:	48001800 	.word	0x48001800
 801d074:	48001400 	.word	0x48001400
 801d078:	20000a50 	.word	0x20000a50
 801d07c:	4093e000 	.word	0x4093e000
 801d080:	2008a856 	.word	0x2008a856
 801d084:	20006ff8 	.word	0x20006ff8
 801d088:	48000800 	.word	0x48000800

0801d08c <SystemClock_Config>:
{
 801d08c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801d08e:	2000      	movs	r0, #0
{
 801d090:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801d092:	f7e6 fa3d 	bl	8003510 <HAL_PWREx_ControlVoltageScaling>
 801d096:	b100      	cbz	r0, 801d09a <SystemClock_Config+0xe>
 801d098:	e7fe      	b.n	801d098 <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801d09a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d09e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801d0a0:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d0a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801d0a4:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801d0a6:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801d0aa:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801d0ac:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801d0ae:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d0b0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801d0b2:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801d0b4:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d0b6:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801d0b8:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801d0ba:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801d0bc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801d0be:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801d0c0:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801d0c2:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d0c4:	f7e6 fb1a 	bl	80036fc <HAL_RCC_OscConfig>
 801d0c8:	b100      	cbz	r0, 801d0cc <SystemClock_Config+0x40>
 801d0ca:	e7fe      	b.n	801d0ca <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d0cc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d0ce:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801d0d0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d0d2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801d0d4:	4639      	mov	r1, r7
 801d0d6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d0d8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d0da:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801d0dc:	f7e6 fd60 	bl	8003ba0 <HAL_RCC_ClockConfig>
 801d0e0:	b100      	cbz	r0, 801d0e4 <SystemClock_Config+0x58>
 801d0e2:	e7fe      	b.n	801d0e2 <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801d0e4:	4b1e      	ldr	r3, [pc, #120]	; (801d160 <SystemClock_Config+0xd4>)
 801d0e6:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801d0e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d0ec:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801d0ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801d0f2:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801d0f4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801d0f8:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801d0fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d0fe:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801d100:	2309      	movs	r3, #9
 801d102:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801d104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801d108:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801d10a:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801d10c:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801d10e:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801d110:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801d112:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801d116:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801d118:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801d11a:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801d11c:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801d11e:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801d120:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801d122:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801d124:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801d126:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801d128:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801d12a:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801d12c:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801d12e:	f7e6 ff6b 	bl	8004008 <HAL_RCCEx_PeriphCLKConfig>
 801d132:	4604      	mov	r4, r0
 801d134:	b100      	cbz	r0, 801d138 <SystemClock_Config+0xac>
 801d136:	e7fe      	b.n	801d136 <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801d138:	f7e6 fe2c 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 801d13c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d140:	fbb0 f0f3 	udiv	r0, r0, r3
 801d144:	f7e4 fc72 	bl	8001a2c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801d148:	2004      	movs	r0, #4
 801d14a:	f7e4 fc93 	bl	8001a74 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801d14e:	4622      	mov	r2, r4
 801d150:	4621      	mov	r1, r4
 801d152:	f04f 30ff 	mov.w	r0, #4294967295
 801d156:	f7e4 fc1b 	bl	8001990 <HAL_NVIC_SetPriority>
}
 801d15a:	b03f      	add	sp, #252	; 0xfc
 801d15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d15e:	bf00      	nop
 801d160:	00486060 	.word	0x00486060
 801d164:	00000000 	.word	0x00000000

0801d168 <main>:
{
 801d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d16c:	ed2d 8b02 	vpush	{d8}
 801d170:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 801d172:	f7e3 ff35 	bl	8000fe0 <HAL_Init>
	HAL_Delay(1);
 801d176:	2001      	movs	r0, #1
 801d178:	f7e3 ff50 	bl	800101c <HAL_Delay>
  SystemClock_Config();
 801d17c:	f7ff ff86 	bl	801d08c <SystemClock_Config>
	HAL_Delay(1);
 801d180:	2001      	movs	r0, #1
 801d182:	f7e3 ff4b 	bl	800101c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801d186:	4bac      	ldr	r3, [pc, #688]	; (801d438 <main+0x2d0>)
 801d188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d18a:	f042 0210 	orr.w	r2, r2, #16
 801d18e:	64da      	str	r2, [r3, #76]	; 0x4c
 801d190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d192:	f002 0210 	and.w	r2, r2, #16
 801d196:	9206      	str	r2, [sp, #24]
 801d198:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801d19a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d19c:	f042 0220 	orr.w	r2, r2, #32
 801d1a0:	64da      	str	r2, [r3, #76]	; 0x4c
 801d1a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1a4:	f002 0220 	and.w	r2, r2, #32
 801d1a8:	9207      	str	r2, [sp, #28]
 801d1aa:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d1ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d1b2:	64da      	str	r2, [r3, #76]	; 0x4c
 801d1b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1b6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801d1ba:	9208      	str	r2, [sp, #32]
 801d1bc:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d1be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1c0:	f042 0201 	orr.w	r2, r2, #1
 801d1c4:	64da      	str	r2, [r3, #76]	; 0x4c
 801d1c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1c8:	f002 0201 	and.w	r2, r2, #1
 801d1cc:	9209      	str	r2, [sp, #36]	; 0x24
 801d1ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d1d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1d2:	f042 0204 	orr.w	r2, r2, #4
 801d1d6:	64da      	str	r2, [r3, #76]	; 0x4c
 801d1d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1da:	f002 0204 	and.w	r2, r2, #4
 801d1de:	920a      	str	r2, [sp, #40]	; 0x28
 801d1e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d1e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1e4:	f042 0202 	orr.w	r2, r2, #2
 801d1e8:	64da      	str	r2, [r3, #76]	; 0x4c
 801d1ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1ec:	f002 0202 	and.w	r2, r2, #2
 801d1f0:	920b      	str	r2, [sp, #44]	; 0x2c
 801d1f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801d1f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1f6:	f042 0208 	orr.w	r2, r2, #8
 801d1fa:	64da      	str	r2, [r3, #76]	; 0x4c
 801d1fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1fe:	f002 0208 	and.w	r2, r2, #8
 801d202:	920c      	str	r2, [sp, #48]	; 0x30
 801d204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801d206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d20c:	64da      	str	r2, [r3, #76]	; 0x4c
 801d20e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d214:	930d      	str	r3, [sp, #52]	; 0x34
 801d216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	  HAL_PWREx_EnableVddIO2();
 801d218:	f7e6 f9dc 	bl	80035d4 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801d21c:	2200      	movs	r2, #0
 801d21e:	f242 0110 	movw	r1, #8208	; 0x2010
 801d222:	4886      	ldr	r0, [pc, #536]	; (801d43c <main+0x2d4>)
 801d224:	f7e5 f8f4 	bl	8002410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d228:	2200      	movs	r2, #0
 801d22a:	2120      	movs	r1, #32
 801d22c:	4884      	ldr	r0, [pc, #528]	; (801d440 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d22e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d230:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d232:	f7e5 f8ed 	bl	8002410 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d236:	f04f 0b20 	mov.w	fp, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d23a:	a915      	add	r1, sp, #84	; 0x54
 801d23c:	4880      	ldr	r0, [pc, #512]	; (801d440 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d23e:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d242:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d244:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d246:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d248:	f7e4 ff6c 	bl	8002124 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET); //VIDEO_GAIN OFF
 801d24c:	462a      	mov	r2, r5
 801d24e:	4659      	mov	r1, fp
 801d250:	487b      	ldr	r0, [pc, #492]	; (801d440 <main+0x2d8>)
 801d252:	f7e5 f8dd 	bl	8002410 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801d256:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d25a:	a915      	add	r1, sp, #84	; 0x54
 801d25c:	4877      	ldr	r0, [pc, #476]	; (801d43c <main+0x2d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801d25e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d260:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d262:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d264:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d266:	f7e4 ff5d 	bl	8002124 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801d26a:	462a      	mov	r2, r5
 801d26c:	2110      	movs	r1, #16
 801d26e:	4873      	ldr	r0, [pc, #460]	; (801d43c <main+0x2d4>)
 801d270:	f7e5 f8ce 	bl	8002410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801d274:	4622      	mov	r2, r4
 801d276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d27a:	4870      	ldr	r0, [pc, #448]	; (801d43c <main+0x2d4>)
 801d27c:	f7e5 f8c8 	bl	8002410 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801d280:	2380      	movs	r3, #128	; 0x80
 801d282:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d284:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d286:	4b6f      	ldr	r3, [pc, #444]	; (801d444 <main+0x2dc>)
 801d288:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d28a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d28e:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d290:	f7e4 ff48 	bl	8002124 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801d294:	4622      	mov	r2, r4
 801d296:	2104      	movs	r1, #4
 801d298:	4869      	ldr	r0, [pc, #420]	; (801d440 <main+0x2d8>)
 801d29a:	f7e5 f8b9 	bl	8002410 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d29e:	f04f 0904 	mov.w	r9, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d2a2:	a915      	add	r1, sp, #84	; 0x54
 801d2a4:	4866      	ldr	r0, [pc, #408]	; (801d440 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d2a6:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d2aa:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2ac:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d2ae:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d2b0:	f7e4 ff38 	bl	8002124 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801d2b4:	462a      	mov	r2, r5
 801d2b6:	4649      	mov	r1, r9
 801d2b8:	4861      	ldr	r0, [pc, #388]	; (801d440 <main+0x2d8>)
 801d2ba:	f7e5 f8a9 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801d2be:	4622      	mov	r2, r4
 801d2c0:	2102      	movs	r1, #2
 801d2c2:	485f      	ldr	r0, [pc, #380]	; (801d440 <main+0x2d8>)
 801d2c4:	f7e5 f8a4 	bl	8002410 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d2c8:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d2ca:	a915      	add	r1, sp, #84	; 0x54
 801d2cc:	485c      	ldr	r0, [pc, #368]	; (801d440 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d2ce:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d2d0:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2d2:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d2d4:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d2d6:	f7e4 ff25 	bl	8002124 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801d2da:	462a      	mov	r2, r5
 801d2dc:	4639      	mov	r1, r7
 801d2de:	4858      	ldr	r0, [pc, #352]	; (801d440 <main+0x2d8>)
 801d2e0:	f7e5 f896 	bl	8002410 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801d2e4:	f44f 6600 	mov.w	r6, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d2e8:	a915      	add	r1, sp, #84	; 0x54
 801d2ea:	4855      	ldr	r0, [pc, #340]	; (801d440 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801d2ec:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d2ee:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2f0:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d2f2:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d2f4:	f7e4 ff16 	bl	8002124 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801d2f8:	462a      	mov	r2, r5
 801d2fa:	4631      	mov	r1, r6
 801d2fc:	4850      	ldr	r0, [pc, #320]	; (801d440 <main+0x2d8>)
 801d2fe:	f7e5 f887 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d302:	a915      	add	r1, sp, #84	; 0x54
 801d304:	4850      	ldr	r0, [pc, #320]	; (801d448 <main+0x2e0>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801d306:	9615      	str	r6, [sp, #84]	; 0x54
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d308:	9516      	str	r5, [sp, #88]	; 0x58
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d30a:	9417      	str	r4, [sp, #92]	; 0x5c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d30c:	9418      	str	r4, [sp, #96]	; 0x60
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d30e:	f7e4 ff09 	bl	8002124 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 801d312:	462a      	mov	r2, r5
 801d314:	4631      	mov	r1, r6
 801d316:	484c      	ldr	r0, [pc, #304]	; (801d448 <main+0x2e0>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d318:	4e4c      	ldr	r6, [pc, #304]	; (801d44c <main+0x2e4>)
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 801d31a:	f7e5 f879 	bl	8002410 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801d31e:	2308      	movs	r3, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d320:	a915      	add	r1, sp, #84	; 0x54
 801d322:	4847      	ldr	r0, [pc, #284]	; (801d440 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801d324:	9315      	str	r3, [sp, #84]	; 0x54
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d326:	9616      	str	r6, [sp, #88]	; 0x58
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d328:	9417      	str	r4, [sp, #92]	; 0x5c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d32a:	f7e4 fefb 	bl	8002124 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801d32e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d332:	a915      	add	r1, sp, #84	; 0x54
 801d334:	4841      	ldr	r0, [pc, #260]	; (801d43c <main+0x2d4>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801d336:	9315      	str	r3, [sp, #84]	; 0x54
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d338:	9616      	str	r6, [sp, #88]	; 0x58
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d33a:	9417      	str	r4, [sp, #92]	; 0x5c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d33c:	f7e4 fef2 	bl	8002124 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 801d340:	463a      	mov	r2, r7
 801d342:	4621      	mov	r1, r4
 801d344:	2017      	movs	r0, #23
 801d346:	f7e4 fb23 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 801d34a:	4639      	mov	r1, r7
 801d34c:	4622      	mov	r2, r4
 801d34e:	2009      	movs	r0, #9
 801d350:	f7e4 fb1e 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801d354:	2017      	movs	r0, #23
 801d356:	f7e4 fb4f 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801d35a:	2009      	movs	r0, #9
 801d35c:	f7e4 fb4c 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801d360:	4628      	mov	r0, r5
 801d362:	f7e3 fe5b 	bl	800101c <HAL_Delay>
	DWT_Init();
 801d366:	f7fe fe61 	bl	801c02c <DWT_Init>
	HAL_Delay(1);
 801d36a:	4628      	mov	r0, r5
  htim4.Instance = TIM4;
 801d36c:	4e38      	ldr	r6, [pc, #224]	; (801d450 <main+0x2e8>)
	HAL_Delay(1);
 801d36e:	f7e3 fe55 	bl	800101c <HAL_Delay>
	MX_TIM2_Init();
 801d372:	f7fe fe27 	bl	801bfc4 <MX_TIM2_Init>
	HAL_Delay(1);
 801d376:	4628      	mov	r0, r5
 801d378:	f7e3 fe50 	bl	800101c <HAL_Delay>
  htim4.Init.Prescaler = 50;
 801d37c:	4935      	ldr	r1, [pc, #212]	; (801d454 <main+0x2ec>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d37e:	60b4      	str	r4, [r6, #8]
  htim4.Init.Prescaler = 50;
 801d380:	2332      	movs	r3, #50	; 0x32
  htim4.Init.Period = 2000;
 801d382:	f44f 6afa 	mov.w	sl, #2000	; 0x7d0
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801d386:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 50;
 801d388:	e886 000a 	stmia.w	r6, {r1, r3}
  htim4.Init.Period = 2000;
 801d38c:	f8c6 a00c 	str.w	sl, [r6, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d390:	6134      	str	r4, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d392:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801d394:	f7e8 f8b4 	bl	8005500 <HAL_TIM_Base_Init>
 801d398:	b100      	cbz	r0, 801d39c <main+0x234>
 801d39a:	e7fe      	b.n	801d39a <main+0x232>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d39c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 801d3a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d3a4:	f848 3d44 	str.w	r3, [r8, #-68]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801d3a8:	482b      	ldr	r0, [pc, #172]	; (801d458 <main+0x2f0>)
 801d3aa:	4641      	mov	r1, r8
 801d3ac:	f7e8 f964 	bl	8005678 <HAL_TIM_ConfigClockSource>
 801d3b0:	b100      	cbz	r0, 801d3b4 <main+0x24c>
 801d3b2:	e7fe      	b.n	801d3b2 <main+0x24a>
	 if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 801d3b4:	4630      	mov	r0, r6
 801d3b6:	f7e8 f8bd 	bl	8005534 <HAL_TIM_OC_Init>
 801d3ba:	b100      	cbz	r0, 801d3be <main+0x256>
 801d3bc:	e7fe      	b.n	801d3bc <main+0x254>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d3be:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801d3c0:	a90e      	add	r1, sp, #56	; 0x38
 801d3c2:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801d3c4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801d3c8:	f7e8 fa90 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 801d3cc:	4602      	mov	r2, r0
 801d3ce:	b100      	cbz	r0, 801d3d2 <main+0x26a>
 801d3d0:	e7fe      	b.n	801d3d0 <main+0x268>
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 801d3d2:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.Pulse = 1000; //more cnt - zero; 1000 - 50%
 801d3d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d3d8:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d3da:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d3dc:	a915      	add	r1, sp, #84	; 0x54
 801d3de:	4630      	mov	r0, r6
  sConfigOC.Pulse = 1000; //more cnt - zero; 1000 - 50%
 801d3e0:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d3e2:	f7e8 f907 	bl	80055f4 <HAL_TIM_OC_ConfigChannel>
 801d3e6:	b100      	cbz	r0, 801d3ea <main+0x282>
 801d3e8:	e7fe      	b.n	801d3e8 <main+0x280>
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 801d3ea:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d3ec:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d3ee:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801d3f0:	464a      	mov	r2, r9
 801d3f2:	4630      	mov	r0, r6
 801d3f4:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.Pulse = 2000;
 801d3f6:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801d3fa:	f7e8 f8fb 	bl	80055f4 <HAL_TIM_OC_ConfigChannel>
 801d3fe:	4606      	mov	r6, r0
 801d400:	b100      	cbz	r0, 801d404 <main+0x29c>
 801d402:	e7fe      	b.n	801d402 <main+0x29a>
	HAL_Delay(1);
 801d404:	4628      	mov	r0, r5
 801d406:	f7e3 fe09 	bl	800101c <HAL_Delay>
  htim5.Instance = TIM5;
 801d40a:	4c14      	ldr	r4, [pc, #80]	; (801d45c <main+0x2f4>)
 801d40c:	4b14      	ldr	r3, [pc, #80]	; (801d460 <main+0x2f8>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d40e:	60a6      	str	r6, [r4, #8]
  htim5.Init.Prescaler = 2;
 801d410:	e884 0088 	stmia.w	r4, {r3, r7}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801d414:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801d416:	231e      	movs	r3, #30
 801d418:	60e3      	str	r3, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d41a:	6126      	str	r6, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d41c:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801d41e:	f7e8 f889 	bl	8005534 <HAL_TIM_OC_Init>
 801d422:	b100      	cbz	r0, 801d426 <main+0x2be>
 801d424:	e7fe      	b.n	801d424 <main+0x2bc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d426:	9011      	str	r0, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d428:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801d42a:	4641      	mov	r1, r8
 801d42c:	4620      	mov	r0, r4
 801d42e:	f7e8 fa5d 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 801d432:	4602      	mov	r2, r0
 801d434:	b1b0      	cbz	r0, 801d464 <main+0x2fc>
 801d436:	e7fe      	b.n	801d436 <main+0x2ce>
 801d438:	40021000 	.word	0x40021000
 801d43c:	48000800 	.word	0x48000800
 801d440:	48001400 	.word	0x48001400
 801d444:	10210000 	.word	0x10210000
 801d448:	48001800 	.word	0x48001800
 801d44c:	10110000 	.word	0x10110000
 801d450:	2008fc10 	.word	0x2008fc10
 801d454:	40000800 	.word	0x40000800
 801d458:	20090114 	.word	0x20090114
 801d45c:	2008fd44 	.word	0x2008fd44
 801d460:	40000c00 	.word	0x40000c00
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801d464:	2330      	movs	r3, #48	; 0x30
 801d466:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d468:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.Pulse = 5;
 801d46a:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d46c:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d46e:	a915      	add	r1, sp, #84	; 0x54
 801d470:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801d472:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d474:	f7e8 f8be 	bl	80055f4 <HAL_TIM_OC_ConfigChannel>
 801d478:	4606      	mov	r6, r0
 801d47a:	b100      	cbz	r0, 801d47e <main+0x316>
 801d47c:	e7fe      	b.n	801d47c <main+0x314>
  HAL_TIM_MspPostInit(&htim5);
 801d47e:	4620      	mov	r0, r4
 801d480:	f001 fa68 	bl	801e954 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801d484:	4628      	mov	r0, r5
 801d486:	f7e3 fdc9 	bl	800101c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801d48a:	f001 fb1f 	bl	801eacc <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801d48e:	4628      	mov	r0, r5
 801d490:	f7e3 fdc4 	bl	800101c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801d494:	4886      	ldr	r0, [pc, #536]	; (801d6b0 <main+0x548>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801d496:	4a87      	ldr	r2, [pc, #540]	; (801d6b4 <main+0x54c>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801d498:	6286      	str	r6, [r0, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801d49a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801d49e:	e880 000c 	stmia.w	r0, {r2, r3}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801d4a2:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801d4a4:	62c7      	str	r7, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801d4a6:	6306      	str	r6, [r0, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801d4a8:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801d4aa:	6406      	str	r6, [r0, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801d4ac:	6447      	str	r7, [r0, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801d4ae:	6486      	str	r6, [r0, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801d4b0:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801d4b2:	6087      	str	r7, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 801d4b4:	60c6      	str	r6, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801d4b6:	f7e4 fb03 	bl	8001ac0 <HAL_DMA2D_Init>
 801d4ba:	b100      	cbz	r0, 801d4be <main+0x356>
 801d4bc:	e7fe      	b.n	801d4bc <main+0x354>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801d4be:	2101      	movs	r1, #1
 801d4c0:	487b      	ldr	r0, [pc, #492]	; (801d6b0 <main+0x548>)
 801d4c2:	f7e4 fbe3 	bl	8001c8c <HAL_DMA2D_ConfigLayer>
 801d4c6:	4605      	mov	r5, r0
 801d4c8:	b100      	cbz	r0, 801d4cc <main+0x364>
 801d4ca:	e7fe      	b.n	801d4ca <main+0x362>
	HAL_Delay(1);
 801d4cc:	2001      	movs	r0, #1
 801d4ce:	f7e3 fda5 	bl	800101c <HAL_Delay>
  hspi1.Instance = SPI1;
 801d4d2:	4c79      	ldr	r4, [pc, #484]	; (801d6b8 <main+0x550>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801d4d4:	4b79      	ldr	r3, [pc, #484]	; (801d6bc <main+0x554>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801d4d6:	60a5      	str	r5, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801d4d8:	f44f 7b82 	mov.w	fp, #260	; 0x104
 801d4dc:	e884 0808 	stmia.w	r4, {r3, fp}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801d4e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801d4e4:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801d4e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d4ea:	61a3      	str	r3, [r4, #24]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801d4ec:	2702      	movs	r7, #2
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801d4ee:	2310      	movs	r3, #16
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801d4f0:	f04f 0901 	mov.w	r9, #1
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801d4f4:	f04f 0808 	mov.w	r8, #8
  hspi1.Init.CRCPolynomial = 7;
 801d4f8:	2607      	movs	r6, #7
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801d4fa:	4620      	mov	r0, r4
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801d4fc:	6225      	str	r5, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d4fe:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801d500:	6325      	str	r5, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801d502:	6365      	str	r5, [r4, #52]	; 0x34
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801d504:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801d506:	f8c4 9014 	str.w	r9, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801d50a:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801d50e:	6263      	str	r3, [r4, #36]	; 0x24
  hspi1.Init.CRCPolynomial = 7;
 801d510:	62e6      	str	r6, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801d512:	f7e7 fc9d 	bl	8004e50 <HAL_SPI_Init>
 801d516:	4605      	mov	r5, r0
 801d518:	b100      	cbz	r0, 801d51c <main+0x3b4>
 801d51a:	e7fe      	b.n	801d51a <main+0x3b2>
	__HAL_SPI_ENABLE(&hspi1);
 801d51c:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 801d51e:	4c68      	ldr	r4, [pc, #416]	; (801d6c0 <main+0x558>)
	__HAL_SPI_ENABLE(&hspi1);
 801d520:	6813      	ldr	r3, [r2, #0]
 801d522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d526:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801d528:	4648      	mov	r0, r9
 801d52a:	f7e3 fd77 	bl	800101c <HAL_Delay>
  hi2c1.Instance = I2C1;
 801d52e:	4b65      	ldr	r3, [pc, #404]	; (801d6c4 <main+0x55c>)
 801d530:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 801d532:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 801d536:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 801d53a:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 801d53e:	6063      	str	r3, [r4, #4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801d540:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 112;
 801d542:	2370      	movs	r3, #112	; 0x70
 801d544:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801d546:	f8c4 900c 	str.w	r9, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801d54a:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801d54c:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801d54e:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801d550:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801d552:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801d554:	f7e5 f881 	bl	800265a <HAL_I2C_Init>
 801d558:	4601      	mov	r1, r0
 801d55a:	b100      	cbz	r0, 801d55e <main+0x3f6>
 801d55c:	e7fe      	b.n	801d55c <main+0x3f4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801d55e:	4620      	mov	r0, r4
 801d560:	f7e5 f98a 	bl	8002878 <HAL_I2CEx_ConfigAnalogFilter>
 801d564:	4601      	mov	r1, r0
 801d566:	b100      	cbz	r0, 801d56a <main+0x402>
 801d568:	e7fe      	b.n	801d568 <main+0x400>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801d56a:	4620      	mov	r0, r4
 801d56c:	f7e5 f9aa 	bl	80028c4 <HAL_I2CEx_ConfigDigitalFilter>
 801d570:	4605      	mov	r5, r0
 801d572:	b100      	cbz	r0, 801d576 <main+0x40e>
 801d574:	e7fe      	b.n	801d574 <main+0x40c>
	HAL_Delay(1);
 801d576:	4648      	mov	r0, r9
 801d578:	f7e3 fd50 	bl	800101c <HAL_Delay>

/* LPUART1 init function */
static void MX_LPUART1_UART_Init(void)
{

	hlpuart1.Instance = LPUART1;
 801d57c:	4c52      	ldr	r4, [pc, #328]	; (801d6c8 <main+0x560>)
  hlpuart1.Init.BaudRate = 9600;
 801d57e:	4b53      	ldr	r3, [pc, #332]	; (801d6cc <main+0x564>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801d580:	60a5      	str	r5, [r4, #8]
  hlpuart1.Init.BaudRate = 9600;
 801d582:	f44f 5a16 	mov.w	sl, #9600	; 0x2580
 801d586:	e884 0408 	stmia.w	r4, {r3, sl}
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801d58a:	4620      	mov	r0, r4
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801d58c:	230c      	movs	r3, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801d58e:	60e5      	str	r5, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801d590:	6125      	str	r5, [r4, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801d592:	6163      	str	r3, [r4, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801d594:	61a5      	str	r5, [r4, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801d596:	6225      	str	r5, [r4, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801d598:	6265      	str	r5, [r4, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801d59a:	62a5      	str	r5, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 801d59c:	66a5      	str	r5, [r4, #104]	; 0x68
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801d59e:	f7e8 fc87 	bl	8005eb0 <HAL_UART_Init>
 801d5a2:	4601      	mov	r1, r0
 801d5a4:	b100      	cbz	r0, 801d5a8 <main+0x440>
 801d5a6:	e7fe      	b.n	801d5a6 <main+0x43e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	f7e8 fcf7 	bl	8005f9c <HAL_UARTEx_SetTxFifoThreshold>
 801d5ae:	4601      	mov	r1, r0
 801d5b0:	b100      	cbz	r0, 801d5b4 <main+0x44c>
 801d5b2:	e7fe      	b.n	801d5b2 <main+0x44a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801d5b4:	4620      	mov	r0, r4
 801d5b6:	f7e8 fd15 	bl	8005fe4 <HAL_UARTEx_SetRxFifoThreshold>
 801d5ba:	4605      	mov	r5, r0
 801d5bc:	b100      	cbz	r0, 801d5c0 <main+0x458>
 801d5be:	e7fe      	b.n	801d5be <main+0x456>
	HAL_Delay(1);
 801d5c0:	4648      	mov	r0, r9
 801d5c2:	f7e3 fd2b 	bl	800101c <HAL_Delay>
  hltdc.Instance = LTDC;
 801d5c6:	4c42      	ldr	r4, [pc, #264]	; (801d6d0 <main+0x568>)
 801d5c8:	4b42      	ldr	r3, [pc, #264]	; (801d6d4 <main+0x56c>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801d5ca:	60a5      	str	r5, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801d5cc:	e884 0028 	stmia.w	r4, {r3, r5}
  hltdc.Init.HorizontalSync = 5;
 801d5d0:	2305      	movs	r3, #5
 801d5d2:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 801d5d4:	231e      	movs	r3, #30
 801d5d6:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 801d5d8:	2328      	movs	r3, #40	; 0x28
 801d5da:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedActiveW = 520;
 801d5dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d5e0:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 801d5e2:	f44f 738c 	mov.w	r3, #280	; 0x118
 801d5e6:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 801d5e8:	f240 230d 	movw	r3, #525	; 0x20d
 801d5ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801d5ee:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 801d5f0:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801d5f4:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801d5f6:	6125      	str	r5, [r4, #16]
  hltdc.Init.AccumulatedVBP = 8;
 801d5f8:	f8c4 8020 	str.w	r8, [r4, #32]
  hltdc.Init.TotalHeigh = 288;
 801d5fc:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801d5fe:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801d602:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801d606:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801d60a:	f7e5 fa07 	bl	8002a1c <HAL_LTDC_Init>
 801d60e:	4602      	mov	r2, r0
 801d610:	b100      	cbz	r0, 801d614 <main+0x4ac>
 801d612:	e7fe      	b.n	801d612 <main+0x4aa>
  pLayerCfg.WindowY1 = 272;
 801d614:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 801d618:	9015      	str	r0, [sp, #84]	; 0x54
  pLayerCfg.WindowX1 = 480;
 801d61a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.Alpha = 255;
 801d61e:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 801d620:	9016      	str	r0, [sp, #88]	; 0x58
  pLayerCfg.WindowY1 = 272;
 801d622:	9118      	str	r1, [sp, #96]	; 0x60
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801d624:	f44f 6580 	mov.w	r5, #1024	; 0x400
  pLayerCfg.ImageWidth = 480;
 801d628:	901f      	str	r0, [sp, #124]	; 0x7c
  pLayerCfg.ImageHeight = 272;
 801d62a:	9120      	str	r1, [sp, #128]	; 0x80
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801d62c:	4620      	mov	r0, r4
 801d62e:	a915      	add	r1, sp, #84	; 0x54
  pLayerCfg.WindowY0 = 0;
 801d630:	9217      	str	r2, [sp, #92]	; 0x5c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801d632:	9719      	str	r7, [sp, #100]	; 0x64
  pLayerCfg.Alpha = 255;
 801d634:	931a      	str	r3, [sp, #104]	; 0x68
  pLayerCfg.Alpha0 = 0;
 801d636:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801d638:	951c      	str	r5, [sp, #112]	; 0x70
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801d63a:	961d      	str	r6, [sp, #116]	; 0x74
  pLayerCfg.FBStartAdress = 0;
 801d63c:	921e      	str	r2, [sp, #120]	; 0x78
  pLayerCfg.Backcolor.Blue = 255;
 801d63e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Green = 255;
 801d642:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
  pLayerCfg.Backcolor.Red = 255;
 801d646:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801d64a:	f7e5 fa53 	bl	8002af4 <HAL_LTDC_ConfigLayer>
 801d64e:	b100      	cbz	r0, 801d652 <main+0x4ea>
 801d650:	e7fe      	b.n	801d650 <main+0x4e8>
  hadc1.Instance = ADC1;
 801d652:	4d21      	ldr	r5, [pc, #132]	; (801d6d8 <main+0x570>)
	HAL_Delay(1);
 801d654:	2001      	movs	r0, #1
 801d656:	f7e3 fce1 	bl	800101c <HAL_Delay>
  hadc1.Instance = ADC1;
 801d65a:	4b20      	ldr	r3, [pc, #128]	; (801d6dc <main+0x574>)
 801d65c:	602b      	str	r3, [r5, #0]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801d65e:	2401      	movs	r4, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801d660:	2300      	movs	r3, #0
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 801d662:	2210      	movs	r2, #16
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801d664:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801d666:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801d668:	606b      	str	r3, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 801d66a:	60aa      	str	r2, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801d66c:	60eb      	str	r3, [r5, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801d66e:	612b      	str	r3, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801d670:	616e      	str	r6, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801d672:	61ab      	str	r3, [r5, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801d674:	61ec      	str	r4, [r5, #28]
  hadc1.Init.NbrOfConversion = 1;
 801d676:	622c      	str	r4, [r5, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801d678:	626b      	str	r3, [r5, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 801d67a:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801d67c:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801d67e:	632b      	str	r3, [r5, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801d680:	636b      	str	r3, [r5, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801d682:	63ab      	str	r3, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 801d684:	63eb      	str	r3, [r5, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801d686:	f7e3 fcff 	bl	8001088 <HAL_ADC_Init>
 801d68a:	b100      	cbz	r0, 801d68e <main+0x526>
 801d68c:	e7fe      	b.n	801d68c <main+0x524>
  sConfig.Channel = ADC_CHANNEL_3;
 801d68e:	4b14      	ldr	r3, [pc, #80]	; (801d6e0 <main+0x578>)
 801d690:	9315      	str	r3, [sp, #84]	; 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801d692:	2306      	movs	r3, #6
 801d694:	9316      	str	r3, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801d696:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801d698:	237f      	movs	r3, #127	; 0x7f
  sConfig.Offset = 0;
 801d69a:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801d69c:	a915      	add	r1, sp, #84	; 0x54
 801d69e:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801d6a0:	9318      	str	r3, [sp, #96]	; 0x60
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801d6a2:	9619      	str	r6, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801d6a4:	f7e3 fe10 	bl	80012c8 <HAL_ADC_ConfigChannel>
 801d6a8:	4605      	mov	r5, r0
 801d6aa:	b1d8      	cbz	r0, 801d6e4 <main+0x57c>
 801d6ac:	e7fe      	b.n	801d6ac <main+0x544>
 801d6ae:	bf00      	nop
 801d6b0:	2009004c 	.word	0x2009004c
 801d6b4:	4002b000 	.word	0x4002b000
 801d6b8:	200900ac 	.word	0x200900ac
 801d6bc:	40013000 	.word	0x40013000
 801d6c0:	2008fc50 	.word	0x2008fc50
 801d6c4:	40005400 	.word	0x40005400
 801d6c8:	2008fda8 	.word	0x2008fda8
 801d6cc:	40008000 	.word	0x40008000
 801d6d0:	2008fe30 	.word	0x2008fe30
 801d6d4:	40016800 	.word	0x40016800
 801d6d8:	2008ff00 	.word	0x2008ff00
 801d6dc:	50040000 	.word	0x50040000
 801d6e0:	0c900008 	.word	0x0c900008
	HAL_Delay(1);
 801d6e4:	4620      	mov	r0, r4
 801d6e6:	f7e3 fc99 	bl	800101c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 801d6ea:	4629      	mov	r1, r5
 801d6ec:	482e      	ldr	r0, [pc, #184]	; (801d7a8 <main+0x640>)
 801d6ee:	f7e8 f8a7 	bl	8005840 <HAL_TIM_OC_Start>
	HAL_Delay(1);
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	f7e3 fc92 	bl	800101c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 801d6f8:	4622      	mov	r2, r4
 801d6fa:	4629      	mov	r1, r5
 801d6fc:	201c      	movs	r0, #28
 801d6fe:	f7e4 f947 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801d702:	2002      	movs	r0, #2
 801d704:	f7e3 fc8a 	bl	800101c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801d708:	201c      	movs	r0, #28
 801d70a:	f7e4 f975 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801d70e:	4620      	mov	r0, r4
 801d710:	f7e3 fc84 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 801d714:	4825      	ldr	r0, [pc, #148]	; (801d7ac <main+0x644>)
 801d716:	f7e7 fdbf 	bl	8005298 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 801d71a:	4620      	mov	r0, r4
 801d71c:	f7e3 fc7e 	bl	800101c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);  //Booster
 801d720:	462a      	mov	r2, r5
 801d722:	4621      	mov	r1, r4
 801d724:	201e      	movs	r0, #30
 801d726:	f7e4 f933 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801d72a:	2002      	movs	r0, #2
 801d72c:	f7e3 fc76 	bl	800101c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801d730:	201e      	movs	r0, #30
 801d732:	f7e4 f961 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801d736:	4620      	mov	r0, r4
 801d738:	f7e3 fc70 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start(&htim4);
 801d73c:	481c      	ldr	r0, [pc, #112]	; (801d7b0 <main+0x648>)
 801d73e:	f7e7 fd91 	bl	8005264 <HAL_TIM_Base_Start>
	HAL_Delay(1);
 801d742:	4620      	mov	r0, r4
 801d744:	f7e3 fc6a 	bl	800101c <HAL_Delay>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 801d748:	4629      	mov	r1, r5
 801d74a:	4819      	ldr	r0, [pc, #100]	; (801d7b0 <main+0x648>)
 801d74c:	f7e8 f8cc 	bl	80058e8 <HAL_TIM_OC_Start_IT>
	HAL_Delay(1);
 801d750:	4620      	mov	r0, r4
 801d752:	f7e3 fc63 	bl	800101c <HAL_Delay>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 801d756:	4631      	mov	r1, r6
 801d758:	4815      	ldr	r0, [pc, #84]	; (801d7b0 <main+0x648>)
 801d75a:	f7e8 f8c5 	bl	80058e8 <HAL_TIM_OC_Start_IT>
	HAL_Delay(1);
 801d75e:	4620      	mov	r0, r4
 801d760:	f7e3 fc5c 	bl	800101c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801d764:	4631      	mov	r1, r6
 801d766:	4813      	ldr	r0, [pc, #76]	; (801d7b4 <main+0x64c>)
  htim6.Instance = TIM6;
 801d768:	4e13      	ldr	r6, [pc, #76]	; (801d7b8 <main+0x650>)
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801d76a:	4622      	mov	r2, r4
 801d76c:	f7e4 fe50 	bl	8002410 <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 801d770:	4b12      	ldr	r3, [pc, #72]	; (801d7bc <main+0x654>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d772:	9515      	str	r5, [sp, #84]	; 0x54
  htim6.Init.Prescaler = 48000;
 801d774:	f64b 3780 	movw	r7, #48000	; 0xbb80
 801d778:	e886 0088 	stmia.w	r6, {r3, r7}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801d77c:	4630      	mov	r0, r6
  htim6.Init.Period = 3800;
 801d77e:	f640 63d8 	movw	r3, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d782:	9516      	str	r5, [sp, #88]	; 0x58
 801d784:	9517      	str	r5, [sp, #92]	; 0x5c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d786:	60b5      	str	r5, [r6, #8]
  htim6.Init.Period = 3800;
 801d788:	60f3      	str	r3, [r6, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d78a:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801d78c:	f7e7 feb8 	bl	8005500 <HAL_TIM_Base_Init>
 801d790:	b100      	cbz	r0, 801d794 <main+0x62c>
 801d792:	e7fe      	b.n	801d792 <main+0x62a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d794:	9015      	str	r0, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d796:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801d798:	a915      	add	r1, sp, #84	; 0x54
 801d79a:	4630      	mov	r0, r6
 801d79c:	f7e8 f8a6 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 801d7a0:	4605      	mov	r5, r0
 801d7a2:	b168      	cbz	r0, 801d7c0 <main+0x658>
 801d7a4:	e7fe      	b.n	801d7a4 <main+0x63c>
 801d7a6:	bf00      	nop
 801d7a8:	2008fd44 	.word	0x2008fd44
 801d7ac:	20090114 	.word	0x20090114
 801d7b0:	2008fc10 	.word	0x2008fc10
 801d7b4:	48001400 	.word	0x48001400
 801d7b8:	2008ff90 	.word	0x2008ff90
 801d7bc:	40001000 	.word	0x40001000
	HAL_Delay(1);
 801d7c0:	4620      	mov	r0, r4
 801d7c2:	f7e3 fc2b 	bl	800101c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801d7c6:	2036      	movs	r0, #54	; 0x36
 801d7c8:	f7e4 f916 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f7e3 fc25 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 801d7d2:	4630      	mov	r0, r6
 801d7d4:	f7e7 fd60 	bl	8005298 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 801d7d8:	4620      	mov	r0, r4
 801d7da:	f7e3 fc1f 	bl	800101c <HAL_Delay>
	HAL_Delay(1);
 801d7de:	4620      	mov	r0, r4
 801d7e0:	f7e3 fc1c 	bl	800101c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801d7e4:	462a      	mov	r2, r5
 801d7e6:	49d0      	ldr	r1, [pc, #832]	; (801db28 <main+0x9c0>)
 801d7e8:	48d0      	ldr	r0, [pc, #832]	; (801db2c <main+0x9c4>)
 801d7ea:	4fd1      	ldr	r7, [pc, #836]	; (801db30 <main+0x9c8>)
 801d7ec:	4ed1      	ldr	r6, [pc, #836]	; (801db34 <main+0x9cc>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801d7ee:	f8df 9404 	ldr.w	r9, [pc, #1028]	; 801dbf4 <main+0xa8c>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801d7f2:	f7e5 f9a8 	bl	8002b46 <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 801d7f6:	4620      	mov	r0, r4
 801d7f8:	f7e3 fc10 	bl	800101c <HAL_Delay>
	MX_SDMMC1_SD_Init();
 801d7fc:	f7fe fbd0 	bl	801bfa0 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 801d800:	f7fd fd9c 	bl	801b33c <MX_FATFS_Init>
	GPIO_QSPI_Init();
 801d804:	f7fb fa90 	bl	8018d28 <GPIO_QSPI_Init>
		Single_Mode();	
 801d808:	f7fb fb88 	bl	8018f1c <Single_Mode>
		HAL_Delay(20);
 801d80c:	2014      	movs	r0, #20
 801d80e:	f7e3 fc05 	bl	800101c <HAL_Delay>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801d812:	2103      	movs	r1, #3
 801d814:	48c8      	ldr	r0, [pc, #800]	; (801db38 <main+0x9d0>)
 801d816:	4cc9      	ldr	r4, [pc, #804]	; (801db3c <main+0x9d4>)
 801d818:	f7f0 f99e 	bl	800db58 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801d81c:	4bc8      	ldr	r3, [pc, #800]	; (801db40 <main+0x9d8>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801d81e:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801d820:	28ff      	cmp	r0, #255	; 0xff
 801d822:	bf18      	it	ne
 801d824:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801d826:	f04f 0103 	mov.w	r1, #3
 801d82a:	48c6      	ldr	r0, [pc, #792]	; (801db44 <main+0x9dc>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801d82c:	bf08      	it	eq
 801d82e:	701d      	strbeq	r5, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801d830:	f7f0 f992 	bl	800db58 <Calibration_Load_1byte>
 801d834:	4bc4      	ldr	r3, [pc, #784]	; (801db48 <main+0x9e0>)
 801d836:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801d838:	28ff      	cmp	r0, #255	; 0xff
 801d83a:	bf0c      	ite	eq
 801d83c:	2200      	moveq	r2, #0
 801d83e:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801d840:	f04f 0103 	mov.w	r1, #3
 801d844:	48c1      	ldr	r0, [pc, #772]	; (801db4c <main+0x9e4>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801d846:	bf08      	it	eq
 801d848:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801d84a:	f7f0 f985 	bl	800db58 <Calibration_Load_1byte>
 801d84e:	4bc0      	ldr	r3, [pc, #768]	; (801db50 <main+0x9e8>)
 801d850:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801d852:	28ff      	cmp	r0, #255	; 0xff
 801d854:	bf0a      	itet	eq
 801d856:	781a      	ldrbeq	r2, [r3, #0]
 801d858:	7018      	strbne	r0, [r3, #0]
 801d85a:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801d85e:	f04f 0103 	mov.w	r1, #3
 801d862:	48bc      	ldr	r0, [pc, #752]	; (801db54 <main+0x9ec>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801d864:	bf08      	it	eq
 801d866:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801d868:	f7f0 f976 	bl	800db58 <Calibration_Load_1byte>
 801d86c:	4bba      	ldr	r3, [pc, #744]	; (801db58 <main+0x9f0>)
 801d86e:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801d870:	28ff      	cmp	r0, #255	; 0xff
 801d872:	bf0c      	ite	eq
 801d874:	2200      	moveq	r2, #0
 801d876:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801d878:	f04f 0103 	mov.w	r1, #3
 801d87c:	48b7      	ldr	r0, [pc, #732]	; (801db5c <main+0x9f4>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801d87e:	bf08      	it	eq
 801d880:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801d882:	f7f0 f969 	bl	800db58 <Calibration_Load_1byte>
 801d886:	4bb6      	ldr	r3, [pc, #728]	; (801db60 <main+0x9f8>)
 801d888:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801d88a:	28ff      	cmp	r0, #255	; 0xff
 801d88c:	bf0c      	ite	eq
 801d88e:	2200      	moveq	r2, #0
 801d890:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801d892:	f04f 0103 	mov.w	r1, #3
 801d896:	48b3      	ldr	r0, [pc, #716]	; (801db64 <main+0x9fc>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801d898:	bf08      	it	eq
 801d89a:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801d89c:	f7f0 f95c 	bl	800db58 <Calibration_Load_1byte>
 801d8a0:	4bb1      	ldr	r3, [pc, #708]	; (801db68 <main+0xa00>)
 801d8a2:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801d8a4:	28ff      	cmp	r0, #255	; 0xff
 801d8a6:	bf0a      	itet	eq
 801d8a8:	781a      	ldrbeq	r2, [r3, #0]
 801d8aa:	7018      	strbne	r0, [r3, #0]
 801d8ac:	f042 0210 	orreq.w	r2, r2, #16
		buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801d8b0:	f04f 0103 	mov.w	r1, #3
 801d8b4:	48ad      	ldr	r0, [pc, #692]	; (801db6c <main+0xa04>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801d8b6:	bf08      	it	eq
 801d8b8:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801d8ba:	f7f0 f94d 	bl	800db58 <Calibration_Load_1byte>
 801d8be:	4bac      	ldr	r3, [pc, #688]	; (801db70 <main+0xa08>)
 801d8c0:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801d8c2:	28ff      	cmp	r0, #255	; 0xff
 801d8c4:	bf0c      	ite	eq
 801d8c6:	2200      	moveq	r2, #0
 801d8c8:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801d8ca:	f04f 0101 	mov.w	r1, #1
 801d8ce:	48a9      	ldr	r0, [pc, #676]	; (801db74 <main+0xa0c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801d8d0:	bf08      	it	eq
 801d8d2:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801d8d4:	f7f0 f91c 	bl	800db10 <Calibration_Load_2byte>
 801d8d8:	4ca7      	ldr	r4, [pc, #668]	; (801db78 <main+0xa10>)
 801d8da:	4ba8      	ldr	r3, [pc, #672]	; (801db7c <main+0xa14>)
 801d8dc:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801d8de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d8e2:	4290      	cmp	r0, r2
 801d8e4:	bf0c      	ite	eq
 801d8e6:	2200      	moveq	r2, #0
 801d8e8:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801d8ea:	f04f 0101 	mov.w	r1, #1
 801d8ee:	48a4      	ldr	r0, [pc, #656]	; (801db80 <main+0xa18>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801d8f0:	bf08      	it	eq
 801d8f2:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801d8f4:	f7f0 f90c 	bl	800db10 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801d8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d8fc:	4298      	cmp	r0, r3
 801d8fe:	4ba1      	ldr	r3, [pc, #644]	; (801db84 <main+0xa1c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801d900:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801d902:	bf06      	itte	eq
 801d904:	2200      	moveq	r2, #0
 801d906:	801a      	strheq	r2, [r3, #0]
 801d908:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 801d90a:	f7f0 f9e9 	bl	800dce0 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 801d90e:	4b9e      	ldr	r3, [pc, #632]	; (801db88 <main+0xa20>)
 801d910:	4d9e      	ldr	r5, [pc, #632]	; (801db8c <main+0xa24>)
 801d912:	7818      	ldrb	r0, [r3, #0]
 801d914:	f7f0 f9a6 	bl	800dc64 <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801d918:	4b89      	ldr	r3, [pc, #548]	; (801db40 <main+0x9d8>)
 801d91a:	489d      	ldr	r0, [pc, #628]	; (801db90 <main+0xa28>)
 801d91c:	781c      	ldrb	r4, [r3, #0]
 801d91e:	4b9d      	ldr	r3, [pc, #628]	; (801db94 <main+0xa2c>)
 801d920:	4a9d      	ldr	r2, [pc, #628]	; (801db98 <main+0xa30>)
 801d922:	2c00      	cmp	r4, #0
 801d924:	bf18      	it	ne
 801d926:	4618      	movne	r0, r3
 801d928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d92c:	f7f0 f958 	bl	800dbe0 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801d930:	489a      	ldr	r0, [pc, #616]	; (801db9c <main+0xa34>)
 801d932:	f7f0 f943 	bl	800dbbc <Calibration_Load_float>
 801d936:	4b9a      	ldr	r3, [pc, #616]	; (801dba0 <main+0xa38>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801d938:	489a      	ldr	r0, [pc, #616]	; (801dba4 <main+0xa3c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801d93a:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801d93e:	f7f0 f93d 	bl	800dbbc <Calibration_Load_float>
 801d942:	4b99      	ldr	r3, [pc, #612]	; (801dba8 <main+0xa40>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801d944:	4a99      	ldr	r2, [pc, #612]	; (801dbac <main+0xa44>)
 801d946:	489a      	ldr	r0, [pc, #616]	; (801dbb0 <main+0xa48>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801d948:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801d94c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d950:	f7f0 f946 	bl	800dbe0 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 801d954:	4a97      	ldr	r2, [pc, #604]	; (801dbb4 <main+0xa4c>)
 801d956:	4898      	ldr	r0, [pc, #608]	; (801dbb8 <main+0xa50>)
 801d958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d95c:	f7f0 f940 	bl	800dbe0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 801d960:	4a96      	ldr	r2, [pc, #600]	; (801dbbc <main+0xa54>)
 801d962:	4897      	ldr	r0, [pc, #604]	; (801dbc0 <main+0xa58>)
 801d964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d968:	f7f0 f93a 	bl	800dbe0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y2_CIE1931, 0x400, calibratre_y_1931);
 801d96c:	4a95      	ldr	r2, [pc, #596]	; (801dbc4 <main+0xa5c>)
 801d96e:	4896      	ldr	r0, [pc, #600]	; (801dbc8 <main+0xa60>)
 801d970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d974:	f7f0 f934 	bl	800dbe0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 801d978:	4a94      	ldr	r2, [pc, #592]	; (801dbcc <main+0xa64>)
 801d97a:	4895      	ldr	r0, [pc, #596]	; (801dbd0 <main+0xa68>)
 801d97c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d980:	f7f0 f92e 	bl	800dbe0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 801d984:	4a93      	ldr	r2, [pc, #588]	; (801dbd4 <main+0xa6c>)
 801d986:	4894      	ldr	r0, [pc, #592]	; (801dbd8 <main+0xa70>)
 801d988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d98c:	f7f0 f928 	bl	800dbe0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 801d990:	4a92      	ldr	r2, [pc, #584]	; (801dbdc <main+0xa74>)
 801d992:	4893      	ldr	r0, [pc, #588]	; (801dbe0 <main+0xa78>)
 801d994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d998:	f7f0 f922 	bl	800dbe0 <Calibration_Load_Pack>
 801d99c:	4b91      	ldr	r3, [pc, #580]	; (801dbe4 <main+0xa7c>)
 801d99e:	9303      	str	r3, [sp, #12]
 801d9a0:	4b91      	ldr	r3, [pc, #580]	; (801dbe8 <main+0xa80>)
 801d9a2:	9305      	str	r3, [sp, #20]
 801d9a4:	4b91      	ldr	r3, [pc, #580]	; (801dbec <main+0xa84>)
 801d9a6:	9304      	str	r3, [sp, #16]
 801d9a8:	46aa      	mov	sl, r5
 801d9aa:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801d9ae:	f04f 0800 	mov.w	r8, #0
 801d9b2:	2100      	movs	r1, #0
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	f7f0 f8ab 	bl	800db10 <Calibration_Load_2byte>
 801d9ba:	ee07 0a90 	vmov	s15, r0
 801d9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9c2:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 801d9c6:	ee17 0a90 	vmov	r0, s15
 801d9ca:	f7e2 fdcd 	bl	8000568 <__aeabi_f2d>
 801d9ce:	4642      	mov	r2, r8
 801d9d0:	464b      	mov	r3, r9
 801d9d2:	f7e2 ff47 	bl	8000864 <__aeabi_ddiv>
 801d9d6:	a352      	add	r3, pc, #328	; (adr r3, 801db20 <main+0x9b8>)
 801d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9dc:	f7e2 fc66 	bl	80002ac <__adddf3>
 801d9e0:	f7e3 f90e 	bl	8000c00 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801d9e4:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801d9e6:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801d9ea:	4620      	mov	r0, r4
 801d9ec:	f7f0 f890 	bl	800db10 <Calibration_Load_2byte>
 801d9f0:	ee07 0a90 	vmov	s15, r0
 801d9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9f8:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801d9fc:	ee17 0a90 	vmov	r0, s15
 801da00:	f7e2 fdb2 	bl	8000568 <__aeabi_f2d>
 801da04:	4642      	mov	r2, r8
 801da06:	464b      	mov	r3, r9
 801da08:	f7e2 ff2c 	bl	8000864 <__aeabi_ddiv>
 801da0c:	a344      	add	r3, pc, #272	; (adr r3, 801db20 <main+0x9b8>)
 801da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da12:	f7e2 fc4b 	bl	80002ac <__adddf3>
 801da16:	f7e3 f8f3 	bl	8000c00 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801da1a:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801da1c:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801da20:	4620      	mov	r0, r4
 801da22:	f7f0 f875 	bl	800db10 <Calibration_Load_2byte>
 801da26:	ee07 0a90 	vmov	s15, r0
 801da2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801da2e:	ed9f 8a70 	vldr	s16, [pc, #448]	; 801dbf0 <main+0xa88>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801da32:	ee17 0a90 	vmov	r0, s15
 801da36:	f7e2 fd97 	bl	8000568 <__aeabi_f2d>
 801da3a:	4642      	mov	r2, r8
 801da3c:	464b      	mov	r3, r9
 801da3e:	f7e2 ff11 	bl	8000864 <__aeabi_ddiv>
 801da42:	a337      	add	r3, pc, #220	; (adr r3, 801db20 <main+0x9b8>)
 801da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da48:	f7e2 fc30 	bl	80002ac <__adddf3>
 801da4c:	f7e3 f8d8 	bl	8000c00 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801da50:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801da52:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801da56:	4620      	mov	r0, r4
 801da58:	f7f0 f85a 	bl	800db10 <Calibration_Load_2byte>
 801da5c:	ee07 0a90 	vmov	s15, r0
 801da60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da64:	f10a 0a10 	add.w	sl, sl, #16
 801da68:	ee17 0a90 	vmov	r0, s15
 801da6c:	f7e2 fd7c 	bl	8000568 <__aeabi_f2d>
 801da70:	4642      	mov	r2, r8
 801da72:	464b      	mov	r3, r9
 801da74:	f7e2 fef6 	bl	8000864 <__aeabi_ddiv>
 801da78:	a329      	add	r3, pc, #164	; (adr r3, 801db20 <main+0x9b8>)
 801da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da7e:	f7e2 fc15 	bl	80002ac <__adddf3>
 801da82:	f7e3 f8bd 	bl	8000c00 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801da86:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801da88:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801da8c:	4658      	mov	r0, fp
 801da8e:	f7f0 f83f 	bl	800db10 <Calibration_Load_2byte>
 801da92:	ee07 0a90 	vmov	s15, r0
 801da96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801da9a:	9b03      	ldr	r3, [sp, #12]
 801da9c:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801daa0:	2101      	movs	r1, #1
 801daa2:	4658      	mov	r0, fp
 801daa4:	3710      	adds	r7, #16
 801daa6:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801daa8:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801daac:	f7f0 f830 	bl	800db10 <Calibration_Load_2byte>
 801dab0:	ee07 0a90 	vmov	s15, r0
 801dab4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dab8:	9b03      	ldr	r3, [sp, #12]
 801daba:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801dabe:	2102      	movs	r1, #2
 801dac0:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801dac2:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801dac6:	f7f0 f823 	bl	800db10 <Calibration_Load_2byte>
 801daca:	ee07 0a90 	vmov	s15, r0
 801dace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dad2:	9b03      	ldr	r3, [sp, #12]
 801dad4:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801dad8:	2103      	movs	r1, #3
 801dada:	4658      	mov	r0, fp
 801dadc:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 801dae0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801dae4:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801dae8:	f7f0 f812 	bl	800db10 <Calibration_Load_2byte>
 801daec:	ee07 0a90 	vmov	s15, r0
 801daf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801daf4:	9b03      	ldr	r3, [sp, #12]
 801daf6:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801dafa:	2100      	movs	r1, #0
 801dafc:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801dafe:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801db02:	f7f0 f805 	bl	800db10 <Calibration_Load_2byte>
 801db06:	ee07 0a90 	vmov	s15, r0
 801db0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801db0e:	9b05      	ldr	r3, [sp, #20]
 801db10:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801db14:	2101      	movs	r1, #1
 801db16:	4658      	mov	r0, fp
 801db18:	e06e      	b.n	801dbf8 <main+0xa90>
 801db1a:	bf00      	nop
 801db1c:	f3af 8000 	nop.w
 801db20:	00000000 	.word	0x00000000
 801db24:	4072c000 	.word	0x4072c000
 801db28:	20009ffc 	.word	0x20009ffc
 801db2c:	2008fe30 	.word	0x2008fe30
 801db30:	20049bfc 	.word	0x20049bfc
 801db34:	2004abfc 	.word	0x2004abfc
 801db38:	0812b030 	.word	0x0812b030
 801db3c:	2008fc9c 	.word	0x2008fc9c
 801db40:	20000a50 	.word	0x20000a50
 801db44:	0812b040 	.word	0x0812b040
 801db48:	20004ca2 	.word	0x20004ca2
 801db4c:	0812b048 	.word	0x0812b048
 801db50:	20004c9f 	.word	0x20004c9f
 801db54:	0812b050 	.word	0x0812b050
 801db58:	20004ca0 	.word	0x20004ca0
 801db5c:	0812b058 	.word	0x0812b058
 801db60:	20004ca3 	.word	0x20004ca3
 801db64:	0812b060 	.word	0x0812b060
 801db68:	2008acd9 	.word	0x2008acd9
 801db6c:	0812b068 	.word	0x0812b068
 801db70:	2008acda 	.word	0x2008acda
 801db74:	0812b038 	.word	0x0812b038
 801db78:	2008fd30 	.word	0x2008fd30
 801db7c:	20004ca6 	.word	0x20004ca6
 801db80:	0812b020 	.word	0x0812b020
 801db84:	20004ccc 	.word	0x20004ccc
 801db88:	2008a848 	.word	0x2008a848
 801db8c:	2004fc04 	.word	0x2004fc04
 801db90:	08101838 	.word	0x08101838
 801db94:	08100838 	.word	0x08100838
 801db98:	2004cc00 	.word	0x2004cc00
 801db9c:	08102838 	.word	0x08102838
 801dba0:	20004fe4 	.word	0x20004fe4
 801dba4:	0810283c 	.word	0x0810283c
 801dba8:	20004fe8 	.word	0x20004fe8
 801dbac:	2004dc00 	.word	0x2004dc00
 801dbb0:	08102840 	.word	0x08102840
 801dbb4:	2004ec00 	.word	0x2004ec00
 801dbb8:	08103844 	.word	0x08103844
 801dbbc:	200857d0 	.word	0x200857d0
 801dbc0:	08107840 	.word	0x08107840
 801dbc4:	200877d0 	.word	0x200877d0
 801dbc8:	08108840 	.word	0x08108840
 801dbcc:	200887d0 	.word	0x200887d0
 801dbd0:	08109840 	.word	0x08109840
 801dbd4:	200867d0 	.word	0x200867d0
 801dbd8:	08105840 	.word	0x08105840
 801dbdc:	200897d0 	.word	0x200897d0
 801dbe0:	08106840 	.word	0x08106840
 801dbe4:	20004ff8 	.word	0x20004ff8
 801dbe8:	20005ff8 	.word	0x20005ff8
 801dbec:	2004bbfc 	.word	0x2004bbfc
 801dbf0:	447a0000 	.word	0x447a0000
 801dbf4:	40590000 	.word	0x40590000
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801dbf8:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801dbfc:	f7ef ff88 	bl	800db10 <Calibration_Load_2byte>
 801dc00:	ee07 0a90 	vmov	s15, r0
 801dc04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dc08:	9b05      	ldr	r3, [sp, #20]
 801dc0a:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801dc0e:	2102      	movs	r1, #2
 801dc10:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801dc12:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801dc16:	f7ef ff7b 	bl	800db10 <Calibration_Load_2byte>
 801dc1a:	ee07 0a90 	vmov	s15, r0
 801dc1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dc22:	9b05      	ldr	r3, [sp, #20]
 801dc24:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801dc28:	2103      	movs	r1, #3
 801dc2a:	4658      	mov	r0, fp
 801dc2c:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 801dc30:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801dc34:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801dc38:	f7ef ff6a 	bl	800db10 <Calibration_Load_2byte>
 801dc3c:	ee07 0a90 	vmov	s15, r0
 801dc40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dc44:	9b05      	ldr	r3, [sp, #20]
 801dc46:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801dc4a:	2100      	movs	r1, #0
 801dc4c:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801dc4e:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801dc52:	f7ef ff5d 	bl	800db10 <Calibration_Load_2byte>
 801dc56:	ee07 0a90 	vmov	s15, r0
 801dc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc5e:	ee17 0a90 	vmov	r0, s15
 801dc62:	f7e2 fc81 	bl	8000568 <__aeabi_f2d>
 801dc66:	4642      	mov	r2, r8
 801dc68:	464b      	mov	r3, r9
 801dc6a:	f7e2 fdfb 	bl	8000864 <__aeabi_ddiv>
 801dc6e:	2200      	movs	r2, #0
 801dc70:	4bda      	ldr	r3, [pc, #872]	; (801dfdc <main+0xe74>)
 801dc72:	f7e2 fb19 	bl	80002a8 <__aeabi_dsub>
 801dc76:	f7e2 ffc3 	bl	8000c00 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801dc7a:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801dc7c:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801dc80:	4658      	mov	r0, fp
 801dc82:	f7ef ff45 	bl	800db10 <Calibration_Load_2byte>
 801dc86:	ee07 0a90 	vmov	s15, r0
 801dc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc8e:	ee17 0a90 	vmov	r0, s15
 801dc92:	f7e2 fc69 	bl	8000568 <__aeabi_f2d>
 801dc96:	4642      	mov	r2, r8
 801dc98:	464b      	mov	r3, r9
 801dc9a:	f7e2 fde3 	bl	8000864 <__aeabi_ddiv>
 801dc9e:	2200      	movs	r2, #0
 801dca0:	4bce      	ldr	r3, [pc, #824]	; (801dfdc <main+0xe74>)
 801dca2:	f7e2 fb01 	bl	80002a8 <__aeabi_dsub>
 801dca6:	f7e2 ffab 	bl	8000c00 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801dcaa:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801dcac:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801dcb0:	4658      	mov	r0, fp
 801dcb2:	f7ef ff2d 	bl	800db10 <Calibration_Load_2byte>
 801dcb6:	ee07 0a90 	vmov	s15, r0
 801dcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcbe:	ee17 0a90 	vmov	r0, s15
 801dcc2:	f7e2 fc51 	bl	8000568 <__aeabi_f2d>
 801dcc6:	4642      	mov	r2, r8
 801dcc8:	464b      	mov	r3, r9
 801dcca:	f7e2 fdcb 	bl	8000864 <__aeabi_ddiv>
 801dcce:	2200      	movs	r2, #0
 801dcd0:	4bc2      	ldr	r3, [pc, #776]	; (801dfdc <main+0xe74>)
 801dcd2:	f7e2 fae9 	bl	80002a8 <__aeabi_dsub>
 801dcd6:	f7e2 ff93 	bl	8000c00 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801dcda:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801dcdc:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801dce0:	4658      	mov	r0, fp
 801dce2:	f7ef ff15 	bl	800db10 <Calibration_Load_2byte>
 801dce6:	ee07 0a90 	vmov	s15, r0
 801dcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcee:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 801dcf2:	ee17 0a90 	vmov	r0, s15
 801dcf6:	f7e2 fc37 	bl	8000568 <__aeabi_f2d>
 801dcfa:	4642      	mov	r2, r8
 801dcfc:	464b      	mov	r3, r9
 801dcfe:	f7e2 fdb1 	bl	8000864 <__aeabi_ddiv>
 801dd02:	2200      	movs	r2, #0
 801dd04:	4bb5      	ldr	r3, [pc, #724]	; (801dfdc <main+0xe74>)
 801dd06:	f7e2 facf 	bl	80002a8 <__aeabi_dsub>
 801dd0a:	f7e2 ff79 	bl	8000c00 <__aeabi_d2f>
 801dd0e:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801dd12:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801dd16:	2100      	movs	r1, #0
 801dd18:	4658      	mov	r0, fp
 801dd1a:	f7ef fef9 	bl	800db10 <Calibration_Load_2byte>
 801dd1e:	ee07 0a90 	vmov	s15, r0
 801dd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd26:	ee17 0a90 	vmov	r0, s15
 801dd2a:	f7e2 fc1d 	bl	8000568 <__aeabi_f2d>
 801dd2e:	4642      	mov	r2, r8
 801dd30:	464b      	mov	r3, r9
 801dd32:	f7e2 fd97 	bl	8000864 <__aeabi_ddiv>
 801dd36:	2200      	movs	r2, #0
 801dd38:	4ba8      	ldr	r3, [pc, #672]	; (801dfdc <main+0xe74>)
 801dd3a:	f7e2 fab5 	bl	80002a8 <__aeabi_dsub>
 801dd3e:	f7e2 ff5f 	bl	8000c00 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801dd42:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801dd44:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801dd48:	4658      	mov	r0, fp
 801dd4a:	f7ef fee1 	bl	800db10 <Calibration_Load_2byte>
 801dd4e:	ee07 0a90 	vmov	s15, r0
 801dd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd56:	ee17 0a90 	vmov	r0, s15
 801dd5a:	f7e2 fc05 	bl	8000568 <__aeabi_f2d>
 801dd5e:	4642      	mov	r2, r8
 801dd60:	464b      	mov	r3, r9
 801dd62:	f7e2 fd7f 	bl	8000864 <__aeabi_ddiv>
 801dd66:	2200      	movs	r2, #0
 801dd68:	4b9c      	ldr	r3, [pc, #624]	; (801dfdc <main+0xe74>)
 801dd6a:	f7e2 fa9d 	bl	80002a8 <__aeabi_dsub>
 801dd6e:	f7e2 ff47 	bl	8000c00 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801dd72:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801dd74:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801dd78:	4658      	mov	r0, fp
 801dd7a:	f7ef fec9 	bl	800db10 <Calibration_Load_2byte>
 801dd7e:	ee07 0a90 	vmov	s15, r0
 801dd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd86:	ee17 0a90 	vmov	r0, s15
 801dd8a:	f7e2 fbed 	bl	8000568 <__aeabi_f2d>
 801dd8e:	4642      	mov	r2, r8
 801dd90:	464b      	mov	r3, r9
 801dd92:	f7e2 fd67 	bl	8000864 <__aeabi_ddiv>
 801dd96:	2200      	movs	r2, #0
 801dd98:	4b90      	ldr	r3, [pc, #576]	; (801dfdc <main+0xe74>)
 801dd9a:	f7e2 fa85 	bl	80002a8 <__aeabi_dsub>
 801dd9e:	f7e2 ff2f 	bl	8000c00 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801dda2:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801dda4:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801dda8:	4658      	mov	r0, fp
 801ddaa:	f7ef feb1 	bl	800db10 <Calibration_Load_2byte>
 801ddae:	ee07 0a90 	vmov	s15, r0
 801ddb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddb6:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 801ddba:	ee17 0a90 	vmov	r0, s15
 801ddbe:	f7e2 fbd3 	bl	8000568 <__aeabi_f2d>
 801ddc2:	4642      	mov	r2, r8
 801ddc4:	464b      	mov	r3, r9
 801ddc6:	f7e2 fd4d 	bl	8000864 <__aeabi_ddiv>
 801ddca:	2200      	movs	r2, #0
 801ddcc:	4b83      	ldr	r3, [pc, #524]	; (801dfdc <main+0xe74>)
 801ddce:	f7e2 fa6b 	bl	80002a8 <__aeabi_dsub>
 801ddd2:	f7e2 ff15 	bl	8000c00 <__aeabi_d2f>
 801ddd6:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801ddda:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801ddde:	2100      	movs	r1, #0
 801dde0:	4658      	mov	r0, fp
 801dde2:	f7ef fe95 	bl	800db10 <Calibration_Load_2byte>
 801dde6:	ee07 0a90 	vmov	s15, r0
 801ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddee:	3408      	adds	r4, #8
 801ddf0:	ee17 0a90 	vmov	r0, s15
 801ddf4:	f7e2 fbb8 	bl	8000568 <__aeabi_f2d>
 801ddf8:	4642      	mov	r2, r8
 801ddfa:	464b      	mov	r3, r9
 801ddfc:	f7e2 fd32 	bl	8000864 <__aeabi_ddiv>
 801de00:	2200      	movs	r2, #0
 801de02:	4b76      	ldr	r3, [pc, #472]	; (801dfdc <main+0xe74>)
 801de04:	f7e2 fa50 	bl	80002a8 <__aeabi_dsub>
 801de08:	f7e2 fefa 	bl	8000c00 <__aeabi_d2f>
 801de0c:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801de0e:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801de10:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801de12:	4658      	mov	r0, fp
 801de14:	f7ef fe7c 	bl	800db10 <Calibration_Load_2byte>
 801de18:	ee07 0a90 	vmov	s15, r0
 801de1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de20:	ee17 0a90 	vmov	r0, s15
 801de24:	f7e2 fba0 	bl	8000568 <__aeabi_f2d>
 801de28:	4642      	mov	r2, r8
 801de2a:	464b      	mov	r3, r9
 801de2c:	f7e2 fd1a 	bl	8000864 <__aeabi_ddiv>
 801de30:	2200      	movs	r2, #0
 801de32:	4b6a      	ldr	r3, [pc, #424]	; (801dfdc <main+0xe74>)
 801de34:	f7e2 fa38 	bl	80002a8 <__aeabi_dsub>
 801de38:	f7e2 fee2 	bl	8000c00 <__aeabi_d2f>
 801de3c:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801de3e:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801de40:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801de42:	4658      	mov	r0, fp
 801de44:	f7ef fe64 	bl	800db10 <Calibration_Load_2byte>
 801de48:	ee07 0a90 	vmov	s15, r0
 801de4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de50:	ee17 0a90 	vmov	r0, s15
 801de54:	f7e2 fb88 	bl	8000568 <__aeabi_f2d>
 801de58:	4642      	mov	r2, r8
 801de5a:	464b      	mov	r3, r9
 801de5c:	f7e2 fd02 	bl	8000864 <__aeabi_ddiv>
 801de60:	2200      	movs	r2, #0
 801de62:	4b5e      	ldr	r3, [pc, #376]	; (801dfdc <main+0xe74>)
 801de64:	f7e2 fa20 	bl	80002a8 <__aeabi_dsub>
 801de68:	f7e2 feca 	bl	8000c00 <__aeabi_d2f>
 801de6c:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801de6e:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801de70:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801de72:	4658      	mov	r0, fp
 801de74:	f7ef fe4c 	bl	800db10 <Calibration_Load_2byte>
 801de78:	ee07 0a90 	vmov	s15, r0
 801de7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de80:	ee17 0a90 	vmov	r0, s15
 801de84:	f7e2 fb70 	bl	8000568 <__aeabi_f2d>
 801de88:	4642      	mov	r2, r8
 801de8a:	464b      	mov	r3, r9
 801de8c:	f7e2 fcea 	bl	8000864 <__aeabi_ddiv>
 801de90:	4b52      	ldr	r3, [pc, #328]	; (801dfdc <main+0xe74>)
 801de92:	2200      	movs	r2, #0
 801de94:	f7e2 fa08 	bl	80002a8 <__aeabi_dsub>
 801de98:	f7e2 feb2 	bl	8000c00 <__aeabi_d2f>
 801de9c:	9b04      	ldr	r3, [sp, #16]
 801de9e:	60d8      	str	r0, [r3, #12]
 801dea0:	9b03      	ldr	r3, [sp, #12]
 801dea2:	3310      	adds	r3, #16
 801dea4:	9303      	str	r3, [sp, #12]
 801dea6:	9b05      	ldr	r3, [sp, #20]
 801dea8:	3310      	adds	r3, #16
 801deaa:	9305      	str	r3, [sp, #20]
 801deac:	9b04      	ldr	r3, [sp, #16]
 801deae:	3310      	adds	r3, #16
 801deb0:	9304      	str	r3, [sp, #16]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 801deb2:	4b4b      	ldr	r3, [pc, #300]	; (801dfe0 <main+0xe78>)
 801deb4:	429c      	cmp	r4, r3
 801deb6:	f47f ad7c 	bne.w	801d9b2 <main+0x84a>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801deba:	2100      	movs	r1, #0
 801debc:	4849      	ldr	r0, [pc, #292]	; (801dfe4 <main+0xe7c>)
 801debe:	f7ef fe27 	bl	800db10 <Calibration_Load_2byte>
 801dec2:	4b49      	ldr	r3, [pc, #292]	; (801dfe8 <main+0xe80>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801dec4:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801dec6:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801dec8:	4846      	ldr	r0, [pc, #280]	; (801dfe4 <main+0xe7c>)
 801deca:	f7ef fe21 	bl	800db10 <Calibration_Load_2byte>
 801dece:	4b47      	ldr	r3, [pc, #284]	; (801dfec <main+0xe84>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801ded0:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801ded2:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801ded4:	4846      	ldr	r0, [pc, #280]	; (801dff0 <main+0xe88>)
 801ded6:	f7ef fe1b 	bl	800db10 <Calibration_Load_2byte>
 801deda:	4b46      	ldr	r3, [pc, #280]	; (801dff4 <main+0xe8c>)
Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801dedc:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801dede:	8018      	strh	r0, [r3, #0]
Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801dee0:	4845      	ldr	r0, [pc, #276]	; (801dff8 <main+0xe90>)
 801dee2:	f7ef fe15 	bl	800db10 <Calibration_Load_2byte>
 801dee6:	4b45      	ldr	r3, [pc, #276]	; (801dffc <main+0xe94>)
Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801dee8:	2101      	movs	r1, #1
Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801deea:	8018      	strh	r0, [r3, #0]
Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801deec:	4842      	ldr	r0, [pc, #264]	; (801dff8 <main+0xe90>)
 801deee:	f7ef fe0f 	bl	800db10 <Calibration_Load_2byte>
 801def2:	4b43      	ldr	r3, [pc, #268]	; (801e000 <main+0xe98>)
 801def4:	4943      	ldr	r1, [pc, #268]	; (801e004 <main+0xe9c>)
 801def6:	8018      	strh	r0, [r3, #0]
 801def8:	4b43      	ldr	r3, [pc, #268]	; (801e008 <main+0xea0>)
 801defa:	4a44      	ldr	r2, [pc, #272]	; (801e00c <main+0xea4>)
 801defc:	f8b3 e000 	ldrh.w	lr, [r3]
 801df00:	4b43      	ldr	r3, [pc, #268]	; (801e010 <main+0xea8>)
 801df02:	8808      	ldrh	r0, [r1, #0]
 801df04:	881e      	ldrh	r6, [r3, #0]
 801df06:	f8b2 8000 	ldrh.w	r8, [r2]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801df0a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 801e014 <main+0xeac>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801df0e:	eddf 6a42 	vldr	s13, [pc, #264]	; 801e018 <main+0xeb0>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801df12:	ed9f 6a42 	vldr	s12, [pc, #264]	; 801e01c <main+0xeb4>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801df16:	eddf 5a42 	vldr	s11, [pc, #264]	; 801e020 <main+0xeb8>
Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801df1a:	2300      	movs	r3, #0
 801df1c:	461f      	mov	r7, r3
 801df1e:	469c      	mov	ip, r3
 801df20:	4699      	mov	r9, r3
 801df22:	461c      	mov	r4, r3
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801df24:	ecf5 7a01 	vldmia	r5!, {s15}
 801df28:	eef4 7ac7 	vcmpe.f32	s15, s14
 801df2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df30:	fa1f fa83 	uxth.w	sl, r3
 801df34:	d807      	bhi.n	801df46 <main+0xdde>
 801df36:	ed95 5a00 	vldr	s10, [r5]
 801df3a:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801df3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df42:	f280 8113 	bge.w	801e16c <main+0x1004>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801df46:	eef4 7ae6 	vcmpe.f32	s15, s13
 801df4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df4e:	d807      	bhi.n	801df60 <main+0xdf8>
 801df50:	ed95 5a00 	vldr	s10, [r5]
 801df54:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801df58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df5c:	f280 8109 	bge.w	801e172 <main+0x100a>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801df60:	eef4 7ac6 	vcmpe.f32	s15, s12
 801df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df68:	d807      	bhi.n	801df7a <main+0xe12>
 801df6a:	ed95 5a00 	vldr	s10, [r5]
 801df6e:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801df72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df76:	f280 8100 	bge.w	801e17a <main+0x1012>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801df7a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801df7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df82:	d808      	bhi.n	801df96 <main+0xe2e>
 801df84:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 801df88:	eef4 7a65 	vcmp.f32	s15, s11
 801df8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df90:	bfa4      	itt	ge
 801df92:	4650      	movge	r0, sl
 801df94:	2401      	movge	r4, #1
 801df96:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 801df98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801df9c:	d1c2      	bne.n	801df24 <main+0xdbc>
 801df9e:	b104      	cbz	r4, 801dfa2 <main+0xe3a>
 801dfa0:	8008      	strh	r0, [r1, #0]
 801dfa2:	f1b9 0f00 	cmp.w	r9, #0
 801dfa6:	d001      	beq.n	801dfac <main+0xe44>
 801dfa8:	f8a2 8000 	strh.w	r8, [r2]
 801dfac:	f1bc 0f00 	cmp.w	ip, #0
 801dfb0:	d002      	beq.n	801dfb8 <main+0xe50>
 801dfb2:	4b15      	ldr	r3, [pc, #84]	; (801e008 <main+0xea0>)
 801dfb4:	f8a3 e000 	strh.w	lr, [r3]
 801dfb8:	b10f      	cbz	r7, 801dfbe <main+0xe56>
 801dfba:	4b15      	ldr	r3, [pc, #84]	; (801e010 <main+0xea8>)
 801dfbc:	801e      	strh	r6, [r3, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801dfbe:	4b19      	ldr	r3, [pc, #100]	; (801e024 <main+0xebc>)
 801dfc0:	4a19      	ldr	r2, [pc, #100]	; (801e028 <main+0xec0>)
 801dfc2:	edd3 7a00 	vldr	s15, [r3]
 801dfc6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801e02c <main+0xec4>
 801dfca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dfce:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801dfd2:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801dfd6:	8011      	strh	r1, [r2, #0]
 801dfd8:	e02a      	b.n	801e030 <main+0xec8>
 801dfda:	bf00      	nop
 801dfdc:	40490000 	.word	0x40490000
 801dfe0:	08100800 	.word	0x08100800
 801dfe4:	0812a048 	.word	0x0812a048
 801dfe8:	2008f930 	.word	0x2008f930
 801dfec:	2008fc0c 	.word	0x2008fc0c
 801dff0:	0812a04c 	.word	0x0812a04c
 801dff4:	2008fed8 	.word	0x2008fed8
 801dff8:	0812a040 	.word	0x0812a040
 801dffc:	2008f934 	.word	0x2008f934
 801e000:	2008ff80 	.word	0x2008ff80
 801e004:	2008ff70 	.word	0x2008ff70
 801e008:	2009003c 	.word	0x2009003c
 801e00c:	200901a0 	.word	0x200901a0
 801e010:	2008ff72 	.word	0x2008ff72
 801e014:	43c80000 	.word	0x43c80000
 801e018:	43fa0000 	.word	0x43fa0000
 801e01c:	44160000 	.word	0x44160000
 801e020:	442f0000 	.word	0x442f0000
 801e024:	2004fc04 	.word	0x2004fc04
 801e028:	20050c04 	.word	0x20050c04
 801e02c:	20004ff4 	.word	0x20004ff4
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801e030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e034:	ee17 1a90 	vmov	r1, s15
 801e038:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e03a:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801e03e:	edd1 7a00 	vldr	s15, [r1]
 801e042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e046:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e04a:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e04e:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e052:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e058:	ee17 3a90 	vmov	r3, s15
 801e05c:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 801e05e:	4b73      	ldr	r3, [pc, #460]	; (801e22c <main+0x10c4>)
 801e060:	781a      	ldrb	r2, [r3, #0]
 801e062:	4b73      	ldr	r3, [pc, #460]	; (801e230 <main+0x10c8>)
 801e064:	2a00      	cmp	r2, #0
 801e066:	f040 808c 	bne.w	801e182 <main+0x101a>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801e06a:	4a72      	ldr	r2, [pc, #456]	; (801e234 <main+0x10cc>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e06c:	edd2 0a00 	vldr	s1, [r2]
 801e070:	ed93 0a00 	vldr	s0, [r3]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801e074:	4f70      	ldr	r7, [pc, #448]	; (801e238 <main+0x10d0>)
			if((cnt_delay > 150 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1550 && exp_num >= 8)){
 801e076:	4e71      	ldr	r6, [pc, #452]	; (801e23c <main+0x10d4>)
							max_el = 0;
 801e078:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 801e278 <main+0x1110>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e07c:	f7fb f89e 	bl	80191bc <Rabs_calc_Factor2_Settings_change>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801e080:	4a6f      	ldr	r2, [pc, #444]	; (801e240 <main+0x10d8>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e082:	ed88 0a00 	vstr	s0, [r8]
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801e086:	f245 410a 	movw	r1, #21514	; 0x540a
 801e08a:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 801e08e:	f7ec fe91 	bl	800adb4 <CRC_Check>
 801e092:	4b6c      	ldr	r3, [pc, #432]	; (801e244 <main+0x10dc>)
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801e094:	2103      	movs	r1, #3
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801e096:	7018      	strb	r0, [r3, #0]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801e098:	486b      	ldr	r0, [pc, #428]	; (801e248 <main+0x10e0>)
 801e09a:	f7ef fd5d 	bl	800db58 <Calibration_Load_1byte>
 801e09e:	7038      	strb	r0, [r7, #0]
Calculate_Data();
 801e0a0:	f7fd ffee 	bl	801c080 <Calculate_Data>
	Get_Battery_Level();
 801e0a4:	f7fe f904 	bl	801c2b0 <Get_Battery_Level>
	HAL_Delay(1);
 801e0a8:	2001      	movs	r0, #1
 801e0aa:	f7e2 ffb7 	bl	800101c <HAL_Delay>
Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 801e0ae:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 801e0b2:	2000      	movs	r0, #0
 801e0b4:	f7fb f852 	bl	801915c <Image_load>
		GUI_Title_Screen();
 801e0b8:	f7ef ff2e 	bl	800df18 <GUI_Title_Screen>
 801e0bc:	f64f 55e8 	movw	r5, #65000	; 0xfde8
uint32_t cnt_delay = 0, scr_refresh = 0;
 801e0c0:	2400      	movs	r4, #0
		cnt_delay++;
 801e0c2:	3401      	adds	r4, #1
			if((cnt_delay > 150 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1550 && exp_num >= 8)){
 801e0c4:	2c96      	cmp	r4, #150	; 0x96
 801e0c6:	d918      	bls.n	801e0fa <main+0xf92>
 801e0c8:	7833      	ldrb	r3, [r6, #0]
 801e0ca:	2b05      	cmp	r3, #5
 801e0cc:	d910      	bls.n	801e0f0 <main+0xf88>
 801e0ce:	f240 33b6 	movw	r3, #950	; 0x3b6
 801e0d2:	429c      	cmp	r4, r3
 801e0d4:	d911      	bls.n	801e0fa <main+0xf92>
 801e0d6:	7833      	ldrb	r3, [r6, #0]
 801e0d8:	2b05      	cmp	r3, #5
 801e0da:	d902      	bls.n	801e0e2 <main+0xf7a>
 801e0dc:	7833      	ldrb	r3, [r6, #0]
 801e0de:	2b07      	cmp	r3, #7
 801e0e0:	d906      	bls.n	801e0f0 <main+0xf88>
 801e0e2:	f240 630e 	movw	r3, #1550	; 0x60e
 801e0e6:	429c      	cmp	r4, r3
 801e0e8:	d907      	bls.n	801e0fa <main+0xf92>
 801e0ea:	7833      	ldrb	r3, [r6, #0]
 801e0ec:	2b07      	cmp	r3, #7
 801e0ee:	d904      	bls.n	801e0fa <main+0xf92>
							max_el = 0;
 801e0f0:	2400      	movs	r4, #0
							auto_exposure();
 801e0f2:	f7fe fcd3 	bl	801ca9c <auto_exposure>
							max_el = 0;
 801e0f6:	f8a9 4000 	strh.w	r4, [r9]
 801e0fa:	3d01      	subs	r5, #1
 801e0fc:	b2ad      	uxth	r5, r5
		for (uint16_t p = 0; p < 65000; p++){
 801e0fe:	2d00      	cmp	r5, #0
 801e100:	d1df      	bne.n	801e0c2 <main+0xf5a>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e102:	4d52      	ldr	r5, [pc, #328]	; (801e24c <main+0x10e4>)
		Calculate_Data();
 801e104:	f7fd ffbc 	bl	801c080 <Calculate_Data>
		HAL_Delay(2500);	
 801e108:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801e10c:	f7e2 ff86 	bl	800101c <HAL_Delay>
		Calculate_Data();
 801e110:	f7fd ffb6 	bl	801c080 <Calculate_Data>
		usb_receive_processing();
 801e114:	f7fe fae2 	bl	801c6dc <usb_receive_processing>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e118:	782b      	ldrb	r3, [r5, #0]
 801e11a:	07d8      	lsls	r0, r3, #31
 801e11c:	d533      	bpl.n	801e186 <main+0x101e>
 801e11e:	4b4c      	ldr	r3, [pc, #304]	; (801e250 <main+0x10e8>)
 801e120:	484c      	ldr	r0, [pc, #304]	; (801e254 <main+0x10ec>)
 801e122:	781b      	ldrb	r3, [r3, #0]
 801e124:	f013 0f01 	tst.w	r3, #1
 801e128:	bf18      	it	ne
 801e12a:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801e12e:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 801e132:	f7fb f813 	bl	801915c <Image_load>
		Locus.pData = (uint16_t *)bmp;
 801e136:	4b48      	ldr	r3, [pc, #288]	; (801e258 <main+0x10f0>)
 801e138:	4a48      	ldr	r2, [pc, #288]	; (801e25c <main+0x10f4>)
 801e13a:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801e13c:	782a      	ldrb	r2, [r5, #0]
 801e13e:	f002 0101 	and.w	r1, r2, #1
 801e142:	2900      	cmp	r1, #0
 801e144:	bf14      	ite	ne
 801e146:	21d8      	movne	r1, #216	; 0xd8
 801e148:	21fa      	moveq	r1, #250	; 0xfa
 801e14a:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801e14c:	d129      	bne.n	801e1a2 <main+0x103a>
 801e14e:	f012 0f04 	tst.w	r2, #4
 801e152:	bf0c      	ite	eq
 801e154:	22fa      	moveq	r2, #250	; 0xfa
 801e156:	22ea      	movne	r2, #234	; 0xea
 801e158:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 801e15a:	783b      	ldrb	r3, [r7, #0]
 801e15c:	3b01      	subs	r3, #1
 801e15e:	2b05      	cmp	r3, #5
 801e160:	d855      	bhi.n	801e20e <main+0x10a6>
 801e162:	e8df f003 	tbb	[pc, r3]
 801e166:	2056      	.short	0x2056
 801e168:	4e484238 	.word	0x4e484238
			PARGraph_B = i;
 801e16c:	4656      	mov	r6, sl
 801e16e:	2701      	movs	r7, #1
 801e170:	e711      	b.n	801df96 <main+0xe2e>
			PARGraph_G = i;
 801e172:	46d6      	mov	lr, sl
 801e174:	f04f 0c01 	mov.w	ip, #1
 801e178:	e70d      	b.n	801df96 <main+0xe2e>
			PARGraph_R = i;
 801e17a:	46d0      	mov	r8, sl
 801e17c:	f04f 0901 	mov.w	r9, #1
 801e180:	e709      	b.n	801df96 <main+0xe2e>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e182:	4a37      	ldr	r2, [pc, #220]	; (801e260 <main+0x10f8>)
 801e184:	e772      	b.n	801e06c <main+0xf04>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e186:	f003 0304 	and.w	r3, r3, #4
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	4b35      	ldr	r3, [pc, #212]	; (801e264 <main+0x10fc>)
 801e18e:	4836      	ldr	r0, [pc, #216]	; (801e268 <main+0x1100>)
 801e190:	bf08      	it	eq
 801e192:	4618      	moveq	r0, r3
 801e194:	f24f 4324 	movw	r3, #62500	; 0xf424
 801e198:	f24e 4184 	movw	r1, #58500	; 0xe484
 801e19c:	bf08      	it	eq
 801e19e:	4619      	moveq	r1, r3
 801e1a0:	e7c7      	b.n	801e132 <main+0xfca>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801e1a2:	22fa      	movs	r2, #250	; 0xfa
 801e1a4:	e7d8      	b.n	801e158 <main+0xff0>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 801e1a6:	4b31      	ldr	r3, [pc, #196]	; (801e26c <main+0x1104>)
 801e1a8:	2201      	movs	r2, #1
 801e1aa:	701a      	strb	r2, [r3, #0]
 801e1ac:	f7f0 f9e8 	bl	800e580 <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 801e1b0:	4d2f      	ldr	r5, [pc, #188]	; (801e270 <main+0x1108>)
  htim7.Init.Prescaler = 60000;
 801e1b2:	4930      	ldr	r1, [pc, #192]	; (801e274 <main+0x110c>)
 801e1b4:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e1b8:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 801e1ba:	e885 0006 	stmia.w	r5, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801e1be:	4628      	mov	r0, r5
  htim7.Init.Period = 200;
 801e1c0:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e1c2:	9315      	str	r3, [sp, #84]	; 0x54
 801e1c4:	9316      	str	r3, [sp, #88]	; 0x58
 801e1c6:	9317      	str	r3, [sp, #92]	; 0x5c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e1c8:	60ab      	str	r3, [r5, #8]
  htim7.Init.Period = 200;
 801e1ca:	60ea      	str	r2, [r5, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e1cc:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801e1ce:	f7e7 f997 	bl	8005500 <HAL_TIM_Base_Init>
 801e1d2:	b308      	cbz	r0, 801e218 <main+0x10b0>
 801e1d4:	e7fe      	b.n	801e1d4 <main+0x106c>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 801e1d6:	4b25      	ldr	r3, [pc, #148]	; (801e26c <main+0x1104>)
 801e1d8:	2202      	movs	r2, #2
 801e1da:	701a      	strb	r2, [r3, #0]
 801e1dc:	f7f0 f9ac 	bl	800e538 <GUI_Measure_Screen>
 801e1e0:	f7f0 f9ce 	bl	800e580 <GUI_Measure2_Screen>
 801e1e4:	f7f0 f9fc 	bl	800e5e0 <GUI_Measure3_Screen>
 801e1e8:	e7e2      	b.n	801e1b0 <main+0x1048>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 801e1ea:	4b20      	ldr	r3, [pc, #128]	; (801e26c <main+0x1104>)
 801e1ec:	2201      	movs	r2, #1
 801e1ee:	701a      	strb	r2, [r3, #0]
 801e1f0:	f7f0 fe66 	bl	800eec0 <GUI_Graph_Screen>
 801e1f4:	e7dc      	b.n	801e1b0 <main+0x1048>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 801e1f6:	4b1d      	ldr	r3, [pc, #116]	; (801e26c <main+0x1104>)
 801e1f8:	220e      	movs	r2, #14
 801e1fa:	701a      	strb	r2, [r3, #0]
 801e1fc:	f7f0 ff90 	bl	800f120 <GUI_Color_Screen>
 801e200:	e7d6      	b.n	801e1b0 <main+0x1048>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();break;
 801e202:	4b1a      	ldr	r3, [pc, #104]	; (801e26c <main+0x1104>)
 801e204:	2201      	movs	r2, #1
 801e206:	701a      	strb	r2, [r3, #0]
 801e208:	f7f1 fa62 	bl	800f6d0 <GUI_ColorRend_Screen>
 801e20c:	e7d0      	b.n	801e1b0 <main+0x1048>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 801e20e:	2301      	movs	r3, #1
 801e210:	703b      	strb	r3, [r7, #0]
 801e212:	f7f0 f991 	bl	800e538 <GUI_Measure_Screen>
 801e216:	e7cb      	b.n	801e1b0 <main+0x1048>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e218:	9015      	str	r0, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e21a:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801e21c:	a915      	add	r1, sp, #84	; 0x54
 801e21e:	4628      	mov	r0, r5
 801e220:	f7e7 fb64 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 801e224:	4606      	mov	r6, r0
 801e226:	b348      	cbz	r0, 801e27c <main+0x1114>
 801e228:	e7fe      	b.n	801e228 <main+0x10c0>
 801e22a:	bf00      	nop
 801e22c:	20000a50 	.word	0x20000a50
 801e230:	20004fec 	.word	0x20004fec
 801e234:	20004fe8 	.word	0x20004fe8
 801e238:	20004ca1 	.word	0x20004ca1
 801e23c:	2008a848 	.word	0x2008a848
 801e240:	0812a050 	.word	0x0812a050
 801e244:	2008f932 	.word	0x2008f932
 801e248:	0812c020 	.word	0x0812c020
 801e24c:	20004c9f 	.word	0x20004c9f
 801e250:	20004ca4 	.word	0x20004ca4
 801e254:	00051d00 	.word	0x00051d00
 801e258:	2008b270 	.word	0x2008b270
 801e25c:	20050c0e 	.word	0x20050c0e
 801e260:	20004fe4 	.word	0x20004fe4
 801e264:	00018100 	.word	0x00018100
 801e268:	0006ca00 	.word	0x0006ca00
 801e26c:	20000232 	.word	0x20000232
 801e270:	20090160 	.word	0x20090160
 801e274:	40001400 	.word	0x40001400
 801e278:	2008a854 	.word	0x2008a854
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);  //
 801e27c:	2204      	movs	r2, #4
 801e27e:	2101      	movs	r1, #1
 801e280:	201c      	movs	r0, #28
 801e282:	f7e3 fb85 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801e286:	2001      	movs	r0, #1
 801e288:	f7e2 fec8 	bl	800101c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801e28c:	2037      	movs	r0, #55	; 0x37
 801e28e:	f7e3 fbb3 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e292:	2001      	movs	r0, #1
 801e294:	f7e2 fec2 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 801e298:	4628      	mov	r0, r5
 801e29a:	f7e6 ffe3 	bl	8005264 <HAL_TIM_Base_Start>
	HAL_Delay(1);
 801e29e:	2001      	movs	r0, #1
 801e2a0:	f7e2 febc 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 801e2a4:	4628      	mov	r0, r5
 801e2a6:	f7e6 fff7 	bl	8005298 <HAL_TIM_Base_Start_IT>
   Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801e2aa:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 801e454 <main+0x12ec>
 801e2ae:	4d5e      	ldr	r5, [pc, #376]	; (801e428 <main+0x12c0>)
 801e2b0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 801e458 <main+0x12f0>
 801e2b4:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 801e45c <main+0x12f4>
            usb_receive_processing();
 801e2b8:	f7fe fa10 	bl	801c6dc <usb_receive_processing>
   Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801e2bc:	4b5b      	ldr	r3, [pc, #364]	; (801e42c <main+0x12c4>)
 801e2be:	f8b9 0000 	ldrh.w	r0, [r9]
 801e2c2:	ed93 0a00 	vldr	s0, [r3]
 801e2c6:	4651      	mov	r1, sl
 801e2c8:	f7fa ff7c 	bl	80191c4 <Rabs_calc_Factor1>
	 if(exp_num ==0 && max_el >53000)
 801e2cc:	4b56      	ldr	r3, [pc, #344]	; (801e428 <main+0x12c0>)
   Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801e2ce:	ed8b 0a00 	vstr	s0, [fp]
	 if(exp_num ==0 && max_el >53000)
 801e2d2:	781b      	ldrb	r3, [r3, #0]
 801e2d4:	b94b      	cbnz	r3, 801e2ea <main+0x1182>
 801e2d6:	4b56      	ldr	r3, [pc, #344]	; (801e430 <main+0x12c8>)
 801e2d8:	881a      	ldrh	r2, [r3, #0]
 801e2da:	f64c 7308 	movw	r3, #53000	; 0xcf08
 801e2de:	429a      	cmp	r2, r3
 801e2e0:	d903      	bls.n	801e2ea <main+0x1182>
		exposure_display(100, 100);
 801e2e2:	2164      	movs	r1, #100	; 0x64
 801e2e4:	4608      	mov	r0, r1
 801e2e6:	f7fe fc3b 	bl	801cb60 <exposure_display>
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801e2ea:	f8b9 1000 	ldrh.w	r1, [r9]
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801e2ee:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801e460 <main+0x12f8>
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801e2f2:	4b50      	ldr	r3, [pc, #320]	; (801e434 <main+0x12cc>)
 801e2f4:	4a50      	ldr	r2, [pc, #320]	; (801e438 <main+0x12d0>)
 801e2f6:	edd8 0a00 	vldr	s1, [r8]
 801e2fa:	ed9b 0a00 	vldr	s0, [fp]
 801e2fe:	4650      	mov	r0, sl
 801e300:	f7fa ff94 	bl	801922c <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801e304:	f899 3000 	ldrb.w	r3, [r9]
 801e308:	b92b      	cbnz	r3, 801e316 <main+0x11ae>
 801e30a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e30e:	4949      	ldr	r1, [pc, #292]	; (801e434 <main+0x12cc>)
 801e310:	484a      	ldr	r0, [pc, #296]	; (801e43c <main+0x12d4>)
 801e312:	f000 fe61 	bl	801efd8 <memcpy>
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 801e316:	783b      	ldrb	r3, [r7, #0]
 801e318:	1e5a      	subs	r2, r3, #1
 801e31a:	2a02      	cmp	r2, #2
 801e31c:	f104 0b01 	add.w	fp, r4, #1
 801e320:	d852      	bhi.n	801e3c8 <main+0x1260>
 801e322:	4b47      	ldr	r3, [pc, #284]	; (801e440 <main+0x12d8>)
 801e324:	781b      	ldrb	r3, [r3, #0]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d167      	bne.n	801e3fa <main+0x1292>
			cnt_delay++;
 801e32a:	465c      	mov	r4, fp
			if(!pause){Calculate_Data();}
 801e32c:	f7fd fea8 	bl	801c080 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801e330:	2c28      	cmp	r4, #40	; 0x28
 801e332:	d907      	bls.n	801e344 <main+0x11dc>
 801e334:	782b      	ldrb	r3, [r5, #0]
 801e336:	2b05      	cmp	r3, #5
 801e338:	d83a      	bhi.n	801e3b0 <main+0x1248>
								auto_exposure();
 801e33a:	f7fe fbaf 	bl	801ca9c <auto_exposure>
								max_el = 0;
 801e33e:	4b3c      	ldr	r3, [pc, #240]	; (801e430 <main+0x12c8>)
 801e340:	2400      	movs	r4, #0
 801e342:	801c      	strh	r4, [r3, #0]
        if(GUI_screen_state == Graph_Screen)
 801e344:	783b      	ldrb	r3, [r7, #0]
 801e346:	2b04      	cmp	r3, #4
 801e348:	d16c      	bne.n	801e424 <main+0x12bc>
            scr_refresh++;
 801e34a:	3601      	adds	r6, #1
            if(scr_refresh > 35 ){
 801e34c:	2e23      	cmp	r6, #35	; 0x23
 801e34e:	d92c      	bls.n	801e3aa <main+0x1242>
							block_graph = 1;
 801e350:	2301      	movs	r3, #1
 801e352:	f889 3000 	strb.w	r3, [r9]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 801e356:	4b3b      	ldr	r3, [pc, #236]	; (801e444 <main+0x12dc>)
 801e358:	4e3b      	ldr	r6, [pc, #236]	; (801e448 <main+0x12e0>)
 801e35a:	781b      	ldrb	r3, [r3, #0]
 801e35c:	f8df b104 	ldr.w	fp, [pc, #260]	; 801e464 <main+0x12fc>
 801e360:	2b04      	cmp	r3, #4
 801e362:	d109      	bne.n	801e378 <main+0x1210>
 801e364:	7832      	ldrb	r2, [r6, #0]
 801e366:	f89b 3000 	ldrb.w	r3, [fp]
 801e36a:	4293      	cmp	r3, r2
 801e36c:	d104      	bne.n	801e378 <main+0x1210>
 801e36e:	2114      	movs	r1, #20
 801e370:	4a36      	ldr	r2, [pc, #216]	; (801e44c <main+0x12e4>)
 801e372:	4608      	mov	r0, r1
 801e374:	f7fc fd92 	bl	801ae9c <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801e378:	f89b 1000 	ldrb.w	r1, [fp]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801e37c:	482f      	ldr	r0, [pc, #188]	; (801e43c <main+0x12d4>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801e37e:	7031      	strb	r1, [r6, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801e380:	f7fa ff80 	bl	8019284 <Rabs_find_MAX>
 801e384:	4b32      	ldr	r3, [pc, #200]	; (801e450 <main+0x12e8>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801e386:	7830      	ldrb	r0, [r6, #0]
 801e388:	492c      	ldr	r1, [pc, #176]	; (801e43c <main+0x12d4>)
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801e38a:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801e38e:	f7fc fd33 	bl	801adf8 <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801e392:	7833      	ldrb	r3, [r6, #0]
 801e394:	9300      	str	r3, [sp, #0]
 801e396:	2114      	movs	r1, #20
 801e398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e39c:	4a2b      	ldr	r2, [pc, #172]	; (801e44c <main+0x12e4>)
 801e39e:	4608      	mov	r0, r1
								block_graph = 0;
 801e3a0:	2600      	movs	r6, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801e3a2:	f7fc fc8d 	bl	801acc0 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 801e3a6:	f889 6000 	strb.w	r6, [r9]
        GUI_Display_Refresh();
 801e3aa:	f7f1 fa27 	bl	800f7fc <GUI_Display_Refresh>
            usb_receive_processing();
 801e3ae:	e77f      	b.n	801e2b0 <main+0x1148>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801e3b0:	2c46      	cmp	r4, #70	; 0x46
 801e3b2:	d9c7      	bls.n	801e344 <main+0x11dc>
 801e3b4:	782b      	ldrb	r3, [r5, #0]
 801e3b6:	2b05      	cmp	r3, #5
 801e3b8:	d902      	bls.n	801e3c0 <main+0x1258>
 801e3ba:	782b      	ldrb	r3, [r5, #0]
 801e3bc:	2b07      	cmp	r3, #7
 801e3be:	d9bc      	bls.n	801e33a <main+0x11d2>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801e3c0:	782b      	ldrb	r3, [r5, #0]
 801e3c2:	2b07      	cmp	r3, #7
 801e3c4:	d8b9      	bhi.n	801e33a <main+0x11d2>
 801e3c6:	e7bd      	b.n	801e344 <main+0x11dc>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 801e3c8:	2b05      	cmp	r3, #5
 801e3ca:	d116      	bne.n	801e3fa <main+0x1292>
 801e3cc:	4b1c      	ldr	r3, [pc, #112]	; (801e440 <main+0x12d8>)
 801e3ce:	781b      	ldrb	r3, [r3, #0]
 801e3d0:	b99b      	cbnz	r3, 801e3fa <main+0x1292>
			cnt_delay++;
 801e3d2:	465c      	mov	r4, fp
			if(!pause){Calculate_Data();}
 801e3d4:	f7fd fe54 	bl	801c080 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801e3d8:	2c28      	cmp	r4, #40	; 0x28
 801e3da:	d9b3      	bls.n	801e344 <main+0x11dc>
 801e3dc:	782b      	ldrb	r3, [r5, #0]
 801e3de:	2b05      	cmp	r3, #5
 801e3e0:	d9ab      	bls.n	801e33a <main+0x11d2>
 801e3e2:	2c46      	cmp	r4, #70	; 0x46
 801e3e4:	d9ae      	bls.n	801e344 <main+0x11dc>
 801e3e6:	782b      	ldrb	r3, [r5, #0]
 801e3e8:	2b05      	cmp	r3, #5
 801e3ea:	d902      	bls.n	801e3f2 <main+0x128a>
 801e3ec:	782b      	ldrb	r3, [r5, #0]
 801e3ee:	2b07      	cmp	r3, #7
 801e3f0:	d9a3      	bls.n	801e33a <main+0x11d2>
 801e3f2:	f5bb 7ffa 	cmp.w	fp, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801e3f6:	d9a5      	bls.n	801e344 <main+0x11dc>
 801e3f8:	e7e2      	b.n	801e3c0 <main+0x1258>
 801e3fa:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
				cnt_delay++;
 801e3fe:	465c      	mov	r4, fp
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801e400:	d9a0      	bls.n	801e344 <main+0x11dc>
 801e402:	782b      	ldrb	r3, [r5, #0]
 801e404:	2b05      	cmp	r3, #5
 801e406:	d998      	bls.n	801e33a <main+0x11d2>
 801e408:	f240 33b6 	movw	r3, #950	; 0x3b6
 801e40c:	459b      	cmp	fp, r3
 801e40e:	d999      	bls.n	801e344 <main+0x11dc>
 801e410:	782b      	ldrb	r3, [r5, #0]
 801e412:	2b05      	cmp	r3, #5
 801e414:	d902      	bls.n	801e41c <main+0x12b4>
 801e416:	782b      	ldrb	r3, [r5, #0]
 801e418:	2b07      	cmp	r3, #7
 801e41a:	d98e      	bls.n	801e33a <main+0x11d2>
 801e41c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 801e420:	459b      	cmp	fp, r3
 801e422:	e7e8      	b.n	801e3f6 <main+0x128e>
        } else{__asm("nop");}
 801e424:	bf00      	nop
 801e426:	e7c0      	b.n	801e3aa <main+0x1242>
 801e428:	2008a848 	.word	0x2008a848
 801e42c:	2004cbfc 	.word	0x2004cbfc
 801e430:	2008a854 	.word	0x2008a854
 801e434:	200077fc 	.word	0x200077fc
 801e438:	2004cc00 	.word	0x2004cc00
 801e43c:	200087fc 	.word	0x200087fc
 801e440:	20004cc6 	.word	0x20004cc6
 801e444:	20000232 	.word	0x20000232
 801e448:	20000a51 	.word	0x20000a51
 801e44c:	20004cf0 	.word	0x20004cf0
 801e450:	2008ff8c 	.word	0x2008ff8c
 801e454:	200097fc 	.word	0x200097fc
 801e458:	20004fe2 	.word	0x20004fe2
 801e45c:	20004ff0 	.word	0x20004ff0
 801e460:	20050c0d 	.word	0x20050c0d
 801e464:	20004caa 	.word	0x20004caa

0801e468 <_Error_Handler>:
  {
    _Error_Handler(__FILE__, __LINE__);
  }
}
void _Error_Handler(char *file, int line)
{
 801e468:	e7fe      	b.n	801e468 <_Error_Handler>
	...

0801e46c <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 801e46c:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 801e46e:	4c06      	ldr	r4, [pc, #24]	; (801e488 <SD_CheckStatus.isra.0+0x1c>)
 801e470:	2301      	movs	r3, #1
 801e472:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801e474:	f7fc ff52 	bl	801b31c <BSP_SD_GetCardState>
 801e478:	4623      	mov	r3, r4
 801e47a:	b918      	cbnz	r0, 801e484 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 801e47c:	7822      	ldrb	r2, [r4, #0]
 801e47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e482:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 801e484:	7818      	ldrb	r0, [r3, #0]
}
 801e486:	bd10      	pop	{r4, pc}
 801e488:	20000a54 	.word	0x20000a54

0801e48c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801e48c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801e48e:	4c05      	ldr	r4, [pc, #20]	; (801e4a4 <SD_initialize+0x18>)
 801e490:	2301      	movs	r3, #1
 801e492:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801e494:	f7fc ff0a 	bl	801b2ac <BSP_SD_Init>
 801e498:	b910      	cbnz	r0, 801e4a0 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 801e49a:	f7ff ffe7 	bl	801e46c <SD_CheckStatus.isra.0>
 801e49e:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801e4a0:	7820      	ldrb	r0, [r4, #0]
}
 801e4a2:	bd10      	pop	{r4, pc}
 801e4a4:	20000a54 	.word	0x20000a54

0801e4a8 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 801e4a8:	f7ff bfe0 	b.w	801e46c <SD_CheckStatus.isra.0>

0801e4ac <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801e4ac:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801e4ae:	4c16      	ldr	r4, [pc, #88]	; (801e508 <SD_read+0x5c>)
{
 801e4b0:	4608      	mov	r0, r1
 801e4b2:	4611      	mov	r1, r2
  ReadStatus = 0;
 801e4b4:	2200      	movs	r2, #0
 801e4b6:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801e4b8:	461a      	mov	r2, r3
 801e4ba:	f7fc ff13 	bl	801b2e4 <BSP_SD_ReadBlocks_DMA>
 801e4be:	b108      	cbz	r0, 801e4c4 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 801e4c0:	2001      	movs	r0, #1
 801e4c2:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 801e4c4:	f7e2 fda4 	bl	8001010 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801e4c8:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801e4cc:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801e4ce:	6823      	ldr	r3, [r4, #0]
 801e4d0:	b19b      	cbz	r3, 801e4fa <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 801e4d2:	6823      	ldr	r3, [r4, #0]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d0f3      	beq.n	801e4c0 <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 801e4d8:	2300      	movs	r3, #0
 801e4da:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801e4dc:	f7e2 fd98 	bl	8001010 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801e4e0:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801e4e4:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801e4e6:	f7e2 fd93 	bl	8001010 <HAL_GetTick>
 801e4ea:	1b40      	subs	r0, r0, r5
 801e4ec:	42a0      	cmp	r0, r4
 801e4ee:	d8e7      	bhi.n	801e4c0 <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801e4f0:	f7fc ff14 	bl	801b31c <BSP_SD_GetCardState>
 801e4f4:	2800      	cmp	r0, #0
 801e4f6:	d1f6      	bne.n	801e4e6 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 801e4f8:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801e4fa:	f7e2 fd89 	bl	8001010 <HAL_GetTick>
 801e4fe:	1b80      	subs	r0, r0, r6
 801e500:	42a8      	cmp	r0, r5
 801e502:	d9e4      	bls.n	801e4ce <SD_read+0x22>
 801e504:	e7e5      	b.n	801e4d2 <SD_read+0x26>
 801e506:	bf00      	nop
 801e508:	2008a858 	.word	0x2008a858

0801e50c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801e50c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 801e50e:	4c16      	ldr	r4, [pc, #88]	; (801e568 <SD_write+0x5c>)
{
 801e510:	4608      	mov	r0, r1
 801e512:	4611      	mov	r1, r2
  WriteStatus = 0;
 801e514:	2200      	movs	r2, #0
 801e516:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801e518:	461a      	mov	r2, r3
 801e51a:	f7fc fef1 	bl	801b300 <BSP_SD_WriteBlocks_DMA>
 801e51e:	b108      	cbz	r0, 801e524 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 801e520:	2001      	movs	r0, #1
 801e522:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 801e524:	f7e2 fd74 	bl	8001010 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801e528:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801e52c:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801e52e:	6823      	ldr	r3, [r4, #0]
 801e530:	b19b      	cbz	r3, 801e55a <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 801e532:	6823      	ldr	r3, [r4, #0]
 801e534:	2b00      	cmp	r3, #0
 801e536:	d0f3      	beq.n	801e520 <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 801e538:	2300      	movs	r3, #0
 801e53a:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801e53c:	f7e2 fd68 	bl	8001010 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801e540:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801e544:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801e546:	f7e2 fd63 	bl	8001010 <HAL_GetTick>
 801e54a:	1b40      	subs	r0, r0, r5
 801e54c:	42a0      	cmp	r0, r4
 801e54e:	d8e7      	bhi.n	801e520 <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801e550:	f7fc fee4 	bl	801b31c <BSP_SD_GetCardState>
 801e554:	2800      	cmp	r0, #0
 801e556:	d1f6      	bne.n	801e546 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 801e558:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801e55a:	f7e2 fd59 	bl	8001010 <HAL_GetTick>
 801e55e:	1b80      	subs	r0, r0, r6
 801e560:	42a8      	cmp	r0, r5
 801e562:	d9e4      	bls.n	801e52e <SD_write+0x22>
 801e564:	e7e5      	b.n	801e532 <SD_write+0x26>
 801e566:	bf00      	nop
 801e568:	2008a85c 	.word	0x2008a85c

0801e56c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801e56c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801e56e:	4b12      	ldr	r3, [pc, #72]	; (801e5b8 <SD_ioctl+0x4c>)
 801e570:	781b      	ldrb	r3, [r3, #0]
 801e572:	07db      	lsls	r3, r3, #31
{
 801e574:	b08a      	sub	sp, #40	; 0x28
 801e576:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801e578:	d41b      	bmi.n	801e5b2 <SD_ioctl+0x46>

  switch (cmd)
 801e57a:	2903      	cmp	r1, #3
 801e57c:	d803      	bhi.n	801e586 <SD_ioctl+0x1a>
 801e57e:	e8df f001 	tbb	[pc, r1]
 801e582:	0510      	.short	0x0510
 801e584:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 801e586:	2004      	movs	r0, #4
  }

  return res;
}
 801e588:	b00a      	add	sp, #40	; 0x28
 801e58a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801e58c:	a801      	add	r0, sp, #4
 801e58e:	f7fc fecf 	bl	801b330 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801e592:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801e594:	6023      	str	r3, [r4, #0]
 801e596:	e004      	b.n	801e5a2 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 801e598:	a801      	add	r0, sp, #4
 801e59a:	f7fc fec9 	bl	801b330 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801e59e:	9b08      	ldr	r3, [sp, #32]
 801e5a0:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 801e5a2:	2000      	movs	r0, #0
 801e5a4:	e7f0      	b.n	801e588 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 801e5a6:	a801      	add	r0, sp, #4
 801e5a8:	f7fc fec2 	bl	801b330 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801e5ac:	9b08      	ldr	r3, [sp, #32]
 801e5ae:	0a5b      	lsrs	r3, r3, #9
 801e5b0:	e7f0      	b.n	801e594 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801e5b2:	2003      	movs	r0, #3
 801e5b4:	e7e8      	b.n	801e588 <SD_ioctl+0x1c>
 801e5b6:	bf00      	nop
 801e5b8:	20000a54 	.word	0x20000a54

0801e5bc <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e5bc:	4b21      	ldr	r3, [pc, #132]	; (801e644 <HAL_MspInit+0x88>)
{
 801e5be:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e5c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801e5c2:	f042 0201 	orr.w	r2, r2, #1
 801e5c6:	661a      	str	r2, [r3, #96]	; 0x60
 801e5c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801e5ca:	f002 0201 	and.w	r2, r2, #1
 801e5ce:	9200      	str	r2, [sp, #0]
 801e5d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801e5d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e5d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801e5d8:	659a      	str	r2, [r3, #88]	; 0x58
 801e5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e5dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e5e0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801e5e2:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 801e5e4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801e5e6:	f7e3 f9c1 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	4611      	mov	r1, r2
 801e5ee:	f06f 000b 	mvn.w	r0, #11
 801e5f2:	f7e3 f9cd 	bl	8001990 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 801e5f6:	2200      	movs	r2, #0
 801e5f8:	4611      	mov	r1, r2
 801e5fa:	f06f 000a 	mvn.w	r0, #10
 801e5fe:	f7e3 f9c7 	bl	8001990 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801e602:	2200      	movs	r2, #0
 801e604:	4611      	mov	r1, r2
 801e606:	f06f 0009 	mvn.w	r0, #9
 801e60a:	f7e3 f9c1 	bl	8001990 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801e60e:	2200      	movs	r2, #0
 801e610:	4611      	mov	r1, r2
 801e612:	f06f 0004 	mvn.w	r0, #4
 801e616:	f7e3 f9bb 	bl	8001990 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 801e61a:	2200      	movs	r2, #0
 801e61c:	4611      	mov	r1, r2
 801e61e:	f06f 0003 	mvn.w	r0, #3
 801e622:	f7e3 f9b5 	bl	8001990 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 801e626:	2200      	movs	r2, #0
 801e628:	4611      	mov	r1, r2
 801e62a:	f06f 0001 	mvn.w	r0, #1
 801e62e:	f7e3 f9af 	bl	8001990 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801e632:	2200      	movs	r2, #0
 801e634:	4611      	mov	r1, r2
 801e636:	f04f 30ff 	mov.w	r0, #4294967295
 801e63a:	f7e3 f9a9 	bl	8001990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801e63e:	b003      	add	sp, #12
 801e640:	f85d fb04 	ldr.w	pc, [sp], #4
 801e644:	40021000 	.word	0x40021000

0801e648 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801e648:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 801e64a:	6802      	ldr	r2, [r0, #0]
 801e64c:	4b31      	ldr	r3, [pc, #196]	; (801e714 <HAL_LTDC_MspInit+0xcc>)
 801e64e:	429a      	cmp	r2, r3
{
 801e650:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 801e652:	d15d      	bne.n	801e710 <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801e654:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e658:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 801e65a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801e65c:	482e      	ldr	r0, [pc, #184]	; (801e718 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 801e65e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801e662:	661a      	str	r2, [r3, #96]	; 0x60
 801e664:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801e666:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801e66a:	9200      	str	r2, [sp, #0]
 801e66c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801e66e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e670:	f042 0210 	orr.w	r2, r2, #16
 801e674:	64da      	str	r2, [r3, #76]	; 0x4c
 801e676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e678:	f002 0210 	and.w	r2, r2, #16
 801e67c:	9201      	str	r2, [sp, #4]
 801e67e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801e680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e682:	f042 0202 	orr.w	r2, r2, #2
 801e686:	64da      	str	r2, [r3, #76]	; 0x4c
 801e688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e68a:	f002 0202 	and.w	r2, r2, #2
 801e68e:	9202      	str	r2, [sp, #8]
 801e690:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801e692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e694:	f042 0220 	orr.w	r2, r2, #32
 801e698:	64da      	str	r2, [r3, #76]	; 0x4c
 801e69a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e69c:	f002 0220 	and.w	r2, r2, #32
 801e6a0:	9203      	str	r2, [sp, #12]
 801e6a2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801e6a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e6a6:	f042 0208 	orr.w	r2, r2, #8
 801e6aa:	64da      	str	r2, [r3, #76]	; 0x4c
 801e6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e6ae:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801e6b0:	f003 0308 	and.w	r3, r3, #8
 801e6b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e6b6:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801e6b8:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801e6ba:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e6bc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 801e6be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801e6c2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 801e6c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e6c6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801e6c8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801e6ca:	f7e3 fd2b 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e6ce:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801e6d0:	a905      	add	r1, sp, #20
 801e6d2:	4812      	ldr	r0, [pc, #72]	; (801e71c <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e6d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e6d6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e6d8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e6da:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801e6dc:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801e6de:	f7e3 fd21 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801e6e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e6e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e6e8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801e6ea:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e6ec:	480c      	ldr	r0, [pc, #48]	; (801e720 <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801e6ee:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e6f0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e6f2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e6f4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e6f6:	f7e3 fd15 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 801e6fa:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801e6fe:	a905      	add	r1, sp, #20
 801e700:	4808      	ldr	r0, [pc, #32]	; (801e724 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 801e702:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e704:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e706:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e708:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801e70a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801e70c:	f7e3 fd0a 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801e710:	b00a      	add	sp, #40	; 0x28
 801e712:	bd70      	pop	{r4, r5, r6, pc}
 801e714:	40016800 	.word	0x40016800
 801e718:	48001000 	.word	0x48001000
 801e71c:	48000400 	.word	0x48000400
 801e720:	48001400 	.word	0x48001400
 801e724:	48000c00 	.word	0x48000c00

0801e728 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801e728:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 801e72a:	6802      	ldr	r2, [r0, #0]
 801e72c:	4b13      	ldr	r3, [pc, #76]	; (801e77c <HAL_SPI_MspInit+0x54>)
 801e72e:	429a      	cmp	r2, r3
{
 801e730:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 801e732:	d121      	bne.n	801e778 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801e734:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e738:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 801e73a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801e73c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e740:	661a      	str	r2, [r3, #96]	; 0x60
 801e742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e744:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 801e746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801e74a:	9300      	str	r3, [sp, #0]
 801e74c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 801e74e:	2342      	movs	r3, #66	; 0x42
 801e750:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e752:	2302      	movs	r3, #2
 801e754:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e756:	2303      	movs	r3, #3
 801e758:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e75a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801e75c:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e75e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801e762:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e764:	f7e3 fcde 	bl	8002124 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801e768:	2023      	movs	r0, #35	; 0x23
 801e76a:	4622      	mov	r2, r4
 801e76c:	4621      	mov	r1, r4
 801e76e:	f7e3 f90f 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 801e772:	2023      	movs	r0, #35	; 0x23
 801e774:	f7e3 f940 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801e778:	b006      	add	sp, #24
 801e77a:	bd10      	pop	{r4, pc}
 801e77c:	40013000 	.word	0x40013000

0801e780 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801e780:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==LPUART1)
 801e782:	6802      	ldr	r2, [r0, #0]
 801e784:	4b12      	ldr	r3, [pc, #72]	; (801e7d0 <HAL_UART_MspInit+0x50>)
 801e786:	429a      	cmp	r2, r3
{
 801e788:	b086      	sub	sp, #24
  if(huart->Instance==LPUART1)
 801e78a:	d11f      	bne.n	801e7cc <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801e78c:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e790:	2400      	movs	r4, #0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801e792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e794:	480f      	ldr	r0, [pc, #60]	; (801e7d4 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801e796:	f042 0201 	orr.w	r2, r2, #1
 801e79a:	65da      	str	r2, [r3, #92]	; 0x5c
 801e79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e79e:	9403      	str	r4, [sp, #12]
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801e7a0:	f003 0301 	and.w	r3, r3, #1
 801e7a4:	9300      	str	r3, [sp, #0]
 801e7a6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801e7a8:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e7aa:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801e7ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e7ae:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e7b0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801e7b2:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e7b4:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801e7b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e7b8:	f7e3 fcb4 	bl	8002124 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 801e7bc:	2046      	movs	r0, #70	; 0x46
 801e7be:	4622      	mov	r2, r4
 801e7c0:	4621      	mov	r1, r4
 801e7c2:	f7e3 f8e5 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 801e7c6:	2046      	movs	r0, #70	; 0x46
 801e7c8:	f7e3 f916 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 801e7cc:	b006      	add	sp, #24
 801e7ce:	bd10      	pop	{r4, pc}
 801e7d0:	40008000 	.word	0x40008000
 801e7d4:	48000800 	.word	0x48000800

0801e7d8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 801e7d8:	b508      	push	{r3, lr}

  if(huart->Instance==LPUART1)
 801e7da:	6802      	ldr	r2, [r0, #0]
 801e7dc:	4b08      	ldr	r3, [pc, #32]	; (801e800 <HAL_UART_MspDeInit+0x28>)
 801e7de:	429a      	cmp	r2, r3
 801e7e0:	d10d      	bne.n	801e7fe <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801e7e2:	4a08      	ldr	r2, [pc, #32]	; (801e804 <HAL_UART_MspDeInit+0x2c>)

    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801e7e4:	4808      	ldr	r0, [pc, #32]	; (801e808 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801e7e6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801e7e8:	f023 0301 	bic.w	r3, r3, #1
 801e7ec:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801e7ee:	2103      	movs	r1, #3
 801e7f0:	f7e3 fd70 	bl	80022d4 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 801e7f4:	2046      	movs	r0, #70	; 0x46
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 801e7f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 801e7fa:	f7e3 b909 	b.w	8001a10 <HAL_NVIC_DisableIRQ>
 801e7fe:	bd08      	pop	{r3, pc}
 801e800:	40008000 	.word	0x40008000
 801e804:	40021000 	.word	0x40021000
 801e808:	48000800 	.word	0x48000800

0801e80c <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801e80c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801e80e:	6802      	ldr	r2, [r0, #0]
 801e810:	4b0e      	ldr	r3, [pc, #56]	; (801e84c <HAL_ADC_MspInit+0x40>)
 801e812:	429a      	cmp	r2, r3
 801e814:	d116      	bne.n	801e844 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801e816:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 801e81a:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e81e:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 801e820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e822:	480b      	ldr	r0, [pc, #44]	; (801e850 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 801e824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e828:	64da      	str	r2, [r3, #76]	; 0x4c
 801e82a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e82c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e830:	9300      	str	r3, [sp, #0]
 801e832:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e834:	2304      	movs	r3, #4
 801e836:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801e838:	230b      	movs	r3, #11
 801e83a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e83c:	2300      	movs	r3, #0
 801e83e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e840:	f7e3 fc70 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801e844:	b007      	add	sp, #28
 801e846:	f85d fb04 	ldr.w	pc, [sp], #4
 801e84a:	bf00      	nop
 801e84c:	50040000 	.word	0x50040000
 801e850:	48000800 	.word	0x48000800

0801e854 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801e854:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 801e856:	6803      	ldr	r3, [r0, #0]
 801e858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 801e85c:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 801e85e:	d112      	bne.n	801e886 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801e860:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801e864:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 801e866:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e868:	f042 0201 	orr.w	r2, r2, #1
 801e86c:	659a      	str	r2, [r3, #88]	; 0x58
 801e86e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801e870:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 801e872:	f003 0301 	and.w	r3, r3, #1
 801e876:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801e878:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 801e87a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801e87c:	f7e3 f888 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801e880:	201c      	movs	r0, #28
 801e882:	f7e3 f8b9 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

	if(htim_base->Instance==TIM7)
 801e886:	6822      	ldr	r2, [r4, #0]
 801e888:	4b20      	ldr	r3, [pc, #128]	; (801e90c <HAL_TIM_Base_MspInit+0xb8>)
 801e88a:	429a      	cmp	r2, r3
 801e88c:	d10d      	bne.n	801e8aa <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 801e88e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801e892:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 801e894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e896:	f042 0220 	orr.w	r2, r2, #32
 801e89a:	659a      	str	r2, [r3, #88]	; 0x58
 801e89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e89e:	f003 0320 	and.w	r3, r3, #32
 801e8a2:	9301      	str	r3, [sp, #4]
 801e8a4:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801e8a6:	f7e3 f8a7 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

	 if(htim_base->Instance==TIM4)
 801e8aa:	6822      	ldr	r2, [r4, #0]
 801e8ac:	4b18      	ldr	r3, [pc, #96]	; (801e910 <HAL_TIM_Base_MspInit+0xbc>)
 801e8ae:	429a      	cmp	r2, r3
 801e8b0:	d112      	bne.n	801e8d8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801e8b2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801e8b6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 801e8b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e8ba:	f042 0204 	orr.w	r2, r2, #4
 801e8be:	659a      	str	r2, [r3, #88]	; 0x58
 801e8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801e8c2:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 801e8c4:	f003 0304 	and.w	r3, r3, #4
 801e8c8:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801e8ca:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 801e8cc:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801e8ce:	f7e3 f85f 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801e8d2:	201e      	movs	r0, #30
 801e8d4:	f7e3 f890 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 801e8d8:	6822      	ldr	r2, [r4, #0]
 801e8da:	4b0e      	ldr	r3, [pc, #56]	; (801e914 <HAL_TIM_Base_MspInit+0xc0>)
 801e8dc:	429a      	cmp	r2, r3
 801e8de:	d112      	bne.n	801e906 <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801e8e0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801e8e4:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 801e8e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e8e8:	f042 0210 	orr.w	r2, r2, #16
 801e8ec:	659a      	str	r2, [r3, #88]	; 0x58
 801e8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e8f0:	f003 0310 	and.w	r3, r3, #16
 801e8f4:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801e8f6:	2200      	movs	r2, #0
 801e8f8:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 801e8fa:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801e8fc:	f7e3 f848 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801e900:	2036      	movs	r0, #54	; 0x36
 801e902:	f7e3 f879 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801e906:	b004      	add	sp, #16
 801e908:	bd10      	pop	{r4, pc}
 801e90a:	bf00      	nop
 801e90c:	40001400 	.word	0x40001400
 801e910:	40000800 	.word	0x40000800
 801e914:	40001000 	.word	0x40001000

0801e918 <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 801e918:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 801e91a:	4b0d      	ldr	r3, [pc, #52]	; (801e950 <HAL_TIM_OC_MspInit+0x38>)
 801e91c:	6802      	ldr	r2, [r0, #0]
 801e91e:	429a      	cmp	r2, r3
 801e920:	d112      	bne.n	801e948 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 801e922:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801e926:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 801e928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e92a:	f042 0208 	orr.w	r2, r2, #8
 801e92e:	659a      	str	r2, [r3, #88]	; 0x58
 801e930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801e932:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 801e934:	f003 0308 	and.w	r3, r3, #8
 801e938:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801e93a:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 801e93c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801e93e:	f7e3 f827 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801e942:	2032      	movs	r0, #50	; 0x32
 801e944:	f7e3 f858 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801e948:	b003      	add	sp, #12
 801e94a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e94e:	bf00      	nop
 801e950:	40000c00 	.word	0x40000c00

0801e954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801e954:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 801e956:	6802      	ldr	r2, [r0, #0]
 801e958:	4b09      	ldr	r3, [pc, #36]	; (801e980 <HAL_TIM_MspPostInit+0x2c>)
 801e95a:	429a      	cmp	r2, r3
 801e95c:	d10c      	bne.n	801e978 <HAL_TIM_MspPostInit+0x24>
  /* USER CODE END TIM5_MspPostInit 0 */

    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801e95e:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e960:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801e962:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e964:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e966:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e96c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e96e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e970:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801e972:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e974:	f7e3 fbd6 	bl	8002124 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
}
 801e978:	b007      	add	sp, #28
 801e97a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e97e:	bf00      	nop
 801e980:	40000c00 	.word	0x40000c00

0801e984 <HAL_DMA2D_MspInit>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 801e984:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 801e986:	4b0d      	ldr	r3, [pc, #52]	; (801e9bc <HAL_DMA2D_MspInit+0x38>)
 801e988:	6802      	ldr	r2, [r0, #0]
 801e98a:	429a      	cmp	r2, r3
 801e98c:	d112      	bne.n	801e9b4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801e98e:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801e992:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801e994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e996:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801e99a:	649a      	str	r2, [r3, #72]	; 0x48
 801e99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801e99e:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801e9a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e9a4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801e9a6:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801e9a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801e9aa:	f7e2 fff1 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801e9ae:	205a      	movs	r0, #90	; 0x5a
 801e9b0:	f7e3 f822 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 801e9b4:	b003      	add	sp, #12
 801e9b6:	f85d fb04 	ldr.w	pc, [sp], #4
 801e9ba:	bf00      	nop
 801e9bc:	4002b000 	.word	0x4002b000

0801e9c0 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801e9c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 801e9c2:	6802      	ldr	r2, [r0, #0]
 801e9c4:	4b17      	ldr	r3, [pc, #92]	; (801ea24 <HAL_I2C_MspInit+0x64>)
 801e9c6:	429a      	cmp	r2, r3
 801e9c8:	d128      	bne.n	801ea1c <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801e9ca:	23c0      	movs	r3, #192	; 0xc0
 801e9cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801e9ce:	2312      	movs	r3, #18
 801e9d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801e9d2:	2301      	movs	r3, #1
 801e9d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e9d6:	2303      	movs	r3, #3
 801e9d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801e9da:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801e9dc:	eb0d 0103 	add.w	r1, sp, r3
 801e9e0:	4811      	ldr	r0, [pc, #68]	; (801ea28 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801e9e2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801e9e4:	f7e3 fb9e 	bl	8002124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801e9e8:	4b10      	ldr	r3, [pc, #64]	; (801ea2c <HAL_I2C_MspInit+0x6c>)
 801e9ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e9ec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801e9f0:	659a      	str	r2, [r3, #88]	; 0x58
 801e9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801e9f4:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 801e9f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801e9fa:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 801e9fc:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801e9fe:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 801ea00:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801ea02:	f7e2 ffc5 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801ea06:	201f      	movs	r0, #31
 801ea08:	f7e2 fff6 	bl	80019f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	2020      	movs	r0, #32
 801ea10:	4611      	mov	r1, r2
 801ea12:	f7e2 ffbd 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 801ea16:	2020      	movs	r0, #32
 801ea18:	f7e2 ffee 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801ea1c:	b007      	add	sp, #28
 801ea1e:	f85d fb04 	ldr.w	pc, [sp], #4
 801ea22:	bf00      	nop
 801ea24:	40005400 	.word	0x40005400
 801ea28:	48000400 	.word	0x48000400
 801ea2c:	40021000 	.word	0x40021000

0801ea30 <NMI_Handler>:
 801ea30:	4770      	bx	lr

0801ea32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801ea32:	e7fe      	b.n	801ea32 <HardFault_Handler>

0801ea34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801ea34:	e7fe      	b.n	801ea34 <MemManage_Handler>

0801ea36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801ea36:	e7fe      	b.n	801ea36 <BusFault_Handler>

0801ea38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801ea38:	e7fe      	b.n	801ea38 <UsageFault_Handler>

0801ea3a <SVC_Handler>:
 801ea3a:	4770      	bx	lr

0801ea3c <DebugMon_Handler>:
 801ea3c:	4770      	bx	lr

0801ea3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801ea3e:	4770      	bx	lr

0801ea40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801ea40:	f7e2 bade 	b.w	8001000 <HAL_IncTick>

0801ea44 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 801ea44:	4801      	ldr	r0, [pc, #4]	; (801ea4c <OTG_FS_IRQHandler+0x8>)
 801ea46:	f7e4 b931 	b.w	8002cac <HAL_PCD_IRQHandler>
 801ea4a:	bf00      	nop
 801ea4c:	20090444 	.word	0x20090444

0801ea50 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 801ea50:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801ea52:	4b0a      	ldr	r3, [pc, #40]	; (801ea7c <_sbrk+0x2c>)
 801ea54:	6819      	ldr	r1, [r3, #0]
{
 801ea56:	4602      	mov	r2, r0
	if (heap_end == 0)
 801ea58:	b909      	cbnz	r1, 801ea5e <_sbrk+0xe>
		heap_end = &end;
 801ea5a:	4909      	ldr	r1, [pc, #36]	; (801ea80 <_sbrk+0x30>)
 801ea5c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 801ea5e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 801ea60:	4669      	mov	r1, sp
 801ea62:	4402      	add	r2, r0
 801ea64:	428a      	cmp	r2, r1
 801ea66:	d906      	bls.n	801ea76 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801ea68:	f000 fa8c 	bl	801ef84 <__errno>
 801ea6c:	230c      	movs	r3, #12
 801ea6e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 801ea70:	f04f 30ff 	mov.w	r0, #4294967295
 801ea74:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 801ea76:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 801ea78:	bd08      	pop	{r3, pc}
 801ea7a:	bf00      	nop
 801ea7c:	2008a860 	.word	0x2008a860
 801ea80:	20090a50 	.word	0x20090a50

0801ea84 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801ea84:	490f      	ldr	r1, [pc, #60]	; (801eac4 <SystemInit+0x40>)
 801ea86:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801ea8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801ea8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801ea92:	4b0d      	ldr	r3, [pc, #52]	; (801eac8 <SystemInit+0x44>)
 801ea94:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801ea96:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 801ea98:	f042 0201 	orr.w	r2, r2, #1
 801ea9c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 801ea9e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801eaa0:	681a      	ldr	r2, [r3, #0]
 801eaa2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801eaa6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801eaaa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801eaac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801eab0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801eab2:	681a      	ldr	r2, [r3, #0]
 801eab4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801eab8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801eaba:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801eabc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801eac0:	608b      	str	r3, [r1, #8]
 801eac2:	4770      	bx	lr
 801eac4:	e000ed00 	.word	0xe000ed00
 801eac8:	40021000 	.word	0x40021000

0801eacc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801eacc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 801eace:	2200      	movs	r2, #0
 801ead0:	490a      	ldr	r1, [pc, #40]	; (801eafc <MX_USB_DEVICE_Init+0x30>)
 801ead2:	480b      	ldr	r0, [pc, #44]	; (801eb00 <MX_USB_DEVICE_Init+0x34>)
 801ead4:	f7e8 fae5 	bl	80070a2 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 801ead8:	490a      	ldr	r1, [pc, #40]	; (801eb04 <MX_USB_DEVICE_Init+0x38>)
 801eada:	4809      	ldr	r0, [pc, #36]	; (801eb00 <MX_USB_DEVICE_Init+0x34>)
 801eadc:	f7e8 faf6 	bl	80070cc <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 801eae0:	4909      	ldr	r1, [pc, #36]	; (801eb08 <MX_USB_DEVICE_Init+0x3c>)
 801eae2:	4807      	ldr	r0, [pc, #28]	; (801eb00 <MX_USB_DEVICE_Init+0x34>)
 801eae4:	f7e8 fad6 	bl	8007094 <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 801eae8:	4805      	ldr	r0, [pc, #20]	; (801eb00 <MX_USB_DEVICE_Init+0x34>)
 801eaea:	f000 f9ac 	bl	801ee46 <USBD_LL_BatteryCharging>
 801eaee:	b120      	cbz	r0, 801eafa <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 801eaf0:	4803      	ldr	r0, [pc, #12]	; (801eb00 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801eaf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 801eaf6:	f7e8 baf0 	b.w	80070da <USBD_Start>
 801eafa:	bd08      	pop	{r3, pc}
 801eafc:	20000a90 	.word	0x20000a90
 801eb00:	200901a8 	.word	0x200901a8
 801eb04:	20000020 	.word	0x20000020
 801eb08:	20000a80 	.word	0x20000a80

0801eb0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801eb0c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 801eb0e:	6803      	ldr	r3, [r0, #0]
 801eb10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801eb14:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 801eb16:	d133      	bne.n	801eb80 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801eb18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801eb1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801eb1e:	2302      	movs	r3, #2
 801eb20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801eb22:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801eb24:	4c19      	ldr	r4, [pc, #100]	; (801eb8c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801eb26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801eb28:	2303      	movs	r3, #3
 801eb2a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801eb2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801eb2e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801eb30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801eb34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801eb36:	f7e3 faf5 	bl	8002124 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801eb3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801eb3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801eb40:	64e3      	str	r3, [r4, #76]	; 0x4c
 801eb42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801eb44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801eb48:	9301      	str	r3, [sp, #4]
 801eb4a:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801eb4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eb4e:	00db      	lsls	r3, r3, #3
 801eb50:	d418      	bmi.n	801eb84 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801eb52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eb54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eb58:	65a3      	str	r3, [r4, #88]	; 0x58
 801eb5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eb5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801eb60:	9302      	str	r3, [sp, #8]
 801eb62:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 801eb64:	f7e4 fd2e 	bl	80035c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801eb68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eb6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801eb6e:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801eb70:	2200      	movs	r2, #0
 801eb72:	2043      	movs	r0, #67	; 0x43
 801eb74:	4611      	mov	r1, r2
 801eb76:	f7e2 ff0b 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801eb7a:	2043      	movs	r0, #67	; 0x43
 801eb7c:	f7e2 ff3c 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801eb80:	b008      	add	sp, #32
 801eb82:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 801eb84:	f7e4 fd1e 	bl	80035c4 <HAL_PWREx_EnableVddUSB>
 801eb88:	e7f2      	b.n	801eb70 <HAL_PCD_MspInit+0x64>
 801eb8a:	bf00      	nop
 801eb8c:	40021000 	.word	0x40021000

0801eb90 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801eb90:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801eb94:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801eb98:	f7e8 bab6 	b.w	8007108 <USBD_LL_SetupStage>

0801eb9c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801eb9c:	231c      	movs	r3, #28
 801eb9e:	fb03 0301 	mla	r3, r3, r1, r0
 801eba2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801eba6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801ebaa:	f7e8 bada 	b.w	8007162 <USBD_LL_DataOutStage>

0801ebae <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ebae:	231c      	movs	r3, #28
 801ebb0:	fb03 0301 	mla	r3, r3, r1, r0
 801ebb4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ebb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ebba:	f7e8 bb0a 	b.w	80071d2 <USBD_LL_DataInStage>

0801ebbe <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801ebbe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ebc2:	f7e8 bb9b 	b.w	80072fc <USBD_LL_SOF>

0801ebc6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 801ebc6:	b510      	push	{r4, lr}
 801ebc8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ebca:	2101      	movs	r1, #1
 801ebcc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ebd0:	f7e8 fb82 	bl	80072d8 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ebd4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801ebd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ebdc:	f7e8 bb55 	b.w	800728a <USBD_LL_Reset>

0801ebe0 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ebe0:	6802      	ldr	r2, [r0, #0]
 801ebe2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 801ebe6:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ebe8:	f043 0301 	orr.w	r3, r3, #1
{
 801ebec:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ebee:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ebf2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ebf6:	f7e8 fb72 	bl	80072de <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ebfa:	6a23      	ldr	r3, [r4, #32]
 801ebfc:	b123      	cbz	r3, 801ec08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ebfe:	4a03      	ldr	r2, [pc, #12]	; (801ec0c <HAL_PCD_SuspendCallback+0x2c>)
 801ec00:	6913      	ldr	r3, [r2, #16]
 801ec02:	f043 0306 	orr.w	r3, r3, #6
 801ec06:	6113      	str	r3, [r2, #16]
 801ec08:	bd10      	pop	{r4, pc}
 801ec0a:	bf00      	nop
 801ec0c:	e000ed00 	.word	0xe000ed00

0801ec10 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801ec10:	6802      	ldr	r2, [r0, #0]
 801ec12:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801ec16:	f023 0301 	bic.w	r3, r3, #1
{
 801ec1a:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801ec1c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801ec20:	6a03      	ldr	r3, [r0, #32]
{
 801ec22:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 801ec24:	b133      	cbz	r3, 801ec34 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ec26:	4a06      	ldr	r2, [pc, #24]	; (801ec40 <HAL_PCD_ResumeCallback+0x30>)
 801ec28:	6913      	ldr	r3, [r2, #16]
 801ec2a:	f023 0306 	bic.w	r3, r3, #6
 801ec2e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801ec30:	f7fe fa2c 	bl	801d08c <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ec34:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801ec38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ec3c:	f7e8 bb58 	b.w	80072f0 <USBD_LL_Resume>
 801ec40:	e000ed00 	.word	0xe000ed00

0801ec44 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ec44:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ec48:	f7e8 bb66 	b.w	8007318 <USBD_LL_IsoOUTIncomplete>

0801ec4c <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ec4c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ec50:	f7e8 bb60 	b.w	8007314 <USBD_LL_IsoINIncomplete>

0801ec54 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ec54:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ec58:	f7e8 bb60 	b.w	800731c <USBD_LL_DevConnected>

0801ec5c <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ec5c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801ec60:	f7e8 bb5e 	b.w	8007320 <USBD_LL_DevDisconnected>

0801ec64 <USBD_LL_Init>:
{
 801ec64:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 801ec66:	7802      	ldrb	r2, [r0, #0]
 801ec68:	bb4a      	cbnz	r2, 801ecbe <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 801ec6a:	4b16      	ldr	r3, [pc, #88]	; (801ecc4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801ec6c:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801ec6e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801ec72:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801ec76:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ec7a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ec7e:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ec80:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 801ec82:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ec84:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ec86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ec88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ec8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801ec8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ec8e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ec90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ec92:	f7e3 ff78 	bl	8002b86 <HAL_PCD_Init>
 801ec96:	b120      	cbz	r0, 801eca2 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 801ec98:	f240 116b 	movw	r1, #363	; 0x16b
 801ec9c:	480a      	ldr	r0, [pc, #40]	; (801ecc8 <USBD_LL_Init+0x64>)
 801ec9e:	f7ff fbe3 	bl	801e468 <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801eca2:	2180      	movs	r1, #128	; 0x80
 801eca4:	4807      	ldr	r0, [pc, #28]	; (801ecc4 <USBD_LL_Init+0x60>)
 801eca6:	f7e4 fbff 	bl	80034a8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ecaa:	2240      	movs	r2, #64	; 0x40
 801ecac:	2100      	movs	r1, #0
 801ecae:	4805      	ldr	r0, [pc, #20]	; (801ecc4 <USBD_LL_Init+0x60>)
 801ecb0:	f7e4 fbd9 	bl	8003466 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ecb4:	2280      	movs	r2, #128	; 0x80
 801ecb6:	2101      	movs	r1, #1
 801ecb8:	4802      	ldr	r0, [pc, #8]	; (801ecc4 <USBD_LL_Init+0x60>)
 801ecba:	f7e4 fbd4 	bl	8003466 <HAL_PCDEx_SetTxFiFo>
}
 801ecbe:	2000      	movs	r0, #0
 801ecc0:	bd08      	pop	{r3, pc}
 801ecc2:	bf00      	nop
 801ecc4:	20090444 	.word	0x20090444
 801ecc8:	0802e78c 	.word	0x0802e78c

0801eccc <USBD_LL_Start>:
{
 801eccc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 801ecce:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ecd2:	f7e3 ffd5 	bl	8002c80 <HAL_PCD_Start>
 801ecd6:	2803      	cmp	r0, #3
 801ecd8:	bf9a      	itte	ls
 801ecda:	4b02      	ldrls	r3, [pc, #8]	; (801ece4 <USBD_LL_Start+0x18>)
 801ecdc:	5c18      	ldrbls	r0, [r3, r0]
 801ecde:	2002      	movhi	r0, #2
}
 801ece0:	bd08      	pop	{r3, pc}
 801ece2:	bf00      	nop
 801ece4:	0802e788 	.word	0x0802e788

0801ece8 <USBD_LL_OpenEP>:
{
 801ece8:	b510      	push	{r4, lr}
 801ecea:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ecec:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ecf0:	4613      	mov	r3, r2
 801ecf2:	4622      	mov	r2, r4
 801ecf4:	f7e4 fab4 	bl	8003260 <HAL_PCD_EP_Open>
 801ecf8:	2803      	cmp	r0, #3
 801ecfa:	bf9a      	itte	ls
 801ecfc:	4b01      	ldrls	r3, [pc, #4]	; (801ed04 <USBD_LL_OpenEP+0x1c>)
 801ecfe:	5c18      	ldrbls	r0, [r3, r0]
 801ed00:	2002      	movhi	r0, #2
}
 801ed02:	bd10      	pop	{r4, pc}
 801ed04:	0802e788 	.word	0x0802e788

0801ed08 <USBD_LL_CloseEP>:
{
 801ed08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ed0a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ed0e:	f7e4 fadc 	bl	80032ca <HAL_PCD_EP_Close>
 801ed12:	2803      	cmp	r0, #3
 801ed14:	bf9a      	itte	ls
 801ed16:	4b02      	ldrls	r3, [pc, #8]	; (801ed20 <USBD_LL_CloseEP+0x18>)
 801ed18:	5c18      	ldrbls	r0, [r3, r0]
 801ed1a:	2002      	movhi	r0, #2
}
 801ed1c:	bd08      	pop	{r3, pc}
 801ed1e:	bf00      	nop
 801ed20:	0802e788 	.word	0x0802e788

0801ed24 <USBD_LL_StallEP>:
{
 801ed24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ed26:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ed2a:	f7e4 fb31 	bl	8003390 <HAL_PCD_EP_SetStall>
 801ed2e:	2803      	cmp	r0, #3
 801ed30:	bf9a      	itte	ls
 801ed32:	4b02      	ldrls	r3, [pc, #8]	; (801ed3c <USBD_LL_StallEP+0x18>)
 801ed34:	5c18      	ldrbls	r0, [r3, r0]
 801ed36:	2002      	movhi	r0, #2
}
 801ed38:	bd08      	pop	{r3, pc}
 801ed3a:	bf00      	nop
 801ed3c:	0802e788 	.word	0x0802e788

0801ed40 <USBD_LL_ClearStallEP>:
{
 801ed40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801ed42:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ed46:	f7e4 fb5c 	bl	8003402 <HAL_PCD_EP_ClrStall>
 801ed4a:	2803      	cmp	r0, #3
 801ed4c:	bf9a      	itte	ls
 801ed4e:	4b02      	ldrls	r3, [pc, #8]	; (801ed58 <USBD_LL_ClearStallEP+0x18>)
 801ed50:	5c18      	ldrbls	r0, [r3, r0]
 801ed52:	2002      	movhi	r0, #2
}
 801ed54:	bd08      	pop	{r3, pc}
 801ed56:	bf00      	nop
 801ed58:	0802e788 	.word	0x0802e788

0801ed5c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 801ed5c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ed60:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801ed64:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801ed68:	bf1b      	ittet	ne
 801ed6a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 801ed6e:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801ed72:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801ed76:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801ed7a:	bf08      	it	eq
 801ed7c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 801ed80:	4770      	bx	lr
	...

0801ed84 <USBD_LL_SetUSBAddress>:
{
 801ed84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ed86:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ed8a:	f7e4 fa55 	bl	8003238 <HAL_PCD_SetAddress>
 801ed8e:	2803      	cmp	r0, #3
 801ed90:	bf9a      	itte	ls
 801ed92:	4b02      	ldrls	r3, [pc, #8]	; (801ed9c <USBD_LL_SetUSBAddress+0x18>)
 801ed94:	5c18      	ldrbls	r0, [r3, r0]
 801ed96:	2002      	movhi	r0, #2
}
 801ed98:	bd08      	pop	{r3, pc}
 801ed9a:	bf00      	nop
 801ed9c:	0802e788 	.word	0x0802e788

0801eda0 <USBD_LL_Transmit>:
{
 801eda0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801eda2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801eda6:	f7e4 fad8 	bl	800335a <HAL_PCD_EP_Transmit>
 801edaa:	2803      	cmp	r0, #3
 801edac:	bf9a      	itte	ls
 801edae:	4b02      	ldrls	r3, [pc, #8]	; (801edb8 <USBD_LL_Transmit+0x18>)
 801edb0:	5c18      	ldrbls	r0, [r3, r0]
 801edb2:	2002      	movhi	r0, #2
}
 801edb4:	bd08      	pop	{r3, pc}
 801edb6:	bf00      	nop
 801edb8:	0802e788 	.word	0x0802e788

0801edbc <USBD_LL_PrepareReceive>:
{
 801edbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801edbe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801edc2:	f7e4 faac 	bl	800331e <HAL_PCD_EP_Receive>
 801edc6:	2803      	cmp	r0, #3
 801edc8:	bf9a      	itte	ls
 801edca:	4b02      	ldrls	r3, [pc, #8]	; (801edd4 <USBD_LL_PrepareReceive+0x18>)
 801edcc:	5c18      	ldrbls	r0, [r3, r0]
 801edce:	2002      	movhi	r0, #2
}
 801edd0:	bd08      	pop	{r3, pc}
 801edd2:	bf00      	nop
 801edd4:	0802e788 	.word	0x0802e788

0801edd8 <HAL_PCDEx_LPM_Callback>:
{
 801edd8:	b510      	push	{r4, lr}
 801edda:	4604      	mov	r4, r0
  switch (msg)
 801eddc:	b111      	cbz	r1, 801ede4 <HAL_PCDEx_LPM_Callback+0xc>
 801edde:	2901      	cmp	r1, #1
 801ede0:	d016      	beq.n	801ee10 <HAL_PCDEx_LPM_Callback+0x38>
 801ede2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801ede4:	6a03      	ldr	r3, [r0, #32]
 801ede6:	b133      	cbz	r3, 801edf6 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 801ede8:	f7fe f950 	bl	801d08c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801edec:	4a12      	ldr	r2, [pc, #72]	; (801ee38 <HAL_PCDEx_LPM_Callback+0x60>)
 801edee:	6913      	ldr	r3, [r2, #16]
 801edf0:	f023 0306 	bic.w	r3, r3, #6
 801edf4:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801edf6:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801edf8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801edfc:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801ee00:	f023 0301 	bic.w	r3, r3, #1
 801ee04:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 801ee08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 801ee0c:	f7e8 ba70 	b.w	80072f0 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ee10:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801ee12:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ee16:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801ee1a:	f043 0301 	orr.w	r3, r3, #1
 801ee1e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801ee22:	f7e8 fa5c 	bl	80072de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801ee26:	6a23      	ldr	r3, [r4, #32]
 801ee28:	b123      	cbz	r3, 801ee34 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ee2a:	4a03      	ldr	r2, [pc, #12]	; (801ee38 <HAL_PCDEx_LPM_Callback+0x60>)
 801ee2c:	6913      	ldr	r3, [r2, #16]
 801ee2e:	f043 0306 	orr.w	r3, r3, #6
 801ee32:	6113      	str	r3, [r2, #16]
 801ee34:	bd10      	pop	{r4, pc}
 801ee36:	bf00      	nop
 801ee38:	e000ed00 	.word	0xe000ed00

0801ee3c <USBD_static_malloc>:
}
 801ee3c:	4800      	ldr	r0, [pc, #0]	; (801ee40 <USBD_static_malloc+0x4>)
 801ee3e:	4770      	bx	lr
 801ee40:	2008a864 	.word	0x2008a864

0801ee44 <USBD_static_free>:
{
 801ee44:	4770      	bx	lr

0801ee46 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 801ee46:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801ee4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee4c:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 801ee4e:	bf14      	ite	ne
 801ee50:	2002      	movne	r0, #2
 801ee52:	2000      	moveq	r0, #0
 801ee54:	4770      	bx	lr

0801ee56 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 801ee56:	2000      	movs	r0, #0
 801ee58:	4770      	bx	lr
	...

0801ee5c <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 801ee5c:	4b05      	ldr	r3, [pc, #20]	; (801ee74 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 801ee5e:	4a06      	ldr	r2, [pc, #24]	; (801ee78 <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 801ee60:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 801ee64:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 801ee66:	5cc1      	ldrb	r1, [r0, r3]
 801ee68:	5499      	strb	r1, [r3, r2]
 801ee6a:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 801ee6c:	2b0c      	cmp	r3, #12
 801ee6e:	d1fa      	bne.n	801ee66 <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 801ee70:	2000      	movs	r0, #0
 801ee72:	4770      	bx	lr
 801ee74:	200901a8 	.word	0x200901a8
 801ee78:	2008a7fc 	.word	0x2008a7fc

0801ee7c <CUSTOM_HID_Init_FS>:
 801ee7c:	2000      	movs	r0, #0
 801ee7e:	4770      	bx	lr

0801ee80 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 801ee80:	2312      	movs	r3, #18
 801ee82:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 801ee84:	4800      	ldr	r0, [pc, #0]	; (801ee88 <USBD_FS_DeviceDescriptor+0x8>)
 801ee86:	4770      	bx	lr
 801ee88:	20000abc 	.word	0x20000abc

0801ee8c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 801ee8c:	2304      	movs	r3, #4
 801ee8e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 801ee90:	4800      	ldr	r0, [pc, #0]	; (801ee94 <USBD_FS_LangIDStrDescriptor+0x8>)
 801ee92:	4770      	bx	lr
 801ee94:	20000ad0 	.word	0x20000ad0

0801ee98 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 801ee98:	230c      	movs	r3, #12
 801ee9a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801ee9c:	4800      	ldr	r0, [pc, #0]	; (801eea0 <USBD_FS_USR_BOSDescriptor+0x8>)
 801ee9e:	4770      	bx	lr
 801eea0:	20000ab0 	.word	0x20000ab0

0801eea4 <USBD_FS_ManufacturerStrDescriptor>:
{
 801eea4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801eea6:	4c04      	ldr	r4, [pc, #16]	; (801eeb8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801eea8:	4804      	ldr	r0, [pc, #16]	; (801eebc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801eeaa:	460a      	mov	r2, r1
 801eeac:	4621      	mov	r1, r4
 801eeae:	f7e8 fc43 	bl	8007738 <USBD_GetString>
}
 801eeb2:	4620      	mov	r0, r4
 801eeb4:	bd10      	pop	{r4, pc}
 801eeb6:	bf00      	nop
 801eeb8:	2009084c 	.word	0x2009084c
 801eebc:	0802e7c6 	.word	0x0802e7c6

0801eec0 <USBD_FS_ProductStrDescriptor>:
{
 801eec0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801eec2:	4c04      	ldr	r4, [pc, #16]	; (801eed4 <USBD_FS_ProductStrDescriptor+0x14>)
 801eec4:	4804      	ldr	r0, [pc, #16]	; (801eed8 <USBD_FS_ProductStrDescriptor+0x18>)
 801eec6:	460a      	mov	r2, r1
 801eec8:	4621      	mov	r1, r4
 801eeca:	f7e8 fc35 	bl	8007738 <USBD_GetString>
}
 801eece:	4620      	mov	r0, r4
 801eed0:	bd10      	pop	{r4, pc}
 801eed2:	bf00      	nop
 801eed4:	2009084c 	.word	0x2009084c
 801eed8:	0802e7cd 	.word	0x0802e7cd

0801eedc <USBD_FS_SerialStrDescriptor>:
{
 801eedc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801eede:	4c04      	ldr	r4, [pc, #16]	; (801eef0 <USBD_FS_SerialStrDescriptor+0x14>)
 801eee0:	4804      	ldr	r0, [pc, #16]	; (801eef4 <USBD_FS_SerialStrDescriptor+0x18>)
 801eee2:	460a      	mov	r2, r1
 801eee4:	4621      	mov	r1, r4
 801eee6:	f7e8 fc27 	bl	8007738 <USBD_GetString>
}
 801eeea:	4620      	mov	r0, r4
 801eeec:	bd10      	pop	{r4, pc}
 801eeee:	bf00      	nop
 801eef0:	2009084c 	.word	0x2009084c
 801eef4:	0802e7eb 	.word	0x0802e7eb

0801eef8 <USBD_FS_ConfigStrDescriptor>:
{
 801eef8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801eefa:	4c04      	ldr	r4, [pc, #16]	; (801ef0c <USBD_FS_ConfigStrDescriptor+0x14>)
 801eefc:	4804      	ldr	r0, [pc, #16]	; (801ef10 <USBD_FS_ConfigStrDescriptor+0x18>)
 801eefe:	460a      	mov	r2, r1
 801ef00:	4621      	mov	r1, r4
 801ef02:	f7e8 fc19 	bl	8007738 <USBD_GetString>
}
 801ef06:	4620      	mov	r0, r4
 801ef08:	bd10      	pop	{r4, pc}
 801ef0a:	bf00      	nop
 801ef0c:	2009084c 	.word	0x2009084c
 801ef10:	0802e79f 	.word	0x0802e79f

0801ef14 <USBD_FS_InterfaceStrDescriptor>:
{
 801ef14:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ef16:	4c04      	ldr	r4, [pc, #16]	; (801ef28 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801ef18:	4804      	ldr	r0, [pc, #16]	; (801ef2c <USBD_FS_InterfaceStrDescriptor+0x18>)
 801ef1a:	460a      	mov	r2, r1
 801ef1c:	4621      	mov	r1, r4
 801ef1e:	f7e8 fc0b 	bl	8007738 <USBD_GetString>
}
 801ef22:	4620      	mov	r0, r4
 801ef24:	bd10      	pop	{r4, pc}
 801ef26:	bf00      	nop
 801ef28:	2009084c 	.word	0x2009084c
 801ef2c:	0802e7b1 	.word	0x0802e7b1

0801ef30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801ef30:	f8df d034 	ldr.w	sp, [pc, #52]	; 801ef68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801ef34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801ef36:	e003      	b.n	801ef40 <LoopCopyDataInit>

0801ef38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801ef38:	4b0c      	ldr	r3, [pc, #48]	; (801ef6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801ef3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801ef3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801ef3e:	3104      	adds	r1, #4

0801ef40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801ef40:	480b      	ldr	r0, [pc, #44]	; (801ef70 <LoopForever+0xa>)
	ldr	r3, =_edata
 801ef42:	4b0c      	ldr	r3, [pc, #48]	; (801ef74 <LoopForever+0xe>)
	adds	r2, r0, r1
 801ef44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801ef46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801ef48:	d3f6      	bcc.n	801ef38 <CopyDataInit>
	ldr	r2, =_sbss
 801ef4a:	4a0b      	ldr	r2, [pc, #44]	; (801ef78 <LoopForever+0x12>)
	b	LoopFillZerobss
 801ef4c:	e002      	b.n	801ef54 <LoopFillZerobss>

0801ef4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801ef4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801ef50:	f842 3b04 	str.w	r3, [r2], #4

0801ef54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801ef54:	4b09      	ldr	r3, [pc, #36]	; (801ef7c <LoopForever+0x16>)
	cmp	r2, r3
 801ef56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801ef58:	d3f9      	bcc.n	801ef4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801ef5a:	f7ff fd93 	bl	801ea84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801ef5e:	f000 f817 	bl	801ef90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801ef62:	f7fe f901 	bl	801d168 <main>

0801ef66 <LoopForever>:

LoopForever:
    b LoopForever
 801ef66:	e7fe      	b.n	801ef66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801ef68:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 801ef6c:	0802e8c8 	.word	0x0802e8c8
	ldr	r0, =_sdata
 801ef70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801ef74:	20000b3c 	.word	0x20000b3c
	ldr	r2, =_sbss
 801ef78:	20000b40 	.word	0x20000b40
	ldr	r3, = _ebss
 801ef7c:	20090a50 	.word	0x20090a50

0801ef80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801ef80:	e7fe      	b.n	801ef80 <ADC1_IRQHandler>
	...

0801ef84 <__errno>:
 801ef84:	4b01      	ldr	r3, [pc, #4]	; (801ef8c <__errno+0x8>)
 801ef86:	6818      	ldr	r0, [r3, #0]
 801ef88:	4770      	bx	lr
 801ef8a:	bf00      	nop
 801ef8c:	20000ad4 	.word	0x20000ad4

0801ef90 <__libc_init_array>:
 801ef90:	b570      	push	{r4, r5, r6, lr}
 801ef92:	4e0d      	ldr	r6, [pc, #52]	; (801efc8 <__libc_init_array+0x38>)
 801ef94:	4c0d      	ldr	r4, [pc, #52]	; (801efcc <__libc_init_array+0x3c>)
 801ef96:	1ba4      	subs	r4, r4, r6
 801ef98:	10a4      	asrs	r4, r4, #2
 801ef9a:	2500      	movs	r5, #0
 801ef9c:	42a5      	cmp	r5, r4
 801ef9e:	d109      	bne.n	801efb4 <__libc_init_array+0x24>
 801efa0:	4e0b      	ldr	r6, [pc, #44]	; (801efd0 <__libc_init_array+0x40>)
 801efa2:	4c0c      	ldr	r4, [pc, #48]	; (801efd4 <__libc_init_array+0x44>)
 801efa4:	f002 fab0 	bl	8021508 <_init>
 801efa8:	1ba4      	subs	r4, r4, r6
 801efaa:	10a4      	asrs	r4, r4, #2
 801efac:	2500      	movs	r5, #0
 801efae:	42a5      	cmp	r5, r4
 801efb0:	d105      	bne.n	801efbe <__libc_init_array+0x2e>
 801efb2:	bd70      	pop	{r4, r5, r6, pc}
 801efb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801efb8:	4798      	blx	r3
 801efba:	3501      	adds	r5, #1
 801efbc:	e7ee      	b.n	801ef9c <__libc_init_array+0xc>
 801efbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801efc2:	4798      	blx	r3
 801efc4:	3501      	adds	r5, #1
 801efc6:	e7f2      	b.n	801efae <__libc_init_array+0x1e>
 801efc8:	0802e8c0 	.word	0x0802e8c0
 801efcc:	0802e8c0 	.word	0x0802e8c0
 801efd0:	0802e8c0 	.word	0x0802e8c0
 801efd4:	0802e8c4 	.word	0x0802e8c4

0801efd8 <memcpy>:
 801efd8:	b510      	push	{r4, lr}
 801efda:	1e43      	subs	r3, r0, #1
 801efdc:	440a      	add	r2, r1
 801efde:	4291      	cmp	r1, r2
 801efe0:	d100      	bne.n	801efe4 <memcpy+0xc>
 801efe2:	bd10      	pop	{r4, pc}
 801efe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801efe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801efec:	e7f7      	b.n	801efde <memcpy+0x6>

0801efee <memset>:
 801efee:	4402      	add	r2, r0
 801eff0:	4603      	mov	r3, r0
 801eff2:	4293      	cmp	r3, r2
 801eff4:	d100      	bne.n	801eff8 <memset+0xa>
 801eff6:	4770      	bx	lr
 801eff8:	f803 1b01 	strb.w	r1, [r3], #1
 801effc:	e7f9      	b.n	801eff2 <memset+0x4>
	...

0801f000 <siprintf>:
 801f000:	b40e      	push	{r1, r2, r3}
 801f002:	b500      	push	{lr}
 801f004:	b09c      	sub	sp, #112	; 0x70
 801f006:	f44f 7102 	mov.w	r1, #520	; 0x208
 801f00a:	ab1d      	add	r3, sp, #116	; 0x74
 801f00c:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f010:	9002      	str	r0, [sp, #8]
 801f012:	9006      	str	r0, [sp, #24]
 801f014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f018:	480a      	ldr	r0, [pc, #40]	; (801f044 <siprintf+0x44>)
 801f01a:	9104      	str	r1, [sp, #16]
 801f01c:	9107      	str	r1, [sp, #28]
 801f01e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f022:	f853 2b04 	ldr.w	r2, [r3], #4
 801f026:	f8ad 1016 	strh.w	r1, [sp, #22]
 801f02a:	6800      	ldr	r0, [r0, #0]
 801f02c:	9301      	str	r3, [sp, #4]
 801f02e:	a902      	add	r1, sp, #8
 801f030:	f000 f87c 	bl	801f12c <_svfiprintf_r>
 801f034:	9b02      	ldr	r3, [sp, #8]
 801f036:	2200      	movs	r2, #0
 801f038:	701a      	strb	r2, [r3, #0]
 801f03a:	b01c      	add	sp, #112	; 0x70
 801f03c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f040:	b003      	add	sp, #12
 801f042:	4770      	bx	lr
 801f044:	20000ad4 	.word	0x20000ad4

0801f048 <strcat>:
 801f048:	b510      	push	{r4, lr}
 801f04a:	4602      	mov	r2, r0
 801f04c:	4613      	mov	r3, r2
 801f04e:	3201      	adds	r2, #1
 801f050:	781c      	ldrb	r4, [r3, #0]
 801f052:	2c00      	cmp	r4, #0
 801f054:	d1fa      	bne.n	801f04c <strcat+0x4>
 801f056:	3b01      	subs	r3, #1
 801f058:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f05c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f060:	2a00      	cmp	r2, #0
 801f062:	d1f9      	bne.n	801f058 <strcat+0x10>
 801f064:	bd10      	pop	{r4, pc}

0801f066 <strcpy>:
 801f066:	4603      	mov	r3, r0
 801f068:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f06c:	f803 2b01 	strb.w	r2, [r3], #1
 801f070:	2a00      	cmp	r2, #0
 801f072:	d1f9      	bne.n	801f068 <strcpy+0x2>
 801f074:	4770      	bx	lr

0801f076 <__ssputs_r>:
 801f076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f07a:	688e      	ldr	r6, [r1, #8]
 801f07c:	429e      	cmp	r6, r3
 801f07e:	4682      	mov	sl, r0
 801f080:	460c      	mov	r4, r1
 801f082:	4691      	mov	r9, r2
 801f084:	4698      	mov	r8, r3
 801f086:	d835      	bhi.n	801f0f4 <__ssputs_r+0x7e>
 801f088:	898a      	ldrh	r2, [r1, #12]
 801f08a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f08e:	d031      	beq.n	801f0f4 <__ssputs_r+0x7e>
 801f090:	6825      	ldr	r5, [r4, #0]
 801f092:	6909      	ldr	r1, [r1, #16]
 801f094:	1a6f      	subs	r7, r5, r1
 801f096:	6965      	ldr	r5, [r4, #20]
 801f098:	2302      	movs	r3, #2
 801f09a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f09e:	fb95 f5f3 	sdiv	r5, r5, r3
 801f0a2:	f108 0301 	add.w	r3, r8, #1
 801f0a6:	443b      	add	r3, r7
 801f0a8:	429d      	cmp	r5, r3
 801f0aa:	bf38      	it	cc
 801f0ac:	461d      	movcc	r5, r3
 801f0ae:	0553      	lsls	r3, r2, #21
 801f0b0:	d531      	bpl.n	801f116 <__ssputs_r+0xa0>
 801f0b2:	4629      	mov	r1, r5
 801f0b4:	f000 fb2c 	bl	801f710 <_malloc_r>
 801f0b8:	4606      	mov	r6, r0
 801f0ba:	b950      	cbnz	r0, 801f0d2 <__ssputs_r+0x5c>
 801f0bc:	230c      	movs	r3, #12
 801f0be:	f8ca 3000 	str.w	r3, [sl]
 801f0c2:	89a3      	ldrh	r3, [r4, #12]
 801f0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0c8:	81a3      	strh	r3, [r4, #12]
 801f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 801f0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0d2:	463a      	mov	r2, r7
 801f0d4:	6921      	ldr	r1, [r4, #16]
 801f0d6:	f7ff ff7f 	bl	801efd8 <memcpy>
 801f0da:	89a3      	ldrh	r3, [r4, #12]
 801f0dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f0e4:	81a3      	strh	r3, [r4, #12]
 801f0e6:	6126      	str	r6, [r4, #16]
 801f0e8:	6165      	str	r5, [r4, #20]
 801f0ea:	443e      	add	r6, r7
 801f0ec:	1bed      	subs	r5, r5, r7
 801f0ee:	6026      	str	r6, [r4, #0]
 801f0f0:	60a5      	str	r5, [r4, #8]
 801f0f2:	4646      	mov	r6, r8
 801f0f4:	4546      	cmp	r6, r8
 801f0f6:	bf28      	it	cs
 801f0f8:	4646      	movcs	r6, r8
 801f0fa:	4632      	mov	r2, r6
 801f0fc:	4649      	mov	r1, r9
 801f0fe:	6820      	ldr	r0, [r4, #0]
 801f100:	f000 fa9e 	bl	801f640 <memmove>
 801f104:	68a3      	ldr	r3, [r4, #8]
 801f106:	1b9b      	subs	r3, r3, r6
 801f108:	60a3      	str	r3, [r4, #8]
 801f10a:	6823      	ldr	r3, [r4, #0]
 801f10c:	441e      	add	r6, r3
 801f10e:	6026      	str	r6, [r4, #0]
 801f110:	2000      	movs	r0, #0
 801f112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f116:	462a      	mov	r2, r5
 801f118:	f000 fb58 	bl	801f7cc <_realloc_r>
 801f11c:	4606      	mov	r6, r0
 801f11e:	2800      	cmp	r0, #0
 801f120:	d1e1      	bne.n	801f0e6 <__ssputs_r+0x70>
 801f122:	6921      	ldr	r1, [r4, #16]
 801f124:	4650      	mov	r0, sl
 801f126:	f000 faa5 	bl	801f674 <_free_r>
 801f12a:	e7c7      	b.n	801f0bc <__ssputs_r+0x46>

0801f12c <_svfiprintf_r>:
 801f12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f130:	b09d      	sub	sp, #116	; 0x74
 801f132:	4680      	mov	r8, r0
 801f134:	9303      	str	r3, [sp, #12]
 801f136:	898b      	ldrh	r3, [r1, #12]
 801f138:	061c      	lsls	r4, r3, #24
 801f13a:	460d      	mov	r5, r1
 801f13c:	4616      	mov	r6, r2
 801f13e:	d50f      	bpl.n	801f160 <_svfiprintf_r+0x34>
 801f140:	690b      	ldr	r3, [r1, #16]
 801f142:	b96b      	cbnz	r3, 801f160 <_svfiprintf_r+0x34>
 801f144:	2140      	movs	r1, #64	; 0x40
 801f146:	f000 fae3 	bl	801f710 <_malloc_r>
 801f14a:	6028      	str	r0, [r5, #0]
 801f14c:	6128      	str	r0, [r5, #16]
 801f14e:	b928      	cbnz	r0, 801f15c <_svfiprintf_r+0x30>
 801f150:	230c      	movs	r3, #12
 801f152:	f8c8 3000 	str.w	r3, [r8]
 801f156:	f04f 30ff 	mov.w	r0, #4294967295
 801f15a:	e0c5      	b.n	801f2e8 <_svfiprintf_r+0x1bc>
 801f15c:	2340      	movs	r3, #64	; 0x40
 801f15e:	616b      	str	r3, [r5, #20]
 801f160:	2300      	movs	r3, #0
 801f162:	9309      	str	r3, [sp, #36]	; 0x24
 801f164:	2320      	movs	r3, #32
 801f166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f16a:	2330      	movs	r3, #48	; 0x30
 801f16c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f170:	f04f 0b01 	mov.w	fp, #1
 801f174:	4637      	mov	r7, r6
 801f176:	463c      	mov	r4, r7
 801f178:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	d13c      	bne.n	801f1fa <_svfiprintf_r+0xce>
 801f180:	ebb7 0a06 	subs.w	sl, r7, r6
 801f184:	d00b      	beq.n	801f19e <_svfiprintf_r+0x72>
 801f186:	4653      	mov	r3, sl
 801f188:	4632      	mov	r2, r6
 801f18a:	4629      	mov	r1, r5
 801f18c:	4640      	mov	r0, r8
 801f18e:	f7ff ff72 	bl	801f076 <__ssputs_r>
 801f192:	3001      	adds	r0, #1
 801f194:	f000 80a3 	beq.w	801f2de <_svfiprintf_r+0x1b2>
 801f198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f19a:	4453      	add	r3, sl
 801f19c:	9309      	str	r3, [sp, #36]	; 0x24
 801f19e:	783b      	ldrb	r3, [r7, #0]
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	f000 809c 	beq.w	801f2de <_svfiprintf_r+0x1b2>
 801f1a6:	2300      	movs	r3, #0
 801f1a8:	f04f 32ff 	mov.w	r2, #4294967295
 801f1ac:	9304      	str	r3, [sp, #16]
 801f1ae:	9307      	str	r3, [sp, #28]
 801f1b0:	9205      	str	r2, [sp, #20]
 801f1b2:	9306      	str	r3, [sp, #24]
 801f1b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f1b8:	931a      	str	r3, [sp, #104]	; 0x68
 801f1ba:	2205      	movs	r2, #5
 801f1bc:	7821      	ldrb	r1, [r4, #0]
 801f1be:	4850      	ldr	r0, [pc, #320]	; (801f300 <_svfiprintf_r+0x1d4>)
 801f1c0:	f7e1 f81e 	bl	8000200 <memchr>
 801f1c4:	1c67      	adds	r7, r4, #1
 801f1c6:	9b04      	ldr	r3, [sp, #16]
 801f1c8:	b9d8      	cbnz	r0, 801f202 <_svfiprintf_r+0xd6>
 801f1ca:	06d9      	lsls	r1, r3, #27
 801f1cc:	bf44      	itt	mi
 801f1ce:	2220      	movmi	r2, #32
 801f1d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f1d4:	071a      	lsls	r2, r3, #28
 801f1d6:	bf44      	itt	mi
 801f1d8:	222b      	movmi	r2, #43	; 0x2b
 801f1da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f1de:	7822      	ldrb	r2, [r4, #0]
 801f1e0:	2a2a      	cmp	r2, #42	; 0x2a
 801f1e2:	d016      	beq.n	801f212 <_svfiprintf_r+0xe6>
 801f1e4:	9a07      	ldr	r2, [sp, #28]
 801f1e6:	2100      	movs	r1, #0
 801f1e8:	200a      	movs	r0, #10
 801f1ea:	4627      	mov	r7, r4
 801f1ec:	3401      	adds	r4, #1
 801f1ee:	783b      	ldrb	r3, [r7, #0]
 801f1f0:	3b30      	subs	r3, #48	; 0x30
 801f1f2:	2b09      	cmp	r3, #9
 801f1f4:	d951      	bls.n	801f29a <_svfiprintf_r+0x16e>
 801f1f6:	b1c9      	cbz	r1, 801f22c <_svfiprintf_r+0x100>
 801f1f8:	e011      	b.n	801f21e <_svfiprintf_r+0xf2>
 801f1fa:	2b25      	cmp	r3, #37	; 0x25
 801f1fc:	d0c0      	beq.n	801f180 <_svfiprintf_r+0x54>
 801f1fe:	4627      	mov	r7, r4
 801f200:	e7b9      	b.n	801f176 <_svfiprintf_r+0x4a>
 801f202:	4a3f      	ldr	r2, [pc, #252]	; (801f300 <_svfiprintf_r+0x1d4>)
 801f204:	1a80      	subs	r0, r0, r2
 801f206:	fa0b f000 	lsl.w	r0, fp, r0
 801f20a:	4318      	orrs	r0, r3
 801f20c:	9004      	str	r0, [sp, #16]
 801f20e:	463c      	mov	r4, r7
 801f210:	e7d3      	b.n	801f1ba <_svfiprintf_r+0x8e>
 801f212:	9a03      	ldr	r2, [sp, #12]
 801f214:	1d11      	adds	r1, r2, #4
 801f216:	6812      	ldr	r2, [r2, #0]
 801f218:	9103      	str	r1, [sp, #12]
 801f21a:	2a00      	cmp	r2, #0
 801f21c:	db01      	blt.n	801f222 <_svfiprintf_r+0xf6>
 801f21e:	9207      	str	r2, [sp, #28]
 801f220:	e004      	b.n	801f22c <_svfiprintf_r+0x100>
 801f222:	4252      	negs	r2, r2
 801f224:	f043 0302 	orr.w	r3, r3, #2
 801f228:	9207      	str	r2, [sp, #28]
 801f22a:	9304      	str	r3, [sp, #16]
 801f22c:	783b      	ldrb	r3, [r7, #0]
 801f22e:	2b2e      	cmp	r3, #46	; 0x2e
 801f230:	d10e      	bne.n	801f250 <_svfiprintf_r+0x124>
 801f232:	787b      	ldrb	r3, [r7, #1]
 801f234:	2b2a      	cmp	r3, #42	; 0x2a
 801f236:	f107 0101 	add.w	r1, r7, #1
 801f23a:	d132      	bne.n	801f2a2 <_svfiprintf_r+0x176>
 801f23c:	9b03      	ldr	r3, [sp, #12]
 801f23e:	1d1a      	adds	r2, r3, #4
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	9203      	str	r2, [sp, #12]
 801f244:	2b00      	cmp	r3, #0
 801f246:	bfb8      	it	lt
 801f248:	f04f 33ff 	movlt.w	r3, #4294967295
 801f24c:	3702      	adds	r7, #2
 801f24e:	9305      	str	r3, [sp, #20]
 801f250:	4c2c      	ldr	r4, [pc, #176]	; (801f304 <_svfiprintf_r+0x1d8>)
 801f252:	7839      	ldrb	r1, [r7, #0]
 801f254:	2203      	movs	r2, #3
 801f256:	4620      	mov	r0, r4
 801f258:	f7e0 ffd2 	bl	8000200 <memchr>
 801f25c:	b138      	cbz	r0, 801f26e <_svfiprintf_r+0x142>
 801f25e:	2340      	movs	r3, #64	; 0x40
 801f260:	1b00      	subs	r0, r0, r4
 801f262:	fa03 f000 	lsl.w	r0, r3, r0
 801f266:	9b04      	ldr	r3, [sp, #16]
 801f268:	4303      	orrs	r3, r0
 801f26a:	9304      	str	r3, [sp, #16]
 801f26c:	3701      	adds	r7, #1
 801f26e:	7839      	ldrb	r1, [r7, #0]
 801f270:	4825      	ldr	r0, [pc, #148]	; (801f308 <_svfiprintf_r+0x1dc>)
 801f272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f276:	2206      	movs	r2, #6
 801f278:	1c7e      	adds	r6, r7, #1
 801f27a:	f7e0 ffc1 	bl	8000200 <memchr>
 801f27e:	2800      	cmp	r0, #0
 801f280:	d035      	beq.n	801f2ee <_svfiprintf_r+0x1c2>
 801f282:	4b22      	ldr	r3, [pc, #136]	; (801f30c <_svfiprintf_r+0x1e0>)
 801f284:	b9fb      	cbnz	r3, 801f2c6 <_svfiprintf_r+0x19a>
 801f286:	9b03      	ldr	r3, [sp, #12]
 801f288:	3307      	adds	r3, #7
 801f28a:	f023 0307 	bic.w	r3, r3, #7
 801f28e:	3308      	adds	r3, #8
 801f290:	9303      	str	r3, [sp, #12]
 801f292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f294:	444b      	add	r3, r9
 801f296:	9309      	str	r3, [sp, #36]	; 0x24
 801f298:	e76c      	b.n	801f174 <_svfiprintf_r+0x48>
 801f29a:	fb00 3202 	mla	r2, r0, r2, r3
 801f29e:	2101      	movs	r1, #1
 801f2a0:	e7a3      	b.n	801f1ea <_svfiprintf_r+0xbe>
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	9305      	str	r3, [sp, #20]
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	240a      	movs	r4, #10
 801f2aa:	460f      	mov	r7, r1
 801f2ac:	3101      	adds	r1, #1
 801f2ae:	783a      	ldrb	r2, [r7, #0]
 801f2b0:	3a30      	subs	r2, #48	; 0x30
 801f2b2:	2a09      	cmp	r2, #9
 801f2b4:	d903      	bls.n	801f2be <_svfiprintf_r+0x192>
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d0ca      	beq.n	801f250 <_svfiprintf_r+0x124>
 801f2ba:	9005      	str	r0, [sp, #20]
 801f2bc:	e7c8      	b.n	801f250 <_svfiprintf_r+0x124>
 801f2be:	fb04 2000 	mla	r0, r4, r0, r2
 801f2c2:	2301      	movs	r3, #1
 801f2c4:	e7f1      	b.n	801f2aa <_svfiprintf_r+0x17e>
 801f2c6:	ab03      	add	r3, sp, #12
 801f2c8:	9300      	str	r3, [sp, #0]
 801f2ca:	462a      	mov	r2, r5
 801f2cc:	4b10      	ldr	r3, [pc, #64]	; (801f310 <_svfiprintf_r+0x1e4>)
 801f2ce:	a904      	add	r1, sp, #16
 801f2d0:	4640      	mov	r0, r8
 801f2d2:	f3af 8000 	nop.w
 801f2d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f2da:	4681      	mov	r9, r0
 801f2dc:	d1d9      	bne.n	801f292 <_svfiprintf_r+0x166>
 801f2de:	89ab      	ldrh	r3, [r5, #12]
 801f2e0:	065b      	lsls	r3, r3, #25
 801f2e2:	f53f af38 	bmi.w	801f156 <_svfiprintf_r+0x2a>
 801f2e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f2e8:	b01d      	add	sp, #116	; 0x74
 801f2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2ee:	ab03      	add	r3, sp, #12
 801f2f0:	9300      	str	r3, [sp, #0]
 801f2f2:	462a      	mov	r2, r5
 801f2f4:	4b06      	ldr	r3, [pc, #24]	; (801f310 <_svfiprintf_r+0x1e4>)
 801f2f6:	a904      	add	r1, sp, #16
 801f2f8:	4640      	mov	r0, r8
 801f2fa:	f000 f881 	bl	801f400 <_printf_i>
 801f2fe:	e7ea      	b.n	801f2d6 <_svfiprintf_r+0x1aa>
 801f300:	0802e7f8 	.word	0x0802e7f8
 801f304:	0802e7fe 	.word	0x0802e7fe
 801f308:	0802e802 	.word	0x0802e802
 801f30c:	00000000 	.word	0x00000000
 801f310:	0801f077 	.word	0x0801f077

0801f314 <_printf_common>:
 801f314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f318:	4691      	mov	r9, r2
 801f31a:	461f      	mov	r7, r3
 801f31c:	688a      	ldr	r2, [r1, #8]
 801f31e:	690b      	ldr	r3, [r1, #16]
 801f320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f324:	4293      	cmp	r3, r2
 801f326:	bfb8      	it	lt
 801f328:	4613      	movlt	r3, r2
 801f32a:	f8c9 3000 	str.w	r3, [r9]
 801f32e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f332:	4606      	mov	r6, r0
 801f334:	460c      	mov	r4, r1
 801f336:	b112      	cbz	r2, 801f33e <_printf_common+0x2a>
 801f338:	3301      	adds	r3, #1
 801f33a:	f8c9 3000 	str.w	r3, [r9]
 801f33e:	6823      	ldr	r3, [r4, #0]
 801f340:	0699      	lsls	r1, r3, #26
 801f342:	bf42      	ittt	mi
 801f344:	f8d9 3000 	ldrmi.w	r3, [r9]
 801f348:	3302      	addmi	r3, #2
 801f34a:	f8c9 3000 	strmi.w	r3, [r9]
 801f34e:	6825      	ldr	r5, [r4, #0]
 801f350:	f015 0506 	ands.w	r5, r5, #6
 801f354:	d107      	bne.n	801f366 <_printf_common+0x52>
 801f356:	f104 0a19 	add.w	sl, r4, #25
 801f35a:	68e3      	ldr	r3, [r4, #12]
 801f35c:	f8d9 2000 	ldr.w	r2, [r9]
 801f360:	1a9b      	subs	r3, r3, r2
 801f362:	429d      	cmp	r5, r3
 801f364:	db29      	blt.n	801f3ba <_printf_common+0xa6>
 801f366:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801f36a:	6822      	ldr	r2, [r4, #0]
 801f36c:	3300      	adds	r3, #0
 801f36e:	bf18      	it	ne
 801f370:	2301      	movne	r3, #1
 801f372:	0692      	lsls	r2, r2, #26
 801f374:	d42e      	bmi.n	801f3d4 <_printf_common+0xc0>
 801f376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f37a:	4639      	mov	r1, r7
 801f37c:	4630      	mov	r0, r6
 801f37e:	47c0      	blx	r8
 801f380:	3001      	adds	r0, #1
 801f382:	d021      	beq.n	801f3c8 <_printf_common+0xb4>
 801f384:	6823      	ldr	r3, [r4, #0]
 801f386:	68e5      	ldr	r5, [r4, #12]
 801f388:	f8d9 2000 	ldr.w	r2, [r9]
 801f38c:	f003 0306 	and.w	r3, r3, #6
 801f390:	2b04      	cmp	r3, #4
 801f392:	bf08      	it	eq
 801f394:	1aad      	subeq	r5, r5, r2
 801f396:	68a3      	ldr	r3, [r4, #8]
 801f398:	6922      	ldr	r2, [r4, #16]
 801f39a:	bf0c      	ite	eq
 801f39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f3a0:	2500      	movne	r5, #0
 801f3a2:	4293      	cmp	r3, r2
 801f3a4:	bfc4      	itt	gt
 801f3a6:	1a9b      	subgt	r3, r3, r2
 801f3a8:	18ed      	addgt	r5, r5, r3
 801f3aa:	f04f 0900 	mov.w	r9, #0
 801f3ae:	341a      	adds	r4, #26
 801f3b0:	454d      	cmp	r5, r9
 801f3b2:	d11b      	bne.n	801f3ec <_printf_common+0xd8>
 801f3b4:	2000      	movs	r0, #0
 801f3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3ba:	2301      	movs	r3, #1
 801f3bc:	4652      	mov	r2, sl
 801f3be:	4639      	mov	r1, r7
 801f3c0:	4630      	mov	r0, r6
 801f3c2:	47c0      	blx	r8
 801f3c4:	3001      	adds	r0, #1
 801f3c6:	d103      	bne.n	801f3d0 <_printf_common+0xbc>
 801f3c8:	f04f 30ff 	mov.w	r0, #4294967295
 801f3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3d0:	3501      	adds	r5, #1
 801f3d2:	e7c2      	b.n	801f35a <_printf_common+0x46>
 801f3d4:	18e1      	adds	r1, r4, r3
 801f3d6:	1c5a      	adds	r2, r3, #1
 801f3d8:	2030      	movs	r0, #48	; 0x30
 801f3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f3de:	4422      	add	r2, r4
 801f3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f3e8:	3302      	adds	r3, #2
 801f3ea:	e7c4      	b.n	801f376 <_printf_common+0x62>
 801f3ec:	2301      	movs	r3, #1
 801f3ee:	4622      	mov	r2, r4
 801f3f0:	4639      	mov	r1, r7
 801f3f2:	4630      	mov	r0, r6
 801f3f4:	47c0      	blx	r8
 801f3f6:	3001      	adds	r0, #1
 801f3f8:	d0e6      	beq.n	801f3c8 <_printf_common+0xb4>
 801f3fa:	f109 0901 	add.w	r9, r9, #1
 801f3fe:	e7d7      	b.n	801f3b0 <_printf_common+0x9c>

0801f400 <_printf_i>:
 801f400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f404:	4617      	mov	r7, r2
 801f406:	7e0a      	ldrb	r2, [r1, #24]
 801f408:	b085      	sub	sp, #20
 801f40a:	2a6e      	cmp	r2, #110	; 0x6e
 801f40c:	4698      	mov	r8, r3
 801f40e:	4606      	mov	r6, r0
 801f410:	460c      	mov	r4, r1
 801f412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f414:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801f418:	f000 80bc 	beq.w	801f594 <_printf_i+0x194>
 801f41c:	d81a      	bhi.n	801f454 <_printf_i+0x54>
 801f41e:	2a63      	cmp	r2, #99	; 0x63
 801f420:	d02e      	beq.n	801f480 <_printf_i+0x80>
 801f422:	d80a      	bhi.n	801f43a <_printf_i+0x3a>
 801f424:	2a00      	cmp	r2, #0
 801f426:	f000 80c8 	beq.w	801f5ba <_printf_i+0x1ba>
 801f42a:	2a58      	cmp	r2, #88	; 0x58
 801f42c:	f000 808a 	beq.w	801f544 <_printf_i+0x144>
 801f430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f434:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 801f438:	e02a      	b.n	801f490 <_printf_i+0x90>
 801f43a:	2a64      	cmp	r2, #100	; 0x64
 801f43c:	d001      	beq.n	801f442 <_printf_i+0x42>
 801f43e:	2a69      	cmp	r2, #105	; 0x69
 801f440:	d1f6      	bne.n	801f430 <_printf_i+0x30>
 801f442:	6821      	ldr	r1, [r4, #0]
 801f444:	681a      	ldr	r2, [r3, #0]
 801f446:	f011 0f80 	tst.w	r1, #128	; 0x80
 801f44a:	d023      	beq.n	801f494 <_printf_i+0x94>
 801f44c:	1d11      	adds	r1, r2, #4
 801f44e:	6019      	str	r1, [r3, #0]
 801f450:	6813      	ldr	r3, [r2, #0]
 801f452:	e027      	b.n	801f4a4 <_printf_i+0xa4>
 801f454:	2a73      	cmp	r2, #115	; 0x73
 801f456:	f000 80b4 	beq.w	801f5c2 <_printf_i+0x1c2>
 801f45a:	d808      	bhi.n	801f46e <_printf_i+0x6e>
 801f45c:	2a6f      	cmp	r2, #111	; 0x6f
 801f45e:	d02a      	beq.n	801f4b6 <_printf_i+0xb6>
 801f460:	2a70      	cmp	r2, #112	; 0x70
 801f462:	d1e5      	bne.n	801f430 <_printf_i+0x30>
 801f464:	680a      	ldr	r2, [r1, #0]
 801f466:	f042 0220 	orr.w	r2, r2, #32
 801f46a:	600a      	str	r2, [r1, #0]
 801f46c:	e003      	b.n	801f476 <_printf_i+0x76>
 801f46e:	2a75      	cmp	r2, #117	; 0x75
 801f470:	d021      	beq.n	801f4b6 <_printf_i+0xb6>
 801f472:	2a78      	cmp	r2, #120	; 0x78
 801f474:	d1dc      	bne.n	801f430 <_printf_i+0x30>
 801f476:	2278      	movs	r2, #120	; 0x78
 801f478:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801f47c:	496e      	ldr	r1, [pc, #440]	; (801f638 <_printf_i+0x238>)
 801f47e:	e064      	b.n	801f54a <_printf_i+0x14a>
 801f480:	681a      	ldr	r2, [r3, #0]
 801f482:	f101 0542 	add.w	r5, r1, #66	; 0x42
 801f486:	1d11      	adds	r1, r2, #4
 801f488:	6019      	str	r1, [r3, #0]
 801f48a:	6813      	ldr	r3, [r2, #0]
 801f48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f490:	2301      	movs	r3, #1
 801f492:	e0a3      	b.n	801f5dc <_printf_i+0x1dc>
 801f494:	f011 0f40 	tst.w	r1, #64	; 0x40
 801f498:	f102 0104 	add.w	r1, r2, #4
 801f49c:	6019      	str	r1, [r3, #0]
 801f49e:	d0d7      	beq.n	801f450 <_printf_i+0x50>
 801f4a0:	f9b2 3000 	ldrsh.w	r3, [r2]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	da03      	bge.n	801f4b0 <_printf_i+0xb0>
 801f4a8:	222d      	movs	r2, #45	; 0x2d
 801f4aa:	425b      	negs	r3, r3
 801f4ac:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801f4b0:	4962      	ldr	r1, [pc, #392]	; (801f63c <_printf_i+0x23c>)
 801f4b2:	220a      	movs	r2, #10
 801f4b4:	e017      	b.n	801f4e6 <_printf_i+0xe6>
 801f4b6:	6820      	ldr	r0, [r4, #0]
 801f4b8:	6819      	ldr	r1, [r3, #0]
 801f4ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f4be:	d003      	beq.n	801f4c8 <_printf_i+0xc8>
 801f4c0:	1d08      	adds	r0, r1, #4
 801f4c2:	6018      	str	r0, [r3, #0]
 801f4c4:	680b      	ldr	r3, [r1, #0]
 801f4c6:	e006      	b.n	801f4d6 <_printf_i+0xd6>
 801f4c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f4cc:	f101 0004 	add.w	r0, r1, #4
 801f4d0:	6018      	str	r0, [r3, #0]
 801f4d2:	d0f7      	beq.n	801f4c4 <_printf_i+0xc4>
 801f4d4:	880b      	ldrh	r3, [r1, #0]
 801f4d6:	4959      	ldr	r1, [pc, #356]	; (801f63c <_printf_i+0x23c>)
 801f4d8:	2a6f      	cmp	r2, #111	; 0x6f
 801f4da:	bf14      	ite	ne
 801f4dc:	220a      	movne	r2, #10
 801f4de:	2208      	moveq	r2, #8
 801f4e0:	2000      	movs	r0, #0
 801f4e2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801f4e6:	6865      	ldr	r5, [r4, #4]
 801f4e8:	60a5      	str	r5, [r4, #8]
 801f4ea:	2d00      	cmp	r5, #0
 801f4ec:	f2c0 809c 	blt.w	801f628 <_printf_i+0x228>
 801f4f0:	6820      	ldr	r0, [r4, #0]
 801f4f2:	f020 0004 	bic.w	r0, r0, #4
 801f4f6:	6020      	str	r0, [r4, #0]
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d13f      	bne.n	801f57c <_printf_i+0x17c>
 801f4fc:	2d00      	cmp	r5, #0
 801f4fe:	f040 8095 	bne.w	801f62c <_printf_i+0x22c>
 801f502:	4675      	mov	r5, lr
 801f504:	2a08      	cmp	r2, #8
 801f506:	d10b      	bne.n	801f520 <_printf_i+0x120>
 801f508:	6823      	ldr	r3, [r4, #0]
 801f50a:	07da      	lsls	r2, r3, #31
 801f50c:	d508      	bpl.n	801f520 <_printf_i+0x120>
 801f50e:	6923      	ldr	r3, [r4, #16]
 801f510:	6862      	ldr	r2, [r4, #4]
 801f512:	429a      	cmp	r2, r3
 801f514:	bfde      	ittt	le
 801f516:	2330      	movle	r3, #48	; 0x30
 801f518:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f51c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f520:	ebae 0305 	sub.w	r3, lr, r5
 801f524:	6123      	str	r3, [r4, #16]
 801f526:	f8cd 8000 	str.w	r8, [sp]
 801f52a:	463b      	mov	r3, r7
 801f52c:	aa03      	add	r2, sp, #12
 801f52e:	4621      	mov	r1, r4
 801f530:	4630      	mov	r0, r6
 801f532:	f7ff feef 	bl	801f314 <_printf_common>
 801f536:	3001      	adds	r0, #1
 801f538:	d155      	bne.n	801f5e6 <_printf_i+0x1e6>
 801f53a:	f04f 30ff 	mov.w	r0, #4294967295
 801f53e:	b005      	add	sp, #20
 801f540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f544:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801f548:	493c      	ldr	r1, [pc, #240]	; (801f63c <_printf_i+0x23c>)
 801f54a:	6822      	ldr	r2, [r4, #0]
 801f54c:	6818      	ldr	r0, [r3, #0]
 801f54e:	f012 0f80 	tst.w	r2, #128	; 0x80
 801f552:	f100 0504 	add.w	r5, r0, #4
 801f556:	601d      	str	r5, [r3, #0]
 801f558:	d001      	beq.n	801f55e <_printf_i+0x15e>
 801f55a:	6803      	ldr	r3, [r0, #0]
 801f55c:	e002      	b.n	801f564 <_printf_i+0x164>
 801f55e:	0655      	lsls	r5, r2, #25
 801f560:	d5fb      	bpl.n	801f55a <_printf_i+0x15a>
 801f562:	8803      	ldrh	r3, [r0, #0]
 801f564:	07d0      	lsls	r0, r2, #31
 801f566:	bf44      	itt	mi
 801f568:	f042 0220 	orrmi.w	r2, r2, #32
 801f56c:	6022      	strmi	r2, [r4, #0]
 801f56e:	b91b      	cbnz	r3, 801f578 <_printf_i+0x178>
 801f570:	6822      	ldr	r2, [r4, #0]
 801f572:	f022 0220 	bic.w	r2, r2, #32
 801f576:	6022      	str	r2, [r4, #0]
 801f578:	2210      	movs	r2, #16
 801f57a:	e7b1      	b.n	801f4e0 <_printf_i+0xe0>
 801f57c:	4675      	mov	r5, lr
 801f57e:	fbb3 f0f2 	udiv	r0, r3, r2
 801f582:	fb02 3310 	mls	r3, r2, r0, r3
 801f586:	5ccb      	ldrb	r3, [r1, r3]
 801f588:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f58c:	4603      	mov	r3, r0
 801f58e:	2800      	cmp	r0, #0
 801f590:	d1f5      	bne.n	801f57e <_printf_i+0x17e>
 801f592:	e7b7      	b.n	801f504 <_printf_i+0x104>
 801f594:	6808      	ldr	r0, [r1, #0]
 801f596:	681a      	ldr	r2, [r3, #0]
 801f598:	6949      	ldr	r1, [r1, #20]
 801f59a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f59e:	d004      	beq.n	801f5aa <_printf_i+0x1aa>
 801f5a0:	1d10      	adds	r0, r2, #4
 801f5a2:	6018      	str	r0, [r3, #0]
 801f5a4:	6813      	ldr	r3, [r2, #0]
 801f5a6:	6019      	str	r1, [r3, #0]
 801f5a8:	e007      	b.n	801f5ba <_printf_i+0x1ba>
 801f5aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f5ae:	f102 0004 	add.w	r0, r2, #4
 801f5b2:	6018      	str	r0, [r3, #0]
 801f5b4:	6813      	ldr	r3, [r2, #0]
 801f5b6:	d0f6      	beq.n	801f5a6 <_printf_i+0x1a6>
 801f5b8:	8019      	strh	r1, [r3, #0]
 801f5ba:	2300      	movs	r3, #0
 801f5bc:	6123      	str	r3, [r4, #16]
 801f5be:	4675      	mov	r5, lr
 801f5c0:	e7b1      	b.n	801f526 <_printf_i+0x126>
 801f5c2:	681a      	ldr	r2, [r3, #0]
 801f5c4:	1d11      	adds	r1, r2, #4
 801f5c6:	6019      	str	r1, [r3, #0]
 801f5c8:	6815      	ldr	r5, [r2, #0]
 801f5ca:	6862      	ldr	r2, [r4, #4]
 801f5cc:	2100      	movs	r1, #0
 801f5ce:	4628      	mov	r0, r5
 801f5d0:	f7e0 fe16 	bl	8000200 <memchr>
 801f5d4:	b108      	cbz	r0, 801f5da <_printf_i+0x1da>
 801f5d6:	1b40      	subs	r0, r0, r5
 801f5d8:	6060      	str	r0, [r4, #4]
 801f5da:	6863      	ldr	r3, [r4, #4]
 801f5dc:	6123      	str	r3, [r4, #16]
 801f5de:	2300      	movs	r3, #0
 801f5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f5e4:	e79f      	b.n	801f526 <_printf_i+0x126>
 801f5e6:	6923      	ldr	r3, [r4, #16]
 801f5e8:	462a      	mov	r2, r5
 801f5ea:	4639      	mov	r1, r7
 801f5ec:	4630      	mov	r0, r6
 801f5ee:	47c0      	blx	r8
 801f5f0:	3001      	adds	r0, #1
 801f5f2:	d0a2      	beq.n	801f53a <_printf_i+0x13a>
 801f5f4:	6823      	ldr	r3, [r4, #0]
 801f5f6:	079b      	lsls	r3, r3, #30
 801f5f8:	d507      	bpl.n	801f60a <_printf_i+0x20a>
 801f5fa:	2500      	movs	r5, #0
 801f5fc:	f104 0919 	add.w	r9, r4, #25
 801f600:	68e3      	ldr	r3, [r4, #12]
 801f602:	9a03      	ldr	r2, [sp, #12]
 801f604:	1a9b      	subs	r3, r3, r2
 801f606:	429d      	cmp	r5, r3
 801f608:	db05      	blt.n	801f616 <_printf_i+0x216>
 801f60a:	68e0      	ldr	r0, [r4, #12]
 801f60c:	9b03      	ldr	r3, [sp, #12]
 801f60e:	4298      	cmp	r0, r3
 801f610:	bfb8      	it	lt
 801f612:	4618      	movlt	r0, r3
 801f614:	e793      	b.n	801f53e <_printf_i+0x13e>
 801f616:	2301      	movs	r3, #1
 801f618:	464a      	mov	r2, r9
 801f61a:	4639      	mov	r1, r7
 801f61c:	4630      	mov	r0, r6
 801f61e:	47c0      	blx	r8
 801f620:	3001      	adds	r0, #1
 801f622:	d08a      	beq.n	801f53a <_printf_i+0x13a>
 801f624:	3501      	adds	r5, #1
 801f626:	e7eb      	b.n	801f600 <_printf_i+0x200>
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d1a7      	bne.n	801f57c <_printf_i+0x17c>
 801f62c:	780b      	ldrb	r3, [r1, #0]
 801f62e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f632:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f636:	e765      	b.n	801f504 <_printf_i+0x104>
 801f638:	0802e81a 	.word	0x0802e81a
 801f63c:	0802e809 	.word	0x0802e809

0801f640 <memmove>:
 801f640:	4288      	cmp	r0, r1
 801f642:	b510      	push	{r4, lr}
 801f644:	eb01 0302 	add.w	r3, r1, r2
 801f648:	d803      	bhi.n	801f652 <memmove+0x12>
 801f64a:	1e42      	subs	r2, r0, #1
 801f64c:	4299      	cmp	r1, r3
 801f64e:	d10c      	bne.n	801f66a <memmove+0x2a>
 801f650:	bd10      	pop	{r4, pc}
 801f652:	4298      	cmp	r0, r3
 801f654:	d2f9      	bcs.n	801f64a <memmove+0xa>
 801f656:	1881      	adds	r1, r0, r2
 801f658:	1ad2      	subs	r2, r2, r3
 801f65a:	42d3      	cmn	r3, r2
 801f65c:	d100      	bne.n	801f660 <memmove+0x20>
 801f65e:	bd10      	pop	{r4, pc}
 801f660:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f664:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801f668:	e7f7      	b.n	801f65a <memmove+0x1a>
 801f66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f66e:	f802 4f01 	strb.w	r4, [r2, #1]!
 801f672:	e7eb      	b.n	801f64c <memmove+0xc>

0801f674 <_free_r>:
 801f674:	b538      	push	{r3, r4, r5, lr}
 801f676:	4605      	mov	r5, r0
 801f678:	2900      	cmp	r1, #0
 801f67a:	d045      	beq.n	801f708 <_free_r+0x94>
 801f67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f680:	1f0c      	subs	r4, r1, #4
 801f682:	2b00      	cmp	r3, #0
 801f684:	bfb8      	it	lt
 801f686:	18e4      	addlt	r4, r4, r3
 801f688:	f000 f8d6 	bl	801f838 <__malloc_lock>
 801f68c:	4a1f      	ldr	r2, [pc, #124]	; (801f70c <_free_r+0x98>)
 801f68e:	6813      	ldr	r3, [r2, #0]
 801f690:	4610      	mov	r0, r2
 801f692:	b933      	cbnz	r3, 801f6a2 <_free_r+0x2e>
 801f694:	6063      	str	r3, [r4, #4]
 801f696:	6014      	str	r4, [r2, #0]
 801f698:	4628      	mov	r0, r5
 801f69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f69e:	f000 b8cc 	b.w	801f83a <__malloc_unlock>
 801f6a2:	42a3      	cmp	r3, r4
 801f6a4:	d90c      	bls.n	801f6c0 <_free_r+0x4c>
 801f6a6:	6821      	ldr	r1, [r4, #0]
 801f6a8:	1862      	adds	r2, r4, r1
 801f6aa:	4293      	cmp	r3, r2
 801f6ac:	bf04      	itt	eq
 801f6ae:	681a      	ldreq	r2, [r3, #0]
 801f6b0:	685b      	ldreq	r3, [r3, #4]
 801f6b2:	6063      	str	r3, [r4, #4]
 801f6b4:	bf04      	itt	eq
 801f6b6:	1852      	addeq	r2, r2, r1
 801f6b8:	6022      	streq	r2, [r4, #0]
 801f6ba:	6004      	str	r4, [r0, #0]
 801f6bc:	e7ec      	b.n	801f698 <_free_r+0x24>
 801f6be:	4613      	mov	r3, r2
 801f6c0:	685a      	ldr	r2, [r3, #4]
 801f6c2:	b10a      	cbz	r2, 801f6c8 <_free_r+0x54>
 801f6c4:	42a2      	cmp	r2, r4
 801f6c6:	d9fa      	bls.n	801f6be <_free_r+0x4a>
 801f6c8:	6819      	ldr	r1, [r3, #0]
 801f6ca:	1858      	adds	r0, r3, r1
 801f6cc:	42a0      	cmp	r0, r4
 801f6ce:	d10b      	bne.n	801f6e8 <_free_r+0x74>
 801f6d0:	6820      	ldr	r0, [r4, #0]
 801f6d2:	4401      	add	r1, r0
 801f6d4:	1858      	adds	r0, r3, r1
 801f6d6:	4282      	cmp	r2, r0
 801f6d8:	6019      	str	r1, [r3, #0]
 801f6da:	d1dd      	bne.n	801f698 <_free_r+0x24>
 801f6dc:	6810      	ldr	r0, [r2, #0]
 801f6de:	6852      	ldr	r2, [r2, #4]
 801f6e0:	605a      	str	r2, [r3, #4]
 801f6e2:	4401      	add	r1, r0
 801f6e4:	6019      	str	r1, [r3, #0]
 801f6e6:	e7d7      	b.n	801f698 <_free_r+0x24>
 801f6e8:	d902      	bls.n	801f6f0 <_free_r+0x7c>
 801f6ea:	230c      	movs	r3, #12
 801f6ec:	602b      	str	r3, [r5, #0]
 801f6ee:	e7d3      	b.n	801f698 <_free_r+0x24>
 801f6f0:	6820      	ldr	r0, [r4, #0]
 801f6f2:	1821      	adds	r1, r4, r0
 801f6f4:	428a      	cmp	r2, r1
 801f6f6:	bf04      	itt	eq
 801f6f8:	6811      	ldreq	r1, [r2, #0]
 801f6fa:	6852      	ldreq	r2, [r2, #4]
 801f6fc:	6062      	str	r2, [r4, #4]
 801f6fe:	bf04      	itt	eq
 801f700:	1809      	addeq	r1, r1, r0
 801f702:	6021      	streq	r1, [r4, #0]
 801f704:	605c      	str	r4, [r3, #4]
 801f706:	e7c7      	b.n	801f698 <_free_r+0x24>
 801f708:	bd38      	pop	{r3, r4, r5, pc}
 801f70a:	bf00      	nop
 801f70c:	2008a888 	.word	0x2008a888

0801f710 <_malloc_r>:
 801f710:	b570      	push	{r4, r5, r6, lr}
 801f712:	1ccd      	adds	r5, r1, #3
 801f714:	f025 0503 	bic.w	r5, r5, #3
 801f718:	3508      	adds	r5, #8
 801f71a:	2d0c      	cmp	r5, #12
 801f71c:	bf38      	it	cc
 801f71e:	250c      	movcc	r5, #12
 801f720:	2d00      	cmp	r5, #0
 801f722:	4606      	mov	r6, r0
 801f724:	db01      	blt.n	801f72a <_malloc_r+0x1a>
 801f726:	42a9      	cmp	r1, r5
 801f728:	d903      	bls.n	801f732 <_malloc_r+0x22>
 801f72a:	230c      	movs	r3, #12
 801f72c:	6033      	str	r3, [r6, #0]
 801f72e:	2000      	movs	r0, #0
 801f730:	bd70      	pop	{r4, r5, r6, pc}
 801f732:	f000 f881 	bl	801f838 <__malloc_lock>
 801f736:	4a23      	ldr	r2, [pc, #140]	; (801f7c4 <_malloc_r+0xb4>)
 801f738:	6814      	ldr	r4, [r2, #0]
 801f73a:	4621      	mov	r1, r4
 801f73c:	b991      	cbnz	r1, 801f764 <_malloc_r+0x54>
 801f73e:	4c22      	ldr	r4, [pc, #136]	; (801f7c8 <_malloc_r+0xb8>)
 801f740:	6823      	ldr	r3, [r4, #0]
 801f742:	b91b      	cbnz	r3, 801f74c <_malloc_r+0x3c>
 801f744:	4630      	mov	r0, r6
 801f746:	f000 f867 	bl	801f818 <_sbrk_r>
 801f74a:	6020      	str	r0, [r4, #0]
 801f74c:	4629      	mov	r1, r5
 801f74e:	4630      	mov	r0, r6
 801f750:	f000 f862 	bl	801f818 <_sbrk_r>
 801f754:	1c43      	adds	r3, r0, #1
 801f756:	d126      	bne.n	801f7a6 <_malloc_r+0x96>
 801f758:	230c      	movs	r3, #12
 801f75a:	6033      	str	r3, [r6, #0]
 801f75c:	4630      	mov	r0, r6
 801f75e:	f000 f86c 	bl	801f83a <__malloc_unlock>
 801f762:	e7e4      	b.n	801f72e <_malloc_r+0x1e>
 801f764:	680b      	ldr	r3, [r1, #0]
 801f766:	1b5b      	subs	r3, r3, r5
 801f768:	d41a      	bmi.n	801f7a0 <_malloc_r+0x90>
 801f76a:	2b0b      	cmp	r3, #11
 801f76c:	d90f      	bls.n	801f78e <_malloc_r+0x7e>
 801f76e:	600b      	str	r3, [r1, #0]
 801f770:	50cd      	str	r5, [r1, r3]
 801f772:	18cc      	adds	r4, r1, r3
 801f774:	4630      	mov	r0, r6
 801f776:	f000 f860 	bl	801f83a <__malloc_unlock>
 801f77a:	f104 000b 	add.w	r0, r4, #11
 801f77e:	1d23      	adds	r3, r4, #4
 801f780:	f020 0007 	bic.w	r0, r0, #7
 801f784:	1ac3      	subs	r3, r0, r3
 801f786:	d01b      	beq.n	801f7c0 <_malloc_r+0xb0>
 801f788:	425a      	negs	r2, r3
 801f78a:	50e2      	str	r2, [r4, r3]
 801f78c:	bd70      	pop	{r4, r5, r6, pc}
 801f78e:	428c      	cmp	r4, r1
 801f790:	bf0d      	iteet	eq
 801f792:	6863      	ldreq	r3, [r4, #4]
 801f794:	684b      	ldrne	r3, [r1, #4]
 801f796:	6063      	strne	r3, [r4, #4]
 801f798:	6013      	streq	r3, [r2, #0]
 801f79a:	bf18      	it	ne
 801f79c:	460c      	movne	r4, r1
 801f79e:	e7e9      	b.n	801f774 <_malloc_r+0x64>
 801f7a0:	460c      	mov	r4, r1
 801f7a2:	6849      	ldr	r1, [r1, #4]
 801f7a4:	e7ca      	b.n	801f73c <_malloc_r+0x2c>
 801f7a6:	1cc4      	adds	r4, r0, #3
 801f7a8:	f024 0403 	bic.w	r4, r4, #3
 801f7ac:	42a0      	cmp	r0, r4
 801f7ae:	d005      	beq.n	801f7bc <_malloc_r+0xac>
 801f7b0:	1a21      	subs	r1, r4, r0
 801f7b2:	4630      	mov	r0, r6
 801f7b4:	f000 f830 	bl	801f818 <_sbrk_r>
 801f7b8:	3001      	adds	r0, #1
 801f7ba:	d0cd      	beq.n	801f758 <_malloc_r+0x48>
 801f7bc:	6025      	str	r5, [r4, #0]
 801f7be:	e7d9      	b.n	801f774 <_malloc_r+0x64>
 801f7c0:	bd70      	pop	{r4, r5, r6, pc}
 801f7c2:	bf00      	nop
 801f7c4:	2008a888 	.word	0x2008a888
 801f7c8:	2008a88c 	.word	0x2008a88c

0801f7cc <_realloc_r>:
 801f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7ce:	4607      	mov	r7, r0
 801f7d0:	4614      	mov	r4, r2
 801f7d2:	460e      	mov	r6, r1
 801f7d4:	b921      	cbnz	r1, 801f7e0 <_realloc_r+0x14>
 801f7d6:	4611      	mov	r1, r2
 801f7d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f7dc:	f7ff bf98 	b.w	801f710 <_malloc_r>
 801f7e0:	b922      	cbnz	r2, 801f7ec <_realloc_r+0x20>
 801f7e2:	f7ff ff47 	bl	801f674 <_free_r>
 801f7e6:	4625      	mov	r5, r4
 801f7e8:	4628      	mov	r0, r5
 801f7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7ec:	f000 f826 	bl	801f83c <_malloc_usable_size_r>
 801f7f0:	4284      	cmp	r4, r0
 801f7f2:	d90f      	bls.n	801f814 <_realloc_r+0x48>
 801f7f4:	4621      	mov	r1, r4
 801f7f6:	4638      	mov	r0, r7
 801f7f8:	f7ff ff8a 	bl	801f710 <_malloc_r>
 801f7fc:	4605      	mov	r5, r0
 801f7fe:	2800      	cmp	r0, #0
 801f800:	d0f2      	beq.n	801f7e8 <_realloc_r+0x1c>
 801f802:	4631      	mov	r1, r6
 801f804:	4622      	mov	r2, r4
 801f806:	f7ff fbe7 	bl	801efd8 <memcpy>
 801f80a:	4631      	mov	r1, r6
 801f80c:	4638      	mov	r0, r7
 801f80e:	f7ff ff31 	bl	801f674 <_free_r>
 801f812:	e7e9      	b.n	801f7e8 <_realloc_r+0x1c>
 801f814:	4635      	mov	r5, r6
 801f816:	e7e7      	b.n	801f7e8 <_realloc_r+0x1c>

0801f818 <_sbrk_r>:
 801f818:	b538      	push	{r3, r4, r5, lr}
 801f81a:	4c06      	ldr	r4, [pc, #24]	; (801f834 <_sbrk_r+0x1c>)
 801f81c:	2300      	movs	r3, #0
 801f81e:	4605      	mov	r5, r0
 801f820:	4608      	mov	r0, r1
 801f822:	6023      	str	r3, [r4, #0]
 801f824:	f7ff f914 	bl	801ea50 <_sbrk>
 801f828:	1c43      	adds	r3, r0, #1
 801f82a:	d102      	bne.n	801f832 <_sbrk_r+0x1a>
 801f82c:	6823      	ldr	r3, [r4, #0]
 801f82e:	b103      	cbz	r3, 801f832 <_sbrk_r+0x1a>
 801f830:	602b      	str	r3, [r5, #0]
 801f832:	bd38      	pop	{r3, r4, r5, pc}
 801f834:	20090a4c 	.word	0x20090a4c

0801f838 <__malloc_lock>:
 801f838:	4770      	bx	lr

0801f83a <__malloc_unlock>:
 801f83a:	4770      	bx	lr

0801f83c <_malloc_usable_size_r>:
 801f83c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801f840:	2800      	cmp	r0, #0
 801f842:	f1a0 0004 	sub.w	r0, r0, #4
 801f846:	bfbc      	itt	lt
 801f848:	580b      	ldrlt	r3, [r1, r0]
 801f84a:	18c0      	addlt	r0, r0, r3
 801f84c:	4770      	bx	lr
	...

0801f850 <cbrt>:
 801f850:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f854:	ec51 0b10 	vmov	r0, r1, d0
 801f858:	4a59      	ldr	r2, [pc, #356]	; (801f9c0 <cbrt+0x170>)
 801f85a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f85e:	4293      	cmp	r3, r2
 801f860:	468a      	mov	sl, r1
 801f862:	ee10 2a10 	vmov	r2, s0
 801f866:	d907      	bls.n	801f878 <cbrt+0x28>
 801f868:	460b      	mov	r3, r1
 801f86a:	f7e0 fd1f 	bl	80002ac <__adddf3>
 801f86e:	ec41 0b10 	vmov	d0, r0, r1
 801f872:	b002      	add	sp, #8
 801f874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f878:	431a      	orrs	r2, r3
 801f87a:	d0f8      	beq.n	801f86e <cbrt+0x1e>
 801f87c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f880:	4619      	mov	r1, r3
 801f882:	4606      	mov	r6, r0
 801f884:	461f      	mov	r7, r3
 801f886:	d27c      	bcs.n	801f982 <cbrt+0x132>
 801f888:	2200      	movs	r2, #0
 801f88a:	4b4e      	ldr	r3, [pc, #312]	; (801f9c4 <cbrt+0x174>)
 801f88c:	f7e0 fec0 	bl	8000610 <__aeabi_dmul>
 801f890:	2203      	movs	r2, #3
 801f892:	fbb1 f3f2 	udiv	r3, r1, r2
 801f896:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 801f89a:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 801f89e:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 801f8a2:	4604      	mov	r4, r0
 801f8a4:	3513      	adds	r5, #19
 801f8a6:	4622      	mov	r2, r4
 801f8a8:	462b      	mov	r3, r5
 801f8aa:	4620      	mov	r0, r4
 801f8ac:	4629      	mov	r1, r5
 801f8ae:	f7e0 feaf 	bl	8000610 <__aeabi_dmul>
 801f8b2:	4632      	mov	r2, r6
 801f8b4:	463b      	mov	r3, r7
 801f8b6:	f7e0 ffd5 	bl	8000864 <__aeabi_ddiv>
 801f8ba:	4622      	mov	r2, r4
 801f8bc:	462b      	mov	r3, r5
 801f8be:	f7e0 fea7 	bl	8000610 <__aeabi_dmul>
 801f8c2:	a335      	add	r3, pc, #212	; (adr r3, 801f998 <cbrt+0x148>)
 801f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8c8:	f7e0 fcf0 	bl	80002ac <__adddf3>
 801f8cc:	a334      	add	r3, pc, #208	; (adr r3, 801f9a0 <cbrt+0x150>)
 801f8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8d2:	e9cd 0100 	strd	r0, r1, [sp]
 801f8d6:	f7e0 fce9 	bl	80002ac <__adddf3>
 801f8da:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f8de:	4680      	mov	r8, r0
 801f8e0:	4689      	mov	r9, r1
 801f8e2:	a131      	add	r1, pc, #196	; (adr r1, 801f9a8 <cbrt+0x158>)
 801f8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f8e8:	f7e0 ffbc 	bl	8000864 <__aeabi_ddiv>
 801f8ec:	4602      	mov	r2, r0
 801f8ee:	460b      	mov	r3, r1
 801f8f0:	4640      	mov	r0, r8
 801f8f2:	4649      	mov	r1, r9
 801f8f4:	f7e0 fcda 	bl	80002ac <__adddf3>
 801f8f8:	4602      	mov	r2, r0
 801f8fa:	460b      	mov	r3, r1
 801f8fc:	a12c      	add	r1, pc, #176	; (adr r1, 801f9b0 <cbrt+0x160>)
 801f8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f902:	f7e0 ffaf 	bl	8000864 <__aeabi_ddiv>
 801f906:	a32c      	add	r3, pc, #176	; (adr r3, 801f9b8 <cbrt+0x168>)
 801f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f90c:	f7e0 fcce 	bl	80002ac <__adddf3>
 801f910:	4622      	mov	r2, r4
 801f912:	462b      	mov	r3, r5
 801f914:	f7e0 fe7c 	bl	8000610 <__aeabi_dmul>
 801f918:	2400      	movs	r4, #0
 801f91a:	1c4d      	adds	r5, r1, #1
 801f91c:	4622      	mov	r2, r4
 801f91e:	462b      	mov	r3, r5
 801f920:	4620      	mov	r0, r4
 801f922:	4629      	mov	r1, r5
 801f924:	f7e0 fe74 	bl	8000610 <__aeabi_dmul>
 801f928:	4602      	mov	r2, r0
 801f92a:	460b      	mov	r3, r1
 801f92c:	4630      	mov	r0, r6
 801f92e:	4639      	mov	r1, r7
 801f930:	f7e0 ff98 	bl	8000864 <__aeabi_ddiv>
 801f934:	4622      	mov	r2, r4
 801f936:	462b      	mov	r3, r5
 801f938:	4680      	mov	r8, r0
 801f93a:	4689      	mov	r9, r1
 801f93c:	f7e0 fcb4 	bl	80002a8 <__aeabi_dsub>
 801f940:	4622      	mov	r2, r4
 801f942:	4606      	mov	r6, r0
 801f944:	460f      	mov	r7, r1
 801f946:	462b      	mov	r3, r5
 801f948:	4620      	mov	r0, r4
 801f94a:	4629      	mov	r1, r5
 801f94c:	f7e0 fcae 	bl	80002ac <__adddf3>
 801f950:	4642      	mov	r2, r8
 801f952:	464b      	mov	r3, r9
 801f954:	f7e0 fcaa 	bl	80002ac <__adddf3>
 801f958:	4602      	mov	r2, r0
 801f95a:	460b      	mov	r3, r1
 801f95c:	4630      	mov	r0, r6
 801f95e:	4639      	mov	r1, r7
 801f960:	f7e0 ff80 	bl	8000864 <__aeabi_ddiv>
 801f964:	4622      	mov	r2, r4
 801f966:	462b      	mov	r3, r5
 801f968:	f7e0 fe52 	bl	8000610 <__aeabi_dmul>
 801f96c:	4602      	mov	r2, r0
 801f96e:	460b      	mov	r3, r1
 801f970:	4620      	mov	r0, r4
 801f972:	4629      	mov	r1, r5
 801f974:	f7e0 fc9a 	bl	80002ac <__adddf3>
 801f978:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 801f97c:	ea4a 0101 	orr.w	r1, sl, r1
 801f980:	e775      	b.n	801f86e <cbrt+0x1e>
 801f982:	2203      	movs	r2, #3
 801f984:	fb93 f3f2 	sdiv	r3, r3, r2
 801f988:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 801f98c:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 801f990:	2400      	movs	r4, #0
 801f992:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 801f996:	e786      	b.n	801f8a6 <cbrt+0x56>
 801f998:	f15f15f1 	.word	0xf15f15f1
 801f99c:	3fe15f15 	.word	0x3fe15f15
 801f9a0:	0ea0ea0f 	.word	0x0ea0ea0f
 801f9a4:	3ff6a0ea 	.word	0x3ff6a0ea
 801f9a8:	2532c834 	.word	0x2532c834
 801f9ac:	bfe691de 	.word	0xbfe691de
 801f9b0:	6db6db6e 	.word	0x6db6db6e
 801f9b4:	3ff9b6db 	.word	0x3ff9b6db
 801f9b8:	b6db6db7 	.word	0xb6db6db7
 801f9bc:	3fd6db6d 	.word	0x3fd6db6d
 801f9c0:	7fefffff 	.word	0x7fefffff
 801f9c4:	43500000 	.word	0x43500000

0801f9c8 <exp>:
 801f9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9ca:	ed2d 8b02 	vpush	{d8}
 801f9ce:	4e38      	ldr	r6, [pc, #224]	; (801fab0 <exp+0xe8>)
 801f9d0:	b08b      	sub	sp, #44	; 0x2c
 801f9d2:	ec55 4b10 	vmov	r4, r5, d0
 801f9d6:	f000 fb17 	bl	8020008 <__ieee754_exp>
 801f9da:	f996 3000 	ldrsb.w	r3, [r6]
 801f9de:	eeb0 8a40 	vmov.f32	s16, s0
 801f9e2:	eef0 8a60 	vmov.f32	s17, s1
 801f9e6:	3301      	adds	r3, #1
 801f9e8:	d02c      	beq.n	801fa44 <exp+0x7c>
 801f9ea:	ec45 4b10 	vmov	d0, r4, r5
 801f9ee:	f001 fc67 	bl	80212c0 <finite>
 801f9f2:	b338      	cbz	r0, 801fa44 <exp+0x7c>
 801f9f4:	a32a      	add	r3, pc, #168	; (adr r3, 801faa0 <exp+0xd8>)
 801f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9fa:	4620      	mov	r0, r4
 801f9fc:	4629      	mov	r1, r5
 801f9fe:	f7e1 f897 	bl	8000b30 <__aeabi_dcmpgt>
 801fa02:	4607      	mov	r7, r0
 801fa04:	2800      	cmp	r0, #0
 801fa06:	d030      	beq.n	801fa6a <exp+0xa2>
 801fa08:	2303      	movs	r3, #3
 801fa0a:	9300      	str	r3, [sp, #0]
 801fa0c:	4b29      	ldr	r3, [pc, #164]	; (801fab4 <exp+0xec>)
 801fa0e:	9301      	str	r3, [sp, #4]
 801fa10:	2300      	movs	r3, #0
 801fa12:	9308      	str	r3, [sp, #32]
 801fa14:	f996 3000 	ldrsb.w	r3, [r6]
 801fa18:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801fa1c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801fa20:	b9c3      	cbnz	r3, 801fa54 <exp+0x8c>
 801fa22:	4b25      	ldr	r3, [pc, #148]	; (801fab8 <exp+0xf0>)
 801fa24:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801fa28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801fa2c:	4668      	mov	r0, sp
 801fa2e:	f001 fc4f 	bl	80212d0 <matherr>
 801fa32:	b1a8      	cbz	r0, 801fa60 <exp+0x98>
 801fa34:	9b08      	ldr	r3, [sp, #32]
 801fa36:	b11b      	cbz	r3, 801fa40 <exp+0x78>
 801fa38:	f7ff faa4 	bl	801ef84 <__errno>
 801fa3c:	9b08      	ldr	r3, [sp, #32]
 801fa3e:	6003      	str	r3, [r0, #0]
 801fa40:	ed9d 8b06 	vldr	d8, [sp, #24]
 801fa44:	eeb0 0a48 	vmov.f32	s0, s16
 801fa48:	eef0 0a68 	vmov.f32	s1, s17
 801fa4c:	b00b      	add	sp, #44	; 0x2c
 801fa4e:	ecbd 8b02 	vpop	{d8}
 801fa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa54:	4919      	ldr	r1, [pc, #100]	; (801fabc <exp+0xf4>)
 801fa56:	2000      	movs	r0, #0
 801fa58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fa5c:	2b02      	cmp	r3, #2
 801fa5e:	d1e5      	bne.n	801fa2c <exp+0x64>
 801fa60:	f7ff fa90 	bl	801ef84 <__errno>
 801fa64:	2322      	movs	r3, #34	; 0x22
 801fa66:	6003      	str	r3, [r0, #0]
 801fa68:	e7e4      	b.n	801fa34 <exp+0x6c>
 801fa6a:	a30f      	add	r3, pc, #60	; (adr r3, 801faa8 <exp+0xe0>)
 801fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa70:	4620      	mov	r0, r4
 801fa72:	4629      	mov	r1, r5
 801fa74:	f7e1 f83e 	bl	8000af4 <__aeabi_dcmplt>
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	d0e3      	beq.n	801fa44 <exp+0x7c>
 801fa7c:	2304      	movs	r3, #4
 801fa7e:	9300      	str	r3, [sp, #0]
 801fa80:	4b0c      	ldr	r3, [pc, #48]	; (801fab4 <exp+0xec>)
 801fa82:	9301      	str	r3, [sp, #4]
 801fa84:	2200      	movs	r2, #0
 801fa86:	2300      	movs	r3, #0
 801fa88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801fa8c:	9708      	str	r7, [sp, #32]
 801fa8e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801fa92:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801fa96:	f996 3000 	ldrsb.w	r3, [r6]
 801fa9a:	e7df      	b.n	801fa5c <exp+0x94>
 801fa9c:	f3af 8000 	nop.w
 801faa0:	fefa39ef 	.word	0xfefa39ef
 801faa4:	40862e42 	.word	0x40862e42
 801faa8:	d52d3051 	.word	0xd52d3051
 801faac:	c0874910 	.word	0xc0874910
 801fab0:	20000b38 	.word	0x20000b38
 801fab4:	0802e82b 	.word	0x0802e82b
 801fab8:	47efffff 	.word	0x47efffff
 801fabc:	7ff00000 	.word	0x7ff00000

0801fac0 <log>:
 801fac0:	b570      	push	{r4, r5, r6, lr}
 801fac2:	ed2d 8b02 	vpush	{d8}
 801fac6:	b08a      	sub	sp, #40	; 0x28
 801fac8:	ec55 4b10 	vmov	r4, r5, d0
 801facc:	f000 fc10 	bl	80202f0 <__ieee754_log>
 801fad0:	4b36      	ldr	r3, [pc, #216]	; (801fbac <log+0xec>)
 801fad2:	eeb0 8a40 	vmov.f32	s16, s0
 801fad6:	eef0 8a60 	vmov.f32	s17, s1
 801fada:	f993 6000 	ldrsb.w	r6, [r3]
 801fade:	1c73      	adds	r3, r6, #1
 801fae0:	d05b      	beq.n	801fb9a <log+0xda>
 801fae2:	4622      	mov	r2, r4
 801fae4:	462b      	mov	r3, r5
 801fae6:	4620      	mov	r0, r4
 801fae8:	4629      	mov	r1, r5
 801faea:	f7e1 f82b 	bl	8000b44 <__aeabi_dcmpun>
 801faee:	2800      	cmp	r0, #0
 801faf0:	d153      	bne.n	801fb9a <log+0xda>
 801faf2:	2200      	movs	r2, #0
 801faf4:	2300      	movs	r3, #0
 801faf6:	4620      	mov	r0, r4
 801faf8:	4629      	mov	r1, r5
 801fafa:	f7e1 f819 	bl	8000b30 <__aeabi_dcmpgt>
 801fafe:	2800      	cmp	r0, #0
 801fb00:	d14b      	bne.n	801fb9a <log+0xda>
 801fb02:	4b2b      	ldr	r3, [pc, #172]	; (801fbb0 <log+0xf0>)
 801fb04:	9301      	str	r3, [sp, #4]
 801fb06:	9008      	str	r0, [sp, #32]
 801fb08:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801fb0c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801fb10:	b9a6      	cbnz	r6, 801fb3c <log+0x7c>
 801fb12:	4b28      	ldr	r3, [pc, #160]	; (801fbb4 <log+0xf4>)
 801fb14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801fb18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	2200      	movs	r2, #0
 801fb20:	2300      	movs	r3, #0
 801fb22:	4629      	mov	r1, r5
 801fb24:	f7e0 ffdc 	bl	8000ae0 <__aeabi_dcmpeq>
 801fb28:	bb40      	cbnz	r0, 801fb7c <log+0xbc>
 801fb2a:	2301      	movs	r3, #1
 801fb2c:	2e02      	cmp	r6, #2
 801fb2e:	9300      	str	r3, [sp, #0]
 801fb30:	d119      	bne.n	801fb66 <log+0xa6>
 801fb32:	f7ff fa27 	bl	801ef84 <__errno>
 801fb36:	2321      	movs	r3, #33	; 0x21
 801fb38:	6003      	str	r3, [r0, #0]
 801fb3a:	e019      	b.n	801fb70 <log+0xb0>
 801fb3c:	4b1e      	ldr	r3, [pc, #120]	; (801fbb8 <log+0xf8>)
 801fb3e:	2200      	movs	r2, #0
 801fb40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801fb44:	4620      	mov	r0, r4
 801fb46:	2200      	movs	r2, #0
 801fb48:	2300      	movs	r3, #0
 801fb4a:	4629      	mov	r1, r5
 801fb4c:	f7e0 ffc8 	bl	8000ae0 <__aeabi_dcmpeq>
 801fb50:	2800      	cmp	r0, #0
 801fb52:	d0ea      	beq.n	801fb2a <log+0x6a>
 801fb54:	2302      	movs	r3, #2
 801fb56:	429e      	cmp	r6, r3
 801fb58:	9300      	str	r3, [sp, #0]
 801fb5a:	d111      	bne.n	801fb80 <log+0xc0>
 801fb5c:	f7ff fa12 	bl	801ef84 <__errno>
 801fb60:	2322      	movs	r3, #34	; 0x22
 801fb62:	6003      	str	r3, [r0, #0]
 801fb64:	e011      	b.n	801fb8a <log+0xca>
 801fb66:	4668      	mov	r0, sp
 801fb68:	f001 fbb2 	bl	80212d0 <matherr>
 801fb6c:	2800      	cmp	r0, #0
 801fb6e:	d0e0      	beq.n	801fb32 <log+0x72>
 801fb70:	4812      	ldr	r0, [pc, #72]	; (801fbbc <log+0xfc>)
 801fb72:	f001 fbb1 	bl	80212d8 <nan>
 801fb76:	ed8d 0b06 	vstr	d0, [sp, #24]
 801fb7a:	e006      	b.n	801fb8a <log+0xca>
 801fb7c:	2302      	movs	r3, #2
 801fb7e:	9300      	str	r3, [sp, #0]
 801fb80:	4668      	mov	r0, sp
 801fb82:	f001 fba5 	bl	80212d0 <matherr>
 801fb86:	2800      	cmp	r0, #0
 801fb88:	d0e8      	beq.n	801fb5c <log+0x9c>
 801fb8a:	9b08      	ldr	r3, [sp, #32]
 801fb8c:	b11b      	cbz	r3, 801fb96 <log+0xd6>
 801fb8e:	f7ff f9f9 	bl	801ef84 <__errno>
 801fb92:	9b08      	ldr	r3, [sp, #32]
 801fb94:	6003      	str	r3, [r0, #0]
 801fb96:	ed9d 8b06 	vldr	d8, [sp, #24]
 801fb9a:	eeb0 0a48 	vmov.f32	s0, s16
 801fb9e:	eef0 0a68 	vmov.f32	s1, s17
 801fba2:	b00a      	add	sp, #40	; 0x28
 801fba4:	ecbd 8b02 	vpop	{d8}
 801fba8:	bd70      	pop	{r4, r5, r6, pc}
 801fbaa:	bf00      	nop
 801fbac:	20000b38 	.word	0x20000b38
 801fbb0:	0802e82f 	.word	0x0802e82f
 801fbb4:	c7efffff 	.word	0xc7efffff
 801fbb8:	fff00000 	.word	0xfff00000
 801fbbc:	0802e711 	.word	0x0802e711

0801fbc0 <pow>:
 801fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbc4:	ed2d 8b04 	vpush	{d8-d9}
 801fbc8:	b08d      	sub	sp, #52	; 0x34
 801fbca:	ec57 6b10 	vmov	r6, r7, d0
 801fbce:	ec55 4b11 	vmov	r4, r5, d1
 801fbd2:	f000 fd65 	bl	80206a0 <__ieee754_pow>
 801fbd6:	4bae      	ldr	r3, [pc, #696]	; (801fe90 <pow+0x2d0>)
 801fbd8:	eeb0 8a40 	vmov.f32	s16, s0
 801fbdc:	eef0 8a60 	vmov.f32	s17, s1
 801fbe0:	f993 9000 	ldrsb.w	r9, [r3]
 801fbe4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801fbe8:	4698      	mov	r8, r3
 801fbea:	d05f      	beq.n	801fcac <pow+0xec>
 801fbec:	4622      	mov	r2, r4
 801fbee:	462b      	mov	r3, r5
 801fbf0:	4620      	mov	r0, r4
 801fbf2:	4629      	mov	r1, r5
 801fbf4:	f7e0 ffa6 	bl	8000b44 <__aeabi_dcmpun>
 801fbf8:	4683      	mov	fp, r0
 801fbfa:	2800      	cmp	r0, #0
 801fbfc:	d156      	bne.n	801fcac <pow+0xec>
 801fbfe:	4632      	mov	r2, r6
 801fc00:	463b      	mov	r3, r7
 801fc02:	4630      	mov	r0, r6
 801fc04:	4639      	mov	r1, r7
 801fc06:	f7e0 ff9d 	bl	8000b44 <__aeabi_dcmpun>
 801fc0a:	9001      	str	r0, [sp, #4]
 801fc0c:	b1e8      	cbz	r0, 801fc4a <pow+0x8a>
 801fc0e:	2200      	movs	r2, #0
 801fc10:	2300      	movs	r3, #0
 801fc12:	4620      	mov	r0, r4
 801fc14:	4629      	mov	r1, r5
 801fc16:	f7e0 ff63 	bl	8000ae0 <__aeabi_dcmpeq>
 801fc1a:	2800      	cmp	r0, #0
 801fc1c:	d046      	beq.n	801fcac <pow+0xec>
 801fc1e:	2301      	movs	r3, #1
 801fc20:	9302      	str	r3, [sp, #8]
 801fc22:	4b9c      	ldr	r3, [pc, #624]	; (801fe94 <pow+0x2d4>)
 801fc24:	9303      	str	r3, [sp, #12]
 801fc26:	4b9c      	ldr	r3, [pc, #624]	; (801fe98 <pow+0x2d8>)
 801fc28:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801fc2c:	2200      	movs	r2, #0
 801fc2e:	f1b9 0f02 	cmp.w	r9, #2
 801fc32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801fc36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801fc3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801fc3e:	d033      	beq.n	801fca8 <pow+0xe8>
 801fc40:	a802      	add	r0, sp, #8
 801fc42:	f001 fb45 	bl	80212d0 <matherr>
 801fc46:	bb48      	cbnz	r0, 801fc9c <pow+0xdc>
 801fc48:	e05e      	b.n	801fd08 <pow+0x148>
 801fc4a:	f04f 0a00 	mov.w	sl, #0
 801fc4e:	f04f 0b00 	mov.w	fp, #0
 801fc52:	4652      	mov	r2, sl
 801fc54:	465b      	mov	r3, fp
 801fc56:	4630      	mov	r0, r6
 801fc58:	4639      	mov	r1, r7
 801fc5a:	f7e0 ff41 	bl	8000ae0 <__aeabi_dcmpeq>
 801fc5e:	ec4b ab19 	vmov	d9, sl, fp
 801fc62:	2800      	cmp	r0, #0
 801fc64:	d055      	beq.n	801fd12 <pow+0x152>
 801fc66:	4652      	mov	r2, sl
 801fc68:	465b      	mov	r3, fp
 801fc6a:	4620      	mov	r0, r4
 801fc6c:	4629      	mov	r1, r5
 801fc6e:	f7e0 ff37 	bl	8000ae0 <__aeabi_dcmpeq>
 801fc72:	4680      	mov	r8, r0
 801fc74:	b318      	cbz	r0, 801fcbe <pow+0xfe>
 801fc76:	2301      	movs	r3, #1
 801fc78:	9302      	str	r3, [sp, #8]
 801fc7a:	4b86      	ldr	r3, [pc, #536]	; (801fe94 <pow+0x2d4>)
 801fc7c:	9303      	str	r3, [sp, #12]
 801fc7e:	9b01      	ldr	r3, [sp, #4]
 801fc80:	930a      	str	r3, [sp, #40]	; 0x28
 801fc82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801fc86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801fc8a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801fc8e:	f1b9 0f00 	cmp.w	r9, #0
 801fc92:	d0d5      	beq.n	801fc40 <pow+0x80>
 801fc94:	4b80      	ldr	r3, [pc, #512]	; (801fe98 <pow+0x2d8>)
 801fc96:	2200      	movs	r2, #0
 801fc98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801fc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc9e:	b11b      	cbz	r3, 801fca8 <pow+0xe8>
 801fca0:	f7ff f970 	bl	801ef84 <__errno>
 801fca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fca6:	6003      	str	r3, [r0, #0]
 801fca8:	ed9d 8b08 	vldr	d8, [sp, #32]
 801fcac:	eeb0 0a48 	vmov.f32	s0, s16
 801fcb0:	eef0 0a68 	vmov.f32	s1, s17
 801fcb4:	b00d      	add	sp, #52	; 0x34
 801fcb6:	ecbd 8b04 	vpop	{d8-d9}
 801fcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcbe:	ec45 4b10 	vmov	d0, r4, r5
 801fcc2:	f001 fafd 	bl	80212c0 <finite>
 801fcc6:	2800      	cmp	r0, #0
 801fcc8:	d0f0      	beq.n	801fcac <pow+0xec>
 801fcca:	4652      	mov	r2, sl
 801fccc:	465b      	mov	r3, fp
 801fcce:	4620      	mov	r0, r4
 801fcd0:	4629      	mov	r1, r5
 801fcd2:	f7e0 ff0f 	bl	8000af4 <__aeabi_dcmplt>
 801fcd6:	2800      	cmp	r0, #0
 801fcd8:	d0e8      	beq.n	801fcac <pow+0xec>
 801fcda:	2301      	movs	r3, #1
 801fcdc:	9302      	str	r3, [sp, #8]
 801fcde:	4b6d      	ldr	r3, [pc, #436]	; (801fe94 <pow+0x2d4>)
 801fce0:	9303      	str	r3, [sp, #12]
 801fce2:	4b6b      	ldr	r3, [pc, #428]	; (801fe90 <pow+0x2d0>)
 801fce4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801fce8:	f993 3000 	ldrsb.w	r3, [r3]
 801fcec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801fcf0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801fcf4:	b913      	cbnz	r3, 801fcfc <pow+0x13c>
 801fcf6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801fcfa:	e7a1      	b.n	801fc40 <pow+0x80>
 801fcfc:	4967      	ldr	r1, [pc, #412]	; (801fe9c <pow+0x2dc>)
 801fcfe:	2000      	movs	r0, #0
 801fd00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801fd04:	2b02      	cmp	r3, #2
 801fd06:	d19b      	bne.n	801fc40 <pow+0x80>
 801fd08:	f7ff f93c 	bl	801ef84 <__errno>
 801fd0c:	2321      	movs	r3, #33	; 0x21
 801fd0e:	6003      	str	r3, [r0, #0]
 801fd10:	e7c4      	b.n	801fc9c <pow+0xdc>
 801fd12:	eeb0 0a48 	vmov.f32	s0, s16
 801fd16:	eef0 0a68 	vmov.f32	s1, s17
 801fd1a:	f001 fad1 	bl	80212c0 <finite>
 801fd1e:	9001      	str	r0, [sp, #4]
 801fd20:	2800      	cmp	r0, #0
 801fd22:	f040 808a 	bne.w	801fe3a <pow+0x27a>
 801fd26:	ec47 6b10 	vmov	d0, r6, r7
 801fd2a:	f001 fac9 	bl	80212c0 <finite>
 801fd2e:	2800      	cmp	r0, #0
 801fd30:	f000 8083 	beq.w	801fe3a <pow+0x27a>
 801fd34:	ec45 4b10 	vmov	d0, r4, r5
 801fd38:	f001 fac2 	bl	80212c0 <finite>
 801fd3c:	2800      	cmp	r0, #0
 801fd3e:	d07c      	beq.n	801fe3a <pow+0x27a>
 801fd40:	ec53 2b18 	vmov	r2, r3, d8
 801fd44:	ee18 0a10 	vmov	r0, s16
 801fd48:	4619      	mov	r1, r3
 801fd4a:	f7e0 fefb 	bl	8000b44 <__aeabi_dcmpun>
 801fd4e:	f998 9000 	ldrsb.w	r9, [r8]
 801fd52:	4b50      	ldr	r3, [pc, #320]	; (801fe94 <pow+0x2d4>)
 801fd54:	b1b0      	cbz	r0, 801fd84 <pow+0x1c4>
 801fd56:	2201      	movs	r2, #1
 801fd58:	9303      	str	r3, [sp, #12]
 801fd5a:	9b01      	ldr	r3, [sp, #4]
 801fd5c:	9202      	str	r2, [sp, #8]
 801fd5e:	930a      	str	r3, [sp, #40]	; 0x28
 801fd60:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801fd64:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801fd68:	f1b9 0f00 	cmp.w	r9, #0
 801fd6c:	d0c3      	beq.n	801fcf6 <pow+0x136>
 801fd6e:	4652      	mov	r2, sl
 801fd70:	465b      	mov	r3, fp
 801fd72:	4650      	mov	r0, sl
 801fd74:	4659      	mov	r1, fp
 801fd76:	f7e0 fd75 	bl	8000864 <__aeabi_ddiv>
 801fd7a:	f1b9 0f02 	cmp.w	r9, #2
 801fd7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801fd82:	e7c0      	b.n	801fd06 <pow+0x146>
 801fd84:	2203      	movs	r2, #3
 801fd86:	9202      	str	r2, [sp, #8]
 801fd88:	9303      	str	r3, [sp, #12]
 801fd8a:	900a      	str	r0, [sp, #40]	; 0x28
 801fd8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801fd90:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801fd94:	f1b9 0f00 	cmp.w	r9, #0
 801fd98:	d12c      	bne.n	801fdf4 <pow+0x234>
 801fd9a:	4b41      	ldr	r3, [pc, #260]	; (801fea0 <pow+0x2e0>)
 801fd9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801fda0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801fda4:	4630      	mov	r0, r6
 801fda6:	4652      	mov	r2, sl
 801fda8:	465b      	mov	r3, fp
 801fdaa:	4639      	mov	r1, r7
 801fdac:	f7e0 fea2 	bl	8000af4 <__aeabi_dcmplt>
 801fdb0:	2800      	cmp	r0, #0
 801fdb2:	d066      	beq.n	801fe82 <pow+0x2c2>
 801fdb4:	2200      	movs	r2, #0
 801fdb6:	4b3b      	ldr	r3, [pc, #236]	; (801fea4 <pow+0x2e4>)
 801fdb8:	4620      	mov	r0, r4
 801fdba:	4629      	mov	r1, r5
 801fdbc:	f7e0 fc28 	bl	8000610 <__aeabi_dmul>
 801fdc0:	4604      	mov	r4, r0
 801fdc2:	460d      	mov	r5, r1
 801fdc4:	ec45 4b10 	vmov	d0, r4, r5
 801fdc8:	f001 fa8e 	bl	80212e8 <rint>
 801fdcc:	4620      	mov	r0, r4
 801fdce:	ec53 2b10 	vmov	r2, r3, d0
 801fdd2:	4629      	mov	r1, r5
 801fdd4:	f7e0 fe84 	bl	8000ae0 <__aeabi_dcmpeq>
 801fdd8:	b920      	cbnz	r0, 801fde4 <pow+0x224>
 801fdda:	4b33      	ldr	r3, [pc, #204]	; (801fea8 <pow+0x2e8>)
 801fddc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801fde0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801fde4:	f998 3000 	ldrsb.w	r3, [r8]
 801fde8:	2b02      	cmp	r3, #2
 801fdea:	d14a      	bne.n	801fe82 <pow+0x2c2>
 801fdec:	f7ff f8ca 	bl	801ef84 <__errno>
 801fdf0:	2322      	movs	r3, #34	; 0x22
 801fdf2:	e78c      	b.n	801fd0e <pow+0x14e>
 801fdf4:	4b2d      	ldr	r3, [pc, #180]	; (801feac <pow+0x2ec>)
 801fdf6:	2200      	movs	r2, #0
 801fdf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801fdfc:	4630      	mov	r0, r6
 801fdfe:	4652      	mov	r2, sl
 801fe00:	465b      	mov	r3, fp
 801fe02:	4639      	mov	r1, r7
 801fe04:	f7e0 fe76 	bl	8000af4 <__aeabi_dcmplt>
 801fe08:	2800      	cmp	r0, #0
 801fe0a:	d0eb      	beq.n	801fde4 <pow+0x224>
 801fe0c:	2200      	movs	r2, #0
 801fe0e:	4b25      	ldr	r3, [pc, #148]	; (801fea4 <pow+0x2e4>)
 801fe10:	4620      	mov	r0, r4
 801fe12:	4629      	mov	r1, r5
 801fe14:	f7e0 fbfc 	bl	8000610 <__aeabi_dmul>
 801fe18:	4604      	mov	r4, r0
 801fe1a:	460d      	mov	r5, r1
 801fe1c:	ec45 4b10 	vmov	d0, r4, r5
 801fe20:	f001 fa62 	bl	80212e8 <rint>
 801fe24:	4620      	mov	r0, r4
 801fe26:	ec53 2b10 	vmov	r2, r3, d0
 801fe2a:	4629      	mov	r1, r5
 801fe2c:	f7e0 fe58 	bl	8000ae0 <__aeabi_dcmpeq>
 801fe30:	2800      	cmp	r0, #0
 801fe32:	d1d7      	bne.n	801fde4 <pow+0x224>
 801fe34:	2200      	movs	r2, #0
 801fe36:	4b19      	ldr	r3, [pc, #100]	; (801fe9c <pow+0x2dc>)
 801fe38:	e7d2      	b.n	801fde0 <pow+0x220>
 801fe3a:	2200      	movs	r2, #0
 801fe3c:	2300      	movs	r3, #0
 801fe3e:	ec51 0b18 	vmov	r0, r1, d8
 801fe42:	f7e0 fe4d 	bl	8000ae0 <__aeabi_dcmpeq>
 801fe46:	2800      	cmp	r0, #0
 801fe48:	f43f af30 	beq.w	801fcac <pow+0xec>
 801fe4c:	ec47 6b10 	vmov	d0, r6, r7
 801fe50:	f001 fa36 	bl	80212c0 <finite>
 801fe54:	2800      	cmp	r0, #0
 801fe56:	f43f af29 	beq.w	801fcac <pow+0xec>
 801fe5a:	ec45 4b10 	vmov	d0, r4, r5
 801fe5e:	f001 fa2f 	bl	80212c0 <finite>
 801fe62:	2800      	cmp	r0, #0
 801fe64:	f43f af22 	beq.w	801fcac <pow+0xec>
 801fe68:	2304      	movs	r3, #4
 801fe6a:	9302      	str	r3, [sp, #8]
 801fe6c:	4b09      	ldr	r3, [pc, #36]	; (801fe94 <pow+0x2d4>)
 801fe6e:	9303      	str	r3, [sp, #12]
 801fe70:	2300      	movs	r3, #0
 801fe72:	930a      	str	r3, [sp, #40]	; 0x28
 801fe74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801fe78:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801fe7c:	ed8d 9b08 	vstr	d9, [sp, #32]
 801fe80:	e7b0      	b.n	801fde4 <pow+0x224>
 801fe82:	a802      	add	r0, sp, #8
 801fe84:	f001 fa24 	bl	80212d0 <matherr>
 801fe88:	2800      	cmp	r0, #0
 801fe8a:	f47f af07 	bne.w	801fc9c <pow+0xdc>
 801fe8e:	e7ad      	b.n	801fdec <pow+0x22c>
 801fe90:	20000b38 	.word	0x20000b38
 801fe94:	0802e833 	.word	0x0802e833
 801fe98:	3ff00000 	.word	0x3ff00000
 801fe9c:	fff00000 	.word	0xfff00000
 801fea0:	47efffff 	.word	0x47efffff
 801fea4:	3fe00000 	.word	0x3fe00000
 801fea8:	c7efffff 	.word	0xc7efffff
 801feac:	7ff00000 	.word	0x7ff00000

0801feb0 <sqrt>:
 801feb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801feb4:	ed2d 8b02 	vpush	{d8}
 801feb8:	b08b      	sub	sp, #44	; 0x2c
 801feba:	ec55 4b10 	vmov	r4, r5, d0
 801febe:	f001 f901 	bl	80210c4 <__ieee754_sqrt>
 801fec2:	4b26      	ldr	r3, [pc, #152]	; (801ff5c <sqrt+0xac>)
 801fec4:	eeb0 8a40 	vmov.f32	s16, s0
 801fec8:	eef0 8a60 	vmov.f32	s17, s1
 801fecc:	f993 6000 	ldrsb.w	r6, [r3]
 801fed0:	1c73      	adds	r3, r6, #1
 801fed2:	d02a      	beq.n	801ff2a <sqrt+0x7a>
 801fed4:	4622      	mov	r2, r4
 801fed6:	462b      	mov	r3, r5
 801fed8:	4620      	mov	r0, r4
 801feda:	4629      	mov	r1, r5
 801fedc:	f7e0 fe32 	bl	8000b44 <__aeabi_dcmpun>
 801fee0:	4607      	mov	r7, r0
 801fee2:	bb10      	cbnz	r0, 801ff2a <sqrt+0x7a>
 801fee4:	f04f 0800 	mov.w	r8, #0
 801fee8:	f04f 0900 	mov.w	r9, #0
 801feec:	4642      	mov	r2, r8
 801feee:	464b      	mov	r3, r9
 801fef0:	4620      	mov	r0, r4
 801fef2:	4629      	mov	r1, r5
 801fef4:	f7e0 fdfe 	bl	8000af4 <__aeabi_dcmplt>
 801fef8:	b1b8      	cbz	r0, 801ff2a <sqrt+0x7a>
 801fefa:	2301      	movs	r3, #1
 801fefc:	9300      	str	r3, [sp, #0]
 801fefe:	4b18      	ldr	r3, [pc, #96]	; (801ff60 <sqrt+0xb0>)
 801ff00:	9301      	str	r3, [sp, #4]
 801ff02:	9708      	str	r7, [sp, #32]
 801ff04:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801ff08:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ff0c:	b9b6      	cbnz	r6, 801ff3c <sqrt+0x8c>
 801ff0e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801ff12:	4668      	mov	r0, sp
 801ff14:	f001 f9dc 	bl	80212d0 <matherr>
 801ff18:	b1d0      	cbz	r0, 801ff50 <sqrt+0xa0>
 801ff1a:	9b08      	ldr	r3, [sp, #32]
 801ff1c:	b11b      	cbz	r3, 801ff26 <sqrt+0x76>
 801ff1e:	f7ff f831 	bl	801ef84 <__errno>
 801ff22:	9b08      	ldr	r3, [sp, #32]
 801ff24:	6003      	str	r3, [r0, #0]
 801ff26:	ed9d 8b06 	vldr	d8, [sp, #24]
 801ff2a:	eeb0 0a48 	vmov.f32	s0, s16
 801ff2e:	eef0 0a68 	vmov.f32	s1, s17
 801ff32:	b00b      	add	sp, #44	; 0x2c
 801ff34:	ecbd 8b02 	vpop	{d8}
 801ff38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ff3c:	4642      	mov	r2, r8
 801ff3e:	464b      	mov	r3, r9
 801ff40:	4640      	mov	r0, r8
 801ff42:	4649      	mov	r1, r9
 801ff44:	f7e0 fc8e 	bl	8000864 <__aeabi_ddiv>
 801ff48:	2e02      	cmp	r6, #2
 801ff4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ff4e:	d1e0      	bne.n	801ff12 <sqrt+0x62>
 801ff50:	f7ff f818 	bl	801ef84 <__errno>
 801ff54:	2321      	movs	r3, #33	; 0x21
 801ff56:	6003      	str	r3, [r0, #0]
 801ff58:	e7df      	b.n	801ff1a <sqrt+0x6a>
 801ff5a:	bf00      	nop
 801ff5c:	20000b38 	.word	0x20000b38
 801ff60:	0802e837 	.word	0x0802e837

0801ff64 <sqrtf>:
 801ff64:	b510      	push	{r4, lr}
 801ff66:	ed2d 8b02 	vpush	{d8}
 801ff6a:	b08a      	sub	sp, #40	; 0x28
 801ff6c:	eeb0 8a40 	vmov.f32	s16, s0
 801ff70:	f001 f958 	bl	8021224 <__ieee754_sqrtf>
 801ff74:	4b21      	ldr	r3, [pc, #132]	; (801fffc <sqrtf+0x98>)
 801ff76:	f993 4000 	ldrsb.w	r4, [r3]
 801ff7a:	1c63      	adds	r3, r4, #1
 801ff7c:	d02c      	beq.n	801ffd8 <sqrtf+0x74>
 801ff7e:	eeb4 8a48 	vcmp.f32	s16, s16
 801ff82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff86:	d627      	bvs.n	801ffd8 <sqrtf+0x74>
 801ff88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ff8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff90:	d522      	bpl.n	801ffd8 <sqrtf+0x74>
 801ff92:	2301      	movs	r3, #1
 801ff94:	9300      	str	r3, [sp, #0]
 801ff96:	4b1a      	ldr	r3, [pc, #104]	; (8020000 <sqrtf+0x9c>)
 801ff98:	9301      	str	r3, [sp, #4]
 801ff9a:	ee18 0a10 	vmov	r0, s16
 801ff9e:	2300      	movs	r3, #0
 801ffa0:	9308      	str	r3, [sp, #32]
 801ffa2:	f7e0 fae1 	bl	8000568 <__aeabi_f2d>
 801ffa6:	2200      	movs	r2, #0
 801ffa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ffac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	b9ac      	cbnz	r4, 801ffe0 <sqrtf+0x7c>
 801ffb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ffb8:	4668      	mov	r0, sp
 801ffba:	f001 f989 	bl	80212d0 <matherr>
 801ffbe:	b1b8      	cbz	r0, 801fff0 <sqrtf+0x8c>
 801ffc0:	9b08      	ldr	r3, [sp, #32]
 801ffc2:	b11b      	cbz	r3, 801ffcc <sqrtf+0x68>
 801ffc4:	f7fe ffde 	bl	801ef84 <__errno>
 801ffc8:	9b08      	ldr	r3, [sp, #32]
 801ffca:	6003      	str	r3, [r0, #0]
 801ffcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ffd0:	f7e0 fe16 	bl	8000c00 <__aeabi_d2f>
 801ffd4:	ee00 0a10 	vmov	s0, r0
 801ffd8:	b00a      	add	sp, #40	; 0x28
 801ffda:	ecbd 8b02 	vpop	{d8}
 801ffde:	bd10      	pop	{r4, pc}
 801ffe0:	4610      	mov	r0, r2
 801ffe2:	4619      	mov	r1, r3
 801ffe4:	f7e0 fc3e 	bl	8000864 <__aeabi_ddiv>
 801ffe8:	2c02      	cmp	r4, #2
 801ffea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ffee:	d1e3      	bne.n	801ffb8 <sqrtf+0x54>
 801fff0:	f7fe ffc8 	bl	801ef84 <__errno>
 801fff4:	2321      	movs	r3, #33	; 0x21
 801fff6:	6003      	str	r3, [r0, #0]
 801fff8:	e7e2      	b.n	801ffc0 <sqrtf+0x5c>
 801fffa:	bf00      	nop
 801fffc:	20000b38 	.word	0x20000b38
 8020000:	0802e83c 	.word	0x0802e83c
 8020004:	00000000 	.word	0x00000000

08020008 <__ieee754_exp>:
 8020008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802000c:	ec55 4b10 	vmov	r4, r5, d0
 8020010:	4aad      	ldr	r2, [pc, #692]	; (80202c8 <__ieee754_exp+0x2c0>)
 8020012:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8020016:	4297      	cmp	r7, r2
 8020018:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 802001c:	f240 80af 	bls.w	802017e <__ieee754_exp+0x176>
 8020020:	4aaa      	ldr	r2, [pc, #680]	; (80202cc <__ieee754_exp+0x2c4>)
 8020022:	4297      	cmp	r7, r2
 8020024:	d915      	bls.n	8020052 <__ieee754_exp+0x4a>
 8020026:	f3c5 0313 	ubfx	r3, r5, #0, #20
 802002a:	4323      	orrs	r3, r4
 802002c:	d009      	beq.n	8020042 <__ieee754_exp+0x3a>
 802002e:	ee10 2a10 	vmov	r2, s0
 8020032:	462b      	mov	r3, r5
 8020034:	4620      	mov	r0, r4
 8020036:	4629      	mov	r1, r5
 8020038:	f7e0 f938 	bl	80002ac <__adddf3>
 802003c:	4604      	mov	r4, r0
 802003e:	460d      	mov	r5, r1
 8020040:	e002      	b.n	8020048 <__ieee754_exp+0x40>
 8020042:	b10e      	cbz	r6, 8020048 <__ieee754_exp+0x40>
 8020044:	2400      	movs	r4, #0
 8020046:	2500      	movs	r5, #0
 8020048:	ec45 4b10 	vmov	d0, r4, r5
 802004c:	b003      	add	sp, #12
 802004e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020052:	a387      	add	r3, pc, #540	; (adr r3, 8020270 <__ieee754_exp+0x268>)
 8020054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020058:	ee10 0a10 	vmov	r0, s0
 802005c:	4629      	mov	r1, r5
 802005e:	f7e0 fd67 	bl	8000b30 <__aeabi_dcmpgt>
 8020062:	b138      	cbz	r0, 8020074 <__ieee754_exp+0x6c>
 8020064:	a384      	add	r3, pc, #528	; (adr r3, 8020278 <__ieee754_exp+0x270>)
 8020066:	e9d3 2300 	ldrd	r2, r3, [r3]
 802006a:	4610      	mov	r0, r2
 802006c:	4619      	mov	r1, r3
 802006e:	f7e0 facf 	bl	8000610 <__aeabi_dmul>
 8020072:	e7e3      	b.n	802003c <__ieee754_exp+0x34>
 8020074:	a382      	add	r3, pc, #520	; (adr r3, 8020280 <__ieee754_exp+0x278>)
 8020076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802007a:	4620      	mov	r0, r4
 802007c:	4629      	mov	r1, r5
 802007e:	f7e0 fd39 	bl	8000af4 <__aeabi_dcmplt>
 8020082:	2800      	cmp	r0, #0
 8020084:	d1de      	bne.n	8020044 <__ieee754_exp+0x3c>
 8020086:	4b92      	ldr	r3, [pc, #584]	; (80202d0 <__ieee754_exp+0x2c8>)
 8020088:	429f      	cmp	r7, r3
 802008a:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 802008e:	f200 808e 	bhi.w	80201ae <__ieee754_exp+0x1a6>
 8020092:	4b90      	ldr	r3, [pc, #576]	; (80202d4 <__ieee754_exp+0x2cc>)
 8020094:	443b      	add	r3, r7
 8020096:	e9d3 2300 	ldrd	r2, r3, [r3]
 802009a:	4620      	mov	r0, r4
 802009c:	4629      	mov	r1, r5
 802009e:	f7e0 f903 	bl	80002a8 <__aeabi_dsub>
 80200a2:	4b8d      	ldr	r3, [pc, #564]	; (80202d8 <__ieee754_exp+0x2d0>)
 80200a4:	441f      	add	r7, r3
 80200a6:	ed97 7b00 	vldr	d7, [r7]
 80200aa:	ed8d 7b00 	vstr	d7, [sp]
 80200ae:	4682      	mov	sl, r0
 80200b0:	f1c6 0001 	rsb	r0, r6, #1
 80200b4:	468b      	mov	fp, r1
 80200b6:	1b86      	subs	r6, r0, r6
 80200b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80200bc:	4650      	mov	r0, sl
 80200be:	4659      	mov	r1, fp
 80200c0:	f7e0 f8f2 	bl	80002a8 <__aeabi_dsub>
 80200c4:	4604      	mov	r4, r0
 80200c6:	460d      	mov	r5, r1
 80200c8:	4622      	mov	r2, r4
 80200ca:	462b      	mov	r3, r5
 80200cc:	4620      	mov	r0, r4
 80200ce:	4629      	mov	r1, r5
 80200d0:	f7e0 fa9e 	bl	8000610 <__aeabi_dmul>
 80200d4:	a36c      	add	r3, pc, #432	; (adr r3, 8020288 <__ieee754_exp+0x280>)
 80200d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200da:	4680      	mov	r8, r0
 80200dc:	4689      	mov	r9, r1
 80200de:	f7e0 fa97 	bl	8000610 <__aeabi_dmul>
 80200e2:	a36b      	add	r3, pc, #428	; (adr r3, 8020290 <__ieee754_exp+0x288>)
 80200e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200e8:	f7e0 f8de 	bl	80002a8 <__aeabi_dsub>
 80200ec:	4642      	mov	r2, r8
 80200ee:	464b      	mov	r3, r9
 80200f0:	f7e0 fa8e 	bl	8000610 <__aeabi_dmul>
 80200f4:	a368      	add	r3, pc, #416	; (adr r3, 8020298 <__ieee754_exp+0x290>)
 80200f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200fa:	f7e0 f8d7 	bl	80002ac <__adddf3>
 80200fe:	4642      	mov	r2, r8
 8020100:	464b      	mov	r3, r9
 8020102:	f7e0 fa85 	bl	8000610 <__aeabi_dmul>
 8020106:	a366      	add	r3, pc, #408	; (adr r3, 80202a0 <__ieee754_exp+0x298>)
 8020108:	e9d3 2300 	ldrd	r2, r3, [r3]
 802010c:	f7e0 f8cc 	bl	80002a8 <__aeabi_dsub>
 8020110:	4642      	mov	r2, r8
 8020112:	464b      	mov	r3, r9
 8020114:	f7e0 fa7c 	bl	8000610 <__aeabi_dmul>
 8020118:	a363      	add	r3, pc, #396	; (adr r3, 80202a8 <__ieee754_exp+0x2a0>)
 802011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802011e:	f7e0 f8c5 	bl	80002ac <__adddf3>
 8020122:	4642      	mov	r2, r8
 8020124:	464b      	mov	r3, r9
 8020126:	f7e0 fa73 	bl	8000610 <__aeabi_dmul>
 802012a:	4602      	mov	r2, r0
 802012c:	460b      	mov	r3, r1
 802012e:	4620      	mov	r0, r4
 8020130:	4629      	mov	r1, r5
 8020132:	f7e0 f8b9 	bl	80002a8 <__aeabi_dsub>
 8020136:	4680      	mov	r8, r0
 8020138:	4689      	mov	r9, r1
 802013a:	4602      	mov	r2, r0
 802013c:	460b      	mov	r3, r1
 802013e:	4620      	mov	r0, r4
 8020140:	4629      	mov	r1, r5
 8020142:	2e00      	cmp	r6, #0
 8020144:	d162      	bne.n	802020c <__ieee754_exp+0x204>
 8020146:	f7e0 fa63 	bl	8000610 <__aeabi_dmul>
 802014a:	2200      	movs	r2, #0
 802014c:	4606      	mov	r6, r0
 802014e:	460f      	mov	r7, r1
 8020150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020154:	4640      	mov	r0, r8
 8020156:	4649      	mov	r1, r9
 8020158:	f7e0 f8a6 	bl	80002a8 <__aeabi_dsub>
 802015c:	4602      	mov	r2, r0
 802015e:	460b      	mov	r3, r1
 8020160:	4630      	mov	r0, r6
 8020162:	4639      	mov	r1, r7
 8020164:	f7e0 fb7e 	bl	8000864 <__aeabi_ddiv>
 8020168:	4622      	mov	r2, r4
 802016a:	462b      	mov	r3, r5
 802016c:	f7e0 f89c 	bl	80002a8 <__aeabi_dsub>
 8020170:	4602      	mov	r2, r0
 8020172:	460b      	mov	r3, r1
 8020174:	2000      	movs	r0, #0
 8020176:	4959      	ldr	r1, [pc, #356]	; (80202dc <__ieee754_exp+0x2d4>)
 8020178:	f7e0 f896 	bl	80002a8 <__aeabi_dsub>
 802017c:	e75e      	b.n	802003c <__ieee754_exp+0x34>
 802017e:	4b58      	ldr	r3, [pc, #352]	; (80202e0 <__ieee754_exp+0x2d8>)
 8020180:	429f      	cmp	r7, r3
 8020182:	d880      	bhi.n	8020086 <__ieee754_exp+0x7e>
 8020184:	4b57      	ldr	r3, [pc, #348]	; (80202e4 <__ieee754_exp+0x2dc>)
 8020186:	429f      	cmp	r7, r3
 8020188:	d83c      	bhi.n	8020204 <__ieee754_exp+0x1fc>
 802018a:	a33b      	add	r3, pc, #236	; (adr r3, 8020278 <__ieee754_exp+0x270>)
 802018c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020190:	ee10 0a10 	vmov	r0, s0
 8020194:	4629      	mov	r1, r5
 8020196:	f7e0 f889 	bl	80002ac <__adddf3>
 802019a:	2200      	movs	r2, #0
 802019c:	4b4f      	ldr	r3, [pc, #316]	; (80202dc <__ieee754_exp+0x2d4>)
 802019e:	f7e0 fcc7 	bl	8000b30 <__aeabi_dcmpgt>
 80201a2:	b388      	cbz	r0, 8020208 <__ieee754_exp+0x200>
 80201a4:	2200      	movs	r2, #0
 80201a6:	4b4d      	ldr	r3, [pc, #308]	; (80202dc <__ieee754_exp+0x2d4>)
 80201a8:	4620      	mov	r0, r4
 80201aa:	4629      	mov	r1, r5
 80201ac:	e744      	b.n	8020038 <__ieee754_exp+0x30>
 80201ae:	4e4e      	ldr	r6, [pc, #312]	; (80202e8 <__ieee754_exp+0x2e0>)
 80201b0:	a33f      	add	r3, pc, #252	; (adr r3, 80202b0 <__ieee754_exp+0x2a8>)
 80201b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201b6:	443e      	add	r6, r7
 80201b8:	4620      	mov	r0, r4
 80201ba:	4629      	mov	r1, r5
 80201bc:	f7e0 fa28 	bl	8000610 <__aeabi_dmul>
 80201c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80201c4:	f7e0 f872 	bl	80002ac <__adddf3>
 80201c8:	f7e0 fcd2 	bl	8000b70 <__aeabi_d2iz>
 80201cc:	4606      	mov	r6, r0
 80201ce:	f7e0 f9b9 	bl	8000544 <__aeabi_i2d>
 80201d2:	a339      	add	r3, pc, #228	; (adr r3, 80202b8 <__ieee754_exp+0x2b0>)
 80201d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201d8:	4680      	mov	r8, r0
 80201da:	4689      	mov	r9, r1
 80201dc:	f7e0 fa18 	bl	8000610 <__aeabi_dmul>
 80201e0:	4602      	mov	r2, r0
 80201e2:	460b      	mov	r3, r1
 80201e4:	4620      	mov	r0, r4
 80201e6:	4629      	mov	r1, r5
 80201e8:	f7e0 f85e 	bl	80002a8 <__aeabi_dsub>
 80201ec:	a334      	add	r3, pc, #208	; (adr r3, 80202c0 <__ieee754_exp+0x2b8>)
 80201ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201f2:	4682      	mov	sl, r0
 80201f4:	468b      	mov	fp, r1
 80201f6:	4640      	mov	r0, r8
 80201f8:	4649      	mov	r1, r9
 80201fa:	f7e0 fa09 	bl	8000610 <__aeabi_dmul>
 80201fe:	e9cd 0100 	strd	r0, r1, [sp]
 8020202:	e759      	b.n	80200b8 <__ieee754_exp+0xb0>
 8020204:	2600      	movs	r6, #0
 8020206:	e75f      	b.n	80200c8 <__ieee754_exp+0xc0>
 8020208:	4606      	mov	r6, r0
 802020a:	e75d      	b.n	80200c8 <__ieee754_exp+0xc0>
 802020c:	f7e0 fa00 	bl	8000610 <__aeabi_dmul>
 8020210:	4642      	mov	r2, r8
 8020212:	4604      	mov	r4, r0
 8020214:	460d      	mov	r5, r1
 8020216:	464b      	mov	r3, r9
 8020218:	2000      	movs	r0, #0
 802021a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802021e:	f7e0 f843 	bl	80002a8 <__aeabi_dsub>
 8020222:	4602      	mov	r2, r0
 8020224:	460b      	mov	r3, r1
 8020226:	4620      	mov	r0, r4
 8020228:	4629      	mov	r1, r5
 802022a:	f7e0 fb1b 	bl	8000864 <__aeabi_ddiv>
 802022e:	4602      	mov	r2, r0
 8020230:	460b      	mov	r3, r1
 8020232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020236:	f7e0 f837 	bl	80002a8 <__aeabi_dsub>
 802023a:	4652      	mov	r2, sl
 802023c:	465b      	mov	r3, fp
 802023e:	f7e0 f833 	bl	80002a8 <__aeabi_dsub>
 8020242:	460b      	mov	r3, r1
 8020244:	4602      	mov	r2, r0
 8020246:	4925      	ldr	r1, [pc, #148]	; (80202dc <__ieee754_exp+0x2d4>)
 8020248:	2000      	movs	r0, #0
 802024a:	f7e0 f82d 	bl	80002a8 <__aeabi_dsub>
 802024e:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8020252:	429e      	cmp	r6, r3
 8020254:	db02      	blt.n	802025c <__ieee754_exp+0x254>
 8020256:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 802025a:	e6ef      	b.n	802003c <__ieee754_exp+0x34>
 802025c:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8020260:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8020264:	2200      	movs	r2, #0
 8020266:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 802026a:	e700      	b.n	802006e <__ieee754_exp+0x66>
 802026c:	f3af 8000 	nop.w
 8020270:	fefa39ef 	.word	0xfefa39ef
 8020274:	40862e42 	.word	0x40862e42
 8020278:	8800759c 	.word	0x8800759c
 802027c:	7e37e43c 	.word	0x7e37e43c
 8020280:	d52d3051 	.word	0xd52d3051
 8020284:	c0874910 	.word	0xc0874910
 8020288:	72bea4d0 	.word	0x72bea4d0
 802028c:	3e663769 	.word	0x3e663769
 8020290:	c5d26bf1 	.word	0xc5d26bf1
 8020294:	3ebbbd41 	.word	0x3ebbbd41
 8020298:	af25de2c 	.word	0xaf25de2c
 802029c:	3f11566a 	.word	0x3f11566a
 80202a0:	16bebd93 	.word	0x16bebd93
 80202a4:	3f66c16c 	.word	0x3f66c16c
 80202a8:	5555553e 	.word	0x5555553e
 80202ac:	3fc55555 	.word	0x3fc55555
 80202b0:	652b82fe 	.word	0x652b82fe
 80202b4:	3ff71547 	.word	0x3ff71547
 80202b8:	fee00000 	.word	0xfee00000
 80202bc:	3fe62e42 	.word	0x3fe62e42
 80202c0:	35793c76 	.word	0x35793c76
 80202c4:	3dea39ef 	.word	0x3dea39ef
 80202c8:	40862e41 	.word	0x40862e41
 80202cc:	7fefffff 	.word	0x7fefffff
 80202d0:	3ff0a2b1 	.word	0x3ff0a2b1
 80202d4:	0802e858 	.word	0x0802e858
 80202d8:	0802e868 	.word	0x0802e868
 80202dc:	3ff00000 	.word	0x3ff00000
 80202e0:	3fd62e42 	.word	0x3fd62e42
 80202e4:	3e2fffff 	.word	0x3e2fffff
 80202e8:	0802e848 	.word	0x0802e848
 80202ec:	00000000 	.word	0x00000000

080202f0 <__ieee754_log>:
 80202f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f4:	ec51 0b10 	vmov	r0, r1, d0
 80202f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80202fc:	b087      	sub	sp, #28
 80202fe:	ee10 3a10 	vmov	r3, s0
 8020302:	460d      	mov	r5, r1
 8020304:	da27      	bge.n	8020356 <__ieee754_log+0x66>
 8020306:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802030a:	4313      	orrs	r3, r2
 802030c:	d10a      	bne.n	8020324 <__ieee754_log+0x34>
 802030e:	49cc      	ldr	r1, [pc, #816]	; (8020640 <__ieee754_log+0x350>)
 8020310:	2200      	movs	r2, #0
 8020312:	2300      	movs	r3, #0
 8020314:	2000      	movs	r0, #0
 8020316:	f7e0 faa5 	bl	8000864 <__aeabi_ddiv>
 802031a:	ec41 0b10 	vmov	d0, r0, r1
 802031e:	b007      	add	sp, #28
 8020320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020324:	2900      	cmp	r1, #0
 8020326:	da07      	bge.n	8020338 <__ieee754_log+0x48>
 8020328:	ee10 2a10 	vmov	r2, s0
 802032c:	460b      	mov	r3, r1
 802032e:	f7df ffbb 	bl	80002a8 <__aeabi_dsub>
 8020332:	2200      	movs	r2, #0
 8020334:	2300      	movs	r3, #0
 8020336:	e7ee      	b.n	8020316 <__ieee754_log+0x26>
 8020338:	4bc2      	ldr	r3, [pc, #776]	; (8020644 <__ieee754_log+0x354>)
 802033a:	2200      	movs	r2, #0
 802033c:	f7e0 f968 	bl	8000610 <__aeabi_dmul>
 8020340:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8020344:	460d      	mov	r5, r1
 8020346:	4ac0      	ldr	r2, [pc, #768]	; (8020648 <__ieee754_log+0x358>)
 8020348:	4295      	cmp	r5, r2
 802034a:	dd06      	ble.n	802035a <__ieee754_log+0x6a>
 802034c:	4602      	mov	r2, r0
 802034e:	460b      	mov	r3, r1
 8020350:	f7df ffac 	bl	80002ac <__adddf3>
 8020354:	e7e1      	b.n	802031a <__ieee754_log+0x2a>
 8020356:	2300      	movs	r3, #0
 8020358:	e7f5      	b.n	8020346 <__ieee754_log+0x56>
 802035a:	152c      	asrs	r4, r5, #20
 802035c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8020360:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8020364:	441c      	add	r4, r3
 8020366:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 802036a:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802036e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020372:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8020376:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 802037a:	ea42 0105 	orr.w	r1, r2, r5
 802037e:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8020382:	2200      	movs	r2, #0
 8020384:	4bb1      	ldr	r3, [pc, #708]	; (802064c <__ieee754_log+0x35c>)
 8020386:	f7df ff8f 	bl	80002a8 <__aeabi_dsub>
 802038a:	1cab      	adds	r3, r5, #2
 802038c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020390:	2b02      	cmp	r3, #2
 8020392:	4682      	mov	sl, r0
 8020394:	468b      	mov	fp, r1
 8020396:	f04f 0200 	mov.w	r2, #0
 802039a:	dc5b      	bgt.n	8020454 <__ieee754_log+0x164>
 802039c:	2300      	movs	r3, #0
 802039e:	f7e0 fb9f 	bl	8000ae0 <__aeabi_dcmpeq>
 80203a2:	b1d0      	cbz	r0, 80203da <__ieee754_log+0xea>
 80203a4:	2c00      	cmp	r4, #0
 80203a6:	f000 8170 	beq.w	802068a <__ieee754_log+0x39a>
 80203aa:	4620      	mov	r0, r4
 80203ac:	f7e0 f8ca 	bl	8000544 <__aeabi_i2d>
 80203b0:	a38f      	add	r3, pc, #572	; (adr r3, 80205f0 <__ieee754_log+0x300>)
 80203b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203b6:	4606      	mov	r6, r0
 80203b8:	460f      	mov	r7, r1
 80203ba:	f7e0 f929 	bl	8000610 <__aeabi_dmul>
 80203be:	a38e      	add	r3, pc, #568	; (adr r3, 80205f8 <__ieee754_log+0x308>)
 80203c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203c4:	4604      	mov	r4, r0
 80203c6:	460d      	mov	r5, r1
 80203c8:	4630      	mov	r0, r6
 80203ca:	4639      	mov	r1, r7
 80203cc:	f7e0 f920 	bl	8000610 <__aeabi_dmul>
 80203d0:	4602      	mov	r2, r0
 80203d2:	460b      	mov	r3, r1
 80203d4:	4620      	mov	r0, r4
 80203d6:	4629      	mov	r1, r5
 80203d8:	e7ba      	b.n	8020350 <__ieee754_log+0x60>
 80203da:	a389      	add	r3, pc, #548	; (adr r3, 8020600 <__ieee754_log+0x310>)
 80203dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203e0:	4650      	mov	r0, sl
 80203e2:	4659      	mov	r1, fp
 80203e4:	f7e0 f914 	bl	8000610 <__aeabi_dmul>
 80203e8:	4602      	mov	r2, r0
 80203ea:	460b      	mov	r3, r1
 80203ec:	2000      	movs	r0, #0
 80203ee:	4998      	ldr	r1, [pc, #608]	; (8020650 <__ieee754_log+0x360>)
 80203f0:	f7df ff5a 	bl	80002a8 <__aeabi_dsub>
 80203f4:	4652      	mov	r2, sl
 80203f6:	4606      	mov	r6, r0
 80203f8:	460f      	mov	r7, r1
 80203fa:	465b      	mov	r3, fp
 80203fc:	4650      	mov	r0, sl
 80203fe:	4659      	mov	r1, fp
 8020400:	f7e0 f906 	bl	8000610 <__aeabi_dmul>
 8020404:	4602      	mov	r2, r0
 8020406:	460b      	mov	r3, r1
 8020408:	4630      	mov	r0, r6
 802040a:	4639      	mov	r1, r7
 802040c:	f7e0 f900 	bl	8000610 <__aeabi_dmul>
 8020410:	4606      	mov	r6, r0
 8020412:	460f      	mov	r7, r1
 8020414:	b934      	cbnz	r4, 8020424 <__ieee754_log+0x134>
 8020416:	4602      	mov	r2, r0
 8020418:	460b      	mov	r3, r1
 802041a:	4650      	mov	r0, sl
 802041c:	4659      	mov	r1, fp
 802041e:	f7df ff43 	bl	80002a8 <__aeabi_dsub>
 8020422:	e77a      	b.n	802031a <__ieee754_log+0x2a>
 8020424:	4620      	mov	r0, r4
 8020426:	f7e0 f88d 	bl	8000544 <__aeabi_i2d>
 802042a:	a371      	add	r3, pc, #452	; (adr r3, 80205f0 <__ieee754_log+0x300>)
 802042c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020430:	4680      	mov	r8, r0
 8020432:	4689      	mov	r9, r1
 8020434:	f7e0 f8ec 	bl	8000610 <__aeabi_dmul>
 8020438:	a36f      	add	r3, pc, #444	; (adr r3, 80205f8 <__ieee754_log+0x308>)
 802043a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802043e:	4604      	mov	r4, r0
 8020440:	460d      	mov	r5, r1
 8020442:	4640      	mov	r0, r8
 8020444:	4649      	mov	r1, r9
 8020446:	f7e0 f8e3 	bl	8000610 <__aeabi_dmul>
 802044a:	4602      	mov	r2, r0
 802044c:	460b      	mov	r3, r1
 802044e:	4630      	mov	r0, r6
 8020450:	4639      	mov	r1, r7
 8020452:	e0b2      	b.n	80205ba <__ieee754_log+0x2ca>
 8020454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020458:	f7df ff28 	bl	80002ac <__adddf3>
 802045c:	4602      	mov	r2, r0
 802045e:	460b      	mov	r3, r1
 8020460:	4650      	mov	r0, sl
 8020462:	4659      	mov	r1, fp
 8020464:	f7e0 f9fe 	bl	8000864 <__aeabi_ddiv>
 8020468:	e9cd 0100 	strd	r0, r1, [sp]
 802046c:	4620      	mov	r0, r4
 802046e:	f7e0 f869 	bl	8000544 <__aeabi_i2d>
 8020472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802047a:	4610      	mov	r0, r2
 802047c:	4619      	mov	r1, r3
 802047e:	f7e0 f8c7 	bl	8000610 <__aeabi_dmul>
 8020482:	4602      	mov	r2, r0
 8020484:	460b      	mov	r3, r1
 8020486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802048a:	f7e0 f8c1 	bl	8000610 <__aeabi_dmul>
 802048e:	a35e      	add	r3, pc, #376	; (adr r3, 8020608 <__ieee754_log+0x318>)
 8020490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020494:	4606      	mov	r6, r0
 8020496:	460f      	mov	r7, r1
 8020498:	f7e0 f8ba 	bl	8000610 <__aeabi_dmul>
 802049c:	a35c      	add	r3, pc, #368	; (adr r3, 8020610 <__ieee754_log+0x320>)
 802049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204a2:	f7df ff03 	bl	80002ac <__adddf3>
 80204a6:	4632      	mov	r2, r6
 80204a8:	463b      	mov	r3, r7
 80204aa:	f7e0 f8b1 	bl	8000610 <__aeabi_dmul>
 80204ae:	a35a      	add	r3, pc, #360	; (adr r3, 8020618 <__ieee754_log+0x328>)
 80204b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204b4:	f7df fefa 	bl	80002ac <__adddf3>
 80204b8:	4632      	mov	r2, r6
 80204ba:	463b      	mov	r3, r7
 80204bc:	f7e0 f8a8 	bl	8000610 <__aeabi_dmul>
 80204c0:	a357      	add	r3, pc, #348	; (adr r3, 8020620 <__ieee754_log+0x330>)
 80204c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204c6:	f7df fef1 	bl	80002ac <__adddf3>
 80204ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80204ce:	f7e0 f89f 	bl	8000610 <__aeabi_dmul>
 80204d2:	a355      	add	r3, pc, #340	; (adr r3, 8020628 <__ieee754_log+0x338>)
 80204d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80204dc:	4630      	mov	r0, r6
 80204de:	4639      	mov	r1, r7
 80204e0:	f7e0 f896 	bl	8000610 <__aeabi_dmul>
 80204e4:	a352      	add	r3, pc, #328	; (adr r3, 8020630 <__ieee754_log+0x340>)
 80204e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204ea:	f7df fedf 	bl	80002ac <__adddf3>
 80204ee:	4632      	mov	r2, r6
 80204f0:	463b      	mov	r3, r7
 80204f2:	f7e0 f88d 	bl	8000610 <__aeabi_dmul>
 80204f6:	a350      	add	r3, pc, #320	; (adr r3, 8020638 <__ieee754_log+0x348>)
 80204f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204fc:	f7df fed6 	bl	80002ac <__adddf3>
 8020500:	4632      	mov	r2, r6
 8020502:	463b      	mov	r3, r7
 8020504:	f7e0 f884 	bl	8000610 <__aeabi_dmul>
 8020508:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 802050c:	4602      	mov	r2, r0
 802050e:	460b      	mov	r3, r1
 8020510:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8020514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020518:	f7df fec8 	bl	80002ac <__adddf3>
 802051c:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8020520:	3551      	adds	r5, #81	; 0x51
 8020522:	ea45 0508 	orr.w	r5, r5, r8
 8020526:	2d00      	cmp	r5, #0
 8020528:	4606      	mov	r6, r0
 802052a:	460f      	mov	r7, r1
 802052c:	dd50      	ble.n	80205d0 <__ieee754_log+0x2e0>
 802052e:	2200      	movs	r2, #0
 8020530:	4b47      	ldr	r3, [pc, #284]	; (8020650 <__ieee754_log+0x360>)
 8020532:	4650      	mov	r0, sl
 8020534:	4659      	mov	r1, fp
 8020536:	f7e0 f86b 	bl	8000610 <__aeabi_dmul>
 802053a:	4652      	mov	r2, sl
 802053c:	465b      	mov	r3, fp
 802053e:	f7e0 f867 	bl	8000610 <__aeabi_dmul>
 8020542:	4680      	mov	r8, r0
 8020544:	4689      	mov	r9, r1
 8020546:	b994      	cbnz	r4, 802056e <__ieee754_log+0x27e>
 8020548:	4602      	mov	r2, r0
 802054a:	460b      	mov	r3, r1
 802054c:	4630      	mov	r0, r6
 802054e:	4639      	mov	r1, r7
 8020550:	f7df feac 	bl	80002ac <__adddf3>
 8020554:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020558:	f7e0 f85a 	bl	8000610 <__aeabi_dmul>
 802055c:	4602      	mov	r2, r0
 802055e:	460b      	mov	r3, r1
 8020560:	4640      	mov	r0, r8
 8020562:	4649      	mov	r1, r9
 8020564:	f7df fea0 	bl	80002a8 <__aeabi_dsub>
 8020568:	4602      	mov	r2, r0
 802056a:	460b      	mov	r3, r1
 802056c:	e755      	b.n	802041a <__ieee754_log+0x12a>
 802056e:	a320      	add	r3, pc, #128	; (adr r3, 80205f0 <__ieee754_log+0x300>)
 8020570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020578:	f7e0 f84a 	bl	8000610 <__aeabi_dmul>
 802057c:	4642      	mov	r2, r8
 802057e:	464b      	mov	r3, r9
 8020580:	4604      	mov	r4, r0
 8020582:	460d      	mov	r5, r1
 8020584:	4630      	mov	r0, r6
 8020586:	4639      	mov	r1, r7
 8020588:	f7df fe90 	bl	80002ac <__adddf3>
 802058c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020590:	f7e0 f83e 	bl	8000610 <__aeabi_dmul>
 8020594:	a318      	add	r3, pc, #96	; (adr r3, 80205f8 <__ieee754_log+0x308>)
 8020596:	e9d3 2300 	ldrd	r2, r3, [r3]
 802059a:	4606      	mov	r6, r0
 802059c:	460f      	mov	r7, r1
 802059e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80205a2:	f7e0 f835 	bl	8000610 <__aeabi_dmul>
 80205a6:	4602      	mov	r2, r0
 80205a8:	460b      	mov	r3, r1
 80205aa:	4630      	mov	r0, r6
 80205ac:	4639      	mov	r1, r7
 80205ae:	f7df fe7d 	bl	80002ac <__adddf3>
 80205b2:	4602      	mov	r2, r0
 80205b4:	460b      	mov	r3, r1
 80205b6:	4640      	mov	r0, r8
 80205b8:	4649      	mov	r1, r9
 80205ba:	f7df fe75 	bl	80002a8 <__aeabi_dsub>
 80205be:	4652      	mov	r2, sl
 80205c0:	465b      	mov	r3, fp
 80205c2:	f7df fe71 	bl	80002a8 <__aeabi_dsub>
 80205c6:	4602      	mov	r2, r0
 80205c8:	460b      	mov	r3, r1
 80205ca:	4620      	mov	r0, r4
 80205cc:	4629      	mov	r1, r5
 80205ce:	e726      	b.n	802041e <__ieee754_log+0x12e>
 80205d0:	2c00      	cmp	r4, #0
 80205d2:	d13f      	bne.n	8020654 <__ieee754_log+0x364>
 80205d4:	4602      	mov	r2, r0
 80205d6:	460b      	mov	r3, r1
 80205d8:	4650      	mov	r0, sl
 80205da:	4659      	mov	r1, fp
 80205dc:	f7df fe64 	bl	80002a8 <__aeabi_dsub>
 80205e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80205e4:	f7e0 f814 	bl	8000610 <__aeabi_dmul>
 80205e8:	e7be      	b.n	8020568 <__ieee754_log+0x278>
 80205ea:	bf00      	nop
 80205ec:	f3af 8000 	nop.w
 80205f0:	fee00000 	.word	0xfee00000
 80205f4:	3fe62e42 	.word	0x3fe62e42
 80205f8:	35793c76 	.word	0x35793c76
 80205fc:	3dea39ef 	.word	0x3dea39ef
 8020600:	55555555 	.word	0x55555555
 8020604:	3fd55555 	.word	0x3fd55555
 8020608:	df3e5244 	.word	0xdf3e5244
 802060c:	3fc2f112 	.word	0x3fc2f112
 8020610:	96cb03de 	.word	0x96cb03de
 8020614:	3fc74664 	.word	0x3fc74664
 8020618:	94229359 	.word	0x94229359
 802061c:	3fd24924 	.word	0x3fd24924
 8020620:	55555593 	.word	0x55555593
 8020624:	3fe55555 	.word	0x3fe55555
 8020628:	d078c69f 	.word	0xd078c69f
 802062c:	3fc39a09 	.word	0x3fc39a09
 8020630:	1d8e78af 	.word	0x1d8e78af
 8020634:	3fcc71c5 	.word	0x3fcc71c5
 8020638:	9997fa04 	.word	0x9997fa04
 802063c:	3fd99999 	.word	0x3fd99999
 8020640:	c3500000 	.word	0xc3500000
 8020644:	43500000 	.word	0x43500000
 8020648:	7fefffff 	.word	0x7fefffff
 802064c:	3ff00000 	.word	0x3ff00000
 8020650:	3fe00000 	.word	0x3fe00000
 8020654:	a30e      	add	r3, pc, #56	; (adr r3, 8020690 <__ieee754_log+0x3a0>)
 8020656:	e9d3 2300 	ldrd	r2, r3, [r3]
 802065a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802065e:	f7df ffd7 	bl	8000610 <__aeabi_dmul>
 8020662:	4632      	mov	r2, r6
 8020664:	463b      	mov	r3, r7
 8020666:	4604      	mov	r4, r0
 8020668:	460d      	mov	r5, r1
 802066a:	4650      	mov	r0, sl
 802066c:	4659      	mov	r1, fp
 802066e:	f7df fe1b 	bl	80002a8 <__aeabi_dsub>
 8020672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020676:	f7df ffcb 	bl	8000610 <__aeabi_dmul>
 802067a:	a307      	add	r3, pc, #28	; (adr r3, 8020698 <__ieee754_log+0x3a8>)
 802067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020680:	4606      	mov	r6, r0
 8020682:	460f      	mov	r7, r1
 8020684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020688:	e6dd      	b.n	8020446 <__ieee754_log+0x156>
 802068a:	2000      	movs	r0, #0
 802068c:	2100      	movs	r1, #0
 802068e:	e644      	b.n	802031a <__ieee754_log+0x2a>
 8020690:	fee00000 	.word	0xfee00000
 8020694:	3fe62e42 	.word	0x3fe62e42
 8020698:	35793c76 	.word	0x35793c76
 802069c:	3dea39ef 	.word	0x3dea39ef

080206a0 <__ieee754_pow>:
 80206a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206a4:	b091      	sub	sp, #68	; 0x44
 80206a6:	ed8d 1b00 	vstr	d1, [sp]
 80206aa:	e89d 0204 	ldmia.w	sp, {r2, r9}
 80206ae:	ec57 6b10 	vmov	r6, r7, d0
 80206b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80206b6:	ea58 0302 	orrs.w	r3, r8, r2
 80206ba:	ee10 aa10 	vmov	sl, s0
 80206be:	463d      	mov	r5, r7
 80206c0:	f000 84bd 	beq.w	802103e <__ieee754_pow+0x99e>
 80206c4:	4b78      	ldr	r3, [pc, #480]	; (80208a8 <__ieee754_pow+0x208>)
 80206c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80206ca:	429c      	cmp	r4, r3
 80206cc:	dc09      	bgt.n	80206e2 <__ieee754_pow+0x42>
 80206ce:	d103      	bne.n	80206d8 <__ieee754_pow+0x38>
 80206d0:	b93e      	cbnz	r6, 80206e2 <__ieee754_pow+0x42>
 80206d2:	45a0      	cmp	r8, r4
 80206d4:	dc0d      	bgt.n	80206f2 <__ieee754_pow+0x52>
 80206d6:	e001      	b.n	80206dc <__ieee754_pow+0x3c>
 80206d8:	4598      	cmp	r8, r3
 80206da:	dc02      	bgt.n	80206e2 <__ieee754_pow+0x42>
 80206dc:	4598      	cmp	r8, r3
 80206de:	d10e      	bne.n	80206fe <__ieee754_pow+0x5e>
 80206e0:	b16a      	cbz	r2, 80206fe <__ieee754_pow+0x5e>
 80206e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80206e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80206ea:	ea54 030a 	orrs.w	r3, r4, sl
 80206ee:	f000 84a6 	beq.w	802103e <__ieee754_pow+0x99e>
 80206f2:	486e      	ldr	r0, [pc, #440]	; (80208ac <__ieee754_pow+0x20c>)
 80206f4:	b011      	add	sp, #68	; 0x44
 80206f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206fa:	f000 bded 	b.w	80212d8 <nan>
 80206fe:	2d00      	cmp	r5, #0
 8020700:	da53      	bge.n	80207aa <__ieee754_pow+0x10a>
 8020702:	4b6b      	ldr	r3, [pc, #428]	; (80208b0 <__ieee754_pow+0x210>)
 8020704:	4598      	cmp	r8, r3
 8020706:	dc4d      	bgt.n	80207a4 <__ieee754_pow+0x104>
 8020708:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802070c:	4598      	cmp	r8, r3
 802070e:	dd4c      	ble.n	80207aa <__ieee754_pow+0x10a>
 8020710:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020714:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020718:	2b14      	cmp	r3, #20
 802071a:	dd26      	ble.n	802076a <__ieee754_pow+0xca>
 802071c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8020720:	fa22 f103 	lsr.w	r1, r2, r3
 8020724:	fa01 f303 	lsl.w	r3, r1, r3
 8020728:	429a      	cmp	r2, r3
 802072a:	d13e      	bne.n	80207aa <__ieee754_pow+0x10a>
 802072c:	f001 0101 	and.w	r1, r1, #1
 8020730:	f1c1 0b02 	rsb	fp, r1, #2
 8020734:	2a00      	cmp	r2, #0
 8020736:	d15b      	bne.n	80207f0 <__ieee754_pow+0x150>
 8020738:	4b5b      	ldr	r3, [pc, #364]	; (80208a8 <__ieee754_pow+0x208>)
 802073a:	4598      	cmp	r8, r3
 802073c:	d124      	bne.n	8020788 <__ieee754_pow+0xe8>
 802073e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8020742:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020746:	ea53 030a 	orrs.w	r3, r3, sl
 802074a:	f000 8478 	beq.w	802103e <__ieee754_pow+0x99e>
 802074e:	4b59      	ldr	r3, [pc, #356]	; (80208b4 <__ieee754_pow+0x214>)
 8020750:	429c      	cmp	r4, r3
 8020752:	dd2d      	ble.n	80207b0 <__ieee754_pow+0x110>
 8020754:	f1b9 0f00 	cmp.w	r9, #0
 8020758:	f280 8475 	bge.w	8021046 <__ieee754_pow+0x9a6>
 802075c:	2000      	movs	r0, #0
 802075e:	2100      	movs	r1, #0
 8020760:	ec41 0b10 	vmov	d0, r0, r1
 8020764:	b011      	add	sp, #68	; 0x44
 8020766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802076a:	2a00      	cmp	r2, #0
 802076c:	d13e      	bne.n	80207ec <__ieee754_pow+0x14c>
 802076e:	f1c3 0314 	rsb	r3, r3, #20
 8020772:	fa48 f103 	asr.w	r1, r8, r3
 8020776:	fa01 f303 	lsl.w	r3, r1, r3
 802077a:	4598      	cmp	r8, r3
 802077c:	f040 846b 	bne.w	8021056 <__ieee754_pow+0x9b6>
 8020780:	f001 0101 	and.w	r1, r1, #1
 8020784:	f1c1 0b02 	rsb	fp, r1, #2
 8020788:	4b4b      	ldr	r3, [pc, #300]	; (80208b8 <__ieee754_pow+0x218>)
 802078a:	4598      	cmp	r8, r3
 802078c:	d118      	bne.n	80207c0 <__ieee754_pow+0x120>
 802078e:	f1b9 0f00 	cmp.w	r9, #0
 8020792:	f280 845c 	bge.w	802104e <__ieee754_pow+0x9ae>
 8020796:	4948      	ldr	r1, [pc, #288]	; (80208b8 <__ieee754_pow+0x218>)
 8020798:	4632      	mov	r2, r6
 802079a:	463b      	mov	r3, r7
 802079c:	2000      	movs	r0, #0
 802079e:	f7e0 f861 	bl	8000864 <__aeabi_ddiv>
 80207a2:	e7dd      	b.n	8020760 <__ieee754_pow+0xc0>
 80207a4:	f04f 0b02 	mov.w	fp, #2
 80207a8:	e7c4      	b.n	8020734 <__ieee754_pow+0x94>
 80207aa:	f04f 0b00 	mov.w	fp, #0
 80207ae:	e7c1      	b.n	8020734 <__ieee754_pow+0x94>
 80207b0:	f1b9 0f00 	cmp.w	r9, #0
 80207b4:	dad2      	bge.n	802075c <__ieee754_pow+0xbc>
 80207b6:	e89d 0009 	ldmia.w	sp, {r0, r3}
 80207ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80207be:	e7cf      	b.n	8020760 <__ieee754_pow+0xc0>
 80207c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80207c4:	d106      	bne.n	80207d4 <__ieee754_pow+0x134>
 80207c6:	4632      	mov	r2, r6
 80207c8:	463b      	mov	r3, r7
 80207ca:	4610      	mov	r0, r2
 80207cc:	4619      	mov	r1, r3
 80207ce:	f7df ff1f 	bl	8000610 <__aeabi_dmul>
 80207d2:	e7c5      	b.n	8020760 <__ieee754_pow+0xc0>
 80207d4:	4b39      	ldr	r3, [pc, #228]	; (80208bc <__ieee754_pow+0x21c>)
 80207d6:	4599      	cmp	r9, r3
 80207d8:	d10a      	bne.n	80207f0 <__ieee754_pow+0x150>
 80207da:	2d00      	cmp	r5, #0
 80207dc:	db08      	blt.n	80207f0 <__ieee754_pow+0x150>
 80207de:	ec47 6b10 	vmov	d0, r6, r7
 80207e2:	b011      	add	sp, #68	; 0x44
 80207e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207e8:	f000 bc6c 	b.w	80210c4 <__ieee754_sqrt>
 80207ec:	f04f 0b00 	mov.w	fp, #0
 80207f0:	ec47 6b10 	vmov	d0, r6, r7
 80207f4:	f000 fd5d 	bl	80212b2 <fabs>
 80207f8:	ec51 0b10 	vmov	r0, r1, d0
 80207fc:	f1ba 0f00 	cmp.w	sl, #0
 8020800:	d127      	bne.n	8020852 <__ieee754_pow+0x1b2>
 8020802:	b124      	cbz	r4, 802080e <__ieee754_pow+0x16e>
 8020804:	4b2c      	ldr	r3, [pc, #176]	; (80208b8 <__ieee754_pow+0x218>)
 8020806:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802080a:	429a      	cmp	r2, r3
 802080c:	d121      	bne.n	8020852 <__ieee754_pow+0x1b2>
 802080e:	f1b9 0f00 	cmp.w	r9, #0
 8020812:	da05      	bge.n	8020820 <__ieee754_pow+0x180>
 8020814:	4602      	mov	r2, r0
 8020816:	460b      	mov	r3, r1
 8020818:	2000      	movs	r0, #0
 802081a:	4927      	ldr	r1, [pc, #156]	; (80208b8 <__ieee754_pow+0x218>)
 802081c:	f7e0 f822 	bl	8000864 <__aeabi_ddiv>
 8020820:	2d00      	cmp	r5, #0
 8020822:	da9d      	bge.n	8020760 <__ieee754_pow+0xc0>
 8020824:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020828:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802082c:	ea54 030b 	orrs.w	r3, r4, fp
 8020830:	d108      	bne.n	8020844 <__ieee754_pow+0x1a4>
 8020832:	4602      	mov	r2, r0
 8020834:	460b      	mov	r3, r1
 8020836:	4610      	mov	r0, r2
 8020838:	4619      	mov	r1, r3
 802083a:	f7df fd35 	bl	80002a8 <__aeabi_dsub>
 802083e:	4602      	mov	r2, r0
 8020840:	460b      	mov	r3, r1
 8020842:	e7ac      	b.n	802079e <__ieee754_pow+0xfe>
 8020844:	f1bb 0f01 	cmp.w	fp, #1
 8020848:	d18a      	bne.n	8020760 <__ieee754_pow+0xc0>
 802084a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802084e:	4619      	mov	r1, r3
 8020850:	e786      	b.n	8020760 <__ieee754_pow+0xc0>
 8020852:	0fed      	lsrs	r5, r5, #31
 8020854:	1e6b      	subs	r3, r5, #1
 8020856:	930d      	str	r3, [sp, #52]	; 0x34
 8020858:	ea5b 0303 	orrs.w	r3, fp, r3
 802085c:	d102      	bne.n	8020864 <__ieee754_pow+0x1c4>
 802085e:	4632      	mov	r2, r6
 8020860:	463b      	mov	r3, r7
 8020862:	e7e8      	b.n	8020836 <__ieee754_pow+0x196>
 8020864:	4b16      	ldr	r3, [pc, #88]	; (80208c0 <__ieee754_pow+0x220>)
 8020866:	4598      	cmp	r8, r3
 8020868:	f340 80fe 	ble.w	8020a68 <__ieee754_pow+0x3c8>
 802086c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020870:	4598      	cmp	r8, r3
 8020872:	dd0a      	ble.n	802088a <__ieee754_pow+0x1ea>
 8020874:	4b0f      	ldr	r3, [pc, #60]	; (80208b4 <__ieee754_pow+0x214>)
 8020876:	429c      	cmp	r4, r3
 8020878:	dc0d      	bgt.n	8020896 <__ieee754_pow+0x1f6>
 802087a:	f1b9 0f00 	cmp.w	r9, #0
 802087e:	f6bf af6d 	bge.w	802075c <__ieee754_pow+0xbc>
 8020882:	a307      	add	r3, pc, #28	; (adr r3, 80208a0 <__ieee754_pow+0x200>)
 8020884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020888:	e79f      	b.n	80207ca <__ieee754_pow+0x12a>
 802088a:	4b0e      	ldr	r3, [pc, #56]	; (80208c4 <__ieee754_pow+0x224>)
 802088c:	429c      	cmp	r4, r3
 802088e:	ddf4      	ble.n	802087a <__ieee754_pow+0x1da>
 8020890:	4b09      	ldr	r3, [pc, #36]	; (80208b8 <__ieee754_pow+0x218>)
 8020892:	429c      	cmp	r4, r3
 8020894:	dd18      	ble.n	80208c8 <__ieee754_pow+0x228>
 8020896:	f1b9 0f00 	cmp.w	r9, #0
 802089a:	dcf2      	bgt.n	8020882 <__ieee754_pow+0x1e2>
 802089c:	e75e      	b.n	802075c <__ieee754_pow+0xbc>
 802089e:	bf00      	nop
 80208a0:	8800759c 	.word	0x8800759c
 80208a4:	7e37e43c 	.word	0x7e37e43c
 80208a8:	7ff00000 	.word	0x7ff00000
 80208ac:	0802e711 	.word	0x0802e711
 80208b0:	433fffff 	.word	0x433fffff
 80208b4:	3fefffff 	.word	0x3fefffff
 80208b8:	3ff00000 	.word	0x3ff00000
 80208bc:	3fe00000 	.word	0x3fe00000
 80208c0:	41e00000 	.word	0x41e00000
 80208c4:	3feffffe 	.word	0x3feffffe
 80208c8:	2200      	movs	r2, #0
 80208ca:	4b63      	ldr	r3, [pc, #396]	; (8020a58 <__ieee754_pow+0x3b8>)
 80208cc:	f7df fcec 	bl	80002a8 <__aeabi_dsub>
 80208d0:	a355      	add	r3, pc, #340	; (adr r3, 8020a28 <__ieee754_pow+0x388>)
 80208d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208d6:	4604      	mov	r4, r0
 80208d8:	460d      	mov	r5, r1
 80208da:	f7df fe99 	bl	8000610 <__aeabi_dmul>
 80208de:	a354      	add	r3, pc, #336	; (adr r3, 8020a30 <__ieee754_pow+0x390>)
 80208e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208e4:	4606      	mov	r6, r0
 80208e6:	460f      	mov	r7, r1
 80208e8:	4620      	mov	r0, r4
 80208ea:	4629      	mov	r1, r5
 80208ec:	f7df fe90 	bl	8000610 <__aeabi_dmul>
 80208f0:	2200      	movs	r2, #0
 80208f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80208f6:	4b59      	ldr	r3, [pc, #356]	; (8020a5c <__ieee754_pow+0x3bc>)
 80208f8:	4620      	mov	r0, r4
 80208fa:	4629      	mov	r1, r5
 80208fc:	f7df fe88 	bl	8000610 <__aeabi_dmul>
 8020900:	4602      	mov	r2, r0
 8020902:	460b      	mov	r3, r1
 8020904:	a14c      	add	r1, pc, #304	; (adr r1, 8020a38 <__ieee754_pow+0x398>)
 8020906:	e9d1 0100 	ldrd	r0, r1, [r1]
 802090a:	f7df fccd 	bl	80002a8 <__aeabi_dsub>
 802090e:	4622      	mov	r2, r4
 8020910:	462b      	mov	r3, r5
 8020912:	f7df fe7d 	bl	8000610 <__aeabi_dmul>
 8020916:	4602      	mov	r2, r0
 8020918:	460b      	mov	r3, r1
 802091a:	2000      	movs	r0, #0
 802091c:	4950      	ldr	r1, [pc, #320]	; (8020a60 <__ieee754_pow+0x3c0>)
 802091e:	f7df fcc3 	bl	80002a8 <__aeabi_dsub>
 8020922:	4622      	mov	r2, r4
 8020924:	462b      	mov	r3, r5
 8020926:	4680      	mov	r8, r0
 8020928:	4689      	mov	r9, r1
 802092a:	4620      	mov	r0, r4
 802092c:	4629      	mov	r1, r5
 802092e:	f7df fe6f 	bl	8000610 <__aeabi_dmul>
 8020932:	4602      	mov	r2, r0
 8020934:	460b      	mov	r3, r1
 8020936:	4640      	mov	r0, r8
 8020938:	4649      	mov	r1, r9
 802093a:	f7df fe69 	bl	8000610 <__aeabi_dmul>
 802093e:	a340      	add	r3, pc, #256	; (adr r3, 8020a40 <__ieee754_pow+0x3a0>)
 8020940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020944:	f7df fe64 	bl	8000610 <__aeabi_dmul>
 8020948:	4602      	mov	r2, r0
 802094a:	460b      	mov	r3, r1
 802094c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020950:	f7df fcaa 	bl	80002a8 <__aeabi_dsub>
 8020954:	4602      	mov	r2, r0
 8020956:	460b      	mov	r3, r1
 8020958:	4604      	mov	r4, r0
 802095a:	460d      	mov	r5, r1
 802095c:	4630      	mov	r0, r6
 802095e:	4639      	mov	r1, r7
 8020960:	f7df fca4 	bl	80002ac <__adddf3>
 8020964:	2000      	movs	r0, #0
 8020966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802096a:	4632      	mov	r2, r6
 802096c:	463b      	mov	r3, r7
 802096e:	f7df fc9b 	bl	80002a8 <__aeabi_dsub>
 8020972:	4602      	mov	r2, r0
 8020974:	460b      	mov	r3, r1
 8020976:	4620      	mov	r0, r4
 8020978:	4629      	mov	r1, r5
 802097a:	f7df fc95 	bl	80002a8 <__aeabi_dsub>
 802097e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020980:	f10b 33ff 	add.w	r3, fp, #4294967295
 8020984:	4313      	orrs	r3, r2
 8020986:	4606      	mov	r6, r0
 8020988:	460f      	mov	r7, r1
 802098a:	f040 81eb 	bne.w	8020d64 <__ieee754_pow+0x6c4>
 802098e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8020a48 <__ieee754_pow+0x3a8>
 8020992:	e9dd 4500 	ldrd	r4, r5, [sp]
 8020996:	2400      	movs	r4, #0
 8020998:	4622      	mov	r2, r4
 802099a:	462b      	mov	r3, r5
 802099c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80209a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80209a4:	f7df fc80 	bl	80002a8 <__aeabi_dsub>
 80209a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80209ac:	f7df fe30 	bl	8000610 <__aeabi_dmul>
 80209b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80209b4:	4680      	mov	r8, r0
 80209b6:	4689      	mov	r9, r1
 80209b8:	4630      	mov	r0, r6
 80209ba:	4639      	mov	r1, r7
 80209bc:	f7df fe28 	bl	8000610 <__aeabi_dmul>
 80209c0:	4602      	mov	r2, r0
 80209c2:	460b      	mov	r3, r1
 80209c4:	4640      	mov	r0, r8
 80209c6:	4649      	mov	r1, r9
 80209c8:	f7df fc70 	bl	80002ac <__adddf3>
 80209cc:	4622      	mov	r2, r4
 80209ce:	462b      	mov	r3, r5
 80209d0:	4680      	mov	r8, r0
 80209d2:	4689      	mov	r9, r1
 80209d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80209d8:	f7df fe1a 	bl	8000610 <__aeabi_dmul>
 80209dc:	460b      	mov	r3, r1
 80209de:	4604      	mov	r4, r0
 80209e0:	460d      	mov	r5, r1
 80209e2:	4602      	mov	r2, r0
 80209e4:	4649      	mov	r1, r9
 80209e6:	4640      	mov	r0, r8
 80209e8:	e9cd 4500 	strd	r4, r5, [sp]
 80209ec:	f7df fc5e 	bl	80002ac <__adddf3>
 80209f0:	4b1c      	ldr	r3, [pc, #112]	; (8020a64 <__ieee754_pow+0x3c4>)
 80209f2:	4299      	cmp	r1, r3
 80209f4:	4606      	mov	r6, r0
 80209f6:	460f      	mov	r7, r1
 80209f8:	468b      	mov	fp, r1
 80209fa:	f340 82f7 	ble.w	8020fec <__ieee754_pow+0x94c>
 80209fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8020a02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8020a06:	4303      	orrs	r3, r0
 8020a08:	f000 81ea 	beq.w	8020de0 <__ieee754_pow+0x740>
 8020a0c:	a310      	add	r3, pc, #64	; (adr r3, 8020a50 <__ieee754_pow+0x3b0>)
 8020a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020a16:	f7df fdfb 	bl	8000610 <__aeabi_dmul>
 8020a1a:	a30d      	add	r3, pc, #52	; (adr r3, 8020a50 <__ieee754_pow+0x3b0>)
 8020a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a20:	e6d5      	b.n	80207ce <__ieee754_pow+0x12e>
 8020a22:	bf00      	nop
 8020a24:	f3af 8000 	nop.w
 8020a28:	60000000 	.word	0x60000000
 8020a2c:	3ff71547 	.word	0x3ff71547
 8020a30:	f85ddf44 	.word	0xf85ddf44
 8020a34:	3e54ae0b 	.word	0x3e54ae0b
 8020a38:	55555555 	.word	0x55555555
 8020a3c:	3fd55555 	.word	0x3fd55555
 8020a40:	652b82fe 	.word	0x652b82fe
 8020a44:	3ff71547 	.word	0x3ff71547
 8020a48:	00000000 	.word	0x00000000
 8020a4c:	bff00000 	.word	0xbff00000
 8020a50:	8800759c 	.word	0x8800759c
 8020a54:	7e37e43c 	.word	0x7e37e43c
 8020a58:	3ff00000 	.word	0x3ff00000
 8020a5c:	3fd00000 	.word	0x3fd00000
 8020a60:	3fe00000 	.word	0x3fe00000
 8020a64:	408fffff 	.word	0x408fffff
 8020a68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8020a6c:	f04f 0200 	mov.w	r2, #0
 8020a70:	da05      	bge.n	8020a7e <__ieee754_pow+0x3de>
 8020a72:	4bd3      	ldr	r3, [pc, #844]	; (8020dc0 <__ieee754_pow+0x720>)
 8020a74:	f7df fdcc 	bl	8000610 <__aeabi_dmul>
 8020a78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020a7c:	460c      	mov	r4, r1
 8020a7e:	1523      	asrs	r3, r4, #20
 8020a80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020a84:	4413      	add	r3, r2
 8020a86:	9307      	str	r3, [sp, #28]
 8020a88:	4bce      	ldr	r3, [pc, #824]	; (8020dc4 <__ieee754_pow+0x724>)
 8020a8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020a8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020a92:	429c      	cmp	r4, r3
 8020a94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020a98:	dd08      	ble.n	8020aac <__ieee754_pow+0x40c>
 8020a9a:	4bcb      	ldr	r3, [pc, #812]	; (8020dc8 <__ieee754_pow+0x728>)
 8020a9c:	429c      	cmp	r4, r3
 8020a9e:	f340 815e 	ble.w	8020d5e <__ieee754_pow+0x6be>
 8020aa2:	9b07      	ldr	r3, [sp, #28]
 8020aa4:	3301      	adds	r3, #1
 8020aa6:	9307      	str	r3, [sp, #28]
 8020aa8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020aac:	f04f 0a00 	mov.w	sl, #0
 8020ab0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8020ab4:	930c      	str	r3, [sp, #48]	; 0x30
 8020ab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ab8:	4bc4      	ldr	r3, [pc, #784]	; (8020dcc <__ieee754_pow+0x72c>)
 8020aba:	4413      	add	r3, r2
 8020abc:	ed93 7b00 	vldr	d7, [r3]
 8020ac0:	4629      	mov	r1, r5
 8020ac2:	ec53 2b17 	vmov	r2, r3, d7
 8020ac6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020aca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020ace:	f7df fbeb 	bl	80002a8 <__aeabi_dsub>
 8020ad2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020ad6:	4606      	mov	r6, r0
 8020ad8:	460f      	mov	r7, r1
 8020ada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020ade:	f7df fbe5 	bl	80002ac <__adddf3>
 8020ae2:	4602      	mov	r2, r0
 8020ae4:	460b      	mov	r3, r1
 8020ae6:	2000      	movs	r0, #0
 8020ae8:	49b9      	ldr	r1, [pc, #740]	; (8020dd0 <__ieee754_pow+0x730>)
 8020aea:	f7df febb 	bl	8000864 <__aeabi_ddiv>
 8020aee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8020af2:	4602      	mov	r2, r0
 8020af4:	460b      	mov	r3, r1
 8020af6:	4630      	mov	r0, r6
 8020af8:	4639      	mov	r1, r7
 8020afa:	f7df fd89 	bl	8000610 <__aeabi_dmul>
 8020afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020b02:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8020b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8020b0a:	2300      	movs	r3, #0
 8020b0c:	9302      	str	r3, [sp, #8]
 8020b0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8020b12:	106d      	asrs	r5, r5, #1
 8020b14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8020b18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8020b22:	4640      	mov	r0, r8
 8020b24:	4649      	mov	r1, r9
 8020b26:	4614      	mov	r4, r2
 8020b28:	461d      	mov	r5, r3
 8020b2a:	f7df fd71 	bl	8000610 <__aeabi_dmul>
 8020b2e:	4602      	mov	r2, r0
 8020b30:	460b      	mov	r3, r1
 8020b32:	4630      	mov	r0, r6
 8020b34:	4639      	mov	r1, r7
 8020b36:	f7df fbb7 	bl	80002a8 <__aeabi_dsub>
 8020b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020b3e:	4606      	mov	r6, r0
 8020b40:	460f      	mov	r7, r1
 8020b42:	4620      	mov	r0, r4
 8020b44:	4629      	mov	r1, r5
 8020b46:	f7df fbaf 	bl	80002a8 <__aeabi_dsub>
 8020b4a:	4602      	mov	r2, r0
 8020b4c:	460b      	mov	r3, r1
 8020b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020b52:	f7df fba9 	bl	80002a8 <__aeabi_dsub>
 8020b56:	4642      	mov	r2, r8
 8020b58:	464b      	mov	r3, r9
 8020b5a:	f7df fd59 	bl	8000610 <__aeabi_dmul>
 8020b5e:	4602      	mov	r2, r0
 8020b60:	460b      	mov	r3, r1
 8020b62:	4630      	mov	r0, r6
 8020b64:	4639      	mov	r1, r7
 8020b66:	f7df fb9f 	bl	80002a8 <__aeabi_dsub>
 8020b6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8020b6e:	f7df fd4f 	bl	8000610 <__aeabi_dmul>
 8020b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020b76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020b7a:	4610      	mov	r0, r2
 8020b7c:	4619      	mov	r1, r3
 8020b7e:	f7df fd47 	bl	8000610 <__aeabi_dmul>
 8020b82:	a37b      	add	r3, pc, #492	; (adr r3, 8020d70 <__ieee754_pow+0x6d0>)
 8020b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b88:	4604      	mov	r4, r0
 8020b8a:	460d      	mov	r5, r1
 8020b8c:	f7df fd40 	bl	8000610 <__aeabi_dmul>
 8020b90:	a379      	add	r3, pc, #484	; (adr r3, 8020d78 <__ieee754_pow+0x6d8>)
 8020b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b96:	f7df fb89 	bl	80002ac <__adddf3>
 8020b9a:	4622      	mov	r2, r4
 8020b9c:	462b      	mov	r3, r5
 8020b9e:	f7df fd37 	bl	8000610 <__aeabi_dmul>
 8020ba2:	a377      	add	r3, pc, #476	; (adr r3, 8020d80 <__ieee754_pow+0x6e0>)
 8020ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ba8:	f7df fb80 	bl	80002ac <__adddf3>
 8020bac:	4622      	mov	r2, r4
 8020bae:	462b      	mov	r3, r5
 8020bb0:	f7df fd2e 	bl	8000610 <__aeabi_dmul>
 8020bb4:	a374      	add	r3, pc, #464	; (adr r3, 8020d88 <__ieee754_pow+0x6e8>)
 8020bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bba:	f7df fb77 	bl	80002ac <__adddf3>
 8020bbe:	4622      	mov	r2, r4
 8020bc0:	462b      	mov	r3, r5
 8020bc2:	f7df fd25 	bl	8000610 <__aeabi_dmul>
 8020bc6:	a372      	add	r3, pc, #456	; (adr r3, 8020d90 <__ieee754_pow+0x6f0>)
 8020bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bcc:	f7df fb6e 	bl	80002ac <__adddf3>
 8020bd0:	4622      	mov	r2, r4
 8020bd2:	462b      	mov	r3, r5
 8020bd4:	f7df fd1c 	bl	8000610 <__aeabi_dmul>
 8020bd8:	a36f      	add	r3, pc, #444	; (adr r3, 8020d98 <__ieee754_pow+0x6f8>)
 8020bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bde:	f7df fb65 	bl	80002ac <__adddf3>
 8020be2:	4622      	mov	r2, r4
 8020be4:	4606      	mov	r6, r0
 8020be6:	460f      	mov	r7, r1
 8020be8:	462b      	mov	r3, r5
 8020bea:	4620      	mov	r0, r4
 8020bec:	4629      	mov	r1, r5
 8020bee:	f7df fd0f 	bl	8000610 <__aeabi_dmul>
 8020bf2:	4602      	mov	r2, r0
 8020bf4:	460b      	mov	r3, r1
 8020bf6:	4630      	mov	r0, r6
 8020bf8:	4639      	mov	r1, r7
 8020bfa:	f7df fd09 	bl	8000610 <__aeabi_dmul>
 8020bfe:	4642      	mov	r2, r8
 8020c00:	4604      	mov	r4, r0
 8020c02:	460d      	mov	r5, r1
 8020c04:	464b      	mov	r3, r9
 8020c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020c0a:	f7df fb4f 	bl	80002ac <__adddf3>
 8020c0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020c12:	f7df fcfd 	bl	8000610 <__aeabi_dmul>
 8020c16:	4622      	mov	r2, r4
 8020c18:	462b      	mov	r3, r5
 8020c1a:	f7df fb47 	bl	80002ac <__adddf3>
 8020c1e:	4642      	mov	r2, r8
 8020c20:	4606      	mov	r6, r0
 8020c22:	460f      	mov	r7, r1
 8020c24:	464b      	mov	r3, r9
 8020c26:	4640      	mov	r0, r8
 8020c28:	4649      	mov	r1, r9
 8020c2a:	f7df fcf1 	bl	8000610 <__aeabi_dmul>
 8020c2e:	2200      	movs	r2, #0
 8020c30:	4b68      	ldr	r3, [pc, #416]	; (8020dd4 <__ieee754_pow+0x734>)
 8020c32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8020c36:	f7df fb39 	bl	80002ac <__adddf3>
 8020c3a:	4632      	mov	r2, r6
 8020c3c:	463b      	mov	r3, r7
 8020c3e:	f7df fb35 	bl	80002ac <__adddf3>
 8020c42:	9802      	ldr	r0, [sp, #8]
 8020c44:	460d      	mov	r5, r1
 8020c46:	4604      	mov	r4, r0
 8020c48:	4602      	mov	r2, r0
 8020c4a:	460b      	mov	r3, r1
 8020c4c:	4640      	mov	r0, r8
 8020c4e:	4649      	mov	r1, r9
 8020c50:	f7df fcde 	bl	8000610 <__aeabi_dmul>
 8020c54:	2200      	movs	r2, #0
 8020c56:	4680      	mov	r8, r0
 8020c58:	4689      	mov	r9, r1
 8020c5a:	4b5e      	ldr	r3, [pc, #376]	; (8020dd4 <__ieee754_pow+0x734>)
 8020c5c:	4620      	mov	r0, r4
 8020c5e:	4629      	mov	r1, r5
 8020c60:	f7df fb22 	bl	80002a8 <__aeabi_dsub>
 8020c64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020c68:	f7df fb1e 	bl	80002a8 <__aeabi_dsub>
 8020c6c:	4602      	mov	r2, r0
 8020c6e:	460b      	mov	r3, r1
 8020c70:	4630      	mov	r0, r6
 8020c72:	4639      	mov	r1, r7
 8020c74:	f7df fb18 	bl	80002a8 <__aeabi_dsub>
 8020c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020c7c:	f7df fcc8 	bl	8000610 <__aeabi_dmul>
 8020c80:	4622      	mov	r2, r4
 8020c82:	4606      	mov	r6, r0
 8020c84:	460f      	mov	r7, r1
 8020c86:	462b      	mov	r3, r5
 8020c88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020c8c:	f7df fcc0 	bl	8000610 <__aeabi_dmul>
 8020c90:	4602      	mov	r2, r0
 8020c92:	460b      	mov	r3, r1
 8020c94:	4630      	mov	r0, r6
 8020c96:	4639      	mov	r1, r7
 8020c98:	f7df fb08 	bl	80002ac <__adddf3>
 8020c9c:	4606      	mov	r6, r0
 8020c9e:	460f      	mov	r7, r1
 8020ca0:	4602      	mov	r2, r0
 8020ca2:	460b      	mov	r3, r1
 8020ca4:	4640      	mov	r0, r8
 8020ca6:	4649      	mov	r1, r9
 8020ca8:	f7df fb00 	bl	80002ac <__adddf3>
 8020cac:	9802      	ldr	r0, [sp, #8]
 8020cae:	a33c      	add	r3, pc, #240	; (adr r3, 8020da0 <__ieee754_pow+0x700>)
 8020cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb4:	4604      	mov	r4, r0
 8020cb6:	460d      	mov	r5, r1
 8020cb8:	f7df fcaa 	bl	8000610 <__aeabi_dmul>
 8020cbc:	4642      	mov	r2, r8
 8020cbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020cc2:	464b      	mov	r3, r9
 8020cc4:	4620      	mov	r0, r4
 8020cc6:	4629      	mov	r1, r5
 8020cc8:	f7df faee 	bl	80002a8 <__aeabi_dsub>
 8020ccc:	4602      	mov	r2, r0
 8020cce:	460b      	mov	r3, r1
 8020cd0:	4630      	mov	r0, r6
 8020cd2:	4639      	mov	r1, r7
 8020cd4:	f7df fae8 	bl	80002a8 <__aeabi_dsub>
 8020cd8:	a333      	add	r3, pc, #204	; (adr r3, 8020da8 <__ieee754_pow+0x708>)
 8020cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cde:	f7df fc97 	bl	8000610 <__aeabi_dmul>
 8020ce2:	a333      	add	r3, pc, #204	; (adr r3, 8020db0 <__ieee754_pow+0x710>)
 8020ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ce8:	4606      	mov	r6, r0
 8020cea:	460f      	mov	r7, r1
 8020cec:	4620      	mov	r0, r4
 8020cee:	4629      	mov	r1, r5
 8020cf0:	f7df fc8e 	bl	8000610 <__aeabi_dmul>
 8020cf4:	4602      	mov	r2, r0
 8020cf6:	460b      	mov	r3, r1
 8020cf8:	4630      	mov	r0, r6
 8020cfa:	4639      	mov	r1, r7
 8020cfc:	f7df fad6 	bl	80002ac <__adddf3>
 8020d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020d02:	4b35      	ldr	r3, [pc, #212]	; (8020dd8 <__ieee754_pow+0x738>)
 8020d04:	4413      	add	r3, r2
 8020d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d0a:	f7df facf 	bl	80002ac <__adddf3>
 8020d0e:	4604      	mov	r4, r0
 8020d10:	9807      	ldr	r0, [sp, #28]
 8020d12:	460d      	mov	r5, r1
 8020d14:	f7df fc16 	bl	8000544 <__aeabi_i2d>
 8020d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020d1a:	4b30      	ldr	r3, [pc, #192]	; (8020ddc <__ieee754_pow+0x73c>)
 8020d1c:	4413      	add	r3, r2
 8020d1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020d22:	4606      	mov	r6, r0
 8020d24:	460f      	mov	r7, r1
 8020d26:	4622      	mov	r2, r4
 8020d28:	462b      	mov	r3, r5
 8020d2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020d2e:	f7df fabd 	bl	80002ac <__adddf3>
 8020d32:	4642      	mov	r2, r8
 8020d34:	464b      	mov	r3, r9
 8020d36:	f7df fab9 	bl	80002ac <__adddf3>
 8020d3a:	4632      	mov	r2, r6
 8020d3c:	463b      	mov	r3, r7
 8020d3e:	f7df fab5 	bl	80002ac <__adddf3>
 8020d42:	9802      	ldr	r0, [sp, #8]
 8020d44:	4632      	mov	r2, r6
 8020d46:	463b      	mov	r3, r7
 8020d48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020d4c:	f7df faac 	bl	80002a8 <__aeabi_dsub>
 8020d50:	4642      	mov	r2, r8
 8020d52:	464b      	mov	r3, r9
 8020d54:	f7df faa8 	bl	80002a8 <__aeabi_dsub>
 8020d58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020d5c:	e607      	b.n	802096e <__ieee754_pow+0x2ce>
 8020d5e:	f04f 0a01 	mov.w	sl, #1
 8020d62:	e6a5      	b.n	8020ab0 <__ieee754_pow+0x410>
 8020d64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8020db8 <__ieee754_pow+0x718>
 8020d68:	e613      	b.n	8020992 <__ieee754_pow+0x2f2>
 8020d6a:	bf00      	nop
 8020d6c:	f3af 8000 	nop.w
 8020d70:	4a454eef 	.word	0x4a454eef
 8020d74:	3fca7e28 	.word	0x3fca7e28
 8020d78:	93c9db65 	.word	0x93c9db65
 8020d7c:	3fcd864a 	.word	0x3fcd864a
 8020d80:	a91d4101 	.word	0xa91d4101
 8020d84:	3fd17460 	.word	0x3fd17460
 8020d88:	518f264d 	.word	0x518f264d
 8020d8c:	3fd55555 	.word	0x3fd55555
 8020d90:	db6fabff 	.word	0xdb6fabff
 8020d94:	3fdb6db6 	.word	0x3fdb6db6
 8020d98:	33333303 	.word	0x33333303
 8020d9c:	3fe33333 	.word	0x3fe33333
 8020da0:	e0000000 	.word	0xe0000000
 8020da4:	3feec709 	.word	0x3feec709
 8020da8:	dc3a03fd 	.word	0xdc3a03fd
 8020dac:	3feec709 	.word	0x3feec709
 8020db0:	145b01f5 	.word	0x145b01f5
 8020db4:	be3e2fe0 	.word	0xbe3e2fe0
 8020db8:	00000000 	.word	0x00000000
 8020dbc:	3ff00000 	.word	0x3ff00000
 8020dc0:	43400000 	.word	0x43400000
 8020dc4:	0003988e 	.word	0x0003988e
 8020dc8:	000bb679 	.word	0x000bb679
 8020dcc:	0802e878 	.word	0x0802e878
 8020dd0:	3ff00000 	.word	0x3ff00000
 8020dd4:	40080000 	.word	0x40080000
 8020dd8:	0802e898 	.word	0x0802e898
 8020ddc:	0802e888 	.word	0x0802e888
 8020de0:	a3b6      	add	r3, pc, #728	; (adr r3, 80210bc <__ieee754_pow+0xa1c>)
 8020de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020de6:	4640      	mov	r0, r8
 8020de8:	4649      	mov	r1, r9
 8020dea:	f7df fa5f 	bl	80002ac <__adddf3>
 8020dee:	4622      	mov	r2, r4
 8020df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020df4:	462b      	mov	r3, r5
 8020df6:	4630      	mov	r0, r6
 8020df8:	4639      	mov	r1, r7
 8020dfa:	f7df fa55 	bl	80002a8 <__aeabi_dsub>
 8020dfe:	4602      	mov	r2, r0
 8020e00:	460b      	mov	r3, r1
 8020e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020e06:	f7df fe93 	bl	8000b30 <__aeabi_dcmpgt>
 8020e0a:	2800      	cmp	r0, #0
 8020e0c:	f47f adfe 	bne.w	8020a0c <__ieee754_pow+0x36c>
 8020e10:	4aa5      	ldr	r2, [pc, #660]	; (80210a8 <__ieee754_pow+0xa08>)
 8020e12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020e16:	4293      	cmp	r3, r2
 8020e18:	f340 810c 	ble.w	8021034 <__ieee754_pow+0x994>
 8020e1c:	151b      	asrs	r3, r3, #20
 8020e1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020e22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020e26:	fa4a f303 	asr.w	r3, sl, r3
 8020e2a:	445b      	add	r3, fp
 8020e2c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020e30:	4e9e      	ldr	r6, [pc, #632]	; (80210ac <__ieee754_pow+0xa0c>)
 8020e32:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020e36:	4116      	asrs	r6, r2
 8020e38:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020e3c:	2000      	movs	r0, #0
 8020e3e:	ea23 0106 	bic.w	r1, r3, r6
 8020e42:	f1c2 0214 	rsb	r2, r2, #20
 8020e46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020e4a:	fa4a fa02 	asr.w	sl, sl, r2
 8020e4e:	f1bb 0f00 	cmp.w	fp, #0
 8020e52:	4602      	mov	r2, r0
 8020e54:	460b      	mov	r3, r1
 8020e56:	4620      	mov	r0, r4
 8020e58:	4629      	mov	r1, r5
 8020e5a:	bfb8      	it	lt
 8020e5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8020e60:	f7df fa22 	bl	80002a8 <__aeabi_dsub>
 8020e64:	e9cd 0100 	strd	r0, r1, [sp]
 8020e68:	4642      	mov	r2, r8
 8020e6a:	464b      	mov	r3, r9
 8020e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e70:	f7df fa1c 	bl	80002ac <__adddf3>
 8020e74:	2000      	movs	r0, #0
 8020e76:	a37a      	add	r3, pc, #488	; (adr r3, 8021060 <__ieee754_pow+0x9c0>)
 8020e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e7c:	4604      	mov	r4, r0
 8020e7e:	460d      	mov	r5, r1
 8020e80:	f7df fbc6 	bl	8000610 <__aeabi_dmul>
 8020e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020e88:	4606      	mov	r6, r0
 8020e8a:	460f      	mov	r7, r1
 8020e8c:	4620      	mov	r0, r4
 8020e8e:	4629      	mov	r1, r5
 8020e90:	f7df fa0a 	bl	80002a8 <__aeabi_dsub>
 8020e94:	4602      	mov	r2, r0
 8020e96:	460b      	mov	r3, r1
 8020e98:	4640      	mov	r0, r8
 8020e9a:	4649      	mov	r1, r9
 8020e9c:	f7df fa04 	bl	80002a8 <__aeabi_dsub>
 8020ea0:	a371      	add	r3, pc, #452	; (adr r3, 8021068 <__ieee754_pow+0x9c8>)
 8020ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ea6:	f7df fbb3 	bl	8000610 <__aeabi_dmul>
 8020eaa:	a371      	add	r3, pc, #452	; (adr r3, 8021070 <__ieee754_pow+0x9d0>)
 8020eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eb0:	4680      	mov	r8, r0
 8020eb2:	4689      	mov	r9, r1
 8020eb4:	4620      	mov	r0, r4
 8020eb6:	4629      	mov	r1, r5
 8020eb8:	f7df fbaa 	bl	8000610 <__aeabi_dmul>
 8020ebc:	4602      	mov	r2, r0
 8020ebe:	460b      	mov	r3, r1
 8020ec0:	4640      	mov	r0, r8
 8020ec2:	4649      	mov	r1, r9
 8020ec4:	f7df f9f2 	bl	80002ac <__adddf3>
 8020ec8:	4604      	mov	r4, r0
 8020eca:	460d      	mov	r5, r1
 8020ecc:	4602      	mov	r2, r0
 8020ece:	460b      	mov	r3, r1
 8020ed0:	4630      	mov	r0, r6
 8020ed2:	4639      	mov	r1, r7
 8020ed4:	f7df f9ea 	bl	80002ac <__adddf3>
 8020ed8:	4632      	mov	r2, r6
 8020eda:	463b      	mov	r3, r7
 8020edc:	4680      	mov	r8, r0
 8020ede:	4689      	mov	r9, r1
 8020ee0:	f7df f9e2 	bl	80002a8 <__aeabi_dsub>
 8020ee4:	4602      	mov	r2, r0
 8020ee6:	460b      	mov	r3, r1
 8020ee8:	4620      	mov	r0, r4
 8020eea:	4629      	mov	r1, r5
 8020eec:	f7df f9dc 	bl	80002a8 <__aeabi_dsub>
 8020ef0:	4642      	mov	r2, r8
 8020ef2:	4606      	mov	r6, r0
 8020ef4:	460f      	mov	r7, r1
 8020ef6:	464b      	mov	r3, r9
 8020ef8:	4640      	mov	r0, r8
 8020efa:	4649      	mov	r1, r9
 8020efc:	f7df fb88 	bl	8000610 <__aeabi_dmul>
 8020f00:	a35d      	add	r3, pc, #372	; (adr r3, 8021078 <__ieee754_pow+0x9d8>)
 8020f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f06:	4604      	mov	r4, r0
 8020f08:	460d      	mov	r5, r1
 8020f0a:	f7df fb81 	bl	8000610 <__aeabi_dmul>
 8020f0e:	a35c      	add	r3, pc, #368	; (adr r3, 8021080 <__ieee754_pow+0x9e0>)
 8020f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f14:	f7df f9c8 	bl	80002a8 <__aeabi_dsub>
 8020f18:	4622      	mov	r2, r4
 8020f1a:	462b      	mov	r3, r5
 8020f1c:	f7df fb78 	bl	8000610 <__aeabi_dmul>
 8020f20:	a359      	add	r3, pc, #356	; (adr r3, 8021088 <__ieee754_pow+0x9e8>)
 8020f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f26:	f7df f9c1 	bl	80002ac <__adddf3>
 8020f2a:	4622      	mov	r2, r4
 8020f2c:	462b      	mov	r3, r5
 8020f2e:	f7df fb6f 	bl	8000610 <__aeabi_dmul>
 8020f32:	a357      	add	r3, pc, #348	; (adr r3, 8021090 <__ieee754_pow+0x9f0>)
 8020f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f38:	f7df f9b6 	bl	80002a8 <__aeabi_dsub>
 8020f3c:	4622      	mov	r2, r4
 8020f3e:	462b      	mov	r3, r5
 8020f40:	f7df fb66 	bl	8000610 <__aeabi_dmul>
 8020f44:	a354      	add	r3, pc, #336	; (adr r3, 8021098 <__ieee754_pow+0x9f8>)
 8020f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f4a:	f7df f9af 	bl	80002ac <__adddf3>
 8020f4e:	4622      	mov	r2, r4
 8020f50:	462b      	mov	r3, r5
 8020f52:	f7df fb5d 	bl	8000610 <__aeabi_dmul>
 8020f56:	4602      	mov	r2, r0
 8020f58:	460b      	mov	r3, r1
 8020f5a:	4640      	mov	r0, r8
 8020f5c:	4649      	mov	r1, r9
 8020f5e:	f7df f9a3 	bl	80002a8 <__aeabi_dsub>
 8020f62:	4604      	mov	r4, r0
 8020f64:	460d      	mov	r5, r1
 8020f66:	4602      	mov	r2, r0
 8020f68:	460b      	mov	r3, r1
 8020f6a:	4640      	mov	r0, r8
 8020f6c:	4649      	mov	r1, r9
 8020f6e:	f7df fb4f 	bl	8000610 <__aeabi_dmul>
 8020f72:	2200      	movs	r2, #0
 8020f74:	e9cd 0100 	strd	r0, r1, [sp]
 8020f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	4629      	mov	r1, r5
 8020f80:	f7df f992 	bl	80002a8 <__aeabi_dsub>
 8020f84:	4602      	mov	r2, r0
 8020f86:	460b      	mov	r3, r1
 8020f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020f8c:	f7df fc6a 	bl	8000864 <__aeabi_ddiv>
 8020f90:	4632      	mov	r2, r6
 8020f92:	4604      	mov	r4, r0
 8020f94:	460d      	mov	r5, r1
 8020f96:	463b      	mov	r3, r7
 8020f98:	4640      	mov	r0, r8
 8020f9a:	4649      	mov	r1, r9
 8020f9c:	f7df fb38 	bl	8000610 <__aeabi_dmul>
 8020fa0:	4632      	mov	r2, r6
 8020fa2:	463b      	mov	r3, r7
 8020fa4:	f7df f982 	bl	80002ac <__adddf3>
 8020fa8:	4602      	mov	r2, r0
 8020faa:	460b      	mov	r3, r1
 8020fac:	4620      	mov	r0, r4
 8020fae:	4629      	mov	r1, r5
 8020fb0:	f7df f97a 	bl	80002a8 <__aeabi_dsub>
 8020fb4:	4642      	mov	r2, r8
 8020fb6:	464b      	mov	r3, r9
 8020fb8:	f7df f976 	bl	80002a8 <__aeabi_dsub>
 8020fbc:	4602      	mov	r2, r0
 8020fbe:	460b      	mov	r3, r1
 8020fc0:	2000      	movs	r0, #0
 8020fc2:	493b      	ldr	r1, [pc, #236]	; (80210b0 <__ieee754_pow+0xa10>)
 8020fc4:	f7df f970 	bl	80002a8 <__aeabi_dsub>
 8020fc8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8020fcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8020fd0:	4602      	mov	r2, r0
 8020fd2:	460b      	mov	r3, r1
 8020fd4:	da31      	bge.n	802103a <__ieee754_pow+0x99a>
 8020fd6:	4650      	mov	r0, sl
 8020fd8:	ec43 2b10 	vmov	d0, r2, r3
 8020fdc:	f000 fa0c 	bl	80213f8 <scalbn>
 8020fe0:	ec51 0b10 	vmov	r0, r1, d0
 8020fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020fe8:	f7ff bbf1 	b.w	80207ce <__ieee754_pow+0x12e>
 8020fec:	4b31      	ldr	r3, [pc, #196]	; (80210b4 <__ieee754_pow+0xa14>)
 8020fee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8020ff2:	429e      	cmp	r6, r3
 8020ff4:	f77f af0c 	ble.w	8020e10 <__ieee754_pow+0x770>
 8020ff8:	4b2f      	ldr	r3, [pc, #188]	; (80210b8 <__ieee754_pow+0xa18>)
 8020ffa:	440b      	add	r3, r1
 8020ffc:	4303      	orrs	r3, r0
 8020ffe:	d00b      	beq.n	8021018 <__ieee754_pow+0x978>
 8021000:	a327      	add	r3, pc, #156	; (adr r3, 80210a0 <__ieee754_pow+0xa00>)
 8021002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802100a:	f7df fb01 	bl	8000610 <__aeabi_dmul>
 802100e:	a324      	add	r3, pc, #144	; (adr r3, 80210a0 <__ieee754_pow+0xa00>)
 8021010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021014:	f7ff bbdb 	b.w	80207ce <__ieee754_pow+0x12e>
 8021018:	4622      	mov	r2, r4
 802101a:	462b      	mov	r3, r5
 802101c:	f7df f944 	bl	80002a8 <__aeabi_dsub>
 8021020:	4602      	mov	r2, r0
 8021022:	460b      	mov	r3, r1
 8021024:	4640      	mov	r0, r8
 8021026:	4649      	mov	r1, r9
 8021028:	f7df fd6e 	bl	8000b08 <__aeabi_dcmple>
 802102c:	2800      	cmp	r0, #0
 802102e:	f43f aeef 	beq.w	8020e10 <__ieee754_pow+0x770>
 8021032:	e7e5      	b.n	8021000 <__ieee754_pow+0x960>
 8021034:	f04f 0a00 	mov.w	sl, #0
 8021038:	e716      	b.n	8020e68 <__ieee754_pow+0x7c8>
 802103a:	4621      	mov	r1, r4
 802103c:	e7d2      	b.n	8020fe4 <__ieee754_pow+0x944>
 802103e:	2000      	movs	r0, #0
 8021040:	491b      	ldr	r1, [pc, #108]	; (80210b0 <__ieee754_pow+0xa10>)
 8021042:	f7ff bb8d 	b.w	8020760 <__ieee754_pow+0xc0>
 8021046:	e9dd 0100 	ldrd	r0, r1, [sp]
 802104a:	f7ff bb89 	b.w	8020760 <__ieee754_pow+0xc0>
 802104e:	4630      	mov	r0, r6
 8021050:	4639      	mov	r1, r7
 8021052:	f7ff bb85 	b.w	8020760 <__ieee754_pow+0xc0>
 8021056:	4693      	mov	fp, r2
 8021058:	f7ff bb96 	b.w	8020788 <__ieee754_pow+0xe8>
 802105c:	f3af 8000 	nop.w
 8021060:	00000000 	.word	0x00000000
 8021064:	3fe62e43 	.word	0x3fe62e43
 8021068:	fefa39ef 	.word	0xfefa39ef
 802106c:	3fe62e42 	.word	0x3fe62e42
 8021070:	0ca86c39 	.word	0x0ca86c39
 8021074:	be205c61 	.word	0xbe205c61
 8021078:	72bea4d0 	.word	0x72bea4d0
 802107c:	3e663769 	.word	0x3e663769
 8021080:	c5d26bf1 	.word	0xc5d26bf1
 8021084:	3ebbbd41 	.word	0x3ebbbd41
 8021088:	af25de2c 	.word	0xaf25de2c
 802108c:	3f11566a 	.word	0x3f11566a
 8021090:	16bebd93 	.word	0x16bebd93
 8021094:	3f66c16c 	.word	0x3f66c16c
 8021098:	5555553e 	.word	0x5555553e
 802109c:	3fc55555 	.word	0x3fc55555
 80210a0:	c2f8f359 	.word	0xc2f8f359
 80210a4:	01a56e1f 	.word	0x01a56e1f
 80210a8:	3fe00000 	.word	0x3fe00000
 80210ac:	000fffff 	.word	0x000fffff
 80210b0:	3ff00000 	.word	0x3ff00000
 80210b4:	4090cbff 	.word	0x4090cbff
 80210b8:	3f6f3400 	.word	0x3f6f3400
 80210bc:	652b82fe 	.word	0x652b82fe
 80210c0:	3c971547 	.word	0x3c971547

080210c4 <__ieee754_sqrt>:
 80210c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210c8:	ec55 4b10 	vmov	r4, r5, d0
 80210cc:	4e54      	ldr	r6, [pc, #336]	; (8021220 <__ieee754_sqrt+0x15c>)
 80210ce:	43ae      	bics	r6, r5
 80210d0:	ee10 0a10 	vmov	r0, s0
 80210d4:	462b      	mov	r3, r5
 80210d6:	462a      	mov	r2, r5
 80210d8:	4621      	mov	r1, r4
 80210da:	d113      	bne.n	8021104 <__ieee754_sqrt+0x40>
 80210dc:	ee10 2a10 	vmov	r2, s0
 80210e0:	462b      	mov	r3, r5
 80210e2:	ee10 0a10 	vmov	r0, s0
 80210e6:	4629      	mov	r1, r5
 80210e8:	f7df fa92 	bl	8000610 <__aeabi_dmul>
 80210ec:	4602      	mov	r2, r0
 80210ee:	460b      	mov	r3, r1
 80210f0:	4620      	mov	r0, r4
 80210f2:	4629      	mov	r1, r5
 80210f4:	f7df f8da 	bl	80002ac <__adddf3>
 80210f8:	4604      	mov	r4, r0
 80210fa:	460d      	mov	r5, r1
 80210fc:	ec45 4b10 	vmov	d0, r4, r5
 8021100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021104:	2d00      	cmp	r5, #0
 8021106:	dc10      	bgt.n	802112a <__ieee754_sqrt+0x66>
 8021108:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802110c:	4330      	orrs	r0, r6
 802110e:	d0f5      	beq.n	80210fc <__ieee754_sqrt+0x38>
 8021110:	b15d      	cbz	r5, 802112a <__ieee754_sqrt+0x66>
 8021112:	ee10 2a10 	vmov	r2, s0
 8021116:	462b      	mov	r3, r5
 8021118:	4620      	mov	r0, r4
 802111a:	4629      	mov	r1, r5
 802111c:	f7df f8c4 	bl	80002a8 <__aeabi_dsub>
 8021120:	4602      	mov	r2, r0
 8021122:	460b      	mov	r3, r1
 8021124:	f7df fb9e 	bl	8000864 <__aeabi_ddiv>
 8021128:	e7e6      	b.n	80210f8 <__ieee754_sqrt+0x34>
 802112a:	151b      	asrs	r3, r3, #20
 802112c:	d10c      	bne.n	8021148 <__ieee754_sqrt+0x84>
 802112e:	2a00      	cmp	r2, #0
 8021130:	d06d      	beq.n	802120e <__ieee754_sqrt+0x14a>
 8021132:	2000      	movs	r0, #0
 8021134:	02d6      	lsls	r6, r2, #11
 8021136:	d56e      	bpl.n	8021216 <__ieee754_sqrt+0x152>
 8021138:	1e44      	subs	r4, r0, #1
 802113a:	1b1b      	subs	r3, r3, r4
 802113c:	f1c0 0420 	rsb	r4, r0, #32
 8021140:	fa21 f404 	lsr.w	r4, r1, r4
 8021144:	4322      	orrs	r2, r4
 8021146:	4081      	lsls	r1, r0
 8021148:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802114c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8021150:	07dd      	lsls	r5, r3, #31
 8021152:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8021156:	bf42      	ittt	mi
 8021158:	0052      	lslmi	r2, r2, #1
 802115a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 802115e:	0049      	lslmi	r1, r1, #1
 8021160:	1058      	asrs	r0, r3, #1
 8021162:	2500      	movs	r5, #0
 8021164:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8021168:	441a      	add	r2, r3
 802116a:	0049      	lsls	r1, r1, #1
 802116c:	2316      	movs	r3, #22
 802116e:	462c      	mov	r4, r5
 8021170:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8021174:	19a7      	adds	r7, r4, r6
 8021176:	4297      	cmp	r7, r2
 8021178:	bfde      	ittt	le
 802117a:	1bd2      	suble	r2, r2, r7
 802117c:	19bc      	addle	r4, r7, r6
 802117e:	19ad      	addle	r5, r5, r6
 8021180:	0052      	lsls	r2, r2, #1
 8021182:	3b01      	subs	r3, #1
 8021184:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8021188:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802118c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8021190:	d1f0      	bne.n	8021174 <__ieee754_sqrt+0xb0>
 8021192:	f04f 0e20 	mov.w	lr, #32
 8021196:	469c      	mov	ip, r3
 8021198:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802119c:	42a2      	cmp	r2, r4
 802119e:	eb06 070c 	add.w	r7, r6, ip
 80211a2:	dc02      	bgt.n	80211aa <__ieee754_sqrt+0xe6>
 80211a4:	d112      	bne.n	80211cc <__ieee754_sqrt+0x108>
 80211a6:	428f      	cmp	r7, r1
 80211a8:	d810      	bhi.n	80211cc <__ieee754_sqrt+0x108>
 80211aa:	2f00      	cmp	r7, #0
 80211ac:	eb07 0c06 	add.w	ip, r7, r6
 80211b0:	da34      	bge.n	802121c <__ieee754_sqrt+0x158>
 80211b2:	f1bc 0f00 	cmp.w	ip, #0
 80211b6:	db31      	blt.n	802121c <__ieee754_sqrt+0x158>
 80211b8:	f104 0801 	add.w	r8, r4, #1
 80211bc:	1b12      	subs	r2, r2, r4
 80211be:	428f      	cmp	r7, r1
 80211c0:	bf88      	it	hi
 80211c2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80211c6:	1bc9      	subs	r1, r1, r7
 80211c8:	4433      	add	r3, r6
 80211ca:	4644      	mov	r4, r8
 80211cc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80211d0:	f1be 0e01 	subs.w	lr, lr, #1
 80211d4:	443a      	add	r2, r7
 80211d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80211da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80211de:	d1dd      	bne.n	802119c <__ieee754_sqrt+0xd8>
 80211e0:	430a      	orrs	r2, r1
 80211e2:	d006      	beq.n	80211f2 <__ieee754_sqrt+0x12e>
 80211e4:	1c5c      	adds	r4, r3, #1
 80211e6:	bf13      	iteet	ne
 80211e8:	3301      	addne	r3, #1
 80211ea:	3501      	addeq	r5, #1
 80211ec:	4673      	moveq	r3, lr
 80211ee:	f023 0301 	bicne.w	r3, r3, #1
 80211f2:	106a      	asrs	r2, r5, #1
 80211f4:	085b      	lsrs	r3, r3, #1
 80211f6:	07e9      	lsls	r1, r5, #31
 80211f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80211fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8021200:	bf48      	it	mi
 8021202:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8021206:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 802120a:	461c      	mov	r4, r3
 802120c:	e776      	b.n	80210fc <__ieee754_sqrt+0x38>
 802120e:	0aca      	lsrs	r2, r1, #11
 8021210:	3b15      	subs	r3, #21
 8021212:	0549      	lsls	r1, r1, #21
 8021214:	e78b      	b.n	802112e <__ieee754_sqrt+0x6a>
 8021216:	0052      	lsls	r2, r2, #1
 8021218:	3001      	adds	r0, #1
 802121a:	e78b      	b.n	8021134 <__ieee754_sqrt+0x70>
 802121c:	46a0      	mov	r8, r4
 802121e:	e7cd      	b.n	80211bc <__ieee754_sqrt+0xf8>
 8021220:	7ff00000 	.word	0x7ff00000

08021224 <__ieee754_sqrtf>:
 8021224:	ee10 2a10 	vmov	r2, s0
 8021228:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802122c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021230:	b570      	push	{r4, r5, r6, lr}
 8021232:	d302      	bcc.n	802123a <__ieee754_sqrtf+0x16>
 8021234:	eea0 0a00 	vfma.f32	s0, s0, s0
 8021238:	bd70      	pop	{r4, r5, r6, pc}
 802123a:	b3b1      	cbz	r1, 80212aa <__ieee754_sqrtf+0x86>
 802123c:	2a00      	cmp	r2, #0
 802123e:	da04      	bge.n	802124a <__ieee754_sqrtf+0x26>
 8021240:	ee70 7a40 	vsub.f32	s15, s0, s0
 8021244:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8021248:	bd70      	pop	{r4, r5, r6, pc}
 802124a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 802124e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8021252:	d204      	bcs.n	802125e <__ieee754_sqrtf+0x3a>
 8021254:	2100      	movs	r1, #0
 8021256:	0210      	lsls	r0, r2, #8
 8021258:	d528      	bpl.n	80212ac <__ieee754_sqrtf+0x88>
 802125a:	3901      	subs	r1, #1
 802125c:	1a5b      	subs	r3, r3, r1
 802125e:	3b7f      	subs	r3, #127	; 0x7f
 8021260:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8021264:	07d9      	lsls	r1, r3, #31
 8021266:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 802126a:	bf48      	it	mi
 802126c:	0052      	lslmi	r2, r2, #1
 802126e:	1059      	asrs	r1, r3, #1
 8021270:	2300      	movs	r3, #0
 8021272:	0052      	lsls	r2, r2, #1
 8021274:	2419      	movs	r4, #25
 8021276:	461e      	mov	r6, r3
 8021278:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 802127c:	1835      	adds	r5, r6, r0
 802127e:	4295      	cmp	r5, r2
 8021280:	bfde      	ittt	le
 8021282:	182e      	addle	r6, r5, r0
 8021284:	1b52      	suble	r2, r2, r5
 8021286:	181b      	addle	r3, r3, r0
 8021288:	3c01      	subs	r4, #1
 802128a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802128e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8021292:	d1f3      	bne.n	802127c <__ieee754_sqrtf+0x58>
 8021294:	b112      	cbz	r2, 802129c <__ieee754_sqrtf+0x78>
 8021296:	3301      	adds	r3, #1
 8021298:	f023 0301 	bic.w	r3, r3, #1
 802129c:	105b      	asrs	r3, r3, #1
 802129e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80212a2:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80212a6:	ee00 3a10 	vmov	s0, r3
 80212aa:	bd70      	pop	{r4, r5, r6, pc}
 80212ac:	0052      	lsls	r2, r2, #1
 80212ae:	3101      	adds	r1, #1
 80212b0:	e7d1      	b.n	8021256 <__ieee754_sqrtf+0x32>

080212b2 <fabs>:
 80212b2:	ec53 2b10 	vmov	r2, r3, d0
 80212b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80212ba:	ec43 2b10 	vmov	d0, r2, r3
 80212be:	4770      	bx	lr

080212c0 <finite>:
 80212c0:	ee10 3a90 	vmov	r3, s1
 80212c4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80212c8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80212cc:	0fc0      	lsrs	r0, r0, #31
 80212ce:	4770      	bx	lr

080212d0 <matherr>:
 80212d0:	2000      	movs	r0, #0
 80212d2:	4770      	bx	lr
 80212d4:	0000      	movs	r0, r0
	...

080212d8 <nan>:
 80212d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80212e0 <nan+0x8>
 80212dc:	4770      	bx	lr
 80212de:	bf00      	nop
 80212e0:	00000000 	.word	0x00000000
 80212e4:	7ff80000 	.word	0x7ff80000

080212e8 <rint>:
 80212e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80212ea:	ec51 0b10 	vmov	r0, r1, d0
 80212ee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80212f2:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80212f6:	2e13      	cmp	r6, #19
 80212f8:	ee10 7a10 	vmov	r7, s0
 80212fc:	460b      	mov	r3, r1
 80212fe:	4602      	mov	r2, r0
 8021300:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8021304:	dc58      	bgt.n	80213b8 <rint+0xd0>
 8021306:	2e00      	cmp	r6, #0
 8021308:	da2b      	bge.n	8021362 <rint+0x7a>
 802130a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802130e:	4302      	orrs	r2, r0
 8021310:	d023      	beq.n	802135a <rint+0x72>
 8021312:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8021316:	4302      	orrs	r2, r0
 8021318:	4251      	negs	r1, r2
 802131a:	4311      	orrs	r1, r2
 802131c:	0b09      	lsrs	r1, r1, #12
 802131e:	0c5b      	lsrs	r3, r3, #17
 8021320:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8021324:	045b      	lsls	r3, r3, #17
 8021326:	ea41 0703 	orr.w	r7, r1, r3
 802132a:	4b31      	ldr	r3, [pc, #196]	; (80213f0 <rint+0x108>)
 802132c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021330:	4639      	mov	r1, r7
 8021332:	e9d3 6700 	ldrd	r6, r7, [r3]
 8021336:	ee10 0a10 	vmov	r0, s0
 802133a:	4632      	mov	r2, r6
 802133c:	463b      	mov	r3, r7
 802133e:	f7de ffb5 	bl	80002ac <__adddf3>
 8021342:	e9cd 0100 	strd	r0, r1, [sp]
 8021346:	463b      	mov	r3, r7
 8021348:	4632      	mov	r2, r6
 802134a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802134e:	f7de ffab 	bl	80002a8 <__aeabi_dsub>
 8021352:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021356:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 802135a:	ec41 0b10 	vmov	d0, r0, r1
 802135e:	b003      	add	sp, #12
 8021360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021362:	4c24      	ldr	r4, [pc, #144]	; (80213f4 <rint+0x10c>)
 8021364:	4134      	asrs	r4, r6
 8021366:	ea01 0704 	and.w	r7, r1, r4
 802136a:	4307      	orrs	r7, r0
 802136c:	d0f5      	beq.n	802135a <rint+0x72>
 802136e:	0861      	lsrs	r1, r4, #1
 8021370:	ea03 0001 	and.w	r0, r3, r1
 8021374:	4302      	orrs	r2, r0
 8021376:	d00b      	beq.n	8021390 <rint+0xa8>
 8021378:	ea23 0101 	bic.w	r1, r3, r1
 802137c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8021380:	2e13      	cmp	r6, #19
 8021382:	fa43 f306 	asr.w	r3, r3, r6
 8021386:	bf0c      	ite	eq
 8021388:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 802138c:	2200      	movne	r2, #0
 802138e:	430b      	orrs	r3, r1
 8021390:	4619      	mov	r1, r3
 8021392:	4b17      	ldr	r3, [pc, #92]	; (80213f0 <rint+0x108>)
 8021394:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8021398:	e9d5 4500 	ldrd	r4, r5, [r5]
 802139c:	4610      	mov	r0, r2
 802139e:	462b      	mov	r3, r5
 80213a0:	4622      	mov	r2, r4
 80213a2:	f7de ff83 	bl	80002ac <__adddf3>
 80213a6:	e9cd 0100 	strd	r0, r1, [sp]
 80213aa:	4622      	mov	r2, r4
 80213ac:	462b      	mov	r3, r5
 80213ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80213b2:	f7de ff79 	bl	80002a8 <__aeabi_dsub>
 80213b6:	e7d0      	b.n	802135a <rint+0x72>
 80213b8:	2e33      	cmp	r6, #51	; 0x33
 80213ba:	dd08      	ble.n	80213ce <rint+0xe6>
 80213bc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80213c0:	d1cb      	bne.n	802135a <rint+0x72>
 80213c2:	ee10 2a10 	vmov	r2, s0
 80213c6:	460b      	mov	r3, r1
 80213c8:	f7de ff70 	bl	80002ac <__adddf3>
 80213cc:	e7c5      	b.n	802135a <rint+0x72>
 80213ce:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80213d2:	f04f 34ff 	mov.w	r4, #4294967295
 80213d6:	40f4      	lsrs	r4, r6
 80213d8:	4220      	tst	r0, r4
 80213da:	d0be      	beq.n	802135a <rint+0x72>
 80213dc:	0861      	lsrs	r1, r4, #1
 80213de:	420f      	tst	r7, r1
 80213e0:	bf1f      	itttt	ne
 80213e2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80213e6:	ea27 0101 	bicne.w	r1, r7, r1
 80213ea:	4132      	asrne	r2, r6
 80213ec:	430a      	orrne	r2, r1
 80213ee:	e7cf      	b.n	8021390 <rint+0xa8>
 80213f0:	0802e8a8 	.word	0x0802e8a8
 80213f4:	000fffff 	.word	0x000fffff

080213f8 <scalbn>:
 80213f8:	b570      	push	{r4, r5, r6, lr}
 80213fa:	ec55 4b10 	vmov	r4, r5, d0
 80213fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8021402:	4606      	mov	r6, r0
 8021404:	462b      	mov	r3, r5
 8021406:	b9b2      	cbnz	r2, 8021436 <scalbn+0x3e>
 8021408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802140c:	4323      	orrs	r3, r4
 802140e:	d03c      	beq.n	802148a <scalbn+0x92>
 8021410:	2200      	movs	r2, #0
 8021412:	4b33      	ldr	r3, [pc, #204]	; (80214e0 <scalbn+0xe8>)
 8021414:	4629      	mov	r1, r5
 8021416:	ee10 0a10 	vmov	r0, s0
 802141a:	f7df f8f9 	bl	8000610 <__aeabi_dmul>
 802141e:	4a31      	ldr	r2, [pc, #196]	; (80214e4 <scalbn+0xec>)
 8021420:	4296      	cmp	r6, r2
 8021422:	4604      	mov	r4, r0
 8021424:	460d      	mov	r5, r1
 8021426:	460b      	mov	r3, r1
 8021428:	da13      	bge.n	8021452 <scalbn+0x5a>
 802142a:	a329      	add	r3, pc, #164	; (adr r3, 80214d0 <scalbn+0xd8>)
 802142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021430:	f7df f8ee 	bl	8000610 <__aeabi_dmul>
 8021434:	e00a      	b.n	802144c <scalbn+0x54>
 8021436:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802143a:	428a      	cmp	r2, r1
 802143c:	d10c      	bne.n	8021458 <scalbn+0x60>
 802143e:	ee10 2a10 	vmov	r2, s0
 8021442:	462b      	mov	r3, r5
 8021444:	4620      	mov	r0, r4
 8021446:	4629      	mov	r1, r5
 8021448:	f7de ff30 	bl	80002ac <__adddf3>
 802144c:	4604      	mov	r4, r0
 802144e:	460d      	mov	r5, r1
 8021450:	e01b      	b.n	802148a <scalbn+0x92>
 8021452:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8021456:	3a36      	subs	r2, #54	; 0x36
 8021458:	4432      	add	r2, r6
 802145a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802145e:	428a      	cmp	r2, r1
 8021460:	dd0b      	ble.n	802147a <scalbn+0x82>
 8021462:	ec45 4b11 	vmov	d1, r4, r5
 8021466:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80214d8 <scalbn+0xe0>
 802146a:	f000 f83f 	bl	80214ec <copysign>
 802146e:	a31a      	add	r3, pc, #104	; (adr r3, 80214d8 <scalbn+0xe0>)
 8021470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021474:	ec51 0b10 	vmov	r0, r1, d0
 8021478:	e7da      	b.n	8021430 <scalbn+0x38>
 802147a:	2a00      	cmp	r2, #0
 802147c:	dd08      	ble.n	8021490 <scalbn+0x98>
 802147e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021482:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021486:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802148a:	ec45 4b10 	vmov	d0, r4, r5
 802148e:	bd70      	pop	{r4, r5, r6, pc}
 8021490:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8021494:	da0d      	bge.n	80214b2 <scalbn+0xba>
 8021496:	f24c 3350 	movw	r3, #50000	; 0xc350
 802149a:	429e      	cmp	r6, r3
 802149c:	ec45 4b11 	vmov	d1, r4, r5
 80214a0:	dce1      	bgt.n	8021466 <scalbn+0x6e>
 80214a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80214d0 <scalbn+0xd8>
 80214a6:	f000 f821 	bl	80214ec <copysign>
 80214aa:	a309      	add	r3, pc, #36	; (adr r3, 80214d0 <scalbn+0xd8>)
 80214ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214b0:	e7e0      	b.n	8021474 <scalbn+0x7c>
 80214b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80214b6:	3236      	adds	r2, #54	; 0x36
 80214b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80214bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80214c0:	4620      	mov	r0, r4
 80214c2:	4629      	mov	r1, r5
 80214c4:	2200      	movs	r2, #0
 80214c6:	4b08      	ldr	r3, [pc, #32]	; (80214e8 <scalbn+0xf0>)
 80214c8:	e7b2      	b.n	8021430 <scalbn+0x38>
 80214ca:	bf00      	nop
 80214cc:	f3af 8000 	nop.w
 80214d0:	c2f8f359 	.word	0xc2f8f359
 80214d4:	01a56e1f 	.word	0x01a56e1f
 80214d8:	8800759c 	.word	0x8800759c
 80214dc:	7e37e43c 	.word	0x7e37e43c
 80214e0:	43500000 	.word	0x43500000
 80214e4:	ffff3cb0 	.word	0xffff3cb0
 80214e8:	3c900000 	.word	0x3c900000

080214ec <copysign>:
 80214ec:	ec53 2b10 	vmov	r2, r3, d0
 80214f0:	ee11 0a90 	vmov	r0, s3
 80214f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80214f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80214fc:	ea41 0300 	orr.w	r3, r1, r0
 8021500:	ec43 2b10 	vmov	d0, r2, r3
 8021504:	4770      	bx	lr
	...

08021508 <_init>:
 8021508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802150a:	bf00      	nop
 802150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802150e:	bc08      	pop	{r3}
 8021510:	469e      	mov	lr, r3
 8021512:	4770      	bx	lr

08021514 <_fini>:
 8021514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021516:	bf00      	nop
 8021518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802151a:	bc08      	pop	{r3}
 802151c:	469e      	mov	lr, r3
 802151e:	4770      	bx	lr
