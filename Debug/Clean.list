
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024238  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d2d0  080243f8  080243f8  000343f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080316c8  080316c8  000416c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080316d0  080316d0  000416d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080316d4  080316d4  000416d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000015b4  20000000  080316d8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00094fa4  200015b8  08032c8c  000515b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2009655c  08032c8c  0005655c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000515b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00077cba  00000000  00000000  000515e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c161  00000000  00000000  000c929e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002be3d  00000000  00000000  000d53ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002f00  00000000  00000000  00101240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003f60  00000000  00000000  00104140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f04e  00000000  00000000  001080a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f202  00000000  00000000  001270ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  001362f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a3e0  00000000  00000000  0013636c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200015b8 	.word	0x200015b8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080243e0 	.word	0x080243e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200015bc 	.word	0x200015bc
 80001fc:	080243e0 	.word	0x080243e0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97a 	b.w	8000fbc <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9e08      	ldr	r6, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d151      	bne.n	8000d94 <__udivmoddi4+0xb4>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0xf2>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0c20 	rsb	ip, lr, #32
 8000d04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d1c:	0c25      	lsrs	r5, r4, #16
 8000d1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d22:	fa1f f987 	uxth.w	r9, r7
 8000d26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d2e:	fb08 f309 	mul.w	r3, r8, r9
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x6c>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d3c:	f080 8123 	bcs.w	8000f86 <__udivmoddi4+0x2a6>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	f240 8120 	bls.w	8000f86 <__udivmoddi4+0x2a6>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aed      	subs	r5, r5, r3
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb00 f909 	mul.w	r9, r0, r9
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x98>
 8000d64:	19e4      	adds	r4, r4, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 810a 	bcs.w	8000f82 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8107 	bls.w	8000f82 <__udivmoddi4+0x2a2>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 0409 	sub.w	r4, r4, r9
 8000d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d061      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6034      	str	r4, [r6, #0]
 8000d8e:	6073      	str	r3, [r6, #4]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0xc8>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d054      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	f040 808e 	bne.w	8000ece <__udivmoddi4+0x1ee>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xdc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2d0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	46ac      	mov	ip, r5
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d03f      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b912      	cbnz	r2, 8000dda <__udivmoddi4+0xfa>
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dda:	fab7 fe87 	clz	lr, r7
 8000dde:	f1be 0f00 	cmp.w	lr, #0
 8000de2:	d134      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de4:	1beb      	subs	r3, r5, r7
 8000de6:	0c3a      	lsrs	r2, r7, #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000df2:	0c25      	lsrs	r5, r4, #16
 8000df4:	fb02 3318 	mls	r3, r2, r8, r3
 8000df8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfc:	fb0c f308 	mul.w	r3, ip, r8
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	f200 80d1 	bhi.w	8000fb4 <__udivmoddi4+0x2d4>
 8000e12:	4680      	mov	r8, r0
 8000e14:	1aed      	subs	r5, r5, r3
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e24:	fb0c fc00 	mul.w	ip, ip, r0
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e44:	e79d      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0420 	rsb	r4, lr, #32
 8000e52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e5e:	0c3a      	lsrs	r2, r7, #16
 8000e60:	fa25 f404 	lsr.w	r4, r5, r4
 8000e64:	ea48 0803 	orr.w	r8, r8, r3
 8000e68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e70:	fb02 4411 	mls	r4, r2, r1, r4
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1bc>
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e8e:	f080 808a 	bcs.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	f240 8087 	bls.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e98:	3902      	subs	r1, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	fa1f f588 	uxth.w	r5, r8
 8000ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eaa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000eae:	fb00 f30c 	mul.w	r3, r0, ip
 8000eb2:	42ab      	cmp	r3, r5
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1e6>
 8000eb6:	19ed      	adds	r5, r5, r7
 8000eb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebc:	d26f      	bcs.n	8000f9e <__udivmoddi4+0x2be>
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d96d      	bls.n	8000f9e <__udivmoddi4+0x2be>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	1aeb      	subs	r3, r5, r3
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	e78f      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ece:	f1c1 0720 	rsb	r7, r1, #32
 8000ed2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	fa05 f401 	lsl.w	r4, r5, r1
 8000edc:	ea48 0303 	orr.w	r3, r8, r3
 8000ee0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ef2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ef6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000efa:	fa1f f883 	uxth.w	r8, r3
 8000efe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f02:	fb09 f408 	mul.w	r4, r9, r8
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x244>
 8000f12:	18ed      	adds	r5, r5, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d243      	bcs.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	d941      	bls.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	441d      	add	r5, r3
 8000f24:	1b2d      	subs	r5, r5, r4
 8000f26:	fa1f fe8e 	uxth.w	lr, lr
 8000f2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x26e>
 8000f3e:	18e4      	adds	r4, r4, r3
 8000f40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f44:	d229      	bcs.n	8000f9a <__udivmoddi4+0x2ba>
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d927      	bls.n	8000f9a <__udivmoddi4+0x2ba>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	441c      	add	r4, r3
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba4 0408 	sub.w	r4, r4, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454c      	cmp	r4, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	464d      	mov	r5, r9
 8000f60:	d315      	bcc.n	8000f8e <__udivmoddi4+0x2ae>
 8000f62:	d012      	beq.n	8000f8a <__udivmoddi4+0x2aa>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x29c>
 8000f66:	ebba 030e 	subs.w	r3, sl, lr
 8000f6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40cb      	lsrs	r3, r1
 8000f74:	431f      	orrs	r7, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	6037      	str	r7, [r6, #0]
 8000f7a:	6074      	str	r4, [r6, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	4618      	mov	r0, r3
 8000f84:	e6f8      	b.n	8000d78 <__udivmoddi4+0x98>
 8000f86:	4690      	mov	r8, r2
 8000f88:	e6e0      	b.n	8000d4c <__udivmoddi4+0x6c>
 8000f8a:	45c2      	cmp	sl, r8
 8000f8c:	d2ea      	bcs.n	8000f64 <__udivmoddi4+0x284>
 8000f8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f92:	eb69 0503 	sbc.w	r5, r9, r3
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7e4      	b.n	8000f64 <__udivmoddi4+0x284>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	e7d7      	b.n	8000f4e <__udivmoddi4+0x26e>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e791      	b.n	8000ec6 <__udivmoddi4+0x1e6>
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	e7be      	b.n	8000f24 <__udivmoddi4+0x244>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	e778      	b.n	8000e9c <__udivmoddi4+0x1bc>
 8000faa:	3802      	subs	r0, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	e745      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000fb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	e72b      	b.n	8000e14 <__udivmoddi4+0x134>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_InitTick+0x2c>)
{
 8000fc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 fd34 	bl	8001a3c <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b938      	cbnz	r0, 8000fe8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcde 	bl	80019a0 <HAL_NVIC_SetPriority>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000ec4 	.word	0x20000ec4

08000ff0 <HAL_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 fcc2 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffe1 	bl	8000fc0 <HAL_InitTick>
 8000ffe:	4604      	mov	r4, r0
 8001000:	b918      	cbnz	r0, 800100a <HAL_Init+0x1a>
    HAL_MspInit();
 8001002:	f01d fdfb 	bl	801ebfc <HAL_MspInit>
}
 8001006:	4620      	mov	r0, r4
 8001008:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800100a:	2401      	movs	r4, #1
 800100c:	e7fb      	b.n	8001006 <HAL_Init+0x16>
	...

08001010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001010:	4a02      	ldr	r2, [pc, #8]	; (800101c <HAL_IncTick+0xc>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20090620 	.word	0x20090620

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20090620 	.word	0x20090620

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001036:	4605      	mov	r5, r0
  {
    wait++;
 8001038:	bf18      	it	ne
 800103a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	4284      	cmp	r4, r0
 8001044:	d8fa      	bhi.n	800103c <HAL_Delay+0x10>
  {
  }
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001048:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800104e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001052:	fab6 f386 	clz	r3, r6
 8001056:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800105a:	40de      	lsrs	r6, r3
 800105c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800105e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001062:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001066:	fa93 f5a3 	rbit	r5, r3
 800106a:	fab5 f585 	clz	r5, r5
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	2407      	movs	r4, #7
 8001074:	fa21 f505 	lsr.w	r5, r1, r5
 8001078:	fa04 f505 	lsl.w	r5, r4, r5
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001084:	40d9      	lsrs	r1, r3
 8001086:	ea24 0405 	bic.w	r4, r4, r5
 800108a:	fa02 f101 	lsl.w	r1, r2, r1
 800108e:	4321      	orrs	r1, r4
 8001090:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001094:	bd70      	pop	{r4, r5, r6, pc}
	...

08001098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80010a8:	b925      	cbnz	r5, 80010b4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	f01d ff07 	bl	801eebc <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010b4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ba:	bf41      	itttt	mi
 80010bc:	689a      	ldrmi	r2, [r3, #8]
 80010be:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010c2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010c6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010c8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ca:	00d1      	lsls	r1, r2, #3
 80010cc:	d576      	bpl.n	80011bc <HAL_ADC_Init+0x124>
 80010ce:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	f140 808a 	bpl.w	80011ea <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	06d5      	lsls	r5, r2, #27
 80010dc:	f100 8093 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010e0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e2:	0751      	lsls	r1, r2, #29
 80010e4:	f100 808f 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ea:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	f040 8089 	bne.w	8001212 <HAL_ADC_Init+0x17a>
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	f140 8085 	bpl.w	8001212 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001108:	68e5      	ldr	r5, [r4, #12]
 800110a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800110c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800110e:	432a      	orrs	r2, r5
 8001110:	68a5      	ldr	r5, [r4, #8]
 8001112:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001114:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001116:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001118:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800111c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	bf02      	ittt	eq
 8001122:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001124:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001128:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800112e:	b121      	cbz	r1, 800113a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001130:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001132:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001136:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001138:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800113a:	68dd      	ldr	r5, [r3, #12]
 800113c:	4939      	ldr	r1, [pc, #228]	; (8001224 <HAL_ADC_Init+0x18c>)
 800113e:	4029      	ands	r1, r5
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f012 0f0c 	tst.w	r2, #12
 800114a:	d120      	bne.n	800118e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800114c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800114e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001152:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001154:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001158:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800115a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800115e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001160:	f021 0106 	bic.w	r1, r1, #6
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800116a:	2a01      	cmp	r2, #1
 800116c:	d147      	bne.n	80011fe <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	432a      	orrs	r2, r5
 8001176:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	432a      	orrs	r2, r5
 800117e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001180:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001184:	432a      	orrs	r2, r5
 8001186:	f021 0104 	bic.w	r1, r1, #4
 800118a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800118c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001192:	bf05      	ittet	eq
 8001194:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001196:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800119a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800119e:	bf06      	itte	eq
 80011a0:	f021 010f 	biceq.w	r1, r1, #15
 80011a4:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a6:	f022 020f 	bicne.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011b8:	b003      	add	sp, #12
 80011ba:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011bc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <HAL_ADC_Init+0x190>)
 80011c0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Init+0x194>)
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011d6:	220a      	movs	r2, #10
 80011d8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011da:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011dc:	9a01      	ldr	r2, [sp, #4]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	f43f af75 	beq.w	80010ce <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	3a01      	subs	r2, #1
 80011e8:	e7f7      	b.n	80011da <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e76c      	b.n	80010d8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	e7c2      	b.n	800118c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e7d2      	b.n	80011b8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001212:	4907      	ldr	r1, [pc, #28]	; (8001230 <HAL_ADC_Init+0x198>)
 8001214:	6865      	ldr	r5, [r4, #4]
 8001216:	688a      	ldr	r2, [r1, #8]
 8001218:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800121c:	432a      	orrs	r2, r5
 800121e:	608a      	str	r2, [r1, #8]
 8001220:	e772      	b.n	8001108 <HAL_ADC_Init+0x70>
 8001222:	bf00      	nop
 8001224:	fff0c007 	.word	0xfff0c007
 8001228:	001e8480 	.word	0x001e8480
 800122c:	20000ec4 	.word	0x20000ec4
 8001230:	50040300 	.word	0x50040300

08001234 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001236:	6945      	ldr	r5, [r0, #20]
 8001238:	2d08      	cmp	r5, #8
{
 800123a:	4604      	mov	r4, r0
 800123c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	d00a      	beq.n	8001256 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	07dd      	lsls	r5, r3, #31
 8001246:	d505      	bpl.n	8001254 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001254:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fee3 	bl	8001020 <HAL_GetTick>
 800125a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4215      	tst	r5, r2
 8001262:	d01d      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001272:	d10f      	bne.n	8001294 <HAL_ADC_PollForConversion+0x60>
 8001274:	69e2      	ldr	r2, [r4, #28]
 8001276:	b96a      	cbnz	r2, 8001294 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	0711      	lsls	r1, r2, #28
 800127c:	d50a      	bpl.n	8001294 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800127e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001284:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001288:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128a:	bf5e      	ittt	pl
 800128c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800128e:	f042 0201 	orrpl.w	r2, r2, #1
 8001292:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001294:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001296:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001298:	d114      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800129a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a0:	1c70      	adds	r0, r6, #1
 80012a2:	d0dc      	beq.n	800125e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a4:	b946      	cbnz	r6, 80012b8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012b8:	f7ff feb2 	bl	8001020 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	4286      	cmp	r6, r0
 80012c0:	d2cc      	bcs.n	800125c <HAL_ADC_PollForConversion+0x28>
 80012c2:	e7f0      	b.n	80012a6 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012c4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012c8:	d1e8      	bne.n	800129c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012d0:	6803      	ldr	r3, [r0, #0]
 80012d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012e2:	2b01      	cmp	r3, #1
{
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012e8:	f000 8168 	beq.w	80015bc <HAL_ADC_ConfigChannel+0x2e4>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012f4:	6882      	ldr	r2, [r0, #8]
 80012f6:	0757      	lsls	r7, r2, #29
 80012f8:	f100 815a 	bmi.w	80015b0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d808      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 8001302:	3b02      	subs	r3, #2
 8001304:	2b03      	cmp	r3, #3
 8001306:	d864      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0xfa>
 8001308:	e8df f003 	tbb	[pc, r3]
 800130c:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001310:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001312:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001314:	6861      	ldr	r1, [r4, #4]
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001326:	40de      	lsrs	r6, r3
 8001328:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800132c:	f001 011f 	and.w	r1, r1, #31
 8001330:	231f      	movs	r3, #31
 8001332:	fa03 f201 	lsl.w	r2, r3, r1
 8001336:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800133a:	ea23 0302 	bic.w	r3, r3, r2
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001344:	408a      	lsls	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800134c:	6882      	ldr	r2, [r0, #8]
 800134e:	f012 020c 	ands.w	r2, r2, #12
 8001352:	d126      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800135a:	d13c      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800135c:	6821      	ldr	r1, [r4, #0]
 800135e:	f7ff fe73 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001362:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001364:	6953      	ldr	r3, [r2, #20]
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800136c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800136e:	f8d5 e000 	ldr.w	lr, [r5]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001378:	2e04      	cmp	r6, #4
 800137a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800137e:	d033      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001380:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001388:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800138c:	4081      	lsls	r1, r0
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	4319      	orrs	r1, r3
 8001394:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001398:	4bc5      	ldr	r3, [pc, #788]	; (80016b0 <HAL_ADC_ConfigChannel+0x3d8>)
 800139a:	4003      	ands	r3, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	6828      	ldr	r0, [r5, #0]
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 8108 	bne.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
 80013b0:	6803      	ldr	r3, [r0, #0]
 80013b2:	07de      	lsls	r6, r3, #31
 80013b4:	f140 8104 	bpl.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	2300      	movs	r3, #0
 80013bc:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013c0:	b003      	add	sp, #12
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013c4:	2312      	movs	r3, #18
 80013c6:	e7a4      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013c8:	2318      	movs	r3, #24
 80013ca:	e7a2      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	e79f      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	e79d      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013d6:	461a      	mov	r2, r3
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	f7ff fe35 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013de:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013e0:	6953      	ldr	r3, [r2, #20]
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	e7c0      	b.n	800136a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ec:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013f0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013f4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x19a>
 80013fc:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8001400:	4287      	cmp	r7, r0
 8001402:	f040 8149 	bne.w	8001698 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 8001406:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800140a:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001410:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001414:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001418:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800141c:	bb9f      	cbnz	r7, 8001486 <HAL_ADC_ConfigChannel+0x1ae>
 800141e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001422:	4283      	cmp	r3, r0
 8001424:	f040 813d 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800142c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800142e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	f102 0608 	add.w	r6, r2, #8
 800143a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800143e:	bb77      	cbnz	r7, 800149e <HAL_ADC_ConfigChannel+0x1c6>
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	4283      	cmp	r3, r0
 8001446:	f040 8147 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800144a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800144e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001450:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800145c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001460:	bb4e      	cbnz	r6, 80014b6 <HAL_ADC_ConfigChannel+0x1de>
 8001462:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001466:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001468:	bf04      	itt	eq
 800146a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800146e:	6002      	streq	r2, [r0, #0]
 8001470:	e797      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
 8001472:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001476:	fab0 f080 	clz	r0, r0
 800147a:	4287      	cmp	r7, r0
 800147c:	d0c3      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800147e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001482:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	4283      	cmp	r3, r0
 8001490:	d0ca      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x150>
 8001492:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001494:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	f102 0608 	add.w	r6, r2, #8
 800149a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	4283      	cmp	r3, r0
 80014a8:	d0cf      	beq.n	800144a <HAL_ADC_ConfigChannel+0x172>
 80014aa:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ae:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	e7d2      	b.n	8001466 <HAL_ADC_ConfigChannel+0x18e>
 80014c0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	3201      	adds	r2, #1
 80014ca:	2a09      	cmp	r2, #9
 80014cc:	d90d      	bls.n	80014ea <HAL_ADC_ConfigChannel+0x212>
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	3201      	adds	r2, #1
 80014d8:	0696      	lsls	r6, r2, #26
 80014da:	fa93 f1a3 	rbit	r1, r3
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	1c4a      	adds	r2, r1, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4091      	lsls	r1, r2
 80014e8:	e016      	b.n	8001518 <HAL_ADC_ConfigChannel+0x240>
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	3201      	adds	r2, #1
 80014f4:	0692      	lsls	r2, r2, #26
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	1c4e      	adds	r6, r1, #1
 8001500:	2101      	movs	r1, #1
 8001502:	40b1      	lsls	r1, r6
 8001504:	e07f      	b.n	8001606 <HAL_ADC_ConfigChannel+0x32e>
 8001506:	fa93 f1a3 	rbit	r1, r3
 800150a:	fab1 f181 	clz	r1, r1
 800150e:	3101      	adds	r1, #1
 8001510:	e080      	b.n	8001614 <HAL_ADC_ConfigChannel+0x33c>
 8001512:	4616      	mov	r6, r2
 8001514:	fa01 f10e 	lsl.w	r1, r1, lr
 8001518:	ea41 0206 	orr.w	r2, r1, r6
 800151c:	b94f      	cbnz	r7, 8001532 <HAL_ADC_ConfigChannel+0x25a>
 800151e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001526:	f1a3 011b 	sub.w	r1, r3, #27
 800152a:	0509      	lsls	r1, r1, #20
 800152c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001530:	e073      	b.n	800161a <HAL_ADC_ConfigChannel+0x342>
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	e7f2      	b.n	8001522 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001544:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001546:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800154a:	e072      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800154e:	429a      	cmp	r2, r3
 8001550:	f47f af32 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001556:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001558:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800155c:	e069      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800155e:	4955      	ldr	r1, [pc, #340]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001560:	428a      	cmp	r2, r1
 8001562:	d111      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001564:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f47f af26 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 800156c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001570:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001574:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001578:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800157c:	430b      	orrs	r3, r1
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001586:	e717      	b.n	80013b8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001588:	494c      	ldr	r1, [pc, #304]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800158a:	428a      	cmp	r2, r1
 800158c:	f47f af14 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	f47f af10 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800159c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ae:	e7e8      	b.n	8001582 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015b8:	4618      	mov	r0, r3
 80015ba:	e6fe      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015bc:	2002      	movs	r0, #2
 80015be:	e6ff      	b.n	80013c0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015c0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015c4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f001 0e20 	and.w	lr, r1, #32
 80015ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80015d2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015d6:	4072      	eors	r2, r6
 80015d8:	403a      	ands	r2, r7
 80015da:	4072      	eors	r2, r6
 80015dc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015e6:	2f00      	cmp	r7, #0
 80015e8:	f47f af6a 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x1e8>
 80015ec:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015f0:	f101 0e01 	add.w	lr, r1, #1
 80015f4:	f1be 0f09 	cmp.w	lr, #9
 80015f8:	f04f 0101 	mov.w	r1, #1
 80015fc:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8001600:	d887      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x23a>
 8001602:	fa01 f10e 	lsl.w	r1, r1, lr
 8001606:	430a      	orrs	r2, r1
 8001608:	2f00      	cmp	r7, #0
 800160a:	f47f af7c 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x22e>
 800160e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001618:	0509      	lsls	r1, r1, #20
 800161a:	4311      	orrs	r1, r2
 800161c:	68a2      	ldr	r2, [r4, #8]
 800161e:	f7ff fd13 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d188      	bne.n	800153c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001632:	f47f aec1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	6898      	ldr	r0, [r3, #8]
 800163a:	f000 0003 	and.w	r0, r0, #3
 800163e:	2801      	cmp	r0, #1
 8001640:	d102      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x370>
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	07c9      	lsls	r1, r1, #31
 8001646:	d422      	bmi.n	800168e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001648:	4920      	ldr	r1, [pc, #128]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 800164a:	428a      	cmp	r2, r1
 800164c:	d187      	bne.n	800155e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f47f aeb1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001656:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800165a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800165e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001662:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001666:	430b      	orrs	r3, r1
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fbb3 f2f2 	udiv	r2, r3, r2
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	4353      	muls	r3, r2
                wait_loop_index--;
 800167e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f ae98 	beq.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	e7f7      	b.n	800167e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001696:	e690      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016a0:	e6bd      	b.n	800141e <HAL_ADC_ConfigChannel+0x146>
 80016a2:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	f102 0608 	add.w	r6, r2, #8
 80016aa:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016ae:	e6c7      	b.n	8001440 <HAL_ADC_ConfigChannel+0x168>
 80016b0:	03fff000 	.word	0x03fff000
 80016b4:	cb840000 	.word	0xcb840000
 80016b8:	50040300 	.word	0x50040300
 80016bc:	80000001 	.word	0x80000001
 80016c0:	50040000 	.word	0x50040000
 80016c4:	0007ffff 	.word	0x0007ffff
 80016c8:	407f0000 	.word	0x407f0000
 80016cc:	c7520000 	.word	0xc7520000
 80016d0:	20000ec4 	.word	0x20000ec4
 80016d4:	001e8480 	.word	0x001e8480
 80016d8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016dc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016e4:	e6bd      	b.n	8001462 <HAL_ADC_ConfigChannel+0x18a>
 80016e6:	bf00      	nop

080016e8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	f012 0f0c 	tst.w	r2, #12
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016f4:	d101      	bne.n	80016fa <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0190      	lsls	r0, r2, #6
 80016fe:	d52a      	bpl.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8001700:	69e2      	ldr	r2, [r4, #28]
 8001702:	2a01      	cmp	r2, #1
 8001704:	d127      	bne.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001706:	69a2      	ldr	r2, [r4, #24]
 8001708:	2a01      	cmp	r2, #1
 800170a:	d124      	bne.n	8001756 <ADC_ConversionStop+0x6e>
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	0649      	lsls	r1, r1, #25
 8001712:	d514      	bpl.n	800173e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001718:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	0756      	lsls	r6, r2, #29
 800171e:	d50a      	bpl.n	8001736 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001720:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001722:	0795      	lsls	r5, r2, #30
 8001724:	d407      	bmi.n	8001736 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800172c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001736:	2901      	cmp	r1, #1
 8001738:	d10f      	bne.n	800175a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800173a:	2504      	movs	r5, #4
        break;
 800173c:	e01e      	b.n	800177c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800173e:	3a01      	subs	r2, #1
 8001740:	d1e5      	bne.n	800170e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001756:	2902      	cmp	r1, #2
 8001758:	d1df      	bne.n	800171a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	0710      	lsls	r0, r2, #28
 800175e:	d506      	bpl.n	800176e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001760:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001762:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001764:	bf5e      	ittt	pl
 8001766:	689a      	ldrpl	r2, [r3, #8]
 8001768:	f042 0220 	orrpl.w	r2, r2, #32
 800176c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800176e:	2902      	cmp	r1, #2
 8001770:	d003      	beq.n	800177a <ADC_ConversionStop+0x92>
 8001772:	2903      	cmp	r1, #3
 8001774:	d1e1      	bne.n	800173a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001776:	250c      	movs	r5, #12
 8001778:	e000      	b.n	800177c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800177a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800177c:	f7ff fc50 	bl	8001020 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	421d      	tst	r5, r3
 8001788:	d0b5      	beq.n	80016f6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178a:	f7ff fc49 	bl	8001020 <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	2805      	cmp	r0, #5
 8001792:	d9f6      	bls.n	8001782 <ADC_ConversionStop+0x9a>
 8001794:	e7d5      	b.n	8001742 <ADC_ConversionStop+0x5a>
 8001796:	bf00      	nop
 8001798:	0a340001 	.word	0x0a340001

0800179c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800179c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800179e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80017a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
{
 80017ac:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ae:	d108      	bne.n	80017c2 <ADC_Enable+0x26>
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	07d8      	lsls	r0, r3, #31
 80017b4:	d505      	bpl.n	80017c2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	e012      	b.n	80017e8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017c2:	6891      	ldr	r1, [r2, #8]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <ADC_Enable+0x94>)
 80017c6:	4219      	tst	r1, r3
 80017c8:	d127      	bne.n	800181a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ADC_Enable+0x98>)
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <ADC_Enable+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e4:	230a      	movs	r3, #10
 80017e6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e5      	bne.n	80017bc <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	4e11      	ldr	r6, [pc, #68]	; (800183c <ADC_Enable+0xa0>)
 80017f6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d4da      	bmi.n	80017b6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001800:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001802:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8001804:	bf5f      	itttt	pl
 8001806:	6893      	ldrpl	r3, [r2, #8]
 8001808:	4033      	andpl	r3, r6
 800180a:	f043 0301 	orrpl.w	r3, r3, #1
 800180e:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001810:	f7ff fc06 	bl	8001020 <HAL_GetTick>
 8001814:	1b40      	subs	r0, r0, r5
 8001816:	2802      	cmp	r0, #2
 8001818:	d9ee      	bls.n	80017f8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7c4      	b.n	80017b8 <ADC_Enable+0x1c>
 800182e:	bf00      	nop
 8001830:	8000003f 	.word	0x8000003f
 8001834:	20000ec4 	.word	0x20000ec4
 8001838:	001e8480 	.word	0x001e8480
 800183c:	7fffffc0 	.word	0x7fffffc0

08001840 <HAL_ADC_Start>:
{
 8001840:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001842:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001844:	689d      	ldr	r5, [r3, #8]
 8001846:	f015 0504 	ands.w	r5, r5, #4
{
 800184a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800184c:	d13a      	bne.n	80018c4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800184e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001852:	2b01      	cmp	r3, #1
 8001854:	d036      	beq.n	80018c4 <HAL_ADC_Start+0x84>
 8001856:	2301      	movs	r3, #1
 8001858:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800185c:	f7ff ff9e 	bl	800179c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001860:	2800      	cmp	r0, #0
 8001862:	d12c      	bne.n	80018be <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001874:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800187a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800187e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	bf48      	it	mi
 8001882:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001886:	bf52      	itee	pl
 8001888:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188a:	f023 0306 	bicmi.w	r3, r3, #6
 800188e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001890:	231c      	movs	r3, #28
 8001892:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001894:	2300      	movs	r3, #0
 8001896:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800189a:	68d3      	ldr	r3, [r2, #12]
 800189c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189e:	bf41      	itttt	mi
 80018a0:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 80018a2:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80018a6:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80018aa:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6093      	str	r3, [r2, #8]
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018be:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	6802      	ldr	r2, [r0, #0]
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
 80018cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ce:	6890      	ldr	r0, [r2, #8]
 80018d0:	f000 0003 	and.w	r0, r0, #3
 80018d4:	2801      	cmp	r0, #1
 80018d6:	d001      	beq.n	80018dc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	07d9      	lsls	r1, r3, #31
 80018e0:	d5fa      	bpl.n	80018d8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f003 030d 	and.w	r3, r3, #13
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11f      	bne.n	800192c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018fc:	2303      	movs	r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001900:	f7ff fb8e 	bl	8001020 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d5e4      	bpl.n	80018d8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190e:	f7ff fb87 	bl	8001020 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800193c:	bd38      	pop	{r3, r4, r5, pc}

0800193e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800193e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001942:	2b01      	cmp	r3, #1
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001948:	d016      	beq.n	8001978 <HAL_ADC_Stop+0x3a>
 800194a:	2301      	movs	r3, #1
 800194c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001950:	2103      	movs	r1, #3
 8001952:	f7ff fec9 	bl	80016e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001956:	b958      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ffb5 	bl	80018c8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800195e:	b938      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001970:	2300      	movs	r3, #0
 8001972:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001976:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001978:	2002      	movs	r0, #2
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800198c:	0200      	lsls	r0, r0, #8
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b530      	push	{r4, r5, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf28      	it	cs
 80019b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 0501 	mov.w	r5, #1
 80019bc:	fa05 f303 	lsl.w	r3, r5, r3
 80019c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c4:	bf8c      	ite	hi
 80019c6:	3c03      	subhi	r4, #3
 80019c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	4019      	ands	r1, r3
 80019cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ce:	fa05 f404 	lsl.w	r4, r5, r4
 80019d2:	3c01      	subs	r4, #1
 80019d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	ea42 0201 	orr.w	r2, r2, r1
 80019dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	bfaf      	iteee	ge
 80019e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	f000 000f 	andlt.w	r0, r0, #15
 80019ea:	4b06      	ldrlt	r3, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	bfa5      	ittet	ge
 80019f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019fc:	bd30      	pop	{r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	0942      	lsrs	r2, r0, #5
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 001f 	and.w	r0, r0, #31
 8001a10:	fa03 f000 	lsl.w	r0, r3, r0
 8001a14:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_NVIC_EnableIRQ+0x14>)
 8001a16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a20:	0943      	lsrs	r3, r0, #5
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 001f 	and.w	r0, r0, #31
 8001a28:	fa02 f000 	lsl.w	r0, r2, r0
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <HAL_NVIC_DisableIRQ+0x18>)
 8001a30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a42:	d20a      	bcs.n	8001a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	21f0      	movs	r1, #240	; 0xf0
 8001a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a68:	0943      	lsrs	r3, r0, #5
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f000 001f 	and.w	r0, r0, #31
 8001a70:	fa02 f000 	lsl.w	r0, r2, r0
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a86:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a88:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a8a:	bf0c      	ite	eq
 8001a8c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a90:	f022 0204 	bicne.w	r2, r2, #4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	4770      	bx	lr
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a9c:	4770      	bx	lr

08001a9e <HAL_SYSTICK_IRQHandler>:
{
 8001a9e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001aa0:	f7ff fffc 	bl	8001a9c <HAL_SYSTICK_Callback>
 8001aa4:	bd08      	pop	{r3, pc}

08001aa6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa6:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001aaa:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001aac:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001aae:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001ab0:	b114      	cbz	r4, 8001ab8 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab2:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001ab4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001ab6:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ab8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001aba:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001abc:	f004 051c 	and.w	r5, r4, #28
 8001ac0:	2401      	movs	r4, #1
 8001ac2:	40ac      	lsls	r4, r5
 8001ac4:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ac6:	6804      	ldr	r4, [r0, #0]
 8001ac8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aca:	6883      	ldr	r3, [r0, #8]
 8001acc:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ace:	bf0b      	itete	eq
 8001ad0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ad2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ad4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ad6:	60e2      	strne	r2, [r4, #12]
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}

08001ada <HAL_DMA_Start_IT>:
{
 8001ada:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001adc:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001ae0:	2d01      	cmp	r5, #1
{
 8001ae2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001ae4:	d039      	beq.n	8001b5a <HAL_DMA_Start_IT+0x80>
 8001ae6:	2501      	movs	r5, #1
 8001ae8:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aec:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8001af0:	2d01      	cmp	r5, #1
 8001af2:	f04f 0600 	mov.w	r6, #0
 8001af6:	f04f 0502 	mov.w	r5, #2
 8001afa:	d12c      	bne.n	8001b56 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b00:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001b02:	6806      	ldr	r6, [r0, #0]
 8001b04:	6835      	ldr	r5, [r6, #0]
 8001b06:	f025 0501 	bic.w	r5, r5, #1
 8001b0a:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b0c:	f7ff ffcb 	bl	8001aa6 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001b10:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001b12:	6803      	ldr	r3, [r0, #0]
 8001b14:	b1ba      	cbz	r2, 8001b46 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b1c:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b20:	6811      	ldr	r1, [r2, #0]
 8001b22:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b24:	bf42      	ittt	mi
 8001b26:	6811      	ldrmi	r1, [r2, #0]
 8001b28:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8001b2c:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001b2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001b30:	b11a      	cbz	r2, 8001b3a <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b32:	6811      	ldr	r1, [r2, #0]
 8001b34:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001b38:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b42:	2000      	movs	r0, #0
 8001b44:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f022 0204 	bic.w	r2, r2, #4
 8001b4c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f042 020a 	orr.w	r2, r2, #10
 8001b54:	e7e2      	b.n	8001b1c <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001b56:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001b5a:	2002      	movs	r0, #2
}
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}

08001b5e <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b5e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001b62:	2b02      	cmp	r3, #2
{
 8001b64:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b70:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b72:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b84:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b90:	f003 021c 	and.w	r2, r3, #28
 8001b94:	2301      	movs	r3, #1
 8001b96:	4093      	lsls	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001b9c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001b9e:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001ba0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ba2:	b133      	cbz	r3, 8001bb2 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001baa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001bae:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001bb0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferAbortCallback != NULL)
 8001bb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001bba:	2400      	movs	r4, #0
 8001bbc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001bc0:	b113      	cbz	r3, 8001bc8 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001bc2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	bd10      	pop	{r4, pc}
 8001bc8:	4618      	mov	r0, r3
}
 8001bca:	bd10      	pop	{r4, pc}

08001bcc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bcc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bce:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001bd0:	6803      	ldr	r3, [r0, #0]
{
 8001bd2:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bd4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bda:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bdc:	2404      	movs	r4, #4
 8001bde:	4094      	lsls	r4, r2
 8001be0:	4226      	tst	r6, r4
 8001be2:	d00e      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x36>
 8001be4:	f015 0f04 	tst.w	r5, #4
 8001be8:	d00b      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bee:	bf5e      	ittt	pl
 8001bf0:	681a      	ldrpl	r2, [r3, #0]
 8001bf2:	f022 0204 	bicpl.w	r2, r2, #4
 8001bf6:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001bf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001bfa:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001bfc:	b373      	cbz	r3, 8001c5c <HAL_DMA_IRQHandler+0x90>
}
 8001bfe:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c00:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c02:	2402      	movs	r4, #2
 8001c04:	4094      	lsls	r4, r2
 8001c06:	4226      	tst	r6, r4
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x64>
 8001c0a:	f015 0f02 	tst.w	r5, #2
 8001c0e:	d00f      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	0695      	lsls	r5, r2, #26
 8001c14:	d406      	bmi.n	8001c24 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f022 020a 	bic.w	r2, r2, #10
 8001c1c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001c24:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c26:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001c28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001c2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c2e:	e7e5      	b.n	8001bfc <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001c30:	2408      	movs	r4, #8
 8001c32:	4094      	lsls	r4, r2
 8001c34:	4234      	tst	r4, r6
 8001c36:	d011      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x90>
 8001c38:	072c      	lsls	r4, r5, #28
 8001c3a:	d50f      	bpl.n	8001c5c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3c:	681c      	ldr	r4, [r3, #0]
 8001c3e:	f024 040e 	bic.w	r4, r4, #14
 8001c42:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c44:	2301      	movs	r3, #1
 8001c46:	fa03 f202 	lsl.w	r2, r3, r2
 8001c4a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c4c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001c52:	2300      	movs	r3, #0
 8001c54:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001c58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c5a:	e7cf      	b.n	8001bfc <HAL_DMA_IRQHandler+0x30>
}
 8001c5c:	bc70      	pop	{r4, r5, r6}
 8001c5e:	4770      	bx	lr

08001c60 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001c62:	6805      	ldr	r5, [r0, #0]
 8001c64:	4e0a      	ldr	r6, [pc, #40]	; (8001c90 <DMA2D_SetConfig+0x30>)
 8001c66:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001c68:	fa96 f6a6 	rbit	r6, r6
 8001c6c:	9f05      	ldr	r7, [sp, #20]
 8001c6e:	fab6 f686 	clz	r6, r6
 8001c72:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001c76:	433c      	orrs	r4, r7
 8001c78:	40b3      	lsls	r3, r6
 8001c7a:	4323      	orrs	r3, r4
 8001c7c:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c7e:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001c80:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001c86:	bf0c      	ite	eq
 8001c88:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001c8a:	60e9      	strne	r1, [r5, #12]
 8001c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	3fff0000 	.word	0x3fff0000

08001c94 <HAL_DMA2D_Init>:
{ 
 8001c94:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001c96:	4604      	mov	r4, r0
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d043      	beq.n	8001d24 <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c9c:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001ca0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ca4:	b91b      	cbnz	r3, 8001cae <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001ca6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001caa:	f01d f9e7 	bl	801f07c <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	69e0      	ldr	r0, [r4, #28]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	6862      	ldr	r2, [r4, #4]
 8001cbc:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001cc0:	4302      	orrs	r2, r0
 8001cc2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001cca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ccc:	68a2      	ldr	r2, [r4, #8]
 8001cce:	69a0      	ldr	r0, [r4, #24]
 8001cd0:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001cd4:	4302      	orrs	r2, r0
 8001cd6:	f021 0101 	bic.w	r1, r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce0:	68e1      	ldr	r1, [r4, #12]
 8001ce2:	0c12      	lsrs	r2, r2, #16
 8001ce4:	0412      	lsls	r2, r2, #16
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001cea:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001cec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001cf8:	fab2 f082 	clz	r0, r2
 8001cfc:	fa91 f1a1 	rbit	r1, r1
 8001d00:	6922      	ldr	r2, [r4, #16]
 8001d02:	4082      	lsls	r2, r0
 8001d04:	6960      	ldr	r0, [r4, #20]
 8001d06:	fab1 f181 	clz	r1, r1
 8001d0a:	fa00 f101 	lsl.w	r1, r0, r1
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001d14:	430a      	orrs	r2, r1
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d18:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d1a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d1c:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d1e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
}
 8001d26:	bd38      	pop	{r3, r4, r5, pc}

08001d28 <HAL_DMA2D_Start>:
{
 8001d28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001d2a:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001d2e:	2c01      	cmp	r4, #1
 8001d30:	f04f 0402 	mov.w	r4, #2
 8001d34:	d00f      	beq.n	8001d56 <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d36:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001d3a:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001d3c:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001d3e:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001d42:	9400      	str	r4, [sp, #0]
 8001d44:	f7ff ff8c 	bl	8001c60 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001d48:	6802      	ldr	r2, [r0, #0]
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	4333      	orrs	r3, r6
 8001d4e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001d50:	2000      	movs	r0, #0
}
 8001d52:	b002      	add	sp, #8
 8001d54:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001d56:	4620      	mov	r0, r4
 8001d58:	e7fb      	b.n	8001d52 <HAL_DMA2D_Start+0x2a>

08001d5a <HAL_DMA2D_PollForTransfer>:
{
 8001d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001d60:	6803      	ldr	r3, [r0, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	07db      	lsls	r3, r3, #31
{
 8001d66:	4604      	mov	r4, r0
 8001d68:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001d6a:	d427      	bmi.n	8001dbc <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	0696      	lsls	r6, r2, #26
 8001d72:	d55c      	bpl.n	8001e2e <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001d74:	f7ff f954 	bl	8001020 <HAL_GetTick>
 8001d78:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	06d2      	lsls	r2, r2, #27
 8001d80:	d458      	bmi.n	8001e34 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001d86:	9a01      	ldr	r2, [sp, #4]
 8001d88:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001d8c:	d05d      	beq.n	8001e4a <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001d8e:	9a01      	ldr	r2, [sp, #4]
 8001d90:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001d92:	bf42      	ittt	mi
 8001d94:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001d96:	f042 0204 	orrmi.w	r2, r2, #4
 8001d9a:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001d9c:	9a01      	ldr	r2, [sp, #4]
 8001d9e:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001da0:	bf42      	ittt	mi
 8001da2:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001da4:	f042 0202 	orrmi.w	r2, r2, #2
 8001da8:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001dae:	bf42      	ittt	mi
 8001db0:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001db2:	f042 0201 	orrmi.w	r2, r2, #1
 8001db6:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001db8:	2229      	movs	r2, #41	; 0x29
 8001dba:	e01b      	b.n	8001df4 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001dbc:	f7ff f930 	bl	8001020 <HAL_GetTick>
 8001dc0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	0792      	lsls	r2, r2, #30
 8001dc8:	d4d0      	bmi.n	8001d6c <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001dce:	9a01      	ldr	r2, [sp, #4]
 8001dd0:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001dd4:	d017      	beq.n	8001e06 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001dd6:	9a01      	ldr	r2, [sp, #4]
 8001dd8:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001dda:	bf42      	ittt	mi
 8001ddc:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001dde:	f042 0202 	orrmi.w	r2, r2, #2
 8001de2:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001de4:	9a01      	ldr	r2, [sp, #4]
 8001de6:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001de8:	bf42      	ittt	mi
 8001dea:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001dec:	f042 0201 	orrmi.w	r2, r2, #1
 8001df0:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001df2:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001df4:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001df6:	2304      	movs	r3, #4
 8001df8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001e02:	2001      	movs	r0, #1
 8001e04:	e01f      	b.n	8001e46 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001e06:	1c69      	adds	r1, r5, #1
 8001e08:	d0dc      	beq.n	8001dc4 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e0a:	b955      	cbnz	r5, 8001e22 <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001e0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e0e:	f043 0320 	orr.w	r3, r3, #32
 8001e12:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001e14:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001e16:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001e18:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001e1c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001e20:	e011      	b.n	8001e46 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e22:	f7ff f8fd 	bl	8001020 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	4285      	cmp	r5, r0
 8001e2a:	d2ca      	bcs.n	8001dc2 <HAL_DMA2D_PollForTransfer+0x68>
 8001e2c:	e7ee      	b.n	8001e0c <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001e30:	069b      	lsls	r3, r3, #26
 8001e32:	d49f      	bmi.n	8001d74 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	2212      	movs	r2, #18
 8001e38:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001e3a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 8001e42:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8001e46:	b002      	add	sp, #8
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001e4a:	1c69      	adds	r1, r5, #1
 8001e4c:	d096      	beq.n	8001d7c <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d0dc      	beq.n	8001e0c <HAL_DMA2D_PollForTransfer+0xb2>
 8001e52:	f7ff f8e5 	bl	8001020 <HAL_GetTick>
 8001e56:	1b80      	subs	r0, r0, r6
 8001e58:	4285      	cmp	r5, r0
 8001e5a:	d28e      	bcs.n	8001d7a <HAL_DMA2D_PollForTransfer+0x20>
 8001e5c:	e7d6      	b.n	8001e0c <HAL_DMA2D_PollForTransfer+0xb2>
	...

08001e60 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001e60:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001e64:	2b01      	cmp	r3, #1
{   
 8001e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e68:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001e6c:	d041      	beq.n	8001ef2 <HAL_DMA2D_ConfigLayer+0x92>
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8001e74:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8001e78:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	d14d      	bne.n	8001f1a <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e7e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001e80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e82:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8001e84:	f1a6 0509 	sub.w	r5, r6, #9
 8001e88:	2d01      	cmp	r5, #1
 8001e8a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001e8e:	d832      	bhi.n	8001ef6 <HAL_DMA2D_ConfigLayer+0x96>
 8001e90:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8001e9c:	4331      	orrs	r1, r6
 8001e9e:	fa07 f303 	lsl.w	r3, r7, r3
 8001ea2:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8001ea4:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8001ea8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001eb4:	fab3 f783 	clz	r7, r3
 8001eb8:	fa96 f6a6 	rbit	r6, r6
 8001ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ebe:	40bb      	lsls	r3, r7
 8001ec0:	4f3c      	ldr	r7, [pc, #240]	; (8001fb4 <HAL_DMA2D_ConfigLayer+0x154>)
 8001ec2:	ea0e 0707 	and.w	r7, lr, r7
 8001ec6:	4339      	orrs	r1, r7
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ecc:	fab6 f686 	clz	r6, r6
 8001ed0:	fa01 f606 	lsl.w	r6, r1, r6
 8001ed4:	4333      	orrs	r3, r6
 8001ed6:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ed8:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 8001eda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001edc:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ede:	d802      	bhi.n	8001ee6 <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001ee0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001ee4:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 8001eec:	2300      	movs	r3, #0
 8001eee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 8001ef2:	4618      	mov	r0, r3
}
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	fa91 f1a1 	rbit	r1, r1
 8001f06:	fab1 f181 	clz	r1, r1
 8001f0a:	fa04 f101 	lsl.w	r1, r4, r1
 8001f0e:	fa07 f303 	lsl.w	r3, r7, r3
 8001f12:	430b      	orrs	r3, r1
 8001f14:	ea43 0106 	orr.w	r1, r3, r6
 8001f18:	e7c4      	b.n	8001ea4 <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f1a:	2418      	movs	r4, #24
 8001f1c:	fb04 0401 	mla	r4, r4, r1, r0
 8001f20:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001f26:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001f28:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8001f2a:	f1a7 0509 	sub.w	r5, r7, #9
 8001f2e:	2d01      	cmp	r5, #1
 8001f30:	d82f      	bhi.n	8001f92 <HAL_DMA2D_ConfigLayer+0x132>
 8001f32:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8001f3e:	4337      	orrs	r7, r6
 8001f40:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001f44:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8001f46:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8001f4a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8001f4e:	fa94 f4a4 	rbit	r4, r4
 8001f52:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001f56:	fab4 f784 	clz	r7, r4
 8001f5a:	fa96 f6a6 	rbit	r6, r6
 8001f5e:	2418      	movs	r4, #24
 8001f60:	fb04 0101 	mla	r1, r4, r1, r0
 8001f64:	fab6 f686 	clz	r6, r6
 8001f68:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8001f6a:	40bc      	lsls	r4, r7
 8001f6c:	4f11      	ldr	r7, [pc, #68]	; (8001fb4 <HAL_DMA2D_ConfigLayer+0x154>)
 8001f6e:	ea0e 0707 	and.w	r7, lr, r7
 8001f72:	433b      	orrs	r3, r7
 8001f74:	4323      	orrs	r3, r4
 8001f76:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001f78:	fa04 f606 	lsl.w	r6, r4, r6
 8001f7c:	4333      	orrs	r3, r6
 8001f7e:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f80:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 8001f82:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001f84:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001f86:	bf9e      	ittt	ls
 8001f88:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 8001f8a:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 8001f8e:	6213      	strls	r3, [r2, #32]
 8001f90:	e7a9      	b.n	8001ee6 <HAL_DMA2D_ConfigLayer+0x86>
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	fa9e feae 	rbit	lr, lr
 8001fa2:	fabe fe8e 	clz	lr, lr
 8001fa6:	fa04 f303 	lsl.w	r3, r4, r3
 8001faa:	fa06 f60e 	lsl.w	r6, r6, lr
 8001fae:	4333      	orrs	r3, r6
 8001fb0:	e7c8      	b.n	8001f44 <HAL_DMA2D_ConfigLayer+0xe4>
 8001fb2:	bf00      	nop
 8001fb4:	00ccfff0 	.word	0x00ccfff0

08001fb8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <FLASH_Program_Fast+0x20>)
 8001fba:	6953      	ldr	r3, [r2, #20]
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc2:	b672      	cpsid	i
 8001fc4:	f501 7300 	add.w	r3, r1, #512	; 0x200
 8001fc8:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001fca:	680a      	ldr	r2, [r1, #0]
 8001fcc:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 8001fce:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8001fd0:	4299      	cmp	r1, r3
 8001fd2:	d1fa      	bne.n	8001fca <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8001fd4:	b662      	cpsie	i
 8001fd6:	4770      	bx	lr
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_FLASH_Unlock+0x1c>)
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fe2:	bfbf      	itttt	lt
 8001fe4:	4a05      	ldrlt	r2, [pc, #20]	; (8001ffc <HAL_FLASH_Unlock+0x20>)
 8001fe6:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fe8:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001fec:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fee:	bfba      	itte	lt
 8001ff0:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	0fc0      	lsrlt	r0, r0, #31
 8001ff4:	2000      	movge	r0, #0
}
 8001ff6:	4770      	bx	lr
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	45670123 	.word	0x45670123

08002000 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_FLASH_Lock+0x10>)
 8002002:	6953      	ldr	r3, [r2, #20]
 8002004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002008:	6153      	str	r3, [r2, #20]
}
 800200a:	2000      	movs	r0, #0
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <FLASH_WaitForLastOperation>:
{
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff f802 	bl	8001020 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800201c:	4c1a      	ldr	r4, [pc, #104]	; (8002088 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 800201e:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002020:	6923      	ldr	r3, [r4, #16]
 8002022:	03db      	lsls	r3, r3, #15
 8002024:	d41e      	bmi.n	8002064 <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002026:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002028:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800202a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800202e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002032:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002036:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 800203a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 800203e:	4318      	orrs	r0, r3
 8002040:	d019      	beq.n	8002076 <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <FLASH_WaitForLastOperation+0x78>)
 8002044:	6853      	ldr	r3, [r2, #4]
 8002046:	4303      	orrs	r3, r0
 8002048:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 800204a:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 800204e:	bf1e      	ittt	ne
 8002050:	69a2      	ldrne	r2, [r4, #24]
 8002052:	4313      	orrne	r3, r2
 8002054:	61a3      	strne	r3, [r4, #24]
 8002056:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 800205a:	d001      	beq.n	8002060 <FLASH_WaitForLastOperation+0x4c>
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <FLASH_WaitForLastOperation+0x74>)
 800205e:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
 8002062:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002064:	1c6a      	adds	r2, r5, #1
 8002066:	d0db      	beq.n	8002020 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002068:	f7fe ffda 	bl	8001020 <HAL_GetTick>
 800206c:	1b80      	subs	r0, r0, r6
 800206e:	4285      	cmp	r5, r0
 8002070:	d8d6      	bhi.n	8002020 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8002072:	2003      	movs	r0, #3
 8002074:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002076:	6923      	ldr	r3, [r4, #16]
 8002078:	f013 0301 	ands.w	r3, r3, #1
 800207c:	d002      	beq.n	8002084 <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800207e:	2301      	movs	r3, #1
 8002080:	6123      	str	r3, [r4, #16]
 8002082:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002084:	4618      	mov	r0, r3
}
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	40022000 	.word	0x40022000
 800208c:	20000000 	.word	0x20000000

08002090 <HAL_FLASH_Program>:
{
 8002090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002094:	4c24      	ldr	r4, [pc, #144]	; (8002128 <HAL_FLASH_Program+0x98>)
{
 8002096:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8002098:	7823      	ldrb	r3, [r4, #0]
 800209a:	2b01      	cmp	r3, #1
{
 800209c:	4607      	mov	r7, r0
 800209e:	4688      	mov	r8, r1
 80020a0:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80020a2:	d03f      	beq.n	8002124 <HAL_FLASH_Program+0x94>
 80020a4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020a6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80020aa:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020ac:	f7ff ffb2 	bl	8002014 <FLASH_WaitForLastOperation>
 80020b0:	4606      	mov	r6, r0
  if(status == HAL_OK)
 80020b2:	bb20      	cbnz	r0, 80020fe <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020b4:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80020b6:	481d      	ldr	r0, [pc, #116]	; (800212c <HAL_FLASH_Program+0x9c>)
 80020b8:	6805      	ldr	r5, [r0, #0]
 80020ba:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020be:	bf17      	itett	ne
 80020c0:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80020c2:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020c4:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80020c8:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80020ca:	bf1c      	itt	ne
 80020cc:	2302      	movne	r3, #2
 80020ce:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80020d0:	b9d7      	cbnz	r7, 8002108 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020d2:	6945      	ldr	r5, [r0, #20]
 80020d4:	f045 0501 	orr.w	r5, r5, #1
 80020d8:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020da:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 80020de:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80020e0:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020e8:	f7ff ff94 	bl	8002014 <FLASH_WaitForLastOperation>
 80020ec:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80020ee:	b125      	cbz	r5, 80020fa <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_FLASH_Program+0x9c>)
 80020f2:	6953      	ldr	r3, [r2, #20]
 80020f4:	ea23 0505 	bic.w	r5, r3, r5
 80020f8:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 80020fa:	f000 f85d 	bl	80021b8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80020fe:	2300      	movs	r3, #0
 8002100:	7023      	strb	r3, [r4, #0]
}
 8002102:	4630      	mov	r0, r6
 8002104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002108:	1e7b      	subs	r3, r7, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d901      	bls.n	8002112 <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 800210e:	2500      	movs	r5, #0
 8002110:	e7e8      	b.n	80020e4 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002112:	4649      	mov	r1, r9
 8002114:	4640      	mov	r0, r8
 8002116:	f7ff ff4f 	bl	8001fb8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800211a:	2f02      	cmp	r7, #2
 800211c:	d1f7      	bne.n	800210e <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 800211e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002122:	e7df      	b.n	80020e4 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8002124:	2602      	movs	r6, #2
 8002126:	e7ec      	b.n	8002102 <HAL_FLASH_Program+0x72>
 8002128:	20000000 	.word	0x20000000
 800212c:	40022000 	.word	0x40022000

08002130 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002130:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <FLASH_MassErase+0x40>)
 8002132:	6a13      	ldr	r3, [r2, #32]
 8002134:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002138:	4613      	mov	r3, r2
 800213a:	d011      	beq.n	8002160 <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800213c:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800213e:	bf42      	ittt	mi
 8002140:	6952      	ldrmi	r2, [r2, #20]
 8002142:	f042 0204 	orrmi.w	r2, r2, #4
 8002146:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002148:	0782      	lsls	r2, r0, #30
 800214a:	d503      	bpl.n	8002154 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002152:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <FLASH_MassErase+0x40>)
 8002156:	6953      	ldr	r3, [r2, #20]
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6153      	str	r3, [r2, #20]
 800215e:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002160:	6953      	ldr	r3, [r2, #20]
 8002162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6153      	str	r3, [r2, #20]
 800216c:	e7f2      	b.n	8002154 <FLASH_MassErase+0x24>
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000

08002174 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <FLASH_PageErase+0x40>)
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800217c:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800217e:	d113      	bne.n	80021a8 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002184:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	00c0      	lsls	r0, r0, #3
 800218a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800218e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8002192:	4310      	orrs	r0, r2
 8002194:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	f042 0202 	orr.w	r2, r2, #2
 800219c:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 80021a8:	07c9      	lsls	r1, r1, #31
 80021aa:	d4e9      	bmi.n	8002180 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80021ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b0:	e7e8      	b.n	8002184 <FLASH_PageErase+0x10>
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80021b8:	4913      	ldr	r1, [pc, #76]	; (8002208 <FLASH_FlushCaches+0x50>)
 80021ba:	7f0b      	ldrb	r3, [r1, #28]
 80021bc:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 80021be:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80021c2:	2a01      	cmp	r2, #1
 80021c4:	d10c      	bne.n	80021e0 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <FLASH_FlushCaches+0x54>)
 80021c8:	6810      	ldr	r0, [r2, #0]
 80021ca:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80021ce:	6010      	str	r0, [r2, #0]
 80021d0:	6810      	ldr	r0, [r2, #0]
 80021d2:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80021d6:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	6810      	ldr	r0, [r2, #0]
 80021da:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80021de:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80021e0:	3b02      	subs	r3, #2
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d80c      	bhi.n	8002200 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <FLASH_FlushCaches+0x54>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021f6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002200:	2300      	movs	r3, #0
 8002202:	770b      	strb	r3, [r1, #28]
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_FLASHEx_Erase>:
{
 8002210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002214:	4c35      	ldr	r4, [pc, #212]	; (80022ec <HAL_FLASHEx_Erase+0xdc>)
 8002216:	7823      	ldrb	r3, [r4, #0]
 8002218:	2b01      	cmp	r3, #1
{
 800221a:	4606      	mov	r6, r0
 800221c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800221e:	d062      	beq.n	80022e6 <HAL_FLASHEx_Erase+0xd6>
 8002220:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002222:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002226:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002228:	f7ff fef4 	bl	8002014 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800222c:	4605      	mov	r5, r0
 800222e:	bb40      	cbnz	r0, 8002282 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002232:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800223a:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800223c:	d026      	beq.n	800228c <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800223e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002242:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	0551      	lsls	r1, r2, #21
 8002248:	d506      	bpl.n	8002258 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002250:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002252:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002254:	7723      	strb	r3, [r4, #28]
 8002256:	e000      	b.n	800225a <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002258:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800225a:	6833      	ldr	r3, [r6, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d11f      	bne.n	80022a0 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8002260:	6870      	ldr	r0, [r6, #4]
 8002262:	f7ff ff65 	bl	8002130 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800226a:	f7ff fed3 	bl	8002014 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800226e:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_FLASHEx_Erase+0xe0>)
 8002270:	6953      	ldr	r3, [r2, #20]
 8002272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002276:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800227a:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800227c:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800227e:	f7ff ff9b 	bl	80021b8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002282:	2300      	movs	r3, #0
 8002284:	7023      	strb	r3, [r4, #0]
}
 8002286:	4628      	mov	r0, r5
 8002288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800228c:	0552      	lsls	r2, r2, #21
 800228e:	d505      	bpl.n	800229c <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002298:	2302      	movs	r3, #2
 800229a:	e7db      	b.n	8002254 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800229c:	7720      	strb	r0, [r4, #28]
 800229e:	e7dc      	b.n	800225a <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022a8:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80022aa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80022f0 <HAL_FLASHEx_Erase+0xe0>
 80022ae:	f8df a044 	ldr.w	sl, [pc, #68]	; 80022f4 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022b2:	68b3      	ldr	r3, [r6, #8]
 80022b4:	68f2      	ldr	r2, [r6, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	429f      	cmp	r7, r3
 80022ba:	d2e0      	bcs.n	800227e <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80022bc:	6871      	ldr	r1, [r6, #4]
 80022be:	4638      	mov	r0, r7
 80022c0:	f7ff ff58 	bl	8002174 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c8:	f7ff fea4 	bl	8002014 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80022cc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80022d0:	ea03 030a 	and.w	r3, r3, sl
 80022d4:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80022d8:	b118      	cbz	r0, 80022e2 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80022da:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022de:	4605      	mov	r5, r0
          break;
 80022e0:	e7cd      	b.n	800227e <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022e2:	3701      	adds	r7, #1
 80022e4:	e7e5      	b.n	80022b2 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80022e6:	2502      	movs	r5, #2
 80022e8:	e7cd      	b.n	8002286 <HAL_FLASHEx_Erase+0x76>
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000
 80022f0:	40022000 	.word	0x40022000
 80022f4:	fffff805 	.word	0xfffff805

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80024a4 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002308:	fa38 f403 	lsrs.w	r4, r8, r3
 800230c:	d102      	bne.n	8002314 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800230e:	b003      	add	sp, #12
 8002310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002314:	f04f 0e01 	mov.w	lr, #1
 8002318:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800231c:	ea18 060e 	ands.w	r6, r8, lr
 8002320:	f000 80ab 	beq.w	800247a <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002324:	684c      	ldr	r4, [r1, #4]
 8002326:	f024 0710 	bic.w	r7, r4, #16
 800232a:	2f02      	cmp	r7, #2
 800232c:	d116      	bne.n	800235c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800232e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002332:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002336:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800233a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800233e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002342:	f04f 0c0f 	mov.w	ip, #15
 8002346:	fa0c fc0b 	lsl.w	ip, ip, fp
 800234a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800234e:	690d      	ldr	r5, [r1, #16]
 8002350:	fa05 f50b 	lsl.w	r5, r5, fp
 8002354:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002358:	f8ca 5020 	str.w	r5, [sl, #32]
 800235c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002360:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002362:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002366:	fa05 f50a 	lsl.w	r5, r5, sl
 800236a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800236c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002370:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002374:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002378:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002380:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002384:	d811      	bhi.n	80023aa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002386:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002388:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	68cf      	ldr	r7, [r1, #12]
 800238e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002392:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002396:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002398:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800239e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80023a2:	409f      	lsls	r7, r3
 80023a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80023a8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80023aa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023ac:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ae:	688f      	ldr	r7, [r1, #8]
 80023b0:	fa07 f70a 	lsl.w	r7, r7, sl
 80023b4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80023b6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b8:	00e5      	lsls	r5, r4, #3
 80023ba:	d55e      	bpl.n	800247a <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80023c0:	f045 0501 	orr.w	r5, r5, #1
 80023c4:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80023c8:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80023cc:	f023 0703 	bic.w	r7, r3, #3
 80023d0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80023d4:	f005 0501 	and.w	r5, r5, #1
 80023d8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80023dc:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023de:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80023e4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e8:	f04f 0c0f 	mov.w	ip, #15
 80023ec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80023f0:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f8:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fc:	d03f      	beq.n	800247e <HAL_GPIO_Init+0x186>
 80023fe:	4d28      	ldr	r5, [pc, #160]	; (80024a0 <HAL_GPIO_Init+0x1a8>)
 8002400:	42a8      	cmp	r0, r5
 8002402:	d03e      	beq.n	8002482 <HAL_GPIO_Init+0x18a>
 8002404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002408:	42a8      	cmp	r0, r5
 800240a:	d03c      	beq.n	8002486 <HAL_GPIO_Init+0x18e>
 800240c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002410:	42a8      	cmp	r0, r5
 8002412:	d03a      	beq.n	800248a <HAL_GPIO_Init+0x192>
 8002414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002418:	42a8      	cmp	r0, r5
 800241a:	d038      	beq.n	800248e <HAL_GPIO_Init+0x196>
 800241c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002420:	42a8      	cmp	r0, r5
 8002422:	d036      	beq.n	8002492 <HAL_GPIO_Init+0x19a>
 8002424:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002428:	42a8      	cmp	r0, r5
 800242a:	d034      	beq.n	8002496 <HAL_GPIO_Init+0x19e>
 800242c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002430:	42a8      	cmp	r0, r5
 8002432:	bf14      	ite	ne
 8002434:	2508      	movne	r5, #8
 8002436:	2507      	moveq	r5, #7
 8002438:	fa05 f50e 	lsl.w	r5, r5, lr
 800243c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002440:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 8002442:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8002444:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002446:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800244a:	bf0c      	ite	eq
 800244c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800244e:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 8002450:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 8002452:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002458:	bf0c      	ite	eq
 800245a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800245c:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 800245e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 8002460:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002462:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002466:	bf0c      	ite	eq
 8002468:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800246a:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 800246c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 800246e:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002470:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002472:	bf54      	ite	pl
 8002474:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002476:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8002478:	60d5      	str	r5, [r2, #12]
    position++;
 800247a:	3301      	adds	r3, #1
 800247c:	e744      	b.n	8002308 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800247e:	2500      	movs	r5, #0
 8002480:	e7da      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002482:	2501      	movs	r5, #1
 8002484:	e7d8      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002486:	2502      	movs	r5, #2
 8002488:	e7d6      	b.n	8002438 <HAL_GPIO_Init+0x140>
 800248a:	2503      	movs	r5, #3
 800248c:	e7d4      	b.n	8002438 <HAL_GPIO_Init+0x140>
 800248e:	2504      	movs	r5, #4
 8002490:	e7d2      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002492:	2505      	movs	r5, #5
 8002494:	e7d0      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002496:	2506      	movs	r5, #6
 8002498:	e7ce      	b.n	8002438 <HAL_GPIO_Init+0x140>
 800249a:	bf00      	nop
 800249c:	40010400 	.word	0x40010400
 80024a0:	48000400 	.word	0x48000400
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80024ac:	4d46      	ldr	r5, [pc, #280]	; (80025c8 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024ae:	f8df a120 	ldr.w	sl, [pc, #288]	; 80025d0 <HAL_GPIO_DeInit+0x128>
 80024b2:	f8df b120 	ldr.w	fp, [pc, #288]	; 80025d4 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 80024b6:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024b8:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80024bc:	fa31 f302 	lsrs.w	r3, r1, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 80024c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024c6:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 80024ca:	ea11 0608 	ands.w	r6, r1, r8
 80024ce:	d06b      	beq.n	80025a8 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024d0:	6807      	ldr	r7, [r0, #0]
 80024d2:	2303      	movs	r3, #3
 80024d4:	0054      	lsls	r4, r2, #1
 80024d6:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80024da:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024de:	4327      	orrs	r7, r4
 80024e0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80024e4:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80024e6:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80024ea:	f002 0e07 	and.w	lr, r2, #7
 80024ee:	463b      	mov	r3, r7
 80024f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80024f4:	270f      	movs	r7, #15
 80024f6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80024fa:	ea23 0e0e 	bic.w	lr, r3, lr
 80024fe:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002502:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002506:	43e4      	mvns	r4, r4
 8002508:	ea0e 0e04 	and.w	lr, lr, r4
 800250c:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002510:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002514:	ea2e 0808 	bic.w	r8, lr, r8
 8002518:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800251c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8002520:	ea04 040e 	and.w	r4, r4, lr
 8002524:	60c4      	str	r4, [r0, #12]
 8002526:	f022 0403 	bic.w	r4, r2, #3
 800252a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800252e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002532:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002536:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800253a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800253e:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002542:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002546:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800254a:	d02f      	beq.n	80025ac <HAL_GPIO_DeInit+0x104>
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_GPIO_DeInit+0x124>)
 800254e:	4298      	cmp	r0, r3
 8002550:	d02e      	beq.n	80025b0 <HAL_GPIO_DeInit+0x108>
 8002552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002556:	4298      	cmp	r0, r3
 8002558:	d02c      	beq.n	80025b4 <HAL_GPIO_DeInit+0x10c>
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	4298      	cmp	r0, r3
 8002560:	d02a      	beq.n	80025b8 <HAL_GPIO_DeInit+0x110>
 8002562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002566:	4298      	cmp	r0, r3
 8002568:	d028      	beq.n	80025bc <HAL_GPIO_DeInit+0x114>
 800256a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256e:	4298      	cmp	r0, r3
 8002570:	d026      	beq.n	80025c0 <HAL_GPIO_DeInit+0x118>
 8002572:	4550      	cmp	r0, sl
 8002574:	d026      	beq.n	80025c4 <HAL_GPIO_DeInit+0x11c>
 8002576:	4558      	cmp	r0, fp
 8002578:	bf0c      	ite	eq
 800257a:	2307      	moveq	r3, #7
 800257c:	2308      	movne	r3, #8
 800257e:	fa03 f30e 	lsl.w	r3, r3, lr
 8002582:	459c      	cmp	ip, r3
 8002584:	d110      	bne.n	80025a8 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002586:	68a3      	ldr	r3, [r4, #8]
 8002588:	ea23 0707 	bic.w	r7, r3, r7
 800258c:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	43f6      	mvns	r6, r6
 8002592:	4033      	ands	r3, r6
 8002594:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002596:	686b      	ldr	r3, [r5, #4]
 8002598:	4033      	ands	r3, r6
 800259a:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800259c:	68ab      	ldr	r3, [r5, #8]
 800259e:	4033      	ands	r3, r6
 80025a0:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80025a2:	68eb      	ldr	r3, [r5, #12]
 80025a4:	401e      	ands	r6, r3
 80025a6:	60ee      	str	r6, [r5, #12]
    position++;
 80025a8:	3201      	adds	r2, #1
 80025aa:	e787      	b.n	80024bc <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025ac:	2300      	movs	r3, #0
 80025ae:	e7e6      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e7e4      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e7e2      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025b8:	2303      	movs	r3, #3
 80025ba:	e7e0      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025bc:	2304      	movs	r3, #4
 80025be:	e7de      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025c0:	2305      	movs	r3, #5
 80025c2:	e7dc      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025c4:	2306      	movs	r3, #6
 80025c6:	e7da      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025c8:	40010400 	.word	0x40010400
 80025cc:	48000400 	.word	0x48000400
 80025d0:	48001800 	.word	0x48001800
 80025d4:	48001c00 	.word	0x48001c00

080025d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025d8:	6903      	ldr	r3, [r0, #16]
 80025da:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80025dc:	bf14      	ite	ne
 80025de:	2001      	movne	r0, #1
 80025e0:	2000      	moveq	r0, #0
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	b10a      	cbz	r2, 80025ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e6:	6181      	str	r1, [r0, #24]
 80025e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ea:	6281      	str	r1, [r0, #40]	; 0x28
 80025ec:	4770      	bx	lr

080025ee <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80025ee:	6943      	ldr	r3, [r0, #20]
 80025f0:	4059      	eors	r1, r3
 80025f2:	6141      	str	r1, [r0, #20]
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80025f8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80025fc:	6959      	ldr	r1, [r3, #20]
 80025fe:	4201      	tst	r1, r0
 8002600:	d002      	beq.n	8002608 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002602:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002604:	f7ff fff7 	bl	80025f6 <HAL_GPIO_EXTI_Callback>
 8002608:	bd08      	pop	{r3, pc}
 800260a:	bf00      	nop
 800260c:	40010400 	.word	0x40010400

08002610 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002616:	bf44      	itt	mi
 8002618:	2200      	movmi	r2, #0
 800261a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002620:	bf5e      	ittt	pl
 8002622:	699a      	ldrpl	r2, [r3, #24]
 8002624:	f042 0201 	orrpl.w	r2, r2, #1
 8002628:	619a      	strpl	r2, [r3, #24]
 800262a:	4770      	bx	lr

0800262c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800262c:	b530      	push	{r4, r5, lr}
 800262e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002630:	6805      	ldr	r5, [r0, #0]
 8002632:	4323      	orrs	r3, r4
 8002634:	0d64      	lsrs	r4, r4, #21
 8002636:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800263a:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800263e:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002642:	6868      	ldr	r0, [r5, #4]
 8002644:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002648:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800264c:	4319      	orrs	r1, r3
 800264e:	f044 0403 	orr.w	r4, r4, #3
 8002652:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002656:	ea20 0404 	bic.w	r4, r0, r4
 800265a:	4321      	orrs	r1, r4
 800265c:	6069      	str	r1, [r5, #4]
 800265e:	bd30      	pop	{r4, r5, pc}

08002660 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002660:	f011 0301 	ands.w	r3, r1, #1
 8002664:	d007      	beq.n	8002676 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002666:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800266a:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800266e:	2b28      	cmp	r3, #40	; 0x28
 8002670:	bf0c      	ite	eq
 8002672:	2342      	moveq	r3, #66	; 0x42
 8002674:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002676:	078a      	lsls	r2, r1, #30
 8002678:	d509      	bpl.n	800268e <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800267a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800267e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002682:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002684:	bf0c      	ite	eq
 8002686:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800268a:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800268e:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002690:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002694:	bf48      	it	mi
 8002696:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800269a:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800269e:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80026a0:	bf08      	it	eq
 80026a2:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80026a6:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026a8:	6801      	ldr	r1, [r0, #0]
 80026aa:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80026ac:	bf08      	it	eq
 80026ae:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026b2:	ea22 0303 	bic.w	r3, r2, r3
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	4770      	bx	lr

080026ba <I2C_WaitOnFlagUntilTimeout>:
{
 80026ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026be:	9f06      	ldr	r7, [sp, #24]
 80026c0:	4604      	mov	r4, r0
 80026c2:	4688      	mov	r8, r1
 80026c4:	4616      	mov	r6, r2
 80026c6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	6993      	ldr	r3, [r2, #24]
 80026cc:	ea38 0303 	bics.w	r3, r8, r3
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	42b3      	cmp	r3, r6
 80026d8:	d002      	beq.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80026da:	2000      	movs	r0, #0
}
 80026dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	1c6b      	adds	r3, r5, #1
 80026e2:	d0f2      	beq.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e4:	f7fe fc9c 	bl	8001020 <HAL_GetTick>
 80026e8:	1bc0      	subs	r0, r0, r7
 80026ea:	4285      	cmp	r5, r0
 80026ec:	d301      	bcc.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x38>
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	d1ea      	bne.n	80026c8 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	2320      	movs	r3, #32
 80026fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	2300      	movs	r3, #0
 8002702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002706:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800270a:	2001      	movs	r0, #1
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002710 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002710:	6803      	ldr	r3, [r0, #0]
{
 8002712:	b570      	push	{r4, r5, r6, lr}
 8002714:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002716:	6998      	ldr	r0, [r3, #24]
 8002718:	f010 0010 	ands.w	r0, r0, #16
{
 800271c:	460d      	mov	r5, r1
 800271e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002720:	d116      	bne.n	8002750 <I2C_IsAcknowledgeFailed+0x40>
 8002722:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002724:	1c69      	adds	r1, r5, #1
 8002726:	d014      	beq.n	8002752 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002728:	f7fe fc7a 	bl	8001020 <HAL_GetTick>
 800272c:	1b80      	subs	r0, r0, r6
 800272e:	4285      	cmp	r5, r0
 8002730:	d300      	bcc.n	8002734 <I2C_IsAcknowledgeFailed+0x24>
 8002732:	b96d      	cbnz	r5, 8002750 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002736:	f043 0320 	orr.w	r3, r3, #32
 800273a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800273c:	2320      	movs	r3, #32
 800273e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	2300      	movs	r3, #0
 8002744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002748:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
}
 800274e:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	6999      	ldr	r1, [r3, #24]
 8002754:	068a      	lsls	r2, r1, #26
 8002756:	d5e5      	bpl.n	8002724 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002758:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800275a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800275e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002762:	f7ff ff55 	bl	8002610 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	6853      	ldr	r3, [r2, #4]
 800276a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800276e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002772:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800277c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002788:	e7db      	b.n	8002742 <I2C_IsAcknowledgeFailed+0x32>

0800278a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	4604      	mov	r4, r0
 800278e:	460d      	mov	r5, r1
 8002790:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	079b      	lsls	r3, r3, #30
 8002798:	d501      	bpl.n	800279e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800279a:	2000      	movs	r0, #0
 800279c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800279e:	4632      	mov	r2, r6
 80027a0:	4629      	mov	r1, r5
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff ffb4 	bl	8002710 <I2C_IsAcknowledgeFailed>
 80027a8:	b9a0      	cbnz	r0, 80027d4 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	1c6a      	adds	r2, r5, #1
 80027ac:	d0f1      	beq.n	8002792 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7fe fc37 	bl	8001020 <HAL_GetTick>
 80027b2:	1b80      	subs	r0, r0, r6
 80027b4:	4285      	cmp	r5, r0
 80027b6:	d301      	bcc.n	80027bc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80027b8:	2d00      	cmp	r5, #0
 80027ba:	d1ea      	bne.n	8002792 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027be:	f043 0320 	orr.w	r3, r3, #32
 80027c2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	2320      	movs	r3, #32
 80027c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80027d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80027d4:	2001      	movs	r0, #1
}
 80027d6:	bd70      	pop	{r4, r5, r6, pc}

080027d8 <I2C_RequestMemoryRead>:
{
 80027d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80027dc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <I2C_RequestMemoryRead+0x60>)
 80027e0:	9300      	str	r3, [sp, #0]
{
 80027e2:	4605      	mov	r5, r0
 80027e4:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027e6:	2300      	movs	r3, #0
 80027e8:	b2fa      	uxtb	r2, r7
 80027ea:	f7ff ff1f 	bl	800262c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ee:	4632      	mov	r2, r6
 80027f0:	9908      	ldr	r1, [sp, #32]
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7ff ffc9 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 80027f8:	b110      	cbz	r0, 8002800 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
}
 80027fc:	b003      	add	sp, #12
 80027fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002800:	2f01      	cmp	r7, #1
 8002802:	682b      	ldr	r3, [r5, #0]
 8002804:	d10c      	bne.n	8002820 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002806:	b2e4      	uxtb	r4, r4
 8002808:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	9b08      	ldr	r3, [sp, #32]
 800280c:	9600      	str	r6, [sp, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	4628      	mov	r0, r5
 8002814:	f7ff ff51 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002818:	3000      	adds	r0, #0
 800281a:	bf18      	it	ne
 800281c:	2001      	movne	r0, #1
 800281e:	e7ed      	b.n	80027fc <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002820:	0a22      	lsrs	r2, r4, #8
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002824:	9908      	ldr	r1, [sp, #32]
 8002826:	4632      	mov	r2, r6
 8002828:	4628      	mov	r0, r5
 800282a:	f7ff ffae 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 800282e:	2800      	cmp	r0, #0
 8002830:	d1e3      	bne.n	80027fa <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002832:	682b      	ldr	r3, [r5, #0]
 8002834:	e7e7      	b.n	8002806 <I2C_RequestMemoryRead+0x2e>
 8002836:	bf00      	nop
 8002838:	80002000 	.word	0x80002000

0800283c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	4604      	mov	r4, r0
 8002840:	460d      	mov	r5, r1
 8002842:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	069b      	lsls	r3, r3, #26
 800284a:	d501      	bpl.n	8002850 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
 800284e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002850:	4632      	mov	r2, r6
 8002852:	4629      	mov	r1, r5
 8002854:	4620      	mov	r0, r4
 8002856:	f7ff ff5b 	bl	8002710 <I2C_IsAcknowledgeFailed>
 800285a:	b990      	cbnz	r0, 8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe fbe0 	bl	8001020 <HAL_GetTick>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	4285      	cmp	r5, r0
 8002864:	d301      	bcc.n	800286a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002866:	2d00      	cmp	r5, #0
 8002868:	d1ec      	bne.n	8002844 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800286c:	f043 0320 	orr.w	r3, r3, #32
 8002870:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002872:	2320      	movs	r3, #32
 8002874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	2300      	movs	r3, #0
 800287a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800287e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002882:	2001      	movs	r0, #1
}
 8002884:	bd70      	pop	{r4, r5, r6, pc}

08002886 <HAL_I2C_Init>:
{
 8002886:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002888:	4604      	mov	r4, r0
 800288a:	2800      	cmp	r0, #0
 800288c:	d04a      	beq.n	8002924 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002892:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002896:	b91b      	cbnz	r3, 80028a0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002898:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800289c:	f01c fc0c 	bl	801f0b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	2324      	movs	r3, #36	; 0x24
 80028a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80028a6:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b2:	6862      	ldr	r2, [r4, #4]
 80028b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ba:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028bc:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c6:	d124      	bne.n	8002912 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028cc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ce:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028d0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80028d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028da:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028e4:	6922      	ldr	r2, [r4, #16]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	69a1      	ldr	r1, [r4, #24]
 80028ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028ee:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f0:	6a21      	ldr	r1, [r4, #32]
 80028f2:	69e2      	ldr	r2, [r4, #28]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002902:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002906:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002910:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002916:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002918:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800291a:	bf04      	itt	eq
 800291c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002920:	605a      	streq	r2, [r3, #4]
 8002922:	e7d4      	b.n	80028ce <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
}
 8002926:	bd10      	pop	{r4, pc}

08002928 <HAL_I2C_Mem_Read>:
{
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002932:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002934:	2b20      	cmp	r3, #32
{
 8002936:	4604      	mov	r4, r0
 8002938:	460f      	mov	r7, r1
 800293a:	9203      	str	r2, [sp, #12]
 800293c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002940:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002944:	f040 80a9 	bne.w	8002a9a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800294a:	b113      	cbz	r3, 8002952 <HAL_I2C_Mem_Read+0x2a>
 800294c:	f1ba 0f00 	cmp.w	sl, #0
 8002950:	d106      	bne.n	8002960 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002956:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
}
 800295a:	b005      	add	sp, #20
 800295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002960:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002964:	2b01      	cmp	r3, #1
 8002966:	f000 8098 	beq.w	8002a9a <HAL_I2C_Mem_Read+0x172>
 800296a:	2501      	movs	r5, #1
 800296c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002970:	f7fe fb56 	bl	8001020 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002974:	2319      	movs	r3, #25
 8002976:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002978:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800297a:	462a      	mov	r2, r5
 800297c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fe9a 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
 8002986:	4681      	mov	r9, r0
 8002988:	2800      	cmp	r0, #0
 800298a:	d1e5      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800298c:	2322      	movs	r3, #34	; 0x22
 800298e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800299a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800299c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800299e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80029a0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029a4:	9601      	str	r6, [sp, #4]
 80029a6:	f8cd 8000 	str.w	r8, [sp]
 80029aa:	465b      	mov	r3, fp
 80029ac:	9a03      	ldr	r2, [sp, #12]
 80029ae:	4639      	mov	r1, r7
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ff11 	bl	80027d8 <I2C_RequestMemoryRead>
 80029b6:	b110      	cbz	r0, 80029be <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80029b8:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80029bc:	e7cc      	b.n	8002958 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2bff      	cmp	r3, #255	; 0xff
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_I2C_Mem_Read+0x178>)
 80029c6:	d958      	bls.n	8002a7a <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029c8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80029ca:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80029ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029d2:	4639      	mov	r1, r7
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fe29 	bl	800262c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029da:	9600      	str	r6, [sp, #0]
 80029dc:	4643      	mov	r3, r8
 80029de:	2200      	movs	r2, #0
 80029e0:	2104      	movs	r1, #4
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff fe69 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	d1b5      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80029f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80029f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80029f8:	3301      	adds	r3, #1
 80029fa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80029fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a06:	3a01      	subs	r2, #1
 8002a08:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a0a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002a0c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a0e:	b1ab      	cbz	r3, 8002a3c <HAL_I2C_Mem_Read+0x114>
 8002a10:	b9a2      	cbnz	r2, 8002a3c <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a12:	9600      	str	r6, [sp, #0]
 8002a14:	4643      	mov	r3, r8
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fe4e 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d19a      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2bff      	cmp	r3, #255	; 0xff
 8002a28:	d92f      	bls.n	8002a8a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2a:	22ff      	movs	r2, #255	; 0xff
 8002a2c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a2e:	9000      	str	r0, [sp, #0]
 8002a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a34:	4639      	mov	r1, r7
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7ff fdf8 	bl	800262c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002a3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ca      	bne.n	80029da <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	4632      	mov	r2, r6
 8002a46:	4641      	mov	r1, r8
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff fef7 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d182      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	2120      	movs	r1, #32
 8002a56:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002a5e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002a62:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002a70:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002a78:	e76f      	b.n	800295a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002a7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a7c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	e7a3      	b.n	80029d2 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002a8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a8c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	e7cc      	b.n	8002a34 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	e75d      	b.n	800295a <HAL_I2C_Mem_Read+0x32>
 8002a9e:	bf00      	nop
 8002aa0:	80002400 	.word	0x80002400

08002aa4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002aa4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8002aa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002aa8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002aaa:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8002aac:	b103      	cbz	r3, 8002ab0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002aae:	4718      	bx	r3
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_SlaveTxCpltCallback>:
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_I2C_SlaveRxCpltCallback>:
 8002ab4:	4770      	bx	lr

08002ab6 <I2C_ITSlaveSequentialCplt>:
{
 8002ab6:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	2500      	movs	r5, #0
 8002aba:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002abe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ac2:	2b29      	cmp	r3, #41	; 0x29
 8002ac4:	d10c      	bne.n	8002ae0 <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ac6:	2328      	movs	r3, #40	; 0x28
 8002ac8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002acc:	2321      	movs	r3, #33	; 0x21
 8002ace:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	f7ff fdc5 	bl	8002660 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ad6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ada:	f7ff ffea 	bl	8002ab2 <HAL_I2C_SlaveTxCpltCallback>
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ae0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae6:	d10b      	bne.n	8002b00 <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ae8:	2328      	movs	r3, #40	; 0x28
 8002aea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002aee:	2322      	movs	r3, #34	; 0x22
 8002af0:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002af2:	2102      	movs	r1, #2
 8002af4:	f7ff fdb4 	bl	8002660 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002af8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002afc:	f7ff ffda 	bl	8002ab4 <HAL_I2C_SlaveRxCpltCallback>
 8002b00:	bd38      	pop	{r3, r4, r5, pc}

08002b02 <HAL_I2C_AddrCallback>:
{
 8002b02:	4770      	bx	lr

08002b04 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b0e:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002b10:	4604      	mov	r4, r0
 8002b12:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b14:	d134      	bne.n	8002b80 <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002b16:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b18:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b1a:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b1c:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b1e:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b20:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b22:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002b24:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b28:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b2c:	d120      	bne.n	8002b70 <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002b32:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002b36:	f015 0506 	ands.w	r5, r5, #6
 8002b3a:	d10e      	bne.n	8002b5a <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002b3c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b3e:	3101      	adds	r1, #1
 8002b40:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b42:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b44:	2902      	cmp	r1, #2
 8002b46:	d120      	bne.n	8002b8a <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b48:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002b4a:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b4c:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002b4e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b52:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b54:	f7ff ffd5 	bl	8002b02 <HAL_I2C_AddrCallback>
 8002b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	f7ff fd80 	bl	8002660 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b60:	2300      	movs	r3, #0
 8002b62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b66:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b6a:	4631      	mov	r1, r6
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	e7f1      	b.n	8002b54 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b70:	2104      	movs	r1, #4
 8002b72:	f7ff fd75 	bl	8002660 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b7c:	462a      	mov	r2, r5
 8002b7e:	e7f4      	b.n	8002b6a <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b80:	2208      	movs	r2, #8
 8002b82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002b84:	2300      	movs	r3, #0
 8002b86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b8c <HAL_I2C_ListenCpltCallback>:
 8002b8c:	4770      	bx	lr
	...

08002b90 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <I2C_ITListenCplt+0x60>)
{
 8002b92:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b96:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002b9c:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ba6:	074b      	lsls	r3, r1, #29
{
 8002ba8:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002baa:	d512      	bpl.n	8002bd2 <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002bba:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002bbc:	b14b      	cbz	r3, 8002bd2 <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002bc2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	2107      	movs	r1, #7
 8002bd6:	f7ff fd43 	bl	8002660 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002be0:	2300      	movs	r3, #0
 8002be2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7ff ffd0 	bl	8002b8c <HAL_I2C_ListenCpltCallback>
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	bf00      	nop
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <HAL_I2C_ErrorCallback>:
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_I2C_AbortCpltCallback>:
{
 8002bf6:	4770      	bx	lr

08002bf8 <I2C_ITError>:
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002bfc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c00:	2500      	movs	r5, #0
 8002c02:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c06:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002c08:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002c0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c0c:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002c0e:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c10:	2b02      	cmp	r3, #2
{
 8002c12:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002c14:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c16:	d822      	bhi.n	8002c5e <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c18:	2103      	movs	r1, #3
 8002c1a:	f7ff fd21 	bl	8002660 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c1e:	2328      	movs	r3, #40	; 0x28
 8002c20:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c24:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c26:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c28:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c2e:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c30:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002c34:	d020      	beq.n	8002c78 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002c36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c3c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d03e      	beq.n	8002cc0 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <I2C_ITError+0xd4>)
 8002c44:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c4c:	f7fe ff87 	bl	8001b5e <HAL_DMA_Abort_IT>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d035      	beq.n	8002cc0 <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c56:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c5c:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c5e:	2107      	movs	r1, #7
 8002c60:	f7ff fcfe 	bl	8002660 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c64:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c68:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c6a:	bf1c      	itt	ne
 8002c6c:	2320      	movne	r3, #32
 8002c6e:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	6303      	str	r3, [r0, #48]	; 0x30
 8002c76:	e7d7      	b.n	8002c28 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c78:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002c7c:	d00e      	beq.n	8002c9c <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c7e:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002c80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c86:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002c88:	b1d0      	cbz	r0, 8002cc0 <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <I2C_ITError+0xd4>)
 8002c8c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002c8e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c92:	f7fe ff64 	bl	8001b5e <HAL_DMA_Abort_IT>
 8002c96:	b198      	cbz	r0, 8002cc0 <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c9a:	e7dc      	b.n	8002c56 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c9c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002ca0:	2b60      	cmp	r3, #96	; 0x60
 8002ca2:	d108      	bne.n	8002cb6 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002caa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff ffa1 	bl	8002bf6 <HAL_I2C_AbortCpltCallback>
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8002cb6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff ff9a 	bl	8002bf4 <HAL_I2C_ErrorCallback>
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
 8002cc2:	bf00      	nop
 8002cc4:	ffff0000 	.word	0xffff0000
 8002cc8:	08002dc1 	.word	0x08002dc1
 8002ccc:	08002f31 	.word	0x08002f31

08002cd0 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cd0:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd2:	2220      	movs	r2, #32
{
 8002cd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cd6:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd8:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cda:	2208      	movs	r2, #8
 8002cdc:	61da      	str	r2, [r3, #28]
{
 8002cde:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ce0:	2107      	movs	r1, #7
{
 8002ce2:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ce4:	f7ff fcbc 	bl	8002660 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ce8:	6803      	ldr	r3, [r0, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf0:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002cf8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002cfc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002d06:	f7ff fc83 	bl	8002610 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d0a:	0471      	lsls	r1, r6, #17
 8002d0c:	d532      	bpl.n	8002d74 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8002d0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002d10:	b11b      	cbz	r3, 8002d1a <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d1a:	076b      	lsls	r3, r5, #29
 8002d1c:	d50e      	bpl.n	8002d3c <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002d2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d2e:	b12b      	cbz	r3, 8002d3c <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8002d30:	3b01      	subs	r3, #1
 8002d32:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002d34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002d3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b11b      	cbz	r3, 8002d4a <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d52:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d56:	b18b      	cbz	r3, 8002d7c <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d58:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff ff4c 	bl	8002bf8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d60:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002d64:	2b28      	cmp	r3, #40	; 0x28
 8002d66:	d128      	bne.n	8002dba <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002d68:	4629      	mov	r1, r5
 8002d6a:	4620      	mov	r0, r4
}
 8002d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002d70:	f7ff bf0e 	b.w	8002b90 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d74:	0432      	lsls	r2, r6, #16
 8002d76:	d5d0      	bpl.n	8002d1a <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8002d78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002d7a:	e7c9      	b.n	8002d10 <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d7e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002d82:	d00a      	beq.n	8002d9a <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <I2C_ITSlaveCplt+0xec>)
 8002d86:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002d8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7ff fefa 	bl	8002b8c <HAL_I2C_ListenCpltCallback>
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d9a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002d9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002da2:	2a22      	cmp	r2, #34	; 0x22
 8002da4:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002dac:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dae:	d102      	bne.n	8002db6 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002db0:	f7ff fe80 	bl	8002ab4 <HAL_I2C_SlaveRxCpltCallback>
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002db6:	f7ff fe7c 	bl	8002ab2 <HAL_I2C_SlaveTxCpltCallback>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	ffff0000 	.word	0xffff0000

08002dc0 <I2C_Slave_ISR_IT>:
{
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8002dc4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dc8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002dca:	2a01      	cmp	r2, #1
{
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8002dd0:	d07c      	beq.n	8002ecc <I2C_Slave_ISR_IT+0x10c>
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dd8:	06ca      	lsls	r2, r1, #27
 8002dda:	d539      	bpl.n	8002e50 <I2C_Slave_ISR_IT+0x90>
 8002ddc:	06f2      	lsls	r2, r6, #27
 8002dde:	d537      	bpl.n	8002e50 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8002de0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002de2:	b292      	uxth	r2, r2
 8002de4:	bb32      	cbnz	r2, 8002e34 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002de6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002dea:	2a28      	cmp	r2, #40	; 0x28
 8002dec:	d110      	bne.n	8002e10 <I2C_Slave_ISR_IT+0x50>
 8002dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002df2:	d10d      	bne.n	8002e10 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002df4:	f7ff fecc 	bl	8002b90 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002df8:	06aa      	lsls	r2, r5, #26
 8002dfa:	d505      	bpl.n	8002e08 <I2C_Slave_ISR_IT+0x48>
 8002dfc:	06b3      	lsls	r3, r6, #26
 8002dfe:	d503      	bpl.n	8002e08 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002e00:	4629      	mov	r1, r5
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff ff64 	bl	8002cd0 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e10:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002e14:	2a29      	cmp	r2, #41	; 0x29
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e1e:	d1eb      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x38>
 8002e20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e24:	d0e8      	beq.n	8002df8 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7ff fbf2 	bl	8002610 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f7ff fe42 	bl	8002ab6 <I2C_ITSlaveSequentialCplt>
 8002e32:	e7e1      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e34:	6802      	ldr	r2, [r0, #0]
 8002e36:	2110      	movs	r1, #16
 8002e38:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e3c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e40:	f042 0204 	orr.w	r2, r2, #4
 8002e44:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e46:	d1d7      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e48:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002e4a:	f7ff fed5 	bl	8002bf8 <I2C_ITError>
 8002e4e:	e7d3      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e50:	076a      	lsls	r2, r5, #29
 8002e52:	d51a      	bpl.n	8002e8a <I2C_Slave_ISR_IT+0xca>
 8002e54:	0770      	lsls	r0, r6, #29
 8002e56:	d518      	bpl.n	8002e8a <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8002e58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	b16a      	cbz	r2, 8002e7a <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5e:	6821      	ldr	r1, [r4, #0]
 8002e60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e62:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002e64:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8002e66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e68:	3201      	adds	r2, #1
 8002e6a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002e6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002e6e:	3a01      	subs	r2, #1
 8002e70:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e74:	3a01      	subs	r2, #1
 8002e76:	b292      	uxth	r2, r2
 8002e78:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002e7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d1ba      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x38>
 8002e82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e86:	d1d1      	bne.n	8002e2c <I2C_Slave_ISR_IT+0x6c>
 8002e88:	e7b6      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e8a:	0729      	lsls	r1, r5, #28
 8002e8c:	d505      	bpl.n	8002e9a <I2C_Slave_ISR_IT+0xda>
 8002e8e:	0732      	lsls	r2, r6, #28
 8002e90:	d503      	bpl.n	8002e9a <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7ff fe36 	bl	8002b04 <I2C_ITAddrCplt.isra.8>
 8002e98:	e7ae      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e9a:	07a8      	lsls	r0, r5, #30
 8002e9c:	d5ac      	bpl.n	8002df8 <I2C_Slave_ISR_IT+0x38>
 8002e9e:	07b1      	lsls	r1, r6, #30
 8002ea0:	d5aa      	bpl.n	8002df8 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 8002ea2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	b16a      	cbz	r2, 8002ec4 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002eb0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002eb2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ebc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	8523      	strh	r3, [r4, #40]	; 0x28
 8002ec2:	e799      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ec4:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	d0b0      	beq.n	8002e2c <I2C_Slave_ISR_IT+0x6c>
 8002eca:	e795      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 8002ecc:	2002      	movs	r0, #2
}
 8002ece:	bd70      	pop	{r4, r5, r6, pc}

08002ed0 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ed4:	681a      	ldr	r2, [r3, #0]
{
 8002ed6:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ed8:	05cc      	lsls	r4, r1, #23
 8002eda:	d508      	bpl.n	8002eee <HAL_I2C_ER_IRQHandler+0x1e>
 8002edc:	0614      	lsls	r4, r2, #24
 8002ede:	d506      	bpl.n	8002eee <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ee0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ee2:	f044 0401 	orr.w	r4, r4, #1
 8002ee6:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ee8:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002eec:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002eee:	054c      	lsls	r4, r1, #21
 8002ef0:	d508      	bpl.n	8002f04 <HAL_I2C_ER_IRQHandler+0x34>
 8002ef2:	0614      	lsls	r4, r2, #24
 8002ef4:	d506      	bpl.n	8002f04 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ef6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ef8:	f044 0408 	orr.w	r4, r4, #8
 8002efc:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002efe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002f02:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f04:	0589      	lsls	r1, r1, #22
 8002f06:	d508      	bpl.n	8002f1a <HAL_I2C_ER_IRQHandler+0x4a>
 8002f08:	0612      	lsls	r2, r2, #24
 8002f0a:	d506      	bpl.n	8002f1a <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002f0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f0e:	f042 0202 	orr.w	r2, r2, #2
 8002f12:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f18:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8002f1a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002f1c:	f011 0f0b 	tst.w	r1, #11
 8002f20:	d003      	beq.n	8002f2a <HAL_I2C_ER_IRQHandler+0x5a>
}
 8002f22:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8002f26:	f7ff be67 	b.w	8002bf8 <I2C_ITError>
}
 8002f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f30:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002f32:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8002f34:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002f3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002f3c:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f42:	2b60      	cmp	r3, #96	; 0x60
 8002f44:	d105      	bne.n	8002f52 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	2320      	movs	r3, #32
 8002f48:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f4c:	f7ff fe53 	bl	8002bf6 <HAL_I2C_AbortCpltCallback>
 8002f50:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8002f52:	f7ff fe4f 	bl	8002bf4 <HAL_I2C_ErrorCallback>
 8002f56:	bd08      	pop	{r3, pc}

08002f58 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f58:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	2a20      	cmp	r2, #32
{
 8002f60:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f62:	d11d      	bne.n	8002fa0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d019      	beq.n	8002fa0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	2324      	movs	r3, #36	; 0x24
 8002f6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f72:	6803      	ldr	r3, [r0, #0]
 8002f74:	681c      	ldr	r4, [r3, #0]
 8002f76:	f024 0401 	bic.w	r4, r4, #1
 8002f7a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f7c:	681c      	ldr	r4, [r3, #0]
 8002f7e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002f82:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f84:	681c      	ldr	r4, [r3, #0]
 8002f86:	4321      	orrs	r1, r4
 8002f88:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	f041 0101 	orr.w	r1, r1, #1
 8002f90:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f92:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2002      	movs	r0, #2
  }
}
 8002fa2:	bd10      	pop	{r4, pc}

08002fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002faa:	b2e4      	uxtb	r4, r4
 8002fac:	2c20      	cmp	r4, #32
 8002fae:	d11c      	bne.n	8002fea <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d018      	beq.n	8002fea <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	2324      	movs	r3, #36	; 0x24
 8002fba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fd2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002fe2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002fea:	2002      	movs	r0, #2
  }
}
 8002fec:	bd10      	pop	{r4, pc}

08002fee <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002fee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002ff2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002ff4:	6804      	ldr	r4, [r0, #0]
 8002ff6:	684f      	ldr	r7, [r1, #4]
 8002ff8:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002ffa:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002ffe:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003002:	3284      	adds	r2, #132	; 0x84
 8003004:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003006:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800300a:	6858      	ldr	r0, [r3, #4]
 800300c:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003010:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003012:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003014:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003018:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800301c:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800301e:	4430      	add	r0, r6
 8003020:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003024:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003026:	68e0      	ldr	r0, [r4, #12]
 8003028:	68cd      	ldr	r5, [r1, #12]
 800302a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800302e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003030:	6898      	ldr	r0, [r3, #8]
 8003032:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003036:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003038:	68e6      	ldr	r6, [r4, #12]
 800303a:	6888      	ldr	r0, [r1, #8]
 800303c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003040:	3001      	adds	r0, #1
 8003042:	4430      	add	r0, r6
 8003044:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003048:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800304a:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800304c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800304e:	f020 0007 	bic.w	r0, r0, #7
 8003052:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003054:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003058:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800305a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800305c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003060:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003064:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003068:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800306c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003070:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003074:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003078:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800307a:	6958      	ldr	r0, [r3, #20]
 800307c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003080:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003082:	6948      	ldr	r0, [r1, #20]
 8003084:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003086:	69d8      	ldr	r0, [r3, #28]
 8003088:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800308c:	f020 0007 	bic.w	r0, r0, #7
 8003090:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003092:	6a08      	ldr	r0, [r1, #32]
 8003094:	69cd      	ldr	r5, [r1, #28]
 8003096:	4305      	orrs	r5, r0
 8003098:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800309a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800309c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800309e:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80030a2:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030a4:	b31e      	cbz	r6, 80030ee <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80030a6:	2e01      	cmp	r6, #1
 80030a8:	d023      	beq.n	80030f2 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030aa:	1eb0      	subs	r0, r6, #2
 80030ac:	2802      	cmp	r0, #2
 80030ae:	d922      	bls.n	80030f6 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030b0:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 80030b2:	bf0c      	ite	eq
 80030b4:	2002      	moveq	r0, #2
 80030b6:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030b8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80030ba:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80030be:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80030c0:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80030c4:	eba7 070e 	sub.w	r7, r7, lr
 80030c8:	4345      	muls	r5, r0
 80030ca:	4378      	muls	r0, r7
 80030cc:	3003      	adds	r0, #3
 80030ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80030d2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80030d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030d6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80030da:	f020 0007 	bic.w	r0, r0, #7
 80030de:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030e0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80030e2:	58a3      	ldr	r3, [r4, r2]
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	50a3      	str	r3, [r4, r2]
 80030ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 80030ee:	2004      	movs	r0, #4
 80030f0:	e7e2      	b.n	80030b8 <LTDC_SetConfig+0xca>
    tmp = 3;
 80030f2:	2003      	movs	r0, #3
 80030f4:	e7e0      	b.n	80030b8 <LTDC_SetConfig+0xca>
    tmp = 2;
 80030f6:	2002      	movs	r0, #2
 80030f8:	e7de      	b.n	80030b8 <LTDC_SetConfig+0xca>
	...

080030fc <HAL_LTDC_Init>:
{
 80030fc:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80030fe:	4604      	mov	r4, r0
 8003100:	2800      	cmp	r0, #0
 8003102:	d063      	beq.n	80031cc <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003104:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003108:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800310c:	b91b      	cbnz	r3, 8003116 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800310e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003112:	f01b fdb9 	bl	801ec88 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800311c:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800311e:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003126:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003128:	6862      	ldr	r2, [r4, #4]
 800312a:	6999      	ldr	r1, [r3, #24]
 800312c:	4302      	orrs	r2, r0
 800312e:	68e0      	ldr	r0, [r4, #12]
 8003130:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003132:	6920      	ldr	r0, [r4, #16]
 8003134:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003136:	430a      	orrs	r2, r1
 8003138:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4924      	ldr	r1, [pc, #144]	; (80031d0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 800313e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003140:	400a      	ands	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800314a:	69a0      	ldr	r0, [r4, #24]
 800314c:	4302      	orrs	r2, r0
 800314e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003150:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003152:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003154:	400a      	ands	r2, r1
 8003156:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800315e:	6a20      	ldr	r0, [r4, #32]
 8003160:	4302      	orrs	r2, r0
 8003162:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003164:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003166:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003168:	400a      	ands	r2, r1
 800316a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003172:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003174:	4302      	orrs	r2, r0
 8003176:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	4011      	ands	r1, r2
 800317c:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800317e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003180:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003182:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003186:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003188:	430a      	orrs	r2, r1
 800318a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800318c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800318e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003192:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003196:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800319a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800319c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800319e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80031a2:	430a      	orrs	r2, r1
 80031a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80031a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80031ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b0:	f042 0206 	orr.w	r2, r2, #6
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80031be:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80031c0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80031c2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80031c6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031cc:	2001      	movs	r0, #1
}
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
 80031d0:	f000f800 	.word	0xf000f800

080031d4 <HAL_LTDC_ConfigLayer>:
{   
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80031d6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80031da:	2b01      	cmp	r3, #1
{   
 80031dc:	4606      	mov	r6, r0
 80031de:	468e      	mov	lr, r1
 80031e0:	4694      	mov	ip, r2
 80031e2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80031e6:	d01d      	beq.n	8003224 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031e8:	2434      	movs	r4, #52	; 0x34
 80031ea:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031ec:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031f0:	fb04 6402 	mla	r4, r4, r2, r6
 80031f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 80031f6:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031f8:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 80031fa:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800320c:	4630      	mov	r0, r6
 800320e:	4662      	mov	r2, ip
 8003210:	4671      	mov	r1, lr
 8003212:	f7ff feec 	bl	8002fee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003216:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003218:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800321a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800321c:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003220:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003226 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8003226:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800322a:	2b01      	cmp	r3, #1
{
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	f04f 0302 	mov.w	r3, #2
 8003232:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8003234:	d015      	beq.n	8003262 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003236:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 800323a:	2334      	movs	r3, #52	; 0x34
 800323c:	4353      	muls	r3, r2
 800323e:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8003240:	2501      	movs	r5, #1
 8003242:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8003246:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003248:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800324c:	4401      	add	r1, r0
 800324e:	f7ff fece 	bl	8002fee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003252:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003254:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003256:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003258:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800325c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8003260:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8003262:	4618      	mov	r0, r3
}
 8003264:	bd70      	pop	{r4, r5, r6, pc}

08003266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800326a:	4604      	mov	r4, r0
{
 800326c:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 800326e:	2800      	cmp	r0, #0
 8003270:	d074      	beq.n	800335c <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003272:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003276:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800327a:	b91b      	cbnz	r3, 8003284 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800327c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003280:	f01c f862 	bl	801f348 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003284:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003286:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8003288:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800328c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8003290:	f004 f9a9 	bl	80075e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003296:	466e      	mov	r6, sp
 8003298:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800329a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800329e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032a2:	e886 0003 	stmia.w	r6, {r0, r1}
 80032a6:	f104 0804 	add.w	r8, r4, #4
 80032aa:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	f004 f964 	bl	800757c <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032b4:	2100      	movs	r1, #0
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	f004 f99b 	bl	80075f2 <USB_SetCurrentMode>
 80032bc:	2100      	movs	r1, #0
 80032be:	4622      	mov	r2, r4
 80032c0:	4623      	mov	r3, r4
 80032c2:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c6:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c8:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80032ca:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ce:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 80032d2:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80032d4:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80032d6:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032da:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80032de:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032e0:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80032e2:	6518      	str	r0, [r3, #80]	; 0x50
 80032e4:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 80032e8:	d1ef      	bne.n	80032ca <HAL_PCD_Init+0x64>
 80032ea:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ec:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80032ee:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80032f2:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80032f4:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80032f6:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032fa:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032fe:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003302:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003306:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 800330a:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 800330e:	d1ee      	bne.n	80032ee <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003312:	466e      	mov	r6, sp
 8003314:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003318:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800331a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800331e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003322:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	f004 f9a4 	bl	8007674 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 800332c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800332e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003332:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800333c:	4620      	mov	r0, r4
 800333e:	f000 fc27 	bl	8003b90 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8003342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003344:	2b01      	cmp	r3, #1
 8003346:	d102      	bne.n	800334e <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003348:	4620      	mov	r0, r4
 800334a:	f000 fc34 	bl	8003bb6 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	f004 fc6a 	bl	8007c28 <USB_DevDisconnect>

  return HAL_OK;
 8003354:	2000      	movs	r0, #0
}
 8003356:	b00a      	add	sp, #40	; 0x28
 8003358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800335c:	2001      	movs	r0, #1
 800335e:	e7fa      	b.n	8003356 <HAL_PCD_Init+0xf0>

08003360 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8003360:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003364:	2b01      	cmp	r3, #1
{
 8003366:	b510      	push	{r4, lr}
 8003368:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800336a:	d00c      	beq.n	8003386 <HAL_PCD_Start+0x26>
 800336c:	2301      	movs	r3, #1
 800336e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8003372:	6800      	ldr	r0, [r0, #0]
 8003374:	f004 fc4c 	bl	8007c10 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	f004 f92e 	bl	80075da <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800337e:	2000      	movs	r0, #0
 8003380:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003384:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003386:	2002      	movs	r0, #2
}
 8003388:	bd10      	pop	{r4, pc}
	...

0800338c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003390:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003394:	b085      	sub	sp, #20
 8003396:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003398:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 800339a:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800339e:	f004 fc7e 	bl	8007c9e <USB_GetMode>
 80033a2:	9000      	str	r0, [sp, #0]
 80033a4:	2800      	cmp	r0, #0
 80033a6:	f040 8154 	bne.w	8003652 <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	f004 fc48 	bl	8007c40 <USB_ReadInterrupts>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	f000 814e 	beq.w	8003652 <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	f004 fc42 	bl	8007c40 <USB_ReadInterrupts>
 80033bc:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033be:	bf48      	it	mi
 80033c0:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033c2:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033c4:	bf42      	ittt	mi
 80033c6:	6953      	ldrmi	r3, [r2, #20]
 80033c8:	f003 0302 	andmi.w	r3, r3, #2
 80033cc:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033ce:	f004 fc37 	bl	8007c40 <USB_ReadInterrupts>
 80033d2:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 80033d6:	d00b      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	f004 fc35 	bl	8007c48 <USB_ReadDevAllOutEpInterrupt>
 80033de:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80033e2:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 80033e4:	46b2      	mov	sl, r6
      epnum = 0U;
 80033e6:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	f040 8134 	bne.w	8003658 <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	f004 fc25 	bl	8007c40 <USB_ReadInterrupts>
 80033f6:	0347      	lsls	r7, r0, #13
 80033f8:	d50c      	bpl.n	8003414 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	f004 fc2c 	bl	8007c58 <USB_ReadDevAllInEpInterrupt>
 8003400:	4625      	mov	r5, r4
 8003402:	9001      	str	r0, [sp, #4]
 8003404:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 8003408:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 800340c:	9b01      	ldr	r3, [sp, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 8164 	bne.w	80036dc <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	f004 fc13 	bl	8007c40 <USB_ReadInterrupts>
 800341a:	2800      	cmp	r0, #0
 800341c:	da15      	bge.n	800344a <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800341e:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800342a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800342e:	2b01      	cmp	r3, #1
 8003430:	f040 81cf 	bne.w	80037d2 <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 8003434:	2100      	movs	r1, #0
 8003436:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800343a:	4620      	mov	r0, r4
 800343c:	f01c f8ea 	bl	801f614 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	6953      	ldr	r3, [r2, #20]
 8003444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003448:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800344a:	6820      	ldr	r0, [r4, #0]
 800344c:	f004 fbf8 	bl	8007c40 <USB_ReadInterrupts>
 8003450:	0505      	lsls	r5, r0, #20
 8003452:	d50b      	bpl.n	800346c <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003454:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8003458:	07d8      	lsls	r0, r3, #31
 800345a:	d502      	bpl.n	8003462 <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800345c:	4620      	mov	r0, r4
 800345e:	f01b ffdd 	bl	801f41c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	6953      	ldr	r3, [r2, #20]
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	f004 fbe7 	bl	8007c40 <USB_ReadInterrupts>
 8003472:	0101      	lsls	r1, r0, #4
 8003474:	d514      	bpl.n	80034a0 <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800347e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003480:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003484:	2a00      	cmp	r2, #0
 8003486:	f040 81a8 	bne.w	80037da <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 800348c:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800348e:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8003492:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003496:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800349a:	4620      	mov	r0, r4
 800349c:	f01c f8ba 	bl	801f614 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034a0:	6820      	ldr	r0, [r4, #0]
 80034a2:	f004 fbcd 	bl	8007c40 <USB_ReadInterrupts>
 80034a6:	04c2      	lsls	r2, r0, #19
 80034a8:	d534      	bpl.n	8003514 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034aa:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 80034ae:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034b0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034b8:	2110      	movs	r1, #16
 80034ba:	f004 f8b1 	bl	8007620 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	6860      	ldr	r0, [r4, #4]
 80034c0:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034c4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c8:	9a00      	ldr	r2, [sp, #0]
 80034ca:	4282      	cmp	r2, r0
 80034cc:	f040 8189 	bne.w	80037e2 <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034d0:	69eb      	ldr	r3, [r5, #28]
 80034d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034d6:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 819a 	beq.w	8003814 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80034e0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80034e4:	f043 030b 	orr.w	r3, r3, #11
 80034e8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80034ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034ee:	f043 030b 	orr.w	r3, r3, #11
 80034f2:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034f4:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034f8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034fe:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003502:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003506:	f004 fbe9 	bl	8007cdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	6953      	ldr	r3, [r2, #20]
 800350e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003512:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003514:	6820      	ldr	r0, [r4, #0]
 8003516:	f004 fb93 	bl	8007c40 <USB_ReadInterrupts>
 800351a:	0483      	lsls	r3, r0, #18
 800351c:	d520      	bpl.n	8003560 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	f004 fbc1 	bl	8007ca6 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	68d3      	ldr	r3, [r2, #12]
 8003528:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800352c:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800352e:	2303      	movs	r3, #3
 8003530:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8003536:	f000 ff9d 	bl	8004474 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 800353a:	4bb3      	ldr	r3, [pc, #716]	; (8003808 <HAL_PCD_IRQHandler+0x47c>)
 800353c:	4ab3      	ldr	r2, [pc, #716]	; (800380c <HAL_PCD_IRQHandler+0x480>)
 800353e:	4403      	add	r3, r0
 8003540:	4293      	cmp	r3, r2
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	f200 816f 	bhi.w	8003826 <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 800354e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003550:	4620      	mov	r0, r4
 8003552:	f01b ff56 	bl	801f402 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	6953      	ldr	r3, [r2, #20]
 800355a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800355e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	f004 fb6d 	bl	8007c40 <USB_ReadInterrupts>
 8003566:	06c7      	lsls	r7, r0, #27
 8003568:	d52b      	bpl.n	80035c2 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	6993      	ldr	r3, [r2, #24]
 800356e:	f023 0310 	bic.w	r3, r3, #16
 8003572:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003574:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003578:	f3c5 4343 	ubfx	r3, r5, #17, #4
 800357c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800357e:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003582:	f040 81a0 	bne.w	80038c6 <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003586:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800358a:	421d      	tst	r5, r3
 800358c:	d014      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800358e:	261c      	movs	r6, #28
 8003590:	fb06 4607 	mla	r6, r6, r7, r4
 8003594:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003598:	462a      	mov	r2, r5
 800359a:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800359e:	4648      	mov	r0, r9
 80035a0:	f004 fac0 	bl	8007b24 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035a4:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 80035a8:	442b      	add	r3, r5
 80035aa:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ae:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80035b2:	441d      	add	r5, r3
 80035b4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	6993      	ldr	r3, [r2, #24]
 80035bc:	f043 0310 	orr.w	r3, r3, #16
 80035c0:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	f004 fb3c 	bl	8007c40 <USB_ReadInterrupts>
 80035c8:	0706      	lsls	r6, r0, #28
 80035ca:	d507      	bpl.n	80035dc <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035cc:	4620      	mov	r0, r4
 80035ce:	f01b ff14 	bl	801f3fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	6953      	ldr	r3, [r2, #20]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	f004 fb2f 	bl	8007c40 <USB_ReadInterrupts>
 80035e2:	02c5      	lsls	r5, r0, #11
 80035e4:	d509      	bpl.n	80035fa <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035e6:	fa5f f18b 	uxtb.w	r1, fp
 80035ea:	4620      	mov	r0, r4
 80035ec:	f01b ff4c 	bl	801f488 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	6953      	ldr	r3, [r2, #20]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	f004 fb20 	bl	8007c40 <USB_ReadInterrupts>
 8003600:	0280      	lsls	r0, r0, #10
 8003602:	d509      	bpl.n	8003618 <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003604:	fa5f f18b 	uxtb.w	r1, fp
 8003608:	4620      	mov	r0, r4
 800360a:	f01b ff39 	bl	801f480 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	6953      	ldr	r3, [r2, #20]
 8003612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003616:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	f004 fb11 	bl	8007c40 <USB_ReadInterrupts>
 800361e:	0041      	lsls	r1, r0, #1
 8003620:	d507      	bpl.n	8003632 <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003622:	4620      	mov	r0, r4
 8003624:	f01b ff34 	bl	801f490 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	6953      	ldr	r3, [r2, #20]
 800362c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003630:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	f004 fb04 	bl	8007c40 <USB_ReadInterrupts>
 8003638:	0742      	lsls	r2, r0, #29
 800363a:	d50a      	bpl.n	8003652 <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003640:	076b      	lsls	r3, r5, #29
 8003642:	d502      	bpl.n	800364a <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003644:	4620      	mov	r0, r4
 8003646:	f01b ff27 	bl	801f498 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4315      	orrs	r5, r2
 8003650:	605d      	str	r5, [r3, #4]
    }
  }
}
 8003652:	b005      	add	sp, #20
 8003654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003658:	07e9      	lsls	r1, r5, #31
 800365a:	d52e      	bpl.n	80036ba <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800365c:	fa5f f28b 	uxtb.w	r2, fp
 8003660:	4611      	mov	r1, r2
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	9201      	str	r2, [sp, #4]
 8003666:	f004 faff 	bl	8007c68 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800366a:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800366c:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800366e:	d50d      	bpl.n	800368c <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003670:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_PCD_IRQHandler+0x484>)
 8003672:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003674:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003676:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003678:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800367c:	d129      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 800367e:	68b1      	ldr	r1, [r6, #8]
 8003680:	040b      	lsls	r3, r1, #16
 8003682:	d520      	bpl.n	80036c6 <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003688:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800368c:	0739      	lsls	r1, r7, #28
 800368e:	d50f      	bpl.n	80036b0 <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003690:	4b5f      	ldr	r3, [pc, #380]	; (8003810 <HAL_PCD_IRQHandler+0x484>)
 8003692:	4598      	cmp	r8, r3
 8003694:	d106      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003696:	68b2      	ldr	r2, [r6, #8]
 8003698:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 800369a:	bf44      	itt	mi
 800369c:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 80036a0:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 80036a4:	4620      	mov	r0, r4
 80036a6:	f01b fe91 	bl	801f3cc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036aa:	2308      	movs	r3, #8
 80036ac:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036b0:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036b2:	bf44      	itt	mi
 80036b4:	2310      	movmi	r3, #16
 80036b6:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 80036ba:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80036be:	086d      	lsrs	r5, r5, #1
 80036c0:	f10a 0a20 	add.w	sl, sl, #32
 80036c4:	e691      	b.n	80033ea <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 80036c6:	68b1      	ldr	r1, [r6, #8]
 80036c8:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 80036ca:	bf44      	itt	mi
 80036cc:	2120      	movmi	r1, #32
 80036ce:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036d2:	4611      	mov	r1, r2
 80036d4:	4620      	mov	r0, r4
 80036d6:	f01b fe7f 	bl	801f3d8 <HAL_PCD_DataOutStageCallback>
 80036da:	e7d7      	b.n	800368c <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036dc:	9b01      	ldr	r3, [sp, #4]
 80036de:	07de      	lsls	r6, r3, #31
 80036e0:	d56e      	bpl.n	80037c0 <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036e2:	fa5f fa8b 	uxtb.w	sl, fp
 80036e6:	4651      	mov	r1, sl
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	f004 fac6 	bl	8007c7a <USB_ReadDevInEPInterrupt>
 80036ee:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036f0:	07f0      	lsls	r0, r6, #31
 80036f2:	d510      	bpl.n	8003716 <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f4:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80036f8:	2001      	movs	r0, #1
 80036fa:	f00b 020f 	and.w	r2, fp, #15
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003702:	ea23 0302 	bic.w	r3, r3, r2
 8003706:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800370a:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800370c:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003710:	4620      	mov	r0, r4
 8003712:	f01b fe6a 	bl	801f3ea <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003716:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003718:	bf44      	itt	mi
 800371a:	2308      	movmi	r3, #8
 800371c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003720:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003722:	bf44      	itt	mi
 8003724:	2310      	movmi	r3, #16
 8003726:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800372a:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800372c:	bf44      	itt	mi
 800372e:	2340      	movmi	r3, #64	; 0x40
 8003730:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003734:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003736:	bf44      	itt	mi
 8003738:	2302      	movmi	r3, #2
 800373a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800373e:	0636      	lsls	r6, r6, #24
 8003740:	d53e      	bpl.n	80037c0 <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003742:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003744:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8003746:	42b3      	cmp	r3, r6
 8003748:	d83a      	bhi.n	80037c0 <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800374a:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800374c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 8003752:	429e      	cmp	r6, r3
 8003754:	bf28      	it	cs
 8003756:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003758:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800375c:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800375e:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8003762:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	b29b      	uxth	r3, r3
 800376e:	42b3      	cmp	r3, r6
 8003770:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003772:	d923      	bls.n	80037bc <HAL_PCD_IRQHandler+0x430>
 8003774:	429f      	cmp	r7, r3
 8003776:	d921      	bls.n	80037bc <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003778:	b967      	cbnz	r7, 8003794 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800377a:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 800377c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800377e:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8003782:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003786:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800378a:	ea23 0302 	bic.w	r3, r3, r2
 800378e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 8003792:	e015      	b.n	80037c0 <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 8003794:	1aff      	subs	r7, r7, r3
 8003796:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003798:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800379a:	9802      	ldr	r0, [sp, #8]
 800379c:	429f      	cmp	r7, r3
 800379e:	bf28      	it	cs
 80037a0:	461f      	movcs	r7, r3
 80037a2:	b2bb      	uxth	r3, r7
 80037a4:	4652      	mov	r2, sl
 80037a6:	f004 f8e7 	bl	8007978 <USB_WritePacket>
    ep->xfer_buff  += len;
 80037aa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80037ac:	443b      	add	r3, r7
 80037ae:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80037b0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80037b2:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 80037b4:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 80037b6:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 80037b8:	656f      	str	r7, [r5, #84]	; 0x54
 80037ba:	e7d4      	b.n	8003766 <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 80037bc:	429f      	cmp	r7, r3
 80037be:	d9dc      	bls.n	800377a <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 80037c0:	9b01      	ldr	r3, [sp, #4]
 80037c2:	085b      	lsrs	r3, r3, #1
        epnum++;
 80037c4:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	351c      	adds	r5, #28
 80037cc:	f108 0820 	add.w	r8, r8, #32
 80037d0:	e61c      	b.n	800340c <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 80037d2:	4620      	mov	r0, r4
 80037d4:	f01b fe3a 	bl	801f44c <HAL_PCD_ResumeCallback>
 80037d8:	e632      	b.n	8003440 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 80037da:	4620      	mov	r0, r4
 80037dc:	f01b fe1e 	bl	801f41c <HAL_PCD_SuspendCallback>
 80037e0:	e65e      	b.n	80034a0 <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037e2:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80037ea:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037ec:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80037f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80037f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fc:	9a00      	ldr	r2, [sp, #0]
 80037fe:	3201      	adds	r2, #1
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	3320      	adds	r3, #32
 8003804:	e660      	b.n	80034c8 <HAL_PCD_IRQHandler+0x13c>
 8003806:	bf00      	nop
 8003808:	ff275340 	.word	0xff275340
 800380c:	000c34ff 	.word	0x000c34ff
 8003810:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003814:	696b      	ldr	r3, [r5, #20]
 8003816:	f043 030b 	orr.w	r3, r3, #11
 800381a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800381c:	692b      	ldr	r3, [r5, #16]
 800381e:	f043 030b 	orr.w	r3, r3, #11
 8003822:	612b      	str	r3, [r5, #16]
 8003824:	e666      	b.n	80034f4 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003826:	4a2f      	ldr	r2, [pc, #188]	; (80038e4 <HAL_PCD_IRQHandler+0x558>)
 8003828:	492f      	ldr	r1, [pc, #188]	; (80038e8 <HAL_PCD_IRQHandler+0x55c>)
 800382a:	4402      	add	r2, r0
 800382c:	428a      	cmp	r2, r1
 800382e:	d803      	bhi.n	8003838 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003836:	e68a      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003838:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800383c:	492b      	ldr	r1, [pc, #172]	; (80038ec <HAL_PCD_IRQHandler+0x560>)
 800383e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003842:	428a      	cmp	r2, r1
 8003844:	d803      	bhi.n	800384e <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800384c:	e67f      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800384e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003852:	4927      	ldr	r1, [pc, #156]	; (80038f0 <HAL_PCD_IRQHandler+0x564>)
 8003854:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003858:	428a      	cmp	r2, r1
 800385a:	d803      	bhi.n	8003864 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003862:	e674      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_PCD_IRQHandler+0x568>)
 8003866:	4924      	ldr	r1, [pc, #144]	; (80038f8 <HAL_PCD_IRQHandler+0x56c>)
 8003868:	4402      	add	r2, r0
 800386a:	428a      	cmp	r2, r1
 800386c:	d803      	bhi.n	8003876 <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003874:	e66b      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <HAL_PCD_IRQHandler+0x570>)
 8003878:	4921      	ldr	r1, [pc, #132]	; (8003900 <HAL_PCD_IRQHandler+0x574>)
 800387a:	4402      	add	r2, r0
 800387c:	428a      	cmp	r2, r1
 800387e:	d803      	bhi.n	8003888 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003886:	e662      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_PCD_IRQHandler+0x578>)
 800388a:	491f      	ldr	r1, [pc, #124]	; (8003908 <HAL_PCD_IRQHandler+0x57c>)
 800388c:	4402      	add	r2, r0
 800388e:	428a      	cmp	r2, r1
 8003890:	d803      	bhi.n	800389a <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003898:	e659      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800389a:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 800389e:	491b      	ldr	r1, [pc, #108]	; (800390c <HAL_PCD_IRQHandler+0x580>)
 80038a0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80038a4:	428a      	cmp	r2, r1
 80038a6:	d803      	bhi.n	80038b0 <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ae:	e64e      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_PCD_IRQHandler+0x584>)
 80038b2:	4918      	ldr	r1, [pc, #96]	; (8003914 <HAL_PCD_IRQHandler+0x588>)
 80038b4:	4402      	add	r2, r0
 80038b6:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	bf94      	ite	ls
 80038bc:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80038c0:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80038c4:	e643      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	f47f ae76 	bne.w	80035b8 <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038cc:	2208      	movs	r2, #8
 80038ce:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80038d2:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d4:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038d6:	f004 f925 	bl	8007b24 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038da:	fb06 4607 	mla	r6, r6, r7, r4
 80038de:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80038e2:	e664      	b.n	80035ae <HAL_PCD_IRQHandler+0x222>
 80038e4:	ff1b1e40 	.word	0xff1b1e40
 80038e8:	000f423f 	.word	0x000f423f
 80038ec:	00124f7f 	.word	0x00124f7f
 80038f0:	0013d61f 	.word	0x0013d61f
 80038f4:	fee5b660 	.word	0xfee5b660
 80038f8:	0016e35f 	.word	0x0016e35f
 80038fc:	feced300 	.word	0xfeced300
 8003900:	001b773f 	.word	0x001b773f
 8003904:	feb35bc0 	.word	0xfeb35bc0
 8003908:	002191bf 	.word	0x002191bf
 800390c:	0038751f 	.word	0x0038751f
 8003910:	fe5954e0 	.word	0xfe5954e0
 8003914:	00419cdf 	.word	0x00419cdf

08003918 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003918:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800391c:	2a01      	cmp	r2, #1
{
 800391e:	b510      	push	{r4, lr}
 8003920:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003922:	d00b      	beq.n	800393c <HAL_PCD_SetAddress+0x24>
 8003924:	2201      	movs	r2, #1
 8003926:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800392a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800392e:	6800      	ldr	r0, [r0, #0]
 8003930:	f004 f95e 	bl	8007bf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003934:	2000      	movs	r0, #0
 8003936:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800393a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800393c:	2002      	movs	r0, #2
}
 800393e:	bd10      	pop	{r4, pc}

08003940 <HAL_PCD_EP_Open>:
{
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4604      	mov	r4, r0
 8003944:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003948:	f011 0f80 	tst.w	r1, #128	; 0x80
 800394c:	f04f 061c 	mov.w	r6, #28
 8003950:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003952:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003956:	bf15      	itete	ne
 8003958:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 800395c:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003960:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003962:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003966:	bf15      	itete	ne
 8003968:	2601      	movne	r6, #1
    ep->is_in = 0U;
 800396a:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 800396c:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003970:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003974:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003976:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003978:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 800397a:	b2c0      	uxtb	r0, r0
 800397c:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 800397e:	b102      	cbz	r2, 8003982 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003980:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003982:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003984:	bf04      	itt	eq
 8003986:	2300      	moveq	r3, #0
 8003988:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800398a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800398e:	2b01      	cmp	r3, #1
 8003990:	d009      	beq.n	80039a6 <HAL_PCD_EP_Open+0x66>
 8003992:	2301      	movs	r3, #1
 8003994:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	f003 ff07 	bl	80077ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399e:	2000      	movs	r0, #0
 80039a0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80039a6:	2002      	movs	r0, #2
}
 80039a8:	bd70      	pop	{r4, r5, r6, pc}

080039aa <HAL_PCD_EP_Close>:
{
 80039aa:	f001 030f 	and.w	r3, r1, #15
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80039b6:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80039ba:	fb00 4102 	mla	r1, r0, r2, r4
 80039be:	bf19      	ittee	ne
 80039c0:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80039c2:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 80039c6:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80039ca:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80039ce:	bf15      	itete	ne
 80039d0:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80039d2:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80039d4:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 80039d8:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 80039dc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80039de:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d009      	beq.n	80039fa <HAL_PCD_EP_Close+0x50>
 80039e6:	2301      	movs	r3, #1
 80039e8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	f003 ff1f 	bl	8007830 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f2:	2000      	movs	r0, #0
 80039f4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80039f8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80039fa:	2002      	movs	r0, #2
}
 80039fc:	bd10      	pop	{r4, pc}

080039fe <HAL_PCD_EP_Receive>:
{
 80039fe:	b538      	push	{r3, r4, r5, lr}
 8003a00:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003a04:	241c      	movs	r4, #28
 8003a06:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003a0a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003a0e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003a12:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003a16:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003a18:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003a1c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003a20:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003a24:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a28:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003a2a:	b91d      	cbnz	r5, 8003a34 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a2c:	f003 ff32 	bl	8007894 <USB_EP0StartXfer>
}
 8003a30:	2000      	movs	r0, #0
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a34:	f003 ffb0 	bl	8007998 <USB_EPStartXfer>
 8003a38:	e7fa      	b.n	8003a30 <HAL_PCD_EP_Receive+0x32>

08003a3a <HAL_PCD_EP_Transmit>:
{
 8003a3a:	b538      	push	{r3, r4, r5, lr}
 8003a3c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a40:	241c      	movs	r4, #28
 8003a42:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003a46:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a4a:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003a4c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003a52:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003a54:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 8003a5a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a5e:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003a60:	b91d      	cbnz	r5, 8003a6a <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a62:	f003 ff17 	bl	8007894 <USB_EP0StartXfer>
}
 8003a66:	2000      	movs	r0, #0
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a6a:	f003 ff95 	bl	8007998 <USB_EPStartXfer>
 8003a6e:	e7fa      	b.n	8003a66 <HAL_PCD_EP_Transmit+0x2c>

08003a70 <HAL_PCD_EP_SetStall>:
{
 8003a70:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003a72:	6843      	ldr	r3, [r0, #4]
 8003a74:	f001 050f 	and.w	r5, r1, #15
 8003a78:	429d      	cmp	r5, r3
{
 8003a7a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003a7c:	d82d      	bhi.n	8003ada <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003a7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a82:	f04f 021c 	mov.w	r2, #28
 8003a86:	d01e      	beq.n	8003ac6 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003a88:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a8c:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003a90:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a92:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8003a94:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003a9c:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003a9e:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	d01b      	beq.n	8003ade <HAL_PCD_EP_SetStall+0x6e>
 8003aa6:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	f004 f847 	bl	8007b40 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003ab2:	b925      	cbnz	r5, 8003abe <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ab4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	f004 f90f 	bl	8007cdc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003ac6:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003aca:	fb02 0101 	mla	r1, r2, r1, r0
 8003ace:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003ad0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003ad4:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003ad8:	e7de      	b.n	8003a98 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003ada:	2001      	movs	r0, #1
 8003adc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003ade:	2002      	movs	r0, #2
}
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}

08003ae2 <HAL_PCD_EP_ClrStall>:
{
 8003ae2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ae4:	6843      	ldr	r3, [r0, #4]
 8003ae6:	f001 020f 	and.w	r2, r1, #15
 8003aea:	429a      	cmp	r2, r3
{
 8003aec:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aee:	d826      	bhi.n	8003b3e <HAL_PCD_EP_ClrStall+0x5c>
 8003af0:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003af2:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003af6:	fb03 0102 	mla	r1, r3, r2, r0
 8003afa:	bf19      	ittee	ne
 8003afc:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003afe:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b02:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003b06:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003b0a:	bf14      	ite	ne
 8003b0c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003b0e:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003b10:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003b14:	bf14      	ite	ne
 8003b16:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003b1a:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003b1e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003b20:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b22:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d00b      	beq.n	8003b42 <HAL_PCD_EP_ClrStall+0x60>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	f004 f832 	bl	8007b9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b36:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b3e:	2001      	movs	r0, #1
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003b42:	2002      	movs	r0, #2
}
 8003b44:	bd38      	pop	{r3, r4, r5, pc}

08003b46 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b46:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b48:	6804      	ldr	r4, [r0, #0]
 8003b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003b4c:	b921      	cbnz	r1, 8003b58 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b52:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003b54:	2000      	movs	r0, #0
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003b5a:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003b60:	2000      	movs	r0, #0
 8003b62:	1c46      	adds	r6, r0, #1
 8003b64:	b2c0      	uxtb	r0, r0
 8003b66:	4285      	cmp	r5, r0
 8003b68:	d806      	bhi.n	8003b78 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b6a:	313f      	adds	r1, #63	; 0x3f
 8003b6c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	e7ed      	b.n	8003b54 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b78:	3040      	adds	r0, #64	; 0x40
 8003b7a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003b7e:	6840      	ldr	r0, [r0, #4]
 8003b80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b84:	4630      	mov	r0, r6
 8003b86:	e7ec      	b.n	8003b62 <HAL_PCDEx_SetTxFiFo+0x1c>

08003b88 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003b88:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003b8a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003b8c:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b90:	6802      	ldr	r2, [r0, #0]
{
 8003b92:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003b94:	2101      	movs	r1, #1
 8003b96:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ba0:	6993      	ldr	r3, [r2, #24]
 8003ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ba6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ba8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	f043 0303 	orr.w	r3, r3, #3
 8003bb2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb6:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003bbe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc4:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_PWREx_GetVoltageRange+0x20>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003bd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003bd8:	d007      	beq.n	8003bea <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bde:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003be2:	bf14      	ite	ne
 8003be4:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003be8:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003bea:	4770      	bx	lr
 8003bec:	40007000 	.word	0x40007000

08003bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bf0:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bf4:	bb28      	cbnz	r0, 8003c42 <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf6:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003bfa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bfe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0a:	d119      	bne.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c16:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003c1a:	6811      	ldr	r1, [r2, #0]
 8003c1c:	2232      	movs	r2, #50	; 0x32
 8003c1e:	434a      	muls	r2, r1
 8003c20:	491f      	ldr	r1, [pc, #124]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003c22:	fbb2 f2f1 	udiv	r2, r2, r1
 8003c26:	4619      	mov	r1, r3
 8003c28:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2a:	6958      	ldr	r0, [r3, #20]
 8003c2c:	0540      	lsls	r0, r0, #21
 8003c2e:	d500      	bpl.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003c30:	b922      	cbnz	r2, 8003c3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c32:	694b      	ldr	r3, [r1, #20]
 8003c34:	055b      	lsls	r3, r3, #21
 8003c36:	d52d      	bpl.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003c38:	2003      	movs	r0, #3
 8003c3a:	4770      	bx	lr
        wait_loop_index--;
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	e7f4      	b.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003c40:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c42:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c46:	d120      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c48:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003c4c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c50:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5c:	d11a      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c68:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	2232      	movs	r2, #50	; 0x32
 8003c70:	434a      	muls	r2, r1
 8003c72:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003c74:	fbb2 f2f1 	udiv	r2, r2, r1
 8003c78:	4619      	mov	r1, r3
 8003c7a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7c:	6958      	ldr	r0, [r3, #20]
 8003c7e:	0540      	lsls	r0, r0, #21
 8003c80:	d5d7      	bpl.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d0d5      	beq.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8003c86:	3a01      	subs	r2, #1
 8003c88:	e7f8      	b.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c8a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c92:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c94:	2000      	movs	r0, #0
}
 8003c96:	4770      	bx	lr
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	20000ec4 	.word	0x20000ec4
 8003ca0:	000f4240 	.word	0x000f4240

08003ca4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ca4:	4a02      	ldr	r2, [pc, #8]	; (8003cb0 <HAL_PWREx_EnableVddUSB+0xc>)
 8003ca6:	6853      	ldr	r3, [r2, #4]
 8003ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cac:	6053      	str	r3, [r2, #4]
 8003cae:	4770      	bx	lr
 8003cb0:	40007000 	.word	0x40007000

08003cb4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003cb4:	4a02      	ldr	r2, [pc, #8]	; (8003cc0 <HAL_PWREx_EnableVddIO2+0xc>)
 8003cb6:	6853      	ldr	r3, [r2, #4]
 8003cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	4770      	bx	lr
 8003cc0:	40007000 	.word	0x40007000

08003cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc6:	4d1c      	ldr	r5, [pc, #112]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8003cc8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003cca:	00da      	lsls	r2, r3, #3
{
 8003ccc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cce:	d518      	bpl.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cd0:	f7ff ff7c 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003cd8:	d123      	bne.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cda:	2c80      	cmp	r4, #128	; 0x80
 8003cdc:	d928      	bls.n	8003d30 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cde:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ce0:	bf8c      	ite	hi
 8003ce2:	2002      	movhi	r0, #2
 8003ce4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003ce8:	6813      	ldr	r3, [r2, #0]
 8003cea:	f023 030f 	bic.w	r3, r3, #15
 8003cee:	4303      	orrs	r3, r0
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003cf8:	1a18      	subs	r0, r3, r0
 8003cfa:	bf18      	it	ne
 8003cfc:	2001      	movne	r0, #1
 8003cfe:	b003      	add	sp, #12
 8003d00:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d08:	65ab      	str	r3, [r5, #88]	; 0x58
 8003d0a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003d14:	f7ff ff5a 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003d20:	e7d8      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003d22:	2c7f      	cmp	r4, #127	; 0x7f
 8003d24:	d806      	bhi.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003d26:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003d2a:	4258      	negs	r0, r3
 8003d2c:	4158      	adcs	r0, r3
 8003d2e:	e7da      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d30:	2000      	movs	r0, #0
 8003d32:	e7d8      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d34:	2002      	movs	r0, #2
 8003d36:	e7d6      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40022000 	.word	0x40022000

08003d40 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x90>)
 8003d42:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d44:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d46:	f012 020c 	ands.w	r2, r2, #12
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x18>
 8003d4c:	2a0c      	cmp	r2, #12
 8003d4e:	d115      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d50:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d54:	2901      	cmp	r1, #1
 8003d56:	d118      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d58:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003d5a:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d5c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d5e:	bf55      	itete	pl
 8003d60:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d64:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d66:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d6a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003d6e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d72:	b112      	cbz	r2, 8003d7a <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d74:	2a0c      	cmp	r2, #12
 8003d76:	d009      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x4c>
 8003d78:	2000      	movs	r0, #0
}
 8003d7a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d7c:	2a04      	cmp	r2, #4
 8003d7e:	d024      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d80:	2a08      	cmp	r2, #8
 8003d82:	4815      	ldr	r0, [pc, #84]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d84:	bf18      	it	ne
 8003d86:	2000      	movne	r0, #0
 8003d88:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d8a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d8c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d8e:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d90:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d94:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8003d98:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x6c>
 8003da0:	2903      	cmp	r1, #3
 8003da2:	d003      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da4:	68d9      	ldr	r1, [r3, #12]
 8003da6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003daa:	e003      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dac:	68d9      	ldr	r1, [r3, #12]
 8003dae:	480a      	ldr	r0, [pc, #40]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003db0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003dbe:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003dc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dc8:	4770      	bx	lr
 8003dca:	4803      	ldr	r0, [pc, #12]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08031338 	.word	0x08031338
 8003dd8:	00f42400 	.word	0x00f42400

08003ddc <HAL_RCC_OscConfig>:
{
 8003ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003de0:	4605      	mov	r5, r0
 8003de2:	b908      	cbnz	r0, 8003de8 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
 8003de6:	e046      	b.n	8003e76 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de8:	4ca8      	ldr	r4, [pc, #672]	; (800408c <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dea:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dec:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dee:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df0:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dfa:	d572      	bpl.n	8003ee2 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dfc:	b11e      	cbz	r6, 8003e06 <HAL_RCC_OscConfig+0x2a>
 8003dfe:	2e0c      	cmp	r6, #12
 8003e00:	d151      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e02:	2f01      	cmp	r7, #1
 8003e04:	d14f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0799      	lsls	r1, r3, #30
 8003e0a:	d502      	bpl.n	8003e12 <HAL_RCC_OscConfig+0x36>
 8003e0c:	69ab      	ldr	r3, [r5, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0e8      	beq.n	8003de4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	6a28      	ldr	r0, [r5, #32]
 8003e16:	071a      	lsls	r2, r3, #28
 8003e18:	bf56      	itet	pl
 8003e1a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003e1e:	6823      	ldrmi	r3, [r4, #0]
 8003e20:	091b      	lsrpl	r3, r3, #4
 8003e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e26:	4283      	cmp	r3, r0
 8003e28:	d228      	bcs.n	8003e7c <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2a:	f7ff ff4b 	bl	8003cc4 <RCC_SetFlashLatencyFromMSIRange>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d1d8      	bne.n	8003de4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	f043 0308 	orr.w	r3, r3, #8
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	6a2a      	ldr	r2, [r5, #32]
 8003e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e42:	4313      	orrs	r3, r2
 8003e44:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	69ea      	ldr	r2, [r5, #28]
 8003e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e52:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e54:	f7ff ff74 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	4a8d      	ldr	r2, [pc, #564]	; (8004090 <HAL_RCC_OscConfig+0x2b4>)
 8003e5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e60:	5cd3      	ldrb	r3, [r2, r3]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	40d8      	lsrs	r0, r3
 8003e68:	4b8a      	ldr	r3, [pc, #552]	; (8004094 <HAL_RCC_OscConfig+0x2b8>)
 8003e6a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7fd f8a7 	bl	8000fc0 <HAL_InitTick>
        if(status != HAL_OK)
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d035      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x106>
}
 8003e76:	b003      	add	sp, #12
 8003e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	f043 0308 	orr.w	r3, r3, #8
 8003e82:	6023      	str	r3, [r4, #0]
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8a:	4303      	orrs	r3, r0
 8003e8c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	69ea      	ldr	r2, [r5, #28]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e9a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e9c:	f7ff ff12 	bl	8003cc4 <RCC_SetFlashLatencyFromMSIRange>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d0d7      	beq.n	8003e54 <HAL_RCC_OscConfig+0x78>
 8003ea4:	e79e      	b.n	8003de4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ea6:	69ab      	ldr	r3, [r5, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d03a      	beq.n	8003f22 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f8b4 	bl	8001020 <HAL_GetTick>
 8003eb8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	079b      	lsls	r3, r3, #30
 8003ebe:	d528      	bpl.n	8003f12 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	f043 0308 	orr.w	r3, r3, #8
 8003ec6:	6023      	str	r3, [r4, #0]
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	6a2a      	ldr	r2, [r5, #32]
 8003ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	69ea      	ldr	r2, [r5, #28]
 8003ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ee0:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	07d9      	lsls	r1, r3, #31
 8003ee6:	d42d      	bmi.n	8003f44 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	079a      	lsls	r2, r3, #30
 8003eec:	d46b      	bmi.n	8003fc6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	0719      	lsls	r1, r3, #28
 8003ef2:	f100 80a0 	bmi.w	8004036 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	075a      	lsls	r2, r3, #29
 8003efa:	f100 80cd 	bmi.w	8004098 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	069a      	lsls	r2, r3, #26
 8003f02:	f100 8136 	bmi.w	8004172 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 815c 	bne.w	80041c6 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e7b1      	b.n	8003e76 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f12:	f7fd f885 	bl	8001020 <HAL_GetTick>
 8003f16:	eba0 0008 	sub.w	r0, r0, r8
 8003f1a:	2802      	cmp	r0, #2
 8003f1c:	d9cd      	bls.n	8003eba <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8003f1e:	2003      	movs	r0, #3
 8003f20:	e7a9      	b.n	8003e76 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f2a:	f7fd f879 	bl	8001020 <HAL_GetTick>
 8003f2e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	0798      	lsls	r0, r3, #30
 8003f34:	d5d5      	bpl.n	8003ee2 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f36:	f7fd f873 	bl	8001020 <HAL_GetTick>
 8003f3a:	eba0 0008 	sub.w	r0, r0, r8
 8003f3e:	2802      	cmp	r0, #2
 8003f40:	d9f6      	bls.n	8003f30 <HAL_RCC_OscConfig+0x154>
 8003f42:	e7ec      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f44:	2e08      	cmp	r6, #8
 8003f46:	d003      	beq.n	8003f50 <HAL_RCC_OscConfig+0x174>
 8003f48:	2e0c      	cmp	r6, #12
 8003f4a:	d108      	bne.n	8003f5e <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8003f4c:	2f03      	cmp	r7, #3
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	039b      	lsls	r3, r3, #14
 8003f54:	d5c8      	bpl.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
 8003f56:	686b      	ldr	r3, [r5, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1c5      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
 8003f5c:	e742      	b.n	8003de4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5e:	686b      	ldr	r3, [r5, #4]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d110      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1ac>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f6e:	f7fd f857 	bl	8001020 <HAL_GetTick>
 8003f72:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	0398      	lsls	r0, r3, #14
 8003f78:	d4b6      	bmi.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7a:	f7fd f851 	bl	8001020 <HAL_GetTick>
 8003f7e:	eba0 0008 	sub.w	r0, r0, r8
 8003f82:	2864      	cmp	r0, #100	; 0x64
 8003f84:	d9f6      	bls.n	8003f74 <HAL_RCC_OscConfig+0x198>
 8003f86:	e7ca      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8c:	d104      	bne.n	8003f98 <HAL_RCC_OscConfig+0x1bc>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	e7e6      	b.n	8003f66 <HAL_RCC_OscConfig+0x18a>
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fa6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8003fac:	f7fd f838 	bl	8001020 <HAL_GetTick>
 8003fb0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	0399      	lsls	r1, r3, #14
 8003fb6:	d597      	bpl.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd f832 	bl	8001020 <HAL_GetTick>
 8003fbc:	eba0 0008 	sub.w	r0, r0, r8
 8003fc0:	2864      	cmp	r0, #100	; 0x64
 8003fc2:	d9f6      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d6>
 8003fc4:	e7ab      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fc6:	2e04      	cmp	r6, #4
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1f6>
 8003fca:	2e0c      	cmp	r6, #12
 8003fcc:	d110      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003fce:	2f02      	cmp	r7, #2
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	055a      	lsls	r2, r3, #21
 8003fd6:	d503      	bpl.n	8003fe0 <HAL_RCC_OscConfig+0x204>
 8003fd8:	68eb      	ldr	r3, [r5, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f43f af02 	beq.w	8003de4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe0:	6863      	ldr	r3, [r4, #4]
 8003fe2:	692a      	ldr	r2, [r5, #16]
 8003fe4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003fe8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003fec:	6063      	str	r3, [r4, #4]
 8003fee:	e77e      	b.n	8003eee <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff0:	68eb      	ldr	r3, [r5, #12]
 8003ff2:	b17b      	cbz	r3, 8004014 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ffc:	f7fd f810 	bl	8001020 <HAL_GetTick>
 8004000:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	055b      	lsls	r3, r3, #21
 8004006:	d4eb      	bmi.n	8003fe0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004008:	f7fd f80a 	bl	8001020 <HAL_GetTick>
 800400c:	1bc0      	subs	r0, r0, r7
 800400e:	2802      	cmp	r0, #2
 8004010:	d9f7      	bls.n	8004002 <HAL_RCC_OscConfig+0x226>
 8004012:	e784      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800401c:	f7fd f800 	bl	8001020 <HAL_GetTick>
 8004020:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	0558      	lsls	r0, r3, #21
 8004026:	f57f af62 	bpl.w	8003eee <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402a:	f7fc fff9 	bl	8001020 <HAL_GetTick>
 800402e:	1bc0      	subs	r0, r0, r7
 8004030:	2802      	cmp	r0, #2
 8004032:	d9f6      	bls.n	8004022 <HAL_RCC_OscConfig+0x246>
 8004034:	e773      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004036:	696b      	ldr	r3, [r5, #20]
 8004038:	b19b      	cbz	r3, 8004062 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800403a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004046:	f7fc ffeb 	bl	8001020 <HAL_GetTick>
 800404a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800404c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004050:	079b      	lsls	r3, r3, #30
 8004052:	f53f af50 	bmi.w	8003ef6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004056:	f7fc ffe3 	bl	8001020 <HAL_GetTick>
 800405a:	1bc0      	subs	r0, r0, r7
 800405c:	2802      	cmp	r0, #2
 800405e:	d9f5      	bls.n	800404c <HAL_RCC_OscConfig+0x270>
 8004060:	e75d      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8004062:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800406e:	f7fc ffd7 	bl	8001020 <HAL_GetTick>
 8004072:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004074:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004078:	0798      	lsls	r0, r3, #30
 800407a:	f57f af3c 	bpl.w	8003ef6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fc ffcf 	bl	8001020 <HAL_GetTick>
 8004082:	1bc0      	subs	r0, r0, r7
 8004084:	2802      	cmp	r0, #2
 8004086:	d9f5      	bls.n	8004074 <HAL_RCC_OscConfig+0x298>
 8004088:	e749      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	08031320 	.word	0x08031320
 8004094:	20000ec4 	.word	0x20000ec4
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	d429      	bmi.n	80040f2 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 800409e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80040a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80040b0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b4:	4f71      	ldr	r7, [pc, #452]	; (800427c <HAL_RCC_OscConfig+0x4a0>)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	05da      	lsls	r2, r3, #23
 80040ba:	d51d      	bpl.n	80040f8 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	68ab      	ldr	r3, [r5, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d12b      	bne.n	800411a <HAL_RCC_OscConfig+0x33e>
 80040c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80040ce:	f7fc ffa7 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80040d6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040dc:	0798      	lsls	r0, r3, #30
 80040de:	d542      	bpl.n	8004166 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80040e0:	f1b8 0f00 	cmp.w	r8, #0
 80040e4:	f43f af0b 	beq.w	8003efe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80040f0:	e705      	b.n	8003efe <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	e7dd      	b.n	80040b4 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fe:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004100:	f7fc ff8e 	bl	8001020 <HAL_GetTick>
 8004104:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	05db      	lsls	r3, r3, #23
 800410a:	d4d7      	bmi.n	80040bc <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fc ff88 	bl	8001020 <HAL_GetTick>
 8004110:	eba0 0009 	sub.w	r0, r0, r9
 8004114:	2802      	cmp	r0, #2
 8004116:	d9f6      	bls.n	8004106 <HAL_RCC_OscConfig+0x32a>
 8004118:	e701      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800411a:	2b05      	cmp	r3, #5
 800411c:	d106      	bne.n	800412c <HAL_RCC_OscConfig+0x350>
 800411e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004122:	f043 0304 	orr.w	r3, r3, #4
 8004126:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800412a:	e7ca      	b.n	80040c2 <HAL_RCC_OscConfig+0x2e6>
 800412c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004138:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800413c:	f022 0204 	bic.w	r2, r2, #4
 8004140:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1c2      	bne.n	80040ce <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8004148:	f7fc ff6a 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004150:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004152:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004156:	0799      	lsls	r1, r3, #30
 8004158:	d5c2      	bpl.n	80040e0 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fc ff61 	bl	8001020 <HAL_GetTick>
 800415e:	1bc0      	subs	r0, r0, r7
 8004160:	4548      	cmp	r0, r9
 8004162:	d9f6      	bls.n	8004152 <HAL_RCC_OscConfig+0x376>
 8004164:	e6db      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004166:	f7fc ff5b 	bl	8001020 <HAL_GetTick>
 800416a:	1bc0      	subs	r0, r0, r7
 800416c:	4548      	cmp	r0, r9
 800416e:	d9b3      	bls.n	80040d8 <HAL_RCC_OscConfig+0x2fc>
 8004170:	e6d5      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004174:	b19b      	cbz	r3, 800419e <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8004176:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004182:	f7fc ff4d 	bl	8001020 <HAL_GetTick>
 8004186:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004188:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800418c:	079b      	lsls	r3, r3, #30
 800418e:	f53f aeba 	bmi.w	8003f06 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004192:	f7fc ff45 	bl	8001020 <HAL_GetTick>
 8004196:	1bc0      	subs	r0, r0, r7
 8004198:	2802      	cmp	r0, #2
 800419a:	d9f5      	bls.n	8004188 <HAL_RCC_OscConfig+0x3ac>
 800419c:	e6bf      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 800419e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80041aa:	f7fc ff39 	bl	8001020 <HAL_GetTick>
 80041ae:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80041b4:	0798      	lsls	r0, r3, #30
 80041b6:	f57f aea6 	bpl.w	8003f06 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ba:	f7fc ff31 	bl	8001020 <HAL_GetTick>
 80041be:	1bc0      	subs	r0, r0, r7
 80041c0:	2802      	cmp	r0, #2
 80041c2:	d9f5      	bls.n	80041b0 <HAL_RCC_OscConfig+0x3d4>
 80041c4:	e6ab      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041c6:	2e0c      	cmp	r6, #12
 80041c8:	f43f ae0c 	beq.w	8003de4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041cc:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041d6:	d136      	bne.n	8004246 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80041d8:	f7fc ff22 	bl	8001020 <HAL_GetTick>
 80041dc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	0199      	lsls	r1, r3, #6
 80041e2:	d42a      	bmi.n	800423a <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80041e6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80041e8:	06db      	lsls	r3, r3, #27
 80041ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80041ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80041f0:	4313      	orrs	r3, r2
 80041f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80041f4:	3a01      	subs	r2, #1
 80041f6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80041fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80041fc:	0852      	lsrs	r2, r2, #1
 80041fe:	3a01      	subs	r2, #1
 8004200:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004204:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004206:	0852      	lsrs	r2, r2, #1
 8004208:	3a01      	subs	r2, #1
 800420a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800420e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004218:	68e3      	ldr	r3, [r4, #12]
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004220:	f7fc fefe 	bl	8001020 <HAL_GetTick>
 8004224:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	019a      	lsls	r2, r3, #6
 800422a:	f53f ae70 	bmi.w	8003f0e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422e:	f7fc fef7 	bl	8001020 <HAL_GetTick>
 8004232:	1b40      	subs	r0, r0, r5
 8004234:	2802      	cmp	r0, #2
 8004236:	d9f6      	bls.n	8004226 <HAL_RCC_OscConfig+0x44a>
 8004238:	e671      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423a:	f7fc fef1 	bl	8001020 <HAL_GetTick>
 800423e:	1b80      	subs	r0, r0, r6
 8004240:	2802      	cmp	r0, #2
 8004242:	d9cc      	bls.n	80041de <HAL_RCC_OscConfig+0x402>
 8004244:	e66b      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800424c:	bf02      	ittt	eq
 800424e:	68e3      	ldreq	r3, [r4, #12]
 8004250:	f023 0303 	biceq.w	r3, r3, #3
 8004254:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004256:	68e3      	ldr	r3, [r4, #12]
 8004258:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800425c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004260:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004262:	f7fc fedd 	bl	8001020 <HAL_GetTick>
 8004266:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	019b      	lsls	r3, r3, #6
 800426c:	f57f ae4f 	bpl.w	8003f0e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fc fed6 	bl	8001020 <HAL_GetTick>
 8004274:	1b40      	subs	r0, r0, r5
 8004276:	2802      	cmp	r0, #2
 8004278:	d9f6      	bls.n	8004268 <HAL_RCC_OscConfig+0x48c>
 800427a:	e650      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
 800427c:	40007000 	.word	0x40007000

08004280 <HAL_RCC_ClockConfig>:
{
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004286:	4605      	mov	r5, r0
 8004288:	b910      	cbnz	r0, 8004290 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800428a:	2001      	movs	r0, #1
 800428c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4a71      	ldr	r2, [pc, #452]	; (8004458 <HAL_RCC_ClockConfig+0x1d8>)
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	428b      	cmp	r3, r1
 800429a:	d334      	bcc.n	8004306 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429c:	6829      	ldr	r1, [r5, #0]
 800429e:	f011 0701 	ands.w	r7, r1, #1
 80042a2:	d13b      	bne.n	800431c <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a4:	682a      	ldr	r2, [r5, #0]
 80042a6:	0791      	lsls	r1, r2, #30
 80042a8:	f140 80bb 	bpl.w	8004422 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	496b      	ldr	r1, [pc, #428]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 80042ae:	68a8      	ldr	r0, [r5, #8]
 80042b0:	688b      	ldr	r3, [r1, #8]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042b8:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ba:	4967      	ldr	r1, [pc, #412]	; (8004458 <HAL_RCC_ClockConfig+0x1d8>)
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	429e      	cmp	r6, r3
 80042c4:	f0c0 80b5 	bcc.w	8004432 <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	f012 0f04 	tst.w	r2, #4
 80042cc:	4c63      	ldr	r4, [pc, #396]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 80042ce:	f040 80bc 	bne.w	800444a <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	0713      	lsls	r3, r2, #28
 80042d4:	d506      	bpl.n	80042e4 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	68a3      	ldr	r3, [r4, #8]
 80042d8:	692a      	ldr	r2, [r5, #16]
 80042da:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80042de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80042e2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e4:	f7ff fd2c 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	4a5d      	ldr	r2, [pc, #372]	; (8004460 <HAL_RCC_ClockConfig+0x1e0>)
 80042ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	40d8      	lsrs	r0, r3
 80042f8:	4b5a      	ldr	r3, [pc, #360]	; (8004464 <HAL_RCC_ClockConfig+0x1e4>)
 80042fa:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80042fc:	2000      	movs	r0, #0
}
 80042fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004302:	f7fc be5d 	b.w	8000fc0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	6813      	ldr	r3, [r2, #0]
 8004308:	f023 030f 	bic.w	r3, r3, #15
 800430c:	430b      	orrs	r3, r1
 800430e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004310:	6813      	ldr	r3, [r2, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	4299      	cmp	r1, r3
 8004318:	d1b7      	bne.n	800428a <HAL_RCC_ClockConfig+0xa>
 800431a:	e7bf      	b.n	800429c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431c:	686b      	ldr	r3, [r5, #4]
 800431e:	4c4f      	ldr	r4, [pc, #316]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 8004320:	2b03      	cmp	r3, #3
 8004322:	d168      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	019b      	lsls	r3, r3, #6
 8004328:	d5af      	bpl.n	800428a <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800432a:	68e3      	ldr	r3, [r4, #12]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d11e      	bne.n	8004372 <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004334:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004336:	4a4c      	ldr	r2, [pc, #304]	; (8004468 <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004338:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800433a:	bf55      	itete	pl
 800433c:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004340:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004342:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004346:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 800434a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800434e:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004350:	68e3      	ldr	r3, [r4, #12]
 8004352:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004356:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004358:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 800435c:	2b02      	cmp	r3, #2
 800435e:	d00a      	beq.n	8004376 <HAL_RCC_ClockConfig+0xf6>
 8004360:	2b03      	cmp	r3, #3
 8004362:	d008      	beq.n	8004376 <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004364:	fbb2 f3f0 	udiv	r3, r2, r0
 8004368:	68e7      	ldr	r7, [r4, #12]
 800436a:	f3c7 2706 	ubfx	r7, r7, #8, #7
 800436e:	437b      	muls	r3, r7
 8004370:	e008      	b.n	8004384 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 8004372:	2200      	movs	r2, #0
 8004374:	e7eb      	b.n	800434e <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004376:	68e2      	ldr	r2, [r4, #12]
 8004378:	4b3c      	ldr	r3, [pc, #240]	; (800446c <HAL_RCC_ClockConfig+0x1ec>)
 800437a:	fbb3 f3f0 	udiv	r3, r3, r0
 800437e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004382:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004384:	68e2      	ldr	r2, [r4, #12]
 8004386:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800438a:	3201      	adds	r2, #1
 800438c:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 800438e:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004392:	4a37      	ldr	r2, [pc, #220]	; (8004470 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d81c      	bhi.n	80043d2 <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004398:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	686a      	ldr	r2, [r5, #4]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80043a6:	f7fc fe3b 	bl	8001020 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043aa:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80043ae:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b0:	68a3      	ldr	r3, [r4, #8]
 80043b2:	686a      	ldr	r2, [r5, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043bc:	f43f af72 	beq.w	80042a4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7fc fe2e 	bl	8001020 <HAL_GetTick>
 80043c4:	eba0 0008 	sub.w	r0, r0, r8
 80043c8:	4548      	cmp	r0, r9
 80043ca:	d9f1      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80043cc:	2003      	movs	r0, #3
}
 80043ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043e6:	2780      	movs	r7, #128	; 0x80
 80043e8:	e7d7      	b.n	800439a <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80043ea:	0788      	lsls	r0, r1, #30
 80043ec:	d5d4      	bpl.n	8004398 <HAL_RCC_ClockConfig+0x118>
 80043ee:	68ab      	ldr	r3, [r5, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1d1      	bne.n	8004398 <HAL_RCC_ClockConfig+0x118>
 80043f4:	e7f1      	b.n	80043da <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d10a      	bne.n	8004410 <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004400:	f43f af43 	beq.w	800428a <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004404:	f7ff fc9c 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_ClockConfig+0x1f0>)
 800440a:	4298      	cmp	r0, r3
 800440c:	d9c4      	bls.n	8004398 <HAL_RCC_ClockConfig+0x118>
 800440e:	e7e4      	b.n	80043da <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004410:	b91b      	cbnz	r3, 800441a <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f013 0f02 	tst.w	r3, #2
 8004418:	e7f2      	b.n	8004400 <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004420:	e7ee      	b.n	8004400 <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 8004422:	2f80      	cmp	r7, #128	; 0x80
 8004424:	f47f af49 	bne.w	80042ba <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004428:	490c      	ldr	r1, [pc, #48]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 800442a:	688b      	ldr	r3, [r1, #8]
 800442c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004430:	e742      	b.n	80042b8 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	680b      	ldr	r3, [r1, #0]
 8004434:	f023 030f 	bic.w	r3, r3, #15
 8004438:	4333      	orrs	r3, r6
 800443a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443c:	680b      	ldr	r3, [r1, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	429e      	cmp	r6, r3
 8004444:	f47f af21 	bne.w	800428a <HAL_RCC_ClockConfig+0xa>
 8004448:	e73e      	b.n	80042c8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444a:	68a3      	ldr	r3, [r4, #8]
 800444c:	68e9      	ldr	r1, [r5, #12]
 800444e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004452:	430b      	orrs	r3, r1
 8004454:	60a3      	str	r3, [r4, #8]
 8004456:	e73c      	b.n	80042d2 <HAL_RCC_ClockConfig+0x52>
 8004458:	40022000 	.word	0x40022000
 800445c:	40021000 	.word	0x40021000
 8004460:	08031320 	.word	0x08031320
 8004464:	20000ec4 	.word	0x20000ec4
 8004468:	08031338 	.word	0x08031338
 800446c:	00f42400 	.word	0x00f42400
 8004470:	04c4b400 	.word	0x04c4b400

08004474 <HAL_RCC_GetHCLKFreq>:
}
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <HAL_RCC_GetHCLKFreq+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000ec4 	.word	0x20000ec4

08004480 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004482:	4a06      	ldr	r2, [pc, #24]	; (800449c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800448e:	6810      	ldr	r0, [r2, #0]
 8004490:	f003 031f 	and.w	r3, r3, #31
}
 8004494:	40d8      	lsrs	r0, r3
 8004496:	4770      	bx	lr
 8004498:	40021000 	.word	0x40021000
 800449c:	08031330 	.word	0x08031330
 80044a0:	20000ec4 	.word	0x20000ec4

080044a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80044a6:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80044ae:	5cd3      	ldrb	r3, [r2, r3]
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b2:	6810      	ldr	r0, [r2, #0]
 80044b4:	f003 031f 	and.w	r3, r3, #31
}
 80044b8:	40d8      	lsrs	r0, r3
 80044ba:	4770      	bx	lr
 80044bc:	40021000 	.word	0x40021000
 80044c0:	08031330 	.word	0x08031330
 80044c4:	20000ec4 	.word	0x20000ec4

080044c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ca:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <RCCEx_PLLSAI1_Config+0x100>)
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	f012 0f03 	tst.w	r2, #3
{
 80044d2:	4605      	mov	r5, r0
 80044d4:	460e      	mov	r6, r1
 80044d6:	461c      	mov	r4, r3
 80044d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044da:	d022      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4283      	cmp	r3, r0
 80044e4:	d130      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0x80>
       ||
 80044e6:	b37b      	cbz	r3, 8004548 <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fc fd96 	bl	8001020 <HAL_GetTick>
 80044f4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	011a      	lsls	r2, r3, #4
 80044fa:	d42e      	bmi.n	800455a <RCCEx_PLLSAI1_Config+0x92>
 80044fc:	68af      	ldr	r7, [r5, #8]
 80044fe:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004500:	b396      	cbz	r6, 8004568 <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004502:	2e01      	cmp	r6, #1
 8004504:	d14c      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004506:	6922      	ldr	r2, [r4, #16]
 8004508:	4930      	ldr	r1, [pc, #192]	; (80045cc <RCCEx_PLLSAI1_Config+0x104>)
 800450a:	4011      	ands	r1, r2
 800450c:	692a      	ldr	r2, [r5, #16]
 800450e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004512:	3b01      	subs	r3, #1
 8004514:	0852      	lsrs	r2, r2, #1
 8004516:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800451a:	3a01      	subs	r2, #1
 800451c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004520:	e02d      	b.n	800457e <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 8004522:	2802      	cmp	r0, #2
 8004524:	d00c      	beq.n	8004540 <RCCEx_PLLSAI1_Config+0x78>
 8004526:	2803      	cmp	r0, #3
 8004528:	d010      	beq.n	800454c <RCCEx_PLLSAI1_Config+0x84>
 800452a:	2801      	cmp	r0, #1
 800452c:	d10c      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	079f      	lsls	r7, r3, #30
 8004532:	d534      	bpl.n	800459e <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	4318      	orrs	r0, r3
 800453c:	60e0      	str	r0, [r4, #12]
 800453e:	e7d3      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004546:	d1f5      	bne.n	8004534 <RCCEx_PLLSAI1_Config+0x6c>
 8004548:	2001      	movs	r0, #1
 800454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	0391      	lsls	r1, r2, #14
 8004550:	d4f0      	bmi.n	8004534 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004558:	e7f5      	b.n	8004546 <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800455a:	f7fc fd61 	bl	8001020 <HAL_GetTick>
 800455e:	1bc0      	subs	r0, r0, r7
 8004560:	2802      	cmp	r0, #2
 8004562:	d9c8      	bls.n	80044f6 <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 8004564:	2003      	movs	r0, #3
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	68e8      	ldr	r0, [r5, #12]
 800456a:	6926      	ldr	r6, [r4, #16]
 800456c:	4918      	ldr	r1, [pc, #96]	; (80045d0 <RCCEx_PLLSAI1_Config+0x108>)
 800456e:	06c2      	lsls	r2, r0, #27
 8004570:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004574:	4031      	ands	r1, r6
 8004576:	430a      	orrs	r2, r1
 8004578:	3b01      	subs	r3, #1
 800457a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457e:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004586:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fc fd4a 	bl	8001020 <HAL_GetTick>
 800458c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	d513      	bpl.n	80045bc <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004594:	6923      	ldr	r3, [r4, #16]
 8004596:	69aa      	ldr	r2, [r5, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a0:	6921      	ldr	r1, [r4, #16]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <RCCEx_PLLSAI1_Config+0x10c>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80045aa:	3b01      	subs	r3, #1
 80045ac:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80045b0:	696a      	ldr	r2, [r5, #20]
 80045b2:	0852      	lsrs	r2, r2, #1
 80045b4:	3a01      	subs	r2, #1
 80045b6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80045ba:	e7e0      	b.n	800457e <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045bc:	f7fc fd30 	bl	8001020 <HAL_GetTick>
 80045c0:	1b80      	subs	r0, r0, r6
 80045c2:	2802      	cmp	r0, #2
 80045c4:	d9e3      	bls.n	800458e <RCCEx_PLLSAI1_Config+0xc6>
 80045c6:	e7cd      	b.n	8004564 <RCCEx_PLLSAI1_Config+0x9c>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	ff9f800f 	.word	0xff9f800f
 80045d0:	07ff800f 	.word	0x07ff800f
 80045d4:	f9ff800f 	.word	0xf9ff800f

080045d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <RCCEx_PLLSAI2_Config+0x100>)
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	f012 0f03 	tst.w	r2, #3
{
 80045e2:	4605      	mov	r5, r0
 80045e4:	460e      	mov	r6, r1
 80045e6:	461c      	mov	r4, r3
 80045e8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ea:	d022      	beq.n	8004632 <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	4283      	cmp	r3, r0
 80045f4:	d130      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0x80>
       ||
 80045f6:	b37b      	cbz	r3, 8004658 <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fc fd0e 	bl	8001020 <HAL_GetTick>
 8004604:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	009a      	lsls	r2, r3, #2
 800460a:	d42e      	bmi.n	800466a <RCCEx_PLLSAI2_Config+0x92>
 800460c:	68af      	ldr	r7, [r5, #8]
 800460e:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004610:	b396      	cbz	r6, 8004678 <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004612:	2e01      	cmp	r6, #1
 8004614:	d14c      	bne.n	80046b0 <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004616:	6962      	ldr	r2, [r4, #20]
 8004618:	4930      	ldr	r1, [pc, #192]	; (80046dc <RCCEx_PLLSAI2_Config+0x104>)
 800461a:	4011      	ands	r1, r2
 800461c:	692a      	ldr	r2, [r5, #16]
 800461e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004622:	3b01      	subs	r3, #1
 8004624:	0852      	lsrs	r2, r2, #1
 8004626:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800462a:	3a01      	subs	r2, #1
 800462c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004630:	e02d      	b.n	800468e <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 8004632:	2802      	cmp	r0, #2
 8004634:	d00c      	beq.n	8004650 <RCCEx_PLLSAI2_Config+0x78>
 8004636:	2803      	cmp	r0, #3
 8004638:	d010      	beq.n	800465c <RCCEx_PLLSAI2_Config+0x84>
 800463a:	2801      	cmp	r0, #1
 800463c:	d10c      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	079f      	lsls	r7, r3, #30
 8004642:	d534      	bpl.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004644:	68e3      	ldr	r3, [r4, #12]
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	4318      	orrs	r0, r3
 800464c:	60e0      	str	r0, [r4, #12]
 800464e:	e7d3      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004656:	d1f5      	bne.n	8004644 <RCCEx_PLLSAI2_Config+0x6c>
 8004658:	2001      	movs	r0, #1
 800465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	0391      	lsls	r1, r2, #14
 8004660:	d4f0      	bmi.n	8004644 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004668:	e7f5      	b.n	8004656 <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800466a:	f7fc fcd9 	bl	8001020 <HAL_GetTick>
 800466e:	1bc0      	subs	r0, r0, r7
 8004670:	2802      	cmp	r0, #2
 8004672:	d9c8      	bls.n	8004606 <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8004674:	2003      	movs	r0, #3
 8004676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004678:	68e8      	ldr	r0, [r5, #12]
 800467a:	6966      	ldr	r6, [r4, #20]
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <RCCEx_PLLSAI2_Config+0x108>)
 800467e:	06c2      	lsls	r2, r0, #27
 8004680:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004684:	4031      	ands	r1, r6
 8004686:	430a      	orrs	r2, r1
 8004688:	3b01      	subs	r3, #1
 800468a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800468e:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004696:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fc fcc2 	bl	8001020 <HAL_GetTick>
 800469c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	d513      	bpl.n	80046cc <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046a4:	6963      	ldr	r3, [r4, #20]
 80046a6:	69aa      	ldr	r2, [r5, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	6163      	str	r3, [r4, #20]
 80046ac:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80046ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b0:	6961      	ldr	r1, [r4, #20]
 80046b2:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <RCCEx_PLLSAI2_Config+0x10c>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80046ba:	3b01      	subs	r3, #1
 80046bc:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80046c0:	696a      	ldr	r2, [r5, #20]
 80046c2:	0852      	lsrs	r2, r2, #1
 80046c4:	3a01      	subs	r2, #1
 80046c6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80046ca:	e7e0      	b.n	800468e <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046cc:	f7fc fca8 	bl	8001020 <HAL_GetTick>
 80046d0:	1b80      	subs	r0, r0, r6
 80046d2:	2802      	cmp	r0, #2
 80046d4:	d9e3      	bls.n	800469e <RCCEx_PLLSAI2_Config+0xc6>
 80046d6:	e7cd      	b.n	8004674 <RCCEx_PLLSAI2_Config+0x9c>
 80046d8:	40021000 	.word	0x40021000
 80046dc:	ff9f800f 	.word	0xff9f800f
 80046e0:	07ff800f 	.word	0x07ff800f
 80046e4:	f9ff800f 	.word	0xf9ff800f

080046e8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80046e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046ec:	6805      	ldr	r5, [r0, #0]
 80046ee:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80046f2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f4:	d023      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80046f6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80046f8:	2940      	cmp	r1, #64	; 0x40
 80046fa:	d014      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80046fc:	d804      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80046fe:	b1c1      	cbz	r1, 8004732 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004700:	2920      	cmp	r1, #32
 8004702:	d02b      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 8004704:	2501      	movs	r5, #1
 8004706:	e01a      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004708:	2960      	cmp	r1, #96	; 0x60
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800470c:	2980      	cmp	r1, #128	; 0x80
 800470e:	d1f9      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004710:	4a4e      	ldr	r2, [pc, #312]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004712:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004714:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004718:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800471c:	430b      	orrs	r3, r1
 800471e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004722:	2500      	movs	r5, #0
 8004724:	e00b      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004726:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004728:	68d3      	ldr	r3, [r2, #12]
 800472a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472e:	60d3      	str	r3, [r2, #12]
      break;
 8004730:	e7ee      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004732:	3004      	adds	r0, #4
 8004734:	f7ff fec8 	bl	80044c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004738:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800473a:	2800      	cmp	r0, #0
 800473c:	d0e8      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	04db      	lsls	r3, r3, #19
 8004742:	d509      	bpl.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004744:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004746:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800474a:	d014      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800474c:	d80b      	bhi.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800474e:	b1c1      	cbz	r1, 8004782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004750:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004754:	d071      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 8004756:	2501      	movs	r5, #1
 8004758:	462e      	mov	r6, r5
 800475a:	e021      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800475c:	2100      	movs	r1, #0
 800475e:	3020      	adds	r0, #32
 8004760:	f7ff ff3a 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004764:	e7e8      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004766:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800476a:	d002      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800476c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004770:	d1f1      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004772:	462e      	mov	r6, r5
 8004774:	e009      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004776:	4a35      	ldr	r2, [pc, #212]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004778:	68d3      	ldr	r3, [r2, #12]
 800477a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477e:	60d3      	str	r3, [r2, #12]
 8004780:	e7f7      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004782:	1d20      	adds	r0, r4, #4
 8004784:	f7ff fea0 	bl	80044c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004788:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800478a:	2e00      	cmp	r6, #0
 800478c:	d15b      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004790:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004792:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004796:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800479a:	430b      	orrs	r3, r1
 800479c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	039f      	lsls	r7, r3, #14
 80047a4:	d565      	bpl.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047a6:	4f29      	ldr	r7, [pc, #164]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047aa:	00d8      	lsls	r0, r3, #3
 80047ac:	f140 81f3 	bpl.w	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 80047b0:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004850 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80047b8:	f8d9 3000 	ldr.w	r3, [r9]
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80047c4:	f7fc fc2c 	bl	8001020 <HAL_GetTick>
 80047c8:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ca:	f8d9 3000 	ldr.w	r3, [r9]
 80047ce:	05d9      	lsls	r1, r3, #23
 80047d0:	d540      	bpl.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	f040 8197 	bne.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047dc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80047e0:	d015      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x126>
 80047e2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d011      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80047ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80047f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800480e:	07da      	lsls	r2, r3, #31
 8004810:	d509      	bpl.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 8004812:	f7fc fc05 	bl	8001020 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800481a:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004820:	079b      	lsls	r3, r3, #30
 8004822:	f140 8168 	bpl.w	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004826:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800482a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004838:	e014      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800483a:	2100      	movs	r1, #0
 800483c:	f104 0020 	add.w	r0, r4, #32
 8004840:	f7ff feca 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004844:	e7a0      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004846:	4635      	mov	r5, r6
 8004848:	e7aa      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004854:	f7fc fbe4 	bl	8001020 <HAL_GetTick>
 8004858:	eba0 000a 	sub.w	r0, r0, sl
 800485c:	2802      	cmp	r0, #2
 800485e:	d9b4      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004860:	2503      	movs	r5, #3
 8004862:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004864:	f1b8 0f00 	cmp.w	r8, #0
 8004868:	d003      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800486a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	07df      	lsls	r7, r3, #31
 8004876:	d508      	bpl.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004878:	49c0      	ldr	r1, [pc, #768]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800487a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800487c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004880:	f022 0203 	bic.w	r2, r2, #3
 8004884:	4302      	orrs	r2, r0
 8004886:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800488a:	0798      	lsls	r0, r3, #30
 800488c:	d508      	bpl.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800488e:	49bb      	ldr	r1, [pc, #748]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004890:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004892:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004896:	f022 020c 	bic.w	r2, r2, #12
 800489a:	4302      	orrs	r2, r0
 800489c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048a0:	0759      	lsls	r1, r3, #29
 80048a2:	d508      	bpl.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a4:	49b5      	ldr	r1, [pc, #724]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048a6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80048a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048ac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80048b0:	4302      	orrs	r2, r0
 80048b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048b6:	071a      	lsls	r2, r3, #28
 80048b8:	d508      	bpl.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048ba:	49b0      	ldr	r1, [pc, #704]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80048be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048c6:	4302      	orrs	r2, r0
 80048c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048cc:	06df      	lsls	r7, r3, #27
 80048ce:	d508      	bpl.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d0:	49aa      	ldr	r1, [pc, #680]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048d2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80048d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048dc:	4302      	orrs	r2, r0
 80048de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048e2:	0698      	lsls	r0, r3, #26
 80048e4:	d508      	bpl.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e6:	49a5      	ldr	r1, [pc, #660]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80048ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048f2:	4302      	orrs	r2, r0
 80048f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048f8:	0599      	lsls	r1, r3, #22
 80048fa:	d508      	bpl.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fc:	499f      	ldr	r1, [pc, #636]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004900:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004904:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004908:	4302      	orrs	r2, r0
 800490a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800490e:	055a      	lsls	r2, r3, #21
 8004910:	d508      	bpl.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004912:	499a      	ldr	r1, [pc, #616]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004914:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004916:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800491a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800491e:	4302      	orrs	r2, r0
 8004920:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004924:	065f      	lsls	r7, r3, #25
 8004926:	d508      	bpl.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004928:	4994      	ldr	r1, [pc, #592]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800492a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800492c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004930:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004934:	4302      	orrs	r2, r0
 8004936:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800493a:	0618      	lsls	r0, r3, #24
 800493c:	d508      	bpl.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493e:	498f      	ldr	r1, [pc, #572]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004942:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004946:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800494a:	4302      	orrs	r2, r0
 800494c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004950:	05d9      	lsls	r1, r3, #23
 8004952:	d508      	bpl.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004954:	4989      	ldr	r1, [pc, #548]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004956:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004958:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800495c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004960:	4302      	orrs	r2, r0
 8004962:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004966:	02da      	lsls	r2, r3, #11
 8004968:	d508      	bpl.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800496a:	4984      	ldr	r1, [pc, #528]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800496c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800496e:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004972:	f022 0203 	bic.w	r2, r2, #3
 8004976:	4302      	orrs	r2, r0
 8004978:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800497c:	049f      	lsls	r7, r3, #18
 800497e:	d510      	bpl.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004980:	4a7e      	ldr	r2, [pc, #504]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004982:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004984:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004988:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800498c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004996:	f040 80b8 	bne.w	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499a:	68d3      	ldr	r3, [r2, #12]
 800499c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	0318      	lsls	r0, r3, #12
 80049a6:	d50f      	bpl.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049a8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049ac:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80049b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80049b4:	f040 80b6 	bne.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80049b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c6:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	0359      	lsls	r1, r3, #13
 80049cc:	d510      	bpl.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ce:	4a6b      	ldr	r2, [pc, #428]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049d0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80049d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80049da:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e4:	f040 80bd 	bne.w	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e8:	68d3      	ldr	r3, [r2, #12]
 80049ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ee:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	045a      	lsls	r2, r3, #17
 80049f4:	d514      	bpl.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f6:	4961      	ldr	r1, [pc, #388]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049f8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80049fc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a00:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004a04:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a06:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a10:	2102      	movs	r1, #2
 8004a12:	1d20      	adds	r0, r4, #4
 8004a14:	f7ff fd58 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004a18:	4606      	mov	r6, r0
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	bf18      	it	ne
 8004a1e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	03d3      	lsls	r3, r2, #15
 8004a24:	d509      	bpl.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a26:	4955      	ldr	r1, [pc, #340]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a28:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004a2c:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	4303      	orrs	r3, r0
 8004a36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a3a:	0297      	lsls	r7, r2, #10
 8004a3c:	d509      	bpl.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a3e:	494f      	ldr	r1, [pc, #316]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004a44:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004a48:	f023 0318 	bic.w	r3, r3, #24
 8004a4c:	4303      	orrs	r3, r0
 8004a4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a52:	0250      	lsls	r0, r2, #9
 8004a54:	d51f      	bpl.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a56:	4f49      	ldr	r7, [pc, #292]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004a60:	f7fc fade 	bl	8001020 <HAL_GetTick>
 8004a64:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	0099      	lsls	r1, r3, #2
 8004a6a:	f100 8089 	bmi.w	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	f040 808f 	bne.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a78:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004a7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a86:	2102      	movs	r1, #2
 8004a88:	f104 0020 	add.w	r0, r4, #32
 8004a8c:	f7ff fda4 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	bf18      	it	ne
 8004a94:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	021a      	lsls	r2, r3, #8
 8004a9a:	d514      	bpl.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004a9c:	4937      	ldr	r1, [pc, #220]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a9e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004aa2:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aaa:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004aac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004ab0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	f104 0020 	add.w	r0, r4, #32
 8004abc:	f7ff fd8c 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	bf18      	it	ne
 8004ac4:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	01db      	lsls	r3, r3, #7
 8004aca:	d510      	bpl.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ace:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004ad2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004ad6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ada:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004adc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ae0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ae4:	d103      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae6:	68d3      	ldr	r3, [r2, #12]
 8004ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aec:	60d3      	str	r3, [r2, #12]
}
 8004aee:	4628      	mov	r0, r5
 8004af0:	b002      	add	sp, #8
 8004af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fc fa93 	bl	8001020 <HAL_GetTick>
 8004afa:	eba0 0009 	sub.w	r0, r0, r9
 8004afe:	4550      	cmp	r0, sl
 8004b00:	f67f ae8c 	bls.w	800481c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004b04:	e6ac      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004b06:	4635      	mov	r5, r6
 8004b08:	e6ac      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b0a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004b0e:	f47f af48 	bne.w	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b12:	2101      	movs	r1, #1
 8004b14:	1d20      	adds	r0, r4, #4
 8004b16:	f7ff fcd7 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	bf18      	it	ne
 8004b20:	4605      	movne	r5, r0
 8004b22:	e73e      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004b2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b30:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004b34:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b36:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b3e:	d103      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b46:	e73e      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b48:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004b4c:	f47f af3c 	bne.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b50:	2101      	movs	r1, #1
 8004b52:	1d20      	adds	r0, r4, #4
 8004b54:	f7ff fcb8 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	bf18      	it	ne
 8004b5e:	4605      	movne	r5, r0
 8004b60:	e732      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b62:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004b66:	f47f af43 	bne.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	1d20      	adds	r0, r4, #4
 8004b6e:	f7ff fcab 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004b72:	4606      	mov	r6, r0
 8004b74:	2800      	cmp	r0, #0
 8004b76:	bf18      	it	ne
 8004b78:	4605      	movne	r5, r0
 8004b7a:	e739      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b7c:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b80:	f7fc fa4e 	bl	8001020 <HAL_GetTick>
 8004b84:	eba0 0008 	sub.w	r0, r0, r8
 8004b88:	2802      	cmp	r0, #2
 8004b8a:	f67f af6c 	bls.w	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004b8e:	2503      	movs	r5, #3
 8004b90:	e781      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004b92:	4635      	mov	r5, r6
 8004b94:	e77f      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ba8:	f04f 0801 	mov.w	r8, #1
 8004bac:	e602      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004bae:	bf00      	nop

08004bb0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	b087      	sub	sp, #28
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004bba:	f7fc fa31 	bl	8001020 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004bbe:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004bc2:	6830      	ldr	r0, [r6, #0]
 8004bc4:	f002 fa90 	bl	80070e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004bc8:	4604      	mov	r4, r0
 8004bca:	bb40      	cbnz	r0, 8004c1e <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004bcc:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004bce:	6830      	ldr	r0, [r6, #0]
 8004bd0:	0409      	lsls	r1, r1, #16
 8004bd2:	f002 fba3 	bl	800731c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	bb08      	cbnz	r0, 8004c1e <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004bda:	2230      	movs	r2, #48	; 0x30
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	2108      	movs	r1, #8
 8004be2:	2302      	movs	r3, #2
 8004be4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004be8:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 8004bea:	4669      	mov	r1, sp
 8004bec:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004bee:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004bf0:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004bf2:	f002 fa67 	bl	80070c4 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004bf6:	6830      	ldr	r0, [r6, #0]
 8004bf8:	f002 fbbf 	bl	800737a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	b970      	cbnz	r0, 8004c1e <SD_FindSCR+0x6e>
 8004c00:	4605      	mov	r5, r0
 8004c02:	4607      	mov	r7, r0
 8004c04:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004c06:	f240 592a 	movw	r9, #1322	; 0x52a
 8004c0a:	6830      	ldr	r0, [r6, #0]
 8004c0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c0e:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004c12:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004c14:	d007      	beq.n	8004c26 <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004c16:	0719      	lsls	r1, r3, #28
 8004c18:	d51c      	bpl.n	8004c54 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004c1a:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004c1c:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004c1e:	4620      	mov	r0, r4
 8004c20:	b007      	add	sp, #28
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004c26:	031b      	lsls	r3, r3, #12
 8004c28:	d40b      	bmi.n	8004c42 <SD_FindSCR+0x92>
 8004c2a:	f1bb 0f00 	cmp.w	fp, #0
 8004c2e:	d108      	bne.n	8004c42 <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004c30:	f002 f984 	bl	8006f3c <SDMMC_ReadFIFO>
 8004c34:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004c36:	6830      	ldr	r0, [r6, #0]
 8004c38:	f002 f980 	bl	8006f3c <SDMMC_ReadFIFO>
      index++;
 8004c3c:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004c40:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c42:	f7fc f9ed 	bl	8001020 <HAL_GetTick>
 8004c46:	eba0 000a 	sub.w	r0, r0, sl
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d1dd      	bne.n	8004c0a <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8004c4e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004c52:	e7e4      	b.n	8004c1e <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004c54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c56:	079a      	lsls	r2, r3, #30
 8004c58:	d501      	bpl.n	8004c5e <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004c5a:	2402      	movs	r4, #2
 8004c5c:	e7de      	b.n	8004c1c <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004c5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c60:	069b      	lsls	r3, r3, #26
 8004c62:	d501      	bpl.n	8004c68 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004c64:	2420      	movs	r4, #32
 8004c66:	e7d9      	b.n	8004c1c <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <SD_FindSCR+0xcc>)
 8004c6a:	6383      	str	r3, [r0, #56]	; 0x38
 8004c6c:	ba3f      	rev	r7, r7
 8004c6e:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c70:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c74:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004c78:	e7d1      	b.n	8004c1e <SD_FindSCR+0x6e>
 8004c7a:	bf00      	nop
 8004c7c:	18000f3a 	.word	0x18000f3a

08004c80 <HAL_SD_DeInit>:
{
 8004c80:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004c82:	4604      	mov	r4, r0
 8004c84:	b168      	cbz	r0, 8004ca2 <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8004c86:	2303      	movs	r3, #3
 8004c88:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f002 f963 	bl	8006f58 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8004c92:	4620      	mov	r0, r4
 8004c94:	f01a fa98 	bl	801f1c8 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c98:	2000      	movs	r0, #0
 8004c9a:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8004c9c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004ca0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ca2:	2001      	movs	r0, #1
}
 8004ca4:	bd10      	pop	{r4, pc}
	...

08004ca8 <HAL_SD_ReadBlocks_DMA>:
{
 8004ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cac:	4604      	mov	r4, r0
 8004cae:	b086      	sub	sp, #24
 8004cb0:	4615      	mov	r5, r2
 8004cb2:	461e      	mov	r6, r3
  if(NULL == pData)
 8004cb4:	460f      	mov	r7, r1
 8004cb6:	b939      	cbnz	r1, 8004cc8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004cba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cbe:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004cc0:	2001      	movs	r0, #1
}
 8004cc2:	b006      	add	sp, #24
 8004cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004cc8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004ccc:	b2c0      	uxtb	r0, r0
 8004cce:	2801      	cmp	r0, #1
 8004cd0:	d158      	bne.n	8004d84 <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cd6:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cd8:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cda:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cdc:	d904      	bls.n	8004ce8 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004ce6:	e7ec      	b.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004cee:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004cf2:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004cf4:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cf8:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8004cfa:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004cfc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d00:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004d04:	bf18      	it	ne
 8004d06:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d08:	f002 f9ee 	bl	80070e8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d0c:	b148      	cbz	r0, 8004d22 <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d16:	4318      	orrs	r0, r3
 8004d18:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004d20:	e7cf      	b.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d26:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d2a:	2390      	movs	r3, #144	; 0x90
 8004d2c:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d2e:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d30:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004d32:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d34:	4669      	mov	r1, sp
 8004d36:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d38:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d3a:	f002 f9c3 	bl	80070c4 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d42:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8004d46:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004d48:	68c3      	ldr	r3, [r0, #12]
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d4e:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004d50:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004d52:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004d54:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004d56:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004d58:	d90e      	bls.n	8004d78 <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d5a:	2382      	movs	r3, #130	; 0x82
 8004d5c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f002 f9f4 	bl	800714c <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d0ac      	beq.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d70:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004d74:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d76:	e7cd      	b.n	8004d14 <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d78:	2381      	movs	r3, #129	; 0x81
 8004d7a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f002 f9cc 	bl	800711a <SDMMC_CmdReadSingleBlock>
 8004d82:	e7ef      	b.n	8004d64 <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 8004d84:	2002      	movs	r0, #2
 8004d86:	e79c      	b.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
 8004d88:	1fe00fff 	.word	0x1fe00fff

08004d8c <HAL_SD_WriteBlocks_DMA>:
{
 8004d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d90:	4604      	mov	r4, r0
 8004d92:	b086      	sub	sp, #24
 8004d94:	4615      	mov	r5, r2
 8004d96:	461e      	mov	r6, r3
  if(NULL == pData)
 8004d98:	460f      	mov	r7, r1
 8004d9a:	b939      	cbnz	r1, 8004dac <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
}
 8004da6:	b006      	add	sp, #24
 8004da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004dac:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004db0:	b2c0      	uxtb	r0, r0
 8004db2:	2801      	cmp	r0, #1
 8004db4:	d159      	bne.n	8004e6a <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dba:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dbc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dbe:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dc0:	d904      	bls.n	8004dcc <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004dca:	e7ec      	b.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004dd2:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004dd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004dd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004dd8:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ddc:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004dde:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004de0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004de4:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004de8:	bf18      	it	ne
 8004dea:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004dec:	f002 f97c 	bl	80070e8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df0:	b148      	cbz	r0, 8004e06 <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dfa:	4318      	orrs	r0, r3
 8004dfc:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dfe:	2001      	movs	r0, #1
 8004e00:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004e04:	e7cf      	b.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e0a:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004e0e:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e10:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004e12:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004e14:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 8004e18:	4669      	mov	r1, sp
 8004e1a:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004e1c:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004e20:	f002 f950 	bl	80070c4 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004e28:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8004e2c:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004e2e:	68c3      	ldr	r3, [r0, #12]
 8004e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e34:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004e36:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004e38:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004e3a:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004e3c:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004e3e:	d90e      	bls.n	8004e5e <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e40:	23a0      	movs	r3, #160	; 0xa0
 8004e42:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004e44:	4629      	mov	r1, r5
 8004e46:	f002 f9b3 	bl	80071b0 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0ab      	beq.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	4a07      	ldr	r2, [pc, #28]	; (8004e70 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e56:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8004e5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e5c:	e7cc      	b.n	8004df8 <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e5e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004e62:	4629      	mov	r1, r5
 8004e64:	f002 f98b 	bl	800717e <SDMMC_CmdWriteSingleBlock>
 8004e68:	e7ef      	b.n	8004e4a <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 8004e6a:	2002      	movs	r0, #2
 8004e6c:	e79b      	b.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
 8004e6e:	bf00      	nop
 8004e70:	1fe00fff 	.word	0x1fe00fff

08004e74 <HAL_SD_ErrorCallback>:
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004e78:	6803      	ldr	r3, [r0, #0]
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8004e7c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004e7e:	05d5      	lsls	r5, r2, #23
{  
 8004e80:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004e82:	d55f      	bpl.n	8004f44 <HAL_SD_IRQHandler+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8004e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8004e90:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8004e94:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e98:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004ea6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ea8:	f012 0208 	ands.w	r2, r2, #8
 8004eac:	d023      	beq.n	8004ef6 <HAL_SD_IRQHandler+0x7e>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004eae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004eb0:	0790      	lsls	r0, r2, #30
 8004eb2:	d402      	bmi.n	8004eba <HAL_SD_IRQHandler+0x42>
 8004eb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004eb6:	0691      	lsls	r1, r2, #26
 8004eb8:	d509      	bpl.n	8004ece <HAL_SD_IRQHandler+0x56>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f002 f992 	bl	80071e4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ec0:	b128      	cbz	r0, 8004ece <HAL_SD_IRQHandler+0x56>
          hsd->ErrorCode |= errorstate;
 8004ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ec4:	4318      	orrs	r0, r3
 8004ec6:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffd3 	bl	8004e74 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4a59      	ldr	r2, [pc, #356]	; (8005038 <HAL_SD_IRQHandler+0x1c0>)
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004edc:	07da      	lsls	r2, r3, #31
 8004ede:	d503      	bpl.n	8004ee8 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f016 fd45 	bl	801b970 <HAL_SD_RxCpltCallback>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004ee8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004eea:	079b      	lsls	r3, r3, #30
 8004eec:	d4f8      	bmi.n	8004ee0 <HAL_SD_IRQHandler+0x68>
        HAL_SD_TxCpltCallback(hsd);
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f016 fd39 	bl	801b966 <HAL_SD_TxCpltCallback>
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004ef6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004ef8:	060e      	lsls	r6, r1, #24
 8004efa:	f140 8090 	bpl.w	800501e <HAL_SD_IRQHandler+0x1a6>
      hsd->Instance->DLEN = 0;
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 8004f04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f06:	07d5      	lsls	r5, r2, #31
 8004f08:	d409      	bmi.n	8004f1e <HAL_SD_IRQHandler+0xa6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 f96a 	bl	80071e4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f10:	b128      	cbz	r0, 8004f1e <HAL_SD_IRQHandler+0xa6>
          hsd->ErrorCode |= errorstate;
 8004f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f14:	4318      	orrs	r0, r3
 8004f16:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff ffab 	bl	8004e74 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f26:	06d8      	lsls	r0, r3, #27
 8004f28:	d402      	bmi.n	8004f30 <HAL_SD_IRQHandler+0xb8>
 8004f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f2c:	0699      	lsls	r1, r3, #26
 8004f2e:	d502      	bpl.n	8004f36 <HAL_SD_IRQHandler+0xbe>
        HAL_SD_TxCpltCallback(hsd);
 8004f30:	4620      	mov	r0, r4
 8004f32:	f016 fd18 	bl	801b966 <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004f36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f38:	07da      	lsls	r2, r3, #31
 8004f3a:	d4d1      	bmi.n	8004ee0 <HAL_SD_IRQHandler+0x68>
 8004f3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f3e:	079b      	lsls	r3, r3, #30
 8004f40:	d4ce      	bmi.n	8004ee0 <HAL_SD_IRQHandler+0x68>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8004f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f46:	0456      	lsls	r6, r2, #17
 8004f48:	d50d      	bpl.n	8004f66 <HAL_SD_IRQHandler+0xee>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8004f4a:	6a05      	ldr	r5, [r0, #32]
 8004f4c:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8004f50:	4629      	mov	r1, r5
 8004f52:	6820      	ldr	r0, [r4, #0]
 8004f54:	3504      	adds	r5, #4
 8004f56:	f001 fff4 	bl	8006f42 <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8004f5a:	42ae      	cmp	r6, r5
 8004f5c:	d1f8      	bne.n	8004f50 <HAL_SD_IRQHandler+0xd8>
  }
  
  hsd->pTxBuffPtr += 8;
 8004f5e:	6a23      	ldr	r3, [r4, #32]
 8004f60:	3320      	adds	r3, #32
 8004f62:	6223      	str	r3, [r4, #32]
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8004f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f68:	0415      	lsls	r5, r2, #16
 8004f6a:	d50d      	bpl.n	8004f88 <HAL_SD_IRQHandler+0x110>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8004f6c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004f6e:	1f2e      	subs	r6, r5, #4
 8004f70:	351c      	adds	r5, #28
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	f001 ffe2 	bl	8006f3c <SDMMC_ReadFIFO>
 8004f78:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0; count < 8; count++)
 8004f7c:	42b5      	cmp	r5, r6
 8004f7e:	d1f8      	bne.n	8004f72 <HAL_SD_IRQHandler+0xfa>
  hsd->pRxBuffPtr += 8;
 8004f80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f82:	3320      	adds	r3, #32
 8004f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8004f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8a:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8004f90:	d036      	beq.n	8005000 <HAL_SD_IRQHandler+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004f92:	0791      	lsls	r1, r2, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004f94:	bf42      	ittt	mi
 8004f96:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004f98:	f042 0202 	orrmi.w	r2, r2, #2
 8004f9c:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa0:	0712      	lsls	r2, r2, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004fa2:	bf42      	ittt	mi
 8004fa4:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004fa6:	f042 0208 	orrmi.w	r2, r2, #8
 8004faa:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fae:	0696      	lsls	r6, r2, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004fb0:	bf42      	ittt	mi
 8004fb2:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004fb4:	f042 0220 	orrmi.w	r2, r2, #32
 8004fb8:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	06d5      	lsls	r5, r2, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004fbe:	bf42      	ittt	mi
 8004fc0:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004fc2:	f042 0210 	orrmi.w	r2, r2, #16
 8004fc6:	6382      	strmi	r2, [r0, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_SD_IRQHandler+0x1c0>)
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fce:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004fd4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004fd6:	f012 0208 	ands.w	r2, r2, #8
 8004fda:	d006      	beq.n	8004fea <HAL_SD_IRQHandler+0x172>
        hsd->State = HAL_SD_STATE_READY;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7ff ff46 	bl	8004e74 <HAL_SD_ErrorCallback>
 8004fe8:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004fea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004fec:	0608      	lsls	r0, r1, #24
 8004fee:	d516      	bpl.n	800501e <HAL_SD_IRQHandler+0x1a6>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004ff0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ff2:	b1a1      	cbz	r1, 800501e <HAL_SD_IRQHandler+0x1a6>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004ff4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004ff6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8004ffa:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
 8004ffe:	e7ed      	b.n	8004fdc <HAL_SD_IRQHandler+0x164>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 8005000:	00d1      	lsls	r1, r2, #3
 8005002:	d50c      	bpl.n	800501e <HAL_SD_IRQHandler+0x1a6>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800500a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 800500c:	d10b      	bne.n	8005026 <HAL_SD_IRQHandler+0x1ae>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800500e:	069a      	lsls	r2, r3, #26
 8005010:	d506      	bpl.n	8005020 <HAL_SD_IRQHandler+0x1a8>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8005012:	f000 fb72 	bl	80056fa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
 800501e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8005020:	f000 fb69 	bl	80056f6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 8005024:	e7f7      	b.n	8005016 <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005026:	069b      	lsls	r3, r3, #26
 8005028:	d502      	bpl.n	8005030 <HAL_SD_IRQHandler+0x1b8>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800502a:	f000 fb65 	bl	80056f8 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 800502e:	e7f2      	b.n	8005016 <HAL_SD_IRQHandler+0x19e>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8005030:	f000 fb60 	bl	80056f4 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8005034:	e7ef      	b.n	8005016 <HAL_SD_IRQHandler+0x19e>
 8005036:	bf00      	nop
 8005038:	18000f3a 	.word	0x18000f3a

0800503c <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800503c:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800503e:	0f9a      	lsrs	r2, r3, #30
 8005040:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8005042:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8005046:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8005048:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800504c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 800504e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005052:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8005054:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005058:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 800505a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800505c:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800505e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005060:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005066:	88ca      	ldrh	r2, [r1, #6]
{
 8005068:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800506a:	b292      	uxth	r2, r2
 800506c:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8005070:	4322      	orrs	r2, r4
 8005072:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005074:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8005078:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800507a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800507e:	09d4      	lsrs	r4, r2, #7
 8005080:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8005082:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8005086:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005088:	f3c2 1440 	ubfx	r4, r2, #5, #1
 800508c:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800508e:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8005092:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005094:	2400      	movs	r4, #0
 8005096:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005098:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800509a:	2c00      	cmp	r4, #0
 800509c:	f040 8083 	bne.w	80051a6 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80050a0:	0292      	lsls	r2, r2, #10
 80050a2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80050a6:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 80050a8:	690a      	ldr	r2, [r1, #16]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80050b4:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80050bc:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80050be:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80050c2:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80050c4:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80050c8:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80050ca:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80050ce:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80050d0:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80050d4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80050d6:	0bd3      	lsrs	r3, r2, #15
 80050d8:	f003 0306 	and.w	r3, r3, #6
 80050dc:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80050de:	7e0c      	ldrb	r4, [r1, #24]
 80050e0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80050e4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80050e8:	4322      	orrs	r2, r4
 80050ea:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80050ec:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80050ee:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80050f0:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80050f2:	3402      	adds	r4, #2
 80050f4:	40a2      	lsls	r2, r4
 80050f6:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80050f8:	7a0d      	ldrb	r5, [r1, #8]
 80050fa:	2401      	movs	r4, #1
 80050fc:	40ac      	lsls	r4, r5
 80050fe:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8005100:	0a64      	lsrs	r4, r4, #9
 8005102:	4362      	muls	r2, r4
 8005104:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 8005106:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800510a:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800510c:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8005116:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005118:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800511a:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800511c:	7e8a      	ldrb	r2, [r1, #26]
 800511e:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8005122:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005128:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800512a:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800512c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800512e:	0fda      	lsrs	r2, r3, #31
 8005130:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8005132:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005136:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005138:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800513c:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800513e:	0d9a      	lsrs	r2, r3, #22
 8005140:	f002 020c 	and.w	r2, r2, #12
 8005144:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005146:	7fca      	ldrb	r2, [r1, #31]
 8005148:	f3c3 5081 	ubfx	r0, r3, #22, #2
 800514c:	4302      	orrs	r2, r0
 800514e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005150:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005154:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8005158:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800515a:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 800515e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005162:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005166:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800516a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800516e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005172:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005176:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800517a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800517e:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8005182:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005186:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800518a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800518e:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005192:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8005196:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800519a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80051a4:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051a6:	2c01      	cmp	r4, #1
 80051a8:	d11a      	bne.n	80051e0 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80051b0:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80051b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 80051b4:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80051b6:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 80051b8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80051bc:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80051be:	690c      	ldr	r4, [r1, #16]
 80051c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80051c4:	4322      	orrs	r2, r4
 80051c6:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80051c8:	690a      	ldr	r2, [r1, #16]
 80051ca:	0292      	lsls	r2, r2, #10
 80051cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051d0:	64c2      	str	r2, [r0, #76]	; 0x4c
 80051d2:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80051d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80051dc:	6502      	str	r2, [r0, #80]	; 0x50
 80051de:	e794      	b.n	800510a <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80051e0:	6803      	ldr	r3, [r0, #0]
 80051e2:	4a05      	ldr	r2, [pc, #20]	; (80051f8 <HAL_SD_GetCardCSD+0x1bc>)
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd30      	pop	{r4, r5, pc}
 80051f8:	1fe00fff 	.word	0x1fe00fff

080051fc <HAL_SD_InitCard>:
{
 80051fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fe:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005200:	2300      	movs	r3, #0
 8005202:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005204:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005206:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005208:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800520a:	233c      	movs	r3, #60	; 0x3c
 800520c:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800520e:	6983      	ldr	r3, [r0, #24]
 8005210:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005212:	bf01      	itttt	eq
 8005214:	6802      	ldreq	r2, [r0, #0]
 8005216:	6813      	ldreq	r3, [r2, #0]
 8005218:	f043 0304 	orreq.w	r3, r3, #4
 800521c:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 800521e:	ab0a      	add	r3, sp, #40	; 0x28
{
 8005220:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 8005222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005226:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800522a:	ab07      	add	r3, sp, #28
 800522c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800522e:	6820      	ldr	r0, [r4, #0]
 8005230:	f001 fe6a 	bl	8006f08 <SDMMC_Init>
  if(status != HAL_OK)
 8005234:	2800      	cmp	r0, #0
 8005236:	f040 80e9 	bne.w	800540c <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 800523a:	6820      	ldr	r0, [r4, #0]
 800523c:	f001 fe86 	bl	8006f4c <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005240:	4605      	mov	r5, r0
 8005242:	2800      	cmp	r0, #0
 8005244:	f040 80e2 	bne.w	800540c <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 8005248:	2002      	movs	r0, #2
 800524a:	f7fb feef 	bl	800102c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800524e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8005250:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005252:	f001 fffb 	bl	800724c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005256:	b958      	cbnz	r0, 8005270 <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	f002 f821 	bl	80072a0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800525e:	b170      	cbz	r0, 800527e <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005260:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005262:	2100      	movs	r1, #0
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	f002 f859 	bl	800731c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800526a:	b158      	cbz	r0, 8005284 <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800526c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8005270:	2501      	movs	r5, #1
 8005272:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005278:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 800527a:	63a0      	str	r0, [r4, #56]	; 0x38
 800527c:	e098      	b.n	80053b0 <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800527e:	2301      	movs	r3, #1
 8005280:	6423      	str	r3, [r4, #64]	; 0x40
 8005282:	e7ee      	b.n	8005262 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005284:	4f62      	ldr	r7, [pc, #392]	; (8005410 <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005286:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800528a:	9b06      	ldr	r3, [sp, #24]
 800528c:	42b3      	cmp	r3, r6
 800528e:	d815      	bhi.n	80052bc <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005290:	2100      	movs	r1, #0
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	f002 f842 	bl	800731c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005298:	2800      	cmp	r0, #0
 800529a:	d1e9      	bne.n	8005270 <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800529c:	4639      	mov	r1, r7
 800529e:	6820      	ldr	r0, [r4, #0]
 80052a0:	f002 f855 	bl	800734e <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80052a4:	4601      	mov	r1, r0
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d1e0      	bne.n	800526c <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052aa:	6820      	ldr	r0, [r4, #0]
 80052ac:	f001 fe70 	bl	8006f90 <SDMMC_GetResponse>
      count++;
 80052b0:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80052b2:	2800      	cmp	r0, #0
      count++;
 80052b4:	f103 0301 	add.w	r3, r3, #1
 80052b8:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80052ba:	dae6      	bge.n	800528a <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80052bc:	9a06      	ldr	r2, [sp, #24]
 80052be:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d902      	bls.n	80052cc <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80052c6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80052ca:	e7d1      	b.n	8005270 <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80052cc:	0043      	lsls	r3, r0, #1
 80052ce:	d532      	bpl.n	8005336 <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80052d0:	2301      	movs	r3, #1
 80052d2:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80052d4:	69a3      	ldr	r3, [r4, #24]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d12d      	bne.n	8005336 <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80052da:	01c7      	lsls	r7, r0, #7
 80052dc:	d52b      	bpl.n	8005336 <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80052de:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80052e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80052e6:	6803      	ldr	r3, [r0, #0]
 80052e8:	f043 0303 	orr.w	r3, r3, #3
 80052ec:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80052ee:	f002 f913 	bl	8007518 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d1bc      	bne.n	8005270 <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fa:	0156      	lsls	r6, r2, #5
 80052fc:	d5fc      	bpl.n	80052f8 <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80052fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005306:	02d8      	lsls	r0, r3, #11
 8005308:	d5b0      	bpl.n	800526c <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800530a:	2001      	movs	r0, #1
 800530c:	f000 f965 	bl	80055da <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	f042 0202 	orr.w	r2, r2, #2
 8005318:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 800531a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531c:	0191      	lsls	r1, r2, #6
 800531e:	d5fc      	bpl.n	800531a <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005328:	02d2      	lsls	r2, r2, #11
 800532a:	d4cc      	bmi.n	80052c6 <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 800532c:	2213      	movs	r2, #19
 800532e:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 8005336:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005338:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 800533a:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800533e:	f001 fe11 	bl	8006f64 <SDMMC_GetPowerState>
 8005342:	b910      	cbnz	r0, 800534a <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005344:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005348:	e03c      	b.n	80053c4 <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800534a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800534c:	2b03      	cmp	r3, #3
 800534e:	d018      	beq.n	8005382 <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	f002 f82b 	bl	80073ac <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005356:	2800      	cmp	r0, #0
 8005358:	d134      	bne.n	80053c4 <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800535a:	4601      	mov	r1, r0
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	f001 fe17 	bl	8006f90 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005362:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005364:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005366:	6820      	ldr	r0, [r4, #0]
 8005368:	f001 fe12 	bl	8006f90 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800536c:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800536e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	f001 fe0d 	bl	8006f90 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005376:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005378:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	f001 fe08 	bl	8006f90 <SDMMC_GetResponse>
 8005380:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005384:	2b03      	cmp	r3, #3
 8005386:	d116      	bne.n	80053b6 <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800538a:	2b03      	cmp	r3, #3
 800538c:	d120      	bne.n	80053d0 <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800538e:	2104      	movs	r1, #4
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	f001 fdfd 	bl	8006f90 <SDMMC_GetResponse>
 8005396:	0d00      	lsrs	r0, r0, #20
 8005398:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 800539a:	a90d      	add	r1, sp, #52	; 0x34
 800539c:	4620      	mov	r0, r4
 800539e:	f7ff fe4d 	bl	800503c <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80053a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80053a4:	6820      	ldr	r0, [r4, #0]
 80053a6:	0412      	lsls	r2, r2, #16
 80053a8:	2300      	movs	r3, #0
 80053aa:	f001 ff35 	bl	8007218 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053ae:	b948      	cbnz	r0, 80053c4 <HAL_SD_InitCard+0x1c8>
}
 80053b0:	4628      	mov	r0, r5
 80053b2:	b019      	add	sp, #100	; 0x64
 80053b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80053b6:	f10d 0116 	add.w	r1, sp, #22
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	f002 f822 	bl	8007404 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d0e1      	beq.n	8005388 <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 80053c4:	2501      	movs	r5, #1
 80053c6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80053ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053cc:	4308      	orrs	r0, r1
 80053ce:	e754      	b.n	800527a <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80053d0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80053d4:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	0409      	lsls	r1, r1, #16
 80053da:	f001 fffd 	bl	80073d8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053de:	2800      	cmp	r0, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053e2:	4601      	mov	r1, r0
 80053e4:	6820      	ldr	r0, [r4, #0]
 80053e6:	f001 fdd3 	bl	8006f90 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053ea:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053ec:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	f001 fdce 	bl	8006f90 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80053f4:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053f6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	f001 fdc9 	bl	8006f90 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80053fe:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005400:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005402:	6820      	ldr	r0, [r4, #0]
 8005404:	f001 fdc4 	bl	8006f90 <SDMMC_GetResponse>
 8005408:	66e0      	str	r0, [r4, #108]	; 0x6c
 800540a:	e7c0      	b.n	800538e <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 800540c:	2501      	movs	r5, #1
 800540e:	e7cf      	b.n	80053b0 <HAL_SD_InitCard+0x1b4>
 8005410:	c1100000 	.word	0xc1100000

08005414 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005414:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005416:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005418:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800541a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800541c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800541e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005420:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005422:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005424:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005426:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005428:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800542a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800542c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800542e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005430:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005432:	61cb      	str	r3, [r1, #28]
}
 8005434:	2000      	movs	r0, #0
 8005436:	4770      	bx	lr

08005438 <HAL_SD_ConfigWideBusOperation>:
{
 8005438:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800543a:	2303      	movs	r3, #3
 800543c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005440:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005442:	2b03      	cmp	r3, #3
{
 8005444:	b08a      	sub	sp, #40	; 0x28
 8005446:	4604      	mov	r4, r0
 8005448:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800544a:	d002      	beq.n	8005452 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800544c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005450:	d103      	bne.n	800545a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005458:	e056      	b.n	8005508 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800545a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800545e:	d12d      	bne.n	80054bc <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8005460:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005462:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005464:	9104      	str	r1, [sp, #16]
 8005466:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005468:	f001 fd92 	bl	8006f90 <SDMMC_GetResponse>
 800546c:	0180      	lsls	r0, r0, #6
 800546e:	d41f      	bmi.n	80054b0 <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 8005470:	a904      	add	r1, sp, #16
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff fb9c 	bl	8004bb0 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005478:	b960      	cbnz	r0, 8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800547a:	9b05      	ldr	r3, [sp, #20]
 800547c:	0359      	lsls	r1, r3, #13
 800547e:	d51a      	bpl.n	80054b6 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005480:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005482:	6820      	ldr	r0, [r4, #0]
 8005484:	0409      	lsls	r1, r1, #16
 8005486:	f001 ff49 	bl	800731c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800548a:	b918      	cbnz	r0, 8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800548c:	2102      	movs	r1, #2
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	f002 f840 	bl	8007514 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005496:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8005498:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800549a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800549c:	2d00      	cmp	r5, #0
 800549e:	d035      	beq.n	800550c <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	4a26      	ldr	r2, [pc, #152]	; (800553c <HAL_SD_ConfigWideBusOperation+0x104>)
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054a6:	2001      	movs	r0, #1
 80054a8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80054ac:	b00a      	add	sp, #40	; 0x28
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054b4:	e7ee      	b.n	8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80054ba:	e7eb      	b.n	8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80054bc:	bb09      	cbnz	r1, 8005502 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054be:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80054c0:	9104      	str	r1, [sp, #16]
 80054c2:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054c4:	f001 fd64 	bl	8006f90 <SDMMC_GetResponse>
 80054c8:	0182      	lsls	r2, r0, #6
 80054ca:	d414      	bmi.n	80054f6 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80054cc:	a904      	add	r1, sp, #16
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff fb6e 	bl	8004bb0 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80054d4:	b960      	cbnz	r0, 80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80054d6:	9b05      	ldr	r3, [sp, #20]
 80054d8:	03db      	lsls	r3, r3, #15
 80054da:	d50f      	bpl.n	80054fc <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80054dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	0409      	lsls	r1, r1, #16
 80054e2:	f001 ff1b 	bl	800731c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80054e6:	b918      	cbnz	r0, 80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80054e8:	4601      	mov	r1, r0
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	f002 f812 	bl	8007514 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80054f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054f2:	4308      	orrs	r0, r1
 80054f4:	e7d0      	b.n	8005498 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054fa:	e7f9      	b.n	80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005500:	e7f6      	b.n	80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005502:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005504:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005508:	63a3      	str	r3, [r4, #56]	; 0x38
 800550a:	e7c6      	b.n	800549a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005510:	68a3      	ldr	r3, [r4, #8]
 8005512:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005518:	6963      	ldr	r3, [r4, #20]
 800551a:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 800551c:	ab0a      	add	r3, sp, #40	; 0x28
 800551e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005522:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 8005526:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005528:	ab04      	add	r3, sp, #16
 800552a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	f001 fceb 	bl	8006f08 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005532:	2301      	movs	r3, #1
 8005534:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005538:	4628      	mov	r0, r5
 800553a:	e7b7      	b.n	80054ac <HAL_SD_ConfigWideBusOperation+0x74>
 800553c:	1fe00fff 	.word	0x1fe00fff

08005540 <HAL_SD_Init>:
{ 
 8005540:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 8005542:	4604      	mov	r4, r0
 8005544:	b910      	cbnz	r0, 800554c <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8005546:	2501      	movs	r5, #1
}
 8005548:	4628      	mov	r0, r5
 800554a:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800554c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005550:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005554:	b913      	cbnz	r3, 800555c <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 8005556:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005558:	f019 fde6 	bl	801f128 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800555c:	2303      	movs	r3, #3
 800555e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff fe4a 	bl	80051fc <HAL_SD_InitCard>
 8005568:	2800      	cmp	r0, #0
 800556a:	d1ec      	bne.n	8005546 <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800556c:	68e1      	ldr	r1, [r4, #12]
 800556e:	4620      	mov	r0, r4
 8005570:	f7ff ff62 	bl	8005438 <HAL_SD_ConfigWideBusOperation>
 8005574:	4605      	mov	r5, r0
 8005576:	2800      	cmp	r0, #0
 8005578:	d1e5      	bne.n	8005546 <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800557a:	69a3      	ldr	r3, [r4, #24]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d006      	beq.n	800558e <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005580:	2300      	movs	r3, #0
 8005582:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005584:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005586:	2301      	movs	r3, #1
 8005588:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800558c:	e7dc      	b.n	8005548 <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 800558e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005594:	d002      	beq.n	800559c <HAL_SD_Init+0x5c>
 8005596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d1f1      	bne.n	8005580 <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 800559c:	6822      	ldr	r2, [r4, #0]
 800559e:	6853      	ldr	r3, [r2, #4]
 80055a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a4:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f818 	bl	80055dc <HAL_SDEx_HighSpeed>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0e7      	beq.n	8005580 <HAL_SD_Init+0x40>
 80055b0:	e7c9      	b.n	8005546 <HAL_SD_Init+0x6>

080055b2 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 80055b4:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055b6:	0409      	lsls	r1, r1, #16
{
 80055b8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	f001 ff78 	bl	80074b0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80055c0:	4601      	mov	r1, r0
 80055c2:	b928      	cbnz	r0, 80055d0 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	f001 fce3 	bl	8006f90 <SDMMC_GetResponse>
  return cardstate;
 80055ca:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80055ce:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80055d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055d2:	4319      	orrs	r1, r3
 80055d4:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80055d6:	2000      	movs	r0, #0
 80055d8:	e7f7      	b.n	80055ca <HAL_SD_GetCardState+0x18>

080055da <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80055da:	4770      	bx	lr

080055dc <HAL_SDEx_HighSpeed>:
{
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 80055e0:	2640      	movs	r6, #64	; 0x40
{
 80055e2:	b096      	sub	sp, #88	; 0x58
 80055e4:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 80055e6:	4632      	mov	r2, r6
 80055e8:	2100      	movs	r1, #0
 80055ea:	a806      	add	r0, sp, #24
 80055ec:	f01a f91d 	bl	801f82a <memset>
  uint32_t Timeout = HAL_GetTick();
 80055f0:	f7fb fd16 	bl	8001020 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80055f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 80055f6:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d074      	beq.n	80056e6 <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d004      	beq.n	800560c <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 8005602:	2400      	movs	r4, #0
}
 8005604:	4620      	mov	r0, r4
 8005606:	b016      	add	sp, #88	; 0x58
 8005608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 800560c:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 800560e:	2f01      	cmp	r7, #1
 8005610:	d1f7      	bne.n	8005602 <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 8005612:	6828      	ldr	r0, [r5, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 8005618:	4631      	mov	r1, r6
 800561a:	f001 fd65 	bl	80070e8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 800561e:	4604      	mov	r4, r0
 8005620:	2800      	cmp	r0, #0
 8005622:	d1ef      	bne.n	8005604 <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 8005628:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800562c:	2360      	movs	r3, #96	; 0x60
 800562e:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005630:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005632:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005634:	4669      	mov	r1, sp
 8005636:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005638:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800563a:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 800563c:	f001 fd42 	bl	80070c4 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 8005640:	492a      	ldr	r1, [pc, #168]	; (80056ec <HAL_SDEx_HighSpeed+0x110>)
 8005642:	6828      	ldr	r0, [r5, #0]
 8005644:	f001 ff4d 	bl	80074e2 <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8005648:	4604      	mov	r4, r0
 800564a:	2800      	cmp	r0, #0
 800564c:	d1da      	bne.n	8005604 <HAL_SDEx_HighSpeed+0x28>
 800564e:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005650:	f240 592a 	movw	r9, #1322	; 0x52a
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005658:	ea12 0f09 	tst.w	r2, r9
 800565c:	d005      	beq.n	800566a <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800565e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005660:	0710      	lsls	r0, r2, #28
 8005662:	d51e      	bpl.n	80056a2 <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005664:	2208      	movs	r2, #8
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8005668:	e7cc      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	041f      	lsls	r7, r3, #16
 800566e:	d50a      	bpl.n	8005686 <HAL_SDEx_HighSpeed+0xaa>
 8005670:	1f37      	subs	r7, r6, #4
 8005672:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005676:	6828      	ldr	r0, [r5, #0]
 8005678:	f001 fc60 	bl	8006f3c <SDMMC_ReadFIFO>
 800567c:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 8005680:	4557      	cmp	r7, sl
 8005682:	d1f8      	bne.n	8005676 <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 8005684:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8005686:	f7fb fccb 	bl	8001020 <HAL_GetTick>
 800568a:	eba0 0008 	sub.w	r0, r0, r8
 800568e:	3001      	adds	r0, #1
 8005690:	d1e0      	bne.n	8005654 <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005692:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005696:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005698:	2301      	movs	r3, #1
 800569a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 800569e:	2403      	movs	r4, #3
 80056a0:	e7b0      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80056a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a4:	0791      	lsls	r1, r2, #30
 80056a6:	d502      	bpl.n	80056ae <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80056a8:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80056aa:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 80056ac:	e7aa      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80056ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b0:	0692      	lsls	r2, r2, #26
 80056b2:	d501      	bpl.n	80056b8 <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80056b4:	2420      	movs	r4, #32
 80056b6:	e7f8      	b.n	80056aa <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056b8:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <HAL_SDEx_HighSpeed+0x114>)
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 80056bc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80056c0:	079b      	lsls	r3, r3, #30
 80056c2:	d502      	bpl.n	80056ca <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80056c4:	2001      	movs	r0, #1
 80056c6:	f7ff ff88 	bl	80055da <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ce:	6828      	ldr	r0, [r5, #0]
 80056d0:	f001 fd0a 	bl	80070e8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d094      	beq.n	8005602 <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 80056d8:	2401      	movs	r4, #1
 80056da:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80056de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80056e0:	4318      	orrs	r0, r3
 80056e2:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 80056e4:	e78e      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80056e6:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80056ea:	e78b      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
 80056ec:	80ffff01 	.word	0x80ffff01
 80056f0:	18000f3a 	.word	0x18000f3a

080056f4 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 80056f4:	4770      	bx	lr

080056f6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 80056f6:	4770      	bx	lr

080056f8 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 80056f8:	4770      	bx	lr

080056fa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80056fa:	4770      	bx	lr

080056fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056fe:	4604      	mov	r4, r0
 8005700:	2800      	cmp	r0, #0
 8005702:	d04a      	beq.n	800579a <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005704:	2300      	movs	r3, #0
 8005706:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005708:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800570c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005710:	b91b      	cbnz	r3, 800571a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005712:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005716:	f019 fb27 	bl	801ed68 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800571a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800571c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800571e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005722:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005724:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800572a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800572e:	600b      	str	r3, [r1, #0]
 8005730:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005734:	d92e      	bls.n	8005794 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005736:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005738:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800573c:	bf18      	it	ne
 800573e:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005742:	b92b      	cbnz	r3, 8005750 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005744:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005748:	bf8c      	ite	hi
 800574a:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800574c:	2301      	movls	r3, #1
 800574e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005750:	68a6      	ldr	r6, [r4, #8]
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	69a5      	ldr	r5, [r4, #24]
 8005756:	4333      	orrs	r3, r6
 8005758:	6926      	ldr	r6, [r4, #16]
 800575a:	4333      	orrs	r3, r6
 800575c:	6966      	ldr	r6, [r4, #20]
 800575e:	4333      	orrs	r3, r6
 8005760:	69e6      	ldr	r6, [r4, #28]
 8005762:	4333      	orrs	r3, r6
 8005764:	6a26      	ldr	r6, [r4, #32]
 8005766:	4333      	orrs	r3, r6
 8005768:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800576a:	4333      	orrs	r3, r6
 800576c:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8005770:	4333      	orrs	r3, r6
 8005772:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005776:	431a      	orrs	r2, r3
 8005778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800577a:	0c2d      	lsrs	r5, r5, #16
 800577c:	431a      	orrs	r2, r3
 800577e:	f005 0504 	and.w	r5, r5, #4
 8005782:	432a      	orrs	r2, r5
 8005784:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005786:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005788:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800578a:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800578e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 8005792:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005794:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005798:	e7d0      	b.n	800573c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800579a:	2001      	movs	r0, #1
}
 800579c:	bd70      	pop	{r4, r5, r6, pc}

0800579e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800579e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a2:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80057a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 80057ac:	2b01      	cmp	r3, #1
{
 80057ae:	4604      	mov	r4, r0
 80057b0:	460e      	mov	r6, r1
 80057b2:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80057b4:	d07d      	beq.n	80058b2 <HAL_SPI_TransmitReceive+0x114>
 80057b6:	2301      	movs	r3, #1
 80057b8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fb fc30 	bl	8001020 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057c0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c4:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 80057c6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ca:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057cc:	bf1c      	itt	ne
 80057ce:	2305      	movne	r3, #5
 80057d0:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80057d8:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80057dc:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 80057de:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e0:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 80057e2:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057e8:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057ea:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 80057ec:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ee:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 80057f0:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b95b      	cbnz	r3, 8005810 <HAL_SPI_TransmitReceive+0x72>
 80057f8:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80057fc:	b280      	uxth	r0, r0
 80057fe:	b938      	cbnz	r0, 8005810 <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 8005800:	2301      	movs	r3, #1
 8005802:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005806:	2300      	movs	r3, #0
 8005808:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800580c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005810:	b195      	cbz	r5, 8005838 <HAL_SPI_TransmitReceive+0x9a>
 8005812:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	b17b      	cbz	r3, 8005838 <HAL_SPI_TransmitReceive+0x9a>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	0791      	lsls	r1, r2, #30
 800581e:	d50b      	bpl.n	8005838 <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 8005820:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005822:	b292      	uxth	r2, r2
 8005824:	2a01      	cmp	r2, #1
 8005826:	d932      	bls.n	800588e <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005828:	f836 2b02 	ldrh.w	r2, [r6], #2
 800582c:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800582e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005830:	3b02      	subs	r3, #2
 8005832:	b29b      	uxth	r3, r3
 8005834:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005836:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005838:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	b1db      	cbz	r3, 8005878 <HAL_SPI_TransmitReceive+0xda>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	07d2      	lsls	r2, r2, #31
 8005846:	d517      	bpl.n	8005878 <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 8005848:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800584c:	b292      	uxth	r2, r2
 800584e:	2a01      	cmp	r2, #1
 8005850:	d925      	bls.n	800589e <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 8005858:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800585c:	3a02      	subs	r2, #2
 800585e:	b292      	uxth	r2, r2
 8005860:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005864:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005868:	b292      	uxth	r2, r2
 800586a:	2a01      	cmp	r2, #1
 800586c:	d803      	bhi.n	8005876 <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005874:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8005876:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005878:	f1b8 3fff 	cmp.w	r8, #4294967295
 800587c:	d0b9      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x54>
 800587e:	f7fb fbcf 	bl	8001020 <HAL_GetTick>
 8005882:	eba0 0009 	sub.w	r0, r0, r9
 8005886:	4580      	cmp	r8, r0
 8005888:	d8b3      	bhi.n	80057f2 <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 800588a:	2003      	movs	r0, #3
 800588c:	e7b8      	b.n	8005800 <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800588e:	7832      	ldrb	r2, [r6, #0]
 8005890:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005892:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005894:	3b01      	subs	r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800589a:	3601      	adds	r6, #1
 800589c:	e7cb      	b.n	8005836 <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800589e:	7b1b      	ldrb	r3, [r3, #12]
 80058a0:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 80058a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ae:	3701      	adds	r7, #1
 80058b0:	e7e1      	b.n	8005876 <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 80058b2:	2002      	movs	r0, #2
  return errorcode;
}
 80058b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080058b8 <HAL_SPI_ErrorCallback>:
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80058bc:	6803      	ldr	r3, [r0, #0]
{
 80058be:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80058c0:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80058c2:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80058c4:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80058c8:	2d01      	cmp	r5, #1
{
 80058ca:	b085      	sub	sp, #20
 80058cc:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80058ce:	d105      	bne.n	80058dc <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80058d0:	064d      	lsls	r5, r1, #25
 80058d2:	d503      	bpl.n	80058dc <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 80058d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 80058d6:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 80058d8:	b005      	add	sp, #20
 80058da:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80058dc:	0795      	lsls	r5, r2, #30
 80058de:	d504      	bpl.n	80058ea <HAL_SPI_IRQHandler+0x2e>
 80058e0:	0608      	lsls	r0, r1, #24
 80058e2:	d502      	bpl.n	80058ea <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80058e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058e6:	4620      	mov	r0, r4
 80058e8:	e7f5      	b.n	80058d6 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80058ea:	f412 7fb0 	tst.w	r2, #352	; 0x160
 80058ee:	d0f3      	beq.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
 80058f0:	068d      	lsls	r5, r1, #26
 80058f2:	d5f1      	bpl.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 80058f4:	0650      	lsls	r0, r2, #25
 80058f6:	d50f      	bpl.n	8005918 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058f8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80058fc:	2803      	cmp	r0, #3
 80058fe:	f04f 0500 	mov.w	r5, #0
 8005902:	d041      	beq.n	8005988 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005904:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005906:	f040 0004 	orr.w	r0, r0, #4
 800590a:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800590c:	9500      	str	r5, [sp, #0]
 800590e:	68d8      	ldr	r0, [r3, #12]
 8005910:	9000      	str	r0, [sp, #0]
 8005912:	6898      	ldr	r0, [r3, #8]
 8005914:	9000      	str	r0, [sp, #0]
 8005916:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005918:	0695      	lsls	r5, r2, #26
 800591a:	d50c      	bpl.n	8005936 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800591c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800591e:	f040 0001 	orr.w	r0, r0, #1
 8005922:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005924:	2000      	movs	r0, #0
 8005926:	9002      	str	r0, [sp, #8]
 8005928:	6898      	ldr	r0, [r3, #8]
 800592a:	9002      	str	r0, [sp, #8]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005932:	6018      	str	r0, [r3, #0]
 8005934:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8005936:	05d0      	lsls	r0, r2, #23
 8005938:	d508      	bpl.n	800594c <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800593a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800593c:	f042 0208 	orr.w	r2, r2, #8
 8005940:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005942:	2200      	movs	r2, #0
 8005944:	9203      	str	r2, [sp, #12]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	9203      	str	r2, [sp, #12]
 800594a:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800594c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800594e:	2a00      	cmp	r2, #0
 8005950:	d0c2      	beq.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005958:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800595a:	2201      	movs	r2, #1
 800595c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005960:	078a      	lsls	r2, r1, #30
 8005962:	d018      	beq.n	8005996 <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005964:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005966:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005968:	f022 0203 	bic.w	r2, r2, #3
 800596c:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800596e:	b118      	cbz	r0, 8005978 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_SPI_IRQHandler+0xe4>)
 8005972:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005974:	f7fc f8f3 	bl	8001b5e <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8005978:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800597a:	2800      	cmp	r0, #0
 800597c:	d0ac      	beq.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <HAL_SPI_IRQHandler+0xe4>)
 8005980:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005982:	f7fc f8ec 	bl	8001b5e <HAL_DMA_Abort_IT>
 8005986:	e7a7      	b.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005988:	9501      	str	r5, [sp, #4]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	9201      	str	r2, [sp, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	9b01      	ldr	r3, [sp, #4]
        return;
 8005994:	e7a0      	b.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8005996:	4620      	mov	r0, r4
 8005998:	f7ff ff8e 	bl	80058b8 <HAL_SPI_ErrorCallback>
 800599c:	e79c      	b.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
 800599e:	bf00      	nop
 80059a0:	080059a5 	.word	0x080059a5

080059a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80059ae:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 80059b0:	f7ff ff82 	bl	80058b8 <HAL_SPI_ErrorCallback>
 80059b4:	bd08      	pop	{r3, pc}
	...

080059b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b8:	6a03      	ldr	r3, [r0, #32]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c0:	6a03      	ldr	r3, [r0, #32]
{
 80059c2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80059d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80059d6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80059da:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059dc:	4d1b      	ldr	r5, [pc, #108]	; (8005a4c <TIM_OC1_SetConfig+0x94>)
 80059de:	42a8      	cmp	r0, r5
 80059e0:	d00f      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059e6:	42a8      	cmp	r0, r5
 80059e8:	d00b      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059ea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80059ee:	42a8      	cmp	r0, r5
 80059f0:	d007      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059f6:	42a8      	cmp	r0, r5
 80059f8:	d003      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059fe:	42a8      	cmp	r0, r5
 8005a00:	d11e      	bne.n	8005a40 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a02:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a04:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005a08:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	4d10      	ldr	r5, [pc, #64]	; (8005a4c <TIM_OC1_SetConfig+0x94>)
 8005a0c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a12:	d00f      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a18:	42a8      	cmp	r0, r5
 8005a1a:	d00b      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a1c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005a20:	42a8      	cmp	r0, r5
 8005a22:	d007      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a28:	42a8      	cmp	r0, r5
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a30:	42a8      	cmp	r0, r5
 8005a32:	d105      	bne.n	8005a40 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a34:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a38:	698e      	ldr	r6, [r1, #24]
 8005a3a:	694c      	ldr	r4, [r1, #20]
 8005a3c:	4334      	orrs	r4, r6
 8005a3e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a42:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a44:	684a      	ldr	r2, [r1, #4]
 8005a46:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a48:	6203      	str	r3, [r0, #32]
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	40012c00 	.word	0x40012c00

08005a50 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a50:	6a03      	ldr	r3, [r0, #32]
 8005a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a56:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a58:	6a03      	ldr	r3, [r0, #32]
{
 8005a5a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a66:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005a6a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a6c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a72:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a76:	4d16      	ldr	r5, [pc, #88]	; (8005ad0 <TIM_OC3_SetConfig+0x80>)
 8005a78:	42a8      	cmp	r0, r5
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC3_SetConfig+0x34>
 8005a7c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a80:	42a8      	cmp	r0, r5
 8005a82:	d10d      	bne.n	8005aa0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a84:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	4d10      	ldr	r5, [pc, #64]	; (8005ad0 <TIM_OC3_SetConfig+0x80>)
 8005a90:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	d00e      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005a98:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a9c:	42a8      	cmp	r0, r5
 8005a9e:	d00a      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005aa0:	4d0c      	ldr	r5, [pc, #48]	; (8005ad4 <TIM_OC3_SetConfig+0x84>)
 8005aa2:	42a8      	cmp	r0, r5
 8005aa4:	d007      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005aa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005aaa:	42a8      	cmp	r0, r5
 8005aac:	d003      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005aae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ab2:	42a8      	cmp	r0, r5
 8005ab4:	d106      	bne.n	8005ac4 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ab6:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aba:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005abc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005abe:	4334      	orrs	r4, r6
 8005ac0:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ac8:	684a      	ldr	r2, [r1, #4]
 8005aca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	6203      	str	r3, [r0, #32]
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40014000 	.word	0x40014000

08005ad8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad8:	6a03      	ldr	r3, [r0, #32]
 8005ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ade:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae0:	6a03      	ldr	r3, [r0, #32]
{
 8005ae2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005aee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005afc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b00:	4d0e      	ldr	r5, [pc, #56]	; (8005b3c <TIM_OC4_SetConfig+0x64>)
 8005b02:	42a8      	cmp	r0, r5
 8005b04:	d00f      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b06:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b0a:	42a8      	cmp	r0, r5
 8005b0c:	d00b      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b0e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b12:	42a8      	cmp	r0, r5
 8005b14:	d007      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b1a:	42a8      	cmp	r0, r5
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b22:	42a8      	cmp	r0, r5
 8005b24:	d104      	bne.n	8005b30 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b26:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b28:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b2c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b32:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b34:	684a      	ldr	r2, [r1, #4]
 8005b36:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b38:	6203      	str	r3, [r0, #32]
 8005b3a:	bd30      	pop	{r4, r5, pc}
 8005b3c:	40012c00 	.word	0x40012c00

08005b40 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b40:	6a03      	ldr	r3, [r0, #32]
 8005b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b46:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b48:	6a03      	ldr	r3, [r0, #32]
{
 8005b4a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005b5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005b5e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b62:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b66:	4d0f      	ldr	r5, [pc, #60]	; (8005ba4 <TIM_OC5_SetConfig+0x64>)
 8005b68:	42a8      	cmp	r0, r5
 8005b6a:	d00f      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b6c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b70:	42a8      	cmp	r0, r5
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b74:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b78:	42a8      	cmp	r0, r5
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b80:	42a8      	cmp	r0, r5
 8005b82:	d003      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b88:	42a8      	cmp	r0, r5
 8005b8a:	d104      	bne.n	8005b96 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b8c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b8e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b92:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b98:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b9a:	684a      	ldr	r2, [r1, #4]
 8005b9c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	6203      	str	r3, [r0, #32]
 8005ba0:	bd30      	pop	{r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40012c00 	.word	0x40012c00

08005ba8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ba8:	6a03      	ldr	r3, [r0, #32]
 8005baa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb0:	6a03      	ldr	r3, [r0, #32]
{
 8005bb2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bb6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005bbe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bc6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bcc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	4d0e      	ldr	r5, [pc, #56]	; (8005c0c <TIM_OC6_SetConfig+0x64>)
 8005bd2:	42a8      	cmp	r0, r5
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005bd6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bda:	42a8      	cmp	r0, r5
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005bde:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005be2:	42a8      	cmp	r0, r5
 8005be4:	d007      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005be6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bea:	42a8      	cmp	r0, r5
 8005bec:	d003      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005bee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bf2:	42a8      	cmp	r0, r5
 8005bf4:	d104      	bne.n	8005c00 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bf6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bf8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bfc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c02:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c04:	684a      	ldr	r2, [r1, #4]
 8005c06:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	6203      	str	r3, [r0, #32]
 8005c0a:	bd30      	pop	{r4, r5, pc}
 8005c0c:	40012c00 	.word	0x40012c00

08005c10 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	2302      	movs	r3, #2
{
 8005c12:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c18:	6803      	ldr	r3, [r0, #0]
 8005c1a:	4c09      	ldr	r4, [pc, #36]	; (8005c40 <HAL_TIM_Base_Start+0x30>)
 8005c1c:	6899      	ldr	r1, [r3, #8]
 8005c1e:	4021      	ands	r1, r4
 8005c20:	2906      	cmp	r1, #6
 8005c22:	d008      	beq.n	8005c36 <HAL_TIM_Base_Start+0x26>
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	4022      	ands	r2, r4
 8005c28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005c2c:	bf1e      	ittt	ne
 8005c2e:	681a      	ldrne	r2, [r3, #0]
 8005c30:	f042 0201 	orrne.w	r2, r2, #1
 8005c34:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	bd10      	pop	{r4, pc}
 8005c40:	00010007 	.word	0x00010007

08005c44 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c44:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c46:	480a      	ldr	r0, [pc, #40]	; (8005c70 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c50:	6899      	ldr	r1, [r3, #8]
 8005c52:	4001      	ands	r1, r0
 8005c54:	2906      	cmp	r1, #6
 8005c56:	d008      	beq.n	8005c6a <HAL_TIM_Base_Start_IT+0x26>
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	4002      	ands	r2, r0
 8005c5c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005c60:	bf1e      	ittt	ne
 8005c62:	681a      	ldrne	r2, [r3, #0]
 8005c64:	f042 0201 	orrne.w	r2, r2, #1
 8005c68:	601a      	strne	r2, [r3, #0]
}
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	00010007 	.word	0x00010007

08005c74 <HAL_TIM_PeriodElapsedCallback>:
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIM_OC_DelayElapsedCallback>:
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_IC_CaptureCallback>:
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_PWM_PulseFinishedCallback>:
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIM_TriggerCallback>:
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c7e:	6803      	ldr	r3, [r0, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	0791      	lsls	r1, r2, #30
{
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c88:	d50f      	bpl.n	8005caa <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	0792      	lsls	r2, r2, #30
 8005c8e:	d50c      	bpl.n	8005caa <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c90:	f06f 0202 	mvn.w	r2, #2
 8005c94:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c96:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c98:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c9c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9e:	f000 8085 	beq.w	8005dac <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	f7ff ffe9 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	0752      	lsls	r2, r2, #29
 8005cb0:	d510      	bpl.n	8005cd4 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	0750      	lsls	r0, r2, #29
 8005cb6:	d50d      	bpl.n	8005cd4 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb8:	f06f 0204 	mvn.w	r2, #4
 8005cbc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cbe:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cca:	d075      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ccc:	f7ff ffd4 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	0711      	lsls	r1, r2, #28
 8005cda:	d50f      	bpl.n	8005cfc <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	0712      	lsls	r2, r2, #28
 8005ce0:	d50c      	bpl.n	8005cfc <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce2:	f06f 0208 	mvn.w	r2, #8
 8005ce6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ce8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cea:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cec:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cee:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf2:	d067      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	f7ff ffc0 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	06d0      	lsls	r0, r2, #27
 8005d02:	d510      	bpl.n	8005d26 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	06d1      	lsls	r1, r2, #27
 8005d08:	d50d      	bpl.n	8005d26 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d0a:	f06f 0210 	mvn.w	r2, #16
 8005d0e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d10:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d12:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d14:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d18:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	d058      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	f7ff ffab 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	2300      	movs	r3, #0
 8005d24:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	07d2      	lsls	r2, r2, #31
 8005d2c:	d508      	bpl.n	8005d40 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	07d0      	lsls	r0, r2, #31
 8005d32:	d505      	bpl.n	8005d40 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d34:	f06f 0201 	mvn.w	r2, #1
 8005d38:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff ff9a 	bl	8005c74 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	0611      	lsls	r1, r2, #24
 8005d46:	d508      	bpl.n	8005d5a <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	0612      	lsls	r2, r2, #24
 8005d4c:	d505      	bpl.n	8005d5a <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d52:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 fb98 	bl	800648a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	05d0      	lsls	r0, r2, #23
 8005d60:	d508      	bpl.n	8005d74 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	0611      	lsls	r1, r2, #24
 8005d66:	d505      	bpl.n	8005d74 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d6c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fb8c 	bl	800648c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	0652      	lsls	r2, r2, #25
 8005d7a:	d508      	bpl.n	8005d8e <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	0650      	lsls	r0, r2, #25
 8005d80:	d505      	bpl.n	8005d8e <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d86:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff ff77 	bl	8005c7c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	0691      	lsls	r1, r2, #26
 8005d94:	d522      	bpl.n	8005ddc <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	0692      	lsls	r2, r2, #26
 8005d9a:	d51f      	bpl.n	8005ddc <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d9c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005da0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da2:	611a      	str	r2, [r3, #16]
}
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005da8:	f000 bb6e 	b.w	8006488 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dac:	f7ff ff63 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff ff62 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005db6:	e776      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db8:	f7ff ff5d 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7ff ff5c 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005dc2:	e785      	b.n	8005cd0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc4:	f7ff ff57 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7ff ff56 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005dce:	e793      	b.n	8005cf8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd0:	f7ff ff51 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f7ff ff50 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005dda:	e7a2      	b.n	8005d22 <HAL_TIM_IRQHandler+0xa4>
 8005ddc:	bd10      	pop	{r4, pc}
	...

08005de0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de0:	4a30      	ldr	r2, [pc, #192]	; (8005ea4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005de2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de4:	4290      	cmp	r0, r2
 8005de6:	d012      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005de8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005dec:	d00f      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005dee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005df2:	4290      	cmp	r0, r2
 8005df4:	d00b      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dfa:	4290      	cmp	r0, r2
 8005dfc:	d007      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e02:	4290      	cmp	r0, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005e06:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005e0a:	4290      	cmp	r0, r2
 8005e0c:	d119      	bne.n	8005e42 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005e0e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e14:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	4a23      	ldr	r2, [pc, #140]	; (8005ea4 <TIM_Base_SetConfig+0xc4>)
 8005e18:	4290      	cmp	r0, r2
 8005e1a:	d01d      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e20:	d01a      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e26:	4290      	cmp	r0, r2
 8005e28:	d016      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e2e:	4290      	cmp	r0, r2
 8005e30:	d012      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e36:	4290      	cmp	r0, r2
 8005e38:	d00e      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e3a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005e3e:	4290      	cmp	r0, r2
 8005e40:	d00a      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e42:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <TIM_Base_SetConfig+0xc8>)
 8005e44:	4290      	cmp	r0, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e4c:	4290      	cmp	r0, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e54:	4290      	cmp	r0, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e58:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e60:	694a      	ldr	r2, [r1, #20]
 8005e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e66:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005e68:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e6a:	688b      	ldr	r3, [r1, #8]
 8005e6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e6e:	680b      	ldr	r3, [r1, #0]
 8005e70:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <TIM_Base_SetConfig+0xc4>)
 8005e74:	4298      	cmp	r0, r3
 8005e76:	d00f      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	4298      	cmp	r0, r3
 8005e7e:	d00b      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e80:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005e84:	4298      	cmp	r0, r3
 8005e86:	d007      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8c:	4298      	cmp	r0, r3
 8005e8e:	d003      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e94:	4298      	cmp	r0, r3
 8005e96:	d101      	bne.n	8005e9c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005e98:	690b      	ldr	r3, [r1, #16]
 8005e9a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	6143      	str	r3, [r0, #20]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40014000 	.word	0x40014000

08005eac <HAL_TIM_Base_Init>:
{
 8005eac:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005eae:	4604      	mov	r4, r0
 8005eb0:	b1a0      	cbz	r0, 8005edc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005eb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eba:	b91b      	cbnz	r3, 8005ec4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005ebc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005ec0:	f019 f820 	bl	801ef04 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	1d21      	adds	r1, r4, #4
 8005ece:	f7ff ff87 	bl	8005de0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ed8:	2000      	movs	r0, #0
 8005eda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005edc:	2001      	movs	r0, #1
}
 8005ede:	bd10      	pop	{r4, pc}

08005ee0 <HAL_TIM_OC_Init>:
{
 8005ee0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	b1a0      	cbz	r0, 8005f10 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eee:	b91b      	cbnz	r3, 8005ef8 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005ef0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005ef4:	f019 f868 	bl	801efc8 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005efe:	6820      	ldr	r0, [r4, #0]
 8005f00:	1d21      	adds	r1, r4, #4
 8005f02:	f7ff ff6d 	bl	8005de0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
}
 8005f12:	bd10      	pop	{r4, pc}

08005f14 <HAL_TIM_PWM_Init>:
{
 8005f14:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005f16:	4604      	mov	r4, r0
 8005f18:	b1a0      	cbz	r0, 8005f44 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f22:	b91b      	cbnz	r3, 8005f2c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005f24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005f28:	f019 f93a 	bl	801f1a0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	1d21      	adds	r1, r4, #4
 8005f36:	f7ff ff53 	bl	8005de0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005f40:	2000      	movs	r0, #0
 8005f42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f44:	2001      	movs	r0, #1
}
 8005f46:	bd10      	pop	{r4, pc}

08005f48 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	f023 0310 	bic.w	r3, r3, #16
 8005f4e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005f50:	6a03      	ldr	r3, [r0, #32]
{
 8005f52:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005f54:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005f56:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f5a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005f5e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f66:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005f68:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f70:	4d16      	ldr	r5, [pc, #88]	; (8005fcc <TIM_OC2_SetConfig+0x84>)
 8005f72:	42a8      	cmp	r0, r5
 8005f74:	d003      	beq.n	8005f7e <TIM_OC2_SetConfig+0x36>
 8005f76:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f7a:	42a8      	cmp	r0, r5
 8005f7c:	d10d      	bne.n	8005f9a <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f7e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f84:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f88:	4d10      	ldr	r5, [pc, #64]	; (8005fcc <TIM_OC2_SetConfig+0x84>)
 8005f8a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f90:	d00e      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005f92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f96:	42a8      	cmp	r0, r5
 8005f98:	d00a      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	; (8005fd0 <TIM_OC2_SetConfig+0x88>)
 8005f9c:	42a8      	cmp	r0, r5
 8005f9e:	d007      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005fa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fa4:	42a8      	cmp	r0, r5
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005fa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fac:	42a8      	cmp	r0, r5
 8005fae:	d106      	bne.n	8005fbe <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb0:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fb6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb8:	4334      	orrs	r4, r6
 8005fba:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005fbe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005fc0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005fc2:	684a      	ldr	r2, [r1, #4]
 8005fc4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005fc6:	6203      	str	r3, [r0, #32]
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40014000 	.word	0x40014000

08005fd4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005fd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
{
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	4604      	mov	r4, r0
 8005fde:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005fe2:	d010      	beq.n	8006006 <HAL_TIM_OC_ConfigChannel+0x32>
 8005fe4:	2301      	movs	r3, #1
  switch (Channel)
 8005fe6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005fe8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005ff0:	d01c      	beq.n	800602c <HAL_TIM_OC_ConfigChannel+0x58>
 8005ff2:	d809      	bhi.n	8006008 <HAL_TIM_OC_ConfigChannel+0x34>
 8005ff4:	b192      	cbz	r2, 800601c <HAL_TIM_OC_ConfigChannel+0x48>
 8005ff6:	2a04      	cmp	r2, #4
 8005ff8:	d014      	beq.n	8006024 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8005ffa:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005ffc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006002:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006006:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006008:	2a10      	cmp	r2, #16
 800600a:	d013      	beq.n	8006034 <HAL_TIM_OC_ConfigChannel+0x60>
 800600c:	2a14      	cmp	r2, #20
 800600e:	d015      	beq.n	800603c <HAL_TIM_OC_ConfigChannel+0x68>
 8006010:	2a0c      	cmp	r2, #12
 8006012:	d1f2      	bne.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	f7ff fd5f 	bl	8005ad8 <TIM_OC4_SetConfig>
      break;
 800601a:	e7ee      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	f7ff fccb 	bl	80059b8 <TIM_OC1_SetConfig>
      break;
 8006022:	e7ea      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	f7ff ff8f 	bl	8005f48 <TIM_OC2_SetConfig>
      break;
 800602a:	e7e6      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	f7ff fd0f 	bl	8005a50 <TIM_OC3_SetConfig>
      break;
 8006032:	e7e2      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	f7ff fd83 	bl	8005b40 <TIM_OC5_SetConfig>
      break;
 800603a:	e7de      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	f7ff fdb3 	bl	8005ba8 <TIM_OC6_SetConfig>
      break;
 8006042:	e7da      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>

08006044 <HAL_TIM_PWM_ConfigChannel>:
{
 8006044:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006046:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
{
 800604c:	4604      	mov	r4, r0
 800604e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006052:	d010      	beq.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006054:	2301      	movs	r3, #1
  switch (Channel)
 8006056:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006058:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8006060:	d043      	beq.n	80060ea <HAL_TIM_PWM_ConfigChannel+0xa6>
 8006062:	d809      	bhi.n	8006078 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006064:	b1fa      	cbz	r2, 80060a6 <HAL_TIM_PWM_ConfigChannel+0x62>
 8006066:	2a04      	cmp	r2, #4
 8006068:	d02e      	beq.n	80060c8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800606a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800606c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800606e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006072:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006076:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8006078:	2a10      	cmp	r2, #16
 800607a:	d047      	beq.n	800610c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800607c:	2a14      	cmp	r2, #20
 800607e:	d056      	beq.n	800612e <HAL_TIM_PWM_ConfigChannel+0xea>
 8006080:	2a0c      	cmp	r2, #12
 8006082:	d1f2      	bne.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	f7ff fd27 	bl	8005ad8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800608c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800609c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80060a4:	e030      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	f7ff fc86 	bl	80059b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	f022 0204 	bic.w	r2, r2, #4
 80060be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060c4:	619a      	str	r2, [r3, #24]
      break;
 80060c6:	e7d0      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	f7ff ff3d 	bl	8005f48 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80060e8:	e7ec      	b.n	80060c4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ea:	6820      	ldr	r0, [r4, #0]
 80060ec:	f7ff fcb0 	bl	8005a50 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060f4:	69da      	ldr	r2, [r3, #28]
 80060f6:	f042 0208 	orr.w	r2, r2, #8
 80060fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	f022 0204 	bic.w	r2, r2, #4
 8006102:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006108:	61da      	str	r2, [r3, #28]
      break;
 800610a:	e7ae      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	f7ff fd17 	bl	8005b40 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006112:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006114:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006116:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006118:	f042 0208 	orr.w	r2, r2, #8
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800611e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006120:	f022 0204 	bic.w	r2, r2, #4
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006128:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800612a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800612c:	e79d      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	f7ff fd3a 	bl	8005ba8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006134:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006136:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006146:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800614a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800614e:	e7ec      	b.n	800612a <HAL_TIM_PWM_ConfigChannel+0xe6>

08006150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006150:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006152:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006154:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006156:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800615a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800615e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006160:	6083      	str	r3, [r0, #8]
 8006162:	bd10      	pop	{r4, pc}

08006164 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006164:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
{
 800616a:	b570      	push	{r4, r5, r6, lr}
 800616c:	4604      	mov	r4, r0
 800616e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006172:	d017      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006178:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800617a:	2301      	movs	r3, #1
 800617c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006180:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006182:	4b48      	ldr	r3, [pc, #288]	; (80062a4 <HAL_TIM_ConfigClockSource+0x140>)
 8006184:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006186:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006188:	680b      	ldr	r3, [r1, #0]
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d072      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0x110>
 800618e:	d815      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x58>
 8006190:	2b10      	cmp	r3, #16
 8006192:	d00c      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x4a>
 8006194:	d807      	bhi.n	80061a6 <HAL_TIM_ConfigClockSource+0x42>
 8006196:	b153      	cbz	r3, 80061ae <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8006198:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800619a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800619c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80061a4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d001      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x4a>
 80061aa:	2b30      	cmp	r3, #48	; 0x30
 80061ac:	d1f4      	bne.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80061ae:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b8:	4313      	orrs	r3, r2
 80061ba:	e033      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d033      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0xc4>
 80061c0:	d81b      	bhi.n	80061fa <HAL_TIM_ConfigClockSource+0x96>
 80061c2:	2b50      	cmp	r3, #80	; 0x50
 80061c4:	d03f      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xe2>
 80061c6:	2b60      	cmp	r3, #96	; 0x60
 80061c8:	d1e6      	bne.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ca:	684d      	ldr	r5, [r1, #4]
 80061cc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ce:	6a01      	ldr	r1, [r0, #32]
 80061d0:	f021 0110 	bic.w	r1, r1, #16
 80061d4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80061d8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80061ea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80061ec:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80061ee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80061f8:	e014      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80061fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fe:	d00c      	beq.n	800621a <HAL_TIM_ConfigClockSource+0xb6>
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006204:	d1c8      	bne.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006206:	68cb      	ldr	r3, [r1, #12]
 8006208:	684a      	ldr	r2, [r1, #4]
 800620a:	6889      	ldr	r1, [r1, #8]
 800620c:	f7ff ffa0 	bl	8006150 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	6893      	ldr	r3, [r2, #8]
 8006214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006218:	e013      	b.n	8006242 <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800621a:	6883      	ldr	r3, [r0, #8]
 800621c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006220:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006224:	6083      	str	r3, [r0, #8]
 8006226:	e7b7      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006228:	68cb      	ldr	r3, [r1, #12]
 800622a:	684a      	ldr	r2, [r1, #4]
 800622c:	6889      	ldr	r1, [r1, #8]
 800622e:	f7ff ff8f 	bl	8006150 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800623e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006242:	6093      	str	r3, [r2, #8]
      break;
 8006244:	e7a8      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006246:	684a      	ldr	r2, [r1, #4]
 8006248:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800624a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624c:	6a05      	ldr	r5, [r0, #32]
 800624e:	f025 0501 	bic.w	r5, r5, #1
 8006252:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006254:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006256:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800625a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800625e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006262:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006264:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006266:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006268:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8006272:	e7d7      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006274:	684a      	ldr	r2, [r1, #4]
 8006276:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006278:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	6a05      	ldr	r5, [r0, #32]
 800627c:	f025 0501 	bic.w	r5, r5, #1
 8006280:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006282:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006284:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800628c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006290:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006292:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006294:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006296:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80062a0:	e7c0      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
 80062a2:	bf00      	nop
 80062a4:	fffe0088 	.word	0xfffe0088

080062a8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062aa:	f001 011f 	and.w	r1, r1, #31
{
 80062ae:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062b0:	2401      	movs	r4, #1
 80062b2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80062b4:	ea23 0304 	bic.w	r3, r3, r4
 80062b8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062ba:	6a03      	ldr	r3, [r0, #32]
 80062bc:	408a      	lsls	r2, r1
 80062be:	431a      	orrs	r2, r3
 80062c0:	6202      	str	r2, [r0, #32]
 80062c2:	bd10      	pop	{r4, pc}

080062c4 <HAL_TIM_PWM_Start>:
{
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062c8:	2201      	movs	r2, #1
 80062ca:	6800      	ldr	r0, [r0, #0]
 80062cc:	f7ff ffec 	bl	80062a8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	4a14      	ldr	r2, [pc, #80]	; (8006324 <HAL_TIM_PWM_Start+0x60>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d01f      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062dc:	4293      	cmp	r3, r2
 80062de:	d01b      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062e0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d017      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00f      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80062f8:	6899      	ldr	r1, [r3, #8]
 80062fa:	480b      	ldr	r0, [pc, #44]	; (8006328 <HAL_TIM_PWM_Start+0x64>)
 80062fc:	4001      	ands	r1, r0
 80062fe:	2906      	cmp	r1, #6
 8006300:	d008      	beq.n	8006314 <HAL_TIM_PWM_Start+0x50>
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	4002      	ands	r2, r0
 8006306:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800630a:	d003      	beq.n	8006314 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
}
 8006314:	2000      	movs	r0, #0
 8006316:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8006318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800631a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800631e:	645a      	str	r2, [r3, #68]	; 0x44
 8006320:	e7ea      	b.n	80062f8 <HAL_TIM_PWM_Start+0x34>
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	00010007 	.word	0x00010007

0800632c <HAL_TIM_OC_Start>:
 800632c:	f7ff bfca 	b.w	80062c4 <HAL_TIM_PWM_Start>

08006330 <HAL_TIM_PWM_Stop>:
{
 8006330:	b510      	push	{r4, lr}
 8006332:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006334:	2200      	movs	r2, #0
 8006336:	6800      	ldr	r0, [r0, #0]
 8006338:	f7ff ffb6 	bl	80062a8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_TIM_PWM_Stop+0x78>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00f      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 8006344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 800634c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 8006354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 800635c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006360:	4293      	cmp	r3, r2
 8006362:	d10d      	bne.n	8006380 <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8006364:	6a19      	ldr	r1, [r3, #32]
 8006366:	f241 1211 	movw	r2, #4369	; 0x1111
 800636a:	4211      	tst	r1, r2
 800636c:	d108      	bne.n	8006380 <HAL_TIM_PWM_Stop+0x50>
 800636e:	6a19      	ldr	r1, [r3, #32]
 8006370:	f240 4244 	movw	r2, #1092	; 0x444
 8006374:	4211      	tst	r1, r2
 8006376:	bf02      	ittt	eq
 8006378:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800637a:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800637e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006380:	6a19      	ldr	r1, [r3, #32]
 8006382:	f241 1211 	movw	r2, #4369	; 0x1111
 8006386:	4211      	tst	r1, r2
 8006388:	d108      	bne.n	800639c <HAL_TIM_PWM_Stop+0x6c>
 800638a:	6a19      	ldr	r1, [r3, #32]
 800638c:	f240 4244 	movw	r2, #1092	; 0x444
 8006390:	4211      	tst	r1, r2
 8006392:	d103      	bne.n	800639c <HAL_TIM_PWM_Stop+0x6c>
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800639c:	2301      	movs	r3, #1
 800639e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80063a2:	2000      	movs	r0, #0
 80063a4:	bd10      	pop	{r4, pc}
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00

080063ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80063b0:	2b01      	cmp	r3, #1
{
 80063b2:	b530      	push	{r4, r5, lr}
 80063b4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80063b8:	d01f      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ba:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063bc:	4d10      	ldr	r5, [pc, #64]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80063be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063c2:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80063c4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80063c6:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063c8:	d003      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80063ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80063ce:	42aa      	cmp	r2, r5
 80063d0:	d103      	bne.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d8:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063da:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063dc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80063e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ea:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80063ee:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	2300      	movs	r3, #0
 80063f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80063fa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80063fc:	bd30      	pop	{r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00

08006404 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006404:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
{
 800640a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800640c:	d038      	beq.n	8006480 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800640e:	68cb      	ldr	r3, [r1, #12]
 8006410:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006412:	4c1c      	ldr	r4, [pc, #112]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006418:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800641a:	684a      	ldr	r2, [r1, #4]
 800641c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006420:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006422:	680a      	ldr	r2, [r1, #0]
 8006424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006428:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800642a:	690a      	ldr	r2, [r1, #16]
 800642c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006430:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006432:	694a      	ldr	r2, [r1, #20]
 8006434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006438:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800643a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800643c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006440:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006442:	698a      	ldr	r2, [r1, #24]
 8006444:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800644c:	6802      	ldr	r2, [r0, #0]
 800644e:	42a2      	cmp	r2, r4
 8006450:	d003      	beq.n	800645a <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8006452:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006456:	42a2      	cmp	r2, r4
 8006458:	d10c      	bne.n	8006474 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800645a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800645c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006460:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006464:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006466:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800646e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006472:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006474:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006476:	2300      	movs	r3, #0
 8006478:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800647c:	4618      	mov	r0, r3
 800647e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006480:	2002      	movs	r0, #2
}
 8006482:	bd10      	pop	{r4, pc}
 8006484:	40012c00 	.word	0x40012c00

08006488 <HAL_TIMEx_CommutationCallback>:
 8006488:	4770      	bx	lr

0800648a <HAL_TIMEx_BreakCallback>:
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800648c:	4770      	bx	lr

0800648e <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800648e:	6803      	ldr	r3, [r0, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006496:	601a      	str	r2, [r3, #0]
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a0:	2320      	movs	r3, #32
 80064a2:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	6703      	str	r3, [r0, #112]	; 0x70
 80064aa:	4770      	bx	lr

080064ac <HAL_UART_Transmit_DMA>:
{
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4604      	mov	r4, r0
 80064b0:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80064b2:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80064b6:	2a20      	cmp	r2, #32
 80064b8:	d12c      	bne.n	8006514 <HAL_UART_Transmit_DMA+0x68>
    if((pData == NULL ) || (Size == 0U))
 80064ba:	b349      	cbz	r1, 8006510 <HAL_UART_Transmit_DMA+0x64>
 80064bc:	b343      	cbz	r3, 8006510 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 80064be:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 80064c2:	2a01      	cmp	r2, #1
 80064c4:	d026      	beq.n	8006514 <HAL_UART_Transmit_DMA+0x68>
 80064c6:	2201      	movs	r2, #1
 80064c8:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064cc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 80064ce:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d2:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064d4:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064da:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064de:	4a0e      	ldr	r2, [pc, #56]	; (8006518 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 80064e0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->pTxBuffPtr  = pData;
 80064e4:	6521      	str	r1, [r4, #80]	; 0x50
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064e6:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064e8:	4a0c      	ldr	r2, [pc, #48]	; (800651c <HAL_UART_Transmit_DMA+0x70>)
 80064ea:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064ec:	4a0c      	ldr	r2, [pc, #48]	; (8006520 <HAL_UART_Transmit_DMA+0x74>)
 80064ee:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80064f0:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80064f2:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80064f4:	3228      	adds	r2, #40	; 0x28
 80064f6:	f7fb faf0 	bl	8001ada <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	2240      	movs	r2, #64	; 0x40
 80064fe:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006500:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8006502:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800650a:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800650c:	4628      	mov	r0, r5
 800650e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006510:	2001      	movs	r0, #1
 8006512:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8006514:	2002      	movs	r0, #2
}
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	08006527 	.word	0x08006527
 800651c:	08006557 	.word	0x08006557
 8006520:	08006563 	.word	0x08006563

08006524 <HAL_UART_TxCpltCallback>:
 8006524:	4770      	bx	lr

08006526 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006526:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006528:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800652a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f013 0320 	ands.w	r3, r3, #32
 8006532:	d10b      	bne.n	800654c <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0U;
 8006534:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006540:	609a      	str	r2, [r3, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 800654c:	4610      	mov	r0, r2
 800654e:	f7ff ffe9 	bl	8006524 <HAL_UART_TxCpltCallback>
 8006552:	bd08      	pop	{r3, pc}

08006554 <HAL_UART_TxHalfCpltCallback>:
 8006554:	4770      	bx	lr

08006556 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006556:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 8006558:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800655a:	f7ff fffb 	bl	8006554 <HAL_UART_TxHalfCpltCallback>
 800655e:	bd08      	pop	{r3, pc}

08006560 <HAL_UART_ErrorCallback>:
 8006560:	4770      	bx	lr

08006562 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006562:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8006564:	b508      	push	{r3, lr}
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006566:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 800656a:	2b21      	cmp	r3, #33	; 0x21
 800656c:	d10d      	bne.n	800658a <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800656e:	680b      	ldr	r3, [r1, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	0612      	lsls	r2, r2, #24
 8006574:	d509      	bpl.n	800658a <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 8006576:	2200      	movs	r2, #0
 8006578:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006582:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006584:	2320      	movs	r3, #32
 8006586:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800658a:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 800658e:	2b22      	cmp	r3, #34	; 0x22
 8006590:	d109      	bne.n	80065a6 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8006592:	680b      	ldr	r3, [r1, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	065b      	lsls	r3, r3, #25
 8006598:	d505      	bpl.n	80065a6 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80065a0:	4608      	mov	r0, r1
 80065a2:	f7ff ff74 	bl	800648e <UART_EndRxTransfer>
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065a6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80065aa:	f043 0310 	orr.w	r3, r3, #16
 80065ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 80065b2:	4608      	mov	r0, r1
 80065b4:	f7ff ffd4 	bl	8006560 <HAL_UART_ErrorCallback>
 80065b8:	bd08      	pop	{r3, pc}
	...

080065bc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065bc:	6802      	ldr	r2, [r0, #0]
 80065be:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065c0:	6811      	ldr	r1, [r2, #0]
{
 80065c2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80065c4:	071d      	lsls	r5, r3, #28
{
 80065c6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c8:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 80065ca:	d10b      	bne.n	80065e4 <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 80065cc:	069e      	lsls	r6, r3, #26
 80065ce:	d577      	bpl.n	80066c0 <HAL_UART_IRQHandler+0x104>
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 80065d0:	068d      	lsls	r5, r1, #26
 80065d2:	d401      	bmi.n	80065d8 <HAL_UART_IRQHandler+0x1c>
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 80065d4:	00c6      	lsls	r6, r0, #3
 80065d6:	d573      	bpl.n	80066c0 <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 80065d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80ac 	beq.w	8006738 <HAL_UART_IRQHandler+0x17c>
 80065e0:	4620      	mov	r0, r4
 80065e2:	e061      	b.n	80066a8 <HAL_UART_IRQHandler+0xec>
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 80065e4:	4e55      	ldr	r6, [pc, #340]	; (800673c <HAL_UART_IRQHandler+0x180>)
 80065e6:	4006      	ands	r6, r0
 80065e8:	d102      	bne.n	80065f0 <HAL_UART_IRQHandler+0x34>
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
 80065ea:	f411 7f90 	tst.w	r1, #288	; 0x120
 80065ee:	d067      	beq.n	80066c0 <HAL_UART_IRQHandler+0x104>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065f0:	07dd      	lsls	r5, r3, #31
 80065f2:	d509      	bpl.n	8006608 <HAL_UART_IRQHandler+0x4c>
 80065f4:	05cd      	lsls	r5, r1, #23
 80065f6:	d507      	bpl.n	8006608 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065f8:	2501      	movs	r5, #1
 80065fa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065fc:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006600:	f045 0501 	orr.w	r5, r5, #1
 8006604:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006608:	079d      	lsls	r5, r3, #30
 800660a:	d509      	bpl.n	8006620 <HAL_UART_IRQHandler+0x64>
 800660c:	07c5      	lsls	r5, r0, #31
 800660e:	d507      	bpl.n	8006620 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006610:	2502      	movs	r5, #2
 8006612:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006614:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006618:	f045 0504 	orr.w	r5, r5, #4
 800661c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006620:	075d      	lsls	r5, r3, #29
 8006622:	d509      	bpl.n	8006638 <HAL_UART_IRQHandler+0x7c>
 8006624:	07c5      	lsls	r5, r0, #31
 8006626:	d507      	bpl.n	8006638 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006628:	2504      	movs	r5, #4
 800662a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800662c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006630:	f045 0502 	orr.w	r5, r5, #2
 8006634:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006638:	071d      	lsls	r5, r3, #28
 800663a:	d509      	bpl.n	8006650 <HAL_UART_IRQHandler+0x94>
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 800663c:	068d      	lsls	r5, r1, #26
 800663e:	d400      	bmi.n	8006642 <HAL_UART_IRQHandler+0x86>
 8006640:	b136      	cbz	r6, 8006650 <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006642:	2508      	movs	r5, #8
 8006644:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006646:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800664a:	432a      	orrs	r2, r5
 800664c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006650:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006654:	2a00      	cmp	r2, #0
 8006656:	d06f      	beq.n	8006738 <HAL_UART_IRQHandler+0x17c>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006658:	069e      	lsls	r6, r3, #26
 800665a:	d507      	bpl.n	800666c <HAL_UART_IRQHandler+0xb0>
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 800665c:	068d      	lsls	r5, r1, #26
 800665e:	d401      	bmi.n	8006664 <HAL_UART_IRQHandler+0xa8>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8006660:	00c0      	lsls	r0, r0, #3
 8006662:	d503      	bpl.n	800666c <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006664:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006666:	b10b      	cbz	r3, 800666c <HAL_UART_IRQHandler+0xb0>
 8006668:	4620      	mov	r0, r4
 800666a:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800666c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006670:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8006672:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006674:	d404      	bmi.n	8006680 <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800667a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800667e:	d01a      	beq.n	80066b6 <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 8006680:	f7ff ff05 	bl	800648e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	0652      	lsls	r2, r2, #25
 800668a:	d510      	bpl.n	80066ae <HAL_UART_IRQHandler+0xf2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668c:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800668e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006696:	b150      	cbz	r0, 80066ae <HAL_UART_IRQHandler+0xf2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006698:	4b29      	ldr	r3, [pc, #164]	; (8006740 <HAL_UART_IRQHandler+0x184>)
 800669a:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800669c:	f7fb fa5f 	bl	8001b5e <HAL_DMA_Abort_IT>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d049      	beq.n	8006738 <HAL_UART_IRQHandler+0x17c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80066a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80066a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ac:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7ff ff56 	bl	8006560 <HAL_UART_ErrorCallback>
 80066b4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80066b6:	f7ff ff53 	bl	8006560 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ba:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 80066be:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80066c0:	02de      	lsls	r6, r3, #11
 80066c2:	d50e      	bpl.n	80066e2 <HAL_UART_IRQHandler+0x126>
 80066c4:	0245      	lsls	r5, r0, #9
 80066c6:	d50c      	bpl.n	80066e2 <HAL_UART_IRQHandler+0x126>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80066cc:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80066ce:	2320      	movs	r3, #32
 80066d0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_UARTEx_WakeupCallback(huart);
 80066d4:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80066d6:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 80066da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80066de:	f000 bb63 	b.w	8006da8 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
 80066e2:	061e      	lsls	r6, r3, #24
 80066e4:	d505      	bpl.n	80066f2 <HAL_UART_IRQHandler+0x136>
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 80066e6:	060d      	lsls	r5, r1, #24
 80066e8:	d401      	bmi.n	80066ee <HAL_UART_IRQHandler+0x132>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 80066ea:	0200      	lsls	r0, r0, #8
 80066ec:	d501      	bpl.n	80066f2 <HAL_UART_IRQHandler+0x136>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80066ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80066f0:	e773      	b.n	80065da <HAL_UART_IRQHandler+0x1e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066f2:	065e      	lsls	r6, r3, #25
 80066f4:	d50e      	bpl.n	8006714 <HAL_UART_IRQHandler+0x158>
 80066f6:	064d      	lsls	r5, r1, #25
 80066f8:	d50c      	bpl.n	8006714 <HAL_UART_IRQHandler+0x158>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006700:	6013      	str	r3, [r2, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006702:	2320      	movs	r3, #32
 8006704:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006708:	2300      	movs	r3, #0
 800670a:	6763      	str	r3, [r4, #116]	; 0x74
  
  HAL_UART_TxCpltCallback(huart);
 800670c:	4620      	mov	r0, r4
 800670e:	f7ff ff09 	bl	8006524 <HAL_UART_TxCpltCallback>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8006714:	0218      	lsls	r0, r3, #8
 8006716:	d506      	bpl.n	8006726 <HAL_UART_IRQHandler+0x16a>
 8006718:	004a      	lsls	r2, r1, #1
 800671a:	d504      	bpl.n	8006726 <HAL_UART_IRQHandler+0x16a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800671c:	4620      	mov	r0, r4
}
 800671e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006722:	f000 bb43 	b.w	8006dac <HAL_UARTEx_TxFifoEmptyCallback>
  if(((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006726:	01db      	lsls	r3, r3, #7
 8006728:	d506      	bpl.n	8006738 <HAL_UART_IRQHandler+0x17c>
 800672a:	2900      	cmp	r1, #0
 800672c:	da04      	bge.n	8006738 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800672e:	4620      	mov	r0, r4
}
 8006730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006734:	f000 bb39 	b.w	8006daa <HAL_UARTEx_RxFifoFullCallback>
 8006738:	bd70      	pop	{r4, r5, r6, pc}
 800673a:	bf00      	nop
 800673c:	10000001 	.word	0x10000001
 8006740:	08006745 	.word	0x08006745

08006744 <UART_DMAAbortOnError>:
{
 8006744:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006746:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800674e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006752:	f7ff ff05 	bl	8006560 <HAL_UART_ErrorCallback>
 8006756:	bd08      	pop	{r3, pc}

08006758 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 8006758:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800675a:	69c1      	ldr	r1, [r0, #28]
 800675c:	6882      	ldr	r2, [r0, #8]
{
 800675e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006762:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006764:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006766:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006768:	4302      	orrs	r2, r0
 800676a:	6960      	ldr	r0, [r4, #20]
 800676c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800676e:	48bd      	ldr	r0, [pc, #756]	; (8006a64 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006770:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006772:	4028      	ands	r0, r5
 8006774:	4302      	orrs	r2, r0
 8006776:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	68e0      	ldr	r0, [r4, #12]
 800677c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006780:	4302      	orrs	r2, r0
 8006782:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006784:	4ab8      	ldr	r2, [pc, #736]	; (8006a68 <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006786:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006788:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800678a:	bf1c      	itt	ne
 800678c:	6a22      	ldrne	r2, [r4, #32]
 800678e:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006796:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800679a:	4302      	orrs	r2, r0
 800679c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800679e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80067a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067a2:	f020 000f 	bic.w	r0, r0, #15
 80067a6:	4310      	orrs	r0, r2
 80067a8:	62d8      	str	r0, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067aa:	48b0      	ldr	r0, [pc, #704]	; (8006a6c <UART_SetConfig+0x314>)
 80067ac:	4283      	cmp	r3, r0
 80067ae:	d117      	bne.n	80067e0 <UART_SetConfig+0x88>
 80067b0:	4baf      	ldr	r3, [pc, #700]	; (8006a70 <UART_SetConfig+0x318>)
 80067b2:	48b0      	ldr	r0, [pc, #704]	; (8006a74 <UART_SetConfig+0x31c>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80067c2:	f040 81a7 	bne.w	8006b14 <UART_SetConfig+0x3bc>
    switch (clocksource)
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d849      	bhi.n	800685e <UART_SetConfig+0x106>
 80067ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80067ce:	017f      	.short	0x017f
 80067d0:	016800d0 	.word	0x016800d0
 80067d4:	01780048 	.word	0x01780048
 80067d8:	00480048 	.word	0x00480048
 80067dc:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067e0:	48a5      	ldr	r0, [pc, #660]	; (8006a78 <UART_SetConfig+0x320>)
 80067e2:	4283      	cmp	r3, r0
 80067e4:	d106      	bne.n	80067f4 <UART_SetConfig+0x9c>
 80067e6:	4ba2      	ldr	r3, [pc, #648]	; (8006a70 <UART_SetConfig+0x318>)
 80067e8:	48a4      	ldr	r0, [pc, #656]	; (8006a7c <UART_SetConfig+0x324>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f003 030c 	and.w	r3, r3, #12
 80067f2:	e7e3      	b.n	80067bc <UART_SetConfig+0x64>
 80067f4:	48a2      	ldr	r0, [pc, #648]	; (8006a80 <UART_SetConfig+0x328>)
 80067f6:	4283      	cmp	r3, r0
 80067f8:	d11d      	bne.n	8006836 <UART_SetConfig+0xde>
 80067fa:	4b9d      	ldr	r3, [pc, #628]	; (8006a70 <UART_SetConfig+0x318>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006804:	2b10      	cmp	r3, #16
 8006806:	f000 8157 	beq.w	8006ab8 <UART_SetConfig+0x360>
 800680a:	d804      	bhi.n	8006816 <UART_SetConfig+0xbe>
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8159 	beq.w	8006ac4 <UART_SetConfig+0x36c>
 8006812:	2310      	movs	r3, #16
 8006814:	e7d3      	b.n	80067be <UART_SetConfig+0x66>
 8006816:	2b20      	cmp	r3, #32
 8006818:	f000 813e 	beq.w	8006a98 <UART_SetConfig+0x340>
 800681c:	2b30      	cmp	r3, #48	; 0x30
 800681e:	d1f8      	bne.n	8006812 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006820:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006824:	f040 80d0 	bne.w	80069c8 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006828:	4b96      	ldr	r3, [pc, #600]	; (8006a84 <UART_SetConfig+0x32c>)
 800682a:	6861      	ldr	r1, [r4, #4]
 800682c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006830:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006834:	e138      	b.n	8006aa8 <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006836:	4894      	ldr	r0, [pc, #592]	; (8006a88 <UART_SetConfig+0x330>)
 8006838:	4283      	cmp	r3, r0
 800683a:	d12d      	bne.n	8006898 <UART_SetConfig+0x140>
 800683c:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 8006840:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006844:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8006848:	2840      	cmp	r0, #64	; 0x40
 800684a:	f000 80fd 	beq.w	8006a48 <UART_SetConfig+0x2f0>
 800684e:	d812      	bhi.n	8006876 <UART_SetConfig+0x11e>
 8006850:	2800      	cmp	r0, #0
 8006852:	f000 80c0 	beq.w	80069d6 <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006856:	4884      	ldr	r0, [pc, #528]	; (8006a68 <UART_SetConfig+0x310>)
 8006858:	4283      	cmp	r3, r0
 800685a:	f040 8156 	bne.w	8006b0a <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
  huart->NbTxDataToProcess = 1;
 8006860:	2201      	movs	r2, #1
 8006862:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8006866:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 800686a:	2200      	movs	r2, #0
 800686c:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800686e:	6762      	str	r2, [r4, #116]	; 0x74
}
 8006870:	4618      	mov	r0, r3
 8006872:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006876:	2880      	cmp	r0, #128	; 0x80
 8006878:	f000 80bb 	beq.w	80069f2 <UART_SetConfig+0x29a>
 800687c:	28c0      	cmp	r0, #192	; 0xc0
 800687e:	d1ea      	bne.n	8006856 <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006880:	4879      	ldr	r0, [pc, #484]	; (8006a68 <UART_SetConfig+0x310>)
 8006882:	4283      	cmp	r3, r0
 8006884:	d1cc      	bne.n	8006820 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006886:	4b7f      	ldr	r3, [pc, #508]	; (8006a84 <UART_SetConfig+0x32c>)
 8006888:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800688c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8006890:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006892:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8006896:	e0aa      	b.n	80069ee <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006898:	487c      	ldr	r0, [pc, #496]	; (8006a8c <UART_SetConfig+0x334>)
 800689a:	4283      	cmp	r3, r0
 800689c:	d111      	bne.n	80068c2 <UART_SetConfig+0x16a>
 800689e:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 80068a2:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80068a6:	f400 7040 	and.w	r0, r0, #768	; 0x300
 80068aa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80068ae:	f000 80cb 	beq.w	8006a48 <UART_SetConfig+0x2f0>
 80068b2:	d9cd      	bls.n	8006850 <UART_SetConfig+0xf8>
 80068b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80068b8:	f000 809b 	beq.w	80069f2 <UART_SetConfig+0x29a>
 80068bc:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80068c0:	e7dd      	b.n	800687e <UART_SetConfig+0x126>
 80068c2:	4869      	ldr	r0, [pc, #420]	; (8006a68 <UART_SetConfig+0x310>)
 80068c4:	4283      	cmp	r3, r0
 80068c6:	d1a4      	bne.n	8006812 <UART_SetConfig+0xba>
 80068c8:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 80068cc:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80068d0:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 80068d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80068d8:	f000 80b6 	beq.w	8006a48 <UART_SetConfig+0x2f0>
 80068dc:	d9b8      	bls.n	8006850 <UART_SetConfig+0xf8>
 80068de:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80068e2:	f000 8086 	beq.w	80069f2 <UART_SetConfig+0x29a>
 80068e6:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 80068ea:	e7c8      	b.n	800687e <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ec:	f7fd fdc8 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f0:	4b64      	ldr	r3, [pc, #400]	; (8006a84 <UART_SetConfig+0x32c>)
 80068f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068f4:	6865      	ldr	r5, [r4, #4]
 80068f6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068fa:	2300      	movs	r3, #0
 80068fc:	e005      	b.n	800690a <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fe:	4b61      	ldr	r3, [pc, #388]	; (8006a84 <UART_SetConfig+0x32c>)
 8006900:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006902:	4863      	ldr	r0, [pc, #396]	; (8006a90 <UART_SetConfig+0x338>)
 8006904:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006908:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690a:	2100      	movs	r1, #0
 800690c:	f7fa f9d0 	bl	8000cb0 <__aeabi_uldivmod>
 8006910:	020f      	lsls	r7, r1, #8
 8006912:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006916:	0206      	lsls	r6, r0, #8
 8006918:	0868      	lsrs	r0, r5, #1
 800691a:	eb16 0b00 	adds.w	fp, r6, r0
 800691e:	f147 0c00 	adc.w	ip, r7, #0
 8006922:	462a      	mov	r2, r5
 8006924:	2300      	movs	r3, #0
 8006926:	4658      	mov	r0, fp
 8006928:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692a:	f7fa f9c1 	bl	8000cb0 <__aeabi_uldivmod>
          break;
 800692e:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006930:	4a58      	ldr	r2, [pc, #352]	; (8006a94 <UART_SetConfig+0x33c>)
 8006932:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006936:	4291      	cmp	r1, r2
 8006938:	d891      	bhi.n	800685e <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	60d0      	str	r0, [r2, #12]
 800693e:	e78f      	b.n	8006860 <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006940:	f7fd f9fe 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006944:	e7d4      	b.n	80068f0 <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006946:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006948:	4b4e      	ldr	r3, [pc, #312]	; (8006a84 <UART_SetConfig+0x32c>)
 800694a:	0868      	lsrs	r0, r5, #1
 800694c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006950:	2100      	movs	r1, #0
 8006952:	462a      	mov	r2, r5
 8006954:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006958:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800695c:	fbb6 f6f3 	udiv	r6, r6, r3
 8006960:	2300      	movs	r3, #0
 8006962:	fbe6 0105 	umlal	r0, r1, r6, r5
 8006966:	e7e0      	b.n	800692a <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 800696a:	2000      	movs	r0, #0
 800696c:	e7e0      	b.n	8006930 <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800696e:	f7fd fd99 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8006972:	e0ad      	b.n	8006ad0 <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006974:	f7fd fd84 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006978:	6862      	ldr	r2, [r4, #4]
 800697a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800697c:	4b41      	ldr	r3, [pc, #260]	; (8006a84 <UART_SetConfig+0x32c>)
 800697e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006982:	fbb0 f0f3 	udiv	r0, r0, r3
 8006986:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800698a:	fbb0 f0f2 	udiv	r0, r0, r2
 800698e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006990:	f1a0 0210 	sub.w	r2, r0, #16
 8006994:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006998:	429a      	cmp	r2, r3
 800699a:	f63f af60 	bhi.w	800685e <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	60d8      	str	r0, [r3, #12]
 80069a2:	e0b0      	b.n	8006b06 <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a4:	f7fd fd7e 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 80069a8:	e7e6      	b.n	8006978 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069aa:	4936      	ldr	r1, [pc, #216]	; (8006a84 <UART_SetConfig+0x32c>)
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80069b2:	4837      	ldr	r0, [pc, #220]	; (8006a90 <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069b4:	fbb0 f0f2 	udiv	r0, r0, r2
 80069b8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80069bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80069c0:	e7e5      	b.n	800698e <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c2:	f7fd f9bd 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 80069c6:	e7d7      	b.n	8006978 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c8:	492e      	ldr	r1, [pc, #184]	; (8006a84 <UART_SetConfig+0x32c>)
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80069d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80069d4:	e7ee      	b.n	80069b4 <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 80069d6:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <UART_SetConfig+0x310>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d173      	bne.n	8006ac4 <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 80069dc:	f7fd fd50 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 80069e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80069e2:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <UART_SetConfig+0x32c>)
 80069e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80069e8:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 80069ec:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 80069ee:	b953      	cbnz	r3, 8006a06 <UART_SetConfig+0x2ae>
 80069f0:	e736      	b.n	8006860 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 80069f2:	481d      	ldr	r0, [pc, #116]	; (8006a68 <UART_SetConfig+0x310>)
 80069f4:	4283      	cmp	r3, r0
 80069f6:	d14f      	bne.n	8006a98 <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <UART_SetConfig+0x32c>)
 80069fa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80069fe:	4b24      	ldr	r3, [pc, #144]	; (8006a90 <UART_SetConfig+0x338>)
 8006a00:	fbb3 f3f0 	udiv	r3, r3, r0
 8006a04:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8006a06:	6865      	ldr	r5, [r4, #4]
 8006a08:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	f63f af26 	bhi.w	800685e <UART_SetConfig+0x106>
 8006a12:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006a16:	f63f af22 	bhi.w	800685e <UART_SetConfig+0x106>
        switch (clocksource)
 8006a1a:	2a08      	cmp	r2, #8
 8006a1c:	d8a4      	bhi.n	8006968 <UART_SetConfig+0x210>
 8006a1e:	a301      	add	r3, pc, #4	; (adr r3, 8006a24 <UART_SetConfig+0x2cc>)
 8006a20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006a24:	080068ed 	.word	0x080068ed
 8006a28:	08006969 	.word	0x08006969
 8006a2c:	080068ff 	.word	0x080068ff
 8006a30:	08006969 	.word	0x08006969
 8006a34:	08006941 	.word	0x08006941
 8006a38:	08006969 	.word	0x08006969
 8006a3c:	08006969 	.word	0x08006969
 8006a40:	08006969 	.word	0x08006969
 8006a44:	08006947 	.word	0x08006947
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a48:	4a07      	ldr	r2, [pc, #28]	; (8006a68 <UART_SetConfig+0x310>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d134      	bne.n	8006ab8 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a4e:	f7fd f977 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <UART_SetConfig+0x32c>)
 8006a56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a5a:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006a5e:	2204      	movs	r2, #4
 8006a60:	e7c5      	b.n	80069ee <UART_SetConfig+0x296>
 8006a62:	bf00      	nop
 8006a64:	cfff69f3 	.word	0xcfff69f3
 8006a68:	40008000 	.word	0x40008000
 8006a6c:	40013800 	.word	0x40013800
 8006a70:	40021000 	.word	0x40021000
 8006a74:	080243f8 	.word	0x080243f8
 8006a78:	40004400 	.word	0x40004400
 8006a7c:	080243fc 	.word	0x080243fc
 8006a80:	40004800 	.word	0x40004800
 8006a84:	0802440a 	.word	0x0802440a
 8006a88:	40004c00 	.word	0x40004c00
 8006a8c:	40005000 	.word	0x40005000
 8006a90:	00f42400 	.word	0x00f42400
 8006a94:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a98:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006a9c:	d185      	bne.n	80069aa <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9e:	4b29      	ldr	r3, [pc, #164]	; (8006b44 <UART_SetConfig+0x3ec>)
 8006aa0:	6861      	ldr	r1, [r4, #4]
 8006aa2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006aa6:	4828      	ldr	r0, [pc, #160]	; (8006b48 <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aac:	0848      	lsrs	r0, r1, #1
 8006aae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006ab2:	fbb0 f0f1 	udiv	r0, r0, r1
 8006ab6:	e017      	b.n	8006ae8 <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ab8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006abc:	d181      	bne.n	80069c2 <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006abe:	f7fd f93f 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006ac2:	e005      	b.n	8006ad0 <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006ac8:	f47f af54 	bne.w	8006974 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006acc:	f7fd fcd8 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ad0:	6862      	ldr	r2, [r4, #4]
 8006ad2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ad4:	4b1b      	ldr	r3, [pc, #108]	; (8006b44 <UART_SetConfig+0x3ec>)
 8006ad6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ade:	0850      	lsrs	r0, r2, #1
 8006ae0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006ae4:	fbb0 f0f2 	udiv	r0, r0, r2
 8006ae8:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aea:	f1a0 0210 	sub.w	r2, r0, #16
 8006aee:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006af2:	429a      	cmp	r2, r3
 8006af4:	f63f aeb3 	bhi.w	800685e <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8006af8:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8006afc:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006afe:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006b02:	4318      	orrs	r0, r3
 8006b04:	60d0      	str	r0, [r2, #12]
 8006b06:	2300      	movs	r3, #0
 8006b08:	e6aa      	b.n	8006860 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006b0e:	f43f aea6 	beq.w	800685e <UART_SetConfig+0x106>
 8006b12:	2310      	movs	r3, #16
    switch (clocksource)
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	f63f aea2 	bhi.w	800685e <UART_SetConfig+0x106>
 8006b1a:	a101      	add	r1, pc, #4	; (adr r1, 8006b20 <UART_SetConfig+0x3c8>)
 8006b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b20:	08006975 	.word	0x08006975
 8006b24:	080069a5 	.word	0x080069a5
 8006b28:	080069ab 	.word	0x080069ab
 8006b2c:	0800685f 	.word	0x0800685f
 8006b30:	080069c3 	.word	0x080069c3
 8006b34:	0800685f 	.word	0x0800685f
 8006b38:	0800685f 	.word	0x0800685f
 8006b3c:	0800685f 	.word	0x0800685f
 8006b40:	080069c9 	.word	0x080069c9
 8006b44:	0802440a 	.word	0x0802440a
 8006b48:	00f42400 	.word	0x00f42400

08006b4c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b4e:	07da      	lsls	r2, r3, #31
{
 8006b50:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b52:	d506      	bpl.n	8006b62 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b54:	6801      	ldr	r1, [r0, #0]
 8006b56:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006b58:	684a      	ldr	r2, [r1, #4]
 8006b5a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b5e:	4322      	orrs	r2, r4
 8006b60:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b62:	079c      	lsls	r4, r3, #30
 8006b64:	d506      	bpl.n	8006b74 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b66:	6801      	ldr	r1, [r0, #0]
 8006b68:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006b6a:	684a      	ldr	r2, [r1, #4]
 8006b6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b70:	4322      	orrs	r2, r4
 8006b72:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b74:	0759      	lsls	r1, r3, #29
 8006b76:	d506      	bpl.n	8006b86 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b78:	6801      	ldr	r1, [r0, #0]
 8006b7a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006b7c:	684a      	ldr	r2, [r1, #4]
 8006b7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b82:	4322      	orrs	r2, r4
 8006b84:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b86:	071a      	lsls	r2, r3, #28
 8006b88:	d506      	bpl.n	8006b98 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b8a:	6801      	ldr	r1, [r0, #0]
 8006b8c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006b8e:	684a      	ldr	r2, [r1, #4]
 8006b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b94:	4322      	orrs	r2, r4
 8006b96:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b98:	06dc      	lsls	r4, r3, #27
 8006b9a:	d506      	bpl.n	8006baa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b9c:	6801      	ldr	r1, [r0, #0]
 8006b9e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006ba0:	688a      	ldr	r2, [r1, #8]
 8006ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ba6:	4322      	orrs	r2, r4
 8006ba8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006baa:	0699      	lsls	r1, r3, #26
 8006bac:	d506      	bpl.n	8006bbc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bae:	6801      	ldr	r1, [r0, #0]
 8006bb0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006bb2:	688a      	ldr	r2, [r1, #8]
 8006bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bb8:	4322      	orrs	r2, r4
 8006bba:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bbc:	065a      	lsls	r2, r3, #25
 8006bbe:	d50f      	bpl.n	8006be0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc0:	6801      	ldr	r1, [r0, #0]
 8006bc2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006bc4:	684a      	ldr	r2, [r1, #4]
 8006bc6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006bca:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bd0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bd2:	d105      	bne.n	8006be0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bd4:	684a      	ldr	r2, [r1, #4]
 8006bd6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006bd8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006bdc:	4322      	orrs	r2, r4
 8006bde:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	d506      	bpl.n	8006bf2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be4:	6802      	ldr	r2, [r0, #0]
 8006be6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006be8:	6853      	ldr	r3, [r2, #4]
 8006bea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	6053      	str	r3, [r2, #4]
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <UART_WaitOnFlagUntilTimeout>:
{
 8006bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf8:	9d06      	ldr	r5, [sp, #24]
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	4616      	mov	r6, r2
 8006c00:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c02:	6821      	ldr	r1, [r4, #0]
 8006c04:	69ca      	ldr	r2, [r1, #28]
 8006c06:	ea37 0302 	bics.w	r3, r7, r2
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2201      	moveq	r2, #1
 8006c0e:	2200      	movne	r2, #0
 8006c10:	42b2      	cmp	r2, r6
 8006c12:	d002      	beq.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006c14:	2000      	movs	r0, #0
}
 8006c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8006c1a:	1c6b      	adds	r3, r5, #1
 8006c1c:	d0f2      	beq.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006c1e:	b99d      	cbnz	r5, 8006c48 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	f022 0201 	bic.w	r2, r2, #1
 8006c30:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006c32:	2320      	movs	r3, #32
 8006c34:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8006c38:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8006c42:	2003      	movs	r0, #3
 8006c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006c48:	f7fa f9ea 	bl	8001020 <HAL_GetTick>
 8006c4c:	eba0 0008 	sub.w	r0, r0, r8
 8006c50:	4285      	cmp	r5, r0
 8006c52:	d2d6      	bcs.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xe>
 8006c54:	e7e4      	b.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x2c>

08006c56 <UART_CheckIdleState>:
{
 8006c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c58:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006c60:	f7fa f9de 	bl	8001020 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8006c6a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c6c:	d417      	bmi.n	8006c9e <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	075b      	lsls	r3, r3, #29
 8006c74:	d50a      	bpl.n	8006c8c <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	462b      	mov	r3, r5
 8006c80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7ff ffb5 	bl	8006bf4 <UART_WaitOnFlagUntilTimeout>
 8006c8a:	b9a0      	cbnz	r0, 8006cb6 <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8006c8c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006c8e:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8006c90:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006c94:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8006c98:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8006c9c:	e00c      	b.n	8006cb8 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cac:	4620      	mov	r0, r4
 8006cae:	f7ff ffa1 	bl	8006bf4 <UART_WaitOnFlagUntilTimeout>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d0db      	beq.n	8006c6e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006cb6:	2003      	movs	r0, #3
}
 8006cb8:	b002      	add	sp, #8
 8006cba:	bd70      	pop	{r4, r5, r6, pc}

08006cbc <HAL_UART_Init>:
{
 8006cbc:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	b360      	cbz	r0, 8006d1c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8006cc2:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006cc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006cca:	b91b      	cbnz	r3, 8006cd4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006ccc:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006cd0:	f018 f876 	bl	801edc0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006cd4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006cd6:	2324      	movs	r3, #36	; 0x24
 8006cd8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7ff fd37 	bl	8006758 <UART_SetConfig>
 8006cea:	2801      	cmp	r0, #1
 8006cec:	d016      	beq.n	8006d1c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cf0:	b113      	cbz	r3, 8006cf8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f7ff ff2a 	bl	8006b4c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d08:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006d10:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006d18:	f7ff bf9d 	b.w	8006c56 <UART_CheckIdleState>
}
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	bd10      	pop	{r4, pc}

08006d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006d22:	2203      	movs	r2, #3
 8006d24:	f88d 2003 	strb.w	r2, [sp, #3]
 8006d28:	2207      	movs	r2, #7
 8006d2a:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006d2e:	2208      	movs	r2, #8
 8006d30:	f88d 2008 	strb.w	r2, [sp, #8]
 8006d34:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d38:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006d3a:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006d3c:	2104      	movs	r1, #4
 8006d3e:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006d40:	f88d 3000 	strb.w	r3, [sp]
 8006d44:	f88d 3001 	strb.w	r3, [sp, #1]
 8006d48:	f88d 3002 	strb.w	r3, [sp, #2]
 8006d4c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006d50:	f88d 1009 	strb.w	r1, [sp, #9]
 8006d54:	f88d 400a 	strb.w	r4, [sp, #10]
 8006d58:	f88d 100b 	strb.w	r1, [sp, #11]
 8006d5c:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d60:	b92a      	cbnz	r2, 8006d6e <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 8006d62:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006d66:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8006d6a:	b004      	add	sp, #16
 8006d6c:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d6e:	6803      	ldr	r3, [r0, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d72:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006d74:	ab04      	add	r3, sp, #16
 8006d76:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006d7a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006d7e:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8006d82:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d8e:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006d92:	ab04      	add	r3, sp, #16
 8006d94:	441a      	add	r2, r3
 8006d96:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8006d9a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006da6:	e7de      	b.n	8006d66 <UARTEx_SetNbDataToProcess+0x46>

08006da8 <HAL_UARTEx_WakeupCallback>:
 8006da8:	4770      	bx	lr

08006daa <HAL_UARTEx_RxFifoFullCallback>:
 8006daa:	4770      	bx	lr

08006dac <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8006dac:	4770      	bx	lr

08006dae <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006dae:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d014      	beq.n	8006de0 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006db6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006db8:	2324      	movs	r3, #36	; 0x24
 8006dba:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dbe:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006dc0:	6813      	ldr	r3, [r2, #0]
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dc8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6683      	str	r3, [r0, #104]	; 0x68
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dd0:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006dd8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006ddc:	4618      	mov	r0, r3
 8006dde:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006de0:	2002      	movs	r0, #2
}
 8006de2:	4770      	bx	lr

08006de4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006de4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006de6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006dea:	2b01      	cmp	r3, #1
{
 8006dec:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006dee:	d01b      	beq.n	8006e28 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006df0:	2301      	movs	r3, #1
 8006df2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006df6:	2324      	movs	r3, #36	; 0x24
 8006df8:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dfc:	6803      	ldr	r3, [r0, #0]
 8006dfe:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006e0e:	4311      	orrs	r1, r2
 8006e10:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e12:	f7ff ff85 	bl	8006d20 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e16:	6803      	ldr	r3, [r0, #0]
 8006e18:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e1a:	2320      	movs	r3, #32
 8006e1c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006e20:	2000      	movs	r0, #0
 8006e22:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e28:	2002      	movs	r0, #2
}
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}

08006e2c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006e2c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e2e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e32:	2b01      	cmp	r3, #1
{
 8006e34:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006e36:	d01b      	beq.n	8006e70 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	2324      	movs	r3, #36	; 0x24
 8006e40:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e44:	6803      	ldr	r3, [r0, #0]
 8006e46:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8006e56:	4311      	orrs	r1, r2
 8006e58:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e5a:	f7ff ff61 	bl	8006d20 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e5e:	6803      	ldr	r3, [r0, #0]
 8006e60:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e62:	2320      	movs	r3, #32
 8006e64:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006e68:	2000      	movs	r0, #0
 8006e6a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e70:	2002      	movs	r0, #2
}
 8006e72:	bd38      	pop	{r3, r4, r5, pc}

08006e74 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006e74:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <SDMMC_GetCmdResp2+0x48>)
 8006e76:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e84:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8006e86:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006e8a:	d313      	bcc.n	8006eb4 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006e8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006e8e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006e92:	d0f8      	beq.n	8006e86 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e96:	075b      	lsls	r3, r3, #29
 8006e98:	d503      	bpl.n	8006ea2 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e9a:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006e9c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ea2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ea4:	f013 0301 	ands.w	r3, r3, #1
 8006ea8:	d001      	beq.n	8006eae <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e7f6      	b.n	8006e9c <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006eae:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <SDMMC_GetCmdResp2+0x4c>)
 8006eb0:	6382      	str	r2, [r0, #56]	; 0x38
 8006eb2:	e7f4      	b.n	8006e9e <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8006eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006eb8:	e7f1      	b.n	8006e9e <SDMMC_GetCmdResp2+0x2a>
 8006eba:	bf00      	nop
 8006ebc:	20000ec4 	.word	0x20000ec4
 8006ec0:	002000c5 	.word	0x002000c5

08006ec4 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006ec4:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <SDMMC_GetCmdResp3+0x3c>)
 8006ec6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ed0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ed4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8006ed6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006eda:	d30d      	bcc.n	8006ef8 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006edc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006ede:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006ee2:	d0f8      	beq.n	8006ed6 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ee4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ee6:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006eea:	bf15      	itete	ne
 8006eec:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006eee:	4a05      	ldreq	r2, [pc, #20]	; (8006f04 <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ef0:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ef2:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006ef8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000ec4 	.word	0x20000ec4
 8006f04:	002000c5 	.word	0x002000c5

08006f08 <SDMMC_Init>:
{
 8006f08:	b084      	sub	sp, #16
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	ac03      	add	r4, sp, #12
 8006f0e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8006f12:	9a04      	ldr	r2, [sp, #16]
 8006f14:	9b03      	ldr	r3, [sp, #12]
 8006f16:	6841      	ldr	r1, [r0, #4]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	9a05      	ldr	r2, [sp, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	9a06      	ldr	r2, [sp, #24]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	9a07      	ldr	r2, [sp, #28]
}
 8006f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	4a03      	ldr	r2, [pc, #12]	; (8006f38 <SDMMC_Init+0x30>)
 8006f2c:	400a      	ands	r2, r1
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	6043      	str	r3, [r0, #4]
}
 8006f32:	b004      	add	sp, #16
 8006f34:	2000      	movs	r0, #0
 8006f36:	4770      	bx	lr
 8006f38:	fffc2c00 	.word	0xfffc2c00

08006f3c <SDMMC_ReadFIFO>:
 8006f3c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8006f40:	4770      	bx	lr

08006f42 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8006f42:	680b      	ldr	r3, [r1, #0]
 8006f44:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8006f48:	2000      	movs	r0, #0
 8006f4a:	4770      	bx	lr

08006f4c <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006f4c:	6803      	ldr	r3, [r0, #0]
 8006f4e:	f043 0303 	orr.w	r3, r3, #3
 8006f52:	6003      	str	r3, [r0, #0]
}
 8006f54:	2000      	movs	r0, #0
 8006f56:	4770      	bx	lr

08006f58 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8006f58:	6803      	ldr	r3, [r0, #0]
 8006f5a:	f023 0303 	bic.w	r3, r3, #3
 8006f5e:	6003      	str	r3, [r0, #0]
}
 8006f60:	2000      	movs	r0, #0
 8006f62:	4770      	bx	lr

08006f64 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f64:	6800      	ldr	r0, [r0, #0]
}
 8006f66:	f000 0003 	and.w	r0, r0, #3
 8006f6a:	4770      	bx	lr

08006f6c <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8006f6c:	680b      	ldr	r3, [r1, #0]
 8006f6e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8006f70:	68c2      	ldr	r2, [r0, #12]
 8006f72:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <SDMMC_SendCommand+0x20>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	684a      	ldr	r2, [r1, #4]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	688a      	ldr	r2, [r1, #8]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	68ca      	ldr	r2, [r1, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	690a      	ldr	r2, [r1, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60c3      	str	r3, [r0, #12]
}
 8006f88:	2000      	movs	r0, #0
 8006f8a:	4770      	bx	lr
 8006f8c:	fffee0c0 	.word	0xfffee0c0

08006f90 <SDMMC_GetResponse>:
{
 8006f90:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006f92:	3014      	adds	r0, #20
 8006f94:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006f9a:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8006f9c:	9b01      	ldr	r3, [sp, #4]
 8006f9e:	6818      	ldr	r0, [r3, #0]
}  
 8006fa0:	b002      	add	sp, #8
 8006fa2:	4770      	bx	lr

08006fa4 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006fa4:	4b44      	ldr	r3, [pc, #272]	; (80070b8 <SDMMC_GetCmdResp1+0x114>)
{
 8006fa6:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8006fae:	fbb3 f3f4 	udiv	r3, r3, r4
 8006fb2:	435a      	muls	r2, r3
    if (count-- == 0)
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	d049      	beq.n	800704c <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8006fb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006fba:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006fbe:	f102 32ff 	add.w	r2, r2, #4294967295
 8006fc2:	d0f7      	beq.n	8006fb4 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006fc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006fc6:	075c      	lsls	r4, r3, #29
 8006fc8:	d503      	bpl.n	8006fd2 <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fca:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fcc:	6383      	str	r3, [r0, #56]	; 0x38
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006fd4:	f013 0301 	ands.w	r3, r3, #1
 8006fd8:	d001      	beq.n	8006fde <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e7f6      	b.n	8006fcc <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 8006fde:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d135      	bne.n	8007052 <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fe6:	4a35      	ldr	r2, [pc, #212]	; (80070bc <SDMMC_GetCmdResp1+0x118>)
 8006fe8:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006fea:	4619      	mov	r1, r3
 8006fec:	f7ff ffd0 	bl	8006f90 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ff0:	4b33      	ldr	r3, [pc, #204]	; (80070c0 <SDMMC_GetCmdResp1+0x11c>)
 8006ff2:	4003      	ands	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0ea      	beq.n	8006fce <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	db2c      	blt.n	8007056 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ffc:	0042      	lsls	r2, r0, #1
 8006ffe:	d42d      	bmi.n	800705c <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007000:	0084      	lsls	r4, r0, #2
 8007002:	d42d      	bmi.n	8007060 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007004:	00c1      	lsls	r1, r0, #3
 8007006:	d42d      	bmi.n	8007064 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007008:	0102      	lsls	r2, r0, #4
 800700a:	d42e      	bmi.n	800706a <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800700c:	0144      	lsls	r4, r0, #5
 800700e:	d42f      	bmi.n	8007070 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007010:	01c1      	lsls	r1, r0, #7
 8007012:	d430      	bmi.n	8007076 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007014:	0202      	lsls	r2, r0, #8
 8007016:	d431      	bmi.n	800707c <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007018:	0244      	lsls	r4, r0, #9
 800701a:	d432      	bmi.n	8007082 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800701c:	0281      	lsls	r1, r0, #10
 800701e:	d433      	bmi.n	8007088 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007020:	02c2      	lsls	r2, r0, #11
 8007022:	d434      	bmi.n	800708e <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007024:	0344      	lsls	r4, r0, #13
 8007026:	d435      	bmi.n	8007094 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007028:	0381      	lsls	r1, r0, #14
 800702a:	d436      	bmi.n	800709a <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800702c:	03c2      	lsls	r2, r0, #15
 800702e:	d437      	bmi.n	80070a0 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007030:	0404      	lsls	r4, r0, #16
 8007032:	d438      	bmi.n	80070a6 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007034:	0441      	lsls	r1, r0, #17
 8007036:	d439      	bmi.n	80070ac <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007038:	0482      	lsls	r2, r0, #18
 800703a:	d43a      	bmi.n	80070b2 <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800703c:	f010 0f08 	tst.w	r0, #8
 8007040:	bf14      	ite	ne
 8007042:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8007046:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800704a:	e7c0      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800704c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007050:	e7bd      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007052:	2301      	movs	r3, #1
 8007054:	e7bb      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800705a:	e7b8      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	e7b6      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	e7b4      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007068:	e7b1      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800706a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800706e:	e7ae      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007074:	e7ab      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800707a:	e7a8      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800707c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007080:	e7a5      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007086:	e7a2      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800708c:	e79f      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	e79c      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007098:	e799      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800709a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800709e:	e796      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070a4:	e793      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80070a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070aa:	e790      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80070ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070b0:	e78d      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 80070b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070b6:	e78a      	b.n	8006fce <SDMMC_GetCmdResp1+0x2a>
 80070b8:	20000ec4 	.word	0x20000ec4
 80070bc:	002000c5 	.word	0x002000c5
 80070c0:	fdffe008 	.word	0xfdffe008

080070c4 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80070c4:	680b      	ldr	r3, [r1, #0]
 80070c6:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80070c8:	684b      	ldr	r3, [r1, #4]
 80070ca:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 80070cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80070ce:	688a      	ldr	r2, [r1, #8]
 80070d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070d4:	4313      	orrs	r3, r2
 80070d6:	68ca      	ldr	r2, [r1, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	690a      	ldr	r2, [r1, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	694a      	ldr	r2, [r1, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80070e4:	2000      	movs	r0, #0
 80070e6:	4770      	bx	lr

080070e8 <SDMMC_CmdBlockLength>:
{
 80070e8:	b530      	push	{r4, r5, lr}
 80070ea:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070f0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070f2:	2300      	movs	r3, #0
{
 80070f4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80070f6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80070f8:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070fa:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070fc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007102:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007104:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007106:	f7ff ff31 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800710a:	f241 3288 	movw	r2, #5000	; 0x1388
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f7ff ff47 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 8007116:	b007      	add	sp, #28
 8007118:	bd30      	pop	{r4, r5, pc}

0800711a <SDMMC_CmdReadSingleBlock>:
{
 800711a:	b530      	push	{r4, r5, lr}
 800711c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800711e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007122:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007124:	2300      	movs	r3, #0
{
 8007126:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007128:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800712a:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800712c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800712e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007134:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007136:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007138:	f7ff ff18 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800713c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f7ff ff2e 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 8007148:	b007      	add	sp, #28
 800714a:	bd30      	pop	{r4, r5, pc}

0800714c <SDMMC_CmdReadMultiBlock>:
{
 800714c:	b530      	push	{r4, r5, lr}
 800714e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007154:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007156:	2300      	movs	r3, #0
{
 8007158:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800715a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800715c:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800715e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007160:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007166:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007168:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800716a:	f7ff feff 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800716e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007172:	4621      	mov	r1, r4
 8007174:	4628      	mov	r0, r5
 8007176:	f7ff ff15 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 800717a:	b007      	add	sp, #28
 800717c:	bd30      	pop	{r4, r5, pc}

0800717e <SDMMC_CmdWriteSingleBlock>:
{
 800717e:	b530      	push	{r4, r5, lr}
 8007180:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007186:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007188:	2300      	movs	r3, #0
{
 800718a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800718c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800718e:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007190:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007192:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007198:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800719a:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800719c:	f7ff fee6 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80071a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a4:	4621      	mov	r1, r4
 80071a6:	4628      	mov	r0, r5
 80071a8:	f7ff fefc 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 80071ac:	b007      	add	sp, #28
 80071ae:	bd30      	pop	{r4, r5, pc}

080071b0 <SDMMC_CmdWriteMultiBlock>:
{
 80071b0:	b530      	push	{r4, r5, lr}
 80071b2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071ba:	2300      	movs	r3, #0
{
 80071bc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80071be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80071c0:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071c2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80071cc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071ce:	f7ff fecd 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80071d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d6:	4621      	mov	r1, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	f7ff fee3 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 80071de:	b007      	add	sp, #28
 80071e0:	bd30      	pop	{r4, r5, pc}
	...

080071e4 <SDMMC_CmdStopTransfer>:
{
 80071e4:	b530      	push	{r4, r5, lr}
 80071e6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80071e8:	2300      	movs	r3, #0
{
 80071ea:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 80071ec:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80071ee:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071f0:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071f4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071f6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071fc:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071fe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007200:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007202:	f7ff feb3 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007206:	4a03      	ldr	r2, [pc, #12]	; (8007214 <SDMMC_CmdStopTransfer+0x30>)
 8007208:	4621      	mov	r1, r4
 800720a:	4628      	mov	r0, r5
 800720c:	f7ff feca 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 8007210:	b007      	add	sp, #28
 8007212:	bd30      	pop	{r4, r5, pc}
 8007214:	05f5e100 	.word	0x05f5e100

08007218 <SDMMC_CmdSelDesel>:
{
 8007218:	b530      	push	{r4, r5, lr}
 800721a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800721c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007220:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007222:	2300      	movs	r3, #0
{
 8007224:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007226:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007228:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800722a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800722c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007230:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007232:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007234:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007236:	f7ff fe99 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800723a:	f241 3288 	movw	r2, #5000	; 0x1388
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f7ff feaf 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 8007246:	b007      	add	sp, #28
 8007248:	bd30      	pop	{r4, r5, pc}
	...

0800724c <SDMMC_CmdGoIdleState>:
{
 800724c:	b510      	push	{r4, lr}
 800724e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007254:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007256:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007258:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800725a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800725c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007260:	9305      	str	r3, [sp, #20]
{
 8007262:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007264:	f7ff fe82 	bl	8006f6c <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <SDMMC_CmdGoIdleState+0x4c>)
 800726a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	fbb3 f2f2 	udiv	r2, r3, r2
 8007274:	f241 3388 	movw	r3, #5000	; 0x1388
 8007278:	4353      	muls	r3, r2
    if (count-- == 0)
 800727a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800727e:	d307      	bcc.n	8007290 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007280:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007282:	0612      	lsls	r2, r2, #24
 8007284:	d5f9      	bpl.n	800727a <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <SDMMC_CmdGoIdleState+0x50>)
 8007288:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800728a:	2000      	movs	r0, #0
}
 800728c:	b006      	add	sp, #24
 800728e:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007290:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8007294:	e7fa      	b.n	800728c <SDMMC_CmdGoIdleState+0x40>
 8007296:	bf00      	nop
 8007298:	20000ec4 	.word	0x20000ec4
 800729c:	002000c5 	.word	0x002000c5

080072a0 <SDMMC_CmdOperCond>:
{
 80072a0:	b510      	push	{r4, lr}
 80072a2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80072a4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80072a8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80072aa:	2308      	movs	r3, #8
 80072ac:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072b4:	2300      	movs	r3, #0
 80072b6:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072b8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072be:	9305      	str	r3, [sp, #20]
{
 80072c0:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c2:	f7ff fe53 	bl	8006f6c <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <SDMMC_CmdOperCond+0x78>)
 80072c8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80072d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80072d6:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80072d8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80072dc:	d318      	bcc.n	8007310 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80072de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80072e0:	f012 0f45 	tst.w	r2, #69	; 0x45
 80072e4:	d0f8      	beq.n	80072d8 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072e8:	075b      	lsls	r3, r3, #29
 80072ea:	d503      	bpl.n	80072f4 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072ec:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072ee:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80072f0:	b006      	add	sp, #24
 80072f2:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80072f6:	f012 0201 	ands.w	r2, r2, #1
 80072fa:	d001      	beq.n	8007300 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072fc:	2001      	movs	r0, #1
 80072fe:	e7f6      	b.n	80072ee <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007300:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007302:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8007306:	d0f3      	beq.n	80072f0 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007308:	2340      	movs	r3, #64	; 0x40
 800730a:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800730c:	4610      	mov	r0, r2
 800730e:	e7ef      	b.n	80072f0 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8007310:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007314:	e7ec      	b.n	80072f0 <SDMMC_CmdOperCond+0x50>
 8007316:	bf00      	nop
 8007318:	20000ec4 	.word	0x20000ec4

0800731c <SDMMC_CmdAppCommand>:
{
 800731c:	b530      	push	{r4, r5, lr}
 800731e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007324:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007326:	2300      	movs	r3, #0
{
 8007328:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800732a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800732c:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800732e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007330:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007336:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007338:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800733a:	f7ff fe17 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800733e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007342:	4621      	mov	r1, r4
 8007344:	4628      	mov	r0, r5
 8007346:	f7ff fe2d 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 800734a:	b007      	add	sp, #28
 800734c:	bd30      	pop	{r4, r5, pc}

0800734e <SDMMC_CmdAppOperCommand>:
{
 800734e:	b510      	push	{r4, lr}
 8007350:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007352:	2329      	movs	r3, #41	; 0x29
 8007354:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800735a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800735c:	2300      	movs	r3, #0
{
 800735e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007360:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007362:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007364:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800736a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800736c:	f7ff fdfe 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007370:	4620      	mov	r0, r4
 8007372:	f7ff fda7 	bl	8006ec4 <SDMMC_GetCmdResp3>
}
 8007376:	b006      	add	sp, #24
 8007378:	bd10      	pop	{r4, pc}

0800737a <SDMMC_CmdSendSCR>:
{
 800737a:	b530      	push	{r4, r5, lr}
 800737c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 800737e:	2300      	movs	r3, #0
{
 8007380:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007382:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007384:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007386:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800738c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800738e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007392:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007394:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007396:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007398:	f7ff fde8 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800739c:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a0:	4621      	mov	r1, r4
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7ff fdfe 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 80073a8:	b007      	add	sp, #28
 80073aa:	bd30      	pop	{r4, r5, pc}

080073ac <SDMMC_CmdSendCID>:
{
 80073ac:	b510      	push	{r4, lr}
 80073ae:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 80073b0:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80073b2:	2202      	movs	r2, #2
{
 80073b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 80073b6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80073b8:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80073bc:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80073c6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073c8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073ca:	f7ff fdcf 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80073ce:	4620      	mov	r0, r4
 80073d0:	f7ff fd50 	bl	8006e74 <SDMMC_GetCmdResp2>
}
 80073d4:	b006      	add	sp, #24
 80073d6:	bd10      	pop	{r4, pc}

080073d8 <SDMMC_CmdSendCSD>:
{
 80073d8:	b510      	push	{r4, lr}
 80073da:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80073dc:	2309      	movs	r3, #9
 80073de:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80073e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80073e4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073e6:	2300      	movs	r3, #0
{
 80073e8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80073ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ec:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073ee:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073f6:	f7ff fdb9 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff fd3a 	bl	8006e74 <SDMMC_GetCmdResp2>
}
 8007400:	b006      	add	sp, #24
 8007402:	bd10      	pop	{r4, pc}

08007404 <SDMMC_CmdSetRelAdd>:
{
 8007404:	b530      	push	{r4, r5, lr}
 8007406:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007408:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800740a:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 800740c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800740e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007410:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007412:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 800741a:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800741c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800741e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007420:	9305      	str	r3, [sp, #20]
{
 8007422:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007424:	f7ff fda2 	bl	8006f6c <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007428:	4b1f      	ldr	r3, [pc, #124]	; (80074a8 <SDMMC_CmdSetRelAdd+0xa4>)
 800742a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	fbb3 f2f2 	udiv	r2, r3, r2
 8007434:	f241 3388 	movw	r3, #5000	; 0x1388
 8007438:	4353      	muls	r3, r2
    if (count-- == 0)
 800743a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800743e:	d32a      	bcc.n	8007496 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007440:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007442:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007446:	d0f8      	beq.n	800743a <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800744a:	075a      	lsls	r2, r3, #29
 800744c:	d503      	bpl.n	8007456 <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800744e:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007450:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007452:	b007      	add	sp, #28
 8007454:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007458:	f011 0101 	ands.w	r1, r1, #1
 800745c:	d001      	beq.n	8007462 <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800745e:	2001      	movs	r0, #1
 8007460:	e7f6      	b.n	8007450 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007462:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b03      	cmp	r3, #3
 8007468:	d118      	bne.n	800749c <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800746a:	4b10      	ldr	r3, [pc, #64]	; (80074ac <SDMMC_CmdSetRelAdd+0xa8>)
 800746c:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800746e:	4620      	mov	r0, r4
 8007470:	f7ff fd8e 	bl	8006f90 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007474:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8007478:	d103      	bne.n	8007482 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800747a:	0c00      	lsrs	r0, r0, #16
 800747c:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800747e:	4618      	mov	r0, r3
 8007480:	e7e7      	b.n	8007452 <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007482:	0443      	lsls	r3, r0, #17
 8007484:	d40c      	bmi.n	80074a0 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007486:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800748a:	bf14      	ite	ne
 800748c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007490:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007494:	e7dd      	b.n	8007452 <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 8007496:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800749a:	e7da      	b.n	8007452 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800749c:	2001      	movs	r0, #1
 800749e:	e7d8      	b.n	8007452 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80074a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80074a4:	e7d5      	b.n	8007452 <SDMMC_CmdSetRelAdd+0x4e>
 80074a6:	bf00      	nop
 80074a8:	20000ec4 	.word	0x20000ec4
 80074ac:	002000c5 	.word	0x002000c5

080074b0 <SDMMC_CmdSendStatus>:
{
 80074b0:	b530      	push	{r4, r5, lr}
 80074b2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074b8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ba:	2300      	movs	r3, #0
{
 80074bc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80074be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80074c0:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074c2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80074cc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074ce:	f7ff fd4d 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80074d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d6:	4621      	mov	r1, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	f7ff fd63 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 80074de:	b007      	add	sp, #28
 80074e0:	bd30      	pop	{r4, r5, pc}

080074e2 <SDMMC_CmdSwitch>:
{
 80074e2:	b530      	push	{r4, r5, lr}
 80074e4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ec:	2300      	movs	r3, #0
{
 80074ee:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80074f0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80074f2:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074f4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074f6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074fc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80074fe:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007500:	f7ff fd34 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8007504:	f241 3288 	movw	r2, #5000	; 0x1388
 8007508:	4621      	mov	r1, r4
 800750a:	4628      	mov	r0, r5
 800750c:	f7ff fd4a 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 8007510:	b007      	add	sp, #28
 8007512:	bd30      	pop	{r4, r5, pc}

08007514 <SDMMC_CmdBusWidth>:
 8007514:	f7ff bfe5 	b.w	80074e2 <SDMMC_CmdSwitch>

08007518 <SDMMC_CmdVoltageSwitch>:
{
 8007518:	b530      	push	{r4, r5, lr}
 800751a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 800751c:	2300      	movs	r3, #0
{
 800751e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007520:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007522:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007524:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007528:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800752a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800752c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007530:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007532:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007534:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007536:	f7ff fd19 	bl	8006f6c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800753a:	f241 3288 	movw	r2, #5000	; 0x1388
 800753e:	4621      	mov	r1, r4
 8007540:	4628      	mov	r0, r5
 8007542:	f7ff fd2f 	bl	8006fa4 <SDMMC_GetCmdResp1>
}
 8007546:	b007      	add	sp, #28
 8007548:	bd30      	pop	{r4, r5, pc}
	...

0800754c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800754c:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800754e:	3b01      	subs	r3, #1
 8007550:	d101      	bne.n	8007556 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8007552:	2003      	movs	r0, #3
 8007554:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007556:	6902      	ldr	r2, [r0, #16]
 8007558:	2a00      	cmp	r2, #0
 800755a:	daf8      	bge.n	800754e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800755c:	6903      	ldr	r3, [r0, #16]
 800755e:	4a06      	ldr	r2, [pc, #24]	; (8007578 <USB_CoreReset+0x2c>)
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8007566:	3a01      	subs	r2, #1
 8007568:	d0f3      	beq.n	8007552 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800756a:	6903      	ldr	r3, [r0, #16]
 800756c:	f013 0301 	ands.w	r3, r3, #1
 8007570:	d1f9      	bne.n	8007566 <USB_CoreReset+0x1a>

  return HAL_OK;
 8007572:	4618      	mov	r0, r3
}
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	00030d41 	.word	0x00030d41

0800757c <USB_CoreInit>:
{
 800757c:	b084      	sub	sp, #16
 800757e:	b538      	push	{r3, r4, r5, lr}
 8007580:	ad05      	add	r5, sp, #20
 8007582:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	2b01      	cmp	r3, #1
{
 800758a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800758c:	d11b      	bne.n	80075c6 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800758e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007594:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007596:	68c3      	ldr	r3, [r0, #12]
 8007598:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800759c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075a2:	68c3      	ldr	r3, [r0, #12]
 80075a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80075a8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80075aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ac:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075ae:	bf02      	ittt	eq
 80075b0:	68c3      	ldreq	r3, [r0, #12]
 80075b2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80075b6:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80075b8:	f7ff ffc8 	bl	800754c <USB_CoreReset>
}
 80075bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c0:	2000      	movs	r0, #0
 80075c2:	b004      	add	sp, #16
 80075c4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075c6:	68c3      	ldr	r3, [r0, #12]
 80075c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075cc:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80075ce:	f7ff ffbd 	bl	800754c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80075d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80075d8:	e7f0      	b.n	80075bc <USB_CoreInit+0x40>

080075da <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075da:	6883      	ldr	r3, [r0, #8]
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	6083      	str	r3, [r0, #8]
}
 80075e2:	2000      	movs	r0, #0
 80075e4:	4770      	bx	lr

080075e6 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075e6:	6883      	ldr	r3, [r0, #8]
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	6083      	str	r3, [r0, #8]
}
 80075ee:	2000      	movs	r0, #0
 80075f0:	4770      	bx	lr

080075f2 <USB_SetCurrentMode>:
{
 80075f2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075f4:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80075f6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80075fc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80075fe:	d108      	bne.n	8007612 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007600:	68c3      	ldr	r3, [r0, #12]
 8007602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007606:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8007608:	2032      	movs	r0, #50	; 0x32
 800760a:	f7f9 fd0f 	bl	800102c <HAL_Delay>
  return HAL_OK;
 800760e:	2000      	movs	r0, #0
 8007610:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8007612:	b919      	cbnz	r1, 800761c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007614:	68c3      	ldr	r3, [r0, #12]
 8007616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800761a:	e7f4      	b.n	8007606 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800761c:	2001      	movs	r0, #1
}
 800761e:	bd08      	pop	{r3, pc}

08007620 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007620:	0189      	lsls	r1, r1, #6
 8007622:	f041 0120 	orr.w	r1, r1, #32
 8007626:	4a06      	ldr	r2, [pc, #24]	; (8007640 <USB_FlushTxFifo+0x20>)
 8007628:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800762a:	3a01      	subs	r2, #1
 800762c:	d005      	beq.n	800763a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800762e:	6903      	ldr	r3, [r0, #16]
 8007630:	f013 0320 	ands.w	r3, r3, #32
 8007634:	d1f9      	bne.n	800762a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8007636:	4618      	mov	r0, r3
 8007638:	4770      	bx	lr
      return HAL_TIMEOUT;
 800763a:	2003      	movs	r0, #3
}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	00030d41 	.word	0x00030d41

08007644 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007644:	2310      	movs	r3, #16
 8007646:	4a06      	ldr	r2, [pc, #24]	; (8007660 <USB_FlushRxFifo+0x1c>)
 8007648:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800764a:	3a01      	subs	r2, #1
 800764c:	d005      	beq.n	800765a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800764e:	6903      	ldr	r3, [r0, #16]
 8007650:	f013 0310 	ands.w	r3, r3, #16
 8007654:	d1f9      	bne.n	800764a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8007656:	4618      	mov	r0, r3
 8007658:	4770      	bx	lr
      return HAL_TIMEOUT;
 800765a:	2003      	movs	r0, #3
}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	00030d41 	.word	0x00030d41

08007664 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007664:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007668:	4319      	orrs	r1, r3
 800766a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800766e:	2000      	movs	r0, #0
 8007670:	4770      	bx	lr
	...

08007674 <USB_DevInit>:
{
 8007674:	b084      	sub	sp, #16
 8007676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	a807      	add	r0, sp, #28
 800767e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8007682:	2300      	movs	r3, #0
 8007684:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007686:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8007688:	4619      	mov	r1, r3
 800768a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800768e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8007692:	3301      	adds	r3, #1
 8007694:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8007696:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007698:	d1f7      	bne.n	800768a <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800769a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800769c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076a0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 80076a2:	b95f      	cbnz	r7, 80076bc <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076aa:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b2:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ba:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80076bc:	2500      	movs	r5, #0
 80076be:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076c2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80076c6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076ca:	2103      	movs	r1, #3
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7ff ffc9 	bl	8007664 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076d2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80076d6:	2110      	movs	r1, #16
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff ffa1 	bl	8007620 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80076de:	4620      	mov	r0, r4
 80076e0:	f7ff ffb0 	bl	8007644 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 80076e4:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076e6:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 80076e8:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80076ea:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 80076ec:	61f5      	str	r5, [r6, #28]
 80076ee:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80076f6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076fa:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076fe:	4543      	cmp	r3, r8
 8007700:	d12f      	bne.n	8007762 <USB_DevInit+0xee>
 8007702:	2100      	movs	r1, #0
 8007704:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007708:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800770a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800770e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007712:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007716:	428b      	cmp	r3, r1
 8007718:	d134      	bne.n	8007784 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800771a:	6933      	ldr	r3, [r6, #16]
 800771c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007720:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007726:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800772a:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800772c:	69a3      	ldr	r3, [r4, #24]
 800772e:	f043 0310 	orr.w	r3, r3, #16
 8007732:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007734:	69a2      	ldr	r2, [r4, #24]
 8007736:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <USB_DevInit+0x134>)
 8007738:	4313      	orrs	r3, r2
 800773a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800773c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800773e:	b11b      	cbz	r3, 8007748 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007740:	69a3      	ldr	r3, [r4, #24]
 8007742:	f043 0308 	orr.w	r3, r3, #8
 8007746:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007748:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800774a:	bf01      	itttt	eq
 800774c:	69a3      	ldreq	r3, [r4, #24]
 800774e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007752:	f043 0304 	orreq.w	r3, r3, #4
 8007756:	61a3      	streq	r3, [r4, #24]
}
 8007758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	2000      	movs	r0, #0
 800775e:	b004      	add	sp, #16
 8007760:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007762:	f8d2 c000 	ldr.w	ip, [r2]
 8007766:	f1bc 0f00 	cmp.w	ip, #0
 800776a:	da09      	bge.n	8007780 <USB_DevInit+0x10c>
      if (i == 0U)
 800776c:	b933      	cbnz	r3, 800777c <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800776e:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007770:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007772:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007774:	f8c2 e008 	str.w	lr, [r2, #8]
 8007778:	3220      	adds	r2, #32
 800777a:	e7c0      	b.n	80076fe <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800777c:	6010      	str	r0, [r2, #0]
 800777e:	e7f7      	b.n	8007770 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007780:	6011      	str	r1, [r2, #0]
 8007782:	e7f5      	b.n	8007770 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007784:	f8d2 8000 	ldr.w	r8, [r2]
 8007788:	f1b8 0f00 	cmp.w	r8, #0
 800778c:	da0a      	bge.n	80077a4 <USB_DevInit+0x130>
      if (i == 0U)
 800778e:	b939      	cbnz	r1, 80077a0 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007790:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007794:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007796:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007798:	f8c2 c008 	str.w	ip, [r2, #8]
 800779c:	3220      	adds	r2, #32
 800779e:	e7ba      	b.n	8007716 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077a0:	6015      	str	r5, [r2, #0]
 80077a2:	e7f7      	b.n	8007794 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077a4:	6010      	str	r0, [r2, #0]
 80077a6:	e7f5      	b.n	8007794 <USB_DevInit+0x120>
 80077a8:	803c3800 	.word	0x803c3800

080077ac <USB_ActivateEndpoint>:
{
 80077ac:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80077ae:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80077b0:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 80077b2:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 80077b6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80077ba:	2a01      	cmp	r2, #1
 80077bc:	f004 050f 	and.w	r5, r4, #15
 80077c0:	d11b      	bne.n	80077fa <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 80077c2:	40aa      	lsls	r2, r5
 80077c4:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80077c6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 80077ca:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80077cc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80077d0:	041a      	lsls	r2, r3, #16
 80077d2:	d410      	bmi.n	80077f6 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077d4:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077d6:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077d8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80077dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80077ec:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80077f6:	2000      	movs	r0, #0
 80077f8:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80077fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077fe:	40aa      	lsls	r2, r5
 8007800:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007802:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007806:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007808:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	d4f2      	bmi.n	80077f6 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007810:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8007812:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007814:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007824:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800782e:	e7e2      	b.n	80077f6 <USB_ActivateEndpoint+0x4a>

08007830 <USB_DeactivateEndpoint>:
{
 8007830:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8007832:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007834:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007836:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800783a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800783e:	2b01      	cmp	r3, #1
 8007840:	f004 050f 	and.w	r5, r4, #15
 8007844:	d110      	bne.n	8007868 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007846:	40ab      	lsls	r3, r5
 8007848:	43db      	mvns	r3, r3
 800784a:	4019      	ands	r1, r3
 800784c:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 800784e:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007850:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007854:	400b      	ands	r3, r1
 8007856:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007858:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <USB_DeactivateEndpoint+0x5c>)
 800785e:	4013      	ands	r3, r2
 8007860:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007864:	2000      	movs	r0, #0
 8007866:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800786c:	40ab      	lsls	r3, r5
 800786e:	43db      	mvns	r3, r3
 8007870:	4019      	ands	r1, r3
 8007872:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007874:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007876:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 800787a:	400b      	ands	r3, r1
 800787c:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800787e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007882:	4b03      	ldr	r3, [pc, #12]	; (8007890 <USB_DeactivateEndpoint+0x60>)
 8007884:	4013      	ands	r3, r2
 8007886:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800788a:	e7eb      	b.n	8007864 <USB_DeactivateEndpoint+0x34>
 800788c:	ec337800 	.word	0xec337800
 8007890:	eff37800 	.word	0xeff37800

08007894 <USB_EP0StartXfer>:
{
 8007894:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007896:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007898:	780a      	ldrb	r2, [r1, #0]
 800789a:	694d      	ldr	r5, [r1, #20]
 800789c:	4e35      	ldr	r6, [pc, #212]	; (8007974 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 800789e:	2b01      	cmp	r3, #1
 80078a0:	f04f 0320 	mov.w	r3, #32
 80078a4:	d145      	bne.n	8007932 <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078a6:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 80078aa:	bb45      	cbnz	r5, 80078fe <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ac:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80078b0:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80078b4:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80078b8:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078bc:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80078c0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80078c4:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078c8:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80078cc:	4026      	ands	r6, r4
 80078ce:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 80078d2:	694b      	ldr	r3, [r1, #20]
 80078d4:	b14b      	cbz	r3, 80078ea <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 80078d6:	780b      	ldrb	r3, [r1, #0]
 80078d8:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 80078dc:	f003 010f 	and.w	r1, r3, #15
 80078e0:	2301      	movs	r3, #1
 80078e2:	408b      	lsls	r3, r1
 80078e4:	432b      	orrs	r3, r5
 80078e6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078ea:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80078ee:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 80078f2:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 80078f6:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80078fa:	2000      	movs	r0, #0
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	691c      	ldr	r4, [r3, #16]
 8007904:	4026      	ands	r6, r4
 8007906:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007908:	691c      	ldr	r4, [r3, #16]
 800790a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800790e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007912:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007914:	688c      	ldr	r4, [r1, #8]
 8007916:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007918:	bf88      	it	hi
 800791a:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800791c:	691c      	ldr	r4, [r3, #16]
 800791e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007922:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007924:	694c      	ldr	r4, [r1, #20]
 8007926:	691d      	ldr	r5, [r3, #16]
 8007928:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800792c:	432c      	orrs	r4, r5
 800792e:	611c      	str	r4, [r3, #16]
 8007930:	e7cf      	b.n	80078d2 <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007932:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007936:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	4032      	ands	r2, r6
 800793e:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007940:	691a      	ldr	r2, [r3, #16]
 8007942:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007946:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800794a:	611a      	str	r2, [r3, #16]
 800794c:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 800794e:	b105      	cbz	r5, 8007952 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8007950:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007952:	6919      	ldr	r1, [r3, #16]
 8007954:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007958:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800795a:	6919      	ldr	r1, [r3, #16]
 800795c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007960:	430a      	orrs	r2, r1
 8007962:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007964:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007968:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800796c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007970:	e7c3      	b.n	80078fa <USB_EP0StartXfer+0x66>
 8007972:	bf00      	nop
 8007974:	fff80000 	.word	0xfff80000

08007978 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8007978:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800797a:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 800797e:	f023 0303 	bic.w	r3, r3, #3
 8007982:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007986:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8007988:	4299      	cmp	r1, r3
 800798a:	d101      	bne.n	8007990 <USB_WritePacket+0x18>
}
 800798c:	2000      	movs	r0, #0
 800798e:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007990:	f851 0b04 	ldr.w	r0, [r1], #4
 8007994:	6010      	str	r0, [r2, #0]
 8007996:	e7f7      	b.n	8007988 <USB_WritePacket+0x10>

08007998 <USB_EPStartXfer>:
{
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800799a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800799c:	780d      	ldrb	r5, [r1, #0]
 800799e:	4e5f      	ldr	r6, [pc, #380]	; (8007b1c <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	f04f 0220 	mov.w	r2, #32
 80079a6:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079a8:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 80079ac:	d169      	bne.n	8007a82 <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 80079ae:	bb83      	cbnz	r3, 8007a12 <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079b0:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 80079b4:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 80079b8:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80079bc:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80079c0:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079c2:	6922      	ldr	r2, [r4, #16]
 80079c4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80079c8:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079ca:	6922      	ldr	r2, [r4, #16]
 80079cc:	4016      	ands	r6, r2
 80079ce:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 80079d0:	78ce      	ldrb	r6, [r1, #3]
 80079d2:	2e01      	cmp	r6, #1
 80079d4:	f000 8094 	beq.w	8007b00 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 80079d8:	b153      	cbz	r3, 80079f0 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 80079da:	780a      	ldrb	r2, [r1, #0]
 80079dc:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 80079e0:	f002 040f 	and.w	r4, r2, #15
 80079e4:	2201      	movs	r2, #1
 80079e6:	40a2      	lsls	r2, r4
 80079e8:	ea42 020e 	orr.w	r2, r2, lr
 80079ec:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079f0:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 80079f4:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079f6:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 80079fa:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80079fe:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007a02:	d104      	bne.n	8007a0e <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007a04:	780a      	ldrb	r2, [r1, #0]
 8007a06:	68c9      	ldr	r1, [r1, #12]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f7ff ffb5 	bl	8007978 <USB_WritePacket>
}
 8007a0e:	2000      	movs	r0, #0
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a12:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007a16:	4034      	ands	r4, r6
 8007a18:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a1c:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a20:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a22:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a26:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a2a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a2e:	199c      	adds	r4, r3, r6
 8007a30:	3c01      	subs	r4, #1
 8007a32:	fbb4 f6f6 	udiv	r6, r4, r6
 8007a36:	4c3a      	ldr	r4, [pc, #232]	; (8007b20 <USB_EPStartXfer+0x188>)
 8007a38:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8007a3c:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8007a40:	433c      	orrs	r4, r7
 8007a42:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a46:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8007a4a:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8007a4e:	4334      	orrs	r4, r6
 8007a50:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8007a54:	78cc      	ldrb	r4, [r1, #3]
 8007a56:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007a5c:	d1b8      	bne.n	80079d0 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a5e:	6914      	ldr	r4, [r2, #16]
 8007a60:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007a64:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a66:	6914      	ldr	r4, [r2, #16]
 8007a68:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007a6c:	6114      	str	r4, [r2, #16]
 8007a6e:	e7af      	b.n	80079d0 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a70:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007a74:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007a78:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a7c:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8007a80:	e7b6      	b.n	80079f0 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a82:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8007a86:	692c      	ldr	r4, [r5, #16]
 8007a88:	4034      	ands	r4, r6
 8007a8a:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a8c:	692c      	ldr	r4, [r5, #16]
 8007a8e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a92:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a96:	612c      	str	r4, [r5, #16]
 8007a98:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8007a9a:	b9fb      	cbnz	r3, 8007adc <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a9c:	692b      	ldr	r3, [r5, #16]
 8007a9e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007aa2:	431c      	orrs	r4, r3
 8007aa4:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007aa6:	692b      	ldr	r3, [r5, #16]
 8007aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aac:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007aae:	78cb      	ldrb	r3, [r1, #3]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10c      	bne.n	8007ace <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ab4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007ab8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007abc:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007ac0:	bf0c      	ite	eq
 8007ac2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ac6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007aca:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ace:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ad6:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8007ada:	e798      	b.n	8007a0e <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007adc:	4e10      	ldr	r6, [pc, #64]	; (8007b20 <USB_EPStartXfer+0x188>)
 8007ade:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ae0:	4423      	add	r3, r4
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ae8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8007aec:	433e      	orrs	r6, r7
 8007aee:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	692e      	ldr	r6, [r5, #16]
 8007af4:	435c      	muls	r4, r3
 8007af6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007afa:	4334      	orrs	r4, r6
 8007afc:	612c      	str	r4, [r5, #16]
 8007afe:	e7d6      	b.n	8007aae <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b00:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007b04:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007b08:	f04f 0220 	mov.w	r2, #32
 8007b0c:	d0b0      	beq.n	8007a70 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b0e:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007b12:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007b16:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007b1a:	e7af      	b.n	8007a7c <USB_EPStartXfer+0xe4>
 8007b1c:	fff80000 	.word	0xfff80000
 8007b20:	1ff80000 	.word	0x1ff80000

08007b24 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b24:	3203      	adds	r2, #3
 8007b26:	f022 0203 	bic.w	r2, r2, #3
 8007b2a:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007b2c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8007b30:	4291      	cmp	r1, r2
 8007b32:	d101      	bne.n	8007b38 <USB_ReadPacket+0x14>
}
 8007b34:	4608      	mov	r0, r1
 8007b36:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007b38:	6803      	ldr	r3, [r0, #0]
 8007b3a:	f841 3b04 	str.w	r3, [r1], #4
 8007b3e:	e7f7      	b.n	8007b30 <USB_ReadPacket+0xc>

08007b40 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8007b40:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007b42:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b4a:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007b4e:	d112      	bne.n	8007b76 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b50:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	db06      	blt.n	8007b66 <USB_EPSetStall+0x26>
 8007b58:	b12a      	cbz	r2, 8007b66 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b5a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b62:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b66:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b6e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007b72:	2000      	movs	r0, #0
 8007b74:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b76:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	db06      	blt.n	8007b8c <USB_EPSetStall+0x4c>
 8007b7e:	b12a      	cbz	r2, 8007b8c <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b80:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007b84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b88:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b8c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b94:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007b98:	e7eb      	b.n	8007b72 <USB_EPSetStall+0x32>

08007b9a <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8007b9a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007b9c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ba4:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007ba8:	d111      	bne.n	8007bce <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007baa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007bae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bb2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bb6:	78cb      	ldrb	r3, [r1, #3]
 8007bb8:	3b02      	subs	r3, #2
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d805      	bhi.n	8007bca <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bbe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007bca:	2000      	movs	r0, #0
 8007bcc:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bd6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bda:	78cb      	ldrb	r3, [r1, #3]
 8007bdc:	3b02      	subs	r3, #2
 8007bde:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007be0:	bf9e      	ittt	ls
 8007be2:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8007be6:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007bea:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8007bee:	e7ec      	b.n	8007bca <USB_EPClearStall+0x30>

08007bf0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007bf0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007bf4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bf8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bfc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c00:	0109      	lsls	r1, r1, #4
 8007c02:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007c06:	4319      	orrs	r1, r3
 8007c08:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	4770      	bx	lr

08007c10 <USB_DevConnect>:
{
 8007c10:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c12:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007c16:	f023 0302 	bic.w	r3, r3, #2
 8007c1a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007c1e:	2003      	movs	r0, #3
 8007c20:	f7f9 fa04 	bl	800102c <HAL_Delay>
}
 8007c24:	2000      	movs	r0, #0
 8007c26:	bd08      	pop	{r3, pc}

08007c28 <USB_DevDisconnect>:
{
 8007c28:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c2a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007c2e:	f043 0302 	orr.w	r3, r3, #2
 8007c32:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007c36:	2003      	movs	r0, #3
 8007c38:	f7f9 f9f8 	bl	800102c <HAL_Delay>
}
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	bd08      	pop	{r3, pc}

08007c40 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007c40:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007c42:	6980      	ldr	r0, [r0, #24]
}
 8007c44:	4010      	ands	r0, r2
 8007c46:	4770      	bx	lr

08007c48 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007c48:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007c4c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c50:	69c0      	ldr	r0, [r0, #28]
 8007c52:	4018      	ands	r0, r3
}
 8007c54:	0c00      	lsrs	r0, r0, #16
 8007c56:	4770      	bx	lr

08007c58 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007c58:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007c5c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c60:	69c0      	ldr	r0, [r0, #28]
 8007c62:	4018      	ands	r0, r3
}
 8007c64:	b280      	uxth	r0, r0
 8007c66:	4770      	bx	lr

08007c68 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c68:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c6c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c70:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c74:	6940      	ldr	r0, [r0, #20]
}
 8007c76:	4010      	ands	r0, r2
 8007c78:	4770      	bx	lr

08007c7a <USB_ReadDevInEPInterrupt>:
{
 8007c7a:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8007c7c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c80:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c84:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007c88:	f001 010f 	and.w	r1, r1, #15
 8007c8c:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c8e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007c92:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c94:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4323      	orrs	r3, r4
}
 8007c9a:	4018      	ands	r0, r3
 8007c9c:	bd10      	pop	{r4, pc}

08007c9e <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007c9e:	6940      	ldr	r0, [r0, #20]
}
 8007ca0:	f000 0001 	and.w	r0, r0, #1
 8007ca4:	4770      	bx	lr

08007ca6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ca6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007caa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007cae:	f023 0307 	bic.w	r3, r3, #7
 8007cb2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007cb6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	f002 0206 	and.w	r2, r2, #6
 8007cc0:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007cc2:	bf02      	ittt	eq
 8007cc4:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8007cc8:	f042 0203 	orreq.w	r2, r2, #3
 8007ccc:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd6:	605a      	str	r2, [r3, #4]
}
 8007cd8:	2000      	movs	r0, #0
 8007cda:	4770      	bx	lr

08007cdc <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007cdc:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007cea:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	f042 0218 	orr.w	r2, r2, #24
 8007cf2:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007cfa:	611a      	str	r2, [r3, #16]
}
 8007cfc:	4770      	bx	lr
	...

08007d00 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8007d00:	2329      	movs	r3, #41	; 0x29
 8007d02:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8007d04:	4800      	ldr	r0, [pc, #0]	; (8007d08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8007d06:	4770      	bx	lr
 8007d08:	2000005c 	.word	0x2000005c

08007d0c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8007d0c:	2329      	movs	r3, #41	; 0x29
 8007d0e:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8007d10:	4800      	ldr	r0, [pc, #0]	; (8007d14 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8007d12:	4770      	bx	lr
 8007d14:	20000088 	.word	0x20000088

08007d18 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007d18:	2329      	movs	r3, #41	; 0x29
 8007d1a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8007d1c:	4800      	ldr	r0, [pc, #0]	; (8007d20 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8007d1e:	4770      	bx	lr
 8007d20:	200000cc 	.word	0x200000cc

08007d24 <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007d24:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8007d28:	2000      	movs	r0, #0
 8007d2a:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8007d2c:	4770      	bx	lr

08007d2e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d2e:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007d30:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8007d34:	69a3      	ldr	r3, [r4, #24]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d107      	bne.n	8007d4a <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007d3a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007d3e:	7861      	ldrb	r1, [r4, #1]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	7820      	ldrb	r0, [r4, #0]
 8007d44:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	bd10      	pop	{r4, pc}
	...

08007d50 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007d50:	230a      	movs	r3, #10
 8007d52:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8007d54:	4800      	ldr	r0, [pc, #0]	; (8007d58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8007d56:	4770      	bx	lr
 8007d58:	200000c0 	.word	0x200000c0

08007d5c <USBD_CUSTOM_HID_DataOut>:
{
 8007d5c:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007d5e:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007d62:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007d66:	7869      	ldrb	r1, [r5, #1]
 8007d68:	68db      	ldr	r3, [r3, #12]
{
 8007d6a:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007d6c:	7828      	ldrb	r0, [r5, #0]
 8007d6e:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8007d70:	230c      	movs	r3, #12
 8007d72:	462a      	mov	r2, r5
 8007d74:	2101      	movs	r1, #1
 8007d76:	4620      	mov	r0, r4
 8007d78:	f017 fc3e 	bl	801f5f8 <USBD_LL_PrepareReceive>
}
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}

08007d80 <USBD_CUSTOM_HID_Setup>:
{
 8007d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8007d82:	2500      	movs	r5, #0
 8007d84:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d88:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007d8a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d8e:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8007d92:	4603      	mov	r3, r0
 8007d94:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d96:	d028      	beq.n	8007dea <USBD_CUSTOM_HID_Setup+0x6a>
 8007d98:	2d20      	cmp	r5, #32
 8007d9a:	d161      	bne.n	8007e60 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8007d9c:	7849      	ldrb	r1, [r1, #1]
 8007d9e:	3902      	subs	r1, #2
 8007da0:	2909      	cmp	r1, #9
 8007da2:	d85b      	bhi.n	8007e5c <USBD_CUSTOM_HID_Setup+0xdc>
 8007da4:	e8df f001 	tbb	[pc, r1]
 8007da8:	5a5a0a15 	.word	0x5a5a0a15
 8007dac:	195a5a5a 	.word	0x195a5a5a
 8007db0:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 8007db2:	7893      	ldrb	r3, [r2, #2]
 8007db4:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 8007db6:	2000      	movs	r0, #0
}
 8007db8:	b003      	add	sp, #12
 8007dba:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fc18 	bl	80085f8 <USBD_CtlSendData>
 8007dc8:	e7f5      	b.n	8007db6 <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007dca:	8853      	ldrh	r3, [r2, #2]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	6123      	str	r3, [r4, #16]
 8007dd0:	e7f1      	b.n	8007db6 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f104 0110 	add.w	r1, r4, #16
 8007dd8:	e7f3      	b.n	8007dc2 <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 8007dda:	2101      	movs	r1, #1
 8007ddc:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8007dde:	88d2      	ldrh	r2, [r2, #6]
 8007de0:	4621      	mov	r1, r4
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fc1d 	bl	8008622 <USBD_CtlPrepareRx>
 8007de8:	e7e5      	b.n	8007db6 <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 8007dea:	7849      	ldrb	r1, [r1, #1]
 8007dec:	290b      	cmp	r1, #11
 8007dee:	d835      	bhi.n	8007e5c <USBD_CUSTOM_HID_Setup+0xdc>
 8007df0:	e8df f001 	tbb	[pc, r1]
 8007df4:	34343406 	.word	0x34343406
 8007df8:	340e3434 	.word	0x340e3434
 8007dfc:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e00:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007e04:	2903      	cmp	r1, #3
 8007e06:	d129      	bne.n	8007e5c <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f10d 0106 	add.w	r1, sp, #6
 8007e0e:	e7d8      	b.n	8007dc2 <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007e10:	8851      	ldrh	r1, [r2, #2]
 8007e12:	0a09      	lsrs	r1, r1, #8
 8007e14:	2922      	cmp	r1, #34	; 0x22
 8007e16:	d107      	bne.n	8007e28 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007e18:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007e1a:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007e1e:	2a21      	cmp	r2, #33	; 0x21
 8007e20:	bf28      	it	cs
 8007e22:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007e24:	6809      	ldr	r1, [r1, #0]
 8007e26:	e7cc      	b.n	8007dc2 <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007e28:	2921      	cmp	r1, #33	; 0x21
 8007e2a:	d105      	bne.n	8007e38 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007e2c:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8007e2e:	490e      	ldr	r1, [pc, #56]	; (8007e68 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007e30:	2a09      	cmp	r2, #9
 8007e32:	bf28      	it	cs
 8007e34:	2209      	movcs	r2, #9
 8007e36:	e7c4      	b.n	8007dc2 <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8007e38:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	e7c1      	b.n	8007dc2 <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3e:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007e42:	2903      	cmp	r1, #3
 8007e44:	d10a      	bne.n	8007e5c <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007e46:	2201      	movs	r2, #1
 8007e48:	f104 0114 	add.w	r1, r4, #20
 8007e4c:	e7b9      	b.n	8007dc2 <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4e:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007e52:	2903      	cmp	r1, #3
 8007e54:	d102      	bne.n	8007e5c <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007e56:	7893      	ldrb	r3, [r2, #2]
 8007e58:	6163      	str	r3, [r4, #20]
 8007e5a:	e7ac      	b.n	8007db6 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8007e60:	f000 fba3 	bl	80085aa <USBD_CtlError>
    ret = USBD_FAIL;
 8007e64:	2002      	movs	r0, #2
    break;
 8007e66:	e7a7      	b.n	8007db8 <USBD_CUSTOM_HID_Setup+0x38>
 8007e68:	200000b4 	.word	0x200000b4

08007e6c <USBD_CUSTOM_HID_DeInit>:
{
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007e70:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e72:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007e74:	f017 fb66 	bl	801f544 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e78:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f017 fb61 	bl	801f544 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8007e82:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007e86:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8007e8a:	b14b      	cbz	r3, 8007ea0 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e8c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e94:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8007e98:	f017 fbf2 	bl	801f680 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e9c:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}

08007ea4 <USBD_CUSTOM_HID_Init>:
{
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007ea8:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007eaa:	2340      	movs	r3, #64	; 0x40
 8007eac:	2203      	movs	r2, #3
 8007eae:	2181      	movs	r1, #129	; 0x81
 8007eb0:	f017 fb38 	bl	801f524 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007eb4:	230c      	movs	r3, #12
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007eba:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f017 fb31 	bl	801f524 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007ec2:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8007ec6:	2020      	movs	r0, #32
 8007ec8:	f017 fbd6 	bl	801f678 <USBD_static_malloc>
 8007ecc:	4606      	mov	r6, r0
 8007ece:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8007ed2:	b168      	cbz	r0, 8007ef0 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007ed4:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 8007ed8:	2700      	movs	r7, #0
 8007eda:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f017 fb86 	bl	801f5f8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8007eec:	4638      	mov	r0, r7
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8007ef0:	4620      	mov	r0, r4
}
 8007ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ef4 <USBD_CUSTOM_HID_SendReport>:
{
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8007ef8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007efc:	2a03      	cmp	r2, #3
 8007efe:	d109      	bne.n	8007f14 <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f00:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 8007f04:	7f35      	ldrb	r5, [r6, #28]
 8007f06:	2401      	movs	r4, #1
 8007f08:	b935      	cbnz	r5, 8007f18 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007f0a:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 8007f0c:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007f0e:	2181      	movs	r1, #129	; 0x81
 8007f10:	f017 fb64 	bl	801f5dc <USBD_LL_Transmit>
  return USBD_OK;
 8007f14:	2000      	movs	r0, #0
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8007f18:	4620      	mov	r0, r4
}
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}

08007f1c <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8007f1c:	b119      	cbz	r1, 8007f26 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8007f1e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8007f22:	2000      	movs	r0, #0
 8007f24:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8007f26:	2002      	movs	r0, #2
  }

  return ret;
}
 8007f28:	4770      	bx	lr

08007f2a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f2a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007f2c:	b180      	cbz	r0, 8007f50 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007f2e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007f32:	b113      	cbz	r3, 8007f3a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007f3a:	b109      	cbz	r1, 8007f40 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007f3c:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007f40:	2301      	movs	r3, #1
 8007f42:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8007f46:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f48:	f017 faaa 	bl	801f4a0 <USBD_LL_Init>

  return USBD_OK;
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007f50:	2002      	movs	r0, #2
}
 8007f52:	bd08      	pop	{r3, pc}

08007f54 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8007f54:	b119      	cbz	r1, 8007f5e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007f56:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007f5e:	2002      	movs	r0, #2
  }

  return status;
}
 8007f60:	4770      	bx	lr

08007f62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007f62:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f64:	f017 fad0 	bl	801f508 <USBD_LL_Start>

  return USBD_OK;
}
 8007f68:	2000      	movs	r0, #0
 8007f6a:	bd08      	pop	{r3, pc}

08007f6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f6c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8007f6e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007f72:	b90b      	cbnz	r3, 8007f78 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007f74:	2002      	movs	r0, #2
 8007f76:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4798      	blx	r3
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d1f9      	bne.n	8007f74 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007f80:	bd08      	pop	{r3, pc}

08007f82 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f82:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f84:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4798      	blx	r3
  return USBD_OK;
}
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	bd08      	pop	{r3, pc}

08007f90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f94:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 faf2 	bl	8008582 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f9e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007fa0:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8007fa4:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8007fa8:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8007fac:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8007fb0:	f001 031f 	and.w	r3, r1, #31
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d00e      	beq.n	8007fd6 <USBD_LL_SetupStage+0x46>
 8007fb8:	d307      	bcc.n	8007fca <USBD_LL_SetupStage+0x3a>
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d010      	beq.n	8007fe0 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fbe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f017 facc 	bl	801f560 <USBD_LL_StallEP>
    break;
 8007fc8:	e003      	b.n	8007fd2 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8007fca:	4629      	mov	r1, r5
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 f901 	bl	80081d4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 fa25 	bl	8008428 <USBD_StdItfReq>
    break;
 8007fde:	e7f8      	b.n	8007fd2 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 fa45 	bl	8008472 <USBD_StdEPReq>
    break;
 8007fe8:	e7f3      	b.n	8007fd2 <USBD_LL_SetupStage+0x42>

08007fea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fea:	b570      	push	{r4, r5, r6, lr}
 8007fec:	4605      	mov	r5, r0
 8007fee:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007ff0:	bb39      	cbnz	r1, 8008042 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ff2:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d11e      	bne.n	8008038 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8007ffa:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8007ffe:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8008002:	4293      	cmp	r3, r2
 8008004:	d90b      	bls.n	800801e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8008006:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8008008:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800800a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800800e:	bf8c      	ite	hi
 8008010:	b29a      	uxthhi	r2, r3
 8008012:	b292      	uxthls	r2, r2
 8008014:	4631      	mov	r1, r6
 8008016:	f000 fb13 	bl	8008640 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800801a:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800801c:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800801e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	b123      	cbz	r3, 8008030 <USBD_LL_DataOutStage+0x46>
 8008026:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800802a:	2a03      	cmp	r2, #3
 800802c:	d100      	bne.n	8008030 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800802e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008030:	4628      	mov	r0, r5
 8008032:	f000 fb0d 	bl	8008650 <USBD_CtlSendStatus>
 8008036:	e7f0      	b.n	800801a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008038:	2b05      	cmp	r3, #5
 800803a:	d1ee      	bne.n	800801a <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 800803c:	f017 fa90 	bl	801f560 <USBD_LL_StallEP>
 8008040:	e7eb      	b.n	800801a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8008042:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	b12b      	cbz	r3, 8008056 <USBD_LL_DataOutStage+0x6c>
 800804a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800804e:	2a03      	cmp	r2, #3
 8008050:	d101      	bne.n	8008056 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8008052:	4798      	blx	r3
 8008054:	e7e1      	b.n	800801a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8008056:	2002      	movs	r0, #2
}
 8008058:	bd70      	pop	{r4, r5, r6, pc}

0800805a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800805a:	b570      	push	{r4, r5, r6, lr}
 800805c:	4613      	mov	r3, r2
 800805e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008060:	460e      	mov	r6, r1
 8008062:	2900      	cmp	r1, #0
 8008064:	d148      	bne.n	80080f8 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008066:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800806a:	2a02      	cmp	r2, #2
 800806c:	d13d      	bne.n	80080ea <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800806e:	6a05      	ldr	r5, [r0, #32]
 8008070:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008072:	4295      	cmp	r5, r2
 8008074:	d914      	bls.n	80080a0 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8008076:	1aaa      	subs	r2, r5, r2
 8008078:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800807a:	4619      	mov	r1, r3
 800807c:	b292      	uxth	r2, r2
 800807e:	f000 fac8 	bl	8008612 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008082:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008084:	461a      	mov	r2, r3
 8008086:	4619      	mov	r1, r3
 8008088:	4620      	mov	r0, r4
 800808a:	f017 fab5 	bl	801f5f8 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800808e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8008092:	2b01      	cmp	r3, #1
 8008094:	f04f 0000 	mov.w	r0, #0
 8008098:	d13a      	bne.n	8008110 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800809a:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 800809e:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 80080a0:	69c3      	ldr	r3, [r0, #28]
 80080a2:	fbb3 f5f2 	udiv	r5, r3, r2
 80080a6:	fb02 3515 	mls	r5, r2, r5, r3
 80080aa:	b965      	cbnz	r5, 80080c6 <USBD_LL_DataInStage+0x6c>
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d80a      	bhi.n	80080c6 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80080b0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d206      	bcs.n	80080c6 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080b8:	462a      	mov	r2, r5
 80080ba:	f000 faaa 	bl	8008612 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080be:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80080c2:	462b      	mov	r3, r5
 80080c4:	e7de      	b.n	8008084 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80080c6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	b12b      	cbz	r3, 80080da <USBD_LL_DataInStage+0x80>
 80080ce:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80080d2:	2a03      	cmp	r2, #3
 80080d4:	d101      	bne.n	80080da <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 80080d6:	4620      	mov	r0, r4
 80080d8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80080da:	2180      	movs	r1, #128	; 0x80
 80080dc:	4620      	mov	r0, r4
 80080de:	f017 fa3f 	bl	801f560 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fabf 	bl	8008666 <USBD_CtlReceiveStatus>
 80080e8:	e7d1      	b.n	800808e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080ea:	f032 0304 	bics.w	r3, r2, #4
 80080ee:	d1ce      	bne.n	800808e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	f017 fa35 	bl	801f560 <USBD_LL_StallEP>
 80080f6:	e7ca      	b.n	800808e <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80080f8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	b133      	cbz	r3, 800810e <USBD_LL_DataInStage+0xb4>
 8008100:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008104:	2a03      	cmp	r2, #3
 8008106:	d102      	bne.n	800810e <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008108:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800810a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800810c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800810e:	2002      	movs	r0, #2
}
 8008110:	bd70      	pop	{r4, r5, r6, pc}

08008112 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008112:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008114:	2200      	movs	r2, #0
{
 8008116:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008118:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800811a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800811c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800811e:	2340      	movs	r3, #64	; 0x40
 8008120:	f017 fa00 	bl	801f524 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008124:	4633      	mov	r3, r6
 8008126:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008128:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800812c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008130:	2200      	movs	r2, #0
 8008132:	4620      	mov	r0, r4
 8008134:	f017 f9f6 	bl	801f524 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008138:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800813c:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800813e:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008140:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008142:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008146:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800814a:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800814c:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8008150:	b123      	cbz	r3, 800815c <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008152:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008156:	4620      	mov	r0, r4
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800815c:	2000      	movs	r0, #0
 800815e:	bd70      	pop	{r4, r5, r6, pc}

08008160 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008160:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8008162:	2000      	movs	r0, #0
 8008164:	4770      	bx	lr

08008166 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008166:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800816a:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800816e:	2304      	movs	r3, #4
 8008170:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8008174:	2000      	movs	r0, #0
 8008176:	4770      	bx	lr

08008178 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8008178:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 800817c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8008180:	2000      	movs	r0, #0
 8008182:	4770      	bx	lr

08008184 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008184:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008186:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800818a:	2a03      	cmp	r2, #3
 800818c:	d104      	bne.n	8008198 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800818e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	b103      	cbz	r3, 8008198 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008196:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008198:	2000      	movs	r0, #0
 800819a:	bd08      	pop	{r3, pc}

0800819c <USBD_LL_IsoINIncomplete>:
 800819c:	2000      	movs	r0, #0
 800819e:	4770      	bx	lr

080081a0 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80081a0:	2000      	movs	r0, #0
 80081a2:	4770      	bx	lr

080081a4 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80081a4:	2000      	movs	r0, #0
 80081a6:	4770      	bx	lr

080081a8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80081a8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081aa:	2201      	movs	r2, #1
 80081ac:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081b0:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 80081b4:	7901      	ldrb	r1, [r0, #4]
 80081b6:	6852      	ldr	r2, [r2, #4]
 80081b8:	4790      	blx	r2

  return USBD_OK;
}
 80081ba:	2000      	movs	r0, #0
 80081bc:	bd08      	pop	{r3, pc}

080081be <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80081be:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80081c0:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80081c2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80081c4:	f017 f9cc 	bl	801f560 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80081c8:	4620      	mov	r0, r4
 80081ca:	2100      	movs	r1, #0
}
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80081d0:	f017 b9c6 	b.w	801f560 <USBD_LL_StallEP>

080081d4 <USBD_StdDevReq>:
{
 80081d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d6:	780b      	ldrb	r3, [r1, #0]
 80081d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081dc:	2b20      	cmp	r3, #32
{
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081e2:	d014      	beq.n	800820e <USBD_StdDevReq+0x3a>
 80081e4:	2b40      	cmp	r3, #64	; 0x40
 80081e6:	d012      	beq.n	800820e <USBD_StdDevReq+0x3a>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f040 809c 	bne.w	8008326 <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 80081ee:	784b      	ldrb	r3, [r1, #1]
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	f200 8097 	bhi.w	8008324 <USBD_StdDevReq+0x150>
 80081f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80081fa:	00ef      	.short	0x00ef
 80081fc:	00950109 	.word	0x00950109
 8008200:	00950102 	.word	0x00950102
 8008204:	00130089 	.word	0x00130089
 8008208:	00da0095 	.word	0x00da0095
 800820c:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 800820e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008212:	4629      	mov	r1, r5
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	4620      	mov	r0, r4
 8008218:	4798      	blx	r3
}
 800821a:	2000      	movs	r0, #0
 800821c:	b003      	add	sp, #12
 800821e:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8008220:	8849      	ldrh	r1, [r1, #2]
 8008222:	0a0b      	lsrs	r3, r1, #8
 8008224:	3b01      	subs	r3, #1
 8008226:	2b0e      	cmp	r3, #14
 8008228:	d87c      	bhi.n	8008324 <USBD_StdDevReq+0x150>
 800822a:	e8df f003 	tbb	[pc, r3]
 800822e:	2824      	.short	0x2824
 8008230:	5c7b7b35 	.word	0x5c7b7b35
 8008234:	7b7b7b65 	.word	0x7b7b7b65
 8008238:	7b7b7b7b 	.word	0x7b7b7b7b
 800823c:	08          	.byte	0x08
 800823d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800823e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008242:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008244:	7c20      	ldrb	r0, [r4, #16]
 8008246:	f10d 0106 	add.w	r1, sp, #6
 800824a:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 800824c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008250:	b152      	cbz	r2, 8008268 <USBD_StdDevReq+0x94>
 8008252:	88eb      	ldrh	r3, [r5, #6]
 8008254:	b143      	cbz	r3, 8008268 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8008256:	429a      	cmp	r2, r3
 8008258:	bf28      	it	cs
 800825a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800825c:	4601      	mov	r1, r0
 800825e:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8008260:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8008264:	f000 f9c8 	bl	80085f8 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8008268:	88eb      	ldrh	r3, [r5, #6]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1d5      	bne.n	800821a <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f9ee 	bl	8008650 <USBD_CtlSendStatus>
 8008274:	e7d1      	b.n	800821a <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008276:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	e7e2      	b.n	8008244 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800827e:	7c02      	ldrb	r2, [r0, #16]
 8008280:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008284:	b932      	cbnz	r2, 8008294 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008288:	f10d 0006 	add.w	r0, sp, #6
 800828c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800828e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008290:	7043      	strb	r3, [r0, #1]
 8008292:	e7db      	b.n	800824c <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	e7f7      	b.n	8008288 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8008298:	b2c9      	uxtb	r1, r1
 800829a:	2905      	cmp	r1, #5
 800829c:	d81c      	bhi.n	80082d8 <USBD_StdDevReq+0x104>
 800829e:	e8df f001 	tbb	[pc, r1]
 80082a2:	0703      	.short	0x0703
 80082a4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082a8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	e7c9      	b.n	8008244 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082b0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	e7c5      	b.n	8008244 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082b8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	e7c1      	b.n	8008244 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082c0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	e7bd      	b.n	8008244 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082c8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	e7b9      	b.n	8008244 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082d0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	e7b5      	b.n	8008244 <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 80082d8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80082dc:	f10d 0206 	add.w	r2, sp, #6
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	4798      	blx	r3
 80082e4:	e7b2      	b.n	800824c <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80082e6:	7c03      	ldrb	r3, [r0, #16]
 80082e8:	b9e3      	cbnz	r3, 8008324 <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082ea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80082ee:	f10d 0006 	add.w	r0, sp, #6
 80082f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f4:	4798      	blx	r3
 80082f6:	e7a9      	b.n	800824c <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80082f8:	7c03      	ldrb	r3, [r0, #16]
 80082fa:	b99b      	cbnz	r3, 8008324 <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082fc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008300:	f10d 0006 	add.w	r0, sp, #6
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008308:	2307      	movs	r3, #7
 800830a:	e7c1      	b.n	8008290 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800830c:	888b      	ldrh	r3, [r1, #4]
 800830e:	b94b      	cbnz	r3, 8008324 <USBD_StdDevReq+0x150>
 8008310:	88cb      	ldrh	r3, [r1, #6]
 8008312:	b93b      	cbnz	r3, 8008324 <USBD_StdDevReq+0x150>
 8008314:	884d      	ldrh	r5, [r1, #2]
 8008316:	2d7f      	cmp	r5, #127	; 0x7f
 8008318:	d804      	bhi.n	8008324 <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800831e:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008320:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008322:	d103      	bne.n	800832c <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 8008324:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008326:	f7ff ff4a 	bl	80081be <USBD_CtlError.constprop.1>
    break;
 800832a:	e776      	b.n	800821a <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 800832c:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008330:	f017 f946 	bl	801f5c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008334:	4620      	mov	r0, r4
 8008336:	f000 f98b 	bl	8008650 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800833a:	b11d      	cbz	r5, 8008344 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800833c:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800833e:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8008342:	e76a      	b.n	800821a <USBD_StdDevReq+0x46>
 8008344:	2301      	movs	r3, #1
 8008346:	e7fa      	b.n	800833e <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 8008348:	7889      	ldrb	r1, [r1, #2]
 800834a:	4d36      	ldr	r5, [pc, #216]	; (8008424 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800834c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800834e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008350:	d8e8      	bhi.n	8008324 <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 8008352:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008356:	2b02      	cmp	r3, #2
 8008358:	d008      	beq.n	800836c <USBD_StdDevReq+0x198>
 800835a:	2b03      	cmp	r3, #3
 800835c:	d015      	beq.n	800838a <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 800835e:	f7ff ff2e 	bl	80081be <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008362:	7829      	ldrb	r1, [r5, #0]
 8008364:	4620      	mov	r0, r4
 8008366:	f7ff fe0c 	bl	8007f82 <USBD_ClrClassConfig>
 800836a:	e756      	b.n	800821a <USBD_StdDevReq+0x46>
      if (cfgidx)
 800836c:	2900      	cmp	r1, #0
 800836e:	f43f af7e 	beq.w	800826e <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8008372:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008374:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8008376:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008378:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff fdf5 	bl	8007f6c <USBD_SetClassConfig>
 8008382:	2802      	cmp	r0, #2
 8008384:	f47f af73 	bne.w	800826e <USBD_StdDevReq+0x9a>
 8008388:	e7cc      	b.n	8008324 <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 800838a:	b931      	cbnz	r1, 800839a <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800838c:	2302      	movs	r3, #2
 800838e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008392:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008394:	f7ff fdf5 	bl	8007f82 <USBD_ClrClassConfig>
 8008398:	e769      	b.n	800826e <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 800839a:	6841      	ldr	r1, [r0, #4]
 800839c:	2901      	cmp	r1, #1
 800839e:	f43f af66 	beq.w	800826e <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083a2:	b2c9      	uxtb	r1, r1
 80083a4:	f7ff fded 	bl	8007f82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083a8:	7829      	ldrb	r1, [r5, #0]
 80083aa:	6061      	str	r1, [r4, #4]
 80083ac:	e7e6      	b.n	800837c <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 80083ae:	88ca      	ldrh	r2, [r1, #6]
 80083b0:	2a01      	cmp	r2, #1
 80083b2:	d1b7      	bne.n	8008324 <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 80083b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0b3      	beq.n	8008324 <USBD_StdDevReq+0x150>
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d903      	bls.n	80083c8 <USBD_StdDevReq+0x1f4>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d1af      	bne.n	8008324 <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083c4:	1d01      	adds	r1, r0, #4
 80083c6:	e003      	b.n	80083d0 <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 80083c8:	4601      	mov	r1, r0
 80083ca:	2300      	movs	r3, #0
 80083cc:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f911 	bl	80085f8 <USBD_CtlSendData>
 80083d6:	e720      	b.n	800821a <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 80083d8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80083dc:	3b01      	subs	r3, #1
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d8a0      	bhi.n	8008324 <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 80083e2:	88cb      	ldrh	r3, [r1, #6]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d19d      	bne.n	8008324 <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083e8:	2301      	movs	r3, #1
 80083ea:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80083ec:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 80083f0:	b10b      	cbz	r3, 80083f6 <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083f2:	2303      	movs	r3, #3
 80083f4:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80083f6:	2202      	movs	r2, #2
 80083f8:	f104 010c 	add.w	r1, r4, #12
 80083fc:	e7e8      	b.n	80083d0 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083fe:	884b      	ldrh	r3, [r1, #2]
 8008400:	2b01      	cmp	r3, #1
 8008402:	f47f af0a 	bne.w	800821a <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8008406:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800840a:	e730      	b.n	800826e <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 800840c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008410:	3b01      	subs	r3, #1
 8008412:	2b02      	cmp	r3, #2
 8008414:	d886      	bhi.n	8008324 <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008416:	884b      	ldrh	r3, [r1, #2]
 8008418:	2b01      	cmp	r3, #1
 800841a:	f47f aefe 	bne.w	800821a <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	e7f1      	b.n	8008406 <USBD_StdDevReq+0x232>
 8008422:	bf00      	nop
 8008424:	200015d4 	.word	0x200015d4

08008428 <USBD_StdItfReq>:
{
 8008428:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800842a:	780b      	ldrb	r3, [r1, #0]
 800842c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008430:	2b20      	cmp	r3, #32
{
 8008432:	4604      	mov	r4, r0
 8008434:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008436:	d002      	beq.n	800843e <USBD_StdItfReq+0x16>
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d000      	beq.n	800843e <USBD_StdItfReq+0x16>
 800843c:	b9b3      	cbnz	r3, 800846c <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800843e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8008442:	3b01      	subs	r3, #1
 8008444:	2b02      	cmp	r3, #2
 8008446:	d810      	bhi.n	800846a <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008448:	792b      	ldrb	r3, [r5, #4]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d80d      	bhi.n	800846a <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800844e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008452:	4629      	mov	r1, r5
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	4620      	mov	r0, r4
 8008458:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800845a:	88eb      	ldrh	r3, [r5, #6]
 800845c:	b91b      	cbnz	r3, 8008466 <USBD_StdItfReq+0x3e>
 800845e:	b910      	cbnz	r0, 8008466 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8008460:	4620      	mov	r0, r4
 8008462:	f000 f8f5 	bl	8008650 <USBD_CtlSendStatus>
}
 8008466:	2000      	movs	r0, #0
 8008468:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 800846a:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 800846c:	f7ff fea7 	bl	80081be <USBD_CtlError.constprop.1>
    break;
 8008470:	e7f9      	b.n	8008466 <USBD_StdItfReq+0x3e>

08008472 <USBD_StdEPReq>:
{
 8008472:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008474:	780a      	ldrb	r2, [r1, #0]
 8008476:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800847a:	2a20      	cmp	r2, #32
{
 800847c:	4604      	mov	r4, r0
 800847e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008480:	d013      	beq.n	80084aa <USBD_StdEPReq+0x38>
 8008482:	2a40      	cmp	r2, #64	; 0x40
 8008484:	d011      	beq.n	80084aa <USBD_StdEPReq+0x38>
 8008486:	b96a      	cbnz	r2, 80084a4 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8008488:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800848a:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800848c:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 800848e:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8008490:	d01f      	beq.n	80084d2 <USBD_StdEPReq+0x60>
 8008492:	d335      	bcc.n	8008500 <USBD_StdEPReq+0x8e>
 8008494:	2d03      	cmp	r5, #3
 8008496:	d105      	bne.n	80084a4 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8008498:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800849c:	2a02      	cmp	r2, #2
 800849e:	d026      	beq.n	80084ee <USBD_StdEPReq+0x7c>
 80084a0:	2a03      	cmp	r2, #3
 80084a2:	d00a      	beq.n	80084ba <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 80084a4:	f7ff fe8b 	bl	80081be <USBD_CtlError.constprop.1>
    break;
 80084a8:	e005      	b.n	80084b6 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 80084aa:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 80084ae:	4619      	mov	r1, r3
 80084b0:	6892      	ldr	r2, [r2, #8]
 80084b2:	4620      	mov	r0, r4
 80084b4:	4790      	blx	r2
}
 80084b6:	2000      	movs	r0, #0
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80084ba:	885a      	ldrh	r2, [r3, #2]
 80084bc:	b92a      	cbnz	r2, 80084ca <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084be:	064a      	lsls	r2, r1, #25
 80084c0:	d003      	beq.n	80084ca <USBD_StdEPReq+0x58>
 80084c2:	88db      	ldrh	r3, [r3, #6]
 80084c4:	b90b      	cbnz	r3, 80084ca <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 80084c6:	f017 f84b 	bl	801f560 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 f8c0 	bl	8008650 <USBD_CtlSendStatus>
        break;
 80084d0:	e7f1      	b.n	80084b6 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80084d2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80084d6:	2a02      	cmp	r2, #2
 80084d8:	d009      	beq.n	80084ee <USBD_StdEPReq+0x7c>
 80084da:	2a03      	cmp	r2, #3
 80084dc:	d1e2      	bne.n	80084a4 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80084de:	885b      	ldrh	r3, [r3, #2]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e8      	bne.n	80084b6 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 80084e4:	064d      	lsls	r5, r1, #25
 80084e6:	d0f0      	beq.n	80084ca <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80084e8:	f017 f848 	bl	801f57c <USBD_LL_ClearStallEP>
 80084ec:	e7ed      	b.n	80084ca <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ee:	064b      	lsls	r3, r1, #25
 80084f0:	d017      	beq.n	8008522 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 80084f2:	f017 f835 	bl	801f560 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80084f6:	2180      	movs	r1, #128	; 0x80
 80084f8:	4620      	mov	r0, r4
 80084fa:	f017 f831 	bl	801f560 <USBD_LL_StallEP>
 80084fe:	e7da      	b.n	80084b6 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8008500:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008504:	2b02      	cmp	r3, #2
 8008506:	d00e      	beq.n	8008526 <USBD_StdEPReq+0xb4>
 8008508:	2b03      	cmp	r3, #3
 800850a:	d1cb      	bne.n	80084a4 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 800850c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008510:	f04f 0314 	mov.w	r3, #20
 8008514:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008518:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 800851c:	d012      	beq.n	8008544 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800851e:	6992      	ldr	r2, [r2, #24]
 8008520:	b9da      	cbnz	r2, 800855a <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8008522:	4620      	mov	r0, r4
 8008524:	e7be      	b.n	80084a4 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008526:	0649      	lsls	r1, r1, #25
 8008528:	d1fb      	bne.n	8008522 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800852a:	0613      	lsls	r3, r2, #24
 800852c:	bf4c      	ite	mi
 800852e:	f100 0114 	addmi.w	r1, r0, #20
 8008532:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8008536:	2300      	movs	r3, #0
 8008538:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800853a:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800853c:	4620      	mov	r0, r4
 800853e:	f000 f85b 	bl	80085f8 <USBD_CtlSendData>
          break;
 8008542:	e7b8      	b.n	80084b6 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008544:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8008548:	2a00      	cmp	r2, #0
 800854a:	d0ea      	beq.n	8008522 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800854c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8008550:	fb03 0505 	mla	r5, r3, r5, r0
 8008554:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8008558:	e004      	b.n	8008564 <USBD_StdEPReq+0xf2>
 800855a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800855e:	fb05 3503 	mla	r5, r5, r3, r3
 8008562:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008564:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8008568:	d103      	bne.n	8008572 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 800856a:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800856c:	2202      	movs	r2, #2
 800856e:	4629      	mov	r1, r5
 8008570:	e7e4      	b.n	800853c <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008572:	4620      	mov	r0, r4
 8008574:	f017 f810 	bl	801f598 <USBD_LL_IsStallEP>
 8008578:	b108      	cbz	r0, 800857e <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 800857a:	2301      	movs	r3, #1
 800857c:	e7f5      	b.n	800856a <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 800857e:	6028      	str	r0, [r5, #0]
 8008580:	e7f4      	b.n	800856c <USBD_StdEPReq+0xfa>

08008582 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008582:	780b      	ldrb	r3, [r1, #0]
 8008584:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008586:	784b      	ldrb	r3, [r1, #1]
 8008588:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800858a:	78ca      	ldrb	r2, [r1, #3]
 800858c:	788b      	ldrb	r3, [r1, #2]
 800858e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008592:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008594:	794a      	ldrb	r2, [r1, #5]
 8008596:	790b      	ldrb	r3, [r1, #4]
 8008598:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800859c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800859e:	79ca      	ldrb	r2, [r1, #7]
 80085a0:	798b      	ldrb	r3, [r1, #6]
 80085a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80085a6:	80c3      	strh	r3, [r0, #6]
 80085a8:	4770      	bx	lr

080085aa <USBD_CtlError>:
{
 80085aa:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 80085ac:	2180      	movs	r1, #128	; 0x80
{
 80085ae:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80085b0:	f016 ffd6 	bl	801f560 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80085b4:	4620      	mov	r0, r4
 80085b6:	2100      	movs	r1, #0
}
 80085b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80085bc:	f016 bfd0 	b.w	801f560 <USBD_LL_StallEP>

080085c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085c0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80085c2:	b188      	cbz	r0, 80085e8 <USBD_GetString+0x28>
 80085c4:	4605      	mov	r5, r0
 80085c6:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80085c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	d1f9      	bne.n	80085c6 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80085d2:	3301      	adds	r3, #1
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80085d8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80085da:	2303      	movs	r3, #3
 80085dc:	704b      	strb	r3, [r1, #1]
 80085de:	3801      	subs	r0, #1
 80085e0:	2302      	movs	r3, #2
    while (*desc != '\0')
 80085e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80085e6:	b905      	cbnz	r5, 80085ea <USBD_GetString+0x2a>
 80085e8:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80085f0:	3302      	adds	r3, #2
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	548c      	strb	r4, [r1, r2]
 80085f6:	e7f4      	b.n	80085e2 <USBD_GetString+0x22>

080085f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80085f8:	b510      	push	{r4, lr}
 80085fa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085fc:	2202      	movs	r2, #2
 80085fe:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008602:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008604:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008606:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008608:	2100      	movs	r1, #0
 800860a:	f016 ffe7 	bl	801f5dc <USBD_LL_Transmit>

  return USBD_OK;
}
 800860e:	2000      	movs	r0, #0
 8008610:	bd10      	pop	{r4, pc}

08008612 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008612:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008614:	4613      	mov	r3, r2
 8008616:	460a      	mov	r2, r1
 8008618:	2100      	movs	r1, #0
 800861a:	f016 ffdf 	bl	801f5dc <USBD_LL_Transmit>

  return USBD_OK;
}
 800861e:	2000      	movs	r0, #0
 8008620:	bd08      	pop	{r3, pc}

08008622 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008622:	b510      	push	{r4, lr}
 8008624:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008626:	2203      	movs	r2, #3
 8008628:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800862c:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008630:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8008632:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008636:	2100      	movs	r1, #0
 8008638:	f016 ffde 	bl	801f5f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800863c:	2000      	movs	r0, #0
 800863e:	bd10      	pop	{r4, pc}

08008640 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008640:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008642:	4613      	mov	r3, r2
 8008644:	460a      	mov	r2, r1
 8008646:	2100      	movs	r1, #0
 8008648:	f016 ffd6 	bl	801f5f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800864c:	2000      	movs	r0, #0
 800864e:	bd08      	pop	{r3, pc}

08008650 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008650:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008652:	2304      	movs	r3, #4
 8008654:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008658:	2300      	movs	r3, #0
 800865a:	461a      	mov	r2, r3
 800865c:	4619      	mov	r1, r3
 800865e:	f016 ffbd 	bl	801f5dc <USBD_LL_Transmit>

  return USBD_OK;
}
 8008662:	2000      	movs	r0, #0
 8008664:	bd08      	pop	{r3, pc}

08008666 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008666:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008668:	2305      	movs	r3, #5
 800866a:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800866e:	2300      	movs	r3, #0
 8008670:	461a      	mov	r2, r3
 8008672:	4619      	mov	r1, r3
 8008674:	f016 ffc0 	bl	801f5f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008678:	2000      	movs	r0, #0
 800867a:	bd08      	pop	{r3, pc}

0800867c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800867c:	4b03      	ldr	r3, [pc, #12]	; (800868c <disk_status+0x10>)
 800867e:	181a      	adds	r2, r3, r0
 8008680:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008684:	7a10      	ldrb	r0, [r2, #8]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4718      	bx	r3
 800868c:	20001600 	.word	0x20001600

08008690 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <disk_initialize+0x1c>)
 8008692:	5c1a      	ldrb	r2, [r3, r0]
 8008694:	b942      	cbnz	r2, 80086a8 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8008696:	2201      	movs	r2, #1
 8008698:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800869a:	181a      	adds	r2, r3, r0
 800869c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80086a0:	7a10      	ldrb	r0, [r2, #8]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4718      	bx	r3
  }
  return stat;
}
 80086a8:	2000      	movs	r0, #0
 80086aa:	4770      	bx	lr
 80086ac:	20001600 	.word	0x20001600

080086b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80086b0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80086b2:	4c05      	ldr	r4, [pc, #20]	; (80086c8 <disk_read+0x18>)
 80086b4:	1825      	adds	r5, r4, r0
 80086b6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80086ba:	6860      	ldr	r0, [r4, #4]
 80086bc:	6884      	ldr	r4, [r0, #8]
 80086be:	7a28      	ldrb	r0, [r5, #8]
 80086c0:	46a4      	mov	ip, r4
  return res;
}
 80086c2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80086c4:	4760      	bx	ip
 80086c6:	bf00      	nop
 80086c8:	20001600 	.word	0x20001600

080086cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80086cc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80086ce:	4c05      	ldr	r4, [pc, #20]	; (80086e4 <disk_write+0x18>)
 80086d0:	1825      	adds	r5, r4, r0
 80086d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80086d6:	6860      	ldr	r0, [r4, #4]
 80086d8:	68c4      	ldr	r4, [r0, #12]
 80086da:	7a28      	ldrb	r0, [r5, #8]
 80086dc:	46a4      	mov	ip, r4
  return res;
}
 80086de:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80086e0:	4760      	bx	ip
 80086e2:	bf00      	nop
 80086e4:	20001600 	.word	0x20001600

080086e8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <disk_ioctl+0x18>)
{
 80086ea:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086ec:	181c      	adds	r4, r3, r0
 80086ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80086f2:	7a20      	ldrb	r0, [r4, #8]
 80086f4:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80086f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	4718      	bx	r3
 80086fe:	bf00      	nop
 8008700:	20001600 	.word	0x20001600

08008704 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8008704:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8008706:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8008708:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800870a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800870e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008712:	4770      	bx	lr

08008714 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008714:	0a0b      	lsrs	r3, r1, #8
 8008716:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008718:	7043      	strb	r3, [r0, #1]
 800871a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800871c:	0e09      	lsrs	r1, r1, #24
 800871e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8008720:	70c1      	strb	r1, [r0, #3]
 8008722:	4770      	bx	lr

08008724 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008724:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8008726:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800872a:	4290      	cmp	r0, r2
 800872c:	d1fb      	bne.n	8008726 <mem_set+0x2>
}
 800872e:	4770      	bx	lr

08008730 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008730:	4b15      	ldr	r3, [pc, #84]	; (8008788 <chk_lock+0x58>)
 8008732:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008734:	2500      	movs	r5, #0
 8008736:	462a      	mov	r2, r5
 8008738:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 800873a:	681e      	ldr	r6, [r3, #0]
 800873c:	b1a6      	cbz	r6, 8008768 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800873e:	6807      	ldr	r7, [r0, #0]
 8008740:	42be      	cmp	r6, r7
 8008742:	d112      	bne.n	800876a <chk_lock+0x3a>
 8008744:	685f      	ldr	r7, [r3, #4]
 8008746:	6886      	ldr	r6, [r0, #8]
 8008748:	42b7      	cmp	r7, r6
 800874a:	d10e      	bne.n	800876a <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 800874c:	689f      	ldr	r7, [r3, #8]
 800874e:	6946      	ldr	r6, [r0, #20]
 8008750:	42b7      	cmp	r7, r6
 8008752:	d10a      	bne.n	800876a <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008754:	b9b1      	cbnz	r1, 8008784 <chk_lock+0x54>
 8008756:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800875a:	8993      	ldrh	r3, [r2, #12]
 800875c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008760:	bf14      	ite	ne
 8008762:	2000      	movne	r0, #0
 8008764:	2010      	moveq	r0, #16
 8008766:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008768:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800876a:	3201      	adds	r2, #1
 800876c:	2a02      	cmp	r2, #2
 800876e:	f103 0310 	add.w	r3, r3, #16
 8008772:	d1e2      	bne.n	800873a <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008774:	b10d      	cbz	r5, 800877a <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008776:	2000      	movs	r0, #0
 8008778:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800877a:	2902      	cmp	r1, #2
 800877c:	bf0c      	ite	eq
 800877e:	2000      	moveq	r0, #0
 8008780:	2012      	movne	r0, #18
 8008782:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008784:	2010      	movs	r0, #16
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008788:	200015dc 	.word	0x200015dc

0800878c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800878c:	4a1c      	ldr	r2, [pc, #112]	; (8008800 <inc_lock+0x74>)
 800878e:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008790:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008792:	2300      	movs	r3, #0
 8008794:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8008796:	6814      	ldr	r4, [r2, #0]
 8008798:	42ac      	cmp	r4, r5
 800879a:	d107      	bne.n	80087ac <inc_lock+0x20>
 800879c:	6857      	ldr	r7, [r2, #4]
 800879e:	6884      	ldr	r4, [r0, #8]
 80087a0:	42a7      	cmp	r7, r4
 80087a2:	d103      	bne.n	80087ac <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 80087a4:	6897      	ldr	r7, [r2, #8]
 80087a6:	6944      	ldr	r4, [r0, #20]
 80087a8:	42a7      	cmp	r7, r4
 80087aa:	d01d      	beq.n	80087e8 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087ac:	3301      	adds	r3, #1
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	f102 0210 	add.w	r2, r2, #16
 80087b4:	d1ef      	bne.n	8008796 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087b6:	6833      	ldr	r3, [r6, #0]
 80087b8:	b113      	cbz	r3, 80087c0 <inc_lock+0x34>
 80087ba:	6933      	ldr	r3, [r6, #16]
 80087bc:	b9eb      	cbnz	r3, 80087fa <inc_lock+0x6e>
 80087be:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80087c0:	011c      	lsls	r4, r3, #4
 80087c2:	1932      	adds	r2, r6, r4
 80087c4:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 80087c6:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 80087c8:	6940      	ldr	r0, [r0, #20]
 80087ca:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80087cc:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 80087ce:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 80087d0:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087d2:	b979      	cbnz	r1, 80087f4 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087d4:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80087d8:	8992      	ldrh	r2, [r2, #12]
 80087da:	3201      	adds	r2, #1
 80087dc:	b292      	uxth	r2, r2
 80087de:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 80087e2:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087e4:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 80087e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087e8:	2900      	cmp	r1, #0
 80087ea:	d0f3      	beq.n	80087d4 <inc_lock+0x48>
 80087ec:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80087f0:	8992      	ldrh	r2, [r2, #12]
 80087f2:	b912      	cbnz	r2, 80087fa <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087f8:	e7f1      	b.n	80087de <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80087fa:	2000      	movs	r0, #0
 80087fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fe:	bf00      	nop
 8008800:	200015dc 	.word	0x200015dc

08008804 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008804:	3801      	subs	r0, #1
 8008806:	2801      	cmp	r0, #1
 8008808:	d80e      	bhi.n	8008828 <dec_lock+0x24>
		n = Files[i].ctr;
 800880a:	4a09      	ldr	r2, [pc, #36]	; (8008830 <dec_lock+0x2c>)
 800880c:	0103      	lsls	r3, r0, #4
 800880e:	18d1      	adds	r1, r2, r3
 8008810:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8008812:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8008816:	b280      	uxth	r0, r0
 8008818:	b108      	cbz	r0, 800881e <dec_lock+0x1a>
 800881a:	1e48      	subs	r0, r1, #1
 800881c:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 800881e:	18d1      	adds	r1, r2, r3
 8008820:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008822:	b918      	cbnz	r0, 800882c <dec_lock+0x28>
 8008824:	50d0      	str	r0, [r2, r3]
 8008826:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008828:	2002      	movs	r0, #2
 800882a:	4770      	bx	lr
		res = FR_OK;
 800882c:	2000      	movs	r0, #0
	}
	return res;
}
 800882e:	4770      	bx	lr
 8008830:	200015dc 	.word	0x200015dc

08008834 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008834:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8008836:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008838:	3b02      	subs	r3, #2
 800883a:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800883c:	bf3d      	ittte	cc
 800883e:	8943      	ldrhcc	r3, [r0, #10]
 8008840:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 8008842:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008846:	2000      	movcs	r0, #0
}
 8008848:	4770      	bx	lr

0800884a <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800884a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 800884c:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 800884e:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008850:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	fbb1 f1f3 	udiv	r1, r1, r3
 8008858:	8963      	ldrh	r3, [r4, #10]
 800885a:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800885e:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008860:	b130      	cbz	r0, 8008870 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008862:	4281      	cmp	r1, r0
 8008864:	d302      	bcc.n	800886c <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008866:	1a09      	subs	r1, r1, r0
 8008868:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800886a:	e7f8      	b.n	800885e <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 800886c:	6850      	ldr	r0, [r2, #4]
 800886e:	4408      	add	r0, r1
}
 8008870:	bd10      	pop	{r4, pc}

08008872 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008872:	6802      	ldr	r2, [r0, #0]
{
 8008874:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008876:	b152      	cbz	r2, 800888e <get_ldnumber+0x1c>
 8008878:	4611      	mov	r1, r2
 800887a:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800887c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008880:	2c20      	cmp	r4, #32
 8008882:	d90c      	bls.n	800889e <get_ldnumber+0x2c>
 8008884:	2c3a      	cmp	r4, #58	; 0x3a
 8008886:	d1f8      	bne.n	800887a <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8008888:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800888a:	428b      	cmp	r3, r1
 800888c:	d002      	beq.n	8008894 <get_ldnumber+0x22>
	int vol = -1;
 800888e:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008892:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008894:	7812      	ldrb	r2, [r2, #0]
 8008896:	2a30      	cmp	r2, #48	; 0x30
 8008898:	d1f9      	bne.n	800888e <get_ldnumber+0x1c>
					*path = ++tt;
 800889a:	3301      	adds	r3, #1
 800889c:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 800889e:	2000      	movs	r0, #0
 80088a0:	bd10      	pop	{r4, pc}

080088a2 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80088a2:	b538      	push	{r3, r4, r5, lr}
 80088a4:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80088a6:	4604      	mov	r4, r0
 80088a8:	b918      	cbnz	r0, 80088b2 <validate+0x10>
		*fs = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 80088ae:	2009      	movs	r0, #9
 80088b0:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80088b2:	6803      	ldr	r3, [r0, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f8      	beq.n	80088aa <validate+0x8>
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	d0f5      	beq.n	80088aa <validate+0x8>
 80088be:	88d9      	ldrh	r1, [r3, #6]
 80088c0:	8882      	ldrh	r2, [r0, #4]
 80088c2:	4291      	cmp	r1, r2
 80088c4:	d1f1      	bne.n	80088aa <validate+0x8>
 80088c6:	7858      	ldrb	r0, [r3, #1]
 80088c8:	f7ff fed8 	bl	800867c <disk_status>
 80088cc:	f010 0001 	ands.w	r0, r0, #1
 80088d0:	d1eb      	bne.n	80088aa <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 80088d6:	bd38      	pop	{r3, r4, r5, pc}

080088d8 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088d8:	3801      	subs	r0, #1
 80088da:	440a      	add	r2, r1
			*d++ = *s++;
 80088dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e0:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80088e4:	4291      	cmp	r1, r2
 80088e6:	d1f9      	bne.n	80088dc <mem_cpy.part.0+0x4>
}
 80088e8:	4770      	bx	lr

080088ea <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 80088ea:	7eca      	ldrb	r2, [r1, #27]
 80088ec:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80088ee:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80088f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80088f4:	bf01      	itttt	eq
 80088f6:	7d48      	ldrbeq	r0, [r1, #21]
 80088f8:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80088fa:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80088fe:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008902:	4618      	mov	r0, r3
 8008904:	4770      	bx	lr

08008906 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008906:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800890a:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800890c:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800890e:	7803      	ldrb	r3, [r0, #0]
 8008910:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008912:	bf01      	itttt	eq
 8008914:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008916:	750a      	strbeq	r2, [r1, #20]
 8008918:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800891a:	754a      	strbeq	r2, [r1, #21]
 800891c:	4770      	bx	lr

0800891e <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008920:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008922:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008926:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008928:	2301      	movs	r3, #1
 800892a:	462a      	mov	r2, r5
 800892c:	4639      	mov	r1, r7
 800892e:	7840      	ldrb	r0, [r0, #1]
 8008930:	f7ff fecc 	bl	80086cc <disk_write>
 8008934:	b9a0      	cbnz	r0, 8008960 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008938:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 800893a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800893c:	1aeb      	subs	r3, r5, r3
 800893e:	4293      	cmp	r3, r2
 8008940:	d301      	bcc.n	8008946 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8008942:	2000      	movs	r0, #0
 8008944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008946:	78a6      	ldrb	r6, [r4, #2]
 8008948:	2e01      	cmp	r6, #1
 800894a:	d9fa      	bls.n	8008942 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 800894c:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800894e:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008950:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008952:	462a      	mov	r2, r5
 8008954:	2301      	movs	r3, #1
 8008956:	4639      	mov	r1, r7
 8008958:	f7ff feb8 	bl	80086cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800895c:	3e01      	subs	r6, #1
 800895e:	e7f3      	b.n	8008948 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8008960:	2001      	movs	r0, #1
}
 8008962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008964 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008964:	78c3      	ldrb	r3, [r0, #3]
 8008966:	b10b      	cbz	r3, 800896c <sync_window+0x8>
 8008968:	f7ff bfd9 	b.w	800891e <sync_window.part.4>
}
 800896c:	4618      	mov	r0, r3
 800896e:	4770      	bx	lr

08008970 <sync_fs>:
{
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008974:	f7ff fff6 	bl	8008964 <sync_window>
 8008978:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800897a:	2800      	cmp	r0, #0
 800897c:	d141      	bne.n	8008a02 <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800897e:	7823      	ldrb	r3, [r4, #0]
 8008980:	2b03      	cmp	r3, #3
 8008982:	d136      	bne.n	80089f2 <sync_fs+0x82>
 8008984:	7927      	ldrb	r7, [r4, #4]
 8008986:	2f01      	cmp	r7, #1
 8008988:	d133      	bne.n	80089f2 <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 800898a:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800898e:	4601      	mov	r1, r0
 8008990:	89a2      	ldrh	r2, [r4, #12]
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff fec6 	bl	8008724 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008998:	2355      	movs	r3, #85	; 0x55
 800899a:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800899e:	23aa      	movs	r3, #170	; 0xaa
 80089a0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 80089a4:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80089a6:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80089a8:	2172      	movs	r1, #114	; 0x72
 80089aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80089ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 80089b2:	2361      	movs	r3, #97	; 0x61
 80089b4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 80089b8:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 80089bc:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 80089c0:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 80089c4:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 80089c8:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80089cc:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80089d0:	6961      	ldr	r1, [r4, #20]
 80089d2:	f7ff fe9f 	bl	8008714 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80089d6:	6921      	ldr	r1, [r4, #16]
 80089d8:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80089dc:	f7ff fe9a 	bl	8008714 <st_dword>
			fs->winsect = fs->volbase + 1;
 80089e0:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80089e2:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80089e4:	3201      	adds	r2, #1
 80089e6:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80089e8:	463b      	mov	r3, r7
 80089ea:	4631      	mov	r1, r6
 80089ec:	f7ff fe6e 	bl	80086cc <disk_write>
			fs->fsi_flag = 0;
 80089f0:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80089f2:	2200      	movs	r2, #0
 80089f4:	4611      	mov	r1, r2
 80089f6:	7860      	ldrb	r0, [r4, #1]
 80089f8:	f7ff fe76 	bl	80086e8 <disk_ioctl>
 80089fc:	3000      	adds	r0, #0
 80089fe:	bf18      	it	ne
 8008a00:	2001      	movne	r0, #1
}
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a04 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008a06:	428b      	cmp	r3, r1
{
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a0e:	d012      	beq.n	8008a36 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008a10:	f7ff ffa8 	bl	8008964 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a14:	4604      	mov	r4, r0
 8008a16:	b960      	cbnz	r0, 8008a32 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a18:	462a      	mov	r2, r5
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008a20:	7870      	ldrb	r0, [r6, #1]
 8008a22:	f7ff fe45 	bl	80086b0 <disk_read>
 8008a26:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008a28:	bf1c      	itt	ne
 8008a2a:	f04f 35ff 	movne.w	r5, #4294967295
 8008a2e:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008a30:	6335      	str	r5, [r6, #48]	; 0x30
}
 8008a32:	4620      	mov	r0, r4
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008a36:	2400      	movs	r4, #0
 8008a38:	e7fb      	b.n	8008a32 <move_window+0x2e>
	...

08008a3c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008a3c:	2300      	movs	r3, #0
{
 8008a3e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008a40:	70c3      	strb	r3, [r0, #3]
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295
 8008a46:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008a48:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008a4a:	f7ff ffdb 	bl	8008a04 <move_window>
 8008a4e:	bb30      	cbnz	r0, 8008a9e <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8008a50:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008a54:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8008a58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008a5c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d11e      	bne.n	8008aa2 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008a64:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008a68:	2be9      	cmp	r3, #233	; 0xe9
 8008a6a:	d005      	beq.n	8008a78 <check_fs+0x3c>
 8008a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a6e:	4a10      	ldr	r2, [pc, #64]	; (8008ab0 <check_fs+0x74>)
 8008a70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d116      	bne.n	8008aa6 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a78:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8008a7c:	f7ff fe42 	bl	8008704 <ld_dword>
 8008a80:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <check_fs+0x78>)
 8008a82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008a86:	4298      	cmp	r0, r3
 8008a88:	d00f      	beq.n	8008aaa <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008a8a:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8008a8e:	f7ff fe39 	bl	8008704 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a92:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <check_fs+0x7c>)
 8008a94:	4298      	cmp	r0, r3
 8008a96:	bf14      	ite	ne
 8008a98:	2002      	movne	r0, #2
 8008a9a:	2000      	moveq	r0, #0
 8008a9c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008a9e:	2004      	movs	r0, #4
 8008aa0:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008aa2:	2003      	movs	r0, #3
 8008aa4:	bd10      	pop	{r4, pc}
	return 2;
 8008aa6:	2002      	movs	r0, #2
 8008aa8:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008aaa:	2000      	movs	r0, #0
}
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	bf00      	nop
 8008ab0:	009000eb 	.word	0x009000eb
 8008ab4:	00544146 	.word	0x00544146
 8008ab8:	33544146 	.word	0x33544146

08008abc <find_volume>:
{
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8008ac0:	2300      	movs	r3, #0
{
 8008ac2:	b085      	sub	sp, #20
	*rfs = 0;
 8008ac4:	600b      	str	r3, [r1, #0]
{
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008aca:	f7ff fed2 	bl	8008872 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ace:	1e06      	subs	r6, r0, #0
 8008ad0:	f2c0 815e 	blt.w	8008d90 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008ad4:	4bb2      	ldr	r3, [pc, #712]	; (8008da0 <find_volume+0x2e4>)
 8008ad6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008ada:	2c00      	cmp	r4, #0
 8008adc:	f000 815a 	beq.w	8008d94 <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8008ae0:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ae2:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ae4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ae8:	b173      	cbz	r3, 8008b08 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8008aea:	7860      	ldrb	r0, [r4, #1]
 8008aec:	f7ff fdc6 	bl	800867c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008af0:	07c1      	lsls	r1, r0, #31
 8008af2:	d409      	bmi.n	8008b08 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	f000 814f 	beq.w	8008d98 <find_volume+0x2dc>
 8008afa:	f010 0004 	ands.w	r0, r0, #4
 8008afe:	d000      	beq.n	8008b02 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008b00:	200a      	movs	r0, #10
}
 8008b02:	b005      	add	sp, #20
 8008b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008b08:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b0a:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008b0c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b0e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008b10:	f7ff fdbe 	bl	8008690 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b14:	07c2      	lsls	r2, r0, #31
 8008b16:	f100 8141 	bmi.w	8008d9c <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b1a:	b10d      	cbz	r5, 8008b20 <find_volume+0x64>
 8008b1c:	0743      	lsls	r3, r0, #29
 8008b1e:	d4ef      	bmi.n	8008b00 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008b20:	f104 020c 	add.w	r2, r4, #12
 8008b24:	2102      	movs	r1, #2
 8008b26:	7860      	ldrb	r0, [r4, #1]
 8008b28:	f7ff fdde 	bl	80086e8 <disk_ioctl>
 8008b2c:	b108      	cbz	r0, 8008b32 <find_volume+0x76>
 8008b2e:	2001      	movs	r0, #1
 8008b30:	e7e7      	b.n	8008b02 <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8008b38:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8008b3c:	d8f7      	bhi.n	8008b2e <find_volume+0x72>
 8008b3e:	1e5e      	subs	r6, r3, #1
 8008b40:	401e      	ands	r6, r3
 8008b42:	d1f4      	bne.n	8008b2e <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008b44:	4631      	mov	r1, r6
 8008b46:	4620      	mov	r0, r4
 8008b48:	f7ff ff78 	bl	8008a3c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008b4c:	2802      	cmp	r0, #2
 8008b4e:	f040 8101 	bne.w	8008d54 <find_volume+0x298>
 8008b52:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008b56:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8008b5a:	b110      	cbz	r0, 8008b62 <find_volume+0xa6>
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	f7ff fdd1 	bl	8008704 <ld_dword>
 8008b62:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b66:	3601      	adds	r6, #1
 8008b68:	2e04      	cmp	r6, #4
 8008b6a:	f101 0110 	add.w	r1, r1, #16
 8008b6e:	d1f2      	bne.n	8008b56 <find_volume+0x9a>
 8008b70:	2500      	movs	r5, #0
			bsect = br[i];
 8008b72:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	f000 80e4 	beq.w	8008d44 <find_volume+0x288>
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f7ff ff5c 	bl	8008a3c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b84:	2801      	cmp	r0, #1
 8008b86:	f200 80de 	bhi.w	8008d46 <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8008b8a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008b8e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b92:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8008b96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008b9a:	4598      	cmp	r8, r3
 8008b9c:	f040 80e0 	bne.w	8008d60 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008ba0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8008ba4:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ba8:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8008bac:	d104      	bne.n	8008bb8 <find_volume+0xfc>
 8008bae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bb2:	f7ff fda7 	bl	8008704 <ld_dword>
 8008bb6:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008bb8:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8008bbc:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bbe:	1e7b      	subs	r3, r7, #1
 8008bc0:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008bc2:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bc4:	f200 80cc 	bhi.w	8008d60 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008bc8:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8008bcc:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008bd0:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008bd2:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80c3 	beq.w	8008d60 <find_volume+0x2a4>
 8008bda:	f109 33ff 	add.w	r3, r9, #4294967295
 8008bde:	ea13 0f09 	tst.w	r3, r9
 8008be2:	f040 80bd 	bne.w	8008d60 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008be6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008bea:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8008bee:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008bf2:	ea4f 1358 	mov.w	r3, r8, lsr #5
 8008bf6:	fbba fbf3 	udiv	fp, sl, r3
 8008bfa:	fb03 a31b 	mls	r3, r3, fp, sl
 8008bfe:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c00:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 80ab 	bne.w	8008d60 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008c0a:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8008c0e:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c12:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 8008c16:	d103      	bne.n	8008c20 <find_volume+0x164>
 8008c18:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8008c1c:	f7ff fd72 	bl	8008704 <ld_dword>
	rv = rv << 8 | ptr[0];
 8008c20:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c24:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c28:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8008c2c:	f000 8098 	beq.w	8008d60 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c30:	fa12 f38b 	uxtah	r3, r2, fp
 8008c34:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c36:	4298      	cmp	r0, r3
 8008c38:	f0c0 8092 	bcc.w	8008d60 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c3c:	1ac5      	subs	r5, r0, r3
 8008c3e:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	f000 808c 	beq.w	8008d60 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008c48:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8008c4c:	4285      	cmp	r5, r0
 8008c4e:	f200 8089 	bhi.w	8008d64 <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008c52:	f640 79f5 	movw	r9, #4085	; 0xff5
 8008c56:	454d      	cmp	r5, r9
 8008c58:	bf8c      	ite	hi
 8008c5a:	f04f 0902 	movhi.w	r9, #2
 8008c5e:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008c62:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c64:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8008c66:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8008c68:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008c6c:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008c6e:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c70:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008c72:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008c74:	d179      	bne.n	8008d6a <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8008c76:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8008c7a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c7e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8008c82:	d16d      	bne.n	8008d60 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c84:	f1ba 0f00 	cmp.w	sl, #0
 8008c88:	d16a      	bne.n	8008d60 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c8a:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008c8e:	f7ff fd39 	bl	8008704 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c92:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c94:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c96:	f108 33ff 	add.w	r3, r8, #4294967295
 8008c9a:	441d      	add	r5, r3
 8008c9c:	fbb5 f8f8 	udiv	r8, r5, r8
 8008ca0:	4541      	cmp	r1, r8
 8008ca2:	d35d      	bcc.n	8008d60 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca8:	6163      	str	r3, [r4, #20]
 8008caa:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008cac:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8008cb0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008cb4:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008cb6:	d12f      	bne.n	8008d18 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008cb8:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8008cbc:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d127      	bne.n	8008d18 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008cc8:	1c71      	adds	r1, r6, #1
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f7ff fe9a 	bl	8008a04 <move_window>
 8008cd0:	bb10      	cbnz	r0, 8008d18 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008cd2:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008cd6:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8008cda:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8008cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ce0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d117      	bne.n	8008d18 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008ce8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008cec:	f7ff fd0a 	bl	8008704 <ld_dword>
 8008cf0:	4b2c      	ldr	r3, [pc, #176]	; (8008da4 <find_volume+0x2e8>)
 8008cf2:	4298      	cmp	r0, r3
 8008cf4:	d110      	bne.n	8008d18 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008cf6:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008cfa:	f7ff fd03 	bl	8008704 <ld_dword>
 8008cfe:	4b2a      	ldr	r3, [pc, #168]	; (8008da8 <find_volume+0x2ec>)
 8008d00:	4298      	cmp	r0, r3
 8008d02:	d109      	bne.n	8008d18 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d04:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008d08:	f7ff fcfc 	bl	8008704 <ld_dword>
 8008d0c:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d0e:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008d12:	f7ff fcf7 	bl	8008704 <ld_dword>
 8008d16:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d18:	4a24      	ldr	r2, [pc, #144]	; (8008dac <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8008d1a:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d1e:	8813      	ldrh	r3, [r2, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	8013      	strh	r3, [r2, #0]
 8008d26:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d28:	4b21      	ldr	r3, [pc, #132]	; (8008db0 <find_volume+0x2f4>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4294      	cmp	r4, r2
 8008d2e:	bf04      	itt	eq
 8008d30:	2200      	moveq	r2, #0
 8008d32:	601a      	streq	r2, [r3, #0]
 8008d34:	691a      	ldr	r2, [r3, #16]
 8008d36:	4294      	cmp	r4, r2
 8008d38:	f04f 0000 	mov.w	r0, #0
 8008d3c:	f47f aee1 	bne.w	8008b02 <find_volume+0x46>
 8008d40:	6118      	str	r0, [r3, #16]
 8008d42:	e6de      	b.n	8008b02 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d44:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d46:	3501      	adds	r5, #1
 8008d48:	2d04      	cmp	r5, #4
 8008d4a:	f47f af12 	bne.w	8008b72 <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008d4e:	2804      	cmp	r0, #4
 8008d50:	d106      	bne.n	8008d60 <find_volume+0x2a4>
 8008d52:	e6ec      	b.n	8008b2e <find_volume+0x72>
 8008d54:	2804      	cmp	r0, #4
 8008d56:	f43f aeea 	beq.w	8008b2e <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008d5a:	2801      	cmp	r0, #1
 8008d5c:	f67f af15 	bls.w	8008b8a <find_volume+0xce>
 8008d60:	200d      	movs	r0, #13
 8008d62:	e6ce      	b.n	8008b02 <find_volume+0x46>
		fmt = FS_FAT32;
 8008d64:	f04f 0903 	mov.w	r9, #3
 8008d68:	e77b      	b.n	8008c62 <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d6a:	f1ba 0f00 	cmp.w	sl, #0
 8008d6e:	d0f7      	beq.n	8008d60 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d70:	f1b9 0f02 	cmp.w	r9, #2
 8008d74:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8008d78:	bf18      	it	ne
 8008d7a:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d7c:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d7e:	bf18      	it	ne
 8008d80:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d84:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d86:	bf0c      	ite	eq
 8008d88:	4605      	moveq	r5, r0
 8008d8a:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8008d8e:	e782      	b.n	8008c96 <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d90:	200b      	movs	r0, #11
 8008d92:	e6b6      	b.n	8008b02 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d94:	200c      	movs	r0, #12
 8008d96:	e6b4      	b.n	8008b02 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e6b2      	b.n	8008b02 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008d9c:	2003      	movs	r0, #3
 8008d9e:	e6b0      	b.n	8008b02 <find_volume+0x46>
 8008da0:	200015d8 	.word	0x200015d8
 8008da4:	41615252 	.word	0x41615252
 8008da8:	61417272 	.word	0x61417272
 8008dac:	200015fc 	.word	0x200015fc
 8008db0:	200015dc 	.word	0x200015dc

08008db4 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008db4:	2901      	cmp	r1, #1
{
 8008db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dba:	4604      	mov	r4, r0
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008dc0:	f240 808a 	bls.w	8008ed8 <put_fat+0x124>
 8008dc4:	6983      	ldr	r3, [r0, #24]
 8008dc6:	4299      	cmp	r1, r3
 8008dc8:	f080 8086 	bcs.w	8008ed8 <put_fat+0x124>
		switch (fs->fs_type) {
 8008dcc:	7803      	ldrb	r3, [r0, #0]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d049      	beq.n	8008e66 <put_fat+0xb2>
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d060      	beq.n	8008e98 <put_fat+0xe4>
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d17e      	bne.n	8008ed8 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8008dda:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dde:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008de0:	8983      	ldrh	r3, [r0, #12]
 8008de2:	fbba f3f3 	udiv	r3, sl, r3
 8008de6:	4419      	add	r1, r3
 8008de8:	f7ff fe0c 	bl	8008a04 <move_window>
 8008dec:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8008dee:	bb78      	cbnz	r0, 8008e50 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	fbba f2f3 	udiv	r2, sl, r3
 8008df6:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8008dfa:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008dfe:	f015 0501 	ands.w	r5, r5, #1
 8008e02:	bf1f      	itttt	ne
 8008e04:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8008e08:	f003 010f 	andne.w	r1, r3, #15
 8008e0c:	013b      	lslne	r3, r7, #4
 8008e0e:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8008e12:	bf14      	ite	ne
 8008e14:	430b      	orrne	r3, r1
 8008e16:	b2fb      	uxtbeq	r3, r7
 8008e18:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8008e22:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	fbb9 f3f3 	udiv	r3, r9, r3
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4419      	add	r1, r3
 8008e30:	f7ff fde8 	bl	8008a04 <move_window>
			if (res != FR_OK) break;
 8008e34:	4606      	mov	r6, r0
 8008e36:	b958      	cbnz	r0, 8008e50 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	fbb9 f2f3 	udiv	r2, r9, r3
 8008e3e:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e42:	b145      	cbz	r5, 8008e56 <put_fat+0xa2>
 8008e44:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8008e48:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	70e3      	strb	r3, [r4, #3]
}
 8008e50:	4630      	mov	r0, r6
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e56:	f818 3002 	ldrb.w	r3, [r8, r2]
 8008e5a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8008e5e:	f023 030f 	bic.w	r3, r3, #15
 8008e62:	431f      	orrs	r7, r3
 8008e64:	e7f0      	b.n	8008e48 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e66:	8983      	ldrh	r3, [r0, #12]
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e6e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008e70:	4419      	add	r1, r3
 8008e72:	f7ff fdc7 	bl	8008a04 <move_window>
			if (res != FR_OK) break;
 8008e76:	4606      	mov	r6, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1e9      	bne.n	8008e50 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e7c:	89a1      	ldrh	r1, [r4, #12]
 8008e7e:	006d      	lsls	r5, r5, #1
 8008e80:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008e84:	fbb5 f3f1 	udiv	r3, r5, r1
 8008e88:	fb01 5513 	mls	r5, r1, r3, r5
 8008e8c:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8008e8e:	5557      	strb	r7, [r2, r5]
 8008e90:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8008e94:	705f      	strb	r7, [r3, #1]
 8008e96:	e7d9      	b.n	8008e4c <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e98:	8983      	ldrh	r3, [r0, #12]
 8008e9a:	089b      	lsrs	r3, r3, #2
 8008e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ea0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008ea2:	4419      	add	r1, r3
 8008ea4:	f7ff fdae 	bl	8008a04 <move_window>
			if (res != FR_OK) break;
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d1d0      	bne.n	8008e50 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008eae:	89a1      	ldrh	r1, [r4, #12]
 8008eb0:	00ad      	lsls	r5, r5, #2
 8008eb2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8008eb6:	fbb5 f2f1 	udiv	r2, r5, r1
 8008eba:	fb01 5512 	mls	r5, r1, r2, r5
 8008ebe:	441d      	add	r5, r3
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f7ff fc1f 	bl	8008704 <ld_dword>
 8008ec6:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8008eca:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ece:	4339      	orrs	r1, r7
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f7ff fc1f 	bl	8008714 <st_dword>
 8008ed6:	e7b9      	b.n	8008e4c <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8008ed8:	2602      	movs	r6, #2
 8008eda:	e7b9      	b.n	8008e50 <put_fat+0x9c>

08008edc <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008edc:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8008ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008ee4:	d968      	bls.n	8008fb8 <get_fat.isra.8+0xdc>
 8008ee6:	6983      	ldr	r3, [r0, #24]
 8008ee8:	4299      	cmp	r1, r3
 8008eea:	d265      	bcs.n	8008fb8 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 8008eec:	7803      	ldrb	r3, [r0, #0]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d032      	beq.n	8008f58 <get_fat.isra.8+0x7c>
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d048      	beq.n	8008f88 <get_fat.isra.8+0xac>
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d15e      	bne.n	8008fb8 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 8008efa:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008efe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f00:	8983      	ldrh	r3, [r0, #12]
 8008f02:	fbb5 f3f3 	udiv	r3, r5, r3
 8008f06:	4419      	add	r1, r3
 8008f08:	f7ff fd7c 	bl	8008a04 <move_window>
 8008f0c:	b110      	cbz	r0, 8008f14 <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8008f14:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8008f18:	fbb5 f2f1 	udiv	r2, r5, r1
 8008f1c:	fb01 5212 	mls	r2, r1, r2, r5
 8008f20:	4422      	add	r2, r4
 8008f22:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f24:	4620      	mov	r0, r4
 8008f26:	fbb7 f1f1 	udiv	r1, r7, r1
 8008f2a:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 8008f2c:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f30:	f7ff fd68 	bl	8008a04 <move_window>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d1ea      	bne.n	8008f0e <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f38:	89a2      	ldrh	r2, [r4, #12]
 8008f3a:	fbb7 f3f2 	udiv	r3, r7, r2
 8008f3e:	fb02 7313 	mls	r3, r2, r3, r7
 8008f42:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f44:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f46:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8008f4a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f4e:	bf4c      	ite	mi
 8008f50:	0900      	lsrmi	r0, r0, #4
 8008f52:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8008f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f58:	8983      	ldrh	r3, [r0, #12]
 8008f5a:	085b      	lsrs	r3, r3, #1
 8008f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f60:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f62:	4419      	add	r1, r3
 8008f64:	f7ff fd4e 	bl	8008a04 <move_window>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d1d0      	bne.n	8008f0e <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f6c:	89a1      	ldrh	r1, [r4, #12]
 8008f6e:	0076      	lsls	r6, r6, #1
 8008f70:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008f74:	fbb6 f3f1 	udiv	r3, r6, r1
 8008f78:	fb01 6613 	mls	r6, r1, r3, r6
 8008f7c:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8008f7e:	5d90      	ldrb	r0, [r2, r6]
 8008f80:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f82:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f88:	8983      	ldrh	r3, [r0, #12]
 8008f8a:	089b      	lsrs	r3, r3, #2
 8008f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f90:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f92:	4419      	add	r1, r3
 8008f94:	f7ff fd36 	bl	8008a04 <move_window>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d1b8      	bne.n	8008f0e <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f9c:	89a2      	ldrh	r2, [r4, #12]
 8008f9e:	00b6      	lsls	r6, r6, #2
 8008fa0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008fa4:	fbb6 f3f2 	udiv	r3, r6, r2
 8008fa8:	fb02 6613 	mls	r6, r2, r3, r6
 8008fac:	4430      	add	r0, r6
 8008fae:	f7ff fba9 	bl	8008704 <ld_dword>
 8008fb2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8008fb8:	2001      	movs	r0, #1
}
 8008fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fbc <create_chain>:
{
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8008fc2:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	b971      	cbnz	r1, 8008fe6 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008fc8:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008fca:	b1f6      	cbz	r6, 800900a <create_chain+0x4e>
 8008fcc:	69ab      	ldr	r3, [r5, #24]
 8008fce:	429e      	cmp	r6, r3
 8008fd0:	bf28      	it	cs
 8008fd2:	2601      	movcs	r6, #1
 8008fd4:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008fd6:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 8008fd8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008fda:	429c      	cmp	r4, r3
 8008fdc:	d318      	bcc.n	8009010 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8008fde:	2e01      	cmp	r6, #1
 8008fe0:	d815      	bhi.n	800900e <create_chain+0x52>
 8008fe2:	2400      	movs	r4, #0
 8008fe4:	e009      	b.n	8008ffa <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f7ff ff78 	bl	8008edc <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008fec:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008fee:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008ff0:	d937      	bls.n	8009062 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d104      	bne.n	8009000 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008ff6:	f04f 34ff 	mov.w	r4, #4294967295
}
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009000:	69ab      	ldr	r3, [r5, #24]
 8009002:	4298      	cmp	r0, r3
 8009004:	d3f9      	bcc.n	8008ffa <create_chain+0x3e>
 8009006:	463e      	mov	r6, r7
 8009008:	e7e4      	b.n	8008fd4 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800900a:	2601      	movs	r6, #1
 800900c:	e7e2      	b.n	8008fd4 <create_chain+0x18>
				ncl = 2;
 800900e:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009010:	4621      	mov	r1, r4
 8009012:	f8d8 0000 	ldr.w	r0, [r8]
 8009016:	f7ff ff61 	bl	8008edc <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 800901a:	b130      	cbz	r0, 800902a <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800901c:	2801      	cmp	r0, #1
 800901e:	d020      	beq.n	8009062 <create_chain+0xa6>
 8009020:	3001      	adds	r0, #1
 8009022:	d0e8      	beq.n	8008ff6 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8009024:	42b4      	cmp	r4, r6
 8009026:	d1d6      	bne.n	8008fd6 <create_chain+0x1a>
 8009028:	e7db      	b.n	8008fe2 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800902a:	f04f 32ff 	mov.w	r2, #4294967295
 800902e:	4621      	mov	r1, r4
 8009030:	4628      	mov	r0, r5
 8009032:	f7ff febf 	bl	8008db4 <put_fat>
		if (res == FR_OK && clst != 0) {
 8009036:	b990      	cbnz	r0, 800905e <create_chain+0xa2>
 8009038:	b957      	cbnz	r7, 8009050 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800903a:	69aa      	ldr	r2, [r5, #24]
 800903c:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 800903e:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009040:	3a02      	subs	r2, #2
 8009042:	4293      	cmp	r3, r2
 8009044:	d90f      	bls.n	8009066 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8009046:	792b      	ldrb	r3, [r5, #4]
 8009048:	f043 0301 	orr.w	r3, r3, #1
 800904c:	712b      	strb	r3, [r5, #4]
 800904e:	e7d4      	b.n	8008ffa <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009050:	4622      	mov	r2, r4
 8009052:	4639      	mov	r1, r7
 8009054:	4628      	mov	r0, r5
 8009056:	f7ff fead 	bl	8008db4 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800905a:	2800      	cmp	r0, #0
 800905c:	d0ed      	beq.n	800903a <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800905e:	2801      	cmp	r0, #1
 8009060:	d0c9      	beq.n	8008ff6 <create_chain+0x3a>
 8009062:	2401      	movs	r4, #1
 8009064:	e7c9      	b.n	8008ffa <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009066:	3b01      	subs	r3, #1
 8009068:	616b      	str	r3, [r5, #20]
 800906a:	e7ec      	b.n	8009046 <create_chain+0x8a>

0800906c <remove_chain>:
{
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009070:	2d01      	cmp	r5, #1
{
 8009072:	4607      	mov	r7, r0
 8009074:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009076:	d801      	bhi.n	800907c <remove_chain+0x10>
 8009078:	2002      	movs	r0, #2
 800907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 800907c:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800907e:	69a3      	ldr	r3, [r4, #24]
 8009080:	429d      	cmp	r5, r3
 8009082:	d2f9      	bcs.n	8009078 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009084:	b12a      	cbz	r2, 8009092 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009086:	f04f 32ff 	mov.w	r2, #4294967295
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff fe92 	bl	8008db4 <put_fat>
		if (res != FR_OK) return res;
 8009090:	bb08      	cbnz	r0, 80090d6 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009092:	4629      	mov	r1, r5
 8009094:	6838      	ldr	r0, [r7, #0]
 8009096:	f7ff ff21 	bl	8008edc <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 800909a:	4606      	mov	r6, r0
 800909c:	b908      	cbnz	r0, 80090a2 <remove_chain+0x36>
	return FR_OK;
 800909e:	2000      	movs	r0, #0
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80090a2:	2801      	cmp	r0, #1
 80090a4:	d0e8      	beq.n	8009078 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d014      	beq.n	80090d4 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090aa:	2200      	movs	r2, #0
 80090ac:	4629      	mov	r1, r5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7ff fe80 	bl	8008db4 <put_fat>
			if (res != FR_OK) return res;
 80090b4:	b978      	cbnz	r0, 80090d6 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090b6:	69a2      	ldr	r2, [r4, #24]
 80090b8:	6963      	ldr	r3, [r4, #20]
 80090ba:	1e91      	subs	r1, r2, #2
 80090bc:	428b      	cmp	r3, r1
 80090be:	d205      	bcs.n	80090cc <remove_chain+0x60>
			fs->free_clst++;
 80090c0:	3301      	adds	r3, #1
 80090c2:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 80090c4:	7923      	ldrb	r3, [r4, #4]
 80090c6:	f043 0301 	orr.w	r3, r3, #1
 80090ca:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80090cc:	4296      	cmp	r6, r2
 80090ce:	4635      	mov	r5, r6
 80090d0:	d3df      	bcc.n	8009092 <remove_chain+0x26>
 80090d2:	e7e4      	b.n	800909e <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090d4:	2001      	movs	r0, #1
}
 80090d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090d8 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80090d8:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80090da:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80090dc:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80090de:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80090e0:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80090e2:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80090e4:	b992      	cbnz	r2, 800910c <dir_sdi.constprop.11+0x34>
 80090e6:	7823      	ldrb	r3, [r4, #0]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d901      	bls.n	80090f0 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 80090ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80090ee:	b973      	cbnz	r3, 800910e <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80090f0:	8923      	ldrh	r3, [r4, #8]
 80090f2:	b90b      	cbnz	r3, 80090f8 <dir_sdi.constprop.11+0x20>
 80090f4:	2002      	movs	r0, #2
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80090f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090fa:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 80090fc:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 80090fe:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0f7      	beq.n	80090f4 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009104:	3434      	adds	r4, #52	; 0x34
 8009106:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8009108:	2000      	movs	r0, #0
 800910a:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800910c:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800910e:	8961      	ldrh	r1, [r4, #10]
 8009110:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009112:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009114:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8009116:	d10c      	bne.n	8009132 <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009118:	4611      	mov	r1, r2
 800911a:	6828      	ldr	r0, [r5, #0]
 800911c:	f7ff fede 	bl	8008edc <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009120:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009122:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009124:	d00b      	beq.n	800913e <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009126:	2801      	cmp	r0, #1
 8009128:	d9e4      	bls.n	80090f4 <dir_sdi.constprop.11+0x1c>
 800912a:	69a3      	ldr	r3, [r4, #24]
 800912c:	4298      	cmp	r0, r3
 800912e:	d3f3      	bcc.n	8009118 <dir_sdi.constprop.11+0x40>
 8009130:	e7e0      	b.n	80090f4 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8009132:	4619      	mov	r1, r3
 8009134:	4620      	mov	r0, r4
 8009136:	f7ff fb7d 	bl	8008834 <clust2sect>
 800913a:	61e8      	str	r0, [r5, #28]
 800913c:	e7de      	b.n	80090fc <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800913e:	2001      	movs	r0, #1
}
 8009140:	bd38      	pop	{r3, r4, r5, pc}

08009142 <dir_next>:
{
 8009142:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009146:	69c3      	ldr	r3, [r0, #28]
{
 8009148:	4605      	mov	r5, r0
 800914a:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800914c:	b1b3      	cbz	r3, 800917c <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800914e:	6947      	ldr	r7, [r0, #20]
 8009150:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009152:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8009156:	d211      	bcs.n	800917c <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8009158:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800915a:	89a2      	ldrh	r2, [r4, #12]
 800915c:	fbb7 f0f2 	udiv	r0, r7, r2
 8009160:	fb02 7210 	mls	r2, r2, r0, r7
 8009164:	2a00      	cmp	r2, #0
 8009166:	d14f      	bne.n	8009208 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8009168:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 800916a:	3301      	adds	r3, #1
 800916c:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 800916e:	b941      	cbnz	r1, 8009182 <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009170:	8923      	ldrh	r3, [r4, #8]
 8009172:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8009176:	d847      	bhi.n	8009208 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8009178:	2300      	movs	r3, #0
 800917a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800917c:	2004      	movs	r0, #4
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009182:	8963      	ldrh	r3, [r4, #10]
 8009184:	3b01      	subs	r3, #1
 8009186:	4203      	tst	r3, r0
 8009188:	d13e      	bne.n	8009208 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff fea6 	bl	8008edc <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009190:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009192:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009194:	d802      	bhi.n	800919c <dir_next+0x5a>
 8009196:	2002      	movs	r0, #2
 8009198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800919c:	1c42      	adds	r2, r0, #1
 800919e:	d102      	bne.n	80091a6 <dir_next+0x64>
 80091a0:	2001      	movs	r0, #1
 80091a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80091a6:	69a3      	ldr	r3, [r4, #24]
 80091a8:	4298      	cmp	r0, r3
 80091aa:	d327      	bcc.n	80091fc <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 80091ac:	f1b8 0f00 	cmp.w	r8, #0
 80091b0:	d0e2      	beq.n	8009178 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80091b2:	69a9      	ldr	r1, [r5, #24]
 80091b4:	4628      	mov	r0, r5
 80091b6:	f7ff ff01 	bl	8008fbc <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80091ba:	4606      	mov	r6, r0
 80091bc:	2800      	cmp	r0, #0
 80091be:	d03d      	beq.n	800923c <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80091c0:	2801      	cmp	r0, #1
 80091c2:	d0e8      	beq.n	8009196 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d0eb      	beq.n	80091a0 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80091c8:	4620      	mov	r0, r4
 80091ca:	f7ff fbcb 	bl	8008964 <sync_window>
 80091ce:	4680      	mov	r8, r0
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d1e5      	bne.n	80091a0 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80091d4:	4601      	mov	r1, r0
 80091d6:	89a2      	ldrh	r2, [r4, #12]
 80091d8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80091dc:	f7ff faa2 	bl	8008724 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80091e0:	4631      	mov	r1, r6
 80091e2:	4620      	mov	r0, r4
 80091e4:	f7ff fb26 	bl	8008834 <clust2sect>
						fs->wflag = 1;
 80091e8:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80091ec:	6320      	str	r0, [r4, #48]	; 0x30
 80091ee:	8963      	ldrh	r3, [r4, #10]
 80091f0:	4598      	cmp	r8, r3
 80091f2:	d316      	bcc.n	8009222 <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 80091f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80091f6:	eba3 0308 	sub.w	r3, r3, r8
 80091fa:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80091fc:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80091fe:	4631      	mov	r1, r6
 8009200:	4620      	mov	r0, r4
 8009202:	f7ff fb17 	bl	8008834 <clust2sect>
 8009206:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009208:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 800920a:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800920c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8009210:	fbb7 f2f1 	udiv	r2, r7, r1
 8009214:	fb01 7712 	mls	r7, r1, r2, r7
 8009218:	441f      	add	r7, r3
 800921a:	622f      	str	r7, [r5, #32]
	return FR_OK;
 800921c:	2000      	movs	r0, #0
 800921e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 8009222:	f884 9003 	strb.w	r9, [r4, #3]
 8009226:	4620      	mov	r0, r4
 8009228:	f7ff fb79 	bl	800891e <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800922c:	2800      	cmp	r0, #0
 800922e:	d1b7      	bne.n	80091a0 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009230:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009232:	3301      	adds	r3, #1
 8009234:	f108 0801 	add.w	r8, r8, #1
 8009238:	6323      	str	r3, [r4, #48]	; 0x30
 800923a:	e7d8      	b.n	80091ee <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800923c:	2007      	movs	r0, #7
}
 800923e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009244 <follow_path>:
{
 8009244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8009248:	6806      	ldr	r6, [r0, #0]
{
 800924a:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800924c:	780b      	ldrb	r3, [r1, #0]
 800924e:	2b2f      	cmp	r3, #47	; 0x2f
 8009250:	460d      	mov	r5, r1
 8009252:	f101 0101 	add.w	r1, r1, #1
 8009256:	d0f9      	beq.n	800924c <follow_path+0x8>
 8009258:	2b5c      	cmp	r3, #92	; 0x5c
 800925a:	d0f7      	beq.n	800924c <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800925c:	2300      	movs	r3, #0
 800925e:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009260:	782b      	ldrb	r3, [r5, #0]
 8009262:	2b1f      	cmp	r3, #31
 8009264:	d959      	bls.n	800931a <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009266:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80093c8 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 800926a:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800926e:	220b      	movs	r2, #11
 8009270:	2120      	movs	r1, #32
 8009272:	4638      	mov	r0, r7
 8009274:	f7ff fa56 	bl	8008724 <mem_set>
	si = i = 0; ni = 8;
 8009278:	2200      	movs	r2, #0
 800927a:	f105 3eff 	add.w	lr, r5, #4294967295
 800927e:	4611      	mov	r1, r2
 8009280:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8009282:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009286:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009288:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800928c:	d90b      	bls.n	80092a6 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800928e:	2b2f      	cmp	r3, #47	; 0x2f
 8009290:	d14b      	bne.n	800932a <follow_path+0xe6>
 8009292:	1868      	adds	r0, r5, r1
 8009294:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009296:	f810 eb01 	ldrb.w	lr, [r0], #1
 800929a:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 800929e:	d0f9      	beq.n	8009294 <follow_path+0x50>
 80092a0:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 80092a4:	d0f6      	beq.n	8009294 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 80092a6:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d054      	beq.n	8009356 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092ac:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 80092b0:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092b4:	2ae5      	cmp	r2, #229	; 0xe5
 80092b6:	bf04      	itt	eq
 80092b8:	2205      	moveq	r2, #5
 80092ba:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80092be:	2b21      	cmp	r3, #33	; 0x21
 80092c0:	bf34      	ite	cc
 80092c2:	2304      	movcc	r3, #4
 80092c4:	2300      	movcs	r3, #0
 80092c6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7ff ff04 	bl	80090d8 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d145      	bne.n	8009360 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 80092d4:	69e1      	ldr	r1, [r4, #28]
 80092d6:	4648      	mov	r0, r9
 80092d8:	f7ff fb94 	bl	8008a04 <move_window>
		if (res != FR_OK) break;
 80092dc:	2800      	cmp	r0, #0
 80092de:	d13f      	bne.n	8009360 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 80092e0:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80092e2:	781a      	ldrb	r2, [r3, #0]
 80092e4:	2a00      	cmp	r2, #0
 80092e6:	d046      	beq.n	8009376 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80092e8:	7ada      	ldrb	r2, [r3, #11]
 80092ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80092ee:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092f0:	7ada      	ldrb	r2, [r3, #11]
 80092f2:	0711      	lsls	r1, r2, #28
 80092f4:	d40c      	bmi.n	8009310 <follow_path+0xcc>
 80092f6:	f103 0e0b 	add.w	lr, r3, #11
 80092fa:	4639      	mov	r1, r7
		r = *d++ - *s++;
 80092fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009300:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8009304:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8009306:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 800930a:	d027      	beq.n	800935c <follow_path+0x118>
 800930c:	2a00      	cmp	r2, #0
 800930e:	d0f5      	beq.n	80092fc <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8009310:	2100      	movs	r1, #0
 8009312:	4620      	mov	r0, r4
 8009314:	f7ff ff15 	bl	8009142 <dir_next>
 8009318:	e7da      	b.n	80092d0 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800931a:	2380      	movs	r3, #128	; 0x80
 800931c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009320:	4620      	mov	r0, r4
}
 8009322:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8009326:	f7ff bed7 	b.w	80090d8 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800932a:	2b5c      	cmp	r3, #92	; 0x5c
 800932c:	d0b1      	beq.n	8009292 <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800932e:	2b2e      	cmp	r3, #46	; 0x2e
 8009330:	d039      	beq.n	80093a6 <follow_path+0x162>
 8009332:	4290      	cmp	r0, r2
 8009334:	d90f      	bls.n	8009356 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8009336:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800933a:	bf18      	it	ne
 800933c:	3b80      	subne	r3, #128	; 0x80
 800933e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80093cc <follow_path+0x188>
 8009342:	bf18      	it	ne
 8009344:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8009348:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 800934c:	f1bc 0f00 	cmp.w	ip, #0
 8009350:	d02e      	beq.n	80093b0 <follow_path+0x16c>
 8009352:	4563      	cmp	r3, ip
 8009354:	d1f8      	bne.n	8009348 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009356:	2006      	movs	r0, #6
	return res;
 8009358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800935c:	2a00      	cmp	r2, #0
 800935e:	d1d7      	bne.n	8009310 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8009360:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8009364:	b148      	cbz	r0, 800937a <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009366:	2804      	cmp	r0, #4
 8009368:	d12c      	bne.n	80093c4 <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800936a:	f013 0f04 	tst.w	r3, #4
 800936e:	bf08      	it	eq
 8009370:	2005      	moveq	r0, #5
 8009372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009376:	2004      	movs	r0, #4
 8009378:	e7f2      	b.n	8009360 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800937a:	075a      	lsls	r2, r3, #29
 800937c:	d422      	bmi.n	80093c4 <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800937e:	79a3      	ldrb	r3, [r4, #6]
 8009380:	06db      	lsls	r3, r3, #27
 8009382:	d50d      	bpl.n	80093a0 <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009384:	89b2      	ldrh	r2, [r6, #12]
 8009386:	6960      	ldr	r0, [r4, #20]
 8009388:	fbb0 f3f2 	udiv	r3, r0, r2
 800938c:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8009390:	fb02 0313 	mls	r3, r2, r3, r0
 8009394:	4419      	add	r1, r3
 8009396:	7830      	ldrb	r0, [r6, #0]
 8009398:	f7ff faa7 	bl	80088ea <ld_clust.isra.1>
 800939c:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800939e:	e764      	b.n	800926a <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093a0:	2005      	movs	r0, #5
 80093a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80093a6:	280b      	cmp	r0, #11
 80093a8:	d0d5      	beq.n	8009356 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 80093aa:	2208      	movs	r2, #8
 80093ac:	200b      	movs	r0, #11
 80093ae:	e768      	b.n	8009282 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80093b0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80093b4:	f1bc 0f19 	cmp.w	ip, #25
 80093b8:	d801      	bhi.n	80093be <follow_path+0x17a>
 80093ba:	3b20      	subs	r3, #32
 80093bc:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80093be:	54bb      	strb	r3, [r7, r2]
 80093c0:	3201      	adds	r2, #1
 80093c2:	e75e      	b.n	8009282 <follow_path+0x3e>
}
 80093c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c8:	08024422 	.word	0x08024422
 80093cc:	080244a1 	.word	0x080244a1

080093d0 <dir_register>:
{
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80093d4:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80093d6:	f7ff fe7f 	bl	80090d8 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 80093da:	4604      	mov	r4, r0
 80093dc:	bb28      	cbnz	r0, 800942a <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80093de:	69e9      	ldr	r1, [r5, #28]
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7ff fb0f 	bl	8008a04 <move_window>
			if (res != FR_OK) break;
 80093e6:	4604      	mov	r4, r0
 80093e8:	b9f8      	cbnz	r0, 800942a <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80093ea:	6a2b      	ldr	r3, [r5, #32]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2be5      	cmp	r3, #229	; 0xe5
 80093f0:	d114      	bne.n	800941c <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 80093f2:	69e9      	ldr	r1, [r5, #28]
 80093f4:	4630      	mov	r0, r6
 80093f6:	f7ff fb05 	bl	8008a04 <move_window>
		if (res == FR_OK) {
 80093fa:	4604      	mov	r4, r0
 80093fc:	b960      	cbnz	r0, 8009418 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80093fe:	4601      	mov	r1, r0
 8009400:	2220      	movs	r2, #32
 8009402:	6a28      	ldr	r0, [r5, #32]
 8009404:	f7ff f98e 	bl	8008724 <mem_set>
 8009408:	220b      	movs	r2, #11
 800940a:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800940e:	6a28      	ldr	r0, [r5, #32]
 8009410:	f7ff fa62 	bl	80088d8 <mem_cpy.part.0>
			fs->wflag = 1;
 8009414:	2301      	movs	r3, #1
 8009416:	70f3      	strb	r3, [r6, #3]
}
 8009418:	4620      	mov	r0, r4
 800941a:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0e8      	beq.n	80093f2 <dir_register+0x22>
			res = dir_next(dp, 1);
 8009420:	2101      	movs	r1, #1
 8009422:	4628      	mov	r0, r5
 8009424:	f7ff fe8d 	bl	8009142 <dir_next>
 8009428:	e7d7      	b.n	80093da <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800942a:	2c04      	cmp	r4, #4
 800942c:	bf08      	it	eq
 800942e:	2407      	moveq	r4, #7
 8009430:	e7f2      	b.n	8009418 <dir_register+0x48>
	...

08009434 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009434:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009436:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009438:	a804      	add	r0, sp, #16
{
 800943a:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800943c:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8009440:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009442:	f7ff fa16 	bl	8008872 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009446:	1e05      	subs	r5, r0, #0
 8009448:	db1f      	blt.n	800948a <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800944a:	4912      	ldr	r1, [pc, #72]	; (8009494 <f_mount+0x60>)
 800944c:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8009450:	b15c      	cbz	r4, 800946a <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009452:	4b11      	ldr	r3, [pc, #68]	; (8009498 <f_mount+0x64>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	4294      	cmp	r4, r2
 8009458:	bf04      	itt	eq
 800945a:	2200      	moveq	r2, #0
 800945c:	601a      	streq	r2, [r3, #0]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	2000      	movs	r0, #0
 8009462:	4294      	cmp	r4, r2
 8009464:	bf08      	it	eq
 8009466:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009468:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 800946a:	9801      	ldr	r0, [sp, #4]
 800946c:	b108      	cbz	r0, 8009472 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 800946e:	2300      	movs	r3, #0
 8009470:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009472:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009476:	b130      	cbz	r0, 8009486 <f_mount+0x52>
 8009478:	2e01      	cmp	r6, #1
 800947a:	d108      	bne.n	800948e <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800947c:	2200      	movs	r2, #0
 800947e:	a901      	add	r1, sp, #4
 8009480:	4668      	mov	r0, sp
 8009482:	f7ff fb1b 	bl	8008abc <find_volume>
	LEAVE_FF(fs, res);
}
 8009486:	b004      	add	sp, #16
 8009488:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800948a:	200b      	movs	r0, #11
 800948c:	e7fb      	b.n	8009486 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800948e:	2000      	movs	r0, #0
 8009490:	e7f9      	b.n	8009486 <f_mount+0x52>
 8009492:	bf00      	nop
 8009494:	200015d8 	.word	0x200015d8
 8009498:	200015dc 	.word	0x200015dc

0800949c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800949c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a0:	b090      	sub	sp, #64	; 0x40
 80094a2:	4690      	mov	r8, r2
 80094a4:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80094a6:	4604      	mov	r4, r0
 80094a8:	2800      	cmp	r0, #0
 80094aa:	f000 80d1 	beq.w	8009650 <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80094ae:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80094b2:	462a      	mov	r2, r5
 80094b4:	a903      	add	r1, sp, #12
 80094b6:	a801      	add	r0, sp, #4
 80094b8:	f7ff fb00 	bl	8008abc <find_volume>
	if (res == FR_OK) {
 80094bc:	4607      	mov	r7, r0
 80094be:	bb38      	cbnz	r0, 8009510 <f_open+0x74>
		dj.obj.fs = fs;
 80094c0:	ae10      	add	r6, sp, #64	; 0x40
 80094c2:	9b03      	ldr	r3, [sp, #12]
 80094c4:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80094c8:	9901      	ldr	r1, [sp, #4]
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7ff feba 	bl	8009244 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80094d0:	b958      	cbnz	r0, 80094ea <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80094d2:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	db1e      	blt.n	8009518 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80094da:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 80094de:	bf14      	ite	ne
 80094e0:	2101      	movne	r1, #1
 80094e2:	2100      	moveq	r1, #0
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7ff f923 	bl	8008730 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80094ea:	f018 0f1c 	tst.w	r8, #28
 80094ee:	d073      	beq.n	80095d8 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 80094f0:	b1a0      	cbz	r0, 800951c <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80094f2:	2804      	cmp	r0, #4
 80094f4:	d109      	bne.n	800950a <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80094f6:	4b73      	ldr	r3, [pc, #460]	; (80096c4 <f_open+0x228>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	f000 80de 	beq.w	80096bc <f_open+0x220>
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80da 	beq.w	80096bc <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009508:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800950a:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800950e:	b170      	cbz	r0, 800952e <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009510:	2300      	movs	r3, #0
 8009512:	6023      	str	r3, [r4, #0]
 8009514:	4607      	mov	r7, r0
 8009516:	e095      	b.n	8009644 <f_open+0x1a8>
				res = FR_INVALID_NAME;
 8009518:	2006      	movs	r0, #6
 800951a:	e7e6      	b.n	80094ea <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800951c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009520:	f013 0f11 	tst.w	r3, #17
 8009524:	d163      	bne.n	80095ee <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009526:	f018 0f04 	tst.w	r8, #4
 800952a:	f040 80c1 	bne.w	80096b0 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800952e:	0728      	lsls	r0, r5, #28
 8009530:	d53c      	bpl.n	80095ac <f_open+0x110>
				dw = GET_FATTIME();
 8009532:	f012 fa2f 	bl	801b994 <get_fattime>
 8009536:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009538:	4601      	mov	r1, r0
 800953a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800953c:	300e      	adds	r0, #14
 800953e:	f7ff f8e9 	bl	8008714 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009542:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009544:	4611      	mov	r1, r2
 8009546:	3016      	adds	r0, #22
 8009548:	f7ff f8e4 	bl	8008714 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800954c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800954e:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009552:	2220      	movs	r2, #32
 8009554:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009556:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800955a:	f899 0000 	ldrb.w	r0, [r9]
 800955e:	4651      	mov	r1, sl
 8009560:	f7ff f9c3 	bl	80088ea <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009564:	2200      	movs	r2, #0
 8009566:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009568:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800956a:	4648      	mov	r0, r9
 800956c:	f7ff f9cb 	bl	8008906 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8009572:	2200      	movs	r2, #0
 8009574:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8009576:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009578:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800957a:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	2101      	movs	r1, #1
 8009580:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8009582:	f1b8 0f00 	cmp.w	r8, #0
 8009586:	d011      	beq.n	80095ac <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8009588:	4641      	mov	r1, r8
 800958a:	4630      	mov	r0, r6
						dw = fs->winsect;
 800958c:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009590:	f7ff fd6c 	bl	800906c <remove_chain>
						if (res == FR_OK) {
 8009594:	2800      	cmp	r0, #0
 8009596:	d1bb      	bne.n	8009510 <f_open+0x74>
							res = move_window(fs, dw);
 8009598:	4649      	mov	r1, r9
 800959a:	9803      	ldr	r0, [sp, #12]
 800959c:	f7ff fa32 	bl	8008a04 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80095a0:	9a03      	ldr	r2, [sp, #12]
 80095a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80095a6:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d1b1      	bne.n	8009510 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80095ac:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80095ae:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 80095b4:	bf48      	it	mi
 80095b6:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095ba:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 80095be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095c0:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095c2:	bf14      	ite	ne
 80095c4:	2101      	movne	r1, #1
 80095c6:	2100      	moveq	r1, #0
 80095c8:	4630      	mov	r0, r6
 80095ca:	f7ff f8df 	bl	800878c <inc_lock>
 80095ce:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d13f      	bne.n	8009654 <f_open+0x1b8>
 80095d4:	2002      	movs	r0, #2
 80095d6:	e79b      	b.n	8009510 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 80095d8:	2800      	cmp	r0, #0
 80095da:	d199      	bne.n	8009510 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80095dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80095e0:	06da      	lsls	r2, r3, #27
 80095e2:	d467      	bmi.n	80096b4 <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80095e4:	f018 0f02 	tst.w	r8, #2
 80095e8:	d0e0      	beq.n	80095ac <f_open+0x110>
 80095ea:	07db      	lsls	r3, r3, #31
 80095ec:	d5de      	bpl.n	80095ac <f_open+0x110>
					res = FR_DENIED;
 80095ee:	2007      	movs	r0, #7
 80095f0:	e78e      	b.n	8009510 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 80095f2:	6820      	ldr	r0, [r4, #0]
 80095f4:	f7ff fc72 	bl	8008edc <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 80095f8:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80095fa:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80095fc:	d926      	bls.n	800964c <f_open+0x1b0>
 80095fe:	1c42      	adds	r2, r0, #1
 8009600:	4250      	negs	r0, r2
 8009602:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009604:	eba5 0508 	sub.w	r5, r5, r8
 8009608:	2800      	cmp	r0, #0
 800960a:	d04d      	beq.n	80096a8 <f_open+0x20c>
				fp->clust = clst;
 800960c:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800960e:	2800      	cmp	r0, #0
 8009610:	f47f af7e 	bne.w	8009510 <f_open+0x74>
 8009614:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009618:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800961c:	fbb5 f2f3 	udiv	r2, r5, r3
 8009620:	fb03 5512 	mls	r5, r3, r2, r5
 8009624:	b175      	cbz	r5, 8009644 <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009626:	4640      	mov	r0, r8
 8009628:	f7ff f904 	bl	8008834 <clust2sect>
 800962c:	2800      	cmp	r0, #0
 800962e:	d0d1      	beq.n	80095d4 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009630:	4402      	add	r2, r0
 8009632:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009634:	2301      	movs	r3, #1
 8009636:	4631      	mov	r1, r6
 8009638:	f898 0001 	ldrb.w	r0, [r8, #1]
 800963c:	f7ff f838 	bl	80086b0 <disk_read>
 8009640:	2800      	cmp	r0, #0
 8009642:	d139      	bne.n	80096b8 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 8009644:	4638      	mov	r0, r7
 8009646:	b010      	add	sp, #64	; 0x40
 8009648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 800964c:	2002      	movs	r0, #2
 800964e:	e7d9      	b.n	8009604 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8009650:	2709      	movs	r7, #9
 8009652:	e7f7      	b.n	8009644 <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009654:	9e03      	ldr	r6, [sp, #12]
 8009656:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800965a:	7830      	ldrb	r0, [r6, #0]
 800965c:	4641      	mov	r1, r8
 800965e:	f7ff f944 	bl	80088ea <ld_clust.isra.1>
 8009662:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009664:	f108 001c 	add.w	r0, r8, #28
 8009668:	f7ff f84c 	bl	8008704 <ld_dword>
			fp->obj.id = fs->id;
 800966c:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800966e:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009670:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009672:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009676:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8009678:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800967a:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 800967c:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800967e:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009680:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009682:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009688:	4630      	mov	r0, r6
 800968a:	f7ff f84b 	bl	8008724 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800968e:	06ab      	lsls	r3, r5, #26
 8009690:	d5d8      	bpl.n	8009644 <f_open+0x1a8>
 8009692:	68e5      	ldr	r5, [r4, #12]
 8009694:	2d00      	cmp	r5, #0
 8009696:	d0d5      	beq.n	8009644 <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009698:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800969a:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800969c:	895a      	ldrh	r2, [r3, #10]
 800969e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80096a2:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80096a4:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096a8:	45a8      	cmp	r8, r5
 80096aa:	d3a2      	bcc.n	80095f2 <f_open+0x156>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e7ad      	b.n	800960c <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096b0:	2008      	movs	r0, #8
 80096b2:	e72d      	b.n	8009510 <f_open+0x74>
					res = FR_NO_FILE;
 80096b4:	2004      	movs	r0, #4
 80096b6:	e72b      	b.n	8009510 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096b8:	2001      	movs	r0, #1
 80096ba:	e729      	b.n	8009510 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff fe87 	bl	80093d0 <dir_register>
 80096c2:	e722      	b.n	800950a <f_open+0x6e>
 80096c4:	200015dc 	.word	0x200015dc

080096c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	469b      	mov	fp, r3
 80096ce:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80096d0:	2300      	movs	r3, #0
{
 80096d2:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 80096d4:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80096d8:	a903      	add	r1, sp, #12
{
 80096da:	4604      	mov	r4, r0
 80096dc:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80096de:	f7ff f8e0 	bl	80088a2 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80096e2:	4605      	mov	r5, r0
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d132      	bne.n	800974e <f_write+0x86>
 80096e8:	7d65      	ldrb	r5, [r4, #21]
 80096ea:	bb85      	cbnz	r5, 800974e <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80096ec:	7d23      	ldrb	r3, [r4, #20]
 80096ee:	079a      	lsls	r2, r3, #30
 80096f0:	f140 80be 	bpl.w	8009870 <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80096f4:	69a3      	ldr	r3, [r4, #24]
 80096f6:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80096fa:	bf28      	it	cs
 80096fc:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009700:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009704:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8009706:	f1b8 0f00 	cmp.w	r8, #0
 800970a:	d01c      	beq.n	8009746 <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800970c:	9803      	ldr	r0, [sp, #12]
 800970e:	69a1      	ldr	r1, [r4, #24]
 8009710:	8983      	ldrh	r3, [r0, #12]
 8009712:	fbb1 f2f3 	udiv	r2, r1, r3
 8009716:	fb03 1312 	mls	r3, r3, r2, r1
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 8091 	bne.w	8009842 <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009720:	8943      	ldrh	r3, [r0, #10]
 8009722:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009724:	4013      	ands	r3, r2
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	d124      	bne.n	8009774 <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800972a:	b931      	cbnz	r1, 800973a <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800972c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800972e:	b9a0      	cbnz	r0, 800975a <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009730:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009732:	4620      	mov	r0, r4
 8009734:	f7ff fc42 	bl	8008fbc <create_chain>
 8009738:	e004      	b.n	8009744 <f_write+0x7c>
					if (fp->cltbl) {
 800973a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800973c:	b15b      	cbz	r3, 8009756 <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff f883 	bl	800884a <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009744:	b948      	cbnz	r0, 800975a <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009746:	7d23      	ldrb	r3, [r4, #20]
 8009748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974c:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 800974e:	4628      	mov	r0, r5
 8009750:	b005      	add	sp, #20
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009756:	69e1      	ldr	r1, [r4, #28]
 8009758:	e7eb      	b.n	8009732 <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800975a:	2801      	cmp	r0, #1
 800975c:	d102      	bne.n	8009764 <f_write+0x9c>
 800975e:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009760:	7565      	strb	r5, [r4, #21]
 8009762:	e7f4      	b.n	800974e <f_write+0x86>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d101      	bne.n	800976c <f_write+0xa4>
 8009768:	2501      	movs	r5, #1
 800976a:	e7f9      	b.n	8009760 <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800976c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800976e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009770:	b903      	cbnz	r3, 8009774 <f_write+0xac>
 8009772:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009774:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	da0c      	bge.n	8009796 <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800977c:	9803      	ldr	r0, [sp, #12]
 800977e:	6a22      	ldr	r2, [r4, #32]
 8009780:	9900      	ldr	r1, [sp, #0]
 8009782:	7840      	ldrb	r0, [r0, #1]
 8009784:	2301      	movs	r3, #1
 8009786:	f7fe ffa1 	bl	80086cc <disk_write>
 800978a:	2800      	cmp	r0, #0
 800978c:	d1ec      	bne.n	8009768 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 800978e:	7d23      	ldrb	r3, [r4, #20]
 8009790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009794:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009796:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800979a:	69e1      	ldr	r1, [r4, #28]
 800979c:	4650      	mov	r0, sl
 800979e:	f7ff f849 	bl	8008834 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d0db      	beq.n	800975e <f_write+0x96>
			sect += csect;
 80097a6:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80097a8:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 80097ac:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 80097b0:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80097b2:	2f00      	cmp	r7, #0
 80097b4:	d034      	beq.n	8009820 <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80097b6:	9a01      	ldr	r2, [sp, #4]
 80097b8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097bc:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80097c0:	443a      	add	r2, r7
 80097c2:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80097c4:	bf84      	itt	hi
 80097c6:	9a01      	ldrhi	r2, [sp, #4]
 80097c8:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097ca:	463b      	mov	r3, r7
 80097cc:	4632      	mov	r2, r6
 80097ce:	4649      	mov	r1, r9
 80097d0:	f7fe ff7c 	bl	80086cc <disk_write>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1c7      	bne.n	8009768 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80097d8:	6a21      	ldr	r1, [r4, #32]
 80097da:	1b89      	subs	r1, r1, r6
 80097dc:	428f      	cmp	r7, r1
 80097de:	d90b      	bls.n	80097f8 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 80097e4:	b122      	cbz	r2, 80097f0 <f_write+0x128>
 80097e6:	fb02 9101 	mla	r1, r2, r1, r9
 80097ea:	9800      	ldr	r0, [sp, #0]
 80097ec:	f7ff f874 	bl	80088d8 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80097f0:	7d23      	ldrb	r3, [r4, #20]
 80097f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f6:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	899b      	ldrh	r3, [r3, #12]
 80097fc:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80097fe:	69a3      	ldr	r3, [r4, #24]
 8009800:	68e2      	ldr	r2, [r4, #12]
 8009802:	443b      	add	r3, r7
 8009804:	61a3      	str	r3, [r4, #24]
 8009806:	429a      	cmp	r2, r3
 8009808:	bf2c      	ite	cs
 800980a:	60e2      	strcs	r2, [r4, #12]
 800980c:	60e3      	strcc	r3, [r4, #12]
 800980e:	f8db 3000 	ldr.w	r3, [fp]
 8009812:	443b      	add	r3, r7
 8009814:	44b9      	add	r9, r7
 8009816:	f8cb 3000 	str.w	r3, [fp]
 800981a:	eba8 0807 	sub.w	r8, r8, r7
 800981e:	e772      	b.n	8009706 <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009820:	6a23      	ldr	r3, [r4, #32]
 8009822:	429e      	cmp	r6, r3
 8009824:	d00c      	beq.n	8009840 <f_write+0x178>
 8009826:	69a2      	ldr	r2, [r4, #24]
 8009828:	68e3      	ldr	r3, [r4, #12]
 800982a:	429a      	cmp	r2, r3
 800982c:	d208      	bcs.n	8009840 <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800982e:	2301      	movs	r3, #1
 8009830:	4632      	mov	r2, r6
 8009832:	9900      	ldr	r1, [sp, #0]
 8009834:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8009838:	f7fe ff3a 	bl	80086b0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800983c:	2800      	cmp	r0, #0
 800983e:	d193      	bne.n	8009768 <f_write+0xa0>
			fp->sect = sect;
 8009840:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	899f      	ldrh	r7, [r3, #12]
 8009846:	69a3      	ldr	r3, [r4, #24]
 8009848:	fbb3 f0f7 	udiv	r0, r3, r7
 800984c:	fb07 3010 	mls	r0, r7, r0, r3
 8009850:	1a3f      	subs	r7, r7, r0
 8009852:	4547      	cmp	r7, r8
 8009854:	bf28      	it	cs
 8009856:	4647      	movcs	r7, r8
	if (cnt) {
 8009858:	b12f      	cbz	r7, 8009866 <f_write+0x19e>
 800985a:	9b00      	ldr	r3, [sp, #0]
 800985c:	463a      	mov	r2, r7
 800985e:	4649      	mov	r1, r9
 8009860:	4418      	add	r0, r3
 8009862:	f7ff f839 	bl	80088d8 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8009866:	7d23      	ldrb	r3, [r4, #20]
 8009868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800986c:	7523      	strb	r3, [r4, #20]
 800986e:	e7c6      	b.n	80097fe <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009870:	2507      	movs	r5, #7
 8009872:	e76c      	b.n	800974e <f_write+0x86>

08009874 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009876:	a901      	add	r1, sp, #4
{
 8009878:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800987a:	f7ff f812 	bl	80088a2 <validate>
	if (res == FR_OK) {
 800987e:	4605      	mov	r5, r0
 8009880:	2800      	cmp	r0, #0
 8009882:	d13a      	bne.n	80098fa <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009884:	7d23      	ldrb	r3, [r4, #20]
 8009886:	065a      	lsls	r2, r3, #25
 8009888:	d537      	bpl.n	80098fa <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800988a:	061b      	lsls	r3, r3, #24
 800988c:	d50c      	bpl.n	80098a8 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800988e:	9801      	ldr	r0, [sp, #4]
 8009890:	6a22      	ldr	r2, [r4, #32]
 8009892:	7840      	ldrb	r0, [r0, #1]
 8009894:	2301      	movs	r3, #1
 8009896:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800989a:	f7fe ff17 	bl	80086cc <disk_write>
 800989e:	bb78      	cbnz	r0, 8009900 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098a0:	7d23      	ldrb	r3, [r4, #20]
 80098a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a6:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80098a8:	f012 f874 	bl	801b994 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80098ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80098ae:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80098b0:	9801      	ldr	r0, [sp, #4]
 80098b2:	f7ff f8a7 	bl	8008a04 <move_window>
				if (res == FR_OK) {
 80098b6:	4605      	mov	r5, r0
 80098b8:	b9f8      	cbnz	r0, 80098fa <f_sync+0x86>
					dir = fp->dir_ptr;
 80098ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80098bc:	7af3      	ldrb	r3, [r6, #11]
 80098be:	f043 0320 	orr.w	r3, r3, #32
 80098c2:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80098c4:	68a2      	ldr	r2, [r4, #8]
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	4631      	mov	r1, r6
 80098ca:	f7ff f81c 	bl	8008906 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80098ce:	68e1      	ldr	r1, [r4, #12]
 80098d0:	f106 001c 	add.w	r0, r6, #28
 80098d4:	f7fe ff1e 	bl	8008714 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80098d8:	4639      	mov	r1, r7
 80098da:	f106 0016 	add.w	r0, r6, #22
 80098de:	f7fe ff19 	bl	8008714 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 80098e2:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80098e4:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 80098e6:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80098e8:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80098ea:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80098ec:	f7ff f840 	bl	8008970 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80098f0:	7d23      	ldrb	r3, [r4, #20]
 80098f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80098f6:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80098f8:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80098fa:	4628      	mov	r0, r5
 80098fc:	b003      	add	sp, #12
 80098fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009900:	2501      	movs	r5, #1
 8009902:	e7fa      	b.n	80098fa <f_sync+0x86>

08009904 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009904:	b513      	push	{r0, r1, r4, lr}
 8009906:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009908:	f7ff ffb4 	bl	8009874 <f_sync>
	if (res == FR_OK)
 800990c:	b948      	cbnz	r0, 8009922 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800990e:	a901      	add	r1, sp, #4
 8009910:	4620      	mov	r0, r4
 8009912:	f7fe ffc6 	bl	80088a2 <validate>
		if (res == FR_OK) {
 8009916:	b920      	cbnz	r0, 8009922 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009918:	6920      	ldr	r0, [r4, #16]
 800991a:	f7fe ff73 	bl	8008804 <dec_lock>
			if (res == FR_OK)
 800991e:	b900      	cbnz	r0, 8009922 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009920:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009922:	b002      	add	sp, #8
 8009924:	bd10      	pop	{r4, pc}
	...

08009928 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009928:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800992a:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <FATFS_LinkDriverEx+0x40>)
 800992c:	7a5d      	ldrb	r5, [r3, #9]
 800992e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8009932:	b9b5      	cbnz	r5, 8009962 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009934:	7a5d      	ldrb	r5, [r3, #9]
 8009936:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009938:	7a5d      	ldrb	r5, [r3, #9]
 800993a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800993e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009940:	7a58      	ldrb	r0, [r3, #9]
 8009942:	4418      	add	r0, r3
 8009944:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009946:	7a5a      	ldrb	r2, [r3, #9]
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	1c50      	adds	r0, r2, #1
 800994c:	b2c0      	uxtb	r0, r0
 800994e:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8009950:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8009952:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009954:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009956:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8009958:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800995a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800995c:	70cc      	strb	r4, [r1, #3]
 800995e:	4620      	mov	r0, r4
 8009960:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009962:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8009964:	bd30      	pop	{r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	20001600 	.word	0x20001600

0800996c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800996c:	2200      	movs	r2, #0
 800996e:	f7ff bfdb 	b.w	8009928 <FATFS_LinkDriverEx>
	...

08009974 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8009974:	4a0a      	ldr	r2, [pc, #40]	; (80099a0 <FATFS_UnLinkDriverEx+0x2c>)
 8009976:	7a53      	ldrb	r3, [r2, #9]
 8009978:	b17b      	cbz	r3, 800999a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 800997a:	7803      	ldrb	r3, [r0, #0]
 800997c:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800997e:	b2db      	uxtb	r3, r3
 8009980:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009984:	6848      	ldr	r0, [r1, #4]
 8009986:	b140      	cbz	r0, 800999a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8009988:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800998a:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800998c:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800998e:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8009990:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8009992:	3b01      	subs	r3, #1
 8009994:	b2db      	uxtb	r3, r3
 8009996:	7253      	strb	r3, [r2, #9]
 8009998:	4770      	bx	lr
  uint8_t ret = 1;
 800999a:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	20001600 	.word	0x20001600

080099a4 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 80099a4:	2100      	movs	r1, #0
 80099a6:	f7ff bfe5 	b.w	8009974 <FATFS_UnLinkDriverEx>
 80099aa:	0000      	movs	r0, r0
 80099ac:	0000      	movs	r0, r0
	...

080099b0 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 80099b0:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 80099b2:	f7f6 fdcf 	bl	8000554 <__aeabi_i2d>
 80099b6:	a316      	add	r3, pc, #88	; (adr r3, 8009a10 <calcNorm560+0x60>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f6 fe30 	bl	8000620 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	a114      	add	r1, pc, #80	; (adr r1, 8009a18 <calcNorm560+0x68>)
 80099c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ca:	f7f6 ff53 	bl	8000874 <__aeabi_ddiv>
 80099ce:	ec41 0b10 	vmov	d0, r0, r1
 80099d2:	f018 ff65 	bl	80228a0 <exp>
 80099d6:	2200      	movs	r2, #0
 80099d8:	ec51 0b10 	vmov	r0, r1, d0
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <calcNorm560+0x58>)
 80099de:	f7f6 fc6b 	bl	80002b8 <__aeabi_dsub>
 80099e2:	460b      	mov	r3, r1
 80099e4:	4602      	mov	r2, r0
 80099e6:	a106      	add	r1, pc, #24	; (adr r1, 8009a00 <calcNorm560+0x50>)
 80099e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ec:	f7f6 ff42 	bl	8000874 <__aeabi_ddiv>
 80099f0:	f7f7 f90e 	bl	8000c10 <__aeabi_d2f>
 80099f4:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <calcNorm560+0x5c>)
 80099f6:	6018      	str	r0, [r3, #0]
 80099f8:	bd08      	pop	{r3, pc}
 80099fa:	bf00      	nop
 80099fc:	f3af 8000 	nop.w
 8009a00:	f9f35846 	.word	0xf9f35846
 8009a04:	466ca5d1 	.word	0x466ca5d1
 8009a08:	3ff00000 	.word	0x3ff00000
 8009a0c:	20090818 	.word	0x20090818
 8009a10:	05ea7ab3 	.word	0x05ea7ab3
 8009a14:	3ea2ca5d 	.word	0x3ea2ca5d
 8009a18:	aba38759 	.word	0xaba38759
 8009a1c:	3f8d7774 	.word	0x3f8d7774

08009a20 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 8009a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 8009a24:	f241 3387 	movw	r3, #4999	; 0x1387
 8009a28:	4299      	cmp	r1, r3
{
 8009a2a:	460e      	mov	r6, r1
 8009a2c:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8009a30:	4c3b      	ldr	r4, [pc, #236]	; (8009b20 <calcSref+0x100>)
	if (CCT_measure < 5000)
 8009a32:	d84d      	bhi.n	8009ad0 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 8009a34:	4d3b      	ldr	r5, [pc, #236]	; (8009b24 <calcSref+0x104>)
 8009a36:	4405      	add	r5, r0
 8009a38:	6828      	ldr	r0, [r5, #0]
 8009a3a:	f7f6 fd9d 	bl	8000578 <__aeabi_f2d>
 8009a3e:	a332      	add	r3, pc, #200	; (adr r3, 8009b08 <calcSref+0xe8>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fdec 	bl	8000620 <__aeabi_dmul>
 8009a48:	4680      	mov	r8, r0
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	4689      	mov	r9, r1
 8009a4e:	f7f6 fd81 	bl	8000554 <__aeabi_i2d>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4640      	mov	r0, r8
 8009a58:	4649      	mov	r1, r9
 8009a5a:	f7f6 fde1 	bl	8000620 <__aeabi_dmul>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	a12b      	add	r1, pc, #172	; (adr r1, 8009b10 <calcSref+0xf0>)
 8009a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a68:	f7f6 ff04 	bl	8000874 <__aeabi_ddiv>
 8009a6c:	ec41 0b10 	vmov	d0, r0, r1
 8009a70:	f018 ff16 	bl	80228a0 <exp>
 8009a74:	2200      	movs	r2, #0
 8009a76:	ec51 0b10 	vmov	r0, r1, d0
 8009a7a:	4b2b      	ldr	r3, [pc, #172]	; (8009b28 <calcSref+0x108>)
 8009a7c:	f7f6 fc1c 	bl	80002b8 <__aeabi_dsub>
 8009a80:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009a84:	6828      	ldr	r0, [r5, #0]
 8009a86:	f7f6 fd77 	bl	8000578 <__aeabi_f2d>
 8009a8a:	a31f      	add	r3, pc, #124	; (adr r3, 8009b08 <calcSref+0xe8>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fdc6 	bl	8000620 <__aeabi_dmul>
 8009a94:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8009b18 <calcSref+0xf8>
 8009a98:	ec41 0b10 	vmov	d0, r0, r1
 8009a9c:	f018 fffc 	bl	8022a98 <pow>
 8009aa0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009aa4:	ec51 0b10 	vmov	r0, r1, d0
 8009aa8:	f7f6 fee4 	bl	8000874 <__aeabi_ddiv>
		ans /= norm_560;
 8009aac:	4b1f      	ldr	r3, [pc, #124]	; (8009b2c <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009aae:	4606      	mov	r6, r0
		ans /= norm_560;
 8009ab0:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009ab2:	460f      	mov	r7, r1
		ans /= norm_560;
 8009ab4:	f7f6 fd60 	bl	8000578 <__aeabi_f2d>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4630      	mov	r0, r6
 8009abe:	4639      	mov	r1, r7
 8009ac0:	f7f6 fed8 	bl	8000874 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009ac4:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 8009ac8:	ed94 0b00 	vldr	d0, [r4]
 8009acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009ad0:	4a17      	ldr	r2, [pc, #92]	; (8009b30 <calcSref+0x110>)
 8009ad2:	4b18      	ldr	r3, [pc, #96]	; (8009b34 <calcSref+0x114>)
 8009ad4:	4918      	ldr	r1, [pc, #96]	; (8009b38 <calcSref+0x118>)
 8009ad6:	4403      	add	r3, r0
 8009ad8:	4401      	add	r1, r0
 8009ada:	4410      	add	r0, r2
 8009adc:	4a17      	ldr	r2, [pc, #92]	; (8009b3c <calcSref+0x11c>)
 8009ade:	edd1 6a00 	vldr	s13, [r1]
 8009ae2:	ed92 7a00 	vldr	s14, [r2]
 8009ae6:	edd0 7a00 	vldr	s15, [r0]
 8009aea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009aee:	edd3 6a00 	vldr	s13, [r3]
 8009af2:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <calcSref+0x120>)
 8009af4:	ed93 7a00 	vldr	s14, [r3]
 8009af8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009afc:	ee17 0a90 	vmov	r0, s15
 8009b00:	f7f6 fd3a 	bl	8000578 <__aeabi_f2d>
 8009b04:	e7de      	b.n	8009ac4 <calcSref+0xa4>
 8009b06:	bf00      	nop
 8009b08:	e826d695 	.word	0xe826d695
 8009b0c:	3e112e0b 	.word	0x3e112e0b
 8009b10:	aba38759 	.word	0xaba38759
 8009b14:	3f8d7774 	.word	0x3f8d7774
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	c0140000 	.word	0xc0140000
 8009b20:	20003628 	.word	0x20003628
 8009b24:	20054938 	.word	0x20054938
 8009b28:	3ff00000 	.word	0x3ff00000
 8009b2c:	20090818 	.word	0x20090818
 8009b30:	2004e92c 	.word	0x2004e92c
 8009b34:	2005092c 	.word	0x2005092c
 8009b38:	2004f92c 	.word	0x2004f92c
 8009b3c:	2000360c 	.word	0x2000360c
 8009b40:	20003610 	.word	0x20003610
 8009b44:	00000000 	.word	0x00000000

08009b48 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	ed2d 8b0a 	vpush	{d8-d12}
 8009b50:	b0af      	sub	sp, #188	; 0xbc
 8009b52:	460c      	mov	r4, r1
 8009b54:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 8009b56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	48c4      	ldr	r0, [pc, #784]	; (8009e70 <cqs_func+0x328>)
 8009b5e:	f015 fe64 	bl	801f82a <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 8009b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b66:	2100      	movs	r1, #0
 8009b68:	48c2      	ldr	r0, [pc, #776]	; (8009e74 <cqs_func+0x32c>)
 8009b6a:	f015 fe5e 	bl	801f82a <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009b6e:	4bc2      	ldr	r3, [pc, #776]	; (8009e78 <cqs_func+0x330>)
 8009b70:	ed93 7a00 	vldr	s14, [r3]
 8009b74:	4bbe      	ldr	r3, [pc, #760]	; (8009e70 <cqs_func+0x328>)
 8009b76:	4621      	mov	r1, r4
 8009b78:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009b7c:	ecf1 6a01 	vldmia	r1!, {s13}
 8009b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 8009b84:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009b86:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 8009b8a:	d1f7      	bne.n	8009b7c <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 8009b8c:	9a04      	ldr	r2, [sp, #16]
 8009b8e:	f640 53ab 	movw	r3, #3499	; 0xdab
 8009b92:	429a      	cmp	r2, r3
 8009b94:	f200 870d 	bhi.w	800a9b2 <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 8009b98:	ee07 2a90 	vmov	s15, r2
 8009b9c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009ba0:	ee68 8a08 	vmul.f32	s17, s16, s16
 8009ba4:	ee68 7a28 	vmul.f32	s15, s16, s17
 8009ba8:	ee17 0a90 	vmov	r0, s15
 8009bac:	f7f6 fce4 	bl	8000578 <__aeabi_f2d>
 8009bb0:	a3a3      	add	r3, pc, #652	; (adr r3, 8009e40 <cqs_func+0x2f8>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fd33 	bl	8000620 <__aeabi_dmul>
 8009bba:	4604      	mov	r4, r0
 8009bbc:	ee18 0a90 	vmov	r0, s17
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	f7f6 fcd9 	bl	8000578 <__aeabi_f2d>
 8009bc6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009e48 <cqs_func+0x300>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f7f6 fd28 	bl	8000620 <__aeabi_dmul>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	f7f6 fb6e 	bl	80002b8 <__aeabi_dsub>
 8009bdc:	4604      	mov	r4, r0
 8009bde:	ee18 0a10 	vmov	r0, s16
 8009be2:	460d      	mov	r5, r1
 8009be4:	f7f6 fcc8 	bl	8000578 <__aeabi_f2d>
 8009be8:	a399      	add	r3, pc, #612	; (adr r3, 8009e50 <cqs_func+0x308>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fd17 	bl	8000620 <__aeabi_dmul>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7f6 fb5f 	bl	80002bc <__adddf3>
 8009bfe:	a396      	add	r3, pc, #600	; (adr r3, 8009e58 <cqs_func+0x310>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 fb58 	bl	80002b8 <__aeabi_dsub>
 8009c08:	4b9c      	ldr	r3, [pc, #624]	; (8009e7c <cqs_func+0x334>)
 8009c0a:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 8009c0e:	9804      	ldr	r0, [sp, #16]
 8009c10:	f7ff fece 	bl	80099b0 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 8009c14:	a192      	add	r1, pc, #584	; (adr r1, 8009e60 <cqs_func+0x318>)
 8009c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c1a:	4b99      	ldr	r3, [pc, #612]	; (8009e80 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009c1c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8009e84 <cqs_func+0x33c>
	bar_CQS = 0.2;
 8009c20:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009c24:	210d      	movs	r1, #13
 8009c26:	2055      	movs	r0, #85	; 0x55
 8009c28:	f009 f972 	bl	8012f10 <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 8009c2c:	2278      	movs	r2, #120	; 0x78
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4895      	ldr	r0, [pc, #596]	; (8009e88 <cqs_func+0x340>)
 8009c32:	f015 fdfa 	bl	801f82a <memset>
	memset(y_ref, 0, sizeof(y_ref));
 8009c36:	2278      	movs	r2, #120	; 0x78
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4894      	ldr	r0, [pc, #592]	; (8009e8c <cqs_func+0x344>)
 8009c3c:	f015 fdf5 	bl	801f82a <memset>
	memset(z_ref, 0, sizeof(z_ref));
 8009c40:	2278      	movs	r2, #120	; 0x78
 8009c42:	2100      	movs	r1, #0
 8009c44:	4892      	ldr	r0, [pc, #584]	; (8009e90 <cqs_func+0x348>)
 8009c46:	f015 fdf0 	bl	801f82a <memset>
	double zw_test = 0;
 8009c4a:	f04f 0a00 	mov.w	sl, #0
 8009c4e:	f04f 0b00 	mov.w	fp, #0
 8009c52:	4b8d      	ldr	r3, [pc, #564]	; (8009e88 <cqs_func+0x340>)
 8009c54:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 8009c56:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8009c5a:	4b8c      	ldr	r3, [pc, #560]	; (8009e8c <cqs_func+0x344>)
 8009c5c:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 8009c5e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 8009c62:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 8009c66:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 8009c6a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 8009c6e:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 8009c72:	e9cd ab00 	strd	sl, fp, [sp]
 8009c76:	4b86      	ldr	r3, [pc, #536]	; (8009e90 <cqs_func+0x348>)
 8009c78:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 8009c7a:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 8009c7e:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 8009c82:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 8009c84:	4d7e      	ldr	r5, [pc, #504]	; (8009e80 <cqs_func+0x338>)
 8009c86:	4f83      	ldr	r7, [pc, #524]	; (8009e94 <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009c88:	4e79      	ldr	r6, [pc, #484]	; (8009e70 <cqs_func+0x328>)
		bar_CQS += 0.04;
 8009c8a:	a377      	add	r3, pc, #476	; (adr r3, 8009e68 <cqs_func+0x320>)
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009c94:	f7f6 fb12 	bl	80002bc <__adddf3>
 8009c98:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 8009c9c:	f7f6 ffb8 	bl	8000c10 <__aeabi_d2f>
 8009ca0:	210d      	movs	r1, #13
 8009ca2:	ee00 0a10 	vmov	s0, r0
 8009ca6:	2055      	movs	r0, #85	; 0x55
 8009ca8:	f009 f932 	bl	8012f10 <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009cac:	487a      	ldr	r0, [pc, #488]	; (8009e98 <cqs_func+0x350>)
 8009cae:	4a71      	ldr	r2, [pc, #452]	; (8009e74 <cqs_func+0x32c>)
 8009cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cb4:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8009cb8:	f004 ff1a 	bl	800eaf0 <Calibration_Load_Pack>
 8009cbc:	4b77      	ldr	r3, [pc, #476]	; (8009e9c <cqs_func+0x354>)
 8009cbe:	9320      	str	r3, [sp, #128]	; 0x80
 8009cc0:	4b77      	ldr	r3, [pc, #476]	; (8009ea0 <cqs_func+0x358>)
 8009cc2:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 8009cc4:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 8009cc8:	4b76      	ldr	r3, [pc, #472]	; (8009ea4 <cqs_func+0x35c>)
 8009cca:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 8009ccc:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 8009cd0:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 8009cd4:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 8009cd6:	2500      	movs	r5, #0
 8009cd8:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 8009cda:	2c00      	cmp	r4, #0
 8009cdc:	d17d      	bne.n	8009dda <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 8009cde:	9904      	ldr	r1, [sp, #16]
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f7ff fe9d 	bl	8009a20 <calcSref>
 8009ce6:	ec51 0b10 	vmov	r0, r1, d0
 8009cea:	f7f6 ff91 	bl	8000c10 <__aeabi_d2f>
 8009cee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009cf0:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 8009cf2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 8009cf4:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 8009cf8:	edd3 9a00 	vldr	s19, [r3]
 8009cfc:	ee68 7a29 	vmul.f32	s15, s16, s19
 8009d00:	ee17 0a90 	vmov	r0, s15
 8009d04:	f7f6 fc38 	bl	8000578 <__aeabi_f2d>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	4680      	mov	r8, r0
 8009d0c:	4689      	mov	r9, r1
 8009d0e:	460b      	mov	r3, r1
 8009d10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d14:	f7f6 fad2 	bl	80002bc <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009d18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d1a:	ed93 9a00 	vldr	s18, [r3]
 8009d1e:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 8009d22:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009d26:	ee17 0a90 	vmov	r0, s15
 8009d2a:	f7f6 fc25 	bl	8000578 <__aeabi_f2d>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d36:	f7f6 fac1 	bl	80002bc <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 8009d3a:	4642      	mov	r2, r8
 8009d3c:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009d3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 8009d42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d46:	f7f6 fab9 	bl	80002bc <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009d4a:	edd7 8a00 	vldr	s17, [r7]
 8009d4e:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 8009d52:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009d56:	ee17 0a90 	vmov	r0, s15
 8009d5a:	f7f6 fc0d 	bl	8000578 <__aeabi_f2d>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d66:	f7f6 faa9 	bl	80002bc <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009d6a:	ed96 8a00 	vldr	s16, [r6]
 8009d6e:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009d72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009d76:	ee17 0a90 	vmov	r0, s15
 8009d7a:	f7f6 fbfd 	bl	8000578 <__aeabi_f2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4680      	mov	r8, r0
 8009d84:	4689      	mov	r9, r1
 8009d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d8a:	f7f6 fa97 	bl	80002bc <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009d8e:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009d96:	ee17 0a90 	vmov	r0, s15
 8009d9a:	f7f6 fbed 	bl	8000578 <__aeabi_f2d>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009da6:	f7f6 fa89 	bl	80002bc <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009daa:	4642      	mov	r2, r8
 8009dac:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009dae:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009db2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009db6:	f7f6 fa81 	bl	80002bc <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009dba:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009dbe:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009dc2:	ee17 0a90 	vmov	r0, s15
 8009dc6:	f7f6 fbd7 	bl	8000578 <__aeabi_f2d>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4650      	mov	r0, sl
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	f7f6 fa73 	bl	80002bc <__adddf3>
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009dda:	4b26      	ldr	r3, [pc, #152]	; (8009e74 <cqs_func+0x32c>)
 8009ddc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009de0:	ed93 8a00 	vldr	s16, [r3]
 8009de4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009de6:	ecb3 9a01 	vldmia	r3!, {s18}
 8009dea:	9320      	str	r3, [sp, #128]	; 0x80
 8009dec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009dee:	ee28 9a09 	vmul.f32	s18, s16, s18
 8009df2:	ecf3 9a01 	vldmia	r3!, {s19}
 8009df6:	ee69 7a29 	vmul.f32	s15, s18, s19
 8009dfa:	931e      	str	r3, [sp, #120]	; 0x78
 8009dfc:	ee17 0a90 	vmov	r0, s15
 8009e00:	f7f6 fbba 	bl	8000578 <__aeabi_f2d>
 8009e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f7f6 fa57 	bl	80002bc <__adddf3>
 8009e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e10:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009e14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009e16:	ecf3 8a01 	vldmia	r3!, {s17}
 8009e1a:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009e1e:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009e22:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8009e26:	931c      	str	r3, [sp, #112]	; 0x70
 8009e28:	ee17 0a90 	vmov	r0, s15
 8009e2c:	f7f6 fba4 	bl	8000578 <__aeabi_f2d>
 8009e30:	9b08      	ldr	r3, [sp, #32]
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fa41 	bl	80002bc <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009e3a:	ecf7 7a01 	vldmia	r7!, {s15}
 8009e3e:	e033      	b.n	8009ea8 <cqs_func+0x360>
 8009e40:	56b31fbb 	.word	0x56b31fbb
 8009e44:	3dd97936 	.word	0x3dd97936
 8009e48:	ef649b9b 	.word	0xef649b9b
 8009e4c:	3eac2c05 	.word	0x3eac2c05
 8009e50:	d35a8588 	.word	0xd35a8588
 8009e54:	3f64e3bc 	.word	0x3f64e3bc
 8009e58:	83126e98 	.word	0x83126e98
 8009e5c:	3ff9cac0 	.word	0x3ff9cac0
 8009e60:	9999999a 	.word	0x9999999a
 8009e64:	3fc99999 	.word	0x3fc99999
 8009e68:	47ae147b 	.word	0x47ae147b
 8009e6c:	3fa47ae1 	.word	0x3fa47ae1
 8009e70:	2000260c 	.word	0x2000260c
 8009e74:	2000160c 	.word	0x2000160c
 8009e78:	20095934 	.word	0x20095934
 8009e7c:	20000188 	.word	0x20000188
 8009e80:	200906a0 	.word	0x200906a0
 8009e84:	3e4ccccd 	.word	0x3e4ccccd
 8009e88:	200906a8 	.word	0x200906a8
 8009e8c:	20090838 	.word	0x20090838
 8009e90:	200907a0 	.word	0x200907a0
 8009e94:	2008d504 	.word	0x2008d504
 8009e98:	0810c040 	.word	0x0810c040
 8009e9c:	2008a504 	.word	0x2008a504
 8009ea0:	20003630 	.word	0x20003630
 8009ea4:	20052930 	.word	0x20052930
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009ea8:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009eaa:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009eae:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009eb2:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009eb6:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009eba:	ee17 0a90 	vmov	r0, s15
 8009ebe:	f7f6 fb5b 	bl	8000578 <__aeabi_f2d>
 8009ec2:	9b06      	ldr	r3, [sp, #24]
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 f9f8 	bl	80002bc <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009ecc:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009ed0:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009ed2:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009eda:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009ede:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009ee2:	f7f6 fb49 	bl	8000578 <__aeabi_f2d>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8009eee:	f7f6 f9e5 	bl	80002bc <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009ef2:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009ef6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009efa:	ee17 0a90 	vmov	r0, s15
 8009efe:	f7f6 fb3b 	bl	8000578 <__aeabi_f2d>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8009f0a:	f7f6 f9d7 	bl	80002bc <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009f0e:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009f12:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009f16:	ee17 0a90 	vmov	r0, s15
 8009f1a:	f7f6 fb2d 	bl	8000578 <__aeabi_f2d>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009f26:	f7f6 f9c9 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 8009f2a:	3501      	adds	r5, #1
 8009f2c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 8009f30:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 8009f34:	f47f aed1 	bne.w	8009cda <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 8009f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4874      	ldr	r0, [pc, #464]	; (800a110 <cqs_func+0x5c8>)
 8009f40:	f015 fc73 	bl	801f82a <memset>
		
		if (i == 0) {
 8009f44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f46:	b97b      	cbnz	r3, 8009f68 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 8009f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	4971      	ldr	r1, [pc, #452]	; (800a114 <cqs_func+0x5cc>)
 8009f50:	f7f6 fc90 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 8009f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 8009f58:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	496d      	ldr	r1, [pc, #436]	; (800a114 <cqs_func+0x5cc>)
 8009f60:	f7f6 fc88 	bl	8000874 <__aeabi_ddiv>
 8009f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 8009f68:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f70:	f7f6 fb56 	bl	8000620 <__aeabi_dmul>
 8009f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 8009f76:	4d68      	ldr	r5, [pc, #416]	; (800a118 <cqs_func+0x5d0>)
 8009f78:	4f68      	ldr	r7, [pc, #416]	; (800a11c <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 8009f7a:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 8009f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 8009f82:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 8009f84:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8009f88:	f7f6 fb4a 	bl	8000620 <__aeabi_dmul>
 8009f8c:	9b08      	ldr	r3, [sp, #32]
 8009f8e:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 8009f92:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 8009f94:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 8009f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	f7f6 fb40 	bl	8000620 <__aeabi_dmul>
 8009fa0:	9b06      	ldr	r3, [sp, #24]
 8009fa2:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 8009fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 8009faa:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 8009fac:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009fb0:	f7f6 fb36 	bl	8000620 <__aeabi_dmul>
		y_test *= k_test;
 8009fb4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 8009fb8:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 8009fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fc0:	f7f6 fb2e 	bl	8000620 <__aeabi_dmul>
		z_test *= k_test;
 8009fc4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 8009fc8:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 8009fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd0:	f7f6 fb26 	bl	8000620 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 8009fd4:	ed95 7b00 	vldr	d7, [r5]
 8009fd8:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8009fdc:	ed95 7b02 	vldr	d7, [r5, #8]
 8009fe0:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8009fe4:	ed95 7b04 	vldr	d7, [r5, #16]
 8009fe8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 8009fec:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 8009ff0:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8009ff4:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8009ff8:	f7f6 fb12 	bl	8000620 <__aeabi_dmul>
 8009ffc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a000:	4680      	mov	r8, r0
 800a002:	4689      	mov	r9, r1
 800a004:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a008:	f7f6 fb0a 	bl	8000620 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 f952 	bl	80002bc <__adddf3>
 800a018:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a01c:	4680      	mov	r8, r0
 800a01e:	4689      	mov	r9, r1
 800a020:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a024:	f7f6 fafc 	bl	8000620 <__aeabi_dmul>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4640      	mov	r0, r8
 800a02e:	4649      	mov	r1, r9
 800a030:	f7f6 f944 	bl	80002bc <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a034:	ed95 7b06 	vldr	d7, [r5, #24]
 800a038:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a03c:	ed95 7b08 	vldr	d7, [r5, #32]
 800a040:	00e6      	lsls	r6, r4, #3
 800a042:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a046:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a04a:	4437      	add	r7, r6
 800a04c:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a050:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a054:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a058:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a05c:	f7f6 fae0 	bl	8000620 <__aeabi_dmul>
 800a060:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a064:	4680      	mov	r8, r0
 800a066:	4689      	mov	r9, r1
 800a068:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a06c:	f7f6 fad8 	bl	8000620 <__aeabi_dmul>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4640      	mov	r0, r8
 800a076:	4649      	mov	r1, r9
 800a078:	f7f6 f920 	bl	80002bc <__adddf3>
 800a07c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a080:	4680      	mov	r8, r0
 800a082:	4689      	mov	r9, r1
 800a084:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a088:	f7f6 faca 	bl	8000620 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4640      	mov	r0, r8
 800a092:	4649      	mov	r1, r9
 800a094:	f7f6 f912 	bl	80002bc <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a098:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a09c:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a0a0:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a0a4:	4f1e      	ldr	r7, [pc, #120]	; (800a120 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a0a6:	4b1f      	ldr	r3, [pc, #124]	; (800a124 <cqs_func+0x5dc>)
 800a0a8:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a0ac:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a0b0:	4437      	add	r7, r6
 800a0b2:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a0b6:	441e      	add	r6, r3
 800a0b8:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a0bc:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a0c0:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a0c4:	f7f6 faac 	bl	8000620 <__aeabi_dmul>
 800a0c8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	4689      	mov	r9, r1
 800a0d0:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a0d4:	f7f6 faa4 	bl	8000620 <__aeabi_dmul>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4640      	mov	r0, r8
 800a0de:	4649      	mov	r1, r9
 800a0e0:	f7f6 f8ec 	bl	80002bc <__adddf3>
 800a0e4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	4689      	mov	r9, r1
 800a0ec:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a0f0:	f7f6 fa96 	bl	8000620 <__aeabi_dmul>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	f7f6 f8de 	bl	80002bc <__adddf3>
 800a100:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a102:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a104:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a108:	f47f adbc 	bne.w	8009c84 <cqs_func+0x13c>
 800a10c:	e00e      	b.n	800a12c <cqs_func+0x5e4>
 800a10e:	bf00      	nop
 800a110:	2000160c 	.word	0x2000160c
 800a114:	40590000 	.word	0x40590000
 800a118:	200000f8 	.word	0x200000f8
 800a11c:	20090728 	.word	0x20090728
 800a120:	200908b0 	.word	0x200908b0
 800a124:	20090628 	.word	0x20090628
 800a128:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a12c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a134:	f7f6 fa74 	bl	8000620 <__aeabi_dmul>
	yw_ref *= k_ref;
 800a138:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800a13c:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800a140:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a144:	f7f6 fa6c 	bl	8000620 <__aeabi_dmul>
	zw_ref *= k_ref;
 800a148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800a14c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800a150:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a154:	f7f6 fa64 	bl	8000620 <__aeabi_dmul>
	xw_test *= k_test;
 800a158:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800a15c:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800a160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a164:	f7f6 fa5c 	bl	8000620 <__aeabi_dmul>
	yw_test *= k_test;
 800a168:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800a16c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800a170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a174:	f7f6 fa54 	bl	8000620 <__aeabi_dmul>
	zw_test *= k_test;
 800a178:	4652      	mov	r2, sl
 800a17a:	465b      	mov	r3, fp
	yw_test *= k_test;
 800a17c:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800a180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a184:	f7f6 fa4c 	bl	8000620 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800a18c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a190:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a194:	f7f6 fa44 	bl	8000620 <__aeabi_dmul>
 800a198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a19c:	4604      	mov	r4, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a1a4:	f7f6 fa3c 	bl	8000620 <__aeabi_dmul>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 f884 	bl	80002bc <__adddf3>
 800a1b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a1c0:	f7f6 fa2e 	bl	8000620 <__aeabi_dmul>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	f7f6 f876 	bl	80002bc <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a1d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a1d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a1d8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a1dc:	f7f6 fa20 	bl	8000620 <__aeabi_dmul>
 800a1e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a1ec:	f7f6 fa18 	bl	8000620 <__aeabi_dmul>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f7f6 f860 	bl	80002bc <__adddf3>
 800a1fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a208:	f7f6 fa0a 	bl	8000620 <__aeabi_dmul>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4620      	mov	r0, r4
 800a212:	4629      	mov	r1, r5
 800a214:	f7f6 f852 	bl	80002bc <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a218:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a21c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a220:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a224:	f7f6 f9fc 	bl	8000620 <__aeabi_dmul>
 800a228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a234:	f7f6 f9f4 	bl	8000620 <__aeabi_dmul>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f6 f83c 	bl	80002bc <__adddf3>
 800a244:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a248:	4604      	mov	r4, r0
 800a24a:	460d      	mov	r5, r1
 800a24c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a250:	f7f6 f9e6 	bl	8000620 <__aeabi_dmul>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4620      	mov	r0, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7f6 f82e 	bl	80002bc <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a260:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a264:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a268:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a26c:	f7f6 f9d8 	bl	8000620 <__aeabi_dmul>
 800a270:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a27c:	f7f6 f9d0 	bl	8000620 <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7f6 f818 	bl	80002bc <__adddf3>
 800a28c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a298:	f7f6 f9c2 	bl	8000620 <__aeabi_dmul>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7f6 f80a 	bl	80002bc <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a2a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a2ac:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a2b0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a2b4:	f7f6 f9b4 	bl	8000620 <__aeabi_dmul>
 800a2b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2bc:	4604      	mov	r4, r0
 800a2be:	460d      	mov	r5, r1
 800a2c0:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a2c4:	f7f6 f9ac 	bl	8000620 <__aeabi_dmul>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7f5 fff4 	bl	80002bc <__adddf3>
 800a2d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d8:	4604      	mov	r4, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a2e0:	f7f6 f99e 	bl	8000620 <__aeabi_dmul>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7f5 ffe6 	bl	80002bc <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a2f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a2f4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a2f8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a2fc:	f7f6 f990 	bl	8000620 <__aeabi_dmul>
 800a300:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a304:	4604      	mov	r4, r0
 800a306:	460d      	mov	r5, r1
 800a308:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a30c:	f7f6 f988 	bl	8000620 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4620      	mov	r0, r4
 800a316:	4629      	mov	r1, r5
 800a318:	f7f5 ffd0 	bl	80002bc <__adddf3>
 800a31c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a320:	4604      	mov	r4, r0
 800a322:	460d      	mov	r5, r1
 800a324:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a328:	f7f6 f97a 	bl	8000620 <__aeabi_dmul>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f5 ffc2 	bl	80002bc <__adddf3>

	float alpha = yw_test / yw_ref;
 800a338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a33c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800a340:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a344:	f7f6 fa96 	bl	8000874 <__aeabi_ddiv>
 800a348:	f7f6 fc62 	bl	8000c10 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800a34c:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a128 <cqs_func+0x5e0>
 800a350:	f8df b390 	ldr.w	fp, [pc, #912]	; 800a6e4 <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800a354:	901c      	str	r0, [sp, #112]	; 0x70
 800a356:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800a35a:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800a35e:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a362:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a364:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800a6e8 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800a368:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800a6b8 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a36c:	f7f6 f904 	bl	8000578 <__aeabi_f2d>
 800a370:	4bd2      	ldr	r3, [pc, #840]	; (800a6bc <cqs_func+0xb74>)
 800a372:	4453      	add	r3, sl
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	4604      	mov	r4, r0
 800a37a:	460d      	mov	r5, r1
 800a37c:	f7f6 f950 	bl	8000620 <__aeabi_dmul>
 800a380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a384:	f7f6 f94c 	bl	8000620 <__aeabi_dmul>
 800a388:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a38c:	f7f6 fa72 	bl	8000874 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a390:	4bcb      	ldr	r3, [pc, #812]	; (800a6c0 <cqs_func+0xb78>)
 800a392:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a394:	4606      	mov	r6, r0
 800a396:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f6 f93e 	bl	8000620 <__aeabi_dmul>
 800a3a4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a3a8:	f7f6 f93a 	bl	8000620 <__aeabi_dmul>
 800a3ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a3b0:	f7f6 fa60 	bl	8000874 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a3b4:	4bc3      	ldr	r3, [pc, #780]	; (800a6c4 <cqs_func+0xb7c>)
 800a3b6:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a3b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	f7f6 f92c 	bl	8000620 <__aeabi_dmul>
 800a3c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a3cc:	f7f6 f928 	bl	8000620 <__aeabi_dmul>
 800a3d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a3d4:	f7f6 fa4e 	bl	8000874 <__aeabi_ddiv>
 800a3d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a3dc:	49ba      	ldr	r1, [pc, #744]	; (800a6c8 <cqs_func+0xb80>)
 800a3de:	4451      	add	r1, sl
 800a3e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e8:	f7f6 fa44 	bl	8000874 <__aeabi_ddiv>
 800a3ec:	ec41 0b10 	vmov	d0, r0, r1
 800a3f0:	f018 f916 	bl	8022620 <cbrt>
 800a3f4:	ec51 0b10 	vmov	r0, r1, d0
 800a3f8:	f7f6 fc0a 	bl	8000c10 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a3fc:	49b3      	ldr	r1, [pc, #716]	; (800a6cc <cqs_func+0xb84>)
 800a3fe:	4451      	add	r1, sl
 800a400:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a404:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a40c:	f7f6 fa32 	bl	8000874 <__aeabi_ddiv>
 800a410:	ec41 0b10 	vmov	d0, r0, r1
 800a414:	f018 f904 	bl	8022620 <cbrt>
 800a418:	ee1a 0a90 	vmov	r0, s21
 800a41c:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a420:	f7f6 f8aa 	bl	8000578 <__aeabi_f2d>
 800a424:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	ec51 0b10 	vmov	r0, r1, d0
 800a434:	f7f5 ff40 	bl	80002b8 <__aeabi_dsub>
 800a438:	2200      	movs	r2, #0
 800a43a:	4ba5      	ldr	r3, [pc, #660]	; (800a6d0 <cqs_func+0xb88>)
 800a43c:	f7f6 f8f0 	bl	8000620 <__aeabi_dmul>
 800a440:	f7f6 fbe6 	bl	8000c10 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a444:	49a3      	ldr	r1, [pc, #652]	; (800a6d4 <cqs_func+0xb8c>)
 800a446:	4451      	add	r1, sl
 800a448:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a44c:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a454:	f7f6 fa0e 	bl	8000874 <__aeabi_ddiv>
 800a458:	ec41 0b10 	vmov	d0, r0, r1
 800a45c:	f018 f8e0 	bl	8022620 <cbrt>
 800a460:	4620      	mov	r0, r4
 800a462:	ec53 2b10 	vmov	r2, r3, d0
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 ff26 	bl	80002b8 <__aeabi_dsub>
 800a46c:	2200      	movs	r2, #0
 800a46e:	4b9a      	ldr	r3, [pc, #616]	; (800a6d8 <cqs_func+0xb90>)
 800a470:	f7f6 f8d6 	bl	8000620 <__aeabi_dmul>
 800a474:	f7f6 fbcc 	bl	8000c10 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800a478:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800a47c:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a480:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800a484:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a488:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a48a:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a48e:	4630      	mov	r0, r6
 800a490:	f7f6 f8c6 	bl	8000620 <__aeabi_dmul>
 800a494:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800a498:	4604      	mov	r4, r0
 800a49a:	460d      	mov	r5, r1
 800a49c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4a0:	f7f6 f8be 	bl	8000620 <__aeabi_dmul>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f5 ff06 	bl	80002bc <__adddf3>
 800a4b0:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	460d      	mov	r5, r1
 800a4b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a4bc:	f7f6 f8b0 	bl	8000620 <__aeabi_dmul>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7f5 fef8 	bl	80002bc <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800a4cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4d0:	f7f6 f9d0 	bl	8000874 <__aeabi_ddiv>
 800a4d4:	ec41 0b10 	vmov	d0, r0, r1
 800a4d8:	f018 f8a2 	bl	8022620 <cbrt>
 800a4dc:	ec51 0b10 	vmov	r0, r1, d0
 800a4e0:	f7f6 fb96 	bl	8000c10 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a4e4:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800a4e8:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a4ec:	4639      	mov	r1, r7
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f7f6 f896 	bl	8000620 <__aeabi_dmul>
 800a4f4:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	460d      	mov	r5, r1
 800a4fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a500:	f7f6 f88e 	bl	8000620 <__aeabi_dmul>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4620      	mov	r0, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	f7f5 fed6 	bl	80002bc <__adddf3>
 800a510:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800a514:	4604      	mov	r4, r0
 800a516:	460d      	mov	r5, r1
 800a518:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a51c:	f7f6 f880 	bl	8000620 <__aeabi_dmul>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4620      	mov	r0, r4
 800a526:	4629      	mov	r1, r5
 800a528:	f7f5 fec8 	bl	80002bc <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a52c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a530:	f7f6 f9a0 	bl	8000874 <__aeabi_ddiv>
 800a534:	ec41 0b10 	vmov	d0, r0, r1
 800a538:	f018 f872 	bl	8022620 <cbrt>
 800a53c:	ee1b 0a10 	vmov	r0, s22
 800a540:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a544:	f7f6 f818 	bl	8000578 <__aeabi_f2d>
 800a548:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a54c:	4604      	mov	r4, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	ec51 0b10 	vmov	r0, r1, d0
 800a558:	f7f5 feae 	bl	80002b8 <__aeabi_dsub>
 800a55c:	2200      	movs	r2, #0
 800a55e:	4b5c      	ldr	r3, [pc, #368]	; (800a6d0 <cqs_func+0xb88>)
 800a560:	f7f6 f85e 	bl	8000620 <__aeabi_dmul>
 800a564:	f7f6 fb54 	bl	8000c10 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a568:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a56c:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a570:	4639      	mov	r1, r7
 800a572:	4630      	mov	r0, r6
 800a574:	f7f6 f854 	bl	8000620 <__aeabi_dmul>
 800a578:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800a57c:	4606      	mov	r6, r0
 800a57e:	460f      	mov	r7, r1
 800a580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a584:	f7f6 f84c 	bl	8000620 <__aeabi_dmul>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4630      	mov	r0, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	f7f5 fe94 	bl	80002bc <__adddf3>
 800a594:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800a598:	4606      	mov	r6, r0
 800a59a:	460f      	mov	r7, r1
 800a59c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a5a0:	f7f6 f83e 	bl	8000620 <__aeabi_dmul>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4639      	mov	r1, r7
 800a5ac:	f7f5 fe86 	bl	80002bc <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5b4:	f7f6 f95e 	bl	8000874 <__aeabi_ddiv>
 800a5b8:	ec41 0b10 	vmov	d0, r0, r1
 800a5bc:	f018 f830 	bl	8022620 <cbrt>
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	ec53 2b10 	vmov	r2, r3, d0
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f7f5 fe76 	bl	80002b8 <__aeabi_dsub>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4b42      	ldr	r3, [pc, #264]	; (800a6d8 <cqs_func+0xb90>)
 800a5d0:	f7f6 f826 	bl	8000620 <__aeabi_dmul>
 800a5d4:	f7f6 fb1c 	bl	8000c10 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800a5d8:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a5dc:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a5e0:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800a5e4:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a5e8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a5ec:	ee17 0a90 	vmov	r0, s15
 800a5f0:	f7f5 ffc2 	bl	8000578 <__aeabi_f2d>
 800a5f4:	ec41 0b10 	vmov	d0, r0, r1
 800a5f8:	f018 fbc6 	bl	8022d88 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a5fc:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a600:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a604:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800a608:	ee17 0a90 	vmov	r0, s15
 800a60c:	f7f5 ffb4 	bl	8000578 <__aeabi_f2d>
 800a610:	ec41 0b10 	vmov	d0, r0, r1
 800a614:	f018 fbb8 	bl	8022d88 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a618:	4629      	mov	r1, r5
 800a61a:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a61c:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a620:	f7f6 faf6 	bl	8000c10 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a624:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a628:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a62c:	ec51 0b10 	vmov	r0, r1, d0
 800a630:	f7f6 faee 	bl	8000c10 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800a634:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800a638:	a11d      	add	r1, pc, #116	; (adr r1, 800a6b0 <cqs_func+0xb68>)
 800a63a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a63e:	4b27      	ldr	r3, [pc, #156]	; (800a6dc <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a640:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800a6e0 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800a644:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a648:	210d      	movs	r1, #13
 800a64a:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800a64c:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a650:	f008 fc5e 	bl	8012f10 <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a654:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800a658:	ee17 0a90 	vmov	r0, s15
 800a65c:	f7f5 ff8c 	bl	8000578 <__aeabi_f2d>
 800a660:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800a664:	4606      	mov	r6, r0
 800a666:	ee17 0a90 	vmov	r0, s15
 800a66a:	460f      	mov	r7, r1
 800a66c:	f7f5 ff84 	bl	8000578 <__aeabi_f2d>
 800a670:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800a674:	4680      	mov	r8, r0
 800a676:	ee17 0a90 	vmov	r0, s15
 800a67a:	4689      	mov	r9, r1
 800a67c:	f7f5 ff7c 	bl	8000578 <__aeabi_f2d>
 800a680:	4632      	mov	r2, r6
 800a682:	4604      	mov	r4, r0
 800a684:	460d      	mov	r5, r1
 800a686:	463b      	mov	r3, r7
 800a688:	4630      	mov	r0, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f5 ffc8 	bl	8000620 <__aeabi_dmul>
 800a690:	4642      	mov	r2, r8
 800a692:	4606      	mov	r6, r0
 800a694:	460f      	mov	r7, r1
 800a696:	464b      	mov	r3, r9
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f5 ffc0 	bl	8000620 <__aeabi_dmul>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 fe08 	bl	80002bc <__adddf3>
 800a6ac:	e01e      	b.n	800a6ec <cqs_func+0xba4>
 800a6ae:	bf00      	nop
 800a6b0:	cccccccd 	.word	0xcccccccd
 800a6b4:	3feccccc 	.word	0x3feccccc
 800a6b8:	42e80000 	.word	0x42e80000
 800a6bc:	20090728 	.word	0x20090728
 800a6c0:	200908b0 	.word	0x200908b0
 800a6c4:	20090628 	.word	0x20090628
 800a6c8:	20090838 	.word	0x20090838
 800a6cc:	200906a8 	.word	0x200906a8
 800a6d0:	407f4000 	.word	0x407f4000
 800a6d4:	200907a0 	.word	0x200907a0
 800a6d8:	40690000 	.word	0x40690000
 800a6dc:	200906a0 	.word	0x200906a0
 800a6e0:	3f666666 	.word	0x3f666666
 800a6e4:	20003613 	.word	0x20003613
 800a6e8:	20000140 	.word	0x20000140
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f7f5 ff92 	bl	8000620 <__aeabi_dmul>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f5 fdda 	bl	80002bc <__adddf3>
 800a708:	ec41 0b10 	vmov	d0, r0, r1
 800a70c:	f018 fb3c 	bl	8022d88 <sqrt>
 800a710:	ec51 0b10 	vmov	r0, r1, d0
 800a714:	f7f6 fa7c 	bl	8000c10 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800a718:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a720:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800a724:	f340 82a4 	ble.w	800ac70 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a728:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800a72c:	eee9 7a09 	vfma.f32	s15, s18, s18
 800a730:	ee17 0a90 	vmov	r0, s15
 800a734:	f7f5 ff20 	bl	8000578 <__aeabi_f2d>
 800a738:	ec41 0b10 	vmov	d0, r0, r1
 800a73c:	f018 fb24 	bl	8022d88 <sqrt>
 800a740:	ec51 0b10 	vmov	r0, r1, d0
 800a744:	f7f6 fa64 	bl	8000c10 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800a748:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a74c:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a750:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800a754:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a758:	f7f5 ff0e 	bl	8000578 <__aeabi_f2d>
 800a75c:	a3bc      	add	r3, pc, #752	; (adr r3, 800aa50 <cqs_func+0xf08>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 ff5d 	bl	8000620 <__aeabi_dmul>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	2000      	movs	r0, #0
 800a76c:	49c8      	ldr	r1, [pc, #800]	; (800aa90 <cqs_func+0xf48>)
 800a76e:	4cc9      	ldr	r4, [pc, #804]	; (800aa94 <cqs_func+0xf4c>)
 800a770:	f7f5 fda2 	bl	80002b8 <__aeabi_dsub>
 800a774:	2200      	movs	r2, #0
 800a776:	4bc8      	ldr	r3, [pc, #800]	; (800aa98 <cqs_func+0xf50>)
 800a778:	f7f6 f87c 	bl	8000874 <__aeabi_ddiv>
 800a77c:	ec41 0b10 	vmov	d0, r0, r1
 800a780:	f018 f88e 	bl	80228a0 <exp>
 800a784:	2200      	movs	r2, #0
 800a786:	4bc5      	ldr	r3, [pc, #788]	; (800aa9c <cqs_func+0xf54>)
 800a788:	ec51 0b10 	vmov	r0, r1, d0
 800a78c:	f7f5 fd96 	bl	80002bc <__adddf3>
 800a790:	ec41 0b10 	vmov	d0, r0, r1
 800a794:	f018 f900 	bl	8022998 <log>
 800a798:	2200      	movs	r2, #0
 800a79a:	ec51 0b10 	vmov	r0, r1, d0
 800a79e:	4bbe      	ldr	r3, [pc, #760]	; (800aa98 <cqs_func+0xf50>)
 800a7a0:	f7f5 ff3e 	bl	8000620 <__aeabi_dmul>
 800a7a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7a8:	f7f5 ff3a 	bl	8000620 <__aeabi_dmul>
 800a7ac:	f7f6 fa30 	bl	8000c10 <__aeabi_d2f>
 800a7b0:	ee07 0a90 	vmov	s15, r0
 800a7b4:	4bba      	ldr	r3, [pc, #744]	; (800aaa0 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a7b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a7ba:	6018      	str	r0, [r3, #0]
 800a7bc:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a7c0:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800a7c4:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800a7c8:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a7cc:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800a7d0:	f47f adc7 	bne.w	800a362 <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800a7d4:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800a7d8:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800a7dc:	ee17 0a90 	vmov	r0, s15
 800a7e0:	f7f5 feca 	bl	8000578 <__aeabi_f2d>
 800a7e4:	ec41 0b10 	vmov	d0, r0, r1
 800a7e8:	f018 face 	bl	8022d88 <sqrt>
 800a7ec:	ec51 0b10 	vmov	r0, r1, d0
 800a7f0:	f7f6 fa0e 	bl	8000c10 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800a7f4:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800a7f8:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800a7fc:	ee17 0a90 	vmov	r0, s15
 800a800:	f7f5 feba 	bl	8000578 <__aeabi_f2d>
 800a804:	ec41 0b10 	vmov	d0, r0, r1
 800a808:	f018 fabe 	bl	8022d88 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a80c:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800a810:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a814:	f7f5 feb0 	bl	8000578 <__aeabi_f2d>
 800a818:	a38d      	add	r3, pc, #564	; (adr r3, 800aa50 <cqs_func+0xf08>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 feff 	bl	8000620 <__aeabi_dmul>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	2000      	movs	r0, #0
 800a828:	4999      	ldr	r1, [pc, #612]	; (800aa90 <cqs_func+0xf48>)
 800a82a:	f7f5 fd45 	bl	80002b8 <__aeabi_dsub>
 800a82e:	f7f6 f9ef 	bl	8000c10 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800a832:	ee06 0a90 	vmov	s13, r0
 800a836:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800a83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a83e:	ee17 0a10 	vmov	r0, s14
 800a842:	f7f5 fe99 	bl	8000578 <__aeabi_f2d>
 800a846:	ec41 0b10 	vmov	d0, r0, r1
 800a84a:	f018 f829 	bl	80228a0 <exp>
 800a84e:	2200      	movs	r2, #0
 800a850:	4b92      	ldr	r3, [pc, #584]	; (800aa9c <cqs_func+0xf54>)
 800a852:	ec51 0b10 	vmov	r0, r1, d0
 800a856:	f7f5 fd31 	bl	80002bc <__adddf3>
 800a85a:	ec41 0b10 	vmov	d0, r0, r1
 800a85e:	f018 f89b 	bl	8022998 <log>

	 Qa_temp = Mcct * Qa0_100;
 800a862:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800a866:	ec51 0b10 	vmov	r0, r1, d0
 800a86a:	2200      	movs	r2, #0
 800a86c:	4b8a      	ldr	r3, [pc, #552]	; (800aa98 <cqs_func+0xf50>)
 800a86e:	f7f5 fed7 	bl	8000620 <__aeabi_dmul>
 800a872:	f7f6 f9cd 	bl	8000c10 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800a876:	f7f5 fe7f 	bl	8000578 <__aeabi_f2d>
 800a87a:	4632      	mov	r2, r6
 800a87c:	463b      	mov	r3, r7
 800a87e:	f7f5 fecf 	bl	8000620 <__aeabi_dmul>
 800a882:	f7f6 f9c5 	bl	8000c10 <__aeabi_d2f>
 800a886:	ee07 0a90 	vmov	s15, r0
 800a88a:	4b86      	ldr	r3, [pc, #536]	; (800aaa4 <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800a88c:	4a86      	ldr	r2, [pc, #536]	; (800aaa8 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800a88e:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800a890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800a894:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800a896:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800a89a:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800a89c:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800a89e:	f7f6 f9b7 	bl	8000c10 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800a8a2:	f7f5 fe69 	bl	8000578 <__aeabi_f2d>
 800a8a6:	a36c      	add	r3, pc, #432	; (adr r3, 800aa58 <cqs_func+0xf10>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f7f5 feb8 	bl	8000620 <__aeabi_dmul>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	4976      	ldr	r1, [pc, #472]	; (800aa90 <cqs_func+0xf48>)
 800a8b8:	f7f5 fcfe 	bl	80002b8 <__aeabi_dsub>
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4b76      	ldr	r3, [pc, #472]	; (800aa98 <cqs_func+0xf50>)
 800a8c0:	f7f5 ffd8 	bl	8000874 <__aeabi_ddiv>
 800a8c4:	ec41 0b10 	vmov	d0, r0, r1
 800a8c8:	f017 ffea 	bl	80228a0 <exp>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4b73      	ldr	r3, [pc, #460]	; (800aa9c <cqs_func+0xf54>)
 800a8d0:	ec51 0b10 	vmov	r0, r1, d0
 800a8d4:	f7f5 fcf0 	bl	80002b8 <__aeabi_dsub>
 800a8d8:	ec41 0b10 	vmov	d0, r0, r1
 800a8dc:	f018 f85c 	bl	8022998 <log>
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4b6d      	ldr	r3, [pc, #436]	; (800aa98 <cqs_func+0xf50>)
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	ed8d 0b00 	vstr	d0, [sp]
 800a8ec:	f7f5 fe98 	bl	8000620 <__aeabi_dmul>
 800a8f0:	ed9d 0b00 	vldr	d0, [sp]
 800a8f4:	ec53 2b10 	vmov	r2, r3, d0
 800a8f8:	f7f5 fe92 	bl	8000620 <__aeabi_dmul>
 800a8fc:	f7f6 f988 	bl	8000c10 <__aeabi_d2f>
 800a900:	ee07 0a90 	vmov	s15, r0
 800a904:	4b69      	ldr	r3, [pc, #420]	; (800aaac <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800a906:	4a6a      	ldr	r2, [pc, #424]	; (800aab0 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800a908:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800a90a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800a90e:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800a912:	ee17 3a90 	vmov	r3, s15
 800a916:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800a918:	2200      	movs	r2, #0
 800a91a:	4b5f      	ldr	r3, [pc, #380]	; (800aa98 <cqs_func+0xf50>)
 800a91c:	f7f5 fe80 	bl	8000620 <__aeabi_dmul>
 800a920:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	ee79 7a67 	vsub.f32	s15, s18, s15
 800a92c:	ee17 0a90 	vmov	r0, s15
 800a930:	f7f5 fe22 	bl	8000578 <__aeabi_f2d>
 800a934:	a34a      	add	r3, pc, #296	; (adr r3, 800aa60 <cqs_func+0xf18>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f7f5 fe71 	bl	8000620 <__aeabi_dmul>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	2000      	movs	r0, #0
 800a944:	4952      	ldr	r1, [pc, #328]	; (800aa90 <cqs_func+0xf48>)
 800a946:	f7f5 fcb7 	bl	80002b8 <__aeabi_dsub>
 800a94a:	2200      	movs	r2, #0
 800a94c:	4b52      	ldr	r3, [pc, #328]	; (800aa98 <cqs_func+0xf50>)
 800a94e:	f7f5 ff91 	bl	8000874 <__aeabi_ddiv>
 800a952:	ec41 0b10 	vmov	d0, r0, r1
 800a956:	f017 ffa3 	bl	80228a0 <exp>
 800a95a:	2200      	movs	r2, #0
 800a95c:	4b4f      	ldr	r3, [pc, #316]	; (800aa9c <cqs_func+0xf54>)
 800a95e:	ec51 0b10 	vmov	r0, r1, d0
 800a962:	f7f5 fca9 	bl	80002b8 <__aeabi_dsub>
 800a966:	ec41 0b10 	vmov	d0, r0, r1
 800a96a:	f018 f815 	bl	8022998 <log>
 800a96e:	4620      	mov	r0, r4
 800a970:	ec53 2b10 	vmov	r2, r3, d0
 800a974:	4629      	mov	r1, r5
 800a976:	f7f5 fe53 	bl	8000620 <__aeabi_dmul>
 800a97a:	f7f6 f949 	bl	8000c10 <__aeabi_d2f>
 800a97e:	ee07 0a90 	vmov	s15, r0
 800a982:	4b4c      	ldr	r3, [pc, #304]	; (800aab4 <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800a984:	4a4c      	ldr	r2, [pc, #304]	; (800aab8 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800a986:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800a988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800a98c:	4943      	ldr	r1, [pc, #268]	; (800aa9c <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800a98e:	ee17 3a90 	vmov	r3, s15
 800a992:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800a994:	4b49      	ldr	r3, [pc, #292]	; (800aabc <cqs_func+0xf74>)
 800a996:	2000      	movs	r0, #0
 800a998:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a99c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a9a0:	210d      	movs	r1, #13
 800a9a2:	2055      	movs	r0, #85	; 0x55
 800a9a4:	b02f      	add	sp, #188	; 0xbc
 800a9a6:	ecbd 8b0a 	vpop	{d8-d12}
 800a9aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a9ae:	f008 baaf 	b.w	8012f10 <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	f241 3387 	movw	r3, #4999	; 0x1387
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	f67f a928 	bls.w	8009c0e <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800a9be:	9a04      	ldr	r2, [sp, #16]
 800a9c0:	f641 3357 	movw	r3, #6999	; 0x1b57
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d97b      	bls.n	800aac0 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800a9c8:	9804      	ldr	r0, [sp, #16]
 800a9ca:	f7f5 fdb3 	bl	8000534 <__aeabi_ui2d>
 800a9ce:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800aa68 <cqs_func+0xf20>
 800a9d2:	ec41 0b10 	vmov	d0, r0, r1
 800a9d6:	f018 f85f 	bl	8022a98 <pow>
 800a9da:	eddd 7a04 	vldr	s15, [sp, #16]
 800a9de:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800a9e2:	ed8d 0b00 	vstr	d0, [sp]
 800a9e6:	ee68 7a08 	vmul.f32	s15, s16, s16
 800a9ea:	ee17 0a90 	vmov	r0, s15
 800a9ee:	f7f5 fdc3 	bl	8000578 <__aeabi_f2d>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	a11e      	add	r1, pc, #120	; (adr r1, 800aa70 <cqs_func+0xf28>)
 800a9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9fc:	f7f5 ff3a 	bl	8000874 <__aeabi_ddiv>
 800aa00:	ed9d 0b00 	vldr	d0, [sp]
 800aa04:	4604      	mov	r4, r0
 800aa06:	ec53 2b10 	vmov	r2, r3, d0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	a11a      	add	r1, pc, #104	; (adr r1, 800aa78 <cqs_func+0xf30>)
 800aa0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa12:	f7f5 ff2f 	bl	8000874 <__aeabi_ddiv>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f7f5 fc4d 	bl	80002bc <__adddf3>
 800aa22:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800aa24:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800aa28:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800aa2a:	f7f5 fda5 	bl	8000578 <__aeabi_f2d>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	a113      	add	r1, pc, #76	; (adr r1, 800aa80 <cqs_func+0xf38>)
 800aa34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa38:	f7f5 ff1c 	bl	8000874 <__aeabi_ddiv>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4620      	mov	r0, r4
 800aa42:	4629      	mov	r1, r5
 800aa44:	f7f5 fc3a 	bl	80002bc <__adddf3>
 800aa48:	a30f      	add	r3, pc, #60	; (adr r3, 800aa88 <cqs_func+0xf40>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	e073      	b.n	800ab38 <cqs_func+0xff0>
 800aa50:	cccccccd 	.word	0xcccccccd
 800aa54:	4008cccc 	.word	0x4008cccc
 800aa58:	d70a3d71 	.word	0xd70a3d71
 800aa5c:	400770a3 	.word	0x400770a3
 800aa60:	a3d70a3d 	.word	0xa3d70a3d
 800aa64:	400e3d70 	.word	0x400e3d70
 800aa68:	00000000 	.word	0x00000000
 800aa6c:	40080000 	.word	0x40080000
 800aa70:	00000000 	.word	0x00000000
 800aa74:	413d04e8 	.word	0x413d04e8
 800aa78:	00000001 	.word	0x00000001
 800aa7c:	c1dde5cf 	.word	0xc1dde5cf
 800aa80:	28f5c290 	.word	0x28f5c290
 800aa84:	406eef5c 	.word	0x406eef5c
 800aa88:	a3ec02f3 	.word	0xa3ec02f3
 800aa8c:	3fce5753 	.word	0x3fce5753
 800aa90:	40590000 	.word	0x40590000
 800aa94:	20000188 	.word	0x20000188
 800aa98:	40240000 	.word	0x40240000
 800aa9c:	3ff00000 	.word	0x3ff00000
 800aaa0:	20090830 	.word	0x20090830
 800aaa4:	20090928 	.word	0x20090928
 800aaa8:	20003623 	.word	0x20003623
 800aaac:	2009092c 	.word	0x2009092c
 800aab0:	20003624 	.word	0x20003624
 800aab4:	20090720 	.word	0x20090720
 800aab8:	20003625 	.word	0x20003625
 800aabc:	200906a0 	.word	0x200906a0
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800aac0:	eddd 7a04 	vldr	s15, [sp, #16]
 800aac4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800aac8:	ee68 8a08 	vmul.f32	s17, s16, s16
 800aacc:	ee68 7a28 	vmul.f32	s15, s16, s17
 800aad0:	ee17 0a90 	vmov	r0, s15
 800aad4:	f7f5 fd50 	bl	8000578 <__aeabi_f2d>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	a181      	add	r1, pc, #516	; (adr r1, 800ace4 <cqs_func+0x119c>)
 800aade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aae2:	f7f5 fec7 	bl	8000874 <__aeabi_ddiv>
 800aae6:	4604      	mov	r4, r0
 800aae8:	ee18 0a90 	vmov	r0, s17
 800aaec:	460d      	mov	r5, r1
 800aaee:	f7f5 fd43 	bl	8000578 <__aeabi_f2d>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	a17d      	add	r1, pc, #500	; (adr r1, 800acec <cqs_func+0x11a4>)
 800aaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafc:	f7f5 feba 	bl	8000874 <__aeabi_ddiv>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4620      	mov	r0, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7f5 fbd8 	bl	80002bc <__adddf3>
 800ab0c:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800ab0e:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ab12:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800ab14:	f7f5 fd30 	bl	8000578 <__aeabi_f2d>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	a175      	add	r1, pc, #468	; (adr r1, 800acf4 <cqs_func+0x11ac>)
 800ab1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab22:	f7f5 fea7 	bl	8000874 <__aeabi_ddiv>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 fbc5 	bl	80002bc <__adddf3>
 800ab32:	a372      	add	r3, pc, #456	; (adr r3, 800acfc <cqs_func+0x11b4>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ab38:	f7f5 fbc0 	bl	80002bc <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ab3c:	4b64      	ldr	r3, [pc, #400]	; (800acd0 <cqs_func+0x1188>)
 800ab3e:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800ab42:	4b63      	ldr	r3, [pc, #396]	; (800acd0 <cqs_func+0x1188>)
 800ab44:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4b62      	ldr	r3, [pc, #392]	; (800acd4 <cqs_func+0x118c>)
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 fd66 	bl	8000620 <__aeabi_dmul>
 800ab54:	4622      	mov	r2, r4
 800ab56:	462b      	mov	r3, r5
 800ab58:	f7f5 fd62 	bl	8000620 <__aeabi_dmul>
 800ab5c:	a346      	add	r3, pc, #280	; (adr r3, 800ac78 <cqs_func+0x1130>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	4606      	mov	r6, r0
 800ab64:	460f      	mov	r7, r1
 800ab66:	4620      	mov	r0, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7f5 fd59 	bl	8000620 <__aeabi_dmul>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 fba1 	bl	80002bc <__adddf3>
 800ab7a:	a341      	add	r3, pc, #260	; (adr r3, 800ac80 <cqs_func+0x1138>)
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f7f5 fb9a 	bl	80002b8 <__aeabi_dsub>
 800ab84:	4b54      	ldr	r3, [pc, #336]	; (800acd8 <cqs_func+0x1190>)
 800ab86:	4606      	mov	r6, r0
 800ab88:	460f      	mov	r7, r1
 800ab8a:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ab8e:	4620      	mov	r0, r4
 800ab90:	a33d      	add	r3, pc, #244	; (adr r3, 800ac88 <cqs_func+0x1140>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	4629      	mov	r1, r5
 800ab98:	f7f5 fd42 	bl	8000620 <__aeabi_dmul>
 800ab9c:	a33c      	add	r3, pc, #240	; (adr r3, 800ac90 <cqs_func+0x1148>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 fb8b 	bl	80002bc <__adddf3>
 800aba6:	a33c      	add	r3, pc, #240	; (adr r3, 800ac98 <cqs_func+0x1150>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	4680      	mov	r8, r0
 800abae:	4689      	mov	r9, r1
 800abb0:	4630      	mov	r0, r6
 800abb2:	4639      	mov	r1, r7
 800abb4:	f7f5 fd34 	bl	8000620 <__aeabi_dmul>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4640      	mov	r0, r8
 800abbe:	4649      	mov	r1, r9
 800abc0:	f7f5 fb7a 	bl	80002b8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800abc4:	a336      	add	r3, pc, #216	; (adr r3, 800aca0 <cqs_func+0x1158>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800abca:	4680      	mov	r8, r0
 800abcc:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800abce:	4620      	mov	r0, r4
 800abd0:	4629      	mov	r1, r5
 800abd2:	f7f5 fd25 	bl	8000620 <__aeabi_dmul>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	a133      	add	r1, pc, #204	; (adr r1, 800aca8 <cqs_func+0x1160>)
 800abdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe0:	f7f5 fb6a 	bl	80002b8 <__aeabi_dsub>
 800abe4:	a332      	add	r3, pc, #200	; (adr r3, 800acb0 <cqs_func+0x1168>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	4682      	mov	sl, r0
 800abec:	468b      	mov	fp, r1
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 fd15 	bl	8000620 <__aeabi_dmul>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4650      	mov	r0, sl
 800abfc:	4659      	mov	r1, fp
 800abfe:	f7f5 fb5d 	bl	80002bc <__adddf3>
 800ac02:	f7f6 f805 	bl	8000c10 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ac06:	f7f5 fcb7 	bl	8000578 <__aeabi_f2d>
 800ac0a:	4642      	mov	r2, r8
 800ac0c:	464b      	mov	r3, r9
 800ac0e:	f7f5 fe31 	bl	8000874 <__aeabi_ddiv>
 800ac12:	f7f5 fffd 	bl	8000c10 <__aeabi_d2f>
 800ac16:	4b31      	ldr	r3, [pc, #196]	; (800acdc <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800ac18:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ac1a:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800ac1c:	a326      	add	r3, pc, #152	; (adr r3, 800acb8 <cqs_func+0x1170>)
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7f5 fcfc 	bl	8000620 <__aeabi_dmul>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	a124      	add	r1, pc, #144	; (adr r1, 800acc0 <cqs_func+0x1178>)
 800ac2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac32:	f7f5 fb41 	bl	80002b8 <__aeabi_dsub>
 800ac36:	a324      	add	r3, pc, #144	; (adr r3, 800acc8 <cqs_func+0x1180>)
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	460d      	mov	r5, r1
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 fcec 	bl	8000620 <__aeabi_dmul>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 fb34 	bl	80002bc <__adddf3>
 800ac54:	f7f5 ffdc 	bl	8000c10 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ac58:	f7f5 fc8e 	bl	8000578 <__aeabi_f2d>
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	4642      	mov	r2, r8
 800ac60:	f7f5 fe08 	bl	8000874 <__aeabi_ddiv>
 800ac64:	f7f5 ffd4 	bl	8000c10 <__aeabi_d2f>
 800ac68:	4b1d      	ldr	r3, [pc, #116]	; (800ace0 <cqs_func+0x1198>)
 800ac6a:	6018      	str	r0, [r3, #0]
 800ac6c:	f7fe bfd2 	b.w	8009c14 <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800ac70:	ee07 0a90 	vmov	s15, r0
 800ac74:	e56c      	b.n	800a750 <cqs_func+0xc08>
 800ac76:	bf00      	nop
 800ac78:	8f5c28f6 	.word	0x8f5c28f6
 800ac7c:	4006f5c2 	.word	0x4006f5c2
 800ac80:	9999999a 	.word	0x9999999a
 800ac84:	3fd19999 	.word	0x3fd19999
 800ac88:	af4f0d84 	.word	0xaf4f0d84
 800ac8c:	3fd06594 	.word	0x3fd06594
 800ac90:	9f559b3d 	.word	0x9f559b3d
 800ac94:	3f98adab 	.word	0x3f98adab
 800ac98:	487fcb92 	.word	0x487fcb92
 800ac9c:	3fe77dbf 	.word	0x3fe77dbf
 800aca0:	17c1bda5 	.word	0x17c1bda5
 800aca4:	3ffc5326 	.word	0x3ffc5326
 800aca8:	76c8b439 	.word	0x76c8b439
 800acac:	bff59fbe 	.word	0xbff59fbe
 800acb0:	0aa64c30 	.word	0x0aa64c30
 800acb4:	4017a546 	.word	0x4017a546
 800acb8:	205bc01a 	.word	0x205bc01a
 800acbc:	403f7141 	.word	0x403f7141
 800acc0:	eb851eb8 	.word	0xeb851eb8
 800acc4:	3f9eb851 	.word	0x3f9eb851
 800acc8:	ee631f8a 	.word	0xee631f8a
 800accc:	403e125a 	.word	0x403e125a
 800acd0:	20090828 	.word	0x20090828
 800acd4:	c0080000 	.word	0xc0080000
 800acd8:	20090820 	.word	0x20090820
 800acdc:	2000360c 	.word	0x2000360c
 800ace0:	20003610 	.word	0x20003610
 800ace4:	dc000000 	.word	0xdc000000
 800ace8:	c1f12993 	.word	0xc1f12993
 800acec:	00000000 	.word	0x00000000
 800acf0:	4146a47c 	.word	0x4146a47c
 800acf4:	3d70a3d7 	.word	0x3d70a3d7
 800acf8:	4058c70a 	.word	0x4058c70a
 800acfc:	d594f26b 	.word	0xd594f26b
 800ad00:	3fcf3d74 	.word	0x3fcf3d74

0800ad04 <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800ad04:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800ad06:	bbb8      	cbnz	r0, 800ad78 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800ad08:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ad0c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800ad10:	2212      	movs	r2, #18
 800ad12:	215f      	movs	r1, #95	; 0x5f
 800ad14:	2010      	movs	r0, #16
 800ad16:	9400      	str	r4, [sp, #0]
 800ad18:	f011 f87d 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800ad1c:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800ad20:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800ad24:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800ad28:	2010      	movs	r0, #16
 800ad2a:	9400      	str	r4, [sp, #0]
 800ad2c:	f011 f873 	bl	801be16 <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800ad30:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800ad34:	4619      	mov	r1, r3
 800ad36:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800ad3a:	2010      	movs	r0, #16
 800ad3c:	9400      	str	r4, [sp, #0]
 800ad3e:	f011 f80d 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800ad42:	f240 1301 	movw	r3, #257	; 0x101
 800ad46:	4619      	mov	r1, r3
 800ad48:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800ad4c:	2010      	movs	r0, #16
 800ad4e:	9400      	str	r4, [sp, #0]
 800ad50:	f011 f804 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800ad54:	23b5      	movs	r3, #181	; 0xb5
 800ad56:	4619      	mov	r1, r3
 800ad58:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800ad5c:	2010      	movs	r0, #16
 800ad5e:	9400      	str	r4, [sp, #0]
 800ad60:	f010 fffc 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800ad64:	2369      	movs	r3, #105	; 0x69
 800ad66:	9400      	str	r4, [sp, #0]
 800ad68:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800ad70:	f010 fff4 	bl	801bd5c <TFT_DrawLine>
		}
}
 800ad74:	b002      	add	sp, #8
 800ad76:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800ad78:	2801      	cmp	r0, #1
 800ad7a:	d131      	bne.n	800ade0 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800ad7c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ad80:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ad84:	22ff      	movs	r2, #255	; 0xff
 800ad86:	2146      	movs	r1, #70	; 0x46
 800ad88:	20fd      	movs	r0, #253	; 0xfd
 800ad8a:	9400      	str	r4, [sp, #0]
 800ad8c:	f011 f843 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800ad90:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ad94:	22ff      	movs	r2, #255	; 0xff
 800ad96:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800ad9a:	2028      	movs	r0, #40	; 0x28
 800ad9c:	9400      	str	r4, [sp, #0]
 800ad9e:	f011 f83a 	bl	801be16 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800ada2:	22cc      	movs	r2, #204	; 0xcc
 800ada4:	4610      	mov	r0, r2
 800ada6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800adaa:	2146      	movs	r1, #70	; 0x46
 800adac:	9400      	str	r4, [sp, #0]
 800adae:	f010 ffd5 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800adb2:	2297      	movs	r2, #151	; 0x97
 800adb4:	4610      	mov	r0, r2
 800adb6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800adba:	2146      	movs	r1, #70	; 0x46
 800adbc:	9400      	str	r4, [sp, #0]
 800adbe:	f010 ffcd 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800adc2:	2262      	movs	r2, #98	; 0x62
 800adc4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800adc8:	4610      	mov	r0, r2
 800adca:	9400      	str	r4, [sp, #0]
 800adcc:	2146      	movs	r1, #70	; 0x46
 800adce:	f010 ffc5 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800add2:	9400      	str	r4, [sp, #0]
 800add4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800add8:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800adda:	2146      	movs	r1, #70	; 0x46
 800addc:	4610      	mov	r0, r2
 800adde:	e7c7      	b.n	800ad70 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 800ade0:	2802      	cmp	r0, #2
 800ade2:	d1c7      	bne.n	800ad74 <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800ade4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ade8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800adec:	2210      	movs	r2, #16
 800adee:	214a      	movs	r1, #74	; 0x4a
 800adf0:	2012      	movs	r0, #18
 800adf2:	9400      	str	r4, [sp, #0]
 800adf4:	f011 f80f 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800adf8:	234c      	movs	r3, #76	; 0x4c
 800adfa:	22e8      	movs	r2, #232	; 0xe8
 800adfc:	214a      	movs	r1, #74	; 0x4a
 800adfe:	2011      	movs	r0, #17
 800ae00:	9400      	str	r4, [sp, #0]
 800ae02:	f011 f808 	bl	801be16 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800ae06:	2244      	movs	r2, #68	; 0x44
 800ae08:	4610      	mov	r0, r2
 800ae0a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ae0e:	2146      	movs	r1, #70	; 0x46
 800ae10:	9400      	str	r4, [sp, #0]
 800ae12:	f010 ffa3 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800ae16:	2279      	movs	r2, #121	; 0x79
 800ae18:	4610      	mov	r0, r2
 800ae1a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ae1e:	2146      	movs	r1, #70	; 0x46
 800ae20:	9400      	str	r4, [sp, #0]
 800ae22:	f010 ff9b 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800ae26:	22ae      	movs	r2, #174	; 0xae
 800ae28:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	9400      	str	r4, [sp, #0]
 800ae30:	2146      	movs	r1, #70	; 0x46
 800ae32:	f010 ff93 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800ae36:	9400      	str	r4, [sp, #0]
 800ae38:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ae3c:	22e3      	movs	r2, #227	; 0xe3
 800ae3e:	e7cc      	b.n	800adda <CQS_Axes+0xd6>

0800ae40 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800ae40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800ae44:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800ae46:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800ae48:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800ae4a:	4688      	mov	r8, r1
 800ae4c:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800ae4e:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d15a      	bne.n	800af0c <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 800ae56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ae5a:	f011 fa0b 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ae5e:	2063      	movs	r0, #99	; 0x63
 800ae60:	f011 fa0e 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800ae64:	485c      	ldr	r0, [pc, #368]	; (800afd8 <CQS_Axes_Measure+0x198>)
 800ae66:	f011 f9ff 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800ae6a:	2261      	movs	r2, #97	; 0x61
 800ae6c:	2146      	movs	r1, #70	; 0x46
 800ae6e:	2014      	movs	r0, #20
 800ae70:	f011 fac4 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800ae74:	4859      	ldr	r0, [pc, #356]	; (800afdc <CQS_Axes_Measure+0x19c>)
 800ae76:	f011 f9f7 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800ae7a:	2251      	movs	r2, #81	; 0x51
 800ae7c:	2144      	movs	r1, #68	; 0x44
 800ae7e:	2005      	movs	r0, #5
 800ae80:	f011 fabc 	bl	801c3fc <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800ae84:	4642      	mov	r2, r8
 800ae86:	4956      	ldr	r1, [pc, #344]	; (800afe0 <CQS_Axes_Measure+0x1a0>)
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f014 fcd7 	bl	801f83c <sprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ae8e:	2303      	movs	r3, #3
 800ae90:	4622      	mov	r2, r4
 800ae92:	2144      	movs	r1, #68	; 0x44
 800ae94:	2027      	movs	r0, #39	; 0x27
 800ae96:	f011 fb09 	bl	801c4ac <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800ae9a:	484f      	ldr	r0, [pc, #316]	; (800afd8 <CQS_Axes_Measure+0x198>)
 800ae9c:	f011 f9e4 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800aea0:	2270      	movs	r2, #112	; 0x70
 800aea2:	4610      	mov	r0, r2
 800aea4:	2146      	movs	r1, #70	; 0x46
 800aea6:	f011 faa9 	bl	801c3fc <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800aeaa:	484c      	ldr	r0, [pc, #304]	; (800afdc <CQS_Axes_Measure+0x19c>)
 800aeac:	f011 f9dc 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800aeb0:	2251      	movs	r2, #81	; 0x51
 800aeb2:	2144      	movs	r1, #68	; 0x44
 800aeb4:	205d      	movs	r0, #93	; 0x5d
 800aeb6:	f011 faa1 	bl	801c3fc <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800aeba:	463a      	mov	r2, r7
 800aebc:	4948      	ldr	r1, [pc, #288]	; (800afe0 <CQS_Axes_Measure+0x1a0>)
 800aebe:	4620      	mov	r0, r4
 800aec0:	f014 fcbc 	bl	801f83c <sprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800aec4:	2303      	movs	r3, #3
 800aec6:	4622      	mov	r2, r4
 800aec8:	2144      	movs	r1, #68	; 0x44
 800aeca:	2082      	movs	r0, #130	; 0x82
 800aecc:	f011 faee 	bl	801c4ac <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800aed0:	4841      	ldr	r0, [pc, #260]	; (800afd8 <CQS_Axes_Measure+0x198>)
 800aed2:	f011 f9c9 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800aed6:	2266      	movs	r2, #102	; 0x66
 800aed8:	2146      	movs	r1, #70	; 0x46
 800aeda:	20ce      	movs	r0, #206	; 0xce
 800aedc:	f011 fa8e 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800aee0:	483e      	ldr	r0, [pc, #248]	; (800afdc <CQS_Axes_Measure+0x19c>)
 800aee2:	f011 f9c1 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800aee6:	2251      	movs	r2, #81	; 0x51
 800aee8:	2144      	movs	r1, #68	; 0x44
 800aeea:	20bf      	movs	r0, #191	; 0xbf
 800aeec:	f011 fa86 	bl	801c3fc <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800aef0:	4632      	mov	r2, r6
 800aef2:	493b      	ldr	r1, [pc, #236]	; (800afe0 <CQS_Axes_Measure+0x1a0>)
 800aef4:	4620      	mov	r0, r4
 800aef6:	f014 fca1 	bl	801f83c <sprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800aefa:	2303      	movs	r3, #3
 800aefc:	4622      	mov	r2, r4
 800aefe:	2144      	movs	r1, #68	; 0x44
 800af00:	20e6      	movs	r0, #230	; 0xe6
 800af02:	f011 fad3 	bl	801c4ac <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800af06:	b002      	add	sp, #8
 800af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0c:	4d35      	ldr	r5, [pc, #212]	; (800afe4 <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800af0e:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800af10:	bf14      	ite	ne
 800af12:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800af14:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800af16:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800af1a:	bf18      	it	ne
 800af1c:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800af1e:	f011 f9a9 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800af22:	2063      	movs	r0, #99	; 0x63
 800af24:	f011 f9ac 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800af28:	482b      	ldr	r0, [pc, #172]	; (800afd8 <CQS_Axes_Measure+0x198>)
 800af2a:	f011 f99d 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800af2e:	2261      	movs	r2, #97	; 0x61
 800af30:	2110      	movs	r1, #16
 800af32:	2064      	movs	r0, #100	; 0x64
 800af34:	f011 fa62 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800af38:	4828      	ldr	r0, [pc, #160]	; (800afdc <CQS_Axes_Measure+0x19c>)
 800af3a:	f011 f995 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800af3e:	2251      	movs	r2, #81	; 0x51
 800af40:	210e      	movs	r1, #14
 800af42:	2055      	movs	r0, #85	; 0x55
 800af44:	f011 fa5a 	bl	801c3fc <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800af48:	4642      	mov	r2, r8
 800af4a:	4925      	ldr	r1, [pc, #148]	; (800afe0 <CQS_Axes_Measure+0x1a0>)
 800af4c:	4620      	mov	r0, r4
 800af4e:	f014 fc75 	bl	801f83c <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800af52:	2303      	movs	r3, #3
 800af54:	4622      	mov	r2, r4
 800af56:	210e      	movs	r1, #14
 800af58:	207d      	movs	r0, #125	; 0x7d
 800af5a:	f011 faa7 	bl	801c4ac <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800af5e:	481e      	ldr	r0, [pc, #120]	; (800afd8 <CQS_Axes_Measure+0x198>)
 800af60:	f011 f982 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800af64:	2270      	movs	r2, #112	; 0x70
 800af66:	2110      	movs	r1, #16
 800af68:	20d8      	movs	r0, #216	; 0xd8
 800af6a:	f011 fa47 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800af6e:	481b      	ldr	r0, [pc, #108]	; (800afdc <CQS_Axes_Measure+0x19c>)
 800af70:	f011 f97a 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800af74:	2251      	movs	r2, #81	; 0x51
 800af76:	210e      	movs	r1, #14
 800af78:	20c7      	movs	r0, #199	; 0xc7
 800af7a:	f011 fa3f 	bl	801c3fc <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800af7e:	463a      	mov	r2, r7
 800af80:	4917      	ldr	r1, [pc, #92]	; (800afe0 <CQS_Axes_Measure+0x1a0>)
 800af82:	4620      	mov	r0, r4
 800af84:	f014 fc5a 	bl	801f83c <sprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800af88:	2303      	movs	r3, #3
 800af8a:	4622      	mov	r2, r4
 800af8c:	210e      	movs	r1, #14
 800af8e:	20fc      	movs	r0, #252	; 0xfc
 800af90:	f011 fa8c 	bl	801c4ac <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800af94:	4810      	ldr	r0, [pc, #64]	; (800afd8 <CQS_Axes_Measure+0x198>)
 800af96:	f011 f967 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800af9a:	2266      	movs	r2, #102	; 0x66
 800af9c:	210e      	movs	r1, #14
 800af9e:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800afa2:	f011 fa2b 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800afa6:	480d      	ldr	r0, [pc, #52]	; (800afdc <CQS_Axes_Measure+0x19c>)
 800afa8:	f011 f95e 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800afac:	2251      	movs	r2, #81	; 0x51
 800afae:	210e      	movs	r1, #14
 800afb0:	f240 1045 	movw	r0, #325	; 0x145
 800afb4:	f011 fa22 	bl	801c3fc <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800afb8:	4632      	mov	r2, r6
 800afba:	4909      	ldr	r1, [pc, #36]	; (800afe0 <CQS_Axes_Measure+0x1a0>)
 800afbc:	4620      	mov	r0, r4
 800afbe:	f014 fc3d 	bl	801f83c <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800afc2:	2303      	movs	r3, #3
 800afc4:	4622      	mov	r2, r4
 800afc6:	210e      	movs	r1, #14
 800afc8:	f240 106d 	movw	r0, #365	; 0x16d
 800afcc:	f011 fa6e 	bl	801c4ac <TFT_DisplayString>
		TFT_direction = 0x00;
 800afd0:	2300      	movs	r3, #0
 800afd2:	702b      	strb	r3, [r5, #0]
}
 800afd4:	e797      	b.n	800af06 <CQS_Axes_Measure+0xc6>
 800afd6:	bf00      	nop
 800afd8:	200001c0 	.word	0x200001c0
 800afdc:	200001b0 	.word	0x200001b0
 800afe0:	080244b1 	.word	0x080244b1
 800afe4:	20005690 	.word	0x20005690

0800afe8 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800afe8:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800afea:	4604      	mov	r4, r0
 800afec:	2800      	cmp	r0, #0
 800afee:	f040 811f 	bne.w	800b230 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800aff2:	488e      	ldr	r0, [pc, #568]	; (800b22c <CQS_Axes_Text+0x244>)
 800aff4:	f011 f938 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800aff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800affc:	f011 f93a 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b000:	2063      	movs	r0, #99	; 0x63
 800b002:	f011 f93d 	bl	801c280 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800b006:	2251      	movs	r2, #81	; 0x51
 800b008:	f240 119f 	movw	r1, #415	; 0x19f
 800b00c:	2018      	movs	r0, #24
 800b00e:	f011 f9f5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800b012:	2231      	movs	r2, #49	; 0x31
 800b014:	f240 119f 	movw	r1, #415	; 0x19f
 800b018:	201e      	movs	r0, #30
 800b01a:	f011 f9ef 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800b01e:	2251      	movs	r2, #81	; 0x51
 800b020:	f240 119f 	movw	r1, #415	; 0x19f
 800b024:	2028      	movs	r0, #40	; 0x28
 800b026:	f011 f9e9 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800b02a:	2232      	movs	r2, #50	; 0x32
 800b02c:	f240 119f 	movw	r1, #415	; 0x19f
 800b030:	202e      	movs	r0, #46	; 0x2e
 800b032:	f011 f9e3 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800b036:	2251      	movs	r2, #81	; 0x51
 800b038:	f240 119f 	movw	r1, #415	; 0x19f
 800b03c:	2038      	movs	r0, #56	; 0x38
 800b03e:	f011 f9dd 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800b042:	2233      	movs	r2, #51	; 0x33
 800b044:	f240 119f 	movw	r1, #415	; 0x19f
 800b048:	203e      	movs	r0, #62	; 0x3e
 800b04a:	f011 f9d7 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800b04e:	2251      	movs	r2, #81	; 0x51
 800b050:	f240 119f 	movw	r1, #415	; 0x19f
 800b054:	2048      	movs	r0, #72	; 0x48
 800b056:	f011 f9d1 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800b05a:	2234      	movs	r2, #52	; 0x34
 800b05c:	f240 119f 	movw	r1, #415	; 0x19f
 800b060:	204e      	movs	r0, #78	; 0x4e
 800b062:	f011 f9cb 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800b066:	2251      	movs	r2, #81	; 0x51
 800b068:	f240 119f 	movw	r1, #415	; 0x19f
 800b06c:	2058      	movs	r0, #88	; 0x58
 800b06e:	f011 f9c5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800b072:	2235      	movs	r2, #53	; 0x35
 800b074:	f240 119f 	movw	r1, #415	; 0x19f
 800b078:	205e      	movs	r0, #94	; 0x5e
 800b07a:	f011 f9bf 	bl	801c3fc <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800b07e:	2251      	movs	r2, #81	; 0x51
 800b080:	f240 119f 	movw	r1, #415	; 0x19f
 800b084:	2068      	movs	r0, #104	; 0x68
 800b086:	f011 f9b9 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800b08a:	2236      	movs	r2, #54	; 0x36
 800b08c:	f240 119f 	movw	r1, #415	; 0x19f
 800b090:	206e      	movs	r0, #110	; 0x6e
 800b092:	f011 f9b3 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800b096:	2251      	movs	r2, #81	; 0x51
 800b098:	f240 119f 	movw	r1, #415	; 0x19f
 800b09c:	2078      	movs	r0, #120	; 0x78
 800b09e:	f011 f9ad 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800b0a2:	2237      	movs	r2, #55	; 0x37
 800b0a4:	f240 119f 	movw	r1, #415	; 0x19f
 800b0a8:	207e      	movs	r0, #126	; 0x7e
 800b0aa:	f011 f9a7 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800b0ae:	2251      	movs	r2, #81	; 0x51
 800b0b0:	f240 119f 	movw	r1, #415	; 0x19f
 800b0b4:	2088      	movs	r0, #136	; 0x88
 800b0b6:	f011 f9a1 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800b0ba:	2238      	movs	r2, #56	; 0x38
 800b0bc:	f240 119f 	movw	r1, #415	; 0x19f
 800b0c0:	208e      	movs	r0, #142	; 0x8e
 800b0c2:	f011 f99b 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800b0c6:	2251      	movs	r2, #81	; 0x51
 800b0c8:	f240 119f 	movw	r1, #415	; 0x19f
 800b0cc:	2098      	movs	r0, #152	; 0x98
 800b0ce:	f011 f995 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800b0d2:	2239      	movs	r2, #57	; 0x39
 800b0d4:	f240 119f 	movw	r1, #415	; 0x19f
 800b0d8:	209e      	movs	r0, #158	; 0x9e
 800b0da:	f011 f98f 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800b0de:	2231      	movs	r2, #49	; 0x31
 800b0e0:	f240 119f 	movw	r1, #415	; 0x19f
 800b0e4:	20ad      	movs	r0, #173	; 0xad
 800b0e6:	f011 f989 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800b0ea:	2251      	movs	r2, #81	; 0x51
 800b0ec:	f240 119f 	movw	r1, #415	; 0x19f
 800b0f0:	20a8      	movs	r0, #168	; 0xa8
 800b0f2:	f011 f983 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800b0f6:	2230      	movs	r2, #48	; 0x30
 800b0f8:	f240 119f 	movw	r1, #415	; 0x19f
 800b0fc:	20b1      	movs	r0, #177	; 0xb1
 800b0fe:	f011 f97d 	bl	801c3fc <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800b102:	2231      	movs	r2, #49	; 0x31
 800b104:	f240 119f 	movw	r1, #415	; 0x19f
 800b108:	20bd      	movs	r0, #189	; 0xbd
 800b10a:	f011 f977 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800b10e:	2251      	movs	r2, #81	; 0x51
 800b110:	f240 119f 	movw	r1, #415	; 0x19f
 800b114:	20b8      	movs	r0, #184	; 0xb8
 800b116:	f011 f971 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800b11a:	2231      	movs	r2, #49	; 0x31
 800b11c:	f240 119f 	movw	r1, #415	; 0x19f
 800b120:	20c2      	movs	r0, #194	; 0xc2
 800b122:	f011 f96b 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800b126:	2231      	movs	r2, #49	; 0x31
 800b128:	f240 119f 	movw	r1, #415	; 0x19f
 800b12c:	20cd      	movs	r0, #205	; 0xcd
 800b12e:	f011 f965 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800b132:	2251      	movs	r2, #81	; 0x51
 800b134:	f240 119f 	movw	r1, #415	; 0x19f
 800b138:	20c8      	movs	r0, #200	; 0xc8
 800b13a:	f011 f95f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800b13e:	2232      	movs	r2, #50	; 0x32
 800b140:	f240 119f 	movw	r1, #415	; 0x19f
 800b144:	20d1      	movs	r0, #209	; 0xd1
 800b146:	f011 f959 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800b14a:	2231      	movs	r2, #49	; 0x31
 800b14c:	f240 119f 	movw	r1, #415	; 0x19f
 800b150:	20dd      	movs	r0, #221	; 0xdd
 800b152:	f011 f953 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800b156:	2251      	movs	r2, #81	; 0x51
 800b158:	f240 119f 	movw	r1, #415	; 0x19f
 800b15c:	20d8      	movs	r0, #216	; 0xd8
 800b15e:	f011 f94d 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800b162:	2233      	movs	r2, #51	; 0x33
 800b164:	f240 119f 	movw	r1, #415	; 0x19f
 800b168:	20e1      	movs	r0, #225	; 0xe1
 800b16a:	f011 f947 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800b16e:	2231      	movs	r2, #49	; 0x31
 800b170:	f240 119f 	movw	r1, #415	; 0x19f
 800b174:	20ed      	movs	r0, #237	; 0xed
 800b176:	f011 f941 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800b17a:	2251      	movs	r2, #81	; 0x51
 800b17c:	f240 119f 	movw	r1, #415	; 0x19f
 800b180:	20e8      	movs	r0, #232	; 0xe8
 800b182:	f011 f93b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800b186:	2234      	movs	r2, #52	; 0x34
 800b188:	f240 119f 	movw	r1, #415	; 0x19f
 800b18c:	20f1      	movs	r0, #241	; 0xf1
 800b18e:	f011 f935 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800b192:	2231      	movs	r2, #49	; 0x31
 800b194:	f240 119f 	movw	r1, #415	; 0x19f
 800b198:	20fd      	movs	r0, #253	; 0xfd
 800b19a:	f011 f92f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800b19e:	2251      	movs	r2, #81	; 0x51
 800b1a0:	f240 119f 	movw	r1, #415	; 0x19f
 800b1a4:	20f8      	movs	r0, #248	; 0xf8
 800b1a6:	f011 f929 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800b1aa:	2235      	movs	r2, #53	; 0x35
 800b1ac:	f240 119f 	movw	r1, #415	; 0x19f
 800b1b0:	f240 1001 	movw	r0, #257	; 0x101
 800b1b4:	f011 f922 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800b1b8:	2230      	movs	r2, #48	; 0x30
 800b1ba:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b1be:	2005      	movs	r0, #5
 800b1c0:	f011 f91c 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800b1c4:	2232      	movs	r2, #50	; 0x32
 800b1c6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	f011 f916 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800b1d0:	2235      	movs	r2, #53	; 0x35
 800b1d2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b1d6:	2007      	movs	r0, #7
 800b1d8:	f011 f910 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800b1dc:	2235      	movs	r2, #53	; 0x35
 800b1de:	f240 1101 	movw	r1, #257	; 0x101
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	f011 f90a 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800b1e8:	2230      	movs	r2, #48	; 0x30
 800b1ea:	f240 1101 	movw	r1, #257	; 0x101
 800b1ee:	2007      	movs	r0, #7
 800b1f0:	f011 f904 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800b1f4:	2237      	movs	r2, #55	; 0x37
 800b1f6:	21b5      	movs	r1, #181	; 0xb5
 800b1f8:	2001      	movs	r0, #1
 800b1fa:	f011 f8ff 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800b1fe:	2235      	movs	r2, #53	; 0x35
 800b200:	21b5      	movs	r1, #181	; 0xb5
 800b202:	2007      	movs	r0, #7
 800b204:	f011 f8fa 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800b208:	4620      	mov	r0, r4
 800b20a:	2231      	movs	r2, #49	; 0x31
 800b20c:	2169      	movs	r1, #105	; 0x69
 800b20e:	f011 f8f5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800b212:	2230      	movs	r2, #48	; 0x30
 800b214:	2169      	movs	r1, #105	; 0x69
 800b216:	2004      	movs	r0, #4
 800b218:	f011 f8f0 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800b21c:	2230      	movs	r2, #48	; 0x30
 800b21e:	2169      	movs	r1, #105	; 0x69
 800b220:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800b222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800b226:	f011 b8e9 	b.w	801c3fc <TFT_DrawChar>
 800b22a:	bf00      	nop
 800b22c:	20000210 	.word	0x20000210
 800b230:	4d98      	ldr	r5, [pc, #608]	; (800b494 <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b232:	2801      	cmp	r0, #1
 800b234:	bf0c      	ite	eq
 800b236:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800b238:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800b23a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b23e:	bf18      	it	ne
 800b240:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b242:	f011 f817 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b246:	2063      	movs	r0, #99	; 0x63
 800b248:	f011 f81a 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800b24c:	4892      	ldr	r0, [pc, #584]	; (800b498 <CQS_Axes_Text+0x4b0>)
 800b24e:	f011 f80b 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800b252:	2251      	movs	r2, #81	; 0x51
 800b254:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b258:	2057      	movs	r0, #87	; 0x57
 800b25a:	f011 f8cf 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800b25e:	2231      	movs	r2, #49	; 0x31
 800b260:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b264:	205d      	movs	r0, #93	; 0x5d
 800b266:	f011 f8c9 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800b26a:	2251      	movs	r2, #81	; 0x51
 800b26c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b270:	206d      	movs	r0, #109	; 0x6d
 800b272:	f011 f8c3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800b276:	2232      	movs	r2, #50	; 0x32
 800b278:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b27c:	2073      	movs	r0, #115	; 0x73
 800b27e:	f011 f8bd 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800b282:	2251      	movs	r2, #81	; 0x51
 800b284:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b288:	2083      	movs	r0, #131	; 0x83
 800b28a:	f011 f8b7 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800b28e:	2233      	movs	r2, #51	; 0x33
 800b290:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b294:	2089      	movs	r0, #137	; 0x89
 800b296:	f011 f8b1 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800b29a:	2251      	movs	r2, #81	; 0x51
 800b29c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2a0:	2099      	movs	r0, #153	; 0x99
 800b2a2:	f011 f8ab 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800b2a6:	2234      	movs	r2, #52	; 0x34
 800b2a8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2ac:	209f      	movs	r0, #159	; 0x9f
 800b2ae:	f011 f8a5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800b2b2:	2251      	movs	r2, #81	; 0x51
 800b2b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2b8:	20af      	movs	r0, #175	; 0xaf
 800b2ba:	f011 f89f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800b2be:	2235      	movs	r2, #53	; 0x35
 800b2c0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2c4:	20b5      	movs	r0, #181	; 0xb5
 800b2c6:	f011 f899 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800b2ca:	2251      	movs	r2, #81	; 0x51
 800b2cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2d0:	20c5      	movs	r0, #197	; 0xc5
 800b2d2:	f011 f893 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800b2d6:	2236      	movs	r2, #54	; 0x36
 800b2d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2dc:	20cb      	movs	r0, #203	; 0xcb
 800b2de:	f011 f88d 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800b2e2:	2251      	movs	r2, #81	; 0x51
 800b2e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2e8:	20db      	movs	r0, #219	; 0xdb
 800b2ea:	f011 f887 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800b2ee:	2237      	movs	r2, #55	; 0x37
 800b2f0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b2f4:	20e1      	movs	r0, #225	; 0xe1
 800b2f6:	f011 f881 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800b2fa:	2251      	movs	r2, #81	; 0x51
 800b2fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b300:	20f1      	movs	r0, #241	; 0xf1
 800b302:	f011 f87b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800b306:	2238      	movs	r2, #56	; 0x38
 800b308:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b30c:	20f7      	movs	r0, #247	; 0xf7
 800b30e:	f011 f875 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800b312:	2251      	movs	r2, #81	; 0x51
 800b314:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b318:	f240 1007 	movw	r0, #263	; 0x107
 800b31c:	f011 f86e 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800b320:	2239      	movs	r2, #57	; 0x39
 800b322:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b326:	f240 100d 	movw	r0, #269	; 0x10d
 800b32a:	f011 f867 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800b32e:	2231      	movs	r2, #49	; 0x31
 800b330:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b334:	f44f 7091 	mov.w	r0, #290	; 0x122
 800b338:	f011 f860 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800b33c:	2251      	movs	r2, #81	; 0x51
 800b33e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b342:	f240 101d 	movw	r0, #285	; 0x11d
 800b346:	f011 f859 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800b34a:	2230      	movs	r2, #48	; 0x30
 800b34c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b350:	f44f 7093 	mov.w	r0, #294	; 0x126
 800b354:	f011 f852 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800b358:	2231      	movs	r2, #49	; 0x31
 800b35a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b35e:	f44f 709c 	mov.w	r0, #312	; 0x138
 800b362:	f011 f84b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800b366:	2251      	movs	r2, #81	; 0x51
 800b368:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b36c:	f240 1033 	movw	r0, #307	; 0x133
 800b370:	f011 f844 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800b374:	2231      	movs	r2, #49	; 0x31
 800b376:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b37a:	f240 103d 	movw	r0, #317	; 0x13d
 800b37e:	f011 f83d 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800b382:	2231      	movs	r2, #49	; 0x31
 800b384:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b388:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800b38c:	f011 f836 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800b390:	2251      	movs	r2, #81	; 0x51
 800b392:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b396:	f240 1049 	movw	r0, #329	; 0x149
 800b39a:	f011 f82f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800b39e:	2232      	movs	r2, #50	; 0x32
 800b3a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3a4:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800b3a8:	f011 f828 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800b3ac:	2231      	movs	r2, #49	; 0x31
 800b3ae:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3b2:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800b3b6:	f011 f821 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800b3ba:	2251      	movs	r2, #81	; 0x51
 800b3bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3c0:	f240 105f 	movw	r0, #351	; 0x15f
 800b3c4:	f011 f81a 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800b3c8:	2233      	movs	r2, #51	; 0x33
 800b3ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3ce:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800b3d2:	f011 f813 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800b3d6:	2231      	movs	r2, #49	; 0x31
 800b3d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3dc:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800b3e0:	f011 f80c 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800b3e4:	2251      	movs	r2, #81	; 0x51
 800b3e6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3ea:	f240 1075 	movw	r0, #373	; 0x175
 800b3ee:	f011 f805 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800b3f2:	2234      	movs	r2, #52	; 0x34
 800b3f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3f8:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800b3fc:	f010 fffe 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800b400:	2231      	movs	r2, #49	; 0x31
 800b402:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b406:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b40a:	f010 fff7 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800b40e:	2251      	movs	r2, #81	; 0x51
 800b410:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b414:	f240 108b 	movw	r0, #395	; 0x18b
 800b418:	f010 fff0 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800b41c:	2235      	movs	r2, #53	; 0x35
 800b41e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b422:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b426:	f010 ffe9 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800b42a:	2230      	movs	r2, #48	; 0x30
 800b42c:	21fa      	movs	r1, #250	; 0xfa
 800b42e:	2041      	movs	r0, #65	; 0x41
 800b430:	f010 ffe4 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800b434:	2232      	movs	r2, #50	; 0x32
 800b436:	21ca      	movs	r1, #202	; 0xca
 800b438:	203a      	movs	r0, #58	; 0x3a
 800b43a:	f010 ffdf 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800b43e:	2235      	movs	r2, #53	; 0x35
 800b440:	21ca      	movs	r1, #202	; 0xca
 800b442:	2041      	movs	r0, #65	; 0x41
 800b444:	f010 ffda 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800b448:	2235      	movs	r2, #53	; 0x35
 800b44a:	2195      	movs	r1, #149	; 0x95
 800b44c:	203a      	movs	r0, #58	; 0x3a
 800b44e:	f010 ffd5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800b452:	2230      	movs	r2, #48	; 0x30
 800b454:	2195      	movs	r1, #149	; 0x95
 800b456:	2041      	movs	r0, #65	; 0x41
 800b458:	f010 ffd0 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800b45c:	2237      	movs	r2, #55	; 0x37
 800b45e:	2160      	movs	r1, #96	; 0x60
 800b460:	203a      	movs	r0, #58	; 0x3a
 800b462:	f010 ffcb 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800b466:	2235      	movs	r2, #53	; 0x35
 800b468:	2160      	movs	r1, #96	; 0x60
 800b46a:	2041      	movs	r0, #65	; 0x41
 800b46c:	f010 ffc6 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800b470:	2231      	movs	r2, #49	; 0x31
 800b472:	212b      	movs	r1, #43	; 0x2b
 800b474:	2039      	movs	r0, #57	; 0x39
 800b476:	f010 ffc1 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800b47a:	2230      	movs	r2, #48	; 0x30
 800b47c:	212b      	movs	r1, #43	; 0x2b
 800b47e:	203e      	movs	r0, #62	; 0x3e
 800b480:	f010 ffbc 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800b484:	2230      	movs	r2, #48	; 0x30
 800b486:	212b      	movs	r1, #43	; 0x2b
 800b488:	2043      	movs	r0, #67	; 0x43
 800b48a:	f010 ffb7 	bl	801c3fc <TFT_DrawChar>
		TFT_direction = 0x00;
 800b48e:	2300      	movs	r3, #0
 800b490:	702b      	strb	r3, [r5, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	20005690 	.word	0x20005690
 800b498:	20000210 	.word	0x20000210

0800b49c <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	ed2d 8b04 	vpush	{d8-d9}
 800b4a4:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800b4a6:	ad06      	add	r5, sp, #24
 800b4a8:	2300      	movs	r3, #0
{
 800b4aa:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800b4ac:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800b4b0:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800b838 <CQS_chart+0x39c>
 800b4b4:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f040 81ca 	bne.w	800b850 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b4bc:	780b      	ldrb	r3, [r1, #0]
 800b4be:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800b83c <CQS_chart+0x3a0>
 800b4c2:	eddf 8adf 	vldr	s17, [pc, #892]	; 800b840 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800b4c6:	4fdf      	ldr	r7, [pc, #892]	; (800b844 <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d0:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800b4d4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2222      	movs	r2, #34	; 0x22
 800b4dc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b4e0:	2018      	movs	r0, #24
 800b4e2:	eef0 7a49 	vmov.f32	s15, s18
 800b4e6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b4ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ee:	edcd 7a03 	vstr	s15, [sp, #12]
 800b4f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b4f6:	f010 fc8e 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800b4fa:	7863      	ldrb	r3, [r4, #1]
 800b4fc:	ee07 3a90 	vmov	s15, r3
 800b500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b504:	f645 2392 	movw	r3, #23186	; 0x5a92
 800b508:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	2232      	movs	r2, #50	; 0x32
 800b510:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b514:	2028      	movs	r0, #40	; 0x28
 800b516:	eef0 7a49 	vmov.f32	s15, s18
 800b51a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b51e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b522:	edcd 7a03 	vstr	s15, [sp, #12]
 800b526:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b52a:	f010 fc74 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800b52e:	78a3      	ldrb	r3, [r4, #2]
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b538:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800b53c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	2242      	movs	r2, #66	; 0x42
 800b544:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b548:	2038      	movs	r0, #56	; 0x38
 800b54a:	eef0 7a49 	vmov.f32	s15, s18
 800b54e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b556:	edcd 7a03 	vstr	s15, [sp, #12]
 800b55a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b55e:	f010 fc5a 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800b562:	78e3      	ldrb	r3, [r4, #3]
 800b564:	ee07 3a90 	vmov	s15, r3
 800b568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800b570:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	2252      	movs	r2, #82	; 0x52
 800b578:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b57c:	2048      	movs	r0, #72	; 0x48
 800b57e:	eef0 7a49 	vmov.f32	s15, s18
 800b582:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b58e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b592:	f010 fc40 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800b596:	7923      	ldrb	r3, [r4, #4]
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a0:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800b5a4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	2262      	movs	r2, #98	; 0x62
 800b5ac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b5b0:	2058      	movs	r0, #88	; 0x58
 800b5b2:	eef0 7a49 	vmov.f32	s15, s18
 800b5b6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b5ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5be:	edcd 7a03 	vstr	s15, [sp, #12]
 800b5c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b5c6:	f010 fc26 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800b5ca:	7963      	ldrb	r3, [r4, #5]
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d4:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800b5d8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	2272      	movs	r2, #114	; 0x72
 800b5e0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b5e4:	2068      	movs	r0, #104	; 0x68
 800b5e6:	eef0 7a49 	vmov.f32	s15, s18
 800b5ea:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b5ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5f2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b5f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b5fa:	f010 fc0c 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800b5fe:	79a3      	ldrb	r3, [r4, #6]
 800b600:	ee07 3a90 	vmov	s15, r3
 800b604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b608:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800b60c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	2282      	movs	r2, #130	; 0x82
 800b614:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b618:	2078      	movs	r0, #120	; 0x78
 800b61a:	eef0 7a49 	vmov.f32	s15, s18
 800b61e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b626:	edcd 7a03 	vstr	s15, [sp, #12]
 800b62a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b62e:	f010 fbf2 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800b632:	79e3      	ldrb	r3, [r4, #7]
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63c:	f247 5369 	movw	r3, #30057	; 0x7569
 800b640:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	2292      	movs	r2, #146	; 0x92
 800b648:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b64c:	2088      	movs	r0, #136	; 0x88
 800b64e:	eef0 7a49 	vmov.f32	s15, s18
 800b652:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b65e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b662:	f010 fbd8 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800b666:	7a23      	ldrb	r3, [r4, #8]
 800b668:	ee07 3a90 	vmov	s15, r3
 800b66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b670:	f24b 6307 	movw	r3, #46599	; 0xb607
 800b674:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	22a2      	movs	r2, #162	; 0xa2
 800b67c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b680:	2098      	movs	r0, #152	; 0x98
 800b682:	eef0 7a49 	vmov.f32	s15, s18
 800b686:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68e:	edcd 7a03 	vstr	s15, [sp, #12]
 800b692:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b696:	f010 fbbe 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800b69a:	7a63      	ldrb	r3, [r4, #9]
 800b69c:	ee07 3a90 	vmov	s15, r3
 800b6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a4:	f64e 6325 	movw	r3, #60965	; 0xee25
 800b6a8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	22b2      	movs	r2, #178	; 0xb2
 800b6b0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6b4:	20a8      	movs	r0, #168	; 0xa8
 800b6b6:	eef0 7a49 	vmov.f32	s15, s18
 800b6ba:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6c2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b6c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b6ca:	f010 fba4 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800b6ce:	7aa3      	ldrb	r3, [r4, #10]
 800b6d0:	ee07 3a90 	vmov	s15, r3
 800b6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d8:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800b6dc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	22c2      	movs	r2, #194	; 0xc2
 800b6e4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6e8:	20b8      	movs	r0, #184	; 0xb8
 800b6ea:	eef0 7a49 	vmov.f32	s15, s18
 800b6ee:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6f6:	edcd 7a03 	vstr	s15, [sp, #12]
 800b6fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b6fe:	f010 fb8a 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800b702:	7ae3      	ldrb	r3, [r4, #11]
 800b704:	ee07 3a90 	vmov	s15, r3
 800b708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70c:	f64e 4347 	movw	r3, #60487	; 0xec47
 800b710:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	22d2      	movs	r2, #210	; 0xd2
 800b718:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b71c:	20c8      	movs	r0, #200	; 0xc8
 800b71e:	eef0 7a49 	vmov.f32	s15, s18
 800b722:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b72a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b72e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b732:	f010 fb70 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800b736:	7b23      	ldrb	r3, [r4, #12]
 800b738:	ee07 3a90 	vmov	s15, r3
 800b73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b740:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800b744:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	22e2      	movs	r2, #226	; 0xe2
 800b74c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b750:	20d8      	movs	r0, #216	; 0xd8
 800b752:	eef0 7a49 	vmov.f32	s15, s18
 800b756:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b75a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b75e:	edcd 7a03 	vstr	s15, [sp, #12]
 800b762:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b766:	f010 fb56 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800b76a:	7b63      	ldrb	r3, [r4, #13]
 800b76c:	ee07 3a90 	vmov	s15, r3
 800b770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b774:	f64a 1347 	movw	r3, #43335	; 0xa947
 800b778:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	22f2      	movs	r2, #242	; 0xf2
 800b780:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b784:	20e8      	movs	r0, #232	; 0xe8
 800b786:	eef0 7a49 	vmov.f32	s15, s18
 800b78a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b78e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b792:	edcd 7a03 	vstr	s15, [sp, #12]
 800b796:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b79a:	f010 fb3c 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b79e:	7ba3      	ldrb	r3, [r4, #14]
 800b7a0:	ee07 3a90 	vmov	s15, r3
 800b7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a8:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800b7ac:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b7b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	20f8      	movs	r0, #248	; 0xf8
 800b7b8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b7bc:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b7be:	eea7 9a68 	vfms.f32	s18, s14, s17
 800b7c2:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b7c6:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800b848 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b7ca:	edcd 7a03 	vstr	s15, [sp, #12]
 800b7ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b7d2:	f010 fb20 	bl	801be16 <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800b7d6:	481d      	ldr	r0, [pc, #116]	; (800b84c <CQS_chart+0x3b0>)
 800b7d8:	f010 fd46 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b7dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b7e0:	f010 fd48 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b7e4:	2063      	movs	r0, #99	; 0x63
 800b7e6:	f010 fd4b 	bl	801c280 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800b7ea:	7872      	ldrb	r2, [r6, #1]
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f014 f824 	bl	801f83c <sprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b7f4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800b7f8:	ee07 3a90 	vmov	s15, r3
 800b7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b800:	4620      	mov	r0, r4
 800b802:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b806:	3410      	adds	r4, #16
 800b808:	2303      	movs	r3, #3
 800b80a:	462a      	mov	r2, r5
 800b80c:	b2a4      	uxth	r4, r4
 800b80e:	eef0 7a49 	vmov.f32	s15, s18
 800b812:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b81a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b81e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b822:	f010 fe43 	bl	801c4ac <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800b826:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800b82a:	d1de      	bne.n	800b7ea <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800b82c:	b006      	add	sp, #24
 800b82e:	ecbd 8b04 	vpop	{d8-d9}
 800b832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b836:	bf00      	nop
 800b838:	42c80000 	.word	0x42c80000
 800b83c:	43cd0000 	.word	0x43cd0000
 800b840:	43988000 	.word	0x43988000
 800b844:	080244b1 	.word	0x080244b1
 800b848:	43c80000 	.word	0x43c80000
 800b84c:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b850:	2801      	cmp	r0, #1
 800b852:	4fdf      	ldr	r7, [pc, #892]	; (800bbd0 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800b854:	eddf 8adf 	vldr	s17, [pc, #892]	; 800bbd4 <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b858:	bf0e      	itee	eq
 800b85a:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800b85c:	2302      	movne	r3, #2
 800b85e:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800b860:	780b      	ldrb	r3, [r1, #0]
 800b862:	ed9f 9add 	vldr	s18, [pc, #884]	; 800bbd8 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800b866:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800bbe8 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b872:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800b876:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	2262      	movs	r2, #98	; 0x62
 800b87e:	23fc      	movs	r3, #252	; 0xfc
 800b880:	2057      	movs	r0, #87	; 0x57
 800b882:	eef0 7a68 	vmov.f32	s15, s17
 800b886:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88e:	edcd 7a03 	vstr	s15, [sp, #12]
 800b892:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b896:	f010 fabe 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800b89a:	7863      	ldrb	r3, [r4, #1]
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a4:	f645 2392 	movw	r3, #23186	; 0x5a92
 800b8a8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	2278      	movs	r2, #120	; 0x78
 800b8b0:	23fc      	movs	r3, #252	; 0xfc
 800b8b2:	206d      	movs	r0, #109	; 0x6d
 800b8b4:	eef0 7a68 	vmov.f32	s15, s17
 800b8b8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c0:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8c4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8c8:	f010 faa5 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800b8cc:	78a3      	ldrb	r3, [r4, #2]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d6:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800b8da:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	228e      	movs	r2, #142	; 0x8e
 800b8e2:	23fc      	movs	r3, #252	; 0xfc
 800b8e4:	2083      	movs	r0, #131	; 0x83
 800b8e6:	eef0 7a68 	vmov.f32	s15, s17
 800b8ea:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b8ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8fa:	f010 fa8c 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800b8fe:	78e3      	ldrb	r3, [r4, #3]
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b908:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800b90c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	22a4      	movs	r2, #164	; 0xa4
 800b914:	23fc      	movs	r3, #252	; 0xfc
 800b916:	2099      	movs	r0, #153	; 0x99
 800b918:	eef0 7a68 	vmov.f32	s15, s17
 800b91c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b924:	edcd 7a03 	vstr	s15, [sp, #12]
 800b928:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b92c:	f010 fa73 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800b930:	7923      	ldrb	r3, [r4, #4]
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93a:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800b93e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	22ba      	movs	r2, #186	; 0xba
 800b946:	23fc      	movs	r3, #252	; 0xfc
 800b948:	20af      	movs	r0, #175	; 0xaf
 800b94a:	eef0 7a68 	vmov.f32	s15, s17
 800b94e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b956:	edcd 7a03 	vstr	s15, [sp, #12]
 800b95a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b95e:	f010 fa5a 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800b962:	7963      	ldrb	r3, [r4, #5]
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800b970:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	22d0      	movs	r2, #208	; 0xd0
 800b978:	23fc      	movs	r3, #252	; 0xfc
 800b97a:	20c5      	movs	r0, #197	; 0xc5
 800b97c:	eef0 7a68 	vmov.f32	s15, s17
 800b980:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b988:	edcd 7a03 	vstr	s15, [sp, #12]
 800b98c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b990:	f010 fa41 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800b994:	79a3      	ldrb	r3, [r4, #6]
 800b996:	ee07 3a90 	vmov	s15, r3
 800b99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99e:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800b9a2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	22e6      	movs	r2, #230	; 0xe6
 800b9aa:	23fc      	movs	r3, #252	; 0xfc
 800b9ac:	20db      	movs	r0, #219	; 0xdb
 800b9ae:	eef0 7a68 	vmov.f32	s15, s17
 800b9b2:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b9b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ba:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9c2:	f010 fa28 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800b9c6:	79e3      	ldrb	r3, [r4, #7]
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d0:	f247 5369 	movw	r3, #30057	; 0x7569
 800b9d4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	23fc      	movs	r3, #252	; 0xfc
 800b9dc:	461a      	mov	r2, r3
 800b9de:	20f1      	movs	r0, #241	; 0xf1
 800b9e0:	eef0 7a68 	vmov.f32	s15, s17
 800b9e4:	eee7 7a49 	vfms.f32	s15, s14, s18
 800b9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ec:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9f4:	f010 fa0f 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800b9f8:	7a23      	ldrb	r3, [r4, #8]
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba02:	f24b 6307 	movw	r3, #46599	; 0xb607
 800ba06:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ba10:	23fc      	movs	r3, #252	; 0xfc
 800ba12:	f240 1007 	movw	r0, #263	; 0x107
 800ba16:	eef0 7a68 	vmov.f32	s15, s17
 800ba1a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba22:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba2a:	f010 f9f4 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800ba2e:	7a63      	ldrb	r3, [r4, #9]
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba38:	f64e 6325 	movw	r3, #60965	; 0xee25
 800ba3c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ba46:	23fc      	movs	r3, #252	; 0xfc
 800ba48:	f240 101d 	movw	r0, #285	; 0x11d
 800ba4c:	eef0 7a68 	vmov.f32	s15, s17
 800ba50:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba58:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba5c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba60:	f010 f9d9 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800ba64:	7aa3      	ldrb	r3, [r4, #10]
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6e:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800ba72:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800ba7c:	23fc      	movs	r3, #252	; 0xfc
 800ba7e:	f240 1033 	movw	r0, #307	; 0x133
 800ba82:	eef0 7a68 	vmov.f32	s15, s17
 800ba86:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba8e:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba92:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba96:	f010 f9be 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800ba9a:	7ae3      	ldrb	r3, [r4, #11]
 800ba9c:	ee07 3a90 	vmov	s15, r3
 800baa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa4:	f64e 4347 	movw	r3, #60487	; 0xec47
 800baa8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800bab2:	23fc      	movs	r3, #252	; 0xfc
 800bab4:	f240 1049 	movw	r0, #329	; 0x149
 800bab8:	eef0 7a68 	vmov.f32	s15, s17
 800babc:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bac4:	edcd 7a03 	vstr	s15, [sp, #12]
 800bac8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bacc:	f010 f9a3 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800bad0:	7b23      	ldrb	r3, [r4, #12]
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bada:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800bade:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bae8:	23fc      	movs	r3, #252	; 0xfc
 800baea:	f240 105f 	movw	r0, #351	; 0x15f
 800baee:	eef0 7a68 	vmov.f32	s15, s17
 800baf2:	eee7 7a49 	vfms.f32	s15, s14, s18
 800baf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bafa:	edcd 7a03 	vstr	s15, [sp, #12]
 800bafe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb02:	f010 f988 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800bb06:	7b63      	ldrb	r3, [r4, #13]
 800bb08:	ee07 3a90 	vmov	s15, r3
 800bb0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb10:	f64a 1347 	movw	r3, #43335	; 0xa947
 800bb14:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800bb1e:	23fc      	movs	r3, #252	; 0xfc
 800bb20:	f240 1075 	movw	r0, #373	; 0x175
 800bb24:	eef0 7a68 	vmov.f32	s15, s17
 800bb28:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb30:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb34:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb38:	f010 f96d 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bb3c:	7ba3      	ldrb	r3, [r4, #14]
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb46:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800bb4a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800bb54:	23fc      	movs	r3, #252	; 0xfc
 800bb56:	f240 108b 	movw	r0, #395	; 0x18b
 800bb5a:	2457      	movs	r4, #87	; 0x57
 800bb5c:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bb60:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800bbdc <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bb64:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800bb68:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800bbe0 <CQS_chart+0x744>
 800bb6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb74:	f010 f94f 	bl	801be16 <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800bb78:	7872      	ldrb	r2, [r6, #1]
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f013 fe5d 	bl	801f83c <sprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bb82:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb94:	f04f 0303 	mov.w	r3, #3
 800bb98:	4620      	mov	r0, r4
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	f104 0416 	add.w	r4, r4, #22
 800bba0:	b2a4      	uxth	r4, r4
 800bba2:	bf94      	ite	ls
 800bba4:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800bbe4 <CQS_chart+0x748>
 800bba8:	eef0 7a49 	vmovhi.f32	s15, s18
 800bbac:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bbb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbb4:	edcd 7a03 	vstr	s15, [sp, #12]
 800bbb8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbbc:	f010 fc76 	bl	801c4ac <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800bbc0:	f240 13a1 	movw	r3, #417	; 0x1a1
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	d1d7      	bne.n	800bb78 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	703b      	strb	r3, [r7, #0]
}
 800bbcc:	e62e      	b.n	800b82c <CQS_chart+0x390>
 800bbce:	bf00      	nop
 800bbd0:	20005690 	.word	0x20005690
 800bbd4:	437c0000 	.word	0x437c0000
 800bbd8:	43520000 	.word	0x43520000
 800bbdc:	437a0000 	.word	0x437a0000
 800bbe0:	43570000 	.word	0x43570000
 800bbe4:	43730000 	.word	0x43730000
 800bbe8:	080244b1 	.word	0x080244b1

0800bbec <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bbec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bbf0:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bbf2:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	4688      	mov	r8, r1
 800bbf8:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bbfa:	213a      	movs	r1, #58	; 0x3a
 800bbfc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	2005      	movs	r0, #5
 800bc04:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bc08:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bc0c:	f010 f903 	bl	801be16 <TFT_FillRectangle>
	CQS_Axes(direction);
 800bc10:	4620      	mov	r0, r4
 800bc12:	f7ff f877 	bl	800ad04 <CQS_Axes>
	CQS_Axes_Text(direction);
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff f9e6 	bl	800afe8 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800bc1c:	4641      	mov	r1, r8
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7ff fc3c 	bl	800b49c <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bc24:	463b      	mov	r3, r7
 800bc26:	4632      	mov	r2, r6
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	b002      	add	sp, #8
 800bc2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bc32:	f7ff b905 	b.w	800ae40 <CQS_Axes_Measure>

0800bc36 <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800bc36:	e9d0 0100 	ldrd	r0, r1, [r0]
 800bc3a:	4770      	bx	lr

0800bc3c <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bc3c:	4b13      	ldr	r3, [pc, #76]	; (800bc8c <CRC_Check+0x50>)
{
 800bc3e:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800bc42:	4e13      	ldr	r6, [pc, #76]	; (800bc90 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bc44:	6018      	str	r0, [r3, #0]
 800bc46:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bc4a:	2400      	movs	r4, #0
 800bc4c:	4281      	cmp	r1, r0
 800bc4e:	d811      	bhi.n	800bc74 <CRC_Check+0x38>
 800bc50:	b104      	cbz	r4, 800bc54 <CRC_Check+0x18>
 800bc52:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bc54:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800bc58:	4b0e      	ldr	r3, [pc, #56]	; (800bc94 <CRC_Check+0x58>)
 800bc5a:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800bc5e:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bc62:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800bc66:	4299      	cmp	r1, r3
 800bc68:	bf0a      	itet	eq
 800bc6a:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800bc6c:	2001      	movne	r0, #1
 800bc6e:	2000      	moveq	r0, #0
 800bc70:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bc74:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800bc78:	e9d6 4500 	ldrd	r4, r5, [r6]
 800bc7c:	eb14 0408 	adds.w	r4, r4, r8
 800bc80:	eb45 0509 	adc.w	r5, r5, r9
 800bc84:	e9c6 4500 	strd	r4, r5, [r6]
 800bc88:	2401      	movs	r4, #1
 800bc8a:	e7df      	b.n	800bc4c <CRC_Check+0x10>
 800bc8c:	20090930 	.word	0x20090930
 800bc90:	20004630 	.word	0x20004630
 800bc94:	20004638 	.word	0x20004638

0800bc98 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800bc98:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800bc9a:	f7f4 fc5b 	bl	8000554 <__aeabi_i2d>
 800bc9e:	a316      	add	r3, pc, #88	; (adr r3, 800bcf8 <calcNorm560_CRI+0x60>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 fcbc 	bl	8000620 <__aeabi_dmul>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	a114      	add	r1, pc, #80	; (adr r1, 800bd00 <calcNorm560_CRI+0x68>)
 800bcae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb2:	f7f4 fddf 	bl	8000874 <__aeabi_ddiv>
 800bcb6:	ec41 0b10 	vmov	d0, r0, r1
 800bcba:	f016 fdf1 	bl	80228a0 <exp>
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	ec51 0b10 	vmov	r0, r1, d0
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <calcNorm560_CRI+0x58>)
 800bcc6:	f7f4 faf7 	bl	80002b8 <__aeabi_dsub>
 800bcca:	460b      	mov	r3, r1
 800bccc:	4602      	mov	r2, r0
 800bcce:	a106      	add	r1, pc, #24	; (adr r1, 800bce8 <calcNorm560_CRI+0x50>)
 800bcd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd4:	f7f4 fdce 	bl	8000874 <__aeabi_ddiv>
 800bcd8:	f7f4 ff9a 	bl	8000c10 <__aeabi_d2f>
 800bcdc:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <calcNorm560_CRI+0x5c>)
 800bcde:	6018      	str	r0, [r3, #0]
 800bce0:	bd08      	pop	{r3, pc}
 800bce2:	bf00      	nop
 800bce4:	f3af 8000 	nop.w
 800bce8:	f9f35846 	.word	0xf9f35846
 800bcec:	466ca5d1 	.word	0x466ca5d1
 800bcf0:	3ff00000 	.word	0x3ff00000
 800bcf4:	20090960 	.word	0x20090960
 800bcf8:	05ea7ab3 	.word	0x05ea7ab3
 800bcfc:	3ea2ca5d 	.word	0x3ea2ca5d
 800bd00:	aba38759 	.word	0xaba38759
 800bd04:	3f8d7774 	.word	0x3f8d7774

0800bd08 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800bd08:	f241 3387 	movw	r3, #4999	; 0x1387
 800bd0c:	4299      	cmp	r1, r3
{
 800bd0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd10:	460d      	mov	r5, r1
 800bd12:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800bd16:	d84e      	bhi.n	800bdb6 <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bd18:	4c39      	ldr	r4, [pc, #228]	; (800be00 <calcSref_CRI+0xf8>)
 800bd1a:	4404      	add	r4, r0
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	f7f4 fc2b 	bl	8000578 <__aeabi_f2d>
 800bd22:	a331      	add	r3, pc, #196	; (adr r3, 800bde8 <calcSref_CRI+0xe0>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fc7a 	bl	8000620 <__aeabi_dmul>
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	4628      	mov	r0, r5
 800bd30:	460f      	mov	r7, r1
 800bd32:	f7f4 fc0f 	bl	8000554 <__aeabi_i2d>
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	f7f4 fc6f 	bl	8000620 <__aeabi_dmul>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	a12a      	add	r1, pc, #168	; (adr r1, 800bdf0 <calcSref_CRI+0xe8>)
 800bd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4c:	f7f4 fd92 	bl	8000874 <__aeabi_ddiv>
 800bd50:	ec41 0b10 	vmov	d0, r0, r1
 800bd54:	f016 fda4 	bl	80228a0 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bd58:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bd5a:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bd5e:	f7f4 fc0b 	bl	8000578 <__aeabi_f2d>
 800bd62:	a321      	add	r3, pc, #132	; (adr r3, 800bde8 <calcSref_CRI+0xe0>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fc5a 	bl	8000620 <__aeabi_dmul>
 800bd6c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800bdf8 <calcSref_CRI+0xf0>
 800bd70:	ec41 0b10 	vmov	d0, r0, r1
 800bd74:	f016 fe90 	bl	8022a98 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bd78:	2200      	movs	r2, #0
 800bd7a:	4b22      	ldr	r3, [pc, #136]	; (800be04 <calcSref_CRI+0xfc>)
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bd80:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bd84:	f7f4 fa98 	bl	80002b8 <__aeabi_dsub>
 800bd88:	f7f4 ff42 	bl	8000c10 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bd8c:	f7f4 fbf4 	bl	8000578 <__aeabi_f2d>
 800bd90:	ed9d 0b00 	vldr	d0, [sp]
 800bd94:	460b      	mov	r3, r1
 800bd96:	4602      	mov	r2, r0
 800bd98:	ec51 0b10 	vmov	r0, r1, d0
 800bd9c:	f7f4 fd6a 	bl	8000874 <__aeabi_ddiv>
 800bda0:	f7f4 ff36 	bl	8000c10 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800bda4:	4b18      	ldr	r3, [pc, #96]	; (800be08 <calcSref_CRI+0x100>)
 800bda6:	ee07 0a10 	vmov	s14, r0
 800bdaa:	edd3 7a00 	vldr	s15, [r3]
 800bdae:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800bdb2:	b003      	add	sp, #12
 800bdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800bdb6:	4a15      	ldr	r2, [pc, #84]	; (800be0c <calcSref_CRI+0x104>)
 800bdb8:	4b15      	ldr	r3, [pc, #84]	; (800be10 <calcSref_CRI+0x108>)
 800bdba:	4916      	ldr	r1, [pc, #88]	; (800be14 <calcSref_CRI+0x10c>)
 800bdbc:	4403      	add	r3, r0
 800bdbe:	4401      	add	r1, r0
 800bdc0:	4410      	add	r0, r2
 800bdc2:	4a15      	ldr	r2, [pc, #84]	; (800be18 <calcSref_CRI+0x110>)
 800bdc4:	ed91 7a00 	vldr	s14, [r1]
 800bdc8:	edd2 7a00 	vldr	s15, [r2]
 800bdcc:	ed90 0a00 	vldr	s0, [r0]
 800bdd0:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bdd4:	ed93 7a00 	vldr	s14, [r3]
 800bdd8:	4b10      	ldr	r3, [pc, #64]	; (800be1c <calcSref_CRI+0x114>)
 800bdda:	edd3 7a00 	vldr	s15, [r3]
 800bdde:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800bde2:	e7e6      	b.n	800bdb2 <calcSref_CRI+0xaa>
 800bde4:	f3af 8000 	nop.w
 800bde8:	e826d695 	.word	0xe826d695
 800bdec:	3e112e0b 	.word	0x3e112e0b
 800bdf0:	aba38759 	.word	0xaba38759
 800bdf4:	3f8d7774 	.word	0x3f8d7774
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	c0140000 	.word	0xc0140000
 800be00:	20054938 	.word	0x20054938
 800be04:	3ff00000 	.word	0x3ff00000
 800be08:	20090960 	.word	0x20090960
 800be0c:	2004e92c 	.word	0x2004e92c
 800be10:	2005092c 	.word	0x2005092c
 800be14:	2004f92c 	.word	0x2004f92c
 800be18:	20004640 	.word	0x20004640
 800be1c:	20004644 	.word	0x20004644

0800be20 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	ed2d 8b08 	vpush	{d8-d11}
 800be28:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800be2c:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800be2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800be32:	900c      	str	r0, [sp, #48]	; 0x30
 800be34:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800be36:	a822      	add	r0, sp, #136	; 0x88
 800be38:	2100      	movs	r1, #0
 800be3a:	f013 fcf6 	bl	801f82a <memset>
	float CRI_R_temp[1024] = {0};
 800be3e:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800be42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800be46:	2100      	movs	r1, #0
 800be48:	3008      	adds	r0, #8
 800be4a:	f013 fcee 	bl	801f82a <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800be4e:	2278      	movs	r2, #120	; 0x78
 800be50:	2100      	movs	r1, #0
 800be52:	48c1      	ldr	r0, [pc, #772]	; (800c158 <CRI_func+0x338>)
 800be54:	f013 fce9 	bl	801f82a <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800be58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be5a:	f241 3387 	movw	r3, #4999	; 0x1387
 800be5e:	429a      	cmp	r2, r3
 800be60:	f200 8514 	bhi.w	800c88c <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800be64:	4610      	mov	r0, r2
 800be66:	f7ff ff17 	bl	800bc98 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800be6a:	4bbc      	ldr	r3, [pc, #752]	; (800c15c <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800be6c:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c160 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800be70:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800be74:	a1b2      	add	r1, pc, #712	; (adr r1, 800c140 <CRI_func+0x320>)
 800be76:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800be7a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800be7e:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800be82:	4bb8      	ldr	r3, [pc, #736]	; (800c164 <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800be84:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800be88:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800be8c:	210d      	movs	r1, #13
 800be8e:	2055      	movs	r0, #85	; 0x55
 800be90:	f007 f83e 	bl	8012f10 <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800be94:	4bb4      	ldr	r3, [pc, #720]	; (800c168 <CRI_func+0x348>)
 800be96:	ed93 7a00 	vldr	s14, [r3]
 800be9a:	4bb4      	ldr	r3, [pc, #720]	; (800c16c <CRI_func+0x34c>)
 800be9c:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800bea0:	ecfa 6a01 	vldmia	sl!, {s13}
 800bea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800bea8:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800beaa:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800beae:	d1f7      	bne.n	800bea0 <CRI_func+0x80>
 800beb0:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800c148 <CRI_func+0x328>
 800beb4:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800beb8:	eeb0 8a47 	vmov.f32	s16, s14
 800bebc:	eef0 8a67 	vmov.f32	s17, s15
 800bec0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800bec4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bec8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800becc:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bed0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bed8:	2300      	movs	r3, #0
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	9310      	str	r3, [sp, #64]	; 0x40
 800bede:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800bee0:	4ca0      	ldr	r4, [pc, #640]	; (800c164 <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800bee2:	4fa3      	ldr	r7, [pc, #652]	; (800c170 <CRI_func+0x350>)
 800bee4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800c16c <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800bee8:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800c198 <CRI_func+0x378>
		bar_CRI += 0.05;
 800beec:	a398      	add	r3, pc, #608	; (adr r3, 800c150 <CRI_func+0x330>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bef6:	f7f4 f9e1 	bl	80002bc <__adddf3>
 800befa:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800befe:	f7f4 fe87 	bl	8000c10 <__aeabi_d2f>
 800bf02:	210d      	movs	r1, #13
 800bf04:	ee00 0a10 	vmov	s0, r0
 800bf08:	2055      	movs	r0, #85	; 0x55
 800bf0a:	f007 f801 	bl	8012f10 <GUI_Bar_Measure>
		 x_i_test = 0;
 800bf0e:	4b99      	ldr	r3, [pc, #612]	; (800c174 <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800bf10:	4899      	ldr	r0, [pc, #612]	; (800c178 <CRI_func+0x358>)
		 x_i_test = 0;
 800bf12:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800bf16:	4b99      	ldr	r3, [pc, #612]	; (800c17c <CRI_func+0x35c>)
 800bf18:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800bf1c:	4b98      	ldr	r3, [pc, #608]	; (800c180 <CRI_func+0x360>)
 800bf1e:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800bf22:	4b98      	ldr	r3, [pc, #608]	; (800c184 <CRI_func+0x364>)
 800bf24:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800bf28:	4b97      	ldr	r3, [pc, #604]	; (800c188 <CRI_func+0x368>)
 800bf2a:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800bf2e:	4b97      	ldr	r3, [pc, #604]	; (800c18c <CRI_func+0x36c>)
 800bf30:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800bf34:	9b00      	ldr	r3, [sp, #0]
 800bf36:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800bf3a:	3208      	adds	r2, #8
 800bf3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bf40:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800bf44:	f002 fdd4 	bl	800eaf0 <Calibration_Load_Pack>
 800bf48:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800bf4a:	4625      	mov	r5, r4
 800bf4c:	f89d 3000 	ldrb.w	r3, [sp]
 800bf50:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800bf52:	9b00      	ldr	r3, [sp, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d150      	bne.n	800bffa <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800bf58:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f7ff fed4 	bl	800bd08 <calcSref_CRI>
 800bf60:	ab22      	add	r3, sp, #136	; 0x88
 800bf62:	4423      	add	r3, r4
 800bf64:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800bf68:	19e3      	adds	r3, r4, r7
 800bf6a:	edd3 9a00 	vldr	s19, [r3]
 800bf6e:	eb09 0304 	add.w	r3, r9, r4
 800bf72:	edd3 7a00 	vldr	s15, [r3]
 800bf76:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800bf7a:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800bf7e:	ee17 0a90 	vmov	r0, s15
 800bf82:	f7f4 faf9 	bl	8000578 <__aeabi_f2d>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf8e:	f7f4 f995 	bl	80002bc <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800bf92:	eb04 0308 	add.w	r3, r4, r8
 800bf96:	edd3 7a00 	vldr	s15, [r3]
 800bf9a:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800bf9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800bfa2:	ee17 0a90 	vmov	r0, s15
 800bfa6:	f7f4 fae7 	bl	8000578 <__aeabi_f2d>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfb2:	f7f4 f983 	bl	80002bc <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800bfb6:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800bfba:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800bfbe:	ee17 0a90 	vmov	r0, s15
 800bfc2:	f7f4 fad9 	bl	8000578 <__aeabi_f2d>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfce:	f7f4 f975 	bl	80002bc <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800bfd2:	4b6f      	ldr	r3, [pc, #444]	; (800c190 <CRI_func+0x370>)
 800bfd4:	4423      	add	r3, r4
 800bfd6:	edd3 7a00 	vldr	s15, [r3]
 800bfda:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800bfde:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800bfe2:	ee17 0a90 	vmov	r0, s15
 800bfe6:	f7f4 fac7 	bl	8000578 <__aeabi_f2d>
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bff2:	f7f4 f963 	bl	80002bc <__adddf3>
 800bff6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800bffa:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800bffe:	3308      	adds	r3, #8
 800c000:	4423      	add	r3, r4
 800c002:	ed93 9a00 	vldr	s18, [r3]
 800c006:	4e5b      	ldr	r6, [pc, #364]	; (800c174 <CRI_func+0x354>)
 800c008:	eb09 0304 	add.w	r3, r9, r4
 800c00c:	edd3 9a00 	vldr	s19, [r3]
 800c010:	eb04 0308 	add.w	r3, r4, r8
 800c014:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c018:	ed93 ba00 	vldr	s22, [r3]
 800c01c:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c020:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c022:	ee17 0a90 	vmov	r0, s15
 800c026:	f7f4 faa7 	bl	8000578 <__aeabi_f2d>
 800c02a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c02e:	f7f4 f945 	bl	80002bc <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c032:	19e3      	adds	r3, r4, r7
 800c034:	edd3 aa00 	vldr	s21, [r3]
 800c038:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c03c:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c040:	4e4e      	ldr	r6, [pc, #312]	; (800c17c <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c042:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c046:	ee17 0a90 	vmov	r0, s15
 800c04a:	f7f4 fa95 	bl	8000578 <__aeabi_f2d>
 800c04e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c052:	f7f4 f933 	bl	80002bc <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c056:	4b4e      	ldr	r3, [pc, #312]	; (800c190 <CRI_func+0x370>)
 800c058:	4423      	add	r3, r4
 800c05a:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c05e:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c060:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c064:	468b      	mov	fp, r1
 800c066:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c06a:	4e45      	ldr	r6, [pc, #276]	; (800c180 <CRI_func+0x360>)
 800c06c:	ee17 0a90 	vmov	r0, s15
 800c070:	f7f4 fa82 	bl	8000578 <__aeabi_f2d>
 800c074:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c078:	f7f4 f920 	bl	80002bc <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c07c:	ab22      	add	r3, sp, #136	; 0x88
 800c07e:	4423      	add	r3, r4
 800c080:	edd3 7a00 	vldr	s15, [r3]
 800c084:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c088:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c08c:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c090:	4e3c      	ldr	r6, [pc, #240]	; (800c184 <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c092:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c096:	ee17 0a90 	vmov	r0, s15
 800c09a:	f7f4 fa6d 	bl	8000578 <__aeabi_f2d>
 800c09e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0a2:	f7f4 f90b 	bl	80002bc <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c0a6:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c0aa:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c0ae:	4e36      	ldr	r6, [pc, #216]	; (800c188 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c0b0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c0b4:	ee17 0a90 	vmov	r0, s15
 800c0b8:	f7f4 fa5e 	bl	8000578 <__aeabi_f2d>
 800c0bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0c0:	f7f4 f8fc 	bl	80002bc <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c0c4:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c0c8:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c0cc:	4e2f      	ldr	r6, [pc, #188]	; (800c18c <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c0ce:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c0d2:	ee17 0a90 	vmov	r0, s15
 800c0d6:	f7f4 fa4f 	bl	8000578 <__aeabi_f2d>
 800c0da:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0de:	f7f4 f8ed 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c0e2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c0e6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c0ea:	e9c6 0100 	strd	r0, r1, [r6]
 800c0ee:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c0f2:	f47f af2b 	bne.w	800bf4c <CRI_func+0x12c>
		}
		if (i == 0) 
 800c0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f040 8089 	bne.w	800c210 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c0fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c102:	2000      	movs	r0, #0
 800c104:	4923      	ldr	r1, [pc, #140]	; (800c194 <CRI_func+0x374>)
 800c106:	f7f4 fbb5 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c10a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c10e:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c112:	2000      	movs	r0, #0
 800c114:	491f      	ldr	r1, [pc, #124]	; (800c194 <CRI_func+0x374>)
 800c116:	f7f4 fbad 	bl	8000874 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c11e:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c122:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c126:	f7f4 fa7b 	bl	8000620 <__aeabi_dmul>
			y_ref *= k_ref;
 800c12a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c12e:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800c132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c136:	f7f4 fa73 	bl	8000620 <__aeabi_dmul>
			z_ref *= k_ref;
 800c13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c13e:	e02d      	b.n	800c19c <CRI_func+0x37c>
 800c140:	9999999a 	.word	0x9999999a
 800c144:	3fb99999 	.word	0x3fb99999
	...
 800c150:	9999999a 	.word	0x9999999a
 800c154:	3fa99999 	.word	0x3fa99999
 800c158:	200909c0 	.word	0x200909c0
 800c15c:	2008f520 	.word	0x2008f520
 800c160:	3dcccccd 	.word	0x3dcccccd
 800c164:	20090970 	.word	0x20090970
 800c168:	20095934 	.word	0x20095934
 800c16c:	2000465c 	.word	0x2000465c
 800c170:	20052930 	.word	0x20052930
 800c174:	20005668 	.word	0x20005668
 800c178:	0811b040 	.word	0x0811b040
 800c17c:	20005678 	.word	0x20005678
 800c180:	20005688 	.word	0x20005688
 800c184:	20005660 	.word	0x20005660
 800c188:	20005670 	.word	0x20005670
 800c18c:	20005680 	.word	0x20005680
 800c190:	2008d504 	.word	0x2008d504
 800c194:	40590000 	.word	0x40590000
 800c198:	2008a504 	.word	0x2008a504
			y_ref *= k_ref;
 800c19c:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800c1a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1a4:	f7f4 fa3c 	bl	8000620 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c1a8:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800c1aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c1ae:	4bb7      	ldr	r3, [pc, #732]	; (800c48c <CRI_func+0x66c>)
 800c1b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1b4:	f7f4 fa34 	bl	8000620 <__aeabi_dmul>
 800c1b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c1bc:	f7f4 f87e 	bl	80002bc <__adddf3>
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	4bb2      	ldr	r3, [pc, #712]	; (800c490 <CRI_func+0x670>)
 800c1c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1cc:	f7f4 fa28 	bl	8000620 <__aeabi_dmul>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	f7f4 f870 	bl	80002bc <__adddf3>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4604      	mov	r4, r0
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	4bac      	ldr	r3, [pc, #688]	; (800c494 <CRI_func+0x674>)
 800c1e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1e8:	f7f4 fa1a 	bl	8000620 <__aeabi_dmul>
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	f7f4 fb40 	bl	8000874 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c1f4:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c1f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c1fa:	4ba7      	ldr	r3, [pc, #668]	; (800c498 <CRI_func+0x678>)
 800c1fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c200:	f7f4 fa0e 	bl	8000620 <__aeabi_dmul>
 800c204:	4622      	mov	r2, r4
 800c206:	462b      	mov	r3, r5
 800c208:	f7f4 fb34 	bl	8000874 <__aeabi_ddiv>
 800c20c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800c210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c218:	f7f4 fa02 	bl	8000620 <__aeabi_dmul>
 800c21c:	4b9f      	ldr	r3, [pc, #636]	; (800c49c <CRI_func+0x67c>)
 800c21e:	4680      	mov	r8, r0
 800c220:	4689      	mov	r9, r1
 800c222:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800c226:	4652      	mov	r2, sl
 800c228:	465b      	mov	r3, fp
 800c22a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c22e:	f7f4 f9f7 	bl	8000620 <__aeabi_dmul>
 800c232:	4b9b      	ldr	r3, [pc, #620]	; (800c4a0 <CRI_func+0x680>)
 800c234:	4682      	mov	sl, r0
 800c236:	468b      	mov	fp, r1
 800c238:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800c23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c240:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c244:	f7f4 f9ec 	bl	8000620 <__aeabi_dmul>
 800c248:	4b96      	ldr	r3, [pc, #600]	; (800c4a4 <CRI_func+0x684>)
 800c24a:	4604      	mov	r4, r0
 800c24c:	460d      	mov	r5, r1
 800c24e:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800c252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c256:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c25a:	f7f4 f9e1 	bl	8000620 <__aeabi_dmul>
 800c25e:	4b92      	ldr	r3, [pc, #584]	; (800c4a8 <CRI_func+0x688>)
 800c260:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c264:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800c268:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c26c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c270:	f7f4 f9d6 	bl	8000620 <__aeabi_dmul>
 800c274:	4b8d      	ldr	r3, [pc, #564]	; (800c4ac <CRI_func+0x68c>)
 800c276:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c27a:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800c27e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c286:	f7f4 f9cb 	bl	8000620 <__aeabi_dmul>
 800c28a:	4b89      	ldr	r3, [pc, #548]	; (800c4b0 <CRI_func+0x690>)
 800c28c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800c290:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c294:	2200      	movs	r2, #0
 800c296:	4b7d      	ldr	r3, [pc, #500]	; (800c48c <CRI_func+0x66c>)
 800c298:	4650      	mov	r0, sl
 800c29a:	4659      	mov	r1, fp
 800c29c:	f7f4 f9c0 	bl	8000620 <__aeabi_dmul>
 800c2a0:	4642      	mov	r2, r8
 800c2a2:	464b      	mov	r3, r9
 800c2a4:	f7f4 f80a 	bl	80002bc <__adddf3>
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	460f      	mov	r7, r1
 800c2ae:	4b78      	ldr	r3, [pc, #480]	; (800c490 <CRI_func+0x670>)
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	f7f4 f9b4 	bl	8000620 <__aeabi_dmul>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4630      	mov	r0, r6
 800c2be:	4639      	mov	r1, r7
 800c2c0:	f7f3 fffc 	bl	80002bc <__adddf3>
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	4b72      	ldr	r3, [pc, #456]	; (800c494 <CRI_func+0x674>)
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	f7f4 f9a6 	bl	8000620 <__aeabi_dmul>
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	462b      	mov	r3, r5
 800c2d8:	f7f4 facc 	bl	8000874 <__aeabi_ddiv>
 800c2dc:	4b75      	ldr	r3, [pc, #468]	; (800c4b4 <CRI_func+0x694>)
 800c2de:	4680      	mov	r8, r0
 800c2e0:	4689      	mov	r9, r1
 800c2e2:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	4b6b      	ldr	r3, [pc, #428]	; (800c498 <CRI_func+0x678>)
 800c2ea:	4650      	mov	r0, sl
 800c2ec:	4659      	mov	r1, fp
 800c2ee:	f7f4 f997 	bl	8000620 <__aeabi_dmul>
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	f7f4 fabd 	bl	8000874 <__aeabi_ddiv>
 800c2fa:	4b6f      	ldr	r3, [pc, #444]	; (800c4b8 <CRI_func+0x698>)
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c300:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c304:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c308:	f016 f98a 	bl	8022620 <cbrt>
 800c30c:	2200      	movs	r2, #0
 800c30e:	ec51 0b10 	vmov	r0, r1, d0
 800c312:	4b6a      	ldr	r3, [pc, #424]	; (800c4bc <CRI_func+0x69c>)
 800c314:	f7f4 f984 	bl	8000620 <__aeabi_dmul>
 800c318:	2200      	movs	r2, #0
 800c31a:	4b69      	ldr	r3, [pc, #420]	; (800c4c0 <CRI_func+0x6a0>)
 800c31c:	f7f3 ffcc 	bl	80002b8 <__aeabi_dsub>
 800c320:	4b68      	ldr	r3, [pc, #416]	; (800c4c4 <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c322:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c324:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c328:	4b67      	ldr	r3, [pc, #412]	; (800c4c8 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c32a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c32e:	f7f4 f977 	bl	8000620 <__aeabi_dmul>
 800c332:	4604      	mov	r4, r0
 800c334:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c336:	460d      	mov	r5, r1
 800c338:	f7f4 f91e 	bl	8000578 <__aeabi_f2d>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4640      	mov	r0, r8
 800c342:	4649      	mov	r1, r9
 800c344:	f7f3 ffb8 	bl	80002b8 <__aeabi_dsub>
 800c348:	4622      	mov	r2, r4
 800c34a:	462b      	mov	r3, r5
 800c34c:	f7f4 f968 	bl	8000620 <__aeabi_dmul>
 800c350:	4b5e      	ldr	r3, [pc, #376]	; (800c4cc <CRI_func+0x6ac>)
 800c352:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c356:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800c35a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c35c:	f7f4 f90c 	bl	8000578 <__aeabi_f2d>
 800c360:	4602      	mov	r2, r0
 800c362:	460b      	mov	r3, r1
 800c364:	4630      	mov	r0, r6
 800c366:	4639      	mov	r1, r7
 800c368:	f7f3 ffa6 	bl	80002b8 <__aeabi_dsub>
 800c36c:	4622      	mov	r2, r4
 800c36e:	462b      	mov	r3, r5
 800c370:	f7f4 f956 	bl	8000620 <__aeabi_dmul>
 800c374:	4b56      	ldr	r3, [pc, #344]	; (800c4d0 <CRI_func+0x6b0>)
 800c376:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800c37a:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c37e:	2200      	movs	r2, #0
 800c380:	4b42      	ldr	r3, [pc, #264]	; (800c48c <CRI_func+0x66c>)
 800c382:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c386:	f7f4 f94b 	bl	8000620 <__aeabi_dmul>
 800c38a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c38e:	f7f3 ff95 	bl	80002bc <__adddf3>
 800c392:	2200      	movs	r2, #0
 800c394:	4604      	mov	r4, r0
 800c396:	460d      	mov	r5, r1
 800c398:	4b3d      	ldr	r3, [pc, #244]	; (800c490 <CRI_func+0x670>)
 800c39a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800c39e:	f7f4 f93f 	bl	8000620 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	f7f3 ff87 	bl	80002bc <__adddf3>
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	460f      	mov	r7, r1
 800c3b4:	4b37      	ldr	r3, [pc, #220]	; (800c494 <CRI_func+0x674>)
 800c3b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c3ba:	f7f4 f931 	bl	8000620 <__aeabi_dmul>
 800c3be:	4632      	mov	r2, r6
 800c3c0:	463b      	mov	r3, r7
 800c3c2:	f7f4 fa57 	bl	8000874 <__aeabi_ddiv>
 800c3c6:	4b43      	ldr	r3, [pc, #268]	; (800c4d4 <CRI_func+0x6b4>)
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	460d      	mov	r5, r1
 800c3cc:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4b31      	ldr	r3, [pc, #196]	; (800c498 <CRI_func+0x678>)
 800c3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c3d8:	f7f4 f922 	bl	8000620 <__aeabi_dmul>
 800c3dc:	4632      	mov	r2, r6
 800c3de:	463b      	mov	r3, r7
 800c3e0:	f7f4 fa48 	bl	8000874 <__aeabi_ddiv>
 800c3e4:	4b3c      	ldr	r3, [pc, #240]	; (800c4d8 <CRI_func+0x6b8>)
 800c3e6:	4682      	mov	sl, r0
 800c3e8:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c3ea:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c3ee:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c3f2:	f016 f915 	bl	8022620 <cbrt>
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	ec51 0b10 	vmov	r0, r1, d0
 800c3fc:	4b2f      	ldr	r3, [pc, #188]	; (800c4bc <CRI_func+0x69c>)
 800c3fe:	f7f4 f90f 	bl	8000620 <__aeabi_dmul>
 800c402:	2200      	movs	r2, #0
 800c404:	4b2e      	ldr	r3, [pc, #184]	; (800c4c0 <CRI_func+0x6a0>)
 800c406:	f7f3 ff57 	bl	80002b8 <__aeabi_dsub>
 800c40a:	4b34      	ldr	r3, [pc, #208]	; (800c4dc <CRI_func+0x6bc>)
 800c40c:	4606      	mov	r6, r0
 800c40e:	460f      	mov	r7, r1
 800c410:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800c414:	2200      	movs	r2, #0
 800c416:	4b2c      	ldr	r3, [pc, #176]	; (800c4c8 <CRI_func+0x6a8>)
 800c418:	f7f4 f902 	bl	8000620 <__aeabi_dmul>
 800c41c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c420:	4680      	mov	r8, r0
 800c422:	4689      	mov	r9, r1
 800c424:	4620      	mov	r0, r4
 800c426:	4629      	mov	r1, r5
 800c428:	f7f3 ff46 	bl	80002b8 <__aeabi_dsub>
 800c42c:	4642      	mov	r2, r8
 800c42e:	464b      	mov	r3, r9
 800c430:	f7f4 f8f6 	bl	8000620 <__aeabi_dmul>
 800c434:	4b2a      	ldr	r3, [pc, #168]	; (800c4e0 <CRI_func+0x6c0>)
 800c436:	4604      	mov	r4, r0
 800c438:	460d      	mov	r5, r1
 800c43a:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800c43e:	4650      	mov	r0, sl
 800c440:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c444:	4659      	mov	r1, fp
 800c446:	f7f3 ff37 	bl	80002b8 <__aeabi_dsub>
 800c44a:	4642      	mov	r2, r8
 800c44c:	464b      	mov	r3, r9
 800c44e:	f7f4 f8e7 	bl	8000620 <__aeabi_dmul>
 800c452:	4b24      	ldr	r3, [pc, #144]	; (800c4e4 <CRI_func+0x6c4>)
 800c454:	4680      	mov	r8, r0
 800c456:	4689      	mov	r9, r1
 800c458:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800c45c:	4630      	mov	r0, r6
 800c45e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c462:	4639      	mov	r1, r7
 800c464:	f7f3 ff28 	bl	80002b8 <__aeabi_dsub>
 800c468:	4b1f      	ldr	r3, [pc, #124]	; (800c4e8 <CRI_func+0x6c8>)
 800c46a:	4606      	mov	r6, r0
 800c46c:	460f      	mov	r7, r1
 800c46e:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800c472:	4620      	mov	r0, r4
 800c474:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c478:	4629      	mov	r1, r5
 800c47a:	f7f3 ff1d 	bl	80002b8 <__aeabi_dsub>
 800c47e:	4b1b      	ldr	r3, [pc, #108]	; (800c4ec <CRI_func+0x6cc>)
 800c480:	4604      	mov	r4, r0
 800c482:	460d      	mov	r5, r1
 800c484:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800c488:	4640      	mov	r0, r8
 800c48a:	e031      	b.n	800c4f0 <CRI_func+0x6d0>
 800c48c:	402e0000 	.word	0x402e0000
 800c490:	40080000 	.word	0x40080000
 800c494:	40100000 	.word	0x40100000
 800c498:	40180000 	.word	0x40180000
 800c49c:	20005668 	.word	0x20005668
 800c4a0:	20005678 	.word	0x20005678
 800c4a4:	20005688 	.word	0x20005688
 800c4a8:	20005660 	.word	0x20005660
 800c4ac:	20005670 	.word	0x20005670
 800c4b0:	20005680 	.word	0x20005680
 800c4b4:	20090990 	.word	0x20090990
 800c4b8:	20090940 	.word	0x20090940
 800c4bc:	40390000 	.word	0x40390000
 800c4c0:	40310000 	.word	0x40310000
 800c4c4:	200909b8 	.word	0x200909b8
 800c4c8:	402a0000 	.word	0x402a0000
 800c4cc:	20090948 	.word	0x20090948
 800c4d0:	20090988 	.word	0x20090988
 800c4d4:	200909b0 	.word	0x200909b0
 800c4d8:	20090950 	.word	0x20090950
 800c4dc:	20090998 	.word	0x20090998
 800c4e0:	20090968 	.word	0x20090968
 800c4e4:	20090938 	.word	0x20090938
 800c4e8:	20090980 	.word	0x20090980
 800c4ec:	20090978 	.word	0x20090978
 800c4f0:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f3 fedf 	bl	80002b8 <__aeabi_dsub>
 800c4fa:	4bd5      	ldr	r3, [pc, #852]	; (800c850 <CRI_func+0xa30>)
 800c4fc:	4680      	mov	r8, r0
 800c4fe:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c500:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800c502:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c506:	4630      	mov	r0, r6
 800c508:	463b      	mov	r3, r7
 800c50a:	4639      	mov	r1, r7
 800c50c:	f7f4 f888 	bl	8000620 <__aeabi_dmul>
 800c510:	4622      	mov	r2, r4
 800c512:	462b      	mov	r3, r5
 800c514:	4606      	mov	r6, r0
 800c516:	460f      	mov	r7, r1
 800c518:	4620      	mov	r0, r4
 800c51a:	4629      	mov	r1, r5
 800c51c:	f7f4 f880 	bl	8000620 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4630      	mov	r0, r6
 800c526:	4639      	mov	r1, r7
 800c528:	f7f3 fec8 	bl	80002bc <__adddf3>
 800c52c:	4642      	mov	r2, r8
 800c52e:	4604      	mov	r4, r0
 800c530:	460d      	mov	r5, r1
 800c532:	464b      	mov	r3, r9
 800c534:	4640      	mov	r0, r8
 800c536:	4649      	mov	r1, r9
 800c538:	f7f4 f872 	bl	8000620 <__aeabi_dmul>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	4620      	mov	r0, r4
 800c542:	4629      	mov	r1, r5
 800c544:	f7f3 feba 	bl	80002bc <__adddf3>
 800c548:	ec41 0b10 	vmov	d0, r0, r1
 800c54c:	f016 fc1c 	bl	8022d88 <sqrt>
 800c550:	4bc0      	ldr	r3, [pc, #768]	; (800c854 <CRI_func+0xa34>)
 800c552:	ec51 0b10 	vmov	r0, r1, d0
 800c556:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800c55a:	a39b      	add	r3, pc, #620	; (adr r3, 800c7c8 <CRI_func+0x9a8>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7f4 f85e 	bl	8000620 <__aeabi_dmul>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	2000      	movs	r0, #0
 800c56a:	49bb      	ldr	r1, [pc, #748]	; (800c858 <CRI_func+0xa38>)
 800c56c:	f7f3 fea4 	bl	80002b8 <__aeabi_dsub>
 800c570:	9a00      	ldr	r2, [sp, #0]
 800c572:	4bba      	ldr	r3, [pc, #744]	; (800c85c <CRI_func+0xa3c>)
 800c574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c578:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800c57c:	f7f4 fb00 	bl	8000b80 <__aeabi_d2iz>
 800c580:	4bb7      	ldr	r3, [pc, #732]	; (800c860 <CRI_func+0xa40>)
 800c582:	9a00      	ldr	r2, [sp, #0]
 800c584:	b240      	sxtb	r0, r0
 800c586:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800c588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c58a:	2b07      	cmp	r3, #7
 800c58c:	f200 8111 	bhi.w	800c7b2 <CRI_func+0x992>
			Ra_temp += Ri[i];
 800c590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c592:	4403      	add	r3, r0
 800c594:	b21b      	sxth	r3, r3
 800c596:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800c598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c59a:	2b0e      	cmp	r3, #14
 800c59c:	f040 810f 	bne.w	800c7be <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800c5a0:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c5a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	3008      	adds	r0, #8
 800c5ac:	f013 f93d 	bl	801f82a <memset>
 800c5b0:	9b00      	ldr	r3, [sp, #0]
 800c5b2:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800c5b4:	2b0f      	cmp	r3, #15
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	f47f ac92 	bne.w	800bee0 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800c5bc:	a384      	add	r3, pc, #528	; (adr r3, 800c7d0 <CRI_func+0x9b0>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	4ca8      	ldr	r4, [pc, #672]	; (800c864 <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c5c4:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800c868 <CRI_func+0xa48>
 800c5c8:	210d      	movs	r1, #13
 800c5ca:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800c5cc:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c5d0:	f006 fc9e 	bl	8012f10 <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800c5d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800c5d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800c5d8:	200e      	movs	r0, #14
 800c5da:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800c5de:	4ba3      	ldr	r3, [pc, #652]	; (800c86c <CRI_func+0xa4c>)
 800c5e0:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800c5e2:	2308      	movs	r3, #8
 800c5e4:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800c5e8:	4aa1      	ldr	r2, [pc, #644]	; (800c870 <CRI_func+0xa50>)
 800c5ea:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800c5ec:	4ba1      	ldr	r3, [pc, #644]	; (800c874 <CRI_func+0xa54>)
 800c5ee:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c5f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c5f4:	210d      	movs	r1, #13
 800c5f6:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800c5f8:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c5fc:	f006 fc88 	bl	8012f10 <GUI_Bar_Measure>
 800c600:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800c604:	b003      	add	sp, #12
 800c606:	ecbd 8b08 	vpop	{d8-d11}
 800c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c60e:	ee68 8a08 	vmul.f32	s17, s16, s16
 800c612:	ee68 7a28 	vmul.f32	s15, s16, s17
 800c616:	ee17 0a90 	vmov	r0, s15
 800c61a:	f7f3 ffad 	bl	8000578 <__aeabi_f2d>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	a16d      	add	r1, pc, #436	; (adr r1, 800c7d8 <CRI_func+0x9b8>)
 800c624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c628:	f7f4 f924 	bl	8000874 <__aeabi_ddiv>
 800c62c:	4606      	mov	r6, r0
 800c62e:	ee18 0a90 	vmov	r0, s17
 800c632:	460f      	mov	r7, r1
 800c634:	f7f3 ffa0 	bl	8000578 <__aeabi_f2d>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	a168      	add	r1, pc, #416	; (adr r1, 800c7e0 <CRI_func+0x9c0>)
 800c63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c642:	f7f4 f917 	bl	8000874 <__aeabi_ddiv>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4630      	mov	r0, r6
 800c64c:	4639      	mov	r1, r7
 800c64e:	f7f3 fe35 	bl	80002bc <__adddf3>
 800c652:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c654:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c658:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c65a:	f7f3 ff8d 	bl	8000578 <__aeabi_f2d>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	a161      	add	r1, pc, #388	; (adr r1, 800c7e8 <CRI_func+0x9c8>)
 800c664:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c668:	f7f4 f904 	bl	8000874 <__aeabi_ddiv>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4630      	mov	r0, r6
 800c672:	4639      	mov	r1, r7
 800c674:	f7f3 fe22 	bl	80002bc <__adddf3>
 800c678:	a35d      	add	r3, pc, #372	; (adr r3, 800c7f0 <CRI_func+0x9d0>)
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800c67e:	f7f3 fe1d 	bl	80002bc <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c682:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800c686:	e9d4 4500 	ldrd	r4, r5, [r4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	4b7a      	ldr	r3, [pc, #488]	; (800c878 <CRI_func+0xa58>)
 800c68e:	4620      	mov	r0, r4
 800c690:	4629      	mov	r1, r5
 800c692:	f7f3 ffc5 	bl	8000620 <__aeabi_dmul>
 800c696:	4622      	mov	r2, r4
 800c698:	462b      	mov	r3, r5
 800c69a:	f7f3 ffc1 	bl	8000620 <__aeabi_dmul>
 800c69e:	a356      	add	r3, pc, #344	; (adr r3, 800c7f8 <CRI_func+0x9d8>)
 800c6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	460f      	mov	r7, r1
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	f7f3 ffb8 	bl	8000620 <__aeabi_dmul>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	f7f3 fe00 	bl	80002bc <__adddf3>
 800c6bc:	a350      	add	r3, pc, #320	; (adr r3, 800c800 <CRI_func+0x9e0>)
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	f7f3 fdf9 	bl	80002b8 <__aeabi_dsub>
 800c6c6:	4b6d      	ldr	r3, [pc, #436]	; (800c87c <CRI_func+0xa5c>)
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	460f      	mov	r7, r1
 800c6cc:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	a34d      	add	r3, pc, #308	; (adr r3, 800c808 <CRI_func+0x9e8>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7f3 ffa1 	bl	8000620 <__aeabi_dmul>
 800c6de:	a34c      	add	r3, pc, #304	; (adr r3, 800c810 <CRI_func+0x9f0>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 fdea 	bl	80002bc <__adddf3>
 800c6e8:	a34b      	add	r3, pc, #300	; (adr r3, 800c818 <CRI_func+0x9f8>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	4680      	mov	r8, r0
 800c6f0:	4689      	mov	r9, r1
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	f7f3 ff93 	bl	8000620 <__aeabi_dmul>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f3 fdd9 	bl	80002b8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c706:	a346      	add	r3, pc, #280	; (adr r3, 800c820 <CRI_func+0xa00>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c70c:	4680      	mov	r8, r0
 800c70e:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c710:	4620      	mov	r0, r4
 800c712:	4629      	mov	r1, r5
 800c714:	f7f3 ff84 	bl	8000620 <__aeabi_dmul>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	a142      	add	r1, pc, #264	; (adr r1, 800c828 <CRI_func+0xa08>)
 800c71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c722:	f7f3 fdc9 	bl	80002b8 <__aeabi_dsub>
 800c726:	a342      	add	r3, pc, #264	; (adr r3, 800c830 <CRI_func+0xa10>)
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	e9cd 0100 	strd	r0, r1, [sp]
 800c730:	4630      	mov	r0, r6
 800c732:	4639      	mov	r1, r7
 800c734:	f7f3 ff74 	bl	8000620 <__aeabi_dmul>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c740:	f7f3 fdbc 	bl	80002bc <__adddf3>
 800c744:	f7f4 fa64 	bl	8000c10 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c748:	f7f3 ff16 	bl	8000578 <__aeabi_f2d>
 800c74c:	4642      	mov	r2, r8
 800c74e:	464b      	mov	r3, r9
 800c750:	f7f4 f890 	bl	8000874 <__aeabi_ddiv>
 800c754:	f7f4 fa5c 	bl	8000c10 <__aeabi_d2f>
 800c758:	4b49      	ldr	r3, [pc, #292]	; (800c880 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c75a:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c75c:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c75e:	a336      	add	r3, pc, #216	; (adr r3, 800c838 <CRI_func+0xa18>)
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	4620      	mov	r0, r4
 800c766:	f7f3 ff5b 	bl	8000620 <__aeabi_dmul>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	a134      	add	r1, pc, #208	; (adr r1, 800c840 <CRI_func+0xa20>)
 800c770:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c774:	f7f3 fda0 	bl	80002b8 <__aeabi_dsub>
 800c778:	a333      	add	r3, pc, #204	; (adr r3, 800c848 <CRI_func+0xa28>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	4604      	mov	r4, r0
 800c780:	460d      	mov	r5, r1
 800c782:	4630      	mov	r0, r6
 800c784:	4639      	mov	r1, r7
 800c786:	f7f3 ff4b 	bl	8000620 <__aeabi_dmul>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	4620      	mov	r0, r4
 800c790:	4629      	mov	r1, r5
 800c792:	f7f3 fd93 	bl	80002bc <__adddf3>
 800c796:	f7f4 fa3b 	bl	8000c10 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c79a:	f7f3 feed 	bl	8000578 <__aeabi_f2d>
 800c79e:	464b      	mov	r3, r9
 800c7a0:	4642      	mov	r2, r8
 800c7a2:	f7f4 f867 	bl	8000874 <__aeabi_ddiv>
 800c7a6:	f7f4 fa33 	bl	8000c10 <__aeabi_d2f>
 800c7aa:	4b36      	ldr	r3, [pc, #216]	; (800c884 <CRI_func+0xa64>)
 800c7ac:	6018      	str	r0, [r3, #0]
 800c7ae:	f7ff bb5c 	b.w	800be6a <CRI_func+0x4a>
		if (i == 8)
 800c7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	f47f aeef 	bne.w	800c598 <CRI_func+0x778>
			R9 = Ri[i];
 800c7ba:	4b33      	ldr	r3, [pc, #204]	; (800c888 <CRI_func+0xa68>)
 800c7bc:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800c7be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7c0:	4418      	add	r0, r3
 800c7c2:	b203      	sxth	r3, r0
 800c7c4:	9310      	str	r3, [sp, #64]	; 0x40
 800c7c6:	e6eb      	b.n	800c5a0 <CRI_func+0x780>
 800c7c8:	66666666 	.word	0x66666666
 800c7cc:	40126666 	.word	0x40126666
 800c7d0:	cccccccd 	.word	0xcccccccd
 800c7d4:	3feccccc 	.word	0x3feccccc
 800c7d8:	dc000000 	.word	0xdc000000
 800c7dc:	c1f12993 	.word	0xc1f12993
 800c7e0:	00000000 	.word	0x00000000
 800c7e4:	4146a47c 	.word	0x4146a47c
 800c7e8:	3d70a3d7 	.word	0x3d70a3d7
 800c7ec:	4058c70a 	.word	0x4058c70a
 800c7f0:	d594f26b 	.word	0xd594f26b
 800c7f4:	3fcf3d74 	.word	0x3fcf3d74
 800c7f8:	8f5c28f6 	.word	0x8f5c28f6
 800c7fc:	4006f5c2 	.word	0x4006f5c2
 800c800:	9999999a 	.word	0x9999999a
 800c804:	3fd19999 	.word	0x3fd19999
 800c808:	af4f0d84 	.word	0xaf4f0d84
 800c80c:	3fd06594 	.word	0x3fd06594
 800c810:	9f559b3d 	.word	0x9f559b3d
 800c814:	3f98adab 	.word	0x3f98adab
 800c818:	487fcb92 	.word	0x487fcb92
 800c81c:	3fe77dbf 	.word	0x3fe77dbf
 800c820:	17c1bda5 	.word	0x17c1bda5
 800c824:	3ffc5326 	.word	0x3ffc5326
 800c828:	76c8b439 	.word	0x76c8b439
 800c82c:	bff59fbe 	.word	0xbff59fbe
 800c830:	0aa64c30 	.word	0x0aa64c30
 800c834:	4017a546 	.word	0x4017a546
 800c838:	205bc01a 	.word	0x205bc01a
 800c83c:	403f7141 	.word	0x403f7141
 800c840:	eb851eb8 	.word	0xeb851eb8
 800c844:	3f9eb851 	.word	0x3f9eb851
 800c848:	ee631f8a 	.word	0xee631f8a
 800c84c:	403e125a 	.word	0x403e125a
 800c850:	20090a38 	.word	0x20090a38
 800c854:	200909a8 	.word	0x200909a8
 800c858:	40590000 	.word	0x40590000
 800c85c:	200909c0 	.word	0x200909c0
 800c860:	2000464b 	.word	0x2000464b
 800c864:	20090970 	.word	0x20090970
 800c868:	3f666666 	.word	0x3f666666
 800c86c:	2000464a 	.word	0x2000464a
 800c870:	20004649 	.word	0x20004649
 800c874:	3ff00000 	.word	0x3ff00000
 800c878:	c0080000 	.word	0xc0080000
 800c87c:	200909a0 	.word	0x200909a0
 800c880:	20004640 	.word	0x20004640
 800c884:	20004644 	.word	0x20004644
 800c888:	20004648 	.word	0x20004648
		if (CCT_measure < 7000)
 800c88c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c88e:	4c30      	ldr	r4, [pc, #192]	; (800c950 <CRI_func+0xb30>)
 800c890:	f641 3357 	movw	r3, #6999	; 0x1b57
 800c894:	ee07 2a90 	vmov	s15, r2
 800c898:	429a      	cmp	r2, r3
 800c89a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800c89e:	f67f aeb6 	bls.w	800c60e <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c8a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c8a4:	f7f3 fe46 	bl	8000534 <__aeabi_ui2d>
 800c8a8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c928 <CRI_func+0xb08>
 800c8ac:	ec41 0b10 	vmov	d0, r0, r1
 800c8b0:	f016 f8f2 	bl	8022a98 <pow>
 800c8b4:	ee68 7a08 	vmul.f32	s15, s16, s16
 800c8b8:	ed8d 0b00 	vstr	d0, [sp]
 800c8bc:	ee17 0a90 	vmov	r0, s15
 800c8c0:	f7f3 fe5a 	bl	8000578 <__aeabi_f2d>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	a119      	add	r1, pc, #100	; (adr r1, 800c930 <CRI_func+0xb10>)
 800c8ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ce:	f7f3 ffd1 	bl	8000874 <__aeabi_ddiv>
 800c8d2:	ed9d 0b00 	vldr	d0, [sp]
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	ec53 2b10 	vmov	r2, r3, d0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	a116      	add	r1, pc, #88	; (adr r1, 800c938 <CRI_func+0xb18>)
 800c8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8e4:	f7f3 ffc6 	bl	8000874 <__aeabi_ddiv>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	f7f3 fce4 	bl	80002bc <__adddf3>
 800c8f4:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800c8f6:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c8fa:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800c8fc:	f7f3 fe3c 	bl	8000578 <__aeabi_f2d>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	a10e      	add	r1, pc, #56	; (adr r1, 800c940 <CRI_func+0xb20>)
 800c906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c90a:	f7f3 ffb3 	bl	8000874 <__aeabi_ddiv>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4630      	mov	r0, r6
 800c914:	4639      	mov	r1, r7
 800c916:	f7f3 fcd1 	bl	80002bc <__adddf3>
 800c91a:	a30b      	add	r3, pc, #44	; (adr r3, 800c948 <CRI_func+0xb28>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	e6ad      	b.n	800c67e <CRI_func+0x85e>
 800c922:	bf00      	nop
 800c924:	f3af 8000 	nop.w
 800c928:	00000000 	.word	0x00000000
 800c92c:	40080000 	.word	0x40080000
 800c930:	00000000 	.word	0x00000000
 800c934:	413d04e8 	.word	0x413d04e8
 800c938:	00000001 	.word	0x00000001
 800c93c:	c1dde5cf 	.word	0xc1dde5cf
 800c940:	28f5c290 	.word	0x28f5c290
 800c944:	406eef5c 	.word	0x406eef5c
 800c948:	a3ec02f3 	.word	0xa3ec02f3
 800c94c:	3fce5753 	.word	0x3fce5753
 800c950:	20090958 	.word	0x20090958

0800c954 <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800c954:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800c956:	bbb8      	cbnz	r0, 800c9c8 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800c958:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800c95c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800c960:	2212      	movs	r2, #18
 800c962:	215f      	movs	r1, #95	; 0x5f
 800c964:	2010      	movs	r0, #16
 800c966:	9400      	str	r4, [sp, #0]
 800c968:	f00f fa55 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800c96c:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800c970:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800c974:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800c978:	2010      	movs	r0, #16
 800c97a:	9400      	str	r4, [sp, #0]
 800c97c:	f00f fa4b 	bl	801be16 <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800c980:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800c984:	4619      	mov	r1, r3
 800c986:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800c98a:	2010      	movs	r0, #16
 800c98c:	9400      	str	r4, [sp, #0]
 800c98e:	f00f f9e5 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800c992:	f240 1301 	movw	r3, #257	; 0x101
 800c996:	4619      	mov	r1, r3
 800c998:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800c99c:	2010      	movs	r0, #16
 800c99e:	9400      	str	r4, [sp, #0]
 800c9a0:	f00f f9dc 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800c9a4:	23b5      	movs	r3, #181	; 0xb5
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800c9ac:	2010      	movs	r0, #16
 800c9ae:	9400      	str	r4, [sp, #0]
 800c9b0:	f00f f9d4 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800c9b4:	2369      	movs	r3, #105	; 0x69
 800c9b6:	9400      	str	r4, [sp, #0]
 800c9b8:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800c9bc:	4619      	mov	r1, r3
 800c9be:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800c9c0:	f00f f9cc 	bl	801bd5c <TFT_DrawLine>
		
	}
}
 800c9c4:	b002      	add	sp, #8
 800c9c6:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800c9c8:	2801      	cmp	r0, #1
 800c9ca:	d131      	bne.n	800ca30 <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800c9cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800c9d0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800c9d4:	22ff      	movs	r2, #255	; 0xff
 800c9d6:	2146      	movs	r1, #70	; 0x46
 800c9d8:	20fd      	movs	r0, #253	; 0xfd
 800c9da:	9400      	str	r4, [sp, #0]
 800c9dc:	f00f fa1b 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800c9e0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800c9e4:	22ff      	movs	r2, #255	; 0xff
 800c9e6:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800c9ea:	2028      	movs	r0, #40	; 0x28
 800c9ec:	9400      	str	r4, [sp, #0]
 800c9ee:	f00f fa12 	bl	801be16 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800c9f2:	22cc      	movs	r2, #204	; 0xcc
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800c9fa:	2146      	movs	r1, #70	; 0x46
 800c9fc:	9400      	str	r4, [sp, #0]
 800c9fe:	f00f f9ad 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800ca02:	2297      	movs	r2, #151	; 0x97
 800ca04:	4610      	mov	r0, r2
 800ca06:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca0a:	2146      	movs	r1, #70	; 0x46
 800ca0c:	9400      	str	r4, [sp, #0]
 800ca0e:	f00f f9a5 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800ca12:	2262      	movs	r2, #98	; 0x62
 800ca14:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca18:	4610      	mov	r0, r2
 800ca1a:	9400      	str	r4, [sp, #0]
 800ca1c:	2146      	movs	r1, #70	; 0x46
 800ca1e:	f00f f99d 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800ca22:	9400      	str	r4, [sp, #0]
 800ca24:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca28:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800ca2a:	2146      	movs	r1, #70	; 0x46
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	e7c7      	b.n	800c9c0 <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800ca30:	2802      	cmp	r0, #2
 800ca32:	d1c7      	bne.n	800c9c4 <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800ca34:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ca38:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca3c:	2210      	movs	r2, #16
 800ca3e:	214a      	movs	r1, #74	; 0x4a
 800ca40:	2012      	movs	r0, #18
 800ca42:	9400      	str	r4, [sp, #0]
 800ca44:	f00f f9e7 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800ca48:	234c      	movs	r3, #76	; 0x4c
 800ca4a:	22e8      	movs	r2, #232	; 0xe8
 800ca4c:	214a      	movs	r1, #74	; 0x4a
 800ca4e:	2011      	movs	r0, #17
 800ca50:	9400      	str	r4, [sp, #0]
 800ca52:	f00f f9e0 	bl	801be16 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800ca56:	2244      	movs	r2, #68	; 0x44
 800ca58:	4610      	mov	r0, r2
 800ca5a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca5e:	2146      	movs	r1, #70	; 0x46
 800ca60:	9400      	str	r4, [sp, #0]
 800ca62:	f00f f97b 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800ca66:	2279      	movs	r2, #121	; 0x79
 800ca68:	4610      	mov	r0, r2
 800ca6a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca6e:	2146      	movs	r1, #70	; 0x46
 800ca70:	9400      	str	r4, [sp, #0]
 800ca72:	f00f f973 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800ca76:	22ae      	movs	r2, #174	; 0xae
 800ca78:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	9400      	str	r4, [sp, #0]
 800ca80:	2146      	movs	r1, #70	; 0x46
 800ca82:	f00f f96b 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800ca86:	9400      	str	r4, [sp, #0]
 800ca88:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ca8c:	22e3      	movs	r2, #227	; 0xe3
 800ca8e:	e7cc      	b.n	800ca2a <CRI_Axes+0xd6>

0800ca90 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800ca90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800ca94:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800ca96:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800ca98:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800ca9a:	4688      	mov	r8, r1
 800ca9c:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800ca9e:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d161      	bne.n	800cb6a <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800caa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800caaa:	f00f fbe3 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800caae:	2063      	movs	r0, #99	; 0x63
 800cab0:	f00f fbe6 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cab4:	4861      	ldr	r0, [pc, #388]	; (800cc3c <CRI_Axes_Measure+0x1ac>)
 800cab6:	f00f fbd7 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800caba:	2261      	movs	r2, #97	; 0x61
 800cabc:	2146      	movs	r1, #70	; 0x46
 800cabe:	2011      	movs	r0, #17
 800cac0:	f00f fc9c 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cac4:	485e      	ldr	r0, [pc, #376]	; (800cc40 <CRI_Axes_Measure+0x1b0>)
 800cac6:	f00f fbcf 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800caca:	2252      	movs	r2, #82	; 0x52
 800cacc:	2144      	movs	r1, #68	; 0x44
 800cace:	2003      	movs	r0, #3
 800cad0:	f00f fc94 	bl	801c3fc <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800cad4:	4642      	mov	r2, r8
 800cad6:	495b      	ldr	r1, [pc, #364]	; (800cc44 <CRI_Axes_Measure+0x1b4>)
 800cad8:	4620      	mov	r0, r4
 800cada:	f012 feaf 	bl	801f83c <sprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cade:	2303      	movs	r3, #3
 800cae0:	4622      	mov	r2, r4
 800cae2:	2144      	movs	r1, #68	; 0x44
 800cae4:	2023      	movs	r0, #35	; 0x23
 800cae6:	f00f fce1 	bl	801c4ac <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800caea:	4854      	ldr	r0, [pc, #336]	; (800cc3c <CRI_Axes_Measure+0x1ac>)
 800caec:	f00f fbbc 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800caf0:	226c      	movs	r2, #108	; 0x6c
 800caf2:	2146      	movs	r1, #70	; 0x46
 800caf4:	2071      	movs	r0, #113	; 0x71
 800caf6:	f00f fc81 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800cafa:	226c      	movs	r2, #108	; 0x6c
 800cafc:	2146      	movs	r1, #70	; 0x46
 800cafe:	207a      	movs	r0, #122	; 0x7a
 800cb00:	f00f fc7c 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800cb04:	2261      	movs	r2, #97	; 0x61
 800cb06:	2146      	movs	r1, #70	; 0x46
 800cb08:	2066      	movs	r0, #102	; 0x66
 800cb0a:	f00f fc77 	bl	801c3fc <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800cb0e:	484c      	ldr	r0, [pc, #304]	; (800cc40 <CRI_Axes_Measure+0x1b0>)
 800cb10:	f00f fbaa 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800cb14:	2252      	movs	r2, #82	; 0x52
 800cb16:	2144      	movs	r1, #68	; 0x44
 800cb18:	2056      	movs	r0, #86	; 0x56
 800cb1a:	f00f fc6f 	bl	801c3fc <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800cb1e:	463a      	mov	r2, r7
 800cb20:	4948      	ldr	r1, [pc, #288]	; (800cc44 <CRI_Axes_Measure+0x1b4>)
 800cb22:	4620      	mov	r0, r4
 800cb24:	f012 fe8a 	bl	801f83c <sprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cb28:	2303      	movs	r3, #3
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	2144      	movs	r1, #68	; 0x44
 800cb2e:	208a      	movs	r0, #138	; 0x8a
 800cb30:	f00f fcbc 	bl	801c4ac <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800cb34:	4632      	mov	r2, r6
 800cb36:	4943      	ldr	r1, [pc, #268]	; (800cc44 <CRI_Axes_Measure+0x1b4>)
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f012 fe7f 	bl	801f83c <sprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cb3e:	2e00      	cmp	r6, #0
 800cb40:	bfb4      	ite	lt
 800cb42:	20d7      	movlt	r0, #215	; 0xd7
 800cb44:	20dc      	movge	r0, #220	; 0xdc
 800cb46:	2303      	movs	r3, #3
 800cb48:	4622      	mov	r2, r4
 800cb4a:	2144      	movs	r1, #68	; 0x44
 800cb4c:	f00f fcae 	bl	801c4ac <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800cb50:	2252      	movs	r2, #82	; 0x52
 800cb52:	2144      	movs	r1, #68	; 0x44
 800cb54:	20b7      	movs	r0, #183	; 0xb7
 800cb56:	f00f fc51 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800cb5a:	2239      	movs	r2, #57	; 0x39
 800cb5c:	2144      	movs	r1, #68	; 0x44
 800cb5e:	20c6      	movs	r0, #198	; 0xc6
 800cb60:	f00f fc4c 	bl	801c3fc <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800cb64:	b002      	add	sp, #8
 800cb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb6a:	4d37      	ldr	r5, [pc, #220]	; (800cc48 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cb6c:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800cb6e:	bf14      	ite	ne
 800cb70:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cb72:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cb74:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800cb78:	bf18      	it	ne
 800cb7a:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cb7c:	f00f fb7a 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cb80:	2063      	movs	r0, #99	; 0x63
 800cb82:	f00f fb7d 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cb86:	482d      	ldr	r0, [pc, #180]	; (800cc3c <CRI_Axes_Measure+0x1ac>)
 800cb88:	f00f fb6e 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800cb8c:	2261      	movs	r2, #97	; 0x61
 800cb8e:	2110      	movs	r1, #16
 800cb90:	2064      	movs	r0, #100	; 0x64
 800cb92:	f00f fc33 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cb96:	482a      	ldr	r0, [pc, #168]	; (800cc40 <CRI_Axes_Measure+0x1b0>)
 800cb98:	f00f fb66 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800cb9c:	2252      	movs	r2, #82	; 0x52
 800cb9e:	210e      	movs	r1, #14
 800cba0:	2055      	movs	r0, #85	; 0x55
 800cba2:	f00f fc2b 	bl	801c3fc <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800cba6:	4642      	mov	r2, r8
 800cba8:	4926      	ldr	r1, [pc, #152]	; (800cc44 <CRI_Axes_Measure+0x1b4>)
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f012 fe46 	bl	801f83c <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	4622      	mov	r2, r4
 800cbb4:	210e      	movs	r1, #14
 800cbb6:	207d      	movs	r0, #125	; 0x7d
 800cbb8:	f00f fc78 	bl	801c4ac <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800cbbc:	481f      	ldr	r0, [pc, #124]	; (800cc3c <CRI_Axes_Measure+0x1ac>)
 800cbbe:	f00f fb53 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800cbc2:	226c      	movs	r2, #108	; 0x6c
 800cbc4:	2110      	movs	r1, #16
 800cbc6:	20dd      	movs	r0, #221	; 0xdd
 800cbc8:	f00f fc18 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800cbcc:	226c      	movs	r2, #108	; 0x6c
 800cbce:	2110      	movs	r1, #16
 800cbd0:	20e6      	movs	r0, #230	; 0xe6
 800cbd2:	f00f fc13 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800cbd6:	2261      	movs	r2, #97	; 0x61
 800cbd8:	2110      	movs	r1, #16
 800cbda:	20d2      	movs	r0, #210	; 0xd2
 800cbdc:	f00f fc0e 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cbe0:	4817      	ldr	r0, [pc, #92]	; (800cc40 <CRI_Axes_Measure+0x1b0>)
 800cbe2:	f00f fb41 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800cbe6:	2252      	movs	r2, #82	; 0x52
 800cbe8:	210e      	movs	r1, #14
 800cbea:	20c3      	movs	r0, #195	; 0xc3
 800cbec:	f00f fc06 	bl	801c3fc <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800cbf0:	463a      	mov	r2, r7
 800cbf2:	4914      	ldr	r1, [pc, #80]	; (800cc44 <CRI_Axes_Measure+0x1b4>)
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f012 fe21 	bl	801f83c <sprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	210e      	movs	r1, #14
 800cc00:	20ff      	movs	r0, #255	; 0xff
 800cc02:	f00f fc53 	bl	801c4ac <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800cc06:	2252      	movs	r2, #82	; 0x52
 800cc08:	210e      	movs	r1, #14
 800cc0a:	f240 1045 	movw	r0, #325	; 0x145
 800cc0e:	f00f fbf5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800cc12:	2239      	movs	r2, #57	; 0x39
 800cc14:	210e      	movs	r1, #14
 800cc16:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800cc1a:	f00f fbef 	bl	801c3fc <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800cc1e:	4632      	mov	r2, r6
 800cc20:	4908      	ldr	r1, [pc, #32]	; (800cc44 <CRI_Axes_Measure+0x1b4>)
 800cc22:	4620      	mov	r0, r4
 800cc24:	f012 fe0a 	bl	801f83c <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cc28:	2303      	movs	r3, #3
 800cc2a:	4622      	mov	r2, r4
 800cc2c:	210e      	movs	r1, #14
 800cc2e:	f240 106d 	movw	r0, #365	; 0x16d
 800cc32:	f00f fc3b 	bl	801c4ac <TFT_DisplayString>
		TFT_direction = 0x00;
 800cc36:	2300      	movs	r3, #0
 800cc38:	702b      	strb	r3, [r5, #0]
}
 800cc3a:	e793      	b.n	800cb64 <CRI_Axes_Measure+0xd4>
 800cc3c:	200001c0 	.word	0x200001c0
 800cc40:	200001b0 	.word	0x200001b0
 800cc44:	080244b1 	.word	0x080244b1
 800cc48:	20005690 	.word	0x20005690

0800cc4c <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800cc4c:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800cc4e:	4604      	mov	r4, r0
 800cc50:	2800      	cmp	r0, #0
 800cc52:	f040 811f 	bne.w	800ce94 <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800cc56:	488e      	ldr	r0, [pc, #568]	; (800ce90 <CRI_Axes_Text+0x244>)
 800cc58:	f00f fb06 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800cc5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cc60:	f00f fb08 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cc64:	2063      	movs	r0, #99	; 0x63
 800cc66:	f00f fb0b 	bl	801c280 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800cc6a:	2252      	movs	r2, #82	; 0x52
 800cc6c:	f240 119f 	movw	r1, #415	; 0x19f
 800cc70:	2018      	movs	r0, #24
 800cc72:	f00f fbc3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800cc76:	2231      	movs	r2, #49	; 0x31
 800cc78:	f240 119f 	movw	r1, #415	; 0x19f
 800cc7c:	201e      	movs	r0, #30
 800cc7e:	f00f fbbd 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800cc82:	2252      	movs	r2, #82	; 0x52
 800cc84:	f240 119f 	movw	r1, #415	; 0x19f
 800cc88:	2028      	movs	r0, #40	; 0x28
 800cc8a:	f00f fbb7 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800cc8e:	2232      	movs	r2, #50	; 0x32
 800cc90:	f240 119f 	movw	r1, #415	; 0x19f
 800cc94:	202e      	movs	r0, #46	; 0x2e
 800cc96:	f00f fbb1 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800cc9a:	2252      	movs	r2, #82	; 0x52
 800cc9c:	f240 119f 	movw	r1, #415	; 0x19f
 800cca0:	2038      	movs	r0, #56	; 0x38
 800cca2:	f00f fbab 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800cca6:	2233      	movs	r2, #51	; 0x33
 800cca8:	f240 119f 	movw	r1, #415	; 0x19f
 800ccac:	203e      	movs	r0, #62	; 0x3e
 800ccae:	f00f fba5 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800ccb2:	2252      	movs	r2, #82	; 0x52
 800ccb4:	f240 119f 	movw	r1, #415	; 0x19f
 800ccb8:	2048      	movs	r0, #72	; 0x48
 800ccba:	f00f fb9f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800ccbe:	2234      	movs	r2, #52	; 0x34
 800ccc0:	f240 119f 	movw	r1, #415	; 0x19f
 800ccc4:	204e      	movs	r0, #78	; 0x4e
 800ccc6:	f00f fb99 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800ccca:	2252      	movs	r2, #82	; 0x52
 800cccc:	f240 119f 	movw	r1, #415	; 0x19f
 800ccd0:	2058      	movs	r0, #88	; 0x58
 800ccd2:	f00f fb93 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800ccd6:	2235      	movs	r2, #53	; 0x35
 800ccd8:	f240 119f 	movw	r1, #415	; 0x19f
 800ccdc:	205e      	movs	r0, #94	; 0x5e
 800ccde:	f00f fb8d 	bl	801c3fc <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800cce2:	2252      	movs	r2, #82	; 0x52
 800cce4:	f240 119f 	movw	r1, #415	; 0x19f
 800cce8:	2068      	movs	r0, #104	; 0x68
 800ccea:	f00f fb87 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800ccee:	2236      	movs	r2, #54	; 0x36
 800ccf0:	f240 119f 	movw	r1, #415	; 0x19f
 800ccf4:	206e      	movs	r0, #110	; 0x6e
 800ccf6:	f00f fb81 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800ccfa:	2252      	movs	r2, #82	; 0x52
 800ccfc:	f240 119f 	movw	r1, #415	; 0x19f
 800cd00:	2078      	movs	r0, #120	; 0x78
 800cd02:	f00f fb7b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800cd06:	2237      	movs	r2, #55	; 0x37
 800cd08:	f240 119f 	movw	r1, #415	; 0x19f
 800cd0c:	207e      	movs	r0, #126	; 0x7e
 800cd0e:	f00f fb75 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800cd12:	2252      	movs	r2, #82	; 0x52
 800cd14:	f240 119f 	movw	r1, #415	; 0x19f
 800cd18:	2088      	movs	r0, #136	; 0x88
 800cd1a:	f00f fb6f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800cd1e:	2238      	movs	r2, #56	; 0x38
 800cd20:	f240 119f 	movw	r1, #415	; 0x19f
 800cd24:	208e      	movs	r0, #142	; 0x8e
 800cd26:	f00f fb69 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800cd2a:	2252      	movs	r2, #82	; 0x52
 800cd2c:	f240 119f 	movw	r1, #415	; 0x19f
 800cd30:	2098      	movs	r0, #152	; 0x98
 800cd32:	f00f fb63 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800cd36:	2239      	movs	r2, #57	; 0x39
 800cd38:	f240 119f 	movw	r1, #415	; 0x19f
 800cd3c:	209e      	movs	r0, #158	; 0x9e
 800cd3e:	f00f fb5d 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800cd42:	2231      	movs	r2, #49	; 0x31
 800cd44:	f240 119f 	movw	r1, #415	; 0x19f
 800cd48:	20ad      	movs	r0, #173	; 0xad
 800cd4a:	f00f fb57 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800cd4e:	2252      	movs	r2, #82	; 0x52
 800cd50:	f240 119f 	movw	r1, #415	; 0x19f
 800cd54:	20a8      	movs	r0, #168	; 0xa8
 800cd56:	f00f fb51 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800cd5a:	2230      	movs	r2, #48	; 0x30
 800cd5c:	f240 119f 	movw	r1, #415	; 0x19f
 800cd60:	20b1      	movs	r0, #177	; 0xb1
 800cd62:	f00f fb4b 	bl	801c3fc <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800cd66:	2231      	movs	r2, #49	; 0x31
 800cd68:	f240 119f 	movw	r1, #415	; 0x19f
 800cd6c:	20bd      	movs	r0, #189	; 0xbd
 800cd6e:	f00f fb45 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800cd72:	2252      	movs	r2, #82	; 0x52
 800cd74:	f240 119f 	movw	r1, #415	; 0x19f
 800cd78:	20b8      	movs	r0, #184	; 0xb8
 800cd7a:	f00f fb3f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800cd7e:	2231      	movs	r2, #49	; 0x31
 800cd80:	f240 119f 	movw	r1, #415	; 0x19f
 800cd84:	20c2      	movs	r0, #194	; 0xc2
 800cd86:	f00f fb39 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800cd8a:	2231      	movs	r2, #49	; 0x31
 800cd8c:	f240 119f 	movw	r1, #415	; 0x19f
 800cd90:	20cd      	movs	r0, #205	; 0xcd
 800cd92:	f00f fb33 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800cd96:	2252      	movs	r2, #82	; 0x52
 800cd98:	f240 119f 	movw	r1, #415	; 0x19f
 800cd9c:	20c8      	movs	r0, #200	; 0xc8
 800cd9e:	f00f fb2d 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800cda2:	2232      	movs	r2, #50	; 0x32
 800cda4:	f240 119f 	movw	r1, #415	; 0x19f
 800cda8:	20d1      	movs	r0, #209	; 0xd1
 800cdaa:	f00f fb27 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800cdae:	2231      	movs	r2, #49	; 0x31
 800cdb0:	f240 119f 	movw	r1, #415	; 0x19f
 800cdb4:	20dd      	movs	r0, #221	; 0xdd
 800cdb6:	f00f fb21 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800cdba:	2252      	movs	r2, #82	; 0x52
 800cdbc:	f240 119f 	movw	r1, #415	; 0x19f
 800cdc0:	20d8      	movs	r0, #216	; 0xd8
 800cdc2:	f00f fb1b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800cdc6:	2233      	movs	r2, #51	; 0x33
 800cdc8:	f240 119f 	movw	r1, #415	; 0x19f
 800cdcc:	20e1      	movs	r0, #225	; 0xe1
 800cdce:	f00f fb15 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800cdd2:	2231      	movs	r2, #49	; 0x31
 800cdd4:	f240 119f 	movw	r1, #415	; 0x19f
 800cdd8:	20ed      	movs	r0, #237	; 0xed
 800cdda:	f00f fb0f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800cdde:	2252      	movs	r2, #82	; 0x52
 800cde0:	f240 119f 	movw	r1, #415	; 0x19f
 800cde4:	20e8      	movs	r0, #232	; 0xe8
 800cde6:	f00f fb09 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800cdea:	2234      	movs	r2, #52	; 0x34
 800cdec:	f240 119f 	movw	r1, #415	; 0x19f
 800cdf0:	20f1      	movs	r0, #241	; 0xf1
 800cdf2:	f00f fb03 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800cdf6:	2231      	movs	r2, #49	; 0x31
 800cdf8:	f240 119f 	movw	r1, #415	; 0x19f
 800cdfc:	20fd      	movs	r0, #253	; 0xfd
 800cdfe:	f00f fafd 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800ce02:	2252      	movs	r2, #82	; 0x52
 800ce04:	f240 119f 	movw	r1, #415	; 0x19f
 800ce08:	20f8      	movs	r0, #248	; 0xf8
 800ce0a:	f00f faf7 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800ce0e:	2235      	movs	r2, #53	; 0x35
 800ce10:	f240 119f 	movw	r1, #415	; 0x19f
 800ce14:	f240 1001 	movw	r0, #257	; 0x101
 800ce18:	f00f faf0 	bl	801c3fc <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800ce1c:	2230      	movs	r2, #48	; 0x30
 800ce1e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800ce22:	2005      	movs	r0, #5
 800ce24:	f00f faea 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800ce28:	2232      	movs	r2, #50	; 0x32
 800ce2a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800ce2e:	2001      	movs	r0, #1
 800ce30:	f00f fae4 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800ce34:	2235      	movs	r2, #53	; 0x35
 800ce36:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800ce3a:	2007      	movs	r0, #7
 800ce3c:	f00f fade 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800ce40:	2235      	movs	r2, #53	; 0x35
 800ce42:	f240 1101 	movw	r1, #257	; 0x101
 800ce46:	2001      	movs	r0, #1
 800ce48:	f00f fad8 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800ce4c:	2230      	movs	r2, #48	; 0x30
 800ce4e:	f240 1101 	movw	r1, #257	; 0x101
 800ce52:	2007      	movs	r0, #7
 800ce54:	f00f fad2 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800ce58:	2237      	movs	r2, #55	; 0x37
 800ce5a:	21b5      	movs	r1, #181	; 0xb5
 800ce5c:	2001      	movs	r0, #1
 800ce5e:	f00f facd 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800ce62:	2235      	movs	r2, #53	; 0x35
 800ce64:	21b5      	movs	r1, #181	; 0xb5
 800ce66:	2007      	movs	r0, #7
 800ce68:	f00f fac8 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	2231      	movs	r2, #49	; 0x31
 800ce70:	2169      	movs	r1, #105	; 0x69
 800ce72:	f00f fac3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800ce76:	2230      	movs	r2, #48	; 0x30
 800ce78:	2169      	movs	r1, #105	; 0x69
 800ce7a:	2004      	movs	r0, #4
 800ce7c:	f00f fabe 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800ce80:	2230      	movs	r2, #48	; 0x30
 800ce82:	2169      	movs	r1, #105	; 0x69
 800ce84:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800ce86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800ce8a:	f00f bab7 	b.w	801c3fc <TFT_DrawChar>
 800ce8e:	bf00      	nop
 800ce90:	20000210 	.word	0x20000210
 800ce94:	4d98      	ldr	r5, [pc, #608]	; (800d0f8 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800ce96:	2801      	cmp	r0, #1
 800ce98:	bf0c      	ite	eq
 800ce9a:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800ce9c:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800ce9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800cea2:	bf18      	it	ne
 800cea4:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cea6:	f00f f9e5 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ceaa:	2063      	movs	r0, #99	; 0x63
 800ceac:	f00f f9e8 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800ceb0:	4892      	ldr	r0, [pc, #584]	; (800d0fc <CRI_Axes_Text+0x4b0>)
 800ceb2:	f00f f9d9 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800ceb6:	2252      	movs	r2, #82	; 0x52
 800ceb8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cebc:	2057      	movs	r0, #87	; 0x57
 800cebe:	f00f fa9d 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800cec2:	2231      	movs	r2, #49	; 0x31
 800cec4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cec8:	205d      	movs	r0, #93	; 0x5d
 800ceca:	f00f fa97 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800cece:	2252      	movs	r2, #82	; 0x52
 800ced0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ced4:	206d      	movs	r0, #109	; 0x6d
 800ced6:	f00f fa91 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800ceda:	2232      	movs	r2, #50	; 0x32
 800cedc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cee0:	2073      	movs	r0, #115	; 0x73
 800cee2:	f00f fa8b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800cee6:	2252      	movs	r2, #82	; 0x52
 800cee8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ceec:	2083      	movs	r0, #131	; 0x83
 800ceee:	f00f fa85 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800cef2:	2233      	movs	r2, #51	; 0x33
 800cef4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cef8:	2089      	movs	r0, #137	; 0x89
 800cefa:	f00f fa7f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800cefe:	2252      	movs	r2, #82	; 0x52
 800cf00:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf04:	2099      	movs	r0, #153	; 0x99
 800cf06:	f00f fa79 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800cf0a:	2234      	movs	r2, #52	; 0x34
 800cf0c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf10:	209f      	movs	r0, #159	; 0x9f
 800cf12:	f00f fa73 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800cf16:	2252      	movs	r2, #82	; 0x52
 800cf18:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf1c:	20af      	movs	r0, #175	; 0xaf
 800cf1e:	f00f fa6d 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800cf22:	2235      	movs	r2, #53	; 0x35
 800cf24:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf28:	20b5      	movs	r0, #181	; 0xb5
 800cf2a:	f00f fa67 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800cf2e:	2252      	movs	r2, #82	; 0x52
 800cf30:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf34:	20c5      	movs	r0, #197	; 0xc5
 800cf36:	f00f fa61 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800cf3a:	2236      	movs	r2, #54	; 0x36
 800cf3c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf40:	20cb      	movs	r0, #203	; 0xcb
 800cf42:	f00f fa5b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800cf46:	2252      	movs	r2, #82	; 0x52
 800cf48:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf4c:	20db      	movs	r0, #219	; 0xdb
 800cf4e:	f00f fa55 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800cf52:	2237      	movs	r2, #55	; 0x37
 800cf54:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf58:	20e1      	movs	r0, #225	; 0xe1
 800cf5a:	f00f fa4f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800cf5e:	2252      	movs	r2, #82	; 0x52
 800cf60:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf64:	20f1      	movs	r0, #241	; 0xf1
 800cf66:	f00f fa49 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800cf6a:	2238      	movs	r2, #56	; 0x38
 800cf6c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf70:	20f7      	movs	r0, #247	; 0xf7
 800cf72:	f00f fa43 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800cf76:	2252      	movs	r2, #82	; 0x52
 800cf78:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf7c:	f240 1007 	movw	r0, #263	; 0x107
 800cf80:	f00f fa3c 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800cf84:	2239      	movs	r2, #57	; 0x39
 800cf86:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf8a:	f240 100d 	movw	r0, #269	; 0x10d
 800cf8e:	f00f fa35 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800cf92:	2231      	movs	r2, #49	; 0x31
 800cf94:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cf98:	f44f 7091 	mov.w	r0, #290	; 0x122
 800cf9c:	f00f fa2e 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800cfa0:	2252      	movs	r2, #82	; 0x52
 800cfa2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cfa6:	f240 101d 	movw	r0, #285	; 0x11d
 800cfaa:	f00f fa27 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800cfae:	2230      	movs	r2, #48	; 0x30
 800cfb0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cfb4:	f44f 7093 	mov.w	r0, #294	; 0x126
 800cfb8:	f00f fa20 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800cfbc:	2231      	movs	r2, #49	; 0x31
 800cfbe:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cfc2:	f44f 709c 	mov.w	r0, #312	; 0x138
 800cfc6:	f00f fa19 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800cfca:	2252      	movs	r2, #82	; 0x52
 800cfcc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cfd0:	f240 1033 	movw	r0, #307	; 0x133
 800cfd4:	f00f fa12 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800cfd8:	2231      	movs	r2, #49	; 0x31
 800cfda:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cfde:	f240 103d 	movw	r0, #317	; 0x13d
 800cfe2:	f00f fa0b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800cfe6:	2231      	movs	r2, #49	; 0x31
 800cfe8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cfec:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800cff0:	f00f fa04 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800cff4:	2252      	movs	r2, #82	; 0x52
 800cff6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cffa:	f240 1049 	movw	r0, #329	; 0x149
 800cffe:	f00f f9fd 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d002:	2232      	movs	r2, #50	; 0x32
 800d004:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d008:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d00c:	f00f f9f6 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800d010:	2231      	movs	r2, #49	; 0x31
 800d012:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d016:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d01a:	f00f f9ef 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d01e:	2252      	movs	r2, #82	; 0x52
 800d020:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d024:	f240 105f 	movw	r0, #351	; 0x15f
 800d028:	f00f f9e8 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d02c:	2233      	movs	r2, #51	; 0x33
 800d02e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d032:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d036:	f00f f9e1 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800d03a:	2231      	movs	r2, #49	; 0x31
 800d03c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d040:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d044:	f00f f9da 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d048:	2252      	movs	r2, #82	; 0x52
 800d04a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d04e:	f240 1075 	movw	r0, #373	; 0x175
 800d052:	f00f f9d3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d056:	2234      	movs	r2, #52	; 0x34
 800d058:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d05c:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d060:	f00f f9cc 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800d064:	2231      	movs	r2, #49	; 0x31
 800d066:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d06a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d06e:	f00f f9c5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d072:	2252      	movs	r2, #82	; 0x52
 800d074:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d078:	f240 108b 	movw	r0, #395	; 0x18b
 800d07c:	f00f f9be 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d080:	2235      	movs	r2, #53	; 0x35
 800d082:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d086:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d08a:	f00f f9b7 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800d08e:	2230      	movs	r2, #48	; 0x30
 800d090:	21fa      	movs	r1, #250	; 0xfa
 800d092:	2041      	movs	r0, #65	; 0x41
 800d094:	f00f f9b2 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800d098:	2232      	movs	r2, #50	; 0x32
 800d09a:	21ca      	movs	r1, #202	; 0xca
 800d09c:	203a      	movs	r0, #58	; 0x3a
 800d09e:	f00f f9ad 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d0a2:	2235      	movs	r2, #53	; 0x35
 800d0a4:	21ca      	movs	r1, #202	; 0xca
 800d0a6:	2041      	movs	r0, #65	; 0x41
 800d0a8:	f00f f9a8 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800d0ac:	2235      	movs	r2, #53	; 0x35
 800d0ae:	2195      	movs	r1, #149	; 0x95
 800d0b0:	203a      	movs	r0, #58	; 0x3a
 800d0b2:	f00f f9a3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d0b6:	2230      	movs	r2, #48	; 0x30
 800d0b8:	2195      	movs	r1, #149	; 0x95
 800d0ba:	2041      	movs	r0, #65	; 0x41
 800d0bc:	f00f f99e 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800d0c0:	2237      	movs	r2, #55	; 0x37
 800d0c2:	2160      	movs	r1, #96	; 0x60
 800d0c4:	203a      	movs	r0, #58	; 0x3a
 800d0c6:	f00f f999 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d0ca:	2235      	movs	r2, #53	; 0x35
 800d0cc:	2160      	movs	r1, #96	; 0x60
 800d0ce:	2041      	movs	r0, #65	; 0x41
 800d0d0:	f00f f994 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800d0d4:	2231      	movs	r2, #49	; 0x31
 800d0d6:	212b      	movs	r1, #43	; 0x2b
 800d0d8:	2039      	movs	r0, #57	; 0x39
 800d0da:	f00f f98f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d0de:	2230      	movs	r2, #48	; 0x30
 800d0e0:	212b      	movs	r1, #43	; 0x2b
 800d0e2:	203e      	movs	r0, #62	; 0x3e
 800d0e4:	f00f f98a 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d0e8:	2230      	movs	r2, #48	; 0x30
 800d0ea:	212b      	movs	r1, #43	; 0x2b
 800d0ec:	2043      	movs	r0, #67	; 0x43
 800d0ee:	f00f f985 	bl	801c3fc <TFT_DrawChar>
		TFT_direction = 0x00;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	702b      	strb	r3, [r5, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20005690 	.word	0x20005690
 800d0fc:	20000210 	.word	0x20000210

0800d100 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d104:	ed2d 8b02 	vpush	{d8}
 800d108:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800d10a:	ae06      	add	r6, sp, #24
 800d10c:	2300      	movs	r3, #0
{
 800d10e:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800d110:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800d114:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d116:	2800      	cmp	r0, #0
 800d118:	f040 82de 	bne.w	800d6d8 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d11c:	f991 3000 	ldrsb.w	r3, [r1]
 800d120:	2b00      	cmp	r3, #0
 800d122:	f2c0 826f 	blt.w	800d604 <CRI_chart+0x504>
 800d126:	2b64      	cmp	r3, #100	; 0x64
 800d128:	f300 826f 	bgt.w	800d60a <CRI_chart+0x50a>
 800d12c:	ee07 3a90 	vmov	s15, r3
 800d130:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800d510 <CRI_chart+0x410>
 800d134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d138:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d13c:	eddf 7af5 	vldr	s15, [pc, #980]	; 800d514 <CRI_chart+0x414>
 800d140:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800d518 <CRI_chart+0x418>
 800d144:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d14c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d150:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d154:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	2222      	movs	r2, #34	; 0x22
 800d15c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d160:	2018      	movs	r0, #24
 800d162:	f00e fe58 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d166:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f2c0 8250 	blt.w	800d610 <CRI_chart+0x510>
 800d170:	2b64      	cmp	r3, #100	; 0x64
 800d172:	f300 8250 	bgt.w	800d616 <CRI_chart+0x516>
 800d176:	ee07 3a90 	vmov	s15, r3
 800d17a:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800d510 <CRI_chart+0x410>
 800d17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d182:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d186:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800d514 <CRI_chart+0x414>
 800d18a:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800d518 <CRI_chart+0x418>
 800d18e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d196:	edcd 7a03 	vstr	s15, [sp, #12]
 800d19a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d19e:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	2232      	movs	r2, #50	; 0x32
 800d1a6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d1aa:	2028      	movs	r0, #40	; 0x28
 800d1ac:	f00e fe33 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d1b0:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f2c0 8231 	blt.w	800d61c <CRI_chart+0x51c>
 800d1ba:	2b64      	cmp	r3, #100	; 0x64
 800d1bc:	f300 8231 	bgt.w	800d622 <CRI_chart+0x522>
 800d1c0:	ee07 3a90 	vmov	s15, r3
 800d1c4:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800d510 <CRI_chart+0x410>
 800d1c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d1d0:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800d514 <CRI_chart+0x414>
 800d1d4:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800d518 <CRI_chart+0x418>
 800d1d8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1e0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d1e4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d1e8:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	2242      	movs	r2, #66	; 0x42
 800d1f0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d1f4:	2038      	movs	r0, #56	; 0x38
 800d1f6:	f00e fe0e 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d1fa:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f2c0 8212 	blt.w	800d628 <CRI_chart+0x528>
 800d204:	2b64      	cmp	r3, #100	; 0x64
 800d206:	f300 8212 	bgt.w	800d62e <CRI_chart+0x52e>
 800d20a:	ee07 3a90 	vmov	s15, r3
 800d20e:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800d510 <CRI_chart+0x410>
 800d212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d216:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d21a:	eddf 7abe 	vldr	s15, [pc, #760]	; 800d514 <CRI_chart+0x414>
 800d21e:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800d518 <CRI_chart+0x418>
 800d222:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d22a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d22e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d232:	f241 430f 	movw	r3, #5135	; 0x140f
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	2252      	movs	r2, #82	; 0x52
 800d23a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d23e:	2048      	movs	r0, #72	; 0x48
 800d240:	f00e fde9 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d244:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f2c0 81f3 	blt.w	800d634 <CRI_chart+0x534>
 800d24e:	2b64      	cmp	r3, #100	; 0x64
 800d250:	f300 81f3 	bgt.w	800d63a <CRI_chart+0x53a>
 800d254:	ee07 3a90 	vmov	s15, r3
 800d258:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d510 <CRI_chart+0x410>
 800d25c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d260:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d264:	eddf 7aab 	vldr	s15, [pc, #684]	; 800d514 <CRI_chart+0x414>
 800d268:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d518 <CRI_chart+0x418>
 800d26c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d274:	edcd 7a03 	vstr	s15, [sp, #12]
 800d278:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d27c:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	2262      	movs	r2, #98	; 0x62
 800d284:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d288:	2058      	movs	r0, #88	; 0x58
 800d28a:	f00e fdc4 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d28e:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d292:	2b00      	cmp	r3, #0
 800d294:	f2c0 81d4 	blt.w	800d640 <CRI_chart+0x540>
 800d298:	2b64      	cmp	r3, #100	; 0x64
 800d29a:	f300 81d4 	bgt.w	800d646 <CRI_chart+0x546>
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800d510 <CRI_chart+0x410>
 800d2a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2ae:	eddf 7a99 	vldr	s15, [pc, #612]	; 800d514 <CRI_chart+0x414>
 800d2b2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800d518 <CRI_chart+0x418>
 800d2b6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2be:	edcd 7a03 	vstr	s15, [sp, #12]
 800d2c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d2c6:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	2272      	movs	r2, #114	; 0x72
 800d2ce:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d2d2:	2068      	movs	r0, #104	; 0x68
 800d2d4:	f00e fd9f 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d2d8:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f2c0 81b5 	blt.w	800d64c <CRI_chart+0x54c>
 800d2e2:	2b64      	cmp	r3, #100	; 0x64
 800d2e4:	f300 81b5 	bgt.w	800d652 <CRI_chart+0x552>
 800d2e8:	ee07 3a90 	vmov	s15, r3
 800d2ec:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d510 <CRI_chart+0x410>
 800d2f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2f8:	eddf 7a86 	vldr	s15, [pc, #536]	; 800d514 <CRI_chart+0x414>
 800d2fc:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800d518 <CRI_chart+0x418>
 800d300:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d308:	edcd 7a03 	vstr	s15, [sp, #12]
 800d30c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d310:	f248 4357 	movw	r3, #33879	; 0x8457
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	2282      	movs	r2, #130	; 0x82
 800d318:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d31c:	2078      	movs	r0, #120	; 0x78
 800d31e:	f00e fd7a 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d322:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f2c0 8196 	blt.w	800d658 <CRI_chart+0x558>
 800d32c:	2b64      	cmp	r3, #100	; 0x64
 800d32e:	f300 8196 	bgt.w	800d65e <CRI_chart+0x55e>
 800d332:	ee07 3a90 	vmov	s15, r3
 800d336:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800d510 <CRI_chart+0x410>
 800d33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d33e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d342:	eddf 7a74 	vldr	s15, [pc, #464]	; 800d514 <CRI_chart+0x414>
 800d346:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800d518 <CRI_chart+0x418>
 800d34a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d352:	edcd 7a03 	vstr	s15, [sp, #12]
 800d356:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d35a:	f24a 4377 	movw	r3, #42103	; 0xa477
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	2292      	movs	r2, #146	; 0x92
 800d362:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d366:	2088      	movs	r0, #136	; 0x88
 800d368:	f00e fd55 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d36c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	f2c0 8177 	blt.w	800d664 <CRI_chart+0x564>
 800d376:	2b64      	cmp	r3, #100	; 0x64
 800d378:	f300 8177 	bgt.w	800d66a <CRI_chart+0x56a>
 800d37c:	ee07 3a90 	vmov	s15, r3
 800d380:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800d510 <CRI_chart+0x410>
 800d384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d388:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d38c:	eddf 7a61 	vldr	s15, [pc, #388]	; 800d514 <CRI_chart+0x414>
 800d390:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800d518 <CRI_chart+0x418>
 800d394:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d39c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d3a0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d3a4:	f24e 1365 	movw	r3, #57701	; 0xe165
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	22a2      	movs	r2, #162	; 0xa2
 800d3ac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d3b0:	2098      	movs	r0, #152	; 0x98
 800d3b2:	f00e fd30 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d3b6:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f2c0 8158 	blt.w	800d670 <CRI_chart+0x570>
 800d3c0:	2b64      	cmp	r3, #100	; 0x64
 800d3c2:	f300 8158 	bgt.w	800d676 <CRI_chart+0x576>
 800d3c6:	ee07 3a90 	vmov	s15, r3
 800d3ca:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800d510 <CRI_chart+0x410>
 800d3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d3d6:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800d514 <CRI_chart+0x414>
 800d3da:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800d518 <CRI_chart+0x418>
 800d3de:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3e6:	edcd 7a03 	vstr	s15, [sp, #12]
 800d3ea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d3ee:	f24e 7323 	movw	r3, #59171	; 0xe723
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	22b2      	movs	r2, #178	; 0xb2
 800d3f6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d3fa:	20a8      	movs	r0, #168	; 0xa8
 800d3fc:	f00e fd0b 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d400:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800d404:	2b00      	cmp	r3, #0
 800d406:	f2c0 8139 	blt.w	800d67c <CRI_chart+0x57c>
 800d40a:	2b64      	cmp	r3, #100	; 0x64
 800d40c:	f300 8139 	bgt.w	800d682 <CRI_chart+0x582>
 800d410:	ee07 3a90 	vmov	s15, r3
 800d414:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d510 <CRI_chart+0x410>
 800d418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d41c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d420:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800d514 <CRI_chart+0x414>
 800d424:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d518 <CRI_chart+0x418>
 800d428:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d42c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d430:	edcd 7a03 	vstr	s15, [sp, #12]
 800d434:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d438:	f241 4327 	movw	r3, #5159	; 0x1427
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	22c2      	movs	r2, #194	; 0xc2
 800d440:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d444:	20b8      	movs	r0, #184	; 0xb8
 800d446:	f00e fce6 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d44a:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f2c0 811a 	blt.w	800d688 <CRI_chart+0x588>
 800d454:	2b64      	cmp	r3, #100	; 0x64
 800d456:	f300 811a 	bgt.w	800d68e <CRI_chart+0x58e>
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800d510 <CRI_chart+0x410>
 800d462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d466:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d46a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d514 <CRI_chart+0x414>
 800d46e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d518 <CRI_chart+0x418>
 800d472:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d47a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d47e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d482:	f242 138d 	movw	r3, #8589	; 0x218d
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	22d2      	movs	r2, #210	; 0xd2
 800d48a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d48e:	20c8      	movs	r0, #200	; 0xc8
 800d490:	f00e fcc1 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d494:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f2c0 80fb 	blt.w	800d694 <CRI_chart+0x594>
 800d49e:	2b64      	cmp	r3, #100	; 0x64
 800d4a0:	f300 80fb 	bgt.w	800d69a <CRI_chart+0x59a>
 800d4a4:	ee07 3a90 	vmov	s15, r3
 800d4a8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d510 <CRI_chart+0x410>
 800d4ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4b4:	eddf 7a17 	vldr	s15, [pc, #92]	; 800d514 <CRI_chart+0x414>
 800d4b8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d518 <CRI_chart+0x418>
 800d4bc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4c4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4c8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d4cc:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	22e2      	movs	r2, #226	; 0xe2
 800d4d4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d4d8:	20d8      	movs	r0, #216	; 0xd8
 800d4da:	f00e fc9c 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d4de:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f2c0 80dc 	blt.w	800d6a0 <CRI_chart+0x5a0>
 800d4e8:	2b64      	cmp	r3, #100	; 0x64
 800d4ea:	f300 80dc 	bgt.w	800d6a6 <CRI_chart+0x5a6>
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800d510 <CRI_chart+0x410>
 800d4f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4fe:	eddf 7a05 	vldr	s15, [pc, #20]	; 800d514 <CRI_chart+0x414>
 800d502:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d518 <CRI_chart+0x418>
 800d506:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d50a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50e:	e00b      	b.n	800d528 <CRI_chart+0x428>
 800d510:	42c80000 	.word	0x42c80000
 800d514:	43cd0000 	.word	0x43cd0000
 800d518:	43988000 	.word	0x43988000
 800d51c:	42c80000 	.word	0x42c80000
 800d520:	43cd0000 	.word	0x43cd0000
 800d524:	43988000 	.word	0x43988000
 800d528:	edcd 7a03 	vstr	s15, [sp, #12]
 800d52c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d530:	f641 3346 	movw	r3, #6982	; 0x1b46
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	22f2      	movs	r2, #242	; 0xf2
 800d538:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d53c:	20e8      	movs	r0, #232	; 0xe8
 800d53e:	f00e fc6a 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d542:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800d546:	2b00      	cmp	r3, #0
 800d548:	f2c0 80b0 	blt.w	800d6ac <CRI_chart+0x5ac>
 800d54c:	2b64      	cmp	r3, #100	; 0x64
 800d54e:	f300 80b0 	bgt.w	800d6b2 <CRI_chart+0x5b2>
 800d552:	ee07 3a90 	vmov	s15, r3
 800d556:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800d51c <CRI_chart+0x41c>
 800d55a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d55e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d562:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800d520 <CRI_chart+0x420>
 800d566:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800d524 <CRI_chart+0x424>
 800d56a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d572:	edcd 7a03 	vstr	s15, [sp, #12]
 800d576:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800d57a:	4f52      	ldr	r7, [pc, #328]	; (800d6c4 <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d57c:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800d6c8 <CRI_chart+0x5c8>
 800d580:	eddf 8a52 	vldr	s17, [pc, #328]	; 800d6cc <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d584:	f24f 6311 	movw	r3, #62993	; 0xf611
 800d588:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	20f8      	movs	r0, #248	; 0xf8
 800d590:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d594:	f00e fc3f 	bl	801be16 <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800d598:	484d      	ldr	r0, [pc, #308]	; (800d6d0 <CRI_chart+0x5d0>)
 800d59a:	f00e fe65 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d59e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d5a2:	f00e fe67 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d5a6:	2063      	movs	r0, #99	; 0x63
 800d5a8:	f00e fe6a 	bl	801c280 <TFT_SetBackColor>
 800d5ac:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800d5ae:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f012 f941 	bl	801f83c <sprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d5ba:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	db7a      	blt.n	800d6b8 <CRI_chart+0x5b8>
 800d5c2:	2b64      	cmp	r3, #100	; 0x64
 800d5c4:	dc7b      	bgt.n	800d6be <CRI_chart+0x5be>
 800d5c6:	ee07 3a90 	vmov	s15, r3
 800d5ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5ce:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800d5d2:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d6d4 <CRI_chart+0x5d4>
 800d5d6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800d5da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5de:	edcd 7a03 	vstr	s15, [sp, #12]
 800d5e2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	3410      	adds	r4, #16
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	b2a4      	uxth	r4, r4
 800d5f0:	f00e ff5c 	bl	801c4ac <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800d5f4:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800d5f8:	d1d9      	bne.n	800d5ae <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800d5fa:	b006      	add	sp, #24
 800d5fc:	ecbd 8b02 	vpop	{d8}
 800d600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d604:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d608:	e5a4      	b.n	800d154 <CRI_chart+0x54>
 800d60a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d60e:	e5a1      	b.n	800d154 <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d610:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d614:	e5c3      	b.n	800d19e <CRI_chart+0x9e>
 800d616:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d61a:	e5c0      	b.n	800d19e <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d61c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d620:	e5e2      	b.n	800d1e8 <CRI_chart+0xe8>
 800d622:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d626:	e5df      	b.n	800d1e8 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d628:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d62c:	e601      	b.n	800d232 <CRI_chart+0x132>
 800d62e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d632:	e5fe      	b.n	800d232 <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d634:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d638:	e620      	b.n	800d27c <CRI_chart+0x17c>
 800d63a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d63e:	e61d      	b.n	800d27c <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d640:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d644:	e63f      	b.n	800d2c6 <CRI_chart+0x1c6>
 800d646:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d64a:	e63c      	b.n	800d2c6 <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d64c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d650:	e65e      	b.n	800d310 <CRI_chart+0x210>
 800d652:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d656:	e65b      	b.n	800d310 <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d658:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d65c:	e67d      	b.n	800d35a <CRI_chart+0x25a>
 800d65e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d662:	e67a      	b.n	800d35a <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d664:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d668:	e69c      	b.n	800d3a4 <CRI_chart+0x2a4>
 800d66a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d66e:	e699      	b.n	800d3a4 <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d670:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d674:	e6bb      	b.n	800d3ee <CRI_chart+0x2ee>
 800d676:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d67a:	e6b8      	b.n	800d3ee <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d67c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d680:	e6da      	b.n	800d438 <CRI_chart+0x338>
 800d682:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d686:	e6d7      	b.n	800d438 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d688:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d68c:	e6f9      	b.n	800d482 <CRI_chart+0x382>
 800d68e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d692:	e6f6      	b.n	800d482 <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d694:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d698:	e718      	b.n	800d4cc <CRI_chart+0x3cc>
 800d69a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d69e:	e715      	b.n	800d4cc <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d6a0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d6a4:	e744      	b.n	800d530 <CRI_chart+0x430>
 800d6a6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d6aa:	e741      	b.n	800d530 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d6ac:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d6b0:	e763      	b.n	800d57a <CRI_chart+0x47a>
 800d6b2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d6b6:	e760      	b.n	800d57a <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d6b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d6bc:	e793      	b.n	800d5e6 <CRI_chart+0x4e6>
 800d6be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d6c2:	e790      	b.n	800d5e6 <CRI_chart+0x4e6>
 800d6c4:	080244b1 	.word	0x080244b1
 800d6c8:	42c80000 	.word	0x42c80000
 800d6cc:	43988000 	.word	0x43988000
 800d6d0:	20000210 	.word	0x20000210
 800d6d4:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d6d8:	2801      	cmp	r0, #1
 800d6da:	4fed      	ldr	r7, [pc, #948]	; (800da90 <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800d6dc:	bf16      	itet	ne
 800d6de:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d6e0:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800d6e2:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800d6e4:	f991 3000 	ldrsb.w	r3, [r1]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f2c0 8260 	blt.w	800dbae <CRI_chart+0xaae>
 800d6ee:	2b64      	cmp	r3, #100	; 0x64
 800d6f0:	f300 825f 	bgt.w	800dbb2 <CRI_chart+0xab2>
 800d6f4:	ee07 3a90 	vmov	s15, r3
 800d6f8:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800da94 <CRI_chart+0x994>
 800d6fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d700:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d704:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800da98 <CRI_chart+0x998>
 800d708:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800da9c <CRI_chart+0x99c>
 800d70c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d714:	edcd 7a03 	vstr	s15, [sp, #12]
 800d718:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d71c:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	2262      	movs	r2, #98	; 0x62
 800d724:	23fc      	movs	r3, #252	; 0xfc
 800d726:	2057      	movs	r0, #87	; 0x57
 800d728:	f00e fb75 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800d72c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d730:	2b00      	cmp	r3, #0
 800d732:	f2c0 8240 	blt.w	800dbb6 <CRI_chart+0xab6>
 800d736:	2b64      	cmp	r3, #100	; 0x64
 800d738:	f300 823f 	bgt.w	800dbba <CRI_chart+0xaba>
 800d73c:	ee07 3a90 	vmov	s15, r3
 800d740:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800da94 <CRI_chart+0x994>
 800d744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d748:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d74c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800da98 <CRI_chart+0x998>
 800d750:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800da9c <CRI_chart+0x99c>
 800d754:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d75c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d760:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d764:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	2278      	movs	r2, #120	; 0x78
 800d76c:	23fc      	movs	r3, #252	; 0xfc
 800d76e:	206d      	movs	r0, #109	; 0x6d
 800d770:	f00e fb51 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800d774:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f2c0 8220 	blt.w	800dbbe <CRI_chart+0xabe>
 800d77e:	2b64      	cmp	r3, #100	; 0x64
 800d780:	f300 821f 	bgt.w	800dbc2 <CRI_chart+0xac2>
 800d784:	ee07 3a90 	vmov	s15, r3
 800d788:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800da94 <CRI_chart+0x994>
 800d78c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d790:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d794:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800da98 <CRI_chart+0x998>
 800d798:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800da9c <CRI_chart+0x99c>
 800d79c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d7a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d7a8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d7ac:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	228e      	movs	r2, #142	; 0x8e
 800d7b4:	23fc      	movs	r3, #252	; 0xfc
 800d7b6:	2083      	movs	r0, #131	; 0x83
 800d7b8:	f00e fb2d 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800d7bc:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f2c0 8200 	blt.w	800dbc6 <CRI_chart+0xac6>
 800d7c6:	2b64      	cmp	r3, #100	; 0x64
 800d7c8:	f300 81ff 	bgt.w	800dbca <CRI_chart+0xaca>
 800d7cc:	ee07 3a90 	vmov	s15, r3
 800d7d0:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800da94 <CRI_chart+0x994>
 800d7d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d7dc:	eddf 7aae 	vldr	s15, [pc, #696]	; 800da98 <CRI_chart+0x998>
 800d7e0:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800da9c <CRI_chart+0x99c>
 800d7e4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d7e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ec:	edcd 7a03 	vstr	s15, [sp, #12]
 800d7f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d7f4:	f241 430f 	movw	r3, #5135	; 0x140f
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	22a4      	movs	r2, #164	; 0xa4
 800d7fc:	23fc      	movs	r3, #252	; 0xfc
 800d7fe:	2099      	movs	r0, #153	; 0x99
 800d800:	f00e fb09 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800d804:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f2c0 81e0 	blt.w	800dbce <CRI_chart+0xace>
 800d80e:	2b64      	cmp	r3, #100	; 0x64
 800d810:	f300 81df 	bgt.w	800dbd2 <CRI_chart+0xad2>
 800d814:	ee07 3a90 	vmov	s15, r3
 800d818:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800da94 <CRI_chart+0x994>
 800d81c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d820:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d824:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800da98 <CRI_chart+0x998>
 800d828:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800da9c <CRI_chart+0x99c>
 800d82c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d834:	edcd 7a03 	vstr	s15, [sp, #12]
 800d838:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d83c:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	22ba      	movs	r2, #186	; 0xba
 800d844:	23fc      	movs	r3, #252	; 0xfc
 800d846:	20af      	movs	r0, #175	; 0xaf
 800d848:	f00e fae5 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800d84c:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d850:	2b00      	cmp	r3, #0
 800d852:	f2c0 81c0 	blt.w	800dbd6 <CRI_chart+0xad6>
 800d856:	2b64      	cmp	r3, #100	; 0x64
 800d858:	f300 81bf 	bgt.w	800dbda <CRI_chart+0xada>
 800d85c:	ee07 3a90 	vmov	s15, r3
 800d860:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800da94 <CRI_chart+0x994>
 800d864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d868:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d86c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800da98 <CRI_chart+0x998>
 800d870:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800da9c <CRI_chart+0x99c>
 800d874:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d87c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d880:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d884:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	22d0      	movs	r2, #208	; 0xd0
 800d88c:	23fc      	movs	r3, #252	; 0xfc
 800d88e:	20c5      	movs	r0, #197	; 0xc5
 800d890:	f00e fac1 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800d894:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f2c0 81a0 	blt.w	800dbde <CRI_chart+0xade>
 800d89e:	2b64      	cmp	r3, #100	; 0x64
 800d8a0:	f300 819f 	bgt.w	800dbe2 <CRI_chart+0xae2>
 800d8a4:	ee07 3a90 	vmov	s15, r3
 800d8a8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800da94 <CRI_chart+0x994>
 800d8ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8b4:	eddf 7a78 	vldr	s15, [pc, #480]	; 800da98 <CRI_chart+0x998>
 800d8b8:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800da9c <CRI_chart+0x99c>
 800d8bc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8c4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d8c8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d8cc:	f248 4357 	movw	r3, #33879	; 0x8457
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	22e6      	movs	r2, #230	; 0xe6
 800d8d4:	23fc      	movs	r3, #252	; 0xfc
 800d8d6:	20db      	movs	r0, #219	; 0xdb
 800d8d8:	f00e fa9d 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800d8dc:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f2c0 8180 	blt.w	800dbe6 <CRI_chart+0xae6>
 800d8e6:	2b64      	cmp	r3, #100	; 0x64
 800d8e8:	f300 817f 	bgt.w	800dbea <CRI_chart+0xaea>
 800d8ec:	ee07 3a90 	vmov	s15, r3
 800d8f0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800da94 <CRI_chart+0x994>
 800d8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8fc:	eddf 7a66 	vldr	s15, [pc, #408]	; 800da98 <CRI_chart+0x998>
 800d900:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800da9c <CRI_chart+0x99c>
 800d904:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d90c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d910:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d914:	f24a 4377 	movw	r3, #42103	; 0xa477
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	23fc      	movs	r3, #252	; 0xfc
 800d91c:	461a      	mov	r2, r3
 800d91e:	20f1      	movs	r0, #241	; 0xf1
 800d920:	f00e fa79 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800d924:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f2c0 8160 	blt.w	800dbee <CRI_chart+0xaee>
 800d92e:	2b64      	cmp	r3, #100	; 0x64
 800d930:	f300 815f 	bgt.w	800dbf2 <CRI_chart+0xaf2>
 800d934:	ee07 3a90 	vmov	s15, r3
 800d938:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800da94 <CRI_chart+0x994>
 800d93c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d940:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d944:	eddf 7a54 	vldr	s15, [pc, #336]	; 800da98 <CRI_chart+0x998>
 800d948:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800da9c <CRI_chart+0x99c>
 800d94c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d954:	edcd 7a03 	vstr	s15, [sp, #12]
 800d958:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d95c:	f24e 1365 	movw	r3, #57701	; 0xe165
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d966:	23fc      	movs	r3, #252	; 0xfc
 800d968:	f240 1007 	movw	r0, #263	; 0x107
 800d96c:	f00e fa53 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800d970:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f2c0 813e 	blt.w	800dbf6 <CRI_chart+0xaf6>
 800d97a:	2b64      	cmp	r3, #100	; 0x64
 800d97c:	f300 813d 	bgt.w	800dbfa <CRI_chart+0xafa>
 800d980:	ee07 3a90 	vmov	s15, r3
 800d984:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800da94 <CRI_chart+0x994>
 800d988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d98c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d990:	eddf 7a41 	vldr	s15, [pc, #260]	; 800da98 <CRI_chart+0x998>
 800d994:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800da9c <CRI_chart+0x99c>
 800d998:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d99c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9a0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9a4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9a8:	f24e 7323 	movw	r3, #59171	; 0xe723
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d9b2:	23fc      	movs	r3, #252	; 0xfc
 800d9b4:	f240 101d 	movw	r0, #285	; 0x11d
 800d9b8:	f00e fa2d 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800d9bc:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f2c0 811c 	blt.w	800dbfe <CRI_chart+0xafe>
 800d9c6:	2b64      	cmp	r3, #100	; 0x64
 800d9c8:	f300 811b 	bgt.w	800dc02 <CRI_chart+0xb02>
 800d9cc:	ee07 3a90 	vmov	s15, r3
 800d9d0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800da94 <CRI_chart+0x994>
 800d9d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d9dc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800da98 <CRI_chart+0x998>
 800d9e0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800da9c <CRI_chart+0x99c>
 800d9e4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9ec:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9f4:	f241 4327 	movw	r3, #5159	; 0x1427
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800d9fe:	23fc      	movs	r3, #252	; 0xfc
 800da00:	f240 1033 	movw	r0, #307	; 0x133
 800da04:	f00e fa07 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800da08:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f2c0 80fa 	blt.w	800dc06 <CRI_chart+0xb06>
 800da12:	2b64      	cmp	r3, #100	; 0x64
 800da14:	f300 80f9 	bgt.w	800dc0a <CRI_chart+0xb0a>
 800da18:	ee07 3a90 	vmov	s15, r3
 800da1c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800da94 <CRI_chart+0x994>
 800da20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da28:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800da98 <CRI_chart+0x998>
 800da2c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800da9c <CRI_chart+0x99c>
 800da30:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da38:	edcd 7a03 	vstr	s15, [sp, #12]
 800da3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da40:	f242 138d 	movw	r3, #8589	; 0x218d
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800da4a:	23fc      	movs	r3, #252	; 0xfc
 800da4c:	f240 1049 	movw	r0, #329	; 0x149
 800da50:	f00e f9e1 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800da54:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f2c0 80d8 	blt.w	800dc0e <CRI_chart+0xb0e>
 800da5e:	2b64      	cmp	r3, #100	; 0x64
 800da60:	f300 80d7 	bgt.w	800dc12 <CRI_chart+0xb12>
 800da64:	ee07 3a90 	vmov	s15, r3
 800da68:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800da94 <CRI_chart+0x994>
 800da6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da74:	eddf 7a08 	vldr	s15, [pc, #32]	; 800da98 <CRI_chart+0x998>
 800da78:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800da9c <CRI_chart+0x99c>
 800da7c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da84:	edcd 7a03 	vstr	s15, [sp, #12]
 800da88:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da8c:	e008      	b.n	800daa0 <CRI_chart+0x9a0>
 800da8e:	bf00      	nop
 800da90:	20005690 	.word	0x20005690
 800da94:	42c80000 	.word	0x42c80000
 800da98:	437e0000 	.word	0x437e0000
 800da9c:	43520000 	.word	0x43520000
 800daa0:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800daaa:	23fc      	movs	r3, #252	; 0xfc
 800daac:	f240 105f 	movw	r0, #351	; 0x15f
 800dab0:	f00e f9b1 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800dab4:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f2c0 80ac 	blt.w	800dc16 <CRI_chart+0xb16>
 800dabe:	2b64      	cmp	r3, #100	; 0x64
 800dac0:	f300 80ab 	bgt.w	800dc1a <CRI_chart+0xb1a>
 800dac4:	ee07 3a90 	vmov	s15, r3
 800dac8:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800da94 <CRI_chart+0x994>
 800dacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dad0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dad4:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800da98 <CRI_chart+0x998>
 800dad8:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800da9c <CRI_chart+0x99c>
 800dadc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dae4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dae8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800daec:	f641 3346 	movw	r3, #6982	; 0x1b46
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800daf6:	23fc      	movs	r3, #252	; 0xfc
 800daf8:	f240 1075 	movw	r0, #373	; 0x175
 800dafc:	f00e f98b 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800db00:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800db04:	2b00      	cmp	r3, #0
 800db06:	f2c0 808a 	blt.w	800dc1e <CRI_chart+0xb1e>
 800db0a:	2b64      	cmp	r3, #100	; 0x64
 800db0c:	f300 8089 	bgt.w	800dc22 <CRI_chart+0xb22>
 800db10:	ee07 3a90 	vmov	s15, r3
 800db14:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800da94 <CRI_chart+0x994>
 800db18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db20:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800da98 <CRI_chart+0x998>
 800db24:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800da9c <CRI_chart+0x99c>
 800db28:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db30:	edcd 7a03 	vstr	s15, [sp, #12]
 800db34:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800db38:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800dc3c <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800db3c:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800dc30 <CRI_chart+0xb30>
 800db40:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800dc34 <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800db44:	f24f 6311 	movw	r3, #62993	; 0xf611
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800db4e:	23fc      	movs	r3, #252	; 0xfc
 800db50:	f240 108b 	movw	r0, #395	; 0x18b
 800db54:	f00e f95f 	bl	801be16 <TFT_FillRectangle>
 800db58:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800db5a:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800db5e:	4641      	mov	r1, r8
 800db60:	4630      	mov	r0, r6
 800db62:	f011 fe6b 	bl	801f83c <sprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800db66:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	db5b      	blt.n	800dc26 <CRI_chart+0xb26>
 800db6e:	2b64      	cmp	r3, #100	; 0x64
 800db70:	dc5b      	bgt.n	800dc2a <CRI_chart+0xb2a>
 800db72:	ee07 3a90 	vmov	s15, r3
 800db76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db7a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800db7e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dc38 <CRI_chart+0xb38>
 800db82:	eee7 7a68 	vfms.f32	s15, s14, s17
 800db86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db8a:	edcd 7a03 	vstr	s15, [sp, #12]
 800db8e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db92:	2303      	movs	r3, #3
 800db94:	4620      	mov	r0, r4
 800db96:	4632      	mov	r2, r6
 800db98:	3416      	adds	r4, #22
 800db9a:	f00e fc87 	bl	801c4ac <TFT_DisplayString>
 800db9e:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800dba0:	f240 13a1 	movw	r3, #417	; 0x1a1
 800dba4:	429c      	cmp	r4, r3
 800dba6:	d1d8      	bne.n	800db5a <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	703b      	strb	r3, [r7, #0]
}
 800dbac:	e525      	b.n	800d5fa <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800dbae:	21fe      	movs	r1, #254	; 0xfe
 800dbb0:	e5b4      	b.n	800d71c <CRI_chart+0x61c>
 800dbb2:	219a      	movs	r1, #154	; 0x9a
 800dbb4:	e5b2      	b.n	800d71c <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800dbb6:	21fe      	movs	r1, #254	; 0xfe
 800dbb8:	e5d4      	b.n	800d764 <CRI_chart+0x664>
 800dbba:	219a      	movs	r1, #154	; 0x9a
 800dbbc:	e5d2      	b.n	800d764 <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800dbbe:	21fe      	movs	r1, #254	; 0xfe
 800dbc0:	e5f4      	b.n	800d7ac <CRI_chart+0x6ac>
 800dbc2:	219a      	movs	r1, #154	; 0x9a
 800dbc4:	e5f2      	b.n	800d7ac <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800dbc6:	21fe      	movs	r1, #254	; 0xfe
 800dbc8:	e614      	b.n	800d7f4 <CRI_chart+0x6f4>
 800dbca:	219a      	movs	r1, #154	; 0x9a
 800dbcc:	e612      	b.n	800d7f4 <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800dbce:	21fe      	movs	r1, #254	; 0xfe
 800dbd0:	e634      	b.n	800d83c <CRI_chart+0x73c>
 800dbd2:	219a      	movs	r1, #154	; 0x9a
 800dbd4:	e632      	b.n	800d83c <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800dbd6:	21fe      	movs	r1, #254	; 0xfe
 800dbd8:	e654      	b.n	800d884 <CRI_chart+0x784>
 800dbda:	219a      	movs	r1, #154	; 0x9a
 800dbdc:	e652      	b.n	800d884 <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800dbde:	21fe      	movs	r1, #254	; 0xfe
 800dbe0:	e674      	b.n	800d8cc <CRI_chart+0x7cc>
 800dbe2:	219a      	movs	r1, #154	; 0x9a
 800dbe4:	e672      	b.n	800d8cc <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800dbe6:	21fe      	movs	r1, #254	; 0xfe
 800dbe8:	e694      	b.n	800d914 <CRI_chart+0x814>
 800dbea:	219a      	movs	r1, #154	; 0x9a
 800dbec:	e692      	b.n	800d914 <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dbee:	21fe      	movs	r1, #254	; 0xfe
 800dbf0:	e6b4      	b.n	800d95c <CRI_chart+0x85c>
 800dbf2:	219a      	movs	r1, #154	; 0x9a
 800dbf4:	e6b2      	b.n	800d95c <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800dbf6:	21fe      	movs	r1, #254	; 0xfe
 800dbf8:	e6d6      	b.n	800d9a8 <CRI_chart+0x8a8>
 800dbfa:	219a      	movs	r1, #154	; 0x9a
 800dbfc:	e6d4      	b.n	800d9a8 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800dbfe:	21fe      	movs	r1, #254	; 0xfe
 800dc00:	e6f8      	b.n	800d9f4 <CRI_chart+0x8f4>
 800dc02:	219a      	movs	r1, #154	; 0x9a
 800dc04:	e6f6      	b.n	800d9f4 <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800dc06:	21fe      	movs	r1, #254	; 0xfe
 800dc08:	e71a      	b.n	800da40 <CRI_chart+0x940>
 800dc0a:	219a      	movs	r1, #154	; 0x9a
 800dc0c:	e718      	b.n	800da40 <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800dc0e:	21fe      	movs	r1, #254	; 0xfe
 800dc10:	e746      	b.n	800daa0 <CRI_chart+0x9a0>
 800dc12:	219a      	movs	r1, #154	; 0x9a
 800dc14:	e744      	b.n	800daa0 <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800dc16:	21fe      	movs	r1, #254	; 0xfe
 800dc18:	e768      	b.n	800daec <CRI_chart+0x9ec>
 800dc1a:	219a      	movs	r1, #154	; 0x9a
 800dc1c:	e766      	b.n	800daec <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800dc1e:	21fe      	movs	r1, #254	; 0xfe
 800dc20:	e78a      	b.n	800db38 <CRI_chart+0xa38>
 800dc22:	219a      	movs	r1, #154	; 0x9a
 800dc24:	e788      	b.n	800db38 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800dc26:	21f4      	movs	r1, #244	; 0xf4
 800dc28:	e7b3      	b.n	800db92 <CRI_chart+0xa92>
 800dc2a:	2190      	movs	r1, #144	; 0x90
 800dc2c:	e7b1      	b.n	800db92 <CRI_chart+0xa92>
 800dc2e:	bf00      	nop
 800dc30:	42c80000 	.word	0x42c80000
 800dc34:	43570000 	.word	0x43570000
 800dc38:	43740000 	.word	0x43740000
 800dc3c:	080244b1 	.word	0x080244b1

0800dc40 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dc40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dc44:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800dc46:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dc48:	4604      	mov	r4, r0
 800dc4a:	4688      	mov	r8, r1
 800dc4c:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800dc4e:	213a      	movs	r1, #58	; 0x3a
 800dc50:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	2005      	movs	r0, #5
 800dc58:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dc5c:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800dc60:	f00e f8d9 	bl	801be16 <TFT_FillRectangle>
	CRI_Axes(direction);
 800dc64:	4620      	mov	r0, r4
 800dc66:	f7fe fe75 	bl	800c954 <CRI_Axes>
	CRI_Axes_Text(direction);
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7fe ffee 	bl	800cc4c <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800dc70:	4641      	mov	r1, r8
 800dc72:	4620      	mov	r0, r4
 800dc74:	f7ff fa44 	bl	800d100 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800dc78:	463b      	mov	r3, r7
 800dc7a:	4632      	mov	r2, r6
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	4620      	mov	r0, r4
 800dc80:	b002      	add	sp, #8
 800dc82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800dc86:	f7fe bf03 	b.w	800ca90 <CRI_Axes_Measure>
	...

0800dc8c <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800dc8c:	4a0c      	ldr	r2, [pc, #48]	; (800dcc0 <Calculate_EL_Day+0x34>)
 800dc8e:	2300      	movs	r3, #0
 800dc90:	6013      	str	r3, [r2, #0]
 800dc92:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800dc94:	ecb0 7a01 	vldmia	r0!, {s14}
 800dc98:	ecf1 7a01 	vldmia	r1!, {s15}
 800dc9c:	ed92 0a00 	vldr	s0, [r2]
 800dca0:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800dca4:	3301      	adds	r3, #1
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800dcac:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800dcb0:	d1f0      	bne.n	800dc94 <Calculate_EL_Day+0x8>
 800dcb2:	4a04      	ldr	r2, [pc, #16]	; (800dcc4 <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800dcb4:	eddf 7a04 	vldr	s15, [pc, #16]	; 800dcc8 <Calculate_EL_Day+0x3c>
 800dcb8:	8013      	strh	r3, [r2, #0]
 800dcba:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dcbe:	4770      	bx	lr
 800dcc0:	20090a4c 	.word	0x20090a4c
 800dcc4:	20090a44 	.word	0x20090a44
 800dcc8:	442ac000 	.word	0x442ac000

0800dccc <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800dccc:	4a09      	ldr	r2, [pc, #36]	; (800dcf4 <Calculate_EL_Day_Wt+0x28>)
 800dcce:	2300      	movs	r3, #0
 800dcd0:	6013      	str	r3, [r2, #0]
 800dcd2:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800dcd4:	ecf0 7a01 	vldmia	r0!, {s15}
 800dcd8:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800dcdc:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800dcde:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800dce8:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800dcec:	d1f2      	bne.n	800dcd4 <Calculate_EL_Day_Wt+0x8>
 800dcee:	4a02      	ldr	r2, [pc, #8]	; (800dcf8 <Calculate_EL_Day_Wt+0x2c>)
 800dcf0:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800dcf2:	4770      	bx	lr
 800dcf4:	20090a4c 	.word	0x20090a4c
 800dcf8:	20090a44 	.word	0x20090a44

0800dcfc <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800dcfc:	4a0c      	ldr	r2, [pc, #48]	; (800dd30 <Calculate_EL_Night+0x34>)
 800dcfe:	2300      	movs	r3, #0
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800dd04:	ecb0 7a01 	vldmia	r0!, {s14}
 800dd08:	ecf1 7a01 	vldmia	r1!, {s15}
 800dd0c:	ed92 0a00 	vldr	s0, [r2]
 800dd10:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800dd14:	3301      	adds	r3, #1
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800dd1c:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800dd20:	d1f0      	bne.n	800dd04 <Calculate_EL_Night+0x8>
 800dd22:	4a04      	ldr	r2, [pc, #16]	; (800dd34 <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800dd24:	eddf 7a04 	vldr	s15, [pc, #16]	; 800dd38 <Calculate_EL_Night+0x3c>
 800dd28:	8013      	strh	r3, [r2, #0]
 800dd2a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dd2e:	4770      	bx	lr
 800dd30:	20090a4c 	.word	0x20090a4c
 800dd34:	20090a44 	.word	0x20090a44
 800dd38:	44d48000 	.word	0x44d48000

0800dd3c <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800dd3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd44:	bf14      	ite	ne
 800dd46:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800dd4a:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800dd54 <Calculate_SP+0x18>
}
 800dd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800dd52:	4770      	bx	lr
 800dd54:	00000000 	.word	0x00000000

0800dd58 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800dd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t it = 0, beg = 0, end = 1024;

	while(Wavelenght[it]<400)
 800dd5c:	eddf 7a30 	vldr	s15, [pc, #192]	; 800de20 <Calculate_PPFD_PPL+0xc8>
 800dd60:	2300      	movs	r3, #0
 800dd62:	b29c      	uxth	r4, r3
 800dd64:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 800dd68:	ed92 7a00 	vldr	s14, [r2]
 800dd6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd74:	f103 0301 	add.w	r3, r3, #1
 800dd78:	d4f3      	bmi.n	800dd62 <Calculate_PPFD_PPL+0xa>
	{
		it++;
	}
	beg = it+1;
 800dd7a:	3401      	adds	r4, #1

	it = 1024;
	while(Wavelenght[it]>700)
 800dd7c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800de24 <Calculate_PPFD_PPL+0xcc>
	beg = it+1;
 800dd80:	b2a4      	uxth	r4, r4
	it = 1024;
 800dd82:	f44f 6380 	mov.w	r3, #1024	; 0x400
	while(Wavelenght[it]>700)
 800dd86:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800dd8a:	ed92 7a00 	vldr	s14, [r2]
 800dd8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd92:	3b01      	subs	r3, #1
 800dd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		it--;
 800dd98:	b29b      	uxth	r3, r3
	while(Wavelenght[it]>700)
 800dd9a:	dcf4      	bgt.n	800dd86 <Calculate_PPFD_PPL+0x2e>
	}
	end = it-1;


	sum = 0;
	for (iq = beg; iq < end; iq++)
 800dd9c:	4a22      	ldr	r2, [pc, #136]	; (800de28 <Calculate_PPFD_PPL+0xd0>)
	sum = 0;
 800dd9e:	4d23      	ldr	r5, [pc, #140]	; (800de2c <Calculate_PPFD_PPL+0xd4>)
	end = it-1;
 800dda0:	9300      	str	r3, [sp, #0]
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800dda2:	a71d      	add	r7, pc, #116	; (adr r7, 800de18 <Calculate_PPFD_PPL+0xc0>)
 800dda4:	e9d7 6700 	ldrd	r6, r7, [r7]
	sum = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800ddae:	602b      	str	r3, [r5, #0]
 800ddb0:	eb00 0b0a 	add.w	fp, r0, sl
	for (iq = beg; iq < end; iq++)
 800ddb4:	8014      	strh	r4, [r2, #0]
 800ddb6:	448a      	add	sl, r1
 800ddb8:	2300      	movs	r3, #0
 800ddba:	9201      	str	r2, [sp, #4]
 800ddbc:	9a00      	ldr	r2, [sp, #0]
 800ddbe:	42a2      	cmp	r2, r4
 800ddc0:	d807      	bhi.n	800ddd2 <Calculate_PPFD_PPL+0x7a>
 800ddc2:	b10b      	cbz	r3, 800ddc8 <Calculate_PPFD_PPL+0x70>
 800ddc4:	9b01      	ldr	r3, [sp, #4]
 800ddc6:	801c      	strh	r4, [r3, #0]
	}
	return sum;
}
 800ddc8:	ed95 0a00 	vldr	s0, [r5]
 800ddcc:	b003      	add	sp, #12
 800ddce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800ddd2:	ecbb 7a01 	vldmia	fp!, {s14}
 800ddd6:	ecfa 7a01 	vldmia	sl!, {s15}
 800ddda:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = beg; iq < end; iq++)
 800ddde:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800dde0:	ee17 0a90 	vmov	r0, s15
 800dde4:	f7f2 fbc8 	bl	8000578 <__aeabi_f2d>
 800dde8:	4632      	mov	r2, r6
 800ddea:	463b      	mov	r3, r7
 800ddec:	f7f2 fc18 	bl	8000620 <__aeabi_dmul>
 800ddf0:	4680      	mov	r8, r0
 800ddf2:	6828      	ldr	r0, [r5, #0]
 800ddf4:	4689      	mov	r9, r1
 800ddf6:	f7f2 fbbf 	bl	8000578 <__aeabi_f2d>
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	4649      	mov	r1, r9
 800de00:	4640      	mov	r0, r8
 800de02:	f7f2 fa5b 	bl	80002bc <__adddf3>
 800de06:	f7f2 ff03 	bl	8000c10 <__aeabi_d2f>
	for (iq = beg; iq < end; iq++)
 800de0a:	b2a4      	uxth	r4, r4
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800de0c:	6028      	str	r0, [r5, #0]
 800de0e:	2301      	movs	r3, #1
 800de10:	e7d4      	b.n	800ddbc <Calculate_PPFD_PPL+0x64>
 800de12:	bf00      	nop
 800de14:	f3af 8000 	nop.w
 800de18:	73f2981b 	.word	0x73f2981b
 800de1c:	3f811eb6 	.word	0x3f811eb6
 800de20:	43c80000 	.word	0x43c80000
 800de24:	442f0000 	.word	0x442f0000
 800de28:	20090a44 	.word	0x20090a44
 800de2c:	20090a4c 	.word	0x20090a4c

0800de30 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800de30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800de34:	4d34      	ldr	r5, [pc, #208]	; (800df08 <Calculate_PPFD_PPL_Range+0xd8>)
 800de36:	2300      	movs	r3, #0
 800de38:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800de3a:	b1f2      	cbz	r2, 800de7a <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800de3c:	2a01      	cmp	r2, #1
 800de3e:	d021      	beq.n	800de84 <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800de40:	2a02      	cmp	r2, #2
 800de42:	d024      	beq.n	800de8e <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800de44:	2a03      	cmp	r2, #3
 800de46:	bf0b      	itete	eq
 800de48:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800de4c:	f04f 0a00 	movne.w	sl, #0
 800de50:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800de54:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800de56:	4a2d      	ldr	r2, [pc, #180]	; (800df0c <Calculate_PPFD_PPL_Range+0xdc>)
 800de58:	9201      	str	r2, [sp, #4]
 800de5a:	2400      	movs	r4, #0
 800de5c:	8014      	strh	r4, [r2, #0]
 800de5e:	4606      	mov	r6, r0
 800de60:	468b      	mov	fp, r1
 800de62:	4623      	mov	r3, r4
 800de64:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800de68:	d116      	bne.n	800de98 <Calculate_PPFD_PPL_Range+0x68>
 800de6a:	b10b      	cbz	r3, 800de70 <Calculate_PPFD_PPL_Range+0x40>
 800de6c:	9b01      	ldr	r3, [sp, #4]
 800de6e:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800de70:	ed95 0a00 	vldr	s0, [r5]
 800de74:	b003      	add	sp, #12
 800de76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800de7a:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800de7e:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800de82:	e7e8      	b.n	800de56 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800de84:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800de88:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800de8c:	e7e3      	b.n	800de56 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800de8e:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800de92:	f44f 7716 	mov.w	r7, #600	; 0x258
 800de96:	e7de      	b.n	800de56 <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800de98:	ee07 7a10 	vmov	s14, r7
 800de9c:	ecfb 7a01 	vldmia	fp!, {s15}
 800dea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deac:	dd23      	ble.n	800def6 <Calculate_PPFD_PPL_Range+0xc6>
 800deae:	ee07 aa10 	vmov	s14, sl
 800deb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800deb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800deba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800debe:	d51a      	bpl.n	800def6 <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800dec0:	ed96 7a00 	vldr	s14, [r6]
 800dec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dec8:	ee17 0a90 	vmov	r0, s15
 800decc:	f7f2 fb54 	bl	8000578 <__aeabi_f2d>
 800ded0:	a30b      	add	r3, pc, #44	; (adr r3, 800df00 <Calculate_PPFD_PPL_Range+0xd0>)
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	f7f2 fba3 	bl	8000620 <__aeabi_dmul>
 800deda:	4680      	mov	r8, r0
 800dedc:	6828      	ldr	r0, [r5, #0]
 800dede:	4689      	mov	r9, r1
 800dee0:	f7f2 fb4a 	bl	8000578 <__aeabi_f2d>
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	4640      	mov	r0, r8
 800deea:	4649      	mov	r1, r9
 800deec:	f7f2 f9e6 	bl	80002bc <__adddf3>
 800def0:	f7f2 fe8e 	bl	8000c10 <__aeabi_d2f>
 800def4:	6028      	str	r0, [r5, #0]
 800def6:	3401      	adds	r4, #1
 800def8:	b2a4      	uxth	r4, r4
 800defa:	3604      	adds	r6, #4
 800defc:	2301      	movs	r3, #1
 800defe:	e7b1      	b.n	800de64 <Calculate_PPFD_PPL_Range+0x34>
 800df00:	73f2981b 	.word	0x73f2981b
 800df04:	3f811eb6 	.word	0x3f811eb6
 800df08:	20090a4c 	.word	0x20090a4c
 800df0c:	20090a44 	.word	0x20090a44

0800df10 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800df10:	4a0a      	ldr	r2, [pc, #40]	; (800df3c <Calculate_ELb+0x2c>)
 800df12:	2300      	movs	r3, #0
 800df14:	6013      	str	r3, [r2, #0]
 800df16:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800df18:	ecb0 7a01 	vldmia	r0!, {s14}
 800df1c:	ecf1 7a01 	vldmia	r1!, {s15}
 800df20:	ed92 0a00 	vldr	s0, [r2]
 800df24:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800df28:	3301      	adds	r3, #1
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800df30:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800df34:	d1f0      	bne.n	800df18 <Calculate_ELb+0x8>
 800df36:	4a02      	ldr	r2, [pc, #8]	; (800df40 <Calculate_ELb+0x30>)
 800df38:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800df3a:	4770      	bx	lr
 800df3c:	20090a4c 	.word	0x20090a4c
 800df40:	20090a44 	.word	0x20090a44

0800df44 <Calculate_ELr>:
 800df44:	f7ff bfe4 	b.w	800df10 <Calculate_ELb>

0800df48 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800df48:	b5d0      	push	{r4, r6, r7, lr}
 800df4a:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800df4e:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800dfd4 <Calculate_XYZ1964+0x8c>
{
 800df52:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800df54:	eef0 7a48 	vmov.f32	s15, s16
 800df58:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800df5c:	ecb0 7a01 	vldmia	r0!, {s14}
 800df60:	ecf1 6a01 	vldmia	r1!, {s13}
 800df64:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800df68:	3401      	adds	r4, #1
 800df6a:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800df6c:	ecf2 6a01 	vldmia	r2!, {s13}
 800df70:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800df74:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800df78:	ecf3 6a01 	vldmia	r3!, {s13}
 800df7c:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800df80:	d1ec      	bne.n	800df5c <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800df82:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800dfd8 <Calculate_XYZ1964+0x90>
 800df86:	4b15      	ldr	r3, [pc, #84]	; (800dfdc <Calculate_XYZ1964+0x94>)
 800df88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800df8c:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800df8e:	4c14      	ldr	r4, [pc, #80]	; (800dfe0 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800df90:	ee16 0a90 	vmov	r0, s13
 800df94:	f7f2 faf0 	bl	8000578 <__aeabi_f2d>
 800df98:	4606      	mov	r6, r0
 800df9a:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800df9c:	ee18 0a90 	vmov	r0, s17
 800dfa0:	f7f2 faea 	bl	8000578 <__aeabi_f2d>
 800dfa4:	4632      	mov	r2, r6
 800dfa6:	463b      	mov	r3, r7
 800dfa8:	f7f2 fb3a 	bl	8000620 <__aeabi_dmul>
 800dfac:	f7f2 fe10 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800dfb0:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800dfb2:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800dfb4:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800dfb6:	ee18 0a10 	vmov	r0, s16
 800dfba:	f7f2 fadd 	bl	8000578 <__aeabi_f2d>
 800dfbe:	4632      	mov	r2, r6
 800dfc0:	463b      	mov	r3, r7
 800dfc2:	f7f2 fb2d 	bl	8000620 <__aeabi_dmul>
 800dfc6:	f7f2 fe03 	bl	8000bd0 <__aeabi_d2uiz>
}
 800dfca:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800dfce:	80a0      	strh	r0, [r4, #4]
}
 800dfd0:	bdd0      	pop	{r4, r6, r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	00000000 	.word	0x00000000
 800dfd8:	42c80000 	.word	0x42c80000
 800dfdc:	20090a44 	.word	0x20090a44
 800dfe0:	2008f518 	.word	0x2008f518

0800dfe4 <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800dfe4:	b5d0      	push	{r4, r6, r7, lr}
 800dfe6:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800dfea:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e070 <Calculate_XYZ1931+0x8c>
{
 800dfee:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800dff0:	eef0 7a48 	vmov.f32	s15, s16
 800dff4:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800dff8:	ecb0 7a01 	vldmia	r0!, {s14}
 800dffc:	ecf1 6a01 	vldmia	r1!, {s13}
 800e000:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e004:	3401      	adds	r4, #1
 800e006:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e008:	ecf2 6a01 	vldmia	r2!, {s13}
 800e00c:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e010:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e014:	ecf3 6a01 	vldmia	r3!, {s13}
 800e018:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e01c:	d1ec      	bne.n	800dff8 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e01e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e074 <Calculate_XYZ1931+0x90>
 800e022:	4b15      	ldr	r3, [pc, #84]	; (800e078 <Calculate_XYZ1931+0x94>)
 800e024:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e028:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e02a:	4c14      	ldr	r4, [pc, #80]	; (800e07c <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e02c:	ee16 0a90 	vmov	r0, s13
 800e030:	f7f2 faa2 	bl	8000578 <__aeabi_f2d>
 800e034:	4606      	mov	r6, r0
 800e036:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e038:	ee18 0a90 	vmov	r0, s17
 800e03c:	f7f2 fa9c 	bl	8000578 <__aeabi_f2d>
 800e040:	4632      	mov	r2, r6
 800e042:	463b      	mov	r3, r7
 800e044:	f7f2 faec 	bl	8000620 <__aeabi_dmul>
 800e048:	f7f2 fdc2 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e04c:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e04e:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e050:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e052:	ee18 0a10 	vmov	r0, s16
 800e056:	f7f2 fa8f 	bl	8000578 <__aeabi_f2d>
 800e05a:	4632      	mov	r2, r6
 800e05c:	463b      	mov	r3, r7
 800e05e:	f7f2 fadf 	bl	8000620 <__aeabi_dmul>
 800e062:	f7f2 fdb5 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e066:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e06a:	80a0      	strh	r0, [r4, #4]
}
 800e06c:	bdd0      	pop	{r4, r6, r7, pc}
 800e06e:	bf00      	nop
 800e070:	00000000 	.word	0x00000000
 800e074:	42c80000 	.word	0x42c80000
 800e078:	20090a44 	.word	0x20090a44
 800e07c:	2008f512 	.word	0x2008f512

0800e080 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e080:	8801      	ldrh	r1, [r0, #0]
 800e082:	8842      	ldrh	r2, [r0, #2]
 800e084:	8880      	ldrh	r0, [r0, #4]
 800e086:	188b      	adds	r3, r1, r2
 800e088:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	ee07 3a90 	vmov	s15, r3
 800e090:	ee07 1a10 	vmov	s14, r1
 800e094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e098:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e09c:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <Calculate_xy1964+0x38>)
 800e09e:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e0a2:	ee07 2a10 	vmov	s14, r2
 800e0a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e0aa:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e0ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e0b2:	edc3 6a01 	vstr	s13, [r3, #4]
 800e0b6:	4770      	bx	lr
 800e0b8:	2008f538 	.word	0x2008f538

0800e0bc <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e0bc:	8801      	ldrh	r1, [r0, #0]
 800e0be:	8842      	ldrh	r2, [r0, #2]
 800e0c0:	8880      	ldrh	r0, [r0, #4]
 800e0c2:	188b      	adds	r3, r1, r2
 800e0c4:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	ee07 3a90 	vmov	s15, r3
 800e0cc:	ee07 1a10 	vmov	s14, r1
 800e0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e0d8:	4b06      	ldr	r3, [pc, #24]	; (800e0f4 <Calculate_xy1931+0x38>)
 800e0da:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e0de:	ee07 2a10 	vmov	s14, r2
 800e0e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e0e6:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e0ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e0ee:	edc3 6a01 	vstr	s13, [r3, #4]
 800e0f2:	4770      	bx	lr
 800e0f4:	2008f530 	.word	0x2008f530

0800e0f8 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e0f8:	ed90 7a01 	vldr	s14, [r0, #4]
 800e0fc:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e100:	4b0e      	ldr	r3, [pc, #56]	; (800e13c <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e102:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e10a:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e10e:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e112:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e116:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e11a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e11e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e122:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e126:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e12a:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e12e:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e132:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e136:	edc3 6a01 	vstr	s13, [r3, #4]
 800e13a:	4770      	bx	lr
 800e13c:	2008f520 	.word	0x2008f520

0800e140 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e140:	ed90 7a01 	vldr	s14, [r0, #4]
 800e144:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e148:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e14a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e152:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e156:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e15a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e15e:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e162:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e166:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e16a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e16e:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800e172:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e176:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e17a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e17e:	edc3 6a01 	vstr	s13, [r3, #4]
 800e182:	4770      	bx	lr
 800e184:	2008f528 	.word	0x2008f528

0800e188 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	ed2d 8b02 	vpush	{d8}
 800e190:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800e192:	b921      	cbnz	r1, 800e19e <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800e194:	4bb4      	ldr	r3, [pc, #720]	; (800e468 <Calculate_Tc+0x2e0>)
 800e196:	4ab5      	ldr	r2, [pc, #724]	; (800e46c <Calculate_Tc+0x2e4>)
 800e198:	49b5      	ldr	r1, [pc, #724]	; (800e470 <Calculate_Tc+0x2e8>)
 800e19a:	f7ff ff23 	bl	800dfe4 <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e19e:	4bb5      	ldr	r3, [pc, #724]	; (800e474 <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e1a0:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800e478 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e1a4:	885e      	ldrh	r6, [r3, #2]
 800e1a6:	881f      	ldrh	r7, [r3, #0]
 800e1a8:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e1aa:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800e4b8 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e1ae:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800e1b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e1b6:	4438      	add	r0, r7
 800e1b8:	4418      	add	r0, r3
 800e1ba:	f7f2 f9cb 	bl	8000554 <__aeabi_i2d>
 800e1be:	4baf      	ldr	r3, [pc, #700]	; (800e47c <Calculate_Tc+0x2f4>)
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	f7f2 f9c3 	bl	8000554 <__aeabi_i2d>
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	4bab      	ldr	r3, [pc, #684]	; (800e480 <Calculate_Tc+0x2f8>)
 800e1d2:	4fac      	ldr	r7, [pc, #688]	; (800e484 <Calculate_Tc+0x2fc>)
 800e1d4:	f7f2 fa24 	bl	8000620 <__aeabi_dmul>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	462b      	mov	r3, r5
 800e1dc:	f7f2 fb4a 	bl	8000874 <__aeabi_ddiv>
 800e1e0:	4ba9      	ldr	r3, [pc, #676]	; (800e488 <Calculate_Tc+0x300>)
 800e1e2:	e9cd 0100 	strd	r0, r1, [sp]
 800e1e6:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f7f2 f9b2 	bl	8000554 <__aeabi_i2d>
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	4ba6      	ldr	r3, [pc, #664]	; (800e48c <Calculate_Tc+0x304>)
 800e1f4:	f7f2 fa14 	bl	8000620 <__aeabi_dmul>
 800e1f8:	462b      	mov	r3, r5
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	f7f2 fb3a 	bl	8000874 <__aeabi_ddiv>
 800e200:	4ba3      	ldr	r3, [pc, #652]	; (800e490 <Calculate_Tc+0x308>)
 800e202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e206:	2600      	movs	r6, #0
 800e208:	e9c3 0100 	strd	r0, r1, [r3]
 800e20c:	4ba1      	ldr	r3, [pc, #644]	; (800e494 <Calculate_Tc+0x30c>)
 800e20e:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800e210:	4635      	mov	r5, r6
 800e212:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e214:	eeb0 8a68 	vmov.f32	s16, s17
 800e218:	46d3      	mov	fp, sl
 800e21a:	b2f3      	uxtb	r3, r6
 800e21c:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e21e:	9b04      	ldr	r3, [sp, #16]
 800e220:	ecf3 7a01 	vldmia	r3!, {s15}
 800e224:	9304      	str	r3, [sp, #16]
 800e226:	4b9c      	ldr	r3, [pc, #624]	; (800e498 <Calculate_Tc+0x310>)
 800e228:	edcd 7a05 	vstr	s15, [sp, #20]
 800e22c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800e230:	ecf7 7a01 	vldmia	r7!, {s15}
 800e234:	edcd 7a06 	vstr	s15, [sp, #24]
 800e238:	ee07 0a90 	vmov	s15, r0
 800e23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e240:	ee17 0a90 	vmov	r0, s15
 800e244:	f7f2 f998 	bl	8000578 <__aeabi_f2d>
 800e248:	a381      	add	r3, pc, #516	; (adr r3, 800e450 <Calculate_Tc+0x2c8>)
 800e24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24e:	f7f2 fb11 	bl	8000874 <__aeabi_ddiv>
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e25a:	f7f2 f82d 	bl	80002b8 <__aeabi_dsub>
 800e25e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e262:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800e266:	ee07 0a90 	vmov	s15, r0
 800e26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e26e:	3601      	adds	r6, #1
 800e270:	ee17 0a90 	vmov	r0, s15
 800e274:	f7f2 f980 	bl	8000578 <__aeabi_f2d>
 800e278:	a375      	add	r3, pc, #468	; (adr r3, 800e450 <Calculate_Tc+0x2c8>)
 800e27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27e:	f7f2 faf9 	bl	8000874 <__aeabi_ddiv>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e28a:	f7f2 f815 	bl	80002b8 <__aeabi_dsub>
 800e28e:	4680      	mov	r8, r0
 800e290:	9805      	ldr	r0, [sp, #20]
 800e292:	4689      	mov	r9, r1
 800e294:	f7f2 f970 	bl	8000578 <__aeabi_f2d>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	4640      	mov	r0, r8
 800e29e:	4649      	mov	r1, r9
 800e2a0:	f7f2 f9be 	bl	8000620 <__aeabi_dmul>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e2ac:	f7f2 f804 	bl	80002b8 <__aeabi_dsub>
 800e2b0:	4680      	mov	r8, r0
 800e2b2:	9806      	ldr	r0, [sp, #24]
 800e2b4:	4689      	mov	r9, r1
 800e2b6:	f7f2 f95f 	bl	8000578 <__aeabi_f2d>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4640      	mov	r0, r8
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	f7f2 fad7 	bl	8000874 <__aeabi_ddiv>
 800e2c6:	f7f2 fca3 	bl	8000c10 <__aeabi_d2f>
 800e2ca:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800e2ce:	eef0 7ac8 	vabs.f32	s15, s16
 800e2d2:	eef0 6ac7 	vabs.f32	s13, s14
 800e2d6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2de:	bfc1      	itttt	gt
 800e2e0:	4625      	movgt	r5, r4
 800e2e2:	eef0 8a48 	vmovgt.f32	s17, s16
 800e2e6:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800e2e8:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800e2ec:	2e1f      	cmp	r6, #31
 800e2ee:	d194      	bne.n	800e21a <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e2f0:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e2f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800e498 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e2f8:	f7f2 f92c 	bl	8000554 <__aeabi_i2d>
 800e2fc:	a354      	add	r3, pc, #336	; (adr r3, 800e450 <Calculate_Tc+0x2c8>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	f7f2 fab7 	bl	8000874 <__aeabi_ddiv>
 800e306:	4606      	mov	r6, r0
 800e308:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800e30c:	460f      	mov	r7, r1
 800e30e:	f7f2 f921 	bl	8000554 <__aeabi_i2d>
 800e312:	a34f      	add	r3, pc, #316	; (adr r3, 800e450 <Calculate_Tc+0x2c8>)
 800e314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e318:	f7f2 faac 	bl	8000874 <__aeabi_ddiv>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4630      	mov	r0, r6
 800e322:	4639      	mov	r1, r7
 800e324:	f7f1 ffca 	bl	80002bc <__adddf3>
 800e328:	2200      	movs	r2, #0
 800e32a:	4b5c      	ldr	r3, [pc, #368]	; (800e49c <Calculate_Tc+0x314>)
 800e32c:	f7f2 f978 	bl	8000620 <__aeabi_dmul>
 800e330:	4b5b      	ldr	r3, [pc, #364]	; (800e4a0 <Calculate_Tc+0x318>)
 800e332:	4680      	mov	r8, r0
 800e334:	4689      	mov	r9, r1
 800e336:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e33a:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800e33e:	f7f2 f909 	bl	8000554 <__aeabi_i2d>
 800e342:	a343      	add	r3, pc, #268	; (adr r3, 800e450 <Calculate_Tc+0x2c8>)
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	f7f2 fa94 	bl	8000874 <__aeabi_ddiv>
 800e34c:	4606      	mov	r6, r0
 800e34e:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800e352:	460f      	mov	r7, r1
 800e354:	f7f2 f8fe 	bl	8000554 <__aeabi_i2d>
 800e358:	a33d      	add	r3, pc, #244	; (adr r3, 800e450 <Calculate_Tc+0x2c8>)
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	f7f2 fa89 	bl	8000874 <__aeabi_ddiv>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	4630      	mov	r0, r6
 800e368:	4639      	mov	r1, r7
 800e36a:	f7f1 ffa7 	bl	80002bc <__adddf3>
 800e36e:	2200      	movs	r2, #0
 800e370:	4b4a      	ldr	r3, [pc, #296]	; (800e49c <Calculate_Tc+0x314>)
 800e372:	f7f2 f955 	bl	8000620 <__aeabi_dmul>
 800e376:	4b4b      	ldr	r3, [pc, #300]	; (800e4a4 <Calculate_Tc+0x31c>)
 800e378:	4606      	mov	r6, r0
 800e37a:	460f      	mov	r7, r1
 800e37c:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800e380:	4640      	mov	r0, r8
 800e382:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e386:	4649      	mov	r1, r9
 800e388:	f7f1 ff96 	bl	80002b8 <__aeabi_dsub>
 800e38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e390:	4680      	mov	r8, r0
 800e392:	4689      	mov	r9, r1
 800e394:	4630      	mov	r0, r6
 800e396:	4639      	mov	r1, r7
 800e398:	f7f1 ff8e 	bl	80002b8 <__aeabi_dsub>
 800e39c:	4642      	mov	r2, r8
 800e39e:	4606      	mov	r6, r0
 800e3a0:	460f      	mov	r7, r1
 800e3a2:	464b      	mov	r3, r9
 800e3a4:	4640      	mov	r0, r8
 800e3a6:	4649      	mov	r1, r9
 800e3a8:	f7f2 f93a 	bl	8000620 <__aeabi_dmul>
 800e3ac:	4632      	mov	r2, r6
 800e3ae:	4680      	mov	r8, r0
 800e3b0:	4689      	mov	r9, r1
 800e3b2:	463b      	mov	r3, r7
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	4639      	mov	r1, r7
 800e3b8:	f7f2 f932 	bl	8000620 <__aeabi_dmul>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	460b      	mov	r3, r1
 800e3c0:	4640      	mov	r0, r8
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	f7f1 ff7a 	bl	80002bc <__adddf3>
 800e3c8:	ec41 0b10 	vmov	d0, r0, r1
 800e3cc:	f014 fcdc 	bl	8022d88 <sqrt>
 800e3d0:	4b35      	ldr	r3, [pc, #212]	; (800e4a8 <Calculate_Tc+0x320>)
 800e3d2:	ec51 0b10 	vmov	r0, r1, d0
 800e3d6:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800e3da:	a31f      	add	r3, pc, #124	; (adr r3, 800e458 <Calculate_Tc+0x2d0>)
 800e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e0:	f7f2 fbae 	bl	8000b40 <__aeabi_dcmpgt>
 800e3e4:	bb78      	cbnz	r0, 800e446 <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800e3e6:	4b31      	ldr	r3, [pc, #196]	; (800e4ac <Calculate_Tc+0x324>)
 800e3e8:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800e3ec:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e3f0:	ee07 2a90 	vmov	s15, r2
 800e3f4:	1a9b      	subs	r3, r3, r2
 800e3f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e3fa:	ee07 3a90 	vmov	s15, r3
 800e3fe:	ee78 8a68 	vsub.f32	s17, s16, s17
 800e402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e406:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800e40a:	eea8 7a26 	vfma.f32	s14, s16, s13
 800e40e:	ee17 0a10 	vmov	r0, s14
 800e412:	f7f2 f8b1 	bl	8000578 <__aeabi_f2d>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	a111      	add	r1, pc, #68	; (adr r1, 800e460 <Calculate_Tc+0x2d8>)
 800e41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e420:	f7f2 fa28 	bl	8000874 <__aeabi_ddiv>
 800e424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e428:	4921      	ldr	r1, [pc, #132]	; (800e4b0 <Calculate_Tc+0x328>)
 800e42a:	4602      	mov	r2, r0
 800e42c:	e9c1 2300 	strd	r2, r3, [r1]
 800e430:	4610      	mov	r0, r2
 800e432:	4619      	mov	r1, r3
 800e434:	f7f2 fbec 	bl	8000c10 <__aeabi_d2f>
	}
}
 800e438:	ee00 0a10 	vmov	s0, r0
 800e43c:	b00b      	add	sp, #44	; 0x2c
 800e43e:	ecbd 8b02 	vpop	{d8}
 800e442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800e446:	481b      	ldr	r0, [pc, #108]	; (800e4b4 <Calculate_Tc+0x32c>)
 800e448:	e7f6      	b.n	800e438 <Calculate_Tc+0x2b0>
 800e44a:	bf00      	nop
 800e44c:	f3af 8000 	nop.w
 800e450:	00000000 	.word	0x00000000
 800e454:	40f86a00 	.word	0x40f86a00
 800e458:	9999999a 	.word	0x9999999a
 800e45c:	3fa99999 	.word	0x3fa99999
 800e460:	00000000 	.word	0x00000000
 800e464:	412e8480 	.word	0x412e8480
 800e468:	2008d504 	.word	0x2008d504
 800e46c:	20052930 	.word	0x20052930
 800e470:	2008a504 	.word	0x2008a504
 800e474:	2008f512 	.word	0x2008f512
 800e478:	447a0000 	.word	0x447a0000
 800e47c:	200056a0 	.word	0x200056a0
 800e480:	40100000 	.word	0x40100000
 800e484:	08024624 	.word	0x08024624
 800e488:	200056b0 	.word	0x200056b0
 800e48c:	40180000 	.word	0x40180000
 800e490:	200056c0 	.word	0x200056c0
 800e494:	080245a8 	.word	0x080245a8
 800e498:	080246de 	.word	0x080246de
 800e49c:	3fe00000 	.word	0x3fe00000
 800e4a0:	200056a8 	.word	0x200056a8
 800e4a4:	200056b8 	.word	0x200056b8
 800e4a8:	20005698 	.word	0x20005698
 800e4ac:	080244b4 	.word	0x080244b4
 800e4b0:	20090a50 	.word	0x20090a50
 800e4b4:	477fff00 	.word	0x477fff00
 800e4b8:	080246a0 	.word	0x080246a0
 800e4bc:	00000000 	.word	0x00000000

0800e4c0 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800e4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e4c4:	2a01      	cmp	r2, #1
{
 800e4c6:	ed2d 8b02 	vpush	{d8}
 800e4ca:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e4cc:	f000 80b9 	beq.w	800e642 <Calculate_Lab+0x182>
 800e4d0:	2a02      	cmp	r2, #2
 800e4d2:	f000 80b8 	beq.w	800e646 <Calculate_Lab+0x186>
 800e4d6:	2a04      	cmp	r2, #4
 800e4d8:	f000 80b7 	beq.w	800e64a <Calculate_Lab+0x18a>
 800e4dc:	2a08      	cmp	r2, #8
 800e4de:	f000 80b6 	beq.w	800e64e <Calculate_Lab+0x18e>
 800e4e2:	2a10      	cmp	r2, #16
 800e4e4:	f000 80b5 	beq.w	800e652 <Calculate_Lab+0x192>
 800e4e8:	2a20      	cmp	r2, #32
 800e4ea:	bf14      	ite	ne
 800e4ec:	2400      	movne	r4, #0
 800e4ee:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800e4f0:	2901      	cmp	r1, #1
 800e4f2:	f040 80b0 	bne.w	800e656 <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800e4f6:	4b82      	ldr	r3, [pc, #520]	; (800e700 <Calculate_Lab+0x240>)
 800e4f8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e4fc:	f7f2 f82a 	bl	8000554 <__aeabi_i2d>
 800e500:	4b80      	ldr	r3, [pc, #512]	; (800e704 <Calculate_Lab+0x244>)
 800e502:	2200      	movs	r2, #0
 800e504:	f7f2 f9b6 	bl	8000874 <__aeabi_ddiv>
 800e508:	f7f2 fb82 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800e50c:	4b7e      	ldr	r3, [pc, #504]	; (800e708 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800e50e:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800e512:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e516:	f7f2 f81d 	bl	8000554 <__aeabi_i2d>
 800e51a:	2200      	movs	r2, #0
 800e51c:	4b79      	ldr	r3, [pc, #484]	; (800e704 <Calculate_Lab+0x244>)
 800e51e:	f7f2 f9a9 	bl	8000874 <__aeabi_ddiv>
 800e522:	f7f2 fb75 	bl	8000c10 <__aeabi_d2f>
 800e526:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e52a:	8833      	ldrh	r3, [r6, #0]
 800e52c:	ee07 3a90 	vmov	s15, r3
 800e530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e534:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800e538:	ee17 0a10 	vmov	r0, s14
 800e53c:	f7f2 f81c 	bl	8000578 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e540:	8873      	ldrh	r3, [r6, #2]
 800e542:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800e70c <Calculate_Lab+0x24c>
 800e546:	ee07 3a90 	vmov	s15, r3
 800e54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e54e:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e550:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e554:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e556:	ee16 0a90 	vmov	r0, s13
 800e55a:	f7f2 f80d 	bl	8000578 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e55e:	88b3      	ldrh	r3, [r6, #4]
 800e560:	ee07 3a90 	vmov	s15, r3
 800e564:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e568:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e56a:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e56e:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e570:	ee17 0a10 	vmov	r0, s14
 800e574:	f7f2 f800 	bl	8000578 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800e578:	a35b      	add	r3, pc, #364	; (adr r3, 800e6e8 <Calculate_Lab+0x228>)
 800e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e57e:	4606      	mov	r6, r0
 800e580:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800e582:	4640      	mov	r0, r8
 800e584:	4649      	mov	r1, r9
 800e586:	f7f2 fadb 	bl	8000b40 <__aeabi_dcmpgt>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d075      	beq.n	800e67a <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800e58e:	ec49 8b10 	vmov	d0, r8, r9
 800e592:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800e6f0 <Calculate_Lab+0x230>
 800e596:	f014 fa7f 	bl	8022a98 <pow>
 800e59a:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800e59e:	a352      	add	r3, pc, #328	; (adr r3, 800e6e8 <Calculate_Lab+0x228>)
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	4629      	mov	r1, r5
 800e5a8:	f7f2 faca 	bl	8000b40 <__aeabi_dcmpgt>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d076      	beq.n	800e69e <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800e5b0:	ec45 4b10 	vmov	d0, r4, r5
 800e5b4:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800e6f0 <Calculate_Lab+0x230>
 800e5b8:	f014 fa6e 	bl	8022a98 <pow>
 800e5bc:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800e5c0:	a349      	add	r3, pc, #292	; (adr r3, 800e6e8 <Calculate_Lab+0x228>)
 800e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	4639      	mov	r1, r7
 800e5ca:	f7f2 fab9 	bl	8000b40 <__aeabi_dcmpgt>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d077      	beq.n	800e6c2 <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800e5d2:	ec47 6b10 	vmov	d0, r6, r7
 800e5d6:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800e6f0 <Calculate_Lab+0x230>
 800e5da:	f014 fa5d 	bl	8022a98 <pow>
 800e5de:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	4b4a      	ldr	r3, [pc, #296]	; (800e710 <Calculate_Lab+0x250>)
 800e5e6:	f8df a140 	ldr.w	sl, [pc, #320]	; 800e728 <Calculate_Lab+0x268>
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7f2 f817 	bl	8000620 <__aeabi_dmul>
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	4b47      	ldr	r3, [pc, #284]	; (800e714 <Calculate_Lab+0x254>)
 800e5f6:	f7f1 fe5f 	bl	80002b8 <__aeabi_dsub>
 800e5fa:	f7f2 fac1 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e5fe:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e600:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e604:	462b      	mov	r3, r5
 800e606:	4640      	mov	r0, r8
 800e608:	4649      	mov	r1, r9
 800e60a:	f7f1 fe55 	bl	80002b8 <__aeabi_dsub>
 800e60e:	2200      	movs	r2, #0
 800e610:	4b41      	ldr	r3, [pc, #260]	; (800e718 <Calculate_Lab+0x258>)
 800e612:	f7f2 f805 	bl	8000620 <__aeabi_dmul>
 800e616:	f7f2 fab3 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e61a:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e61c:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e620:	463b      	mov	r3, r7
 800e622:	4620      	mov	r0, r4
 800e624:	4629      	mov	r1, r5
 800e626:	f7f1 fe47 	bl	80002b8 <__aeabi_dsub>
 800e62a:	2200      	movs	r2, #0
 800e62c:	4b3b      	ldr	r3, [pc, #236]	; (800e71c <Calculate_Lab+0x25c>)
 800e62e:	f7f1 fff7 	bl	8000620 <__aeabi_dmul>
 800e632:	f7f2 faa5 	bl	8000b80 <__aeabi_d2iz>
	
}
 800e636:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e63a:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800e63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e642:	2400      	movs	r4, #0
 800e644:	e754      	b.n	800e4f0 <Calculate_Lab+0x30>
 800e646:	2401      	movs	r4, #1
 800e648:	e752      	b.n	800e4f0 <Calculate_Lab+0x30>
 800e64a:	2402      	movs	r4, #2
 800e64c:	e750      	b.n	800e4f0 <Calculate_Lab+0x30>
 800e64e:	2403      	movs	r4, #3
 800e650:	e74e      	b.n	800e4f0 <Calculate_Lab+0x30>
 800e652:	2404      	movs	r4, #4
 800e654:	e74c      	b.n	800e4f0 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800e656:	2900      	cmp	r1, #0
 800e658:	f47f af67 	bne.w	800e52a <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800e65c:	4b30      	ldr	r3, [pc, #192]	; (800e720 <Calculate_Lab+0x260>)
 800e65e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e662:	f7f1 ff77 	bl	8000554 <__aeabi_i2d>
 800e666:	4b27      	ldr	r3, [pc, #156]	; (800e704 <Calculate_Lab+0x244>)
 800e668:	2200      	movs	r2, #0
 800e66a:	f7f2 f903 	bl	8000874 <__aeabi_ddiv>
 800e66e:	f7f2 facf 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800e672:	4b2c      	ldr	r3, [pc, #176]	; (800e724 <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800e674:	ee08 0a90 	vmov	s17, r0
 800e678:	e74b      	b.n	800e512 <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800e67a:	a31f      	add	r3, pc, #124	; (adr r3, 800e6f8 <Calculate_Lab+0x238>)
 800e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e680:	4640      	mov	r0, r8
 800e682:	4649      	mov	r1, r9
 800e684:	f7f1 ffcc 	bl	8000620 <__aeabi_dmul>
 800e688:	2200      	movs	r2, #0
 800e68a:	4b22      	ldr	r3, [pc, #136]	; (800e714 <Calculate_Lab+0x254>)
 800e68c:	f7f1 fe16 	bl	80002bc <__adddf3>
 800e690:	2200      	movs	r2, #0
 800e692:	4b1f      	ldr	r3, [pc, #124]	; (800e710 <Calculate_Lab+0x250>)
 800e694:	f7f2 f8ee 	bl	8000874 <__aeabi_ddiv>
 800e698:	4680      	mov	r8, r0
 800e69a:	4689      	mov	r9, r1
 800e69c:	e77f      	b.n	800e59e <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800e69e:	a316      	add	r3, pc, #88	; (adr r3, 800e6f8 <Calculate_Lab+0x238>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	f7f1 ffba 	bl	8000620 <__aeabi_dmul>
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	4b19      	ldr	r3, [pc, #100]	; (800e714 <Calculate_Lab+0x254>)
 800e6b0:	f7f1 fe04 	bl	80002bc <__adddf3>
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	4b16      	ldr	r3, [pc, #88]	; (800e710 <Calculate_Lab+0x250>)
 800e6b8:	f7f2 f8dc 	bl	8000874 <__aeabi_ddiv>
 800e6bc:	4604      	mov	r4, r0
 800e6be:	460d      	mov	r5, r1
 800e6c0:	e77e      	b.n	800e5c0 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800e6c2:	a30d      	add	r3, pc, #52	; (adr r3, 800e6f8 <Calculate_Lab+0x238>)
 800e6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	4639      	mov	r1, r7
 800e6cc:	f7f1 ffa8 	bl	8000620 <__aeabi_dmul>
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	4b10      	ldr	r3, [pc, #64]	; (800e714 <Calculate_Lab+0x254>)
 800e6d4:	f7f1 fdf2 	bl	80002bc <__adddf3>
 800e6d8:	2200      	movs	r2, #0
 800e6da:	4b0d      	ldr	r3, [pc, #52]	; (800e710 <Calculate_Lab+0x250>)
 800e6dc:	f7f2 f8ca 	bl	8000874 <__aeabi_ddiv>
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	460f      	mov	r7, r1
 800e6e4:	e77d      	b.n	800e5e2 <Calculate_Lab+0x122>
 800e6e6:	bf00      	nop
 800e6e8:	98de88b7 	.word	0x98de88b7
 800e6ec:	3f822354 	.word	0x3f822354
 800e6f0:	55555555 	.word	0x55555555
 800e6f4:	3fd55555 	.word	0x3fd55555
 800e6f8:	66666666 	.word	0x66666666
 800e6fc:	408c3a66 	.word	0x408c3a66
 800e700:	080244f2 	.word	0x080244f2
 800e704:	40590000 	.word	0x40590000
 800e708:	0802450a 	.word	0x0802450a
 800e70c:	42c80000 	.word	0x42c80000
 800e710:	405d0000 	.word	0x405d0000
 800e714:	40300000 	.word	0x40300000
 800e718:	407f4000 	.word	0x407f4000
 800e71c:	40690000 	.word	0x40690000
 800e720:	080244fe 	.word	0x080244fe
 800e724:	08024516 	.word	0x08024516
 800e728:	2008f50c 	.word	0x2008f50c

0800e72c <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800e72c:	4b75      	ldr	r3, [pc, #468]	; (800e904 <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e72e:	eddf 7a76 	vldr	s15, [pc, #472]	; 800e908 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800e732:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800e736:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e73a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800e90c <Calculate_Lambda_Dominant+0x1e0>
 800e73e:	eddf 6a74 	vldr	s13, [pc, #464]	; 800e910 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e742:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800e914 <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e746:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800e74a:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800e74e:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e752:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e756:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800e75a:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e75c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e918 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e760:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e764:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800e768:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800e91c <Calculate_Lambda_Dominant+0x1f0>
 800e76c:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800e770:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800e920 <Calculate_Lambda_Dominant+0x1f4>
 800e774:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e77c:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800e924 <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e780:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e784:	ee77 6a46 	vsub.f32	s13, s14, s12
 800e788:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e928 <Calculate_Lambda_Dominant+0x1fc>
 800e78c:	ee35 5a65 	vsub.f32	s10, s10, s11
 800e790:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800e794:	eddf 6a65 	vldr	s13, [pc, #404]	; 800e92c <Calculate_Lambda_Dominant+0x200>
 800e798:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e79c:	bfcc      	ite	gt
 800e79e:	2101      	movgt	r1, #1
 800e7a0:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e7a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e7ac:	bfcc      	ite	gt
 800e7ae:	2201      	movgt	r2, #1
 800e7b0:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b8:	bfcc      	ite	gt
 800e7ba:	2301      	movgt	r3, #1
 800e7bc:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800e7c0:	4291      	cmp	r1, r2
 800e7c2:	f040 8093 	bne.w	800e8ec <Calculate_Lambda_Dominant+0x1c0>
 800e7c6:	4299      	cmp	r1, r3
 800e7c8:	bf14      	ite	ne
 800e7ca:	2101      	movne	r1, #1
 800e7cc:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e7d0:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800e7d4:	4856      	ldr	r0, [pc, #344]	; (800e930 <Calculate_Lambda_Dominant+0x204>)
 800e7d6:	4a57      	ldr	r2, [pc, #348]	; (800e934 <Calculate_Lambda_Dominant+0x208>)
 800e7d8:	8804      	ldrh	r4, [r0, #0]
 800e7da:	4e57      	ldr	r6, [pc, #348]	; (800e938 <Calculate_Lambda_Dominant+0x20c>)
 800e7dc:	4d57      	ldr	r5, [pc, #348]	; (800e93c <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e7de:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800e908 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e7e2:	eee6 3a27 	vfma.f32	s7, s12, s15
 800e7e6:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800e7ea:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e7ec:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e7f0:	ed95 6a00 	vldr	s12, [r5]
 800e7f4:	edd6 6a00 	vldr	s13, [r6]
 800e7f8:	ed95 4a01 	vldr	s8, [r5, #4]
 800e7fc:	ed96 5a01 	vldr	s10, [r6, #4]
 800e800:	3504      	adds	r5, #4
 800e802:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e804:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e808:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e80c:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e810:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800e814:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e818:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e81c:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e820:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e824:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e828:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e830:	bf54      	ite	pl
 800e832:	eeb0 1a44 	vmovpl.f32	s2, s8
 800e836:	eeb0 1a46 	vmovmi.f32	s2, s12
 800e83a:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800e83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e842:	d54d      	bpl.n	800e8e0 <Calculate_Lambda_Dominant+0x1b4>
 800e844:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800e848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84c:	bfd8      	it	le
 800e84e:	eeb0 6a44 	vmovle.f32	s12, s8
 800e852:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800e856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e85a:	dd41      	ble.n	800e8e0 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e85c:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e860:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e864:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e86c:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e870:	bf54      	ite	pl
 800e872:	eeb0 4a45 	vmovpl.f32	s8, s10
 800e876:	eeb0 4a66 	vmovmi.f32	s8, s13
 800e87a:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800e87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e882:	d52d      	bpl.n	800e8e0 <Calculate_Lambda_Dominant+0x1b4>
 800e884:	eef4 6ac5 	vcmpe.f32	s13, s10
 800e888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88c:	bfd8      	it	le
 800e88e:	eef0 6a45 	vmovle.f32	s13, s10
 800e892:	eef4 6ac6 	vcmpe.f32	s13, s12
 800e896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89a:	dd21      	ble.n	800e8e0 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e89c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a4:	bf54      	ite	pl
 800e8a6:	eef0 6a60 	vmovpl.f32	s13, s1
 800e8aa:	eef0 6a47 	vmovmi.f32	s13, s14
 800e8ae:	eef4 6ae5 	vcmpe.f32	s13, s11
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	d51b      	bpl.n	800e8f0 <Calculate_Lambda_Dominant+0x1c4>
 800e8b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c0:	bfd8      	it	le
 800e8c2:	eeb0 7a60 	vmovle.f32	s14, s1
 800e8c6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800e8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ce:	bfcc      	ite	gt
 800e8d0:	2301      	movgt	r3, #1
 800e8d2:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800e8d6:	fb13 f301 	smulbb	r3, r3, r1
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d10b      	bne.n	800e8f6 <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800e8de:	8814      	ldrh	r4, [r2, #0]
 800e8e0:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800e8e2:	4297      	cmp	r7, r2
 800e8e4:	d184      	bne.n	800e7f0 <Calculate_Lambda_Dominant+0xc4>
 800e8e6:	b103      	cbz	r3, 800e8ea <Calculate_Lambda_Dominant+0x1be>
 800e8e8:	8004      	strh	r4, [r0, #0]
 800e8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800e8ec:	2101      	movs	r1, #1
 800e8ee:	e76f      	b.n	800e7d0 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f4:	e7ef      	b.n	800e8d6 <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800e8f6:	1c4b      	adds	r3, r1, #1
 800e8f8:	bf14      	ite	ne
 800e8fa:	8814      	ldrhne	r4, [r2, #0]
 800e8fc:	2400      	moveq	r4, #0
 800e8fe:	2301      	movs	r3, #1
 800e900:	e7ee      	b.n	800e8e0 <Calculate_Lambda_Dominant+0x1b4>
 800e902:	bf00      	nop
 800e904:	2008f530 	.word	0x2008f530
 800e908:	3eaaa64c 	.word	0x3eaaa64c
 800e90c:	be1fd4b2 	.word	0xbe1fd4b2
 800e910:	beaaa64c 	.word	0xbeaaa64c
 800e914:	3e3577e6 	.word	0x3e3577e6
 800e918:	00000000 	.word	0x00000000
 800e91c:	3f0eeab2 	.word	0x3f0eeab2
 800e920:	3e876ea8 	.word	0x3e876ea8
 800e924:	3f3c48ac 	.word	0x3f3c48ac
 800e928:	becdeb0c 	.word	0xbecdeb0c
 800e92c:	3d8cde90 	.word	0x3d8cde90
 800e930:	20095b34 	.word	0x20095b34
 800e934:	08024524 	.word	0x08024524
 800e938:	08024824 	.word	0x08024824
 800e93c:	0802471c 	.word	0x0802471c

0800e940 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800e940:	4b2c      	ldr	r3, [pc, #176]	; (800e9f4 <Calculate_deltaEab+0xb4>)
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800e946:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800e948:	d40a      	bmi.n	800e960 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800e94a:	4b2b      	ldr	r3, [pc, #172]	; (800e9f8 <Calculate_deltaEab+0xb8>)
 800e94c:	482b      	ldr	r0, [pc, #172]	; (800e9fc <Calculate_deltaEab+0xbc>)
 800e94e:	7819      	ldrb	r1, [r3, #0]
 800e950:	4b2b      	ldr	r3, [pc, #172]	; (800ea00 <Calculate_deltaEab+0xc0>)
 800e952:	781a      	ldrb	r2, [r3, #0]
 800e954:	4b2b      	ldr	r3, [pc, #172]	; (800ea04 <Calculate_deltaEab+0xc4>)
 800e956:	2900      	cmp	r1, #0
 800e958:	bf18      	it	ne
 800e95a:	4618      	movne	r0, r3
 800e95c:	f7ff fdb0 	bl	800e4c0 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800e960:	4a29      	ldr	r2, [pc, #164]	; (800ea08 <Calculate_deltaEab+0xc8>)
 800e962:	f9b2 3000 	ldrsh.w	r3, [r2]
 800e966:	ee06 3a90 	vmov	s13, r3
 800e96a:	4b28      	ldr	r3, [pc, #160]	; (800ea0c <Calculate_deltaEab+0xcc>)
 800e96c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e970:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800e974:	ee06 1a90 	vmov	s13, r1
 800e978:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e97c:	4924      	ldr	r1, [pc, #144]	; (800ea10 <Calculate_deltaEab+0xd0>)
 800e97e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e982:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800e986:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800e98a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800e98e:	ee00 1a10 	vmov	s0, r1
 800e992:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800e996:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800e99a:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800e99e:	ee00 1a10 	vmov	s0, r1
 800e9a2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e9a6:	491b      	ldr	r1, [pc, #108]	; (800ea14 <Calculate_deltaEab+0xd4>)
 800e9a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800e9ac:	ee07 2a90 	vmov	s15, r2
 800e9b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e9b4:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800e9b8:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800e9bc:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800e9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800e9c4:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800e9c8:	4b13      	ldr	r3, [pc, #76]	; (800ea18 <Calculate_deltaEab+0xd8>)
 800e9ca:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800e9ce:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800e9d0:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800e9d4:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800e9d6:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800e9da:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800e9dc:	f014 fa2e 	bl	8022e3c <sqrtf>
 800e9e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e9e4:	edcd 7a01 	vstr	s15, [sp, #4]
}
 800e9e8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800e9ec:	b003      	add	sp, #12
 800e9ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9f2:	bf00      	nop
 800e9f4:	200056f6 	.word	0x200056f6
 800e9f8:	200056f4 	.word	0x200056f4
 800e9fc:	2008f518 	.word	0x2008f518
 800ea00:	20090a69 	.word	0x20090a69
 800ea04:	2008f512 	.word	0x2008f512
 800ea08:	2008f50c 	.word	0x2008f50c
 800ea0c:	20090ff8 	.word	0x20090ff8
 800ea10:	20090a48 	.word	0x20090a48
 800ea14:	20090a40 	.word	0x20090a40
 800ea18:	20090a58 	.word	0x20090a58
 800ea1c:	20005691 	.word	0x20005691

0800ea20 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800ea20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800ea22:	2903      	cmp	r1, #3
{
 800ea24:	460c      	mov	r4, r1
 800ea26:	bf88      	it	hi
 800ea28:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800ea2c:	f7fd f903 	bl	800bc36 <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800ea30:	aa04      	add	r2, sp, #16
 800ea32:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800ea36:	ca03      	ldmia	r2!, {r0, r1}
 800ea38:	4b0a      	ldr	r3, [pc, #40]	; (800ea64 <Calibration_Load_2byte+0x44>)
 800ea3a:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800ea3c:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800ea3e:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800ea40:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800ea44:	881a      	ldrh	r2, [r3, #0]
 800ea46:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800ea4a:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800ea4c:	889b      	ldrh	r3, [r3, #4]
 800ea4e:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800ea52:	ab04      	add	r3, sp, #16
 800ea54:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800ea58:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800ea5c:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800ea60:	b004      	add	sp, #16
 800ea62:	bd10      	pop	{r4, pc}
 800ea64:	200056d0 	.word	0x200056d0

0800ea68 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800ea68:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800ea6a:	2907      	cmp	r1, #7
{
 800ea6c:	b085      	sub	sp, #20
 800ea6e:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800ea70:	bf84      	itt	hi
 800ea72:	f1a1 0408 	subhi.w	r4, r1, #8
 800ea76:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800ea78:	f7fd f8dd 	bl	800bc36 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ea7c:	e9cd 0100 	strd	r0, r1, [sp]
 800ea80:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ea84:	ab04      	add	r3, sp, #16
 800ea86:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800ea8a:	4b0f      	ldr	r3, [pc, #60]	; (800eac8 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ea8c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ea90:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800ea94:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800ea98:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ea9c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800eaa0:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800eaa4:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800eaa8:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800eaac:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800eab0:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800eab4:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800eab6:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800eab8:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800eaba:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800eabc:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800eabe:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800eac0:	5d18      	ldrb	r0, [r3, r4]
 800eac2:	b005      	add	sp, #20
 800eac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac6:	bf00      	nop
 800eac8:	200056e4 	.word	0x200056e4

0800eacc <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800eacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800eace:	f7fd f8b2 	bl	800bc36 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ead2:	e9cd 0100 	strd	r0, r1, [sp]
 800ead6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800eada:	ab04      	add	r3, sp, #16
 800eadc:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800eae0:	9b02      	ldr	r3, [sp, #8]
 800eae2:	ba1b      	rev	r3, r3
}
 800eae4:	ee00 3a10 	vmov	s0, r3
 800eae8:	b005      	add	sp, #20
 800eaea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800eaf0 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800eaf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800eaf4:	f8df a078 	ldr.w	sl, [pc, #120]	; 800eb70 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800eaf8:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800eb68 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800eafc:	4c19      	ldr	r4, [pc, #100]	; (800eb64 <Calibration_Load_Pack+0x74>)
{
 800eafe:	4681      	mov	r9, r0
 800eb00:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800eb02:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800eb06:	2500      	movs	r5, #0
 800eb08:	00ae      	lsls	r6, r5, #2
 800eb0a:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800eb0c:	4540      	cmp	r0, r8
 800eb0e:	db01      	blt.n	800eb14 <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800eb10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800eb14:	4448      	add	r0, r9
 800eb16:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800eb1a:	f7fd f88c 	bl	800bc36 <flash_data_read_buff>
 800eb1e:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800eb22:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <Calibration_Load_Pack+0x78>)
 800eb24:	cb03      	ldmia	r3!, {r0, r1}
 800eb26:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800eb28:	7863      	ldrb	r3, [r4, #1]
 800eb2a:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800eb2c:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800eb2e:	041b      	lsls	r3, r3, #16
 800eb30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb34:	78e2      	ldrb	r2, [r4, #3]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	78a2      	ldrb	r2, [r4, #2]
 800eb3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800eb3e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800eb42:	7963      	ldrb	r3, [r4, #5]
 800eb44:	7922      	ldrb	r2, [r4, #4]
 800eb46:	041b      	lsls	r3, r3, #16
 800eb48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb4c:	79e2      	ldrb	r2, [r4, #7]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800eb52:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800eb54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb58:	4a04      	ldr	r2, [pc, #16]	; (800eb6c <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800eb5a:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800eb5c:	6013      	str	r3, [r2, #0]
		idx+=2;
 800eb5e:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800eb60:	6073      	str	r3, [r6, #4]
 800eb62:	e7d1      	b.n	800eb08 <Calibration_Load_Pack+0x18>
 800eb64:	200056d8 	.word	0x200056d8
 800eb68:	200056c8 	.word	0x200056c8
 800eb6c:	200056e0 	.word	0x200056e0
 800eb70:	20090a60 	.word	0x20090a60

0800eb74 <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800eb78:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800eb7c:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800eb80:	4629      	mov	r1, r5
 800eb82:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800eb86:	f7ff ff6f 	bl	800ea68 <Calibration_Load_1byte>
 800eb8a:	ee07 0a90 	vmov	s15, r0
 800eb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800eb96:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800eb9a:	08a8      	lsrs	r0, r5, #2
 800eb9c:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800eba0:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800eba4:	4b0d      	ldr	r3, [pc, #52]	; (800ebdc <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800eba6:	00c4      	lsls	r4, r0, #3
 800eba8:	4629      	mov	r1, r5
 800ebaa:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ebac:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ebb0:	f7ff ff36 	bl	800ea20 <Calibration_Load_2byte>
 800ebb4:	4b0a      	ldr	r3, [pc, #40]	; (800ebe0 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ebb6:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ebb8:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ebba:	f104 0014 	add.w	r0, r4, #20
 800ebbe:	f7ff ff2f 	bl	800ea20 <Calibration_Load_2byte>
 800ebc2:	ee07 0a90 	vmov	s15, r0
 800ebc6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ebe4 <Calibration_Exposure_Change+0x70>
 800ebca:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <Calibration_Exposure_Change+0x74>)
 800ebcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebd4:	edc3 7a00 	vstr	s15, [r3]
 800ebd8:	bd38      	pop	{r3, r4, r5, pc}
 800ebda:	bf00      	nop
 800ebdc:	2005192c 	.word	0x2005192c
 800ebe0:	20009d12 	.word	0x20009d12
 800ebe4:	42c80000 	.word	0x42c80000
 800ebe8:	20009d1c 	.word	0x20009d1c
 800ebec:	00000000 	.word	0x00000000

0800ebf0 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800ebf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ebf4:	a717      	add	r7, pc, #92	; (adr r7, 800ec54 <Calibration_WaveLenght_Graph+0x64>)
 800ebf6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ebfa:	f8df a060 	ldr.w	sl, [pc, #96]	; 800ec5c <Calibration_WaveLenght_Graph+0x6c>
 800ebfe:	4d14      	ldr	r5, [pc, #80]	; (800ec50 <Calibration_WaveLenght_Graph+0x60>)
 800ec00:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800ec60 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800ec04:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800ec64 <Calibration_WaveLenght_Graph+0x74>
{
 800ec08:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ec0c:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ec10:	2100      	movs	r1, #0
 800ec12:	4620      	mov	r0, r4
 800ec14:	f7ff ff04 	bl	800ea20 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ec18:	ee07 0a90 	vmov	s15, r0
 800ec1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ec20:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ec24:	ee17 0a90 	vmov	r0, s15
 800ec28:	f7f1 fca6 	bl	8000578 <__aeabi_f2d>
 800ec2c:	4642      	mov	r2, r8
 800ec2e:	464b      	mov	r3, r9
 800ec30:	f7f1 fe20 	bl	8000874 <__aeabi_ddiv>
 800ec34:	4632      	mov	r2, r6
 800ec36:	463b      	mov	r3, r7
 800ec38:	f7f1 fb40 	bl	80002bc <__adddf3>
 800ec3c:	f7f1 ffe8 	bl	8000c10 <__aeabi_d2f>
 800ec40:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800ec44:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ec46:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800ec4a:	d1e1      	bne.n	800ec10 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800ec4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec50:	20009cf0 	.word	0x20009cf0
 800ec54:	00000000 	.word	0x00000000
 800ec58:	4072c000 	.word	0x4072c000
 800ec5c:	20055936 	.word	0x20055936
 800ec60:	40590000 	.word	0x40590000
 800ec64:	08100920 	.word	0x08100920

0800ec68 <GUI_OptionMenuRu>:

extern uint16_t Touch_x, Touch_y;
uint16_t temp_x = 0, temp_y = 0;

void GUI_OptionMenuRu()
{	
 800ec68:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800ec6a:	2156      	movs	r1, #86	; 0x56
 800ec6c:	200a      	movs	r0, #10
 800ec6e:	f008 fffd 	bl	8017c6c <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800ec72:	2156      	movs	r1, #86	; 0x56
 800ec74:	2076      	movs	r0, #118	; 0x76
 800ec76:	f009 f82b 	bl	8017cd0 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800ec7a:	2156      	movs	r1, #86	; 0x56
 800ec7c:	20da      	movs	r0, #218	; 0xda
 800ec7e:	f004 f82c 	bl	8012cda <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ec82:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ec86:	2378      	movs	r3, #120	; 0x78
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ec8e:	9400      	str	r4, [sp, #0]
 800ec90:	200a      	movs	r0, #10
 800ec92:	f00d f863 	bl	801bd5c <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800ec96:	2191      	movs	r1, #145	; 0x91
 800ec98:	200a      	movs	r0, #10
 800ec9a:	f009 f861 	bl	8017d60 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800ec9e:	23b7      	movs	r3, #183	; 0xb7
 800eca0:	4619      	mov	r1, r3
 800eca2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eca6:	9400      	str	r4, [sp, #0]
 800eca8:	200a      	movs	r0, #10
 800ecaa:	f00d f857 	bl	801bd5c <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800ecae:	21d1      	movs	r1, #209	; 0xd1
 800ecb0:	200a      	movs	r0, #10
 800ecb2:	f009 f8f7 	bl	8017ea4 <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800ecb6:	4b21      	ldr	r3, [pc, #132]	; (800ed3c <GUI_OptionMenuRu+0xd4>)
 800ecb8:	21ca      	movs	r1, #202	; 0xca
 800ecba:	781a      	ldrb	r2, [r3, #0]
 800ecbc:	20b6      	movs	r0, #182	; 0xb6
 800ecbe:	f003 ffd3 	bl	8012c68 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f00d fad6 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800ecc8:	2063      	movs	r0, #99	; 0x63
 800ecca:	f00d fad9 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800ecce:	481c      	ldr	r0, [pc, #112]	; (800ed40 <GUI_OptionMenuRu+0xd8>)
 800ecd0:	f00d faca 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800ecd4:	2245      	movs	r2, #69	; 0x45
 800ecd6:	21d2      	movs	r1, #210	; 0xd2
 800ecd8:	20e1      	movs	r0, #225	; 0xe1
 800ecda:	f00d fb8f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800ecde:	224c      	movs	r2, #76	; 0x4c
 800ece0:	21d2      	movs	r1, #210	; 0xd2
 800ece2:	209b      	movs	r0, #155	; 0x9b
 800ece4:	f00d fb8a 	bl	801c3fc <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ece8:	23f8      	movs	r3, #248	; 0xf8
 800ecea:	4619      	mov	r1, r3
 800ecec:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ecf0:	9400      	str	r4, [sp, #0]
 800ecf2:	200a      	movs	r0, #10
 800ecf4:	f00d f832 	bl	801bd5c <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800ecf8:	f240 1113 	movw	r1, #275	; 0x113
 800ecfc:	200a      	movs	r0, #10
 800ecfe:	f007 faad 	bl	801625c <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ed02:	4b10      	ldr	r3, [pc, #64]	; (800ed44 <GUI_OptionMenuRu+0xdc>)
 800ed04:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ed08:	781a      	ldrb	r2, [r3, #0]
 800ed0a:	20b6      	movs	r0, #182	; 0xb6
 800ed0c:	f003 ff52 	bl	8012bb4 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800ed10:	f240 1113 	movw	r1, #275	; 0x113
 800ed14:	20de      	movs	r0, #222	; 0xde
 800ed16:	f007 fde1 	bl	80168dc <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800ed1a:	f240 1113 	movw	r1, #275	; 0x113
 800ed1e:	208c      	movs	r0, #140	; 0x8c
 800ed20:	f007 fe00 	bl	8016924 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ed24:	f240 1339 	movw	r3, #313	; 0x139
 800ed28:	9400      	str	r4, [sp, #0]
 800ed2a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ed2e:	4619      	mov	r1, r3
 800ed30:	200a      	movs	r0, #10
 800ed32:	f00d f813 	bl	801bd5c <TFT_DrawLine>
}
 800ed36:	b002      	add	sp, #8
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20000ebc 	.word	0x20000ebc
 800ed40:	200001b0 	.word	0x200001b0
 800ed44:	20090a6a 	.word	0x20090a6a

0800ed48 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800ed48:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800ed4a:	2158      	movs	r1, #88	; 0x58
 800ed4c:	200a      	movs	r0, #10
 800ed4e:	f007 fe89 	bl	8016a64 <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800ed52:	2158      	movs	r1, #88	; 0x58
 800ed54:	207f      	movs	r0, #127	; 0x7f
 800ed56:	f007 fed3 	bl	8016b00 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800ed5a:	2156      	movs	r1, #86	; 0x56
 800ed5c:	20da      	movs	r0, #218	; 0xda
 800ed5e:	f003 ffe6 	bl	8012d2e <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ed62:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ed66:	2378      	movs	r3, #120	; 0x78
 800ed68:	4619      	mov	r1, r3
 800ed6a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ed6e:	9400      	str	r4, [sp, #0]
 800ed70:	200a      	movs	r0, #10
 800ed72:	f00c fff3 	bl	801bd5c <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800ed76:	2193      	movs	r1, #147	; 0x93
 800ed78:	200a      	movs	r0, #10
 800ed7a:	f007 ff09 	bl	8016b90 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800ed7e:	23b7      	movs	r3, #183	; 0xb7
 800ed80:	4619      	mov	r1, r3
 800ed82:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ed86:	9400      	str	r4, [sp, #0]
 800ed88:	200a      	movs	r0, #10
 800ed8a:	f00c ffe7 	bl	801bd5c <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800ed8e:	21d3      	movs	r1, #211	; 0xd3
 800ed90:	200a      	movs	r0, #10
 800ed92:	f008 fa4b 	bl	801722c <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800ed96:	4b21      	ldr	r3, [pc, #132]	; (800ee1c <GUI_OptionMenuEn+0xd4>)
 800ed98:	21ca      	movs	r1, #202	; 0xca
 800ed9a:	781a      	ldrb	r2, [r3, #0]
 800ed9c:	20b6      	movs	r0, #182	; 0xb6
 800ed9e:	f003 ff63 	bl	8012c68 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800eda2:	4620      	mov	r0, r4
 800eda4:	f00d fa66 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800eda8:	2063      	movs	r0, #99	; 0x63
 800edaa:	f00d fa69 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800edae:	481c      	ldr	r0, [pc, #112]	; (800ee20 <GUI_OptionMenuEn+0xd8>)
 800edb0:	f00d fa5a 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800edb4:	2245      	movs	r2, #69	; 0x45
 800edb6:	21d2      	movs	r1, #210	; 0xd2
 800edb8:	20e1      	movs	r0, #225	; 0xe1
 800edba:	f00d fb1f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800edbe:	224c      	movs	r2, #76	; 0x4c
 800edc0:	21d2      	movs	r1, #210	; 0xd2
 800edc2:	209b      	movs	r0, #155	; 0x9b
 800edc4:	f00d fb1a 	bl	801c3fc <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800edc8:	23f8      	movs	r3, #248	; 0xf8
 800edca:	4619      	mov	r1, r3
 800edcc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800edd0:	9400      	str	r4, [sp, #0]
 800edd2:	200a      	movs	r0, #10
 800edd4:	f00c ffc2 	bl	801bd5c <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800edd8:	f240 1113 	movw	r1, #275	; 0x113
 800eddc:	200a      	movs	r0, #10
 800edde:	f007 fa3d 	bl	801625c <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ede2:	4b10      	ldr	r3, [pc, #64]	; (800ee24 <GUI_OptionMenuEn+0xdc>)
 800ede4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ede8:	781a      	ldrb	r2, [r3, #0]
 800edea:	20b6      	movs	r0, #182	; 0xb6
 800edec:	f003 fee2 	bl	8012bb4 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800edf0:	f240 1113 	movw	r1, #275	; 0x113
 800edf4:	20de      	movs	r0, #222	; 0xde
 800edf6:	f007 fd71 	bl	80168dc <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800edfa:	f240 1113 	movw	r1, #275	; 0x113
 800edfe:	208c      	movs	r0, #140	; 0x8c
 800ee00:	f007 fd90 	bl	8016924 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ee04:	f240 1339 	movw	r3, #313	; 0x139
 800ee08:	9400      	str	r4, [sp, #0]
 800ee0a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee0e:	4619      	mov	r1, r3
 800ee10:	200a      	movs	r0, #10
 800ee12:	f00c ffa3 	bl	801bd5c <TFT_DrawLine>
}
 800ee16:	b002      	add	sp, #8
 800ee18:	bd10      	pop	{r4, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20000ebc 	.word	0x20000ebc
 800ee20:	200001b0 	.word	0x200001b0
 800ee24:	20090a6a 	.word	0x20090a6a

0800ee28 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800ee28:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800ee2a:	2084      	movs	r0, #132	; 0x84
 800ee2c:	f00c fdf4 	bl	801ba18 <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800ee30:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800ee34:	2050      	movs	r0, #80	; 0x50
 800ee36:	f008 fe7b 	bl	8017b30 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800ee3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ee3e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800ee42:	20b4      	movs	r0, #180	; 0xb4
 800ee44:	f008 fece 	bl	8017be4 <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800ee48:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ee4c:	f8ad 3000 	strh.w	r3, [sp]
 800ee50:	23b5      	movs	r3, #181	; 0xb5
 800ee52:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ee56:	4b08      	ldr	r3, [pc, #32]	; (800ee78 <GUI_Title_Screen+0x50>)
 800ee58:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800ee5a:	ab02      	add	r3, sp, #8
 800ee5c:	e913 000c 	ldmdb	r3, {r2, r3}
 800ee60:	2164      	movs	r1, #100	; 0x64
 800ee62:	2000      	movs	r0, #0
 800ee64:	f00d f9d9 	bl	801c21a <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800ee68:	4a04      	ldr	r2, [pc, #16]	; (800ee7c <GUI_Title_Screen+0x54>)
 800ee6a:	7813      	ldrb	r3, [r2, #0]
 800ee6c:	f043 0301 	orr.w	r3, r3, #1
 800ee70:	7013      	strb	r3, [r2, #0]
}
 800ee72:	b003      	add	sp, #12
 800ee74:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee78:	20055942 	.word	0x20055942
 800ee7c:	200056f4 	.word	0x200056f4

0800ee80 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800ee80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800ee84:	4da4      	ldr	r5, [pc, #656]	; (800f118 <Measure_Elements_Draw+0x298>)
 800ee86:	4fa5      	ldr	r7, [pc, #660]	; (800f11c <Measure_Elements_Draw+0x29c>)
{	
 800ee88:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800ee8a:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800ee8c:	2e0e      	cmp	r6, #14
 800ee8e:	f200 8099 	bhi.w	800efc4 <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800ee92:	782b      	ldrb	r3, [r5, #0]
 800ee94:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800ee96:	2e0c      	cmp	r6, #12
 800ee98:	f200 808c 	bhi.w	800efb4 <Measure_Elements_Draw+0x134>
 800ee9c:	e8df f016 	tbh	[pc, r6, lsl #1]
 800eea0:	0035000d 	.word	0x0035000d
 800eea4:	0060004c 	.word	0x0060004c
 800eea8:	00ba0095 	.word	0x00ba0095
 800eeac:	00fc00d2 	.word	0x00fc00d2
 800eeb0:	01680124 	.word	0x01680124
 800eeb4:	019a0183 	.word	0x019a0183
 800eeb8:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800eeba:	4a99      	ldr	r2, [pc, #612]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800eebc:	8812      	ldrh	r2, [r2, #0]
 800eebe:	07d2      	lsls	r2, r2, #31
 800eec0:	d578      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800eec2:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800eec6:	f280 81b9 	bge.w	800f23c <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800eeca:	4b96      	ldr	r3, [pc, #600]	; (800f124 <Measure_Elements_Draw+0x2a4>)
 800eecc:	4996      	ldr	r1, [pc, #600]	; (800f128 <Measure_Elements_Draw+0x2a8>)
 800eece:	781a      	ldrb	r2, [r3, #0]
 800eed0:	4b96      	ldr	r3, [pc, #600]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800eed2:	4897      	ldr	r0, [pc, #604]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	b17a      	cbz	r2, 800eef8 <Measure_Elements_Draw+0x78>
 800eed8:	7802      	ldrb	r2, [r0, #0]
 800eeda:	9200      	str	r2, [sp, #0]
 800eedc:	ed91 0a00 	vldr	s0, [r1]
 800eee0:	2200      	movs	r2, #0
 800eee2:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800eee4:	2014      	movs	r0, #20
 800eee6:	f004 f843 	bl	8012f70 <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800eeea:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800eeee:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800eef2:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800eef4:	9200      	str	r2, [sp, #0]
 800eef6:	e085      	b.n	800f004 <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800eef8:	7800      	ldrb	r0, [r0, #0]
 800eefa:	9000      	str	r0, [sp, #0]
 800eefc:	ed91 0a00 	vldr	s0, [r1]
 800ef00:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800ef02:	2014      	movs	r0, #20
 800ef04:	f004 fa4e 	bl	80133a4 <GUI_Text_L_Measure>
 800ef08:	e7ef      	b.n	800eeea <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800ef0a:	4a85      	ldr	r2, [pc, #532]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800ef0c:	8812      	ldrh	r2, [r2, #0]
 800ef0e:	0790      	lsls	r0, r2, #30
 800ef10:	d550      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800ef12:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800ef16:	f280 8191 	bge.w	800f23c <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800ef1a:	4b82      	ldr	r3, [pc, #520]	; (800f124 <Measure_Elements_Draw+0x2a4>)
 800ef1c:	4a84      	ldr	r2, [pc, #528]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800ef1e:	7818      	ldrb	r0, [r3, #0]
 800ef20:	4b82      	ldr	r3, [pc, #520]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800ef22:	4984      	ldr	r1, [pc, #528]	; (800f134 <Measure_Elements_Draw+0x2b4>)
 800ef24:	7812      	ldrb	r2, [r2, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	9200      	str	r2, [sp, #0]
 800ef2a:	ed91 0a00 	vldr	s0, [r1]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4621      	mov	r1, r4
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d0e5      	beq.n	800ef02 <Measure_Elements_Draw+0x82>
 800ef36:	e7d5      	b.n	800eee4 <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800ef38:	4a79      	ldr	r2, [pc, #484]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800ef3a:	8812      	ldrh	r2, [r2, #0]
 800ef3c:	0751      	lsls	r1, r2, #29
 800ef3e:	d539      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800ef40:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800ef44:	f280 817a 	bge.w	800f23c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800ef48:	497b      	ldr	r1, [pc, #492]	; (800f138 <Measure_Elements_Draw+0x2b8>)
 800ef4a:	4b79      	ldr	r3, [pc, #484]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800ef4c:	4a77      	ldr	r2, [pc, #476]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800ef4e:	ed91 0a00 	vldr	s0, [r1]
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	7812      	ldrb	r2, [r2, #0]
 800ef56:	4621      	mov	r1, r4
 800ef58:	2014      	movs	r0, #20
 800ef5a:	f004 fc01 	bl	8013760 <GUI_Text_PPF_Measure>
 800ef5e:	e7c4      	b.n	800eeea <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800ef60:	4a6f      	ldr	r2, [pc, #444]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800ef62:	8812      	ldrh	r2, [r2, #0]
 800ef64:	0712      	lsls	r2, r2, #28
 800ef66:	d525      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800ef68:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800ef6c:	f280 8166 	bge.w	800f23c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800ef70:	4972      	ldr	r1, [pc, #456]	; (800f13c <Measure_Elements_Draw+0x2bc>)
 800ef72:	4b6f      	ldr	r3, [pc, #444]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800ef74:	edd1 1a00 	vldr	s3, [r1]
 800ef78:	4971      	ldr	r1, [pc, #452]	; (800f140 <Measure_Elements_Draw+0x2c0>)
 800ef7a:	4a6c      	ldr	r2, [pc, #432]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800ef7c:	ed91 1a00 	vldr	s2, [r1]
 800ef80:	4970      	ldr	r1, [pc, #448]	; (800f144 <Measure_Elements_Draw+0x2c4>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	edd1 0a00 	vldr	s1, [r1]
 800ef88:	496f      	ldr	r1, [pc, #444]	; (800f148 <Measure_Elements_Draw+0x2c8>)
 800ef8a:	7812      	ldrb	r2, [r2, #0]
 800ef8c:	ed91 0a00 	vldr	s0, [r1]
 800ef90:	2014      	movs	r0, #20
 800ef92:	4621      	mov	r1, r4
 800ef94:	f004 fd64 	bl	8013a60 <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800ef98:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800ef9c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800ef9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa2:	9200      	str	r2, [sp, #0]
 800efa4:	4619      	mov	r1, r3
 800efa6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800efaa:	200a      	movs	r0, #10
 800efac:	f00c fed6 	bl	801bd5c <TFT_DrawLine>
									Y+=10;
 800efb0:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800efb2:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800efb4:	782b      	ldrb	r3, [r5, #0]
 800efb6:	783a      	ldrb	r2, [r7, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	f000 8142 	beq.w	800f242 <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800efbe:	4a63      	ldr	r2, [pc, #396]	; (800f14c <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800efc0:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800efc2:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800efc4:	b004      	add	sp, #16
 800efc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800efca:	4a55      	ldr	r2, [pc, #340]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800efcc:	8812      	ldrh	r2, [r2, #0]
 800efce:	05d0      	lsls	r0, r2, #23
 800efd0:	d5f0      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800efd2:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800efd6:	f280 8131 	bge.w	800f23c <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800efda:	4b5d      	ldr	r3, [pc, #372]	; (800f150 <Measure_Elements_Draw+0x2d0>)
 800efdc:	4954      	ldr	r1, [pc, #336]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800efde:	881a      	ldrh	r2, [r3, #0]
 800efe0:	4b52      	ldr	r3, [pc, #328]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800efe2:	7809      	ldrb	r1, [r1, #0]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	9100      	str	r1, [sp, #0]
 800efe8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800efec:	4542      	cmp	r2, r8
 800efee:	bf08      	it	eq
 800eff0:	2200      	moveq	r2, #0
 800eff2:	4621      	mov	r1, r4
 800eff4:	2014      	movs	r0, #20
 800eff6:	f005 fc65 	bl	80148c4 <GUI_Text_CCT_Measure>
									Y+=35;
 800effa:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800effe:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f000:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f004:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f008:	4619      	mov	r1, r3
 800f00a:	200a      	movs	r0, #10
 800f00c:	f00c fea6 	bl	801bd5c <TFT_DrawLine>
									Y+=10;
 800f010:	342d      	adds	r4, #45	; 0x2d
 800f012:	e7ce      	b.n	800efb2 <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f014:	4a42      	ldr	r2, [pc, #264]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800f016:	8812      	ldrh	r2, [r2, #0]
 800f018:	0511      	lsls	r1, r2, #20
 800f01a:	d5cb      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f01c:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f020:	f280 810c 	bge.w	800f23c <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f024:	4b4b      	ldr	r3, [pc, #300]	; (800f154 <Measure_Elements_Draw+0x2d4>)
 800f026:	4a41      	ldr	r2, [pc, #260]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800f028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f02c:	7812      	ldrb	r2, [r2, #0]
 800f02e:	ee00 3a10 	vmov	s0, r3
 800f032:	4b3f      	ldr	r3, [pc, #252]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800f034:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	4621      	mov	r1, r4
 800f03c:	2014      	movs	r0, #20
 800f03e:	f005 fe39 	bl	8014cb4 <GUI_Text_deltaE_Measure>
 800f042:	e752      	b.n	800eeea <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f044:	4a36      	ldr	r2, [pc, #216]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800f046:	8812      	ldrh	r2, [r2, #0]
 800f048:	06d2      	lsls	r2, r2, #27
 800f04a:	d5b3      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f04c:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f050:	f280 80f4 	bge.w	800f23c <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f054:	4b40      	ldr	r3, [pc, #256]	; (800f158 <Measure_Elements_Draw+0x2d8>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	b9e3      	cbnz	r3, 800f094 <Measure_Elements_Draw+0x214>
 800f05a:	4940      	ldr	r1, [pc, #256]	; (800f15c <Measure_Elements_Draw+0x2dc>)
 800f05c:	4834      	ldr	r0, [pc, #208]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800f05e:	880a      	ldrh	r2, [r1, #0]
 800f060:	7800      	ldrb	r0, [r0, #0]
 800f062:	884b      	ldrh	r3, [r1, #2]
 800f064:	8889      	ldrh	r1, [r1, #4]
 800f066:	9002      	str	r0, [sp, #8]
 800f068:	4830      	ldr	r0, [pc, #192]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800f06a:	7800      	ldrb	r0, [r0, #0]
 800f06c:	9001      	str	r0, [sp, #4]
 800f06e:	9100      	str	r1, [sp, #0]
 800f070:	2014      	movs	r0, #20
 800f072:	4621      	mov	r1, r4
 800f074:	f005 f8f4 	bl	8014260 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f078:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f07c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f07e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f082:	9200      	str	r2, [sp, #0]
 800f084:	4619      	mov	r1, r3
 800f086:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f08a:	200a      	movs	r0, #10
 800f08c:	f00c fe66 	bl	801bd5c <TFT_DrawLine>
									Y+=10;
 800f090:	3473      	adds	r4, #115	; 0x73
 800f092:	e78e      	b.n	800efb2 <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f094:	4932      	ldr	r1, [pc, #200]	; (800f160 <Measure_Elements_Draw+0x2e0>)
 800f096:	e7e1      	b.n	800f05c <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f098:	4a21      	ldr	r2, [pc, #132]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800f09a:	8812      	ldrh	r2, [r2, #0]
 800f09c:	0690      	lsls	r0, r2, #26
 800f09e:	d589      	bpl.n	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f0a0:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f0a4:	f300 80ca 	bgt.w	800f23c <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f0a8:	4b2b      	ldr	r3, [pc, #172]	; (800f158 <Measure_Elements_Draw+0x2d8>)
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	b9d3      	cbnz	r3, 800f0e4 <Measure_Elements_Draw+0x264>
 800f0ae:	4b2d      	ldr	r3, [pc, #180]	; (800f164 <Measure_Elements_Draw+0x2e4>)
 800f0b0:	ed93 0a00 	vldr	s0, [r3]
 800f0b4:	edd3 0a01 	vldr	s1, [r3, #4]
 800f0b8:	4a1c      	ldr	r2, [pc, #112]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800f0ba:	4b1d      	ldr	r3, [pc, #116]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800f0bc:	7812      	ldrb	r2, [r2, #0]
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	4621      	mov	r1, r4
 800f0c2:	2014      	movs	r0, #20
 800f0c4:	f005 fa5a 	bl	801457c <GUI_Text_xy_Measure>
									Y+=70;
 800f0c8:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f0cc:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f0ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0d2:	9200      	str	r2, [sp, #0]
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f0da:	200a      	movs	r0, #10
 800f0dc:	f00c fe3e 	bl	801bd5c <TFT_DrawLine>
									Y+=10;
 800f0e0:	3450      	adds	r4, #80	; 0x50
 800f0e2:	e766      	b.n	800efb2 <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f0e4:	4b20      	ldr	r3, [pc, #128]	; (800f168 <Measure_Elements_Draw+0x2e8>)
 800f0e6:	e7e3      	b.n	800f0b0 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f0e8:	4a0d      	ldr	r2, [pc, #52]	; (800f120 <Measure_Elements_Draw+0x2a0>)
 800f0ea:	8812      	ldrh	r2, [r2, #0]
 800f0ec:	0651      	lsls	r1, r2, #25
 800f0ee:	f57f af61 	bpl.w	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f0f2:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f0f6:	f300 80a1 	bgt.w	800f23c <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f0fa:	491c      	ldr	r1, [pc, #112]	; (800f16c <Measure_Elements_Draw+0x2ec>)
 800f0fc:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <Measure_Elements_Draw+0x2b0>)
 800f0fe:	4a0b      	ldr	r2, [pc, #44]	; (800f12c <Measure_Elements_Draw+0x2ac>)
 800f100:	edd1 0a01 	vldr	s1, [r1, #4]
 800f104:	ed91 0a00 	vldr	s0, [r1]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	7812      	ldrb	r2, [r2, #0]
 800f10c:	4621      	mov	r1, r4
 800f10e:	2014      	movs	r0, #20
 800f110:	f005 faf6 	bl	8014700 <GUI_Text_uv_Measure>
 800f114:	e7d8      	b.n	800f0c8 <Measure_Elements_Draw+0x248>
 800f116:	bf00      	nop
 800f118:	2000571b 	.word	0x2000571b
 800f11c:	2000571c 	.word	0x2000571c
 800f120:	200056f6 	.word	0x200056f6
 800f124:	20000ebc 	.word	0x20000ebc
 800f128:	20095c5c 	.word	0x20095c5c
 800f12c:	20000ec1 	.word	0x20000ec1
 800f130:	20000ec0 	.word	0x20000ec0
 800f134:	200956c8 	.word	0x200956c8
 800f138:	200956d0 	.word	0x200956d0
 800f13c:	200956cc 	.word	0x200956cc
 800f140:	2009583c 	.word	0x2009583c
 800f144:	20095b38 	.word	0x20095b38
 800f148:	20095a74 	.word	0x20095a74
 800f14c:	20005720 	.word	0x20005720
 800f150:	20054930 	.word	0x20054930
 800f154:	20090a66 	.word	0x20090a66
 800f158:	200056f4 	.word	0x200056f4
 800f15c:	2008f518 	.word	0x2008f518
 800f160:	2008f512 	.word	0x2008f512
 800f164:	2008f538 	.word	0x2008f538
 800f168:	2008f530 	.word	0x2008f530
 800f16c:	2008f528 	.word	0x2008f528
				case 9: if(Measure_Field&CIE_Lab){
 800f170:	4a35      	ldr	r2, [pc, #212]	; (800f248 <Measure_Elements_Draw+0x3c8>)
 800f172:	8812      	ldrh	r2, [r2, #0]
 800f174:	0612      	lsls	r2, r2, #24
 800f176:	f57f af1d 	bpl.w	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800f17a:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f17e:	da5d      	bge.n	800f23c <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800f180:	4832      	ldr	r0, [pc, #200]	; (800f24c <Measure_Elements_Draw+0x3cc>)
 800f182:	4933      	ldr	r1, [pc, #204]	; (800f250 <Measure_Elements_Draw+0x3d0>)
 800f184:	7800      	ldrb	r0, [r0, #0]
 800f186:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f18a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f18e:	9002      	str	r0, [sp, #8]
 800f190:	4830      	ldr	r0, [pc, #192]	; (800f254 <Measure_Elements_Draw+0x3d4>)
 800f192:	7800      	ldrb	r0, [r0, #0]
 800f194:	9001      	str	r0, [sp, #4]
 800f196:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f19a:	9100      	str	r1, [sp, #0]
 800f19c:	2014      	movs	r0, #20
 800f19e:	4621      	mov	r1, r4
 800f1a0:	f006 fa66 	bl	8015670 <GUI_Text_LAB_Measure>
 800f1a4:	e768      	b.n	800f078 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800f1a6:	4a28      	ldr	r2, [pc, #160]	; (800f248 <Measure_Elements_Draw+0x3c8>)
 800f1a8:	8812      	ldrh	r2, [r2, #0]
 800f1aa:	0590      	lsls	r0, r2, #22
 800f1ac:	f57f af02 	bpl.w	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f1b0:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f1b4:	da42      	bge.n	800f23c <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800f1b6:	4b28      	ldr	r3, [pc, #160]	; (800f258 <Measure_Elements_Draw+0x3d8>)
 800f1b8:	4a26      	ldr	r2, [pc, #152]	; (800f254 <Measure_Elements_Draw+0x3d4>)
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	7812      	ldrb	r2, [r2, #0]
 800f1be:	ee00 3a10 	vmov	s0, r3
 800f1c2:	4b22      	ldr	r3, [pc, #136]	; (800f24c <Measure_Elements_Draw+0x3cc>)
 800f1c4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	2014      	movs	r0, #20
 800f1ce:	f005 fc73 	bl	8014ab8 <GUI_Text_lambdaD_Measure>
 800f1d2:	e68a      	b.n	800eeea <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800f1d4:	4a1c      	ldr	r2, [pc, #112]	; (800f248 <Measure_Elements_Draw+0x3c8>)
 800f1d6:	8812      	ldrh	r2, [r2, #0]
 800f1d8:	04d1      	lsls	r1, r2, #19
 800f1da:	f57f aeeb 	bpl.w	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f1de:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f1e2:	dc2b      	bgt.n	800f23c <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800f1e4:	4b1d      	ldr	r3, [pc, #116]	; (800f25c <Measure_Elements_Draw+0x3dc>)
 800f1e6:	481e      	ldr	r0, [pc, #120]	; (800f260 <Measure_Elements_Draw+0x3e0>)
 800f1e8:	491e      	ldr	r1, [pc, #120]	; (800f264 <Measure_Elements_Draw+0x3e4>)
 800f1ea:	f893 e000 	ldrb.w	lr, [r3]
 800f1ee:	4a19      	ldr	r2, [pc, #100]	; (800f254 <Measure_Elements_Draw+0x3d4>)
 800f1f0:	4b16      	ldr	r3, [pc, #88]	; (800f24c <Measure_Elements_Draw+0x3cc>)
 800f1f2:	edd0 0a00 	vldr	s1, [r0]
 800f1f6:	ed91 0a00 	vldr	s0, [r1]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	7812      	ldrb	r2, [r2, #0]
 800f1fe:	4621      	mov	r1, r4
 800f200:	2014      	movs	r0, #20
 800f202:	f1be 0f00 	cmp.w	lr, #0
 800f206:	d002      	beq.n	800f20e <Measure_Elements_Draw+0x38e>
 800f208:	f005 fe58 	bl	8014ebc <GUI_Text_EbEr_Measure>
 800f20c:	e75c      	b.n	800f0c8 <Measure_Elements_Draw+0x248>
 800f20e:	f005 ffdd 	bl	80151cc <GUI_Text_LbLr_Measure>
 800f212:	e759      	b.n	800f0c8 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800f214:	4a0c      	ldr	r2, [pc, #48]	; (800f248 <Measure_Elements_Draw+0x3c8>)
 800f216:	8812      	ldrh	r2, [r2, #0]
 800f218:	0492      	lsls	r2, r2, #18
 800f21a:	f57f aecb 	bpl.w	800efb4 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f21e:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f222:	da0b      	bge.n	800f23c <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800f224:	4910      	ldr	r1, [pc, #64]	; (800f268 <Measure_Elements_Draw+0x3e8>)
 800f226:	4b09      	ldr	r3, [pc, #36]	; (800f24c <Measure_Elements_Draw+0x3cc>)
 800f228:	4a0a      	ldr	r2, [pc, #40]	; (800f254 <Measure_Elements_Draw+0x3d4>)
 800f22a:	ed91 0a00 	vldr	s0, [r1]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	7812      	ldrb	r2, [r2, #0]
 800f232:	4621      	mov	r1, r4
 800f234:	2014      	movs	r0, #20
 800f236:	f006 f955 	bl	80154e4 <GUI_Text_S_P_Measure>
 800f23a:	e656      	b.n	800eeea <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800f23c:	3301      	adds	r3, #1
 800f23e:	702b      	strb	r3, [r5, #0]
 800f240:	e6b8      	b.n	800efb4 <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f242:	3601      	adds	r6, #1
 800f244:	b2f6      	uxtb	r6, r6
 800f246:	e621      	b.n	800ee8c <Measure_Elements_Draw+0xc>
 800f248:	200056f6 	.word	0x200056f6
 800f24c:	20000ec0 	.word	0x20000ec0
 800f250:	2008f50c 	.word	0x2008f50c
 800f254:	20000ec1 	.word	0x20000ec1
 800f258:	20095b34 	.word	0x20095b34
 800f25c:	20000ebc 	.word	0x20000ebc
 800f260:	20095c58 	.word	0x20095c58
 800f264:	20095c54 	.word	0x20095c54
 800f268:	20095838 	.word	0x20095838

0800f26c <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800f26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f26e:	4b1e      	ldr	r3, [pc, #120]	; (800f2e8 <GUI_Information_Screen+0x7c>)
 800f270:	4a1e      	ldr	r2, [pc, #120]	; (800f2ec <GUI_Information_Screen+0x80>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	7812      	ldrb	r2, [r2, #0]
 800f276:	429a      	cmp	r2, r3
 800f278:	d034      	beq.n	800f2e4 <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f27a:	2063      	movs	r0, #99	; 0x63
 800f27c:	f00c fbcc 	bl	801ba18 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f280:	4b1b      	ldr	r3, [pc, #108]	; (800f2f0 <GUI_Information_Screen+0x84>)
 800f282:	491c      	ldr	r1, [pc, #112]	; (800f2f4 <GUI_Information_Screen+0x88>)
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	4a1c      	ldr	r2, [pc, #112]	; (800f2f8 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f288:	8809      	ldrh	r1, [r1, #0]
 800f28a:	7812      	ldrb	r2, [r2, #0]
 800f28c:	4d1b      	ldr	r5, [pc, #108]	; (800f2fc <GUI_Information_Screen+0x90>)
 800f28e:	4c1c      	ldr	r4, [pc, #112]	; (800f300 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800f290:	2b01      	cmp	r3, #1
 800f292:	4b1c      	ldr	r3, [pc, #112]	; (800f304 <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	9100      	str	r1, [sp, #0]
 800f298:	f04f 0100 	mov.w	r1, #0
 800f29c:	4608      	mov	r0, r1
		if(Language_status == En){
 800f29e:	d110      	bne.n	800f2c2 <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f2a0:	f008 fada 	bl	8017858 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f2a4:	2100      	movs	r1, #0
 800f2a6:	4608      	mov	r0, r1
 800f2a8:	882b      	ldrh	r3, [r5, #0]
 800f2aa:	8822      	ldrh	r2, [r4, #0]
 800f2ac:	f008 fb56 	bl	801795c <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f2b6:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800f2b8:	b003      	add	sp, #12
 800f2ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f2be:	f008 bbc3 	b.w	8017a48 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f2c2:	f008 ffaf 	bl	8018224 <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	882b      	ldrh	r3, [r5, #0]
 800f2cc:	8822      	ldrh	r2, [r4, #0]
 800f2ce:	f009 f867 	bl	80183a0 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f2d8:	4608      	mov	r0, r1
}
 800f2da:	b003      	add	sp, #12
 800f2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f2e0:	f009 b8d8 	b.w	8018494 <GUI_TextRu_Info_Ver>
}
 800f2e4:	b003      	add	sp, #12
 800f2e6:	bd30      	pop	{r4, r5, pc}
 800f2e8:	2000022a 	.word	0x2000022a
 800f2ec:	200056f1 	.word	0x200056f1
 800f2f0:	200056f3 	.word	0x200056f3
 800f2f4:	200959e0 	.word	0x200959e0
 800f2f8:	200956c0 	.word	0x200956c0
 800f2fc:	20095a88 	.word	0x20095a88
 800f300:	200956c4 	.word	0x200956c4
 800f304:	200956d4 	.word	0x200956d4

0800f308 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800f308:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800f30a:	4b29      	ldr	r3, [pc, #164]	; (800f3b0 <GUI_SD_Write_Screen+0xa8>)
 800f30c:	4d29      	ldr	r5, [pc, #164]	; (800f3b4 <GUI_SD_Write_Screen+0xac>)
 800f30e:	781a      	ldrb	r2, [r3, #0]
 800f310:	7829      	ldrb	r1, [r5, #0]
 800f312:	4291      	cmp	r1, r2
 800f314:	d020      	beq.n	800f358 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800f316:	4b28      	ldr	r3, [pc, #160]	; (800f3b8 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800f318:	4c28      	ldr	r4, [pc, #160]	; (800f3bc <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800f31a:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f31c:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800f31e:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f320:	f00c fb7a 	bl	801ba18 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f324:	7822      	ldrb	r2, [r4, #0]
 800f326:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800f328:	f04f 0178 	mov.w	r1, #120	; 0x78
 800f32c:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800f330:	d13a      	bne.n	800f3a8 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800f332:	f008 fa57 	bl	80177e4 <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800f336:	4b22      	ldr	r3, [pc, #136]	; (800f3c0 <GUI_SD_Write_Screen+0xb8>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	b96b      	cbnz	r3, 800f358 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800f33c:	f00a fab8 	bl	80198b0 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800f340:	7821      	ldrb	r1, [r4, #0]
 800f342:	4c20      	ldr	r4, [pc, #128]	; (800f3c4 <GUI_SD_Write_Screen+0xbc>)
 800f344:	4b20      	ldr	r3, [pc, #128]	; (800f3c8 <GUI_SD_Write_Screen+0xc0>)
 800f346:	4a21      	ldr	r2, [pc, #132]	; (800f3cc <GUI_SD_Write_Screen+0xc4>)
 800f348:	4821      	ldr	r0, [pc, #132]	; (800f3d0 <GUI_SD_Write_Screen+0xc8>)
 800f34a:	7824      	ldrb	r4, [r4, #0]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	7812      	ldrb	r2, [r2, #0]
 800f350:	8800      	ldrh	r0, [r0, #0]
 800f352:	9400      	str	r4, [sp, #0]
 800f354:	f00a fba0 	bl	8019a98 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800f358:	4c1e      	ldr	r4, [pc, #120]	; (800f3d4 <GUI_SD_Write_Screen+0xcc>)
 800f35a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f35e:	f7f1 fc57 	bl	8000c10 <__aeabi_d2f>
 800f362:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f366:	ee00 0a10 	vmov	s0, r0
 800f36a:	2055      	movs	r0, #85	; 0x55
 800f36c:	f003 fdd0 	bl	8012f10 <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800f370:	2200      	movs	r2, #0
 800f372:	4b19      	ldr	r3, [pc, #100]	; (800f3d8 <GUI_SD_Write_Screen+0xd0>)
 800f374:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f378:	f7f1 fbba 	bl	8000af0 <__aeabi_dcmpeq>
 800f37c:	b190      	cbz	r0, 800f3a4 <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800f37e:	4b14      	ldr	r3, [pc, #80]	; (800f3d0 <GUI_SD_Write_Screen+0xc8>)
 800f380:	881a      	ldrh	r2, [r3, #0]
 800f382:	f240 31e6 	movw	r1, #998	; 0x3e6
 800f386:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800f388:	bf94      	ite	ls
 800f38a:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800f38c:	2200      	movhi	r2, #0
 800f38e:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800f390:	8818      	ldrh	r0, [r3, #0]
 800f392:	2100      	movs	r1, #0
 800f394:	f00a f97e 	bl	8019694 <WriteSDFLASH_t>
			pause = 0; 
 800f398:	4b07      	ldr	r3, [pc, #28]	; (800f3b8 <GUI_SD_Write_Screen+0xb0>)
 800f39a:	2200      	movs	r2, #0
 800f39c:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800f39e:	4b0f      	ldr	r3, [pc, #60]	; (800f3dc <GUI_SD_Write_Screen+0xd4>)
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	702b      	strb	r3, [r5, #0]
	}

}
 800f3a4:	b003      	add	sp, #12
 800f3a6:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800f3a8:	f008 ffba 	bl	8018320 <GUI_TextRu_WriteSD>
 800f3ac:	e7c3      	b.n	800f336 <GUI_SD_Write_Screen+0x2e>
 800f3ae:	bf00      	nop
 800f3b0:	2000022a 	.word	0x2000022a
 800f3b4:	200056f1 	.word	0x200056f1
 800f3b8:	20005718 	.word	0x20005718
 800f3bc:	200056f3 	.word	0x200056f3
 800f3c0:	20095c10 	.word	0x20095c10
 800f3c4:	200056ec 	.word	0x200056ec
 800f3c8:	20000ebc 	.word	0x20000ebc
 800f3cc:	20000228 	.word	0x20000228
 800f3d0:	2000571e 	.word	0x2000571e
 800f3d4:	20009750 	.word	0x20009750
 800f3d8:	3ff00000 	.word	0x3ff00000
 800f3dc:	20090a65 	.word	0x20090a65

0800f3e0 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800f3e0:	4b0f      	ldr	r3, [pc, #60]	; (800f420 <GUI_Up_Panel+0x40>)
{
 800f3e2:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	ed93 0b00 	vldr	d0, [r3]
 800f3ea:	4608      	mov	r0, r1
 800f3ec:	f006 fb3c 	bl	8015a68 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800f3f0:	4b0c      	ldr	r3, [pc, #48]	; (800f424 <GUI_Up_Panel+0x44>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d106      	bne.n	800f406 <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800f3f8:	2102      	movs	r1, #2
 800f3fa:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800f3fc:	b003      	add	sp, #12
 800f3fe:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800f402:	f002 bdf3 	b.w	8011fec <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800f406:	2363      	movs	r3, #99	; 0x63
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f40e:	2323      	movs	r3, #35	; 0x23
 800f410:	2101      	movs	r1, #1
 800f412:	20ef      	movs	r0, #239	; 0xef
 800f414:	f00c fcff 	bl	801be16 <TFT_FillRectangle>
}
 800f418:	b003      	add	sp, #12
 800f41a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f41e:	bf00      	nop
 800f420:	20095b40 	.word	0x20095b40
 800f424:	20090a6a 	.word	0x20090a6a

0800f428 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800f428:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800f42a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f42e:	2001      	movs	r0, #1
 800f430:	f002 fe2e 	bl	8012090 <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800f434:	4b1b      	ldr	r3, [pc, #108]	; (800f4a4 <GUI_Down_Panel+0x7c>)
 800f436:	781a      	ldrb	r2, [r3, #0]
 800f438:	fab2 f282 	clz	r2, r2
 800f43c:	0952      	lsrs	r2, r2, #5
 800f43e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f442:	2037      	movs	r0, #55	; 0x37
 800f444:	f002 ffde 	bl	8012404 <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800f448:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f44c:	206d      	movs	r0, #109	; 0x6d
 800f44e:	f003 f8a5 	bl	801259c <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800f452:	4b15      	ldr	r3, [pc, #84]	; (800f4a8 <GUI_Down_Panel+0x80>)
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	2b06      	cmp	r3, #6
 800f458:	d90b      	bls.n	800f472 <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800f45a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f45e:	20a3      	movs	r0, #163	; 0xa3
 800f460:	f002 fe54 	bl	801210c <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800f464:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f468:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800f46a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800f46e:	f002 bf26 	b.w	80122be <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800f472:	2b03      	cmp	r3, #3
 800f474:	d810      	bhi.n	800f498 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800f476:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <GUI_Down_Panel+0x84>)
 800f478:	781a      	ldrb	r2, [r3, #0]
 800f47a:	3200      	adds	r2, #0
 800f47c:	bf18      	it	ne
 800f47e:	2201      	movne	r2, #1
 800f480:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f484:	20a3      	movs	r0, #163	; 0xa3
 800f486:	f002 fe86 	bl	8012196 <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800f48a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f48e:	20d9      	movs	r0, #217	; 0xd9
}
 800f490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800f494:	f002 bec9 	b.w	801222a <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800f498:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f49c:	20a3      	movs	r0, #163	; 0xa3
 800f49e:	f002 ff3c 	bl	801231a <GUI_Button_TFT_Rotate>
 800f4a2:	e7f2      	b.n	800f48a <GUI_Down_Panel+0x62>
 800f4a4:	20095c10 	.word	0x20095c10
 800f4a8:	200056f1 	.word	0x200056f1
 800f4ac:	2000571b 	.word	0x2000571b

0800f4b0 <GUI_Panels>:

void GUI_Panels()
{
 800f4b0:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800f4b2:	4b1c      	ldr	r3, [pc, #112]	; (800f524 <GUI_Panels+0x74>)
 800f4b4:	781a      	ldrb	r2, [r3, #0]
 800f4b6:	2a01      	cmp	r2, #1
 800f4b8:	d121      	bne.n	800f4fe <GUI_Panels+0x4e>
 800f4ba:	4b1b      	ldr	r3, [pc, #108]	; (800f528 <GUI_Panels+0x78>)
 800f4bc:	7819      	ldrb	r1, [r3, #0]
 800f4be:	2902      	cmp	r1, #2
 800f4c0:	d125      	bne.n	800f50e <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	2b03      	cmp	r3, #3
 800f4c6:	d122      	bne.n	800f50e <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800f4c8:	4b17      	ldr	r3, [pc, #92]	; (800f528 <GUI_Panels+0x78>)
 800f4ca:	7819      	ldrb	r1, [r3, #0]
 800f4cc:	2906      	cmp	r1, #6
 800f4ce:	d901      	bls.n	800f4d4 <GUI_Panels+0x24>
 800f4d0:	2a06      	cmp	r2, #6
 800f4d2:	d91c      	bls.n	800f50e <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800f4d4:	7819      	ldrb	r1, [r3, #0]
 800f4d6:	2911      	cmp	r1, #17
 800f4d8:	d019      	beq.n	800f50e <GUI_Panels+0x5e>
 800f4da:	2a06      	cmp	r2, #6
 800f4dc:	d102      	bne.n	800f4e4 <GUI_Panels+0x34>
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b05      	cmp	r3, #5
 800f4e2:	d914      	bls.n	800f50e <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800f4e4:	2363      	movs	r3, #99	; 0x63
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	f240 120f 	movw	r2, #271	; 0x10f
 800f4ec:	f240 13a9 	movw	r3, #425	; 0x1a9
 800f4f0:	2128      	movs	r1, #40	; 0x28
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	f00c fc8f 	bl	801be16 <TFT_FillRectangle>
	}
}
 800f4f8:	b003      	add	sp, #12
 800f4fa:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f4fe:	2a04      	cmp	r2, #4
 800f500:	d005      	beq.n	800f50e <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800f502:	2a06      	cmp	r2, #6
 800f504:	d9e0      	bls.n	800f4c8 <GUI_Panels+0x18>
 800f506:	4b08      	ldr	r3, [pc, #32]	; (800f528 <GUI_Panels+0x78>)
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2b06      	cmp	r3, #6
 800f50c:	d8dc      	bhi.n	800f4c8 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f50e:	2063      	movs	r0, #99	; 0x63
 800f510:	f00c fa82 	bl	801ba18 <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800f514:	f7ff ff64 	bl	800f3e0 <GUI_Up_Panel>
}
 800f518:	b003      	add	sp, #12
 800f51a:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800f51e:	f7ff bf83 	b.w	800f428 <GUI_Down_Panel>
 800f522:	bf00      	nop
 800f524:	200056f1 	.word	0x200056f1
 800f528:	2000022a 	.word	0x2000022a

0800f52c <GUI_DataSet1_Screen>:
{
 800f52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800f52e:	4b28      	ldr	r3, [pc, #160]	; (800f5d0 <GUI_DataSet1_Screen+0xa4>)
 800f530:	4c28      	ldr	r4, [pc, #160]	; (800f5d4 <GUI_DataSet1_Screen+0xa8>)
 800f532:	4d29      	ldr	r5, [pc, #164]	; (800f5d8 <GUI_DataSet1_Screen+0xac>)
 800f534:	2202      	movs	r2, #2
 800f536:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800f538:	4b28      	ldr	r3, [pc, #160]	; (800f5dc <GUI_DataSet1_Screen+0xb0>)
 800f53a:	4a29      	ldr	r2, [pc, #164]	; (800f5e0 <GUI_DataSet1_Screen+0xb4>)
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	7812      	ldrb	r2, [r2, #0]
 800f540:	429a      	cmp	r2, r3
 800f542:	4a28      	ldr	r2, [pc, #160]	; (800f5e4 <GUI_DataSet1_Screen+0xb8>)
 800f544:	4b28      	ldr	r3, [pc, #160]	; (800f5e8 <GUI_DataSet1_Screen+0xbc>)
 800f546:	d107      	bne.n	800f558 <GUI_DataSet1_Screen+0x2c>
 800f548:	7810      	ldrb	r0, [r2, #0]
 800f54a:	7821      	ldrb	r1, [r4, #0]
 800f54c:	4288      	cmp	r0, r1
 800f54e:	d103      	bne.n	800f558 <GUI_DataSet1_Screen+0x2c>
 800f550:	7818      	ldrb	r0, [r3, #0]
 800f552:	7829      	ldrb	r1, [r5, #0]
 800f554:	4288      	cmp	r0, r1
 800f556:	d027      	beq.n	800f5a8 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800f558:	7821      	ldrb	r1, [r4, #0]
 800f55a:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800f55c:	782a      	ldrb	r2, [r5, #0]
 800f55e:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800f560:	f7ff ffa6 	bl	800f4b0 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800f564:	4b21      	ldr	r3, [pc, #132]	; (800f5ec <GUI_DataSet1_Screen+0xc0>)
 800f566:	2207      	movs	r2, #7
 800f568:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800f56a:	782b      	ldrb	r3, [r5, #0]
 800f56c:	bb0b      	cbnz	r3, 800f5b2 <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800f56e:	f7ff fb7b 	bl	800ec68 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f572:	7823      	ldrb	r3, [r4, #0]
 800f574:	f240 1151 	movw	r1, #337	; 0x151
 800f578:	200a      	movs	r0, #10
 800f57a:	b1bb      	cbz	r3, 800f5ac <GUI_DataSet1_Screen+0x80>
 800f57c:	f008 fccc 	bl	8017f18 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800f580:	4b1b      	ldr	r3, [pc, #108]	; (800f5f0 <GUI_DataSet1_Screen+0xc4>)
 800f582:	881a      	ldrh	r2, [r3, #0]
 800f584:	f240 1147 	movw	r1, #327	; 0x147
 800f588:	f002 0201 	and.w	r2, r2, #1
 800f58c:	20c8      	movs	r0, #200	; 0xc8
 800f58e:	f003 faa1 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	f240 1379 	movw	r3, #377	; 0x179
 800f59c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	200a      	movs	r0, #10
 800f5a4:	f00c fbda 	bl	801bd5c <TFT_DrawLine>
}
 800f5a8:	b003      	add	sp, #12
 800f5aa:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f5ac:	f009 fa7a 	bl	8018aa4 <GUI_TextRu_Luminance>
 800f5b0:	e7e6      	b.n	800f580 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d1e4      	bne.n	800f580 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800f5b6:	f7ff fbc7 	bl	800ed48 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800f5ba:	7823      	ldrb	r3, [r4, #0]
 800f5bc:	f240 1153 	movw	r1, #339	; 0x153
 800f5c0:	200a      	movs	r0, #10
 800f5c2:	b113      	cbz	r3, 800f5ca <GUI_DataSet1_Screen+0x9e>
 800f5c4:	f007 fdce 	bl	8017164 <GUI_TextEn_Illuminance>
 800f5c8:	e7da      	b.n	800f580 <GUI_DataSet1_Screen+0x54>
 800f5ca:	f007 fd75 	bl	80170b8 <GUI_TextEn_Luminance>
 800f5ce:	e7d7      	b.n	800f580 <GUI_DataSet1_Screen+0x54>
 800f5d0:	2000022f 	.word	0x2000022f
 800f5d4:	20000ebc 	.word	0x20000ebc
 800f5d8:	200056f3 	.word	0x200056f3
 800f5dc:	2000022a 	.word	0x2000022a
 800f5e0:	200056f1 	.word	0x200056f1
 800f5e4:	20090a6b 	.word	0x20090a6b
 800f5e8:	20090a64 	.word	0x20090a64
 800f5ec:	20091008 	.word	0x20091008
 800f5f0:	200056f6 	.word	0x200056f6

0800f5f4 <GUI_DataSet2_Screen>:
{
 800f5f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f5f6:	4b66      	ldr	r3, [pc, #408]	; (800f790 <GUI_DataSet2_Screen+0x19c>)
 800f5f8:	4a66      	ldr	r2, [pc, #408]	; (800f794 <GUI_DataSet2_Screen+0x1a0>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	7812      	ldrb	r2, [r2, #0]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	f000 80c3 	beq.w	800f78a <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800f604:	f7ff ff54 	bl	800f4b0 <GUI_Panels>
			if(Language_status == Ru){
 800f608:	4b63      	ldr	r3, [pc, #396]	; (800f798 <GUI_DataSet2_Screen+0x1a4>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d172      	bne.n	800f6f6 <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f610:	4b62      	ldr	r3, [pc, #392]	; (800f79c <GUI_DataSet2_Screen+0x1a8>)
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2152      	movs	r1, #82	; 0x52
 800f616:	2012      	movs	r0, #18
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d069      	beq.n	800f6f0 <GUI_DataSet2_Screen+0xfc>
 800f61c:	f009 f9d8 	bl	80189d0 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f620:	4c5f      	ldr	r4, [pc, #380]	; (800f7a0 <GUI_DataSet2_Screen+0x1ac>)
 800f622:	8822      	ldrh	r2, [r4, #0]
 800f624:	2146      	movs	r1, #70	; 0x46
 800f626:	f002 0202 	and.w	r2, r2, #2
 800f62a:	20c8      	movs	r0, #200	; 0xc8
 800f62c:	f003 fa52 	bl	8012ad4 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f630:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f634:	2378      	movs	r3, #120	; 0x78
 800f636:	4619      	mov	r1, r3
 800f638:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f63c:	200a      	movs	r0, #10
 800f63e:	9500      	str	r5, [sp, #0]
 800f640:	f00c fb8c 	bl	801bd5c <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800f644:	2191      	movs	r1, #145	; 0x91
 800f646:	200a      	movs	r0, #10
 800f648:	f008 fcd0 	bl	8017fec <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f64c:	8822      	ldrh	r2, [r4, #0]
 800f64e:	2185      	movs	r1, #133	; 0x85
 800f650:	f002 0204 	and.w	r2, r2, #4
 800f654:	20c8      	movs	r0, #200	; 0xc8
 800f656:	f003 fa3d 	bl	8012ad4 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800f65a:	21d1      	movs	r1, #209	; 0xd1
 800f65c:	200a      	movs	r0, #10
 800f65e:	f008 fce9 	bl	8018034 <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f662:	8822      	ldrh	r2, [r4, #0]
 800f664:	21c6      	movs	r1, #198	; 0xc6
 800f666:	f002 0208 	and.w	r2, r2, #8
 800f66a:	20c8      	movs	r0, #200	; 0xc8
 800f66c:	f003 fa32 	bl	8012ad4 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f670:	23f8      	movs	r3, #248	; 0xf8
 800f672:	4619      	mov	r1, r3
 800f674:	200a      	movs	r0, #10
 800f676:	9500      	str	r5, [sp, #0]
 800f678:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f67c:	f00c fb6e 	bl	801bd5c <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800f680:	f240 1113 	movw	r1, #275	; 0x113
 800f684:	2014      	movs	r0, #20
 800f686:	f008 ff51 	bl	801852c <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800f68a:	8822      	ldrh	r2, [r4, #0]
 800f68c:	f240 1107 	movw	r1, #263	; 0x107
 800f690:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f694:	20c8      	movs	r0, #200	; 0xc8
 800f696:	f003 fa1d 	bl	8012ad4 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f69a:	f240 1339 	movw	r3, #313	; 0x139
 800f69e:	4619      	mov	r1, r3
 800f6a0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f6a4:	9500      	str	r5, [sp, #0]
 800f6a6:	200a      	movs	r0, #10
 800f6a8:	f00c fb58 	bl	801bd5c <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800f6ac:	f240 1151 	movw	r1, #337	; 0x151
 800f6b0:	2014      	movs	r0, #20
 800f6b2:	f007 f809 	bl	80166c8 <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800f6b6:	8822      	ldrh	r2, [r4, #0]
 800f6b8:	f240 1147 	movw	r1, #327	; 0x147
 800f6bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f6c0:	20c8      	movs	r0, #200	; 0xc8
 800f6c2:	f003 fa07 	bl	8012ad4 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f6c6:	f240 1379 	movw	r3, #377	; 0x179
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	9500      	str	r5, [sp, #0]
 800f6ce:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f6d2:	200a      	movs	r0, #10
 800f6d4:	f00c fb42 	bl	801bd5c <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f6d8:	8822      	ldrh	r2, [r4, #0]
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f6e0:	f240 1147 	movw	r1, #327	; 0x147
 800f6e4:	2082      	movs	r0, #130	; 0x82
}
 800f6e6:	b003      	add	sp, #12
 800f6e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f6ec:	f003 b8d2 	b.w	8012894 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f6f0:	f009 fa20 	bl	8018b34 <GUI_TextRu_Radiance>
 800f6f4:	e794      	b.n	800f620 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d147      	bne.n	800f78a <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f6fa:	4d28      	ldr	r5, [pc, #160]	; (800f79c <GUI_DataSet2_Screen+0x1a8>)
 800f6fc:	782a      	ldrb	r2, [r5, #0]
 800f6fe:	2154      	movs	r1, #84	; 0x54
 800f700:	2012      	movs	r0, #18
 800f702:	2a00      	cmp	r2, #0
 800f704:	d03b      	beq.n	800f77e <GUI_DataSet2_Screen+0x18a>
 800f706:	f007 fac3 	bl	8016c90 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f70a:	4c25      	ldr	r4, [pc, #148]	; (800f7a0 <GUI_DataSet2_Screen+0x1ac>)
 800f70c:	8822      	ldrh	r2, [r4, #0]
 800f70e:	2146      	movs	r1, #70	; 0x46
 800f710:	f002 0202 	and.w	r2, r2, #2
 800f714:	20c8      	movs	r0, #200	; 0xc8
 800f716:	f003 f9dd 	bl	8012ad4 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f71a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	2378      	movs	r3, #120	; 0x78
 800f722:	4619      	mov	r1, r3
 800f724:	200a      	movs	r0, #10
 800f726:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f72a:	f00c fb17 	bl	801bd5c <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f72e:	782b      	ldrb	r3, [r5, #0]
 800f730:	2193      	movs	r1, #147	; 0x93
 800f732:	200a      	movs	r0, #10
 800f734:	b333      	cbz	r3, 800f784 <GUI_DataSet2_Screen+0x190>
 800f736:	f007 fdab 	bl	8017290 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f73a:	8822      	ldrh	r2, [r4, #0]
 800f73c:	2185      	movs	r1, #133	; 0x85
 800f73e:	f002 0204 	and.w	r2, r2, #4
 800f742:	20c8      	movs	r0, #200	; 0xc8
 800f744:	f003 f9c6 	bl	8012ad4 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800f748:	21d3      	movs	r1, #211	; 0xd3
 800f74a:	200a      	movs	r0, #10
 800f74c:	f007 fe5a 	bl	8017404 <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f750:	8822      	ldrh	r2, [r4, #0]
 800f752:	21c6      	movs	r1, #198	; 0xc6
 800f754:	f002 0208 	and.w	r2, r2, #8
 800f758:	20c8      	movs	r0, #200	; 0xc8
 800f75a:	f003 f9bb 	bl	8012ad4 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f75e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f762:	23f8      	movs	r3, #248	; 0xf8
 800f764:	4619      	mov	r1, r3
 800f766:	9500      	str	r5, [sp, #0]
 800f768:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f76c:	200a      	movs	r0, #10
 800f76e:	f00c faf5 	bl	801bd5c <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800f772:	f240 1115 	movw	r1, #277	; 0x115
 800f776:	2014      	movs	r0, #20
 800f778:	f007 fe8c 	bl	8017494 <GUI_TextEn_CCT>
 800f77c:	e785      	b.n	800f68a <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f77e:	f007 fa39 	bl	8016bf4 <GUI_TextEn_Radiance>
 800f782:	e7c2      	b.n	800f70a <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f784:	f007 fdb0 	bl	80172e8 <GUI_TextEn_PPL>
 800f788:	e7d7      	b.n	800f73a <GUI_DataSet2_Screen+0x146>
}
 800f78a:	b003      	add	sp, #12
 800f78c:	bd30      	pop	{r4, r5, pc}
 800f78e:	bf00      	nop
 800f790:	2000022a 	.word	0x2000022a
 800f794:	200056f1 	.word	0x200056f1
 800f798:	200056f3 	.word	0x200056f3
 800f79c:	20000ebc 	.word	0x20000ebc
 800f7a0:	200056f6 	.word	0x200056f6

0800f7a4 <GUI_DataSet3_Screen>:
{
 800f7a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f7a6:	4b35      	ldr	r3, [pc, #212]	; (800f87c <GUI_DataSet3_Screen+0xd8>)
 800f7a8:	4a35      	ldr	r2, [pc, #212]	; (800f880 <GUI_DataSet3_Screen+0xdc>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	7812      	ldrb	r2, [r2, #0]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d061      	beq.n	800f876 <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f7b2:	4c34      	ldr	r4, [pc, #208]	; (800f884 <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f7b4:	4e34      	ldr	r6, [pc, #208]	; (800f888 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 800f7b6:	f7ff fe7b 	bl	800f4b0 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 800f7ba:	2152      	movs	r1, #82	; 0x52
 800f7bc:	2014      	movs	r0, #20
 800f7be:	f006 fbb7 	bl	8015f30 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f7c2:	8822      	ldrh	r2, [r4, #0]
 800f7c4:	2146      	movs	r1, #70	; 0x46
 800f7c6:	f002 0210 	and.w	r2, r2, #16
 800f7ca:	20c8      	movs	r0, #200	; 0xc8
 800f7cc:	f003 f982 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f7d0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f7d4:	2378      	movs	r3, #120	; 0x78
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7dc:	200a      	movs	r0, #10
 800f7de:	9500      	str	r5, [sp, #0]
 800f7e0:	f00c fabc 	bl	801bd5c <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 800f7e4:	2191      	movs	r1, #145	; 0x91
 800f7e6:	2014      	movs	r0, #20
 800f7e8:	f006 fe4e 	bl	8016488 <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 800f7ec:	8822      	ldrh	r2, [r4, #0]
 800f7ee:	2185      	movs	r1, #133	; 0x85
 800f7f0:	f002 0220 	and.w	r2, r2, #32
 800f7f4:	20c8      	movs	r0, #200	; 0xc8
 800f7f6:	f003 f96d 	bl	8012ad4 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 800f7fa:	21d1      	movs	r1, #209	; 0xd1
 800f7fc:	2023      	movs	r0, #35	; 0x23
 800f7fe:	f006 fbd1 	bl	8015fa4 <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f802:	8823      	ldrh	r3, [r4, #0]
 800f804:	7832      	ldrb	r2, [r6, #0]
 800f806:	f003 0320 	and.w	r3, r3, #32
 800f80a:	f002 0201 	and.w	r2, r2, #1
 800f80e:	21c6      	movs	r1, #198	; 0xc6
 800f810:	20c8      	movs	r0, #200	; 0xc8
 800f812:	f003 f9a0 	bl	8012b56 <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 800f816:	f240 1113 	movw	r1, #275	; 0x113
 800f81a:	2023      	movs	r0, #35	; 0x23
 800f81c:	f006 fc22 	bl	8016064 <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 800f820:	7832      	ldrb	r2, [r6, #0]
 800f822:	8823      	ldrh	r3, [r4, #0]
 800f824:	43d2      	mvns	r2, r2
 800f826:	f003 0320 	and.w	r3, r3, #32
 800f82a:	f002 0201 	and.w	r2, r2, #1
 800f82e:	f240 1107 	movw	r1, #263	; 0x107
 800f832:	20c8      	movs	r0, #200	; 0xc8
 800f834:	f003 f98f 	bl	8012b56 <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f838:	f240 1339 	movw	r3, #313	; 0x139
 800f83c:	4619      	mov	r1, r3
 800f83e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f842:	200a      	movs	r0, #10
 800f844:	9500      	str	r5, [sp, #0]
 800f846:	f00c fa89 	bl	801bd5c <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 800f84a:	f240 1151 	movw	r1, #337	; 0x151
 800f84e:	2014      	movs	r0, #20
 800f850:	f006 fc68 	bl	8016124 <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 800f854:	8822      	ldrh	r2, [r4, #0]
 800f856:	f240 1147 	movw	r1, #327	; 0x147
 800f85a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800f85e:	20c8      	movs	r0, #200	; 0xc8
 800f860:	f003 f938 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f864:	f240 1379 	movw	r3, #377	; 0x179
 800f868:	9500      	str	r5, [sp, #0]
 800f86a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f86e:	4619      	mov	r1, r3
 800f870:	200a      	movs	r0, #10
 800f872:	f00c fa73 	bl	801bd5c <TFT_DrawLine>
}
 800f876:	b002      	add	sp, #8
 800f878:	bd70      	pop	{r4, r5, r6, pc}
 800f87a:	bf00      	nop
 800f87c:	2000022a 	.word	0x2000022a
 800f880:	200056f1 	.word	0x200056f1
 800f884:	200056f6 	.word	0x200056f6
 800f888:	200056f4 	.word	0x200056f4

0800f88c <GUI_DataSet4_Screen>:
{
 800f88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f88e:	4b4b      	ldr	r3, [pc, #300]	; (800f9bc <GUI_DataSet4_Screen+0x130>)
 800f890:	4a4b      	ldr	r2, [pc, #300]	; (800f9c0 <GUI_DataSet4_Screen+0x134>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	7812      	ldrb	r2, [r2, #0]
 800f896:	429a      	cmp	r2, r3
 800f898:	f000 808b 	beq.w	800f9b2 <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800f89c:	4c49      	ldr	r4, [pc, #292]	; (800f9c4 <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800f89e:	4d4a      	ldr	r5, [pc, #296]	; (800f9c8 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 800f8a0:	f7ff fe06 	bl	800f4b0 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 800f8a4:	2150      	movs	r1, #80	; 0x50
 800f8a6:	2014      	movs	r0, #20
 800f8a8:	f006 fc8a 	bl	80161c0 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800f8ac:	8822      	ldrh	r2, [r4, #0]
 800f8ae:	2141      	movs	r1, #65	; 0x41
 800f8b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800f8b4:	20c8      	movs	r0, #200	; 0xc8
 800f8b6:	f003 f90d 	bl	8012ad4 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 800f8ba:	2173      	movs	r1, #115	; 0x73
 800f8bc:	2028      	movs	r0, #40	; 0x28
 800f8be:	f006 fd27 	bl	8016310 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800f8c2:	8823      	ldrh	r3, [r4, #0]
 800f8c4:	782a      	ldrb	r2, [r5, #0]
 800f8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ca:	f002 0201 	and.w	r2, r2, #1
 800f8ce:	216c      	movs	r1, #108	; 0x6c
 800f8d0:	20c8      	movs	r0, #200	; 0xc8
 800f8d2:	f003 f940 	bl	8012b56 <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 800f8d6:	2196      	movs	r1, #150	; 0x96
 800f8d8:	2028      	movs	r0, #40	; 0x28
 800f8da:	f006 fd2f 	bl	801633c <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 800f8de:	8823      	ldrh	r3, [r4, #0]
 800f8e0:	782a      	ldrb	r2, [r5, #0]
 800f8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8e6:	f002 0202 	and.w	r2, r2, #2
 800f8ea:	218f      	movs	r1, #143	; 0x8f
 800f8ec:	20c8      	movs	r0, #200	; 0xc8
 800f8ee:	f003 f932 	bl	8012b56 <GUI_RadioBox>
		GUI_Text_C(40, 185);
 800f8f2:	21b9      	movs	r1, #185	; 0xb9
 800f8f4:	2028      	movs	r0, #40	; 0x28
 800f8f6:	f006 fd45 	bl	8016384 <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 800f8fa:	8823      	ldrh	r3, [r4, #0]
 800f8fc:	782a      	ldrb	r2, [r5, #0]
 800f8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f902:	f002 0204 	and.w	r2, r2, #4
 800f906:	21b2      	movs	r1, #178	; 0xb2
 800f908:	20c8      	movs	r0, #200	; 0xc8
 800f90a:	f003 f924 	bl	8012b56 <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 800f90e:	21dc      	movs	r1, #220	; 0xdc
 800f910:	2028      	movs	r0, #40	; 0x28
 800f912:	f006 fd4d 	bl	80163b0 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 800f916:	8823      	ldrh	r3, [r4, #0]
 800f918:	782a      	ldrb	r2, [r5, #0]
 800f91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f91e:	f002 0208 	and.w	r2, r2, #8
 800f922:	21d5      	movs	r1, #213	; 0xd5
 800f924:	20c8      	movs	r0, #200	; 0xc8
 800f926:	f003 f916 	bl	8012b56 <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 800f92a:	21ff      	movs	r1, #255	; 0xff
 800f92c:	2028      	movs	r0, #40	; 0x28
 800f92e:	f006 fd63 	bl	80163f8 <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 800f932:	8823      	ldrh	r3, [r4, #0]
 800f934:	782a      	ldrb	r2, [r5, #0]
 800f936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f93a:	f002 0210 	and.w	r2, r2, #16
 800f93e:	21f8      	movs	r1, #248	; 0xf8
 800f940:	20c8      	movs	r0, #200	; 0xc8
 800f942:	f003 f908 	bl	8012b56 <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 800f946:	f44f 7191 	mov.w	r1, #290	; 0x122
 800f94a:	2028      	movs	r0, #40	; 0x28
 800f94c:	f006 fd78 	bl	8016440 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 800f950:	8823      	ldrh	r3, [r4, #0]
 800f952:	782a      	ldrb	r2, [r5, #0]
 800f954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f958:	f002 0220 	and.w	r2, r2, #32
 800f95c:	f240 111b 	movw	r1, #283	; 0x11b
 800f960:	20c8      	movs	r0, #200	; 0xc8
 800f962:	f003 f8f8 	bl	8012b56 <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 800f966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800f970:	4619      	mov	r1, r3
 800f972:	200a      	movs	r0, #10
 800f974:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f978:	f00c f9f0 	bl	801bd5c <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800f97c:	4b13      	ldr	r3, [pc, #76]	; (800f9cc <GUI_DataSet4_Screen+0x140>)
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800f984:	2014      	movs	r0, #20
 800f986:	b1b3      	cbz	r3, 800f9b6 <GUI_DataSet4_Screen+0x12a>
 800f988:	f006 fff8 	bl	801697c <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 800f98c:	8822      	ldrh	r2, [r4, #0]
 800f98e:	f240 1159 	movw	r1, #345	; 0x159
 800f992:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f996:	20c8      	movs	r0, #200	; 0xc8
 800f998:	f003 f89c 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 800f99c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800f9a6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	200a      	movs	r0, #10
 800f9ae:	f00c f9d5 	bl	801bd5c <TFT_DrawLine>
}
 800f9b2:	b003      	add	sp, #12
 800f9b4:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800f9b6:	f007 f81b 	bl	80169f0 <GUI_Text_LbLr>
 800f9ba:	e7e7      	b.n	800f98c <GUI_DataSet4_Screen+0x100>
 800f9bc:	2000022a 	.word	0x2000022a
 800f9c0:	200056f1 	.word	0x200056f1
 800f9c4:	200056f6 	.word	0x200056f6
 800f9c8:	20090a69 	.word	0x20090a69
 800f9cc:	20000ebc 	.word	0x20000ebc

0800f9d0 <GUI_DataSet5_Screen>:
{
 800f9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f9d2:	4b19      	ldr	r3, [pc, #100]	; (800fa38 <GUI_DataSet5_Screen+0x68>)
 800f9d4:	4a19      	ldr	r2, [pc, #100]	; (800fa3c <GUI_DataSet5_Screen+0x6c>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	7812      	ldrb	r2, [r2, #0]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d02a      	beq.n	800fa34 <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800f9de:	4d18      	ldr	r5, [pc, #96]	; (800fa40 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 800f9e0:	f7ff fd66 	bl	800f4b0 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 800f9e4:	2156      	movs	r1, #86	; 0x56
 800f9e6:	2023      	movs	r0, #35	; 0x23
 800f9e8:	f006 fdf4 	bl	80165d4 <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800f9ec:	882a      	ldrh	r2, [r5, #0]
 800f9ee:	2146      	movs	r1, #70	; 0x46
 800f9f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800f9f4:	20c8      	movs	r0, #200	; 0xc8
 800f9f6:	f003 f86d 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f9fa:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f9fe:	2378      	movs	r3, #120	; 0x78
 800fa00:	4619      	mov	r1, r3
 800fa02:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fa06:	200a      	movs	r0, #10
 800fa08:	9400      	str	r4, [sp, #0]
 800fa0a:	f00c f9a7 	bl	801bd5c <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 800fa0e:	2191      	movs	r1, #145	; 0x91
 800fa10:	2023      	movs	r0, #35	; 0x23
 800fa12:	f006 fdbb 	bl	801658c <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 800fa16:	882a      	ldrh	r2, [r5, #0]
 800fa18:	2185      	movs	r1, #133	; 0x85
 800fa1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fa1e:	20c8      	movs	r0, #200	; 0xc8
 800fa20:	f003 f858 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800fa24:	23b7      	movs	r3, #183	; 0xb7
 800fa26:	9400      	str	r4, [sp, #0]
 800fa28:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	200a      	movs	r0, #10
 800fa30:	f00c f994 	bl	801bd5c <TFT_DrawLine>
}
 800fa34:	b003      	add	sp, #12
 800fa36:	bd30      	pop	{r4, r5, pc}
 800fa38:	2000022a 	.word	0x2000022a
 800fa3c:	200056f1 	.word	0x200056f1
 800fa40:	200056f6 	.word	0x200056f6

0800fa44 <GUI_GraphSet1_Screen>:
{
 800fa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fa46:	4b1d      	ldr	r3, [pc, #116]	; (800fabc <GUI_GraphSet1_Screen+0x78>)
 800fa48:	4a1d      	ldr	r2, [pc, #116]	; (800fac0 <GUI_GraphSet1_Screen+0x7c>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	7812      	ldrb	r2, [r2, #0]
 800fa4e:	4c1d      	ldr	r4, [pc, #116]	; (800fac4 <GUI_GraphSet1_Screen+0x80>)
 800fa50:	4d1d      	ldr	r5, [pc, #116]	; (800fac8 <GUI_GraphSet1_Screen+0x84>)
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d103      	bne.n	800fa5e <GUI_GraphSet1_Screen+0x1a>
 800fa56:	7822      	ldrb	r2, [r4, #0]
 800fa58:	782b      	ldrb	r3, [r5, #0]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d022      	beq.n	800faa4 <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 800fa5e:	f7ff fd27 	bl	800f4b0 <GUI_Panels>
		Language_status_prev = Language_status;
 800fa62:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fa64:	4a19      	ldr	r2, [pc, #100]	; (800facc <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 800fa66:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fa68:	210c      	movs	r1, #12
 800fa6a:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fa6c:	b9e3      	cbnz	r3, 800faa8 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 800fa6e:	f7ff f8fb 	bl	800ec68 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 800fa72:	f240 1151 	movw	r1, #337	; 0x151
 800fa76:	200a      	movs	r0, #10
 800fa78:	f008 fb6a 	bl	8018150 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 800fa7c:	4b14      	ldr	r3, [pc, #80]	; (800fad0 <GUI_GraphSet1_Screen+0x8c>)
 800fa7e:	781a      	ldrb	r2, [r3, #0]
 800fa80:	f240 1147 	movw	r1, #327	; 0x147
 800fa84:	f002 0201 	and.w	r2, r2, #1
 800fa88:	20c8      	movs	r0, #200	; 0xc8
 800fa8a:	f003 f823 	bl	8012ad4 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fa8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa92:	9300      	str	r3, [sp, #0]
 800fa94:	f240 1379 	movw	r3, #377	; 0x179
 800fa98:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	200a      	movs	r0, #10
 800faa0:	f00c f95c 	bl	801bd5c <TFT_DrawLine>
}
 800faa4:	b003      	add	sp, #12
 800faa6:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d1e7      	bne.n	800fa7c <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 800faac:	f7ff f94c 	bl	800ed48 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 800fab0:	f240 1153 	movw	r1, #339	; 0x153
 800fab4:	200a      	movs	r0, #10
 800fab6:	f007 fc3b 	bl	8017330 <GUI_TextEn_PARwavebands>
 800faba:	e7df      	b.n	800fa7c <GUI_GraphSet1_Screen+0x38>
 800fabc:	2000022a 	.word	0x2000022a
 800fac0:	200056f1 	.word	0x200056f1
 800fac4:	20090a64 	.word	0x20090a64
 800fac8:	200056f3 	.word	0x200056f3
 800facc:	20091008 	.word	0x20091008
 800fad0:	200056f2 	.word	0x200056f2

0800fad4 <GUI_GraphSet2_Screen>:
{
 800fad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fad6:	4b19      	ldr	r3, [pc, #100]	; (800fb3c <GUI_GraphSet2_Screen+0x68>)
 800fad8:	4a19      	ldr	r2, [pc, #100]	; (800fb40 <GUI_GraphSet2_Screen+0x6c>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	7812      	ldrb	r2, [r2, #0]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d02a      	beq.n	800fb38 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fae2:	4d18      	ldr	r5, [pc, #96]	; (800fb44 <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 800fae4:	f7ff fce4 	bl	800f4b0 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 800fae8:	2152      	movs	r1, #82	; 0x52
 800faea:	2012      	movs	r0, #18
 800faec:	f006 ff46 	bl	801697c <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800faf0:	782a      	ldrb	r2, [r5, #0]
 800faf2:	2146      	movs	r1, #70	; 0x46
 800faf4:	f002 0202 	and.w	r2, r2, #2
 800faf8:	20c8      	movs	r0, #200	; 0xc8
 800fafa:	f002 ffeb 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fafe:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fb02:	237a      	movs	r3, #122	; 0x7a
 800fb04:	4619      	mov	r1, r3
 800fb06:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb0a:	200a      	movs	r0, #10
 800fb0c:	9400      	str	r4, [sp, #0]
 800fb0e:	f00c f925 	bl	801bd5c <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 800fb12:	2191      	movs	r1, #145	; 0x91
 800fb14:	200a      	movs	r0, #10
 800fb16:	f006 fd81 	bl	801661c <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 800fb1a:	782a      	ldrb	r2, [r5, #0]
 800fb1c:	2185      	movs	r1, #133	; 0x85
 800fb1e:	f002 0204 	and.w	r2, r2, #4
 800fb22:	20c8      	movs	r0, #200	; 0xc8
 800fb24:	f002 ffd6 	bl	8012ad4 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fb28:	23b9      	movs	r3, #185	; 0xb9
 800fb2a:	9400      	str	r4, [sp, #0]
 800fb2c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb30:	4619      	mov	r1, r3
 800fb32:	200a      	movs	r0, #10
 800fb34:	f00c f912 	bl	801bd5c <TFT_DrawLine>
}
 800fb38:	b003      	add	sp, #12
 800fb3a:	bd30      	pop	{r4, r5, pc}
 800fb3c:	2000022a 	.word	0x2000022a
 800fb40:	200056f1 	.word	0x200056f1
 800fb44:	200056f2 	.word	0x200056f2

0800fb48 <GUI_ColorSet1_Screen>:
{
 800fb48:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fb4a:	4b1b      	ldr	r3, [pc, #108]	; (800fbb8 <GUI_ColorSet1_Screen+0x70>)
 800fb4c:	4a1b      	ldr	r2, [pc, #108]	; (800fbbc <GUI_ColorSet1_Screen+0x74>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	7812      	ldrb	r2, [r2, #0]
 800fb52:	4c1b      	ldr	r4, [pc, #108]	; (800fbc0 <GUI_ColorSet1_Screen+0x78>)
 800fb54:	429a      	cmp	r2, r3
 800fb56:	4b1b      	ldr	r3, [pc, #108]	; (800fbc4 <GUI_ColorSet1_Screen+0x7c>)
 800fb58:	d103      	bne.n	800fb62 <GUI_ColorSet1_Screen+0x1a>
 800fb5a:	7819      	ldrb	r1, [r3, #0]
 800fb5c:	7822      	ldrb	r2, [r4, #0]
 800fb5e:	4291      	cmp	r1, r2
 800fb60:	d023      	beq.n	800fbaa <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 800fb62:	7822      	ldrb	r2, [r4, #0]
 800fb64:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800fb66:	f7ff fca3 	bl	800f4b0 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 800fb6a:	4b17      	ldr	r3, [pc, #92]	; (800fbc8 <GUI_ColorSet1_Screen+0x80>)
 800fb6c:	220e      	movs	r2, #14
 800fb6e:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fb70:	7823      	ldrb	r3, [r4, #0]
 800fb72:	b9e3      	cbnz	r3, 800fbae <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 800fb74:	f7ff f878 	bl	800ec68 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 800fb78:	f240 1151 	movw	r1, #337	; 0x151
 800fb7c:	200a      	movs	r0, #10
 800fb7e:	f006 fc83 	bl	8016488 <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 800fb82:	4b12      	ldr	r3, [pc, #72]	; (800fbcc <GUI_ColorSet1_Screen+0x84>)
 800fb84:	781a      	ldrb	r2, [r3, #0]
 800fb86:	2301      	movs	r3, #1
 800fb88:	401a      	ands	r2, r3
 800fb8a:	f240 1147 	movw	r1, #327	; 0x147
 800fb8e:	20c8      	movs	r0, #200	; 0xc8
 800fb90:	f002 ffe1 	bl	8012b56 <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fb94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	f240 1379 	movw	r3, #377	; 0x179
 800fb9e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fba2:	4619      	mov	r1, r3
 800fba4:	200a      	movs	r0, #10
 800fba6:	f00c f8d9 	bl	801bd5c <TFT_DrawLine>
}
 800fbaa:	b002      	add	sp, #8
 800fbac:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d1e2      	bne.n	800fb78 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 800fbb2:	f7ff f8c9 	bl	800ed48 <GUI_OptionMenuEn>
 800fbb6:	e7df      	b.n	800fb78 <GUI_ColorSet1_Screen+0x30>
 800fbb8:	2000022a 	.word	0x2000022a
 800fbbc:	200056f1 	.word	0x200056f1
 800fbc0:	200056f3 	.word	0x200056f3
 800fbc4:	20090a64 	.word	0x20090a64
 800fbc8:	20091008 	.word	0x20091008
 800fbcc:	200056ef 	.word	0x200056ef

0800fbd0 <GUI_ColorSet2_Screen>:
{
 800fbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fbd2:	4b1a      	ldr	r3, [pc, #104]	; (800fc3c <GUI_ColorSet2_Screen+0x6c>)
 800fbd4:	4a1a      	ldr	r2, [pc, #104]	; (800fc40 <GUI_ColorSet2_Screen+0x70>)
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	7812      	ldrb	r2, [r2, #0]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d02c      	beq.n	800fc38 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fbde:	4d19      	ldr	r5, [pc, #100]	; (800fc44 <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 800fbe0:	f7ff fc66 	bl	800f4b0 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 800fbe4:	2152      	movs	r1, #82	; 0x52
 800fbe6:	2014      	movs	r0, #20
 800fbe8:	f006 fa9c 	bl	8016124 <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fbec:	782a      	ldrb	r2, [r5, #0]
 800fbee:	2301      	movs	r3, #1
 800fbf0:	f002 0204 	and.w	r2, r2, #4
 800fbf4:	2146      	movs	r1, #70	; 0x46
 800fbf6:	20c8      	movs	r0, #200	; 0xc8
 800fbf8:	f002 ffad 	bl	8012b56 <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fbfc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fc00:	237a      	movs	r3, #122	; 0x7a
 800fc02:	4619      	mov	r1, r3
 800fc04:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc08:	200a      	movs	r0, #10
 800fc0a:	9400      	str	r4, [sp, #0]
 800fc0c:	f00c f8a6 	bl	801bd5c <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 800fc10:	2191      	movs	r1, #145	; 0x91
 800fc12:	2014      	movs	r0, #20
 800fc14:	f006 fad4 	bl	80161c0 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 800fc18:	782a      	ldrb	r2, [r5, #0]
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	f002 0202 	and.w	r2, r2, #2
 800fc20:	2185      	movs	r1, #133	; 0x85
 800fc22:	20c8      	movs	r0, #200	; 0xc8
 800fc24:	f002 ff97 	bl	8012b56 <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fc28:	23b9      	movs	r3, #185	; 0xb9
 800fc2a:	9400      	str	r4, [sp, #0]
 800fc2c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc30:	4619      	mov	r1, r3
 800fc32:	200a      	movs	r0, #10
 800fc34:	f00c f892 	bl	801bd5c <TFT_DrawLine>
}
 800fc38:	b003      	add	sp, #12
 800fc3a:	bd30      	pop	{r4, r5, pc}
 800fc3c:	2000022a 	.word	0x2000022a
 800fc40:	200056f1 	.word	0x200056f1
 800fc44:	200056ef 	.word	0x200056ef

0800fc48 <GUI_ColorRendSet_Screen>:
{
 800fc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800fc4a:	4b28      	ldr	r3, [pc, #160]	; (800fcec <GUI_ColorRendSet_Screen+0xa4>)
 800fc4c:	4d28      	ldr	r5, [pc, #160]	; (800fcf0 <GUI_ColorRendSet_Screen+0xa8>)
 800fc4e:	4c29      	ldr	r4, [pc, #164]	; (800fcf4 <GUI_ColorRendSet_Screen+0xac>)
 800fc50:	2202      	movs	r2, #2
 800fc52:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fc54:	4b28      	ldr	r3, [pc, #160]	; (800fcf8 <GUI_ColorRendSet_Screen+0xb0>)
 800fc56:	4a29      	ldr	r2, [pc, #164]	; (800fcfc <GUI_ColorRendSet_Screen+0xb4>)
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	7812      	ldrb	r2, [r2, #0]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d103      	bne.n	800fc68 <GUI_ColorRendSet_Screen+0x20>
 800fc60:	782a      	ldrb	r2, [r5, #0]
 800fc62:	7823      	ldrb	r3, [r4, #0]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d03e      	beq.n	800fce6 <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 800fc68:	f7ff fc22 	bl	800f4b0 <GUI_Panels>
		Language_status_prev = Language_status;
 800fc6c:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fc6e:	4a24      	ldr	r2, [pc, #144]	; (800fd00 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 800fc70:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fc72:	2110      	movs	r1, #16
 800fc74:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fc76:	b90b      	cbnz	r3, 800fc7c <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 800fc78:	f7fe fff6 	bl	800ec68 <GUI_OptionMenuRu>
		if(Language_status == En){
 800fc7c:	7823      	ldrb	r3, [r4, #0]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d101      	bne.n	800fc86 <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 800fc82:	f7ff f861 	bl	800ed48 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fc86:	4d1f      	ldr	r5, [pc, #124]	; (800fd04 <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 800fc88:	f240 1145 	movw	r1, #325	; 0x145
 800fc8c:	201e      	movs	r0, #30
 800fc8e:	f006 fc35 	bl	80164fc <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fc92:	782a      	ldrb	r2, [r5, #0]
 800fc94:	2301      	movs	r3, #1
 800fc96:	401a      	ands	r2, r3
 800fc98:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800fc9c:	20b9      	movs	r0, #185	; 0xb9
 800fc9e:	f002 ff5a 	bl	8012b56 <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 800fca2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fca6:	f240 1363 	movw	r3, #355	; 0x163
 800fcaa:	4619      	mov	r1, r3
 800fcac:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fcb0:	200a      	movs	r0, #10
 800fcb2:	9400      	str	r4, [sp, #0]
 800fcb4:	f00c f852 	bl	801bd5c <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 800fcb8:	f240 1171 	movw	r1, #369	; 0x171
 800fcbc:	201e      	movs	r0, #30
 800fcbe:	f006 fc41 	bl	8016544 <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 800fcc2:	782a      	ldrb	r2, [r5, #0]
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	43d2      	mvns	r2, r2
 800fcc8:	401a      	ands	r2, r3
 800fcca:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800fcce:	20b9      	movs	r0, #185	; 0xb9
 800fcd0:	f002 ff41 	bl	8012b56 <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 800fcd4:	f240 1391 	movw	r3, #401	; 0x191
 800fcd8:	9400      	str	r4, [sp, #0]
 800fcda:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fcde:	4619      	mov	r1, r3
 800fce0:	200a      	movs	r0, #10
 800fce2:	f00c f83b 	bl	801bd5c <TFT_DrawLine>
}
 800fce6:	b003      	add	sp, #12
 800fce8:	bd30      	pop	{r4, r5, pc}
 800fcea:	bf00      	nop
 800fcec:	2000022f 	.word	0x2000022f
 800fcf0:	20090a64 	.word	0x20090a64
 800fcf4:	200056f3 	.word	0x200056f3
 800fcf8:	2000022a 	.word	0x2000022a
 800fcfc:	200056f1 	.word	0x200056f1
 800fd00:	20091008 	.word	0x20091008
 800fd04:	200056f0 	.word	0x200056f0

0800fd08 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800fd10:	4b87      	ldr	r3, [pc, #540]	; (800ff30 <GUI_Graph_Screen+0x228>)
 800fd12:	4a88      	ldr	r2, [pc, #544]	; (800ff34 <GUI_Graph_Screen+0x22c>)
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	7812      	ldrb	r2, [r2, #0]
 800fd18:	4d87      	ldr	r5, [pc, #540]	; (800ff38 <GUI_Graph_Screen+0x230>)
 800fd1a:	4c88      	ldr	r4, [pc, #544]	; (800ff3c <GUI_Graph_Screen+0x234>)
 800fd1c:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 800fd1e:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800fd20:	d104      	bne.n	800fd2c <GUI_Graph_Screen+0x24>
 800fd22:	782a      	ldrb	r2, [r5, #0]
 800fd24:	7823      	ldrb	r3, [r4, #0]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	f000 809d 	beq.w	800fe66 <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fd2c:	2063      	movs	r0, #99	; 0x63
 800fd2e:	f00b fe73 	bl	801ba18 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 800fd32:	4a83      	ldr	r2, [pc, #524]	; (800ff40 <GUI_Graph_Screen+0x238>)
 800fd34:	2300      	movs	r3, #0
 800fd36:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 800fd38:	4a82      	ldr	r2, [pc, #520]	; (800ff44 <GUI_Graph_Screen+0x23c>)
 800fd3a:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 800fd3c:	f7ff fbb8 	bl	800f4b0 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 800fd40:	7820      	ldrb	r0, [r4, #0]
 800fd42:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 800fd44:	4d80      	ldr	r5, [pc, #512]	; (800ff48 <GUI_Graph_Screen+0x240>)
 800fd46:	782b      	ldrb	r3, [r5, #0]
 800fd48:	07d9      	lsls	r1, r3, #31
 800fd4a:	d501      	bpl.n	800fd50 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 800fd4c:	f00a ff7c 	bl	801ac48 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 800fd50:	782b      	ldrb	r3, [r5, #0]
 800fd52:	075a      	lsls	r2, r3, #29
 800fd54:	d538      	bpl.n	800fdc8 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 800fd56:	7820      	ldrb	r0, [r4, #0]
 800fd58:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 800ff58 <GUI_Graph_Screen+0x250>
 800fd5c:	f8df c210 	ldr.w	ip, [pc, #528]	; 800ff70 <GUI_Graph_Screen+0x268>
 800fd60:	4e7a      	ldr	r6, [pc, #488]	; (800ff4c <GUI_Graph_Screen+0x244>)
 800fd62:	4f7b      	ldr	r7, [pc, #492]	; (800ff50 <GUI_Graph_Screen+0x248>)
 800fd64:	2800      	cmp	r0, #0
 800fd66:	f040 8086 	bne.w	800fe76 <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 800fd6a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800ff54 <GUI_Graph_Screen+0x24c>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	0119      	lsls	r1, r3, #4
 800fd72:	eb0c 0201 	add.w	r2, ip, r1
 800fd76:	edd2 7a00 	vldr	s15, [r2]
 800fd7a:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 800fd7e:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800fd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd84:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 800fd88:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800fd8c:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 800fd90:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 800fd94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd98:	ee17 2a90 	vmov	r2, s15
 800fd9c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800fda0:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 800fda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fda6:	d1e3      	bne.n	800fd70 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 800fda8:	2114      	movs	r1, #20
 800fdaa:	9000      	str	r0, [sp, #0]
 800fdac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800fdb0:	4608      	mov	r0, r1
 800fdb2:	4a69      	ldr	r2, [pc, #420]	; (800ff58 <GUI_Graph_Screen+0x250>)
 800fdb4:	f00b f908 	bl	801afc8 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 800fdb8:	7823      	ldrb	r3, [r4, #0]
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	2114      	movs	r1, #20
 800fdbe:	231f      	movs	r3, #31
 800fdc0:	4a62      	ldr	r2, [pc, #392]	; (800ff4c <GUI_Graph_Screen+0x244>)
 800fdc2:	4608      	mov	r0, r1
 800fdc4:	f00b f900 	bl	801afc8 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 800fdc8:	782b      	ldrb	r3, [r5, #0]
 800fdca:	079b      	lsls	r3, r3, #30
 800fdcc:	d545      	bpl.n	800fe5a <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 800fdce:	7826      	ldrb	r6, [r4, #0]
 800fdd0:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800ff64 <GUI_Graph_Screen+0x25c>
 800fdd4:	f8df a19c 	ldr.w	sl, [pc, #412]	; 800ff74 <GUI_Graph_Screen+0x26c>
 800fdd8:	4f60      	ldr	r7, [pc, #384]	; (800ff5c <GUI_Graph_Screen+0x254>)
 800fdda:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800ff78 <GUI_Graph_Screen+0x270>
 800fdde:	2e00      	cmp	r6, #0
 800fde0:	d16c      	bne.n	800febc <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 800fde2:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 800ff54 <GUI_Graph_Screen+0x24c>
 800fde6:	4635      	mov	r5, r6
 800fde8:	012a      	lsls	r2, r5, #4
 800fdea:	eb0a 0302 	add.w	r3, sl, r2
 800fdee:	edd3 7a00 	vldr	s15, [r3]
 800fdf2:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 800fdf6:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800fdf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 800fdfc:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800fdfe:	ee17 3a90 	vmov	r3, s15
 800fe02:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 800fe06:	f7f0 fbb7 	bl	8000578 <__aeabi_f2d>
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	4b54      	ldr	r3, [pc, #336]	; (800ff60 <GUI_Graph_Screen+0x258>)
 800fe0e:	f7f0 fd31 	bl	8000874 <__aeabi_ddiv>
 800fe12:	a343      	add	r3, pc, #268	; (adr r3, 800ff20 <GUI_Graph_Screen+0x218>)
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f7f0 fc02 	bl	8000620 <__aeabi_dmul>
 800fe1c:	f7f0 fef8 	bl	8000c10 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 800fe20:	ee07 0a90 	vmov	s15, r0
 800fe24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe28:	ee17 0a90 	vmov	r0, s15
 800fe2c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800fe30:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 800fe32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800fe36:	d1d7      	bne.n	800fde8 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 800fe38:	2114      	movs	r1, #20
 800fe3a:	4608      	mov	r0, r1
 800fe3c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800fe40:	4a48      	ldr	r2, [pc, #288]	; (800ff64 <GUI_Graph_Screen+0x25c>)
 800fe42:	9600      	str	r6, [sp, #0]
 800fe44:	f00b f8c0 	bl	801afc8 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 800fe48:	7823      	ldrb	r3, [r4, #0]
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	2114      	movs	r1, #20
 800fe4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800fe52:	4a42      	ldr	r2, [pc, #264]	; (800ff5c <GUI_Graph_Screen+0x254>)
 800fe54:	4608      	mov	r0, r1
 800fe56:	f00b f8b7 	bl	801afc8 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 800fe5a:	7820      	ldrb	r0, [r4, #0]
 800fe5c:	f00a fe26 	bl	801aaac <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 800fe60:	7820      	ldrb	r0, [r4, #0]
 800fe62:	f00a ffd3 	bl	801ae0c <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 800fe66:	4b40      	ldr	r3, [pc, #256]	; (800ff68 <GUI_Graph_Screen+0x260>)
 800fe68:	2204      	movs	r2, #4
 800fe6a:	701a      	strb	r2, [r3, #0]
}
 800fe6c:	b003      	add	sp, #12
 800fe6e:	ecbd 8b02 	vpop	{d8}
 800fe72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 800fe76:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800ff6c <GUI_Graph_Screen+0x264>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	f04f 080c 	mov.w	r8, #12
 800fe80:	fb08 f103 	mul.w	r1, r8, r3
 800fe84:	eb0c 0201 	add.w	r2, ip, r1
 800fe88:	edd2 7a00 	vldr	s15, [r2]
 800fe8c:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 800fe90:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800fe92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe96:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 800fe9a:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800fe9e:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 800fea2:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 800fea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800feaa:	ee17 2a90 	vmov	r2, s15
 800feae:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800feb2:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 800feb4:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800feb8:	d1e2      	bne.n	800fe80 <GUI_Graph_Screen+0x178>
 800feba:	e775      	b.n	800fda8 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 800febc:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 800ff6c <GUI_Graph_Screen+0x264>
 800fec0:	2500      	movs	r5, #0
 800fec2:	f04f 0b0c 	mov.w	fp, #12
 800fec6:	fb0b f205 	mul.w	r2, fp, r5
 800feca:	eb0a 0302 	add.w	r3, sl, r2
 800fece:	edd3 7a00 	vldr	s15, [r3]
 800fed2:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 800fed6:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 800fed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 800fedc:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 800fede:	ee17 3a90 	vmov	r3, s15
 800fee2:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 800fee6:	f7f0 fb47 	bl	8000578 <__aeabi_f2d>
 800feea:	2200      	movs	r2, #0
 800feec:	4b1c      	ldr	r3, [pc, #112]	; (800ff60 <GUI_Graph_Screen+0x258>)
 800feee:	f7f0 fcc1 	bl	8000874 <__aeabi_ddiv>
 800fef2:	a30d      	add	r3, pc, #52	; (adr r3, 800ff28 <GUI_Graph_Screen+0x220>)
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	f7f0 fb92 	bl	8000620 <__aeabi_dmul>
 800fefc:	f7f0 fe88 	bl	8000c10 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 800ff00:	ee07 0a90 	vmov	s15, r0
 800ff04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff08:	ee17 0a90 	vmov	r0, s15
 800ff0c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800ff10:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 800ff12:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 800ff16:	d1d6      	bne.n	800fec6 <GUI_Graph_Screen+0x1be>
 800ff18:	e78e      	b.n	800fe38 <GUI_Graph_Screen+0x130>
 800ff1a:	bf00      	nop
 800ff1c:	f3af 8000 	nop.w
 800ff20:	00000000 	.word	0x00000000
 800ff24:	40733000 	.word	0x40733000
 800ff28:	00000000 	.word	0x00000000
 800ff2c:	406a2000 	.word	0x406a2000
 800ff30:	2000022a 	.word	0x2000022a
 800ff34:	200056f1 	.word	0x200056f1
 800ff38:	20091009 	.word	0x20091009
 800ff3c:	200056fa 	.word	0x200056fa
 800ff40:	20005717 	.word	0x20005717
 800ff44:	20005716 	.word	0x20005716
 800ff48:	200056f2 	.word	0x200056f2
 800ff4c:	200912d0 	.word	0x200912d0
 800ff50:	20053930 	.word	0x20053930
 800ff54:	43998000 	.word	0x43998000
 800ff58:	20090d32 	.word	0x20090d32
 800ff5c:	20090a6c 	.word	0x20090a6c
 800ff60:	40240000 	.word	0x40240000
 800ff64:	2009100a 	.word	0x2009100a
 800ff68:	20090a65 	.word	0x20090a65
 800ff6c:	43510000 	.word	0x43510000
 800ff70:	20052930 	.word	0x20052930
 800ff74:	20009d28 	.word	0x20009d28
 800ff78:	2000ad28 	.word	0x2000ad28

0800ff7c <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 800ff7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 800ff7e:	4f2a      	ldr	r7, [pc, #168]	; (8010028 <GUI_SignalLevel+0xac>)
 800ff80:	4e2a      	ldr	r6, [pc, #168]	; (801002c <GUI_SignalLevel+0xb0>)
 800ff82:	783b      	ldrb	r3, [r7, #0]
 800ff84:	7832      	ldrb	r2, [r6, #0]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d00a      	beq.n	800ffa0 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 800ff8a:	b363      	cbz	r3, 800ffe6 <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 800ff8c:	4b28      	ldr	r3, [pc, #160]	; (8010030 <GUI_SignalLevel+0xb4>)
 800ff8e:	781a      	ldrb	r2, [r3, #0]
 800ff90:	4b28      	ldr	r3, [pc, #160]	; (8010034 <GUI_SignalLevel+0xb8>)
 800ff92:	211e      	movs	r1, #30
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	b9f2      	cbnz	r2, 800ffd6 <GUI_SignalLevel+0x5a>
 800ff98:	b1cb      	cbz	r3, 800ffce <GUI_SignalLevel+0x52>
 800ff9a:	200f      	movs	r0, #15
 800ff9c:	f008 ff36 	bl	8018e0c <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 800ffa0:	4d25      	ldr	r5, [pc, #148]	; (8010038 <GUI_SignalLevel+0xbc>)
 800ffa2:	4c26      	ldr	r4, [pc, #152]	; (801003c <GUI_SignalLevel+0xc0>)
 800ffa4:	782b      	ldrb	r3, [r5, #0]
 800ffa6:	7820      	ldrb	r0, [r4, #0]
 800ffa8:	4298      	cmp	r0, r3
 800ffaa:	d00a      	beq.n	800ffc2 <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 800ffac:	b38b      	cbz	r3, 8010012 <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 800ffae:	4b20      	ldr	r3, [pc, #128]	; (8010030 <GUI_SignalLevel+0xb4>)
 800ffb0:	781a      	ldrb	r2, [r3, #0]
 800ffb2:	4b20      	ldr	r3, [pc, #128]	; (8010034 <GUI_SignalLevel+0xb8>)
 800ffb4:	211e      	movs	r1, #30
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	bb1a      	cbnz	r2, 8010002 <GUI_SignalLevel+0x86>
 800ffba:	b1f3      	cbz	r3, 800fffa <GUI_SignalLevel+0x7e>
 800ffbc:	2014      	movs	r0, #20
 800ffbe:	f008 fe2d 	bl	8018c1c <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 800ffc2:	783b      	ldrb	r3, [r7, #0]
 800ffc4:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 800ffc6:	782b      	ldrb	r3, [r5, #0]
 800ffc8:	7023      	strb	r3, [r4, #0]
}
 800ffca:	b003      	add	sp, #12
 800ffcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 800ffce:	2032      	movs	r0, #50	; 0x32
 800ffd0:	f008 ffb8 	bl	8018f44 <GUI_TextMsgRu_HighRadiance>
 800ffd4:	e7e4      	b.n	800ffa0 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 800ffd6:	2037      	movs	r0, #55	; 0x37
 800ffd8:	b113      	cbz	r3, 800ffe0 <GUI_SignalLevel+0x64>
 800ffda:	f006 feb5 	bl	8016d48 <GUI_TextMsgEn_HighIrradiance>
 800ffde:	e7df      	b.n	800ffa0 <GUI_SignalLevel+0x24>
 800ffe0:	f006 ff2a 	bl	8016e38 <GUI_TextMsgEn_HighRadiance>
 800ffe4:	e7dc      	b.n	800ffa0 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 800ffe6:	2363      	movs	r3, #99	; 0x63
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800ffee:	2338      	movs	r3, #56	; 0x38
 800fff0:	2120      	movs	r1, #32
 800fff2:	200a      	movs	r0, #10
 800fff4:	f00b ff0f 	bl	801be16 <TFT_FillRectangle>
 800fff8:	e7d2      	b.n	800ffa0 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 800fffa:	2037      	movs	r0, #55	; 0x37
 800fffc:	f008 fe9c 	bl	8018d38 <GUI_TextMsgRu_LowRadiance>
 8010000:	e7df      	b.n	800ffc2 <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 8010002:	2046      	movs	r0, #70	; 0x46
 8010004:	b113      	cbz	r3, 801000c <GUI_SignalLevel+0x90>
 8010006:	f006 ffe5 	bl	8016fd4 <GUI_TextMsgEn_LowIrradiance>
 801000a:	e7da      	b.n	800ffc2 <GUI_SignalLevel+0x46>
 801000c:	f006 ff7e 	bl	8016f0c <GUI_TextMsgEn_LowRadiance>
 8010010:	e7d7      	b.n	800ffc2 <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 8010012:	2363      	movs	r3, #99	; 0x63
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801001a:	2338      	movs	r3, #56	; 0x38
 801001c:	2120      	movs	r1, #32
 801001e:	200a      	movs	r0, #10
 8010020:	f00b fef9 	bl	801be16 <TFT_FillRectangle>
 8010024:	e7cd      	b.n	800ffc2 <GUI_SignalLevel+0x46>
 8010026:	bf00      	nop
 8010028:	200905af 	.word	0x200905af
 801002c:	20005716 	.word	0x20005716
 8010030:	200056f3 	.word	0x200056f3
 8010034:	20000ebc 	.word	0x20000ebc
 8010038:	200905b2 	.word	0x200905b2
 801003c:	20005717 	.word	0x20005717

08010040 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 8010040:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010042:	4910      	ldr	r1, [pc, #64]	; (8010084 <GUI_Measure_Screen+0x44>)
 8010044:	4c10      	ldr	r4, [pc, #64]	; (8010088 <GUI_Measure_Screen+0x48>)
 8010046:	7809      	ldrb	r1, [r1, #0]
 8010048:	7822      	ldrb	r2, [r4, #0]
 801004a:	4291      	cmp	r1, r2
 801004c:	d014      	beq.n	8010078 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801004e:	2063      	movs	r0, #99	; 0x63
 8010050:	f00b fce2 	bl	801ba18 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 8010054:	4b0d      	ldr	r3, [pc, #52]	; (801008c <GUI_Measure_Screen+0x4c>)
 8010056:	2000      	movs	r0, #0
 8010058:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 801005a:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <GUI_Measure_Screen+0x50>)
 801005c:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 801005e:	4b0d      	ldr	r3, [pc, #52]	; (8010094 <GUI_Measure_Screen+0x54>)
 8010060:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 8010062:	f7fe ff0d 	bl	800ee80 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010066:	f7ff f9bb 	bl	800f3e0 <GUI_Up_Panel>
		GUI_Down_Panel();
 801006a:	f7ff f9dd 	bl	800f428 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 801006e:	4a0a      	ldr	r2, [pc, #40]	; (8010098 <GUI_Measure_Screen+0x58>)
 8010070:	2301      	movs	r3, #1
 8010072:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 8010074:	7023      	strb	r3, [r4, #0]
 8010076:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 8010078:	f7ff ff80 	bl	800ff7c <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 801007c:	2000      	movs	r0, #0
 801007e:	f7fe feff 	bl	800ee80 <Measure_Elements_Draw>
 8010082:	e7f4      	b.n	801006e <GUI_Measure_Screen+0x2e>
 8010084:	200056f1 	.word	0x200056f1
 8010088:	2000022a 	.word	0x2000022a
 801008c:	20005717 	.word	0x20005717
 8010090:	20005716 	.word	0x20005716
 8010094:	2000571b 	.word	0x2000571b
 8010098:	20090a65 	.word	0x20090a65

0801009c <GUI_Measure2_Screen>:
{
 801009c:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 801009e:	4b13      	ldr	r3, [pc, #76]	; (80100ec <GUI_Measure2_Screen+0x50>)
 80100a0:	4c13      	ldr	r4, [pc, #76]	; (80100f0 <GUI_Measure2_Screen+0x54>)
 80100a2:	2202      	movs	r2, #2
 80100a4:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 80100a6:	4b13      	ldr	r3, [pc, #76]	; (80100f4 <GUI_Measure2_Screen+0x58>)
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d017      	beq.n	80100de <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80100ae:	2063      	movs	r0, #99	; 0x63
 80100b0:	f00b fcb2 	bl	801ba18 <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 80100b4:	4b10      	ldr	r3, [pc, #64]	; (80100f8 <GUI_Measure2_Screen+0x5c>)
 80100b6:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 80100b8:	4b10      	ldr	r3, [pc, #64]	; (80100fc <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 80100ba:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 80100bc:	2201      	movs	r2, #1
 80100be:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 80100c0:	4a0f      	ldr	r2, [pc, #60]	; (8010100 <GUI_Measure2_Screen+0x64>)
 80100c2:	2300      	movs	r3, #0
 80100c4:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 80100c6:	4a0f      	ldr	r2, [pc, #60]	; (8010104 <GUI_Measure2_Screen+0x68>)
 80100c8:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 80100ca:	f7fe fed9 	bl	800ee80 <Measure_Elements_Draw>
		GUI_Up_Panel();
 80100ce:	f7ff f987 	bl	800f3e0 <GUI_Up_Panel>
		GUI_Down_Panel();
 80100d2:	f7ff f9a9 	bl	800f428 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 80100d6:	4b0c      	ldr	r3, [pc, #48]	; (8010108 <GUI_Measure2_Screen+0x6c>)
 80100d8:	2201      	movs	r2, #1
 80100da:	701a      	strb	r2, [r3, #0]
 80100dc:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 80100de:	f7ff ff4d 	bl	800ff7c <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 80100e2:	7820      	ldrb	r0, [r4, #0]
 80100e4:	f7fe fecc 	bl	800ee80 <Measure_Elements_Draw>
 80100e8:	e7f5      	b.n	80100d6 <GUI_Measure2_Screen+0x3a>
 80100ea:	bf00      	nop
 80100ec:	2000022f 	.word	0x2000022f
 80100f0:	20005714 	.word	0x20005714
 80100f4:	2000022a 	.word	0x2000022a
 80100f8:	20005720 	.word	0x20005720
 80100fc:	2000571b 	.word	0x2000571b
 8010100:	20005717 	.word	0x20005717
 8010104:	20005716 	.word	0x20005716
 8010108:	20090a65 	.word	0x20090a65

0801010c <GUI_Measure3_Screen>:
{
 801010c:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 801010e:	4b12      	ldr	r3, [pc, #72]	; (8010158 <GUI_Measure3_Screen+0x4c>)
 8010110:	4c12      	ldr	r4, [pc, #72]	; (801015c <GUI_Measure3_Screen+0x50>)
 8010112:	2502      	movs	r5, #2
 8010114:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 8010116:	4b12      	ldr	r3, [pc, #72]	; (8010160 <GUI_Measure3_Screen+0x54>)
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	2b03      	cmp	r3, #3
 801011c:	d016      	beq.n	801014c <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801011e:	2063      	movs	r0, #99	; 0x63
 8010120:	f00b fc7a 	bl	801ba18 <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 8010124:	4b0f      	ldr	r3, [pc, #60]	; (8010164 <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 8010126:	4a10      	ldr	r2, [pc, #64]	; (8010168 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010128:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 801012a:	4b10      	ldr	r3, [pc, #64]	; (801016c <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 801012c:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 801012e:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 8010130:	2300      	movs	r3, #0
 8010132:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010134:	4a0e      	ldr	r2, [pc, #56]	; (8010170 <GUI_Measure3_Screen+0x64>)
 8010136:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010138:	f7fe fea2 	bl	800ee80 <Measure_Elements_Draw>
		GUI_Up_Panel();
 801013c:	f7ff f950 	bl	800f3e0 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010140:	f7ff f972 	bl	800f428 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 8010144:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <GUI_Measure3_Screen+0x68>)
 8010146:	2201      	movs	r2, #1
 8010148:	701a      	strb	r2, [r3, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 801014c:	f7ff ff16 	bl	800ff7c <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 8010150:	7820      	ldrb	r0, [r4, #0]
 8010152:	f7fe fe95 	bl	800ee80 <Measure_Elements_Draw>
 8010156:	e7f5      	b.n	8010144 <GUI_Measure3_Screen+0x38>
 8010158:	2000022f 	.word	0x2000022f
 801015c:	20005714 	.word	0x20005714
 8010160:	2000022a 	.word	0x2000022a
 8010164:	20005720 	.word	0x20005720
 8010168:	20005717 	.word	0x20005717
 801016c:	2000571b 	.word	0x2000571b
 8010170:	20005716 	.word	0x20005716
 8010174:	20090a65 	.word	0x20090a65

08010178 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 8010180:	4c8f      	ldr	r4, [pc, #572]	; (80103c0 <GUI_Color_Screen+0x248>)
 8010182:	4f90      	ldr	r7, [pc, #576]	; (80103c4 <GUI_Color_Screen+0x24c>)
 8010184:	7823      	ldrb	r3, [r4, #0]
 8010186:	4d90      	ldr	r5, [pc, #576]	; (80103c8 <GUI_Color_Screen+0x250>)
 8010188:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 801018a:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 801018c:	d008      	beq.n	80101a0 <GUI_Color_Screen+0x28>
 801018e:	7823      	ldrb	r3, [r4, #0]
 8010190:	2b0e      	cmp	r3, #14
 8010192:	d005      	beq.n	80101a0 <GUI_Color_Screen+0x28>
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	2b0f      	cmp	r3, #15
 8010198:	d002      	beq.n	80101a0 <GUI_Color_Screen+0x28>
 801019a:	7823      	ldrb	r3, [r4, #0]
 801019c:	2b12      	cmp	r3, #18
 801019e:	d125      	bne.n	80101ec <GUI_Color_Screen+0x74>
		GUI_Panels();	
 80101a0:	f7ff f986 	bl	800f4b0 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 80101a4:	4b89      	ldr	r3, [pc, #548]	; (80103cc <GUI_Color_Screen+0x254>)
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 80101aa:	782b      	ldrb	r3, [r5, #0]
 80101ac:	f013 0f05 	tst.w	r3, #5
 80101b0:	bf0c      	ite	eq
 80101b2:	200b      	moveq	r0, #11
 80101b4:	2012      	movne	r0, #18
 80101b6:	f013 0f04 	tst.w	r3, #4
 80101ba:	4b85      	ldr	r3, [pc, #532]	; (80103d0 <GUI_Color_Screen+0x258>)
 80101bc:	bf18      	it	ne
 80101be:	21ac      	movne	r1, #172	; 0xac
 80101c0:	cb0c      	ldmia	r3, {r2, r3}
 80101c2:	bf08      	it	eq
 80101c4:	2196      	moveq	r1, #150	; 0x96
 80101c6:	f00c f828 	bl	801c21a <TFT_DrawBitmap>
		flag = 0;	
 80101ca:	4b82      	ldr	r3, [pc, #520]	; (80103d4 <GUI_Color_Screen+0x25c>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 80101d0:	4b81      	ldr	r3, [pc, #516]	; (80103d8 <GUI_Color_Screen+0x260>)
 80101d2:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 80101d4:	4b81      	ldr	r3, [pc, #516]	; (80103dc <GUI_Color_Screen+0x264>)
 80101d6:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 80101d8:	782b      	ldrb	r3, [r5, #0]
 80101da:	f013 0101 	ands.w	r1, r3, #1
 80101de:	f000 80cf 	beq.w	8010380 <GUI_Color_Screen+0x208>
 80101e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80101e6:	2012      	movs	r0, #18
 80101e8:	f005 fd10 	bl	8015c0c <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 80101ec:	4a7c      	ldr	r2, [pc, #496]	; (80103e0 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 80101ee:	2305      	movs	r3, #5
 80101f0:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 80101f2:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 80101f4:	4b7b      	ldr	r3, [pc, #492]	; (80103e4 <GUI_Color_Screen+0x26c>)
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f040 80d4 	bne.w	80103a6 <GUI_Color_Screen+0x22e>
 80101fe:	4b7a      	ldr	r3, [pc, #488]	; (80103e8 <GUI_Color_Screen+0x270>)
 8010200:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 8010204:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010208:	782b      	ldrb	r3, [r5, #0]
 801020a:	07d9      	lsls	r1, r3, #31
 801020c:	f140 8102 	bpl.w	8010414 <GUI_Color_Screen+0x29c>
 8010210:	4b76      	ldr	r3, [pc, #472]	; (80103ec <GUI_Color_Screen+0x274>)
 8010212:	4a77      	ldr	r2, [pc, #476]	; (80103f0 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 8010214:	4e77      	ldr	r6, [pc, #476]	; (80103f4 <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	7812      	ldrb	r2, [r2, #0]
 801021a:	eef0 0a48 	vmov.f32	s1, s16
 801021e:	eeb0 0a68 	vmov.f32	s0, s17
 8010222:	2146      	movs	r1, #70	; 0x46
 8010224:	2014      	movs	r0, #20
 8010226:	f004 f9a9 	bl	801457c <GUI_Text_xy_Measure>
		 scr_refresh++;
 801022a:	7833      	ldrb	r3, [r6, #0]
 801022c:	3301      	adds	r3, #1
 801022e:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 8010230:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 8010232:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 8010234:	f240 809b 	bls.w	801036e <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 8010238:	ee18 0a90 	vmov	r0, s17
 801023c:	f7f0 f99c 	bl	8000578 <__aeabi_f2d>
 8010240:	a35b      	add	r3, pc, #364	; (adr r3, 80103b0 <GUI_Color_Screen+0x238>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	f04f 0401 	mov.w	r4, #1
 801024a:	f7f0 fc5b 	bl	8000b04 <__aeabi_dcmplt>
 801024e:	b900      	cbnz	r0, 8010252 <GUI_Color_Screen+0xda>
 8010250:	4604      	mov	r4, r0
 8010252:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010256:	f000 808a 	beq.w	801036e <GUI_Color_Screen+0x1f6>
 801025a:	ee18 0a10 	vmov	r0, s16
 801025e:	f7f0 f98b 	bl	8000578 <__aeabi_f2d>
 8010262:	a355      	add	r3, pc, #340	; (adr r3, 80103b8 <GUI_Color_Screen+0x240>)
 8010264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010268:	f04f 0401 	mov.w	r4, #1
 801026c:	f7f0 fc4a 	bl	8000b04 <__aeabi_dcmplt>
 8010270:	b900      	cbnz	r0, 8010274 <GUI_Color_Screen+0xfc>
 8010272:	4604      	mov	r4, r0
 8010274:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010278:	d079      	beq.n	801036e <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 801027a:	4b56      	ldr	r3, [pc, #344]	; (80103d4 <GUI_Color_Screen+0x25c>)
 801027c:	4c5e      	ldr	r4, [pc, #376]	; (80103f8 <GUI_Color_Screen+0x280>)
 801027e:	781a      	ldrb	r2, [r3, #0]
 8010280:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 80103fc <GUI_Color_Screen+0x284>
 8010284:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010400 <GUI_Color_Screen+0x288>
 8010288:	4698      	mov	r8, r3
 801028a:	2a00      	cmp	r2, #0
 801028c:	d03f      	beq.n	801030e <GUI_Color_Screen+0x196>
 801028e:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010292:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8010404 <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010296:	edd4 5a00 	vldr	s11, [r4]
 801029a:	4a4d      	ldr	r2, [pc, #308]	; (80103d0 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 801029c:	eef1 6a66 	vneg.f32	s13, s13
 80102a0:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80102a4:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80102a8:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80102ac:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80102b0:	ab01      	add	r3, sp, #4
 80102b2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80102b6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010408 <GUI_Color_Screen+0x290>
 80102ba:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80102be:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80102c2:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80102c6:	eea6 7a89 	vfma.f32	s14, s13, s18
 80102ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102ce:	ee37 7a46 	vsub.f32	s14, s14, s12
 80102d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80102d6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80102da:	edcd 7a06 	vstr	s15, [sp, #24]
 80102de:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 80102e2:	eee5 7aa9 	vfma.f32	s15, s11, s19
 80102e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80102ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102ee:	edcd 7a07 	vstr	s15, [sp, #28]
 80102f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80102f6:	230f      	movs	r3, #15
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80102fe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010302:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010306:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801030a:	f00c f823 	bl	801c354 <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 801030e:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8010312:	eee8 7aa9 	vfma.f32	s15, s17, s19
 8010316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801031a:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 801031c:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 8010324:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010328:	edcd 7a04 	vstr	s15, [sp, #16]
 801032c:	eddf 7a37 	vldr	s15, [pc, #220]	; 801040c <GUI_Color_Screen+0x294>
 8010330:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8010334:	eee8 7a49 	vfms.f32	s15, s16, s18
 8010338:	4620      	mov	r0, r4
 801033a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801033e:	edcd 7a04 	vstr	s15, [sp, #16]
 8010342:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8010346:	4629      	mov	r1, r5
 8010348:	f00b fda1 	bl	801be8e <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 801034c:	2300      	movs	r3, #0
 801034e:	2202      	movs	r2, #2
 8010350:	4629      	mov	r1, r5
 8010352:	4620      	mov	r0, r4
 8010354:	f00b fd9b 	bl	801be8e <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 8010358:	2200      	movs	r2, #0
 801035a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801035e:	2012      	movs	r0, #18
 8010360:	f005 fc54 	bl	8015c0c <GUI_Axes_Locus_XY>
		flag = 1;
 8010364:	2301      	movs	r3, #1
 8010366:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 801036e:	2300      	movs	r3, #0
 8010370:	703b      	strb	r3, [r7, #0]
}         
 8010372:	b009      	add	sp, #36	; 0x24
 8010374:	ecbd 8b04 	vpop	{d8-d9}
 8010378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 801037c:	f7ff bdfe 	b.w	800ff7c <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 8010380:	f013 0204 	ands.w	r2, r3, #4
 8010384:	d006      	beq.n	8010394 <GUI_Color_Screen+0x21c>
 8010386:	460a      	mov	r2, r1
 8010388:	2012      	movs	r0, #18
 801038a:	f44f 71cb 	mov.w	r1, #406	; 0x196
 801038e:	f005 fca3 	bl	8015cd8 <GUI_Axes_Locus_LUV>
 8010392:	e72b      	b.n	80101ec <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 8010394:	0798      	lsls	r0, r3, #30
 8010396:	f57f af29 	bpl.w	80101ec <GUI_Color_Screen+0x74>
 801039a:	f240 1113 	movw	r1, #275	; 0x113
 801039e:	2088      	movs	r0, #136	; 0x88
 80103a0:	f005 fd00 	bl	8015da4 <GUI_Axes_Locus_Lab>
 80103a4:	e722      	b.n	80101ec <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 80103a6:	4b1a      	ldr	r3, [pc, #104]	; (8010410 <GUI_Color_Screen+0x298>)
 80103a8:	e72a      	b.n	8010200 <GUI_Color_Screen+0x88>
 80103aa:	bf00      	nop
 80103ac:	f3af 8000 	nop.w
 80103b0:	7ae147ae 	.word	0x7ae147ae
 80103b4:	3fe7ae14 	.word	0x3fe7ae14
 80103b8:	ae147ae1 	.word	0xae147ae1
 80103bc:	3feae147 	.word	0x3feae147
 80103c0:	2000022a 	.word	0x2000022a
 80103c4:	20005690 	.word	0x20005690
 80103c8:	200056ef 	.word	0x200056ef
 80103cc:	200056f8 	.word	0x200056f8
 80103d0:	20091000 	.word	0x20091000
 80103d4:	20005715 	.word	0x20005715
 80103d8:	20005717 	.word	0x20005717
 80103dc:	20005716 	.word	0x20005716
 80103e0:	20090a65 	.word	0x20090a65
 80103e4:	200056f4 	.word	0x200056f4
 80103e8:	2008f538 	.word	0x2008f538
 80103ec:	20000ec0 	.word	0x20000ec0
 80103f0:	20000ec1 	.word	0x20000ec1
 80103f4:	2000571a 	.word	0x2000571a
 80103f8:	2000570c 	.word	0x2000570c
 80103fc:	43960000 	.word	0x43960000
 8010400:	43938000 	.word	0x43938000
 8010404:	43790000 	.word	0x43790000
 8010408:	43c78000 	.word	0x43c78000
 801040c:	43c80000 	.word	0x43c80000
 8010410:	2008f530 	.word	0x2008f530
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010414:	075a      	lsls	r2, r3, #29
 8010416:	f140 80fb 	bpl.w	8010610 <GUI_Color_Screen+0x498>
 801041a:	4c71      	ldr	r4, [pc, #452]	; (80105e0 <GUI_Color_Screen+0x468>)
 801041c:	4b71      	ldr	r3, [pc, #452]	; (80105e4 <GUI_Color_Screen+0x46c>)
 801041e:	4a72      	ldr	r2, [pc, #456]	; (80105e8 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 8010420:	4e72      	ldr	r6, [pc, #456]	; (80105ec <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	7812      	ldrb	r2, [r2, #0]
 8010426:	edd4 0a01 	vldr	s1, [r4, #4]
 801042a:	ed94 0a00 	vldr	s0, [r4]
 801042e:	2146      	movs	r1, #70	; 0x46
 8010430:	2014      	movs	r0, #20
 8010432:	f004 f965 	bl	8014700 <GUI_Text_uv_Measure>
		scr_refresh++;
 8010436:	7833      	ldrb	r3, [r6, #0]
 8010438:	3301      	adds	r3, #1
 801043a:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 801043c:	2b0f      	cmp	r3, #15
		scr_refresh++;
 801043e:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 8010440:	d995      	bls.n	801036e <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 8010442:	edd4 7a00 	vldr	s15, [r4]
 8010446:	ed94 8a01 	vldr	s16, [r4, #4]
 801044a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010452:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010456:	bfcc      	ite	gt
 8010458:	2501      	movgt	r5, #1
 801045a:	2500      	movle	r5, #0
 801045c:	ee17 0a90 	vmov	r0, s15
 8010460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010464:	f005 0501 	and.w	r5, r5, #1
 8010468:	bfd8      	it	le
 801046a:	2500      	movle	r5, #0
 801046c:	f7f0 f884 	bl	8000578 <__aeabi_f2d>
 8010470:	a357      	add	r3, pc, #348	; (adr r3, 80105d0 <GUI_Color_Screen+0x458>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	f04f 0801 	mov.w	r8, #1
 801047a:	f7f0 fb43 	bl	8000b04 <__aeabi_dcmplt>
 801047e:	b900      	cbnz	r0, 8010482 <GUI_Color_Screen+0x30a>
 8010480:	4680      	mov	r8, r0
 8010482:	ea15 0f08 	tst.w	r5, r8
 8010486:	f43f af72 	beq.w	801036e <GUI_Color_Screen+0x1f6>
 801048a:	ee18 0a10 	vmov	r0, s16
 801048e:	f7f0 f873 	bl	8000578 <__aeabi_f2d>
 8010492:	a351      	add	r3, pc, #324	; (adr r3, 80105d8 <GUI_Color_Screen+0x460>)
 8010494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010498:	f04f 0501 	mov.w	r5, #1
 801049c:	f7f0 fb32 	bl	8000b04 <__aeabi_dcmplt>
 80104a0:	b900      	cbnz	r0, 80104a4 <GUI_Color_Screen+0x32c>
 80104a2:	4605      	mov	r5, r0
 80104a4:	f015 0fff 	tst.w	r5, #255	; 0xff
 80104a8:	f43f af61 	beq.w	801036e <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80104ac:	4d50      	ldr	r5, [pc, #320]	; (80105f0 <GUI_Color_Screen+0x478>)
 80104ae:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801060c <GUI_Color_Screen+0x494>
 80104b2:	782a      	ldrb	r2, [r5, #0]
 80104b4:	eddf 9a4f 	vldr	s19, [pc, #316]	; 80105f4 <GUI_Color_Screen+0x47c>
 80104b8:	eddf 8a4f 	vldr	s17, [pc, #316]	; 80105f8 <GUI_Color_Screen+0x480>
 80104bc:	2a00      	cmp	r2, #0
 80104be:	d03f      	beq.n	8010540 <GUI_Color_Screen+0x3c8>
 80104c0:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 80104c4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80105fc <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80104c8:	edd8 5a00 	vldr	s11, [r8]
 80104cc:	4a4c      	ldr	r2, [pc, #304]	; (8010600 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 80104ce:	eef1 6a66 	vneg.f32	s13, s13
 80104d2:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80104d6:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 80104da:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80104de:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80104e2:	ab01      	add	r3, sp, #4
 80104e4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80104e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010604 <GUI_Color_Screen+0x48c>
 80104ec:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 80104f0:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80104f4:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80104f8:	eea6 7aa9 	vfma.f32	s14, s13, s19
 80104fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010500:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010504:	edcd 7a05 	vstr	s15, [sp, #20]
 8010508:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801050c:	edcd 7a06 	vstr	s15, [sp, #24]
 8010510:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 8010514:	eee5 7aa8 	vfma.f32	s15, s11, s17
 8010518:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801051c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010520:	edcd 7a07 	vstr	s15, [sp, #28]
 8010524:	e883 0003 	stmia.w	r3, {r0, r1}
 8010528:	230c      	movs	r3, #12
 801052a:	9300      	str	r3, [sp, #0]
 801052c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010530:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010534:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010538:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801053c:	f00b ff0a 	bl	801c354 <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010540:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010608 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010544:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010548:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 801054c:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010550:	eef0 6a49 	vmov.f32	s13, s18
 8010554:	eee7 6a69 	vfms.f32	s13, s14, s19
 8010558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801055c:	2204      	movs	r2, #4
 801055e:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 8010562:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010566:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 801056a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801056e:	eeb0 7a48 	vmov.f32	s14, s16
 8010572:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8010576:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801057a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801057e:	edcd 7a05 	vstr	s15, [sp, #20]
 8010582:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8010586:	f00b fc82 	bl	801be8e <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 801058a:	edd4 7a01 	vldr	s15, [r4, #4]
 801058e:	eea7 9ae9 	vfms.f32	s18, s15, s19
 8010592:	2300      	movs	r3, #0
 8010594:	2202      	movs	r2, #2
 8010596:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 801059a:	edcd 7a04 	vstr	s15, [sp, #16]
 801059e:	edd4 7a00 	vldr	s15, [r4]
 80105a2:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80105a6:	eea7 8aa8 	vfma.f32	s16, s15, s17
 80105aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80105ae:	edcd 7a05 	vstr	s15, [sp, #20]
 80105b2:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80105b6:	f00b fc6a 	bl	801be8e <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 80105ba:	2200      	movs	r2, #0
 80105bc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80105c0:	2012      	movs	r0, #18
 80105c2:	f005 fb89 	bl	8015cd8 <GUI_Axes_Locus_LUV>
			flag = 1;
 80105c6:	2301      	movs	r3, #1
 80105c8:	702b      	strb	r3, [r5, #0]
 80105ca:	e6ce      	b.n	801036a <GUI_Color_Screen+0x1f2>
 80105cc:	f3af 8000 	nop.w
 80105d0:	c28f5c29 	.word	0xc28f5c29
 80105d4:	3fe428f5 	.word	0x3fe428f5
 80105d8:	ae147ae1 	.word	0xae147ae1
 80105dc:	3fe2e147 	.word	0x3fe2e147
 80105e0:	2008f528 	.word	0x2008f528
 80105e4:	20000ec0 	.word	0x20000ec0
 80105e8:	20000ec1 	.word	0x20000ec1
 80105ec:	2000571a 	.word	0x2000571a
 80105f0:	20005715 	.word	0x20005715
 80105f4:	43c60000 	.word	0x43c60000
 80105f8:	43c98000 	.word	0x43c98000
 80105fc:	43690000 	.word	0x43690000
 8010600:	20091000 	.word	0x20091000
 8010604:	43ca8000 	.word	0x43ca8000
 8010608:	43cb0000 	.word	0x43cb0000
 801060c:	20005704 	.word	0x20005704
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 8010610:	079b      	lsls	r3, r3, #30
 8010612:	f57f aeac 	bpl.w	801036e <GUI_Color_Screen+0x1f6>
 8010616:	4984      	ldr	r1, [pc, #528]	; (8010828 <GUI_Color_Screen+0x6b0>)
 8010618:	4c84      	ldr	r4, [pc, #528]	; (801082c <GUI_Color_Screen+0x6b4>)
 801061a:	7809      	ldrb	r1, [r1, #0]
 801061c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010620:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010624:	9102      	str	r1, [sp, #8]
 8010626:	4982      	ldr	r1, [pc, #520]	; (8010830 <GUI_Color_Screen+0x6b8>)
 8010628:	7809      	ldrb	r1, [r1, #0]
 801062a:	9101      	str	r1, [sp, #4]
 801062c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010630:	9100      	str	r1, [sp, #0]
 8010632:	2014      	movs	r0, #20
 8010634:	2136      	movs	r1, #54	; 0x36
 8010636:	f005 f81b 	bl	8015670 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 801063a:	8863      	ldrh	r3, [r4, #2]
 801063c:	337f      	adds	r3, #127	; 0x7f
 801063e:	b29b      	uxth	r3, r3
 8010640:	2bfe      	cmp	r3, #254	; 0xfe
 8010642:	f63f ae94 	bhi.w	801036e <GUI_Color_Screen+0x1f6>
 8010646:	88a3      	ldrh	r3, [r4, #4]
 8010648:	337f      	adds	r3, #127	; 0x7f
 801064a:	b29b      	uxth	r3, r3
 801064c:	2bfe      	cmp	r3, #254	; 0xfe
 801064e:	f63f ae8e 	bhi.w	801036e <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010652:	4d78      	ldr	r5, [pc, #480]	; (8010834 <GUI_Color_Screen+0x6bc>)
 8010654:	4e78      	ldr	r6, [pc, #480]	; (8010838 <GUI_Color_Screen+0x6c0>)
 8010656:	782b      	ldrb	r3, [r5, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d05d      	beq.n	8010718 <GUI_Color_Screen+0x5a0>
 801065c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8010660:	f7ef ff78 	bl	8000554 <__aeabi_i2d>
 8010664:	a368      	add	r3, pc, #416	; (adr r3, 8010808 <GUI_Color_Screen+0x690>)
 8010666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066a:	f7ef ffd9 	bl	8000620 <__aeabi_dmul>
 801066e:	4682      	mov	sl, r0
 8010670:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8010674:	468b      	mov	fp, r1
 8010676:	f7ef ff6d 	bl	8000554 <__aeabi_i2d>
 801067a:	a363      	add	r3, pc, #396	; (adr r3, 8010808 <GUI_Color_Screen+0x690>)
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	f7ef ffce 	bl	8000620 <__aeabi_dmul>
 8010684:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010686:	4602      	mov	r2, r0
 8010688:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 801068a:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 801068c:	2000      	movs	r0, #0
 801068e:	496b      	ldr	r1, [pc, #428]	; (801083c <GUI_Color_Screen+0x6c4>)
 8010690:	f7ef fe12 	bl	80002b8 <__aeabi_dsub>
 8010694:	2200      	movs	r2, #0
 8010696:	4b6a      	ldr	r3, [pc, #424]	; (8010840 <GUI_Color_Screen+0x6c8>)
 8010698:	f7ef fe0e 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 801069c:	f7f0 fa98 	bl	8000bd0 <__aeabi_d2uiz>
 80106a0:	b283      	uxth	r3, r0
 80106a2:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80106a4:	2200      	movs	r2, #0
 80106a6:	4b67      	ldr	r3, [pc, #412]	; (8010844 <GUI_Color_Screen+0x6cc>)
 80106a8:	4650      	mov	r0, sl
 80106aa:	4659      	mov	r1, fp
 80106ac:	f7ef fe06 	bl	80002bc <__adddf3>
 80106b0:	2200      	movs	r2, #0
 80106b2:	4b63      	ldr	r3, [pc, #396]	; (8010840 <GUI_Color_Screen+0x6c8>)
 80106b4:	f7ef fe00 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80106b8:	f7f0 fa8a 	bl	8000bd0 <__aeabi_d2uiz>
 80106bc:	b283      	uxth	r3, r0
 80106be:	4642      	mov	r2, r8
 80106c0:	9305      	str	r3, [sp, #20]
 80106c2:	a153      	add	r1, pc, #332	; (adr r1, 8010810 <GUI_Color_Screen+0x698>)
 80106c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106c8:	464b      	mov	r3, r9
 80106ca:	f7ef fdf5 	bl	80002b8 <__aeabi_dsub>
 80106ce:	2200      	movs	r2, #0
 80106d0:	4b5b      	ldr	r3, [pc, #364]	; (8010840 <GUI_Color_Screen+0x6c8>)
 80106d2:	f7ef fdf1 	bl	80002b8 <__aeabi_dsub>
 80106d6:	f7f0 fa7b 	bl	8000bd0 <__aeabi_d2uiz>
 80106da:	a34f      	add	r3, pc, #316	; (adr r3, 8010818 <GUI_Color_Screen+0x6a0>)
 80106dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e0:	fa1f f880 	uxth.w	r8, r0
 80106e4:	4659      	mov	r1, fp
 80106e6:	4650      	mov	r0, sl
 80106e8:	f7ef fde8 	bl	80002bc <__adddf3>
 80106ec:	2200      	movs	r2, #0
 80106ee:	4b54      	ldr	r3, [pc, #336]	; (8010840 <GUI_Color_Screen+0x6c8>)
 80106f0:	f7ef fde2 	bl	80002b8 <__aeabi_dsub>
 80106f4:	f7f0 fa6c 	bl	8000bd0 <__aeabi_d2uiz>
 80106f8:	4a53      	ldr	r2, [pc, #332]	; (8010848 <GUI_Color_Screen+0x6d0>)
 80106fa:	fa1f fe80 	uxth.w	lr, r0
 80106fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010702:	ab01      	add	r3, sp, #4
 8010704:	e883 0003 	stmia.w	r3, {r0, r1}
 8010708:	230c      	movs	r3, #12
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	9a05      	ldr	r2, [sp, #20]
 801070e:	9b04      	ldr	r3, [sp, #16]
 8010710:	4641      	mov	r1, r8
 8010712:	4670      	mov	r0, lr
 8010714:	f00b fe1e 	bl	801c354 <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010718:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 801071c:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010720:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010722:	ee07 0a90 	vmov	s15, r0
 8010726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 801072a:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 801072e:	ee17 0a90 	vmov	r0, s15
 8010732:	f7ef ff21 	bl	8000578 <__aeabi_f2d>
 8010736:	a334      	add	r3, pc, #208	; (adr r3, 8010808 <GUI_Color_Screen+0x690>)
 8010738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073c:	f7ef ff70 	bl	8000620 <__aeabi_dmul>
 8010740:	4602      	mov	r2, r0
 8010742:	460b      	mov	r3, r1
 8010744:	a136      	add	r1, pc, #216	; (adr r1, 8010820 <GUI_Color_Screen+0x6a8>)
 8010746:	e9d1 0100 	ldrd	r0, r1, [r1]
 801074a:	f7ef fdb5 	bl	80002b8 <__aeabi_dsub>
 801074e:	f7f0 fa17 	bl	8000b80 <__aeabi_d2iz>
 8010752:	ee07 8a90 	vmov	s15, r8
 8010756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801075a:	b206      	sxth	r6, r0
 801075c:	ee17 0a90 	vmov	r0, s15
 8010760:	f7ef ff0a 	bl	8000578 <__aeabi_f2d>
 8010764:	a328      	add	r3, pc, #160	; (adr r3, 8010808 <GUI_Color_Screen+0x690>)
 8010766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076a:	f7ef ff59 	bl	8000620 <__aeabi_dmul>
 801076e:	2200      	movs	r2, #0
 8010770:	4b36      	ldr	r3, [pc, #216]	; (801084c <GUI_Color_Screen+0x6d4>)
 8010772:	f7ef fda3 	bl	80002bc <__adddf3>
 8010776:	f7f0 fa03 	bl	8000b80 <__aeabi_d2iz>
 801077a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801077e:	2204      	movs	r2, #4
 8010780:	4631      	mov	r1, r6
 8010782:	b200      	sxth	r0, r0
 8010784:	f00b fb83 	bl	801be8e <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 8010788:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801078c:	ee07 0a90 	vmov	s15, r0
 8010790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010794:	ee17 0a90 	vmov	r0, s15
 8010798:	f7ef feee 	bl	8000578 <__aeabi_f2d>
 801079c:	a31a      	add	r3, pc, #104	; (adr r3, 8010808 <GUI_Color_Screen+0x690>)
 801079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a2:	f7ef ff3d 	bl	8000620 <__aeabi_dmul>
 80107a6:	4602      	mov	r2, r0
 80107a8:	460b      	mov	r3, r1
 80107aa:	a11d      	add	r1, pc, #116	; (adr r1, 8010820 <GUI_Color_Screen+0x6a8>)
 80107ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107b0:	f7ef fd82 	bl	80002b8 <__aeabi_dsub>
 80107b4:	f7f0 f9e4 	bl	8000b80 <__aeabi_d2iz>
 80107b8:	b206      	sxth	r6, r0
 80107ba:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80107be:	ee07 0a90 	vmov	s15, r0
 80107c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107c6:	ee17 0a90 	vmov	r0, s15
 80107ca:	f7ef fed5 	bl	8000578 <__aeabi_f2d>
 80107ce:	a30e      	add	r3, pc, #56	; (adr r3, 8010808 <GUI_Color_Screen+0x690>)
 80107d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d4:	f7ef ff24 	bl	8000620 <__aeabi_dmul>
 80107d8:	2200      	movs	r2, #0
 80107da:	4b1c      	ldr	r3, [pc, #112]	; (801084c <GUI_Color_Screen+0x6d4>)
 80107dc:	f7ef fd6e 	bl	80002bc <__adddf3>
 80107e0:	f7f0 f9ce 	bl	8000b80 <__aeabi_d2iz>
 80107e4:	2300      	movs	r3, #0
 80107e6:	2202      	movs	r2, #2
 80107e8:	4631      	mov	r1, r6
 80107ea:	b200      	sxth	r0, r0
 80107ec:	f00b fb4f 	bl	801be8e <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 80107f0:	2200      	movs	r2, #0
 80107f2:	f240 1113 	movw	r1, #275	; 0x113
 80107f6:	2088      	movs	r0, #136	; 0x88
 80107f8:	f005 fad4 	bl	8015da4 <GUI_Axes_Locus_Lab>
				flag = 1;
 80107fc:	2301      	movs	r3, #1
 80107fe:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 8010800:	4b13      	ldr	r3, [pc, #76]	; (8010850 <GUI_Color_Screen+0x6d8>)
 8010802:	2200      	movs	r2, #0
 8010804:	701a      	strb	r2, [r3, #0]
 8010806:	e5b2      	b.n	801036e <GUI_Color_Screen+0x1f6>
 8010808:	5a1cac08 	.word	0x5a1cac08
 801080c:	3fef3b64 	.word	0x3fef3b64
 8010810:	00000000 	.word	0x00000000
 8010814:	40712000 	.word	0x40712000
 8010818:	00000000 	.word	0x00000000
 801081c:	4060e000 	.word	0x4060e000
 8010820:	00000000 	.word	0x00000000
 8010824:	40713000 	.word	0x40713000
 8010828:	20000ec0 	.word	0x20000ec0
 801082c:	2008f50c 	.word	0x2008f50c
 8010830:	20000ec1 	.word	0x20000ec1
 8010834:	20005715 	.word	0x20005715
 8010838:	200056fc 	.word	0x200056fc
 801083c:	405f0000 	.word	0x405f0000
 8010840:	40140000 	.word	0x40140000
 8010844:	405f4000 	.word	0x405f4000
 8010848:	20091000 	.word	0x20091000
 801084c:	40610000 	.word	0x40610000
 8010850:	2000571a 	.word	0x2000571a

08010854 <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 8010854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 8010856:	4b39      	ldr	r3, [pc, #228]	; (801093c <GUI_ColorRend_Screen+0xe8>)
 8010858:	4d39      	ldr	r5, [pc, #228]	; (8010940 <GUI_ColorRend_Screen+0xec>)
 801085a:	4c3a      	ldr	r4, [pc, #232]	; (8010944 <GUI_ColorRend_Screen+0xf0>)
 801085c:	2202      	movs	r2, #2
 801085e:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 8010860:	4b39      	ldr	r3, [pc, #228]	; (8010948 <GUI_ColorRend_Screen+0xf4>)
 8010862:	4a3a      	ldr	r2, [pc, #232]	; (801094c <GUI_ColorRend_Screen+0xf8>)
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	7812      	ldrb	r2, [r2, #0]
 8010868:	429a      	cmp	r2, r3
 801086a:	d103      	bne.n	8010874 <GUI_ColorRend_Screen+0x20>
 801086c:	782a      	ldrb	r2, [r5, #0]
 801086e:	7823      	ldrb	r3, [r4, #0]
 8010870:	429a      	cmp	r2, r3
 8010872:	d02b      	beq.n	80108cc <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 8010874:	f7fe fe1c 	bl	800f4b0 <GUI_Panels>
	oldLowSignal = 0;
 8010878:	4a35      	ldr	r2, [pc, #212]	; (8010950 <GUI_ColorRend_Screen+0xfc>)
 801087a:	2300      	movs	r3, #0
 801087c:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 801087e:	4a35      	ldr	r2, [pc, #212]	; (8010954 <GUI_ColorRend_Screen+0x100>)
 8010880:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 8010882:	7823      	ldrb	r3, [r4, #0]
 8010884:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010886:	4d34      	ldr	r5, [pc, #208]	; (8010958 <GUI_ColorRend_Screen+0x104>)
 8010888:	782a      	ldrb	r2, [r5, #0]
 801088a:	2a00      	cmp	r2, #0
 801088c:	d03c      	beq.n	8010908 <GUI_ColorRend_Screen+0xb4>
 801088e:	4b33      	ldr	r3, [pc, #204]	; (801095c <GUI_ColorRend_Screen+0x108>)
 8010890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010894:	f7f0 f9bc 	bl	8000c10 <__aeabi_d2f>
 8010898:	210d      	movs	r1, #13
 801089a:	ee00 0a10 	vmov	s0, r0
 801089e:	2055      	movs	r0, #85	; 0x55
 80108a0:	f002 fb36 	bl	8012f10 <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 80108a4:	4b2e      	ldr	r3, [pc, #184]	; (8010960 <GUI_ColorRend_Screen+0x10c>)
 80108a6:	2206      	movs	r2, #6
 80108a8:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 80108aa:	782b      	ldrb	r3, [r5, #0]
 80108ac:	07da      	lsls	r2, r3, #31
 80108ae:	d52d      	bpl.n	801090c <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 80108b0:	492c      	ldr	r1, [pc, #176]	; (8010964 <GUI_ColorRend_Screen+0x110>)
 80108b2:	4b2d      	ldr	r3, [pc, #180]	; (8010968 <GUI_ColorRend_Screen+0x114>)
 80108b4:	4a2d      	ldr	r2, [pc, #180]	; (801096c <GUI_ColorRend_Screen+0x118>)
 80108b6:	f991 1000 	ldrsb.w	r1, [r1]
 80108ba:	f993 3000 	ldrsb.w	r3, [r3]
 80108be:	f992 2000 	ldrsb.w	r2, [r2]
 80108c2:	7820      	ldrb	r0, [r4, #0]
 80108c4:	9100      	str	r1, [sp, #0]
 80108c6:	492a      	ldr	r1, [pc, #168]	; (8010970 <GUI_ColorRend_Screen+0x11c>)
 80108c8:	f7fd f9ba 	bl	800dc40 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 80108cc:	4b29      	ldr	r3, [pc, #164]	; (8010974 <GUI_ColorRend_Screen+0x120>)
 80108ce:	781a      	ldrb	r2, [r3, #0]
 80108d0:	4b29      	ldr	r3, [pc, #164]	; (8010978 <GUI_ColorRend_Screen+0x124>)
 80108d2:	7819      	ldrb	r1, [r3, #0]
 80108d4:	4291      	cmp	r1, r2
 80108d6:	d012      	beq.n	80108fe <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 80108d8:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 80108da:	4b1f      	ldr	r3, [pc, #124]	; (8010958 <GUI_ColorRend_Screen+0x104>)
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	07db      	lsls	r3, r3, #31
 80108e0:	d520      	bpl.n	8010924 <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 80108e2:	4920      	ldr	r1, [pc, #128]	; (8010964 <GUI_ColorRend_Screen+0x110>)
 80108e4:	4b20      	ldr	r3, [pc, #128]	; (8010968 <GUI_ColorRend_Screen+0x114>)
 80108e6:	4a21      	ldr	r2, [pc, #132]	; (801096c <GUI_ColorRend_Screen+0x118>)
 80108e8:	f991 1000 	ldrsb.w	r1, [r1]
 80108ec:	f993 3000 	ldrsb.w	r3, [r3]
 80108f0:	f992 2000 	ldrsb.w	r2, [r2]
 80108f4:	7820      	ldrb	r0, [r4, #0]
 80108f6:	9100      	str	r1, [sp, #0]
 80108f8:	491d      	ldr	r1, [pc, #116]	; (8010970 <GUI_ColorRend_Screen+0x11c>)
 80108fa:	f7fd f9a1 	bl	800dc40 <CRI_Draw>
}
 80108fe:	b003      	add	sp, #12
 8010900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 8010904:	f7ff bb3a 	b.w	800ff7c <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010908:	4b1c      	ldr	r3, [pc, #112]	; (801097c <GUI_ColorRend_Screen+0x128>)
 801090a:	e7c1      	b.n	8010890 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 801090c:	491c      	ldr	r1, [pc, #112]	; (8010980 <GUI_ColorRend_Screen+0x12c>)
 801090e:	4b1d      	ldr	r3, [pc, #116]	; (8010984 <GUI_ColorRend_Screen+0x130>)
 8010910:	4a1d      	ldr	r2, [pc, #116]	; (8010988 <GUI_ColorRend_Screen+0x134>)
 8010912:	7809      	ldrb	r1, [r1, #0]
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	7812      	ldrb	r2, [r2, #0]
 8010918:	7820      	ldrb	r0, [r4, #0]
 801091a:	9100      	str	r1, [sp, #0]
 801091c:	491b      	ldr	r1, [pc, #108]	; (801098c <GUI_ColorRend_Screen+0x138>)
 801091e:	f7fb f965 	bl	800bbec <CQS_Draw>
 8010922:	e7d3      	b.n	80108cc <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010924:	4916      	ldr	r1, [pc, #88]	; (8010980 <GUI_ColorRend_Screen+0x12c>)
 8010926:	4b17      	ldr	r3, [pc, #92]	; (8010984 <GUI_ColorRend_Screen+0x130>)
 8010928:	4a17      	ldr	r2, [pc, #92]	; (8010988 <GUI_ColorRend_Screen+0x134>)
 801092a:	7809      	ldrb	r1, [r1, #0]
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	7812      	ldrb	r2, [r2, #0]
 8010930:	7820      	ldrb	r0, [r4, #0]
 8010932:	9100      	str	r1, [sp, #0]
 8010934:	4915      	ldr	r1, [pc, #84]	; (801098c <GUI_ColorRend_Screen+0x138>)
 8010936:	f7fb f959 	bl	800bbec <CQS_Draw>
 801093a:	e7e0      	b.n	80108fe <GUI_ColorRend_Screen+0xaa>
 801093c:	2000022f 	.word	0x2000022f
 8010940:	20090a68 	.word	0x20090a68
 8010944:	200056f9 	.word	0x200056f9
 8010948:	2000022a 	.word	0x2000022a
 801094c:	200056f1 	.word	0x200056f1
 8010950:	20005717 	.word	0x20005717
 8010954:	20005716 	.word	0x20005716
 8010958:	200056f0 	.word	0x200056f0
 801095c:	20090970 	.word	0x20090970
 8010960:	20090a65 	.word	0x20090a65
 8010964:	20004648 	.word	0x20004648
 8010968:	2000464a 	.word	0x2000464a
 801096c:	20004649 	.word	0x20004649
 8010970:	2000464b 	.word	0x2000464b
 8010974:	200056ed 	.word	0x200056ed
 8010978:	200056ee 	.word	0x200056ee
 801097c:	200906a0 	.word	0x200906a0
 8010980:	20003624 	.word	0x20003624
 8010984:	20003625 	.word	0x20003625
 8010988:	20003623 	.word	0x20003623
 801098c:	20003614 	.word	0x20003614

08010990 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 8010990:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 8010992:	4b2d      	ldr	r3, [pc, #180]	; (8010a48 <GUI_Display_Refresh+0xb8>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	3b01      	subs	r3, #1
 8010998:	2b11      	cmp	r3, #17
 801099a:	d80f      	bhi.n	80109bc <GUI_Display_Refresh+0x2c>
 801099c:	e8df f003 	tbb	[pc, r3]
 80109a0:	17130f09 	.word	0x17130f09
 80109a4:	27231f1b 	.word	0x27231f1b
 80109a8:	37332f2b 	.word	0x37332f2b
 80109ac:	47433f3b 	.word	0x47433f3b
 80109b0:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 80109b2:	f7ff fb45 	bl	8010040 <GUI_Measure_Screen>
 80109b6:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 80109b8:	4b24      	ldr	r3, [pc, #144]	; (8010a4c <GUI_Display_Refresh+0xbc>)
 80109ba:	701a      	strb	r2, [r3, #0]
 80109bc:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 80109be:	f7ff fb6d 	bl	801009c <GUI_Measure2_Screen>
 80109c2:	2202      	movs	r2, #2
 80109c4:	e7f8      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 80109c6:	f7ff fba1 	bl	801010c <GUI_Measure3_Screen>
 80109ca:	2203      	movs	r2, #3
 80109cc:	e7f4      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 80109ce:	f7ff f99b 	bl	800fd08 <GUI_Graph_Screen>
 80109d2:	2204      	movs	r2, #4
 80109d4:	e7f0      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 80109d6:	f7ff fbcf 	bl	8010178 <GUI_Color_Screen>
 80109da:	2205      	movs	r2, #5
 80109dc:	e7ec      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 80109de:	f7ff ff39 	bl	8010854 <GUI_ColorRend_Screen>
 80109e2:	2206      	movs	r2, #6
 80109e4:	e7e8      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 80109e6:	f7fe fda1 	bl	800f52c <GUI_DataSet1_Screen>
 80109ea:	2207      	movs	r2, #7
 80109ec:	e7e4      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 80109ee:	f7fe fe01 	bl	800f5f4 <GUI_DataSet2_Screen>
 80109f2:	2208      	movs	r2, #8
 80109f4:	e7e0      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 80109f6:	f7fe fed5 	bl	800f7a4 <GUI_DataSet3_Screen>
 80109fa:	2209      	movs	r2, #9
 80109fc:	e7dc      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 80109fe:	f7fe ff45 	bl	800f88c <GUI_DataSet4_Screen>
 8010a02:	220a      	movs	r2, #10
 8010a04:	e7d8      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 8010a06:	f7fe ffe3 	bl	800f9d0 <GUI_DataSet5_Screen>
 8010a0a:	220b      	movs	r2, #11
 8010a0c:	e7d4      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 8010a0e:	f7ff f819 	bl	800fa44 <GUI_GraphSet1_Screen>
 8010a12:	220c      	movs	r2, #12
 8010a14:	e7d0      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 8010a16:	f7ff f85d 	bl	800fad4 <GUI_GraphSet2_Screen>
 8010a1a:	220d      	movs	r2, #13
 8010a1c:	e7cc      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 8010a1e:	f7ff f893 	bl	800fb48 <GUI_ColorSet1_Screen>
 8010a22:	220e      	movs	r2, #14
 8010a24:	e7c8      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 8010a26:	f7ff f8d3 	bl	800fbd0 <GUI_ColorSet2_Screen>
 8010a2a:	220f      	movs	r2, #15
 8010a2c:	e7c4      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 8010a2e:	f7ff f90b 	bl	800fc48 <GUI_ColorRendSet_Screen>
 8010a32:	2210      	movs	r2, #16
 8010a34:	e7c0      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8010a36:	f7fe fc19 	bl	800f26c <GUI_Information_Screen>
 8010a3a:	2211      	movs	r2, #17
 8010a3c:	e7bc      	b.n	80109b8 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010a3e:	f7fe fc63 	bl	800f308 <GUI_SD_Write_Screen>
 8010a42:	2212      	movs	r2, #18
 8010a44:	e7b8      	b.n	80109b8 <GUI_Display_Refresh+0x28>
 8010a46:	bf00      	nop
 8010a48:	200056f1 	.word	0x200056f1
 8010a4c:	2000022a 	.word	0x2000022a

08010a50 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 8010a50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
//	uint16_t Touch_x = 0, Touch_y = 0;
//	TS_Get_XY1(TS_I2C_ADDRESS, &temp_x, &temp_y);
	switch(GUI_screen_state){
 8010a54:	4c9c      	ldr	r4, [pc, #624]	; (8010cc8 <GUI_Touch_Processing+0x278>)
 8010a56:	7823      	ldrb	r3, [r4, #0]
 8010a58:	3b01      	subs	r3, #1
 8010a5a:	2b11      	cmp	r3, #17
 8010a5c:	f201 82b4 	bhi.w	8011fc8 <GUI_Touch_Processing+0x1578>
 8010a60:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010a64:	00390012 	.word	0x00390012
 8010a68:	00b90070 	.word	0x00b90070
 8010a6c:	014800f8 	.word	0x014800f8
 8010a70:	03110202 	.word	0x03110202
 8010a74:	04bd03db 	.word	0x04bd03db
 8010a78:	070a06a5 	.word	0x070a06a5
 8010a7c:	080f07ac 	.word	0x080f07ac
 8010a80:	099d08e6 	.word	0x099d08e6
 8010a84:	00960a64 	.word	0x00960a64
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 8010a88:	4b90      	ldr	r3, [pc, #576]	; (8010ccc <GUI_Touch_Processing+0x27c>)
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	701a      	strb	r2, [r3, #0]
		
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010a8e:	4b90      	ldr	r3, [pc, #576]	; (8010cd0 <GUI_Touch_Processing+0x280>)
 8010a90:	881a      	ldrh	r2, [r3, #0]
 8010a92:	4b90      	ldr	r3, [pc, #576]	; (8010cd4 <GUI_Touch_Processing+0x284>)
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	2b36      	cmp	r3, #54	; 0x36
 8010a9e:	f102 31ff 	add.w	r1, r2, #4294967295
 8010aa2:	bf8c      	ite	hi
 8010aa4:	2300      	movhi	r3, #0
 8010aa6:	2301      	movls	r3, #1
 8010aa8:	2936      	cmp	r1, #54	; 0x36
 8010aaa:	d802      	bhi.n	8010ab2 <GUI_Touch_Processing+0x62>
 8010aac:	b10b      	cbz	r3, 8010ab2 <GUI_Touch_Processing+0x62>
				{	
					GUI_screen_state = DataSet1_Screen;
 8010aae:	2107      	movs	r1, #7
 8010ab0:	7021      	strb	r1, [r4, #0]
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //down
 8010ab2:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010ab6:	2936      	cmp	r1, #54	; 0x36
 8010ab8:	d860      	bhi.n	8010b7c <GUI_Touch_Processing+0x12c>
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d05e      	beq.n	8010b7c <GUI_Touch_Processing+0x12c>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 8010abe:	4b86      	ldr	r3, [pc, #536]	; (8010cd8 <GUI_Touch_Processing+0x288>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	bf0c      	ite	eq
 8010ac6:	2001      	moveq	r0, #1
 8010ac8:	2002      	movne	r0, #2
				{	
					GUI_screen_state = DataSet1_Screen;
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
				{	
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010aca:	7020      	strb	r0, [r4, #0]

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
}
 8010acc:	b002      	add	sp, #8
 8010ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					WriteFLASH_Screen(GUI_screen_state);
 8010ad2:	f008 bead 	b.w	8019830 <WriteFLASH_Screen>
			preGUI_screen_state = GUI_screen_state;
 8010ad6:	4b7d      	ldr	r3, [pc, #500]	; (8010ccc <GUI_Touch_Processing+0x27c>)
 8010ad8:	2202      	movs	r2, #2
 8010ada:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010adc:	4b7c      	ldr	r3, [pc, #496]	; (8010cd0 <GUI_Touch_Processing+0x280>)
 8010ade:	881a      	ldrh	r2, [r3, #0]
 8010ae0:	4b7c      	ldr	r3, [pc, #496]	; (8010cd4 <GUI_Touch_Processing+0x284>)
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010ae8:	b29b      	uxth	r3, r3
 8010aea:	2b36      	cmp	r3, #54	; 0x36
 8010aec:	f102 31ff 	add.w	r1, r2, #4294967295
 8010af0:	bf8c      	ite	hi
 8010af2:	2300      	movhi	r3, #0
 8010af4:	2301      	movls	r3, #1
 8010af6:	2936      	cmp	r1, #54	; 0x36
 8010af8:	d802      	bhi.n	8010b00 <GUI_Touch_Processing+0xb0>
 8010afa:	b10b      	cbz	r3, 8010b00 <GUI_Touch_Processing+0xb0>
					GUI_screen_state = DataSet1_Screen;
 8010afc:	2107      	movs	r1, #7
 8010afe:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010b00:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010b04:	2936      	cmp	r1, #54	; 0x36
 8010b06:	d807      	bhi.n	8010b18 <GUI_Touch_Processing+0xc8>
 8010b08:	b133      	cbz	r3, 8010b18 <GUI_Touch_Processing+0xc8>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010b0a:	4b73      	ldr	r3, [pc, #460]	; (8010cd8 <GUI_Touch_Processing+0x288>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b02      	cmp	r3, #2
 8010b10:	bf34      	ite	cc
 8010b12:	2001      	movcc	r0, #1
 8010b14:	2003      	movcs	r0, #3
 8010b16:	e7d8      	b.n	8010aca <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010b18:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010b1c:	2936      	cmp	r1, #54	; 0x36
 8010b1e:	d800      	bhi.n	8010b22 <GUI_Touch_Processing+0xd2>
 8010b20:	bb8b      	cbnz	r3, 8010b86 <GUI_Touch_Processing+0x136>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010b22:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010b26:	2936      	cmp	r1, #54	; 0x36
 8010b28:	d801      	bhi.n	8010b2e <GUI_Touch_Processing+0xde>
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d138      	bne.n	8010ba0 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8010b2e:	3a6d      	subs	r2, #109	; 0x6d
 8010b30:	2a36      	cmp	r2, #54	; 0x36
 8010b32:	d82d      	bhi.n	8010b90 <GUI_Touch_Processing+0x140>
 8010b34:	b363      	cbz	r3, 8010b90 <GUI_Touch_Processing+0x140>
						pause = !pause;
 8010b36:	4a69      	ldr	r2, [pc, #420]	; (8010cdc <GUI_Touch_Processing+0x28c>)
 8010b38:	7813      	ldrb	r3, [r2, #0]
 8010b3a:	fab3 f383 	clz	r3, r3
 8010b3e:	095b      	lsrs	r3, r3, #5
 8010b40:	7013      	strb	r3, [r2, #0]
 8010b42:	e025      	b.n	8010b90 <GUI_Touch_Processing+0x140>
			preGUI_screen_state = GUI_screen_state;
 8010b44:	4b61      	ldr	r3, [pc, #388]	; (8010ccc <GUI_Touch_Processing+0x27c>)
 8010b46:	2203      	movs	r2, #3
 8010b48:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010b4a:	4b61      	ldr	r3, [pc, #388]	; (8010cd0 <GUI_Touch_Processing+0x280>)
 8010b4c:	881a      	ldrh	r2, [r3, #0]
 8010b4e:	4b61      	ldr	r3, [pc, #388]	; (8010cd4 <GUI_Touch_Processing+0x284>)
 8010b50:	881b      	ldrh	r3, [r3, #0]
 8010b52:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	2b36      	cmp	r3, #54	; 0x36
 8010b5a:	f102 31ff 	add.w	r1, r2, #4294967295
 8010b5e:	bf8c      	ite	hi
 8010b60:	2300      	movhi	r3, #0
 8010b62:	2301      	movls	r3, #1
 8010b64:	2936      	cmp	r1, #54	; 0x36
 8010b66:	d802      	bhi.n	8010b6e <GUI_Touch_Processing+0x11e>
 8010b68:	b10b      	cbz	r3, 8010b6e <GUI_Touch_Processing+0x11e>
					GUI_screen_state = DataSet1_Screen;
 8010b6a:	2107      	movs	r1, #7
 8010b6c:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Down
 8010b6e:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010b72:	2936      	cmp	r1, #54	; 0x36
 8010b74:	d802      	bhi.n	8010b7c <GUI_Touch_Processing+0x12c>
 8010b76:	b10b      	cbz	r3, 8010b7c <GUI_Touch_Processing+0x12c>
					GUI_screen_state = Measure_Screen;
 8010b78:	2001      	movs	r0, #1
 8010b7a:	e7a6      	b.n	8010aca <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010b7c:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010b80:	2936      	cmp	r1, #54	; 0x36
 8010b82:	d808      	bhi.n	8010b96 <GUI_Touch_Processing+0x146>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010b84:	b13b      	cbz	r3, 8010b96 <GUI_Touch_Processing+0x146>
					WriteFLASH_Screen(Graph_Screen);
 8010b86:	2004      	movs	r0, #4
 8010b88:	f008 fe52 	bl	8019830 <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 8010b8c:	2304      	movs	r3, #4
 8010b8e:	7023      	strb	r3, [r4, #0]
}
 8010b90:	b002      	add	sp, #8
 8010b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010b96:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010b9a:	2936      	cmp	r1, #54	; 0x36
 8010b9c:	d807      	bhi.n	8010bae <GUI_Touch_Processing+0x15e>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010b9e:	b133      	cbz	r3, 8010bae <GUI_Touch_Processing+0x15e>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 8010ba0:	4b4f      	ldr	r3, [pc, #316]	; (8010ce0 <GUI_Touch_Processing+0x290>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1f3      	bne.n	8010b90 <GUI_Touch_Processing+0x140>
 8010ba8:	2312      	movs	r3, #18
 8010baa:	7023      	strb	r3, [r4, #0]
 8010bac:	e7f0      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8010bae:	3a6d      	subs	r2, #109	; 0x6d
 8010bb0:	2a36      	cmp	r2, #54	; 0x36
 8010bb2:	d8ed      	bhi.n	8010b90 <GUI_Touch_Processing+0x140>
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d0eb      	beq.n	8010b90 <GUI_Touch_Processing+0x140>
						pause = !pause;
 8010bb8:	4a48      	ldr	r2, [pc, #288]	; (8010cdc <GUI_Touch_Processing+0x28c>)
						GUI_Bar_Measure(85, 13, 0.0);
 8010bba:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8010ce4 <GUI_Touch_Processing+0x294>
						pause = !pause;
 8010bbe:	7813      	ldrb	r3, [r2, #0]
 8010bc0:	fab3 f383 	clz	r3, r3
 8010bc4:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 8010bc6:	210d      	movs	r1, #13
 8010bc8:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 8010bca:	7013      	strb	r3, [r2, #0]
}
 8010bcc:	b002      	add	sp, #8
 8010bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Bar_Measure(85, 13, 0.0);
 8010bd2:	f002 b99d 	b.w	8012f10 <GUI_Bar_Measure>
			preGUI_screen_state = GUI_screen_state;
 8010bd6:	4b3d      	ldr	r3, [pc, #244]	; (8010ccc <GUI_Touch_Processing+0x27c>)
 8010bd8:	2204      	movs	r2, #4
 8010bda:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010bdc:	4b3c      	ldr	r3, [pc, #240]	; (8010cd0 <GUI_Touch_Processing+0x280>)
 8010bde:	881a      	ldrh	r2, [r3, #0]
 8010be0:	4b3c      	ldr	r3, [pc, #240]	; (8010cd4 <GUI_Touch_Processing+0x284>)
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	2b36      	cmp	r3, #54	; 0x36
 8010bec:	f102 31ff 	add.w	r1, r2, #4294967295
 8010bf0:	bf8c      	ite	hi
 8010bf2:	2300      	movhi	r3, #0
 8010bf4:	2301      	movls	r3, #1
 8010bf6:	2936      	cmp	r1, #54	; 0x36
 8010bf8:	d802      	bhi.n	8010c00 <GUI_Touch_Processing+0x1b0>
 8010bfa:	b10b      	cbz	r3, 8010c00 <GUI_Touch_Processing+0x1b0>
					GUI_screen_state = GraphSet1_Screen;
 8010bfc:	210c      	movs	r1, #12
 8010bfe:	7021      	strb	r1, [r4, #0]
			if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8010c00:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010c04:	2936      	cmp	r1, #54	; 0x36
 8010c06:	d808      	bhi.n	8010c1a <GUI_Touch_Processing+0x1ca>
 8010c08:	b13b      	cbz	r3, 8010c1a <GUI_Touch_Processing+0x1ca>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 8010c0a:	4a37      	ldr	r2, [pc, #220]	; (8010ce8 <GUI_Touch_Processing+0x298>)
 8010c0c:	7813      	ldrb	r3, [r2, #0]
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	bf94      	ite	ls
 8010c12:	3301      	addls	r3, #1
 8010c14:	2300      	movhi	r3, #0
 8010c16:	7013      	strb	r3, [r2, #0]
 8010c18:	e7ba      	b.n	8010b90 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8010c1a:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010c1e:	2936      	cmp	r1, #54	; 0x36
 8010c20:	d806      	bhi.n	8010c30 <GUI_Touch_Processing+0x1e0>
 8010c22:	b12b      	cbz	r3, 8010c30 <GUI_Touch_Processing+0x1e0>
					WriteFLASH_Screen(Color_Screen);
 8010c24:	2005      	movs	r0, #5
 8010c26:	f008 fe03 	bl	8019830 <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 8010c2a:	2305      	movs	r3, #5
 8010c2c:	7023      	strb	r3, [r4, #0]
 8010c2e:	e7af      	b.n	8010b90 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8010c30:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010c34:	2936      	cmp	r1, #54	; 0x36
 8010c36:	d801      	bhi.n	8010c3c <GUI_Touch_Processing+0x1ec>
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1b1      	bne.n	8010ba0 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8010c3c:	3a6d      	subs	r2, #109	; 0x6d
 8010c3e:	2a36      	cmp	r2, #54	; 0x36
 8010c40:	d8a6      	bhi.n	8010b90 <GUI_Touch_Processing+0x140>
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d0a4      	beq.n	8010b90 <GUI_Touch_Processing+0x140>
					pause = !pause;
 8010c46:	4a25      	ldr	r2, [pc, #148]	; (8010cdc <GUI_Touch_Processing+0x28c>)
 8010c48:	7813      	ldrb	r3, [r2, #0]
 8010c4a:	fab3 f383 	clz	r3, r3
 8010c4e:	095b      	lsrs	r3, r3, #5
 8010c50:	7013      	strb	r3, [r2, #0]
 8010c52:	e79d      	b.n	8010b90 <GUI_Touch_Processing+0x140>
			preGUI_screen_state = GUI_screen_state;
 8010c54:	4b1d      	ldr	r3, [pc, #116]	; (8010ccc <GUI_Touch_Processing+0x27c>)
 8010c56:	2205      	movs	r2, #5
 8010c58:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010c5a:	4b1d      	ldr	r3, [pc, #116]	; (8010cd0 <GUI_Touch_Processing+0x280>)
 8010c5c:	881a      	ldrh	r2, [r3, #0]
 8010c5e:	4b1d      	ldr	r3, [pc, #116]	; (8010cd4 <GUI_Touch_Processing+0x284>)
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	2b36      	cmp	r3, #54	; 0x36
 8010c6a:	f102 31ff 	add.w	r1, r2, #4294967295
 8010c6e:	bf8c      	ite	hi
 8010c70:	2300      	movhi	r3, #0
 8010c72:	2301      	movls	r3, #1
 8010c74:	2936      	cmp	r1, #54	; 0x36
 8010c76:	d807      	bhi.n	8010c88 <GUI_Touch_Processing+0x238>
 8010c78:	b133      	cbz	r3, 8010c88 <GUI_Touch_Processing+0x238>
					preColor_Field = Color_Field;
 8010c7a:	4b1c      	ldr	r3, [pc, #112]	; (8010cec <GUI_Touch_Processing+0x29c>)
 8010c7c:	781a      	ldrb	r2, [r3, #0]
 8010c7e:	4b1c      	ldr	r3, [pc, #112]	; (8010cf0 <GUI_Touch_Processing+0x2a0>)
 8010c80:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8010c82:	230e      	movs	r3, #14
 8010c84:	7023      	strb	r3, [r4, #0]
 8010c86:	e783      	b.n	8010b90 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8010c88:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010c8c:	2936      	cmp	r1, #54	; 0x36
 8010c8e:	d806      	bhi.n	8010c9e <GUI_Touch_Processing+0x24e>
 8010c90:	b12b      	cbz	r3, 8010c9e <GUI_Touch_Processing+0x24e>
					WriteFLASH_Screen(Color_Rendition_Screen);
 8010c92:	2006      	movs	r0, #6
 8010c94:	f008 fdcc 	bl	8019830 <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 8010c98:	2306      	movs	r3, #6
 8010c9a:	7023      	strb	r3, [r4, #0]
 8010c9c:	e778      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8010c9e:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 8010ca2:	2936      	cmp	r1, #54	; 0x36
 8010ca4:	d807      	bhi.n	8010cb6 <GUI_Touch_Processing+0x266>
 8010ca6:	b133      	cbz	r3, 8010cb6 <GUI_Touch_Processing+0x266>
					pause = !pause;
 8010ca8:	4a0c      	ldr	r2, [pc, #48]	; (8010cdc <GUI_Touch_Processing+0x28c>)
 8010caa:	7813      	ldrb	r3, [r2, #0]
 8010cac:	fab3 f383 	clz	r3, r3
 8010cb0:	095b      	lsrs	r3, r3, #5
 8010cb2:	7013      	strb	r3, [r2, #0]
 8010cb4:	e76c      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8010cb6:	3a37      	subs	r2, #55	; 0x37
 8010cb8:	2a36      	cmp	r2, #54	; 0x36
 8010cba:	f63f af69 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f47f af6e 	bne.w	8010ba0 <GUI_Touch_Processing+0x150>
 8010cc4:	e764      	b.n	8010b90 <GUI_Touch_Processing+0x140>
 8010cc6:	bf00      	nop
 8010cc8:	200056f1 	.word	0x200056f1
 8010ccc:	2000022a 	.word	0x2000022a
 8010cd0:	20054932 	.word	0x20054932
 8010cd4:	20054934 	.word	0x20054934
 8010cd8:	2000571b 	.word	0x2000571b
 8010cdc:	20005718 	.word	0x20005718
 8010ce0:	20095c10 	.word	0x20095c10
 8010ce4:	00000000 	.word	0x00000000
 8010ce8:	200056fa 	.word	0x200056fa
 8010cec:	200056ef 	.word	0x200056ef
 8010cf0:	20005719 	.word	0x20005719
			preGUI_screen_state = GUI_screen_state;
 8010cf4:	4ba9      	ldr	r3, [pc, #676]	; (8010f9c <GUI_Touch_Processing+0x54c>)
 8010cf6:	2206      	movs	r2, #6
 8010cf8:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010cfa:	4ba9      	ldr	r3, [pc, #676]	; (8010fa0 <GUI_Touch_Processing+0x550>)
 8010cfc:	881a      	ldrh	r2, [r3, #0]
 8010cfe:	4ba9      	ldr	r3, [pc, #676]	; (8010fa4 <GUI_Touch_Processing+0x554>)
 8010d00:	881b      	ldrh	r3, [r3, #0]
 8010d02:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	2b36      	cmp	r3, #54	; 0x36
 8010d0a:	f102 31ff 	add.w	r1, r2, #4294967295
 8010d0e:	bf8c      	ite	hi
 8010d10:	2300      	movhi	r3, #0
 8010d12:	2301      	movls	r3, #1
 8010d14:	2936      	cmp	r1, #54	; 0x36
 8010d16:	d803      	bhi.n	8010d20 <GUI_Touch_Processing+0x2d0>
 8010d18:	b113      	cbz	r3, 8010d20 <GUI_Touch_Processing+0x2d0>
					GUI_screen_state = ColorRendSet_Screen;
 8010d1a:	2310      	movs	r3, #16
 8010d1c:	7023      	strb	r3, [r4, #0]
 8010d1e:	e737      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8010d20:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010d24:	2936      	cmp	r1, #54	; 0x36
 8010d26:	d806      	bhi.n	8010d36 <GUI_Touch_Processing+0x2e6>
 8010d28:	b12b      	cbz	r3, 8010d36 <GUI_Touch_Processing+0x2e6>
					WriteFLASH_Screen(Measure_Screen);
 8010d2a:	2001      	movs	r0, #1
 8010d2c:	f008 fd80 	bl	8019830 <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 8010d30:	2301      	movs	r3, #1
 8010d32:	7023      	strb	r3, [r4, #0]
 8010d34:	e72c      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8010d36:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010d3a:	2936      	cmp	r1, #54	; 0x36
 8010d3c:	d808      	bhi.n	8010d50 <GUI_Touch_Processing+0x300>
 8010d3e:	b13b      	cbz	r3, 8010d50 <GUI_Touch_Processing+0x300>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 8010d40:	4a99      	ldr	r2, [pc, #612]	; (8010fa8 <GUI_Touch_Processing+0x558>)
 8010d42:	7813      	ldrb	r3, [r2, #0]
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	bf94      	ite	ls
 8010d48:	3301      	addls	r3, #1
 8010d4a:	2300      	movhi	r3, #0
 8010d4c:	7013      	strb	r3, [r2, #0]
 8010d4e:	e71f      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8010d50:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 8010d54:	2936      	cmp	r1, #54	; 0x36
 8010d56:	d877      	bhi.n	8010e48 <GUI_Touch_Processing+0x3f8>
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d075      	beq.n	8010e48 <GUI_Touch_Processing+0x3f8>
					if (Color_rend_Field & CRI_CQS){
 8010d5c:	4b93      	ldr	r3, [pc, #588]	; (8010fac <GUI_Touch_Processing+0x55c>)
 8010d5e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801102c <GUI_Touch_Processing+0x5dc>
 8010d62:	781c      	ldrb	r4, [r3, #0]
 8010d64:	4e92      	ldr	r6, [pc, #584]	; (8010fb0 <GUI_Touch_Processing+0x560>)
 8010d66:	4f93      	ldr	r7, [pc, #588]	; (8010fb4 <GUI_Touch_Processing+0x564>)
 8010d68:	4d93      	ldr	r5, [pc, #588]	; (8010fb8 <GUI_Touch_Processing+0x568>)
 8010d6a:	f014 0401 	ands.w	r4, r4, #1
 8010d6e:	d03f      	beq.n	8010df0 <GUI_Touch_Processing+0x3a0>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010d70:	4892      	ldr	r0, [pc, #584]	; (8010fbc <GUI_Touch_Processing+0x56c>)
						CRICQS_done = 0x00;
 8010d72:	2400      	movs	r4, #0
 8010d74:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010d78:	f008 fc7a 	bl	8019670 <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010d7c:	4b90      	ldr	r3, [pc, #576]	; (8010fc0 <GUI_Touch_Processing+0x570>)
 8010d7e:	4a91      	ldr	r2, [pc, #580]	; (8010fc4 <GUI_Touch_Processing+0x574>)
 8010d80:	4991      	ldr	r1, [pc, #580]	; (8010fc8 <GUI_Touch_Processing+0x578>)
 8010d82:	488e      	ldr	r0, [pc, #568]	; (8010fbc <GUI_Touch_Processing+0x56c>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010d84:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010d88:	f7fd f92c 	bl	800dfe4 <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8010d8c:	488f      	ldr	r0, [pc, #572]	; (8010fcc <GUI_Touch_Processing+0x57c>)
 8010d8e:	f7fd f995 	bl	800e0bc <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 8010d92:	488f      	ldr	r0, [pc, #572]	; (8010fd0 <GUI_Touch_Processing+0x580>)
 8010d94:	f7fd f9b0 	bl	800e0f8 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010d98:	4888      	ldr	r0, [pc, #544]	; (8010fbc <GUI_Touch_Processing+0x56c>)
 8010d9a:	7839      	ldrb	r1, [r7, #0]
 8010d9c:	f7fd f9f4 	bl	800e188 <Calculate_Tc>
 8010da0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8010da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010da8:	edcd 7a01 	vstr	s15, [sp, #4]
 8010dac:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8010db0:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8010db2:	4298      	cmp	r0, r3
 8010db4:	d10b      	bne.n	8010dce <GUI_Touch_Processing+0x37e>
 8010db6:	4b87      	ldr	r3, [pc, #540]	; (8010fd4 <GUI_Touch_Processing+0x584>)
 8010db8:	4887      	ldr	r0, [pc, #540]	; (8010fd8 <GUI_Touch_Processing+0x588>)
 8010dba:	701c      	strb	r4, [r3, #0]
 8010dbc:	4b87      	ldr	r3, [pc, #540]	; (8010fdc <GUI_Touch_Processing+0x58c>)
 8010dbe:	701c      	strb	r4, [r3, #0]
 8010dc0:	4b87      	ldr	r3, [pc, #540]	; (8010fe0 <GUI_Touch_Processing+0x590>)
 8010dc2:	220e      	movs	r2, #14
 8010dc4:	701c      	strb	r4, [r3, #0]
 8010dc6:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8010dc8:	f00e fd2f 	bl	801f82a <memset>
 8010dcc:	e002      	b.n	8010dd4 <GUI_Touch_Processing+0x384>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 8010dce:	497b      	ldr	r1, [pc, #492]	; (8010fbc <GUI_Touch_Processing+0x56c>)
 8010dd0:	f7fb f826 	bl	800be20 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 8010dd4:	4a83      	ldr	r2, [pc, #524]	; (8010fe4 <GUI_Touch_Processing+0x594>)
						CRICQS_done = 0x01;
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 8010ddc:	7813      	ldrb	r3, [r2, #0]
 8010dde:	fab3 f383 	clz	r3, r3
 8010de2:	095b      	lsrs	r3, r3, #5
 8010de4:	7013      	strb	r3, [r2, #0]
}
 8010de6:	b002      	add	sp, #8
 8010de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Display_Refresh();
 8010dec:	f7ff bdd0 	b.w	8010990 <GUI_Display_Refresh>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010df0:	4b73      	ldr	r3, [pc, #460]	; (8010fc0 <GUI_Touch_Processing+0x570>)
 8010df2:	4a74      	ldr	r2, [pc, #464]	; (8010fc4 <GUI_Touch_Processing+0x574>)
 8010df4:	4974      	ldr	r1, [pc, #464]	; (8010fc8 <GUI_Touch_Processing+0x578>)
 8010df6:	4871      	ldr	r0, [pc, #452]	; (8010fbc <GUI_Touch_Processing+0x56c>)
						CRICQS_done = 0x00;
 8010df8:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010dfc:	f7fd f8f2 	bl	800dfe4 <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8010e00:	4872      	ldr	r0, [pc, #456]	; (8010fcc <GUI_Touch_Processing+0x57c>)
 8010e02:	f7fd f95b 	bl	800e0bc <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010e06:	7839      	ldrb	r1, [r7, #0]
 8010e08:	486c      	ldr	r0, [pc, #432]	; (8010fbc <GUI_Touch_Processing+0x56c>)
 8010e0a:	f7fd f9bd 	bl	800e188 <Calculate_Tc>
 8010e0e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010e12:	486a      	ldr	r0, [pc, #424]	; (8010fbc <GUI_Touch_Processing+0x56c>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010e14:	ee17 3a90 	vmov	r3, s15
 8010e18:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010e1a:	f008 fc29 	bl	8019670 <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8010e1e:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010e20:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8010e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e28:	4298      	cmp	r0, r3
 8010e2a:	d109      	bne.n	8010e40 <GUI_Touch_Processing+0x3f0>
 8010e2c:	4b6e      	ldr	r3, [pc, #440]	; (8010fe8 <GUI_Touch_Processing+0x598>)
 8010e2e:	486f      	ldr	r0, [pc, #444]	; (8010fec <GUI_Touch_Processing+0x59c>)
 8010e30:	701c      	strb	r4, [r3, #0]
 8010e32:	4b6f      	ldr	r3, [pc, #444]	; (8010ff0 <GUI_Touch_Processing+0x5a0>)
 8010e34:	701c      	strb	r4, [r3, #0]
 8010e36:	4b6f      	ldr	r3, [pc, #444]	; (8010ff4 <GUI_Touch_Processing+0x5a4>)
 8010e38:	220f      	movs	r2, #15
 8010e3a:	701c      	strb	r4, [r3, #0]
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	e7c3      	b.n	8010dc8 <GUI_Touch_Processing+0x378>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 8010e40:	495e      	ldr	r1, [pc, #376]	; (8010fbc <GUI_Touch_Processing+0x56c>)
 8010e42:	f7f8 fe81 	bl	8009b48 <cqs_func>
 8010e46:	e7c5      	b.n	8010dd4 <GUI_Touch_Processing+0x384>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8010e48:	3a37      	subs	r2, #55	; 0x37
 8010e4a:	2a36      	cmp	r2, #54	; 0x36
 8010e4c:	f63f aea0 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f43f ae9d 	beq.w	8010b90 <GUI_Touch_Processing+0x140>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 8010e56:	4b68      	ldr	r3, [pc, #416]	; (8010ff8 <GUI_Touch_Processing+0x5a8>)
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	b90b      	cbnz	r3, 8010e60 <GUI_Touch_Processing+0x410>
 8010e5c:	2312      	movs	r3, #18
 8010e5e:	7023      	strb	r3, [r4, #0]
						pause = 0;
 8010e60:	4b66      	ldr	r3, [pc, #408]	; (8010ffc <GUI_Touch_Processing+0x5ac>)
 8010e62:	2200      	movs	r2, #0
 8010e64:	701a      	strb	r2, [r3, #0]
 8010e66:	e693      	b.n	8010b90 <GUI_Touch_Processing+0x140>
			preGUI_screen_state = GUI_screen_state;
 8010e68:	4b4c      	ldr	r3, [pc, #304]	; (8010f9c <GUI_Touch_Processing+0x54c>)
 8010e6a:	2207      	movs	r2, #7
 8010e6c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Down
 8010e6e:	4a4d      	ldr	r2, [pc, #308]	; (8010fa4 <GUI_Touch_Processing+0x554>)
 8010e70:	4b4b      	ldr	r3, [pc, #300]	; (8010fa0 <GUI_Touch_Processing+0x550>)
 8010e72:	8812      	ldrh	r2, [r2, #0]
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	f5a2 70d5 	sub.w	r0, r2, #426	; 0x1aa
 8010e7a:	2836      	cmp	r0, #54	; 0x36
 8010e7c:	f1a3 01a3 	sub.w	r1, r3, #163	; 0xa3
 8010e80:	bf8c      	ite	hi
 8010e82:	2000      	movhi	r0, #0
 8010e84:	2001      	movls	r0, #1
 8010e86:	2936      	cmp	r1, #54	; 0x36
 8010e88:	d803      	bhi.n	8010e92 <GUI_Touch_Processing+0x442>
 8010e8a:	b110      	cbz	r0, 8010e92 <GUI_Touch_Processing+0x442>
					GUI_screen_state = DataSet2_Screen;
 8010e8c:	2308      	movs	r3, #8
 8010e8e:	7023      	strb	r3, [r4, #0]
 8010e90:	e67e      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=202 & Touch_y <=(202+54) ) //Mode_EL
 8010e92:	f1a3 01b6 	sub.w	r1, r3, #182	; 0xb6
 8010e96:	2936      	cmp	r1, #54	; 0x36
 8010e98:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 8010e9c:	bf8c      	ite	hi
 8010e9e:	2100      	movhi	r1, #0
 8010ea0:	2101      	movls	r1, #1
 8010ea2:	2d36      	cmp	r5, #54	; 0x36
 8010ea4:	d827      	bhi.n	8010ef6 <GUI_Touch_Processing+0x4a6>
 8010ea6:	b331      	cbz	r1, 8010ef6 <GUI_Touch_Processing+0x4a6>
					Mode_EL = !Mode_EL;
 8010ea8:	4c55      	ldr	r4, [pc, #340]	; (8011000 <GUI_Touch_Processing+0x5b0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8010eaa:	4b56      	ldr	r3, [pc, #344]	; (8011004 <GUI_Touch_Processing+0x5b4>)
					Mode_EL = !Mode_EL;
 8010eac:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8010eae:	4856      	ldr	r0, [pc, #344]	; (8011008 <GUI_Touch_Processing+0x5b8>)
					Mode_EL = !Mode_EL;
 8010eb0:	2a00      	cmp	r2, #0
 8010eb2:	bf0c      	ite	eq
 8010eb4:	2201      	moveq	r2, #1
 8010eb6:	2200      	movne	r2, #0
 8010eb8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8010eba:	bf18      	it	ne
 8010ebc:	4618      	movne	r0, r3
 8010ebe:	4a53      	ldr	r2, [pc, #332]	; (801100c <GUI_Touch_Processing+0x5bc>)
 8010ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010ec4:	f7fd fe14 	bl	800eaf0 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8010ec8:	7822      	ldrb	r2, [r4, #0]
 8010eca:	4b51      	ldr	r3, [pc, #324]	; (8011010 <GUI_Touch_Processing+0x5c0>)
 8010ecc:	2a00      	cmp	r2, #0
 8010ece:	f040 87c5 	bne.w	8011e5c <GUI_Touch_Processing+0x140c>
 8010ed2:	4a50      	ldr	r2, [pc, #320]	; (8011014 <GUI_Touch_Processing+0x5c4>)
 8010ed4:	edd2 0a00 	vldr	s1, [r2]
 8010ed8:	ed93 0a00 	vldr	s0, [r3]
 8010edc:	f008 fb04 	bl	80194e8 <Rabs_calc_Factor2_Settings_change>
 8010ee0:	4b4d      	ldr	r3, [pc, #308]	; (8011018 <GUI_Touch_Processing+0x5c8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8010ee2:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8010ee4:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8010ee8:	21ca      	movs	r1, #202	; 0xca
 8010eea:	20b6      	movs	r0, #182	; 0xb6
}
 8010eec:	b002      	add	sp, #8
 8010eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8010ef2:	f001 beb9 	b.w	8012c68 <GUI_Switch_ButtonActive>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=268 & Touch_y <=(268+54) ) //Bluetooth
 8010ef6:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 8010efa:	2d36      	cmp	r5, #54	; 0x36
 8010efc:	d810      	bhi.n	8010f20 <GUI_Touch_Processing+0x4d0>
 8010efe:	b179      	cbz	r1, 8010f20 <GUI_Touch_Processing+0x4d0>
					Bluetooth = !Bluetooth;
 8010f00:	4b46      	ldr	r3, [pc, #280]	; (801101c <GUI_Touch_Processing+0x5cc>)
 8010f02:	781a      	ldrb	r2, [r3, #0]
 8010f04:	fab2 f282 	clz	r2, r2
 8010f08:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8010f0a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8010f0e:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8010f10:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8010f12:	f001 fe4f 	bl	8012bb4 <GUI_Switch_Button>
}
 8010f16:	b002      	add	sp, #8
 8010f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Up_Panel();
 8010f1c:	f7fe ba60 	b.w	800f3e0 <GUI_Up_Panel>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=124 & Touch_y <=(174) ) // Information
 8010f20:	f1a3 0108 	sub.w	r1, r3, #8
 8010f24:	29f2      	cmp	r1, #242	; 0xf2
 8010f26:	f1a2 057c 	sub.w	r5, r2, #124	; 0x7c
 8010f2a:	bf8c      	ite	hi
 8010f2c:	2100      	movhi	r1, #0
 8010f2e:	2101      	movls	r1, #1
 8010f30:	2d32      	cmp	r5, #50	; 0x32
 8010f32:	d803      	bhi.n	8010f3c <GUI_Touch_Processing+0x4ec>
 8010f34:	b111      	cbz	r1, 8010f3c <GUI_Touch_Processing+0x4ec>
					GUI_screen_state = Information_Screen;
 8010f36:	2311      	movs	r3, #17
 8010f38:	7023      	strb	r3, [r4, #0]
 8010f3a:	e629      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //Illuminance
 8010f3c:	f1a3 05c8 	sub.w	r5, r3, #200	; 0xc8
 8010f40:	2d36      	cmp	r5, #54	; 0x36
 8010f42:	d80c      	bhi.n	8010f5e <GUI_Touch_Processing+0x50e>
 8010f44:	f46f 77a3 	mvn.w	r7, #326	; 0x146
 8010f48:	19d5      	adds	r5, r2, r7
 8010f4a:	2d36      	cmp	r5, #54	; 0x36
 8010f4c:	d807      	bhi.n	8010f5e <GUI_Touch_Processing+0x50e>
					Measure_Field ^= Illuminance;
 8010f4e:	4b34      	ldr	r3, [pc, #208]	; (8011020 <GUI_Touch_Processing+0x5d0>)
 8010f50:	881a      	ldrh	r2, [r3, #0]
 8010f52:	f082 0201 	eor.w	r2, r2, #1
 8010f56:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8010f58:	f002 0201 	and.w	r2, r2, #1
 8010f5c:	e1e0      	b.n	8011320 <GUI_Touch_Processing+0x8d0>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8010f5e:	1e5d      	subs	r5, r3, #1
 8010f60:	2d36      	cmp	r5, #54	; 0x36
 8010f62:	d868      	bhi.n	8011036 <GUI_Touch_Processing+0x5e6>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d066      	beq.n	8011036 <GUI_Touch_Processing+0x5e6>
					WriteSDFLASH_t(sdfile_cnt);
 8010f68:	4b2e      	ldr	r3, [pc, #184]	; (8011024 <GUI_Touch_Processing+0x5d4>)
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	8818      	ldrh	r0, [r3, #0]
 8010f6e:	f008 fb91 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8010f72:	4b2d      	ldr	r3, [pc, #180]	; (8011028 <GUI_Touch_Processing+0x5d8>)
 8010f74:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8010f76:	1e5a      	subs	r2, r3, #1
 8010f78:	2a05      	cmp	r2, #5
 8010f7a:	d804      	bhi.n	8010f86 <GUI_Touch_Processing+0x536>
 8010f7c:	e8df f002 	tbb	[pc, r2]
 8010f80:	08030305 	.word	0x08030305
 8010f84:	0b58      	.short	0x0b58
					GUI_screen_state = Prev_Inf_Screen;
 8010f86:	7023      	strb	r3, [r4, #0]
 8010f88:	e602      	b.n	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	7023      	strb	r3, [r4, #0]
 8010f8e:	e5ff      	b.n	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8010f90:	2304      	movs	r3, #4
 8010f92:	7023      	strb	r3, [r4, #0]
 8010f94:	e5fc      	b.n	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8010f96:	2306      	movs	r3, #6
 8010f98:	7023      	strb	r3, [r4, #0]
 8010f9a:	e5f9      	b.n	8010b90 <GUI_Touch_Processing+0x140>
 8010f9c:	2000022a 	.word	0x2000022a
 8010fa0:	20054932 	.word	0x20054932
 8010fa4:	20054934 	.word	0x20054934
 8010fa8:	200056f9 	.word	0x200056f9
 8010fac:	200056f0 	.word	0x200056f0
 8010fb0:	20095934 	.word	0x20095934
 8010fb4:	200056f4 	.word	0x200056f4
 8010fb8:	20054930 	.word	0x20054930
 8010fbc:	2000c52c 	.word	0x2000c52c
 8010fc0:	2008d504 	.word	0x2008d504
 8010fc4:	20052930 	.word	0x20052930
 8010fc8:	2008a504 	.word	0x2008a504
 8010fcc:	2008f512 	.word	0x2008f512
 8010fd0:	2008f530 	.word	0x2008f530
 8010fd4:	20004649 	.word	0x20004649
 8010fd8:	2000464b 	.word	0x2000464b
 8010fdc:	2000464a 	.word	0x2000464a
 8010fe0:	20004648 	.word	0x20004648
 8010fe4:	200056ed 	.word	0x200056ed
 8010fe8:	20003623 	.word	0x20003623
 8010fec:	20003614 	.word	0x20003614
 8010ff0:	20003625 	.word	0x20003625
 8010ff4:	20003624 	.word	0x20003624
 8010ff8:	20095c10 	.word	0x20095c10
 8010ffc:	20005718 	.word	0x20005718
 8011000:	20000ebc 	.word	0x20000ebc
 8011004:	08101838 	.word	0x08101838
 8011008:	08100838 	.word	0x08100838
 801100c:	20051930 	.word	0x20051930
 8011010:	20009d1c 	.word	0x20009d1c
 8011014:	20009d18 	.word	0x20009d18
 8011018:	20009d24 	.word	0x20009d24
 801101c:	20090a6a 	.word	0x20090a6a
 8011020:	200056f6 	.word	0x200056f6
 8011024:	2000571e 	.word	0x2000571e
 8011028:	20090a65 	.word	0x20090a65
 801102c:	200056ec 	.word	0x200056ec
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011030:	2305      	movs	r3, #5
 8011032:	7023      	strb	r3, [r4, #0]
 8011034:	e5ac      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=80 & Touch_y <=(120) ) // Language change
 8011036:	3a50      	subs	r2, #80	; 0x50
 8011038:	2a28      	cmp	r2, #40	; 0x28
 801103a:	d80c      	bhi.n	8011056 <GUI_Touch_Processing+0x606>
 801103c:	b159      	cbz	r1, 8011056 <GUI_Touch_Processing+0x606>
					if (Language_status == Ru) Language_status=En;
 801103e:	4ba1      	ldr	r3, [pc, #644]	; (80112c4 <GUI_Touch_Processing+0x874>)
 8011040:	781a      	ldrb	r2, [r3, #0]
 8011042:	b912      	cbnz	r2, 801104a <GUI_Touch_Processing+0x5fa>
 8011044:	2201      	movs	r2, #1
 8011046:	701a      	strb	r2, [r3, #0]
 8011048:	e5a2      	b.n	8010b90 <GUI_Touch_Processing+0x140>
					else if (Language_status == En) Language_status=Ru;
 801104a:	2a01      	cmp	r2, #1
 801104c:	f47f ada0 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
 8011050:	2200      	movs	r2, #0
 8011052:	701a      	strb	r2, [r3, #0]
 8011054:	e59c      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011056:	f1a3 02d9 	sub.w	r2, r3, #217	; 0xd9
 801105a:	2a36      	cmp	r2, #54	; 0x36
 801105c:	d810      	bhi.n	8011080 <GUI_Touch_Processing+0x630>
 801105e:	b178      	cbz	r0, 8011080 <GUI_Touch_Processing+0x630>
					TFT_ON_OFF = 0x00;
 8011060:	4b99      	ldr	r3, [pc, #612]	; (80112c8 <GUI_Touch_Processing+0x878>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011062:	489a      	ldr	r0, [pc, #616]	; (80112cc <GUI_Touch_Processing+0x87c>)
					TFT_ON_OFF = 0x00;
 8011064:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011066:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 8011068:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801106a:	f7f5 f961 	bl	8006330 <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801106e:	4898      	ldr	r0, [pc, #608]	; (80112d0 <GUI_Touch_Processing+0x880>)
 8011070:	4622      	mov	r2, r4
 8011072:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8011076:	b002      	add	sp, #8
 8011078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801107c:	f7f1 bab2 	b.w	80025e4 <HAL_GPIO_WritePin>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011080:	3b37      	subs	r3, #55	; 0x37
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011082:	2b36      	cmp	r3, #54	; 0x36
 8011084:	e0c3      	b.n	801120e <GUI_Touch_Processing+0x7be>
				preGUI_screen_state = GUI_screen_state;
 8011086:	4b93      	ldr	r3, [pc, #588]	; (80112d4 <GUI_Touch_Processing+0x884>)
 8011088:	2208      	movs	r2, #8
 801108a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )////down
 801108c:	4b92      	ldr	r3, [pc, #584]	; (80112d8 <GUI_Touch_Processing+0x888>)
 801108e:	881a      	ldrh	r2, [r3, #0]
 8011090:	4b92      	ldr	r3, [pc, #584]	; (80112dc <GUI_Touch_Processing+0x88c>)
 8011092:	881b      	ldrh	r3, [r3, #0]
 8011094:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011098:	2836      	cmp	r0, #54	; 0x36
 801109a:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801109e:	bf8c      	ite	hi
 80110a0:	2000      	movhi	r0, #0
 80110a2:	2001      	movls	r0, #1
 80110a4:	2936      	cmp	r1, #54	; 0x36
 80110a6:	d803      	bhi.n	80110b0 <GUI_Touch_Processing+0x660>
 80110a8:	b110      	cbz	r0, 80110b0 <GUI_Touch_Processing+0x660>
					GUI_screen_state = DataSet3_Screen;
 80110aa:	2309      	movs	r3, #9
 80110ac:	7023      	strb	r3, [r4, #0]
 80110ae:	e56f      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //Irradiance
 80110b0:	f1a2 01c8 	sub.w	r1, r2, #200	; 0xc8
 80110b4:	2936      	cmp	r1, #54	; 0x36
 80110b6:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 80110ba:	bf8c      	ite	hi
 80110bc:	2100      	movhi	r1, #0
 80110be:	2101      	movls	r1, #1
 80110c0:	2d36      	cmp	r5, #54	; 0x36
 80110c2:	d808      	bhi.n	80110d6 <GUI_Touch_Processing+0x686>
 80110c4:	b139      	cbz	r1, 80110d6 <GUI_Touch_Processing+0x686>
					Measure_Field ^= Irradiance;
 80110c6:	4b86      	ldr	r3, [pc, #536]	; (80112e0 <GUI_Touch_Processing+0x890>)
 80110c8:	881a      	ldrh	r2, [r3, #0]
 80110ca:	f082 0202 	eor.w	r2, r2, #2
 80110ce:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80110d0:	f002 0202 	and.w	r2, r2, #2
 80110d4:	e0c8      	b.n	8011268 <GUI_Touch_Processing+0x818>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //PPFD
 80110d6:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 80110da:	2d36      	cmp	r5, #54	; 0x36
 80110dc:	d809      	bhi.n	80110f2 <GUI_Touch_Processing+0x6a2>
 80110de:	b141      	cbz	r1, 80110f2 <GUI_Touch_Processing+0x6a2>
					Measure_Field ^= PPFD;
 80110e0:	4b7f      	ldr	r3, [pc, #508]	; (80112e0 <GUI_Touch_Processing+0x890>)
 80110e2:	881a      	ldrh	r2, [r3, #0]
 80110e4:	f082 0204 	eor.w	r2, r2, #4
 80110e8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80110ea:	f002 0204 	and.w	r2, r2, #4
 80110ee:	2185      	movs	r1, #133	; 0x85
 80110f0:	e01c      	b.n	801112c <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) ) //PPFD_BGR
 80110f2:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 80110f6:	2d36      	cmp	r5, #54	; 0x36
 80110f8:	d809      	bhi.n	801110e <GUI_Touch_Processing+0x6be>
 80110fa:	b141      	cbz	r1, 801110e <GUI_Touch_Processing+0x6be>
					Measure_Field ^= PPFD_BGR;
 80110fc:	4b78      	ldr	r3, [pc, #480]	; (80112e0 <GUI_Touch_Processing+0x890>)
 80110fe:	881a      	ldrh	r2, [r3, #0]
 8011100:	f082 0208 	eor.w	r2, r2, #8
 8011104:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 8011106:	f002 0208 	and.w	r2, r2, #8
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 801110a:	21c6      	movs	r1, #198	; 0xc6
 801110c:	e00e      	b.n	801112c <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) ) //CCT
 801110e:	f46f 7683 	mvn.w	r6, #262	; 0x106
 8011112:	199d      	adds	r5, r3, r6
 8011114:	2d36      	cmp	r5, #54	; 0x36
 8011116:	d80f      	bhi.n	8011138 <GUI_Touch_Processing+0x6e8>
 8011118:	b171      	cbz	r1, 8011138 <GUI_Touch_Processing+0x6e8>
					Measure_Field ^= CCT;
 801111a:	4b71      	ldr	r3, [pc, #452]	; (80112e0 <GUI_Touch_Processing+0x890>)
 801111c:	881a      	ldrh	r2, [r3, #0]
 801111e:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8011122:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 8011124:	f240 1107 	movw	r1, #263	; 0x107
 8011128:	f402 7280 	and.w	r2, r2, #256	; 0x100
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 801112c:	20c8      	movs	r0, #200	; 0xc8
}
 801112e:	b002      	add	sp, #8
 8011130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011134:	f001 bcce 	b.w	8012ad4 <GUI_CheckBox>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E
 8011138:	f46f 75a3 	mvn.w	r5, #326	; 0x146
 801113c:	442b      	add	r3, r5
 801113e:	2b36      	cmp	r3, #54	; 0x36
 8011140:	bf8c      	ite	hi
 8011142:	2300      	movhi	r3, #0
 8011144:	2301      	movls	r3, #1
 8011146:	b1c1      	cbz	r1, 801117a <GUI_Touch_Processing+0x72a>
 8011148:	b1bb      	cbz	r3, 801117a <GUI_Touch_Processing+0x72a>
					Measure_Field ^= delta_E;
 801114a:	4c65      	ldr	r4, [pc, #404]	; (80112e0 <GUI_Touch_Processing+0x890>)
 801114c:	8822      	ldrh	r2, [r4, #0]
 801114e:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 8011152:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 8011154:	f240 1147 	movw	r1, #327	; 0x147
 8011158:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801115c:	20c8      	movs	r0, #200	; 0xc8
 801115e:	f001 fcb9 	bl	8012ad4 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 8011162:	8822      	ldrh	r2, [r4, #0]
 8011164:	2300      	movs	r3, #0
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011166:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801116a:	f240 1147 	movw	r1, #327	; 0x147
 801116e:	2082      	movs	r0, #130	; 0x82
}
 8011170:	b002      	add	sp, #8
 8011172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011176:	f001 bb8d 	b.w	8012894 <GUI_Button_Measure_deltaE_Small>
				else	if(Touch_x >= 130 & Touch_x <= (200+38) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E_measure_small
 801117a:	f1a2 0182 	sub.w	r1, r2, #130	; 0x82
 801117e:	296c      	cmp	r1, #108	; 0x6c
 8011180:	d81b      	bhi.n	80111ba <GUI_Touch_Processing+0x76a>
 8011182:	b1d3      	cbz	r3, 80111ba <GUI_Touch_Processing+0x76a>
					if(Measure_Field&delta_E)
 8011184:	4c56      	ldr	r4, [pc, #344]	; (80112e0 <GUI_Touch_Processing+0x890>)
 8011186:	8823      	ldrh	r3, [r4, #0]
 8011188:	051b      	lsls	r3, r3, #20
 801118a:	f57f ad01 	bpl.w	8010b90 <GUI_Touch_Processing+0x140>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801118e:	4b55      	ldr	r3, [pc, #340]	; (80112e4 <GUI_Touch_Processing+0x894>)
 8011190:	4855      	ldr	r0, [pc, #340]	; (80112e8 <GUI_Touch_Processing+0x898>)
 8011192:	7819      	ldrb	r1, [r3, #0]
 8011194:	4b55      	ldr	r3, [pc, #340]	; (80112ec <GUI_Touch_Processing+0x89c>)
 8011196:	781a      	ldrb	r2, [r3, #0]
 8011198:	4b55      	ldr	r3, [pc, #340]	; (80112f0 <GUI_Touch_Processing+0x8a0>)
 801119a:	2900      	cmp	r1, #0
 801119c:	bf08      	it	eq
 801119e:	4618      	moveq	r0, r3
 80111a0:	f7fd f98e 	bl	800e4c0 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 80111a4:	4a53      	ldr	r2, [pc, #332]	; (80112f4 <GUI_Touch_Processing+0x8a4>)
 80111a6:	4b54      	ldr	r3, [pc, #336]	; (80112f8 <GUI_Touch_Processing+0x8a8>)
 80111a8:	8811      	ldrh	r1, [r2, #0]
 80111aa:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 80111ac:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 80111ae:	8892      	ldrh	r2, [r2, #4]
 80111b0:	809a      	strh	r2, [r3, #4]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 80111b2:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 80111b4:	8822      	ldrh	r2, [r4, #0]
 80111b6:	2301      	movs	r3, #1
 80111b8:	e7d5      	b.n	8011166 <GUI_Touch_Processing+0x716>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 80111ba:	1e53      	subs	r3, r2, #1
 80111bc:	2b36      	cmp	r3, #54	; 0x36
 80111be:	d81d      	bhi.n	80111fc <GUI_Touch_Processing+0x7ac>
 80111c0:	b1e0      	cbz	r0, 80111fc <GUI_Touch_Processing+0x7ac>
					WriteSDFLASH_t(sdfile_cnt);
 80111c2:	4b4e      	ldr	r3, [pc, #312]	; (80112fc <GUI_Touch_Processing+0x8ac>)
 80111c4:	2100      	movs	r1, #0
 80111c6:	8818      	ldrh	r0, [r3, #0]
 80111c8:	f008 fa64 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80111cc:	4b4c      	ldr	r3, [pc, #304]	; (8011300 <GUI_Touch_Processing+0x8b0>)
 80111ce:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80111d0:	1e5a      	subs	r2, r3, #1
 80111d2:	2a05      	cmp	r2, #5
 80111d4:	d804      	bhi.n	80111e0 <GUI_Touch_Processing+0x790>
 80111d6:	e8df f002 	tbb	[pc, r2]
 80111da:	0305      	.short	0x0305
 80111dc:	0b0e0803 	.word	0x0b0e0803
					GUI_screen_state = Prev_Inf_Screen;
 80111e0:	7023      	strb	r3, [r4, #0]
 80111e2:	e4d5      	b.n	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80111e4:	2301      	movs	r3, #1
 80111e6:	7023      	strb	r3, [r4, #0]
 80111e8:	e4d2      	b.n	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80111ea:	2304      	movs	r3, #4
 80111ec:	7023      	strb	r3, [r4, #0]
 80111ee:	e4cf      	b.n	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80111f0:	2306      	movs	r3, #6
 80111f2:	7023      	strb	r3, [r4, #0]
 80111f4:	e4cc      	b.n	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80111f6:	2305      	movs	r3, #5
 80111f8:	7023      	strb	r3, [r4, #0]
 80111fa:	e4c9      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 80111fc:	f1a2 03d9 	sub.w	r3, r2, #217	; 0xd9
 8011200:	2b36      	cmp	r3, #54	; 0x36
 8011202:	d802      	bhi.n	801120a <GUI_Touch_Processing+0x7ba>
 8011204:	2800      	cmp	r0, #0
 8011206:	f47f af2b 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 801120a:	3a37      	subs	r2, #55	; 0x37
 801120c:	2a36      	cmp	r2, #54	; 0x36
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 801120e:	f63f acbf 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8011212:	2800      	cmp	r0, #0
 8011214:	f47f acc4 	bne.w	8010ba0 <GUI_Touch_Processing+0x150>
 8011218:	e4ba      	b.n	8010b90 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 801121a:	4b2e      	ldr	r3, [pc, #184]	; (80112d4 <GUI_Touch_Processing+0x884>)
 801121c:	2209      	movs	r2, #9
 801121e:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )// down
 8011220:	4b2d      	ldr	r3, [pc, #180]	; (80112d8 <GUI_Touch_Processing+0x888>)
 8011222:	8819      	ldrh	r1, [r3, #0]
 8011224:	4b2d      	ldr	r3, [pc, #180]	; (80112dc <GUI_Touch_Processing+0x88c>)
 8011226:	881b      	ldrh	r3, [r3, #0]
 8011228:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 801122c:	2836      	cmp	r0, #54	; 0x36
 801122e:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 8011232:	bf8c      	ite	hi
 8011234:	2000      	movhi	r0, #0
 8011236:	2001      	movls	r0, #1
 8011238:	2a36      	cmp	r2, #54	; 0x36
 801123a:	d803      	bhi.n	8011244 <GUI_Touch_Processing+0x7f4>
 801123c:	b110      	cbz	r0, 8011244 <GUI_Touch_Processing+0x7f4>
					GUI_screen_state = DataSet4_Screen;
 801123e:	230a      	movs	r3, #10
 8011240:	7023      	strb	r3, [r4, #0]
 8011242:	e4a5      	b.n	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //CIE_XYZ
 8011244:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 8011248:	2a36      	cmp	r2, #54	; 0x36
 801124a:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 801124e:	bf8c      	ite	hi
 8011250:	2200      	movhi	r2, #0
 8011252:	2201      	movls	r2, #1
 8011254:	2d36      	cmp	r5, #54	; 0x36
 8011256:	d809      	bhi.n	801126c <GUI_Touch_Processing+0x81c>
 8011258:	b142      	cbz	r2, 801126c <GUI_Touch_Processing+0x81c>
					Measure_Field ^= CIE_XYZ;
 801125a:	4b21      	ldr	r3, [pc, #132]	; (80112e0 <GUI_Touch_Processing+0x890>)
 801125c:	881a      	ldrh	r2, [r3, #0]
 801125e:	f082 0210 	eor.w	r2, r2, #16
 8011262:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8011264:	f002 0210 	and.w	r2, r2, #16
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8011268:	2146      	movs	r1, #70	; 0x46
 801126a:	e75f      	b.n	801112c <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //CIE_xy
 801126c:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 8011270:	2d36      	cmp	r5, #54	; 0x36
 8011272:	d847      	bhi.n	8011304 <GUI_Touch_Processing+0x8b4>
 8011274:	2a00      	cmp	r2, #0
 8011276:	d045      	beq.n	8011304 <GUI_Touch_Processing+0x8b4>
					Measure_Field ^= CIE_xy;
 8011278:	4c19      	ldr	r4, [pc, #100]	; (80112e0 <GUI_Touch_Processing+0x890>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 801127a:	4d1a      	ldr	r5, [pc, #104]	; (80112e4 <GUI_Touch_Processing+0x894>)
					Measure_Field ^= CIE_xy;
 801127c:	8822      	ldrh	r2, [r4, #0]
 801127e:	f082 0220 	eor.w	r2, r2, #32
 8011282:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 8011284:	2185      	movs	r1, #133	; 0x85
 8011286:	f002 0220 	and.w	r2, r2, #32
 801128a:	20c8      	movs	r0, #200	; 0xc8
 801128c:	f001 fc22 	bl	8012ad4 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011290:	8823      	ldrh	r3, [r4, #0]
 8011292:	782a      	ldrb	r2, [r5, #0]
 8011294:	f003 0320 	and.w	r3, r3, #32
 8011298:	f002 0201 	and.w	r2, r2, #1
 801129c:	21c6      	movs	r1, #198	; 0xc6
 801129e:	20c8      	movs	r0, #200	; 0xc8
 80112a0:	f001 fc59 	bl	8012b56 <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 80112a4:	782a      	ldrb	r2, [r5, #0]
 80112a6:	8823      	ldrh	r3, [r4, #0]
 80112a8:	43d2      	mvns	r2, r2
 80112aa:	f003 0320 	and.w	r3, r3, #32
 80112ae:	f002 0201 	and.w	r2, r2, #1
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 80112b2:	f240 1107 	movw	r1, #263	; 0x107
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 80112b6:	20c8      	movs	r0, #200	; 0xc8
}
 80112b8:	b002      	add	sp, #8
 80112ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 80112be:	f001 bc4a 	b.w	8012b56 <GUI_RadioBox>
 80112c2:	bf00      	nop
 80112c4:	200056f3 	.word	0x200056f3
 80112c8:	20000ebe 	.word	0x20000ebe
 80112cc:	200957ec 	.word	0x200957ec
 80112d0:	48001400 	.word	0x48001400
 80112d4:	2000022a 	.word	0x2000022a
 80112d8:	20054932 	.word	0x20054932
 80112dc:	20054934 	.word	0x20054934
 80112e0:	200056f6 	.word	0x200056f6
 80112e4:	200056f4 	.word	0x200056f4
 80112e8:	2008f512 	.word	0x2008f512
 80112ec:	20090a69 	.word	0x20090a69
 80112f0:	2008f518 	.word	0x2008f518
 80112f4:	2008f50c 	.word	0x2008f50c
 80112f8:	20090ff8 	.word	0x20090ff8
 80112fc:	2000571e 	.word	0x2000571e
 8011300:	20090a65 	.word	0x20090a65
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //CIE_Luv
 8011304:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 8011308:	eb03 050c 	add.w	r5, r3, ip
 801130c:	2d36      	cmp	r5, #54	; 0x36
 801130e:	d80a      	bhi.n	8011326 <GUI_Touch_Processing+0x8d6>
 8011310:	b14a      	cbz	r2, 8011326 <GUI_Touch_Processing+0x8d6>
					Measure_Field ^= CIE_Luv;
 8011312:	4ba8      	ldr	r3, [pc, #672]	; (80115b4 <GUI_Touch_Processing+0xb64>)
 8011314:	881a      	ldrh	r2, [r3, #0]
 8011316:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 801131a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 801131c:	f002 0240 	and.w	r2, r2, #64	; 0x40
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8011320:	f240 1147 	movw	r1, #327	; 0x147
 8011324:	e702      	b.n	801112c <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) && (Measure_Field&CIE_xy)) //CIE_xy_1931
 8011326:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 801132a:	2d36      	cmp	r5, #54	; 0x36
 801132c:	d817      	bhi.n	801135e <GUI_Touch_Processing+0x90e>
 801132e:	b1b2      	cbz	r2, 801135e <GUI_Touch_Processing+0x90e>
 8011330:	4da0      	ldr	r5, [pc, #640]	; (80115b4 <GUI_Touch_Processing+0xb64>)
 8011332:	882d      	ldrh	r5, [r5, #0]
 8011334:	06af      	lsls	r7, r5, #26
 8011336:	d512      	bpl.n	801135e <GUI_Touch_Processing+0x90e>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 8011338:	4c9f      	ldr	r4, [pc, #636]	; (80115b8 <GUI_Touch_Processing+0xb68>)
 801133a:	7822      	ldrb	r2, [r4, #0]
 801133c:	07d6      	lsls	r6, r2, #31
 801133e:	f53f ac27 	bmi.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8011342:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8011344:	f082 0201 	eor.w	r2, r2, #1
 8011348:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 801134a:	21c6      	movs	r1, #198	; 0xc6
 801134c:	401a      	ands	r2, r3
 801134e:	20c8      	movs	r0, #200	; 0xc8
 8011350:	f001 fc01 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8011354:	7822      	ldrb	r2, [r4, #0]
 8011356:	2301      	movs	r3, #1
 8011358:	43d2      	mvns	r2, r2
 801135a:	401a      	ands	r2, r3
 801135c:	e7a9      	b.n	80112b2 <GUI_Touch_Processing+0x862>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) && (Measure_Field&CIE_xy)) //CIE_xy_1964
 801135e:	f46f 7583 	mvn.w	r5, #262	; 0x106
 8011362:	442b      	add	r3, r5
 8011364:	2b36      	cmp	r3, #54	; 0x36
 8011366:	d80a      	bhi.n	801137e <GUI_Touch_Processing+0x92e>
 8011368:	b14a      	cbz	r2, 801137e <GUI_Touch_Processing+0x92e>
 801136a:	4b92      	ldr	r3, [pc, #584]	; (80115b4 <GUI_Touch_Processing+0xb64>)
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	069b      	lsls	r3, r3, #26
 8011370:	d505      	bpl.n	801137e <GUI_Touch_Processing+0x92e>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 8011372:	4c91      	ldr	r4, [pc, #580]	; (80115b8 <GUI_Touch_Processing+0xb68>)
 8011374:	7822      	ldrb	r2, [r4, #0]
 8011376:	07d7      	lsls	r7, r2, #31
 8011378:	f57f ac0a 	bpl.w	8010b90 <GUI_Touch_Processing+0x140>
 801137c:	e7e1      	b.n	8011342 <GUI_Touch_Processing+0x8f2>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 801137e:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 8011382:	2b36      	cmp	r3, #54	; 0x36
 8011384:	d802      	bhi.n	801138c <GUI_Touch_Processing+0x93c>
 8011386:	2800      	cmp	r0, #0
 8011388:	f47f ae6a 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 801138c:	1e4b      	subs	r3, r1, #1
 801138e:	2b36      	cmp	r3, #54	; 0x36
 8011390:	f200 820a 	bhi.w	80117a8 <GUI_Touch_Processing+0xd58>
 8011394:	2800      	cmp	r0, #0
 8011396:	f000 8207 	beq.w	80117a8 <GUI_Touch_Processing+0xd58>
					WriteSDFLASH_t(sdfile_cnt);
 801139a:	4b88      	ldr	r3, [pc, #544]	; (80115bc <GUI_Touch_Processing+0xb6c>)
 801139c:	2100      	movs	r1, #0
 801139e:	8818      	ldrh	r0, [r3, #0]
 80113a0:	f008 f978 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80113a4:	4b86      	ldr	r3, [pc, #536]	; (80115c0 <GUI_Touch_Processing+0xb70>)
 80113a6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80113a8:	1e5a      	subs	r2, r3, #1
 80113aa:	2a05      	cmp	r2, #5
 80113ac:	d804      	bhi.n	80113b8 <GUI_Touch_Processing+0x968>
 80113ae:	e8df f002 	tbb	[pc, r2]
 80113b2:	0306      	.short	0x0306
 80113b4:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 80113b8:	7023      	strb	r3, [r4, #0]
 80113ba:	f7ff bbe9 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80113be:	2301      	movs	r3, #1
 80113c0:	7023      	strb	r3, [r4, #0]
 80113c2:	f7ff bbe5 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80113c6:	2304      	movs	r3, #4
 80113c8:	7023      	strb	r3, [r4, #0]
 80113ca:	f7ff bbe1 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80113ce:	2306      	movs	r3, #6
 80113d0:	7023      	strb	r3, [r4, #0]
 80113d2:	f7ff bbdd 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80113d6:	2305      	movs	r3, #5
 80113d8:	7023      	strb	r3, [r4, #0]
 80113da:	f7ff bbd9 	b.w	8010b90 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 80113de:	4b79      	ldr	r3, [pc, #484]	; (80115c4 <GUI_Touch_Processing+0xb74>)
 80113e0:	220a      	movs	r2, #10
 80113e2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //down
 80113e4:	4b78      	ldr	r3, [pc, #480]	; (80115c8 <GUI_Touch_Processing+0xb78>)
 80113e6:	8819      	ldrh	r1, [r3, #0]
 80113e8:	4b78      	ldr	r3, [pc, #480]	; (80115cc <GUI_Touch_Processing+0xb7c>)
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 80113f0:	2836      	cmp	r0, #54	; 0x36
 80113f2:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 80113f6:	bf8c      	ite	hi
 80113f8:	2000      	movhi	r0, #0
 80113fa:	2001      	movls	r0, #1
 80113fc:	2a36      	cmp	r2, #54	; 0x36
 80113fe:	d804      	bhi.n	801140a <GUI_Touch_Processing+0x9ba>
 8011400:	b118      	cbz	r0, 801140a <GUI_Touch_Processing+0x9ba>
					GUI_screen_state = DataSet5_Screen;
 8011402:	230b      	movs	r3, #11
 8011404:	7023      	strb	r3, [r4, #0]
 8011406:	f7ff bbc3 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=65 & Touch_y <=(65+54) ) //CIE_Lab
 801140a:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 801140e:	2a36      	cmp	r2, #54	; 0x36
 8011410:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8011414:	bf8c      	ite	hi
 8011416:	2200      	movhi	r2, #0
 8011418:	2201      	movls	r2, #1
 801141a:	2d36      	cmp	r5, #54	; 0x36
 801141c:	d848      	bhi.n	80114b0 <GUI_Touch_Processing+0xa60>
 801141e:	2a00      	cmp	r2, #0
 8011420:	d046      	beq.n	80114b0 <GUI_Touch_Processing+0xa60>
					Measure_Field ^= CIE_Lab;
 8011422:	4c64      	ldr	r4, [pc, #400]	; (80115b4 <GUI_Touch_Processing+0xb64>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8011424:	4d6a      	ldr	r5, [pc, #424]	; (80115d0 <GUI_Touch_Processing+0xb80>)
					Measure_Field ^= CIE_Lab;
 8011426:	8822      	ldrh	r2, [r4, #0]
 8011428:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 801142c:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 801142e:	2141      	movs	r1, #65	; 0x41
 8011430:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011434:	20c8      	movs	r0, #200	; 0xc8
 8011436:	f001 fb4d 	bl	8012ad4 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 801143a:	8823      	ldrh	r3, [r4, #0]
 801143c:	782a      	ldrb	r2, [r5, #0]
 801143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011442:	f002 0201 	and.w	r2, r2, #1
 8011446:	216c      	movs	r1, #108	; 0x6c
 8011448:	20c8      	movs	r0, #200	; 0xc8
 801144a:	f001 fb84 	bl	8012b56 <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 801144e:	8823      	ldrh	r3, [r4, #0]
 8011450:	782a      	ldrb	r2, [r5, #0]
 8011452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011456:	f002 0202 	and.w	r2, r2, #2
 801145a:	218f      	movs	r1, #143	; 0x8f
 801145c:	20c8      	movs	r0, #200	; 0xc8
 801145e:	f001 fb7a 	bl	8012b56 <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 8011462:	8823      	ldrh	r3, [r4, #0]
 8011464:	782a      	ldrb	r2, [r5, #0]
 8011466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801146a:	f002 0204 	and.w	r2, r2, #4
 801146e:	21b2      	movs	r1, #178	; 0xb2
 8011470:	20c8      	movs	r0, #200	; 0xc8
 8011472:	f001 fb70 	bl	8012b56 <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 8011476:	8823      	ldrh	r3, [r4, #0]
 8011478:	782a      	ldrb	r2, [r5, #0]
 801147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801147e:	f002 0208 	and.w	r2, r2, #8
 8011482:	21d5      	movs	r1, #213	; 0xd5
 8011484:	20c8      	movs	r0, #200	; 0xc8
 8011486:	f001 fb66 	bl	8012b56 <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 801148a:	8823      	ldrh	r3, [r4, #0]
 801148c:	782a      	ldrb	r2, [r5, #0]
 801148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011492:	f002 0210 	and.w	r2, r2, #16
 8011496:	21f8      	movs	r1, #248	; 0xf8
 8011498:	20c8      	movs	r0, #200	; 0xc8
 801149a:	f001 fb5c 	bl	8012b56 <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 801149e:	8823      	ldrh	r3, [r4, #0]
 80114a0:	782a      	ldrb	r2, [r5, #0]
 80114a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80114a6:	f002 0220 	and.w	r2, r2, #32
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 80114aa:	f240 111b 	movw	r1, #283	; 0x11b
 80114ae:	e702      	b.n	80112b6 <GUI_Touch_Processing+0x866>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=345 & Touch_y <=(345+54) ) //EbEr
 80114b0:	f46f 76ac 	mvn.w	r6, #344	; 0x158
 80114b4:	199d      	adds	r5, r3, r6
 80114b6:	2d36      	cmp	r5, #54	; 0x36
 80114b8:	d80a      	bhi.n	80114d0 <GUI_Touch_Processing+0xa80>
 80114ba:	b14a      	cbz	r2, 80114d0 <GUI_Touch_Processing+0xa80>
					Measure_Field ^= EbEr;
 80114bc:	4b3d      	ldr	r3, [pc, #244]	; (80115b4 <GUI_Touch_Processing+0xb64>)
 80114be:	881a      	ldrh	r2, [r3, #0]
 80114c0:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80114c4:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 80114c6:	f240 1159 	movw	r1, #345	; 0x159
 80114ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80114ce:	e62d      	b.n	801112c <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=108 & Touch_y <=(108+54) && (Measure_Field&CIE_Lab)) //Source_A
 80114d0:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
 80114d4:	2d36      	cmp	r5, #54	; 0x36
 80114d6:	d834      	bhi.n	8011542 <GUI_Touch_Processing+0xaf2>
 80114d8:	b39a      	cbz	r2, 8011542 <GUI_Touch_Processing+0xaf2>
 80114da:	4d36      	ldr	r5, [pc, #216]	; (80115b4 <GUI_Touch_Processing+0xb64>)
 80114dc:	882d      	ldrh	r5, [r5, #0]
 80114de:	062d      	lsls	r5, r5, #24
 80114e0:	d52f      	bpl.n	8011542 <GUI_Touch_Processing+0xaf2>
					if(!(Source_Type&Source_A))
 80114e2:	4d3b      	ldr	r5, [pc, #236]	; (80115d0 <GUI_Touch_Processing+0xb80>)
 80114e4:	782b      	ldrb	r3, [r5, #0]
 80114e6:	07df      	lsls	r7, r3, #31
 80114e8:	f53f ab52 	bmi.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 80114ec:	2401      	movs	r4, #1
 80114ee:	4623      	mov	r3, r4
 80114f0:	4622      	mov	r2, r4
 80114f2:	216c      	movs	r1, #108	; 0x6c
 80114f4:	20c8      	movs	r0, #200	; 0xc8
 80114f6:	702c      	strb	r4, [r5, #0]
 80114f8:	f001 fb2d 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80114fc:	782a      	ldrb	r2, [r5, #0]
 80114fe:	4623      	mov	r3, r4
 8011500:	f002 0202 	and.w	r2, r2, #2
 8011504:	218f      	movs	r1, #143	; 0x8f
 8011506:	20c8      	movs	r0, #200	; 0xc8
 8011508:	f001 fb25 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 801150c:	782a      	ldrb	r2, [r5, #0]
 801150e:	4623      	mov	r3, r4
 8011510:	f002 0204 	and.w	r2, r2, #4
 8011514:	21b2      	movs	r1, #178	; 0xb2
 8011516:	20c8      	movs	r0, #200	; 0xc8
 8011518:	f001 fb1d 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 801151c:	782a      	ldrb	r2, [r5, #0]
 801151e:	4623      	mov	r3, r4
 8011520:	f002 0208 	and.w	r2, r2, #8
 8011524:	21d5      	movs	r1, #213	; 0xd5
 8011526:	20c8      	movs	r0, #200	; 0xc8
 8011528:	f001 fb15 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 801152c:	782a      	ldrb	r2, [r5, #0]
 801152e:	4623      	mov	r3, r4
 8011530:	f002 0210 	and.w	r2, r2, #16
 8011534:	21f8      	movs	r1, #248	; 0xf8
 8011536:	20c8      	movs	r0, #200	; 0xc8
 8011538:	f001 fb0d 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 801153c:	782a      	ldrb	r2, [r5, #0]
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 801153e:	2301      	movs	r3, #1
 8011540:	e7b1      	b.n	80114a6 <GUI_Touch_Processing+0xa56>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=143  & Touch_y <=(143+54)  && (Measure_Field&CIE_Lab)) //Source_D65
 8011542:	f1a3 058f 	sub.w	r5, r3, #143	; 0x8f
 8011546:	2d36      	cmp	r5, #54	; 0x36
 8011548:	d844      	bhi.n	80115d4 <GUI_Touch_Processing+0xb84>
 801154a:	2a00      	cmp	r2, #0
 801154c:	d042      	beq.n	80115d4 <GUI_Touch_Processing+0xb84>
 801154e:	4d19      	ldr	r5, [pc, #100]	; (80115b4 <GUI_Touch_Processing+0xb64>)
 8011550:	882d      	ldrh	r5, [r5, #0]
 8011552:	062e      	lsls	r6, r5, #24
 8011554:	d53e      	bpl.n	80115d4 <GUI_Touch_Processing+0xb84>
					if(!(Source_Type&Source_D65))
 8011556:	4c1e      	ldr	r4, [pc, #120]	; (80115d0 <GUI_Touch_Processing+0xb80>)
 8011558:	7822      	ldrb	r2, [r4, #0]
 801155a:	f012 0202 	ands.w	r2, r2, #2
 801155e:	f47f ab17 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011562:	2301      	movs	r3, #1
 8011564:	216c      	movs	r1, #108	; 0x6c
 8011566:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011568:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 801156a:	f001 faf4 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 801156e:	7822      	ldrb	r2, [r4, #0]
 8011570:	2301      	movs	r3, #1
 8011572:	f042 0202 	orr.w	r2, r2, #2
 8011576:	218f      	movs	r1, #143	; 0x8f
 8011578:	20c8      	movs	r0, #200	; 0xc8
 801157a:	7022      	strb	r2, [r4, #0]
 801157c:	f001 faeb 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011580:	7822      	ldrb	r2, [r4, #0]
 8011582:	2301      	movs	r3, #1
 8011584:	f002 0204 	and.w	r2, r2, #4
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8011588:	21b2      	movs	r1, #178	; 0xb2
 801158a:	20c8      	movs	r0, #200	; 0xc8
 801158c:	f001 fae3 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011590:	7822      	ldrb	r2, [r4, #0]
 8011592:	2301      	movs	r3, #1
 8011594:	f002 0208 	and.w	r2, r2, #8
 8011598:	21d5      	movs	r1, #213	; 0xd5
 801159a:	20c8      	movs	r0, #200	; 0xc8
 801159c:	f001 fadb 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80115a0:	7822      	ldrb	r2, [r4, #0]
 80115a2:	2301      	movs	r3, #1
 80115a4:	f002 0210 	and.w	r2, r2, #16
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 80115a8:	21f8      	movs	r1, #248	; 0xf8
 80115aa:	20c8      	movs	r0, #200	; 0xc8
 80115ac:	f001 fad3 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80115b0:	7822      	ldrb	r2, [r4, #0]
 80115b2:	e7c4      	b.n	801153e <GUI_Touch_Processing+0xaee>
 80115b4:	200056f6 	.word	0x200056f6
 80115b8:	200056f4 	.word	0x200056f4
 80115bc:	2000571e 	.word	0x2000571e
 80115c0:	20090a65 	.word	0x20090a65
 80115c4:	2000022a 	.word	0x2000022a
 80115c8:	20054932 	.word	0x20054932
 80115cc:	20054934 	.word	0x20054934
 80115d0:	20090a69 	.word	0x20090a69
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=178  & Touch_y <=(178+54)  && (Measure_Field&CIE_Lab)) //Source_C
 80115d4:	f1a3 05b2 	sub.w	r5, r3, #178	; 0xb2
 80115d8:	2d36      	cmp	r5, #54	; 0x36
 80115da:	d81e      	bhi.n	801161a <GUI_Touch_Processing+0xbca>
 80115dc:	b1ea      	cbz	r2, 801161a <GUI_Touch_Processing+0xbca>
 80115de:	4db1      	ldr	r5, [pc, #708]	; (80118a4 <GUI_Touch_Processing+0xe54>)
 80115e0:	882d      	ldrh	r5, [r5, #0]
 80115e2:	062d      	lsls	r5, r5, #24
 80115e4:	d519      	bpl.n	801161a <GUI_Touch_Processing+0xbca>
					if(!(Source_Type&Source_C))
 80115e6:	4cb0      	ldr	r4, [pc, #704]	; (80118a8 <GUI_Touch_Processing+0xe58>)
 80115e8:	7822      	ldrb	r2, [r4, #0]
 80115ea:	f012 0204 	ands.w	r2, r2, #4
 80115ee:	f47f aacf 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80115f2:	2301      	movs	r3, #1
 80115f4:	216c      	movs	r1, #108	; 0x6c
 80115f6:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80115f8:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80115fa:	f001 faac 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80115fe:	7822      	ldrb	r2, [r4, #0]
 8011600:	2301      	movs	r3, #1
 8011602:	f002 0202 	and.w	r2, r2, #2
 8011606:	218f      	movs	r1, #143	; 0x8f
 8011608:	20c8      	movs	r0, #200	; 0xc8
 801160a:	f001 faa4 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 801160e:	7822      	ldrb	r2, [r4, #0]
 8011610:	f042 0204 	orr.w	r2, r2, #4
 8011614:	7022      	strb	r2, [r4, #0]
 8011616:	2301      	movs	r3, #1
 8011618:	e7b6      	b.n	8011588 <GUI_Touch_Processing+0xb38>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=213  & Touch_y <=(213+54)  && (Measure_Field&CIE_Lab)) //Source_D50
 801161a:	f1a3 05d5 	sub.w	r5, r3, #213	; 0xd5
 801161e:	2d36      	cmp	r5, #54	; 0x36
 8011620:	d826      	bhi.n	8011670 <GUI_Touch_Processing+0xc20>
 8011622:	b32a      	cbz	r2, 8011670 <GUI_Touch_Processing+0xc20>
 8011624:	4d9f      	ldr	r5, [pc, #636]	; (80118a4 <GUI_Touch_Processing+0xe54>)
 8011626:	882d      	ldrh	r5, [r5, #0]
 8011628:	062f      	lsls	r7, r5, #24
 801162a:	d521      	bpl.n	8011670 <GUI_Touch_Processing+0xc20>
					if(!(Source_Type&Source_D50))
 801162c:	4c9e      	ldr	r4, [pc, #632]	; (80118a8 <GUI_Touch_Processing+0xe58>)
 801162e:	7822      	ldrb	r2, [r4, #0]
 8011630:	f012 0208 	ands.w	r2, r2, #8
 8011634:	f47f aaac 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011638:	2301      	movs	r3, #1
 801163a:	216c      	movs	r1, #108	; 0x6c
 801163c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801163e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011640:	f001 fa89 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011644:	7822      	ldrb	r2, [r4, #0]
 8011646:	2301      	movs	r3, #1
 8011648:	f002 0202 	and.w	r2, r2, #2
 801164c:	218f      	movs	r1, #143	; 0x8f
 801164e:	20c8      	movs	r0, #200	; 0xc8
 8011650:	f001 fa81 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011654:	7822      	ldrb	r2, [r4, #0]
 8011656:	2301      	movs	r3, #1
 8011658:	f002 0204 	and.w	r2, r2, #4
 801165c:	21b2      	movs	r1, #178	; 0xb2
 801165e:	20c8      	movs	r0, #200	; 0xc8
 8011660:	f001 fa79 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 8011664:	7822      	ldrb	r2, [r4, #0]
 8011666:	f042 0208 	orr.w	r2, r2, #8
 801166a:	7022      	strb	r2, [r4, #0]
 801166c:	2301      	movs	r3, #1
 801166e:	e793      	b.n	8011598 <GUI_Touch_Processing+0xb48>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=248  & Touch_y <=(248+54)  && (Measure_Field&CIE_Lab)) //Source_D55
 8011670:	f1a3 05f8 	sub.w	r5, r3, #248	; 0xf8
 8011674:	2d36      	cmp	r5, #54	; 0x36
 8011676:	d82e      	bhi.n	80116d6 <GUI_Touch_Processing+0xc86>
 8011678:	b36a      	cbz	r2, 80116d6 <GUI_Touch_Processing+0xc86>
 801167a:	4d8a      	ldr	r5, [pc, #552]	; (80118a4 <GUI_Touch_Processing+0xe54>)
 801167c:	882d      	ldrh	r5, [r5, #0]
 801167e:	062e      	lsls	r6, r5, #24
 8011680:	d529      	bpl.n	80116d6 <GUI_Touch_Processing+0xc86>
					if(!(Source_Type&Source_D55))
 8011682:	4c89      	ldr	r4, [pc, #548]	; (80118a8 <GUI_Touch_Processing+0xe58>)
 8011684:	7822      	ldrb	r2, [r4, #0]
 8011686:	f012 0210 	ands.w	r2, r2, #16
 801168a:	f47f aa81 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 801168e:	2301      	movs	r3, #1
 8011690:	216c      	movs	r1, #108	; 0x6c
 8011692:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011694:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011696:	f001 fa5e 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 801169a:	7822      	ldrb	r2, [r4, #0]
 801169c:	2301      	movs	r3, #1
 801169e:	f002 0202 	and.w	r2, r2, #2
 80116a2:	218f      	movs	r1, #143	; 0x8f
 80116a4:	20c8      	movs	r0, #200	; 0xc8
 80116a6:	f001 fa56 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80116aa:	7822      	ldrb	r2, [r4, #0]
 80116ac:	2301      	movs	r3, #1
 80116ae:	f002 0204 	and.w	r2, r2, #4
 80116b2:	21b2      	movs	r1, #178	; 0xb2
 80116b4:	20c8      	movs	r0, #200	; 0xc8
 80116b6:	f001 fa4e 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80116ba:	7822      	ldrb	r2, [r4, #0]
 80116bc:	2301      	movs	r3, #1
 80116be:	f002 0208 	and.w	r2, r2, #8
 80116c2:	21d5      	movs	r1, #213	; 0xd5
 80116c4:	20c8      	movs	r0, #200	; 0xc8
 80116c6:	f001 fa46 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 80116ca:	7822      	ldrb	r2, [r4, #0]
 80116cc:	f042 0210 	orr.w	r2, r2, #16
 80116d0:	7022      	strb	r2, [r4, #0]
 80116d2:	2301      	movs	r3, #1
 80116d4:	e768      	b.n	80115a8 <GUI_Touch_Processing+0xb58>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=283  & Touch_y <=(283+54)  && (Measure_Field&CIE_Lab)) //Source_D75
 80116d6:	f46f 758d 	mvn.w	r5, #282	; 0x11a
 80116da:	442b      	add	r3, r5
 80116dc:	2b36      	cmp	r3, #54	; 0x36
 80116de:	d836      	bhi.n	801174e <GUI_Touch_Processing+0xcfe>
 80116e0:	b3aa      	cbz	r2, 801174e <GUI_Touch_Processing+0xcfe>
 80116e2:	4b70      	ldr	r3, [pc, #448]	; (80118a4 <GUI_Touch_Processing+0xe54>)
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	061b      	lsls	r3, r3, #24
 80116e8:	d531      	bpl.n	801174e <GUI_Touch_Processing+0xcfe>
					if(!(Source_Type&Source_D75))
 80116ea:	4c6f      	ldr	r4, [pc, #444]	; (80118a8 <GUI_Touch_Processing+0xe58>)
 80116ec:	7822      	ldrb	r2, [r4, #0]
 80116ee:	f012 0220 	ands.w	r2, r2, #32
 80116f2:	f47f aa4d 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80116f6:	2301      	movs	r3, #1
 80116f8:	216c      	movs	r1, #108	; 0x6c
 80116fa:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80116fc:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80116fe:	f001 fa2a 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011702:	7822      	ldrb	r2, [r4, #0]
 8011704:	2301      	movs	r3, #1
 8011706:	f002 0202 	and.w	r2, r2, #2
 801170a:	218f      	movs	r1, #143	; 0x8f
 801170c:	20c8      	movs	r0, #200	; 0xc8
 801170e:	f001 fa22 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011712:	7822      	ldrb	r2, [r4, #0]
 8011714:	2301      	movs	r3, #1
 8011716:	f002 0204 	and.w	r2, r2, #4
 801171a:	21b2      	movs	r1, #178	; 0xb2
 801171c:	20c8      	movs	r0, #200	; 0xc8
 801171e:	f001 fa1a 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011722:	7822      	ldrb	r2, [r4, #0]
 8011724:	2301      	movs	r3, #1
 8011726:	f002 0208 	and.w	r2, r2, #8
 801172a:	21d5      	movs	r1, #213	; 0xd5
 801172c:	20c8      	movs	r0, #200	; 0xc8
 801172e:	f001 fa12 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011732:	7822      	ldrb	r2, [r4, #0]
 8011734:	2301      	movs	r3, #1
 8011736:	f002 0210 	and.w	r2, r2, #16
 801173a:	21f8      	movs	r1, #248	; 0xf8
 801173c:	20c8      	movs	r0, #200	; 0xc8
 801173e:	f001 fa0a 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8011742:	7822      	ldrb	r2, [r4, #0]
 8011744:	f042 0220 	orr.w	r2, r2, #32
 8011748:	7022      	strb	r2, [r4, #0]
 801174a:	2301      	movs	r3, #1
 801174c:	e6ad      	b.n	80114aa <GUI_Touch_Processing+0xa5a>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 801174e:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 8011752:	2b36      	cmp	r3, #54	; 0x36
 8011754:	d802      	bhi.n	801175c <GUI_Touch_Processing+0xd0c>
 8011756:	2800      	cmp	r0, #0
 8011758:	f47f ac82 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 801175c:	1e4b      	subs	r3, r1, #1
 801175e:	2b36      	cmp	r3, #54	; 0x36
 8011760:	d822      	bhi.n	80117a8 <GUI_Touch_Processing+0xd58>
 8011762:	b308      	cbz	r0, 80117a8 <GUI_Touch_Processing+0xd58>
					WriteSDFLASH_t(sdfile_cnt);
 8011764:	4b51      	ldr	r3, [pc, #324]	; (80118ac <GUI_Touch_Processing+0xe5c>)
 8011766:	2100      	movs	r1, #0
 8011768:	8818      	ldrh	r0, [r3, #0]
 801176a:	f007 ff93 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801176e:	4b50      	ldr	r3, [pc, #320]	; (80118b0 <GUI_Touch_Processing+0xe60>)
 8011770:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011772:	1e5a      	subs	r2, r3, #1
 8011774:	2a05      	cmp	r2, #5
 8011776:	d804      	bhi.n	8011782 <GUI_Touch_Processing+0xd32>
 8011778:	e8df f002 	tbb	[pc, r2]
 801177c:	0a030306 	.word	0x0a030306
 8011780:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8011782:	7023      	strb	r3, [r4, #0]
 8011784:	f7ff ba04 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011788:	2301      	movs	r3, #1
 801178a:	7023      	strb	r3, [r4, #0]
 801178c:	f7ff ba00 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011790:	2304      	movs	r3, #4
 8011792:	7023      	strb	r3, [r4, #0]
 8011794:	f7ff b9fc 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011798:	2306      	movs	r3, #6
 801179a:	7023      	strb	r3, [r4, #0]
 801179c:	f7ff b9f8 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80117a0:	2305      	movs	r3, #5
 80117a2:	7023      	strb	r3, [r4, #0]
 80117a4:	f7ff b9f4 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 80117a8:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80117ac:	e469      	b.n	8011082 <GUI_Touch_Processing+0x632>
					preGUI_screen_state = GUI_screen_state;
 80117ae:	4b41      	ldr	r3, [pc, #260]	; (80118b4 <GUI_Touch_Processing+0xe64>)
 80117b0:	220b      	movs	r2, #11
 80117b2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Next
 80117b4:	4a40      	ldr	r2, [pc, #256]	; (80118b8 <GUI_Touch_Processing+0xe68>)
 80117b6:	4b41      	ldr	r3, [pc, #260]	; (80118bc <GUI_Touch_Processing+0xe6c>)
 80117b8:	8811      	ldrh	r1, [r2, #0]
 80117ba:	881b      	ldrh	r3, [r3, #0]
 80117bc:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 80117c0:	2a36      	cmp	r2, #54	; 0x36
 80117c2:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 80117c6:	bf8c      	ite	hi
 80117c8:	2200      	movhi	r2, #0
 80117ca:	2201      	movls	r2, #1
 80117cc:	2836      	cmp	r0, #54	; 0x36
 80117ce:	d804      	bhi.n	80117da <GUI_Touch_Processing+0xd8a>
 80117d0:	b11a      	cbz	r2, 80117da <GUI_Touch_Processing+0xd8a>
					GUI_screen_state = DataSet1_Screen;
 80117d2:	2307      	movs	r3, #7
 80117d4:	7023      	strb	r3, [r4, #0]
 80117d6:	f7ff b9db 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //EbEr
 80117da:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 80117de:	2836      	cmp	r0, #54	; 0x36
 80117e0:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 80117e4:	bf8c      	ite	hi
 80117e6:	2000      	movhi	r0, #0
 80117e8:	2001      	movls	r0, #1
 80117ea:	2d36      	cmp	r5, #54	; 0x36
 80117ec:	d808      	bhi.n	8011800 <GUI_Touch_Processing+0xdb0>
 80117ee:	b138      	cbz	r0, 8011800 <GUI_Touch_Processing+0xdb0>
					Measure_Field ^= lambda_d;
 80117f0:	4b2c      	ldr	r3, [pc, #176]	; (80118a4 <GUI_Touch_Processing+0xe54>)
 80117f2:	881a      	ldrh	r2, [r3, #0]
 80117f4:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 80117f8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 80117fa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80117fe:	e533      	b.n	8011268 <GUI_Touch_Processing+0x818>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=198  & Touch_y <=(198+54) ) //EbEr
 8011800:	39c6      	subs	r1, #198	; 0xc6
 8011802:	2936      	cmp	r1, #54	; 0x36
 8011804:	d808      	bhi.n	8011818 <GUI_Touch_Processing+0xdc8>
 8011806:	b138      	cbz	r0, 8011818 <GUI_Touch_Processing+0xdc8>
					Measure_Field ^= SP_measure;
 8011808:	4b26      	ldr	r3, [pc, #152]	; (80118a4 <GUI_Touch_Processing+0xe54>)
 801180a:	881a      	ldrh	r2, [r3, #0]
 801180c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8011810:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 8011812:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011816:	e478      	b.n	801110a <GUI_Touch_Processing+0x6ba>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011818:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 801181c:	2936      	cmp	r1, #54	; 0x36
 801181e:	d802      	bhi.n	8011826 <GUI_Touch_Processing+0xdd6>
 8011820:	2a00      	cmp	r2, #0
 8011822:	f47f ac1d 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011826:	1e59      	subs	r1, r3, #1
 8011828:	2936      	cmp	r1, #54	; 0x36
 801182a:	f200 82af 	bhi.w	8011d8c <GUI_Touch_Processing+0x133c>
 801182e:	2a00      	cmp	r2, #0
 8011830:	f000 82ac 	beq.w	8011d8c <GUI_Touch_Processing+0x133c>
					WriteSDFLASH_t(sdfile_cnt);
 8011834:	4b1d      	ldr	r3, [pc, #116]	; (80118ac <GUI_Touch_Processing+0xe5c>)
 8011836:	2100      	movs	r1, #0
 8011838:	8818      	ldrh	r0, [r3, #0]
 801183a:	f007 ff2b 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801183e:	4b1c      	ldr	r3, [pc, #112]	; (80118b0 <GUI_Touch_Processing+0xe60>)
 8011840:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011842:	1e5a      	subs	r2, r3, #1
 8011844:	2a05      	cmp	r2, #5
 8011846:	d804      	bhi.n	8011852 <GUI_Touch_Processing+0xe02>
 8011848:	e8df f002 	tbb	[pc, r2]
 801184c:	0a030306 	.word	0x0a030306
 8011850:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8011852:	7023      	strb	r3, [r4, #0]
 8011854:	f7ff b99c 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011858:	2301      	movs	r3, #1
 801185a:	7023      	strb	r3, [r4, #0]
 801185c:	f7ff b998 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011860:	2304      	movs	r3, #4
 8011862:	7023      	strb	r3, [r4, #0]
 8011864:	f7ff b994 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011868:	2306      	movs	r3, #6
 801186a:	7023      	strb	r3, [r4, #0]
 801186c:	f7ff b990 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011870:	2305      	movs	r3, #5
 8011872:	7023      	strb	r3, [r4, #0]
 8011874:	f7ff b98c 	b.w	8010b90 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011878:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <GUI_Touch_Processing+0xe64>)
 801187a:	220c      	movs	r2, #12
 801187c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 801187e:	4a0e      	ldr	r2, [pc, #56]	; (80118b8 <GUI_Touch_Processing+0xe68>)
 8011880:	4b0e      	ldr	r3, [pc, #56]	; (80118bc <GUI_Touch_Processing+0xe6c>)
 8011882:	8812      	ldrh	r2, [r2, #0]
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	f5a2 71d5 	sub.w	r1, r2, #426	; 0x1aa
 801188a:	2936      	cmp	r1, #54	; 0x36
 801188c:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011890:	bf8c      	ite	hi
 8011892:	2100      	movhi	r1, #0
 8011894:	2101      	movls	r1, #1
 8011896:	2836      	cmp	r0, #54	; 0x36
 8011898:	d812      	bhi.n	80118c0 <GUI_Touch_Processing+0xe70>
 801189a:	b189      	cbz	r1, 80118c0 <GUI_Touch_Processing+0xe70>
					GUI_screen_state = GraphSet2_Screen;
 801189c:	230d      	movs	r3, #13
 801189e:	7023      	strb	r3, [r4, #0]
 80118a0:	f7ff b976 	b.w	8010b90 <GUI_Touch_Processing+0x140>
 80118a4:	200056f6 	.word	0x200056f6
 80118a8:	20090a69 	.word	0x20090a69
 80118ac:	2000571e 	.word	0x2000571e
 80118b0:	20090a65 	.word	0x20090a65
 80118b4:	2000022a 	.word	0x2000022a
 80118b8:	20054934 	.word	0x20054934
 80118bc:	20054932 	.word	0x20054932
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 80118c0:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 80118c4:	2836      	cmp	r0, #54	; 0x36
 80118c6:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 80118ca:	bf8c      	ite	hi
 80118cc:	2000      	movhi	r0, #0
 80118ce:	2001      	movls	r0, #1
 80118d0:	2d36      	cmp	r5, #54	; 0x36
 80118d2:	d802      	bhi.n	80118da <GUI_Touch_Processing+0xe8a>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	f47f aae7 	bne.w	8010ea8 <GUI_Touch_Processing+0x458>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 80118da:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 80118de:	2d36      	cmp	r5, #54	; 0x36
 80118e0:	d802      	bhi.n	80118e8 <GUI_Touch_Processing+0xe98>
 80118e2:	2800      	cmp	r0, #0
 80118e4:	f47f ab0c 	bne.w	8010f00 <GUI_Touch_Processing+0x4b0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //PPF_Bands
 80118e8:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 80118ec:	2836      	cmp	r0, #54	; 0x36
 80118ee:	d80c      	bhi.n	801190a <GUI_Touch_Processing+0xeba>
 80118f0:	f46f 78a3 	mvn.w	r8, #326	; 0x146
 80118f4:	eb02 0008 	add.w	r0, r2, r8
 80118f8:	2836      	cmp	r0, #54	; 0x36
 80118fa:	d806      	bhi.n	801190a <GUI_Touch_Processing+0xeba>
					Graph_Field ^= PPF_Bands;
 80118fc:	4ba6      	ldr	r3, [pc, #664]	; (8011b98 <GUI_Touch_Processing+0x1148>)
 80118fe:	781a      	ldrb	r2, [r3, #0]
 8011900:	f082 0201 	eor.w	r2, r2, #1
 8011904:	701a      	strb	r2, [r3, #0]
 8011906:	f7ff bb27 	b.w	8010f58 <GUI_Touch_Processing+0x508>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 801190a:	f1a3 00d9 	sub.w	r0, r3, #217	; 0xd9
 801190e:	2836      	cmp	r0, #54	; 0x36
 8011910:	d802      	bhi.n	8011918 <GUI_Touch_Processing+0xec8>
 8011912:	2900      	cmp	r1, #0
 8011914:	f47f aba4 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011918:	1e58      	subs	r0, r3, #1
 801191a:	2836      	cmp	r0, #54	; 0x36
 801191c:	d822      	bhi.n	8011964 <GUI_Touch_Processing+0xf14>
 801191e:	b309      	cbz	r1, 8011964 <GUI_Touch_Processing+0xf14>
					WriteSDFLASH_t(sdfile_cnt);
 8011920:	4b9e      	ldr	r3, [pc, #632]	; (8011b9c <GUI_Touch_Processing+0x114c>)
 8011922:	2100      	movs	r1, #0
 8011924:	8818      	ldrh	r0, [r3, #0]
 8011926:	f007 feb5 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801192a:	4b9d      	ldr	r3, [pc, #628]	; (8011ba0 <GUI_Touch_Processing+0x1150>)
 801192c:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801192e:	1e5a      	subs	r2, r3, #1
 8011930:	2a05      	cmp	r2, #5
 8011932:	d804      	bhi.n	801193e <GUI_Touch_Processing+0xeee>
 8011934:	e8df f002 	tbb	[pc, r2]
 8011938:	0a030306 	.word	0x0a030306
 801193c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801193e:	7023      	strb	r3, [r4, #0]
 8011940:	f7ff b926 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011944:	2301      	movs	r3, #1
 8011946:	7023      	strb	r3, [r4, #0]
 8011948:	f7ff b922 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801194c:	2304      	movs	r3, #4
 801194e:	7023      	strb	r3, [r4, #0]
 8011950:	f7ff b91e 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011954:	2306      	movs	r3, #6
 8011956:	7023      	strb	r3, [r4, #0]
 8011958:	f7ff b91a 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801195c:	2305      	movs	r3, #5
 801195e:	7023      	strb	r3, [r4, #0]
 8011960:	f7ff b916 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011964:	f1a3 0037 	sub.w	r0, r3, #55	; 0x37
 8011968:	2836      	cmp	r0, #54	; 0x36
 801196a:	d802      	bhi.n	8011972 <GUI_Touch_Processing+0xf22>
 801196c:	2900      	cmp	r1, #0
 801196e:	f47f a917 	bne.w	8010ba0 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8011972:	3b08      	subs	r3, #8
 8011974:	2bf2      	cmp	r3, #242	; 0xf2
 8011976:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
 801197a:	bf8c      	ite	hi
 801197c:	2300      	movhi	r3, #0
 801197e:	2301      	movls	r3, #1
 8011980:	2928      	cmp	r1, #40	; 0x28
 8011982:	d810      	bhi.n	80119a6 <GUI_Touch_Processing+0xf56>
 8011984:	b17b      	cbz	r3, 80119a6 <GUI_Touch_Processing+0xf56>
					if (Language_status == Ru) Language_status=En;
 8011986:	4b87      	ldr	r3, [pc, #540]	; (8011ba4 <GUI_Touch_Processing+0x1154>)
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	b923      	cbnz	r3, 8011996 <GUI_Touch_Processing+0xf46>
 801198c:	4b85      	ldr	r3, [pc, #532]	; (8011ba4 <GUI_Touch_Processing+0x1154>)
 801198e:	2201      	movs	r2, #1
 8011990:	701a      	strb	r2, [r3, #0]
 8011992:	f7ff b8fd 	b.w	8010b90 <GUI_Touch_Processing+0x140>
					else if (Language_status == En) Language_status=Ru;
 8011996:	2b01      	cmp	r3, #1
 8011998:	f47f a8fa 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
 801199c:	4b81      	ldr	r3, [pc, #516]	; (8011ba4 <GUI_Touch_Processing+0x1154>)
 801199e:	2200      	movs	r2, #0
 80119a0:	701a      	strb	r2, [r3, #0]
 80119a2:	f7ff b8f5 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 80119a6:	3a7c      	subs	r2, #124	; 0x7c
 80119a8:	2a32      	cmp	r2, #50	; 0x32
 80119aa:	f63f a8f1 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	f43f a8ee 	beq.w	8010b90 <GUI_Touch_Processing+0x140>
					GUI_screen_state = Information_Screen;
 80119b4:	2311      	movs	r3, #17
 80119b6:	7023      	strb	r3, [r4, #0]
 80119b8:	f7ff b8ea 	b.w	8010b90 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 80119bc:	4b7a      	ldr	r3, [pc, #488]	; (8011ba8 <GUI_Touch_Processing+0x1158>)
 80119be:	220d      	movs	r2, #13
 80119c0:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 80119c2:	4a7a      	ldr	r2, [pc, #488]	; (8011bac <GUI_Touch_Processing+0x115c>)
 80119c4:	4b7a      	ldr	r3, [pc, #488]	; (8011bb0 <GUI_Touch_Processing+0x1160>)
 80119c6:	8811      	ldrh	r1, [r2, #0]
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 80119ce:	2a36      	cmp	r2, #54	; 0x36
 80119d0:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 80119d4:	bf8c      	ite	hi
 80119d6:	2200      	movhi	r2, #0
 80119d8:	2201      	movls	r2, #1
 80119da:	2836      	cmp	r0, #54	; 0x36
 80119dc:	d804      	bhi.n	80119e8 <GUI_Touch_Processing+0xf98>
 80119de:	b11a      	cbz	r2, 80119e8 <GUI_Touch_Processing+0xf98>
					GUI_screen_state = GraphSet1_Screen;
 80119e0:	230c      	movs	r3, #12
 80119e2:	7023      	strb	r3, [r4, #0]
 80119e4:	f7ff b8d4 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //PPF_Bands
 80119e8:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 80119ec:	2836      	cmp	r0, #54	; 0x36
 80119ee:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 80119f2:	bf8c      	ite	hi
 80119f4:	2000      	movhi	r0, #0
 80119f6:	2001      	movls	r0, #1
 80119f8:	2d36      	cmp	r5, #54	; 0x36
 80119fa:	d807      	bhi.n	8011a0c <GUI_Touch_Processing+0xfbc>
 80119fc:	b130      	cbz	r0, 8011a0c <GUI_Touch_Processing+0xfbc>
					Graph_Field ^= EbEr_graph;
 80119fe:	4b66      	ldr	r3, [pc, #408]	; (8011b98 <GUI_Touch_Processing+0x1148>)
 8011a00:	781a      	ldrb	r2, [r3, #0]
 8011a02:	f082 0202 	eor.w	r2, r2, #2
 8011a06:	701a      	strb	r2, [r3, #0]
 8011a08:	f7ff bb62 	b.w	80110d0 <GUI_Touch_Processing+0x680>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //PPF_Bands
 8011a0c:	3985      	subs	r1, #133	; 0x85
 8011a0e:	2936      	cmp	r1, #54	; 0x36
 8011a10:	d807      	bhi.n	8011a22 <GUI_Touch_Processing+0xfd2>
 8011a12:	b130      	cbz	r0, 8011a22 <GUI_Touch_Processing+0xfd2>
					Graph_Field ^= V_lambda;
 8011a14:	4b60      	ldr	r3, [pc, #384]	; (8011b98 <GUI_Touch_Processing+0x1148>)
 8011a16:	781a      	ldrb	r2, [r3, #0]
 8011a18:	f082 0204 	eor.w	r2, r2, #4
 8011a1c:	701a      	strb	r2, [r3, #0]
 8011a1e:	f7ff bb64 	b.w	80110ea <GUI_Touch_Processing+0x69a>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011a22:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8011a26:	2936      	cmp	r1, #54	; 0x36
 8011a28:	d802      	bhi.n	8011a30 <GUI_Touch_Processing+0xfe0>
 8011a2a:	2a00      	cmp	r2, #0
 8011a2c:	f47f ab18 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011a30:	1e59      	subs	r1, r3, #1
 8011a32:	2936      	cmp	r1, #54	; 0x36
 8011a34:	f200 81aa 	bhi.w	8011d8c <GUI_Touch_Processing+0x133c>
 8011a38:	2a00      	cmp	r2, #0
 8011a3a:	f000 81a7 	beq.w	8011d8c <GUI_Touch_Processing+0x133c>
					WriteSDFLASH_t(sdfile_cnt);
 8011a3e:	4b57      	ldr	r3, [pc, #348]	; (8011b9c <GUI_Touch_Processing+0x114c>)
 8011a40:	2100      	movs	r1, #0
 8011a42:	8818      	ldrh	r0, [r3, #0]
 8011a44:	f007 fe26 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011a48:	4b55      	ldr	r3, [pc, #340]	; (8011ba0 <GUI_Touch_Processing+0x1150>)
 8011a4a:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011a4c:	1e5a      	subs	r2, r3, #1
 8011a4e:	2a05      	cmp	r2, #5
 8011a50:	d804      	bhi.n	8011a5c <GUI_Touch_Processing+0x100c>
 8011a52:	e8df f002 	tbb	[pc, r2]
 8011a56:	0306      	.short	0x0306
 8011a58:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011a5c:	7023      	strb	r3, [r4, #0]
 8011a5e:	f7ff b897 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011a62:	2301      	movs	r3, #1
 8011a64:	7023      	strb	r3, [r4, #0]
 8011a66:	f7ff b893 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011a6a:	2304      	movs	r3, #4
 8011a6c:	7023      	strb	r3, [r4, #0]
 8011a6e:	f7ff b88f 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011a72:	2306      	movs	r3, #6
 8011a74:	7023      	strb	r3, [r4, #0]
 8011a76:	f7ff b88b 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011a7a:	2305      	movs	r3, #5
 8011a7c:	7023      	strb	r3, [r4, #0]
 8011a7e:	f7ff b887 	b.w	8010b90 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011a82:	4b49      	ldr	r3, [pc, #292]	; (8011ba8 <GUI_Touch_Processing+0x1158>)
 8011a84:	220e      	movs	r2, #14
 8011a86:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011a88:	4b49      	ldr	r3, [pc, #292]	; (8011bb0 <GUI_Touch_Processing+0x1160>)
 8011a8a:	881a      	ldrh	r2, [r3, #0]
 8011a8c:	4b47      	ldr	r3, [pc, #284]	; (8011bac <GUI_Touch_Processing+0x115c>)
 8011a8e:	881b      	ldrh	r3, [r3, #0]
 8011a90:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8011a94:	2d36      	cmp	r5, #54	; 0x36
 8011a96:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011a9a:	bf8c      	ite	hi
 8011a9c:	2500      	movhi	r5, #0
 8011a9e:	2501      	movls	r5, #1
 8011aa0:	2936      	cmp	r1, #54	; 0x36
 8011aa2:	d804      	bhi.n	8011aae <GUI_Touch_Processing+0x105e>
 8011aa4:	b11d      	cbz	r5, 8011aae <GUI_Touch_Processing+0x105e>
					GUI_screen_state = ColorSet2_Screen;
 8011aa6:	230f      	movs	r3, #15
 8011aa8:	7023      	strb	r3, [r4, #0]
 8011aaa:	f7ff b871 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011aae:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 8011ab2:	2936      	cmp	r1, #54	; 0x36
 8011ab4:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 8011ab8:	bf8c      	ite	hi
 8011aba:	2100      	movhi	r1, #0
 8011abc:	2101      	movls	r1, #1
 8011abe:	2836      	cmp	r0, #54	; 0x36
 8011ac0:	d802      	bhi.n	8011ac8 <GUI_Touch_Processing+0x1078>
 8011ac2:	2900      	cmp	r1, #0
 8011ac4:	f47f a9f0 	bne.w	8010ea8 <GUI_Touch_Processing+0x458>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011ac8:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8011acc:	2836      	cmp	r0, #54	; 0x36
 8011ace:	d802      	bhi.n	8011ad6 <GUI_Touch_Processing+0x1086>
 8011ad0:	2900      	cmp	r1, #0
 8011ad2:	f47f aa15 	bne.w	8010f00 <GUI_Touch_Processing+0x4b0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8011ad6:	f1a2 0008 	sub.w	r0, r2, #8
 8011ada:	28f2      	cmp	r0, #242	; 0xf2
 8011adc:	f1a3 067c 	sub.w	r6, r3, #124	; 0x7c
 8011ae0:	bf8c      	ite	hi
 8011ae2:	2000      	movhi	r0, #0
 8011ae4:	2001      	movls	r0, #1
 8011ae6:	2e32      	cmp	r6, #50	; 0x32
 8011ae8:	d802      	bhi.n	8011af0 <GUI_Touch_Processing+0x10a0>
 8011aea:	2800      	cmp	r0, #0
 8011aec:	f47f af62 	bne.w	80119b4 <GUI_Touch_Processing+0xf64>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //Color_CIE_xy
 8011af0:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 8011af4:	eb03 060c 	add.w	r6, r3, ip
 8011af8:	2e36      	cmp	r6, #54	; 0x36
 8011afa:	d80c      	bhi.n	8011b16 <GUI_Touch_Processing+0x10c6>
 8011afc:	b159      	cbz	r1, 8011b16 <GUI_Touch_Processing+0x10c6>
					if(!(Color_Field&Color_CIE_xy))
 8011afe:	4a2d      	ldr	r2, [pc, #180]	; (8011bb4 <GUI_Touch_Processing+0x1164>)
 8011b00:	7813      	ldrb	r3, [r2, #0]
 8011b02:	07df      	lsls	r7, r3, #31
 8011b04:	f53f a844 	bmi.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 8011b08:	2301      	movs	r3, #1
 8011b0a:	7013      	strb	r3, [r2, #0]
 8011b0c:	f240 1147 	movw	r1, #327	; 0x147
 8011b10:	461a      	mov	r2, r3
 8011b12:	f7ff bbd0 	b.w	80112b6 <GUI_Touch_Processing+0x866>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011b16:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011b1a:	2936      	cmp	r1, #54	; 0x36
 8011b1c:	d802      	bhi.n	8011b24 <GUI_Touch_Processing+0x10d4>
 8011b1e:	2d00      	cmp	r5, #0
 8011b20:	f47f aa9e 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011b24:	1e51      	subs	r1, r2, #1
 8011b26:	2936      	cmp	r1, #54	; 0x36
 8011b28:	d873      	bhi.n	8011c12 <GUI_Touch_Processing+0x11c2>
 8011b2a:	2d00      	cmp	r5, #0
 8011b2c:	d071      	beq.n	8011c12 <GUI_Touch_Processing+0x11c2>
					if(preColor_Field != Color_Field)
 8011b2e:	4d21      	ldr	r5, [pc, #132]	; (8011bb4 <GUI_Touch_Processing+0x1164>)
 8011b30:	4921      	ldr	r1, [pc, #132]	; (8011bb8 <GUI_Touch_Processing+0x1168>)
 8011b32:	782b      	ldrb	r3, [r5, #0]
 8011b34:	7809      	ldrb	r1, [r1, #0]
 8011b36:	4299      	cmp	r1, r3
 8011b38:	d01f      	beq.n	8011b7a <GUI_Touch_Processing+0x112a>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011b3a:	07de      	lsls	r6, r3, #31
 8011b3c:	d546      	bpl.n	8011bcc <GUI_Touch_Processing+0x117c>
 8011b3e:	4b1f      	ldr	r3, [pc, #124]	; (8011bbc <GUI_Touch_Processing+0x116c>)
 8011b40:	481f      	ldr	r0, [pc, #124]	; (8011bc0 <GUI_Touch_Processing+0x1170>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	f013 0f01 	tst.w	r3, #1
 8011b48:	bf18      	it	ne
 8011b4a:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8011b4e:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8011b52:	f007 fc99 	bl	8019488 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 8011b56:	4b1b      	ldr	r3, [pc, #108]	; (8011bc4 <GUI_Touch_Processing+0x1174>)
 8011b58:	4a1b      	ldr	r2, [pc, #108]	; (8011bc8 <GUI_Touch_Processing+0x1178>)
 8011b5a:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8011b5c:	782a      	ldrb	r2, [r5, #0]
 8011b5e:	f002 0101 	and.w	r1, r2, #1
 8011b62:	2900      	cmp	r1, #0
 8011b64:	bf0c      	ite	eq
 8011b66:	21fa      	moveq	r1, #250	; 0xfa
 8011b68:	21d8      	movne	r1, #216	; 0xd8
 8011b6a:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011b6c:	d13c      	bne.n	8011be8 <GUI_Touch_Processing+0x1198>
 8011b6e:	f012 0f04 	tst.w	r2, #4
 8011b72:	bf0c      	ite	eq
 8011b74:	22fa      	moveq	r2, #250	; 0xfa
 8011b76:	22ea      	movne	r2, #234	; 0xea
 8011b78:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8011b7a:	4b08      	ldr	r3, [pc, #32]	; (8011b9c <GUI_Touch_Processing+0x114c>)
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	8818      	ldrh	r0, [r3, #0]
 8011b80:	f007 fd88 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011b84:	4b06      	ldr	r3, [pc, #24]	; (8011ba0 <GUI_Touch_Processing+0x1150>)
 8011b86:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011b88:	1e5a      	subs	r2, r3, #1
 8011b8a:	2a05      	cmp	r2, #5
 8011b8c:	d82e      	bhi.n	8011bec <GUI_Touch_Processing+0x119c>
 8011b8e:	e8df f002 	tbb	[pc, r2]
 8011b92:	2d30      	.short	0x2d30
 8011b94:	383c342d 	.word	0x383c342d
 8011b98:	200056f2 	.word	0x200056f2
 8011b9c:	2000571e 	.word	0x2000571e
 8011ba0:	20090a65 	.word	0x20090a65
 8011ba4:	200056f3 	.word	0x200056f3
 8011ba8:	2000022a 	.word	0x2000022a
 8011bac:	20054934 	.word	0x20054934
 8011bb0:	20054932 	.word	0x20054932
 8011bb4:	200056ef 	.word	0x200056ef
 8011bb8:	20005719 	.word	0x20005719
 8011bbc:	200056f4 	.word	0x200056f4
 8011bc0:	00051d00 	.word	0x00051d00
 8011bc4:	20091000 	.word	0x20091000
 8011bc8:	20055942 	.word	0x20055942
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011bcc:	f003 0304 	and.w	r3, r3, #4
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	4ba9      	ldr	r3, [pc, #676]	; (8011e78 <GUI_Touch_Processing+0x1428>)
 8011bd4:	48a9      	ldr	r0, [pc, #676]	; (8011e7c <GUI_Touch_Processing+0x142c>)
 8011bd6:	bf18      	it	ne
 8011bd8:	4618      	movne	r0, r3
 8011bda:	f24e 4384 	movw	r3, #58500	; 0xe484
 8011bde:	f24f 4124 	movw	r1, #62500	; 0xf424
 8011be2:	bf18      	it	ne
 8011be4:	4619      	movne	r1, r3
 8011be6:	e7b4      	b.n	8011b52 <GUI_Touch_Processing+0x1102>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011be8:	22fa      	movs	r2, #250	; 0xfa
 8011bea:	e7c5      	b.n	8011b78 <GUI_Touch_Processing+0x1128>
					GUI_screen_state = Prev_Inf_Screen;
 8011bec:	7023      	strb	r3, [r4, #0]
 8011bee:	f7fe bfcf 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	7023      	strb	r3, [r4, #0]
 8011bf6:	f7fe bfcb 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011bfa:	2304      	movs	r3, #4
 8011bfc:	7023      	strb	r3, [r4, #0]
 8011bfe:	f7fe bfc7 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011c02:	2306      	movs	r3, #6
 8011c04:	7023      	strb	r3, [r4, #0]
 8011c06:	f7fe bfc3 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011c0a:	2305      	movs	r3, #5
 8011c0c:	7023      	strb	r3, [r4, #0]
 8011c0e:	f7fe bfbf 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011c12:	3a37      	subs	r2, #55	; 0x37
 8011c14:	2a36      	cmp	r2, #54	; 0x36
 8011c16:	d802      	bhi.n	8011c1e <GUI_Touch_Processing+0x11ce>
 8011c18:	2d00      	cmp	r5, #0
 8011c1a:	f47e afc1 	bne.w	8010ba0 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8011c1e:	3b50      	subs	r3, #80	; 0x50
 8011c20:	2b28      	cmp	r3, #40	; 0x28
 8011c22:	f63e afb5 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f47f aead 	bne.w	8011986 <GUI_Touch_Processing+0xf36>
 8011c2c:	f7fe bfb0 	b.w	8010b90 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011c30:	4b93      	ldr	r3, [pc, #588]	; (8011e80 <GUI_Touch_Processing+0x1430>)
 8011c32:	220f      	movs	r2, #15
 8011c34:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011c36:	4a93      	ldr	r2, [pc, #588]	; (8011e84 <GUI_Touch_Processing+0x1434>)
 8011c38:	4b93      	ldr	r3, [pc, #588]	; (8011e88 <GUI_Touch_Processing+0x1438>)
 8011c3a:	8811      	ldrh	r1, [r2, #0]
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011c42:	2a36      	cmp	r2, #54	; 0x36
 8011c44:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011c48:	bf8c      	ite	hi
 8011c4a:	2200      	movhi	r2, #0
 8011c4c:	2201      	movls	r2, #1
 8011c4e:	2836      	cmp	r0, #54	; 0x36
 8011c50:	d804      	bhi.n	8011c5c <GUI_Touch_Processing+0x120c>
 8011c52:	b11a      	cbz	r2, 8011c5c <GUI_Touch_Processing+0x120c>
					GUI_screen_state = ColorSet1_Screen;
 8011c54:	230e      	movs	r3, #14
 8011c56:	7023      	strb	r3, [r4, #0]
 8011c58:	f7fe bf9a 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //Color_CIE_Luv
 8011c5c:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8011c60:	2836      	cmp	r0, #54	; 0x36
 8011c62:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8011c66:	bf8c      	ite	hi
 8011c68:	2000      	movhi	r0, #0
 8011c6a:	2001      	movls	r0, #1
 8011c6c:	2d36      	cmp	r5, #54	; 0x36
 8011c6e:	d813      	bhi.n	8011c98 <GUI_Touch_Processing+0x1248>
 8011c70:	b190      	cbz	r0, 8011c98 <GUI_Touch_Processing+0x1248>
					if(!(Color_Field&Color_CIE_Luv))
 8011c72:	4c86      	ldr	r4, [pc, #536]	; (8011e8c <GUI_Touch_Processing+0x143c>)
 8011c74:	7823      	ldrb	r3, [r4, #0]
 8011c76:	075d      	lsls	r5, r3, #29
 8011c78:	f53e af8a 	bmi.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 8011c7c:	2204      	movs	r2, #4
 8011c7e:	2301      	movs	r3, #1
 8011c80:	2146      	movs	r1, #70	; 0x46
 8011c82:	20c8      	movs	r0, #200	; 0xc8
 8011c84:	7022      	strb	r2, [r4, #0]
 8011c86:	f000 ff66 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8011c8a:	7822      	ldrb	r2, [r4, #0]
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	f002 0202 	and.w	r2, r2, #2
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8011c92:	2185      	movs	r1, #133	; 0x85
 8011c94:	f7ff bb0f 	b.w	80112b6 <GUI_Touch_Processing+0x866>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //Color_CIE_Lab
 8011c98:	3985      	subs	r1, #133	; 0x85
 8011c9a:	2936      	cmp	r1, #54	; 0x36
 8011c9c:	d812      	bhi.n	8011cc4 <GUI_Touch_Processing+0x1274>
 8011c9e:	b188      	cbz	r0, 8011cc4 <GUI_Touch_Processing+0x1274>
					if(!(Color_Field&Color_CIE_Lab))
 8011ca0:	4c7a      	ldr	r4, [pc, #488]	; (8011e8c <GUI_Touch_Processing+0x143c>)
 8011ca2:	7822      	ldrb	r2, [r4, #0]
 8011ca4:	f012 0202 	ands.w	r2, r2, #2
 8011ca8:	f47e af72 	bne.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8011cac:	2301      	movs	r3, #1
 8011cae:	2146      	movs	r1, #70	; 0x46
 8011cb0:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 8011cb2:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8011cb4:	f000 ff4f 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8011cb8:	7822      	ldrb	r2, [r4, #0]
 8011cba:	f042 0202 	orr.w	r2, r2, #2
 8011cbe:	7022      	strb	r2, [r4, #0]
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e7e6      	b.n	8011c92 <GUI_Touch_Processing+0x1242>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011cc4:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8011cc8:	2936      	cmp	r1, #54	; 0x36
 8011cca:	d802      	bhi.n	8011cd2 <GUI_Touch_Processing+0x1282>
 8011ccc:	2a00      	cmp	r2, #0
 8011cce:	f47f a9c7 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011cd2:	1e59      	subs	r1, r3, #1
 8011cd4:	2936      	cmp	r1, #54	; 0x36
 8011cd6:	d859      	bhi.n	8011d8c <GUI_Touch_Processing+0x133c>
 8011cd8:	2a00      	cmp	r2, #0
 8011cda:	d057      	beq.n	8011d8c <GUI_Touch_Processing+0x133c>
					if(preColor_Field != Color_Field)
 8011cdc:	4d6b      	ldr	r5, [pc, #428]	; (8011e8c <GUI_Touch_Processing+0x143c>)
 8011cde:	496c      	ldr	r1, [pc, #432]	; (8011e90 <GUI_Touch_Processing+0x1440>)
 8011ce0:	782b      	ldrb	r3, [r5, #0]
 8011ce2:	7809      	ldrb	r1, [r1, #0]
 8011ce4:	4299      	cmp	r1, r3
 8011ce6:	d01f      	beq.n	8011d28 <GUI_Touch_Processing+0x12d8>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011ce8:	07d8      	lsls	r0, r3, #31
 8011cea:	d52c      	bpl.n	8011d46 <GUI_Touch_Processing+0x12f6>
 8011cec:	4b69      	ldr	r3, [pc, #420]	; (8011e94 <GUI_Touch_Processing+0x1444>)
 8011cee:	486a      	ldr	r0, [pc, #424]	; (8011e98 <GUI_Touch_Processing+0x1448>)
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	f013 0f01 	tst.w	r3, #1
 8011cf6:	bf18      	it	ne
 8011cf8:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8011cfc:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8011d00:	f007 fbc2 	bl	8019488 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 8011d04:	4b65      	ldr	r3, [pc, #404]	; (8011e9c <GUI_Touch_Processing+0x144c>)
 8011d06:	4a66      	ldr	r2, [pc, #408]	; (8011ea0 <GUI_Touch_Processing+0x1450>)
 8011d08:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8011d0a:	782a      	ldrb	r2, [r5, #0]
 8011d0c:	f002 0101 	and.w	r1, r2, #1
 8011d10:	2900      	cmp	r1, #0
 8011d12:	bf0c      	ite	eq
 8011d14:	21fa      	moveq	r1, #250	; 0xfa
 8011d16:	21d8      	movne	r1, #216	; 0xd8
 8011d18:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011d1a:	d122      	bne.n	8011d62 <GUI_Touch_Processing+0x1312>
 8011d1c:	f012 0f04 	tst.w	r2, #4
 8011d20:	bf0c      	ite	eq
 8011d22:	22fa      	moveq	r2, #250	; 0xfa
 8011d24:	22ea      	movne	r2, #234	; 0xea
 8011d26:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8011d28:	4b5e      	ldr	r3, [pc, #376]	; (8011ea4 <GUI_Touch_Processing+0x1454>)
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	8818      	ldrh	r0, [r3, #0]
 8011d2e:	f007 fcb1 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011d32:	4b5d      	ldr	r3, [pc, #372]	; (8011ea8 <GUI_Touch_Processing+0x1458>)
 8011d34:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011d36:	1e5a      	subs	r2, r3, #1
 8011d38:	2a05      	cmp	r2, #5
 8011d3a:	d814      	bhi.n	8011d66 <GUI_Touch_Processing+0x1316>
 8011d3c:	e8df f002 	tbb	[pc, r2]
 8011d40:	1a131316 	.word	0x1a131316
 8011d44:	1e22      	.short	0x1e22
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011d46:	f003 0304 	and.w	r3, r3, #4
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	4b4a      	ldr	r3, [pc, #296]	; (8011e78 <GUI_Touch_Processing+0x1428>)
 8011d4e:	484b      	ldr	r0, [pc, #300]	; (8011e7c <GUI_Touch_Processing+0x142c>)
 8011d50:	bf18      	it	ne
 8011d52:	4618      	movne	r0, r3
 8011d54:	f24e 4384 	movw	r3, #58500	; 0xe484
 8011d58:	f24f 4124 	movw	r1, #62500	; 0xf424
 8011d5c:	bf18      	it	ne
 8011d5e:	4619      	movne	r1, r3
 8011d60:	e7ce      	b.n	8011d00 <GUI_Touch_Processing+0x12b0>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011d62:	22fa      	movs	r2, #250	; 0xfa
 8011d64:	e7df      	b.n	8011d26 <GUI_Touch_Processing+0x12d6>
					GUI_screen_state = Prev_Inf_Screen;
 8011d66:	7023      	strb	r3, [r4, #0]
 8011d68:	f7fe bf12 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	7023      	strb	r3, [r4, #0]
 8011d70:	f7fe bf0e 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011d74:	2304      	movs	r3, #4
 8011d76:	7023      	strb	r3, [r4, #0]
 8011d78:	f7fe bf0a 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011d7c:	2306      	movs	r3, #6
 8011d7e:	7023      	strb	r3, [r4, #0]
 8011d80:	f7fe bf06 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011d84:	2305      	movs	r3, #5
 8011d86:	7023      	strb	r3, [r4, #0]
 8011d88:	f7fe bf02 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011d8c:	3b37      	subs	r3, #55	; 0x37
 8011d8e:	2b36      	cmp	r3, #54	; 0x36
 8011d90:	f63e aefe 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8011d94:	2a00      	cmp	r2, #0
 8011d96:	f47e af03 	bne.w	8010ba0 <GUI_Touch_Processing+0x150>
 8011d9a:	f7fe bef9 	b.w	8010b90 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011d9e:	4b38      	ldr	r3, [pc, #224]	; (8011e80 <GUI_Touch_Processing+0x1430>)
 8011da0:	2210      	movs	r2, #16
 8011da2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) )//next
 8011da4:	4b38      	ldr	r3, [pc, #224]	; (8011e88 <GUI_Touch_Processing+0x1438>)
 8011da6:	881a      	ldrh	r2, [r3, #0]
 8011da8:	4b36      	ldr	r3, [pc, #216]	; (8011e84 <GUI_Touch_Processing+0x1434>)
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8011db0:	2d36      	cmp	r5, #54	; 0x36
 8011db2:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011db6:	bf8c      	ite	hi
 8011db8:	2500      	movhi	r5, #0
 8011dba:	2501      	movls	r5, #1
 8011dbc:	2936      	cmp	r1, #54	; 0x36
 8011dbe:	d809      	bhi.n	8011dd4 <GUI_Touch_Processing+0x1384>
 8011dc0:	b145      	cbz	r5, 8011dd4 <GUI_Touch_Processing+0x1384>
					WriteSDFLASH_t(sdfile_cnt);
 8011dc2:	4b38      	ldr	r3, [pc, #224]	; (8011ea4 <GUI_Touch_Processing+0x1454>)
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	8818      	ldrh	r0, [r3, #0]
 8011dc8:	f007 fc64 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 8011dcc:	2306      	movs	r3, #6
 8011dce:	7023      	strb	r3, [r4, #0]
 8011dd0:	f7fe bede 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011dd4:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 8011dd8:	2936      	cmp	r1, #54	; 0x36
 8011dda:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 8011dde:	bf8c      	ite	hi
 8011de0:	2100      	movhi	r1, #0
 8011de2:	2101      	movls	r1, #1
 8011de4:	2836      	cmp	r0, #54	; 0x36
 8011de6:	d802      	bhi.n	8011dee <GUI_Touch_Processing+0x139e>
 8011de8:	2900      	cmp	r1, #0
 8011dea:	f47f a85d 	bne.w	8010ea8 <GUI_Touch_Processing+0x458>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011dee:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8011df2:	2836      	cmp	r0, #54	; 0x36
 8011df4:	d802      	bhi.n	8011dfc <GUI_Touch_Processing+0x13ac>
 8011df6:	2900      	cmp	r1, #0
 8011df8:	f47f a882 	bne.w	8010f00 <GUI_Touch_Processing+0x4b0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8011dfc:	f1a2 0108 	sub.w	r1, r2, #8
 8011e00:	29f2      	cmp	r1, #242	; 0xf2
 8011e02:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8011e06:	bf8c      	ite	hi
 8011e08:	2100      	movhi	r1, #0
 8011e0a:	2101      	movls	r1, #1
 8011e0c:	2832      	cmp	r0, #50	; 0x32
 8011e0e:	d802      	bhi.n	8011e16 <GUI_Touch_Processing+0x13c6>
 8011e10:	2900      	cmp	r1, #0
 8011e12:	f47f adcf 	bne.w	80119b4 <GUI_Touch_Processing+0xf64>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=318  & Touch_y <=(318+54) ) //CRI
 8011e16:	f1a2 00b9 	sub.w	r0, r2, #185	; 0xb9
 8011e1a:	2836      	cmp	r0, #54	; 0x36
 8011e1c:	f5a3 769f 	sub.w	r6, r3, #318	; 0x13e
 8011e20:	bf8c      	ite	hi
 8011e22:	2000      	movhi	r0, #0
 8011e24:	2001      	movls	r0, #1
 8011e26:	2e36      	cmp	r6, #54	; 0x36
 8011e28:	d81b      	bhi.n	8011e62 <GUI_Touch_Processing+0x1412>
 8011e2a:	b1d0      	cbz	r0, 8011e62 <GUI_Touch_Processing+0x1412>
					if(!(Color_rend_Field & CRI_CQS)){
 8011e2c:	4c1f      	ldr	r4, [pc, #124]	; (8011eac <GUI_Touch_Processing+0x145c>)
 8011e2e:	7822      	ldrb	r2, [r4, #0]
 8011e30:	07d1      	lsls	r1, r2, #31
 8011e32:	f53e aead 	bmi.w	8010b90 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8011e36:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 8011e38:	f082 0201 	eor.w	r2, r2, #1
 8011e3c:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8011e3e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8011e42:	401a      	ands	r2, r3
 8011e44:	20b9      	movs	r0, #185	; 0xb9
 8011e46:	f000 fe86 	bl	8012b56 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8011e4a:	7822      	ldrb	r2, [r4, #0]
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	43d2      	mvns	r2, r2
 8011e50:	401a      	ands	r2, r3
 8011e52:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8011e56:	20b9      	movs	r0, #185	; 0xb9
 8011e58:	f7ff ba2e 	b.w	80112b8 <GUI_Touch_Processing+0x868>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011e5c:	4a14      	ldr	r2, [pc, #80]	; (8011eb0 <GUI_Touch_Processing+0x1460>)
 8011e5e:	f7ff b839 	b.w	8010ed4 <GUI_Touch_Processing+0x484>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=362  & Touch_y <=(362+54) ) //CQS
 8011e62:	f5a3 76b5 	sub.w	r6, r3, #362	; 0x16a
 8011e66:	2e36      	cmp	r6, #54	; 0x36
 8011e68:	d824      	bhi.n	8011eb4 <GUI_Touch_Processing+0x1464>
 8011e6a:	b318      	cbz	r0, 8011eb4 <GUI_Touch_Processing+0x1464>
					if((Color_rend_Field&CRI_CQS)){
 8011e6c:	4c0f      	ldr	r4, [pc, #60]	; (8011eac <GUI_Touch_Processing+0x145c>)
 8011e6e:	7822      	ldrb	r2, [r4, #0]
 8011e70:	07d3      	lsls	r3, r2, #31
 8011e72:	f57e ae8d 	bpl.w	8010b90 <GUI_Touch_Processing+0x140>
 8011e76:	e7de      	b.n	8011e36 <GUI_Touch_Processing+0x13e6>
 8011e78:	0006ca00 	.word	0x0006ca00
 8011e7c:	00018100 	.word	0x00018100
 8011e80:	2000022a 	.word	0x2000022a
 8011e84:	20054934 	.word	0x20054934
 8011e88:	20054932 	.word	0x20054932
 8011e8c:	200056ef 	.word	0x200056ef
 8011e90:	20005719 	.word	0x20005719
 8011e94:	200056f4 	.word	0x200056f4
 8011e98:	00051d00 	.word	0x00051d00
 8011e9c:	20091000 	.word	0x20091000
 8011ea0:	20055942 	.word	0x20055942
 8011ea4:	2000571e 	.word	0x2000571e
 8011ea8:	20090a65 	.word	0x20090a65
 8011eac:	200056f0 	.word	0x200056f0
 8011eb0:	20009d14 	.word	0x20009d14
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011eb4:	f1a2 00d9 	sub.w	r0, r2, #217	; 0xd9
 8011eb8:	2836      	cmp	r0, #54	; 0x36
 8011eba:	d802      	bhi.n	8011ec2 <GUI_Touch_Processing+0x1472>
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	f47f a8cf 	bne.w	8011060 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011ec2:	1e50      	subs	r0, r2, #1
 8011ec4:	2836      	cmp	r0, #54	; 0x36
 8011ec6:	d822      	bhi.n	8011f0e <GUI_Touch_Processing+0x14be>
 8011ec8:	b30d      	cbz	r5, 8011f0e <GUI_Touch_Processing+0x14be>
					WriteSDFLASH_t(sdfile_cnt);
 8011eca:	4b42      	ldr	r3, [pc, #264]	; (8011fd4 <GUI_Touch_Processing+0x1584>)
 8011ecc:	2100      	movs	r1, #0
 8011ece:	8818      	ldrh	r0, [r3, #0]
 8011ed0:	f007 fbe0 	bl	8019694 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011ed4:	4b40      	ldr	r3, [pc, #256]	; (8011fd8 <GUI_Touch_Processing+0x1588>)
 8011ed6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011ed8:	1e5a      	subs	r2, r3, #1
 8011eda:	2a05      	cmp	r2, #5
 8011edc:	d804      	bhi.n	8011ee8 <GUI_Touch_Processing+0x1498>
 8011ede:	e8df f002 	tbb	[pc, r2]
 8011ee2:	0306      	.short	0x0306
 8011ee4:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011ee8:	7023      	strb	r3, [r4, #0]
 8011eea:	f7fe be51 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	7023      	strb	r3, [r4, #0]
 8011ef2:	f7fe be4d 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011ef6:	2304      	movs	r3, #4
 8011ef8:	7023      	strb	r3, [r4, #0]
 8011efa:	f7fe be49 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011efe:	2306      	movs	r3, #6
 8011f00:	7023      	strb	r3, [r4, #0]
 8011f02:	f7fe be45 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011f06:	2305      	movs	r3, #5
 8011f08:	7023      	strb	r3, [r4, #0]
 8011f0a:	f7fe be41 	b.w	8010b90 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011f0e:	3a37      	subs	r2, #55	; 0x37
 8011f10:	2a36      	cmp	r2, #54	; 0x36
 8011f12:	d802      	bhi.n	8011f1a <GUI_Touch_Processing+0x14ca>
 8011f14:	2d00      	cmp	r5, #0
 8011f16:	f47e ae43 	bne.w	8010ba0 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8011f1a:	3b50      	subs	r3, #80	; 0x50
 8011f1c:	2b28      	cmp	r3, #40	; 0x28
 8011f1e:	f63e ae37 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8011f22:	2900      	cmp	r1, #0
 8011f24:	f47f ad2f 	bne.w	8011986 <GUI_Touch_Processing+0xf36>
 8011f28:	f7fe be32 	b.w	8010b90 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 8  & Touch_x <= (270)  & Touch_y >=8  & Touch_y <=(470) ) // Information
 8011f2c:	4b2b      	ldr	r3, [pc, #172]	; (8011fdc <GUI_Touch_Processing+0x158c>)
 8011f2e:	881b      	ldrh	r3, [r3, #0]
 8011f30:	3b08      	subs	r3, #8
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8011f38:	f63e ae2a 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8011f3c:	4b28      	ldr	r3, [pc, #160]	; (8011fe0 <GUI_Touch_Processing+0x1590>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	3b08      	subs	r3, #8
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	f5b3 7fe7 	cmp.w	r3, #462	; 0x1ce
 8011f48:	f63e ae22 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
					GUI_screen_state = preGUI_screen_state;
 8011f4c:	4b25      	ldr	r3, [pc, #148]	; (8011fe4 <GUI_Touch_Processing+0x1594>)
 8011f4e:	781a      	ldrb	r2, [r3, #0]
 8011f50:	7022      	strb	r2, [r4, #0]
					preGUI_screen_state = Information_Screen;
 8011f52:	2211      	movs	r2, #17
 8011f54:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 8011f56:	4b24      	ldr	r3, [pc, #144]	; (8011fe8 <GUI_Touch_Processing+0x1598>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	3b07      	subs	r3, #7
 8011f5c:	2b09      	cmp	r3, #9
 8011f5e:	f63e ae17 	bhi.w	8010b90 <GUI_Touch_Processing+0x140>
 8011f62:	a201      	add	r2, pc, #4	; (adr r2, 8011f68 <GUI_Touch_Processing+0x1518>)
 8011f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f68:	08011f91 	.word	0x08011f91
 8011f6c:	08010b91 	.word	0x08010b91
 8011f70:	08010b91 	.word	0x08010b91
 8011f74:	08010b91 	.word	0x08010b91
 8011f78:	08010b91 	.word	0x08010b91
 8011f7c:	08011f9f 	.word	0x08011f9f
 8011f80:	08010b91 	.word	0x08010b91
 8011f84:	08011fad 	.word	0x08011fad
 8011f88:	08010b91 	.word	0x08010b91
 8011f8c:	08011fbb 	.word	0x08011fbb
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 8011f90:	2307      	movs	r3, #7
 8011f92:	7023      	strb	r3, [r4, #0]
 8011f94:	4b10      	ldr	r3, [pc, #64]	; (8011fd8 <GUI_Touch_Processing+0x1588>)
 8011f96:	2201      	movs	r2, #1
 8011f98:	701a      	strb	r2, [r3, #0]
 8011f9a:	f7fe bdf9 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 8011f9e:	230c      	movs	r3, #12
 8011fa0:	7023      	strb	r3, [r4, #0]
 8011fa2:	4b0d      	ldr	r3, [pc, #52]	; (8011fd8 <GUI_Touch_Processing+0x1588>)
 8011fa4:	2204      	movs	r2, #4
 8011fa6:	701a      	strb	r2, [r3, #0]
 8011fa8:	f7fe bdf2 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 8011fac:	230e      	movs	r3, #14
 8011fae:	7023      	strb	r3, [r4, #0]
 8011fb0:	4b09      	ldr	r3, [pc, #36]	; (8011fd8 <GUI_Touch_Processing+0x1588>)
 8011fb2:	2205      	movs	r2, #5
 8011fb4:	701a      	strb	r2, [r3, #0]
 8011fb6:	f7fe bdeb 	b.w	8010b90 <GUI_Touch_Processing+0x140>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 8011fba:	2310      	movs	r3, #16
 8011fbc:	7023      	strb	r3, [r4, #0]
 8011fbe:	4b06      	ldr	r3, [pc, #24]	; (8011fd8 <GUI_Touch_Processing+0x1588>)
 8011fc0:	2206      	movs	r2, #6
 8011fc2:	701a      	strb	r2, [r3, #0]
 8011fc4:	f7fe bde4 	b.w	8010b90 <GUI_Touch_Processing+0x140>
		default: preGUI_screen_state = Measure_Screen;
 8011fc8:	4b06      	ldr	r3, [pc, #24]	; (8011fe4 <GUI_Touch_Processing+0x1594>)
 8011fca:	2201      	movs	r2, #1
 8011fcc:	701a      	strb	r2, [r3, #0]
}
 8011fce:	f7fe bddf 	b.w	8010b90 <GUI_Touch_Processing+0x140>
 8011fd2:	bf00      	nop
 8011fd4:	2000571e 	.word	0x2000571e
 8011fd8:	20090a65 	.word	0x20090a65
 8011fdc:	20054932 	.word	0x20054932
 8011fe0:	20054934 	.word	0x20054934
 8011fe4:	2000022a 	.word	0x2000022a
 8011fe8:	20091008 	.word	0x20091008

08011fec <GUI_Bluetooth_Logo>:
//extern UART_HandleTypeDef hlpuart1;
extern UART_HandleTypeDef huart3;
extern uint8_t BluetoothStat;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 8011fec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8011ff0:	f101 031e 	add.w	r3, r1, #30
{
 8011ff4:	460c      	mov	r4, r1
 8011ff6:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8011ff8:	f100 0214 	add.w	r2, r0, #20
 8011ffc:	2605      	movs	r6, #5
 8011ffe:	f241 3776 	movw	r7, #4982	; 0x1376
 8012002:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8012006:	b29b      	uxth	r3, r3
 8012008:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 801200a:	f105 060a 	add.w	r6, r5, #10
 801200e:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8012012:	f00a f885 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8012016:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801201a:	b2b6      	uxth	r6, r6
 801201c:	fa1f fa8a 	uxth.w	sl, sl
 8012020:	1d21      	adds	r1, r4, #4
 8012022:	4653      	mov	r3, sl
 8012024:	4632      	mov	r2, r6
 8012026:	4630      	mov	r0, r6
 8012028:	f8cd 8000 	str.w	r8, [sp]
 801202c:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801202e:	f105 070f 	add.w	r7, r5, #15
 8012032:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8012036:	f009 fe91 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801203a:	b2bf      	uxth	r7, r7
 801203c:	fa1f f989 	uxth.w	r9, r9
 8012040:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 8012042:	3506      	adds	r5, #6
 8012044:	3414      	adds	r4, #20
 8012046:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8012048:	464b      	mov	r3, r9
 801204a:	463a      	mov	r2, r7
 801204c:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801204e:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8012050:	f8cd 8000 	str.w	r8, [sp]
 8012054:	b289      	uxth	r1, r1
 8012056:	f009 fe81 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801205a:	464b      	mov	r3, r9
 801205c:	463a      	mov	r2, r7
 801205e:	4621      	mov	r1, r4
 8012060:	4628      	mov	r0, r5
 8012062:	f8cd 8000 	str.w	r8, [sp]
 8012066:	f009 fe79 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 801206a:	4623      	mov	r3, r4
 801206c:	463a      	mov	r2, r7
 801206e:	4649      	mov	r1, r9
 8012070:	4628      	mov	r0, r5
 8012072:	f8cd 8000 	str.w	r8, [sp]
 8012076:	f009 fe71 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 801207a:	f8cd 8000 	str.w	r8, [sp]
 801207e:	4623      	mov	r3, r4
 8012080:	463a      	mov	r2, r7
 8012082:	4651      	mov	r1, sl
 8012084:	4630      	mov	r0, r6
 8012086:	f009 fe69 	bl	801bd5c <TFT_DrawLine>
}
 801208a:	b002      	add	sp, #8
 801208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012090 <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 8012090:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012094:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012098:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801209a:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801209e:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80120a2:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80120a4:	9600      	str	r6, [sp, #0]
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 80120aa:	f105 0608 	add.w	r6, r5, #8
 80120ae:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80120b0:	f009 feb1 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 80120b4:	b2b6      	uxth	r6, r6
 80120b6:	b2ad      	uxth	r5, r5
 80120b8:	2702      	movs	r7, #2
 80120ba:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80120be:	f104 0313 	add.w	r3, r4, #19
 80120c2:	f104 010d 	add.w	r1, r4, #13
 80120c6:	462a      	mov	r2, r5
 80120c8:	4630      	mov	r0, r6
 80120ca:	e88d 0180 	stmia.w	sp, {r7, r8}
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	b289      	uxth	r1, r1
 80120d2:	f00a f825 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 80120d6:	f104 031f 	add.w	r3, r4, #31
 80120da:	f104 0119 	add.w	r1, r4, #25
 80120de:	462a      	mov	r2, r5
 80120e0:	4630      	mov	r0, r6
 80120e2:	e88d 0180 	stmia.w	sp, {r7, r8}
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	b289      	uxth	r1, r1
 80120ea:	f00a f819 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 80120ee:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 80120f2:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80120f6:	e88d 0180 	stmia.w	sp, {r7, r8}
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	462a      	mov	r2, r5
 80120fe:	b289      	uxth	r1, r1
 8012100:	4630      	mov	r0, r6
 8012102:	f00a f80d 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
}
 8012106:	b002      	add	sp, #8
 8012108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801210c <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 801210c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012110:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012114:	4604      	mov	r4, r0
 8012116:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012118:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801211c:	f241 3676 	movw	r6, #4982	; 0x1376
 8012120:	9600      	str	r6, [sp, #0]
 8012122:	b29b      	uxth	r3, r3
 8012124:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012126:	f105 0612 	add.w	r6, r5, #18
 801212a:	f104 081c 	add.w	r8, r4, #28
 801212e:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012130:	f009 fe71 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012134:	b2b6      	uxth	r6, r6
 8012136:	b2ad      	uxth	r5, r5
 8012138:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801213c:	fa1f f888 	uxth.w	r8, r8
 8012140:	f104 000c 	add.w	r0, r4, #12
 8012144:	462b      	mov	r3, r5
 8012146:	4642      	mov	r2, r8
 8012148:	4631      	mov	r1, r6
 801214a:	9700      	str	r7, [sp, #0]
 801214c:	b280      	uxth	r0, r0
 801214e:	f009 fe05 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8012152:	f104 021d 	add.w	r2, r4, #29
 8012156:	f104 000d 	add.w	r0, r4, #13
 801215a:	462b      	mov	r3, r5
 801215c:	4631      	mov	r1, r6
 801215e:	9700      	str	r7, [sp, #0]
 8012160:	b292      	uxth	r2, r2
 8012162:	b280      	uxth	r0, r0
 8012164:	f009 fdfa 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8012168:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 801216c:	462b      	mov	r3, r5
 801216e:	4642      	mov	r2, r8
 8012170:	4631      	mov	r1, r6
 8012172:	9700      	str	r7, [sp, #0]
 8012174:	b280      	uxth	r0, r0
 8012176:	f009 fdf1 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 801217a:	f104 021b 	add.w	r2, r4, #27
 801217e:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012182:	9700      	str	r7, [sp, #0]
 8012184:	462b      	mov	r3, r5
 8012186:	b292      	uxth	r2, r2
 8012188:	4631      	mov	r1, r6
 801218a:	b280      	uxth	r0, r0
 801218c:	f009 fde6 	bl	801bd5c <TFT_DrawLine>
}
 8012190:	b002      	add	sp, #8
 8012192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012196 <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 8012196:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801219a:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801219e:	4604      	mov	r4, r0
 80121a0:	460d      	mov	r5, r1
 80121a2:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 80121a6:	2a00      	cmp	r2, #0
 80121a8:	d03c      	beq.n	8012224 <GUI_Button_Down_Active+0x8e>
 80121aa:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80121ae:	9200      	str	r2, [sp, #0]
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80121b4:	f104 081c 	add.w	r8, r4, #28
 80121b8:	f105 0612 	add.w	r6, r5, #18
 80121bc:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80121be:	f009 fe2a 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80121c2:	b2b6      	uxth	r6, r6
 80121c4:	b2ad      	uxth	r5, r5
 80121c6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80121ca:	fa1f f888 	uxth.w	r8, r8
 80121ce:	f104 000c 	add.w	r0, r4, #12
 80121d2:	462b      	mov	r3, r5
 80121d4:	4642      	mov	r2, r8
 80121d6:	4631      	mov	r1, r6
 80121d8:	9700      	str	r7, [sp, #0]
 80121da:	b280      	uxth	r0, r0
 80121dc:	f009 fdbe 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 80121e0:	f104 021d 	add.w	r2, r4, #29
 80121e4:	f104 000d 	add.w	r0, r4, #13
 80121e8:	462b      	mov	r3, r5
 80121ea:	4631      	mov	r1, r6
 80121ec:	9700      	str	r7, [sp, #0]
 80121ee:	b292      	uxth	r2, r2
 80121f0:	b280      	uxth	r0, r0
 80121f2:	f009 fdb3 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 80121f6:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80121fa:	462b      	mov	r3, r5
 80121fc:	4642      	mov	r2, r8
 80121fe:	4631      	mov	r1, r6
 8012200:	9700      	str	r7, [sp, #0]
 8012202:	b280      	uxth	r0, r0
 8012204:	f009 fdaa 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8012208:	f104 021b 	add.w	r2, r4, #27
 801220c:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012210:	9700      	str	r7, [sp, #0]
 8012212:	462b      	mov	r3, r5
 8012214:	b292      	uxth	r2, r2
 8012216:	4631      	mov	r1, r6
 8012218:	b280      	uxth	r0, r0
 801221a:	f009 fd9f 	bl	801bd5c <TFT_DrawLine>
}
 801221e:	b002      	add	sp, #8
 8012220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012224:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 8012228:	e7c1      	b.n	80121ae <GUI_Button_Down_Active+0x18>

0801222a <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 801222a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222e:	4604      	mov	r4, r0
 8012230:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012232:	f241 3676 	movw	r6, #4982	; 0x1376
 8012236:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801223a:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801223e:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012240:	f104 0a13 	add.w	sl, r4, #19
 8012244:	f105 0b0c 	add.w	fp, r5, #12
 8012248:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801224c:	f105 061b 	add.w	r6, r5, #27
 8012250:	b2b6      	uxth	r6, r6
 8012252:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8012256:	fa1f fa8a 	uxth.w	sl, sl
 801225a:	fa1f fb8b 	uxth.w	fp, fp
 801225e:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012262:	b29b      	uxth	r3, r3
 8012264:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012266:	f104 0712 	add.w	r7, r4, #18
 801226a:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801226c:	f009 fdd3 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012270:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012272:	4633      	mov	r3, r6
 8012274:	464a      	mov	r2, r9
 8012276:	4659      	mov	r1, fp
 8012278:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 801227a:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 801227c:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012280:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012282:	f009 fd6b 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012286:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012288:	4633      	mov	r3, r6
 801228a:	4622      	mov	r2, r4
 801228c:	4659      	mov	r1, fp
 801228e:	4638      	mov	r0, r7
 8012290:	f8cd 8000 	str.w	r8, [sp]
 8012294:	f009 fd62 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012298:	462b      	mov	r3, r5
 801229a:	4652      	mov	r2, sl
 801229c:	4631      	mov	r1, r6
 801229e:	4648      	mov	r0, r9
 80122a0:	f8cd 8000 	str.w	r8, [sp]
 80122a4:	f009 fd5a 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 80122a8:	f8cd 8000 	str.w	r8, [sp]
 80122ac:	462b      	mov	r3, r5
 80122ae:	463a      	mov	r2, r7
 80122b0:	4631      	mov	r1, r6
 80122b2:	4620      	mov	r0, r4
 80122b4:	f009 fd52 	bl	801bd5c <TFT_DrawLine>
}
 80122b8:	b003      	add	sp, #12
 80122ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122be <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 80122be:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80122c0:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80122c4:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80122c8:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80122cc:	4604      	mov	r4, r0
 80122ce:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80122d0:	9600      	str	r6, [sp, #0]
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	b292      	uxth	r2, r2
 80122d6:	f009 fd9e 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 80122da:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80122de:	f105 0327 	add.w	r3, r5, #39	; 0x27
 80122e2:	f104 0230 	add.w	r2, r4, #48	; 0x30
 80122e6:	f105 0110 	add.w	r1, r5, #16
 80122ea:	f104 0008 	add.w	r0, r4, #8
 80122ee:	9600      	str	r6, [sp, #0]
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	b292      	uxth	r2, r2
 80122f4:	b289      	uxth	r1, r1
 80122f6:	b280      	uxth	r0, r0
 80122f8:	f009 fda5 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 80122fc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8012300:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8012304:	1d69      	adds	r1, r5, #5
 8012306:	1da0      	adds	r0, r4, #6
 8012308:	9600      	str	r6, [sp, #0]
 801230a:	b29b      	uxth	r3, r3
 801230c:	b292      	uxth	r2, r2
 801230e:	b289      	uxth	r1, r1
 8012310:	b280      	uxth	r0, r0
 8012312:	f009 fd23 	bl	801bd5c <TFT_DrawLine>
}
 8012316:	b002      	add	sp, #8
 8012318:	bd70      	pop	{r4, r5, r6, pc}

0801231a <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 801231a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801231e:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012322:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012324:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012328:	f241 3676 	movw	r6, #4982	; 0x1376
{
 801232c:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801232e:	9600      	str	r6, [sp, #0]
 8012330:	b29b      	uxth	r3, r3
 8012332:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012334:	f105 071c 	add.w	r7, r5, #28
 8012338:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801233c:	f009 fd6b 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012340:	b2bf      	uxth	r7, r7
 8012342:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8012346:	f104 0109 	add.w	r1, r4, #9
 801234a:	f105 0009 	add.w	r0, r5, #9
 801234e:	463a      	mov	r2, r7
 8012350:	9600      	str	r6, [sp, #0]
 8012352:	b29b      	uxth	r3, r3
 8012354:	b289      	uxth	r1, r1
 8012356:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012358:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 801235c:	f009 fd73 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012360:	fa1f f888 	uxth.w	r8, r8
 8012364:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012368:	f105 0231 	add.w	r2, r5, #49	; 0x31
 801236c:	f105 0012 	add.w	r0, r5, #18
 8012370:	4641      	mov	r1, r8
 8012372:	9600      	str	r6, [sp, #0]
 8012374:	b29b      	uxth	r3, r3
 8012376:	b292      	uxth	r2, r2
 8012378:	b280      	uxth	r0, r0
 801237a:	f009 fd64 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 801237e:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8012382:	fa0f f188 	sxth.w	r1, r8
 8012386:	b238      	sxth	r0, r7
 8012388:	9600      	str	r6, [sp, #0]
 801238a:	2302      	movs	r3, #2
 801238c:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 801238e:	f105 071d 	add.w	r7, r5, #29
 8012392:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8012396:	f009 fb97 	bl	801bac8 <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 801239a:	b2bf      	uxth	r7, r7
 801239c:	fa1f f888 	uxth.w	r8, r8
 80123a0:	fa1f f989 	uxth.w	r9, r9
 80123a4:	f104 0313 	add.w	r3, r4, #19
 80123a8:	464a      	mov	r2, r9
 80123aa:	4641      	mov	r1, r8
 80123ac:	4638      	mov	r0, r7
 80123ae:	9600      	str	r6, [sp, #0]
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	f009 fcd3 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 80123b6:	f104 030b 	add.w	r3, r4, #11
 80123ba:	464a      	mov	r2, r9
 80123bc:	4641      	mov	r1, r8
 80123be:	4638      	mov	r0, r7
 80123c0:	9600      	str	r6, [sp, #0]
 80123c2:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 80123c4:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 80123c8:	f104 081d 	add.w	r8, r4, #29
 80123cc:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 80123ce:	f009 fcc5 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 80123d2:	b2bf      	uxth	r7, r7
 80123d4:	fa1f f888 	uxth.w	r8, r8
 80123d8:	b2a4      	uxth	r4, r4
 80123da:	f105 0227 	add.w	r2, r5, #39	; 0x27
 80123de:	4623      	mov	r3, r4
 80123e0:	4641      	mov	r1, r8
 80123e2:	4638      	mov	r0, r7
 80123e4:	9600      	str	r6, [sp, #0]
 80123e6:	b292      	uxth	r2, r2
 80123e8:	f009 fcb8 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 80123ec:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 80123f0:	9600      	str	r6, [sp, #0]
 80123f2:	4623      	mov	r3, r4
 80123f4:	b292      	uxth	r2, r2
 80123f6:	4641      	mov	r1, r8
 80123f8:	4638      	mov	r0, r7
 80123fa:	f009 fcaf 	bl	801bd5c <TFT_DrawLine>
}
 80123fe:	b003      	add	sp, #12
 8012400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012404 <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 8012404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012408:	b085      	sub	sp, #20
 801240a:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 801240c:	9203      	str	r2, [sp, #12]
 801240e:	9e03      	ldr	r6, [sp, #12]
{
 8012410:	460d      	mov	r5, r1
 8012412:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012416:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 801241a:	2e00      	cmp	r6, #0
 801241c:	f000 80b6 	beq.w	801258c <GUI_Button_SD_Card+0x188>
 8012420:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012424:	f104 0715 	add.w	r7, r4, #21
 8012428:	f105 0b05 	add.w	fp, r5, #5
 801242c:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 8012430:	f105 0a07 	add.w	sl, r5, #7
 8012434:	b2bf      	uxth	r7, r7
 8012436:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801243a:	9600      	str	r6, [sp, #0]
 801243c:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 801243e:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012442:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012444:	fa1f fb8b 	uxth.w	fp, fp
 8012448:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801244c:	f009 fce3 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012450:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012454:	464a      	mov	r2, r9
 8012456:	4638      	mov	r0, r7
 8012458:	4653      	mov	r3, sl
 801245a:	4659      	mov	r1, fp
 801245c:	9600      	str	r6, [sp, #0]
 801245e:	f009 fcda 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012462:	fa1f f888 	uxth.w	r8, r8
 8012466:	f105 0108 	add.w	r1, r5, #8
 801246a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801246e:	4643      	mov	r3, r8
 8012470:	464a      	mov	r2, r9
 8012472:	b289      	uxth	r1, r1
 8012474:	b280      	uxth	r0, r0
 8012476:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012478:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 801247c:	f009 fccb 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012480:	fa1f f989 	uxth.w	r9, r9
 8012484:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8012488:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 801248c:	4643      	mov	r3, r8
 801248e:	464a      	mov	r2, r9
 8012490:	b289      	uxth	r1, r1
 8012492:	b280      	uxth	r0, r0
 8012494:	9600      	str	r6, [sp, #0]
 8012496:	f009 fcbe 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 801249a:	f104 030c 	add.w	r3, r4, #12
 801249e:	b29b      	uxth	r3, r3
 80124a0:	f105 0810 	add.w	r8, r5, #16
 80124a4:	fa1f f888 	uxth.w	r8, r8
 80124a8:	9302      	str	r3, [sp, #8]
 80124aa:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 80124ae:	4641      	mov	r1, r8
 80124b0:	4648      	mov	r0, r9
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	9a02      	ldr	r2, [sp, #8]
 80124b6:	9600      	str	r6, [sp, #0]
 80124b8:	f009 fcad 	bl	801be16 <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 80124bc:	463a      	mov	r2, r7
 80124be:	4641      	mov	r1, r8
 80124c0:	4648      	mov	r0, r9
 80124c2:	465b      	mov	r3, fp
 80124c4:	9600      	str	r6, [sp, #0]
 80124c6:	f009 fc49 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 80124ca:	1dab      	adds	r3, r5, #6
 80124cc:	f104 000b 	add.w	r0, r4, #11
 80124d0:	463a      	mov	r2, r7
 80124d2:	4641      	mov	r1, r8
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	b280      	uxth	r0, r0
 80124d8:	9600      	str	r6, [sp, #0]
 80124da:	f009 fc3f 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 80124de:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 80124e2:	463a      	mov	r2, r7
 80124e4:	4641      	mov	r1, r8
 80124e6:	4653      	mov	r3, sl
 80124e8:	9802      	ldr	r0, [sp, #8]
 80124ea:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 80124ec:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 80124f0:	f009 fc34 	bl	801bd5c <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 80124f4:	fa1f f888 	uxth.w	r8, r8
 80124f8:	fa1f f989 	uxth.w	r9, r9
 80124fc:	f104 0013 	add.w	r0, r4, #19
 8012500:	463a      	mov	r2, r7
 8012502:	464b      	mov	r3, r9
 8012504:	4641      	mov	r1, r8
 8012506:	b280      	uxth	r0, r0
 8012508:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 801250a:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 801250e:	f009 fc82 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8012512:	b2bf      	uxth	r7, r7
 8012514:	f104 0019 	add.w	r0, r4, #25
 8012518:	464b      	mov	r3, r9
 801251a:	463a      	mov	r2, r7
 801251c:	4641      	mov	r1, r8
 801251e:	b280      	uxth	r0, r0
 8012520:	9600      	str	r6, [sp, #0]
 8012522:	f009 fc78 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 8012526:	f104 0221 	add.w	r2, r4, #33	; 0x21
 801252a:	f104 001f 	add.w	r0, r4, #31
 801252e:	464b      	mov	r3, r9
 8012530:	b292      	uxth	r2, r2
 8012532:	4641      	mov	r1, r8
 8012534:	b280      	uxth	r0, r0
 8012536:	9600      	str	r6, [sp, #0]
 8012538:	f009 fc6d 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 801253c:	f104 0227 	add.w	r2, r4, #39	; 0x27
 8012540:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8012544:	464b      	mov	r3, r9
 8012546:	b292      	uxth	r2, r2
 8012548:	4641      	mov	r1, r8
 801254a:	b280      	uxth	r0, r0
 801254c:	9600      	str	r6, [sp, #0]
 801254e:	f009 fc62 	bl	801be16 <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 8012552:	4811      	ldr	r0, [pc, #68]	; (8012598 <GUI_Button_SD_Card+0x194>)
 8012554:	f009 fe88 	bl	801c268 <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 8012558:	4630      	mov	r0, r6
 801255a:	f009 fe8b 	bl	801c274 <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 801255e:	9b03      	ldr	r3, [sp, #12]
 8012560:	b1bb      	cbz	r3, 8012592 <GUI_Button_SD_Card+0x18e>
 8012562:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 8012566:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012568:	f009 fe8a 	bl	801c280 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 801256c:	b2ad      	uxth	r5, r5
 801256e:	f104 0010 	add.w	r0, r4, #16
 8012572:	4629      	mov	r1, r5
 8012574:	2253      	movs	r2, #83	; 0x53
 8012576:	b280      	uxth	r0, r0
 8012578:	f009 ff40 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 801257c:	2244      	movs	r2, #68	; 0x44
 801257e:	4629      	mov	r1, r5
 8012580:	4638      	mov	r0, r7
}
 8012582:	b005      	add	sp, #20
 8012584:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8012588:	f009 bf38 	b.w	801c3fc <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801258c:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8012590:	e748      	b.n	8012424 <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012592:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 8012596:	e7e6      	b.n	8012566 <GUI_Button_SD_Card+0x162>
 8012598:	200001e0 	.word	0x200001e0

0801259c <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 801259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a0:	b085      	sub	sp, #20
 80125a2:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80125a4:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80125a8:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80125ac:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80125b0:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80125b2:	9600      	str	r6, [sp, #0]
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	b292      	uxth	r2, r2
	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 80125b8:	f104 090b 	add.w	r9, r4, #11
 80125bc:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 80125c0:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80125c4:	f009 fc27 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 80125c8:	fa1f f989 	uxth.w	r9, r9
 80125cc:	b2bf      	uxth	r7, r7
 80125ce:	f105 0225 	add.w	r2, r5, #37	; 0x25
 80125d2:	f105 0023 	add.w	r0, r5, #35	; 0x23
 80125d6:	463b      	mov	r3, r7
 80125d8:	4649      	mov	r1, r9
 80125da:	9600      	str	r6, [sp, #0]
 80125dc:	b292      	uxth	r2, r2
 80125de:	b280      	uxth	r0, r0
 80125e0:	f009 fc19 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 80125e4:	f105 0232 	add.w	r2, r5, #50	; 0x32
 80125e8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80125ec:	463b      	mov	r3, r7
 80125ee:	4649      	mov	r1, r9
 80125f0:	9600      	str	r6, [sp, #0]
 80125f2:	b292      	uxth	r2, r2
 80125f4:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 80125f6:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 80125fa:	f009 fc0c 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 80125fe:	fa1f f888 	uxth.w	r8, r8
 8012602:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8012606:	f105 0a1e 	add.w	sl, r5, #30
 801260a:	f104 0b1b 	add.w	fp, r4, #27
 801260e:	fa1f fa8a 	uxth.w	sl, sl
 8012612:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012616:	b29b      	uxth	r3, r3
 8012618:	4642      	mov	r2, r8
 801261a:	4649      	mov	r1, r9
 801261c:	4640      	mov	r0, r8
 801261e:	9600      	str	r6, [sp, #0]
 8012620:	9303      	str	r3, [sp, #12]
 8012622:	f009 fb9b 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8012626:	465b      	mov	r3, fp
 8012628:	4652      	mov	r2, sl
 801262a:	4649      	mov	r1, r9
 801262c:	4640      	mov	r0, r8
 801262e:	9600      	str	r6, [sp, #0]
 8012630:	f009 fb94 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 8012634:	465b      	mov	r3, fp
 8012636:	4652      	mov	r2, sl
 8012638:	9903      	ldr	r1, [sp, #12]
 801263a:	9600      	str	r6, [sp, #0]
 801263c:	4640      	mov	r0, r8
 801263e:	f009 fb8d 	bl	801bd5c <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 8012642:	f104 080c 	add.w	r8, r4, #12
 8012646:	1dea      	adds	r2, r5, #7
 8012648:	b292      	uxth	r2, r2
 801264a:	fa1f f888 	uxth.w	r8, r8
 801264e:	463b      	mov	r3, r7
 8012650:	4641      	mov	r1, r8
 8012652:	4610      	mov	r0, r2
 8012654:	9600      	str	r6, [sp, #0]
 8012656:	f009 fb81 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 801265a:	f105 0208 	add.w	r2, r5, #8
 801265e:	b292      	uxth	r2, r2
 8012660:	463b      	mov	r3, r7
 8012662:	4641      	mov	r1, r8
 8012664:	4610      	mov	r0, r2
 8012666:	9600      	str	r6, [sp, #0]
 8012668:	f009 fb78 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 801266c:	f105 0209 	add.w	r2, r5, #9
 8012670:	b292      	uxth	r2, r2
 8012672:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8012676:	f104 010d 	add.w	r1, r4, #13
 801267a:	4610      	mov	r0, r2
 801267c:	9600      	str	r6, [sp, #0]
 801267e:	b29b      	uxth	r3, r3
 8012680:	b289      	uxth	r1, r1
 8012682:	f009 fb6b 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 8012686:	f104 080e 	add.w	r8, r4, #14
 801268a:	f105 020a 	add.w	r2, r5, #10
 801268e:	b292      	uxth	r2, r2
 8012690:	fa1f f888 	uxth.w	r8, r8
 8012694:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8012698:	4641      	mov	r1, r8
 801269a:	4610      	mov	r0, r2
 801269c:	9600      	str	r6, [sp, #0]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	f009 fb5c 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 80126a4:	f104 0728 	add.w	r7, r4, #40	; 0x28
 80126a8:	f105 020b 	add.w	r2, r5, #11
 80126ac:	b292      	uxth	r2, r2
 80126ae:	b2bf      	uxth	r7, r7
 80126b0:	463b      	mov	r3, r7
 80126b2:	4641      	mov	r1, r8
 80126b4:	4610      	mov	r0, r2
 80126b6:	9600      	str	r6, [sp, #0]
 80126b8:	f009 fb50 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 80126bc:	f105 020c 	add.w	r2, r5, #12
 80126c0:	b292      	uxth	r2, r2
 80126c2:	f104 010f 	add.w	r1, r4, #15
 80126c6:	463b      	mov	r3, r7
 80126c8:	4610      	mov	r0, r2
 80126ca:	9600      	str	r6, [sp, #0]
 80126cc:	b289      	uxth	r1, r1
 80126ce:	f009 fb45 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 80126d2:	f104 0810 	add.w	r8, r4, #16
 80126d6:	f105 020d 	add.w	r2, r5, #13
 80126da:	b292      	uxth	r2, r2
 80126dc:	fa1f f888 	uxth.w	r8, r8
 80126e0:	f104 0327 	add.w	r3, r4, #39	; 0x27
 80126e4:	4641      	mov	r1, r8
 80126e6:	4610      	mov	r0, r2
 80126e8:	9600      	str	r6, [sp, #0]
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	f009 fb36 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 80126f0:	f104 0726 	add.w	r7, r4, #38	; 0x26
 80126f4:	f105 020e 	add.w	r2, r5, #14
 80126f8:	b292      	uxth	r2, r2
 80126fa:	b2bf      	uxth	r7, r7
 80126fc:	463b      	mov	r3, r7
 80126fe:	4641      	mov	r1, r8
 8012700:	4610      	mov	r0, r2
 8012702:	9600      	str	r6, [sp, #0]
 8012704:	f009 fb2a 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 8012708:	f105 020f 	add.w	r2, r5, #15
 801270c:	b292      	uxth	r2, r2
 801270e:	f104 0111 	add.w	r1, r4, #17
 8012712:	463b      	mov	r3, r7
 8012714:	4610      	mov	r0, r2
 8012716:	9600      	str	r6, [sp, #0]
 8012718:	b289      	uxth	r1, r1
 801271a:	f009 fb1f 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 801271e:	f104 0812 	add.w	r8, r4, #18
 8012722:	f105 0210 	add.w	r2, r5, #16
 8012726:	b292      	uxth	r2, r2
 8012728:	fa1f f888 	uxth.w	r8, r8
 801272c:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8012730:	4641      	mov	r1, r8
 8012732:	4610      	mov	r0, r2
 8012734:	9600      	str	r6, [sp, #0]
 8012736:	b29b      	uxth	r3, r3
 8012738:	f009 fb10 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 801273c:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8012740:	f105 0211 	add.w	r2, r5, #17
 8012744:	b292      	uxth	r2, r2
 8012746:	b2bf      	uxth	r7, r7
 8012748:	463b      	mov	r3, r7
 801274a:	4641      	mov	r1, r8
 801274c:	4610      	mov	r0, r2
 801274e:	9600      	str	r6, [sp, #0]
 8012750:	f009 fb04 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 8012754:	f105 0212 	add.w	r2, r5, #18
 8012758:	b292      	uxth	r2, r2
 801275a:	f104 0113 	add.w	r1, r4, #19
 801275e:	463b      	mov	r3, r7
 8012760:	4610      	mov	r0, r2
 8012762:	9600      	str	r6, [sp, #0]
 8012764:	b289      	uxth	r1, r1
 8012766:	f009 faf9 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 801276a:	f104 0714 	add.w	r7, r4, #20
 801276e:	f105 0213 	add.w	r2, r5, #19
 8012772:	b292      	uxth	r2, r2
 8012774:	b2bf      	uxth	r7, r7
 8012776:	f104 0323 	add.w	r3, r4, #35	; 0x23
 801277a:	4639      	mov	r1, r7
 801277c:	4610      	mov	r0, r2
 801277e:	9600      	str	r6, [sp, #0]
 8012780:	b29b      	uxth	r3, r3
 8012782:	f009 faeb 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 8012786:	f105 0214 	add.w	r2, r5, #20
 801278a:	b292      	uxth	r2, r2
 801278c:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8012790:	4639      	mov	r1, r7
 8012792:	4610      	mov	r0, r2
 8012794:	9600      	str	r6, [sp, #0]
 8012796:	b29b      	uxth	r3, r3
 8012798:	f009 fae0 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 801279c:	f104 0821 	add.w	r8, r4, #33	; 0x21
 80127a0:	f105 0215 	add.w	r2, r5, #21
 80127a4:	b292      	uxth	r2, r2
 80127a6:	fa1f f888 	uxth.w	r8, r8
 80127aa:	f104 0115 	add.w	r1, r4, #21
 80127ae:	4643      	mov	r3, r8
 80127b0:	4610      	mov	r0, r2
 80127b2:	9600      	str	r6, [sp, #0]
 80127b4:	b289      	uxth	r1, r1
 80127b6:	f009 fad1 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 80127ba:	f104 0716 	add.w	r7, r4, #22
 80127be:	f105 0216 	add.w	r2, r5, #22
 80127c2:	b292      	uxth	r2, r2
 80127c4:	b2bf      	uxth	r7, r7
 80127c6:	4643      	mov	r3, r8
 80127c8:	4639      	mov	r1, r7
 80127ca:	4610      	mov	r0, r2
 80127cc:	9600      	str	r6, [sp, #0]
 80127ce:	f009 fac5 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 80127d2:	f105 0217 	add.w	r2, r5, #23
 80127d6:	b292      	uxth	r2, r2
 80127d8:	f104 0320 	add.w	r3, r4, #32
 80127dc:	4639      	mov	r1, r7
 80127de:	4610      	mov	r0, r2
 80127e0:	9600      	str	r6, [sp, #0]
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	f009 faba 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 80127e8:	f104 081f 	add.w	r8, r4, #31
 80127ec:	f105 0218 	add.w	r2, r5, #24
 80127f0:	b292      	uxth	r2, r2
 80127f2:	fa1f f888 	uxth.w	r8, r8
 80127f6:	f104 0117 	add.w	r1, r4, #23
 80127fa:	4643      	mov	r3, r8
 80127fc:	4610      	mov	r0, r2
 80127fe:	9600      	str	r6, [sp, #0]
 8012800:	b289      	uxth	r1, r1
 8012802:	f009 faab 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 8012806:	f104 0718 	add.w	r7, r4, #24
 801280a:	f105 0219 	add.w	r2, r5, #25
 801280e:	b292      	uxth	r2, r2
 8012810:	b2bf      	uxth	r7, r7
 8012812:	4643      	mov	r3, r8
 8012814:	4639      	mov	r1, r7
 8012816:	4610      	mov	r0, r2
 8012818:	9600      	str	r6, [sp, #0]
 801281a:	f009 fa9f 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 801281e:	f105 021a 	add.w	r2, r5, #26
 8012822:	b292      	uxth	r2, r2
 8012824:	f104 031e 	add.w	r3, r4, #30
 8012828:	4639      	mov	r1, r7
 801282a:	4610      	mov	r0, r2
 801282c:	9600      	str	r6, [sp, #0]
 801282e:	b29b      	uxth	r3, r3
 8012830:	f009 fa94 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 8012834:	f104 0819 	add.w	r8, r4, #25
 8012838:	f105 021b 	add.w	r2, r5, #27
 801283c:	b292      	uxth	r2, r2
 801283e:	fa1f f888 	uxth.w	r8, r8
 8012842:	f104 031d 	add.w	r3, r4, #29
 8012846:	4641      	mov	r1, r8
 8012848:	4610      	mov	r0, r2
 801284a:	9600      	str	r6, [sp, #0]
 801284c:	b29b      	uxth	r3, r3
 801284e:	f009 fa85 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 8012852:	f104 071c 	add.w	r7, r4, #28
 8012856:	f105 021c 	add.w	r2, r5, #28
 801285a:	b292      	uxth	r2, r2
 801285c:	b2bf      	uxth	r7, r7
 801285e:	463b      	mov	r3, r7
 8012860:	4641      	mov	r1, r8
 8012862:	4610      	mov	r0, r2
 8012864:	9600      	str	r6, [sp, #0]
 8012866:	f009 fa79 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 801286a:	f105 021d 	add.w	r2, r5, #29
 801286e:	b292      	uxth	r2, r2
 8012870:	f104 011a 	add.w	r1, r4, #26
 8012874:	463b      	mov	r3, r7
 8012876:	4610      	mov	r0, r2
 8012878:	9600      	str	r6, [sp, #0]
 801287a:	b289      	uxth	r1, r1
 801287c:	f009 fa6e 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 8012880:	9600      	str	r6, [sp, #0]
 8012882:	465b      	mov	r3, fp
 8012884:	4652      	mov	r2, sl
 8012886:	4659      	mov	r1, fp
 8012888:	4650      	mov	r0, sl
 801288a:	f009 fa67 	bl	801bd5c <TFT_DrawLine>
}
 801288e:	b005      	add	sp, #20
 8012890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012894 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8012894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012898:	4605      	mov	r5, r0
 801289a:	460c      	mov	r4, r1
 801289c:	f100 0623 	add.w	r6, r0, #35	; 0x23
 80128a0:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 80128a4:	2a00      	cmp	r2, #0
 80128a6:	f000 8111 	beq.w	8012acc <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f241 3276 	movw	r2, #4982	; 0x1376
 80128b0:	bf18      	it	ne
 80128b2:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 80128b6:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80128b8:	f105 080a 	add.w	r8, r5, #10
 80128bc:	f104 0b07 	add.w	fp, r4, #7
 80128c0:	f104 091e 	add.w	r9, r4, #30
 80128c4:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 80128c8:	b2bb      	uxth	r3, r7
 80128ca:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80128cc:	fa1f fb8b 	uxth.w	fp, fp
 80128d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80128d4:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80128d8:	f105 0a1c 	add.w	sl, r5, #28
 80128dc:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 80128e0:	f009 fa99 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80128e4:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80128e6:	464b      	mov	r3, r9
 80128e8:	4642      	mov	r2, r8
 80128ea:	4659      	mov	r1, fp
 80128ec:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80128ee:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 80128f2:	9600      	str	r6, [sp, #0]
 80128f4:	f009 fa32 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 80128f8:	463b      	mov	r3, r7
 80128fa:	4652      	mov	r2, sl
 80128fc:	4659      	mov	r1, fp
 80128fe:	4640      	mov	r0, r8
 8012900:	9600      	str	r6, [sp, #0]
 8012902:	f009 fa2b 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 8012906:	463b      	mov	r3, r7
 8012908:	4652      	mov	r2, sl
 801290a:	4649      	mov	r1, r9
 801290c:	4640      	mov	r0, r8
 801290e:	9600      	str	r6, [sp, #0]
 8012910:	f009 fa24 	bl	801bd5c <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 8012914:	f105 020b 	add.w	r2, r5, #11
 8012918:	b292      	uxth	r2, r2
 801291a:	f104 031d 	add.w	r3, r4, #29
 801291e:	f104 0108 	add.w	r1, r4, #8
 8012922:	4610      	mov	r0, r2
 8012924:	9600      	str	r6, [sp, #0]
 8012926:	b29b      	uxth	r3, r3
 8012928:	b289      	uxth	r1, r1
 801292a:	f009 fa17 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 801292e:	f104 091c 	add.w	r9, r4, #28
 8012932:	f105 020c 	add.w	r2, r5, #12
 8012936:	b292      	uxth	r2, r2
 8012938:	fa1f f989 	uxth.w	r9, r9
 801293c:	f104 0109 	add.w	r1, r4, #9
 8012940:	464b      	mov	r3, r9
 8012942:	4610      	mov	r0, r2
 8012944:	9600      	str	r6, [sp, #0]
 8012946:	b289      	uxth	r1, r1
 8012948:	f009 fa08 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 801294c:	f104 080a 	add.w	r8, r4, #10
 8012950:	f105 020d 	add.w	r2, r5, #13
 8012954:	b292      	uxth	r2, r2
 8012956:	fa1f f888 	uxth.w	r8, r8
 801295a:	464b      	mov	r3, r9
 801295c:	4641      	mov	r1, r8
 801295e:	4610      	mov	r0, r2
 8012960:	9600      	str	r6, [sp, #0]
 8012962:	f009 f9fb 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 8012966:	f105 020e 	add.w	r2, r5, #14
 801296a:	b292      	uxth	r2, r2
 801296c:	f104 031b 	add.w	r3, r4, #27
 8012970:	4641      	mov	r1, r8
 8012972:	4610      	mov	r0, r2
 8012974:	9600      	str	r6, [sp, #0]
 8012976:	b29b      	uxth	r3, r3
 8012978:	f009 f9f0 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 801297c:	f104 091a 	add.w	r9, r4, #26
 8012980:	f105 020f 	add.w	r2, r5, #15
 8012984:	b292      	uxth	r2, r2
 8012986:	fa1f f989 	uxth.w	r9, r9
 801298a:	f104 010b 	add.w	r1, r4, #11
 801298e:	464b      	mov	r3, r9
 8012990:	4610      	mov	r0, r2
 8012992:	9600      	str	r6, [sp, #0]
 8012994:	b289      	uxth	r1, r1
 8012996:	f009 f9e1 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 801299a:	f104 080c 	add.w	r8, r4, #12
 801299e:	f105 0210 	add.w	r2, r5, #16
 80129a2:	b292      	uxth	r2, r2
 80129a4:	fa1f f888 	uxth.w	r8, r8
 80129a8:	464b      	mov	r3, r9
 80129aa:	4641      	mov	r1, r8
 80129ac:	4610      	mov	r0, r2
 80129ae:	9600      	str	r6, [sp, #0]
 80129b0:	f009 f9d4 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 80129b4:	f105 0211 	add.w	r2, r5, #17
 80129b8:	b292      	uxth	r2, r2
 80129ba:	f104 0319 	add.w	r3, r4, #25
 80129be:	4641      	mov	r1, r8
 80129c0:	4610      	mov	r0, r2
 80129c2:	9600      	str	r6, [sp, #0]
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	f009 f9c9 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 80129ca:	f105 0212 	add.w	r2, r5, #18
 80129ce:	b292      	uxth	r2, r2
 80129d0:	f104 0318 	add.w	r3, r4, #24
 80129d4:	f104 010d 	add.w	r1, r4, #13
 80129d8:	4610      	mov	r0, r2
 80129da:	9600      	str	r6, [sp, #0]
 80129dc:	b29b      	uxth	r3, r3
 80129de:	b289      	uxth	r1, r1
 80129e0:	f009 f9bc 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 80129e4:	f104 080e 	add.w	r8, r4, #14
 80129e8:	f105 0213 	add.w	r2, r5, #19
 80129ec:	f104 0917 	add.w	r9, r4, #23
 80129f0:	b292      	uxth	r2, r2
 80129f2:	fa1f f888 	uxth.w	r8, r8
 80129f6:	fa1f f989 	uxth.w	r9, r9
 80129fa:	464b      	mov	r3, r9
 80129fc:	4641      	mov	r1, r8
 80129fe:	4610      	mov	r0, r2
 8012a00:	9600      	str	r6, [sp, #0]
 8012a02:	f009 f9ab 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 8012a06:	f105 0214 	add.w	r2, r5, #20
 8012a0a:	b292      	uxth	r2, r2
 8012a0c:	464b      	mov	r3, r9
 8012a0e:	4641      	mov	r1, r8
 8012a10:	4610      	mov	r0, r2
 8012a12:	9600      	str	r6, [sp, #0]
 8012a14:	f009 f9a2 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 8012a18:	f104 080f 	add.w	r8, r4, #15
 8012a1c:	f105 0215 	add.w	r2, r5, #21
 8012a20:	f104 0916 	add.w	r9, r4, #22
 8012a24:	b292      	uxth	r2, r2
 8012a26:	fa1f f888 	uxth.w	r8, r8
 8012a2a:	fa1f f989 	uxth.w	r9, r9
 8012a2e:	464b      	mov	r3, r9
 8012a30:	4641      	mov	r1, r8
 8012a32:	4610      	mov	r0, r2
 8012a34:	9600      	str	r6, [sp, #0]
 8012a36:	f009 f991 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 8012a3a:	f105 0216 	add.w	r2, r5, #22
 8012a3e:	b292      	uxth	r2, r2
 8012a40:	464b      	mov	r3, r9
 8012a42:	4641      	mov	r1, r8
 8012a44:	4610      	mov	r0, r2
 8012a46:	9600      	str	r6, [sp, #0]
 8012a48:	f009 f988 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 8012a4c:	f104 0810 	add.w	r8, r4, #16
 8012a50:	f105 0217 	add.w	r2, r5, #23
 8012a54:	b292      	uxth	r2, r2
 8012a56:	fa1f f888 	uxth.w	r8, r8
 8012a5a:	f104 0315 	add.w	r3, r4, #21
 8012a5e:	4641      	mov	r1, r8
 8012a60:	4610      	mov	r0, r2
 8012a62:	9600      	str	r6, [sp, #0]
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	f009 f979 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 8012a6a:	f104 0914 	add.w	r9, r4, #20
 8012a6e:	f105 0218 	add.w	r2, r5, #24
 8012a72:	b292      	uxth	r2, r2
 8012a74:	fa1f f989 	uxth.w	r9, r9
 8012a78:	464b      	mov	r3, r9
 8012a7a:	4641      	mov	r1, r8
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	9600      	str	r6, [sp, #0]
 8012a80:	f009 f96c 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8012a84:	f104 0811 	add.w	r8, r4, #17
 8012a88:	f105 0219 	add.w	r2, r5, #25
 8012a8c:	b292      	uxth	r2, r2
 8012a8e:	fa1f f888 	uxth.w	r8, r8
 8012a92:	464b      	mov	r3, r9
 8012a94:	4641      	mov	r1, r8
 8012a96:	4610      	mov	r0, r2
 8012a98:	9600      	str	r6, [sp, #0]
 8012a9a:	f009 f95f 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 8012a9e:	3413      	adds	r4, #19
 8012aa0:	f105 021a 	add.w	r2, r5, #26
 8012aa4:	b292      	uxth	r2, r2
 8012aa6:	b2a4      	uxth	r4, r4
 8012aa8:	4623      	mov	r3, r4
 8012aaa:	4641      	mov	r1, r8
 8012aac:	4610      	mov	r0, r2
 8012aae:	9600      	str	r6, [sp, #0]
 8012ab0:	f009 f954 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 8012ab4:	f105 021b 	add.w	r2, r5, #27
 8012ab8:	b292      	uxth	r2, r2
 8012aba:	9600      	str	r6, [sp, #0]
 8012abc:	4623      	mov	r3, r4
 8012abe:	4639      	mov	r1, r7
 8012ac0:	4610      	mov	r0, r2
 8012ac2:	f009 f94b 	bl	801bd5c <TFT_DrawLine>
}
 8012ac6:	b003      	add	sp, #12
 8012ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012acc:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	e6f1      	b.n	80128b8 <GUI_Button_Measure_deltaE_Small+0x24>

08012ad4 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 8012ad4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012ad8:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 8012adc:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012ade:	f241 3876 	movw	r8, #4982	; 0x1376
 8012ae2:	f100 0223 	add.w	r2, r0, #35	; 0x23
 8012ae6:	f8cd 8000 	str.w	r8, [sp]
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	b292      	uxth	r2, r2
{
 8012aee:	4604      	mov	r4, r0
 8012af0:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012af2:	f009 f9a8 	bl	801be46 <TFT_DrawRectangle>
	if(Check)
 8012af6:	b1fe      	cbz	r6, 8012b38 <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 8012af8:	f104 0610 	add.w	r6, r4, #16
 8012afc:	f105 071a 	add.w	r7, r5, #26
 8012b00:	b2b6      	uxth	r6, r6
 8012b02:	b2bf      	uxth	r7, r7
 8012b04:	f105 0111 	add.w	r1, r5, #17
 8012b08:	f104 0008 	add.w	r0, r4, #8
 8012b0c:	463b      	mov	r3, r7
 8012b0e:	4632      	mov	r2, r6
 8012b10:	b289      	uxth	r1, r1
 8012b12:	b280      	uxth	r0, r0
 8012b14:	f8cd 8000 	str.w	r8, [sp]
 8012b18:	f009 f920 	bl	801bd5c <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 8012b1c:	1d6b      	adds	r3, r5, #5
 8012b1e:	f104 021d 	add.w	r2, r4, #29
 8012b22:	f8cd 8000 	str.w	r8, [sp]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	b292      	uxth	r2, r2
 8012b2a:	4639      	mov	r1, r7
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	f009 f915 	bl	801bd5c <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 8012b32:	b002      	add	sp, #8
 8012b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 8012b38:	f105 0320 	add.w	r3, r5, #32
 8012b3c:	f104 0220 	add.w	r2, r4, #32
 8012b40:	1ca9      	adds	r1, r5, #2
 8012b42:	1ca0      	adds	r0, r4, #2
 8012b44:	2463      	movs	r4, #99	; 0x63
 8012b46:	9400      	str	r4, [sp, #0]
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	b292      	uxth	r2, r2
 8012b4c:	b289      	uxth	r1, r1
 8012b4e:	b280      	uxth	r0, r0
 8012b50:	f009 f961 	bl	801be16 <TFT_FillRectangle>
}
 8012b54:	e7ed      	b.n	8012b32 <GUI_CheckBox+0x5e>

08012b56 <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 8012b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b5a:	f100 0411 	add.w	r4, r0, #17
 8012b5e:	f101 0511 	add.w	r5, r1, #17
 8012b62:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8012b64:	b226      	sxth	r6, r4
 8012b66:	b22f      	sxth	r7, r5
	if(Active){
 8012b68:	b173      	cbz	r3, 8012b88 <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8012b6a:	f241 3376 	movw	r3, #4982	; 0x1376
 8012b6e:	220f      	movs	r2, #15
 8012b70:	4639      	mov	r1, r7
 8012b72:	4630      	mov	r0, r6
 8012b74:	f009 f852 	bl	801bc1c <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 8012b78:	f1b8 0f00 	cmp.w	r8, #0
 8012b7c:	d111      	bne.n	8012ba2 <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8012b7e:	2363      	movs	r3, #99	; 0x63
 8012b80:	220a      	movs	r2, #10
 8012b82:	b229      	sxth	r1, r5
 8012b84:	b220      	sxth	r0, r4
 8012b86:	e011      	b.n	8012bac <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 8012b88:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012b8c:	220f      	movs	r2, #15
 8012b8e:	4639      	mov	r1, r7
 8012b90:	4630      	mov	r0, r6
 8012b92:	f009 f843 	bl	801bc1c <TFT_DrawCircle>
	if(Check)
 8012b96:	f1b8 0f00 	cmp.w	r8, #0
 8012b9a:	d0f0      	beq.n	8012b7e <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8012b9c:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012ba0:	e001      	b.n	8012ba6 <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 8012ba2:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8012ba6:	220a      	movs	r2, #10
 8012ba8:	4639      	mov	r1, r7
 8012baa:	4630      	mov	r0, r6
		}
}
 8012bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8012bb0:	f009 b96d 	b.w	801be8e <TFT_DrawFilledCircle>

08012bb4 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 8012bb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012bb8:	f101 031c 	add.w	r3, r1, #28
 8012bbc:	2663      	movs	r6, #99	; 0x63
{
 8012bbe:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012bc0:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 8012bc4:	460d      	mov	r5, r1
 8012bc6:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012bc8:	9600      	str	r6, [sp, #0]
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	b292      	uxth	r2, r2
 8012bce:	f009 f922 	bl	801be16 <TFT_FillRectangle>
 8012bd2:	f105 0611 	add.w	r6, r5, #17
 8012bd6:	f105 0318 	add.w	r3, r5, #24
 8012bda:	f105 010a 	add.w	r1, r5, #10
 8012bde:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8012be2:	4d1f      	ldr	r5, [pc, #124]	; (8012c60 <GUI_Switch_Button+0xac>)
	if(Check)
 8012be4:	b1ef      	cbz	r7, 8012c22 <GUI_Switch_Button+0x6e>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012be6:	f242 409b 	movw	r0, #9371	; 0x249b
 8012bea:	270a      	movs	r7, #10
 8012bec:	9001      	str	r0, [sp, #4]
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	b292      	uxth	r2, r2
 8012bf2:	b289      	uxth	r1, r1
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	9700      	str	r7, [sp, #0]
 8012bf8:	f009 fa92 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8012bfc:	f104 0019 	add.w	r0, r4, #25
 8012c00:	f241 3376 	movw	r3, #4982	; 0x1376
 8012c04:	463a      	mov	r2, r7
 8012c06:	b231      	sxth	r1, r6
 8012c08:	b200      	sxth	r0, r0
 8012c0a:	f009 f940 	bl	801be8e <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 8012c0e:	782b      	ldrb	r3, [r5, #0]
 8012c10:	b923      	cbnz	r3, 8012c1c <GUI_Switch_Button+0x68>
				HAL_UART_MspInit(&huart3); //Enable Bluetooth
 8012c12:	4814      	ldr	r0, [pc, #80]	; (8012c64 <GUI_Switch_Button+0xb0>)
 8012c14:	f00c f8d4 	bl	801edc0 <HAL_UART_MspInit>
				BluetoothStat = 0x01;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				HAL_UART_MspDeInit(&huart3); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 8012c1c:	b002      	add	sp, #8
 8012c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 8012c22:	f04f 080a 	mov.w	r8, #10
 8012c26:	f24c 6018 	movw	r0, #50712	; 0xc618
 8012c2a:	9001      	str	r0, [sp, #4]
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	b292      	uxth	r2, r2
 8012c30:	b289      	uxth	r1, r1
 8012c32:	4620      	mov	r0, r4
 8012c34:	f8cd 8000 	str.w	r8, [sp]
 8012c38:	f009 fa72 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012c3c:	eb04 0008 	add.w	r0, r4, r8
 8012c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c44:	4642      	mov	r2, r8
 8012c46:	b231      	sxth	r1, r6
 8012c48:	b200      	sxth	r0, r0
 8012c4a:	f009 f920 	bl	801be8e <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 8012c4e:	782b      	ldrb	r3, [r5, #0]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d1e3      	bne.n	8012c1c <GUI_Switch_Button+0x68>
				HAL_UART_MspDeInit(&huart3); //Disable Bluetooth
 8012c54:	4803      	ldr	r0, [pc, #12]	; (8012c64 <GUI_Switch_Button+0xb0>)
 8012c56:	f00c f90d 	bl	801ee74 <HAL_UART_MspDeInit>
				BluetoothStat = 0x00;
 8012c5a:	702f      	strb	r7, [r5, #0]
}
 8012c5c:	e7de      	b.n	8012c1c <GUI_Switch_Button+0x68>
 8012c5e:	bf00      	nop
 8012c60:	20009d10 	.word	0x20009d10
 8012c64:	20095718 	.word	0x20095718

08012c68 <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 8012c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012c6a:	f101 031c 	add.w	r3, r1, #28
{
 8012c6e:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012c70:	2763      	movs	r7, #99	; 0x63
 8012c72:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	b292      	uxth	r2, r2
 8012c7a:	9700      	str	r7, [sp, #0]
{
 8012c7c:	460d      	mov	r5, r1
 8012c7e:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012c80:	f009 f8c9 	bl	801be16 <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012c84:	f242 409b 	movw	r0, #9371	; 0x249b
 8012c88:	f105 0318 	add.w	r3, r5, #24
 8012c8c:	f105 010a 	add.w	r1, r5, #10
 8012c90:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8012c94:	3511      	adds	r5, #17
 8012c96:	9001      	str	r0, [sp, #4]
	if(Check)
 8012c98:	b19e      	cbz	r6, 8012cc2 <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012c9a:	260a      	movs	r6, #10
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	9600      	str	r6, [sp, #0]
 8012ca2:	b292      	uxth	r2, r2
 8012ca4:	b289      	uxth	r1, r1
 8012ca6:	f009 fa3b 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8012caa:	f104 0019 	add.w	r0, r4, #25
 8012cae:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012cb2:	4632      	mov	r2, r6
 8012cb4:	b229      	sxth	r1, r5
 8012cb6:	b200      	sxth	r0, r0
		}
}
 8012cb8:	b003      	add	sp, #12
 8012cba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012cbe:	f009 b8e6 	b.w	801be8e <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012cc2:	260a      	movs	r6, #10
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	9600      	str	r6, [sp, #0]
 8012cca:	b292      	uxth	r2, r2
 8012ccc:	b289      	uxth	r1, r1
 8012cce:	f009 fa27 	bl	801c120 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012cd2:	19a0      	adds	r0, r4, r6
 8012cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cd8:	e7eb      	b.n	8012cb2 <GUI_Switch_ButtonActive+0x4a>

08012cda <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 8012cda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8012cde:	f100 0423 	add.w	r4, r0, #35	; 0x23
 8012ce2:	1dcf      	adds	r7, r1, #7
{
 8012ce4:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8012ce6:	b2a4      	uxth	r4, r4
 8012ce8:	b2bf      	uxth	r7, r7
 8012cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cee:	9300      	str	r3, [sp, #0]
 8012cf0:	4622      	mov	r2, r4
 8012cf2:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8012cf4:	f105 060e 	add.w	r6, r5, #14
{
 8012cf8:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8012cfa:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8012cfc:	f009 f88b 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8012d00:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	4622      	mov	r2, r4
 8012d08:	4633      	mov	r3, r6
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	4640      	mov	r0, r8
 8012d0e:	f009 f882 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 8012d12:	f105 0315 	add.w	r3, r5, #21
 8012d16:	f64c 1243 	movw	r2, #51523	; 0xc943
 8012d1a:	9200      	str	r2, [sp, #0]
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	4622      	mov	r2, r4
 8012d20:	4631      	mov	r1, r6
 8012d22:	4640      	mov	r0, r8
 8012d24:	f009 f877 	bl	801be16 <TFT_FillRectangle>
}
 8012d28:	b002      	add	sp, #8
 8012d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d2e <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 8012d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012d32:	f100 030f 	add.w	r3, r0, #15
{
 8012d36:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	270f      	movs	r7, #15
 8012d3c:	9302      	str	r3, [sp, #8]
 8012d3e:	f101 0309 	add.w	r3, r1, #9
{
 8012d42:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	9700      	str	r7, [sp, #0]
 8012d48:	9a02      	ldr	r2, [sp, #8]
 8012d4a:	9303      	str	r3, [sp, #12]
{
 8012d4c:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012d4e:	f009 f862 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 8012d52:	f104 0314 	add.w	r3, r4, #20
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	f104 0822 	add.w	r8, r4, #34	; 0x22
 8012d5c:	fa1f f888 	uxth.w	r8, r8
 8012d60:	9304      	str	r3, [sp, #16]
 8012d62:	9700      	str	r7, [sp, #0]
 8012d64:	9b03      	ldr	r3, [sp, #12]
 8012d66:	9804      	ldr	r0, [sp, #16]
 8012d68:	4642      	mov	r2, r8
 8012d6a:	4629      	mov	r1, r5
 8012d6c:	f009 f853 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 8012d70:	f105 030e 	add.w	r3, r5, #14
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	f105 0615 	add.w	r6, r5, #21
 8012d7a:	b2b6      	uxth	r6, r6
 8012d7c:	9305      	str	r3, [sp, #20]
 8012d7e:	9700      	str	r7, [sp, #0]
 8012d80:	4633      	mov	r3, r6
 8012d82:	9a02      	ldr	r2, [sp, #8]
 8012d84:	9905      	ldr	r1, [sp, #20]
 8012d86:	4620      	mov	r0, r4
 8012d88:	f009 f845 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8012d8c:	9700      	str	r7, [sp, #0]
 8012d8e:	4633      	mov	r3, r6
 8012d90:	4642      	mov	r2, r8
 8012d92:	9905      	ldr	r1, [sp, #20]
 8012d94:	9804      	ldr	r0, [sp, #16]
 8012d96:	f009 f83e 	bl	801be16 <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 8012d9a:	1cab      	adds	r3, r5, #2
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	f104 091d 	add.w	r9, r4, #29
 8012da2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012da6:	9307      	str	r3, [sp, #28]
 8012da8:	fa1f f989 	uxth.w	r9, r9
 8012dac:	9700      	str	r7, [sp, #0]
 8012dae:	4633      	mov	r3, r6
 8012db0:	464a      	mov	r2, r9
 8012db2:	9907      	ldr	r1, [sp, #28]
 8012db4:	4620      	mov	r0, r4
 8012db6:	f008 ffd1 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 8012dba:	1c6b      	adds	r3, r5, #1
 8012dbc:	b29b      	uxth	r3, r3
 8012dbe:	9308      	str	r3, [sp, #32]
 8012dc0:	9700      	str	r7, [sp, #0]
 8012dc2:	4633      	mov	r3, r6
 8012dc4:	464a      	mov	r2, r9
 8012dc6:	9908      	ldr	r1, [sp, #32]
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f008 ffc7 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 8012dce:	f104 021e 	add.w	r2, r4, #30
 8012dd2:	9700      	str	r7, [sp, #0]
 8012dd4:	4633      	mov	r3, r6
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	4620      	mov	r0, r4
 8012dda:	b292      	uxth	r2, r2
 8012ddc:	f008 ffbe 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 8012de0:	1c63      	adds	r3, r4, #1
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	f104 0a1f 	add.w	sl, r4, #31
 8012de8:	9309      	str	r3, [sp, #36]	; 0x24
 8012dea:	fa1f fa8a 	uxth.w	sl, sl
 8012dee:	9700      	str	r7, [sp, #0]
 8012df0:	4633      	mov	r3, r6
 8012df2:	4652      	mov	r2, sl
 8012df4:	4629      	mov	r1, r5
 8012df6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012df8:	f008 ffb0 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8012dfc:	1ca3      	adds	r3, r4, #2
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	930a      	str	r3, [sp, #40]	; 0x28
 8012e02:	9700      	str	r7, [sp, #0]
 8012e04:	4633      	mov	r3, r6
 8012e06:	4652      	mov	r2, sl
 8012e08:	4629      	mov	r1, r5
 8012e0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012e0c:	f008 ffa6 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 8012e10:	1ce3      	adds	r3, r4, #3
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	f104 0920 	add.w	r9, r4, #32
 8012e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e1a:	fa1f f989 	uxth.w	r9, r9
 8012e1e:	9700      	str	r7, [sp, #0]
 8012e20:	4633      	mov	r3, r6
 8012e22:	464a      	mov	r2, r9
 8012e24:	4629      	mov	r1, r5
 8012e26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012e28:	f008 ff98 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 8012e2c:	1d23      	adds	r3, r4, #4
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 8012e34:	9306      	str	r3, [sp, #24]
 8012e36:	fa1f fb8b 	uxth.w	fp, fp
 8012e3a:	9700      	str	r7, [sp, #0]
 8012e3c:	4633      	mov	r3, r6
 8012e3e:	465a      	mov	r2, fp
 8012e40:	4629      	mov	r1, r5
 8012e42:	9806      	ldr	r0, [sp, #24]
 8012e44:	f008 ff8a 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 8012e48:	9700      	str	r7, [sp, #0]
 8012e4a:	4633      	mov	r3, r6
 8012e4c:	4642      	mov	r2, r8
 8012e4e:	4629      	mov	r1, r5
 8012e50:	9806      	ldr	r0, [sp, #24]
 8012e52:	f008 ff83 	bl	801bd5c <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 8012e56:	9700      	str	r7, [sp, #0]
 8012e58:	462b      	mov	r3, r5
 8012e5a:	4652      	mov	r2, sl
 8012e5c:	4631      	mov	r1, r6
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f008 ff7c 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 8012e64:	9700      	str	r7, [sp, #0]
 8012e66:	462b      	mov	r3, r5
 8012e68:	464a      	mov	r2, r9
 8012e6a:	4631      	mov	r1, r6
 8012e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e6e:	f008 ff75 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 8012e72:	9700      	str	r7, [sp, #0]
 8012e74:	462b      	mov	r3, r5
 8012e76:	464a      	mov	r2, r9
 8012e78:	4631      	mov	r1, r6
 8012e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012e7c:	f008 ff6e 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 8012e80:	9700      	str	r7, [sp, #0]
 8012e82:	462b      	mov	r3, r5
 8012e84:	465a      	mov	r2, fp
 8012e86:	4631      	mov	r1, r6
 8012e88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012e8a:	f008 ff67 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 8012e8e:	9700      	str	r7, [sp, #0]
 8012e90:	462b      	mov	r3, r5
 8012e92:	4642      	mov	r2, r8
 8012e94:	4631      	mov	r1, r6
 8012e96:	9806      	ldr	r0, [sp, #24]
 8012e98:	f008 ff60 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 8012e9c:	1d60      	adds	r0, r4, #5
 8012e9e:	9700      	str	r7, [sp, #0]
 8012ea0:	9b08      	ldr	r3, [sp, #32]
 8012ea2:	4642      	mov	r2, r8
 8012ea4:	4631      	mov	r1, r6
 8012ea6:	b280      	uxth	r0, r0
 8012ea8:	f008 ff58 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 8012eac:	1da0      	adds	r0, r4, #6
 8012eae:	9700      	str	r7, [sp, #0]
 8012eb0:	9b07      	ldr	r3, [sp, #28]
 8012eb2:	4642      	mov	r2, r8
 8012eb4:	4631      	mov	r1, r6
 8012eb6:	b280      	uxth	r0, r0
 8012eb8:	f008 ff50 	bl	801bd5c <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 8012ebc:	9700      	str	r7, [sp, #0]
 8012ebe:	9b05      	ldr	r3, [sp, #20]
 8012ec0:	9903      	ldr	r1, [sp, #12]
 8012ec2:	4642      	mov	r2, r8
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f008 ffa6 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 8012eca:	9700      	str	r7, [sp, #0]
 8012ecc:	4633      	mov	r3, r6
 8012ece:	9a04      	ldr	r2, [sp, #16]
 8012ed0:	9802      	ldr	r0, [sp, #8]
 8012ed2:	4629      	mov	r1, r5
 8012ed4:	f008 ff9f 	bl	801be16 <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 8012ed8:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 8012edc:	f104 0213 	add.w	r2, r4, #19
 8012ee0:	f104 0010 	add.w	r0, r4, #16
 8012ee4:	4633      	mov	r3, r6
 8012ee6:	4629      	mov	r1, r5
 8012ee8:	9700      	str	r7, [sp, #0]
 8012eea:	b292      	uxth	r2, r2
 8012eec:	b280      	uxth	r0, r0
 8012eee:	f008 ff92 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 8012ef2:	f105 030d 	add.w	r3, r5, #13
 8012ef6:	f105 010a 	add.w	r1, r5, #10
 8012efa:	9700      	str	r7, [sp, #0]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	4642      	mov	r2, r8
 8012f00:	b289      	uxth	r1, r1
 8012f02:	4620      	mov	r0, r4
 8012f04:	f008 ff87 	bl	801be16 <TFT_FillRectangle>
	
}
 8012f08:	b00d      	add	sp, #52	; 0x34
 8012f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012f10 <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8012f16:	f101 040a 	add.w	r4, r1, #10
{
 8012f1a:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8012f1c:	b2a4      	uxth	r4, r4
 8012f1e:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 8012f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8012f26:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8012f28:	9300      	str	r3, [sp, #0]
 8012f2a:	b292      	uxth	r2, r2
 8012f2c:	4623      	mov	r3, r4
{
 8012f2e:	eeb0 8a40 	vmov.f32	s16, s0
 8012f32:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8012f34:	f008 ff6f 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 8012f38:	ee07 5a90 	vmov	s15, r5
 8012f3c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8012f6c <GUI_Bar_Measure+0x5c>
 8012f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f44:	f241 3376 	movw	r3, #4982	; 0x1376
 8012f48:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012f4c:	9300      	str	r3, [sp, #0]
 8012f4e:	4631      	mov	r1, r6
 8012f50:	4623      	mov	r3, r4
 8012f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012f56:	4628      	mov	r0, r5
 8012f58:	edcd 7a03 	vstr	s15, [sp, #12]
 8012f5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012f60:	f008 ff59 	bl	801be16 <TFT_FillRectangle>
}
 8012f64:	b004      	add	sp, #16
 8012f66:	ecbd 8b02 	vpop	{d8}
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}
 8012f6c:	42dc0000 	.word	0x42dc0000

08012f70 <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8012f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f74:	ed2d 8b02 	vpush	{d8}
 8012f78:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8012f7a:	4bba      	ldr	r3, [pc, #744]	; (8013264 <GUI_Text_E_Measure+0x2f4>)
 8012f7c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 80132a4 <GUI_Text_E_Measure+0x334>
{
 8012f80:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8012f82:	781a      	ldrb	r2, [r3, #0]
 8012f84:	4bb8      	ldr	r3, [pc, #736]	; (8013268 <GUI_Text_E_Measure+0x2f8>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	429a      	cmp	r2, r3
{
 8012f8a:	b086      	sub	sp, #24
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	460d      	mov	r5, r1
 8012f90:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8012f94:	d007      	beq.n	8012fa6 <GUI_Text_E_Measure+0x36>
 8012f96:	4ab5      	ldr	r2, [pc, #724]	; (801326c <GUI_Text_E_Measure+0x2fc>)
 8012f98:	2300      	movs	r3, #0
 8012f9a:	7013      	strb	r3, [r2, #0]
 8012f9c:	f889 3000 	strb.w	r3, [r9]
 8012fa0:	4bb3      	ldr	r3, [pc, #716]	; (8013270 <GUI_Text_E_Measure+0x300>)
 8012fa2:	22ff      	movs	r2, #255	; 0xff
 8012fa4:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 8012fa6:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8012fa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8012fac:	9303      	str	r3, [sp, #12]
 8012fae:	9304      	str	r3, [sp, #16]
 8012fb0:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8012fb4:	f009 f95e 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8012fb8:	2063      	movs	r0, #99	; 0x63
 8012fba:	f009 f961 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8012fbe:	48ad      	ldr	r0, [pc, #692]	; (8013274 <GUI_Text_E_Measure+0x304>)
 8012fc0:	f009 f952 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8012fc4:	1ca9      	adds	r1, r5, #2
 8012fc6:	2224      	movs	r2, #36	; 0x24
 8012fc8:	b289      	uxth	r1, r1
 8012fca:	4620      	mov	r0, r4
 8012fcc:	f009 fa16 	bl	801c3fc <TFT_DrawChar>
	

		if((Value/1000.0) >= 1.0)
 8012fd0:	ee18 0a10 	vmov	r0, s16
 8012fd4:	f7ed fad0 	bl	8000578 <__aeabi_f2d>
 8012fd8:	2200      	movs	r2, #0
 8012fda:	4ba7      	ldr	r3, [pc, #668]	; (8013278 <GUI_Text_E_Measure+0x308>)
 8012fdc:	f7ed fc4a 	bl	8000874 <__aeabi_ddiv>
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	4ba6      	ldr	r3, [pc, #664]	; (801327c <GUI_Text_E_Measure+0x30c>)
 8012fe4:	f7ed fda2 	bl	8000b2c <__aeabi_dcmpge>
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	f000 8087 	beq.w	80130fc <GUI_Text_E_Measure+0x18c>
	{
		Value = Value/(1000.0);
 8012fee:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8013280 <GUI_Text_E_Measure+0x310>
 8012ff2:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8012ff6:	2701      	movs	r7, #1
		meas_type = 1;
	}else {meas_type = 0;}
	if(nope)
 8012ff8:	2e00      	cmp	r6, #0
 8012ffa:	f000 80b0 	beq.w	801315e <GUI_Text_E_Measure+0x1ee>
		{	
			if(energy_light & !old_nan_Ee){
 8012ffe:	f899 3000 	ldrb.w	r3, [r9]
 8013002:	2b00      	cmp	r3, #0
 8013004:	bf14      	ite	ne
 8013006:	2300      	movne	r3, #0
 8013008:	f008 0301 	andeq.w	r3, r8, #1
 801300c:	2b00      	cmp	r3, #0
 801300e:	d077      	beq.n	8013100 <GUI_Text_E_Measure+0x190>
				TFT_SetTextColor(TFT_White);
 8013010:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013014:	f009 f92e 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013018:	2063      	movs	r0, #99	; 0x63
 801301a:	f009 f931 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801301e:	4899      	ldr	r0, [pc, #612]	; (8013284 <GUI_Text_E_Measure+0x314>)
 8013020:	f009 f922 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 8013024:	2163      	movs	r1, #99	; 0x63
 8013026:	f105 031a 	add.w	r3, r5, #26
 801302a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 801302e:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8013032:	9100      	str	r1, [sp, #0]
 8013034:	b29b      	uxth	r3, r3
 8013036:	b292      	uxth	r2, r2
 8013038:	4629      	mov	r1, r5
 801303a:	b280      	uxth	r0, r0
 801303c:	f008 feeb 	bl	801be16 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8013040:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013042:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 8013046:	f88d 300c 	strb.w	r3, [sp, #12]
 801304a:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801304e:	aa03      	add	r2, sp, #12
 8013050:	2303      	movs	r3, #3
 8013052:	4629      	mov	r1, r5
 8013054:	b280      	uxth	r0, r0
 8013056:	f009 fa29 	bl	801c4ac <TFT_DisplayString>
				old_nan_Ee = 1;
 801305a:	2301      	movs	r3, #1
 801305c:	f889 3000 	strb.w	r3, [r9]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}

	if (Language_status == Ru && !energy_light)
 8013060:	4b89      	ldr	r3, [pc, #548]	; (8013288 <GUI_Text_E_Measure+0x318>)
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	f040 811f 	bne.w	80132a8 <GUI_Text_E_Measure+0x338>
 801306a:	f1b8 0f00 	cmp.w	r8, #0
 801306e:	f040 816e 	bne.w	801334e <GUI_Text_E_Measure+0x3de>
	{
			if(deg != old_deg_e){
 8013072:	4b7f      	ldr	r3, [pc, #508]	; (8013270 <GUI_Text_E_Measure+0x300>)
 8013074:	781a      	ldrb	r2, [r3, #0]
 8013076:	42ba      	cmp	r2, r7
 8013078:	4698      	mov	r8, r3
 801307a:	d030      	beq.n	80130de <GUI_Text_E_Measure+0x16e>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 801307c:	2663      	movs	r6, #99	; 0x63
 801307e:	f105 031a 	add.w	r3, r5, #26
 8013082:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8013086:	1ce9      	adds	r1, r5, #3
 8013088:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 801308c:	b29b      	uxth	r3, r3
 801308e:	b292      	uxth	r2, r2
 8013090:	b289      	uxth	r1, r1
 8013092:	9600      	str	r6, [sp, #0]
 8013094:	b280      	uxth	r0, r0
 8013096:	f008 febe 	bl	801be16 <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 801309a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801309e:	f009 f8e9 	bl	801c274 <TFT_SetTextColor>
 80130a2:	1d2e      	adds	r6, r5, #4
			TFT_SetFont(&Font26RU_arch_small);
 80130a4:	4879      	ldr	r0, [pc, #484]	; (801328c <GUI_Text_E_Measure+0x31c>)
 80130a6:	f009 f8df 	bl	801c268 <TFT_SetFont>
 80130aa:	f104 09d7 	add.w	r9, r4, #215	; 0xd7
 80130ae:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
 80130b2:	b2b6      	uxth	r6, r6
			if(deg){
 80130b4:	2f00      	cmp	r7, #0
 80130b6:	f000 80cb 	beq.w	8013250 <GUI_Text_E_Measure+0x2e0>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 80130ba:	22ba      	movs	r2, #186	; 0xba
 80130bc:	4631      	mov	r1, r6
 80130be:	b280      	uxth	r0, r0
 80130c0:	f009 f8e4 	bl	801c28c <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 80130c4:	22bb      	movs	r2, #187	; 0xbb
 80130c6:	4631      	mov	r1, r6
 80130c8:	fa1f f089 	uxth.w	r0, r9
 80130cc:	f009 f8de 	bl	801c28c <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 80130d0:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80130d4:	22ba      	movs	r2, #186	; 0xba
 80130d6:	4631      	mov	r1, r6
 80130d8:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+200, Y+4, 'л');
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80130da:	f009 f8d7 	bl	801c28c <TFT_DrawCharRus>
			}
			
			
			old_deg_e = deg;
 80130de:	f888 7000 	strb.w	r7, [r8]
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+20, Y+14, 'e');}
	else {
		TFT_SetTextColor(TFT_White);
 80130e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80130e6:	f009 f8c5 	bl	801c274 <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 80130ea:	4869      	ldr	r0, [pc, #420]	; (8013290 <GUI_Text_E_Measure+0x320>)
 80130ec:	f009 f8bc 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80130f0:	f105 010d 	add.w	r1, r5, #13
 80130f4:	f104 0017 	add.w	r0, r4, #23
 80130f8:	227b      	movs	r2, #123	; 0x7b
 80130fa:	e138      	b.n	801336e <GUI_Text_E_Measure+0x3fe>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 80130fc:	4607      	mov	r7, r0
 80130fe:	e77b      	b.n	8012ff8 <GUI_Text_E_Measure+0x88>
			else if(!energy_light & !old_nan_El){
 8013100:	4e5a      	ldr	r6, [pc, #360]	; (801326c <GUI_Text_E_Measure+0x2fc>)
 8013102:	7833      	ldrb	r3, [r6, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1ab      	bne.n	8013060 <GUI_Text_E_Measure+0xf0>
 8013108:	f1b8 0f00 	cmp.w	r8, #0
 801310c:	d1a8      	bne.n	8013060 <GUI_Text_E_Measure+0xf0>
				TFT_SetTextColor(TFT_White);
 801310e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013112:	f009 f8af 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013116:	2063      	movs	r0, #99	; 0x63
 8013118:	f009 f8b2 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801311c:	4859      	ldr	r0, [pc, #356]	; (8013284 <GUI_Text_E_Measure+0x314>)
 801311e:	f009 f8a3 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 8013122:	2163      	movs	r1, #99	; 0x63
 8013124:	f105 031a 	add.w	r3, r5, #26
 8013128:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 801312c:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8013130:	9100      	str	r1, [sp, #0]
 8013132:	b29b      	uxth	r3, r3
 8013134:	b292      	uxth	r2, r2
 8013136:	4629      	mov	r1, r5
 8013138:	b280      	uxth	r0, r0
 801313a:	f008 fe6c 	bl	801be16 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 801313e:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013140:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 8013144:	f88d 300c 	strb.w	r3, [sp, #12]
 8013148:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801314c:	aa03      	add	r2, sp, #12
 801314e:	2303      	movs	r3, #3
 8013150:	4629      	mov	r1, r5
 8013152:	b280      	uxth	r0, r0
 8013154:	f009 f9aa 	bl	801c4ac <TFT_DisplayString>
				old_nan_El = 1;
 8013158:	2301      	movs	r3, #1
 801315a:	7033      	strb	r3, [r6, #0]
 801315c:	e780      	b.n	8013060 <GUI_Text_E_Measure+0xf0>
		Value = floor(Value*10)/10.0;
 801315e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013162:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8013166:	4b41      	ldr	r3, [pc, #260]	; (801326c <GUI_Text_E_Measure+0x2fc>)
 8013168:	f889 6000 	strb.w	r6, [r9]
		Value = floor(Value*10)/10.0;
 801316c:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8013170:	701e      	strb	r6, [r3, #0]
		Value = floor(Value*10)/10.0;
 8013172:	f7ed fa01 	bl	8000578 <__aeabi_f2d>
 8013176:	ec41 0b10 	vmov	d0, r0, r1
 801317a:	f00f fb0d 	bl	8022798 <floor>
 801317e:	2200      	movs	r2, #0
 8013180:	ec51 0b10 	vmov	r0, r1, d0
 8013184:	4b43      	ldr	r3, [pc, #268]	; (8013294 <GUI_Text_E_Measure+0x324>)
 8013186:	f7ed fb75 	bl	8000874 <__aeabi_ddiv>
 801318a:	f7ed fd41 	bl	8000c10 <__aeabi_d2f>
 801318e:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013192:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8013196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801319a:	f249 42d2 	movw	r2, #38098	; 0x94d2
 801319e:	2800      	cmp	r0, #0
 80131a0:	bf14      	ite	ne
 80131a2:	4610      	movne	r0, r2
 80131a4:	4618      	moveq	r0, r3
 80131a6:	f009 f865 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80131aa:	2063      	movs	r0, #99	; 0x63
 80131ac:	f009 f868 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80131b0:	4834      	ldr	r0, [pc, #208]	; (8013284 <GUI_Text_E_Measure+0x314>)
 80131b2:	f009 f859 	bl	801c268 <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);}
 80131b6:	ee18 0a10 	vmov	r0, s16
		sprintf (buffer, "%.1f", Value);
 80131ba:	f7ed f9dd 	bl	8000578 <__aeabi_f2d>
 80131be:	4602      	mov	r2, r0
 80131c0:	460b      	mov	r3, r1
 80131c2:	a803      	add	r0, sp, #12
 80131c4:	4934      	ldr	r1, [pc, #208]	; (8013298 <GUI_Text_E_Measure+0x328>)
 80131c6:	f00c fb39 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 80131ca:	220a      	movs	r2, #10
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80131cc:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 80131ce:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 80131d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80131d6:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80131d8:	ee07 2a10 	vmov	s14, r2
 80131dc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80131e0:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80131e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ec:	db06      	blt.n	80131fc <GUI_Text_E_Measure+0x28c>
			delta_pos-=23;
 80131ee:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 80131f2:	3601      	adds	r6, #1
			dec *= 10;
 80131f4:	434a      	muls	r2, r1
			delta_pos-=23;
 80131f6:	fa5f f989 	uxtb.w	r9, r9
			number++;
 80131fa:	b2f6      	uxtb	r6, r6
 80131fc:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80131fe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013202:	d1e9      	bne.n	80131d8 <GUI_Text_E_Measure+0x268>
	if(energy_light && number < old_num_e )
 8013204:	f1b8 0f00 	cmp.w	r8, #0
 8013208:	d020      	beq.n	801324c <GUI_Text_E_Measure+0x2dc>
 801320a:	4b24      	ldr	r3, [pc, #144]	; (801329c <GUI_Text_E_Measure+0x32c>)
	else if(!energy_light && number < old_num_n)
 801320c:	781a      	ldrb	r2, [r3, #0]
 801320e:	42b2      	cmp	r2, r6
 8013210:	469a      	mov	sl, r3
 8013212:	d90d      	bls.n	8013230 <GUI_Text_E_Measure+0x2c0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 8013214:	2163      	movs	r1, #99	; 0x63
 8013216:	f105 031a 	add.w	r3, r5, #26
 801321a:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 801321e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013222:	9100      	str	r1, [sp, #0]
 8013224:	b29b      	uxth	r3, r3
 8013226:	b292      	uxth	r2, r2
 8013228:	4629      	mov	r1, r5
 801322a:	b280      	uxth	r0, r0
 801322c:	f008 fdf3 	bl	801be16 <TFT_FillRectangle>
	buffer[8] = 0;
 8013230:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013232:	eb04 0009 	add.w	r0, r4, r9
		old_num_n = number;
 8013236:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801323a:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 801323c:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013240:	4629      	mov	r1, r5
 8013242:	2303      	movs	r3, #3
 8013244:	b280      	uxth	r0, r0
 8013246:	f009 f931 	bl	801c4ac <TFT_DisplayString>
 801324a:	e709      	b.n	8013060 <GUI_Text_E_Measure+0xf0>
	else if(!energy_light && number < old_num_n)
 801324c:	4b14      	ldr	r3, [pc, #80]	; (80132a0 <GUI_Text_E_Measure+0x330>)
 801324e:	e7dd      	b.n	801320c <GUI_Text_E_Measure+0x29c>
			TFT_DrawCharRus(X+200, Y+4, 'л');
 8013250:	22bb      	movs	r2, #187	; 0xbb
 8013252:	4631      	mov	r1, r6
 8013254:	b280      	uxth	r0, r0
 8013256:	f009 f819 	bl	801c28c <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 801325a:	22ba      	movs	r2, #186	; 0xba
 801325c:	4631      	mov	r1, r6
 801325e:	fa1f f089 	uxth.w	r0, r9
 8013262:	e73a      	b.n	80130da <GUI_Text_E_Measure+0x16a>
 8013264:	2000022a 	.word	0x2000022a
 8013268:	200056f1 	.word	0x200056f1
 801326c:	20005726 	.word	0x20005726
 8013270:	2000022c 	.word	0x2000022c
 8013274:	200001e8 	.word	0x200001e8
 8013278:	408f4000 	.word	0x408f4000
 801327c:	3ff00000 	.word	0x3ff00000
 8013280:	447a0000 	.word	0x447a0000
 8013284:	200001f0 	.word	0x200001f0
 8013288:	200056f3 	.word	0x200056f3
 801328c:	20000208 	.word	0x20000208
 8013290:	200001c0 	.word	0x200001c0
 8013294:	40240000 	.word	0x40240000
 8013298:	0803128d 	.word	0x0803128d
 801329c:	20000243 	.word	0x20000243
 80132a0:	20000244 	.word	0x20000244
 80132a4:	20005725 	.word	0x20005725
	} else if (Language_status == En && !energy_light)
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	d16e      	bne.n	801338a <GUI_Text_E_Measure+0x41a>
 80132ac:	f1b8 0f00 	cmp.w	r8, #0
 80132b0:	d166      	bne.n	8013380 <GUI_Text_E_Measure+0x410>
		if(deg != old_deg_e){
 80132b2:	4b38      	ldr	r3, [pc, #224]	; (8013394 <GUI_Text_E_Measure+0x424>)
 80132b4:	781a      	ldrb	r2, [r3, #0]
 80132b6:	42ba      	cmp	r2, r7
 80132b8:	4699      	mov	r9, r3
 80132ba:	d031      	beq.n	8013320 <GUI_Text_E_Measure+0x3b0>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 80132bc:	2663      	movs	r6, #99	; 0x63
 80132be:	f105 031a 	add.w	r3, r5, #26
 80132c2:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80132c6:	1ce9      	adds	r1, r5, #3
 80132c8:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 80132cc:	9600      	str	r6, [sp, #0]
 80132ce:	b280      	uxth	r0, r0
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	b292      	uxth	r2, r2
 80132d4:	b289      	uxth	r1, r1
 80132d6:	f008 fd9e 	bl	801be16 <TFT_FillRectangle>
 80132da:	1d2e      	adds	r6, r5, #4
 80132dc:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
			TFT_SetTextColor(TFT_White);
 80132e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 80132e4:	b1ff      	cbz	r7, 8013326 <GUI_Text_E_Measure+0x3b6>
			TFT_SetTextColor(TFT_White);
 80132e6:	f008 ffc5 	bl	801c274 <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 80132ea:	482b      	ldr	r0, [pc, #172]	; (8013398 <GUI_Text_E_Measure+0x428>)
 80132ec:	f008 ffbc 	bl	801c268 <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 80132f0:	b2b6      	uxth	r6, r6
 80132f2:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
 80132f6:	222b      	movs	r2, #43	; 0x2b
 80132f8:	4631      	mov	r1, r6
 80132fa:	b280      	uxth	r0, r0
 80132fc:	f009 f87e 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 8013300:	222a      	movs	r2, #42	; 0x2a
 8013302:	4631      	mov	r1, r6
 8013304:	fa1f f08a 	uxth.w	r0, sl
 8013308:	f009 f878 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 801330c:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
 8013310:	2237      	movs	r2, #55	; 0x37
 8013312:	4631      	mov	r1, r6
 8013314:	b280      	uxth	r0, r0
 8013316:	f009 f871 	bl	801c3fc <TFT_DrawChar>
			old_rulx = 0;
 801331a:	4b20      	ldr	r3, [pc, #128]	; (801339c <GUI_Text_E_Measure+0x42c>)
 801331c:	f883 8000 	strb.w	r8, [r3]
		old_deg_e = deg;
 8013320:	f889 7000 	strb.w	r7, [r9]
 8013324:	e6dd      	b.n	80130e2 <GUI_Text_E_Measure+0x172>
			TFT_SetTextColor(TFT_White);
 8013326:	f008 ffa5 	bl	801c274 <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 801332a:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_small);
 801332c:	481a      	ldr	r0, [pc, #104]	; (8013398 <GUI_Text_E_Measure+0x428>)
 801332e:	f008 ff9b 	bl	801c268 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8013332:	4631      	mov	r1, r6
 8013334:	fa1f f08a 	uxth.w	r0, sl
 8013338:	222b      	movs	r2, #43	; 0x2b
 801333a:	f009 f85f 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 801333e:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 8013342:	2237      	movs	r2, #55	; 0x37
 8013344:	4631      	mov	r1, r6
 8013346:	b280      	uxth	r0, r0
 8013348:	f009 f858 	bl	801c3fc <TFT_DrawChar>
 801334c:	e7e8      	b.n	8013320 <GUI_Text_E_Measure+0x3b0>
		GUI_TextRu_W_m2(234, Y);
 801334e:	4629      	mov	r1, r5
 8013350:	20ea      	movs	r0, #234	; 0xea
 8013352:	f005 fa2b 	bl	80187ac <GUI_TextRu_W_m2>
			TFT_SetTextColor(TFT_White);
 8013356:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801335a:	f008 ff8b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 801335e:	4810      	ldr	r0, [pc, #64]	; (80133a0 <GUI_Text_E_Measure+0x430>)
 8013360:	f008 ff82 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8013364:	f105 010e 	add.w	r1, r5, #14
 8013368:	f104 0014 	add.w	r0, r4, #20
 801336c:	2265      	movs	r2, #101	; 0x65
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 801336e:	b289      	uxth	r1, r1
 8013370:	b280      	uxth	r0, r0
 8013372:	f009 f843 	bl	801c3fc <TFT_DrawChar>
	}

}
 8013376:	b006      	add	sp, #24
 8013378:	ecbd 8b02 	vpop	{d8}
 801337c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		GUI_TextEn_W_m2(234, Y);
 8013380:	4629      	mov	r1, r5
 8013382:	20ea      	movs	r0, #234	; 0xea
 8013384:	f004 f8aa 	bl	80174dc <GUI_TextEn_W_m2>
 8013388:	e7e5      	b.n	8013356 <GUI_Text_E_Measure+0x3e6>
		if(energy_light) {
 801338a:	f1b8 0f00 	cmp.w	r8, #0
 801338e:	d1e2      	bne.n	8013356 <GUI_Text_E_Measure+0x3e6>
 8013390:	e6a7      	b.n	80130e2 <GUI_Text_E_Measure+0x172>
 8013392:	bf00      	nop
 8013394:	2000022c 	.word	0x2000022c
 8013398:	200001f8 	.word	0x200001f8
 801339c:	20005731 	.word	0x20005731
 80133a0:	200001c0 	.word	0x200001c0

080133a4 <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 80133a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a8:	ed2d 8b02 	vpush	{d8}
 80133ac:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 80133ae:	4bb7      	ldr	r3, [pc, #732]	; (801368c <GUI_Text_L_Measure+0x2e8>)
{
 80133b0:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 80133b2:	781a      	ldrb	r2, [r3, #0]
 80133b4:	4bb6      	ldr	r3, [pc, #728]	; (8013690 <GUI_Text_L_Measure+0x2ec>)
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	429a      	cmp	r2, r3
{
 80133ba:	b086      	sub	sp, #24
 80133bc:	4604      	mov	r4, r0
 80133be:	460d      	mov	r5, r1
 80133c0:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 80133c4:	d007      	beq.n	80133d6 <GUI_Text_L_Measure+0x32>
 80133c6:	4ab3      	ldr	r2, [pc, #716]	; (8013694 <GUI_Text_L_Measure+0x2f0>)
 80133c8:	2300      	movs	r3, #0
 80133ca:	7013      	strb	r3, [r2, #0]
 80133cc:	4ab2      	ldr	r2, [pc, #712]	; (8013698 <GUI_Text_L_Measure+0x2f4>)
 80133ce:	7013      	strb	r3, [r2, #0]
 80133d0:	4bb2      	ldr	r3, [pc, #712]	; (801369c <GUI_Text_L_Measure+0x2f8>)
 80133d2:	22ff      	movs	r2, #255	; 0xff
 80133d4:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 80133d6:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80133d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 80133dc:	9303      	str	r3, [sp, #12]
 80133de:	9304      	str	r3, [sp, #16]
 80133e0:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80133e4:	f008 ff46 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80133e8:	2063      	movs	r0, #99	; 0x63
 80133ea:	f008 ff49 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80133ee:	48ac      	ldr	r0, [pc, #688]	; (80136a0 <GUI_Text_L_Measure+0x2fc>)
 80133f0:	f008 ff3a 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 80133f4:	1ca9      	adds	r1, r5, #2
 80133f6:	4620      	mov	r0, r4
 80133f8:	222b      	movs	r2, #43	; 0x2b
 80133fa:	b289      	uxth	r1, r1
 80133fc:	f008 fffe 	bl	801c3fc <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 8013400:	48a8      	ldr	r0, [pc, #672]	; (80136a4 <GUI_Text_L_Measure+0x300>)
	if(energy_light) {
 8013402:	f1b9 0f00 	cmp.w	r9, #0
 8013406:	f000 8097 	beq.w	8013538 <GUI_Text_L_Measure+0x194>
	TFT_SetFont(&Font16EN_arch_small);
 801340a:	f008 ff2d 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 801340e:	f105 010e 	add.w	r1, r5, #14
 8013412:	f104 0014 	add.w	r0, r4, #20
 8013416:	2265      	movs	r2, #101	; 0x65
 8013418:	b289      	uxth	r1, r1
 801341a:	b280      	uxth	r0, r0
 801341c:	f008 ffee 	bl	801c3fc <TFT_DrawChar>
 8013420:	4f9c      	ldr	r7, [pc, #624]	; (8013694 <GUI_Text_L_Measure+0x2f0>)
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nope) 
 8013422:	2e00      	cmp	r6, #0
 8013424:	f040 8098 	bne.w	8013558 <GUI_Text_L_Measure+0x1b4>
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light) {old_nan_Le = 0;}
 8013428:	703e      	strb	r6, [r7, #0]
	if(!energy_light) {old_nan_Ll = 0;}
	Value = floor(Value*10)/10.0;
 801342a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801342e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013432:	ee17 0a90 	vmov	r0, s15
 8013436:	f7ed f89f 	bl	8000578 <__aeabi_f2d>
 801343a:	ec41 0b10 	vmov	d0, r0, r1
 801343e:	f00f f9ab 	bl	8022798 <floor>
 8013442:	2200      	movs	r2, #0
 8013444:	4b98      	ldr	r3, [pc, #608]	; (80136a8 <GUI_Text_L_Measure+0x304>)
 8013446:	ec51 0b10 	vmov	r0, r1, d0
 801344a:	f7ed fa13 	bl	8000874 <__aeabi_ddiv>
 801344e:	f7ed fbdf 	bl	8000c10 <__aeabi_d2f>
 8013452:	ee08 0a10 	vmov	s16, r0
	
	if((Value/1000.0) >= 1.0)
 8013456:	f7ed f88f 	bl	8000578 <__aeabi_f2d>
 801345a:	2200      	movs	r2, #0
 801345c:	4b93      	ldr	r3, [pc, #588]	; (80136ac <GUI_Text_L_Measure+0x308>)
 801345e:	f7ed fa09 	bl	8000874 <__aeabi_ddiv>
 8013462:	2200      	movs	r2, #0
 8013464:	4b92      	ldr	r3, [pc, #584]	; (80136b0 <GUI_Text_L_Measure+0x30c>)
 8013466:	f7ed fb61 	bl	8000b2c <__aeabi_dcmpge>
 801346a:	2800      	cmp	r0, #0
 801346c:	f000 80fb 	beq.w	8013666 <GUI_Text_L_Measure+0x2c2>
	{
		Value = Value/(1000.0);
 8013470:	eddf 7a90 	vldr	s15, [pc, #576]	; 80136b4 <GUI_Text_L_Measure+0x310>
 8013474:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8013478:	2601      	movs	r6, #1
		meas_type = 1;
	}else {meas_type = 0;}
	
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801347a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801347e:	f249 43d2 	movw	r3, #38098	; 0x94d2
 8013482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013486:	2800      	cmp	r0, #0
 8013488:	bf0c      	ite	eq
 801348a:	4610      	moveq	r0, r2
 801348c:	4618      	movne	r0, r3
 801348e:	f008 fef1 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013492:	2063      	movs	r0, #99	; 0x63
 8013494:	f008 fef4 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013498:	4887      	ldr	r0, [pc, #540]	; (80136b8 <GUI_Text_L_Measure+0x314>)
 801349a:	f008 fee5 	bl	801c268 <TFT_SetFont>
	
	sprintf (buffer, "%.1f", Value);
 801349e:	ee18 0a10 	vmov	r0, s16
 80134a2:	f7ed f869 	bl	8000578 <__aeabi_f2d>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	a803      	add	r0, sp, #12
 80134ac:	4983      	ldr	r1, [pc, #524]	; (80136bc <GUI_Text_L_Measure+0x318>)
 80134ae:	f00c f9c5 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 80134b2:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 80134b4:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 80134b6:	2700      	movs	r7, #0
 80134b8:	f04f 0875 	mov.w	r8, #117	; 0x75


for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80134bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 80134c0:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80134c2:	ee07 2a10 	vmov	s14, r2
 80134c6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80134ca:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80134ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d6:	db06      	blt.n	80134e6 <GUI_Text_L_Measure+0x142>
			delta_pos-=23;
 80134d8:	f1a8 0817 	sub.w	r8, r8, #23
			number++;
 80134dc:	3701      	adds	r7, #1
			dec *= 10;
 80134de:	434a      	muls	r2, r1
			delta_pos-=23;
 80134e0:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80134e4:	b2ff      	uxtb	r7, r7
 80134e6:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 80134e8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80134ec:	d1e9      	bne.n	80134c2 <GUI_Text_L_Measure+0x11e>
		}
	}
	
	if(energy_light && number < old_numL_e )
 80134ee:	f1b9 0f00 	cmp.w	r9, #0
 80134f2:	f000 80ba 	beq.w	801366a <GUI_Text_L_Measure+0x2c6>
 80134f6:	4b72      	ldr	r3, [pc, #456]	; (80136c0 <GUI_Text_L_Measure+0x31c>)
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_numL_n)
 80134f8:	781a      	ldrb	r2, [r3, #0]
 80134fa:	42ba      	cmp	r2, r7
 80134fc:	469a      	mov	sl, r3
 80134fe:	d90d      	bls.n	801351c <GUI_Text_L_Measure+0x178>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013500:	2163      	movs	r1, #99	; 0x63
 8013502:	f105 031a 	add.w	r3, r5, #26
 8013506:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801350a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801350e:	9100      	str	r1, [sp, #0]
 8013510:	b29b      	uxth	r3, r3
 8013512:	b292      	uxth	r2, r2
 8013514:	4629      	mov	r1, r5
 8013516:	b280      	uxth	r0, r0
 8013518:	f008 fc7d 	bl	801be16 <TFT_FillRectangle>
		old_numL_e = number;}
	else{
		old_numL_n = number;
	}
	
	buffer[8] = 0;
 801351c:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801351e:	eb04 0008 	add.w	r0, r4, r8
		old_numL_n = number;
 8013522:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013526:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8013528:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801352c:	4629      	mov	r1, r5
 801352e:	2303      	movs	r3, #3
 8013530:	b280      	uxth	r0, r0
 8013532:	f008 ffbb 	bl	801c4ac <TFT_DisplayString>
 8013536:	e06c      	b.n	8013612 <GUI_Text_L_Measure+0x26e>
		TFT_SetFont(&Font16EN_arch_small);
 8013538:	f008 fe96 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 801353c:	f105 010d 	add.w	r1, r5, #13
 8013540:	f104 0017 	add.w	r0, r4, #23
 8013544:	227b      	movs	r2, #123	; 0x7b
 8013546:	b289      	uxth	r1, r1
 8013548:	b280      	uxth	r0, r0
 801354a:	f008 ff57 	bl	801c3fc <TFT_DrawChar>
	if(nope) 
 801354e:	bb96      	cbnz	r6, 80135b6 <GUI_Text_L_Measure+0x212>
	if(!energy_light) {old_nan_Ll = 0;}
 8013550:	4b51      	ldr	r3, [pc, #324]	; (8013698 <GUI_Text_L_Measure+0x2f4>)
 8013552:	f883 9000 	strb.w	r9, [r3]
 8013556:	e768      	b.n	801342a <GUI_Text_L_Measure+0x86>
			if(energy_light & !old_nan_Le){
 8013558:	783e      	ldrb	r6, [r7, #0]
 801355a:	2e00      	cmp	r6, #0
 801355c:	bf14      	ite	ne
 801355e:	2600      	movne	r6, #0
 8013560:	f009 0601 	andeq.w	r6, r9, #1
 8013564:	2e00      	cmp	r6, #0
 8013566:	d054      	beq.n	8013612 <GUI_Text_L_Measure+0x26e>
			TFT_SetTextColor(TFT_White);
 8013568:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801356c:	f008 fe82 	bl	801c274 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013570:	2063      	movs	r0, #99	; 0x63
 8013572:	f008 fe85 	bl	801c280 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013576:	4850      	ldr	r0, [pc, #320]	; (80136b8 <GUI_Text_L_Measure+0x314>)
 8013578:	f008 fe76 	bl	801c268 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 801357c:	2163      	movs	r1, #99	; 0x63
 801357e:	f105 031a 	add.w	r3, r5, #26
 8013582:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013586:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801358a:	9100      	str	r1, [sp, #0]
 801358c:	b29b      	uxth	r3, r3
 801358e:	b292      	uxth	r2, r2
 8013590:	4629      	mov	r1, r5
 8013592:	b280      	uxth	r0, r0
 8013594:	f008 fc3f 	bl	801be16 <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8013598:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801359a:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 801359e:	f88d 300c 	strb.w	r3, [sp, #12]
 80135a2:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80135a6:	aa03      	add	r2, sp, #12
 80135a8:	2303      	movs	r3, #3
 80135aa:	4629      	mov	r1, r5
 80135ac:	b280      	uxth	r0, r0
 80135ae:	f008 ff7d 	bl	801c4ac <TFT_DisplayString>
			old_nan_Le = 1;}
 80135b2:	2301      	movs	r3, #1
 80135b4:	703b      	strb	r3, [r7, #0]
			if(!energy_light & !old_nan_Ll){
 80135b6:	4e38      	ldr	r6, [pc, #224]	; (8013698 <GUI_Text_L_Measure+0x2f4>)
 80135b8:	7833      	ldrb	r3, [r6, #0]
 80135ba:	bb4b      	cbnz	r3, 8013610 <GUI_Text_L_Measure+0x26c>
 80135bc:	f1b9 0f00 	cmp.w	r9, #0
 80135c0:	d126      	bne.n	8013610 <GUI_Text_L_Measure+0x26c>
			TFT_SetTextColor(TFT_White);
 80135c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80135c6:	f008 fe55 	bl	801c274 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 80135ca:	2063      	movs	r0, #99	; 0x63
 80135cc:	f008 fe58 	bl	801c280 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 80135d0:	4839      	ldr	r0, [pc, #228]	; (80136b8 <GUI_Text_L_Measure+0x314>)
 80135d2:	f008 fe49 	bl	801c268 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80135d6:	2163      	movs	r1, #99	; 0x63
 80135d8:	f105 031a 	add.w	r3, r5, #26
 80135dc:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80135e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80135e4:	9100      	str	r1, [sp, #0]
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	b292      	uxth	r2, r2
 80135ea:	4629      	mov	r1, r5
 80135ec:	b280      	uxth	r0, r0
 80135ee:	f008 fc12 	bl	801be16 <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 80135f2:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80135f4:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 80135f8:	f88d 300c 	strb.w	r3, [sp, #12]
 80135fc:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013600:	aa03      	add	r2, sp, #12
 8013602:	2303      	movs	r3, #3
 8013604:	4629      	mov	r1, r5
 8013606:	b280      	uxth	r0, r0
 8013608:	f008 ff50 	bl	801c4ac <TFT_DisplayString>
			old_nan_Ll = 1;}
 801360c:	2301      	movs	r3, #1
 801360e:	7033      	strb	r3, [r6, #0]
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8013610:	2600      	movs	r6, #0
	
}
	if (Language_status == Ru && !energy_light)
 8013612:	4b2c      	ldr	r3, [pc, #176]	; (80136c4 <GUI_Text_L_Measure+0x320>)
 8013614:	781f      	ldrb	r7, [r3, #0]
 8013616:	2f00      	cmp	r7, #0
 8013618:	d158      	bne.n	80136cc <GUI_Text_L_Measure+0x328>
 801361a:	f1b9 0f00 	cmp.w	r9, #0
 801361e:	f040 808f 	bne.w	8013740 <GUI_Text_L_Measure+0x39c>
 8013622:	4b1e      	ldr	r3, [pc, #120]	; (801369c <GUI_Text_L_Measure+0x2f8>)
	{
		if (deg && old_deg_L != 1){
 8013624:	781a      	ldrb	r2, [r3, #0]
 8013626:	b316      	cbz	r6, 801366e <GUI_Text_L_Measure+0x2ca>
 8013628:	2a01      	cmp	r2, #1
 801362a:	d017      	beq.n	801365c <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 801362c:	2601      	movs	r6, #1
 801362e:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013630:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8013634:	f105 031a 	add.w	r3, r5, #26
 8013638:	1ce9      	adds	r1, r5, #3
 801363a:	2763      	movs	r7, #99	; 0x63
 801363c:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013640:	9700      	str	r7, [sp, #0]
 8013642:	b29b      	uxth	r3, r3
 8013644:	b292      	uxth	r2, r2
 8013646:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8013648:	b280      	uxth	r0, r0
 801364a:	f008 fbe4 	bl	801be16 <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 801364e:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 8013652:	4632      	mov	r2, r6
 8013654:	4629      	mov	r1, r5
 8013656:	b280      	uxth	r0, r0
 8013658:	f005 f94c 	bl	80188f4 <GUI_TextRu_Cd_m2>
		GUI_TextRu_W_m2_sr(X+210, Y);
	}else if (Language_status == En && energy_light)
	{
		GUI_TextEn_W_m2_sr(X+210, Y);
	}
}
 801365c:	b006      	add	sp, #24
 801365e:	ecbd 8b02 	vpop	{d8}
 8013662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8013666:	4606      	mov	r6, r0
 8013668:	e707      	b.n	801347a <GUI_Text_L_Measure+0xd6>
	else if(!energy_light && number < old_numL_n)
 801366a:	4b17      	ldr	r3, [pc, #92]	; (80136c8 <GUI_Text_L_Measure+0x324>)
 801366c:	e744      	b.n	80134f8 <GUI_Text_L_Measure+0x154>
		}else if(!deg && old_deg_L != 0){
 801366e:	2a00      	cmp	r2, #0
 8013670:	d0f4      	beq.n	801365c <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 8013672:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8013674:	2163      	movs	r1, #99	; 0x63
 8013676:	f105 031a 	add.w	r3, r5, #26
 801367a:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 801367e:	9100      	str	r1, [sp, #0]
 8013680:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 8013684:	b29b      	uxth	r3, r3
 8013686:	b292      	uxth	r2, r2
 8013688:	4629      	mov	r1, r5
 801368a:	e7dd      	b.n	8013648 <GUI_Text_L_Measure+0x2a4>
 801368c:	2000022a 	.word	0x2000022a
 8013690:	200056f1 	.word	0x200056f1
 8013694:	20005728 	.word	0x20005728
 8013698:	20005729 	.word	0x20005729
 801369c:	2000022b 	.word	0x2000022b
 80136a0:	200001e8 	.word	0x200001e8
 80136a4:	200001c0 	.word	0x200001c0
 80136a8:	40240000 	.word	0x40240000
 80136ac:	408f4000 	.word	0x408f4000
 80136b0:	3ff00000 	.word	0x3ff00000
 80136b4:	447a0000 	.word	0x447a0000
 80136b8:	200001f0 	.word	0x200001f0
 80136bc:	0803128d 	.word	0x0803128d
 80136c0:	20000231 	.word	0x20000231
 80136c4:	200056f3 	.word	0x200056f3
 80136c8:	20000232 	.word	0x20000232
	else if (Language_status == En && !energy_light)
 80136cc:	2f01      	cmp	r7, #1
 80136ce:	d1c5      	bne.n	801365c <GUI_Text_L_Measure+0x2b8>
 80136d0:	f1b9 0f00 	cmp.w	r9, #0
 80136d4:	d13b      	bne.n	801374e <GUI_Text_L_Measure+0x3aa>
 80136d6:	4b21      	ldr	r3, [pc, #132]	; (801375c <GUI_Text_L_Measure+0x3b8>)
		if (deg && old_deg_L != 1){
 80136d8:	781a      	ldrb	r2, [r3, #0]
 80136da:	b1d6      	cbz	r6, 8013712 <GUI_Text_L_Measure+0x36e>
 80136dc:	2a01      	cmp	r2, #1
 80136de:	d0bd      	beq.n	801365c <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 80136e0:	701f      	strb	r7, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 80136e2:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 80136e6:	f105 031a 	add.w	r3, r5, #26
 80136ea:	1f69      	subs	r1, r5, #5
 80136ec:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 80136f0:	2663      	movs	r6, #99	; 0x63
 80136f2:	b292      	uxth	r2, r2
 80136f4:	b289      	uxth	r1, r1
 80136f6:	b280      	uxth	r0, r0
 80136f8:	9600      	str	r6, [sp, #0]
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	f008 fb8b 	bl	801be16 <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 8013700:	1f29      	subs	r1, r5, #4
 8013702:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8013706:	463a      	mov	r2, r7
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8013708:	b289      	uxth	r1, r1
 801370a:	b280      	uxth	r0, r0
 801370c:	f003 ff78 	bl	8017600 <GUI_TextEn_cd_m2>
 8013710:	e7a4      	b.n	801365c <GUI_Text_L_Measure+0x2b8>
		}else if(!deg && old_deg_L != 0){
 8013712:	2a00      	cmp	r2, #0
 8013714:	d0a2      	beq.n	801365c <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 8013716:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8013718:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 801371c:	f105 031a 	add.w	r3, r5, #26
 8013720:	1f69      	subs	r1, r5, #5
 8013722:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013726:	2763      	movs	r7, #99	; 0x63
 8013728:	b292      	uxth	r2, r2
 801372a:	b289      	uxth	r1, r1
 801372c:	b280      	uxth	r0, r0
 801372e:	9700      	str	r7, [sp, #0]
 8013730:	b29b      	uxth	r3, r3
 8013732:	f008 fb70 	bl	801be16 <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8013736:	1f29      	subs	r1, r5, #4
 8013738:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 801373c:	4632      	mov	r2, r6
 801373e:	e7e3      	b.n	8013708 <GUI_Text_L_Measure+0x364>
		GUI_TextRu_W_m2_sr(X+210, Y);
 8013740:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8013744:	4629      	mov	r1, r5
 8013746:	b280      	uxth	r0, r0
 8013748:	f005 f872 	bl	8018830 <GUI_TextRu_W_m2_sr>
 801374c:	e786      	b.n	801365c <GUI_Text_L_Measure+0x2b8>
		GUI_TextEn_W_m2_sr(X+210, Y);
 801374e:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8013752:	4629      	mov	r1, r5
 8013754:	b280      	uxth	r0, r0
 8013756:	f003 fefb 	bl	8017550 <GUI_TextEn_W_m2_sr>
}
 801375a:	e77f      	b.n	801365c <GUI_Text_L_Measure+0x2b8>
 801375c:	2000022b 	.word	0x2000022b

08013760 <GUI_Text_PPF_Measure>:
uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8013760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013764:	ed2d 8b02 	vpush	{d8}
 8013768:	4616      	mov	r6, r2
 801376a:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 801376c:	4ab0      	ldr	r2, [pc, #704]	; (8013a30 <GUI_Text_PPF_Measure+0x2d0>)
 801376e:	4bb1      	ldr	r3, [pc, #708]	; (8013a34 <GUI_Text_PPF_Measure+0x2d4>)
 8013770:	4fb1      	ldr	r7, [pc, #708]	; (8013a38 <GUI_Text_PPF_Measure+0x2d8>)
{	
 8013772:	4604      	mov	r4, r0
 8013774:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8013776:	7810      	ldrb	r0, [r2, #0]
 8013778:	7819      	ldrb	r1, [r3, #0]
 801377a:	4288      	cmp	r0, r1
{	
 801377c:	b087      	sub	sp, #28
 801377e:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8013780:	bf1c      	itt	ne
 8013782:	2300      	movne	r3, #0
 8013784:	703b      	strbne	r3, [r7, #0]
	char buffer[9] = {0};
 8013786:	2300      	movs	r3, #0
{	
 8013788:	eeb0 8a40 	vmov.f32	s16, s0
 801378c:	4691      	mov	r9, r2
	char buffer[9] = {0};
 801378e:	9303      	str	r3, [sp, #12]
 8013790:	9304      	str	r3, [sp, #16]
 8013792:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number;
	uint32_t dec = 10;
	
		if(nope) 
 8013796:	2e00      	cmp	r6, #0
 8013798:	d067      	beq.n	801386a <GUI_Text_PPF_Measure+0x10a>
		{	
			if(!old_nan_PPF){
 801379a:	783e      	ldrb	r6, [r7, #0]
 801379c:	2e00      	cmp	r6, #0
 801379e:	f040 80ef 	bne.w	8013980 <GUI_Text_PPF_Measure+0x220>
				TFT_SetTextColor(TFT_White);
 80137a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80137a6:	f008 fd65 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80137aa:	2063      	movs	r0, #99	; 0x63
 80137ac:	f008 fd68 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80137b0:	48a2      	ldr	r0, [pc, #648]	; (8013a3c <GUI_Text_PPF_Measure+0x2dc>)
 80137b2:	f008 fd59 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 80137b6:	2163      	movs	r1, #99	; 0x63
 80137b8:	f105 031a 	add.w	r3, r5, #26
 80137bc:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80137c0:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80137c4:	9100      	str	r1, [sp, #0]
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	b292      	uxth	r2, r2
 80137ca:	4629      	mov	r1, r5
 80137cc:	b280      	uxth	r0, r0
 80137ce:	f008 fb22 	bl	801be16 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80137d2:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80137d4:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 80137d8:	f88d 300c 	strb.w	r3, [sp, #12]
 80137dc:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80137e0:	aa03      	add	r2, sp, #12
 80137e2:	2303      	movs	r3, #3
 80137e4:	4629      	mov	r1, r5
 80137e6:	b280      	uxth	r0, r0
 80137e8:	f008 fe60 	bl	801c4ac <TFT_DisplayString>
				old_nan_PPF = 1;
 80137ec:	2301      	movs	r3, #1
 80137ee:	703b      	strb	r3, [r7, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 80137f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80137f4:	f008 fd3e 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80137f8:	2063      	movs	r0, #99	; 0x63
 80137fa:	f008 fd41 	bl	801c280 <TFT_SetBackColor>
	if(Language_status == Ru ){
 80137fe:	4b90      	ldr	r3, [pc, #576]	; (8013a40 <GUI_Text_PPF_Measure+0x2e0>)
 8013800:	f8df b258 	ldr.w	fp, [pc, #600]	; 8013a5c <GUI_Text_PPF_Measure+0x2fc>
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	1caf      	adds	r7, r5, #2
 8013808:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 801380c:	2b00      	cmp	r3, #0
 801380e:	f040 80bf 	bne.w	8013990 <GUI_Text_PPF_Measure+0x230>
			TFT_SetFont(&Font26RU_arch_big);
 8013812:	488c      	ldr	r0, [pc, #560]	; (8013a44 <GUI_Text_PPF_Measure+0x2e4>)
 8013814:	f008 fd28 	bl	801c268 <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 8013818:	f899 2000 	ldrb.w	r2, [r9]
 801381c:	f898 3000 	ldrb.w	r3, [r8]
 8013820:	429a      	cmp	r2, r3
 8013822:	d012      	beq.n	801384a <GUI_Text_PPF_Measure+0xea>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 8013824:	2293      	movs	r2, #147	; 0x93
 8013826:	4629      	mov	r1, r5
 8013828:	4620      	mov	r0, r4
 801382a:	f008 fd2f 	bl	801c28c <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 801382e:	f104 0018 	add.w	r0, r4, #24
 8013832:	227f      	movs	r2, #127	; 0x7f
 8013834:	4629      	mov	r1, r5
 8013836:	b280      	uxth	r0, r0
 8013838:	f008 fd28 	bl	801c28c <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 801383c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8013840:	228f      	movs	r2, #143	; 0x8f
 8013842:	4629      	mov	r1, r5
 8013844:	b280      	uxth	r0, r0
 8013846:	f008 fd21 	bl	801c28c <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 801384a:	f89b 3000 	ldrb.w	r3, [fp]
 801384e:	2b00      	cmp	r3, #0
 8013850:	f000 8098 	beq.w	8013984 <GUI_Text_PPF_Measure+0x224>
 8013854:	4632      	mov	r2, r6
 8013856:	b2b9      	uxth	r1, r7
 8013858:	fa1f f08a 	uxth.w	r0, sl
 801385c:	f004 feb2 	bl	80185c4 <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 8013860:	b007      	add	sp, #28
 8013862:	ecbd 8b02 	vpop	{d8}
 8013866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 801386a:	783b      	ldrb	r3, [r7, #0]
 801386c:	b16b      	cbz	r3, 801388a <GUI_Text_PPF_Measure+0x12a>
 801386e:	2163      	movs	r1, #99	; 0x63
 8013870:	f105 031a 	add.w	r3, r5, #26
 8013874:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013878:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801387c:	9100      	str	r1, [sp, #0]
 801387e:	b29b      	uxth	r3, r3
 8013880:	b292      	uxth	r2, r2
 8013882:	4629      	mov	r1, r5
 8013884:	b280      	uxth	r0, r0
 8013886:	f008 fac6 	bl	801be16 <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 801388a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801388e:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 8013892:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 8013894:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 8013898:	703b      	strb	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 801389a:	f7ec fe6d 	bl	8000578 <__aeabi_f2d>
 801389e:	ec41 0b10 	vmov	d0, r0, r1
 80138a2:	f00e ff79 	bl	8022798 <floor>
 80138a6:	2200      	movs	r2, #0
 80138a8:	ec51 0b10 	vmov	r0, r1, d0
 80138ac:	4b66      	ldr	r3, [pc, #408]	; (8013a48 <GUI_Text_PPF_Measure+0x2e8>)
 80138ae:	f7ec ffe1 	bl	8000874 <__aeabi_ddiv>
 80138b2:	f7ed f9ad 	bl	8000c10 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 80138b6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013a4c <GUI_Text_PPF_Measure+0x2ec>
	Value = floor(Value*10)/10.0;
 80138ba:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 80138be:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80138c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138c6:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number;
 80138ca:	277a      	movs	r7, #122	; 0x7a
	if((Value/1000) >= 1.0)
 80138cc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		Value = Value/(1000);
 80138d0:	eef4 7a68 	vcmp.f32	s15, s17
 80138d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138d8:	bfa8      	it	ge
 80138da:	eeb0 8a67 	vmovge.f32	s16, s15
 80138de:	bfa8      	it	ge
 80138e0:	2601      	movge	r6, #1
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80138e2:	f1bb 0f00 	cmp.w	fp, #0
 80138e6:	bf08      	it	eq
 80138e8:	4618      	moveq	r0, r3
 80138ea:	f008 fcc3 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80138ee:	2063      	movs	r0, #99	; 0x63
 80138f0:	f008 fcc6 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80138f4:	4851      	ldr	r0, [pc, #324]	; (8013a3c <GUI_Text_PPF_Measure+0x2dc>)
 80138f6:	f008 fcb7 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 80138fa:	ee18 0a10 	vmov	r0, s16
 80138fe:	f7ec fe3b 	bl	8000578 <__aeabi_f2d>
 8013902:	4602      	mov	r2, r0
 8013904:	460b      	mov	r3, r1
 8013906:	a803      	add	r0, sp, #12
 8013908:	4951      	ldr	r1, [pc, #324]	; (8013a50 <GUI_Text_PPF_Measure+0x2f0>)
 801390a:	f00b ff97 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 801390e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8013910:	2304      	movs	r3, #4
			dec *= 10;
 8013912:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013914:	ee07 2a90 	vmov	s15, r2
 8013918:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801391c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8013920:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013928:	db06      	blt.n	8013938 <GUI_Text_PPF_Measure+0x1d8>
			delta_pos-=23;
 801392a:	3f17      	subs	r7, #23
			number++;
 801392c:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 8013930:	434a      	muls	r2, r1
			delta_pos-=23;
 8013932:	b2ff      	uxtb	r7, r7
			number++;
 8013934:	fa5f fa8a 	uxtb.w	sl, sl
 8013938:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 801393a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801393e:	d1e9      	bne.n	8013914 <GUI_Text_PPF_Measure+0x1b4>
	if(number < old_numPPF )
 8013940:	4b44      	ldr	r3, [pc, #272]	; (8013a54 <GUI_Text_PPF_Measure+0x2f4>)
 8013942:	781a      	ldrb	r2, [r3, #0]
 8013944:	4552      	cmp	r2, sl
 8013946:	469b      	mov	fp, r3
 8013948:	d90d      	bls.n	8013966 <GUI_Text_PPF_Measure+0x206>
		TFT_FillRectangle(X+70, Y, X+228, Y+26, TFT_Black_Bkgr);
 801394a:	2163      	movs	r1, #99	; 0x63
 801394c:	f105 031a 	add.w	r3, r5, #26
 8013950:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
 8013954:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8013958:	9100      	str	r1, [sp, #0]
 801395a:	b29b      	uxth	r3, r3
 801395c:	b292      	uxth	r2, r2
 801395e:	4629      	mov	r1, r5
 8013960:	b280      	uxth	r0, r0
 8013962:	f008 fa58 	bl	801be16 <TFT_FillRectangle>
	buffer[8] = 0;
 8013966:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013968:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 801396a:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801396e:	aa03      	add	r2, sp, #12
 8013970:	2303      	movs	r3, #3
 8013972:	4629      	mov	r1, r5
 8013974:	b280      	uxth	r0, r0
	old_numPPF = number;
 8013976:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801397a:	f008 fd97 	bl	801c4ac <TFT_DisplayString>
 801397e:	e737      	b.n	80137f0 <GUI_Text_PPF_Measure+0x90>
	uint8_t	delta_pos = 122, deg = 0, number;
 8013980:	461e      	mov	r6, r3
 8013982:	e735      	b.n	80137f0 <GUI_Text_PPF_Measure+0x90>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8013984:	b2b9      	uxth	r1, r7
 8013986:	fa1f f08a 	uxth.w	r0, sl
 801398a:	f004 fe89 	bl	80186a0 <GUI_TextRu_umol_sr>
 801398e:	e767      	b.n	8013860 <GUI_Text_PPF_Measure+0x100>
			TFT_SetFont(&Font16EN_arch_big);
 8013990:	4831      	ldr	r0, [pc, #196]	; (8013a58 <GUI_Text_PPF_Measure+0x2f8>)
 8013992:	f008 fc69 	bl	801c268 <TFT_SetFont>
			if(Mode_EL){
 8013996:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 801399a:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 801399e:	b333      	cbz	r3, 80139ee <GUI_Text_PPF_Measure+0x28e>
				if(preGUI_screen_state != GUI_screen_state){
 80139a0:	f898 3000 	ldrb.w	r3, [r8]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d01b      	beq.n	80139e0 <GUI_Text_PPF_Measure+0x280>
				TFT_DrawChar(X-10, Y+2, 'P');
 80139a8:	b2bd      	uxth	r5, r7
 80139aa:	f1a4 000a 	sub.w	r0, r4, #10
 80139ae:	2250      	movs	r2, #80	; 0x50
 80139b0:	4629      	mov	r1, r5
 80139b2:	b280      	uxth	r0, r0
 80139b4:	f008 fd22 	bl	801c3fc <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 80139b8:	1d60      	adds	r0, r4, #5
 80139ba:	2250      	movs	r2, #80	; 0x50
 80139bc:	4629      	mov	r1, r5
 80139be:	b280      	uxth	r0, r0
 80139c0:	f008 fd1c 	bl	801c3fc <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 80139c4:	f104 0014 	add.w	r0, r4, #20
 80139c8:	2246      	movs	r2, #70	; 0x46
 80139ca:	4629      	mov	r1, r5
 80139cc:	b280      	uxth	r0, r0
 80139ce:	f008 fd15 	bl	801c3fc <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 80139d2:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80139d6:	2244      	movs	r2, #68	; 0x44
 80139d8:	4629      	mov	r1, r5
 80139da:	b280      	uxth	r0, r0
 80139dc:	f008 fd0e 	bl	801c3fc <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 80139e0:	4632      	mov	r2, r6
 80139e2:	b2b9      	uxth	r1, r7
 80139e4:	fa1f f08a 	uxth.w	r0, sl
 80139e8:	f002 fe8c 	bl	8016704 <GUI_TextEn_umol>
 80139ec:	e738      	b.n	8013860 <GUI_Text_PPF_Measure+0x100>
				if(preGUI_screen_state != GUI_screen_state){
 80139ee:	f898 3000 	ldrb.w	r3, [r8]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d014      	beq.n	8013a20 <GUI_Text_PPF_Measure+0x2c0>
				TFT_DrawChar(X-10, Y+2, 'P');
 80139f6:	b2bd      	uxth	r5, r7
 80139f8:	f1a4 000a 	sub.w	r0, r4, #10
 80139fc:	2250      	movs	r2, #80	; 0x50
 80139fe:	4629      	mov	r1, r5
 8013a00:	b280      	uxth	r0, r0
 8013a02:	f008 fcfb 	bl	801c3fc <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8013a06:	1d60      	adds	r0, r4, #5
 8013a08:	2250      	movs	r2, #80	; 0x50
 8013a0a:	4629      	mov	r1, r5
 8013a0c:	b280      	uxth	r0, r0
 8013a0e:	f008 fcf5 	bl	801c3fc <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 8013a12:	f104 0014 	add.w	r0, r4, #20
 8013a16:	224c      	movs	r2, #76	; 0x4c
 8013a18:	4629      	mov	r1, r5
 8013a1a:	b280      	uxth	r0, r0
 8013a1c:	f008 fcee 	bl	801c3fc <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 8013a20:	4632      	mov	r2, r6
 8013a22:	b2b9      	uxth	r1, r7
 8013a24:	fa1f f08a 	uxth.w	r0, sl
 8013a28:	f002 fed2 	bl	80167d0 <GUI_TextEn_umol_sr>
}
 8013a2c:	e718      	b.n	8013860 <GUI_Text_PPF_Measure+0x100>
 8013a2e:	bf00      	nop
 8013a30:	2000022a 	.word	0x2000022a
 8013a34:	200056f1 	.word	0x200056f1
 8013a38:	2000572a 	.word	0x2000572a
 8013a3c:	200001f0 	.word	0x200001f0
 8013a40:	200056f3 	.word	0x200056f3
 8013a44:	20000200 	.word	0x20000200
 8013a48:	40240000 	.word	0x40240000
 8013a4c:	447a0000 	.word	0x447a0000
 8013a50:	0803128d 	.word	0x0803128d
 8013a54:	20000233 	.word	0x20000233
 8013a58:	200001b0 	.word	0x200001b0
 8013a5c:	20000ebc 	.word	0x20000ebc

08013a60 <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nope, uint8_t grey)
{
 8013a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a64:	ed2d 8b08 	vpush	{d8-d11}
 8013a68:	4616      	mov	r6, r2
 8013a6a:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013a6c:	4aad      	ldr	r2, [pc, #692]	; (8013d24 <GUI_Text_PPFRGB_Measure+0x2c4>)
 8013a6e:	4bae      	ldr	r3, [pc, #696]	; (8013d28 <GUI_Text_PPFRGB_Measure+0x2c8>)
 8013a70:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013d44 <GUI_Text_PPFRGB_Measure+0x2e4>
{
 8013a74:	4605      	mov	r5, r0
 8013a76:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013a78:	7810      	ldrb	r0, [r2, #0]
 8013a7a:	7819      	ldrb	r1, [r3, #0]
{
 8013a7c:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013a7e:	4288      	cmp	r0, r1
 8013a80:	9303      	str	r3, [sp, #12]
 8013a82:	bf1c      	itt	ne
 8013a84:	2300      	movne	r3, #0
 8013a86:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 8013a8a:	2300      	movs	r3, #0
{
 8013a8c:	eef0 aa40 	vmov.f32	s21, s0
 8013a90:	eeb0 ba60 	vmov.f32	s22, s1
 8013a94:	eeb0 8a41 	vmov.f32	s16, s2
 8013a98:	eeb0 aa61 	vmov.f32	s20, s3
 8013a9c:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 8013a9e:	9305      	str	r3, [sp, #20]
 8013aa0:	9306      	str	r3, [sp, #24]
 8013aa2:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;

		if(nope) 
 8013aa6:	2e00      	cmp	r6, #0
 8013aa8:	f000 814e 	beq.w	8013d48 <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 8013aac:	f899 7000 	ldrb.w	r7, [r9]
 8013ab0:	2f00      	cmp	r7, #0
 8013ab2:	f040 8353 	bne.w	801415c <GUI_Text_PPFRGB_Measure+0x6fc>
				TFT_SetTextColor(TFT_White);
 8013ab6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013aba:	f008 fbdb 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013abe:	2063      	movs	r0, #99	; 0x63
 8013ac0:	f008 fbde 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013ac4:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 8013ac8:	4898      	ldr	r0, [pc, #608]	; (8013d2c <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013aca:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 8013ace:	f008 fbcb 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013ad2:	b2b6      	uxth	r6, r6
 8013ad4:	fa1f f888 	uxth.w	r8, r8
 8013ad8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8013adc:	f104 0314 	add.w	r3, r4, #20
 8013ae0:	4630      	mov	r0, r6
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	4642      	mov	r2, r8
 8013ae6:	4621      	mov	r1, r4
 8013ae8:	f8cd a000 	str.w	sl, [sp]
 8013aec:	f008 f993 	bl	801be16 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8013af0:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8013af4:	f104 0115 	add.w	r1, r4, #21
 8013af8:	4630      	mov	r0, r6
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	4642      	mov	r2, r8
 8013afe:	b289      	uxth	r1, r1
 8013b00:	f8cd a000 	str.w	sl, [sp]
 8013b04:	f008 f987 	bl	801be16 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8013b08:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8013b0c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8013b10:	4630      	mov	r0, r6
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	4642      	mov	r2, r8
 8013b16:	b289      	uxth	r1, r1
 8013b18:	f8cd a000 	str.w	sl, [sp]
 8013b1c:	f008 f97b 	bl	801be16 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8013b20:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8013b24:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8013b28:	4630      	mov	r0, r6
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	4642      	mov	r2, r8
 8013b2e:	b289      	uxth	r1, r1
 8013b30:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b34:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8013b38:	f008 f96d 	bl	801be16 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b3c:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 8013b3e:	232d      	movs	r3, #45	; 0x2d
 8013b40:	f88d 3014 	strb.w	r3, [sp, #20]
 8013b44:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b48:	aa05      	add	r2, sp, #20
 8013b4a:	2303      	movs	r3, #3
 8013b4c:	4621      	mov	r1, r4
 8013b4e:	4630      	mov	r0, r6
 8013b50:	f008 fcac 	bl	801c4ac <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8013b54:	f104 0116 	add.w	r1, r4, #22
 8013b58:	2303      	movs	r3, #3
 8013b5a:	aa05      	add	r2, sp, #20
 8013b5c:	b289      	uxth	r1, r1
 8013b5e:	4630      	mov	r0, r6
 8013b60:	f008 fca4 	bl	801c4ac <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8013b64:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8013b68:	2303      	movs	r3, #3
 8013b6a:	aa05      	add	r2, sp, #20
 8013b6c:	b289      	uxth	r1, r1
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f008 fc9c 	bl	801c4ac <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8013b74:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8013b78:	2303      	movs	r3, #3
 8013b7a:	aa05      	add	r2, sp, #20
 8013b7c:	b289      	uxth	r1, r1
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f008 fc94 	bl	801c4ac <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 8013b84:	2301      	movs	r3, #1
 8013b86:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8013b8a:	9b02      	ldr	r3, [sp, #8]
 8013b8c:	781a      	ldrb	r2, [r3, #0]
 8013b8e:	9b03      	ldr	r3, [sp, #12]
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	f000 80c1 	beq.w	8013d1a <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 8013b98:	4e65      	ldr	r6, [pc, #404]	; (8013d30 <GUI_Text_PPFRGB_Measure+0x2d0>)
 8013b9a:	7833      	ldrb	r3, [r6, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f040 82e4 	bne.w	801416a <GUI_Text_PPFRGB_Measure+0x70a>
	{	TFT_SetTextColor(TFT_White);
 8013ba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013ba6:	f008 fb65 	bl	801c274 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 8013baa:	4862      	ldr	r0, [pc, #392]	; (8013d34 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8013bac:	f008 fb5c 	bl	801c268 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 8013bb0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013bb4:	22a1      	movs	r2, #161	; 0xa1
 8013bb6:	4621      	mov	r1, r4
 8013bb8:	b280      	uxth	r0, r0
 8013bba:	f008 fb67 	bl	801c28c <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8013bbe:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 8013bc2:	485d      	ldr	r0, [pc, #372]	; (8013d38 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8013bc4:	f008 fb50 	bl	801c268 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8013bc8:	fa1f f888 	uxth.w	r8, r8
 8013bcc:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8013bd0:	22b8      	movs	r2, #184	; 0xb8
 8013bd2:	4641      	mov	r1, r8
 8013bd4:	b280      	uxth	r0, r0
 8013bd6:	f008 fb59 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 8013bda:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8013bde:	b280      	uxth	r0, r0
 8013be0:	22bd      	movs	r2, #189	; 0xbd
 8013be2:	4641      	mov	r1, r8
 8013be4:	f008 fb52 	bl	801c28c <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8013be8:	4b54      	ldr	r3, [pc, #336]	; (8013d3c <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013bea:	781b      	ldrb	r3, [r3, #0]
 8013bec:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 82b5 	beq.w	8014160 <GUI_Text_PPFRGB_Measure+0x700>
 8013bf6:	463a      	mov	r2, r7
 8013bf8:	4621      	mov	r1, r4
 8013bfa:	b280      	uxth	r0, r0
 8013bfc:	f004 fce2 	bl	80185c4 <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 8013c00:	7833      	ldrb	r3, [r6, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f040 82d1 	bne.w	80141aa <GUI_Text_PPFRGB_Measure+0x74a>
	{	TFT_SetTextColor(TFT_White);
 8013c08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c0c:	f008 fb32 	bl	801c274 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8013c10:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 8013c14:	4847      	ldr	r0, [pc, #284]	; (8013d34 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8013c16:	f008 fb27 	bl	801c268 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8013c1a:	fa1f f888 	uxth.w	r8, r8
 8013c1e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013c22:	2297      	movs	r2, #151	; 0x97
 8013c24:	4641      	mov	r1, r8
 8013c26:	b280      	uxth	r0, r0
 8013c28:	f008 fb30 	bl	801c28c <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8013c2c:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 8013c30:	4841      	ldr	r0, [pc, #260]	; (8013d38 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8013c32:	f008 fb19 	bl	801c268 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8013c36:	fa1f f989 	uxth.w	r9, r9
 8013c3a:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8013c3e:	22b5      	movs	r2, #181	; 0xb5
 8013c40:	4649      	mov	r1, r9
 8013c42:	b280      	uxth	r0, r0
 8013c44:	f008 fb22 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 8013c48:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8013c4c:	b280      	uxth	r0, r0
 8013c4e:	22bb      	movs	r2, #187	; 0xbb
 8013c50:	4649      	mov	r1, r9
 8013c52:	f008 fb1b 	bl	801c28c <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8013c56:	4b39      	ldr	r3, [pc, #228]	; (8013d3c <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013c58:	781b      	ldrb	r3, [r3, #0]
 8013c5a:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f000 829e 	beq.w	80141a0 <GUI_Text_PPFRGB_Measure+0x740>
 8013c64:	463a      	mov	r2, r7
 8013c66:	4641      	mov	r1, r8
 8013c68:	b280      	uxth	r0, r0
 8013c6a:	f004 fcab 	bl	80185c4 <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 8013c6e:	7833      	ldrb	r3, [r6, #0]
 8013c70:	f105 0925 	add.w	r9, r5, #37	; 0x25
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	f040 82bc 	bne.w	80141f2 <GUI_Text_PPFRGB_Measure+0x792>
	{	TFT_SetTextColor(TFT_White);
 8013c7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c7e:	f008 faf9 	bl	801c274 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8013c82:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 8013c86:	482b      	ldr	r0, [pc, #172]	; (8013d34 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8013c88:	f008 faee 	bl	801c268 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8013c8c:	fa1f f888 	uxth.w	r8, r8
 8013c90:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013c94:	229a      	movs	r2, #154	; 0x9a
 8013c96:	4641      	mov	r1, r8
 8013c98:	b280      	uxth	r0, r0
 8013c9a:	f008 faf7 	bl	801c28c <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 8013c9e:	4826      	ldr	r0, [pc, #152]	; (8013d38 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8013ca0:	f008 fae2 	bl	801c268 <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 8013ca4:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8013ca8:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8013cac:	b280      	uxth	r0, r0
 8013cae:	2280      	movs	r2, #128	; 0x80
 8013cb0:	b289      	uxth	r1, r1
 8013cb2:	f008 faeb 	bl	801c28c <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8013cb6:	4b21      	ldr	r3, [pc, #132]	; (8013d3c <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f000 8292 	beq.w	80141e8 <GUI_Text_PPFRGB_Measure+0x788>
 8013cc4:	463a      	mov	r2, r7
 8013cc6:	4641      	mov	r1, r8
 8013cc8:	b280      	uxth	r0, r0
 8013cca:	f004 fc7b 	bl	80185c4 <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 8013cce:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 8013cd2:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 8013cd4:	f008 face 	bl	801c274 <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 8013cd8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 8013cda:	4819      	ldr	r0, [pc, #100]	; (8013d40 <GUI_Text_PPFRGB_Measure+0x2e0>)
 8013cdc:	f008 fac4 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 8013ce0:	2246      	movs	r2, #70	; 0x46
 8013ce2:	4621      	mov	r1, r4
 8013ce4:	fa1f f089 	uxth.w	r0, r9
 8013ce8:	f008 fb88 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 8013cec:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8013cf0:	2252      	movs	r2, #82	; 0x52
 8013cf2:	4621      	mov	r1, r4
 8013cf4:	b280      	uxth	r0, r0
 8013cf6:	f008 fb81 	bl	801c3fc <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8013cfa:	7833      	ldrb	r3, [r6, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	f040 829b 	bne.w	8014238 <GUI_Text_PPFRGB_Measure+0x7d8>
 8013d02:	4b0e      	ldr	r3, [pc, #56]	; (8013d3c <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	f000 828f 	beq.w	801422e <GUI_Text_PPFRGB_Measure+0x7ce>
 8013d10:	463a      	mov	r2, r7
 8013d12:	4621      	mov	r1, r4
 8013d14:	b280      	uxth	r0, r0
 8013d16:	f004 fc55 	bl	80185c4 <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 8013d1a:	b009      	add	sp, #36	; 0x24
 8013d1c:	ecbd 8b08 	vpop	{d8-d11}
 8013d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d24:	2000022a 	.word	0x2000022a
 8013d28:	200056f1 	.word	0x200056f1
 8013d2c:	200001f0 	.word	0x200001f0
 8013d30:	200056f3 	.word	0x200056f3
 8013d34:	200001d0 	.word	0x200001d0
 8013d38:	200001d8 	.word	0x200001d8
 8013d3c:	20000ebc 	.word	0x20000ebc
 8013d40:	200001b0 	.word	0x200001b0
 8013d44:	2000572b 	.word	0x2000572b
		if(old_nan_PPFRGB) 
 8013d48:	f899 3000 	ldrb.w	r3, [r9]
 8013d4c:	b3b3      	cbz	r3, 8013dbc <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013d4e:	f105 0762 	add.w	r7, r5, #98	; 0x62
 8013d52:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 8013d56:	b2bf      	uxth	r7, r7
 8013d58:	fa1f f888 	uxth.w	r8, r8
 8013d5c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8013d60:	f104 0314 	add.w	r3, r4, #20
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	4642      	mov	r2, r8
 8013d68:	4621      	mov	r1, r4
 8013d6a:	4638      	mov	r0, r7
 8013d6c:	f8cd a000 	str.w	sl, [sp]
 8013d70:	f008 f851 	bl	801be16 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8013d74:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8013d78:	f104 0115 	add.w	r1, r4, #21
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	4642      	mov	r2, r8
 8013d80:	b289      	uxth	r1, r1
 8013d82:	4638      	mov	r0, r7
 8013d84:	f8cd a000 	str.w	sl, [sp]
 8013d88:	f008 f845 	bl	801be16 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8013d8c:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8013d90:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	4642      	mov	r2, r8
 8013d98:	b289      	uxth	r1, r1
 8013d9a:	4638      	mov	r0, r7
 8013d9c:	f8cd a000 	str.w	sl, [sp]
 8013da0:	f008 f839 	bl	801be16 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8013da4:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8013da8:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8013dac:	f8cd a000 	str.w	sl, [sp]
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	4642      	mov	r2, r8
 8013db4:	b289      	uxth	r1, r1
 8013db6:	4638      	mov	r0, r7
 8013db8:	f008 f82d 	bl	801be16 <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 8013dbc:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
 8013dc0:	ee68 7a09 	vmul.f32	s15, s16, s18
	old_nan_PPFRGB = 0;
 8013dc4:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 8013dc6:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 8013dca:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 8013dce:	f7ec fbd3 	bl	8000578 <__aeabi_f2d>
 8013dd2:	ec41 0b10 	vmov	d0, r0, r1
 8013dd6:	f00e fcdf 	bl	8022798 <floor>
 8013dda:	2200      	movs	r2, #0
 8013ddc:	ec51 0b10 	vmov	r0, r1, d0
 8013de0:	4bd6      	ldr	r3, [pc, #856]	; (801413c <GUI_Text_PPFRGB_Measure+0x6dc>)
	if((ValueB/1000) > 1.0)
 8013de2:	eddf 8ad7 	vldr	s17, [pc, #860]	; 8014140 <GUI_Text_PPFRGB_Measure+0x6e0>
	ValueB = floor(ValueB*10)/10.0;
 8013de6:	f7ec fd45 	bl	8000874 <__aeabi_ddiv>
 8013dea:	f7ec ff11 	bl	8000c10 <__aeabi_d2f>
 8013dee:	ee09 0a90 	vmov	s19, r0
	if((ValueB/1000) > 1.0)
 8013df2:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013dfa:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8013dfe:	f04f 088c 	mov.w	r8, #140	; 0x8c
 8013e02:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 8013e06:	eef4 7a48 	vcmp.f32	s15, s16
 8013e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0e:	bfc8      	it	gt
 8013e10:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013e14:	45bb      	cmp	fp, r7
 8013e16:	bf08      	it	eq
 8013e18:	4618      	moveq	r0, r3
 8013e1a:	f008 fa2b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013e1e:	2063      	movs	r0, #99	; 0x63
 8013e20:	f008 fa2e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8013e24:	48c7      	ldr	r0, [pc, #796]	; (8014144 <GUI_Text_PPFRGB_Measure+0x6e4>)
 8013e26:	f008 fa1f 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 8013e2a:	ee19 0a90 	vmov	r0, s19
 8013e2e:	f7ec fba3 	bl	8000578 <__aeabi_f2d>
 8013e32:	4602      	mov	r2, r0
 8013e34:	460b      	mov	r3, r1
 8013e36:	a805      	add	r0, sp, #20
 8013e38:	49c3      	ldr	r1, [pc, #780]	; (8014148 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8013e3a:	f00b fcff 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 8013e3e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueB);
 8013e40:	2314      	movs	r3, #20
			dec *= 10;
 8013e42:	4611      	mov	r1, r2
		if((ValueB/((float)dec)) >= 1.0)
 8013e44:	ee07 2a90 	vmov	s15, r2
 8013e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013e4c:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8013e50:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e58:	db06      	blt.n	8013e68 <GUI_Text_PPFRGB_Measure+0x408>
			delta_pos-= 22 - i*2;
 8013e5a:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8013e5e:	3701      	adds	r7, #1
			dec *= 10;
 8013e60:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 8013e62:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8013e66:	b2ff      	uxtb	r7, r7
 8013e68:	3b02      	subs	r3, #2
 8013e6a:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8013e6c:	2b0c      	cmp	r3, #12
 8013e6e:	d1e9      	bne.n	8013e44 <GUI_Text_PPFRGB_Measure+0x3e4>
	if(number < old_numPPFB )
 8013e70:	4bb6      	ldr	r3, [pc, #728]	; (801414c <GUI_Text_PPFRGB_Measure+0x6ec>)
 8013e72:	781a      	ldrb	r2, [r3, #0]
 8013e74:	42ba      	cmp	r2, r7
 8013e76:	4699      	mov	r9, r3
 8013e78:	d90d      	bls.n	8013e96 <GUI_Text_PPFRGB_Measure+0x436>
		TFT_FillRectangle(X+98, Y, X+197, Y+20, TFT_Black_Bkgr);
 8013e7a:	2163      	movs	r1, #99	; 0x63
 8013e7c:	f104 0314 	add.w	r3, r4, #20
 8013e80:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8013e84:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8013e88:	9100      	str	r1, [sp, #0]
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	b292      	uxth	r2, r2
 8013e8e:	4621      	mov	r1, r4
 8013e90:	b280      	uxth	r0, r0
 8013e92:	f007 ffc0 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013e96:	eb05 0008 	add.w	r0, r5, r8
 8013e9a:	2303      	movs	r3, #3
 8013e9c:	aa05      	add	r2, sp, #20
	old_numPPFB = number;
 8013e9e:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013ea2:	4621      	mov	r1, r4
 8013ea4:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8013ea6:	2700      	movs	r7, #0
 8013ea8:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013eac:	f008 fafe 	bl	801c4ac <TFT_DisplayString>
	ValueG = floor(ValueG*10)/10.0;
 8013eb0:	ee6b 7a09 	vmul.f32	s15, s22, s18
	delta_pos = 140;
 8013eb4:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueG = floor(ValueG*10)/10.0;
 8013eb8:	ee17 0a90 	vmov	r0, s15
 8013ebc:	f7ec fb5c 	bl	8000578 <__aeabi_f2d>
 8013ec0:	ec41 0b10 	vmov	d0, r0, r1
 8013ec4:	f00e fc68 	bl	8022798 <floor>
 8013ec8:	2200      	movs	r2, #0
 8013eca:	4b9c      	ldr	r3, [pc, #624]	; (801413c <GUI_Text_PPFRGB_Measure+0x6dc>)
 8013ecc:	ec51 0b10 	vmov	r0, r1, d0
 8013ed0:	f7ec fcd0 	bl	8000874 <__aeabi_ddiv>
 8013ed4:	f7ec fe9c 	bl	8000c10 <__aeabi_d2f>
 8013ed8:	ee09 0a90 	vmov	s19, r0
	if((ValueG/1000) > 1.0)
 8013edc:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 8013ee0:	4898      	ldr	r0, [pc, #608]	; (8014144 <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueG = ValueG/(1000);
 8013ee2:	eef4 7a48 	vcmp.f32	s15, s16
 8013ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eea:	bfc8      	it	gt
 8013eec:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 8013ef0:	f008 f9ba 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 8013ef4:	ee19 0a90 	vmov	r0, s19
 8013ef8:	f7ec fb3e 	bl	8000578 <__aeabi_f2d>
 8013efc:	4602      	mov	r2, r0
 8013efe:	460b      	mov	r3, r1
 8013f00:	a805      	add	r0, sp, #20
 8013f02:	4991      	ldr	r1, [pc, #580]	; (8014148 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8013f04:	f00b fc9a 	bl	801f83c <sprintf>
	dec = 10;
 8013f08:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 8013f0a:	2314      	movs	r3, #20
			dec *= 10;
 8013f0c:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 8013f0e:	ee07 2a90 	vmov	s15, r2
 8013f12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013f16:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8013f1a:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f22:	db06      	blt.n	8013f32 <GUI_Text_PPFRGB_Measure+0x4d2>
			delta_pos-= 22 - i*2;
 8013f24:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8013f28:	3701      	adds	r7, #1
			dec *= 10;
 8013f2a:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 8013f2c:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8013f30:	b2ff      	uxtb	r7, r7
 8013f32:	3b02      	subs	r3, #2
 8013f34:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8013f36:	2b0c      	cmp	r3, #12
 8013f38:	d1e9      	bne.n	8013f0e <GUI_Text_PPFRGB_Measure+0x4ae>
		if(number < old_numPPFG )
 8013f3a:	4b85      	ldr	r3, [pc, #532]	; (8014150 <GUI_Text_PPFRGB_Measure+0x6f0>)
 8013f3c:	781a      	ldrb	r2, [r3, #0]
 8013f3e:	42ba      	cmp	r2, r7
 8013f40:	4699      	mov	r9, r3
 8013f42:	d911      	bls.n	8013f68 <GUI_Text_PPFRGB_Measure+0x508>
		TFT_FillRectangle(X+98, Y+21, X+197, Y+41, TFT_Black_Bkgr);
 8013f44:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8013f48:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8013f4c:	f104 0115 	add.w	r1, r4, #21
 8013f50:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8013f54:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8013f58:	f8cd e000 	str.w	lr, [sp]
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	b292      	uxth	r2, r2
 8013f60:	b289      	uxth	r1, r1
 8013f62:	b280      	uxth	r0, r0
 8013f64:	f007 ff57 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8013f68:	eb05 0008 	add.w	r0, r5, r8
 8013f6c:	f104 0116 	add.w	r1, r4, #22
 8013f70:	2303      	movs	r3, #3
 8013f72:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 8013f74:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8013f78:	b289      	uxth	r1, r1
 8013f7a:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8013f7c:	2700      	movs	r7, #0
 8013f7e:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8013f82:	f008 fa93 	bl	801c4ac <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8013f86:	ee6a 7a89 	vmul.f32	s15, s21, s18
	delta_pos = 140;
 8013f8a:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8013f8e:	ee17 0a90 	vmov	r0, s15
 8013f92:	f7ec faf1 	bl	8000578 <__aeabi_f2d>
 8013f96:	ec41 0b10 	vmov	d0, r0, r1
 8013f9a:	f00e fbfd 	bl	8022798 <floor>
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	4b66      	ldr	r3, [pc, #408]	; (801413c <GUI_Text_PPFRGB_Measure+0x6dc>)
 8013fa2:	ec51 0b10 	vmov	r0, r1, d0
 8013fa6:	f7ec fc65 	bl	8000874 <__aeabi_ddiv>
 8013faa:	f7ec fe31 	bl	8000c10 <__aeabi_d2f>
 8013fae:	ee09 0a90 	vmov	s19, r0
	if((ValueR/1000) > 1.0)
 8013fb2:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 8013fb6:	4863      	ldr	r0, [pc, #396]	; (8014144 <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueR = ValueR/(1000);
 8013fb8:	eef4 7a48 	vcmp.f32	s15, s16
 8013fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc0:	bfc8      	it	gt
 8013fc2:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 8013fc6:	f008 f94f 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 8013fca:	ee19 0a90 	vmov	r0, s19
 8013fce:	f7ec fad3 	bl	8000578 <__aeabi_f2d>
 8013fd2:	4602      	mov	r2, r0
 8013fd4:	460b      	mov	r3, r1
 8013fd6:	a805      	add	r0, sp, #20
 8013fd8:	495b      	ldr	r1, [pc, #364]	; (8014148 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8013fda:	f00b fc2f 	bl	801f83c <sprintf>
	dec = 10;
 8013fde:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 8013fe0:	2314      	movs	r3, #20
			dec *= 10;
 8013fe2:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 8013fe4:	ee07 2a90 	vmov	s15, r2
 8013fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013fec:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8013ff0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff8:	db06      	blt.n	8014008 <GUI_Text_PPFRGB_Measure+0x5a8>
			delta_pos-= 22 - i*2;
 8013ffa:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8013ffe:	3701      	adds	r7, #1
			dec *= 10;
 8014000:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 8014002:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8014006:	b2ff      	uxtb	r7, r7
 8014008:	3b02      	subs	r3, #2
 801400a:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 801400c:	2b0c      	cmp	r3, #12
 801400e:	d1e9      	bne.n	8013fe4 <GUI_Text_PPFRGB_Measure+0x584>
	if(number < old_numPPFR )
 8014010:	4b50      	ldr	r3, [pc, #320]	; (8014154 <GUI_Text_PPFRGB_Measure+0x6f4>)
 8014012:	781a      	ldrb	r2, [r3, #0]
 8014014:	42ba      	cmp	r2, r7
 8014016:	4699      	mov	r9, r3
 8014018:	d911      	bls.n	801403e <GUI_Text_PPFRGB_Measure+0x5de>
		TFT_FillRectangle(X+98, Y+42, X+197, Y+63, TFT_Black_Bkgr);
 801401a:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 801401e:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014022:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8014026:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801402a:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801402e:	f8cd e000 	str.w	lr, [sp]
 8014032:	b29b      	uxth	r3, r3
 8014034:	b292      	uxth	r2, r2
 8014036:	b289      	uxth	r1, r1
 8014038:	b280      	uxth	r0, r0
 801403a:	f007 feec 	bl	801be16 <TFT_FillRectangle>
	buffer[8] = 0;
 801403e:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014040:	eb05 0008 	add.w	r0, r5, r8
 8014044:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8014048:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 801404a:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 801404e:	b289      	uxth	r1, r1
 8014050:	2303      	movs	r3, #3
 8014052:	b280      	uxth	r0, r0
	old_numPPFR = number;
 8014054:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014058:	f008 fa28 	bl	801c4ac <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 801405c:	ee6a 7a09 	vmul.f32	s15, s20, s18
	delta_pos = 140;
 8014060:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 8014064:	ee17 0a90 	vmov	r0, s15
 8014068:	f7ec fa86 	bl	8000578 <__aeabi_f2d>
 801406c:	ec41 0b10 	vmov	d0, r0, r1
 8014070:	f00e fb92 	bl	8022798 <floor>
 8014074:	2200      	movs	r2, #0
 8014076:	4b31      	ldr	r3, [pc, #196]	; (801413c <GUI_Text_PPFRGB_Measure+0x6dc>)
 8014078:	ec51 0b10 	vmov	r0, r1, d0
 801407c:	f7ec fbfa 	bl	8000874 <__aeabi_ddiv>
 8014080:	f7ec fdc6 	bl	8000c10 <__aeabi_d2f>
 8014084:	ee09 0a10 	vmov	s18, r0
	if((ValueFR/1000) > 1.0)
 8014088:	eec9 7a28 	vdiv.f32	s15, s18, s17
	TFT_SetFont(&Font16EN_arch_big);
 801408c:	482d      	ldr	r0, [pc, #180]	; (8014144 <GUI_Text_PPFRGB_Measure+0x6e4>)
	else deg=0;
 801408e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014096:	bfc8      	it	gt
 8014098:	eeb0 9a67 	vmovgt.f32	s18, s15
 801409c:	bfcc      	ite	gt
 801409e:	2701      	movgt	r7, #1
 80140a0:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 80140a2:	f008 f8e1 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 80140a6:	ee19 0a10 	vmov	r0, s18
 80140aa:	f7ec fa65 	bl	8000578 <__aeabi_f2d>
 80140ae:	4602      	mov	r2, r0
 80140b0:	460b      	mov	r3, r1
 80140b2:	a805      	add	r0, sp, #20
 80140b4:	4924      	ldr	r1, [pc, #144]	; (8014148 <GUI_Text_PPFRGB_Measure+0x6e8>)
 80140b6:	f00b fbc1 	bl	801f83c <sprintf>
	dec = 10;
 80140ba:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 80140bc:	2314      	movs	r3, #20
			dec *= 10;
 80140be:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 80140c0:	ee07 2a90 	vmov	s15, r2
 80140c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80140c8:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80140cc:	eef4 7ac8 	vcmpe.f32	s15, s16
 80140d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d4:	db06      	blt.n	80140e4 <GUI_Text_PPFRGB_Measure+0x684>
			delta_pos-= 22 - i*2;
 80140d6:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 80140da:	3601      	adds	r6, #1
			dec *= 10;
 80140dc:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 80140de:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80140e2:	b2f6      	uxtb	r6, r6
 80140e4:	3b02      	subs	r3, #2
 80140e6:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 80140e8:	2b0c      	cmp	r3, #12
 80140ea:	d1e9      	bne.n	80140c0 <GUI_Text_PPFRGB_Measure+0x660>
	if(number < old_numPPFFR )
 80140ec:	4b1a      	ldr	r3, [pc, #104]	; (8014158 <GUI_Text_PPFRGB_Measure+0x6f8>)
 80140ee:	781a      	ldrb	r2, [r3, #0]
 80140f0:	42b2      	cmp	r2, r6
 80140f2:	4699      	mov	r9, r3
 80140f4:	d911      	bls.n	801411a <GUI_Text_PPFRGB_Measure+0x6ba>
		TFT_FillRectangle(X+98, Y+65, X+197, Y+87, TFT_Black_Bkgr);
 80140f6:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80140fa:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80140fe:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8014102:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014106:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801410a:	f8cd e000 	str.w	lr, [sp]
 801410e:	b29b      	uxth	r3, r3
 8014110:	b292      	uxth	r2, r2
 8014112:	b289      	uxth	r1, r1
 8014114:	b280      	uxth	r0, r0
 8014116:	f007 fe7e 	bl	801be16 <TFT_FillRectangle>
	buffer[8] = 0;
 801411a:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801411c:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014120:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 8014124:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014128:	aa05      	add	r2, sp, #20
 801412a:	2303      	movs	r3, #3
 801412c:	b289      	uxth	r1, r1
 801412e:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 8014130:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014134:	f008 f9ba 	bl	801c4ac <TFT_DisplayString>
 8014138:	e527      	b.n	8013b8a <GUI_Text_PPFRGB_Measure+0x12a>
 801413a:	bf00      	nop
 801413c:	40240000 	.word	0x40240000
 8014140:	447a0000 	.word	0x447a0000
 8014144:	200001b0 	.word	0x200001b0
 8014148:	0803128d 	.word	0x0803128d
 801414c:	20000234 	.word	0x20000234
 8014150:	20000236 	.word	0x20000236
 8014154:	20000237 	.word	0x20000237
 8014158:	20000235 	.word	0x20000235
	uint8_t	delta_pos = 140, deg = 0, number=0;
 801415c:	461f      	mov	r7, r3
 801415e:	e514      	b.n	8013b8a <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8014160:	4621      	mov	r1, r4
 8014162:	b280      	uxth	r0, r0
 8014164:	f004 fa9c 	bl	80186a0 <GUI_TextRu_umol_sr>
 8014168:	e54a      	b.n	8013c00 <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 801416a:	2b01      	cmp	r3, #1
 801416c:	f47f ad48 	bne.w	8013c00 <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8014170:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014174:	f008 f87e 	bl	801c274 <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 8014178:	f105 0022 	add.w	r0, r5, #34	; 0x22
 801417c:	4621      	mov	r1, r4
 801417e:	b280      	uxth	r0, r0
 8014180:	f003 fae0 	bl	8017744 <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 8014184:	4b35      	ldr	r3, [pc, #212]	; (801425c <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801418c:	463a      	mov	r2, r7
 801418e:	4621      	mov	r1, r4
 8014190:	b280      	uxth	r0, r0
 8014192:	b113      	cbz	r3, 801419a <GUI_Text_PPFRGB_Measure+0x73a>
 8014194:	f002 fab6 	bl	8016704 <GUI_TextEn_umol>
 8014198:	e532      	b.n	8013c00 <GUI_Text_PPFRGB_Measure+0x1a0>
 801419a:	f002 fb19 	bl	80167d0 <GUI_TextEn_umol_sr>
 801419e:	e52f      	b.n	8013c00 <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 80141a0:	4641      	mov	r1, r8
 80141a2:	b280      	uxth	r0, r0
 80141a4:	f004 fa7c 	bl	80186a0 <GUI_TextRu_umol_sr>
 80141a8:	e561      	b.n	8013c6e <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	f47f ad5f 	bne.w	8013c6e <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 80141b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 80141b4:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 80141b8:	f008 f85c 	bl	801c274 <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 80141bc:	fa1f f888 	uxth.w	r8, r8
 80141c0:	f105 0011 	add.w	r0, r5, #17
 80141c4:	4641      	mov	r1, r8
 80141c6:	b280      	uxth	r0, r0
 80141c8:	f003 fa8a 	bl	80176e0 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 80141cc:	4b23      	ldr	r3, [pc, #140]	; (801425c <GUI_Text_PPFRGB_Measure+0x7fc>)
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80141d4:	463a      	mov	r2, r7
 80141d6:	4641      	mov	r1, r8
 80141d8:	b280      	uxth	r0, r0
 80141da:	b113      	cbz	r3, 80141e2 <GUI_Text_PPFRGB_Measure+0x782>
 80141dc:	f002 fa92 	bl	8016704 <GUI_TextEn_umol>
 80141e0:	e545      	b.n	8013c6e <GUI_Text_PPFRGB_Measure+0x20e>
 80141e2:	f002 faf5 	bl	80167d0 <GUI_TextEn_umol_sr>
 80141e6:	e542      	b.n	8013c6e <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 80141e8:	4641      	mov	r1, r8
 80141ea:	b280      	uxth	r0, r0
 80141ec:	f004 fa58 	bl	80186a0 <GUI_TextRu_umol_sr>
 80141f0:	e56d      	b.n	8013cce <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	f47f ad6b 	bne.w	8013cce <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 80141f8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 80141fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 8014200:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 8014204:	f008 f836 	bl	801c274 <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 8014208:	4641      	mov	r1, r8
 801420a:	fa1f f089 	uxth.w	r0, r9
 801420e:	f003 fac5 	bl	801779c <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 8014212:	4b12      	ldr	r3, [pc, #72]	; (801425c <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801421a:	463a      	mov	r2, r7
 801421c:	4641      	mov	r1, r8
 801421e:	b280      	uxth	r0, r0
 8014220:	b113      	cbz	r3, 8014228 <GUI_Text_PPFRGB_Measure+0x7c8>
 8014222:	f002 fa6f 	bl	8016704 <GUI_TextEn_umol>
 8014226:	e552      	b.n	8013cce <GUI_Text_PPFRGB_Measure+0x26e>
 8014228:	f002 fad2 	bl	80167d0 <GUI_TextEn_umol_sr>
 801422c:	e54f      	b.n	8013cce <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 801422e:	4621      	mov	r1, r4
 8014230:	b280      	uxth	r0, r0
 8014232:	f004 fa35 	bl	80186a0 <GUI_TextRu_umol_sr>
 8014236:	e570      	b.n	8013d1a <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 8014238:	2b01      	cmp	r3, #1
 801423a:	f47f ad6e 	bne.w	8013d1a <GUI_Text_PPFRGB_Measure+0x2ba>
 801423e:	4b07      	ldr	r3, [pc, #28]	; (801425c <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014246:	463a      	mov	r2, r7
 8014248:	4621      	mov	r1, r4
 801424a:	b280      	uxth	r0, r0
 801424c:	b113      	cbz	r3, 8014254 <GUI_Text_PPFRGB_Measure+0x7f4>
 801424e:	f002 fa59 	bl	8016704 <GUI_TextEn_umol>
 8014252:	e562      	b.n	8013d1a <GUI_Text_PPFRGB_Measure+0x2ba>
 8014254:	f002 fabc 	bl	80167d0 <GUI_TextEn_umol_sr>
}
 8014258:	e55f      	b.n	8013d1a <GUI_Text_PPFRGB_Measure+0x2ba>
 801425a:	bf00      	nop
 801425c:	20000ebc 	.word	0x20000ebc

08014260 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nope, uint8_t grey)
{
 8014260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014264:	b087      	sub	sp, #28
 8014266:	4605      	mov	r5, r0
 8014268:	9302      	str	r3, [sp, #8]
 801426a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801426e:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8014270:	2300      	movs	r3, #0
{
 8014272:	460c      	mov	r4, r1
 8014274:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 8014278:	9304      	str	r3, [sp, #16]
 801427a:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nope)
 801427e:	4693      	mov	fp, r2
 8014280:	b922      	cbnz	r2, 801428c <GUI_Text_XYZ_Measure+0x2c>
 8014282:	9b02      	ldr	r3, [sp, #8]
 8014284:	2b64      	cmp	r3, #100	; 0x64
 8014286:	d101      	bne.n	801428c <GUI_Text_XYZ_Measure+0x2c>
 8014288:	9b03      	ldr	r3, [sp, #12]
 801428a:	b10b      	cbz	r3, 8014290 <GUI_Text_XYZ_Measure+0x30>
 801428c:	2e00      	cmp	r6, #0
 801428e:	d07c      	beq.n	801438a <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8014290:	4bb2      	ldr	r3, [pc, #712]	; (801455c <GUI_Text_XYZ_Measure+0x2fc>)
 8014292:	781a      	ldrb	r2, [r3, #0]
 8014294:	469a      	mov	sl, r3
 8014296:	b96a      	cbnz	r2, 80142b4 <GUI_Text_XYZ_Measure+0x54>
 8014298:	2163      	movs	r1, #99	; 0x63
 801429a:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 801429e:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 80142a2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80142a6:	9100      	str	r1, [sp, #0]
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	b292      	uxth	r2, r2
 80142ac:	4621      	mov	r1, r4
 80142ae:	b280      	uxth	r0, r0
 80142b0:	f007 fdb1 	bl	801be16 <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 80142b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80142b8:	f007 ffdc 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80142bc:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 80142c0:	2063      	movs	r0, #99	; 0x63
 80142c2:	f007 ffdd 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80142c6:	fa1f f989 	uxth.w	r9, r9
 80142ca:	48a5      	ldr	r0, [pc, #660]	; (8014560 <GUI_Text_XYZ_Measure+0x300>)
 80142cc:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 80142d0:	f007 ffca 	bl	801c268 <TFT_SetFont>
 80142d4:	fa1f f888 	uxth.w	r8, r8
 80142d8:	222d      	movs	r2, #45	; 0x2d
 80142da:	4621      	mov	r1, r4
 80142dc:	4648      	mov	r0, r9
 80142de:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 80142e2:	f008 f88b 	bl	801c3fc <TFT_DrawChar>
 80142e6:	b2b6      	uxth	r6, r6
 80142e8:	2220      	movs	r2, #32
 80142ea:	4621      	mov	r1, r4
 80142ec:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80142ee:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80142f2:	f008 f883 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80142f6:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80142f8:	222d      	movs	r2, #45	; 0x2d
 80142fa:	4621      	mov	r1, r4
 80142fc:	4630      	mov	r0, r6
 80142fe:	f008 f87d 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014302:	4639      	mov	r1, r7
 8014304:	222d      	movs	r2, #45	; 0x2d
 8014306:	4648      	mov	r0, r9
 8014308:	f008 f878 	bl	801c3fc <TFT_DrawChar>
 801430c:	4639      	mov	r1, r7
 801430e:	2220      	movs	r2, #32
 8014310:	4640      	mov	r0, r8
 8014312:	f008 f873 	bl	801c3fc <TFT_DrawChar>
 8014316:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8014318:	f104 0746 	add.w	r7, r4, #70	; 0x46
 801431c:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801431e:	222d      	movs	r2, #45	; 0x2d
 8014320:	4630      	mov	r0, r6
 8014322:	f008 f86b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8014326:	222d      	movs	r2, #45	; 0x2d
 8014328:	4639      	mov	r1, r7
 801432a:	4648      	mov	r0, r9
 801432c:	f008 f866 	bl	801c3fc <TFT_DrawChar>
 8014330:	2220      	movs	r2, #32
 8014332:	4639      	mov	r1, r7
 8014334:	4640      	mov	r0, r8
 8014336:	f008 f861 	bl	801c3fc <TFT_DrawChar>
 801433a:	222d      	movs	r2, #45	; 0x2d
 801433c:	4639      	mov	r1, r7
 801433e:	4630      	mov	r0, r6
 8014340:	f008 f85c 	bl	801c3fc <TFT_DrawChar>
		old_nanXYZ = 1;
 8014344:	2301      	movs	r3, #1
 8014346:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 801434a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801434e:	f007 ff91 	bl	801c274 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8014352:	2063      	movs	r0, #99	; 0x63
 8014354:	f007 ff94 	bl	801c280 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8014358:	4881      	ldr	r0, [pc, #516]	; (8014560 <GUI_Text_XYZ_Measure+0x300>)
 801435a:	f007 ff85 	bl	801c268 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 801435e:	4621      	mov	r1, r4
 8014360:	4628      	mov	r0, r5
 8014362:	2236      	movs	r2, #54	; 0x36
 8014364:	f008 f84a 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8014368:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801436c:	4628      	mov	r0, r5
 801436e:	2237      	movs	r2, #55	; 0x37
 8014370:	b289      	uxth	r1, r1
 8014372:	f008 f843 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 8014376:	f104 0146 	add.w	r1, r4, #70	; 0x46
 801437a:	2238      	movs	r2, #56	; 0x38
 801437c:	b289      	uxth	r1, r1
 801437e:	4628      	mov	r0, r5
 8014380:	f008 f83c 	bl	801c3fc <TFT_DrawChar>
}	
 8014384:	b007      	add	sp, #28
 8014386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801438a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801438e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014392:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8014396:	2800      	cmp	r0, #0
 8014398:	bf14      	ite	ne
 801439a:	4610      	movne	r0, r2
 801439c:	4618      	moveq	r0, r3
 801439e:	f007 ff69 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80143a2:	2063      	movs	r0, #99	; 0x63
 80143a4:	f007 ff6c 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80143a8:	486e      	ldr	r0, [pc, #440]	; (8014564 <GUI_Text_XYZ_Measure+0x304>)
 80143aa:	f007 ff5d 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 80143ae:	465a      	mov	r2, fp
 80143b0:	496d      	ldr	r1, [pc, #436]	; (8014568 <GUI_Text_XYZ_Measure+0x308>)
 80143b2:	a804      	add	r0, sp, #16
 80143b4:	f00b fa42 	bl	801f83c <sprintf>
	uint8_t	delta_pos = 190, number = 0;
 80143b8:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 80143ba:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 80143be:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 80143c2:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 80143c4:	fbbb f0fa 	udiv	r0, fp, sl
 80143c8:	f7ec f8b4 	bl	8000534 <__aeabi_ui2d>
 80143cc:	2200      	movs	r2, #0
 80143ce:	4b67      	ldr	r3, [pc, #412]	; (801456c <GUI_Text_XYZ_Measure+0x30c>)
 80143d0:	f7ec fbac 	bl	8000b2c <__aeabi_dcmpge>
 80143d4:	b140      	cbz	r0, 80143e8 <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 80143d6:	230a      	movs	r3, #10
			delta_pos-=23;
 80143d8:	3f17      	subs	r7, #23
			number++;
 80143da:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80143de:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80143e2:	b2ff      	uxtb	r7, r7
			number++;
 80143e4:	fa5f f888 	uxtb.w	r8, r8
 80143e8:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 80143ec:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 80143f0:	d1e8      	bne.n	80143c4 <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 80143f2:	4b5f      	ldr	r3, [pc, #380]	; (8014570 <GUI_Text_XYZ_Measure+0x310>)
 80143f4:	781a      	ldrb	r2, [r3, #0]
 80143f6:	4542      	cmp	r2, r8
 80143f8:	4699      	mov	r9, r3
 80143fa:	d802      	bhi.n	8014402 <GUI_Text_XYZ_Measure+0x1a2>
 80143fc:	4b57      	ldr	r3, [pc, #348]	; (801455c <GUI_Text_XYZ_Measure+0x2fc>)
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	b16b      	cbz	r3, 801441e <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 8014402:	2163      	movs	r1, #99	; 0x63
 8014404:	f104 0318 	add.w	r3, r4, #24
 8014408:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801440c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014410:	9100      	str	r1, [sp, #0]
 8014412:	b29b      	uxth	r3, r3
 8014414:	b292      	uxth	r2, r2
 8014416:	4621      	mov	r1, r4
 8014418:	b280      	uxth	r0, r0
 801441a:	f007 fcfc 	bl	801be16 <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801441e:	19e8      	adds	r0, r5, r7
 8014420:	2303      	movs	r3, #3
 8014422:	aa04      	add	r2, sp, #16
 8014424:	4621      	mov	r1, r4
 8014426:	b280      	uxth	r0, r0
	old_numX = number;
 8014428:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801442c:	f008 f83e 	bl	801c4ac <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8014430:	484c      	ldr	r0, [pc, #304]	; (8014564 <GUI_Text_XYZ_Measure+0x304>)
 8014432:	f007 ff19 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 8014436:	9a02      	ldr	r2, [sp, #8]
 8014438:	494b      	ldr	r1, [pc, #300]	; (8014568 <GUI_Text_XYZ_Measure+0x308>)
 801443a:	a804      	add	r0, sp, #16
 801443c:	f00b f9fe 	bl	801f83c <sprintf>
	dec = 10;
 8014440:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 8014444:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 8014448:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 801444c:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 801444e:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8014450:	9b02      	ldr	r3, [sp, #8]
 8014452:	fbb3 f0fa 	udiv	r0, r3, sl
 8014456:	f7ec f86d 	bl	8000534 <__aeabi_ui2d>
 801445a:	2200      	movs	r2, #0
 801445c:	4b43      	ldr	r3, [pc, #268]	; (801456c <GUI_Text_XYZ_Measure+0x30c>)
 801445e:	f7ec fb65 	bl	8000b2c <__aeabi_dcmpge>
 8014462:	b138      	cbz	r0, 8014474 <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 8014464:	3f17      	subs	r7, #23
			number++;
 8014466:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 801446a:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 801446e:	b2ff      	uxtb	r7, r7
			number++;
 8014470:	fa5f f888 	uxtb.w	r8, r8
 8014474:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014478:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 801447c:	d1e8      	bne.n	8014450 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 801447e:	4b3d      	ldr	r3, [pc, #244]	; (8014574 <GUI_Text_XYZ_Measure+0x314>)
 8014480:	781a      	ldrb	r2, [r3, #0]
 8014482:	4542      	cmp	r2, r8
 8014484:	f104 0923 	add.w	r9, r4, #35	; 0x23
 8014488:	469a      	mov	sl, r3
 801448a:	d802      	bhi.n	8014492 <GUI_Text_XYZ_Measure+0x232>
 801448c:	4b33      	ldr	r3, [pc, #204]	; (801455c <GUI_Text_XYZ_Measure+0x2fc>)
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	b173      	cbz	r3, 80144b0 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 8014492:	2163      	movs	r1, #99	; 0x63
 8014494:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8014498:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801449c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80144a0:	9100      	str	r1, [sp, #0]
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	b292      	uxth	r2, r2
 80144a6:	fa1f f189 	uxth.w	r1, r9
 80144aa:	b280      	uxth	r0, r0
 80144ac:	f007 fcb3 	bl	801be16 <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80144b0:	19e8      	adds	r0, r5, r7
 80144b2:	fa1f f189 	uxth.w	r1, r9
 80144b6:	2303      	movs	r3, #3
 80144b8:	aa04      	add	r2, sp, #16
 80144ba:	b280      	uxth	r0, r0
	old_numY = number;
 80144bc:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80144c0:	f007 fff4 	bl	801c4ac <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 80144c4:	4827      	ldr	r0, [pc, #156]	; (8014564 <GUI_Text_XYZ_Measure+0x304>)
 80144c6:	f007 fecf 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 80144ca:	9a03      	ldr	r2, [sp, #12]
 80144cc:	4926      	ldr	r1, [pc, #152]	; (8014568 <GUI_Text_XYZ_Measure+0x308>)
 80144ce:	a804      	add	r0, sp, #16
 80144d0:	f00b f9b4 	bl	801f83c <sprintf>
	 dec = 10;
 80144d4:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 80144d8:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 80144dc:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 80144de:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 80144e0:	9b03      	ldr	r3, [sp, #12]
 80144e2:	fbb3 f0f9 	udiv	r0, r3, r9
 80144e6:	f7ec f825 	bl	8000534 <__aeabi_ui2d>
 80144ea:	2200      	movs	r2, #0
 80144ec:	4b1f      	ldr	r3, [pc, #124]	; (801456c <GUI_Text_XYZ_Measure+0x30c>)
 80144ee:	f7ec fb1d 	bl	8000b2c <__aeabi_dcmpge>
 80144f2:	b128      	cbz	r0, 8014500 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 80144f4:	3f17      	subs	r7, #23
			number++;
 80144f6:	3601      	adds	r6, #1
			dec *= 10;
 80144f8:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 80144fc:	b2ff      	uxtb	r7, r7
			number++;
 80144fe:	b2f6      	uxtb	r6, r6
 8014500:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8014504:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8014508:	d1ea      	bne.n	80144e0 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 801450a:	4b1b      	ldr	r3, [pc, #108]	; (8014578 <GUI_Text_XYZ_Measure+0x318>)
 801450c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 801455c <GUI_Text_XYZ_Measure+0x2fc>
 8014510:	781a      	ldrb	r2, [r3, #0]
 8014512:	42b2      	cmp	r2, r6
 8014514:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 8014518:	4698      	mov	r8, r3
 801451a:	d802      	bhi.n	8014522 <GUI_Text_XYZ_Measure+0x2c2>
 801451c:	f899 3000 	ldrb.w	r3, [r9]
 8014520:	b173      	cbz	r3, 8014540 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8014522:	2163      	movs	r1, #99	; 0x63
 8014524:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 8014528:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801452c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014530:	9100      	str	r1, [sp, #0]
 8014532:	b29b      	uxth	r3, r3
 8014534:	b292      	uxth	r2, r2
 8014536:	fa1f f18a 	uxth.w	r1, sl
 801453a:	b280      	uxth	r0, r0
 801453c:	f007 fc6b 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014540:	19e8      	adds	r0, r5, r7
 8014542:	2303      	movs	r3, #3
 8014544:	aa04      	add	r2, sp, #16
 8014546:	fa1f f18a 	uxth.w	r1, sl
 801454a:	b280      	uxth	r0, r0
	old_numZ = number;
 801454c:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014550:	f007 ffac 	bl	801c4ac <TFT_DisplayString>
	old_nanXYZ = 0;
 8014554:	2300      	movs	r3, #0
 8014556:	f889 3000 	strb.w	r3, [r9]
 801455a:	e6f6      	b.n	801434a <GUI_Text_XYZ_Measure+0xea>
 801455c:	20005722 	.word	0x20005722
 8014560:	200001e8 	.word	0x200001e8
 8014564:	200001f0 	.word	0x200001f0
 8014568:	080244b1 	.word	0x080244b1
 801456c:	3ff00000 	.word	0x3ff00000
 8014570:	20000238 	.word	0x20000238
 8014574:	20000239 	.word	0x20000239
 8014578:	2000023a 	.word	0x2000023a

0801457c <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nope, uint8_t grey)
{
 801457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014580:	ed2d 8b02 	vpush	{d8}
 8014584:	b085      	sub	sp, #20
 8014586:	4604      	mov	r4, r0
 8014588:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 801458a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801458e:	2200      	movs	r2, #0
{
 8014590:	460d      	mov	r5, r1
 8014592:	eef0 8a40 	vmov.f32	s17, s0
 8014596:	eeb0 8a60 	vmov.f32	s16, s1
 801459a:	461e      	mov	r6, r3
	char buffer[5] = {0};
 801459c:	9202      	str	r2, [sp, #8]
 801459e:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 80145a2:	f007 fe67 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80145a6:	2063      	movs	r0, #99	; 0x63
 80145a8:	f007 fe6a 	bl	801c280 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nope){
 80145ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80145b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80146fc <GUI_Text_xy_Measure+0x180>
 80145b8:	f105 0723 	add.w	r7, r5, #35	; 0x23
 80145bc:	d106      	bne.n	80145cc <GUI_Text_xy_Measure+0x50>
 80145be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80145c2:	eeb4 8a67 	vcmp.f32	s16, s15
 80145c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ca:	d002      	beq.n	80145d2 <GUI_Text_xy_Measure+0x56>
 80145cc:	f1b9 0f00 	cmp.w	r9, #0
 80145d0:	d05a      	beq.n	8014688 <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 80145d2:	f898 3000 	ldrb.w	r3, [r8]
 80145d6:	b96b      	cbnz	r3, 80145f4 <GUI_Text_xy_Measure+0x78>
 80145d8:	2163      	movs	r1, #99	; 0x63
 80145da:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80145de:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80145e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80145e6:	9100      	str	r1, [sp, #0]
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	b292      	uxth	r2, r2
 80145ec:	4629      	mov	r1, r5
 80145ee:	b280      	uxth	r0, r0
 80145f0:	f007 fc11 	bl	801be16 <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80145f4:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 80145f8:	483c      	ldr	r0, [pc, #240]	; (80146ec <GUI_Text_xy_Measure+0x170>)
 80145fa:	fa1f fb8b 	uxth.w	fp, fp
 80145fe:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8014602:	f007 fe31 	bl	801c268 <TFT_SetFont>
 8014606:	fa1f fa8a 	uxth.w	sl, sl
 801460a:	222d      	movs	r2, #45	; 0x2d
 801460c:	4629      	mov	r1, r5
 801460e:	4658      	mov	r0, fp
 8014610:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8014614:	f007 fef2 	bl	801c3fc <TFT_DrawChar>
 8014618:	fa1f f989 	uxth.w	r9, r9
 801461c:	2220      	movs	r2, #32
 801461e:	4629      	mov	r1, r5
 8014620:	4650      	mov	r0, sl
 8014622:	f007 feeb 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014626:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014628:	222d      	movs	r2, #45	; 0x2d
 801462a:	4629      	mov	r1, r5
 801462c:	4648      	mov	r0, r9
 801462e:	f007 fee5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014632:	222d      	movs	r2, #45	; 0x2d
 8014634:	4631      	mov	r1, r6
 8014636:	4658      	mov	r0, fp
 8014638:	f007 fee0 	bl	801c3fc <TFT_DrawChar>
 801463c:	2220      	movs	r2, #32
 801463e:	4631      	mov	r1, r6
 8014640:	4650      	mov	r0, sl
 8014642:	f007 fedb 	bl	801c3fc <TFT_DrawChar>
 8014646:	222d      	movs	r2, #45	; 0x2d
 8014648:	4631      	mov	r1, r6
 801464a:	4648      	mov	r0, r9
 801464c:	f007 fed6 	bl	801c3fc <TFT_DrawChar>
		old_nanxy = 1;
 8014650:	2301      	movs	r3, #1
 8014652:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 8014656:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801465a:	f007 fe0b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801465e:	2063      	movs	r0, #99	; 0x63
 8014660:	f007 fe0e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8014664:	4822      	ldr	r0, [pc, #136]	; (80146f0 <GUI_Text_xy_Measure+0x174>)
 8014666:	f007 fdff 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 801466a:	4629      	mov	r1, r5
 801466c:	4620      	mov	r0, r4
 801466e:	2237      	movs	r2, #55	; 0x37
 8014670:	f007 fec4 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8014674:	2238      	movs	r2, #56	; 0x38
 8014676:	b2b9      	uxth	r1, r7
 8014678:	4620      	mov	r0, r4
 801467a:	f007 febf 	bl	801c3fc <TFT_DrawChar>
	
}	
 801467e:	b005      	add	sp, #20
 8014680:	ecbd 8b02 	vpop	{d8}
 8014684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801468c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014690:	2e00      	cmp	r6, #0
 8014692:	bf08      	it	eq
 8014694:	4610      	moveq	r0, r2
 8014696:	f007 fded 	bl	801c274 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 801469a:	4816      	ldr	r0, [pc, #88]	; (80146f4 <GUI_Text_xy_Measure+0x178>)
 801469c:	f007 fde4 	bl	801c268 <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 80146a0:	ee18 0a90 	vmov	r0, s17
 80146a4:	f7eb ff68 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80146a8:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 80146ac:	4602      	mov	r2, r0
 80146ae:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80146b0:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 80146b2:	4911      	ldr	r1, [pc, #68]	; (80146f8 <GUI_Text_xy_Measure+0x17c>)
 80146b4:	a802      	add	r0, sp, #8
 80146b6:	f00b f8c1 	bl	801f83c <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80146ba:	2303      	movs	r3, #3
 80146bc:	aa02      	add	r2, sp, #8
 80146be:	4629      	mov	r1, r5
 80146c0:	4630      	mov	r0, r6
 80146c2:	f007 fef3 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 80146c6:	ee18 0a10 	vmov	r0, s16
 80146ca:	f7eb ff55 	bl	8000578 <__aeabi_f2d>
 80146ce:	4602      	mov	r2, r0
 80146d0:	460b      	mov	r3, r1
 80146d2:	a802      	add	r0, sp, #8
 80146d4:	4908      	ldr	r1, [pc, #32]	; (80146f8 <GUI_Text_xy_Measure+0x17c>)
 80146d6:	f00b f8b1 	bl	801f83c <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80146da:	2303      	movs	r3, #3
 80146dc:	aa02      	add	r2, sp, #8
 80146de:	b2b9      	uxth	r1, r7
 80146e0:	4630      	mov	r0, r6
 80146e2:	f007 fee3 	bl	801c4ac <TFT_DisplayString>
		old_nanxy = 0;
 80146e6:	f888 9000 	strb.w	r9, [r8]
 80146ea:	e7b4      	b.n	8014656 <GUI_Text_xy_Measure+0xda>
 80146ec:	200001e8 	.word	0x200001e8
 80146f0:	200001f8 	.word	0x200001f8
 80146f4:	200001f0 	.word	0x200001f0
 80146f8:	08031297 	.word	0x08031297
 80146fc:	20005730 	.word	0x20005730

08014700 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nope, uint8_t grey)
{
 8014700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014704:	ed2d 8b02 	vpush	{d8}
 8014708:	b087      	sub	sp, #28
 801470a:	4604      	mov	r4, r0
 801470c:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 801470e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8014712:	2300      	movs	r3, #0
{
 8014714:	460d      	mov	r5, r1
 8014716:	eeb0 8a40 	vmov.f32	s16, s0
 801471a:	ee10 9a90 	vmov	r9, s1
 801471e:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8014720:	9304      	str	r3, [sp, #16]
 8014722:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8014726:	f007 fda5 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801472a:	2063      	movs	r0, #99	; 0x63
 801472c:	f007 fda8 	bl	801c280 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nope){
 8014730:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014738:	4f5d      	ldr	r7, [pc, #372]	; (80148b0 <GUI_Text_uv_Measure+0x1b0>)
 801473a:	f105 0623 	add.w	r6, r5, #35	; 0x23
 801473e:	d112      	bne.n	8014766 <GUI_Text_uv_Measure+0x66>
 8014740:	4648      	mov	r0, r9
 8014742:	f7eb ff19 	bl	8000578 <__aeabi_f2d>
 8014746:	a356      	add	r3, pc, #344	; (adr r3, 80148a0 <GUI_Text_uv_Measure+0x1a0>)
 8014748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014750:	f7ec f9f6 	bl	8000b40 <__aeabi_dcmpgt>
 8014754:	b138      	cbz	r0, 8014766 <GUI_Text_uv_Measure+0x66>
 8014756:	a354      	add	r3, pc, #336	; (adr r3, 80148a8 <GUI_Text_uv_Measure+0x1a8>)
 8014758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014760:	f7ec f9d0 	bl	8000b04 <__aeabi_dcmplt>
 8014764:	b910      	cbnz	r0, 801476c <GUI_Text_uv_Measure+0x6c>
 8014766:	f1b8 0f00 	cmp.w	r8, #0
 801476a:	d064      	beq.n	8014836 <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 801476c:	783b      	ldrb	r3, [r7, #0]
 801476e:	b96b      	cbnz	r3, 801478c <GUI_Text_uv_Measure+0x8c>
 8014770:	2163      	movs	r1, #99	; 0x63
 8014772:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8014776:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801477a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801477e:	9100      	str	r1, [sp, #0]
 8014780:	b29b      	uxth	r3, r3
 8014782:	b292      	uxth	r2, r2
 8014784:	4629      	mov	r1, r5
 8014786:	b280      	uxth	r0, r0
 8014788:	f007 fb45 	bl	801be16 <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801478c:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8014790:	4848      	ldr	r0, [pc, #288]	; (80148b4 <GUI_Text_uv_Measure+0x1b4>)
 8014792:	fa1f fb8b 	uxth.w	fp, fp
 8014796:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 801479a:	f007 fd65 	bl	801c268 <TFT_SetFont>
 801479e:	fa1f fa8a 	uxth.w	sl, sl
 80147a2:	222d      	movs	r2, #45	; 0x2d
 80147a4:	4629      	mov	r1, r5
 80147a6:	4658      	mov	r0, fp
 80147a8:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 80147ac:	f007 fe26 	bl	801c3fc <TFT_DrawChar>
 80147b0:	fa1f f989 	uxth.w	r9, r9
 80147b4:	2220      	movs	r2, #32
 80147b6:	4629      	mov	r1, r5
 80147b8:	4650      	mov	r0, sl
 80147ba:	f007 fe1f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80147be:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80147c2:	222d      	movs	r2, #45	; 0x2d
 80147c4:	4629      	mov	r1, r5
 80147c6:	4648      	mov	r0, r9
 80147c8:	f007 fe18 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80147cc:	222d      	movs	r2, #45	; 0x2d
 80147ce:	4641      	mov	r1, r8
 80147d0:	4658      	mov	r0, fp
 80147d2:	f007 fe13 	bl	801c3fc <TFT_DrawChar>
 80147d6:	2220      	movs	r2, #32
 80147d8:	4641      	mov	r1, r8
 80147da:	4650      	mov	r0, sl
 80147dc:	f007 fe0e 	bl	801c3fc <TFT_DrawChar>
 80147e0:	222d      	movs	r2, #45	; 0x2d
 80147e2:	4641      	mov	r1, r8
 80147e4:	4648      	mov	r0, r9
 80147e6:	f007 fe09 	bl	801c3fc <TFT_DrawChar>
		old_nanuv = 1;
 80147ea:	2301      	movs	r3, #1
 80147ec:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 80147ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 80147f2:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 80147f6:	f007 fd3d 	bl	801c274 <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 80147fa:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 80147fc:	482e      	ldr	r0, [pc, #184]	; (80148b8 <GUI_Text_uv_Measure+0x1b8>)
 80147fe:	f007 fd33 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8014802:	4629      	mov	r1, r5
 8014804:	4638      	mov	r0, r7
 8014806:	223a      	movs	r2, #58	; 0x3a
 8014808:	f007 fdf8 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 801480c:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 801480e:	4629      	mov	r1, r5
 8014810:	4620      	mov	r0, r4
 8014812:	2234      	movs	r2, #52	; 0x34
 8014814:	f007 fdf2 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8014818:	4631      	mov	r1, r6
 801481a:	4638      	mov	r0, r7
 801481c:	223a      	movs	r2, #58	; 0x3a
 801481e:	f007 fded 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 8014822:	2235      	movs	r2, #53	; 0x35
 8014824:	4631      	mov	r1, r6
 8014826:	4620      	mov	r0, r4
 8014828:	f007 fde8 	bl	801c3fc <TFT_DrawChar>
}	
 801482c:	b007      	add	sp, #28
 801482e:	ecbd 8b02 	vpop	{d8}
 8014832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801483a:	f249 40d2 	movw	r0, #38098	; 0x94d2
 801483e:	f1ba 0f00 	cmp.w	sl, #0
 8014842:	bf08      	it	eq
 8014844:	4618      	moveq	r0, r3
 8014846:	f007 fd15 	bl	801c274 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 801484a:	481c      	ldr	r0, [pc, #112]	; (80148bc <GUI_Text_uv_Measure+0x1bc>)
 801484c:	f007 fd0c 	bl	801c268 <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 8014850:	ee18 0a10 	vmov	r0, s16
 8014854:	f7eb fe90 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014858:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 801485c:	4602      	mov	r2, r0
 801485e:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014860:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 8014864:	4916      	ldr	r1, [pc, #88]	; (80148c0 <GUI_Text_uv_Measure+0x1c0>)
 8014866:	a804      	add	r0, sp, #16
 8014868:	f00a ffe8 	bl	801f83c <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801486c:	2303      	movs	r3, #3
 801486e:	aa04      	add	r2, sp, #16
 8014870:	4629      	mov	r1, r5
 8014872:	4650      	mov	r0, sl
 8014874:	f007 fe1a 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8014878:	4648      	mov	r0, r9
 801487a:	f7eb fe7d 	bl	8000578 <__aeabi_f2d>
 801487e:	4602      	mov	r2, r0
 8014880:	460b      	mov	r3, r1
 8014882:	a804      	add	r0, sp, #16
 8014884:	490e      	ldr	r1, [pc, #56]	; (80148c0 <GUI_Text_uv_Measure+0x1c0>)
 8014886:	f00a ffd9 	bl	801f83c <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801488a:	2303      	movs	r3, #3
 801488c:	aa04      	add	r2, sp, #16
 801488e:	b2b1      	uxth	r1, r6
 8014890:	4650      	mov	r0, sl
 8014892:	f007 fe0b 	bl	801c4ac <TFT_DisplayString>
		old_nanuv = 0;
 8014896:	f887 8000 	strb.w	r8, [r7]
 801489a:	e7a8      	b.n	80147ee <GUI_Text_uv_Measure+0xee>
 801489c:	f3af 8000 	nop.w
 80148a0:	33333333 	.word	0x33333333
 80148a4:	3fe33333 	.word	0x3fe33333
 80148a8:	ea4a8c15 	.word	0xea4a8c15
 80148ac:	3fe33404 	.word	0x3fe33404
 80148b0:	2000572f 	.word	0x2000572f
 80148b4:	200001e8 	.word	0x200001e8
 80148b8:	200001f8 	.word	0x200001f8
 80148bc:	200001f0 	.word	0x200001f0
 80148c0:	08031297 	.word	0x08031297

080148c4 <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nope, uint8_t grey)
{	
 80148c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c8:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80148ca:	4b71      	ldr	r3, [pc, #452]	; (8014a90 <GUI_Text_CCT_Measure+0x1cc>)
{	
 80148cc:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80148ce:	781a      	ldrb	r2, [r3, #0]
 80148d0:	4b70      	ldr	r3, [pc, #448]	; (8014a94 <GUI_Text_CCT_Measure+0x1d0>)
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	429a      	cmp	r2, r3
{	
 80148d6:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80148d8:	bf1c      	itt	ne
 80148da:	4b6f      	ldrne	r3, [pc, #444]	; (8014a98 <GUI_Text_CCT_Measure+0x1d4>)
 80148dc:	2200      	movne	r2, #0
	char buffer[9] = {0};
 80148de:	f04f 0600 	mov.w	r6, #0
{	
 80148e2:	4605      	mov	r5, r0
	uint8_t	delta_pos = 180, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 80148e4:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80148e8:	bf18      	it	ne
 80148ea:	701a      	strbne	r2, [r3, #0]
{	
 80148ec:	460c      	mov	r4, r1
	char buffer[9] = {0};
 80148ee:	9603      	str	r6, [sp, #12]
 80148f0:	9604      	str	r6, [sp, #16]
 80148f2:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 80148f6:	f007 fcc3 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80148fa:	4868      	ldr	r0, [pc, #416]	; (8014a9c <GUI_Text_CCT_Measure+0x1d8>)
 80148fc:	f007 fcb4 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 8014900:	464a      	mov	r2, r9
 8014902:	4967      	ldr	r1, [pc, #412]	; (8014aa0 <GUI_Text_CCT_Measure+0x1dc>)
 8014904:	a803      	add	r0, sp, #12
 8014906:	f00a ff99 	bl	801f83c <sprintf>
 801490a:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 801490e:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, number = 0;
 8014912:	27b4      	movs	r7, #180	; 0xb4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8014914:	fbb9 f0fa 	udiv	r0, r9, sl
 8014918:	f7eb fe0c 	bl	8000534 <__aeabi_ui2d>
 801491c:	2200      	movs	r2, #0
 801491e:	4b61      	ldr	r3, [pc, #388]	; (8014aa4 <GUI_Text_CCT_Measure+0x1e0>)
 8014920:	f7ec f904 	bl	8000b2c <__aeabi_dcmpge>
 8014924:	b130      	cbz	r0, 8014934 <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 8014926:	230a      	movs	r3, #10
			delta_pos-=23;
 8014928:	3f17      	subs	r7, #23
			number++;
 801492a:	3601      	adds	r6, #1
			dec *= 10;
 801492c:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8014930:	b2ff      	uxtb	r7, r7
			number++;
 8014932:	b2f6      	uxtb	r6, r6
 8014934:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014938:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 801493c:	d1ea      	bne.n	8014914 <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nope) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+100, Y+4, 'N'-33);TFT_DrawChar(X+125, Y+4, 'A'-33);TFT_DrawChar(X+150, Y+4, 'N'-33);}
 801493e:	f1b9 0f00 	cmp.w	r9, #0
 8014942:	d063      	beq.n	8014a0c <GUI_Text_CCT_Measure+0x148>
 8014944:	f11b 0200 	adds.w	r2, fp, #0
 8014948:	bf18      	it	ne
 801494a:	2201      	movne	r2, #1
 801494c:	4b52      	ldr	r3, [pc, #328]	; (8014a98 <GUI_Text_CCT_Measure+0x1d4>)
 801494e:	7819      	ldrb	r1, [r3, #0]
 8014950:	4698      	mov	r8, r3
 8014952:	2900      	cmp	r1, #0
 8014954:	d15c      	bne.n	8014a10 <GUI_Text_CCT_Measure+0x14c>
 8014956:	2a00      	cmp	r2, #0
 8014958:	d05a      	beq.n	8014a10 <GUI_Text_CCT_Measure+0x14c>
 801495a:	2201      	movs	r2, #1
 801495c:	701a      	strb	r2, [r3, #0]
 801495e:	2163      	movs	r1, #99	; 0x63
 8014960:	f104 0319 	add.w	r3, r4, #25
 8014964:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014968:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801496c:	b29b      	uxth	r3, r3
 801496e:	b292      	uxth	r2, r2
 8014970:	9100      	str	r1, [sp, #0]
 8014972:	b280      	uxth	r0, r0
 8014974:	4621      	mov	r1, r4
 8014976:	f007 fa4e 	bl	801be16 <TFT_FillRectangle>
 801497a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801497e:	f007 fc79 	bl	801c274 <TFT_SetTextColor>
 8014982:	1d26      	adds	r6, r4, #4
 8014984:	4848      	ldr	r0, [pc, #288]	; (8014aa8 <GUI_Text_CCT_Measure+0x1e4>)
 8014986:	f007 fc6f 	bl	801c268 <TFT_SetFont>
 801498a:	b2b6      	uxth	r6, r6
 801498c:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8014990:	222d      	movs	r2, #45	; 0x2d
 8014992:	4631      	mov	r1, r6
 8014994:	b280      	uxth	r0, r0
 8014996:	f007 fd31 	bl	801c3fc <TFT_DrawChar>
 801499a:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 801499e:	2220      	movs	r2, #32
 80149a0:	4631      	mov	r1, r6
 80149a2:	b280      	uxth	r0, r0
 80149a4:	f007 fd2a 	bl	801c3fc <TFT_DrawChar>
 80149a8:	f105 0096 	add.w	r0, r5, #150	; 0x96
 80149ac:	222d      	movs	r2, #45	; 0x2d
 80149ae:	4631      	mov	r1, r6
 80149b0:	b280      	uxth	r0, r0
 80149b2:	f007 fd23 	bl	801c3fc <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 80149b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80149ba:	f007 fc5b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80149be:	2063      	movs	r0, #99	; 0x63
 80149c0:	f007 fc5e 	bl	801c280 <TFT_SetBackColor>
	if(Language_status == Ru ){
 80149c4:	4b39      	ldr	r3, [pc, #228]	; (8014aac <GUI_Text_CCT_Measure+0x1e8>)
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	f105 06d7 	add.w	r6, r5, #215	; 0xd7
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d152      	bne.n	8014a76 <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 80149d0:	4837      	ldr	r0, [pc, #220]	; (8014ab0 <GUI_Text_CCT_Measure+0x1ec>)
 80149d2:	f007 fc49 	bl	801c268 <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 80149d6:	2289      	movs	r2, #137	; 0x89
 80149d8:	4621      	mov	r1, r4
 80149da:	4628      	mov	r0, r5
 80149dc:	f007 fc56 	bl	801c28c <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 80149e0:	f105 0018 	add.w	r0, r5, #24
 80149e4:	2295      	movs	r2, #149	; 0x95
 80149e6:	4621      	mov	r1, r4
 80149e8:	b280      	uxth	r0, r0
 80149ea:	f007 fc4f 	bl	801c28c <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 80149ee:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 80149f2:	2291      	movs	r2, #145	; 0x91
 80149f4:	4621      	mov	r1, r4
 80149f6:	b280      	uxth	r0, r0
 80149f8:	f007 fc48 	bl	801c28c <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y, 'К'-17);
 80149fc:	2289      	movs	r2, #137	; 0x89
 80149fe:	4621      	mov	r1, r4
 8014a00:	b2b0      	uxth	r0, r6
 8014a02:	f007 fc43 	bl	801c28c <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+215, Y+4, 'K'-33);
		}	
}
 8014a06:	b007      	add	sp, #28
 8014a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	e79d      	b.n	801494c <GUI_Text_CCT_Measure+0x88>
	else if(!nope & Value != 0){
 8014a10:	f1bb 0f00 	cmp.w	fp, #0
 8014a14:	d1cf      	bne.n	80149b6 <GUI_Text_CCT_Measure+0xf2>
 8014a16:	f1b9 0f00 	cmp.w	r9, #0
 8014a1a:	d0cc      	beq.n	80149b6 <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 8014a1c:	4b25      	ldr	r3, [pc, #148]	; (8014ab4 <GUI_Text_CCT_Measure+0x1f0>)
 8014a1e:	781a      	ldrb	r2, [r3, #0]
 8014a20:	42b2      	cmp	r2, r6
 8014a22:	4699      	mov	r9, r3
 8014a24:	d90d      	bls.n	8014a42 <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+205, Y+25, TFT_Black_Bkgr);
 8014a26:	2163      	movs	r1, #99	; 0x63
 8014a28:	f104 0319 	add.w	r3, r4, #25
 8014a2c:	f105 02cd 	add.w	r2, r5, #205	; 0xcd
 8014a30:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014a34:	9100      	str	r1, [sp, #0]
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	b292      	uxth	r2, r2
 8014a3a:	4621      	mov	r1, r4
 8014a3c:	b280      	uxth	r0, r0
 8014a3e:	f007 f9ea 	bl	801be16 <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014a42:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8014a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a4a:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	bf14      	ite	ne
 8014a52:	4610      	movne	r0, r2
 8014a54:	4618      	moveq	r0, r3
 8014a56:	f007 fc0d 	bl	801c274 <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8014a5a:	1ca1      	adds	r1, r4, #2
 8014a5c:	19e8      	adds	r0, r5, r7
 8014a5e:	2303      	movs	r3, #3
 8014a60:	aa03      	add	r2, sp, #12
 8014a62:	b289      	uxth	r1, r1
 8014a64:	b280      	uxth	r0, r0
	old_numCCT = number;
 8014a66:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8014a6a:	f007 fd1f 	bl	801c4ac <TFT_DisplayString>
 8014a6e:	2300      	movs	r3, #0
 8014a70:	f888 3000 	strb.w	r3, [r8]
 8014a74:	e79f      	b.n	80149b6 <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 8014a76:	3404      	adds	r4, #4
 8014a78:	b2a4      	uxth	r4, r4
 8014a7a:	4621      	mov	r1, r4
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f002 fd09 	bl	8017494 <GUI_TextEn_CCT>
			TFT_DrawChar(X+215, Y+4, 'K'-33);
 8014a82:	222a      	movs	r2, #42	; 0x2a
 8014a84:	4621      	mov	r1, r4
 8014a86:	b2b0      	uxth	r0, r6
 8014a88:	f007 fcb8 	bl	801c3fc <TFT_DrawChar>
}
 8014a8c:	e7bb      	b.n	8014a06 <GUI_Text_CCT_Measure+0x142>
 8014a8e:	bf00      	nop
 8014a90:	2000022a 	.word	0x2000022a
 8014a94:	200056f1 	.word	0x200056f1
 8014a98:	20005723 	.word	0x20005723
 8014a9c:	200001f0 	.word	0x200001f0
 8014aa0:	080244b1 	.word	0x080244b1
 8014aa4:	3ff00000 	.word	0x3ff00000
 8014aa8:	200001e8 	.word	0x200001e8
 8014aac:	200056f3 	.word	0x200056f3
 8014ab0:	20000200 	.word	0x20000200
 8014ab4:	20000230 	.word	0x20000230

08014ab8 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8014ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014abc:	ed2d 8b02 	vpush	{d8}
 8014ac0:	4616      	mov	r6, r2
 8014ac2:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014ac4:	4a71      	ldr	r2, [pc, #452]	; (8014c8c <GUI_Text_lambdaD_Measure+0x1d4>)
 8014ac6:	4b72      	ldr	r3, [pc, #456]	; (8014c90 <GUI_Text_lambdaD_Measure+0x1d8>)
 8014ac8:	4f72      	ldr	r7, [pc, #456]	; (8014c94 <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 8014aca:	4605      	mov	r5, r0
 8014acc:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014ace:	7818      	ldrb	r0, [r3, #0]
 8014ad0:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 8014ad2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014ad6:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 8014ad8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014adc:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014ade:	bf18      	it	ne
 8014ae0:	2300      	movne	r3, #0
{	
 8014ae2:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014ae4:	bf18      	it	ne
 8014ae6:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8014ae8:	ee17 0a90 	vmov	r0, s15
 8014aec:	4690      	mov	r8, r2
 8014aee:	f7eb fd43 	bl	8000578 <__aeabi_f2d>
 8014af2:	ec41 0b10 	vmov	d0, r0, r1
 8014af6:	f00d fe4f 	bl	8022798 <floor>
	char buffer[9] = {0};
 8014afa:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 8014afc:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 8014b00:	9203      	str	r2, [sp, #12]
 8014b02:	9204      	str	r2, [sp, #16]
 8014b04:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
 8014b08:	2e00      	cmp	r6, #0
 8014b0a:	d054      	beq.n	8014bb6 <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 8014b0c:	783b      	ldrb	r3, [r7, #0]
 8014b0e:	bb33      	cbnz	r3, 8014b5e <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 8014b10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014b14:	f007 fbae 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014b18:	2063      	movs	r0, #99	; 0x63
 8014b1a:	f007 fbb1 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8014b1e:	485e      	ldr	r0, [pc, #376]	; (8014c98 <GUI_Text_lambdaD_Measure+0x1e0>)
 8014b20:	f007 fba2 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8014b24:	2163      	movs	r1, #99	; 0x63
 8014b26:	f104 031a 	add.w	r3, r4, #26
 8014b2a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014b2e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014b32:	9100      	str	r1, [sp, #0]
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	b292      	uxth	r2, r2
 8014b38:	4621      	mov	r1, r4
 8014b3a:	b280      	uxth	r0, r0
 8014b3c:	f007 f96b 	bl	801be16 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8014b40:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014b42:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8014b46:	f88d 300c 	strb.w	r3, [sp, #12]
 8014b4a:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014b4e:	aa03      	add	r2, sp, #12
 8014b50:	2303      	movs	r3, #3
 8014b52:	4621      	mov	r1, r4
 8014b54:	b280      	uxth	r0, r0
 8014b56:	f007 fca9 	bl	801c4ac <TFT_DisplayString>
				old_nan_lambdaD = 1;
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8014b5e:	f899 2000 	ldrb.w	r2, [r9]
 8014b62:	f898 3000 	ldrb.w	r3, [r8]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d020      	beq.n	8014bac <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 8014b6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 8014b6e:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8014b70:	f007 fb80 	bl	801c274 <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 8014b74:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014b76:	2063      	movs	r0, #99	; 0x63
 8014b78:	f007 fb82 	bl	801c280 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	4631      	mov	r1, r6
 8014b80:	f001 fd28 	bl	80165d4 <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 8014b84:	4b45      	ldr	r3, [pc, #276]	; (8014c9c <GUI_Text_lambdaD_Measure+0x1e4>)
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 8014b8c:	35d8      	adds	r5, #216	; 0xd8
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d16c      	bne.n	8014c6c <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 8014b92:	4843      	ldr	r0, [pc, #268]	; (8014ca0 <GUI_Text_lambdaD_Measure+0x1e8>)
 8014b94:	f007 fb68 	bl	801c268 <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8014b98:	22bd      	movs	r2, #189	; 0xbd
 8014b9a:	4631      	mov	r1, r6
 8014b9c:	b2b8      	uxth	r0, r7
 8014b9e:	f007 fb75 	bl	801c28c <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 8014ba2:	22bc      	movs	r2, #188	; 0xbc
 8014ba4:	4631      	mov	r1, r6
 8014ba6:	b2a8      	uxth	r0, r5
 8014ba8:	f007 fb70 	bl	801c28c <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 8014bac:	b006      	add	sp, #24
 8014bae:	ecbd 8b02 	vpop	{d8}
 8014bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 8014bb6:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014bbc:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 8014bc0:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014bc2:	f1ba 0f00 	cmp.w	sl, #0
 8014bc6:	bf08      	it	eq
 8014bc8:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 8014bca:	4b36      	ldr	r3, [pc, #216]	; (8014ca4 <GUI_Text_lambdaD_Measure+0x1ec>)
 8014bcc:	f7eb fe52 	bl	8000874 <__aeabi_ddiv>
 8014bd0:	f7ec f81e 	bl	8000c10 <__aeabi_d2f>
 8014bd4:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014bd8:	4638      	mov	r0, r7
 8014bda:	f007 fb4b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014bde:	2063      	movs	r0, #99	; 0x63
 8014be0:	f007 fb4e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014be4:	482c      	ldr	r0, [pc, #176]	; (8014c98 <GUI_Text_lambdaD_Measure+0x1e0>)
 8014be6:	f007 fb3f 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8014bea:	ee18 0a10 	vmov	r0, s16
 8014bee:	f7eb fcc3 	bl	8000578 <__aeabi_f2d>
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	a803      	add	r0, sp, #12
 8014bf8:	492b      	ldr	r1, [pc, #172]	; (8014ca8 <GUI_Text_lambdaD_Measure+0x1f0>)
 8014bfa:	f00a fe1f 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 8014bfe:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8014c00:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 8014c02:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8014c04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8014c08:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8014c0a:	ee07 2a10 	vmov	s14, r2
 8014c0e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8014c12:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8014c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c1e:	db04      	blt.n	8014c2a <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 8014c20:	3f17      	subs	r7, #23
			number++;
 8014c22:	3601      	adds	r6, #1
			dec *= 10;
 8014c24:	434a      	muls	r2, r1
			delta_pos-=23;
 8014c26:	b2ff      	uxtb	r7, r7
			number++;
 8014c28:	b2f6      	uxtb	r6, r6
 8014c2a:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8014c2c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014c30:	d1eb      	bne.n	8014c0a <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 8014c32:	4b1e      	ldr	r3, [pc, #120]	; (8014cac <GUI_Text_lambdaD_Measure+0x1f4>)
 8014c34:	781a      	ldrb	r2, [r3, #0]
 8014c36:	42b2      	cmp	r2, r6
 8014c38:	469a      	mov	sl, r3
 8014c3a:	d90d      	bls.n	8014c58 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8014c3c:	2163      	movs	r1, #99	; 0x63
 8014c3e:	f104 0319 	add.w	r3, r4, #25
 8014c42:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014c46:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014c4a:	9100      	str	r1, [sp, #0]
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	b292      	uxth	r2, r2
 8014c50:	4621      	mov	r1, r4
 8014c52:	b280      	uxth	r0, r0
 8014c54:	f007 f8df 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014c58:	19e8      	adds	r0, r5, r7
 8014c5a:	2303      	movs	r3, #3
 8014c5c:	aa03      	add	r2, sp, #12
 8014c5e:	4621      	mov	r1, r4
 8014c60:	b280      	uxth	r0, r0
	old_lambdaD = number;
 8014c62:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014c66:	f007 fc21 	bl	801c4ac <TFT_DisplayString>
 8014c6a:	e778      	b.n	8014b5e <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 8014c6c:	340a      	adds	r4, #10
 8014c6e:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8014c70:	480f      	ldr	r0, [pc, #60]	; (8014cb0 <GUI_Text_lambdaD_Measure+0x1f8>)
 8014c72:	f007 faf9 	bl	801c268 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 8014c76:	4621      	mov	r1, r4
 8014c78:	b2b8      	uxth	r0, r7
 8014c7a:	226e      	movs	r2, #110	; 0x6e
 8014c7c:	f007 fbbe 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8014c80:	226d      	movs	r2, #109	; 0x6d
 8014c82:	4621      	mov	r1, r4
 8014c84:	b2a8      	uxth	r0, r5
 8014c86:	f007 fbb9 	bl	801c3fc <TFT_DrawChar>
}
 8014c8a:	e78f      	b.n	8014bac <GUI_Text_lambdaD_Measure+0xf4>
 8014c8c:	200056f1 	.word	0x200056f1
 8014c90:	2000022a 	.word	0x2000022a
 8014c94:	2000572e 	.word	0x2000572e
 8014c98:	200001f0 	.word	0x200001f0
 8014c9c:	200056f3 	.word	0x200056f3
 8014ca0:	20000208 	.word	0x20000208
 8014ca4:	40240000 	.word	0x40240000
 8014ca8:	0803128d 	.word	0x0803128d
 8014cac:	2000022e 	.word	0x2000022e
 8014cb0:	200001c0 	.word	0x200001c0

08014cb4 <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8014cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cb8:	ed2d 8b02 	vpush	{d8}
 8014cbc:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8014cbe:	4b76      	ldr	r3, [pc, #472]	; (8014e98 <GUI_Text_deltaE_Measure+0x1e4>)
 8014cc0:	4e76      	ldr	r6, [pc, #472]	; (8014e9c <GUI_Text_deltaE_Measure+0x1e8>)
{	
 8014cc2:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8014cc4:	781a      	ldrb	r2, [r3, #0]
 8014cc6:	4b76      	ldr	r3, [pc, #472]	; (8014ea0 <GUI_Text_deltaE_Measure+0x1ec>)
 8014cc8:	781b      	ldrb	r3, [r3, #0]
 8014cca:	429a      	cmp	r2, r3
{	
 8014ccc:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8014cce:	bf1c      	itt	ne
 8014cd0:	2300      	movne	r3, #0
 8014cd2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	9303      	str	r3, [sp, #12]
 8014cd8:	9304      	str	r3, [sp, #16]
 8014cda:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 8014cde:	4604      	mov	r4, r0
 8014ce0:	460d      	mov	r5, r1
 8014ce2:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_deltaE){
 8014ce6:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8014ce8:	2f00      	cmp	r7, #0
 8014cea:	d047      	beq.n	8014d7c <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 8014cec:	bb33      	cbnz	r3, 8014d3c <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 8014cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014cf2:	f007 fabf 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014cf6:	2063      	movs	r0, #99	; 0x63
 8014cf8:	f007 fac2 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8014cfc:	4869      	ldr	r0, [pc, #420]	; (8014ea4 <GUI_Text_deltaE_Measure+0x1f0>)
 8014cfe:	f007 fab3 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8014d02:	2163      	movs	r1, #99	; 0x63
 8014d04:	f105 031a 	add.w	r3, r5, #26
 8014d08:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8014d0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014d10:	9100      	str	r1, [sp, #0]
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	b292      	uxth	r2, r2
 8014d16:	4629      	mov	r1, r5
 8014d18:	b280      	uxth	r0, r0
 8014d1a:	f007 f87c 	bl	801be16 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8014d1e:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014d20:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8014d24:	f88d 300c 	strb.w	r3, [sp, #12]
 8014d28:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014d2c:	aa03      	add	r2, sp, #12
 8014d2e:	2303      	movs	r3, #3
 8014d30:	4629      	mov	r1, r5
 8014d32:	b280      	uxth	r0, r0
 8014d34:	f007 fbba 	bl	801c4ac <TFT_DisplayString>
				old_nan_deltaE = 1;
 8014d38:	2301      	movs	r3, #1
 8014d3a:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8014d3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014d40:	f007 fa98 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014d44:	2063      	movs	r0, #99	; 0x63
 8014d46:	f007 fa9b 	bl	801c280 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 8014d4a:	4857      	ldr	r0, [pc, #348]	; (8014ea8 <GUI_Text_deltaE_Measure+0x1f4>)
 8014d4c:	f007 fa8c 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 8014d50:	1da9      	adds	r1, r5, #6
 8014d52:	2280      	movs	r2, #128	; 0x80
 8014d54:	b289      	uxth	r1, r1
 8014d56:	4620      	mov	r0, r4
 8014d58:	f007 fb50 	bl	801c3fc <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8014d5c:	4853      	ldr	r0, [pc, #332]	; (8014eac <GUI_Text_deltaE_Measure+0x1f8>)
 8014d5e:	f007 fa83 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 8014d62:	1ca9      	adds	r1, r5, #2
 8014d64:	f104 0012 	add.w	r0, r4, #18
 8014d68:	2224      	movs	r2, #36	; 0x24
 8014d6a:	b289      	uxth	r1, r1
 8014d6c:	b280      	uxth	r0, r0
 8014d6e:	f007 fb45 	bl	801c3fc <TFT_DrawChar>

}
 8014d72:	b007      	add	sp, #28
 8014d74:	ecbd 8b02 	vpop	{d8}
 8014d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 8014d7c:	b163      	cbz	r3, 8014d98 <GUI_Text_deltaE_Measure+0xe4>
 8014d7e:	f101 031a 	add.w	r3, r1, #26
 8014d82:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 8014d86:	2163      	movs	r1, #99	; 0x63
 8014d88:	3028      	adds	r0, #40	; 0x28
 8014d8a:	9100      	str	r1, [sp, #0]
 8014d8c:	b29b      	uxth	r3, r3
 8014d8e:	b292      	uxth	r2, r2
 8014d90:	4629      	mov	r1, r5
 8014d92:	b280      	uxth	r0, r0
 8014d94:	f007 f83f 	bl	801be16 <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 8014d9c:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014da0:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014da4:	45c1      	cmp	r9, r8
 8014da6:	bf08      	it	eq
 8014da8:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 8014daa:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014dae:	f007 fa61 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014db2:	2063      	movs	r0, #99	; 0x63
 8014db4:	f007 fa64 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014db8:	483a      	ldr	r0, [pc, #232]	; (8014ea4 <GUI_Text_deltaE_Measure+0x1f0>)
 8014dba:	f007 fa55 	bl	801c268 <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 8014dbe:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014dc2:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 8014dc6:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 8014dc8:	ee17 0a90 	vmov	r0, s15
 8014dcc:	f7eb fbd4 	bl	8000578 <__aeabi_f2d>
 8014dd0:	ec41 0b10 	vmov	d0, r0, r1
 8014dd4:	f00d fce0 	bl	8022798 <floor>
 8014dd8:	2200      	movs	r2, #0
 8014dda:	4b35      	ldr	r3, [pc, #212]	; (8014eb0 <GUI_Text_deltaE_Measure+0x1fc>)
 8014ddc:	ec51 0b10 	vmov	r0, r1, d0
 8014de0:	f7eb fd48 	bl	8000874 <__aeabi_ddiv>
 8014de4:	f7eb ff14 	bl	8000c10 <__aeabi_d2f>
 8014de8:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 8014dec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df4:	bf48      	it	mi
 8014df6:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 8014dfa:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 8014dfe:	bf48      	it	mi
 8014e00:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 8014e04:	f7eb fbb8 	bl	8000578 <__aeabi_f2d>
 8014e08:	4602      	mov	r2, r0
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	a803      	add	r0, sp, #12
 8014e0e:	4929      	ldr	r1, [pc, #164]	; (8014eb4 <GUI_Text_deltaE_Measure+0x200>)
 8014e10:	f00a fd14 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 8014e14:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 8014e16:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 8014e18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8014e1c:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8014e1e:	ee07 2a10 	vmov	s14, r2
 8014e22:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8014e26:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8014e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e32:	db04      	blt.n	8014e3e <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 8014e34:	3e17      	subs	r6, #23
			number++;
 8014e36:	3701      	adds	r7, #1
			dec *= 10;
 8014e38:	434a      	muls	r2, r1
			delta_pos-=23;
 8014e3a:	b2f6      	uxtb	r6, r6
			number++;
 8014e3c:	b2ff      	uxtb	r7, r7
 8014e3e:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014e40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014e44:	d1eb      	bne.n	8014e1e <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 8014e46:	4b1c      	ldr	r3, [pc, #112]	; (8014eb8 <GUI_Text_deltaE_Measure+0x204>)
 8014e48:	781a      	ldrb	r2, [r3, #0]
 8014e4a:	42ba      	cmp	r2, r7
 8014e4c:	4699      	mov	r9, r3
 8014e4e:	d90d      	bls.n	8014e6c <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8014e50:	2163      	movs	r1, #99	; 0x63
 8014e52:	f105 0319 	add.w	r3, r5, #25
 8014e56:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014e5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014e5e:	9100      	str	r1, [sp, #0]
 8014e60:	b29b      	uxth	r3, r3
 8014e62:	b292      	uxth	r2, r2
 8014e64:	4629      	mov	r1, r5
 8014e66:	b280      	uxth	r0, r0
 8014e68:	f006 ffd5 	bl	801be16 <TFT_FillRectangle>
	old_deltaE = number;
 8014e6c:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8014e70:	f1b8 0f00 	cmp.w	r8, #0
 8014e74:	d007      	beq.n	8014e86 <GUI_Text_deltaE_Measure+0x1d2>
 8014e76:	f1a4 0012 	sub.w	r0, r4, #18
 8014e7a:	4430      	add	r0, r6
 8014e7c:	222d      	movs	r2, #45	; 0x2d
 8014e7e:	4629      	mov	r1, r5
 8014e80:	b280      	uxth	r0, r0
 8014e82:	f007 fabb 	bl	801c3fc <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014e86:	19a0      	adds	r0, r4, r6
 8014e88:	2303      	movs	r3, #3
 8014e8a:	aa03      	add	r2, sp, #12
 8014e8c:	4629      	mov	r1, r5
 8014e8e:	b280      	uxth	r0, r0
 8014e90:	f007 fb0c 	bl	801c4ac <TFT_DisplayString>
 8014e94:	e752      	b.n	8014d3c <GUI_Text_deltaE_Measure+0x88>
 8014e96:	bf00      	nop
 8014e98:	2000022a 	.word	0x2000022a
 8014e9c:	2000572d 	.word	0x2000572d
 8014ea0:	200056f1 	.word	0x200056f1
 8014ea4:	200001f0 	.word	0x200001f0
 8014ea8:	200001b0 	.word	0x200001b0
 8014eac:	200001e8 	.word	0x200001e8
 8014eb0:	40240000 	.word	0x40240000
 8014eb4:	08031292 	.word	0x08031292
 8014eb8:	2000022d 	.word	0x2000022d

08014ebc <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nope, uint8_t grey)
{
 8014ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec0:	ed2d 8b04 	vpush	{d8-d9}
 8014ec4:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8014ec6:	4bb6      	ldr	r3, [pc, #728]	; (80151a0 <GUI_Text_EbEr_Measure+0x2e4>)
 8014ec8:	4eb6      	ldr	r6, [pc, #728]	; (80151a4 <GUI_Text_EbEr_Measure+0x2e8>)
{
 8014eca:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8014ecc:	781a      	ldrb	r2, [r3, #0]
 8014ece:	4bb6      	ldr	r3, [pc, #728]	; (80151a8 <GUI_Text_EbEr_Measure+0x2ec>)
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	429a      	cmp	r2, r3
{
 8014ed4:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8014ed6:	bf1c      	itt	ne
 8014ed8:	2300      	movne	r3, #0
 8014eda:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8014edc:	2300      	movs	r3, #0
 8014ede:	9303      	str	r3, [sp, #12]
 8014ee0:	9304      	str	r3, [sp, #16]
 8014ee2:	f88d 3014 	strb.w	r3, [sp, #20]
{
 8014ee6:	4605      	mov	r5, r0
 8014ee8:	460c      	mov	r4, r1
 8014eea:	eef0 8a40 	vmov.f32	s17, s0
 8014eee:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_EBER){
 8014ef2:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8014ef4:	f1b8 0f00 	cmp.w	r8, #0
 8014ef8:	d06f      	beq.n	8014fda <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d140      	bne.n	8014f80 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8014efe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014f02:	f007 f9b7 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014f06:	2063      	movs	r0, #99	; 0x63
 8014f08:	f007 f9ba 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8014f0c:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8014f10:	48a6      	ldr	r0, [pc, #664]	; (80151ac <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8014f12:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 8014f16:	f007 f9a7 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8014f1a:	b2bf      	uxth	r7, r7
 8014f1c:	fa1f f989 	uxth.w	r9, r9
 8014f20:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8014f24:	f104 031a 	add.w	r3, r4, #26
 8014f28:	4638      	mov	r0, r7
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	464a      	mov	r2, r9
 8014f2e:	4621      	mov	r1, r4
 8014f30:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8014f34:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8014f38:	f006 ff6d 	bl	801be16 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8014f3c:	fa1f f888 	uxth.w	r8, r8
 8014f40:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8014f44:	4638      	mov	r0, r7
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	464a      	mov	r2, r9
 8014f4a:	4641      	mov	r1, r8
 8014f4c:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f50:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8014f54:	f006 ff5f 	bl	801be16 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f58:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8014f5a:	232d      	movs	r3, #45	; 0x2d
 8014f5c:	f88d 300c 	strb.w	r3, [sp, #12]
 8014f60:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f64:	aa03      	add	r2, sp, #12
 8014f66:	2303      	movs	r3, #3
 8014f68:	4621      	mov	r1, r4
 8014f6a:	4638      	mov	r0, r7
 8014f6c:	f007 fa9e 	bl	801c4ac <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014f70:	2303      	movs	r3, #3
 8014f72:	aa03      	add	r2, sp, #12
 8014f74:	4641      	mov	r1, r8
 8014f76:	4638      	mov	r0, r7
 8014f78:	f007 fa98 	bl	801c4ac <TFT_DisplayString>
				old_nan_EBER = 1;
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8014f80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014f84:	f007 f976 	bl	801c274 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8014f88:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8014f8c:	4888      	ldr	r0, [pc, #544]	; (80151b0 <GUI_Text_EbEr_Measure+0x2f4>)
 8014f8e:	f007 f96b 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8014f92:	b2b6      	uxth	r6, r6
 8014f94:	f104 010c 	add.w	r1, r4, #12
 8014f98:	4630      	mov	r0, r6
 8014f9a:	2242      	movs	r2, #66	; 0x42
 8014f9c:	b289      	uxth	r1, r1
 8014f9e:	f007 fa2d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8014fa2:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8014fa6:	2252      	movs	r2, #82	; 0x52
 8014fa8:	b289      	uxth	r1, r1
 8014faa:	4630      	mov	r0, r6
 8014fac:	f007 fa26 	bl	801c3fc <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8014fb0:	4880      	ldr	r0, [pc, #512]	; (80151b4 <GUI_Text_EbEr_Measure+0x2f8>)
 8014fb2:	f007 f959 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8014fb6:	1ca1      	adds	r1, r4, #2
 8014fb8:	4628      	mov	r0, r5
 8014fba:	2224      	movs	r2, #36	; 0x24
 8014fbc:	b289      	uxth	r1, r1
 8014fbe:	f007 fa1d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 8014fc2:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8014fc6:	2224      	movs	r2, #36	; 0x24
 8014fc8:	b289      	uxth	r1, r1
 8014fca:	4628      	mov	r0, r5
 8014fcc:	f007 fa16 	bl	801c3fc <TFT_DrawChar>
}
 8014fd0:	b007      	add	sp, #28
 8014fd2:	ecbd 8b04 	vpop	{d8-d9}
 8014fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8014fda:	b1eb      	cbz	r3, 8015018 <GUI_Text_EbEr_Measure+0x15c>
 8014fdc:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8014fe0:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8014fe4:	f101 031a 	add.w	r3, r1, #26
 8014fe8:	b2bf      	uxth	r7, r7
 8014fea:	fa1f f989 	uxth.w	r9, r9
 8014fee:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	464a      	mov	r2, r9
 8014ff6:	4638      	mov	r0, r7
 8014ff8:	f8cd b000 	str.w	fp, [sp]
 8014ffc:	f006 ff0b 	bl	801be16 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8015000:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015004:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015008:	f8cd b000 	str.w	fp, [sp]
 801500c:	b29b      	uxth	r3, r3
 801500e:	464a      	mov	r2, r9
 8015010:	b289      	uxth	r1, r1
 8015012:	4638      	mov	r0, r7
 8015014:	f006 feff 	bl	801be16 <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 8015018:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80151b8 <GUI_Text_EbEr_Measure+0x2fc>
 801501c:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 8015020:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 8015022:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 8015026:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 8015028:	f7eb faa6 	bl	8000578 <__aeabi_f2d>
 801502c:	ec41 0b10 	vmov	d0, r0, r1
 8015030:	f00d fbb2 	bl	8022798 <floor>
 8015034:	2200      	movs	r2, #0
 8015036:	4b61      	ldr	r3, [pc, #388]	; (80151bc <GUI_Text_EbEr_Measure+0x300>)
 8015038:	ec51 0b10 	vmov	r0, r1, d0
 801503c:	f7eb fc1a 	bl	8000874 <__aeabi_ddiv>
 8015040:	f7eb fde6 	bl	8000c10 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 8015044:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 8015048:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 801504c:	ee17 0a90 	vmov	r0, s15
 8015050:	f7eb fa92 	bl	8000578 <__aeabi_f2d>
 8015054:	ec41 0b10 	vmov	d0, r0, r1
 8015058:	f00d fb9e 	bl	8022798 <floor>
 801505c:	2200      	movs	r2, #0
 801505e:	ec51 0b10 	vmov	r0, r1, d0
 8015062:	4b56      	ldr	r3, [pc, #344]	; (80151bc <GUI_Text_EbEr_Measure+0x300>)
 8015064:	f7eb fc06 	bl	8000874 <__aeabi_ddiv>
 8015068:	f7eb fdd2 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801506c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8015070:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015074:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015078:	45ba      	cmp	sl, r7
 801507a:	bf08      	it	eq
 801507c:	4618      	moveq	r0, r3
 801507e:	f007 f8f9 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015082:	2063      	movs	r0, #99	; 0x63
 8015084:	f007 f8fc 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015088:	4848      	ldr	r0, [pc, #288]	; (80151ac <GUI_Text_EbEr_Measure+0x2f0>)
 801508a:	f007 f8ed 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 801508e:	ee18 0a90 	vmov	r0, s17
 8015092:	f7eb fa71 	bl	8000578 <__aeabi_f2d>
 8015096:	4602      	mov	r2, r0
 8015098:	460b      	mov	r3, r1
 801509a:	a803      	add	r0, sp, #12
 801509c:	4948      	ldr	r1, [pc, #288]	; (80151c0 <GUI_Text_EbEr_Measure+0x304>)
 801509e:	f00a fbcd 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 80150a2:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 80150a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 80150aa:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 80150ac:	2696      	movs	r6, #150	; 0x96
 80150ae:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 80150b2:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 80150b4:	ee07 9a10 	vmov	s14, r9
 80150b8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80150bc:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80150c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80150c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c8:	db05      	blt.n	80150d6 <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 80150ca:	3e17      	subs	r6, #23
			number++;
 80150cc:	3701      	adds	r7, #1
			dec *= 10;
 80150ce:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80150d2:	b2f6      	uxtb	r6, r6
			number++;
 80150d4:	b2ff      	uxtb	r7, r7
 80150d6:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80150d8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80150dc:	d1ea      	bne.n	80150b4 <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 80150de:	4b39      	ldr	r3, [pc, #228]	; (80151c4 <GUI_Text_EbEr_Measure+0x308>)
 80150e0:	781a      	ldrb	r2, [r3, #0]
 80150e2:	42ba      	cmp	r2, r7
 80150e4:	469a      	mov	sl, r3
 80150e6:	d90d      	bls.n	8015104 <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80150e8:	2163      	movs	r1, #99	; 0x63
 80150ea:	f104 0319 	add.w	r3, r4, #25
 80150ee:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80150f2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80150f6:	9100      	str	r1, [sp, #0]
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	b292      	uxth	r2, r2
 80150fc:	4621      	mov	r1, r4
 80150fe:	b280      	uxth	r0, r0
 8015100:	f006 fe89 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015104:	19a8      	adds	r0, r5, r6
 8015106:	2303      	movs	r3, #3
 8015108:	aa03      	add	r2, sp, #12
 801510a:	4621      	mov	r1, r4
 801510c:	b280      	uxth	r0, r0
	old_num_EB = number;
 801510e:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015112:	f007 f9cb 	bl	801c4ac <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 8015116:	ee18 0a10 	vmov	r0, s16
 801511a:	f7eb fa2d 	bl	8000578 <__aeabi_f2d>
 801511e:	4602      	mov	r2, r0
 8015120:	460b      	mov	r3, r1
 8015122:	a803      	add	r0, sp, #12
 8015124:	4926      	ldr	r1, [pc, #152]	; (80151c0 <GUI_Text_EbEr_Measure+0x304>)
 8015126:	f00a fb89 	bl	801f83c <sprintf>
 801512a:	2304      	movs	r3, #4
			dec *= 10;
 801512c:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 801512e:	ee07 9a90 	vmov	s15, r9
 8015132:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015136:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801513a:	eef4 7ac9 	vcmpe.f32	s15, s18
 801513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015142:	db07      	blt.n	8015154 <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 8015144:	3e17      	subs	r6, #23
			number++;
 8015146:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 801514a:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 801514e:	b2f6      	uxtb	r6, r6
			number++;
 8015150:	fa5f f888 	uxtb.w	r8, r8
 8015154:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8015156:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801515a:	d1e8      	bne.n	801512e <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 801515c:	4f1a      	ldr	r7, [pc, #104]	; (80151c8 <GUI_Text_EbEr_Measure+0x30c>)
 801515e:	783b      	ldrb	r3, [r7, #0]
 8015160:	4543      	cmp	r3, r8
 8015162:	d911      	bls.n	8015188 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015164:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015168:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801516c:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015170:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015174:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015178:	f8cd e000 	str.w	lr, [sp]
 801517c:	b29b      	uxth	r3, r3
 801517e:	b292      	uxth	r2, r2
 8015180:	b289      	uxth	r1, r1
 8015182:	b280      	uxth	r0, r0
 8015184:	f006 fe47 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015188:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801518c:	19a8      	adds	r0, r5, r6
 801518e:	2303      	movs	r3, #3
 8015190:	aa03      	add	r2, sp, #12
 8015192:	b289      	uxth	r1, r1
 8015194:	b280      	uxth	r0, r0
	old_num_ER = number;
 8015196:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801519a:	f007 f987 	bl	801c4ac <TFT_DisplayString>
 801519e:	e6ef      	b.n	8014f80 <GUI_Text_EbEr_Measure+0xc4>
 80151a0:	2000022a 	.word	0x2000022a
 80151a4:	20005724 	.word	0x20005724
 80151a8:	200056f1 	.word	0x200056f1
 80151ac:	200001f0 	.word	0x200001f0
 80151b0:	200001b0 	.word	0x200001b0
 80151b4:	200001e8 	.word	0x200001e8
 80151b8:	42c80000 	.word	0x42c80000
 80151bc:	40590000 	.word	0x40590000
 80151c0:	08031292 	.word	0x08031292
 80151c4:	2000023d 	.word	0x2000023d
 80151c8:	2000023e 	.word	0x2000023e

080151cc <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nope, uint8_t grey)
{
 80151cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d0:	ed2d 8b04 	vpush	{d8-d9}
 80151d4:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80151d6:	4bb8      	ldr	r3, [pc, #736]	; (80154b8 <GUI_Text_LbLr_Measure+0x2ec>)
 80151d8:	4eb8      	ldr	r6, [pc, #736]	; (80154bc <GUI_Text_LbLr_Measure+0x2f0>)
{
 80151da:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80151dc:	781a      	ldrb	r2, [r3, #0]
 80151de:	4bb8      	ldr	r3, [pc, #736]	; (80154c0 <GUI_Text_LbLr_Measure+0x2f4>)
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	429a      	cmp	r2, r3
{
 80151e4:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80151e6:	bf1c      	itt	ne
 80151e8:	2300      	movne	r3, #0
 80151ea:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80151ec:	2300      	movs	r3, #0
 80151ee:	9303      	str	r3, [sp, #12]
 80151f0:	9304      	str	r3, [sp, #16]
 80151f2:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80151f6:	4605      	mov	r5, r0
 80151f8:	460c      	mov	r4, r1
 80151fa:	eef0 8a40 	vmov.f32	s17, s0
 80151fe:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nope) 
		{	
			if(!old_nan_LBLR){
 8015202:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8015204:	f1b8 0f00 	cmp.w	r8, #0
 8015208:	d072      	beq.n	80152f0 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 801520a:	2b00      	cmp	r3, #0
 801520c:	d140      	bne.n	8015290 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 801520e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015212:	f007 f82f 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015216:	2063      	movs	r0, #99	; 0x63
 8015218:	f007 f832 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801521c:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8015220:	48a8      	ldr	r0, [pc, #672]	; (80154c4 <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015222:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 8015226:	f007 f81f 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801522a:	b2bf      	uxth	r7, r7
 801522c:	fa1f f989 	uxth.w	r9, r9
 8015230:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8015234:	f104 031a 	add.w	r3, r4, #26
 8015238:	4638      	mov	r0, r7
 801523a:	b29b      	uxth	r3, r3
 801523c:	464a      	mov	r2, r9
 801523e:	4621      	mov	r1, r4
 8015240:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015244:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015248:	f006 fde5 	bl	801be16 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801524c:	fa1f f888 	uxth.w	r8, r8
 8015250:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015254:	4638      	mov	r0, r7
 8015256:	b29b      	uxth	r3, r3
 8015258:	464a      	mov	r2, r9
 801525a:	4641      	mov	r1, r8
 801525c:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015260:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015264:	f006 fdd7 	bl	801be16 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015268:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 801526a:	232d      	movs	r3, #45	; 0x2d
 801526c:	f88d 300c 	strb.w	r3, [sp, #12]
 8015270:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015274:	aa03      	add	r2, sp, #12
 8015276:	2303      	movs	r3, #3
 8015278:	4621      	mov	r1, r4
 801527a:	4638      	mov	r0, r7
 801527c:	f007 f916 	bl	801c4ac <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015280:	2303      	movs	r3, #3
 8015282:	aa03      	add	r2, sp, #12
 8015284:	4641      	mov	r1, r8
 8015286:	4638      	mov	r0, r7
 8015288:	f007 f910 	bl	801c4ac <TFT_DisplayString>
				old_nan_LBLR = 1;
 801528c:	2301      	movs	r3, #1
 801528e:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 8015290:	488c      	ldr	r0, [pc, #560]	; (80154c4 <GUI_Text_LbLr_Measure+0x2f8>)
 8015292:	f006 ffe9 	bl	801c268 <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 8015296:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801529a:	f006 ffeb 	bl	801c274 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 801529e:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 80152a2:	4889      	ldr	r0, [pc, #548]	; (80154c8 <GUI_Text_LbLr_Measure+0x2fc>)
 80152a4:	f006 ffe0 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 80152a8:	b2b6      	uxth	r6, r6
 80152aa:	f104 010c 	add.w	r1, r4, #12
 80152ae:	4630      	mov	r0, r6
 80152b0:	2242      	movs	r2, #66	; 0x42
 80152b2:	b289      	uxth	r1, r1
 80152b4:	f007 f8a2 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 80152b8:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 80152bc:	2252      	movs	r2, #82	; 0x52
 80152be:	b289      	uxth	r1, r1
 80152c0:	4630      	mov	r0, r6
 80152c2:	f007 f89b 	bl	801c3fc <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80152c6:	4881      	ldr	r0, [pc, #516]	; (80154cc <GUI_Text_LbLr_Measure+0x300>)
 80152c8:	f006 ffce 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 80152cc:	1ca1      	adds	r1, r4, #2
 80152ce:	4628      	mov	r0, r5
 80152d0:	222b      	movs	r2, #43	; 0x2b
 80152d2:	b289      	uxth	r1, r1
 80152d4:	f007 f892 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 80152d8:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80152dc:	222b      	movs	r2, #43	; 0x2b
 80152de:	b289      	uxth	r1, r1
 80152e0:	4628      	mov	r0, r5
 80152e2:	f007 f88b 	bl	801c3fc <TFT_DrawChar>
}
 80152e6:	b007      	add	sp, #28
 80152e8:	ecbd 8b04 	vpop	{d8-d9}
 80152ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80152f0:	b1eb      	cbz	r3, 801532e <GUI_Text_LbLr_Measure+0x162>
 80152f2:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80152f6:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 80152fa:	f101 031a 	add.w	r3, r1, #26
 80152fe:	b2bf      	uxth	r7, r7
 8015300:	fa1f f989 	uxth.w	r9, r9
 8015304:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8015308:	b29b      	uxth	r3, r3
 801530a:	464a      	mov	r2, r9
 801530c:	4638      	mov	r0, r7
 801530e:	f8cd b000 	str.w	fp, [sp]
 8015312:	f006 fd80 	bl	801be16 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8015316:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801531a:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801531e:	f8cd b000 	str.w	fp, [sp]
 8015322:	b29b      	uxth	r3, r3
 8015324:	464a      	mov	r2, r9
 8015326:	b289      	uxth	r1, r1
 8015328:	4638      	mov	r0, r7
 801532a:	f006 fd74 	bl	801be16 <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 801532e:	ed9f 8a68 	vldr	s16, [pc, #416]	; 80154d0 <GUI_Text_LbLr_Measure+0x304>
 8015332:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 8015336:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8015338:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 801533c:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 801533e:	f7eb f91b 	bl	8000578 <__aeabi_f2d>
 8015342:	ec41 0b10 	vmov	d0, r0, r1
 8015346:	f00d fa27 	bl	8022798 <floor>
 801534a:	2200      	movs	r2, #0
 801534c:	4b61      	ldr	r3, [pc, #388]	; (80154d4 <GUI_Text_LbLr_Measure+0x308>)
 801534e:	ec51 0b10 	vmov	r0, r1, d0
 8015352:	f7eb fa8f 	bl	8000874 <__aeabi_ddiv>
 8015356:	f7eb fc5b 	bl	8000c10 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 801535a:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 801535e:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 8015362:	ee17 0a90 	vmov	r0, s15
 8015366:	f7eb f907 	bl	8000578 <__aeabi_f2d>
 801536a:	ec41 0b10 	vmov	d0, r0, r1
 801536e:	f00d fa13 	bl	8022798 <floor>
 8015372:	2200      	movs	r2, #0
 8015374:	ec51 0b10 	vmov	r0, r1, d0
 8015378:	4b56      	ldr	r3, [pc, #344]	; (80154d4 <GUI_Text_LbLr_Measure+0x308>)
 801537a:	f7eb fa7b 	bl	8000874 <__aeabi_ddiv>
 801537e:	f7eb fc47 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015382:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 8015386:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801538a:	f249 40d2 	movw	r0, #38098	; 0x94d2
 801538e:	45ba      	cmp	sl, r7
 8015390:	bf08      	it	eq
 8015392:	4618      	moveq	r0, r3
 8015394:	f006 ff6e 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015398:	2063      	movs	r0, #99	; 0x63
 801539a:	f006 ff71 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801539e:	4849      	ldr	r0, [pc, #292]	; (80154c4 <GUI_Text_LbLr_Measure+0x2f8>)
 80153a0:	f006 ff62 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 80153a4:	ee18 0a90 	vmov	r0, s17
 80153a8:	f7eb f8e6 	bl	8000578 <__aeabi_f2d>
 80153ac:	4602      	mov	r2, r0
 80153ae:	460b      	mov	r3, r1
 80153b0:	a803      	add	r0, sp, #12
 80153b2:	4949      	ldr	r1, [pc, #292]	; (80154d8 <GUI_Text_LbLr_Measure+0x30c>)
 80153b4:	f00a fa42 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 80153b8:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 80153bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 80153c0:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 80153c2:	2696      	movs	r6, #150	; 0x96
 80153c4:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 80153c8:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 80153ca:	ee07 9a10 	vmov	s14, r9
 80153ce:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80153d2:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80153d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80153da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153de:	db05      	blt.n	80153ec <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 80153e0:	3e17      	subs	r6, #23
			number++;
 80153e2:	3701      	adds	r7, #1
			dec *= 10;
 80153e4:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80153e8:	b2f6      	uxtb	r6, r6
			number++;
 80153ea:	b2ff      	uxtb	r7, r7
 80153ec:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80153ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80153f2:	d1ea      	bne.n	80153ca <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 80153f4:	4b39      	ldr	r3, [pc, #228]	; (80154dc <GUI_Text_LbLr_Measure+0x310>)
 80153f6:	781a      	ldrb	r2, [r3, #0]
 80153f8:	42ba      	cmp	r2, r7
 80153fa:	469a      	mov	sl, r3
 80153fc:	d90d      	bls.n	801541a <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80153fe:	2163      	movs	r1, #99	; 0x63
 8015400:	f104 0319 	add.w	r3, r4, #25
 8015404:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015408:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801540c:	9100      	str	r1, [sp, #0]
 801540e:	b29b      	uxth	r3, r3
 8015410:	b292      	uxth	r2, r2
 8015412:	4621      	mov	r1, r4
 8015414:	b280      	uxth	r0, r0
 8015416:	f006 fcfe 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801541a:	19a8      	adds	r0, r5, r6
 801541c:	2303      	movs	r3, #3
 801541e:	aa03      	add	r2, sp, #12
 8015420:	4621      	mov	r1, r4
 8015422:	b280      	uxth	r0, r0
	old_num_LB = number;
 8015424:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015428:	f007 f840 	bl	801c4ac <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 801542c:	ee18 0a10 	vmov	r0, s16
 8015430:	f7eb f8a2 	bl	8000578 <__aeabi_f2d>
 8015434:	4602      	mov	r2, r0
 8015436:	460b      	mov	r3, r1
 8015438:	a803      	add	r0, sp, #12
 801543a:	4927      	ldr	r1, [pc, #156]	; (80154d8 <GUI_Text_LbLr_Measure+0x30c>)
 801543c:	f00a f9fe 	bl	801f83c <sprintf>
 8015440:	2304      	movs	r3, #4
			dec *= 10;
 8015442:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 8015444:	ee07 9a90 	vmov	s15, r9
 8015448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801544c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015450:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015458:	db07      	blt.n	801546a <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 801545a:	3e17      	subs	r6, #23
			number++;
 801545c:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015460:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015464:	b2f6      	uxtb	r6, r6
			number++;
 8015466:	fa5f f888 	uxtb.w	r8, r8
 801546a:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 801546c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015470:	d1e8      	bne.n	8015444 <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 8015472:	4f1b      	ldr	r7, [pc, #108]	; (80154e0 <GUI_Text_LbLr_Measure+0x314>)
 8015474:	783b      	ldrb	r3, [r7, #0]
 8015476:	4543      	cmp	r3, r8
 8015478:	d911      	bls.n	801549e <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 801547a:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801547e:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015482:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015486:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801548a:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801548e:	f8cd e000 	str.w	lr, [sp]
 8015492:	b29b      	uxth	r3, r3
 8015494:	b292      	uxth	r2, r2
 8015496:	b289      	uxth	r1, r1
 8015498:	b280      	uxth	r0, r0
 801549a:	f006 fcbc 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801549e:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80154a2:	19a8      	adds	r0, r5, r6
 80154a4:	2303      	movs	r3, #3
 80154a6:	aa03      	add	r2, sp, #12
 80154a8:	b289      	uxth	r1, r1
 80154aa:	b280      	uxth	r0, r0
	old_num_LR = number;
 80154ac:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80154b0:	f006 fffc 	bl	801c4ac <TFT_DisplayString>
 80154b4:	e6ec      	b.n	8015290 <GUI_Text_LbLr_Measure+0xc4>
 80154b6:	bf00      	nop
 80154b8:	2000022a 	.word	0x2000022a
 80154bc:	20005727 	.word	0x20005727
 80154c0:	200056f1 	.word	0x200056f1
 80154c4:	200001f0 	.word	0x200001f0
 80154c8:	200001b0 	.word	0x200001b0
 80154cc:	200001e8 	.word	0x200001e8
 80154d0:	42c80000 	.word	0x42c80000
 80154d4:	40590000 	.word	0x40590000
 80154d8:	08031292 	.word	0x08031292
 80154dc:	20000240 	.word	0x20000240
 80154e0:	20000241 	.word	0x20000241

080154e4 <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{
 80154e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154e8:	ed2d 8b02 	vpush	{d8}
 80154ec:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80154ee:	4a59      	ldr	r2, [pc, #356]	; (8015654 <GUI_Text_S_P_Measure+0x170>)
 80154f0:	4f59      	ldr	r7, [pc, #356]	; (8015658 <GUI_Text_S_P_Measure+0x174>)
{
 80154f2:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80154f4:	7811      	ldrb	r1, [r2, #0]
 80154f6:	4a59      	ldr	r2, [pc, #356]	; (801565c <GUI_Text_S_P_Measure+0x178>)
 80154f8:	7812      	ldrb	r2, [r2, #0]
 80154fa:	4291      	cmp	r1, r2
{
 80154fc:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80154fe:	bf1c      	itt	ne
 8015500:	2200      	movne	r2, #0
 8015502:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 8015504:	2200      	movs	r2, #0
{
 8015506:	4605      	mov	r5, r0
 8015508:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 801550c:	9203      	str	r2, [sp, #12]
 801550e:	9204      	str	r2, [sp, #16]
 8015510:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 8015514:	2e00      	cmp	r6, #0
 8015516:	d04c      	beq.n	80155b2 <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 8015518:	783b      	ldrb	r3, [r7, #0]
 801551a:	bb33      	cbnz	r3, 801556a <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 801551c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015520:	f006 fea8 	bl	801c274 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015524:	2063      	movs	r0, #99	; 0x63
 8015526:	f006 feab 	bl	801c280 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801552a:	484d      	ldr	r0, [pc, #308]	; (8015660 <GUI_Text_S_P_Measure+0x17c>)
 801552c:	f006 fe9c 	bl	801c268 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015530:	2163      	movs	r1, #99	; 0x63
 8015532:	f104 031a 	add.w	r3, r4, #26
 8015536:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 801553a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801553e:	9100      	str	r1, [sp, #0]
 8015540:	b29b      	uxth	r3, r3
 8015542:	b292      	uxth	r2, r2
 8015544:	4621      	mov	r1, r4
 8015546:	b280      	uxth	r0, r0
 8015548:	f006 fc65 	bl	801be16 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 801554c:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801554e:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8015552:	f88d 300c 	strb.w	r3, [sp, #12]
 8015556:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801555a:	aa03      	add	r2, sp, #12
 801555c:	2303      	movs	r3, #3
 801555e:	4621      	mov	r1, r4
 8015560:	b280      	uxth	r0, r0
 8015562:	f006 ffa3 	bl	801c4ac <TFT_DisplayString>
				old_nan_SP = 1;
 8015566:	2301      	movs	r3, #1
 8015568:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 801556a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801556e:	f006 fe81 	bl	801c274 <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8015572:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 8015574:	483a      	ldr	r0, [pc, #232]	; (8015660 <GUI_Text_S_P_Measure+0x17c>)
 8015576:	f006 fe77 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 801557a:	b2a4      	uxth	r4, r4
 801557c:	f105 0016 	add.w	r0, r5, #22
 8015580:	4621      	mov	r1, r4
 8015582:	222f      	movs	r2, #47	; 0x2f
 8015584:	b280      	uxth	r0, r0
 8015586:	f006 ff39 	bl	801c3fc <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 801558a:	4836      	ldr	r0, [pc, #216]	; (8015664 <GUI_Text_S_P_Measure+0x180>)
 801558c:	f006 fe6c 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8015590:	4621      	mov	r1, r4
 8015592:	4628      	mov	r0, r5
 8015594:	2232      	movs	r2, #50	; 0x32
 8015596:	f006 ff31 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 801559a:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 801559e:	222f      	movs	r2, #47	; 0x2f
 80155a0:	4621      	mov	r1, r4
 80155a2:	b280      	uxth	r0, r0
 80155a4:	f006 ff2a 	bl	801c3fc <TFT_DrawChar>
}
 80155a8:	b006      	add	sp, #24
 80155aa:	ecbd 8b02 	vpop	{d8}
 80155ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80155b2:	f249 41d2 	movw	r1, #38098	; 0x94d2
 80155b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	bf18      	it	ne
 80155be:	4608      	movne	r0, r1
	old_nan_SP = 0;
 80155c0:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80155c2:	f006 fe57 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80155c6:	2063      	movs	r0, #99	; 0x63
 80155c8:	f006 fe5a 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80155cc:	4824      	ldr	r0, [pc, #144]	; (8015660 <GUI_Text_S_P_Measure+0x17c>)
 80155ce:	f006 fe4b 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 80155d2:	ee18 0a10 	vmov	r0, s16
 80155d6:	f7ea ffcf 	bl	8000578 <__aeabi_f2d>
 80155da:	4602      	mov	r2, r0
 80155dc:	460b      	mov	r3, r1
 80155de:	a803      	add	r0, sp, #12
 80155e0:	4921      	ldr	r1, [pc, #132]	; (8015668 <GUI_Text_S_P_Measure+0x184>)
 80155e2:	f00a f92b 	bl	801f83c <sprintf>
	uint32_t dec = 10;
 80155e6:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 80155e8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 80155ea:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 80155ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80155f0:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80155f2:	ee07 2a10 	vmov	s14, r2
 80155f6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80155fa:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80155fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015606:	db04      	blt.n	8015612 <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 8015608:	3f17      	subs	r7, #23
			number++;
 801560a:	3601      	adds	r6, #1
			dec *= 10;
 801560c:	434a      	muls	r2, r1
			delta_pos-=23;
 801560e:	b2ff      	uxtb	r7, r7
			number++;
 8015610:	b2f6      	uxtb	r6, r6
 8015612:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015614:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015618:	d1eb      	bne.n	80155f2 <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 801561a:	4b14      	ldr	r3, [pc, #80]	; (801566c <GUI_Text_S_P_Measure+0x188>)
 801561c:	781a      	ldrb	r2, [r3, #0]
 801561e:	42b2      	cmp	r2, r6
 8015620:	4698      	mov	r8, r3
 8015622:	d90d      	bls.n	8015640 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015624:	2163      	movs	r1, #99	; 0x63
 8015626:	f104 0319 	add.w	r3, r4, #25
 801562a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801562e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015632:	9100      	str	r1, [sp, #0]
 8015634:	b29b      	uxth	r3, r3
 8015636:	b292      	uxth	r2, r2
 8015638:	4621      	mov	r1, r4
 801563a:	b280      	uxth	r0, r0
 801563c:	f006 fbeb 	bl	801be16 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015640:	19e8      	adds	r0, r5, r7
 8015642:	2303      	movs	r3, #3
 8015644:	aa03      	add	r2, sp, #12
 8015646:	4621      	mov	r1, r4
 8015648:	b280      	uxth	r0, r0
	old_num_SP = number;
 801564a:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801564e:	f006 ff2d 	bl	801c4ac <TFT_DisplayString>
 8015652:	e78a      	b.n	801556a <GUI_Text_S_P_Measure+0x86>
 8015654:	2000022a 	.word	0x2000022a
 8015658:	2000572c 	.word	0x2000572c
 801565c:	200056f1 	.word	0x200056f1
 8015660:	200001f0 	.word	0x200001f0
 8015664:	200001e8 	.word	0x200001e8
 8015668:	08031297 	.word	0x08031297
 801566c:	20000242 	.word	0x20000242

08015670 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nope, uint8_t grey)
{
 8015670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015674:	b089      	sub	sp, #36	; 0x24
 8015676:	461f      	mov	r7, r3
 8015678:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801567c:	9304      	str	r3, [sp, #16]
 801567e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015682:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nope){
 8015684:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8015688:	f04f 0300 	mov.w	r3, #0
{
 801568c:	4604      	mov	r4, r0
 801568e:	460d      	mov	r5, r1
 8015690:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8015692:	9306      	str	r3, [sp, #24]
 8015694:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nope){
 8015698:	db03      	blt.n	80156a2 <GUI_Text_LAB_Measure+0x32>
 801569a:	9b03      	ldr	r3, [sp, #12]
 801569c:	2b00      	cmp	r3, #0
 801569e:	f000 80a9 	beq.w	80157f4 <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 80156a2:	4b4e      	ldr	r3, [pc, #312]	; (80157dc <GUI_Text_LAB_Measure+0x16c>)
 80156a4:	781a      	ldrb	r2, [r3, #0]
 80156a6:	469a      	mov	sl, r3
 80156a8:	b96a      	cbnz	r2, 80156c6 <GUI_Text_LAB_Measure+0x56>
 80156aa:	2163      	movs	r1, #99	; 0x63
 80156ac:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 80156b0:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80156b4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80156b8:	9100      	str	r1, [sp, #0]
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	b292      	uxth	r2, r2
 80156be:	4629      	mov	r1, r5
 80156c0:	b280      	uxth	r0, r0
 80156c2:	f006 fba8 	bl	801be16 <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 80156c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80156ca:	f006 fdd3 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80156ce:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 80156d2:	2063      	movs	r0, #99	; 0x63
 80156d4:	f006 fdd4 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80156d8:	fa1f f989 	uxth.w	r9, r9
 80156dc:	4840      	ldr	r0, [pc, #256]	; (80157e0 <GUI_Text_LAB_Measure+0x170>)
 80156de:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 80156e2:	f006 fdc1 	bl	801c268 <TFT_SetFont>
 80156e6:	fa1f f888 	uxth.w	r8, r8
 80156ea:	222d      	movs	r2, #45	; 0x2d
 80156ec:	4629      	mov	r1, r5
 80156ee:	4648      	mov	r0, r9
 80156f0:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 80156f4:	f006 fe82 	bl	801c3fc <TFT_DrawChar>
 80156f8:	b2b6      	uxth	r6, r6
 80156fa:	2220      	movs	r2, #32
 80156fc:	4629      	mov	r1, r5
 80156fe:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015700:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015704:	f006 fe7a 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015708:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801570a:	222d      	movs	r2, #45	; 0x2d
 801570c:	4629      	mov	r1, r5
 801570e:	4630      	mov	r0, r6
 8015710:	f006 fe74 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015714:	4639      	mov	r1, r7
 8015716:	222d      	movs	r2, #45	; 0x2d
 8015718:	4648      	mov	r0, r9
 801571a:	f006 fe6f 	bl	801c3fc <TFT_DrawChar>
 801571e:	4639      	mov	r1, r7
 8015720:	2220      	movs	r2, #32
 8015722:	4640      	mov	r0, r8
 8015724:	f006 fe6a 	bl	801c3fc <TFT_DrawChar>
 8015728:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 801572a:	f105 0746 	add.w	r7, r5, #70	; 0x46
 801572e:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015730:	222d      	movs	r2, #45	; 0x2d
 8015732:	4630      	mov	r0, r6
 8015734:	f006 fe62 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8015738:	222d      	movs	r2, #45	; 0x2d
 801573a:	4639      	mov	r1, r7
 801573c:	4648      	mov	r0, r9
 801573e:	f006 fe5d 	bl	801c3fc <TFT_DrawChar>
 8015742:	2220      	movs	r2, #32
 8015744:	4639      	mov	r1, r7
 8015746:	4640      	mov	r0, r8
 8015748:	f006 fe58 	bl	801c3fc <TFT_DrawChar>
 801574c:	222d      	movs	r2, #45	; 0x2d
 801574e:	4639      	mov	r1, r7
 8015750:	4630      	mov	r0, r6
 8015752:	f006 fe53 	bl	801c3fc <TFT_DrawChar>
		old_nan = 1;
 8015756:	2301      	movs	r3, #1
 8015758:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 801575c:	4b21      	ldr	r3, [pc, #132]	; (80157e4 <GUI_Text_LAB_Measure+0x174>)
 801575e:	781a      	ldrb	r2, [r3, #0]
 8015760:	4b21      	ldr	r3, [pc, #132]	; (80157e8 <GUI_Text_LAB_Measure+0x178>)
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	4293      	cmp	r3, r2
 8015766:	d101      	bne.n	801576c <GUI_Text_LAB_Measure+0xfc>
 8015768:	2b05      	cmp	r3, #5
 801576a:	d134      	bne.n	80157d6 <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 801576c:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8015770:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 8015774:	f006 fd7e 	bl	801c274 <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8015778:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 801577a:	481c      	ldr	r0, [pc, #112]	; (80157ec <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 801577c:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8015780:	f006 fd72 	bl	801c268 <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 8015784:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8015788:	222a      	movs	r2, #42	; 0x2a
 801578a:	4629      	mov	r1, r5
 801578c:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 801578e:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 8015792:	f006 fe33 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8015796:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8015798:	222a      	movs	r2, #42	; 0x2a
 801579a:	4641      	mov	r1, r8
 801579c:	4630      	mov	r0, r6
 801579e:	f006 fe2d 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 80157a2:	222a      	movs	r2, #42	; 0x2a
 80157a4:	4639      	mov	r1, r7
 80157a6:	4630      	mov	r0, r6
 80157a8:	f006 fe28 	bl	801c3fc <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 80157ac:	480c      	ldr	r0, [pc, #48]	; (80157e0 <GUI_Text_LAB_Measure+0x170>)
 80157ae:	f006 fd5b 	bl	801c268 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 80157b2:	222b      	movs	r2, #43	; 0x2b
 80157b4:	4629      	mov	r1, r5
 80157b6:	4620      	mov	r0, r4
 80157b8:	f006 fe20 	bl	801c3fc <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 80157bc:	480c      	ldr	r0, [pc, #48]	; (80157f0 <GUI_Text_LAB_Measure+0x180>)
 80157be:	f006 fd53 	bl	801c268 <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 80157c2:	2220      	movs	r2, #32
 80157c4:	4641      	mov	r1, r8
 80157c6:	4620      	mov	r0, r4
 80157c8:	f006 fe18 	bl	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 80157cc:	2221      	movs	r2, #33	; 0x21
 80157ce:	4639      	mov	r1, r7
 80157d0:	4620      	mov	r0, r4
 80157d2:	f006 fe13 	bl	801c3fc <TFT_DrawChar>
}	
 80157d6:	b009      	add	sp, #36	; 0x24
 80157d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157dc:	20005721 	.word	0x20005721
 80157e0:	200001e8 	.word	0x200001e8
 80157e4:	2000022a 	.word	0x2000022a
 80157e8:	200056f1 	.word	0x200056f1
 80157ec:	200001f0 	.word	0x200001f0
 80157f0:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80157f4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80157f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80157fc:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8015800:	2800      	cmp	r0, #0
 8015802:	bf14      	ite	ne
 8015804:	4610      	movne	r0, r2
 8015806:	4618      	moveq	r0, r3
 8015808:	f006 fd34 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801580c:	2063      	movs	r0, #99	; 0x63
 801580e:	f006 fd37 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015812:	488e      	ldr	r0, [pc, #568]	; (8015a4c <GUI_Text_LAB_Measure+0x3dc>)
 8015814:	f006 fd28 	bl	801c268 <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 8015818:	f1b8 0f00 	cmp.w	r8, #0
 801581c:	bfbd      	ittte	lt
 801581e:	f1c8 0800 	rsblt	r8, r8, #0
 8015822:	fa0f f888 	sxthlt.w	r8, r8
 8015826:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015828:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 801582a:	4989      	ldr	r1, [pc, #548]	; (8015a50 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 801582c:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 801582e:	4642      	mov	r2, r8
 8015830:	a806      	add	r0, sp, #24
 8015832:	f00a f803 	bl	801f83c <sprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015836:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 801583a:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 801583e:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015842:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 8015844:	fbb8 f0fa 	udiv	r0, r8, sl
 8015848:	f7ea fe74 	bl	8000534 <__aeabi_ui2d>
 801584c:	2200      	movs	r2, #0
 801584e:	4b81      	ldr	r3, [pc, #516]	; (8015a54 <GUI_Text_LAB_Measure+0x3e4>)
 8015850:	f7eb f96c 	bl	8000b2c <__aeabi_dcmpge>
 8015854:	b140      	cbz	r0, 8015868 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 8015856:	230a      	movs	r3, #10
			delta_pos-=23;
 8015858:	3e17      	subs	r6, #23
			number++;
 801585a:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 801585e:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8015862:	b2f6      	uxtb	r6, r6
			number++;
 8015864:	fa5f f989 	uxtb.w	r9, r9
 8015868:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 801586c:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8015870:	d1e8      	bne.n	8015844 <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 8015872:	4b79      	ldr	r3, [pc, #484]	; (8015a58 <GUI_Text_LAB_Measure+0x3e8>)
 8015874:	781a      	ldrb	r2, [r3, #0]
 8015876:	454a      	cmp	r2, r9
 8015878:	4698      	mov	r8, r3
 801587a:	d803      	bhi.n	8015884 <GUI_Text_LAB_Measure+0x214>
 801587c:	4b77      	ldr	r3, [pc, #476]	; (8015a5c <GUI_Text_LAB_Measure+0x3ec>)
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	2b01      	cmp	r3, #1
 8015882:	d10d      	bne.n	80158a0 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 8015884:	2163      	movs	r1, #99	; 0x63
 8015886:	f105 0319 	add.w	r3, r5, #25
 801588a:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801588e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015892:	9100      	str	r1, [sp, #0]
 8015894:	b29b      	uxth	r3, r3
 8015896:	b292      	uxth	r2, r2
 8015898:	4629      	mov	r1, r5
 801589a:	b280      	uxth	r0, r0
 801589c:	f006 fabb 	bl	801be16 <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 80158a0:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 80158a2:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 80158a6:	b13b      	cbz	r3, 80158b8 <GUI_Text_LAB_Measure+0x248>
 80158a8:	f1a4 0012 	sub.w	r0, r4, #18
 80158ac:	4430      	add	r0, r6
 80158ae:	222d      	movs	r2, #45	; 0x2d
 80158b0:	4629      	mov	r1, r5
 80158b2:	b280      	uxth	r0, r0
 80158b4:	f006 fda2 	bl	801c3fc <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80158b8:	19a0      	adds	r0, r4, r6
 80158ba:	2303      	movs	r3, #3
 80158bc:	aa06      	add	r2, sp, #24
 80158be:	4629      	mov	r1, r5
 80158c0:	b280      	uxth	r0, r0
 80158c2:	f006 fdf3 	bl	801c4ac <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 80158c6:	2f00      	cmp	r7, #0
 80158c8:	bfbc      	itt	lt
 80158ca:	427f      	neglt	r7, r7
 80158cc:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 80158ce:	485f      	ldr	r0, [pc, #380]	; (8015a4c <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 80158d0:	bfb4      	ite	lt
 80158d2:	f04f 0b01 	movlt.w	fp, #1
 80158d6:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 80158da:	f006 fcc5 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 80158de:	463a      	mov	r2, r7
 80158e0:	495b      	ldr	r1, [pc, #364]	; (8015a50 <GUI_Text_LAB_Measure+0x3e0>)
 80158e2:	a806      	add	r0, sp, #24
 80158e4:	f009 ffaa 	bl	801f83c <sprintf>
	number = 0;
 80158e8:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 80158ec:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 80158f0:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 80158f4:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 80158f6:	fbb7 f0fa 	udiv	r0, r7, sl
 80158fa:	f7ea fe1b 	bl	8000534 <__aeabi_ui2d>
 80158fe:	2200      	movs	r2, #0
 8015900:	4b54      	ldr	r3, [pc, #336]	; (8015a54 <GUI_Text_LAB_Measure+0x3e4>)
 8015902:	f7eb f913 	bl	8000b2c <__aeabi_dcmpge>
 8015906:	b140      	cbz	r0, 801591a <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 8015908:	230a      	movs	r3, #10
			delta_pos-=23;
 801590a:	3e17      	subs	r6, #23
			number++;
 801590c:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015910:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8015914:	b2f6      	uxtb	r6, r6
			number++;
 8015916:	fa5f f888 	uxtb.w	r8, r8
 801591a:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 801591e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8015922:	d1e8      	bne.n	80158f6 <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 8015924:	4b4e      	ldr	r3, [pc, #312]	; (8015a60 <GUI_Text_LAB_Measure+0x3f0>)
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	4543      	cmp	r3, r8
 801592a:	f105 0723 	add.w	r7, r5, #35	; 0x23
 801592e:	d803      	bhi.n	8015938 <GUI_Text_LAB_Measure+0x2c8>
 8015930:	4b4a      	ldr	r3, [pc, #296]	; (8015a5c <GUI_Text_LAB_Measure+0x3ec>)
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	2b01      	cmp	r3, #1
 8015936:	d10d      	bne.n	8015954 <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 8015938:	2163      	movs	r1, #99	; 0x63
 801593a:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 801593e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015942:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015946:	9100      	str	r1, [sp, #0]
 8015948:	b29b      	uxth	r3, r3
 801594a:	b292      	uxth	r2, r2
 801594c:	b2b9      	uxth	r1, r7
 801594e:	b280      	uxth	r0, r0
 8015950:	f006 fa61 	bl	801be16 <TFT_FillRectangle>
	old_num_A = number;
 8015954:	4b42      	ldr	r3, [pc, #264]	; (8015a60 <GUI_Text_LAB_Measure+0x3f0>)
 8015956:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 801595a:	f1bb 0f00 	cmp.w	fp, #0
 801595e:	d007      	beq.n	8015970 <GUI_Text_LAB_Measure+0x300>
 8015960:	f1a4 0012 	sub.w	r0, r4, #18
 8015964:	4430      	add	r0, r6
 8015966:	222d      	movs	r2, #45	; 0x2d
 8015968:	b2b9      	uxth	r1, r7
 801596a:	b280      	uxth	r0, r0
 801596c:	f006 fd46 	bl	801c3fc <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015970:	19a0      	adds	r0, r4, r6
 8015972:	b2b9      	uxth	r1, r7
 8015974:	aa06      	add	r2, sp, #24
 8015976:	2303      	movs	r3, #3
 8015978:	b280      	uxth	r0, r0
 801597a:	f006 fd97 	bl	801c4ac <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 801597e:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8015980:	4832      	ldr	r0, [pc, #200]	; (8015a4c <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8015982:	2b00      	cmp	r3, #0
 8015984:	bfbf      	itttt	lt
 8015986:	425b      	neglt	r3, r3
 8015988:	b21b      	sxthlt	r3, r3
 801598a:	9304      	strlt	r3, [sp, #16]
 801598c:	f04f 0901 	movlt.w	r9, #1
 8015990:	bfa8      	it	ge
 8015992:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8015996:	f006 fc67 	bl	801c268 <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 801599a:	9a04      	ldr	r2, [sp, #16]
 801599c:	492c      	ldr	r1, [pc, #176]	; (8015a50 <GUI_Text_LAB_Measure+0x3e0>)
 801599e:	a806      	add	r0, sp, #24
 80159a0:	f009 ff4c 	bl	801f83c <sprintf>
	 dec = 10;
 80159a4:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 80159a8:	2704      	movs	r7, #4
		delta_pos = 180;
 80159aa:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 80159ac:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 80159ae:	9b04      	ldr	r3, [sp, #16]
 80159b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80159b4:	2800      	cmp	r0, #0
 80159b6:	bfb8      	it	lt
 80159b8:	4240      	neglt	r0, r0
 80159ba:	f7ea fdcb 	bl	8000554 <__aeabi_i2d>
 80159be:	2200      	movs	r2, #0
 80159c0:	4b24      	ldr	r3, [pc, #144]	; (8015a54 <GUI_Text_LAB_Measure+0x3e4>)
 80159c2:	f7eb f8b3 	bl	8000b2c <__aeabi_dcmpge>
 80159c6:	b138      	cbz	r0, 80159d8 <GUI_Text_LAB_Measure+0x368>
			number++;
 80159c8:	9b03      	ldr	r3, [sp, #12]
 80159ca:	3301      	adds	r3, #1
			delta_pos-=23;
 80159cc:	3e17      	subs	r6, #23
			number++;
 80159ce:	b2db      	uxtb	r3, r3
			dec *= 10;
 80159d0:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 80159d4:	b2f6      	uxtb	r6, r6
			number++;
 80159d6:	9303      	str	r3, [sp, #12]
 80159d8:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 80159da:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80159de:	d1e6      	bne.n	80159ae <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 80159e0:	4b20      	ldr	r3, [pc, #128]	; (8015a64 <GUI_Text_LAB_Measure+0x3f4>)
 80159e2:	9903      	ldr	r1, [sp, #12]
 80159e4:	781a      	ldrb	r2, [r3, #0]
 80159e6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015a5c <GUI_Text_LAB_Measure+0x3ec>
 80159ea:	428a      	cmp	r2, r1
 80159ec:	f105 0746 	add.w	r7, r5, #70	; 0x46
 80159f0:	469a      	mov	sl, r3
 80159f2:	d803      	bhi.n	80159fc <GUI_Text_LAB_Measure+0x38c>
 80159f4:	f898 3000 	ldrb.w	r3, [r8]
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d10d      	bne.n	8015a18 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 80159fc:	2163      	movs	r1, #99	; 0x63
 80159fe:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8015a02:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015a06:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015a0a:	9100      	str	r1, [sp, #0]
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	b292      	uxth	r2, r2
 8015a10:	b2b9      	uxth	r1, r7
 8015a12:	b280      	uxth	r0, r0
 8015a14:	f006 f9ff 	bl	801be16 <TFT_FillRectangle>
	old_num_B = number;
 8015a18:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015a1c:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 8015a20:	f1b9 0f00 	cmp.w	r9, #0
 8015a24:	d007      	beq.n	8015a36 <GUI_Text_LAB_Measure+0x3c6>
 8015a26:	f1a4 0012 	sub.w	r0, r4, #18
 8015a2a:	4430      	add	r0, r6
 8015a2c:	222d      	movs	r2, #45	; 0x2d
 8015a2e:	b2b9      	uxth	r1, r7
 8015a30:	b280      	uxth	r0, r0
 8015a32:	f006 fce3 	bl	801c3fc <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8015a36:	19a0      	adds	r0, r4, r6
 8015a38:	2303      	movs	r3, #3
 8015a3a:	aa06      	add	r2, sp, #24
 8015a3c:	b2b9      	uxth	r1, r7
 8015a3e:	b280      	uxth	r0, r0
 8015a40:	f006 fd34 	bl	801c4ac <TFT_DisplayString>
		old_nan = 0;
 8015a44:	2300      	movs	r3, #0
 8015a46:	f888 3000 	strb.w	r3, [r8]
 8015a4a:	e687      	b.n	801575c <GUI_Text_LAB_Measure+0xec>
 8015a4c:	200001f0 	.word	0x200001f0
 8015a50:	080244b1 	.word	0x080244b1
 8015a54:	3ff00000 	.word	0x3ff00000
 8015a58:	2000023f 	.word	0x2000023f
 8015a5c:	20005721 	.word	0x20005721
 8015a60:	2000023b 	.word	0x2000023b
 8015a64:	2000023c 	.word	0x2000023c

08015a68 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 8015a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a6c:	b085      	sub	sp, #20
	char buffer[5] = {0};
 8015a6e:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015a70:	f100 082d 	add.w	r8, r0, #45	; 0x2d
{
 8015a74:	460c      	mov	r4, r1
 8015a76:	4605      	mov	r5, r0
	char buffer[5] = {0};
 8015a78:	9302      	str	r3, [sp, #8]
 8015a7a:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015a7e:	fa1f f888 	uxth.w	r8, r8
 8015a82:	f101 031a 	add.w	r3, r1, #26
 8015a86:	f241 3976 	movw	r9, #4982	; 0x1376
 8015a8a:	310a      	adds	r1, #10
 8015a8c:	300a      	adds	r0, #10
 8015a8e:	b29b      	uxth	r3, r3
 8015a90:	4642      	mov	r2, r8
 8015a92:	b289      	uxth	r1, r1
 8015a94:	b280      	uxth	r0, r0
 8015a96:	f8cd 9000 	str.w	r9, [sp]
{
 8015a9a:	ec57 6b10 	vmov	r6, r7, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015a9e:	f006 f9ba 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 8015aa2:	f104 0314 	add.w	r3, r4, #20
 8015aa6:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8015aaa:	f104 010f 	add.w	r1, r4, #15
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	b292      	uxth	r2, r2
 8015ab2:	b289      	uxth	r1, r1
 8015ab4:	4640      	mov	r0, r8
 8015ab6:	f8cd 9000 	str.w	r9, [sp]
 8015aba:	f006 f9ac 	bl	801be16 <TFT_FillRectangle>

		if(charge < 12)
 8015abe:	2200      	movs	r2, #0
 8015ac0:	4b4c      	ldr	r3, [pc, #304]	; (8015bf4 <GUI_Battery_Level+0x18c>)
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	4639      	mov	r1, r7
 8015ac6:	f7eb f81d 	bl	8000b04 <__aeabi_dcmplt>
 8015aca:	b188      	cbz	r0, 8015af0 <GUI_Battery_Level+0x88>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 8015acc:	f104 0318 	add.w	r3, r4, #24
 8015ad0:	f105 0213 	add.w	r2, r5, #19
 8015ad4:	f104 010c 	add.w	r1, r4, #12
 8015ad8:	f105 000f 	add.w	r0, r5, #15
 8015adc:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 8015ae0:	f8cd e000 	str.w	lr, [sp]
 8015ae4:	b29b      	uxth	r3, r3
 8015ae6:	b292      	uxth	r2, r2
 8015ae8:	b289      	uxth	r1, r1
 8015aea:	b280      	uxth	r0, r0
 8015aec:	f006 f993 	bl	801be16 <TFT_FillRectangle>
		}		
		if(charge >= 12)
 8015af0:	2200      	movs	r2, #0
 8015af2:	4b40      	ldr	r3, [pc, #256]	; (8015bf4 <GUI_Battery_Level+0x18c>)
 8015af4:	4630      	mov	r0, r6
 8015af6:	4639      	mov	r1, r7
 8015af8:	f7eb f818 	bl	8000b2c <__aeabi_dcmpge>
 8015afc:	b188      	cbz	r0, 8015b22 <GUI_Battery_Level+0xba>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 8015afe:	f104 0318 	add.w	r3, r4, #24
 8015b02:	f105 0213 	add.w	r2, r5, #19
 8015b06:	f104 010c 	add.w	r1, r4, #12
 8015b0a:	f105 000f 	add.w	r0, r5, #15
 8015b0e:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015b12:	f8cd e000 	str.w	lr, [sp]
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	b292      	uxth	r2, r2
 8015b1a:	b289      	uxth	r1, r1
 8015b1c:	b280      	uxth	r0, r0
 8015b1e:	f006 f97a 	bl	801be16 <TFT_FillRectangle>
		}		
		if(charge >= 25)
 8015b22:	2200      	movs	r2, #0
 8015b24:	4b34      	ldr	r3, [pc, #208]	; (8015bf8 <GUI_Battery_Level+0x190>)
 8015b26:	4630      	mov	r0, r6
 8015b28:	4639      	mov	r1, r7
 8015b2a:	f7ea ffff 	bl	8000b2c <__aeabi_dcmpge>
 8015b2e:	b188      	cbz	r0, 8015b54 <GUI_Battery_Level+0xec>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 8015b30:	f104 0318 	add.w	r3, r4, #24
 8015b34:	f105 021a 	add.w	r2, r5, #26
 8015b38:	f104 010c 	add.w	r1, r4, #12
 8015b3c:	f105 0016 	add.w	r0, r5, #22
 8015b40:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015b44:	f8cd e000 	str.w	lr, [sp]
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	b292      	uxth	r2, r2
 8015b4c:	b289      	uxth	r1, r1
 8015b4e:	b280      	uxth	r0, r0
 8015b50:	f006 f961 	bl	801be16 <TFT_FillRectangle>
		}		
		if(charge >= 50)
 8015b54:	2200      	movs	r2, #0
 8015b56:	4b29      	ldr	r3, [pc, #164]	; (8015bfc <GUI_Battery_Level+0x194>)
 8015b58:	4630      	mov	r0, r6
 8015b5a:	4639      	mov	r1, r7
 8015b5c:	f7ea ffe6 	bl	8000b2c <__aeabi_dcmpge>
 8015b60:	b188      	cbz	r0, 8015b86 <GUI_Battery_Level+0x11e>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 8015b62:	f104 0318 	add.w	r3, r4, #24
 8015b66:	f105 0221 	add.w	r2, r5, #33	; 0x21
 8015b6a:	f104 010c 	add.w	r1, r4, #12
 8015b6e:	f105 001d 	add.w	r0, r5, #29
 8015b72:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015b76:	f8cd e000 	str.w	lr, [sp]
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	b292      	uxth	r2, r2
 8015b7e:	b289      	uxth	r1, r1
 8015b80:	b280      	uxth	r0, r0
 8015b82:	f006 f948 	bl	801be16 <TFT_FillRectangle>
		}
		if(charge >= 85)
 8015b86:	2200      	movs	r2, #0
 8015b88:	4b1d      	ldr	r3, [pc, #116]	; (8015c00 <GUI_Battery_Level+0x198>)
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	4639      	mov	r1, r7
 8015b8e:	f7ea ffcd 	bl	8000b2c <__aeabi_dcmpge>
 8015b92:	b188      	cbz	r0, 8015bb8 <GUI_Battery_Level+0x150>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 8015b94:	f104 0318 	add.w	r3, r4, #24
 8015b98:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8015b9c:	f104 010c 	add.w	r1, r4, #12
 8015ba0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8015ba4:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015ba8:	f8cd e000 	str.w	lr, [sp]
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	b292      	uxth	r2, r2
 8015bb0:	b289      	uxth	r1, r1
 8015bb2:	b280      	uxth	r0, r0
 8015bb4:	f006 f92f 	bl	801be16 <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 8015bb8:	4632      	mov	r2, r6
 8015bba:	463b      	mov	r3, r7
 8015bbc:	4911      	ldr	r1, [pc, #68]	; (8015c04 <GUI_Battery_Level+0x19c>)
 8015bbe:	a802      	add	r0, sp, #8
 8015bc0:	f009 fe3c 	bl	801f83c <sprintf>
		TFT_SetFont(&Font8);
 8015bc4:	4810      	ldr	r0, [pc, #64]	; (8015c08 <GUI_Battery_Level+0x1a0>)
 8015bc6:	f006 fb4f 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8015bca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015bce:	f006 fb51 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015bd2:	2063      	movs	r0, #99	; 0x63
 8015bd4:	f006 fb54 	bl	801c280 <TFT_SetBackColor>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 8015bd8:	f104 010e 	add.w	r1, r4, #14
 8015bdc:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8015be0:	2303      	movs	r3, #3
 8015be2:	aa02      	add	r2, sp, #8
 8015be4:	b289      	uxth	r1, r1
 8015be6:	b280      	uxth	r0, r0
 8015be8:	f006 fc60 	bl	801c4ac <TFT_DisplayString>

}
 8015bec:	b005      	add	sp, #20
 8015bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bf2:	bf00      	nop
 8015bf4:	40280000 	.word	0x40280000
 8015bf8:	40390000 	.word	0x40390000
 8015bfc:	40490000 	.word	0x40490000
 8015c00:	40554000 	.word	0x40554000
 8015c04:	08031286 	.word	0x08031286
 8015c08:	20000218 	.word	0x20000218

08015c0c <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8015c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015c0e:	1e86      	subs	r6, r0, #2
{
 8015c10:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015c12:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015c16:	b2b6      	uxth	r6, r6
 8015c18:	39fa      	subs	r1, #250	; 0xfa
{
 8015c1a:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015c1c:	4623      	mov	r3, r4
 8015c1e:	4602      	mov	r2, r0
 8015c20:	9700      	str	r7, [sp, #0]
 8015c22:	4630      	mov	r0, r6
 8015c24:	b289      	uxth	r1, r1
 8015c26:	f006 f8f6 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8015c2a:	1ce3      	adds	r3, r4, #3
 8015c2c:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 8015c30:	1c61      	adds	r1, r4, #1
 8015c32:	4630      	mov	r0, r6
 8015c34:	9700      	str	r7, [sp, #0]
 8015c36:	b29b      	uxth	r3, r3
 8015c38:	b292      	uxth	r2, r2
 8015c3a:	b289      	uxth	r1, r1
 8015c3c:	f006 f8eb 	bl	801be16 <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 8015c40:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	1cea      	adds	r2, r5, #3
 8015c48:	1f68      	subs	r0, r5, #5
 8015c4a:	4619      	mov	r1, r3
 8015c4c:	9700      	str	r7, [sp, #0]
 8015c4e:	b292      	uxth	r2, r2
 8015c50:	b280      	uxth	r0, r0
 8015c52:	f006 f883 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 8015c56:	1da6      	adds	r6, r4, #6
 8015c58:	f105 0293 	add.w	r2, r5, #147	; 0x93
 8015c5c:	b292      	uxth	r2, r2
 8015c5e:	b2b6      	uxth	r6, r6
 8015c60:	1ee1      	subs	r1, r4, #3
 8015c62:	4633      	mov	r3, r6
 8015c64:	4610      	mov	r0, r2
 8015c66:	b289      	uxth	r1, r1
 8015c68:	9700      	str	r7, [sp, #0]
 8015c6a:	f006 f877 	bl	801bd5c <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8015c6e:	4819      	ldr	r0, [pc, #100]	; (8015cd4 <GUI_Axes_Locus_XY+0xc8>)
 8015c70:	f006 fafa 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8015c74:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 8015c76:	4638      	mov	r0, r7
 8015c78:	f006 fafc 	bl	801c274 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8015c7c:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015c7e:	2063      	movs	r0, #99	; 0x63
 8015c80:	f006 fafe 	bl	801c280 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8015c84:	4621      	mov	r1, r4
 8015c86:	222e      	movs	r2, #46	; 0x2e
 8015c88:	2004      	movs	r0, #4
 8015c8a:	f006 fbb7 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 8015c8e:	4621      	mov	r1, r4
 8015c90:	2230      	movs	r2, #48	; 0x30
 8015c92:	2000      	movs	r0, #0
 8015c94:	f006 fbb2 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 8015c98:	4621      	mov	r1, r4
 8015c9a:	2235      	movs	r2, #53	; 0x35
 8015c9c:	2008      	movs	r0, #8
 8015c9e:	f006 fbad 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 8015ca2:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8015ca6:	4631      	mov	r1, r6
 8015ca8:	222e      	movs	r2, #46	; 0x2e
 8015caa:	b280      	uxth	r0, r0
 8015cac:	f006 fba6 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 8015cb0:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8015cb4:	4631      	mov	r1, r6
 8015cb6:	2230      	movs	r2, #48	; 0x30
 8015cb8:	b280      	uxth	r0, r0
 8015cba:	f006 fb9f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8015cbe:	f105 0095 	add.w	r0, r5, #149	; 0x95
 8015cc2:	2235      	movs	r2, #53	; 0x35
 8015cc4:	4631      	mov	r1, r6
 8015cc6:	b280      	uxth	r0, r0
}
 8015cc8:	b003      	add	sp, #12
 8015cca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8015cce:	f006 bb95 	b.w	801c3fc <TFT_DrawChar>
 8015cd2:	bf00      	nop
 8015cd4:	20000210 	.word	0x20000210

08015cd8 <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8015cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015cda:	1e86      	subs	r6, r0, #2
{
 8015cdc:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015cde:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015ce2:	b2b6      	uxth	r6, r6
 8015ce4:	39ea      	subs	r1, #234	; 0xea
{
 8015ce6:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015ce8:	4623      	mov	r3, r4
 8015cea:	4602      	mov	r2, r0
 8015cec:	9700      	str	r7, [sp, #0]
 8015cee:	4630      	mov	r0, r6
 8015cf0:	b289      	uxth	r1, r1
 8015cf2:	f006 f890 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8015cf6:	1ce3      	adds	r3, r4, #3
 8015cf8:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8015cfc:	1c61      	adds	r1, r4, #1
 8015cfe:	4630      	mov	r0, r6
 8015d00:	9700      	str	r7, [sp, #0]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	b292      	uxth	r2, r2
 8015d06:	b289      	uxth	r1, r1
 8015d08:	f006 f885 	bl	801be16 <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 8015d0c:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	1cea      	adds	r2, r5, #3
 8015d14:	1f68      	subs	r0, r5, #5
 8015d16:	4619      	mov	r1, r3
 8015d18:	9700      	str	r7, [sp, #0]
 8015d1a:	b292      	uxth	r2, r2
 8015d1c:	b280      	uxth	r0, r0
 8015d1e:	f006 f81d 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 8015d22:	1da6      	adds	r6, r4, #6
 8015d24:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 8015d28:	b292      	uxth	r2, r2
 8015d2a:	b2b6      	uxth	r6, r6
 8015d2c:	1ee1      	subs	r1, r4, #3
 8015d2e:	4633      	mov	r3, r6
 8015d30:	4610      	mov	r0, r2
 8015d32:	b289      	uxth	r1, r1
 8015d34:	9700      	str	r7, [sp, #0]
 8015d36:	f006 f811 	bl	801bd5c <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8015d3a:	4819      	ldr	r0, [pc, #100]	; (8015da0 <GUI_Axes_Locus_LUV+0xc8>)
 8015d3c:	f006 fa94 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8015d40:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 8015d42:	4638      	mov	r0, r7
 8015d44:	f006 fa96 	bl	801c274 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8015d48:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015d4a:	2063      	movs	r0, #99	; 0x63
 8015d4c:	f006 fa98 	bl	801c280 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8015d50:	4621      	mov	r1, r4
 8015d52:	222e      	movs	r2, #46	; 0x2e
 8015d54:	2004      	movs	r0, #4
 8015d56:	f006 fb51 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 8015d5a:	4621      	mov	r1, r4
 8015d5c:	2230      	movs	r2, #48	; 0x30
 8015d5e:	2000      	movs	r0, #0
 8015d60:	f006 fb4c 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 8015d64:	4621      	mov	r1, r4
 8015d66:	2235      	movs	r2, #53	; 0x35
 8015d68:	2008      	movs	r0, #8
 8015d6a:	f006 fb47 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 8015d6e:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 8015d72:	4631      	mov	r1, r6
 8015d74:	222e      	movs	r2, #46	; 0x2e
 8015d76:	b280      	uxth	r0, r0
 8015d78:	f006 fb40 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8015d7c:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 8015d80:	4631      	mov	r1, r6
 8015d82:	2230      	movs	r2, #48	; 0x30
 8015d84:	b280      	uxth	r0, r0
 8015d86:	f006 fb39 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8015d8a:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 8015d8e:	2235      	movs	r2, #53	; 0x35
 8015d90:	4631      	mov	r1, r6
 8015d92:	b280      	uxth	r0, r0
}
 8015d94:	b003      	add	sp, #12
 8015d96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8015d9a:	f006 bb2f 	b.w	801c3fc <TFT_DrawChar>
 8015d9e:	bf00      	nop
 8015da0:	20000210 	.word	0x20000210

08015da4 <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8015da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015da8:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8015dac:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015dae:	b29b      	uxth	r3, r3
{
 8015db0:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015db2:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 8015db6:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015db8:	9303      	str	r3, [sp, #12]
 8015dba:	387f      	subs	r0, #127	; 0x7f
 8015dbc:	1c4b      	adds	r3, r1, #1
 8015dbe:	3901      	subs	r1, #1
 8015dc0:	9a03      	ldr	r2, [sp, #12]
 8015dc2:	9700      	str	r7, [sp, #0]
 8015dc4:	b29b      	uxth	r3, r3
 8015dc6:	b289      	uxth	r1, r1
 8015dc8:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8015dca:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015dce:	f006 f822 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8015dd2:	b2b6      	uxth	r6, r6
 8015dd4:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 8015dd8:	1ea0      	subs	r0, r4, #2
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	4622      	mov	r2, r4
 8015dde:	4631      	mov	r1, r6
 8015de0:	9700      	str	r7, [sp, #0]
 8015de2:	b280      	uxth	r0, r0
 8015de4:	9304      	str	r3, [sp, #16]
 8015de6:	f006 f816 	bl	801be16 <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 8015dea:	4850      	ldr	r0, [pc, #320]	; (8015f2c <GUI_Axes_Locus_Lab+0x188>)
 8015dec:	f006 fa3c 	bl	801c268 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8015df0:	4638      	mov	r0, r7
 8015df2:	f006 fa3f 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015df6:	2063      	movs	r0, #99	; 0x63
 8015df8:	f006 fa42 	bl	801c280 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8015dfc:	f1a4 031e 	sub.w	r3, r4, #30
 8015e00:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8015e02:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8015e06:	4618      	mov	r0, r3
 8015e08:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8015e0a:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8015e0e:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8015e10:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8015e14:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8015e16:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8015e1a:	f006 faef 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8015e1e:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8015e22:	4631      	mov	r1, r6
 8015e24:	4658      	mov	r0, fp
 8015e26:	2231      	movs	r2, #49	; 0x31
 8015e28:	f006 fae8 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8015e2c:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8015e30:	4631      	mov	r1, r6
 8015e32:	4650      	mov	r0, sl
 8015e34:	2232      	movs	r2, #50	; 0x32
 8015e36:	f006 fae1 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8015e3a:	4631      	mov	r1, r6
 8015e3c:	4648      	mov	r0, r9
 8015e3e:	2238      	movs	r2, #56	; 0x38
 8015e40:	f006 fadc 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 8015e44:	f105 0875 	add.w	r8, r5, #117	; 0x75
 8015e48:	9b05      	ldr	r3, [sp, #20]
 8015e4a:	fa1f f888 	uxth.w	r8, r8
 8015e4e:	4618      	mov	r0, r3
 8015e50:	4641      	mov	r1, r8
 8015e52:	222d      	movs	r2, #45	; 0x2d
 8015e54:	f006 fad2 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 8015e58:	4641      	mov	r1, r8
 8015e5a:	4658      	mov	r0, fp
 8015e5c:	2231      	movs	r2, #49	; 0x31
 8015e5e:	f006 facd 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 8015e62:	4641      	mov	r1, r8
 8015e64:	4650      	mov	r0, sl
 8015e66:	2232      	movs	r2, #50	; 0x32
 8015e68:	f006 fac8 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8015e6c:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 8015e6e:	f1a5 080b 	sub.w	r8, r5, #11
 8015e72:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8015e76:	4648      	mov	r0, r9
 8015e78:	2238      	movs	r2, #56	; 0x38
 8015e7a:	f006 fabf 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 8015e7e:	4641      	mov	r1, r8
 8015e80:	222d      	movs	r2, #45	; 0x2d
 8015e82:	2000      	movs	r0, #0
 8015e84:	f006 faba 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 8015e88:	4641      	mov	r1, r8
 8015e8a:	2231      	movs	r2, #49	; 0x31
 8015e8c:	2005      	movs	r0, #5
 8015e8e:	f006 fab5 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 8015e92:	4641      	mov	r1, r8
 8015e94:	2232      	movs	r2, #50	; 0x32
 8015e96:	200a      	movs	r0, #10
 8015e98:	f006 fab0 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 8015e9c:	4641      	mov	r1, r8
 8015e9e:	2238      	movs	r2, #56	; 0x38
 8015ea0:	2010      	movs	r0, #16
 8015ea2:	f006 faab 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 8015ea6:	4641      	mov	r1, r8
 8015ea8:	222b      	movs	r2, #43	; 0x2b
 8015eaa:	20f5      	movs	r0, #245	; 0xf5
 8015eac:	f006 faa6 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 8015eb0:	4641      	mov	r1, r8
 8015eb2:	2231      	movs	r2, #49	; 0x31
 8015eb4:	20fa      	movs	r0, #250	; 0xfa
 8015eb6:	f006 faa1 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 8015eba:	4641      	mov	r1, r8
 8015ebc:	2232      	movs	r2, #50	; 0x32
 8015ebe:	20ff      	movs	r0, #255	; 0xff
 8015ec0:	f006 fa9c 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8015ec4:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 8015ec8:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8015eca:	f1a4 0805 	sub.w	r8, r4, #5
 8015ece:	fa1f f888 	uxth.w	r8, r8
 8015ed2:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 8015ed6:	2238      	movs	r2, #56	; 0x38
 8015ed8:	f44f 7082 	mov.w	r0, #260	; 0x104
 8015edc:	f006 fa8e 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8015ee0:	4633      	mov	r3, r6
 8015ee2:	464a      	mov	r2, r9
 8015ee4:	4631      	mov	r1, r6
 8015ee6:	4640      	mov	r0, r8
 8015ee8:	9700      	str	r7, [sp, #0]
 8015eea:	f005 ff37 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 8015eee:	9b04      	ldr	r3, [sp, #16]
 8015ef0:	9700      	str	r7, [sp, #0]
 8015ef2:	464a      	mov	r2, r9
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	4640      	mov	r0, r8
 8015ef8:	f005 ff30 	bl	801bd5c <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 8015efc:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 8015f00:	1eec      	subs	r4, r5, #3
 8015f02:	3506      	adds	r5, #6
 8015f04:	b292      	uxth	r2, r2
 8015f06:	b2a4      	uxth	r4, r4
 8015f08:	b2ad      	uxth	r5, r5
 8015f0a:	462b      	mov	r3, r5
 8015f0c:	4621      	mov	r1, r4
 8015f0e:	4610      	mov	r0, r2
 8015f10:	9700      	str	r7, [sp, #0]
 8015f12:	f005 ff23 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 8015f16:	9a03      	ldr	r2, [sp, #12]
 8015f18:	9700      	str	r7, [sp, #0]
 8015f1a:	462b      	mov	r3, r5
 8015f1c:	4621      	mov	r1, r4
 8015f1e:	4610      	mov	r0, r2
 8015f20:	f005 ff1c 	bl	801bd5c <TFT_DrawLine>
}
 8015f24:	b007      	add	sp, #28
 8015f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f2a:	bf00      	nop
 8015f2c:	20000210 	.word	0x20000210

08015f30 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 8015f30:	b538      	push	{r3, r4, r5, lr}
 8015f32:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 8015f34:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8015f38:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 8015f3a:	f006 f99b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015f3e:	2063      	movs	r0, #99	; 0x63
 8015f40:	f006 f99e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8015f44:	4816      	ldr	r0, [pc, #88]	; (8015fa0 <GUI_Text_CIE_XYZ+0x70>)
 8015f46:	f006 f98f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8015f4a:	4629      	mov	r1, r5
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	2243      	movs	r2, #67	; 0x43
 8015f50:	f006 fa54 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8015f54:	f104 000d 	add.w	r0, r4, #13
 8015f58:	4629      	mov	r1, r5
 8015f5a:	2249      	movs	r2, #73	; 0x49
 8015f5c:	b280      	uxth	r0, r0
 8015f5e:	f006 fa4d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8015f62:	f104 001b 	add.w	r0, r4, #27
 8015f66:	4629      	mov	r1, r5
 8015f68:	2245      	movs	r2, #69	; 0x45
 8015f6a:	b280      	uxth	r0, r0
 8015f6c:	f006 fa46 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 8015f70:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8015f74:	4629      	mov	r1, r5
 8015f76:	2258      	movs	r2, #88	; 0x58
 8015f78:	b280      	uxth	r0, r0
 8015f7a:	f006 fa3f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8015f7e:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8015f82:	4629      	mov	r1, r5
 8015f84:	2259      	movs	r2, #89	; 0x59
 8015f86:	b280      	uxth	r0, r0
 8015f88:	f006 fa38 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 8015f8c:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8015f90:	4629      	mov	r1, r5
 8015f92:	225a      	movs	r2, #90	; 0x5a
 8015f94:	b280      	uxth	r0, r0
}
 8015f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 8015f9a:	f006 ba2f 	b.w	801c3fc <TFT_DrawChar>
 8015f9e:	bf00      	nop
 8015fa0:	200001b0 	.word	0x200001b0

08015fa4 <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 8015fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fa6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8015fa8:	4f2c      	ldr	r7, [pc, #176]	; (801605c <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 8015faa:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8015fae:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8015fb0:	f006 f960 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015fb4:	2063      	movs	r0, #99	; 0x63
 8015fb6:	f006 f963 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8015fba:	4638      	mov	r0, r7
 8015fbc:	f006 f954 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	2243      	movs	r2, #67	; 0x43
 8015fc6:	f006 fa19 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8015fca:	f104 000d 	add.w	r0, r4, #13
 8015fce:	4629      	mov	r1, r5
 8015fd0:	2249      	movs	r2, #73	; 0x49
 8015fd2:	b280      	uxth	r0, r0
 8015fd4:	f006 fa12 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8015fd8:	f104 001b 	add.w	r0, r4, #27
 8015fdc:	4629      	mov	r1, r5
 8015fde:	2245      	movs	r2, #69	; 0x45
 8015fe0:	b280      	uxth	r0, r0
 8015fe2:	f006 fa0b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 8015fe6:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8015fea:	4629      	mov	r1, r5
 8015fec:	222c      	movs	r2, #44	; 0x2c
 8015fee:	b280      	uxth	r0, r0
 8015ff0:	f006 fa04 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8015ff4:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 8015ff6:	481a      	ldr	r0, [pc, #104]	; (8016060 <GUI_Text_CIE_xy_1931+0xbc>)
 8015ff8:	f006 f936 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8015ffc:	b2b6      	uxth	r6, r6
 8015ffe:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016002:	4631      	mov	r1, r6
 8016004:	2278      	movs	r2, #120	; 0x78
 8016006:	b280      	uxth	r0, r0
 8016008:	f006 f9f8 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 801600c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016010:	4631      	mov	r1, r6
 8016012:	2279      	movs	r2, #121	; 0x79
 8016014:	b280      	uxth	r0, r0
 8016016:	f006 f9f1 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801601a:	4638      	mov	r0, r7
 801601c:	f006 f924 	bl	801c268 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016024:	4629      	mov	r1, r5
 8016026:	2231      	movs	r2, #49	; 0x31
 8016028:	b280      	uxth	r0, r0
 801602a:	f006 f9e7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 801602e:	f104 0085 	add.w	r0, r4, #133	; 0x85
 8016032:	4629      	mov	r1, r5
 8016034:	2231      	movs	r2, #49	; 0x31
 8016036:	b280      	uxth	r0, r0
 8016038:	f006 f9e0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 801603c:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016040:	4629      	mov	r1, r5
 8016042:	2239      	movs	r2, #57	; 0x39
 8016044:	b280      	uxth	r0, r0
 8016046:	f006 f9d9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 801604a:	f104 0079 	add.w	r0, r4, #121	; 0x79
 801604e:	4629      	mov	r1, r5
 8016050:	2233      	movs	r2, #51	; 0x33
 8016052:	b280      	uxth	r0, r0


}
 8016054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 8016058:	f006 b9d0 	b.w	801c3fc <TFT_DrawChar>
 801605c:	200001b0 	.word	0x200001b0
 8016060:	200001c0 	.word	0x200001c0

08016064 <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 8016064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016066:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8016068:	4f2c      	ldr	r7, [pc, #176]	; (801611c <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 801606a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801606e:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016070:	f006 f900 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016074:	2063      	movs	r0, #99	; 0x63
 8016076:	f006 f903 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801607a:	4638      	mov	r0, r7
 801607c:	f006 f8f4 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016080:	4629      	mov	r1, r5
 8016082:	4620      	mov	r0, r4
 8016084:	2243      	movs	r2, #67	; 0x43
 8016086:	f006 f9b9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801608a:	f104 000d 	add.w	r0, r4, #13
 801608e:	4629      	mov	r1, r5
 8016090:	2249      	movs	r2, #73	; 0x49
 8016092:	b280      	uxth	r0, r0
 8016094:	f006 f9b2 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016098:	f104 001b 	add.w	r0, r4, #27
 801609c:	4629      	mov	r1, r5
 801609e:	2245      	movs	r2, #69	; 0x45
 80160a0:	b280      	uxth	r0, r0
 80160a2:	f006 f9ab 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 80160a6:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80160aa:	4629      	mov	r1, r5
 80160ac:	222c      	movs	r2, #44	; 0x2c
 80160ae:	b280      	uxth	r0, r0
 80160b0:	f006 f9a4 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80160b4:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 80160b6:	481a      	ldr	r0, [pc, #104]	; (8016120 <GUI_Text_CIE_xy_1964+0xbc>)
 80160b8:	f006 f8d6 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80160bc:	b2b6      	uxth	r6, r6
 80160be:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80160c2:	4631      	mov	r1, r6
 80160c4:	2278      	movs	r2, #120	; 0x78
 80160c6:	b280      	uxth	r0, r0
 80160c8:	f006 f998 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 80160cc:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80160d0:	4631      	mov	r1, r6
 80160d2:	2279      	movs	r2, #121	; 0x79
 80160d4:	b280      	uxth	r0, r0
 80160d6:	f006 f991 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80160da:	4638      	mov	r0, r7
 80160dc:	f006 f8c4 	bl	801c268 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80160e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80160e4:	4629      	mov	r1, r5
 80160e6:	2231      	movs	r2, #49	; 0x31
 80160e8:	b280      	uxth	r0, r0
 80160ea:	f006 f987 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 80160ee:	f104 0069 	add.w	r0, r4, #105	; 0x69
 80160f2:	4629      	mov	r1, r5
 80160f4:	2239      	movs	r2, #57	; 0x39
 80160f6:	b280      	uxth	r0, r0
 80160f8:	f006 f980 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 80160fc:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8016100:	4629      	mov	r1, r5
 8016102:	2236      	movs	r2, #54	; 0x36
 8016104:	b280      	uxth	r0, r0
 8016106:	f006 f979 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 801610a:	f104 0087 	add.w	r0, r4, #135	; 0x87
 801610e:	4629      	mov	r1, r5
 8016110:	2234      	movs	r2, #52	; 0x34
 8016112:	b280      	uxth	r0, r0
}
 8016114:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 8016118:	f006 b970 	b.w	801c3fc <TFT_DrawChar>
 801611c:	200001b0 	.word	0x200001b0
 8016120:	200001c0 	.word	0x200001c0

08016124 <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 8016124:	b538      	push	{r3, r4, r5, lr}
 8016126:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016128:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801612c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801612e:	f006 f8a1 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016132:	2063      	movs	r0, #99	; 0x63
 8016134:	f006 f8a4 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016138:	481f      	ldr	r0, [pc, #124]	; (80161b8 <GUI_Text_CIE_Luv+0x94>)
 801613a:	f006 f895 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801613e:	4621      	mov	r1, r4
 8016140:	4628      	mov	r0, r5
 8016142:	2243      	movs	r2, #67	; 0x43
 8016144:	f006 f95a 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016148:	f105 000d 	add.w	r0, r5, #13
 801614c:	4621      	mov	r1, r4
 801614e:	2249      	movs	r2, #73	; 0x49
 8016150:	b280      	uxth	r0, r0
 8016152:	f006 f953 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016156:	f105 001b 	add.w	r0, r5, #27
 801615a:	4621      	mov	r1, r4
 801615c:	2245      	movs	r2, #69	; 0x45
 801615e:	b280      	uxth	r0, r0
 8016160:	f006 f94c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016164:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016168:	4621      	mov	r1, r4
 801616a:	224c      	movs	r2, #76	; 0x4c
 801616c:	b280      	uxth	r0, r0
 801616e:	f006 f945 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 8016172:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016176:	4621      	mov	r1, r4
 8016178:	2227      	movs	r2, #39	; 0x27
 801617a:	b280      	uxth	r0, r0
 801617c:	f006 f93e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8016180:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 8016184:	4621      	mov	r1, r4
 8016186:	2227      	movs	r2, #39	; 0x27
 8016188:	b280      	uxth	r0, r0
 801618a:	f006 f937 	bl	801c3fc <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 801618e:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016190:	480a      	ldr	r0, [pc, #40]	; (80161bc <GUI_Text_CIE_Luv+0x98>)
 8016192:	f006 f869 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 8016196:	b2a4      	uxth	r4, r4
 8016198:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801619c:	4621      	mov	r1, r4
 801619e:	2275      	movs	r2, #117	; 0x75
 80161a0:	b280      	uxth	r0, r0
 80161a2:	f006 f92b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 80161a6:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 80161aa:	4621      	mov	r1, r4
 80161ac:	2276      	movs	r2, #118	; 0x76
 80161ae:	b280      	uxth	r0, r0
}
 80161b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 80161b4:	f006 b922 	b.w	801c3fc <TFT_DrawChar>
 80161b8:	200001b0 	.word	0x200001b0
 80161bc:	200001c0 	.word	0x200001c0

080161c0 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 80161c0:	b538      	push	{r3, r4, r5, lr}
 80161c2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80161c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80161c8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80161ca:	f006 f853 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80161ce:	2063      	movs	r0, #99	; 0x63
 80161d0:	f006 f856 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80161d4:	481f      	ldr	r0, [pc, #124]	; (8016254 <GUI_Text_CIE_Lab+0x94>)
 80161d6:	f006 f847 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80161da:	4621      	mov	r1, r4
 80161dc:	4628      	mov	r0, r5
 80161de:	2243      	movs	r2, #67	; 0x43
 80161e0:	f006 f90c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80161e4:	f105 000d 	add.w	r0, r5, #13
 80161e8:	4621      	mov	r1, r4
 80161ea:	2249      	movs	r2, #73	; 0x49
 80161ec:	b280      	uxth	r0, r0
 80161ee:	f006 f905 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80161f2:	f105 001b 	add.w	r0, r5, #27
 80161f6:	4621      	mov	r1, r4
 80161f8:	2245      	movs	r2, #69	; 0x45
 80161fa:	b280      	uxth	r0, r0
 80161fc:	f006 f8fe 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016200:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016204:	4621      	mov	r1, r4
 8016206:	224c      	movs	r2, #76	; 0x4c
 8016208:	b280      	uxth	r0, r0
 801620a:	f006 f8f7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 801620e:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016212:	4621      	mov	r1, r4
 8016214:	222a      	movs	r2, #42	; 0x2a
 8016216:	b280      	uxth	r0, r0
 8016218:	f006 f8f0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 801621c:	f105 0069 	add.w	r0, r5, #105	; 0x69
 8016220:	4621      	mov	r1, r4
 8016222:	222a      	movs	r2, #42	; 0x2a
 8016224:	b280      	uxth	r0, r0
 8016226:	f006 f8e9 	bl	801c3fc <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 801622a:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 801622c:	480a      	ldr	r0, [pc, #40]	; (8016258 <GUI_Text_CIE_Lab+0x98>)
 801622e:	f006 f81b 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 8016232:	b2a4      	uxth	r4, r4
 8016234:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016238:	4621      	mov	r1, r4
 801623a:	2261      	movs	r2, #97	; 0x61
 801623c:	b280      	uxth	r0, r0
 801623e:	f006 f8dd 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 8016242:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8016246:	4621      	mov	r1, r4
 8016248:	2262      	movs	r2, #98	; 0x62
 801624a:	b280      	uxth	r0, r0
}
 801624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8016250:	f006 b8d4 	b.w	801c3fc <TFT_DrawChar>
 8016254:	200001b0 	.word	0x200001b0
 8016258:	200001c0 	.word	0x200001c0

0801625c <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 801625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801625e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8016260:	4e29      	ldr	r6, [pc, #164]	; (8016308 <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 8016262:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016266:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 8016268:	f006 f804 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801626c:	2063      	movs	r0, #99	; 0x63
 801626e:	f006 f807 	bl	801c280 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016272:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016274:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 8016276:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 8016278:	f005 fff6 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 801627c:	f104 000d 	add.w	r0, r4, #13
 8016280:	4629      	mov	r1, r5
 8016282:	226c      	movs	r2, #108	; 0x6c
 8016284:	b280      	uxth	r0, r0
 8016286:	f006 f8b9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 801628a:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 801628e:	4629      	mov	r1, r5
 8016290:	2274      	movs	r2, #116	; 0x74
 8016292:	b280      	uxth	r0, r0
 8016294:	f006 f8b2 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 8016298:	f104 0051 	add.w	r0, r4, #81	; 0x51
 801629c:	4629      	mov	r1, r5
 801629e:	2274      	movs	r2, #116	; 0x74
 80162a0:	b280      	uxth	r0, r0
 80162a2:	f006 f8ab 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80162a6:	4819      	ldr	r0, [pc, #100]	; (801630c <GUI_Text_Bluetooth+0xb0>)
 80162a8:	f005 ffde 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 80162ac:	4639      	mov	r1, r7
 80162ae:	2242      	movs	r2, #66	; 0x42
 80162b0:	4620      	mov	r0, r4
 80162b2:	f006 f8a3 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80162b6:	4630      	mov	r0, r6
 80162b8:	f005 ffd6 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 80162bc:	f104 0017 	add.w	r0, r4, #23
 80162c0:	4629      	mov	r1, r5
 80162c2:	2275      	movs	r2, #117	; 0x75
 80162c4:	b280      	uxth	r0, r0
 80162c6:	f006 f899 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 80162ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80162ce:	4629      	mov	r1, r5
 80162d0:	2265      	movs	r2, #101	; 0x65
 80162d2:	b280      	uxth	r0, r0
 80162d4:	f006 f892 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 80162d8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80162dc:	4629      	mov	r1, r5
 80162de:	226f      	movs	r2, #111	; 0x6f
 80162e0:	b280      	uxth	r0, r0
 80162e2:	f006 f88b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 80162e6:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80162ea:	4629      	mov	r1, r5
 80162ec:	226f      	movs	r2, #111	; 0x6f
 80162ee:	b280      	uxth	r0, r0
 80162f0:	f006 f884 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 80162f4:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 80162f8:	4629      	mov	r1, r5
 80162fa:	2268      	movs	r2, #104	; 0x68
 80162fc:	b280      	uxth	r0, r0
}
 80162fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 8016302:	f006 b87b 	b.w	801c3fc <TFT_DrawChar>
 8016306:	bf00      	nop
 8016308:	200001c0 	.word	0x200001c0
 801630c:	200001b0 	.word	0x200001b0

08016310 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8016310:	b538      	push	{r3, r4, r5, lr}
 8016312:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016314:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016318:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801631a:	f005 ffab 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801631e:	2063      	movs	r0, #99	; 0x63
 8016320:	f005 ffae 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016324:	4804      	ldr	r0, [pc, #16]	; (8016338 <GUI_Text_A+0x28>)
 8016326:	f005 ff9f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 801632a:	4629      	mov	r1, r5
 801632c:	4620      	mov	r0, r4
 801632e:	2241      	movs	r2, #65	; 0x41
}
 8016330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 8016334:	f006 b862 	b.w	801c3fc <TFT_DrawChar>
 8016338:	200001b0 	.word	0x200001b0

0801633c <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 801633c:	b538      	push	{r3, r4, r5, lr}
 801633e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016340:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016344:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016346:	f005 ff95 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801634a:	2063      	movs	r0, #99	; 0x63
 801634c:	f005 ff98 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016350:	480b      	ldr	r0, [pc, #44]	; (8016380 <GUI_Text_D65+0x44>)
 8016352:	f005 ff89 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016356:	4629      	mov	r1, r5
 8016358:	4620      	mov	r0, r4
 801635a:	2244      	movs	r2, #68	; 0x44
 801635c:	f006 f84e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8016360:	f104 000f 	add.w	r0, r4, #15
 8016364:	4629      	mov	r1, r5
 8016366:	2236      	movs	r2, #54	; 0x36
 8016368:	b280      	uxth	r0, r0
 801636a:	f006 f847 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 801636e:	f104 0020 	add.w	r0, r4, #32
 8016372:	4629      	mov	r1, r5
 8016374:	2235      	movs	r2, #53	; 0x35
 8016376:	b280      	uxth	r0, r0
}
 8016378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 801637c:	f006 b83e 	b.w	801c3fc <TFT_DrawChar>
 8016380:	200001b0 	.word	0x200001b0

08016384 <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 8016384:	b538      	push	{r3, r4, r5, lr}
 8016386:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016388:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801638c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801638e:	f005 ff71 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016392:	2063      	movs	r0, #99	; 0x63
 8016394:	f005 ff74 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016398:	4804      	ldr	r0, [pc, #16]	; (80163ac <GUI_Text_C+0x28>)
 801639a:	f005 ff65 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801639e:	4629      	mov	r1, r5
 80163a0:	4620      	mov	r0, r4
 80163a2:	2243      	movs	r2, #67	; 0x43
}
 80163a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 80163a8:	f006 b828 	b.w	801c3fc <TFT_DrawChar>
 80163ac:	200001b0 	.word	0x200001b0

080163b0 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 80163b0:	b538      	push	{r3, r4, r5, lr}
 80163b2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80163b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80163b8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80163ba:	f005 ff5b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80163be:	2063      	movs	r0, #99	; 0x63
 80163c0:	f005 ff5e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80163c4:	480b      	ldr	r0, [pc, #44]	; (80163f4 <GUI_Text_D50+0x44>)
 80163c6:	f005 ff4f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 80163ca:	4629      	mov	r1, r5
 80163cc:	4620      	mov	r0, r4
 80163ce:	2244      	movs	r2, #68	; 0x44
 80163d0:	f006 f814 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 80163d4:	f104 000f 	add.w	r0, r4, #15
 80163d8:	4629      	mov	r1, r5
 80163da:	2235      	movs	r2, #53	; 0x35
 80163dc:	b280      	uxth	r0, r0
 80163de:	f006 f80d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 80163e2:	f104 001f 	add.w	r0, r4, #31
 80163e6:	4629      	mov	r1, r5
 80163e8:	2230      	movs	r2, #48	; 0x30
 80163ea:	b280      	uxth	r0, r0
}
 80163ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 80163f0:	f006 b804 	b.w	801c3fc <TFT_DrawChar>
 80163f4:	200001b0 	.word	0x200001b0

080163f8 <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 80163f8:	b538      	push	{r3, r4, r5, lr}
 80163fa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80163fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016400:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016402:	f005 ff37 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016406:	2063      	movs	r0, #99	; 0x63
 8016408:	f005 ff3a 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801640c:	480b      	ldr	r0, [pc, #44]	; (801643c <GUI_Text_D55+0x44>)
 801640e:	f005 ff2b 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016412:	4629      	mov	r1, r5
 8016414:	4620      	mov	r0, r4
 8016416:	2244      	movs	r2, #68	; 0x44
 8016418:	f005 fff0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 801641c:	f104 000f 	add.w	r0, r4, #15
 8016420:	4629      	mov	r1, r5
 8016422:	2235      	movs	r2, #53	; 0x35
 8016424:	b280      	uxth	r0, r0
 8016426:	f005 ffe9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 801642a:	f104 001f 	add.w	r0, r4, #31
 801642e:	4629      	mov	r1, r5
 8016430:	2235      	movs	r2, #53	; 0x35
 8016432:	b280      	uxth	r0, r0
}
 8016434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016438:	f005 bfe0 	b.w	801c3fc <TFT_DrawChar>
 801643c:	200001b0 	.word	0x200001b0

08016440 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8016440:	b538      	push	{r3, r4, r5, lr}
 8016442:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016444:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016448:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801644a:	f005 ff13 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801644e:	2063      	movs	r0, #99	; 0x63
 8016450:	f005 ff16 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016454:	480b      	ldr	r0, [pc, #44]	; (8016484 <GUI_Text_D75+0x44>)
 8016456:	f005 ff07 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 801645a:	4629      	mov	r1, r5
 801645c:	4620      	mov	r0, r4
 801645e:	2244      	movs	r2, #68	; 0x44
 8016460:	f005 ffcc 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8016464:	f104 000f 	add.w	r0, r4, #15
 8016468:	4629      	mov	r1, r5
 801646a:	2237      	movs	r2, #55	; 0x37
 801646c:	b280      	uxth	r0, r0
 801646e:	f005 ffc5 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016472:	f104 001f 	add.w	r0, r4, #31
 8016476:	4629      	mov	r1, r5
 8016478:	2235      	movs	r2, #53	; 0x35
 801647a:	b280      	uxth	r0, r0
}
 801647c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016480:	f005 bfbc 	b.w	801c3fc <TFT_DrawChar>
 8016484:	200001b0 	.word	0x200001b0

08016488 <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8016488:	b538      	push	{r3, r4, r5, lr}
 801648a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801648c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016490:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016492:	f005 feef 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016496:	2063      	movs	r0, #99	; 0x63
 8016498:	f005 fef2 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801649c:	4815      	ldr	r0, [pc, #84]	; (80164f4 <GUI_Text_CIE_xy+0x6c>)
 801649e:	f005 fee3 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80164a2:	4621      	mov	r1, r4
 80164a4:	4628      	mov	r0, r5
 80164a6:	2243      	movs	r2, #67	; 0x43
 80164a8:	f005 ffa8 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80164ac:	f105 000d 	add.w	r0, r5, #13
 80164b0:	4621      	mov	r1, r4
 80164b2:	2249      	movs	r2, #73	; 0x49
 80164b4:	b280      	uxth	r0, r0
 80164b6:	f005 ffa1 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80164ba:	f105 001b 	add.w	r0, r5, #27
 80164be:	4621      	mov	r1, r4
 80164c0:	2245      	movs	r2, #69	; 0x45
 80164c2:	b280      	uxth	r0, r0
 80164c4:	f005 ff9a 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80164c8:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 80164ca:	480b      	ldr	r0, [pc, #44]	; (80164f8 <GUI_Text_CIE_xy+0x70>)
 80164cc:	f005 fecc 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80164d0:	b2a4      	uxth	r4, r4
 80164d2:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80164d6:	4621      	mov	r1, r4
 80164d8:	2278      	movs	r2, #120	; 0x78
 80164da:	b280      	uxth	r0, r0
 80164dc:	f005 ff8e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 80164e0:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 80164e4:	4621      	mov	r1, r4
 80164e6:	2279      	movs	r2, #121	; 0x79
 80164e8:	b280      	uxth	r0, r0
}
 80164ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 80164ee:	f005 bf85 	b.w	801c3fc <TFT_DrawChar>
 80164f2:	bf00      	nop
 80164f4:	200001b0 	.word	0x200001b0
 80164f8:	200001c0 	.word	0x200001c0

080164fc <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 80164fc:	b538      	push	{r3, r4, r5, lr}
 80164fe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016500:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016504:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016506:	f005 feb5 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801650a:	2063      	movs	r0, #99	; 0x63
 801650c:	f005 feb8 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016510:	480b      	ldr	r0, [pc, #44]	; (8016540 <GUI_Text_CRI+0x44>)
 8016512:	f005 fea9 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 8016516:	f104 001b 	add.w	r0, r4, #27
 801651a:	4629      	mov	r1, r5
 801651c:	2249      	movs	r2, #73	; 0x49
 801651e:	b280      	uxth	r0, r0
 8016520:	f005 ff6c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8016524:	4629      	mov	r1, r5
 8016526:	4620      	mov	r0, r4
 8016528:	2243      	movs	r2, #67	; 0x43
 801652a:	f005 ff67 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 801652e:	f104 000d 	add.w	r0, r4, #13
 8016532:	4629      	mov	r1, r5
 8016534:	2252      	movs	r2, #82	; 0x52
 8016536:	b280      	uxth	r0, r0
}
 8016538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 801653c:	f005 bf5e 	b.w	801c3fc <TFT_DrawChar>
 8016540:	200001b0 	.word	0x200001b0

08016544 <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8016544:	b538      	push	{r3, r4, r5, lr}
 8016546:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016548:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801654c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801654e:	f005 fe91 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016552:	2063      	movs	r0, #99	; 0x63
 8016554:	f005 fe94 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016558:	480b      	ldr	r0, [pc, #44]	; (8016588 <GUI_Text_CQS+0x44>)
 801655a:	f005 fe85 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801655e:	4629      	mov	r1, r5
 8016560:	4620      	mov	r0, r4
 8016562:	2243      	movs	r2, #67	; 0x43
 8016564:	f005 ff4a 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8016568:	f104 000d 	add.w	r0, r4, #13
 801656c:	4629      	mov	r1, r5
 801656e:	2251      	movs	r2, #81	; 0x51
 8016570:	b280      	uxth	r0, r0
 8016572:	f005 ff43 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8016576:	f104 001c 	add.w	r0, r4, #28
 801657a:	4629      	mov	r1, r5
 801657c:	2253      	movs	r2, #83	; 0x53
 801657e:	b280      	uxth	r0, r0
}
 8016580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8016584:	f005 bf3a 	b.w	801c3fc <TFT_DrawChar>
 8016588:	200001b0 	.word	0x200001b0

0801658c <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 801658c:	b538      	push	{r3, r4, r5, lr}
 801658e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016590:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016594:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016596:	f005 fe6d 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801659a:	2063      	movs	r0, #99	; 0x63
 801659c:	f005 fe70 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80165a0:	480b      	ldr	r0, [pc, #44]	; (80165d0 <GUI_Text_SP+0x44>)
 80165a2:	f005 fe61 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 80165a6:	f104 000d 	add.w	r0, r4, #13
 80165aa:	4629      	mov	r1, r5
 80165ac:	222f      	movs	r2, #47	; 0x2f
 80165ae:	b280      	uxth	r0, r0
 80165b0:	f005 ff24 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 80165b4:	4629      	mov	r1, r5
 80165b6:	4620      	mov	r0, r4
 80165b8:	2253      	movs	r2, #83	; 0x53
 80165ba:	f005 ff1f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 80165be:	f104 001c 	add.w	r0, r4, #28
 80165c2:	4629      	mov	r1, r5
 80165c4:	2250      	movs	r2, #80	; 0x50
 80165c6:	b280      	uxth	r0, r0
}
 80165c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 80165cc:	f005 bf16 	b.w	801c3fc <TFT_DrawChar>
 80165d0:	200001b0 	.word	0x200001b0

080165d4 <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 80165d4:	b538      	push	{r3, r4, r5, lr}
 80165d6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80165d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80165dc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80165de:	f005 fe49 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80165e2:	2063      	movs	r0, #99	; 0x63
 80165e4:	f005 fe4c 	bl	801c280 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 80165e8:	480a      	ldr	r0, [pc, #40]	; (8016614 <GUI_Text_lambda_d+0x40>)
 80165ea:	f005 fe3d 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 80165ee:	4629      	mov	r1, r5
 80165f0:	227f      	movs	r2, #127	; 0x7f
 80165f2:	4620      	mov	r0, r4
 80165f4:	f005 ff02 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80165f8:	4807      	ldr	r0, [pc, #28]	; (8016618 <GUI_Text_lambda_d+0x44>)
 80165fa:	f005 fe35 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 80165fe:	1de9      	adds	r1, r5, #7
 8016600:	f104 000f 	add.w	r0, r4, #15
 8016604:	2264      	movs	r2, #100	; 0x64
 8016606:	b289      	uxth	r1, r1
 8016608:	b280      	uxth	r0, r0
}
 801660a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 801660e:	f005 bef5 	b.w	801c3fc <TFT_DrawChar>
 8016612:	bf00      	nop
 8016614:	200001b0 	.word	0x200001b0
 8016618:	200001c0 	.word	0x200001c0

0801661c <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 801661c:	b538      	push	{r3, r4, r5, lr}
 801661e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016620:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016624:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016626:	f005 fe25 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801662a:	2063      	movs	r0, #99	; 0x63
 801662c:	f005 fe28 	bl	801c280 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016630:	4824      	ldr	r0, [pc, #144]	; (80166c4 <GUI_Text_V_lambda+0xa8>)
 8016632:	f005 fe19 	bl	801c268 <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 8016636:	f104 000d 	add.w	r0, r4, #13
 801663a:	4629      	mov	r1, r5
 801663c:	2228      	movs	r2, #40	; 0x28
 801663e:	b280      	uxth	r0, r0
 8016640:	f005 fedc 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 8016644:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016648:	4629      	mov	r1, r5
 801664a:	2229      	movs	r2, #41	; 0x29
 801664c:	b280      	uxth	r0, r0
 801664e:	f005 fed5 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 8016652:	4629      	mov	r1, r5
 8016654:	4620      	mov	r0, r4
 8016656:	2256      	movs	r2, #86	; 0x56
 8016658:	f005 fed0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 801665c:	f104 001a 	add.w	r0, r4, #26
 8016660:	4629      	mov	r1, r5
 8016662:	227f      	movs	r2, #127	; 0x7f
 8016664:	b280      	uxth	r0, r0
 8016666:	f005 fec9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 801666a:	f104 0035 	add.w	r0, r4, #53	; 0x35
 801666e:	4629      	mov	r1, r5
 8016670:	222f      	movs	r2, #47	; 0x2f
 8016672:	b280      	uxth	r0, r0
 8016674:	f005 fec2 	bl	801c3fc <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8016678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801667c:	4629      	mov	r1, r5
 801667e:	2227      	movs	r2, #39	; 0x27
 8016680:	b280      	uxth	r0, r0
 8016682:	f005 febb 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8016686:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 801668a:	4629      	mov	r1, r5
 801668c:	2228      	movs	r2, #40	; 0x28
 801668e:	b280      	uxth	r0, r0
 8016690:	f005 feb4 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8016694:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8016698:	4629      	mov	r1, r5
 801669a:	2229      	movs	r2, #41	; 0x29
 801669c:	b280      	uxth	r0, r0
 801669e:	f005 fead 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 80166a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80166a6:	4629      	mov	r1, r5
 80166a8:	2256      	movs	r2, #86	; 0x56
 80166aa:	b280      	uxth	r0, r0
 80166ac:	f005 fea6 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 80166b0:	f104 0067 	add.w	r0, r4, #103	; 0x67
 80166b4:	4629      	mov	r1, r5
 80166b6:	227f      	movs	r2, #127	; 0x7f
 80166b8:	b280      	uxth	r0, r0
		
}
 80166ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 80166be:	f005 be9d 	b.w	801c3fc <TFT_DrawChar>
 80166c2:	bf00      	nop
 80166c4:	200001b0 	.word	0x200001b0

080166c8 <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 80166c8:	b538      	push	{r3, r4, r5, lr}
 80166ca:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80166cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80166d0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80166d2:	f005 fdcf 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80166d6:	2063      	movs	r0, #99	; 0x63
 80166d8:	f005 fdd2 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80166dc:	4808      	ldr	r0, [pc, #32]	; (8016700 <GUI_Text_deltaE+0x38>)
 80166de:	f005 fdc3 	bl	801c268 <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 80166e2:	4629      	mov	r1, r5
 80166e4:	4620      	mov	r0, r4
 80166e6:	2280      	movs	r2, #128	; 0x80
 80166e8:	f005 fe88 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 80166ec:	f104 000e 	add.w	r0, r4, #14
 80166f0:	4629      	mov	r1, r5
 80166f2:	2245      	movs	r2, #69	; 0x45
 80166f4:	b280      	uxth	r0, r0
}
 80166f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 80166fa:	f005 be7f 	b.w	801c3fc <TFT_DrawChar>
 80166fe:	bf00      	nop
 8016700:	200001b0 	.word	0x200001b0

08016704 <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8016704:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016708:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801670a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801670e:	4616      	mov	r6, r2
 8016710:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016712:	f005 fdaf 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016716:	2063      	movs	r0, #99	; 0x63
 8016718:	f005 fdb2 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 801671c:	482b      	ldr	r0, [pc, #172]	; (80167cc <GUI_TextEn_umol+0xc8>)
 801671e:	f005 fda3 	bl	801c268 <TFT_SetFont>
	
	if(deg){
 8016722:	2e00      	cmp	r6, #0
 8016724:	d050      	beq.n	80167c8 <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 8016726:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8016728:	4629      	mov	r1, r5
 801672a:	4620      	mov	r0, r4
 801672c:	f005 fe66 	bl	801c3fc <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016730:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016734:	f104 0008 	add.w	r0, r4, #8
 8016738:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 801673a:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 801673c:	222c      	movs	r2, #44	; 0x2c
 801673e:	b280      	uxth	r0, r0
 8016740:	f005 fe5c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016744:	4629      	mov	r1, r5
 8016746:	4638      	mov	r0, r7
 8016748:	222e      	movs	r2, #46	; 0x2e
 801674a:	f005 fe57 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 801674e:	f104 0016 	add.w	r0, r4, #22
 8016752:	4629      	mov	r1, r5
 8016754:	222b      	movs	r2, #43	; 0x2b
 8016756:	b280      	uxth	r0, r0
 8016758:	f005 fe50 	bl	801c3fc <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 801675c:	f105 030a 	add.w	r3, r5, #10
 8016760:	b29b      	uxth	r3, r3
 8016762:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016766:	f104 0219 	add.w	r2, r4, #25
 801676a:	4619      	mov	r1, r3
 801676c:	4620      	mov	r0, r4
 801676e:	f8cd 8000 	str.w	r8, [sp]
 8016772:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8016774:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016778:	f005 faf0 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 801677c:	b2b6      	uxth	r6, r6
 801677e:	f104 000a 	add.w	r0, r4, #10
 8016782:	4631      	mov	r1, r6
 8016784:	223b      	movs	r2, #59	; 0x3b
 8016786:	b280      	uxth	r0, r0
 8016788:	f005 fe38 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 801678c:	1ca0      	adds	r0, r4, #2
 801678e:	4631      	mov	r1, r6
 8016790:	222c      	movs	r2, #44	; 0x2c
 8016792:	b280      	uxth	r0, r0
 8016794:	f005 fe32 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8016798:	f105 030f 	add.w	r3, r5, #15
 801679c:	f104 0211 	add.w	r2, r4, #17
 80167a0:	f105 010e 	add.w	r1, r5, #14
 80167a4:	4638      	mov	r0, r7
 80167a6:	f8cd 8000 	str.w	r8, [sp]
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	b292      	uxth	r2, r2
 80167ae:	b289      	uxth	r1, r1
 80167b0:	f005 fb49 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 80167b4:	f104 0013 	add.w	r0, r4, #19
 80167b8:	2232      	movs	r2, #50	; 0x32
 80167ba:	4631      	mov	r1, r6
 80167bc:	b280      	uxth	r0, r0
}
 80167be:	b002      	add	sp, #8
 80167c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 80167c4:	f005 be1a 	b.w	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 80167c8:	223a      	movs	r2, #58	; 0x3a
 80167ca:	e7ad      	b.n	8016728 <GUI_TextEn_umol+0x24>
 80167cc:	20000190 	.word	0x20000190

080167d0 <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 80167d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80167d4:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80167d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80167da:	460d      	mov	r5, r1
 80167dc:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 80167de:	f005 fd49 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80167e2:	2063      	movs	r0, #99	; 0x63
 80167e4:	f005 fd4c 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 80167e8:	483b      	ldr	r0, [pc, #236]	; (80168d8 <GUI_TextEn_umol_sr+0x108>)
 80167ea:	f005 fd3d 	bl	801c268 <TFT_SetFont>
 80167ee:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 80167f2:	2e00      	cmp	r6, #0
 80167f4:	d06d      	beq.n	80168d2 <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 80167f6:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 80167f8:	4629      	mov	r1, r5
 80167fa:	b280      	uxth	r0, r0
 80167fc:	f005 fdfe 	bl	801c3fc <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 8016800:	f104 0011 	add.w	r0, r4, #17
 8016804:	4629      	mov	r1, r5
 8016806:	222c      	movs	r2, #44	; 0x2c
 8016808:	b280      	uxth	r0, r0
 801680a:	f005 fdf7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 801680e:	f104 0019 	add.w	r0, r4, #25
 8016812:	4629      	mov	r1, r5
 8016814:	222e      	movs	r2, #46	; 0x2e
 8016816:	b280      	uxth	r0, r0
 8016818:	f005 fdf0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 801681c:	f104 001f 	add.w	r0, r4, #31
 8016820:	4629      	mov	r1, r5
 8016822:	222b      	movs	r2, #43	; 0x2b
 8016824:	b280      	uxth	r0, r0
 8016826:	f005 fde9 	bl	801c3fc <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801682a:	f105 030a 	add.w	r3, r5, #10
 801682e:	b29b      	uxth	r3, r3
 8016830:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016834:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8016838:	1ce0      	adds	r0, r4, #3
 801683a:	4619      	mov	r1, r3
 801683c:	f8cd 8000 	str.w	r8, [sp]
 8016840:	b292      	uxth	r2, r2
 8016842:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8016844:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8016848:	f005 fa88 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 801684c:	b2b6      	uxth	r6, r6
 801684e:	f104 000d 	add.w	r0, r4, #13
 8016852:	4631      	mov	r1, r6
 8016854:	223b      	movs	r2, #59	; 0x3b
 8016856:	b280      	uxth	r0, r0
 8016858:	f005 fdd0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 801685c:	1d60      	adds	r0, r4, #5
 801685e:	4631      	mov	r1, r6
 8016860:	222c      	movs	r2, #44	; 0x2c
 8016862:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8016864:	f105 070e 	add.w	r7, r5, #14
 8016868:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 801686a:	f005 fdc7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801686e:	b2bf      	uxth	r7, r7
 8016870:	b2ad      	uxth	r5, r5
 8016872:	f104 0214 	add.w	r2, r4, #20
 8016876:	f104 0013 	add.w	r0, r4, #19
 801687a:	462b      	mov	r3, r5
 801687c:	4639      	mov	r1, r7
 801687e:	f8cd 8000 	str.w	r8, [sp]
 8016882:	b292      	uxth	r2, r2
 8016884:	b280      	uxth	r0, r0
 8016886:	f005 fade 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 801688a:	f104 0016 	add.w	r0, r4, #22
 801688e:	4631      	mov	r1, r6
 8016890:	2232      	movs	r2, #50	; 0x32
 8016892:	b280      	uxth	r0, r0
 8016894:	f005 fdb2 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 8016898:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801689c:	f104 001e 	add.w	r0, r4, #30
 80168a0:	462b      	mov	r3, r5
 80168a2:	4639      	mov	r1, r7
 80168a4:	f8cd 8000 	str.w	r8, [sp]
 80168a8:	b292      	uxth	r2, r2
 80168aa:	b280      	uxth	r0, r0
 80168ac:	f005 facb 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 80168b0:	f104 0020 	add.w	r0, r4, #32
 80168b4:	4631      	mov	r1, r6
 80168b6:	2232      	movs	r2, #50	; 0x32
 80168b8:	b280      	uxth	r0, r0
 80168ba:	f005 fd9f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 80168be:	f104 0027 	add.w	r0, r4, #39	; 0x27
 80168c2:	2231      	movs	r2, #49	; 0x31
 80168c4:	4631      	mov	r1, r6
 80168c6:	b280      	uxth	r0, r0
}
 80168c8:	b002      	add	sp, #8
 80168ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 80168ce:	f005 bd95 	b.w	801c3fc <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 80168d2:	223a      	movs	r2, #58	; 0x3a
 80168d4:	e790      	b.n	80167f8 <GUI_TextEn_umol_sr+0x28>
 80168d6:	bf00      	nop
 80168d8:	20000190 	.word	0x20000190

080168dc <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 80168dc:	b538      	push	{r3, r4, r5, lr}
 80168de:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80168e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80168e4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80168e6:	f005 fcc5 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80168ea:	2063      	movs	r0, #99	; 0x63
 80168ec:	f005 fcc8 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80168f0:	480a      	ldr	r0, [pc, #40]	; (801691c <GUI_Text_On+0x40>)
 80168f2:	f005 fcb9 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 80168f6:	4629      	mov	r1, r5
 80168f8:	224f      	movs	r2, #79	; 0x4f
 80168fa:	4620      	mov	r0, r4
 80168fc:	f005 fd7e 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016900:	4807      	ldr	r0, [pc, #28]	; (8016920 <GUI_Text_On+0x44>)
 8016902:	f005 fcb1 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8016906:	1ca9      	adds	r1, r5, #2
 8016908:	f104 0010 	add.w	r0, r4, #16
 801690c:	226e      	movs	r2, #110	; 0x6e
 801690e:	b289      	uxth	r1, r1
 8016910:	b280      	uxth	r0, r0
	
}
 8016912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 8016916:	f005 bd71 	b.w	801c3fc <TFT_DrawChar>
 801691a:	bf00      	nop
 801691c:	200001b0 	.word	0x200001b0
 8016920:	200001c0 	.word	0x200001c0

08016924 <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 8016924:	b570      	push	{r4, r5, r6, lr}
 8016926:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016928:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801692c:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 801692e:	f005 fca1 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016932:	2063      	movs	r0, #99	; 0x63
 8016934:	f005 fca4 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 8016938:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 801693a:	480e      	ldr	r0, [pc, #56]	; (8016974 <GUI_Text_Off+0x50>)
 801693c:	f005 fc94 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 8016940:	b2a4      	uxth	r4, r4
 8016942:	f105 000d 	add.w	r0, r5, #13
 8016946:	4621      	mov	r1, r4
 8016948:	2266      	movs	r2, #102	; 0x66
 801694a:	b280      	uxth	r0, r0
 801694c:	f005 fd56 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 8016950:	f105 0017 	add.w	r0, r5, #23
 8016954:	4621      	mov	r1, r4
 8016956:	2266      	movs	r2, #102	; 0x66
 8016958:	b280      	uxth	r0, r0
 801695a:	f005 fd4f 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801695e:	4806      	ldr	r0, [pc, #24]	; (8016978 <GUI_Text_Off+0x54>)
 8016960:	f005 fc82 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8016964:	4631      	mov	r1, r6
 8016966:	4628      	mov	r0, r5
 8016968:	224f      	movs	r2, #79	; 0x4f
}
 801696a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 801696e:	f005 bd45 	b.w	801c3fc <TFT_DrawChar>
 8016972:	bf00      	nop
 8016974:	200001c0 	.word	0x200001c0
 8016978:	200001b0 	.word	0x200001b0

0801697c <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 801697c:	b538      	push	{r3, r4, r5, lr}
 801697e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016980:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016984:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016986:	f005 fc75 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801698a:	2063      	movs	r0, #99	; 0x63
 801698c:	f005 fc78 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016990:	4815      	ldr	r0, [pc, #84]	; (80169e8 <GUI_Text_EbEr+0x6c>)
 8016992:	f005 fc69 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016996:	1ca1      	adds	r1, r4, #2
 8016998:	f105 0013 	add.w	r0, r5, #19
 801699c:	222c      	movs	r2, #44	; 0x2c
 801699e:	b289      	uxth	r1, r1
 80169a0:	b280      	uxth	r0, r0
 80169a2:	f005 fd2b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 80169a6:	4621      	mov	r1, r4
 80169a8:	4628      	mov	r0, r5
 80169aa:	2245      	movs	r2, #69	; 0x45
 80169ac:	f005 fd26 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 80169b0:	f105 0020 	add.w	r0, r5, #32
 80169b4:	4621      	mov	r1, r4
 80169b6:	2245      	movs	r2, #69	; 0x45
 80169b8:	b280      	uxth	r0, r0
 80169ba:	f005 fd1f 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 80169be:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 80169c0:	480a      	ldr	r0, [pc, #40]	; (80169ec <GUI_Text_EbEr+0x70>)
 80169c2:	f005 fc51 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 80169c6:	b2a4      	uxth	r4, r4
 80169c8:	f105 0012 	add.w	r0, r5, #18
 80169cc:	4621      	mov	r1, r4
 80169ce:	2242      	movs	r2, #66	; 0x42
 80169d0:	b280      	uxth	r0, r0
 80169d2:	f005 fd13 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 80169d6:	f105 0032 	add.w	r0, r5, #50	; 0x32
 80169da:	4621      	mov	r1, r4
 80169dc:	2252      	movs	r2, #82	; 0x52
 80169de:	b280      	uxth	r0, r0
}
 80169e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 80169e4:	f005 bd0a 	b.w	801c3fc <TFT_DrawChar>
 80169e8:	200001b0 	.word	0x200001b0
 80169ec:	20000218 	.word	0x20000218

080169f0 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 80169f0:	b538      	push	{r3, r4, r5, lr}
 80169f2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80169f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80169f8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80169fa:	f005 fc3b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80169fe:	2063      	movs	r0, #99	; 0x63
 8016a00:	f005 fc3e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016a04:	4815      	ldr	r0, [pc, #84]	; (8016a5c <GUI_Text_LbLr+0x6c>)
 8016a06:	f005 fc2f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016a0a:	1ca1      	adds	r1, r4, #2
 8016a0c:	f105 0013 	add.w	r0, r5, #19
 8016a10:	222c      	movs	r2, #44	; 0x2c
 8016a12:	b289      	uxth	r1, r1
 8016a14:	b280      	uxth	r0, r0
 8016a16:	f005 fcf1 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 8016a1a:	4621      	mov	r1, r4
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	224c      	movs	r2, #76	; 0x4c
 8016a20:	f005 fcec 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 8016a24:	f105 001e 	add.w	r0, r5, #30
 8016a28:	4621      	mov	r1, r4
 8016a2a:	224c      	movs	r2, #76	; 0x4c
 8016a2c:	b280      	uxth	r0, r0
 8016a2e:	f005 fce5 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8016a32:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8016a34:	480a      	ldr	r0, [pc, #40]	; (8016a60 <GUI_Text_LbLr+0x70>)
 8016a36:	f005 fc17 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8016a3a:	b2a4      	uxth	r4, r4
 8016a3c:	f105 0012 	add.w	r0, r5, #18
 8016a40:	4621      	mov	r1, r4
 8016a42:	2242      	movs	r2, #66	; 0x42
 8016a44:	b280      	uxth	r0, r0
 8016a46:	f005 fcd9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 8016a4a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8016a4e:	4621      	mov	r1, r4
 8016a50:	2252      	movs	r2, #82	; 0x52
 8016a52:	b280      	uxth	r0, r0
}
 8016a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 8016a58:	f005 bcd0 	b.w	801c3fc <TFT_DrawChar>
 8016a5c:	200001b0 	.word	0x200001b0
 8016a60:	20000218 	.word	0x20000218

08016a64 <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 8016a64:	b538      	push	{r3, r4, r5, lr}
 8016a66:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016a68:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 8016a6c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016a6e:	f005 fc01 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016a72:	2063      	movs	r0, #99	; 0x63
 8016a74:	f005 fc04 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016a78:	481f      	ldr	r0, [pc, #124]	; (8016af8 <GUI_TextEn_Language+0x94>)
 8016a7a:	f005 fbf5 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8016a7e:	4621      	mov	r1, r4
 8016a80:	224c      	movs	r2, #76	; 0x4c
 8016a82:	4628      	mov	r0, r5
 8016a84:	f005 fcba 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 8016a88:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016a8a:	481c      	ldr	r0, [pc, #112]	; (8016afc <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8016a8c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016a8e:	f005 fbeb 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 8016a92:	f105 000e 	add.w	r0, r5, #14
 8016a96:	4621      	mov	r1, r4
 8016a98:	2261      	movs	r2, #97	; 0x61
 8016a9a:	b280      	uxth	r0, r0
 8016a9c:	f005 fcae 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8016aa0:	f105 001a 	add.w	r0, r5, #26
 8016aa4:	4621      	mov	r1, r4
 8016aa6:	226e      	movs	r2, #110	; 0x6e
 8016aa8:	b280      	uxth	r0, r0
 8016aaa:	f005 fca7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 8016aae:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8016ab2:	4621      	mov	r1, r4
 8016ab4:	2267      	movs	r2, #103	; 0x67
 8016ab6:	b280      	uxth	r0, r0
 8016ab8:	f005 fca0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8016abc:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8016ac0:	4621      	mov	r1, r4
 8016ac2:	2261      	movs	r2, #97	; 0x61
 8016ac4:	b280      	uxth	r0, r0
 8016ac6:	f005 fc99 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 8016aca:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8016ace:	4621      	mov	r1, r4
 8016ad0:	2275      	movs	r2, #117	; 0x75
 8016ad2:	b280      	uxth	r0, r0
 8016ad4:	f005 fc92 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 8016ad8:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8016adc:	4621      	mov	r1, r4
 8016ade:	2267      	movs	r2, #103	; 0x67
 8016ae0:	b280      	uxth	r0, r0
 8016ae2:	f005 fc8b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 8016ae6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8016aea:	4621      	mov	r1, r4
 8016aec:	2265      	movs	r2, #101	; 0x65
 8016aee:	b280      	uxth	r0, r0
}
 8016af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 8016af4:	f005 bc82 	b.w	801c3fc <TFT_DrawChar>
 8016af8:	200001b8 	.word	0x200001b8
 8016afc:	200001c8 	.word	0x200001c8

08016b00 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 8016b00:	b538      	push	{r3, r4, r5, lr}
 8016b02:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016b04:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016b08:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016b0a:	f005 fbb3 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b0e:	2063      	movs	r0, #99	; 0x63
 8016b10:	f005 fbb6 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016b14:	481c      	ldr	r0, [pc, #112]	; (8016b88 <GUI_TextEn_English+0x88>)
 8016b16:	f005 fba7 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 8016b1a:	4621      	mov	r1, r4
 8016b1c:	2245      	movs	r2, #69	; 0x45
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f005 fc6c 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 8016b24:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016b26:	4819      	ldr	r0, [pc, #100]	; (8016b8c <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 8016b28:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016b2a:	f005 fb9d 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8016b2e:	f105 0010 	add.w	r0, r5, #16
 8016b32:	4621      	mov	r1, r4
 8016b34:	226e      	movs	r2, #110	; 0x6e
 8016b36:	b280      	uxth	r0, r0
 8016b38:	f005 fc60 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 8016b3c:	f105 001d 	add.w	r0, r5, #29
 8016b40:	4621      	mov	r1, r4
 8016b42:	2267      	movs	r2, #103	; 0x67
 8016b44:	b280      	uxth	r0, r0
 8016b46:	f005 fc59 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 8016b4a:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8016b4e:	4621      	mov	r1, r4
 8016b50:	226c      	movs	r2, #108	; 0x6c
 8016b52:	b280      	uxth	r0, r0
 8016b54:	f005 fc52 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 8016b58:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 8016b5c:	4621      	mov	r1, r4
 8016b5e:	2269      	movs	r2, #105	; 0x69
 8016b60:	b280      	uxth	r0, r0
 8016b62:	f005 fc4b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 8016b66:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8016b6a:	4621      	mov	r1, r4
 8016b6c:	2273      	movs	r2, #115	; 0x73
 8016b6e:	b280      	uxth	r0, r0
 8016b70:	f005 fc44 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 8016b74:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8016b78:	4621      	mov	r1, r4
 8016b7a:	2268      	movs	r2, #104	; 0x68
 8016b7c:	b280      	uxth	r0, r0
	

}
 8016b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 8016b82:	f005 bc3b 	b.w	801c3fc <TFT_DrawChar>
 8016b86:	bf00      	nop
 8016b88:	200001b8 	.word	0x200001b8
 8016b8c:	200001c8 	.word	0x200001c8

08016b90 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 8016b90:	b538      	push	{r3, r4, r5, lr}
 8016b92:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016b94:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016b98:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016b9a:	f005 fb6b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b9e:	2063      	movs	r0, #99	; 0x63
 8016ba0:	f005 fb6e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016ba4:	4811      	ldr	r0, [pc, #68]	; (8016bec <GUI_TextEn_Info+0x5c>)
 8016ba6:	f005 fb5f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8016baa:	4621      	mov	r1, r4
 8016bac:	2249      	movs	r2, #73	; 0x49
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f005 fc24 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 8016bb4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016bb6:	480e      	ldr	r0, [pc, #56]	; (8016bf0 <GUI_TextEn_Info+0x60>)
 8016bb8:	f005 fb56 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8016bbc:	b2a4      	uxth	r4, r4
 8016bbe:	f105 0012 	add.w	r0, r5, #18
 8016bc2:	4621      	mov	r1, r4
 8016bc4:	2266      	movs	r2, #102	; 0x66
 8016bc6:	b280      	uxth	r0, r0
 8016bc8:	f005 fc18 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 8016bcc:	f105 0008 	add.w	r0, r5, #8
 8016bd0:	4621      	mov	r1, r4
 8016bd2:	226e      	movs	r2, #110	; 0x6e
 8016bd4:	b280      	uxth	r0, r0
 8016bd6:	f005 fc11 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 8016bda:	f105 001d 	add.w	r0, r5, #29
 8016bde:	4621      	mov	r1, r4
 8016be0:	226f      	movs	r2, #111	; 0x6f
 8016be2:	b280      	uxth	r0, r0
}
 8016be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 8016be8:	f005 bc08 	b.w	801c3fc <TFT_DrawChar>
 8016bec:	200001b8 	.word	0x200001b8
 8016bf0:	200001c8 	.word	0x200001c8

08016bf4 <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 8016bf4:	b538      	push	{r3, r4, r5, lr}
 8016bf6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016bf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016bfc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016bfe:	f005 fb39 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c02:	2063      	movs	r0, #99	; 0x63
 8016c04:	f005 fb3c 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016c08:	481f      	ldr	r0, [pc, #124]	; (8016c88 <GUI_TextEn_Radiance+0x94>)
 8016c0a:	f005 fb2d 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 8016c0e:	4621      	mov	r1, r4
 8016c10:	2252      	movs	r2, #82	; 0x52
 8016c12:	4628      	mov	r0, r5
 8016c14:	f005 fbf2 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 8016c18:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016c1a:	481c      	ldr	r0, [pc, #112]	; (8016c8c <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 8016c1c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016c1e:	f005 fb23 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8016c22:	f105 0010 	add.w	r0, r5, #16
 8016c26:	4621      	mov	r1, r4
 8016c28:	2261      	movs	r2, #97	; 0x61
 8016c2a:	b280      	uxth	r0, r0
 8016c2c:	f005 fbe6 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 8016c30:	f105 001c 	add.w	r0, r5, #28
 8016c34:	4621      	mov	r1, r4
 8016c36:	2264      	movs	r2, #100	; 0x64
 8016c38:	b280      	uxth	r0, r0
 8016c3a:	f005 fbdf 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8016c3e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8016c42:	4621      	mov	r1, r4
 8016c44:	2269      	movs	r2, #105	; 0x69
 8016c46:	b280      	uxth	r0, r0
 8016c48:	f005 fbd8 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 8016c4c:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8016c50:	4621      	mov	r1, r4
 8016c52:	2261      	movs	r2, #97	; 0x61
 8016c54:	b280      	uxth	r0, r0
 8016c56:	f005 fbd1 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 8016c5a:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8016c5e:	4621      	mov	r1, r4
 8016c60:	226e      	movs	r2, #110	; 0x6e
 8016c62:	b280      	uxth	r0, r0
 8016c64:	f005 fbca 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 8016c68:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8016c6c:	4621      	mov	r1, r4
 8016c6e:	2263      	movs	r2, #99	; 0x63
 8016c70:	b280      	uxth	r0, r0
 8016c72:	f005 fbc3 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 8016c76:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8016c7a:	4621      	mov	r1, r4
 8016c7c:	2265      	movs	r2, #101	; 0x65
 8016c7e:	b280      	uxth	r0, r0
}
 8016c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 8016c84:	f005 bbba 	b.w	801c3fc <TFT_DrawChar>
 8016c88:	200001b8 	.word	0x200001b8
 8016c8c:	200001c8 	.word	0x200001c8

08016c90 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 8016c90:	b538      	push	{r3, r4, r5, lr}
 8016c92:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016c94:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c98:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016c9a:	f005 faeb 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c9e:	2063      	movs	r0, #99	; 0x63
 8016ca0:	f005 faee 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016ca4:	4826      	ldr	r0, [pc, #152]	; (8016d40 <GUI_TextEn_Irradiance+0xb0>)
 8016ca6:	f005 fadf 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8016caa:	4621      	mov	r1, r4
 8016cac:	2249      	movs	r2, #73	; 0x49
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f005 fba4 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 8016cb4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016cb6:	4823      	ldr	r0, [pc, #140]	; (8016d44 <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 8016cb8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016cba:	f005 fad5 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 8016cbe:	f105 0009 	add.w	r0, r5, #9
 8016cc2:	4621      	mov	r1, r4
 8016cc4:	2272      	movs	r2, #114	; 0x72
 8016cc6:	b280      	uxth	r0, r0
 8016cc8:	f005 fb98 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 8016ccc:	f105 0015 	add.w	r0, r5, #21
 8016cd0:	4621      	mov	r1, r4
 8016cd2:	2272      	movs	r2, #114	; 0x72
 8016cd4:	b280      	uxth	r0, r0
 8016cd6:	f005 fb91 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 8016cda:	f105 0020 	add.w	r0, r5, #32
 8016cde:	4621      	mov	r1, r4
 8016ce0:	2261      	movs	r2, #97	; 0x61
 8016ce2:	b280      	uxth	r0, r0
 8016ce4:	f005 fb8a 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 8016ce8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8016cec:	4621      	mov	r1, r4
 8016cee:	2264      	movs	r2, #100	; 0x64
 8016cf0:	b280      	uxth	r0, r0
 8016cf2:	f005 fb83 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 8016cf6:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8016cfa:	4621      	mov	r1, r4
 8016cfc:	2269      	movs	r2, #105	; 0x69
 8016cfe:	b280      	uxth	r0, r0
 8016d00:	f005 fb7c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 8016d04:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8016d08:	4621      	mov	r1, r4
 8016d0a:	2261      	movs	r2, #97	; 0x61
 8016d0c:	b280      	uxth	r0, r0
 8016d0e:	f005 fb75 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 8016d12:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8016d16:	4621      	mov	r1, r4
 8016d18:	226e      	movs	r2, #110	; 0x6e
 8016d1a:	b280      	uxth	r0, r0
 8016d1c:	f005 fb6e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 8016d20:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8016d24:	4621      	mov	r1, r4
 8016d26:	2263      	movs	r2, #99	; 0x63
 8016d28:	b280      	uxth	r0, r0
 8016d2a:	f005 fb67 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8016d2e:	f105 0063 	add.w	r0, r5, #99	; 0x63
 8016d32:	4621      	mov	r1, r4
 8016d34:	2265      	movs	r2, #101	; 0x65
 8016d36:	b280      	uxth	r0, r0
}
 8016d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 8016d3c:	f005 bb5e 	b.w	801c3fc <TFT_DrawChar>
 8016d40:	200001b8 	.word	0x200001b8
 8016d44:	200001c8 	.word	0x200001c8

08016d48 <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 8016d48:	b538      	push	{r3, r4, r5, lr}
 8016d4a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016d4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016d50:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016d52:	f005 fa8f 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d56:	2063      	movs	r0, #99	; 0x63
 8016d58:	f005 fa92 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016d5c:	4834      	ldr	r0, [pc, #208]	; (8016e30 <GUI_TextMsgEn_HighIrradiance+0xe8>)
 8016d5e:	f005 fa83 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 8016d62:	4621      	mov	r1, r4
 8016d64:	2248      	movs	r2, #72	; 0x48
 8016d66:	4628      	mov	r0, r5
 8016d68:	f005 fb48 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8016d6c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016d6e:	4831      	ldr	r0, [pc, #196]	; (8016e34 <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8016d70:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016d72:	f005 fa79 	bl	801c268 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 8016d76:	f105 0010 	add.w	r0, r5, #16
 8016d7a:	4621      	mov	r1, r4
 8016d7c:	2269      	movs	r2, #105	; 0x69
 8016d7e:	b280      	uxth	r0, r0
 8016d80:	f005 fb3c 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8016d84:	f105 0017 	add.w	r0, r5, #23
 8016d88:	4621      	mov	r1, r4
 8016d8a:	2267      	movs	r2, #103	; 0x67
 8016d8c:	b280      	uxth	r0, r0
 8016d8e:	f005 fb35 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8016d92:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8016d96:	4621      	mov	r1, r4
 8016d98:	2268      	movs	r2, #104	; 0x68
 8016d9a:	b280      	uxth	r0, r0
 8016d9c:	f005 fb2e 	bl	801c3fc <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 8016da0:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8016da4:	4621      	mov	r1, r4
 8016da6:	2269      	movs	r2, #105	; 0x69
 8016da8:	b280      	uxth	r0, r0
 8016daa:	f005 fb27 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 8016dae:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8016db2:	4621      	mov	r1, r4
 8016db4:	2272      	movs	r2, #114	; 0x72
 8016db6:	b280      	uxth	r0, r0
 8016db8:	f005 fb20 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 8016dbc:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8016dc0:	4621      	mov	r1, r4
 8016dc2:	2272      	movs	r2, #114	; 0x72
 8016dc4:	b280      	uxth	r0, r0
 8016dc6:	f005 fb19 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 8016dca:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8016dce:	4621      	mov	r1, r4
 8016dd0:	2261      	movs	r2, #97	; 0x61
 8016dd2:	b280      	uxth	r0, r0
 8016dd4:	f005 fb12 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 8016dd8:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8016ddc:	4621      	mov	r1, r4
 8016dde:	2264      	movs	r2, #100	; 0x64
 8016de0:	b280      	uxth	r0, r0
 8016de2:	f005 fb0b 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 8016de6:	f105 0073 	add.w	r0, r5, #115	; 0x73
 8016dea:	4621      	mov	r1, r4
 8016dec:	2269      	movs	r2, #105	; 0x69
 8016dee:	b280      	uxth	r0, r0
 8016df0:	f005 fb04 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 8016df4:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016df8:	4621      	mov	r1, r4
 8016dfa:	2261      	movs	r2, #97	; 0x61
 8016dfc:	b280      	uxth	r0, r0
 8016dfe:	f005 fafd 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 8016e02:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8016e06:	4621      	mov	r1, r4
 8016e08:	226e      	movs	r2, #110	; 0x6e
 8016e0a:	b280      	uxth	r0, r0
 8016e0c:	f005 faf6 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 8016e10:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8016e14:	4621      	mov	r1, r4
 8016e16:	2263      	movs	r2, #99	; 0x63
 8016e18:	b280      	uxth	r0, r0
 8016e1a:	f005 faef 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 8016e1e:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 8016e22:	4621      	mov	r1, r4
 8016e24:	2265      	movs	r2, #101	; 0x65
 8016e26:	b280      	uxth	r0, r0
}
 8016e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 8016e2c:	f005 bae6 	b.w	801c3fc <TFT_DrawChar>
 8016e30:	200001b8 	.word	0x200001b8
 8016e34:	200001c8 	.word	0x200001c8

08016e38 <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 8016e38:	b538      	push	{r3, r4, r5, lr}
 8016e3a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016e3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e40:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016e42:	f005 fa17 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e46:	2063      	movs	r0, #99	; 0x63
 8016e48:	f005 fa1a 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016e4c:	482d      	ldr	r0, [pc, #180]	; (8016f04 <GUI_TextMsgEn_HighRadiance+0xcc>)
 8016e4e:	f005 fa0b 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 8016e52:	4621      	mov	r1, r4
 8016e54:	2248      	movs	r2, #72	; 0x48
 8016e56:	4628      	mov	r0, r5
 8016e58:	f005 fad0 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8016e5c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016e5e:	482a      	ldr	r0, [pc, #168]	; (8016f08 <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8016e60:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016e62:	f005 fa01 	bl	801c268 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 8016e66:	f105 0010 	add.w	r0, r5, #16
 8016e6a:	4621      	mov	r1, r4
 8016e6c:	2269      	movs	r2, #105	; 0x69
 8016e6e:	b280      	uxth	r0, r0
 8016e70:	f005 fac4 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8016e74:	f105 0017 	add.w	r0, r5, #23
 8016e78:	4621      	mov	r1, r4
 8016e7a:	2267      	movs	r2, #103	; 0x67
 8016e7c:	b280      	uxth	r0, r0
 8016e7e:	f005 fabd 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8016e82:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8016e86:	4621      	mov	r1, r4
 8016e88:	2268      	movs	r2, #104	; 0x68
 8016e8a:	b280      	uxth	r0, r0
 8016e8c:	f005 fab6 	bl	801c3fc <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 8016e90:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8016e94:	4621      	mov	r1, r4
 8016e96:	2272      	movs	r2, #114	; 0x72
 8016e98:	b280      	uxth	r0, r0
 8016e9a:	f005 faaf 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 8016e9e:	f105 0046 	add.w	r0, r5, #70	; 0x46
 8016ea2:	4621      	mov	r1, r4
 8016ea4:	2261      	movs	r2, #97	; 0x61
 8016ea6:	b280      	uxth	r0, r0
 8016ea8:	f005 faa8 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 8016eac:	f105 0052 	add.w	r0, r5, #82	; 0x52
 8016eb0:	4621      	mov	r1, r4
 8016eb2:	2264      	movs	r2, #100	; 0x64
 8016eb4:	b280      	uxth	r0, r0
 8016eb6:	f005 faa1 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 8016eba:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	2269      	movs	r2, #105	; 0x69
 8016ec2:	b280      	uxth	r0, r0
 8016ec4:	f005 fa9a 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 8016ec8:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8016ecc:	4621      	mov	r1, r4
 8016ece:	2261      	movs	r2, #97	; 0x61
 8016ed0:	b280      	uxth	r0, r0
 8016ed2:	f005 fa93 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 8016ed6:	f105 0070 	add.w	r0, r5, #112	; 0x70
 8016eda:	4621      	mov	r1, r4
 8016edc:	226e      	movs	r2, #110	; 0x6e
 8016ede:	b280      	uxth	r0, r0
 8016ee0:	f005 fa8c 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 8016ee4:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8016ee8:	4621      	mov	r1, r4
 8016eea:	2263      	movs	r2, #99	; 0x63
 8016eec:	b280      	uxth	r0, r0
 8016eee:	f005 fa85 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 8016ef2:	f105 0089 	add.w	r0, r5, #137	; 0x89
 8016ef6:	4621      	mov	r1, r4
 8016ef8:	2265      	movs	r2, #101	; 0x65
 8016efa:	b280      	uxth	r0, r0
}
 8016efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 8016f00:	f005 ba7c 	b.w	801c3fc <TFT_DrawChar>
 8016f04:	200001b8 	.word	0x200001b8
 8016f08:	200001c8 	.word	0x200001c8

08016f0c <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 8016f0c:	b538      	push	{r3, r4, r5, lr}
 8016f0e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016f10:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f14:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016f16:	f005 f9ad 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f1a:	2063      	movs	r0, #99	; 0x63
 8016f1c:	f005 f9b0 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016f20:	482a      	ldr	r0, [pc, #168]	; (8016fcc <GUI_TextMsgEn_LowRadiance+0xc0>)
 8016f22:	f005 f9a1 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8016f26:	4621      	mov	r1, r4
 8016f28:	224c      	movs	r2, #76	; 0x4c
 8016f2a:	4628      	mov	r0, r5
 8016f2c:	f005 fa66 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8016f30:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016f32:	4827      	ldr	r0, [pc, #156]	; (8016fd0 <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8016f34:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016f36:	f005 f997 	bl	801c268 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8016f3a:	f105 0010 	add.w	r0, r5, #16
 8016f3e:	4621      	mov	r1, r4
 8016f40:	226f      	movs	r2, #111	; 0x6f
 8016f42:	b280      	uxth	r0, r0
 8016f44:	f005 fa5a 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8016f48:	f105 001d 	add.w	r0, r5, #29
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	2277      	movs	r2, #119	; 0x77
 8016f50:	b280      	uxth	r0, r0
 8016f52:	f005 fa53 	bl	801c3fc <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 8016f56:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8016f5a:	4621      	mov	r1, r4
 8016f5c:	2272      	movs	r2, #114	; 0x72
 8016f5e:	b280      	uxth	r0, r0
 8016f60:	f005 fa4c 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 8016f64:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8016f68:	4621      	mov	r1, r4
 8016f6a:	2261      	movs	r2, #97	; 0x61
 8016f6c:	b280      	uxth	r0, r0
 8016f6e:	f005 fa45 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 8016f72:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8016f76:	4621      	mov	r1, r4
 8016f78:	2264      	movs	r2, #100	; 0x64
 8016f7a:	b280      	uxth	r0, r0
 8016f7c:	f005 fa3e 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8016f80:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8016f84:	4621      	mov	r1, r4
 8016f86:	2269      	movs	r2, #105	; 0x69
 8016f88:	b280      	uxth	r0, r0
 8016f8a:	f005 fa37 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 8016f8e:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8016f92:	4621      	mov	r1, r4
 8016f94:	2261      	movs	r2, #97	; 0x61
 8016f96:	b280      	uxth	r0, r0
 8016f98:	f005 fa30 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 8016f9c:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	226e      	movs	r2, #110	; 0x6e
 8016fa4:	b280      	uxth	r0, r0
 8016fa6:	f005 fa29 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 8016faa:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016fae:	4621      	mov	r1, r4
 8016fb0:	2263      	movs	r2, #99	; 0x63
 8016fb2:	b280      	uxth	r0, r0
 8016fb4:	f005 fa22 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 8016fb8:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8016fbc:	4621      	mov	r1, r4
 8016fbe:	2265      	movs	r2, #101	; 0x65
 8016fc0:	b280      	uxth	r0, r0
}
 8016fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 8016fc6:	f005 ba19 	b.w	801c3fc <TFT_DrawChar>
 8016fca:	bf00      	nop
 8016fcc:	200001b8 	.word	0x200001b8
 8016fd0:	200001c8 	.word	0x200001c8

08016fd4 <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016fd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016fdc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016fde:	f005 f949 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016fe2:	2063      	movs	r0, #99	; 0x63
 8016fe4:	f005 f94c 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016fe8:	4831      	ldr	r0, [pc, #196]	; (80170b0 <GUI_TextMsgEn_LowIrradiance+0xdc>)
 8016fea:	f005 f93d 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8016fee:	4621      	mov	r1, r4
 8016ff0:	224c      	movs	r2, #76	; 0x4c
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	f005 fa02 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8016ff8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016ffa:	482e      	ldr	r0, [pc, #184]	; (80170b4 <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8016ffc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016ffe:	f005 f933 	bl	801c268 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8017002:	f105 0010 	add.w	r0, r5, #16
 8017006:	4621      	mov	r1, r4
 8017008:	226f      	movs	r2, #111	; 0x6f
 801700a:	b280      	uxth	r0, r0
 801700c:	f005 f9f6 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8017010:	f105 001d 	add.w	r0, r5, #29
 8017014:	4621      	mov	r1, r4
 8017016:	2277      	movs	r2, #119	; 0x77
 8017018:	b280      	uxth	r0, r0
 801701a:	f005 f9ef 	bl	801c3fc <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 801701e:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8017022:	4621      	mov	r1, r4
 8017024:	2269      	movs	r2, #105	; 0x69
 8017026:	b280      	uxth	r0, r0
 8017028:	f005 f9e8 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 801702c:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8017030:	4621      	mov	r1, r4
 8017032:	2272      	movs	r2, #114	; 0x72
 8017034:	b280      	uxth	r0, r0
 8017036:	f005 f9e1 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 801703a:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 801703e:	4621      	mov	r1, r4
 8017040:	2272      	movs	r2, #114	; 0x72
 8017042:	b280      	uxth	r0, r0
 8017044:	f005 f9da 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 8017048:	f105 0056 	add.w	r0, r5, #86	; 0x56
 801704c:	4621      	mov	r1, r4
 801704e:	2261      	movs	r2, #97	; 0x61
 8017050:	b280      	uxth	r0, r0
 8017052:	f005 f9d3 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 8017056:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801705a:	4621      	mov	r1, r4
 801705c:	2264      	movs	r2, #100	; 0x64
 801705e:	b280      	uxth	r0, r0
 8017060:	f005 f9cc 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 8017064:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 8017068:	4621      	mov	r1, r4
 801706a:	2269      	movs	r2, #105	; 0x69
 801706c:	b280      	uxth	r0, r0
 801706e:	f005 f9c5 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 8017072:	f105 0074 	add.w	r0, r5, #116	; 0x74
 8017076:	4621      	mov	r1, r4
 8017078:	2261      	movs	r2, #97	; 0x61
 801707a:	b280      	uxth	r0, r0
 801707c:	f005 f9be 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8017080:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8017084:	4621      	mov	r1, r4
 8017086:	226e      	movs	r2, #110	; 0x6e
 8017088:	b280      	uxth	r0, r0
 801708a:	f005 f9b7 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 801708e:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8017092:	4621      	mov	r1, r4
 8017094:	2263      	movs	r2, #99	; 0x63
 8017096:	b280      	uxth	r0, r0
 8017098:	f005 f9b0 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 801709c:	f105 0099 	add.w	r0, r5, #153	; 0x99
 80170a0:	4621      	mov	r1, r4
 80170a2:	2265      	movs	r2, #101	; 0x65
 80170a4:	b280      	uxth	r0, r0
	
	
}
 80170a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 80170aa:	f005 b9a7 	b.w	801c3fc <TFT_DrawChar>
 80170ae:	bf00      	nop
 80170b0:	200001b8 	.word	0x200001b8
 80170b4:	200001c8 	.word	0x200001c8

080170b8 <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 80170b8:	b538      	push	{r3, r4, r5, lr}
 80170ba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80170bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80170c0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80170c2:	f005 f8d7 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170c6:	2063      	movs	r0, #99	; 0x63
 80170c8:	f005 f8da 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80170cc:	4823      	ldr	r0, [pc, #140]	; (801715c <GUI_TextEn_Luminance+0xa4>)
 80170ce:	f005 f8cb 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80170d2:	4621      	mov	r1, r4
 80170d4:	224c      	movs	r2, #76	; 0x4c
 80170d6:	4628      	mov	r0, r5
 80170d8:	f005 f990 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 80170dc:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80170de:	4820      	ldr	r0, [pc, #128]	; (8017160 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 80170e0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80170e2:	f005 f8c1 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 80170e6:	f105 000d 	add.w	r0, r5, #13
 80170ea:	4621      	mov	r1, r4
 80170ec:	2275      	movs	r2, #117	; 0x75
 80170ee:	b280      	uxth	r0, r0
 80170f0:	f005 f984 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 80170f4:	f105 001b 	add.w	r0, r5, #27
 80170f8:	4621      	mov	r1, r4
 80170fa:	226d      	movs	r2, #109	; 0x6d
 80170fc:	b280      	uxth	r0, r0
 80170fe:	f005 f97d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8017102:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017106:	4621      	mov	r1, r4
 8017108:	2269      	movs	r2, #105	; 0x69
 801710a:	b280      	uxth	r0, r0
 801710c:	f005 f976 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 8017110:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017114:	4621      	mov	r1, r4
 8017116:	2261      	movs	r2, #97	; 0x61
 8017118:	b280      	uxth	r0, r0
 801711a:	f005 f96f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 801711e:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017122:	4621      	mov	r1, r4
 8017124:	226e      	movs	r2, #110	; 0x6e
 8017126:	b280      	uxth	r0, r0
 8017128:	f005 f968 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 801712c:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017130:	4621      	mov	r1, r4
 8017132:	226e      	movs	r2, #110	; 0x6e
 8017134:	b280      	uxth	r0, r0
 8017136:	f005 f961 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 801713a:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801713e:	4621      	mov	r1, r4
 8017140:	2263      	movs	r2, #99	; 0x63
 8017142:	b280      	uxth	r0, r0
 8017144:	f005 f95a 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 8017148:	f105 0060 	add.w	r0, r5, #96	; 0x60
 801714c:	4621      	mov	r1, r4
 801714e:	2265      	movs	r2, #101	; 0x65
 8017150:	b280      	uxth	r0, r0
}
 8017152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 8017156:	f005 b951 	b.w	801c3fc <TFT_DrawChar>
 801715a:	bf00      	nop
 801715c:	200001b8 	.word	0x200001b8
 8017160:	200001c8 	.word	0x200001c8

08017164 <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 8017164:	b538      	push	{r3, r4, r5, lr}
 8017166:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017168:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801716c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801716e:	f005 f881 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017172:	2063      	movs	r0, #99	; 0x63
 8017174:	f005 f884 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017178:	482a      	ldr	r0, [pc, #168]	; (8017224 <GUI_TextEn_Illuminance+0xc0>)
 801717a:	f005 f875 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 801717e:	4621      	mov	r1, r4
 8017180:	2249      	movs	r2, #73	; 0x49
 8017182:	4628      	mov	r0, r5
 8017184:	f005 f93a 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 8017188:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801718a:	4827      	ldr	r0, [pc, #156]	; (8017228 <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 801718c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801718e:	f005 f86b 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 8017192:	f105 0008 	add.w	r0, r5, #8
 8017196:	4621      	mov	r1, r4
 8017198:	226c      	movs	r2, #108	; 0x6c
 801719a:	b280      	uxth	r0, r0
 801719c:	f005 f92e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 80171a0:	f105 000d 	add.w	r0, r5, #13
 80171a4:	4621      	mov	r1, r4
 80171a6:	226c      	movs	r2, #108	; 0x6c
 80171a8:	b280      	uxth	r0, r0
 80171aa:	f005 f927 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 80171ae:	f105 0012 	add.w	r0, r5, #18
 80171b2:	4621      	mov	r1, r4
 80171b4:	2275      	movs	r2, #117	; 0x75
 80171b6:	b280      	uxth	r0, r0
 80171b8:	f005 f920 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 80171bc:	f105 0020 	add.w	r0, r5, #32
 80171c0:	4621      	mov	r1, r4
 80171c2:	226d      	movs	r2, #109	; 0x6d
 80171c4:	b280      	uxth	r0, r0
 80171c6:	f005 f919 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 80171ca:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80171ce:	4621      	mov	r1, r4
 80171d0:	2269      	movs	r2, #105	; 0x69
 80171d2:	b280      	uxth	r0, r0
 80171d4:	f005 f912 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 80171d8:	f105 0040 	add.w	r0, r5, #64	; 0x40
 80171dc:	4621      	mov	r1, r4
 80171de:	2261      	movs	r2, #97	; 0x61
 80171e0:	b280      	uxth	r0, r0
 80171e2:	f005 f90b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 80171e6:	f105 0033 	add.w	r0, r5, #51	; 0x33
 80171ea:	4621      	mov	r1, r4
 80171ec:	226e      	movs	r2, #110	; 0x6e
 80171ee:	b280      	uxth	r0, r0
 80171f0:	f005 f904 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 80171f4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80171f8:	4621      	mov	r1, r4
 80171fa:	226e      	movs	r2, #110	; 0x6e
 80171fc:	b280      	uxth	r0, r0
 80171fe:	f005 f8fd 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 8017202:	f105 0059 	add.w	r0, r5, #89	; 0x59
 8017206:	4621      	mov	r1, r4
 8017208:	2263      	movs	r2, #99	; 0x63
 801720a:	b280      	uxth	r0, r0
 801720c:	f005 f8f6 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017210:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017214:	4621      	mov	r1, r4
 8017216:	2265      	movs	r2, #101	; 0x65
 8017218:	b280      	uxth	r0, r0
}
 801721a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 801721e:	f005 b8ed 	b.w	801c3fc <TFT_DrawChar>
 8017222:	bf00      	nop
 8017224:	200001b8 	.word	0x200001b8
 8017228:	200001c8 	.word	0x200001c8

0801722c <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 801722c:	b538      	push	{r3, r4, r5, lr}
 801722e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017230:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017234:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017236:	f005 f81d 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801723a:	2063      	movs	r0, #99	; 0x63
 801723c:	f005 f820 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017240:	4811      	ldr	r0, [pc, #68]	; (8017288 <GUI_TextEn_Mode+0x5c>)
 8017242:	f005 f811 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 8017246:	4621      	mov	r1, r4
 8017248:	224d      	movs	r2, #77	; 0x4d
 801724a:	4628      	mov	r0, r5
 801724c:	f005 f8d6 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8017250:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017252:	480e      	ldr	r0, [pc, #56]	; (801728c <GUI_TextEn_Mode+0x60>)
 8017254:	f005 f808 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 8017258:	b2a4      	uxth	r4, r4
 801725a:	f105 0013 	add.w	r0, r5, #19
 801725e:	4621      	mov	r1, r4
 8017260:	226f      	movs	r2, #111	; 0x6f
 8017262:	b280      	uxth	r0, r0
 8017264:	f005 f8ca 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 8017268:	f105 001e 	add.w	r0, r5, #30
 801726c:	4621      	mov	r1, r4
 801726e:	2264      	movs	r2, #100	; 0x64
 8017270:	b280      	uxth	r0, r0
 8017272:	f005 f8c3 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 8017276:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 801727a:	4621      	mov	r1, r4
 801727c:	2265      	movs	r2, #101	; 0x65
 801727e:	b280      	uxth	r0, r0
}
 8017280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 8017284:	f005 b8ba 	b.w	801c3fc <TFT_DrawChar>
 8017288:	200001b8 	.word	0x200001b8
 801728c:	200001c8 	.word	0x200001c8

08017290 <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 8017290:	b538      	push	{r3, r4, r5, lr}
 8017292:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017294:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017298:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801729a:	f004 ffeb 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801729e:	2063      	movs	r0, #99	; 0x63
 80172a0:	f004 ffee 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80172a4:	480f      	ldr	r0, [pc, #60]	; (80172e4 <GUI_TextEn_PPFD+0x54>)
 80172a6:	f004 ffdf 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 80172aa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80172ae:	4629      	mov	r1, r5
 80172b0:	2244      	movs	r2, #68	; 0x44
 80172b2:	b280      	uxth	r0, r0
 80172b4:	f005 f8a2 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 80172b8:	f104 001f 	add.w	r0, r4, #31
 80172bc:	4629      	mov	r1, r5
 80172be:	2246      	movs	r2, #70	; 0x46
 80172c0:	b280      	uxth	r0, r0
 80172c2:	f005 f89b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 80172c6:	f104 0010 	add.w	r0, r4, #16
 80172ca:	4629      	mov	r1, r5
 80172cc:	2250      	movs	r2, #80	; 0x50
 80172ce:	b280      	uxth	r0, r0
 80172d0:	f005 f894 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 80172d4:	4629      	mov	r1, r5
 80172d6:	4620      	mov	r0, r4
 80172d8:	2250      	movs	r2, #80	; 0x50
}
 80172da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 80172de:	f005 b88d 	b.w	801c3fc <TFT_DrawChar>
 80172e2:	bf00      	nop
 80172e4:	200001b8 	.word	0x200001b8

080172e8 <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 80172e8:	b538      	push	{r3, r4, r5, lr}
 80172ea:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80172ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80172f0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80172f2:	f004 ffbf 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80172f6:	2063      	movs	r0, #99	; 0x63
 80172f8:	f004 ffc2 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80172fc:	480b      	ldr	r0, [pc, #44]	; (801732c <GUI_TextEn_PPL+0x44>)
 80172fe:	f004 ffb3 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 8017302:	f104 001f 	add.w	r0, r4, #31
 8017306:	4629      	mov	r1, r5
 8017308:	224c      	movs	r2, #76	; 0x4c
 801730a:	b280      	uxth	r0, r0
 801730c:	f005 f876 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8017310:	f104 0010 	add.w	r0, r4, #16
 8017314:	4629      	mov	r1, r5
 8017316:	2250      	movs	r2, #80	; 0x50
 8017318:	b280      	uxth	r0, r0
 801731a:	f005 f86f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 801731e:	4629      	mov	r1, r5
 8017320:	4620      	mov	r0, r4
 8017322:	2250      	movs	r2, #80	; 0x50
}
 8017324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8017328:	f005 b868 	b.w	801c3fc <TFT_DrawChar>
 801732c:	200001b8 	.word	0x200001b8

08017330 <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 8017330:	b538      	push	{r3, r4, r5, lr}
 8017332:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017334:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017338:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801733a:	f004 ff9b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801733e:	2063      	movs	r0, #99	; 0x63
 8017340:	f004 ff9e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017344:	482d      	ldr	r0, [pc, #180]	; (80173fc <GUI_TextEn_PARwavebands+0xcc>)
 8017346:	f004 ff8f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 801734a:	f105 0020 	add.w	r0, r5, #32
 801734e:	4621      	mov	r1, r4
 8017350:	2252      	movs	r2, #82	; 0x52
 8017352:	b280      	uxth	r0, r0
 8017354:	f005 f852 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 8017358:	f105 0010 	add.w	r0, r5, #16
 801735c:	4621      	mov	r1, r4
 801735e:	2241      	movs	r2, #65	; 0x41
 8017360:	b280      	uxth	r0, r0
 8017362:	f005 f84b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017366:	4621      	mov	r1, r4
 8017368:	2250      	movs	r2, #80	; 0x50
 801736a:	4628      	mov	r0, r5
 801736c:	f005 f846 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 8017370:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017372:	4823      	ldr	r0, [pc, #140]	; (8017400 <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 8017374:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017376:	f004 ff77 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 801737a:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 801737e:	4621      	mov	r1, r4
 8017380:	2261      	movs	r2, #97	; 0x61
 8017382:	b280      	uxth	r0, r0
 8017384:	f005 f83a 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 8017388:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 801738c:	4621      	mov	r1, r4
 801738e:	2277      	movs	r2, #119	; 0x77
 8017390:	b280      	uxth	r0, r0
 8017392:	f005 f833 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017396:	f105 0065 	add.w	r0, r5, #101	; 0x65
 801739a:	4621      	mov	r1, r4
 801739c:	2265      	movs	r2, #101	; 0x65
 801739e:	b280      	uxth	r0, r0
 80173a0:	f005 f82c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 80173a4:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80173a8:	4621      	mov	r1, r4
 80173aa:	2276      	movs	r2, #118	; 0x76
 80173ac:	b280      	uxth	r0, r0
 80173ae:	f005 f825 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 80173b2:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 80173b6:	4621      	mov	r1, r4
 80173b8:	2261      	movs	r2, #97	; 0x61
 80173ba:	b280      	uxth	r0, r0
 80173bc:	f005 f81e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 80173c0:	f105 0071 	add.w	r0, r5, #113	; 0x71
 80173c4:	4621      	mov	r1, r4
 80173c6:	2262      	movs	r2, #98	; 0x62
 80173c8:	b280      	uxth	r0, r0
 80173ca:	f005 f817 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 80173ce:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80173d2:	4621      	mov	r1, r4
 80173d4:	226e      	movs	r2, #110	; 0x6e
 80173d6:	b280      	uxth	r0, r0
 80173d8:	f005 f810 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 80173dc:	f105 0097 	add.w	r0, r5, #151	; 0x97
 80173e0:	4621      	mov	r1, r4
 80173e2:	2264      	movs	r2, #100	; 0x64
 80173e4:	b280      	uxth	r0, r0
 80173e6:	f005 f809 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 80173ea:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 80173ee:	4621      	mov	r1, r4
 80173f0:	2273      	movs	r2, #115	; 0x73
 80173f2:	b280      	uxth	r0, r0
}
 80173f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 80173f8:	f005 b800 	b.w	801c3fc <TFT_DrawChar>
 80173fc:	200001b8 	.word	0x200001b8
 8017400:	200001c8 	.word	0x200001c8

08017404 <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 8017404:	b538      	push	{r3, r4, r5, lr}
 8017406:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017408:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801740c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801740e:	f004 ff31 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017412:	2063      	movs	r0, #99	; 0x63
 8017414:	f004 ff34 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017418:	481d      	ldr	r0, [pc, #116]	; (8017490 <GUI_TextEn_B_G_R_FR+0x8c>)
 801741a:	f004 ff25 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 801741e:	f104 000f 	add.w	r0, r4, #15
 8017422:	4629      	mov	r1, r5
 8017424:	222d      	movs	r2, #45	; 0x2d
 8017426:	b280      	uxth	r0, r0
 8017428:	f004 ffe8 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 801742c:	4629      	mov	r1, r5
 801742e:	4620      	mov	r0, r4
 8017430:	2242      	movs	r2, #66	; 0x42
 8017432:	f004 ffe3 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 8017436:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801743a:	4629      	mov	r1, r5
 801743c:	222d      	movs	r2, #45	; 0x2d
 801743e:	b280      	uxth	r0, r0
 8017440:	f004 ffdc 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 8017444:	f104 001d 	add.w	r0, r4, #29
 8017448:	4629      	mov	r1, r5
 801744a:	2247      	movs	r2, #71	; 0x47
 801744c:	b280      	uxth	r0, r0
 801744e:	f004 ffd5 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 8017452:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8017456:	4629      	mov	r1, r5
 8017458:	222d      	movs	r2, #45	; 0x2d
 801745a:	b280      	uxth	r0, r0
 801745c:	f004 ffce 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 8017460:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8017464:	4629      	mov	r1, r5
 8017466:	2252      	movs	r2, #82	; 0x52
 8017468:	b280      	uxth	r0, r0
 801746a:	f004 ffc7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 801746e:	f104 0057 	add.w	r0, r4, #87	; 0x57
 8017472:	4629      	mov	r1, r5
 8017474:	2246      	movs	r2, #70	; 0x46
 8017476:	b280      	uxth	r0, r0
 8017478:	f004 ffc0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 801747c:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8017480:	4629      	mov	r1, r5
 8017482:	2252      	movs	r2, #82	; 0x52
 8017484:	b280      	uxth	r0, r0
}
 8017486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 801748a:	f004 bfb7 	b.w	801c3fc <TFT_DrawChar>
 801748e:	bf00      	nop
 8017490:	200001b8 	.word	0x200001b8

08017494 <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 8017494:	b538      	push	{r3, r4, r5, lr}
 8017496:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017498:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801749c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801749e:	f004 fee9 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80174a2:	2063      	movs	r0, #99	; 0x63
 80174a4:	f004 feec 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80174a8:	480b      	ldr	r0, [pc, #44]	; (80174d8 <GUI_TextEn_CCT+0x44>)
 80174aa:	f004 fedd 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 80174ae:	4629      	mov	r1, r5
 80174b0:	4620      	mov	r0, r4
 80174b2:	2222      	movs	r2, #34	; 0x22
 80174b4:	f004 ffa2 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 80174b8:	f104 0017 	add.w	r0, r4, #23
 80174bc:	4629      	mov	r1, r5
 80174be:	2222      	movs	r2, #34	; 0x22
 80174c0:	b280      	uxth	r0, r0
 80174c2:	f004 ff9b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 80174c6:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80174ca:	4629      	mov	r1, r5
 80174cc:	2233      	movs	r2, #51	; 0x33
 80174ce:	b280      	uxth	r0, r0
}
 80174d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 80174d4:	f004 bf92 	b.w	801c3fc <TFT_DrawChar>
 80174d8:	200001e8 	.word	0x200001e8

080174dc <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 80174dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174de:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80174e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80174e4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80174e6:	f004 fec5 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80174ea:	2063      	movs	r0, #99	; 0x63
 80174ec:	f004 fec8 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 80174f0:	4815      	ldr	r0, [pc, #84]	; (8017548 <GUI_TextEn_W_m2+0x6c>)
 80174f2:	f004 feb9 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 80174f6:	1ce8      	adds	r0, r5, #3
 80174f8:	4621      	mov	r1, r4
 80174fa:	2257      	movs	r2, #87	; 0x57
 80174fc:	b280      	uxth	r0, r0
 80174fe:	f004 ff7d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8017502:	f104 0111 	add.w	r1, r4, #17
 8017506:	1c68      	adds	r0, r5, #1
 8017508:	226d      	movs	r2, #109	; 0x6d
 801750a:	b289      	uxth	r1, r1
 801750c:	b280      	uxth	r0, r0
 801750e:	f004 ff75 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8017512:	480e      	ldr	r0, [pc, #56]	; (801754c <GUI_TextEn_W_m2+0x70>)
 8017514:	f004 fea8 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 8017518:	f104 0110 	add.w	r1, r4, #16
 801751c:	f105 000b 	add.w	r0, r5, #11
 8017520:	2232      	movs	r2, #50	; 0x32
 8017522:	b289      	uxth	r1, r1
 8017524:	b280      	uxth	r0, r0
 8017526:	f004 ff69 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 801752a:	f104 030e 	add.w	r3, r4, #14
 801752e:	b29b      	uxth	r3, r3
 8017530:	f105 0211 	add.w	r2, r5, #17
 8017534:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017538:	9100      	str	r1, [sp, #0]
 801753a:	b292      	uxth	r2, r2
 801753c:	4619      	mov	r1, r3
 801753e:	4628      	mov	r0, r5
 8017540:	f004 fc0c 	bl	801bd5c <TFT_DrawLine>
}
 8017544:	b003      	add	sp, #12
 8017546:	bd30      	pop	{r4, r5, pc}
 8017548:	20000220 	.word	0x20000220
 801754c:	20000210 	.word	0x20000210

08017550 <GUI_TextEn_W_m2_sr>:
void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 8017550:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017552:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017554:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017558:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801755a:	f004 fe8b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801755e:	2063      	movs	r0, #99	; 0x63
 8017560:	f004 fe8e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017564:	4824      	ldr	r0, [pc, #144]	; (80175f8 <GUI_TextEn_W_m2_sr+0xa8>)
 8017566:	f004 fe7f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 801756a:	f105 000c 	add.w	r0, r5, #12
 801756e:	4621      	mov	r1, r4
 8017570:	2257      	movs	r2, #87	; 0x57
 8017572:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8017574:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8017578:	f004 ff40 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 801757c:	b2b6      	uxth	r6, r6
 801757e:	f105 0014 	add.w	r0, r5, #20
 8017582:	4631      	mov	r1, r6
 8017584:	226d      	movs	r2, #109	; 0x6d
 8017586:	b280      	uxth	r0, r0
 8017588:	f004 ff38 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 801758c:	4631      	mov	r1, r6
 801758e:	4628      	mov	r0, r5
 8017590:	2273      	movs	r2, #115	; 0x73
 8017592:	f004 ff33 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8017596:	1de8      	adds	r0, r5, #7
 8017598:	4631      	mov	r1, r6
 801759a:	2272      	movs	r2, #114	; 0x72
 801759c:	b280      	uxth	r0, r0
 801759e:	f004 ff2d 	bl	801c3fc <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 80175a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80175a6:	f104 0318 	add.w	r3, r4, #24
 80175aa:	f105 0212 	add.w	r2, r5, #18
 80175ae:	f104 0117 	add.w	r1, r4, #23
 80175b2:	f105 0011 	add.w	r0, r5, #17
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	b292      	uxth	r2, r2
 80175ba:	b289      	uxth	r1, r1
 80175bc:	9600      	str	r6, [sp, #0]
 80175be:	b280      	uxth	r0, r0
 80175c0:	f004 fc29 	bl	801be16 <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 80175c4:	480d      	ldr	r0, [pc, #52]	; (80175fc <GUI_TextEn_W_m2_sr+0xac>)
 80175c6:	f004 fe4f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 80175ca:	f104 0110 	add.w	r1, r4, #16
 80175ce:	f105 001e 	add.w	r0, r5, #30
 80175d2:	2232      	movs	r2, #50	; 0x32
 80175d4:	b289      	uxth	r1, r1
 80175d6:	b280      	uxth	r0, r0
 80175d8:	f004 ff10 	bl	801c3fc <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 80175dc:	f104 030e 	add.w	r3, r4, #14
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80175e6:	9600      	str	r6, [sp, #0]
 80175e8:	b292      	uxth	r2, r2
 80175ea:	4619      	mov	r1, r3
 80175ec:	4628      	mov	r0, r5
 80175ee:	f004 fbb5 	bl	801bd5c <TFT_DrawLine>
}
 80175f2:	b002      	add	sp, #8
 80175f4:	bd70      	pop	{r4, r5, r6, pc}
 80175f6:	bf00      	nop
 80175f8:	20000220 	.word	0x20000220
 80175fc:	20000210 	.word	0x20000210

08017600 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 8017600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017604:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017606:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801760a:	460d      	mov	r5, r1
 801760c:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 801760e:	f004 fe31 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017612:	2063      	movs	r0, #99	; 0x63
 8017614:	f004 fe34 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017618:	482f      	ldr	r0, [pc, #188]	; (80176d8 <GUI_TextEn_cd_m2+0xd8>)
 801761a:	f004 fe25 	bl	801c268 <TFT_SetFont>
	
	if (deg==1)
 801761e:	2e01      	cmp	r6, #1
 8017620:	f105 0911 	add.w	r9, r5, #17
 8017624:	f105 0810 	add.w	r8, r5, #16
 8017628:	f105 060e 	add.w	r6, r5, #14
 801762c:	d131      	bne.n	8017692 <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 801762e:	226b      	movs	r2, #107	; 0x6b
 8017630:	4629      	mov	r1, r5
 8017632:	4620      	mov	r0, r4
 8017634:	f004 fee2 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8017638:	1de0      	adds	r0, r4, #7
 801763a:	2263      	movs	r2, #99	; 0x63
 801763c:	4629      	mov	r1, r5
 801763e:	b280      	uxth	r0, r0
 8017640:	f004 fedc 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 8017644:	f104 000e 	add.w	r0, r4, #14
 8017648:	2264      	movs	r2, #100	; 0x64
 801764a:	4629      	mov	r1, r5
 801764c:	b280      	uxth	r0, r0
 801764e:	f004 fed5 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 8017652:	1d60      	adds	r0, r4, #5
 8017654:	226d      	movs	r2, #109	; 0x6d
 8017656:	fa1f f189 	uxth.w	r1, r9
 801765a:	b280      	uxth	r0, r0
 801765c:	f004 fece 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8017660:	481e      	ldr	r0, [pc, #120]	; (80176dc <GUI_TextEn_cd_m2+0xdc>)
 8017662:	f004 fe01 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 8017666:	f104 000f 	add.w	r0, r4, #15
 801766a:	2232      	movs	r2, #50	; 0x32
 801766c:	fa1f f188 	uxth.w	r1, r8
 8017670:	b280      	uxth	r0, r0
 8017672:	f004 fec3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 8017676:	b2b3      	uxth	r3, r6
 8017678:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 801767c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017680:	9100      	str	r1, [sp, #0]
 8017682:	b292      	uxth	r2, r2
 8017684:	4619      	mov	r1, r3
 8017686:	4620      	mov	r0, r4
 8017688:	f004 fb68 	bl	801bd5c <TFT_DrawLine>
	}
}
 801768c:	b003      	add	sp, #12
 801768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 8017692:	1ca7      	adds	r7, r4, #2
 8017694:	b2bf      	uxth	r7, r7
 8017696:	2263      	movs	r2, #99	; 0x63
 8017698:	4629      	mov	r1, r5
 801769a:	4638      	mov	r0, r7
 801769c:	f004 feae 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 80176a0:	f104 0009 	add.w	r0, r4, #9
 80176a4:	2264      	movs	r2, #100	; 0x64
 80176a6:	4629      	mov	r1, r5
 80176a8:	b280      	uxth	r0, r0
 80176aa:	f004 fea7 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 80176ae:	226d      	movs	r2, #109	; 0x6d
 80176b0:	fa1f f189 	uxth.w	r1, r9
 80176b4:	4638      	mov	r0, r7
 80176b6:	f004 fea1 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 80176ba:	4808      	ldr	r0, [pc, #32]	; (80176dc <GUI_TextEn_cd_m2+0xdc>)
 80176bc:	f004 fdd4 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 80176c0:	f104 000c 	add.w	r0, r4, #12
 80176c4:	2232      	movs	r2, #50	; 0x32
 80176c6:	fa1f f188 	uxth.w	r1, r8
 80176ca:	b280      	uxth	r0, r0
 80176cc:	f004 fe96 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 80176d0:	b2b3      	uxth	r3, r6
 80176d2:	f104 0213 	add.w	r2, r4, #19
 80176d6:	e7d1      	b.n	801767c <GUI_TextEn_cd_m2+0x7c>
 80176d8:	20000220 	.word	0x20000220
 80176dc:	20000210 	.word	0x20000210

080176e0 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 80176e0:	b538      	push	{r3, r4, r5, lr}
 80176e2:	4605      	mov	r5, r0
 80176e4:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 80176e6:	4815      	ldr	r0, [pc, #84]	; (801773c <GUI_TextEn_Green+0x5c>)
 80176e8:	f004 fdbe 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 80176ec:	4621      	mov	r1, r4
 80176ee:	2247      	movs	r2, #71	; 0x47
 80176f0:	4628      	mov	r0, r5
 80176f2:	f004 fe83 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 80176f6:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 80176f8:	4811      	ldr	r0, [pc, #68]	; (8017740 <GUI_TextEn_Green+0x60>)
 80176fa:	f004 fdb5 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 80176fe:	b2a4      	uxth	r4, r4
 8017700:	f105 000f 	add.w	r0, r5, #15
 8017704:	4621      	mov	r1, r4
 8017706:	2272      	movs	r2, #114	; 0x72
 8017708:	b280      	uxth	r0, r0
 801770a:	f004 fe77 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 801770e:	f105 001a 	add.w	r0, r5, #26
 8017712:	4621      	mov	r1, r4
 8017714:	2265      	movs	r2, #101	; 0x65
 8017716:	b280      	uxth	r0, r0
 8017718:	f004 fe70 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 801771c:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8017720:	4621      	mov	r1, r4
 8017722:	2265      	movs	r2, #101	; 0x65
 8017724:	b280      	uxth	r0, r0
 8017726:	f004 fe69 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 801772a:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801772e:	4621      	mov	r1, r4
 8017730:	226e      	movs	r2, #110	; 0x6e
 8017732:	b280      	uxth	r0, r0
}
 8017734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8017738:	f004 be60 	b.w	801c3fc <TFT_DrawChar>
 801773c:	200001b0 	.word	0x200001b0
 8017740:	200001c0 	.word	0x200001c0

08017744 <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 8017744:	b538      	push	{r3, r4, r5, lr}
 8017746:	4605      	mov	r5, r0
 8017748:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801774a:	4812      	ldr	r0, [pc, #72]	; (8017794 <GUI_TextEn_Blue+0x50>)
 801774c:	f004 fd8c 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 8017750:	4621      	mov	r1, r4
 8017752:	2242      	movs	r2, #66	; 0x42
 8017754:	4628      	mov	r0, r5
 8017756:	f004 fe51 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 801775a:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 801775c:	480e      	ldr	r0, [pc, #56]	; (8017798 <GUI_TextEn_Blue+0x54>)
 801775e:	f004 fd83 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 8017762:	b2a4      	uxth	r4, r4
 8017764:	f105 000f 	add.w	r0, r5, #15
 8017768:	4621      	mov	r1, r4
 801776a:	226c      	movs	r2, #108	; 0x6c
 801776c:	b280      	uxth	r0, r0
 801776e:	f004 fe45 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 8017772:	f105 0014 	add.w	r0, r5, #20
 8017776:	4621      	mov	r1, r4
 8017778:	2275      	movs	r2, #117	; 0x75
 801777a:	b280      	uxth	r0, r0
 801777c:	f004 fe3e 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 8017780:	f105 0021 	add.w	r0, r5, #33	; 0x21
 8017784:	4621      	mov	r1, r4
 8017786:	2265      	movs	r2, #101	; 0x65
 8017788:	b280      	uxth	r0, r0
}
 801778a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 801778e:	f004 be35 	b.w	801c3fc <TFT_DrawChar>
 8017792:	bf00      	nop
 8017794:	200001b0 	.word	0x200001b0
 8017798:	200001c8 	.word	0x200001c8

0801779c <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 801779c:	b538      	push	{r3, r4, r5, lr}
 801779e:	4605      	mov	r5, r0
 80177a0:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 80177a2:	480e      	ldr	r0, [pc, #56]	; (80177dc <GUI_TextEn_Red+0x40>)
 80177a4:	f004 fd60 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 80177a8:	4621      	mov	r1, r4
 80177aa:	2252      	movs	r2, #82	; 0x52
 80177ac:	4628      	mov	r0, r5
 80177ae:	f004 fe25 	bl	801c3fc <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 80177b2:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 80177b4:	480a      	ldr	r0, [pc, #40]	; (80177e0 <GUI_TextEn_Red+0x44>)
 80177b6:	f004 fd57 	bl	801c268 <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 80177ba:	b2a4      	uxth	r4, r4
 80177bc:	f105 0010 	add.w	r0, r5, #16
 80177c0:	4621      	mov	r1, r4
 80177c2:	2265      	movs	r2, #101	; 0x65
 80177c4:	b280      	uxth	r0, r0
 80177c6:	f004 fe19 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 80177ca:	f105 001d 	add.w	r0, r5, #29
 80177ce:	4621      	mov	r1, r4
 80177d0:	2264      	movs	r2, #100	; 0x64
 80177d2:	b280      	uxth	r0, r0
}
 80177d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 80177d8:	f004 be10 	b.w	801c3fc <TFT_DrawChar>
 80177dc:	200001b0 	.word	0x200001b0
 80177e0:	200001c0 	.word	0x200001c0

080177e4 <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80177e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80177ec:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80177ee:	f004 fd41 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80177f2:	2063      	movs	r0, #99	; 0x63
 80177f4:	f004 fd44 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80177f8:	4815      	ldr	r0, [pc, #84]	; (8017850 <GUI_TextEn_WriteSD+0x6c>)
 80177fa:	f004 fd35 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 80177fe:	4621      	mov	r1, r4
 8017800:	2257      	movs	r2, #87	; 0x57
 8017802:	4628      	mov	r0, r5
 8017804:	f004 fdfa 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 8017808:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 801780a:	4812      	ldr	r0, [pc, #72]	; (8017854 <GUI_TextEn_WriteSD+0x70>)
 801780c:	f004 fd2c 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 8017810:	b2a4      	uxth	r4, r4
 8017812:	f105 0011 	add.w	r0, r5, #17
 8017816:	4621      	mov	r1, r4
 8017818:	2272      	movs	r2, #114	; 0x72
 801781a:	b280      	uxth	r0, r0
 801781c:	f004 fdee 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 8017820:	f105 001c 	add.w	r0, r5, #28
 8017824:	4621      	mov	r1, r4
 8017826:	2269      	movs	r2, #105	; 0x69
 8017828:	b280      	uxth	r0, r0
 801782a:	f004 fde7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 801782e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017832:	4621      	mov	r1, r4
 8017834:	2274      	movs	r2, #116	; 0x74
 8017836:	b280      	uxth	r0, r0
 8017838:	f004 fde0 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 801783c:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8017840:	4621      	mov	r1, r4
 8017842:	2265      	movs	r2, #101	; 0x65
 8017844:	b280      	uxth	r0, r0
}
 8017846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 801784a:	f004 bdd7 	b.w	801c3fc <TFT_DrawChar>
 801784e:	bf00      	nop
 8017850:	200001b0 	.word	0x200001b0
 8017854:	200001c0 	.word	0x200001c0

08017858 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8017858:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801785a:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801785c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017860:	2300      	movs	r3, #0
 8017862:	9300      	str	r3, [sp, #0]
 8017864:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8017868:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801786a:	f004 fd03 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801786e:	2063      	movs	r0, #99	; 0x63
 8017870:	f004 fd06 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017874:	4834      	ldr	r0, [pc, #208]	; (8017948 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 8017876:	4d35      	ldr	r5, [pc, #212]	; (801794c <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 8017878:	f004 fcf6 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801787c:	2243      	movs	r2, #67	; 0x43
 801787e:	2164      	movs	r1, #100	; 0x64
 8017880:	2046      	movs	r0, #70	; 0x46
 8017882:	f004 fdbb 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017886:	4832      	ldr	r0, [pc, #200]	; (8017950 <GUI_TextEn_Info_Callibration+0xf8>)
 8017888:	f004 fcee 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 801788c:	2261      	movs	r2, #97	; 0x61
 801788e:	2166      	movs	r1, #102	; 0x66
 8017890:	2056      	movs	r0, #86	; 0x56
 8017892:	f004 fdb3 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 8017896:	226c      	movs	r2, #108	; 0x6c
 8017898:	2166      	movs	r1, #102	; 0x66
 801789a:	2063      	movs	r0, #99	; 0x63
 801789c:	f004 fdae 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 80178a0:	2269      	movs	r2, #105	; 0x69
 80178a2:	2166      	movs	r1, #102	; 0x66
 80178a4:	206c      	movs	r0, #108	; 0x6c
 80178a6:	f004 fda9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 80178aa:	2262      	movs	r2, #98	; 0x62
 80178ac:	2166      	movs	r1, #102	; 0x66
 80178ae:	2078      	movs	r0, #120	; 0x78
 80178b0:	f004 fda4 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 80178b4:	2272      	movs	r2, #114	; 0x72
 80178b6:	2166      	movs	r1, #102	; 0x66
 80178b8:	2085      	movs	r0, #133	; 0x85
 80178ba:	f004 fd9f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 80178be:	2261      	movs	r2, #97	; 0x61
 80178c0:	2166      	movs	r1, #102	; 0x66
 80178c2:	2092      	movs	r0, #146	; 0x92
 80178c4:	f004 fd9a 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 80178c8:	2274      	movs	r2, #116	; 0x74
 80178ca:	2166      	movs	r1, #102	; 0x66
 80178cc:	209f      	movs	r0, #159	; 0x9f
 80178ce:	f004 fd95 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 80178d2:	2269      	movs	r2, #105	; 0x69
 80178d4:	2166      	movs	r1, #102	; 0x66
 80178d6:	20a7      	movs	r0, #167	; 0xa7
 80178d8:	f004 fd90 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 80178dc:	226f      	movs	r2, #111	; 0x6f
 80178de:	2166      	movs	r1, #102	; 0x66
 80178e0:	20b2      	movs	r0, #178	; 0xb2
 80178e2:	f004 fd8b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 80178e6:	226e      	movs	r2, #110	; 0x6e
 80178e8:	2166      	movs	r1, #102	; 0x66
 80178ea:	20be      	movs	r0, #190	; 0xbe
 80178ec:	f004 fd86 	bl	801c3fc <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 80178f0:	4622      	mov	r2, r4
 80178f2:	4629      	mov	r1, r5
 80178f4:	4668      	mov	r0, sp
 80178f6:	f007 ffa1 	bl	801f83c <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80178fa:	4816      	ldr	r0, [pc, #88]	; (8017954 <GUI_TextEn_Info_Callibration+0xfc>)
 80178fc:	f004 fcb4 	bl	801c268 <TFT_SetFont>
	buffer[2] = '.';
 8017900:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017902:	2303      	movs	r3, #3
 8017904:	466a      	mov	r2, sp
 8017906:	2182      	movs	r1, #130	; 0x82
 8017908:	201e      	movs	r0, #30
	buffer[2] = '.';
 801790a:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801790e:	f004 fdcd 	bl	801c4ac <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 8017912:	4632      	mov	r2, r6
 8017914:	4629      	mov	r1, r5
 8017916:	4668      	mov	r0, sp
 8017918:	f007 ff90 	bl	801f83c <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801791c:	2303      	movs	r3, #3
 801791e:	466a      	mov	r2, sp
 8017920:	2182      	movs	r1, #130	; 0x82
 8017922:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 8017924:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017928:	f004 fdc0 	bl	801c4ac <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801792c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8017930:	4909      	ldr	r1, [pc, #36]	; (8017958 <GUI_TextEn_Info_Callibration+0x100>)
 8017932:	4668      	mov	r0, sp
 8017934:	f007 ff82 	bl	801f83c <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017938:	2303      	movs	r3, #3
 801793a:	466a      	mov	r2, sp
 801793c:	2182      	movs	r1, #130	; 0x82
 801793e:	209b      	movs	r0, #155	; 0x9b
 8017940:	f004 fdb4 	bl	801c4ac <TFT_DisplayString>
}
 8017944:	b002      	add	sp, #8
 8017946:	bd70      	pop	{r4, r5, r6, pc}
 8017948:	200001b0 	.word	0x200001b0
 801794c:	0803129c 	.word	0x0803129c
 8017950:	200001c0 	.word	0x200001c0
 8017954:	200001f0 	.word	0x200001f0
 8017958:	080312a1 	.word	0x080312a1

0801795c <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801795c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801795e:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8017960:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017964:	2300      	movs	r3, #0
 8017966:	9300      	str	r3, [sp, #0]
 8017968:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801796c:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801796e:	f004 fc81 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017972:	2063      	movs	r0, #99	; 0x63
 8017974:	f004 fc84 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017978:	482e      	ldr	r0, [pc, #184]	; (8017a34 <GUI_TextEn_Info_Serial+0xd8>)
 801797a:	f004 fc75 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 801797e:	2253      	movs	r2, #83	; 0x53
 8017980:	21c8      	movs	r1, #200	; 0xc8
 8017982:	203c      	movs	r0, #60	; 0x3c
 8017984:	f004 fd3a 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017988:	482b      	ldr	r0, [pc, #172]	; (8017a38 <GUI_TextEn_Info_Serial+0xdc>)
 801798a:	f004 fc6d 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 801798e:	2265      	movs	r2, #101	; 0x65
 8017990:	21ca      	movs	r1, #202	; 0xca
 8017992:	204d      	movs	r0, #77	; 0x4d
 8017994:	f004 fd32 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 8017998:	2272      	movs	r2, #114	; 0x72
 801799a:	21ca      	movs	r1, #202	; 0xca
 801799c:	205a      	movs	r0, #90	; 0x5a
 801799e:	f004 fd2d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 80179a2:	2269      	movs	r2, #105	; 0x69
 80179a4:	21ca      	movs	r1, #202	; 0xca
 80179a6:	2066      	movs	r0, #102	; 0x66
 80179a8:	f004 fd28 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 80179ac:	2261      	movs	r2, #97	; 0x61
 80179ae:	21ca      	movs	r1, #202	; 0xca
 80179b0:	2072      	movs	r0, #114	; 0x72
 80179b2:	f004 fd23 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 80179b6:	226c      	movs	r2, #108	; 0x6c
 80179b8:	21ca      	movs	r1, #202	; 0xca
 80179ba:	207f      	movs	r0, #127	; 0x7f
 80179bc:	f004 fd1e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 80179c0:	226e      	movs	r2, #110	; 0x6e
 80179c2:	21ca      	movs	r1, #202	; 0xca
 80179c4:	2095      	movs	r0, #149	; 0x95
 80179c6:	f004 fd19 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 80179ca:	2275      	movs	r2, #117	; 0x75
 80179cc:	21ca      	movs	r1, #202	; 0xca
 80179ce:	20a2      	movs	r0, #162	; 0xa2
 80179d0:	f004 fd14 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 80179d4:	226d      	movs	r2, #109	; 0x6d
 80179d6:	21ca      	movs	r1, #202	; 0xca
 80179d8:	20af      	movs	r0, #175	; 0xaf
 80179da:	f004 fd0f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 80179de:	2262      	movs	r2, #98	; 0x62
 80179e0:	21ca      	movs	r1, #202	; 0xca
 80179e2:	20bc      	movs	r0, #188	; 0xbc
 80179e4:	f004 fd0a 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 80179e8:	2265      	movs	r2, #101	; 0x65
 80179ea:	21ca      	movs	r1, #202	; 0xca
 80179ec:	20c9      	movs	r0, #201	; 0xc9
 80179ee:	f004 fd05 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 80179f2:	2272      	movs	r2, #114	; 0x72
 80179f4:	21ca      	movs	r1, #202	; 0xca
 80179f6:	20d6      	movs	r0, #214	; 0xd6
 80179f8:	f004 fd00 	bl	801c3fc <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 80179fc:	462a      	mov	r2, r5
 80179fe:	490f      	ldr	r1, [pc, #60]	; (8017a3c <GUI_TextEn_Info_Serial+0xe0>)
 8017a00:	4668      	mov	r0, sp
 8017a02:	f007 ff1b 	bl	801f83c <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8017a06:	480e      	ldr	r0, [pc, #56]	; (8017a40 <GUI_TextEn_Info_Serial+0xe4>)
 8017a08:	f004 fc2e 	bl	801c268 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017a0c:	2303      	movs	r3, #3
 8017a0e:	466a      	mov	r2, sp
 8017a10:	21e6      	movs	r1, #230	; 0xe6
 8017a12:	2028      	movs	r0, #40	; 0x28
 8017a14:	f004 fd4a 	bl	801c4ac <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 8017a18:	4622      	mov	r2, r4
 8017a1a:	490a      	ldr	r1, [pc, #40]	; (8017a44 <GUI_TextEn_Info_Serial+0xe8>)
 8017a1c:	4668      	mov	r0, sp
 8017a1e:	f007 ff0d 	bl	801f83c <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017a22:	2303      	movs	r3, #3
 8017a24:	466a      	mov	r2, sp
 8017a26:	21e6      	movs	r1, #230	; 0xe6
 8017a28:	2087      	movs	r0, #135	; 0x87
 8017a2a:	f004 fd3f 	bl	801c4ac <TFT_DisplayString>
}
 8017a2e:	b003      	add	sp, #12
 8017a30:	bd30      	pop	{r4, r5, pc}
 8017a32:	bf00      	nop
 8017a34:	200001b0 	.word	0x200001b0
 8017a38:	200001c0 	.word	0x200001c0
 8017a3c:	080312a5 	.word	0x080312a5
 8017a40:	200001f0 	.word	0x200001f0
 8017a44:	080312a8 	.word	0x080312a8

08017a48 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8017a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 8017a4a:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8017a4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017a50:	9302      	str	r3, [sp, #8]
 8017a52:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8017a56:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 8017a5a:	f004 fc0b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017a5e:	2063      	movs	r0, #99	; 0x63
 8017a60:	f004 fc0e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017a64:	482e      	ldr	r0, [pc, #184]	; (8017b20 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 8017a66:	4c2f      	ldr	r4, [pc, #188]	; (8017b24 <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 8017a68:	f004 fbfe 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 8017a6c:	2246      	movs	r2, #70	; 0x46
 8017a6e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017a72:	2014      	movs	r0, #20
 8017a74:	f004 fcc2 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017a78:	482b      	ldr	r0, [pc, #172]	; (8017b28 <GUI_TextEn_Info_Ver+0xe0>)
 8017a7a:	f004 fbf5 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 8017a7e:	2269      	movs	r2, #105	; 0x69
 8017a80:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017a84:	2024      	movs	r0, #36	; 0x24
 8017a86:	f004 fcb9 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 8017a8a:	2272      	movs	r2, #114	; 0x72
 8017a8c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017a90:	202f      	movs	r0, #47	; 0x2f
 8017a92:	f004 fcb3 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 8017a96:	226d      	movs	r2, #109	; 0x6d
 8017a98:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017a9c:	203c      	movs	r0, #60	; 0x3c
 8017a9e:	f004 fcad 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 8017aa2:	2277      	movs	r2, #119	; 0x77
 8017aa4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017aa8:	204b      	movs	r0, #75	; 0x4b
 8017aaa:	f004 fca7 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 8017aae:	2261      	movs	r2, #97	; 0x61
 8017ab0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017ab4:	205a      	movs	r0, #90	; 0x5a
 8017ab6:	f004 fca1 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 8017aba:	2272      	movs	r2, #114	; 0x72
 8017abc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017ac0:	206a      	movs	r0, #106	; 0x6a
 8017ac2:	f004 fc9b 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8017ac6:	2265      	movs	r2, #101	; 0x65
 8017ac8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017acc:	2077      	movs	r0, #119	; 0x77
 8017ace:	f004 fc95 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16);
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f004 fbc8 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 8017ad8:	222e      	movs	r2, #46	; 0x2e
 8017ada:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017ade:	20ac      	movs	r0, #172	; 0xac
 8017ae0:	f004 fc8c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 8017ae4:	2276      	movs	r2, #118	; 0x76
 8017ae6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017aea:	20a2      	movs	r0, #162	; 0xa2
 8017aec:	f004 fc86 	bl	801c3fc <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 8017af0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017af4:	ee10 0a10 	vmov	r0, s0
 8017af8:	f7e8 fd3e 	bl	8000578 <__aeabi_f2d>
 8017afc:	4602      	mov	r2, r0
 8017afe:	460b      	mov	r3, r1
 8017b00:	a802      	add	r0, sp, #8
 8017b02:	490a      	ldr	r1, [pc, #40]	; (8017b2c <GUI_TextEn_Info_Ver+0xe4>)
 8017b04:	f007 fe9a 	bl	801f83c <sprintf>
	TFT_SetFont(&Font16);
 8017b08:	4620      	mov	r0, r4
 8017b0a:	f004 fbad 	bl	801c268 <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 8017b0e:	2303      	movs	r3, #3
 8017b10:	aa02      	add	r2, sp, #8
 8017b12:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017b16:	20c0      	movs	r0, #192	; 0xc0
 8017b18:	f004 fcc8 	bl	801c4ac <TFT_DisplayString>
 8017b1c:	b004      	add	sp, #16
 8017b1e:	bd10      	pop	{r4, pc}
 8017b20:	200001b0 	.word	0x200001b0
 8017b24:	200001a8 	.word	0x200001a8
 8017b28:	200001c0 	.word	0x200001c0
 8017b2c:	0803128d 	.word	0x0803128d

08017b30 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 8017b30:	b538      	push	{r3, r4, r5, lr}
 8017b32:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017b34:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017b38:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017b3a:	f004 fb9b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 8017b3e:	2084      	movs	r0, #132	; 0x84
 8017b40:	f004 fb9e 	bl	801c280 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8017b44:	4825      	ldr	r0, [pc, #148]	; (8017bdc <GUI_TitleString_Name+0xac>)
 8017b46:	f004 fb8f 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 8017b4a:	4629      	mov	r1, r5
 8017b4c:	4620      	mov	r0, r4
 8017b4e:	2254      	movs	r2, #84	; 0x54
 8017b50:	f004 fc54 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 8017b54:	f104 000f 	add.w	r0, r4, #15
 8017b58:	4629      	mov	r1, r5
 8017b5a:	224b      	movs	r2, #75	; 0x4b
 8017b5c:	b280      	uxth	r0, r0
 8017b5e:	f004 fc4d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 8017b62:	f104 001e 	add.w	r0, r4, #30
 8017b66:	4629      	mov	r1, r5
 8017b68:	2241      	movs	r2, #65	; 0x41
 8017b6a:	b280      	uxth	r0, r0
 8017b6c:	f004 fc46 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 8017b70:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 8017b74:	4629      	mov	r1, r5
 8017b76:	222d      	movs	r2, #45	; 0x2d
 8017b78:	b280      	uxth	r0, r0
 8017b7a:	f004 fc3f 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 8017b7e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8017b82:	4629      	mov	r1, r5
 8017b84:	2253      	movs	r2, #83	; 0x53
 8017b86:	b280      	uxth	r0, r0
 8017b88:	f004 fc38 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017b8c:	4814      	ldr	r0, [pc, #80]	; (8017be0 <GUI_TitleString_Name+0xb0>)
 8017b8e:	f004 fb6b 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 8017b92:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8017b96:	4629      	mov	r1, r5
 8017b98:	2270      	movs	r2, #112	; 0x70
 8017b9a:	b280      	uxth	r0, r0
 8017b9c:	f004 fc2e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 8017ba0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017ba4:	4629      	mov	r1, r5
 8017ba6:	2265      	movs	r2, #101	; 0x65
 8017ba8:	b280      	uxth	r0, r0
 8017baa:	f004 fc27 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 8017bae:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8017bb2:	4629      	mov	r1, r5
 8017bb4:	2263      	movs	r2, #99	; 0x63
 8017bb6:	b280      	uxth	r0, r0
 8017bb8:	f004 fc20 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 8017bbc:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8017bc0:	4629      	mov	r1, r5
 8017bc2:	2274      	movs	r2, #116	; 0x74
 8017bc4:	b280      	uxth	r0, r0
 8017bc6:	f004 fc19 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 8017bca:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8017bce:	4629      	mov	r1, r5
 8017bd0:	2272      	movs	r2, #114	; 0x72
 8017bd2:	b280      	uxth	r0, r0
}
 8017bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 8017bd8:	f004 bc10 	b.w	801c3fc <TFT_DrawChar>
 8017bdc:	200001b0 	.word	0x200001b0
 8017be0:	200001c0 	.word	0x200001c0

08017be4 <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 8017be4:	b530      	push	{r4, r5, lr}
 8017be6:	b085      	sub	sp, #20
	char buffer[5] = {0};
 8017be8:	2300      	movs	r3, #0
{
 8017bea:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 8017bec:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017bf0:	9302      	str	r3, [sp, #8]
 8017bf2:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8017bf6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017bfa:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017bfc:	f004 fb3a 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 8017c00:	2084      	movs	r0, #132	; 0x84
 8017c02:	f004 fb3d 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 8017c06:	4815      	ldr	r0, [pc, #84]	; (8017c5c <GUI_TitleString_Version+0x78>)
 8017c08:	f004 fb2e 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 8017c0c:	4629      	mov	r1, r5
 8017c0e:	2276      	movs	r2, #118	; 0x76
 8017c10:	4620      	mov	r0, r4
 8017c12:	f004 fbf3 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8017c16:	4812      	ldr	r0, [pc, #72]	; (8017c60 <GUI_TitleString_Version+0x7c>)
 8017c18:	f004 fb26 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 8017c1c:	f104 000d 	add.w	r0, r4, #13
 8017c20:	222e      	movs	r2, #46	; 0x2e
 8017c22:	4629      	mov	r1, r5
 8017c24:	b280      	uxth	r0, r0
 8017c26:	f004 fbe9 	bl	801c3fc <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 8017c2a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017c2e:	ee10 0a10 	vmov	r0, s0
 8017c32:	f7e8 fca1 	bl	8000578 <__aeabi_f2d>
 8017c36:	4602      	mov	r2, r0
 8017c38:	460b      	mov	r3, r1
 8017c3a:	a802      	add	r0, sp, #8
 8017c3c:	4909      	ldr	r1, [pc, #36]	; (8017c64 <GUI_TitleString_Version+0x80>)
 8017c3e:	f007 fdfd 	bl	801f83c <sprintf>
	TFT_SetFont(&Font16);
 8017c42:	4809      	ldr	r0, [pc, #36]	; (8017c68 <GUI_TitleString_Version+0x84>)
 8017c44:	f004 fb10 	bl	801c268 <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 8017c48:	f104 0018 	add.w	r0, r4, #24
 8017c4c:	2303      	movs	r3, #3
 8017c4e:	aa02      	add	r2, sp, #8
 8017c50:	4629      	mov	r1, r5
 8017c52:	b280      	uxth	r0, r0
 8017c54:	f004 fc2a 	bl	801c4ac <TFT_DisplayString>
}
 8017c58:	b005      	add	sp, #20
 8017c5a:	bd30      	pop	{r4, r5, pc}
 8017c5c:	200001c0 	.word	0x200001c0
 8017c60:	200001b0 	.word	0x200001b0
 8017c64:	0803128d 	.word	0x0803128d
 8017c68:	200001a8 	.word	0x200001a8

08017c6c <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 8017c6c:	b538      	push	{r3, r4, r5, lr}
 8017c6e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017c70:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017c74:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017c76:	f004 fafd 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017c7a:	2063      	movs	r0, #99	; 0x63
 8017c7c:	f004 fb00 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017c80:	4811      	ldr	r0, [pc, #68]	; (8017cc8 <GUI_TextRu_Language+0x5c>)
 8017c82:	f004 faf1 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 8017c86:	4621      	mov	r1, r4
 8017c88:	22af      	movs	r2, #175	; 0xaf
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	f004 fafe 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8017c90:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017c92:	480e      	ldr	r0, [pc, #56]	; (8017ccc <GUI_TextRu_Language+0x60>)
 8017c94:	f004 fae8 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8017c98:	b2a4      	uxth	r4, r4
 8017c9a:	f105 000f 	add.w	r0, r5, #15
 8017c9e:	4621      	mov	r1, r4
 8017ca0:	22b7      	movs	r2, #183	; 0xb7
 8017ca2:	b280      	uxth	r0, r0
 8017ca4:	f004 faf2 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 8017ca8:	f105 001c 	add.w	r0, r5, #28
 8017cac:	4621      	mov	r1, r4
 8017cae:	228b      	movs	r2, #139	; 0x8b
 8017cb0:	b280      	uxth	r0, r0
 8017cb2:	f004 faeb 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8017cb6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017cba:	4621      	mov	r1, r4
 8017cbc:	22ba      	movs	r2, #186	; 0xba
 8017cbe:	b280      	uxth	r0, r0
}
 8017cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8017cc4:	f004 bae2 	b.w	801c28c <TFT_DrawCharRus>
 8017cc8:	200001d0 	.word	0x200001d0
 8017ccc:	200001d8 	.word	0x200001d8

08017cd0 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 8017cd0:	b538      	push	{r3, r4, r5, lr}
 8017cd2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017cd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017cd8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017cda:	f004 facb 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017cde:	2063      	movs	r0, #99	; 0x63
 8017ce0:	f004 face 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017ce4:	481c      	ldr	r0, [pc, #112]	; (8017d58 <GUI_TextRu_Russian+0x88>)
 8017ce6:	f004 fabf 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 8017cea:	4621      	mov	r1, r4
 8017cec:	22a0      	movs	r2, #160	; 0xa0
 8017cee:	4628      	mov	r0, r5
 8017cf0:	f004 facc 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017cf4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017cf6:	4819      	ldr	r0, [pc, #100]	; (8017d5c <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017cf8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8017cfa:	f004 fab5 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017cfe:	f105 000f 	add.w	r0, r5, #15
 8017d02:	4621      	mov	r1, r4
 8017d04:	2283      	movs	r2, #131	; 0x83
 8017d06:	b280      	uxth	r0, r0
 8017d08:	f004 fac0 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 8017d0c:	f105 001c 	add.w	r0, r5, #28
 8017d10:	4621      	mov	r1, r4
 8017d12:	2281      	movs	r2, #129	; 0x81
 8017d14:	b280      	uxth	r0, r0
 8017d16:	f004 fab9 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 8017d1a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017d1e:	4621      	mov	r1, r4
 8017d20:	2281      	movs	r2, #129	; 0x81
 8017d22:	b280      	uxth	r0, r0
 8017d24:	f004 fab2 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 8017d28:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8017d2c:	4621      	mov	r1, r4
 8017d2e:	22ba      	movs	r2, #186	; 0xba
 8017d30:	b280      	uxth	r0, r0
 8017d32:	f004 faab 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 8017d36:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017d3a:	4621      	mov	r1, r4
 8017d3c:	22b8      	movs	r2, #184	; 0xb8
 8017d3e:	b280      	uxth	r0, r0
 8017d40:	f004 faa4 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8017d44:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8017d48:	4621      	mov	r1, r4
 8017d4a:	22b9      	movs	r2, #185	; 0xb9
 8017d4c:	b280      	uxth	r0, r0
}
 8017d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8017d52:	f004 ba9b 	b.w	801c28c <TFT_DrawCharRus>
 8017d56:	bf00      	nop
 8017d58:	200001d0 	.word	0x200001d0
 8017d5c:	200001d8 	.word	0x200001d8

08017d60 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017d64:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017d68:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017d6a:	f004 fa83 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d6e:	2063      	movs	r0, #99	; 0x63
 8017d70:	f004 fa86 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017d74:	4849      	ldr	r0, [pc, #292]	; (8017e9c <GUI_TextRu_Info+0x13c>)
 8017d76:	f004 fa77 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 8017d7a:	4621      	mov	r1, r4
 8017d7c:	2298      	movs	r2, #152	; 0x98
 8017d7e:	4628      	mov	r0, r5
 8017d80:	f004 fa84 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017d84:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017d86:	4846      	ldr	r0, [pc, #280]	; (8017ea0 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017d88:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8017d8a:	f004 fa6d 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017d8e:	f105 000f 	add.w	r0, r5, #15
 8017d92:	4621      	mov	r1, r4
 8017d94:	22bd      	movs	r2, #189	; 0xbd
 8017d96:	b280      	uxth	r0, r0
 8017d98:	f004 fa78 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 8017d9c:	f105 001c 	add.w	r0, r5, #28
 8017da0:	4621      	mov	r1, r4
 8017da2:	2284      	movs	r2, #132	; 0x84
 8017da4:	b280      	uxth	r0, r0
 8017da6:	f004 fa71 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 8017daa:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017dae:	4621      	mov	r1, r4
 8017db0:	22be      	movs	r2, #190	; 0xbe
 8017db2:	b280      	uxth	r0, r0
 8017db4:	f004 fa6a 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 8017db8:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8017dbc:	4621      	mov	r1, r4
 8017dbe:	2280      	movs	r2, #128	; 0x80
 8017dc0:	b280      	uxth	r0, r0
 8017dc2:	f004 fa63 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 8017dc6:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8017dca:	4621      	mov	r1, r4
 8017dcc:	22bc      	movs	r2, #188	; 0xbc
 8017dce:	b280      	uxth	r0, r0
 8017dd0:	f004 fa5c 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 8017dd4:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 8017dd8:	4621      	mov	r1, r4
 8017dda:	22b0      	movs	r2, #176	; 0xb0
 8017ddc:	b280      	uxth	r0, r0
 8017dde:	f004 fa55 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 8017de2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017de6:	4621      	mov	r1, r4
 8017de8:	2286      	movs	r2, #134	; 0x86
 8017dea:	b280      	uxth	r0, r0
 8017dec:	f004 fa4e 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 8017df0:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8017df4:	4621      	mov	r1, r4
 8017df6:	22b8      	movs	r2, #184	; 0xb8
 8017df8:	b280      	uxth	r0, r0
 8017dfa:	f004 fa47 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 8017dfe:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8017e02:	4621      	mov	r1, r4
 8017e04:	228f      	movs	r2, #143	; 0x8f
 8017e06:	b280      	uxth	r0, r0
 8017e08:	f004 fa40 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 8017e0c:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8017e10:	4621      	mov	r1, r4
 8017e12:	2201      	movs	r2, #1
 8017e14:	b280      	uxth	r0, r0
 8017e16:	f004 fa39 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 8017e1a:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8017e1e:	4621      	mov	r1, r4
 8017e20:	22be      	movs	r2, #190	; 0xbe
 8017e22:	b280      	uxth	r0, r0
 8017e24:	f004 fa32 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 8017e28:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8017e2c:	4621      	mov	r1, r4
 8017e2e:	2201      	movs	r2, #1
 8017e30:	b280      	uxth	r0, r0
 8017e32:	f004 fa2b 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 8017e36:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8017e3a:	4621      	mov	r1, r4
 8017e3c:	22bf      	movs	r2, #191	; 0xbf
 8017e3e:	b280      	uxth	r0, r0
 8017e40:	f004 fa24 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 8017e44:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8017e48:	4621      	mov	r1, r4
 8017e4a:	2280      	movs	r2, #128	; 0x80
 8017e4c:	b280      	uxth	r0, r0
 8017e4e:	f004 fa1d 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 8017e52:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 8017e56:	4621      	mov	r1, r4
 8017e58:	22b8      	movs	r2, #184	; 0xb8
 8017e5a:	b280      	uxth	r0, r0
 8017e5c:	f004 fa16 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 8017e60:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8017e64:	4621      	mov	r1, r4
 8017e66:	22b1      	movs	r2, #177	; 0xb1
 8017e68:	b280      	uxth	r0, r0
 8017e6a:	f004 fa0f 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 8017e6e:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 8017e72:	4621      	mov	r1, r4
 8017e74:	22be      	movs	r2, #190	; 0xbe
 8017e76:	b280      	uxth	r0, r0
 8017e78:	f004 fa08 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 8017e7c:	f105 00de 	add.w	r0, r5, #222	; 0xde
 8017e80:	4621      	mov	r1, r4
 8017e82:	2280      	movs	r2, #128	; 0x80
 8017e84:	b280      	uxth	r0, r0
 8017e86:	f004 fa01 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8017e8a:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 8017e8e:	4621      	mov	r1, r4
 8017e90:	22b5      	movs	r2, #181	; 0xb5
 8017e92:	b280      	uxth	r0, r0
}
 8017e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8017e98:	f004 b9f8 	b.w	801c28c <TFT_DrawCharRus>
 8017e9c:	200001d0 	.word	0x200001d0
 8017ea0:	200001d8 	.word	0x200001d8

08017ea4 <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 8017ea4:	b538      	push	{r3, r4, r5, lr}
 8017ea6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017ea8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017eac:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017eae:	f004 f9e1 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017eb2:	2063      	movs	r0, #99	; 0x63
 8017eb4:	f004 f9e4 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017eb8:	4815      	ldr	r0, [pc, #84]	; (8017f10 <GUI_TextRu_Mode+0x6c>)
 8017eba:	f004 f9d5 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 8017ebe:	4621      	mov	r1, r4
 8017ec0:	22a0      	movs	r2, #160	; 0xa0
 8017ec2:	4628      	mov	r0, r5
 8017ec4:	f004 f9e2 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 8017ec8:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017eca:	4812      	ldr	r0, [pc, #72]	; (8017f14 <GUI_TextRu_Mode+0x70>)
 8017ecc:	f004 f9cc 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 8017ed0:	b2a4      	uxth	r4, r4
 8017ed2:	f105 000f 	add.w	r0, r5, #15
 8017ed6:	4621      	mov	r1, r4
 8017ed8:	22b5      	movs	r2, #181	; 0xb5
 8017eda:	b280      	uxth	r0, r0
 8017edc:	f004 f9d6 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 8017ee0:	f105 001c 	add.w	r0, r5, #28
 8017ee4:	4621      	mov	r1, r4
 8017ee6:	22b6      	movs	r2, #182	; 0xb6
 8017ee8:	b280      	uxth	r0, r0
 8017eea:	f004 f9cf 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 8017eee:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017ef2:	4621      	mov	r1, r4
 8017ef4:	22b8      	movs	r2, #184	; 0xb8
 8017ef6:	b280      	uxth	r0, r0
 8017ef8:	f004 f9c8 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 8017efc:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8017f00:	4621      	mov	r1, r4
 8017f02:	22bc      	movs	r2, #188	; 0xbc
 8017f04:	b280      	uxth	r0, r0
}
 8017f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 8017f0a:	f004 b9bf 	b.w	801c28c <TFT_DrawCharRus>
 8017f0e:	bf00      	nop
 8017f10:	200001d0 	.word	0x200001d0
 8017f14:	200001d8 	.word	0x200001d8

08017f18 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 8017f18:	b538      	push	{r3, r4, r5, lr}
 8017f1a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017f1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017f20:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017f22:	f004 f9a7 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017f26:	2063      	movs	r0, #99	; 0x63
 8017f28:	f004 f9aa 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017f2c:	482d      	ldr	r0, [pc, #180]	; (8017fe4 <GUI_TextRu_Illuminance+0xcc>)
 8017f2e:	f004 f99b 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 8017f32:	4621      	mov	r1, r4
 8017f34:	229e      	movs	r2, #158	; 0x9e
 8017f36:	4628      	mov	r0, r5
 8017f38:	f004 f9a8 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8017f3c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017f3e:	482a      	ldr	r0, [pc, #168]	; (8017fe8 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8017f40:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8017f42:	f004 f991 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8017f46:	f105 000f 	add.w	r0, r5, #15
 8017f4a:	4621      	mov	r1, r4
 8017f4c:	2281      	movs	r2, #129	; 0x81
 8017f4e:	b280      	uxth	r0, r0
 8017f50:	f004 f99c 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 8017f54:	f105 001a 	add.w	r0, r5, #26
 8017f58:	4621      	mov	r1, r4
 8017f5a:	22b2      	movs	r2, #178	; 0xb2
 8017f5c:	b280      	uxth	r0, r0
 8017f5e:	f004 f995 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 8017f62:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8017f66:	4621      	mov	r1, r4
 8017f68:	22b5      	movs	r2, #181	; 0xb5
 8017f6a:	b280      	uxth	r0, r0
 8017f6c:	f004 f98e 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 8017f70:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8017f74:	4621      	mov	r1, r4
 8017f76:	2289      	movs	r2, #137	; 0x89
 8017f78:	b280      	uxth	r0, r0
 8017f7a:	f004 f987 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 8017f7e:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8017f82:	4621      	mov	r1, r4
 8017f84:	22b5      	movs	r2, #181	; 0xb5
 8017f86:	b280      	uxth	r0, r0
 8017f88:	f004 f980 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 8017f8c:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8017f90:	4621      	mov	r1, r4
 8017f92:	22bd      	movs	r2, #189	; 0xbd
 8017f94:	b280      	uxth	r0, r0
 8017f96:	f004 f979 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 8017f9a:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8017f9e:	4621      	mov	r1, r4
 8017fa0:	22bd      	movs	r2, #189	; 0xbd
 8017fa2:	b280      	uxth	r0, r0
 8017fa4:	f004 f972 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8017fa8:	f105 0061 	add.w	r0, r5, #97	; 0x61
 8017fac:	4621      	mov	r1, r4
 8017fae:	22be      	movs	r2, #190	; 0xbe
 8017fb0:	b280      	uxth	r0, r0
 8017fb2:	f004 f96b 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8017fb6:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8017fba:	4621      	mov	r1, r4
 8017fbc:	2281      	movs	r2, #129	; 0x81
 8017fbe:	b280      	uxth	r0, r0
 8017fc0:	f004 f964 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 8017fc4:	f105 0076 	add.w	r0, r5, #118	; 0x76
 8017fc8:	4621      	mov	r1, r4
 8017fca:	2282      	movs	r2, #130	; 0x82
 8017fcc:	b280      	uxth	r0, r0
 8017fce:	f004 f95d 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 8017fd2:	f105 0082 	add.w	r0, r5, #130	; 0x82
 8017fd6:	4621      	mov	r1, r4
 8017fd8:	228c      	movs	r2, #140	; 0x8c
 8017fda:	b280      	uxth	r0, r0
}
 8017fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 8017fe0:	f004 b954 	b.w	801c28c <TFT_DrawCharRus>
 8017fe4:	200001d0 	.word	0x200001d0
 8017fe8:	200001d8 	.word	0x200001d8

08017fec <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 8017fec:	b538      	push	{r3, r4, r5, lr}
 8017fee:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017ff0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017ff4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017ff6:	f004 f93d 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017ffa:	2063      	movs	r0, #99	; 0x63
 8017ffc:	f004 f940 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018000:	480b      	ldr	r0, [pc, #44]	; (8018030 <GUI_TextRu_PPF+0x44>)
 8018002:	f004 f931 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 8018006:	4629      	mov	r1, r5
 8018008:	4620      	mov	r0, r4
 801800a:	22a4      	movs	r2, #164	; 0xa4
 801800c:	f004 f93e 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018010:	f104 0011 	add.w	r0, r4, #17
 8018014:	4629      	mov	r1, r5
 8018016:	2290      	movs	r2, #144	; 0x90
 8018018:	b280      	uxth	r0, r0
 801801a:	f004 f937 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801801e:	f104 0020 	add.w	r0, r4, #32
 8018022:	4629      	mov	r1, r5
 8018024:	22a0      	movs	r2, #160	; 0xa0
 8018026:	b280      	uxth	r0, r0
}
 8018028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 801802c:	f004 b92e 	b.w	801c28c <TFT_DrawCharRus>
 8018030:	200001d0 	.word	0x200001d0

08018034 <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 8018034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018038:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 801803a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8018148 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 801803e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801814c <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 8018042:	4f40      	ldr	r7, [pc, #256]	; (8018144 <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 8018044:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018048:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801804a:	f004 f913 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801804e:	2063      	movs	r0, #99	; 0x63
 8018050:	f004 f916 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018054:	4648      	mov	r0, r9
 8018056:	f004 f907 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 801805a:	4629      	mov	r1, r5
 801805c:	22a1      	movs	r2, #161	; 0xa1
 801805e:	4620      	mov	r0, r4
 8018060:	f004 f914 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018064:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018066:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018068:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 801806a:	f004 f8fd 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801806e:	f104 000f 	add.w	r0, r4, #15
 8018072:	4631      	mov	r1, r6
 8018074:	22b8      	movs	r2, #184	; 0xb8
 8018076:	b280      	uxth	r0, r0
 8018078:	f004 f908 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 801807c:	f104 001b 	add.w	r0, r4, #27
 8018080:	4631      	mov	r1, r6
 8018082:	22bd      	movs	r2, #189	; 0xbd
 8018084:	b280      	uxth	r0, r0
 8018086:	f004 f901 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801808a:	4638      	mov	r0, r7
 801808c:	f004 f8ec 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 8018090:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018094:	4629      	mov	r1, r5
 8018096:	222d      	movs	r2, #45	; 0x2d
 8018098:	b280      	uxth	r0, r0
 801809a:	f004 f9af 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 801809e:	4648      	mov	r0, r9
 80180a0:	f004 f8e2 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 80180a4:	f104 0037 	add.w	r0, r4, #55	; 0x37
 80180a8:	4629      	mov	r1, r5
 80180aa:	2297      	movs	r2, #151	; 0x97
 80180ac:	b280      	uxth	r0, r0
 80180ae:	f004 f8ed 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80180b2:	4640      	mov	r0, r8
 80180b4:	f004 f8d8 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 80180b8:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80180bc:	4631      	mov	r1, r6
 80180be:	22b5      	movs	r2, #181	; 0xb5
 80180c0:	b280      	uxth	r0, r0
 80180c2:	f004 f8e3 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 80180c6:	f104 0052 	add.w	r0, r4, #82	; 0x52
 80180ca:	4631      	mov	r1, r6
 80180cc:	22bb      	movs	r2, #187	; 0xbb
 80180ce:	b280      	uxth	r0, r0
 80180d0:	f004 f8dc 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 80180d4:	4638      	mov	r0, r7
 80180d6:	f004 f8c7 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 80180da:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 80180de:	4629      	mov	r1, r5
 80180e0:	222d      	movs	r2, #45	; 0x2d
 80180e2:	b280      	uxth	r0, r0
 80180e4:	f004 f98a 	bl	801c3fc <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 80180e8:	4648      	mov	r0, r9
 80180ea:	f004 f8bd 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 80180ee:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 80180f2:	4629      	mov	r1, r5
 80180f4:	229a      	movs	r2, #154	; 0x9a
 80180f6:	b280      	uxth	r0, r0
 80180f8:	f004 f8c8 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80180fc:	4640      	mov	r0, r8
 80180fe:	f004 f8b3 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 8018102:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8018106:	4631      	mov	r1, r6
 8018108:	2280      	movs	r2, #128	; 0x80
 801810a:	b280      	uxth	r0, r0
 801810c:	f004 f8be 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018110:	4638      	mov	r0, r7
 8018112:	f004 f8a9 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 8018116:	f104 0088 	add.w	r0, r4, #136	; 0x88
 801811a:	4629      	mov	r1, r5
 801811c:	222d      	movs	r2, #45	; 0x2d
 801811e:	b280      	uxth	r0, r0
 8018120:	f004 f96c 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 8018124:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8018128:	4629      	mov	r1, r5
 801812a:	2246      	movs	r2, #70	; 0x46
 801812c:	b280      	uxth	r0, r0
 801812e:	f004 f965 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 8018132:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 8018136:	4629      	mov	r1, r5
 8018138:	2252      	movs	r2, #82	; 0x52
 801813a:	b280      	uxth	r0, r0
}
 801813c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 8018140:	f004 b95c 	b.w	801c3fc <TFT_DrawChar>
 8018144:	200001b0 	.word	0x200001b0
 8018148:	200001d0 	.word	0x200001d0
 801814c:	200001d8 	.word	0x200001d8

08018150 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 8018150:	b538      	push	{r3, r4, r5, lr}
 8018152:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018154:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018158:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801815a:	f004 f88b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801815e:	2063      	movs	r0, #99	; 0x63
 8018160:	f004 f88e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018164:	482d      	ldr	r0, [pc, #180]	; (801821c <GUI_TextRu_PPF_bands+0xcc>)
 8018166:	f004 f87f 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 801816a:	4621      	mov	r1, r4
 801816c:	4628      	mov	r0, r5
 801816e:	22a4      	movs	r2, #164	; 0xa4
 8018170:	f004 f88c 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018174:	f105 0011 	add.w	r0, r5, #17
 8018178:	4621      	mov	r1, r4
 801817a:	2290      	movs	r2, #144	; 0x90
 801817c:	b280      	uxth	r0, r0
 801817e:	f004 f885 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018182:	f105 0020 	add.w	r0, r5, #32
 8018186:	4621      	mov	r1, r4
 8018188:	22a0      	movs	r2, #160	; 0xa0
 801818a:	b280      	uxth	r0, r0
 801818c:	f004 f87e 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018190:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 8018192:	4823      	ldr	r0, [pc, #140]	; (8018220 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018194:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018196:	f004 f867 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801819a:	f105 0039 	add.w	r0, r5, #57	; 0x39
 801819e:	4621      	mov	r1, r4
 80181a0:	22b4      	movs	r2, #180	; 0xb4
 80181a2:	b280      	uxth	r0, r0
 80181a4:	f004 f872 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 80181a8:	f105 0046 	add.w	r0, r5, #70	; 0x46
 80181ac:	4621      	mov	r1, r4
 80181ae:	22b8      	movs	r2, #184	; 0xb8
 80181b0:	b280      	uxth	r0, r0
 80181b2:	f004 f86b 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 80181b6:	f105 0053 	add.w	r0, r5, #83	; 0x53
 80181ba:	4621      	mov	r1, r4
 80181bc:	22b0      	movs	r2, #176	; 0xb0
 80181be:	b280      	uxth	r0, r0
 80181c0:	f004 f864 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 80181c4:	f105 0060 	add.w	r0, r5, #96	; 0x60
 80181c8:	4621      	mov	r1, r4
 80181ca:	22bf      	movs	r2, #191	; 0xbf
 80181cc:	b280      	uxth	r0, r0
 80181ce:	f004 f85d 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 80181d2:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 80181d6:	4621      	mov	r1, r4
 80181d8:	22b0      	movs	r2, #176	; 0xb0
 80181da:	b280      	uxth	r0, r0
 80181dc:	f004 f856 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 80181e0:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 80181e4:	4621      	mov	r1, r4
 80181e6:	22b7      	movs	r2, #183	; 0xb7
 80181e8:	b280      	uxth	r0, r0
 80181ea:	f004 f84f 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 80181ee:	f105 0087 	add.w	r0, r5, #135	; 0x87
 80181f2:	4621      	mov	r1, r4
 80181f4:	22be      	movs	r2, #190	; 0xbe
 80181f6:	b280      	uxth	r0, r0
 80181f8:	f004 f848 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 80181fc:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8018200:	4621      	mov	r1, r4
 8018202:	22bd      	movs	r2, #189	; 0xbd
 8018204:	b280      	uxth	r0, r0
 8018206:	f004 f841 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801820a:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801820e:	4621      	mov	r1, r4
 8018210:	228b      	movs	r2, #139	; 0x8b
 8018212:	b280      	uxth	r0, r0
}
 8018214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018218:	f004 b838 	b.w	801c28c <TFT_DrawCharRus>
 801821c:	200001d0 	.word	0x200001d0
 8018220:	200001d8 	.word	0x200001d8

08018224 <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8018224:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018226:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8018228:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801822c:	2300      	movs	r3, #0
 801822e:	9300      	str	r3, [sp, #0]
 8018230:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018234:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8018236:	f004 f81d 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801823a:	2063      	movs	r0, #99	; 0x63
 801823c:	f004 f820 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018240:	4832      	ldr	r0, [pc, #200]	; (801830c <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 8018242:	4d33      	ldr	r5, [pc, #204]	; (8018310 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 8018244:	f004 f810 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 8018248:	229a      	movs	r2, #154	; 0x9a
 801824a:	2160      	movs	r1, #96	; 0x60
 801824c:	2046      	movs	r0, #70	; 0x46
 801824e:	f004 f81d 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018252:	4830      	ldr	r0, [pc, #192]	; (8018314 <GUI_TextRu_Info_Callibration+0xf0>)
 8018254:	f004 f808 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 8018258:	22b0      	movs	r2, #176	; 0xb0
 801825a:	2166      	movs	r1, #102	; 0x66
 801825c:	2057      	movs	r0, #87	; 0x57
 801825e:	f004 f815 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 8018262:	22bb      	movs	r2, #187	; 0xbb
 8018264:	2166      	movs	r1, #102	; 0x66
 8018266:	2064      	movs	r0, #100	; 0x64
 8018268:	f004 f810 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 801826c:	22b8      	movs	r2, #184	; 0xb8
 801826e:	2166      	movs	r1, #102	; 0x66
 8018270:	2071      	movs	r0, #113	; 0x71
 8018272:	f004 f80b 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 8018276:	22b1      	movs	r2, #177	; 0xb1
 8018278:	2166      	movs	r1, #102	; 0x66
 801827a:	207e      	movs	r0, #126	; 0x7e
 801827c:	f004 f806 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 8018280:	2280      	movs	r2, #128	; 0x80
 8018282:	2166      	movs	r1, #102	; 0x66
 8018284:	208b      	movs	r0, #139	; 0x8b
 8018286:	f004 f801 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 801828a:	22be      	movs	r2, #190	; 0xbe
 801828c:	2166      	movs	r1, #102	; 0x66
 801828e:	2098      	movs	r0, #152	; 0x98
 8018290:	f003 fffc 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 8018294:	22b2      	movs	r2, #178	; 0xb2
 8018296:	2166      	movs	r1, #102	; 0x66
 8018298:	20a5      	movs	r0, #165	; 0xa5
 801829a:	f003 fff7 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 801829e:	22ba      	movs	r2, #186	; 0xba
 80182a0:	2166      	movs	r1, #102	; 0x66
 80182a2:	20b2      	movs	r0, #178	; 0xb2
 80182a4:	f003 fff2 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 80182a8:	22b0      	movs	r2, #176	; 0xb0
 80182aa:	2166      	movs	r1, #102	; 0x66
 80182ac:	20bc      	movs	r0, #188	; 0xbc
 80182ae:	f003 ffed 	bl	801c28c <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 80182b2:	4622      	mov	r2, r4
 80182b4:	4629      	mov	r1, r5
 80182b6:	4668      	mov	r0, sp
 80182b8:	f007 fac0 	bl	801f83c <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80182bc:	4816      	ldr	r0, [pc, #88]	; (8018318 <GUI_TextRu_Info_Callibration+0xf4>)
 80182be:	f003 ffd3 	bl	801c268 <TFT_SetFont>
	buffer[2] = '.';
 80182c2:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182c4:	2303      	movs	r3, #3
 80182c6:	466a      	mov	r2, sp
 80182c8:	2182      	movs	r1, #130	; 0x82
 80182ca:	201e      	movs	r0, #30
	buffer[2] = '.';
 80182cc:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182d0:	f004 f8ec 	bl	801c4ac <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 80182d4:	4632      	mov	r2, r6
 80182d6:	4629      	mov	r1, r5
 80182d8:	4668      	mov	r0, sp
 80182da:	f007 faaf 	bl	801f83c <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182de:	2303      	movs	r3, #3
 80182e0:	466a      	mov	r2, sp
 80182e2:	2182      	movs	r1, #130	; 0x82
 80182e4:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 80182e6:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182ea:	f004 f8df 	bl	801c4ac <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 80182ee:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80182f2:	490a      	ldr	r1, [pc, #40]	; (801831c <GUI_TextRu_Info_Callibration+0xf8>)
 80182f4:	4668      	mov	r0, sp
 80182f6:	f007 faa1 	bl	801f83c <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182fa:	2303      	movs	r3, #3
 80182fc:	466a      	mov	r2, sp
 80182fe:	2182      	movs	r1, #130	; 0x82
 8018300:	209b      	movs	r0, #155	; 0x9b
 8018302:	f004 f8d3 	bl	801c4ac <TFT_DisplayString>
}
 8018306:	b002      	add	sp, #8
 8018308:	bd70      	pop	{r4, r5, r6, pc}
 801830a:	bf00      	nop
 801830c:	200001d0 	.word	0x200001d0
 8018310:	0803129c 	.word	0x0803129c
 8018314:	200001d8 	.word	0x200001d8
 8018318:	200001f0 	.word	0x200001f0
 801831c:	080312a1 	.word	0x080312a1

08018320 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 8018320:	b538      	push	{r3, r4, r5, lr}
 8018322:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018324:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018328:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801832a:	f003 ffa3 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801832e:	2063      	movs	r0, #99	; 0x63
 8018330:	f003 ffa6 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018334:	4818      	ldr	r0, [pc, #96]	; (8018398 <GUI_TextRu_WriteSD+0x78>)
 8018336:	f003 ff97 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 801833a:	4621      	mov	r1, r4
 801833c:	2297      	movs	r2, #151	; 0x97
 801833e:	4628      	mov	r0, r5
 8018340:	f003 ffa4 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018344:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018346:	4815      	ldr	r0, [pc, #84]	; (801839c <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018348:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801834a:	f003 ff8d 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801834e:	f105 000f 	add.w	r0, r5, #15
 8018352:	4621      	mov	r1, r4
 8018354:	22b0      	movs	r2, #176	; 0xb0
 8018356:	b280      	uxth	r0, r0
 8018358:	f003 ff98 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 801835c:	f105 001c 	add.w	r0, r5, #28
 8018360:	4621      	mov	r1, r4
 8018362:	22bf      	movs	r2, #191	; 0xbf
 8018364:	b280      	uxth	r0, r0
 8018366:	f003 ff91 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801836a:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801836e:	4621      	mov	r1, r4
 8018370:	22b8      	movs	r2, #184	; 0xb8
 8018372:	b280      	uxth	r0, r0
 8018374:	f003 ff8a 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 8018378:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801837c:	4621      	mov	r1, r4
 801837e:	2281      	movs	r2, #129	; 0x81
 8018380:	b280      	uxth	r0, r0
 8018382:	f003 ff83 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 8018386:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801838a:	4621      	mov	r1, r4
 801838c:	228c      	movs	r2, #140	; 0x8c
 801838e:	b280      	uxth	r0, r0
}
 8018390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 8018394:	f003 bf7a 	b.w	801c28c <TFT_DrawCharRus>
 8018398:	200001d0 	.word	0x200001d0
 801839c:	200001d8 	.word	0x200001d8

080183a0 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 80183a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80183a2:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 80183a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80183a8:	2300      	movs	r3, #0
 80183aa:	9300      	str	r3, [sp, #0]
 80183ac:	f88d 3004 	strb.w	r3, [sp, #4]
{
 80183b0:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 80183b2:	f003 ff5f 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80183b6:	2063      	movs	r0, #99	; 0x63
 80183b8:	f003 ff62 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80183bc:	4830      	ldr	r0, [pc, #192]	; (8018480 <GUI_TextRu_Info_Serial+0xe0>)
 80183be:	f003 ff53 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 80183c2:	22a1      	movs	r2, #161	; 0xa1
 80183c4:	21c4      	movs	r1, #196	; 0xc4
 80183c6:	203c      	movs	r0, #60	; 0x3c
 80183c8:	f003 ff60 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80183cc:	482d      	ldr	r0, [pc, #180]	; (8018484 <GUI_TextRu_Info_Serial+0xe4>)
 80183ce:	f003 ff4b 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 80183d2:	22b5      	movs	r2, #181	; 0xb5
 80183d4:	21ca      	movs	r1, #202	; 0xca
 80183d6:	204d      	movs	r0, #77	; 0x4d
 80183d8:	f003 ff58 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 80183dc:	2280      	movs	r2, #128	; 0x80
 80183de:	21ca      	movs	r1, #202	; 0xca
 80183e0:	205a      	movs	r0, #90	; 0x5a
 80183e2:	f003 ff53 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 80183e6:	22b8      	movs	r2, #184	; 0xb8
 80183e8:	21ca      	movs	r1, #202	; 0xca
 80183ea:	2067      	movs	r0, #103	; 0x67
 80183ec:	f003 ff4e 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 80183f0:	22b9      	movs	r2, #185	; 0xb9
 80183f2:	21ca      	movs	r1, #202	; 0xca
 80183f4:	2074      	movs	r0, #116	; 0x74
 80183f6:	f003 ff49 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 80183fa:	22bd      	movs	r2, #189	; 0xbd
 80183fc:	21ca      	movs	r1, #202	; 0xca
 80183fe:	2081      	movs	r0, #129	; 0x81
 8018400:	f003 ff44 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 8018404:	228b      	movs	r2, #139	; 0x8b
 8018406:	21ca      	movs	r1, #202	; 0xca
 8018408:	208e      	movs	r0, #142	; 0x8e
 801840a:	f003 ff3f 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 801840e:	22b9      	movs	r2, #185	; 0xb9
 8018410:	21ca      	movs	r1, #202	; 0xca
 8018412:	209b      	movs	r0, #155	; 0x9b
 8018414:	f003 ff3a 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 8018418:	22bd      	movs	r2, #189	; 0xbd
 801841a:	21ca      	movs	r1, #202	; 0xca
 801841c:	20af      	movs	r0, #175	; 0xaf
 801841e:	f003 ff35 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 8018422:	22be      	movs	r2, #190	; 0xbe
 8018424:	21ca      	movs	r1, #202	; 0xca
 8018426:	20bc      	movs	r0, #188	; 0xbc
 8018428:	f003 ff30 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 801842c:	22bc      	movs	r2, #188	; 0xbc
 801842e:	21ca      	movs	r1, #202	; 0xca
 8018430:	20c9      	movs	r0, #201	; 0xc9
 8018432:	f003 ff2b 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 8018436:	22b5      	movs	r2, #181	; 0xb5
 8018438:	21ca      	movs	r1, #202	; 0xca
 801843a:	20d6      	movs	r0, #214	; 0xd6
 801843c:	f003 ff26 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 8018440:	2280      	movs	r2, #128	; 0x80
 8018442:	21ca      	movs	r1, #202	; 0xca
 8018444:	20e1      	movs	r0, #225	; 0xe1
 8018446:	f003 ff21 	bl	801c28c <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 801844a:	462a      	mov	r2, r5
 801844c:	490e      	ldr	r1, [pc, #56]	; (8018488 <GUI_TextRu_Info_Serial+0xe8>)
 801844e:	4668      	mov	r0, sp
 8018450:	f007 f9f4 	bl	801f83c <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8018454:	480d      	ldr	r0, [pc, #52]	; (801848c <GUI_TextRu_Info_Serial+0xec>)
 8018456:	f003 ff07 	bl	801c268 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801845a:	2303      	movs	r3, #3
 801845c:	466a      	mov	r2, sp
 801845e:	21e6      	movs	r1, #230	; 0xe6
 8018460:	2028      	movs	r0, #40	; 0x28
 8018462:	f004 f823 	bl	801c4ac <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 8018466:	4622      	mov	r2, r4
 8018468:	4909      	ldr	r1, [pc, #36]	; (8018490 <GUI_TextRu_Info_Serial+0xf0>)
 801846a:	4668      	mov	r0, sp
 801846c:	f007 f9e6 	bl	801f83c <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018470:	2303      	movs	r3, #3
 8018472:	466a      	mov	r2, sp
 8018474:	21e6      	movs	r1, #230	; 0xe6
 8018476:	2087      	movs	r0, #135	; 0x87
 8018478:	f004 f818 	bl	801c4ac <TFT_DisplayString>
}
 801847c:	b003      	add	sp, #12
 801847e:	bd30      	pop	{r4, r5, pc}
 8018480:	200001d0 	.word	0x200001d0
 8018484:	200001d8 	.word	0x200001d8
 8018488:	080312a5 	.word	0x080312a5
 801848c:	200001f0 	.word	0x200001f0
 8018490:	080312a8 	.word	0x080312a8

08018494 <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8018494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 8018496:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8018498:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801849c:	9302      	str	r3, [sp, #8]
 801849e:	f88d 300c 	strb.w	r3, [sp, #12]
{
 80184a2:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 80184a6:	f003 fee5 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80184aa:	2063      	movs	r0, #99	; 0x63
 80184ac:	f003 fee8 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80184b0:	481b      	ldr	r0, [pc, #108]	; (8018520 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 80184b2:	4c1c      	ldr	r4, [pc, #112]	; (8018524 <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 80184b4:	f003 fed8 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 80184b8:	229f      	movs	r2, #159	; 0x9f
 80184ba:	f240 115d 	movw	r1, #349	; 0x15d
 80184be:	2078      	movs	r0, #120	; 0x78
 80184c0:	f003 fee4 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 80184c4:	229e      	movs	r2, #158	; 0x9e
 80184c6:	f240 115d 	movw	r1, #349	; 0x15d
 80184ca:	208a      	movs	r0, #138	; 0x8a
 80184cc:	f003 fede 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 80184d0:	4620      	mov	r0, r4
 80184d2:	f003 fec9 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 80184d6:	222e      	movs	r2, #46	; 0x2e
 80184d8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80184dc:	20ac      	movs	r0, #172	; 0xac
 80184de:	f003 ff8d 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 80184e2:	2276      	movs	r2, #118	; 0x76
 80184e4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80184e8:	20a2      	movs	r0, #162	; 0xa2
 80184ea:	f003 ff87 	bl	801c3fc <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 80184ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80184f2:	ee10 0a10 	vmov	r0, s0
 80184f6:	f7e8 f83f 	bl	8000578 <__aeabi_f2d>
 80184fa:	4602      	mov	r2, r0
 80184fc:	460b      	mov	r3, r1
 80184fe:	a802      	add	r0, sp, #8
 8018500:	4909      	ldr	r1, [pc, #36]	; (8018528 <GUI_TextRu_Info_Ver+0x94>)
 8018502:	f007 f99b 	bl	801f83c <sprintf>
	TFT_SetFont(&Font16);
 8018506:	4620      	mov	r0, r4
 8018508:	f003 feae 	bl	801c268 <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 801850c:	2303      	movs	r3, #3
 801850e:	aa02      	add	r2, sp, #8
 8018510:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018514:	20b9      	movs	r0, #185	; 0xb9
 8018516:	f003 ffc9 	bl	801c4ac <TFT_DisplayString>
}
 801851a:	b004      	add	sp, #16
 801851c:	bd10      	pop	{r4, pc}
 801851e:	bf00      	nop
 8018520:	200001d0 	.word	0x200001d0
 8018524:	200001a8 	.word	0x200001a8
 8018528:	0803128d 	.word	0x0803128d

0801852c <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 801852c:	b538      	push	{r3, r4, r5, lr}
 801852e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018530:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018534:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018536:	f003 fe9d 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801853a:	2063      	movs	r0, #99	; 0x63
 801853c:	f003 fea0 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018540:	481e      	ldr	r0, [pc, #120]	; (80185bc <GUI_TextRu_CCT+0x90>)
 8018542:	f003 fe91 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 8018546:	4629      	mov	r1, r5
 8018548:	4620      	mov	r0, r4
 801854a:	229a      	movs	r2, #154	; 0x9a
 801854c:	f003 fe9e 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 8018550:	f104 0011 	add.w	r0, r4, #17
 8018554:	4629      	mov	r1, r5
 8018556:	22a6      	movs	r2, #166	; 0xa6
 8018558:	b280      	uxth	r0, r0
 801855a:	f003 fe97 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 801855e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8018562:	4629      	mov	r1, r5
 8018564:	22a2      	movs	r2, #162	; 0xa2
 8018566:	b280      	uxth	r0, r0
 8018568:	f003 fe90 	bl	801c28c <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 801856c:	4814      	ldr	r0, [pc, #80]	; (80185c0 <GUI_TextRu_CCT+0x94>)
 801856e:	f003 fe7b 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 8018572:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8018576:	4629      	mov	r1, r5
 8018578:	2228      	movs	r2, #40	; 0x28
 801857a:	b280      	uxth	r0, r0
 801857c:	f003 ff3e 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 8018580:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018584:	4629      	mov	r1, r5
 8018586:	2229      	movs	r2, #41	; 0x29
 8018588:	b280      	uxth	r0, r0
 801858a:	f003 ff37 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 801858e:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 8018592:	4629      	mov	r1, r5
 8018594:	2243      	movs	r2, #67	; 0x43
 8018596:	b280      	uxth	r0, r0
 8018598:	f003 ff30 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 801859c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80185a0:	4629      	mov	r1, r5
 80185a2:	2243      	movs	r2, #67	; 0x43
 80185a4:	b280      	uxth	r0, r0
 80185a6:	f003 ff29 	bl	801c3fc <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 80185aa:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 80185ae:	4629      	mov	r1, r5
 80185b0:	2254      	movs	r2, #84	; 0x54
 80185b2:	b280      	uxth	r0, r0
}
 80185b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 80185b8:	f003 bf20 	b.w	801c3fc <TFT_DrawChar>
 80185bc:	200001d0 	.word	0x200001d0
 80185c0:	200001b0 	.word	0x200001b0

080185c4 <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 80185c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80185c8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80185ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80185ce:	4616      	mov	r6, r2
 80185d0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80185d2:	f003 fe4f 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80185d6:	2063      	movs	r0, #99	; 0x63
 80185d8:	f003 fe52 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80185dc:	482f      	ldr	r0, [pc, #188]	; (801869c <GUI_TextRu_umol+0xd8>)
 80185de:	f003 fe43 	bl	801c268 <TFT_SetFont>
	
	if(deg){
 80185e2:	2e00      	cmp	r6, #0
 80185e4:	d057      	beq.n	8018696 <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 80185e6:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 80185e8:	4629      	mov	r1, r5
 80185ea:	4620      	mov	r0, r4
 80185ec:	f003 fe4e 	bl	801c28c <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 80185f0:	f104 0008 	add.w	r0, r4, #8
 80185f4:	4629      	mov	r1, r5
 80185f6:	22bc      	movs	r2, #188	; 0xbc
 80185f8:	b280      	uxth	r0, r0
 80185fa:	f003 fe47 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 80185fe:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 8018602:	f104 0010 	add.w	r0, r4, #16
 8018606:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 8018608:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 801860a:	22be      	movs	r2, #190	; 0xbe
 801860c:	b280      	uxth	r0, r0
 801860e:	f003 fe3d 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 8018612:	4629      	mov	r1, r5
 8018614:	4638      	mov	r0, r7
 8018616:	22bb      	movs	r2, #187	; 0xbb
 8018618:	f003 fe38 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 801861c:	f104 001c 	add.w	r0, r4, #28
 8018620:	4629      	mov	r1, r5
 8018622:	228c      	movs	r2, #140	; 0x8c
 8018624:	b280      	uxth	r0, r0
 8018626:	f003 fe31 	bl	801c28c <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801862a:	f105 030a 	add.w	r3, r5, #10
 801862e:	b29b      	uxth	r3, r3
 8018630:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018634:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8018638:	4619      	mov	r1, r3
 801863a:	4620      	mov	r0, r4
 801863c:	f8cd 8000 	str.w	r8, [sp]
 8018640:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 8018642:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018646:	f003 fb89 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801864a:	b2b6      	uxth	r6, r6
 801864c:	f104 000d 	add.w	r0, r4, #13
 8018650:	4631      	mov	r1, r6
 8018652:	2291      	movs	r2, #145	; 0x91
 8018654:	b280      	uxth	r0, r0
 8018656:	f003 fe19 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 801865a:	1d60      	adds	r0, r4, #5
 801865c:	4631      	mov	r1, r6
 801865e:	22bc      	movs	r2, #188	; 0xbc
 8018660:	b280      	uxth	r0, r0
 8018662:	f003 fe13 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8018666:	f105 030f 	add.w	r3, r5, #15
 801866a:	f104 0214 	add.w	r2, r4, #20
 801866e:	f105 010e 	add.w	r1, r5, #14
 8018672:	f104 0013 	add.w	r0, r4, #19
 8018676:	f8cd 8000 	str.w	r8, [sp]
 801867a:	b29b      	uxth	r3, r3
 801867c:	b292      	uxth	r2, r2
 801867e:	b289      	uxth	r1, r1
 8018680:	b280      	uxth	r0, r0
 8018682:	f003 fbe0 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 8018686:	2281      	movs	r2, #129	; 0x81
 8018688:	4631      	mov	r1, r6
 801868a:	4638      	mov	r0, r7
}
 801868c:	b002      	add	sp, #8
 801868e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 8018692:	f003 bdfb 	b.w	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 8018696:	2290      	movs	r2, #144	; 0x90
 8018698:	e7a6      	b.n	80185e8 <GUI_TextRu_umol+0x24>
 801869a:	bf00      	nop
 801869c:	200001a0 	.word	0x200001a0

080186a0 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 80186a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80186a4:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80186a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80186aa:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80186ac:	f003 fde2 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80186b0:	2063      	movs	r0, #99	; 0x63
 80186b2:	f003 fde5 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80186b6:	483c      	ldr	r0, [pc, #240]	; (80187a8 <GUI_TextRu_umol_sr+0x108>)
 80186b8:	f003 fdd6 	bl	801c268 <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 80186bc:	1de0      	adds	r0, r4, #7
 80186be:	4629      	mov	r1, r5
 80186c0:	2290      	movs	r2, #144	; 0x90
 80186c2:	b280      	uxth	r0, r0
 80186c4:	f003 fde2 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 80186c8:	f104 000f 	add.w	r0, r4, #15
 80186cc:	4629      	mov	r1, r5
 80186ce:	22bc      	movs	r2, #188	; 0xbc
 80186d0:	b280      	uxth	r0, r0
 80186d2:	f003 fddb 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 80186d6:	f104 0017 	add.w	r0, r4, #23
 80186da:	4629      	mov	r1, r5
 80186dc:	22be      	movs	r2, #190	; 0xbe
 80186de:	b280      	uxth	r0, r0
 80186e0:	f003 fdd4 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 80186e4:	f104 001d 	add.w	r0, r4, #29
 80186e8:	4629      	mov	r1, r5
 80186ea:	22bb      	movs	r2, #187	; 0xbb
 80186ec:	b280      	uxth	r0, r0
 80186ee:	f003 fdcd 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 80186f2:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80186f6:	4629      	mov	r1, r5
 80186f8:	228c      	movs	r2, #140	; 0x8c
 80186fa:	b280      	uxth	r0, r0
 80186fc:	f003 fdc6 	bl	801c28c <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8018700:	f105 030a 	add.w	r3, r5, #10
 8018704:	b29b      	uxth	r3, r3
 8018706:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801870a:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801870e:	1ce0      	adds	r0, r4, #3
 8018710:	4619      	mov	r1, r3
 8018712:	f8cd 8000 	str.w	r8, [sp]
 8018716:	b292      	uxth	r2, r2
 8018718:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801871a:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801871e:	f003 fb1d 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 8018722:	b2b6      	uxth	r6, r6
 8018724:	f104 000d 	add.w	r0, r4, #13
 8018728:	4631      	mov	r1, r6
 801872a:	2291      	movs	r2, #145	; 0x91
 801872c:	b280      	uxth	r0, r0
 801872e:	f003 fdad 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8018732:	1d60      	adds	r0, r4, #5
 8018734:	4631      	mov	r1, r6
 8018736:	22bc      	movs	r2, #188	; 0xbc
 8018738:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801873a:	f105 0710 	add.w	r7, r5, #16
 801873e:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8018740:	f003 fda4 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 8018744:	b2bf      	uxth	r7, r7
 8018746:	b2ad      	uxth	r5, r5
 8018748:	f104 0214 	add.w	r2, r4, #20
 801874c:	f104 0013 	add.w	r0, r4, #19
 8018750:	462b      	mov	r3, r5
 8018752:	4639      	mov	r1, r7
 8018754:	f8cd 8000 	str.w	r8, [sp]
 8018758:	b292      	uxth	r2, r2
 801875a:	b280      	uxth	r0, r0
 801875c:	f003 fb73 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 8018760:	f104 0016 	add.w	r0, r4, #22
 8018764:	4631      	mov	r1, r6
 8018766:	2281      	movs	r2, #129	; 0x81
 8018768:	b280      	uxth	r0, r0
 801876a:	f003 fd8f 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 801876e:	f104 021f 	add.w	r2, r4, #31
 8018772:	f104 001e 	add.w	r0, r4, #30
 8018776:	462b      	mov	r3, r5
 8018778:	4639      	mov	r1, r7
 801877a:	f8cd 8000 	str.w	r8, [sp]
 801877e:	b292      	uxth	r2, r2
 8018780:	b280      	uxth	r0, r0
 8018782:	f003 fb60 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 8018786:	f104 0020 	add.w	r0, r4, #32
 801878a:	4631      	mov	r1, r6
 801878c:	2281      	movs	r2, #129	; 0x81
 801878e:	b280      	uxth	r0, r0
 8018790:	f003 fd7c 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 8018794:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8018798:	2280      	movs	r2, #128	; 0x80
 801879a:	4631      	mov	r1, r6
 801879c:	b280      	uxth	r0, r0
	
}
 801879e:	b002      	add	sp, #8
 80187a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 80187a4:	f003 bd72 	b.w	801c28c <TFT_DrawCharRus>
 80187a8:	200001a0 	.word	0x200001a0

080187ac <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 80187ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187ae:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80187b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80187b4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80187b6:	f003 fd5d 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80187ba:	2063      	movs	r0, #99	; 0x63
 80187bc:	f003 fd60 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 80187c0:	4819      	ldr	r0, [pc, #100]	; (8018828 <GUI_TextRu_W_m2+0x7c>)
 80187c2:	f003 fd51 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+3, Y, 'В'-17);
 80187c6:	1ce8      	adds	r0, r5, #3
 80187c8:	4621      	mov	r1, r4
 80187ca:	2281      	movs	r2, #129	; 0x81
 80187cc:	b280      	uxth	r0, r0
 80187ce:	f003 fd5d 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 80187d2:	4816      	ldr	r0, [pc, #88]	; (801882c <GUI_TextRu_W_m2+0x80>)
 80187d4:	f003 fd48 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+13, Y+2, 'т');
 80187d8:	1ca1      	adds	r1, r4, #2
 80187da:	f105 000d 	add.w	r0, r5, #13
 80187de:	2282      	movs	r2, #130	; 0x82
 80187e0:	b289      	uxth	r1, r1
 80187e2:	b280      	uxth	r0, r0
 80187e4:	f003 fd52 	bl	801c28c <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80187e8:	f104 030a 	add.w	r3, r4, #10
 80187ec:	b29b      	uxth	r3, r3
 80187ee:	f105 0214 	add.w	r2, r5, #20
 80187f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80187f6:	9100      	str	r1, [sp, #0]
 80187f8:	4628      	mov	r0, r5
 80187fa:	4619      	mov	r1, r3
 80187fc:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80187fe:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8018800:	f003 faac 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 8018804:	b2a4      	uxth	r4, r4
 8018806:	f105 000c 	add.w	r0, r5, #12
 801880a:	4621      	mov	r1, r4
 801880c:	2291      	movs	r2, #145	; 0x91
 801880e:	b280      	uxth	r0, r0
 8018810:	f003 fd3c 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018814:	1d28      	adds	r0, r5, #4
 8018816:	22bc      	movs	r2, #188	; 0xbc
 8018818:	4621      	mov	r1, r4
 801881a:	b280      	uxth	r0, r0
}
 801881c:	b003      	add	sp, #12
 801881e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018822:	f003 bd33 	b.w	801c28c <TFT_DrawCharRus>
 8018826:	bf00      	nop
 8018828:	20000198 	.word	0x20000198
 801882c:	200001a0 	.word	0x200001a0

08018830 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 8018830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018834:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018836:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801883a:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801883c:	f003 fd1a 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018840:	2063      	movs	r0, #99	; 0x63
 8018842:	f003 fd1d 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 8018846:	4829      	ldr	r0, [pc, #164]	; (80188ec <GUI_TextRu_W_m2_sr+0xbc>)
 8018848:	f003 fd0e 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 801884c:	f104 0008 	add.w	r0, r4, #8
 8018850:	4629      	mov	r1, r5
 8018852:	2281      	movs	r2, #129	; 0x81
 8018854:	b280      	uxth	r0, r0
 8018856:	f003 fd19 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 801885a:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 801885e:	4824      	ldr	r0, [pc, #144]	; (80188f0 <GUI_TextRu_W_m2_sr+0xc0>)
 8018860:	f003 fd02 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 8018864:	b2bf      	uxth	r7, r7
 8018866:	1ca9      	adds	r1, r5, #2
 8018868:	4638      	mov	r0, r7
 801886a:	2282      	movs	r2, #130	; 0x82
 801886c:	b289      	uxth	r1, r1
 801886e:	f003 fd0d 	bl	801c28c <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018872:	f105 030a 	add.w	r3, r5, #10
 8018876:	b29b      	uxth	r3, r3
 8018878:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801887c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8018880:	4619      	mov	r1, r3
 8018882:	4620      	mov	r0, r4
 8018884:	f8cd 8000 	str.w	r8, [sp]
 8018888:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801888a:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801888e:	f003 fa65 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 8018892:	b2b6      	uxth	r6, r6
 8018894:	f104 000a 	add.w	r0, r4, #10
 8018898:	4631      	mov	r1, r6
 801889a:	2291      	movs	r2, #145	; 0x91
 801889c:	b280      	uxth	r0, r0
 801889e:	f003 fcf5 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 80188a2:	1ca0      	adds	r0, r4, #2
 80188a4:	4631      	mov	r1, r6
 80188a6:	22bc      	movs	r2, #188	; 0xbc
 80188a8:	b280      	uxth	r0, r0
 80188aa:	f003 fcef 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 80188ae:	f105 030f 	add.w	r3, r5, #15
 80188b2:	f105 0110 	add.w	r1, r5, #16
 80188b6:	f104 0011 	add.w	r0, r4, #17
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	463a      	mov	r2, r7
 80188be:	f8cd 8000 	str.w	r8, [sp]
 80188c2:	b289      	uxth	r1, r1
 80188c4:	b280      	uxth	r0, r0
 80188c6:	f003 fabe 	bl	801be46 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 80188ca:	f104 0015 	add.w	r0, r4, #21
 80188ce:	4631      	mov	r1, r6
 80188d0:	2281      	movs	r2, #129	; 0x81
 80188d2:	b280      	uxth	r0, r0
 80188d4:	f003 fcda 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 80188d8:	f104 001c 	add.w	r0, r4, #28
 80188dc:	2280      	movs	r2, #128	; 0x80
 80188de:	4631      	mov	r1, r6
 80188e0:	b280      	uxth	r0, r0
}
 80188e2:	b002      	add	sp, #8
 80188e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 80188e8:	f003 bcd0 	b.w	801c28c <TFT_DrawCharRus>
 80188ec:	20000198 	.word	0x20000198
 80188f0:	200001a0 	.word	0x200001a0

080188f4 <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 80188f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80188f8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80188fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80188fe:	460e      	mov	r6, r1
 8018900:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 8018902:	f003 fcb7 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018906:	2063      	movs	r0, #99	; 0x63
 8018908:	f003 fcba 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801890c:	482f      	ldr	r0, [pc, #188]	; (80189cc <GUI_TextRu_Cd_m2+0xd8>)
 801890e:	f003 fcab 	bl	801c268 <TFT_SetFont>
 8018912:	f104 0008 	add.w	r0, r4, #8
 8018916:	f104 0810 	add.w	r8, r4, #16
 801891a:	f106 070a 	add.w	r7, r6, #10
 801891e:	f104 0906 	add.w	r9, r4, #6
 8018922:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 8018926:	22ba      	movs	r2, #186	; 0xba
 8018928:	4631      	mov	r1, r6
 801892a:	b280      	uxth	r0, r0
	if(deg){
 801892c:	f1ba 0f00 	cmp.w	sl, #0
 8018930:	d02c      	beq.n	801898c <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 8018932:	f003 fcab 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 8018936:	22ba      	movs	r2, #186	; 0xba
 8018938:	4631      	mov	r1, r6
 801893a:	fa1f f088 	uxth.w	r0, r8
 801893e:	f003 fca5 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 8018942:	f104 0018 	add.w	r0, r4, #24
 8018946:	22b4      	movs	r2, #180	; 0xb4
 8018948:	4631      	mov	r1, r6
 801894a:	b280      	uxth	r0, r0
 801894c:	f003 fc9e 	bl	801c28c <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 8018950:	b2bb      	uxth	r3, r7
 8018952:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018956:	f104 021f 	add.w	r2, r4, #31
 801895a:	9100      	str	r1, [sp, #0]
 801895c:	b292      	uxth	r2, r2
 801895e:	4619      	mov	r1, r3
 8018960:	fa1f f089 	uxth.w	r0, r9
 8018964:	f003 f9fa 	bl	801bd5c <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 8018968:	b2ad      	uxth	r5, r5
 801896a:	f104 0014 	add.w	r0, r4, #20
 801896e:	b280      	uxth	r0, r0
 8018970:	2291      	movs	r2, #145	; 0x91
 8018972:	4629      	mov	r1, r5
 8018974:	f003 fc8a 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 8018978:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801897c:	22bc      	movs	r2, #188	; 0xbc
 801897e:	4629      	mov	r1, r5
 8018980:	b280      	uxth	r0, r0
		
}
 8018982:	b002      	add	sp, #8
 8018984:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8018988:	f003 bc80 	b.w	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 801898c:	f003 fc7e 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 8018990:	22b4      	movs	r2, #180	; 0xb4
 8018992:	4631      	mov	r1, r6
 8018994:	fa1f f088 	uxth.w	r0, r8
 8018998:	f003 fc78 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 801899c:	b2bb      	uxth	r3, r7
 801899e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80189a2:	f104 0217 	add.w	r2, r4, #23
 80189a6:	9100      	str	r1, [sp, #0]
 80189a8:	b292      	uxth	r2, r2
 80189aa:	4619      	mov	r1, r3
 80189ac:	fa1f f089 	uxth.w	r0, r9
 80189b0:	f003 f9d4 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 80189b4:	b2ad      	uxth	r5, r5
 80189b6:	f104 0011 	add.w	r0, r4, #17
 80189ba:	b280      	uxth	r0, r0
 80189bc:	2291      	movs	r2, #145	; 0x91
 80189be:	4629      	mov	r1, r5
 80189c0:	f003 fc64 	bl	801c28c <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 80189c4:	f104 0009 	add.w	r0, r4, #9
 80189c8:	e7d8      	b.n	801897c <GUI_TextRu_Cd_m2+0x88>
 80189ca:	bf00      	nop
 80189cc:	200001a0 	.word	0x200001a0

080189d0 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 80189d0:	b538      	push	{r3, r4, r5, lr}
 80189d2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80189d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80189d8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80189da:	f003 fc4b 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80189de:	2063      	movs	r0, #99	; 0x63
 80189e0:	f003 fc4e 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80189e4:	482d      	ldr	r0, [pc, #180]	; (8018a9c <GUI_TextRu_Irradiance+0xcc>)
 80189e6:	f003 fc3f 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 80189ea:	4621      	mov	r1, r4
 80189ec:	229e      	movs	r2, #158	; 0x9e
 80189ee:	4628      	mov	r0, r5
 80189f0:	f003 fc4c 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 80189f4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80189f6:	482a      	ldr	r0, [pc, #168]	; (8018aa0 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 80189f8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80189fa:	f003 fc35 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 80189fe:	f105 0010 	add.w	r0, r5, #16
 8018a02:	4621      	mov	r1, r4
 8018a04:	22b1      	movs	r2, #177	; 0xb1
 8018a06:	b280      	uxth	r0, r0
 8018a08:	f003 fc40 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 8018a0c:	f105 001b 	add.w	r0, r5, #27
 8018a10:	4621      	mov	r1, r4
 8018a12:	22bb      	movs	r2, #187	; 0xbb
 8018a14:	b280      	uxth	r0, r0
 8018a16:	f003 fc39 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 8018a1a:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8018a1e:	4621      	mov	r1, r4
 8018a20:	2283      	movs	r2, #131	; 0x83
 8018a22:	b280      	uxth	r0, r0
 8018a24:	f003 fc32 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 8018a28:	f105 0033 	add.w	r0, r5, #51	; 0x33
 8018a2c:	4621      	mov	r1, r4
 8018a2e:	2287      	movs	r2, #135	; 0x87
 8018a30:	b280      	uxth	r0, r0
 8018a32:	f003 fc2b 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 8018a36:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8018a3a:	4621      	mov	r1, r4
 8018a3c:	22b5      	movs	r2, #181	; 0xb5
 8018a3e:	b280      	uxth	r0, r0
 8018a40:	f003 fc24 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 8018a44:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8018a48:	4621      	mov	r1, r4
 8018a4a:	22bd      	movs	r2, #189	; 0xbd
 8018a4c:	b280      	uxth	r0, r0
 8018a4e:	f003 fc1d 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 8018a52:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8018a56:	4621      	mov	r1, r4
 8018a58:	22bd      	movs	r2, #189	; 0xbd
 8018a5a:	b280      	uxth	r0, r0
 8018a5c:	f003 fc16 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 8018a60:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8018a64:	4621      	mov	r1, r4
 8018a66:	22be      	movs	r2, #190	; 0xbe
 8018a68:	b280      	uxth	r0, r0
 8018a6a:	f003 fc0f 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 8018a6e:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 8018a72:	4621      	mov	r1, r4
 8018a74:	2281      	movs	r2, #129	; 0x81
 8018a76:	b280      	uxth	r0, r0
 8018a78:	f003 fc08 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 8018a7c:	f105 0077 	add.w	r0, r5, #119	; 0x77
 8018a80:	4621      	mov	r1, r4
 8018a82:	2282      	movs	r2, #130	; 0x82
 8018a84:	b280      	uxth	r0, r0
 8018a86:	f003 fc01 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018a8a:	f105 0083 	add.w	r0, r5, #131	; 0x83
 8018a8e:	4621      	mov	r1, r4
 8018a90:	228c      	movs	r2, #140	; 0x8c
 8018a92:	b280      	uxth	r0, r0
}
 8018a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018a98:	f003 bbf8 	b.w	801c28c <TFT_DrawCharRus>
 8018a9c:	200001d0 	.word	0x200001d0
 8018aa0:	200001d8 	.word	0x200001d8

08018aa4 <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 8018aa4:	b538      	push	{r3, r4, r5, lr}
 8018aa6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018aa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018aac:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018aae:	f003 fbe1 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018ab2:	2063      	movs	r0, #99	; 0x63
 8018ab4:	f003 fbe4 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018ab8:	481c      	ldr	r0, [pc, #112]	; (8018b2c <GUI_TextRu_Luminance+0x88>)
 8018aba:	f003 fbd5 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 8018abe:	4621      	mov	r1, r4
 8018ac0:	22af      	movs	r2, #175	; 0xaf
 8018ac2:	4628      	mov	r0, r5
 8018ac4:	f003 fbe2 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018ac8:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018aca:	4819      	ldr	r0, [pc, #100]	; (8018b30 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018acc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018ace:	f003 fbcb 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018ad2:	f105 0010 	add.w	r0, r5, #16
 8018ad6:	4621      	mov	r1, r4
 8018ad8:	2280      	movs	r2, #128	; 0x80
 8018ada:	b280      	uxth	r0, r0
 8018adc:	f003 fbd6 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 8018ae0:	f105 001c 	add.w	r0, r5, #28
 8018ae4:	4621      	mov	r1, r4
 8018ae6:	22ba      	movs	r2, #186	; 0xba
 8018ae8:	b280      	uxth	r0, r0
 8018aea:	f003 fbcf 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 8018aee:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018af2:	4621      	mov	r1, r4
 8018af4:	22be      	movs	r2, #190	; 0xbe
 8018af6:	b280      	uxth	r0, r0
 8018af8:	f003 fbc8 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 8018afc:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018b00:	4621      	mov	r1, r4
 8018b02:	2281      	movs	r2, #129	; 0x81
 8018b04:	b280      	uxth	r0, r0
 8018b06:	f003 fbc1 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 8018b0a:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8018b0e:	4621      	mov	r1, r4
 8018b10:	2282      	movs	r2, #130	; 0x82
 8018b12:	b280      	uxth	r0, r0
 8018b14:	f003 fbba 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8018b18:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8018b1c:	4621      	mov	r1, r4
 8018b1e:	228c      	movs	r2, #140	; 0x8c
 8018b20:	b280      	uxth	r0, r0
}
 8018b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8018b26:	f003 bbb1 	b.w	801c28c <TFT_DrawCharRus>
 8018b2a:	bf00      	nop
 8018b2c:	200001d0 	.word	0x200001d0
 8018b30:	200001d8 	.word	0x200001d8

08018b34 <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 8018b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b36:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b38:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b3c:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8018b3e:	f003 fb99 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b42:	2063      	movs	r0, #99	; 0x63
 8018b44:	f003 fb9c 	bl	801c280 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 8018b48:	4f31      	ldr	r7, [pc, #196]	; (8018c10 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 8018b4a:	4832      	ldr	r0, [pc, #200]	; (8018c14 <GUI_TextRu_Radiance+0xe0>)
 8018b4c:	f003 fb8c 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 8018b50:	4631      	mov	r1, r6
 8018b52:	22ad      	movs	r2, #173	; 0xad
 8018b54:	4620      	mov	r0, r4
 8018b56:	f003 fb99 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018b5a:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018b5c:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018b5e:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 8018b60:	f003 fb82 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018b64:	f104 0010 	add.w	r0, r4, #16
 8018b68:	4629      	mov	r1, r5
 8018b6a:	22bd      	movs	r2, #189	; 0xbd
 8018b6c:	b280      	uxth	r0, r0
 8018b6e:	f003 fb8d 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 8018b72:	f104 001d 	add.w	r0, r4, #29
 8018b76:	4629      	mov	r1, r5
 8018b78:	22b5      	movs	r2, #181	; 0xb5
 8018b7a:	b280      	uxth	r0, r0
 8018b7c:	f003 fb86 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018b80:	4825      	ldr	r0, [pc, #148]	; (8018c18 <GUI_TextRu_Radiance+0xe4>)
 8018b82:	f003 fb71 	bl	801c268 <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 8018b86:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8018b8a:	4631      	mov	r1, r6
 8018b8c:	222e      	movs	r2, #46	; 0x2e
 8018b8e:	b280      	uxth	r0, r0
 8018b90:	f003 fc34 	bl	801c3fc <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 8018b94:	4638      	mov	r0, r7
 8018b96:	f003 fb67 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 8018b9a:	f104 0029 	add.w	r0, r4, #41	; 0x29
 8018b9e:	4629      	mov	r1, r5
 8018ba0:	2280      	movs	r2, #128	; 0x80
 8018ba2:	b280      	uxth	r0, r0
 8018ba4:	f003 fb72 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 8018ba8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8018bac:	4629      	mov	r1, r5
 8018bae:	228f      	movs	r2, #143	; 0x8f
 8018bb0:	b280      	uxth	r0, r0
 8018bb2:	f003 fb6b 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 8018bb6:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8018bba:	4629      	mov	r1, r5
 8018bbc:	2280      	movs	r2, #128	; 0x80
 8018bbe:	b280      	uxth	r0, r0
 8018bc0:	f003 fb64 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 8018bc4:	f104 0055 	add.w	r0, r4, #85	; 0x55
 8018bc8:	4629      	mov	r1, r5
 8018bca:	22ba      	movs	r2, #186	; 0xba
 8018bcc:	b280      	uxth	r0, r0
 8018bce:	f003 fb5d 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8018bd2:	f104 0061 	add.w	r0, r4, #97	; 0x61
 8018bd6:	4629      	mov	r1, r5
 8018bd8:	22be      	movs	r2, #190	; 0xbe
 8018bda:	b280      	uxth	r0, r0
 8018bdc:	f003 fb56 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8018be0:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018be4:	4629      	mov	r1, r5
 8018be6:	2281      	movs	r2, #129	; 0x81
 8018be8:	b280      	uxth	r0, r0
 8018bea:	f003 fb4f 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 8018bee:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8018bf2:	4629      	mov	r1, r5
 8018bf4:	2282      	movs	r2, #130	; 0x82
 8018bf6:	b280      	uxth	r0, r0
 8018bf8:	f003 fb48 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018bfc:	f104 0083 	add.w	r0, r4, #131	; 0x83
 8018c00:	4629      	mov	r1, r5
 8018c02:	228c      	movs	r2, #140	; 0x8c
 8018c04:	b280      	uxth	r0, r0

}
 8018c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018c0a:	f003 bb3f 	b.w	801c28c <TFT_DrawCharRus>
 8018c0e:	bf00      	nop
 8018c10:	200001d8 	.word	0x200001d8
 8018c14:	200001d0 	.word	0x200001d0
 8018c18:	200001b0 	.word	0x200001b0

08018c1c <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 8018c1c:	b538      	push	{r3, r4, r5, lr}
 8018c1e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018c20:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c24:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018c26:	f003 fb25 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c2a:	2063      	movs	r0, #99	; 0x63
 8018c2c:	f003 fb28 	bl	801c280 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8018c30:	483f      	ldr	r0, [pc, #252]	; (8018d30 <GUI_TextMsgRu_LowIrradiance+0x114>)
 8018c32:	f003 fb19 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8018c36:	4621      	mov	r1, r4
 8018c38:	229c      	movs	r2, #156	; 0x9c
 8018c3a:	4628      	mov	r0, r5
 8018c3c:	f003 fb26 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018c40:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018c42:	483c      	ldr	r0, [pc, #240]	; (8018d34 <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018c44:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018c46:	f003 fb0f 	bl	801c268 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018c4a:	f105 0010 	add.w	r0, r5, #16
 8018c4e:	4621      	mov	r1, r4
 8018c50:	22b0      	movs	r2, #176	; 0xb0
 8018c52:	b280      	uxth	r0, r0
 8018c54:	f003 fb1a 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8018c58:	f105 001c 	add.w	r0, r5, #28
 8018c5c:	4621      	mov	r1, r4
 8018c5e:	22bb      	movs	r2, #187	; 0xbb
 8018c60:	b280      	uxth	r0, r0
 8018c62:	f003 fb13 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 8018c66:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018c6a:	4621      	mov	r1, r4
 8018c6c:	22b0      	movs	r2, #176	; 0xb0
 8018c6e:	b280      	uxth	r0, r0
 8018c70:	f003 fb0c 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 8018c74:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018c78:	4621      	mov	r1, r4
 8018c7a:	228f      	movs	r2, #143	; 0x8f
 8018c7c:	b280      	uxth	r0, r0
 8018c7e:	f003 fb05 	bl	801c28c <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 8018c82:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018c86:	4621      	mov	r1, r4
 8018c88:	22be      	movs	r2, #190	; 0xbe
 8018c8a:	b280      	uxth	r0, r0
 8018c8c:	f003 fafe 	bl	801c28c <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 8018c90:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8018c94:	4621      	mov	r1, r4
 8018c96:	22b1      	movs	r2, #177	; 0xb1
 8018c98:	b280      	uxth	r0, r0
 8018c9a:	f003 faf7 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 8018c9e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8018ca2:	4621      	mov	r1, r4
 8018ca4:	22bb      	movs	r2, #187	; 0xbb
 8018ca6:	b280      	uxth	r0, r0
 8018ca8:	f003 faf0 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 8018cac:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 8018cb0:	4621      	mov	r1, r4
 8018cb2:	2283      	movs	r2, #131	; 0x83
 8018cb4:	b280      	uxth	r0, r0
 8018cb6:	f003 fae9 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 8018cba:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 8018cbe:	4621      	mov	r1, r4
 8018cc0:	2287      	movs	r2, #135	; 0x87
 8018cc2:	b280      	uxth	r0, r0
 8018cc4:	f003 fae2 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 8018cc8:	f105 0086 	add.w	r0, r5, #134	; 0x86
 8018ccc:	4621      	mov	r1, r4
 8018cce:	22b5      	movs	r2, #181	; 0xb5
 8018cd0:	b280      	uxth	r0, r0
 8018cd2:	f003 fadb 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 8018cd6:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8018cda:	4621      	mov	r1, r4
 8018cdc:	22bd      	movs	r2, #189	; 0xbd
 8018cde:	b280      	uxth	r0, r0
 8018ce0:	f003 fad4 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 8018ce4:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 8018ce8:	4621      	mov	r1, r4
 8018cea:	22bd      	movs	r2, #189	; 0xbd
 8018cec:	b280      	uxth	r0, r0
 8018cee:	f003 facd 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 8018cf2:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 8018cf6:	4621      	mov	r1, r4
 8018cf8:	22be      	movs	r2, #190	; 0xbe
 8018cfa:	b280      	uxth	r0, r0
 8018cfc:	f003 fac6 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 8018d00:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 8018d04:	4621      	mov	r1, r4
 8018d06:	2281      	movs	r2, #129	; 0x81
 8018d08:	b280      	uxth	r0, r0
 8018d0a:	f003 fabf 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 8018d0e:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 8018d12:	4621      	mov	r1, r4
 8018d14:	2282      	movs	r2, #130	; 0x82
 8018d16:	b280      	uxth	r0, r0
 8018d18:	f003 fab8 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 8018d1c:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8018d20:	4621      	mov	r1, r4
 8018d22:	228c      	movs	r2, #140	; 0x8c
 8018d24:	b280      	uxth	r0, r0
}
 8018d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 8018d2a:	f003 baaf 	b.w	801c28c <TFT_DrawCharRus>
 8018d2e:	bf00      	nop
 8018d30:	200001d0 	.word	0x200001d0
 8018d34:	200001d8 	.word	0x200001d8

08018d38 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 8018d38:	b538      	push	{r3, r4, r5, lr}
 8018d3a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018d3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018d40:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018d42:	f003 fa97 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d46:	2063      	movs	r0, #99	; 0x63
 8018d48:	f003 fa9a 	bl	801c280 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8018d4c:	482d      	ldr	r0, [pc, #180]	; (8018e04 <GUI_TextMsgRu_LowRadiance+0xcc>)
 8018d4e:	f003 fa8b 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8018d52:	4621      	mov	r1, r4
 8018d54:	229c      	movs	r2, #156	; 0x9c
 8018d56:	4628      	mov	r0, r5
 8018d58:	f003 fa98 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018d5c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018d5e:	482a      	ldr	r0, [pc, #168]	; (8018e08 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018d60:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018d62:	f003 fa81 	bl	801c268 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018d66:	f105 0010 	add.w	r0, r5, #16
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	22b0      	movs	r2, #176	; 0xb0
 8018d6e:	b280      	uxth	r0, r0
 8018d70:	f003 fa8c 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8018d74:	f105 001c 	add.w	r0, r5, #28
 8018d78:	4621      	mov	r1, r4
 8018d7a:	22bb      	movs	r2, #187	; 0xbb
 8018d7c:	b280      	uxth	r0, r0
 8018d7e:	f003 fa85 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 8018d82:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018d86:	4621      	mov	r1, r4
 8018d88:	22b0      	movs	r2, #176	; 0xb0
 8018d8a:	b280      	uxth	r0, r0
 8018d8c:	f003 fa7e 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 8018d90:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018d94:	4621      	mov	r1, r4
 8018d96:	228f      	movs	r2, #143	; 0x8f
 8018d98:	b280      	uxth	r0, r0
 8018d9a:	f003 fa77 	bl	801c28c <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 8018d9e:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018da2:	4621      	mov	r1, r4
 8018da4:	228f      	movs	r2, #143	; 0x8f
 8018da6:	b280      	uxth	r0, r0
 8018da8:	f003 fa70 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 8018dac:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8018db0:	4621      	mov	r1, r4
 8018db2:	2280      	movs	r2, #128	; 0x80
 8018db4:	b280      	uxth	r0, r0
 8018db6:	f003 fa69 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 8018dba:	f105 0061 	add.w	r0, r5, #97	; 0x61
 8018dbe:	4621      	mov	r1, r4
 8018dc0:	22ba      	movs	r2, #186	; 0xba
 8018dc2:	b280      	uxth	r0, r0
 8018dc4:	f003 fa62 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 8018dc8:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8018dcc:	4621      	mov	r1, r4
 8018dce:	22be      	movs	r2, #190	; 0xbe
 8018dd0:	b280      	uxth	r0, r0
 8018dd2:	f003 fa5b 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 8018dd6:	f105 0079 	add.w	r0, r5, #121	; 0x79
 8018dda:	4621      	mov	r1, r4
 8018ddc:	2281      	movs	r2, #129	; 0x81
 8018dde:	b280      	uxth	r0, r0
 8018de0:	f003 fa54 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 8018de4:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8018de8:	4621      	mov	r1, r4
 8018dea:	2282      	movs	r2, #130	; 0x82
 8018dec:	b280      	uxth	r0, r0
 8018dee:	f003 fa4d 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8018df2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 8018df6:	4621      	mov	r1, r4
 8018df8:	228c      	movs	r2, #140	; 0x8c
 8018dfa:	b280      	uxth	r0, r0
}
 8018dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8018e00:	f003 ba44 	b.w	801c28c <TFT_DrawCharRus>
 8018e04:	200001d0 	.word	0x200001d0
 8018e08:	200001d8 	.word	0x200001d8

08018e0c <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 8018e0c:	b538      	push	{r3, r4, r5, lr}
 8018e0e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018e10:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018e14:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018e16:	f003 fa2d 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e1a:	2063      	movs	r0, #99	; 0x63
 8018e1c:	f003 fa30 	bl	801c280 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8018e20:	4846      	ldr	r0, [pc, #280]	; (8018f3c <GUI_TextMsgRu_HighIrradiance+0x130>)
 8018e22:	f003 fa21 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 8018e26:	4621      	mov	r1, r4
 8018e28:	2291      	movs	r2, #145	; 0x91
 8018e2a:	4628      	mov	r0, r5
 8018e2c:	f003 fa2e 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8018e30:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018e32:	4843      	ldr	r0, [pc, #268]	; (8018f40 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8018e34:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018e36:	f003 fa17 	bl	801c268 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8018e3a:	f105 0010 	add.w	r0, r5, #16
 8018e3e:	4621      	mov	r1, r4
 8018e40:	22be      	movs	r2, #190	; 0xbe
 8018e42:	b280      	uxth	r0, r0
 8018e44:	f003 fa22 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8018e48:	f105 001c 	add.w	r0, r5, #28
 8018e4c:	4621      	mov	r1, r4
 8018e4e:	22bb      	movs	r2, #187	; 0xbb
 8018e50:	b280      	uxth	r0, r0
 8018e52:	f003 fa1b 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8018e56:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018e5a:	4621      	mov	r1, r4
 8018e5c:	228c      	movs	r2, #140	; 0x8c
 8018e5e:	b280      	uxth	r0, r0
 8018e60:	f003 fa14 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 8018e64:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8018e68:	4621      	mov	r1, r4
 8018e6a:	2288      	movs	r2, #136	; 0x88
 8018e6c:	b280      	uxth	r0, r0
 8018e6e:	f003 fa0d 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 8018e72:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8018e76:	4621      	mov	r1, r4
 8018e78:	22b0      	movs	r2, #176	; 0xb0
 8018e7a:	b280      	uxth	r0, r0
 8018e7c:	f003 fa06 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8018e80:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8018e84:	4621      	mov	r1, r4
 8018e86:	228f      	movs	r2, #143	; 0x8f
 8018e88:	b280      	uxth	r0, r0
 8018e8a:	f003 f9ff 	bl	801c28c <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 8018e8e:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8018e92:	4621      	mov	r1, r4
 8018e94:	22be      	movs	r2, #190	; 0xbe
 8018e96:	b280      	uxth	r0, r0
 8018e98:	f003 f9f8 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 8018e9c:	f105 0074 	add.w	r0, r5, #116	; 0x74
 8018ea0:	4621      	mov	r1, r4
 8018ea2:	22b1      	movs	r2, #177	; 0xb1
 8018ea4:	b280      	uxth	r0, r0
 8018ea6:	f003 f9f1 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 8018eaa:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 8018eae:	4621      	mov	r1, r4
 8018eb0:	22bb      	movs	r2, #187	; 0xbb
 8018eb2:	b280      	uxth	r0, r0
 8018eb4:	f003 f9ea 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 8018eb8:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 8018ebc:	4621      	mov	r1, r4
 8018ebe:	2283      	movs	r2, #131	; 0x83
 8018ec0:	b280      	uxth	r0, r0
 8018ec2:	f003 f9e3 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 8018ec6:	f105 0097 	add.w	r0, r5, #151	; 0x97
 8018eca:	4621      	mov	r1, r4
 8018ecc:	2287      	movs	r2, #135	; 0x87
 8018ece:	b280      	uxth	r0, r0
 8018ed0:	f003 f9dc 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 8018ed4:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 8018ed8:	4621      	mov	r1, r4
 8018eda:	22b5      	movs	r2, #181	; 0xb5
 8018edc:	b280      	uxth	r0, r0
 8018ede:	f003 f9d5 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 8018ee2:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8018ee6:	4621      	mov	r1, r4
 8018ee8:	22bd      	movs	r2, #189	; 0xbd
 8018eea:	b280      	uxth	r0, r0
 8018eec:	f003 f9ce 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 8018ef0:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 8018ef4:	4621      	mov	r1, r4
 8018ef6:	22bd      	movs	r2, #189	; 0xbd
 8018ef8:	b280      	uxth	r0, r0
 8018efa:	f003 f9c7 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 8018efe:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8018f02:	4621      	mov	r1, r4
 8018f04:	22be      	movs	r2, #190	; 0xbe
 8018f06:	b280      	uxth	r0, r0
 8018f08:	f003 f9c0 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 8018f0c:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 8018f10:	4621      	mov	r1, r4
 8018f12:	2281      	movs	r2, #129	; 0x81
 8018f14:	b280      	uxth	r0, r0
 8018f16:	f003 f9b9 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 8018f1a:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 8018f1e:	4621      	mov	r1, r4
 8018f20:	2282      	movs	r2, #130	; 0x82
 8018f22:	b280      	uxth	r0, r0
 8018f24:	f003 f9b2 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 8018f28:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 8018f2c:	4621      	mov	r1, r4
 8018f2e:	228c      	movs	r2, #140	; 0x8c
 8018f30:	b280      	uxth	r0, r0
}
 8018f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 8018f36:	f003 b9a9 	b.w	801c28c <TFT_DrawCharRus>
 8018f3a:	bf00      	nop
 8018f3c:	200001d0 	.word	0x200001d0
 8018f40:	200001d8 	.word	0x200001d8

08018f44 <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 8018f44:	b538      	push	{r3, r4, r5, lr}
 8018f46:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018f48:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018f4c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018f4e:	f003 f991 	bl	801c274 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018f52:	2063      	movs	r0, #99	; 0x63
 8018f54:	f003 f994 	bl	801c280 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8018f58:	4834      	ldr	r0, [pc, #208]	; (801902c <GUI_TextMsgRu_HighRadiance+0xe8>)
 8018f5a:	f003 f985 	bl	801c268 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 8018f5e:	4621      	mov	r1, r4
 8018f60:	2291      	movs	r2, #145	; 0x91
 8018f62:	4628      	mov	r0, r5
 8018f64:	f003 f992 	bl	801c28c <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8018f68:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018f6a:	4831      	ldr	r0, [pc, #196]	; (8019030 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8018f6c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018f6e:	f003 f97b 	bl	801c268 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8018f72:	f105 0010 	add.w	r0, r5, #16
 8018f76:	4621      	mov	r1, r4
 8018f78:	22be      	movs	r2, #190	; 0xbe
 8018f7a:	b280      	uxth	r0, r0
 8018f7c:	f003 f986 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8018f80:	f105 001c 	add.w	r0, r5, #28
 8018f84:	4621      	mov	r1, r4
 8018f86:	22bb      	movs	r2, #187	; 0xbb
 8018f88:	b280      	uxth	r0, r0
 8018f8a:	f003 f97f 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8018f8e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018f92:	4621      	mov	r1, r4
 8018f94:	228c      	movs	r2, #140	; 0x8c
 8018f96:	b280      	uxth	r0, r0
 8018f98:	f003 f978 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 8018f9c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8018fa0:	4621      	mov	r1, r4
 8018fa2:	2288      	movs	r2, #136	; 0x88
 8018fa4:	b280      	uxth	r0, r0
 8018fa6:	f003 f971 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 8018faa:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8018fae:	4621      	mov	r1, r4
 8018fb0:	22b0      	movs	r2, #176	; 0xb0
 8018fb2:	b280      	uxth	r0, r0
 8018fb4:	f003 f96a 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8018fb8:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8018fbc:	4621      	mov	r1, r4
 8018fbe:	228f      	movs	r2, #143	; 0x8f
 8018fc0:	b280      	uxth	r0, r0
 8018fc2:	f003 f963 	bl	801c28c <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 8018fc6:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8018fca:	4621      	mov	r1, r4
 8018fcc:	228f      	movs	r2, #143	; 0x8f
 8018fce:	b280      	uxth	r0, r0
 8018fd0:	f003 f95c 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 8018fd4:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8018fd8:	4621      	mov	r1, r4
 8018fda:	2280      	movs	r2, #128	; 0x80
 8018fdc:	b280      	uxth	r0, r0
 8018fde:	f003 f955 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 8018fe2:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8018fe6:	4621      	mov	r1, r4
 8018fe8:	22ba      	movs	r2, #186	; 0xba
 8018fea:	b280      	uxth	r0, r0
 8018fec:	f003 f94e 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 8018ff0:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8018ff4:	4621      	mov	r1, r4
 8018ff6:	22be      	movs	r2, #190	; 0xbe
 8018ff8:	b280      	uxth	r0, r0
 8018ffa:	f003 f947 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 8018ffe:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8019002:	4621      	mov	r1, r4
 8019004:	2281      	movs	r2, #129	; 0x81
 8019006:	b280      	uxth	r0, r0
 8019008:	f003 f940 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 801900c:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 8019010:	4621      	mov	r1, r4
 8019012:	2282      	movs	r2, #130	; 0x82
 8019014:	b280      	uxth	r0, r0
 8019016:	f003 f939 	bl	801c28c <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 801901a:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 801901e:	4621      	mov	r1, r4
 8019020:	228c      	movs	r2, #140	; 0x8c
 8019022:	b280      	uxth	r0, r0
 8019024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 8019028:	f003 b930 	b.w	801c28c <TFT_DrawCharRus>
 801902c:	200001d0 	.word	0x200001d0
 8019030:	200001d8 	.word	0x200001d8

08019034 <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 8019034:	2201      	movs	r2, #1
 8019036:	2102      	movs	r1, #2
 8019038:	4801      	ldr	r0, [pc, #4]	; (8019040 <Set.part.0+0xc>)
 801903a:	f7e9 bad3 	b.w	80025e4 <HAL_GPIO_WritePin>
 801903e:	bf00      	nop
 8019040:	48000400 	.word	0x48000400

08019044 <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 8019044:	2200      	movs	r2, #0
 8019046:	2102      	movs	r1, #2
 8019048:	4801      	ldr	r0, [pc, #4]	; (8019050 <Reset.part.1+0xc>)
 801904a:	f7e9 bacb 	b.w	80025e4 <HAL_GPIO_WritePin>
 801904e:	bf00      	nop
 8019050:	48000400 	.word	0x48000400

08019054 <GPIO_QSPI_Init>:
{
 8019054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019058:	4b39      	ldr	r3, [pc, #228]	; (8019140 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801905a:	4c3a      	ldr	r4, [pc, #232]	; (8019144 <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801905c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801905e:	4f3a      	ldr	r7, [pc, #232]	; (8019148 <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019060:	f042 0220 	orr.w	r2, r2, #32
 8019064:	64da      	str	r2, [r3, #76]	; 0x4c
 8019066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019068:	f002 0220 	and.w	r2, r2, #32
 801906c:	9201      	str	r2, [sp, #4]
 801906e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019072:	f042 0201 	orr.w	r2, r2, #1
 8019076:	64da      	str	r2, [r3, #76]	; 0x4c
 8019078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801907a:	f002 0201 	and.w	r2, r2, #1
 801907e:	9202      	str	r2, [sp, #8]
 8019080:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019084:	f042 0202 	orr.w	r2, r2, #2
 8019088:	64da      	str	r2, [r3, #76]	; 0x4c
 801908a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801908c:	f003 0302 	and.w	r3, r3, #2
 8019090:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019092:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019094:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019096:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801909a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801909c:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801909e:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80190a0:	4621      	mov	r1, r4
 80190a2:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80190a4:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80190a8:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80190ac:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80190b0:	f7e9 f922 	bl	80022f8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80190b4:	4621      	mov	r1, r4
 80190b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80190ba:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80190be:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80190c0:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80190c2:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80190c6:	f7e9 f917 	bl	80022f8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80190ca:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80190cc:	f8df 907c 	ldr.w	r9, [pc, #124]	; 801914c <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80190d0:	4632      	mov	r2, r6
 80190d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80190d6:	f7e9 fa85 	bl	80025e4 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80190da:	4621      	mov	r1, r4
 80190dc:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80190de:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80190e2:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80190e6:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190e8:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80190ea:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80190ee:	f7e9 f903 	bl	80022f8 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80190f2:	4621      	mov	r1, r4
 80190f4:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80190f6:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80190fa:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190fc:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80190fe:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019102:	f7e9 f8f9 	bl	80022f8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8019106:	462a      	mov	r2, r5
 8019108:	4631      	mov	r1, r6
 801910a:	4648      	mov	r0, r9
 801910c:	f7e9 fa6a 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8019110:	462a      	mov	r2, r5
 8019112:	4648      	mov	r0, r9
 8019114:	2102      	movs	r1, #2
 8019116:	f7e9 fa65 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 801911a:	462a      	mov	r2, r5
 801911c:	4638      	mov	r0, r7
 801911e:	2140      	movs	r1, #64	; 0x40
 8019120:	f7e9 fa60 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8019124:	462a      	mov	r2, r5
 8019126:	4638      	mov	r0, r7
 8019128:	2180      	movs	r1, #128	; 0x80
 801912a:	f7e9 fa5b 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 801912e:	462a      	mov	r2, r5
 8019130:	4651      	mov	r1, sl
 8019132:	4638      	mov	r0, r7
 8019134:	f7e9 fa56 	bl	80025e4 <HAL_GPIO_WritePin>
}
 8019138:	b004      	add	sp, #16
 801913a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801913e:	bf00      	nop
 8019140:	40021000 	.word	0x40021000
 8019144:	20005734 	.word	0x20005734
 8019148:	48001400 	.word	0x48001400
 801914c:	48000400 	.word	0x48000400

08019150 <Set>:
	switch(pin)
 8019150:	3801      	subs	r0, #1
 8019152:	2805      	cmp	r0, #5
 8019154:	d81b      	bhi.n	801918e <Set+0x3e>
 8019156:	e8df f000 	tbb	[pc, r0]
 801915a:	0503      	.short	0x0503
 801915c:	16110e0a 	.word	0x16110e0a
 8019160:	f7ff bf68 	b.w	8019034 <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 8019164:	2201      	movs	r2, #1
 8019166:	480a      	ldr	r0, [pc, #40]	; (8019190 <Set+0x40>)
 8019168:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801916a:	f7e9 ba3b 	b.w	80025e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 801916e:	2201      	movs	r2, #1
 8019170:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019172:	4808      	ldr	r0, [pc, #32]	; (8019194 <Set+0x44>)
 8019174:	e7f9      	b.n	801916a <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 8019176:	2201      	movs	r2, #1
 8019178:	2140      	movs	r1, #64	; 0x40
 801917a:	e7fa      	b.n	8019172 <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 801917c:	2201      	movs	r2, #1
 801917e:	2104      	movs	r1, #4
 8019180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019184:	e7f1      	b.n	801916a <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019186:	2201      	movs	r2, #1
 8019188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801918c:	e7f1      	b.n	8019172 <Set+0x22>
 801918e:	4770      	bx	lr
 8019190:	48000400 	.word	0x48000400
 8019194:	48001400 	.word	0x48001400

08019198 <Reset>:
	switch(pin)
 8019198:	3801      	subs	r0, #1
 801919a:	2805      	cmp	r0, #5
 801919c:	d81b      	bhi.n	80191d6 <Reset+0x3e>
 801919e:	e8df f000 	tbb	[pc, r0]
 80191a2:	0503      	.short	0x0503
 80191a4:	16110e0a 	.word	0x16110e0a
 80191a8:	f7ff bf4c 	b.w	8019044 <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 80191ac:	480a      	ldr	r0, [pc, #40]	; (80191d8 <Reset+0x40>)
 80191ae:	2200      	movs	r2, #0
 80191b0:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 80191b2:	f7e9 ba17 	b.w	80025e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 80191b6:	2200      	movs	r2, #0
 80191b8:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 80191ba:	4808      	ldr	r0, [pc, #32]	; (80191dc <Reset+0x44>)
 80191bc:	e7f9      	b.n	80191b2 <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 80191be:	2200      	movs	r2, #0
 80191c0:	2140      	movs	r1, #64	; 0x40
 80191c2:	e7fa      	b.n	80191ba <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 80191c4:	2200      	movs	r2, #0
 80191c6:	2104      	movs	r1, #4
 80191c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80191cc:	e7f1      	b.n	80191b2 <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 80191ce:	2200      	movs	r2, #0
 80191d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80191d4:	e7f1      	b.n	80191ba <Reset+0x22>
 80191d6:	4770      	bx	lr
 80191d8:	48000400 	.word	0x48000400
 80191dc:	48001400 	.word	0x48001400

080191e0 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 80191e0:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80191e2:	4c09      	ldr	r4, [pc, #36]	; (8019208 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80191e4:	4809      	ldr	r0, [pc, #36]	; (801920c <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80191e6:	2303      	movs	r3, #3
 80191e8:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80191ea:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80191ec:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80191f0:	f7e9 f882 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80191f4:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80191f6:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80191fa:	4621      	mov	r1, r4
 80191fc:	4804      	ldr	r0, [pc, #16]	; (8019210 <QSPI_Recieve_Init+0x30>)
}
 80191fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019202:	f7e9 b879 	b.w	80022f8 <HAL_GPIO_Init>
 8019206:	bf00      	nop
 8019208:	20005734 	.word	0x20005734
 801920c:	48000400 	.word	0x48000400
 8019210:	48001400 	.word	0x48001400

08019214 <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 8019214:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019216:	4c09      	ldr	r4, [pc, #36]	; (801923c <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019218:	4809      	ldr	r0, [pc, #36]	; (8019240 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801921a:	2303      	movs	r3, #3
 801921c:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801921e:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019220:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019224:	f7e9 f868 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019228:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801922a:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801922e:	4621      	mov	r1, r4
 8019230:	4804      	ldr	r0, [pc, #16]	; (8019244 <QSPI_Transmit_Init+0x30>)
}
 8019232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019236:	f7e9 b85f 	b.w	80022f8 <HAL_GPIO_Init>
 801923a:	bf00      	nop
 801923c:	20005734 	.word	0x20005734
 8019240:	48000400 	.word	0x48000400
 8019244:	48001400 	.word	0x48001400

08019248 <Single_Mode>:
void Single_Mode(void)
{
 8019248:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 801924a:	4c0d      	ldr	r4, [pc, #52]	; (8019280 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801924c:	4e0d      	ldr	r6, [pc, #52]	; (8019284 <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801924e:	2501      	movs	r5, #1
 8019250:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019252:	4621      	mov	r1, r4
 8019254:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019256:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801925a:	f7e9 f84d 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801925e:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019260:	4621      	mov	r1, r4
 8019262:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019264:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 8019266:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019268:	f7e9 f846 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 801926c:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801926e:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019272:	4621      	mov	r1, r4
 8019274:	4804      	ldr	r0, [pc, #16]	; (8019288 <Single_Mode+0x40>)
}
 8019276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801927a:	f7e9 b83d 	b.w	80022f8 <HAL_GPIO_Init>
 801927e:	bf00      	nop
 8019280:	20005734 	.word	0x20005734
 8019284:	48000400 	.word	0x48000400
 8019288:	48001400 	.word	0x48001400

0801928c <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 801928c:	b538      	push	{r3, r4, r5, lr}
 801928e:	4605      	mov	r5, r0
 8019290:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 8019292:	062b      	lsls	r3, r5, #24
 8019294:	d501      	bpl.n	801929a <SPI_Byte_T+0xe>
 8019296:	f7ff fecd 	bl	8019034 <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 801929a:	2006      	movs	r0, #6
 801929c:	f7ff ff58 	bl	8019150 <Set>
 80192a0:	3c01      	subs	r4, #1
 80192a2:	f7ff fecf 	bl	8019044 <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 80192a6:	2006      	movs	r0, #6
		byte=(byte<<1);
 80192a8:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 80192aa:	f7ff ff75 	bl	8019198 <Reset>
	for(uint8_t i=0; i<8; i++)
 80192ae:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 80192b2:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 80192b4:	d1ed      	bne.n	8019292 <SPI_Byte_T+0x6>
	}	
}
 80192b6:	bd38      	pop	{r3, r4, r5, pc}

080192b8 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 80192b8:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 80192ba:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 80192bc:	4e0d      	ldr	r6, [pc, #52]	; (80192f4 <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 80192be:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 80192c0:	2101      	movs	r1, #1
 80192c2:	4630      	mov	r0, r6
 80192c4:	f7e9 f988 	bl	80025d8 <HAL_GPIO_ReadPin>
 80192c8:	b108      	cbz	r0, 80192ce <SPI_Byte_R+0x16>
 80192ca:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 80192ce:	2006      	movs	r0, #6
 80192d0:	f7ff ff3e 	bl	8019150 <Set>
		if (i<7) byte=(byte<<1);
 80192d4:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 80192d6:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 80192da:	bf18      	it	ne
 80192dc:	0064      	lslne	r4, r4, #1
		Reset(clk);
 80192de:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 80192e2:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 80192e4:	bf18      	it	ne
 80192e6:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 80192e8:	f7ff ff56 	bl	8019198 <Reset>
	for(uint8_t i=0; i<8; i++)
 80192ec:	2d08      	cmp	r5, #8
 80192ee:	d1e7      	bne.n	80192c0 <SPI_Byte_R+0x8>
	}
	return byte;
}
 80192f0:	4620      	mov	r0, r4
 80192f2:	bd70      	pop	{r4, r5, r6, pc}
 80192f4:	48000400 	.word	0x48000400

080192f8 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 80192f8:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 80192fa:	2005      	movs	r0, #5
 80192fc:	f7ff ff4c 	bl	8019198 <Reset>
	SPI_Byte_T(cmd);
 8019300:	2005      	movs	r0, #5
 8019302:	f7ff ffc3 	bl	801928c <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 8019306:	f7ff ffd7 	bl	80192b8 <SPI_Byte_R>
 801930a:	4604      	mov	r4, r0
			Set(cs);
 801930c:	2005      	movs	r0, #5
 801930e:	f7ff ff1f 	bl	8019150 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 8019312:	4620      	mov	r0, r4
 8019314:	bd10      	pop	{r4, pc}

08019316 <SPI_Check_Busy>:
{
 8019316:	b508      	push	{r3, lr}
 8019318:	f7ff ffee 	bl	80192f8 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 801931c:	07c3      	lsls	r3, r0, #31
 801931e:	d400      	bmi.n	8019322 <SPI_Check_Busy+0xc>
}
 8019320:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 8019322:	2000      	movs	r0, #0
 8019324:	f7e7 fe82 	bl	800102c <HAL_Delay>
 8019328:	e7f6      	b.n	8019318 <SPI_Check_Busy+0x2>
	...

0801932c <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 801932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 801932e:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019330:	4e18      	ldr	r6, [pc, #96]	; (8019394 <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019332:	4f19      	ldr	r7, [pc, #100]	; (8019398 <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 8019334:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019336:	2102      	movs	r1, #2
 8019338:	4630      	mov	r0, r6
 801933a:	f7e9 f94d 	bl	80025d8 <HAL_GPIO_ReadPin>
 801933e:	b108      	cbz	r0, 8019344 <QSPI_16_R+0x18>
 8019340:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 8019344:	2101      	movs	r1, #1
 8019346:	4630      	mov	r0, r6
 8019348:	f7e9 f946 	bl	80025d8 <HAL_GPIO_ReadPin>
 801934c:	b108      	cbz	r0, 8019352 <QSPI_16_R+0x26>
 801934e:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019352:	2180      	movs	r1, #128	; 0x80
 8019354:	4638      	mov	r0, r7
 8019356:	f7e9 f93f 	bl	80025d8 <HAL_GPIO_ReadPin>
 801935a:	b108      	cbz	r0, 8019360 <QSPI_16_R+0x34>
 801935c:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 8019360:	2140      	movs	r1, #64	; 0x40
 8019362:	4638      	mov	r0, r7
 8019364:	f7e9 f938 	bl	80025d8 <HAL_GPIO_ReadPin>
 8019368:	b108      	cbz	r0, 801936e <QSPI_16_R+0x42>
 801936a:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 801936e:	2006      	movs	r0, #6
 8019370:	f7ff feee 	bl	8019150 <Set>
		if (i<3) byte=(byte<<4);
 8019374:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 8019376:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 801937a:	bf18      	it	ne
 801937c:	0124      	lslne	r4, r4, #4
		Reset(clk);
 801937e:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 8019382:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 8019384:	bf18      	it	ne
 8019386:	b2a4      	uxthne	r4, r4
		Reset(clk);
 8019388:	f7ff ff06 	bl	8019198 <Reset>
	for(uint8_t i=0; i<4; i++)
 801938c:	2d04      	cmp	r5, #4
 801938e:	d1d2      	bne.n	8019336 <QSPI_16_R+0xa>
	}
	return byte;
}
 8019390:	4620      	mov	r0, r4
 8019392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019394:	48000400 	.word	0x48000400
 8019398:	48001400 	.word	0x48001400

0801939c <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 801939c:	b538      	push	{r3, r4, r5, lr}
 801939e:	4604      	mov	r4, r0
 80193a0:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 80193a2:	0620      	lsls	r0, r4, #24
 80193a4:	d502      	bpl.n	80193ac <QSPI_Byte_T+0x10>
 80193a6:	2004      	movs	r0, #4
 80193a8:	f7ff fed2 	bl	8019150 <Set>
		if(0x40 & byte)	Set(io2);
 80193ac:	0661      	lsls	r1, r4, #25
 80193ae:	d502      	bpl.n	80193b6 <QSPI_Byte_T+0x1a>
 80193b0:	2003      	movs	r0, #3
 80193b2:	f7ff fecd 	bl	8019150 <Set>
		if(0x20 & byte)	Set(io1);
 80193b6:	06a2      	lsls	r2, r4, #26
 80193b8:	d502      	bpl.n	80193c0 <QSPI_Byte_T+0x24>
 80193ba:	2002      	movs	r0, #2
 80193bc:	f7ff fec8 	bl	8019150 <Set>
		if(0x10 & byte)	Set(io0);
 80193c0:	06e3      	lsls	r3, r4, #27
 80193c2:	d501      	bpl.n	80193c8 <QSPI_Byte_T+0x2c>
 80193c4:	f7ff fe36 	bl	8019034 <Set.part.0>

		Set(clk);
 80193c8:	2006      	movs	r0, #6
 80193ca:	f7ff fec1 	bl	8019150 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 80193ce:	2004      	movs	r0, #4
 80193d0:	f7ff fee2 	bl	8019198 <Reset>
 80193d4:	2003      	movs	r0, #3
 80193d6:	f7ff fedf 	bl	8019198 <Reset>
 80193da:	2002      	movs	r0, #2
 80193dc:	f7ff fedc 	bl	8019198 <Reset>
 80193e0:	3d01      	subs	r5, #1
 80193e2:	f7ff fe2f 	bl	8019044 <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 80193e6:	2006      	movs	r0, #6
		byte=(byte<<4);
 80193e8:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 80193ea:	f7ff fed5 	bl	8019198 <Reset>
	for(uint8_t i=0; i<2; i++)
 80193ee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 80193f2:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 80193f4:	d1d5      	bne.n	80193a2 <QSPI_Byte_T+0x6>
	}	
}
 80193f6:	bd38      	pop	{r3, r4, r5, pc}

080193f8 <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 80193f8:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 80193fa:	4e07      	ldr	r6, [pc, #28]	; (8019418 <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 80193fc:	0085      	lsls	r5, r0, #2
 80193fe:	2400      	movs	r4, #0
 8019400:	b2e3      	uxtb	r3, r4
 8019402:	42ab      	cmp	r3, r5
 8019404:	f104 0401 	add.w	r4, r4, #1
 8019408:	db00      	blt.n	801940c <QSPI_Dummy+0x14>
	}
}
 801940a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801940c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019410:	4630      	mov	r0, r6
 8019412:	f7e9 f8ec 	bl	80025ee <HAL_GPIO_TogglePin>
 8019416:	e7f3      	b.n	8019400 <QSPI_Dummy+0x8>
 8019418:	48001400 	.word	0x48001400

0801941c <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 801941c:	b510      	push	{r4, lr}
 801941e:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 8019420:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8019424:	f7ff ffba 	bl	801939c <QSPI_Byte_T>
 8019428:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801942c:	f7ff ffb6 	bl	801939c <QSPI_Byte_T>
 8019430:	b2e0      	uxtb	r0, r4
	}
}
 8019432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 8019436:	f7ff bfb1 	b.w	801939c <QSPI_Byte_T>

0801943a <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 801943a:	b570      	push	{r4, r5, r6, lr}
 801943c:	460c      	mov	r4, r1
 801943e:	4615      	mov	r5, r2
 8019440:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 8019442:	f7ff fee7 	bl	8019214 <QSPI_Transmit_Init>
	Reset(cs);
 8019446:	2005      	movs	r0, #5
 8019448:	f7ff fea6 	bl	8019198 <Reset>
	SPI_Byte_T(cmd);
 801944c:	20eb      	movs	r0, #235	; 0xeb
 801944e:	f7ff ff1d 	bl	801928c <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 8019452:	4620      	mov	r0, r4
 8019454:	f7ff ffe2 	bl	801941c <QSPI_Address>
	QSPI_Dummy(3);	
 8019458:	2003      	movs	r0, #3
 801945a:	f7ff ffcd 	bl	80193f8 <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 801945e:	f7ff febf 	bl	80191e0 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 8019462:	2400      	movs	r4, #0
 8019464:	42ac      	cmp	r4, r5
 8019466:	d108      	bne.n	801947a <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 8019468:	2005      	movs	r0, #5
 801946a:	f7ff fe71 	bl	8019150 <Set>

	Single_Mode();
 801946e:	f7ff feeb 	bl	8019248 <Single_Mode>
	SPI_Check_Busy();
}
 8019472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 8019476:	f7ff bf4e 	b.w	8019316 <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801947a:	f7ff ff57 	bl	801932c <QSPI_16_R>
 801947e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 8019482:	3401      	adds	r4, #1
 8019484:	e7ee      	b.n	8019464 <QSPI_Recieve_IO_16+0x2a>
	...

08019488 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 8019488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801948c:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 8019490:	4680      	mov	r8, r0
 8019492:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 8019494:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8019498:	2100      	movs	r1, #0
 801949a:	4668      	mov	r0, sp
 801949c:	f006 f9c5 	bl	801f82a <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 80194a0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80194e4 <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 80194a4:	2400      	movs	r4, #0
 80194a6:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 80194aa:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 80194ae:	fb06 f304 	mul.w	r3, r6, r4
 80194b2:	429f      	cmp	r7, r3
 80194b4:	d803      	bhi.n	80194be <Image_load+0x36>
}
 80194b6:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 80194ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 80194be:	b2a5      	uxth	r5, r4
 80194c0:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80194c4:	fb0a 8105 	mla	r1, sl, r5, r8
 80194c8:	4668      	mov	r0, sp
 80194ca:	f7ff ffb6 	bl	801943a <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 80194ce:	fb06 f005 	mul.w	r0, r6, r5
 80194d2:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80194d6:	4669      	mov	r1, sp
 80194d8:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 80194dc:	f006 f99a 	bl	801f814 <memcpy>
 80194e0:	3401      	adds	r4, #1
 80194e2:	e7e4      	b.n	80194ae <Image_load+0x26>
 80194e4:	20055942 	.word	0x20055942

080194e8 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 80194e8:	ee20 0a20 	vmul.f32	s0, s0, s1
 80194ec:	4770      	bx	lr
	...

080194f0 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 80194f0:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 80194f2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8019550 <Rabs_calc_Factor1+0x60>
{
 80194f6:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 80194fa:	ee80 8a27 	vdiv.f32	s16, s0, s15
 80194fe:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 8019500:	2300      	movs	r3, #0
 8019502:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 8019506:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 801950a:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 801950c:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 801950e:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 8019510:	d1f9      	bne.n	8019506 <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 8019512:	ee07 3a90 	vmov	s15, r3
 8019516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801951a:	ee17 0a90 	vmov	r0, s15
 801951e:	f7e7 f82b 	bl	8000578 <__aeabi_f2d>
 8019522:	2200      	movs	r2, #0
 8019524:	4b0b      	ldr	r3, [pc, #44]	; (8019554 <Rabs_calc_Factor1+0x64>)
 8019526:	f7e7 f87b 	bl	8000620 <__aeabi_dmul>
 801952a:	4604      	mov	r4, r0
 801952c:	ee18 0a10 	vmov	r0, s16
 8019530:	460d      	mov	r5, r1
 8019532:	f7e7 f821 	bl	8000578 <__aeabi_f2d>
 8019536:	4602      	mov	r2, r0
 8019538:	460b      	mov	r3, r1
 801953a:	4620      	mov	r0, r4
 801953c:	4629      	mov	r1, r5
 801953e:	f7e7 f86f 	bl	8000620 <__aeabi_dmul>
 8019542:	f7e7 fb65 	bl	8000c10 <__aeabi_d2f>
}
 8019546:	ecbd 8b02 	vpop	{d8}
 801954a:	ee00 0a10 	vmov	s0, r0
 801954e:	bd38      	pop	{r3, r4, r5, pc}
 8019550:	42c80000 	.word	0x42c80000
 8019554:	3f500000 	.word	0x3f500000

08019558 <Rabs_calc_main>:
//
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{
 8019558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			Rabs[1023-i] = Factor3*Factor2*(Sn[r]);
			temp = Rabs[1023-i];
			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
		}

		Rabs_prev[1023-i][n] = temp;
 801955c:	4f32      	ldr	r7, [pc, #200]	; (8019628 <Rabs_calc_main+0xd0>)
 801955e:	4d33      	ldr	r5, [pc, #204]	; (801962c <Rabs_calc_main+0xd4>)
 8019560:	783e      	ldrb	r6, [r7, #0]
		Factor3 = R_data[i] - Rdark - Factor1;
 8019562:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019634 <Rabs_calc_main+0xdc>
			temp = 0;
 8019566:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8019630 <Rabs_calc_main+0xd8>
 801956a:	3802      	subs	r0, #2
 801956c:	ea4f 0c86 	mov.w	ip, r6, lsl #2
		Rabs_prev[1023-i][n] = temp;
 8019570:	f640 7efc 	movw	lr, #4092	; 0xffc
 8019574:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
		Factor3 = R_data[i] - Rdark - Factor1;
 8019578:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 801957c:	1a64      	subs	r4, r4, r1
 801957e:	ee07 4a90 	vmov	s15, r4
 8019582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019586:	eb03 090e 	add.w	r9, r3, lr
 801958a:	ee77 7ac0 	vsub.f32	s15, s15, s0
		if(Factor3 <= 0)
 801958e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Factor3 = R_data[i] - Rdark - Factor1;
 8019596:	edc8 7a00 	vstr	s15, [r8]
		if(Factor3 <= 0)
 801959a:	d827      	bhi.n	80195ec <Rabs_calc_main+0x94>
			Rabs[1023-i] = (Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3]) / 5;
 801959c:	ed95 7a01 	vldr	s14, [r5, #4]
 80195a0:	edd5 7a00 	vldr	s15, [r5]
 80195a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80195a8:	ed95 7a02 	vldr	s14, [r5, #8]
 80195ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80195b0:	ed95 7a03 	vldr	s14, [r5, #12]
 80195b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80195b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			temp = 0;
 80195bc:	eef0 7a46 	vmov.f32	s15, s12
			Rabs[1023-i] = (Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3]) / 5;
 80195c0:	ed89 7a00 	vstr	s14, [r9]
 80195c4:	f1ae 0e04 	sub.w	lr, lr, #4
		Rabs_prev[1023-i][n] = temp;
 80195c8:	eb05 040c 	add.w	r4, r5, ip
	for (uint16_t i = 0; i < 1024; i++)
 80195cc:	f11e 0f04 	cmn.w	lr, #4
		Rabs_prev[1023-i][n] = temp;
 80195d0:	edc4 7a00 	vstr	s15, [r4]
 80195d4:	f1a5 0510 	sub.w	r5, r5, #16
	for (uint16_t i = 0; i < 1024; i++)
 80195d8:	d1ce      	bne.n	8019578 <Rabs_calc_main+0x20>

		r--;
	}
	n++;
 80195da:	3601      	adds	r6, #1
 80195dc:	b2f6      	uxtb	r6, r6
	if (n>3) n = 0;
 80195de:	2e03      	cmp	r6, #3
 80195e0:	bf8a      	itet	hi
 80195e2:	2300      	movhi	r3, #0
	n++;
 80195e4:	703e      	strbls	r6, [r7, #0]
	if (n>3) n = 0;
 80195e6:	703b      	strbhi	r3, [r7, #0]
 80195e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			Rabs[1023-i] = Factor3*Factor2*(Sn[r]);
 80195ec:	eb02 040e 	add.w	r4, r2, lr
 80195f0:	ed94 7a00 	vldr	s14, [r4]
			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 80195f4:	edd5 5a01 	vldr	s11, [r5, #4]
			Rabs[1023-i] = Factor3*Factor2*(Sn[r]);
 80195f8:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80195fc:	ee67 7a87 	vmul.f32	s15, s15, s14
			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 8019600:	ed95 7a00 	vldr	s14, [r5]
 8019604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8019608:	ee37 7a25 	vadd.f32	s14, s14, s11
 801960c:	edd5 5a02 	vldr	s11, [r5, #8]
 8019610:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019614:	edd5 5a03 	vldr	s11, [r5, #12]
 8019618:	ee37 7a25 	vadd.f32	s14, s14, s11
 801961c:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8019620:	edc9 5a00 	vstr	s11, [r9]
 8019624:	e7ce      	b.n	80195c4 <Rabs_calc_main+0x6c>
 8019626:	bf00      	nop
 8019628:	2000974c 	.word	0x2000974c
 801962c:	2000973c 	.word	0x2000973c
 8019630:	00000000 	.word	0x00000000
 8019634:	20005748 	.word	0x20005748

08019638 <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 8019638:	2900      	cmp	r1, #0

	float max = 0;
 801963a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801966c <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 801963e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8019642:	bf0c      	ite	eq
 8019644:	2204      	moveq	r2, #4
 8019646:	2203      	movne	r2, #3
 8019648:	4293      	cmp	r3, r2
 801964a:	d200      	bcs.n	801964e <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 801964c:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 801964e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8019652:	edd1 7a00 	vldr	s15, [r1]
 8019656:	eeb4 0a67 	vcmp.f32	s0, s15
 801965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801965e:	eba3 0302 	sub.w	r3, r3, r2
 8019662:	bf48      	it	mi
 8019664:	eeb0 0a67 	vmovmi.f32	s0, s15
 8019668:	b29b      	uxth	r3, r3
 801966a:	e7ed      	b.n	8019648 <Rabs_find_MAX+0x10>
 801966c:	00000000 	.word	0x00000000

08019670 <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 8019670:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8019690 <Rabs_find_MAX_all+0x20>
 8019674:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 8019678:	ecf0 7a01 	vldmia	r0!, {s15}
 801967c:	eef4 7a40 	vcmp.f32	s15, s0
 8019680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019684:	bfc8      	it	gt
 8019686:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 801968a:	4298      	cmp	r0, r3
 801968c:	d1f4      	bne.n	8019678 <Rabs_find_MAX_all+0x8>
	}
	return max;
}
 801968e:	4770      	bx	lr
 8019690:	00000000 	.word	0x00000000

08019694 <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 8019694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019698:	4c52      	ldr	r4, [pc, #328]	; (80197e4 <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 801969a:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801969e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 80196a2:	f04f 0900 	mov.w	r9, #0
 80196a6:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80196aa:	6125      	str	r5, [r4, #16]
{
 80196ac:	460f      	mov	r7, r1
 80196ae:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 80196b0:	f7e8 fc94 	bl	8001fdc <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 80196b4:	f7e8 fc92 	bl	8001fdc <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80196b8:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 80196ba:	2064      	movs	r0, #100	; 0x64
 80196bc:	f7e7 fcb6 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 80196c0:	4849      	ldr	r0, [pc, #292]	; (80197e8 <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 80196c2:	2302      	movs	r3, #2
 80196c4:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 80196c6:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 80196c8:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 80196ca:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 80196cc:	2301      	movs	r3, #1
 80196ce:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 80196d0:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 80196d4:	f7e8 fd9c 	bl	8002210 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 80196d8:	2032      	movs	r0, #50	; 0x32
 80196da:	f7e7 fca7 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80196de:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 80196e0:	f7e8 fc8e 	bl	8002000 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 80196e4:	f7e8 fc7a 	bl	8001fdc <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80196e8:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 80196ea:	4d40      	ldr	r5, [pc, #256]	; (80197ec <WriteSDFLASH_t+0x158>)
 80196ec:	4632      	mov	r2, r6
 80196ee:	463b      	mov	r3, r7
 80196f0:	4629      	mov	r1, r5
 80196f2:	2000      	movs	r0, #0
 80196f4:	f7e8 fccc 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80196f8:	2800      	cmp	r0, #0
 80196fa:	d1f7      	bne.n	80196ec <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80196fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019700:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 8019702:	4d3b      	ldr	r5, [pc, #236]	; (80197f0 <WriteSDFLASH_t+0x15c>)
 8019704:	4c3b      	ldr	r4, [pc, #236]	; (80197f4 <WriteSDFLASH_t+0x160>)
 8019706:	782a      	ldrb	r2, [r5, #0]
 8019708:	2300      	movs	r3, #0
 801970a:	4621      	mov	r1, r4
 801970c:	2000      	movs	r0, #0
 801970e:	f7e8 fcbf 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019712:	2800      	cmp	r0, #0
 8019714:	d1f7      	bne.n	8019706 <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019716:	4b33      	ldr	r3, [pc, #204]	; (80197e4 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 8019718:	4d37      	ldr	r5, [pc, #220]	; (80197f8 <WriteSDFLASH_t+0x164>)
 801971a:	4c38      	ldr	r4, [pc, #224]	; (80197fc <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801971c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019720:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 8019722:	882a      	ldrh	r2, [r5, #0]
 8019724:	2300      	movs	r3, #0
 8019726:	4621      	mov	r1, r4
 8019728:	2000      	movs	r0, #0
 801972a:	f7e8 fcb1 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801972e:	2800      	cmp	r0, #0
 8019730:	d1f7      	bne.n	8019722 <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019732:	4b2c      	ldr	r3, [pc, #176]	; (80197e4 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 8019734:	4d32      	ldr	r5, [pc, #200]	; (8019800 <WriteSDFLASH_t+0x16c>)
 8019736:	4c33      	ldr	r4, [pc, #204]	; (8019804 <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019738:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801973c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801973e:	782a      	ldrb	r2, [r5, #0]
 8019740:	2300      	movs	r3, #0
 8019742:	4621      	mov	r1, r4
 8019744:	2000      	movs	r0, #0
 8019746:	f7e8 fca3 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801974a:	2800      	cmp	r0, #0
 801974c:	d1f7      	bne.n	801973e <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801974e:	4b25      	ldr	r3, [pc, #148]	; (80197e4 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 8019750:	4d2d      	ldr	r5, [pc, #180]	; (8019808 <WriteSDFLASH_t+0x174>)
 8019752:	4c2e      	ldr	r4, [pc, #184]	; (801980c <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019754:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019758:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801975a:	782a      	ldrb	r2, [r5, #0]
 801975c:	2300      	movs	r3, #0
 801975e:	4621      	mov	r1, r4
 8019760:	2000      	movs	r0, #0
 8019762:	f7e8 fc95 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019766:	2800      	cmp	r0, #0
 8019768:	d1f7      	bne.n	801975a <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801976a:	4b1e      	ldr	r3, [pc, #120]	; (80197e4 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801976c:	4d28      	ldr	r5, [pc, #160]	; (8019810 <WriteSDFLASH_t+0x17c>)
 801976e:	4c29      	ldr	r4, [pc, #164]	; (8019814 <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019770:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019774:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 8019776:	782a      	ldrb	r2, [r5, #0]
 8019778:	2300      	movs	r3, #0
 801977a:	4621      	mov	r1, r4
 801977c:	2000      	movs	r0, #0
 801977e:	f7e8 fc87 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019782:	2800      	cmp	r0, #0
 8019784:	d1f7      	bne.n	8019776 <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019786:	4b17      	ldr	r3, [pc, #92]	; (80197e4 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 8019788:	4d23      	ldr	r5, [pc, #140]	; (8019818 <WriteSDFLASH_t+0x184>)
 801978a:	4c24      	ldr	r4, [pc, #144]	; (801981c <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801978c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019790:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 8019792:	782a      	ldrb	r2, [r5, #0]
 8019794:	2300      	movs	r3, #0
 8019796:	4621      	mov	r1, r4
 8019798:	2000      	movs	r0, #0
 801979a:	f7e8 fc79 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801979e:	2800      	cmp	r0, #0
 80197a0:	d1f7      	bne.n	8019792 <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80197a2:	4b10      	ldr	r3, [pc, #64]	; (80197e4 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 80197a4:	4d1e      	ldr	r5, [pc, #120]	; (8019820 <WriteSDFLASH_t+0x18c>)
 80197a6:	4c1f      	ldr	r4, [pc, #124]	; (8019824 <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80197a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80197ac:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 80197ae:	782a      	ldrb	r2, [r5, #0]
 80197b0:	2300      	movs	r3, #0
 80197b2:	4621      	mov	r1, r4
 80197b4:	2000      	movs	r0, #0
 80197b6:	f7e8 fc6b 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80197ba:	2800      	cmp	r0, #0
 80197bc:	d1f7      	bne.n	80197ae <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80197be:	4b09      	ldr	r3, [pc, #36]	; (80197e4 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 80197c0:	4d19      	ldr	r5, [pc, #100]	; (8019828 <WriteSDFLASH_t+0x194>)
 80197c2:	4c1a      	ldr	r4, [pc, #104]	; (801982c <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80197c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80197c8:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 80197ca:	782a      	ldrb	r2, [r5, #0]
 80197cc:	2300      	movs	r3, #0
 80197ce:	4621      	mov	r1, r4
 80197d0:	2000      	movs	r0, #0
 80197d2:	f7e8 fc5d 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80197d6:	2800      	cmp	r0, #0
 80197d8:	d1f7      	bne.n	80197ca <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 80197da:	f7e8 fc11 	bl	8002000 <HAL_FLASH_Lock>
}
 80197de:	b003      	add	sp, #12
 80197e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197e4:	40022000 	.word	0x40022000
 80197e8:	200925f0 	.word	0x200925f0
 80197ec:	0812b020 	.word	0x0812b020
 80197f0:	20000ebc 	.word	0x20000ebc
 80197f4:	0812b030 	.word	0x0812b030
 80197f8:	200056f6 	.word	0x200056f6
 80197fc:	0812b038 	.word	0x0812b038
 8019800:	200056f2 	.word	0x200056f2
 8019804:	0812b040 	.word	0x0812b040
 8019808:	200056ef 	.word	0x200056ef
 801980c:	0812b048 	.word	0x0812b048
 8019810:	200056f0 	.word	0x200056f0
 8019814:	0812b050 	.word	0x0812b050
 8019818:	200056f3 	.word	0x200056f3
 801981c:	0812b058 	.word	0x0812b058
 8019820:	20090a69 	.word	0x20090a69
 8019824:	0812b060 	.word	0x0812b060
 8019828:	20090a6a 	.word	0x20090a6a
 801982c:	0812b068 	.word	0x0812b068

08019830 <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 8019830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019834:	4c1b      	ldr	r4, [pc, #108]	; (80198a4 <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 8019836:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019838:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801983c:	f04f 0800 	mov.w	r8, #0
 8019840:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019844:	6125      	str	r5, [r4, #16]
{
 8019846:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 8019848:	f7e8 fbc8 	bl	8001fdc <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801984c:	f7e8 fbc6 	bl	8001fdc <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019850:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 8019852:	2064      	movs	r0, #100	; 0x64
 8019854:	f7e7 fbea 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 8019858:	4813      	ldr	r0, [pc, #76]	; (80198a8 <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801985a:	2302      	movs	r3, #2
 801985c:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 801985e:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 8019860:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 8019862:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 8019864:	2301      	movs	r3, #1
 8019866:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 8019868:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801986c:	f7e8 fcd0 	bl	8002210 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 8019870:	2032      	movs	r0, #50	; 0x32
 8019872:	f7e7 fbdb 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019876:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 8019878:	f7e8 fbc2 	bl	8002000 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801987c:	f7e8 fbae 	bl	8001fdc <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019880:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 8019882:	b2f4      	uxtb	r4, r6
 8019884:	4e09      	ldr	r6, [pc, #36]	; (80198ac <WriteFLASH_Screen+0x7c>)
 8019886:	2500      	movs	r5, #0
 8019888:	4622      	mov	r2, r4
 801988a:	462b      	mov	r3, r5
 801988c:	4631      	mov	r1, r6
 801988e:	2000      	movs	r0, #0
 8019890:	f7e8 fbfe 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019894:	2800      	cmp	r0, #0
 8019896:	d1f7      	bne.n	8019888 <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 8019898:	f7e8 fbb2 	bl	8002000 <HAL_FLASH_Lock>
}
 801989c:	b002      	add	sp, #8
 801989e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198a2:	bf00      	nop
 80198a4:	40022000 	.word	0x40022000
 80198a8:	200925f0 	.word	0x200925f0
 80198ac:	0812c020 	.word	0x0812c020

080198b0 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 80198b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80198b2:	4c5b      	ldr	r4, [pc, #364]	; (8019a20 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 80198b4:	4e5b      	ldr	r6, [pc, #364]	; (8019a24 <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80198b6:	4d5c      	ldr	r5, [pc, #368]	; (8019a28 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80198b8:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8019a2c <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 80198bc:	4f5c      	ldr	r7, [pc, #368]	; (8019a30 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 80198be:	2200      	movs	r2, #0
 80198c0:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80198c2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80198c6:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 80198c8:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80198cc:	f7f9 fb20 	bl	8012f10 <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80198d0:	462a      	mov	r2, r5
 80198d2:	4b58      	ldr	r3, [pc, #352]	; (8019a34 <Calculate_SD_Data+0x184>)
 80198d4:	4958      	ldr	r1, [pc, #352]	; (8019a38 <Calculate_SD_Data+0x188>)
 80198d6:	4620      	mov	r0, r4
 80198d8:	f7f4 fb84 	bl	800dfe4 <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 80198dc:	4638      	mov	r0, r7
 80198de:	f7f4 fbed 	bl	800e0bc <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 80198e2:	4856      	ldr	r0, [pc, #344]	; (8019a3c <Calculate_SD_Data+0x18c>)
 80198e4:	f7f4 fc2c 	bl	800e140 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 80198e8:	4b55      	ldr	r3, [pc, #340]	; (8019a40 <Calculate_SD_Data+0x190>)
 80198ea:	781a      	ldrb	r2, [r3, #0]
 80198ec:	4b55      	ldr	r3, [pc, #340]	; (8019a44 <Calculate_SD_Data+0x194>)
 80198ee:	4638      	mov	r0, r7
 80198f0:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 80198f2:	4f55      	ldr	r7, [pc, #340]	; (8019a48 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 80198f4:	f7f4 fde4 	bl	800e4c0 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 80198f8:	4620      	mov	r0, r4
 80198fa:	2101      	movs	r1, #1
 80198fc:	f7f4 fc44 	bl	800e188 <Calculate_Tc>
 8019900:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019904:	4b51      	ldr	r3, [pc, #324]	; (8019a4c <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019906:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8019a50 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801990a:	ee17 2a90 	vmov	r2, s15
 801990e:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 8019910:	a33d      	add	r3, pc, #244	; (adr r3, 8019a08 <Calculate_SD_Data+0x158>)
 8019912:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019916:	f44f 718c 	mov.w	r1, #280	; 0x118
 801991a:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801991c:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019920:	f7f9 faf6 	bl	8012f10 <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 8019924:	f7f5 f80c 	bl	800e940 <Calculate_deltaEab>
 8019928:	4b4a      	ldr	r3, [pc, #296]	; (8019a54 <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801992a:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 801992c:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801992e:	4620      	mov	r0, r4
 8019930:	f7f4 f9ac 	bl	800dc8c <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 8019934:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019936:	4d48      	ldr	r5, [pc, #288]	; (8019a58 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 8019938:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801993c:	f7f4 f9c6 	bl	800dccc <Calculate_EL_Day_Wt>
 8019940:	4b46      	ldr	r3, [pc, #280]	; (8019a5c <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019942:	4629      	mov	r1, r5
 8019944:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 8019946:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801994a:	f7f4 fa05 	bl	800dd58 <Calculate_PPFD_PPL>
 801994e:	4b44      	ldr	r3, [pc, #272]	; (8019a60 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 8019950:	4629      	mov	r1, r5
 8019952:	4620      	mov	r0, r4
 8019954:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019956:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801995a:	f7f4 fa69 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801995e:	4b41      	ldr	r3, [pc, #260]	; (8019a64 <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 8019960:	4629      	mov	r1, r5
 8019962:	4620      	mov	r0, r4
 8019964:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 8019966:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801996a:	f7f4 fa61 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801996e:	4b3e      	ldr	r3, [pc, #248]	; (8019a68 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 8019970:	4629      	mov	r1, r5
 8019972:	4620      	mov	r0, r4
 8019974:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 8019976:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801997a:	f7f4 fa59 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801997e:	4b3b      	ldr	r3, [pc, #236]	; (8019a6c <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 8019980:	4629      	mov	r1, r5
 8019982:	4620      	mov	r0, r4
 8019984:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 8019986:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801998a:	f7f4 fa51 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801998e:	4b38      	ldr	r3, [pc, #224]	; (8019a70 <Calculate_SD_Data+0x1c0>)
 8019990:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 8019994:	a31e      	add	r3, pc, #120	; (adr r3, 8019a10 <Calculate_SD_Data+0x160>)
 8019996:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801999a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8019a74 <Calculate_SD_Data+0x1c4>
 801999e:	f44f 718c 	mov.w	r1, #280	; 0x118
 80199a2:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 80199a4:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80199a8:	f7f9 fab2 	bl	8012f10 <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 80199ac:	4620      	mov	r0, r4
 80199ae:	4932      	ldr	r1, [pc, #200]	; (8019a78 <Calculate_SD_Data+0x1c8>)
 80199b0:	f7f4 f9a4 	bl	800dcfc <Calculate_EL_Night>
 80199b4:	4b31      	ldr	r3, [pc, #196]	; (8019a7c <Calculate_SD_Data+0x1cc>)
 80199b6:	eef0 0a40 	vmov.f32	s1, s0
 80199ba:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 80199be:	ed97 0a00 	vldr	s0, [r7]
 80199c2:	f7f4 f9bb 	bl	800dd3c <Calculate_SP>
 80199c6:	4b2e      	ldr	r3, [pc, #184]	; (8019a80 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 80199c8:	492e      	ldr	r1, [pc, #184]	; (8019a84 <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 80199ca:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 80199ce:	4620      	mov	r0, r4
 80199d0:	f7f4 fab8 	bl	800df44 <Calculate_ELr>
 80199d4:	4b2c      	ldr	r3, [pc, #176]	; (8019a88 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 80199d6:	492d      	ldr	r1, [pc, #180]	; (8019a8c <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 80199d8:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 80199dc:	4620      	mov	r0, r4
 80199de:	f7f4 fa97 	bl	800df10 <Calculate_ELb>
 80199e2:	4b2b      	ldr	r3, [pc, #172]	; (8019a90 <Calculate_SD_Data+0x1e0>)
 80199e4:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 80199e8:	a30b      	add	r3, pc, #44	; (adr r3, 8019a18 <Calculate_SD_Data+0x168>)
 80199ea:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80199ee:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8019a94 <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 80199f2:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 80199f6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80199fa:	2055      	movs	r0, #85	; 0x55
}
 80199fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019a00:	f7f9 ba86 	b.w	8012f10 <GUI_Bar_Measure>
 8019a04:	f3af 8000 	nop.w
 8019a08:	9999999a 	.word	0x9999999a
 8019a0c:	3fb99999 	.word	0x3fb99999
 8019a10:	33333333 	.word	0x33333333
 8019a14:	3fd33333 	.word	0x3fd33333
 8019a18:	9999999a 	.word	0x9999999a
 8019a1c:	3fd99999 	.word	0x3fd99999
 8019a20:	2000c52c 	.word	0x2000c52c
 8019a24:	20009750 	.word	0x20009750
 8019a28:	20052930 	.word	0x20052930
 8019a2c:	00000000 	.word	0x00000000
 8019a30:	2008f512 	.word	0x2008f512
 8019a34:	2008d504 	.word	0x2008d504
 8019a38:	2008a504 	.word	0x2008a504
 8019a3c:	2008f530 	.word	0x2008f530
 8019a40:	20090a69 	.word	0x20090a69
 8019a44:	200056f4 	.word	0x200056f4
 8019a48:	20095c5c 	.word	0x20095c5c
 8019a4c:	20054930 	.word	0x20054930
 8019a50:	3dcccccd 	.word	0x3dcccccd
 8019a54:	20090a66 	.word	0x20090a66
 8019a58:	20054938 	.word	0x20054938
 8019a5c:	200956c8 	.word	0x200956c8
 8019a60:	200956d0 	.word	0x200956d0
 8019a64:	2009583c 	.word	0x2009583c
 8019a68:	20095b38 	.word	0x20095b38
 8019a6c:	20095a74 	.word	0x20095a74
 8019a70:	200956cc 	.word	0x200956cc
 8019a74:	3e99999a 	.word	0x3e99999a
 8019a78:	20053930 	.word	0x20053930
 8019a7c:	200956bc 	.word	0x200956bc
 8019a80:	20095838 	.word	0x20095838
 8019a84:	2000ad28 	.word	0x2000ad28
 8019a88:	20095c58 	.word	0x20095c58
 8019a8c:	20009d28 	.word	0x20009d28
 8019a90:	20095c54 	.word	0x20095c54
 8019a94:	3ecccccd 	.word	0x3ecccccd

08019a98 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 8019a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a9c:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 8019a9e:	4bb8      	ldr	r3, [pc, #736]	; (8019d80 <SD_Witer+0x2e8>)
 8019aa0:	781b      	ldrb	r3, [r3, #0]
 8019aa2:	2b01      	cmp	r3, #1
{
 8019aa4:	b087      	sub	sp, #28
 8019aa6:	4605      	mov	r5, r0
 8019aa8:	460c      	mov	r4, r1
 8019aaa:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 8019aac:	f000 85fe 	beq.w	801a6ac <SD_Witer+0xc14>
 8019ab0:	2b02      	cmp	r3, #2
 8019ab2:	f000 85fe 	beq.w	801a6b2 <SD_Witer+0xc1a>
 8019ab6:	2b04      	cmp	r3, #4
 8019ab8:	f000 85fe 	beq.w	801a6b8 <SD_Witer+0xc20>
 8019abc:	2b08      	cmp	r3, #8
 8019abe:	f000 85fe 	beq.w	801a6be <SD_Witer+0xc26>
 8019ac2:	2b10      	cmp	r3, #16
 8019ac4:	f000 85fe 	beq.w	801a6c4 <SD_Witer+0xc2c>
 8019ac8:	4aae      	ldr	r2, [pc, #696]	; (8019d84 <SD_Witer+0x2ec>)
 8019aca:	49af      	ldr	r1, [pc, #700]	; (8019d88 <SD_Witer+0x2f0>)
 8019acc:	2b20      	cmp	r3, #32
 8019ace:	bf18      	it	ne
 8019ad0:	4611      	movne	r1, r2
 8019ad2:	a802      	add	r0, sp, #8
 8019ad4:	f005 fee5 	bl	801f8a2 <strcpy>
	
	memset(measure_buff, 0, 12);
 8019ad8:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 8019ada:	462a      	mov	r2, r5
 8019adc:	49ab      	ldr	r1, [pc, #684]	; (8019d8c <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 8019ade:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 8019ae0:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 8019ae2:	9304      	str	r3, [sp, #16]
 8019ae4:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 8019ae6:	f005 fea9 	bl	801f83c <sprintf>
		strcat(buffer_sd, digit_buff);
 8019aea:	a901      	add	r1, sp, #4
 8019aec:	48a8      	ldr	r0, [pc, #672]	; (8019d90 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 8019aee:	4da9      	ldr	r5, [pc, #676]	; (8019d94 <SD_Witer+0x2fc>)
 8019af0:	4ea7      	ldr	r6, [pc, #668]	; (8019d90 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 8019af2:	f005 fec7 	bl	801f884 <strcat>
		strcat(buffer_sd, ".txt");
 8019af6:	49a8      	ldr	r1, [pc, #672]	; (8019d98 <SD_Witer+0x300>)
 8019af8:	48a5      	ldr	r0, [pc, #660]	; (8019d90 <SD_Witer+0x2f8>)
 8019afa:	f005 fec3 	bl	801f884 <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 8019afe:	2201      	movs	r2, #1
 8019b00:	49a6      	ldr	r1, [pc, #664]	; (8019d9c <SD_Witer+0x304>)
 8019b02:	48a7      	ldr	r0, [pc, #668]	; (8019da0 <SD_Witer+0x308>)
 8019b04:	f7ef fc96 	bl	8009434 <f_mount>
 8019b08:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 8019b0a:	2800      	cmp	r0, #0
 8019b0c:	f040 85b1 	bne.w	801a672 <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 8019b10:	220a      	movs	r2, #10
 8019b12:	4631      	mov	r1, r6
 8019b14:	48a3      	ldr	r0, [pc, #652]	; (8019da4 <SD_Witer+0x30c>)
 8019b16:	f7ef fcc1 	bl	800949c <f_open>
 8019b1a:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 8019b1c:	2800      	cmp	r0, #0
 8019b1e:	f040 85a8 	bne.w	801a672 <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 8019b22:	4ba1      	ldr	r3, [pc, #644]	; (8019da8 <SD_Witer+0x310>)
 8019b24:	49a1      	ldr	r1, [pc, #644]	; (8019dac <SD_Witer+0x314>)
 8019b26:	2000      	movs	r0, #0
 8019b28:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019b2c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8019b30:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019b34:	2055      	movs	r0, #85	; 0x55
 8019b36:	f7f9 f9eb 	bl	8012f10 <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 8019b3a:	4b9d      	ldr	r3, [pc, #628]	; (8019db0 <SD_Witer+0x318>)
 8019b3c:	2c00      	cmp	r4, #0
 8019b3e:	f040 85c4 	bne.w	801a6ca <SD_Witer+0xc32>
 8019b42:	499c      	ldr	r1, [pc, #624]	; (8019db4 <SD_Witer+0x31c>)
 8019b44:	2235      	movs	r2, #53	; 0x35
 8019b46:	4897      	ldr	r0, [pc, #604]	; (8019da4 <SD_Witer+0x30c>)
 8019b48:	f7ef fdbe 	bl	80096c8 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 8019b4c:	4b9a      	ldr	r3, [pc, #616]	; (8019db8 <SD_Witer+0x320>)
 8019b4e:	6818      	ldr	r0, [r3, #0]
 8019b50:	f7e6 fd12 	bl	8000578 <__aeabi_f2d>
 8019b54:	4602      	mov	r2, r0
 8019b56:	460b      	mov	r3, r1
 8019b58:	a803      	add	r0, sp, #12
 8019b5a:	4998      	ldr	r1, [pc, #608]	; (8019dbc <SD_Witer+0x324>)
 8019b5c:	f005 fe6e 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019b60:	220c      	movs	r2, #12
 8019b62:	4b93      	ldr	r3, [pc, #588]	; (8019db0 <SD_Witer+0x318>)
 8019b64:	488f      	ldr	r0, [pc, #572]	; (8019da4 <SD_Witer+0x30c>)
 8019b66:	eb0d 0102 	add.w	r1, sp, r2
 8019b6a:	f7ef fdad 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019b6e:	2300      	movs	r3, #0
 8019b70:	9303      	str	r3, [sp, #12]
 8019b72:	9304      	str	r3, [sp, #16]
 8019b74:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 8019b76:	4b8e      	ldr	r3, [pc, #568]	; (8019db0 <SD_Witer+0x318>)
 8019b78:	2c00      	cmp	r4, #0
 8019b7a:	f040 85aa 	bne.w	801a6d2 <SD_Witer+0xc3a>
 8019b7e:	4990      	ldr	r1, [pc, #576]	; (8019dc0 <SD_Witer+0x328>)
 8019b80:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 8019b82:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8019de8 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 8019b86:	4887      	ldr	r0, [pc, #540]	; (8019da4 <SD_Witer+0x30c>)
 8019b88:	f7ef fd9e 	bl	80096c8 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 8019b8c:	f8b9 2000 	ldrh.w	r2, [r9]
 8019b90:	498c      	ldr	r1, [pc, #560]	; (8019dc4 <SD_Witer+0x32c>)
 8019b92:	a803      	add	r0, sp, #12
 8019b94:	f005 fe52 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019b98:	220c      	movs	r2, #12
 8019b9a:	4b85      	ldr	r3, [pc, #532]	; (8019db0 <SD_Witer+0x318>)
 8019b9c:	4881      	ldr	r0, [pc, #516]	; (8019da4 <SD_Witer+0x30c>)
 8019b9e:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 8019ba2:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ba4:	f7ef fd90 	bl	80096c8 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 8019ba8:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8019bac:	4985      	ldr	r1, [pc, #532]	; (8019dc4 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 8019bae:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 8019bb0:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019bb2:	9504      	str	r5, [sp, #16]
 8019bb4:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 8019bb6:	f005 fe41 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019bba:	220c      	movs	r2, #12
 8019bbc:	4b7c      	ldr	r3, [pc, #496]	; (8019db0 <SD_Witer+0x318>)
 8019bbe:	4879      	ldr	r0, [pc, #484]	; (8019da4 <SD_Witer+0x30c>)
 8019bc0:	eb0d 0102 	add.w	r1, sp, r2
 8019bc4:	f7ef fd80 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 8019bc8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8019bcc:	497d      	ldr	r1, [pc, #500]	; (8019dc4 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 8019bce:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 8019bd0:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019bd2:	9504      	str	r5, [sp, #16]
 8019bd4:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 8019bd6:	f005 fe31 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019bda:	220c      	movs	r2, #12
 8019bdc:	4b74      	ldr	r3, [pc, #464]	; (8019db0 <SD_Witer+0x318>)
 8019bde:	4871      	ldr	r0, [pc, #452]	; (8019da4 <SD_Witer+0x30c>)
 8019be0:	eb0d 0102 	add.w	r1, sp, r2
 8019be4:	f7ef fd70 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019be8:	9503      	str	r5, [sp, #12]
 8019bea:	9504      	str	r5, [sp, #16]
 8019bec:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 8019bee:	4b70      	ldr	r3, [pc, #448]	; (8019db0 <SD_Witer+0x318>)
 8019bf0:	2c00      	cmp	r4, #0
 8019bf2:	f040 8572 	bne.w	801a6da <SD_Witer+0xc42>
 8019bf6:	4974      	ldr	r1, [pc, #464]	; (8019dc8 <SD_Witer+0x330>)
 8019bf8:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 8019bfa:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8019dec <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 8019bfe:	4869      	ldr	r0, [pc, #420]	; (8019da4 <SD_Witer+0x30c>)
 8019c00:	f7ef fd62 	bl	80096c8 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 8019c04:	f8d9 0000 	ldr.w	r0, [r9]
 8019c08:	f7e6 fcb6 	bl	8000578 <__aeabi_f2d>
 8019c0c:	4602      	mov	r2, r0
 8019c0e:	460b      	mov	r3, r1
 8019c10:	a803      	add	r0, sp, #12
 8019c12:	496e      	ldr	r1, [pc, #440]	; (8019dcc <SD_Witer+0x334>)
 8019c14:	f005 fe12 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019c18:	220c      	movs	r2, #12
 8019c1a:	4b65      	ldr	r3, [pc, #404]	; (8019db0 <SD_Witer+0x318>)
 8019c1c:	4861      	ldr	r0, [pc, #388]	; (8019da4 <SD_Witer+0x30c>)
 8019c1e:	eb0d 0102 	add.w	r1, sp, r2
 8019c22:	f7ef fd51 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019c26:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 8019c28:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 8019c2c:	9503      	str	r5, [sp, #12]
 8019c2e:	9504      	str	r5, [sp, #16]
 8019c30:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 8019c32:	f7e6 fca1 	bl	8000578 <__aeabi_f2d>
 8019c36:	4602      	mov	r2, r0
 8019c38:	460b      	mov	r3, r1
 8019c3a:	a803      	add	r0, sp, #12
 8019c3c:	495f      	ldr	r1, [pc, #380]	; (8019dbc <SD_Witer+0x324>)
 8019c3e:	f005 fdfd 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019c42:	220c      	movs	r2, #12
 8019c44:	4b5a      	ldr	r3, [pc, #360]	; (8019db0 <SD_Witer+0x318>)
 8019c46:	4857      	ldr	r0, [pc, #348]	; (8019da4 <SD_Witer+0x30c>)
 8019c48:	eb0d 0102 	add.w	r1, sp, r2
 8019c4c:	f7ef fd3c 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019c50:	9503      	str	r5, [sp, #12]
 8019c52:	9504      	str	r5, [sp, #16]
 8019c54:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 8019c56:	4b56      	ldr	r3, [pc, #344]	; (8019db0 <SD_Witer+0x318>)
 8019c58:	2c00      	cmp	r4, #0
 8019c5a:	f040 8542 	bne.w	801a6e2 <SD_Witer+0xc4a>
 8019c5e:	495c      	ldr	r1, [pc, #368]	; (8019dd0 <SD_Witer+0x338>)
 8019c60:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 8019c62:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8019df0 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 8019c66:	484f      	ldr	r0, [pc, #316]	; (8019da4 <SD_Witer+0x30c>)
 8019c68:	f7ef fd2e 	bl	80096c8 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 8019c6c:	f8d9 0000 	ldr.w	r0, [r9]
 8019c70:	f7e6 fc82 	bl	8000578 <__aeabi_f2d>
 8019c74:	4602      	mov	r2, r0
 8019c76:	460b      	mov	r3, r1
 8019c78:	a803      	add	r0, sp, #12
 8019c7a:	4954      	ldr	r1, [pc, #336]	; (8019dcc <SD_Witer+0x334>)
 8019c7c:	f005 fdde 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019c80:	220c      	movs	r2, #12
 8019c82:	4b4b      	ldr	r3, [pc, #300]	; (8019db0 <SD_Witer+0x318>)
 8019c84:	4847      	ldr	r0, [pc, #284]	; (8019da4 <SD_Witer+0x30c>)
 8019c86:	eb0d 0102 	add.w	r1, sp, r2
 8019c8a:	f7ef fd1d 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019c8e:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 8019c90:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 8019c94:	9503      	str	r5, [sp, #12]
 8019c96:	9504      	str	r5, [sp, #16]
 8019c98:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 8019c9a:	f7e6 fc6d 	bl	8000578 <__aeabi_f2d>
 8019c9e:	4602      	mov	r2, r0
 8019ca0:	460b      	mov	r3, r1
 8019ca2:	a803      	add	r0, sp, #12
 8019ca4:	4945      	ldr	r1, [pc, #276]	; (8019dbc <SD_Witer+0x324>)
 8019ca6:	f005 fdc9 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019caa:	220c      	movs	r2, #12
 8019cac:	4b40      	ldr	r3, [pc, #256]	; (8019db0 <SD_Witer+0x318>)
 8019cae:	483d      	ldr	r0, [pc, #244]	; (8019da4 <SD_Witer+0x30c>)
 8019cb0:	eb0d 0102 	add.w	r1, sp, r2
 8019cb4:	f7ef fd08 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019cb8:	9503      	str	r5, [sp, #12]
 8019cba:	9504      	str	r5, [sp, #16]
 8019cbc:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 8019cbe:	4b3c      	ldr	r3, [pc, #240]	; (8019db0 <SD_Witer+0x318>)
 8019cc0:	2c00      	cmp	r4, #0
 8019cc2:	f040 8512 	bne.w	801a6ea <SD_Witer+0xc52>
 8019cc6:	4943      	ldr	r1, [pc, #268]	; (8019dd4 <SD_Witer+0x33c>)
 8019cc8:	220e      	movs	r2, #14
 8019cca:	4836      	ldr	r0, [pc, #216]	; (8019da4 <SD_Witer+0x30c>)
 8019ccc:	f7ef fcfc 	bl	80096c8 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 8019cd0:	4b41      	ldr	r3, [pc, #260]	; (8019dd8 <SD_Witer+0x340>)
 8019cd2:	881a      	ldrh	r2, [r3, #0]
 8019cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cd8:	429a      	cmp	r2, r3
 8019cda:	f040 8537 	bne.w	801a74c <SD_Witer+0xcb4>
 8019cde:	4b34      	ldr	r3, [pc, #208]	; (8019db0 <SD_Witer+0x318>)
 8019ce0:	4928      	ldr	r1, [pc, #160]	; (8019d84 <SD_Witer+0x2ec>)
 8019ce2:	4830      	ldr	r0, [pc, #192]	; (8019da4 <SD_Witer+0x30c>)
 8019ce4:	2203      	movs	r2, #3
 8019ce6:	f7ef fcef 	bl	80096c8 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 8019cea:	a123      	add	r1, pc, #140	; (adr r1, 8019d78 <SD_Witer+0x2e0>)
 8019cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cf0:	4b2d      	ldr	r3, [pc, #180]	; (8019da8 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019cf2:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8019ddc <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 8019cf6:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019cfa:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019cfe:	2055      	movs	r0, #85	; 0x55
 8019d00:	f7f9 f906 	bl	8012f10 <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 8019d04:	4b2a      	ldr	r3, [pc, #168]	; (8019db0 <SD_Witer+0x318>)
 8019d06:	2c00      	cmp	r4, #0
 8019d08:	f040 8531 	bne.w	801a76e <SD_Witer+0xcd6>
 8019d0c:	4934      	ldr	r1, [pc, #208]	; (8019de0 <SD_Witer+0x348>)
 8019d0e:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 8019d10:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8019df4 <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 8019d14:	4823      	ldr	r0, [pc, #140]	; (8019da4 <SD_Witer+0x30c>)
 8019d16:	f7ef fcd7 	bl	80096c8 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 8019d1a:	f9b9 2000 	ldrsh.w	r2, [r9]
 8019d1e:	4931      	ldr	r1, [pc, #196]	; (8019de4 <SD_Witer+0x34c>)
 8019d20:	a803      	add	r0, sp, #12
 8019d22:	f005 fd8b 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d26:	220c      	movs	r2, #12
 8019d28:	4b21      	ldr	r3, [pc, #132]	; (8019db0 <SD_Witer+0x318>)
 8019d2a:	481e      	ldr	r0, [pc, #120]	; (8019da4 <SD_Witer+0x30c>)
 8019d2c:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 8019d30:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d32:	f7ef fcc9 	bl	80096c8 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 8019d36:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 8019d3a:	492a      	ldr	r1, [pc, #168]	; (8019de4 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 8019d3c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 8019d3e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019d40:	9504      	str	r5, [sp, #16]
 8019d42:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 8019d44:	f005 fd7a 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d48:	220c      	movs	r2, #12
 8019d4a:	4b19      	ldr	r3, [pc, #100]	; (8019db0 <SD_Witer+0x318>)
 8019d4c:	4815      	ldr	r0, [pc, #84]	; (8019da4 <SD_Witer+0x30c>)
 8019d4e:	eb0d 0102 	add.w	r1, sp, r2
 8019d52:	f7ef fcb9 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 8019d56:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019d5a:	4922      	ldr	r1, [pc, #136]	; (8019de4 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 8019d5c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 8019d5e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019d60:	9504      	str	r5, [sp, #16]
 8019d62:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 8019d64:	f005 fd6a 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d68:	220c      	movs	r2, #12
 8019d6a:	4b11      	ldr	r3, [pc, #68]	; (8019db0 <SD_Witer+0x318>)
 8019d6c:	480d      	ldr	r0, [pc, #52]	; (8019da4 <SD_Witer+0x30c>)
 8019d6e:	eb0d 0102 	add.w	r1, sp, r2
 8019d72:	f7ef fca9 	bl	80096c8 <f_write>
 8019d76:	e03f      	b.n	8019df8 <SD_Witer+0x360>
 8019d78:	66666666 	.word	0x66666666
 8019d7c:	3fe66666 	.word	0x3fe66666
 8019d80:	20090a69 	.word	0x20090a69
 8019d84:	080312bb 	.word	0x080312bb
 8019d88:	080312bf 	.word	0x080312bf
 8019d8c:	080312c3 	.word	0x080312c3
 8019d90:	200925e4 	.word	0x200925e4
 8019d94:	20093630 	.word	0x20093630
 8019d98:	080312c8 	.word	0x080312c8
 8019d9c:	20093635 	.word	0x20093635
 8019da0:	200915b0 	.word	0x200915b0
 8019da4:	20092600 	.word	0x20092600
 8019da8:	20009750 	.word	0x20009750
 8019dac:	3fe00000 	.word	0x3fe00000
 8019db0:	200915a8 	.word	0x200915a8
 8019db4:	20000927 	.word	0x20000927
 8019db8:	20095838 	.word	0x20095838
 8019dbc:	08031297 	.word	0x08031297
 8019dc0:	20000440 	.word	0x20000440
 8019dc4:	080312ee 	.word	0x080312ee
 8019dc8:	200004bc 	.word	0x200004bc
 8019dcc:	080312cd 	.word	0x080312cd
 8019dd0:	2000047a 	.word	0x2000047a
 8019dd4:	2000024e 	.word	0x2000024e
 8019dd8:	20054930 	.word	0x20054930
 8019ddc:	3f333333 	.word	0x3f333333
 8019de0:	20000612 	.word	0x20000612
 8019de4:	080312d7 	.word	0x080312d7
 8019de8:	2008f512 	.word	0x2008f512
 8019dec:	2008f530 	.word	0x2008f530
 8019df0:	2008f528 	.word	0x2008f528
 8019df4:	2008f50c 	.word	0x2008f50c
							memset(measure_buff, 0, 12);
 8019df8:	9503      	str	r5, [sp, #12]
 8019dfa:	9504      	str	r5, [sp, #16]
 8019dfc:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 8019dfe:	4bb4      	ldr	r3, [pc, #720]	; (801a0d0 <SD_Witer+0x638>)
 8019e00:	2c00      	cmp	r4, #0
 8019e02:	f040 84b8 	bne.w	801a776 <SD_Witer+0xcde>
 8019e06:	49b3      	ldr	r1, [pc, #716]	; (801a0d4 <SD_Witer+0x63c>)
 8019e08:	222a      	movs	r2, #42	; 0x2a
 8019e0a:	48b3      	ldr	r0, [pc, #716]	; (801a0d8 <SD_Witer+0x640>)
 8019e0c:	f7ef fc5c 	bl	80096c8 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 8019e10:	4baf      	ldr	r3, [pc, #700]	; (801a0d0 <SD_Witer+0x638>)
 8019e12:	48b1      	ldr	r0, [pc, #708]	; (801a0d8 <SD_Witer+0x640>)
 8019e14:	2204      	movs	r2, #4
 8019e16:	a902      	add	r1, sp, #8
 8019e18:	f7ef fc56 	bl	80096c8 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 8019e1c:	4bac      	ldr	r3, [pc, #688]	; (801a0d0 <SD_Witer+0x638>)
 8019e1e:	2c00      	cmp	r4, #0
 8019e20:	f040 84ad 	bne.w	801a77e <SD_Witer+0xce6>
 8019e24:	49ad      	ldr	r1, [pc, #692]	; (801a0dc <SD_Witer+0x644>)
 8019e26:	2235      	movs	r2, #53	; 0x35
 8019e28:	48ab      	ldr	r0, [pc, #684]	; (801a0d8 <SD_Witer+0x640>)
 8019e2a:	f7ef fc4d 	bl	80096c8 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 8019e2e:	4bac      	ldr	r3, [pc, #688]	; (801a0e0 <SD_Witer+0x648>)
 8019e30:	49ac      	ldr	r1, [pc, #688]	; (801a0e4 <SD_Witer+0x64c>)
 8019e32:	881a      	ldrh	r2, [r3, #0]
 8019e34:	a803      	add	r0, sp, #12
 8019e36:	f005 fd01 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e3a:	220c      	movs	r2, #12
 8019e3c:	4ba4      	ldr	r3, [pc, #656]	; (801a0d0 <SD_Witer+0x638>)
 8019e3e:	48a6      	ldr	r0, [pc, #664]	; (801a0d8 <SD_Witer+0x640>)
 8019e40:	eb0d 0102 	add.w	r1, sp, r2
 8019e44:	f7ef fc40 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019e48:	2300      	movs	r3, #0
 8019e4a:	9303      	str	r3, [sp, #12]
 8019e4c:	9304      	str	r3, [sp, #16]
 8019e4e:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 8019e50:	4b9f      	ldr	r3, [pc, #636]	; (801a0d0 <SD_Witer+0x638>)
 8019e52:	2c00      	cmp	r4, #0
 8019e54:	f040 8497 	bne.w	801a786 <SD_Witer+0xcee>
 8019e58:	49a3      	ldr	r1, [pc, #652]	; (801a0e8 <SD_Witer+0x650>)
 8019e5a:	223b      	movs	r2, #59	; 0x3b
 8019e5c:	489e      	ldr	r0, [pc, #632]	; (801a0d8 <SD_Witer+0x640>)
 8019e5e:	f7ef fc33 	bl	80096c8 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 8019e62:	4ba2      	ldr	r3, [pc, #648]	; (801a0ec <SD_Witer+0x654>)
 8019e64:	499f      	ldr	r1, [pc, #636]	; (801a0e4 <SD_Witer+0x64c>)
 8019e66:	881a      	ldrh	r2, [r3, #0]
 8019e68:	a803      	add	r0, sp, #12
 8019e6a:	f005 fce7 	bl	801f83c <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e6e:	220c      	movs	r2, #12
 8019e70:	4b97      	ldr	r3, [pc, #604]	; (801a0d0 <SD_Witer+0x638>)
 8019e72:	4899      	ldr	r0, [pc, #612]	; (801a0d8 <SD_Witer+0x640>)
 8019e74:	eb0d 0102 	add.w	r1, sp, r2
 8019e78:	f7ef fc26 	bl	80096c8 <f_write>
							memset(measure_buff, 0, 12);
 8019e7c:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 8019e7e:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 8019e82:	9303      	str	r3, [sp, #12]
 8019e84:	9304      	str	r3, [sp, #16]
 8019e86:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 8019e88:	4b91      	ldr	r3, [pc, #580]	; (801a0d0 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 8019e8a:	f040 8484 	bne.w	801a796 <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 8019e8e:	2c00      	cmp	r4, #0
 8019e90:	f040 847d 	bne.w	801a78e <SD_Witer+0xcf6>
 8019e94:	4996      	ldr	r1, [pc, #600]	; (801a0f0 <SD_Witer+0x658>)
 8019e96:	2224      	movs	r2, #36	; 0x24
 8019e98:	488f      	ldr	r0, [pc, #572]	; (801a0d8 <SD_Witer+0x640>)
 8019e9a:	f7ef fc15 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 8019e9e:	4b95      	ldr	r3, [pc, #596]	; (801a0f4 <SD_Witer+0x65c>)
 8019ea0:	4990      	ldr	r1, [pc, #576]	; (801a0e4 <SD_Witer+0x64c>)
 8019ea2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ea6:	a803      	add	r0, sp, #12
 8019ea8:	f005 fcc8 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019eac:	220c      	movs	r2, #12
 8019eae:	4b88      	ldr	r3, [pc, #544]	; (801a0d0 <SD_Witer+0x638>)
 8019eb0:	4889      	ldr	r0, [pc, #548]	; (801a0d8 <SD_Witer+0x640>)
 8019eb2:	eb0d 0102 	add.w	r1, sp, r2
 8019eb6:	f7ef fc07 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 8019eba:	2300      	movs	r3, #0
 8019ebc:	9303      	str	r3, [sp, #12]
 8019ebe:	9304      	str	r3, [sp, #16]
 8019ec0:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 8019ec2:	a181      	add	r1, pc, #516	; (adr r1, 801a0c8 <SD_Witer+0x630>)
 8019ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ec8:	4b8b      	ldr	r3, [pc, #556]	; (801a0f8 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019eca:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801a0fc <SD_Witer+0x664>
 8019ece:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801a148 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 8019ed2:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019ed6:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019eda:	2055      	movs	r0, #85	; 0x55
 8019edc:	f7f9 f818 	bl	8012f10 <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 8019ee0:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 8019ee2:	4b7b      	ldr	r3, [pc, #492]	; (801a0d0 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 8019ee4:	f040 847d 	bne.w	801a7e2 <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 8019ee8:	2c00      	cmp	r4, #0
 8019eea:	f040 8465 	bne.w	801a7b8 <SD_Witer+0xd20>
 8019eee:	4984      	ldr	r1, [pc, #528]	; (801a100 <SD_Witer+0x668>)
 8019ef0:	2263      	movs	r2, #99	; 0x63
 8019ef2:	4879      	ldr	r0, [pc, #484]	; (801a0d8 <SD_Witer+0x640>)
 8019ef4:	4f83      	ldr	r7, [pc, #524]	; (801a104 <SD_Witer+0x66c>)
 8019ef6:	f8df b254 	ldr.w	fp, [pc, #596]	; 801a14c <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019efa:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801a0d0 <SD_Witer+0x638>
 8019efe:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801a0d8 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 8019f02:	f7ef fbe1 	bl	80096c8 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 8019f06:	f857 0b04 	ldr.w	r0, [r7], #4
 8019f0a:	f7e6 fb35 	bl	8000578 <__aeabi_f2d>
 8019f0e:	4602      	mov	r2, r0
 8019f10:	460b      	mov	r3, r1
 8019f12:	a803      	add	r0, sp, #12
 8019f14:	497c      	ldr	r1, [pc, #496]	; (801a108 <SD_Witer+0x670>)
 8019f16:	f005 fc91 	bl	801f83c <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f1a:	220c      	movs	r2, #12
 8019f1c:	4653      	mov	r3, sl
 8019f1e:	eb0d 0102 	add.w	r1, sp, r2
 8019f22:	4648      	mov	r0, r9
 8019f24:	f7ef fbd0 	bl	80096c8 <f_write>
									memset(measure_buff, 0, 12);
 8019f28:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 8019f2a:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 8019f2e:	9503      	str	r5, [sp, #12]
 8019f30:	9504      	str	r5, [sp, #16]
 8019f32:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 8019f34:	f7e6 fb20 	bl	8000578 <__aeabi_f2d>
 8019f38:	4602      	mov	r2, r0
 8019f3a:	460b      	mov	r3, r1
 8019f3c:	a803      	add	r0, sp, #12
 8019f3e:	4973      	ldr	r1, [pc, #460]	; (801a10c <SD_Witer+0x674>)
 8019f40:	f005 fc7c 	bl	801f83c <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f44:	220c      	movs	r2, #12
 8019f46:	4653      	mov	r3, sl
 8019f48:	eb0d 0102 	add.w	r1, sp, r2
 8019f4c:	4648      	mov	r0, r9
 8019f4e:	f7ef fbbb 	bl	80096c8 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 8019f52:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 8019f54:	9503      	str	r5, [sp, #12]
 8019f56:	9504      	str	r5, [sp, #16]
 8019f58:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 8019f5a:	d1d4      	bne.n	8019f06 <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 8019f5c:	4b5c      	ldr	r3, [pc, #368]	; (801a0d0 <SD_Witer+0x638>)
 8019f5e:	2c00      	cmp	r4, #0
 8019f60:	f040 842e 	bne.w	801a7c0 <SD_Witer+0xd28>
 8019f64:	496a      	ldr	r1, [pc, #424]	; (801a110 <SD_Witer+0x678>)
 8019f66:	2224      	movs	r2, #36	; 0x24
 8019f68:	485b      	ldr	r0, [pc, #364]	; (801a0d8 <SD_Witer+0x640>)
 8019f6a:	f7ef fbad 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 8019f6e:	4b69      	ldr	r3, [pc, #420]	; (801a114 <SD_Witer+0x67c>)
 8019f70:	6818      	ldr	r0, [r3, #0]
 8019f72:	f7e6 fb01 	bl	8000578 <__aeabi_f2d>
 8019f76:	4602      	mov	r2, r0
 8019f78:	460b      	mov	r3, r1
 8019f7a:	a803      	add	r0, sp, #12
 8019f7c:	4966      	ldr	r1, [pc, #408]	; (801a118 <SD_Witer+0x680>)
 8019f7e:	f005 fc5d 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f82:	220c      	movs	r2, #12
 8019f84:	4b52      	ldr	r3, [pc, #328]	; (801a0d0 <SD_Witer+0x638>)
 8019f86:	4854      	ldr	r0, [pc, #336]	; (801a0d8 <SD_Witer+0x640>)
 8019f88:	eb0d 0102 	add.w	r1, sp, r2
 8019f8c:	f7ef fb9c 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 8019f90:	2300      	movs	r3, #0
 8019f92:	9303      	str	r3, [sp, #12]
 8019f94:	9304      	str	r3, [sp, #16]
 8019f96:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 8019f98:	4b4d      	ldr	r3, [pc, #308]	; (801a0d0 <SD_Witer+0x638>)
 8019f9a:	2c00      	cmp	r4, #0
 8019f9c:	f040 8414 	bne.w	801a7c8 <SD_Witer+0xd30>
 8019fa0:	495e      	ldr	r1, [pc, #376]	; (801a11c <SD_Witer+0x684>)
 8019fa2:	2221      	movs	r2, #33	; 0x21
 8019fa4:	484c      	ldr	r0, [pc, #304]	; (801a0d8 <SD_Witer+0x640>)
 8019fa6:	f7ef fb8f 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 8019faa:	4b5d      	ldr	r3, [pc, #372]	; (801a120 <SD_Witer+0x688>)
 8019fac:	6818      	ldr	r0, [r3, #0]
 8019fae:	f7e6 fae3 	bl	8000578 <__aeabi_f2d>
 8019fb2:	4602      	mov	r2, r0
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	a803      	add	r0, sp, #12
 8019fb8:	495a      	ldr	r1, [pc, #360]	; (801a124 <SD_Witer+0x68c>)
 8019fba:	f005 fc3f 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019fbe:	220c      	movs	r2, #12
 8019fc0:	4b43      	ldr	r3, [pc, #268]	; (801a0d0 <SD_Witer+0x638>)
 8019fc2:	4845      	ldr	r0, [pc, #276]	; (801a0d8 <SD_Witer+0x640>)
 8019fc4:	eb0d 0102 	add.w	r1, sp, r2
 8019fc8:	f7ef fb7e 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 8019fcc:	2300      	movs	r3, #0
 8019fce:	9303      	str	r3, [sp, #12]
 8019fd0:	9304      	str	r3, [sp, #16]
 8019fd2:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 8019fd4:	4b3e      	ldr	r3, [pc, #248]	; (801a0d0 <SD_Witer+0x638>)
 8019fd6:	2c00      	cmp	r4, #0
 8019fd8:	f040 83fa 	bne.w	801a7d0 <SD_Witer+0xd38>
 8019fdc:	4952      	ldr	r1, [pc, #328]	; (801a128 <SD_Witer+0x690>)
 8019fde:	2223      	movs	r2, #35	; 0x23
 8019fe0:	483d      	ldr	r0, [pc, #244]	; (801a0d8 <SD_Witer+0x640>)
 8019fe2:	f7ef fb71 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 8019fe6:	4b51      	ldr	r3, [pc, #324]	; (801a12c <SD_Witer+0x694>)
 8019fe8:	6818      	ldr	r0, [r3, #0]
 8019fea:	f7e6 fac5 	bl	8000578 <__aeabi_f2d>
 8019fee:	4602      	mov	r2, r0
 8019ff0:	460b      	mov	r3, r1
 8019ff2:	a803      	add	r0, sp, #12
 8019ff4:	4948      	ldr	r1, [pc, #288]	; (801a118 <SD_Witer+0x680>)
 8019ff6:	f005 fc21 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019ffa:	220c      	movs	r2, #12
 8019ffc:	4b34      	ldr	r3, [pc, #208]	; (801a0d0 <SD_Witer+0x638>)
 8019ffe:	4836      	ldr	r0, [pc, #216]	; (801a0d8 <SD_Witer+0x640>)
 801a000:	eb0d 0102 	add.w	r1, sp, r2
 801a004:	f7ef fb60 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a008:	2300      	movs	r3, #0
 801a00a:	9303      	str	r3, [sp, #12]
 801a00c:	9304      	str	r3, [sp, #16]
 801a00e:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801a010:	4b2f      	ldr	r3, [pc, #188]	; (801a0d0 <SD_Witer+0x638>)
 801a012:	2c00      	cmp	r4, #0
 801a014:	f040 83df 	bne.w	801a7d6 <SD_Witer+0xd3e>
 801a018:	4945      	ldr	r1, [pc, #276]	; (801a130 <SD_Witer+0x698>)
 801a01a:	2239      	movs	r2, #57	; 0x39
 801a01c:	482e      	ldr	r0, [pc, #184]	; (801a0d8 <SD_Witer+0x640>)
 801a01e:	f7ef fb53 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801a022:	4b44      	ldr	r3, [pc, #272]	; (801a134 <SD_Witer+0x69c>)
 801a024:	6818      	ldr	r0, [r3, #0]
 801a026:	f7e6 faa7 	bl	8000578 <__aeabi_f2d>
 801a02a:	4602      	mov	r2, r0
 801a02c:	460b      	mov	r3, r1
 801a02e:	a803      	add	r0, sp, #12
 801a030:	4941      	ldr	r1, [pc, #260]	; (801a138 <SD_Witer+0x6a0>)
 801a032:	f005 fc03 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a036:	220c      	movs	r2, #12
 801a038:	eb0d 0102 	add.w	r1, sp, r2
 801a03c:	4b24      	ldr	r3, [pc, #144]	; (801a0d0 <SD_Witer+0x638>)
 801a03e:	4826      	ldr	r0, [pc, #152]	; (801a0d8 <SD_Witer+0x640>)
 801a040:	f7ef fb42 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a044:	4b3d      	ldr	r3, [pc, #244]	; (801a13c <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801a046:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a048:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a04a:	9503      	str	r5, [sp, #12]
 801a04c:	9504      	str	r5, [sp, #16]
 801a04e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a050:	f7e6 fa92 	bl	8000578 <__aeabi_f2d>
 801a054:	4602      	mov	r2, r0
 801a056:	460b      	mov	r3, r1
 801a058:	a803      	add	r0, sp, #12
 801a05a:	4937      	ldr	r1, [pc, #220]	; (801a138 <SD_Witer+0x6a0>)
 801a05c:	f005 fbee 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a060:	220c      	movs	r2, #12
 801a062:	eb0d 0102 	add.w	r1, sp, r2
 801a066:	4b1a      	ldr	r3, [pc, #104]	; (801a0d0 <SD_Witer+0x638>)
 801a068:	481b      	ldr	r0, [pc, #108]	; (801a0d8 <SD_Witer+0x640>)
 801a06a:	f7ef fb2d 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a06e:	4b34      	ldr	r3, [pc, #208]	; (801a140 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801a070:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a072:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a074:	9504      	str	r5, [sp, #16]
 801a076:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a078:	f7e6 fa7e 	bl	8000578 <__aeabi_f2d>
 801a07c:	4602      	mov	r2, r0
 801a07e:	460b      	mov	r3, r1
 801a080:	a803      	add	r0, sp, #12
 801a082:	492d      	ldr	r1, [pc, #180]	; (801a138 <SD_Witer+0x6a0>)
 801a084:	f005 fbda 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a088:	220c      	movs	r2, #12
 801a08a:	eb0d 0102 	add.w	r1, sp, r2
 801a08e:	4b10      	ldr	r3, [pc, #64]	; (801a0d0 <SD_Witer+0x638>)
 801a090:	4811      	ldr	r0, [pc, #68]	; (801a0d8 <SD_Witer+0x640>)
 801a092:	f7ef fb19 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a096:	4b2b      	ldr	r3, [pc, #172]	; (801a144 <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801a098:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a09a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a09c:	9504      	str	r5, [sp, #16]
 801a09e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a0a0:	f7e6 fa6a 	bl	8000578 <__aeabi_f2d>
 801a0a4:	4602      	mov	r2, r0
 801a0a6:	460b      	mov	r3, r1
 801a0a8:	a803      	add	r0, sp, #12
 801a0aa:	4923      	ldr	r1, [pc, #140]	; (801a138 <SD_Witer+0x6a0>)
 801a0ac:	f005 fbc6 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a0b0:	220c      	movs	r2, #12
 801a0b2:	4b07      	ldr	r3, [pc, #28]	; (801a0d0 <SD_Witer+0x638>)
 801a0b4:	4808      	ldr	r0, [pc, #32]	; (801a0d8 <SD_Witer+0x640>)
 801a0b6:	eb0d 0102 	add.w	r1, sp, r2
 801a0ba:	f7ef fb05 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a0be:	9503      	str	r5, [sp, #12]
 801a0c0:	9504      	str	r5, [sp, #16]
 801a0c2:	9505      	str	r5, [sp, #20]
 801a0c4:	e044      	b.n	801a150 <SD_Witer+0x6b8>
 801a0c6:	bf00      	nop
 801a0c8:	9999999a 	.word	0x9999999a
 801a0cc:	3fe99999 	.word	0x3fe99999
 801a0d0:	200915a8 	.word	0x200915a8
 801a0d4:	200008df 	.word	0x200008df
 801a0d8:	20092600 	.word	0x20092600
 801a0dc:	20000a07 	.word	0x20000a07
 801a0e0:	20095b34 	.word	0x20095b34
 801a0e4:	080312ee 	.word	0x080312ee
 801a0e8:	200009b2 	.word	0x200009b2
 801a0ec:	200959f4 	.word	0x200959f4
 801a0f0:	2000096f 	.word	0x2000096f
 801a0f4:	20090a66 	.word	0x20090a66
 801a0f8:	20009750 	.word	0x20009750
 801a0fc:	3f4ccccd 	.word	0x3f4ccccd
 801a100:	20000567 	.word	0x20000567
 801a104:	2000c52c 	.word	0x2000c52c
 801a108:	080312db 	.word	0x080312db
 801a10c:	080312e0 	.word	0x080312e0
 801a110:	2000051e 	.word	0x2000051e
 801a114:	20095c5c 	.word	0x20095c5c
 801a118:	08031292 	.word	0x08031292
 801a11c:	200005dc 	.word	0x200005dc
 801a120:	200956c8 	.word	0x200956c8
 801a124:	0803128d 	.word	0x0803128d
 801a128:	20000810 	.word	0x20000810
 801a12c:	200956d0 	.word	0x200956d0
 801a130:	200007c4 	.word	0x200007c4
 801a134:	2009583c 	.word	0x2009583c
 801a138:	080312e7 	.word	0x080312e7
 801a13c:	20095b38 	.word	0x20095b38
 801a140:	20095a74 	.word	0x20095a74
 801a144:	200956cc 	.word	0x200956cc
 801a148:	2000d52c 	.word	0x2000d52c
 801a14c:	20054938 	.word	0x20054938
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801a150:	4baf      	ldr	r3, [pc, #700]	; (801a410 <SD_Witer+0x978>)
 801a152:	2c00      	cmp	r4, #0
 801a154:	f040 8342 	bne.w	801a7dc <SD_Witer+0xd44>
 801a158:	49ae      	ldr	r1, [pc, #696]	; (801a414 <SD_Witer+0x97c>)
 801a15a:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801a15c:	48ae      	ldr	r0, [pc, #696]	; (801a418 <SD_Witer+0x980>)
 801a15e:	f7ef fab3 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801a162:	4bae      	ldr	r3, [pc, #696]	; (801a41c <SD_Witer+0x984>)
 801a164:	6818      	ldr	r0, [r3, #0]
 801a166:	f7e6 fa07 	bl	8000578 <__aeabi_f2d>
 801a16a:	4602      	mov	r2, r0
 801a16c:	460b      	mov	r3, r1
 801a16e:	a803      	add	r0, sp, #12
 801a170:	49ab      	ldr	r1, [pc, #684]	; (801a420 <SD_Witer+0x988>)
 801a172:	f005 fb63 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a176:	220c      	movs	r2, #12
 801a178:	eb0d 0102 	add.w	r1, sp, r2
 801a17c:	4ba4      	ldr	r3, [pc, #656]	; (801a410 <SD_Witer+0x978>)
 801a17e:	48a6      	ldr	r0, [pc, #664]	; (801a418 <SD_Witer+0x980>)
 801a180:	f7ef faa2 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a184:	4ba7      	ldr	r3, [pc, #668]	; (801a424 <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801a186:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a188:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a18a:	9503      	str	r5, [sp, #12]
 801a18c:	9504      	str	r5, [sp, #16]
 801a18e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a190:	f7e6 f9f2 	bl	8000578 <__aeabi_f2d>
 801a194:	4602      	mov	r2, r0
 801a196:	460b      	mov	r3, r1
 801a198:	a803      	add	r0, sp, #12
 801a19a:	49a3      	ldr	r1, [pc, #652]	; (801a428 <SD_Witer+0x990>)
 801a19c:	f005 fb4e 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a1a0:	220c      	movs	r2, #12
 801a1a2:	eb0d 0102 	add.w	r1, sp, r2
 801a1a6:	4b9a      	ldr	r3, [pc, #616]	; (801a410 <SD_Witer+0x978>)
 801a1a8:	489b      	ldr	r0, [pc, #620]	; (801a418 <SD_Witer+0x980>)
 801a1aa:	f7ef fa8d 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801a1ae:	a196      	add	r1, pc, #600	; (adr r1, 801a408 <SD_Witer+0x970>)
 801a1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1b4:	4b9d      	ldr	r3, [pc, #628]	; (801a42c <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a1b6:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801a430 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801a1ba:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801a1bc:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a1c0:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a1c4:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801a1c6:	9504      	str	r5, [sp, #16]
 801a1c8:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a1ca:	f7f8 fea1 	bl	8012f10 <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801a1ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a1d2:	2b01      	cmp	r3, #1
 801a1d4:	f040 824d 	bne.w	801a672 <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801a1d8:	4b8d      	ldr	r3, [pc, #564]	; (801a410 <SD_Witer+0x978>)
 801a1da:	2c00      	cmp	r4, #0
 801a1dc:	f040 8407 	bne.w	801a9ee <SD_Witer+0xf56>
 801a1e0:	4994      	ldr	r1, [pc, #592]	; (801a434 <SD_Witer+0x99c>)
 801a1e2:	227d      	movs	r2, #125	; 0x7d
 801a1e4:	488c      	ldr	r0, [pc, #560]	; (801a418 <SD_Witer+0x980>)
 801a1e6:	f7ef fa6f 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801a1ea:	2297      	movs	r2, #151	; 0x97
 801a1ec:	4992      	ldr	r1, [pc, #584]	; (801a438 <SD_Witer+0x9a0>)
 801a1ee:	a803      	add	r0, sp, #12
 801a1f0:	f005 fb24 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a1f4:	220c      	movs	r2, #12
 801a1f6:	4b86      	ldr	r3, [pc, #536]	; (801a410 <SD_Witer+0x978>)
 801a1f8:	4887      	ldr	r0, [pc, #540]	; (801a418 <SD_Witer+0x980>)
 801a1fa:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801a1fe:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a200:	f7ef fa62 	bl	80096c8 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801a204:	22e7      	movs	r2, #231	; 0xe7
 801a206:	498d      	ldr	r1, [pc, #564]	; (801a43c <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801a208:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801a20a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a20c:	9504      	str	r5, [sp, #16]
 801a20e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801a210:	f005 fb14 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a214:	220c      	movs	r2, #12
 801a216:	4b7e      	ldr	r3, [pc, #504]	; (801a410 <SD_Witer+0x978>)
 801a218:	487f      	ldr	r0, [pc, #508]	; (801a418 <SD_Witer+0x980>)
 801a21a:	eb0d 0102 	add.w	r1, sp, r2
 801a21e:	f7ef fa53 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a222:	220d      	movs	r2, #13
 801a224:	4986      	ldr	r1, [pc, #536]	; (801a440 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801a226:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a228:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a22a:	9504      	str	r5, [sp, #16]
 801a22c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a22e:	f005 fb05 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a232:	220c      	movs	r2, #12
 801a234:	4b76      	ldr	r3, [pc, #472]	; (801a410 <SD_Witer+0x978>)
 801a236:	4878      	ldr	r0, [pc, #480]	; (801a418 <SD_Witer+0x980>)
 801a238:	eb0d 0102 	add.w	r1, sp, r2
 801a23c:	f7ef fa44 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801a240:	221d      	movs	r2, #29
 801a242:	497d      	ldr	r1, [pc, #500]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a244:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801a246:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a248:	9504      	str	r5, [sp, #16]
 801a24a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801a24c:	f005 faf6 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a250:	220c      	movs	r2, #12
 801a252:	4b6f      	ldr	r3, [pc, #444]	; (801a410 <SD_Witer+0x978>)
 801a254:	4870      	ldr	r0, [pc, #448]	; (801a418 <SD_Witer+0x980>)
 801a256:	eb0d 0102 	add.w	r1, sp, r2
 801a25a:	f7ef fa35 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801a25e:	2231      	movs	r2, #49	; 0x31
 801a260:	4975      	ldr	r1, [pc, #468]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a262:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801a264:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a266:	9504      	str	r5, [sp, #16]
 801a268:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801a26a:	f005 fae7 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a26e:	220c      	movs	r2, #12
 801a270:	4b67      	ldr	r3, [pc, #412]	; (801a410 <SD_Witer+0x978>)
 801a272:	4869      	ldr	r0, [pc, #420]	; (801a418 <SD_Witer+0x980>)
 801a274:	eb0d 0102 	add.w	r1, sp, r2
 801a278:	f7ef fa26 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801a27c:	222c      	movs	r2, #44	; 0x2c
 801a27e:	496e      	ldr	r1, [pc, #440]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a280:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801a282:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a284:	9504      	str	r5, [sp, #16]
 801a286:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801a288:	f005 fad8 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a28c:	220c      	movs	r2, #12
 801a28e:	4b60      	ldr	r3, [pc, #384]	; (801a410 <SD_Witer+0x978>)
 801a290:	4861      	ldr	r0, [pc, #388]	; (801a418 <SD_Witer+0x980>)
 801a292:	eb0d 0102 	add.w	r1, sp, r2
 801a296:	f7ef fa17 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801a29a:	2237      	movs	r2, #55	; 0x37
 801a29c:	4966      	ldr	r1, [pc, #408]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a29e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801a2a0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a2a2:	9504      	str	r5, [sp, #16]
 801a2a4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801a2a6:	f005 fac9 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a2aa:	220c      	movs	r2, #12
 801a2ac:	4b58      	ldr	r3, [pc, #352]	; (801a410 <SD_Witer+0x978>)
 801a2ae:	485a      	ldr	r0, [pc, #360]	; (801a418 <SD_Witer+0x980>)
 801a2b0:	eb0d 0102 	add.w	r1, sp, r2
 801a2b4:	f7ef fa08 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801a2b8:	2244      	movs	r2, #68	; 0x44
 801a2ba:	495f      	ldr	r1, [pc, #380]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a2bc:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801a2be:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a2c0:	9504      	str	r5, [sp, #16]
 801a2c2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801a2c4:	f005 faba 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a2c8:	220c      	movs	r2, #12
 801a2ca:	4b51      	ldr	r3, [pc, #324]	; (801a410 <SD_Witer+0x978>)
 801a2cc:	4852      	ldr	r0, [pc, #328]	; (801a418 <SD_Witer+0x980>)
 801a2ce:	eb0d 0102 	add.w	r1, sp, r2
 801a2d2:	f7ef f9f9 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801a2d6:	224f      	movs	r2, #79	; 0x4f
 801a2d8:	4957      	ldr	r1, [pc, #348]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a2da:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801a2dc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a2de:	9504      	str	r5, [sp, #16]
 801a2e0:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801a2e2:	f005 faab 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a2e6:	220c      	movs	r2, #12
 801a2e8:	4b49      	ldr	r3, [pc, #292]	; (801a410 <SD_Witer+0x978>)
 801a2ea:	484b      	ldr	r0, [pc, #300]	; (801a418 <SD_Witer+0x980>)
 801a2ec:	eb0d 0102 	add.w	r1, sp, r2
 801a2f0:	f7ef f9ea 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801a2f4:	2258      	movs	r2, #88	; 0x58
 801a2f6:	4950      	ldr	r1, [pc, #320]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a2f8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801a2fa:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a2fc:	9504      	str	r5, [sp, #16]
 801a2fe:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801a300:	f005 fa9c 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a304:	220c      	movs	r2, #12
 801a306:	4b42      	ldr	r3, [pc, #264]	; (801a410 <SD_Witer+0x978>)
 801a308:	4843      	ldr	r0, [pc, #268]	; (801a418 <SD_Witer+0x980>)
 801a30a:	eb0d 0102 	add.w	r1, sp, r2
 801a30e:	f7ef f9db 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801a312:	2262      	movs	r2, #98	; 0x62
 801a314:	4948      	ldr	r1, [pc, #288]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a316:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801a318:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a31a:	9504      	str	r5, [sp, #16]
 801a31c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801a31e:	f005 fa8d 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a322:	220c      	movs	r2, #12
 801a324:	4b3a      	ldr	r3, [pc, #232]	; (801a410 <SD_Witer+0x978>)
 801a326:	483c      	ldr	r0, [pc, #240]	; (801a418 <SD_Witer+0x980>)
 801a328:	eb0d 0102 	add.w	r1, sp, r2
 801a32c:	f7ef f9cc 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801a330:	2269      	movs	r2, #105	; 0x69
 801a332:	4941      	ldr	r1, [pc, #260]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a334:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801a336:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a338:	9504      	str	r5, [sp, #16]
 801a33a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801a33c:	f005 fa7e 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a340:	220c      	movs	r2, #12
 801a342:	4b33      	ldr	r3, [pc, #204]	; (801a410 <SD_Witer+0x978>)
 801a344:	4834      	ldr	r0, [pc, #208]	; (801a418 <SD_Witer+0x980>)
 801a346:	eb0d 0102 	add.w	r1, sp, r2
 801a34a:	f7ef f9bd 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801a34e:	2270      	movs	r2, #112	; 0x70
 801a350:	4939      	ldr	r1, [pc, #228]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a352:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801a354:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a356:	9504      	str	r5, [sp, #16]
 801a358:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801a35a:	f005 fa6f 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a35e:	220c      	movs	r2, #12
 801a360:	4b2b      	ldr	r3, [pc, #172]	; (801a410 <SD_Witer+0x978>)
 801a362:	482d      	ldr	r0, [pc, #180]	; (801a418 <SD_Witer+0x980>)
 801a364:	eb0d 0102 	add.w	r1, sp, r2
 801a368:	f7ef f9ae 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801a36c:	227f      	movs	r2, #127	; 0x7f
 801a36e:	4932      	ldr	r1, [pc, #200]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a370:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801a372:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a374:	9504      	str	r5, [sp, #16]
 801a376:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801a378:	f005 fa60 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a37c:	220c      	movs	r2, #12
 801a37e:	4b24      	ldr	r3, [pc, #144]	; (801a410 <SD_Witer+0x978>)
 801a380:	4825      	ldr	r0, [pc, #148]	; (801a418 <SD_Witer+0x980>)
 801a382:	eb0d 0102 	add.w	r1, sp, r2
 801a386:	f7ef f99f 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801a38a:	2285      	movs	r2, #133	; 0x85
 801a38c:	492a      	ldr	r1, [pc, #168]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a38e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801a390:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a392:	9504      	str	r5, [sp, #16]
 801a394:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801a396:	f005 fa51 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a39a:	220c      	movs	r2, #12
 801a39c:	4b1c      	ldr	r3, [pc, #112]	; (801a410 <SD_Witer+0x978>)
 801a39e:	481e      	ldr	r0, [pc, #120]	; (801a418 <SD_Witer+0x980>)
 801a3a0:	eb0d 0102 	add.w	r1, sp, r2
 801a3a4:	f7ef f990 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801a3a8:	2294      	movs	r2, #148	; 0x94
 801a3aa:	4923      	ldr	r1, [pc, #140]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a3ac:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801a3ae:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a3b0:	9504      	str	r5, [sp, #16]
 801a3b2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801a3b4:	f005 fa42 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3b8:	220c      	movs	r2, #12
 801a3ba:	4b15      	ldr	r3, [pc, #84]	; (801a410 <SD_Witer+0x978>)
 801a3bc:	4816      	ldr	r0, [pc, #88]	; (801a418 <SD_Witer+0x980>)
 801a3be:	eb0d 0102 	add.w	r1, sp, r2
 801a3c2:	f7ef f981 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801a3c6:	2298      	movs	r2, #152	; 0x98
 801a3c8:	491b      	ldr	r1, [pc, #108]	; (801a438 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a3ca:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801a3cc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a3ce:	9504      	str	r5, [sp, #16]
 801a3d0:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801a3d2:	f005 fa33 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3d6:	220c      	movs	r2, #12
 801a3d8:	4b0d      	ldr	r3, [pc, #52]	; (801a410 <SD_Witer+0x978>)
 801a3da:	480f      	ldr	r0, [pc, #60]	; (801a418 <SD_Witer+0x980>)
 801a3dc:	eb0d 0102 	add.w	r1, sp, r2
 801a3e0:	f7ef f972 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a3e4:	9503      	str	r5, [sp, #12]
 801a3e6:	9504      	str	r5, [sp, #16]
 801a3e8:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a3ea:	4b09      	ldr	r3, [pc, #36]	; (801a410 <SD_Witer+0x978>)
 801a3ec:	2c00      	cmp	r4, #0
 801a3ee:	f040 8302 	bne.w	801a9f6 <SD_Witer+0xf5e>
 801a3f2:	4914      	ldr	r1, [pc, #80]	; (801a444 <SD_Witer+0x9ac>)
 801a3f4:	227f      	movs	r2, #127	; 0x7f
 801a3f6:	4808      	ldr	r0, [pc, #32]	; (801a418 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a3f8:	4d13      	ldr	r5, [pc, #76]	; (801a448 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a3fa:	f7ef f965 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801a3fe:	4b13      	ldr	r3, [pc, #76]	; (801a44c <SD_Witer+0x9b4>)
 801a400:	e026      	b.n	801a450 <SD_Witer+0x9b8>
 801a402:	bf00      	nop
 801a404:	f3af 8000 	nop.w
 801a408:	cccccccd 	.word	0xcccccccd
 801a40c:	3feccccc 	.word	0x3feccccc
 801a410:	200915a8 	.word	0x200915a8
 801a414:	200004f9 	.word	0x200004f9
 801a418:	20092600 	.word	0x20092600
 801a41c:	20095c54 	.word	0x20095c54
 801a420:	080312e7 	.word	0x080312e7
 801a424:	20095c58 	.word	0x20095c58
 801a428:	08031292 	.word	0x08031292
 801a42c:	20009750 	.word	0x20009750
 801a430:	3f666666 	.word	0x3f666666
 801a434:	200003b1 	.word	0x200003b1
 801a438:	080312ee 	.word	0x080312ee
 801a43c:	080244b1 	.word	0x080244b1
 801a440:	080312ed 	.word	0x080312ed
 801a444:	200002c7 	.word	0x200002c7
 801a448:	20003614 	.word	0x20003614
 801a44c:	20003623 	.word	0x20003623
 801a450:	49a8      	ldr	r1, [pc, #672]	; (801a6f4 <SD_Witer+0xc5c>)
 801a452:	781a      	ldrb	r2, [r3, #0]
 801a454:	a803      	add	r0, sp, #12
 801a456:	f005 f9f1 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a45a:	220c      	movs	r2, #12
 801a45c:	eb0d 0102 	add.w	r1, sp, r2
 801a460:	4ba5      	ldr	r3, [pc, #660]	; (801a6f8 <SD_Witer+0xc60>)
 801a462:	48a6      	ldr	r0, [pc, #664]	; (801a6fc <SD_Witer+0xc64>)
 801a464:	f7ef f930 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a468:	4ba5      	ldr	r3, [pc, #660]	; (801a700 <SD_Witer+0xc68>)
 801a46a:	49a2      	ldr	r1, [pc, #648]	; (801a6f4 <SD_Witer+0xc5c>)
 801a46c:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801a46e:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a470:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a472:	9403      	str	r4, [sp, #12]
 801a474:	9404      	str	r4, [sp, #16]
 801a476:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a478:	f005 f9e0 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a47c:	220c      	movs	r2, #12
 801a47e:	eb0d 0102 	add.w	r1, sp, r2
 801a482:	4b9d      	ldr	r3, [pc, #628]	; (801a6f8 <SD_Witer+0xc60>)
 801a484:	489d      	ldr	r0, [pc, #628]	; (801a6fc <SD_Witer+0xc64>)
 801a486:	f7ef f91f 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801a48a:	4b9e      	ldr	r3, [pc, #632]	; (801a704 <SD_Witer+0xc6c>)
 801a48c:	499e      	ldr	r1, [pc, #632]	; (801a708 <SD_Witer+0xc70>)
 801a48e:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801a490:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801a492:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a494:	9404      	str	r4, [sp, #16]
 801a496:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801a498:	f005 f9d0 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a49c:	220c      	movs	r2, #12
 801a49e:	4b96      	ldr	r3, [pc, #600]	; (801a6f8 <SD_Witer+0xc60>)
 801a4a0:	4896      	ldr	r0, [pc, #600]	; (801a6fc <SD_Witer+0xc64>)
 801a4a2:	eb0d 0102 	add.w	r1, sp, r2
 801a4a6:	f7ef f90f 	bl	80096c8 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a4aa:	782a      	ldrb	r2, [r5, #0]
 801a4ac:	4997      	ldr	r1, [pc, #604]	; (801a70c <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801a4ae:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a4b0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a4b2:	9404      	str	r4, [sp, #16]
 801a4b4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a4b6:	f005 f9c1 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4ba:	220c      	movs	r2, #12
 801a4bc:	4b8e      	ldr	r3, [pc, #568]	; (801a6f8 <SD_Witer+0xc60>)
 801a4be:	488f      	ldr	r0, [pc, #572]	; (801a6fc <SD_Witer+0xc64>)
 801a4c0:	eb0d 0102 	add.w	r1, sp, r2
 801a4c4:	f7ef f900 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a4c8:	786a      	ldrb	r2, [r5, #1]
 801a4ca:	498a      	ldr	r1, [pc, #552]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a4cc:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a4ce:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a4d0:	9404      	str	r4, [sp, #16]
 801a4d2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a4d4:	f005 f9b2 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4d8:	220c      	movs	r2, #12
 801a4da:	4b87      	ldr	r3, [pc, #540]	; (801a6f8 <SD_Witer+0xc60>)
 801a4dc:	4887      	ldr	r0, [pc, #540]	; (801a6fc <SD_Witer+0xc64>)
 801a4de:	eb0d 0102 	add.w	r1, sp, r2
 801a4e2:	f7ef f8f1 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a4e6:	78aa      	ldrb	r2, [r5, #2]
 801a4e8:	4982      	ldr	r1, [pc, #520]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a4ea:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a4ec:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a4ee:	9404      	str	r4, [sp, #16]
 801a4f0:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a4f2:	f005 f9a3 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4f6:	220c      	movs	r2, #12
 801a4f8:	4b7f      	ldr	r3, [pc, #508]	; (801a6f8 <SD_Witer+0xc60>)
 801a4fa:	4880      	ldr	r0, [pc, #512]	; (801a6fc <SD_Witer+0xc64>)
 801a4fc:	eb0d 0102 	add.w	r1, sp, r2
 801a500:	f7ef f8e2 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a504:	78ea      	ldrb	r2, [r5, #3]
 801a506:	497b      	ldr	r1, [pc, #492]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a508:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a50a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a50c:	9404      	str	r4, [sp, #16]
 801a50e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a510:	f005 f994 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a514:	220c      	movs	r2, #12
 801a516:	4b78      	ldr	r3, [pc, #480]	; (801a6f8 <SD_Witer+0xc60>)
 801a518:	4878      	ldr	r0, [pc, #480]	; (801a6fc <SD_Witer+0xc64>)
 801a51a:	eb0d 0102 	add.w	r1, sp, r2
 801a51e:	f7ef f8d3 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a522:	792a      	ldrb	r2, [r5, #4]
 801a524:	4973      	ldr	r1, [pc, #460]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a526:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a528:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a52a:	9404      	str	r4, [sp, #16]
 801a52c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a52e:	f005 f985 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a532:	220c      	movs	r2, #12
 801a534:	4b70      	ldr	r3, [pc, #448]	; (801a6f8 <SD_Witer+0xc60>)
 801a536:	4871      	ldr	r0, [pc, #452]	; (801a6fc <SD_Witer+0xc64>)
 801a538:	eb0d 0102 	add.w	r1, sp, r2
 801a53c:	f7ef f8c4 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a540:	796a      	ldrb	r2, [r5, #5]
 801a542:	496c      	ldr	r1, [pc, #432]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a544:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a546:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a548:	9404      	str	r4, [sp, #16]
 801a54a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a54c:	f005 f976 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a550:	220c      	movs	r2, #12
 801a552:	4b69      	ldr	r3, [pc, #420]	; (801a6f8 <SD_Witer+0xc60>)
 801a554:	4869      	ldr	r0, [pc, #420]	; (801a6fc <SD_Witer+0xc64>)
 801a556:	eb0d 0102 	add.w	r1, sp, r2
 801a55a:	f7ef f8b5 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a55e:	79aa      	ldrb	r2, [r5, #6]
 801a560:	4964      	ldr	r1, [pc, #400]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a562:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a564:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a566:	9404      	str	r4, [sp, #16]
 801a568:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a56a:	f005 f967 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a56e:	220c      	movs	r2, #12
 801a570:	4b61      	ldr	r3, [pc, #388]	; (801a6f8 <SD_Witer+0xc60>)
 801a572:	4862      	ldr	r0, [pc, #392]	; (801a6fc <SD_Witer+0xc64>)
 801a574:	eb0d 0102 	add.w	r1, sp, r2
 801a578:	f7ef f8a6 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a57c:	79ea      	ldrb	r2, [r5, #7]
 801a57e:	495d      	ldr	r1, [pc, #372]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a580:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a582:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a584:	9404      	str	r4, [sp, #16]
 801a586:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a588:	f005 f958 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a58c:	220c      	movs	r2, #12
 801a58e:	4b5a      	ldr	r3, [pc, #360]	; (801a6f8 <SD_Witer+0xc60>)
 801a590:	485a      	ldr	r0, [pc, #360]	; (801a6fc <SD_Witer+0xc64>)
 801a592:	eb0d 0102 	add.w	r1, sp, r2
 801a596:	f7ef f897 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a59a:	7a2a      	ldrb	r2, [r5, #8]
 801a59c:	4955      	ldr	r1, [pc, #340]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a59e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a5a0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a5a2:	9404      	str	r4, [sp, #16]
 801a5a4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a5a6:	f005 f949 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5aa:	220c      	movs	r2, #12
 801a5ac:	4b52      	ldr	r3, [pc, #328]	; (801a6f8 <SD_Witer+0xc60>)
 801a5ae:	4853      	ldr	r0, [pc, #332]	; (801a6fc <SD_Witer+0xc64>)
 801a5b0:	eb0d 0102 	add.w	r1, sp, r2
 801a5b4:	f7ef f888 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a5b8:	7a6a      	ldrb	r2, [r5, #9]
 801a5ba:	494e      	ldr	r1, [pc, #312]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a5bc:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a5be:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a5c0:	9404      	str	r4, [sp, #16]
 801a5c2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a5c4:	f005 f93a 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5c8:	220c      	movs	r2, #12
 801a5ca:	4b4b      	ldr	r3, [pc, #300]	; (801a6f8 <SD_Witer+0xc60>)
 801a5cc:	484b      	ldr	r0, [pc, #300]	; (801a6fc <SD_Witer+0xc64>)
 801a5ce:	eb0d 0102 	add.w	r1, sp, r2
 801a5d2:	f7ef f879 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a5d6:	7aaa      	ldrb	r2, [r5, #10]
 801a5d8:	4946      	ldr	r1, [pc, #280]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a5da:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a5dc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a5de:	9404      	str	r4, [sp, #16]
 801a5e0:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a5e2:	f005 f92b 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5e6:	220c      	movs	r2, #12
 801a5e8:	4b43      	ldr	r3, [pc, #268]	; (801a6f8 <SD_Witer+0xc60>)
 801a5ea:	4844      	ldr	r0, [pc, #272]	; (801a6fc <SD_Witer+0xc64>)
 801a5ec:	eb0d 0102 	add.w	r1, sp, r2
 801a5f0:	f7ef f86a 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a5f4:	7aea      	ldrb	r2, [r5, #11]
 801a5f6:	493f      	ldr	r1, [pc, #252]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a5f8:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a5fa:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a5fc:	9404      	str	r4, [sp, #16]
 801a5fe:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a600:	f005 f91c 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a604:	220c      	movs	r2, #12
 801a606:	4b3c      	ldr	r3, [pc, #240]	; (801a6f8 <SD_Witer+0xc60>)
 801a608:	483c      	ldr	r0, [pc, #240]	; (801a6fc <SD_Witer+0xc64>)
 801a60a:	eb0d 0102 	add.w	r1, sp, r2
 801a60e:	f7ef f85b 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a612:	7b2a      	ldrb	r2, [r5, #12]
 801a614:	4937      	ldr	r1, [pc, #220]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a616:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a618:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a61a:	9404      	str	r4, [sp, #16]
 801a61c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a61e:	f005 f90d 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a622:	220c      	movs	r2, #12
 801a624:	4b34      	ldr	r3, [pc, #208]	; (801a6f8 <SD_Witer+0xc60>)
 801a626:	4835      	ldr	r0, [pc, #212]	; (801a6fc <SD_Witer+0xc64>)
 801a628:	eb0d 0102 	add.w	r1, sp, r2
 801a62c:	f7ef f84c 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a630:	7b6a      	ldrb	r2, [r5, #13]
 801a632:	4930      	ldr	r1, [pc, #192]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a634:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a636:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a638:	9404      	str	r4, [sp, #16]
 801a63a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a63c:	f005 f8fe 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a640:	220c      	movs	r2, #12
 801a642:	4b2d      	ldr	r3, [pc, #180]	; (801a6f8 <SD_Witer+0xc60>)
 801a644:	482d      	ldr	r0, [pc, #180]	; (801a6fc <SD_Witer+0xc64>)
 801a646:	eb0d 0102 	add.w	r1, sp, r2
 801a64a:	f7ef f83d 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a64e:	7baa      	ldrb	r2, [r5, #14]
 801a650:	4928      	ldr	r1, [pc, #160]	; (801a6f4 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a652:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a654:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a656:	9404      	str	r4, [sp, #16]
 801a658:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a65a:	f005 f8ef 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a65e:	220c      	movs	r2, #12
 801a660:	4b25      	ldr	r3, [pc, #148]	; (801a6f8 <SD_Witer+0xc60>)
 801a662:	4826      	ldr	r0, [pc, #152]	; (801a6fc <SD_Witer+0xc64>)
 801a664:	eb0d 0102 	add.w	r1, sp, r2
 801a668:	f7ef f82e 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a66c:	9403      	str	r4, [sp, #12]
 801a66e:	9404      	str	r4, [sp, #16]
 801a670:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801a672:	4822      	ldr	r0, [pc, #136]	; (801a6fc <SD_Witer+0xc64>)
 801a674:	f7ef f946 	bl	8009904 <f_close>
				memset(buffer_sd, 0, 11);
 801a678:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a67a:	4925      	ldr	r1, [pc, #148]	; (801a710 <SD_Witer+0xc78>)
 801a67c:	4825      	ldr	r0, [pc, #148]	; (801a714 <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801a67e:	6072      	str	r2, [r6, #4]
 801a680:	6032      	str	r2, [r6, #0]
 801a682:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a686:	f7ee fed5 	bl	8009434 <f_mount>
 801a68a:	4b23      	ldr	r3, [pc, #140]	; (801a718 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801a68c:	4923      	ldr	r1, [pc, #140]	; (801a71c <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a68e:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801a690:	4b23      	ldr	r3, [pc, #140]	; (801a720 <SD_Witer+0xc88>)
 801a692:	2000      	movs	r0, #0
 801a694:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a698:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a69c:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a6a0:	2055      	movs	r0, #85	; 0x55
 801a6a2:	f7f8 fc35 	bl	8012f10 <GUI_Bar_Measure>
	}
 801a6a6:	b007      	add	sp, #28
 801a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a6ac:	491d      	ldr	r1, [pc, #116]	; (801a724 <SD_Witer+0xc8c>)
 801a6ae:	f7ff ba10 	b.w	8019ad2 <SD_Witer+0x3a>
 801a6b2:	491d      	ldr	r1, [pc, #116]	; (801a728 <SD_Witer+0xc90>)
 801a6b4:	f7ff ba0d 	b.w	8019ad2 <SD_Witer+0x3a>
 801a6b8:	491c      	ldr	r1, [pc, #112]	; (801a72c <SD_Witer+0xc94>)
 801a6ba:	f7ff ba0a 	b.w	8019ad2 <SD_Witer+0x3a>
 801a6be:	491c      	ldr	r1, [pc, #112]	; (801a730 <SD_Witer+0xc98>)
 801a6c0:	f7ff ba07 	b.w	8019ad2 <SD_Witer+0x3a>
 801a6c4:	491b      	ldr	r1, [pc, #108]	; (801a734 <SD_Witer+0xc9c>)
 801a6c6:	f7ff ba04 	b.w	8019ad2 <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801a6ca:	221e      	movs	r2, #30
 801a6cc:	491a      	ldr	r1, [pc, #104]	; (801a738 <SD_Witer+0xca0>)
 801a6ce:	f7ff ba3a 	b.w	8019b46 <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a6d2:	2212      	movs	r2, #18
 801a6d4:	4919      	ldr	r1, [pc, #100]	; (801a73c <SD_Witer+0xca4>)
 801a6d6:	f7ff ba54 	b.w	8019b82 <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a6da:	2212      	movs	r2, #18
 801a6dc:	4918      	ldr	r1, [pc, #96]	; (801a740 <SD_Witer+0xca8>)
 801a6de:	f7ff ba8c 	b.w	8019bfa <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a6e2:	2214      	movs	r2, #20
 801a6e4:	4917      	ldr	r1, [pc, #92]	; (801a744 <SD_Witer+0xcac>)
 801a6e6:	f7ff babc 	b.w	8019c62 <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801a6ea:	2209      	movs	r2, #9
 801a6ec:	4916      	ldr	r1, [pc, #88]	; (801a748 <SD_Witer+0xcb0>)
 801a6ee:	f7ff baec 	b.w	8019cca <SD_Witer+0x232>
 801a6f2:	bf00      	nop
 801a6f4:	080312ee 	.word	0x080312ee
 801a6f8:	200915a8 	.word	0x200915a8
 801a6fc:	20092600 	.word	0x20092600
 801a700:	20003625 	.word	0x20003625
 801a704:	20003624 	.word	0x20003624
 801a708:	080244b1 	.word	0x080244b1
 801a70c:	080312ed 	.word	0x080312ed
 801a710:	20093635 	.word	0x20093635
 801a714:	200915b0 	.word	0x200915b0
 801a718:	20093630 	.word	0x20093630
 801a71c:	3ff00000 	.word	0x3ff00000
 801a720:	20009750 	.word	0x20009750
 801a724:	080313d6 	.word	0x080313d6
 801a728:	080312ad 	.word	0x080312ad
 801a72c:	080312b1 	.word	0x080312b1
 801a730:	080312b3 	.word	0x080312b3
 801a734:	080312b7 	.word	0x080312b7
 801a738:	20000909 	.word	0x20000909
 801a73c:	2000042e 	.word	0x2000042e
 801a740:	200004aa 	.word	0x200004aa
 801a744:	20000466 	.word	0x20000466
 801a748:	20000245 	.word	0x20000245
										sprintf(measure_buff, "%.d", Tc_Measure);
 801a74c:	49ab      	ldr	r1, [pc, #684]	; (801a9fc <SD_Witer+0xf64>)
 801a74e:	a803      	add	r0, sp, #12
 801a750:	f005 f874 	bl	801f83c <sprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a754:	220c      	movs	r2, #12
 801a756:	4baa      	ldr	r3, [pc, #680]	; (801aa00 <SD_Witer+0xf68>)
 801a758:	48aa      	ldr	r0, [pc, #680]	; (801aa04 <SD_Witer+0xf6c>)
 801a75a:	eb0d 0102 	add.w	r1, sp, r2
 801a75e:	f7ee ffb3 	bl	80096c8 <f_write>
										memset(measure_buff, 0, 12);
 801a762:	2300      	movs	r3, #0
 801a764:	9303      	str	r3, [sp, #12]
 801a766:	9304      	str	r3, [sp, #16]
 801a768:	9305      	str	r3, [sp, #20]
 801a76a:	f7ff babe 	b.w	8019cea <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801a76e:	2215      	movs	r2, #21
 801a770:	49a5      	ldr	r1, [pc, #660]	; (801aa08 <SD_Witer+0xf70>)
 801a772:	f7ff bacd 	b.w	8019d10 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801a776:	2213      	movs	r2, #19
 801a778:	49a4      	ldr	r1, [pc, #656]	; (801aa0c <SD_Witer+0xf74>)
 801a77a:	f7ff bb46 	b.w	8019e0a <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801a77e:	221a      	movs	r2, #26
 801a780:	49a3      	ldr	r1, [pc, #652]	; (801aa10 <SD_Witer+0xf78>)
 801a782:	f7ff bb51 	b.w	8019e28 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801a786:	221f      	movs	r2, #31
 801a788:	49a2      	ldr	r1, [pc, #648]	; (801aa14 <SD_Witer+0xf7c>)
 801a78a:	f7ff bb67 	b.w	8019e5c <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a78e:	2213      	movs	r2, #19
 801a790:	49a1      	ldr	r1, [pc, #644]	; (801aa18 <SD_Witer+0xf80>)
 801a792:	f7ff bb81 	b.w	8019e98 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a796:	b964      	cbnz	r4, 801a7b2 <SD_Witer+0xd1a>
 801a798:	49a0      	ldr	r1, [pc, #640]	; (801aa1c <SD_Witer+0xf84>)
 801a79a:	2224      	movs	r2, #36	; 0x24
 801a79c:	4899      	ldr	r0, [pc, #612]	; (801aa04 <SD_Witer+0xf6c>)
 801a79e:	f7ee ff93 	bl	80096c8 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801a7a2:	4b97      	ldr	r3, [pc, #604]	; (801aa00 <SD_Witer+0xf68>)
 801a7a4:	499e      	ldr	r1, [pc, #632]	; (801aa20 <SD_Witer+0xf88>)
 801a7a6:	4897      	ldr	r0, [pc, #604]	; (801aa04 <SD_Witer+0xf6c>)
 801a7a8:	2203      	movs	r2, #3
 801a7aa:	f7ee ff8d 	bl	80096c8 <f_write>
 801a7ae:	f7ff bb88 	b.w	8019ec2 <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a7b2:	2213      	movs	r2, #19
 801a7b4:	4998      	ldr	r1, [pc, #608]	; (801aa18 <SD_Witer+0xf80>)
 801a7b6:	e7f1      	b.n	801a79c <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a7b8:	2225      	movs	r2, #37	; 0x25
 801a7ba:	499a      	ldr	r1, [pc, #616]	; (801aa24 <SD_Witer+0xf8c>)
 801a7bc:	f7ff bb99 	b.w	8019ef2 <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801a7c0:	2212      	movs	r2, #18
 801a7c2:	4999      	ldr	r1, [pc, #612]	; (801aa28 <SD_Witer+0xf90>)
 801a7c4:	f7ff bbd0 	b.w	8019f68 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801a7c8:	2212      	movs	r2, #18
 801a7ca:	4998      	ldr	r1, [pc, #608]	; (801aa2c <SD_Witer+0xf94>)
 801a7cc:	f7ff bbea 	b.w	8019fa4 <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801a7d0:	2213      	movs	r2, #19
 801a7d2:	4997      	ldr	r1, [pc, #604]	; (801aa30 <SD_Witer+0xf98>)
 801a7d4:	e404      	b.n	8019fe0 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801a7d6:	221e      	movs	r2, #30
 801a7d8:	4996      	ldr	r1, [pc, #600]	; (801aa34 <SD_Witer+0xf9c>)
 801a7da:	e41f      	b.n	801a01c <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801a7dc:	220f      	movs	r2, #15
 801a7de:	4996      	ldr	r1, [pc, #600]	; (801aa38 <SD_Witer+0xfa0>)
 801a7e0:	e4bc      	b.n	801a15c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a7e2:	2c00      	cmp	r4, #0
 801a7e4:	f040 80f0 	bne.w	801a9c8 <SD_Witer+0xf30>
 801a7e8:	4994      	ldr	r1, [pc, #592]	; (801aa3c <SD_Witer+0xfa4>)
 801a7ea:	2276      	movs	r2, #118	; 0x76
 801a7ec:	4885      	ldr	r0, [pc, #532]	; (801aa04 <SD_Witer+0xf6c>)
 801a7ee:	4f94      	ldr	r7, [pc, #592]	; (801aa40 <SD_Witer+0xfa8>)
 801a7f0:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801aaa8 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7f4:	f8df a208 	ldr.w	sl, [pc, #520]	; 801aa00 <SD_Witer+0xf68>
 801a7f8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801aa04 <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a7fc:	f7ee ff64 	bl	80096c8 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801a800:	f857 0b04 	ldr.w	r0, [r7], #4
 801a804:	f7e5 feb8 	bl	8000578 <__aeabi_f2d>
 801a808:	4602      	mov	r2, r0
 801a80a:	460b      	mov	r3, r1
 801a80c:	a803      	add	r0, sp, #12
 801a80e:	498d      	ldr	r1, [pc, #564]	; (801aa44 <SD_Witer+0xfac>)
 801a810:	f005 f814 	bl	801f83c <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a814:	220c      	movs	r2, #12
 801a816:	4653      	mov	r3, sl
 801a818:	eb0d 0102 	add.w	r1, sp, r2
 801a81c:	4648      	mov	r0, r9
 801a81e:	f7ee ff53 	bl	80096c8 <f_write>
									memset(measure_buff, 0, 12);
 801a822:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a824:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801a828:	9503      	str	r5, [sp, #12]
 801a82a:	9504      	str	r5, [sp, #16]
 801a82c:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a82e:	f7e5 fea3 	bl	8000578 <__aeabi_f2d>
 801a832:	4602      	mov	r2, r0
 801a834:	460b      	mov	r3, r1
 801a836:	a803      	add	r0, sp, #12
 801a838:	4983      	ldr	r1, [pc, #524]	; (801aa48 <SD_Witer+0xfb0>)
 801a83a:	f004 ffff 	bl	801f83c <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a83e:	220c      	movs	r2, #12
 801a840:	4653      	mov	r3, sl
 801a842:	eb0d 0102 	add.w	r1, sp, r2
 801a846:	4648      	mov	r0, r9
 801a848:	f7ee ff3e 	bl	80096c8 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801a84c:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801a84e:	9503      	str	r5, [sp, #12]
 801a850:	9504      	str	r5, [sp, #16]
 801a852:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801a854:	d1d4      	bne.n	801a800 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801a856:	4b6a      	ldr	r3, [pc, #424]	; (801aa00 <SD_Witer+0xf68>)
 801a858:	2c00      	cmp	r4, #0
 801a85a:	f040 80b8 	bne.w	801a9ce <SD_Witer+0xf36>
 801a85e:	497b      	ldr	r1, [pc, #492]	; (801aa4c <SD_Witer+0xfb4>)
 801a860:	223f      	movs	r2, #63	; 0x3f
 801a862:	4868      	ldr	r0, [pc, #416]	; (801aa04 <SD_Witer+0xf6c>)
 801a864:	f7ee ff30 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801a868:	4b79      	ldr	r3, [pc, #484]	; (801aa50 <SD_Witer+0xfb8>)
 801a86a:	6818      	ldr	r0, [r3, #0]
 801a86c:	f7e5 fe84 	bl	8000578 <__aeabi_f2d>
 801a870:	4602      	mov	r2, r0
 801a872:	460b      	mov	r3, r1
 801a874:	a803      	add	r0, sp, #12
 801a876:	4977      	ldr	r1, [pc, #476]	; (801aa54 <SD_Witer+0xfbc>)
 801a878:	f004 ffe0 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a87c:	220c      	movs	r2, #12
 801a87e:	4b60      	ldr	r3, [pc, #384]	; (801aa00 <SD_Witer+0xf68>)
 801a880:	4860      	ldr	r0, [pc, #384]	; (801aa04 <SD_Witer+0xf6c>)
 801a882:	eb0d 0102 	add.w	r1, sp, r2
 801a886:	f7ee ff1f 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a88a:	2300      	movs	r3, #0
 801a88c:	9303      	str	r3, [sp, #12]
 801a88e:	9304      	str	r3, [sp, #16]
 801a890:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801a892:	4b5b      	ldr	r3, [pc, #364]	; (801aa00 <SD_Witer+0xf68>)
 801a894:	2c00      	cmp	r4, #0
 801a896:	f040 809d 	bne.w	801a9d4 <SD_Witer+0xf3c>
 801a89a:	496f      	ldr	r1, [pc, #444]	; (801aa58 <SD_Witer+0xfc0>)
 801a89c:	221b      	movs	r2, #27
 801a89e:	4859      	ldr	r0, [pc, #356]	; (801aa04 <SD_Witer+0xf6c>)
 801a8a0:	f7ee ff12 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801a8a4:	4b6d      	ldr	r3, [pc, #436]	; (801aa5c <SD_Witer+0xfc4>)
 801a8a6:	6818      	ldr	r0, [r3, #0]
 801a8a8:	f7e5 fe66 	bl	8000578 <__aeabi_f2d>
 801a8ac:	4602      	mov	r2, r0
 801a8ae:	460b      	mov	r3, r1
 801a8b0:	a803      	add	r0, sp, #12
 801a8b2:	496b      	ldr	r1, [pc, #428]	; (801aa60 <SD_Witer+0xfc8>)
 801a8b4:	f004 ffc2 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a8b8:	220c      	movs	r2, #12
 801a8ba:	4b51      	ldr	r3, [pc, #324]	; (801aa00 <SD_Witer+0xf68>)
 801a8bc:	4851      	ldr	r0, [pc, #324]	; (801aa04 <SD_Witer+0xf6c>)
 801a8be:	eb0d 0102 	add.w	r1, sp, r2
 801a8c2:	f7ee ff01 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	9303      	str	r3, [sp, #12]
 801a8ca:	9304      	str	r3, [sp, #16]
 801a8cc:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801a8ce:	4b4c      	ldr	r3, [pc, #304]	; (801aa00 <SD_Witer+0xf68>)
 801a8d0:	2c00      	cmp	r4, #0
 801a8d2:	f040 8082 	bne.w	801a9da <SD_Witer+0xf42>
 801a8d6:	4963      	ldr	r1, [pc, #396]	; (801aa64 <SD_Witer+0xfcc>)
 801a8d8:	2227      	movs	r2, #39	; 0x27
 801a8da:	484a      	ldr	r0, [pc, #296]	; (801aa04 <SD_Witer+0xf6c>)
 801a8dc:	f7ee fef4 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801a8e0:	4b61      	ldr	r3, [pc, #388]	; (801aa68 <SD_Witer+0xfd0>)
 801a8e2:	6818      	ldr	r0, [r3, #0]
 801a8e4:	f7e5 fe48 	bl	8000578 <__aeabi_f2d>
 801a8e8:	4602      	mov	r2, r0
 801a8ea:	460b      	mov	r3, r1
 801a8ec:	a803      	add	r0, sp, #12
 801a8ee:	4959      	ldr	r1, [pc, #356]	; (801aa54 <SD_Witer+0xfbc>)
 801a8f0:	f004 ffa4 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a8f4:	220c      	movs	r2, #12
 801a8f6:	4b42      	ldr	r3, [pc, #264]	; (801aa00 <SD_Witer+0xf68>)
 801a8f8:	4842      	ldr	r0, [pc, #264]	; (801aa04 <SD_Witer+0xf6c>)
 801a8fa:	eb0d 0102 	add.w	r1, sp, r2
 801a8fe:	f7ee fee3 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a902:	2300      	movs	r3, #0
 801a904:	9303      	str	r3, [sp, #12]
 801a906:	9304      	str	r3, [sp, #16]
 801a908:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801a90a:	4b3d      	ldr	r3, [pc, #244]	; (801aa00 <SD_Witer+0xf68>)
 801a90c:	2c00      	cmp	r4, #0
 801a90e:	d167      	bne.n	801a9e0 <SD_Witer+0xf48>
 801a910:	4956      	ldr	r1, [pc, #344]	; (801aa6c <SD_Witer+0xfd4>)
 801a912:	223d      	movs	r2, #61	; 0x3d
 801a914:	483b      	ldr	r0, [pc, #236]	; (801aa04 <SD_Witer+0xf6c>)
 801a916:	f7ee fed7 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801a91a:	4b55      	ldr	r3, [pc, #340]	; (801aa70 <SD_Witer+0xfd8>)
 801a91c:	6818      	ldr	r0, [r3, #0]
 801a91e:	f7e5 fe2b 	bl	8000578 <__aeabi_f2d>
 801a922:	4602      	mov	r2, r0
 801a924:	460b      	mov	r3, r1
 801a926:	a803      	add	r0, sp, #12
 801a928:	4952      	ldr	r1, [pc, #328]	; (801aa74 <SD_Witer+0xfdc>)
 801a92a:	f004 ff87 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a92e:	220c      	movs	r2, #12
 801a930:	eb0d 0102 	add.w	r1, sp, r2
 801a934:	4b32      	ldr	r3, [pc, #200]	; (801aa00 <SD_Witer+0xf68>)
 801a936:	4833      	ldr	r0, [pc, #204]	; (801aa04 <SD_Witer+0xf6c>)
 801a938:	f7ee fec6 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801a93c:	4b4e      	ldr	r3, [pc, #312]	; (801aa78 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801a93e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801a940:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a942:	9503      	str	r5, [sp, #12]
 801a944:	9504      	str	r5, [sp, #16]
 801a946:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801a948:	f7e5 fe16 	bl	8000578 <__aeabi_f2d>
 801a94c:	4602      	mov	r2, r0
 801a94e:	460b      	mov	r3, r1
 801a950:	a803      	add	r0, sp, #12
 801a952:	4948      	ldr	r1, [pc, #288]	; (801aa74 <SD_Witer+0xfdc>)
 801a954:	f004 ff72 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a958:	220c      	movs	r2, #12
 801a95a:	eb0d 0102 	add.w	r1, sp, r2
 801a95e:	4b28      	ldr	r3, [pc, #160]	; (801aa00 <SD_Witer+0xf68>)
 801a960:	4828      	ldr	r0, [pc, #160]	; (801aa04 <SD_Witer+0xf6c>)
 801a962:	f7ee feb1 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801a966:	4b45      	ldr	r3, [pc, #276]	; (801aa7c <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801a968:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801a96a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a96c:	9504      	str	r5, [sp, #16]
 801a96e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801a970:	f7e5 fe02 	bl	8000578 <__aeabi_f2d>
 801a974:	4602      	mov	r2, r0
 801a976:	460b      	mov	r3, r1
 801a978:	a803      	add	r0, sp, #12
 801a97a:	493e      	ldr	r1, [pc, #248]	; (801aa74 <SD_Witer+0xfdc>)
 801a97c:	f004 ff5e 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a980:	220c      	movs	r2, #12
 801a982:	eb0d 0102 	add.w	r1, sp, r2
 801a986:	4b1e      	ldr	r3, [pc, #120]	; (801aa00 <SD_Witer+0xf68>)
 801a988:	481e      	ldr	r0, [pc, #120]	; (801aa04 <SD_Witer+0xf6c>)
 801a98a:	f7ee fe9d 	bl	80096c8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801a98e:	4b3c      	ldr	r3, [pc, #240]	; (801aa80 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801a990:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801a992:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a994:	9504      	str	r5, [sp, #16]
 801a996:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801a998:	f7e5 fdee 	bl	8000578 <__aeabi_f2d>
 801a99c:	4602      	mov	r2, r0
 801a99e:	460b      	mov	r3, r1
 801a9a0:	a803      	add	r0, sp, #12
 801a9a2:	4934      	ldr	r1, [pc, #208]	; (801aa74 <SD_Witer+0xfdc>)
 801a9a4:	f004 ff4a 	bl	801f83c <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9a8:	220c      	movs	r2, #12
 801a9aa:	4b15      	ldr	r3, [pc, #84]	; (801aa00 <SD_Witer+0xf68>)
 801a9ac:	4815      	ldr	r0, [pc, #84]	; (801aa04 <SD_Witer+0xf6c>)
 801a9ae:	eb0d 0102 	add.w	r1, sp, r2
 801a9b2:	f7ee fe89 	bl	80096c8 <f_write>
								memset(measure_buff, 0, 12);
 801a9b6:	9503      	str	r5, [sp, #12]
 801a9b8:	9504      	str	r5, [sp, #16]
 801a9ba:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801a9bc:	4b10      	ldr	r3, [pc, #64]	; (801aa00 <SD_Witer+0xf68>)
 801a9be:	b994      	cbnz	r4, 801a9e6 <SD_Witer+0xf4e>
 801a9c0:	221a      	movs	r2, #26
 801a9c2:	4930      	ldr	r1, [pc, #192]	; (801aa84 <SD_Witer+0xfec>)
 801a9c4:	f7ff bbca 	b.w	801a15c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a9c8:	2223      	movs	r2, #35	; 0x23
 801a9ca:	492f      	ldr	r1, [pc, #188]	; (801aa88 <SD_Witer+0xff0>)
 801a9cc:	e70e      	b.n	801a7ec <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801a9ce:	2216      	movs	r2, #22
 801a9d0:	492e      	ldr	r1, [pc, #184]	; (801aa8c <SD_Witer+0xff4>)
 801a9d2:	e746      	b.n	801a862 <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801a9d4:	2213      	movs	r2, #19
 801a9d6:	492e      	ldr	r1, [pc, #184]	; (801aa90 <SD_Witer+0xff8>)
 801a9d8:	e761      	b.n	801a89e <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801a9da:	2215      	movs	r2, #21
 801a9dc:	492d      	ldr	r1, [pc, #180]	; (801aa94 <SD_Witer+0xffc>)
 801a9de:	e77c      	b.n	801a8da <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801a9e0:	2220      	movs	r2, #32
 801a9e2:	492d      	ldr	r1, [pc, #180]	; (801aa98 <SD_Witer+0x1000>)
 801a9e4:	e796      	b.n	801a914 <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801a9e6:	2214      	movs	r2, #20
 801a9e8:	492c      	ldr	r1, [pc, #176]	; (801aa9c <SD_Witer+0x1004>)
 801a9ea:	f7ff bbb7 	b.w	801a15c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801a9ee:	226b      	movs	r2, #107	; 0x6b
 801a9f0:	492b      	ldr	r1, [pc, #172]	; (801aaa0 <SD_Witer+0x1008>)
 801a9f2:	f7ff bbf7 	b.w	801a1e4 <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a9f6:	226b      	movs	r2, #107	; 0x6b
 801a9f8:	492a      	ldr	r1, [pc, #168]	; (801aaa4 <SD_Witer+0x100c>)
 801a9fa:	e4fc      	b.n	801a3f6 <SD_Witer+0x95e>
 801a9fc:	080312d3 	.word	0x080312d3
 801aa00:	200915a8 	.word	0x200915a8
 801aa04:	20092600 	.word	0x20092600
 801aa08:	200005fd 	.word	0x200005fd
 801aa0c:	200008cc 	.word	0x200008cc
 801aa10:	200009ed 	.word	0x200009ed
 801aa14:	20000993 	.word	0x20000993
 801aa18:	2000095c 	.word	0x2000095c
 801aa1c:	2000096f 	.word	0x2000096f
 801aa20:	080312bb 	.word	0x080312bb
 801aa24:	20000542 	.word	0x20000542
 801aa28:	2000050c 	.word	0x2000050c
 801aa2c:	200005ca 	.word	0x200005ca
 801aa30:	200007fd 	.word	0x200007fd
 801aa34:	200007a6 	.word	0x200007a6
 801aa38:	200004ea 	.word	0x200004ea
 801aa3c:	20000702 	.word	0x20000702
 801aa40:	2000c52c 	.word	0x2000c52c
 801aa44:	080312db 	.word	0x080312db
 801aa48:	080312e0 	.word	0x080312e0
 801aa4c:	200006a0 	.word	0x200006a0
 801aa50:	20095c5c 	.word	0x20095c5c
 801aa54:	08031292 	.word	0x08031292
 801aa58:	2000078b 	.word	0x2000078b
 801aa5c:	200956c8 	.word	0x200956c8
 801aa60:	0803128d 	.word	0x0803128d
 801aa64:	200008a5 	.word	0x200008a5
 801aa68:	200956d0 	.word	0x200956d0
 801aa6c:	20000853 	.word	0x20000853
 801aa70:	2009583c 	.word	0x2009583c
 801aa74:	080312e7 	.word	0x080312e7
 801aa78:	20095b38 	.word	0x20095b38
 801aa7c:	20095a74 	.word	0x20095a74
 801aa80:	200956cc 	.word	0x200956cc
 801aa84:	20000670 	.word	0x20000670
 801aa88:	200006df 	.word	0x200006df
 801aa8c:	2000068a 	.word	0x2000068a
 801aa90:	20000778 	.word	0x20000778
 801aa94:	20000890 	.word	0x20000890
 801aa98:	20000833 	.word	0x20000833
 801aa9c:	2000065c 	.word	0x2000065c
 801aaa0:	20000346 	.word	0x20000346
 801aaa4:	2000025c 	.word	0x2000025c
 801aaa8:	20054938 	.word	0x20054938

0801aaac <Spectral_Axes>:
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,		};


void Spectral_Axes(uint8_t direction){
 801aaac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801aaae:	2800      	cmp	r0, #0
 801aab0:	d145      	bne.n	801ab3e <Spectral_Axes+0x92>
	{
//		TFT_FillRectangle(20, 95, 270, 412, TFT_Black_Bkgr);

		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801aab2:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801aab6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801aaba:	2214      	movs	r2, #20
 801aabc:	215f      	movs	r1, #95	; 0x5f
 801aabe:	2012      	movs	r0, #18
 801aac0:	9400      	str	r4, [sp, #0]
 801aac2:	f001 f9a8 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801aac6:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801aaca:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801aace:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801aad2:	2012      	movs	r0, #18
 801aad4:	9400      	str	r4, [sp, #0]
 801aad6:	f001 f99e 	bl	801be16 <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801aada:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801aade:	4619      	mov	r1, r3
 801aae0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801aae4:	2012      	movs	r0, #18
 801aae6:	9400      	str	r4, [sp, #0]
 801aae8:	f001 f938 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801aaec:	f240 1301 	movw	r3, #257	; 0x101
 801aaf0:	4619      	mov	r1, r3
 801aaf2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801aaf6:	2012      	movs	r0, #18
 801aaf8:	9400      	str	r4, [sp, #0]
 801aafa:	f001 f92f 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801aafe:	23b5      	movs	r3, #181	; 0xb5
 801ab00:	4619      	mov	r1, r3
 801ab02:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801ab06:	2012      	movs	r0, #18
 801ab08:	9400      	str	r4, [sp, #0]
 801ab0a:	f001 f927 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801ab0e:	2369      	movs	r3, #105	; 0x69
 801ab10:	9400      	str	r4, [sp, #0]
 801ab12:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801ab16:	4619      	mov	r1, r3
 801ab18:	2012      	movs	r0, #18
 801ab1a:	f001 f91f 	bl	801bd5c <TFT_DrawLine>
 801ab1e:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_DrawLine(56+i, 95, 56+i, 412, TFT_Grey);
 801ab20:	462a      	mov	r2, r5
 801ab22:	4628      	mov	r0, r5
 801ab24:	3528      	adds	r5, #40	; 0x28
 801ab26:	9400      	str	r4, [sp, #0]
 801ab28:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801ab2c:	215f      	movs	r1, #95	; 0x5f
 801ab2e:	b2ad      	uxth	r5, r5
 801ab30:	f001 f914 	bl	801bd5c <TFT_DrawLine>
		for(uint16_t i = 0; i < 210; i+=40){
 801ab34:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801ab38:	d1f2      	bne.n	801ab20 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801ab3a:	b003      	add	sp, #12
 801ab3c:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801ab3e:	2801      	cmp	r0, #1
 801ab40:	d140      	bne.n	801abc4 <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801ab42:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801ab46:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ab4a:	22ff      	movs	r2, #255	; 0xff
 801ab4c:	2146      	movs	r1, #70	; 0x46
 801ab4e:	20fd      	movs	r0, #253	; 0xfd
 801ab50:	9400      	str	r4, [sp, #0]
 801ab52:	f001 f960 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801ab56:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ab5a:	22ff      	movs	r2, #255	; 0xff
 801ab5c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801ab60:	2028      	movs	r0, #40	; 0x28
 801ab62:	9400      	str	r4, [sp, #0]
 801ab64:	f001 f957 	bl	801be16 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801ab68:	22cc      	movs	r2, #204	; 0xcc
 801ab6a:	4610      	mov	r0, r2
 801ab6c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ab70:	2146      	movs	r1, #70	; 0x46
 801ab72:	9400      	str	r4, [sp, #0]
 801ab74:	f001 f8f2 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801ab78:	2297      	movs	r2, #151	; 0x97
 801ab7a:	4610      	mov	r0, r2
 801ab7c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ab80:	2146      	movs	r1, #70	; 0x46
 801ab82:	9400      	str	r4, [sp, #0]
 801ab84:	f001 f8ea 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801ab88:	2262      	movs	r2, #98	; 0x62
 801ab8a:	4610      	mov	r0, r2
 801ab8c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ab90:	2146      	movs	r1, #70	; 0x46
 801ab92:	9400      	str	r4, [sp, #0]
 801ab94:	f001 f8e2 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801ab98:	222d      	movs	r2, #45	; 0x2d
 801ab9a:	9400      	str	r4, [sp, #0]
 801ab9c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801aba0:	2146      	movs	r1, #70	; 0x46
 801aba2:	4610      	mov	r0, r2
 801aba4:	f001 f8da 	bl	801bd5c <TFT_DrawLine>
 801aba8:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_DrawLine(40, 354-i, 255, 354-i, TFT_Grey);
 801abac:	462b      	mov	r3, r5
 801abae:	4629      	mov	r1, r5
 801abb0:	3d32      	subs	r5, #50	; 0x32
 801abb2:	9400      	str	r4, [sp, #0]
 801abb4:	22ff      	movs	r2, #255	; 0xff
 801abb6:	2028      	movs	r0, #40	; 0x28
 801abb8:	b2ad      	uxth	r5, r5
 801abba:	f001 f8cf 	bl	801bd5c <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801abbe:	2d36      	cmp	r5, #54	; 0x36
 801abc0:	d1f4      	bne.n	801abac <Spectral_Axes+0x100>
 801abc2:	e7ba      	b.n	801ab3a <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801abc4:	2802      	cmp	r0, #2
 801abc6:	d1b8      	bne.n	801ab3a <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801abc8:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801abcc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801abd0:	2210      	movs	r2, #16
 801abd2:	214a      	movs	r1, #74	; 0x4a
 801abd4:	2012      	movs	r0, #18
 801abd6:	9400      	str	r4, [sp, #0]
 801abd8:	f001 f91d 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801abdc:	234c      	movs	r3, #76	; 0x4c
 801abde:	22e8      	movs	r2, #232	; 0xe8
 801abe0:	214a      	movs	r1, #74	; 0x4a
 801abe2:	2011      	movs	r0, #17
 801abe4:	9400      	str	r4, [sp, #0]
 801abe6:	f001 f916 	bl	801be16 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801abea:	2244      	movs	r2, #68	; 0x44
 801abec:	4610      	mov	r0, r2
 801abee:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801abf2:	2146      	movs	r1, #70	; 0x46
 801abf4:	9400      	str	r4, [sp, #0]
 801abf6:	f001 f8b1 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801abfa:	2279      	movs	r2, #121	; 0x79
 801abfc:	4610      	mov	r0, r2
 801abfe:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ac02:	2146      	movs	r1, #70	; 0x46
 801ac04:	9400      	str	r4, [sp, #0]
 801ac06:	f001 f8a9 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801ac0a:	22ae      	movs	r2, #174	; 0xae
 801ac0c:	4610      	mov	r0, r2
 801ac0e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ac12:	2146      	movs	r1, #70	; 0x46
 801ac14:	9400      	str	r4, [sp, #0]
 801ac16:	f001 f8a1 	bl	801bd5c <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801ac1a:	22e3      	movs	r2, #227	; 0xe3
 801ac1c:	9400      	str	r4, [sp, #0]
 801ac1e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ac22:	2146      	movs	r1, #70	; 0x46
 801ac24:	4610      	mov	r0, r2
 801ac26:	f001 f899 	bl	801bd5c <TFT_DrawLine>
 801ac2a:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
 801ac2e:	462b      	mov	r3, r5
 801ac30:	4629      	mov	r1, r5
 801ac32:	3d32      	subs	r5, #50	; 0x32
 801ac34:	9400      	str	r4, [sp, #0]
 801ac36:	22e8      	movs	r2, #232	; 0xe8
 801ac38:	2011      	movs	r0, #17
 801ac3a:	b2ad      	uxth	r5, r5
 801ac3c:	f001 f88e 	bl	801bd5c <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801ac40:	2d4a      	cmp	r5, #74	; 0x4a
 801ac42:	d1f4      	bne.n	801ac2e <Spectral_Axes+0x182>
 801ac44:	e779      	b.n	801ab3a <Spectral_Axes+0x8e>
	...

0801ac48 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801ac48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ac4c:	4d6b      	ldr	r5, [pc, #428]	; (801adfc <Spectral_PAR_Range+0x1b4>)
 801ac4e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801ae08 <Spectral_PAR_Range+0x1c0>
 801ac52:	4f6b      	ldr	r7, [pc, #428]	; (801ae00 <Spectral_PAR_Range+0x1b8>)
 801ac54:	4e6b      	ldr	r6, [pc, #428]	; (801ae04 <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801ac56:	2800      	cmp	r0, #0
 801ac58:	d146      	bne.n	801ace8 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801ac5a:	882a      	ldrh	r2, [r5, #0]
 801ac5c:	2363      	movs	r3, #99	; 0x63
 801ac5e:	0892      	lsrs	r2, r2, #2
 801ac60:	9300      	str	r3, [sp, #0]
 801ac62:	3213      	adds	r2, #19
 801ac64:	f240 139b 	movw	r3, #411	; 0x19b
 801ac68:	2169      	movs	r1, #105	; 0x69
 801ac6a:	2013      	movs	r0, #19
 801ac6c:	f001 f8d3 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801ac70:	8828      	ldrh	r0, [r5, #0]
 801ac72:	f8b8 2000 	ldrh.w	r2, [r8]
 801ac76:	f644 33d4 	movw	r3, #19412	; 0x4bd4
 801ac7a:	0892      	lsrs	r2, r2, #2
 801ac7c:	0880      	lsrs	r0, r0, #2
 801ac7e:	9300      	str	r3, [sp, #0]
 801ac80:	3213      	adds	r2, #19
 801ac82:	f240 139b 	movw	r3, #411	; 0x19b
 801ac86:	2169      	movs	r1, #105	; 0x69
 801ac88:	3013      	adds	r0, #19
 801ac8a:	f001 f8c4 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801ac8e:	883a      	ldrh	r2, [r7, #0]
 801ac90:	f8b8 0000 	ldrh.w	r0, [r8]
 801ac94:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801ac98:	0892      	lsrs	r2, r2, #2
 801ac9a:	0880      	lsrs	r0, r0, #2
 801ac9c:	9300      	str	r3, [sp, #0]
 801ac9e:	3213      	adds	r2, #19
 801aca0:	f240 139b 	movw	r3, #411	; 0x19b
 801aca4:	2169      	movs	r1, #105	; 0x69
 801aca6:	3013      	adds	r0, #19
 801aca8:	f001 f8b5 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801acac:	8838      	ldrh	r0, [r7, #0]
 801acae:	8832      	ldrh	r2, [r6, #0]
 801acb0:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801acb4:	0892      	lsrs	r2, r2, #2
 801acb6:	0880      	lsrs	r0, r0, #2
 801acb8:	9300      	str	r3, [sp, #0]
 801acba:	3213      	adds	r2, #19
 801acbc:	f240 139b 	movw	r3, #411	; 0x19b
 801acc0:	2169      	movs	r1, #105	; 0x69
 801acc2:	3013      	adds	r0, #19
 801acc4:	f001 f8a7 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801acc8:	8830      	ldrh	r0, [r6, #0]
 801acca:	f646 0382 	movw	r3, #26754	; 0x6882
 801acce:	0880      	lsrs	r0, r0, #2
 801acd0:	9300      	str	r3, [sp, #0]
 801acd2:	f240 120d 	movw	r2, #269	; 0x10d
 801acd6:	f240 139b 	movw	r3, #411	; 0x19b
 801acda:	2169      	movs	r1, #105	; 0x69
 801acdc:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801acde:	f001 f89a 	bl	801be16 <TFT_FillRectangle>
	}
}
 801ace2:	b002      	add	sp, #8
 801ace4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801ace8:	2801      	cmp	r0, #1
 801acea:	f04f 0403 	mov.w	r4, #3
 801acee:	d142      	bne.n	801ad76 <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801acf0:	882b      	ldrh	r3, [r5, #0]
 801acf2:	f8b8 1000 	ldrh.w	r1, [r8]
 801acf6:	fbb3 f3f4 	udiv	r3, r3, r4
 801acfa:	f240 1593 	movw	r5, #403	; 0x193
 801acfe:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801ad02:	1aeb      	subs	r3, r5, r3
 801ad04:	fbb1 f1f4 	udiv	r1, r1, r4
 801ad08:	1a69      	subs	r1, r5, r1
 801ad0a:	9200      	str	r2, [sp, #0]
 801ad0c:	b29b      	uxth	r3, r3
 801ad0e:	22fd      	movs	r2, #253	; 0xfd
 801ad10:	b289      	uxth	r1, r1
 801ad12:	202d      	movs	r0, #45	; 0x2d
 801ad14:	f001 f87f 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801ad18:	8839      	ldrh	r1, [r7, #0]
 801ad1a:	f8b8 3000 	ldrh.w	r3, [r8]
 801ad1e:	fbb1 f1f4 	udiv	r1, r1, r4
 801ad22:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801ad26:	fbb3 f3f4 	udiv	r3, r3, r4
 801ad2a:	1a69      	subs	r1, r5, r1
 801ad2c:	1aeb      	subs	r3, r5, r3
 801ad2e:	9200      	str	r2, [sp, #0]
 801ad30:	b29b      	uxth	r3, r3
 801ad32:	22fd      	movs	r2, #253	; 0xfd
 801ad34:	b289      	uxth	r1, r1
 801ad36:	202d      	movs	r0, #45	; 0x2d
 801ad38:	f001 f86d 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801ad3c:	883b      	ldrh	r3, [r7, #0]
 801ad3e:	8831      	ldrh	r1, [r6, #0]
 801ad40:	fbb3 f3f4 	udiv	r3, r3, r4
 801ad44:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801ad48:	1aeb      	subs	r3, r5, r3
 801ad4a:	fbb1 f1f4 	udiv	r1, r1, r4
 801ad4e:	1a69      	subs	r1, r5, r1
 801ad50:	9200      	str	r2, [sp, #0]
 801ad52:	b29b      	uxth	r3, r3
 801ad54:	22fd      	movs	r2, #253	; 0xfd
 801ad56:	b289      	uxth	r1, r1
 801ad58:	202d      	movs	r0, #45	; 0x2d
 801ad5a:	f001 f85c 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801ad5e:	f646 0282 	movw	r2, #26754	; 0x6882
 801ad62:	8833      	ldrh	r3, [r6, #0]
 801ad64:	fbb3 f3f4 	udiv	r3, r3, r4
 801ad68:	1aeb      	subs	r3, r5, r3
 801ad6a:	9200      	str	r2, [sp, #0]
 801ad6c:	b29b      	uxth	r3, r3
 801ad6e:	22fd      	movs	r2, #253	; 0xfd
 801ad70:	2146      	movs	r1, #70	; 0x46
 801ad72:	202d      	movs	r0, #45	; 0x2d
 801ad74:	e7b3      	b.n	801acde <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801ad76:	8829      	ldrh	r1, [r5, #0]
 801ad78:	f8b8 3000 	ldrh.w	r3, [r8]
 801ad7c:	fbb1 f1f4 	udiv	r1, r1, r4
 801ad80:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801ad84:	fbb3 f3f4 	udiv	r3, r3, r4
 801ad88:	314a      	adds	r1, #74	; 0x4a
 801ad8a:	334a      	adds	r3, #74	; 0x4a
 801ad8c:	9200      	str	r2, [sp, #0]
 801ad8e:	b29b      	uxth	r3, r3
 801ad90:	22e3      	movs	r2, #227	; 0xe3
 801ad92:	b289      	uxth	r1, r1
 801ad94:	2013      	movs	r0, #19
 801ad96:	f001 f83e 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801ad9a:	883b      	ldrh	r3, [r7, #0]
 801ad9c:	f8b8 1000 	ldrh.w	r1, [r8]
 801ada0:	fbb3 f3f4 	udiv	r3, r3, r4
 801ada4:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801ada8:	334a      	adds	r3, #74	; 0x4a
 801adaa:	fbb1 f1f4 	udiv	r1, r1, r4
 801adae:	314a      	adds	r1, #74	; 0x4a
 801adb0:	9200      	str	r2, [sp, #0]
 801adb2:	b29b      	uxth	r3, r3
 801adb4:	22e3      	movs	r2, #227	; 0xe3
 801adb6:	b289      	uxth	r1, r1
 801adb8:	2013      	movs	r0, #19
 801adba:	f001 f82c 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801adbe:	8839      	ldrh	r1, [r7, #0]
 801adc0:	8833      	ldrh	r3, [r6, #0]
 801adc2:	fbb1 f1f4 	udiv	r1, r1, r4
 801adc6:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801adca:	fbb3 f3f4 	udiv	r3, r3, r4
 801adce:	314a      	adds	r1, #74	; 0x4a
 801add0:	334a      	adds	r3, #74	; 0x4a
 801add2:	9200      	str	r2, [sp, #0]
 801add4:	b29b      	uxth	r3, r3
 801add6:	22e3      	movs	r2, #227	; 0xe3
 801add8:	b289      	uxth	r1, r1
 801adda:	2013      	movs	r0, #19
 801addc:	f001 f81b 	bl	801be16 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801ade0:	f646 0382 	movw	r3, #26754	; 0x6882
 801ade4:	8831      	ldrh	r1, [r6, #0]
 801ade6:	fbb1 f1f4 	udiv	r1, r1, r4
 801adea:	314a      	adds	r1, #74	; 0x4a
 801adec:	9300      	str	r3, [sp, #0]
 801adee:	22e3      	movs	r2, #227	; 0xe3
 801adf0:	f240 1397 	movw	r3, #407	; 0x197
 801adf4:	b289      	uxth	r1, r1
 801adf6:	2013      	movs	r0, #19
 801adf8:	e771      	b.n	801acde <Spectral_PAR_Range+0x96>
 801adfa:	bf00      	nop
 801adfc:	20095a7a 	.word	0x20095a7a
 801ae00:	20095ca0 	.word	0x20095ca0
 801ae04:	20095a78 	.word	0x20095a78
 801ae08:	20095b3c 	.word	0x20095b3c

0801ae0c <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801ae0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801ae0e:	ac02      	add	r4, sp, #8
 801ae10:	2300      	movs	r3, #0
 801ae12:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801ae16:	4606      	mov	r6, r0
 801ae18:	4d67      	ldr	r5, [pc, #412]	; (801afb8 <Spectral_Axes_Text+0x1ac>)
 801ae1a:	2800      	cmp	r0, #0
 801ae1c:	d162      	bne.n	801aee4 <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801ae1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae22:	f001 fa27 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801ae26:	2063      	movs	r0, #99	; 0x63
 801ae28:	f001 fa2a 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801ae2c:	4863      	ldr	r0, [pc, #396]	; (801afbc <Spectral_Axes_Text+0x1b0>)
 801ae2e:	f001 fa1b 	bl	801c268 <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801ae32:	2230      	movs	r2, #48	; 0x30
 801ae34:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801ae38:	2005      	movs	r0, #5
 801ae3a:	f001 fadf 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801ae3e:	222e      	movs	r2, #46	; 0x2e
 801ae40:	f240 1101 	movw	r1, #257	; 0x101
 801ae44:	2007      	movs	r0, #7
 801ae46:	f001 fad9 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801ae4a:	2230      	movs	r2, #48	; 0x30
 801ae4c:	f240 1101 	movw	r1, #257	; 0x101
 801ae50:	2003      	movs	r0, #3
 801ae52:	f001 fad3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801ae56:	2235      	movs	r2, #53	; 0x35
 801ae58:	f240 1101 	movw	r1, #257	; 0x101
 801ae5c:	200b      	movs	r0, #11
 801ae5e:	f001 facd 	bl	801c3fc <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801ae62:	2231      	movs	r2, #49	; 0x31
 801ae64:	2169      	movs	r1, #105	; 0x69
 801ae66:	4630      	mov	r0, r6
 801ae68:	f001 fac8 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801ae6c:	222e      	movs	r2, #46	; 0x2e
 801ae6e:	2169      	movs	r1, #105	; 0x69
 801ae70:	2004      	movs	r0, #4
 801ae72:	f001 fac3 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801ae76:	2230      	movs	r2, #48	; 0x30
 801ae78:	2169      	movs	r1, #105	; 0x69
 801ae7a:	2009      	movs	r0, #9
 801ae7c:	f001 fabe 	bl	801c3fc <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801ae80:	882a      	ldrh	r2, [r5, #0]
 801ae82:	494f      	ldr	r1, [pc, #316]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801ae84:	4620      	mov	r0, r4
 801ae86:	f004 fcd9 	bl	801f83c <sprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801ae8a:	2303      	movs	r3, #3
 801ae8c:	4622      	mov	r2, r4
 801ae8e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801ae92:	200b      	movs	r0, #11
 801ae94:	f001 fb0a 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801ae98:	886a      	ldrh	r2, [r5, #2]
 801ae9a:	4949      	ldr	r1, [pc, #292]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	f004 fccd 	bl	801f83c <sprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801aea2:	2303      	movs	r3, #3
 801aea4:	4622      	mov	r2, r4
 801aea6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801aeaa:	2055      	movs	r0, #85	; 0x55
 801aeac:	f001 fafe 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801aeb0:	88aa      	ldrh	r2, [r5, #4]
 801aeb2:	4943      	ldr	r1, [pc, #268]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801aeb4:	4620      	mov	r0, r4
 801aeb6:	f004 fcc1 	bl	801f83c <sprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801aeba:	2303      	movs	r3, #3
 801aebc:	4622      	mov	r2, r4
 801aebe:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801aec2:	20a5      	movs	r0, #165	; 0xa5
 801aec4:	f001 faf2 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801aec8:	88ea      	ldrh	r2, [r5, #6]
 801aeca:	493d      	ldr	r1, [pc, #244]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801aecc:	4620      	mov	r0, r4
 801aece:	f004 fcb5 	bl	801f83c <sprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801aed2:	2303      	movs	r3, #3
 801aed4:	4622      	mov	r2, r4
 801aed6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801aeda:	20f5      	movs	r0, #245	; 0xf5
 801aedc:	f001 fae6 	bl	801c4ac <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801aee0:	b003      	add	sp, #12
 801aee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aee4:	4f37      	ldr	r7, [pc, #220]	; (801afc4 <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801aee6:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801aee8:	bf14      	ite	ne
 801aeea:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801aeec:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801aeee:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801aef2:	bf18      	it	ne
 801aef4:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801aef6:	f001 f9bd 	bl	801c274 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801aefa:	2063      	movs	r0, #99	; 0x63
 801aefc:	f001 f9c0 	bl	801c280 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801af00:	482e      	ldr	r0, [pc, #184]	; (801afbc <Spectral_Axes_Text+0x1b0>)
 801af02:	f001 f9b1 	bl	801c268 <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801af06:	882a      	ldrh	r2, [r5, #0]
 801af08:	492d      	ldr	r1, [pc, #180]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801af0a:	4620      	mov	r0, r4
 801af0c:	f004 fc96 	bl	801f83c <sprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801af10:	2303      	movs	r3, #3
 801af12:	4622      	mov	r2, r4
 801af14:	f44f 7181 	mov.w	r1, #258	; 0x102
 801af18:	2041      	movs	r0, #65	; 0x41
 801af1a:	f001 fac7 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801af1e:	886a      	ldrh	r2, [r5, #2]
 801af20:	4927      	ldr	r1, [pc, #156]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801af22:	4620      	mov	r0, r4
 801af24:	f004 fc8a 	bl	801f83c <sprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801af28:	2303      	movs	r3, #3
 801af2a:	4622      	mov	r2, r4
 801af2c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801af30:	20a5      	movs	r0, #165	; 0xa5
 801af32:	f001 fabb 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801af36:	88aa      	ldrh	r2, [r5, #4]
 801af38:	4921      	ldr	r1, [pc, #132]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801af3a:	4620      	mov	r0, r4
 801af3c:	f004 fc7e 	bl	801f83c <sprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801af40:	2303      	movs	r3, #3
 801af42:	4622      	mov	r2, r4
 801af44:	f44f 7181 	mov.w	r1, #258	; 0x102
 801af48:	f240 1009 	movw	r0, #265	; 0x109
 801af4c:	f001 faae 	bl	801c4ac <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801af50:	88ea      	ldrh	r2, [r5, #6]
 801af52:	491b      	ldr	r1, [pc, #108]	; (801afc0 <Spectral_Axes_Text+0x1b4>)
 801af54:	4620      	mov	r0, r4
 801af56:	f004 fc71 	bl	801f83c <sprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801af5a:	2303      	movs	r3, #3
 801af5c:	4622      	mov	r2, r4
 801af5e:	f44f 7181 	mov.w	r1, #258	; 0x102
 801af62:	f240 106d 	movw	r0, #365	; 0x16d
 801af66:	f001 faa1 	bl	801c4ac <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801af6a:	2230      	movs	r2, #48	; 0x30
 801af6c:	21fa      	movs	r1, #250	; 0xfa
 801af6e:	2041      	movs	r0, #65	; 0x41
 801af70:	f001 fa44 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801af74:	2230      	movs	r2, #48	; 0x30
 801af76:	2195      	movs	r1, #149	; 0x95
 801af78:	2039      	movs	r0, #57	; 0x39
 801af7a:	f001 fa3f 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801af7e:	222e      	movs	r2, #46	; 0x2e
 801af80:	2195      	movs	r1, #149	; 0x95
 801af82:	203e      	movs	r0, #62	; 0x3e
 801af84:	f001 fa3a 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801af88:	2235      	movs	r2, #53	; 0x35
 801af8a:	2195      	movs	r1, #149	; 0x95
 801af8c:	2043      	movs	r0, #67	; 0x43
 801af8e:	f001 fa35 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801af92:	2231      	movs	r2, #49	; 0x31
 801af94:	212b      	movs	r1, #43	; 0x2b
 801af96:	2039      	movs	r0, #57	; 0x39
 801af98:	f001 fa30 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801af9c:	222e      	movs	r2, #46	; 0x2e
 801af9e:	212b      	movs	r1, #43	; 0x2b
 801afa0:	203e      	movs	r0, #62	; 0x3e
 801afa2:	f001 fa2b 	bl	801c3fc <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801afa6:	2230      	movs	r2, #48	; 0x30
 801afa8:	212b      	movs	r1, #43	; 0x2b
 801afaa:	2043      	movs	r0, #67	; 0x43
 801afac:	f001 fa26 	bl	801c3fc <TFT_DrawChar>
		TFT_direction = 0x00;
 801afb0:	2300      	movs	r3, #0
 801afb2:	703b      	strb	r3, [r7, #0]
}
 801afb4:	e794      	b.n	801aee0 <Spectral_Axes_Text+0xd4>
 801afb6:	bf00      	nop
 801afb8:	20055938 	.word	0x20055938
 801afbc:	20000210 	.word	0x20000210
 801afc0:	080312f2 	.word	0x080312f2
 801afc4:	20005690 	.word	0x20005690

0801afc8 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801afc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afcc:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801afd0:	f1b8 0f00 	cmp.w	r8, #0
 801afd4:	bf0c      	ite	eq
 801afd6:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801afda:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801afde:	4682      	mov	sl, r0
 801afe0:	461f      	mov	r7, r3
 801afe2:	4614      	mov	r4, r2
 801afe4:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801afe8:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801afea:	f100 0b01 	add.w	fp, r0, #1
 801afee:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801aff0:	f1b8 0f00 	cmp.w	r8, #0
 801aff4:	d10e      	bne.n	801b014 <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801aff6:	8863      	ldrh	r3, [r4, #2]
 801aff8:	8821      	ldrh	r1, [r4, #0]
 801affa:	eb00 020b 	add.w	r2, r0, fp
 801affe:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b002:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b006:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b008:	9700      	str	r7, [sp, #0]
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	b292      	uxth	r2, r2
 801b00e:	b289      	uxth	r1, r1
 801b010:	b280      	uxth	r0, r0
 801b012:	e013      	b.n	801b03c <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801b014:	f1b8 0f01 	cmp.w	r8, #1
 801b018:	d11d      	bne.n	801b056 <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801b01a:	8872      	ldrh	r2, [r6, #2]
 801b01c:	f8b6 e000 	ldrh.w	lr, [r6]
 801b020:	9700      	str	r7, [sp, #0]
 801b022:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801b026:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801b02a:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b02e:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801b032:	b29b      	uxth	r3, r3
 801b034:	b292      	uxth	r2, r2
 801b036:	b289      	uxth	r1, r1
 801b038:	fa1f f08e 	uxth.w	r0, lr
 801b03c:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b03e:	f000 fe8d 	bl	801bd5c <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801b042:	b2ab      	uxth	r3, r5
 801b044:	4599      	cmp	r9, r3
 801b046:	f104 0402 	add.w	r4, r4, #2
 801b04a:	f1a6 0602 	sub.w	r6, r6, #2
 801b04e:	d8ce      	bhi.n	801afee <Spectral_DrawGraph_Const+0x26>
	}
}
 801b050:	b003      	add	sp, #12
 801b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b056:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801b05a:	8862      	ldrh	r2, [r4, #2]
 801b05c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801b060:	8820      	ldrh	r0, [r4, #0]
 801b062:	3212      	adds	r2, #18
 801b064:	3012      	adds	r0, #18
 801b066:	e7cf      	b.n	801b008 <Spectral_DrawGraph_Const+0x40>

0801b068 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b06c:	b087      	sub	sp, #28
 801b06e:	4691      	mov	r9, r2
 801b070:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801b074:	9004      	str	r0, [sp, #16]
    float buf_pix;
//    static uint16_t
    uint16_t i, j = 0;
    static uint16_t GraphData_Prev[355];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b076:	2e00      	cmp	r6, #0
 801b078:	bf0c      	ite	eq
 801b07a:	23f0      	moveq	r3, #240	; 0xf0
 801b07c:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801b080:	9303      	str	r3, [sp, #12]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801b082:	4bc9      	ldr	r3, [pc, #804]	; (801b3a8 <Spectral_DrawGraph_Line2+0x340>)
 801b084:	781a      	ldrb	r2, [r3, #0]
 801b086:	42b2      	cmp	r2, r6
 801b088:	d01b      	beq.n	801b0c2 <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801b08a:	2463      	movs	r4, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801b08c:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801b08e:	f240 120f 	movw	r2, #271	; 0x10f
 801b092:	f240 13a5 	movw	r3, #421	; 0x1a5
 801b096:	9400      	str	r4, [sp, #0]
 801b098:	2137      	movs	r1, #55	; 0x37
 801b09a:	2001      	movs	r0, #1
 801b09c:	f000 febb 	bl	801be16 <TFT_FillRectangle>

        if(Graph_Field&PPF_Bands)
 801b0a0:	4bc2      	ldr	r3, [pc, #776]	; (801b3ac <Spectral_DrawGraph_Line2+0x344>)
 801b0a2:	781b      	ldrb	r3, [r3, #0]
 801b0a4:	07db      	lsls	r3, r3, #31
 801b0a6:	f140 8087 	bpl.w	801b1b8 <Spectral_DrawGraph_Line2+0x150>
        {
            Spectral_PAR_Range(direction);
 801b0aa:	4630      	mov	r0, r6
 801b0ac:	f7ff fdcc 	bl	801ac48 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

//    Spectral_Axes(direction);
//    Spectral_Axes_Text(direction);
	memset(GraphData_Prev, 0, sizeof(GraphData_Prev));
 801b0b0:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b0b4:	2100      	movs	r1, #0
 801b0b6:	48be      	ldr	r0, [pc, #760]	; (801b3b0 <Spectral_DrawGraph_Line2+0x348>)
 801b0b8:	f004 fbb7 	bl	801f82a <memset>
    screen_cnt = 0;
 801b0bc:	4bbd      	ldr	r3, [pc, #756]	; (801b3b4 <Spectral_DrawGraph_Line2+0x34c>)
 801b0be:	2200      	movs	r2, #0
 801b0c0:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801b0c2:	4bbd      	ldr	r3, [pc, #756]	; (801b3b8 <Spectral_DrawGraph_Line2+0x350>)
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);

//          DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801b0c4:	f8df b300 	ldr.w	fp, [pc, #768]	; 801b3c8 <Spectral_DrawGraph_Line2+0x360>
 801b0c8:	4dbc      	ldr	r5, [pc, #752]	; (801b3bc <Spectral_DrawGraph_Line2+0x354>)
    flag_refresh = 1;
 801b0ca:	2401      	movs	r4, #1
 801b0cc:	701c      	strb	r4, [r3, #0]
    i_coord = 0;
 801b0ce:	4bbc      	ldr	r3, [pc, #752]	; (801b3c0 <Spectral_DrawGraph_Line2+0x358>)
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	801a      	strh	r2, [r3, #0]
 801b0d4:	1c63      	adds	r3, r4, #1
        if(direction == 0x00){
 801b0d6:	2e00      	cmp	r6, #0
 801b0d8:	f040 8098 	bne.w	801b20c <Spectral_DrawGraph_Line2+0x1a4>
            flag_spectral = 1;
 801b0dc:	2201      	movs	r2, #1
            			if((i+4)%40 == 0) i++;
 801b0de:	1d20      	adds	r0, r4, #4
 801b0e0:	2128      	movs	r1, #40	; 0x28
            flag_spectral = 1;
 801b0e2:	f88b 2000 	strb.w	r2, [fp]
            			if((i+4)%40 == 0) i++;
 801b0e6:	fb90 f2f1 	sdiv	r2, r0, r1
 801b0ea:	fb01 0212 	mls	r2, r1, r2, r0
 801b0ee:	b902      	cbnz	r2, 801b0f2 <Spectral_DrawGraph_Line2+0x8a>
 801b0f0:	b29c      	uxth	r4, r3
            			if(412-GraphData[i] < 181)
 801b0f2:	0063      	lsls	r3, r4, #1
 801b0f4:	9305      	str	r3, [sp, #20]
 801b0f6:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801b0fa:	9a04      	ldr	r2, [sp, #16]
 801b0fc:	4fb1      	ldr	r7, [pc, #708]	; (801b3c4 <Spectral_DrawGraph_Line2+0x35c>)
 801b0fe:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b102:	2bb4      	cmp	r3, #180	; 0xb4
 801b104:	eb04 0a02 	add.w	sl, r4, r2
 801b108:	b299      	uxth	r1, r3
 801b10a:	dc5f      	bgt.n	801b1cc <Spectral_DrawGraph_Line2+0x164>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 180, Vertical_color_dara[i]);
 801b10c:	fa1f f88a 	uxth.w	r8, sl
 801b110:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b114:	9300      	str	r3, [sp, #0]
 801b116:	4642      	mov	r2, r8
 801b118:	23b4      	movs	r3, #180	; 0xb4
 801b11a:	4640      	mov	r0, r8
 801b11c:	f001 fa0e 	bl	801c53c <DrawLineX>
            				DrawLineX(ZeroX+i, 182, ZeroX+i, 256, Vertical_color_dara[i]);
 801b120:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b124:	9300      	str	r3, [sp, #0]
 801b126:	4642      	mov	r2, r8
 801b128:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b12c:	21b6      	movs	r1, #182	; 0xb6
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801b12e:	4640      	mov	r0, r8
 801b130:	f001 fa04 	bl	801c53c <DrawLineX>
							DrawLineX(ZeroX+i, 258, ZeroX+i, 333, Vertical_color_dara[i]);
 801b134:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b138:	9300      	str	r3, [sp, #0]
 801b13a:	4642      	mov	r2, r8
 801b13c:	f240 134d 	movw	r3, #333	; 0x14d
 801b140:	f44f 7181 	mov.w	r1, #258	; 0x102
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801b144:	4640      	mov	r0, r8
 801b146:	f001 f9f9 	bl	801c53c <DrawLineX>
							DrawLineX(ZeroX+i, 335, ZeroX+i, 411, Vertical_color_dara[i]);
 801b14a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b14e:	9300      	str	r3, [sp, #0]
 801b150:	4642      	mov	r2, r8
 801b152:	f240 139b 	movw	r3, #411	; 0x19b
 801b156:	f240 114f 	movw	r1, #335	; 0x14f
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801b15a:	4610      	mov	r0, r2
 801b15c:	f001 f9ee 	bl	801c53c <DrawLineX>
						if(GraphData_Prev[i]>GraphData[i])	DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 412 - GraphData_Prev[i], TFT_Black_Bkgr);
 801b160:	4b93      	ldr	r3, [pc, #588]	; (801b3b0 <Spectral_DrawGraph_Line2+0x348>)
 801b162:	0062      	lsls	r2, r4, #1
 801b164:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801b168:	f839 1002 	ldrh.w	r1, [r9, r2]
 801b16c:	428b      	cmp	r3, r1
 801b16e:	d90c      	bls.n	801b18a <Spectral_DrawGraph_Line2+0x122>
 801b170:	2063      	movs	r0, #99	; 0x63
 801b172:	fa1f f28a 	uxth.w	r2, sl
 801b176:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b17a:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b17e:	9000      	str	r0, [sp, #0]
 801b180:	b29b      	uxth	r3, r3
 801b182:	b289      	uxth	r1, r1
 801b184:	4610      	mov	r0, r2
				}

//				DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);


				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801b186:	f001 f9d9 	bl	801c53c <DrawLineX>

//				DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801b18a:	2300      	movs	r3, #0
 801b18c:	f88b 3000 	strb.w	r3, [fp]
    for(i = 1; i < graph_lenht; i++)
 801b190:	3401      	adds	r4, #1
 801b192:	9b03      	ldr	r3, [sp, #12]
 801b194:	b2a4      	uxth	r4, r4
 801b196:	42a3      	cmp	r3, r4
 801b198:	d89c      	bhi.n	801b0d4 <Spectral_DrawGraph_Line2+0x6c>
					}
    memcpy(GraphData_Prev, GraphData, sizeof(GraphData_Prev));
 801b19a:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b19e:	4649      	mov	r1, r9
 801b1a0:	4883      	ldr	r0, [pc, #524]	; (801b3b0 <Spectral_DrawGraph_Line2+0x348>)
 801b1a2:	f004 fb37 	bl	801f814 <memcpy>
    Spectral_Axes(direction);
 801b1a6:	4630      	mov	r0, r6
 801b1a8:	f7ff fc80 	bl	801aaac <Spectral_Axes>
	Spectral_Axes_Text(direction);
 801b1ac:	4630      	mov	r0, r6
}
 801b1ae:	b007      	add	sp, #28
 801b1b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Spectral_Axes_Text(direction);
 801b1b4:	f7ff be2a 	b.w	801ae0c <Spectral_Axes_Text>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801b1b8:	9400      	str	r4, [sp, #0]
 801b1ba:	f240 13a5 	movw	r3, #421	; 0x1a5
 801b1be:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801b1c2:	2137      	movs	r1, #55	; 0x37
 801b1c4:	2005      	movs	r0, #5
 801b1c6:	f000 fe26 	bl	801be16 <TFT_FillRectangle>
 801b1ca:	e771      	b.n	801b0b0 <Spectral_DrawGraph_Line2+0x48>
            			else if(412-GraphData[i] < 257)
 801b1cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b1d0:	dc08      	bgt.n	801b1e4 <Spectral_DrawGraph_Line2+0x17c>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801b1d2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b1d6:	9300      	str	r3, [sp, #0]
 801b1d8:	fa1f f88a 	uxth.w	r8, sl
 801b1dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b1e0:	4642      	mov	r2, r8
 801b1e2:	e7a4      	b.n	801b12e <Spectral_DrawGraph_Line2+0xc6>
            			else if(412-GraphData[i] < 334)
 801b1e4:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 801b1e8:	da08      	bge.n	801b1fc <Spectral_DrawGraph_Line2+0x194>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801b1ea:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b1ee:	9300      	str	r3, [sp, #0]
 801b1f0:	fa1f f88a 	uxth.w	r8, sl
 801b1f4:	f240 134d 	movw	r3, #333	; 0x14d
 801b1f8:	4642      	mov	r2, r8
 801b1fa:	e7a3      	b.n	801b144 <Spectral_DrawGraph_Line2+0xdc>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801b1fc:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b200:	9300      	str	r3, [sp, #0]
 801b202:	fa1f f28a 	uxth.w	r2, sl
 801b206:	f240 139b 	movw	r3, #411	; 0x19b
 801b20a:	e7a6      	b.n	801b15a <Spectral_DrawGraph_Line2+0xf2>
        else if(direction == 0x01)
 801b20c:	2e01      	cmp	r6, #1
 801b20e:	d16a      	bne.n	801b2e6 <Spectral_DrawGraph_Line2+0x27e>
            if((i+18)%50 == 0) i++;
 801b210:	f104 0012 	add.w	r0, r4, #18
 801b214:	2132      	movs	r1, #50	; 0x32
 801b216:	fb90 f2f1 	sdiv	r2, r0, r1
 801b21a:	fb01 0212 	mls	r2, r1, r2, r0
            flag_spectral = 1;
 801b21e:	f88b 6000 	strb.w	r6, [fp]
            if((i+18)%50 == 0) i++;
 801b222:	b902      	cbnz	r2, 801b226 <Spectral_DrawGraph_Line2+0x1be>
 801b224:	b29c      	uxth	r4, r3
            if(253 - GraphData[graph_lenht-i] < 98)
 801b226:	9b03      	ldr	r3, [sp, #12]
 801b228:	eba3 0804 	sub.w	r8, r3, r4
 801b22c:	f104 0748 	add.w	r7, r4, #72	; 0x48
 801b230:	f839 3018 	ldrh.w	r3, [r9, r8, lsl #1]
 801b234:	f1c3 03fd 	rsb	r3, r3, #253	; 0xfd
 801b238:	2b61      	cmp	r3, #97	; 0x61
 801b23a:	b298      	uxth	r0, r3
 801b23c:	dc38      	bgt.n	801b2b0 <Spectral_DrawGraph_Line2+0x248>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 97, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b23e:	b2bf      	uxth	r7, r7
 801b240:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b244:	9300      	str	r3, [sp, #0]
 801b246:	2261      	movs	r2, #97	; 0x61
 801b248:	463b      	mov	r3, r7
 801b24a:	4639      	mov	r1, r7
 801b24c:	f001 f976 	bl	801c53c <DrawLineX>
            	DrawLineX(99, 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b250:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b254:	9300      	str	r3, [sp, #0]
 801b256:	2296      	movs	r2, #150	; 0x96
 801b258:	463b      	mov	r3, r7
 801b25a:	4639      	mov	r1, r7
 801b25c:	2063      	movs	r0, #99	; 0x63
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b25e:	f001 f96d 	bl	801c53c <DrawLineX>
				DrawLineX(152, 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b262:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b266:	9300      	str	r3, [sp, #0]
 801b268:	22cb      	movs	r2, #203	; 0xcb
 801b26a:	463b      	mov	r3, r7
 801b26c:	4639      	mov	r1, r7
 801b26e:	2098      	movs	r0, #152	; 0x98
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b270:	f001 f964 	bl	801c53c <DrawLineX>
				DrawLineX(205, 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b274:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b278:	9300      	str	r3, [sp, #0]
 801b27a:	22fc      	movs	r2, #252	; 0xfc
 801b27c:	463b      	mov	r3, r7
 801b27e:	4639      	mov	r1, r7
 801b280:	20cd      	movs	r0, #205	; 0xcd
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b282:	f001 f95b 	bl	801c53c <DrawLineX>
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);
 801b286:	4b4a      	ldr	r3, [pc, #296]	; (801b3b0 <Spectral_DrawGraph_Line2+0x348>)
 801b288:	f839 0018 	ldrh.w	r0, [r9, r8, lsl #1]
 801b28c:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
 801b290:	4282      	cmp	r2, r0
 801b292:	f67f af7a 	bls.w	801b18a <Spectral_DrawGraph_Line2+0x122>
 801b296:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801b29a:	b29b      	uxth	r3, r3
 801b29c:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b2a0:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801b2a4:	2163      	movs	r1, #99	; 0x63
 801b2a6:	9100      	str	r1, [sp, #0]
 801b2a8:	b292      	uxth	r2, r2
 801b2aa:	4619      	mov	r1, r3
 801b2ac:	b280      	uxth	r0, r0
 801b2ae:	e76a      	b.n	801b186 <Spectral_DrawGraph_Line2+0x11e>
            else if(253 - GraphData[graph_lenht-i] < 151)
 801b2b0:	2b96      	cmp	r3, #150	; 0x96
 801b2b2:	dc07      	bgt.n	801b2c4 <Spectral_DrawGraph_Line2+0x25c>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b2b4:	b2bf      	uxth	r7, r7
 801b2b6:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b2ba:	9300      	str	r3, [sp, #0]
 801b2bc:	2296      	movs	r2, #150	; 0x96
 801b2be:	463b      	mov	r3, r7
 801b2c0:	4639      	mov	r1, r7
 801b2c2:	e7cc      	b.n	801b25e <Spectral_DrawGraph_Line2+0x1f6>
            else if(253 - GraphData[graph_lenht-i] < 204)
 801b2c4:	2bcb      	cmp	r3, #203	; 0xcb
 801b2c6:	dc07      	bgt.n	801b2d8 <Spectral_DrawGraph_Line2+0x270>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b2c8:	b2bf      	uxth	r7, r7
 801b2ca:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b2ce:	9300      	str	r3, [sp, #0]
 801b2d0:	22cb      	movs	r2, #203	; 0xcb
 801b2d2:	463b      	mov	r3, r7
 801b2d4:	4639      	mov	r1, r7
 801b2d6:	e7cb      	b.n	801b270 <Spectral_DrawGraph_Line2+0x208>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b2d8:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 801b2dc:	9200      	str	r2, [sp, #0]
 801b2de:	b2bb      	uxth	r3, r7
 801b2e0:	22fc      	movs	r2, #252	; 0xfc
 801b2e2:	4619      	mov	r1, r3
 801b2e4:	e7cd      	b.n	801b282 <Spectral_DrawGraph_Line2+0x21a>
        } else if(direction == 0x02)
 801b2e6:	2e02      	cmp	r6, #2
 801b2e8:	f47f af52 	bne.w	801b190 <Spectral_DrawGraph_Line2+0x128>
				{flag_spectral = 1; 
 801b2ec:	2201      	movs	r2, #1
				if((i+2)%50 == 0) i++;
 801b2ee:	1ca0      	adds	r0, r4, #2
 801b2f0:	2132      	movs	r1, #50	; 0x32
				{flag_spectral = 1; 
 801b2f2:	f88b 2000 	strb.w	r2, [fp]
				if((i+2)%50 == 0) i++;
 801b2f6:	fb90 f2f1 	sdiv	r2, r0, r1
 801b2fa:	fb01 0212 	mls	r2, r1, r2, r0
 801b2fe:	b902      	cbnz	r2, 801b302 <Spectral_DrawGraph_Line2+0x29a>
 801b300:	b29c      	uxth	r4, r3
				if(GraphData[i]+18 > 174)
 801b302:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801b306:	2b9c      	cmp	r3, #156	; 0x9c
 801b308:	ea4f 0844 	mov.w	r8, r4, lsl #1
 801b30c:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 801b310:	f103 0012 	add.w	r0, r3, #18
 801b314:	dd32      	ble.n	801b37c <Spectral_DrawGraph_Line2+0x314>
					DrawLineX(GraphData[i]+18, 76+i, 175, 76+i, Horizontal_color_dara[i]);
 801b316:	b2bf      	uxth	r7, r7
 801b318:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b31c:	9300      	str	r3, [sp, #0]
 801b31e:	22af      	movs	r2, #175	; 0xaf
 801b320:	463b      	mov	r3, r7
 801b322:	4639      	mov	r1, r7
 801b324:	b280      	uxth	r0, r0
 801b326:	f001 f909 	bl	801c53c <DrawLineX>
					DrawLineX(173, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801b32a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b32e:	9300      	str	r3, [sp, #0]
 801b330:	227a      	movs	r2, #122	; 0x7a
 801b332:	463b      	mov	r3, r7
 801b334:	4639      	mov	r1, r7
 801b336:	20ad      	movs	r0, #173	; 0xad
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801b338:	f001 f900 	bl	801c53c <DrawLineX>
					DrawLineX(120, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801b33c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b340:	9300      	str	r3, [sp, #0]
 801b342:	2245      	movs	r2, #69	; 0x45
 801b344:	463b      	mov	r3, r7
 801b346:	4639      	mov	r1, r7
 801b348:	2078      	movs	r0, #120	; 0x78
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801b34a:	f001 f8f7 	bl	801c53c <DrawLineX>
					DrawLineX(67, 76+i, 19, 76+i, Horizontal_color_dara[i]);
 801b34e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b352:	9300      	str	r3, [sp, #0]
 801b354:	2213      	movs	r2, #19
 801b356:	463b      	mov	r3, r7
 801b358:	4639      	mov	r1, r7
 801b35a:	2043      	movs	r0, #67	; 0x43
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801b35c:	f001 f8ee 	bl	801c53c <DrawLineX>
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801b360:	4b13      	ldr	r3, [pc, #76]	; (801b3b0 <Spectral_DrawGraph_Line2+0x348>)
 801b362:	f839 0008 	ldrh.w	r0, [r9, r8]
 801b366:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 801b36a:	4282      	cmp	r2, r0
 801b36c:	f67f af0d 	bls.w	801b18a <Spectral_DrawGraph_Line2+0x122>
 801b370:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 801b374:	b29b      	uxth	r3, r3
 801b376:	3212      	adds	r2, #18
 801b378:	3012      	adds	r0, #18
 801b37a:	e793      	b.n	801b2a4 <Spectral_DrawGraph_Line2+0x23c>
				else if(GraphData[i]+18 > 121)
 801b37c:	2b67      	cmp	r3, #103	; 0x67
 801b37e:	dd08      	ble.n	801b392 <Spectral_DrawGraph_Line2+0x32a>
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801b380:	b2bf      	uxth	r7, r7
 801b382:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b386:	9300      	str	r3, [sp, #0]
 801b388:	227a      	movs	r2, #122	; 0x7a
 801b38a:	463b      	mov	r3, r7
 801b38c:	4639      	mov	r1, r7
 801b38e:	b280      	uxth	r0, r0
 801b390:	e7d2      	b.n	801b338 <Spectral_DrawGraph_Line2+0x2d0>
				else if(GraphData[i]+18 > 68)
 801b392:	2b32      	cmp	r3, #50	; 0x32
 801b394:	dd1a      	ble.n	801b3cc <Spectral_DrawGraph_Line2+0x364>
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801b396:	b2bf      	uxth	r7, r7
 801b398:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b39c:	9300      	str	r3, [sp, #0]
 801b39e:	2245      	movs	r2, #69	; 0x45
 801b3a0:	463b      	mov	r3, r7
 801b3a2:	4639      	mov	r1, r7
 801b3a4:	b280      	uxth	r0, r0
 801b3a6:	e7d0      	b.n	801b34a <Spectral_DrawGraph_Line2+0x2e2>
 801b3a8:	20093631 	.word	0x20093631
 801b3ac:	200056f2 	.word	0x200056f2
 801b3b0:	20009758 	.word	0x20009758
 801b3b4:	20009ce8 	.word	0x20009ce8
 801b3b8:	20009ce4 	.word	0x20009ce4
 801b3bc:	20000a3c 	.word	0x20000a3c
 801b3c0:	20009ce6 	.word	0x20009ce6
 801b3c4:	20000cd0 	.word	0x20000cd0
 801b3c8:	20009ce5 	.word	0x20009ce5
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801b3cc:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 801b3d0:	9200      	str	r2, [sp, #0]
 801b3d2:	b2bb      	uxth	r3, r7
 801b3d4:	2212      	movs	r2, #18
 801b3d6:	4619      	mov	r1, r3
 801b3d8:	b280      	uxth	r0, r0
 801b3da:	e7bf      	b.n	801b35c <Spectral_DrawGraph_Line2+0x2f4>

0801b3dc <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801b3dc:	b570      	push	{r4, r5, r6, lr}
 801b3de:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801b3e2:	eddf 7a23 	vldr	s15, [pc, #140]	; 801b470 <Rabs_graph_to_display+0x94>
 801b3e6:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801b474 <Rabs_graph_to_display+0x98>
 801b3ea:	2800      	cmp	r0, #0
{    
 801b3ec:	b082      	sub	sp, #8
 801b3ee:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801b3f0:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b3f4:	f04f 0100 	mov.w	r1, #0
 801b3f8:	481f      	ldr	r0, [pc, #124]	; (801b478 <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801b3fa:	bf14      	ite	ne
 801b3fc:	2403      	movne	r4, #3
 801b3fe:	2404      	moveq	r4, #4
 801b400:	bf08      	it	eq
 801b402:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801b406:	f004 fa10 	bl	801f82a <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b40a:	4b1c      	ldr	r3, [pc, #112]	; (801b47c <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b40c:	481a      	ldr	r0, [pc, #104]	; (801b478 <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b40e:	ed93 7a00 	vldr	s14, [r3]
 801b412:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801b414:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b416:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801b41a:	edd2 6a00 	vldr	s13, [r2]
 801b41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b422:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b424:	b28d      	uxth	r5, r1
 801b426:	b29b      	uxth	r3, r3
 801b428:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b42a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b42e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b432:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b436:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b43a:	ee07 2a90 	vmov	s15, r2
 801b43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b442:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b44a:	bf4c      	ite	mi
 801b44c:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801b450:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801b454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b458:	edcd 7a01 	vstr	s15, [sp, #4]
 801b45c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b460:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801b464:	d3d7      	bcc.n	801b416 <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801b466:	b002      	add	sp, #8
 801b468:	ecbd 8b02 	vpop	{d8}
 801b46c:	bd70      	pop	{r4, r5, r6, pc}
 801b46e:	bf00      	nop
 801b470:	43998000 	.word	0x43998000
 801b474:	43510000 	.word	0x43510000
 801b478:	20009a1e 	.word	0x20009a1e
 801b47c:	20095a90 	.word	0x20095a90

0801b480 <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b484:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b486:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801b488:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801b7dc <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	bf0c      	ite	eq
 801b490:	23f0      	moveq	r3, #240	; 0xf0
 801b492:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801b496:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b498:	9303      	str	r3, [sp, #12]
 801b49a:	4616      	mov	r6, r2
 801b49c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801b4a0:	2400      	movs	r4, #0
        if(direction == 0x00){
 801b4a2:	2d00      	cmp	r5, #0
 801b4a4:	f040 80a0 	bne.w	801b5e8 <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801b4a8:	f898 3000 	ldrb.w	r3, [r8]
 801b4ac:	07db      	lsls	r3, r3, #31
 801b4ae:	d529      	bpl.n	801b504 <Refresh_screen_Graph+0x84>
 801b4b0:	4bc6      	ldr	r3, [pc, #792]	; (801b7cc <Refresh_screen_Graph+0x34c>)
 801b4b2:	8819      	ldrh	r1, [r3, #0]
 801b4b4:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b4b8:	0889      	lsrs	r1, r1, #2
 801b4ba:	9300      	str	r3, [sp, #0]
 801b4bc:	f240 1277 	movw	r2, #375	; 0x177
 801b4c0:	f101 0314 	add.w	r3, r1, #20
 801b4c4:	2044      	movs	r0, #68	; 0x44
 801b4c6:	3112      	adds	r1, #18
 801b4c8:	f000 fa66 	bl	801b998 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801b4cc:	4bc0      	ldr	r3, [pc, #768]	; (801b7d0 <Refresh_screen_Graph+0x350>)
 801b4ce:	8819      	ldrh	r1, [r3, #0]
 801b4d0:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b4d4:	0889      	lsrs	r1, r1, #2
 801b4d6:	9300      	str	r3, [sp, #0]
 801b4d8:	f240 1277 	movw	r2, #375	; 0x177
 801b4dc:	f101 0314 	add.w	r3, r1, #20
 801b4e0:	2044      	movs	r0, #68	; 0x44
 801b4e2:	3112      	adds	r1, #18
 801b4e4:	f000 fa58 	bl	801b998 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801b4e8:	4bba      	ldr	r3, [pc, #744]	; (801b7d4 <Refresh_screen_Graph+0x354>)
 801b4ea:	8819      	ldrh	r1, [r3, #0]
 801b4ec:	f646 0382 	movw	r3, #26754	; 0x6882
 801b4f0:	0889      	lsrs	r1, r1, #2
 801b4f2:	9300      	str	r3, [sp, #0]
 801b4f4:	f240 1277 	movw	r2, #375	; 0x177
 801b4f8:	f101 0314 	add.w	r3, r1, #20
 801b4fc:	2044      	movs	r0, #68	; 0x44
 801b4fe:	3112      	adds	r1, #18
 801b500:	f000 fa4a 	bl	801b998 <TFT_FillRectangle_DMA>
 801b504:	b2a2      	uxth	r2, r4
 801b506:	f10a 0301 	add.w	r3, sl, #1
 801b50a:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801b50e:	8831      	ldrh	r1, [r6, #0]
 801b510:	f898 7000 	ldrb.w	r7, [r8]
 801b514:	441a      	add	r2, r3
 801b516:	8873      	ldrh	r3, [r6, #2]
 801b518:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b51c:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b520:	07ff      	lsls	r7, r7, #31
 801b522:	b280      	uxth	r0, r0
 801b524:	b289      	uxth	r1, r1
 801b526:	b292      	uxth	r2, r2
 801b528:	b29b      	uxth	r3, r3
 801b52a:	f140 8161 	bpl.w	801b7f0 <Refresh_screen_Graph+0x370>
 801b52e:	4faa      	ldr	r7, [pc, #680]	; (801b7d8 <Refresh_screen_Graph+0x358>)
 801b530:	883f      	ldrh	r7, [r7, #0]
 801b532:	08bf      	lsrs	r7, r7, #2
 801b534:	eb0a 0c04 	add.w	ip, sl, r4
 801b538:	3712      	adds	r7, #18
 801b53a:	4567      	cmp	r7, ip
 801b53c:	f280 8158 	bge.w	801b7f0 <Refresh_screen_Graph+0x370>
 801b540:	4fa2      	ldr	r7, [pc, #648]	; (801b7cc <Refresh_screen_Graph+0x34c>)
 801b542:	883f      	ldrh	r7, [r7, #0]
 801b544:	08bf      	lsrs	r7, r7, #2
 801b546:	3712      	adds	r7, #18
 801b548:	4567      	cmp	r7, ip
 801b54a:	f280 8153 	bge.w	801b7f4 <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801b54e:	4fa0      	ldr	r7, [pc, #640]	; (801b7d0 <Refresh_screen_Graph+0x350>)
 801b550:	883f      	ldrh	r7, [r7, #0]
 801b552:	08bf      	lsrs	r7, r7, #2
 801b554:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801b556:	4567      	cmp	r7, ip
 801b558:	f280 814f 	bge.w	801b7fa <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801b55c:	4f9d      	ldr	r7, [pc, #628]	; (801b7d4 <Refresh_screen_Graph+0x354>)
 801b55e:	f8b7 e000 	ldrh.w	lr, [r7]
 801b562:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801b566:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801b56a:	f646 0b82 	movw	fp, #26754	; 0x6882
 801b56e:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801b572:	45e6      	cmp	lr, ip
 801b574:	bfb8      	it	lt
 801b576:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b578:	9700      	str	r7, [sp, #0]
 801b57a:	f000 ffdf 	bl	801c53c <DrawLineX>
 801b57e:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801b580:	9a03      	ldr	r2, [sp, #12]
 801b582:	b2a3      	uxth	r3, r4
 801b584:	429a      	cmp	r2, r3
 801b586:	f106 0602 	add.w	r6, r6, #2
 801b58a:	f1a9 0902 	sub.w	r9, r9, #2
 801b58e:	d888      	bhi.n	801b4a2 <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801b590:	4c92      	ldr	r4, [pc, #584]	; (801b7dc <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801b592:	4628      	mov	r0, r5
 801b594:	f7ff fa8a 	bl	801aaac <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801b598:	7822      	ldrb	r2, [r4, #0]
 801b59a:	0752      	lsls	r2, r2, #29
 801b59c:	d50e      	bpl.n	801b5bc <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801b59e:	2114      	movs	r1, #20
 801b5a0:	4608      	mov	r0, r1
 801b5a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801b5a6:	4a8e      	ldr	r2, [pc, #568]	; (801b7e0 <Refresh_screen_Graph+0x360>)
 801b5a8:	9500      	str	r5, [sp, #0]
 801b5aa:	f7ff fd0d 	bl	801afc8 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801b5ae:	2114      	movs	r1, #20
 801b5b0:	9500      	str	r5, [sp, #0]
 801b5b2:	231f      	movs	r3, #31
 801b5b4:	4a8b      	ldr	r2, [pc, #556]	; (801b7e4 <Refresh_screen_Graph+0x364>)
 801b5b6:	4608      	mov	r0, r1
 801b5b8:	f7ff fd06 	bl	801afc8 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801b5bc:	7823      	ldrb	r3, [r4, #0]
 801b5be:	079b      	lsls	r3, r3, #30
 801b5c0:	d50f      	bpl.n	801b5e2 <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801b5c2:	2114      	movs	r1, #20
 801b5c4:	4608      	mov	r0, r1
 801b5c6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801b5ca:	4a87      	ldr	r2, [pc, #540]	; (801b7e8 <Refresh_screen_Graph+0x368>)
 801b5cc:	9500      	str	r5, [sp, #0]
 801b5ce:	f7ff fcfb 	bl	801afc8 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801b5d2:	2114      	movs	r1, #20
 801b5d4:	9500      	str	r5, [sp, #0]
 801b5d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801b5da:	4a84      	ldr	r2, [pc, #528]	; (801b7ec <Refresh_screen_Graph+0x36c>)
 801b5dc:	4608      	mov	r0, r1
 801b5de:	f7ff fcf3 	bl	801afc8 <Spectral_DrawGraph_Const>
					}
}
 801b5e2:	b005      	add	sp, #20
 801b5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801b5e8:	2d01      	cmp	r5, #1
 801b5ea:	d178      	bne.n	801b6de <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801b5ec:	f898 3000 	ldrb.w	r3, [r8]
 801b5f0:	07db      	lsls	r3, r3, #31
 801b5f2:	d530      	bpl.n	801b656 <Refresh_screen_Graph+0x1d6>
 801b5f4:	4b75      	ldr	r3, [pc, #468]	; (801b7cc <Refresh_screen_Graph+0x34c>)
 801b5f6:	2703      	movs	r7, #3
 801b5f8:	8818      	ldrh	r0, [r3, #0]
 801b5fa:	fbb0 f0f7 	udiv	r0, r0, r7
 801b5fe:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b602:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801b606:	304c      	adds	r0, #76	; 0x4c
 801b608:	9300      	str	r3, [sp, #0]
 801b60a:	b292      	uxth	r2, r2
 801b60c:	23fd      	movs	r3, #253	; 0xfd
 801b60e:	212d      	movs	r1, #45	; 0x2d
 801b610:	b280      	uxth	r0, r0
 801b612:	f000 f9c1 	bl	801b998 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801b616:	4b6e      	ldr	r3, [pc, #440]	; (801b7d0 <Refresh_screen_Graph+0x350>)
 801b618:	8818      	ldrh	r0, [r3, #0]
 801b61a:	fbb0 f0f7 	udiv	r0, r0, r7
 801b61e:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b622:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801b626:	304c      	adds	r0, #76	; 0x4c
 801b628:	9300      	str	r3, [sp, #0]
 801b62a:	b292      	uxth	r2, r2
 801b62c:	23fd      	movs	r3, #253	; 0xfd
 801b62e:	212d      	movs	r1, #45	; 0x2d
 801b630:	b280      	uxth	r0, r0
 801b632:	f000 f9b1 	bl	801b998 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801b636:	4b67      	ldr	r3, [pc, #412]	; (801b7d4 <Refresh_screen_Graph+0x354>)
 801b638:	8818      	ldrh	r0, [r3, #0]
 801b63a:	fbb0 f7f7 	udiv	r7, r0, r7
 801b63e:	f646 0382 	movw	r3, #26754	; 0x6882
 801b642:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801b646:	374c      	adds	r7, #76	; 0x4c
 801b648:	9300      	str	r3, [sp, #0]
 801b64a:	b292      	uxth	r2, r2
 801b64c:	23fd      	movs	r3, #253	; 0xfd
 801b64e:	212d      	movs	r1, #45	; 0x2d
 801b650:	b2b8      	uxth	r0, r7
 801b652:	f000 f9a1 	bl	801b998 <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b656:	f8b9 0000 	ldrh.w	r0, [r9]
 801b65a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801b65e:	f898 7000 	ldrb.w	r7, [r8]
 801b662:	b2a3      	uxth	r3, r4
 801b664:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801b668:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801b66c:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b670:	3348      	adds	r3, #72	; 0x48
 801b672:	07ff      	lsls	r7, r7, #31
 801b674:	b280      	uxth	r0, r0
 801b676:	b289      	uxth	r1, r1
 801b678:	b292      	uxth	r2, r2
 801b67a:	b29b      	uxth	r3, r3
 801b67c:	f140 80b8 	bpl.w	801b7f0 <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801b680:	4f54      	ldr	r7, [pc, #336]	; (801b7d4 <Refresh_screen_Graph+0x354>)
 801b682:	f8b7 c000 	ldrh.w	ip, [r7]
 801b686:	f240 1793 	movw	r7, #403	; 0x193
 801b68a:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801b68e:	f04f 0e03 	mov.w	lr, #3
 801b692:	fbbc fcfe 	udiv	ip, ip, lr
 801b696:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b69a:	45dc      	cmp	ip, fp
 801b69c:	dc19      	bgt.n	801b6d2 <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801b69e:	f8df c130 	ldr.w	ip, [pc, #304]	; 801b7d0 <Refresh_screen_Graph+0x350>
 801b6a2:	f8bc c000 	ldrh.w	ip, [ip]
 801b6a6:	fbbc fcfe 	udiv	ip, ip, lr
 801b6aa:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b6ae:	45dc      	cmp	ip, fp
 801b6b0:	dc12      	bgt.n	801b6d8 <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801b6b2:	f8df c118 	ldr.w	ip, [pc, #280]	; 801b7cc <Refresh_screen_Graph+0x34c>
 801b6b6:	f8bc c000 	ldrh.w	ip, [ip]
 801b6ba:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b6be:	f644 3cd4 	movw	ip, #19412	; 0x4bd4
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801b6c2:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b6c6:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801b6ca:	45de      	cmp	lr, fp
 801b6cc:	bfd8      	it	le
 801b6ce:	4667      	movle	r7, ip
 801b6d0:	e752      	b.n	801b578 <Refresh_screen_Graph+0xf8>
 801b6d2:	f646 0782 	movw	r7, #26754	; 0x6882
 801b6d6:	e74f      	b.n	801b578 <Refresh_screen_Graph+0xf8>
 801b6d8:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801b6dc:	e74c      	b.n	801b578 <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801b6de:	2d02      	cmp	r5, #2
 801b6e0:	f47f af4d 	bne.w	801b57e <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801b6e4:	f898 3000 	ldrb.w	r3, [r8]
 801b6e8:	07db      	lsls	r3, r3, #31
 801b6ea:	d535      	bpl.n	801b758 <Refresh_screen_Graph+0x2d8>
 801b6ec:	4b37      	ldr	r3, [pc, #220]	; (801b7cc <Refresh_screen_Graph+0x34c>)
 801b6ee:	f240 1795 	movw	r7, #405	; 0x195
 801b6f2:	8818      	ldrh	r0, [r3, #0]
 801b6f4:	f04f 0b03 	mov.w	fp, #3
 801b6f8:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b6fc:	fbb0 f0fb 	udiv	r0, r0, fp
 801b700:	1a3a      	subs	r2, r7, r0
 801b702:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801b706:	9300      	str	r3, [sp, #0]
 801b708:	b292      	uxth	r2, r2
 801b70a:	23e3      	movs	r3, #227	; 0xe3
 801b70c:	2113      	movs	r1, #19
 801b70e:	b280      	uxth	r0, r0
 801b710:	f000 f942 	bl	801b998 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801b714:	4b2e      	ldr	r3, [pc, #184]	; (801b7d0 <Refresh_screen_Graph+0x350>)
 801b716:	8818      	ldrh	r0, [r3, #0]
 801b718:	fbb0 f0fb 	udiv	r0, r0, fp
 801b71c:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b720:	1a3a      	subs	r2, r7, r0
 801b722:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801b726:	9300      	str	r3, [sp, #0]
 801b728:	b292      	uxth	r2, r2
 801b72a:	23e3      	movs	r3, #227	; 0xe3
 801b72c:	2113      	movs	r1, #19
 801b72e:	b280      	uxth	r0, r0
 801b730:	f000 f932 	bl	801b998 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801b734:	4b27      	ldr	r3, [pc, #156]	; (801b7d4 <Refresh_screen_Graph+0x354>)
 801b736:	8818      	ldrh	r0, [r3, #0]
 801b738:	fbb0 fbfb 	udiv	fp, r0, fp
 801b73c:	f646 0382 	movw	r3, #26754	; 0x6882
 801b740:	eba7 020b 	sub.w	r2, r7, fp
 801b744:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801b748:	9300      	str	r3, [sp, #0]
 801b74a:	b292      	uxth	r2, r2
 801b74c:	23e3      	movs	r3, #227	; 0xe3
 801b74e:	2113      	movs	r1, #19
 801b750:	fa1f f08b 	uxth.w	r0, fp
 801b754:	f000 f920 	bl	801b998 <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b758:	8830      	ldrh	r0, [r6, #0]
 801b75a:	8872      	ldrh	r2, [r6, #2]
 801b75c:	f898 7000 	ldrb.w	r7, [r8]
 801b760:	b2a3      	uxth	r3, r4
 801b762:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801b766:	3012      	adds	r0, #18
 801b768:	3212      	adds	r2, #18
 801b76a:	334d      	adds	r3, #77	; 0x4d
 801b76c:	07ff      	lsls	r7, r7, #31
 801b76e:	b280      	uxth	r0, r0
 801b770:	b289      	uxth	r1, r1
 801b772:	b292      	uxth	r2, r2
 801b774:	b29b      	uxth	r3, r3
 801b776:	d53b      	bpl.n	801b7f0 <Refresh_screen_Graph+0x370>
 801b778:	4f17      	ldr	r7, [pc, #92]	; (801b7d8 <Refresh_screen_Graph+0x358>)
 801b77a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801b77e:	f8b7 e000 	ldrh.w	lr, [r7]
 801b782:	2703      	movs	r7, #3
 801b784:	fbbe fef7 	udiv	lr, lr, r7
 801b788:	45e6      	cmp	lr, ip
 801b78a:	dc31      	bgt.n	801b7f0 <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue :
 801b78c:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801b7cc <Refresh_screen_Graph+0x34c>
 801b790:	f104 0e02 	add.w	lr, r4, #2
 801b794:	f8bc c000 	ldrh.w	ip, [ip]
 801b798:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b79c:	45f4      	cmp	ip, lr
 801b79e:	dc29      	bgt.n	801b7f4 <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green :
 801b7a0:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801b7d0 <Refresh_screen_Graph+0x350>
 801b7a4:	f8bc c000 	ldrh.w	ip, [ip]
 801b7a8:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b7ac:	45f4      	cmp	ip, lr
 801b7ae:	dc24      	bgt.n	801b7fa <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801b7b0:	f8df c020 	ldr.w	ip, [pc, #32]	; 801b7d4 <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b7b4:	f646 0b82 	movw	fp, #26754	; 0x6882
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801b7b8:	f8bc c000 	ldrh.w	ip, [ip]
 801b7bc:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b7c0:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801b7c4:	45f4      	cmp	ip, lr
 801b7c6:	bfd8      	it	le
 801b7c8:	465f      	movle	r7, fp
 801b7ca:	e6d5      	b.n	801b578 <Refresh_screen_Graph+0xf8>
 801b7cc:	20095b3c 	.word	0x20095b3c
 801b7d0:	20095ca0 	.word	0x20095ca0
 801b7d4:	20095a78 	.word	0x20095a78
 801b7d8:	20095a7a 	.word	0x20095a7a
 801b7dc:	200056f2 	.word	0x200056f2
 801b7e0:	20090d32 	.word	0x20090d32
 801b7e4:	200912d0 	.word	0x200912d0
 801b7e8:	2009100a 	.word	0x2009100a
 801b7ec:	20090a6c 	.word	0x20090a6c
 801b7f0:	2763      	movs	r7, #99	; 0x63
 801b7f2:	e6c1      	b.n	801b578 <Refresh_screen_Graph+0xf8>
 801b7f4:	f644 37d4 	movw	r7, #19412	; 0x4bd4
 801b7f8:	e6be      	b.n	801b578 <Refresh_screen_Graph+0xf8>
 801b7fa:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801b7fe:	e6bb      	b.n	801b578 <Refresh_screen_Graph+0xf8>

0801b800 <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801b800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801b802:	aa06      	add	r2, sp, #24
 801b804:	2300      	movs	r3, #0
 801b806:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801b80a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b80e:	9302      	str	r3, [sp, #8]
 801b810:	2301      	movs	r3, #1
 801b812:	e88d 000c 	stmia.w	sp, {r2, r3}
 801b816:	460a      	mov	r2, r1
 801b818:	4601      	mov	r1, r0
 801b81a:	4804      	ldr	r0, [pc, #16]	; (801b82c <TS_IO_Read+0x2c>)
 801b81c:	f7e7 f884 	bl	8002928 <HAL_I2C_Mem_Read>

  return read_value;
}
 801b820:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801b824:	b007      	add	sp, #28
 801b826:	f85d fb04 	ldr.w	pc, [sp], #4
 801b82a:	bf00      	nop
 801b82c:	200957a0 	.word	0x200957a0

0801b830 <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801b830:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801b832:	2300      	movs	r3, #0
{
 801b834:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801b836:	f88d 3007 	strb.w	r3, [sp, #7]
 801b83a:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801b83c:	21a3      	movs	r1, #163	; 0xa3
 801b83e:	4628      	mov	r0, r5
 801b840:	f7ff ffde 	bl	801b800 <TS_IO_Read>
 801b844:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801b848:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801b84c:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801b84e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801b852:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801b854:	d001      	beq.n	801b85a <TS_ReadID+0x2a>
 801b856:	2b0a      	cmp	r3, #10
 801b858:	d1f0      	bne.n	801b83c <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801b85a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801b85e:	b003      	add	sp, #12
 801b860:	bd30      	pop	{r4, r5, pc}

0801b862 <Touch_Ini>:

void Touch_Ini(void)
{
 801b862:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801b864:	2070      	movs	r0, #112	; 0x70
 801b866:	f7ff ffe3 	bl	801b830 <TS_ReadID>
  HAL_Delay(200);
 801b86a:	20c8      	movs	r0, #200	; 0xc8
}
 801b86c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801b870:	f7e5 bbdc 	b.w	800102c <HAL_Delay>

0801b874 <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;

	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801b876:	b2c5      	uxtb	r5, r0
{
 801b878:	460e      	mov	r6, r1
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801b87a:	4628      	mov	r0, r5
 801b87c:	2103      	movs	r1, #3
{
 801b87e:	4617      	mov	r7, r2
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801b880:	f7ff ffbe 	bl	801b800 <TS_IO_Read>
 801b884:	4c10      	ldr	r4, [pc, #64]	; (801b8c8 <TS_Get_XY1+0x54>)
 801b886:	0200      	lsls	r0, r0, #8
 801b888:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801b88a:	2104      	movs	r1, #4
 801b88c:	4628      	mov	r0, r5
 801b88e:	f7ff ffb7 	bl	801b800 <TS_IO_Read>
 801b892:	8823      	ldrh	r3, [r4, #0]
 801b894:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
//		*Y = (uint16_t)((X_SIZE_Touch - coord) * TS_Callib_x);
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801b896:	4b0d      	ldr	r3, [pc, #52]	; (801b8cc <TS_Get_XY1+0x58>)
 801b898:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801b89a:	b280      	uxth	r0, r0
 801b89c:	8020      	strh	r0, [r4, #0]
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801b89e:	1a18      	subs	r0, r3, r0
 801b8a0:	8038      	strh	r0, [r7, #0]
	else{
//		*X = (uint16_t)(coord * TS_Callib_x);
		*X = coord * TS_Callib_x;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0xFF00;
 801b8a2:	2105      	movs	r1, #5
 801b8a4:	4628      	mov	r0, r5
 801b8a6:	f7ff ffab 	bl	801b800 <TS_IO_Read>
 801b8aa:	0200      	lsls	r0, r0, #8
 801b8ac:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801b8ae:	2106      	movs	r1, #6
 801b8b0:	4628      	mov	r0, r5
 801b8b2:	f7ff ffa5 	bl	801b800 <TS_IO_Read>
 801b8b6:	8823      	ldrh	r3, [r4, #0]
 801b8b8:	4318      	orrs	r0, r3
	
		if (Orientation90)
	{
//		*X = (uint16_t)(coord * TS_Callib_y);
		*X = coord * TS_Callib_y;
		temporary_x = coord;
 801b8ba:	4b05      	ldr	r3, [pc, #20]	; (801b8d0 <TS_Get_XY1+0x5c>)
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801b8bc:	b280      	uxth	r0, r0
		*X = coord * TS_Callib_y;
 801b8be:	8030      	strh	r0, [r6, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801b8c0:	8020      	strh	r0, [r4, #0]
		temporary_x = coord;
 801b8c2:	8018      	strh	r0, [r3, #0]
 801b8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8c6:	bf00      	nop
 801b8c8:	20009cea 	.word	0x20009cea
 801b8cc:	20000eb0 	.word	0x20000eb0
 801b8d0:	20009cec 	.word	0x20009cec

0801b8d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801b8d4:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801b8d6:	2301      	movs	r3, #1
 801b8d8:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801b8dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801b8e0:	2b01      	cmp	r3, #1
 801b8e2:	d10e      	bne.n	801b902 <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801b8e4:	4808      	ldr	r0, [pc, #32]	; (801b908 <BSP_SD_Init+0x34>)
 801b8e6:	f7e9 fe2b 	bl	8005540 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801b8ea:	b938      	cbnz	r0, 801b8fc <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801b8ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b8f0:	4805      	ldr	r0, [pc, #20]	; (801b908 <BSP_SD_Init+0x34>)
 801b8f2:	f7e9 fda1 	bl	8005438 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801b8f6:	3000      	adds	r0, #0
 801b8f8:	bf18      	it	ne
 801b8fa:	2001      	movne	r0, #1
}
 801b8fc:	b003      	add	sp, #12
 801b8fe:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801b902:	2002      	movs	r0, #2
 801b904:	e7fa      	b.n	801b8fc <BSP_SD_Init+0x28>
 801b906:	bf00      	nop
 801b908:	20095840 	.word	0x20095840

0801b90c <BSP_SD_ReadBlocks_DMA>:
{
 801b90c:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801b90e:	4613      	mov	r3, r2
 801b910:	460a      	mov	r2, r1
 801b912:	4601      	mov	r1, r0
 801b914:	4803      	ldr	r0, [pc, #12]	; (801b924 <BSP_SD_ReadBlocks_DMA+0x18>)
 801b916:	f7e9 f9c7 	bl	8004ca8 <HAL_SD_ReadBlocks_DMA>
}
 801b91a:	3000      	adds	r0, #0
 801b91c:	bf18      	it	ne
 801b91e:	2001      	movne	r0, #1
 801b920:	bd08      	pop	{r3, pc}
 801b922:	bf00      	nop
 801b924:	20095840 	.word	0x20095840

0801b928 <BSP_SD_WriteBlocks_DMA>:
{
 801b928:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801b92a:	4613      	mov	r3, r2
 801b92c:	460a      	mov	r2, r1
 801b92e:	4601      	mov	r1, r0
 801b930:	4803      	ldr	r0, [pc, #12]	; (801b940 <BSP_SD_WriteBlocks_DMA+0x18>)
 801b932:	f7e9 fa2b 	bl	8004d8c <HAL_SD_WriteBlocks_DMA>
}
 801b936:	3000      	adds	r0, #0
 801b938:	bf18      	it	ne
 801b93a:	2001      	movne	r0, #1
 801b93c:	bd08      	pop	{r3, pc}
 801b93e:	bf00      	nop
 801b940:	20095840 	.word	0x20095840

0801b944 <BSP_SD_GetCardState>:
{
 801b944:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801b946:	4803      	ldr	r0, [pc, #12]	; (801b954 <BSP_SD_GetCardState+0x10>)
 801b948:	f7e9 fe33 	bl	80055b2 <HAL_SD_GetCardState>
}
 801b94c:	3804      	subs	r0, #4
 801b94e:	bf18      	it	ne
 801b950:	2001      	movne	r0, #1
 801b952:	bd08      	pop	{r3, pc}
 801b954:	20095840 	.word	0x20095840

0801b958 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801b958:	4601      	mov	r1, r0
 801b95a:	4801      	ldr	r0, [pc, #4]	; (801b960 <BSP_SD_GetCardInfo+0x8>)
 801b95c:	f7e9 bd5a 	b.w	8005414 <HAL_SD_GetCardInfo>
 801b960:	20095840 	.word	0x20095840

0801b964 <BSP_SD_WriteCpltCallback>:
 801b964:	4770      	bx	lr

0801b966 <HAL_SD_TxCpltCallback>:
{
 801b966:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801b968:	f7ff fffc 	bl	801b964 <BSP_SD_WriteCpltCallback>
 801b96c:	bd08      	pop	{r3, pc}

0801b96e <BSP_SD_ReadCpltCallback>:
{
 801b96e:	4770      	bx	lr

0801b970 <HAL_SD_RxCpltCallback>:
{
 801b970:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801b972:	f7ff fffc 	bl	801b96e <BSP_SD_ReadCpltCallback>
 801b976:	bd08      	pop	{r3, pc}

0801b978 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801b978:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801b97a:	4903      	ldr	r1, [pc, #12]	; (801b988 <MX_FATFS_Init+0x10>)
 801b97c:	4803      	ldr	r0, [pc, #12]	; (801b98c <MX_FATFS_Init+0x14>)
 801b97e:	f7ed fff5 	bl	800996c <FATFS_LinkDriver>
 801b982:	4b03      	ldr	r3, [pc, #12]	; (801b990 <MX_FATFS_Init+0x18>)
 801b984:	7018      	strb	r0, [r3, #0]
 801b986:	bd08      	pop	{r3, pc}
 801b988:	20093635 	.word	0x20093635
 801b98c:	0803130c 	.word	0x0803130c
 801b990:	20093634 	.word	0x20093634

0801b994 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801b994:	2000      	movs	r0, #0
 801b996:	4770      	bx	lr

0801b998 <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801b998:	4290      	cmp	r0, r2
{
 801b99a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b99e:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801b9a0:	bf88      	it	hi
 801b9a2:	4603      	movhi	r3, r0
{
 801b9a4:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801b9a6:	bf84      	itt	hi
 801b9a8:	4690      	movhi	r8, r2
 801b9aa:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801b9ac:	42a9      	cmp	r1, r5
 801b9ae:	bf88      	it	hi
 801b9b0:	460b      	movhi	r3, r1
{
 801b9b2:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801b9b4:	bf84      	itt	hi
 801b9b6:	462f      	movhi	r7, r5
 801b9b8:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801b9ba:	4b15      	ldr	r3, [pc, #84]	; (801ba10 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801b9bc:	4e15      	ldr	r6, [pc, #84]	; (801ba14 <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801b9be:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801b9c2:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801b9c6:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801b9ca:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801b9ce:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801b9d2:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801b9d4:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801b9d6:	eba9 0304 	sub.w	r3, r9, r4
 801b9da:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801b9dc:	f7e6 f95a 	bl	8001c94 <HAL_DMA2D_Init>
 801b9e0:	b990      	cbnz	r0, 801ba08 <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801b9e2:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801b9e6:	1bed      	subs	r5, r5, r7
 801b9e8:	9500      	str	r5, [sp, #0]
 801b9ea:	4623      	mov	r3, r4
 801b9ec:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801b9f0:	4651      	mov	r1, sl
 801b9f2:	4630      	mov	r0, r6
 801b9f4:	f7e6 f998 	bl	8001d28 <HAL_DMA2D_Start>
 801b9f8:	b930      	cbnz	r0, 801ba08 <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801b9fa:	210a      	movs	r1, #10
 801b9fc:	4630      	mov	r0, r6
    }
  }
}
 801b9fe:	b003      	add	sp, #12
 801ba00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801ba04:	f7e6 b9a9 	b.w	8001d5a <HAL_DMA2D_PollForTransfer>
}
 801ba08:	b003      	add	sp, #12
 801ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba0e:	bf00      	nop
 801ba10:	20095938 	.word	0x20095938
 801ba14:	20095b4c 	.word	0x20095b4c

0801ba18 <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801ba18:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801ba1a:	4c10      	ldr	r4, [pc, #64]	; (801ba5c <TFT_FillScreen_DMA+0x44>)
 801ba1c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801ba20:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801ba22:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801ba24:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801ba26:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801ba28:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801ba2a:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801ba2c:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801ba2e:	f7e6 f931 	bl	8001c94 <HAL_DMA2D_Init>
 801ba32:	b980      	cbnz	r0, 801ba56 <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801ba34:	4a0a      	ldr	r2, [pc, #40]	; (801ba60 <TFT_FillScreen_DMA+0x48>)
 801ba36:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801ba38:	9300      	str	r3, [sp, #0]
 801ba3a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801ba3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801ba3e:	4631      	mov	r1, r6
 801ba40:	4620      	mov	r0, r4
 801ba42:	f7e6 f971 	bl	8001d28 <HAL_DMA2D_Start>
 801ba46:	b930      	cbnz	r0, 801ba56 <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801ba48:	4629      	mov	r1, r5
 801ba4a:	4620      	mov	r0, r4
    }
  }
}
 801ba4c:	b002      	add	sp, #8
 801ba4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801ba52:	f7e6 b982 	b.w	8001d5a <HAL_DMA2D_PollForTransfer>
}
 801ba56:	b002      	add	sp, #8
 801ba58:	bd70      	pop	{r4, r5, r6, pc}
 801ba5a:	bf00      	nop
 801ba5c:	20095b4c 	.word	0x20095b4c
 801ba60:	20095938 	.word	0x20095938

0801ba64 <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801ba64:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801ba66:	4b14      	ldr	r3, [pc, #80]	; (801bab8 <TFT_DrawPixel+0x54>)
 801ba68:	781c      	ldrb	r4, [r3, #0]
 801ba6a:	b97c      	cbnz	r4, 801ba8c <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801ba6c:	4b13      	ldr	r3, [pc, #76]	; (801babc <TFT_DrawPixel+0x58>)
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801ba72:	4913      	ldr	r1, [pc, #76]	; (801bac0 <TFT_DrawPixel+0x5c>)
 801ba74:	8809      	ldrh	r1, [r1, #0]
 801ba76:	3901      	subs	r1, #1
 801ba78:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801ba7a:	4812      	ldr	r0, [pc, #72]	; (801bac4 <TFT_DrawPixel+0x60>)
 801ba7c:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801ba7e:	b289      	uxth	r1, r1
 801ba80:	fb04 3111 	mls	r1, r4, r1, r3
 801ba84:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801ba86:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801ba8a:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801ba8c:	781c      	ldrb	r4, [r3, #0]
 801ba8e:	2c01      	cmp	r4, #1
 801ba90:	d105      	bne.n	801ba9e <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801ba92:	4c0c      	ldr	r4, [pc, #48]	; (801bac4 <TFT_DrawPixel+0x60>)
 801ba94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801ba96:	fb03 0101 	mla	r1, r3, r1, r0
 801ba9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801ba9c:	e7f3      	b.n	801ba86 <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801ba9e:	781b      	ldrb	r3, [r3, #0]
 801baa0:	2b02      	cmp	r3, #2
 801baa2:	d1f2      	bne.n	801ba8a <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801baa4:	4b05      	ldr	r3, [pc, #20]	; (801babc <TFT_DrawPixel+0x58>)
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	1a18      	subs	r0, r3, r0
 801baaa:	4b06      	ldr	r3, [pc, #24]	; (801bac4 <TFT_DrawPixel+0x60>)
 801baac:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801baae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bab0:	fb04 0111 	mls	r1, r4, r1, r0
 801bab4:	e7e7      	b.n	801ba86 <TFT_DrawPixel+0x22>
 801bab6:	bf00      	nop
 801bab8:	20005690 	.word	0x20005690
 801babc:	20000eb4 	.word	0x20000eb4
 801bac0:	20000eba 	.word	0x20000eba
 801bac4:	20095938 	.word	0x20095938

0801bac8 <TFT_DrawCircleCorner>:
{
 801bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bacc:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801bace:	b293      	uxth	r3, r2
 801bad0:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801bad4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801bad8:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801bada:	005b      	lsls	r3, r3, #1
 801badc:	b21b      	sxth	r3, r3
 801bade:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801bae0:	2300      	movs	r3, #0
 801bae2:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801bae4:	f00a 0301 	and.w	r3, sl, #1
{
 801bae8:	4689      	mov	r9, r1
 801baea:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801baec:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801baee:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801baf0:	b287      	uxth	r7, r0
    while (x < y) {
 801baf2:	f9bd 3000 	ldrsh.w	r3, [sp]
 801baf6:	42b3      	cmp	r3, r6
 801baf8:	db02      	blt.n	801bb00 <TFT_DrawCircleCorner+0x38>
}
 801bafa:	b005      	add	sp, #20
 801bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801bb00:	2c00      	cmp	r4, #0
 801bb02:	db08      	blt.n	801bb16 <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801bb04:	9b01      	ldr	r3, [sp, #4]
 801bb06:	3302      	adds	r3, #2
 801bb08:	b29b      	uxth	r3, r3
            y--;
 801bb0a:	3e01      	subs	r6, #1
            ddF_y += 2;
 801bb0c:	b21a      	sxth	r2, r3
            f += ddF_y;
 801bb0e:	441c      	add	r4, r3
            y--;
 801bb10:	b236      	sxth	r6, r6
            ddF_y += 2;
 801bb12:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801bb14:	b224      	sxth	r4, r4
 801bb16:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801bb1a:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801bb1c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801bb20:	3403      	adds	r4, #3
 801bb22:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801bb24:	b1e3      	cbz	r3, 801bb60 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801bb26:	fa1f f889 	uxth.w	r8, r9
 801bb2a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bb2e:	9303      	str	r3, [sp, #12]
 801bb30:	fa1f fb86 	uxth.w	fp, r6
 801bb34:	f108 3eff 	add.w	lr, r8, #4294967295
 801bb38:	ebae 0e05 	sub.w	lr, lr, r5
 801bb3c:	eba7 000b 	sub.w	r0, r7, fp
 801bb40:	461a      	mov	r2, r3
 801bb42:	fa1f f18e 	uxth.w	r1, lr
 801bb46:	b280      	uxth	r0, r0
 801bb48:	f7ff ff8c 	bl	801ba64 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801bb4c:	1e78      	subs	r0, r7, #1
 801bb4e:	9b03      	ldr	r3, [sp, #12]
 801bb50:	eba8 010b 	sub.w	r1, r8, fp
 801bb54:	1b40      	subs	r0, r0, r5
 801bb56:	461a      	mov	r2, r3
 801bb58:	b289      	uxth	r1, r1
 801bb5a:	b280      	uxth	r0, r0
 801bb5c:	f7ff ff82 	bl	801ba64 <TFT_DrawPixel>
        if (corner & 0x02) {	
 801bb60:	f01a 0f02 	tst.w	sl, #2
 801bb64:	d01a      	beq.n	801bb9c <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801bb66:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bb6a:	9303      	str	r3, [sp, #12]
 801bb6c:	fa1f f889 	uxth.w	r8, r9
 801bb70:	fa1f fb86 	uxth.w	fp, r6
 801bb74:	1c78      	adds	r0, r7, #1
 801bb76:	eba8 010b 	sub.w	r1, r8, fp
 801bb7a:	4428      	add	r0, r5
 801bb7c:	461a      	mov	r2, r3
 801bb7e:	b289      	uxth	r1, r1
 801bb80:	b280      	uxth	r0, r0
 801bb82:	f7ff ff6f 	bl	801ba64 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801bb86:	f108 31ff 	add.w	r1, r8, #4294967295
 801bb8a:	9b03      	ldr	r3, [sp, #12]
 801bb8c:	1b49      	subs	r1, r1, r5
 801bb8e:	eb07 000b 	add.w	r0, r7, fp
 801bb92:	461a      	mov	r2, r3
 801bb94:	b289      	uxth	r1, r1
 801bb96:	b280      	uxth	r0, r0
 801bb98:	f7ff ff64 	bl	801ba64 <TFT_DrawPixel>
		if (corner & 0x04) {	
 801bb9c:	f01a 0f04 	tst.w	sl, #4
 801bba0:	d01a      	beq.n	801bbd8 <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801bba2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bba6:	9303      	str	r3, [sp, #12]
 801bba8:	fa1f f889 	uxth.w	r8, r9
 801bbac:	fa1f fb86 	uxth.w	fp, r6
 801bbb0:	1c78      	adds	r0, r7, #1
 801bbb2:	eb08 010b 	add.w	r1, r8, fp
 801bbb6:	4428      	add	r0, r5
 801bbb8:	461a      	mov	r2, r3
 801bbba:	b289      	uxth	r1, r1
 801bbbc:	b280      	uxth	r0, r0
 801bbbe:	f7ff ff51 	bl	801ba64 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801bbc2:	f108 0101 	add.w	r1, r8, #1
 801bbc6:	9b03      	ldr	r3, [sp, #12]
 801bbc8:	4429      	add	r1, r5
 801bbca:	eb07 000b 	add.w	r0, r7, fp
 801bbce:	461a      	mov	r2, r3
 801bbd0:	b289      	uxth	r1, r1
 801bbd2:	b280      	uxth	r0, r0
 801bbd4:	f7ff ff46 	bl	801ba64 <TFT_DrawPixel>
        if (corner & 0x08) {	
 801bbd8:	f01a 0f08 	tst.w	sl, #8
 801bbdc:	d01a      	beq.n	801bc14 <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801bbde:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bbe2:	9303      	str	r3, [sp, #12]
 801bbe4:	fa1f fb89 	uxth.w	fp, r9
 801bbe8:	fa1f f886 	uxth.w	r8, r6
 801bbec:	1e78      	subs	r0, r7, #1
 801bbee:	eb0b 0108 	add.w	r1, fp, r8
 801bbf2:	1b40      	subs	r0, r0, r5
 801bbf4:	461a      	mov	r2, r3
 801bbf6:	b289      	uxth	r1, r1
 801bbf8:	b280      	uxth	r0, r0
 801bbfa:	f7ff ff33 	bl	801ba64 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801bbfe:	f10b 0101 	add.w	r1, fp, #1
 801bc02:	9b03      	ldr	r3, [sp, #12]
 801bc04:	4429      	add	r1, r5
 801bc06:	eba7 0008 	sub.w	r0, r7, r8
 801bc0a:	461a      	mov	r2, r3
 801bc0c:	b289      	uxth	r1, r1
 801bc0e:	b280      	uxth	r0, r0
 801bc10:	f7ff ff28 	bl	801ba64 <TFT_DrawPixel>
 801bc14:	9b00      	ldr	r3, [sp, #0]
 801bc16:	3301      	adds	r3, #1
 801bc18:	9300      	str	r3, [sp, #0]
 801bc1a:	e76a      	b.n	801baf2 <TFT_DrawCircleCorner+0x2a>

0801bc1c <TFT_DrawCircle>:
{
 801bc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801bc20:	b295      	uxth	r5, r2
{
 801bc22:	b089      	sub	sp, #36	; 0x24
 801bc24:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801bc26:	f1c5 0201 	rsb	r2, r5, #1
 801bc2a:	b212      	sxth	r2, r2
 801bc2c:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801bc2e:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801bc32:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801bc34:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801bc36:	b29c      	uxth	r4, r3
 801bc38:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801bc3a:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801bc3c:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801bc3e:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801bc40:	b289      	uxth	r1, r1
 801bc42:	4622      	mov	r2, r4
 801bc44:	4630      	mov	r0, r6
 801bc46:	f7ff ff0d 	bl	801ba64 <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801bc4a:	1b79      	subs	r1, r7, r5
 801bc4c:	4622      	mov	r2, r4
 801bc4e:	b289      	uxth	r1, r1
 801bc50:	4630      	mov	r0, r6
 801bc52:	f7ff ff07 	bl	801ba64 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801bc56:	19a8      	adds	r0, r5, r6
 801bc58:	4622      	mov	r2, r4
 801bc5a:	4639      	mov	r1, r7
 801bc5c:	b280      	uxth	r0, r0
 801bc5e:	f7ff ff01 	bl	801ba64 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801bc62:	1b70      	subs	r0, r6, r5
 801bc64:	4622      	mov	r2, r4
 801bc66:	4639      	mov	r1, r7
 801bc68:	b280      	uxth	r0, r0
 801bc6a:	f7ff fefb 	bl	801ba64 <TFT_DrawPixel>
    while (x < y) {
 801bc6e:	2300      	movs	r3, #0
 801bc70:	9302      	str	r3, [sp, #8]
 801bc72:	1c73      	adds	r3, r6, #1
 801bc74:	9304      	str	r3, [sp, #16]
 801bc76:	1e73      	subs	r3, r6, #1
 801bc78:	9305      	str	r3, [sp, #20]
 801bc7a:	1c7b      	adds	r3, r7, #1
 801bc7c:	9306      	str	r3, [sp, #24]
 801bc7e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801bc82:	4543      	cmp	r3, r8
 801bc84:	db02      	blt.n	801bc8c <TFT_DrawCircle+0x70>
}
 801bc86:	b009      	add	sp, #36	; 0x24
 801bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801bc8c:	9b01      	ldr	r3, [sp, #4]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	db0c      	blt.n	801bcac <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801bc92:	9b03      	ldr	r3, [sp, #12]
 801bc94:	3302      	adds	r3, #2
 801bc96:	b29b      	uxth	r3, r3
 801bc98:	b21a      	sxth	r2, r3
 801bc9a:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801bc9c:	9a01      	ldr	r2, [sp, #4]
 801bc9e:	4413      	add	r3, r2
            y--;
 801bca0:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801bca4:	b21b      	sxth	r3, r3
            y--;
 801bca6:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801bcaa:	9301      	str	r3, [sp, #4]
 801bcac:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801bcb0:	9b01      	ldr	r3, [sp, #4]
 801bcb2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801bcb6:	3303      	adds	r3, #3
 801bcb8:	b21b      	sxth	r3, r3
 801bcba:	9301      	str	r3, [sp, #4]
 801bcbc:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801bcbe:	fa1f f588 	uxth.w	r5, r8
 801bcc2:	444b      	add	r3, r9
 801bcc4:	eb07 0b05 	add.w	fp, r7, r5
 801bcc8:	b29b      	uxth	r3, r3
 801bcca:	fa1f fb8b 	uxth.w	fp, fp
 801bcce:	4659      	mov	r1, fp
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	4622      	mov	r2, r4
 801bcd4:	9307      	str	r3, [sp, #28]
 801bcd6:	f7ff fec5 	bl	801ba64 <TFT_DrawPixel>
 801bcda:	9b05      	ldr	r3, [sp, #20]
 801bcdc:	eba3 0a09 	sub.w	sl, r3, r9
 801bce0:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801bce4:	4659      	mov	r1, fp
 801bce6:	4650      	mov	r0, sl
 801bce8:	4622      	mov	r2, r4
 801bcea:	f7ff febb 	bl	801ba64 <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801bcee:	eba7 0b05 	sub.w	fp, r7, r5
 801bcf2:	9b07      	ldr	r3, [sp, #28]
 801bcf4:	fa1f fb8b 	uxth.w	fp, fp
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	4659      	mov	r1, fp
 801bcfc:	4622      	mov	r2, r4
 801bcfe:	f7ff feb1 	bl	801ba64 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801bd02:	4659      	mov	r1, fp
 801bd04:	4650      	mov	r0, sl
 801bd06:	4622      	mov	r2, r4
 801bd08:	f7ff feac 	bl	801ba64 <TFT_DrawPixel>
 801bd0c:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801bd0e:	eb06 0a05 	add.w	sl, r6, r5
 801bd12:	eb09 0b03 	add.w	fp, r9, r3
 801bd16:	fa1f fa8a 	uxth.w	sl, sl
 801bd1a:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801bd1e:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801bd20:	4622      	mov	r2, r4
 801bd22:	4659      	mov	r1, fp
 801bd24:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801bd26:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801bd28:	f7ff fe9c 	bl	801ba64 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801bd2c:	4622      	mov	r2, r4
 801bd2e:	4659      	mov	r1, fp
 801bd30:	4628      	mov	r0, r5
 801bd32:	f7ff fe97 	bl	801ba64 <TFT_DrawPixel>
 801bd36:	1e7b      	subs	r3, r7, #1
 801bd38:	eba3 0909 	sub.w	r9, r3, r9
 801bd3c:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801bd40:	4622      	mov	r2, r4
 801bd42:	4649      	mov	r1, r9
 801bd44:	4650      	mov	r0, sl
 801bd46:	f7ff fe8d 	bl	801ba64 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801bd4a:	4622      	mov	r2, r4
 801bd4c:	4649      	mov	r1, r9
 801bd4e:	4628      	mov	r0, r5
 801bd50:	f7ff fe88 	bl	801ba64 <TFT_DrawPixel>
 801bd54:	9b02      	ldr	r3, [sp, #8]
 801bd56:	3301      	adds	r3, #1
 801bd58:	9302      	str	r3, [sp, #8]
 801bd5a:	e790      	b.n	801bc7e <TFT_DrawCircle+0x62>

0801bd5c <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd60:	b085      	sub	sp, #20
 801bd62:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bd64:	4290      	cmp	r0, r2
{
 801bd66:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bd6a:	9301      	str	r3, [sp, #4]
 801bd6c:	4607      	mov	r7, r0
 801bd6e:	460e      	mov	r6, r1
 801bd70:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bd72:	d211      	bcs.n	801bd98 <TFT_DrawLine+0x3c>
 801bd74:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bd78:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bd7a:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bd7e:	d341      	bcc.n	801be04 <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801bd80:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bd82:	eba6 050a 	sub.w	r5, r6, sl
 801bd86:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801bd88:	bf2c      	ite	cs
 801bd8a:	f04f 39ff 	movcs.w	r9, #4294967295
 801bd8e:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801bd92:	f04f 33ff 	mov.w	r3, #4294967295
 801bd96:	e00b      	b.n	801bdb0 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bd98:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bd9c:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bd9e:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bda2:	d2ed      	bcs.n	801bd80 <TFT_DrawLine+0x24>
 801bda4:	ebaa 0501 	sub.w	r5, sl, r1
 801bda8:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801bdaa:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801bdae:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801bdb0:	45a8      	cmp	r8, r5
 801bdb2:	f04f 0402 	mov.w	r4, #2
 801bdb6:	dd20      	ble.n	801bdfa <TFT_DrawLine+0x9e>
 801bdb8:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801bdbc:	f1c8 0200 	rsb	r2, r8, #0
 801bdc0:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801bdc2:	9a01      	ldr	r2, [sp, #4]
 801bdc4:	9303      	str	r3, [sp, #12]
 801bdc6:	4631      	mov	r1, r6
 801bdc8:	4638      	mov	r0, r7
 801bdca:	f7ff fe4b 	bl	801ba64 <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801bdce:	455f      	cmp	r7, fp
 801bdd0:	9b03      	ldr	r3, [sp, #12]
 801bdd2:	d101      	bne.n	801bdd8 <TFT_DrawLine+0x7c>
 801bdd4:	4556      	cmp	r6, sl
 801bdd6:	d01b      	beq.n	801be10 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801bdd8:	9a02      	ldr	r2, [sp, #8]
 801bdda:	4294      	cmp	r4, r2
			err -= dy;
 801bddc:	bfc1      	itttt	gt
 801bdde:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801bde0:	444f      	addgt	r7, r9
			err -= dy;
 801bde2:	b212      	sxthgt	r2, r2
			x0 += sx;
 801bde4:	b2bf      	uxthgt	r7, r7
 801bde6:	bfd8      	it	le
 801bde8:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801bdea:	42ac      	cmp	r4, r5
 801bdec:	da03      	bge.n	801bdf6 <TFT_DrawLine+0x9a>
			err += dx;
 801bdee:	4442      	add	r2, r8
			y0 += sy;
 801bdf0:	441e      	add	r6, r3
			err += dx;
 801bdf2:	b212      	sxth	r2, r2
			y0 += sy;
 801bdf4:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801bdf6:	4614      	mov	r4, r2
 801bdf8:	e7e3      	b.n	801bdc2 <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801bdfa:	fb95 f4f4 	sdiv	r4, r5, r4
 801bdfe:	4264      	negs	r4, r4
 801be00:	b224      	sxth	r4, r4
 801be02:	e7db      	b.n	801bdbc <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801be04:	ebaa 0501 	sub.w	r5, sl, r1
 801be08:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801be0a:	f04f 0901 	mov.w	r9, #1
 801be0e:	e7ce      	b.n	801bdae <TFT_DrawLine+0x52>
		} 
	}
}
 801be10:	b005      	add	sp, #20
 801be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be16 <TFT_FillRectangle>:
{
 801be16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801be1a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801be1e:	4606      	mov	r6, r0
 801be20:	460c      	mov	r4, r1
 801be22:	4617      	mov	r7, r2
 801be24:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801be26:	42ac      	cmp	r4, r5
 801be28:	d902      	bls.n	801be30 <TFT_FillRectangle+0x1a>
}
 801be2a:	b002      	add	sp, #8
 801be2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801be30:	4623      	mov	r3, r4
 801be32:	4621      	mov	r1, r4
 801be34:	f8cd 8000 	str.w	r8, [sp]
 801be38:	463a      	mov	r2, r7
 801be3a:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801be3c:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801be3e:	f7ff ff8d 	bl	801bd5c <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801be42:	b2a4      	uxth	r4, r4
 801be44:	e7ef      	b.n	801be26 <TFT_FillRectangle+0x10>

0801be46 <TFT_DrawRectangle>:
{
 801be46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801be4a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801be4e:	9400      	str	r4, [sp, #0]
{
 801be50:	461f      	mov	r7, r3
 801be52:	4605      	mov	r5, r0
 801be54:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801be56:	460b      	mov	r3, r1
{
 801be58:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801be5a:	f7ff ff7f 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801be5e:	463b      	mov	r3, r7
 801be60:	462a      	mov	r2, r5
 801be62:	4641      	mov	r1, r8
 801be64:	4628      	mov	r0, r5
 801be66:	9400      	str	r4, [sp, #0]
 801be68:	f7ff ff78 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801be6c:	463b      	mov	r3, r7
 801be6e:	4632      	mov	r2, r6
 801be70:	4641      	mov	r1, r8
 801be72:	4630      	mov	r0, r6
 801be74:	9400      	str	r4, [sp, #0]
 801be76:	f7ff ff71 	bl	801bd5c <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801be7a:	463b      	mov	r3, r7
 801be7c:	4632      	mov	r2, r6
 801be7e:	4639      	mov	r1, r7
 801be80:	4628      	mov	r0, r5
 801be82:	9408      	str	r4, [sp, #32]
}
 801be84:	b002      	add	sp, #8
 801be86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801be8a:	f7ff bf67 	b.w	801bd5c <TFT_DrawLine>

0801be8e <TFT_DrawFilledCircle>:
{
 801be8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801be92:	b297      	uxth	r7, r2
{
 801be94:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801be96:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801be9a:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801be9c:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801be9e:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801bea0:	b29e      	uxth	r6, r3
 801bea2:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801bea6:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801bea8:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801beaa:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801beac:	b289      	uxth	r1, r1
 801beae:	4632      	mov	r2, r6
 801beb0:	4640      	mov	r0, r8
 801beb2:	f7ff fdd7 	bl	801ba64 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801beb6:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801beba:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801bebc:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801bec0:	4632      	mov	r2, r6
 801bec2:	b289      	uxth	r1, r1
 801bec4:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801bec6:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801beca:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801bece:	f7ff fdc9 	bl	801ba64 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801bed2:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801bed4:	4632      	mov	r2, r6
 801bed6:	4629      	mov	r1, r5
 801bed8:	4650      	mov	r0, sl
 801beda:	f7ff fdc3 	bl	801ba64 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801bede:	4632      	mov	r2, r6
 801bee0:	4629      	mov	r1, r5
 801bee2:	4638      	mov	r0, r7
 801bee4:	f7ff fdbe 	bl	801ba64 <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801bee8:	462b      	mov	r3, r5
 801beea:	9600      	str	r6, [sp, #0]
 801beec:	4652      	mov	r2, sl
 801beee:	4629      	mov	r1, r5
 801bef0:	4638      	mov	r0, r7
 801bef2:	f7ff ff33 	bl	801bd5c <TFT_DrawLine>
    while (x < y) {
 801bef6:	2300      	movs	r3, #0
 801bef8:	9302      	str	r3, [sp, #8]
 801befa:	f108 33ff 	add.w	r3, r8, #4294967295
 801befe:	9305      	str	r3, [sp, #20]
 801bf00:	f108 0301 	add.w	r3, r8, #1
 801bf04:	9306      	str	r3, [sp, #24]
 801bf06:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801bf08:	b224      	sxth	r4, r4
 801bf0a:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801bf0c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801bf10:	454b      	cmp	r3, r9
 801bf12:	db02      	blt.n	801bf1a <TFT_DrawFilledCircle+0x8c>
}
 801bf14:	b009      	add	sp, #36	; 0x24
 801bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801bf1a:	2c00      	cmp	r4, #0
 801bf1c:	db0a      	blt.n	801bf34 <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801bf1e:	9b03      	ldr	r3, [sp, #12]
 801bf20:	3302      	adds	r3, #2
 801bf22:	b29b      	uxth	r3, r3
            y--;
 801bf24:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801bf28:	b21a      	sxth	r2, r3
            f += ddF_y;
 801bf2a:	441c      	add	r4, r3
            y--;
 801bf2c:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801bf30:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801bf32:	b224      	sxth	r4, r4
 801bf34:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801bf38:	9b05      	ldr	r3, [sp, #20]
 801bf3a:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801bf3c:	9600      	str	r6, [sp, #0]
 801bf3e:	fa1f f789 	uxth.w	r7, r9
 801bf42:	eba3 0b0a 	sub.w	fp, r3, sl
 801bf46:	19eb      	adds	r3, r5, r7
 801bf48:	fa1f fb8b 	uxth.w	fp, fp
 801bf4c:	b29b      	uxth	r3, r3
 801bf4e:	4452      	add	r2, sl
 801bf50:	b292      	uxth	r2, r2
 801bf52:	4619      	mov	r1, r3
 801bf54:	4658      	mov	r0, fp
 801bf56:	9204      	str	r2, [sp, #16]
 801bf58:	f7ff ff00 	bl	801bd5c <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801bf5c:	1beb      	subs	r3, r5, r7
 801bf5e:	b29b      	uxth	r3, r3
 801bf60:	465a      	mov	r2, fp
 801bf62:	4619      	mov	r1, r3
 801bf64:	9804      	ldr	r0, [sp, #16]
 801bf66:	9600      	str	r6, [sp, #0]
 801bf68:	f7ff fef8 	bl	801bd5c <TFT_DrawLine>
 801bf6c:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801bf6e:	9600      	str	r6, [sp, #0]
 801bf70:	eb08 0b07 	add.w	fp, r8, r7
 801bf74:	4453      	add	r3, sl
 801bf76:	eba8 0707 	sub.w	r7, r8, r7
 801bf7a:	b29b      	uxth	r3, r3
 801bf7c:	fa1f fb8b 	uxth.w	fp, fp
 801bf80:	b2bf      	uxth	r7, r7
 801bf82:	4619      	mov	r1, r3
 801bf84:	463a      	mov	r2, r7
 801bf86:	4658      	mov	r0, fp
 801bf88:	f7ff fee8 	bl	801bd5c <TFT_DrawLine>
 801bf8c:	1e6b      	subs	r3, r5, #1
 801bf8e:	eba3 030a 	sub.w	r3, r3, sl
 801bf92:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801bf94:	4619      	mov	r1, r3
 801bf96:	9600      	str	r6, [sp, #0]
 801bf98:	463a      	mov	r2, r7
 801bf9a:	4658      	mov	r0, fp
 801bf9c:	f7ff fede 	bl	801bd5c <TFT_DrawLine>
 801bfa0:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801bfa2:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801bfa6:	3403      	adds	r4, #3
 801bfa8:	3301      	adds	r3, #1
 801bfaa:	b224      	sxth	r4, r4
 801bfac:	9302      	str	r3, [sp, #8]
 801bfae:	e7ad      	b.n	801bf0c <TFT_DrawFilledCircle+0x7e>

0801bfb0 <TFT_DrawFilledCircleCorner>:
{
 801bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb4:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801bfb6:	b293      	uxth	r3, r2
 801bfb8:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801bfbc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801bfc0:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801bfc2:	005b      	lsls	r3, r3, #1
 801bfc4:	b21b      	sxth	r3, r3
 801bfc6:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801bfc8:	2300      	movs	r3, #0
 801bfca:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801bfcc:	f009 0301 	and.w	r3, r9, #1
{
 801bfd0:	9103      	str	r1, [sp, #12]
 801bfd2:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801bfd4:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801bfd6:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801bfd8:	b284      	uxth	r4, r0
    while (x < y) {
 801bfda:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801bfde:	42bb      	cmp	r3, r7
 801bfe0:	db02      	blt.n	801bfe8 <TFT_DrawFilledCircleCorner+0x38>
}
 801bfe2:	b007      	add	sp, #28
 801bfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801bfe8:	2e00      	cmp	r6, #0
 801bfea:	db08      	blt.n	801bffe <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801bfec:	9b04      	ldr	r3, [sp, #16]
 801bfee:	3302      	adds	r3, #2
 801bff0:	b29b      	uxth	r3, r3
            y--;
 801bff2:	3f01      	subs	r7, #1
            ddF_y += 2;
 801bff4:	b21a      	sxth	r2, r3
            f += ddF_y;
 801bff6:	441e      	add	r6, r3
            y--;
 801bff8:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801bffa:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801bffc:	b236      	sxth	r6, r6
 801bffe:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801c002:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801c004:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801c008:	3603      	adds	r6, #3
 801c00a:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801c00c:	b1f3      	cbz	r3, 801c04c <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801c00e:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c012:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c016:	f8cd b000 	str.w	fp, [sp]
 801c01a:	fa1f fa87 	uxth.w	sl, r7
 801c01e:	eba8 030a 	sub.w	r3, r8, sl
 801c022:	1e62      	subs	r2, r4, #1
 801c024:	b29b      	uxth	r3, r3
 801c026:	1b52      	subs	r2, r2, r5
 801c028:	4619      	mov	r1, r3
 801c02a:	b292      	uxth	r2, r2
 801c02c:	4620      	mov	r0, r4
 801c02e:	f7ff fe95 	bl	801bd5c <TFT_DrawLine>
 801c032:	f108 33ff 	add.w	r3, r8, #4294967295
 801c036:	1b5b      	subs	r3, r3, r5
 801c038:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801c03a:	eba4 020a 	sub.w	r2, r4, sl
 801c03e:	f8cd b000 	str.w	fp, [sp]
 801c042:	b292      	uxth	r2, r2
 801c044:	4619      	mov	r1, r3
 801c046:	4620      	mov	r0, r4
 801c048:	f7ff fe88 	bl	801bd5c <TFT_DrawLine>
        if (corner & 0x02) {	
 801c04c:	f019 0f02 	tst.w	r9, #2
 801c050:	d01e      	beq.n	801c090 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801c052:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c056:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c05a:	f8cd b000 	str.w	fp, [sp]
 801c05e:	fa1f fa87 	uxth.w	sl, r7
 801c062:	eba8 030a 	sub.w	r3, r8, sl
 801c066:	1c60      	adds	r0, r4, #1
 801c068:	b29b      	uxth	r3, r3
 801c06a:	4428      	add	r0, r5
 801c06c:	4619      	mov	r1, r3
 801c06e:	4622      	mov	r2, r4
 801c070:	b280      	uxth	r0, r0
 801c072:	f7ff fe73 	bl	801bd5c <TFT_DrawLine>
 801c076:	f108 33ff 	add.w	r3, r8, #4294967295
 801c07a:	1b5b      	subs	r3, r3, r5
 801c07c:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801c07e:	eb04 000a 	add.w	r0, r4, sl
 801c082:	f8cd b000 	str.w	fp, [sp]
 801c086:	4622      	mov	r2, r4
 801c088:	4619      	mov	r1, r3
 801c08a:	b280      	uxth	r0, r0
 801c08c:	f7ff fe66 	bl	801bd5c <TFT_DrawLine>
		if (corner & 0x04) {
 801c090:	f019 0f04 	tst.w	r9, #4
 801c094:	d01e      	beq.n	801c0d4 <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801c096:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c09a:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c09e:	f8cd b000 	str.w	fp, [sp]
 801c0a2:	fa1f fa87 	uxth.w	sl, r7
 801c0a6:	eb08 030a 	add.w	r3, r8, sl
 801c0aa:	1c62      	adds	r2, r4, #1
 801c0ac:	b29b      	uxth	r3, r3
 801c0ae:	442a      	add	r2, r5
 801c0b0:	4619      	mov	r1, r3
 801c0b2:	b292      	uxth	r2, r2
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	f7ff fe51 	bl	801bd5c <TFT_DrawLine>
 801c0ba:	f108 0301 	add.w	r3, r8, #1
 801c0be:	442b      	add	r3, r5
 801c0c0:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801c0c2:	eb04 000a 	add.w	r0, r4, sl
 801c0c6:	f8cd b000 	str.w	fp, [sp]
 801c0ca:	4622      	mov	r2, r4
 801c0cc:	4619      	mov	r1, r3
 801c0ce:	b280      	uxth	r0, r0
 801c0d0:	f7ff fe44 	bl	801bd5c <TFT_DrawLine>
        if (corner & 0x08) {
 801c0d4:	f019 0f08 	tst.w	r9, #8
 801c0d8:	d01e      	beq.n	801c118 <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801c0da:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c0de:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c0e2:	f8cd b000 	str.w	fp, [sp]
 801c0e6:	fa1f fa87 	uxth.w	sl, r7
 801c0ea:	eb08 030a 	add.w	r3, r8, sl
 801c0ee:	1e60      	subs	r0, r4, #1
 801c0f0:	b29b      	uxth	r3, r3
 801c0f2:	1b40      	subs	r0, r0, r5
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	4622      	mov	r2, r4
 801c0f8:	b280      	uxth	r0, r0
 801c0fa:	f7ff fe2f 	bl	801bd5c <TFT_DrawLine>
 801c0fe:	f108 0301 	add.w	r3, r8, #1
 801c102:	442b      	add	r3, r5
 801c104:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801c106:	eba4 020a 	sub.w	r2, r4, sl
 801c10a:	f8cd b000 	str.w	fp, [sp]
 801c10e:	b292      	uxth	r2, r2
 801c110:	4619      	mov	r1, r3
 801c112:	4620      	mov	r0, r4
 801c114:	f7ff fe22 	bl	801bd5c <TFT_DrawLine>
 801c118:	9b02      	ldr	r3, [sp, #8]
 801c11a:	3301      	adds	r3, #1
 801c11c:	9302      	str	r3, [sp, #8]
 801c11e:	e75c      	b.n	801bfda <TFT_DrawFilledCircleCorner+0x2a>

0801c120 <TFT_DrawFilledRoundedRectangle>:
{
 801c120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801c124:	4282      	cmp	r2, r0
{
 801c126:	4683      	mov	fp, r0
 801c128:	460d      	mov	r5, r1
 801c12a:	4692      	mov	sl, r2
 801c12c:	461c      	mov	r4, r3
 801c12e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801c132:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801c136:	d06d      	beq.n	801c214 <TFT_DrawFilledRoundedRectangle+0xf4>
 801c138:	428b      	cmp	r3, r1
 801c13a:	d06b      	beq.n	801c214 <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801c13c:	b91e      	cbnz	r6, 801c146 <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801c13e:	f8cd 8000 	str.w	r8, [sp]
 801c142:	f7ff fe68 	bl	801be16 <TFT_FillRectangle>
	if (x0 > x1) {
 801c146:	45da      	cmp	sl, fp
 801c148:	bf3e      	ittt	cc
 801c14a:	465b      	movcc	r3, fp
 801c14c:	46d3      	movcc	fp, sl
 801c14e:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801c150:	42ac      	cmp	r4, r5
 801c152:	bf38      	it	cc
 801c154:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801c156:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801c15a:	bf3c      	itt	cc
 801c15c:	4625      	movcc	r5, r4
 801c15e:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801c160:	2302      	movs	r3, #2
 801c162:	fb91 f1f3 	sdiv	r1, r1, r3
 801c166:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801c168:	bfc8      	it	gt
 801c16a:	b28e      	uxthgt	r6, r1
 801c16c:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801c16e:	1b63      	subs	r3, r4, r5
 801c170:	fb93 f3f2 	sdiv	r3, r3, r2
 801c174:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801c176:	bfc8      	it	gt
 801c178:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c17a:	eb0b 0706 	add.w	r7, fp, r6
 801c17e:	ebaa 0906 	sub.w	r9, sl, r6
 801c182:	b2bf      	uxth	r7, r7
 801c184:	fa1f f989 	uxth.w	r9, r9
 801c188:	4623      	mov	r3, r4
 801c18a:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c18c:	1ba4      	subs	r4, r4, r6
 801c18e:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c190:	464a      	mov	r2, r9
 801c192:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c194:	b2ad      	uxth	r5, r5
 801c196:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c198:	f8cd 8000 	str.w	r8, [sp]
 801c19c:	f7ff fe3b 	bl	801be16 <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c1a0:	4623      	mov	r3, r4
 801c1a2:	463a      	mov	r2, r7
 801c1a4:	4629      	mov	r1, r5
 801c1a6:	4658      	mov	r0, fp
 801c1a8:	f8cd 8000 	str.w	r8, [sp]
 801c1ac:	f7ff fe33 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c1b0:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801c1b2:	4623      	mov	r3, r4
 801c1b4:	4652      	mov	r2, sl
 801c1b6:	4629      	mov	r1, r5
 801c1b8:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c1ba:	b23f      	sxth	r7, r7
 801c1bc:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801c1be:	f8cd 8000 	str.w	r8, [sp]
 801c1c2:	f7ff fe28 	bl	801be16 <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801c1c6:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c1ca:	4632      	mov	r2, r6
 801c1cc:	4629      	mov	r1, r5
 801c1ce:	4638      	mov	r0, r7
 801c1d0:	f8cd 8000 	str.w	r8, [sp]
 801c1d4:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c1d6:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c1d8:	f7ff feea 	bl	801bfb0 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c1dc:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801c1de:	4632      	mov	r2, r6
 801c1e0:	4629      	mov	r1, r5
 801c1e2:	4648      	mov	r0, r9
 801c1e4:	f8cd 8000 	str.w	r8, [sp]
 801c1e8:	2302      	movs	r3, #2
 801c1ea:	f7ff fee1 	bl	801bfb0 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c1ee:	4632      	mov	r2, r6
 801c1f0:	4621      	mov	r1, r4
 801c1f2:	4648      	mov	r0, r9
 801c1f4:	f8cd 8000 	str.w	r8, [sp]
 801c1f8:	2304      	movs	r3, #4
 801c1fa:	f7ff fed9 	bl	801bfb0 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801c1fe:	2308      	movs	r3, #8
 801c200:	4632      	mov	r2, r6
 801c202:	4621      	mov	r1, r4
 801c204:	4638      	mov	r0, r7
 801c206:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801c20a:	b003      	add	sp, #12
 801c20c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801c210:	f7ff bece 	b.w	801bfb0 <TFT_DrawFilledCircleCorner>
}
 801c214:	b003      	add	sp, #12
 801c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c21a <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801c21a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c21e:	4688      	mov	r8, r1
 801c220:	a902      	add	r1, sp, #8
 801c222:	e901 000c 	stmdb	r1, {r2, r3}
 801c226:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c228:	4645      	mov	r5, r8
	uint32_t i = 0;
 801c22a:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c22c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c230:	4443      	add	r3, r8
 801c232:	429d      	cmp	r5, r3
 801c234:	da15      	bge.n	801c262 <TFT_DrawBitmap+0x48>
 801c236:	0066      	lsls	r6, r4, #1
 801c238:	eba7 0904 	sub.w	r9, r7, r4
 801c23c:	e006      	b.n	801c24c <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801c23e:	9b01      	ldr	r3, [sp, #4]
 801c240:	4629      	mov	r1, r5
 801c242:	5b9a      	ldrh	r2, [r3, r6]
 801c244:	f7ff fc0e 	bl	801ba64 <TFT_DrawPixel>
			i++;
 801c248:	3401      	adds	r4, #1
 801c24a:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801c24c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c250:	eb09 0004 	add.w	r0, r9, r4
 801c254:	b280      	uxth	r0, r0
 801c256:	443b      	add	r3, r7
 801c258:	4298      	cmp	r0, r3
 801c25a:	dbf0      	blt.n	801c23e <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c25c:	3501      	adds	r5, #1
 801c25e:	b2ad      	uxth	r5, r5
 801c260:	e7e4      	b.n	801c22c <TFT_DrawBitmap+0x12>
		}
	}
}
 801c262:	b003      	add	sp, #12
 801c264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801c268 <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801c268:	4b01      	ldr	r3, [pc, #4]	; (801c270 <TFT_SetFont+0x8>)
 801c26a:	6098      	str	r0, [r3, #8]
 801c26c:	4770      	bx	lr
 801c26e:	bf00      	nop
 801c270:	200956a4 	.word	0x200956a4

0801c274 <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801c274:	4b01      	ldr	r3, [pc, #4]	; (801c27c <TFT_SetTextColor+0x8>)
 801c276:	6018      	str	r0, [r3, #0]
 801c278:	4770      	bx	lr
 801c27a:	bf00      	nop
 801c27c:	200956a4 	.word	0x200956a4

0801c280 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801c280:	4b01      	ldr	r3, [pc, #4]	; (801c288 <TFT_SetBackColor+0x8>)
 801c282:	6058      	str	r0, [r3, #4]
 801c284:	4770      	bx	lr
 801c286:	bf00      	nop
 801c288:	200956a4 	.word	0x200956a4

0801c28c <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801c28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c290:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801c292:	2a01      	cmp	r2, #1
{
 801c294:	9001      	str	r0, [sp, #4]
 801c296:	9102      	str	r1, [sp, #8]
 801c298:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801c350 <TFT_DrawCharRus+0xc4>
 801c29c:	482b      	ldr	r0, [pc, #172]	; (801c34c <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801c29e:	d11f      	bne.n	801c2e0 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801c2a0:	6882      	ldr	r2, [r0, #8]
 801c2a2:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801c2a4:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801c2a8:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801c2aa:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801c2ae:	88d3      	ldrh	r3, [r2, #6]
 801c2b0:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801c2b2:	f10a 0507 	add.w	r5, sl, #7
 801c2b6:	10ed      	asrs	r5, r5, #3
 801c2b8:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801c2bc:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801c2c0:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801c2c2:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801c2c6:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801c2c8:	9303      	str	r3, [sp, #12]
 801c2ca:	9b02      	ldr	r3, [sp, #8]
 801c2cc:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801c2d0:	9b00      	ldr	r3, [sp, #0]
 801c2d2:	4598      	cmp	r8, r3
 801c2d4:	fa1f f989 	uxth.w	r9, r9
 801c2d8:	d30e      	bcc.n	801c2f8 <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801c2da:	b005      	add	sp, #20
 801c2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801c2e0:	6884      	ldr	r4, [r0, #8]
 801c2e2:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801c2e6:	88e2      	ldrh	r2, [r4, #6]
 801c2e8:	434a      	muls	r2, r1
 801c2ea:	88a1      	ldrh	r1, [r4, #4]
 801c2ec:	6824      	ldr	r4, [r4, #0]
 801c2ee:	3107      	adds	r1, #7
 801c2f0:	10c9      	asrs	r1, r1, #3
 801c2f2:	fb01 4202 	mla	r2, r1, r2, r4
 801c2f6:	e7d5      	b.n	801c2a4 <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c2f8:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801c2fc:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c2fe:	eb02 0106 	add.w	r1, r2, r6
 801c302:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801c304:	d00a      	beq.n	801c31c <TFT_DrawCharRus+0x90>
 801c306:	784a      	ldrb	r2, [r1, #1]
 801c308:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801c30a:	bf1d      	ittte	ne
 801c30c:	0212      	lslne	r2, r2, #8
 801c30e:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801c312:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801c314:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801c318:	bf18      	it	ne
 801c31a:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801c31c:	2700      	movs	r7, #0
 801c31e:	4557      	cmp	r7, sl
 801c320:	d303      	bcc.n	801c32a <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801c322:	f108 0801 	add.w	r8, r8, #1
 801c326:	442e      	add	r6, r5
 801c328:	e7cf      	b.n	801c2ca <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801c32a:	9b03      	ldr	r3, [sp, #12]
 801c32c:	1bd9      	subs	r1, r3, r7
 801c32e:	9b01      	ldr	r3, [sp, #4]
 801c330:	2201      	movs	r2, #1
 801c332:	408a      	lsls	r2, r1
 801c334:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801c336:	4b05      	ldr	r3, [pc, #20]	; (801c34c <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801c338:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801c33a:	bf14      	ite	ne
 801c33c:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801c33e:	889a      	ldrheq	r2, [r3, #4]
 801c340:	4649      	mov	r1, r9
 801c342:	b280      	uxth	r0, r0
 801c344:	f7ff fb8e 	bl	801ba64 <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801c348:	3701      	adds	r7, #1
 801c34a:	e7e8      	b.n	801c31e <TFT_DrawCharRus+0x92>
 801c34c:	200956a4 	.word	0x200956a4
 801c350:	200956b4 	.word	0x200956b4

0801c354 <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c358:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801c35a:	4d25      	ldr	r5, [pc, #148]	; (801c3f0 <TFT_DrawCutBMP+0x9c>)
 801c35c:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801c360:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c364:	4c23      	ldr	r4, [pc, #140]	; (801c3f4 <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c366:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801c3f8 <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c36a:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801c36c:	fb09 2303 	mla	r3, r9, r3, r2
 801c370:	1e5a      	subs	r2, r3, #1
 801c372:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c374:	19ca      	adds	r2, r1, r7
{
 801c376:	4683      	mov	fp, r0
	uint16_t q = 1;
 801c378:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c37a:	9202      	str	r2, [sp, #8]
 801c37c:	8822      	ldrh	r2, [r4, #0]
 801c37e:	9902      	ldr	r1, [sp, #8]
 801c380:	428a      	cmp	r2, r1
 801c382:	db02      	blt.n	801c38a <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801c384:	b005      	add	sp, #20
 801c386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c38a:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801c38e:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c392:	f8a8 b000 	strh.w	fp, [r8]
 801c396:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801c398:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c39c:	f8b8 0000 	ldrh.w	r0, [r8]
 801c3a0:	9a01      	ldr	r2, [sp, #4]
 801c3a2:	4290      	cmp	r0, r2
 801c3a4:	db03      	blt.n	801c3ae <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c3a6:	8822      	ldrh	r2, [r4, #0]
 801c3a8:	3201      	adds	r2, #1
 801c3aa:	8022      	strh	r2, [r4, #0]
 801c3ac:	e7e6      	b.n	801c37c <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801c3ae:	6829      	ldr	r1, [r5, #0]
 801c3b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3b2:	9303      	str	r3, [sp, #12]
 801c3b4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801c3b8:	8821      	ldrh	r1, [r4, #0]
 801c3ba:	f7ff fb53 	bl	801ba64 <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801c3be:	682a      	ldr	r2, [r5, #0]
 801c3c0:	9b03      	ldr	r3, [sp, #12]
 801c3c2:	1e71      	subs	r1, r6, #1
 801c3c4:	fb09 a101 	mla	r1, r9, r1, sl
 801c3c8:	4291      	cmp	r1, r2
 801c3ca:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801c3ce:	bf9b      	ittet	ls
 801c3d0:	444a      	addls	r2, r9
 801c3d2:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801c3d4:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801c3d6:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c3d8:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801c3dc:	bf98      	it	ls
 801c3de:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c3e0:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801c3e4:	bf98      	it	ls
 801c3e6:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c3e8:	f8a8 2000 	strh.w	r2, [r8]
 801c3ec:	e7d6      	b.n	801c39c <TFT_DrawCutBMP+0x48>
 801c3ee:	bf00      	nop
 801c3f0:	20009d0c 	.word	0x20009d0c
 801c3f4:	200956a0 	.word	0x200956a0
 801c3f8:	200956b0 	.word	0x200956b0

0801c3fc <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c400:	4b28      	ldr	r3, [pc, #160]	; (801c4a4 <TFT_DrawChar+0xa8>)
{
 801c402:	b085      	sub	sp, #20
 801c404:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c408:	6899      	ldr	r1, [r3, #8]
 801c40a:	4827      	ldr	r0, [pc, #156]	; (801c4a8 <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801c40c:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c410:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801c414:	6809      	ldr	r1, [r1, #0]
 801c416:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801c418:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c41c:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801c41e:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c420:	fb0b f202 	mul.w	r2, fp, r2
 801c424:	fb05 1202 	mla	r2, r5, r2, r1
 801c428:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801c42a:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801c42e:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801c432:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801c434:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801c438:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801c43a:	9303      	str	r3, [sp, #12]
 801c43c:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801c43e:	45d8      	cmp	r8, fp
 801c440:	eb03 0908 	add.w	r9, r3, r8
 801c444:	fa1f f989 	uxth.w	r9, r9
 801c448:	d302      	bcc.n	801c450 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801c44a:	b005      	add	sp, #20
 801c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c450:	9b02      	ldr	r3, [sp, #8]
 801c452:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801c454:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c456:	eb02 0106 	add.w	r1, r2, r6
 801c45a:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801c45c:	d00a      	beq.n	801c474 <TFT_DrawChar+0x78>
 801c45e:	784a      	ldrb	r2, [r1, #1]
 801c460:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801c462:	bf1d      	ittte	ne
 801c464:	0212      	lslne	r2, r2, #8
 801c466:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801c46a:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801c46c:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801c470:	bf18      	it	ne
 801c472:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801c474:	2700      	movs	r7, #0
 801c476:	4557      	cmp	r7, sl
 801c478:	d303      	bcc.n	801c482 <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801c47a:	f108 0801 	add.w	r8, r8, #1
 801c47e:	442e      	add	r6, r5
 801c480:	e7dc      	b.n	801c43c <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801c482:	9b03      	ldr	r3, [sp, #12]
 801c484:	1bd9      	subs	r1, r3, r7
 801c486:	9b00      	ldr	r3, [sp, #0]
 801c488:	2201      	movs	r2, #1
 801c48a:	408a      	lsls	r2, r1
 801c48c:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801c48e:	4b05      	ldr	r3, [pc, #20]	; (801c4a4 <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801c490:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801c492:	bf14      	ite	ne
 801c494:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801c496:	889a      	ldrheq	r2, [r3, #4]
 801c498:	4649      	mov	r1, r9
 801c49a:	b280      	uxth	r0, r0
 801c49c:	f7ff fae2 	bl	801ba64 <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801c4a0:	3701      	adds	r7, #1
 801c4a2:	e7e8      	b.n	801c476 <TFT_DrawChar+0x7a>
 801c4a4:	200956a4 	.word	0x200956a4
 801c4a8:	200956b4 	.word	0x200956b4

0801c4ac <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4b0:	460e      	mov	r6, r1
 801c4b2:	4604      	mov	r4, r0
 801c4b4:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801c4b6:	4611      	mov	r1, r2
 801c4b8:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801c4bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4c0:	2a00      	cmp	r2, #0
 801c4c2:	d1f9      	bne.n	801c4b8 <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801c4c4:	4f1b      	ldr	r7, [pc, #108]	; (801c534 <TFT_DisplayString+0x88>)
 801c4c6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801c538 <TFT_DisplayString+0x8c>
 801c4ca:	68ba      	ldr	r2, [r7, #8]
 801c4cc:	f8b8 1000 	ldrh.w	r1, [r8]
 801c4d0:	8890      	ldrh	r0, [r2, #4]
 801c4d2:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801c4d6:	2b01      	cmp	r3, #1
 801c4d8:	d017      	beq.n	801c50a <TFT_DisplayString+0x5e>
 801c4da:	2b02      	cmp	r3, #2
 801c4dc:	d01c      	beq.n	801c518 <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801c4de:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	bfd8      	it	le
 801c4e4:	2401      	movle	r4, #1
 801c4e6:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801c4e8:	68b9      	ldr	r1, [r7, #8]
 801c4ea:	f8b8 0000 	ldrh.w	r0, [r8]
 801c4ee:	8889      	ldrh	r1, [r1, #4]
 801c4f0:	eba9 0305 	sub.w	r3, r9, r5
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	fb01 0313 	mls	r3, r1, r3, r0
 801c4fa:	b29b      	uxth	r3, r3
 801c4fc:	4299      	cmp	r1, r3
 801c4fe:	f819 2b01 	ldrb.w	r2, [r9], #1
 801c502:	dc00      	bgt.n	801c506 <TFT_DisplayString+0x5a>
 801c504:	b96a      	cbnz	r2, 801c522 <TFT_DisplayString+0x76>
 801c506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801c50a:	eba2 020e 	sub.w	r2, r2, lr
 801c50e:	4342      	muls	r2, r0
 801c510:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801c514:	b2a4      	uxth	r4, r4
			break;
 801c516:	e7e2      	b.n	801c4de <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801c518:	eba2 020e 	sub.w	r2, r2, lr
 801c51c:	fb12 4400 	smlabb	r4, r2, r0, r4
 801c520:	e7f8      	b.n	801c514 <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801c522:	4620      	mov	r0, r4
 801c524:	4631      	mov	r1, r6
 801c526:	f7ff ff69 	bl	801c3fc <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801c52a:	68bb      	ldr	r3, [r7, #8]
 801c52c:	889b      	ldrh	r3, [r3, #4]
 801c52e:	441c      	add	r4, r3
 801c530:	b2a4      	uxth	r4, r4
 801c532:	e7d9      	b.n	801c4e8 <TFT_DisplayString+0x3c>
 801c534:	200956a4 	.word	0x200956a4
 801c538:	20000eb8 	.word	0x20000eb8

0801c53c <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801c53c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801c540:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801c542:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801c544:	eba6 0800 	sub.w	r8, r6, r0
 801c548:	2f00      	cmp	r7, #0
 801c54a:	bfb8      	it	lt
 801c54c:	427f      	neglt	r7, r7
 801c54e:	f1b8 0f00 	cmp.w	r8, #0
 801c552:	bfb8      	it	lt
 801c554:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801c558:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801c55a:	4604      	mov	r4, r0
 801c55c:	460d      	mov	r5, r1
 801c55e:	461a      	mov	r2, r3
 801c560:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801c564:	dd04      	ble.n	801c570 <DrawLineX+0x34>
 801c566:	4633      	mov	r3, r6
        swap(x1, y1);
 801c568:	460c      	mov	r4, r1
        swap(x2, y2);
 801c56a:	4616      	mov	r6, r2
        swap(x1, y1);
 801c56c:	4605      	mov	r5, r0
        swap(x2, y2);
 801c56e:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801c570:	42b4      	cmp	r4, r6
 801c572:	d905      	bls.n	801c580 <DrawLineX+0x44>
 801c574:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801c576:	4615      	mov	r5, r2
 801c578:	461a      	mov	r2, r3
    if(x1>x2){
 801c57a:	4623      	mov	r3, r4
 801c57c:	4634      	mov	r4, r6
 801c57e:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801c580:	eba2 0905 	sub.w	r9, r2, r5
 801c584:	464b      	mov	r3, r9
 801c586:	2b00      	cmp	r3, #0
 801c588:	bfb8      	it	lt
 801c58a:	425b      	neglt	r3, r3
    dx=x2-x1;
 801c58c:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801c590:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801c592:	2302      	movs	r3, #2
 801c594:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801c598:	4295      	cmp	r5, r2
 801c59a:	bf34      	ite	cc
 801c59c:	2301      	movcc	r3, #1
 801c59e:	f04f 33ff 	movcs.w	r3, #4294967295
 801c5a2:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801c5a4:	42b4      	cmp	r4, r6
 801c5a6:	d902      	bls.n	801c5ae <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801c5a8:	b003      	add	sp, #12
 801c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801c5ae:	4547      	cmp	r7, r8
 801c5b0:	bfcb      	itete	gt
 801c5b2:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801c5b4:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801c5b6:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801c5b8:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801c5ba:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801c5bc:	f7ff fa52 	bl	801ba64 <TFT_DrawPixel>
        if (err<0){
 801c5c0:	9b01      	ldr	r3, [sp, #4]
 801c5c2:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801c5c6:	bf48      	it	mi
 801c5c8:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801c5ca:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801c5ce:	bf42      	ittt	mi
 801c5d0:	18ed      	addmi	r5, r5, r3
 801c5d2:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801c5d4:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801c5d6:	b2a4      	uxth	r4, r4
 801c5d8:	e7e4      	b.n	801c5a4 <DrawLineX+0x68>
	...

0801c5dc <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801c5dc:	4b06      	ldr	r3, [pc, #24]	; (801c5f8 <MX_SDMMC1_SD_Init+0x1c>)
 801c5de:	4a07      	ldr	r2, [pc, #28]	; (801c5fc <MX_SDMMC1_SD_Init+0x20>)
 801c5e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801c5e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801c5e6:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801c5e8:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801c5ea:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801c5ec:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801c5ee:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801c5f0:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801c5f2:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801c5f4:	619a      	str	r2, [r3, #24]
 801c5f6:	4770      	bx	lr
 801c5f8:	20095840 	.word	0x20095840
 801c5fc:	50062400 	.word	0x50062400

0801c600 <MX_TIM2_Init>:
{
 801c600:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c602:	4a16      	ldr	r2, [pc, #88]	; (801c65c <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801c604:	4c16      	ldr	r4, [pc, #88]	; (801c660 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c606:	7811      	ldrb	r1, [r2, #0]
 801c608:	4a16      	ldr	r2, [pc, #88]	; (801c664 <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801c60a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801c60e:	f242 7310 	movw	r3, #10000	; 0x2710
 801c612:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801c616:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c618:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c61a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c61e:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801c620:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c622:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801c624:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801c626:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801c628:	f7e9 fc40 	bl	8005eac <HAL_TIM_Base_Init>
 801c62c:	b100      	cbz	r0, 801c630 <MX_TIM2_Init+0x30>
 801c62e:	e7fe      	b.n	801c62e <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801c630:	a908      	add	r1, sp, #32
 801c632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801c636:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801c63a:	4620      	mov	r0, r4
 801c63c:	f7e9 fd92 	bl	8006164 <HAL_TIM_ConfigClockSource>
 801c640:	b100      	cbz	r0, 801c644 <MX_TIM2_Init+0x44>
 801c642:	e7fe      	b.n	801c642 <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801c644:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c646:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801c648:	a901      	add	r1, sp, #4
 801c64a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801c64c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801c64e:	f7e9 fead 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801c652:	b100      	cbz	r0, 801c656 <MX_TIM2_Init+0x56>
 801c654:	e7fe      	b.n	801c654 <MX_TIM2_Init+0x54>
}
 801c656:	b008      	add	sp, #32
 801c658:	bd10      	pop	{r4, pc}
 801c65a:	bf00      	nop
 801c65c:	200905a6 	.word	0x200905a6
 801c660:	20095c14 	.word	0x20095c14
 801c664:	080312f8 	.word	0x080312f8

0801c668 <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801c668:	4a07      	ldr	r2, [pc, #28]	; (801c688 <DWT_Init+0x20>)
 801c66a:	68d3      	ldr	r3, [r2, #12]
 801c66c:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801c670:	d109      	bne.n	801c686 <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801c672:	68d1      	ldr	r1, [r2, #12]
 801c674:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801c678:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801c67a:	4a04      	ldr	r2, [pc, #16]	; (801c68c <DWT_Init+0x24>)
 801c67c:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801c67e:	6813      	ldr	r3, [r2, #0]
 801c680:	f043 0301 	orr.w	r3, r3, #1
 801c684:	6013      	str	r3, [r2, #0]
 801c686:	4770      	bx	lr
 801c688:	e000edf0 	.word	0xe000edf0
 801c68c:	e0001000 	.word	0xe0001000

0801c690 <DWT_Delay>:
  return DWT->CYCCNT;
 801c690:	4a07      	ldr	r2, [pc, #28]	; (801c6b0 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c692:	4b08      	ldr	r3, [pc, #32]	; (801c6b4 <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801c694:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c696:	681b      	ldr	r3, [r3, #0]
{
 801c698:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c69a:	4c07      	ldr	r4, [pc, #28]	; (801c6b8 <DWT_Delay+0x28>)
 801c69c:	fbb3 f3f4 	udiv	r3, r3, r4
 801c6a0:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801c6a4:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801c6a6:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	dbfb      	blt.n	801c6a4 <DWT_Delay+0x14>
}
 801c6ac:	bd10      	pop	{r4, pc}
 801c6ae:	bf00      	nop
 801c6b0:	e0001000 	.word	0xe0001000
 801c6b4:	20000ec4 	.word	0x20000ec4
 801c6b8:	000f4240 	.word	0x000f4240

0801c6bc <Calculate_Data>:
{
 801c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801c6be:	4a78      	ldr	r2, [pc, #480]	; (801c8a0 <Calculate_Data+0x1e4>)
 801c6c0:	4b78      	ldr	r3, [pc, #480]	; (801c8a4 <Calculate_Data+0x1e8>)
 801c6c2:	4979      	ldr	r1, [pc, #484]	; (801c8a8 <Calculate_Data+0x1ec>)
 801c6c4:	4879      	ldr	r0, [pc, #484]	; (801c8ac <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801c6c6:	4d7a      	ldr	r5, [pc, #488]	; (801c8b0 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801c6c8:	4f7a      	ldr	r7, [pc, #488]	; (801c8b4 <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801c6ca:	f7f1 fc3d 	bl	800df48 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801c6ce:	487a      	ldr	r0, [pc, #488]	; (801c8b8 <Calculate_Data+0x1fc>)
 801c6d0:	f7f1 fcd6 	bl	800e080 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801c6d4:	4b79      	ldr	r3, [pc, #484]	; (801c8bc <Calculate_Data+0x200>)
 801c6d6:	4a7a      	ldr	r2, [pc, #488]	; (801c8c0 <Calculate_Data+0x204>)
 801c6d8:	497a      	ldr	r1, [pc, #488]	; (801c8c4 <Calculate_Data+0x208>)
 801c6da:	4874      	ldr	r0, [pc, #464]	; (801c8ac <Calculate_Data+0x1f0>)
 801c6dc:	f7f1 fc82 	bl	800dfe4 <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801c6e0:	4879      	ldr	r0, [pc, #484]	; (801c8c8 <Calculate_Data+0x20c>)
 801c6e2:	f7f1 fceb 	bl	800e0bc <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801c6e6:	7829      	ldrb	r1, [r5, #0]
 801c6e8:	4870      	ldr	r0, [pc, #448]	; (801c8ac <Calculate_Data+0x1f0>)
 801c6ea:	f7f1 fd4d 	bl	800e188 <Calculate_Tc>
 801c6ee:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c6f2:	4b76      	ldr	r3, [pc, #472]	; (801c8cc <Calculate_Data+0x210>)
 801c6f4:	ee17 2a90 	vmov	r2, s15
 801c6f8:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801c6fa:	783a      	ldrb	r2, [r7, #0]
 801c6fc:	2a05      	cmp	r2, #5
 801c6fe:	d114      	bne.n	801c72a <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801c700:	4b73      	ldr	r3, [pc, #460]	; (801c8d0 <Calculate_Data+0x214>)
 801c702:	781b      	ldrb	r3, [r3, #0]
 801c704:	075a      	lsls	r2, r3, #29
 801c706:	f140 80ba 	bpl.w	801c87e <Calculate_Data+0x1c2>
 801c70a:	7828      	ldrb	r0, [r5, #0]
 801c70c:	4e71      	ldr	r6, [pc, #452]	; (801c8d4 <Calculate_Data+0x218>)
 801c70e:	4c72      	ldr	r4, [pc, #456]	; (801c8d8 <Calculate_Data+0x21c>)
 801c710:	2800      	cmp	r0, #0
 801c712:	bf0c      	ite	eq
 801c714:	4630      	moveq	r0, r6
 801c716:	4620      	movne	r0, r4
 801c718:	f7f1 fd12 	bl	800e140 <Calculate_uv1976>
 801c71c:	7828      	ldrb	r0, [r5, #0]
 801c71e:	2800      	cmp	r0, #0
 801c720:	bf0c      	ite	eq
 801c722:	4630      	moveq	r0, r6
 801c724:	4620      	movne	r0, r4
 801c726:	f7f1 fce7 	bl	800e0f8 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801c72a:	783b      	ldrb	r3, [r7, #0]
 801c72c:	3b01      	subs	r3, #1
 801c72e:	2b02      	cmp	r3, #2
 801c730:	f200 80a4 	bhi.w	801c87c <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801c734:	4c69      	ldr	r4, [pc, #420]	; (801c8dc <Calculate_Data+0x220>)
 801c736:	8823      	ldrh	r3, [r4, #0]
 801c738:	07de      	lsls	r6, r3, #31
 801c73a:	d506      	bpl.n	801c74a <Calculate_Data+0x8e>
 801c73c:	4960      	ldr	r1, [pc, #384]	; (801c8c0 <Calculate_Data+0x204>)
 801c73e:	485b      	ldr	r0, [pc, #364]	; (801c8ac <Calculate_Data+0x1f0>)
 801c740:	f7f1 faa4 	bl	800dc8c <Calculate_EL_Day>
 801c744:	4b66      	ldr	r3, [pc, #408]	; (801c8e0 <Calculate_Data+0x224>)
 801c746:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801c74a:	8823      	ldrh	r3, [r4, #0]
 801c74c:	0798      	lsls	r0, r3, #30
 801c74e:	d505      	bpl.n	801c75c <Calculate_Data+0xa0>
 801c750:	4856      	ldr	r0, [pc, #344]	; (801c8ac <Calculate_Data+0x1f0>)
 801c752:	f7f1 fabb 	bl	800dccc <Calculate_EL_Day_Wt>
 801c756:	4b63      	ldr	r3, [pc, #396]	; (801c8e4 <Calculate_Data+0x228>)
 801c758:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c75c:	8823      	ldrh	r3, [r4, #0]
 801c75e:	0499      	lsls	r1, r3, #18
 801c760:	d519      	bpl.n	801c796 <Calculate_Data+0xda>
 801c762:	4961      	ldr	r1, [pc, #388]	; (801c8e8 <Calculate_Data+0x22c>)
 801c764:	4851      	ldr	r0, [pc, #324]	; (801c8ac <Calculate_Data+0x1f0>)
 801c766:	4e61      	ldr	r6, [pc, #388]	; (801c8ec <Calculate_Data+0x230>)
 801c768:	4f5d      	ldr	r7, [pc, #372]	; (801c8e0 <Calculate_Data+0x224>)
 801c76a:	f7f1 fac7 	bl	800dcfc <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c76e:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c770:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c774:	f012 0f01 	tst.w	r2, #1
 801c778:	f040 808f 	bne.w	801c89a <Calculate_Data+0x1de>
 801c77c:	4950      	ldr	r1, [pc, #320]	; (801c8c0 <Calculate_Data+0x204>)
 801c77e:	484b      	ldr	r0, [pc, #300]	; (801c8ac <Calculate_Data+0x1f0>)
 801c780:	f7f1 fa84 	bl	800dc8c <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801c784:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c788:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801c78c:	f7f1 fad6 	bl	800dd3c <Calculate_SP>
 801c790:	4b57      	ldr	r3, [pc, #348]	; (801c8f0 <Calculate_Data+0x234>)
 801c792:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801c796:	8823      	ldrh	r3, [r4, #0]
 801c798:	075a      	lsls	r2, r3, #29
 801c79a:	d506      	bpl.n	801c7aa <Calculate_Data+0xee>
 801c79c:	4955      	ldr	r1, [pc, #340]	; (801c8f4 <Calculate_Data+0x238>)
 801c79e:	4843      	ldr	r0, [pc, #268]	; (801c8ac <Calculate_Data+0x1f0>)
 801c7a0:	f7f1 fada 	bl	800dd58 <Calculate_PPFD_PPL>
 801c7a4:	4b54      	ldr	r3, [pc, #336]	; (801c8f8 <Calculate_Data+0x23c>)
 801c7a6:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801c7aa:	8823      	ldrh	r3, [r4, #0]
 801c7ac:	071b      	lsls	r3, r3, #28
 801c7ae:	d51f      	bpl.n	801c7f0 <Calculate_Data+0x134>
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	4950      	ldr	r1, [pc, #320]	; (801c8f4 <Calculate_Data+0x238>)
 801c7b4:	483d      	ldr	r0, [pc, #244]	; (801c8ac <Calculate_Data+0x1f0>)
 801c7b6:	f7f1 fb3b 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801c7ba:	4b50      	ldr	r3, [pc, #320]	; (801c8fc <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c7bc:	494d      	ldr	r1, [pc, #308]	; (801c8f4 <Calculate_Data+0x238>)
 801c7be:	483b      	ldr	r0, [pc, #236]	; (801c8ac <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801c7c0:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c7c4:	2201      	movs	r2, #1
 801c7c6:	f7f1 fb33 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801c7ca:	4b4d      	ldr	r3, [pc, #308]	; (801c900 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c7cc:	4949      	ldr	r1, [pc, #292]	; (801c8f4 <Calculate_Data+0x238>)
 801c7ce:	4837      	ldr	r0, [pc, #220]	; (801c8ac <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c7d0:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c7d4:	2202      	movs	r2, #2
 801c7d6:	f7f1 fb2b 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801c7da:	4b4a      	ldr	r3, [pc, #296]	; (801c904 <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801c7dc:	4945      	ldr	r1, [pc, #276]	; (801c8f4 <Calculate_Data+0x238>)
 801c7de:	4833      	ldr	r0, [pc, #204]	; (801c8ac <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c7e0:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801c7e4:	2203      	movs	r2, #3
 801c7e6:	f7f1 fb23 	bl	800de30 <Calculate_PPFD_PPL_Range>
 801c7ea:	4b47      	ldr	r3, [pc, #284]	; (801c908 <Calculate_Data+0x24c>)
 801c7ec:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801c7f0:	8823      	ldrh	r3, [r4, #0]
 801c7f2:	051f      	lsls	r7, r3, #20
 801c7f4:	d503      	bpl.n	801c7fe <Calculate_Data+0x142>
 801c7f6:	f7f2 f8a3 	bl	800e940 <Calculate_deltaEab>
 801c7fa:	4b44      	ldr	r3, [pc, #272]	; (801c90c <Calculate_Data+0x250>)
 801c7fc:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801c7fe:	8823      	ldrh	r3, [r4, #0]
 801c800:	065e      	lsls	r6, r3, #25
 801c802:	d50f      	bpl.n	801c824 <Calculate_Data+0x168>
 801c804:	7828      	ldrb	r0, [r5, #0]
 801c806:	4f33      	ldr	r7, [pc, #204]	; (801c8d4 <Calculate_Data+0x218>)
 801c808:	4e33      	ldr	r6, [pc, #204]	; (801c8d8 <Calculate_Data+0x21c>)
 801c80a:	2800      	cmp	r0, #0
 801c80c:	bf0c      	ite	eq
 801c80e:	4638      	moveq	r0, r7
 801c810:	4630      	movne	r0, r6
 801c812:	f7f1 fc95 	bl	800e140 <Calculate_uv1976>
 801c816:	7828      	ldrb	r0, [r5, #0]
 801c818:	2800      	cmp	r0, #0
 801c81a:	bf0c      	ite	eq
 801c81c:	4638      	moveq	r0, r7
 801c81e:	4630      	movne	r0, r6
 801c820:	f7f1 fc6a 	bl	800e0f8 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801c824:	8823      	ldrh	r3, [r4, #0]
 801c826:	0618      	lsls	r0, r3, #24
 801c828:	d509      	bpl.n	801c83e <Calculate_Data+0x182>
 801c82a:	4b39      	ldr	r3, [pc, #228]	; (801c910 <Calculate_Data+0x254>)
 801c82c:	7829      	ldrb	r1, [r5, #0]
 801c82e:	781a      	ldrb	r2, [r3, #0]
 801c830:	4821      	ldr	r0, [pc, #132]	; (801c8b8 <Calculate_Data+0x1fc>)
 801c832:	4b25      	ldr	r3, [pc, #148]	; (801c8c8 <Calculate_Data+0x20c>)
 801c834:	2900      	cmp	r1, #0
 801c836:	bf18      	it	ne
 801c838:	4618      	movne	r0, r3
 801c83a:	f7f1 fe41 	bl	800e4c0 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801c83e:	8823      	ldrh	r3, [r4, #0]
 801c840:	0599      	lsls	r1, r3, #22
 801c842:	d503      	bpl.n	801c84c <Calculate_Data+0x190>
 801c844:	7829      	ldrb	r1, [r5, #0]
 801c846:	4819      	ldr	r0, [pc, #100]	; (801c8ac <Calculate_Data+0x1f0>)
 801c848:	f7f1 ff70 	bl	800e72c <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801c84c:	8823      	ldrh	r3, [r4, #0]
 801c84e:	055a      	lsls	r2, r3, #21
 801c850:	d503      	bpl.n	801c85a <Calculate_Data+0x19e>
 801c852:	7829      	ldrb	r1, [r5, #0]
 801c854:	4815      	ldr	r0, [pc, #84]	; (801c8ac <Calculate_Data+0x1f0>)
 801c856:	f7f1 ff69 	bl	800e72c <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c85a:	8823      	ldrh	r3, [r4, #0]
 801c85c:	04db      	lsls	r3, r3, #19
 801c85e:	d50d      	bpl.n	801c87c <Calculate_Data+0x1c0>
 801c860:	492c      	ldr	r1, [pc, #176]	; (801c914 <Calculate_Data+0x258>)
 801c862:	4812      	ldr	r0, [pc, #72]	; (801c8ac <Calculate_Data+0x1f0>)
 801c864:	f7f1 fb6e 	bl	800df44 <Calculate_ELr>
 801c868:	4b2b      	ldr	r3, [pc, #172]	; (801c918 <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801c86a:	492c      	ldr	r1, [pc, #176]	; (801c91c <Calculate_Data+0x260>)
 801c86c:	480f      	ldr	r0, [pc, #60]	; (801c8ac <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c86e:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801c872:	f7f1 fb4d 	bl	800df10 <Calculate_ELb>
 801c876:	4b2a      	ldr	r3, [pc, #168]	; (801c920 <Calculate_Data+0x264>)
 801c878:	ed83 0a00 	vstr	s0, [r3]
 801c87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801c87e:	079b      	lsls	r3, r3, #30
 801c880:	f57f af53 	bpl.w	801c72a <Calculate_Data+0x6e>
 801c884:	4b22      	ldr	r3, [pc, #136]	; (801c910 <Calculate_Data+0x254>)
 801c886:	7829      	ldrb	r1, [r5, #0]
 801c888:	781a      	ldrb	r2, [r3, #0]
 801c88a:	480b      	ldr	r0, [pc, #44]	; (801c8b8 <Calculate_Data+0x1fc>)
 801c88c:	4b0e      	ldr	r3, [pc, #56]	; (801c8c8 <Calculate_Data+0x20c>)
 801c88e:	2900      	cmp	r1, #0
 801c890:	bf18      	it	ne
 801c892:	4618      	movne	r0, r3
 801c894:	f7f1 fe14 	bl	800e4c0 <Calculate_Lab>
 801c898:	e747      	b.n	801c72a <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c89a:	ed97 0a00 	vldr	s0, [r7]
 801c89e:	e771      	b.n	801c784 <Calculate_Data+0xc8>
 801c8a0:	2008c504 	.word	0x2008c504
 801c8a4:	2008e504 	.word	0x2008e504
 801c8a8:	2008b504 	.word	0x2008b504
 801c8ac:	2000c52c 	.word	0x2000c52c
 801c8b0:	200056f4 	.word	0x200056f4
 801c8b4:	200056f1 	.word	0x200056f1
 801c8b8:	2008f518 	.word	0x2008f518
 801c8bc:	2008d504 	.word	0x2008d504
 801c8c0:	20052930 	.word	0x20052930
 801c8c4:	2008a504 	.word	0x2008a504
 801c8c8:	2008f512 	.word	0x2008f512
 801c8cc:	20054930 	.word	0x20054930
 801c8d0:	200056ef 	.word	0x200056ef
 801c8d4:	2008f538 	.word	0x2008f538
 801c8d8:	2008f530 	.word	0x2008f530
 801c8dc:	200056f6 	.word	0x200056f6
 801c8e0:	20095c5c 	.word	0x20095c5c
 801c8e4:	200956c8 	.word	0x200956c8
 801c8e8:	20053930 	.word	0x20053930
 801c8ec:	200956bc 	.word	0x200956bc
 801c8f0:	20095838 	.word	0x20095838
 801c8f4:	20054938 	.word	0x20054938
 801c8f8:	200956d0 	.word	0x200956d0
 801c8fc:	2009583c 	.word	0x2009583c
 801c900:	20095b38 	.word	0x20095b38
 801c904:	20095a74 	.word	0x20095a74
 801c908:	200956cc 	.word	0x200956cc
 801c90c:	20090a66 	.word	0x20090a66
 801c910:	20090a69 	.word	0x20090a69
 801c914:	2000ad28 	.word	0x2000ad28
 801c918:	20095c58 	.word	0x20095c58
 801c91c:	20009d28 	.word	0x20009d28
 801c920:	20095c54 	.word	0x20095c54
 801c924:	00000000 	.word	0x00000000

0801c928 <Get_Battery_Level>:
{
 801c928:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 801c92a:	4c13      	ldr	r4, [pc, #76]	; (801c978 <Get_Battery_Level+0x50>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801c92c:	4d13      	ldr	r5, [pc, #76]	; (801c97c <Get_Battery_Level+0x54>)
	HAL_ADC_Start(&hadc1);
 801c92e:	4620      	mov	r0, r4
 801c930:	f7e4 ff86 	bl	8001840 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801c934:	2102      	movs	r1, #2
 801c936:	4620      	mov	r0, r4
 801c938:	f7e4 fc7c 	bl	8001234 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801c93c:	4620      	mov	r0, r4
 801c93e:	f7e4 fcc7 	bl	80012d0 <HAL_ADC_GetValue>
 801c942:	7028      	strb	r0, [r5, #0]
	HAL_ADC_Stop(&hadc1);
 801c944:	4620      	mov	r0, r4
 801c946:	f7e4 fffa 	bl	800193e <HAL_ADC_Stop>
	return percentage_charge = 100.0*adcResult/190;
 801c94a:	7828      	ldrb	r0, [r5, #0]
 801c94c:	f7e3 fe02 	bl	8000554 <__aeabi_i2d>
 801c950:	2200      	movs	r2, #0
 801c952:	4b0b      	ldr	r3, [pc, #44]	; (801c980 <Get_Battery_Level+0x58>)
 801c954:	f7e3 fe64 	bl	8000620 <__aeabi_dmul>
 801c958:	a305      	add	r3, pc, #20	; (adr r3, 801c970 <Get_Battery_Level+0x48>)
 801c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c95e:	f7e3 ff89 	bl	8000874 <__aeabi_ddiv>
 801c962:	4b08      	ldr	r3, [pc, #32]	; (801c984 <Get_Battery_Level+0x5c>)
}
 801c964:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = 100.0*adcResult/190;
 801c968:	e9c3 0100 	strd	r0, r1, [r3]
}
 801c96c:	bd38      	pop	{r3, r4, r5, pc}
 801c96e:	bf00      	nop
 801c970:	00000000 	.word	0x00000000
 801c974:	4067c000 	.word	0x4067c000
 801c978:	20095a08 	.word	0x20095a08
 801c97c:	20055940 	.word	0x20055940
 801c980:	40590000 	.word	0x40590000
 801c984:	20095b40 	.word	0x20095b40

0801c988 <packet_generator_data_send>:
{
 801c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801c98c:	4c25      	ldr	r4, [pc, #148]	; (801ca24 <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801c98e:	4f26      	ldr	r7, [pc, #152]	; (801ca28 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c990:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801ca30 <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801c994:	2100      	movs	r1, #0
 801c996:	2240      	movs	r2, #64	; 0x40
 801c998:	4620      	mov	r0, r4
 801c99a:	f002 ff46 	bl	801f82a <memset>
			dataToSend[0] = 0xAB;
 801c99e:	23ab      	movs	r3, #171	; 0xab
 801c9a0:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801c9a2:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801c9a4:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801c9a6:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801c9a8:	2301      	movs	r3, #1
 801c9aa:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801c9ac:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801c9ae:	4629      	mov	r1, r5
			q = 5;
 801c9b0:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c9b2:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801c9b4:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801c9b8:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801c9bc:	0a10      	lsrs	r0, r2, #8
 801c9be:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801c9c0:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801c9c2:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801c9c6:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801c9c8:	fa50 f282 	uxtab	r2, r0, r2
 801c9cc:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801c9ce:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801c9d0:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801c9d2:	d803      	bhi.n	801c9dc <packet_generator_data_send+0x54>
 801c9d4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801c9d8:	4295      	cmp	r5, r2
 801c9da:	d118      	bne.n	801ca0e <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c9dc:	7860      	ldrb	r0, [r4, #1]
 801c9de:	7822      	ldrb	r2, [r4, #0]
 801c9e0:	4402      	add	r2, r0
 801c9e2:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c9e4:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c9e6:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801c9e8:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801c9ea:	b2f3      	uxtb	r3, r6
 801c9ec:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801c9ee:	4413      	add	r3, r2
 801c9f0:	185a      	adds	r2, r3, r1
 801c9f2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801c9f6:	4641      	mov	r1, r8
 801c9f8:	2240      	movs	r2, #64	; 0x40
 801c9fa:	4648      	mov	r0, r9
 801c9fc:	f7eb fa7a 	bl	8007ef4 <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801ca00:	3601      	adds	r6, #1
					HAL_Delay(3);
 801ca02:	2003      	movs	r0, #3
 801ca04:	f7e4 fb12 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801ca08:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801ca0a:	2100      	movs	r1, #0
					q = 5;
 801ca0c:	2305      	movs	r3, #5
 801ca0e:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801ca10:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801ca14:	d1ce      	bne.n	801c9b4 <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801ca16:	4b05      	ldr	r3, [pc, #20]	; (801ca2c <packet_generator_data_send+0xa4>)
 801ca18:	2200      	movs	r2, #0
 801ca1a:	601a      	str	r2, [r3, #0]
 801ca1c:	605a      	str	r2, [r3, #4]
 801ca1e:	609a      	str	r2, [r3, #8]
 801ca20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca24:	2008f54c 	.word	0x2008f54c
 801ca28:	2000e52c 	.word	0x2000e52c
 801ca2c:	2008f540 	.word	0x2008f540
 801ca30:	20095ca8 	.word	0x20095ca8

0801ca34 <packet_generator_Rabs_data_send>:
{
 801ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801ca38:	4c3b      	ldr	r4, [pc, #236]	; (801cb28 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ca3a:	4d3c      	ldr	r5, [pc, #240]	; (801cb2c <packet_generator_Rabs_data_send+0xf8>)
 801ca3c:	4f3c      	ldr	r7, [pc, #240]	; (801cb30 <packet_generator_Rabs_data_send+0xfc>)
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ca3e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801cb54 <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801ca42:	2240      	movs	r2, #64	; 0x40
 801ca44:	2100      	movs	r1, #0
 801ca46:	4620      	mov	r0, r4
 801ca48:	f002 feef 	bl	801f82a <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ca4c:	4b39      	ldr	r3, [pc, #228]	; (801cb34 <packet_generator_Rabs_data_send+0x100>)
 801ca4e:	8828      	ldrh	r0, [r5, #0]
 801ca50:	4939      	ldr	r1, [pc, #228]	; (801cb38 <packet_generator_Rabs_data_send+0x104>)
 801ca52:	ed93 0a00 	vldr	s0, [r3]
 801ca56:	f7fc fd4b 	bl	80194f0 <Rabs_calc_Factor1>
 801ca5a:	4b38      	ldr	r3, [pc, #224]	; (801cb3c <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801ca5c:	4938      	ldr	r1, [pc, #224]	; (801cb40 <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ca5e:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801ca62:	edd1 0a00 	vldr	s1, [r1]
 801ca66:	4b37      	ldr	r3, [pc, #220]	; (801cb44 <packet_generator_Rabs_data_send+0x110>)
 801ca68:	8829      	ldrh	r1, [r5, #0]
 801ca6a:	4833      	ldr	r0, [pc, #204]	; (801cb38 <packet_generator_Rabs_data_send+0x104>)
 801ca6c:	4a36      	ldr	r2, [pc, #216]	; (801cb48 <packet_generator_Rabs_data_send+0x114>)
 801ca6e:	f7fc fd73 	bl	8019558 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801ca72:	23ab      	movs	r3, #171	; 0xab
 801ca74:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801ca76:	2312      	movs	r3, #18
 801ca78:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801ca7a:	2303      	movs	r3, #3
 801ca7c:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ca7e:	4b33      	ldr	r3, [pc, #204]	; (801cb4c <packet_generator_Rabs_data_send+0x118>)
 801ca80:	781b      	ldrb	r3, [r3, #0]
 801ca82:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801ca84:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ca88:	bf18      	it	ne
 801ca8a:	2301      	movne	r3, #1
 801ca8c:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801ca8e:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801ca90:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801ca92:	4628      	mov	r0, r5
			q = 7;
 801ca94:	2307      	movs	r3, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ca96:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801ca98:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801ca9c:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801caa0:	0e11      	lsrs	r1, r2, #24
 801caa2:	54e1      	strb	r1, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801caa4:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801caa8:	0c11      	lsrs	r1, r2, #16
 801caaa:	f804 100c 	strb.w	r1, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801caae:	0a11      	lsrs	r1, r2, #8
 801cab0:	f804 100e 	strb.w	r1, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801cab4:	18e1      	adds	r1, r4, r3
 801cab6:	b2d2      	uxtb	r2, r2
 801cab8:	70ca      	strb	r2, [r1, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801caba:	5ce1      	ldrb	r1, [r4, r3]
 801cabc:	4401      	add	r1, r0
 801cabe:	f814 000c 	ldrb.w	r0, [r4, ip]
 801cac2:	4401      	add	r1, r0
 801cac4:	f814 000e 	ldrb.w	r0, [r4, lr]
				q = q + 4;
 801cac8:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801caca:	4408      	add	r0, r1
				q = q + 4;
 801cacc:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cace:	fa12 f080 	uxtah	r0, r2, r0
				if(q >= 62 || cnt == 1023){
 801cad2:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cad4:	b280      	uxth	r0, r0
				if(q >= 62 || cnt == 1023){
 801cad6:	d803      	bhi.n	801cae0 <packet_generator_Rabs_data_send+0xac>
 801cad8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801cadc:	4295      	cmp	r5, r2
 801cade:	d116      	bne.n	801cb0e <packet_generator_Rabs_data_send+0xda>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cae0:	7861      	ldrb	r1, [r4, #1]
 801cae2:	7822      	ldrb	r2, [r4, #0]
 801cae4:	440a      	add	r2, r1
 801cae6:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801cae8:	0a33      	lsrs	r3, r6, #8
 801caea:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801caec:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801caee:	b2f3      	uxtb	r3, r6
 801caf0:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801caf2:	4413      	add	r3, r2
 801caf4:	4418      	add	r0, r3
					packet_number = packet_number + 1;
 801caf6:	3601      	adds	r6, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801caf8:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801cafc:	b2b6      	uxth	r6, r6
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cafe:	2240      	movs	r2, #64	; 0x40
 801cb00:	4641      	mov	r1, r8
 801cb02:	4648      	mov	r0, r9
 801cb04:	f7eb f9f6 	bl	8007ef4 <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801cb08:	2800      	cmp	r0, #0
 801cb0a:	d1f8      	bne.n	801cafe <packet_generator_Rabs_data_send+0xca>
					q = 7;
 801cb0c:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801cb0e:	3501      	adds	r5, #1
 801cb10:	b2ad      	uxth	r5, r5
 801cb12:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801cb16:	d1bf      	bne.n	801ca98 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801cb18:	4b0d      	ldr	r3, [pc, #52]	; (801cb50 <packet_generator_Rabs_data_send+0x11c>)
 801cb1a:	2200      	movs	r2, #0
 801cb1c:	601a      	str	r2, [r3, #0]
 801cb1e:	605a      	str	r2, [r3, #4]
 801cb20:	609a      	str	r2, [r3, #8]
 801cb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb26:	bf00      	nop
 801cb28:	2008f54c 	.word	0x2008f54c
 801cb2c:	20009d12 	.word	0x20009d12
 801cb30:	2000d52c 	.word	0x2000d52c
 801cb34:	2005192c 	.word	0x2005192c
 801cb38:	2000e52c 	.word	0x2000e52c
 801cb3c:	20009d20 	.word	0x20009d20
 801cb40:	20009d24 	.word	0x20009d24
 801cb44:	2000c52c 	.word	0x2000c52c
 801cb48:	20051930 	.word	0x20051930
 801cb4c:	20000ebc 	.word	0x20000ebc
 801cb50:	2008f540 	.word	0x2008f540
 801cb54:	20095ca8 	.word	0x20095ca8

0801cb58 <packet_generator_Calculated_data_send>:
{
 801cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801cb5c:	4c8a      	ldr	r4, [pc, #552]	; (801cd88 <packet_generator_Calculated_data_send+0x230>)
 801cb5e:	f8df 9250 	ldr.w	r9, [pc, #592]	; 801cdb0 <packet_generator_Calculated_data_send+0x258>
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cb62:	f8df b244 	ldr.w	fp, [pc, #580]	; 801cda8 <packet_generator_Calculated_data_send+0x250>
{
 801cb66:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801cb68:	2240      	movs	r2, #64	; 0x40
 801cb6a:	2100      	movs	r1, #0
 801cb6c:	4620      	mov	r0, r4
 801cb6e:	f002 fe5c 	bl	801f82a <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801cb72:	f7f1 fee5 	bl	800e940 <Calculate_deltaEab>
 801cb76:	4b85      	ldr	r3, [pc, #532]	; (801cd8c <packet_generator_Calculated_data_send+0x234>)
 801cb78:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801cb7a:	23ab      	movs	r3, #171	; 0xab
 801cb7c:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801cb7e:	2312      	movs	r3, #18
 801cb80:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801cb82:	2304      	movs	r3, #4
 801cb84:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cb86:	4b82      	ldr	r3, [pc, #520]	; (801cd90 <packet_generator_Calculated_data_send+0x238>)
 801cb88:	781b      	ldrb	r3, [r3, #0]
 801cb8a:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801cb8c:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cb90:	bf18      	it	ne
 801cb92:	2301      	movne	r3, #1
 801cb94:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801cb96:	f884 8006 	strb.w	r8, [r4, #6]
			uint16_t CRC_pack = 0, packet_number = 0;
 801cb9a:	4645      	mov	r5, r8
 801cb9c:	4647      	mov	r7, r8
			q = 7;
 801cb9e:	2607      	movs	r6, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cba0:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801cba2:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801cba6:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801cba8:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cbaa:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801cbac:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cbae:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cbb0:	0c1a      	lsrs	r2, r3, #16
 801cbb2:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cbb4:	0a1a      	lsrs	r2, r3, #8
 801cbb6:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801cbb8:	19a2      	adds	r2, r4, r6
 801cbba:	b2db      	uxtb	r3, r3
 801cbbc:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cbbe:	5da2      	ldrb	r2, [r4, r6]
 801cbc0:	443a      	add	r2, r7
 801cbc2:	5c27      	ldrb	r7, [r4, r0]
 801cbc4:	443a      	add	r2, r7
 801cbc6:	5c67      	ldrb	r7, [r4, r1]
				q = q + 4;
 801cbc8:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cbca:	4417      	add	r7, r2
				q = q + 4;
 801cbcc:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cbce:	fa13 f787 	uxtah	r7, r3, r7
				if(q >= 62 || cnt == 1023){
 801cbd2:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cbd4:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801cbd6:	d803      	bhi.n	801cbe0 <packet_generator_Calculated_data_send+0x88>
 801cbd8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801cbdc:	4598      	cmp	r8, r3
 801cbde:	d11a      	bne.n	801cc16 <packet_generator_Calculated_data_send+0xbe>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cbe0:	7861      	ldrb	r1, [r4, #1]
 801cbe2:	7822      	ldrb	r2, [r4, #0]
 801cbe4:	440a      	add	r2, r1
 801cbe6:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801cbe8:	0a2b      	lsrs	r3, r5, #8
 801cbea:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cbec:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801cbee:	b2eb      	uxtb	r3, r5
 801cbf0:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cbf2:	4413      	add	r3, r2
 801cbf4:	441f      	add	r7, r3
					packet_number = packet_number + 1;
 801cbf6:	3501      	adds	r5, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cbf8:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801cbfc:	b2ad      	uxth	r5, r5
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cbfe:	2240      	movs	r2, #64	; 0x40
 801cc00:	4651      	mov	r1, sl
 801cc02:	4658      	mov	r0, fp
 801cc04:	f7eb f976 	bl	8007ef4 <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801cc08:	4607      	mov	r7, r0
 801cc0a:	2800      	cmp	r0, #0
 801cc0c:	d1f7      	bne.n	801cbfe <packet_generator_Calculated_data_send+0xa6>
					HAL_Delay(3);
 801cc0e:	2003      	movs	r0, #3
 801cc10:	f7e4 fa0c 	bl	800102c <HAL_Delay>
					q = 7;
 801cc14:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801cc16:	f108 0801 	add.w	r8, r8, #1
 801cc1a:	fa1f f888 	uxth.w	r8, r8
 801cc1e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801cc22:	d1be      	bne.n	801cba2 <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend));
 801cc24:	2240      	movs	r2, #64	; 0x40
 801cc26:	2100      	movs	r1, #0
 801cc28:	4857      	ldr	r0, [pc, #348]	; (801cd88 <packet_generator_Calculated_data_send+0x230>)
 801cc2a:	f002 fdfe 	bl	801f82a <memset>
			dataToSend[0] = 0xAB;
 801cc2e:	23ab      	movs	r3, #171	; 0xab
 801cc30:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801cc32:	2312      	movs	r3, #18
 801cc34:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801cc36:	2304      	movs	r3, #4
 801cc38:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cc3a:	4b55      	ldr	r3, [pc, #340]	; (801cd90 <packet_generator_Calculated_data_send+0x238>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801cc3c:	4a55      	ldr	r2, [pc, #340]	; (801cd94 <packet_generator_Calculated_data_send+0x23c>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cc3e:	781b      	ldrb	r3, [r3, #0]
 801cc40:	3300      	adds	r3, #0
 801cc42:	bf18      	it	ne
 801cc44:	2301      	movne	r3, #1
 801cc46:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801cc48:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cc4a:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801cc4e:	0e19      	lsrs	r1, r3, #24
 801cc50:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cc52:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cc56:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801cc58:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cc5c:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cc60:	0a19      	lsrs	r1, r3, #8
 801cc62:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801cc66:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801cc6a:	6853      	ldr	r3, [r2, #4]
 801cc6c:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801cc6e:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801cc72:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801cc76:	0e1a      	lsrs	r2, r3, #24
 801cc78:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801cc7c:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801cc7e:	0c1a      	lsrs	r2, r3, #16
 801cc80:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801cc84:	0a1a      	lsrs	r2, r3, #8
 801cc86:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801cc88:	1df2      	adds	r2, r6, #7
 801cc8a:	9203      	str	r2, [sp, #12]
 801cc8c:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801cc8e:	4b42      	ldr	r3, [pc, #264]	; (801cd98 <packet_generator_Calculated_data_send+0x240>)
 801cc90:	881b      	ldrh	r3, [r3, #0]
 801cc92:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801cc96:	f106 0308 	add.w	r3, r6, #8
 801cc9a:	9300      	str	r3, [sp, #0]
 801cc9c:	9b05      	ldr	r3, [sp, #20]
 801cc9e:	9900      	ldr	r1, [sp, #0]
 801cca0:	0a1a      	lsrs	r2, r3, #8
 801cca2:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801cca4:	f106 0209 	add.w	r2, r6, #9
 801cca8:	9201      	str	r2, [sp, #4]
 801ccaa:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801ccac:	f106 030a 	add.w	r3, r6, #10
 801ccb0:	9302      	str	r3, [sp, #8]
 801ccb2:	4b3a      	ldr	r3, [pc, #232]	; (801cd9c <packet_generator_Calculated_data_send+0x244>)
 801ccb4:	9a02      	ldr	r2, [sp, #8]
 801ccb6:	781b      	ldrb	r3, [r3, #0]
 801ccb8:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801ccba:	4b39      	ldr	r3, [pc, #228]	; (801cda0 <packet_generator_Calculated_data_send+0x248>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801ccbc:	4932      	ldr	r1, [pc, #200]	; (801cd88 <packet_generator_Calculated_data_send+0x230>)
			if(Calculate_deltaEab_Done == 0x01)
 801ccbe:	781b      	ldrb	r3, [r3, #0]
 801ccc0:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801ccc2:	bf01      	itttt	eq
 801ccc4:	4b31      	ldreq	r3, [pc, #196]	; (801cd8c <packet_generator_Calculated_data_send+0x234>)
 801ccc6:	881b      	ldrheq	r3, [r3, #0]
 801ccc8:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801cccc:	9b05      	ldreq	r3, [sp, #20]
 801ccce:	4434      	add	r4, r6
 801ccd0:	bf0b      	itete	eq
 801ccd2:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801ccd4:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801ccd6:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801ccd8:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801ccda:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801ccdc:	4c31      	ldr	r4, [pc, #196]	; (801cda4 <packet_generator_Calculated_data_send+0x24c>)
 801ccde:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801cce0:	198b      	adds	r3, r1, r6
 801cce2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801cce6:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801ccea:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ccee:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801ccf2:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801ccf4:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801ccf8:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801ccfa:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801ccfe:	0e14      	lsrs	r4, r2, #24
 801cd00:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801cd02:	0c14      	lsrs	r4, r2, #16
 801cd04:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801cd06:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801cd08:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801cd0a:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801cd0c:	0a2a      	lsrs	r2, r5, #8
 801cd0e:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801cd10:	780c      	ldrb	r4, [r1, #0]
 801cd12:	784a      	ldrb	r2, [r1, #1]
 801cd14:	4422      	add	r2, r4
 801cd16:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801cd18:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801cd1a:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801cd1c:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801cd1e:	4415      	add	r5, r2
 801cd20:	19ea      	adds	r2, r5, r7
 801cd22:	5d8d      	ldrb	r5, [r1, r6]
 801cd24:	f811 4008 	ldrb.w	r4, [r1, r8]
 801cd28:	5c08      	ldrb	r0, [r1, r0]
 801cd2a:	442a      	add	r2, r5
 801cd2c:	f811 500a 	ldrb.w	r5, [r1, sl]
 801cd30:	442a      	add	r2, r5
 801cd32:	f811 5009 	ldrb.w	r5, [r1, r9]
 801cd36:	442a      	add	r2, r5
 801cd38:	4422      	add	r2, r4
 801cd3a:	f811 400c 	ldrb.w	r4, [r1, ip]
 801cd3e:	4422      	add	r2, r4
 801cd40:	f811 400e 	ldrb.w	r4, [r1, lr]
 801cd44:	4422      	add	r2, r4
 801cd46:	4402      	add	r2, r0
 801cd48:	9803      	ldr	r0, [sp, #12]
 801cd4a:	5c08      	ldrb	r0, [r1, r0]
 801cd4c:	4402      	add	r2, r0
 801cd4e:	9800      	ldr	r0, [sp, #0]
 801cd50:	5c08      	ldrb	r0, [r1, r0]
 801cd52:	4402      	add	r2, r0
 801cd54:	9801      	ldr	r0, [sp, #4]
 801cd56:	5c08      	ldrb	r0, [r1, r0]
 801cd58:	4402      	add	r2, r0
 801cd5a:	9802      	ldr	r0, [sp, #8]
 801cd5c:	7adb      	ldrb	r3, [r3, #11]
 801cd5e:	5c08      	ldrb	r0, [r1, r0]
 801cd60:	4402      	add	r2, r0
 801cd62:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cd64:	4810      	ldr	r0, [pc, #64]	; (801cda8 <packet_generator_Calculated_data_send+0x250>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801cd66:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cd6a:	2240      	movs	r2, #64	; 0x40
 801cd6c:	f7eb f8c2 	bl	8007ef4 <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(3);
 801cd70:	2003      	movs	r0, #3
 801cd72:	f7e4 f95b 	bl	800102c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801cd76:	4b0d      	ldr	r3, [pc, #52]	; (801cdac <packet_generator_Calculated_data_send+0x254>)
 801cd78:	2200      	movs	r2, #0
 801cd7a:	601a      	str	r2, [r3, #0]
 801cd7c:	605a      	str	r2, [r3, #4]
 801cd7e:	609a      	str	r2, [r3, #8]
}
 801cd80:	b007      	add	sp, #28
 801cd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd86:	bf00      	nop
 801cd88:	2008f54c 	.word	0x2008f54c
 801cd8c:	20090a66 	.word	0x20090a66
 801cd90:	20000ebc 	.word	0x20000ebc
 801cd94:	2008f538 	.word	0x2008f538
 801cd98:	20054930 	.word	0x20054930
 801cd9c:	20090a69 	.word	0x20090a69
 801cda0:	20005691 	.word	0x20005691
 801cda4:	2008f530 	.word	0x2008f530
 801cda8:	20095ca8 	.word	0x20095ca8
 801cdac:	2008f540 	.word	0x2008f540
 801cdb0:	2000d52c 	.word	0x2000d52c

0801cdb4 <usb_receive_processing>:
{
 801cdb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801cdb8:	4ca6      	ldr	r4, [pc, #664]	; (801d054 <usb_receive_processing+0x2a0>)
 801cdba:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801cdbe:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801cdc0:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801cdc4:	9501      	str	r5, [sp, #4]
 801cdc6:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801cdc8:	d12a      	bne.n	801ce20 <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801cdca:	f894 8001 	ldrb.w	r8, [r4, #1]
 801cdce:	f1b8 0f12 	cmp.w	r8, #18
 801cdd2:	d117      	bne.n	801ce04 <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801cdd4:	78a7      	ldrb	r7, [r4, #2]
 801cdd6:	2f0a      	cmp	r7, #10
 801cdd8:	f000 80dd 	beq.w	801cf96 <usb_receive_processing+0x1e2>
 801cddc:	d815      	bhi.n	801ce0a <usb_receive_processing+0x56>
 801cdde:	2f02      	cmp	r7, #2
 801cde0:	d023      	beq.n	801ce2a <usb_receive_processing+0x76>
 801cde2:	2f04      	cmp	r7, #4
 801cde4:	f000 81a2 	beq.w	801d12c <usb_receive_processing+0x378>
 801cde8:	2f01      	cmp	r7, #1
 801cdea:	d119      	bne.n	801ce20 <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801cdec:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801cdee:	4c9a      	ldr	r4, [pc, #616]	; (801d058 <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801cdf0:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801cdf2:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801cdf4:	d116      	bne.n	801ce24 <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801cdf6:	f7ff fe1d 	bl	801ca34 <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	6033      	str	r3, [r6, #0]
 801cdfe:	6073      	str	r3, [r6, #4]
 801ce00:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801ce02:	7023      	strb	r3, [r4, #0]
}
 801ce04:	b002      	add	sp, #8
 801ce06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801ce0a:	2f0c      	cmp	r7, #12
 801ce0c:	f000 8146 	beq.w	801d09c <usb_receive_processing+0x2e8>
 801ce10:	f0c0 80d8 	bcc.w	801cfc4 <usb_receive_processing+0x210>
 801ce14:	2f0d      	cmp	r7, #13
 801ce16:	f000 80a7 	beq.w	801cf68 <usb_receive_processing+0x1b4>
 801ce1a:	2f66      	cmp	r7, #102	; 0x66
 801ce1c:	f000 816f 	beq.w	801d0fe <usb_receive_processing+0x34a>
			__asm("nop");
 801ce20:	bf00      	nop
}
 801ce22:	e7ef      	b.n	801ce04 <usb_receive_processing+0x50>
						packet_generator_data_send();
 801ce24:	f7ff fdb0 	bl	801c988 <packet_generator_data_send>
 801ce28:	e7e7      	b.n	801cdfa <usb_receive_processing+0x46>
						send_usb_block = 0;
 801ce2a:	4b8b      	ldr	r3, [pc, #556]	; (801d058 <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801ce2c:	4c8b      	ldr	r4, [pc, #556]	; (801d05c <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801ce2e:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801ce30:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801ce32:	4d8b      	ldr	r5, [pc, #556]	; (801d060 <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801ce34:	2240      	movs	r2, #64	; 0x40
 801ce36:	4620      	mov	r0, r4
 801ce38:	f002 fcf7 	bl	801f82a <memset>
						if (exp_num != dataToReceive[3]){
 801ce3c:	78f3      	ldrb	r3, [r6, #3]
 801ce3e:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801ce40:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801ce44:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801ce46:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801ce4a:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801ce4c:	d07a      	beq.n	801cf44 <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801ce4e:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801ce50:	782a      	ldrb	r2, [r5, #0]
 801ce52:	4b84      	ldr	r3, [pc, #528]	; (801d064 <usb_receive_processing+0x2b0>)
 801ce54:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ce58:	4b83      	ldr	r3, [pc, #524]	; (801d068 <usb_receive_processing+0x2b4>)
 801ce5a:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801ce5c:	f7ff fbd0 	bl	801c600 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801ce60:	7828      	ldrb	r0, [r5, #0]
 801ce62:	f7f1 fe87 	bl	800eb74 <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801ce66:	4a81      	ldr	r2, [pc, #516]	; (801d06c <usb_receive_processing+0x2b8>)
 801ce68:	7933      	ldrb	r3, [r6, #4]
 801ce6a:	7811      	ldrb	r1, [r2, #0]
 801ce6c:	428b      	cmp	r3, r1
 801ce6e:	4691      	mov	r9, r2
 801ce70:	d06c      	beq.n	801cf4c <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801ce72:	3300      	adds	r3, #0
 801ce74:	bf18      	it	ne
 801ce76:	2301      	movne	r3, #1
 801ce78:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801ce7a:	7813      	ldrb	r3, [r2, #0]
 801ce7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d161      	bne.n	801cf48 <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801ce84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801ce88:	4879      	ldr	r0, [pc, #484]	; (801d070 <usb_receive_processing+0x2bc>)
 801ce8a:	f7e5 fbab 	bl	80025e4 <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801ce8e:	4a79      	ldr	r2, [pc, #484]	; (801d074 <usb_receive_processing+0x2c0>)
 801ce90:	7973      	ldrb	r3, [r6, #5]
 801ce92:	7811      	ldrb	r1, [r2, #0]
 801ce94:	428b      	cmp	r3, r1
 801ce96:	4690      	mov	r8, r2
 801ce98:	d05c      	beq.n	801cf54 <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801ce9a:	3300      	adds	r3, #0
 801ce9c:	bf18      	it	ne
 801ce9e:	2301      	movne	r3, #1
 801cea0:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801cea2:	7813      	ldrb	r3, [r2, #0]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d153      	bne.n	801cf50 <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801cea8:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801ceaa:	2120      	movs	r1, #32
 801ceac:	4872      	ldr	r0, [pc, #456]	; (801d078 <usb_receive_processing+0x2c4>)
 801ceae:	f7e5 fb99 	bl	80025e4 <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801ceb2:	4f72      	ldr	r7, [pc, #456]	; (801d07c <usb_receive_processing+0x2c8>)
 801ceb4:	79b3      	ldrb	r3, [r6, #6]
 801ceb6:	783a      	ldrb	r2, [r7, #0]
 801ceb8:	4293      	cmp	r3, r2
 801ceba:	d051      	beq.n	801cf60 <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801cebc:	3300      	adds	r3, #0
 801cebe:	bf18      	it	ne
 801cec0:	2301      	movne	r3, #1
 801cec2:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801cec4:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801cec8:	486d      	ldr	r0, [pc, #436]	; (801d080 <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801ceca:	fa5f fa8a 	uxtb.w	sl, sl
 801cece:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801ced2:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801ced6:	d13f      	bne.n	801cf58 <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801ced8:	f7e9 f9f4 	bl	80062c4 <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801cedc:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801cede:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801cee2:	4865      	ldr	r0, [pc, #404]	; (801d078 <usb_receive_processing+0x2c4>)
 801cee4:	f7e5 fb7e 	bl	80025e4 <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801cee8:	4866      	ldr	r0, [pc, #408]	; (801d084 <usb_receive_processing+0x2d0>)
 801ceea:	79f3      	ldrb	r3, [r6, #7]
 801ceec:	7802      	ldrb	r2, [r0, #0]
 801ceee:	429a      	cmp	r2, r3
 801cef0:	d038      	beq.n	801cf64 <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801cef2:	3300      	adds	r3, #0
 801cef4:	bf18      	it	ne
 801cef6:	2301      	movne	r3, #1
 801cef8:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801cefa:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801cefc:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801cf00:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801cf04:	7800      	ldrb	r0, [r0, #0]
 801cf06:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801cf08:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801cf0a:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801cf0c:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801cf0e:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801cf10:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801cf12:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801cf14:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801cf16:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801cf18:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801cf1a:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801cf1c:	4413      	add	r3, r2
 801cf1e:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cf20:	494e      	ldr	r1, [pc, #312]	; (801d05c <usb_receive_processing+0x2a8>)
 801cf22:	4859      	ldr	r0, [pc, #356]	; (801d088 <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801cf24:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801cf26:	4413      	add	r3, r2
 801cf28:	7862      	ldrb	r2, [r4, #1]
 801cf2a:	4413      	add	r3, r2
 801cf2c:	78a2      	ldrb	r2, [r4, #2]
 801cf2e:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cf30:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801cf32:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cf36:	f7ea ffdd 	bl	8007ef4 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801cf3a:	2300      	movs	r3, #0
 801cf3c:	6033      	str	r3, [r6, #0]
 801cf3e:	6073      	str	r3, [r6, #4]
 801cf40:	60b3      	str	r3, [r6, #8]
					break;
 801cf42:	e75f      	b.n	801ce04 <usb_receive_processing+0x50>
							__asm("nop");
 801cf44:	bf00      	nop
 801cf46:	e78e      	b.n	801ce66 <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801cf48:	2201      	movs	r2, #1
 801cf4a:	e79b      	b.n	801ce84 <usb_receive_processing+0xd0>
							__asm("nop");
 801cf4c:	bf00      	nop
 801cf4e:	e79e      	b.n	801ce8e <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801cf50:	2200      	movs	r2, #0
 801cf52:	e7aa      	b.n	801ceaa <usb_receive_processing+0xf6>
							__asm("nop");
 801cf54:	bf00      	nop
 801cf56:	e7ac      	b.n	801ceb2 <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801cf58:	f7e9 f9ea 	bl	8006330 <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801cf5c:	2200      	movs	r2, #0
 801cf5e:	e7be      	b.n	801cede <usb_receive_processing+0x12a>
							__asm("nop");
 801cf60:	bf00      	nop
 801cf62:	e7c1      	b.n	801cee8 <usb_receive_processing+0x134>
							__asm("nop");
 801cf64:	bf00      	nop
 801cf66:	e7c8      	b.n	801cefa <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801cf68:	4e48      	ldr	r6, [pc, #288]	; (801d08c <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801cf6a:	232c      	movs	r3, #44	; 0x2c
 801cf6c:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801cf6e:	2302      	movs	r3, #2
 801cf70:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801cf72:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801cf74:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801cf76:	f7e5 f831 	bl	8001fdc <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801cf7a:	a901      	add	r1, sp, #4
 801cf7c:	4630      	mov	r0, r6
 801cf7e:	f7e5 f947 	bl	8002210 <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801cf82:	4b43      	ldr	r3, [pc, #268]	; (801d090 <usb_receive_processing+0x2dc>)
 801cf84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801cf88:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801cf8a:	f7e5 f839 	bl	8002000 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801cf8e:	6025      	str	r5, [r4, #0]
 801cf90:	6065      	str	r5, [r4, #4]
 801cf92:	60a5      	str	r5, [r4, #8]
					break;
 801cf94:	e736      	b.n	801ce04 <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801cf96:	7923      	ldrb	r3, [r4, #4]
 801cf98:	78e2      	ldrb	r2, [r4, #3]
 801cf9a:	041b      	lsls	r3, r3, #16
 801cf9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801cfa0:	79a2      	ldrb	r2, [r4, #6]
 801cfa2:	4313      	orrs	r3, r2
 801cfa4:	7962      	ldrb	r2, [r4, #5]
 801cfa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801cfaa:	4a3a      	ldr	r2, [pc, #232]	; (801d094 <usb_receive_processing+0x2e0>)
 801cfac:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801cfae:	4b2b      	ldr	r3, [pc, #172]	; (801d05c <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801cfb0:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801cfb2:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801cfb6:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801cfba:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801cfbc:	6025      	str	r5, [r4, #0]
 801cfbe:	6065      	str	r5, [r4, #4]
 801cfc0:	60a5      	str	r5, [r4, #8]
 801cfc2:	e043      	b.n	801d04c <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801cfc4:	79e0      	ldrb	r0, [r4, #7]
 801cfc6:	f894 8008 	ldrb.w	r8, [r4, #8]
 801cfca:	4e33      	ldr	r6, [pc, #204]	; (801d098 <usb_receive_processing+0x2e4>)
 801cfcc:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801cfd0:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801cfd2:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801cfd6:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801cfd8:	462a      	mov	r2, r5
 801cfda:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801cfdc:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801cfde:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801cfe0:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801cfe2:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801cfe6:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801cfea:	4302      	orrs	r2, r0
 801cfec:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801cfee:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801cff2:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801cff4:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801cff8:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801cffa:	432a      	orrs	r2, r5
 801cffc:	430b      	orrs	r3, r1
 801cffe:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d000:	2100      	movs	r1, #0
 801d002:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d006:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801d00a:	4d22      	ldr	r5, [pc, #136]	; (801d094 <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d00c:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d00e:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d010:	4302      	orrs	r2, r0
 801d012:	430b      	orrs	r3, r1
 801d014:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801d018:	2100      	movs	r1, #0
 801d01a:	4310      	orrs	r0, r2
 801d01c:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d01e:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801d022:	f7e4 ffdb 	bl	8001fdc <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801d026:	4b1a      	ldr	r3, [pc, #104]	; (801d090 <usb_receive_processing+0x2dc>)
 801d028:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d02c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801d02e:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d032:	6829      	ldr	r1, [r5, #0]
 801d034:	2000      	movs	r0, #0
 801d036:	f7e5 f82b 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801d03a:	4604      	mov	r4, r0
 801d03c:	2800      	cmp	r0, #0
 801d03e:	d1f6      	bne.n	801d02e <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801d040:	f7e4 ffde 	bl	8002000 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d044:	4b03      	ldr	r3, [pc, #12]	; (801d054 <usb_receive_processing+0x2a0>)
 801d046:	601c      	str	r4, [r3, #0]
 801d048:	605c      	str	r4, [r3, #4]
 801d04a:	609c      	str	r4, [r3, #8]
						HAL_Delay(3);
 801d04c:	2003      	movs	r0, #3
 801d04e:	f7e3 ffed 	bl	800102c <HAL_Delay>
					break;
 801d052:	e6d7      	b.n	801ce04 <usb_receive_processing+0x50>
 801d054:	2008f540 	.word	0x2008f540
 801d058:	200905b9 	.word	0x200905b9
 801d05c:	2008f54c 	.word	0x2008f54c
 801d060:	200905a6 	.word	0x200905a6
 801d064:	080312f8 	.word	0x080312f8
 801d068:	20095c14 	.word	0x20095c14
 801d06c:	2000bd28 	.word	0x2000bd28
 801d070:	48000800 	.word	0x48000800
 801d074:	20000ebf 	.word	0x20000ebf
 801d078:	48001400 	.word	0x48001400
 801d07c:	20000ebe 	.word	0x20000ebe
 801d080:	200957ec 	.word	0x200957ec
 801d084:	20000ebc 	.word	0x20000ebc
 801d088:	20095ca8 	.word	0x20095ca8
 801d08c:	200959e4 	.word	0x200959e4
 801d090:	40022000 	.word	0x40022000
 801d094:	20095a8c 	.word	0x20095a8c
 801d098:	20095a80 	.word	0x20095a80
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801d09c:	7920      	ldrb	r0, [r4, #4]
 801d09e:	78e3      	ldrb	r3, [r4, #3]
 801d0a0:	0400      	lsls	r0, r0, #16
 801d0a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801d0a6:	79a3      	ldrb	r3, [r4, #6]
 801d0a8:	4318      	orrs	r0, r3
 801d0aa:	7963      	ldrb	r3, [r4, #5]
 801d0ac:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801d0b0:	4b23      	ldr	r3, [pc, #140]	; (801d140 <usb_receive_processing+0x38c>)
 801d0b2:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801d0b4:	f7ee fdbf 	bl	800bc36 <flash_data_read_buff>
 801d0b8:	4b22      	ldr	r3, [pc, #136]	; (801d144 <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d0ba:	4a23      	ldr	r2, [pc, #140]	; (801d148 <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801d0bc:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d0c0:	cb03      	ldmia	r3!, {r0, r1}
 801d0c2:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801d0c4:	4921      	ldr	r1, [pc, #132]	; (801d14c <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d0c6:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801d0c8:	231c      	movs	r3, #28
 801d0ca:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801d0cc:	79d3      	ldrb	r3, [r2, #7]
 801d0ce:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801d0d0:	7993      	ldrb	r3, [r2, #6]
 801d0d2:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801d0d4:	7953      	ldrb	r3, [r2, #5]
 801d0d6:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801d0d8:	7913      	ldrb	r3, [r2, #4]
 801d0da:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801d0dc:	78d3      	ldrb	r3, [r2, #3]
 801d0de:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801d0e0:	7893      	ldrb	r3, [r2, #2]
 801d0e2:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801d0e4:	7853      	ldrb	r3, [r2, #1]
 801d0e6:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d0e8:	4819      	ldr	r0, [pc, #100]	; (801d150 <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801d0ea:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801d0ec:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d0f0:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801d0f2:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801d0f6:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d0f8:	f7ea fefc 	bl	8007ef4 <USBD_CUSTOM_HID_SendReport>
 801d0fc:	e75e      	b.n	801cfbc <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801d0fe:	4a15      	ldr	r2, [pc, #84]	; (801d154 <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801d100:	4b12      	ldr	r3, [pc, #72]	; (801d14c <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801d102:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801d104:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801d108:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801d10c:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801d10e:	b95a      	cbnz	r2, 801d128 <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801d110:	2201      	movs	r2, #1
 801d112:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d114:	2240      	movs	r2, #64	; 0x40
 801d116:	490d      	ldr	r1, [pc, #52]	; (801d14c <usb_receive_processing+0x398>)
 801d118:	480d      	ldr	r0, [pc, #52]	; (801d150 <usb_receive_processing+0x39c>)
 801d11a:	f7ea feeb 	bl	8007ef4 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d11e:	2300      	movs	r3, #0
 801d120:	6033      	str	r3, [r6, #0]
 801d122:	6073      	str	r3, [r6, #4]
 801d124:	60b3      	str	r3, [r6, #8]
 801d126:	e791      	b.n	801d04c <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801d128:	70dd      	strb	r5, [r3, #3]
 801d12a:	e7f3      	b.n	801d114 <usb_receive_processing+0x360>
						send_usb_block = 1;
 801d12c:	4e0a      	ldr	r6, [pc, #40]	; (801d158 <usb_receive_processing+0x3a4>)
 801d12e:	2301      	movs	r3, #1
 801d130:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801d132:	f7ff fd11 	bl	801cb58 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d136:	6025      	str	r5, [r4, #0]
 801d138:	6065      	str	r5, [r4, #4]
 801d13a:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801d13c:	7035      	strb	r5, [r6, #0]
					break;
 801d13e:	e661      	b.n	801ce04 <usb_receive_processing+0x50>
 801d140:	20095a8c 	.word	0x20095a8c
 801d144:	20095830 	.word	0x20095830
 801d148:	200905a7 	.word	0x200905a7
 801d14c:	2008f54c 	.word	0x2008f54c
 801d150:	20095ca8 	.word	0x20095ca8
 801d154:	200956c2 	.word	0x200956c2
 801d158:	200905b9 	.word	0x200905b9

0801d15c <auto_exposure>:
{ 
 801d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d15e:	4d45      	ldr	r5, [pc, #276]	; (801d274 <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801d160:	4c45      	ldr	r4, [pc, #276]	; (801d278 <auto_exposure+0x11c>)
 801d162:	882b      	ldrh	r3, [r5, #0]
{ 
 801d164:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801d166:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801d16a:	18a0      	adds	r0, r4, r2
 801d16c:	3202      	adds	r2, #2
 801d16e:	8940      	ldrh	r0, [r0, #10]
 801d170:	4283      	cmp	r3, r0
 801d172:	bf38      	it	cc
 801d174:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801d176:	428a      	cmp	r2, r1
 801d178:	d1f7      	bne.n	801d16a <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801d17a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801d17e:	4293      	cmp	r3, r2
 801d180:	802b      	strh	r3, [r5, #0]
 801d182:	4c3e      	ldr	r4, [pc, #248]	; (801d27c <auto_exposure+0x120>)
 801d184:	d840      	bhi.n	801d208 <auto_exposure+0xac>
 801d186:	7823      	ldrb	r3, [r4, #0]
 801d188:	2b09      	cmp	r3, #9
 801d18a:	d027      	beq.n	801d1dc <auto_exposure+0x80>
		highSignal = 0;
 801d18c:	4a3c      	ldr	r2, [pc, #240]	; (801d280 <auto_exposure+0x124>)
		send_usb_block =1;
 801d18e:	4f3d      	ldr	r7, [pc, #244]	; (801d284 <auto_exposure+0x128>)
		highSignal = 0;
 801d190:	2300      	movs	r3, #0
 801d192:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801d194:	4a3c      	ldr	r2, [pc, #240]	; (801d288 <auto_exposure+0x12c>)
 801d196:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801d198:	2301      	movs	r3, #1
 801d19a:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801d19c:	7823      	ldrb	r3, [r4, #0]
 801d19e:	3301      	adds	r3, #1
		exp_num--;
 801d1a0:	b2db      	uxtb	r3, r3
 801d1a2:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801d1a4:	7822      	ldrb	r2, [r4, #0]
 801d1a6:	4b39      	ldr	r3, [pc, #228]	; (801d28c <auto_exposure+0x130>)
 801d1a8:	4e39      	ldr	r6, [pc, #228]	; (801d290 <auto_exposure+0x134>)
 801d1aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d1ae:	4b39      	ldr	r3, [pc, #228]	; (801d294 <auto_exposure+0x138>)
 801d1b0:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801d1b2:	f7ff fa25 	bl	801c600 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801d1b6:	7820      	ldrb	r0, [r4, #0]
 801d1b8:	f7f1 fcdc 	bl	800eb74 <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801d1bc:	4b36      	ldr	r3, [pc, #216]	; (801d298 <auto_exposure+0x13c>)
 801d1be:	781a      	ldrb	r2, [r3, #0]
 801d1c0:	4b36      	ldr	r3, [pc, #216]	; (801d29c <auto_exposure+0x140>)
 801d1c2:	2a00      	cmp	r2, #0
 801d1c4:	d132      	bne.n	801d22c <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801d1c6:	4a36      	ldr	r2, [pc, #216]	; (801d2a0 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801d1c8:	ed93 0a00 	vldr	s0, [r3]
 801d1cc:	edd2 0a00 	vldr	s1, [r2]
 801d1d0:	f7fc f98a 	bl	80194e8 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801d1d4:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801d1d6:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 801d1da:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 801d1dc:	4b31      	ldr	r3, [pc, #196]	; (801d2a4 <auto_exposure+0x148>)
 801d1de:	7822      	ldrb	r2, [r4, #0]
 801d1e0:	7819      	ldrb	r1, [r3, #0]
 801d1e2:	4291      	cmp	r1, r2
 801d1e4:	4a30      	ldr	r2, [pc, #192]	; (801d2a8 <auto_exposure+0x14c>)
 801d1e6:	bf14      	ite	ne
 801d1e8:	2101      	movne	r1, #1
 801d1ea:	2100      	moveq	r1, #0
 801d1ec:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 801d1ee:	7822      	ldrb	r2, [r4, #0]
 801d1f0:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 801d1f2:	7823      	ldrb	r3, [r4, #0]
 801d1f4:	b9e3      	cbnz	r3, 801d230 <auto_exposure+0xd4>
 801d1f6:	882a      	ldrh	r2, [r5, #0]
 801d1f8:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801d1fc:	429a      	cmp	r2, r3
 801d1fe:	d917      	bls.n	801d230 <auto_exposure+0xd4>
		highSignal = 1;
 801d200:	2201      	movs	r2, #1
			highSignal = 0;
 801d202:	4b1f      	ldr	r3, [pc, #124]	; (801d280 <auto_exposure+0x124>)
			lowSignal = 0;
 801d204:	701a      	strb	r2, [r3, #0]
 801d206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 801d208:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 801d20c:	4293      	cmp	r3, r2
 801d20e:	d9e5      	bls.n	801d1dc <auto_exposure+0x80>
 801d210:	7823      	ldrb	r3, [r4, #0]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d0e2      	beq.n	801d1dc <auto_exposure+0x80>
		highSignal = 0;
 801d216:	4a1a      	ldr	r2, [pc, #104]	; (801d280 <auto_exposure+0x124>)
		send_usb_block =1;
 801d218:	4f1a      	ldr	r7, [pc, #104]	; (801d284 <auto_exposure+0x128>)
		highSignal = 0;
 801d21a:	2300      	movs	r3, #0
 801d21c:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801d21e:	4a1a      	ldr	r2, [pc, #104]	; (801d288 <auto_exposure+0x12c>)
 801d220:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801d222:	2301      	movs	r3, #1
 801d224:	703b      	strb	r3, [r7, #0]
		exp_num--;
 801d226:	7823      	ldrb	r3, [r4, #0]
 801d228:	3b01      	subs	r3, #1
 801d22a:	e7b9      	b.n	801d1a0 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801d22c:	4a1f      	ldr	r2, [pc, #124]	; (801d2ac <auto_exposure+0x150>)
 801d22e:	e7cb      	b.n	801d1c8 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 801d230:	7823      	ldrb	r3, [r4, #0]
 801d232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801d236:	b923      	cbnz	r3, 801d242 <auto_exposure+0xe6>
 801d238:	8829      	ldrh	r1, [r5, #0]
 801d23a:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801d23e:	4299      	cmp	r1, r3
 801d240:	d9df      	bls.n	801d202 <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 801d242:	7823      	ldrb	r3, [r4, #0]
 801d244:	2b09      	cmp	r3, #9
 801d246:	d109      	bne.n	801d25c <auto_exposure+0x100>
 801d248:	4b19      	ldr	r3, [pc, #100]	; (801d2b0 <auto_exposure+0x154>)
 801d24a:	882a      	ldrh	r2, [r5, #0]
 801d24c:	881b      	ldrh	r3, [r3, #0]
 801d24e:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 801d252:	4293      	cmp	r3, r2
 801d254:	db02      	blt.n	801d25c <auto_exposure+0x100>
			lowSignal = 1;
 801d256:	2201      	movs	r2, #1
			lowSignal = 0;
 801d258:	4b0b      	ldr	r3, [pc, #44]	; (801d288 <auto_exposure+0x12c>)
 801d25a:	e7d3      	b.n	801d204 <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 801d25c:	7823      	ldrb	r3, [r4, #0]
 801d25e:	2b09      	cmp	r3, #9
 801d260:	d1d1      	bne.n	801d206 <auto_exposure+0xaa>
 801d262:	4b13      	ldr	r3, [pc, #76]	; (801d2b0 <auto_exposure+0x154>)
 801d264:	882a      	ldrh	r2, [r5, #0]
 801d266:	881b      	ldrh	r3, [r3, #0]
 801d268:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801d26c:	429a      	cmp	r2, r3
 801d26e:	ddca      	ble.n	801d206 <auto_exposure+0xaa>
			lowSignal = 0;
 801d270:	2200      	movs	r2, #0
 801d272:	e7f1      	b.n	801d258 <auto_exposure+0xfc>
 801d274:	200905b4 	.word	0x200905b4
 801d278:	2000e52c 	.word	0x2000e52c
 801d27c:	200905a6 	.word	0x200905a6
 801d280:	200905af 	.word	0x200905af
 801d284:	200905b9 	.word	0x200905b9
 801d288:	200905b2 	.word	0x200905b2
 801d28c:	080312f8 	.word	0x080312f8
 801d290:	20009d24 	.word	0x20009d24
 801d294:	20095c14 	.word	0x20095c14
 801d298:	20000ebc 	.word	0x20000ebc
 801d29c:	20009d1c 	.word	0x20009d1c
 801d2a0:	20009d18 	.word	0x20009d18
 801d2a4:	200905b6 	.word	0x200905b6
 801d2a8:	20000ec0 	.word	0x20000ec0
 801d2ac:	20009d14 	.word	0x20009d14
 801d2b0:	20009d12 	.word	0x20009d12

0801d2b4 <TIM2_IRQHandler>:
{
 801d2b4:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801d2b6:	4d0d      	ldr	r5, [pc, #52]	; (801d2ec <TIM2_IRQHandler+0x38>)
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	2110      	movs	r1, #16
 801d2bc:	4628      	mov	r0, r5
 801d2be:	f7e5 f991 	bl	80025e4 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801d2c2:	200a      	movs	r0, #10
 801d2c4:	f7ff f9e4 	bl	801c690 <DWT_Delay>
	i = 0;
 801d2c8:	4b09      	ldr	r3, [pc, #36]	; (801d2f0 <TIM2_IRQHandler+0x3c>)
 801d2ca:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801d2cc:	4628      	mov	r0, r5
 801d2ce:	2201      	movs	r2, #1
 801d2d0:	2110      	movs	r1, #16
	i = 0;
 801d2d2:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801d2d4:	f7e5 f986 	bl	80025e4 <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801d2d8:	4b06      	ldr	r3, [pc, #24]	; (801d2f4 <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801d2da:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801d2dc:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801d2de:	f7e4 fbc3 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801d2e2:	4805      	ldr	r0, [pc, #20]	; (801d2f8 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801d2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801d2e8:	f7e8 bcc9 	b.w	8005c7e <HAL_TIM_IRQHandler>
 801d2ec:	48000800 	.word	0x48000800
 801d2f0:	200905b0 	.word	0x200905b0
 801d2f4:	2008f504 	.word	0x2008f504
 801d2f8:	20095c14 	.word	0x20095c14

0801d2fc <TIM6_DAC_IRQHandler>:
{
 801d2fc:	b508      	push	{r3, lr}
	pause_button = 0;
 801d2fe:	4b06      	ldr	r3, [pc, #24]	; (801d318 <TIM6_DAC_IRQHandler+0x1c>)
 801d300:	2200      	movs	r2, #0
 801d302:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801d304:	f7ff fb10 	bl	801c928 <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801d308:	2036      	movs	r0, #54	; 0x36
 801d30a:	f7e4 fbad 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801d30e:	4803      	ldr	r0, [pc, #12]	; (801d31c <TIM6_DAC_IRQHandler+0x20>)
}
 801d310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801d314:	f7e8 bcb3 	b.w	8005c7e <HAL_TIM_IRQHandler>
 801d318:	200905b7 	.word	0x200905b7
 801d31c:	20095a94 	.word	0x20095a94

0801d320 <TIM7_IRQHandler>:
{
 801d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801d322:	4b48      	ldr	r3, [pc, #288]	; (801d444 <TIM7_IRQHandler+0x124>)
 801d324:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801d326:	3b01      	subs	r3, #1
 801d328:	2b04      	cmp	r3, #4
 801d32a:	d81e      	bhi.n	801d36a <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801d32c:	4b46      	ldr	r3, [pc, #280]	; (801d448 <TIM7_IRQHandler+0x128>)
 801d32e:	781b      	ldrb	r3, [r3, #0]
 801d330:	b9db      	cbnz	r3, 801d36a <TIM7_IRQHandler+0x4a>
 801d332:	4b46      	ldr	r3, [pc, #280]	; (801d44c <TIM7_IRQHandler+0x12c>)
 801d334:	781b      	ldrb	r3, [r3, #0]
 801d336:	b9c3      	cbnz	r3, 801d36a <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801d338:	4a45      	ldr	r2, [pc, #276]	; (801d450 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801d33a:	4946      	ldr	r1, [pc, #280]	; (801d454 <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801d33c:	8813      	ldrh	r3, [r2, #0]
 801d33e:	3301      	adds	r3, #1
 801d340:	b29b      	uxth	r3, r3
 801d342:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801d344:	780a      	ldrb	r2, [r1, #0]
 801d346:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801d348:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801d34a:	d96b      	bls.n	801d424 <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801d34c:	4842      	ldr	r0, [pc, #264]	; (801d458 <TIM7_IRQHandler+0x138>)
 801d34e:	f241 7670 	movw	r6, #6000	; 0x1770
 801d352:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801d356:	fbb2 f2f6 	udiv	r2, r2, r6
 801d35a:	4293      	cmp	r3, r2
 801d35c:	d12b      	bne.n	801d3b6 <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801d35e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801d45c <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801d362:	210d      	movs	r1, #13
 801d364:	2055      	movs	r0, #85	; 0x55
 801d366:	f7f5 fdd3 	bl	8012f10 <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801d36a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801d36e:	483c      	ldr	r0, [pc, #240]	; (801d460 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801d370:	4c3c      	ldr	r4, [pc, #240]	; (801d464 <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801d372:	4d3d      	ldr	r5, [pc, #244]	; (801d468 <TIM7_IRQHandler+0x148>)
 801d374:	f7e5 f930 	bl	80025d8 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801d378:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801d37a:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801d37c:	4283      	cmp	r3, r0
 801d37e:	d012      	beq.n	801d3a6 <TIM7_IRQHandler+0x86>
 801d380:	4b3a      	ldr	r3, [pc, #232]	; (801d46c <TIM7_IRQHandler+0x14c>)
 801d382:	781b      	ldrb	r3, [r3, #0]
 801d384:	b97b      	cbnz	r3, 801d3a6 <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801d386:	fab0 f280 	clz	r2, r0
 801d38a:	0952      	lsrs	r2, r2, #5
 801d38c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d390:	2037      	movs	r0, #55	; 0x37
 801d392:	f7f5 f837 	bl	8012404 <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801d396:	782b      	ldrb	r3, [r5, #0]
 801d398:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d14b      	bne.n	801d436 <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801d39e:	f7ff f91d 	bl	801c5dc <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801d3a2:	f7fe fae9 	bl	801b978 <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801d3a6:	2037      	movs	r0, #55	; 0x37
 801d3a8:	f7e4 fb5e 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801d3ac:	4830      	ldr	r0, [pc, #192]	; (801d470 <TIM7_IRQHandler+0x150>)
}
 801d3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801d3b2:	f7e8 bc64 	b.w	8005c7e <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801d3b6:	780a      	ldrb	r2, [r1, #0]
 801d3b8:	270c      	movs	r7, #12
 801d3ba:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801d3be:	fbb5 f5f7 	udiv	r5, r5, r7
 801d3c2:	22fa      	movs	r2, #250	; 0xfa
 801d3c4:	fb95 f5f2 	sdiv	r5, r5, r2
 801d3c8:	42ab      	cmp	r3, r5
 801d3ca:	d102      	bne.n	801d3d2 <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801d3cc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801d474 <TIM7_IRQHandler+0x154>
 801d3d0:	e7c7      	b.n	801d362 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801d3d2:	780a      	ldrb	r2, [r1, #0]
 801d3d4:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801d3d8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801d3dc:	fbb2 f2f7 	udiv	r2, r2, r7
 801d3e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3e4:	fb92 f2f4 	sdiv	r2, r2, r4
 801d3e8:	4293      	cmp	r3, r2
 801d3ea:	d102      	bne.n	801d3f2 <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801d3ec:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801d478 <TIM7_IRQHandler+0x158>
 801d3f0:	e7b7      	b.n	801d362 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801d3f2:	780a      	ldrb	r2, [r1, #0]
 801d3f4:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801d3f8:	fbb4 f4f7 	udiv	r4, r4, r7
 801d3fc:	227d      	movs	r2, #125	; 0x7d
 801d3fe:	fb94 f4f2 	sdiv	r4, r4, r2
 801d402:	42a3      	cmp	r3, r4
 801d404:	d102      	bne.n	801d40c <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801d406:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801d47c <TIM7_IRQHandler+0x15c>
 801d40a:	e7aa      	b.n	801d362 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801d40c:	780a      	ldrb	r2, [r1, #0]
 801d40e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801d412:	fbb2 f2f6 	udiv	r2, r2, r6
 801d416:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d41a:	4293      	cmp	r3, r2
 801d41c:	d1a5      	bne.n	801d36a <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801d41e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d422:	e79e      	b.n	801d362 <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801d424:	2a02      	cmp	r2, #2
 801d426:	d9fa      	bls.n	801d41e <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801d428:	2b01      	cmp	r3, #1
 801d42a:	d102      	bne.n	801d432 <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801d42c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801d430:	e797      	b.n	801d362 <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801d432:	2b02      	cmp	r3, #2
 801d434:	e7f2      	b.n	801d41c <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801d436:	4812      	ldr	r0, [pc, #72]	; (801d480 <TIM7_IRQHandler+0x160>)
 801d438:	f7ec fab4 	bl	80099a4 <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801d43c:	4811      	ldr	r0, [pc, #68]	; (801d484 <TIM7_IRQHandler+0x164>)
 801d43e:	f7e7 fc1f 	bl	8004c80 <HAL_SD_DeInit>
 801d442:	e7b0      	b.n	801d3a6 <TIM7_IRQHandler+0x86>
 801d444:	200056f1 	.word	0x200056f1
 801d448:	20005718 	.word	0x20005718
 801d44c:	20009ce5 	.word	0x20009ce5
 801d450:	2008f504 	.word	0x2008f504
 801d454:	200905a6 	.word	0x200905a6
 801d458:	080312f8 	.word	0x080312f8
 801d45c:	3e4ccccd 	.word	0x3e4ccccd
 801d460:	48000800 	.word	0x48000800
 801d464:	20000ec2 	.word	0x20000ec2
 801d468:	20095c10 	.word	0x20095c10
 801d46c:	200956c2 	.word	0x200956c2
 801d470:	20095c60 	.word	0x20095c60
 801d474:	3ecccccd 	.word	0x3ecccccd
 801d478:	3f19999a 	.word	0x3f19999a
 801d47c:	3f4ccccd 	.word	0x3f4ccccd
 801d480:	20093635 	.word	0x20093635
 801d484:	20095840 	.word	0x20095840

0801d488 <EXTI9_5_IRQHandler>:
{
 801d488:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801d48a:	4c22      	ldr	r4, [pc, #136]	; (801d514 <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801d48c:	2001      	movs	r0, #1
 801d48e:	f7ff f8ff 	bl	801c690 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801d492:	2300      	movs	r3, #0
 801d494:	4622      	mov	r2, r4
 801d496:	4621      	mov	r1, r4
 801d498:	9300      	str	r3, [sp, #0]
 801d49a:	481f      	ldr	r0, [pc, #124]	; (801d518 <EXTI9_5_IRQHandler+0x90>)
 801d49c:	2302      	movs	r3, #2
 801d49e:	f7e8 f97e 	bl	800579e <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801d4a2:	7823      	ldrb	r3, [r4, #0]
 801d4a4:	7862      	ldrb	r2, [r4, #1]
 801d4a6:	4c1d      	ldr	r4, [pc, #116]	; (801d51c <EXTI9_5_IRQHandler+0x94>)
 801d4a8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801d4ac:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801d4ae:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801d4b2:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801d4b4:	b289      	uxth	r1, r1
 801d4b6:	4b1a      	ldr	r3, [pc, #104]	; (801d520 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801d4b8:	dd05      	ble.n	801d4c6 <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801d4ba:	8822      	ldrh	r2, [r4, #0]
 801d4bc:	b292      	uxth	r2, r2
 801d4be:	3a01      	subs	r2, #1
 801d4c0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d4c4:	e002      	b.n	801d4cc <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801d4c6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801d4ca:	dbf6      	blt.n	801d4ba <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801d4cc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801d4d0:	8823      	ldrh	r3, [r4, #0]
 801d4d2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801d4d6:	b29b      	uxth	r3, r3
 801d4d8:	4293      	cmp	r3, r2
 801d4da:	d916      	bls.n	801d50a <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801d4dc:	4b11      	ldr	r3, [pc, #68]	; (801d524 <EXTI9_5_IRQHandler+0x9c>)
 801d4de:	781b      	ldrb	r3, [r3, #0]
 801d4e0:	b943      	cbnz	r3, 801d4f4 <EXTI9_5_IRQHandler+0x6c>
 801d4e2:	4b11      	ldr	r3, [pc, #68]	; (801d528 <EXTI9_5_IRQHandler+0xa0>)
 801d4e4:	781b      	ldrb	r3, [r3, #0]
 801d4e6:	b92b      	cbnz	r3, 801d4f4 <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801d4e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d4ec:	490c      	ldr	r1, [pc, #48]	; (801d520 <EXTI9_5_IRQHandler+0x98>)
 801d4ee:	480f      	ldr	r0, [pc, #60]	; (801d52c <EXTI9_5_IRQHandler+0xa4>)
 801d4f0:	f002 f990 	bl	801f814 <memcpy>
			i = 0;
 801d4f4:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801d4f6:	2017      	movs	r0, #23
			i++;
 801d4f8:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801d4fa:	f7e4 fab5 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801d4fe:	2080      	movs	r0, #128	; 0x80
}
 801d500:	b002      	add	sp, #8
 801d502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801d506:	f7e5 b877 	b.w	80025f8 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801d50a:	8823      	ldrh	r3, [r4, #0]
 801d50c:	3301      	adds	r3, #1
 801d50e:	b29b      	uxth	r3, r3
 801d510:	e7f1      	b.n	801d4f6 <EXTI9_5_IRQHandler+0x6e>
 801d512:	bf00      	nop
 801d514:	20095b48 	.word	0x20095b48
 801d518:	20095bac 	.word	0x20095bac
 801d51c:	200905b0 	.word	0x200905b0
 801d520:	2000bd2a 	.word	0x2000bd2a
 801d524:	200905b9 	.word	0x200905b9
 801d528:	20005718 	.word	0x20005718
 801d52c:	2000e52c 	.word	0x2000e52c

0801d530 <EXTI3_IRQHandler>:
{	
 801d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801d532:	4b29      	ldr	r3, [pc, #164]	; (801d5d8 <EXTI3_IRQHandler+0xa8>)
	Touch_x = 0, Touch_y = 0;
 801d534:	4e29      	ldr	r6, [pc, #164]	; (801d5dc <EXTI3_IRQHandler+0xac>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801d536:	681a      	ldr	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801d538:	4c29      	ldr	r4, [pc, #164]	; (801d5e0 <EXTI3_IRQHandler+0xb0>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801d53a:	3201      	adds	r2, #1
 801d53c:	601a      	str	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801d53e:	2200      	movs	r2, #0
 801d540:	8032      	strh	r2, [r6, #0]
 801d542:	8022      	strh	r2, [r4, #0]
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801d544:	4a27      	ldr	r2, [pc, #156]	; (801d5e4 <EXTI3_IRQHandler+0xb4>)
 801d546:	7817      	ldrb	r7, [r2, #0]
 801d548:	461d      	mov	r5, r3
 801d54a:	4611      	mov	r1, r2
 801d54c:	b957      	cbnz	r7, 801d564 <EXTI3_IRQHandler+0x34>
 801d54e:	681b      	ldr	r3, [r3, #0]
 801d550:	2b31      	cmp	r3, #49	; 0x31
 801d552:	d907      	bls.n	801d564 <EXTI3_IRQHandler+0x34>
			TFT_ON_OFF = 0x01;
 801d554:	2301      	movs	r3, #1
 801d556:	7013      	strb	r3, [r2, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d558:	2104      	movs	r1, #4
 801d55a:	4823      	ldr	r0, [pc, #140]	; (801d5e8 <EXTI3_IRQHandler+0xb8>)
}
 801d55c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d560:	f7e8 beb0 	b.w	80062c4 <HAL_TIM_PWM_Start>
		if(TFT_ON_OFF){
 801d564:	780b      	ldrb	r3, [r1, #0]
 801d566:	b36b      	cbz	r3, 801d5c4 <EXTI3_IRQHandler+0x94>
			TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801d568:	4a1d      	ldr	r2, [pc, #116]	; (801d5e0 <EXTI3_IRQHandler+0xb0>)
 801d56a:	491c      	ldr	r1, [pc, #112]	; (801d5dc <EXTI3_IRQHandler+0xac>)
 801d56c:	2070      	movs	r0, #112	; 0x70
 801d56e:	f7fe f981 	bl	801b874 <TS_Get_XY1>
			if((Mode_EL == 0x00) && ((Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) )))
 801d572:	4b1e      	ldr	r3, [pc, #120]	; (801d5ec <EXTI3_IRQHandler+0xbc>)
 801d574:	781a      	ldrb	r2, [r3, #0]
 801d576:	bb0a      	cbnz	r2, 801d5bc <EXTI3_IRQHandler+0x8c>
 801d578:	8833      	ldrh	r3, [r6, #0]
 801d57a:	3b6d      	subs	r3, #109	; 0x6d
 801d57c:	b29b      	uxth	r3, r3
 801d57e:	2b36      	cmp	r3, #54	; 0x36
 801d580:	d81c      	bhi.n	801d5bc <EXTI3_IRQHandler+0x8c>
 801d582:	8823      	ldrh	r3, [r4, #0]
 801d584:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801d588:	b29b      	uxth	r3, r3
 801d58a:	2b36      	cmp	r3, #54	; 0x36
 801d58c:	d816      	bhi.n	801d5bc <EXTI3_IRQHandler+0x8c>
				pause_button++;
 801d58e:	4c18      	ldr	r4, [pc, #96]	; (801d5f0 <EXTI3_IRQHandler+0xc0>)
 801d590:	7823      	ldrb	r3, [r4, #0]
 801d592:	3301      	adds	r3, #1
 801d594:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801d596:	2b03      	cmp	r3, #3
				pause_button++;
 801d598:	7023      	strb	r3, [r4, #0]
				if(pause_button > 3)
 801d59a:	d90f      	bls.n	801d5bc <EXTI3_IRQHandler+0x8c>
					LaserOnOff = !LaserOnOff;
 801d59c:	4915      	ldr	r1, [pc, #84]	; (801d5f4 <EXTI3_IRQHandler+0xc4>)
 801d59e:	780b      	ldrb	r3, [r1, #0]
 801d5a0:	fab3 f383 	clz	r3, r3
 801d5a4:	095b      	lsrs	r3, r3, #5
 801d5a6:	700b      	strb	r3, [r1, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d5a8:	780b      	ldrb	r3, [r1, #0]
 801d5aa:	b19b      	cbz	r3, 801d5d4 <EXTI3_IRQHandler+0xa4>
 801d5ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d5b0:	4811      	ldr	r0, [pc, #68]	; (801d5f8 <EXTI3_IRQHandler+0xc8>)
 801d5b2:	f7e5 f817 	bl	80025e4 <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	602b      	str	r3, [r5, #0]
					pause_button = 0;
 801d5ba:	7023      	strb	r3, [r4, #0]
				GUI_Touch_Processing();
 801d5bc:	f7f3 fa48 	bl	8010a50 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	602b      	str	r3, [r5, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801d5c4:	2009      	movs	r0, #9
 801d5c6:	f7e4 fa4f 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801d5ca:	2008      	movs	r0, #8
}
 801d5cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801d5d0:	f7e5 b812 	b.w	80025f8 <HAL_GPIO_EXTI_IRQHandler>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d5d4:	2201      	movs	r2, #1
 801d5d6:	e7e9      	b.n	801d5ac <EXTI3_IRQHandler+0x7c>
 801d5d8:	2008f508 	.word	0x2008f508
 801d5dc:	20054932 	.word	0x20054932
 801d5e0:	20054934 	.word	0x20054934
 801d5e4:	20000ebe 	.word	0x20000ebe
 801d5e8:	200957ec 	.word	0x200957ec
 801d5ec:	20000ebc 	.word	0x20000ebc
 801d5f0:	200905b7 	.word	0x200905b7
 801d5f4:	2000bd28 	.word	0x2000bd28
 801d5f8:	48000800 	.word	0x48000800

0801d5fc <SystemClock_Config>:
{
 801d5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801d5fe:	2000      	movs	r0, #0
{
 801d600:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801d602:	f7e6 faf5 	bl	8003bf0 <HAL_PWREx_ControlVoltageScaling>
 801d606:	b100      	cbz	r0, 801d60a <SystemClock_Config+0xe>
 801d608:	e7fe      	b.n	801d608 <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801d60a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d60e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801d610:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d612:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801d614:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801d616:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801d61a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801d61c:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801d61e:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d620:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801d622:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801d624:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d626:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801d628:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801d62a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801d62c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801d62e:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801d630:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801d632:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d634:	f7e6 fbd2 	bl	8003ddc <HAL_RCC_OscConfig>
 801d638:	b100      	cbz	r0, 801d63c <SystemClock_Config+0x40>
 801d63a:	e7fe      	b.n	801d63a <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d63c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d63e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801d640:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d642:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801d644:	4639      	mov	r1, r7
 801d646:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d648:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d64a:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801d64c:	f7e6 fe18 	bl	8004280 <HAL_RCC_ClockConfig>
 801d650:	b100      	cbz	r0, 801d654 <SystemClock_Config+0x58>
 801d652:	e7fe      	b.n	801d652 <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801d654:	4b1e      	ldr	r3, [pc, #120]	; (801d6d0 <SystemClock_Config+0xd4>)
 801d656:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801d658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d65c:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801d65e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801d662:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801d664:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801d668:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801d66a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d66e:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801d670:	2309      	movs	r3, #9
 801d672:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801d674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801d678:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801d67a:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801d67c:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801d67e:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801d680:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801d682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801d686:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801d688:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801d68a:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801d68c:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801d68e:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801d690:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801d692:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801d694:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801d696:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801d698:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801d69a:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801d69c:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801d69e:	f7e7 f823 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 801d6a2:	4604      	mov	r4, r0
 801d6a4:	b100      	cbz	r0, 801d6a8 <SystemClock_Config+0xac>
 801d6a6:	e7fe      	b.n	801d6a6 <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801d6a8:	f7e6 fee4 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 801d6ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d6b0:	fbb0 f0f3 	udiv	r0, r0, r3
 801d6b4:	f7e4 f9c2 	bl	8001a3c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801d6b8:	2004      	movs	r0, #4
 801d6ba:	f7e4 f9e3 	bl	8001a84 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801d6be:	4622      	mov	r2, r4
 801d6c0:	4621      	mov	r1, r4
 801d6c2:	f04f 30ff 	mov.w	r0, #4294967295
 801d6c6:	f7e4 f96b 	bl	80019a0 <HAL_NVIC_SetPriority>
}
 801d6ca:	b03f      	add	sp, #252	; 0xfc
 801d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ce:	bf00      	nop
 801d6d0:	00486060 	.word	0x00486060
 801d6d4:	00000000 	.word	0x00000000

0801d6d8 <main>:
{
 801d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6dc:	ed2d 8b02 	vpush	{d8}
 801d6e0:	b0a7      	sub	sp, #156	; 0x9c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801d6e2:	4db2      	ldr	r5, [pc, #712]	; (801d9ac <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d6e4:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801d9c8 <main+0x2f0>
  HAL_Init();
 801d6e8:	f7e3 fc82 	bl	8000ff0 <HAL_Init>
	HAL_Delay(1);
 801d6ec:	2001      	movs	r0, #1
 801d6ee:	f7e3 fc9d 	bl	800102c <HAL_Delay>
  SystemClock_Config();
 801d6f2:	f7ff ff83 	bl	801d5fc <SystemClock_Config>
	HAL_Delay(1);
 801d6f6:	2001      	movs	r0, #1
 801d6f8:	f7e3 fc98 	bl	800102c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801d6fc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d6fe:	f043 0310 	orr.w	r3, r3, #16
 801d702:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d704:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d706:	f003 0310 	and.w	r3, r3, #16
 801d70a:	9307      	str	r3, [sp, #28]
 801d70c:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801d70e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d710:	f043 0320 	orr.w	r3, r3, #32
 801d714:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d716:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d718:	f003 0320 	and.w	r3, r3, #32
 801d71c:	9308      	str	r3, [sp, #32]
 801d71e:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d720:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d726:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d728:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d72e:	9309      	str	r3, [sp, #36]	; 0x24
 801d730:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d732:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d734:	f043 0301 	orr.w	r3, r3, #1
 801d738:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d73a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d73c:	f003 0301 	and.w	r3, r3, #1
 801d740:	930a      	str	r3, [sp, #40]	; 0x28
 801d742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d744:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d746:	f043 0304 	orr.w	r3, r3, #4
 801d74a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d74c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d74e:	f003 0304 	and.w	r3, r3, #4
 801d752:	930b      	str	r3, [sp, #44]	; 0x2c
 801d754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d756:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d758:	f043 0302 	orr.w	r3, r3, #2
 801d75c:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d75e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d760:	f003 0302 	and.w	r3, r3, #2
 801d764:	930c      	str	r3, [sp, #48]	; 0x30
 801d766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801d768:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d76a:	f043 0308 	orr.w	r3, r3, #8
 801d76e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d770:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d772:	f003 0308 	and.w	r3, r3, #8
 801d776:	930d      	str	r3, [sp, #52]	; 0x34
 801d778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801d77a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d77c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d780:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d782:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d788:	930e      	str	r3, [sp, #56]	; 0x38
 801d78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  HAL_PWREx_EnableVddIO2();
 801d78c:	f7e6 fa92 	bl	8003cb4 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801d790:	2200      	movs	r2, #0
 801d792:	f242 0110 	movw	r1, #8208	; 0x2010
 801d796:	4886      	ldr	r0, [pc, #536]	; (801d9b0 <main+0x2d8>)
 801d798:	f7e4 ff24 	bl	80025e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d79c:	2200      	movs	r2, #0
 801d79e:	2120      	movs	r1, #32
 801d7a0:	4884      	ldr	r0, [pc, #528]	; (801d9b4 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7a2:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d7a4:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d7a6:	f7e4 ff1d 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d7aa:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d7ac:	a919      	add	r1, sp, #100	; 0x64
 801d7ae:	4881      	ldr	r0, [pc, #516]	; (801d9b4 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d7b0:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d7b2:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7b4:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d7b6:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d7b8:	f7e4 fd9e 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 801d7bc:	4622      	mov	r2, r4
 801d7be:	4639      	mov	r1, r7
 801d7c0:	487c      	ldr	r0, [pc, #496]	; (801d9b4 <main+0x2dc>)
 801d7c2:	f7e4 ff0f 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801d7c6:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d7ca:	a919      	add	r1, sp, #100	; 0x64
 801d7cc:	4878      	ldr	r0, [pc, #480]	; (801d9b0 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801d7ce:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d7d0:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7d2:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d7d4:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d7d6:	f7e4 fd8f 	bl	80022f8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801d7da:	4632      	mov	r2, r6
 801d7dc:	2110      	movs	r1, #16
 801d7de:	4874      	ldr	r0, [pc, #464]	; (801d9b0 <main+0x2d8>)
 801d7e0:	f7e4 ff00 	bl	80025e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801d7e4:	4622      	mov	r2, r4
 801d7e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d7ea:	4871      	ldr	r0, [pc, #452]	; (801d9b0 <main+0x2d8>)
 801d7ec:	f7e4 fefa 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801d7f0:	2380      	movs	r3, #128	; 0x80
 801d7f2:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d7f4:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d7f6:	4b70      	ldr	r3, [pc, #448]	; (801d9b8 <main+0x2e0>)
 801d7f8:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d7fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7fe:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d800:	f7e4 fd7a 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801d804:	4622      	mov	r2, r4
 801d806:	2104      	movs	r1, #4
 801d808:	486a      	ldr	r0, [pc, #424]	; (801d9b4 <main+0x2dc>)
 801d80a:	f7e4 feeb 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d80e:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d812:	a919      	add	r1, sp, #100	; 0x64
 801d814:	4867      	ldr	r0, [pc, #412]	; (801d9b4 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d816:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d81a:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d81c:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d81e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d820:	f7e4 fd6a 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801d824:	4632      	mov	r2, r6
 801d826:	4651      	mov	r1, sl
 801d828:	4862      	ldr	r0, [pc, #392]	; (801d9b4 <main+0x2dc>)
 801d82a:	f7e4 fedb 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801d82e:	4622      	mov	r2, r4
 801d830:	2102      	movs	r1, #2
 801d832:	4860      	ldr	r0, [pc, #384]	; (801d9b4 <main+0x2dc>)
 801d834:	f7e4 fed6 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d838:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d83a:	a919      	add	r1, sp, #100	; 0x64
 801d83c:	485d      	ldr	r0, [pc, #372]	; (801d9b4 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d83e:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d840:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d842:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d844:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d846:	f7e4 fd57 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801d84a:	4632      	mov	r2, r6
 801d84c:	4639      	mov	r1, r7
 801d84e:	4859      	ldr	r0, [pc, #356]	; (801d9b4 <main+0x2dc>)
 801d850:	f7e4 fec8 	bl	80025e4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801d854:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d858:	a919      	add	r1, sp, #100	; 0x64
 801d85a:	4856      	ldr	r0, [pc, #344]	; (801d9b4 <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801d85c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d860:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d862:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d864:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d866:	f7e4 fd47 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801d86a:	4632      	mov	r2, r6
 801d86c:	4641      	mov	r1, r8
 801d86e:	4851      	ldr	r0, [pc, #324]	; (801d9b4 <main+0x2dc>)
 801d870:	f7e4 feb8 	bl	80025e4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801d874:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d878:	a919      	add	r1, sp, #100	; 0x64
 801d87a:	484e      	ldr	r0, [pc, #312]	; (801d9b4 <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d87c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801d880:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d884:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d886:	f7e4 fd37 	bl	80022f8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801d88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d88e:	a919      	add	r1, sp, #100	; 0x64
 801d890:	4847      	ldr	r0, [pc, #284]	; (801d9b0 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801d892:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d894:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d898:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d89a:	f7e4 fd2d 	bl	80022f8 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 801d89e:	463a      	mov	r2, r7
 801d8a0:	4621      	mov	r1, r4
 801d8a2:	2017      	movs	r0, #23
 801d8a4:	f7e4 f87c 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 801d8a8:	4622      	mov	r2, r4
 801d8aa:	4639      	mov	r1, r7
 801d8ac:	2009      	movs	r0, #9
 801d8ae:	f7e4 f877 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801d8b2:	2017      	movs	r0, #23
 801d8b4:	f7e4 f8a8 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801d8b8:	2009      	movs	r0, #9
 801d8ba:	f7e4 f8a5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801d8be:	4630      	mov	r0, r6
 801d8c0:	f7e3 fbb4 	bl	800102c <HAL_Delay>
	DWT_Init();
 801d8c4:	f7fe fed0 	bl	801c668 <DWT_Init>
	HAL_Delay(1);
 801d8c8:	4630      	mov	r0, r6
 801d8ca:	f7e3 fbaf 	bl	800102c <HAL_Delay>
	MX_TIM2_Init();
 801d8ce:	f7fe fe97 	bl	801c600 <MX_TIM2_Init>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d8d2:	221c      	movs	r2, #28
 801d8d4:	4621      	mov	r1, r4
 801d8d6:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d8d8:	940f      	str	r4, [sp, #60]	; 0x3c
 801d8da:	9410      	str	r4, [sp, #64]	; 0x40
 801d8dc:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d8de:	f001 ffa4 	bl	801f82a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801d8e2:	222c      	movs	r2, #44	; 0x2c
 801d8e4:	4621      	mov	r1, r4
 801d8e6:	a819      	add	r0, sp, #100	; 0x64
 801d8e8:	f001 ff9f 	bl	801f82a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801d8ec:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801d9cc <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 801d8f0:	4b32      	ldr	r3, [pc, #200]	; (801d9bc <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d8f2:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 801d8f6:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 801d8fa:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801d8fe:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 801d900:	2364      	movs	r3, #100	; 0x64
 801d902:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d906:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 801d90a:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d90e:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801d912:	f7e8 faff 	bl	8005f14 <HAL_TIM_PWM_Init>
 801d916:	b100      	cbz	r0, 801d91a <main+0x242>
 801d918:	e7fe      	b.n	801d918 <main+0x240>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d91a:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d91c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801d91e:	a90f      	add	r1, sp, #60	; 0x3c
 801d920:	4648      	mov	r0, r9
 801d922:	f7e8 fd43 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801d926:	b100      	cbz	r0, 801d92a <main+0x252>
 801d928:	e7fe      	b.n	801d928 <main+0x250>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d92a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 801d92c:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d92e:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801d930:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d932:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801d934:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801d936:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801d938:	4652      	mov	r2, sl
 801d93a:	a912      	add	r1, sp, #72	; 0x48
 801d93c:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d93e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801d940:	f7e8 fb80 	bl	8006044 <HAL_TIM_PWM_ConfigChannel>
 801d944:	b100      	cbz	r0, 801d948 <main+0x270>
 801d946:	e7fe      	b.n	801d946 <main+0x26e>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801d948:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801d94a:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801d94c:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 801d94e:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801d950:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801d952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 801d956:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801d958:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801d95a:	a919      	add	r1, sp, #100	; 0x64
 801d95c:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801d95e:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801d960:	f7e8 fd50 	bl	8006404 <HAL_TIMEx_ConfigBreakDeadTime>
 801d964:	4682      	mov	sl, r0
 801d966:	b100      	cbz	r0, 801d96a <main+0x292>
 801d968:	e7fe      	b.n	801d968 <main+0x290>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 801d96a:	4648      	mov	r0, r9
 801d96c:	f001 fb4a 	bl	801f004 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801d970:	4630      	mov	r0, r6
 801d972:	f7e3 fb5b 	bl	800102c <HAL_Delay>
	HAL_Delay(1);
 801d976:	4630      	mov	r0, r6
 801d978:	f7e3 fb58 	bl	800102c <HAL_Delay>
  htim5.Instance = TIM5;
 801d97c:	4c10      	ldr	r4, [pc, #64]	; (801d9c0 <main+0x2e8>)
 801d97e:	4b11      	ldr	r3, [pc, #68]	; (801d9c4 <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d980:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d984:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801d988:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801d98a:	231e      	movs	r3, #30
 801d98c:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d98e:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801d992:	f7e8 faa5 	bl	8005ee0 <HAL_TIM_OC_Init>
 801d996:	b100      	cbz	r0, 801d99a <main+0x2c2>
 801d998:	e7fe      	b.n	801d998 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d99a:	9012      	str	r0, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d99c:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801d99e:	a912      	add	r1, sp, #72	; 0x48
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	f7e8 fd03 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801d9a6:	4602      	mov	r2, r0
 801d9a8:	b190      	cbz	r0, 801d9d0 <main+0x2f8>
 801d9aa:	e7fe      	b.n	801d9aa <main+0x2d2>
 801d9ac:	40021000 	.word	0x40021000
 801d9b0:	48000800 	.word	0x48000800
 801d9b4:	48001400 	.word	0x48001400
 801d9b8:	10210000 	.word	0x10210000
 801d9bc:	40014000 	.word	0x40014000
 801d9c0:	200958d4 	.word	0x200958d4
 801d9c4:	40000c00 	.word	0x40000c00
 801d9c8:	10110000 	.word	0x10110000
 801d9cc:	200957ec 	.word	0x200957ec
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801d9d0:	2330      	movs	r3, #48	; 0x30
 801d9d2:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d9d4:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 5;
 801d9d6:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d9d8:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d9da:	a919      	add	r1, sp, #100	; 0x64
 801d9dc:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801d9de:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d9e0:	f7e8 faf8 	bl	8005fd4 <HAL_TIM_OC_ConfigChannel>
 801d9e4:	4681      	mov	r9, r0
 801d9e6:	b100      	cbz	r0, 801d9ea <main+0x312>
 801d9e8:	e7fe      	b.n	801d9e8 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 801d9ea:	4620      	mov	r0, r4
 801d9ec:	f001 fb0a 	bl	801f004 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801d9f0:	4630      	mov	r0, r6
 801d9f2:	f7e3 fb1b 	bl	800102c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801d9f6:	f001 fc87 	bl	801f308 <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801d9fa:	4630      	mov	r0, r6
 801d9fc:	f7e3 fb16 	bl	800102c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801da00:	4c8c      	ldr	r4, [pc, #560]	; (801dc34 <main+0x55c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801da02:	4b8d      	ldr	r3, [pc, #564]	; (801dc38 <main+0x560>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801da04:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801da08:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 801da0c:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801da10:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801da12:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801da14:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801da18:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801da1a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801da1e:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801da20:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801da24:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801da26:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801da28:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 801da2a:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801da2e:	f7e4 f931 	bl	8001c94 <HAL_DMA2D_Init>
 801da32:	b100      	cbz	r0, 801da36 <main+0x35e>
 801da34:	e7fe      	b.n	801da34 <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801da36:	4631      	mov	r1, r6
 801da38:	4620      	mov	r0, r4
 801da3a:	f7e4 fa11 	bl	8001e60 <HAL_DMA2D_ConfigLayer>
 801da3e:	4681      	mov	r9, r0
 801da40:	b100      	cbz	r0, 801da44 <main+0x36c>
 801da42:	e7fe      	b.n	801da42 <main+0x36a>
	HAL_Delay(1);
 801da44:	4630      	mov	r0, r6
 801da46:	f7e3 faf1 	bl	800102c <HAL_Delay>
  hspi1.Instance = SPI1;
 801da4a:	4c7c      	ldr	r4, [pc, #496]	; (801dc3c <main+0x564>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801da4c:	4b7c      	ldr	r3, [pc, #496]	; (801dc40 <main+0x568>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801da4e:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801da52:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801da56:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801da5a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801da5e:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801da60:	f44f 7300 	mov.w	r3, #512	; 0x200
 801da64:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801da66:	2310      	movs	r3, #16
 801da68:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801da6a:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 801da6c:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801da6e:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801da70:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801da72:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801da76:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801da7a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 801da7e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801da80:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801da84:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801da88:	f7e7 fe38 	bl	80056fc <HAL_SPI_Init>
 801da8c:	b100      	cbz	r0, 801da90 <main+0x3b8>
 801da8e:	e7fe      	b.n	801da8e <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 801da90:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 801da92:	4c6c      	ldr	r4, [pc, #432]	; (801dc44 <main+0x56c>)
	__HAL_SPI_ENABLE(&hspi1);
 801da94:	6813      	ldr	r3, [r2, #0]
 801da96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da9a:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801da9c:	2001      	movs	r0, #1
 801da9e:	f7e3 fac5 	bl	800102c <HAL_Delay>
  hi2c1.Instance = I2C1;
 801daa2:	4b69      	ldr	r3, [pc, #420]	; (801dc48 <main+0x570>)
 801daa4:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 801daa6:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 801daaa:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 801daae:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 801dab2:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 801dab4:	2370      	movs	r3, #112	; 0x70
 801dab6:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801dab8:	2701      	movs	r7, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801daba:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801dabc:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801dabe:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801dac0:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801dac2:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801dac4:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801dac6:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801dac8:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801daca:	f7e4 fedc 	bl	8002886 <HAL_I2C_Init>
 801dace:	4601      	mov	r1, r0
 801dad0:	b100      	cbz	r0, 801dad4 <main+0x3fc>
 801dad2:	e7fe      	b.n	801dad2 <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801dad4:	4620      	mov	r0, r4
 801dad6:	f7e5 fa3f 	bl	8002f58 <HAL_I2CEx_ConfigAnalogFilter>
 801dada:	4601      	mov	r1, r0
 801dadc:	b100      	cbz	r0, 801dae0 <main+0x408>
 801dade:	e7fe      	b.n	801dade <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801dae0:	4620      	mov	r0, r4
 801dae2:	f7e5 fa5f 	bl	8002fa4 <HAL_I2CEx_ConfigDigitalFilter>
 801dae6:	4606      	mov	r6, r0
 801dae8:	b100      	cbz	r0, 801daec <main+0x414>
 801daea:	e7fe      	b.n	801daea <main+0x412>
	HAL_Delay(1);
 801daec:	4638      	mov	r0, r7
 801daee:	f7e3 fa9d 	bl	800102c <HAL_Delay>
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 801daf2:	4c56      	ldr	r4, [pc, #344]	; (801dc4c <main+0x574>)
  huart3.Init.BaudRate = 38400;
 801daf4:	4b56      	ldr	r3, [pc, #344]	; (801dc50 <main+0x578>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801daf6:	60a6      	str	r6, [r4, #8]
  huart3.Init.BaudRate = 38400;
 801daf8:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 801dafc:	e884 4008 	stmia.w	r4, {r3, lr}
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801db00:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 801db02:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 801db04:	60e6      	str	r6, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801db06:	6126      	str	r6, [r4, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801db08:	6163      	str	r3, [r4, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801db0a:	61a6      	str	r6, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801db0c:	61e6      	str	r6, [r4, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801db0e:	6226      	str	r6, [r4, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801db10:	6266      	str	r6, [r4, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801db12:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801db14:	f7e9 f8d2 	bl	8006cbc <HAL_UART_Init>
 801db18:	4601      	mov	r1, r0
 801db1a:	b100      	cbz	r0, 801db1e <main+0x446>
 801db1c:	e7fe      	b.n	801db1c <main+0x444>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801db1e:	4620      	mov	r0, r4
 801db20:	f7e9 f960 	bl	8006de4 <HAL_UARTEx_SetTxFifoThreshold>
 801db24:	4601      	mov	r1, r0
 801db26:	b100      	cbz	r0, 801db2a <main+0x452>
 801db28:	e7fe      	b.n	801db28 <main+0x450>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801db2a:	4620      	mov	r0, r4
 801db2c:	f7e9 f97e 	bl	8006e2c <HAL_UARTEx_SetRxFifoThreshold>
 801db30:	b100      	cbz	r0, 801db34 <main+0x45c>
 801db32:	e7fe      	b.n	801db32 <main+0x45a>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 801db34:	4620      	mov	r0, r4
 801db36:	f7e9 f93a 	bl	8006dae <HAL_UARTEx_DisableFifoMode>
 801db3a:	4606      	mov	r6, r0
 801db3c:	b100      	cbz	r0, 801db40 <main+0x468>
 801db3e:	e7fe      	b.n	801db3e <main+0x466>
	HAL_Delay(1);
 801db40:	4638      	mov	r0, r7
 801db42:	f7e3 fa73 	bl	800102c <HAL_Delay>
  hltdc.Instance = LTDC;
 801db46:	4c43      	ldr	r4, [pc, #268]	; (801dc54 <main+0x57c>)
 801db48:	4b43      	ldr	r3, [pc, #268]	; (801dc58 <main+0x580>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801db4a:	60a6      	str	r6, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801db4c:	e884 0048 	stmia.w	r4, {r3, r6}
  hltdc.Init.HorizontalSync = 5;
 801db50:	2305      	movs	r3, #5
 801db52:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 801db54:	231e      	movs	r3, #30
 801db56:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 801db58:	2328      	movs	r3, #40	; 0x28
 801db5a:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 801db5c:	2308      	movs	r3, #8
 801db5e:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 801db60:	f44f 7302 	mov.w	r3, #520	; 0x208
 801db64:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 801db66:	f44f 738c 	mov.w	r3, #280	; 0x118
 801db6a:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 801db6c:	f240 230d 	movw	r3, #525	; 0x20d
 801db70:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801db72:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 801db74:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801db78:	60e6      	str	r6, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801db7a:	6126      	str	r6, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 801db7c:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801db7e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801db82:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801db86:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801db8a:	f7e5 fab7 	bl	80030fc <HAL_LTDC_Init>
 801db8e:	4602      	mov	r2, r0
 801db90:	b100      	cbz	r0, 801db94 <main+0x4bc>
 801db92:	e7fe      	b.n	801db92 <main+0x4ba>
  pLayerCfg.WindowY1 = 272;
 801db94:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 801db98:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801db9a:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 801db9c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801dba0:	f44f 6680 	mov.w	r6, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 801dba4:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
 801dba6:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801dba8:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801dbaa:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.Alpha = 255;
 801dbac:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.ImageWidth = 480;
 801dbae:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 272;
 801dbb0:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801dbb2:	4620      	mov	r0, r4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801dbb4:	2607      	movs	r6, #7
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801dbb6:	a919      	add	r1, sp, #100	; 0x64
  pLayerCfg.WindowY0 = 0;
 801dbb8:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
 801dbba:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Alpha0 = 0;
 801dbbc:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801dbbe:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.FBStartAdress = 0;
 801dbc0:	9222      	str	r2, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 255;
 801dbc2:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Green = 255;
 801dbc6:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
  pLayerCfg.Backcolor.Red = 255;
 801dbca:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801dbce:	f7e5 fb01 	bl	80031d4 <HAL_LTDC_ConfigLayer>
 801dbd2:	4604      	mov	r4, r0
 801dbd4:	b100      	cbz	r0, 801dbd8 <main+0x500>
 801dbd6:	e7fe      	b.n	801dbd6 <main+0x4fe>
	HAL_Delay(1);
 801dbd8:	4638      	mov	r0, r7
 801dbda:	f7e3 fa27 	bl	800102c <HAL_Delay>
  hadc1.Instance = ADC1;
 801dbde:	481f      	ldr	r0, [pc, #124]	; (801dc5c <main+0x584>)
 801dbe0:	4b1f      	ldr	r3, [pc, #124]	; (801dc60 <main+0x588>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801dbe2:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801dbe4:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 801dbe8:	2310      	movs	r3, #16
 801dbea:	6083      	str	r3, [r0, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801dbec:	2304      	movs	r3, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801dbee:	6104      	str	r4, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801dbf0:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801dbf2:	6184      	str	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801dbf4:	61c7      	str	r7, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 801dbf6:	6207      	str	r7, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801dbf8:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 801dbfa:	6287      	str	r7, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801dbfc:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801dbfe:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801dc00:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801dc02:	6384      	str	r4, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 801dc04:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801dc06:	f7e3 fa47 	bl	8001098 <HAL_ADC_Init>
 801dc0a:	b100      	cbz	r0, 801dc0e <main+0x536>
 801dc0c:	e7fe      	b.n	801dc0c <main+0x534>
  sConfig.Channel = ADC_CHANNEL_3;
 801dc0e:	4b15      	ldr	r3, [pc, #84]	; (801dc64 <main+0x58c>)
 801dc10:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801dc12:	2306      	movs	r3, #6
 801dc14:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801dc16:	227f      	movs	r2, #127	; 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801dc18:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801dc1a:	2604      	movs	r6, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801dc1c:	a919      	add	r1, sp, #100	; 0x64
 801dc1e:	480f      	ldr	r0, [pc, #60]	; (801dc5c <main+0x584>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801dc20:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801dc22:	921c      	str	r2, [sp, #112]	; 0x70
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801dc24:	961d      	str	r6, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 801dc26:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801dc28:	f7e3 fb56 	bl	80012d8 <HAL_ADC_ConfigChannel>
 801dc2c:	4604      	mov	r4, r0
 801dc2e:	b1d8      	cbz	r0, 801dc68 <main+0x590>
 801dc30:	e7fe      	b.n	801dc30 <main+0x558>
 801dc32:	bf00      	nop
 801dc34:	20095b4c 	.word	0x20095b4c
 801dc38:	4002b000 	.word	0x4002b000
 801dc3c:	20095bac 	.word	0x20095bac
 801dc40:	40013000 	.word	0x40013000
 801dc44:	200957a0 	.word	0x200957a0
 801dc48:	40005400 	.word	0x40005400
 801dc4c:	20095718 	.word	0x20095718
 801dc50:	40004800 	.word	0x40004800
 801dc54:	20095938 	.word	0x20095938
 801dc58:	40016800 	.word	0x40016800
 801dc5c:	20095a08 	.word	0x20095a08
 801dc60:	50040000 	.word	0x50040000
 801dc64:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801dc68:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801dc6a:	f043 0304 	orr.w	r3, r3, #4
 801dc6e:	64ab      	str	r3, [r5, #72]	; 0x48
 801dc70:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801dc72:	f003 0304 	and.w	r3, r3, #4
 801dc76:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 801dc7a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801dc7c:	f043 0301 	orr.w	r3, r3, #1
 801dc80:	64ab      	str	r3, [r5, #72]	; 0x48
 801dc82:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 801dc84:	4d2e      	ldr	r5, [pc, #184]	; (801dd40 <main+0x668>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 801dc86:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801dc8a:	4602      	mov	r2, r0
 801dc8c:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 801dc8e:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801dc90:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 801dc92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801dc94:	f7e3 fe84 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801dc98:	200b      	movs	r0, #11
 801dc9a:	f7e3 feb5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801dc9e:	2001      	movs	r0, #1
 801dca0:	f7e3 f9c4 	bl	800102c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 801dca4:	4621      	mov	r1, r4
 801dca6:	4827      	ldr	r0, [pc, #156]	; (801dd44 <main+0x66c>)
 801dca8:	f7e8 fb40 	bl	800632c <HAL_TIM_OC_Start>
	HAL_Delay(1);
 801dcac:	2001      	movs	r0, #1
 801dcae:	f7e3 f9bd 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 801dcb2:	2201      	movs	r2, #1
 801dcb4:	4621      	mov	r1, r4
 801dcb6:	201c      	movs	r0, #28
 801dcb8:	f7e3 fe72 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801dcbc:	2002      	movs	r0, #2
 801dcbe:	f7e3 f9b5 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801dcc2:	201c      	movs	r0, #28
 801dcc4:	f7e3 fea0 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801dcc8:	2001      	movs	r0, #1
 801dcca:	f7e3 f9af 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 801dcce:	481e      	ldr	r0, [pc, #120]	; (801dd48 <main+0x670>)
 801dcd0:	f7e7 ffb8 	bl	8005c44 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 801dcd4:	2001      	movs	r0, #1
 801dcd6:	f7e3 f9a9 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 801dcda:	2203      	movs	r2, #3
 801dcdc:	2101      	movs	r1, #1
 801dcde:	205b      	movs	r0, #91	; 0x5b
 801dce0:	f7e3 fe5e 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801dce4:	2002      	movs	r0, #2
 801dce6:	f7e3 f9a1 	bl	800102c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801dcea:	4631      	mov	r1, r6
 801dcec:	4817      	ldr	r0, [pc, #92]	; (801dd4c <main+0x674>)
 801dcee:	f7e8 fae9 	bl	80062c4 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 801dcf2:	4b17      	ldr	r3, [pc, #92]	; (801dd50 <main+0x678>)
 801dcf4:	2232      	movs	r2, #50	; 0x32
 801dcf6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 801dcf8:	2001      	movs	r0, #1
 801dcfa:	f7e3 f997 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801dcfe:	4815      	ldr	r0, [pc, #84]	; (801dd54 <main+0x67c>)
 801dd00:	2201      	movs	r2, #1
 801dd02:	4631      	mov	r1, r6
 801dd04:	f7e4 fc6e 	bl	80025e4 <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 801dd08:	4813      	ldr	r0, [pc, #76]	; (801dd58 <main+0x680>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801dd0a:	9419      	str	r4, [sp, #100]	; 0x64
  htim6.Init.Prescaler = 48000;
 801dd0c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801dd10:	e885 0009 	stmia.w	r5, {r0, r3}
  htim6.Init.Period = 3800;
 801dd14:	f640 63d8 	movw	r3, #3800	; 0xed8
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801dd18:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801dd1a:	941a      	str	r4, [sp, #104]	; 0x68
 801dd1c:	941b      	str	r4, [sp, #108]	; 0x6c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801dd1e:	60ac      	str	r4, [r5, #8]
  htim6.Init.Period = 3800;
 801dd20:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801dd22:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801dd24:	f7e8 f8c2 	bl	8005eac <HAL_TIM_Base_Init>
 801dd28:	b100      	cbz	r0, 801dd2c <main+0x654>
 801dd2a:	e7fe      	b.n	801dd2a <main+0x652>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801dd2c:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801dd2e:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801dd30:	a919      	add	r1, sp, #100	; 0x64
 801dd32:	4628      	mov	r0, r5
 801dd34:	f7e8 fb3a 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801dd38:	4607      	mov	r7, r0
 801dd3a:	b178      	cbz	r0, 801dd5c <main+0x684>
 801dd3c:	e7fe      	b.n	801dd3c <main+0x664>
 801dd3e:	bf00      	nop
 801dd40:	20095a94 	.word	0x20095a94
 801dd44:	200958d4 	.word	0x200958d4
 801dd48:	20095c14 	.word	0x20095c14
 801dd4c:	200957ec 	.word	0x200957ec
 801dd50:	40014000 	.word	0x40014000
 801dd54:	48001400 	.word	0x48001400
 801dd58:	40001000 	.word	0x40001000
	HAL_Delay(1);
 801dd5c:	2001      	movs	r0, #1
 801dd5e:	f7e3 f965 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801dd62:	2036      	movs	r0, #54	; 0x36
 801dd64:	f7e3 fe50 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801dd68:	2001      	movs	r0, #1
 801dd6a:	f7e3 f95f 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 801dd6e:	4628      	mov	r0, r5
 801dd70:	f7e7 ff68 	bl	8005c44 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);
 801dd74:	4632      	mov	r2, r6
 801dd76:	2101      	movs	r1, #1
 801dd78:	201c      	movs	r0, #28
 801dd7a:	f7e3 fe11 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801dd7e:	2001      	movs	r0, #1
 801dd80:	f7e3 f954 	bl	800102c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801dd84:	463a      	mov	r2, r7
 801dd86:	49d0      	ldr	r1, [pc, #832]	; (801e0c8 <main+0x9f0>)
 801dd88:	48d0      	ldr	r0, [pc, #832]	; (801e0cc <main+0x9f4>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801dd8a:	4cd1      	ldr	r4, [pc, #836]	; (801e0d0 <main+0x9f8>)
 801dd8c:	4dd1      	ldr	r5, [pc, #836]	; (801e0d4 <main+0x9fc>)
 801dd8e:	4ed2      	ldr	r6, [pc, #840]	; (801e0d8 <main+0xa00>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801dd90:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 801e194 <main+0xabc>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801dd94:	f7e5 fa47 	bl	8003226 <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 801dd98:	2001      	movs	r0, #1
 801dd9a:	f7e3 f947 	bl	800102c <HAL_Delay>
	Touch_Ini();
 801dd9e:	f7fd fd60 	bl	801b862 <Touch_Ini>
	MX_SDMMC1_SD_Init();
 801dda2:	f7fe fc1b 	bl	801c5dc <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 801dda6:	f7fd fde7 	bl	801b978 <MX_FATFS_Init>
	GPIO_QSPI_Init();
 801ddaa:	f7fb f953 	bl	8019054 <GPIO_QSPI_Init>
	Single_Mode();	
 801ddae:	f7fb fa4b 	bl	8019248 <Single_Mode>
	HAL_Delay(20);
 801ddb2:	2014      	movs	r0, #20
 801ddb4:	f7e3 f93a 	bl	800102c <HAL_Delay>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801ddb8:	2103      	movs	r1, #3
 801ddba:	48c8      	ldr	r0, [pc, #800]	; (801e0dc <main+0xa04>)
 801ddbc:	f7f0 fe54 	bl	800ea68 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801ddc0:	4bc7      	ldr	r3, [pc, #796]	; (801e0e0 <main+0xa08>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801ddc2:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801ddc4:	28ff      	cmp	r0, #255	; 0xff
 801ddc6:	bf18      	it	ne
 801ddc8:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801ddca:	f04f 0103 	mov.w	r1, #3
 801ddce:	48c5      	ldr	r0, [pc, #788]	; (801e0e4 <main+0xa0c>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801ddd0:	bf08      	it	eq
 801ddd2:	701f      	strbeq	r7, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801ddd4:	f7f0 fe48 	bl	800ea68 <Calibration_Load_1byte>
 801ddd8:	4bc3      	ldr	r3, [pc, #780]	; (801e0e8 <main+0xa10>)
 801ddda:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801dddc:	28ff      	cmp	r0, #255	; 0xff
 801ddde:	bf0c      	ite	eq
 801dde0:	2200      	moveq	r2, #0
 801dde2:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801dde4:	f04f 0103 	mov.w	r1, #3
 801dde8:	48c0      	ldr	r0, [pc, #768]	; (801e0ec <main+0xa14>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801ddea:	bf08      	it	eq
 801ddec:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801ddee:	f7f0 fe3b 	bl	800ea68 <Calibration_Load_1byte>
 801ddf2:	4bbf      	ldr	r3, [pc, #764]	; (801e0f0 <main+0xa18>)
 801ddf4:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801ddf6:	28ff      	cmp	r0, #255	; 0xff
 801ddf8:	bf0a      	itet	eq
 801ddfa:	781a      	ldrbeq	r2, [r3, #0]
 801ddfc:	7018      	strbne	r0, [r3, #0]
 801ddfe:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801de02:	f04f 0103 	mov.w	r1, #3
 801de06:	48bb      	ldr	r0, [pc, #748]	; (801e0f4 <main+0xa1c>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801de08:	bf08      	it	eq
 801de0a:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801de0c:	f7f0 fe2c 	bl	800ea68 <Calibration_Load_1byte>
 801de10:	4bb9      	ldr	r3, [pc, #740]	; (801e0f8 <main+0xa20>)
 801de12:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801de14:	28ff      	cmp	r0, #255	; 0xff
 801de16:	bf0c      	ite	eq
 801de18:	2200      	moveq	r2, #0
 801de1a:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801de1c:	f04f 0103 	mov.w	r1, #3
 801de20:	48b6      	ldr	r0, [pc, #728]	; (801e0fc <main+0xa24>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801de22:	bf08      	it	eq
 801de24:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801de26:	f7f0 fe1f 	bl	800ea68 <Calibration_Load_1byte>
 801de2a:	4bb5      	ldr	r3, [pc, #724]	; (801e100 <main+0xa28>)
 801de2c:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801de2e:	28ff      	cmp	r0, #255	; 0xff
 801de30:	bf0c      	ite	eq
 801de32:	2200      	moveq	r2, #0
 801de34:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801de36:	f04f 0103 	mov.w	r1, #3
 801de3a:	48b2      	ldr	r0, [pc, #712]	; (801e104 <main+0xa2c>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801de3c:	bf08      	it	eq
 801de3e:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801de40:	f7f0 fe12 	bl	800ea68 <Calibration_Load_1byte>
 801de44:	4bb0      	ldr	r3, [pc, #704]	; (801e108 <main+0xa30>)
 801de46:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801de48:	28ff      	cmp	r0, #255	; 0xff
 801de4a:	bf0a      	itet	eq
 801de4c:	781a      	ldrbeq	r2, [r3, #0]
 801de4e:	7018      	strbne	r0, [r3, #0]
 801de50:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801de54:	f04f 0103 	mov.w	r1, #3
 801de58:	48ac      	ldr	r0, [pc, #688]	; (801e10c <main+0xa34>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801de5a:	bf08      	it	eq
 801de5c:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801de5e:	f7f0 fe03 	bl	800ea68 <Calibration_Load_1byte>
 801de62:	4bab      	ldr	r3, [pc, #684]	; (801e110 <main+0xa38>)
 801de64:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801de66:	28ff      	cmp	r0, #255	; 0xff
 801de68:	bf0c      	ite	eq
 801de6a:	2200      	moveq	r2, #0
 801de6c:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801de6e:	f04f 0101 	mov.w	r1, #1
 801de72:	48a8      	ldr	r0, [pc, #672]	; (801e114 <main+0xa3c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801de74:	bf08      	it	eq
 801de76:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801de78:	f7f0 fdd2 	bl	800ea20 <Calibration_Load_2byte>
 801de7c:	4ca6      	ldr	r4, [pc, #664]	; (801e118 <main+0xa40>)
 801de7e:	4ba7      	ldr	r3, [pc, #668]	; (801e11c <main+0xa44>)
 801de80:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801de82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801de86:	4290      	cmp	r0, r2
 801de88:	bf0c      	ite	eq
 801de8a:	2200      	moveq	r2, #0
 801de8c:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801de8e:	f04f 0101 	mov.w	r1, #1
 801de92:	48a3      	ldr	r0, [pc, #652]	; (801e120 <main+0xa48>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801de94:	bf08      	it	eq
 801de96:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801de98:	f7f0 fdc2 	bl	800ea20 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801de9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dea0:	4298      	cmp	r0, r3
 801dea2:	4ba0      	ldr	r3, [pc, #640]	; (801e124 <main+0xa4c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801dea4:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801dea6:	bf06      	itte	eq
 801dea8:	2200      	moveq	r2, #0
 801deaa:	801a      	strheq	r2, [r3, #0]
 801deac:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 801deae:	f7f0 fe9f 	bl	800ebf0 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 801deb2:	4b9d      	ldr	r3, [pc, #628]	; (801e128 <main+0xa50>)
 801deb4:	4f9d      	ldr	r7, [pc, #628]	; (801e12c <main+0xa54>)
 801deb6:	7818      	ldrb	r0, [r3, #0]
 801deb8:	f7f0 fe5c 	bl	800eb74 <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801debc:	4b88      	ldr	r3, [pc, #544]	; (801e0e0 <main+0xa08>)
 801debe:	489c      	ldr	r0, [pc, #624]	; (801e130 <main+0xa58>)
 801dec0:	781c      	ldrb	r4, [r3, #0]
 801dec2:	4b9c      	ldr	r3, [pc, #624]	; (801e134 <main+0xa5c>)
 801dec4:	4a9c      	ldr	r2, [pc, #624]	; (801e138 <main+0xa60>)
 801dec6:	2c00      	cmp	r4, #0
 801dec8:	bf18      	it	ne
 801deca:	4618      	movne	r0, r3
 801decc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ded0:	f7f0 fe0e 	bl	800eaf0 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801ded4:	4899      	ldr	r0, [pc, #612]	; (801e13c <main+0xa64>)
 801ded6:	f7f0 fdf9 	bl	800eacc <Calibration_Load_float>
 801deda:	4b99      	ldr	r3, [pc, #612]	; (801e140 <main+0xa68>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801dedc:	4899      	ldr	r0, [pc, #612]	; (801e144 <main+0xa6c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801dede:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801dee2:	f7f0 fdf3 	bl	800eacc <Calibration_Load_float>
 801dee6:	4b98      	ldr	r3, [pc, #608]	; (801e148 <main+0xa70>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801dee8:	4a98      	ldr	r2, [pc, #608]	; (801e14c <main+0xa74>)
 801deea:	4899      	ldr	r0, [pc, #612]	; (801e150 <main+0xa78>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801deec:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801def0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801def4:	f7f0 fdfc 	bl	800eaf0 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 801def8:	4a96      	ldr	r2, [pc, #600]	; (801e154 <main+0xa7c>)
 801defa:	4897      	ldr	r0, [pc, #604]	; (801e158 <main+0xa80>)
 801defc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801df00:	f7f0 fdf6 	bl	800eaf0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 801df04:	4a95      	ldr	r2, [pc, #596]	; (801e15c <main+0xa84>)
 801df06:	4896      	ldr	r0, [pc, #600]	; (801e160 <main+0xa88>)
 801df08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801df0c:	f7f0 fdf0 	bl	800eaf0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 801df10:	4a94      	ldr	r2, [pc, #592]	; (801e164 <main+0xa8c>)
 801df12:	4895      	ldr	r0, [pc, #596]	; (801e168 <main+0xa90>)
 801df14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801df18:	f7f0 fdea 	bl	800eaf0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 801df1c:	4a93      	ldr	r2, [pc, #588]	; (801e16c <main+0xa94>)
 801df1e:	4894      	ldr	r0, [pc, #592]	; (801e170 <main+0xa98>)
 801df20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801df24:	f7f0 fde4 	bl	800eaf0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 801df28:	4a92      	ldr	r2, [pc, #584]	; (801e174 <main+0xa9c>)
 801df2a:	4893      	ldr	r0, [pc, #588]	; (801e178 <main+0xaa0>)
 801df2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801df30:	f7f0 fdde 	bl	800eaf0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 801df34:	4a91      	ldr	r2, [pc, #580]	; (801e17c <main+0xaa4>)
 801df36:	4892      	ldr	r0, [pc, #584]	; (801e180 <main+0xaa8>)
 801df38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801df3c:	f7f0 fdd8 	bl	800eaf0 <Calibration_Load_Pack>
 801df40:	4b90      	ldr	r3, [pc, #576]	; (801e184 <main+0xaac>)
 801df42:	9303      	str	r3, [sp, #12]
 801df44:	4b90      	ldr	r3, [pc, #576]	; (801e188 <main+0xab0>)
 801df46:	9305      	str	r3, [sp, #20]
 801df48:	4b90      	ldr	r3, [pc, #576]	; (801e18c <main+0xab4>)
 801df4a:	9304      	str	r3, [sp, #16]
 801df4c:	46aa      	mov	sl, r5
 801df4e:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801df52:	f04f 0800 	mov.w	r8, #0
 801df56:	2100      	movs	r1, #0
 801df58:	4620      	mov	r0, r4
 801df5a:	f7f0 fd61 	bl	800ea20 <Calibration_Load_2byte>
 801df5e:	ee07 0a90 	vmov	s15, r0
 801df62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df66:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 801df6a:	ee17 0a90 	vmov	r0, s15
 801df6e:	f7e2 fb03 	bl	8000578 <__aeabi_f2d>
 801df72:	4642      	mov	r2, r8
 801df74:	464b      	mov	r3, r9
 801df76:	f7e2 fc7d 	bl	8000874 <__aeabi_ddiv>
 801df7a:	a351      	add	r3, pc, #324	; (adr r3, 801e0c0 <main+0x9e8>)
 801df7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df80:	f7e2 f99c 	bl	80002bc <__adddf3>
 801df84:	f7e2 fe44 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801df88:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801df8a:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801df8e:	4620      	mov	r0, r4
 801df90:	f7f0 fd46 	bl	800ea20 <Calibration_Load_2byte>
 801df94:	ee07 0a90 	vmov	s15, r0
 801df98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df9c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801dfa0:	ee17 0a90 	vmov	r0, s15
 801dfa4:	f7e2 fae8 	bl	8000578 <__aeabi_f2d>
 801dfa8:	4642      	mov	r2, r8
 801dfaa:	464b      	mov	r3, r9
 801dfac:	f7e2 fc62 	bl	8000874 <__aeabi_ddiv>
 801dfb0:	a343      	add	r3, pc, #268	; (adr r3, 801e0c0 <main+0x9e8>)
 801dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfb6:	f7e2 f981 	bl	80002bc <__adddf3>
 801dfba:	f7e2 fe29 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801dfbe:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801dfc0:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801dfc4:	4620      	mov	r0, r4
 801dfc6:	f7f0 fd2b 	bl	800ea20 <Calibration_Load_2byte>
 801dfca:	ee07 0a90 	vmov	s15, r0
 801dfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801dfd2:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 801e190 <main+0xab8>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801dfd6:	ee17 0a90 	vmov	r0, s15
 801dfda:	f7e2 facd 	bl	8000578 <__aeabi_f2d>
 801dfde:	4642      	mov	r2, r8
 801dfe0:	464b      	mov	r3, r9
 801dfe2:	f7e2 fc47 	bl	8000874 <__aeabi_ddiv>
 801dfe6:	a336      	add	r3, pc, #216	; (adr r3, 801e0c0 <main+0x9e8>)
 801dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfec:	f7e2 f966 	bl	80002bc <__adddf3>
 801dff0:	f7e2 fe0e 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801dff4:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801dff6:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801dffa:	4620      	mov	r0, r4
 801dffc:	f7f0 fd10 	bl	800ea20 <Calibration_Load_2byte>
 801e000:	ee07 0a90 	vmov	s15, r0
 801e004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e008:	f10a 0a10 	add.w	sl, sl, #16
 801e00c:	ee17 0a90 	vmov	r0, s15
 801e010:	f7e2 fab2 	bl	8000578 <__aeabi_f2d>
 801e014:	4642      	mov	r2, r8
 801e016:	464b      	mov	r3, r9
 801e018:	f7e2 fc2c 	bl	8000874 <__aeabi_ddiv>
 801e01c:	a328      	add	r3, pc, #160	; (adr r3, 801e0c0 <main+0x9e8>)
 801e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e022:	f7e2 f94b 	bl	80002bc <__adddf3>
 801e026:	f7e2 fdf3 	bl	8000c10 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e02a:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801e02c:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e030:	4658      	mov	r0, fp
 801e032:	f7f0 fcf5 	bl	800ea20 <Calibration_Load_2byte>
 801e036:	ee07 0a90 	vmov	s15, r0
 801e03a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e03e:	9b03      	ldr	r3, [sp, #12]
 801e040:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e044:	2101      	movs	r1, #1
 801e046:	4658      	mov	r0, fp
 801e048:	3710      	adds	r7, #16
 801e04a:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e04c:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e050:	f7f0 fce6 	bl	800ea20 <Calibration_Load_2byte>
 801e054:	ee07 0a90 	vmov	s15, r0
 801e058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e05c:	9b03      	ldr	r3, [sp, #12]
 801e05e:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801e062:	2102      	movs	r1, #2
 801e064:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e066:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801e06a:	f7f0 fcd9 	bl	800ea20 <Calibration_Load_2byte>
 801e06e:	ee07 0a90 	vmov	s15, r0
 801e072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e076:	9b03      	ldr	r3, [sp, #12]
 801e078:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801e07c:	2103      	movs	r1, #3
 801e07e:	4658      	mov	r0, fp
 801e080:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 801e084:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801e088:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801e08c:	f7f0 fcc8 	bl	800ea20 <Calibration_Load_2byte>
 801e090:	ee07 0a90 	vmov	s15, r0
 801e094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e098:	9b03      	ldr	r3, [sp, #12]
 801e09a:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801e09e:	2100      	movs	r1, #0
 801e0a0:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801e0a2:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801e0a6:	f7f0 fcbb 	bl	800ea20 <Calibration_Load_2byte>
 801e0aa:	ee07 0a90 	vmov	s15, r0
 801e0ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e0b2:	9b05      	ldr	r3, [sp, #20]
 801e0b4:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801e0b8:	2101      	movs	r1, #1
 801e0ba:	e06d      	b.n	801e198 <main+0xac0>
 801e0bc:	f3af 8000 	nop.w
 801e0c0:	00000000 	.word	0x00000000
 801e0c4:	4072c000 	.word	0x4072c000
 801e0c8:	2000ed2c 	.word	0x2000ed2c
 801e0cc:	20095938 	.word	0x20095938
 801e0d0:	2009582c 	.word	0x2009582c
 801e0d4:	20054938 	.word	0x20054938
 801e0d8:	2004f92c 	.word	0x2004f92c
 801e0dc:	0812b030 	.word	0x0812b030
 801e0e0:	20000ebc 	.word	0x20000ebc
 801e0e4:	0812b040 	.word	0x0812b040
 801e0e8:	200056f2 	.word	0x200056f2
 801e0ec:	0812b048 	.word	0x0812b048
 801e0f0:	200056ef 	.word	0x200056ef
 801e0f4:	0812b050 	.word	0x0812b050
 801e0f8:	200056f0 	.word	0x200056f0
 801e0fc:	0812b058 	.word	0x0812b058
 801e100:	200056f3 	.word	0x200056f3
 801e104:	0812b060 	.word	0x0812b060
 801e108:	20090a69 	.word	0x20090a69
 801e10c:	0812b068 	.word	0x0812b068
 801e110:	20090a6a 	.word	0x20090a6a
 801e114:	0812b038 	.word	0x0812b038
 801e118:	200958c0 	.word	0x200958c0
 801e11c:	200056f6 	.word	0x200056f6
 801e120:	0812b020 	.word	0x0812b020
 801e124:	2000571e 	.word	0x2000571e
 801e128:	200905a6 	.word	0x200905a6
 801e12c:	2004e92c 	.word	0x2004e92c
 801e130:	08101838 	.word	0x08101838
 801e134:	08100838 	.word	0x08100838
 801e138:	20051930 	.word	0x20051930
 801e13c:	08102838 	.word	0x08102838
 801e140:	20009d14 	.word	0x20009d14
 801e144:	0810283c 	.word	0x0810283c
 801e148:	20009d18 	.word	0x20009d18
 801e14c:	20052930 	.word	0x20052930
 801e150:	08102840 	.word	0x08102840
 801e154:	20053930 	.word	0x20053930
 801e158:	08103844 	.word	0x08103844
 801e15c:	2008b504 	.word	0x2008b504
 801e160:	08107840 	.word	0x08107840
 801e164:	2008c504 	.word	0x2008c504
 801e168:	08108840 	.word	0x08108840
 801e16c:	2008e504 	.word	0x2008e504
 801e170:	08109840 	.word	0x08109840
 801e174:	2008a504 	.word	0x2008a504
 801e178:	08105840 	.word	0x08105840
 801e17c:	2008d504 	.word	0x2008d504
 801e180:	08106840 	.word	0x08106840
 801e184:	20009d28 	.word	0x20009d28
 801e188:	2000ad28 	.word	0x2000ad28
 801e18c:	2005092c 	.word	0x2005092c
 801e190:	447a0000 	.word	0x447a0000
 801e194:	40590000 	.word	0x40590000
 801e198:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801e19a:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801e19e:	f7f0 fc3f 	bl	800ea20 <Calibration_Load_2byte>
 801e1a2:	ee07 0a90 	vmov	s15, r0
 801e1a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e1aa:	9b05      	ldr	r3, [sp, #20]
 801e1ac:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801e1b0:	2102      	movs	r1, #2
 801e1b2:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801e1b4:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801e1b8:	f7f0 fc32 	bl	800ea20 <Calibration_Load_2byte>
 801e1bc:	ee07 0a90 	vmov	s15, r0
 801e1c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e1c4:	9b05      	ldr	r3, [sp, #20]
 801e1c6:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801e1ca:	2103      	movs	r1, #3
 801e1cc:	4658      	mov	r0, fp
 801e1ce:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 801e1d2:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801e1d6:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801e1da:	f7f0 fc21 	bl	800ea20 <Calibration_Load_2byte>
 801e1de:	ee07 0a90 	vmov	s15, r0
 801e1e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e1e6:	9b05      	ldr	r3, [sp, #20]
 801e1e8:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801e1ec:	2100      	movs	r1, #0
 801e1ee:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801e1f0:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801e1f4:	f7f0 fc14 	bl	800ea20 <Calibration_Load_2byte>
 801e1f8:	ee07 0a90 	vmov	s15, r0
 801e1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e200:	ee17 0a90 	vmov	r0, s15
 801e204:	f7e2 f9b8 	bl	8000578 <__aeabi_f2d>
 801e208:	4642      	mov	r2, r8
 801e20a:	464b      	mov	r3, r9
 801e20c:	f7e2 fb32 	bl	8000874 <__aeabi_ddiv>
 801e210:	2200      	movs	r2, #0
 801e212:	4bda      	ldr	r3, [pc, #872]	; (801e57c <main+0xea4>)
 801e214:	f7e2 f850 	bl	80002b8 <__aeabi_dsub>
 801e218:	f7e2 fcfa 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801e21c:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801e21e:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801e222:	4658      	mov	r0, fp
 801e224:	f7f0 fbfc 	bl	800ea20 <Calibration_Load_2byte>
 801e228:	ee07 0a90 	vmov	s15, r0
 801e22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e230:	ee17 0a90 	vmov	r0, s15
 801e234:	f7e2 f9a0 	bl	8000578 <__aeabi_f2d>
 801e238:	4642      	mov	r2, r8
 801e23a:	464b      	mov	r3, r9
 801e23c:	f7e2 fb1a 	bl	8000874 <__aeabi_ddiv>
 801e240:	2200      	movs	r2, #0
 801e242:	4bce      	ldr	r3, [pc, #824]	; (801e57c <main+0xea4>)
 801e244:	f7e2 f838 	bl	80002b8 <__aeabi_dsub>
 801e248:	f7e2 fce2 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801e24c:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801e24e:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801e252:	4658      	mov	r0, fp
 801e254:	f7f0 fbe4 	bl	800ea20 <Calibration_Load_2byte>
 801e258:	ee07 0a90 	vmov	s15, r0
 801e25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e260:	ee17 0a90 	vmov	r0, s15
 801e264:	f7e2 f988 	bl	8000578 <__aeabi_f2d>
 801e268:	4642      	mov	r2, r8
 801e26a:	464b      	mov	r3, r9
 801e26c:	f7e2 fb02 	bl	8000874 <__aeabi_ddiv>
 801e270:	2200      	movs	r2, #0
 801e272:	4bc2      	ldr	r3, [pc, #776]	; (801e57c <main+0xea4>)
 801e274:	f7e2 f820 	bl	80002b8 <__aeabi_dsub>
 801e278:	f7e2 fcca 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801e27c:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801e27e:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801e282:	4658      	mov	r0, fp
 801e284:	f7f0 fbcc 	bl	800ea20 <Calibration_Load_2byte>
 801e288:	ee07 0a90 	vmov	s15, r0
 801e28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e290:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 801e294:	ee17 0a90 	vmov	r0, s15
 801e298:	f7e2 f96e 	bl	8000578 <__aeabi_f2d>
 801e29c:	4642      	mov	r2, r8
 801e29e:	464b      	mov	r3, r9
 801e2a0:	f7e2 fae8 	bl	8000874 <__aeabi_ddiv>
 801e2a4:	2200      	movs	r2, #0
 801e2a6:	4bb5      	ldr	r3, [pc, #724]	; (801e57c <main+0xea4>)
 801e2a8:	f7e2 f806 	bl	80002b8 <__aeabi_dsub>
 801e2ac:	f7e2 fcb0 	bl	8000c10 <__aeabi_d2f>
 801e2b0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801e2b4:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801e2b8:	2100      	movs	r1, #0
 801e2ba:	4658      	mov	r0, fp
 801e2bc:	f7f0 fbb0 	bl	800ea20 <Calibration_Load_2byte>
 801e2c0:	ee07 0a90 	vmov	s15, r0
 801e2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2c8:	ee17 0a90 	vmov	r0, s15
 801e2cc:	f7e2 f954 	bl	8000578 <__aeabi_f2d>
 801e2d0:	4642      	mov	r2, r8
 801e2d2:	464b      	mov	r3, r9
 801e2d4:	f7e2 face 	bl	8000874 <__aeabi_ddiv>
 801e2d8:	2200      	movs	r2, #0
 801e2da:	4ba8      	ldr	r3, [pc, #672]	; (801e57c <main+0xea4>)
 801e2dc:	f7e1 ffec 	bl	80002b8 <__aeabi_dsub>
 801e2e0:	f7e2 fc96 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801e2e4:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801e2e6:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801e2ea:	4658      	mov	r0, fp
 801e2ec:	f7f0 fb98 	bl	800ea20 <Calibration_Load_2byte>
 801e2f0:	ee07 0a90 	vmov	s15, r0
 801e2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2f8:	ee17 0a90 	vmov	r0, s15
 801e2fc:	f7e2 f93c 	bl	8000578 <__aeabi_f2d>
 801e300:	4642      	mov	r2, r8
 801e302:	464b      	mov	r3, r9
 801e304:	f7e2 fab6 	bl	8000874 <__aeabi_ddiv>
 801e308:	2200      	movs	r2, #0
 801e30a:	4b9c      	ldr	r3, [pc, #624]	; (801e57c <main+0xea4>)
 801e30c:	f7e1 ffd4 	bl	80002b8 <__aeabi_dsub>
 801e310:	f7e2 fc7e 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801e314:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801e316:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801e31a:	4658      	mov	r0, fp
 801e31c:	f7f0 fb80 	bl	800ea20 <Calibration_Load_2byte>
 801e320:	ee07 0a90 	vmov	s15, r0
 801e324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e328:	ee17 0a90 	vmov	r0, s15
 801e32c:	f7e2 f924 	bl	8000578 <__aeabi_f2d>
 801e330:	4642      	mov	r2, r8
 801e332:	464b      	mov	r3, r9
 801e334:	f7e2 fa9e 	bl	8000874 <__aeabi_ddiv>
 801e338:	2200      	movs	r2, #0
 801e33a:	4b90      	ldr	r3, [pc, #576]	; (801e57c <main+0xea4>)
 801e33c:	f7e1 ffbc 	bl	80002b8 <__aeabi_dsub>
 801e340:	f7e2 fc66 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801e344:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801e346:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801e34a:	4658      	mov	r0, fp
 801e34c:	f7f0 fb68 	bl	800ea20 <Calibration_Load_2byte>
 801e350:	ee07 0a90 	vmov	s15, r0
 801e354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e358:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 801e35c:	ee17 0a90 	vmov	r0, s15
 801e360:	f7e2 f90a 	bl	8000578 <__aeabi_f2d>
 801e364:	4642      	mov	r2, r8
 801e366:	464b      	mov	r3, r9
 801e368:	f7e2 fa84 	bl	8000874 <__aeabi_ddiv>
 801e36c:	2200      	movs	r2, #0
 801e36e:	4b83      	ldr	r3, [pc, #524]	; (801e57c <main+0xea4>)
 801e370:	f7e1 ffa2 	bl	80002b8 <__aeabi_dsub>
 801e374:	f7e2 fc4c 	bl	8000c10 <__aeabi_d2f>
 801e378:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801e37c:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801e380:	2100      	movs	r1, #0
 801e382:	4658      	mov	r0, fp
 801e384:	f7f0 fb4c 	bl	800ea20 <Calibration_Load_2byte>
 801e388:	ee07 0a90 	vmov	s15, r0
 801e38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e390:	3408      	adds	r4, #8
 801e392:	ee17 0a90 	vmov	r0, s15
 801e396:	f7e2 f8ef 	bl	8000578 <__aeabi_f2d>
 801e39a:	4642      	mov	r2, r8
 801e39c:	464b      	mov	r3, r9
 801e39e:	f7e2 fa69 	bl	8000874 <__aeabi_ddiv>
 801e3a2:	2200      	movs	r2, #0
 801e3a4:	4b75      	ldr	r3, [pc, #468]	; (801e57c <main+0xea4>)
 801e3a6:	f7e1 ff87 	bl	80002b8 <__aeabi_dsub>
 801e3aa:	f7e2 fc31 	bl	8000c10 <__aeabi_d2f>
 801e3ae:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801e3b0:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801e3b2:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801e3b4:	4658      	mov	r0, fp
 801e3b6:	f7f0 fb33 	bl	800ea20 <Calibration_Load_2byte>
 801e3ba:	ee07 0a90 	vmov	s15, r0
 801e3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e3c2:	ee17 0a90 	vmov	r0, s15
 801e3c6:	f7e2 f8d7 	bl	8000578 <__aeabi_f2d>
 801e3ca:	4642      	mov	r2, r8
 801e3cc:	464b      	mov	r3, r9
 801e3ce:	f7e2 fa51 	bl	8000874 <__aeabi_ddiv>
 801e3d2:	2200      	movs	r2, #0
 801e3d4:	4b69      	ldr	r3, [pc, #420]	; (801e57c <main+0xea4>)
 801e3d6:	f7e1 ff6f 	bl	80002b8 <__aeabi_dsub>
 801e3da:	f7e2 fc19 	bl	8000c10 <__aeabi_d2f>
 801e3de:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801e3e0:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801e3e2:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801e3e4:	4658      	mov	r0, fp
 801e3e6:	f7f0 fb1b 	bl	800ea20 <Calibration_Load_2byte>
 801e3ea:	ee07 0a90 	vmov	s15, r0
 801e3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e3f2:	ee17 0a90 	vmov	r0, s15
 801e3f6:	f7e2 f8bf 	bl	8000578 <__aeabi_f2d>
 801e3fa:	4642      	mov	r2, r8
 801e3fc:	464b      	mov	r3, r9
 801e3fe:	f7e2 fa39 	bl	8000874 <__aeabi_ddiv>
 801e402:	2200      	movs	r2, #0
 801e404:	4b5d      	ldr	r3, [pc, #372]	; (801e57c <main+0xea4>)
 801e406:	f7e1 ff57 	bl	80002b8 <__aeabi_dsub>
 801e40a:	f7e2 fc01 	bl	8000c10 <__aeabi_d2f>
 801e40e:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801e410:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801e412:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801e414:	4658      	mov	r0, fp
 801e416:	f7f0 fb03 	bl	800ea20 <Calibration_Load_2byte>
 801e41a:	ee07 0a90 	vmov	s15, r0
 801e41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e422:	ee17 0a90 	vmov	r0, s15
 801e426:	f7e2 f8a7 	bl	8000578 <__aeabi_f2d>
 801e42a:	4642      	mov	r2, r8
 801e42c:	464b      	mov	r3, r9
 801e42e:	f7e2 fa21 	bl	8000874 <__aeabi_ddiv>
 801e432:	4b52      	ldr	r3, [pc, #328]	; (801e57c <main+0xea4>)
 801e434:	2200      	movs	r2, #0
 801e436:	f7e1 ff3f 	bl	80002b8 <__aeabi_dsub>
 801e43a:	f7e2 fbe9 	bl	8000c10 <__aeabi_d2f>
 801e43e:	9b04      	ldr	r3, [sp, #16]
 801e440:	60d8      	str	r0, [r3, #12]
 801e442:	9b03      	ldr	r3, [sp, #12]
 801e444:	3310      	adds	r3, #16
 801e446:	9303      	str	r3, [sp, #12]
 801e448:	9b05      	ldr	r3, [sp, #20]
 801e44a:	3310      	adds	r3, #16
 801e44c:	9305      	str	r3, [sp, #20]
 801e44e:	9b04      	ldr	r3, [sp, #16]
 801e450:	3310      	adds	r3, #16
 801e452:	9304      	str	r3, [sp, #16]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 801e454:	4b4a      	ldr	r3, [pc, #296]	; (801e580 <main+0xea8>)
 801e456:	429c      	cmp	r4, r3
 801e458:	f47f ad7d 	bne.w	801df56 <main+0x87e>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801e45c:	2100      	movs	r1, #0
 801e45e:	4849      	ldr	r0, [pc, #292]	; (801e584 <main+0xeac>)
 801e460:	f7f0 fade 	bl	800ea20 <Calibration_Load_2byte>
 801e464:	4b48      	ldr	r3, [pc, #288]	; (801e588 <main+0xeb0>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801e466:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801e468:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801e46a:	4846      	ldr	r0, [pc, #280]	; (801e584 <main+0xeac>)
 801e46c:	f7f0 fad8 	bl	800ea20 <Calibration_Load_2byte>
 801e470:	4b46      	ldr	r3, [pc, #280]	; (801e58c <main+0xeb4>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801e472:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801e474:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801e476:	4846      	ldr	r0, [pc, #280]	; (801e590 <main+0xeb8>)
 801e478:	f7f0 fad2 	bl	800ea20 <Calibration_Load_2byte>
 801e47c:	4b45      	ldr	r3, [pc, #276]	; (801e594 <main+0xebc>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801e47e:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801e480:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801e482:	4845      	ldr	r0, [pc, #276]	; (801e598 <main+0xec0>)
 801e484:	f7f0 facc 	bl	800ea20 <Calibration_Load_2byte>
 801e488:	4b44      	ldr	r3, [pc, #272]	; (801e59c <main+0xec4>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801e48a:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801e48c:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801e48e:	4842      	ldr	r0, [pc, #264]	; (801e598 <main+0xec0>)
 801e490:	f7f0 fac6 	bl	800ea20 <Calibration_Load_2byte>
 801e494:	4b42      	ldr	r3, [pc, #264]	; (801e5a0 <main+0xec8>)
 801e496:	4943      	ldr	r1, [pc, #268]	; (801e5a4 <main+0xecc>)
 801e498:	8018      	strh	r0, [r3, #0]
 801e49a:	4b43      	ldr	r3, [pc, #268]	; (801e5a8 <main+0xed0>)
 801e49c:	4a43      	ldr	r2, [pc, #268]	; (801e5ac <main+0xed4>)
 801e49e:	f8b3 e000 	ldrh.w	lr, [r3]
 801e4a2:	4b43      	ldr	r3, [pc, #268]	; (801e5b0 <main+0xed8>)
 801e4a4:	8810      	ldrh	r0, [r2, #0]
 801e4a6:	f8b3 8000 	ldrh.w	r8, [r3]
 801e4aa:	880e      	ldrh	r6, [r1, #0]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801e4ac:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801e5b4 <main+0xedc>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801e4b0:	eddf 6a41 	vldr	s13, [pc, #260]	; 801e5b8 <main+0xee0>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801e4b4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801e5bc <main+0xee4>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801e4b8:	eddf 5a41 	vldr	s11, [pc, #260]	; 801e5c0 <main+0xee8>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801e4bc:	2300      	movs	r3, #0
 801e4be:	461c      	mov	r4, r3
 801e4c0:	461f      	mov	r7, r3
 801e4c2:	469c      	mov	ip, r3
 801e4c4:	4699      	mov	r9, r3
 801e4c6:	468a      	mov	sl, r1
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801e4c8:	ecf5 7a01 	vldmia	r5!, {s15}
 801e4cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4d4:	b299      	uxth	r1, r3
 801e4d6:	d807      	bhi.n	801e4e8 <main+0xe10>
 801e4d8:	ed95 5a00 	vldr	s10, [r5]
 801e4dc:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801e4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4e4:	f280 80f2 	bge.w	801e6cc <main+0xff4>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801e4e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801e4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4f0:	d807      	bhi.n	801e502 <main+0xe2a>
 801e4f2:	ed95 5a00 	vldr	s10, [r5]
 801e4f6:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801e4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4fe:	f280 80e9 	bge.w	801e6d4 <main+0xffc>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801e502:	eef4 7ac6 	vcmpe.f32	s15, s12
 801e506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e50a:	d807      	bhi.n	801e51c <main+0xe44>
 801e50c:	ed95 5a00 	vldr	s10, [r5]
 801e510:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801e514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e518:	f280 80e0 	bge.w	801e6dc <main+0x1004>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801e51c:	eef4 7ae5 	vcmpe.f32	s15, s11
 801e520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e524:	d808      	bhi.n	801e538 <main+0xe60>
 801e526:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 801e52a:	eef4 7a65 	vcmp.f32	s15, s11
 801e52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e532:	bfa4      	itt	ge
 801e534:	4608      	movge	r0, r1
 801e536:	2401      	movge	r4, #1
 801e538:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 801e53a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e53e:	d1c3      	bne.n	801e4c8 <main+0xdf0>
 801e540:	f1b9 0f00 	cmp.w	r9, #0
 801e544:	d002      	beq.n	801e54c <main+0xe74>
 801e546:	4b1a      	ldr	r3, [pc, #104]	; (801e5b0 <main+0xed8>)
 801e548:	f8a3 8000 	strh.w	r8, [r3]
 801e54c:	f1bc 0f00 	cmp.w	ip, #0
 801e550:	d002      	beq.n	801e558 <main+0xe80>
 801e552:	4b15      	ldr	r3, [pc, #84]	; (801e5a8 <main+0xed0>)
 801e554:	f8a3 e000 	strh.w	lr, [r3]
 801e558:	b10f      	cbz	r7, 801e55e <main+0xe86>
 801e55a:	f8aa 6000 	strh.w	r6, [sl]
 801e55e:	b104      	cbz	r4, 801e562 <main+0xe8a>
 801e560:	8010      	strh	r0, [r2, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801e562:	4b18      	ldr	r3, [pc, #96]	; (801e5c4 <main+0xeec>)
 801e564:	4a18      	ldr	r2, [pc, #96]	; (801e5c8 <main+0xef0>)
 801e566:	edd3 7a00 	vldr	s15, [r3]
 801e56a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801e5cc <main+0xef4>
 801e56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e572:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801e576:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
 801e57a:	e029      	b.n	801e5d0 <main+0xef8>
 801e57c:	40490000 	.word	0x40490000
 801e580:	08100800 	.word	0x08100800
 801e584:	0812a048 	.word	0x0812a048
 801e588:	200956c0 	.word	0x200956c0
 801e58c:	200956d4 	.word	0x200956d4
 801e590:	0812a04c 	.word	0x0812a04c
 801e594:	200959e0 	.word	0x200959e0
 801e598:	0812a040 	.word	0x0812a040
 801e59c:	200956c4 	.word	0x200956c4
 801e5a0:	20095a88 	.word	0x20095a88
 801e5a4:	20095ca0 	.word	0x20095ca0
 801e5a8:	20095b3c 	.word	0x20095b3c
 801e5ac:	20095a78 	.word	0x20095a78
 801e5b0:	20095a7a 	.word	0x20095a7a
 801e5b4:	43c80000 	.word	0x43c80000
 801e5b8:	43fa0000 	.word	0x43fa0000
 801e5bc:	44160000 	.word	0x44160000
 801e5c0:	442f0000 	.word	0x442f0000
 801e5c4:	20054938 	.word	0x20054938
 801e5c8:	20055938 	.word	0x20055938
 801e5cc:	20009d24 	.word	0x20009d24
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801e5d0:	8011      	strh	r1, [r2, #0]
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801e5d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e5d6:	ee17 1a90 	vmov	r1, s15
 801e5da:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e5dc:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801e5e0:	edd1 7a00 	vldr	s15, [r1]
 801e5e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e5e8:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e5ec:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e5f0:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e5f4:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e5f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e5fa:	ee17 3a90 	vmov	r3, s15
 801e5fe:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 801e600:	4b64      	ldr	r3, [pc, #400]	; (801e794 <main+0x10bc>)
 801e602:	781a      	ldrb	r2, [r3, #0]
 801e604:	4b64      	ldr	r3, [pc, #400]	; (801e798 <main+0x10c0>)
 801e606:	2a00      	cmp	r2, #0
 801e608:	d16b      	bne.n	801e6e2 <main+0x100a>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801e60a:	4a64      	ldr	r2, [pc, #400]	; (801e79c <main+0x10c4>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e60c:	ed93 0a00 	vldr	s0, [r3]
 801e610:	edd2 0a00 	vldr	s1, [r2]
 801e614:	f7fa ff68 	bl	80194e8 <Rabs_calc_Factor2_Settings_change>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&huart3);} else{HAL_UART_MspInit(&huart3);}
 801e618:	4b61      	ldr	r3, [pc, #388]	; (801e7a0 <main+0x10c8>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e61a:	ed89 0a00 	vstr	s0, [r9]
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&huart3);} else{HAL_UART_MspInit(&huart3);}
 801e61e:	781b      	ldrb	r3, [r3, #0]
 801e620:	4860      	ldr	r0, [pc, #384]	; (801e7a4 <main+0x10cc>)
 801e622:	2b00      	cmp	r3, #0
 801e624:	d15f      	bne.n	801e6e6 <main+0x100e>
 801e626:	f000 fc25 	bl	801ee74 <HAL_UART_MspDeInit>
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801e62a:	2103      	movs	r1, #3
 801e62c:	485e      	ldr	r0, [pc, #376]	; (801e7a8 <main+0x10d0>)
 801e62e:	4d5f      	ldr	r5, [pc, #380]	; (801e7ac <main+0x10d4>)
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e630:	4c5f      	ldr	r4, [pc, #380]	; (801e7b0 <main+0x10d8>)
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801e632:	f7f0 fa19 	bl	800ea68 <Calibration_Load_1byte>
 801e636:	7028      	strb	r0, [r5, #0]
	Calculate_Data();
 801e638:	f7fe f840 	bl	801c6bc <Calculate_Data>
	Get_Battery_Level();
 801e63c:	f7fe f974 	bl	801c928 <Get_Battery_Level>
	HAL_Delay(1);
 801e640:	2001      	movs	r0, #1
 801e642:	f7e2 fcf3 	bl	800102c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 801e646:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 801e64a:	2000      	movs	r0, #0
 801e64c:	f7fa ff1c 	bl	8019488 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801e650:	4a58      	ldr	r2, [pc, #352]	; (801e7b4 <main+0x10dc>)
 801e652:	f245 410a 	movw	r1, #21514	; 0x540a
 801e656:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 801e65a:	f7ed faef 	bl	800bc3c <CRC_Check>
 801e65e:	4b56      	ldr	r3, [pc, #344]	; (801e7b8 <main+0x10e0>)
 801e660:	7018      	strb	r0, [r3, #0]
		GUI_Title_Screen();
 801e662:	f7f0 fbe1 	bl	800ee28 <GUI_Title_Screen>
		HAL_Delay(2000);	
 801e666:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801e66a:	f7e2 fcdf 	bl	800102c <HAL_Delay>
		usb_receive_processing();
 801e66e:	f7fe fba1 	bl	801cdb4 <usb_receive_processing>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e672:	7823      	ldrb	r3, [r4, #0]
 801e674:	f013 0f01 	tst.w	r3, #1
 801e678:	46a8      	mov	r8, r5
 801e67a:	d037      	beq.n	801e6ec <main+0x1014>
 801e67c:	4b4f      	ldr	r3, [pc, #316]	; (801e7bc <main+0x10e4>)
 801e67e:	4850      	ldr	r0, [pc, #320]	; (801e7c0 <main+0x10e8>)
 801e680:	781b      	ldrb	r3, [r3, #0]
 801e682:	f013 0f01 	tst.w	r3, #1
 801e686:	bf18      	it	ne
 801e688:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801e68c:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 801e690:	f7fa fefa 	bl	8019488 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 801e694:	4b4b      	ldr	r3, [pc, #300]	; (801e7c4 <main+0x10ec>)
 801e696:	4a4c      	ldr	r2, [pc, #304]	; (801e7c8 <main+0x10f0>)
 801e698:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801e69a:	7822      	ldrb	r2, [r4, #0]
 801e69c:	f002 0101 	and.w	r1, r2, #1
 801e6a0:	2900      	cmp	r1, #0
 801e6a2:	bf14      	ite	ne
 801e6a4:	21d8      	movne	r1, #216	; 0xd8
 801e6a6:	21fa      	moveq	r1, #250	; 0xfa
 801e6a8:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801e6aa:	d12d      	bne.n	801e708 <main+0x1030>
 801e6ac:	f012 0f04 	tst.w	r2, #4
 801e6b0:	bf0c      	ite	eq
 801e6b2:	22fa      	moveq	r2, #250	; 0xfa
 801e6b4:	22ea      	movne	r2, #234	; 0xea
 801e6b6:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 801e6b8:	f898 3000 	ldrb.w	r3, [r8]
 801e6bc:	3b01      	subs	r3, #1
 801e6be:	2b05      	cmp	r3, #5
 801e6c0:	d858      	bhi.n	801e774 <main+0x109c>
 801e6c2:	e8df f003 	tbb	[pc, r3]
 801e6c6:	235a      	.short	0x235a
 801e6c8:	514b453b 	.word	0x514b453b
			PARGraph_B = i;
 801e6cc:	4688      	mov	r8, r1
 801e6ce:	f04f 0901 	mov.w	r9, #1
 801e6d2:	e731      	b.n	801e538 <main+0xe60>
			PARGraph_G = i;
 801e6d4:	468e      	mov	lr, r1
 801e6d6:	f04f 0c01 	mov.w	ip, #1
 801e6da:	e72d      	b.n	801e538 <main+0xe60>
			PARGraph_R = i;
 801e6dc:	460e      	mov	r6, r1
 801e6de:	2701      	movs	r7, #1
 801e6e0:	e72a      	b.n	801e538 <main+0xe60>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e6e2:	4a3a      	ldr	r2, [pc, #232]	; (801e7cc <main+0x10f4>)
 801e6e4:	e792      	b.n	801e60c <main+0xf34>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&huart3);} else{HAL_UART_MspInit(&huart3);}
 801e6e6:	f000 fb6b 	bl	801edc0 <HAL_UART_MspInit>
 801e6ea:	e79e      	b.n	801e62a <main+0xf52>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e6ec:	f003 0304 	and.w	r3, r3, #4
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	4b37      	ldr	r3, [pc, #220]	; (801e7d0 <main+0x10f8>)
 801e6f4:	4837      	ldr	r0, [pc, #220]	; (801e7d4 <main+0x10fc>)
 801e6f6:	bf08      	it	eq
 801e6f8:	4618      	moveq	r0, r3
 801e6fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 801e6fe:	f24e 4184 	movw	r1, #58500	; 0xe484
 801e702:	bf08      	it	eq
 801e704:	4619      	moveq	r1, r3
 801e706:	e7c3      	b.n	801e690 <main+0xfb8>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801e708:	22fa      	movs	r2, #250	; 0xfa
 801e70a:	e7d4      	b.n	801e6b6 <main+0xfde>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 801e70c:	4b32      	ldr	r3, [pc, #200]	; (801e7d8 <main+0x1100>)
 801e70e:	2201      	movs	r2, #1
 801e710:	701a      	strb	r2, [r3, #0]
 801e712:	f7f1 fcc3 	bl	801009c <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 801e716:	4c31      	ldr	r4, [pc, #196]	; (801e7dc <main+0x1104>)
  htim7.Init.Prescaler = 60000;
 801e718:	4931      	ldr	r1, [pc, #196]	; (801e7e0 <main+0x1108>)
 801e71a:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e71e:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 801e720:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801e724:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 801e726:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e728:	9319      	str	r3, [sp, #100]	; 0x64
 801e72a:	931a      	str	r3, [sp, #104]	; 0x68
 801e72c:	931b      	str	r3, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e72e:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 801e730:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e732:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801e734:	f7e7 fbba 	bl	8005eac <HAL_TIM_Base_Init>
 801e738:	b310      	cbz	r0, 801e780 <main+0x10a8>
 801e73a:	e7fe      	b.n	801e73a <main+0x1062>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 801e73c:	4b26      	ldr	r3, [pc, #152]	; (801e7d8 <main+0x1100>)
 801e73e:	2202      	movs	r2, #2
 801e740:	701a      	strb	r2, [r3, #0]
 801e742:	f7f1 fc7d 	bl	8010040 <GUI_Measure_Screen>
 801e746:	f7f1 fca9 	bl	801009c <GUI_Measure2_Screen>
 801e74a:	f7f1 fcdf 	bl	801010c <GUI_Measure3_Screen>
 801e74e:	e7e2      	b.n	801e716 <main+0x103e>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 801e750:	4b21      	ldr	r3, [pc, #132]	; (801e7d8 <main+0x1100>)
 801e752:	2201      	movs	r2, #1
 801e754:	701a      	strb	r2, [r3, #0]
 801e756:	f7f1 fad7 	bl	800fd08 <GUI_Graph_Screen>
 801e75a:	e7dc      	b.n	801e716 <main+0x103e>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 801e75c:	4b1e      	ldr	r3, [pc, #120]	; (801e7d8 <main+0x1100>)
 801e75e:	220e      	movs	r2, #14
 801e760:	701a      	strb	r2, [r3, #0]
 801e762:	f7f1 fd09 	bl	8010178 <GUI_Color_Screen>
 801e766:	e7d6      	b.n	801e716 <main+0x103e>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();	break;
 801e768:	4b1b      	ldr	r3, [pc, #108]	; (801e7d8 <main+0x1100>)
 801e76a:	2201      	movs	r2, #1
 801e76c:	701a      	strb	r2, [r3, #0]
 801e76e:	f7f2 f871 	bl	8010854 <GUI_ColorRend_Screen>
 801e772:	e7d0      	b.n	801e716 <main+0x103e>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 801e774:	2301      	movs	r3, #1
 801e776:	f888 3000 	strb.w	r3, [r8]
 801e77a:	f7f1 fc61 	bl	8010040 <GUI_Measure_Screen>
 801e77e:	e7ca      	b.n	801e716 <main+0x103e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e780:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e782:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801e784:	a919      	add	r1, sp, #100	; 0x64
 801e786:	4620      	mov	r0, r4
 801e788:	f7e7 fe10 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801e78c:	4607      	mov	r7, r0
 801e78e:	b348      	cbz	r0, 801e7e4 <main+0x110c>
 801e790:	e7fe      	b.n	801e790 <main+0x10b8>
 801e792:	bf00      	nop
 801e794:	20000ebc 	.word	0x20000ebc
 801e798:	20009d1c 	.word	0x20009d1c
 801e79c:	20009d18 	.word	0x20009d18
 801e7a0:	20090a6a 	.word	0x20090a6a
 801e7a4:	20095718 	.word	0x20095718
 801e7a8:	0812c020 	.word	0x0812c020
 801e7ac:	200056f1 	.word	0x200056f1
 801e7b0:	200056ef 	.word	0x200056ef
 801e7b4:	0812a050 	.word	0x0812a050
 801e7b8:	200956c2 	.word	0x200956c2
 801e7bc:	200056f4 	.word	0x200056f4
 801e7c0:	00051d00 	.word	0x00051d00
 801e7c4:	20091000 	.word	0x20091000
 801e7c8:	20055942 	.word	0x20055942
 801e7cc:	20009d14 	.word	0x20009d14
 801e7d0:	00018100 	.word	0x00018100
 801e7d4:	0006ca00 	.word	0x0006ca00
 801e7d8:	2000022a 	.word	0x2000022a
 801e7dc:	20095c60 	.word	0x20095c60
 801e7e0:	40001400 	.word	0x40001400
	HAL_Delay(1);
 801e7e4:	2001      	movs	r0, #1
 801e7e6:	f7e2 fc21 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801e7ea:	2037      	movs	r0, #55	; 0x37
 801e7ec:	f7e3 f90c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 801e7f0:	2046      	movs	r0, #70	; 0x46
 801e7f2:	f7e3 f909 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e7f6:	2001      	movs	r0, #1
 801e7f8:	f7e2 fc18 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 801e7fc:	4620      	mov	r0, r4
 801e7fe:	f7e7 fa07 	bl	8005c10 <HAL_TIM_Base_Start>
	HAL_Delay(1);
 801e802:	2001      	movs	r0, #1
 801e804:	f7e2 fc12 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 801e808:	4620      	mov	r0, r4
 801e80a:	f7e7 fa1b 	bl	8005c44 <HAL_TIM_Base_Start_IT>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801e80e:	4c91      	ldr	r4, [pc, #580]	; (801ea54 <main+0x137c>)
	uint8_t exp_stable = 0, start = 1;
 801e810:	2301      	movs	r3, #1
	uint32_t cnt_delay = 0, scr_refresh = 0;
 801e812:	463e      	mov	r6, r7
	uint8_t exp_stable = 0, start = 1;
 801e814:	9303      	str	r3, [sp, #12]
 801e816:	46bb      	mov	fp, r7
	 if(send_bluetooth) 
 801e818:	4d8f      	ldr	r5, [pc, #572]	; (801ea58 <main+0x1380>)
	 usb_receive_processing();
 801e81a:	f7fe facb 	bl	801cdb4 <usb_receive_processing>
	 if(send_bluetooth) 
 801e81e:	782b      	ldrb	r3, [r5, #0]
 801e820:	b13b      	cbz	r3, 801e832 <main+0x115a>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&data_bluetooth_send, 4122);
 801e822:	f241 021a 	movw	r2, #4122	; 0x101a
 801e826:	498d      	ldr	r1, [pc, #564]	; (801ea5c <main+0x1384>)
 801e828:	488d      	ldr	r0, [pc, #564]	; (801ea60 <main+0x1388>)
 801e82a:	f7e7 fe3f 	bl	80064ac <HAL_UART_Transmit_DMA>
			send_bluetooth = 0;
 801e82e:	2300      	movs	r3, #0
 801e830:	702b      	strb	r3, [r5, #0]
 801e832:	f8df a270 	ldr.w	sl, [pc, #624]	; 801eaa4 <main+0x13cc>
		while(start)
 801e836:	9b03      	ldr	r3, [sp, #12]
 801e838:	1c75      	adds	r5, r6, #1
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d174      	bne.n	801e928 <main+0x1250>
		if(!exp_set){
 801e83e:	4b89      	ldr	r3, [pc, #548]	; (801ea64 <main+0x138c>)
 801e840:	781b      	ldrb	r3, [r3, #0]
 801e842:	b993      	cbnz	r3, 801e86a <main+0x1192>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801e844:	4b88      	ldr	r3, [pc, #544]	; (801ea68 <main+0x1390>)
 801e846:	4e89      	ldr	r6, [pc, #548]	; (801ea6c <main+0x1394>)
 801e848:	4989      	ldr	r1, [pc, #548]	; (801ea70 <main+0x1398>)
 801e84a:	ed93 0a00 	vldr	s0, [r3]
 801e84e:	8830      	ldrh	r0, [r6, #0]
 801e850:	f7fa fe4e 	bl	80194f0 <Rabs_calc_Factor1>
 801e854:	4b87      	ldr	r3, [pc, #540]	; (801ea74 <main+0x139c>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801e856:	4a88      	ldr	r2, [pc, #544]	; (801ea78 <main+0x13a0>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801e858:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801e85c:	edd9 0a00 	vldr	s1, [r9]
 801e860:	4b86      	ldr	r3, [pc, #536]	; (801ea7c <main+0x13a4>)
 801e862:	8831      	ldrh	r1, [r6, #0]
 801e864:	4882      	ldr	r0, [pc, #520]	; (801ea70 <main+0x1398>)
 801e866:	f7fa fe77 	bl	8019558 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801e86a:	f89a 3000 	ldrb.w	r3, [sl]
 801e86e:	b92b      	cbnz	r3, 801e87c <main+0x11a4>
 801e870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e874:	4981      	ldr	r1, [pc, #516]	; (801ea7c <main+0x13a4>)
 801e876:	4882      	ldr	r0, [pc, #520]	; (801ea80 <main+0x13a8>)
 801e878:	f000 ffcc 	bl	801f814 <memcpy>
			exp_start = 0;
 801e87c:	4b81      	ldr	r3, [pc, #516]	; (801ea84 <main+0x13ac>)
 801e87e:	2200      	movs	r2, #0
 801e880:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 801e882:	f898 3000 	ldrb.w	r3, [r8]
 801e886:	1e5a      	subs	r2, r3, #1
 801e888:	2a02      	cmp	r2, #2
 801e88a:	f200 80a6 	bhi.w	801e9da <main+0x1302>
 801e88e:	4b7e      	ldr	r3, [pc, #504]	; (801ea88 <main+0x13b0>)
 801e890:	781b      	ldrb	r3, [r3, #0]
 801e892:	2b00      	cmp	r3, #0
 801e894:	f040 80c2 	bne.w	801ea1c <main+0x1344>
			if(!pause & !exp_set){Calculate_Data();}
 801e898:	4b72      	ldr	r3, [pc, #456]	; (801ea64 <main+0x138c>)
 801e89a:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801e89c:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 801e89e:	b90b      	cbnz	r3, 801e8a4 <main+0x11cc>
 801e8a0:	f7fd ff0c 	bl	801c6bc <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801e8a4:	2d28      	cmp	r5, #40	; 0x28
 801e8a6:	d908      	bls.n	801e8ba <main+0x11e2>
 801e8a8:	7823      	ldrb	r3, [r4, #0]
 801e8aa:	2b05      	cmp	r3, #5
 801e8ac:	f200 8086 	bhi.w	801e9bc <main+0x12e4>
								auto_exposure();
 801e8b0:	f7fe fc54 	bl	801d15c <auto_exposure>
								max_el = 0;
 801e8b4:	4b75      	ldr	r3, [pc, #468]	; (801ea8c <main+0x13b4>)
 801e8b6:	2600      	movs	r6, #0
 801e8b8:	801e      	strh	r6, [r3, #0]
        if(GUI_screen_state == Graph_Screen)
 801e8ba:	f898 3000 	ldrb.w	r3, [r8]
 801e8be:	2b04      	cmp	r3, #4
 801e8c0:	f040 80c6 	bne.w	801ea50 <main+0x1378>
            scr_refresh++;
 801e8c4:	3701      	adds	r7, #1
            if(scr_refresh == 40 ){
 801e8c6:	2f28      	cmp	r7, #40	; 0x28
 801e8c8:	d12b      	bne.n	801e922 <main+0x124a>
							block_graph = 1;
 801e8ca:	2301      	movs	r3, #1
 801e8cc:	f88a 3000 	strb.w	r3, [sl]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 801e8d0:	4b6f      	ldr	r3, [pc, #444]	; (801ea90 <main+0x13b8>)
 801e8d2:	4d70      	ldr	r5, [pc, #448]	; (801ea94 <main+0x13bc>)
 801e8d4:	781b      	ldrb	r3, [r3, #0]
 801e8d6:	4f70      	ldr	r7, [pc, #448]	; (801ea98 <main+0x13c0>)
 801e8d8:	2b04      	cmp	r3, #4
 801e8da:	d108      	bne.n	801e8ee <main+0x1216>
 801e8dc:	782a      	ldrb	r2, [r5, #0]
 801e8de:	783b      	ldrb	r3, [r7, #0]
 801e8e0:	4293      	cmp	r3, r2
 801e8e2:	d104      	bne.n	801e8ee <main+0x1216>
 801e8e4:	2114      	movs	r1, #20
 801e8e6:	4a6d      	ldr	r2, [pc, #436]	; (801ea9c <main+0x13c4>)
 801e8e8:	4608      	mov	r0, r1
 801e8ea:	f7fc fdc9 	bl	801b480 <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801e8ee:	7839      	ldrb	r1, [r7, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801e8f0:	4863      	ldr	r0, [pc, #396]	; (801ea80 <main+0x13a8>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801e8f2:	7029      	strb	r1, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801e8f4:	f7fa fea0 	bl	8019638 <Rabs_find_MAX>
 801e8f8:	4b69      	ldr	r3, [pc, #420]	; (801eaa0 <main+0x13c8>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801e8fa:	4961      	ldr	r1, [pc, #388]	; (801ea80 <main+0x13a8>)
 801e8fc:	7828      	ldrb	r0, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801e8fe:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801e902:	f7fc fd6b 	bl	801b3dc <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801e906:	782b      	ldrb	r3, [r5, #0]
 801e908:	9300      	str	r3, [sp, #0]
 801e90a:	2114      	movs	r1, #20
 801e90c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e910:	4a62      	ldr	r2, [pc, #392]	; (801ea9c <main+0x13c4>)
 801e912:	4608      	mov	r0, r1
								block_graph = 0;
 801e914:	2700      	movs	r7, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801e916:	f7fc fba7 	bl	801b068 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 801e91a:	f88a 7000 	strb.w	r7, [sl]
								GUI_SignalLevel();
 801e91e:	f7f1 fb2d 	bl	800ff7c <GUI_SignalLevel>
        GUI_Display_Refresh();
 801e922:	f7f2 f835 	bl	8010990 <GUI_Display_Refresh>
	 usb_receive_processing();
 801e926:	e777      	b.n	801e818 <main+0x1140>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801e928:	4b4f      	ldr	r3, [pc, #316]	; (801ea68 <main+0x1390>)
 801e92a:	4e50      	ldr	r6, [pc, #320]	; (801ea6c <main+0x1394>)
 801e92c:	4950      	ldr	r1, [pc, #320]	; (801ea70 <main+0x1398>)
 801e92e:	ed93 0a00 	vldr	s0, [r3]
 801e932:	8830      	ldrh	r0, [r6, #0]
 801e934:	f7fa fddc 	bl	80194f0 <Rabs_calc_Factor1>
 801e938:	4b4e      	ldr	r3, [pc, #312]	; (801ea74 <main+0x139c>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801e93a:	4a4f      	ldr	r2, [pc, #316]	; (801ea78 <main+0x13a0>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801e93c:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801e940:	edd9 0a00 	vldr	s1, [r9]
 801e944:	4b4d      	ldr	r3, [pc, #308]	; (801ea7c <main+0x13a4>)
 801e946:	8831      	ldrh	r1, [r6, #0]
 801e948:	4849      	ldr	r0, [pc, #292]	; (801ea70 <main+0x1398>)
 801e94a:	f7fa fe05 	bl	8019558 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801e94e:	f89a 3000 	ldrb.w	r3, [sl]
 801e952:	b92b      	cbnz	r3, 801e960 <main+0x1288>
 801e954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e958:	4948      	ldr	r1, [pc, #288]	; (801ea7c <main+0x13a4>)
 801e95a:	4849      	ldr	r0, [pc, #292]	; (801ea80 <main+0x13a8>)
 801e95c:	f000 ff5a 	bl	801f814 <memcpy>
			Calculate_Data();
 801e960:	f7fd feac 	bl	801c6bc <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801e964:	2d14      	cmp	r5, #20
			cnt_delay++;
 801e966:	462e      	mov	r6, r5
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801e968:	f67f af65 	bls.w	801e836 <main+0x115e>
 801e96c:	7823      	ldrb	r3, [r4, #0]
 801e96e:	2b05      	cmp	r3, #5
 801e970:	d910      	bls.n	801e994 <main+0x12bc>
 801e972:	2d32      	cmp	r5, #50	; 0x32
 801e974:	f67f af5f 	bls.w	801e836 <main+0x115e>
 801e978:	7823      	ldrb	r3, [r4, #0]
 801e97a:	2b05      	cmp	r3, #5
 801e97c:	d902      	bls.n	801e984 <main+0x12ac>
 801e97e:	7823      	ldrb	r3, [r4, #0]
 801e980:	2b07      	cmp	r3, #7
 801e982:	d907      	bls.n	801e994 <main+0x12bc>
 801e984:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 801e988:	f67f af55 	bls.w	801e836 <main+0x115e>
 801e98c:	7823      	ldrb	r3, [r4, #0]
 801e98e:	2b07      	cmp	r3, #7
 801e990:	f67f af51 	bls.w	801e836 <main+0x115e>
								auto_exposure();
 801e994:	f7fe fbe2 	bl	801d15c <auto_exposure>
								max_el = 0;
 801e998:	4b3c      	ldr	r3, [pc, #240]	; (801ea8c <main+0x13b4>)
 801e99a:	2600      	movs	r6, #0
 801e99c:	801e      	strh	r6, [r3, #0]
								exp_stable = exp_stable+1;
 801e99e:	f10b 0301 	add.w	r3, fp, #1
 801e9a2:	fa5f fb83 	uxtb.w	fp, r3
								exp_start = 1;
 801e9a6:	4b37      	ldr	r3, [pc, #220]	; (801ea84 <main+0x13ac>)
 801e9a8:	f1bb 0f0a 	cmp.w	fp, #10
 801e9ac:	f04f 0201 	mov.w	r2, #1
 801e9b0:	701a      	strb	r2, [r3, #0]
 801e9b2:	bf8c      	ite	hi
 801e9b4:	2300      	movhi	r3, #0
 801e9b6:	2301      	movls	r3, #1
 801e9b8:	9303      	str	r3, [sp, #12]
 801e9ba:	e73c      	b.n	801e836 <main+0x115e>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801e9bc:	2d46      	cmp	r5, #70	; 0x46
 801e9be:	f67f af7c 	bls.w	801e8ba <main+0x11e2>
 801e9c2:	7823      	ldrb	r3, [r4, #0]
 801e9c4:	2b05      	cmp	r3, #5
 801e9c6:	d903      	bls.n	801e9d0 <main+0x12f8>
 801e9c8:	7823      	ldrb	r3, [r4, #0]
 801e9ca:	2b07      	cmp	r3, #7
 801e9cc:	f67f af70 	bls.w	801e8b0 <main+0x11d8>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801e9d0:	7823      	ldrb	r3, [r4, #0]
 801e9d2:	2b07      	cmp	r3, #7
 801e9d4:	f63f af6c 	bhi.w	801e8b0 <main+0x11d8>
 801e9d8:	e76f      	b.n	801e8ba <main+0x11e2>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 801e9da:	2b05      	cmp	r3, #5
 801e9dc:	d11e      	bne.n	801ea1c <main+0x1344>
 801e9de:	4b2a      	ldr	r3, [pc, #168]	; (801ea88 <main+0x13b0>)
 801e9e0:	781b      	ldrb	r3, [r3, #0]
 801e9e2:	b9db      	cbnz	r3, 801ea1c <main+0x1344>
			if(!pause & !exp_set){Calculate_Data();}
 801e9e4:	4b1f      	ldr	r3, [pc, #124]	; (801ea64 <main+0x138c>)
 801e9e6:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801e9e8:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 801e9ea:	bb7b      	cbnz	r3, 801ea4c <main+0x1374>
 801e9ec:	f7fd fe66 	bl	801c6bc <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801e9f0:	2d28      	cmp	r5, #40	; 0x28
 801e9f2:	f67f af62 	bls.w	801e8ba <main+0x11e2>
 801e9f6:	7823      	ldrb	r3, [r4, #0]
 801e9f8:	2b05      	cmp	r3, #5
 801e9fa:	f67f af59 	bls.w	801e8b0 <main+0x11d8>
 801e9fe:	2d46      	cmp	r5, #70	; 0x46
 801ea00:	f67f af5b 	bls.w	801e8ba <main+0x11e2>
 801ea04:	7823      	ldrb	r3, [r4, #0]
 801ea06:	2b05      	cmp	r3, #5
 801ea08:	d903      	bls.n	801ea12 <main+0x133a>
 801ea0a:	7823      	ldrb	r3, [r4, #0]
 801ea0c:	2b07      	cmp	r3, #7
 801ea0e:	f67f af4f 	bls.w	801e8b0 <main+0x11d8>
 801ea12:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801ea16:	f67f af50 	bls.w	801e8ba <main+0x11e2>
 801ea1a:	e7d9      	b.n	801e9d0 <main+0x12f8>
 801ea1c:	2dfa      	cmp	r5, #250	; 0xfa
				cnt_delay++;
 801ea1e:	462e      	mov	r6, r5
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801ea20:	f67f af4b 	bls.w	801e8ba <main+0x11e2>
 801ea24:	7823      	ldrb	r3, [r4, #0]
 801ea26:	2b05      	cmp	r3, #5
 801ea28:	f67f af42 	bls.w	801e8b0 <main+0x11d8>
 801ea2c:	f240 33b6 	movw	r3, #950	; 0x3b6
 801ea30:	429d      	cmp	r5, r3
 801ea32:	f67f af42 	bls.w	801e8ba <main+0x11e2>
 801ea36:	7823      	ldrb	r3, [r4, #0]
 801ea38:	2b05      	cmp	r3, #5
 801ea3a:	d903      	bls.n	801ea44 <main+0x136c>
 801ea3c:	7823      	ldrb	r3, [r4, #0]
 801ea3e:	2b07      	cmp	r3, #7
 801ea40:	f67f af36 	bls.w	801e8b0 <main+0x11d8>
 801ea44:	f240 53aa 	movw	r3, #1450	; 0x5aa
 801ea48:	429d      	cmp	r5, r3
 801ea4a:	e7e4      	b.n	801ea16 <main+0x133e>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801ea4c:	2d28      	cmp	r5, #40	; 0x28
 801ea4e:	d8d2      	bhi.n	801e9f6 <main+0x131e>
        } else{__asm("nop");}
 801ea50:	bf00      	nop
 801ea52:	e766      	b.n	801e922 <main+0x124a>
 801ea54:	200905a6 	.word	0x200905a6
 801ea58:	200905b8 	.word	0x200905b8
 801ea5c:	2008f58c 	.word	0x2008f58c
 801ea60:	20095718 	.word	0x20095718
 801ea64:	20000ec0 	.word	0x20000ec0
 801ea68:	2005192c 	.word	0x2005192c
 801ea6c:	20009d12 	.word	0x20009d12
 801ea70:	2000e52c 	.word	0x2000e52c
 801ea74:	20009d20 	.word	0x20009d20
 801ea78:	20051930 	.word	0x20051930
 801ea7c:	2000c52c 	.word	0x2000c52c
 801ea80:	2000d52c 	.word	0x2000d52c
 801ea84:	20000ec1 	.word	0x20000ec1
 801ea88:	20005718 	.word	0x20005718
 801ea8c:	200905b4 	.word	0x200905b4
 801ea90:	2000022a 	.word	0x2000022a
 801ea94:	20000ebd 	.word	0x20000ebd
 801ea98:	200056fa 	.word	0x200056fa
 801ea9c:	20009a1e 	.word	0x20009a1e
 801eaa0:	20095a90 	.word	0x20095a90
 801eaa4:	20055941 	.word	0x20055941

0801eaa8 <_Error_Handler>:
  /* USER CODE END USART3_Init 2 */

}

void _Error_Handler(char *file, int line)
{
 801eaa8:	e7fe      	b.n	801eaa8 <_Error_Handler>
	...

0801eaac <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 801eaac:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 801eaae:	4c06      	ldr	r4, [pc, #24]	; (801eac8 <SD_CheckStatus.isra.0+0x1c>)
 801eab0:	2301      	movs	r3, #1
 801eab2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801eab4:	f7fc ff46 	bl	801b944 <BSP_SD_GetCardState>
 801eab8:	4623      	mov	r3, r4
 801eaba:	b918      	cbnz	r0, 801eac4 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 801eabc:	7822      	ldrb	r2, [r4, #0]
 801eabe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801eac2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 801eac4:	7818      	ldrb	r0, [r3, #0]
}
 801eac6:	bd10      	pop	{r4, pc}
 801eac8:	20000ec3 	.word	0x20000ec3

0801eacc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801eacc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801eace:	4c05      	ldr	r4, [pc, #20]	; (801eae4 <SD_initialize+0x18>)
 801ead0:	2301      	movs	r3, #1
 801ead2:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801ead4:	f7fc fefe 	bl	801b8d4 <BSP_SD_Init>
 801ead8:	b910      	cbnz	r0, 801eae0 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 801eada:	f7ff ffe7 	bl	801eaac <SD_CheckStatus.isra.0>
 801eade:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801eae0:	7820      	ldrb	r0, [r4, #0]
}
 801eae2:	bd10      	pop	{r4, pc}
 801eae4:	20000ec3 	.word	0x20000ec3

0801eae8 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 801eae8:	f7ff bfe0 	b.w	801eaac <SD_CheckStatus.isra.0>

0801eaec <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801eaec:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801eaee:	4c16      	ldr	r4, [pc, #88]	; (801eb48 <SD_read+0x5c>)
{
 801eaf0:	4608      	mov	r0, r1
 801eaf2:	4611      	mov	r1, r2
  ReadStatus = 0;
 801eaf4:	2200      	movs	r2, #0
 801eaf6:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801eaf8:	461a      	mov	r2, r3
 801eafa:	f7fc ff07 	bl	801b90c <BSP_SD_ReadBlocks_DMA>
 801eafe:	b108      	cbz	r0, 801eb04 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 801eb00:	2001      	movs	r0, #1
 801eb02:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 801eb04:	f7e2 fa8c 	bl	8001020 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801eb08:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801eb0c:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801eb0e:	6823      	ldr	r3, [r4, #0]
 801eb10:	b19b      	cbz	r3, 801eb3a <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 801eb12:	6823      	ldr	r3, [r4, #0]
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d0f3      	beq.n	801eb00 <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 801eb18:	2300      	movs	r3, #0
 801eb1a:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801eb1c:	f7e2 fa80 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801eb20:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801eb24:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801eb26:	f7e2 fa7b 	bl	8001020 <HAL_GetTick>
 801eb2a:	1b40      	subs	r0, r0, r5
 801eb2c:	42a0      	cmp	r0, r4
 801eb2e:	d8e7      	bhi.n	801eb00 <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801eb30:	f7fc ff08 	bl	801b944 <BSP_SD_GetCardState>
 801eb34:	2800      	cmp	r0, #0
 801eb36:	d1f6      	bne.n	801eb26 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 801eb38:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801eb3a:	f7e2 fa71 	bl	8001020 <HAL_GetTick>
 801eb3e:	1b80      	subs	r0, r0, r6
 801eb40:	42a8      	cmp	r0, r5
 801eb42:	d9e4      	bls.n	801eb0e <SD_read+0x22>
 801eb44:	e7e5      	b.n	801eb12 <SD_read+0x26>
 801eb46:	bf00      	nop
 801eb48:	200905bc 	.word	0x200905bc

0801eb4c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801eb4c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 801eb4e:	4c16      	ldr	r4, [pc, #88]	; (801eba8 <SD_write+0x5c>)
{
 801eb50:	4608      	mov	r0, r1
 801eb52:	4611      	mov	r1, r2
  WriteStatus = 0;
 801eb54:	2200      	movs	r2, #0
 801eb56:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801eb58:	461a      	mov	r2, r3
 801eb5a:	f7fc fee5 	bl	801b928 <BSP_SD_WriteBlocks_DMA>
 801eb5e:	b108      	cbz	r0, 801eb64 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 801eb60:	2001      	movs	r0, #1
 801eb62:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 801eb64:	f7e2 fa5c 	bl	8001020 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801eb68:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801eb6c:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801eb6e:	6823      	ldr	r3, [r4, #0]
 801eb70:	b19b      	cbz	r3, 801eb9a <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 801eb72:	6823      	ldr	r3, [r4, #0]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d0f3      	beq.n	801eb60 <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 801eb78:	2300      	movs	r3, #0
 801eb7a:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801eb7c:	f7e2 fa50 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801eb80:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801eb84:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801eb86:	f7e2 fa4b 	bl	8001020 <HAL_GetTick>
 801eb8a:	1b40      	subs	r0, r0, r5
 801eb8c:	42a0      	cmp	r0, r4
 801eb8e:	d8e7      	bhi.n	801eb60 <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801eb90:	f7fc fed8 	bl	801b944 <BSP_SD_GetCardState>
 801eb94:	2800      	cmp	r0, #0
 801eb96:	d1f6      	bne.n	801eb86 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 801eb98:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801eb9a:	f7e2 fa41 	bl	8001020 <HAL_GetTick>
 801eb9e:	1b80      	subs	r0, r0, r6
 801eba0:	42a8      	cmp	r0, r5
 801eba2:	d9e4      	bls.n	801eb6e <SD_write+0x22>
 801eba4:	e7e5      	b.n	801eb72 <SD_write+0x26>
 801eba6:	bf00      	nop
 801eba8:	200905c0 	.word	0x200905c0

0801ebac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801ebac:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801ebae:	4b12      	ldr	r3, [pc, #72]	; (801ebf8 <SD_ioctl+0x4c>)
 801ebb0:	781b      	ldrb	r3, [r3, #0]
 801ebb2:	07db      	lsls	r3, r3, #31
{
 801ebb4:	b08a      	sub	sp, #40	; 0x28
 801ebb6:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801ebb8:	d41b      	bmi.n	801ebf2 <SD_ioctl+0x46>

  switch (cmd)
 801ebba:	2903      	cmp	r1, #3
 801ebbc:	d803      	bhi.n	801ebc6 <SD_ioctl+0x1a>
 801ebbe:	e8df f001 	tbb	[pc, r1]
 801ebc2:	0510      	.short	0x0510
 801ebc4:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 801ebc6:	2004      	movs	r0, #4
  }

  return res;
}
 801ebc8:	b00a      	add	sp, #40	; 0x28
 801ebca:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801ebcc:	a801      	add	r0, sp, #4
 801ebce:	f7fc fec3 	bl	801b958 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801ebd2:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801ebd4:	6023      	str	r3, [r4, #0]
 801ebd6:	e004      	b.n	801ebe2 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 801ebd8:	a801      	add	r0, sp, #4
 801ebda:	f7fc febd 	bl	801b958 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801ebde:	9b08      	ldr	r3, [sp, #32]
 801ebe0:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 801ebe2:	2000      	movs	r0, #0
 801ebe4:	e7f0      	b.n	801ebc8 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 801ebe6:	a801      	add	r0, sp, #4
 801ebe8:	f7fc feb6 	bl	801b958 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801ebec:	9b08      	ldr	r3, [sp, #32]
 801ebee:	0a5b      	lsrs	r3, r3, #9
 801ebf0:	e7f0      	b.n	801ebd4 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801ebf2:	2003      	movs	r0, #3
 801ebf4:	e7e8      	b.n	801ebc8 <SD_ioctl+0x1c>
 801ebf6:	bf00      	nop
 801ebf8:	20000ec3 	.word	0x20000ec3

0801ebfc <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ebfc:	4b21      	ldr	r3, [pc, #132]	; (801ec84 <HAL_MspInit+0x88>)
{
 801ebfe:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ec00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ec02:	f042 0201 	orr.w	r2, r2, #1
 801ec06:	661a      	str	r2, [r3, #96]	; 0x60
 801ec08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ec0a:	f002 0201 	and.w	r2, r2, #1
 801ec0e:	9200      	str	r2, [sp, #0]
 801ec10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ec12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ec14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801ec18:	659a      	str	r2, [r3, #88]	; 0x58
 801ec1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ec1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ec20:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801ec22:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 801ec24:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801ec26:	f7e2 fea9 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 801ec2a:	2200      	movs	r2, #0
 801ec2c:	4611      	mov	r1, r2
 801ec2e:	f06f 000b 	mvn.w	r0, #11
 801ec32:	f7e2 feb5 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 801ec36:	2200      	movs	r2, #0
 801ec38:	4611      	mov	r1, r2
 801ec3a:	f06f 000a 	mvn.w	r0, #10
 801ec3e:	f7e2 feaf 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801ec42:	2200      	movs	r2, #0
 801ec44:	4611      	mov	r1, r2
 801ec46:	f06f 0009 	mvn.w	r0, #9
 801ec4a:	f7e2 fea9 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801ec4e:	2200      	movs	r2, #0
 801ec50:	4611      	mov	r1, r2
 801ec52:	f06f 0004 	mvn.w	r0, #4
 801ec56:	f7e2 fea3 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 801ec5a:	2200      	movs	r2, #0
 801ec5c:	4611      	mov	r1, r2
 801ec5e:	f06f 0003 	mvn.w	r0, #3
 801ec62:	f7e2 fe9d 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 801ec66:	2200      	movs	r2, #0
 801ec68:	4611      	mov	r1, r2
 801ec6a:	f06f 0001 	mvn.w	r0, #1
 801ec6e:	f7e2 fe97 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801ec72:	2200      	movs	r2, #0
 801ec74:	4611      	mov	r1, r2
 801ec76:	f04f 30ff 	mov.w	r0, #4294967295
 801ec7a:	f7e2 fe91 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ec7e:	b003      	add	sp, #12
 801ec80:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec84:	40021000 	.word	0x40021000

0801ec88 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801ec88:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 801ec8a:	6802      	ldr	r2, [r0, #0]
 801ec8c:	4b31      	ldr	r3, [pc, #196]	; (801ed54 <HAL_LTDC_MspInit+0xcc>)
 801ec8e:	429a      	cmp	r2, r3
{
 801ec90:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 801ec92:	d15d      	bne.n	801ed50 <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801ec94:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ec98:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 801ec9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801ec9c:	482e      	ldr	r0, [pc, #184]	; (801ed58 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 801ec9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801eca2:	661a      	str	r2, [r3, #96]	; 0x60
 801eca4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801eca6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801ecaa:	9200      	str	r2, [sp, #0]
 801ecac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801ecae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ecb0:	f042 0210 	orr.w	r2, r2, #16
 801ecb4:	64da      	str	r2, [r3, #76]	; 0x4c
 801ecb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ecb8:	f002 0210 	and.w	r2, r2, #16
 801ecbc:	9201      	str	r2, [sp, #4]
 801ecbe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801ecc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ecc2:	f042 0202 	orr.w	r2, r2, #2
 801ecc6:	64da      	str	r2, [r3, #76]	; 0x4c
 801ecc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ecca:	f002 0202 	and.w	r2, r2, #2
 801ecce:	9202      	str	r2, [sp, #8]
 801ecd0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801ecd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ecd4:	f042 0220 	orr.w	r2, r2, #32
 801ecd8:	64da      	str	r2, [r3, #76]	; 0x4c
 801ecda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ecdc:	f002 0220 	and.w	r2, r2, #32
 801ece0:	9203      	str	r2, [sp, #12]
 801ece2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801ece4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ece6:	f042 0208 	orr.w	r2, r2, #8
 801ecea:	64da      	str	r2, [r3, #76]	; 0x4c
 801ecec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ecee:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801ecf0:	f003 0308 	and.w	r3, r3, #8
 801ecf4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ecf6:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801ecf8:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801ecfa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ecfc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801ecfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801ed02:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801ed04:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ed06:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801ed08:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801ed0a:	f7e3 faf5 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ed0e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ed10:	a905      	add	r1, sp, #20
 801ed12:	4812      	ldr	r0, [pc, #72]	; (801ed5c <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ed14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ed16:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ed18:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ed1a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801ed1c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ed1e:	f7e3 faeb 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801ed22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ed26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ed28:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801ed2a:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ed2c:	480c      	ldr	r0, [pc, #48]	; (801ed60 <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801ed2e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ed30:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ed32:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ed34:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ed36:	f7e3 fadf 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ed3a:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ed3e:	a905      	add	r1, sp, #20
 801ed40:	4808      	ldr	r0, [pc, #32]	; (801ed64 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ed42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ed44:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ed46:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ed48:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801ed4a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ed4c:	f7e3 fad4 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801ed50:	b00a      	add	sp, #40	; 0x28
 801ed52:	bd70      	pop	{r4, r5, r6, pc}
 801ed54:	40016800 	.word	0x40016800
 801ed58:	48001000 	.word	0x48001000
 801ed5c:	48000400 	.word	0x48000400
 801ed60:	48001400 	.word	0x48001400
 801ed64:	48000c00 	.word	0x48000c00

0801ed68 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801ed68:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 801ed6a:	6802      	ldr	r2, [r0, #0]
 801ed6c:	4b13      	ldr	r3, [pc, #76]	; (801edbc <HAL_SPI_MspInit+0x54>)
 801ed6e:	429a      	cmp	r2, r3
{
 801ed70:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 801ed72:	d121      	bne.n	801edb8 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801ed74:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ed78:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 801ed7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ed7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ed80:	661a      	str	r2, [r3, #96]	; 0x60
 801ed82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ed84:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 801ed86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ed8a:	9300      	str	r3, [sp, #0]
 801ed8c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 801ed8e:	2342      	movs	r3, #66	; 0x42
 801ed90:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ed92:	2302      	movs	r3, #2
 801ed94:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ed96:	2303      	movs	r3, #3
 801ed98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ed9a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801ed9c:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ed9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801eda2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801eda4:	f7e3 faa8 	bl	80022f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801eda8:	2023      	movs	r0, #35	; 0x23
 801edaa:	4622      	mov	r2, r4
 801edac:	4621      	mov	r1, r4
 801edae:	f7e2 fdf7 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 801edb2:	2023      	movs	r0, #35	; 0x23
 801edb4:	f7e2 fe28 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801edb8:	b006      	add	sp, #24
 801edba:	bd10      	pop	{r4, pc}
 801edbc:	40013000 	.word	0x40013000

0801edc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801edc0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801edc2:	2214      	movs	r2, #20
{
 801edc4:	b08a      	sub	sp, #40	; 0x28
 801edc6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801edc8:	2100      	movs	r1, #0
 801edca:	eb0d 0002 	add.w	r0, sp, r2
 801edce:	f000 fd2c 	bl	801f82a <memset>
  if(huart->Instance==LPUART1)
 801edd2:	6823      	ldr	r3, [r4, #0]
 801edd4:	4a22      	ldr	r2, [pc, #136]	; (801ee60 <HAL_UART_MspInit+0xa0>)
 801edd6:	4293      	cmp	r3, r2
 801edd8:	d11f      	bne.n	801ee1a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801edda:	4b22      	ldr	r3, [pc, #136]	; (801ee64 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801eddc:	4822      	ldr	r0, [pc, #136]	; (801ee68 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801edde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ede0:	f042 0201 	orr.w	r2, r2, #1
 801ede4:	65da      	str	r2, [r3, #92]	; 0x5c
 801ede6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ede8:	f002 0201 	and.w	r2, r2, #1
 801edec:	9201      	str	r2, [sp, #4]
 801edee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801edf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801edf2:	f042 0204 	orr.w	r2, r2, #4
 801edf6:	64da      	str	r2, [r3, #76]	; 0x4c
 801edf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801edfa:	f003 0304 	and.w	r3, r3, #4
 801edfe:	9302      	str	r3, [sp, #8]
 801ee00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801ee02:	2303      	movs	r3, #3
 801ee04:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ee06:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ee08:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801ee0a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ee0c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801ee0e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ee10:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ee12:	f7e3 fa71 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 801ee16:	b00a      	add	sp, #40	; 0x28
 801ee18:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 801ee1a:	4a14      	ldr	r2, [pc, #80]	; (801ee6c <HAL_UART_MspInit+0xac>)
 801ee1c:	4293      	cmp	r3, r2
 801ee1e:	d1fa      	bne.n	801ee16 <HAL_UART_MspInit+0x56>
    __HAL_RCC_USART3_CLK_ENABLE();
 801ee20:	4b10      	ldr	r3, [pc, #64]	; (801ee64 <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ee22:	4813      	ldr	r0, [pc, #76]	; (801ee70 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 801ee24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ee26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801ee2a:	659a      	str	r2, [r3, #88]	; 0x58
 801ee2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ee2e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 801ee32:	9203      	str	r2, [sp, #12]
 801ee34:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801ee36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ee38:	f042 0202 	orr.w	r2, r2, #2
 801ee3c:	64da      	str	r2, [r3, #76]	; 0x4c
 801ee3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ee40:	f003 0302 	and.w	r3, r3, #2
 801ee44:	9304      	str	r3, [sp, #16]
 801ee46:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801ee48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801ee4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ee4e:	2302      	movs	r3, #2
 801ee50:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ee52:	2303      	movs	r3, #3
 801ee54:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801ee56:	2307      	movs	r3, #7
 801ee58:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ee5a:	a905      	add	r1, sp, #20
 801ee5c:	e7d9      	b.n	801ee12 <HAL_UART_MspInit+0x52>
 801ee5e:	bf00      	nop
 801ee60:	40008000 	.word	0x40008000
 801ee64:	40021000 	.word	0x40021000
 801ee68:	48000800 	.word	0x48000800
 801ee6c:	40004800 	.word	0x40004800
 801ee70:	48000400 	.word	0x48000400

0801ee74 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==LPUART1)
 801ee74:	6803      	ldr	r3, [r0, #0]
 801ee76:	4a0d      	ldr	r2, [pc, #52]	; (801eeac <HAL_UART_MspDeInit+0x38>)
 801ee78:	4293      	cmp	r3, r2
 801ee7a:	d109      	bne.n	801ee90 <HAL_UART_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801ee7c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801ee80:	480b      	ldr	r0, [pc, #44]	; (801eeb0 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801ee82:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801ee84:	f023 0301 	bic.w	r3, r3, #1
 801ee88:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801ee8a:	2103      	movs	r1, #3

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801ee8c:	f7e3 bb0c 	b.w	80024a8 <HAL_GPIO_DeInit>
  else if(huart->Instance==USART3)
 801ee90:	4a08      	ldr	r2, [pc, #32]	; (801eeb4 <HAL_UART_MspDeInit+0x40>)
 801ee92:	4293      	cmp	r3, r2
 801ee94:	d109      	bne.n	801eeaa <HAL_UART_MspDeInit+0x36>
    __HAL_RCC_USART3_CLK_DISABLE();
 801ee96:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801ee9a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 801ee9e:	6d93      	ldr	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801eea0:	4805      	ldr	r0, [pc, #20]	; (801eeb8 <HAL_UART_MspDeInit+0x44>)
    __HAL_RCC_USART3_CLK_DISABLE();
 801eea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801eea6:	6593      	str	r3, [r2, #88]	; 0x58
 801eea8:	e7f0      	b.n	801ee8c <HAL_UART_MspDeInit+0x18>
 801eeaa:	4770      	bx	lr
 801eeac:	40008000 	.word	0x40008000
 801eeb0:	48000800 	.word	0x48000800
 801eeb4:	40004800 	.word	0x40004800
 801eeb8:	48000400 	.word	0x48000400

0801eebc <HAL_ADC_MspInit>:
}



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801eebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801eebe:	6802      	ldr	r2, [r0, #0]
 801eec0:	4b0e      	ldr	r3, [pc, #56]	; (801eefc <HAL_ADC_MspInit+0x40>)
 801eec2:	429a      	cmp	r2, r3
 801eec4:	d116      	bne.n	801eef4 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801eec6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 801eeca:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801eece:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 801eed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801eed2:	480b      	ldr	r0, [pc, #44]	; (801ef00 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 801eed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801eed8:	64da      	str	r2, [r3, #76]	; 0x4c
 801eeda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801eedc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801eee0:	9300      	str	r3, [sp, #0]
 801eee2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801eee4:	2304      	movs	r3, #4
 801eee6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801eee8:	230b      	movs	r3, #11
 801eeea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801eeec:	2300      	movs	r3, #0
 801eeee:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801eef0:	f7e3 fa02 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801eef4:	b007      	add	sp, #28
 801eef6:	f85d fb04 	ldr.w	pc, [sp], #4
 801eefa:	bf00      	nop
 801eefc:	50040000 	.word	0x50040000
 801ef00:	48000800 	.word	0x48000800

0801ef04 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ef04:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 801ef06:	6803      	ldr	r3, [r0, #0]
 801ef08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 801ef0c:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 801ef0e:	d112      	bne.n	801ef36 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ef10:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ef14:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ef16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ef18:	f042 0201 	orr.w	r2, r2, #1
 801ef1c:	659a      	str	r2, [r3, #88]	; 0x58
 801ef1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ef20:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ef22:	f003 0301 	and.w	r3, r3, #1
 801ef26:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ef28:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 801ef2a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801ef2c:	f7e2 fd38 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801ef30:	201c      	movs	r0, #28
 801ef32:	f7e2 fd69 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 801ef36:	6822      	ldr	r2, [r4, #0]
 801ef38:	4b20      	ldr	r3, [pc, #128]	; (801efbc <HAL_TIM_Base_MspInit+0xb8>)
 801ef3a:	429a      	cmp	r2, r3
 801ef3c:	d10d      	bne.n	801ef5a <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 801ef3e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801ef42:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 801ef44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ef46:	f042 0220 	orr.w	r2, r2, #32
 801ef4a:	659a      	str	r2, [r3, #88]	; 0x58
 801ef4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ef4e:	f003 0320 	and.w	r3, r3, #32
 801ef52:	9301      	str	r3, [sp, #4]
 801ef54:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801ef56:	f7e2 fd57 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 801ef5a:	6822      	ldr	r2, [r4, #0]
 801ef5c:	4b18      	ldr	r3, [pc, #96]	; (801efc0 <HAL_TIM_Base_MspInit+0xbc>)
 801ef5e:	429a      	cmp	r2, r3
 801ef60:	d112      	bne.n	801ef88 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801ef62:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801ef66:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 801ef68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ef6a:	f042 0204 	orr.w	r2, r2, #4
 801ef6e:	659a      	str	r2, [r3, #88]	; 0x58
 801ef70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801ef72:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 801ef74:	f003 0304 	and.w	r3, r3, #4
 801ef78:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801ef7a:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 801ef7c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801ef7e:	f7e2 fd0f 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801ef82:	201e      	movs	r0, #30
 801ef84:	f7e2 fd40 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 801ef88:	6822      	ldr	r2, [r4, #0]
 801ef8a:	4b0e      	ldr	r3, [pc, #56]	; (801efc4 <HAL_TIM_Base_MspInit+0xc0>)
 801ef8c:	429a      	cmp	r2, r3
 801ef8e:	d112      	bne.n	801efb6 <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801ef90:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801ef94:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 801ef96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ef98:	f042 0210 	orr.w	r2, r2, #16
 801ef9c:	659a      	str	r2, [r3, #88]	; 0x58
 801ef9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801efa0:	f003 0310 	and.w	r3, r3, #16
 801efa4:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801efa6:	2200      	movs	r2, #0
 801efa8:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 801efaa:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801efac:	f7e2 fcf8 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801efb0:	2036      	movs	r0, #54	; 0x36
 801efb2:	f7e2 fd29 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801efb6:	b004      	add	sp, #16
 801efb8:	bd10      	pop	{r4, pc}
 801efba:	bf00      	nop
 801efbc:	40001400 	.word	0x40001400
 801efc0:	40000800 	.word	0x40000800
 801efc4:	40001000 	.word	0x40001000

0801efc8 <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 801efc8:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 801efca:	4b0d      	ldr	r3, [pc, #52]	; (801f000 <HAL_TIM_OC_MspInit+0x38>)
 801efcc:	6802      	ldr	r2, [r0, #0]
 801efce:	429a      	cmp	r2, r3
 801efd0:	d112      	bne.n	801eff8 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 801efd2:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801efd6:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 801efd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801efda:	f042 0208 	orr.w	r2, r2, #8
 801efde:	659a      	str	r2, [r3, #88]	; 0x58
 801efe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801efe2:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 801efe4:	f003 0308 	and.w	r3, r3, #8
 801efe8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801efea:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 801efec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801efee:	f7e2 fcd7 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801eff2:	2032      	movs	r0, #50	; 0x32
 801eff4:	f7e2 fd08 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801eff8:	b003      	add	sp, #12
 801effa:	f85d fb04 	ldr.w	pc, [sp], #4
 801effe:	bf00      	nop
 801f000:	40000c00 	.word	0x40000c00

0801f004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801f004:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 801f006:	6802      	ldr	r2, [r0, #0]
 801f008:	4b19      	ldr	r3, [pc, #100]	; (801f070 <HAL_TIM_MspPostInit+0x6c>)
 801f00a:	429a      	cmp	r2, r3
{
 801f00c:	b086      	sub	sp, #24
 801f00e:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 801f010:	d10c      	bne.n	801f02c <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801f012:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f014:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801f016:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f018:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f01a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f01c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f020:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f022:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f024:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801f026:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f028:	f7e3 f966 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 801f02c:	6822      	ldr	r2, [r4, #0]
 801f02e:	4b11      	ldr	r3, [pc, #68]	; (801f074 <HAL_TIM_MspPostInit+0x70>)
 801f030:	429a      	cmp	r2, r3
 801f032:	d11a      	bne.n	801f06a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801f034:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801f038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f03a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f03e:	64da      	str	r2, [r3, #76]	; 0x4c
 801f040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f046:	9300      	str	r3, [sp, #0]
 801f048:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 801f04a:	f7e4 fe33 	bl	8003cb4 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801f04e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f052:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f054:	2302      	movs	r3, #2
 801f056:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f058:	2300      	movs	r3, #0
 801f05a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f05c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f05e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801f060:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f062:	4805      	ldr	r0, [pc, #20]	; (801f078 <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801f064:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f066:	f7e3 f947 	bl	80022f8 <HAL_GPIO_Init>
	}
}
 801f06a:	b006      	add	sp, #24
 801f06c:	bd10      	pop	{r4, pc}
 801f06e:	bf00      	nop
 801f070:	40000c00 	.word	0x40000c00
 801f074:	40014000 	.word	0x40014000
 801f078:	48001800 	.word	0x48001800

0801f07c <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 801f07c:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 801f07e:	4b0d      	ldr	r3, [pc, #52]	; (801f0b4 <HAL_DMA2D_MspInit+0x38>)
 801f080:	6802      	ldr	r2, [r0, #0]
 801f082:	429a      	cmp	r2, r3
 801f084:	d112      	bne.n	801f0ac <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f086:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f08a:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f08c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f08e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801f092:	649a      	str	r2, [r3, #72]	; 0x48
 801f094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f096:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f09c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f09e:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f0a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f0a2:	f7e2 fc7d 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801f0a6:	205a      	movs	r0, #90	; 0x5a
 801f0a8:	f7e2 fcae 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 801f0ac:	b003      	add	sp, #12
 801f0ae:	f85d fb04 	ldr.w	pc, [sp], #4
 801f0b2:	bf00      	nop
 801f0b4:	4002b000 	.word	0x4002b000

0801f0b8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801f0b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 801f0ba:	6802      	ldr	r2, [r0, #0]
 801f0bc:	4b17      	ldr	r3, [pc, #92]	; (801f11c <HAL_I2C_MspInit+0x64>)
 801f0be:	429a      	cmp	r2, r3
 801f0c0:	d128      	bne.n	801f114 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801f0c2:	23c0      	movs	r3, #192	; 0xc0
 801f0c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801f0c6:	2312      	movs	r3, #18
 801f0c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801f0ca:	2301      	movs	r3, #1
 801f0cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f0ce:	2303      	movs	r3, #3
 801f0d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801f0d2:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801f0d4:	eb0d 0103 	add.w	r1, sp, r3
 801f0d8:	4811      	ldr	r0, [pc, #68]	; (801f120 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801f0da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801f0dc:	f7e3 f90c 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f0e0:	4b10      	ldr	r3, [pc, #64]	; (801f124 <HAL_I2C_MspInit+0x6c>)
 801f0e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f0e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801f0e8:	659a      	str	r2, [r3, #88]	; 0x58
 801f0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f0ec:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f0ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f0f2:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f0f4:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f0f6:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f0f8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f0fa:	f7e2 fc51 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801f0fe:	201f      	movs	r0, #31
 801f100:	f7e2 fc82 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 801f104:	2200      	movs	r2, #0
 801f106:	2020      	movs	r0, #32
 801f108:	4611      	mov	r1, r2
 801f10a:	f7e2 fc49 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 801f10e:	2020      	movs	r0, #32
 801f110:	f7e2 fc7a 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801f114:	b007      	add	sp, #28
 801f116:	f85d fb04 	ldr.w	pc, [sp], #4
 801f11a:	bf00      	nop
 801f11c:	40005400 	.word	0x40005400
 801f120:	48000400 	.word	0x48000400
 801f124:	40021000 	.word	0x40021000

0801f128 <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801f128:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 801f12a:	6802      	ldr	r2, [r0, #0]
 801f12c:	4b18      	ldr	r3, [pc, #96]	; (801f190 <HAL_SD_MspInit+0x68>)
 801f12e:	429a      	cmp	r2, r3
{
 801f130:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 801f132:	d12b      	bne.n	801f18c <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801f134:	4b17      	ldr	r3, [pc, #92]	; (801f194 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f136:	4818      	ldr	r0, [pc, #96]	; (801f198 <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801f138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f13a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801f13e:	64da      	str	r2, [r3, #76]	; 0x4c
 801f140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f146:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f148:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801f14a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f14c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f14e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f152:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f154:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801f156:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f158:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f15a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f15c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f15e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801f160:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f162:	f7e3 f8c9 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f166:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f168:	eb0d 0103 	add.w	r1, sp, r3
 801f16c:	480b      	ldr	r0, [pc, #44]	; (801f19c <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f16e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f170:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f172:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f174:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801f176:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f178:	f7e3 f8be 	bl	80022f8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 801f17c:	2031      	movs	r0, #49	; 0x31
 801f17e:	4622      	mov	r2, r4
 801f180:	4621      	mov	r1, r4
 801f182:	f7e2 fc0d 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801f186:	2031      	movs	r0, #49	; 0x31
 801f188:	f7e2 fc3e 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 801f18c:	b007      	add	sp, #28
 801f18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f190:	50062400 	.word	0x50062400
 801f194:	40021000 	.word	0x40021000
 801f198:	48000800 	.word	0x48000800
 801f19c:	48000c00 	.word	0x48000c00

0801f1a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 801f1a0:	6802      	ldr	r2, [r0, #0]
 801f1a2:	4b08      	ldr	r3, [pc, #32]	; (801f1c4 <HAL_TIM_PWM_MspInit+0x24>)
 801f1a4:	429a      	cmp	r2, r3
{
 801f1a6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 801f1a8:	d10a      	bne.n	801f1c0 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 801f1aa:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801f1ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f1b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801f1b4:	661a      	str	r2, [r3, #96]	; 0x60
 801f1b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f1b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f1bc:	9301      	str	r3, [sp, #4]
 801f1be:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 801f1c0:	b002      	add	sp, #8
 801f1c2:	4770      	bx	lr
 801f1c4:	40014000 	.word	0x40014000

0801f1c8 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 801f1c8:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 801f1ca:	6802      	ldr	r2, [r0, #0]
 801f1cc:	4b0b      	ldr	r3, [pc, #44]	; (801f1fc <HAL_SD_MspDeInit+0x34>)
 801f1ce:	429a      	cmp	r2, r3
 801f1d0:	d112      	bne.n	801f1f8 <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801f1d2:	4a0b      	ldr	r2, [pc, #44]	; (801f200 <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f1d4:	480b      	ldr	r0, [pc, #44]	; (801f204 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801f1d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801f1d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801f1dc:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f1de:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 801f1e2:	f7e3 f961 	bl	80024a8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 801f1e6:	4808      	ldr	r0, [pc, #32]	; (801f208 <HAL_SD_MspDeInit+0x40>)
 801f1e8:	2104      	movs	r1, #4
 801f1ea:	f7e3 f95d 	bl	80024a8 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801f1ee:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 801f1f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801f1f4:	f7e2 bc14 	b.w	8001a20 <HAL_NVIC_DisableIRQ>
 801f1f8:	bd08      	pop	{r3, pc}
 801f1fa:	bf00      	nop
 801f1fc:	50062400 	.word	0x50062400
 801f200:	40021000 	.word	0x40021000
 801f204:	48000800 	.word	0x48000800
 801f208:	48000c00 	.word	0x48000c00

0801f20c <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 801f20c:	4801      	ldr	r0, [pc, #4]	; (801f214 <DMA1_Channel1_IRQHandler+0x8>)
 801f20e:	f7e2 bcdd 	b.w	8001bcc <HAL_DMA_IRQHandler>
 801f212:	bf00      	nop
 801f214:	20095ad4 	.word	0x20095ad4

0801f218 <NMI_Handler>:
 801f218:	4770      	bx	lr

0801f21a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 801f21a:	e7fe      	b.n	801f21a <HardFault_Handler>

0801f21c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 801f21c:	e7fe      	b.n	801f21c <MemManage_Handler>

0801f21e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 801f21e:	e7fe      	b.n	801f21e <BusFault_Handler>

0801f220 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 801f220:	e7fe      	b.n	801f220 <UsageFault_Handler>

0801f222 <SVC_Handler>:
 801f222:	4770      	bx	lr

0801f224 <DebugMon_Handler>:
 801f224:	4770      	bx	lr

0801f226 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 801f226:	4770      	bx	lr

0801f228 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 801f228:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801f22a:	f7e1 fef1 	bl	8001010 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801f22e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 801f232:	f7e2 bc34 	b.w	8001a9e <HAL_SYSTICK_IRQHandler>
	...

0801f238 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 801f238:	4801      	ldr	r0, [pc, #4]	; (801f240 <SPI1_IRQHandler+0x8>)
 801f23a:	f7e6 bb3f 	b.w	80058bc <HAL_SPI_IRQHandler>
 801f23e:	bf00      	nop
 801f240:	20095bac 	.word	0x20095bac

0801f244 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801f244:	4801      	ldr	r0, [pc, #4]	; (801f24c <TIM5_IRQHandler+0x8>)
 801f246:	f7e6 bd1a 	b.w	8005c7e <HAL_TIM_IRQHandler>
 801f24a:	bf00      	nop
 801f24c:	200958d4 	.word	0x200958d4

0801f250 <USART3_IRQHandler>:



void USART3_IRQHandler(void)
{
	HAL_UART_IRQHandler(&huart3);
 801f250:	4801      	ldr	r0, [pc, #4]	; (801f258 <USART3_IRQHandler+0x8>)
 801f252:	f7e7 b9b3 	b.w	80065bc <HAL_UART_IRQHandler>
 801f256:	bf00      	nop
 801f258:	20095718 	.word	0x20095718

0801f25c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 801f25c:	4801      	ldr	r0, [pc, #4]	; (801f264 <OTG_FS_IRQHandler+0x8>)
 801f25e:	f7e4 b895 	b.w	800338c <HAL_PCD_IRQHandler>
 801f262:	bf00      	nop
 801f264:	20095f44 	.word	0x20095f44

0801f268 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 801f268:	4801      	ldr	r0, [pc, #4]	; (801f270 <I2C1_EV_IRQHandler+0x8>)
 801f26a:	f7e3 bc1b 	b.w	8002aa4 <HAL_I2C_EV_IRQHandler>
 801f26e:	bf00      	nop
 801f270:	200957a0 	.word	0x200957a0

0801f274 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 801f274:	4801      	ldr	r0, [pc, #4]	; (801f27c <I2C1_ER_IRQHandler+0x8>)
 801f276:	f7e3 be2b 	b.w	8002ed0 <HAL_I2C_ER_IRQHandler>
 801f27a:	bf00      	nop
 801f27c:	200957a0 	.word	0x200957a0

0801f280 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 801f280:	4801      	ldr	r0, [pc, #4]	; (801f288 <SDMMC1_IRQHandler+0x8>)
 801f282:	f7e5 bdf9 	b.w	8004e78 <HAL_SD_IRQHandler>
 801f286:	bf00      	nop
 801f288:	20095840 	.word	0x20095840

0801f28c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 801f28c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801f28e:	4b0a      	ldr	r3, [pc, #40]	; (801f2b8 <_sbrk+0x2c>)
 801f290:	6819      	ldr	r1, [r3, #0]
{
 801f292:	4602      	mov	r2, r0
	if (heap_end == 0)
 801f294:	b909      	cbnz	r1, 801f29a <_sbrk+0xe>
		heap_end = &end;
 801f296:	4909      	ldr	r1, [pc, #36]	; (801f2bc <_sbrk+0x30>)
 801f298:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 801f29a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 801f29c:	4669      	mov	r1, sp
 801f29e:	4402      	add	r2, r0
 801f2a0:	428a      	cmp	r2, r1
 801f2a2:	d906      	bls.n	801f2b2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801f2a4:	f000 fa8c 	bl	801f7c0 <__errno>
 801f2a8:	230c      	movs	r3, #12
 801f2aa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 801f2ac:	f04f 30ff 	mov.w	r0, #4294967295
 801f2b0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 801f2b2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 801f2b4:	bd08      	pop	{r3, pc}
 801f2b6:	bf00      	nop
 801f2b8:	200905c4 	.word	0x200905c4
 801f2bc:	2009655c 	.word	0x2009655c

0801f2c0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801f2c0:	490f      	ldr	r1, [pc, #60]	; (801f300 <SystemInit+0x40>)
 801f2c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801f2c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801f2ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801f2ce:	4b0d      	ldr	r3, [pc, #52]	; (801f304 <SystemInit+0x44>)
 801f2d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801f2d2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 801f2d4:	f042 0201 	orr.w	r2, r2, #1
 801f2d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 801f2da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801f2dc:	681a      	ldr	r2, [r3, #0]
 801f2de:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801f2e2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801f2e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801f2e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f2ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801f2ee:	681a      	ldr	r2, [r3, #0]
 801f2f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801f2f4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801f2f6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801f2f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f2fc:	608b      	str	r3, [r1, #8]
 801f2fe:	4770      	bx	lr
 801f300:	e000ed00 	.word	0xe000ed00
 801f304:	40021000 	.word	0x40021000

0801f308 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f308:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 801f30a:	2200      	movs	r2, #0
 801f30c:	490a      	ldr	r1, [pc, #40]	; (801f338 <MX_USB_DEVICE_Init+0x30>)
 801f30e:	480b      	ldr	r0, [pc, #44]	; (801f33c <MX_USB_DEVICE_Init+0x34>)
 801f310:	f7e8 fe0b 	bl	8007f2a <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 801f314:	490a      	ldr	r1, [pc, #40]	; (801f340 <MX_USB_DEVICE_Init+0x38>)
 801f316:	4809      	ldr	r0, [pc, #36]	; (801f33c <MX_USB_DEVICE_Init+0x34>)
 801f318:	f7e8 fe1c 	bl	8007f54 <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 801f31c:	4909      	ldr	r1, [pc, #36]	; (801f344 <MX_USB_DEVICE_Init+0x3c>)
 801f31e:	4807      	ldr	r0, [pc, #28]	; (801f33c <MX_USB_DEVICE_Init+0x34>)
 801f320:	f7e8 fdfc 	bl	8007f1c <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 801f324:	4805      	ldr	r0, [pc, #20]	; (801f33c <MX_USB_DEVICE_Init+0x34>)
 801f326:	f000 f9ac 	bl	801f682 <USBD_LL_BatteryCharging>
 801f32a:	b120      	cbz	r0, 801f336 <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 801f32c:	4803      	ldr	r0, [pc, #12]	; (801f33c <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f32e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 801f332:	f7e8 be16 	b.w	8007f62 <USBD_Start>
 801f336:	bd08      	pop	{r3, pc}
 801f338:	20000efc 	.word	0x20000efc
 801f33c:	20095ca8 	.word	0x20095ca8
 801f340:	20000020 	.word	0x20000020
 801f344:	20000eec 	.word	0x20000eec

0801f348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f348:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 801f34a:	6803      	ldr	r3, [r0, #0]
 801f34c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801f350:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 801f352:	d133      	bne.n	801f3bc <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801f354:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801f358:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f35a:	2302      	movs	r3, #2
 801f35c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f35e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f360:	4c19      	ldr	r4, [pc, #100]	; (801f3c8 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f362:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f364:	2303      	movs	r3, #3
 801f366:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f368:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f36a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f36c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f370:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f372:	f7e2 ffc1 	bl	80022f8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f376:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801f378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801f37c:	64e3      	str	r3, [r4, #76]	; 0x4c
 801f37e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801f380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801f384:	9301      	str	r3, [sp, #4]
 801f386:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f388:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f38a:	00db      	lsls	r3, r3, #3
 801f38c:	d418      	bmi.n	801f3c0 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f38e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f394:	65a3      	str	r3, [r4, #88]	; 0x58
 801f396:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f39c:	9302      	str	r3, [sp, #8]
 801f39e:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 801f3a0:	f7e4 fc80 	bl	8003ca4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801f3a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f3a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f3aa:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801f3ac:	2200      	movs	r2, #0
 801f3ae:	2043      	movs	r0, #67	; 0x43
 801f3b0:	4611      	mov	r1, r2
 801f3b2:	f7e2 faf5 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f3b6:	2043      	movs	r0, #67	; 0x43
 801f3b8:	f7e2 fb26 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f3bc:	b008      	add	sp, #32
 801f3be:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 801f3c0:	f7e4 fc70 	bl	8003ca4 <HAL_PWREx_EnableVddUSB>
 801f3c4:	e7f2      	b.n	801f3ac <HAL_PCD_MspInit+0x64>
 801f3c6:	bf00      	nop
 801f3c8:	40021000 	.word	0x40021000

0801f3cc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f3cc:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801f3d0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f3d4:	f7e8 bddc 	b.w	8007f90 <USBD_LL_SetupStage>

0801f3d8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f3d8:	231c      	movs	r3, #28
 801f3da:	fb03 0301 	mla	r3, r3, r1, r0
 801f3de:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f3e2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801f3e6:	f7e8 be00 	b.w	8007fea <USBD_LL_DataOutStage>

0801f3ea <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f3ea:	231c      	movs	r3, #28
 801f3ec:	fb03 0301 	mla	r3, r3, r1, r0
 801f3f0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f3f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f3f6:	f7e8 be30 	b.w	800805a <USBD_LL_DataInStage>

0801f3fa <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f3fa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f3fe:	f7e8 bec1 	b.w	8008184 <USBD_LL_SOF>

0801f402 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 801f402:	b510      	push	{r4, lr}
 801f404:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f406:	2101      	movs	r1, #1
 801f408:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f40c:	f7e8 fea8 	bl	8008160 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f410:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801f414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f418:	f7e8 be7b 	b.w	8008112 <USBD_LL_Reset>

0801f41c <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f41c:	6802      	ldr	r2, [r0, #0]
 801f41e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 801f422:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f424:	f043 0301 	orr.w	r3, r3, #1
{
 801f428:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f42a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f42e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f432:	f7e8 fe98 	bl	8008166 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f436:	6a23      	ldr	r3, [r4, #32]
 801f438:	b123      	cbz	r3, 801f444 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f43a:	4a03      	ldr	r2, [pc, #12]	; (801f448 <HAL_PCD_SuspendCallback+0x2c>)
 801f43c:	6913      	ldr	r3, [r2, #16]
 801f43e:	f043 0306 	orr.w	r3, r3, #6
 801f442:	6113      	str	r3, [r2, #16]
 801f444:	bd10      	pop	{r4, pc}
 801f446:	bf00      	nop
 801f448:	e000ed00 	.word	0xe000ed00

0801f44c <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f44c:	6802      	ldr	r2, [r0, #0]
 801f44e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f452:	f023 0301 	bic.w	r3, r3, #1
{
 801f456:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f458:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801f45c:	6a03      	ldr	r3, [r0, #32]
{
 801f45e:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 801f460:	b133      	cbz	r3, 801f470 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f462:	4a06      	ldr	r2, [pc, #24]	; (801f47c <HAL_PCD_ResumeCallback+0x30>)
 801f464:	6913      	ldr	r3, [r2, #16]
 801f466:	f023 0306 	bic.w	r3, r3, #6
 801f46a:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801f46c:	f7fe f8c6 	bl	801d5fc <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f470:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801f474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f478:	f7e8 be7e 	b.w	8008178 <USBD_LL_Resume>
 801f47c:	e000ed00 	.word	0xe000ed00

0801f480 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f480:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f484:	f7e8 be8c 	b.w	80081a0 <USBD_LL_IsoOUTIncomplete>

0801f488 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f488:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f48c:	f7e8 be86 	b.w	800819c <USBD_LL_IsoINIncomplete>

0801f490 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801f490:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f494:	f7e8 be86 	b.w	80081a4 <USBD_LL_DevConnected>

0801f498 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801f498:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f49c:	f7e8 be84 	b.w	80081a8 <USBD_LL_DevDisconnected>

0801f4a0 <USBD_LL_Init>:
{
 801f4a0:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 801f4a2:	7802      	ldrb	r2, [r0, #0]
 801f4a4:	bb4a      	cbnz	r2, 801f4fa <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 801f4a6:	4b16      	ldr	r3, [pc, #88]	; (801f500 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f4a8:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801f4aa:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801f4ae:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f4b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801f4b6:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f4ba:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f4bc:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 801f4be:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f4c0:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801f4c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801f4c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801f4c6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801f4c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801f4ca:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801f4cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f4ce:	f7e3 feca 	bl	8003266 <HAL_PCD_Init>
 801f4d2:	b120      	cbz	r0, 801f4de <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 801f4d4:	f240 116b 	movw	r1, #363	; 0x16b
 801f4d8:	480a      	ldr	r0, [pc, #40]	; (801f504 <USBD_LL_Init+0x64>)
 801f4da:	f7ff fae5 	bl	801eaa8 <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801f4de:	2180      	movs	r1, #128	; 0x80
 801f4e0:	4807      	ldr	r0, [pc, #28]	; (801f500 <USBD_LL_Init+0x60>)
 801f4e2:	f7e4 fb51 	bl	8003b88 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801f4e6:	2240      	movs	r2, #64	; 0x40
 801f4e8:	2100      	movs	r1, #0
 801f4ea:	4805      	ldr	r0, [pc, #20]	; (801f500 <USBD_LL_Init+0x60>)
 801f4ec:	f7e4 fb2b 	bl	8003b46 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801f4f0:	2280      	movs	r2, #128	; 0x80
 801f4f2:	2101      	movs	r1, #1
 801f4f4:	4802      	ldr	r0, [pc, #8]	; (801f500 <USBD_LL_Init+0x60>)
 801f4f6:	f7e4 fb26 	bl	8003b46 <HAL_PCDEx_SetTxFiFo>
}
 801f4fa:	2000      	movs	r0, #0
 801f4fc:	bd08      	pop	{r3, pc}
 801f4fe:	bf00      	nop
 801f500:	20095f44 	.word	0x20095f44
 801f504:	0803136c 	.word	0x0803136c

0801f508 <USBD_LL_Start>:
{
 801f508:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 801f50a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f50e:	f7e3 ff27 	bl	8003360 <HAL_PCD_Start>
 801f512:	2803      	cmp	r0, #3
 801f514:	bf9a      	itte	ls
 801f516:	4b02      	ldrls	r3, [pc, #8]	; (801f520 <USBD_LL_Start+0x18>)
 801f518:	5c18      	ldrbls	r0, [r3, r0]
 801f51a:	2002      	movhi	r0, #2
}
 801f51c:	bd08      	pop	{r3, pc}
 801f51e:	bf00      	nop
 801f520:	08031368 	.word	0x08031368

0801f524 <USBD_LL_OpenEP>:
{
 801f524:	b510      	push	{r4, lr}
 801f526:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f528:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f52c:	4613      	mov	r3, r2
 801f52e:	4622      	mov	r2, r4
 801f530:	f7e4 fa06 	bl	8003940 <HAL_PCD_EP_Open>
 801f534:	2803      	cmp	r0, #3
 801f536:	bf9a      	itte	ls
 801f538:	4b01      	ldrls	r3, [pc, #4]	; (801f540 <USBD_LL_OpenEP+0x1c>)
 801f53a:	5c18      	ldrbls	r0, [r3, r0]
 801f53c:	2002      	movhi	r0, #2
}
 801f53e:	bd10      	pop	{r4, pc}
 801f540:	08031368 	.word	0x08031368

0801f544 <USBD_LL_CloseEP>:
{
 801f544:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f546:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f54a:	f7e4 fa2e 	bl	80039aa <HAL_PCD_EP_Close>
 801f54e:	2803      	cmp	r0, #3
 801f550:	bf9a      	itte	ls
 801f552:	4b02      	ldrls	r3, [pc, #8]	; (801f55c <USBD_LL_CloseEP+0x18>)
 801f554:	5c18      	ldrbls	r0, [r3, r0]
 801f556:	2002      	movhi	r0, #2
}
 801f558:	bd08      	pop	{r3, pc}
 801f55a:	bf00      	nop
 801f55c:	08031368 	.word	0x08031368

0801f560 <USBD_LL_StallEP>:
{
 801f560:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f562:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f566:	f7e4 fa83 	bl	8003a70 <HAL_PCD_EP_SetStall>
 801f56a:	2803      	cmp	r0, #3
 801f56c:	bf9a      	itte	ls
 801f56e:	4b02      	ldrls	r3, [pc, #8]	; (801f578 <USBD_LL_StallEP+0x18>)
 801f570:	5c18      	ldrbls	r0, [r3, r0]
 801f572:	2002      	movhi	r0, #2
}
 801f574:	bd08      	pop	{r3, pc}
 801f576:	bf00      	nop
 801f578:	08031368 	.word	0x08031368

0801f57c <USBD_LL_ClearStallEP>:
{
 801f57c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801f57e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f582:	f7e4 faae 	bl	8003ae2 <HAL_PCD_EP_ClrStall>
 801f586:	2803      	cmp	r0, #3
 801f588:	bf9a      	itte	ls
 801f58a:	4b02      	ldrls	r3, [pc, #8]	; (801f594 <USBD_LL_ClearStallEP+0x18>)
 801f58c:	5c18      	ldrbls	r0, [r3, r0]
 801f58e:	2002      	movhi	r0, #2
}
 801f590:	bd08      	pop	{r3, pc}
 801f592:	bf00      	nop
 801f594:	08031368 	.word	0x08031368

0801f598 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 801f598:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f59c:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801f5a0:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801f5a4:	bf1b      	ittet	ne
 801f5a6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 801f5aa:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801f5ae:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801f5b2:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801f5b6:	bf08      	it	eq
 801f5b8:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 801f5bc:	4770      	bx	lr
	...

0801f5c0 <USBD_LL_SetUSBAddress>:
{
 801f5c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f5c2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f5c6:	f7e4 f9a7 	bl	8003918 <HAL_PCD_SetAddress>
 801f5ca:	2803      	cmp	r0, #3
 801f5cc:	bf9a      	itte	ls
 801f5ce:	4b02      	ldrls	r3, [pc, #8]	; (801f5d8 <USBD_LL_SetUSBAddress+0x18>)
 801f5d0:	5c18      	ldrbls	r0, [r3, r0]
 801f5d2:	2002      	movhi	r0, #2
}
 801f5d4:	bd08      	pop	{r3, pc}
 801f5d6:	bf00      	nop
 801f5d8:	08031368 	.word	0x08031368

0801f5dc <USBD_LL_Transmit>:
{
 801f5dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f5de:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f5e2:	f7e4 fa2a 	bl	8003a3a <HAL_PCD_EP_Transmit>
 801f5e6:	2803      	cmp	r0, #3
 801f5e8:	bf9a      	itte	ls
 801f5ea:	4b02      	ldrls	r3, [pc, #8]	; (801f5f4 <USBD_LL_Transmit+0x18>)
 801f5ec:	5c18      	ldrbls	r0, [r3, r0]
 801f5ee:	2002      	movhi	r0, #2
}
 801f5f0:	bd08      	pop	{r3, pc}
 801f5f2:	bf00      	nop
 801f5f4:	08031368 	.word	0x08031368

0801f5f8 <USBD_LL_PrepareReceive>:
{
 801f5f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f5fa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f5fe:	f7e4 f9fe 	bl	80039fe <HAL_PCD_EP_Receive>
 801f602:	2803      	cmp	r0, #3
 801f604:	bf9a      	itte	ls
 801f606:	4b02      	ldrls	r3, [pc, #8]	; (801f610 <USBD_LL_PrepareReceive+0x18>)
 801f608:	5c18      	ldrbls	r0, [r3, r0]
 801f60a:	2002      	movhi	r0, #2
}
 801f60c:	bd08      	pop	{r3, pc}
 801f60e:	bf00      	nop
 801f610:	08031368 	.word	0x08031368

0801f614 <HAL_PCDEx_LPM_Callback>:
{
 801f614:	b510      	push	{r4, lr}
 801f616:	4604      	mov	r4, r0
  switch (msg)
 801f618:	b111      	cbz	r1, 801f620 <HAL_PCDEx_LPM_Callback+0xc>
 801f61a:	2901      	cmp	r1, #1
 801f61c:	d016      	beq.n	801f64c <HAL_PCDEx_LPM_Callback+0x38>
 801f61e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801f620:	6a03      	ldr	r3, [r0, #32]
 801f622:	b133      	cbz	r3, 801f632 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 801f624:	f7fd ffea 	bl	801d5fc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f628:	4a12      	ldr	r2, [pc, #72]	; (801f674 <HAL_PCDEx_LPM_Callback+0x60>)
 801f62a:	6913      	ldr	r3, [r2, #16]
 801f62c:	f023 0306 	bic.w	r3, r3, #6
 801f630:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f632:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801f634:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f638:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f63c:	f023 0301 	bic.w	r3, r3, #1
 801f640:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 801f644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 801f648:	f7e8 bd96 	b.w	8008178 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f64c:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801f64e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f652:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f656:	f043 0301 	orr.w	r3, r3, #1
 801f65a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801f65e:	f7e8 fd82 	bl	8008166 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801f662:	6a23      	ldr	r3, [r4, #32]
 801f664:	b123      	cbz	r3, 801f670 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f666:	4a03      	ldr	r2, [pc, #12]	; (801f674 <HAL_PCDEx_LPM_Callback+0x60>)
 801f668:	6913      	ldr	r3, [r2, #16]
 801f66a:	f043 0306 	orr.w	r3, r3, #6
 801f66e:	6113      	str	r3, [r2, #16]
 801f670:	bd10      	pop	{r4, pc}
 801f672:	bf00      	nop
 801f674:	e000ed00 	.word	0xe000ed00

0801f678 <USBD_static_malloc>:
}
 801f678:	4800      	ldr	r0, [pc, #0]	; (801f67c <USBD_static_malloc+0x4>)
 801f67a:	4770      	bx	lr
 801f67c:	200905c8 	.word	0x200905c8

0801f680 <USBD_static_free>:
{
 801f680:	4770      	bx	lr

0801f682 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 801f682:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801f686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f688:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 801f68a:	bf14      	ite	ne
 801f68c:	2002      	movne	r0, #2
 801f68e:	2000      	moveq	r0, #0
 801f690:	4770      	bx	lr

0801f692 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 801f692:	2000      	movs	r0, #0
 801f694:	4770      	bx	lr
	...

0801f698 <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 801f698:	4b05      	ldr	r3, [pc, #20]	; (801f6b0 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 801f69a:	4a06      	ldr	r2, [pc, #24]	; (801f6b4 <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 801f69c:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 801f6a0:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 801f6a2:	5cc1      	ldrb	r1, [r0, r3]
 801f6a4:	5499      	strb	r1, [r3, r2]
 801f6a6:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 801f6a8:	2b0c      	cmp	r3, #12
 801f6aa:	d1fa      	bne.n	801f6a2 <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 801f6ac:	2000      	movs	r0, #0
 801f6ae:	4770      	bx	lr
 801f6b0:	20095ca8 	.word	0x20095ca8
 801f6b4:	2008f540 	.word	0x2008f540

0801f6b8 <CUSTOM_HID_Init_FS>:
 801f6b8:	2000      	movs	r0, #0
 801f6ba:	4770      	bx	lr

0801f6bc <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 801f6bc:	2312      	movs	r3, #18
 801f6be:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 801f6c0:	4800      	ldr	r0, [pc, #0]	; (801f6c4 <USBD_FS_DeviceDescriptor+0x8>)
 801f6c2:	4770      	bx	lr
 801f6c4:	20000f28 	.word	0x20000f28

0801f6c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 801f6c8:	2304      	movs	r3, #4
 801f6ca:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 801f6cc:	4800      	ldr	r0, [pc, #0]	; (801f6d0 <USBD_FS_LangIDStrDescriptor+0x8>)
 801f6ce:	4770      	bx	lr
 801f6d0:	20000f3c 	.word	0x20000f3c

0801f6d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 801f6d4:	230c      	movs	r3, #12
 801f6d6:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801f6d8:	4800      	ldr	r0, [pc, #0]	; (801f6dc <USBD_FS_USR_BOSDescriptor+0x8>)
 801f6da:	4770      	bx	lr
 801f6dc:	20000f1c 	.word	0x20000f1c

0801f6e0 <USBD_FS_ManufacturerStrDescriptor>:
{
 801f6e0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f6e2:	4c04      	ldr	r4, [pc, #16]	; (801f6f4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801f6e4:	4804      	ldr	r0, [pc, #16]	; (801f6f8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801f6e6:	460a      	mov	r2, r1
 801f6e8:	4621      	mov	r1, r4
 801f6ea:	f7e8 ff69 	bl	80085c0 <USBD_GetString>
}
 801f6ee:	4620      	mov	r0, r4
 801f6f0:	bd10      	pop	{r4, pc}
 801f6f2:	bf00      	nop
 801f6f4:	2009634c 	.word	0x2009634c
 801f6f8:	080313a6 	.word	0x080313a6

0801f6fc <USBD_FS_ProductStrDescriptor>:
{
 801f6fc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f6fe:	4c04      	ldr	r4, [pc, #16]	; (801f710 <USBD_FS_ProductStrDescriptor+0x14>)
 801f700:	4804      	ldr	r0, [pc, #16]	; (801f714 <USBD_FS_ProductStrDescriptor+0x18>)
 801f702:	460a      	mov	r2, r1
 801f704:	4621      	mov	r1, r4
 801f706:	f7e8 ff5b 	bl	80085c0 <USBD_GetString>
}
 801f70a:	4620      	mov	r0, r4
 801f70c:	bd10      	pop	{r4, pc}
 801f70e:	bf00      	nop
 801f710:	2009634c 	.word	0x2009634c
 801f714:	080313ad 	.word	0x080313ad

0801f718 <USBD_FS_SerialStrDescriptor>:
{
 801f718:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801f71a:	4c04      	ldr	r4, [pc, #16]	; (801f72c <USBD_FS_SerialStrDescriptor+0x14>)
 801f71c:	4804      	ldr	r0, [pc, #16]	; (801f730 <USBD_FS_SerialStrDescriptor+0x18>)
 801f71e:	460a      	mov	r2, r1
 801f720:	4621      	mov	r1, r4
 801f722:	f7e8 ff4d 	bl	80085c0 <USBD_GetString>
}
 801f726:	4620      	mov	r0, r4
 801f728:	bd10      	pop	{r4, pc}
 801f72a:	bf00      	nop
 801f72c:	2009634c 	.word	0x2009634c
 801f730:	080313cb 	.word	0x080313cb

0801f734 <USBD_FS_ConfigStrDescriptor>:
{
 801f734:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f736:	4c04      	ldr	r4, [pc, #16]	; (801f748 <USBD_FS_ConfigStrDescriptor+0x14>)
 801f738:	4804      	ldr	r0, [pc, #16]	; (801f74c <USBD_FS_ConfigStrDescriptor+0x18>)
 801f73a:	460a      	mov	r2, r1
 801f73c:	4621      	mov	r1, r4
 801f73e:	f7e8 ff3f 	bl	80085c0 <USBD_GetString>
}
 801f742:	4620      	mov	r0, r4
 801f744:	bd10      	pop	{r4, pc}
 801f746:	bf00      	nop
 801f748:	2009634c 	.word	0x2009634c
 801f74c:	0803137f 	.word	0x0803137f

0801f750 <USBD_FS_InterfaceStrDescriptor>:
{
 801f750:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f752:	4c04      	ldr	r4, [pc, #16]	; (801f764 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801f754:	4804      	ldr	r0, [pc, #16]	; (801f768 <USBD_FS_InterfaceStrDescriptor+0x18>)
 801f756:	460a      	mov	r2, r1
 801f758:	4621      	mov	r1, r4
 801f75a:	f7e8 ff31 	bl	80085c0 <USBD_GetString>
}
 801f75e:	4620      	mov	r0, r4
 801f760:	bd10      	pop	{r4, pc}
 801f762:	bf00      	nop
 801f764:	2009634c 	.word	0x2009634c
 801f768:	08031391 	.word	0x08031391

0801f76c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801f76c:	f8df d034 	ldr.w	sp, [pc, #52]	; 801f7a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801f770:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801f772:	e003      	b.n	801f77c <LoopCopyDataInit>

0801f774 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801f774:	4b0c      	ldr	r3, [pc, #48]	; (801f7a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801f776:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801f778:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801f77a:	3104      	adds	r1, #4

0801f77c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801f77c:	480b      	ldr	r0, [pc, #44]	; (801f7ac <LoopForever+0xa>)
	ldr	r3, =_edata
 801f77e:	4b0c      	ldr	r3, [pc, #48]	; (801f7b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 801f780:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801f782:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801f784:	d3f6      	bcc.n	801f774 <CopyDataInit>
	ldr	r2, =_sbss
 801f786:	4a0b      	ldr	r2, [pc, #44]	; (801f7b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 801f788:	e002      	b.n	801f790 <LoopFillZerobss>

0801f78a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801f78a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801f78c:	f842 3b04 	str.w	r3, [r2], #4

0801f790 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801f790:	4b09      	ldr	r3, [pc, #36]	; (801f7b8 <LoopForever+0x16>)
	cmp	r2, r3
 801f792:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801f794:	d3f9      	bcc.n	801f78a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801f796:	f7ff fd93 	bl	801f2c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801f79a:	f000 f817 	bl	801f7cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801f79e:	f7fd ff9b 	bl	801d6d8 <main>

0801f7a2 <LoopForever>:

LoopForever:
    b LoopForever
 801f7a2:	e7fe      	b.n	801f7a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801f7a4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 801f7a8:	080316d8 	.word	0x080316d8
	ldr	r0, =_sdata
 801f7ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801f7b0:	200015b4 	.word	0x200015b4
	ldr	r2, =_sbss
 801f7b4:	200015b8 	.word	0x200015b8
	ldr	r3, = _ebss
 801f7b8:	2009655c 	.word	0x2009655c

0801f7bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801f7bc:	e7fe      	b.n	801f7bc <ADC1_IRQHandler>
	...

0801f7c0 <__errno>:
 801f7c0:	4b01      	ldr	r3, [pc, #4]	; (801f7c8 <__errno+0x8>)
 801f7c2:	6818      	ldr	r0, [r3, #0]
 801f7c4:	4770      	bx	lr
 801f7c6:	bf00      	nop
 801f7c8:	20000f40 	.word	0x20000f40

0801f7cc <__libc_init_array>:
 801f7cc:	b570      	push	{r4, r5, r6, lr}
 801f7ce:	4e0d      	ldr	r6, [pc, #52]	; (801f804 <__libc_init_array+0x38>)
 801f7d0:	4c0d      	ldr	r4, [pc, #52]	; (801f808 <__libc_init_array+0x3c>)
 801f7d2:	1ba4      	subs	r4, r4, r6
 801f7d4:	10a4      	asrs	r4, r4, #2
 801f7d6:	2500      	movs	r5, #0
 801f7d8:	42a5      	cmp	r5, r4
 801f7da:	d109      	bne.n	801f7f0 <__libc_init_array+0x24>
 801f7dc:	4e0b      	ldr	r6, [pc, #44]	; (801f80c <__libc_init_array+0x40>)
 801f7de:	4c0c      	ldr	r4, [pc, #48]	; (801f810 <__libc_init_array+0x44>)
 801f7e0:	f004 fdfe 	bl	80243e0 <_init>
 801f7e4:	1ba4      	subs	r4, r4, r6
 801f7e6:	10a4      	asrs	r4, r4, #2
 801f7e8:	2500      	movs	r5, #0
 801f7ea:	42a5      	cmp	r5, r4
 801f7ec:	d105      	bne.n	801f7fa <__libc_init_array+0x2e>
 801f7ee:	bd70      	pop	{r4, r5, r6, pc}
 801f7f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f7f4:	4798      	blx	r3
 801f7f6:	3501      	adds	r5, #1
 801f7f8:	e7ee      	b.n	801f7d8 <__libc_init_array+0xc>
 801f7fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f7fe:	4798      	blx	r3
 801f800:	3501      	adds	r5, #1
 801f802:	e7f2      	b.n	801f7ea <__libc_init_array+0x1e>
 801f804:	080316d0 	.word	0x080316d0
 801f808:	080316d0 	.word	0x080316d0
 801f80c:	080316d0 	.word	0x080316d0
 801f810:	080316d4 	.word	0x080316d4

0801f814 <memcpy>:
 801f814:	b510      	push	{r4, lr}
 801f816:	1e43      	subs	r3, r0, #1
 801f818:	440a      	add	r2, r1
 801f81a:	4291      	cmp	r1, r2
 801f81c:	d100      	bne.n	801f820 <memcpy+0xc>
 801f81e:	bd10      	pop	{r4, pc}
 801f820:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f824:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f828:	e7f7      	b.n	801f81a <memcpy+0x6>

0801f82a <memset>:
 801f82a:	4402      	add	r2, r0
 801f82c:	4603      	mov	r3, r0
 801f82e:	4293      	cmp	r3, r2
 801f830:	d100      	bne.n	801f834 <memset+0xa>
 801f832:	4770      	bx	lr
 801f834:	f803 1b01 	strb.w	r1, [r3], #1
 801f838:	e7f9      	b.n	801f82e <memset+0x4>
	...

0801f83c <sprintf>:
 801f83c:	b40e      	push	{r1, r2, r3}
 801f83e:	b500      	push	{lr}
 801f840:	b09c      	sub	sp, #112	; 0x70
 801f842:	f44f 7102 	mov.w	r1, #520	; 0x208
 801f846:	ab1d      	add	r3, sp, #116	; 0x74
 801f848:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f84c:	9002      	str	r0, [sp, #8]
 801f84e:	9006      	str	r0, [sp, #24]
 801f850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f854:	480a      	ldr	r0, [pc, #40]	; (801f880 <sprintf+0x44>)
 801f856:	9104      	str	r1, [sp, #16]
 801f858:	9107      	str	r1, [sp, #28]
 801f85a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f85e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f862:	f8ad 1016 	strh.w	r1, [sp, #22]
 801f866:	6800      	ldr	r0, [r0, #0]
 801f868:	9301      	str	r3, [sp, #4]
 801f86a:	a902      	add	r1, sp, #8
 801f86c:	f000 f824 	bl	801f8b8 <_svfprintf_r>
 801f870:	9b02      	ldr	r3, [sp, #8]
 801f872:	2200      	movs	r2, #0
 801f874:	701a      	strb	r2, [r3, #0]
 801f876:	b01c      	add	sp, #112	; 0x70
 801f878:	f85d eb04 	ldr.w	lr, [sp], #4
 801f87c:	b003      	add	sp, #12
 801f87e:	4770      	bx	lr
 801f880:	20000f40 	.word	0x20000f40

0801f884 <strcat>:
 801f884:	b510      	push	{r4, lr}
 801f886:	4602      	mov	r2, r0
 801f888:	4613      	mov	r3, r2
 801f88a:	3201      	adds	r2, #1
 801f88c:	781c      	ldrb	r4, [r3, #0]
 801f88e:	2c00      	cmp	r4, #0
 801f890:	d1fa      	bne.n	801f888 <strcat+0x4>
 801f892:	3b01      	subs	r3, #1
 801f894:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f898:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f89c:	2a00      	cmp	r2, #0
 801f89e:	d1f9      	bne.n	801f894 <strcat+0x10>
 801f8a0:	bd10      	pop	{r4, pc}

0801f8a2 <strcpy>:
 801f8a2:	4603      	mov	r3, r0
 801f8a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f8a8:	f803 2b01 	strb.w	r2, [r3], #1
 801f8ac:	2a00      	cmp	r2, #0
 801f8ae:	d1f9      	bne.n	801f8a4 <strcpy+0x2>
 801f8b0:	4770      	bx	lr
 801f8b2:	0000      	movs	r0, r0
 801f8b4:	0000      	movs	r0, r0
	...

0801f8b8 <_svfprintf_r>:
 801f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8bc:	b0bd      	sub	sp, #244	; 0xf4
 801f8be:	468a      	mov	sl, r1
 801f8c0:	4615      	mov	r5, r2
 801f8c2:	461f      	mov	r7, r3
 801f8c4:	4683      	mov	fp, r0
 801f8c6:	f001 fe25 	bl	8021514 <_localeconv_r>
 801f8ca:	6803      	ldr	r3, [r0, #0]
 801f8cc:	930d      	str	r3, [sp, #52]	; 0x34
 801f8ce:	4618      	mov	r0, r3
 801f8d0:	f7e0 fce6 	bl	80002a0 <strlen>
 801f8d4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801f8d8:	9008      	str	r0, [sp, #32]
 801f8da:	061b      	lsls	r3, r3, #24
 801f8dc:	d518      	bpl.n	801f910 <_svfprintf_r+0x58>
 801f8de:	f8da 3010 	ldr.w	r3, [sl, #16]
 801f8e2:	b9ab      	cbnz	r3, 801f910 <_svfprintf_r+0x58>
 801f8e4:	2140      	movs	r1, #64	; 0x40
 801f8e6:	4658      	mov	r0, fp
 801f8e8:	f001 fe2a 	bl	8021540 <_malloc_r>
 801f8ec:	f8ca 0000 	str.w	r0, [sl]
 801f8f0:	f8ca 0010 	str.w	r0, [sl, #16]
 801f8f4:	b948      	cbnz	r0, 801f90a <_svfprintf_r+0x52>
 801f8f6:	230c      	movs	r3, #12
 801f8f8:	f8cb 3000 	str.w	r3, [fp]
 801f8fc:	f04f 33ff 	mov.w	r3, #4294967295
 801f900:	9309      	str	r3, [sp, #36]	; 0x24
 801f902:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f904:	b03d      	add	sp, #244	; 0xf4
 801f906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f90a:	2340      	movs	r3, #64	; 0x40
 801f90c:	f8ca 3014 	str.w	r3, [sl, #20]
 801f910:	ed9f 7b99 	vldr	d7, [pc, #612]	; 801fb78 <_svfprintf_r+0x2c0>
 801f914:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f918:	2300      	movs	r3, #0
 801f91a:	ac2c      	add	r4, sp, #176	; 0xb0
 801f91c:	941f      	str	r4, [sp, #124]	; 0x7c
 801f91e:	9321      	str	r3, [sp, #132]	; 0x84
 801f920:	9320      	str	r3, [sp, #128]	; 0x80
 801f922:	9505      	str	r5, [sp, #20]
 801f924:	9303      	str	r3, [sp, #12]
 801f926:	9311      	str	r3, [sp, #68]	; 0x44
 801f928:	9310      	str	r3, [sp, #64]	; 0x40
 801f92a:	9309      	str	r3, [sp, #36]	; 0x24
 801f92c:	9d05      	ldr	r5, [sp, #20]
 801f92e:	462b      	mov	r3, r5
 801f930:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f934:	b112      	cbz	r2, 801f93c <_svfprintf_r+0x84>
 801f936:	2a25      	cmp	r2, #37	; 0x25
 801f938:	f040 8083 	bne.w	801fa42 <_svfprintf_r+0x18a>
 801f93c:	9b05      	ldr	r3, [sp, #20]
 801f93e:	1aee      	subs	r6, r5, r3
 801f940:	d00d      	beq.n	801f95e <_svfprintf_r+0xa6>
 801f942:	e884 0048 	stmia.w	r4, {r3, r6}
 801f946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f948:	4433      	add	r3, r6
 801f94a:	9321      	str	r3, [sp, #132]	; 0x84
 801f94c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f94e:	3301      	adds	r3, #1
 801f950:	2b07      	cmp	r3, #7
 801f952:	9320      	str	r3, [sp, #128]	; 0x80
 801f954:	dc77      	bgt.n	801fa46 <_svfprintf_r+0x18e>
 801f956:	3408      	adds	r4, #8
 801f958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f95a:	4433      	add	r3, r6
 801f95c:	9309      	str	r3, [sp, #36]	; 0x24
 801f95e:	782b      	ldrb	r3, [r5, #0]
 801f960:	2b00      	cmp	r3, #0
 801f962:	f000 8729 	beq.w	80207b8 <_svfprintf_r+0xf00>
 801f966:	2300      	movs	r3, #0
 801f968:	1c69      	adds	r1, r5, #1
 801f96a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801f96e:	461a      	mov	r2, r3
 801f970:	f04f 39ff 	mov.w	r9, #4294967295
 801f974:	930a      	str	r3, [sp, #40]	; 0x28
 801f976:	461d      	mov	r5, r3
 801f978:	200a      	movs	r0, #10
 801f97a:	1c4e      	adds	r6, r1, #1
 801f97c:	7809      	ldrb	r1, [r1, #0]
 801f97e:	9605      	str	r6, [sp, #20]
 801f980:	9102      	str	r1, [sp, #8]
 801f982:	9902      	ldr	r1, [sp, #8]
 801f984:	3920      	subs	r1, #32
 801f986:	2958      	cmp	r1, #88	; 0x58
 801f988:	f200 8418 	bhi.w	80201bc <_svfprintf_r+0x904>
 801f98c:	e8df f011 	tbh	[pc, r1, lsl #1]
 801f990:	041600a6 	.word	0x041600a6
 801f994:	00ab0416 	.word	0x00ab0416
 801f998:	04160416 	.word	0x04160416
 801f99c:	04160416 	.word	0x04160416
 801f9a0:	04160416 	.word	0x04160416
 801f9a4:	006500ae 	.word	0x006500ae
 801f9a8:	00b70416 	.word	0x00b70416
 801f9ac:	041600ba 	.word	0x041600ba
 801f9b0:	00da00d7 	.word	0x00da00d7
 801f9b4:	00da00da 	.word	0x00da00da
 801f9b8:	00da00da 	.word	0x00da00da
 801f9bc:	00da00da 	.word	0x00da00da
 801f9c0:	00da00da 	.word	0x00da00da
 801f9c4:	04160416 	.word	0x04160416
 801f9c8:	04160416 	.word	0x04160416
 801f9cc:	04160416 	.word	0x04160416
 801f9d0:	04160416 	.word	0x04160416
 801f9d4:	04160416 	.word	0x04160416
 801f9d8:	012b0115 	.word	0x012b0115
 801f9dc:	012b0416 	.word	0x012b0416
 801f9e0:	04160416 	.word	0x04160416
 801f9e4:	04160416 	.word	0x04160416
 801f9e8:	041600ed 	.word	0x041600ed
 801f9ec:	03400416 	.word	0x03400416
 801f9f0:	04160416 	.word	0x04160416
 801f9f4:	04160416 	.word	0x04160416
 801f9f8:	03a80416 	.word	0x03a80416
 801f9fc:	04160416 	.word	0x04160416
 801fa00:	04160086 	.word	0x04160086
 801fa04:	04160416 	.word	0x04160416
 801fa08:	04160416 	.word	0x04160416
 801fa0c:	04160416 	.word	0x04160416
 801fa10:	04160416 	.word	0x04160416
 801fa14:	01070416 	.word	0x01070416
 801fa18:	012b006b 	.word	0x012b006b
 801fa1c:	012b012b 	.word	0x012b012b
 801fa20:	006b00f0 	.word	0x006b00f0
 801fa24:	04160416 	.word	0x04160416
 801fa28:	041600fa 	.word	0x041600fa
 801fa2c:	03420322 	.word	0x03420322
 801fa30:	01010376 	.word	0x01010376
 801fa34:	03870416 	.word	0x03870416
 801fa38:	03aa0416 	.word	0x03aa0416
 801fa3c:	04160416 	.word	0x04160416
 801fa40:	03c2      	.short	0x03c2
 801fa42:	461d      	mov	r5, r3
 801fa44:	e773      	b.n	801f92e <_svfprintf_r+0x76>
 801fa46:	aa1f      	add	r2, sp, #124	; 0x7c
 801fa48:	4651      	mov	r1, sl
 801fa4a:	4658      	mov	r0, fp
 801fa4c:	f002 fa72 	bl	8021f34 <__ssprint_r>
 801fa50:	2800      	cmp	r0, #0
 801fa52:	f040 8692 	bne.w	802077a <_svfprintf_r+0xec2>
 801fa56:	ac2c      	add	r4, sp, #176	; 0xb0
 801fa58:	e77e      	b.n	801f958 <_svfprintf_r+0xa0>
 801fa5a:	2301      	movs	r3, #1
 801fa5c:	222b      	movs	r2, #43	; 0x2b
 801fa5e:	9905      	ldr	r1, [sp, #20]
 801fa60:	e78b      	b.n	801f97a <_svfprintf_r+0xc2>
 801fa62:	460f      	mov	r7, r1
 801fa64:	e7fb      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fa66:	b10b      	cbz	r3, 801fa6c <_svfprintf_r+0x1b4>
 801fa68:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801fa6c:	06ae      	lsls	r6, r5, #26
 801fa6e:	f140 80aa 	bpl.w	801fbc6 <_svfprintf_r+0x30e>
 801fa72:	3707      	adds	r7, #7
 801fa74:	f027 0707 	bic.w	r7, r7, #7
 801fa78:	f107 0308 	add.w	r3, r7, #8
 801fa7c:	e9d7 6700 	ldrd	r6, r7, [r7]
 801fa80:	9304      	str	r3, [sp, #16]
 801fa82:	2e00      	cmp	r6, #0
 801fa84:	f177 0300 	sbcs.w	r3, r7, #0
 801fa88:	da06      	bge.n	801fa98 <_svfprintf_r+0x1e0>
 801fa8a:	4276      	negs	r6, r6
 801fa8c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801fa90:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801fa94:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801fa98:	2301      	movs	r3, #1
 801fa9a:	e2ca      	b.n	8020032 <_svfprintf_r+0x77a>
 801fa9c:	b10b      	cbz	r3, 801faa2 <_svfprintf_r+0x1ea>
 801fa9e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801faa2:	4b37      	ldr	r3, [pc, #220]	; (801fb80 <_svfprintf_r+0x2c8>)
 801faa4:	9311      	str	r3, [sp, #68]	; 0x44
 801faa6:	06ab      	lsls	r3, r5, #26
 801faa8:	f140 8339 	bpl.w	802011e <_svfprintf_r+0x866>
 801faac:	3707      	adds	r7, #7
 801faae:	f027 0707 	bic.w	r7, r7, #7
 801fab2:	f107 0308 	add.w	r3, r7, #8
 801fab6:	e9d7 6700 	ldrd	r6, r7, [r7]
 801faba:	9304      	str	r3, [sp, #16]
 801fabc:	07e8      	lsls	r0, r5, #31
 801fabe:	d50b      	bpl.n	801fad8 <_svfprintf_r+0x220>
 801fac0:	ea56 0307 	orrs.w	r3, r6, r7
 801fac4:	d008      	beq.n	801fad8 <_svfprintf_r+0x220>
 801fac6:	2330      	movs	r3, #48	; 0x30
 801fac8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 801facc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801fad0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 801fad4:	f045 0502 	orr.w	r5, r5, #2
 801fad8:	2302      	movs	r3, #2
 801fada:	e2a7      	b.n	802002c <_svfprintf_r+0x774>
 801fadc:	2a00      	cmp	r2, #0
 801fade:	d1be      	bne.n	801fa5e <_svfprintf_r+0x1a6>
 801fae0:	2301      	movs	r3, #1
 801fae2:	2220      	movs	r2, #32
 801fae4:	e7bb      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fae6:	f045 0501 	orr.w	r5, r5, #1
 801faea:	e7b8      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801faec:	683e      	ldr	r6, [r7, #0]
 801faee:	960a      	str	r6, [sp, #40]	; 0x28
 801faf0:	2e00      	cmp	r6, #0
 801faf2:	f107 0104 	add.w	r1, r7, #4
 801faf6:	dab4      	bge.n	801fa62 <_svfprintf_r+0x1aa>
 801faf8:	4276      	negs	r6, r6
 801fafa:	960a      	str	r6, [sp, #40]	; 0x28
 801fafc:	460f      	mov	r7, r1
 801fafe:	f045 0504 	orr.w	r5, r5, #4
 801fb02:	e7ac      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fb04:	9905      	ldr	r1, [sp, #20]
 801fb06:	1c4e      	adds	r6, r1, #1
 801fb08:	7809      	ldrb	r1, [r1, #0]
 801fb0a:	9102      	str	r1, [sp, #8]
 801fb0c:	292a      	cmp	r1, #42	; 0x2a
 801fb0e:	d010      	beq.n	801fb32 <_svfprintf_r+0x27a>
 801fb10:	f04f 0900 	mov.w	r9, #0
 801fb14:	9605      	str	r6, [sp, #20]
 801fb16:	9902      	ldr	r1, [sp, #8]
 801fb18:	3930      	subs	r1, #48	; 0x30
 801fb1a:	2909      	cmp	r1, #9
 801fb1c:	f63f af31 	bhi.w	801f982 <_svfprintf_r+0xca>
 801fb20:	fb00 1909 	mla	r9, r0, r9, r1
 801fb24:	9905      	ldr	r1, [sp, #20]
 801fb26:	460e      	mov	r6, r1
 801fb28:	f816 1b01 	ldrb.w	r1, [r6], #1
 801fb2c:	9102      	str	r1, [sp, #8]
 801fb2e:	9605      	str	r6, [sp, #20]
 801fb30:	e7f1      	b.n	801fb16 <_svfprintf_r+0x25e>
 801fb32:	6839      	ldr	r1, [r7, #0]
 801fb34:	9605      	str	r6, [sp, #20]
 801fb36:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 801fb3a:	3704      	adds	r7, #4
 801fb3c:	e78f      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fb3e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 801fb42:	e78c      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fb44:	2100      	movs	r1, #0
 801fb46:	910a      	str	r1, [sp, #40]	; 0x28
 801fb48:	9902      	ldr	r1, [sp, #8]
 801fb4a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fb4c:	3930      	subs	r1, #48	; 0x30
 801fb4e:	fb00 1106 	mla	r1, r0, r6, r1
 801fb52:	910a      	str	r1, [sp, #40]	; 0x28
 801fb54:	9905      	ldr	r1, [sp, #20]
 801fb56:	460e      	mov	r6, r1
 801fb58:	f816 1b01 	ldrb.w	r1, [r6], #1
 801fb5c:	9102      	str	r1, [sp, #8]
 801fb5e:	9902      	ldr	r1, [sp, #8]
 801fb60:	9605      	str	r6, [sp, #20]
 801fb62:	3930      	subs	r1, #48	; 0x30
 801fb64:	2909      	cmp	r1, #9
 801fb66:	d9ef      	bls.n	801fb48 <_svfprintf_r+0x290>
 801fb68:	e70b      	b.n	801f982 <_svfprintf_r+0xca>
 801fb6a:	f045 0508 	orr.w	r5, r5, #8
 801fb6e:	e776      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fb70:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 801fb74:	e773      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fb76:	bf00      	nop
	...
 801fb80:	080313e4 	.word	0x080313e4
 801fb84:	9905      	ldr	r1, [sp, #20]
 801fb86:	7809      	ldrb	r1, [r1, #0]
 801fb88:	296c      	cmp	r1, #108	; 0x6c
 801fb8a:	d105      	bne.n	801fb98 <_svfprintf_r+0x2e0>
 801fb8c:	9905      	ldr	r1, [sp, #20]
 801fb8e:	3101      	adds	r1, #1
 801fb90:	9105      	str	r1, [sp, #20]
 801fb92:	f045 0520 	orr.w	r5, r5, #32
 801fb96:	e762      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fb98:	f045 0510 	orr.w	r5, r5, #16
 801fb9c:	e75f      	b.n	801fa5e <_svfprintf_r+0x1a6>
 801fb9e:	1d3b      	adds	r3, r7, #4
 801fba0:	9304      	str	r3, [sp, #16]
 801fba2:	2600      	movs	r6, #0
 801fba4:	683b      	ldr	r3, [r7, #0]
 801fba6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801fbaa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801fbae:	f04f 0901 	mov.w	r9, #1
 801fbb2:	4637      	mov	r7, r6
 801fbb4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 801fbb8:	e11b      	b.n	801fdf2 <_svfprintf_r+0x53a>
 801fbba:	b10b      	cbz	r3, 801fbc0 <_svfprintf_r+0x308>
 801fbbc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801fbc0:	f045 0510 	orr.w	r5, r5, #16
 801fbc4:	e752      	b.n	801fa6c <_svfprintf_r+0x1b4>
 801fbc6:	f015 0f10 	tst.w	r5, #16
 801fbca:	f107 0304 	add.w	r3, r7, #4
 801fbce:	d003      	beq.n	801fbd8 <_svfprintf_r+0x320>
 801fbd0:	683e      	ldr	r6, [r7, #0]
 801fbd2:	9304      	str	r3, [sp, #16]
 801fbd4:	17f7      	asrs	r7, r6, #31
 801fbd6:	e754      	b.n	801fa82 <_svfprintf_r+0x1ca>
 801fbd8:	683e      	ldr	r6, [r7, #0]
 801fbda:	9304      	str	r3, [sp, #16]
 801fbdc:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fbe0:	bf18      	it	ne
 801fbe2:	b236      	sxthne	r6, r6
 801fbe4:	e7f6      	b.n	801fbd4 <_svfprintf_r+0x31c>
 801fbe6:	b10b      	cbz	r3, 801fbec <_svfprintf_r+0x334>
 801fbe8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801fbec:	3707      	adds	r7, #7
 801fbee:	f027 0707 	bic.w	r7, r7, #7
 801fbf2:	f107 0308 	add.w	r3, r7, #8
 801fbf6:	9304      	str	r3, [sp, #16]
 801fbf8:	ed97 7b00 	vldr	d7, [r7]
 801fbfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fc00:	9b06      	ldr	r3, [sp, #24]
 801fc02:	9312      	str	r3, [sp, #72]	; 0x48
 801fc04:	9b07      	ldr	r3, [sp, #28]
 801fc06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fc0a:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc0c:	f04f 32ff 	mov.w	r2, #4294967295
 801fc10:	4b4a      	ldr	r3, [pc, #296]	; (801fd3c <_svfprintf_r+0x484>)
 801fc12:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801fc16:	f7e0 ff9d 	bl	8000b54 <__aeabi_dcmpun>
 801fc1a:	2800      	cmp	r0, #0
 801fc1c:	f040 85d5 	bne.w	80207ca <_svfprintf_r+0xf12>
 801fc20:	f04f 32ff 	mov.w	r2, #4294967295
 801fc24:	4b45      	ldr	r3, [pc, #276]	; (801fd3c <_svfprintf_r+0x484>)
 801fc26:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801fc2a:	f7e0 ff75 	bl	8000b18 <__aeabi_dcmple>
 801fc2e:	2800      	cmp	r0, #0
 801fc30:	f040 85cb 	bne.w	80207ca <_svfprintf_r+0xf12>
 801fc34:	2200      	movs	r2, #0
 801fc36:	2300      	movs	r3, #0
 801fc38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fc3c:	f7e0 ff62 	bl	8000b04 <__aeabi_dcmplt>
 801fc40:	b110      	cbz	r0, 801fc48 <_svfprintf_r+0x390>
 801fc42:	232d      	movs	r3, #45	; 0x2d
 801fc44:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801fc48:	4b3d      	ldr	r3, [pc, #244]	; (801fd40 <_svfprintf_r+0x488>)
 801fc4a:	4a3e      	ldr	r2, [pc, #248]	; (801fd44 <_svfprintf_r+0x48c>)
 801fc4c:	9902      	ldr	r1, [sp, #8]
 801fc4e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 801fc52:	2947      	cmp	r1, #71	; 0x47
 801fc54:	bfcc      	ite	gt
 801fc56:	4690      	movgt	r8, r2
 801fc58:	4698      	movle	r8, r3
 801fc5a:	f04f 0903 	mov.w	r9, #3
 801fc5e:	2600      	movs	r6, #0
 801fc60:	4637      	mov	r7, r6
 801fc62:	e0c6      	b.n	801fdf2 <_svfprintf_r+0x53a>
 801fc64:	f1b9 3fff 	cmp.w	r9, #4294967295
 801fc68:	d022      	beq.n	801fcb0 <_svfprintf_r+0x3f8>
 801fc6a:	9b02      	ldr	r3, [sp, #8]
 801fc6c:	f023 0320 	bic.w	r3, r3, #32
 801fc70:	2b47      	cmp	r3, #71	; 0x47
 801fc72:	d104      	bne.n	801fc7e <_svfprintf_r+0x3c6>
 801fc74:	f1b9 0f00 	cmp.w	r9, #0
 801fc78:	bf08      	it	eq
 801fc7a:	f04f 0901 	moveq.w	r9, #1
 801fc7e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801fc82:	930c      	str	r3, [sp, #48]	; 0x30
 801fc84:	9b07      	ldr	r3, [sp, #28]
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	da15      	bge.n	801fcb6 <_svfprintf_r+0x3fe>
 801fc8a:	9b06      	ldr	r3, [sp, #24]
 801fc8c:	930e      	str	r3, [sp, #56]	; 0x38
 801fc8e:	9b07      	ldr	r3, [sp, #28]
 801fc90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fc94:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc96:	232d      	movs	r3, #45	; 0x2d
 801fc98:	930b      	str	r3, [sp, #44]	; 0x2c
 801fc9a:	9b02      	ldr	r3, [sp, #8]
 801fc9c:	f023 0720 	bic.w	r7, r3, #32
 801fca0:	2f46      	cmp	r7, #70	; 0x46
 801fca2:	d00e      	beq.n	801fcc2 <_svfprintf_r+0x40a>
 801fca4:	2f45      	cmp	r7, #69	; 0x45
 801fca6:	d146      	bne.n	801fd36 <_svfprintf_r+0x47e>
 801fca8:	f109 0601 	add.w	r6, r9, #1
 801fcac:	2102      	movs	r1, #2
 801fcae:	e00a      	b.n	801fcc6 <_svfprintf_r+0x40e>
 801fcb0:	f04f 0906 	mov.w	r9, #6
 801fcb4:	e7e3      	b.n	801fc7e <_svfprintf_r+0x3c6>
 801fcb6:	ed9d 7b06 	vldr	d7, [sp, #24]
 801fcba:	2300      	movs	r3, #0
 801fcbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801fcc0:	e7ea      	b.n	801fc98 <_svfprintf_r+0x3e0>
 801fcc2:	464e      	mov	r6, r9
 801fcc4:	2103      	movs	r1, #3
 801fcc6:	ab1d      	add	r3, sp, #116	; 0x74
 801fcc8:	9301      	str	r3, [sp, #4]
 801fcca:	ab1a      	add	r3, sp, #104	; 0x68
 801fccc:	9300      	str	r3, [sp, #0]
 801fcce:	4632      	mov	r2, r6
 801fcd0:	ab19      	add	r3, sp, #100	; 0x64
 801fcd2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 801fcd6:	4658      	mov	r0, fp
 801fcd8:	f000 fe4e 	bl	8020978 <_dtoa_r>
 801fcdc:	2f47      	cmp	r7, #71	; 0x47
 801fcde:	4680      	mov	r8, r0
 801fce0:	d102      	bne.n	801fce8 <_svfprintf_r+0x430>
 801fce2:	07e8      	lsls	r0, r5, #31
 801fce4:	f140 857e 	bpl.w	80207e4 <_svfprintf_r+0xf2c>
 801fce8:	eb08 0306 	add.w	r3, r8, r6
 801fcec:	2f46      	cmp	r7, #70	; 0x46
 801fcee:	9303      	str	r3, [sp, #12]
 801fcf0:	d111      	bne.n	801fd16 <_svfprintf_r+0x45e>
 801fcf2:	f898 3000 	ldrb.w	r3, [r8]
 801fcf6:	2b30      	cmp	r3, #48	; 0x30
 801fcf8:	d109      	bne.n	801fd0e <_svfprintf_r+0x456>
 801fcfa:	2200      	movs	r2, #0
 801fcfc:	2300      	movs	r3, #0
 801fcfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801fd02:	f7e0 fef5 	bl	8000af0 <__aeabi_dcmpeq>
 801fd06:	b910      	cbnz	r0, 801fd0e <_svfprintf_r+0x456>
 801fd08:	f1c6 0601 	rsb	r6, r6, #1
 801fd0c:	9619      	str	r6, [sp, #100]	; 0x64
 801fd0e:	9a03      	ldr	r2, [sp, #12]
 801fd10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fd12:	441a      	add	r2, r3
 801fd14:	9203      	str	r2, [sp, #12]
 801fd16:	2200      	movs	r2, #0
 801fd18:	2300      	movs	r3, #0
 801fd1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801fd1e:	f7e0 fee7 	bl	8000af0 <__aeabi_dcmpeq>
 801fd22:	b988      	cbnz	r0, 801fd48 <_svfprintf_r+0x490>
 801fd24:	2230      	movs	r2, #48	; 0x30
 801fd26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fd28:	9903      	ldr	r1, [sp, #12]
 801fd2a:	4299      	cmp	r1, r3
 801fd2c:	d90e      	bls.n	801fd4c <_svfprintf_r+0x494>
 801fd2e:	1c59      	adds	r1, r3, #1
 801fd30:	911d      	str	r1, [sp, #116]	; 0x74
 801fd32:	701a      	strb	r2, [r3, #0]
 801fd34:	e7f7      	b.n	801fd26 <_svfprintf_r+0x46e>
 801fd36:	464e      	mov	r6, r9
 801fd38:	e7b8      	b.n	801fcac <_svfprintf_r+0x3f4>
 801fd3a:	bf00      	nop
 801fd3c:	7fefffff 	.word	0x7fefffff
 801fd40:	080313d8 	.word	0x080313d8
 801fd44:	080313dc 	.word	0x080313dc
 801fd48:	9b03      	ldr	r3, [sp, #12]
 801fd4a:	931d      	str	r3, [sp, #116]	; 0x74
 801fd4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fd4e:	2f47      	cmp	r7, #71	; 0x47
 801fd50:	eba3 0308 	sub.w	r3, r3, r8
 801fd54:	9303      	str	r3, [sp, #12]
 801fd56:	f040 80fa 	bne.w	801ff4e <_svfprintf_r+0x696>
 801fd5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fd5c:	1cd9      	adds	r1, r3, #3
 801fd5e:	db02      	blt.n	801fd66 <_svfprintf_r+0x4ae>
 801fd60:	4599      	cmp	r9, r3
 801fd62:	f280 8120 	bge.w	801ffa6 <_svfprintf_r+0x6ee>
 801fd66:	9b02      	ldr	r3, [sp, #8]
 801fd68:	3b02      	subs	r3, #2
 801fd6a:	9302      	str	r3, [sp, #8]
 801fd6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fd6e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801fd72:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 801fd76:	1e53      	subs	r3, r2, #1
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	9319      	str	r3, [sp, #100]	; 0x64
 801fd7c:	bfb6      	itet	lt
 801fd7e:	f1c2 0301 	rsblt	r3, r2, #1
 801fd82:	222b      	movge	r2, #43	; 0x2b
 801fd84:	222d      	movlt	r2, #45	; 0x2d
 801fd86:	2b09      	cmp	r3, #9
 801fd88:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 801fd8c:	f340 80fb 	ble.w	801ff86 <_svfprintf_r+0x6ce>
 801fd90:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801fd94:	260a      	movs	r6, #10
 801fd96:	fb93 f0f6 	sdiv	r0, r3, r6
 801fd9a:	fb06 3310 	mls	r3, r6, r0, r3
 801fd9e:	3330      	adds	r3, #48	; 0x30
 801fda0:	2809      	cmp	r0, #9
 801fda2:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fda6:	f102 31ff 	add.w	r1, r2, #4294967295
 801fdaa:	4603      	mov	r3, r0
 801fdac:	f300 80e4 	bgt.w	801ff78 <_svfprintf_r+0x6c0>
 801fdb0:	3330      	adds	r3, #48	; 0x30
 801fdb2:	f801 3c01 	strb.w	r3, [r1, #-1]
 801fdb6:	3a02      	subs	r2, #2
 801fdb8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 801fdbc:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 801fdc0:	4282      	cmp	r2, r0
 801fdc2:	4619      	mov	r1, r3
 801fdc4:	f0c0 80da 	bcc.w	801ff7c <_svfprintf_r+0x6c4>
 801fdc8:	9a03      	ldr	r2, [sp, #12]
 801fdca:	ab1b      	add	r3, sp, #108	; 0x6c
 801fdcc:	1acb      	subs	r3, r1, r3
 801fdce:	2a01      	cmp	r2, #1
 801fdd0:	9310      	str	r3, [sp, #64]	; 0x40
 801fdd2:	eb03 0902 	add.w	r9, r3, r2
 801fdd6:	dc02      	bgt.n	801fdde <_svfprintf_r+0x526>
 801fdd8:	f015 0701 	ands.w	r7, r5, #1
 801fddc:	d002      	beq.n	801fde4 <_svfprintf_r+0x52c>
 801fdde:	9b08      	ldr	r3, [sp, #32]
 801fde0:	2700      	movs	r7, #0
 801fde2:	4499      	add	r9, r3
 801fde4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fde6:	b113      	cbz	r3, 801fdee <_svfprintf_r+0x536>
 801fde8:	232d      	movs	r3, #45	; 0x2d
 801fdea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801fdee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fdf0:	2600      	movs	r6, #0
 801fdf2:	454e      	cmp	r6, r9
 801fdf4:	4633      	mov	r3, r6
 801fdf6:	bfb8      	it	lt
 801fdf8:	464b      	movlt	r3, r9
 801fdfa:	930b      	str	r3, [sp, #44]	; 0x2c
 801fdfc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801fe00:	b113      	cbz	r3, 801fe08 <_svfprintf_r+0x550>
 801fe02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe04:	3301      	adds	r3, #1
 801fe06:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe08:	f015 0302 	ands.w	r3, r5, #2
 801fe0c:	9314      	str	r3, [sp, #80]	; 0x50
 801fe0e:	bf1e      	ittt	ne
 801fe10:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 801fe12:	3302      	addne	r3, #2
 801fe14:	930b      	strne	r3, [sp, #44]	; 0x2c
 801fe16:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 801fe1a:	9315      	str	r3, [sp, #84]	; 0x54
 801fe1c:	d118      	bne.n	801fe50 <_svfprintf_r+0x598>
 801fe1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe22:	1a9b      	subs	r3, r3, r2
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	930c      	str	r3, [sp, #48]	; 0x30
 801fe28:	dd12      	ble.n	801fe50 <_svfprintf_r+0x598>
 801fe2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe2c:	2b10      	cmp	r3, #16
 801fe2e:	4ba9      	ldr	r3, [pc, #676]	; (80200d4 <_svfprintf_r+0x81c>)
 801fe30:	6023      	str	r3, [r4, #0]
 801fe32:	f300 81d5 	bgt.w	80201e0 <_svfprintf_r+0x928>
 801fe36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe38:	6063      	str	r3, [r4, #4]
 801fe3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe3e:	4413      	add	r3, r2
 801fe40:	9321      	str	r3, [sp, #132]	; 0x84
 801fe42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe44:	3301      	adds	r3, #1
 801fe46:	2b07      	cmp	r3, #7
 801fe48:	9320      	str	r3, [sp, #128]	; 0x80
 801fe4a:	f300 81e2 	bgt.w	8020212 <_svfprintf_r+0x95a>
 801fe4e:	3408      	adds	r4, #8
 801fe50:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801fe54:	b173      	cbz	r3, 801fe74 <_svfprintf_r+0x5bc>
 801fe56:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 801fe5a:	6023      	str	r3, [r4, #0]
 801fe5c:	2301      	movs	r3, #1
 801fe5e:	6063      	str	r3, [r4, #4]
 801fe60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe62:	3301      	adds	r3, #1
 801fe64:	9321      	str	r3, [sp, #132]	; 0x84
 801fe66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe68:	3301      	adds	r3, #1
 801fe6a:	2b07      	cmp	r3, #7
 801fe6c:	9320      	str	r3, [sp, #128]	; 0x80
 801fe6e:	f300 81da 	bgt.w	8020226 <_svfprintf_r+0x96e>
 801fe72:	3408      	adds	r4, #8
 801fe74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fe76:	b16b      	cbz	r3, 801fe94 <_svfprintf_r+0x5dc>
 801fe78:	ab18      	add	r3, sp, #96	; 0x60
 801fe7a:	6023      	str	r3, [r4, #0]
 801fe7c:	2302      	movs	r3, #2
 801fe7e:	6063      	str	r3, [r4, #4]
 801fe80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe82:	3302      	adds	r3, #2
 801fe84:	9321      	str	r3, [sp, #132]	; 0x84
 801fe86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe88:	3301      	adds	r3, #1
 801fe8a:	2b07      	cmp	r3, #7
 801fe8c:	9320      	str	r3, [sp, #128]	; 0x80
 801fe8e:	f300 81d4 	bgt.w	802023a <_svfprintf_r+0x982>
 801fe92:	3408      	adds	r4, #8
 801fe94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fe96:	2b80      	cmp	r3, #128	; 0x80
 801fe98:	d114      	bne.n	801fec4 <_svfprintf_r+0x60c>
 801fe9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe9e:	1a9b      	subs	r3, r3, r2
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	dd0f      	ble.n	801fec4 <_svfprintf_r+0x60c>
 801fea4:	4a8c      	ldr	r2, [pc, #560]	; (80200d8 <_svfprintf_r+0x820>)
 801fea6:	6022      	str	r2, [r4, #0]
 801fea8:	2b10      	cmp	r3, #16
 801feaa:	f300 81d0 	bgt.w	802024e <_svfprintf_r+0x996>
 801feae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801feb0:	6063      	str	r3, [r4, #4]
 801feb2:	4413      	add	r3, r2
 801feb4:	9321      	str	r3, [sp, #132]	; 0x84
 801feb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801feb8:	3301      	adds	r3, #1
 801feba:	2b07      	cmp	r3, #7
 801febc:	9320      	str	r3, [sp, #128]	; 0x80
 801febe:	f300 81df 	bgt.w	8020280 <_svfprintf_r+0x9c8>
 801fec2:	3408      	adds	r4, #8
 801fec4:	eba6 0609 	sub.w	r6, r6, r9
 801fec8:	2e00      	cmp	r6, #0
 801feca:	dd0f      	ble.n	801feec <_svfprintf_r+0x634>
 801fecc:	4b82      	ldr	r3, [pc, #520]	; (80200d8 <_svfprintf_r+0x820>)
 801fece:	6023      	str	r3, [r4, #0]
 801fed0:	2e10      	cmp	r6, #16
 801fed2:	f300 81df 	bgt.w	8020294 <_svfprintf_r+0x9dc>
 801fed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fed8:	9821      	ldr	r0, [sp, #132]	; 0x84
 801feda:	6066      	str	r6, [r4, #4]
 801fedc:	3301      	adds	r3, #1
 801fede:	4406      	add	r6, r0
 801fee0:	2b07      	cmp	r3, #7
 801fee2:	9621      	str	r6, [sp, #132]	; 0x84
 801fee4:	9320      	str	r3, [sp, #128]	; 0x80
 801fee6:	f300 81ec 	bgt.w	80202c2 <_svfprintf_r+0xa0a>
 801feea:	3408      	adds	r4, #8
 801feec:	05eb      	lsls	r3, r5, #23
 801feee:	f100 81f2 	bmi.w	80202d6 <_svfprintf_r+0xa1e>
 801fef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fef4:	e884 0300 	stmia.w	r4, {r8, r9}
 801fef8:	444b      	add	r3, r9
 801fefa:	9321      	str	r3, [sp, #132]	; 0x84
 801fefc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fefe:	3301      	adds	r3, #1
 801ff00:	2b07      	cmp	r3, #7
 801ff02:	9320      	str	r3, [sp, #128]	; 0x80
 801ff04:	f340 8419 	ble.w	802073a <_svfprintf_r+0xe82>
 801ff08:	aa1f      	add	r2, sp, #124	; 0x7c
 801ff0a:	4651      	mov	r1, sl
 801ff0c:	4658      	mov	r0, fp
 801ff0e:	f002 f811 	bl	8021f34 <__ssprint_r>
 801ff12:	2800      	cmp	r0, #0
 801ff14:	f040 8431 	bne.w	802077a <_svfprintf_r+0xec2>
 801ff18:	ac2c      	add	r4, sp, #176	; 0xb0
 801ff1a:	076b      	lsls	r3, r5, #29
 801ff1c:	f100 8410 	bmi.w	8020740 <_svfprintf_r+0xe88>
 801ff20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ff24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ff26:	428a      	cmp	r2, r1
 801ff28:	bfac      	ite	ge
 801ff2a:	189b      	addge	r3, r3, r2
 801ff2c:	185b      	addlt	r3, r3, r1
 801ff2e:	9309      	str	r3, [sp, #36]	; 0x24
 801ff30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ff32:	b13b      	cbz	r3, 801ff44 <_svfprintf_r+0x68c>
 801ff34:	aa1f      	add	r2, sp, #124	; 0x7c
 801ff36:	4651      	mov	r1, sl
 801ff38:	4658      	mov	r0, fp
 801ff3a:	f001 fffb 	bl	8021f34 <__ssprint_r>
 801ff3e:	2800      	cmp	r0, #0
 801ff40:	f040 841b 	bne.w	802077a <_svfprintf_r+0xec2>
 801ff44:	2300      	movs	r3, #0
 801ff46:	9320      	str	r3, [sp, #128]	; 0x80
 801ff48:	9f04      	ldr	r7, [sp, #16]
 801ff4a:	ac2c      	add	r4, sp, #176	; 0xb0
 801ff4c:	e4ee      	b.n	801f92c <_svfprintf_r+0x74>
 801ff4e:	9b02      	ldr	r3, [sp, #8]
 801ff50:	2b65      	cmp	r3, #101	; 0x65
 801ff52:	f77f af0b 	ble.w	801fd6c <_svfprintf_r+0x4b4>
 801ff56:	9b02      	ldr	r3, [sp, #8]
 801ff58:	2b66      	cmp	r3, #102	; 0x66
 801ff5a:	d124      	bne.n	801ffa6 <_svfprintf_r+0x6ee>
 801ff5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	dd19      	ble.n	801ff96 <_svfprintf_r+0x6de>
 801ff62:	f1b9 0f00 	cmp.w	r9, #0
 801ff66:	d101      	bne.n	801ff6c <_svfprintf_r+0x6b4>
 801ff68:	07ea      	lsls	r2, r5, #31
 801ff6a:	d502      	bpl.n	801ff72 <_svfprintf_r+0x6ba>
 801ff6c:	9a08      	ldr	r2, [sp, #32]
 801ff6e:	4413      	add	r3, r2
 801ff70:	444b      	add	r3, r9
 801ff72:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ff74:	4699      	mov	r9, r3
 801ff76:	e735      	b.n	801fde4 <_svfprintf_r+0x52c>
 801ff78:	460a      	mov	r2, r1
 801ff7a:	e70c      	b.n	801fd96 <_svfprintf_r+0x4de>
 801ff7c:	f812 1b01 	ldrb.w	r1, [r2], #1
 801ff80:	f803 1b01 	strb.w	r1, [r3], #1
 801ff84:	e71c      	b.n	801fdc0 <_svfprintf_r+0x508>
 801ff86:	2230      	movs	r2, #48	; 0x30
 801ff88:	4413      	add	r3, r2
 801ff8a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 801ff8e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801ff92:	a91c      	add	r1, sp, #112	; 0x70
 801ff94:	e718      	b.n	801fdc8 <_svfprintf_r+0x510>
 801ff96:	f1b9 0f00 	cmp.w	r9, #0
 801ff9a:	d101      	bne.n	801ffa0 <_svfprintf_r+0x6e8>
 801ff9c:	07eb      	lsls	r3, r5, #31
 801ff9e:	d515      	bpl.n	801ffcc <_svfprintf_r+0x714>
 801ffa0:	9b08      	ldr	r3, [sp, #32]
 801ffa2:	3301      	adds	r3, #1
 801ffa4:	e7e4      	b.n	801ff70 <_svfprintf_r+0x6b8>
 801ffa6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ffa8:	9b03      	ldr	r3, [sp, #12]
 801ffaa:	429a      	cmp	r2, r3
 801ffac:	db06      	blt.n	801ffbc <_svfprintf_r+0x704>
 801ffae:	07ef      	lsls	r7, r5, #31
 801ffb0:	d50e      	bpl.n	801ffd0 <_svfprintf_r+0x718>
 801ffb2:	9b08      	ldr	r3, [sp, #32]
 801ffb4:	4413      	add	r3, r2
 801ffb6:	2267      	movs	r2, #103	; 0x67
 801ffb8:	9202      	str	r2, [sp, #8]
 801ffba:	e7da      	b.n	801ff72 <_svfprintf_r+0x6ba>
 801ffbc:	9b03      	ldr	r3, [sp, #12]
 801ffbe:	9908      	ldr	r1, [sp, #32]
 801ffc0:	2a00      	cmp	r2, #0
 801ffc2:	440b      	add	r3, r1
 801ffc4:	dcf7      	bgt.n	801ffb6 <_svfprintf_r+0x6fe>
 801ffc6:	f1c2 0201 	rsb	r2, r2, #1
 801ffca:	e7f3      	b.n	801ffb4 <_svfprintf_r+0x6fc>
 801ffcc:	2301      	movs	r3, #1
 801ffce:	e7d0      	b.n	801ff72 <_svfprintf_r+0x6ba>
 801ffd0:	4613      	mov	r3, r2
 801ffd2:	e7f0      	b.n	801ffb6 <_svfprintf_r+0x6fe>
 801ffd4:	b10b      	cbz	r3, 801ffda <_svfprintf_r+0x722>
 801ffd6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801ffda:	f015 0f20 	tst.w	r5, #32
 801ffde:	f107 0304 	add.w	r3, r7, #4
 801ffe2:	d008      	beq.n	801fff6 <_svfprintf_r+0x73e>
 801ffe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ffe6:	683a      	ldr	r2, [r7, #0]
 801ffe8:	17ce      	asrs	r6, r1, #31
 801ffea:	4608      	mov	r0, r1
 801ffec:	4631      	mov	r1, r6
 801ffee:	e9c2 0100 	strd	r0, r1, [r2]
 801fff2:	461f      	mov	r7, r3
 801fff4:	e49a      	b.n	801f92c <_svfprintf_r+0x74>
 801fff6:	06ee      	lsls	r6, r5, #27
 801fff8:	d503      	bpl.n	8020002 <_svfprintf_r+0x74a>
 801fffa:	683a      	ldr	r2, [r7, #0]
 801fffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fffe:	6011      	str	r1, [r2, #0]
 8020000:	e7f7      	b.n	801fff2 <_svfprintf_r+0x73a>
 8020002:	0668      	lsls	r0, r5, #25
 8020004:	d5f9      	bpl.n	801fffa <_svfprintf_r+0x742>
 8020006:	683a      	ldr	r2, [r7, #0]
 8020008:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802000c:	8011      	strh	r1, [r2, #0]
 802000e:	e7f0      	b.n	801fff2 <_svfprintf_r+0x73a>
 8020010:	f045 0510 	orr.w	r5, r5, #16
 8020014:	f015 0320 	ands.w	r3, r5, #32
 8020018:	d022      	beq.n	8020060 <_svfprintf_r+0x7a8>
 802001a:	3707      	adds	r7, #7
 802001c:	f027 0707 	bic.w	r7, r7, #7
 8020020:	f107 0308 	add.w	r3, r7, #8
 8020024:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020028:	9304      	str	r3, [sp, #16]
 802002a:	2300      	movs	r3, #0
 802002c:	2200      	movs	r2, #0
 802002e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020032:	f1b9 3fff 	cmp.w	r9, #4294967295
 8020036:	f000 83db 	beq.w	80207f0 <_svfprintf_r+0xf38>
 802003a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 802003e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020040:	ea56 0207 	orrs.w	r2, r6, r7
 8020044:	f040 83d9 	bne.w	80207fa <_svfprintf_r+0xf42>
 8020048:	f1b9 0f00 	cmp.w	r9, #0
 802004c:	f000 80aa 	beq.w	80201a4 <_svfprintf_r+0x8ec>
 8020050:	2b01      	cmp	r3, #1
 8020052:	d076      	beq.n	8020142 <_svfprintf_r+0x88a>
 8020054:	2b02      	cmp	r3, #2
 8020056:	f000 8091 	beq.w	802017c <_svfprintf_r+0x8c4>
 802005a:	2600      	movs	r6, #0
 802005c:	2700      	movs	r7, #0
 802005e:	e3d2      	b.n	8020806 <_svfprintf_r+0xf4e>
 8020060:	1d3a      	adds	r2, r7, #4
 8020062:	f015 0110 	ands.w	r1, r5, #16
 8020066:	9204      	str	r2, [sp, #16]
 8020068:	d002      	beq.n	8020070 <_svfprintf_r+0x7b8>
 802006a:	683e      	ldr	r6, [r7, #0]
 802006c:	2700      	movs	r7, #0
 802006e:	e7dd      	b.n	802002c <_svfprintf_r+0x774>
 8020070:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8020074:	d0f9      	beq.n	802006a <_svfprintf_r+0x7b2>
 8020076:	883e      	ldrh	r6, [r7, #0]
 8020078:	2700      	movs	r7, #0
 802007a:	e7d6      	b.n	802002a <_svfprintf_r+0x772>
 802007c:	1d3b      	adds	r3, r7, #4
 802007e:	9304      	str	r3, [sp, #16]
 8020080:	2330      	movs	r3, #48	; 0x30
 8020082:	2278      	movs	r2, #120	; 0x78
 8020084:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8020088:	4b14      	ldr	r3, [pc, #80]	; (80200dc <_svfprintf_r+0x824>)
 802008a:	683e      	ldr	r6, [r7, #0]
 802008c:	9311      	str	r3, [sp, #68]	; 0x44
 802008e:	2700      	movs	r7, #0
 8020090:	f045 0502 	orr.w	r5, r5, #2
 8020094:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8020098:	2302      	movs	r3, #2
 802009a:	9202      	str	r2, [sp, #8]
 802009c:	e7c6      	b.n	802002c <_svfprintf_r+0x774>
 802009e:	1d3b      	adds	r3, r7, #4
 80200a0:	2600      	movs	r6, #0
 80200a2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80200a6:	9304      	str	r3, [sp, #16]
 80200a8:	f8d7 8000 	ldr.w	r8, [r7]
 80200ac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80200b0:	d00a      	beq.n	80200c8 <_svfprintf_r+0x810>
 80200b2:	464a      	mov	r2, r9
 80200b4:	4631      	mov	r1, r6
 80200b6:	4640      	mov	r0, r8
 80200b8:	f7e0 f8a2 	bl	8000200 <memchr>
 80200bc:	2800      	cmp	r0, #0
 80200be:	f000 808d 	beq.w	80201dc <_svfprintf_r+0x924>
 80200c2:	eba0 0908 	sub.w	r9, r0, r8
 80200c6:	e5cb      	b.n	801fc60 <_svfprintf_r+0x3a8>
 80200c8:	4640      	mov	r0, r8
 80200ca:	f7e0 f8e9 	bl	80002a0 <strlen>
 80200ce:	4681      	mov	r9, r0
 80200d0:	e5c6      	b.n	801fc60 <_svfprintf_r+0x3a8>
 80200d2:	bf00      	nop
 80200d4:	08031406 	.word	0x08031406
 80200d8:	08031416 	.word	0x08031416
 80200dc:	080313f5 	.word	0x080313f5
 80200e0:	f045 0510 	orr.w	r5, r5, #16
 80200e4:	06a9      	lsls	r1, r5, #26
 80200e6:	d509      	bpl.n	80200fc <_svfprintf_r+0x844>
 80200e8:	3707      	adds	r7, #7
 80200ea:	f027 0707 	bic.w	r7, r7, #7
 80200ee:	f107 0308 	add.w	r3, r7, #8
 80200f2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80200f6:	9304      	str	r3, [sp, #16]
 80200f8:	2301      	movs	r3, #1
 80200fa:	e797      	b.n	802002c <_svfprintf_r+0x774>
 80200fc:	1d3b      	adds	r3, r7, #4
 80200fe:	f015 0f10 	tst.w	r5, #16
 8020102:	9304      	str	r3, [sp, #16]
 8020104:	d001      	beq.n	802010a <_svfprintf_r+0x852>
 8020106:	683e      	ldr	r6, [r7, #0]
 8020108:	e002      	b.n	8020110 <_svfprintf_r+0x858>
 802010a:	066a      	lsls	r2, r5, #25
 802010c:	d5fb      	bpl.n	8020106 <_svfprintf_r+0x84e>
 802010e:	883e      	ldrh	r6, [r7, #0]
 8020110:	2700      	movs	r7, #0
 8020112:	e7f1      	b.n	80200f8 <_svfprintf_r+0x840>
 8020114:	b10b      	cbz	r3, 802011a <_svfprintf_r+0x862>
 8020116:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802011a:	4ba3      	ldr	r3, [pc, #652]	; (80203a8 <_svfprintf_r+0xaf0>)
 802011c:	e4c2      	b.n	801faa4 <_svfprintf_r+0x1ec>
 802011e:	1d3b      	adds	r3, r7, #4
 8020120:	f015 0f10 	tst.w	r5, #16
 8020124:	9304      	str	r3, [sp, #16]
 8020126:	d001      	beq.n	802012c <_svfprintf_r+0x874>
 8020128:	683e      	ldr	r6, [r7, #0]
 802012a:	e002      	b.n	8020132 <_svfprintf_r+0x87a>
 802012c:	066e      	lsls	r6, r5, #25
 802012e:	d5fb      	bpl.n	8020128 <_svfprintf_r+0x870>
 8020130:	883e      	ldrh	r6, [r7, #0]
 8020132:	2700      	movs	r7, #0
 8020134:	e4c2      	b.n	801fabc <_svfprintf_r+0x204>
 8020136:	4643      	mov	r3, r8
 8020138:	e366      	b.n	8020808 <_svfprintf_r+0xf50>
 802013a:	2f00      	cmp	r7, #0
 802013c:	bf08      	it	eq
 802013e:	2e0a      	cmpeq	r6, #10
 8020140:	d205      	bcs.n	802014e <_svfprintf_r+0x896>
 8020142:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8020146:	3630      	adds	r6, #48	; 0x30
 8020148:	f808 6d41 	strb.w	r6, [r8, #-65]!
 802014c:	e377      	b.n	802083e <_svfprintf_r+0xf86>
 802014e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020152:	4630      	mov	r0, r6
 8020154:	4639      	mov	r1, r7
 8020156:	220a      	movs	r2, #10
 8020158:	2300      	movs	r3, #0
 802015a:	f7e0 fda9 	bl	8000cb0 <__aeabi_uldivmod>
 802015e:	3230      	adds	r2, #48	; 0x30
 8020160:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8020164:	2300      	movs	r3, #0
 8020166:	4630      	mov	r0, r6
 8020168:	4639      	mov	r1, r7
 802016a:	220a      	movs	r2, #10
 802016c:	f7e0 fda0 	bl	8000cb0 <__aeabi_uldivmod>
 8020170:	4606      	mov	r6, r0
 8020172:	460f      	mov	r7, r1
 8020174:	ea56 0307 	orrs.w	r3, r6, r7
 8020178:	d1eb      	bne.n	8020152 <_svfprintf_r+0x89a>
 802017a:	e360      	b.n	802083e <_svfprintf_r+0xf86>
 802017c:	2600      	movs	r6, #0
 802017e:	2700      	movs	r7, #0
 8020180:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020184:	f006 030f 	and.w	r3, r6, #15
 8020188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802018a:	5cd3      	ldrb	r3, [r2, r3]
 802018c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8020190:	0933      	lsrs	r3, r6, #4
 8020192:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8020196:	093a      	lsrs	r2, r7, #4
 8020198:	461e      	mov	r6, r3
 802019a:	4617      	mov	r7, r2
 802019c:	ea56 0307 	orrs.w	r3, r6, r7
 80201a0:	d1f0      	bne.n	8020184 <_svfprintf_r+0x8cc>
 80201a2:	e34c      	b.n	802083e <_svfprintf_r+0xf86>
 80201a4:	b93b      	cbnz	r3, 80201b6 <_svfprintf_r+0x8fe>
 80201a6:	07ea      	lsls	r2, r5, #31
 80201a8:	d505      	bpl.n	80201b6 <_svfprintf_r+0x8fe>
 80201aa:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80201ae:	2330      	movs	r3, #48	; 0x30
 80201b0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80201b4:	e343      	b.n	802083e <_svfprintf_r+0xf86>
 80201b6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80201ba:	e340      	b.n	802083e <_svfprintf_r+0xf86>
 80201bc:	b10b      	cbz	r3, 80201c2 <_svfprintf_r+0x90a>
 80201be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80201c2:	9b02      	ldr	r3, [sp, #8]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	f000 82f7 	beq.w	80207b8 <_svfprintf_r+0xf00>
 80201ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80201ce:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80201d2:	2600      	movs	r6, #0
 80201d4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80201d8:	9704      	str	r7, [sp, #16]
 80201da:	e4e8      	b.n	801fbae <_svfprintf_r+0x2f6>
 80201dc:	4606      	mov	r6, r0
 80201de:	e53f      	b.n	801fc60 <_svfprintf_r+0x3a8>
 80201e0:	2310      	movs	r3, #16
 80201e2:	6063      	str	r3, [r4, #4]
 80201e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80201e6:	3310      	adds	r3, #16
 80201e8:	9321      	str	r3, [sp, #132]	; 0x84
 80201ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80201ec:	3301      	adds	r3, #1
 80201ee:	2b07      	cmp	r3, #7
 80201f0:	9320      	str	r3, [sp, #128]	; 0x80
 80201f2:	dc04      	bgt.n	80201fe <_svfprintf_r+0x946>
 80201f4:	3408      	adds	r4, #8
 80201f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201f8:	3b10      	subs	r3, #16
 80201fa:	930c      	str	r3, [sp, #48]	; 0x30
 80201fc:	e615      	b.n	801fe2a <_svfprintf_r+0x572>
 80201fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8020200:	4651      	mov	r1, sl
 8020202:	4658      	mov	r0, fp
 8020204:	f001 fe96 	bl	8021f34 <__ssprint_r>
 8020208:	2800      	cmp	r0, #0
 802020a:	f040 82b6 	bne.w	802077a <_svfprintf_r+0xec2>
 802020e:	ac2c      	add	r4, sp, #176	; 0xb0
 8020210:	e7f1      	b.n	80201f6 <_svfprintf_r+0x93e>
 8020212:	aa1f      	add	r2, sp, #124	; 0x7c
 8020214:	4651      	mov	r1, sl
 8020216:	4658      	mov	r0, fp
 8020218:	f001 fe8c 	bl	8021f34 <__ssprint_r>
 802021c:	2800      	cmp	r0, #0
 802021e:	f040 82ac 	bne.w	802077a <_svfprintf_r+0xec2>
 8020222:	ac2c      	add	r4, sp, #176	; 0xb0
 8020224:	e614      	b.n	801fe50 <_svfprintf_r+0x598>
 8020226:	aa1f      	add	r2, sp, #124	; 0x7c
 8020228:	4651      	mov	r1, sl
 802022a:	4658      	mov	r0, fp
 802022c:	f001 fe82 	bl	8021f34 <__ssprint_r>
 8020230:	2800      	cmp	r0, #0
 8020232:	f040 82a2 	bne.w	802077a <_svfprintf_r+0xec2>
 8020236:	ac2c      	add	r4, sp, #176	; 0xb0
 8020238:	e61c      	b.n	801fe74 <_svfprintf_r+0x5bc>
 802023a:	aa1f      	add	r2, sp, #124	; 0x7c
 802023c:	4651      	mov	r1, sl
 802023e:	4658      	mov	r0, fp
 8020240:	f001 fe78 	bl	8021f34 <__ssprint_r>
 8020244:	2800      	cmp	r0, #0
 8020246:	f040 8298 	bne.w	802077a <_svfprintf_r+0xec2>
 802024a:	ac2c      	add	r4, sp, #176	; 0xb0
 802024c:	e622      	b.n	801fe94 <_svfprintf_r+0x5dc>
 802024e:	2210      	movs	r2, #16
 8020250:	6062      	str	r2, [r4, #4]
 8020252:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020254:	3210      	adds	r2, #16
 8020256:	9221      	str	r2, [sp, #132]	; 0x84
 8020258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802025a:	3201      	adds	r2, #1
 802025c:	2a07      	cmp	r2, #7
 802025e:	9220      	str	r2, [sp, #128]	; 0x80
 8020260:	dc02      	bgt.n	8020268 <_svfprintf_r+0x9b0>
 8020262:	3408      	adds	r4, #8
 8020264:	3b10      	subs	r3, #16
 8020266:	e61d      	b.n	801fea4 <_svfprintf_r+0x5ec>
 8020268:	aa1f      	add	r2, sp, #124	; 0x7c
 802026a:	4651      	mov	r1, sl
 802026c:	4658      	mov	r0, fp
 802026e:	930c      	str	r3, [sp, #48]	; 0x30
 8020270:	f001 fe60 	bl	8021f34 <__ssprint_r>
 8020274:	2800      	cmp	r0, #0
 8020276:	f040 8280 	bne.w	802077a <_svfprintf_r+0xec2>
 802027a:	ac2c      	add	r4, sp, #176	; 0xb0
 802027c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802027e:	e7f1      	b.n	8020264 <_svfprintf_r+0x9ac>
 8020280:	aa1f      	add	r2, sp, #124	; 0x7c
 8020282:	4651      	mov	r1, sl
 8020284:	4658      	mov	r0, fp
 8020286:	f001 fe55 	bl	8021f34 <__ssprint_r>
 802028a:	2800      	cmp	r0, #0
 802028c:	f040 8275 	bne.w	802077a <_svfprintf_r+0xec2>
 8020290:	ac2c      	add	r4, sp, #176	; 0xb0
 8020292:	e617      	b.n	801fec4 <_svfprintf_r+0x60c>
 8020294:	2310      	movs	r3, #16
 8020296:	6063      	str	r3, [r4, #4]
 8020298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802029a:	3310      	adds	r3, #16
 802029c:	9321      	str	r3, [sp, #132]	; 0x84
 802029e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80202a0:	3301      	adds	r3, #1
 80202a2:	2b07      	cmp	r3, #7
 80202a4:	9320      	str	r3, [sp, #128]	; 0x80
 80202a6:	dc02      	bgt.n	80202ae <_svfprintf_r+0x9f6>
 80202a8:	3408      	adds	r4, #8
 80202aa:	3e10      	subs	r6, #16
 80202ac:	e60e      	b.n	801fecc <_svfprintf_r+0x614>
 80202ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80202b0:	4651      	mov	r1, sl
 80202b2:	4658      	mov	r0, fp
 80202b4:	f001 fe3e 	bl	8021f34 <__ssprint_r>
 80202b8:	2800      	cmp	r0, #0
 80202ba:	f040 825e 	bne.w	802077a <_svfprintf_r+0xec2>
 80202be:	ac2c      	add	r4, sp, #176	; 0xb0
 80202c0:	e7f3      	b.n	80202aa <_svfprintf_r+0x9f2>
 80202c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80202c4:	4651      	mov	r1, sl
 80202c6:	4658      	mov	r0, fp
 80202c8:	f001 fe34 	bl	8021f34 <__ssprint_r>
 80202cc:	2800      	cmp	r0, #0
 80202ce:	f040 8254 	bne.w	802077a <_svfprintf_r+0xec2>
 80202d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80202d4:	e60a      	b.n	801feec <_svfprintf_r+0x634>
 80202d6:	9b02      	ldr	r3, [sp, #8]
 80202d8:	2b65      	cmp	r3, #101	; 0x65
 80202da:	f340 81a9 	ble.w	8020630 <_svfprintf_r+0xd78>
 80202de:	2200      	movs	r2, #0
 80202e0:	2300      	movs	r3, #0
 80202e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80202e6:	f7e0 fc03 	bl	8000af0 <__aeabi_dcmpeq>
 80202ea:	2800      	cmp	r0, #0
 80202ec:	d062      	beq.n	80203b4 <_svfprintf_r+0xafc>
 80202ee:	4b2f      	ldr	r3, [pc, #188]	; (80203ac <_svfprintf_r+0xaf4>)
 80202f0:	6023      	str	r3, [r4, #0]
 80202f2:	2301      	movs	r3, #1
 80202f4:	6063      	str	r3, [r4, #4]
 80202f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80202f8:	3301      	adds	r3, #1
 80202fa:	9321      	str	r3, [sp, #132]	; 0x84
 80202fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80202fe:	3301      	adds	r3, #1
 8020300:	2b07      	cmp	r3, #7
 8020302:	9320      	str	r3, [sp, #128]	; 0x80
 8020304:	dc25      	bgt.n	8020352 <_svfprintf_r+0xa9a>
 8020306:	3408      	adds	r4, #8
 8020308:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802030a:	9a03      	ldr	r2, [sp, #12]
 802030c:	4293      	cmp	r3, r2
 802030e:	db02      	blt.n	8020316 <_svfprintf_r+0xa5e>
 8020310:	07ee      	lsls	r6, r5, #31
 8020312:	f57f ae02 	bpl.w	801ff1a <_svfprintf_r+0x662>
 8020316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020318:	6023      	str	r3, [r4, #0]
 802031a:	9b08      	ldr	r3, [sp, #32]
 802031c:	6063      	str	r3, [r4, #4]
 802031e:	9a08      	ldr	r2, [sp, #32]
 8020320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020322:	4413      	add	r3, r2
 8020324:	9321      	str	r3, [sp, #132]	; 0x84
 8020326:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020328:	3301      	adds	r3, #1
 802032a:	2b07      	cmp	r3, #7
 802032c:	9320      	str	r3, [sp, #128]	; 0x80
 802032e:	dc1a      	bgt.n	8020366 <_svfprintf_r+0xaae>
 8020330:	3408      	adds	r4, #8
 8020332:	9b03      	ldr	r3, [sp, #12]
 8020334:	1e5e      	subs	r6, r3, #1
 8020336:	2e00      	cmp	r6, #0
 8020338:	f77f adef 	ble.w	801ff1a <_svfprintf_r+0x662>
 802033c:	4f1c      	ldr	r7, [pc, #112]	; (80203b0 <_svfprintf_r+0xaf8>)
 802033e:	f04f 0810 	mov.w	r8, #16
 8020342:	2e10      	cmp	r6, #16
 8020344:	6027      	str	r7, [r4, #0]
 8020346:	dc18      	bgt.n	802037a <_svfprintf_r+0xac2>
 8020348:	6066      	str	r6, [r4, #4]
 802034a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802034c:	441e      	add	r6, r3
 802034e:	9621      	str	r6, [sp, #132]	; 0x84
 8020350:	e5d4      	b.n	801fefc <_svfprintf_r+0x644>
 8020352:	aa1f      	add	r2, sp, #124	; 0x7c
 8020354:	4651      	mov	r1, sl
 8020356:	4658      	mov	r0, fp
 8020358:	f001 fdec 	bl	8021f34 <__ssprint_r>
 802035c:	2800      	cmp	r0, #0
 802035e:	f040 820c 	bne.w	802077a <_svfprintf_r+0xec2>
 8020362:	ac2c      	add	r4, sp, #176	; 0xb0
 8020364:	e7d0      	b.n	8020308 <_svfprintf_r+0xa50>
 8020366:	aa1f      	add	r2, sp, #124	; 0x7c
 8020368:	4651      	mov	r1, sl
 802036a:	4658      	mov	r0, fp
 802036c:	f001 fde2 	bl	8021f34 <__ssprint_r>
 8020370:	2800      	cmp	r0, #0
 8020372:	f040 8202 	bne.w	802077a <_svfprintf_r+0xec2>
 8020376:	ac2c      	add	r4, sp, #176	; 0xb0
 8020378:	e7db      	b.n	8020332 <_svfprintf_r+0xa7a>
 802037a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802037c:	f8c4 8004 	str.w	r8, [r4, #4]
 8020380:	3310      	adds	r3, #16
 8020382:	9321      	str	r3, [sp, #132]	; 0x84
 8020384:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020386:	3301      	adds	r3, #1
 8020388:	2b07      	cmp	r3, #7
 802038a:	9320      	str	r3, [sp, #128]	; 0x80
 802038c:	dc02      	bgt.n	8020394 <_svfprintf_r+0xadc>
 802038e:	3408      	adds	r4, #8
 8020390:	3e10      	subs	r6, #16
 8020392:	e7d6      	b.n	8020342 <_svfprintf_r+0xa8a>
 8020394:	aa1f      	add	r2, sp, #124	; 0x7c
 8020396:	4651      	mov	r1, sl
 8020398:	4658      	mov	r0, fp
 802039a:	f001 fdcb 	bl	8021f34 <__ssprint_r>
 802039e:	2800      	cmp	r0, #0
 80203a0:	f040 81eb 	bne.w	802077a <_svfprintf_r+0xec2>
 80203a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80203a6:	e7f3      	b.n	8020390 <_svfprintf_r+0xad8>
 80203a8:	080313f5 	.word	0x080313f5
 80203ac:	080312b5 	.word	0x080312b5
 80203b0:	08031416 	.word	0x08031416
 80203b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	dc7a      	bgt.n	80204b0 <_svfprintf_r+0xbf8>
 80203ba:	4b9b      	ldr	r3, [pc, #620]	; (8020628 <_svfprintf_r+0xd70>)
 80203bc:	6023      	str	r3, [r4, #0]
 80203be:	2301      	movs	r3, #1
 80203c0:	6063      	str	r3, [r4, #4]
 80203c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80203c4:	3301      	adds	r3, #1
 80203c6:	9321      	str	r3, [sp, #132]	; 0x84
 80203c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203ca:	3301      	adds	r3, #1
 80203cc:	2b07      	cmp	r3, #7
 80203ce:	9320      	str	r3, [sp, #128]	; 0x80
 80203d0:	dc44      	bgt.n	802045c <_svfprintf_r+0xba4>
 80203d2:	3408      	adds	r4, #8
 80203d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203d6:	b923      	cbnz	r3, 80203e2 <_svfprintf_r+0xb2a>
 80203d8:	9b03      	ldr	r3, [sp, #12]
 80203da:	b913      	cbnz	r3, 80203e2 <_svfprintf_r+0xb2a>
 80203dc:	07e8      	lsls	r0, r5, #31
 80203de:	f57f ad9c 	bpl.w	801ff1a <_svfprintf_r+0x662>
 80203e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80203e4:	6023      	str	r3, [r4, #0]
 80203e6:	9b08      	ldr	r3, [sp, #32]
 80203e8:	6063      	str	r3, [r4, #4]
 80203ea:	9a08      	ldr	r2, [sp, #32]
 80203ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80203ee:	4413      	add	r3, r2
 80203f0:	9321      	str	r3, [sp, #132]	; 0x84
 80203f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203f4:	3301      	adds	r3, #1
 80203f6:	2b07      	cmp	r3, #7
 80203f8:	9320      	str	r3, [sp, #128]	; 0x80
 80203fa:	dc39      	bgt.n	8020470 <_svfprintf_r+0xbb8>
 80203fc:	f104 0308 	add.w	r3, r4, #8
 8020400:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8020402:	2e00      	cmp	r6, #0
 8020404:	da19      	bge.n	802043a <_svfprintf_r+0xb82>
 8020406:	4f89      	ldr	r7, [pc, #548]	; (802062c <_svfprintf_r+0xd74>)
 8020408:	4276      	negs	r6, r6
 802040a:	2410      	movs	r4, #16
 802040c:	2e10      	cmp	r6, #16
 802040e:	601f      	str	r7, [r3, #0]
 8020410:	dc38      	bgt.n	8020484 <_svfprintf_r+0xbcc>
 8020412:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020414:	605e      	str	r6, [r3, #4]
 8020416:	4416      	add	r6, r2
 8020418:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802041a:	9621      	str	r6, [sp, #132]	; 0x84
 802041c:	3201      	adds	r2, #1
 802041e:	2a07      	cmp	r2, #7
 8020420:	f103 0308 	add.w	r3, r3, #8
 8020424:	9220      	str	r2, [sp, #128]	; 0x80
 8020426:	dd08      	ble.n	802043a <_svfprintf_r+0xb82>
 8020428:	aa1f      	add	r2, sp, #124	; 0x7c
 802042a:	4651      	mov	r1, sl
 802042c:	4658      	mov	r0, fp
 802042e:	f001 fd81 	bl	8021f34 <__ssprint_r>
 8020432:	2800      	cmp	r0, #0
 8020434:	f040 81a1 	bne.w	802077a <_svfprintf_r+0xec2>
 8020438:	ab2c      	add	r3, sp, #176	; 0xb0
 802043a:	9a03      	ldr	r2, [sp, #12]
 802043c:	605a      	str	r2, [r3, #4]
 802043e:	9903      	ldr	r1, [sp, #12]
 8020440:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020442:	f8c3 8000 	str.w	r8, [r3]
 8020446:	440a      	add	r2, r1
 8020448:	9221      	str	r2, [sp, #132]	; 0x84
 802044a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802044c:	3201      	adds	r2, #1
 802044e:	2a07      	cmp	r2, #7
 8020450:	9220      	str	r2, [sp, #128]	; 0x80
 8020452:	f73f ad59 	bgt.w	801ff08 <_svfprintf_r+0x650>
 8020456:	f103 0408 	add.w	r4, r3, #8
 802045a:	e55e      	b.n	801ff1a <_svfprintf_r+0x662>
 802045c:	aa1f      	add	r2, sp, #124	; 0x7c
 802045e:	4651      	mov	r1, sl
 8020460:	4658      	mov	r0, fp
 8020462:	f001 fd67 	bl	8021f34 <__ssprint_r>
 8020466:	2800      	cmp	r0, #0
 8020468:	f040 8187 	bne.w	802077a <_svfprintf_r+0xec2>
 802046c:	ac2c      	add	r4, sp, #176	; 0xb0
 802046e:	e7b1      	b.n	80203d4 <_svfprintf_r+0xb1c>
 8020470:	aa1f      	add	r2, sp, #124	; 0x7c
 8020472:	4651      	mov	r1, sl
 8020474:	4658      	mov	r0, fp
 8020476:	f001 fd5d 	bl	8021f34 <__ssprint_r>
 802047a:	2800      	cmp	r0, #0
 802047c:	f040 817d 	bne.w	802077a <_svfprintf_r+0xec2>
 8020480:	ab2c      	add	r3, sp, #176	; 0xb0
 8020482:	e7bd      	b.n	8020400 <_svfprintf_r+0xb48>
 8020484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020486:	605c      	str	r4, [r3, #4]
 8020488:	3210      	adds	r2, #16
 802048a:	9221      	str	r2, [sp, #132]	; 0x84
 802048c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802048e:	3201      	adds	r2, #1
 8020490:	2a07      	cmp	r2, #7
 8020492:	9220      	str	r2, [sp, #128]	; 0x80
 8020494:	dc02      	bgt.n	802049c <_svfprintf_r+0xbe4>
 8020496:	3308      	adds	r3, #8
 8020498:	3e10      	subs	r6, #16
 802049a:	e7b7      	b.n	802040c <_svfprintf_r+0xb54>
 802049c:	aa1f      	add	r2, sp, #124	; 0x7c
 802049e:	4651      	mov	r1, sl
 80204a0:	4658      	mov	r0, fp
 80204a2:	f001 fd47 	bl	8021f34 <__ssprint_r>
 80204a6:	2800      	cmp	r0, #0
 80204a8:	f040 8167 	bne.w	802077a <_svfprintf_r+0xec2>
 80204ac:	ab2c      	add	r3, sp, #176	; 0xb0
 80204ae:	e7f3      	b.n	8020498 <_svfprintf_r+0xbe0>
 80204b0:	9b03      	ldr	r3, [sp, #12]
 80204b2:	42bb      	cmp	r3, r7
 80204b4:	bfa8      	it	ge
 80204b6:	463b      	movge	r3, r7
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	461e      	mov	r6, r3
 80204bc:	dd0b      	ble.n	80204d6 <_svfprintf_r+0xc1e>
 80204be:	6063      	str	r3, [r4, #4]
 80204c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80204c2:	f8c4 8000 	str.w	r8, [r4]
 80204c6:	4433      	add	r3, r6
 80204c8:	9321      	str	r3, [sp, #132]	; 0x84
 80204ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80204cc:	3301      	adds	r3, #1
 80204ce:	2b07      	cmp	r3, #7
 80204d0:	9320      	str	r3, [sp, #128]	; 0x80
 80204d2:	dc5f      	bgt.n	8020594 <_svfprintf_r+0xcdc>
 80204d4:	3408      	adds	r4, #8
 80204d6:	2e00      	cmp	r6, #0
 80204d8:	bfac      	ite	ge
 80204da:	1bbe      	subge	r6, r7, r6
 80204dc:	463e      	movlt	r6, r7
 80204de:	2e00      	cmp	r6, #0
 80204e0:	dd0f      	ble.n	8020502 <_svfprintf_r+0xc4a>
 80204e2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 802062c <_svfprintf_r+0xd74>
 80204e6:	f8c4 9000 	str.w	r9, [r4]
 80204ea:	2e10      	cmp	r6, #16
 80204ec:	dc5c      	bgt.n	80205a8 <_svfprintf_r+0xcf0>
 80204ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80204f0:	6066      	str	r6, [r4, #4]
 80204f2:	441e      	add	r6, r3
 80204f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80204f6:	9621      	str	r6, [sp, #132]	; 0x84
 80204f8:	3301      	adds	r3, #1
 80204fa:	2b07      	cmp	r3, #7
 80204fc:	9320      	str	r3, [sp, #128]	; 0x80
 80204fe:	dc6a      	bgt.n	80205d6 <_svfprintf_r+0xd1e>
 8020500:	3408      	adds	r4, #8
 8020502:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020504:	9a03      	ldr	r2, [sp, #12]
 8020506:	4293      	cmp	r3, r2
 8020508:	db01      	blt.n	802050e <_svfprintf_r+0xc56>
 802050a:	07e9      	lsls	r1, r5, #31
 802050c:	d50d      	bpl.n	802052a <_svfprintf_r+0xc72>
 802050e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020510:	6023      	str	r3, [r4, #0]
 8020512:	9b08      	ldr	r3, [sp, #32]
 8020514:	6063      	str	r3, [r4, #4]
 8020516:	9a08      	ldr	r2, [sp, #32]
 8020518:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802051a:	4413      	add	r3, r2
 802051c:	9321      	str	r3, [sp, #132]	; 0x84
 802051e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020520:	3301      	adds	r3, #1
 8020522:	2b07      	cmp	r3, #7
 8020524:	9320      	str	r3, [sp, #128]	; 0x80
 8020526:	dc60      	bgt.n	80205ea <_svfprintf_r+0xd32>
 8020528:	3408      	adds	r4, #8
 802052a:	9b03      	ldr	r3, [sp, #12]
 802052c:	9a03      	ldr	r2, [sp, #12]
 802052e:	1bde      	subs	r6, r3, r7
 8020530:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020532:	1ad3      	subs	r3, r2, r3
 8020534:	429e      	cmp	r6, r3
 8020536:	bfa8      	it	ge
 8020538:	461e      	movge	r6, r3
 802053a:	2e00      	cmp	r6, #0
 802053c:	dd0b      	ble.n	8020556 <_svfprintf_r+0xc9e>
 802053e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020540:	6066      	str	r6, [r4, #4]
 8020542:	4433      	add	r3, r6
 8020544:	9321      	str	r3, [sp, #132]	; 0x84
 8020546:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020548:	3301      	adds	r3, #1
 802054a:	4447      	add	r7, r8
 802054c:	2b07      	cmp	r3, #7
 802054e:	6027      	str	r7, [r4, #0]
 8020550:	9320      	str	r3, [sp, #128]	; 0x80
 8020552:	dc54      	bgt.n	80205fe <_svfprintf_r+0xd46>
 8020554:	3408      	adds	r4, #8
 8020556:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020558:	9a03      	ldr	r2, [sp, #12]
 802055a:	2e00      	cmp	r6, #0
 802055c:	eba2 0303 	sub.w	r3, r2, r3
 8020560:	bfac      	ite	ge
 8020562:	1b9e      	subge	r6, r3, r6
 8020564:	461e      	movlt	r6, r3
 8020566:	2e00      	cmp	r6, #0
 8020568:	f77f acd7 	ble.w	801ff1a <_svfprintf_r+0x662>
 802056c:	4f2f      	ldr	r7, [pc, #188]	; (802062c <_svfprintf_r+0xd74>)
 802056e:	f04f 0810 	mov.w	r8, #16
 8020572:	2e10      	cmp	r6, #16
 8020574:	6027      	str	r7, [r4, #0]
 8020576:	f77f aee7 	ble.w	8020348 <_svfprintf_r+0xa90>
 802057a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802057c:	f8c4 8004 	str.w	r8, [r4, #4]
 8020580:	3310      	adds	r3, #16
 8020582:	9321      	str	r3, [sp, #132]	; 0x84
 8020584:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020586:	3301      	adds	r3, #1
 8020588:	2b07      	cmp	r3, #7
 802058a:	9320      	str	r3, [sp, #128]	; 0x80
 802058c:	dc41      	bgt.n	8020612 <_svfprintf_r+0xd5a>
 802058e:	3408      	adds	r4, #8
 8020590:	3e10      	subs	r6, #16
 8020592:	e7ee      	b.n	8020572 <_svfprintf_r+0xcba>
 8020594:	aa1f      	add	r2, sp, #124	; 0x7c
 8020596:	4651      	mov	r1, sl
 8020598:	4658      	mov	r0, fp
 802059a:	f001 fccb 	bl	8021f34 <__ssprint_r>
 802059e:	2800      	cmp	r0, #0
 80205a0:	f040 80eb 	bne.w	802077a <_svfprintf_r+0xec2>
 80205a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80205a6:	e796      	b.n	80204d6 <_svfprintf_r+0xc1e>
 80205a8:	2310      	movs	r3, #16
 80205aa:	6063      	str	r3, [r4, #4]
 80205ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80205ae:	3310      	adds	r3, #16
 80205b0:	9321      	str	r3, [sp, #132]	; 0x84
 80205b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80205b4:	3301      	adds	r3, #1
 80205b6:	2b07      	cmp	r3, #7
 80205b8:	9320      	str	r3, [sp, #128]	; 0x80
 80205ba:	dc02      	bgt.n	80205c2 <_svfprintf_r+0xd0a>
 80205bc:	3408      	adds	r4, #8
 80205be:	3e10      	subs	r6, #16
 80205c0:	e791      	b.n	80204e6 <_svfprintf_r+0xc2e>
 80205c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80205c4:	4651      	mov	r1, sl
 80205c6:	4658      	mov	r0, fp
 80205c8:	f001 fcb4 	bl	8021f34 <__ssprint_r>
 80205cc:	2800      	cmp	r0, #0
 80205ce:	f040 80d4 	bne.w	802077a <_svfprintf_r+0xec2>
 80205d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80205d4:	e7f3      	b.n	80205be <_svfprintf_r+0xd06>
 80205d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80205d8:	4651      	mov	r1, sl
 80205da:	4658      	mov	r0, fp
 80205dc:	f001 fcaa 	bl	8021f34 <__ssprint_r>
 80205e0:	2800      	cmp	r0, #0
 80205e2:	f040 80ca 	bne.w	802077a <_svfprintf_r+0xec2>
 80205e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80205e8:	e78b      	b.n	8020502 <_svfprintf_r+0xc4a>
 80205ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80205ec:	4651      	mov	r1, sl
 80205ee:	4658      	mov	r0, fp
 80205f0:	f001 fca0 	bl	8021f34 <__ssprint_r>
 80205f4:	2800      	cmp	r0, #0
 80205f6:	f040 80c0 	bne.w	802077a <_svfprintf_r+0xec2>
 80205fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80205fc:	e795      	b.n	802052a <_svfprintf_r+0xc72>
 80205fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8020600:	4651      	mov	r1, sl
 8020602:	4658      	mov	r0, fp
 8020604:	f001 fc96 	bl	8021f34 <__ssprint_r>
 8020608:	2800      	cmp	r0, #0
 802060a:	f040 80b6 	bne.w	802077a <_svfprintf_r+0xec2>
 802060e:	ac2c      	add	r4, sp, #176	; 0xb0
 8020610:	e7a1      	b.n	8020556 <_svfprintf_r+0xc9e>
 8020612:	aa1f      	add	r2, sp, #124	; 0x7c
 8020614:	4651      	mov	r1, sl
 8020616:	4658      	mov	r0, fp
 8020618:	f001 fc8c 	bl	8021f34 <__ssprint_r>
 802061c:	2800      	cmp	r0, #0
 802061e:	f040 80ac 	bne.w	802077a <_svfprintf_r+0xec2>
 8020622:	ac2c      	add	r4, sp, #176	; 0xb0
 8020624:	e7b4      	b.n	8020590 <_svfprintf_r+0xcd8>
 8020626:	bf00      	nop
 8020628:	080312b5 	.word	0x080312b5
 802062c:	08031416 	.word	0x08031416
 8020630:	9b03      	ldr	r3, [sp, #12]
 8020632:	2b01      	cmp	r3, #1
 8020634:	dc01      	bgt.n	802063a <_svfprintf_r+0xd82>
 8020636:	07ea      	lsls	r2, r5, #31
 8020638:	d576      	bpl.n	8020728 <_svfprintf_r+0xe70>
 802063a:	2301      	movs	r3, #1
 802063c:	6063      	str	r3, [r4, #4]
 802063e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020640:	f8c4 8000 	str.w	r8, [r4]
 8020644:	3301      	adds	r3, #1
 8020646:	9321      	str	r3, [sp, #132]	; 0x84
 8020648:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802064a:	3301      	adds	r3, #1
 802064c:	2b07      	cmp	r3, #7
 802064e:	9320      	str	r3, [sp, #128]	; 0x80
 8020650:	dc36      	bgt.n	80206c0 <_svfprintf_r+0xe08>
 8020652:	3408      	adds	r4, #8
 8020654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020656:	6023      	str	r3, [r4, #0]
 8020658:	9b08      	ldr	r3, [sp, #32]
 802065a:	6063      	str	r3, [r4, #4]
 802065c:	9a08      	ldr	r2, [sp, #32]
 802065e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020660:	4413      	add	r3, r2
 8020662:	9321      	str	r3, [sp, #132]	; 0x84
 8020664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020666:	3301      	adds	r3, #1
 8020668:	2b07      	cmp	r3, #7
 802066a:	9320      	str	r3, [sp, #128]	; 0x80
 802066c:	dc31      	bgt.n	80206d2 <_svfprintf_r+0xe1a>
 802066e:	3408      	adds	r4, #8
 8020670:	2300      	movs	r3, #0
 8020672:	2200      	movs	r2, #0
 8020674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020678:	f7e0 fa3a 	bl	8000af0 <__aeabi_dcmpeq>
 802067c:	9b03      	ldr	r3, [sp, #12]
 802067e:	1e5e      	subs	r6, r3, #1
 8020680:	2800      	cmp	r0, #0
 8020682:	d12f      	bne.n	80206e4 <_svfprintf_r+0xe2c>
 8020684:	f108 0301 	add.w	r3, r8, #1
 8020688:	e884 0048 	stmia.w	r4, {r3, r6}
 802068c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802068e:	9a03      	ldr	r2, [sp, #12]
 8020690:	3b01      	subs	r3, #1
 8020692:	4413      	add	r3, r2
 8020694:	9321      	str	r3, [sp, #132]	; 0x84
 8020696:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020698:	3301      	adds	r3, #1
 802069a:	2b07      	cmp	r3, #7
 802069c:	9320      	str	r3, [sp, #128]	; 0x80
 802069e:	dd4a      	ble.n	8020736 <_svfprintf_r+0xe7e>
 80206a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80206a2:	4651      	mov	r1, sl
 80206a4:	4658      	mov	r0, fp
 80206a6:	f001 fc45 	bl	8021f34 <__ssprint_r>
 80206aa:	2800      	cmp	r0, #0
 80206ac:	d165      	bne.n	802077a <_svfprintf_r+0xec2>
 80206ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80206b0:	ab1b      	add	r3, sp, #108	; 0x6c
 80206b2:	6023      	str	r3, [r4, #0]
 80206b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206b6:	6063      	str	r3, [r4, #4]
 80206b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80206ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80206bc:	4413      	add	r3, r2
 80206be:	e41c      	b.n	801fefa <_svfprintf_r+0x642>
 80206c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80206c2:	4651      	mov	r1, sl
 80206c4:	4658      	mov	r0, fp
 80206c6:	f001 fc35 	bl	8021f34 <__ssprint_r>
 80206ca:	2800      	cmp	r0, #0
 80206cc:	d155      	bne.n	802077a <_svfprintf_r+0xec2>
 80206ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80206d0:	e7c0      	b.n	8020654 <_svfprintf_r+0xd9c>
 80206d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80206d4:	4651      	mov	r1, sl
 80206d6:	4658      	mov	r0, fp
 80206d8:	f001 fc2c 	bl	8021f34 <__ssprint_r>
 80206dc:	2800      	cmp	r0, #0
 80206de:	d14c      	bne.n	802077a <_svfprintf_r+0xec2>
 80206e0:	ac2c      	add	r4, sp, #176	; 0xb0
 80206e2:	e7c5      	b.n	8020670 <_svfprintf_r+0xdb8>
 80206e4:	2e00      	cmp	r6, #0
 80206e6:	dde3      	ble.n	80206b0 <_svfprintf_r+0xdf8>
 80206e8:	4f59      	ldr	r7, [pc, #356]	; (8020850 <_svfprintf_r+0xf98>)
 80206ea:	f04f 0810 	mov.w	r8, #16
 80206ee:	2e10      	cmp	r6, #16
 80206f0:	6027      	str	r7, [r4, #0]
 80206f2:	dc04      	bgt.n	80206fe <_svfprintf_r+0xe46>
 80206f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80206f6:	6066      	str	r6, [r4, #4]
 80206f8:	441e      	add	r6, r3
 80206fa:	9621      	str	r6, [sp, #132]	; 0x84
 80206fc:	e7cb      	b.n	8020696 <_svfprintf_r+0xdde>
 80206fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020700:	f8c4 8004 	str.w	r8, [r4, #4]
 8020704:	3310      	adds	r3, #16
 8020706:	9321      	str	r3, [sp, #132]	; 0x84
 8020708:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802070a:	3301      	adds	r3, #1
 802070c:	2b07      	cmp	r3, #7
 802070e:	9320      	str	r3, [sp, #128]	; 0x80
 8020710:	dc02      	bgt.n	8020718 <_svfprintf_r+0xe60>
 8020712:	3408      	adds	r4, #8
 8020714:	3e10      	subs	r6, #16
 8020716:	e7ea      	b.n	80206ee <_svfprintf_r+0xe36>
 8020718:	aa1f      	add	r2, sp, #124	; 0x7c
 802071a:	4651      	mov	r1, sl
 802071c:	4658      	mov	r0, fp
 802071e:	f001 fc09 	bl	8021f34 <__ssprint_r>
 8020722:	bb50      	cbnz	r0, 802077a <_svfprintf_r+0xec2>
 8020724:	ac2c      	add	r4, sp, #176	; 0xb0
 8020726:	e7f5      	b.n	8020714 <_svfprintf_r+0xe5c>
 8020728:	2301      	movs	r3, #1
 802072a:	6063      	str	r3, [r4, #4]
 802072c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802072e:	f8c4 8000 	str.w	r8, [r4]
 8020732:	3301      	adds	r3, #1
 8020734:	e7ae      	b.n	8020694 <_svfprintf_r+0xddc>
 8020736:	3408      	adds	r4, #8
 8020738:	e7ba      	b.n	80206b0 <_svfprintf_r+0xdf8>
 802073a:	3408      	adds	r4, #8
 802073c:	f7ff bbed 	b.w	801ff1a <_svfprintf_r+0x662>
 8020740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020744:	1a9d      	subs	r5, r3, r2
 8020746:	2d00      	cmp	r5, #0
 8020748:	f77f abea 	ble.w	801ff20 <_svfprintf_r+0x668>
 802074c:	2610      	movs	r6, #16
 802074e:	4b41      	ldr	r3, [pc, #260]	; (8020854 <_svfprintf_r+0xf9c>)
 8020750:	6023      	str	r3, [r4, #0]
 8020752:	2d10      	cmp	r5, #16
 8020754:	dc1b      	bgt.n	802078e <_svfprintf_r+0xed6>
 8020756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020758:	6065      	str	r5, [r4, #4]
 802075a:	441d      	add	r5, r3
 802075c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802075e:	9521      	str	r5, [sp, #132]	; 0x84
 8020760:	3301      	adds	r3, #1
 8020762:	2b07      	cmp	r3, #7
 8020764:	9320      	str	r3, [sp, #128]	; 0x80
 8020766:	f77f abdb 	ble.w	801ff20 <_svfprintf_r+0x668>
 802076a:	aa1f      	add	r2, sp, #124	; 0x7c
 802076c:	4651      	mov	r1, sl
 802076e:	4658      	mov	r0, fp
 8020770:	f001 fbe0 	bl	8021f34 <__ssprint_r>
 8020774:	2800      	cmp	r0, #0
 8020776:	f43f abd3 	beq.w	801ff20 <_svfprintf_r+0x668>
 802077a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802077e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020784:	bf18      	it	ne
 8020786:	f04f 33ff 	movne.w	r3, #4294967295
 802078a:	f7ff b8b9 	b.w	801f900 <_svfprintf_r+0x48>
 802078e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020790:	6066      	str	r6, [r4, #4]
 8020792:	3310      	adds	r3, #16
 8020794:	9321      	str	r3, [sp, #132]	; 0x84
 8020796:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020798:	3301      	adds	r3, #1
 802079a:	2b07      	cmp	r3, #7
 802079c:	9320      	str	r3, [sp, #128]	; 0x80
 802079e:	dc02      	bgt.n	80207a6 <_svfprintf_r+0xeee>
 80207a0:	3408      	adds	r4, #8
 80207a2:	3d10      	subs	r5, #16
 80207a4:	e7d3      	b.n	802074e <_svfprintf_r+0xe96>
 80207a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80207a8:	4651      	mov	r1, sl
 80207aa:	4658      	mov	r0, fp
 80207ac:	f001 fbc2 	bl	8021f34 <__ssprint_r>
 80207b0:	2800      	cmp	r0, #0
 80207b2:	d1e2      	bne.n	802077a <_svfprintf_r+0xec2>
 80207b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80207b6:	e7f4      	b.n	80207a2 <_svfprintf_r+0xeea>
 80207b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80207ba:	2b00      	cmp	r3, #0
 80207bc:	d0dd      	beq.n	802077a <_svfprintf_r+0xec2>
 80207be:	aa1f      	add	r2, sp, #124	; 0x7c
 80207c0:	4651      	mov	r1, sl
 80207c2:	4658      	mov	r0, fp
 80207c4:	f001 fbb6 	bl	8021f34 <__ssprint_r>
 80207c8:	e7d7      	b.n	802077a <_svfprintf_r+0xec2>
 80207ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80207ce:	4610      	mov	r0, r2
 80207d0:	4619      	mov	r1, r3
 80207d2:	f7e0 f9bf 	bl	8000b54 <__aeabi_dcmpun>
 80207d6:	2800      	cmp	r0, #0
 80207d8:	f43f aa44 	beq.w	801fc64 <_svfprintf_r+0x3ac>
 80207dc:	4b1e      	ldr	r3, [pc, #120]	; (8020858 <_svfprintf_r+0xfa0>)
 80207de:	4a1f      	ldr	r2, [pc, #124]	; (802085c <_svfprintf_r+0xfa4>)
 80207e0:	f7ff ba34 	b.w	801fc4c <_svfprintf_r+0x394>
 80207e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80207e6:	eba3 0308 	sub.w	r3, r3, r8
 80207ea:	9303      	str	r3, [sp, #12]
 80207ec:	f7ff bab5 	b.w	801fd5a <_svfprintf_r+0x4a2>
 80207f0:	ea56 0207 	orrs.w	r2, r6, r7
 80207f4:	950b      	str	r5, [sp, #44]	; 0x2c
 80207f6:	f43f ac2b 	beq.w	8020050 <_svfprintf_r+0x798>
 80207fa:	2b01      	cmp	r3, #1
 80207fc:	f43f ac9d 	beq.w	802013a <_svfprintf_r+0x882>
 8020800:	2b02      	cmp	r3, #2
 8020802:	f43f acbd 	beq.w	8020180 <_svfprintf_r+0x8c8>
 8020806:	ab2c      	add	r3, sp, #176	; 0xb0
 8020808:	08f1      	lsrs	r1, r6, #3
 802080a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 802080e:	08f8      	lsrs	r0, r7, #3
 8020810:	f006 0207 	and.w	r2, r6, #7
 8020814:	4607      	mov	r7, r0
 8020816:	460e      	mov	r6, r1
 8020818:	3230      	adds	r2, #48	; 0x30
 802081a:	ea56 0107 	orrs.w	r1, r6, r7
 802081e:	f103 38ff 	add.w	r8, r3, #4294967295
 8020822:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020826:	f47f ac86 	bne.w	8020136 <_svfprintf_r+0x87e>
 802082a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802082c:	07c9      	lsls	r1, r1, #31
 802082e:	d506      	bpl.n	802083e <_svfprintf_r+0xf86>
 8020830:	2a30      	cmp	r2, #48	; 0x30
 8020832:	d004      	beq.n	802083e <_svfprintf_r+0xf86>
 8020834:	2230      	movs	r2, #48	; 0x30
 8020836:	f808 2c01 	strb.w	r2, [r8, #-1]
 802083a:	f1a3 0802 	sub.w	r8, r3, #2
 802083e:	464e      	mov	r6, r9
 8020840:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8020844:	eba9 0908 	sub.w	r9, r9, r8
 8020848:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802084a:	2700      	movs	r7, #0
 802084c:	f7ff bad1 	b.w	801fdf2 <_svfprintf_r+0x53a>
 8020850:	08031416 	.word	0x08031416
 8020854:	08031406 	.word	0x08031406
 8020858:	080312bb 	.word	0x080312bb
 802085c:	080313e0 	.word	0x080313e0

08020860 <quorem>:
 8020860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020864:	6903      	ldr	r3, [r0, #16]
 8020866:	690c      	ldr	r4, [r1, #16]
 8020868:	429c      	cmp	r4, r3
 802086a:	4680      	mov	r8, r0
 802086c:	f300 8082 	bgt.w	8020974 <quorem+0x114>
 8020870:	3c01      	subs	r4, #1
 8020872:	f101 0714 	add.w	r7, r1, #20
 8020876:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 802087a:	f100 0614 	add.w	r6, r0, #20
 802087e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8020882:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8020886:	eb06 030e 	add.w	r3, r6, lr
 802088a:	3501      	adds	r5, #1
 802088c:	eb07 090e 	add.w	r9, r7, lr
 8020890:	9301      	str	r3, [sp, #4]
 8020892:	fbb0 f5f5 	udiv	r5, r0, r5
 8020896:	b395      	cbz	r5, 80208fe <quorem+0x9e>
 8020898:	f04f 0a00 	mov.w	sl, #0
 802089c:	4638      	mov	r0, r7
 802089e:	46b4      	mov	ip, r6
 80208a0:	46d3      	mov	fp, sl
 80208a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80208a6:	b293      	uxth	r3, r2
 80208a8:	fb05 a303 	mla	r3, r5, r3, sl
 80208ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80208b0:	b29b      	uxth	r3, r3
 80208b2:	ebab 0303 	sub.w	r3, fp, r3
 80208b6:	0c12      	lsrs	r2, r2, #16
 80208b8:	f8bc b000 	ldrh.w	fp, [ip]
 80208bc:	fb05 a202 	mla	r2, r5, r2, sl
 80208c0:	fa13 f38b 	uxtah	r3, r3, fp
 80208c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80208c8:	fa1f fb82 	uxth.w	fp, r2
 80208cc:	f8dc 2000 	ldr.w	r2, [ip]
 80208d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80208d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80208d8:	b29b      	uxth	r3, r3
 80208da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80208de:	4581      	cmp	r9, r0
 80208e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80208e4:	f84c 3b04 	str.w	r3, [ip], #4
 80208e8:	d2db      	bcs.n	80208a2 <quorem+0x42>
 80208ea:	f856 300e 	ldr.w	r3, [r6, lr]
 80208ee:	b933      	cbnz	r3, 80208fe <quorem+0x9e>
 80208f0:	9b01      	ldr	r3, [sp, #4]
 80208f2:	3b04      	subs	r3, #4
 80208f4:	429e      	cmp	r6, r3
 80208f6:	461a      	mov	r2, r3
 80208f8:	d330      	bcc.n	802095c <quorem+0xfc>
 80208fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80208fe:	4640      	mov	r0, r8
 8020900:	f001 fa41 	bl	8021d86 <__mcmp>
 8020904:	2800      	cmp	r0, #0
 8020906:	db25      	blt.n	8020954 <quorem+0xf4>
 8020908:	3501      	adds	r5, #1
 802090a:	4630      	mov	r0, r6
 802090c:	f04f 0e00 	mov.w	lr, #0
 8020910:	f857 2b04 	ldr.w	r2, [r7], #4
 8020914:	f8d0 c000 	ldr.w	ip, [r0]
 8020918:	b293      	uxth	r3, r2
 802091a:	ebae 0303 	sub.w	r3, lr, r3
 802091e:	0c12      	lsrs	r2, r2, #16
 8020920:	fa13 f38c 	uxtah	r3, r3, ip
 8020924:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8020928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802092c:	b29b      	uxth	r3, r3
 802092e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020932:	45b9      	cmp	r9, r7
 8020934:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8020938:	f840 3b04 	str.w	r3, [r0], #4
 802093c:	d2e8      	bcs.n	8020910 <quorem+0xb0>
 802093e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8020942:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8020946:	b92a      	cbnz	r2, 8020954 <quorem+0xf4>
 8020948:	3b04      	subs	r3, #4
 802094a:	429e      	cmp	r6, r3
 802094c:	461a      	mov	r2, r3
 802094e:	d30b      	bcc.n	8020968 <quorem+0x108>
 8020950:	f8c8 4010 	str.w	r4, [r8, #16]
 8020954:	4628      	mov	r0, r5
 8020956:	b003      	add	sp, #12
 8020958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802095c:	6812      	ldr	r2, [r2, #0]
 802095e:	3b04      	subs	r3, #4
 8020960:	2a00      	cmp	r2, #0
 8020962:	d1ca      	bne.n	80208fa <quorem+0x9a>
 8020964:	3c01      	subs	r4, #1
 8020966:	e7c5      	b.n	80208f4 <quorem+0x94>
 8020968:	6812      	ldr	r2, [r2, #0]
 802096a:	3b04      	subs	r3, #4
 802096c:	2a00      	cmp	r2, #0
 802096e:	d1ef      	bne.n	8020950 <quorem+0xf0>
 8020970:	3c01      	subs	r4, #1
 8020972:	e7ea      	b.n	802094a <quorem+0xea>
 8020974:	2000      	movs	r0, #0
 8020976:	e7ee      	b.n	8020956 <quorem+0xf6>

08020978 <_dtoa_r>:
 8020978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802097c:	ec57 6b10 	vmov	r6, r7, d0
 8020980:	b097      	sub	sp, #92	; 0x5c
 8020982:	e9cd 6700 	strd	r6, r7, [sp]
 8020986:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020988:	9107      	str	r1, [sp, #28]
 802098a:	4604      	mov	r4, r0
 802098c:	920a      	str	r2, [sp, #40]	; 0x28
 802098e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020990:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020992:	b93e      	cbnz	r6, 80209a4 <_dtoa_r+0x2c>
 8020994:	2010      	movs	r0, #16
 8020996:	f000 fdcb 	bl	8021530 <malloc>
 802099a:	6260      	str	r0, [r4, #36]	; 0x24
 802099c:	6046      	str	r6, [r0, #4]
 802099e:	6086      	str	r6, [r0, #8]
 80209a0:	6006      	str	r6, [r0, #0]
 80209a2:	60c6      	str	r6, [r0, #12]
 80209a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80209a6:	6819      	ldr	r1, [r3, #0]
 80209a8:	b151      	cbz	r1, 80209c0 <_dtoa_r+0x48>
 80209aa:	685a      	ldr	r2, [r3, #4]
 80209ac:	604a      	str	r2, [r1, #4]
 80209ae:	2301      	movs	r3, #1
 80209b0:	4093      	lsls	r3, r2
 80209b2:	608b      	str	r3, [r1, #8]
 80209b4:	4620      	mov	r0, r4
 80209b6:	f001 f811 	bl	80219dc <_Bfree>
 80209ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80209bc:	2200      	movs	r2, #0
 80209be:	601a      	str	r2, [r3, #0]
 80209c0:	9b01      	ldr	r3, [sp, #4]
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	bfbf      	itttt	lt
 80209c6:	2301      	movlt	r3, #1
 80209c8:	602b      	strlt	r3, [r5, #0]
 80209ca:	9b01      	ldrlt	r3, [sp, #4]
 80209cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80209d0:	bfb2      	itee	lt
 80209d2:	9301      	strlt	r3, [sp, #4]
 80209d4:	2300      	movge	r3, #0
 80209d6:	602b      	strge	r3, [r5, #0]
 80209d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80209dc:	4ba8      	ldr	r3, [pc, #672]	; (8020c80 <_dtoa_r+0x308>)
 80209de:	ea33 0308 	bics.w	r3, r3, r8
 80209e2:	d11b      	bne.n	8020a1c <_dtoa_r+0xa4>
 80209e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80209ea:	6013      	str	r3, [r2, #0]
 80209ec:	9b00      	ldr	r3, [sp, #0]
 80209ee:	b923      	cbnz	r3, 80209fa <_dtoa_r+0x82>
 80209f0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80209f4:	2800      	cmp	r0, #0
 80209f6:	f000 8578 	beq.w	80214ea <_dtoa_r+0xb72>
 80209fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80209fc:	b953      	cbnz	r3, 8020a14 <_dtoa_r+0x9c>
 80209fe:	4ba1      	ldr	r3, [pc, #644]	; (8020c84 <_dtoa_r+0x30c>)
 8020a00:	e021      	b.n	8020a46 <_dtoa_r+0xce>
 8020a02:	4ba1      	ldr	r3, [pc, #644]	; (8020c88 <_dtoa_r+0x310>)
 8020a04:	9302      	str	r3, [sp, #8]
 8020a06:	3308      	adds	r3, #8
 8020a08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020a0a:	6013      	str	r3, [r2, #0]
 8020a0c:	9802      	ldr	r0, [sp, #8]
 8020a0e:	b017      	add	sp, #92	; 0x5c
 8020a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a14:	4b9b      	ldr	r3, [pc, #620]	; (8020c84 <_dtoa_r+0x30c>)
 8020a16:	9302      	str	r3, [sp, #8]
 8020a18:	3303      	adds	r3, #3
 8020a1a:	e7f5      	b.n	8020a08 <_dtoa_r+0x90>
 8020a1c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020a20:	2200      	movs	r2, #0
 8020a22:	2300      	movs	r3, #0
 8020a24:	4630      	mov	r0, r6
 8020a26:	4639      	mov	r1, r7
 8020a28:	f7e0 f862 	bl	8000af0 <__aeabi_dcmpeq>
 8020a2c:	4681      	mov	r9, r0
 8020a2e:	b160      	cbz	r0, 8020a4a <_dtoa_r+0xd2>
 8020a30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020a32:	2301      	movs	r3, #1
 8020a34:	6013      	str	r3, [r2, #0]
 8020a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020a38:	2b00      	cmp	r3, #0
 8020a3a:	f000 8553 	beq.w	80214e4 <_dtoa_r+0xb6c>
 8020a3e:	4b93      	ldr	r3, [pc, #588]	; (8020c8c <_dtoa_r+0x314>)
 8020a40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020a42:	6013      	str	r3, [r2, #0]
 8020a44:	3b01      	subs	r3, #1
 8020a46:	9302      	str	r3, [sp, #8]
 8020a48:	e7e0      	b.n	8020a0c <_dtoa_r+0x94>
 8020a4a:	aa14      	add	r2, sp, #80	; 0x50
 8020a4c:	a915      	add	r1, sp, #84	; 0x54
 8020a4e:	ec47 6b10 	vmov	d0, r6, r7
 8020a52:	4620      	mov	r0, r4
 8020a54:	f001 fa0f 	bl	8021e76 <__d2b>
 8020a58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8020a5c:	4682      	mov	sl, r0
 8020a5e:	2d00      	cmp	r5, #0
 8020a60:	d07e      	beq.n	8020b60 <_dtoa_r+0x1e8>
 8020a62:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020a66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8020a6a:	4630      	mov	r0, r6
 8020a6c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8020a70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020a74:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8020a78:	2200      	movs	r2, #0
 8020a7a:	4b85      	ldr	r3, [pc, #532]	; (8020c90 <_dtoa_r+0x318>)
 8020a7c:	f7df fc1c 	bl	80002b8 <__aeabi_dsub>
 8020a80:	a379      	add	r3, pc, #484	; (adr r3, 8020c68 <_dtoa_r+0x2f0>)
 8020a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a86:	f7df fdcb 	bl	8000620 <__aeabi_dmul>
 8020a8a:	a379      	add	r3, pc, #484	; (adr r3, 8020c70 <_dtoa_r+0x2f8>)
 8020a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a90:	f7df fc14 	bl	80002bc <__adddf3>
 8020a94:	4606      	mov	r6, r0
 8020a96:	4628      	mov	r0, r5
 8020a98:	460f      	mov	r7, r1
 8020a9a:	f7df fd5b 	bl	8000554 <__aeabi_i2d>
 8020a9e:	a376      	add	r3, pc, #472	; (adr r3, 8020c78 <_dtoa_r+0x300>)
 8020aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aa4:	f7df fdbc 	bl	8000620 <__aeabi_dmul>
 8020aa8:	4602      	mov	r2, r0
 8020aaa:	460b      	mov	r3, r1
 8020aac:	4630      	mov	r0, r6
 8020aae:	4639      	mov	r1, r7
 8020ab0:	f7df fc04 	bl	80002bc <__adddf3>
 8020ab4:	4606      	mov	r6, r0
 8020ab6:	460f      	mov	r7, r1
 8020ab8:	f7e0 f862 	bl	8000b80 <__aeabi_d2iz>
 8020abc:	2200      	movs	r2, #0
 8020abe:	4683      	mov	fp, r0
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	4630      	mov	r0, r6
 8020ac4:	4639      	mov	r1, r7
 8020ac6:	f7e0 f81d 	bl	8000b04 <__aeabi_dcmplt>
 8020aca:	b158      	cbz	r0, 8020ae4 <_dtoa_r+0x16c>
 8020acc:	4658      	mov	r0, fp
 8020ace:	f7df fd41 	bl	8000554 <__aeabi_i2d>
 8020ad2:	4602      	mov	r2, r0
 8020ad4:	460b      	mov	r3, r1
 8020ad6:	4630      	mov	r0, r6
 8020ad8:	4639      	mov	r1, r7
 8020ada:	f7e0 f809 	bl	8000af0 <__aeabi_dcmpeq>
 8020ade:	b908      	cbnz	r0, 8020ae4 <_dtoa_r+0x16c>
 8020ae0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020ae4:	f1bb 0f16 	cmp.w	fp, #22
 8020ae8:	d859      	bhi.n	8020b9e <_dtoa_r+0x226>
 8020aea:	496a      	ldr	r1, [pc, #424]	; (8020c94 <_dtoa_r+0x31c>)
 8020aec:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8020af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020af8:	f7e0 f822 	bl	8000b40 <__aeabi_dcmpgt>
 8020afc:	2800      	cmp	r0, #0
 8020afe:	d050      	beq.n	8020ba2 <_dtoa_r+0x22a>
 8020b00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020b04:	2300      	movs	r3, #0
 8020b06:	930e      	str	r3, [sp, #56]	; 0x38
 8020b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020b0a:	1b5d      	subs	r5, r3, r5
 8020b0c:	1e6b      	subs	r3, r5, #1
 8020b0e:	9306      	str	r3, [sp, #24]
 8020b10:	bf45      	ittet	mi
 8020b12:	f1c5 0301 	rsbmi	r3, r5, #1
 8020b16:	9305      	strmi	r3, [sp, #20]
 8020b18:	2300      	movpl	r3, #0
 8020b1a:	2300      	movmi	r3, #0
 8020b1c:	bf4c      	ite	mi
 8020b1e:	9306      	strmi	r3, [sp, #24]
 8020b20:	9305      	strpl	r3, [sp, #20]
 8020b22:	f1bb 0f00 	cmp.w	fp, #0
 8020b26:	db3e      	blt.n	8020ba6 <_dtoa_r+0x22e>
 8020b28:	9b06      	ldr	r3, [sp, #24]
 8020b2a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8020b2e:	445b      	add	r3, fp
 8020b30:	9306      	str	r3, [sp, #24]
 8020b32:	2300      	movs	r3, #0
 8020b34:	9308      	str	r3, [sp, #32]
 8020b36:	9b07      	ldr	r3, [sp, #28]
 8020b38:	2b09      	cmp	r3, #9
 8020b3a:	f200 80af 	bhi.w	8020c9c <_dtoa_r+0x324>
 8020b3e:	2b05      	cmp	r3, #5
 8020b40:	bfc4      	itt	gt
 8020b42:	3b04      	subgt	r3, #4
 8020b44:	9307      	strgt	r3, [sp, #28]
 8020b46:	9b07      	ldr	r3, [sp, #28]
 8020b48:	f1a3 0302 	sub.w	r3, r3, #2
 8020b4c:	bfcc      	ite	gt
 8020b4e:	2600      	movgt	r6, #0
 8020b50:	2601      	movle	r6, #1
 8020b52:	2b03      	cmp	r3, #3
 8020b54:	f200 80ae 	bhi.w	8020cb4 <_dtoa_r+0x33c>
 8020b58:	e8df f003 	tbb	[pc, r3]
 8020b5c:	772f8482 	.word	0x772f8482
 8020b60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b62:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020b64:	441d      	add	r5, r3
 8020b66:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020b6a:	2b20      	cmp	r3, #32
 8020b6c:	dd11      	ble.n	8020b92 <_dtoa_r+0x21a>
 8020b6e:	9a00      	ldr	r2, [sp, #0]
 8020b70:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8020b74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8020b78:	fa22 f000 	lsr.w	r0, r2, r0
 8020b7c:	fa08 f303 	lsl.w	r3, r8, r3
 8020b80:	4318      	orrs	r0, r3
 8020b82:	f7df fcd7 	bl	8000534 <__aeabi_ui2d>
 8020b86:	2301      	movs	r3, #1
 8020b88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8020b8c:	3d01      	subs	r5, #1
 8020b8e:	9312      	str	r3, [sp, #72]	; 0x48
 8020b90:	e772      	b.n	8020a78 <_dtoa_r+0x100>
 8020b92:	f1c3 0020 	rsb	r0, r3, #32
 8020b96:	9b00      	ldr	r3, [sp, #0]
 8020b98:	fa03 f000 	lsl.w	r0, r3, r0
 8020b9c:	e7f1      	b.n	8020b82 <_dtoa_r+0x20a>
 8020b9e:	2301      	movs	r3, #1
 8020ba0:	e7b1      	b.n	8020b06 <_dtoa_r+0x18e>
 8020ba2:	900e      	str	r0, [sp, #56]	; 0x38
 8020ba4:	e7b0      	b.n	8020b08 <_dtoa_r+0x190>
 8020ba6:	9b05      	ldr	r3, [sp, #20]
 8020ba8:	eba3 030b 	sub.w	r3, r3, fp
 8020bac:	9305      	str	r3, [sp, #20]
 8020bae:	f1cb 0300 	rsb	r3, fp, #0
 8020bb2:	9308      	str	r3, [sp, #32]
 8020bb4:	2300      	movs	r3, #0
 8020bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8020bb8:	e7bd      	b.n	8020b36 <_dtoa_r+0x1be>
 8020bba:	2301      	movs	r3, #1
 8020bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8020bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	dd7a      	ble.n	8020cba <_dtoa_r+0x342>
 8020bc4:	9304      	str	r3, [sp, #16]
 8020bc6:	9303      	str	r3, [sp, #12]
 8020bc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8020bca:	2200      	movs	r2, #0
 8020bcc:	606a      	str	r2, [r5, #4]
 8020bce:	2104      	movs	r1, #4
 8020bd0:	f101 0214 	add.w	r2, r1, #20
 8020bd4:	429a      	cmp	r2, r3
 8020bd6:	d975      	bls.n	8020cc4 <_dtoa_r+0x34c>
 8020bd8:	6869      	ldr	r1, [r5, #4]
 8020bda:	4620      	mov	r0, r4
 8020bdc:	f000 feca 	bl	8021974 <_Balloc>
 8020be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020be2:	6028      	str	r0, [r5, #0]
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	9302      	str	r3, [sp, #8]
 8020be8:	9b03      	ldr	r3, [sp, #12]
 8020bea:	2b0e      	cmp	r3, #14
 8020bec:	f200 80e5 	bhi.w	8020dba <_dtoa_r+0x442>
 8020bf0:	2e00      	cmp	r6, #0
 8020bf2:	f000 80e2 	beq.w	8020dba <_dtoa_r+0x442>
 8020bf6:	ed9d 7b00 	vldr	d7, [sp]
 8020bfa:	f1bb 0f00 	cmp.w	fp, #0
 8020bfe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8020c02:	dd74      	ble.n	8020cee <_dtoa_r+0x376>
 8020c04:	4a23      	ldr	r2, [pc, #140]	; (8020c94 <_dtoa_r+0x31c>)
 8020c06:	f00b 030f 	and.w	r3, fp, #15
 8020c0a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8020c0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020c12:	06f0      	lsls	r0, r6, #27
 8020c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020c18:	d559      	bpl.n	8020cce <_dtoa_r+0x356>
 8020c1a:	4b1f      	ldr	r3, [pc, #124]	; (8020c98 <_dtoa_r+0x320>)
 8020c1c:	ec51 0b17 	vmov	r0, r1, d7
 8020c20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020c24:	f7df fe26 	bl	8000874 <__aeabi_ddiv>
 8020c28:	e9cd 0100 	strd	r0, r1, [sp]
 8020c2c:	f006 060f 	and.w	r6, r6, #15
 8020c30:	2503      	movs	r5, #3
 8020c32:	4f19      	ldr	r7, [pc, #100]	; (8020c98 <_dtoa_r+0x320>)
 8020c34:	2e00      	cmp	r6, #0
 8020c36:	d14c      	bne.n	8020cd2 <_dtoa_r+0x35a>
 8020c38:	4642      	mov	r2, r8
 8020c3a:	464b      	mov	r3, r9
 8020c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020c40:	f7df fe18 	bl	8000874 <__aeabi_ddiv>
 8020c44:	e9cd 0100 	strd	r0, r1, [sp]
 8020c48:	e06a      	b.n	8020d20 <_dtoa_r+0x3a8>
 8020c4a:	2301      	movs	r3, #1
 8020c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8020c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c50:	445b      	add	r3, fp
 8020c52:	9304      	str	r3, [sp, #16]
 8020c54:	3301      	adds	r3, #1
 8020c56:	2b01      	cmp	r3, #1
 8020c58:	9303      	str	r3, [sp, #12]
 8020c5a:	bfb8      	it	lt
 8020c5c:	2301      	movlt	r3, #1
 8020c5e:	e7b3      	b.n	8020bc8 <_dtoa_r+0x250>
 8020c60:	2300      	movs	r3, #0
 8020c62:	e7ab      	b.n	8020bbc <_dtoa_r+0x244>
 8020c64:	2300      	movs	r3, #0
 8020c66:	e7f1      	b.n	8020c4c <_dtoa_r+0x2d4>
 8020c68:	636f4361 	.word	0x636f4361
 8020c6c:	3fd287a7 	.word	0x3fd287a7
 8020c70:	8b60c8b3 	.word	0x8b60c8b3
 8020c74:	3fc68a28 	.word	0x3fc68a28
 8020c78:	509f79fb 	.word	0x509f79fb
 8020c7c:	3fd34413 	.word	0x3fd34413
 8020c80:	7ff00000 	.word	0x7ff00000
 8020c84:	0803142f 	.word	0x0803142f
 8020c88:	08031426 	.word	0x08031426
 8020c8c:	080312b6 	.word	0x080312b6
 8020c90:	3ff80000 	.word	0x3ff80000
 8020c94:	08031460 	.word	0x08031460
 8020c98:	08031438 	.word	0x08031438
 8020c9c:	2601      	movs	r6, #1
 8020c9e:	2300      	movs	r3, #0
 8020ca0:	9307      	str	r3, [sp, #28]
 8020ca2:	9609      	str	r6, [sp, #36]	; 0x24
 8020ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8020ca8:	9304      	str	r3, [sp, #16]
 8020caa:	9303      	str	r3, [sp, #12]
 8020cac:	2200      	movs	r2, #0
 8020cae:	2312      	movs	r3, #18
 8020cb0:	920a      	str	r2, [sp, #40]	; 0x28
 8020cb2:	e789      	b.n	8020bc8 <_dtoa_r+0x250>
 8020cb4:	2301      	movs	r3, #1
 8020cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8020cb8:	e7f4      	b.n	8020ca4 <_dtoa_r+0x32c>
 8020cba:	2301      	movs	r3, #1
 8020cbc:	9304      	str	r3, [sp, #16]
 8020cbe:	9303      	str	r3, [sp, #12]
 8020cc0:	461a      	mov	r2, r3
 8020cc2:	e7f5      	b.n	8020cb0 <_dtoa_r+0x338>
 8020cc4:	686a      	ldr	r2, [r5, #4]
 8020cc6:	3201      	adds	r2, #1
 8020cc8:	606a      	str	r2, [r5, #4]
 8020cca:	0049      	lsls	r1, r1, #1
 8020ccc:	e780      	b.n	8020bd0 <_dtoa_r+0x258>
 8020cce:	2502      	movs	r5, #2
 8020cd0:	e7af      	b.n	8020c32 <_dtoa_r+0x2ba>
 8020cd2:	07f1      	lsls	r1, r6, #31
 8020cd4:	d508      	bpl.n	8020ce8 <_dtoa_r+0x370>
 8020cd6:	4640      	mov	r0, r8
 8020cd8:	4649      	mov	r1, r9
 8020cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020cde:	f7df fc9f 	bl	8000620 <__aeabi_dmul>
 8020ce2:	3501      	adds	r5, #1
 8020ce4:	4680      	mov	r8, r0
 8020ce6:	4689      	mov	r9, r1
 8020ce8:	1076      	asrs	r6, r6, #1
 8020cea:	3708      	adds	r7, #8
 8020cec:	e7a2      	b.n	8020c34 <_dtoa_r+0x2bc>
 8020cee:	f000 809d 	beq.w	8020e2c <_dtoa_r+0x4b4>
 8020cf2:	f1cb 0600 	rsb	r6, fp, #0
 8020cf6:	4b9f      	ldr	r3, [pc, #636]	; (8020f74 <_dtoa_r+0x5fc>)
 8020cf8:	4f9f      	ldr	r7, [pc, #636]	; (8020f78 <_dtoa_r+0x600>)
 8020cfa:	f006 020f 	and.w	r2, r6, #15
 8020cfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020d0a:	f7df fc89 	bl	8000620 <__aeabi_dmul>
 8020d0e:	e9cd 0100 	strd	r0, r1, [sp]
 8020d12:	1136      	asrs	r6, r6, #4
 8020d14:	2300      	movs	r3, #0
 8020d16:	2502      	movs	r5, #2
 8020d18:	2e00      	cmp	r6, #0
 8020d1a:	d17c      	bne.n	8020e16 <_dtoa_r+0x49e>
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d191      	bne.n	8020c44 <_dtoa_r+0x2cc>
 8020d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	f000 8084 	beq.w	8020e30 <_dtoa_r+0x4b8>
 8020d28:	e9dd 8900 	ldrd	r8, r9, [sp]
 8020d2c:	2200      	movs	r2, #0
 8020d2e:	4b93      	ldr	r3, [pc, #588]	; (8020f7c <_dtoa_r+0x604>)
 8020d30:	4640      	mov	r0, r8
 8020d32:	4649      	mov	r1, r9
 8020d34:	f7df fee6 	bl	8000b04 <__aeabi_dcmplt>
 8020d38:	2800      	cmp	r0, #0
 8020d3a:	d079      	beq.n	8020e30 <_dtoa_r+0x4b8>
 8020d3c:	9b03      	ldr	r3, [sp, #12]
 8020d3e:	2b00      	cmp	r3, #0
 8020d40:	d076      	beq.n	8020e30 <_dtoa_r+0x4b8>
 8020d42:	9b04      	ldr	r3, [sp, #16]
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	dd34      	ble.n	8020db2 <_dtoa_r+0x43a>
 8020d48:	2200      	movs	r2, #0
 8020d4a:	4b8d      	ldr	r3, [pc, #564]	; (8020f80 <_dtoa_r+0x608>)
 8020d4c:	4640      	mov	r0, r8
 8020d4e:	4649      	mov	r1, r9
 8020d50:	f7df fc66 	bl	8000620 <__aeabi_dmul>
 8020d54:	e9cd 0100 	strd	r0, r1, [sp]
 8020d58:	9e04      	ldr	r6, [sp, #16]
 8020d5a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8020d5e:	3501      	adds	r5, #1
 8020d60:	4628      	mov	r0, r5
 8020d62:	f7df fbf7 	bl	8000554 <__aeabi_i2d>
 8020d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020d6a:	f7df fc59 	bl	8000620 <__aeabi_dmul>
 8020d6e:	2200      	movs	r2, #0
 8020d70:	4b84      	ldr	r3, [pc, #528]	; (8020f84 <_dtoa_r+0x60c>)
 8020d72:	f7df faa3 	bl	80002bc <__adddf3>
 8020d76:	4680      	mov	r8, r0
 8020d78:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8020d7c:	2e00      	cmp	r6, #0
 8020d7e:	d15a      	bne.n	8020e36 <_dtoa_r+0x4be>
 8020d80:	2200      	movs	r2, #0
 8020d82:	4b81      	ldr	r3, [pc, #516]	; (8020f88 <_dtoa_r+0x610>)
 8020d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020d88:	f7df fa96 	bl	80002b8 <__aeabi_dsub>
 8020d8c:	4642      	mov	r2, r8
 8020d8e:	464b      	mov	r3, r9
 8020d90:	e9cd 0100 	strd	r0, r1, [sp]
 8020d94:	f7df fed4 	bl	8000b40 <__aeabi_dcmpgt>
 8020d98:	2800      	cmp	r0, #0
 8020d9a:	f040 829b 	bne.w	80212d4 <_dtoa_r+0x95c>
 8020d9e:	4642      	mov	r2, r8
 8020da0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020da4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020da8:	f7df feac 	bl	8000b04 <__aeabi_dcmplt>
 8020dac:	2800      	cmp	r0, #0
 8020dae:	f040 828f 	bne.w	80212d0 <_dtoa_r+0x958>
 8020db2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8020db6:	e9cd 2300 	strd	r2, r3, [sp]
 8020dba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	f2c0 8150 	blt.w	8021062 <_dtoa_r+0x6ea>
 8020dc2:	f1bb 0f0e 	cmp.w	fp, #14
 8020dc6:	f300 814c 	bgt.w	8021062 <_dtoa_r+0x6ea>
 8020dca:	4b6a      	ldr	r3, [pc, #424]	; (8020f74 <_dtoa_r+0x5fc>)
 8020dcc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020dd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020dd6:	2b00      	cmp	r3, #0
 8020dd8:	f280 80da 	bge.w	8020f90 <_dtoa_r+0x618>
 8020ddc:	9b03      	ldr	r3, [sp, #12]
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	f300 80d6 	bgt.w	8020f90 <_dtoa_r+0x618>
 8020de4:	f040 8273 	bne.w	80212ce <_dtoa_r+0x956>
 8020de8:	2200      	movs	r2, #0
 8020dea:	4b67      	ldr	r3, [pc, #412]	; (8020f88 <_dtoa_r+0x610>)
 8020dec:	4640      	mov	r0, r8
 8020dee:	4649      	mov	r1, r9
 8020df0:	f7df fc16 	bl	8000620 <__aeabi_dmul>
 8020df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020df8:	f7df fe98 	bl	8000b2c <__aeabi_dcmpge>
 8020dfc:	9e03      	ldr	r6, [sp, #12]
 8020dfe:	4637      	mov	r7, r6
 8020e00:	2800      	cmp	r0, #0
 8020e02:	f040 824a 	bne.w	802129a <_dtoa_r+0x922>
 8020e06:	9b02      	ldr	r3, [sp, #8]
 8020e08:	9a02      	ldr	r2, [sp, #8]
 8020e0a:	1c5d      	adds	r5, r3, #1
 8020e0c:	2331      	movs	r3, #49	; 0x31
 8020e0e:	7013      	strb	r3, [r2, #0]
 8020e10:	f10b 0b01 	add.w	fp, fp, #1
 8020e14:	e245      	b.n	80212a2 <_dtoa_r+0x92a>
 8020e16:	07f2      	lsls	r2, r6, #31
 8020e18:	d505      	bpl.n	8020e26 <_dtoa_r+0x4ae>
 8020e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020e1e:	f7df fbff 	bl	8000620 <__aeabi_dmul>
 8020e22:	3501      	adds	r5, #1
 8020e24:	2301      	movs	r3, #1
 8020e26:	1076      	asrs	r6, r6, #1
 8020e28:	3708      	adds	r7, #8
 8020e2a:	e775      	b.n	8020d18 <_dtoa_r+0x3a0>
 8020e2c:	2502      	movs	r5, #2
 8020e2e:	e777      	b.n	8020d20 <_dtoa_r+0x3a8>
 8020e30:	465f      	mov	r7, fp
 8020e32:	9e03      	ldr	r6, [sp, #12]
 8020e34:	e794      	b.n	8020d60 <_dtoa_r+0x3e8>
 8020e36:	9a02      	ldr	r2, [sp, #8]
 8020e38:	4b4e      	ldr	r3, [pc, #312]	; (8020f74 <_dtoa_r+0x5fc>)
 8020e3a:	4432      	add	r2, r6
 8020e3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8020e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e40:	1e71      	subs	r1, r6, #1
 8020e42:	2a00      	cmp	r2, #0
 8020e44:	d048      	beq.n	8020ed8 <_dtoa_r+0x560>
 8020e46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8020e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e4e:	2000      	movs	r0, #0
 8020e50:	494e      	ldr	r1, [pc, #312]	; (8020f8c <_dtoa_r+0x614>)
 8020e52:	f7df fd0f 	bl	8000874 <__aeabi_ddiv>
 8020e56:	4642      	mov	r2, r8
 8020e58:	464b      	mov	r3, r9
 8020e5a:	f7df fa2d 	bl	80002b8 <__aeabi_dsub>
 8020e5e:	9d02      	ldr	r5, [sp, #8]
 8020e60:	4680      	mov	r8, r0
 8020e62:	4689      	mov	r9, r1
 8020e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e68:	f7df fe8a 	bl	8000b80 <__aeabi_d2iz>
 8020e6c:	4606      	mov	r6, r0
 8020e6e:	f7df fb71 	bl	8000554 <__aeabi_i2d>
 8020e72:	4602      	mov	r2, r0
 8020e74:	460b      	mov	r3, r1
 8020e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e7a:	f7df fa1d 	bl	80002b8 <__aeabi_dsub>
 8020e7e:	3630      	adds	r6, #48	; 0x30
 8020e80:	f805 6b01 	strb.w	r6, [r5], #1
 8020e84:	4642      	mov	r2, r8
 8020e86:	464b      	mov	r3, r9
 8020e88:	e9cd 0100 	strd	r0, r1, [sp]
 8020e8c:	f7df fe3a 	bl	8000b04 <__aeabi_dcmplt>
 8020e90:	2800      	cmp	r0, #0
 8020e92:	d165      	bne.n	8020f60 <_dtoa_r+0x5e8>
 8020e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020e98:	2000      	movs	r0, #0
 8020e9a:	4938      	ldr	r1, [pc, #224]	; (8020f7c <_dtoa_r+0x604>)
 8020e9c:	f7df fa0c 	bl	80002b8 <__aeabi_dsub>
 8020ea0:	4642      	mov	r2, r8
 8020ea2:	464b      	mov	r3, r9
 8020ea4:	f7df fe2e 	bl	8000b04 <__aeabi_dcmplt>
 8020ea8:	2800      	cmp	r0, #0
 8020eaa:	f040 80ba 	bne.w	8021022 <_dtoa_r+0x6aa>
 8020eae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020eb0:	429d      	cmp	r5, r3
 8020eb2:	f43f af7e 	beq.w	8020db2 <_dtoa_r+0x43a>
 8020eb6:	2200      	movs	r2, #0
 8020eb8:	4b31      	ldr	r3, [pc, #196]	; (8020f80 <_dtoa_r+0x608>)
 8020eba:	4640      	mov	r0, r8
 8020ebc:	4649      	mov	r1, r9
 8020ebe:	f7df fbaf 	bl	8000620 <__aeabi_dmul>
 8020ec2:	2200      	movs	r2, #0
 8020ec4:	4680      	mov	r8, r0
 8020ec6:	4689      	mov	r9, r1
 8020ec8:	4b2d      	ldr	r3, [pc, #180]	; (8020f80 <_dtoa_r+0x608>)
 8020eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020ece:	f7df fba7 	bl	8000620 <__aeabi_dmul>
 8020ed2:	e9cd 0100 	strd	r0, r1, [sp]
 8020ed6:	e7c5      	b.n	8020e64 <_dtoa_r+0x4ec>
 8020ed8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8020edc:	4642      	mov	r2, r8
 8020ede:	464b      	mov	r3, r9
 8020ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ee4:	f7df fb9c 	bl	8000620 <__aeabi_dmul>
 8020ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8020eec:	9d02      	ldr	r5, [sp, #8]
 8020eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020ef2:	f7df fe45 	bl	8000b80 <__aeabi_d2iz>
 8020ef6:	4606      	mov	r6, r0
 8020ef8:	f7df fb2c 	bl	8000554 <__aeabi_i2d>
 8020efc:	3630      	adds	r6, #48	; 0x30
 8020efe:	4602      	mov	r2, r0
 8020f00:	460b      	mov	r3, r1
 8020f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020f06:	f7df f9d7 	bl	80002b8 <__aeabi_dsub>
 8020f0a:	f805 6b01 	strb.w	r6, [r5], #1
 8020f0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020f10:	42ab      	cmp	r3, r5
 8020f12:	4680      	mov	r8, r0
 8020f14:	4689      	mov	r9, r1
 8020f16:	f04f 0200 	mov.w	r2, #0
 8020f1a:	d125      	bne.n	8020f68 <_dtoa_r+0x5f0>
 8020f1c:	4b1b      	ldr	r3, [pc, #108]	; (8020f8c <_dtoa_r+0x614>)
 8020f1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8020f22:	f7df f9cb 	bl	80002bc <__adddf3>
 8020f26:	4602      	mov	r2, r0
 8020f28:	460b      	mov	r3, r1
 8020f2a:	4640      	mov	r0, r8
 8020f2c:	4649      	mov	r1, r9
 8020f2e:	f7df fe07 	bl	8000b40 <__aeabi_dcmpgt>
 8020f32:	2800      	cmp	r0, #0
 8020f34:	d175      	bne.n	8021022 <_dtoa_r+0x6aa>
 8020f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8020f3a:	2000      	movs	r0, #0
 8020f3c:	4913      	ldr	r1, [pc, #76]	; (8020f8c <_dtoa_r+0x614>)
 8020f3e:	f7df f9bb 	bl	80002b8 <__aeabi_dsub>
 8020f42:	4602      	mov	r2, r0
 8020f44:	460b      	mov	r3, r1
 8020f46:	4640      	mov	r0, r8
 8020f48:	4649      	mov	r1, r9
 8020f4a:	f7df fddb 	bl	8000b04 <__aeabi_dcmplt>
 8020f4e:	2800      	cmp	r0, #0
 8020f50:	f43f af2f 	beq.w	8020db2 <_dtoa_r+0x43a>
 8020f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020f58:	2b30      	cmp	r3, #48	; 0x30
 8020f5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8020f5e:	d001      	beq.n	8020f64 <_dtoa_r+0x5ec>
 8020f60:	46bb      	mov	fp, r7
 8020f62:	e04d      	b.n	8021000 <_dtoa_r+0x688>
 8020f64:	4615      	mov	r5, r2
 8020f66:	e7f5      	b.n	8020f54 <_dtoa_r+0x5dc>
 8020f68:	4b05      	ldr	r3, [pc, #20]	; (8020f80 <_dtoa_r+0x608>)
 8020f6a:	f7df fb59 	bl	8000620 <__aeabi_dmul>
 8020f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8020f72:	e7bc      	b.n	8020eee <_dtoa_r+0x576>
 8020f74:	08031460 	.word	0x08031460
 8020f78:	08031438 	.word	0x08031438
 8020f7c:	3ff00000 	.word	0x3ff00000
 8020f80:	40240000 	.word	0x40240000
 8020f84:	401c0000 	.word	0x401c0000
 8020f88:	40140000 	.word	0x40140000
 8020f8c:	3fe00000 	.word	0x3fe00000
 8020f90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020f94:	9d02      	ldr	r5, [sp, #8]
 8020f96:	4642      	mov	r2, r8
 8020f98:	464b      	mov	r3, r9
 8020f9a:	4630      	mov	r0, r6
 8020f9c:	4639      	mov	r1, r7
 8020f9e:	f7df fc69 	bl	8000874 <__aeabi_ddiv>
 8020fa2:	f7df fded 	bl	8000b80 <__aeabi_d2iz>
 8020fa6:	9000      	str	r0, [sp, #0]
 8020fa8:	f7df fad4 	bl	8000554 <__aeabi_i2d>
 8020fac:	4642      	mov	r2, r8
 8020fae:	464b      	mov	r3, r9
 8020fb0:	f7df fb36 	bl	8000620 <__aeabi_dmul>
 8020fb4:	4602      	mov	r2, r0
 8020fb6:	460b      	mov	r3, r1
 8020fb8:	4630      	mov	r0, r6
 8020fba:	4639      	mov	r1, r7
 8020fbc:	f7df f97c 	bl	80002b8 <__aeabi_dsub>
 8020fc0:	9e00      	ldr	r6, [sp, #0]
 8020fc2:	9f03      	ldr	r7, [sp, #12]
 8020fc4:	3630      	adds	r6, #48	; 0x30
 8020fc6:	f805 6b01 	strb.w	r6, [r5], #1
 8020fca:	9e02      	ldr	r6, [sp, #8]
 8020fcc:	1bae      	subs	r6, r5, r6
 8020fce:	42b7      	cmp	r7, r6
 8020fd0:	4602      	mov	r2, r0
 8020fd2:	460b      	mov	r3, r1
 8020fd4:	d138      	bne.n	8021048 <_dtoa_r+0x6d0>
 8020fd6:	f7df f971 	bl	80002bc <__adddf3>
 8020fda:	4606      	mov	r6, r0
 8020fdc:	460f      	mov	r7, r1
 8020fde:	4602      	mov	r2, r0
 8020fe0:	460b      	mov	r3, r1
 8020fe2:	4640      	mov	r0, r8
 8020fe4:	4649      	mov	r1, r9
 8020fe6:	f7df fd8d 	bl	8000b04 <__aeabi_dcmplt>
 8020fea:	b9c8      	cbnz	r0, 8021020 <_dtoa_r+0x6a8>
 8020fec:	4632      	mov	r2, r6
 8020fee:	463b      	mov	r3, r7
 8020ff0:	4640      	mov	r0, r8
 8020ff2:	4649      	mov	r1, r9
 8020ff4:	f7df fd7c 	bl	8000af0 <__aeabi_dcmpeq>
 8020ff8:	b110      	cbz	r0, 8021000 <_dtoa_r+0x688>
 8020ffa:	9b00      	ldr	r3, [sp, #0]
 8020ffc:	07db      	lsls	r3, r3, #31
 8020ffe:	d40f      	bmi.n	8021020 <_dtoa_r+0x6a8>
 8021000:	4651      	mov	r1, sl
 8021002:	4620      	mov	r0, r4
 8021004:	f000 fcea 	bl	80219dc <_Bfree>
 8021008:	2300      	movs	r3, #0
 802100a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802100c:	702b      	strb	r3, [r5, #0]
 802100e:	f10b 0301 	add.w	r3, fp, #1
 8021012:	6013      	str	r3, [r2, #0]
 8021014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021016:	2b00      	cmp	r3, #0
 8021018:	f43f acf8 	beq.w	8020a0c <_dtoa_r+0x94>
 802101c:	601d      	str	r5, [r3, #0]
 802101e:	e4f5      	b.n	8020a0c <_dtoa_r+0x94>
 8021020:	465f      	mov	r7, fp
 8021022:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021026:	2a39      	cmp	r2, #57	; 0x39
 8021028:	f105 33ff 	add.w	r3, r5, #4294967295
 802102c:	d106      	bne.n	802103c <_dtoa_r+0x6c4>
 802102e:	9a02      	ldr	r2, [sp, #8]
 8021030:	429a      	cmp	r2, r3
 8021032:	d107      	bne.n	8021044 <_dtoa_r+0x6cc>
 8021034:	2330      	movs	r3, #48	; 0x30
 8021036:	7013      	strb	r3, [r2, #0]
 8021038:	3701      	adds	r7, #1
 802103a:	4613      	mov	r3, r2
 802103c:	781a      	ldrb	r2, [r3, #0]
 802103e:	3201      	adds	r2, #1
 8021040:	701a      	strb	r2, [r3, #0]
 8021042:	e78d      	b.n	8020f60 <_dtoa_r+0x5e8>
 8021044:	461d      	mov	r5, r3
 8021046:	e7ec      	b.n	8021022 <_dtoa_r+0x6aa>
 8021048:	2200      	movs	r2, #0
 802104a:	4ba4      	ldr	r3, [pc, #656]	; (80212dc <_dtoa_r+0x964>)
 802104c:	f7df fae8 	bl	8000620 <__aeabi_dmul>
 8021050:	2200      	movs	r2, #0
 8021052:	2300      	movs	r3, #0
 8021054:	4606      	mov	r6, r0
 8021056:	460f      	mov	r7, r1
 8021058:	f7df fd4a 	bl	8000af0 <__aeabi_dcmpeq>
 802105c:	2800      	cmp	r0, #0
 802105e:	d09a      	beq.n	8020f96 <_dtoa_r+0x61e>
 8021060:	e7ce      	b.n	8021000 <_dtoa_r+0x688>
 8021062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021064:	2a00      	cmp	r2, #0
 8021066:	f000 80cd 	beq.w	8021204 <_dtoa_r+0x88c>
 802106a:	9a07      	ldr	r2, [sp, #28]
 802106c:	2a01      	cmp	r2, #1
 802106e:	f300 80af 	bgt.w	80211d0 <_dtoa_r+0x858>
 8021072:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021074:	2a00      	cmp	r2, #0
 8021076:	f000 80a7 	beq.w	80211c8 <_dtoa_r+0x850>
 802107a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802107e:	9e08      	ldr	r6, [sp, #32]
 8021080:	9d05      	ldr	r5, [sp, #20]
 8021082:	9a05      	ldr	r2, [sp, #20]
 8021084:	441a      	add	r2, r3
 8021086:	9205      	str	r2, [sp, #20]
 8021088:	9a06      	ldr	r2, [sp, #24]
 802108a:	2101      	movs	r1, #1
 802108c:	441a      	add	r2, r3
 802108e:	4620      	mov	r0, r4
 8021090:	9206      	str	r2, [sp, #24]
 8021092:	f000 fd43 	bl	8021b1c <__i2b>
 8021096:	4607      	mov	r7, r0
 8021098:	2d00      	cmp	r5, #0
 802109a:	dd0c      	ble.n	80210b6 <_dtoa_r+0x73e>
 802109c:	9b06      	ldr	r3, [sp, #24]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	dd09      	ble.n	80210b6 <_dtoa_r+0x73e>
 80210a2:	42ab      	cmp	r3, r5
 80210a4:	9a05      	ldr	r2, [sp, #20]
 80210a6:	bfa8      	it	ge
 80210a8:	462b      	movge	r3, r5
 80210aa:	1ad2      	subs	r2, r2, r3
 80210ac:	9205      	str	r2, [sp, #20]
 80210ae:	9a06      	ldr	r2, [sp, #24]
 80210b0:	1aed      	subs	r5, r5, r3
 80210b2:	1ad3      	subs	r3, r2, r3
 80210b4:	9306      	str	r3, [sp, #24]
 80210b6:	9b08      	ldr	r3, [sp, #32]
 80210b8:	b1f3      	cbz	r3, 80210f8 <_dtoa_r+0x780>
 80210ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210bc:	2b00      	cmp	r3, #0
 80210be:	f000 80a5 	beq.w	802120c <_dtoa_r+0x894>
 80210c2:	2e00      	cmp	r6, #0
 80210c4:	dd10      	ble.n	80210e8 <_dtoa_r+0x770>
 80210c6:	4639      	mov	r1, r7
 80210c8:	4632      	mov	r2, r6
 80210ca:	4620      	mov	r0, r4
 80210cc:	f000 fdbc 	bl	8021c48 <__pow5mult>
 80210d0:	4652      	mov	r2, sl
 80210d2:	4601      	mov	r1, r0
 80210d4:	4607      	mov	r7, r0
 80210d6:	4620      	mov	r0, r4
 80210d8:	f000 fd29 	bl	8021b2e <__multiply>
 80210dc:	4651      	mov	r1, sl
 80210de:	4680      	mov	r8, r0
 80210e0:	4620      	mov	r0, r4
 80210e2:	f000 fc7b 	bl	80219dc <_Bfree>
 80210e6:	46c2      	mov	sl, r8
 80210e8:	9b08      	ldr	r3, [sp, #32]
 80210ea:	1b9a      	subs	r2, r3, r6
 80210ec:	d004      	beq.n	80210f8 <_dtoa_r+0x780>
 80210ee:	4651      	mov	r1, sl
 80210f0:	4620      	mov	r0, r4
 80210f2:	f000 fda9 	bl	8021c48 <__pow5mult>
 80210f6:	4682      	mov	sl, r0
 80210f8:	2101      	movs	r1, #1
 80210fa:	4620      	mov	r0, r4
 80210fc:	f000 fd0e 	bl	8021b1c <__i2b>
 8021100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021102:	2b00      	cmp	r3, #0
 8021104:	4606      	mov	r6, r0
 8021106:	f340 8083 	ble.w	8021210 <_dtoa_r+0x898>
 802110a:	461a      	mov	r2, r3
 802110c:	4601      	mov	r1, r0
 802110e:	4620      	mov	r0, r4
 8021110:	f000 fd9a 	bl	8021c48 <__pow5mult>
 8021114:	9b07      	ldr	r3, [sp, #28]
 8021116:	2b01      	cmp	r3, #1
 8021118:	4606      	mov	r6, r0
 802111a:	dd7c      	ble.n	8021216 <_dtoa_r+0x89e>
 802111c:	f04f 0800 	mov.w	r8, #0
 8021120:	6933      	ldr	r3, [r6, #16]
 8021122:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021126:	6918      	ldr	r0, [r3, #16]
 8021128:	f000 fcaa 	bl	8021a80 <__hi0bits>
 802112c:	f1c0 0020 	rsb	r0, r0, #32
 8021130:	9b06      	ldr	r3, [sp, #24]
 8021132:	4418      	add	r0, r3
 8021134:	f010 001f 	ands.w	r0, r0, #31
 8021138:	f000 8096 	beq.w	8021268 <_dtoa_r+0x8f0>
 802113c:	f1c0 0320 	rsb	r3, r0, #32
 8021140:	2b04      	cmp	r3, #4
 8021142:	f340 8087 	ble.w	8021254 <_dtoa_r+0x8dc>
 8021146:	9b05      	ldr	r3, [sp, #20]
 8021148:	f1c0 001c 	rsb	r0, r0, #28
 802114c:	4403      	add	r3, r0
 802114e:	9305      	str	r3, [sp, #20]
 8021150:	9b06      	ldr	r3, [sp, #24]
 8021152:	4405      	add	r5, r0
 8021154:	4403      	add	r3, r0
 8021156:	9306      	str	r3, [sp, #24]
 8021158:	9b05      	ldr	r3, [sp, #20]
 802115a:	2b00      	cmp	r3, #0
 802115c:	dd05      	ble.n	802116a <_dtoa_r+0x7f2>
 802115e:	4651      	mov	r1, sl
 8021160:	461a      	mov	r2, r3
 8021162:	4620      	mov	r0, r4
 8021164:	f000 fdbe 	bl	8021ce4 <__lshift>
 8021168:	4682      	mov	sl, r0
 802116a:	9b06      	ldr	r3, [sp, #24]
 802116c:	2b00      	cmp	r3, #0
 802116e:	dd05      	ble.n	802117c <_dtoa_r+0x804>
 8021170:	4631      	mov	r1, r6
 8021172:	461a      	mov	r2, r3
 8021174:	4620      	mov	r0, r4
 8021176:	f000 fdb5 	bl	8021ce4 <__lshift>
 802117a:	4606      	mov	r6, r0
 802117c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802117e:	2b00      	cmp	r3, #0
 8021180:	d074      	beq.n	802126c <_dtoa_r+0x8f4>
 8021182:	4631      	mov	r1, r6
 8021184:	4650      	mov	r0, sl
 8021186:	f000 fdfe 	bl	8021d86 <__mcmp>
 802118a:	2800      	cmp	r0, #0
 802118c:	da6e      	bge.n	802126c <_dtoa_r+0x8f4>
 802118e:	2300      	movs	r3, #0
 8021190:	4651      	mov	r1, sl
 8021192:	220a      	movs	r2, #10
 8021194:	4620      	mov	r0, r4
 8021196:	f000 fc38 	bl	8021a0a <__multadd>
 802119a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802119c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80211a0:	4682      	mov	sl, r0
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	f000 81a8 	beq.w	80214f8 <_dtoa_r+0xb80>
 80211a8:	2300      	movs	r3, #0
 80211aa:	4639      	mov	r1, r7
 80211ac:	220a      	movs	r2, #10
 80211ae:	4620      	mov	r0, r4
 80211b0:	f000 fc2b 	bl	8021a0a <__multadd>
 80211b4:	9b04      	ldr	r3, [sp, #16]
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	4607      	mov	r7, r0
 80211ba:	f300 80c8 	bgt.w	802134e <_dtoa_r+0x9d6>
 80211be:	9b07      	ldr	r3, [sp, #28]
 80211c0:	2b02      	cmp	r3, #2
 80211c2:	f340 80c4 	ble.w	802134e <_dtoa_r+0x9d6>
 80211c6:	e059      	b.n	802127c <_dtoa_r+0x904>
 80211c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80211ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80211ce:	e756      	b.n	802107e <_dtoa_r+0x706>
 80211d0:	9b03      	ldr	r3, [sp, #12]
 80211d2:	1e5e      	subs	r6, r3, #1
 80211d4:	9b08      	ldr	r3, [sp, #32]
 80211d6:	42b3      	cmp	r3, r6
 80211d8:	bfbf      	itttt	lt
 80211da:	9b08      	ldrlt	r3, [sp, #32]
 80211dc:	9608      	strlt	r6, [sp, #32]
 80211de:	1af2      	sublt	r2, r6, r3
 80211e0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80211e2:	bfb6      	itet	lt
 80211e4:	189b      	addlt	r3, r3, r2
 80211e6:	1b9e      	subge	r6, r3, r6
 80211e8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80211ea:	9b03      	ldr	r3, [sp, #12]
 80211ec:	bfb8      	it	lt
 80211ee:	2600      	movlt	r6, #0
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	bfb9      	ittee	lt
 80211f4:	9b05      	ldrlt	r3, [sp, #20]
 80211f6:	9a03      	ldrlt	r2, [sp, #12]
 80211f8:	9d05      	ldrge	r5, [sp, #20]
 80211fa:	9b03      	ldrge	r3, [sp, #12]
 80211fc:	bfbc      	itt	lt
 80211fe:	1a9d      	sublt	r5, r3, r2
 8021200:	2300      	movlt	r3, #0
 8021202:	e73e      	b.n	8021082 <_dtoa_r+0x70a>
 8021204:	9e08      	ldr	r6, [sp, #32]
 8021206:	9d05      	ldr	r5, [sp, #20]
 8021208:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802120a:	e745      	b.n	8021098 <_dtoa_r+0x720>
 802120c:	9a08      	ldr	r2, [sp, #32]
 802120e:	e76e      	b.n	80210ee <_dtoa_r+0x776>
 8021210:	9b07      	ldr	r3, [sp, #28]
 8021212:	2b01      	cmp	r3, #1
 8021214:	dc19      	bgt.n	802124a <_dtoa_r+0x8d2>
 8021216:	9b00      	ldr	r3, [sp, #0]
 8021218:	b9bb      	cbnz	r3, 802124a <_dtoa_r+0x8d2>
 802121a:	9b01      	ldr	r3, [sp, #4]
 802121c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021220:	b99b      	cbnz	r3, 802124a <_dtoa_r+0x8d2>
 8021222:	9b01      	ldr	r3, [sp, #4]
 8021224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021228:	0d1b      	lsrs	r3, r3, #20
 802122a:	051b      	lsls	r3, r3, #20
 802122c:	b183      	cbz	r3, 8021250 <_dtoa_r+0x8d8>
 802122e:	9b05      	ldr	r3, [sp, #20]
 8021230:	3301      	adds	r3, #1
 8021232:	9305      	str	r3, [sp, #20]
 8021234:	9b06      	ldr	r3, [sp, #24]
 8021236:	3301      	adds	r3, #1
 8021238:	9306      	str	r3, [sp, #24]
 802123a:	f04f 0801 	mov.w	r8, #1
 802123e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021240:	2b00      	cmp	r3, #0
 8021242:	f47f af6d 	bne.w	8021120 <_dtoa_r+0x7a8>
 8021246:	2001      	movs	r0, #1
 8021248:	e772      	b.n	8021130 <_dtoa_r+0x7b8>
 802124a:	f04f 0800 	mov.w	r8, #0
 802124e:	e7f6      	b.n	802123e <_dtoa_r+0x8c6>
 8021250:	4698      	mov	r8, r3
 8021252:	e7f4      	b.n	802123e <_dtoa_r+0x8c6>
 8021254:	d080      	beq.n	8021158 <_dtoa_r+0x7e0>
 8021256:	9a05      	ldr	r2, [sp, #20]
 8021258:	331c      	adds	r3, #28
 802125a:	441a      	add	r2, r3
 802125c:	9205      	str	r2, [sp, #20]
 802125e:	9a06      	ldr	r2, [sp, #24]
 8021260:	441a      	add	r2, r3
 8021262:	441d      	add	r5, r3
 8021264:	4613      	mov	r3, r2
 8021266:	e776      	b.n	8021156 <_dtoa_r+0x7de>
 8021268:	4603      	mov	r3, r0
 802126a:	e7f4      	b.n	8021256 <_dtoa_r+0x8de>
 802126c:	9b03      	ldr	r3, [sp, #12]
 802126e:	2b00      	cmp	r3, #0
 8021270:	dc36      	bgt.n	80212e0 <_dtoa_r+0x968>
 8021272:	9b07      	ldr	r3, [sp, #28]
 8021274:	2b02      	cmp	r3, #2
 8021276:	dd33      	ble.n	80212e0 <_dtoa_r+0x968>
 8021278:	9b03      	ldr	r3, [sp, #12]
 802127a:	9304      	str	r3, [sp, #16]
 802127c:	9b04      	ldr	r3, [sp, #16]
 802127e:	b963      	cbnz	r3, 802129a <_dtoa_r+0x922>
 8021280:	4631      	mov	r1, r6
 8021282:	2205      	movs	r2, #5
 8021284:	4620      	mov	r0, r4
 8021286:	f000 fbc0 	bl	8021a0a <__multadd>
 802128a:	4601      	mov	r1, r0
 802128c:	4606      	mov	r6, r0
 802128e:	4650      	mov	r0, sl
 8021290:	f000 fd79 	bl	8021d86 <__mcmp>
 8021294:	2800      	cmp	r0, #0
 8021296:	f73f adb6 	bgt.w	8020e06 <_dtoa_r+0x48e>
 802129a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802129c:	9d02      	ldr	r5, [sp, #8]
 802129e:	ea6f 0b03 	mvn.w	fp, r3
 80212a2:	2300      	movs	r3, #0
 80212a4:	9303      	str	r3, [sp, #12]
 80212a6:	4631      	mov	r1, r6
 80212a8:	4620      	mov	r0, r4
 80212aa:	f000 fb97 	bl	80219dc <_Bfree>
 80212ae:	2f00      	cmp	r7, #0
 80212b0:	f43f aea6 	beq.w	8021000 <_dtoa_r+0x688>
 80212b4:	9b03      	ldr	r3, [sp, #12]
 80212b6:	b12b      	cbz	r3, 80212c4 <_dtoa_r+0x94c>
 80212b8:	42bb      	cmp	r3, r7
 80212ba:	d003      	beq.n	80212c4 <_dtoa_r+0x94c>
 80212bc:	4619      	mov	r1, r3
 80212be:	4620      	mov	r0, r4
 80212c0:	f000 fb8c 	bl	80219dc <_Bfree>
 80212c4:	4639      	mov	r1, r7
 80212c6:	4620      	mov	r0, r4
 80212c8:	f000 fb88 	bl	80219dc <_Bfree>
 80212cc:	e698      	b.n	8021000 <_dtoa_r+0x688>
 80212ce:	2600      	movs	r6, #0
 80212d0:	4637      	mov	r7, r6
 80212d2:	e7e2      	b.n	802129a <_dtoa_r+0x922>
 80212d4:	46bb      	mov	fp, r7
 80212d6:	4637      	mov	r7, r6
 80212d8:	e595      	b.n	8020e06 <_dtoa_r+0x48e>
 80212da:	bf00      	nop
 80212dc:	40240000 	.word	0x40240000
 80212e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212e2:	bb93      	cbnz	r3, 802134a <_dtoa_r+0x9d2>
 80212e4:	9b03      	ldr	r3, [sp, #12]
 80212e6:	9304      	str	r3, [sp, #16]
 80212e8:	9d02      	ldr	r5, [sp, #8]
 80212ea:	4631      	mov	r1, r6
 80212ec:	4650      	mov	r0, sl
 80212ee:	f7ff fab7 	bl	8020860 <quorem>
 80212f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80212f6:	f805 9b01 	strb.w	r9, [r5], #1
 80212fa:	9b02      	ldr	r3, [sp, #8]
 80212fc:	9a04      	ldr	r2, [sp, #16]
 80212fe:	1aeb      	subs	r3, r5, r3
 8021300:	429a      	cmp	r2, r3
 8021302:	f300 80dc 	bgt.w	80214be <_dtoa_r+0xb46>
 8021306:	9b02      	ldr	r3, [sp, #8]
 8021308:	2a01      	cmp	r2, #1
 802130a:	bfac      	ite	ge
 802130c:	189b      	addge	r3, r3, r2
 802130e:	3301      	addlt	r3, #1
 8021310:	4698      	mov	r8, r3
 8021312:	2300      	movs	r3, #0
 8021314:	9303      	str	r3, [sp, #12]
 8021316:	4651      	mov	r1, sl
 8021318:	2201      	movs	r2, #1
 802131a:	4620      	mov	r0, r4
 802131c:	f000 fce2 	bl	8021ce4 <__lshift>
 8021320:	4631      	mov	r1, r6
 8021322:	4682      	mov	sl, r0
 8021324:	f000 fd2f 	bl	8021d86 <__mcmp>
 8021328:	2800      	cmp	r0, #0
 802132a:	f300 808d 	bgt.w	8021448 <_dtoa_r+0xad0>
 802132e:	d103      	bne.n	8021338 <_dtoa_r+0x9c0>
 8021330:	f019 0f01 	tst.w	r9, #1
 8021334:	f040 8088 	bne.w	8021448 <_dtoa_r+0xad0>
 8021338:	4645      	mov	r5, r8
 802133a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802133e:	2b30      	cmp	r3, #48	; 0x30
 8021340:	f105 32ff 	add.w	r2, r5, #4294967295
 8021344:	d1af      	bne.n	80212a6 <_dtoa_r+0x92e>
 8021346:	4615      	mov	r5, r2
 8021348:	e7f7      	b.n	802133a <_dtoa_r+0x9c2>
 802134a:	9b03      	ldr	r3, [sp, #12]
 802134c:	9304      	str	r3, [sp, #16]
 802134e:	2d00      	cmp	r5, #0
 8021350:	dd05      	ble.n	802135e <_dtoa_r+0x9e6>
 8021352:	4639      	mov	r1, r7
 8021354:	462a      	mov	r2, r5
 8021356:	4620      	mov	r0, r4
 8021358:	f000 fcc4 	bl	8021ce4 <__lshift>
 802135c:	4607      	mov	r7, r0
 802135e:	f1b8 0f00 	cmp.w	r8, #0
 8021362:	d04c      	beq.n	80213fe <_dtoa_r+0xa86>
 8021364:	6879      	ldr	r1, [r7, #4]
 8021366:	4620      	mov	r0, r4
 8021368:	f000 fb04 	bl	8021974 <_Balloc>
 802136c:	693a      	ldr	r2, [r7, #16]
 802136e:	3202      	adds	r2, #2
 8021370:	4605      	mov	r5, r0
 8021372:	0092      	lsls	r2, r2, #2
 8021374:	f107 010c 	add.w	r1, r7, #12
 8021378:	300c      	adds	r0, #12
 802137a:	f7fe fa4b 	bl	801f814 <memcpy>
 802137e:	2201      	movs	r2, #1
 8021380:	4629      	mov	r1, r5
 8021382:	4620      	mov	r0, r4
 8021384:	f000 fcae 	bl	8021ce4 <__lshift>
 8021388:	9b00      	ldr	r3, [sp, #0]
 802138a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802138e:	9703      	str	r7, [sp, #12]
 8021390:	f003 0301 	and.w	r3, r3, #1
 8021394:	4607      	mov	r7, r0
 8021396:	9305      	str	r3, [sp, #20]
 8021398:	4631      	mov	r1, r6
 802139a:	4650      	mov	r0, sl
 802139c:	f7ff fa60 	bl	8020860 <quorem>
 80213a0:	9903      	ldr	r1, [sp, #12]
 80213a2:	4605      	mov	r5, r0
 80213a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80213a8:	4650      	mov	r0, sl
 80213aa:	f000 fcec 	bl	8021d86 <__mcmp>
 80213ae:	463a      	mov	r2, r7
 80213b0:	9000      	str	r0, [sp, #0]
 80213b2:	4631      	mov	r1, r6
 80213b4:	4620      	mov	r0, r4
 80213b6:	f000 fd00 	bl	8021dba <__mdiff>
 80213ba:	68c3      	ldr	r3, [r0, #12]
 80213bc:	4602      	mov	r2, r0
 80213be:	bb03      	cbnz	r3, 8021402 <_dtoa_r+0xa8a>
 80213c0:	4601      	mov	r1, r0
 80213c2:	9006      	str	r0, [sp, #24]
 80213c4:	4650      	mov	r0, sl
 80213c6:	f000 fcde 	bl	8021d86 <__mcmp>
 80213ca:	9a06      	ldr	r2, [sp, #24]
 80213cc:	4603      	mov	r3, r0
 80213ce:	4611      	mov	r1, r2
 80213d0:	4620      	mov	r0, r4
 80213d2:	9306      	str	r3, [sp, #24]
 80213d4:	f000 fb02 	bl	80219dc <_Bfree>
 80213d8:	9b06      	ldr	r3, [sp, #24]
 80213da:	b9a3      	cbnz	r3, 8021406 <_dtoa_r+0xa8e>
 80213dc:	9a07      	ldr	r2, [sp, #28]
 80213de:	b992      	cbnz	r2, 8021406 <_dtoa_r+0xa8e>
 80213e0:	9a05      	ldr	r2, [sp, #20]
 80213e2:	b982      	cbnz	r2, 8021406 <_dtoa_r+0xa8e>
 80213e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80213e8:	d029      	beq.n	802143e <_dtoa_r+0xac6>
 80213ea:	9b00      	ldr	r3, [sp, #0]
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	dd01      	ble.n	80213f4 <_dtoa_r+0xa7c>
 80213f0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80213f4:	f108 0501 	add.w	r5, r8, #1
 80213f8:	f888 9000 	strb.w	r9, [r8]
 80213fc:	e753      	b.n	80212a6 <_dtoa_r+0x92e>
 80213fe:	4638      	mov	r0, r7
 8021400:	e7c2      	b.n	8021388 <_dtoa_r+0xa10>
 8021402:	2301      	movs	r3, #1
 8021404:	e7e3      	b.n	80213ce <_dtoa_r+0xa56>
 8021406:	9a00      	ldr	r2, [sp, #0]
 8021408:	2a00      	cmp	r2, #0
 802140a:	db04      	blt.n	8021416 <_dtoa_r+0xa9e>
 802140c:	d125      	bne.n	802145a <_dtoa_r+0xae2>
 802140e:	9a07      	ldr	r2, [sp, #28]
 8021410:	bb1a      	cbnz	r2, 802145a <_dtoa_r+0xae2>
 8021412:	9a05      	ldr	r2, [sp, #20]
 8021414:	bb0a      	cbnz	r2, 802145a <_dtoa_r+0xae2>
 8021416:	2b00      	cmp	r3, #0
 8021418:	ddec      	ble.n	80213f4 <_dtoa_r+0xa7c>
 802141a:	4651      	mov	r1, sl
 802141c:	2201      	movs	r2, #1
 802141e:	4620      	mov	r0, r4
 8021420:	f000 fc60 	bl	8021ce4 <__lshift>
 8021424:	4631      	mov	r1, r6
 8021426:	4682      	mov	sl, r0
 8021428:	f000 fcad 	bl	8021d86 <__mcmp>
 802142c:	2800      	cmp	r0, #0
 802142e:	dc03      	bgt.n	8021438 <_dtoa_r+0xac0>
 8021430:	d1e0      	bne.n	80213f4 <_dtoa_r+0xa7c>
 8021432:	f019 0f01 	tst.w	r9, #1
 8021436:	d0dd      	beq.n	80213f4 <_dtoa_r+0xa7c>
 8021438:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802143c:	d1d8      	bne.n	80213f0 <_dtoa_r+0xa78>
 802143e:	2339      	movs	r3, #57	; 0x39
 8021440:	f888 3000 	strb.w	r3, [r8]
 8021444:	f108 0801 	add.w	r8, r8, #1
 8021448:	4645      	mov	r5, r8
 802144a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802144e:	2b39      	cmp	r3, #57	; 0x39
 8021450:	f105 32ff 	add.w	r2, r5, #4294967295
 8021454:	d03b      	beq.n	80214ce <_dtoa_r+0xb56>
 8021456:	3301      	adds	r3, #1
 8021458:	e040      	b.n	80214dc <_dtoa_r+0xb64>
 802145a:	2b00      	cmp	r3, #0
 802145c:	f108 0501 	add.w	r5, r8, #1
 8021460:	dd05      	ble.n	802146e <_dtoa_r+0xaf6>
 8021462:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8021466:	d0ea      	beq.n	802143e <_dtoa_r+0xac6>
 8021468:	f109 0901 	add.w	r9, r9, #1
 802146c:	e7c4      	b.n	80213f8 <_dtoa_r+0xa80>
 802146e:	9b02      	ldr	r3, [sp, #8]
 8021470:	9a04      	ldr	r2, [sp, #16]
 8021472:	f805 9c01 	strb.w	r9, [r5, #-1]
 8021476:	1aeb      	subs	r3, r5, r3
 8021478:	4293      	cmp	r3, r2
 802147a:	46a8      	mov	r8, r5
 802147c:	f43f af4b 	beq.w	8021316 <_dtoa_r+0x99e>
 8021480:	4651      	mov	r1, sl
 8021482:	2300      	movs	r3, #0
 8021484:	220a      	movs	r2, #10
 8021486:	4620      	mov	r0, r4
 8021488:	f000 fabf 	bl	8021a0a <__multadd>
 802148c:	9b03      	ldr	r3, [sp, #12]
 802148e:	9903      	ldr	r1, [sp, #12]
 8021490:	42bb      	cmp	r3, r7
 8021492:	4682      	mov	sl, r0
 8021494:	f04f 0300 	mov.w	r3, #0
 8021498:	f04f 020a 	mov.w	r2, #10
 802149c:	4620      	mov	r0, r4
 802149e:	d104      	bne.n	80214aa <_dtoa_r+0xb32>
 80214a0:	f000 fab3 	bl	8021a0a <__multadd>
 80214a4:	9003      	str	r0, [sp, #12]
 80214a6:	4607      	mov	r7, r0
 80214a8:	e776      	b.n	8021398 <_dtoa_r+0xa20>
 80214aa:	f000 faae 	bl	8021a0a <__multadd>
 80214ae:	2300      	movs	r3, #0
 80214b0:	9003      	str	r0, [sp, #12]
 80214b2:	220a      	movs	r2, #10
 80214b4:	4639      	mov	r1, r7
 80214b6:	4620      	mov	r0, r4
 80214b8:	f000 faa7 	bl	8021a0a <__multadd>
 80214bc:	e7f3      	b.n	80214a6 <_dtoa_r+0xb2e>
 80214be:	4651      	mov	r1, sl
 80214c0:	2300      	movs	r3, #0
 80214c2:	220a      	movs	r2, #10
 80214c4:	4620      	mov	r0, r4
 80214c6:	f000 faa0 	bl	8021a0a <__multadd>
 80214ca:	4682      	mov	sl, r0
 80214cc:	e70d      	b.n	80212ea <_dtoa_r+0x972>
 80214ce:	9b02      	ldr	r3, [sp, #8]
 80214d0:	4293      	cmp	r3, r2
 80214d2:	d105      	bne.n	80214e0 <_dtoa_r+0xb68>
 80214d4:	9a02      	ldr	r2, [sp, #8]
 80214d6:	f10b 0b01 	add.w	fp, fp, #1
 80214da:	2331      	movs	r3, #49	; 0x31
 80214dc:	7013      	strb	r3, [r2, #0]
 80214de:	e6e2      	b.n	80212a6 <_dtoa_r+0x92e>
 80214e0:	4615      	mov	r5, r2
 80214e2:	e7b2      	b.n	802144a <_dtoa_r+0xad2>
 80214e4:	4b09      	ldr	r3, [pc, #36]	; (802150c <_dtoa_r+0xb94>)
 80214e6:	f7ff baae 	b.w	8020a46 <_dtoa_r+0xce>
 80214ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	f47f aa88 	bne.w	8020a02 <_dtoa_r+0x8a>
 80214f2:	4b07      	ldr	r3, [pc, #28]	; (8021510 <_dtoa_r+0xb98>)
 80214f4:	f7ff baa7 	b.w	8020a46 <_dtoa_r+0xce>
 80214f8:	9b04      	ldr	r3, [sp, #16]
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	f73f aef4 	bgt.w	80212e8 <_dtoa_r+0x970>
 8021500:	9b07      	ldr	r3, [sp, #28]
 8021502:	2b02      	cmp	r3, #2
 8021504:	f77f aef0 	ble.w	80212e8 <_dtoa_r+0x970>
 8021508:	e6b8      	b.n	802127c <_dtoa_r+0x904>
 802150a:	bf00      	nop
 802150c:	080312b5 	.word	0x080312b5
 8021510:	08031426 	.word	0x08031426

08021514 <_localeconv_r>:
 8021514:	4b04      	ldr	r3, [pc, #16]	; (8021528 <_localeconv_r+0x14>)
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	6a18      	ldr	r0, [r3, #32]
 802151a:	4b04      	ldr	r3, [pc, #16]	; (802152c <_localeconv_r+0x18>)
 802151c:	2800      	cmp	r0, #0
 802151e:	bf08      	it	eq
 8021520:	4618      	moveq	r0, r3
 8021522:	30f0      	adds	r0, #240	; 0xf0
 8021524:	4770      	bx	lr
 8021526:	bf00      	nop
 8021528:	20000f40 	.word	0x20000f40
 802152c:	20001444 	.word	0x20001444

08021530 <malloc>:
 8021530:	4b02      	ldr	r3, [pc, #8]	; (802153c <malloc+0xc>)
 8021532:	4601      	mov	r1, r0
 8021534:	6818      	ldr	r0, [r3, #0]
 8021536:	f000 b803 	b.w	8021540 <_malloc_r>
 802153a:	bf00      	nop
 802153c:	20000f40 	.word	0x20000f40

08021540 <_malloc_r>:
 8021540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021544:	f101 040b 	add.w	r4, r1, #11
 8021548:	2c16      	cmp	r4, #22
 802154a:	4681      	mov	r9, r0
 802154c:	d907      	bls.n	802155e <_malloc_r+0x1e>
 802154e:	f034 0407 	bics.w	r4, r4, #7
 8021552:	d505      	bpl.n	8021560 <_malloc_r+0x20>
 8021554:	230c      	movs	r3, #12
 8021556:	f8c9 3000 	str.w	r3, [r9]
 802155a:	2600      	movs	r6, #0
 802155c:	e131      	b.n	80217c2 <_malloc_r+0x282>
 802155e:	2410      	movs	r4, #16
 8021560:	428c      	cmp	r4, r1
 8021562:	d3f7      	bcc.n	8021554 <_malloc_r+0x14>
 8021564:	4648      	mov	r0, r9
 8021566:	f000 f9f9 	bl	802195c <__malloc_lock>
 802156a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 802156e:	4d9c      	ldr	r5, [pc, #624]	; (80217e0 <_malloc_r+0x2a0>)
 8021570:	d236      	bcs.n	80215e0 <_malloc_r+0xa0>
 8021572:	f104 0208 	add.w	r2, r4, #8
 8021576:	442a      	add	r2, r5
 8021578:	f1a2 0108 	sub.w	r1, r2, #8
 802157c:	6856      	ldr	r6, [r2, #4]
 802157e:	428e      	cmp	r6, r1
 8021580:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8021584:	d102      	bne.n	802158c <_malloc_r+0x4c>
 8021586:	68d6      	ldr	r6, [r2, #12]
 8021588:	42b2      	cmp	r2, r6
 802158a:	d010      	beq.n	80215ae <_malloc_r+0x6e>
 802158c:	6873      	ldr	r3, [r6, #4]
 802158e:	68f2      	ldr	r2, [r6, #12]
 8021590:	68b1      	ldr	r1, [r6, #8]
 8021592:	f023 0303 	bic.w	r3, r3, #3
 8021596:	60ca      	str	r2, [r1, #12]
 8021598:	4433      	add	r3, r6
 802159a:	6091      	str	r1, [r2, #8]
 802159c:	685a      	ldr	r2, [r3, #4]
 802159e:	f042 0201 	orr.w	r2, r2, #1
 80215a2:	605a      	str	r2, [r3, #4]
 80215a4:	4648      	mov	r0, r9
 80215a6:	f000 f9df 	bl	8021968 <__malloc_unlock>
 80215aa:	3608      	adds	r6, #8
 80215ac:	e109      	b.n	80217c2 <_malloc_r+0x282>
 80215ae:	3302      	adds	r3, #2
 80215b0:	4a8c      	ldr	r2, [pc, #560]	; (80217e4 <_malloc_r+0x2a4>)
 80215b2:	692e      	ldr	r6, [r5, #16]
 80215b4:	4296      	cmp	r6, r2
 80215b6:	4611      	mov	r1, r2
 80215b8:	d06d      	beq.n	8021696 <_malloc_r+0x156>
 80215ba:	6870      	ldr	r0, [r6, #4]
 80215bc:	f020 0003 	bic.w	r0, r0, #3
 80215c0:	1b07      	subs	r7, r0, r4
 80215c2:	2f0f      	cmp	r7, #15
 80215c4:	dd47      	ble.n	8021656 <_malloc_r+0x116>
 80215c6:	1933      	adds	r3, r6, r4
 80215c8:	f044 0401 	orr.w	r4, r4, #1
 80215cc:	6074      	str	r4, [r6, #4]
 80215ce:	616b      	str	r3, [r5, #20]
 80215d0:	612b      	str	r3, [r5, #16]
 80215d2:	60da      	str	r2, [r3, #12]
 80215d4:	609a      	str	r2, [r3, #8]
 80215d6:	f047 0201 	orr.w	r2, r7, #1
 80215da:	605a      	str	r2, [r3, #4]
 80215dc:	5037      	str	r7, [r6, r0]
 80215de:	e7e1      	b.n	80215a4 <_malloc_r+0x64>
 80215e0:	0a63      	lsrs	r3, r4, #9
 80215e2:	d02a      	beq.n	802163a <_malloc_r+0xfa>
 80215e4:	2b04      	cmp	r3, #4
 80215e6:	d812      	bhi.n	802160e <_malloc_r+0xce>
 80215e8:	09a3      	lsrs	r3, r4, #6
 80215ea:	3338      	adds	r3, #56	; 0x38
 80215ec:	1c5a      	adds	r2, r3, #1
 80215ee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80215f2:	f1a2 0008 	sub.w	r0, r2, #8
 80215f6:	6856      	ldr	r6, [r2, #4]
 80215f8:	4286      	cmp	r6, r0
 80215fa:	d006      	beq.n	802160a <_malloc_r+0xca>
 80215fc:	6872      	ldr	r2, [r6, #4]
 80215fe:	f022 0203 	bic.w	r2, r2, #3
 8021602:	1b11      	subs	r1, r2, r4
 8021604:	290f      	cmp	r1, #15
 8021606:	dd1c      	ble.n	8021642 <_malloc_r+0x102>
 8021608:	3b01      	subs	r3, #1
 802160a:	3301      	adds	r3, #1
 802160c:	e7d0      	b.n	80215b0 <_malloc_r+0x70>
 802160e:	2b14      	cmp	r3, #20
 8021610:	d801      	bhi.n	8021616 <_malloc_r+0xd6>
 8021612:	335b      	adds	r3, #91	; 0x5b
 8021614:	e7ea      	b.n	80215ec <_malloc_r+0xac>
 8021616:	2b54      	cmp	r3, #84	; 0x54
 8021618:	d802      	bhi.n	8021620 <_malloc_r+0xe0>
 802161a:	0b23      	lsrs	r3, r4, #12
 802161c:	336e      	adds	r3, #110	; 0x6e
 802161e:	e7e5      	b.n	80215ec <_malloc_r+0xac>
 8021620:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8021624:	d802      	bhi.n	802162c <_malloc_r+0xec>
 8021626:	0be3      	lsrs	r3, r4, #15
 8021628:	3377      	adds	r3, #119	; 0x77
 802162a:	e7df      	b.n	80215ec <_malloc_r+0xac>
 802162c:	f240 5254 	movw	r2, #1364	; 0x554
 8021630:	4293      	cmp	r3, r2
 8021632:	d804      	bhi.n	802163e <_malloc_r+0xfe>
 8021634:	0ca3      	lsrs	r3, r4, #18
 8021636:	337c      	adds	r3, #124	; 0x7c
 8021638:	e7d8      	b.n	80215ec <_malloc_r+0xac>
 802163a:	233f      	movs	r3, #63	; 0x3f
 802163c:	e7d6      	b.n	80215ec <_malloc_r+0xac>
 802163e:	237e      	movs	r3, #126	; 0x7e
 8021640:	e7d4      	b.n	80215ec <_malloc_r+0xac>
 8021642:	2900      	cmp	r1, #0
 8021644:	68f1      	ldr	r1, [r6, #12]
 8021646:	db04      	blt.n	8021652 <_malloc_r+0x112>
 8021648:	68b3      	ldr	r3, [r6, #8]
 802164a:	60d9      	str	r1, [r3, #12]
 802164c:	608b      	str	r3, [r1, #8]
 802164e:	18b3      	adds	r3, r6, r2
 8021650:	e7a4      	b.n	802159c <_malloc_r+0x5c>
 8021652:	460e      	mov	r6, r1
 8021654:	e7d0      	b.n	80215f8 <_malloc_r+0xb8>
 8021656:	2f00      	cmp	r7, #0
 8021658:	616a      	str	r2, [r5, #20]
 802165a:	612a      	str	r2, [r5, #16]
 802165c:	db05      	blt.n	802166a <_malloc_r+0x12a>
 802165e:	4430      	add	r0, r6
 8021660:	6843      	ldr	r3, [r0, #4]
 8021662:	f043 0301 	orr.w	r3, r3, #1
 8021666:	6043      	str	r3, [r0, #4]
 8021668:	e79c      	b.n	80215a4 <_malloc_r+0x64>
 802166a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 802166e:	d244      	bcs.n	80216fa <_malloc_r+0x1ba>
 8021670:	08c0      	lsrs	r0, r0, #3
 8021672:	1087      	asrs	r7, r0, #2
 8021674:	2201      	movs	r2, #1
 8021676:	fa02 f707 	lsl.w	r7, r2, r7
 802167a:	686a      	ldr	r2, [r5, #4]
 802167c:	3001      	adds	r0, #1
 802167e:	433a      	orrs	r2, r7
 8021680:	606a      	str	r2, [r5, #4]
 8021682:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8021686:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 802168a:	60b7      	str	r7, [r6, #8]
 802168c:	3a08      	subs	r2, #8
 802168e:	60f2      	str	r2, [r6, #12]
 8021690:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8021694:	60fe      	str	r6, [r7, #12]
 8021696:	2001      	movs	r0, #1
 8021698:	109a      	asrs	r2, r3, #2
 802169a:	fa00 f202 	lsl.w	r2, r0, r2
 802169e:	6868      	ldr	r0, [r5, #4]
 80216a0:	4282      	cmp	r2, r0
 80216a2:	f200 80a1 	bhi.w	80217e8 <_malloc_r+0x2a8>
 80216a6:	4202      	tst	r2, r0
 80216a8:	d106      	bne.n	80216b8 <_malloc_r+0x178>
 80216aa:	f023 0303 	bic.w	r3, r3, #3
 80216ae:	0052      	lsls	r2, r2, #1
 80216b0:	4202      	tst	r2, r0
 80216b2:	f103 0304 	add.w	r3, r3, #4
 80216b6:	d0fa      	beq.n	80216ae <_malloc_r+0x16e>
 80216b8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80216bc:	46e0      	mov	r8, ip
 80216be:	469e      	mov	lr, r3
 80216c0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80216c4:	4546      	cmp	r6, r8
 80216c6:	d153      	bne.n	8021770 <_malloc_r+0x230>
 80216c8:	f10e 0e01 	add.w	lr, lr, #1
 80216cc:	f01e 0f03 	tst.w	lr, #3
 80216d0:	f108 0808 	add.w	r8, r8, #8
 80216d4:	d1f4      	bne.n	80216c0 <_malloc_r+0x180>
 80216d6:	0798      	lsls	r0, r3, #30
 80216d8:	d179      	bne.n	80217ce <_malloc_r+0x28e>
 80216da:	686b      	ldr	r3, [r5, #4]
 80216dc:	ea23 0302 	bic.w	r3, r3, r2
 80216e0:	606b      	str	r3, [r5, #4]
 80216e2:	6868      	ldr	r0, [r5, #4]
 80216e4:	0052      	lsls	r2, r2, #1
 80216e6:	4282      	cmp	r2, r0
 80216e8:	d87e      	bhi.n	80217e8 <_malloc_r+0x2a8>
 80216ea:	2a00      	cmp	r2, #0
 80216ec:	d07c      	beq.n	80217e8 <_malloc_r+0x2a8>
 80216ee:	4673      	mov	r3, lr
 80216f0:	4202      	tst	r2, r0
 80216f2:	d1e1      	bne.n	80216b8 <_malloc_r+0x178>
 80216f4:	3304      	adds	r3, #4
 80216f6:	0052      	lsls	r2, r2, #1
 80216f8:	e7fa      	b.n	80216f0 <_malloc_r+0x1b0>
 80216fa:	0a42      	lsrs	r2, r0, #9
 80216fc:	2a04      	cmp	r2, #4
 80216fe:	d815      	bhi.n	802172c <_malloc_r+0x1ec>
 8021700:	0982      	lsrs	r2, r0, #6
 8021702:	3238      	adds	r2, #56	; 0x38
 8021704:	1c57      	adds	r7, r2, #1
 8021706:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 802170a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 802170e:	45be      	cmp	lr, r7
 8021710:	d126      	bne.n	8021760 <_malloc_r+0x220>
 8021712:	2001      	movs	r0, #1
 8021714:	1092      	asrs	r2, r2, #2
 8021716:	fa00 f202 	lsl.w	r2, r0, r2
 802171a:	6868      	ldr	r0, [r5, #4]
 802171c:	4310      	orrs	r0, r2
 802171e:	6068      	str	r0, [r5, #4]
 8021720:	f8c6 e00c 	str.w	lr, [r6, #12]
 8021724:	60b7      	str	r7, [r6, #8]
 8021726:	f8ce 6008 	str.w	r6, [lr, #8]
 802172a:	e7b3      	b.n	8021694 <_malloc_r+0x154>
 802172c:	2a14      	cmp	r2, #20
 802172e:	d801      	bhi.n	8021734 <_malloc_r+0x1f4>
 8021730:	325b      	adds	r2, #91	; 0x5b
 8021732:	e7e7      	b.n	8021704 <_malloc_r+0x1c4>
 8021734:	2a54      	cmp	r2, #84	; 0x54
 8021736:	d802      	bhi.n	802173e <_malloc_r+0x1fe>
 8021738:	0b02      	lsrs	r2, r0, #12
 802173a:	326e      	adds	r2, #110	; 0x6e
 802173c:	e7e2      	b.n	8021704 <_malloc_r+0x1c4>
 802173e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8021742:	d802      	bhi.n	802174a <_malloc_r+0x20a>
 8021744:	0bc2      	lsrs	r2, r0, #15
 8021746:	3277      	adds	r2, #119	; 0x77
 8021748:	e7dc      	b.n	8021704 <_malloc_r+0x1c4>
 802174a:	f240 5754 	movw	r7, #1364	; 0x554
 802174e:	42ba      	cmp	r2, r7
 8021750:	bf9a      	itte	ls
 8021752:	0c82      	lsrls	r2, r0, #18
 8021754:	327c      	addls	r2, #124	; 0x7c
 8021756:	227e      	movhi	r2, #126	; 0x7e
 8021758:	e7d4      	b.n	8021704 <_malloc_r+0x1c4>
 802175a:	68bf      	ldr	r7, [r7, #8]
 802175c:	45be      	cmp	lr, r7
 802175e:	d004      	beq.n	802176a <_malloc_r+0x22a>
 8021760:	687a      	ldr	r2, [r7, #4]
 8021762:	f022 0203 	bic.w	r2, r2, #3
 8021766:	4290      	cmp	r0, r2
 8021768:	d3f7      	bcc.n	802175a <_malloc_r+0x21a>
 802176a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 802176e:	e7d7      	b.n	8021720 <_malloc_r+0x1e0>
 8021770:	6870      	ldr	r0, [r6, #4]
 8021772:	68f7      	ldr	r7, [r6, #12]
 8021774:	f020 0003 	bic.w	r0, r0, #3
 8021778:	eba0 0a04 	sub.w	sl, r0, r4
 802177c:	f1ba 0f0f 	cmp.w	sl, #15
 8021780:	dd10      	ble.n	80217a4 <_malloc_r+0x264>
 8021782:	68b2      	ldr	r2, [r6, #8]
 8021784:	1933      	adds	r3, r6, r4
 8021786:	f044 0401 	orr.w	r4, r4, #1
 802178a:	6074      	str	r4, [r6, #4]
 802178c:	60d7      	str	r7, [r2, #12]
 802178e:	60ba      	str	r2, [r7, #8]
 8021790:	f04a 0201 	orr.w	r2, sl, #1
 8021794:	616b      	str	r3, [r5, #20]
 8021796:	612b      	str	r3, [r5, #16]
 8021798:	60d9      	str	r1, [r3, #12]
 802179a:	6099      	str	r1, [r3, #8]
 802179c:	605a      	str	r2, [r3, #4]
 802179e:	f846 a000 	str.w	sl, [r6, r0]
 80217a2:	e6ff      	b.n	80215a4 <_malloc_r+0x64>
 80217a4:	f1ba 0f00 	cmp.w	sl, #0
 80217a8:	db0f      	blt.n	80217ca <_malloc_r+0x28a>
 80217aa:	4430      	add	r0, r6
 80217ac:	6843      	ldr	r3, [r0, #4]
 80217ae:	f043 0301 	orr.w	r3, r3, #1
 80217b2:	6043      	str	r3, [r0, #4]
 80217b4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80217b8:	4648      	mov	r0, r9
 80217ba:	60df      	str	r7, [r3, #12]
 80217bc:	60bb      	str	r3, [r7, #8]
 80217be:	f000 f8d3 	bl	8021968 <__malloc_unlock>
 80217c2:	4630      	mov	r0, r6
 80217c4:	b003      	add	sp, #12
 80217c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217ca:	463e      	mov	r6, r7
 80217cc:	e77a      	b.n	80216c4 <_malloc_r+0x184>
 80217ce:	f85c 0908 	ldr.w	r0, [ip], #-8
 80217d2:	4584      	cmp	ip, r0
 80217d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80217d8:	f43f af7d 	beq.w	80216d6 <_malloc_r+0x196>
 80217dc:	e781      	b.n	80216e2 <_malloc_r+0x1a2>
 80217de:	bf00      	nop
 80217e0:	20001034 	.word	0x20001034
 80217e4:	2000103c 	.word	0x2000103c
 80217e8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80217ec:	f8db 6004 	ldr.w	r6, [fp, #4]
 80217f0:	f026 0603 	bic.w	r6, r6, #3
 80217f4:	42b4      	cmp	r4, r6
 80217f6:	d803      	bhi.n	8021800 <_malloc_r+0x2c0>
 80217f8:	1b33      	subs	r3, r6, r4
 80217fa:	2b0f      	cmp	r3, #15
 80217fc:	f300 8096 	bgt.w	802192c <_malloc_r+0x3ec>
 8021800:	4a4f      	ldr	r2, [pc, #316]	; (8021940 <_malloc_r+0x400>)
 8021802:	6817      	ldr	r7, [r2, #0]
 8021804:	4a4f      	ldr	r2, [pc, #316]	; (8021944 <_malloc_r+0x404>)
 8021806:	6811      	ldr	r1, [r2, #0]
 8021808:	3710      	adds	r7, #16
 802180a:	3101      	adds	r1, #1
 802180c:	eb0b 0306 	add.w	r3, fp, r6
 8021810:	4427      	add	r7, r4
 8021812:	d005      	beq.n	8021820 <_malloc_r+0x2e0>
 8021814:	494c      	ldr	r1, [pc, #304]	; (8021948 <_malloc_r+0x408>)
 8021816:	3901      	subs	r1, #1
 8021818:	440f      	add	r7, r1
 802181a:	3101      	adds	r1, #1
 802181c:	4249      	negs	r1, r1
 802181e:	400f      	ands	r7, r1
 8021820:	4639      	mov	r1, r7
 8021822:	4648      	mov	r0, r9
 8021824:	9201      	str	r2, [sp, #4]
 8021826:	9300      	str	r3, [sp, #0]
 8021828:	f000 fb74 	bl	8021f14 <_sbrk_r>
 802182c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8021830:	4680      	mov	r8, r0
 8021832:	d056      	beq.n	80218e2 <_malloc_r+0x3a2>
 8021834:	9b00      	ldr	r3, [sp, #0]
 8021836:	9a01      	ldr	r2, [sp, #4]
 8021838:	4283      	cmp	r3, r0
 802183a:	d901      	bls.n	8021840 <_malloc_r+0x300>
 802183c:	45ab      	cmp	fp, r5
 802183e:	d150      	bne.n	80218e2 <_malloc_r+0x3a2>
 8021840:	4842      	ldr	r0, [pc, #264]	; (802194c <_malloc_r+0x40c>)
 8021842:	6801      	ldr	r1, [r0, #0]
 8021844:	4543      	cmp	r3, r8
 8021846:	eb07 0e01 	add.w	lr, r7, r1
 802184a:	f8c0 e000 	str.w	lr, [r0]
 802184e:	4940      	ldr	r1, [pc, #256]	; (8021950 <_malloc_r+0x410>)
 8021850:	4682      	mov	sl, r0
 8021852:	d113      	bne.n	802187c <_malloc_r+0x33c>
 8021854:	420b      	tst	r3, r1
 8021856:	d111      	bne.n	802187c <_malloc_r+0x33c>
 8021858:	68ab      	ldr	r3, [r5, #8]
 802185a:	443e      	add	r6, r7
 802185c:	f046 0601 	orr.w	r6, r6, #1
 8021860:	605e      	str	r6, [r3, #4]
 8021862:	4a3c      	ldr	r2, [pc, #240]	; (8021954 <_malloc_r+0x414>)
 8021864:	f8da 3000 	ldr.w	r3, [sl]
 8021868:	6811      	ldr	r1, [r2, #0]
 802186a:	428b      	cmp	r3, r1
 802186c:	bf88      	it	hi
 802186e:	6013      	strhi	r3, [r2, #0]
 8021870:	4a39      	ldr	r2, [pc, #228]	; (8021958 <_malloc_r+0x418>)
 8021872:	6811      	ldr	r1, [r2, #0]
 8021874:	428b      	cmp	r3, r1
 8021876:	bf88      	it	hi
 8021878:	6013      	strhi	r3, [r2, #0]
 802187a:	e032      	b.n	80218e2 <_malloc_r+0x3a2>
 802187c:	6810      	ldr	r0, [r2, #0]
 802187e:	3001      	adds	r0, #1
 8021880:	bf1b      	ittet	ne
 8021882:	eba8 0303 	subne.w	r3, r8, r3
 8021886:	4473      	addne	r3, lr
 8021888:	f8c2 8000 	streq.w	r8, [r2]
 802188c:	f8ca 3000 	strne.w	r3, [sl]
 8021890:	f018 0007 	ands.w	r0, r8, #7
 8021894:	bf1c      	itt	ne
 8021896:	f1c0 0008 	rsbne	r0, r0, #8
 802189a:	4480      	addne	r8, r0
 802189c:	4b2a      	ldr	r3, [pc, #168]	; (8021948 <_malloc_r+0x408>)
 802189e:	4447      	add	r7, r8
 80218a0:	4418      	add	r0, r3
 80218a2:	400f      	ands	r7, r1
 80218a4:	1bc7      	subs	r7, r0, r7
 80218a6:	4639      	mov	r1, r7
 80218a8:	4648      	mov	r0, r9
 80218aa:	f000 fb33 	bl	8021f14 <_sbrk_r>
 80218ae:	1c43      	adds	r3, r0, #1
 80218b0:	bf08      	it	eq
 80218b2:	4640      	moveq	r0, r8
 80218b4:	f8da 3000 	ldr.w	r3, [sl]
 80218b8:	f8c5 8008 	str.w	r8, [r5, #8]
 80218bc:	bf08      	it	eq
 80218be:	2700      	moveq	r7, #0
 80218c0:	eba0 0008 	sub.w	r0, r0, r8
 80218c4:	443b      	add	r3, r7
 80218c6:	4407      	add	r7, r0
 80218c8:	f047 0701 	orr.w	r7, r7, #1
 80218cc:	45ab      	cmp	fp, r5
 80218ce:	f8ca 3000 	str.w	r3, [sl]
 80218d2:	f8c8 7004 	str.w	r7, [r8, #4]
 80218d6:	d0c4      	beq.n	8021862 <_malloc_r+0x322>
 80218d8:	2e0f      	cmp	r6, #15
 80218da:	d810      	bhi.n	80218fe <_malloc_r+0x3be>
 80218dc:	2301      	movs	r3, #1
 80218de:	f8c8 3004 	str.w	r3, [r8, #4]
 80218e2:	68ab      	ldr	r3, [r5, #8]
 80218e4:	685a      	ldr	r2, [r3, #4]
 80218e6:	f022 0203 	bic.w	r2, r2, #3
 80218ea:	4294      	cmp	r4, r2
 80218ec:	eba2 0304 	sub.w	r3, r2, r4
 80218f0:	d801      	bhi.n	80218f6 <_malloc_r+0x3b6>
 80218f2:	2b0f      	cmp	r3, #15
 80218f4:	dc1a      	bgt.n	802192c <_malloc_r+0x3ec>
 80218f6:	4648      	mov	r0, r9
 80218f8:	f000 f836 	bl	8021968 <__malloc_unlock>
 80218fc:	e62d      	b.n	802155a <_malloc_r+0x1a>
 80218fe:	f8db 3004 	ldr.w	r3, [fp, #4]
 8021902:	3e0c      	subs	r6, #12
 8021904:	f026 0607 	bic.w	r6, r6, #7
 8021908:	f003 0301 	and.w	r3, r3, #1
 802190c:	4333      	orrs	r3, r6
 802190e:	f8cb 3004 	str.w	r3, [fp, #4]
 8021912:	eb0b 0306 	add.w	r3, fp, r6
 8021916:	2205      	movs	r2, #5
 8021918:	2e0f      	cmp	r6, #15
 802191a:	605a      	str	r2, [r3, #4]
 802191c:	609a      	str	r2, [r3, #8]
 802191e:	d9a0      	bls.n	8021862 <_malloc_r+0x322>
 8021920:	f10b 0108 	add.w	r1, fp, #8
 8021924:	4648      	mov	r0, r9
 8021926:	f000 fc03 	bl	8022130 <_free_r>
 802192a:	e79a      	b.n	8021862 <_malloc_r+0x322>
 802192c:	68ae      	ldr	r6, [r5, #8]
 802192e:	f044 0201 	orr.w	r2, r4, #1
 8021932:	4434      	add	r4, r6
 8021934:	f043 0301 	orr.w	r3, r3, #1
 8021938:	6072      	str	r2, [r6, #4]
 802193a:	60ac      	str	r4, [r5, #8]
 802193c:	6063      	str	r3, [r4, #4]
 802193e:	e631      	b.n	80215a4 <_malloc_r+0x64>
 8021940:	2009061c 	.word	0x2009061c
 8021944:	2000143c 	.word	0x2000143c
 8021948:	00000080 	.word	0x00000080
 802194c:	200905ec 	.word	0x200905ec
 8021950:	0000007f 	.word	0x0000007f
 8021954:	20090614 	.word	0x20090614
 8021958:	20090618 	.word	0x20090618

0802195c <__malloc_lock>:
 802195c:	4801      	ldr	r0, [pc, #4]	; (8021964 <__malloc_lock+0x8>)
 802195e:	f000 bca3 	b.w	80222a8 <__retarget_lock_acquire_recursive>
 8021962:	bf00      	nop
 8021964:	20096550 	.word	0x20096550

08021968 <__malloc_unlock>:
 8021968:	4801      	ldr	r0, [pc, #4]	; (8021970 <__malloc_unlock+0x8>)
 802196a:	f000 bc9e 	b.w	80222aa <__retarget_lock_release_recursive>
 802196e:	bf00      	nop
 8021970:	20096550 	.word	0x20096550

08021974 <_Balloc>:
 8021974:	b570      	push	{r4, r5, r6, lr}
 8021976:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021978:	4604      	mov	r4, r0
 802197a:	460e      	mov	r6, r1
 802197c:	b93d      	cbnz	r5, 802198e <_Balloc+0x1a>
 802197e:	2010      	movs	r0, #16
 8021980:	f7ff fdd6 	bl	8021530 <malloc>
 8021984:	6260      	str	r0, [r4, #36]	; 0x24
 8021986:	6045      	str	r5, [r0, #4]
 8021988:	6085      	str	r5, [r0, #8]
 802198a:	6005      	str	r5, [r0, #0]
 802198c:	60c5      	str	r5, [r0, #12]
 802198e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8021990:	68eb      	ldr	r3, [r5, #12]
 8021992:	b183      	cbz	r3, 80219b6 <_Balloc+0x42>
 8021994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021996:	68db      	ldr	r3, [r3, #12]
 8021998:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802199c:	b9b8      	cbnz	r0, 80219ce <_Balloc+0x5a>
 802199e:	2101      	movs	r1, #1
 80219a0:	fa01 f506 	lsl.w	r5, r1, r6
 80219a4:	1d6a      	adds	r2, r5, #5
 80219a6:	0092      	lsls	r2, r2, #2
 80219a8:	4620      	mov	r0, r4
 80219aa:	f000 fb3d 	bl	8022028 <_calloc_r>
 80219ae:	b160      	cbz	r0, 80219ca <_Balloc+0x56>
 80219b0:	6046      	str	r6, [r0, #4]
 80219b2:	6085      	str	r5, [r0, #8]
 80219b4:	e00e      	b.n	80219d4 <_Balloc+0x60>
 80219b6:	2221      	movs	r2, #33	; 0x21
 80219b8:	2104      	movs	r1, #4
 80219ba:	4620      	mov	r0, r4
 80219bc:	f000 fb34 	bl	8022028 <_calloc_r>
 80219c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219c2:	60e8      	str	r0, [r5, #12]
 80219c4:	68db      	ldr	r3, [r3, #12]
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	d1e4      	bne.n	8021994 <_Balloc+0x20>
 80219ca:	2000      	movs	r0, #0
 80219cc:	bd70      	pop	{r4, r5, r6, pc}
 80219ce:	6802      	ldr	r2, [r0, #0]
 80219d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80219d4:	2300      	movs	r3, #0
 80219d6:	6103      	str	r3, [r0, #16]
 80219d8:	60c3      	str	r3, [r0, #12]
 80219da:	bd70      	pop	{r4, r5, r6, pc}

080219dc <_Bfree>:
 80219dc:	b570      	push	{r4, r5, r6, lr}
 80219de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80219e0:	4606      	mov	r6, r0
 80219e2:	460d      	mov	r5, r1
 80219e4:	b93c      	cbnz	r4, 80219f6 <_Bfree+0x1a>
 80219e6:	2010      	movs	r0, #16
 80219e8:	f7ff fda2 	bl	8021530 <malloc>
 80219ec:	6270      	str	r0, [r6, #36]	; 0x24
 80219ee:	6044      	str	r4, [r0, #4]
 80219f0:	6084      	str	r4, [r0, #8]
 80219f2:	6004      	str	r4, [r0, #0]
 80219f4:	60c4      	str	r4, [r0, #12]
 80219f6:	b13d      	cbz	r5, 8021a08 <_Bfree+0x2c>
 80219f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80219fa:	686a      	ldr	r2, [r5, #4]
 80219fc:	68db      	ldr	r3, [r3, #12]
 80219fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021a02:	6029      	str	r1, [r5, #0]
 8021a04:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8021a08:	bd70      	pop	{r4, r5, r6, pc}

08021a0a <__multadd>:
 8021a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a0e:	690d      	ldr	r5, [r1, #16]
 8021a10:	461f      	mov	r7, r3
 8021a12:	4606      	mov	r6, r0
 8021a14:	460c      	mov	r4, r1
 8021a16:	f101 0e14 	add.w	lr, r1, #20
 8021a1a:	2300      	movs	r3, #0
 8021a1c:	f8de 0000 	ldr.w	r0, [lr]
 8021a20:	b281      	uxth	r1, r0
 8021a22:	fb02 7101 	mla	r1, r2, r1, r7
 8021a26:	0c0f      	lsrs	r7, r1, #16
 8021a28:	0c00      	lsrs	r0, r0, #16
 8021a2a:	fb02 7000 	mla	r0, r2, r0, r7
 8021a2e:	b289      	uxth	r1, r1
 8021a30:	3301      	adds	r3, #1
 8021a32:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8021a36:	429d      	cmp	r5, r3
 8021a38:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8021a3c:	f84e 1b04 	str.w	r1, [lr], #4
 8021a40:	dcec      	bgt.n	8021a1c <__multadd+0x12>
 8021a42:	b1d7      	cbz	r7, 8021a7a <__multadd+0x70>
 8021a44:	68a3      	ldr	r3, [r4, #8]
 8021a46:	429d      	cmp	r5, r3
 8021a48:	db12      	blt.n	8021a70 <__multadd+0x66>
 8021a4a:	6861      	ldr	r1, [r4, #4]
 8021a4c:	4630      	mov	r0, r6
 8021a4e:	3101      	adds	r1, #1
 8021a50:	f7ff ff90 	bl	8021974 <_Balloc>
 8021a54:	6922      	ldr	r2, [r4, #16]
 8021a56:	3202      	adds	r2, #2
 8021a58:	f104 010c 	add.w	r1, r4, #12
 8021a5c:	4680      	mov	r8, r0
 8021a5e:	0092      	lsls	r2, r2, #2
 8021a60:	300c      	adds	r0, #12
 8021a62:	f7fd fed7 	bl	801f814 <memcpy>
 8021a66:	4621      	mov	r1, r4
 8021a68:	4630      	mov	r0, r6
 8021a6a:	f7ff ffb7 	bl	80219dc <_Bfree>
 8021a6e:	4644      	mov	r4, r8
 8021a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021a74:	3501      	adds	r5, #1
 8021a76:	615f      	str	r7, [r3, #20]
 8021a78:	6125      	str	r5, [r4, #16]
 8021a7a:	4620      	mov	r0, r4
 8021a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021a80 <__hi0bits>:
 8021a80:	0c02      	lsrs	r2, r0, #16
 8021a82:	0412      	lsls	r2, r2, #16
 8021a84:	4603      	mov	r3, r0
 8021a86:	b9b2      	cbnz	r2, 8021ab6 <__hi0bits+0x36>
 8021a88:	0403      	lsls	r3, r0, #16
 8021a8a:	2010      	movs	r0, #16
 8021a8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8021a90:	bf04      	itt	eq
 8021a92:	021b      	lsleq	r3, r3, #8
 8021a94:	3008      	addeq	r0, #8
 8021a96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8021a9a:	bf04      	itt	eq
 8021a9c:	011b      	lsleq	r3, r3, #4
 8021a9e:	3004      	addeq	r0, #4
 8021aa0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8021aa4:	bf04      	itt	eq
 8021aa6:	009b      	lsleq	r3, r3, #2
 8021aa8:	3002      	addeq	r0, #2
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	db06      	blt.n	8021abc <__hi0bits+0x3c>
 8021aae:	005b      	lsls	r3, r3, #1
 8021ab0:	d503      	bpl.n	8021aba <__hi0bits+0x3a>
 8021ab2:	3001      	adds	r0, #1
 8021ab4:	4770      	bx	lr
 8021ab6:	2000      	movs	r0, #0
 8021ab8:	e7e8      	b.n	8021a8c <__hi0bits+0xc>
 8021aba:	2020      	movs	r0, #32
 8021abc:	4770      	bx	lr

08021abe <__lo0bits>:
 8021abe:	6803      	ldr	r3, [r0, #0]
 8021ac0:	f013 0207 	ands.w	r2, r3, #7
 8021ac4:	4601      	mov	r1, r0
 8021ac6:	d00b      	beq.n	8021ae0 <__lo0bits+0x22>
 8021ac8:	07da      	lsls	r2, r3, #31
 8021aca:	d423      	bmi.n	8021b14 <__lo0bits+0x56>
 8021acc:	0798      	lsls	r0, r3, #30
 8021ace:	bf49      	itett	mi
 8021ad0:	085b      	lsrmi	r3, r3, #1
 8021ad2:	089b      	lsrpl	r3, r3, #2
 8021ad4:	2001      	movmi	r0, #1
 8021ad6:	600b      	strmi	r3, [r1, #0]
 8021ad8:	bf5c      	itt	pl
 8021ada:	600b      	strpl	r3, [r1, #0]
 8021adc:	2002      	movpl	r0, #2
 8021ade:	4770      	bx	lr
 8021ae0:	b298      	uxth	r0, r3
 8021ae2:	b9a8      	cbnz	r0, 8021b10 <__lo0bits+0x52>
 8021ae4:	0c1b      	lsrs	r3, r3, #16
 8021ae6:	2010      	movs	r0, #16
 8021ae8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021aec:	bf04      	itt	eq
 8021aee:	0a1b      	lsreq	r3, r3, #8
 8021af0:	3008      	addeq	r0, #8
 8021af2:	071a      	lsls	r2, r3, #28
 8021af4:	bf04      	itt	eq
 8021af6:	091b      	lsreq	r3, r3, #4
 8021af8:	3004      	addeq	r0, #4
 8021afa:	079a      	lsls	r2, r3, #30
 8021afc:	bf04      	itt	eq
 8021afe:	089b      	lsreq	r3, r3, #2
 8021b00:	3002      	addeq	r0, #2
 8021b02:	07da      	lsls	r2, r3, #31
 8021b04:	d402      	bmi.n	8021b0c <__lo0bits+0x4e>
 8021b06:	085b      	lsrs	r3, r3, #1
 8021b08:	d006      	beq.n	8021b18 <__lo0bits+0x5a>
 8021b0a:	3001      	adds	r0, #1
 8021b0c:	600b      	str	r3, [r1, #0]
 8021b0e:	4770      	bx	lr
 8021b10:	4610      	mov	r0, r2
 8021b12:	e7e9      	b.n	8021ae8 <__lo0bits+0x2a>
 8021b14:	2000      	movs	r0, #0
 8021b16:	4770      	bx	lr
 8021b18:	2020      	movs	r0, #32
 8021b1a:	4770      	bx	lr

08021b1c <__i2b>:
 8021b1c:	b510      	push	{r4, lr}
 8021b1e:	460c      	mov	r4, r1
 8021b20:	2101      	movs	r1, #1
 8021b22:	f7ff ff27 	bl	8021974 <_Balloc>
 8021b26:	2201      	movs	r2, #1
 8021b28:	6144      	str	r4, [r0, #20]
 8021b2a:	6102      	str	r2, [r0, #16]
 8021b2c:	bd10      	pop	{r4, pc}

08021b2e <__multiply>:
 8021b2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b32:	4614      	mov	r4, r2
 8021b34:	690a      	ldr	r2, [r1, #16]
 8021b36:	6923      	ldr	r3, [r4, #16]
 8021b38:	429a      	cmp	r2, r3
 8021b3a:	bfb8      	it	lt
 8021b3c:	460b      	movlt	r3, r1
 8021b3e:	4689      	mov	r9, r1
 8021b40:	bfbc      	itt	lt
 8021b42:	46a1      	movlt	r9, r4
 8021b44:	461c      	movlt	r4, r3
 8021b46:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8021b4a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8021b4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021b52:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8021b56:	eb07 060a 	add.w	r6, r7, sl
 8021b5a:	429e      	cmp	r6, r3
 8021b5c:	bfc8      	it	gt
 8021b5e:	3101      	addgt	r1, #1
 8021b60:	f7ff ff08 	bl	8021974 <_Balloc>
 8021b64:	f100 0514 	add.w	r5, r0, #20
 8021b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021b6c:	462b      	mov	r3, r5
 8021b6e:	2200      	movs	r2, #0
 8021b70:	4543      	cmp	r3, r8
 8021b72:	d316      	bcc.n	8021ba2 <__multiply+0x74>
 8021b74:	f104 0214 	add.w	r2, r4, #20
 8021b78:	f109 0114 	add.w	r1, r9, #20
 8021b7c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8021b80:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8021b84:	9301      	str	r3, [sp, #4]
 8021b86:	9c01      	ldr	r4, [sp, #4]
 8021b88:	4294      	cmp	r4, r2
 8021b8a:	4613      	mov	r3, r2
 8021b8c:	d80c      	bhi.n	8021ba8 <__multiply+0x7a>
 8021b8e:	2e00      	cmp	r6, #0
 8021b90:	dd03      	ble.n	8021b9a <__multiply+0x6c>
 8021b92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021b96:	2b00      	cmp	r3, #0
 8021b98:	d054      	beq.n	8021c44 <__multiply+0x116>
 8021b9a:	6106      	str	r6, [r0, #16]
 8021b9c:	b003      	add	sp, #12
 8021b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ba2:	f843 2b04 	str.w	r2, [r3], #4
 8021ba6:	e7e3      	b.n	8021b70 <__multiply+0x42>
 8021ba8:	f8b3 a000 	ldrh.w	sl, [r3]
 8021bac:	3204      	adds	r2, #4
 8021bae:	f1ba 0f00 	cmp.w	sl, #0
 8021bb2:	d020      	beq.n	8021bf6 <__multiply+0xc8>
 8021bb4:	46ae      	mov	lr, r5
 8021bb6:	4689      	mov	r9, r1
 8021bb8:	f04f 0c00 	mov.w	ip, #0
 8021bbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8021bc0:	f8be b000 	ldrh.w	fp, [lr]
 8021bc4:	b2a3      	uxth	r3, r4
 8021bc6:	fb0a b303 	mla	r3, sl, r3, fp
 8021bca:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8021bce:	f8de 4000 	ldr.w	r4, [lr]
 8021bd2:	4463      	add	r3, ip
 8021bd4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8021bd8:	fb0a c40b 	mla	r4, sl, fp, ip
 8021bdc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8021be0:	b29b      	uxth	r3, r3
 8021be2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8021be6:	454f      	cmp	r7, r9
 8021be8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8021bec:	f84e 3b04 	str.w	r3, [lr], #4
 8021bf0:	d8e4      	bhi.n	8021bbc <__multiply+0x8e>
 8021bf2:	f8ce c000 	str.w	ip, [lr]
 8021bf6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8021bfa:	f1b9 0f00 	cmp.w	r9, #0
 8021bfe:	d01f      	beq.n	8021c40 <__multiply+0x112>
 8021c00:	682b      	ldr	r3, [r5, #0]
 8021c02:	46ae      	mov	lr, r5
 8021c04:	468c      	mov	ip, r1
 8021c06:	f04f 0a00 	mov.w	sl, #0
 8021c0a:	f8bc 4000 	ldrh.w	r4, [ip]
 8021c0e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021c12:	fb09 b404 	mla	r4, r9, r4, fp
 8021c16:	44a2      	add	sl, r4
 8021c18:	b29b      	uxth	r3, r3
 8021c1a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8021c1e:	f84e 3b04 	str.w	r3, [lr], #4
 8021c22:	f85c 3b04 	ldr.w	r3, [ip], #4
 8021c26:	f8be 4000 	ldrh.w	r4, [lr]
 8021c2a:	0c1b      	lsrs	r3, r3, #16
 8021c2c:	fb09 4303 	mla	r3, r9, r3, r4
 8021c30:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8021c34:	4567      	cmp	r7, ip
 8021c36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021c3a:	d8e6      	bhi.n	8021c0a <__multiply+0xdc>
 8021c3c:	f8ce 3000 	str.w	r3, [lr]
 8021c40:	3504      	adds	r5, #4
 8021c42:	e7a0      	b.n	8021b86 <__multiply+0x58>
 8021c44:	3e01      	subs	r6, #1
 8021c46:	e7a2      	b.n	8021b8e <__multiply+0x60>

08021c48 <__pow5mult>:
 8021c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c4c:	4615      	mov	r5, r2
 8021c4e:	f012 0203 	ands.w	r2, r2, #3
 8021c52:	4606      	mov	r6, r0
 8021c54:	460f      	mov	r7, r1
 8021c56:	d007      	beq.n	8021c68 <__pow5mult+0x20>
 8021c58:	3a01      	subs	r2, #1
 8021c5a:	4c21      	ldr	r4, [pc, #132]	; (8021ce0 <__pow5mult+0x98>)
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021c62:	f7ff fed2 	bl	8021a0a <__multadd>
 8021c66:	4607      	mov	r7, r0
 8021c68:	10ad      	asrs	r5, r5, #2
 8021c6a:	d035      	beq.n	8021cd8 <__pow5mult+0x90>
 8021c6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021c6e:	b93c      	cbnz	r4, 8021c80 <__pow5mult+0x38>
 8021c70:	2010      	movs	r0, #16
 8021c72:	f7ff fc5d 	bl	8021530 <malloc>
 8021c76:	6270      	str	r0, [r6, #36]	; 0x24
 8021c78:	6044      	str	r4, [r0, #4]
 8021c7a:	6084      	str	r4, [r0, #8]
 8021c7c:	6004      	str	r4, [r0, #0]
 8021c7e:	60c4      	str	r4, [r0, #12]
 8021c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021c88:	b94c      	cbnz	r4, 8021c9e <__pow5mult+0x56>
 8021c8a:	f240 2171 	movw	r1, #625	; 0x271
 8021c8e:	4630      	mov	r0, r6
 8021c90:	f7ff ff44 	bl	8021b1c <__i2b>
 8021c94:	2300      	movs	r3, #0
 8021c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8021c9a:	4604      	mov	r4, r0
 8021c9c:	6003      	str	r3, [r0, #0]
 8021c9e:	f04f 0800 	mov.w	r8, #0
 8021ca2:	07eb      	lsls	r3, r5, #31
 8021ca4:	d50a      	bpl.n	8021cbc <__pow5mult+0x74>
 8021ca6:	4639      	mov	r1, r7
 8021ca8:	4622      	mov	r2, r4
 8021caa:	4630      	mov	r0, r6
 8021cac:	f7ff ff3f 	bl	8021b2e <__multiply>
 8021cb0:	4639      	mov	r1, r7
 8021cb2:	4681      	mov	r9, r0
 8021cb4:	4630      	mov	r0, r6
 8021cb6:	f7ff fe91 	bl	80219dc <_Bfree>
 8021cba:	464f      	mov	r7, r9
 8021cbc:	106d      	asrs	r5, r5, #1
 8021cbe:	d00b      	beq.n	8021cd8 <__pow5mult+0x90>
 8021cc0:	6820      	ldr	r0, [r4, #0]
 8021cc2:	b938      	cbnz	r0, 8021cd4 <__pow5mult+0x8c>
 8021cc4:	4622      	mov	r2, r4
 8021cc6:	4621      	mov	r1, r4
 8021cc8:	4630      	mov	r0, r6
 8021cca:	f7ff ff30 	bl	8021b2e <__multiply>
 8021cce:	6020      	str	r0, [r4, #0]
 8021cd0:	f8c0 8000 	str.w	r8, [r0]
 8021cd4:	4604      	mov	r4, r0
 8021cd6:	e7e4      	b.n	8021ca2 <__pow5mult+0x5a>
 8021cd8:	4638      	mov	r0, r7
 8021cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021cde:	bf00      	nop
 8021ce0:	08031528 	.word	0x08031528

08021ce4 <__lshift>:
 8021ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ce8:	460c      	mov	r4, r1
 8021cea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021cee:	6923      	ldr	r3, [r4, #16]
 8021cf0:	6849      	ldr	r1, [r1, #4]
 8021cf2:	eb0a 0903 	add.w	r9, sl, r3
 8021cf6:	68a3      	ldr	r3, [r4, #8]
 8021cf8:	4607      	mov	r7, r0
 8021cfa:	4616      	mov	r6, r2
 8021cfc:	f109 0501 	add.w	r5, r9, #1
 8021d00:	42ab      	cmp	r3, r5
 8021d02:	db31      	blt.n	8021d68 <__lshift+0x84>
 8021d04:	4638      	mov	r0, r7
 8021d06:	f7ff fe35 	bl	8021974 <_Balloc>
 8021d0a:	2200      	movs	r2, #0
 8021d0c:	4680      	mov	r8, r0
 8021d0e:	f100 0314 	add.w	r3, r0, #20
 8021d12:	4611      	mov	r1, r2
 8021d14:	4552      	cmp	r2, sl
 8021d16:	db2a      	blt.n	8021d6e <__lshift+0x8a>
 8021d18:	6920      	ldr	r0, [r4, #16]
 8021d1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021d1e:	f104 0114 	add.w	r1, r4, #20
 8021d22:	f016 021f 	ands.w	r2, r6, #31
 8021d26:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8021d2a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8021d2e:	d022      	beq.n	8021d76 <__lshift+0x92>
 8021d30:	f1c2 0c20 	rsb	ip, r2, #32
 8021d34:	2000      	movs	r0, #0
 8021d36:	680e      	ldr	r6, [r1, #0]
 8021d38:	4096      	lsls	r6, r2
 8021d3a:	4330      	orrs	r0, r6
 8021d3c:	f843 0b04 	str.w	r0, [r3], #4
 8021d40:	f851 0b04 	ldr.w	r0, [r1], #4
 8021d44:	458e      	cmp	lr, r1
 8021d46:	fa20 f00c 	lsr.w	r0, r0, ip
 8021d4a:	d8f4      	bhi.n	8021d36 <__lshift+0x52>
 8021d4c:	6018      	str	r0, [r3, #0]
 8021d4e:	b108      	cbz	r0, 8021d54 <__lshift+0x70>
 8021d50:	f109 0502 	add.w	r5, r9, #2
 8021d54:	3d01      	subs	r5, #1
 8021d56:	4638      	mov	r0, r7
 8021d58:	f8c8 5010 	str.w	r5, [r8, #16]
 8021d5c:	4621      	mov	r1, r4
 8021d5e:	f7ff fe3d 	bl	80219dc <_Bfree>
 8021d62:	4640      	mov	r0, r8
 8021d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d68:	3101      	adds	r1, #1
 8021d6a:	005b      	lsls	r3, r3, #1
 8021d6c:	e7c8      	b.n	8021d00 <__lshift+0x1c>
 8021d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8021d72:	3201      	adds	r2, #1
 8021d74:	e7ce      	b.n	8021d14 <__lshift+0x30>
 8021d76:	3b04      	subs	r3, #4
 8021d78:	f851 2b04 	ldr.w	r2, [r1], #4
 8021d7c:	f843 2f04 	str.w	r2, [r3, #4]!
 8021d80:	458e      	cmp	lr, r1
 8021d82:	d8f9      	bhi.n	8021d78 <__lshift+0x94>
 8021d84:	e7e6      	b.n	8021d54 <__lshift+0x70>

08021d86 <__mcmp>:
 8021d86:	6903      	ldr	r3, [r0, #16]
 8021d88:	690a      	ldr	r2, [r1, #16]
 8021d8a:	1a9b      	subs	r3, r3, r2
 8021d8c:	b530      	push	{r4, r5, lr}
 8021d8e:	d10c      	bne.n	8021daa <__mcmp+0x24>
 8021d90:	0092      	lsls	r2, r2, #2
 8021d92:	3014      	adds	r0, #20
 8021d94:	3114      	adds	r1, #20
 8021d96:	1884      	adds	r4, r0, r2
 8021d98:	4411      	add	r1, r2
 8021d9a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021d9e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8021da2:	4295      	cmp	r5, r2
 8021da4:	d003      	beq.n	8021dae <__mcmp+0x28>
 8021da6:	d305      	bcc.n	8021db4 <__mcmp+0x2e>
 8021da8:	2301      	movs	r3, #1
 8021daa:	4618      	mov	r0, r3
 8021dac:	bd30      	pop	{r4, r5, pc}
 8021dae:	42a0      	cmp	r0, r4
 8021db0:	d3f3      	bcc.n	8021d9a <__mcmp+0x14>
 8021db2:	e7fa      	b.n	8021daa <__mcmp+0x24>
 8021db4:	f04f 33ff 	mov.w	r3, #4294967295
 8021db8:	e7f7      	b.n	8021daa <__mcmp+0x24>

08021dba <__mdiff>:
 8021dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dbe:	460d      	mov	r5, r1
 8021dc0:	4607      	mov	r7, r0
 8021dc2:	4611      	mov	r1, r2
 8021dc4:	4628      	mov	r0, r5
 8021dc6:	4614      	mov	r4, r2
 8021dc8:	f7ff ffdd 	bl	8021d86 <__mcmp>
 8021dcc:	1e06      	subs	r6, r0, #0
 8021dce:	d108      	bne.n	8021de2 <__mdiff+0x28>
 8021dd0:	4631      	mov	r1, r6
 8021dd2:	4638      	mov	r0, r7
 8021dd4:	f7ff fdce 	bl	8021974 <_Balloc>
 8021dd8:	2301      	movs	r3, #1
 8021dda:	6103      	str	r3, [r0, #16]
 8021ddc:	6146      	str	r6, [r0, #20]
 8021dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021de2:	bfa4      	itt	ge
 8021de4:	4623      	movge	r3, r4
 8021de6:	462c      	movge	r4, r5
 8021de8:	4638      	mov	r0, r7
 8021dea:	6861      	ldr	r1, [r4, #4]
 8021dec:	bfa6      	itte	ge
 8021dee:	461d      	movge	r5, r3
 8021df0:	2600      	movge	r6, #0
 8021df2:	2601      	movlt	r6, #1
 8021df4:	f7ff fdbe 	bl	8021974 <_Balloc>
 8021df8:	692b      	ldr	r3, [r5, #16]
 8021dfa:	60c6      	str	r6, [r0, #12]
 8021dfc:	6926      	ldr	r6, [r4, #16]
 8021dfe:	f105 0914 	add.w	r9, r5, #20
 8021e02:	f104 0214 	add.w	r2, r4, #20
 8021e06:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8021e0a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8021e0e:	f100 0514 	add.w	r5, r0, #20
 8021e12:	f04f 0c00 	mov.w	ip, #0
 8021e16:	f852 ab04 	ldr.w	sl, [r2], #4
 8021e1a:	f859 4b04 	ldr.w	r4, [r9], #4
 8021e1e:	fa1c f18a 	uxtah	r1, ip, sl
 8021e22:	b2a3      	uxth	r3, r4
 8021e24:	1ac9      	subs	r1, r1, r3
 8021e26:	0c23      	lsrs	r3, r4, #16
 8021e28:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8021e2c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8021e30:	b289      	uxth	r1, r1
 8021e32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8021e36:	45c8      	cmp	r8, r9
 8021e38:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8021e3c:	4696      	mov	lr, r2
 8021e3e:	f845 3b04 	str.w	r3, [r5], #4
 8021e42:	d8e8      	bhi.n	8021e16 <__mdiff+0x5c>
 8021e44:	45be      	cmp	lr, r7
 8021e46:	d305      	bcc.n	8021e54 <__mdiff+0x9a>
 8021e48:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8021e4c:	b18b      	cbz	r3, 8021e72 <__mdiff+0xb8>
 8021e4e:	6106      	str	r6, [r0, #16]
 8021e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e54:	f85e 1b04 	ldr.w	r1, [lr], #4
 8021e58:	fa1c f381 	uxtah	r3, ip, r1
 8021e5c:	141a      	asrs	r2, r3, #16
 8021e5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021e62:	b29b      	uxth	r3, r3
 8021e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021e68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021e6c:	f845 3b04 	str.w	r3, [r5], #4
 8021e70:	e7e8      	b.n	8021e44 <__mdiff+0x8a>
 8021e72:	3e01      	subs	r6, #1
 8021e74:	e7e8      	b.n	8021e48 <__mdiff+0x8e>

08021e76 <__d2b>:
 8021e76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021e7a:	460e      	mov	r6, r1
 8021e7c:	2101      	movs	r1, #1
 8021e7e:	ec59 8b10 	vmov	r8, r9, d0
 8021e82:	4615      	mov	r5, r2
 8021e84:	f7ff fd76 	bl	8021974 <_Balloc>
 8021e88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8021e8c:	4607      	mov	r7, r0
 8021e8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021e92:	bb34      	cbnz	r4, 8021ee2 <__d2b+0x6c>
 8021e94:	9301      	str	r3, [sp, #4]
 8021e96:	f1b8 0f00 	cmp.w	r8, #0
 8021e9a:	d027      	beq.n	8021eec <__d2b+0x76>
 8021e9c:	a802      	add	r0, sp, #8
 8021e9e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8021ea2:	f7ff fe0c 	bl	8021abe <__lo0bits>
 8021ea6:	9900      	ldr	r1, [sp, #0]
 8021ea8:	b1f0      	cbz	r0, 8021ee8 <__d2b+0x72>
 8021eaa:	9a01      	ldr	r2, [sp, #4]
 8021eac:	f1c0 0320 	rsb	r3, r0, #32
 8021eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8021eb4:	430b      	orrs	r3, r1
 8021eb6:	40c2      	lsrs	r2, r0
 8021eb8:	617b      	str	r3, [r7, #20]
 8021eba:	9201      	str	r2, [sp, #4]
 8021ebc:	9b01      	ldr	r3, [sp, #4]
 8021ebe:	61bb      	str	r3, [r7, #24]
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	bf14      	ite	ne
 8021ec4:	2102      	movne	r1, #2
 8021ec6:	2101      	moveq	r1, #1
 8021ec8:	6139      	str	r1, [r7, #16]
 8021eca:	b1c4      	cbz	r4, 8021efe <__d2b+0x88>
 8021ecc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8021ed0:	4404      	add	r4, r0
 8021ed2:	6034      	str	r4, [r6, #0]
 8021ed4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021ed8:	6028      	str	r0, [r5, #0]
 8021eda:	4638      	mov	r0, r7
 8021edc:	b003      	add	sp, #12
 8021ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021ee6:	e7d5      	b.n	8021e94 <__d2b+0x1e>
 8021ee8:	6179      	str	r1, [r7, #20]
 8021eea:	e7e7      	b.n	8021ebc <__d2b+0x46>
 8021eec:	a801      	add	r0, sp, #4
 8021eee:	f7ff fde6 	bl	8021abe <__lo0bits>
 8021ef2:	9b01      	ldr	r3, [sp, #4]
 8021ef4:	617b      	str	r3, [r7, #20]
 8021ef6:	2101      	movs	r1, #1
 8021ef8:	6139      	str	r1, [r7, #16]
 8021efa:	3020      	adds	r0, #32
 8021efc:	e7e5      	b.n	8021eca <__d2b+0x54>
 8021efe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8021f02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021f06:	6030      	str	r0, [r6, #0]
 8021f08:	6918      	ldr	r0, [r3, #16]
 8021f0a:	f7ff fdb9 	bl	8021a80 <__hi0bits>
 8021f0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8021f12:	e7e1      	b.n	8021ed8 <__d2b+0x62>

08021f14 <_sbrk_r>:
 8021f14:	b538      	push	{r3, r4, r5, lr}
 8021f16:	4c06      	ldr	r4, [pc, #24]	; (8021f30 <_sbrk_r+0x1c>)
 8021f18:	2300      	movs	r3, #0
 8021f1a:	4605      	mov	r5, r0
 8021f1c:	4608      	mov	r0, r1
 8021f1e:	6023      	str	r3, [r4, #0]
 8021f20:	f7fd f9b4 	bl	801f28c <_sbrk>
 8021f24:	1c43      	adds	r3, r0, #1
 8021f26:	d102      	bne.n	8021f2e <_sbrk_r+0x1a>
 8021f28:	6823      	ldr	r3, [r4, #0]
 8021f2a:	b103      	cbz	r3, 8021f2e <_sbrk_r+0x1a>
 8021f2c:	602b      	str	r3, [r5, #0]
 8021f2e:	bd38      	pop	{r3, r4, r5, pc}
 8021f30:	20096558 	.word	0x20096558

08021f34 <__ssprint_r>:
 8021f34:	6893      	ldr	r3, [r2, #8]
 8021f36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f3a:	4681      	mov	r9, r0
 8021f3c:	460c      	mov	r4, r1
 8021f3e:	4617      	mov	r7, r2
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d060      	beq.n	8022006 <__ssprint_r+0xd2>
 8021f44:	f04f 0b00 	mov.w	fp, #0
 8021f48:	f8d2 a000 	ldr.w	sl, [r2]
 8021f4c:	465e      	mov	r6, fp
 8021f4e:	b356      	cbz	r6, 8021fa6 <__ssprint_r+0x72>
 8021f50:	68a3      	ldr	r3, [r4, #8]
 8021f52:	429e      	cmp	r6, r3
 8021f54:	d344      	bcc.n	8021fe0 <__ssprint_r+0xac>
 8021f56:	89a2      	ldrh	r2, [r4, #12]
 8021f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021f5c:	d03e      	beq.n	8021fdc <__ssprint_r+0xa8>
 8021f5e:	6825      	ldr	r5, [r4, #0]
 8021f60:	6921      	ldr	r1, [r4, #16]
 8021f62:	eba5 0801 	sub.w	r8, r5, r1
 8021f66:	6965      	ldr	r5, [r4, #20]
 8021f68:	2302      	movs	r3, #2
 8021f6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021f6e:	fb95 f5f3 	sdiv	r5, r5, r3
 8021f72:	f108 0301 	add.w	r3, r8, #1
 8021f76:	4433      	add	r3, r6
 8021f78:	429d      	cmp	r5, r3
 8021f7a:	bf38      	it	cc
 8021f7c:	461d      	movcc	r5, r3
 8021f7e:	0553      	lsls	r3, r2, #21
 8021f80:	d546      	bpl.n	8022010 <__ssprint_r+0xdc>
 8021f82:	4629      	mov	r1, r5
 8021f84:	4648      	mov	r0, r9
 8021f86:	f7ff fadb 	bl	8021540 <_malloc_r>
 8021f8a:	b998      	cbnz	r0, 8021fb4 <__ssprint_r+0x80>
 8021f8c:	230c      	movs	r3, #12
 8021f8e:	f8c9 3000 	str.w	r3, [r9]
 8021f92:	89a3      	ldrh	r3, [r4, #12]
 8021f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021f98:	81a3      	strh	r3, [r4, #12]
 8021f9a:	2300      	movs	r3, #0
 8021f9c:	60bb      	str	r3, [r7, #8]
 8021f9e:	607b      	str	r3, [r7, #4]
 8021fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8021fa4:	e031      	b.n	802200a <__ssprint_r+0xd6>
 8021fa6:	f8da b000 	ldr.w	fp, [sl]
 8021faa:	f8da 6004 	ldr.w	r6, [sl, #4]
 8021fae:	f10a 0a08 	add.w	sl, sl, #8
 8021fb2:	e7cc      	b.n	8021f4e <__ssprint_r+0x1a>
 8021fb4:	4642      	mov	r2, r8
 8021fb6:	6921      	ldr	r1, [r4, #16]
 8021fb8:	9001      	str	r0, [sp, #4]
 8021fba:	f7fd fc2b 	bl	801f814 <memcpy>
 8021fbe:	89a2      	ldrh	r2, [r4, #12]
 8021fc0:	9b01      	ldr	r3, [sp, #4]
 8021fc2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8021fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021fca:	81a2      	strh	r2, [r4, #12]
 8021fcc:	6123      	str	r3, [r4, #16]
 8021fce:	6165      	str	r5, [r4, #20]
 8021fd0:	4443      	add	r3, r8
 8021fd2:	eba5 0508 	sub.w	r5, r5, r8
 8021fd6:	6023      	str	r3, [r4, #0]
 8021fd8:	60a5      	str	r5, [r4, #8]
 8021fda:	4633      	mov	r3, r6
 8021fdc:	429e      	cmp	r6, r3
 8021fde:	d200      	bcs.n	8021fe2 <__ssprint_r+0xae>
 8021fe0:	4633      	mov	r3, r6
 8021fe2:	461a      	mov	r2, r3
 8021fe4:	4659      	mov	r1, fp
 8021fe6:	6820      	ldr	r0, [r4, #0]
 8021fe8:	9301      	str	r3, [sp, #4]
 8021fea:	f000 f971 	bl	80222d0 <memmove>
 8021fee:	68a2      	ldr	r2, [r4, #8]
 8021ff0:	9b01      	ldr	r3, [sp, #4]
 8021ff2:	1ad2      	subs	r2, r2, r3
 8021ff4:	60a2      	str	r2, [r4, #8]
 8021ff6:	6822      	ldr	r2, [r4, #0]
 8021ff8:	4413      	add	r3, r2
 8021ffa:	6023      	str	r3, [r4, #0]
 8021ffc:	68bb      	ldr	r3, [r7, #8]
 8021ffe:	1b9e      	subs	r6, r3, r6
 8022000:	60be      	str	r6, [r7, #8]
 8022002:	2e00      	cmp	r6, #0
 8022004:	d1cf      	bne.n	8021fa6 <__ssprint_r+0x72>
 8022006:	2000      	movs	r0, #0
 8022008:	6078      	str	r0, [r7, #4]
 802200a:	b003      	add	sp, #12
 802200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022010:	462a      	mov	r2, r5
 8022012:	4648      	mov	r0, r9
 8022014:	f000 f976 	bl	8022304 <_realloc_r>
 8022018:	4603      	mov	r3, r0
 802201a:	2800      	cmp	r0, #0
 802201c:	d1d6      	bne.n	8021fcc <__ssprint_r+0x98>
 802201e:	6921      	ldr	r1, [r4, #16]
 8022020:	4648      	mov	r0, r9
 8022022:	f000 f885 	bl	8022130 <_free_r>
 8022026:	e7b1      	b.n	8021f8c <__ssprint_r+0x58>

08022028 <_calloc_r>:
 8022028:	b510      	push	{r4, lr}
 802202a:	4351      	muls	r1, r2
 802202c:	f7ff fa88 	bl	8021540 <_malloc_r>
 8022030:	4604      	mov	r4, r0
 8022032:	b198      	cbz	r0, 802205c <_calloc_r+0x34>
 8022034:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022038:	f022 0203 	bic.w	r2, r2, #3
 802203c:	3a04      	subs	r2, #4
 802203e:	2a24      	cmp	r2, #36	; 0x24
 8022040:	d81b      	bhi.n	802207a <_calloc_r+0x52>
 8022042:	2a13      	cmp	r2, #19
 8022044:	d917      	bls.n	8022076 <_calloc_r+0x4e>
 8022046:	2100      	movs	r1, #0
 8022048:	2a1b      	cmp	r2, #27
 802204a:	6001      	str	r1, [r0, #0]
 802204c:	6041      	str	r1, [r0, #4]
 802204e:	d807      	bhi.n	8022060 <_calloc_r+0x38>
 8022050:	f100 0308 	add.w	r3, r0, #8
 8022054:	2200      	movs	r2, #0
 8022056:	601a      	str	r2, [r3, #0]
 8022058:	605a      	str	r2, [r3, #4]
 802205a:	609a      	str	r2, [r3, #8]
 802205c:	4620      	mov	r0, r4
 802205e:	bd10      	pop	{r4, pc}
 8022060:	2a24      	cmp	r2, #36	; 0x24
 8022062:	6081      	str	r1, [r0, #8]
 8022064:	60c1      	str	r1, [r0, #12]
 8022066:	bf11      	iteee	ne
 8022068:	f100 0310 	addne.w	r3, r0, #16
 802206c:	6101      	streq	r1, [r0, #16]
 802206e:	f100 0318 	addeq.w	r3, r0, #24
 8022072:	6141      	streq	r1, [r0, #20]
 8022074:	e7ee      	b.n	8022054 <_calloc_r+0x2c>
 8022076:	4603      	mov	r3, r0
 8022078:	e7ec      	b.n	8022054 <_calloc_r+0x2c>
 802207a:	2100      	movs	r1, #0
 802207c:	f7fd fbd5 	bl	801f82a <memset>
 8022080:	e7ec      	b.n	802205c <_calloc_r+0x34>
	...

08022084 <_malloc_trim_r>:
 8022084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022088:	4f25      	ldr	r7, [pc, #148]	; (8022120 <_malloc_trim_r+0x9c>)
 802208a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 802212c <_malloc_trim_r+0xa8>
 802208e:	4689      	mov	r9, r1
 8022090:	4606      	mov	r6, r0
 8022092:	f7ff fc63 	bl	802195c <__malloc_lock>
 8022096:	68bb      	ldr	r3, [r7, #8]
 8022098:	685d      	ldr	r5, [r3, #4]
 802209a:	f1a8 0411 	sub.w	r4, r8, #17
 802209e:	f025 0503 	bic.w	r5, r5, #3
 80220a2:	eba4 0409 	sub.w	r4, r4, r9
 80220a6:	442c      	add	r4, r5
 80220a8:	fbb4 f4f8 	udiv	r4, r4, r8
 80220ac:	3c01      	subs	r4, #1
 80220ae:	fb08 f404 	mul.w	r4, r8, r4
 80220b2:	4544      	cmp	r4, r8
 80220b4:	da05      	bge.n	80220c2 <_malloc_trim_r+0x3e>
 80220b6:	4630      	mov	r0, r6
 80220b8:	f7ff fc56 	bl	8021968 <__malloc_unlock>
 80220bc:	2000      	movs	r0, #0
 80220be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80220c2:	2100      	movs	r1, #0
 80220c4:	4630      	mov	r0, r6
 80220c6:	f7ff ff25 	bl	8021f14 <_sbrk_r>
 80220ca:	68bb      	ldr	r3, [r7, #8]
 80220cc:	442b      	add	r3, r5
 80220ce:	4298      	cmp	r0, r3
 80220d0:	d1f1      	bne.n	80220b6 <_malloc_trim_r+0x32>
 80220d2:	4261      	negs	r1, r4
 80220d4:	4630      	mov	r0, r6
 80220d6:	f7ff ff1d 	bl	8021f14 <_sbrk_r>
 80220da:	3001      	adds	r0, #1
 80220dc:	d110      	bne.n	8022100 <_malloc_trim_r+0x7c>
 80220de:	2100      	movs	r1, #0
 80220e0:	4630      	mov	r0, r6
 80220e2:	f7ff ff17 	bl	8021f14 <_sbrk_r>
 80220e6:	68ba      	ldr	r2, [r7, #8]
 80220e8:	1a83      	subs	r3, r0, r2
 80220ea:	2b0f      	cmp	r3, #15
 80220ec:	dde3      	ble.n	80220b6 <_malloc_trim_r+0x32>
 80220ee:	490d      	ldr	r1, [pc, #52]	; (8022124 <_malloc_trim_r+0xa0>)
 80220f0:	6809      	ldr	r1, [r1, #0]
 80220f2:	1a40      	subs	r0, r0, r1
 80220f4:	490c      	ldr	r1, [pc, #48]	; (8022128 <_malloc_trim_r+0xa4>)
 80220f6:	f043 0301 	orr.w	r3, r3, #1
 80220fa:	6008      	str	r0, [r1, #0]
 80220fc:	6053      	str	r3, [r2, #4]
 80220fe:	e7da      	b.n	80220b6 <_malloc_trim_r+0x32>
 8022100:	68bb      	ldr	r3, [r7, #8]
 8022102:	4a09      	ldr	r2, [pc, #36]	; (8022128 <_malloc_trim_r+0xa4>)
 8022104:	1b2d      	subs	r5, r5, r4
 8022106:	f045 0501 	orr.w	r5, r5, #1
 802210a:	605d      	str	r5, [r3, #4]
 802210c:	6813      	ldr	r3, [r2, #0]
 802210e:	4630      	mov	r0, r6
 8022110:	1b1c      	subs	r4, r3, r4
 8022112:	6014      	str	r4, [r2, #0]
 8022114:	f7ff fc28 	bl	8021968 <__malloc_unlock>
 8022118:	2001      	movs	r0, #1
 802211a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802211e:	bf00      	nop
 8022120:	20001034 	.word	0x20001034
 8022124:	2000143c 	.word	0x2000143c
 8022128:	200905ec 	.word	0x200905ec
 802212c:	00000080 	.word	0x00000080

08022130 <_free_r>:
 8022130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022134:	4604      	mov	r4, r0
 8022136:	4688      	mov	r8, r1
 8022138:	2900      	cmp	r1, #0
 802213a:	f000 80ab 	beq.w	8022294 <_free_r+0x164>
 802213e:	f7ff fc0d 	bl	802195c <__malloc_lock>
 8022142:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8022146:	4d54      	ldr	r5, [pc, #336]	; (8022298 <_free_r+0x168>)
 8022148:	f022 0001 	bic.w	r0, r2, #1
 802214c:	f1a8 0308 	sub.w	r3, r8, #8
 8022150:	181f      	adds	r7, r3, r0
 8022152:	68a9      	ldr	r1, [r5, #8]
 8022154:	687e      	ldr	r6, [r7, #4]
 8022156:	428f      	cmp	r7, r1
 8022158:	f026 0603 	bic.w	r6, r6, #3
 802215c:	f002 0201 	and.w	r2, r2, #1
 8022160:	d11b      	bne.n	802219a <_free_r+0x6a>
 8022162:	4430      	add	r0, r6
 8022164:	b93a      	cbnz	r2, 8022176 <_free_r+0x46>
 8022166:	f858 2c08 	ldr.w	r2, [r8, #-8]
 802216a:	1a9b      	subs	r3, r3, r2
 802216c:	4410      	add	r0, r2
 802216e:	6899      	ldr	r1, [r3, #8]
 8022170:	68da      	ldr	r2, [r3, #12]
 8022172:	60ca      	str	r2, [r1, #12]
 8022174:	6091      	str	r1, [r2, #8]
 8022176:	f040 0201 	orr.w	r2, r0, #1
 802217a:	605a      	str	r2, [r3, #4]
 802217c:	60ab      	str	r3, [r5, #8]
 802217e:	4b47      	ldr	r3, [pc, #284]	; (802229c <_free_r+0x16c>)
 8022180:	681b      	ldr	r3, [r3, #0]
 8022182:	4298      	cmp	r0, r3
 8022184:	d304      	bcc.n	8022190 <_free_r+0x60>
 8022186:	4b46      	ldr	r3, [pc, #280]	; (80222a0 <_free_r+0x170>)
 8022188:	4620      	mov	r0, r4
 802218a:	6819      	ldr	r1, [r3, #0]
 802218c:	f7ff ff7a 	bl	8022084 <_malloc_trim_r>
 8022190:	4620      	mov	r0, r4
 8022192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022196:	f7ff bbe7 	b.w	8021968 <__malloc_unlock>
 802219a:	607e      	str	r6, [r7, #4]
 802219c:	2a00      	cmp	r2, #0
 802219e:	d139      	bne.n	8022214 <_free_r+0xe4>
 80221a0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80221a4:	1a5b      	subs	r3, r3, r1
 80221a6:	4408      	add	r0, r1
 80221a8:	6899      	ldr	r1, [r3, #8]
 80221aa:	f105 0e08 	add.w	lr, r5, #8
 80221ae:	4571      	cmp	r1, lr
 80221b0:	d032      	beq.n	8022218 <_free_r+0xe8>
 80221b2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80221b6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80221ba:	f8ce 1008 	str.w	r1, [lr, #8]
 80221be:	19b9      	adds	r1, r7, r6
 80221c0:	6849      	ldr	r1, [r1, #4]
 80221c2:	07c9      	lsls	r1, r1, #31
 80221c4:	d40a      	bmi.n	80221dc <_free_r+0xac>
 80221c6:	4430      	add	r0, r6
 80221c8:	68b9      	ldr	r1, [r7, #8]
 80221ca:	bb3a      	cbnz	r2, 802221c <_free_r+0xec>
 80221cc:	4e35      	ldr	r6, [pc, #212]	; (80222a4 <_free_r+0x174>)
 80221ce:	42b1      	cmp	r1, r6
 80221d0:	d124      	bne.n	802221c <_free_r+0xec>
 80221d2:	616b      	str	r3, [r5, #20]
 80221d4:	612b      	str	r3, [r5, #16]
 80221d6:	2201      	movs	r2, #1
 80221d8:	60d9      	str	r1, [r3, #12]
 80221da:	6099      	str	r1, [r3, #8]
 80221dc:	f040 0101 	orr.w	r1, r0, #1
 80221e0:	6059      	str	r1, [r3, #4]
 80221e2:	5018      	str	r0, [r3, r0]
 80221e4:	2a00      	cmp	r2, #0
 80221e6:	d1d3      	bne.n	8022190 <_free_r+0x60>
 80221e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80221ec:	d21a      	bcs.n	8022224 <_free_r+0xf4>
 80221ee:	08c0      	lsrs	r0, r0, #3
 80221f0:	1081      	asrs	r1, r0, #2
 80221f2:	2201      	movs	r2, #1
 80221f4:	408a      	lsls	r2, r1
 80221f6:	6869      	ldr	r1, [r5, #4]
 80221f8:	3001      	adds	r0, #1
 80221fa:	430a      	orrs	r2, r1
 80221fc:	606a      	str	r2, [r5, #4]
 80221fe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8022202:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8022206:	6099      	str	r1, [r3, #8]
 8022208:	3a08      	subs	r2, #8
 802220a:	60da      	str	r2, [r3, #12]
 802220c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8022210:	60cb      	str	r3, [r1, #12]
 8022212:	e7bd      	b.n	8022190 <_free_r+0x60>
 8022214:	2200      	movs	r2, #0
 8022216:	e7d2      	b.n	80221be <_free_r+0x8e>
 8022218:	2201      	movs	r2, #1
 802221a:	e7d0      	b.n	80221be <_free_r+0x8e>
 802221c:	68fe      	ldr	r6, [r7, #12]
 802221e:	60ce      	str	r6, [r1, #12]
 8022220:	60b1      	str	r1, [r6, #8]
 8022222:	e7db      	b.n	80221dc <_free_r+0xac>
 8022224:	0a42      	lsrs	r2, r0, #9
 8022226:	2a04      	cmp	r2, #4
 8022228:	d813      	bhi.n	8022252 <_free_r+0x122>
 802222a:	0982      	lsrs	r2, r0, #6
 802222c:	3238      	adds	r2, #56	; 0x38
 802222e:	1c51      	adds	r1, r2, #1
 8022230:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8022234:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8022238:	428e      	cmp	r6, r1
 802223a:	d124      	bne.n	8022286 <_free_r+0x156>
 802223c:	2001      	movs	r0, #1
 802223e:	1092      	asrs	r2, r2, #2
 8022240:	fa00 f202 	lsl.w	r2, r0, r2
 8022244:	6868      	ldr	r0, [r5, #4]
 8022246:	4302      	orrs	r2, r0
 8022248:	606a      	str	r2, [r5, #4]
 802224a:	60de      	str	r6, [r3, #12]
 802224c:	6099      	str	r1, [r3, #8]
 802224e:	60b3      	str	r3, [r6, #8]
 8022250:	e7de      	b.n	8022210 <_free_r+0xe0>
 8022252:	2a14      	cmp	r2, #20
 8022254:	d801      	bhi.n	802225a <_free_r+0x12a>
 8022256:	325b      	adds	r2, #91	; 0x5b
 8022258:	e7e9      	b.n	802222e <_free_r+0xfe>
 802225a:	2a54      	cmp	r2, #84	; 0x54
 802225c:	d802      	bhi.n	8022264 <_free_r+0x134>
 802225e:	0b02      	lsrs	r2, r0, #12
 8022260:	326e      	adds	r2, #110	; 0x6e
 8022262:	e7e4      	b.n	802222e <_free_r+0xfe>
 8022264:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8022268:	d802      	bhi.n	8022270 <_free_r+0x140>
 802226a:	0bc2      	lsrs	r2, r0, #15
 802226c:	3277      	adds	r2, #119	; 0x77
 802226e:	e7de      	b.n	802222e <_free_r+0xfe>
 8022270:	f240 5154 	movw	r1, #1364	; 0x554
 8022274:	428a      	cmp	r2, r1
 8022276:	bf9a      	itte	ls
 8022278:	0c82      	lsrls	r2, r0, #18
 802227a:	327c      	addls	r2, #124	; 0x7c
 802227c:	227e      	movhi	r2, #126	; 0x7e
 802227e:	e7d6      	b.n	802222e <_free_r+0xfe>
 8022280:	6889      	ldr	r1, [r1, #8]
 8022282:	428e      	cmp	r6, r1
 8022284:	d004      	beq.n	8022290 <_free_r+0x160>
 8022286:	684a      	ldr	r2, [r1, #4]
 8022288:	f022 0203 	bic.w	r2, r2, #3
 802228c:	4290      	cmp	r0, r2
 802228e:	d3f7      	bcc.n	8022280 <_free_r+0x150>
 8022290:	68ce      	ldr	r6, [r1, #12]
 8022292:	e7da      	b.n	802224a <_free_r+0x11a>
 8022294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022298:	20001034 	.word	0x20001034
 802229c:	20001440 	.word	0x20001440
 80222a0:	2009061c 	.word	0x2009061c
 80222a4:	2000103c 	.word	0x2000103c

080222a8 <__retarget_lock_acquire_recursive>:
 80222a8:	4770      	bx	lr

080222aa <__retarget_lock_release_recursive>:
 80222aa:	4770      	bx	lr

080222ac <__ascii_mbtowc>:
 80222ac:	b082      	sub	sp, #8
 80222ae:	b901      	cbnz	r1, 80222b2 <__ascii_mbtowc+0x6>
 80222b0:	a901      	add	r1, sp, #4
 80222b2:	b142      	cbz	r2, 80222c6 <__ascii_mbtowc+0x1a>
 80222b4:	b14b      	cbz	r3, 80222ca <__ascii_mbtowc+0x1e>
 80222b6:	7813      	ldrb	r3, [r2, #0]
 80222b8:	600b      	str	r3, [r1, #0]
 80222ba:	7812      	ldrb	r2, [r2, #0]
 80222bc:	1c10      	adds	r0, r2, #0
 80222be:	bf18      	it	ne
 80222c0:	2001      	movne	r0, #1
 80222c2:	b002      	add	sp, #8
 80222c4:	4770      	bx	lr
 80222c6:	4610      	mov	r0, r2
 80222c8:	e7fb      	b.n	80222c2 <__ascii_mbtowc+0x16>
 80222ca:	f06f 0001 	mvn.w	r0, #1
 80222ce:	e7f8      	b.n	80222c2 <__ascii_mbtowc+0x16>

080222d0 <memmove>:
 80222d0:	4288      	cmp	r0, r1
 80222d2:	b510      	push	{r4, lr}
 80222d4:	eb01 0302 	add.w	r3, r1, r2
 80222d8:	d803      	bhi.n	80222e2 <memmove+0x12>
 80222da:	1e42      	subs	r2, r0, #1
 80222dc:	4299      	cmp	r1, r3
 80222de:	d10c      	bne.n	80222fa <memmove+0x2a>
 80222e0:	bd10      	pop	{r4, pc}
 80222e2:	4298      	cmp	r0, r3
 80222e4:	d2f9      	bcs.n	80222da <memmove+0xa>
 80222e6:	1881      	adds	r1, r0, r2
 80222e8:	1ad2      	subs	r2, r2, r3
 80222ea:	42d3      	cmn	r3, r2
 80222ec:	d100      	bne.n	80222f0 <memmove+0x20>
 80222ee:	bd10      	pop	{r4, pc}
 80222f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80222f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80222f8:	e7f7      	b.n	80222ea <memmove+0x1a>
 80222fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80222fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022302:	e7eb      	b.n	80222dc <memmove+0xc>

08022304 <_realloc_r>:
 8022304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022308:	4682      	mov	sl, r0
 802230a:	460c      	mov	r4, r1
 802230c:	b929      	cbnz	r1, 802231a <_realloc_r+0x16>
 802230e:	4611      	mov	r1, r2
 8022310:	b003      	add	sp, #12
 8022312:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022316:	f7ff b913 	b.w	8021540 <_malloc_r>
 802231a:	9201      	str	r2, [sp, #4]
 802231c:	f7ff fb1e 	bl	802195c <__malloc_lock>
 8022320:	9a01      	ldr	r2, [sp, #4]
 8022322:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022326:	f102 080b 	add.w	r8, r2, #11
 802232a:	f1b8 0f16 	cmp.w	r8, #22
 802232e:	f1a4 0908 	sub.w	r9, r4, #8
 8022332:	f025 0603 	bic.w	r6, r5, #3
 8022336:	d90a      	bls.n	802234e <_realloc_r+0x4a>
 8022338:	f038 0807 	bics.w	r8, r8, #7
 802233c:	d509      	bpl.n	8022352 <_realloc_r+0x4e>
 802233e:	230c      	movs	r3, #12
 8022340:	f8ca 3000 	str.w	r3, [sl]
 8022344:	2700      	movs	r7, #0
 8022346:	4638      	mov	r0, r7
 8022348:	b003      	add	sp, #12
 802234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802234e:	f04f 0810 	mov.w	r8, #16
 8022352:	4590      	cmp	r8, r2
 8022354:	d3f3      	bcc.n	802233e <_realloc_r+0x3a>
 8022356:	45b0      	cmp	r8, r6
 8022358:	f340 8145 	ble.w	80225e6 <_realloc_r+0x2e2>
 802235c:	4ba8      	ldr	r3, [pc, #672]	; (8022600 <_realloc_r+0x2fc>)
 802235e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8022362:	eb09 0106 	add.w	r1, r9, r6
 8022366:	4571      	cmp	r1, lr
 8022368:	469b      	mov	fp, r3
 802236a:	684b      	ldr	r3, [r1, #4]
 802236c:	d005      	beq.n	802237a <_realloc_r+0x76>
 802236e:	f023 0001 	bic.w	r0, r3, #1
 8022372:	4408      	add	r0, r1
 8022374:	6840      	ldr	r0, [r0, #4]
 8022376:	07c7      	lsls	r7, r0, #31
 8022378:	d447      	bmi.n	802240a <_realloc_r+0x106>
 802237a:	f023 0303 	bic.w	r3, r3, #3
 802237e:	4571      	cmp	r1, lr
 8022380:	eb06 0703 	add.w	r7, r6, r3
 8022384:	d119      	bne.n	80223ba <_realloc_r+0xb6>
 8022386:	f108 0010 	add.w	r0, r8, #16
 802238a:	4287      	cmp	r7, r0
 802238c:	db3f      	blt.n	802240e <_realloc_r+0x10a>
 802238e:	eb09 0308 	add.w	r3, r9, r8
 8022392:	eba7 0708 	sub.w	r7, r7, r8
 8022396:	f047 0701 	orr.w	r7, r7, #1
 802239a:	f8cb 3008 	str.w	r3, [fp, #8]
 802239e:	605f      	str	r7, [r3, #4]
 80223a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80223a4:	f003 0301 	and.w	r3, r3, #1
 80223a8:	ea43 0308 	orr.w	r3, r3, r8
 80223ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80223b0:	4650      	mov	r0, sl
 80223b2:	f7ff fad9 	bl	8021968 <__malloc_unlock>
 80223b6:	4627      	mov	r7, r4
 80223b8:	e7c5      	b.n	8022346 <_realloc_r+0x42>
 80223ba:	45b8      	cmp	r8, r7
 80223bc:	dc27      	bgt.n	802240e <_realloc_r+0x10a>
 80223be:	68cb      	ldr	r3, [r1, #12]
 80223c0:	688a      	ldr	r2, [r1, #8]
 80223c2:	60d3      	str	r3, [r2, #12]
 80223c4:	609a      	str	r2, [r3, #8]
 80223c6:	eba7 0008 	sub.w	r0, r7, r8
 80223ca:	280f      	cmp	r0, #15
 80223cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80223d0:	eb09 0207 	add.w	r2, r9, r7
 80223d4:	f240 8109 	bls.w	80225ea <_realloc_r+0x2e6>
 80223d8:	eb09 0108 	add.w	r1, r9, r8
 80223dc:	f003 0301 	and.w	r3, r3, #1
 80223e0:	ea43 0308 	orr.w	r3, r3, r8
 80223e4:	f040 0001 	orr.w	r0, r0, #1
 80223e8:	f8c9 3004 	str.w	r3, [r9, #4]
 80223ec:	6048      	str	r0, [r1, #4]
 80223ee:	6853      	ldr	r3, [r2, #4]
 80223f0:	f043 0301 	orr.w	r3, r3, #1
 80223f4:	6053      	str	r3, [r2, #4]
 80223f6:	3108      	adds	r1, #8
 80223f8:	4650      	mov	r0, sl
 80223fa:	f7ff fe99 	bl	8022130 <_free_r>
 80223fe:	4650      	mov	r0, sl
 8022400:	f7ff fab2 	bl	8021968 <__malloc_unlock>
 8022404:	f109 0708 	add.w	r7, r9, #8
 8022408:	e79d      	b.n	8022346 <_realloc_r+0x42>
 802240a:	2300      	movs	r3, #0
 802240c:	4619      	mov	r1, r3
 802240e:	07e8      	lsls	r0, r5, #31
 8022410:	f100 8084 	bmi.w	802251c <_realloc_r+0x218>
 8022414:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8022418:	eba9 0505 	sub.w	r5, r9, r5
 802241c:	6868      	ldr	r0, [r5, #4]
 802241e:	f020 0003 	bic.w	r0, r0, #3
 8022422:	4430      	add	r0, r6
 8022424:	2900      	cmp	r1, #0
 8022426:	d076      	beq.n	8022516 <_realloc_r+0x212>
 8022428:	4571      	cmp	r1, lr
 802242a:	d150      	bne.n	80224ce <_realloc_r+0x1ca>
 802242c:	4403      	add	r3, r0
 802242e:	f108 0110 	add.w	r1, r8, #16
 8022432:	428b      	cmp	r3, r1
 8022434:	db6f      	blt.n	8022516 <_realloc_r+0x212>
 8022436:	462f      	mov	r7, r5
 8022438:	68ea      	ldr	r2, [r5, #12]
 802243a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 802243e:	60ca      	str	r2, [r1, #12]
 8022440:	6091      	str	r1, [r2, #8]
 8022442:	1f32      	subs	r2, r6, #4
 8022444:	2a24      	cmp	r2, #36	; 0x24
 8022446:	d83b      	bhi.n	80224c0 <_realloc_r+0x1bc>
 8022448:	2a13      	cmp	r2, #19
 802244a:	d936      	bls.n	80224ba <_realloc_r+0x1b6>
 802244c:	6821      	ldr	r1, [r4, #0]
 802244e:	60a9      	str	r1, [r5, #8]
 8022450:	6861      	ldr	r1, [r4, #4]
 8022452:	60e9      	str	r1, [r5, #12]
 8022454:	2a1b      	cmp	r2, #27
 8022456:	d81c      	bhi.n	8022492 <_realloc_r+0x18e>
 8022458:	f105 0210 	add.w	r2, r5, #16
 802245c:	f104 0108 	add.w	r1, r4, #8
 8022460:	6808      	ldr	r0, [r1, #0]
 8022462:	6010      	str	r0, [r2, #0]
 8022464:	6848      	ldr	r0, [r1, #4]
 8022466:	6050      	str	r0, [r2, #4]
 8022468:	6889      	ldr	r1, [r1, #8]
 802246a:	6091      	str	r1, [r2, #8]
 802246c:	eb05 0208 	add.w	r2, r5, r8
 8022470:	eba3 0308 	sub.w	r3, r3, r8
 8022474:	f043 0301 	orr.w	r3, r3, #1
 8022478:	f8cb 2008 	str.w	r2, [fp, #8]
 802247c:	6053      	str	r3, [r2, #4]
 802247e:	686b      	ldr	r3, [r5, #4]
 8022480:	f003 0301 	and.w	r3, r3, #1
 8022484:	ea43 0308 	orr.w	r3, r3, r8
 8022488:	606b      	str	r3, [r5, #4]
 802248a:	4650      	mov	r0, sl
 802248c:	f7ff fa6c 	bl	8021968 <__malloc_unlock>
 8022490:	e759      	b.n	8022346 <_realloc_r+0x42>
 8022492:	68a1      	ldr	r1, [r4, #8]
 8022494:	6129      	str	r1, [r5, #16]
 8022496:	68e1      	ldr	r1, [r4, #12]
 8022498:	6169      	str	r1, [r5, #20]
 802249a:	2a24      	cmp	r2, #36	; 0x24
 802249c:	bf01      	itttt	eq
 802249e:	6922      	ldreq	r2, [r4, #16]
 80224a0:	61aa      	streq	r2, [r5, #24]
 80224a2:	6960      	ldreq	r0, [r4, #20]
 80224a4:	61e8      	streq	r0, [r5, #28]
 80224a6:	bf19      	ittee	ne
 80224a8:	f105 0218 	addne.w	r2, r5, #24
 80224ac:	f104 0110 	addne.w	r1, r4, #16
 80224b0:	f105 0220 	addeq.w	r2, r5, #32
 80224b4:	f104 0118 	addeq.w	r1, r4, #24
 80224b8:	e7d2      	b.n	8022460 <_realloc_r+0x15c>
 80224ba:	463a      	mov	r2, r7
 80224bc:	4621      	mov	r1, r4
 80224be:	e7cf      	b.n	8022460 <_realloc_r+0x15c>
 80224c0:	4621      	mov	r1, r4
 80224c2:	4638      	mov	r0, r7
 80224c4:	9301      	str	r3, [sp, #4]
 80224c6:	f7ff ff03 	bl	80222d0 <memmove>
 80224ca:	9b01      	ldr	r3, [sp, #4]
 80224cc:	e7ce      	b.n	802246c <_realloc_r+0x168>
 80224ce:	18c7      	adds	r7, r0, r3
 80224d0:	45b8      	cmp	r8, r7
 80224d2:	dc20      	bgt.n	8022516 <_realloc_r+0x212>
 80224d4:	68cb      	ldr	r3, [r1, #12]
 80224d6:	688a      	ldr	r2, [r1, #8]
 80224d8:	60d3      	str	r3, [r2, #12]
 80224da:	609a      	str	r2, [r3, #8]
 80224dc:	4628      	mov	r0, r5
 80224de:	68eb      	ldr	r3, [r5, #12]
 80224e0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80224e4:	60d3      	str	r3, [r2, #12]
 80224e6:	609a      	str	r2, [r3, #8]
 80224e8:	1f32      	subs	r2, r6, #4
 80224ea:	2a24      	cmp	r2, #36	; 0x24
 80224ec:	d842      	bhi.n	8022574 <_realloc_r+0x270>
 80224ee:	2a13      	cmp	r2, #19
 80224f0:	d93e      	bls.n	8022570 <_realloc_r+0x26c>
 80224f2:	6823      	ldr	r3, [r4, #0]
 80224f4:	60ab      	str	r3, [r5, #8]
 80224f6:	6863      	ldr	r3, [r4, #4]
 80224f8:	60eb      	str	r3, [r5, #12]
 80224fa:	2a1b      	cmp	r2, #27
 80224fc:	d824      	bhi.n	8022548 <_realloc_r+0x244>
 80224fe:	f105 0010 	add.w	r0, r5, #16
 8022502:	f104 0308 	add.w	r3, r4, #8
 8022506:	681a      	ldr	r2, [r3, #0]
 8022508:	6002      	str	r2, [r0, #0]
 802250a:	685a      	ldr	r2, [r3, #4]
 802250c:	6042      	str	r2, [r0, #4]
 802250e:	689b      	ldr	r3, [r3, #8]
 8022510:	6083      	str	r3, [r0, #8]
 8022512:	46a9      	mov	r9, r5
 8022514:	e757      	b.n	80223c6 <_realloc_r+0xc2>
 8022516:	4580      	cmp	r8, r0
 8022518:	4607      	mov	r7, r0
 802251a:	dddf      	ble.n	80224dc <_realloc_r+0x1d8>
 802251c:	4611      	mov	r1, r2
 802251e:	4650      	mov	r0, sl
 8022520:	f7ff f80e 	bl	8021540 <_malloc_r>
 8022524:	4607      	mov	r7, r0
 8022526:	2800      	cmp	r0, #0
 8022528:	d0af      	beq.n	802248a <_realloc_r+0x186>
 802252a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802252e:	f023 0301 	bic.w	r3, r3, #1
 8022532:	f1a0 0208 	sub.w	r2, r0, #8
 8022536:	444b      	add	r3, r9
 8022538:	429a      	cmp	r2, r3
 802253a:	d11f      	bne.n	802257c <_realloc_r+0x278>
 802253c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8022540:	f027 0703 	bic.w	r7, r7, #3
 8022544:	4437      	add	r7, r6
 8022546:	e73e      	b.n	80223c6 <_realloc_r+0xc2>
 8022548:	68a3      	ldr	r3, [r4, #8]
 802254a:	612b      	str	r3, [r5, #16]
 802254c:	68e3      	ldr	r3, [r4, #12]
 802254e:	616b      	str	r3, [r5, #20]
 8022550:	2a24      	cmp	r2, #36	; 0x24
 8022552:	bf01      	itttt	eq
 8022554:	6923      	ldreq	r3, [r4, #16]
 8022556:	61ab      	streq	r3, [r5, #24]
 8022558:	6962      	ldreq	r2, [r4, #20]
 802255a:	61ea      	streq	r2, [r5, #28]
 802255c:	bf19      	ittee	ne
 802255e:	f105 0018 	addne.w	r0, r5, #24
 8022562:	f104 0310 	addne.w	r3, r4, #16
 8022566:	f105 0020 	addeq.w	r0, r5, #32
 802256a:	f104 0318 	addeq.w	r3, r4, #24
 802256e:	e7ca      	b.n	8022506 <_realloc_r+0x202>
 8022570:	4623      	mov	r3, r4
 8022572:	e7c8      	b.n	8022506 <_realloc_r+0x202>
 8022574:	4621      	mov	r1, r4
 8022576:	f7ff feab 	bl	80222d0 <memmove>
 802257a:	e7ca      	b.n	8022512 <_realloc_r+0x20e>
 802257c:	1f32      	subs	r2, r6, #4
 802257e:	2a24      	cmp	r2, #36	; 0x24
 8022580:	d82d      	bhi.n	80225de <_realloc_r+0x2da>
 8022582:	2a13      	cmp	r2, #19
 8022584:	d928      	bls.n	80225d8 <_realloc_r+0x2d4>
 8022586:	6823      	ldr	r3, [r4, #0]
 8022588:	6003      	str	r3, [r0, #0]
 802258a:	6863      	ldr	r3, [r4, #4]
 802258c:	6043      	str	r3, [r0, #4]
 802258e:	2a1b      	cmp	r2, #27
 8022590:	d80e      	bhi.n	80225b0 <_realloc_r+0x2ac>
 8022592:	f100 0308 	add.w	r3, r0, #8
 8022596:	f104 0208 	add.w	r2, r4, #8
 802259a:	6811      	ldr	r1, [r2, #0]
 802259c:	6019      	str	r1, [r3, #0]
 802259e:	6851      	ldr	r1, [r2, #4]
 80225a0:	6059      	str	r1, [r3, #4]
 80225a2:	6892      	ldr	r2, [r2, #8]
 80225a4:	609a      	str	r2, [r3, #8]
 80225a6:	4621      	mov	r1, r4
 80225a8:	4650      	mov	r0, sl
 80225aa:	f7ff fdc1 	bl	8022130 <_free_r>
 80225ae:	e76c      	b.n	802248a <_realloc_r+0x186>
 80225b0:	68a3      	ldr	r3, [r4, #8]
 80225b2:	6083      	str	r3, [r0, #8]
 80225b4:	68e3      	ldr	r3, [r4, #12]
 80225b6:	60c3      	str	r3, [r0, #12]
 80225b8:	2a24      	cmp	r2, #36	; 0x24
 80225ba:	bf01      	itttt	eq
 80225bc:	6923      	ldreq	r3, [r4, #16]
 80225be:	6103      	streq	r3, [r0, #16]
 80225c0:	6961      	ldreq	r1, [r4, #20]
 80225c2:	6141      	streq	r1, [r0, #20]
 80225c4:	bf19      	ittee	ne
 80225c6:	f100 0310 	addne.w	r3, r0, #16
 80225ca:	f104 0210 	addne.w	r2, r4, #16
 80225ce:	f100 0318 	addeq.w	r3, r0, #24
 80225d2:	f104 0218 	addeq.w	r2, r4, #24
 80225d6:	e7e0      	b.n	802259a <_realloc_r+0x296>
 80225d8:	4603      	mov	r3, r0
 80225da:	4622      	mov	r2, r4
 80225dc:	e7dd      	b.n	802259a <_realloc_r+0x296>
 80225de:	4621      	mov	r1, r4
 80225e0:	f7ff fe76 	bl	80222d0 <memmove>
 80225e4:	e7df      	b.n	80225a6 <_realloc_r+0x2a2>
 80225e6:	4637      	mov	r7, r6
 80225e8:	e6ed      	b.n	80223c6 <_realloc_r+0xc2>
 80225ea:	f003 0301 	and.w	r3, r3, #1
 80225ee:	431f      	orrs	r7, r3
 80225f0:	f8c9 7004 	str.w	r7, [r9, #4]
 80225f4:	6853      	ldr	r3, [r2, #4]
 80225f6:	f043 0301 	orr.w	r3, r3, #1
 80225fa:	6053      	str	r3, [r2, #4]
 80225fc:	e6ff      	b.n	80223fe <_realloc_r+0xfa>
 80225fe:	bf00      	nop
 8022600:	20001034 	.word	0x20001034

08022604 <__ascii_wctomb>:
 8022604:	b149      	cbz	r1, 802261a <__ascii_wctomb+0x16>
 8022606:	2aff      	cmp	r2, #255	; 0xff
 8022608:	bf85      	ittet	hi
 802260a:	238a      	movhi	r3, #138	; 0x8a
 802260c:	6003      	strhi	r3, [r0, #0]
 802260e:	700a      	strbls	r2, [r1, #0]
 8022610:	f04f 30ff 	movhi.w	r0, #4294967295
 8022614:	bf98      	it	ls
 8022616:	2001      	movls	r0, #1
 8022618:	4770      	bx	lr
 802261a:	4608      	mov	r0, r1
 802261c:	4770      	bx	lr
	...

08022620 <cbrt>:
 8022620:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8022624:	ec51 0b10 	vmov	r0, r1, d0
 8022628:	4a59      	ldr	r2, [pc, #356]	; (8022790 <cbrt+0x170>)
 802262a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802262e:	4293      	cmp	r3, r2
 8022630:	468a      	mov	sl, r1
 8022632:	ee10 2a10 	vmov	r2, s0
 8022636:	d907      	bls.n	8022648 <cbrt+0x28>
 8022638:	460b      	mov	r3, r1
 802263a:	f7dd fe3f 	bl	80002bc <__adddf3>
 802263e:	ec41 0b10 	vmov	d0, r0, r1
 8022642:	b002      	add	sp, #8
 8022644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022648:	431a      	orrs	r2, r3
 802264a:	d0f8      	beq.n	802263e <cbrt+0x1e>
 802264c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022650:	4619      	mov	r1, r3
 8022652:	4606      	mov	r6, r0
 8022654:	461f      	mov	r7, r3
 8022656:	d27c      	bcs.n	8022752 <cbrt+0x132>
 8022658:	2200      	movs	r2, #0
 802265a:	4b4e      	ldr	r3, [pc, #312]	; (8022794 <cbrt+0x174>)
 802265c:	f7dd ffe0 	bl	8000620 <__aeabi_dmul>
 8022660:	2203      	movs	r2, #3
 8022662:	fbb1 f3f2 	udiv	r3, r1, r2
 8022666:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 802266a:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 802266e:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 8022672:	4604      	mov	r4, r0
 8022674:	3513      	adds	r5, #19
 8022676:	4622      	mov	r2, r4
 8022678:	462b      	mov	r3, r5
 802267a:	4620      	mov	r0, r4
 802267c:	4629      	mov	r1, r5
 802267e:	f7dd ffcf 	bl	8000620 <__aeabi_dmul>
 8022682:	4632      	mov	r2, r6
 8022684:	463b      	mov	r3, r7
 8022686:	f7de f8f5 	bl	8000874 <__aeabi_ddiv>
 802268a:	4622      	mov	r2, r4
 802268c:	462b      	mov	r3, r5
 802268e:	f7dd ffc7 	bl	8000620 <__aeabi_dmul>
 8022692:	a335      	add	r3, pc, #212	; (adr r3, 8022768 <cbrt+0x148>)
 8022694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022698:	f7dd fe10 	bl	80002bc <__adddf3>
 802269c:	a334      	add	r3, pc, #208	; (adr r3, 8022770 <cbrt+0x150>)
 802269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226a2:	e9cd 0100 	strd	r0, r1, [sp]
 80226a6:	f7dd fe09 	bl	80002bc <__adddf3>
 80226aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80226ae:	4680      	mov	r8, r0
 80226b0:	4689      	mov	r9, r1
 80226b2:	a131      	add	r1, pc, #196	; (adr r1, 8022778 <cbrt+0x158>)
 80226b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80226b8:	f7de f8dc 	bl	8000874 <__aeabi_ddiv>
 80226bc:	4602      	mov	r2, r0
 80226be:	460b      	mov	r3, r1
 80226c0:	4640      	mov	r0, r8
 80226c2:	4649      	mov	r1, r9
 80226c4:	f7dd fdfa 	bl	80002bc <__adddf3>
 80226c8:	4602      	mov	r2, r0
 80226ca:	460b      	mov	r3, r1
 80226cc:	a12c      	add	r1, pc, #176	; (adr r1, 8022780 <cbrt+0x160>)
 80226ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80226d2:	f7de f8cf 	bl	8000874 <__aeabi_ddiv>
 80226d6:	a32c      	add	r3, pc, #176	; (adr r3, 8022788 <cbrt+0x168>)
 80226d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226dc:	f7dd fdee 	bl	80002bc <__adddf3>
 80226e0:	4622      	mov	r2, r4
 80226e2:	462b      	mov	r3, r5
 80226e4:	f7dd ff9c 	bl	8000620 <__aeabi_dmul>
 80226e8:	2400      	movs	r4, #0
 80226ea:	1c4d      	adds	r5, r1, #1
 80226ec:	4622      	mov	r2, r4
 80226ee:	462b      	mov	r3, r5
 80226f0:	4620      	mov	r0, r4
 80226f2:	4629      	mov	r1, r5
 80226f4:	f7dd ff94 	bl	8000620 <__aeabi_dmul>
 80226f8:	4602      	mov	r2, r0
 80226fa:	460b      	mov	r3, r1
 80226fc:	4630      	mov	r0, r6
 80226fe:	4639      	mov	r1, r7
 8022700:	f7de f8b8 	bl	8000874 <__aeabi_ddiv>
 8022704:	4622      	mov	r2, r4
 8022706:	462b      	mov	r3, r5
 8022708:	4680      	mov	r8, r0
 802270a:	4689      	mov	r9, r1
 802270c:	f7dd fdd4 	bl	80002b8 <__aeabi_dsub>
 8022710:	4622      	mov	r2, r4
 8022712:	4606      	mov	r6, r0
 8022714:	460f      	mov	r7, r1
 8022716:	462b      	mov	r3, r5
 8022718:	4620      	mov	r0, r4
 802271a:	4629      	mov	r1, r5
 802271c:	f7dd fdce 	bl	80002bc <__adddf3>
 8022720:	4642      	mov	r2, r8
 8022722:	464b      	mov	r3, r9
 8022724:	f7dd fdca 	bl	80002bc <__adddf3>
 8022728:	4602      	mov	r2, r0
 802272a:	460b      	mov	r3, r1
 802272c:	4630      	mov	r0, r6
 802272e:	4639      	mov	r1, r7
 8022730:	f7de f8a0 	bl	8000874 <__aeabi_ddiv>
 8022734:	4622      	mov	r2, r4
 8022736:	462b      	mov	r3, r5
 8022738:	f7dd ff72 	bl	8000620 <__aeabi_dmul>
 802273c:	4602      	mov	r2, r0
 802273e:	460b      	mov	r3, r1
 8022740:	4620      	mov	r0, r4
 8022742:	4629      	mov	r1, r5
 8022744:	f7dd fdba 	bl	80002bc <__adddf3>
 8022748:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 802274c:	ea4a 0101 	orr.w	r1, sl, r1
 8022750:	e775      	b.n	802263e <cbrt+0x1e>
 8022752:	2203      	movs	r2, #3
 8022754:	fb93 f3f2 	sdiv	r3, r3, r2
 8022758:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 802275c:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 8022760:	2400      	movs	r4, #0
 8022762:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 8022766:	e786      	b.n	8022676 <cbrt+0x56>
 8022768:	f15f15f1 	.word	0xf15f15f1
 802276c:	3fe15f15 	.word	0x3fe15f15
 8022770:	0ea0ea0f 	.word	0x0ea0ea0f
 8022774:	3ff6a0ea 	.word	0x3ff6a0ea
 8022778:	2532c834 	.word	0x2532c834
 802277c:	bfe691de 	.word	0xbfe691de
 8022780:	6db6db6e 	.word	0x6db6db6e
 8022784:	3ff9b6db 	.word	0x3ff9b6db
 8022788:	b6db6db7 	.word	0xb6db6db7
 802278c:	3fd6db6d 	.word	0x3fd6db6d
 8022790:	7fefffff 	.word	0x7fefffff
 8022794:	43500000 	.word	0x43500000

08022798 <floor>:
 8022798:	ec51 0b10 	vmov	r0, r1, d0
 802279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80227a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80227a8:	2e13      	cmp	r6, #19
 80227aa:	ee10 8a10 	vmov	r8, s0
 80227ae:	460c      	mov	r4, r1
 80227b0:	ee10 5a10 	vmov	r5, s0
 80227b4:	dc35      	bgt.n	8022822 <floor+0x8a>
 80227b6:	2e00      	cmp	r6, #0
 80227b8:	da17      	bge.n	80227ea <floor+0x52>
 80227ba:	a335      	add	r3, pc, #212	; (adr r3, 8022890 <floor+0xf8>)
 80227bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227c0:	f7dd fd7c 	bl	80002bc <__adddf3>
 80227c4:	2200      	movs	r2, #0
 80227c6:	2300      	movs	r3, #0
 80227c8:	f7de f9ba 	bl	8000b40 <__aeabi_dcmpgt>
 80227cc:	b150      	cbz	r0, 80227e4 <floor+0x4c>
 80227ce:	2c00      	cmp	r4, #0
 80227d0:	da5a      	bge.n	8022888 <floor+0xf0>
 80227d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80227d6:	ea53 0308 	orrs.w	r3, r3, r8
 80227da:	4b2f      	ldr	r3, [pc, #188]	; (8022898 <floor+0x100>)
 80227dc:	f04f 0500 	mov.w	r5, #0
 80227e0:	bf18      	it	ne
 80227e2:	461c      	movne	r4, r3
 80227e4:	4621      	mov	r1, r4
 80227e6:	4628      	mov	r0, r5
 80227e8:	e025      	b.n	8022836 <floor+0x9e>
 80227ea:	4f2c      	ldr	r7, [pc, #176]	; (802289c <floor+0x104>)
 80227ec:	4137      	asrs	r7, r6
 80227ee:	ea01 0307 	and.w	r3, r1, r7
 80227f2:	4303      	orrs	r3, r0
 80227f4:	d01f      	beq.n	8022836 <floor+0x9e>
 80227f6:	a326      	add	r3, pc, #152	; (adr r3, 8022890 <floor+0xf8>)
 80227f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227fc:	f7dd fd5e 	bl	80002bc <__adddf3>
 8022800:	2200      	movs	r2, #0
 8022802:	2300      	movs	r3, #0
 8022804:	f7de f99c 	bl	8000b40 <__aeabi_dcmpgt>
 8022808:	2800      	cmp	r0, #0
 802280a:	d0eb      	beq.n	80227e4 <floor+0x4c>
 802280c:	2c00      	cmp	r4, #0
 802280e:	bfbe      	ittt	lt
 8022810:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8022814:	fa43 f606 	asrlt.w	r6, r3, r6
 8022818:	19a4      	addlt	r4, r4, r6
 802281a:	ea24 0407 	bic.w	r4, r4, r7
 802281e:	2500      	movs	r5, #0
 8022820:	e7e0      	b.n	80227e4 <floor+0x4c>
 8022822:	2e33      	cmp	r6, #51	; 0x33
 8022824:	dd0b      	ble.n	802283e <floor+0xa6>
 8022826:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802282a:	d104      	bne.n	8022836 <floor+0x9e>
 802282c:	ee10 2a10 	vmov	r2, s0
 8022830:	460b      	mov	r3, r1
 8022832:	f7dd fd43 	bl	80002bc <__adddf3>
 8022836:	ec41 0b10 	vmov	d0, r0, r1
 802283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802283e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022842:	f04f 33ff 	mov.w	r3, #4294967295
 8022846:	fa23 f707 	lsr.w	r7, r3, r7
 802284a:	4238      	tst	r0, r7
 802284c:	d0f3      	beq.n	8022836 <floor+0x9e>
 802284e:	a310      	add	r3, pc, #64	; (adr r3, 8022890 <floor+0xf8>)
 8022850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022854:	f7dd fd32 	bl	80002bc <__adddf3>
 8022858:	2200      	movs	r2, #0
 802285a:	2300      	movs	r3, #0
 802285c:	f7de f970 	bl	8000b40 <__aeabi_dcmpgt>
 8022860:	2800      	cmp	r0, #0
 8022862:	d0bf      	beq.n	80227e4 <floor+0x4c>
 8022864:	2c00      	cmp	r4, #0
 8022866:	da02      	bge.n	802286e <floor+0xd6>
 8022868:	2e14      	cmp	r6, #20
 802286a:	d103      	bne.n	8022874 <floor+0xdc>
 802286c:	3401      	adds	r4, #1
 802286e:	ea25 0507 	bic.w	r5, r5, r7
 8022872:	e7b7      	b.n	80227e4 <floor+0x4c>
 8022874:	2301      	movs	r3, #1
 8022876:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802287a:	fa03 f606 	lsl.w	r6, r3, r6
 802287e:	4435      	add	r5, r6
 8022880:	45a8      	cmp	r8, r5
 8022882:	bf88      	it	hi
 8022884:	18e4      	addhi	r4, r4, r3
 8022886:	e7f2      	b.n	802286e <floor+0xd6>
 8022888:	2500      	movs	r5, #0
 802288a:	462c      	mov	r4, r5
 802288c:	e7aa      	b.n	80227e4 <floor+0x4c>
 802288e:	bf00      	nop
 8022890:	8800759c 	.word	0x8800759c
 8022894:	7e37e43c 	.word	0x7e37e43c
 8022898:	bff00000 	.word	0xbff00000
 802289c:	000fffff 	.word	0x000fffff

080228a0 <exp>:
 80228a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228a2:	ed2d 8b02 	vpush	{d8}
 80228a6:	4e38      	ldr	r6, [pc, #224]	; (8022988 <exp+0xe8>)
 80228a8:	b08b      	sub	sp, #44	; 0x2c
 80228aa:	ec55 4b10 	vmov	r4, r5, d0
 80228ae:	f000 fb17 	bl	8022ee0 <__ieee754_exp>
 80228b2:	f996 3000 	ldrsb.w	r3, [r6]
 80228b6:	eeb0 8a40 	vmov.f32	s16, s0
 80228ba:	eef0 8a60 	vmov.f32	s17, s1
 80228be:	3301      	adds	r3, #1
 80228c0:	d02c      	beq.n	802291c <exp+0x7c>
 80228c2:	ec45 4b10 	vmov	d0, r4, r5
 80228c6:	f001 fc67 	bl	8024198 <finite>
 80228ca:	b338      	cbz	r0, 802291c <exp+0x7c>
 80228cc:	a32a      	add	r3, pc, #168	; (adr r3, 8022978 <exp+0xd8>)
 80228ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228d2:	4620      	mov	r0, r4
 80228d4:	4629      	mov	r1, r5
 80228d6:	f7de f933 	bl	8000b40 <__aeabi_dcmpgt>
 80228da:	4607      	mov	r7, r0
 80228dc:	2800      	cmp	r0, #0
 80228de:	d030      	beq.n	8022942 <exp+0xa2>
 80228e0:	2303      	movs	r3, #3
 80228e2:	9300      	str	r3, [sp, #0]
 80228e4:	4b29      	ldr	r3, [pc, #164]	; (802298c <exp+0xec>)
 80228e6:	9301      	str	r3, [sp, #4]
 80228e8:	2300      	movs	r3, #0
 80228ea:	9308      	str	r3, [sp, #32]
 80228ec:	f996 3000 	ldrsb.w	r3, [r6]
 80228f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80228f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80228f8:	b9c3      	cbnz	r3, 802292c <exp+0x8c>
 80228fa:	4b25      	ldr	r3, [pc, #148]	; (8022990 <exp+0xf0>)
 80228fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022900:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022904:	4668      	mov	r0, sp
 8022906:	f001 fc4f 	bl	80241a8 <matherr>
 802290a:	b1a8      	cbz	r0, 8022938 <exp+0x98>
 802290c:	9b08      	ldr	r3, [sp, #32]
 802290e:	b11b      	cbz	r3, 8022918 <exp+0x78>
 8022910:	f7fc ff56 	bl	801f7c0 <__errno>
 8022914:	9b08      	ldr	r3, [sp, #32]
 8022916:	6003      	str	r3, [r0, #0]
 8022918:	ed9d 8b06 	vldr	d8, [sp, #24]
 802291c:	eeb0 0a48 	vmov.f32	s0, s16
 8022920:	eef0 0a68 	vmov.f32	s1, s17
 8022924:	b00b      	add	sp, #44	; 0x2c
 8022926:	ecbd 8b02 	vpop	{d8}
 802292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802292c:	4919      	ldr	r1, [pc, #100]	; (8022994 <exp+0xf4>)
 802292e:	2000      	movs	r0, #0
 8022930:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022934:	2b02      	cmp	r3, #2
 8022936:	d1e5      	bne.n	8022904 <exp+0x64>
 8022938:	f7fc ff42 	bl	801f7c0 <__errno>
 802293c:	2322      	movs	r3, #34	; 0x22
 802293e:	6003      	str	r3, [r0, #0]
 8022940:	e7e4      	b.n	802290c <exp+0x6c>
 8022942:	a30f      	add	r3, pc, #60	; (adr r3, 8022980 <exp+0xe0>)
 8022944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022948:	4620      	mov	r0, r4
 802294a:	4629      	mov	r1, r5
 802294c:	f7de f8da 	bl	8000b04 <__aeabi_dcmplt>
 8022950:	2800      	cmp	r0, #0
 8022952:	d0e3      	beq.n	802291c <exp+0x7c>
 8022954:	2304      	movs	r3, #4
 8022956:	9300      	str	r3, [sp, #0]
 8022958:	4b0c      	ldr	r3, [pc, #48]	; (802298c <exp+0xec>)
 802295a:	9301      	str	r3, [sp, #4]
 802295c:	2200      	movs	r2, #0
 802295e:	2300      	movs	r3, #0
 8022960:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022964:	9708      	str	r7, [sp, #32]
 8022966:	e9cd 4504 	strd	r4, r5, [sp, #16]
 802296a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802296e:	f996 3000 	ldrsb.w	r3, [r6]
 8022972:	e7df      	b.n	8022934 <exp+0x94>
 8022974:	f3af 8000 	nop.w
 8022978:	fefa39ef 	.word	0xfefa39ef
 802297c:	40862e42 	.word	0x40862e42
 8022980:	d52d3051 	.word	0xd52d3051
 8022984:	c0874910 	.word	0xc0874910
 8022988:	200015b0 	.word	0x200015b0
 802298c:	0803163d 	.word	0x0803163d
 8022990:	47efffff 	.word	0x47efffff
 8022994:	7ff00000 	.word	0x7ff00000

08022998 <log>:
 8022998:	b570      	push	{r4, r5, r6, lr}
 802299a:	ed2d 8b02 	vpush	{d8}
 802299e:	b08a      	sub	sp, #40	; 0x28
 80229a0:	ec55 4b10 	vmov	r4, r5, d0
 80229a4:	f000 fc10 	bl	80231c8 <__ieee754_log>
 80229a8:	4b36      	ldr	r3, [pc, #216]	; (8022a84 <log+0xec>)
 80229aa:	eeb0 8a40 	vmov.f32	s16, s0
 80229ae:	eef0 8a60 	vmov.f32	s17, s1
 80229b2:	f993 6000 	ldrsb.w	r6, [r3]
 80229b6:	1c73      	adds	r3, r6, #1
 80229b8:	d05b      	beq.n	8022a72 <log+0xda>
 80229ba:	4622      	mov	r2, r4
 80229bc:	462b      	mov	r3, r5
 80229be:	4620      	mov	r0, r4
 80229c0:	4629      	mov	r1, r5
 80229c2:	f7de f8c7 	bl	8000b54 <__aeabi_dcmpun>
 80229c6:	2800      	cmp	r0, #0
 80229c8:	d153      	bne.n	8022a72 <log+0xda>
 80229ca:	2200      	movs	r2, #0
 80229cc:	2300      	movs	r3, #0
 80229ce:	4620      	mov	r0, r4
 80229d0:	4629      	mov	r1, r5
 80229d2:	f7de f8b5 	bl	8000b40 <__aeabi_dcmpgt>
 80229d6:	2800      	cmp	r0, #0
 80229d8:	d14b      	bne.n	8022a72 <log+0xda>
 80229da:	4b2b      	ldr	r3, [pc, #172]	; (8022a88 <log+0xf0>)
 80229dc:	9301      	str	r3, [sp, #4]
 80229de:	9008      	str	r0, [sp, #32]
 80229e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80229e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80229e8:	b9a6      	cbnz	r6, 8022a14 <log+0x7c>
 80229ea:	4b28      	ldr	r3, [pc, #160]	; (8022a8c <log+0xf4>)
 80229ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80229f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80229f4:	4620      	mov	r0, r4
 80229f6:	2200      	movs	r2, #0
 80229f8:	2300      	movs	r3, #0
 80229fa:	4629      	mov	r1, r5
 80229fc:	f7de f878 	bl	8000af0 <__aeabi_dcmpeq>
 8022a00:	bb40      	cbnz	r0, 8022a54 <log+0xbc>
 8022a02:	2301      	movs	r3, #1
 8022a04:	2e02      	cmp	r6, #2
 8022a06:	9300      	str	r3, [sp, #0]
 8022a08:	d119      	bne.n	8022a3e <log+0xa6>
 8022a0a:	f7fc fed9 	bl	801f7c0 <__errno>
 8022a0e:	2321      	movs	r3, #33	; 0x21
 8022a10:	6003      	str	r3, [r0, #0]
 8022a12:	e019      	b.n	8022a48 <log+0xb0>
 8022a14:	4b1e      	ldr	r3, [pc, #120]	; (8022a90 <log+0xf8>)
 8022a16:	2200      	movs	r2, #0
 8022a18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	2200      	movs	r2, #0
 8022a20:	2300      	movs	r3, #0
 8022a22:	4629      	mov	r1, r5
 8022a24:	f7de f864 	bl	8000af0 <__aeabi_dcmpeq>
 8022a28:	2800      	cmp	r0, #0
 8022a2a:	d0ea      	beq.n	8022a02 <log+0x6a>
 8022a2c:	2302      	movs	r3, #2
 8022a2e:	429e      	cmp	r6, r3
 8022a30:	9300      	str	r3, [sp, #0]
 8022a32:	d111      	bne.n	8022a58 <log+0xc0>
 8022a34:	f7fc fec4 	bl	801f7c0 <__errno>
 8022a38:	2322      	movs	r3, #34	; 0x22
 8022a3a:	6003      	str	r3, [r0, #0]
 8022a3c:	e011      	b.n	8022a62 <log+0xca>
 8022a3e:	4668      	mov	r0, sp
 8022a40:	f001 fbb2 	bl	80241a8 <matherr>
 8022a44:	2800      	cmp	r0, #0
 8022a46:	d0e0      	beq.n	8022a0a <log+0x72>
 8022a48:	4812      	ldr	r0, [pc, #72]	; (8022a94 <log+0xfc>)
 8022a4a:	f001 fbb1 	bl	80241b0 <nan>
 8022a4e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8022a52:	e006      	b.n	8022a62 <log+0xca>
 8022a54:	2302      	movs	r3, #2
 8022a56:	9300      	str	r3, [sp, #0]
 8022a58:	4668      	mov	r0, sp
 8022a5a:	f001 fba5 	bl	80241a8 <matherr>
 8022a5e:	2800      	cmp	r0, #0
 8022a60:	d0e8      	beq.n	8022a34 <log+0x9c>
 8022a62:	9b08      	ldr	r3, [sp, #32]
 8022a64:	b11b      	cbz	r3, 8022a6e <log+0xd6>
 8022a66:	f7fc feab 	bl	801f7c0 <__errno>
 8022a6a:	9b08      	ldr	r3, [sp, #32]
 8022a6c:	6003      	str	r3, [r0, #0]
 8022a6e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8022a72:	eeb0 0a48 	vmov.f32	s0, s16
 8022a76:	eef0 0a68 	vmov.f32	s1, s17
 8022a7a:	b00a      	add	sp, #40	; 0x28
 8022a7c:	ecbd 8b02 	vpop	{d8}
 8022a80:	bd70      	pop	{r4, r5, r6, pc}
 8022a82:	bf00      	nop
 8022a84:	200015b0 	.word	0x200015b0
 8022a88:	08031641 	.word	0x08031641
 8022a8c:	c7efffff 	.word	0xc7efffff
 8022a90:	fff00000 	.word	0xfff00000
 8022a94:	080312f1 	.word	0x080312f1

08022a98 <pow>:
 8022a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a9c:	ed2d 8b04 	vpush	{d8-d9}
 8022aa0:	b08d      	sub	sp, #52	; 0x34
 8022aa2:	ec57 6b10 	vmov	r6, r7, d0
 8022aa6:	ec55 4b11 	vmov	r4, r5, d1
 8022aaa:	f000 fd65 	bl	8023578 <__ieee754_pow>
 8022aae:	4bae      	ldr	r3, [pc, #696]	; (8022d68 <pow+0x2d0>)
 8022ab0:	eeb0 8a40 	vmov.f32	s16, s0
 8022ab4:	eef0 8a60 	vmov.f32	s17, s1
 8022ab8:	f993 9000 	ldrsb.w	r9, [r3]
 8022abc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022ac0:	4698      	mov	r8, r3
 8022ac2:	d05f      	beq.n	8022b84 <pow+0xec>
 8022ac4:	4622      	mov	r2, r4
 8022ac6:	462b      	mov	r3, r5
 8022ac8:	4620      	mov	r0, r4
 8022aca:	4629      	mov	r1, r5
 8022acc:	f7de f842 	bl	8000b54 <__aeabi_dcmpun>
 8022ad0:	4683      	mov	fp, r0
 8022ad2:	2800      	cmp	r0, #0
 8022ad4:	d156      	bne.n	8022b84 <pow+0xec>
 8022ad6:	4632      	mov	r2, r6
 8022ad8:	463b      	mov	r3, r7
 8022ada:	4630      	mov	r0, r6
 8022adc:	4639      	mov	r1, r7
 8022ade:	f7de f839 	bl	8000b54 <__aeabi_dcmpun>
 8022ae2:	9001      	str	r0, [sp, #4]
 8022ae4:	b1e8      	cbz	r0, 8022b22 <pow+0x8a>
 8022ae6:	2200      	movs	r2, #0
 8022ae8:	2300      	movs	r3, #0
 8022aea:	4620      	mov	r0, r4
 8022aec:	4629      	mov	r1, r5
 8022aee:	f7dd ffff 	bl	8000af0 <__aeabi_dcmpeq>
 8022af2:	2800      	cmp	r0, #0
 8022af4:	d046      	beq.n	8022b84 <pow+0xec>
 8022af6:	2301      	movs	r3, #1
 8022af8:	9302      	str	r3, [sp, #8]
 8022afa:	4b9c      	ldr	r3, [pc, #624]	; (8022d6c <pow+0x2d4>)
 8022afc:	9303      	str	r3, [sp, #12]
 8022afe:	4b9c      	ldr	r3, [pc, #624]	; (8022d70 <pow+0x2d8>)
 8022b00:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8022b04:	2200      	movs	r2, #0
 8022b06:	f1b9 0f02 	cmp.w	r9, #2
 8022b0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022b0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022b12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022b16:	d033      	beq.n	8022b80 <pow+0xe8>
 8022b18:	a802      	add	r0, sp, #8
 8022b1a:	f001 fb45 	bl	80241a8 <matherr>
 8022b1e:	bb48      	cbnz	r0, 8022b74 <pow+0xdc>
 8022b20:	e05e      	b.n	8022be0 <pow+0x148>
 8022b22:	f04f 0a00 	mov.w	sl, #0
 8022b26:	f04f 0b00 	mov.w	fp, #0
 8022b2a:	4652      	mov	r2, sl
 8022b2c:	465b      	mov	r3, fp
 8022b2e:	4630      	mov	r0, r6
 8022b30:	4639      	mov	r1, r7
 8022b32:	f7dd ffdd 	bl	8000af0 <__aeabi_dcmpeq>
 8022b36:	ec4b ab19 	vmov	d9, sl, fp
 8022b3a:	2800      	cmp	r0, #0
 8022b3c:	d055      	beq.n	8022bea <pow+0x152>
 8022b3e:	4652      	mov	r2, sl
 8022b40:	465b      	mov	r3, fp
 8022b42:	4620      	mov	r0, r4
 8022b44:	4629      	mov	r1, r5
 8022b46:	f7dd ffd3 	bl	8000af0 <__aeabi_dcmpeq>
 8022b4a:	4680      	mov	r8, r0
 8022b4c:	b318      	cbz	r0, 8022b96 <pow+0xfe>
 8022b4e:	2301      	movs	r3, #1
 8022b50:	9302      	str	r3, [sp, #8]
 8022b52:	4b86      	ldr	r3, [pc, #536]	; (8022d6c <pow+0x2d4>)
 8022b54:	9303      	str	r3, [sp, #12]
 8022b56:	9b01      	ldr	r3, [sp, #4]
 8022b58:	930a      	str	r3, [sp, #40]	; 0x28
 8022b5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022b5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022b62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022b66:	f1b9 0f00 	cmp.w	r9, #0
 8022b6a:	d0d5      	beq.n	8022b18 <pow+0x80>
 8022b6c:	4b80      	ldr	r3, [pc, #512]	; (8022d70 <pow+0x2d8>)
 8022b6e:	2200      	movs	r2, #0
 8022b70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b76:	b11b      	cbz	r3, 8022b80 <pow+0xe8>
 8022b78:	f7fc fe22 	bl	801f7c0 <__errno>
 8022b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b7e:	6003      	str	r3, [r0, #0]
 8022b80:	ed9d 8b08 	vldr	d8, [sp, #32]
 8022b84:	eeb0 0a48 	vmov.f32	s0, s16
 8022b88:	eef0 0a68 	vmov.f32	s1, s17
 8022b8c:	b00d      	add	sp, #52	; 0x34
 8022b8e:	ecbd 8b04 	vpop	{d8-d9}
 8022b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b96:	ec45 4b10 	vmov	d0, r4, r5
 8022b9a:	f001 fafd 	bl	8024198 <finite>
 8022b9e:	2800      	cmp	r0, #0
 8022ba0:	d0f0      	beq.n	8022b84 <pow+0xec>
 8022ba2:	4652      	mov	r2, sl
 8022ba4:	465b      	mov	r3, fp
 8022ba6:	4620      	mov	r0, r4
 8022ba8:	4629      	mov	r1, r5
 8022baa:	f7dd ffab 	bl	8000b04 <__aeabi_dcmplt>
 8022bae:	2800      	cmp	r0, #0
 8022bb0:	d0e8      	beq.n	8022b84 <pow+0xec>
 8022bb2:	2301      	movs	r3, #1
 8022bb4:	9302      	str	r3, [sp, #8]
 8022bb6:	4b6d      	ldr	r3, [pc, #436]	; (8022d6c <pow+0x2d4>)
 8022bb8:	9303      	str	r3, [sp, #12]
 8022bba:	4b6b      	ldr	r3, [pc, #428]	; (8022d68 <pow+0x2d0>)
 8022bbc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8022bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8022bc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022bc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022bcc:	b913      	cbnz	r3, 8022bd4 <pow+0x13c>
 8022bce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022bd2:	e7a1      	b.n	8022b18 <pow+0x80>
 8022bd4:	4967      	ldr	r1, [pc, #412]	; (8022d74 <pow+0x2dc>)
 8022bd6:	2000      	movs	r0, #0
 8022bd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022bdc:	2b02      	cmp	r3, #2
 8022bde:	d19b      	bne.n	8022b18 <pow+0x80>
 8022be0:	f7fc fdee 	bl	801f7c0 <__errno>
 8022be4:	2321      	movs	r3, #33	; 0x21
 8022be6:	6003      	str	r3, [r0, #0]
 8022be8:	e7c4      	b.n	8022b74 <pow+0xdc>
 8022bea:	eeb0 0a48 	vmov.f32	s0, s16
 8022bee:	eef0 0a68 	vmov.f32	s1, s17
 8022bf2:	f001 fad1 	bl	8024198 <finite>
 8022bf6:	9001      	str	r0, [sp, #4]
 8022bf8:	2800      	cmp	r0, #0
 8022bfa:	f040 808a 	bne.w	8022d12 <pow+0x27a>
 8022bfe:	ec47 6b10 	vmov	d0, r6, r7
 8022c02:	f001 fac9 	bl	8024198 <finite>
 8022c06:	2800      	cmp	r0, #0
 8022c08:	f000 8083 	beq.w	8022d12 <pow+0x27a>
 8022c0c:	ec45 4b10 	vmov	d0, r4, r5
 8022c10:	f001 fac2 	bl	8024198 <finite>
 8022c14:	2800      	cmp	r0, #0
 8022c16:	d07c      	beq.n	8022d12 <pow+0x27a>
 8022c18:	ec53 2b18 	vmov	r2, r3, d8
 8022c1c:	ee18 0a10 	vmov	r0, s16
 8022c20:	4619      	mov	r1, r3
 8022c22:	f7dd ff97 	bl	8000b54 <__aeabi_dcmpun>
 8022c26:	f998 9000 	ldrsb.w	r9, [r8]
 8022c2a:	4b50      	ldr	r3, [pc, #320]	; (8022d6c <pow+0x2d4>)
 8022c2c:	b1b0      	cbz	r0, 8022c5c <pow+0x1c4>
 8022c2e:	2201      	movs	r2, #1
 8022c30:	9303      	str	r3, [sp, #12]
 8022c32:	9b01      	ldr	r3, [sp, #4]
 8022c34:	9202      	str	r2, [sp, #8]
 8022c36:	930a      	str	r3, [sp, #40]	; 0x28
 8022c38:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022c3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022c40:	f1b9 0f00 	cmp.w	r9, #0
 8022c44:	d0c3      	beq.n	8022bce <pow+0x136>
 8022c46:	4652      	mov	r2, sl
 8022c48:	465b      	mov	r3, fp
 8022c4a:	4650      	mov	r0, sl
 8022c4c:	4659      	mov	r1, fp
 8022c4e:	f7dd fe11 	bl	8000874 <__aeabi_ddiv>
 8022c52:	f1b9 0f02 	cmp.w	r9, #2
 8022c56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022c5a:	e7c0      	b.n	8022bde <pow+0x146>
 8022c5c:	2203      	movs	r2, #3
 8022c5e:	9202      	str	r2, [sp, #8]
 8022c60:	9303      	str	r3, [sp, #12]
 8022c62:	900a      	str	r0, [sp, #40]	; 0x28
 8022c64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022c68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022c6c:	f1b9 0f00 	cmp.w	r9, #0
 8022c70:	d12c      	bne.n	8022ccc <pow+0x234>
 8022c72:	4b41      	ldr	r3, [pc, #260]	; (8022d78 <pow+0x2e0>)
 8022c74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022c78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022c7c:	4630      	mov	r0, r6
 8022c7e:	4652      	mov	r2, sl
 8022c80:	465b      	mov	r3, fp
 8022c82:	4639      	mov	r1, r7
 8022c84:	f7dd ff3e 	bl	8000b04 <__aeabi_dcmplt>
 8022c88:	2800      	cmp	r0, #0
 8022c8a:	d066      	beq.n	8022d5a <pow+0x2c2>
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	4b3b      	ldr	r3, [pc, #236]	; (8022d7c <pow+0x2e4>)
 8022c90:	4620      	mov	r0, r4
 8022c92:	4629      	mov	r1, r5
 8022c94:	f7dd fcc4 	bl	8000620 <__aeabi_dmul>
 8022c98:	4604      	mov	r4, r0
 8022c9a:	460d      	mov	r5, r1
 8022c9c:	ec45 4b10 	vmov	d0, r4, r5
 8022ca0:	f001 fa8e 	bl	80241c0 <rint>
 8022ca4:	4620      	mov	r0, r4
 8022ca6:	ec53 2b10 	vmov	r2, r3, d0
 8022caa:	4629      	mov	r1, r5
 8022cac:	f7dd ff20 	bl	8000af0 <__aeabi_dcmpeq>
 8022cb0:	b920      	cbnz	r0, 8022cbc <pow+0x224>
 8022cb2:	4b33      	ldr	r3, [pc, #204]	; (8022d80 <pow+0x2e8>)
 8022cb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022cb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022cbc:	f998 3000 	ldrsb.w	r3, [r8]
 8022cc0:	2b02      	cmp	r3, #2
 8022cc2:	d14a      	bne.n	8022d5a <pow+0x2c2>
 8022cc4:	f7fc fd7c 	bl	801f7c0 <__errno>
 8022cc8:	2322      	movs	r3, #34	; 0x22
 8022cca:	e78c      	b.n	8022be6 <pow+0x14e>
 8022ccc:	4b2d      	ldr	r3, [pc, #180]	; (8022d84 <pow+0x2ec>)
 8022cce:	2200      	movs	r2, #0
 8022cd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022cd4:	4630      	mov	r0, r6
 8022cd6:	4652      	mov	r2, sl
 8022cd8:	465b      	mov	r3, fp
 8022cda:	4639      	mov	r1, r7
 8022cdc:	f7dd ff12 	bl	8000b04 <__aeabi_dcmplt>
 8022ce0:	2800      	cmp	r0, #0
 8022ce2:	d0eb      	beq.n	8022cbc <pow+0x224>
 8022ce4:	2200      	movs	r2, #0
 8022ce6:	4b25      	ldr	r3, [pc, #148]	; (8022d7c <pow+0x2e4>)
 8022ce8:	4620      	mov	r0, r4
 8022cea:	4629      	mov	r1, r5
 8022cec:	f7dd fc98 	bl	8000620 <__aeabi_dmul>
 8022cf0:	4604      	mov	r4, r0
 8022cf2:	460d      	mov	r5, r1
 8022cf4:	ec45 4b10 	vmov	d0, r4, r5
 8022cf8:	f001 fa62 	bl	80241c0 <rint>
 8022cfc:	4620      	mov	r0, r4
 8022cfe:	ec53 2b10 	vmov	r2, r3, d0
 8022d02:	4629      	mov	r1, r5
 8022d04:	f7dd fef4 	bl	8000af0 <__aeabi_dcmpeq>
 8022d08:	2800      	cmp	r0, #0
 8022d0a:	d1d7      	bne.n	8022cbc <pow+0x224>
 8022d0c:	2200      	movs	r2, #0
 8022d0e:	4b19      	ldr	r3, [pc, #100]	; (8022d74 <pow+0x2dc>)
 8022d10:	e7d2      	b.n	8022cb8 <pow+0x220>
 8022d12:	2200      	movs	r2, #0
 8022d14:	2300      	movs	r3, #0
 8022d16:	ec51 0b18 	vmov	r0, r1, d8
 8022d1a:	f7dd fee9 	bl	8000af0 <__aeabi_dcmpeq>
 8022d1e:	2800      	cmp	r0, #0
 8022d20:	f43f af30 	beq.w	8022b84 <pow+0xec>
 8022d24:	ec47 6b10 	vmov	d0, r6, r7
 8022d28:	f001 fa36 	bl	8024198 <finite>
 8022d2c:	2800      	cmp	r0, #0
 8022d2e:	f43f af29 	beq.w	8022b84 <pow+0xec>
 8022d32:	ec45 4b10 	vmov	d0, r4, r5
 8022d36:	f001 fa2f 	bl	8024198 <finite>
 8022d3a:	2800      	cmp	r0, #0
 8022d3c:	f43f af22 	beq.w	8022b84 <pow+0xec>
 8022d40:	2304      	movs	r3, #4
 8022d42:	9302      	str	r3, [sp, #8]
 8022d44:	4b09      	ldr	r3, [pc, #36]	; (8022d6c <pow+0x2d4>)
 8022d46:	9303      	str	r3, [sp, #12]
 8022d48:	2300      	movs	r3, #0
 8022d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8022d4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022d50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022d54:	ed8d 9b08 	vstr	d9, [sp, #32]
 8022d58:	e7b0      	b.n	8022cbc <pow+0x224>
 8022d5a:	a802      	add	r0, sp, #8
 8022d5c:	f001 fa24 	bl	80241a8 <matherr>
 8022d60:	2800      	cmp	r0, #0
 8022d62:	f47f af07 	bne.w	8022b74 <pow+0xdc>
 8022d66:	e7ad      	b.n	8022cc4 <pow+0x22c>
 8022d68:	200015b0 	.word	0x200015b0
 8022d6c:	08031645 	.word	0x08031645
 8022d70:	3ff00000 	.word	0x3ff00000
 8022d74:	fff00000 	.word	0xfff00000
 8022d78:	47efffff 	.word	0x47efffff
 8022d7c:	3fe00000 	.word	0x3fe00000
 8022d80:	c7efffff 	.word	0xc7efffff
 8022d84:	7ff00000 	.word	0x7ff00000

08022d88 <sqrt>:
 8022d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022d8c:	ed2d 8b02 	vpush	{d8}
 8022d90:	b08b      	sub	sp, #44	; 0x2c
 8022d92:	ec55 4b10 	vmov	r4, r5, d0
 8022d96:	f001 f901 	bl	8023f9c <__ieee754_sqrt>
 8022d9a:	4b26      	ldr	r3, [pc, #152]	; (8022e34 <sqrt+0xac>)
 8022d9c:	eeb0 8a40 	vmov.f32	s16, s0
 8022da0:	eef0 8a60 	vmov.f32	s17, s1
 8022da4:	f993 6000 	ldrsb.w	r6, [r3]
 8022da8:	1c73      	adds	r3, r6, #1
 8022daa:	d02a      	beq.n	8022e02 <sqrt+0x7a>
 8022dac:	4622      	mov	r2, r4
 8022dae:	462b      	mov	r3, r5
 8022db0:	4620      	mov	r0, r4
 8022db2:	4629      	mov	r1, r5
 8022db4:	f7dd fece 	bl	8000b54 <__aeabi_dcmpun>
 8022db8:	4607      	mov	r7, r0
 8022dba:	bb10      	cbnz	r0, 8022e02 <sqrt+0x7a>
 8022dbc:	f04f 0800 	mov.w	r8, #0
 8022dc0:	f04f 0900 	mov.w	r9, #0
 8022dc4:	4642      	mov	r2, r8
 8022dc6:	464b      	mov	r3, r9
 8022dc8:	4620      	mov	r0, r4
 8022dca:	4629      	mov	r1, r5
 8022dcc:	f7dd fe9a 	bl	8000b04 <__aeabi_dcmplt>
 8022dd0:	b1b8      	cbz	r0, 8022e02 <sqrt+0x7a>
 8022dd2:	2301      	movs	r3, #1
 8022dd4:	9300      	str	r3, [sp, #0]
 8022dd6:	4b18      	ldr	r3, [pc, #96]	; (8022e38 <sqrt+0xb0>)
 8022dd8:	9301      	str	r3, [sp, #4]
 8022dda:	9708      	str	r7, [sp, #32]
 8022ddc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8022de0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022de4:	b9b6      	cbnz	r6, 8022e14 <sqrt+0x8c>
 8022de6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8022dea:	4668      	mov	r0, sp
 8022dec:	f001 f9dc 	bl	80241a8 <matherr>
 8022df0:	b1d0      	cbz	r0, 8022e28 <sqrt+0xa0>
 8022df2:	9b08      	ldr	r3, [sp, #32]
 8022df4:	b11b      	cbz	r3, 8022dfe <sqrt+0x76>
 8022df6:	f7fc fce3 	bl	801f7c0 <__errno>
 8022dfa:	9b08      	ldr	r3, [sp, #32]
 8022dfc:	6003      	str	r3, [r0, #0]
 8022dfe:	ed9d 8b06 	vldr	d8, [sp, #24]
 8022e02:	eeb0 0a48 	vmov.f32	s0, s16
 8022e06:	eef0 0a68 	vmov.f32	s1, s17
 8022e0a:	b00b      	add	sp, #44	; 0x2c
 8022e0c:	ecbd 8b02 	vpop	{d8}
 8022e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022e14:	4642      	mov	r2, r8
 8022e16:	464b      	mov	r3, r9
 8022e18:	4640      	mov	r0, r8
 8022e1a:	4649      	mov	r1, r9
 8022e1c:	f7dd fd2a 	bl	8000874 <__aeabi_ddiv>
 8022e20:	2e02      	cmp	r6, #2
 8022e22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022e26:	d1e0      	bne.n	8022dea <sqrt+0x62>
 8022e28:	f7fc fcca 	bl	801f7c0 <__errno>
 8022e2c:	2321      	movs	r3, #33	; 0x21
 8022e2e:	6003      	str	r3, [r0, #0]
 8022e30:	e7df      	b.n	8022df2 <sqrt+0x6a>
 8022e32:	bf00      	nop
 8022e34:	200015b0 	.word	0x200015b0
 8022e38:	08031649 	.word	0x08031649

08022e3c <sqrtf>:
 8022e3c:	b510      	push	{r4, lr}
 8022e3e:	ed2d 8b02 	vpush	{d8}
 8022e42:	b08a      	sub	sp, #40	; 0x28
 8022e44:	eeb0 8a40 	vmov.f32	s16, s0
 8022e48:	f001 f958 	bl	80240fc <__ieee754_sqrtf>
 8022e4c:	4b21      	ldr	r3, [pc, #132]	; (8022ed4 <sqrtf+0x98>)
 8022e4e:	f993 4000 	ldrsb.w	r4, [r3]
 8022e52:	1c63      	adds	r3, r4, #1
 8022e54:	d02c      	beq.n	8022eb0 <sqrtf+0x74>
 8022e56:	eeb4 8a48 	vcmp.f32	s16, s16
 8022e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e5e:	d627      	bvs.n	8022eb0 <sqrtf+0x74>
 8022e60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8022e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e68:	d522      	bpl.n	8022eb0 <sqrtf+0x74>
 8022e6a:	2301      	movs	r3, #1
 8022e6c:	9300      	str	r3, [sp, #0]
 8022e6e:	4b1a      	ldr	r3, [pc, #104]	; (8022ed8 <sqrtf+0x9c>)
 8022e70:	9301      	str	r3, [sp, #4]
 8022e72:	ee18 0a10 	vmov	r0, s16
 8022e76:	2300      	movs	r3, #0
 8022e78:	9308      	str	r3, [sp, #32]
 8022e7a:	f7dd fb7d 	bl	8000578 <__aeabi_f2d>
 8022e7e:	2200      	movs	r2, #0
 8022e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022e88:	2300      	movs	r3, #0
 8022e8a:	b9ac      	cbnz	r4, 8022eb8 <sqrtf+0x7c>
 8022e8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022e90:	4668      	mov	r0, sp
 8022e92:	f001 f989 	bl	80241a8 <matherr>
 8022e96:	b1b8      	cbz	r0, 8022ec8 <sqrtf+0x8c>
 8022e98:	9b08      	ldr	r3, [sp, #32]
 8022e9a:	b11b      	cbz	r3, 8022ea4 <sqrtf+0x68>
 8022e9c:	f7fc fc90 	bl	801f7c0 <__errno>
 8022ea0:	9b08      	ldr	r3, [sp, #32]
 8022ea2:	6003      	str	r3, [r0, #0]
 8022ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022ea8:	f7dd feb2 	bl	8000c10 <__aeabi_d2f>
 8022eac:	ee00 0a10 	vmov	s0, r0
 8022eb0:	b00a      	add	sp, #40	; 0x28
 8022eb2:	ecbd 8b02 	vpop	{d8}
 8022eb6:	bd10      	pop	{r4, pc}
 8022eb8:	4610      	mov	r0, r2
 8022eba:	4619      	mov	r1, r3
 8022ebc:	f7dd fcda 	bl	8000874 <__aeabi_ddiv>
 8022ec0:	2c02      	cmp	r4, #2
 8022ec2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022ec6:	d1e3      	bne.n	8022e90 <sqrtf+0x54>
 8022ec8:	f7fc fc7a 	bl	801f7c0 <__errno>
 8022ecc:	2321      	movs	r3, #33	; 0x21
 8022ece:	6003      	str	r3, [r0, #0]
 8022ed0:	e7e2      	b.n	8022e98 <sqrtf+0x5c>
 8022ed2:	bf00      	nop
 8022ed4:	200015b0 	.word	0x200015b0
 8022ed8:	0803164e 	.word	0x0803164e
 8022edc:	00000000 	.word	0x00000000

08022ee0 <__ieee754_exp>:
 8022ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ee4:	ec55 4b10 	vmov	r4, r5, d0
 8022ee8:	4aad      	ldr	r2, [pc, #692]	; (80231a0 <__ieee754_exp+0x2c0>)
 8022eea:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8022eee:	4297      	cmp	r7, r2
 8022ef0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8022ef4:	f240 80af 	bls.w	8023056 <__ieee754_exp+0x176>
 8022ef8:	4aaa      	ldr	r2, [pc, #680]	; (80231a4 <__ieee754_exp+0x2c4>)
 8022efa:	4297      	cmp	r7, r2
 8022efc:	d915      	bls.n	8022f2a <__ieee754_exp+0x4a>
 8022efe:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8022f02:	4323      	orrs	r3, r4
 8022f04:	d009      	beq.n	8022f1a <__ieee754_exp+0x3a>
 8022f06:	ee10 2a10 	vmov	r2, s0
 8022f0a:	462b      	mov	r3, r5
 8022f0c:	4620      	mov	r0, r4
 8022f0e:	4629      	mov	r1, r5
 8022f10:	f7dd f9d4 	bl	80002bc <__adddf3>
 8022f14:	4604      	mov	r4, r0
 8022f16:	460d      	mov	r5, r1
 8022f18:	e002      	b.n	8022f20 <__ieee754_exp+0x40>
 8022f1a:	b10e      	cbz	r6, 8022f20 <__ieee754_exp+0x40>
 8022f1c:	2400      	movs	r4, #0
 8022f1e:	2500      	movs	r5, #0
 8022f20:	ec45 4b10 	vmov	d0, r4, r5
 8022f24:	b003      	add	sp, #12
 8022f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f2a:	a387      	add	r3, pc, #540	; (adr r3, 8023148 <__ieee754_exp+0x268>)
 8022f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f30:	ee10 0a10 	vmov	r0, s0
 8022f34:	4629      	mov	r1, r5
 8022f36:	f7dd fe03 	bl	8000b40 <__aeabi_dcmpgt>
 8022f3a:	b138      	cbz	r0, 8022f4c <__ieee754_exp+0x6c>
 8022f3c:	a384      	add	r3, pc, #528	; (adr r3, 8023150 <__ieee754_exp+0x270>)
 8022f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f42:	4610      	mov	r0, r2
 8022f44:	4619      	mov	r1, r3
 8022f46:	f7dd fb6b 	bl	8000620 <__aeabi_dmul>
 8022f4a:	e7e3      	b.n	8022f14 <__ieee754_exp+0x34>
 8022f4c:	a382      	add	r3, pc, #520	; (adr r3, 8023158 <__ieee754_exp+0x278>)
 8022f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f52:	4620      	mov	r0, r4
 8022f54:	4629      	mov	r1, r5
 8022f56:	f7dd fdd5 	bl	8000b04 <__aeabi_dcmplt>
 8022f5a:	2800      	cmp	r0, #0
 8022f5c:	d1de      	bne.n	8022f1c <__ieee754_exp+0x3c>
 8022f5e:	4b92      	ldr	r3, [pc, #584]	; (80231a8 <__ieee754_exp+0x2c8>)
 8022f60:	429f      	cmp	r7, r3
 8022f62:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 8022f66:	f200 808e 	bhi.w	8023086 <__ieee754_exp+0x1a6>
 8022f6a:	4b90      	ldr	r3, [pc, #576]	; (80231ac <__ieee754_exp+0x2cc>)
 8022f6c:	443b      	add	r3, r7
 8022f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f72:	4620      	mov	r0, r4
 8022f74:	4629      	mov	r1, r5
 8022f76:	f7dd f99f 	bl	80002b8 <__aeabi_dsub>
 8022f7a:	4b8d      	ldr	r3, [pc, #564]	; (80231b0 <__ieee754_exp+0x2d0>)
 8022f7c:	441f      	add	r7, r3
 8022f7e:	ed97 7b00 	vldr	d7, [r7]
 8022f82:	ed8d 7b00 	vstr	d7, [sp]
 8022f86:	4682      	mov	sl, r0
 8022f88:	f1c6 0001 	rsb	r0, r6, #1
 8022f8c:	468b      	mov	fp, r1
 8022f8e:	1b86      	subs	r6, r0, r6
 8022f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022f94:	4650      	mov	r0, sl
 8022f96:	4659      	mov	r1, fp
 8022f98:	f7dd f98e 	bl	80002b8 <__aeabi_dsub>
 8022f9c:	4604      	mov	r4, r0
 8022f9e:	460d      	mov	r5, r1
 8022fa0:	4622      	mov	r2, r4
 8022fa2:	462b      	mov	r3, r5
 8022fa4:	4620      	mov	r0, r4
 8022fa6:	4629      	mov	r1, r5
 8022fa8:	f7dd fb3a 	bl	8000620 <__aeabi_dmul>
 8022fac:	a36c      	add	r3, pc, #432	; (adr r3, 8023160 <__ieee754_exp+0x280>)
 8022fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fb2:	4680      	mov	r8, r0
 8022fb4:	4689      	mov	r9, r1
 8022fb6:	f7dd fb33 	bl	8000620 <__aeabi_dmul>
 8022fba:	a36b      	add	r3, pc, #428	; (adr r3, 8023168 <__ieee754_exp+0x288>)
 8022fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fc0:	f7dd f97a 	bl	80002b8 <__aeabi_dsub>
 8022fc4:	4642      	mov	r2, r8
 8022fc6:	464b      	mov	r3, r9
 8022fc8:	f7dd fb2a 	bl	8000620 <__aeabi_dmul>
 8022fcc:	a368      	add	r3, pc, #416	; (adr r3, 8023170 <__ieee754_exp+0x290>)
 8022fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fd2:	f7dd f973 	bl	80002bc <__adddf3>
 8022fd6:	4642      	mov	r2, r8
 8022fd8:	464b      	mov	r3, r9
 8022fda:	f7dd fb21 	bl	8000620 <__aeabi_dmul>
 8022fde:	a366      	add	r3, pc, #408	; (adr r3, 8023178 <__ieee754_exp+0x298>)
 8022fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fe4:	f7dd f968 	bl	80002b8 <__aeabi_dsub>
 8022fe8:	4642      	mov	r2, r8
 8022fea:	464b      	mov	r3, r9
 8022fec:	f7dd fb18 	bl	8000620 <__aeabi_dmul>
 8022ff0:	a363      	add	r3, pc, #396	; (adr r3, 8023180 <__ieee754_exp+0x2a0>)
 8022ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ff6:	f7dd f961 	bl	80002bc <__adddf3>
 8022ffa:	4642      	mov	r2, r8
 8022ffc:	464b      	mov	r3, r9
 8022ffe:	f7dd fb0f 	bl	8000620 <__aeabi_dmul>
 8023002:	4602      	mov	r2, r0
 8023004:	460b      	mov	r3, r1
 8023006:	4620      	mov	r0, r4
 8023008:	4629      	mov	r1, r5
 802300a:	f7dd f955 	bl	80002b8 <__aeabi_dsub>
 802300e:	4680      	mov	r8, r0
 8023010:	4689      	mov	r9, r1
 8023012:	4602      	mov	r2, r0
 8023014:	460b      	mov	r3, r1
 8023016:	4620      	mov	r0, r4
 8023018:	4629      	mov	r1, r5
 802301a:	2e00      	cmp	r6, #0
 802301c:	d162      	bne.n	80230e4 <__ieee754_exp+0x204>
 802301e:	f7dd faff 	bl	8000620 <__aeabi_dmul>
 8023022:	2200      	movs	r2, #0
 8023024:	4606      	mov	r6, r0
 8023026:	460f      	mov	r7, r1
 8023028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802302c:	4640      	mov	r0, r8
 802302e:	4649      	mov	r1, r9
 8023030:	f7dd f942 	bl	80002b8 <__aeabi_dsub>
 8023034:	4602      	mov	r2, r0
 8023036:	460b      	mov	r3, r1
 8023038:	4630      	mov	r0, r6
 802303a:	4639      	mov	r1, r7
 802303c:	f7dd fc1a 	bl	8000874 <__aeabi_ddiv>
 8023040:	4622      	mov	r2, r4
 8023042:	462b      	mov	r3, r5
 8023044:	f7dd f938 	bl	80002b8 <__aeabi_dsub>
 8023048:	4602      	mov	r2, r0
 802304a:	460b      	mov	r3, r1
 802304c:	2000      	movs	r0, #0
 802304e:	4959      	ldr	r1, [pc, #356]	; (80231b4 <__ieee754_exp+0x2d4>)
 8023050:	f7dd f932 	bl	80002b8 <__aeabi_dsub>
 8023054:	e75e      	b.n	8022f14 <__ieee754_exp+0x34>
 8023056:	4b58      	ldr	r3, [pc, #352]	; (80231b8 <__ieee754_exp+0x2d8>)
 8023058:	429f      	cmp	r7, r3
 802305a:	d880      	bhi.n	8022f5e <__ieee754_exp+0x7e>
 802305c:	4b57      	ldr	r3, [pc, #348]	; (80231bc <__ieee754_exp+0x2dc>)
 802305e:	429f      	cmp	r7, r3
 8023060:	d83c      	bhi.n	80230dc <__ieee754_exp+0x1fc>
 8023062:	a33b      	add	r3, pc, #236	; (adr r3, 8023150 <__ieee754_exp+0x270>)
 8023064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023068:	ee10 0a10 	vmov	r0, s0
 802306c:	4629      	mov	r1, r5
 802306e:	f7dd f925 	bl	80002bc <__adddf3>
 8023072:	2200      	movs	r2, #0
 8023074:	4b4f      	ldr	r3, [pc, #316]	; (80231b4 <__ieee754_exp+0x2d4>)
 8023076:	f7dd fd63 	bl	8000b40 <__aeabi_dcmpgt>
 802307a:	b388      	cbz	r0, 80230e0 <__ieee754_exp+0x200>
 802307c:	2200      	movs	r2, #0
 802307e:	4b4d      	ldr	r3, [pc, #308]	; (80231b4 <__ieee754_exp+0x2d4>)
 8023080:	4620      	mov	r0, r4
 8023082:	4629      	mov	r1, r5
 8023084:	e744      	b.n	8022f10 <__ieee754_exp+0x30>
 8023086:	4e4e      	ldr	r6, [pc, #312]	; (80231c0 <__ieee754_exp+0x2e0>)
 8023088:	a33f      	add	r3, pc, #252	; (adr r3, 8023188 <__ieee754_exp+0x2a8>)
 802308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802308e:	443e      	add	r6, r7
 8023090:	4620      	mov	r0, r4
 8023092:	4629      	mov	r1, r5
 8023094:	f7dd fac4 	bl	8000620 <__aeabi_dmul>
 8023098:	e9d6 2300 	ldrd	r2, r3, [r6]
 802309c:	f7dd f90e 	bl	80002bc <__adddf3>
 80230a0:	f7dd fd6e 	bl	8000b80 <__aeabi_d2iz>
 80230a4:	4606      	mov	r6, r0
 80230a6:	f7dd fa55 	bl	8000554 <__aeabi_i2d>
 80230aa:	a339      	add	r3, pc, #228	; (adr r3, 8023190 <__ieee754_exp+0x2b0>)
 80230ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230b0:	4680      	mov	r8, r0
 80230b2:	4689      	mov	r9, r1
 80230b4:	f7dd fab4 	bl	8000620 <__aeabi_dmul>
 80230b8:	4602      	mov	r2, r0
 80230ba:	460b      	mov	r3, r1
 80230bc:	4620      	mov	r0, r4
 80230be:	4629      	mov	r1, r5
 80230c0:	f7dd f8fa 	bl	80002b8 <__aeabi_dsub>
 80230c4:	a334      	add	r3, pc, #208	; (adr r3, 8023198 <__ieee754_exp+0x2b8>)
 80230c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230ca:	4682      	mov	sl, r0
 80230cc:	468b      	mov	fp, r1
 80230ce:	4640      	mov	r0, r8
 80230d0:	4649      	mov	r1, r9
 80230d2:	f7dd faa5 	bl	8000620 <__aeabi_dmul>
 80230d6:	e9cd 0100 	strd	r0, r1, [sp]
 80230da:	e759      	b.n	8022f90 <__ieee754_exp+0xb0>
 80230dc:	2600      	movs	r6, #0
 80230de:	e75f      	b.n	8022fa0 <__ieee754_exp+0xc0>
 80230e0:	4606      	mov	r6, r0
 80230e2:	e75d      	b.n	8022fa0 <__ieee754_exp+0xc0>
 80230e4:	f7dd fa9c 	bl	8000620 <__aeabi_dmul>
 80230e8:	4642      	mov	r2, r8
 80230ea:	4604      	mov	r4, r0
 80230ec:	460d      	mov	r5, r1
 80230ee:	464b      	mov	r3, r9
 80230f0:	2000      	movs	r0, #0
 80230f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80230f6:	f7dd f8df 	bl	80002b8 <__aeabi_dsub>
 80230fa:	4602      	mov	r2, r0
 80230fc:	460b      	mov	r3, r1
 80230fe:	4620      	mov	r0, r4
 8023100:	4629      	mov	r1, r5
 8023102:	f7dd fbb7 	bl	8000874 <__aeabi_ddiv>
 8023106:	4602      	mov	r2, r0
 8023108:	460b      	mov	r3, r1
 802310a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802310e:	f7dd f8d3 	bl	80002b8 <__aeabi_dsub>
 8023112:	4652      	mov	r2, sl
 8023114:	465b      	mov	r3, fp
 8023116:	f7dd f8cf 	bl	80002b8 <__aeabi_dsub>
 802311a:	460b      	mov	r3, r1
 802311c:	4602      	mov	r2, r0
 802311e:	4925      	ldr	r1, [pc, #148]	; (80231b4 <__ieee754_exp+0x2d4>)
 8023120:	2000      	movs	r0, #0
 8023122:	f7dd f8c9 	bl	80002b8 <__aeabi_dsub>
 8023126:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 802312a:	429e      	cmp	r6, r3
 802312c:	db02      	blt.n	8023134 <__ieee754_exp+0x254>
 802312e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8023132:	e6ef      	b.n	8022f14 <__ieee754_exp+0x34>
 8023134:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8023138:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 802313c:	2200      	movs	r2, #0
 802313e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023142:	e700      	b.n	8022f46 <__ieee754_exp+0x66>
 8023144:	f3af 8000 	nop.w
 8023148:	fefa39ef 	.word	0xfefa39ef
 802314c:	40862e42 	.word	0x40862e42
 8023150:	8800759c 	.word	0x8800759c
 8023154:	7e37e43c 	.word	0x7e37e43c
 8023158:	d52d3051 	.word	0xd52d3051
 802315c:	c0874910 	.word	0xc0874910
 8023160:	72bea4d0 	.word	0x72bea4d0
 8023164:	3e663769 	.word	0x3e663769
 8023168:	c5d26bf1 	.word	0xc5d26bf1
 802316c:	3ebbbd41 	.word	0x3ebbbd41
 8023170:	af25de2c 	.word	0xaf25de2c
 8023174:	3f11566a 	.word	0x3f11566a
 8023178:	16bebd93 	.word	0x16bebd93
 802317c:	3f66c16c 	.word	0x3f66c16c
 8023180:	5555553e 	.word	0x5555553e
 8023184:	3fc55555 	.word	0x3fc55555
 8023188:	652b82fe 	.word	0x652b82fe
 802318c:	3ff71547 	.word	0x3ff71547
 8023190:	fee00000 	.word	0xfee00000
 8023194:	3fe62e42 	.word	0x3fe62e42
 8023198:	35793c76 	.word	0x35793c76
 802319c:	3dea39ef 	.word	0x3dea39ef
 80231a0:	40862e41 	.word	0x40862e41
 80231a4:	7fefffff 	.word	0x7fefffff
 80231a8:	3ff0a2b1 	.word	0x3ff0a2b1
 80231ac:	08031668 	.word	0x08031668
 80231b0:	08031678 	.word	0x08031678
 80231b4:	3ff00000 	.word	0x3ff00000
 80231b8:	3fd62e42 	.word	0x3fd62e42
 80231bc:	3e2fffff 	.word	0x3e2fffff
 80231c0:	08031658 	.word	0x08031658
 80231c4:	00000000 	.word	0x00000000

080231c8 <__ieee754_log>:
 80231c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231cc:	ec51 0b10 	vmov	r0, r1, d0
 80231d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80231d4:	b087      	sub	sp, #28
 80231d6:	ee10 3a10 	vmov	r3, s0
 80231da:	460d      	mov	r5, r1
 80231dc:	da27      	bge.n	802322e <__ieee754_log+0x66>
 80231de:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80231e2:	4313      	orrs	r3, r2
 80231e4:	d10a      	bne.n	80231fc <__ieee754_log+0x34>
 80231e6:	49cc      	ldr	r1, [pc, #816]	; (8023518 <__ieee754_log+0x350>)
 80231e8:	2200      	movs	r2, #0
 80231ea:	2300      	movs	r3, #0
 80231ec:	2000      	movs	r0, #0
 80231ee:	f7dd fb41 	bl	8000874 <__aeabi_ddiv>
 80231f2:	ec41 0b10 	vmov	d0, r0, r1
 80231f6:	b007      	add	sp, #28
 80231f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231fc:	2900      	cmp	r1, #0
 80231fe:	da07      	bge.n	8023210 <__ieee754_log+0x48>
 8023200:	ee10 2a10 	vmov	r2, s0
 8023204:	460b      	mov	r3, r1
 8023206:	f7dd f857 	bl	80002b8 <__aeabi_dsub>
 802320a:	2200      	movs	r2, #0
 802320c:	2300      	movs	r3, #0
 802320e:	e7ee      	b.n	80231ee <__ieee754_log+0x26>
 8023210:	4bc2      	ldr	r3, [pc, #776]	; (802351c <__ieee754_log+0x354>)
 8023212:	2200      	movs	r2, #0
 8023214:	f7dd fa04 	bl	8000620 <__aeabi_dmul>
 8023218:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802321c:	460d      	mov	r5, r1
 802321e:	4ac0      	ldr	r2, [pc, #768]	; (8023520 <__ieee754_log+0x358>)
 8023220:	4295      	cmp	r5, r2
 8023222:	dd06      	ble.n	8023232 <__ieee754_log+0x6a>
 8023224:	4602      	mov	r2, r0
 8023226:	460b      	mov	r3, r1
 8023228:	f7dd f848 	bl	80002bc <__adddf3>
 802322c:	e7e1      	b.n	80231f2 <__ieee754_log+0x2a>
 802322e:	2300      	movs	r3, #0
 8023230:	e7f5      	b.n	802321e <__ieee754_log+0x56>
 8023232:	152c      	asrs	r4, r5, #20
 8023234:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8023238:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802323c:	441c      	add	r4, r3
 802323e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8023242:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8023246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802324a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802324e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8023252:	ea42 0105 	orr.w	r1, r2, r5
 8023256:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802325a:	2200      	movs	r2, #0
 802325c:	4bb1      	ldr	r3, [pc, #708]	; (8023524 <__ieee754_log+0x35c>)
 802325e:	f7dd f82b 	bl	80002b8 <__aeabi_dsub>
 8023262:	1cab      	adds	r3, r5, #2
 8023264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023268:	2b02      	cmp	r3, #2
 802326a:	4682      	mov	sl, r0
 802326c:	468b      	mov	fp, r1
 802326e:	f04f 0200 	mov.w	r2, #0
 8023272:	dc5b      	bgt.n	802332c <__ieee754_log+0x164>
 8023274:	2300      	movs	r3, #0
 8023276:	f7dd fc3b 	bl	8000af0 <__aeabi_dcmpeq>
 802327a:	b1d0      	cbz	r0, 80232b2 <__ieee754_log+0xea>
 802327c:	2c00      	cmp	r4, #0
 802327e:	f000 8170 	beq.w	8023562 <__ieee754_log+0x39a>
 8023282:	4620      	mov	r0, r4
 8023284:	f7dd f966 	bl	8000554 <__aeabi_i2d>
 8023288:	a38f      	add	r3, pc, #572	; (adr r3, 80234c8 <__ieee754_log+0x300>)
 802328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802328e:	4606      	mov	r6, r0
 8023290:	460f      	mov	r7, r1
 8023292:	f7dd f9c5 	bl	8000620 <__aeabi_dmul>
 8023296:	a38e      	add	r3, pc, #568	; (adr r3, 80234d0 <__ieee754_log+0x308>)
 8023298:	e9d3 2300 	ldrd	r2, r3, [r3]
 802329c:	4604      	mov	r4, r0
 802329e:	460d      	mov	r5, r1
 80232a0:	4630      	mov	r0, r6
 80232a2:	4639      	mov	r1, r7
 80232a4:	f7dd f9bc 	bl	8000620 <__aeabi_dmul>
 80232a8:	4602      	mov	r2, r0
 80232aa:	460b      	mov	r3, r1
 80232ac:	4620      	mov	r0, r4
 80232ae:	4629      	mov	r1, r5
 80232b0:	e7ba      	b.n	8023228 <__ieee754_log+0x60>
 80232b2:	a389      	add	r3, pc, #548	; (adr r3, 80234d8 <__ieee754_log+0x310>)
 80232b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232b8:	4650      	mov	r0, sl
 80232ba:	4659      	mov	r1, fp
 80232bc:	f7dd f9b0 	bl	8000620 <__aeabi_dmul>
 80232c0:	4602      	mov	r2, r0
 80232c2:	460b      	mov	r3, r1
 80232c4:	2000      	movs	r0, #0
 80232c6:	4998      	ldr	r1, [pc, #608]	; (8023528 <__ieee754_log+0x360>)
 80232c8:	f7dc fff6 	bl	80002b8 <__aeabi_dsub>
 80232cc:	4652      	mov	r2, sl
 80232ce:	4606      	mov	r6, r0
 80232d0:	460f      	mov	r7, r1
 80232d2:	465b      	mov	r3, fp
 80232d4:	4650      	mov	r0, sl
 80232d6:	4659      	mov	r1, fp
 80232d8:	f7dd f9a2 	bl	8000620 <__aeabi_dmul>
 80232dc:	4602      	mov	r2, r0
 80232de:	460b      	mov	r3, r1
 80232e0:	4630      	mov	r0, r6
 80232e2:	4639      	mov	r1, r7
 80232e4:	f7dd f99c 	bl	8000620 <__aeabi_dmul>
 80232e8:	4606      	mov	r6, r0
 80232ea:	460f      	mov	r7, r1
 80232ec:	b934      	cbnz	r4, 80232fc <__ieee754_log+0x134>
 80232ee:	4602      	mov	r2, r0
 80232f0:	460b      	mov	r3, r1
 80232f2:	4650      	mov	r0, sl
 80232f4:	4659      	mov	r1, fp
 80232f6:	f7dc ffdf 	bl	80002b8 <__aeabi_dsub>
 80232fa:	e77a      	b.n	80231f2 <__ieee754_log+0x2a>
 80232fc:	4620      	mov	r0, r4
 80232fe:	f7dd f929 	bl	8000554 <__aeabi_i2d>
 8023302:	a371      	add	r3, pc, #452	; (adr r3, 80234c8 <__ieee754_log+0x300>)
 8023304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023308:	4680      	mov	r8, r0
 802330a:	4689      	mov	r9, r1
 802330c:	f7dd f988 	bl	8000620 <__aeabi_dmul>
 8023310:	a36f      	add	r3, pc, #444	; (adr r3, 80234d0 <__ieee754_log+0x308>)
 8023312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023316:	4604      	mov	r4, r0
 8023318:	460d      	mov	r5, r1
 802331a:	4640      	mov	r0, r8
 802331c:	4649      	mov	r1, r9
 802331e:	f7dd f97f 	bl	8000620 <__aeabi_dmul>
 8023322:	4602      	mov	r2, r0
 8023324:	460b      	mov	r3, r1
 8023326:	4630      	mov	r0, r6
 8023328:	4639      	mov	r1, r7
 802332a:	e0b2      	b.n	8023492 <__ieee754_log+0x2ca>
 802332c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023330:	f7dc ffc4 	bl	80002bc <__adddf3>
 8023334:	4602      	mov	r2, r0
 8023336:	460b      	mov	r3, r1
 8023338:	4650      	mov	r0, sl
 802333a:	4659      	mov	r1, fp
 802333c:	f7dd fa9a 	bl	8000874 <__aeabi_ddiv>
 8023340:	e9cd 0100 	strd	r0, r1, [sp]
 8023344:	4620      	mov	r0, r4
 8023346:	f7dd f905 	bl	8000554 <__aeabi_i2d>
 802334a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802334e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023352:	4610      	mov	r0, r2
 8023354:	4619      	mov	r1, r3
 8023356:	f7dd f963 	bl	8000620 <__aeabi_dmul>
 802335a:	4602      	mov	r2, r0
 802335c:	460b      	mov	r3, r1
 802335e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023362:	f7dd f95d 	bl	8000620 <__aeabi_dmul>
 8023366:	a35e      	add	r3, pc, #376	; (adr r3, 80234e0 <__ieee754_log+0x318>)
 8023368:	e9d3 2300 	ldrd	r2, r3, [r3]
 802336c:	4606      	mov	r6, r0
 802336e:	460f      	mov	r7, r1
 8023370:	f7dd f956 	bl	8000620 <__aeabi_dmul>
 8023374:	a35c      	add	r3, pc, #368	; (adr r3, 80234e8 <__ieee754_log+0x320>)
 8023376:	e9d3 2300 	ldrd	r2, r3, [r3]
 802337a:	f7dc ff9f 	bl	80002bc <__adddf3>
 802337e:	4632      	mov	r2, r6
 8023380:	463b      	mov	r3, r7
 8023382:	f7dd f94d 	bl	8000620 <__aeabi_dmul>
 8023386:	a35a      	add	r3, pc, #360	; (adr r3, 80234f0 <__ieee754_log+0x328>)
 8023388:	e9d3 2300 	ldrd	r2, r3, [r3]
 802338c:	f7dc ff96 	bl	80002bc <__adddf3>
 8023390:	4632      	mov	r2, r6
 8023392:	463b      	mov	r3, r7
 8023394:	f7dd f944 	bl	8000620 <__aeabi_dmul>
 8023398:	a357      	add	r3, pc, #348	; (adr r3, 80234f8 <__ieee754_log+0x330>)
 802339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802339e:	f7dc ff8d 	bl	80002bc <__adddf3>
 80233a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80233a6:	f7dd f93b 	bl	8000620 <__aeabi_dmul>
 80233aa:	a355      	add	r3, pc, #340	; (adr r3, 8023500 <__ieee754_log+0x338>)
 80233ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80233b4:	4630      	mov	r0, r6
 80233b6:	4639      	mov	r1, r7
 80233b8:	f7dd f932 	bl	8000620 <__aeabi_dmul>
 80233bc:	a352      	add	r3, pc, #328	; (adr r3, 8023508 <__ieee754_log+0x340>)
 80233be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233c2:	f7dc ff7b 	bl	80002bc <__adddf3>
 80233c6:	4632      	mov	r2, r6
 80233c8:	463b      	mov	r3, r7
 80233ca:	f7dd f929 	bl	8000620 <__aeabi_dmul>
 80233ce:	a350      	add	r3, pc, #320	; (adr r3, 8023510 <__ieee754_log+0x348>)
 80233d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233d4:	f7dc ff72 	bl	80002bc <__adddf3>
 80233d8:	4632      	mov	r2, r6
 80233da:	463b      	mov	r3, r7
 80233dc:	f7dd f920 	bl	8000620 <__aeabi_dmul>
 80233e0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80233e4:	4602      	mov	r2, r0
 80233e6:	460b      	mov	r3, r1
 80233e8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80233ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80233f0:	f7dc ff64 	bl	80002bc <__adddf3>
 80233f4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80233f8:	3551      	adds	r5, #81	; 0x51
 80233fa:	ea45 0508 	orr.w	r5, r5, r8
 80233fe:	2d00      	cmp	r5, #0
 8023400:	4606      	mov	r6, r0
 8023402:	460f      	mov	r7, r1
 8023404:	dd50      	ble.n	80234a8 <__ieee754_log+0x2e0>
 8023406:	2200      	movs	r2, #0
 8023408:	4b47      	ldr	r3, [pc, #284]	; (8023528 <__ieee754_log+0x360>)
 802340a:	4650      	mov	r0, sl
 802340c:	4659      	mov	r1, fp
 802340e:	f7dd f907 	bl	8000620 <__aeabi_dmul>
 8023412:	4652      	mov	r2, sl
 8023414:	465b      	mov	r3, fp
 8023416:	f7dd f903 	bl	8000620 <__aeabi_dmul>
 802341a:	4680      	mov	r8, r0
 802341c:	4689      	mov	r9, r1
 802341e:	b994      	cbnz	r4, 8023446 <__ieee754_log+0x27e>
 8023420:	4602      	mov	r2, r0
 8023422:	460b      	mov	r3, r1
 8023424:	4630      	mov	r0, r6
 8023426:	4639      	mov	r1, r7
 8023428:	f7dc ff48 	bl	80002bc <__adddf3>
 802342c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023430:	f7dd f8f6 	bl	8000620 <__aeabi_dmul>
 8023434:	4602      	mov	r2, r0
 8023436:	460b      	mov	r3, r1
 8023438:	4640      	mov	r0, r8
 802343a:	4649      	mov	r1, r9
 802343c:	f7dc ff3c 	bl	80002b8 <__aeabi_dsub>
 8023440:	4602      	mov	r2, r0
 8023442:	460b      	mov	r3, r1
 8023444:	e755      	b.n	80232f2 <__ieee754_log+0x12a>
 8023446:	a320      	add	r3, pc, #128	; (adr r3, 80234c8 <__ieee754_log+0x300>)
 8023448:	e9d3 2300 	ldrd	r2, r3, [r3]
 802344c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023450:	f7dd f8e6 	bl	8000620 <__aeabi_dmul>
 8023454:	4642      	mov	r2, r8
 8023456:	464b      	mov	r3, r9
 8023458:	4604      	mov	r4, r0
 802345a:	460d      	mov	r5, r1
 802345c:	4630      	mov	r0, r6
 802345e:	4639      	mov	r1, r7
 8023460:	f7dc ff2c 	bl	80002bc <__adddf3>
 8023464:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023468:	f7dd f8da 	bl	8000620 <__aeabi_dmul>
 802346c:	a318      	add	r3, pc, #96	; (adr r3, 80234d0 <__ieee754_log+0x308>)
 802346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023472:	4606      	mov	r6, r0
 8023474:	460f      	mov	r7, r1
 8023476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802347a:	f7dd f8d1 	bl	8000620 <__aeabi_dmul>
 802347e:	4602      	mov	r2, r0
 8023480:	460b      	mov	r3, r1
 8023482:	4630      	mov	r0, r6
 8023484:	4639      	mov	r1, r7
 8023486:	f7dc ff19 	bl	80002bc <__adddf3>
 802348a:	4602      	mov	r2, r0
 802348c:	460b      	mov	r3, r1
 802348e:	4640      	mov	r0, r8
 8023490:	4649      	mov	r1, r9
 8023492:	f7dc ff11 	bl	80002b8 <__aeabi_dsub>
 8023496:	4652      	mov	r2, sl
 8023498:	465b      	mov	r3, fp
 802349a:	f7dc ff0d 	bl	80002b8 <__aeabi_dsub>
 802349e:	4602      	mov	r2, r0
 80234a0:	460b      	mov	r3, r1
 80234a2:	4620      	mov	r0, r4
 80234a4:	4629      	mov	r1, r5
 80234a6:	e726      	b.n	80232f6 <__ieee754_log+0x12e>
 80234a8:	2c00      	cmp	r4, #0
 80234aa:	d13f      	bne.n	802352c <__ieee754_log+0x364>
 80234ac:	4602      	mov	r2, r0
 80234ae:	460b      	mov	r3, r1
 80234b0:	4650      	mov	r0, sl
 80234b2:	4659      	mov	r1, fp
 80234b4:	f7dc ff00 	bl	80002b8 <__aeabi_dsub>
 80234b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80234bc:	f7dd f8b0 	bl	8000620 <__aeabi_dmul>
 80234c0:	e7be      	b.n	8023440 <__ieee754_log+0x278>
 80234c2:	bf00      	nop
 80234c4:	f3af 8000 	nop.w
 80234c8:	fee00000 	.word	0xfee00000
 80234cc:	3fe62e42 	.word	0x3fe62e42
 80234d0:	35793c76 	.word	0x35793c76
 80234d4:	3dea39ef 	.word	0x3dea39ef
 80234d8:	55555555 	.word	0x55555555
 80234dc:	3fd55555 	.word	0x3fd55555
 80234e0:	df3e5244 	.word	0xdf3e5244
 80234e4:	3fc2f112 	.word	0x3fc2f112
 80234e8:	96cb03de 	.word	0x96cb03de
 80234ec:	3fc74664 	.word	0x3fc74664
 80234f0:	94229359 	.word	0x94229359
 80234f4:	3fd24924 	.word	0x3fd24924
 80234f8:	55555593 	.word	0x55555593
 80234fc:	3fe55555 	.word	0x3fe55555
 8023500:	d078c69f 	.word	0xd078c69f
 8023504:	3fc39a09 	.word	0x3fc39a09
 8023508:	1d8e78af 	.word	0x1d8e78af
 802350c:	3fcc71c5 	.word	0x3fcc71c5
 8023510:	9997fa04 	.word	0x9997fa04
 8023514:	3fd99999 	.word	0x3fd99999
 8023518:	c3500000 	.word	0xc3500000
 802351c:	43500000 	.word	0x43500000
 8023520:	7fefffff 	.word	0x7fefffff
 8023524:	3ff00000 	.word	0x3ff00000
 8023528:	3fe00000 	.word	0x3fe00000
 802352c:	a30e      	add	r3, pc, #56	; (adr r3, 8023568 <__ieee754_log+0x3a0>)
 802352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023536:	f7dd f873 	bl	8000620 <__aeabi_dmul>
 802353a:	4632      	mov	r2, r6
 802353c:	463b      	mov	r3, r7
 802353e:	4604      	mov	r4, r0
 8023540:	460d      	mov	r5, r1
 8023542:	4650      	mov	r0, sl
 8023544:	4659      	mov	r1, fp
 8023546:	f7dc feb7 	bl	80002b8 <__aeabi_dsub>
 802354a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802354e:	f7dd f867 	bl	8000620 <__aeabi_dmul>
 8023552:	a307      	add	r3, pc, #28	; (adr r3, 8023570 <__ieee754_log+0x3a8>)
 8023554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023558:	4606      	mov	r6, r0
 802355a:	460f      	mov	r7, r1
 802355c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023560:	e6dd      	b.n	802331e <__ieee754_log+0x156>
 8023562:	2000      	movs	r0, #0
 8023564:	2100      	movs	r1, #0
 8023566:	e644      	b.n	80231f2 <__ieee754_log+0x2a>
 8023568:	fee00000 	.word	0xfee00000
 802356c:	3fe62e42 	.word	0x3fe62e42
 8023570:	35793c76 	.word	0x35793c76
 8023574:	3dea39ef 	.word	0x3dea39ef

08023578 <__ieee754_pow>:
 8023578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802357c:	b091      	sub	sp, #68	; 0x44
 802357e:	ed8d 1b00 	vstr	d1, [sp]
 8023582:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8023586:	ec57 6b10 	vmov	r6, r7, d0
 802358a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802358e:	ea58 0302 	orrs.w	r3, r8, r2
 8023592:	ee10 aa10 	vmov	sl, s0
 8023596:	463d      	mov	r5, r7
 8023598:	f000 84bd 	beq.w	8023f16 <__ieee754_pow+0x99e>
 802359c:	4b78      	ldr	r3, [pc, #480]	; (8023780 <__ieee754_pow+0x208>)
 802359e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80235a2:	429c      	cmp	r4, r3
 80235a4:	dc09      	bgt.n	80235ba <__ieee754_pow+0x42>
 80235a6:	d103      	bne.n	80235b0 <__ieee754_pow+0x38>
 80235a8:	b93e      	cbnz	r6, 80235ba <__ieee754_pow+0x42>
 80235aa:	45a0      	cmp	r8, r4
 80235ac:	dc0d      	bgt.n	80235ca <__ieee754_pow+0x52>
 80235ae:	e001      	b.n	80235b4 <__ieee754_pow+0x3c>
 80235b0:	4598      	cmp	r8, r3
 80235b2:	dc02      	bgt.n	80235ba <__ieee754_pow+0x42>
 80235b4:	4598      	cmp	r8, r3
 80235b6:	d10e      	bne.n	80235d6 <__ieee754_pow+0x5e>
 80235b8:	b16a      	cbz	r2, 80235d6 <__ieee754_pow+0x5e>
 80235ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80235be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80235c2:	ea54 030a 	orrs.w	r3, r4, sl
 80235c6:	f000 84a6 	beq.w	8023f16 <__ieee754_pow+0x99e>
 80235ca:	486e      	ldr	r0, [pc, #440]	; (8023784 <__ieee754_pow+0x20c>)
 80235cc:	b011      	add	sp, #68	; 0x44
 80235ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235d2:	f000 bded 	b.w	80241b0 <nan>
 80235d6:	2d00      	cmp	r5, #0
 80235d8:	da53      	bge.n	8023682 <__ieee754_pow+0x10a>
 80235da:	4b6b      	ldr	r3, [pc, #428]	; (8023788 <__ieee754_pow+0x210>)
 80235dc:	4598      	cmp	r8, r3
 80235de:	dc4d      	bgt.n	802367c <__ieee754_pow+0x104>
 80235e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80235e4:	4598      	cmp	r8, r3
 80235e6:	dd4c      	ble.n	8023682 <__ieee754_pow+0x10a>
 80235e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80235ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80235f0:	2b14      	cmp	r3, #20
 80235f2:	dd26      	ble.n	8023642 <__ieee754_pow+0xca>
 80235f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80235f8:	fa22 f103 	lsr.w	r1, r2, r3
 80235fc:	fa01 f303 	lsl.w	r3, r1, r3
 8023600:	429a      	cmp	r2, r3
 8023602:	d13e      	bne.n	8023682 <__ieee754_pow+0x10a>
 8023604:	f001 0101 	and.w	r1, r1, #1
 8023608:	f1c1 0b02 	rsb	fp, r1, #2
 802360c:	2a00      	cmp	r2, #0
 802360e:	d15b      	bne.n	80236c8 <__ieee754_pow+0x150>
 8023610:	4b5b      	ldr	r3, [pc, #364]	; (8023780 <__ieee754_pow+0x208>)
 8023612:	4598      	cmp	r8, r3
 8023614:	d124      	bne.n	8023660 <__ieee754_pow+0xe8>
 8023616:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802361a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802361e:	ea53 030a 	orrs.w	r3, r3, sl
 8023622:	f000 8478 	beq.w	8023f16 <__ieee754_pow+0x99e>
 8023626:	4b59      	ldr	r3, [pc, #356]	; (802378c <__ieee754_pow+0x214>)
 8023628:	429c      	cmp	r4, r3
 802362a:	dd2d      	ble.n	8023688 <__ieee754_pow+0x110>
 802362c:	f1b9 0f00 	cmp.w	r9, #0
 8023630:	f280 8475 	bge.w	8023f1e <__ieee754_pow+0x9a6>
 8023634:	2000      	movs	r0, #0
 8023636:	2100      	movs	r1, #0
 8023638:	ec41 0b10 	vmov	d0, r0, r1
 802363c:	b011      	add	sp, #68	; 0x44
 802363e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023642:	2a00      	cmp	r2, #0
 8023644:	d13e      	bne.n	80236c4 <__ieee754_pow+0x14c>
 8023646:	f1c3 0314 	rsb	r3, r3, #20
 802364a:	fa48 f103 	asr.w	r1, r8, r3
 802364e:	fa01 f303 	lsl.w	r3, r1, r3
 8023652:	4598      	cmp	r8, r3
 8023654:	f040 846b 	bne.w	8023f2e <__ieee754_pow+0x9b6>
 8023658:	f001 0101 	and.w	r1, r1, #1
 802365c:	f1c1 0b02 	rsb	fp, r1, #2
 8023660:	4b4b      	ldr	r3, [pc, #300]	; (8023790 <__ieee754_pow+0x218>)
 8023662:	4598      	cmp	r8, r3
 8023664:	d118      	bne.n	8023698 <__ieee754_pow+0x120>
 8023666:	f1b9 0f00 	cmp.w	r9, #0
 802366a:	f280 845c 	bge.w	8023f26 <__ieee754_pow+0x9ae>
 802366e:	4948      	ldr	r1, [pc, #288]	; (8023790 <__ieee754_pow+0x218>)
 8023670:	4632      	mov	r2, r6
 8023672:	463b      	mov	r3, r7
 8023674:	2000      	movs	r0, #0
 8023676:	f7dd f8fd 	bl	8000874 <__aeabi_ddiv>
 802367a:	e7dd      	b.n	8023638 <__ieee754_pow+0xc0>
 802367c:	f04f 0b02 	mov.w	fp, #2
 8023680:	e7c4      	b.n	802360c <__ieee754_pow+0x94>
 8023682:	f04f 0b00 	mov.w	fp, #0
 8023686:	e7c1      	b.n	802360c <__ieee754_pow+0x94>
 8023688:	f1b9 0f00 	cmp.w	r9, #0
 802368c:	dad2      	bge.n	8023634 <__ieee754_pow+0xbc>
 802368e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8023692:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023696:	e7cf      	b.n	8023638 <__ieee754_pow+0xc0>
 8023698:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802369c:	d106      	bne.n	80236ac <__ieee754_pow+0x134>
 802369e:	4632      	mov	r2, r6
 80236a0:	463b      	mov	r3, r7
 80236a2:	4610      	mov	r0, r2
 80236a4:	4619      	mov	r1, r3
 80236a6:	f7dc ffbb 	bl	8000620 <__aeabi_dmul>
 80236aa:	e7c5      	b.n	8023638 <__ieee754_pow+0xc0>
 80236ac:	4b39      	ldr	r3, [pc, #228]	; (8023794 <__ieee754_pow+0x21c>)
 80236ae:	4599      	cmp	r9, r3
 80236b0:	d10a      	bne.n	80236c8 <__ieee754_pow+0x150>
 80236b2:	2d00      	cmp	r5, #0
 80236b4:	db08      	blt.n	80236c8 <__ieee754_pow+0x150>
 80236b6:	ec47 6b10 	vmov	d0, r6, r7
 80236ba:	b011      	add	sp, #68	; 0x44
 80236bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236c0:	f000 bc6c 	b.w	8023f9c <__ieee754_sqrt>
 80236c4:	f04f 0b00 	mov.w	fp, #0
 80236c8:	ec47 6b10 	vmov	d0, r6, r7
 80236cc:	f000 fd5d 	bl	802418a <fabs>
 80236d0:	ec51 0b10 	vmov	r0, r1, d0
 80236d4:	f1ba 0f00 	cmp.w	sl, #0
 80236d8:	d127      	bne.n	802372a <__ieee754_pow+0x1b2>
 80236da:	b124      	cbz	r4, 80236e6 <__ieee754_pow+0x16e>
 80236dc:	4b2c      	ldr	r3, [pc, #176]	; (8023790 <__ieee754_pow+0x218>)
 80236de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80236e2:	429a      	cmp	r2, r3
 80236e4:	d121      	bne.n	802372a <__ieee754_pow+0x1b2>
 80236e6:	f1b9 0f00 	cmp.w	r9, #0
 80236ea:	da05      	bge.n	80236f8 <__ieee754_pow+0x180>
 80236ec:	4602      	mov	r2, r0
 80236ee:	460b      	mov	r3, r1
 80236f0:	2000      	movs	r0, #0
 80236f2:	4927      	ldr	r1, [pc, #156]	; (8023790 <__ieee754_pow+0x218>)
 80236f4:	f7dd f8be 	bl	8000874 <__aeabi_ddiv>
 80236f8:	2d00      	cmp	r5, #0
 80236fa:	da9d      	bge.n	8023638 <__ieee754_pow+0xc0>
 80236fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023700:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8023704:	ea54 030b 	orrs.w	r3, r4, fp
 8023708:	d108      	bne.n	802371c <__ieee754_pow+0x1a4>
 802370a:	4602      	mov	r2, r0
 802370c:	460b      	mov	r3, r1
 802370e:	4610      	mov	r0, r2
 8023710:	4619      	mov	r1, r3
 8023712:	f7dc fdd1 	bl	80002b8 <__aeabi_dsub>
 8023716:	4602      	mov	r2, r0
 8023718:	460b      	mov	r3, r1
 802371a:	e7ac      	b.n	8023676 <__ieee754_pow+0xfe>
 802371c:	f1bb 0f01 	cmp.w	fp, #1
 8023720:	d18a      	bne.n	8023638 <__ieee754_pow+0xc0>
 8023722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023726:	4619      	mov	r1, r3
 8023728:	e786      	b.n	8023638 <__ieee754_pow+0xc0>
 802372a:	0fed      	lsrs	r5, r5, #31
 802372c:	1e6b      	subs	r3, r5, #1
 802372e:	930d      	str	r3, [sp, #52]	; 0x34
 8023730:	ea5b 0303 	orrs.w	r3, fp, r3
 8023734:	d102      	bne.n	802373c <__ieee754_pow+0x1c4>
 8023736:	4632      	mov	r2, r6
 8023738:	463b      	mov	r3, r7
 802373a:	e7e8      	b.n	802370e <__ieee754_pow+0x196>
 802373c:	4b16      	ldr	r3, [pc, #88]	; (8023798 <__ieee754_pow+0x220>)
 802373e:	4598      	cmp	r8, r3
 8023740:	f340 80fe 	ble.w	8023940 <__ieee754_pow+0x3c8>
 8023744:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023748:	4598      	cmp	r8, r3
 802374a:	dd0a      	ble.n	8023762 <__ieee754_pow+0x1ea>
 802374c:	4b0f      	ldr	r3, [pc, #60]	; (802378c <__ieee754_pow+0x214>)
 802374e:	429c      	cmp	r4, r3
 8023750:	dc0d      	bgt.n	802376e <__ieee754_pow+0x1f6>
 8023752:	f1b9 0f00 	cmp.w	r9, #0
 8023756:	f6bf af6d 	bge.w	8023634 <__ieee754_pow+0xbc>
 802375a:	a307      	add	r3, pc, #28	; (adr r3, 8023778 <__ieee754_pow+0x200>)
 802375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023760:	e79f      	b.n	80236a2 <__ieee754_pow+0x12a>
 8023762:	4b0e      	ldr	r3, [pc, #56]	; (802379c <__ieee754_pow+0x224>)
 8023764:	429c      	cmp	r4, r3
 8023766:	ddf4      	ble.n	8023752 <__ieee754_pow+0x1da>
 8023768:	4b09      	ldr	r3, [pc, #36]	; (8023790 <__ieee754_pow+0x218>)
 802376a:	429c      	cmp	r4, r3
 802376c:	dd18      	ble.n	80237a0 <__ieee754_pow+0x228>
 802376e:	f1b9 0f00 	cmp.w	r9, #0
 8023772:	dcf2      	bgt.n	802375a <__ieee754_pow+0x1e2>
 8023774:	e75e      	b.n	8023634 <__ieee754_pow+0xbc>
 8023776:	bf00      	nop
 8023778:	8800759c 	.word	0x8800759c
 802377c:	7e37e43c 	.word	0x7e37e43c
 8023780:	7ff00000 	.word	0x7ff00000
 8023784:	080312f1 	.word	0x080312f1
 8023788:	433fffff 	.word	0x433fffff
 802378c:	3fefffff 	.word	0x3fefffff
 8023790:	3ff00000 	.word	0x3ff00000
 8023794:	3fe00000 	.word	0x3fe00000
 8023798:	41e00000 	.word	0x41e00000
 802379c:	3feffffe 	.word	0x3feffffe
 80237a0:	2200      	movs	r2, #0
 80237a2:	4b63      	ldr	r3, [pc, #396]	; (8023930 <__ieee754_pow+0x3b8>)
 80237a4:	f7dc fd88 	bl	80002b8 <__aeabi_dsub>
 80237a8:	a355      	add	r3, pc, #340	; (adr r3, 8023900 <__ieee754_pow+0x388>)
 80237aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237ae:	4604      	mov	r4, r0
 80237b0:	460d      	mov	r5, r1
 80237b2:	f7dc ff35 	bl	8000620 <__aeabi_dmul>
 80237b6:	a354      	add	r3, pc, #336	; (adr r3, 8023908 <__ieee754_pow+0x390>)
 80237b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237bc:	4606      	mov	r6, r0
 80237be:	460f      	mov	r7, r1
 80237c0:	4620      	mov	r0, r4
 80237c2:	4629      	mov	r1, r5
 80237c4:	f7dc ff2c 	bl	8000620 <__aeabi_dmul>
 80237c8:	2200      	movs	r2, #0
 80237ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80237ce:	4b59      	ldr	r3, [pc, #356]	; (8023934 <__ieee754_pow+0x3bc>)
 80237d0:	4620      	mov	r0, r4
 80237d2:	4629      	mov	r1, r5
 80237d4:	f7dc ff24 	bl	8000620 <__aeabi_dmul>
 80237d8:	4602      	mov	r2, r0
 80237da:	460b      	mov	r3, r1
 80237dc:	a14c      	add	r1, pc, #304	; (adr r1, 8023910 <__ieee754_pow+0x398>)
 80237de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80237e2:	f7dc fd69 	bl	80002b8 <__aeabi_dsub>
 80237e6:	4622      	mov	r2, r4
 80237e8:	462b      	mov	r3, r5
 80237ea:	f7dc ff19 	bl	8000620 <__aeabi_dmul>
 80237ee:	4602      	mov	r2, r0
 80237f0:	460b      	mov	r3, r1
 80237f2:	2000      	movs	r0, #0
 80237f4:	4950      	ldr	r1, [pc, #320]	; (8023938 <__ieee754_pow+0x3c0>)
 80237f6:	f7dc fd5f 	bl	80002b8 <__aeabi_dsub>
 80237fa:	4622      	mov	r2, r4
 80237fc:	462b      	mov	r3, r5
 80237fe:	4680      	mov	r8, r0
 8023800:	4689      	mov	r9, r1
 8023802:	4620      	mov	r0, r4
 8023804:	4629      	mov	r1, r5
 8023806:	f7dc ff0b 	bl	8000620 <__aeabi_dmul>
 802380a:	4602      	mov	r2, r0
 802380c:	460b      	mov	r3, r1
 802380e:	4640      	mov	r0, r8
 8023810:	4649      	mov	r1, r9
 8023812:	f7dc ff05 	bl	8000620 <__aeabi_dmul>
 8023816:	a340      	add	r3, pc, #256	; (adr r3, 8023918 <__ieee754_pow+0x3a0>)
 8023818:	e9d3 2300 	ldrd	r2, r3, [r3]
 802381c:	f7dc ff00 	bl	8000620 <__aeabi_dmul>
 8023820:	4602      	mov	r2, r0
 8023822:	460b      	mov	r3, r1
 8023824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023828:	f7dc fd46 	bl	80002b8 <__aeabi_dsub>
 802382c:	4602      	mov	r2, r0
 802382e:	460b      	mov	r3, r1
 8023830:	4604      	mov	r4, r0
 8023832:	460d      	mov	r5, r1
 8023834:	4630      	mov	r0, r6
 8023836:	4639      	mov	r1, r7
 8023838:	f7dc fd40 	bl	80002bc <__adddf3>
 802383c:	2000      	movs	r0, #0
 802383e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023842:	4632      	mov	r2, r6
 8023844:	463b      	mov	r3, r7
 8023846:	f7dc fd37 	bl	80002b8 <__aeabi_dsub>
 802384a:	4602      	mov	r2, r0
 802384c:	460b      	mov	r3, r1
 802384e:	4620      	mov	r0, r4
 8023850:	4629      	mov	r1, r5
 8023852:	f7dc fd31 	bl	80002b8 <__aeabi_dsub>
 8023856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023858:	f10b 33ff 	add.w	r3, fp, #4294967295
 802385c:	4313      	orrs	r3, r2
 802385e:	4606      	mov	r6, r0
 8023860:	460f      	mov	r7, r1
 8023862:	f040 81eb 	bne.w	8023c3c <__ieee754_pow+0x6c4>
 8023866:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8023920 <__ieee754_pow+0x3a8>
 802386a:	e9dd 4500 	ldrd	r4, r5, [sp]
 802386e:	2400      	movs	r4, #0
 8023870:	4622      	mov	r2, r4
 8023872:	462b      	mov	r3, r5
 8023874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023878:	ed8d 7b02 	vstr	d7, [sp, #8]
 802387c:	f7dc fd1c 	bl	80002b8 <__aeabi_dsub>
 8023880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023884:	f7dc fecc 	bl	8000620 <__aeabi_dmul>
 8023888:	e9dd 2300 	ldrd	r2, r3, [sp]
 802388c:	4680      	mov	r8, r0
 802388e:	4689      	mov	r9, r1
 8023890:	4630      	mov	r0, r6
 8023892:	4639      	mov	r1, r7
 8023894:	f7dc fec4 	bl	8000620 <__aeabi_dmul>
 8023898:	4602      	mov	r2, r0
 802389a:	460b      	mov	r3, r1
 802389c:	4640      	mov	r0, r8
 802389e:	4649      	mov	r1, r9
 80238a0:	f7dc fd0c 	bl	80002bc <__adddf3>
 80238a4:	4622      	mov	r2, r4
 80238a6:	462b      	mov	r3, r5
 80238a8:	4680      	mov	r8, r0
 80238aa:	4689      	mov	r9, r1
 80238ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80238b0:	f7dc feb6 	bl	8000620 <__aeabi_dmul>
 80238b4:	460b      	mov	r3, r1
 80238b6:	4604      	mov	r4, r0
 80238b8:	460d      	mov	r5, r1
 80238ba:	4602      	mov	r2, r0
 80238bc:	4649      	mov	r1, r9
 80238be:	4640      	mov	r0, r8
 80238c0:	e9cd 4500 	strd	r4, r5, [sp]
 80238c4:	f7dc fcfa 	bl	80002bc <__adddf3>
 80238c8:	4b1c      	ldr	r3, [pc, #112]	; (802393c <__ieee754_pow+0x3c4>)
 80238ca:	4299      	cmp	r1, r3
 80238cc:	4606      	mov	r6, r0
 80238ce:	460f      	mov	r7, r1
 80238d0:	468b      	mov	fp, r1
 80238d2:	f340 82f7 	ble.w	8023ec4 <__ieee754_pow+0x94c>
 80238d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80238da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80238de:	4303      	orrs	r3, r0
 80238e0:	f000 81ea 	beq.w	8023cb8 <__ieee754_pow+0x740>
 80238e4:	a310      	add	r3, pc, #64	; (adr r3, 8023928 <__ieee754_pow+0x3b0>)
 80238e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80238ee:	f7dc fe97 	bl	8000620 <__aeabi_dmul>
 80238f2:	a30d      	add	r3, pc, #52	; (adr r3, 8023928 <__ieee754_pow+0x3b0>)
 80238f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238f8:	e6d5      	b.n	80236a6 <__ieee754_pow+0x12e>
 80238fa:	bf00      	nop
 80238fc:	f3af 8000 	nop.w
 8023900:	60000000 	.word	0x60000000
 8023904:	3ff71547 	.word	0x3ff71547
 8023908:	f85ddf44 	.word	0xf85ddf44
 802390c:	3e54ae0b 	.word	0x3e54ae0b
 8023910:	55555555 	.word	0x55555555
 8023914:	3fd55555 	.word	0x3fd55555
 8023918:	652b82fe 	.word	0x652b82fe
 802391c:	3ff71547 	.word	0x3ff71547
 8023920:	00000000 	.word	0x00000000
 8023924:	bff00000 	.word	0xbff00000
 8023928:	8800759c 	.word	0x8800759c
 802392c:	7e37e43c 	.word	0x7e37e43c
 8023930:	3ff00000 	.word	0x3ff00000
 8023934:	3fd00000 	.word	0x3fd00000
 8023938:	3fe00000 	.word	0x3fe00000
 802393c:	408fffff 	.word	0x408fffff
 8023940:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023944:	f04f 0200 	mov.w	r2, #0
 8023948:	da05      	bge.n	8023956 <__ieee754_pow+0x3de>
 802394a:	4bd3      	ldr	r3, [pc, #844]	; (8023c98 <__ieee754_pow+0x720>)
 802394c:	f7dc fe68 	bl	8000620 <__aeabi_dmul>
 8023950:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8023954:	460c      	mov	r4, r1
 8023956:	1523      	asrs	r3, r4, #20
 8023958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802395c:	4413      	add	r3, r2
 802395e:	9307      	str	r3, [sp, #28]
 8023960:	4bce      	ldr	r3, [pc, #824]	; (8023c9c <__ieee754_pow+0x724>)
 8023962:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023966:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802396a:	429c      	cmp	r4, r3
 802396c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023970:	dd08      	ble.n	8023984 <__ieee754_pow+0x40c>
 8023972:	4bcb      	ldr	r3, [pc, #812]	; (8023ca0 <__ieee754_pow+0x728>)
 8023974:	429c      	cmp	r4, r3
 8023976:	f340 815e 	ble.w	8023c36 <__ieee754_pow+0x6be>
 802397a:	9b07      	ldr	r3, [sp, #28]
 802397c:	3301      	adds	r3, #1
 802397e:	9307      	str	r3, [sp, #28]
 8023980:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023984:	f04f 0a00 	mov.w	sl, #0
 8023988:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802398c:	930c      	str	r3, [sp, #48]	; 0x30
 802398e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023990:	4bc4      	ldr	r3, [pc, #784]	; (8023ca4 <__ieee754_pow+0x72c>)
 8023992:	4413      	add	r3, r2
 8023994:	ed93 7b00 	vldr	d7, [r3]
 8023998:	4629      	mov	r1, r5
 802399a:	ec53 2b17 	vmov	r2, r3, d7
 802399e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80239a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80239a6:	f7dc fc87 	bl	80002b8 <__aeabi_dsub>
 80239aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80239ae:	4606      	mov	r6, r0
 80239b0:	460f      	mov	r7, r1
 80239b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80239b6:	f7dc fc81 	bl	80002bc <__adddf3>
 80239ba:	4602      	mov	r2, r0
 80239bc:	460b      	mov	r3, r1
 80239be:	2000      	movs	r0, #0
 80239c0:	49b9      	ldr	r1, [pc, #740]	; (8023ca8 <__ieee754_pow+0x730>)
 80239c2:	f7dc ff57 	bl	8000874 <__aeabi_ddiv>
 80239c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80239ca:	4602      	mov	r2, r0
 80239cc:	460b      	mov	r3, r1
 80239ce:	4630      	mov	r0, r6
 80239d0:	4639      	mov	r1, r7
 80239d2:	f7dc fe25 	bl	8000620 <__aeabi_dmul>
 80239d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80239da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80239de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80239e2:	2300      	movs	r3, #0
 80239e4:	9302      	str	r3, [sp, #8]
 80239e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80239ea:	106d      	asrs	r5, r5, #1
 80239ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80239f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80239f4:	2200      	movs	r2, #0
 80239f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80239fa:	4640      	mov	r0, r8
 80239fc:	4649      	mov	r1, r9
 80239fe:	4614      	mov	r4, r2
 8023a00:	461d      	mov	r5, r3
 8023a02:	f7dc fe0d 	bl	8000620 <__aeabi_dmul>
 8023a06:	4602      	mov	r2, r0
 8023a08:	460b      	mov	r3, r1
 8023a0a:	4630      	mov	r0, r6
 8023a0c:	4639      	mov	r1, r7
 8023a0e:	f7dc fc53 	bl	80002b8 <__aeabi_dsub>
 8023a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023a16:	4606      	mov	r6, r0
 8023a18:	460f      	mov	r7, r1
 8023a1a:	4620      	mov	r0, r4
 8023a1c:	4629      	mov	r1, r5
 8023a1e:	f7dc fc4b 	bl	80002b8 <__aeabi_dsub>
 8023a22:	4602      	mov	r2, r0
 8023a24:	460b      	mov	r3, r1
 8023a26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023a2a:	f7dc fc45 	bl	80002b8 <__aeabi_dsub>
 8023a2e:	4642      	mov	r2, r8
 8023a30:	464b      	mov	r3, r9
 8023a32:	f7dc fdf5 	bl	8000620 <__aeabi_dmul>
 8023a36:	4602      	mov	r2, r0
 8023a38:	460b      	mov	r3, r1
 8023a3a:	4630      	mov	r0, r6
 8023a3c:	4639      	mov	r1, r7
 8023a3e:	f7dc fc3b 	bl	80002b8 <__aeabi_dsub>
 8023a42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8023a46:	f7dc fdeb 	bl	8000620 <__aeabi_dmul>
 8023a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023a4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023a52:	4610      	mov	r0, r2
 8023a54:	4619      	mov	r1, r3
 8023a56:	f7dc fde3 	bl	8000620 <__aeabi_dmul>
 8023a5a:	a37b      	add	r3, pc, #492	; (adr r3, 8023c48 <__ieee754_pow+0x6d0>)
 8023a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a60:	4604      	mov	r4, r0
 8023a62:	460d      	mov	r5, r1
 8023a64:	f7dc fddc 	bl	8000620 <__aeabi_dmul>
 8023a68:	a379      	add	r3, pc, #484	; (adr r3, 8023c50 <__ieee754_pow+0x6d8>)
 8023a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a6e:	f7dc fc25 	bl	80002bc <__adddf3>
 8023a72:	4622      	mov	r2, r4
 8023a74:	462b      	mov	r3, r5
 8023a76:	f7dc fdd3 	bl	8000620 <__aeabi_dmul>
 8023a7a:	a377      	add	r3, pc, #476	; (adr r3, 8023c58 <__ieee754_pow+0x6e0>)
 8023a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a80:	f7dc fc1c 	bl	80002bc <__adddf3>
 8023a84:	4622      	mov	r2, r4
 8023a86:	462b      	mov	r3, r5
 8023a88:	f7dc fdca 	bl	8000620 <__aeabi_dmul>
 8023a8c:	a374      	add	r3, pc, #464	; (adr r3, 8023c60 <__ieee754_pow+0x6e8>)
 8023a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a92:	f7dc fc13 	bl	80002bc <__adddf3>
 8023a96:	4622      	mov	r2, r4
 8023a98:	462b      	mov	r3, r5
 8023a9a:	f7dc fdc1 	bl	8000620 <__aeabi_dmul>
 8023a9e:	a372      	add	r3, pc, #456	; (adr r3, 8023c68 <__ieee754_pow+0x6f0>)
 8023aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023aa4:	f7dc fc0a 	bl	80002bc <__adddf3>
 8023aa8:	4622      	mov	r2, r4
 8023aaa:	462b      	mov	r3, r5
 8023aac:	f7dc fdb8 	bl	8000620 <__aeabi_dmul>
 8023ab0:	a36f      	add	r3, pc, #444	; (adr r3, 8023c70 <__ieee754_pow+0x6f8>)
 8023ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ab6:	f7dc fc01 	bl	80002bc <__adddf3>
 8023aba:	4622      	mov	r2, r4
 8023abc:	4606      	mov	r6, r0
 8023abe:	460f      	mov	r7, r1
 8023ac0:	462b      	mov	r3, r5
 8023ac2:	4620      	mov	r0, r4
 8023ac4:	4629      	mov	r1, r5
 8023ac6:	f7dc fdab 	bl	8000620 <__aeabi_dmul>
 8023aca:	4602      	mov	r2, r0
 8023acc:	460b      	mov	r3, r1
 8023ace:	4630      	mov	r0, r6
 8023ad0:	4639      	mov	r1, r7
 8023ad2:	f7dc fda5 	bl	8000620 <__aeabi_dmul>
 8023ad6:	4642      	mov	r2, r8
 8023ad8:	4604      	mov	r4, r0
 8023ada:	460d      	mov	r5, r1
 8023adc:	464b      	mov	r3, r9
 8023ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023ae2:	f7dc fbeb 	bl	80002bc <__adddf3>
 8023ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023aea:	f7dc fd99 	bl	8000620 <__aeabi_dmul>
 8023aee:	4622      	mov	r2, r4
 8023af0:	462b      	mov	r3, r5
 8023af2:	f7dc fbe3 	bl	80002bc <__adddf3>
 8023af6:	4642      	mov	r2, r8
 8023af8:	4606      	mov	r6, r0
 8023afa:	460f      	mov	r7, r1
 8023afc:	464b      	mov	r3, r9
 8023afe:	4640      	mov	r0, r8
 8023b00:	4649      	mov	r1, r9
 8023b02:	f7dc fd8d 	bl	8000620 <__aeabi_dmul>
 8023b06:	2200      	movs	r2, #0
 8023b08:	4b68      	ldr	r3, [pc, #416]	; (8023cac <__ieee754_pow+0x734>)
 8023b0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8023b0e:	f7dc fbd5 	bl	80002bc <__adddf3>
 8023b12:	4632      	mov	r2, r6
 8023b14:	463b      	mov	r3, r7
 8023b16:	f7dc fbd1 	bl	80002bc <__adddf3>
 8023b1a:	9802      	ldr	r0, [sp, #8]
 8023b1c:	460d      	mov	r5, r1
 8023b1e:	4604      	mov	r4, r0
 8023b20:	4602      	mov	r2, r0
 8023b22:	460b      	mov	r3, r1
 8023b24:	4640      	mov	r0, r8
 8023b26:	4649      	mov	r1, r9
 8023b28:	f7dc fd7a 	bl	8000620 <__aeabi_dmul>
 8023b2c:	2200      	movs	r2, #0
 8023b2e:	4680      	mov	r8, r0
 8023b30:	4689      	mov	r9, r1
 8023b32:	4b5e      	ldr	r3, [pc, #376]	; (8023cac <__ieee754_pow+0x734>)
 8023b34:	4620      	mov	r0, r4
 8023b36:	4629      	mov	r1, r5
 8023b38:	f7dc fbbe 	bl	80002b8 <__aeabi_dsub>
 8023b3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023b40:	f7dc fbba 	bl	80002b8 <__aeabi_dsub>
 8023b44:	4602      	mov	r2, r0
 8023b46:	460b      	mov	r3, r1
 8023b48:	4630      	mov	r0, r6
 8023b4a:	4639      	mov	r1, r7
 8023b4c:	f7dc fbb4 	bl	80002b8 <__aeabi_dsub>
 8023b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023b54:	f7dc fd64 	bl	8000620 <__aeabi_dmul>
 8023b58:	4622      	mov	r2, r4
 8023b5a:	4606      	mov	r6, r0
 8023b5c:	460f      	mov	r7, r1
 8023b5e:	462b      	mov	r3, r5
 8023b60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023b64:	f7dc fd5c 	bl	8000620 <__aeabi_dmul>
 8023b68:	4602      	mov	r2, r0
 8023b6a:	460b      	mov	r3, r1
 8023b6c:	4630      	mov	r0, r6
 8023b6e:	4639      	mov	r1, r7
 8023b70:	f7dc fba4 	bl	80002bc <__adddf3>
 8023b74:	4606      	mov	r6, r0
 8023b76:	460f      	mov	r7, r1
 8023b78:	4602      	mov	r2, r0
 8023b7a:	460b      	mov	r3, r1
 8023b7c:	4640      	mov	r0, r8
 8023b7e:	4649      	mov	r1, r9
 8023b80:	f7dc fb9c 	bl	80002bc <__adddf3>
 8023b84:	9802      	ldr	r0, [sp, #8]
 8023b86:	a33c      	add	r3, pc, #240	; (adr r3, 8023c78 <__ieee754_pow+0x700>)
 8023b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b8c:	4604      	mov	r4, r0
 8023b8e:	460d      	mov	r5, r1
 8023b90:	f7dc fd46 	bl	8000620 <__aeabi_dmul>
 8023b94:	4642      	mov	r2, r8
 8023b96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023b9a:	464b      	mov	r3, r9
 8023b9c:	4620      	mov	r0, r4
 8023b9e:	4629      	mov	r1, r5
 8023ba0:	f7dc fb8a 	bl	80002b8 <__aeabi_dsub>
 8023ba4:	4602      	mov	r2, r0
 8023ba6:	460b      	mov	r3, r1
 8023ba8:	4630      	mov	r0, r6
 8023baa:	4639      	mov	r1, r7
 8023bac:	f7dc fb84 	bl	80002b8 <__aeabi_dsub>
 8023bb0:	a333      	add	r3, pc, #204	; (adr r3, 8023c80 <__ieee754_pow+0x708>)
 8023bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bb6:	f7dc fd33 	bl	8000620 <__aeabi_dmul>
 8023bba:	a333      	add	r3, pc, #204	; (adr r3, 8023c88 <__ieee754_pow+0x710>)
 8023bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bc0:	4606      	mov	r6, r0
 8023bc2:	460f      	mov	r7, r1
 8023bc4:	4620      	mov	r0, r4
 8023bc6:	4629      	mov	r1, r5
 8023bc8:	f7dc fd2a 	bl	8000620 <__aeabi_dmul>
 8023bcc:	4602      	mov	r2, r0
 8023bce:	460b      	mov	r3, r1
 8023bd0:	4630      	mov	r0, r6
 8023bd2:	4639      	mov	r1, r7
 8023bd4:	f7dc fb72 	bl	80002bc <__adddf3>
 8023bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023bda:	4b35      	ldr	r3, [pc, #212]	; (8023cb0 <__ieee754_pow+0x738>)
 8023bdc:	4413      	add	r3, r2
 8023bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023be2:	f7dc fb6b 	bl	80002bc <__adddf3>
 8023be6:	4604      	mov	r4, r0
 8023be8:	9807      	ldr	r0, [sp, #28]
 8023bea:	460d      	mov	r5, r1
 8023bec:	f7dc fcb2 	bl	8000554 <__aeabi_i2d>
 8023bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023bf2:	4b30      	ldr	r3, [pc, #192]	; (8023cb4 <__ieee754_pow+0x73c>)
 8023bf4:	4413      	add	r3, r2
 8023bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023bfa:	4606      	mov	r6, r0
 8023bfc:	460f      	mov	r7, r1
 8023bfe:	4622      	mov	r2, r4
 8023c00:	462b      	mov	r3, r5
 8023c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023c06:	f7dc fb59 	bl	80002bc <__adddf3>
 8023c0a:	4642      	mov	r2, r8
 8023c0c:	464b      	mov	r3, r9
 8023c0e:	f7dc fb55 	bl	80002bc <__adddf3>
 8023c12:	4632      	mov	r2, r6
 8023c14:	463b      	mov	r3, r7
 8023c16:	f7dc fb51 	bl	80002bc <__adddf3>
 8023c1a:	9802      	ldr	r0, [sp, #8]
 8023c1c:	4632      	mov	r2, r6
 8023c1e:	463b      	mov	r3, r7
 8023c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023c24:	f7dc fb48 	bl	80002b8 <__aeabi_dsub>
 8023c28:	4642      	mov	r2, r8
 8023c2a:	464b      	mov	r3, r9
 8023c2c:	f7dc fb44 	bl	80002b8 <__aeabi_dsub>
 8023c30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023c34:	e607      	b.n	8023846 <__ieee754_pow+0x2ce>
 8023c36:	f04f 0a01 	mov.w	sl, #1
 8023c3a:	e6a5      	b.n	8023988 <__ieee754_pow+0x410>
 8023c3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8023c90 <__ieee754_pow+0x718>
 8023c40:	e613      	b.n	802386a <__ieee754_pow+0x2f2>
 8023c42:	bf00      	nop
 8023c44:	f3af 8000 	nop.w
 8023c48:	4a454eef 	.word	0x4a454eef
 8023c4c:	3fca7e28 	.word	0x3fca7e28
 8023c50:	93c9db65 	.word	0x93c9db65
 8023c54:	3fcd864a 	.word	0x3fcd864a
 8023c58:	a91d4101 	.word	0xa91d4101
 8023c5c:	3fd17460 	.word	0x3fd17460
 8023c60:	518f264d 	.word	0x518f264d
 8023c64:	3fd55555 	.word	0x3fd55555
 8023c68:	db6fabff 	.word	0xdb6fabff
 8023c6c:	3fdb6db6 	.word	0x3fdb6db6
 8023c70:	33333303 	.word	0x33333303
 8023c74:	3fe33333 	.word	0x3fe33333
 8023c78:	e0000000 	.word	0xe0000000
 8023c7c:	3feec709 	.word	0x3feec709
 8023c80:	dc3a03fd 	.word	0xdc3a03fd
 8023c84:	3feec709 	.word	0x3feec709
 8023c88:	145b01f5 	.word	0x145b01f5
 8023c8c:	be3e2fe0 	.word	0xbe3e2fe0
 8023c90:	00000000 	.word	0x00000000
 8023c94:	3ff00000 	.word	0x3ff00000
 8023c98:	43400000 	.word	0x43400000
 8023c9c:	0003988e 	.word	0x0003988e
 8023ca0:	000bb679 	.word	0x000bb679
 8023ca4:	08031688 	.word	0x08031688
 8023ca8:	3ff00000 	.word	0x3ff00000
 8023cac:	40080000 	.word	0x40080000
 8023cb0:	080316a8 	.word	0x080316a8
 8023cb4:	08031698 	.word	0x08031698
 8023cb8:	a3b6      	add	r3, pc, #728	; (adr r3, 8023f94 <__ieee754_pow+0xa1c>)
 8023cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cbe:	4640      	mov	r0, r8
 8023cc0:	4649      	mov	r1, r9
 8023cc2:	f7dc fafb 	bl	80002bc <__adddf3>
 8023cc6:	4622      	mov	r2, r4
 8023cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023ccc:	462b      	mov	r3, r5
 8023cce:	4630      	mov	r0, r6
 8023cd0:	4639      	mov	r1, r7
 8023cd2:	f7dc faf1 	bl	80002b8 <__aeabi_dsub>
 8023cd6:	4602      	mov	r2, r0
 8023cd8:	460b      	mov	r3, r1
 8023cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023cde:	f7dc ff2f 	bl	8000b40 <__aeabi_dcmpgt>
 8023ce2:	2800      	cmp	r0, #0
 8023ce4:	f47f adfe 	bne.w	80238e4 <__ieee754_pow+0x36c>
 8023ce8:	4aa5      	ldr	r2, [pc, #660]	; (8023f80 <__ieee754_pow+0xa08>)
 8023cea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023cee:	4293      	cmp	r3, r2
 8023cf0:	f340 810c 	ble.w	8023f0c <__ieee754_pow+0x994>
 8023cf4:	151b      	asrs	r3, r3, #20
 8023cf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023cfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023cfe:	fa4a f303 	asr.w	r3, sl, r3
 8023d02:	445b      	add	r3, fp
 8023d04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023d08:	4e9e      	ldr	r6, [pc, #632]	; (8023f84 <__ieee754_pow+0xa0c>)
 8023d0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023d0e:	4116      	asrs	r6, r2
 8023d10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023d14:	2000      	movs	r0, #0
 8023d16:	ea23 0106 	bic.w	r1, r3, r6
 8023d1a:	f1c2 0214 	rsb	r2, r2, #20
 8023d1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8023d22:	fa4a fa02 	asr.w	sl, sl, r2
 8023d26:	f1bb 0f00 	cmp.w	fp, #0
 8023d2a:	4602      	mov	r2, r0
 8023d2c:	460b      	mov	r3, r1
 8023d2e:	4620      	mov	r0, r4
 8023d30:	4629      	mov	r1, r5
 8023d32:	bfb8      	it	lt
 8023d34:	f1ca 0a00 	rsblt	sl, sl, #0
 8023d38:	f7dc fabe 	bl	80002b8 <__aeabi_dsub>
 8023d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8023d40:	4642      	mov	r2, r8
 8023d42:	464b      	mov	r3, r9
 8023d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023d48:	f7dc fab8 	bl	80002bc <__adddf3>
 8023d4c:	2000      	movs	r0, #0
 8023d4e:	a37a      	add	r3, pc, #488	; (adr r3, 8023f38 <__ieee754_pow+0x9c0>)
 8023d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d54:	4604      	mov	r4, r0
 8023d56:	460d      	mov	r5, r1
 8023d58:	f7dc fc62 	bl	8000620 <__aeabi_dmul>
 8023d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023d60:	4606      	mov	r6, r0
 8023d62:	460f      	mov	r7, r1
 8023d64:	4620      	mov	r0, r4
 8023d66:	4629      	mov	r1, r5
 8023d68:	f7dc faa6 	bl	80002b8 <__aeabi_dsub>
 8023d6c:	4602      	mov	r2, r0
 8023d6e:	460b      	mov	r3, r1
 8023d70:	4640      	mov	r0, r8
 8023d72:	4649      	mov	r1, r9
 8023d74:	f7dc faa0 	bl	80002b8 <__aeabi_dsub>
 8023d78:	a371      	add	r3, pc, #452	; (adr r3, 8023f40 <__ieee754_pow+0x9c8>)
 8023d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d7e:	f7dc fc4f 	bl	8000620 <__aeabi_dmul>
 8023d82:	a371      	add	r3, pc, #452	; (adr r3, 8023f48 <__ieee754_pow+0x9d0>)
 8023d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d88:	4680      	mov	r8, r0
 8023d8a:	4689      	mov	r9, r1
 8023d8c:	4620      	mov	r0, r4
 8023d8e:	4629      	mov	r1, r5
 8023d90:	f7dc fc46 	bl	8000620 <__aeabi_dmul>
 8023d94:	4602      	mov	r2, r0
 8023d96:	460b      	mov	r3, r1
 8023d98:	4640      	mov	r0, r8
 8023d9a:	4649      	mov	r1, r9
 8023d9c:	f7dc fa8e 	bl	80002bc <__adddf3>
 8023da0:	4604      	mov	r4, r0
 8023da2:	460d      	mov	r5, r1
 8023da4:	4602      	mov	r2, r0
 8023da6:	460b      	mov	r3, r1
 8023da8:	4630      	mov	r0, r6
 8023daa:	4639      	mov	r1, r7
 8023dac:	f7dc fa86 	bl	80002bc <__adddf3>
 8023db0:	4632      	mov	r2, r6
 8023db2:	463b      	mov	r3, r7
 8023db4:	4680      	mov	r8, r0
 8023db6:	4689      	mov	r9, r1
 8023db8:	f7dc fa7e 	bl	80002b8 <__aeabi_dsub>
 8023dbc:	4602      	mov	r2, r0
 8023dbe:	460b      	mov	r3, r1
 8023dc0:	4620      	mov	r0, r4
 8023dc2:	4629      	mov	r1, r5
 8023dc4:	f7dc fa78 	bl	80002b8 <__aeabi_dsub>
 8023dc8:	4642      	mov	r2, r8
 8023dca:	4606      	mov	r6, r0
 8023dcc:	460f      	mov	r7, r1
 8023dce:	464b      	mov	r3, r9
 8023dd0:	4640      	mov	r0, r8
 8023dd2:	4649      	mov	r1, r9
 8023dd4:	f7dc fc24 	bl	8000620 <__aeabi_dmul>
 8023dd8:	a35d      	add	r3, pc, #372	; (adr r3, 8023f50 <__ieee754_pow+0x9d8>)
 8023dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dde:	4604      	mov	r4, r0
 8023de0:	460d      	mov	r5, r1
 8023de2:	f7dc fc1d 	bl	8000620 <__aeabi_dmul>
 8023de6:	a35c      	add	r3, pc, #368	; (adr r3, 8023f58 <__ieee754_pow+0x9e0>)
 8023de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dec:	f7dc fa64 	bl	80002b8 <__aeabi_dsub>
 8023df0:	4622      	mov	r2, r4
 8023df2:	462b      	mov	r3, r5
 8023df4:	f7dc fc14 	bl	8000620 <__aeabi_dmul>
 8023df8:	a359      	add	r3, pc, #356	; (adr r3, 8023f60 <__ieee754_pow+0x9e8>)
 8023dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dfe:	f7dc fa5d 	bl	80002bc <__adddf3>
 8023e02:	4622      	mov	r2, r4
 8023e04:	462b      	mov	r3, r5
 8023e06:	f7dc fc0b 	bl	8000620 <__aeabi_dmul>
 8023e0a:	a357      	add	r3, pc, #348	; (adr r3, 8023f68 <__ieee754_pow+0x9f0>)
 8023e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e10:	f7dc fa52 	bl	80002b8 <__aeabi_dsub>
 8023e14:	4622      	mov	r2, r4
 8023e16:	462b      	mov	r3, r5
 8023e18:	f7dc fc02 	bl	8000620 <__aeabi_dmul>
 8023e1c:	a354      	add	r3, pc, #336	; (adr r3, 8023f70 <__ieee754_pow+0x9f8>)
 8023e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e22:	f7dc fa4b 	bl	80002bc <__adddf3>
 8023e26:	4622      	mov	r2, r4
 8023e28:	462b      	mov	r3, r5
 8023e2a:	f7dc fbf9 	bl	8000620 <__aeabi_dmul>
 8023e2e:	4602      	mov	r2, r0
 8023e30:	460b      	mov	r3, r1
 8023e32:	4640      	mov	r0, r8
 8023e34:	4649      	mov	r1, r9
 8023e36:	f7dc fa3f 	bl	80002b8 <__aeabi_dsub>
 8023e3a:	4604      	mov	r4, r0
 8023e3c:	460d      	mov	r5, r1
 8023e3e:	4602      	mov	r2, r0
 8023e40:	460b      	mov	r3, r1
 8023e42:	4640      	mov	r0, r8
 8023e44:	4649      	mov	r1, r9
 8023e46:	f7dc fbeb 	bl	8000620 <__aeabi_dmul>
 8023e4a:	2200      	movs	r2, #0
 8023e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8023e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023e54:	4620      	mov	r0, r4
 8023e56:	4629      	mov	r1, r5
 8023e58:	f7dc fa2e 	bl	80002b8 <__aeabi_dsub>
 8023e5c:	4602      	mov	r2, r0
 8023e5e:	460b      	mov	r3, r1
 8023e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023e64:	f7dc fd06 	bl	8000874 <__aeabi_ddiv>
 8023e68:	4632      	mov	r2, r6
 8023e6a:	4604      	mov	r4, r0
 8023e6c:	460d      	mov	r5, r1
 8023e6e:	463b      	mov	r3, r7
 8023e70:	4640      	mov	r0, r8
 8023e72:	4649      	mov	r1, r9
 8023e74:	f7dc fbd4 	bl	8000620 <__aeabi_dmul>
 8023e78:	4632      	mov	r2, r6
 8023e7a:	463b      	mov	r3, r7
 8023e7c:	f7dc fa1e 	bl	80002bc <__adddf3>
 8023e80:	4602      	mov	r2, r0
 8023e82:	460b      	mov	r3, r1
 8023e84:	4620      	mov	r0, r4
 8023e86:	4629      	mov	r1, r5
 8023e88:	f7dc fa16 	bl	80002b8 <__aeabi_dsub>
 8023e8c:	4642      	mov	r2, r8
 8023e8e:	464b      	mov	r3, r9
 8023e90:	f7dc fa12 	bl	80002b8 <__aeabi_dsub>
 8023e94:	4602      	mov	r2, r0
 8023e96:	460b      	mov	r3, r1
 8023e98:	2000      	movs	r0, #0
 8023e9a:	493b      	ldr	r1, [pc, #236]	; (8023f88 <__ieee754_pow+0xa10>)
 8023e9c:	f7dc fa0c 	bl	80002b8 <__aeabi_dsub>
 8023ea0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8023ea4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023ea8:	4602      	mov	r2, r0
 8023eaa:	460b      	mov	r3, r1
 8023eac:	da31      	bge.n	8023f12 <__ieee754_pow+0x99a>
 8023eae:	4650      	mov	r0, sl
 8023eb0:	ec43 2b10 	vmov	d0, r2, r3
 8023eb4:	f000 fa0c 	bl	80242d0 <scalbn>
 8023eb8:	ec51 0b10 	vmov	r0, r1, d0
 8023ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023ec0:	f7ff bbf1 	b.w	80236a6 <__ieee754_pow+0x12e>
 8023ec4:	4b31      	ldr	r3, [pc, #196]	; (8023f8c <__ieee754_pow+0xa14>)
 8023ec6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023eca:	429e      	cmp	r6, r3
 8023ecc:	f77f af0c 	ble.w	8023ce8 <__ieee754_pow+0x770>
 8023ed0:	4b2f      	ldr	r3, [pc, #188]	; (8023f90 <__ieee754_pow+0xa18>)
 8023ed2:	440b      	add	r3, r1
 8023ed4:	4303      	orrs	r3, r0
 8023ed6:	d00b      	beq.n	8023ef0 <__ieee754_pow+0x978>
 8023ed8:	a327      	add	r3, pc, #156	; (adr r3, 8023f78 <__ieee754_pow+0xa00>)
 8023eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ee2:	f7dc fb9d 	bl	8000620 <__aeabi_dmul>
 8023ee6:	a324      	add	r3, pc, #144	; (adr r3, 8023f78 <__ieee754_pow+0xa00>)
 8023ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eec:	f7ff bbdb 	b.w	80236a6 <__ieee754_pow+0x12e>
 8023ef0:	4622      	mov	r2, r4
 8023ef2:	462b      	mov	r3, r5
 8023ef4:	f7dc f9e0 	bl	80002b8 <__aeabi_dsub>
 8023ef8:	4602      	mov	r2, r0
 8023efa:	460b      	mov	r3, r1
 8023efc:	4640      	mov	r0, r8
 8023efe:	4649      	mov	r1, r9
 8023f00:	f7dc fe0a 	bl	8000b18 <__aeabi_dcmple>
 8023f04:	2800      	cmp	r0, #0
 8023f06:	f43f aeef 	beq.w	8023ce8 <__ieee754_pow+0x770>
 8023f0a:	e7e5      	b.n	8023ed8 <__ieee754_pow+0x960>
 8023f0c:	f04f 0a00 	mov.w	sl, #0
 8023f10:	e716      	b.n	8023d40 <__ieee754_pow+0x7c8>
 8023f12:	4621      	mov	r1, r4
 8023f14:	e7d2      	b.n	8023ebc <__ieee754_pow+0x944>
 8023f16:	2000      	movs	r0, #0
 8023f18:	491b      	ldr	r1, [pc, #108]	; (8023f88 <__ieee754_pow+0xa10>)
 8023f1a:	f7ff bb8d 	b.w	8023638 <__ieee754_pow+0xc0>
 8023f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023f22:	f7ff bb89 	b.w	8023638 <__ieee754_pow+0xc0>
 8023f26:	4630      	mov	r0, r6
 8023f28:	4639      	mov	r1, r7
 8023f2a:	f7ff bb85 	b.w	8023638 <__ieee754_pow+0xc0>
 8023f2e:	4693      	mov	fp, r2
 8023f30:	f7ff bb96 	b.w	8023660 <__ieee754_pow+0xe8>
 8023f34:	f3af 8000 	nop.w
 8023f38:	00000000 	.word	0x00000000
 8023f3c:	3fe62e43 	.word	0x3fe62e43
 8023f40:	fefa39ef 	.word	0xfefa39ef
 8023f44:	3fe62e42 	.word	0x3fe62e42
 8023f48:	0ca86c39 	.word	0x0ca86c39
 8023f4c:	be205c61 	.word	0xbe205c61
 8023f50:	72bea4d0 	.word	0x72bea4d0
 8023f54:	3e663769 	.word	0x3e663769
 8023f58:	c5d26bf1 	.word	0xc5d26bf1
 8023f5c:	3ebbbd41 	.word	0x3ebbbd41
 8023f60:	af25de2c 	.word	0xaf25de2c
 8023f64:	3f11566a 	.word	0x3f11566a
 8023f68:	16bebd93 	.word	0x16bebd93
 8023f6c:	3f66c16c 	.word	0x3f66c16c
 8023f70:	5555553e 	.word	0x5555553e
 8023f74:	3fc55555 	.word	0x3fc55555
 8023f78:	c2f8f359 	.word	0xc2f8f359
 8023f7c:	01a56e1f 	.word	0x01a56e1f
 8023f80:	3fe00000 	.word	0x3fe00000
 8023f84:	000fffff 	.word	0x000fffff
 8023f88:	3ff00000 	.word	0x3ff00000
 8023f8c:	4090cbff 	.word	0x4090cbff
 8023f90:	3f6f3400 	.word	0x3f6f3400
 8023f94:	652b82fe 	.word	0x652b82fe
 8023f98:	3c971547 	.word	0x3c971547

08023f9c <__ieee754_sqrt>:
 8023f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023fa0:	ec55 4b10 	vmov	r4, r5, d0
 8023fa4:	4e54      	ldr	r6, [pc, #336]	; (80240f8 <__ieee754_sqrt+0x15c>)
 8023fa6:	43ae      	bics	r6, r5
 8023fa8:	ee10 0a10 	vmov	r0, s0
 8023fac:	462b      	mov	r3, r5
 8023fae:	462a      	mov	r2, r5
 8023fb0:	4621      	mov	r1, r4
 8023fb2:	d113      	bne.n	8023fdc <__ieee754_sqrt+0x40>
 8023fb4:	ee10 2a10 	vmov	r2, s0
 8023fb8:	462b      	mov	r3, r5
 8023fba:	ee10 0a10 	vmov	r0, s0
 8023fbe:	4629      	mov	r1, r5
 8023fc0:	f7dc fb2e 	bl	8000620 <__aeabi_dmul>
 8023fc4:	4602      	mov	r2, r0
 8023fc6:	460b      	mov	r3, r1
 8023fc8:	4620      	mov	r0, r4
 8023fca:	4629      	mov	r1, r5
 8023fcc:	f7dc f976 	bl	80002bc <__adddf3>
 8023fd0:	4604      	mov	r4, r0
 8023fd2:	460d      	mov	r5, r1
 8023fd4:	ec45 4b10 	vmov	d0, r4, r5
 8023fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023fdc:	2d00      	cmp	r5, #0
 8023fde:	dc10      	bgt.n	8024002 <__ieee754_sqrt+0x66>
 8023fe0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023fe4:	4330      	orrs	r0, r6
 8023fe6:	d0f5      	beq.n	8023fd4 <__ieee754_sqrt+0x38>
 8023fe8:	b15d      	cbz	r5, 8024002 <__ieee754_sqrt+0x66>
 8023fea:	ee10 2a10 	vmov	r2, s0
 8023fee:	462b      	mov	r3, r5
 8023ff0:	4620      	mov	r0, r4
 8023ff2:	4629      	mov	r1, r5
 8023ff4:	f7dc f960 	bl	80002b8 <__aeabi_dsub>
 8023ff8:	4602      	mov	r2, r0
 8023ffa:	460b      	mov	r3, r1
 8023ffc:	f7dc fc3a 	bl	8000874 <__aeabi_ddiv>
 8024000:	e7e6      	b.n	8023fd0 <__ieee754_sqrt+0x34>
 8024002:	151b      	asrs	r3, r3, #20
 8024004:	d10c      	bne.n	8024020 <__ieee754_sqrt+0x84>
 8024006:	2a00      	cmp	r2, #0
 8024008:	d06d      	beq.n	80240e6 <__ieee754_sqrt+0x14a>
 802400a:	2000      	movs	r0, #0
 802400c:	02d6      	lsls	r6, r2, #11
 802400e:	d56e      	bpl.n	80240ee <__ieee754_sqrt+0x152>
 8024010:	1e44      	subs	r4, r0, #1
 8024012:	1b1b      	subs	r3, r3, r4
 8024014:	f1c0 0420 	rsb	r4, r0, #32
 8024018:	fa21 f404 	lsr.w	r4, r1, r4
 802401c:	4322      	orrs	r2, r4
 802401e:	4081      	lsls	r1, r0
 8024020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024024:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8024028:	07dd      	lsls	r5, r3, #31
 802402a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 802402e:	bf42      	ittt	mi
 8024030:	0052      	lslmi	r2, r2, #1
 8024032:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8024036:	0049      	lslmi	r1, r1, #1
 8024038:	1058      	asrs	r0, r3, #1
 802403a:	2500      	movs	r5, #0
 802403c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8024040:	441a      	add	r2, r3
 8024042:	0049      	lsls	r1, r1, #1
 8024044:	2316      	movs	r3, #22
 8024046:	462c      	mov	r4, r5
 8024048:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 802404c:	19a7      	adds	r7, r4, r6
 802404e:	4297      	cmp	r7, r2
 8024050:	bfde      	ittt	le
 8024052:	1bd2      	suble	r2, r2, r7
 8024054:	19bc      	addle	r4, r7, r6
 8024056:	19ad      	addle	r5, r5, r6
 8024058:	0052      	lsls	r2, r2, #1
 802405a:	3b01      	subs	r3, #1
 802405c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8024060:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024064:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024068:	d1f0      	bne.n	802404c <__ieee754_sqrt+0xb0>
 802406a:	f04f 0e20 	mov.w	lr, #32
 802406e:	469c      	mov	ip, r3
 8024070:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8024074:	42a2      	cmp	r2, r4
 8024076:	eb06 070c 	add.w	r7, r6, ip
 802407a:	dc02      	bgt.n	8024082 <__ieee754_sqrt+0xe6>
 802407c:	d112      	bne.n	80240a4 <__ieee754_sqrt+0x108>
 802407e:	428f      	cmp	r7, r1
 8024080:	d810      	bhi.n	80240a4 <__ieee754_sqrt+0x108>
 8024082:	2f00      	cmp	r7, #0
 8024084:	eb07 0c06 	add.w	ip, r7, r6
 8024088:	da34      	bge.n	80240f4 <__ieee754_sqrt+0x158>
 802408a:	f1bc 0f00 	cmp.w	ip, #0
 802408e:	db31      	blt.n	80240f4 <__ieee754_sqrt+0x158>
 8024090:	f104 0801 	add.w	r8, r4, #1
 8024094:	1b12      	subs	r2, r2, r4
 8024096:	428f      	cmp	r7, r1
 8024098:	bf88      	it	hi
 802409a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802409e:	1bc9      	subs	r1, r1, r7
 80240a0:	4433      	add	r3, r6
 80240a2:	4644      	mov	r4, r8
 80240a4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80240a8:	f1be 0e01 	subs.w	lr, lr, #1
 80240ac:	443a      	add	r2, r7
 80240ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80240b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80240b6:	d1dd      	bne.n	8024074 <__ieee754_sqrt+0xd8>
 80240b8:	430a      	orrs	r2, r1
 80240ba:	d006      	beq.n	80240ca <__ieee754_sqrt+0x12e>
 80240bc:	1c5c      	adds	r4, r3, #1
 80240be:	bf13      	iteet	ne
 80240c0:	3301      	addne	r3, #1
 80240c2:	3501      	addeq	r5, #1
 80240c4:	4673      	moveq	r3, lr
 80240c6:	f023 0301 	bicne.w	r3, r3, #1
 80240ca:	106a      	asrs	r2, r5, #1
 80240cc:	085b      	lsrs	r3, r3, #1
 80240ce:	07e9      	lsls	r1, r5, #31
 80240d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80240d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80240d8:	bf48      	it	mi
 80240da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80240de:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80240e2:	461c      	mov	r4, r3
 80240e4:	e776      	b.n	8023fd4 <__ieee754_sqrt+0x38>
 80240e6:	0aca      	lsrs	r2, r1, #11
 80240e8:	3b15      	subs	r3, #21
 80240ea:	0549      	lsls	r1, r1, #21
 80240ec:	e78b      	b.n	8024006 <__ieee754_sqrt+0x6a>
 80240ee:	0052      	lsls	r2, r2, #1
 80240f0:	3001      	adds	r0, #1
 80240f2:	e78b      	b.n	802400c <__ieee754_sqrt+0x70>
 80240f4:	46a0      	mov	r8, r4
 80240f6:	e7cd      	b.n	8024094 <__ieee754_sqrt+0xf8>
 80240f8:	7ff00000 	.word	0x7ff00000

080240fc <__ieee754_sqrtf>:
 80240fc:	ee10 2a10 	vmov	r2, s0
 8024100:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024104:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024108:	b570      	push	{r4, r5, r6, lr}
 802410a:	d302      	bcc.n	8024112 <__ieee754_sqrtf+0x16>
 802410c:	eea0 0a00 	vfma.f32	s0, s0, s0
 8024110:	bd70      	pop	{r4, r5, r6, pc}
 8024112:	b3b1      	cbz	r1, 8024182 <__ieee754_sqrtf+0x86>
 8024114:	2a00      	cmp	r2, #0
 8024116:	da04      	bge.n	8024122 <__ieee754_sqrtf+0x26>
 8024118:	ee70 7a40 	vsub.f32	s15, s0, s0
 802411c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8024120:	bd70      	pop	{r4, r5, r6, pc}
 8024122:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8024126:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802412a:	d204      	bcs.n	8024136 <__ieee754_sqrtf+0x3a>
 802412c:	2100      	movs	r1, #0
 802412e:	0210      	lsls	r0, r2, #8
 8024130:	d528      	bpl.n	8024184 <__ieee754_sqrtf+0x88>
 8024132:	3901      	subs	r1, #1
 8024134:	1a5b      	subs	r3, r3, r1
 8024136:	3b7f      	subs	r3, #127	; 0x7f
 8024138:	f3c2 0216 	ubfx	r2, r2, #0, #23
 802413c:	07d9      	lsls	r1, r3, #31
 802413e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8024142:	bf48      	it	mi
 8024144:	0052      	lslmi	r2, r2, #1
 8024146:	1059      	asrs	r1, r3, #1
 8024148:	2300      	movs	r3, #0
 802414a:	0052      	lsls	r2, r2, #1
 802414c:	2419      	movs	r4, #25
 802414e:	461e      	mov	r6, r3
 8024150:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8024154:	1835      	adds	r5, r6, r0
 8024156:	4295      	cmp	r5, r2
 8024158:	bfde      	ittt	le
 802415a:	182e      	addle	r6, r5, r0
 802415c:	1b52      	suble	r2, r2, r5
 802415e:	181b      	addle	r3, r3, r0
 8024160:	3c01      	subs	r4, #1
 8024162:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024166:	ea4f 0050 	mov.w	r0, r0, lsr #1
 802416a:	d1f3      	bne.n	8024154 <__ieee754_sqrtf+0x58>
 802416c:	b112      	cbz	r2, 8024174 <__ieee754_sqrtf+0x78>
 802416e:	3301      	adds	r3, #1
 8024170:	f023 0301 	bic.w	r3, r3, #1
 8024174:	105b      	asrs	r3, r3, #1
 8024176:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 802417a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 802417e:	ee00 3a10 	vmov	s0, r3
 8024182:	bd70      	pop	{r4, r5, r6, pc}
 8024184:	0052      	lsls	r2, r2, #1
 8024186:	3101      	adds	r1, #1
 8024188:	e7d1      	b.n	802412e <__ieee754_sqrtf+0x32>

0802418a <fabs>:
 802418a:	ec53 2b10 	vmov	r2, r3, d0
 802418e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024192:	ec43 2b10 	vmov	d0, r2, r3
 8024196:	4770      	bx	lr

08024198 <finite>:
 8024198:	ee10 3a90 	vmov	r3, s1
 802419c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80241a0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80241a4:	0fc0      	lsrs	r0, r0, #31
 80241a6:	4770      	bx	lr

080241a8 <matherr>:
 80241a8:	2000      	movs	r0, #0
 80241aa:	4770      	bx	lr
 80241ac:	0000      	movs	r0, r0
	...

080241b0 <nan>:
 80241b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80241b8 <nan+0x8>
 80241b4:	4770      	bx	lr
 80241b6:	bf00      	nop
 80241b8:	00000000 	.word	0x00000000
 80241bc:	7ff80000 	.word	0x7ff80000

080241c0 <rint>:
 80241c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80241c2:	ec51 0b10 	vmov	r0, r1, d0
 80241c6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80241ca:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80241ce:	2e13      	cmp	r6, #19
 80241d0:	ee10 7a10 	vmov	r7, s0
 80241d4:	460b      	mov	r3, r1
 80241d6:	4602      	mov	r2, r0
 80241d8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80241dc:	dc58      	bgt.n	8024290 <rint+0xd0>
 80241de:	2e00      	cmp	r6, #0
 80241e0:	da2b      	bge.n	802423a <rint+0x7a>
 80241e2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80241e6:	4302      	orrs	r2, r0
 80241e8:	d023      	beq.n	8024232 <rint+0x72>
 80241ea:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80241ee:	4302      	orrs	r2, r0
 80241f0:	4251      	negs	r1, r2
 80241f2:	4311      	orrs	r1, r2
 80241f4:	0b09      	lsrs	r1, r1, #12
 80241f6:	0c5b      	lsrs	r3, r3, #17
 80241f8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80241fc:	045b      	lsls	r3, r3, #17
 80241fe:	ea41 0703 	orr.w	r7, r1, r3
 8024202:	4b31      	ldr	r3, [pc, #196]	; (80242c8 <rint+0x108>)
 8024204:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024208:	4639      	mov	r1, r7
 802420a:	e9d3 6700 	ldrd	r6, r7, [r3]
 802420e:	ee10 0a10 	vmov	r0, s0
 8024212:	4632      	mov	r2, r6
 8024214:	463b      	mov	r3, r7
 8024216:	f7dc f851 	bl	80002bc <__adddf3>
 802421a:	e9cd 0100 	strd	r0, r1, [sp]
 802421e:	463b      	mov	r3, r7
 8024220:	4632      	mov	r2, r6
 8024222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024226:	f7dc f847 	bl	80002b8 <__aeabi_dsub>
 802422a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802422e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8024232:	ec41 0b10 	vmov	d0, r0, r1
 8024236:	b003      	add	sp, #12
 8024238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802423a:	4c24      	ldr	r4, [pc, #144]	; (80242cc <rint+0x10c>)
 802423c:	4134      	asrs	r4, r6
 802423e:	ea01 0704 	and.w	r7, r1, r4
 8024242:	4307      	orrs	r7, r0
 8024244:	d0f5      	beq.n	8024232 <rint+0x72>
 8024246:	0861      	lsrs	r1, r4, #1
 8024248:	ea03 0001 	and.w	r0, r3, r1
 802424c:	4302      	orrs	r2, r0
 802424e:	d00b      	beq.n	8024268 <rint+0xa8>
 8024250:	ea23 0101 	bic.w	r1, r3, r1
 8024254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024258:	2e13      	cmp	r6, #19
 802425a:	fa43 f306 	asr.w	r3, r3, r6
 802425e:	bf0c      	ite	eq
 8024260:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8024264:	2200      	movne	r2, #0
 8024266:	430b      	orrs	r3, r1
 8024268:	4619      	mov	r1, r3
 802426a:	4b17      	ldr	r3, [pc, #92]	; (80242c8 <rint+0x108>)
 802426c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8024270:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024274:	4610      	mov	r0, r2
 8024276:	462b      	mov	r3, r5
 8024278:	4622      	mov	r2, r4
 802427a:	f7dc f81f 	bl	80002bc <__adddf3>
 802427e:	e9cd 0100 	strd	r0, r1, [sp]
 8024282:	4622      	mov	r2, r4
 8024284:	462b      	mov	r3, r5
 8024286:	e9dd 0100 	ldrd	r0, r1, [sp]
 802428a:	f7dc f815 	bl	80002b8 <__aeabi_dsub>
 802428e:	e7d0      	b.n	8024232 <rint+0x72>
 8024290:	2e33      	cmp	r6, #51	; 0x33
 8024292:	dd08      	ble.n	80242a6 <rint+0xe6>
 8024294:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024298:	d1cb      	bne.n	8024232 <rint+0x72>
 802429a:	ee10 2a10 	vmov	r2, s0
 802429e:	460b      	mov	r3, r1
 80242a0:	f7dc f80c 	bl	80002bc <__adddf3>
 80242a4:	e7c5      	b.n	8024232 <rint+0x72>
 80242a6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80242aa:	f04f 34ff 	mov.w	r4, #4294967295
 80242ae:	40f4      	lsrs	r4, r6
 80242b0:	4220      	tst	r0, r4
 80242b2:	d0be      	beq.n	8024232 <rint+0x72>
 80242b4:	0861      	lsrs	r1, r4, #1
 80242b6:	420f      	tst	r7, r1
 80242b8:	bf1f      	itttt	ne
 80242ba:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80242be:	ea27 0101 	bicne.w	r1, r7, r1
 80242c2:	4132      	asrne	r2, r6
 80242c4:	430a      	orrne	r2, r1
 80242c6:	e7cf      	b.n	8024268 <rint+0xa8>
 80242c8:	080316b8 	.word	0x080316b8
 80242cc:	000fffff 	.word	0x000fffff

080242d0 <scalbn>:
 80242d0:	b570      	push	{r4, r5, r6, lr}
 80242d2:	ec55 4b10 	vmov	r4, r5, d0
 80242d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80242da:	4606      	mov	r6, r0
 80242dc:	462b      	mov	r3, r5
 80242de:	b9b2      	cbnz	r2, 802430e <scalbn+0x3e>
 80242e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80242e4:	4323      	orrs	r3, r4
 80242e6:	d03c      	beq.n	8024362 <scalbn+0x92>
 80242e8:	2200      	movs	r2, #0
 80242ea:	4b33      	ldr	r3, [pc, #204]	; (80243b8 <scalbn+0xe8>)
 80242ec:	4629      	mov	r1, r5
 80242ee:	ee10 0a10 	vmov	r0, s0
 80242f2:	f7dc f995 	bl	8000620 <__aeabi_dmul>
 80242f6:	4a31      	ldr	r2, [pc, #196]	; (80243bc <scalbn+0xec>)
 80242f8:	4296      	cmp	r6, r2
 80242fa:	4604      	mov	r4, r0
 80242fc:	460d      	mov	r5, r1
 80242fe:	460b      	mov	r3, r1
 8024300:	da13      	bge.n	802432a <scalbn+0x5a>
 8024302:	a329      	add	r3, pc, #164	; (adr r3, 80243a8 <scalbn+0xd8>)
 8024304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024308:	f7dc f98a 	bl	8000620 <__aeabi_dmul>
 802430c:	e00a      	b.n	8024324 <scalbn+0x54>
 802430e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024312:	428a      	cmp	r2, r1
 8024314:	d10c      	bne.n	8024330 <scalbn+0x60>
 8024316:	ee10 2a10 	vmov	r2, s0
 802431a:	462b      	mov	r3, r5
 802431c:	4620      	mov	r0, r4
 802431e:	4629      	mov	r1, r5
 8024320:	f7db ffcc 	bl	80002bc <__adddf3>
 8024324:	4604      	mov	r4, r0
 8024326:	460d      	mov	r5, r1
 8024328:	e01b      	b.n	8024362 <scalbn+0x92>
 802432a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802432e:	3a36      	subs	r2, #54	; 0x36
 8024330:	4432      	add	r2, r6
 8024332:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024336:	428a      	cmp	r2, r1
 8024338:	dd0b      	ble.n	8024352 <scalbn+0x82>
 802433a:	ec45 4b11 	vmov	d1, r4, r5
 802433e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80243b0 <scalbn+0xe0>
 8024342:	f000 f83f 	bl	80243c4 <copysign>
 8024346:	a31a      	add	r3, pc, #104	; (adr r3, 80243b0 <scalbn+0xe0>)
 8024348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802434c:	ec51 0b10 	vmov	r0, r1, d0
 8024350:	e7da      	b.n	8024308 <scalbn+0x38>
 8024352:	2a00      	cmp	r2, #0
 8024354:	dd08      	ble.n	8024368 <scalbn+0x98>
 8024356:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802435a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802435e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024362:	ec45 4b10 	vmov	d0, r4, r5
 8024366:	bd70      	pop	{r4, r5, r6, pc}
 8024368:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802436c:	da0d      	bge.n	802438a <scalbn+0xba>
 802436e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024372:	429e      	cmp	r6, r3
 8024374:	ec45 4b11 	vmov	d1, r4, r5
 8024378:	dce1      	bgt.n	802433e <scalbn+0x6e>
 802437a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80243a8 <scalbn+0xd8>
 802437e:	f000 f821 	bl	80243c4 <copysign>
 8024382:	a309      	add	r3, pc, #36	; (adr r3, 80243a8 <scalbn+0xd8>)
 8024384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024388:	e7e0      	b.n	802434c <scalbn+0x7c>
 802438a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802438e:	3236      	adds	r2, #54	; 0x36
 8024390:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024394:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024398:	4620      	mov	r0, r4
 802439a:	4629      	mov	r1, r5
 802439c:	2200      	movs	r2, #0
 802439e:	4b08      	ldr	r3, [pc, #32]	; (80243c0 <scalbn+0xf0>)
 80243a0:	e7b2      	b.n	8024308 <scalbn+0x38>
 80243a2:	bf00      	nop
 80243a4:	f3af 8000 	nop.w
 80243a8:	c2f8f359 	.word	0xc2f8f359
 80243ac:	01a56e1f 	.word	0x01a56e1f
 80243b0:	8800759c 	.word	0x8800759c
 80243b4:	7e37e43c 	.word	0x7e37e43c
 80243b8:	43500000 	.word	0x43500000
 80243bc:	ffff3cb0 	.word	0xffff3cb0
 80243c0:	3c900000 	.word	0x3c900000

080243c4 <copysign>:
 80243c4:	ec53 2b10 	vmov	r2, r3, d0
 80243c8:	ee11 0a90 	vmov	r0, s3
 80243cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80243d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80243d4:	ea41 0300 	orr.w	r3, r1, r0
 80243d8:	ec43 2b10 	vmov	d0, r2, r3
 80243dc:	4770      	bx	lr
	...

080243e0 <_init>:
 80243e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243e2:	bf00      	nop
 80243e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80243e6:	bc08      	pop	{r3}
 80243e8:	469e      	mov	lr, r3
 80243ea:	4770      	bx	lr

080243ec <_fini>:
 80243ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243ee:	bf00      	nop
 80243f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80243f2:	bc08      	pop	{r3}
 80243f4:	469e      	mov	lr, r3
 80243f6:	4770      	bx	lr
